!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+n+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[n]:("00"+t[n]).substr((""+t[n]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[-a-zA-Z0-9:.]{1,256}+$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^[a-zA-Z0-9._:\-]{3,250}|^[a-zA-Z0-9._:\-]{3,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+-/=?^_${"`"}{|}~]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class n{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const n=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",n),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var a,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;a=e}else{if(a=l[0],!n.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(n.is_good_ipv4(a)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:a,mask:s}}if(n.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:a,mask:s}}return null}static fbits(t){const n=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var a=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(a));if(l<0||isNaN(l))l=0;else if(l>=n.length)return"> "+n[n.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+n[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+n[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var a=n.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static exports_format(t){if(void 0===t)return"-";var a=i18n_ext.exports.toLowerCase(),l=[a,"K "+a];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=n.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":n.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var a=n.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var a=n.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var a=n.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var a=n.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmillis(e){if(void 0===e)return"-";const t=n.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+"%"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,n=1048576,a=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<n?parseFloat((e/t).toFixed(2))+" KB":e>=n&&e<a?parseFloat((e/n).toFixed(2))+" MB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,n){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+n+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),n.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),n.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),n=t[0],a=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(n);)n=n.replace(l,"$1,$2");return n+a}static scaleValue(e,t,n,a){if(0==e)return[0,t[0]];let l=a?10*a:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(n)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(n,s)*l)/l,t[s]]}static formatValue(t,a){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==a&&(a=0);var l=n.scaleValue(t,["","K","M","G","T"],1e3,a);return l[0]+l[1]}static formatPackets(e){return n.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var a=n.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(a[0])+" "+a[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,a){a=a||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=n.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],a);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),n=Math.floor(e/3600-24*t),a=Math.floor(e/60-1440*t-60*n),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return n>0&&(n<10&&(s="0"),s+=n+":"),a<10&&(s+="0"),s+=a+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?n.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),a=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+n.secondsToTime(a)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var n in e=$(e),t){if(t.hasOwnProperty(n))$('<input type="hidden" name="'+n+'" value="'+t[n]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,n={};for(var a in e)n["key_"+t]=a,n["val_"+t]=e[a],t+=1;return n}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var n=window.location.hash;n||(n="#"+t),$('a[href="'+n+'"]',e).tab("show")}static _add_find_host_link(e,t,n){$("<input>").attr({type:"hidden",id:t,name:t,value:n}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,a){return a.context&&"historical"==a.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==a.type?n._add_find_host_link(t,"ip",a.ip):"mac"==a.type?n._add_find_host_link(t,"mac",a.mac):n._add_find_host_link(t,"name",a.hostname?a.hostname:a.name)):"mac"==a.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"network",a.network)):"snmp"==a.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),n._add_find_host_link(t,"snmp_port_idx",a.snmp_port_idx)):"snmp_device"==a.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"asn",a.asn)):(t.attr("action",e+"/lua/host_details.lua"),n._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,n){n=n||0;var a=parseInt(e.html())+n,l=d3.time.format(t)(new Date(1e3*a));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},n=("?"===e[0]?e.substr(1):e).split("&"),a=0;a<n.length;a++){var l=n[a].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=n.parseQuery(window.location.search),a=$.extend(t,e),l="?"+$.param(a,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,n){const a=200!=e;if(a&&null!=n){let a=i18n_ext.request_failed_message;e&&t&&(a+=`: ${e} - ${t}`),n.text(a).show()}else a&&null==n&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return a}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const n=$("#btn-confirm-import");n.attr("disabled","");const a=$("#import-input")[0].files[0];if(!a)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void n.removeAttr("disabled");const l=new FileReader;l.readAsText(a,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void n.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,n,a)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n_ext.manage_configurations.messagges.import_all_success:i18n_ext.manage_configurations.messagges.import_success;ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n_ext.success,body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{n.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},n=5e3){const a=new AbortController,l={...t,signal:a.signal};return setTimeout((()=>{a.abort()}),n),fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,n,a){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(n||l),s.fail(a||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},n=!1,a={}){const l=new URL(e,window.location);for(const[e,n]of Object.entries(t))(n||0===n)&&l.searchParams.set(e,n);if(n){const e=new URL(window.location.href);for(const[t,n]of Object.entries(a))n&&e.searchParams.set(t,n);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const n=new URL(e,window.location);return n.searchParams.set("pool_id",t),n.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const a=await fetch(n.getPoolLink(e,t)),l=await a.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const a=n.generateScaleElementKey(e);localStorage.setItem(a,JSON.stringify(t))}static generateScaleElementKey(e){let t;const n=location.pathname,a=e.attr("id");if(""!==a)t=a;else{t=e.attr("class")}return`${t}-${n}-scale`}static loadElementScale(e){const t=n.generateScaleElementKey(e),a=localStorage.getItem(t);if(null!=a)return JSON.parse(a)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,n){let a=e;if(e.length>t+5){let l=t;if(n){l=e.lastIndexOf(n);const s=e.slice(l);t>l&&(t=l),a=e.slice(0,t)+"... "+s}else a=e.slice(0,t)+"..."}return a}static sortAlphabetically(e,t){const n=e.label.toUpperCase(),a=t.label.toUpperCase();return n<a?-1:n>a?1:0}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,n,a){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${n}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${a}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${l.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.config;if(-1===a)return;if(void 0===s)return;const i=s[a],r=i.base_url||s[0].base_url,o=i.start_url||s[0].start_url;if(null!=r&&null!=o){const e=i.data[l].meta.url_query;location.href=`${r}?${o}${e}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${l.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function a(e,t){var n=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+n+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function r(e,t,n,a,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${n} ${s?"":"disabled"}" onclick="`+a+'" role="button">'+t+"</a>")}function o(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){n.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,n){var a,l={},s=e+"/lua/get_processes_graph_data.lua?host="+n;d3.json(s,(function(s,i){if(s)return console.warn(s);var r;(a=i).forEach((function(t){r=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+n+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:r,type:t.source_type,pid:t.source_pid}),r=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+n+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:r,type:t.target_type,pid:t.target_pid})}));var o=d3.scale.category10();o.proc="red",o.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(a).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",h),_.attr("transform",h)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return o[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,n=e.target.y-e.source.y,a=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+a+","+a+" 0 0,1 "+e.target.x+","+e.target.y}function h(e){return"translate("+e.x+","+e.y+")"}}))}});history.state&&history.state.zoom_level;class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),n=$(this).attr("name");e.inputs[`${t}[name='${n}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[n,a]of Object.entries(e.inputs))if(t.inputs[n]!=a)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,n]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(n),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,n){const a=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&a.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=a.parent().find(".spinner-border");a.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(n).val());return a.removeAttr("readonly"),e.hide(),t.rc<0?(n.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(n.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(n.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):n.validity.patternMismatch?(n.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):n.validity.rangeOverflow?(n.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):n.validity.rangeUnderflow?(n.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(n.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:a.data("validationMessage"),validationEmptyMessage:a.data("validationEmptyMessage"),cannotBeEmpty:"required"===a.attr("required")||1==a.data("validationNotEmpty"),resolveDNS:a.data("validationResolvedns"),rangeOverflowMessage:a.data("validationRangeOverflowMessage"),rangeUnderflowMessage:a.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof a.val()&&""==a.val().trim()},[t,n]=await s(e);let l=a.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(a.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(a.addClass("is-invalid"),a.parent().append(l),l.text(n))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),a.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),a.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,n){e&=n.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let n=this.options.beforeSumbit(this.data);n.csrf=this.csrf,n=$.extend(n,this.options.submitOptions),t.attr("disabled","disabled");const a=this;if(this.options.endpoint){let l;l="post"==a.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(n),method:a.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,n),this.isSubmitting=!0,l.done((function(t,l){a.isSubmitting=!1,a.currentState=null,a.options.resetAfterSubmit&&a.cleanForm(),e.hide();a.options.onSubmitSuccess(t,n,a)&&(a.dialog.modal?a.dialog.modal("hide"):(a.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(a.element).off("submit",a.submitHandler),a.delegateSubmit()})).fail((function(t,l,s){a.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),a.options.onSubmitError(i,n,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{a.currentState=null,e.hide();a.options.onSubmitSuccess({},n,a)&&(a.dialog.modal?a.dialog.modal("hide"):a.dialog[0].hidden=!0),$(a.element).off("submit",a.submitHandler),a.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const n=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const a=$(t).attr("name");$(t).val(n[a]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","Kms","Mms","Gms","Tms"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function p(e){let t=d[e],n=3;null!=t.decimal&&t.decimal>0&&(n=6);let a=0;return null!=t.um&&(a=Math.max(...t.um.map((e=>e.length)))),n+1+a}function _(e,t){let n=d[e];if(e==d.no_formatting.id||null==t)return null;null!=n.scale_values&&(t*=n.scale_values);let a=n.step;t<0&&(t*=-1);let l=0,s=n.um;for(;t>=a&&l<s.length;)t/=a,l+=1;return l}function f(e,t,n){let a=d[e];t|=a.absolute_value;return function(l){if(null==l)return"";if(e==d.no_formatting.id)return l;null!=a.scale_values&&(l*=a.scale_values);let s=l<0;s&&(l*=-1);let i=a.step,r=a.decimal,o=a.um,c=0;for(null!=a.max_value&&l>a.max_value&&(l=a.max_value);l>=i&&c<o.length&&!n||null!=n&&c<n;)l/=i,c+=1;return null!=r&&r>0?(l*=Math.pow(10,r),l=Math.round(l),l=(l/=Math.pow(10,r)).toFixed(r)):l=Math.round(l),s&&!t&&(l*=-1),`${`${l}`} ${`${o[c]}`}`}}const h={types:d,getUnitMeasureLen:p,getFormatter:f,getScaleFactorIndex:_};window.NtopUtils=n,window.datatableInitRefreshRows=function(e,t,n,a){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),r=e.data("dt-rr-ajax");a=a||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),r&&(r.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},h=l.options.url,m=!0,g=function(n){if("string"==typeof n&&(n=JSON.parse(n)),n){for(var s in n.data){var i=n.data[s],r=i[t];if(r&&u[r]){var c=u[r],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[o(e,_)],h=$(f),g=h.data("dt-rr-cur-val")||$(f).html(),v=a[_],b=i[_],y="";v&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(g))),h.data("dt-rr-cur-val",b),b=v(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:h,data:f,cache:!1,success:g}))}),n)),g(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var n;if("function"==typeof t)t.bind(this)(e);else for(n=0;n<t.length;n++)t[n].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=a,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,n,l){n&&$(n).removeAttr("disabled").removeClass("disabled");var r=$(e).closest("form");$(e).remove(),aysUpdateForm(r);var o=i(r);s(o)&&a(o,t),l&&window[l](e)},window.datatableAddButtonCallback=r,window.datatableAddDeleteButtonCallback=function(e,t,n){r.bind(this)(e,n,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,n,a=!0,l=""){r.bind(this)(e,n,"btn-info",t,"javascript:void(0)",a,l)},window.datatableAddFilterButtonCallback=function(e,t,n,a="",l=!0){r.bind(this)(e,n,"btn-warning",t,"javascript:void(0)",l,a)},window.datatableAddLinkButtonCallback=function(e,t,n,a=""){r.bind(this)(e,n,"btn-info","",t,!0,a)},window.datatableMakeSelectUnique=function(e,t,n){function a(e,t,n,a){$("[id^="+t+"]").each((function(){var t=n($(this));t[0]!=e[0]&&a(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var n=e.closest("select"),a=n.val()==e.val();if(e.attr("disabled","disabled"),a){var l=n.find("option:not([disabled])").first().val();n.val(l),n.attr("data-old-val",l)}}}function s(e,t,n){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",r=[];s==i&&(s=""),a($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),r.push(e)})),n($(this),s,i,r,l),$(this).attr("data-old-val",i)}var i=(n=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},n)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,n.selector_fn,n.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,n){e.val(""),a(e,t,n,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,n.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,n){var a=e.data("datatable").resultset.data.filter((function(e){return e[t]===n}));if(a)return a[0]},window.datatableGetColumnIndex=o,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,n){},onModalReset:function(e){}},e),n=new u(this,t);return n.delegateSubmit(),n},window.ebpfUtils=c,window.ntopFormatterUtils=h;var m={};window.makeUniqueValidator=function(e){return function(t){var n=t.val(),a=0;return!n||(e(t).each((function(){$(this).val()==n&&(a+=1)})),1==a)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),n=0;t.each((function(){""!=$(this).val()&&n++})),n==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var n=e.val();if(""===n.trim())return!0;var a=e.attr("name");m[a]||(m[a]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=m[a],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=n};l.last_val!==n?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:n},error:function(){e(l.valid)},success:function(t){var n=!!t.response;e(n)}})):e(l.valid)};return t?s():l.last_val===n||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const v=function(){let e={},t=[];return{ready:function(n){e[n]=!0,t.filter((e=>e.component_name==n)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=n))},on_ready:function(n){return new Promise(((a,l)=>{e[n]?a():t.push({resolve:a,component_name:n,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let n=0;n<e.length;n+=1){let a=this.clone(e[n]);t.push(a)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let n in e)t.push(e[n]);return t},check_and_set_default_interval_time:function(e){if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let n=y.get_status(),a=n.epoch_begin,l=n.epoch_end;if(null!=a&&null!=l){let e=Number.parseInt(a);Number.parseInt(l)-e<=300&&(t="DD/MMM/YYYY HH:mm:ss")}let s=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),s.format(t)},copy_object_keys:function(e,t,n=!1){if(null!=e)for(let a in e)null!=e[a]&&(1==n&&this.is_object(e[a])&&this.is_object(t[a])?this.copy_object_keys(e[a],t[a],n):t[a]=e[a])},set_http_globals_headers(t){e=t},http_request:async function(t,n,a,l){try{null==n&&(n={}),null==n.headers&&(n.headers={}),null!=n&&null!=n.headers&&null!=e&&(n.headers={...n.headers,...e});let a=await fetch(t,n);if(0==a.ok)return console.error(`http_request ${t}\n ok == false`),console.error(a),null;let s=await a.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==a)throw e;return null}},download_URI:function(e,t){var n=document.createElement("a");n.download=t,n.href=e,document.body.appendChild(n),n.click(),document.body.removeChild(n)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,n,a=0;if(0===e.length)return a;for(t=0;t<e.length;t++)n=e.charCodeAt(t),a=(a<<5)-a+n,a|=0;return a},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const n=e=>b.clone(e),a=function(e,a){for(let l in t){if(l==a)continue;(0,t[l])(n(e))}};return{get_status:function(){return n(e)},update_subscribers:function(){const e=this.get_status();a(e)},on_status_change:function(e,a,l){if(t[e]=a,1==l){let e=this.get_status();a(n(e))}},replace_status:function(t,n){!function(t){e=t}(t),a(t,n)},add_obj_to_status:function(e,t){let n=this.get_status();b.copy_object_keys(e,n),this.replace_status(n,t)},add_value_to_status:function(e,t,n){let a=this.get_status();a[e]=t,this.replace_status(a,n)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let n=this.get_url_entries(t);for(const[t,a]of n)if(t==e)return a;return null},get_url_object:function(e){let t=this.get_url_entries(e),n={};for(const[e,a]of t)n[e]=a;return n},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,n){e[t]=n},obj_to_url_params:function(t){let n=[];const a=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=a);let i=s(l,t[l]);n.push(i)}return n.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let n=this.get_url_search_params();n.set(e,t),this.replace_url(n.toString())},add_obj_to_url:function(e,t){let n=this.obj_to_url_params(e),a=this.get_url_search_params(t),l=this.get_url_entries(n);for(const[e,t]of l)a.set(e,t);let s=a.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C=function(){const e="events_manager";let t={},n={};const a=e=>b.clone(e),l=function(e,t,n){for(let l in e){if(l==n)continue;(0,e[l])(a(t))}};y.on_status_change(e,(function(e){for(let a in k){if(1==(0,S[a])(e,t)){let t=n[a];l(t,e)}}t=e}),!0);const s=function(e,t,a){let s=n[e];null!=s&&l(s,t,a)},i=function(e,t,l,s){if(null==n[t]&&(n[t]={}),1==s){let e=y.get_status();l(a(e))}n[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,n){i(e,t,n)},emit_event:function(t,n,a){s(t,n,a),y.add_obj_to_status(n,e)},on_event_change:function(e,t,n,a){i(e,t,n,a)}}}();function N(e,t,n,a,l){this.name=e,this.update_url=t,this.url_params=n,this.units=a,this.refresh=l,this.pieInterval;let s=[],i="",r=[],o=[],c=[];var u=[],d=[],p=[],_=function(e,t){var n=500,a=325,l=52,s=14,i=250,r=116;$(e).hasClass("pie-chart-small")&&(a=250,l=(r=(n=330)/5+15)/2);var o=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(r),d=d3.select(e).append("svg:svg").attr("width",n).attr("height",a).attr("viewBox","0 0 "+n+" "+a).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+n/2+","+a/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+n/2+","+a/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+n/2+","+a/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",r),f.append("svg:circle").attr("fill","white").attr("r",l);var h=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),h=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,o,m,h,c,i,u,_,f,r,s]}(e,a),f=_[0],h=_[1],m=_[2],g=_[4],v=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var n,a;d[t]?(n=d[t].startAngle,a=d[t].endAngle):!d[t]&&d[t-1]?(n=d[t-1].endAngle,a=d[t-1].endAngle):!d[t-1]&&d.length>0?(n=d[d.length-1].endAngle,a=d[d.length-1].endAngle):(n=0,a=0);t=d3.interpolate({startAngle:n,endAngle:a},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var n=t(e);return b(n)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var n=t(e);return b(n)}}function N(e,t){var n;n=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var a=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(n,a);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=h(s);var t=0;function n(e,n,a){return e.name=s[n].label,e.value=s[n].value,e.url=s[n].url,t+=e.value,e.value>0}(p=u.filter(n)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return g(t)})).transition().duration(v).attrTween("d",S),i.transition().duration(v).attrTween("d",S),i.exit().transition().duration(v).attrTween("d",C).remove(),r=y.selectAll("line").data(p),r.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),r.transition().duration(v).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),r.exit().remove(),o=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),o.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),o.transition().duration(v).attrTween("transform",N),o.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(v).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=v,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data"},N.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},N.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},N.prototype.setInterval=function(e){this.pieInterval=e},N.prototype.stopInterval=function(){clearInterval(this.pieInterval)},N.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const A={},E={db_analyze:function(e,t,n){const{dataPointIndex:a}=n,{filter:l}=n.w.config;let s;if(n.w.config.filtering_labels&&(s=n.w.config.filtering_labels[a]),n.w.config.labels&&n.w.config.labels[a],0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,n){},standard:function(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.w.config;if(-1===a)return;if(void 0===s)return;const i=s[a];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},T={format_bytes:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},P=T.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in A)throw new Error(`The widget ${e.name} is already defined!`);A[e.name]=e}static getWidgetByName(e){if(e in A)return A[e];throw new Error(`Widget ${e} not found!`)}}class M{constructor(e,t={},n=0,a={}){this._fetchedData=[],this.name=e,this._updateTime=n,this._datasource=t,this._additionalParams=a}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let n=ntopng_url_manager.get_url_entries(e);for(const[e,a]of n)t.searchParams.set(e,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[n,a]of Object.entries(e))t.searchParams.set(n,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const O=(e,t)=>{let n=t.position().top;const a=e.height(),l=$(window).height();if(a+n>=l){const s=l-n;s<=150?n=n-a+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${n}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");O(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");O(e,t)}}));const U=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return b.from_utc_to_server_date_format(e)}},a=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),a={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return b.copy_object_keys(a,t,!0),t}(),i=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),r=function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${l.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},o=function(){let t=b.clone(e),n={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:r}};return b.copy_object_keys(n,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(r){let c,u={};if(r==this.typeChart.TS_STACKED)u=b.clone(l),t(u);else if(r==this.typeChart.TS_LINE)u=b.clone(i),t(u);else if(r==this.typeChart.TS_COLUMN)u=b.clone(a),t(u);else if(r==this.typeChart.PIE)u=b.clone(s);else if(r==this.typeChart.BUBBLE)u=b.clone(o);else{if(r!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${r} unsupported`;u=b.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=n.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=n.bytesToSize)}b.copy_object_keys(t,u,!0),c=new ApexCharts(e,u),c.render()},to_data_uri:async function(e){if(null==c)return;return(await c.dataURI(e)).imgURI},destroyChart:function(){null!=c&&c.destroy()},updateChart:function(e){null!=c&&c.updateOptions(e,!1,!1,!1)},updateSeries:function(e){null!=c&&c.updateSeries(e)},registerEvent:function(e,t,n=!1){u.chart.events[e]=t,1==n&&c.updateOptions(u)}}}}}(),F=function(){let e={};return{addHandler:function(t){let n=e[t.handlerId];return null==n&&(n=[],e[t.handlerId]=n),n.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${n.length-1}')`},getHandler:function(t,n){let a=e[t];return null==a?null:a[n]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let n=F.getHandler(e,t);null!=n&&n()};class j{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${F.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,n)=>{let a="";if(e.handler){a=`onclick="${F.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${a}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){F.deleteHandlersById(e)}static setAjaxConfig(e,t,n="",a="get",l={}){return e.ajax={url:t,type:a,dataSrc:n,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),n=e%60,a=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(a)}:${t(n)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const n=t.get(e.paramName),a=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==n));if("function"==typeof e.cancelIf&&e.cancelIf(a))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==a&&(e.modalHandler.invokeModalInit(a),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const n=new URL(window.location.href);n.searchParams.delete(e.paramName),history.replaceState({},"",n.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const n=e.table().node().id;j._loadColumnsVisibility(e).then((function(a){let l=[-1];a.success?l=a.columns.map((e=>parseInt(e))):console.warn(a.message);const s=[],i=[],r=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const o=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let a=0;a<s.length;a++){const r=s[a];if(""==r.name)continue;const o=`toggle-${r.name.split().join("_")}`,c=-1===l.indexOf(r.index);if(!c){e.column(r.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${o}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${o}">\n                            ${r.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(a){$(".overlay").toggle(500);const l=e.column(r.index);l.visible(!l.visible());const s=l.visible(),o=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||o.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:n,columns:o.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),o.append(c.append(u)),r.find(".dt-search").parent().append(o)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class L{static alertSeverityAndType(e,t,n){return`${L.formatValueLabel(e,t,n)} ${L.formatValueLabel(n.alert_id,t,n)}`}static hideIfZero(e,t,a){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${n.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,a){return"display"===t?n.secondsToTime(e):e}static filterize(e,t,n,a,l,s){return`<a class='tag-filter' data-tag-key='${e}' title='${l||t}' data-tag-value='${t}' data-tag-label='${a||n||t}' href='#'>${s||n||t}</a>`}static formatValueLabel(e,t,n){if("display"!==t)return e.value;let a=e.label;return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatMessage(e,t,n){if("display"!==t)return e.value;let a=e.descr;return e.shorten_descr&&(a=`<span title="${e.descr}">${e.shorten_descr}</span>`),a}static formatSubtype(e,t,n){if("display"!==t)return e;return L.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,n,a){if("display"!==n)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),L.filterize(e,a[e].value,a[e].label,a[e].label,a[e].label)+" "+l}}static formatSNMPInterface(e,t,n){if("display"!==t)return e.value;let a=L.filterize("snmp_interface",e.value,e.label,e.label,e.label);return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatSNMPIP(e,t,n){return"display"!==t?e:L.filterize("ip",e,e,e,e)}static formatProbeIP(e,t,n){if("display"!==t)return e;return L.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,n){if("display"!==t)return e;let a="";void 0!==e.reference&&(a=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=L.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=L.filterize("ip",e.value,e.label,e.label,e.label_long)),n.vlan_id&&""!=n.vlan_id&&"0"!=n.vlan_id&&(i=L.filterize(l,`${s}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label_long}@${n.vlan_id}`)),e.country&&(i+=L.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),n.role&&"attacker"==n.role.value?i=i+" "+L.filterize("role",n.role.value,'<i class="fas fa-skull" title="'+n.role.label+'"></i>',n.role.label):n.role&&"victim"==n.role.value&&(i=i+" "+L.filterize("role",n.role.value,'<i class="fas fa-sad-tear" title="'+n.role.label+'"></i>',n.role.label)),n.role_cli_srv&&"client"==n.role_cli_srv.value?i=i+" "+L.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label):n.role_cli_srv&&"server"==n.role_cli_srv.value&&(i=i+" "+L.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label)),i+" "+a}static filterizeVlan(e,t,a,l,s,i){let r=l,o=s,c=i;return e.vlan&&0!=e.vlan.value&&(r=`${l}@${e.vlan.value}`,o=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),o=n.shortenLabel(o,16,"."),L.filterize(a,r,o,o,c)}static formatFlowTuple(e,t,n){let a=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=L.filterizeVlan(e,n,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=L.filterizeVlan(e,n,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=L.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+L.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let o="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),o=L.filterizeVlan(e,n,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else o=L.filterizeVlan(e,n,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+L.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=L.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return n.cli_role&&("attacker"==n.cli_role.value?p+=L.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label):"victim"==n.cli_role.value&&(p+=L.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label))),n.srv_role&&("attacker"==n.srv_role.value?_+=L.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label):"victim"==n.srv_role.value&&(_+=L.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label))),`${a} ${l}${r}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${o}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,n){if("display"!==t)return e.name;return L.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,n,a,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const n=Object.create(null),a=e.split(",");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}window.do_pie=function(e,t,n,a,l){var s=new N(e,t,n,a,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=j,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:n,filters:a,columnIndex:l,icon:s=null,extraAttributes:i="",id:r=null,url:o=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=a,this.tableAPI=e,this.filterTitle=n,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=r,this.url=o,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const n=new RegExp(e);return t.filter((e=>n.test(e))).length}_createMenuEntry(e){const t=this;let n=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(n=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const a=n.html();t.$dropdown.title.html(a),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${a})</span>`);0==a&&n.hide(),n.append(l)}return n.on("click",(function(a){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=n.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const n=new URLSearchParams(t.urlParams);n.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,n.toString(),window.history.pushState("","",window.location.pathname+"?"+n.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),n}_createFilters(e){const t={};for(const n of e){const e=this._createMenuEntry(n);t[n.key]={filter:n,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),n=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),a=$(`<span class='filter-title'>${this.filterTitle}</span>`);n.append(a),this.$dropdown={container:t,title:a,button:n},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(n),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(t.filter.regex,e);0==n?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${n})`),this.$dropdown.button.find(".counter").text(`(${n})`)}}},window.DataTableRenders=L,window.ChartWidget=class extends M{constructor(e,t="line",n={},a=0,l={}){super(e,n,a,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,n){setTimeout((async()=>{try{const a=I.getWidgetByName(e),l={chart:{events:{[t]:n}}};await a._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},t.tooltip){for(const n in t.tooltip)if("x"===n||"y"===n||"z"===n){const a=t.tooltip[n].formatter;e.tooltip[n]||(e.tooltip[n]={}),e.tooltip[n].formatter=T[a]||NtopUtils[a]}t.tooltip.custom&&(e.tooltip.custom=T[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const n=e[t];if(void 0!==n&&void 0!==n.labels&&void 0!==n.labels.ntop_utils_formatter&&"none"!==n.labels.ntop_utils_formatter){const e=n.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):n.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[n,a]of Object.entries(t.dataLabels))e.dataLabels[n]=a;let n=e.dataLabels.formatter;n&&T[n]&&(e.dataLabels.formatter=T[n])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,n=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const a of n)void 0!==t[a]&&(void 0!==e[a]?e[a]=Object.assign(e[a],t[a]):e[a]=t[a]);if(t.events)for(const n in t.events)e.chart.events[n]=E[t.events[n]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:n,labels:a,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),n){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&T[e]?T[e]:P}a&&(this._chartConfig.labels=a),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=U,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const R=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),z=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(_e(e)){const t={};for(let n=0;n<e.length;n++){const a=e[n],l=ve(a)?G(a):V(a);if(l)for(const e in l)t[e]=l[e]}return t}return ve(e)||ye(e)?e:void 0}const q=/;(?![^(]*\))/g,H=/:(.+)/;function G(e){const t={};return e.split(q).forEach((e=>{if(e){const n=e.split(H);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function W(e){let t="";if(ve(e))t=e;else if(_e(e))for(let n=0;n<e.length;n++){const a=W(e[n]);a&&(t+=a+" ")}else if(ye(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function K(e){if(!e)return null;let{class:t,style:n}=e;return t&&!ve(t)&&(e.class=W(t)),n&&(e.style=V(n)),e}const J=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Y=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),Z=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function X(e,t){if(e===t)return!0;let n=me(e),a=me(t);if(n||a)return!(!n||!a)&&e.getTime()===t.getTime();if(n=be(e),a=be(t),n||a)return e===t;if(n=_e(e),a=_e(t),n||a)return!(!n||!a)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let a=0;n&&a<e.length;a++)n=X(e[a],t[a]);return n}(e,t);if(n=ye(e),a=ye(t),n||a){if(!n||!a)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const a=e.hasOwnProperty(n),l=t.hasOwnProperty(n);if(a&&!l||!a&&l||!X(e[n],t[n]))return!1}}return String(e)===String(t)}function Q(e,t){return e.findIndex((e=>X(e,t)))}const ee=e=>ve(e)?e:null==e?"":_e(e)||ye(e)&&(e.toString===xe||!ge(e.toString))?JSON.stringify(e,te,2):String(e),te=(e,t)=>t&&t.__v_isRef?te(e,t.value):fe(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:he(t)?{[`Set(${t.size})`]:[...t.values()]}:!ye(t)||_e(t)||$e(t)?t:String(t),ne={},ae=[],le=()=>{},se=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),oe=e=>e.startsWith("onUpdate:"),ce=Object.assign,ue=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},de=Object.prototype.hasOwnProperty,pe=(e,t)=>de.call(e,t),_e=Array.isArray,fe=e=>"[object Map]"===ke(e),he=e=>"[object Set]"===ke(e),me=e=>"[object Date]"===ke(e),ge=e=>"function"==typeof e,ve=e=>"string"==typeof e,be=e=>"symbol"==typeof e,ye=e=>null!==e&&"object"==typeof e,we=e=>ye(e)&&ge(e.then)&&ge(e.catch),xe=Object.prototype.toString,ke=e=>xe.call(e),$e=e=>"[object Object]"===ke(e),Se=e=>ve(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ne=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ae=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ee=/-(\w)/g,Te=Ae((e=>e.replace(Ee,((e,t)=>t?t.toUpperCase():"")))),Pe=/\B([A-Z])/g,Ie=Ae((e=>e.replace(Pe,"-$1").toLowerCase())),Me=Ae((e=>e.charAt(0).toUpperCase()+e.slice(1))),Oe=Ae((e=>e?`on${Me(e)}`:"")),Ue=(e,t)=>!Object.is(e,t),Fe=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},je=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Le=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,Re;class ze{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Re&&(this.parent=Re,this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Re;try{return Re=this,e()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new ze(e)}function Ve(e,t=Re){t&&t.active&&t.effects.push(e)}function qe(){return Re}function He(e){Re&&Re.cleanups.push(e)}const Ge=e=>{const t=new Set(e);return t.w=0,t.n=0,t},We=e=>(e.w&Xe)>0,Ke=e=>(e.n&Xe)>0,Je=new WeakMap;let Ye,Ze=0,Xe=1;const Qe=Symbol(""),et=Symbol("");class tt{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,n)}run(){if(!this.active)return this.fn();let e=Ye,t=st;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ye,Ye=this,st=!0,Xe=1<<++Ze,Ze<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Xe})(this):nt(this),this.fn()}finally{Ze<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let a=0;a<t.length;a++){const l=t[a];We(l)&&!Ke(l)?l.delete(e):t[n++]=l,l.w&=~Xe,l.n&=~Xe}t.length=n}})(this),Xe=1<<--Ze,Ye=this.parent,st=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ye===this?this.deferStop=!0:this.active&&(nt(this),this.onStop&&this.onStop(),this.active=!1)}}function nt(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function at(e,t){e.effect&&(e=e.effect.fn);const n=new tt(e);t&&(ce(n,t),t.scope&&Ve(n,t.scope)),t&&t.lazy||n.run();const a=n.run.bind(n);return a.effect=n,a}function lt(e){e.effect.stop()}let st=!0;const it=[];function rt(){it.push(st),st=!1}function ot(){const e=it.pop();st=void 0===e||e}function ct(e,t,n){if(st&&Ye){let t=Je.get(e);t||Je.set(e,t=new Map);let a=t.get(n);a||t.set(n,a=Ge()),ut(a)}}function ut(e,t){let n=!1;Ze<=30?Ke(e)||(e.n|=Xe,n=!We(e)):n=!e.has(Ye),n&&(e.add(Ye),Ye.deps.push(e))}function dt(e,t,n,a,l,s){const i=Je.get(e);if(!i)return;let r=[];if("clear"===t)r=[...i.values()];else if("length"===n&&_e(e))i.forEach(((e,t)=>{("length"===t||t>=a)&&r.push(e)}));else switch(void 0!==n&&r.push(i.get(n)),t){case"add":_e(e)?Se(n)&&r.push(i.get("length")):(r.push(i.get(Qe)),fe(e)&&r.push(i.get(et)));break;case"delete":_e(e)||(r.push(i.get(Qe)),fe(e)&&r.push(i.get(et)));break;case"set":fe(e)&&r.push(i.get(Qe))}if(1===r.length)r[0]&&pt(r[0]);else{const e=[];for(const t of r)t&&e.push(...t);pt(Ge(e))}}function pt(e,t){const n=_e(e)?e:[...e];for(const e of n)e.computed&&_t(e);for(const e of n)e.computed||_t(e)}function _t(e,t){(e!==Ye||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const ft=D("__proto__,__v_isRef,__isVue"),ht=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(be)),mt=wt(),gt=wt(!1,!0),vt=wt(!0),bt=wt(!0,!0),yt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=on(this);for(let e=0,t=this.length;e<t;e++)ct(n,0,e+"");const a=n[t](...e);return-1===a||!1===a?n[t](...e.map(on)):a}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const n=on(this)[t].apply(this,e);return ot(),n}})),e}();function wt(e=!1,t=!1){return function(n,a,l){if("__v_isReactive"===a)return!e;if("__v_isReadonly"===a)return e;if("__v_isShallow"===a)return t;if("__v_raw"===a&&l===(e?t?Zt:Yt:t?Jt:Kt).get(n))return n;const s=_e(n);if(!e&&s&&pe(yt,a))return Reflect.get(yt,a,l);const i=Reflect.get(n,a,l);return(be(a)?ht.has(a):ft(a))?i:(e||ct(n,0,a),t?i:fn(i)?s&&Se(a)?i:i.value:ye(i)?e?en(i):Xt(i):i)}}function xt(e=!1){return function(t,n,a,l){let s=t[n];if(ln(s)&&fn(s)&&!fn(a))return!1;if(!e&&!ln(a)&&(sn(a)||(a=on(a),s=on(s)),!_e(t)&&fn(s)&&!fn(a)))return s.value=a,!0;const i=_e(t)&&Se(n)?Number(n)<t.length:pe(t,n),r=Reflect.set(t,n,a,l);return t===on(l)&&(i?Ue(a,s)&&dt(t,"set",n,a):dt(t,"add",n,a)),r}}const kt={get:mt,set:xt(),deleteProperty:function(e,t){const n=pe(e,t),a=Reflect.deleteProperty(e,t);return a&&n&&dt(e,"delete",t,void 0),a},has:function(e,t){const n=Reflect.has(e,t);return be(t)&&ht.has(t)||ct(e,0,t),n},ownKeys:function(e){return ct(e,0,_e(e)?"length":Qe),Reflect.ownKeys(e)}},$t={get:vt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},St=ce({},kt,{get:gt,set:xt(!0)}),Ct=ce({},$t,{get:bt}),Nt=e=>e,At=e=>Reflect.getPrototypeOf(e);function Et(e,t,n=!1,a=!1){const l=on(e=e.__v_raw),s=on(t);n||(t!==s&&ct(l,0,t),ct(l,0,s));const{has:i}=At(l),r=a?Nt:n?dn:un;return i.call(l,t)?r(e.get(t)):i.call(l,s)?r(e.get(s)):void(e!==l&&e.get(t))}function Tt(e,t=!1){const n=this.__v_raw,a=on(n),l=on(e);return t||(e!==l&&ct(a,0,e),ct(a,0,l)),e===l?n.has(e):n.has(e)||n.has(l)}function Pt(e,t=!1){return e=e.__v_raw,!t&&ct(on(e),0,Qe),Reflect.get(e,"size",e)}function It(e){e=on(e);const t=on(this);return At(t).has.call(t,e)||(t.add(e),dt(t,"add",e,e)),this}function Mt(e,t){t=on(t);const n=on(this),{has:a,get:l}=At(n);let s=a.call(n,e);s||(e=on(e),s=a.call(n,e));const i=l.call(n,e);return n.set(e,t),s?Ue(t,i)&&dt(n,"set",e,t):dt(n,"add",e,t),this}function Ot(e){const t=on(this),{has:n,get:a}=At(t);let l=n.call(t,e);l||(e=on(e),l=n.call(t,e)),a&&a.call(t,e);const s=t.delete(e);return l&&dt(t,"delete",e,void 0),s}function Ut(){const e=on(this),t=0!==e.size,n=e.clear();return t&&dt(e,"clear",void 0,void 0),n}function Ft(e,t){return function(n,a){const l=this,s=l.__v_raw,i=on(s),r=t?Nt:e?dn:un;return!e&&ct(i,0,Qe),s.forEach(((e,t)=>n.call(a,r(e),r(t),l)))}}function jt(e,t,n){return function(...a){const l=this.__v_raw,s=on(l),i=fe(s),r="entries"===e||e===Symbol.iterator&&i,o="keys"===e&&i,c=l[e](...a),u=n?Nt:t?dn:un;return!t&&ct(s,0,o?et:Qe),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:r?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Lt(e){return function(...t){return"delete"!==e&&this}}const[Dt,Rt,zt,Bt]=function(){const e={get(e){return Et(this,e)},get size(){return Pt(this)},has:Tt,add:It,set:Mt,delete:Ot,clear:Ut,forEach:Ft(!1,!1)},t={get(e){return Et(this,e,!1,!0)},get size(){return Pt(this)},has:Tt,add:It,set:Mt,delete:Ot,clear:Ut,forEach:Ft(!1,!0)},n={get(e){return Et(this,e,!0)},get size(){return Pt(this,!0)},has(e){return Tt.call(this,e,!0)},add:Lt("add"),set:Lt("set"),delete:Lt("delete"),clear:Lt("clear"),forEach:Ft(!0,!1)},a={get(e){return Et(this,e,!0,!0)},get size(){return Pt(this,!0)},has(e){return Tt.call(this,e,!0)},add:Lt("add"),set:Lt("set"),delete:Lt("delete"),clear:Lt("clear"),forEach:Ft(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=jt(l,!1,!1),n[l]=jt(l,!0,!1),t[l]=jt(l,!1,!0),a[l]=jt(l,!0,!0)})),[e,n,t,a]}();function Vt(e,t){const n=t?e?Bt:zt:e?Rt:Dt;return(t,a,l)=>"__v_isReactive"===a?!e:"__v_isReadonly"===a?e:"__v_raw"===a?t:Reflect.get(pe(n,a)&&a in t?n:t,a,l)}const qt={get:Vt(!1,!1)},Ht={get:Vt(!1,!0)},Gt={get:Vt(!0,!1)},Wt={get:Vt(!0,!0)},Kt=new WeakMap,Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap;function Xt(e){return ln(e)?e:nn(e,!1,kt,qt,Kt)}function Qt(e){return nn(e,!1,St,Ht,Jt)}function en(e){return nn(e,!0,$t,Gt,Yt)}function tn(e){return nn(e,!0,Ct,Wt,Zt)}function nn(e,t,n,a,l){if(!ye(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>ke(e).slice(8,-1))(e))}(e);if(0===i)return e;const r=new Proxy(e,2===i?a:n);return l.set(e,r),r}function an(e){return ln(e)?an(e.__v_raw):!(!e||!e.__v_isReactive)}function ln(e){return!(!e||!e.__v_isReadonly)}function sn(e){return!(!e||!e.__v_isShallow)}function rn(e){return an(e)||ln(e)}function on(e){const t=e&&e.__v_raw;return t?on(t):e}function cn(e){return je(e,"__v_skip",!0),e}const un=e=>ye(e)?Xt(e):e,dn=e=>ye(e)?en(e):e;function pn(e){st&&Ye&&ut((e=on(e)).dep||(e.dep=Ge()))}function _n(e,t){(e=on(e)).dep&&pt(e.dep)}function fn(e){return!(!e||!0!==e.__v_isRef)}function hn(e){return gn(e,!1)}function mn(e){return gn(e,!0)}function gn(e,t){return fn(e)?e:new vn(e,t)}class vn{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:on(e),this._value=t?e:un(e)}get value(){return pn(this),this._value}set value(e){e=this.__v_isShallow?e:on(e),Ue(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:un(e),_n(this))}}function bn(e){_n(e)}function yn(e){return fn(e)?e.value:e}const wn={get:(e,t,n)=>yn(Reflect.get(e,t,n)),set:(e,t,n,a)=>{const l=e[t];return fn(l)&&!fn(n)?(l.value=n,!0):Reflect.set(e,t,n,a)}};function xn(e){return an(e)?e:new Proxy(e,wn)}class kn{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>pn(this)),(()=>_n(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function $n(e){return new kn(e)}function Sn(e){const t=_e(e)?new Array(e.length):{};for(const n in e)t[n]=Nn(e,n);return t}class Cn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Nn(e,t,n){const a=e[t];return fn(a)?a:new Cn(e,t,n)}class An{constructor(e,t,n,a){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new tt(e,(()=>{this._dirty||(this._dirty=!0,_n(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const e=on(this);return pn(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const En=[];function Tn(e,...t){rt();const n=En.length?En[En.length-1].component:null,a=n&&n.appContext.config.warnHandler,l=function(){let e=En[En.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const a=e.component&&e.component.parent;e=a&&a.vnode}return t}();if(a)Mn(a,n,11,[e+t.join(""),n&&n.proxy,l.map((({vnode:e})=>`at <${bi(n,e.type)}>`)).join("\n"),l]);else{const n=[`[Vue warn]: ${e}`,...t];l.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",a=` at <${bi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+n;return e.props?[a,...Pn(e.props),l]:[a+l]}(e))})),t}(l)),console.warn(...n)}ot()}function Pn(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...In(n,e[n]))})),n.length>3&&t.push(" ..."),t}function In(e,t,n){return ve(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:fn(t)?(t=In(e,on(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=on(t),n?t:[`${e}=`,t])}function Mn(e,t,n,a){let l;try{l=a?e(...a):e()}catch(e){Un(e,t,n)}return l}function On(e,t,n,a){if(ge(e)){const l=Mn(e,t,n,a);return l&&we(l)&&l.catch((e=>{Un(e,t,n)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(On(e[s],t,n,a));return l}function Un(e,t,n,a=!0){if(t){let a=t.parent;const l=t.proxy,s=n;for(;a;){const t=a.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,l,s))return;a=a.parent}const i=t.appContext.config.errorHandler;if(i)return void Mn(i,null,10,[e,l,s])}!function(e,t,n,a=!0){console.error(e)}(e,0,0,a)}let Fn=!1,jn=!1;const Ln=[];let Dn=0;const Rn=[];let zn=null,Bn=0;const Vn=[];let qn=null,Hn=0;const Gn=Promise.resolve();let Wn=null,Kn=null;function Jn(e){const t=Wn||Gn;return e?t.then(this?e.bind(this):e):t}function Yn(e){Ln.length&&Ln.includes(e,Fn&&e.allowRecurse?Dn+1:Dn)||e===Kn||(null==e.id?Ln.push(e):Ln.splice(function(e){let t=Dn+1,n=Ln.length;for(;t<n;){const a=t+n>>>1;na(Ln[a])<e?t=a+1:n=a}return t}(e.id),0,e),Zn())}function Zn(){Fn||jn||(jn=!0,Wn=Gn.then(aa))}function Xn(e,t,n,a){_e(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?a+1:a)||n.push(e),Zn()}function Qn(e){Xn(e,qn,Vn,Hn)}function ea(e,t=null){if(Rn.length){for(Kn=t,zn=[...new Set(Rn)],Rn.length=0,Bn=0;Bn<zn.length;Bn++)zn[Bn]();zn=null,Bn=0,Kn=null,ea(e,t)}}function ta(e){if(ea(),Vn.length){const e=[...new Set(Vn)];if(Vn.length=0,qn)return void qn.push(...e);for(qn=e,qn.sort(((e,t)=>na(e)-na(t))),Hn=0;Hn<qn.length;Hn++)qn[Hn]();qn=null,Hn=0}}const na=e=>null==e.id?1/0:e.id;function aa(e){jn=!1,Fn=!0,ea(e),Ln.sort(((e,t)=>na(e)-na(t)));try{for(Dn=0;Dn<Ln.length;Dn++){const e=Ln[Dn];e&&!1!==e.active&&Mn(e,null,14)}}finally{Dn=0,Ln.length=0,ta(),Fn=!1,Wn=null,(Ln.length||Rn.length||Vn.length)&&aa(e)}}let la,sa=[];function ia(e,t){var n,a;la=e,la?(la.enabled=!0,sa.forEach((({event:e,args:t})=>la.emit(e,...t))),sa=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(a=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===a?void 0:a.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ia(e,t)})),setTimeout((()=>{la||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sa=[])}),3e3)):sa=[]}function ra(e,t,...n){if(e.isUnmounted)return;const a=e.vnode.props||ne;let l=n;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in a){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=a[e]||ne;s&&(l=n.map((e=>e.trim()))),t&&(l=n.map(Le))}let r,o=a[r=Oe(t)]||a[r=Oe(Te(t))];!o&&s&&(o=a[r=Oe(Ie(t))]),o&&On(o,e,6,l);const c=a[r+"Once"];if(c){if(e.emitted){if(e.emitted[r])return}else e.emitted={};e.emitted[r]=!0,On(c,e,6,l)}}function oa(e,t,n=!1){const a=t.emitsCache,l=a.get(e);if(void 0!==l)return l;const s=e.emits;let i={},r=!1;if(!ge(e)){const a=e=>{const n=oa(e,t,!0);n&&(r=!0,ce(i,n))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return s||r?(_e(s)?s.forEach((e=>i[e]=null)):ce(i,s),a.set(e,i),i):(a.set(e,null),null)}function ca(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let ua=null,da=null;function pa(e){const t=ua;return ua=e,da=e&&e.type.__scopeId||null,t}function _a(e){da=e}function fa(){da=null}const ha=e=>ma;function ma(e,t=ua,n){if(!t)return e;if(e._n)return e;const a=(...n)=>{a._d&&Ms(-1);const l=pa(t),s=e(...n);return pa(l),a._d&&Ms(1),s};return a._n=!0,a._c=!0,a._d=!0,a}function ga(e){const{type:t,vnode:n,proxy:a,withProxy:l,props:s,propsOptions:[i],slots:r,attrs:o,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:h}=e;let m,g;const v=pa(e);try{if(4&n.shapeFlag){const e=l||a;m=Ys(u.call(e,e,d,s,_,p,f)),g=o}else{m=Ys(t(s,t.length>1?{attrs:o,slots:r,emit:c}:null)),g=t.props?o:va(o)}}catch(t){As.length=0,Un(t,e,1),m=qs(Cs)}let b=m;if(g&&!1!==h){const e=Object.keys(g),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(oe)&&(g=ba(g,i)),b=Gs(b,g))}return n.dirs&&(b=Gs(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,pa(v),m}const va=e=>{let t;for(const n in e)("class"===n||"style"===n||re(n))&&((t||(t={}))[n]=e[n]);return t},ba=(e,t)=>{const n={};for(const a in e)oe(a)&&a.slice(9)in t||(n[a]=e[a]);return n};function ya(e,t,n){const a=Object.keys(t);if(a.length!==Object.keys(e).length)return!0;for(let l=0;l<a.length;l++){const s=a[l];if(t[s]!==e[s]&&!ca(n,s))return!0}return!1}function wa({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const xa=e=>e.__isSuspense,ka={name:"Suspense",__isSuspense:!0,process(e,t,n,a,l,s,i,r,o,c){null==e?function(e,t,n,a,l,s,i,r,o){const{p:c,o:{createElement:u}}=o,d=u("div"),p=e.suspense=Sa(e,l,a,t,d,n,s,i,r,o);c(null,p.pendingBranch=e.ssContent,d,null,a,p,s,i),p.deps>0?($a(e,"onPending"),$a(e,"onFallback"),c(null,e.ssFallback,t,n,a,null,s,i),Aa(p,e.ssFallback)):p.resolve()}(t,n,a,l,s,i,r,o,c):function(e,t,n,a,l,s,i,r,{p:o,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:h,isInFallback:m,isHydrating:g}=d;if(h)d.pendingBranch=p,Ls(p,h)?(o(h,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0?d.resolve():m&&(o(f,_,n,a,l,null,s,i,r),Aa(d,_))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=h):c(h,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0?d.resolve():(o(f,_,n,a,l,null,s,i,r),Aa(d,_))):f&&Ls(p,f)?(o(f,p,n,a,l,d,s,i,r),d.resolve(!0)):(o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0&&d.resolve()));else if(f&&Ls(p,f))o(f,p,n,a,l,d,s,i,r),Aa(d,p);else if($a(t,"onPending"),d.pendingBranch=p,d.pendingId++,o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,n,a,l,i,r,o,c)},hydrate:function(e,t,n,a,l,s,i,r,o){const c=t.suspense=Sa(t,a,n,e.parentNode,document.createElement("div"),null,l,s,i,r,!0),u=o(e,c.pendingBranch=t.ssContent,n,c,s,i);return 0===c.deps&&c.resolve(),u},create:Sa,normalize:function(e){const{shapeFlag:t,children:n}=e,a=32&t;e.ssContent=Ca(a?n.default:n),e.ssFallback=a?Ca(n.fallback):qs(Cs)}};function $a(e,t){const n=e.props&&e.props[t];ge(n)&&n()}function Sa(e,t,n,a,l,s,i,r,o,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:h,remove:m}}=c,g=Le(e.props&&e.props.timeout),v={vnode:e,parent:t,parentComponent:n,isSVG:i,container:a,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof g?g:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:a,pendingId:l,effects:s,parentComponent:i,container:r}=v;if(v.isHydrating)v.isHydrating=!1;else if(!e){const e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{l===v.pendingId&&p(a,r,t,0)});let{anchor:t}=v;n&&(t=f(n),_(n,i,v,!0)),e||p(a,r,t,0)}Aa(v,a),v.pendingBranch=null,v.isInFallback=!1;let o=v.parent,c=!1;for(;o;){if(o.pendingBranch){o.effects.push(...s),c=!0;break}o=o.parent}c||Qn(s),v.effects=[],$a(t,"onResolve")},fallback(e){if(!v.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:a,container:l,isSVG:s}=v;$a(t,"onFallback");const i=f(n),c=()=>{v.isInFallback&&(d(null,e,l,i,a,null,s,r,o),Aa(v,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),v.isInFallback=!0,_(n,a,null,!0),u||c()},move(e,t,n){v.activeBranch&&p(v.activeBranch,e,t,n),v.container=e},next:()=>v.activeBranch&&f(v.activeBranch),registerDep(e,t){const n=!!v.pendingBranch;n&&v.deps++;const a=e.vnode.el;e.asyncDep.catch((t=>{Un(t,e,0)})).then((l=>{if(e.isUnmounted||v.isUnmounted||v.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;di(e,l,!1),a&&(s.el=a);const r=!a&&e.subTree.el;t(e,s,h(a||e.subTree.el),a?null:f(e.subTree),v,i,o),r&&m(r),wa(e,s.el),n&&0==--v.deps&&v.resolve()}))},unmount(e,t){v.isUnmounted=!0,v.activeBranch&&_(v.activeBranch,n,e,t),v.pendingBranch&&_(v.pendingBranch,n,e,t)}};return v}function Ca(e){let t;if(ge(e)){const n=Is&&e._c;n&&(e._d=!1,Ts()),e=e(),n&&(e._d=!0,t=Es,Ps())}if(_e(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const a=e[n];if(!js(a))return;if(a.type!==Cs||"v-if"===a.children){if(t)return;t=a}}return t}(e);e=t}return e=Ys(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Na(e,t){t&&t.pendingBranch?_e(e)?t.effects.push(...e):t.effects.push(e):Qn(e)}function Aa(e,t){e.activeBranch=t;const{vnode:n,parentComponent:a}=e,l=n.el=t.el;a&&a.subTree===n&&(a.vnode.el=l,wa(a,l))}function Ea(e,t){if(ai){let n=ai.provides;const a=ai.parent&&ai.parent.provides;a===n&&(n=ai.provides=Object.create(a)),n[e]=t}}function Ta(e,t,n=!1){const a=ai||ua;if(a){const l=null==a.parent?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return n&&ge(t)?t.call(a.proxy):t}}function Pa(e,t){return Fa(e,null,t)}function Ia(e,t){return Fa(e,null,{flush:"post"})}function Ma(e,t){return Fa(e,null,{flush:"sync"})}const Oa={};function Ua(e,t,n){return Fa(e,t,n)}function Fa(e,t,{immediate:n,deep:a,flush:l}=ne){const s=ai;let i,r,o=!1,c=!1;if(fn(e)?(i=()=>e.value,o=sn(e)):an(e)?(i=()=>e,a=!0):_e(e)?(c=!0,o=e.some((e=>an(e)||sn(e))),i=()=>e.map((e=>fn(e)?e.value:an(e)?Da(e):ge(e)?Mn(e,s,2):void 0))):i=ge(e)?t?()=>Mn(e,s,2):()=>{if(!s||!s.isUnmounted)return r&&r(),On(e,s,3,[u])}:le,t&&a){const e=i;i=()=>Da(e())}let u=e=>{r=f.onStop=()=>{Mn(e,s,4)}},d=c?[]:Oa;const p=()=>{if(f.active)if(t){const e=f.run();(a||o||(c?e.some(((e,t)=>Ue(e,d[t]))):Ue(e,d)))&&(r&&r(),On(t,s,3,[e,d===Oa?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>_s(p,s&&s.suspense):()=>function(e){Xn(e,zn,Rn,Bn)}(p);const f=new tt(i,_);return t?n?p():d=f.run():"post"===l?_s(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&ue(s.scope.effects,f)}}function ja(e,t,n){const a=this.proxy,l=ve(e)?e.includes(".")?La(a,e):()=>a[e]:e.bind(a,a);let s;ge(t)?s=t:(s=t.handler,n=t);const i=ai;si(this);const r=Fa(l,s.bind(a),n);return i?si(i):ii(),r}function La(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Da(e,t){if(!ye(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fn(e))Da(e.value,t);else if(_e(e))for(let n=0;n<e.length;n++)Da(e[n],t);else if(he(e)||fe(e))e.forEach((e=>{Da(e,t)}));else if($e(e))for(const n in e)Da(e[n],t);return e}function Ra(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return dl((()=>{e.isMounted=!0})),fl((()=>{e.isUnmounting=!0})),e}const za=[Function,Array],Ba={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:za,onEnter:za,onAfterEnter:za,onEnterCancelled:za,onBeforeLeave:za,onLeave:za,onAfterLeave:za,onLeaveCancelled:za,onBeforeAppear:za,onAppear:za,onAfterAppear:za,onAppearCancelled:za},setup(e,{slots:t}){const n=li(),a=Ra();let l;return()=>{const s=t.default&&Ka(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const r=on(e),{mode:o}=r;if(a.isLeaving)return Ha(i);const c=Ga(i);if(!c)return Ha(i);const u=qa(c,r,a,n);Wa(c,u);const d=n.subTree,p=d&&Ga(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==Cs&&(!Ls(c,p)||_)){const e=qa(p,r,a,n);if(Wa(p,e),"out-in"===o)return a.isLeaving=!0,e.afterLeave=()=>{a.isLeaving=!1,n.update()},Ha(i);"in-out"===o&&c.type!==Cs&&(e.delayLeave=(e,t,n)=>{Va(a,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return i}}};function Va(e,t){const{leavingVNodes:n}=e;let a=n.get(t.type);return a||(a=Object.create(null),n.set(t.type,a)),a}function qa(e,t,n,a){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:r,onEnter:o,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:h,onAppear:m,onAfterAppear:g,onAppearCancelled:v}=t,b=String(e.key),y=Va(n,e),w=(e,t)=>{e&&On(e,a,9,t)},x=(e,t)=>{const n=t[1];w(e,t),_e(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:s,persisted:i,beforeEnter(t){let a=r;if(!n.isMounted){if(!l)return;a=h||r}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Ls(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(a,[t])},enter(e){let t=o,a=c,s=u;if(!n.isMounted){if(!l)return;t=m||o,a=g||c,s=v||u}let i=!1;const r=e._enterCb=t=>{i||(i=!0,w(t?s:a,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,r]):r()},leave(t,a){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return a();w(d,[t]);let s=!1;const i=t._leaveCb=n=>{s||(s=!0,a(),w(n?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>qa(e,t,n,a)};return k}function Ha(e){if(Qa(e))return(e=Gs(e)).children=null,e}function Ga(e){return Qa(e)?e.children?e.children[0]:void 0:e}function Wa(e,t){6&e.shapeFlag&&e.component?Wa(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ka(e,t=!1,n){let a=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const r=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===$s?(128&i.patchFlag&&l++,a=a.concat(Ka(i.children,t,r))):(t||i.type!==Cs)&&a.push(null!=r?Gs(i,{key:r}):i)}if(l>1)for(let e=0;e<a.length;e++)a[e].patchFlag=-2;return a}function Ja(e){return ge(e)?{setup:e,name:e.name}:e}const Ya=e=>!!e.type.__asyncLoader;function Za(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:a,delay:l=200,timeout:s,suspensible:i=!0,onError:r}=e;let o,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),r)return new Promise(((t,n)=>{r(e,(()=>t((u++,c=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),o=t,t))))};return Ja({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return o},setup(){const e=ai;if(o)return()=>Xa(o,e);const t=t=>{c=null,Un(t,e,13,!a)};if(i&&e.suspense)return d().then((t=>()=>Xa(t,e))).catch((e=>(t(e),()=>a?qs(a,{error:e}):null)));const r=hn(!1),u=hn(),p=hn(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!r.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{r.value=!0,e.parent&&Qa(e.parent.vnode)&&Yn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>r.value&&o?Xa(o,e):u.value&&a?qs(a,{error:u.value}):n&&!p.value?qs(n):void 0}})}function Xa(e,{vnode:{ref:t,props:n,children:a}}){const l=qs(e,n,a);return l.ref=t,l}const Qa=e=>e.type.__isKeepAlive,el={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=li(),a=n.ctx,l=new Map,s=new Set;let i=null;const r=n.suspense,{renderer:{p:o,m:c,um:u,o:{createElement:d}}}=a,p=d("div");function _(e){il(e),u(e,n,r,!0)}function f(e){l.forEach(((t,n)=>{const a=vi(t.type);!a||e&&e(a)||h(n)}))}function h(e){const t=l.get(e);i&&t.type===i.type?i&&il(i):_(t),l.delete(e),s.delete(e)}a.activate=(e,t,n,a,l)=>{const s=e.component;c(e,t,n,0,r),o(s.vnode,e,t,n,s,r,a,e.slotScopeIds,l),_s((()=>{s.isDeactivated=!1,s.a&&Fe(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ei(t,s.parent,e)}),r)},a.deactivate=e=>{const t=e.component;c(e,p,null,1,r),_s((()=>{t.da&&Fe(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&ei(n,t.parent,e),t.isDeactivated=!0}),r)},Ua((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tl(e,t))),t&&f((e=>!tl(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&l.set(m,rl(n.subTree))};return dl(g),_l(g),fl((()=>{l.forEach((e=>{const{subTree:t,suspense:a}=n,l=rl(t);if(e.type!==l.type)_(e);else{il(l);const e=l.component.da;e&&_s(e,a)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!js(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;let r=rl(a);const o=r.type,c=vi(Ya(r)?r.type.__asyncResolved||{}:o),{include:u,exclude:d,max:p}=e;if(u&&(!c||!tl(u,c))||d&&c&&tl(d,c))return i=r,a;const _=null==r.key?o:r.key,f=l.get(_);return r.el&&(r=Gs(r),128&a.shapeFlag&&(a.ssContent=r)),m=_,f?(r.el=f.el,r.component=f.component,r.transition&&Wa(r,r.transition),r.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&h(s.values().next().value)),r.shapeFlag|=256,i=r,xa(a.type)?a:r}}};function tl(e,t){return _e(e)?e.some((e=>tl(e,t))):ve(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function nl(e,t){ll(e,"a",t)}function al(e,t){ll(e,"da",t)}function ll(e,t,n=ai){const a=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(ol(t,a,n),n){let e=n.parent;for(;e&&e.parent;)Qa(e.parent.vnode)&&sl(a,t,n,e),e=e.parent}}function sl(e,t,n,a){const l=ol(t,e,a,!0);hl((()=>{ue(a[t],l)}),n)}function il(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rl(e){return 128&e.shapeFlag?e.ssContent:e}function ol(e,t,n=ai,a=!1){if(n){const l=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...a)=>{if(n.isUnmounted)return;rt(),si(n);const l=On(t,n,e,a);return ii(),ot(),l});return a?l.unshift(s):l.push(s),s}}const cl=e=>(t,n=ai)=>(!ui||"sp"===e)&&ol(e,t,n),ul=cl("bm"),dl=cl("m"),pl=cl("bu"),_l=cl("u"),fl=cl("bum"),hl=cl("um"),ml=cl("sp"),gl=cl("rtg"),vl=cl("rtc");function bl(e,t=ai){ol("ec",e,t)}function yl(e,t){const n=ua;if(null===n)return e;const a=mi(n)||n.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,s,i,r=ne]=t[e];ge(n)&&(n={mounted:n,updated:n}),n.deep&&Da(s),l.push({dir:n,instance:a,value:s,oldValue:void 0,arg:i,modifiers:r})}return e}function wl(e,t,n,a){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const r=l[i];s&&(r.oldValue=s[i].value);let o=r.dir[a];o&&(rt(),On(o,n,8,[e.el,r,e,t]),ot())}}function xl(e,t){return Cl("components",e,!0,t)||e}const kl=Symbol();function $l(e){return ve(e)?Cl("components",e,!1)||e:e||kl}function Sl(e){return Cl("directives",e)}function Cl(e,t,n=!0,a=!1){const l=ua||ai;if(l){const n=l.type;if("components"===e){const e=vi(n,!1);if(e&&(e===t||e===Te(t)||e===Me(Te(t))))return n}const s=Nl(l[e]||n[e],t)||Nl(l.appContext[e],t);return!s&&a?n:s}}function Nl(e,t){return e&&(e[t]||e[Te(t)]||e[Me(Te(t))])}function Al(e,t,n,a){let l;const s=n&&n[a];if(_e(e)||ve(e)){l=new Array(e.length);for(let n=0,a=e.length;n<a;n++)l[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){l=new Array(e);for(let n=0;n<e;n++)l[n]=t(n+1,n,void 0,s&&s[n])}else if(ye(e))if(e[Symbol.iterator])l=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);l=new Array(n.length);for(let a=0,i=n.length;a<i;a++){const i=n[a];l[a]=t(e[i],i,a,s&&s[a])}}else l=[];return n&&(n[a]=l),l}function El(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(_e(a))for(let t=0;t<a.length;t++)e[a[t].name]=a[t].fn;else a&&(e[a.name]=a.fn)}return e}function Tl(e,t,n={},a,l){if(ua.isCE||ua.parent&&Ya(ua.parent)&&ua.parent.isCE)return qs("slot","default"===t?null:{name:t},a&&a());let s=e[t];s&&s._c&&(s._d=!1),Ts();const i=s&&Pl(s(n)),r=Fs($s,{key:n.key||`_${t}`},i||(a?a():[]),i&&1===e._?64:-2);return!l&&r.scopeId&&(r.slotScopeIds=[r.scopeId+"-s"]),s&&s._c&&(s._d=!0),r}function Pl(e){return e.some((e=>!js(e)||e.type!==Cs&&!(e.type===$s&&!Pl(e.children))))?e:null}function Il(e){const t={};for(const n in e)t[Oe(n)]=e[n];return t}const Ml=e=>e?ri(e)?mi(e)||e.proxy:Ml(e.parent):null,Ol=ce(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Ml(e.parent),$root:e=>Ml(e.root),$emit:e=>e.emit,$options:e=>Rl(e),$forceUpdate:e=>e.f||(e.f=()=>Yn(e.update)),$nextTick:e=>e.n||(e.n=Jn.bind(e.proxy)),$watch:e=>ja.bind(e)}),Ul={get({_:e},t){const{ctx:n,setupState:a,data:l,props:s,accessCache:i,type:r,appContext:o}=e;let c;if("$"!==t[0]){const r=i[t];if(void 0!==r)switch(r){case 1:return a[t];case 2:return l[t];case 4:return n[t];case 3:return s[t]}else{if(a!==ne&&pe(a,t))return i[t]=1,a[t];if(l!==ne&&pe(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&pe(c,t))return i[t]=3,s[t];if(n!==ne&&pe(n,t))return i[t]=4,n[t];jl&&(i[t]=0)}}const u=Ol[t];let d,p;return u?("$attrs"===t&&ct(e,0,t),u(e)):(d=r.__cssModules)&&(d=d[t])?d:n!==ne&&pe(n,t)?(i[t]=4,n[t]):(p=o.config.globalProperties,pe(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:a,setupState:l,ctx:s}=e;return l!==ne&&pe(l,t)?(l[t]=n,!0):a!==ne&&pe(a,t)?(a[t]=n,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:a,appContext:l,propsOptions:s}},i){let r;return!!n[i]||e!==ne&&pe(e,i)||t!==ne&&pe(t,i)||(r=s[0])&&pe(r,i)||pe(a,i)||pe(Ol,i)||pe(l.config.globalProperties,i)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:pe(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Fl=ce({},Ul,{get(e,t){if(t!==Symbol.unscopables)return Ul.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!R(t)});let jl=!0;function Ll(e,t,n){On(_e(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Dl(e,t,n,a){const l=a.includes(".")?La(n,a):()=>n[a];if(ve(e)){const n=t[e];ge(n)&&Ua(l,n)}else if(ge(e))Ua(l,e.bind(n));else if(ye(e))if(_e(e))e.forEach((e=>Dl(e,t,n,a)));else{const a=ge(e.handler)?e.handler.bind(n):t[e.handler];ge(a)&&Ua(l,a,e)}}function Rl(e){const t=e.type,{mixins:n,extends:a}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,r=s.get(t);let o;return r?o=r:l.length||n||a?(o={},l.length&&l.forEach((e=>zl(o,e,i,!0))),zl(o,t,i)):o=t,s.set(t,o),o}function zl(e,t,n,a=!1){const{mixins:l,extends:s}=t;s&&zl(e,s,n,!0),l&&l.forEach((t=>zl(e,t,n,!0)));for(const l in t)if(a&&"expose"===l);else{const a=Bl[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const Bl={data:Vl,props:Gl,emits:Gl,methods:Gl,computed:Gl,beforeCreate:Hl,created:Hl,beforeMount:Hl,mounted:Hl,beforeUpdate:Hl,updated:Hl,beforeDestroy:Hl,beforeUnmount:Hl,destroyed:Hl,unmounted:Hl,activated:Hl,deactivated:Hl,errorCaptured:Hl,serverPrefetch:Hl,components:Gl,directives:Gl,watch:function(e,t){if(!e)return t;if(!t)return e;const n=ce(Object.create(null),e);for(const a in t)n[a]=Hl(e[a],t[a]);return n},provide:Vl,inject:function(e,t){return Gl(ql(e),ql(t))}};function Vl(e,t){return t?e?function(){return ce(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function ql(e){if(_e(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Hl(e,t){return e?[...new Set([].concat(e,t))]:t}function Gl(e,t){return e?ce(ce(Object.create(null),e),t):t}function Wl(e,t,n,a){const[l,s]=e.propsOptions;let i,r=!1;if(t)for(let o in t){if(Ce(o))continue;const c=t[o];let u;l&&pe(l,u=Te(o))?s&&s.includes(u)?(i||(i={}))[u]=c:n[u]=c:ca(e.emitsOptions,o)||o in a&&c===a[o]||(a[o]=c,r=!0)}if(s){const t=on(n),a=i||ne;for(let i=0;i<s.length;i++){const r=s[i];n[r]=Kl(l,t,r,a[r],e,!pe(a,r))}}return r}function Kl(e,t,n,a,l,s){const i=e[n];if(null!=i){const e=pe(i,"default");if(e&&void 0===a){const e=i.default;if(i.type!==Function&&ge(e)){const{propsDefaults:s}=l;n in s?a=s[n]:(si(l),a=s[n]=e.call(null,t),ii())}else a=e}i[0]&&(s&&!e?a=!1:!i[1]||""!==a&&a!==Ie(n)||(a=!0))}return a}function Jl(e,t,n=!1){const a=t.propsCache,l=a.get(e);if(l)return l;const s=e.props,i={},r=[];let o=!1;if(!ge(e)){const a=e=>{o=!0;const[n,a]=Jl(e,t,!0);ce(i,n),a&&r.push(...a)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!s&&!o)return a.set(e,ae),ae;if(_e(s))for(let e=0;e<s.length;e++){const t=Te(s[e]);Yl(t)&&(i[t]=ne)}else if(s)for(const e in s){const t=Te(e);if(Yl(t)){const n=s[e],a=i[t]=_e(n)||ge(n)?{type:n}:n;if(a){const e=Ql(Boolean,a.type),n=Ql(String,a.type);a[0]=e>-1,a[1]=n<0||e<n,(e>-1||pe(a,"default"))&&r.push(t)}}}const c=[i,r];return a.set(e,c),c}function Yl(e){return"$"!==e[0]}function Zl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Xl(e,t){return Zl(e)===Zl(t)}function Ql(e,t){return _e(t)?t.findIndex((t=>Xl(t,e))):ge(t)&&Xl(t,e)?0:-1}const es=e=>"_"===e[0]||"$stable"===e,ts=e=>_e(e)?e.map(Ys):[Ys(e)],ns=(e,t,n)=>{if(t._n)return t;const a=ma(((...e)=>ts(t(...e))),n);return a._c=!1,a},as=(e,t,n)=>{const a=e._ctx;for(const n in e){if(es(n))continue;const l=e[n];if(ge(l))t[n]=ns(0,l,a);else if(null!=l){const e=ts(l);t[n]=()=>e}}},ls=(e,t)=>{const n=ts(t);e.slots.default=()=>n};function ss(){return{app:null,config:{isNativeTag:se,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(n,a=null){ge(n)||(n=Object.assign({},n)),null==a||ye(a)||(a=null);const l=ss(),s=new Set;let i=!1;const r=l.app={_uid:is++,_component:n,_props:a,_container:null,_context:l,_instance:null,version:ji,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(r,...t)):ge(e)&&(s.add(e),e(r,...t))),r),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),r),component:(e,t)=>t?(l.components[e]=t,r):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,r):l.directives[e],mount(s,o,c){if(!i){const u=qs(n,a);return u.appContext=l,o&&t?t(u,s):e(u,s,c),i=!0,r._container=s,s.__vue_app__=r,mi(u.component)||u.component.proxy}},unmount(){i&&(e(null,r._container),delete r._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,r)};return r}}function os(e,t,n,a,l=!1){if(_e(e))return void e.forEach(((e,s)=>os(e,t&&(_e(t)?t[s]:t),n,a,l)));if(Ya(a)&&!l)return;const s=4&a.shapeFlag?mi(a.component)||a.component.proxy:a.el,i=l?null:s,{i:r,r:o}=e,c=t&&t.r,u=r.refs===ne?r.refs={}:r.refs,d=r.setupState;if(null!=c&&c!==o&&(ve(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fn(c)&&(c.value=null)),ge(o))Mn(o,r,12,[i,u]);else{const t=ve(o),a=fn(o);if(t||a){const r=()=>{if(e.f){const n=t?u[o]:o.value;l?_e(n)&&ue(n,s):_e(n)?n.includes(s)||n.push(s):t?(u[o]=[s],pe(d,o)&&(d[o]=u[o])):(o.value=[s],e.k&&(u[e.k]=o.value))}else t?(u[o]=i,pe(d,o)&&(d[o]=i)):a&&(o.value=i,e.k&&(u[e.k]=i))};i?(r.id=-1,_s(r,n)):r()}}}let cs=!1;const us=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ds=e=>8===e.nodeType;function ps(e){const{mt:t,p:n,o:{patchProp:a,createText:l,nextSibling:s,parentNode:i,remove:r,insert:o,createComment:c}}=e,u=(n,a,r,c,m,g=!1)=>{const v=ds(n)&&"["===n.data,b=()=>f(n,a,r,c,m,v),{type:y,ref:w,shapeFlag:x,patchFlag:k}=a,$=n.nodeType;a.el=n,-2===k&&(g=!1,a.dynamicChildren=null);let S=null;switch(y){case Ss:3!==$?""===a.children?(o(a.el=l(""),i(n),n),S=n):S=b():(n.data!==a.children&&(cs=!0,n.data=a.children),S=s(n));break;case Cs:S=8!==$||v?b():s(n);break;case Ns:if(1===$||3===$){S=n;const e=!a.children.length;for(let t=0;t<a.staticCount;t++)e&&(a.children+=1===S.nodeType?S.outerHTML:S.data),t===a.staticCount-1&&(a.anchor=S),S=s(S);return S}S=b();break;case $s:S=v?_(n,a,r,c,m,g):b();break;default:if(1&x)S=1!==$||a.type.toLowerCase()!==n.tagName.toLowerCase()?b():d(n,a,r,c,m,g);else if(6&x){a.slotScopeIds=m;const e=i(n);if(t(a,e,null,r,c,us(e),g),S=v?h(n):s(n),S&&ds(S)&&"teleport end"===S.data&&(S=s(S)),Ya(a)){let t;v?(t=qs($s),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?Ws(""):qs("div"),t.el=n,a.component.subTree=t}}else 64&x?S=8!==$?b():a.type.hydrate(n,a,r,c,m,g,e,p):128&x&&(S=a.type.hydrate(n,a,r,c,us(i(n)),m,g,e,u))}return null!=w&&os(w,null,c,a),S},d=(e,t,n,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:o,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===o&&_||"option"===o;if(f||-1!==u){if(_&&wl(t,null,n,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&a(e,t,null,c[t],!1,void 0,n);else c.onClick&&a(e,"onClick",null,c.onClick,!1,void 0,n);let o;if((o=c&&c.onVnodeBeforeMount)&&ei(o,n,t),_&&wl(t,null,n,"beforeMount"),((o=c&&c.onVnodeMounted)||_)&&Na((()=>{o&&ei(o,n,t),_&&wl(t,null,n,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let a=p(e.firstChild,t,e,n,l,s,i);for(;a;){cs=!0;const e=a;a=a.nextSibling,r(e)}}else 8&d&&e.textContent!==t.children&&(cs=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,a,l,s,i,r)=>{r=r||!!t.dynamicChildren;const o=t.children,c=o.length;for(let t=0;t<c;t++){const c=r?o[t]:o[t]=Ys(o[t]);if(e)e=u(e,c,l,s,i,r);else{if(c.type===Ss&&!c.children)continue;cs=!0,n(null,c,a,null,l,s,us(a),i)}}return e},_=(e,t,n,a,l,r)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,n,a,l,r);return _&&ds(_)&&"]"===_.data?s(t.anchor=_):(cs=!0,o(t.anchor=c("]"),d,_),_)},f=(e,t,a,l,o,c)=>{if(cs=!0,t.el=null,c){const t=h(e);for(;;){const n=s(e);if(!n||n===t)break;r(n)}}const u=s(e),d=i(e);return r(e),n(null,t,d,u,a,l,us(d),o),u},h=e=>{let t=0;for(;e;)if((e=s(e))&&ds(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),ta(),void(t._vnode=e);cs=!1,u(t.firstChild,e,null,null,null),ta(),t._vnode=e,cs&&console.error("Hydration completed but contains mismatches.")},u]}const _s=Na;function fs(e){return ms(e)}function hs(e){return ms(e,ps)}function ms(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:a,patchProp:l,createElement:s,createText:i,createComment:r,setText:o,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=le,cloneNode:_,insertStaticContent:f}=e,h=(e,t,n,a=null,l=null,s=null,i=!1,r=null,o=!!t.dynamicChildren)=>{if(e===t)return;e&&!Ls(e,t)&&(a=z(e),F(e,l,s,!0),e=null),-2===t.patchFlag&&(o=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ss:m(e,t,n,a);break;case Cs:g(e,t,n,a);break;case Ns:null==e&&v(t,n,a,i);break;case $s:C(e,t,n,a,l,s,i,r,o);break;default:1&d?b(e,t,n,a,l,s,i,r,o):6&d?N(e,t,n,a,l,s,i,r,o):(64&d||128&d)&&c.process(e,t,n,a,l,s,i,r,o,V)}null!=u&&l&&os(u,e&&e.ref,s,t||e,!t)},m=(e,t,a,l)=>{if(null==e)n(t.el=i(t.children),a,l);else{const n=t.el=e.el;t.children!==e.children&&o(n,t.children)}},g=(e,t,a,l)=>{null==e?n(t.el=r(t.children||""),a,l):t.el=e.el},v=(e,t,n,a)=>{[e.el,e.anchor]=f(e.children,t,n,a,e.el,e.anchor)},b=(e,t,n,a,l,s,i,r,o)=>{i=i||"svg"===t.type,null==e?y(t,n,a,l,s,i,r,o):k(e,t,l,s,i,r,o)},y=(e,t,a,i,r,o,u,d)=>{let p,f;const{type:h,props:m,shapeFlag:g,transition:v,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,o,m&&m.is,m),8&g?c(p,e.children):16&g&&x(e.children,p,null,i,r,o&&"foreignObject"!==h,u,d),y&&wl(e,null,i,"created"),m){for(const t in m)"value"===t||Ce(t)||l(p,t,null,m[t],o,e.children,i,r,R);"value"in m&&l(p,"value",null,m.value),(f=m.onVnodeBeforeMount)&&ei(f,i,e)}w(p,e,e.scopeId,u,i)}y&&wl(e,null,i,"beforeMount");const k=(!r||r&&!r.pendingBranch)&&v&&!v.persisted;k&&v.beforeEnter(p),n(p,t,a),((f=m&&m.onVnodeMounted)||k||y)&&_s((()=>{f&&ei(f,i,e),k&&v.enter(p),y&&wl(e,null,i,"mounted")}),r)},w=(e,t,n,a,l)=>{if(n&&p(e,n),a)for(let t=0;t<a.length;t++)p(e,a[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,n,a,l,s,i,r,o=0)=>{for(let c=o;c<e.length;c++){const o=e[c]=r?Zs(e[c]):Ys(e[c]);h(null,o,t,n,a,l,s,i,r)}},k=(e,t,n,a,s,i,r)=>{const o=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||ne,f=t.props||ne;let h;n&&gs(n,!1),(h=f.onVnodeBeforeUpdate)&&ei(h,n,t,e),p&&wl(t,e,n,"beforeUpdate"),n&&gs(n,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,o,n,a,m,i):r||I(e,t,o,null,n,a,m,i,!1),u>0){if(16&u)S(o,t,_,f,n,a,s);else if(2&u&&_.class!==f.class&&l(o,"class",null,f.class,s),4&u&&l(o,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const r=i[t],c=_[r],u=f[r];u===c&&"value"!==r||l(o,r,c,u,s,e.children,n,a,R)}}1&u&&e.children!==t.children&&c(o,t.children)}else r||null!=d||S(o,t,_,f,n,a,s);((h=f.onVnodeUpdated)||p)&&_s((()=>{h&&ei(h,n,t,e),p&&wl(t,e,n,"updated")}),a)},$=(e,t,n,a,l,s,i)=>{for(let r=0;r<t.length;r++){const o=e[r],c=t[r],d=o.el&&(o.type===$s||!Ls(o,c)||70&o.shapeFlag)?u(o.el):n;h(o,c,d,null,a,l,s,i,!0)}},S=(e,t,n,a,s,i,r)=>{if(n!==a){for(const o in a){if(Ce(o))continue;const c=a[o],u=n[o];c!==u&&"value"!==o&&l(e,o,u,c,r,t.children,s,i,R)}if(n!==ne)for(const o in n)Ce(o)||o in a||l(e,o,n[o],null,r,t.children,s,i,R);"value"in a&&l(e,"value",n.value,a.value)}},C=(e,t,a,l,s,r,o,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:h}=t;h&&(c=c?c.concat(h):h),null==e?(n(d,a,l),n(p,a,l),x(t.children,a,p,s,r,o,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,a,s,r,o,c),(null!=t.key||s&&t===s.subTree)&&vs(e,t,!0)):I(e,t,a,p,s,r,o,c,u)},N=(e,t,n,a,l,s,i,r,o)=>{t.slotScopeIds=r,null==e?512&t.shapeFlag?l.ctx.activate(t,n,a,i,o):A(t,n,a,l,s,i,o):E(e,t,o)},A=(e,t,n,a,l,s,i)=>{const r=e.component=function(e,t,n){const a=e.type,l=(t?t.appContext:e.appContext)||ti,s={uid:ni++,vnode:e,type:a,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new ze(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jl(a,l),emitsOptions:oa(a,l),emit:null,emitted:null,propsDefaults:ne,inheritAttrs:a.inheritAttrs,ctx:ne,data:ne,props:ne,attrs:ne,slots:ne,refs:ne,setupState:ne,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=ra.bind(null,s),e.ce&&e.ce(s),s}(e,a,l);if(Qa(e)&&(r.ctx.renderer=V),function(e,t=!1){ui=t;const{props:n,children:a}=e.vnode,l=ri(e);(function(e,t,n,a=!1){const l={},s={};je(s,Rs,1),e.propsDefaults=Object.create(null),Wl(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=n?a?l:Qt(l):e.type.props?l:s,e.attrs=s})(e,n,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=on(t),je(t,"_",n)):as(t,e.slots={})}else e.slots={},t&&ls(e,t);je(e.slots,Rs,1)})(e,a),l&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=cn(new Proxy(e.ctx,Ul));const{setup:a}=n;if(a){const n=e.setupContext=a.length>1?hi(e):null;si(e),rt();const l=Mn(a,e,0,[e.props,n]);if(ot(),ii(),we(l)){if(l.then(ii,ii),t)return l.then((n=>{di(e,n,t)})).catch((t=>{Un(t,e,0)}));e.asyncDep=l}else di(e,l,t)}else fi(e,t)}(e,t),ui=!1}(r),r.asyncDep){if(l&&l.registerDep(r,T),!e.el){const e=r.subTree=qs(Cs);g(null,e,t,n)}}else T(r,e,t,n,l,s,i)},E=(e,t,n)=>{const a=t.component=e.component;if(function(e,t,n){const{props:a,children:l,component:s}=e,{props:i,children:r,patchFlag:o}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&o>=0))return!(!l&&!r||r&&r.$stable)||a!==i&&(a?!i||ya(a,i,c):!!i);if(1024&o)return!0;if(16&o)return a?ya(a,i,c):!!i;if(8&o){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==a[n]&&!ca(c,n))return!0}}return!1}(e,t,n)){if(a.asyncDep&&!a.asyncResolved)return void P(a,t,n);a.next=t,function(e){const t=Ln.indexOf(e);t>Dn&&Ln.splice(t,1)}(a.update),a.update()}else t.el=e.el,a.vnode=t},T=(e,t,n,a,l,s,i)=>{const r=e.effect=new tt((()=>{if(e.isMounted){let t,{next:n,bu:a,u:r,parent:o,vnode:c}=e,d=n;gs(e,!1),n?(n.el=c.el,P(e,n,i)):n=c,a&&Fe(a),(t=n.props&&n.props.onVnodeBeforeUpdate)&&ei(t,o,n,c),gs(e,!0);const p=ga(e),_=e.subTree;e.subTree=p,h(_,p,u(_.el),z(_),e,l,s),n.el=p.el,null===d&&wa(e,p.el),r&&_s(r,l),(t=n.props&&n.props.onVnodeUpdated)&&_s((()=>ei(t,o,n,c)),l)}else{let i;const{el:r,props:o}=t,{bm:c,m:u,parent:d}=e,p=Ya(t);if(gs(e,!1),c&&Fe(c),!p&&(i=o&&o.onVnodeBeforeMount)&&ei(i,d,t),gs(e,!0),r&&H){const n=()=>{e.subTree=ga(e),H(r,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const i=e.subTree=ga(e);h(null,i,n,a,e,l,s),t.el=i.el}if(u&&_s(u,l),!p&&(i=o&&o.onVnodeMounted)){const e=t;_s((()=>ei(i,d,e)),l)}(256&t.shapeFlag||d&&Ya(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&_s(e.a,l),e.isMounted=!0,t=n=a=null}}),(()=>Yn(o)),e.scope),o=e.update=()=>r.run();o.id=e.uid,gs(e,!0),o()},P=(e,t,n)=>{t.component=e;const a=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,a){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,r=on(l),[o]=e.propsOptions;let c=!1;if(!(a||i>0)||16&i){let a;Wl(e,t,l,s)&&(c=!0);for(const s in r)t&&(pe(t,s)||(a=Ie(s))!==s&&pe(t,a))||(o?!n||void 0===n[s]&&void 0===n[a]||(l[s]=Kl(o,r,s,void 0,e,!0)):delete l[s]);if(s!==r)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let a=0;a<n.length;a++){let i=n[a];if(ca(e.emitsOptions,i))continue;const u=t[i];if(o)if(pe(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Te(i);l[t]=Kl(o,r,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&dt(e,"set","$attrs")}(e,t.props,a,n),((e,t,n)=>{const{vnode:a,slots:l}=e;let s=!0,i=ne;if(32&a.shapeFlag){const e=t._;e?n&&1===e?s=!1:(ce(l,t),n||1!==e||delete l._):(s=!t.$stable,as(t,l)),i=t}else t&&(ls(e,t),i={default:1});if(s)for(const e in l)es(e)||e in i||delete l[e]})(e,t.children,n),rt(),ea(void 0,e.update),ot()},I=(e,t,n,a,l,s,i,r,o=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void O(u,p,n,a,l,s,i,r,o);if(256&_)return void M(u,p,n,a,l,s,i,r,o)}8&f?(16&d&&R(u,l,s),p!==u&&c(n,p)):16&d?16&f?O(u,p,n,a,l,s,i,r,o):R(u,l,s,!0):(8&d&&c(n,""),16&f&&x(p,n,a,l,s,i,r,o))},M=(e,t,n,a,l,s,i,r,o)=>{const c=(e=e||ae).length,u=(t=t||ae).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const a=t[p]=o?Zs(t[p]):Ys(t[p]);h(e[p],a,n,null,l,s,i,r,o)}c>u?R(e,l,s,!0,!1,d):x(t,n,a,l,s,i,r,o,d)},O=(e,t,n,a,l,s,i,r,o)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const a=e[c],u=t[c]=o?Zs(t[c]):Ys(t[c]);if(!Ls(a,u))break;h(a,u,n,null,l,s,i,r,o),c++}for(;c<=d&&c<=p;){const a=e[d],c=t[p]=o?Zs(t[p]):Ys(t[p]);if(!Ls(a,c))break;h(a,c,n,null,l,s,i,r,o),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:a;for(;c<=p;)h(null,t[c]=o?Zs(t[c]):Ys(t[c]),n,d,l,s,i,r,o),c++}}else if(c>p)for(;c<=d;)F(e[c],l,s,!0),c++;else{const _=c,f=c,m=new Map;for(c=f;c<=p;c++){const e=t[c]=o?Zs(t[c]):Ys(t[c]);null!=e.key&&m.set(e.key,c)}let g,v=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const a=e[c];if(v>=b){F(a,l,s,!0);continue}let u;if(null!=a.key)u=m.get(a.key);else for(g=f;g<=p;g++)if(0===x[g-f]&&Ls(a,t[g])){u=g;break}void 0===u?F(a,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,h(a,t[u],n,null,l,s,i,r,o),v++)}const k=y?function(e){const t=e.slice(),n=[0];let a,l,s,i,r;const o=e.length;for(a=0;a<o;a++){const o=e[a];if(0!==o){if(l=n[n.length-1],e[l]<o){t[a]=l,n.push(a);continue}for(s=0,i=n.length-1;s<i;)r=s+i>>1,e[n[r]]<o?s=r+1:i=r;o<e[n[s]]&&(s>0&&(t[a]=n[s-1]),n[s]=a)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}(x):ae;for(g=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:a;0===x[c]?h(null,d,n,p,l,s,i,r,o):y&&(g<0||c!==k[g]?U(d,n,p,2):g--)}}},U=(e,t,a,l,s=null)=>{const{el:i,type:r,transition:o,children:c,shapeFlag:u}=e;if(6&u)U(e.component.subTree,t,a,l);else if(128&u)e.suspense.move(t,a,l);else if(64&u)r.move(e,t,a,V);else if(r!==$s)if(r!==Ns)if(2!==l&&1&u&&o)if(0===l)o.beforeEnter(i),n(i,t,a),_s((()=>o.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=o,r=()=>n(i,t,a),c=()=>{e(i,(()=>{r(),s&&s()}))};l?l(i,r,c):c()}else n(i,t,a);else(({el:e,anchor:t},a,l)=>{let s;for(;e&&e!==t;)s=d(e),n(e,a,l),e=s;n(t,a,l)})(e,t,a);else{n(i,t,a);for(let e=0;e<c.length;e++)U(c[e],t,a,l);n(e.anchor,t,a)}},F=(e,t,n,a=!1,l=!1)=>{const{type:s,props:i,ref:r,children:o,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=r&&os(r,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Ya(e);let h;if(f&&(h=i&&i.onVnodeBeforeUnmount)&&ei(h,t,e),6&u)D(e.component,n,a);else{if(128&u)return void e.suspense.unmount(n,a);_&&wl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,l,V,a):c&&(s!==$s||d>0&&64&d)?R(c,t,n,!1,!0):(s===$s&&384&d||!l&&16&u)&&R(o,t,n),a&&j(e)}(f&&(h=i&&i.onVnodeUnmounted)||_)&&_s((()=>{h&&ei(h,t,e),_&&wl(e,null,t,"unmounted")}),n)},j=e=>{const{type:t,el:n,anchor:l,transition:s}=e;if(t===$s)return void L(n,l);if(t===Ns)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),a(e),e=n;a(t)})(e);const i=()=>{a(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:a}=s,l=()=>t(n,i);a?a(e.el,i,l):l()}else i()},L=(e,t)=>{let n;for(;e!==t;)n=d(e),a(e),e=n;a(t)},D=(e,t,n)=>{const{bum:a,scope:l,update:s,subTree:i,um:r}=e;a&&Fe(a),l.stop(),s&&(s.active=!1,F(i,e,t,n)),r&&_s(r,t),_s((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},R=(e,t,n,a=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)F(e[i],t,n,a,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,n)=>{null==e?t._vnode&&F(t._vnode,null,null,!0):h(t._vnode||null,e,t,null,null,null,n),ta(),t._vnode=e},V={p:h,um:F,m:U,r:j,mt:A,mc:x,pc:I,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:rs(B,q)}}function gs({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function vs(e,t,n=!1){const a=e.children,l=t.children;if(_e(a)&&_e(l))for(let e=0;e<a.length;e++){const t=a[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Zs(l[e]),s.el=t.el),n||vs(t,s))}}const bs=e=>e&&(e.disabled||""===e.disabled),ys=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,ws=(e,t)=>{const n=e&&e.to;return ve(n)?t?t(n):null:n};function xs(e,t,n,{o:{insert:a},m:l},s=2){0===s&&a(e.targetAnchor,t,n);const{el:i,anchor:r,shapeFlag:o,children:c,props:u}=e,d=2===s;if(d&&a(i,t,n),(!d||bs(u))&&16&o)for(let e=0;e<c.length;e++)l(c[e],t,n,2);d&&a(r,t,n)}const ks={__isTeleport:!0,process(e,t,n,a,l,s,i,r,o,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:h}}=c,m=bs(t.props);let{shapeFlag:g,children:v,dynamicChildren:b}=t;if(null==e){const e=t.el=h(""),c=t.anchor=h("");_(e,n,a),_(c,n,a);const d=t.target=ws(t.props,f),p=t.targetAnchor=h("");d&&(_(p,d),i=i||ys(d));const b=(e,t)=>{16&g&&u(v,e,t,l,s,i,r,o)};m?b(n,c):d&&b(d,p)}else{t.el=e.el;const a=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,h=bs(e.props),g=h?n:u,v=h?a:_;if(i=i||ys(u),b?(p(e.dynamicChildren,b,g,l,s,i,r),vs(e,t,!0)):o||d(e,t,g,v,l,s,i,r,!1),m)h||xs(t,n,a,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=ws(t.props,f);e&&xs(t,e,null,c,0)}else h&&xs(t,u,_,c,1)}},remove(e,t,n,a,{um:l,o:{remove:s}},i){const{shapeFlag:r,children:o,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!bs(p))&&(s(c),16&r))for(let e=0;e<o.length;e++){const a=o[e];l(a,t,n,!0,!!a.dynamicChildren)}},move:xs,hydrate:function(e,t,n,a,l,s,{o:{nextSibling:i,parentNode:r,querySelector:o}},c){const u=t.target=ws(t.props,o);if(u){const o=u._lpa||u.firstChild;if(16&t.shapeFlag)if(bs(t.props))t.anchor=c(i(e),t,r(e),n,a,l,s),t.targetAnchor=o;else{t.anchor=i(e);let r=o;for(;r;)if(r=i(r),r&&8===r.nodeType&&"teleport anchor"===r.data){t.targetAnchor=r,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(o,t,u,n,a,l,s)}}return t.anchor&&i(t.anchor)}},$s=Symbol(void 0),Ss=Symbol(void 0),Cs=Symbol(void 0),Ns=Symbol(void 0),As=[];let Es=null;function Ts(e=!1){As.push(Es=e?null:[])}function Ps(){As.pop(),Es=As[As.length-1]||null}let Is=1;function Ms(e){Is+=e}function Os(e){return e.dynamicChildren=Is>0?Es||ae:null,Ps(),Is>0&&Es&&Es.push(e),e}function Us(e,t,n,a,l,s){return Os(Vs(e,t,n,a,l,s,!0))}function Fs(e,t,n,a,l){return Os(qs(e,t,n,a,l,!0))}function js(e){return!!e&&!0===e.__v_isVNode}function Ls(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const Rs="__vInternal",zs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:n})=>null!=e?ve(e)||fn(e)||ge(e)?{i:ua,r:e,k:t,f:!!n}:e:null;function Vs(e,t=null,n=null,a=0,l=null,s=(e===$s?0:1),i=!1,r=!1){const o={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&zs(t),ref:t&&Bs(t),scopeId:da,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:a,dynamicProps:l,dynamicChildren:null,appContext:null};return r?(Xs(o,n),128&s&&e.normalize(o)):n&&(o.shapeFlag|=ve(n)?8:16),Is>0&&!i&&Es&&(o.patchFlag>0||6&s)&&32!==o.patchFlag&&Es.push(o),o}const qs=function(e,t=null,n=null,a=0,l=null,s=!1){if(e&&e!==kl||(e=Cs),js(e)){const a=Gs(e,t,!0);return n&&Xs(a,n),Is>0&&!s&&Es&&(6&a.shapeFlag?Es[Es.indexOf(e)]=a:Es.push(a)),a.patchFlag|=-2,a}var i;if(ge(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Hs(t);let{class:e,style:n}=t;e&&!ve(e)&&(t.class=W(e)),ye(n)&&(rn(n)&&!_e(n)&&(n=ce({},n)),t.style=V(n))}return Vs(e,t,n,a,l,ve(e)?1:xa(e)?128:(e=>e.__isTeleport)(e)?64:ye(e)?4:ge(e)?2:0,s,!0)};function Hs(e){return e?rn(e)||Rs in e?ce({},e):e:null}function Gs(e,t,n=!1){const{props:a,ref:l,patchFlag:s,children:i}=e,r=t?Qs(a||{},t):a;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:r,key:r&&zs(r),ref:t&&t.ref?n&&l?_e(l)?l.concat(Bs(t)):[l,Bs(t)]:Bs(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==$s?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Gs(e.ssContent),ssFallback:e.ssFallback&&Gs(e.ssFallback),el:e.el,anchor:e.anchor}}function Ws(e=" ",t=0){return qs(Ss,null,e,t)}function Ks(e,t){const n=qs(Ns,null,e);return n.staticCount=t,n}function Js(e="",t=!1){return t?(Ts(),Fs(Cs,null,e)):qs(Cs,null,e)}function Ys(e){return null==e||"boolean"==typeof e?qs(Cs):_e(e)?qs($s,null,e.slice()):"object"==typeof e?Zs(e):qs(Ss,null,String(e))}function Zs(e){return null===e.el||e.memo?e:Gs(e)}function Xs(e,t){let n=0;const{shapeFlag:a}=e;if(null==t)t=null;else if(_e(t))n=16;else if("object"==typeof t){if(65&a){const n=t.default;return void(n&&(n._c&&(n._d=!1),Xs(e,n()),n._c&&(n._d=!0)))}{n=32;const a=t._;a||Rs in t?3===a&&ua&&(1===ua.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ua}}else ge(t)?(t={default:t,_ctx:ua},n=32):(t=String(t),64&a?(n=16,t=[Ws(t)]):n=8);e.children=t,e.shapeFlag|=n}function Qs(...e){const t={};for(let n=0;n<e.length;n++){const a=e[n];for(const e in a)if("class"===e)t.class!==a.class&&(t.class=W([t.class,a.class]));else if("style"===e)t.style=V([t.style,a.style]);else if(re(e)){const n=t[e],l=a[e];!l||n===l||_e(n)&&n.includes(l)||(t[e]=n?[].concat(n,l):l)}else""!==e&&(t[e]=a[e])}return t}function ei(e,t,n,a=null){On(e,t,7,[n,a])}const ti=ss();let ni=0,ai=null;const li=()=>ai||ua,si=e=>{ai=e,e.scope.on()},ii=()=>{ai&&ai.scope.off(),ai=null};function ri(e){return 4&e.vnode.shapeFlag}let oi,ci,ui=!1;function di(e,t,n){ge(t)?e.render=t:ye(t)&&(e.setupState=xn(t)),fi(e,n)}function pi(e){oi=e,ci=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Fl))}}const _i=()=>!oi;function fi(e,t,n){const a=e.type;if(!e.render){if(!t&&oi&&!a.render){const t=a.template;if(t){const{isCustomElement:n,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=a,r=ce(ce({isCustomElement:n,delimiters:s},l),i);a.render=oi(t,r)}}e.render=a.render||le,ci&&ci(e)}si(e),rt(),function(e){const t=Rl(e),n=e.proxy,a=e.ctx;jl=!1,t.beforeCreate&&Ll(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:r,provide:o,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:h,deactivated:m,beforeUnmount:g,unmounted:v,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,n=le,a=!1){_e(e)&&(e=ql(e));for(const n in e){const l=e[n];let s;s=ye(l)?"default"in l?Ta(l.from||n,l.default,!0):Ta(l.from||n):Ta(l),fn(s)&&a?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[n]=s}}(c,a,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ge(t)&&(a[e]=t.bind(n))}if(l){const t=l.call(n,n);ye(t)&&(e.data=Xt(t))}if(jl=!0,s)for(const e in s){const t=s[e],l=ge(t)?t.bind(n,n):ge(t.get)?t.get.bind(n,n):le,i=!ge(t)&&ge(t.set)?t.set.bind(n):le,r=yi({get:l,set:i});Object.defineProperty(a,e,{enumerable:!0,configurable:!0,get:()=>r.value,set:e=>r.value=e})}if(r)for(const e in r)Dl(r[e],a,n,e);if(o){const e=ge(o)?o.call(n):o;Reflect.ownKeys(e).forEach((t=>{Ea(t,e[t])}))}function A(e,t){_e(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Ll(u,e,"c"),A(ul,d),A(dl,p),A(pl,_),A(_l,f),A(nl,h),A(al,m),A(bl,x),A(vl,y),A(gl,w),A(fl,g),A(hl,v),A(ml,k),_e($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===le&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),ot(),ii()}function hi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ct(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function mi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xn(cn(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Ol?Ol[n](e):void 0}))}const gi=/(?:^|[-_])(\w)/g;function vi(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function bi(e,t,n=!1){let a=vi(t);if(!a&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(a=e[1])}if(!a&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};a=n(e.components||e.parent.type.components)||n(e.appContext.components)}return a?a.replace(gi,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}const yi=(e,t)=>function(e,t,n=!1){let a,l;const s=ge(e);return s?(a=e,l=le):(a=e.get,l=e.set),new An(a,l,s||!l,n)}(e,0,ui);function wi(){return null}function xi(){return null}function ki(e){}function $i(e,t){return null}function Si(){return Ni().slots}function Ci(){return Ni().attrs}function Ni(){const e=li();return e.setupContext||(e.setupContext=hi(e))}function Ai(e,t){const n=_e(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const a=n[e];a?_e(a)||ge(a)?n[e]={type:a,default:t[e]}:a.default=t[e]:null===a&&(n[e]={default:t[e]})}return n}function Ei(e,t){const n={};for(const a in e)t.includes(a)||Object.defineProperty(n,a,{enumerable:!0,get:()=>e[a]});return n}function Ti(e){const t=li();let n=e();return ii(),we(n)&&(n=n.catch((e=>{throw si(t),e}))),[n,()=>si(t)]}function Pi(e,t,n){const a=arguments.length;return 2===a?ye(t)&&!_e(t)?js(t)?qs(e,null,[t]):qs(e,t):qs(e,null,t):(a>3?n=Array.prototype.slice.call(arguments,2):3===a&&js(n)&&(n=[n]),qs(e,t,n))}const Ii=Symbol(""),Mi=()=>{{const e=Ta(Ii);return e||Tn("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Oi(){}function Ui(e,t,n,a){const l=n[a];if(l&&Fi(l,e))return l;const s=t();return s.memo=e.slice(),n[a]=s}function Fi(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(Ue(n[e],t[e]))return!1;return Is>0&&Es&&Es.push(e),!0}const ji="3.2.37",Li="undefined"!=typeof document?document:null,Di=Li&&Li.createElement("template"),Ri={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,a)=>{const l=t?Li.createElementNS("http://www.w3.org/2000/svg",e):Li.createElement(e,n?{is:n}:void 0);return"select"===e&&a&&null!=a.multiple&&l.setAttribute("multiple",a.multiple),l},createText:e=>Li.createTextNode(e),createComment:e=>Li.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Li.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,a,l,s){const i=n?n.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),n),l!==s&&(l=l.nextSibling););else{Di.innerHTML=a?`<svg>${e}</svg>`:e;const l=Di.content;if(a){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},zi=/\s*!important$/;function Bi(e,t,n){if(_e(n))n.forEach((n=>Bi(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const a=function(e,t){const n=qi[t];if(n)return n;let a=Te(t);if("filter"!==a&&a in e)return qi[t]=a;a=Me(a);for(let n=0;n<Vi.length;n++){const l=Vi[n]+a;if(l in e)return qi[t]=l}return t}(e,t);zi.test(n)?e.setProperty(Ie(a),n.replace(zi,""),"important"):e[a]=n}}const Vi=["Webkit","Moz","ms"],qi={},Hi="http://www.w3.org/1999/xlink",[Gi,Wi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Ki=0;const Ji=Promise.resolve(),Yi=()=>{Ki=0};function Zi(e,t,n,a){e.addEventListener(t,n,a)}const Xi=/(?:Once|Passive|Capture)$/,Qi=/^on[a-z]/;function er(e,t){const n=Ja(e);class a extends ar{constructor(e){super(n,e,t)}}return a.def=n,a}const tr=e=>er(e,no),nr="undefined"!=typeof HTMLElement?HTMLElement:class{};class ar extends nr{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Jn((()=>{this._connected||(to(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,a=!_e(t),l=t?a?Object.keys(t):t:[];let s;if(a)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=Le(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Te))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Le(t)),this._setProp(Te(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,a=!0){t!==this._props[e]&&(this._props[e]=t,a&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){to(this._createVNode(),this.shadowRoot)}_createVNode(){const e=qs(this._def,ce({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof ar){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function lr(e="$style"){{const t=li();if(!t)return ne;const n=t.type.__cssModules;if(!n)return ne;return n[e]||ne}}function sr(e){const t=li();if(!t)return;const n=()=>ir(t.subTree,e(t.proxy));Ia(n),dl((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),hl((()=>e.disconnect()))}))}function ir(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{ir(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)rr(e.el,t);else if(e.type===$s)e.children.forEach((e=>ir(e,t)));else if(e.type===Ns){let{el:n,anchor:a}=e;for(;n&&(rr(n,t),n!==a);)n=n.nextSibling}}function rr(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const or=(e,{slots:t})=>Pi(Ba,_r(e),t);or.displayName="Transition";const cr={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},ur=or.props=ce({},Ba.props,cr),dr=(e,t=[])=>{_e(e)?e.forEach((e=>e(...t))):e&&e(...t)},pr=e=>!!e&&(_e(e)?e.some((e=>e.length>1)):e.length>1);function _r(e){const t={};for(const n in e)n in cr||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:a,duration:l,enterFromClass:s=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:r=`${n}-enter-to`,appearFromClass:o=s,appearActiveClass:c=i,appearToClass:u=r,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:_=`${n}-leave-to`}=e,f=function(e){if(null==e)return null;if(ye(e))return[fr(e.enter),fr(e.leave)];{const t=fr(e);return[t,t]}}(l),h=f&&f[0],m=f&&f[1],{onBeforeEnter:g,onEnter:v,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=g,onAppear:k=v,onAppearCancelled:$=b}=t,S=(e,t,n)=>{mr(e,t?u:r),mr(e,t?c:i),n&&n()},C=(e,t)=>{e._isLeaving=!1,mr(e,d),mr(e,_),mr(e,p),t&&t()},N=e=>(t,n)=>{const l=e?k:v,i=()=>S(t,e,n);dr(l,[t,i]),gr((()=>{mr(t,e?o:s),hr(t,e?u:r),pr(l)||br(t,a,h,i)}))};return ce(t,{onBeforeEnter(e){dr(g,[e]),hr(e,s),hr(e,i)},onBeforeAppear(e){dr(x,[e]),hr(e,o),hr(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>C(e,t);hr(e,d),kr(),hr(e,p),gr((()=>{e._isLeaving&&(mr(e,d),hr(e,_),pr(y)||br(e,a,m,n))})),dr(y,[e,n])},onEnterCancelled(e){S(e,!1),dr(b,[e])},onAppearCancelled(e){S(e,!0),dr($,[e])},onLeaveCancelled(e){C(e),dr(w,[e])}})}function fr(e){return Le(e)}function hr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function mr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function gr(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let vr=0;function br(e,t,n,a){const l=e._endId=++vr,s=()=>{l===e._endId&&a()};if(n)return setTimeout(s,n);const{type:i,timeout:r,propCount:o}=yr(e,t);if(!i)return a();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=o&&d()};setTimeout((()=>{u<o&&d()}),r+1),e.addEventListener(c,p)}function yr(e,t){const n=window.getComputedStyle(e),a=e=>(n[e]||"").split(", "),l=a("transitionDelay"),s=a("transitionDuration"),i=wr(l,s),r=a("animationDelay"),o=a("animationDuration"),c=wr(r,o);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=o.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:o.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function wr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>xr(t)+xr(e[n]))))}function xr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function kr(){return document.body.offsetHeight}const $r=new WeakMap,Sr=new WeakMap,Cr={name:"TransitionGroup",props:ce({},ur,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=li(),a=Ra();let l,s;return _l((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const a=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&a.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&a.classList.add(e))),a.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(a);const{hasTransform:s}=yr(a);return l.removeChild(a),s}(l[0].el,n.vnode.el,t))return;l.forEach(Nr),l.forEach(Ar);const a=l.filter(Er);kr(),a.forEach((e=>{const n=e.el,a=n.style;hr(n,t),a.transform=a.webkitTransform=a.transitionDuration="";const l=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",l),n._moveCb=null,mr(n,t))};n.addEventListener("transitionend",l)}))})),()=>{const i=on(e),r=_r(i);let o=i.tag||$s;l=s,s=t.default?Ka(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wa(t,qa(t,r,a,n))}if(l)for(let e=0;e<l.length;e++){const t=l[e];Wa(t,qa(t,r,a,n)),$r.set(t,t.el.getBoundingClientRect())}return qs(o,null,s)}}};function Nr(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ar(e){Sr.set(e,e.el.getBoundingClientRect())}function Er(e){const t=$r.get(e),n=Sr.get(e),a=t.left-n.left,l=t.top-n.top;if(a||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${a}px,${l}px)`,t.transitionDuration="0s",e}}const Tr=e=>{const t=e.props["onUpdate:modelValue"]||!1;return _e(t)?e=>Fe(t,e):t};function Pr(e){e.target.composing=!0}function Ir(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mr={created(e,{modifiers:{lazy:t,trim:n,number:a}},l){e._assign=Tr(l);const s=a||l.props&&"number"===l.props.type;Zi(e,t?"change":"input",(t=>{if(t.target.composing)return;let a=e.value;n&&(a=a.trim()),s&&(a=Le(a)),e._assign(a)})),n&&Zi(e,"change",(()=>{e.value=e.value.trim()})),t||(Zi(e,"compositionstart",Pr),Zi(e,"compositionend",Ir),Zi(e,"change",Ir))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:a,number:l}},s){if(e._assign=Tr(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(a&&e.value.trim()===t)return;if((l||"number"===e.type)&&Le(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Or={deep:!0,created(e,t,n){e._assign=Tr(n),Zi(e,"change",(()=>{const t=e._modelValue,n=Dr(e),a=e.checked,l=e._assign;if(_e(t)){const e=Q(t,n),s=-1!==e;if(a&&!s)l(t.concat(n));else if(!a&&s){const n=[...t];n.splice(e,1),l(n)}}else if(he(t)){const e=new Set(t);a?e.add(n):e.delete(n),l(e)}else l(Rr(e,a))}))},mounted:Ur,beforeUpdate(e,t,n){e._assign=Tr(n),Ur(e,t,n)}};function Ur(e,{value:t,oldValue:n},a){e._modelValue=t,_e(t)?e.checked=Q(t,a.props.value)>-1:he(t)?e.checked=t.has(a.props.value):t!==n&&(e.checked=X(t,Rr(e,!0)))}const Fr={created(e,{value:t},n){e.checked=X(t,n.props.value),e._assign=Tr(n),Zi(e,"change",(()=>{e._assign(Dr(e))}))},beforeUpdate(e,{value:t,oldValue:n},a){e._assign=Tr(a),t!==n&&(e.checked=X(t,a.props.value))}},jr={deep:!0,created(e,{value:t,modifiers:{number:n}},a){const l=he(t);Zi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?Le(Dr(e)):Dr(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Tr(a)},mounted(e,{value:t}){Lr(e,t)},beforeUpdate(e,t,n){e._assign=Tr(n)},updated(e,{value:t}){Lr(e,t)}};function Lr(e,t){const n=e.multiple;if(!n||_e(t)||he(t)){for(let a=0,l=e.options.length;a<l;a++){const l=e.options[a],s=Dr(l);if(n)l.selected=_e(t)?Q(t,s)>-1:t.has(s);else if(X(Dr(l),t))return void(e.selectedIndex!==a&&(e.selectedIndex=a))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Dr(e){return"_value"in e?e._value:e.value}function Rr(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const zr={created(e,t,n){Br(e,t,n,null,"created")},mounted(e,t,n){Br(e,t,n,null,"mounted")},beforeUpdate(e,t,n,a){Br(e,t,n,a,"beforeUpdate")},updated(e,t,n,a){Br(e,t,n,a,"updated")}};function Br(e,t,n,a,l){const s=function(e,t){switch(e){case"SELECT":return jr;case"TEXTAREA":return Mr;default:switch(t){case"checkbox":return Or;case"radio":return Fr;default:return Mr}}}(e.tagName,n.props&&n.props.type)[l];s&&s(e,t,n,a)}const Vr=["ctrl","shift","alt","meta"],qr={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Vr.some((n=>e[`${n}Key`]&&!t.includes(n)))},Hr=(e,t)=>(n,...a)=>{for(let e=0;e<t.length;e++){const a=qr[t[e]];if(a&&a(n,t))return}return e(n,...a)},Gr={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Wr=(e,t)=>n=>{if(!("key"in n))return;const a=Ie(n.key);return t.some((e=>e===a||Gr[e]===a))?e(n):void 0},Kr={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Jr(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:a}){!t!=!n&&(a?t?(a.beforeEnter(e),Jr(e,!0),a.enter(e)):a.leave(e,(()=>{Jr(e,!1)})):Jr(e,t))},beforeUnmount(e,{value:t}){Jr(e,t)}};function Jr(e,t){e.style.display=t?e._vod:"none"}const Yr=ce({patchProp:(e,t,n,a,l=!1,s,i,r,o)=>{"class"===t?function(e,t,n){const a=e._vtc;a&&(t=(t?[t,...a]:[...a]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,a,l):"style"===t?function(e,t,n){const a=e.style,l=ve(n);if(n&&!l){for(const e in n)Bi(a,e,n[e]);if(t&&!ve(t))for(const e in t)null==n[e]&&Bi(a,e,"")}else{const s=a.display;l?t!==n&&(a.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(a.display=s)}}(e,n,a):re(t)?oe(t)||function(e,t,n,a,l=null){const s=e._vei||(e._vei={}),i=s[t];if(a&&i)i.value=a;else{const[n,r]=function(e){let t;if(Xi.test(e)){let n;for(t={};n=e.match(Xi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(a){const i=s[t]=function(e,t){const n=e=>{const a=e.timeStamp||Gi();(Wi||a>=n.attached-1)&&On(function(e,t){if(_e(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Ki||(Ji.then(Yi),Ki=Gi()),n}(a,l);Zi(e,n,i,r)}else i&&(function(e,t,n,a){e.removeEventListener(t,n,a)}(e,n,i,r),s[t]=void 0)}}(e,t,0,a,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,a){return a?"innerHTML"===t||"textContent"===t||!!(t in e&&Qi.test(t)&&ge(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Qi.test(t)||!ve(n))&&t in e))))}(e,t,a,l))?function(e,t,n,a,l,s,i){if("innerHTML"===t||"textContent"===t)return a&&i(a,l,s),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const a=null==n?"":n;return e.value===a&&"OPTION"!==e.tagName||(e.value=a),void(null==n&&e.removeAttribute(t))}let r=!1;if(""===n||null==n){const a=typeof e[t];"boolean"===a?n=B(n):null==n&&"string"===a?(n="",r=!0):"number"===a&&(n=0,r=!0)}try{e[t]=n}catch(e){}r&&e.removeAttribute(t)}(e,t,a,s,i,r,o):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a,l){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Hi,t.slice(6,t.length)):e.setAttributeNS(Hi,t,n);else{const a=z(t);null==n||a&&!B(n)?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,l))}},Ri);let Zr,Xr=!1;function Qr(){return Zr||(Zr=fs(Yr))}function eo(){return Zr=Xr?Zr:hs(Yr),Xr=!0,Zr}const to=(...e)=>{Qr().render(...e)},no=(...e)=>{eo().hydrate(...e)},ao=(...e)=>{const t=Qr().createApp(...e),{mount:n}=t;return t.mount=e=>{const a=so(e);if(!a)return;const l=t._component;ge(l)||l.render||l.template||(l.template=a.innerHTML),a.innerHTML="";const s=n(a,!1,a instanceof SVGElement);return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),s},t},lo=(...e)=>{const t=eo().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=so(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function so(e){return ve(e)?document.querySelector(e):e}const io=le;var ro=Object.freeze({__proto__:null,render:to,hydrate:no,createApp:ao,createSSRApp:lo,initDirectivesForSSR:io,defineCustomElement:er,defineSSRCustomElement:tr,VueElement:ar,useCssModule:lr,useCssVars:sr,Transition:or,TransitionGroup:Cr,vModelText:Mr,vModelCheckbox:Or,vModelRadio:Fr,vModelSelect:jr,vModelDynamic:zr,withModifiers:Hr,withKeys:Wr,vShow:Kr,reactive:Xt,ref:hn,readonly:en,unref:yn,proxyRefs:xn,isRef:fn,toRef:Nn,toRefs:Sn,isProxy:rn,isReactive:an,isReadonly:ln,isShallow:sn,customRef:$n,triggerRef:bn,shallowRef:mn,shallowReactive:Qt,shallowReadonly:tn,markRaw:cn,toRaw:on,effect:at,stop:lt,ReactiveEffect:tt,effectScope:Be,EffectScope:ze,getCurrentScope:qe,onScopeDispose:He,computed:yi,watch:Ua,watchEffect:Pa,watchPostEffect:Ia,watchSyncEffect:Ma,onBeforeMount:ul,onMounted:dl,onBeforeUpdate:pl,onUpdated:_l,onBeforeUnmount:fl,onUnmounted:hl,onActivated:nl,onDeactivated:al,onRenderTracked:vl,onRenderTriggered:gl,onErrorCaptured:bl,onServerPrefetch:ml,provide:Ea,inject:Ta,nextTick:Jn,defineComponent:Ja,defineAsyncComponent:Za,useAttrs:Ci,useSlots:Si,defineProps:wi,defineEmits:xi,defineExpose:ki,withDefaults:$i,mergeDefaults:Ai,createPropsRestProxy:Ei,withAsyncContext:Ti,getCurrentInstance:li,h:Pi,createVNode:qs,cloneVNode:Gs,mergeProps:Qs,isVNode:js,Fragment:$s,Text:Ss,Comment:Cs,Static:Ns,Teleport:ks,Suspense:ka,KeepAlive:el,BaseTransition:Ba,withDirectives:yl,useSSRContext:Mi,ssrContextKey:Ii,createRenderer:fs,createHydrationRenderer:hs,queuePostFlushCb:Qn,warn:Tn,handleError:Un,callWithErrorHandling:Mn,callWithAsyncErrorHandling:On,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,registerRuntimeCompiler:pi,isRuntimeOnly:_i,useTransitionState:Ra,resolveTransitionHooks:qa,setTransitionHooks:Wa,getTransitionRawChildren:Ka,initCustomFormatter:Oi,get devtools(){return la},setDevtoolsHook:ia,withCtx:ma,pushScopeId:_a,popScopeId:fa,withScopeId:ha,renderList:Al,toHandlers:Il,renderSlot:Tl,createSlots:El,withMemo:Ui,isMemoSame:Fi,openBlock:Ts,createBlock:Fs,setBlockTracking:Ms,createTextVNode:Ws,createCommentVNode:Js,createStaticVNode:Ks,createElementVNode:Vs,createElementBlock:Us,guardReactiveProps:Hs,toDisplayString:ee,camelize:Te,capitalize:Me,toHandlerKey:Oe,normalizeProps:K,normalizeClass:W,normalizeStyle:V,transformVNodeArgs:Ds,version:ji,ssrUtils:null,resolveFilter:null,compatUtils:null});function oo(e){throw e}function co(e){}function uo(e,t,n,a){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const po=Symbol(""),_o=Symbol(""),fo=Symbol(""),ho=Symbol(""),mo=Symbol(""),go=Symbol(""),vo=Symbol(""),bo=Symbol(""),yo=Symbol(""),wo=Symbol(""),xo=Symbol(""),ko=Symbol(""),$o=Symbol(""),So=Symbol(""),Co=Symbol(""),No=Symbol(""),Ao=Symbol(""),Eo=Symbol(""),To=Symbol(""),Po=Symbol(""),Io=Symbol(""),Mo=Symbol(""),Oo=Symbol(""),Uo=Symbol(""),Fo=Symbol(""),jo=Symbol(""),Lo=Symbol(""),Do=Symbol(""),Ro=Symbol(""),zo=Symbol(""),Bo=Symbol(""),Vo=Symbol(""),qo=Symbol(""),Ho=Symbol(""),Go=Symbol(""),Wo=Symbol(""),Ko=Symbol(""),Jo=Symbol(""),Yo=Symbol(""),Zo={[po]:"Fragment",[_o]:"Teleport",[fo]:"Suspense",[ho]:"KeepAlive",[mo]:"BaseTransition",[go]:"openBlock",[vo]:"createBlock",[bo]:"createElementBlock",[yo]:"createVNode",[wo]:"createElementVNode",[xo]:"createCommentVNode",[ko]:"createTextVNode",[$o]:"createStaticVNode",[So]:"resolveComponent",[Co]:"resolveDynamicComponent",[No]:"resolveDirective",[Ao]:"resolveFilter",[Eo]:"withDirectives",[To]:"renderList",[Po]:"renderSlot",[Io]:"createSlots",[Mo]:"toDisplayString",[Oo]:"mergeProps",[Uo]:"normalizeClass",[Fo]:"normalizeStyle",[jo]:"normalizeProps",[Lo]:"guardReactiveProps",[Do]:"toHandlers",[Ro]:"camelize",[zo]:"capitalize",[Bo]:"toHandlerKey",[Vo]:"setBlockTracking",[qo]:"pushScopeId",[Ho]:"popScopeId",[Go]:"withCtx",[Wo]:"unref",[Ko]:"isRef",[Jo]:"withMemo",[Yo]:"isMemoSame"},Xo={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Qo(e,t,n,a,l,s,i,r=!1,o=!1,c=!1,u=Xo){return e&&(r?(e.helper(go),e.helper(Ac(e.inSSR,c))):e.helper(Nc(e.inSSR,c)),i&&e.helper(Eo)),{type:13,tag:t,props:n,children:a,patchFlag:l,dynamicProps:s,directives:i,isBlock:r,disableTracking:o,isComponent:c,loc:u}}function ec(e,t=Xo){return{type:17,loc:t,elements:e}}function tc(e,t=Xo){return{type:15,loc:t,properties:e}}function nc(e,t){return{type:16,loc:Xo,key:ve(e)?ac(e,!0):e,value:t}}function ac(e,t=!1,n=Xo,a=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:a}}function lc(e,t=Xo){return{type:8,loc:t,children:e}}function sc(e,t=[],n=Xo){return{type:14,loc:n,callee:e,arguments:t}}function ic(e,t,n=!1,a=!1,l=Xo){return{type:18,params:e,returns:t,newline:n,isSlot:a,loc:l}}function rc(e,t,n,a=!0){return{type:19,test:e,consequent:t,alternate:n,newline:a,loc:Xo}}const oc=e=>4===e.type&&e.isStatic,cc=(e,t)=>e===t||e===Ie(t);function uc(e){return cc(e,"Teleport")?_o:cc(e,"Suspense")?fo:cc(e,"KeepAlive")?ho:cc(e,"BaseTransition")?mo:void 0}const dc=/^\d|[^\$\w]/,pc=e=>!dc.test(e),_c=/[A-Za-z_$\xA0-\uFFFF]/,fc=/[\.\?\w$\xA0-\uFFFF]/,hc=/\s+[.[]\s*|\s*[.[]\s+/g,mc=e=>{e=e.trim().replace(hc,(e=>e.trim()));let t=0,n=[],a=0,l=0,s=null;for(let i=0;i<e.length;i++){const r=e.charAt(i);switch(t){case 0:if("["===r)n.push(t),t=1,a++;else if("("===r)n.push(t),t=2,l++;else if(!(0===i?_c:fc).test(r))return!1;break;case 1:"'"===r||'"'===r||"`"===r?(n.push(t),t=3,s=r):"["===r?a++:"]"===r&&(--a||(t=n.pop()));break;case 2:if("'"===r||'"'===r||"`"===r)n.push(t),t=3,s=r;else if("("===r)l++;else if(")"===r){if(i===e.length-1)return!1;--l||(t=n.pop())}break;case 3:r===s&&(t=n.pop(),s=null)}}return!a&&!l};function gc(e,t,n){const a={source:e.source.slice(t,t+n),start:vc(e.start,e.source,t),end:e.end};return null!=n&&(a.end=vc(e.start,e.source,t+n)),a}function vc(e,t,n=t.length){return bc(ce({},e),t,n)}function bc(e,t,n=t.length){let a=0,l=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(a++,l=e);return e.offset+=n,e.line+=a,e.column=-1===l?e.column+n:n-l,e}function yc(e,t,n=!1){for(let a=0;a<e.props.length;a++){const l=e.props[a];if(7===l.type&&(n||l.exp)&&(ve(t)?l.name===t:t.test(l.name)))return l}}function wc(e,t,n=!1,a=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(n)continue;if(s.name===t&&(s.value||a))return s}else if("bind"===s.name&&(s.exp||a)&&xc(s.arg,t))return s}}function xc(e,t){return!(!e||!oc(e)||e.content!==t)}function kc(e){return 5===e.type||2===e.type}function $c(e){return 7===e.type&&"slot"===e.name}function Sc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Nc(e,t){return e||t?yo:wo}function Ac(e,t){return e||t?vo:bo}const Ec=new Set([jo,Lo]);function Tc(e,t=[]){if(e&&!ve(e)&&14===e.type){const n=e.callee;if(!ve(n)&&Ec.has(n))return Tc(e.arguments[0],t.concat(e))}return[e,t]}function Pc(e,t,n){let a,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!ve(s)&&14===s.type){const e=Tc(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||ve(s))a=tc([t]);else if(14===s.type){const e=s.arguments[0];ve(e)||15!==e.type?s.callee===Do?a=sc(n.helper(Oo),[tc([t]),s]):s.arguments.unshift(tc([t])):e.properties.unshift(t),!a&&(a=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===n))}e||s.properties.unshift(t),a=s}else a=sc(n.helper(Oo),[tc([t]),s]),l&&l.callee===Lo&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=a:e.props=a:l?l.arguments[0]=a:e.arguments[2]=a}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function Mc(e,{helper:t,removeHelper:n,inSSR:a}){e.isBlock||(e.isBlock=!0,n(Nc(a,e.isComponent)),t(go),t(Ac(a,e.isComponent)))}const Oc=/&(gt|lt|amp|apos|quot);/g,Uc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Fc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:se,isPreTag:se,isCustomElement:se,decodeEntities:e=>e.replace(Oc,((e,t)=>Uc[t])),onError:oo,onWarn:co,comments:!1};function jc(e,t,n){const a=Xc(n),l=a?a.ns:0,s=[];for(;!au(e,t,n);){const i=e.source;let r;if(0===t||1===t)if(!e.inVPre&&Qc(i,e.options.delimiters[0]))r=Wc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])r=Qc(i,"\x3c!--")?Rc(e):Qc(i,"<!DOCTYPE")?zc(e):Qc(i,"<![CDATA[")&&0!==l?Dc(e,n):zc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){eu(e,3);continue}if(/[a-z]/i.test(i[2])){qc(e,1,a);continue}r=zc(e)}else/[a-z]/i.test(i[1])?r=Bc(e,n):"?"===i[1]&&(r=zc(e));if(r||(r=Kc(e,t)),_e(r))for(let e=0;e<r.length;e++)Lc(s,r[e]);else Lc(s,r)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<s.length;n++){const a=s[n];if(e.inPre||2!==a.type)3!==a.type||e.options.comments||(i=!0,s[n]=null);else if(/[^\t\r\n\f ]/.test(a.content))t&&(a.content=a.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[n-1],l=s[n+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(a.content))?(i=!0,s[n]=null):a.content=" "}}if(e.inPre&&a&&e.options.isPreTag(a.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Lc(e,t){if(2===t.type){const n=Xc(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){eu(e,9);const n=jc(e,3,t);return 0===e.source.length||eu(e,3),n}function Rc(e){const t=Yc(e);let n;const a=/--(\!)?>/.exec(e.source);if(a){n=e.source.slice(4,a.index);const t=e.source.slice(0,a.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)eu(e,s-l+1),l=s+1;eu(e,a.index+a[0].length-l+1)}else n=e.source.slice(4),eu(e,e.source.length);return{type:3,content:n,loc:Zc(e,t)}}function zc(e){const t=Yc(e),n="?"===e.source[1]?1:2;let a;const l=e.source.indexOf(">");return-1===l?(a=e.source.slice(n),eu(e,e.source.length)):(a=e.source.slice(n,l),eu(e,l+1)),{type:3,content:a,loc:Zc(e,t)}}function Bc(e,t){const n=e.inPre,a=e.inVPre,l=Xc(t),s=qc(e,0,l),i=e.inPre&&!n,r=e.inVPre&&!a;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),r&&(e.inVPre=!1),s;t.push(s);const o=e.options.getTextMode(s,l),c=jc(e,o,t);if(t.pop(),s.children=c,lu(e.source,s.tag))qc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&Qc(e.loc.source,"\x3c!--")}return s.loc=Zc(e,s.loc.start),i&&(e.inPre=!1),r&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function qc(e,t,n){const a=Yc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,n);eu(e,l[0].length),tu(e);const r=Yc(e),o=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Hc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ce(e,r),e.source=o,c=Hc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Qc(e.source,"/>"),eu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,n){const a=n.options;if(a.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||uc(e)||a.isBuiltInComponent&&a.isBuiltInComponent(e)||a.isNativeTag&&!a.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type){if("is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}else{if("is"===n.name)return!0;"bind"===n.name&&xc(n.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Zc(e,a),codegenNode:void 0}}function Hc(e,t){const n=[],a=new Set;for(;e.source.length>0&&!Qc(e.source,">")&&!Qc(e.source,"/>");){if(Qc(e.source,"/")){eu(e,1),tu(e);continue}const l=Gc(e,a);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(l),/^[^\t\r\n\f />]/.test(e.source),tu(e)}return n}function Gc(e,t){const n=Yc(e),a=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(a),t.add(a);{const e=/["'<]/g;for(;e.exec(a););}let l;eu(e,a.length),/^[\t\r\n\f ]*=/.test(e.source)&&(tu(e),eu(e,1),tu(e),l=function(e){const t=Yc(e);let n;const a=e.source[0],l='"'===a||"'"===a;if(l){eu(e,1);const t=e.source.indexOf(a);-1===t?n=Jc(e,e.source.length,4):(n=Jc(e,t,4),eu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const a=/["'<=`]/g;for(;a.exec(t[0]););n=Jc(e,t[0].length,4)}return{content:n,isQuoted:l,loc:Zc(e,t)}}(e));const s=Zc(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(a)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(a);let i,r=Qc(a,"."),o=t[1]||(r||Qc(a,":")?"bind":Qc(a,"@")?"on":"slot");if(t[2]){const l="slot"===o,s=a.lastIndexOf(t[2]),r=Zc(e,nu(e,n,s),nu(e,n,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:r}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=vc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return r&&c.push("prop"),{type:7,name:o,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&Qc(a,"v-"),{type:6,name:a,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function Wc(e,t){const[n,a]=e.options.delimiters,l=e.source.indexOf(a,n.length);if(-1===l)return;const s=Yc(e);eu(e,n.length);const i=Yc(e),r=Yc(e),o=l-n.length,c=e.source.slice(0,o),u=Jc(e,o,t),d=u.trim(),p=u.indexOf(d);return p>0&&bc(i,c,p),bc(r,c,o-(u.length-d.length-p)),eu(e,a.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Zc(e,i,r)},loc:Zc(e,s)}}function Kc(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let a=e.source.length;for(let t=0;t<n.length;t++){const l=e.source.indexOf(n[t],1);-1!==l&&a>l&&(a=l)}const l=Yc(e);return{type:2,content:Jc(e,a,t),loc:Zc(e,l)}}function Jc(e,t,n){const a=e.source.slice(0,t);return eu(e,t),2!==n&&3!==n&&a.includes("&")?e.options.decodeEntities(a,4===n):a}function Yc(e){const{column:t,line:n,offset:a}=e;return{column:t,line:n,offset:a}}function Zc(e,t,n){return{start:t,end:n=n||Yc(e),source:e.originalSource.slice(t.offset,n.offset)}}function Xc(e){return e[e.length-1]}function Qc(e,t){return e.startsWith(t)}function eu(e,t){const{source:n}=e;bc(e,n,t),e.source=n.slice(t)}function tu(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&eu(e,t[0].length)}function nu(e,t,n){return vc(t,e.originalSource.slice(t.offset,n),n)}function au(e,t,n){const a=e.source;switch(t){case 0:if(Qc(a,"</"))for(let e=n.length-1;e>=0;--e)if(lu(a,n[e].tag))return!0;break;case 1:case 2:{const e=Xc(n);if(e&&lu(a,e.tag))return!0;break}case 3:if(Qc(a,"]]>"))return!0}return!a}function lu(e,t){return Qc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function su(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!Cc(t)}function ru(e,t,n=!1){const{children:a}=e,l=a.length;let s=0;for(let e=0;e<a.length;e++){const l=a[e];if(1===l.type&&0===l.tagType){const e=n?0:ou(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const n=_u(e);if((!n||512===n||1===n)&&du(l,t)>=2){const n=pu(l);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&ou(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,ru(l,t),e&&t.scopes.vSlot--}else if(11===l.type)ru(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)ru(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(a,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&_e(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(ec(e.codegenNode.children)))}function ou(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const a=n.get(e);if(void 0!==a)return a;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(_u(l))return n.set(e,0),0;{let a=3;const s=du(e,t);if(0===s)return n.set(e,0),0;s<a&&(a=s);for(let l=0;l<e.children.length;l++){const s=ou(e.children[l],t);if(0===s)return n.set(e,0),0;s<a&&(a=s)}if(a>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=ou(s.exp,t);if(0===l)return n.set(e,0),0;l<a&&(a=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return n.set(e,0),0;t.removeHelper(go),t.removeHelper(Ac(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper(Nc(t.inSSR,l.isComponent))}return n.set(e,a),a}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return ou(e.content,t);case 4:return e.constType;case 8:let s=3;for(let n=0;n<e.children.length;n++){const a=e.children[n];if(ve(a)||be(a))continue;const l=ou(a,t);if(0===l)return 0;l<s&&(s=l)}return s}}const cu=new Set([Uo,Fo,jo,Lo]);function uu(e,t){if(14===e.type&&!ve(e.callee)&&cu.has(e.callee)){const n=e.arguments[0];if(4===n.type)return ou(n,t);if(14===n.type)return uu(n,t)}return 0}function du(e,t){let n=3;const a=pu(e);if(a&&15===a.type){const{properties:e}=a;for(let a=0;a<e.length;a++){const{key:l,value:s}=e[a],i=ou(l,t);if(0===i)return i;let r;if(i<n&&(n=i),r=4===s.type?ou(s,t):14===s.type?uu(s,t):0,0===r)return r;r<n&&(n=r)}}return n}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function _u(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function fu(e,t){const n=function(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:a=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:r=null,isBuiltInComponent:o=le,isCustomElement:c=le,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:h="",bindingMetadata:m=ne,inline:g=!1,isTS:v=!1,onError:b=oo,onWarn:y=co,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Me(Te(x[1])),prefixIdentifiers:n,hoistStatic:a,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:r,isBuiltInComponent:o,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:h,bindingMetadata:m,inline:g,isTS:v,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const n=t-1;n?k.helpers.set(e,n):k.helpers.delete(e)}},helperString:e=>`_${Zo[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){ve(e)&&(e=ac(e)),k.hoists.push(e);const t=ac(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Xo}}(k.cached++,e,t)};return k}(e,t);hu(e,n),t.hoistStatic&&su(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:a}=e;if(1===a.length){const n=a[0];if(iu(e,n)&&n.codegenNode){const a=n.codegenNode;13===a.type&&Mc(a,t),e.codegenNode=a}else e.codegenNode=n}else if(a.length>1){let a=64;e.codegenNode=Qo(t,n(po),void 0,e.children,a+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached}function hu(e,t){t.currentNode=e;const{nodeTransforms:n}=t,a=[];for(let l=0;l<n.length;l++){const s=n[l](e,t);if(s&&(_e(s)?a.push(...s):a.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(xo);break;case 5:t.ssr||t.helper(Mo);break;case 9:for(let n=0;n<e.branches.length;n++)hu(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const a=()=>{n--};for(;n<e.children.length;n++){const l=e.children[n];ve(l)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=a,hu(l,t))}}(e,t)}t.currentNode=e;let l=a.length;for(;l--;)a[l]()}function mu(e,t){const n=ve(e)?t=>t===e:t=>e.test(t);return(e,a)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some($c))return;const s=[];for(let i=0;i<l.length;i++){const r=l[i];if(7===r.type&&n(r.name)){l.splice(i,1),i--;const n=t(e,r,a);n&&s.push(n)}}return s}}}const gu=e=>`${Zo[e]}: _${Zo[e]}`;function vu(e,t,{helper:n,push:a,newline:l,isTS:s}){const i=n("component"===t?So:No);for(let n=0;n<e.length;n++){let r=e[n];const o=r.endsWith("__self");o&&(r=r.slice(0,-6)),a(`const ${Ic(r,t)} = ${i}(${JSON.stringify(r)}${o?", true":""})${s?"!":""}`),n<e.length-1&&l()}}function bu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),yu(e,t,n),n&&t.deindent(),t.push("]")}function yu(e,t,n=!1,a=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const r=e[i];ve(r)?l(r):_e(r)?bu(r,t):wu(r,t),i<e.length-1&&(n?(a&&l(","),s()):a&&l(", "))}}function wu(e,t){if(ve(e))t.push(e);else if(be(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:wu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:xu(e,t);break;case 5:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(Mo)}(`),wu(e.content,t),n(")")}(e,t);break;case 8:ku(e,t);break;case 3:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(xo)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:a,pure:l}=t,{tag:s,props:i,children:r,patchFlag:o,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&n(a(Eo)+"("),d&&n(`(${a(go)}(${p?"true":""}), `),l&&n("/*#__PURE__*/");n(a(d?Ac(t.inSSR,_):Nc(t.inSSR,_))+"(",e),yu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,r,o,c]),t),n(")"),d&&n(")"),u&&(n(", "),wu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:a,pure:l}=t,s=ve(e.callee)?e.callee:a(e.callee);l&&n("/*#__PURE__*/"),n(s+"(",e),yu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:a,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void n("{}",e);const r=i.length>1||!1;n(r?"{":"{ "),r&&a();for(let e=0;e<i.length;e++){const{key:a,value:l}=i[e];$u(a,t),n(": "),wu(l,t),e<i.length-1&&(n(","),s())}r&&l(),n(r?"}":" }")}(e,t);break;case 17:!function(e,t){bu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:a,deindent:l}=t,{params:s,returns:i,body:r,newline:o,isSlot:c}=e;c&&n(`_${Zo[Go]}(`),n("(",e),_e(s)?yu(s,t):s&&wu(s,t),n(") => "),(o||r)&&(n("{"),a()),i?(o&&n("return "),_e(i)?bu(i,t):wu(i,t)):r&&wu(r,t),(o||r)&&(l(),n("}")),c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:a,alternate:l,newline:s}=e,{push:i,indent:r,deindent:o,newline:c}=t;if(4===n.type){const e=!pc(n.content);e&&i("("),xu(n,t),e&&i(")")}else i("("),wu(n,t),i(")");s&&r(),t.indentLevel++,s||i(" "),i("? "),wu(a,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,wu(l,t),u||t.indentLevel--,s&&o(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:a,indent:l,deindent:s,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(l(),n(`${a(Vo)}(-1),`),i()),n(`_cache[${e.index}] = `),wu(e.value,t),e.isVNode&&(n(","),i(),n(`${a(Vo)}(1),`),i(),n(`_cache[${e.index}]`),s()),n(")")}(e,t);break;case 21:yu(e.body,t,!0,!1)}}function xu(e,t){const{content:n,isStatic:a}=e;t.push(a?JSON.stringify(n):n,e)}function ku(e,t){for(let n=0;n<e.children.length;n++){const a=e.children[n];ve(a)?t.push(a):wu(a,t)}}function $u(e,t){const{push:n}=t;8===e.type?(n("["),ku(e,t),n("]")):e.isStatic?n(pc(e.content)?e.content:JSON.stringify(e.content),e):n(`[${e.content}]`,e)}const Su=mu(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,a){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=ac("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=Cu(e,t),s={type:9,loc:e.loc,branches:[l]};if(n.replaceNode(s),a)return a(s,l,!0)}else{const l=n.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){n.removeNode();const l=Cu(e,t);i.branches.push(l);const s=a&&a(i,l,!1);hu(l,n),s&&s(),n.currentNode=null}break}n.removeNode(i)}}}(e,t,n,((e,t,a)=>{const l=n.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(a)e.codegenNode=Nu(t,i,n);else{const a=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);a.alternate=Nu(t,i+e.branches.length-1,n)}}}))));function Cu(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!yc(e,"for")?e.children:[e],userKey:wc(e,"key"),isTemplateIf:n}}function Nu(e,t,n){return e.condition?rc(e.condition,Au(e,t,n),sc(n.helper(xo),['""',"true"])):Au(e,t,n)}function Au(e,t,n){const{helper:a}=n,l=nc("key",ac(`${t}`,!1,Xo,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Pc(e,l,n),e}{let t=64;return Qo(n,a(po),tc([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(r=e).type&&r.callee===Jo?r.arguments[1].returns:r;return 13===t.type&&Mc(t,n),Pc(t,l,n),e}var r}const Eu=mu("for",((e,t,n)=>{const{helper:a,removeHelper:l}=n;return function(e,t,n,a){if(!t.exp)return;const l=Mu(t.exp);if(!l)return;const{scopes:s}=n,{source:i,value:r,key:o,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:r,keyAlias:o,objectIndexAlias:c,parseResult:l,children:Sc(e)?e.children:[e]};n.replaceNode(u),s.vFor++;const d=a&&a(u);return()=>{s.vFor--,d&&d()}}(e,t,n,(t=>{const s=sc(a(To),[t.source]),i=Sc(e),r=yc(e,"memo"),o=wc(e,"key"),c=o&&(6===o.type?ac(o.value.content,!0):o.exp),u=o?nc("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:o?128:256;return t.codegenNode=Qo(n,a(po),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let o;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(o=f.codegenNode,i&&u&&Pc(o,u,n)):_?o=Qo(n,a(po),u?tc([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(o=p[0].codegenNode,i&&u&&Pc(o,u,n),o.isBlock!==!d&&(o.isBlock?(l(go),l(Ac(n.inSSR,o.isComponent))):l(Nc(n.inSSR,o.isComponent))),o.isBlock=!d,o.isBlock?(a(go),a(Ac(n.inSSR,o.isComponent))):a(Nc(n.inSSR,o.isComponent))),r){const e=ic(Uu(t.parseResult,[ac("_cached")]));e.body={type:21,body:[lc(["const _memo = (",r.exp,")"]),lc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(Yo)}(_cached, _memo)) return _cached`]),lc(["const _item = ",o]),ac("_item.memo = _memo"),ac("return _item")],loc:Xo},s.arguments.push(e,ac("_cache"),ac(String(n.cached++)))}else s.arguments.push(ic(Uu(t.parseResult),o,!0))}}))})),Tu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Pu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Mu(e,t){const n=e.loc,a=e.content,l=a.match(Tu);if(!l)return;const[,s,i]=l,r={source:Ou(n,i.trim(),a.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let o=s.trim().replace(Iu,"").trim();const c=s.indexOf(o),u=o.match(Pu);if(u){o=o.replace(Pu,"").trim();const e=u[1].trim();let t;if(e&&(t=a.indexOf(e,c+o.length),r.key=Ou(n,e,t)),u[2]){const l=u[2].trim();l&&(r.index=Ou(n,l,a.indexOf(l,r.key?t+e.length:c+o.length)))}}return o&&(r.value=Ou(n,o,c)),r}function Ou(e,t,n){return ac(t,!1,gc(e,n,t.length))}function Uu({value:e,key:t,index:n},a=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||ac("_".repeat(t+1),!1)))}([e,t,n,...a])}const Fu=ac("undefined",!1),ju=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(yc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Lu=(e,t,n)=>ic(e,t,!1,!0,t.length?t[0].loc:n);function Du(e,t,n=Lu){t.helper(Go);const{children:a,loc:l}=e,s=[],i=[];let r=t.scopes.vSlot>0||t.scopes.vFor>0;const o=yc(e,"slot",!0);if(o){const{arg:e,exp:t}=o;e&&!oc(e)&&(r=!0),s.push(nc(e||ac("default",!0),n(t,a,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<a.length;e++){const l=a[e];let _;if(!Sc(l)||!(_=yc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(o)break;c=!0;const{children:f,loc:h}=l,{arg:m=ac("default",!0),exp:g}=_;let v;oc(m)?v=m?m.content:"default":r=!0;const b=n(g,f,h);let y,w,x;if(y=yc(l,"if"))r=!0,i.push(rc(y.exp,Ru(m,b),Fu));else if(w=yc(l,/^else(-if)?$/,!0)){let t,n=e;for(;n--&&(t=a[n],3===t.type););if(t&&Sc(t)&&yc(t,"if")){a.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,Ru(m,b),Fu):Ru(m,b)}}else if(x=yc(l,"for")){r=!0;const e=x.parseResult||Mu(x.exp);e&&i.push(sc(t.helper(To),[e.source,ic(Uu(e),Ru(m,b),!0)]))}else{if(v){if(p.has(v))continue;p.add(v),"default"===v&&(u=!0)}s.push(nc(m,b))}}if(!o){const e=(e,t)=>nc("default",n(e,t,l));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,a))}const _=r?2:zu(e.children)?3:1;let f=tc(s.concat(nc("_",ac(_+"",!1))),l);return i.length&&(f=sc(t.helper(Io),[f,ec(i)])),{slots:f,hasDynamicSlots:r}}function Ru(e,t){return tc([nc("name",e),nc("fn",t)])}function zu(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||zu(n.children))return!0;break;case 9:if(zu(n.branches))return!0;break;case 10:case 11:if(zu(n.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,qu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:a}=e,l=1===e.tagType;let s=l?function(e,t,n=!1){let{tag:a}=e;const l=Ku(a),s=wc(e,"is");if(s)if(l){const e=6===s.type?s.value&&ac(s.value.content,!0):s.exp;if(e)return sc(t.helper(Co),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(a=s.value.content.slice(4));const i=!l&&yc(e,"is");if(i&&i.exp)return sc(t.helper(Co),[i.exp]);const r=uc(a)||t.isBuiltInComponent(a);return r?(n||t.helper(r),r):(t.helper(So),t.components.add(a),Ic(a,"component"))}(e,t):`"${n}"`;const i=ye(s)&&s.callee===Co;let r,o,c,u,d,p,_=0,f=i||s===_o||s===fo||!l&&("svg"===n||"foreignObject"===n);if(a.length>0){const n=Hu(e,t,void 0,l,i);r=n.props,_=n.patchFlag,d=n.dynamicPropNames;const a=n.directives;p=a&&a.length?ec(a.map((e=>function(e,t){const n=[],a=Vu.get(e);a?n.push(t.helperString(a)):(t.helper(No),t.directives.add(e.name),n.push(Ic(e.name,"directive")));const{loc:l}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=ac("true",!1,l);n.push(tc(e.modifiers.map((e=>nc(e,t))),l))}return ec(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===ho&&(f=!0,_|=1024),l&&s!==_o&&s!==ho){const{slots:n,hasDynamicSlots:a}=Du(e,t);o=n,a&&(_|=1024)}else if(1===e.children.length&&s!==_o){const n=e.children[0],a=n.type,l=5===a||8===a;l&&0===ou(n,t)&&(_|=1),o=l||2===a?n:e.children}else o=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let n=0,a=e.length;n<a;n++)t+=JSON.stringify(e[n]),n<a-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Qo(t,s,r,o,c,u,p,!!f,!1,l,e.loc)};function Hu(e,t,n=e.props,a,l,s=!1){const{tag:i,loc:r,children:o}=e;let c=[];const u=[],d=[],p=o.length>0;let _=!1,f=0,h=!1,m=!1,g=!1,v=!1,b=!1,y=!1;const w=[],x=({key:e,value:n})=>{if(oc(e)){const s=e.content,i=re(s);if(!i||a&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(v=!0),i&&Ce(s)&&(y=!0),20===n.type||(4===n.type||8===n.type)&&ou(n,t)>0)return;"ref"===s?h=!0:"class"===s?m=!0:"style"===s?g=!0:"key"===s||w.includes(s)||w.push(s),!a||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let a=0;a<n.length;a++){const l=n[a];if(6===l.type){const{loc:e,name:n,value:a}=l;let s=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push(nc(ac("ref_for",!0),ac("true")))),"is"===n&&(Ku(i)||a&&a.content.startsWith("vue:")))continue;c.push(nc(ac(n,!0,gc(e,0,n.length)),ac(a?a.content:"",s,a?a.loc:e)))}else{const{name:n,arg:a,exp:o,loc:f}=l,h="bind"===n,m="on"===n;if("slot"===n)continue;if("once"===n||"memo"===n)continue;if("is"===n||h&&xc(a,"is")&&Ku(i))continue;if(m&&s)continue;if((h&&xc(a,"key")||m&&p&&xc(a,"vue:before-update"))&&(_=!0),h&&xc(a,"ref")&&t.scopes.vFor>0&&c.push(nc(ac("ref_for",!0),ac("true"))),!a&&(h||m)){b=!0,o&&(c.length&&(u.push(tc(Gu(c),r)),c=[]),u.push(h?o:{type:14,loc:f,callee:t.helper(Do),arguments:[o]}));continue}const g=t.directiveTransforms[n];if(g){const{props:n,needRuntime:a}=g(l,e,t);!s&&n.forEach(x),c.push(...n),a&&(d.push(l),be(a)&&Vu.set(l,a))}else Ne(n)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(tc(Gu(c),r)),k=u.length>1?sc(t.helper(Oo),u,r):u[0]):c.length&&(k=tc(Gu(c),r)),b?f|=16:(m&&!a&&(f|=2),g&&!a&&(f|=4),w.length&&(f|=8),v&&(f|=32)),_||0!==f&&32!==f||!(h||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,n=-1,a=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;oc(l)?"class"===l.content?e=t:"style"===l.content&&(n=t):l.isHandlerKey||(a=!0)}const l=k.properties[e],s=k.properties[n];a?k=sc(t.helper(jo),[k]):(l&&!oc(l.value)&&(l.value=sc(t.helper(Uo),[l.value])),s&&(g||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=sc(t.helper(Fo),[s.value])));break;case 14:break;default:k=sc(t.helper(jo),[sc(t.helper(Lo),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Gu(e){const t=new Map,n=[];for(let a=0;a<e.length;a++){const l=e[a];if(8===l.key.type||!l.key.isStatic){n.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||re(s))&&Wu(i,l):(t.set(s,l),n.push(l))}return n}function Wu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=ec([e.value,t.value],e.loc)}function Ku(e){return"component"===e||"Component"===e}const Ju=(e,t)=>{if(Cc(e)){const{children:n,loc:a}=e,{slotName:l,slotProps:s}=function(e,t){let n,a='"default"';const l=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?a=JSON.stringify(n.value.content):(n.name=Te(n.name),l.push(n))):"bind"===n.name&&xc(n.arg,"name")?n.exp&&(a=n.exp):("bind"===n.name&&n.arg&&oc(n.arg)&&(n.arg.content=Te(n.arg.content)),l.push(n))}if(l.length>0){const{props:a,directives:s}=Hu(e,t,l,!1,!1);n=a}return{slotName:a,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let r=2;s&&(i[2]=s,r=3),n.length&&(i[3]=ic([],n,!1,!1,a),r=4),t.scopeId&&!t.slotted&&(r=5),i.splice(r),e.codegenNode=sc(t.helper(Po),i,a)}},Yu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Zu=(e,t,n,a)=>{const{loc:l,modifiers:s,arg:i}=e;let r;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),r=ac(Oe(Te(e)),!0,i.loc)}else r=lc([`${n.helperString(Bo)}(`,i,")"]);else r=i,r.children.unshift(`${n.helperString(Bo)}(`),r.children.push(")");let o=e.exp;o&&!o.content.trim()&&(o=void 0);let c=n.cacheHandlers&&!o&&!n.inVOnce;if(o){const e=mc(o.content),t=!(e||Yu.test(o.content)),n=o.content.includes(";");(t||c&&e)&&(o=lc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,o,n?"}":")"]))}let u={props:[nc(r,o||ac("() => {}",!1,l))]};return a&&(u=a(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Xu=(e,t,n)=>{const{exp:a,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Te(i.content):`${n.helperString(Ro)}(${i.content})`:(i.children.unshift(`${n.helperString(Ro)}(`),i.children.push(")"))),n.inSSR||(l.includes("prop")&&Qu(i,"."),l.includes("attr")&&Qu(i,"^")),!a||4===a.type&&!a.content.trim()?{props:[nc(i,ac("",!0,s))]}:{props:[nc(i,a)]}},Qu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},ed=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let a,l=!1;for(let e=0;e<n.length;e++){const t=n[e];if(kc(t)){l=!0;for(let l=e+1;l<n.length;l++){const s=n[l];if(!kc(s)){a=void 0;break}a||(a=n[e]=lc([t],t.loc)),a.children.push(" + ",s),n.splice(l,1),l--}}}if(l&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const a=n[e];if(kc(a)||8===a.type){const l=[];2===a.type&&" "===a.content||l.push(a),t.ssr||0!==ou(a,t)||l.push("1"),n[e]={type:12,content:a,loc:a.loc,codegenNode:sc(t.helper(ko),l)}}}}},td=new WeakSet,nd=(e,t)=>{if(1===e.type&&yc(e,"once",!0)){if(td.has(e)||t.inVOnce)return;return td.add(e),t.inVOnce=!0,t.helper(Vo),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},ad=(e,t,n)=>{const{exp:a,arg:l}=e;if(!a)return ld();const s=a.loc.source,i=4===a.type?a.content:s;if(!i.trim()||!mc(i))return ld();const r=l||ac("modelValue",!0),o=l?oc(l)?`onUpdate:${l.content}`:lc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=lc([(n.isTS?"($event: any)":"$event")+" => ((",a,") = $event)"]);const u=[nc(r,e.exp),nc(o,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),n=l?oc(l)?`${l.content}Modifiers`:lc([l,' + "Modifiers"']):"modelModifiers";u.push(nc(n,ac(`{ ${t} }`,!1,e.loc,2)))}return ld(u)};function ld(e=[]){return{props:e}}const sd=new WeakSet,id=(e,t)=>{if(1===e.type){const n=yc(e,"memo");if(!n||sd.has(e))return;return sd.add(e),()=>{const a=e.codegenNode||t.currentNode.codegenNode;a&&13===a.type&&(1!==e.tagType&&Mc(a,t),e.codegenNode=sc(t.helper(Jo),[n.exp,ic(void 0,a),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const n=t.onError||oo,a="module"===t.mode;!0===t.prefixIdentifiers?n(uo(46)):a&&n(uo(47)),t.cacheHandlers&&n(uo(48)),t.scopeId&&!a&&n(uo(49));const l=ve(e)?function(e,t={}){const n=function(e,t){const n=ce({},Fc);let a;for(a in t)n[a]=void 0===t[a]?Fc[a]:t[a];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),a=Yc(n);return function(e,t=Xo){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(jc(n,0,[]),Zc(n,a))}(e,t):e,[s,i]=[[nd,Su,id,Eu,Ju,qu,ju,ed],{on:Zu,bind:Xu,model:ad}];return fu(l,ce({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ce({},i,t.directiveTransforms||{})})),function(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:a=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:r="Vue",runtimeModuleName:o="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:n,sourceMap:a,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:r,runtimeModuleName:o,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Zo[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:a,push:l,prefixIdentifiers:s,indent:i,deindent:r,newline:o,ssr:c}=n,u=e.helpers.length>0,d=!s&&"module"!==a;if(function(e,t){const{push:n,newline:a,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(n(`const _Vue = ${s}\n`),e.hoists.length)&&n(`const { ${[yo,wo,xo,ko,$o].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:a}=t;a();for(let l=0;l<e.length;l++){const s=e[l];s&&(n(`const _hoisted_${l+1} = `),wu(s,t),a())}t.pure=!1}(e.hoists,t),a(),n("return ")}(e,n),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),l("\n"),o())),e.components.length&&(vu(e.components,"component",n),(e.directives.length||e.temps>0)&&o()),e.directives.length&&(vu(e.directives,"directive",n),e.temps>0&&o()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),o()),c||l("return "),e.codegenNode?wu(e.codegenNode,n):l("null"),d&&(r(),l("}")),r(),l("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}(l,ce({},t,{prefixIdentifiers:!1}))}const od=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol(""),hd=Symbol(""),md=Symbol(""),gd=Symbol("");var vd;let bd;vd={[od]:"vModelRadio",[cd]:"vModelCheckbox",[ud]:"vModelText",[dd]:"vModelSelect",[pd]:"vModelDynamic",[_d]:"withModifiers",[fd]:"withKeys",[hd]:"vShow",[md]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(vd).forEach((e=>{Zo[e]=vd[e]}));const yd=D("style,iframe,script,noscript",!0),wd={isVoidTag:Z,isNativeTag:e=>J(e)||Y(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return bd||(bd=document.createElement("div")),t?(bd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,bd.children[0].getAttribute("foo")):(bd.innerHTML=e,bd.textContent)},isBuiltInComponent:e=>cc(e,"Transition")?md:cc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(yd(e))return 2}return 0}},xd=(e,t)=>{const n=G(e);return ac(JSON.stringify(n),!1,t,3)},kd=D("passive,once,capture"),$d=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Sd=D("left,right"),Cd=D("onkeyup,onkeydown,onkeypress",!0),Nd=(e,t)=>oc(e)&&"onclick"===e.content.toLowerCase()?ac(t,!0):4!==e.type?lc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ad=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Ed=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:ac("style",!0,t.loc),exp:xd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Td={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(ac("innerHTML",!0,l),a||ac("",!0))]}},text:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(ac("textContent",!0),a?ou(a,n)>0?a:sc(n.helperString(Mo),[a],l):ac("",!0))]}},model:(e,t,n)=>{const a=ad(e,t,n);if(!a.props.length||1===t.tagType)return a;const{tag:l}=t,s=n.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=ud,i=!1;if("input"===l||s){const n=wc(t,"type");if(n){if(7===n.type)e=pd;else if(n.value)switch(n.value.content){case"radio":e=od;break;case"checkbox":e=cd;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===l&&(e=dd);i||(a.needRuntime=n.helper(e))}return a.props=a.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),a},on:(e,t,n)=>Zu(e,0,n,(t=>{const{modifiers:a}=e;if(!a.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:r,eventOptionModifiers:o}=((e,t,n,a)=>{const l=[],s=[],i=[];for(let n=0;n<t.length;n++){const a=t[n];kd(a)?i.push(a):Sd(a)?oc(e)?Cd(e.content)?l.push(a):s.push(a):(l.push(a),s.push(a)):$d(a)?s.push(a):l.push(a)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,a);if(r.includes("right")&&(l=Nd(l,"onContextmenu")),r.includes("middle")&&(l=Nd(l,"onMouseup")),r.length&&(s=sc(n.helper(_d),[s,JSON.stringify(r)])),!i.length||oc(l)&&!Cd(l.content)||(s=sc(n.helper(fd),[s,JSON.stringify(i)])),o.length){const e=o.map(Me).join("");l=oc(l)?ac(`${l.content}${e}`,!0):lc(["(",l,`) + "${e}"`])}return{props:[nc(l,s)]}})),show:(e,t,n)=>({props:[],needRuntime:n.helper(hd)})},Pd=Object.create(null);function Id(e,t){if(!ve(e)){if(!e.nodeType)return le;e=e.innerHTML}const n=e,a=Pd[n];if(a)return a;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return rd(e,ce({},wd,t,{nodeTransforms:[Ad,...Ed,...t.nodeTransforms||[]],directiveTransforms:ce({},Td,t.directiveTransforms||{}),transformHoist:null}))}(e,ce({hoistStatic:!0,onError:void 0,onWarn:le},t)),s=new Function("Vue",l)(ro);return s._rc=!0,Pd[n]=s}pi(Id);var Md=Object.freeze({__proto__:null,BaseTransition:Ba,Comment:Cs,EffectScope:ze,Fragment:$s,KeepAlive:el,ReactiveEffect:tt,Static:Ns,Suspense:ka,Teleport:ks,Text:Ss,Transition:or,TransitionGroup:Cr,VueElement:ar,callWithAsyncErrorHandling:On,callWithErrorHandling:Mn,camelize:Te,capitalize:Me,cloneVNode:Gs,compatUtils:null,compile:Id,computed:yi,createApp:ao,createBlock:Fs,createCommentVNode:Js,createElementBlock:Us,createElementVNode:Vs,createHydrationRenderer:hs,createPropsRestProxy:Ei,createRenderer:fs,createSSRApp:lo,createSlots:El,createStaticVNode:Ks,createTextVNode:Ws,createVNode:qs,customRef:$n,defineAsyncComponent:Za,defineComponent:Ja,defineCustomElement:er,defineEmits:xi,defineExpose:ki,defineProps:wi,defineSSRCustomElement:tr,get devtools(){return la},effect:at,effectScope:Be,getCurrentInstance:li,getCurrentScope:qe,getTransitionRawChildren:Ka,guardReactiveProps:Hs,h:Pi,handleError:Un,hydrate:no,initCustomFormatter:Oi,initDirectivesForSSR:io,inject:Ta,isMemoSame:Fi,isProxy:rn,isReactive:an,isReadonly:ln,isRef:fn,isRuntimeOnly:_i,isShallow:sn,isVNode:js,markRaw:cn,mergeDefaults:Ai,mergeProps:Qs,nextTick:Jn,normalizeClass:W,normalizeProps:K,normalizeStyle:V,onActivated:nl,onBeforeMount:ul,onBeforeUnmount:fl,onBeforeUpdate:pl,onDeactivated:al,onErrorCaptured:bl,onMounted:dl,onRenderTracked:vl,onRenderTriggered:gl,onScopeDispose:He,onServerPrefetch:ml,onUnmounted:hl,onUpdated:_l,openBlock:Ts,popScopeId:fa,provide:Ea,proxyRefs:xn,pushScopeId:_a,queuePostFlushCb:Qn,reactive:Xt,readonly:en,ref:hn,registerRuntimeCompiler:pi,render:to,renderList:Al,renderSlot:Tl,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,resolveFilter:null,resolveTransitionHooks:qa,setBlockTracking:Ms,setDevtoolsHook:ia,setTransitionHooks:Wa,shallowReactive:Qt,shallowReadonly:tn,shallowRef:mn,ssrContextKey:Ii,ssrUtils:null,stop:lt,toDisplayString:ee,toHandlerKey:Oe,toHandlers:Il,toRaw:on,toRef:Nn,toRefs:Sn,transformVNodeArgs:Ds,triggerRef:bn,unref:yn,useAttrs:Ci,useCssModule:lr,useCssVars:sr,useSSRContext:Mi,useSlots:Si,useTransitionState:Ra,vModelCheckbox:Or,vModelDynamic:zr,vModelRadio:Fr,vModelSelect:jr,vModelText:Mr,vShow:Kr,version:ji,warn:Tn,watch:Ua,watchEffect:Pa,watchPostEffect:Ia,watchSyncEffect:Ma,withAsyncContext:Ti,withCtx:ma,withDefaults:$i,withDirectives:yl,withKeys:Wr,withMemo:Ui,withModifiers:Hr,withScopeId:ha}),Od={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let n=await this.chart.to_data_uri();downloadURI(n,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let n=this.get_url_request(e);n!=t?(t=n,this.update_chart(n)):t=n}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,n=this.chart_type;null==n&&(n=t.typeChart.TS_STACKED),this.chart=t.newChart(n);let a=this;this.chart.registerEvent("zoomed",(function(e,t){a.on_zoomed(e,t)}));let l=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,l)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:n}){this.from_zoom=!0;const a=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const Ud={style:{width:"100%"},ref:"chart"};Od.render=function(e,t,n,a,l,s){return Ts(),Us("div",Ud,null,512)},Od.__file="http_src/vue/chart.vue";const Fd=["selected","value","disabled"],jd=["label"],Ld=["selected","value","disabled"];var Dd={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn([]),i=hn([]),r=hn({});function o(){return null==a.selected_option?a.options[0]:a.selected_option}function c(e){null==e&&(e=o()),r.value=e,null==r.value.value&&(r.value.value=e.label)}function u(e){let t;return null==e&&(e=o()),t=e.value?e.value:e.label,t}Ua((()=>a.selected_option),((e,t)=>{c(e);let n=l.value,a=u(e);$(n).val(a),$(n).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==a.options)return;let e={};a.options.forEach((t=>{let n={...t};0!=n.value&&"0"!=n.value||(n.value=null),null==n.value&&(n.value=n.label),null==t.group?s.value.push(n):(null==e[t.group]&&(e[t.group]={group:n.group,options:[]}),e[t.group].options.push(n))})),i.value=ntopng_utility.object_to_array(e)}(),c()}Ua((()=>a.options),((e,t)=>{1!=a.disable_change&&null!=e&&p()}),{flush:"pre"}),dl((()=>{a.options&&(a.disable_change&&d||p())})),Ua([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let n=0;n<i.value.length;n+=1)if(t=i.value[n].options.find((t=>t.value==e)),null!=t)return t;return null}(t),r=a.options.find((e=>e.label==l.label));t!=a.selected_option&&(n("update:selected_option",r),n("select_option",r))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),fl((()=>{f()})),(e,t)=>(Ts(),Us("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(Ts(!0),Us($s,null,Al(s.value,((e,t)=>(Ts(),Us("option",{class:"ntopng-dropdown-min-width no-wrap",selected:e.value==r.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,Fd)))),256)),(Ts(!0),Us($s,null,Al(i.value,((e,t)=>(Ts(),Us("optgroup",{label:e.group},[(Ts(!0),Us($s,null,Al(e.options,((e,t)=>(Ts(),Us("option",{selected:e.value==r.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,Ld)))),256))],8,jd)))),256))],512))},__file:"http_src/vue/select-search.vue"},Rd={components:{"select-search":Dd},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let n=this,a=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,a){n.enable_apply=!0,n.wrong_date=n.flat_begin_date.selectedDates[0].getTime()>n.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=a("begin-date"),this.flat_end_date=a("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},server_date_to_date:function(e,t){let n=e.getTime(),a=e.getTimezoneOffset(),l=moment.tz(n,ntop_zoneinfo)._offset;return new Date(n-1e3*(l+a)*60)},on_status_updated:function(e){let t=Date.now(),n=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,n=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(n),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(n,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let n=this.get_select_values();const a=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,a)?this.is_between(i,l-n.min_5,a)?this.select_time_value="min_5":this.is_between(i,l-n.min_30,a)?this.select_time_value="min_30":this.is_between(i,l-n.hour,a)?this.select_time_value="hour":this.is_between(i,l-n.day,a)?this.select_time_value="day":this.is_between(i,l-n.week,a)?this.select_time_value="week":this.is_between(i,l-n.month,a)?this.select_time_value="month":this.is_between(i,l-n.year,a)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),n=this.get_utc_seconds(t.getTime()),a=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(a.getTime());l>e&&(l=e);let s={epoch_begin:n,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_select_values()[this.selected_time_option.value],n=this.get_utc_seconds(Date.now()),a={epoch_begin:n-t,epoch_end:n,refresh_data:e};this.emit_epoch_change(a)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,n){return e>=t-n&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,n=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=n-t/2,this.epoch_status.epoch_end=n+t/2;let a=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>a&&(this.epoch_status.epoch_end=a),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const zd=e=>(_a("data-v-bc6f1430"),e=e(),fa(),e),Bd={class:"input-group"},Vd={class:"form-group"},qd={class:"controls d-flex flex-wrap"},Hd={class:"btn-group me-auto btn-group-sm"},Gd={class:"btn-group ms-2"},Wd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),Kd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Jd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Yd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Zd=["title"],Xd=[zd((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],Qd={class:"d-flex align-items-center ms-2"},ep=["disabled"],tp={class:"btn-group"},np=["title"],ap=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],lp=["title"],sp=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],ip=["title"],rp=[zd((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],op=["title"],cp=[zd((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],up=["disabled","title"],dp=[zd((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],pp=["disabled","title"],_p=[zd((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function fp(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===n&&a.firstChild?a.insertBefore(l,a.firstChild):a.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}fp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Rd.render=function(e,t,n,a,l,s){const i=xl("select-search");return Ts(),Us("div",Bd,[Vs("div",Vd,[Vs("div",qd,[Vs("div",Hd,[Tl(e.$slots,"begin"),qs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["selected_option","options"]),Vs("div",Gd,[Wd,Vs("input",Kd,null,512),Js(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Js(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Jd,Vs("input",Yd,null,512),Js(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Js(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),yl(Vs("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Xd,8,Zd),[[Kr,l.wrong_date]])]),Vs("div",Qd,[Vs("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},ee(l.i18n("apply")),9,ep),Vs("div",tp,[Vs("button",{onClick:t[3]||(t[3]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},ap,8,np),Vs("button",{onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},sp,8,lp),Vs("button",{onClick:t[5]||(t[5]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},rp,8,ip),Vs("button",{onClick:t[6]||(t[6]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},cp,8,op),Vs("button",{disabled:null==l.history_last_status,onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},dp,8,up),Vs("button",{disabled:"custom"==l.select_time_value,onClick:t[8]||(t[8]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},_p,8,pp),Tl(e.$slots,"extra_buttons")])])])])])])},Rd.__scopeId="data-v-bc6f1430",Rd.__file="http_src/vue/data-time-range-picker.vue";var hp=Ja({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const mp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},gp={class:"modal-content"},vp={class:"modal-header"},bp={class:"modal-title"},yp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),wp={class:"modal-body"},xp={class:"modal-footer"},kp=Vs("div",{class:"mr-auto"},null,-1),$p=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);hp.render=function(e,t,n,a,l,s){return Ts(),Us("div",{onSubmit:t[0]||(t[0]=Hr(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",mp,[Vs("div",gp,[Vs("div",vp,[Vs("h5",bp,[Tl(e.$slots,"title")]),yp]),Vs("div",wp,[Tl(e.$slots,"body")]),Vs("div",xp,[kp,Tl(e.$slots,"footer"),$p])])])],544)},hp.__file="http_src/vue/modal.vue";const Sp=e=>(_a("data-v-089b0491"),e=e(),fa(),e),Cp=Sp((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Np={class:"nav nav-tabs"},Ap=["disabled"],Ep={key:0,style:{"min-height":"8.5rem"}},Tp={class:"form-group ms-2 me-2 mt-3 row"},Pp={class:"col-form-label col-sm-4"},Ip={class:"col-sm-6"},Mp=["pattern"],Op={key:1,style:{"min-height":"8.5rem"}},Up={class:"form-group ms-2 me-2 mt-3 row"},Fp={class:"col-form-label col-sm-4"},jp={class:"col-sm-8"},Lp={value:"name"},Dp={value:"date"},Rp={class:"form-group ms-2 me-2 mt-3 row"},zp={class:"col-form-label col-sm-4"},Bp={class:"col-sm-8"},Vp=["value"],qp={class:"form-group ms-2 me-2 mt-3 row"},Hp={class:"custom-control custom-switch"},Gp={class:"custom-control-label ms-1 form-check-label"},Wp=["disabled"],Kp=["disabled"],Jp=["disabled"];var Yp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("add"),i=hn(""),r=hn(!1),o=hn(""),c=hn(!0),u=hn(""),d=hn(""),p=hn([]),_=hn("date");let f=NtopUtils.REGEXES.singleword;const h=yi((()=>!new RegExp(f).test(d.value))),m=yi((()=>""==i.value));function g(){if(null!=a.page)return a.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let v=null;function b(){v!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),v=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),n("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==r.value){let t=ntopng_status_manager.get_status(),n=ntopng_url_manager.get_url_object(e);n.epoch_begin=t.epoch_begin,n.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(n)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:g()};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}n(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,r.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,n),t=t.replace(/\%end_time/,a),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,n),l=l.replace(/\%end_time/,a),o.value=l,y){y=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,n=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(n)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),dl((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ts(),Fs(hp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(S("snapshots.manage"))+" ",1),Cp])),body:ma((()=>[Vs("ul",Np,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:W(["nav-link",{active:"add"==s.value}]),href:"#"},ee(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==p.value.length,class:W(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},ee(S("snapshots.manage")),11,Ap)])]),"add"==s.value?(Ts(),Us("div",Ep,[Vs("div",Tp,[Vs("label",Pp,[Vs("b",null,ee(S("snapshots.name"))+":",1)]),Vs("div",Ip,[yl(Vs("input",{pattern:yn(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Mp),[[Mr,d.value]])])]),Js(' <div class="form-group ms-2 me-2 mt-3 row"> '),Js(' \t<div class="custom-control custom-switch"> '),Js(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Js(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Js(" \t</div> "),Js(" </div>       ")])):Js("v-if",!0),Js(" action add "),"select"==s.value?(Ts(),Us("div",Op,[Vs("div",Up,[Vs("label",Fp,[Vs("b",null,ee(S("snapshots.order_by")),1)]),Vs("div",jp,[yl(Vs("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Vs("option",Lp,ee(S("snapshots.name")),1),Vs("option",Dp,ee(S("snapshots.date")),1)],512),[[jr,_.value]])])]),Vs("div",Rp,[Vs("label",zp,[Vs("b",null,ee(S("snapshots.select")),1)]),Vs("div",Bp,[yl(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Ts(!0),Us($s,null,Al(p.value,(e=>(Ts(),Us("option",{value:e},ee(function(e){let t=1e3*e.utc,n=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${n})`}(e)),9,Vp)))),256))],512),[[jr,i.value]])])]),Vs("div",qp,[Vs("div",Hp,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>r.value=e)},null,512),[[Or,r.value]]),Vs("label",Gp,ee(o.value),1)])])])):Js("v-if",!0),Js(" action select ")])),footer:ma((()=>["add"==s.value?(Ts(),Us("button",{key:0,type:"button",onClick:w,disabled:yn(h),class:"btn btn-primary"},ee(S("snapshots.add")),9,Wp)):Js("v-if",!0),"select"==s.value?(Ts(),Us("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},ee(S("snapshots.delete_all")),1)):Js("v-if",!0),"select"==s.value?(Ts(),Us("button",{key:2,type:"button",onClick:k,disabled:yn(m),class:"btn btn-danger"},ee(S("snapshots.delete")),9,Kp)):Js("v-if",!0),"select"==s.value?(Ts(),Us("button",{key:3,type:"button",onClick:x,disabled:yn(m),class:"btn btn-primary"},ee(S("snapshots.apply")),9,Jp)):Js("v-if",!0)])),_:1},512))}};fp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Yp.__scopeId="data-v-089b0491",Yp.__file="http_src/vue/modal-snapshot.vue";const Zp=e=>(_a("data-v-185590b6"),e=e(),fa(),e),Xp={class:"form-group ms-2 me-2 mt-3 row"},Qp={class:"col-11"},e_={class:"col-form-label"},t_=[Zp((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],n_={class:"container"},a_={class:"row custom-ms me-2 mt-1"},l_={class:"col-5"},s_=["onUpdate:modelValue"],i_={class:"custom-control-label ms-1 form-check-label"},r_={class:"col-2"},o_=["onUpdate:modelValue"],c_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),u_={class:"col-2"},d_=["onUpdate:modelValue"],p_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),__={class:"col-3"},f_=["onUpdate:modelValue"],h_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var m_={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const n=e;function a(){t("update:timeseries",n.timeseries)}function l(){t("delete_ts",n.id)}return(t,n)=>(Ts(),Us("div",null,[Vs("div",Xp,[Vs("div",Qp,[Vs("label",e_,[Vs("b",null,ee(e.title),1)])]),e.show_delete_button?(Ts(),Us("div",{key:0,class:"col-1",onClick:l},t_)):Js("v-if",!0)]),Vs("div",n_,[(Ts(!0),Us($s,null,Al(e.timeseries,(e=>(Ts(),Us("div",a_,[Vs("div",l_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.raw=t},null,40,s_),[[Or,e.raw]]),Vs("label",i_,ee(e.label),1)]),Vs("div",r_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.past=t},null,40,o_),[[Or,e.past]]),c_]),Vs("div",u_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.avg=t},null,40,d_),[[Or,e.avg]]),p_]),Vs("div",__,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.perc_95=t},null,40,f_),[[Or,e.perc_95]]),h_])])))),256))])]))}};fp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),m_.__scopeId="data-v-185590b6",m_.__file="http_src/vue/list-timeseries.vue";const g_=h.getFormatter(h.types.bytes.id),v_="page-stats-action-link",b_="page-stats-action-jump-historical",y_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:v_,render:function(e,t,n){let a=this,l={handlerId:v_,onClick:function(){let e=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(e,n.ts_query)}};return j.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>n.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:b_,onClick:function(){a.status;let e=x.serialize_param("l7proto",`${n.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",r=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?x.serialize_param("ifid",n.value):"host"==e.value?x.serialize_param("ip",`${n.value};eq`):void 0}));i=r.join("&"),t=`${t}&${i}`,window.open(t)}};return j.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},w_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:v_,render:function(e,t,n){let a=this,l={handlerId:v_,onClick:function(){let e=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(e,n.ts_query)}};return j.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:b_,onClick:function(){a.status;let e=x.serialize_param("l7cat",`${n.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",r=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?x.serialize_param("ifid",n.value):"host"==e.value?x.serialize_param("ip",`${n.value};eq`):void 0}));i=r.join("&"),t=`${t}&${i}`,window.open(t)}};return j.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},x_=[y_,w_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:v_,render:function(e,t,n){let a=this,l=e.label,s="",i={handlerId:v_,onClick:async function(){a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host&&e.is_local&&(l=j.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l=n.host.id,s=n.host.is_local,i={handlerId:b_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=x.serialize_param(e,t):"host"==e&&(a=x.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},r={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;window.open(t)}},o=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return a.sources_types_enabled.host&&s&&o.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:r}),j.createActionButtons(o)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:v_,render:function(e,t,n){let a=this,l=e.label,s="",i={handlerId:v_,onClick:async function(){a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host&&e.is_local&&(l=j.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l=n.host.id,s=n.host.is_local,i={handlerId:b_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=x.serialize_param(e,t):"host"==e&&(a=x.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},r={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;window.open(t)}},o=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return a.sources_types_enabled.host&&s&&o.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:r}),j.createActionButtons(o)}}]}];let k_=x_.find((e=>"top_protocols"==e.view));null!=k_&&(k_=b.clone(k_),k_.table_value="host");const $_=[k_],S_=h.getFormatter(h.types.bytes.id),C_=h.getFormatter(h.types.bps.id),N_="page-stats-action-link",A_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,n=e.source_type.source_def_array;for(let a=0;a<n.length;a+=1)if("device"==n[a].value){t=e.source_array[a].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:N_,render:function(e,t,n){let a=this,l={handlerId:N_,onClick:function(){a.add_ts_group_from_source_value_dict("snmp_interface",n.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return j.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>S_(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>S_(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>S_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>C_(e)}]},E_=[A_],T_={hide:"hide",select:"select",input:"input"},P_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},I_={interface:x_,host:$_,snmp_interface:E_,snmp_device:E_},M_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:T_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:T_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:T_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:T_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:T_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:T_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:T_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:T_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:T_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:T_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:T_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:T_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:T_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:T_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:T_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:T_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:T_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:T_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:T_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:T_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:T_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:T_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:T_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:T_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:T_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:T_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:T_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:T_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:T_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:T_.input}]}],O_={ui_types:T_,sources_url_el_to_source:P_,sources_types:M_,sources_types_tables:I_},U_=e=>{let t=[];e.forEach((e=>{let n=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let n=e.metric.schema;null!=e.metric.query&&(n=`${n}+${e.metric.query}`);let a=t.join("|"),l=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${l};${n};${a}`;return s}(e);t.push(n)}));let n=t.join(";;");x.set_key_to_url("timeseries_groups",n)};const F_=(e,t,n)=>{let a=D_(e,t,n),l=[];for(let e in n.timeseries){let t=n.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:a,source_type:e,source_array:t,metric:n,timeseries:l}},j_=async(e,t,n)=>{let a=Q_(),l=await V_(e,a),s=await X_(e,a,l),i=nf(s,t,n);return[F_(a,l,i)]};async function L_(e){let t=e.split(";"),n=t[0],a=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=B_(n),r=await H_(http_prefix,i,a),o=await ef(http_prefix,i,r,l[0],l[1]),c=function(e,t){let n=e.split("|"),a=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return n.forEach((e=>{let n=a.exec(e),s=n[1],i=t.timeseries[s].label,r=JSON.parse(n[2]),o=JSON.parse(n[3]),c=JSON.parse(n[4]),u=JSON.parse(n[5]);l.push({id:s,label:i,raw:r,past:o,avg:c,perc_95:u})})),l}(s,o);return{id:D_(i,r,o),source_type:i,source_array:r,metric:o,timeseries:c}}const D_=(e,t,n,a,l)=>{let s="";null!=n&&(s=n.schema,null!=n.query&&(s=`${s} - ${n.query}`));let i=e.source_def_array,r=t.map(((e,t)=>{let n=i[t].value;return null==a||a[n]?e.value:null})).filter((e=>null!=e)).join("_"),o=e.id;return l&&null!=e.id_group&&(o=e.id_group),`${o} - ${r} - ${s}`};const R_=O_.sources_url_el_to_source,z_=O_.sources_types,B_=e=>z_.find((t=>t.id==e)),V_=async(e,t)=>{let n=J_(t);return await H_(e,t,n)};async function q_(e,t,n){let a=t.source_def_array.map((e=>n[e.value]));return await H_(e,t,a)}const H_=async(e,t,n)=>{null==t&&(t=Q_());let a,l=[];for(let s=0;s<n.length;s+=1){let i=n[s],r=t.source_def_array[s];if(r.sources_url||r.sources_function){let n=[];n=r.sources_url?await W_(e,t.id,r):r.sources_function(),a=n.find((e=>e.value==i)),null==a&&(a=n[0])}else a={label:i,value:i};l.push(a)}return l};let G_={};const W_=async(e,t,a)=>{let l=`${t}_${a.value}`;if(null==G_[l])if(a.sources_url){let t=`${e}/${a.sources_url}`;G_[l]=b.http_request(t)}else{if(!a.sources_function)return[];G_[l]=a.sources_function()}let s=await G_[l];if(a.sources_url){let e=R_[a.value_map_sources_res];if(null==e&&(e=R_[a.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${a.value} key`;s=s.map((t=>e(t)))}return s.sort(n.sortAlphabetically)};function K_(e,t){e.source_def_array.forEach((e=>{let n=t[e.value];null!=n&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,n):x.set_key_to_url(e.value,n))}))}const J_=e=>(null==e&&(e=Q_()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Y_={},Z_=null;const X_=async(e,t,n)=>{let a=`${x.get_url_entry("epoch_begin")}_${x.get_url_entry("epoch_end")}`;null==t&&(t=Q_()),null==n&&(n=await V_(e,t));let l=function(e,t,n){let a=t.source_def_array.map(((e,t)=>`${e.value}=${n[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${a}`}(e,t,n),s=function(e,t){let n=t.map((e=>e.value)).join("_");return`${e.id}_${n}`}(t,n);a!=Z_&&(Y_[s]=null,Z_=a),null==Y_[s]&&(Y_[s]=b.http_request(l));let i=await Y_[s];return 0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),b.clone(i)},Q_=()=>{let e=window.location.pathname;for(let t=0;t<z_.length;t+=1){if(1==new RegExp(z_[t].regex_page_url).test(e))return z_[t]}throw`source_type not found for ${e}`},ef=async(e,t,n,a,l)=>(await X_(e,t,n)).find((e=>e.schema==a&&e.query==l)),tf=(e,t)=>{null==t&&(t=Q_());let n={};t.source_def_array.forEach((e=>n[e.value]=!0));let a=e.split(",");for(let e=0;e<a.length;e+=1){let t=a[e].split(":")[0];if(null==n[t])return a[e]}return null},nf=(e,t,n)=>{let a;return null!=t&&(a=e.find((e=>e.schema==t&&(null==n||e.query==n)))),null==a&&(a=e.find((e=>1==e.default_visible))),null!=a?a:e[0]},af={set_timeseries_groups_in_url:U_,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let n=t.split(";;");return!n?.length>0?null:Promise.all(n.map((async e=>await L_(e))))},get_default_timeseries_groups:j_,get_ts_group:F_,get_ts_group_id:D_,sources_types:z_,sources_types_tables:O_.sources_types_tables,get_source_type_from_id:B_,get_current_page_source_type:Q_,get_sources:W_,get_default_source_array:V_,get_source_array_from_value_dict:q_,get_source_array_from_value_array:H_,get_default_source_value_array:J_,get_metrics:X_,get_metric_from_schema:ef,get_metric_query_from_ts_query:tf,get_default_metric:nf,set_source_value_object_in_url:K_,ui_types:O_.ui_types};function lf(e,t){let n=e.start,a=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*n;e.data=e.data.map((e=>{let n={x:t,y:e};return t+=a,n}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:h.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function sf(e){return`${e.label}`}function rf(e,t){return"number"==e?t:e}function of(e,t,n,a){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==a)return e;let s=gf(n);return`${`${n.source_array[s].label}`} ${l}(${rf(n.metric.measure_unit,n.metric.scale)})`}function cf(e){return`${e.measure_unit}_${e.scale}`}const uf=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const df={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")}};function pf(e){return df[e]||null}function _f(e,t,n,a){if(n.value==df["1_chart"].value){let n=[hf(e,t,a)];return ff(n),n}if(n.value==df["1_chart_x_yaxis"].value){let n={};t.forEach(((t,a)=>{let l=cf(t.metric),s={tsGroup:t,tsOptions:e[a]};null==n[l]?n[l]=[s]:n[l].push(s)}));let l=[];for(let e in n){let t=n[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=hf(s,i,a);l.push(r)}return ff(l),l}if(n.value==df["1_chart_x_metric"].value){let n=[];return e.forEach(((e,l)=>{let s=hf([e],[t[l]],a);n.push(s)})),ff(n),n}return[]}function ff(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function hf(e,t,n){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let a=[],l=[],s={},i={};!function(e){e[0]?.source?.name}(t);let r=null;e.forEach(((e,o)=>{let c=t[o];o>0&&(r="line");let u=function(e,t,n,a,l){let s=1e3*e.start,i=1e3*e.step,r=[],o=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=o.length&&(e.series=o.map(((t,n)=>{let a=e.series.find((e=>sf(e)==t));return null!=a?a:{label:t,data:[null]}}))),e.series.forEach(((o,c)=>{let u=sf(o),d=t.metric.timeseries[u];if(null==d)throw`Impossible find timeserie_id = ${u} in metric metadata (id,schema,query) = (${metric.id},${metric.schema},${metric.id})`;let p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,n=e.map((e=>{let n={x:t,y:e*p};return t+=i,n}));return n},f=t.timeseries?.find((e=>e.id==u)),h=d.label;null!=o.ext_label&&"top"==t.metric.type&&(h=o.ext_label);let m=of(h,u,t,n);if(null==f||1==f.raw){let e=_(o.data),t=d.draw_type;null==t&&null!=a?t=a:null==t&&(t="area");let n={id:u,colorPalette:0,color:d.color,type:t,name:m,data:e,invert_direction:d.invert_direction};r.push(n)}if(1==f?.past&&b.is_object(e.additional_series)){let t=b.object_to_array(e.additional_series)[0],n={id:u,colorPalette:1,type:"line",name:`${m} ${l} Ago`,data:_(t),dashed:!0,invert_direction:d.invert_direction};r.push(n)}let g=(e,t,n)=>{if(null==n)return null;null!=n&&(n*=p);let a=s;return{id:t,name:`${m} (${e})`,colorPalette:1,type:"line",data:o.data.map((e=>{let t={x:a,y:n};return a+=i,t})),invert_direction:d.invert_direction}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,n=g("Avg",u,t);r.push(n)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],n=g("95th Perc",u,t);r.push(n)}})),r}(e,c,!0,r,n);a=a.concat(u);let d=function(e,t,n,a){let l=t.metric,s=cf(l),i=!1,r=Object.keys(n).length,o=[];for(let e in t.metric.timeseries)i|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let i=n[s],c=0,u=null;if(null!=e.data){let t=e.data.map((e=>null==e.y?0:Math.abs(e.y)));c=Math.max.apply(Math,t),u=h.getScaleFactorIndex(l.measure_unit,c)}if(null==i){a[s]=u;let l={seriesName:e.name,show:!0,labels:{},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:rf(t.metric.measure_unit,t.metric.scale)},opposite:r%2==1};n[s]=l.seriesName,o.push(l)}else o.push({seriesName:i,labels:{},show:!1});a[s]=Math.max(a[s],u)})),o.forEach((e=>e.labels.formatter=h.getFormatter(l.measure_unit,i,a[s]))),o}(u,c,s,i);l=l.concat(d)})),function(e){let t=0,n=0,a=uf,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=a[t%a.length],t+=1):1==e.colorPalette&&(e.color=l[n%l.length],n+=1)}))}(a),function(e,t){let n={},a={};for(let l=0;l<t.length;l+=1){let s=t[l],i=e[l],r=i.seriesName;null==n[r]&&(n[r]=[],a[r]={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER,invert_direction:!1}),n[r].push(i);let o=a[r];s.data.forEach((e=>{o.max=Math.max(o.max,e.y),o.min=Math.min(o.min,e.y)})),o.invert_direction|=s.invert_direction}let l=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let n=e/100*3;return t&&e>0||!t&&e<0?e+n:e-n};for(let e in n){let t=n[e],s=a[e];s.min=l(s.min,!1),s.max=l(s.max,!0),t.forEach((e=>{let t=Math.abs(s.min),n=Math.abs(s.max);t>n?(e.min=s.min,e.max=t):t<n&&1==s.invert_direction?(e.min=-1*n,e.max=s.max):(e.min=s.min,e.max=s.max)}))}}(l,a);let o=function(e,t){return{chart:{id:b.get_random_string(),group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},markers:{size:2.5,strokeWidth:1,strokeColors:e.map((e=>e.color))},stroke:{show:!0,lineCap:"butt",width:3,dashArray:e.map((e=>e.dashed?4:0))},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(a,l);return o}function mf(e,t,n){let a=e.source_type.source_def_array.map(((t,a)=>{if(null!=n&&!n[t.value])return null;let l=e.source_array[a].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(a=`${a},${e.metric.query}`),a}function gf(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function vf(e,t,n,a,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:n,initial_point:!0,limit:180,version:4,ts_compare:n},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,r={ts_requests:a.map((e=>{let t=gf(e),n={ts_query:mf(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(n.tskey=e.source_array[t].value),n})),...i,...t},o={"Content-Type":"application/json"};s=await b.http_request(l,{method:"post",headers:o,body:JSON.stringify(r)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${n}&version=4&zoom=${n}&initial_point=true&limit=180`,r=a[0],o=gf(r),c=mf(r),u={...i,ts_query:c,ts_schema:`${r.metric.schema}`};r.source_type.source_def_array[o].disable_tskey||(u.tskey=r.source_array[o].value);let d=`${t}?${x.add_obj_to_url(u,l)}`;s=[await b.http_request(d)]}return s}const bf={groupsOptionsModesEnum:df,tsToApexOptions:lf,tsArrayToApexOptions:hf,tsArrayToApexOptionsArray:_f,getGroupOptionMode:pf,getSerieId:sf,getSerieName:of,getTsChartsOptions:vf,getTsQuery:mf,getMainSourceDefIndex:gf},yf=n;function wf(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=wf("vlan"),n=yf.REGEXES.ipv4,a=n.replace("$",`${t}$`),l=yf.REGEXES.ipv6,s=l.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,a=n.replace("$",`${e}$`),s=n.replace("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${a}|${s}|${l.replaceAll("$",`${i}$`)}|${l.replaceAll("$",`${i}${t}$`)})`}return`(${n})|(${a})|(${l})|(${s})`}if("mac"==e)return yf.REGEXES.macAddress;if("ip,cidr"==e){return`(${wf("ip")})|(${wf("cidr")})`}return yf.REGEXES[e]}const xf={get_data_pattern:wf},kf={class:"nav nav-tabs"},$f={class:"form-group ms-2 me-2 mt-3 row"},Sf={class:"form-group row"},Cf={class:"col-form-label col-sm-4"},Nf={class:"col-sm-8"},Af={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Ef={class:"form-group row"},Tf={class:"col-form-label col-sm-4"},Pf={class:"col-sm-8"},If=["title"],Mf={key:0,class:"form-group mt-2 row"},Of={class:"col-form-label col-sm-4"},Uf={class:"col-sm-8"},Ff={key:1,class:"form-group mt-2 row"},jf={class:"col-form-label col-sm-4"},Lf={class:"col-sm-8"},Df=["onUpdate:modelValue","pattern"],Rf={class:"form-group row mt-2",style:{"text-align":"end"}},zf={class:"col-sm-12"},Bf=["disabled"],Vf={class:"form-group ms-2 me-2 mt-3 row"},qf={class:"form-group row"},Hf={class:"col-form-label col-sm-4"},Gf={class:"col-sm-8"};var Wf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn(null),i=hn("select");let r=af.get_current_page_source_type();const o=af.sources_types,c=hn(r),u=af.ui_types,d=hn([]),p=hn([]),_=hn([]),f=hn(""),h=hn([]),m=hn(!1),g=yi((()=>{if(0==m.value)return!1;for(let e=0;e<h.value.length;e+=1){let t=h.value[e];if(null==t)continue;let n=new RegExp(t),a=_.value[e];if(0==n.test(a))return!1}return!0})),v=hn(!1),y=hn([]),w=hn({}),x=hn([]),k=hn([]);let $=null;ul((()=>{o.forEach((e=>{let t=a.sources_types_enabled[e.id];null!=t&&0!=t||(e.disabled=!0)}))})),dl((async()=>{$=async function(){await C(),P()}()}));function S(e){i.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);h.value=e.map((e=>null==e?null:xf.get_data_pattern(e)))}(),function(){let e=c.value;v.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let n=0;n<e.length;n+=1){let a=await af.get_sources(http_prefix,c.value.id,e[n]);t.push(a)}let n=await af.get_default_source_array(http_prefix,c.value);p.value=n,d.value=t,_.value=n.map((e=>e.value)),E()}(),await T()}async function N(){m.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let n=p.value[t];n.value=e,n.label=e}})),await async function(){await T()}(),E()}function A(){m.value=!0}function E(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function T(){y.value=await af.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=af.get_default_metric(y.value)}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function I(e){let t=e.source_type.label,n=bf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[n].label} - ${e.metric.label}`}function M(e){let t,n,a;return null==e?(t=c.value,n=p.value,a=w.value):(t=e.source_type,n=e.source_array,a=e.metric),af.get_ts_group_id(t,n,a)}const O=e=>{x.value=x.value.filter((t=>M(t)!=e))},U=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&n("apply",x.value)},F=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:p.value,metric:w.value,timeseries:b.clone(k.value)};U(e)}n("apply",x.value),j()},j=()=>{l.value.close()},L=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",l.value.show()},close:j,add_ts_group:U,set_timeseries_groups:(e,t)=>{x.value=e,t&&n("apply",x.value)}}),(e,t)=>(Ts(),Fs(hp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(L("modal_timeseries.title")),1)])),body:ma((()=>[Vs("ul",kf,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:W(["nav-link",{active:"add"==i.value}]),href:"#"},ee(L("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:W(["nav-link",{active:"select"==i.value}]),href:"#"},ee(L("modal_timeseries.manage_timeseries")),3)])]),Js(" action add "),"add"==i.value?(Ts(),Us($s,{key:0},[Js(" Sources Types "),Vs("div",$f,[Vs("div",Sf,[Vs("label",Cf,[Vs("b",null,ee(L("modal_timeseries.source_type")),1)]),Vs("div",Nf,[qs(Dd,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:yn(o)},null,8,["selected_option","options"])])])]),Js(" Sources "),v.value?Js("v-if",!0):(Ts(),Us("div",Af,[Vs("div",Ef,[Vs("label",Tf,[Vs("b",null,ee(L("modal_timeseries.source")),1)]),Vs("div",Pf,[yl(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,If),[[Mr,f.value]])])]),(Ts(!0),Us($s,null,Al(c.value.source_def_array,((e,n)=>(Ts(),Us($s,null,[Js(" select "),e.ui_type==yn(u).select?(Ts(),Us("div",Mf,[Vs("label",Of,[Vs("b",null,ee(e.label),1)]),Vs("div",Uf,[qs(Dd,{selected_option:p.value[n],"onUpdate:selected_option":e=>p.value[n]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[n]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0),Js(" end select "),Js(" input text "),e.ui_type==yn(u).input?(Ts(),Us("div",Ff,[Vs("label",jf,[Vs("b",null,ee(e.label),1)]),Vs("div",Lf,[yl(Vs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[n]=e,pattern:h.value[n],required:"",type:"text",placeholder:""},null,40,Df),[[Mr,_.value[n]]])])])):Js("v-if",!0),Js(" input text ")],64)))),256)),yl(Vs("div",Rf,[Vs("div",zf,[Vs("button",{type:"button",onClick:N,disabled:0==yn(g),class:"btn btn-primary"},ee(L("modal_timeseries.apply_source")),9,Bf)])],512),[[Kr,yn(g)]])])),Js(" end Sources "),Js(" Metrics "),Vs("div",Vf,[Vs("div",qf,[Vs("label",Hf,[Vs("b",null,ee(L("modal_timeseries.metric")),1)]),Vs("div",Gf,[qs(Dd,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),qs(m_,{id:"",title:L("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Js("v-if",!0),Js(" action == add "),Js(" action select"),"select"==i.value?(Ts(),Us($s,{key:1},[(Ts(!0),Us($s,null,Al(x.value,(e=>(Ts(),Fs(m_,{id:M(e),title:I(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Js(" v-for timeseries_groups_added ")],64)):Js("v-if",!0),Js(" action == select ")])),footer:ma((()=>[yl(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},ee(L("modal_timeseries.add")),513),[[Kr,"add"==i.value]]),yl(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},ee(L("modal_timeseries.apply")),513),[[Kr,"select"==i.value]])])),_:1},512))}};fp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Wf.__scopeId="data-v-103cd911",Wf.__file="http_src/vue/modal-timeseries.vue";var Kf=Ja({components:{modal:hp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,n=(await ntopng_utility.http_request(e,null,!1,!0)).id,a=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${n}">${l}</a>`;a=a.replace("%{page}",s),a=`${a} ${n}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:a,type:"alert-success"})}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),n=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,a=await ntopng_utility.http_request(n);if(null==a||null==a.bpf)return void console.error(`modal-traffic-extraction: ${n} return null value`);e=a.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let n=new Date(1e3*t.epoch_begin),a=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(n)),l=l.replace("%{date_end}",this.format_date(a)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Jf=e=>(_a("data-v-0be978c4"),e=e(),fa(),e),Yf=["innerHTML"],Zf={style:{height:"95%"}},Xf={class:"tab-content",style:{height:"100%"}},Qf={class:"row"},eh={class:"form-group mb-3 col-md-3 has-feedback"},th={class:"form-group mb-3 col-md-9 text-right asd"},nh={class:"radio-inline",style:{"margin-left":"1rem"}},ah={class:"radio-inline"},lh={class:"row",id:"pcapDownloadModal_advanced",style:{}},sh={class:"form-group mb-3 col-md-12 has-feedback"},ih=Jf((()=>Vs("br",null,null,-1))),rh={class:"form-label"},oh=Jf((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),ch={class:"input-group"},uh=Jf((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),dh=Jf((()=>Vs("br",null,null,-1))),ph={class:"form-label"},_h=Jf((()=>Vs("br",null,null,-1))),fh=Jf((()=>Vs("ul",null,[Vs("li",null,[Ws("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ws("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ws("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ws("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));fp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Kf.render=function(e,t,n,a,l,s){const i=xl("modal");return Ts(),Fs(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ma((()=>[Ws(ee(e.i18n("traffic_recording.pcap_extract")),1)])),body:ma((()=>[Vs("div",{class:"alert alert-info",innerHTML:e.description},null,8,Yf),Vs("form",Zf,[Vs("div",Xf,[Vs("div",Qf,[Vs("div",eh,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ws(ee(e.i18n("advanced")),1),Vs("i",{class:W({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",th,[Vs("label",nh,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fr,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",ah,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fr,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.queue_as_job")),1)])])]),yl(Vs("div",lh,[Vs("div",sh,[ih,Vs("label",rh,[Ws(ee(e.i18n("traffic_recording.filter_bpf"))+" ",1),oh]),Vs("div",ch,[uh,yl(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Mr,e.bpf_filter]]),yl(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},ee(e.i18n("invalid_value")),513),[[Kr,e.invalid_bpf]])]),dh,Vs("label",ph,ee(e.i18n("traffic_recording.filter_examples"))+":",1),_h,fh])],512),[[Kr,e.show_menu]])])])])),footer:ma((()=>[Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},ee(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Kf.__scopeId="data-v-0be978c4",Kf.__file="http_src/vue/modal-traffic-extraction.vue";const hh={class:"form-group mt-2 row"},mh={class:"col-form-label col-sm-4"},gh={class:"col-sm-6"},vh={class:"col-form-label col-sm-2"},bh=["disabled"];var yh={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn(""),i=String.raw`^[^~${"`"}!@#$%^&*|+-=?;:'"\\,.<>\/{}()\[\]\s]+$`,r=yi((()=>new RegExp(i).test(s.value)));function o(){let e=`${s.value}.${a.ext}`;n("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=(e=e.replaceAll(/[-=?;:\s]/g,"_")).replaceAll(/[`~!@#$%^&*|+-=?;:'",\.<>\s\/{}\[\]()]/g,""),s.value=e,l.value.show()},close:c}),dl((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ts(),Fs(hp,{ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(a.title),1)])),body:ma((()=>[Vs("div",hh,[Vs("label",mh,[Vs("b",null,ee(u("modal_download_file.filename"))+":",1)]),Vs("div",gh,[yl(Vs("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Mr,s.value]])]),Vs("label",vh," ."+ee(a.ext),1)])])),footer:ma((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-primary",disabled:0==yn(r)},ee(u("modal_download_file.download")),9,bh)])),_:1},512))}};fp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),yh.__scopeId="data-v-59120eb8",yh.__file="http_src/vue/modal-download-file.vue";var wh=Ja({components:{},props:{id:String,global:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const xh=["innerHTML"];wh.render=function(e,t,n,a,l,s){return 1==e.show_alert?(Ts(),Us("div",{key:0,style:{width:"100%"},class:W(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,xh),Vs("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})],2)):Js("v-if",!0)},wh.__file="http_src/vue/alert-info.vue";const kh={class:"text-center"},$h=Vs("tbody",null,null,-1);var Sh={__name:"datatable",props:{table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},setup(e,{expose:t}){const n=e;let a=n.base_params;const l=hn(null);let s=null;dl((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[[0,"asc"]],pagingType:"full_numbers",columnDefs:n.columns_config,columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const n=t.oInstance.api(),a=e.order[0].column,l=n.column(a).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED)}};for(const e in n.table_config||{})t[e]=n.table_config[e];let r=DataTableUtils.getStdDatatableConfig(n.table_buttons);r=DataTableUtils.extendConfig(r,t),s=$(l.value).DataTable(r);for(const t of n.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:s,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=x.get_url_entries();for(const[t,n]of e)a[t]=n;s.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),i()}}()}));const i=()=>{null!=s&&s.ajax.reload()},r=e=>{DataTableUtils.deleteButtonHandlers(e)};let o=!1;const c=()=>{s.clear(),s.destroy(!0),o=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{r(e.handlerId)}))};return t({reload:i,delete_button_handlers:r,destroy_table:c,update_url:e=>{null!=s&&s.ajax.url(e)}}),fl((()=>{1!=o&&c()})),(t,n)=>(Ts(),Us("div",null,[Vs("table",{ref_key:"table_id",ref:l,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ts(!0),Us($s,null,Al(e.columns_config,(e=>(Ts(),Us("th",kh,ee(e.columnName),1)))),256))])]),$h],512)]))},__file:"http_src/vue/datatable.vue"};const Ch={class:"table table-hover table-borderless mb-0"},Nh=["innerHTML"],Ah=["innerHTML"];var Eh={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,n)=>(Ts(),Us("table",Ch,[Vs("thead",null,[Vs("tr",null,[(Ts(!0),Us($s,null,Al(e.columns,(t=>(Ts(),Us("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Nh)))),256))])]),Vs("tbody",null,[(Ts(!0),Us($s,null,Al(e.rows,(t=>(Ts(),Us("tr",null,[(Ts(!0),Us($s,null,Al(e.columns,(n=>(Ts(),Us("td",{scope:"col",innerHTML:e.print_html_row(n,t)},null,8,Ah)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Th=e=>(_a("data-v-937058e4"),e=e(),fa(),e),Ph={class:"col-12 mb-2 mt-2"},Ih={class:"card h-100 overflow-hidden"},Mh=["title"],Oh=[Th((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Uh=["title"],Fh=[Th((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],jh=["title"],Lh=[Th((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Dh=["title"],Rh=[Th((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],zh={class:"form-group ms-1 me-1 mt-1"},Bh={class:"inline select2-size me-2 mt-2"},Vh={class:"inline select2-size me-2 mt-2"},qh={key:0,class:"mt-4 card card-shadow"},Hh={class:"card-body"},Gh={key:1,class:"mt-4 card card-shadow"},Wh={class:"card-body"},Kh={key:0,class:"inline select2-size me-2 mt-2"};var Jh={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e;b.check_and_set_default_interval_time();const a=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;hn({}),hn(!1);const i=hn([]),r=hn(null),o=hn(null),c=hn(null),u=hn(null),d=hn(null),p=hn([]),_=hn({});af.get_current_page_source_type();const f=hn(!1);hn(!1);const m=hn([]),g=b.object_to_array(bf.groupsOptionsModesEnum),v=hn(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return bf.getGroupOptionMode(e);return g[0]}());let w=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=hn(!1);ul((async()=>{!function(){if(null==t.source_value_object)return;let e=af.get_current_page_source_type();af.set_source_value_object_in_url(e,t.source_value_object)}()})),dl((async()=>{!async function(){let e,t,n=!0,a=await af.get_timeseries_groups_from_url(http_prefix);if(null==a){n=!1,e=x.get_url_entry("ts_schema");let l=x.get_url_entry("ts_query");null!=l&&""!=l&&(t=af.get_metric_query_from_ts_query(l)),""==e&&(e=null),a=await af.get_default_timeseries_groups(http_prefix,e,t)}p.value=await C(n),_.value=1==n?k:af.get_default_metric(p.value,e,t);S.value=!0,await V(a,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));async function C(e,a){if(!a&&null==e)return l.value;let l=await af.get_metrics(http_prefix);if(e&&l.push(k),(null==L||a)&&(L=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${$}`,n=await b.http_request(e),a=b.object_to_array(n).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return a}()),t.enable_snapshots){L.forEach((e=>l.push(e)))}return l.sort(n.sortAlphabetically),l}async function N(e){let t=af.get_current_page_source_type(),n=await af.get_default_source_array(http_prefix,t);return[af.get_ts_group(t,n,e)]}const A=async(e,t,n)=>{let a=af.get_source_type_from_id(e),l=await af.get_source_array_from_value_dict(http_prefix,a,t),s=await af.get_metric_from_schema(http_prefix,a,l,n);T(af.get_ts_group(a,l,s))},E=async(e,t)=>{let n=p.value.find((n=>n.schema==e&&n.query==t));null!=n?T((await N(n))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function T(e){c.value.set_timeseries_groups(w),c.value.add_ts_group(e,!0)}async function P(e){if(1==e.is_snapshot){let t=e.filters,n=x.get_url_entry("timeseries_groups",t),a=await af.get_timeseries_groups_from_url(http_prefix,n);v.value=bf.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await V(a,!0,!1)}else await async function(){let e=await async function(){return N(_.value)}();await V(e,!0,!1)}(),R(!1)}function I(e){let n=_.value.label==k.label;V(w,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=G.value?.table_config_def;if(null==e)return;let n=q(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);o.value.update_url(n),o.value.reload()}(),R(n,!0)}function M(e){}function O(){u.value.show()}function U(){null!=w&&c.value.show(w)}function F(e){return async t=>m.value[e].chart_options}let j,L=null;function D(){R(_.value.label==k.label,!0)}async function R(e,t){p.value=await C(e,t),e&&(_.value=k)}async function z(e){R(!0),await V(e,!0,!0)}function B(){V(w,!1,!1)}async function V(e,n,a,l){let s=y.get_status(),r=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);n&&(j=await bf.getTsChartsOptions(http_prefix,s,r,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,n)=>{let a=t[n]?.query?.label;if(null!=a){let t=bf.getMainSourceDefIndex(e);e.source_array[t].label=a}}))}(e,j);let o=bf.tsArrayToApexOptionsArray(j,e,v.value,r);l?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_options({yaxis:e.yaxis}),i.value[t].update_chart_series(e?.series)}))}(o):function(e){m.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(o),function(e,t,n){let a=!0;if(f.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!f.value)return;const l=e=>"bps"==e?"bytes":e;K.value=[],e.forEach(((e,s)=>{let i=t[s];1!=i.source_type.disable_stats&&e.series.forEach(((t,s)=>{let r,o=bf.getSerieId(t),c=i.metric.timeseries[o],u=h.getFormatter(i.metric.measure_unit);if("top"==i.metric.type?r=e.statistics:e?.statistics?.by_serie?.length>s&&(r=e.statistics.by_serie[s]),null==r||"top"==i.metric.type&&s>0)return;let d=bf.getSerieName(c.label,o,i,a),p=l(i.metric.measure_unit),_=h.getFormatter(p);if(null!=r.total){n.epoch_end,n.epoch_begin;r.average}let f={metric:d,total:_(r.total),perc_95:u(r["95th_percentile"]),avg:u(r.average),max:u(r.max_val),min:u(r.min_val)};K.value.push(f)}))}))}(j,e,s),a&&function(e,n){if(!t.is_ntop_pro)return;null==e&&(e=w);null==n&&(n=y.get_status());let a=af.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=af.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};H.value=[];for(let e in l){let i=l[e],r=bf.getMainSourceDefIndex(i),o=i.source_array[r],c=i.source_type,u=a[c.id];null!=u&&u.forEach((e=>{let a=t.sources_types_top_enabled[e.table_value];if(null==a)return;if(!a[e.view])return;let l=e.table_source_def_value_dict,r=q(i,e.table_value,e.view,l,n),u=af.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${o.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:r,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};_.columns_config=e.columns.map((e=>{let a={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(a),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:E,add_ts_group_from_source_value_dict:A,sources_types_enabled:t.sources_types_enabled,status:n,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};H.value.push(f)}))}if(null!=G.value&&H.value.find((e=>e.value==G.value.value)))return;G.value=H.value.find((e=>1==e.table_config_def.default)),null==G.value&&(G.value=H.value[0])}(e,s),w=e,x.set_key_to_url("timeseries_groups_mode",v.value.value),af.set_timeseries_groups_in_url(w)}function q(e,t,n,a,l){null==l&&(l=y.get_status());let s=bf.getTsQuery(e,!0,a),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,r={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${n}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(r,"")}`}const H=hn([]),G=hn({});let W=[{id:"metric",label:a("page_stats.metric")},{id:"avg",label:a("page_stats.average")},{id:"perc_95",label:a("page_stats.95_perc")},{id:"max",label:a("page_stats.max")},{id:"min",label:a("page_stats.min")},{id:"total",label:a("page_stats.total")}];const K=hn([]);function J(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},n=x.obj_to_url_params(t);const a=`${http_prefix}/lua/pro/db_search.lua?${n}`;x.go_to_url(a)}const Y=hn(null);function Z(){Y.value.show()}function X(){if(!j?.length)return;let e=w[0],t=bf.getSerieName(null,null,e);d.value.show(t)}async function Q(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,n)=>{let a=new Image;a.src=t,a.onload=function(){e(a)}}))})),n=0,a=await Promise.all(t);a.forEach((e=>{n+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=a[0].width,l.height=n,n=0,a.forEach((e=>{s.drawImage(e,0,n,e.width,e.height),n+=e.height})),b.download_URI(l.toDataURL(),e)}return(t,n)=>(Ts(),Us($s,null,[Vs("div",Ph,[qs(wh),Vs("div",Ih,[qs(Rd,{style:{"margin-top":"0.5rem"},id:yn(l),enable_refresh:!0,ref_key:"date_time_picker",ref:r,onEpoch_change:I},{begin:ma((()=>[])),extra_buttons:ma((()=>[e.enable_snapshots?(Ts(),Us("button",{key:0,class:"btn btn-link btn-sm",onClick:O,title:a("page_stats.manage_snapshots_btn")},Oh,8,Mh)):Js("v-if",!0),e.traffic_extraction_permitted?(Ts(),Us("button",{key:1,class:"btn btn-link btn-sm",onClick:Z,title:a("traffic_recording.pcap_download")},Fh,8,Uh)):Js("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",onClick:X,title:a("page_stats.title_modal_download_file")},Lh,8,jh),e.is_history_enabled?(Ts(),Us("button",{key:2,class:"btn btn-link btn-sm",onClick:J,title:a("page_stats.historical_flows")},Rh,8,Dh)):Js("v-if",!0)])),_:1},8,["id"]),Js(" select metric "),yl(Vs("div",zh,[Vs("div",Bh,[qs(Dd,{selected_option:_.value,"onUpdate:selected_option":n[0]||(n[0]=e=>_.value=e),options:p.value,onSelect_option:P},null,8,["selected_option","options"])]),Vs("div",Vh,[qs(Dd,{selected_option:v.value,"onUpdate:selected_option":n[1]||(n[1]=e=>v.value=e),options:yn(g),onSelect_option:B},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ts(),Us("button",{key:0,type:"button",onClick:U,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Js("v-if",!0)],512),[[Kr,S.value]]),(Ts(!0),Us($s,null,Al(m.value,((e,t)=>(Ts(),Us("div",{key:e.key,class:"m-3",style:{height:"300px"}},[qs(Od,{id:yn("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:yn(s),register_on_status_change:!1,get_custom_chart_options:F(t),onZoom:I,onChart_reloaded:M},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),f.value?(Ts(),Us("div",qh,[Vs("div",Hh,[qs(Eh,{id:"page_stats_bootstrap_table",columns:yn(W),rows:K.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Js("v-if",!0),e.is_ntop_pro?(Ts(),Us("div",Gh,[Vs("div",Wh,[G.value?.table_config_def?(Ts(),Us("div",Kh,[qs(Dd,{selected_option:G.value,"onUpdate:selected_option":n[2]||(n[2]=e=>G.value=e),options:H.value},null,8,["selected_option","options"])])):Js("v-if",!0),G.value?.table_config_def?(Ts(),Fs(Sh,{key:G.value?.value,ref_key:"top_table_ref",ref:o,table_buttons:G.value.table_config_def.table_button,columns_config:G.value.table_config_def.columns_config,data_url:G.value.table_config_def.data_url,enable_search:G.value.table_config_def.enable_search,table_config:G.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])):Js("v-if",!0)]),e.enable_snapshots?(Ts(),Fs(Yp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:D,onDeleted_snapshots:D,onDeleted_all_snapshots:D},null,8,["csrf"])):Js("v-if",!0),e.is_ntop_pro?(Ts(),Fs(Wf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:z},null,8,["sources_types_enabled"])):Js("v-if",!0),qs(Kf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Y},null,512),qs(yh,{ref_key:"modal_download_file",ref:d,title:a("page_stats.title_modal_download_file"),ext:"png",onDownload:Q},null,8,["title"])],64))}};fp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Jh.__scopeId="data-v-937058e4",Jh.__file="http_src/vue/page-stats.vue";var Yh=Ja({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e;this.tab_list.forEach((function(t){t.active&&(e=t)})),null==e&&(e=this.tab_list[0]),this.old_tab=e.id||e.name,ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){e.id&&this.old_tab==e.id||e.name&&this.old_tab==e.name||(this.old_tab=e.id||e.name,this.$emit("click_item",e))}}});const Zh={class:"card-header mb-2"},Xh={class:"nav nav-tabs card-header-tabs",role:"tablist"},Qh=["onClick"],em=["onClick"];Yh.render=function(e,t,n,a,l,s){return Ts(),Us("div",Zh,[Vs("ul",Xh,[(Ts(!0),Us($s,null,Al(e.tab_list,(t=>(Ts(),Us($s,null,[t.active?(Ts(),Us("li",{key:0,onClick:n=>e.change_tab(t),class:W([{active:t.active},"nav-item nav-link"])},ee(t.title),11,Qh)):(Ts(),Us("a",{key:1,onClick:n=>e.change_tab(t),href:"#",class:"nav-item nav-link"},ee(t.title),9,em))],64)))),256))])])},Yh.__file="http_src/vue/tab-list.vue";var tm={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:n}){const a=hn(null),l=()=>{n("delete"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Ws(ee(e.body),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-danger"},ee(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const nm="change_asset_table_tab_event";var am={components:{datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),function(e){const t=[];let n=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let a=url_params;a.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,l)=>{a.view=e.asset_table_tab,a[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);n=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=n,i.table_filters=s,e.config_devices_standard=i,a.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let r=ntopng_utility.clone(l);r.table_config={serverSide:!1,order:[[1,"desc"]]},r.columns_config=n,r.table_filters=s,console.log(i),console.log(r),e.config_devices_centrality=r}(this)},mounted(){this.asset_table_tab=x.get_url_entry("view")||"standard",this.tab_list.forEach((e=>{this.asset_table_tab==e.id?e.active=!0:e.active=!1})),C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",nm,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(nm,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const lm={class:"row"},sm={class:"col-md-12 col-lg-12"},im=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),rm={class:"card"},om=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),cm={class:"card-body"},um={id:"table_asset"},dm={class:"card-footer"},pm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},_m=Vs("i",{class:"fas fa-trash"},null,-1),fm=["href"],hm=[Vs("i",{class:"fas fa-download"},null,-1)];am.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),r=xl("tab-list"),o=xl("datatable");return Ts(),Us("div",lm,[Vs("div",sm,[im,Vs("div",rm,[om,Vs("div",cm,[Vs("div",um,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(Ts(),Fs(o,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:ma((()=>[Ws(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0),"centrality"==l.asset_table_tab?(Ts(),Fs(o,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:ma((()=>[Ws(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0)])]),Vs("div",dm,[Vs("button",pm,[_m,Ws(" "+ee(l.i18n("map_page.delete_assets")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},hm,8,fm)])])])])},am.__file="http_src/vue/page-asset-table.vue";var mm={components:{datatable:Sh,"modal-delete-confirm":tm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,n)=>{l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,n)=>"sort"==t||"type"==t?e:e+" sec"}],a=6;let r={serverSide:!0,order:[[a,"desc"]]},o=ntopng_utility.clone(s);o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=n,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_standard=o}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const gm={class:"row"},vm={class:"col-md-12 col-lg-12"},bm=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ym={class:"card"},wm=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xm={class:"card-body"},km={id:"periodicity-table"},$m={class:"card-footer"},Sm={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Cm=Vs("i",{class:"fas fa-trash"},null,-1),Nm=["href"],Am=[Vs("i",{class:"fas fa-download"},null,-1)];mm.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),r=xl("datatable");return Ts(),Us("div",gm,[Vs("div",vm,[bm,Vs("div",ym,[wm,Vs("div",xm,[Vs("div",km,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:n.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",$m,[n.is_admin?(Ts(),Us("button",Sm,[Cm,Ws(" "+ee(l.i18n("map_page.delete_services")),1)])):Js("v-if",!0),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Am,8,Nm)])])])])},mm.__file="http_src/vue/page-periodicity-table.vue";const Em={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}}}},Tm=function(e,t,n,a){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:a}).then((e=>{e.success&&n&&n()}))},Pm=function(){return Em},Im="change_service_table_tab_event";var Mm={components:{datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,a)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],a=6,e.is_admin&&n.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,n,a)=>e.create_action_buttons(t,n,a)});let r={serverSide:!0,order:[[a,"desc"]]},o=ntopng_utility.clone(s);o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=n,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_standard=o,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],a=2,r.order=[[a,"desc"]],o=ntopng_utility.clone(s),o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=n,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_centrality=o}(this)},mounted(){this.service_table_tab=this.$props.url_params.view,this.tab_list.forEach((e=>{this.service_table_tab==e.id?e.active=!0:e.active=!1})),C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Im,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Im,e.id)},create_action_buttons:function(e,t,n){const a=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Tm(n.hash_id,this.$props.service_acceptance[0].id,a,l)}},i={onClick:()=>{Tm(n.hash_id,this.$props.service_acceptance[1].id,a,l)}},r={onClick:()=>{Tm(n.hash_id,this.$props.service_acceptance[2].id,a,l)}};if("display"!==t)return e;const o=n.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:r};switch(o){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Om={class:"row"},Um={class:"col-md-12 col-lg-12"},Fm=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),jm={class:"card"},Lm=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Dm={class:"card-body"},Rm={id:"table_service"},zm={class:"card-footer"},Bm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Vm=Vs("i",{class:"fas fa-trash"},null,-1),qm=["href"],Hm=[Vs("i",{class:"fas fa-download"},null,-1)];Mm.render=function(e,t,n,a,l,s){const i=xl("modal-delete-confirm"),r=xl("tab-list"),o=xl("datatable");return Ts(),Us("div",Om,[Vs("div",Um,[Fm,Vs("div",jm,[Lm,Vs("div",Dm,[Vs("div",Rm,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(Ts(),Fs(o,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0),"centrality"==l.service_table_tab?(Ts(),Fs(o,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0)])]),Vs("div",zm,[Js('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Bm,[Vm,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Hm,8,qm)])])])])},Mm.__file="http_src/vue/page-service-table.vue";const Gm={id:"empty-map-message",class:"alert alert-info",hidden:""},Wm=["id"];var Km={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const n=e,a={ifid:n.url_params.ifid,action:"load_graph",map:n.url_params.map_id};let l=null,s={},i={},r=null,o=!1,c=null,u={},d=!1;dl((async()=>{_(),u=n.url_params,r=document.getElementById(n.map_id);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;o=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const c={nodes:s,edges:i};p(c),l=new vis.Network(r,c,Pm()),h(),f(),C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}))})),fl((()=>{1!=d&&v()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],x.set_key_to_url("host",u.host),x.set_key_to_url("vlan_id",u.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=m()})),l.on("dragEnd",(function(e){g()}));for(const e in n.event_listeners||{})l.on(e,n.event_listeners[e])},h=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(n.url,{...u,csrf:n.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},m=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(h)),g=()=>{c&&clearTimeout(c),h()},v=()=>{l.destroy(!0),d=!0},b=async()=>{console.log(u);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;o=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const r={nodes:s,edges:i};p(r),l&&l.setData(r),C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED),h()}))};return t({reload:b,destroy:v,is_max_entry_reached:()=>o,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{h()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,n)=>(Ts(),Us($s,null,[Vs("div",Gm,ee(e.empty_message),1),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Wm)],64))},__file:"http_src/vue/network-map.vue"},Jm={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:n}){const a=hn(null),l=()=>{n("autolayout"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Ws(ee(e.body),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-primary"},ee(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Ym="change_filter_event";var Zm={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Dd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Ym,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=ntopng_url_manager.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Ym,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Xm={class:"row"},Qm={class:"col-md-12 col-lg-12"},eg={class:"card card-shadow"},tg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ng={class:"card-body"},ag={id:"table_service"},lg={class:"d-flex align-items-center justify-content-end mb-2"},sg=["title"],ig=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],rg={class:"d-flex ms-auto"},og={class:"m-1"},cg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),ug=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),dg={class:"card-footer"},pg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},_g=Vs("i",{class:"fas fa-trash"},null,-1),fg=["href"],hg=[Vs("i",{class:"fas fa-download"},null,-1)];Zm.render=function(e,t,n,a,l,s){const i=xl("select-search"),r=xl("modal-delete-confirm"),o=xl("modal-autolayout-confirm"),c=xl("network-map");return Ts(),Us("div",Xm,[Vs("div",Qm,[Vs("div",eg,[tg,Vs("div",ng,[Vs("div",ag,[Vs("div",lg,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},ig,8,sg),Vs("div",rg,[(Ts(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Ts(),Us("div",og,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),cg,ug]),qs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",dg,[Vs("button",pg,[_g,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},hg,8,fg)])])])])},Zm.__file="http_src/vue/page-service-map.vue";const mg="change_filter_event";var gg={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Dd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,n]of e)this.updated_url_params[t]=n;const t=this.max_entry_reached,n=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",mg,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")})),$("#reload-graph").click((function(e){n()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(mg,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const vg={class:"row"},bg={class:"col-md-12 col-lg-12"},yg={class:"card card-shadow"},wg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xg={class:"card-body"},kg={id:"table_periodicity"},$g={class:"d-flex align-items-center justify-content-end mb-2"},Sg=["title"],Cg=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ng={class:"d-flex ms-auto"},Ag={class:"m-1"},Eg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Tg=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Pg={class:"card-footer"},Ig={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Mg=Vs("i",{class:"fas fa-trash"},null,-1),Og=["href"],Ug=[Vs("i",{class:"fas fa-download"},null,-1)];gg.render=function(e,t,n,a,l,s){const i=xl("select-search"),r=xl("modal-delete-confirm"),o=xl("modal-autolayout-confirm"),c=xl("network-map");return Ts(),Us("div",vg,[Vs("div",bg,[Vs("div",yg,[wg,Vs("div",xg,[Vs("div",kg,[Vs("div",$g,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Cg,8,Sg),Vs("div",Ng,[(Ts(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Ts(),Us("div",Ag,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Eg,Tg]),qs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Pg,[Vs("button",Ig,[Mg,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Ug,8,Og)])])])])},gg.__file="http_src/vue/page-periodicity-map.vue";const Fg="change_filter_event";var jg={components:{"network-map":Km,"modal-delete-confirm":tm,"modal-autolayout-confirm":Jm,"select-search":Dd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=x.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Fg,(e=>{this.active_filter_list[e.id]=e,x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=x.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),NtopUtils.hideOverlays(),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Fg,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map(),NtopUtils.hideOverlays()}}}};const Lg={class:"row"},Dg={class:"col-md-12 col-lg-12"},Rg={class:"card card-shadow"},zg=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Bg={class:"card-body"},Vg={id:"table_asset"},qg={class:"d-flex align-items-center justify-content-end mb-2"},Hg=["title"],Gg=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Wg={class:"d-flex ms-auto"},Kg={class:"m-1"},Jg=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Yg=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Zg={class:"card-footer"},Xg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Qg=Vs("i",{class:"fas fa-trash"},null,-1),ev=["href"],tv=[Vs("i",{class:"fas fa-download"},null,-1)];jg.render=function(e,t,n,a,l,s){const i=xl("select-search"),r=xl("modal-delete-confirm"),o=xl("modal-autolayout-confirm"),c=xl("network-map");return Ts(),Us("div",Lg,[Vs("div",Dg,[Vs("div",Rg,[zg,Vs("div",Bg,[Vs("div",Vg,[Vs("div",qg,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Gg,8,Hg),Vs("div",Wg,[(Ts(!0),Us($s,null,Al(l.filter_list,((e,t)=>(Ts(),Us("div",Kg,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Jg,Yg]),qs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Zg,[Vs("button",Xg,[Qg,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},tv,8,ev)])])])])},jg.__file="http_src/vue/page-asset-map.vue";var nv=Ja({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const av={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},lv={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},sv=["href","title"],iv=["title"],rv=["href","title"],ov=["title"],cv=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),uv=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),dv={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},pv={class:"navbar-nav"},_v=["onClick"],fv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},hv=["onClick"],mv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},gv={class:"navbar-nav ms-auto"},vv=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),bv=["href"],yv=[Vs("i",{class:"fas fa-question-circle"},null,-1)];nv.render=function(e,t,n,a,l,s){return Ts(),Us("nav",av,[Vs("span",lv,[Vs("i",{class:W(e.main_title.icon)},null,2),e.main_title.href?(Ts(),Us("a",{key:0,href:e.main_title.href,title:e.main_title.title},ee(e.main_title.label),9,sv)):(Ts(),Us("span",{key:1,title:e.main_title.title},ee(e.main_title.label),9,iv)),(Ts(!0),Us($s,null,Al(e.secondary_title_list,(e=>(Ts(),Us($s,null,[Ws(" / "),e.href?(Ts(),Us("a",{key:0,href:e.href,title:e.title},ee(e.label),9,rv)):(Ts(),Us("span",{key:1,title:e.title},ee(e.label),9,ov))],64)))),256))]),cv,uv,Vs("div",dv,[Vs("ul",pv,[(Ts(!0),Us($s,null,Al(e.items_table,(e=>(Ts(),Us($s,null,[e.active?(Ts(),Us("li",{key:0,onClick:t=>this.$emit("click_item",e),class:W([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Ts(),Us("span",fv,ee(e.badge_num),1)):Js("v-if",!0),Vs("b",null,[Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)])],10,_v)):(Ts(),Us("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Ts(),Us("span",mv,ee(e.badge_num),1)):Js("v-if",!0),Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)],8,hv))],64)))),256))]),Vs("ul",gv,[vv,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},yv,8,bv)])])])},nv.__file="http_src/vue/page-navbar.vue";const wv={class:"form-group mb-3 row"},xv={class:"col-form-label col-sm-4"},kv={class:"col-sm-7"},$v=Vs("div",{class:"invalid-feedback"},null,-1),Sv={class:"form-group mb-3 row"},Cv={class:"col-form-label col-sm-4 pt-2"},Nv={class:"form-switch col-sm-7 pt-2 ps-3"},Av={class:"col-form-label"};var Ev={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:n}){const a=hn(""),l=hn(""),s=hn(null),i=()=>{n("add",{mac_list:a.value,trigger_alerts:l.value}),r()},r=()=>{s.value.close()};t({show:()=>{a.value="",s.value.show()},close:r}),dl((()=>{}));const o=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[2]||(n[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Vs("div",wv,[Vs("label",xv,ee(e.body),1),Vs("div",kv,[yl(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Mr,a.value]]),Vs("small",null,ee(e.list_notes),1),$v])]),Vs("div",Sv,[Vs("label",Cv,ee(o("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Nv,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},null,512),[[Or,l.value]])]),Vs("small",Av,ee(o("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ma((()=>[Ws(ee(o("host_details.notes"))+": "+ee(e.footer)+" ",1),Vs("button",{type:"button",onClick:i,class:"btn btn-primary"},ee(o("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Tv={class:"form-group mb-3 row"},Pv={class:"col-form-label col-sm-4"},Iv={class:"col-sm-7"},Mv={class:"form-group mb-3 row"},Ov={class:"col-form-label col-sm-4"},Uv={class:"col-sm-7"},Fv={value:"allowed"},jv={value:"denied"},Lv={class:"form-group mb-3 row"},Dv={class:"col-form-label col-sm-4 pt-2"},Rv={class:"form-switch col-sm-7 pt-2 ps-3"},zv={class:"col-form-label"};var Bv={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:n}){const a=hn(""),l=hn(""),s=hn(""),i=hn(null),r=()=>{n("edit",{mac_alias:a.value,mac_status:l.value,trigger_alerts:s.value}),o()},o=()=>{i.value.close()};t({show:e=>{l.value=e.status,a.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:o}),dl((()=>{}));const c=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[3]||(n[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ma((()=>[Ws(ee(e.title),1)])),body:ma((()=>[Vs("div",Tv,[Vs("label",Pv,ee(c("edit_check.device_alias")),1),Vs("div",Iv,[yl(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Mr,a.value]])])]),Vs("div",Mv,[Vs("label",Ov,ee(c("edit_check.device_status")),1),Vs("div",Uv,[yl(Vs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},[Vs("option",Fv,ee(c("allowed")),1),Vs("option",jv,ee(c("denied")),1)],512),[[jr,l.value]])])]),Vs("div",Lv,[Vs("label",Dv,ee(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Rv,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Or,s.value]])]),Vs("small",zv,ee(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ma((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},ee(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Vv={components:{"page-navbar":nv,datatable:Sh,"modal-delete-confirm":tm,"modal-add-device-exclusion":Ev,"modal-edit-device-exclusion":Bv},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,n,a,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},a=ntopng_utility.clone(n);a.table_buttons=n.table_buttons,a.data_url=`${a.data_url}`,a.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,n){let a=e.label;return e.label!==e.mac&&(a=a+" ["+e.mac+"]"),e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,n,a){let l={handlerId:"delete_device",onClick:()=>{let n=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),n,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:s,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:l,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=a}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let n=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(n,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,n){this.row_to_delete=n,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const qv={id:"navbar"},Hv={class:"row"},Gv={class:"col-md-12 col-lg-12"},Wv=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Kv={class:"card"},Jv={class:"card-body"},Yv={id:"devices-learning-status",class:"alert alert-info",hidden:""},Zv={id:"table_devices_vue"},Xv={class:"card-footer"},Qv={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},eb=Vs("i",{class:"fas fa-trash"},null,-1);Vv.render=function(e,t,n,a,l,s){const i=xl("page-navbar"),r=xl("modal-delete-confirm"),o=xl("modal-add-device-exclusion"),c=xl("modal-edit-device-exclusion"),u=xl("datatable");return Ts(),Us($s,null,[Vs("div",qv,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Vs("div",Hv,[Vs("div",Gv,[Wv,Vs("div",Kv,[Vs("div",Jv,[Vs("div",Yv,ee(l.learning_message),1),Vs("div",Zv,[qs(r,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),qs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),qs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Vs("div",Xv,[Vs("button",Qv,[eb,Ws(" "+ee(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Vv.__file="http_src/vue/page-device-exclusions.vue";var tb={components:{datatable:Sh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const nb={class:"row"},ab={class:"col-md-12 col-lg-12"},lb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),sb={class:"card"},ib={class:"card-body"},rb={id:"table_host_tls"},ob={class:"card-footer"};tb.render=function(e,t,n,a,l,s){const i=xl("datatable");return Ts(),Us("div",nb,[Vs("div",ab,[lb,Vs("div",sb,[Vs("div",ib,[Vs("div",rb,[qs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",ob,[Vs("b",null,ee(l.i18n("fingerprint_note")),1)])])])])},tb.__file="http_src/vue/page-host-tls.vue";var cb={components:{datatable:Sh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const ub={class:"row"},db={class:"col-md-12 col-lg-12"},pb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),_b={class:"card"},fb={class:"card-body"},hb={id:"table_host_ssh"};cb.render=function(e,t,n,a,l,s){const i=xl("datatable");return Ts(),Us("div",ub,[Vs("div",db,[pb,Vs("div",_b,[Vs("div",fb,[Vs("div",hb,[qs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},cb.__file="http_src/vue/page-host-ssh.vue";const mb="change_map_event";var gb={components:{"page-periodicity-map":gg,"page-periodicity-table":mm,"page-asset-map":jg,"page-asset-table":am,"page-service-map":Zm,"page-service-table":Mm,"page-navbar":nv},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",mb,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id&&(this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:NtopUtils.shortenLabel(`${e.selected_host.label}`,16,"."),title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${e.selected_host.id}`:null,target_blank:"true"}))},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(mb,e)}}};gb.render=function(e,t,n,a,l,s){const i=xl("page-navbar"),r=xl("page-service-map"),o=xl("page-service-table"),c=xl("page-periodicity-map"),u=xl("page-periodicity-table"),d=xl("page-asset-map"),p=xl("page-asset-table");return Ts(),Us($s,null,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(Ts(),Fs(r,{key:0,ref:"service_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(Ts(),Fs(o,{key:1,ref:"service_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.service_table_filter_list,is_admin:n.is_admin,service_acceptance:n.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(Ts(),Fs(c,{key:2,ref:"periodicity_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(Ts(),Fs(u,{key:3,ref:"periodicity_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.periodicity_table_filter_list,is_admin:n.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Js("v-if",!0),n.asset_map_filter_list&&n.asset_table_filter_list?(Ts(),Us($s,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(Ts(),Fs(d,{key:0,ref:"asset_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(Ts(),Fs(p,{key:1,ref:"asset_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Js("v-if",!0)],64)):Js("v-if",!0)],64)},gb.__file="http_src/vue/page-home-map.vue";const vb=["width","height"],bb=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var yb={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,n=d3v7,a=hn(null),l=hn({});return ul((async()=>{})),dl((async()=>{!async function(){const e=n.scaleOrdinal(n.schemeCategory10);let s=await async function(){let e={nodes:[{index:0,name:"Liikevaihto",hours:"100%"},{index:1,name:"Kiinteät kulut",hours:"85%"},{index:2,name:"Muuttuvat kulut",hours:"3:00"},{index:3,name:"Palkkakulut",hours:"1:20"},{index:4,name:"Muut kiinte",hours:"1:40"},{index:5,name:"Kate",hours:"1:40"}],links:[{source:0,target:1,value:75,hours:"+1:00"},{source:0,target:2,value:10,hours:"+2:00"},{source:1,target:3,value:69,hours:"+1:20"},{source:1,target:4,value:6,hours:"+1:40"},{source:0,target:5,value:15,hours:"+1:40"}]};e=function(e){let t=[],n=[],a={};const l=(e,n,l)=>{if(null!=a[e])return;let s=t.length;a[e]=s;let i={index:s,name:e,href:n,color:l};t.push(i)},s=(e,t,l,s)=>{let i={source:a[e],target:a[t],value:l,label:s};n.push(i)};return e.forEach((e=>{l(e.source,e.source_link,e.source_color),l(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:n}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]);return e}();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let n=t.height;null==n&&(n=window.innerHeight-50);return{width:e,height:n}}();l.value=i;const{links:r,nodes:o}=function(e,t,a){return n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,a]])(e)}(s,i.width-10,i.height-5);n.select(a.value).select("g.nodes").selectAll("rect").data(o).join((t=>{const a=t.append("rect");a.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),a.transition(n.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/o.length))),a.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/o.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),n.select(a.value).select("g.texts").selectAll("text").data(o).join((t=>{t.append("text").transition(n.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/o.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/o.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())),n.select(a.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const n=t.append("linearGradient");n.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),n.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/o.length))),n.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/o.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/o.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/o.length)))}),(e=>e.remove())),n.select(a.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(n.easeLinear).delay(1e3).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(n.easeLinear).delay(500).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ts(),Us("div",null,[(Ts(),Us("svg",{ref_key:"sankey_chart_ref",ref:a,width:l.value.width,height:l.value.height,style:{margin:"10px"}},bb,8,vb))]))}};fp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),yb.__file="http_src/vue/page-sankey.vue";const wb="change_applications_tab_event";var xb={components:{chart:Od,datatable:Sh,"modal-delete-confirm":tm,"tab-list":Yh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n=url_params;n.view="applications";let a={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.tot_bytes,l=100*n.bytes_rcvd/n.tot_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(a);s.columns_config=l,e.config_devices_applications=s,n.view="categories",a.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),l=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(a);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){C.on_custom_event("change_applications_tab_event",wb,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,n){const a=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,r,o)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${o[n].id};eq&ip=${a};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(wb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const kb={class:"row"},$b={class:"col-md-12 col-lg-12"},Sb={class:"card"},Cb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nb={class:"card-body"},Ab={id:"host_details_applications"},Eb={class:"row mb-4 mt-4",id:"host_details_applications"},Tb={class:"col-6"},Pb={key:0,class:"widget-name"};xb.render=function(e,t,n,a,l,s){const i=xl("tab-list"),r=xl("chart"),o=xl("datatable");return Ts(),Us("div",kb,[Vs("div",$b,[Vs("div",Sb,[Cb,Vs("div",Nb,[Vs("div",Ab,[qs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",Eb,[(Ts(!0),Us($s,null,Al(l.chart_options,(e=>(Ts(),Us("div",Tb,[e.tab==l.applications_tab?(Ts(),Us("h3",Pb,ee(e.title),1)):Js("v-if",!0),e.tab==l.applications_tab?(Ts(),Fs(r,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Js("v-if",!0)])))),256))]),"applications"==l.applications_tab?(Ts(),Fs(o,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0),"categories"==l.applications_tab?(Ts(),Fs(o,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])])])])},xb.__file="http_src/vue/page-host-details-applications.vue";const Ib={class:"row"},Mb={class:"col-md-12 col-lg-12"},Ob={class:"card"},Ub=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Fb={class:"card-body"},jb={id:"host_details_traffic"},Lb={class:"row mb-4 mt-4",id:"host_details_traffic"},Db={class:"col-4"},Rb={class:"widget-name"};var zb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=hn(null);hn([]);const n=hn({});ul((async()=>{!function(e){const a=[];let l={};l.host=x.get_url_entry("host"),l.vlan=x.get_url_entry("vlan"),l.ifid=x.get_url_entry("ifid"),a.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,n,a,l){t.value.reload()}});let s={table_buttons:a,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.total_bytes,l=100*n.bytes_rcvd/n.total_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],r=ntopng_utility.clone(s);r.columns_config=i,n.value=r}()})),hl((async()=>{t.value.destroy_table()}));const a=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Ts(),Us("div",Ib,[Vs("div",Mb,[Vs("div",Ob,[Ub,Vs("div",Fb,[Vs("div",jb,[Vs("div",Lb,[(Ts(),Us($s,null,Al(a,(e=>Vs("div",Db,[Vs("h3",Rb,ee(e.title),1),qs(Od,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),qs(Sh,{ref_key:"traffic_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Bb={class:"row"},Vb={class:"col-md-12 col-lg-12"},qb={class:"card"},Hb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gb={class:"card-body"},Wb={class:"row"},Kb={class:"col-6 mb-4 mt-4"},Jb={class:"widget-name"};var Yb={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function a(e,t,a){n.hideOverlays()}return dl((()=>{})),(e,n)=>(Ts(),Us("div",Bb,[Vs("div",Vb,[Vs("div",qb,[Hb,Vs("div",Gb,[Vs("div",Wb,[(Ts(),Us($s,null,Al(t,(e=>Vs("div",Kb,[Vs("h3",Jb,ee(e.title),1),qs(Od,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:a},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const Zb=[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])],-1)];var Xb={__name:"loading",props:{},setup(e,{expose:t}){const n=hn(null);return t({hide_loading:function(e=500){$(n.value).fadeOut(e)},show_loading:function(e=500){$(n.value).fadeIn(e)}}),(e,t)=>(Ts(),Us("div",{ref_key:"overlay",ref:n,class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},Zb,512))},__file:"http_src/vue/loading.vue"};const Qb={key:0,class:"alert alert-info",id:"empty-message"},ey=["width","height"],ty=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var ny={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:n}){const a=e,l=d3v7,s=hn(!1),i=hn(null),r=hn({});function o(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=a.sankey_data.nodes&&null!=a.sankey_data.links&&0!=a.sankey_data.length&&0!=a.sankey_data.links.length&&d()}ul((async()=>{})),dl((async()=>{o(),window.addEventListener("resize",(()=>o(!0)))})),Ua((()=>a.sankey_data),((e,t)=>{o(!0)}));let c=null,u=null;async function d(){const e=l.scaleOrdinal(l.schemeCategory10);let t=a.sankey_data;const s=function(){n("update_width");let e=a.width;null==e&&(e=$(i.value).parent().parent().width()-10);n("update_height");let t=a.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var o,d;r.value=s,o=s.width-10,d=s.height-5,c=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[o,d]]),u=c(t);const{links:h,nodes:m}=u;let g=l.select(i.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",f),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e.label}`)),g.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){n("node_click",t.data)})),g.call(l.drag().subject((e=>e)).on("start",p).on("drag",_));const v=l.select(i.value).select("g.links").selectAll("g").data(h).join((e=>e.append("g")));let b=v.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),v.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),v.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function _(e,t){l.select(this).attr("transform",(function(t){const n=e.x-t.__x,a=e.y-t.__y,s=r.value.width,i=r.value.width;return t.x0=t.__x0+n,t.x1=t.__x1+n,t.y0=t.__y0+a,t.y1=t.__y1+a,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),c.update(u),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const h=e=>i18n(e);return t({draw_sankey:d,set_no_data_flag:function(e){s.value=e}}),(t,n)=>(Ts(),Us($s,null,[s.value?(Ts(),Us("div",Qb,ee(e.no_data_message||h("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",null,[(Ts(),Us("svg",{ref_key:"sankey_chart_ref",ref:i,width:r.value.width,height:r.value.height,style:{margin:"10px"}},ty,8,ey))])],64))}};fp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),ny.__file="http_src/vue/sankey_3.vue";let ay=d3v7;const ly={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:ay.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:ay.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:ay.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},sy=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${n.bytesToSize(e.value)}`,iy={formatFlowTitle:sy,get_data:async function(){return{}},getDefaultSankeySettings:function(){return ly}},ry={class:"row"},oy={class:"col-md-12 col-lg-12"},cy={class:"card card-shadow"},uy={class:"card-body"},dy={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},py={class:"d-flex align-items-center mb-2"},_y={class:"d-flex no-wrap ms-auto"},fy={class:"m-1"},hy={style:{"min-width":"16rem"}},my={class:"my-auto me-1"},gy=Vs("label",{class:"my-auto me-1"},null,-1),vy=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var by={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,n=e=>i18n(e),a=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,l=hn(null),s=hn(null),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:n("flows_page.local_cli_remote_srv"),label:n("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:n("flows_page.local_srv_remote_cli"),label:n("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:n("flows_page.all_flows"),label:n("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:n("flows_page.local_only"),label:n("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:n("flows_page.remote_only"),label:n("flows_page.remote_only"),filter_icon:!1,countable:!1});const r=hn(i[0]),o=hn({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},n=x.obj_to_url_params(t);const a=`${http_prefix}/lua/host_details.lua?${n}`;x.go_to_url(a)}ul((()=>{})),dl((()=>{u()}));const u=function(){let e=r.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value.show_loading();let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),n=`${a}?${t}`;return n}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id],l=function(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}(e.links,a,t);return l}(e,t);return{nodes:e.nodes,links:n}}(t);let n=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let n={};e.nodes.forEach((e=>n[e.node_id]=e));const a=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},l=(e,n)=>e==t?e:`${n}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,r=a(e),o={source_node_id:l(e.source_node_id,r),target_node_id:l(e.target_node_id,r),label:e.label,value:e.value,data:e};if(-1==r){let a=n[e.target_node_id];t={node_id:o.target_node_id,label:a.label,data:a}}else{let a=n[e.source_node_id];t={node_id:o.source_node_id,label:a.label,data:a}}i.links.push(o),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let r=n[t];i.nodes.push({node_id:r.node_id,label:r.label,data:r}),i.nodes.forEach((e=>n[e.node_id]=e));const o=e=>`${a(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=o(e),a=c[t];null==a&&(a={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=a),a.node_links.push({source:n[e.source_node_id],target:n[e.target_node_id],value:p(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],n={node_id:t.id,label:t.label,data:t.data};u.push(n),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:n.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e}),d.push({source_node_id:n.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e})}))}let _={},f=[];u.map(((e,t)=>{let n={index:t,node_id:e.node_id,label:e.label,data:e.data};_[e.node_id]=n,f.push(n)}));let h=d.map((e=>{let t=_[e.source_node_id],n=_[e.target_node_id];return{source:t.index,target:n.index,source_node_id:t.index,target_node_id:n.index,value:e.value,label:e.label}}));return{nodes:f,links:h}}(t,n);return s.links.length>0&&s.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),s}();o.value=e,s.value.hide_loading()}()},d=function(){u()};function p(e){return e.data?.info?.traffic}return(e,t)=>(Ts(),Us("div",ry,[Vs("div",oy,[Vs("div",cy,[qs(Xb,{ref_key:"loading",ref:s},null,512),Vs("div",uy,[Vs("div",dy,[Vs("div",py,[Vs("div",_y,[Vs("div",fy,[Vs("div",hy,[Vs("label",my,ee(n("hosts"))+": ",1),qs(Dd,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:i,onSelect_option:u},null,8,["selected_option"])])]),Vs("div",null,[gy,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},vy)])])])]),qs(ny,{ref_key:"sankey_chart",ref:l,onNode_click:c,sankey_data:o.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const yy={id:"script-description",class:"notes bg-light border",role:"alert"};var wy={__name:"note-list",props:{note_list:Array},setup(e){const t=e,n=e=>i18n(e);return(e,a)=>(Ts(),Us("div",yy,[Vs("b",null,ee(n("notes")),1),Vs("ul",null,[(Ts(!0),Us($s,null,Al(t.note_list,(e=>(Ts(),Us("li",null,ee(e),1)))),256))])]))},__file:"http_src/vue/note-list.vue"};const xy={class:"form-group ms-2 me-2 mt-3 row"},ky={class:"col-form-label col-sm-4"},$y={class:"col-sm-8"},Sy={key:0,class:"form-group ms-2 me-2 mt-3 row"},Cy={class:"col-form-label col-sm-4"},Ny={class:"col-8"},Ay={key:1,class:"form-group ms-2 me-2 mt-3 row"},Ey={class:"col-form-label col-sm-4"},Ty={class:"col-8"},Py={class:"form-group ms-2 me-2 mt-3 row"},Iy={class:"col-form-label col-sm-4"},My={class:"col-3"},Oy={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Uy=["value","id"],Fy=["id","for"],jy=["value","id"],Ly=["id","for"];var Dy={__name:"modal-add-host-rules",props:{metric_list:Array,frequency_list:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e;hn(""),hn("");const l=hn(null),s=i18n("if_stats_config.add_host_rules_title"),i=hn(!1),r=e=>i18n(e),o=hn([]),c=hn([]),u=hn(null),d=hn({}),p=hn({}),_=hn(!0),f=hn({}),h=hn(!0),m=[r("if_stats_config.note_1"),r("if_stats_config.note_2"),r("if_stats_config.note_3"),r("if_stats_config.note_4")],g=[{title:r("volume"),label:r("volume"),id:"volume",active:!0},{title:r("throughput"),label:r("throughput"),id:"throughput",active:!1}],v=[{title:r("kb"),label:r("kb"),id:"kb",value:1024,active:!1},{title:r("mb"),label:r("mb"),id:"mb",value:1048576,active:!1},{title:r("gb"),label:r("gb"),id:"gb",value:1073741824,active:!0}],b=[{title:r("kbps"),label:r("kbps"),id:"kbps",value:1e3,active:!1},{title:r("mbps"),label:r("mbps"),id:"mbps",value:1e6,active:!1},{title:r("gbps"),label:r("gbps"),id:"gbps",value:1e9,active:!0}],y=hn(null),w=hn(null);const x=()=>{let e=new RegExp(xf.get_data_pattern("ip"));_.value=!(e.test(y.value.value)||"*"===y.value.value)},k=e=>{const t=e.target.id;"throughput"==f.value.id?b.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):v.forEach((e=>{e.id===t?e.active=!0:e.active=!1})),Array.from(e.target.parentElement.children).forEach((e=>{"LABEL"==e.tagName&&(e.id==t?(e.classList.remove("btn-secondary"),e.classList.add("btn-primary"),e.classList.add("active")):(e.classList.add("btn-secondary"),e.classList.remove("btn-primary"),e.classList.remove("active")))}))},$=()=>{const e=y.value.value,t=p.value.id,a=d.value.id;let l,s,i=f.value.id,r=d.value.extra_metric?d.value.extra_metric:null;!1===h.value&&(i="",r="",s=w.value.value),"throughput"==i?(b.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)/8):"volume"==i&&(v.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)),n("add",{host:e,frequency:t,metric:a,threshold:s,metric_type:i,extra_metric:r}),S()},S=()=>{l.value.close()};return ul((()=>{f.value=g[0]})),t({show:()=>{y.value.value="",d.value=o.value[0],p.value=c.value[0],f.value=g[0],g.forEach((e=>e.active=!1)),g[0].active=!0,v.forEach((e=>e.active=!1)),v[v.length-1].active=!0,b.forEach((e=>e.active=!1)),b[b.length-1].active=!0,w.value.value=1,l.value.show()},close:S,metricsLoaded:e=>{i.value=!0,o.value=e,c.value=a.frequency_list,p.value=c.value[0],d.value=o.value[0]}}),(e,t)=>(Ts(),Fs(hp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(yn(s)),1)])),body:ma((()=>[Js(" Target information, here an IP is put "),Vs("div",xy,[Vs("label",ky,[Vs("b",null,ee(r("if_stats_config.target")),1)]),Vs("div",$y,[Vs("input",{ref_key:"host",ref:y,onInput:x,class:"form-control",type:"text",placeholder:"A local host IP or '*' for checking all local hosts",required:""},null,544)])]),Js(" Metric information, here a metric is selected (e.g. DNS traffic) "),i.value?(Ts(),Us("div",Sy,[Vs("label",Cy,[Vs("b",null,ee(r("if_stats_config.metric")),1)]),Vs("div",Ny,[qs(Dd,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),onSelect_option:t[1]||(t[1]=e=>{1==d.value.show_volume?h.value=!0:h.value=!1}),options:o.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),i.value?(Ts(),Us("div",Ay,[Vs("label",Ey,[Vs("b",null,ee(r("if_stats_config.frequency")),1)]),Vs("div",Ty,[qs(Dd,{selected_option:p.value,"onUpdate:selected_option":t[2]||(t[2]=e=>p.value=e),options:c.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Threshold information, maximum amount of bytes "),Vs("div",Py,[Vs("label",Iy,[Vs("b",null,ee(r("if_stats_config.threshold")),1)]),h.value?(Ts(),Us($s,{key:0},[Vs("div",My,[qs(Dd,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:g},null,8,["selected_option"])]),Vs("div",{class:W(["col-3",["throughput"==f.value.id?"p-0":""]])},[Vs("div",Oy,["throughput"==f.value.id?(Ts(),Us($s,{key:0},Al(b,(e=>(Ts(),Us($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Uy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},ee(e.label),11,Fy)],64)))),64)):(Ts(),Us($s,{key:1},Al(v,(e=>(Ts(),Us($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,jy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},ee(e.label),11,Ly)],64)))),64))])],2)],64)):Js("v-if",!0),Vs("div",{class:W([h.value?"col-2":"col-8"])},[Vs("input",{value:"1",ref_key:"threshold",ref:w,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512)],2)])])),footer:ma((()=>[qs(wy,{note_list:m}),Vs("button",{type:"button",onClick:$,class:W(["btn btn-primary",[_.value?"disabled":""]])},ee(r("add")),3)])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const Ry={class:"row"},zy={class:"col-md-12 col-lg-12"},By={class:"card"},Vy=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),qy={class:"card-body"},Hy={class:"mb-4"},Gy={id:"host_rules"},Wy={class:"card-footer"};var Ky={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,a=hn(null),l=hn(null),s=hn(null),i=e=>i18n(e),r=hn({}),o=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,u=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,d=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,p=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],_={ifid:t.ifid,csrf:t.page_csrf};let f={},h=i("if_stats_config.delete_host_rules_title"),m=i("if_stats_config.delete_host_rules_description"),g=[];const v=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}],b=function(){a.value.reload()},y=async function(){const e=r.value,t=n.buildURL(d,{..._,rule_id:e.id});await $.post(t,(function(e,t){b()}))},w=async function(e){const t=n.buildURL(u,{..._,...e});await $.post(t,(function(e,t){b()}))},x=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,r.value=t,l.value.show()}};return DataTableUtils.createActionButtons([{class:"btn-danger",handler:t,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])},k=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){b()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.metric"),targets:2,width:"10",name:"metric",data:"metric",className:"text-nowrap",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=e;return g.forEach((a=>{a.id==e&&(t.extra_metric?t.extra_metric==a.extra_metric&&(n=a.label):n=a.label)})),n}(e,n)}},{columnName:i("if_stats_config.frequency"),targets:3,width:"10",name:"frequency",data:"frequency",className:"text-nowrap",responsivePriority:1,render:function(e){return function(e){let t="";return v.forEach((n=>{e==n.id&&(t=n.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:4,width:"10",name:"threshold",data:"threshold",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=parseInt(e);return a=t.metric_type&&"throughput"==t.metric_type?n.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n.bytesToSize(e):e,a}(e,a)}},{columnName:i("metric_type"),visible:!1,targets:5,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,n){return x(n)}}],a={table_buttons:e,data_url:n.buildURL(c,_),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};f=a};return ul((async()=>{k(),await async function(){const e=n.buildURL(o,_);await $.get(e,(function(e,t){g=e.rsp}))}(),s.value.metricsLoaded(g)})),hl((()=>{a.value.destroy_table()})),(e,t)=>(Ts(),Us("div",Ry,[Vs("div",zy,[Vs("div",By,[Vy,Vs("div",qy,[Vs("div",Hy,[Vs("h4",null,ee(i("if_stats_config.host_rules")),1)]),Vs("div",Gy,[qs(tm,{ref_key:"modal_delete_confirm",ref:l,title:yn(h),body:yn(m),onDelete:y},null,8,["title","body"]),qs(Dy,{ref_key:"modal_add_host_rule",ref:s,metric_list:yn(g),frequency_list:v,onAdd:w},null,8,["metric_list"]),qs(Sh,{ref_key:"table_host_rules",ref:a,table_buttons:yn(f).table_buttons,columns_config:yn(f).columns_config,data_url:yn(f).data_url,enable_search:yn(f).enable_search,table_config:yn(f).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",Wy,[qs(wy,{note_list:p})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const Jy={class:"row"},Yy={class:"col-md-12 col-lg-12"},Zy={class:"card"},Xy=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Qy={class:"card-body"},ew={id:"host_details_ports"},tw={class:"row mb-4 mt-4",id:"host_details_ports"},nw={class:"col-6"};var aw={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){hn(null),hn([]),hn({});const t=e=>i18n(e);ul((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),a.forEach((t=>{let a={...t.extra_params,...e};$.get(n.buildURL(t.url,a),(async function(e,n){let a=[];e.rsp.forEach((e=>{const t=e.port_info.port,n=e.port_info.l7_proto;a.push({label:`${t} (${n})`})})),t.stats_rows=a}))}))}()})),dl((async()=>{n.hideOverlays()})),hl((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.PIE,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.PIE,http_prefix;const a=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ts(),Us("div",Jy,[Vs("div",Yy,[Vs("div",Zy,[Xy,Vs("div",Qy,[Vs("div",ew,[Vs("div",tw,[(Ts(),Us($s,null,Al(a,(e=>Vs("div",nw,[qs(Eh,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const lw={class:"row"},sw={class:"col-12"},iw={class:"card"},rw={class:"card-body"},ow={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},cw={class:"d-flex ms-auto flex-row-reverse"},uw=Vs("label",{class:"my-auto me-1"},null,-1),dw=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],pw={key:0,class:"m-1"},_w={style:{"min-width":"14rem"}},fw={class:"my-auto me-1"};var hw={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=hn(null),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,r="alerts-map",o={},c=hn(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},d=function(){l.value.show_loading(),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()},p=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},_=function(e){l.value.show_loading(),x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()};return ul((()=>{const e=x.get_url_entry("timeframe"),n=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),n||x.set_key_to_url("vlan",0),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),dl((()=>{l.value.hide_loading()})),(t,n)=>(Ts(),Us("div",lw,[Vs("div",sw,[Vs("div",iw,[qs(Xb,{ref_key:"loading",ref:l},null,512),Vs("div",rw,[Vs("div",ow,[Vs("div",cw,[Vs("div",null,[uw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},dw)])]),(Ts(!0),Us($s,null,Al(e.available_filters,((e,t,n)=>(Ts(),Us($s,null,[e.length>0?(Ts(),Us("div",pw,[Vs("div",_w,[Vs("label",fw,ee(a("bubble_map."+t))+": ",1),qs(Dd,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256))]),Vs("div",{id:r,style:{height:"90%"}},[qs(Od,{ref_key:"bubble_chart",ref:c,id:r,chart_type:yn(s),base_url_request:i,get_params_url_request:u,get_custom_chart_options:p(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const mw={class:"row"},gw={class:"col-12"},vw={class:"card"},bw={class:"card-body"},yw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},ww={class:"d-flex ms-auto flex-row-reverse"},xw=Vs("label",{class:"my-auto me-1"},null,-1),kw={class:"m-1"},$w={key:0,style:{"min-width":"15rem"}},Sw={class:"my-auto me-1"};var Cw={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",r={},o=hn(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},u=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(r.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},d=function(e){x.set_key_to_url(e.filter_name,e.id),o.value.update_chart(`${s}?${c()}`)};return ul((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),(t,n)=>(Ts(),Us("div",mw,[Vs("div",gw,[Vs("div",vw,[Vs("div",bw,[Vs("div",yw,[Vs("div",ww,[xw,(Ts(!0),Us($s,null,Al(e.available_filters,((e,t,n)=>(Ts(),Us("div",kw,[e.length>0?(Ts(),Us("div",$w,[Vs("label",Sw,ee(a("bubble_map."+t))+": ",1),qs(Dd,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Js("v-if",!0)])))),256))]),Vs("div",{id:i,style:{height:"90%"}},[qs(Od,{ref_key:"bubble_chart",ref:o,id:i,chart_type:yn(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const Nw={class:"row"},Aw={class:"col-md-12 col-lg-12"},Ew={class:"card card-shadow"},Tw={class:"card-body"},Pw={class:"d-flex align-items-center flex-row-reverse mb-2"},Iw=Vs("label",{class:"my-auto me-1"},null,-1),Mw=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],Ow={key:0,class:"m-1"},Uw={style:{"min-width":"14rem"}},Fw={class:"my-auto me-1"},jw=["title"],Lw=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var Dw={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,n={},a=e=>i18n(e),l=hn(!1),s=a("ports_analysis.max_entries"),i=a("ports_analysis.no_data"),r=hn(null),o=hn(null),c=hn(null),u=hn(null),d=hn({}),p=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,_=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=hn(null);function h(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}ul((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),a||x.set_key_to_url("vlan","none"),a||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(n[e]=t)}))})),dl((()=>{y(),w(),v()}));const m=function(){v()},g=function(e){x.set_key_to_url(e.filter_name,e.id),v()},v=function(){!async function(){f.value.show_loading();let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),n=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==n&&(n="");let a="",l={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:n},s=x.obj_to_url_params(l);a=""==t?`${p}?${s}`:`${_}?${s}`;return a}();let t=await b.http_request(e);(function(e){l.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id],l=function(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}(e.links,a,t);return l}(e,t);return{nodes:e.nodes,links:n}}(t);const n=function(e){let t={},n={};e.nodes.forEach((e=>t[e.node_id]=e));let a=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let l=a(e),s=n[l];null==s&&(s={id:l,label:e.label,link:e.optional_info.link,node_links:[]},n[l]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let l=e.nodes.map((e=>e)),s=[];for(let e in n){let t=n[e],a={node_id:t.id,label:t.label,link:t.link};l.push(a),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value}),s.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value})}))}let i=l.map(((e,t)=>({index:t,label:e.label,data:e}))),r={};i.forEach(((e,t)=>r[e.data.node_id]=e));let o=s.map((e=>({source:r[e.source_node_id].index,target:r[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:o}}(t);return n.links.length>0&&n.nodes.length>0?r.value.set_no_data_flag(!1):r.value.set_no_data_flag(!0),n}();d.value=e,f.value.hide_loading()}()};function y(){u.value=$(o.value).height()-100}function w(){c.value=$(o.value).width()-10}return(t,p)=>(Ts(),Us("div",Nw,[Vs("div",Aw,[Vs("div",Ew,[qs(Xb,{ref_key:"loading",ref:f},null,512),Vs("div",Tw,[Vs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:o},[Vs("div",Pw,[Vs("div",null,[Iw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},Mw)])]),(Ts(!0),Us($s,null,Al(e.available_filters,((e,t,l)=>(Ts(),Us($s,null,[e.length>0?(Ts(),Us("div",Ow,[Vs("div",Uw,[Vs("label",Fw,ee(a("ports_analysis."+t))+": ",1),qs(Dd,{selected_option:n[t],"onUpdate:selected_option":e=>n[t]=e,options:e,onSelect_option:g},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256)),1==l.value?(Ts(),Us("div",{key:0,class:"mt-auto m-1",title:yn(s),style:{cursor:"help"}},Lw,8,jw)):Js("v-if",!0)]),qs(ny,{ref_key:"sankey_chart",ref:r,width:c.value,height:u.value,no_data_message:yn(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:h},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const Rw={class:"row"},zw={class:"col-md-12 col-lg-12"},Bw={class:"card card-shadow"},Vw={class:"card-body"},qw={id:"aggregated_live_flows"};var Hw={__name:"page-aggregated-live-flows",props:{vlans:Array,ifid:Number},setup(e){const t=e,a=hn(null),l=hn({}),s=hn(null),i=e=>i18n(e),r=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua`;return ul((async()=>{await async function(){const e=[];let o={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid,vlan_id:ntopng_url_manager.get_url_entry("vlan_id")},c=ntopng_url_manager.obj_to_url_params(o);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,n,a){s.value.reload()}});const u=[];t.vlans.length>0&&u.push({filterTitle:i("map_page.vlans"),filters:t.vlans,filterMenuKey:"vlan_id",columnIndex:0,removeAllEntry:!0,callbackFunction:(e,n)=>{let l={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid,vlan_id:n.id};ntopng_url_manager.set_key_to_url("vlan_id",n.id),e.ajax.url(`${r}?${ntopng_url_manager.obj_to_url_params(l)}`),a.value.show_loading(),e.ajax.reload(),a.value.hide_loading()}});let d={table_buttons:e,data_url:`${r}?${c}`,enable_search:!0,table_filters:u,table_config:{serverSide:!1,order:[[7,"desc"]],columnDefs:[{type:"file-size",targets:6},{type:"file-size",targets:7},{type:"file-size",targets:8}]}},p=[{columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<a href="${http_prefix}/lua/flows_stats.lua?application=${e.id}" target="_blank">${e.label}</a>`}];t.vlans.length>0&&(p.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}" target="_blank">${e.label}</a>`}),d.table_config.order=[[8,"desc"]],d.table_config.columnDefs=[{type:"file-size",targets:7},{type:"file-size",targets:8},{type:"file-size",targets:9}]);p.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>n.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>n.bytesToSize(e)}),d.columns_config=p,l.value=d}()})),(e,t)=>(Ts(),Us("div",Rw,[Vs("div",zw,[Vs("div",Bw,[qs(Xb,{ref_key:"loading",ref:a},null,512),Vs("div",Vw,[Vs("div",qw,[qs(Sh,{ref_key:"table_aggregated_live_flows",ref:s,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"},Gw={components:{modal:hp,"select-search":Dd},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):xf.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let n=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),a=n.options.find((e=>e.value==this.option_selected.value));e=a.value,t=a.value_label||a.label}else null==e&&(e="");let n={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",n),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,n),this.close()},close:function(){this.$refs.modal.close()}}};const Ww=e=>(_a("data-v-3119c83e"),e=e(),fa(),e),Kw={autocomplete:"off"},Jw={class:"form-group row"},Yw=Ww((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Zw={class:"col-sm-8"},Xw=Ww((()=>Vs("hr",null,null,-1))),Qw={class:"dt-filter-template-container form-group row"},ex={class:"col-form-label col-sm-3"},tx={class:"col-sm-8"},nx={class:"input-group mb-3"},ax={class:"input-group-prepend col-sm-3"},lx={key:0,class:"col-sm-9"},sx=["pattern","required"],ix={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},rx=["disabled"];fp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),Gw.render=function(e,t,n,a,l,s){const i=xl("select-search"),r=xl("modal");return Ts(),Fs(r,{id:l.id_modal,ref:"modal"},{title:ma((()=>[Ws(ee(l.i18n("alerts_dashboard.add_filter")),1)])),body:ma((()=>[Vs("form",Kw,[Vs("div",Jw,[Yw,Vs("div",Zw,[qs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:n.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Xw,Vs("div",Qw,[Vs("label",ex,[Vs("b",null,ee(l.filter_type_label_selected),1)]),Vs("div",tx,[Vs("div",nx,[Vs("div",ax,[qs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(Ts(),Us("div",lx,[qs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Ts(),Us($s,{key:1},[yl(Vs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,sx),[[Mr,l.input_value]]),Vs("span",ix,ee(l.i18n("invalid_value")),1)],64))]),Js(" end div input-group mb-3 ")]),Js(" end div form-group-row ")])])])),footer:ma((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},ee(l.i18n("apply")),9,rx)])),_:1},8,["id"])},Gw.__scopeId="data-v-3119c83e",Gw.__file="http_src/vue/modal-filters.vue";let ox,cx,ux=[];let dx,px,_x=null!=window.location.toString().match(/alert_stats.lua/),fx={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==fx.value&&(fx.value="");let hx=ntopng_url_manager.get_url_entry("status");null!=hx&&""!=hx||(hx="historical");const mx=!_x;let gx=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(_x);const vx=async function(){ux=await async function(e,t){let n;if(e)n=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),n=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(n)}(_x,gx),ux.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),ux.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},ox={},cx={},ux.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>ox[e.id]=e.label)),cx[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[n,a]of e){let e=ux.find((e=>e.id==n));if(null!=e){a.split(",").forEach((n=>{let[a,l]=n.split(";");null==l||null==a||""==l||null!=e.options&&null==e.options.find((e=>e.value==a))||t.push({id:e.id,operator:l,value:a})}))}}return t};var bx={props:{id:String},components:{"data-time-range-picker":Rd,"modal-filters":Gw},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,n=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,a=await ntopng_utility.http_request(n),l=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,a}(this),"all"!=this.page){let e=await vx();px=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            <b class='operator'>${e.selectedOperator?ox[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(dx)}));const n=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let n=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(n)&&(cx[e.key]&&!Array.isArray(cx[e.key])&&(e.operators=cx[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,n=e.detail.data.realValue,a=ntopng_status_manager.get_status();if(void 0===t)return;if(null==a.filters)return;const l=a.filters.filter((e=>e.id!=t||e.id==t&&e.value!=n));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const n=e.detail;if(void 0===n.data)return;return n.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const n=t.detail;if(void 0===n.data)return;if(void 0===n.data.key)return;const a=n.data;e.edit_tag=a,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:a.key,operator:a.selectedOperator,value:a.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:n}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=ux,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:_x,query_presets:[],query_preset:fx,status_view:hx,enable_query_presets:mx,page:gx,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=cx[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(ux.map((e=>e.id))),px.tagify.removeAllTags();let n=function(e){if(null==e)return{};let t={};e.forEach((e=>{let n=t[e.id];null==n&&(n=[],t[e.id]=n),n.push(e)}));let n={};for(let e in t){let a=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");n[e]=a}return n}(t);ntopng_url_manager.add_obj_to_url(n),t.forEach((e=>{let t=function(e){let t=ux.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let n=e.value;if(null!=t.options){let a=t.options.find((t=>t.value==e.value));null!=a&&(n=a.label)}const a={label:t.label,key:t.id,value:n,realValue:e.value,title:`${t.label}${e.operator}${n}`,selectedOperator:e.operator};return""==a.value&&(a.value="''"),null==a.realValue||null==a.selectedOperator||""==a.selectedOperator?null:a}(e);null!=t&&px.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const yx=e=>(_a("data-v-aaee59ea"),e=e(),fa(),e),wx={style:{width:"100%"}},xx={class:"mb-1"},kx={key:0,class:"d-flex align-items-center me-2"},$x={class:"btn-group",id:"statusSwitch",role:"group"},Sx=["value"],Cx=["label"],Nx=["value"],Ax={key:0,class:"d-flex mt-1",style:{width:"100%"}},Ex=["placeholder"],Tx=[yx((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],Px=[yx((()=>Vs("i",{class:"fas fa-times"},null,-1)))];fp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),bx.render=function(e,t,n,a,l,s){const i=xl("modal-filters"),r=xl("data-time-range-picker");return Ts(),Us("div",wx,[Vs("div",xx,[qs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),qs(r,{id:l.id_data_time_range_picker},{begin:ma((()=>[l.is_alert_stats_url?(Ts(),Us("div",kx,[Vs("div",$x,[Vs("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:W(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:W(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(Ts(),Us("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:W(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Js("v-if",!0)])])):Js("v-if",!0),l.enable_query_presets?yl((Ts(),Us("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(Ts(!0),Us($s,null,Al(l.query_presets,(e=>(Ts(),Us($s,null,[1==e.builtin?(Ts(),Us("option",{key:0,value:e},ee(e.name),9,Sx)):Js("v-if",!0)],64)))),256)),"analysis"!=l.page?(Ts(),Us("optgroup",{key:0,label:l.i18n("queries.queries")},[(Ts(!0),Us($s,null,Al(l.query_presets,(e=>(Ts(),Us($s,null,[e.builtin?Js("v-if",!0):(Ts(),Us("option",{key:0,value:e},ee(e.name),9,Nx))],64)))),256))],8,Cx)):Js("v-if",!0)],544)),[[jr,l.query_preset]]):Js("v-if",!0)])),extra_buttons:ma((()=>[Tl(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Js(" tagify "),"all"!=l.page?(Ts(),Us("div",Ax,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,Ex),yl(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},Tx,512),[[Kr,l.modal_data&&l.modal_data.length>0]]),yl(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},Px,512),[[Kr,l.modal_data&&l.modal_data.length>0]])])):Js("v-if",!0),Js(" end tagify ")])},bx.__scopeId="data-v-aaee59ea",bx.__file="http_src/vue/range-picker.vue";var Ix={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id),n=this.chart_options.statistics.total,a=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,r=this.chart_options.statistics.by_serie[0]["95th_percentile"],o=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*a),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*r),this.percentile_rcvd=e(8*o),this.total=t(n)}}};const Mx={class:"table table-borderless graph-statistics mb-2",style:{}},Ox=Vs("thead",{class:"text-center"},[Vs("tr",null,[Vs("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),Vs("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[Ws("95th "),Vs("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),Ws(":")]),Vs("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),Vs("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),Ux={class:"graph-val-total text-center",style:{"border-width":"1px"}},Fx={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},jx=Vs("br",null,null,-1),Lx={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},Dx=Vs("br",null,null,-1),Rx={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},zx=Vs("br",null,null,-1);Ix.render=function(e,t,n,a,l,s){return Ts(),Us("div",null,[Vs("table",Mx,[Ox,Vs("tbody",null,[Vs("tr",null,[Vs("td",Ux,[Vs("span",null,ee(l.total),1)]),Vs("td",Fx,[Vs("span",null,[Ws(ee(l.percentile_sent)+" [Sent]",1),jx,Ws(ee(l.percentile_rcvd)+" [Rcvd]",1)])]),Vs("td",Lx,[Vs("span",null,[Ws(ee(l.avg_sent)+" Kbit/s [Sent]",1),Dx,Ws(ee(l.avg_rcvd)+" [Rcvd]",1)])]),Js(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),Vs("td",Rx,[Vs("span",null,[Ws(ee(l.max_sent)+" [Sent]",1),zx,Ws(ee(l.max_rcvd)+" [Rcvd]",1)])])])])])])},Ix.__file="http_src/vue/simple-table.vue";const Bx={key:0,class:"alert alert-info",id:"empty-message"},Vx=["id"];var qx={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const n=e,a=hn(!1);const l=e=>i18n(e);return dl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return n.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(n.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={...iy.getDefaultSankeySettings(),...n.extra_settings};const a=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),r=d3v7.map(e,t.linkLink).map(A),o=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,h=Array.from(d3v7.union(a,l),(e=>({id:e})));const m=d3v7.map(h,t.nodeId).map(A);t.nodeGroups=d3v7.map(h,t.nodeGroup).map(A),h=d3v7.map(h,((e,t)=>({id:m[t]}))),f=d3v7.map(f,((e,t)=>({source:a[t],target:l[t],value:o[t],source_node:s[t],target_node:i[t],link:r[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const g=d3v7.scaleOrdinal(t.nodeGroups,t.colors),v=d3v7.map(h,t.nodeLabel),b=d3v7.map(h,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>m[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:h,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,C=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),N=d3v7.drag().on("start",(function(e,t){const n=d3v7.select(this);k=n.attr("x")-e.x,$=n.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),C.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(h).join("rect").call(N).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,n=e.targetLinks,a=t&&t[0]?t[0]:n[0];a&&(a.source.id===e.id?a.source_link&&""!==a.source_link&&window.open(a.source_link,"_blank"):a.target.id===e.id&&a.target_link&&""!==a.target_link&&window.open(a.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const n=e.sourceLinks;let a=g(t.nodeGroups[e.index]);return n&&n[0]&&(n[0].source.id===e.id?n[0].source_color&&""!==n[0].source_color&&(a=n[0].source_color):n[0].target.id===e.id&&n[0].target_color&&""!==n[0].target_color&&(a=n[0].target_color)),a})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(h).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>v[e])),Object.assign(x.node(),{scales:{color:g}})}(l);a.value=!1,$(`#${n.id}`).empty(),$(`#${n.id}`).append(e)}else $(`#${n.id}`).empty(),a.value=!0})),NtopUtils.hideOverlays()}}),(t,n)=>(Ts(),Us($s,null,[a.value?(Ts(),Us("div",Bx,ee(l("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,Vx)],64))},__file:"http_src/vue/sankey.vue"};const Hx=e=>(_a("data-v-7e5acce0"),e=e(),fa(),e),Gx={class:"mb-3 row"},Wx={class:"col-form-label col-sm-4"},Kx={class:"col-sm-6"},Jx={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Yx=Hx((()=>Vs("hr",null,null,-1))),Zx={class:"host-alert-fields"},Xx={class:"mb-3 row"},Qx={class:"col-form-label col-sm-4"},ek={class:"col-sm-6"},tk={value:""},nk={value:"0"},ak={disabled:""},lk=["value"],sk={class:"flow-alert-fields"},ik={class:"mb-3 row"},rk={class:"col-form-label col-sm-4"},ok={class:"col-sm-6"},ck={value:""},uk={value:"0"},dk={disabled:""},pk=["value"],_k={key:0,class:"ip-fields"},fk={class:"mb-3 row"},hk={class:"col-form-label col-sm-4"},mk={class:"col-sm-6"},gk=["pattern"],vk={key:1,class:"network-fields"},bk={class:"mb-3 row"},yk={class:"col-form-label col-sm-4"},wk={class:"col-sm-4 pr-0"},xk=["pattern"],kk={class:"col-sm-2 ps-4 pe-0"},$k=Hx((()=>Vs("span",{class:"me-2"},"/",-1))),Sk={class:"mb-3 row"},Ck={class:"col-form-label col-sm-4"},Nk={class:"col-sm-6"},Ak={class:"mb-3 row"},Ek={class:"col-form-label col-sm-4"},Tk={key:0},Pk={key:1},Ik={class:"col-sm-6"},Mk=["pattern"],Ok=["pattern"],Uk=Hx((()=>Vs("hr",{class:"separator mt-5"},null,-1))),Fk={class:"form-group row"},jk={class:"col-form-label"},Lk={class:"mt-1"},Dk=["placeholder"],Rk=["disabled"];var zk={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("ip"),i=hn(""),r=hn(""),o=hn(0),c=hn(""),u=hn(""),d=hn(""),p=hn(""),_=hn(null),f=i18n("details.comment_placeholder");function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let m=h("ip"),g=h("text"),v=h("certificate");const b=e=>{s.value=e},y=()=>{let e=null,t=!0;return"hosts"==a.alert_exclusions_page?(e=new RegExp(m),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==r.value||""==r.value||0==e.test(r.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==a.alert_exclusions_page?(e=new RegExp(g),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==a.alert_exclusions_page&&(e=new RegExp(v),t=null==c.value||""==c.value||0==e.test(c.value)),t},w=()=>{l.value.close()},x=()=>{let e,t=i.value;"hosts"==a.alert_exclusions_page?("network"==s.value&&(t=`${r.value}/${p.value}`),null!=o.value&&0!=o.value&&(t=`${t}@${o.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==a.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==a.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=_.value,n("add",e),w()};t({show:()=>{s.value="ip",i.value="",r.value="",o.value=0,u.value="",d.value="",p.value="",c.value="",_.value="",l.value.show()},close:w}),dl((()=>{}));const k=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[11]||(n[11]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(k("check_exclusion.add_exclusion")),1)])),body:ma((()=>["hosts"==e.alert_exclusions_page?(Ts(),Us($s,{key:0},[Js(" modal hosts "),Vs("div",Gx,[Vs("label",Wx,[Vs("b",null,ee(k("check_exclusion.member_type")),1)]),Vs("div",Kx,[Vs("div",Jx,[Vs("label",{class:W([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:n[0]||(n[0]=e=>b("ip"))}),Ws(" "+ee(k("check_exclusion.ip_address")),1)],2),Vs("label",{class:W([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:n[1]||(n[1]=e=>b("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ws(" "+ee(k("check_exclusion.network")),1)],2)])])]),Yx,Vs("div",Zx,[Vs("div",Xx,[Vs("label",Qx,[Vs("b",null,ee(k("check_exclusion.host_alert_type")),1)]),Vs("div",ek,[yl(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":n[2]||(n[2]=e=>u.value=e)},[Vs("option",tk,ee(k("check_exclusion.none")),1),Vs("option",nk,ee(k("check_exclusion.exclude_all_alerts")),1),Vs("option",ak,ee(k("check_exclusion.spacing_bar")),1),(Ts(!0),Us($s,null,Al(e.host_alert_types,(e=>(Ts(),Us($s,null,[null!=e?(Ts(),Us("option",{key:0,value:e.alert_id},ee(e.label),9,lk)):Js("v-if",!0)],64)))),256))],512),[[jr,u.value]])])])]),Vs("div",sk,[Vs("div",ik,[Vs("label",rk,[Vs("b",null,ee(k("check_exclusion.flow_alert_type")),1)]),Vs("div",ok,[yl(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":n[3]||(n[3]=e=>d.value=e)},[Vs("option",ck,ee(k("check_exclusion.none")),1),Vs("option",uk,ee(k("check_exclusion.exclude_all_alerts")),1),Vs("option",dk,ee(k("check_exclusion.spacing_bar")),1),(Ts(!0),Us($s,null,Al(e.flow_alert_types,(e=>(Ts(),Us($s,null,[null!=e?(Ts(),Us("option",{key:0,value:e.alert_id},ee(e.label),9,pk)):Js("v-if",!0)],64)))),256))],512),[[jr,d.value]])])])]),"ip"==s.value?(Ts(),Us("div",_k,[Vs("div",fk,[Vs("label",hk,[Vs("b",null,ee(k("check_exclusion.ip_address")),1)]),Vs("div",mk,[yl(Vs("input",{pattern:yn(m),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[4]||(n[4]=e=>i.value=e)},null,8,gk),[[Mr,i.value]])])])])):Js("v-if",!0),"network"==s.value?(Ts(),Us("div",vk,[Vs("div",bk,[Vs("label",yk,[Vs("b",null,ee(k("check_exclusion.network")),1)]),Vs("div",wk,[yl(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:yn(m),"onUpdate:modelValue":n[5]||(n[5]=e=>r.value=e)},null,8,xk),[[Mr,r.value]])]),Vs("div",kk,[$k,yl(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":n[6]||(n[6]=e=>p.value=e)},null,512),[[Mr,p.value]])])])])):Js("v-if",!0),Vs("div",Sk,[Vs("label",Ck,[Vs("b",null,ee(k("vlan")),1)]),Vs("div",Nk,[yl(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":n[7]||(n[7]=e=>o.value=e),class:"form-control"},null,512),[[Mr,o.value]])])])],64)):Js("v-if",!0),Js(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ts(),Us($s,{key:1},[Js(" modal domain_names"),Vs("div",null,[Vs("div",Ak,[Vs("label",Ek,["domain_names"==e.alert_exclusions_page?(Ts(),Us("b",Tk,ee(k("check_exclusion.domain")),1)):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ts(),Us("b",Pk,ee(k("check_exclusion.tls_certificate")),1)):Js("v-if",!0)]),Vs("div",Ik,["domain_names"==e.alert_exclusions_page?yl((Ts(),Us("input",{key:0,placeholder:"",pattern:yn(g),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e)},null,8,Mk)),[[Mr,c.value]]):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?yl((Ts(),Us("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:yn(v),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[9]||(n[9]=e=>c.value=e)},null,8,Ok)),[[Mr,c.value]]):Js("v-if",!0)])])])],64)):Js("v-if",!0),Js(" modal comment"),Uk,Vs("div",Fk,[Vs("div",null,[Vs("label",jk,[Vs("b",null,ee(k("show_alerts.add_a_comment")),1)])]),Vs("div",Lk,[yl(Vs("textarea",{placeholder:yn(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":n[10]||(n[10]=e=>_.value=e),maxlength:"450"},null,8,Dk),[[Mr,_.value]])])])])),footer:ma((()=>[Vs("button",{type:"button",disabled:y(),onClick:x,class:"btn btn-primary"},ee(k("add")),9,Rk)])),_:1},512))}};fp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),zk.__scopeId="data-v-7e5acce0",zk.__file="http_src/vue/modal-add-check-exclusion.vue";const Bk=e=>(_a("data-v-19c5b1f1"),e=e(),fa(),e),Vk=["innerHTML"],qk={class:"form-group mb-3"},Hk=["innerHTML"],Gk={class:"alert_label"},Wk={class:"form-check"},Kk={class:"form-check-label"},Jk={key:0,class:"form-check"},Yk={class:"form-check-label"},Zk={class:"form-check"},Xk={class:"form-check-label"},Qk={class:"form-check"},e$={class:"form-check-label"},t$={key:0,class:"exclude-domain-certificate"},n$={class:"alert_label"},a$={key:0,class:"form-check"},l$={class:"form-check-label whitespace"},s$=["pattern","disabled"],i$={key:1,class:"form-check"},r$={class:"form-check-label whitespace"},o$=["disabled","pattern"],c$={key:0,class:"form-group row"},u$={class:"col-form-label"},d$={class:"mt-1"},p$=["placeholder"],_$={class:"separator"},f$=Bk((()=>Vs("hr",{class:"separator"},null,-1))),h$={class:"form-group mb-3"},m$={class:"custom-control custom-switch"},g$={class:"custom-control-label"},v$={class:"alert alert-warning border",role:"alert"},b$=["disabled"];var y$={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:n}){const a=e,l=hn(null),s=hn("any"),i=hn(!0),r=hn(null),o=hn(null),c=hn(null),u=i18n("details.comment_placeholder");Ua((()=>a.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,r.value=""==e.info?.value?null:e.info?.value,o.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=()=>{if("domain"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}if("certificate"==s.value){let e=new RegExp(m);return null==o.value||0==e.test(o.value)}return!1},p=yi((()=>a.alert?.alert_name)),_=yi((()=>{let e={value:"",label:""};if("host"!=a.page||null==a.alert)return e;let t=a.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),f=yi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=a.page||null==a.alert)return e;let t=a.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let n=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(n=`${n}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),n!==e.cli_value&&(n=`${n} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=n,e.srv_label=l,e}));let h=NtopUtils.REGEXES.domain_name_not_strict,m=NtopUtils.REGEXES.tls_certificate;const g=()=>{let e=a.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=_.value.value:"server_host"==s.value?u=f.value.srv_value:"client_host"==s.value&&(u=f.value.cli_value),l.alert_addr=u,"flow"==e?l.flow_alert_key=a.alert.alert_id.value:"host"==e&&(l.host_alert_key=a.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=r.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=o.value),v(),n("exclude",l)},v=()=>{l.value.close()};t({show:()=>{c.value="",l.value.show()},close:v}),dl((()=>{}));const b=e=>i18n(e);return(t,n)=>(Ts(),Fs(hp,{onShowed:n[10]||(n[10]=e=>{}),ref_key:"modal_id",ref:l},{title:ma((()=>[Ws(ee(b("exclude_check"))+": ",1),Vs("span",{innerHTML:yn(p)},null,8,Vk)])),body:ma((()=>[Vs("div",qk,[Vs("div",null,[Vs("label",null,[Ws(ee(b("exclude_check"))+' "',1),Vs("b",{innerHTML:yn(p)},null,8,Hk),Ws('". '),Vs("span",Gk,ee(b("exclude_for"))+":",1)]),Vs("div",Wk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":n[0]||(n[0]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",Kk,[Vs("span",null,ee(b("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ts(),Us("div",Jk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",Yk,[Vs("span",null,ee(yn(_).label),1)])])):Js("v-if",!0),"flow"==e.page?(Ts(),Us($s,{key:1},[Vs("div",Zk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",Xk,[Vs("span",null,ee(b("client"))+": "+ee(yn(f).cli_label),1)])]),Vs("div",Qk,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":n[3]||(n[3]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",e$,[Vs("span",null,ee(b("server"))+": "+ee(yn(f).srv_label),1)])])],64)):Js("v-if",!0)]),null!=r.value||null!=o.value?(Ts(),Us("div",t$,[Vs("label",null,[Vs("span",n$,ee(b("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=r.value?(Ts(),Us("div",a$,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":n[4]||(n[4]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",l$,[Vs("span",null,ee(b("check_exclusion.domain"))+":",1)]),yl(Vs("input",{type:"text",pattern:yn(h),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":n[5]||(n[5]=e=>r.value=e),class:"form-check-label custom-width"},null,8,s$),[[Mr,r.value]])])):Js("v-if",!0),null!=o.value?(Ts(),Us("div",i$,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":n[6]||(n[6]=e=>s.value=e)},null,512),[[Fr,s.value]]),Vs("label",r$,[Vs("span",null,ee(b("check_exclusion.tls_certificate"))+":",1)]),yl(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":n[7]||(n[7]=e=>o.value=e),pattern:yn(m),required:"",class:"form-check-label custom-width"},null,8,o$),[[Mr,o.value]])])):Js("v-if",!0)])):Js("v-if",!0)]),"any"!=s.value?(Ts(),Us("div",c$,[Vs("div",null,[Vs("label",u$,[Vs("b",null,ee(b("show_alerts.add_a_comment")),1)])]),Vs("div",d$,[yl(Vs("textarea",{placeholder:yn(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e),maxlength:"450"},null,8,p$),[[Mr,c.value]])])])):Js("v-if",!0),yl(Vs("hr",_$,null,512),[[Kr,i.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ts(),Us($s,{key:1},[yl(Vs("div",{class:"message alert alert-danger"},ee(b("show_alerts.confirm_delete_filtered_alerts")),513),[[Kr,i.value]]),f$,Vs("div",h$,[Vs("div",m$,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":n[9]||(n[9]=e=>i.value=e)},null,512),[[Or,i.value]]),Vs("label",g$,ee(b("delete_disabled_alerts")),1)])])],64)):Js("v-if",!0),Vs("div",v$,ee(b("show_alerts.confirm_filter_alert")),1)])),footer:ma((()=>[Vs("button",{type:"button",onClick:g,disabled:d(),class:"btn btn-warning"},ee(b("filter")),9,b$)])),_:1},512))}};fp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),y$.__scopeId="data-v-19c5b1f1",y$.__file="http_src/vue/modal-alerts-filter.vue";let w$={PageStats:Jh,PageAssetTable:am,PagePeriodicityTable:mm,PageServiceTable:Mm,PageServiceMap:Zm,PagePeriodicityMap:gg,PageAssetMap:jg,PageDeviceExclusions:Vv,PageHostTLS:tb,PageHostSSH:cb,PageHomeMap:gb,PageSankey:yb,PageHostRules:Ky,PageAlertAnalysis:hw,PageHostMap:Cw,PageVLANPortsFlowSankey:Dw,PageHostDetailsApplications:xb,PageHostDetailsTraffic:zb,PageHostDetailsPackets:Yb,PageHostDetailsFlowSankey:by,PageHostDetailsPorts:aw,PageAggregatedLiveFlows:Hw,AlertInfo:wh,Chart:Od,Datatable:Sh,DateTimeRangePicker:Rd,NetworkMap:Km,RangePicker:bx,PageNavbar:nv,SimpleTable:Ix,SelectSearch:Dd,TabList:Yh,Sankey:qx,NoteList:wy,Loading:Xb,ListTimeseries:m_,Modal:hp,ModalAddCheckExclusion:zk,ModalAlertsFilter:y$,ModalFilters:Gw,ModalTimeseries:Wf,ModalTrafficExtraction:Kf,ModalDeleteConfirm:tm,ModalSnapshot:Yp,ModalAddDeviceExclusion:Ev,ModalEditDeviceExclusion:Bv,ModalAddHostRules:Dy,Vue:Md};window.ntopVue=w$;var x$=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function k$(){const e=e=>$(x$[3])[x$[2]]($(e)[x$[1]]())[x$[0]]();let t=x$[4];const n=(()=>{let n=$(t),a=i18n(x$[5])[x$[7]](x$[6]);$(x$[8],n)[x$[0]](a[0]),$(x$[9],n)[x$[0]](a[1]);let l=`${x$[10]}${i18n(x$[11])}${x$[12]}`;return $(x$[13],n)[x$[0]](l),e(n)})(),a=()=>{$(x$[14])[x$[2]](n)};a();const l=()=>$(x$[16])[x$[15]]()[x$[15]]()[x$[15]]()[x$[15]]()[x$[15]]();ntopng_events_manager[x$[23]](x$[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=l();if(null==t)return!1;let a=t[x$[1]]();$(x$[16],a)[x$[0]](x$[17]),$(x$[18],a)[x$[0]](x$[17]);const s=e(a);return n===s})()&&((()=>{let e=l();null!=e&&e[x$[19]]()})(),a()),(e=>{$(x$[16])[x$[0]](e[x$[20]]),$(x$[18])[x$[0]](e[x$[21]])})(t)}))}$(document)[x$[24]]((()=>k$()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnRvcG5nLmpzIiwic291cmNlcyI6WyIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbnRvcC11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9lYnBmLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2dyYXBoL2dyYXBoLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21vZGFsL21vZGFsLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy91dGlsaXRpZXMuanMiLCIuLi8uLi9odHRwX3NyYy92YWxpZGF0b3JzL250b3BuZy12YWxpZGF0b3JzLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmFsaWRhdG9ycy92YWxpZGF0b3JzLmpzIiwiLi4vLi4vaHR0cF9zcmMvc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvY2hhcnRzL3BpZS1jaGFydC5qcyIsIi4uLy4uL2h0dHBfc3JjL3NlcnZpY2VzL3NlcnZpY2VzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5wcm9kLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmlld3MvcHVibGljL2Jsb2cvYmxvZy1ub3RpZmljYXRpb24tdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvY2hhcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NlbGVjdC1zZWFyY2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJjNmYxNDMwJmxhbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFkZWZmZTAmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1zbmFwc2hvdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbGlzdC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9ob3N0X3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRpbWVzZXJpZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYmU5NzhjNCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRvd25sb2FkLWZpbGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRlOTgxMWE4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvZGF0YXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXN0YXRzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90YWItbGlzdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFiLWxpc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWUwNWEzMzdhJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU3Y2U3ZjYwJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9M2RlYmM3YTMmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zZXJ2aWNlLXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MWI1ZGYyNSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL25ldHdvcmstbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZmMDhiNTczJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MDBhYjUxZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYXNzZXQtbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjliMjI4NmUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLW5hdmJhci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uYXZiYXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTAzNDQwNDllJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YjQzNWYzYWEmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdGxzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdGxzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZWIyNDdiNyZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1zc2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1zc2gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE1YmExMzc4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob21lLW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob21lLW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmZiYmViY2YmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtZGV0YWlscy1hcHBsaWNhdGlvbnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA3YmVlMTQyJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtdHJhZmZpYy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtcGFja2V0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbG9hZGluZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvc2Fua2V5XzMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21hcC9zYW5rZXlfdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL25vdGUtbGlzdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1ydWxlcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtcG9ydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtYW5hbHlzaXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utdmxhbi1wb3J0cy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWdncmVnYXRlZC1saXZlLWZsb3dzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWx0ZXJzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWx0ZXJzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMTE5YzgzZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3JhbmdlLXBpY2tlci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcmFuZ2UtcGlja2VyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hYWVlNTllYSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NpbXBsZS10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvc2ltcGxlLXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MmFlODk2MCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWNoZWNrLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWxlcnRzLWZpbHRlci52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbnRvcF92dWUuanMiLCIuLi8uLi9odHRwX3NyYy9leHRlbnNpb25zL2NoYXJ0X2NvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMDE0LTIwIC0gbnRvcC5vcmdcbkRhdGUucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHsgLy9hdXRob3I6IG1laXp6XG5cdHZhciBvID0ge1xuXHRcdFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSwgLy9tb250aFxuXHRcdFwiZCtcIjogdGhpcy5nZXREYXRlKCksICAgIC8vZGF5XG5cdFx0XCJoK1wiOiB0aGlzLmdldEhvdXJzKCksICAgLy9ob3VyXG5cdFx0XCJtK1wiOiB0aGlzLmdldE1pbnV0ZXMoKSwgLy9taW51dGVcblx0XHRcInMrXCI6IHRoaXMuZ2V0U2Vjb25kcygpLCAvL3NlY29uZFxuXHRcdFwicStcIjogTWF0aC5mbG9vcigodGhpcy5nZXRNb250aCgpICsgMykgLyAzKSwgIC8vcXVhcnRlclxuXHRcdFwiU1wiOiB0aGlzLmdldE1pbGxpc2Vjb25kcygpIC8vbWlsbGlzZWNvbmRcblx0fVxuXG5cdGlmICgvKHkrKS8udGVzdChmb3JtYXQpKSBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShSZWdFeHAuJDEsXG5cdFx0KHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xuXHRmb3IgKHZhciBrIGluIG8pIGlmIChuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS50ZXN0KGZvcm1hdCkpXG5cdFx0Zm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoUmVnRXhwLiQxLFxuXHRcdFx0UmVnRXhwLiQxLmxlbmd0aCA9PSAxID8gb1trXSA6XG5cdFx0XHRcdChcIjAwXCIgKyBvW2tdKS5zdWJzdHIoKFwiXCIgKyBvW2tdKS5sZW5ndGgpKTtcblx0cmV0dXJuIGZvcm1hdDtcbn1cblxuLy8gRXh0ZW5kZWQgZGlzYWJsZSBmdW5jdGlvbiBcbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRkaXNhYmxlOiBmdW5jdGlvbiAoc3RhdGUpIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyk7XG5cdFx0XHRpZiAoJHRoaXMuaXMoJ2lucHV0LCBidXR0b24sIHRleHRhcmVhLCBzZWxlY3QnKSlcblx0XHRcdFx0dGhpcy5kaXNhYmxlZCA9IHN0YXRlO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHQkdGhpcy50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBzdGF0ZSk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5jb25zdCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSA9IDAuMDA1O1xuXG5jb25zdCBiYWNrdGljayA9ICdgJztcbmNvbnN0IFJFR0VYRVMgPSB7XG5cdGlwdjQ6IFN0cmluZy5yYXdgXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJGAsXG5cdGlwdjY6IFN0cmluZy5yYXdgXigoKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pOil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkkfF5cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKikkYCxcblx0ZG9tYWluTmFtZTogU3RyaW5nLnJhd2BeKChbYS16QS1aXXsxfSl8KFthLXpBLVpdezF9W2EtekEtWl17MX0pfChbYS16QS1aXXsxfVswLTldezF9KXwoWzAtOV17MX1bYS16QS1aXXsxfSl8KFthLXpBLVowLTldWy1fXFwuYS16QS1aMC05XXsxLDYxfVthLXpBLVowLTldKSlcXC4oW2EtekEtWl17MiwxM318W2EtekEtWjAtOS1dezIsMzB9XFwuW2EtekEtWl17MiwzfSlgLFxuXHRwb3J0OiBTdHJpbmcucmF3YF4oWzAtOV17MSw0fXxbMS01XVswLTldezR9fDZbMC00XVswLTldezN9fDY1WzAtNF1bMC05XXsyfXw2NTVbMC0yXVswLTldfDY1NTNbMC01XSkkYCxcblx0bGF0ZW5jeTogU3RyaW5nLnJhd2BeKFswLTldKlsuXSk/WzAtOV0rJGAsXG5cdHVybDogU3RyaW5nLnJhd2BeKGh0dHBzP1xcOlxcL1xcL1teXFwvXFxzXSsoXFwvLiopPykkYCxcblx0ZW1haWxVcmw6IFN0cmluZy5yYXdgXnNtdHBzPzpcXC9cXC9bLWEtekEtWjAtOTouXXsxLDI1Nn0rJGAsXG5cdG1hY0FkZHJlc3M6IFN0cmluZy5yYXdgXihbMC05QS1GYS1mXXsyfTopezV9KFswLTlBLUZhLWZdezJ9KSRgLFxuXHRob3N0bmFtZTogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS5fOlxcLV17MywyNTB9fF5bYS16QS1aMC05Ll86XFwtXXszLDI1MH1AWzAtOV17MCw1fWAsXG5cdHVzZXJuYW1lOiBTdHJpbmcucmF3YF5bYS16QS1aMC05Ll9AIS0/XXszLDMwfSRgLFxuXHRzaW5nbGV3b3JkOiBTdHJpbmcucmF3YF4oPz1bYS16QS1aMC05Ll86XFwtXXszLDI1M30kKSg/IS4qW18uOlxcLV17Mn0pW15fLjpcXC1dLipbXl8uOlxcLV0kYCxcbiAgICBlbWFpbDogU3RyaW5nLnJhd2BeKFthLXpBLVowLTkuISMkJSYnKistLz0/Xl8ke2JhY2t0aWNrfXt8fX5dK0BbYS16QS1aMC05LV0rKD86XFwuW2EtekEtWjAtOS1dKykqKSRgLFxuXHRodHRwczogU3RyaW5nLnJhd2BeaHR0cHM/OlxcL1xcLy4rJGAsXG5cdHRva2VuOiBTdHJpbmcucmF3YF5bMC05YS1mXXszMn1gLFxuXHRzY29yZTogU3RyaW5nLnJhd2BeWzAtOV17MSw1fWAsXG5cdHRlbGVncmFtX2NoYW5uZWw6IFN0cmluZy5yYXdgXlswLTlcXC1dezEsMTV9YCxcblx0cGFzc3dvcmQ6IFN0cmluZy5yYXdgXltcXHdcXC8kIVxcLygpPT9eKkBfLV17NSwzMX0kYCxcblx0dGxzX2NlcnRpZmljYXRlOiBTdHJpbmcucmF3YF5bXj0sXSs9W149LF0rKCxcXHNbXj0sXSs9W149LF0rKSokYCxcblx0ZG9tYWluX25hbWVfbm90X3N0cmljdDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOVxcLV9+XSsoKFxcLlthLXpBLVowLTlcXC1ffl0rKSspJGAsXG5cdG5vbl9xdW90ZWRfdGV4dDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS4tX10rJGAsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdG9wVXRpbHMge1xuXG4gIC8qIFNob3cgYW4gb3ZlcmxheSB0byBoaWRlIGxvYWRpbmcgKi9cbiAgc3RhdGljIHRvZ2dsZU92ZXJsYXlzKHRpbWUgPSA1MDApIHtcbiAgICAkKGAub3ZlcmxheWApLnRvZ2dsZSh0aW1lKTtcbiAgfVxuICBcbiAgc3RhdGljIHNob3dPdmVybGF5cyh0aW1lID0gNTAwKSB7XG4gICAgJChgLm92ZXJsYXlgKS5mYWRlSW4odGltZSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBoaWRlT3ZlcmxheXModGltZSA9IDUwMCkge1xuICAgICQoYC5vdmVybGF5YCkuZmFkZU91dCh0aW1lKTtcbiAgfVxuXG5cdHN0YXRpYyBnZXQgUkVHRVhFUygpIHtcblx0XHRyZXR1cm4gUkVHRVhFUztcblx0fVxuXG5cdHN0YXRpYyBnZXRJUHY0UmVnZXhXaXRoQ0lEUigpIHtcblx0XHRjb25zdCBsZW5ndGggPSBSRUdFWEVTLmlwdjQubGVuZ3RoO1xuXHRcdHJldHVybiBgJHtSRUdFWEVTLmlwdjQuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIDEpfShcXFxcLz8pKFxcXFxiKFswLTldfFsxMl1bMC05XXwzWzAtMl0pP1xcXFxiKSRgO1xuXHR9XG5cblx0c3RhdGljIGdldElQdjZSZWdleFdpdGhDSURSKCkge1xuXHRcdGNvbnN0IGxlbmd0aCA9IFJFR0VYRVMuaXB2Ni5sZW5ndGg7XG5cdFx0cmV0dXJuIGAke1JFR0VYRVMuaXB2Ni5zdWJzdHJpbmcoMCwgbGVuZ3RoIC0gMSl9KFxcXFwvPylcXFxcYihbMC05XXxbMS05XVswLTldfDFbMDFdWzAtOV18MTJbMC04XSk/XFxcXGIkYDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlIGEgaG9zdG5hbWUgYnkgZG9pbmcgYSBETlMgUmVzb2x2ZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBob3N0bmFtZSB0byByZXNvbHZlXG5cdCAqL1xuXHRzdGF0aWMgYXN5bmMgcmVzb2x2ZUROUyhob3N0bmFtZSA9IFwibnRvcC5vcmdcIikge1xuXG5cdFx0Ly8gcmVzb2x2ZSB0aGUgaG9zdG5hbWUgYnkgZG9pbmcgYSBmZXRjaCByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBmZXRjaChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2Rucy9yZXNvbHZlLmx1YT9ob3N0bmFtZT0ke2hvc3RuYW1lfWApO1xuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHR9XG5cdFx0Y2F0Y2ggKGVycikge1xuXHRcdFx0Ly8gcHJpbnRzIG91dCB0aGUgZXJyb3IgaWYgdGhlIHJlcXVlc3QgZmFpbHNcblx0XHRcdGNvbnNvbGUuZXJyb3IoYFNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gcmVzb2x2aW5nIGhvc3RuYW1lOiAke2Vycn1gKVxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSByZXF1ZXN0IGhhcyBmYWlsZWQgcmV0dXJuIGEgcGxhY2Vob2xkZXIgcmVzcG9uc2Vcblx0XHQvLyBpbmRpY2F0aW5nIHRoZSBmYWlsdXJlXG5cdFx0cmV0dXJuIHsgcmM6IC0xLCByY19zdHI6IFwiRkFJTEVEX0hUVFBfUkVRVUVTVFwiIH07XG5cdH1cblxuXHQvKipcblx0ICogUmVwbGFjZSB0aGUgaW5wdXRzIHdoaWNoIGNvbnRhaW4gdGhlIFtkYXRhLXBhdHRlcm5dIGF0dHJpYnV0ZVxuXHQgKiB3aXRoIHRoZSBbcGF0dGVybl0gYXR0cmlidXRlLlxuXHQgKi9cblx0c3RhdGljIGluaXREYXRhUGF0dGVybnMoKSB7XG5cdFx0Ly8gZm9yIGVhY2ggaW5wdXQgd2l0aCB0aGUgZGF0YS1wYXR0ZXJuIGF0dHJpYnV0ZVxuXHRcdC8vIHN1YnN0aXR1dGUgdGhlIGRhdGEtcGF0dGVybiB3aXRoIHRoZSByaWdodCByZWdleGVzXG5cdFx0JChgaW5wdXRbZGF0YS1wYXR0ZXJuXWApLmVhY2goZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpZiB0aGUgcGF0dGVybiBpcyBlbXB0eSB0aGVuIHByaW50IGEgd2FybiBpbnNpZGUgdGhlIGNvbnNvbGVcblx0XHRcdGNvbnN0IGRhdGFQYXR0ZXJuID0gJCh0aGlzKS5kYXRhKCdwYXR0ZXJuJyk7XG5cdFx0XHRpZiAoIWRhdGFQYXR0ZXJuKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgQW4gZW1wdHkgZGF0YS1wYXR0ZXJuIG9uIGFuIGlucHV0IHdhcyBmb3VuZCFgLCB0aGlzKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBidWlsZCB0aGUgcmVnZXhwIHBhdHRlcm4gZm9yIHRoZSBpbnB1dFxuXHRcdFx0Y29uc3QgcGF0dGVybiA9IGRhdGFQYXR0ZXJuLnNwbGl0KCd8JykubWFwKHAgPT4gUkVHRVhFU1twXS50b1N0cmluZygpKS5qb2luKCd8Jyk7XG5cdFx0XHQvLyBsb2FkIHRoZSBwYXR0ZXJuXG5cdFx0XHQkKHRoaXMpLmF0dHIoJ3BhdHRlcm4nLCBwYXR0ZXJuKTtcblx0XHRcdC8vIHJlbW92ZSB0aGUgZGF0YS1wYXR0ZXJuIGZyb20gdGhlIGlucHV0XG5cdFx0XHQkKHRoaXMpLnJlbW92ZUF0dHIoJ2RhdGEtcGF0dGVybicpO1xuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGlzX2dvb2RfaXB2NChpcHY0KSB7XG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY0KS50ZXN0KGlwdjQpO1xuXHR9XG5cblx0c3RhdGljIGlzX2dvb2RfaXB2NihpcHY2KSB7XG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY2KS50ZXN0KGlwdjYpO1xuXHR9XG5cblx0c3RhdGljIGlzX21hY19hZGRyZXNzKG1hYykge1xuXHRcdHJldHVybiBuZXcgUmVnRXhwKFJFR0VYRVMubWFjQWRkcmVzcykudGVzdChtYWMpO1xuXHR9XG5cblx0c3RhdGljIGlzTnVtZXJpYyh2YWx1ZSkge1xuXHRcdHJldHVybiAvXlxcZCskLy50ZXN0KHZhbHVlKTtcblx0fVxuXG5cdHN0YXRpYyBpc19uZXR3b3JrX21hc2sod2hhdCwgb3B0aW9uYWxfbWFzaykge1xuXHRcdHZhciBlbGVtcyA9IHdoYXQuc3BsaXQoXCIvXCIpO1xuXHRcdHZhciBtYXNrID0gbnVsbDtcblx0XHR2YXIgaXBfYWRkcjtcblxuXHRcdGlmIChlbGVtcy5sZW5ndGggIT0gMikge1xuXHRcdFx0aWYgKCFvcHRpb25hbF9tYXNrKVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXBfYWRkciA9IHdoYXQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlwX2FkZHIgPSBlbGVtc1swXTtcblxuXHRcdFx0aWYgKCFOdG9wVXRpbHMuaXNOdW1lcmljKGVsZW1zWzFdKSlcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdG1hc2sgPSBwYXJzZUludChlbGVtc1sxXSk7XG5cblx0XHRcdGlmIChtYXNrIDwgMClcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKE50b3BVdGlscy5pc19nb29kX2lwdjQoaXBfYWRkcikpIHtcblx0XHRcdGlmIChtYXNrID09PSBudWxsKVxuXHRcdFx0XHRtYXNrID0gMzI7XG5cdFx0XHRlbHNlIGlmIChtYXNrID4gMzIpXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcImlwdjRcIixcblx0XHRcdFx0YWRkcmVzczogaXBfYWRkcixcblx0XHRcdFx0bWFzazogbWFza1xuXHRcdFx0fTtcblx0XHR9IGVsc2UgaWYgKE50b3BVdGlscy5pc19nb29kX2lwdjYoZWxlbXNbMF0pKSB7XG5cdFx0XHRpZiAobWFzayA9PT0gbnVsbClcblx0XHRcdFx0bWFzayA9IDEyODtcblx0XHRcdGVsc2UgaWYgKG1hc2sgPiAxMjgpXG5cdFx0XHRcdHJldHVybiAoZmFsc2UpO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOiBcImlwdjZcIixcblx0XHRcdFx0YWRkcmVzczogaXBfYWRkcixcblx0XHRcdFx0bWFzazogbWFza1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHN0YXRpYyBmYml0cyhiaXRzKSB7XG5cdFx0Y29uc3Qgc2l6ZXMgPSBbJ2JwcycsICdLYnBzJywgJ01icHMnLCAnR2JwcycsICdUYnBzJ107XG5cblx0XHRpZiAodHlwZW9mIChiaXRzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdGlmIChiaXRzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChiaXRzID4gMCkgJiYgKGJpdHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBicHMnKTtcblx0XHR2YXIgYml0c19sb2cxMDAwID0gTWF0aC5sb2coYml0cykgLyBNYXRoLmxvZygxMDAwKVxuXHRcdHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihiaXRzX2xvZzEwMDApKTtcblx0XHRpZiAoaSA8IDAgfHwgaXNOYU4oaSkpIHtcblx0XHRcdGkgPSAwO1xuXHRcdH0gZWxzZSBpZiAoaSA+PSBzaXplcy5sZW5ndGgpIHsgLy8gcHJldmVudHMgb3ZlcmZsb3dzXG5cdFx0XHRyZXR1cm4gXCI+IFwiICsgc2l6ZXNbc2l6ZXMubGVuZ3RoIC0gMV1cblx0XHR9XG5cblx0XHRpZiAoaSA8PSAxKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZChiaXRzIC8gTWF0aC5wb3coMTAwMCwgaSkgKiAxMDApIC8gMTAwICsgJyAnICsgc2l6ZXNbaV1cblx0XHR9IFxuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIHJldCA9IHBhcnNlRmxvYXQoYml0cyAvIE1hdGgucG93KDEwMDAsIGkpKS50b0ZpeGVkKDIpXG5cdFx0XHRpZiAocmV0ICUgMSA9PSAwKVxuXHRcdFx0XHRyZXQgPSBNYXRoLnJvdW5kKHJldClcblx0XHRcdHJldHVybiByZXQgKyAnICcgKyBzaXplc1tpXVxuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBleHBvcnRfcmF0ZShlcHMpIHtcblx0XHRpZiAodHlwZW9mIChlcHMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHNpemVzID0gWydleHAvcycsICdLZXhwL3MnXTtcblx0XHRpZiAoZXBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChlcHMgPiAwKSAmJiAoZXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgZXhwcy9zJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGVwcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBleHBvcnRzX2Zvcm1hdChleHBvcnRzKSB7XG5cdFx0aWYgKHR5cGVvZiAoZXhwb3J0cykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgZXhwb3J0c19sYWJlbCA9IGkxOG5fZXh0LmV4cG9ydHMudG9Mb3dlckNhc2UoKTtcblxuXHRcdHZhciBzaXplcyA9IFtleHBvcnRzX2xhYmVsLCAnSyAnICsgZXhwb3J0c19sYWJlbF07XG5cdFx0aWYgKGV4cG9ydHMgPT0gMCkgcmV0dXJuICcwJztcblx0XHRpZiAoKGV4cG9ydHMgPiAwKSAmJiAoZXhwb3J0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGV4cHMvcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShleHBvcnRzLCBzaXplcywgMTAwMCk7XG5cblx0XHQvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcblx0XHRyZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuXHR9XG5cblx0c3RhdGljIGZiaXRzX2Zyb21fYnl0ZXMoYnl0ZXMpIHtcblx0XHRpZiAodHlwZW9mIChieXRlcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cdFx0cmV0dXJuIChOdG9wVXRpbHMuZmJpdHMoYnl0ZXMgKiA4KSk7XG5cdH1cblxuXHRzdGF0aWMgZnBhY2tldHMocHBzKSB7XG5cdFx0aWYgKHR5cGVvZiAocHBzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciBzaXplcyA9IFsncHBzJywgJ0twcHMnLCAnTXBwcycsICdHcHBzJywgJ1RwcHMnXTtcblx0XHRpZiAocHBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHBzJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKHBwcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmcG9pbnRzKHBwcykge1xuXHRcdGlmICh0eXBlb2YgKHBwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgc2l6ZXMgPSBbJ3B0L3MnLCAnS3B0L3MnLCAnTXB0L3MnLCAnR3B0L3MnLCAnVHB0L3MnXTtcblx0XHRpZiAocHBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHQvcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShwcHMsIHNpemVzLCAxMDAwKTtcblxuXHRcdC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZmZsb3dzKGZwcykge1xuXHRcdGlmICh0eXBlb2YgKGZwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHR2YXIgc2l6ZXMgPSBbJ2ZwcycsICdLZnBzJywgJ01mcHMnLCAnR2ZwcycsICdUZnBzJ107XG5cdFx0aWYgKGZwcyA9PSAwKSByZXR1cm4gJzAnO1xuXHRcdGlmICgoZnBzID4gMCkgJiYgKGZwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGZwcycpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShmcHMsIHNpemVzLCAxMDAwKTtcblxuXHRcdC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZm1zZ3MobXBzKSB7XG5cdFx0aWYgKHR5cGVvZiAobXBzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciBzaXplcyA9IFsnbXNnL3MnLCAnS21zZy9zJywgJ01zZy9zJywgJ0dtc2cvcycsICdUbXNnL3MnXTtcblx0XHRpZiAobXBzID09IDApIHJldHVybiAnMCc7XG5cdFx0aWYgKChtcHMgPiAwKSAmJiAobXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgbXBzJyk7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKG1wcywgc2l6ZXMsIDEwMDApO1xuXG5cdFx0Ly8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG5cdFx0cmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmbWlsbGlzKG1zKSB7XG5cblx0XHRpZiAobXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuICctJztcblx0XHRjb25zdCBzaXplcyA9IFsnbXMnXTtcblx0XHRjb25zdCByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShtcywgc2l6ZXMsIDEwMDApO1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG5cdH1cblxuXHRzdGF0aWMgZm5vbmUodmFsKSB7XG5cblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiAnLSc7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQodmFsICogMTAwKSAvIDEwMDtcblx0fVxuXG5cdHN0YXRpYyBmYWxlcnRzKGFwcykge1xuXHRcdGlmICh0eXBlb2YgKGFwcykgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHQvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcblx0XHRyZXR1cm4gTWF0aC5yb3VuZChhcHMgKiAxMDApIC8gMTAwICsgJyBhbGVydHMvcyc7XG5cdH1cblxuXHRzdGF0aWMgZmludCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHRcdHJldHVybiBcIi1cIjtcblxuXHRcdHZhciB4ID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG5cdH1cblxuXHRzdGF0aWMgZmZsb2F0KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiAodmFsdWUpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHggPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMC47XG5cdFx0cmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG5cdH1cblxuXHRzdGF0aWMgZnBlcmNlbnQodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwidW5kZWZpbmVkXCIpXG5cdFx0XHRyZXR1cm4gXCItXCI7XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCkgLyAxMDAgKyBcIiVcIjtcblx0fVxuXG5cdHN0YXRpYyBmZGF0ZSh3aGVuKSB7XG5cdFx0dmFyIGVwb2NoID0gd2hlbiAqIDEwMDA7XG5cdFx0dmFyIGQgPSBuZXcgRGF0ZShlcG9jaCk7XG5cblx0XHRyZXR1cm4gKGQpO1xuXHR9XG5cblx0c3RhdGljIGNhcGl0YWxpc2VGaXJzdExldHRlcihzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuXHR9XG5cblx0c3RhdGljIGdldF90cmVuZChhY3R1YWwsIGJlZm9yZSkge1xuXHRcdGlmICgoYWN0dWFsID09PSB1bmRlZmluZWQpIHx8IChiZWZvcmUgPT09IHVuZGVmaW5lZCkgfHwgKGFjdHVhbCA9PSBiZWZvcmUpKSB7XG5cdFx0XHRyZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1taW51c1xcXCI+PC9pPlwiKTtcblx0XHR9IGVsc2UgaWYgKGFjdHVhbCA+IGJlZm9yZSkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiPjwvaT5cIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LWRvd25cXFwiPjwvaT5cIik7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGFiYnJldmlhdGVTdHJpbmcoc3RyLCBsZW4pIHtcblx0XHRpZiAoIXN0cilcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdGlmIChzdHIubGVuZ3RoIDwgbGVuKVxuXHRcdFx0cmV0dXJuIHN0cjtcblx0XHRyZXR1cm4gc3RyLnN1YnN0cmluZygwLCBsZW4pICsgXCIuLi5cIjtcblx0fVxuXG5cdHN0YXRpYyB0b0ZpeGVkMihudW0pIHtcblx0XHRpZiAoIW51bSkgcmV0dXJuIFwiXCI7XG5cdFx0cmV0dXJuIG51bS50b0ZpeGVkKDIpO1xuXHR9XG5cblx0Ly8gQ29udmVydCBieXRlcyB0byBodW1hbiByZWFkYWJsZSBmb3JtYXRcblx0c3RhdGljIGJ5dGVzVG9TaXplKGJ5dGVzKSB7XG5cdFx0aWYgKHR5cGVvZiAoYnl0ZXMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdFx0cmV0dXJuIFwiLVwiO1xuXG5cdFx0dmFyIHByZWNpc2lvbiA9IDI7XG5cdFx0dmFyIGtpbG9ieXRlID0gMTAyNDtcblx0XHR2YXIgbWVnYWJ5dGUgPSBraWxvYnl0ZSAqIDEwMjQ7XG5cdFx0dmFyIGdpZ2FieXRlID0gbWVnYWJ5dGUgKiAxMDI0O1xuXHRcdHZhciB0ZXJhYnl0ZSA9IGdpZ2FieXRlICogMTAyNDtcblxuXHRcdGlmICgoYnl0ZXMgPj0gMCkgJiYgKGJ5dGVzIDwga2lsb2J5dGUpKVxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQoYnl0ZXMudG9GaXhlZChwcmVjaXNpb24pKSArIFwiIEJ5dGVzXCI7XG5cdFx0ZWxzZSBpZiAoKGJ5dGVzID49IGtpbG9ieXRlKSAmJiAoYnl0ZXMgPCBtZWdhYnl0ZSkpXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBraWxvYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgS0InO1xuXHRcdGVsc2UgaWYgKChieXRlcyA+PSBtZWdhYnl0ZSkgJiYgKGJ5dGVzIDwgZ2lnYWJ5dGUpKVxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gbWVnYWJ5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIE1CJztcblx0XHRlbHNlIGlmICgoYnl0ZXMgPj0gZ2lnYWJ5dGUpICYmIChieXRlcyA8IHRlcmFieXRlKSlcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIGdpZ2FieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBHQic7XG5cdFx0ZWxzZSBpZiAoYnl0ZXMgPj0gdGVyYWJ5dGUpXG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyB0ZXJhYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgVEInO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBwYXJzZUZsb2F0KGJ5dGVzLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIEJ5dGVzJztcblx0fVxuXG5cdHN0YXRpYyBkcmF3VHJlbmQoY3VycmVudCwgbGFzdCwgd2l0aENvbG9yKSB7XG5cdFx0aWYgKGN1cnJlbnQgPT0gbGFzdCkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtbWludXNcXFwiPjwvaT5cIik7XG5cdFx0fSBlbHNlIGlmIChjdXJyZW50ID4gbGFzdCkge1xuXHRcdFx0cmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiXCIgKyB3aXRoQ29sb3IgKyBcIj48L2k+XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy1kb3duXFxcIj48L2k+XCIpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyB0b2dnbGVBbGxUYWJzKGVuYWJsZWQpIHtcblx0XHRpZiAoZW5hYmxlZCA9PT0gdHJ1ZSlcblx0XHRcdCQoXCIjaGlzdG9yaWNhbC10YWJzLWNvbnRhaW5lclwiKS5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKS5maW5kKFwiYVwiKS5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJ0YWJcIik7XG5cdFx0ZWxzZVxuXHRcdFx0JChcIiNoaXN0b3JpY2FsLXRhYnMtY29udGFpbmVyXCIpLmZpbmQoXCJsaVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLmZpbmQoXCJhXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXRvZ2dsZVwiKTtcblx0fVxuXG5cdHN0YXRpYyBkaXNhYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcblx0XHQkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0JCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG5cdFx0fSk7XG5cdFx0TnRvcFV0aWxzLnRvZ2dsZUFsbFRhYnMoZmFsc2UpXG5cdH1cblxuXHRzdGF0aWMgZW5hYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcblx0XHQkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0JCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuXHRcdH0pO1xuXHRcdE50b3BVdGlscy50b2dnbGVBbGxUYWJzKHRydWUpXG5cdH1cblxuXHRzdGF0aWMgY2FwaXRhbGl6ZShzKSB7XG5cdFx0cmV0dXJuIHMgJiYgc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcblx0fVxuXG5cdHN0YXRpYyBhZGRDb21tYXMoblN0cikge1xuXHRcdG5TdHIgKz0gJyc7XG5cdFx0dmFyIHggPSBuU3RyLnNwbGl0KCcuJyk7XG5cdFx0dmFyIHgxID0geFswXTtcblx0XHR2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XG5cdFx0dmFyIHJneCA9IC8oXFxkKykoXFxkezN9KS87XG5cdFx0d2hpbGUgKHJneC50ZXN0KHgxKSkge1xuXHRcdFx0eDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuXHRcdH1cblx0XHRyZXR1cm4geDEgKyB4Mjtcblx0fVxuXG5cdHN0YXRpYyBzY2FsZVZhbHVlKHZhbCwgc2l6ZXMsIHNjYWxlLCBkZWNpbWFscykge1xuXHRcdGlmICh2YWwgPT0gMCkgcmV0dXJuIFswLCBzaXplc1swXV07XG5cdFx0bGV0IGZhY3RvciA9IGRlY2ltYWxzID8gKDEwICogZGVjaW1hbHMpIDogMTA7XG5cblx0XHR2YXIgaSA9IHBhcnNlSW50KE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKHNjYWxlKSkpO1xuXHRcdGlmIChpIDwgMCB8fCBpc05hTihpKSkge1xuXHRcdFx0aSA9IDA7XG5cdFx0fSBlbHNlIGlmIChpID49IHNpemVzLmxlbmd0aCkge1xuXHRcdFx0aSA9IHNpemVzLmxlbmd0aCAtIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtNYXRoLnJvdW5kKCh2YWwgLyBNYXRoLnBvdyhzY2FsZSwgaSkpICogZmFjdG9yKSAvIGZhY3Rvciwgc2l6ZXNbaV1dO1xuXHR9XG5cblx0c3RhdGljIGZvcm1hdFZhbHVlKHZhbCwgZGVjaW1hbHMpIHtcblx0XHR2YXIgc2l6ZXMgPSBbJycsICdLJywgJ00nLCAnRycsICdUJ107XG5cdFx0aWYgKHZhbCA9PSAwKSByZXR1cm4gJzAnO1xuXHRcdGlmICgodmFsID4gMCkgJiYgKHZhbCA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpO1xuXHRcdGlmIChkZWNpbWFscyA9PSB1bmRlZmluZWQpIGRlY2ltYWxzID0gMDtcblx0XHR2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUodmFsLCBzaXplcywgMTAwMCwgZGVjaW1hbHMpO1xuXG5cdFx0cmV0dXJuIHJlc1swXSArIHJlc1sxXTtcblx0fVxuXG5cdHN0YXRpYyBmb3JtYXRQYWNrZXRzKG4pIHtcblx0XHRyZXR1cm4gKE50b3BVdGlscy5hZGRDb21tYXMobi50b0ZpeGVkKDApKSArIFwiIFBrdHNcIik7XG5cdH1cblxuXHRzdGF0aWMgYnl0ZXNUb1ZvbHVtZShieXRlcykge1xuXHRcdHZhciBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcblx0XHRpZiAoYnl0ZXMgPT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcblx0XHRpZiAoKGJ5dGVzID4gMCkgJiYgKGJ5dGVzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArIFwiIEJ5dGVzXCIpO1xuXHRcdHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShieXRlcywgc2l6ZXMsIDEwMjQpO1xuXG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQocmVzWzBdKSArIFwiIFwiICsgcmVzWzFdO1xuXHR9O1xuXG5cdHN0YXRpYyBieXRlc1RvVm9sdW1lQW5kTGFiZWwoYnl0ZXMpIHtcblx0XHR2YXIgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ107XG5cdFx0aWYgKGJ5dGVzID09IDApIHJldHVybiAnMCBCeXRlcyc7XG5cdFx0dmFyIGkgPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKDEwMjQpKSk7XG5cdFx0cmV0dXJuIFsoYnl0ZXMgLyBNYXRoLnBvdygxMDI0LCBpKSkudG9GaXhlZCgyKSwgc2l6ZXNbaV1dO1xuXHR9O1xuXG5cdHN0YXRpYyBiaXRzVG9TaXplKGJpdHMsIGZhY3Rvcikge1xuXHRcdGZhY3RvciA9IGZhY3RvciB8fCAxMDAwO1xuXHRcdHZhciBzaXplcyA9IFsnYnBzJywgJ0ticHMnLCAnTWJwcycsICdHYnBzJywgJ1RicHMnXTtcblx0XHRpZiAoYml0cyA9PSAwKSByZXR1cm4gJzAgYnBzJztcblx0XHRpZiAoKGJpdHMgPiAwKSAmJiAoYml0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyBcIiBicHNcIik7XG5cdFx0dmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGJpdHMsIHNpemVzLCBmYWN0b3IpO1xuXG5cdFx0cmV0dXJuIHJlc1swXS50b0ZpeGVkKDIpICsgXCIgXCIgKyByZXNbMV07XG5cdH07XG5cblx0c3RhdGljIHNlY29uZHNUb1RpbWUoc2Vjb25kcykge1xuXG5cdFx0aWYgKHNlY29uZHMgPCAxKSB7XG5cdFx0XHRyZXR1cm4gKFwiPCAxIHNlY1wiKVxuXHRcdH1cblxuXHRcdGxldCBkYXlzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gODY0MDApXG5cdFx0bGV0IGhvdXJzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAvIDM2MDApIC0gKGRheXMgKiAyNCkpXG5cdFx0bGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzIC8gNjApIC0gKGRheXMgKiAxNDQwKSAtIChob3VycyAqIDYwKSlcblx0XHRsZXQgc2VjID0gc2Vjb25kcyAlIDYwXG5cdFx0bGV0IG1zZyA9IFwiXCIsIG1zZ19hcnJheSA9IFtdXG5cblx0XHRpZiAoZGF5cyA+IDApIHtcblx0XHRcdGxldCB5ZWFycyA9IE1hdGguZmxvb3IoZGF5cyAvIDM2NSlcblxuXHRcdFx0aWYgKHllYXJzID4gMCkge1xuXHRcdFx0XHRkYXlzID0gZGF5cyAlIDM2NVxuXG5cdFx0XHRcdG1zZyA9IHllYXJzICsgXCIgeWVhclwiXG5cdFx0XHRcdGlmICh5ZWFycyA+IDEpIHtcblx0XHRcdFx0XHRtc2cgKz0gXCJzXCJcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblx0XHRcdFx0bXNnID0gXCJcIlxuXHRcdFx0fVxuXHRcdFx0bXNnID0gZGF5cyArIFwiIGRheVwiXG5cdFx0XHRpZiAoZGF5cyA+IDEpIHsgbXNnICs9IFwic1wiIH1cblx0XHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblx0XHRcdG1zZyA9IFwiXCJcblx0XHR9XG5cblx0XHRpZiAoaG91cnMgPiAwKSB7XG5cdFx0XHRpZiAoaG91cnMgPCAxMCkgeyBtc2cgPSBcIjBcIiB9XG5cdFx0XHRtc2cgKz0gaG91cnMgKyBcIjpcIjtcblx0XHR9XG5cblx0XHRpZiAobWludXRlcyA8IDEwKSB7IG1zZyArPSBcIjBcIiB9XG5cdFx0bXNnICs9IG1pbnV0ZXMgKyBcIjpcIjtcblx0XHRpZiAoc2VjIDwgMTApIHsgbXNnICs9IFwiMFwiIH1cblx0XHRtc2cgKz0gc2VjO1xuXHRcdG1zZ19hcnJheS5wdXNoKG1zZylcblxuXHRcdHJldHVybiBtc2dfYXJyYXkuam9pbihcIiwgXCIpXG5cdH1cblxuXHRzdGF0aWMgbXNlY1RvVGltZShtc2VjKSB7XG5cdFx0aWYgKG1zZWMgPj0gMTAwMCkge1xuXHRcdFx0cmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKG1zZWMvMTAwMCk7XG5cdFx0fSBlbHNlIHtcblx0XHQgICAgICAgIHZhciB4ID0gTWF0aC5yb3VuZChtc2VjICogMTAwMCkgLyAxMDAwLjtcblx0XHQgICAgICAgIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpICsgXCIgbXNcIjtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgZXBvY2gyU2VlbihlcG9jaCkge1xuXHRcdC8qIDA4LzAxLzEzIDE1OjEyOjM3IFsxOCBtaW4sIDEzIHNlYyBhZ29dICovXG5cdFx0dmFyIGQgPSBuZXcgRGF0ZShlcG9jaCAqIDEwMDApO1xuXHRcdHZhciB0ZGlmZiA9IE1hdGguZmxvb3IoKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKSAtIGVwb2NoKTtcblxuXHRcdHJldHVybiAoZC5mb3JtYXQoXCJkZC9NTS95eXl5IGhoOm1tOnNzXCIpICsgXCIgW1wiICsgTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUodGRpZmYpICsgXCIgYWdvXVwiKTtcblx0fVxuXG5cdC8qIHRpY2tzIGZvciBncmFwaCB4IGF4aXMgKi9cblx0c3RhdGljIGdyYXBoR2V0WEF4aXNUaWNrc0Zvcm1hdChkaWZmX2Vwb2NoKSB7XG5cdFx0dmFyIHRpY2tGb3JtYXQ7XG5cblx0XHRpZiAoZGlmZl9lcG9jaCA8PSA4NjQwMCkge1xuXHRcdFx0dGlja0Zvcm1hdCA9IFwiJUg6JU06JVNcIjtcblx0XHR9IGVsc2UgaWYgKGRpZmZfZXBvY2ggPD0gMiAqIDg2NDAwKSB7XG5cdFx0XHR0aWNrRm9ybWF0ID0gXCIlYiAlZSwgJUg6JU06JVNcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGlja0Zvcm1hdCA9IFwiJWIgJWVcIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gKHRpY2tGb3JtYXQpO1xuXHR9XG5cblx0c3RhdGljIHBhcmFtc0V4dGVuZChkZWZhdWx0cywgb3ZlcnJpZGUpIHtcblx0XHRyZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvdmVycmlkZSk7XG5cdH1cblxuXHRzdGF0aWMgcGFyYW1zVG9Gb3JtKGZvcm0sIHBhcmFtcykge1xuXHRcdGZvcm0gPSAkKGZvcm0pO1xuXG5cdFx0Zm9yICh2YXIgayBpbiBwYXJhbXMpIHtcblx0XHRcdGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoaykpIHtcblx0XHRcdFx0dmFyIGlucHV0ID0gJCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJyArIGsgKyAnXCIgdmFsdWU9XCInICsgcGFyYW1zW2tdICsgJ1wiPicpO1xuXHRcdFx0XHRpbnB1dC5hcHBlbmRUbyhmb3JtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZm9ybTtcblx0fVxuXG5cdC8qXG5cdCAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGphdmFzY3JpcHQgb2JqZWN0IHdoZXJlIGVhY2ggay0+diBwYWlyIG9mIHRoZSBpbnB1dCBvYmplY3Rcblx0ICogdHJhbnNsYXRlcyBpbnRvIHR3byBwYWlycyBpbiB0aGUgb3V0cHV0IG9iamVjdDogYSBrZXlfW2ldLT5rIGFuZCBhIHZhbF9baV0tPnYsIHdoZXJlXG5cdCAqIGkgaXMgYW4gaW5jcmVtZW50YWwgaW5kZXguXG5cdCAqXG5cdCAqIFRoZSBvdXRwdXQgb2JqZWN0IGNhbiB0aGVuIGJlIHNlcmlhbGl6ZWQgdG8gYW4gVVJMLiBUaGlzIGNvbnZlcnNpb24gaXMgcmVxdWlyZWQgZm9yXG5cdCAqIGhhbmRsaW5nIHNwZWNpYWwgY2hhcmFjdGVyczogc2luY2UgbnRvcG5nIHN0cmlwcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gX0dFVCBrZXlzLFxuXHQgKiBfR0VUIHZhbHVlcyBtdXN0IGJlIHVzZWQuXG5cdCAqXG5cdCAqIFRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgdGhlIGludmVyc2UgY29udmVyc2lvbiBvZiBsdWEgcGFyYW1zUGFpcnNEZWNvZGUuXG5cdCAqXG5cdCAqL1xuXHRzdGF0aWMgcGFyYW1zUGFpcnNFbmNvZGUocGFyYW1zKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXMgPSB7fTtcblxuXHRcdGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG5cdFx0XHRyZXNbXCJrZXlfXCIgKyBpXSA9IGs7XG5cdFx0XHRyZXNbXCJ2YWxfXCIgKyBpXSA9IHBhcmFtc1trXTtcblx0XHRcdGkgPSBpICsgMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzO1xuXHR9XG5cblx0c3RhdGljIGhvc3RrZXkyaG9zdEluZm8oaG9zdF9rZXkpIHtcblx0XHR2YXIgaW5mbztcblx0XHR2YXIgaG9zdGluZm8gPSBbXTtcblxuXHRcdGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX19fXy9nLCBcIjpcIik7XG5cdFx0aG9zdF9rZXkgPSBob3N0X2tleS5yZXBsYWNlKC9fX18vZywgXCIvXCIpO1xuXHRcdGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX18vZywgXCIuXCIpO1xuXG5cdFx0aW5mbyA9IGhvc3Rfa2V5LnNwbGl0KFwiQFwiKTtcblx0XHRyZXR1cm4gKGluZm8pO1xuXHR9XG5cblx0c3RhdGljIGhhbmRsZV90YWJfc3RhdGUobmF2X29iamVjdCwgZGVmYXVsdF90YWIpIHtcblx0XHQkKCdhJywgbmF2X29iamVjdCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9KTtcblxuXHRcdC8vIHN0b3JlIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiIGluIHRoZSBoYXNoIHZhbHVlXG5cdFx0JChcIiA+IGxpID4gYVwiLCBuYXZfb2JqZWN0KS5vbihcInNob3duLmJzLnRhYlwiLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0dmFyIGlkID0gJChlLnRhcmdldCkuYXR0cihcImhyZWZcIikuc3Vic3RyKDEpO1xuXHRcdFx0aWYgKGhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG5cdFx0XHRcdC8vIHRoaXMgd2lsbCBwcmV2ZW50IHRoZSAnanVtcCcgdG8gdGhlIGhhc2hcblx0XHRcdFx0aGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXCIjXCIgKyBpZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBmYWxsYmFja1xuXHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGlkO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gb24gbG9hZCBvZiB0aGUgcGFnZTogc3dpdGNoIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiXG5cdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRpZiAoIWhhc2gpIGhhc2ggPSBcIiNcIiArIGRlZmF1bHRfdGFiO1xuXHRcdCQoJ2FbaHJlZj1cIicgKyBoYXNoICsgJ1wiXScsIG5hdl9vYmplY3QpLnRhYignc2hvdycpO1xuXHR9XG5cblx0c3RhdGljIF9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgbmFtZSwgZGF0YSkge1xuXHRcdCQoJzxpbnB1dD4nKS5hdHRyKHtcblx0XHRcdHR5cGU6ICdoaWRkZW4nLFxuXHRcdFx0aWQ6IG5hbWUsXG5cdFx0XHRuYW1lOiBuYW1lLFxuXHRcdFx0dmFsdWU6IGRhdGEsXG5cdFx0fSkuYXBwZW5kVG8oZm9ybSk7XG5cdH1cblxuXHQvKiBVc2VkIHdoaWxlIHNlYXJjaGluZyBob3N0cyBhIGFuZCBtYWNzIHdpdGggdHlwZWFoZWFkICovXG5cdHN0YXRpYyBtYWtlRmluZEhvc3RCZWZvcmVTdWJtaXRDYWxsYmFjayhodHRwX3ByZWZpeCkge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoZm9ybSwgZGF0YSkge1xuXHRcdFx0aWYgKGRhdGEuY29udGV4dCAmJiBkYXRhLmNvbnRleHQgPT0gXCJoaXN0b3JpY2FsXCIpIHtcblx0XHRcdFx0Zm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byby9kYl9zZWFyY2gubHVhXCIpO1xuXHRcdFx0XHRpZiAoZGF0YS50eXBlID09IFwiaXBcIikge1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiaXBcIiwgZGF0YS5pcCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibWFjXCIpIHtcblx0XHRcdFx0XHROdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm1hY1wiLCBkYXRhLm1hYyk7XG5cdFx0XHRcdH0gZWxzZSAvKiBcImhvc3RuYW1lXCIgKi8ge1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibmFtZVwiLCBkYXRhLmhvc3RuYW1lID8gZGF0YS5ob3N0bmFtZSA6IGRhdGEubmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkYXRhLnR5cGUgPT0gXCJtYWNcIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9tYWNfZGV0YWlscy5sdWFcIik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibmV0d29ya1wiKSB7XG5cdFx0XHRcdFx0Zm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RzX3N0YXRzLmx1YVwiKTtcblx0XHRcdFx0XHROdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm5ldHdvcmtcIiwgZGF0YS5uZXR3b3JrKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJzbm1wXCIpIHtcblx0XHRcdFx0XHRmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWFcIik7XG5cdFx0XHRcdFx0TnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJzbm1wX3BvcnRfaWR4XCIsIGRhdGEuc25tcF9wb3J0X2lkeCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwic25tcF9kZXZpY2VcIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2RldmljZV9kZXRhaWxzLmx1YVwiKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJhc25cIikge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0c19zdGF0cy5sdWFcIik7XG5cdFx0XHRcdFx0TnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJhc25cIiwgZGF0YS5hc24pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0X2RldGFpbHMubHVhXCIpO1xuXHRcdFx0XHRcdE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibW9kZVwiLCBcInJlc3RvcmVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIHRzdGFtcFRvRGF0ZVN0cmluZyhodG1sX3RhZywgZm9ybWF0LCB0ZGlmZikge1xuXHRcdHRkaWZmID0gdGRpZmYgfHwgMDtcblx0XHR2YXIgdGltZXN0YW1wID0gcGFyc2VJbnQoaHRtbF90YWcuaHRtbCgpKSArIHRkaWZmO1xuXHRcdHZhciBsb2NhbGl6ZWQgPSBkMy50aW1lLmZvcm1hdChmb3JtYXQpKG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApKTtcblx0XHRodG1sX3RhZy5odG1sKGxvY2FsaXplZCkucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG5cdFx0cmV0dXJuIGxvY2FsaXplZDtcblx0fVxuXG5cdHN0YXRpYyBub0h0bWwocykge1xuXHRcdHJldHVybiBzLnJlcGxhY2UoLzxbXj5dKz4vZywgJycpO1xuXHR9XG5cblx0c3RhdGljIGNsZWFuQ3VzdG9tSG9zdFVybChob3N0KSB7XG5cdFx0LyogUmVtb3ZlIHN0YXJ0aW5nIGh0dHAocykuICovXG5cdFx0cmV0dXJuIGhvc3Rcblx0XHRcdC5yZXBsYWNlKC9eaHR0cDpcXC9cXC8vZ2ksICcnKVxuXHRcdFx0LnJlcGxhY2UoL15odHRwczpcXC9cXC8vZ2ksICcnKVxuXHRcdFx0LyogUmVtb3ZlIHN0YXJ0aW5nIHd3dy4gKi9cblx0XHRcdC5yZXBsYWNlKC9ed3d3XFwuL2dpLCAnJylcblx0XHRcdC8qIFJlbW92ZSBub24tYWxsb3dlZCBjaGFyYWN0ZXJzICovXG5cdFx0XHQucmVwbGFjZSgvW14wLTlhLXpBLVpcXC46XFwvXy1dL2dpLCAnJyk7XG5cdH1cblxuXHQvKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDkwNTUxL3BhcnNlLXF1ZXJ5LXN0cmluZy1pbi1qYXZhc2NyaXB0ICovXG5cdHN0YXRpYyBwYXJzZVF1ZXJ5KHF1ZXJ5U3RyaW5nKSB7XG5cdFx0dmFyIHF1ZXJ5ID0ge307XG5cdFx0dmFyIHBhaXJzID0gKHF1ZXJ5U3RyaW5nWzBdID09PSAnPycgPyBxdWVyeVN0cmluZy5zdWJzdHIoMSkgOiBxdWVyeVN0cmluZykuc3BsaXQoJyYnKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG5cdFx0XHRxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0gfHwgJycpO1xuXHRcdH1cblx0XHRyZXR1cm4gcXVlcnk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0SGlzdG9yeVBhcmFtZXRlcnMocGFyYW1zKSB7XG5cdFx0dmFyIGN1cl9wYXJhbXMgPSBOdG9wVXRpbHMucGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblx0XHR2YXIgbmV3X3BhcmFtcyA9ICQuZXh0ZW5kKGN1cl9wYXJhbXMsIHBhcmFtcyk7XG5cdFx0dmFyIG5ld19xdWVyeSA9IFwiP1wiICsgJC5wYXJhbShuZXdfcGFyYW1zLCB0cnVlKTtcblx0XHR2YXIgYmFzZVVybCA9IFtsb2NhdGlvbi5wcm90b2NvbCwgJy8vJywgbG9jYXRpb24uaG9zdCwgbG9jYXRpb24ucGF0aG5hbWVdLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIGJhc2VVcmwgKyBuZXdfcXVlcnk7XG5cdH1cblxuXHQvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgZGlmZmVyZW50IGZyb20gMjAwXG5cdHN0YXRpYyBjaGVja19zdGF0dXNfY29kZShzdGF0dXNfY29kZSwgc3RhdHVzX3RleHQsICRlcnJvcl9sYWJlbCkge1xuXG5cdFx0Y29uc3QgaXNfZGlmZmVyZW50ID0gc3RhdHVzX2NvZGUgIT0gMjAwO1xuXG5cdFx0aWYgKGlzX2RpZmZlcmVudCAmJiAkZXJyb3JfbGFiZWwgIT0gbnVsbCkge1xuXG5cdFx0XHRsZXQgbWVzc2FnZSA9IGkxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2U7XG5cdFx0XHRpZiAoc3RhdHVzX2NvZGUgJiYgc3RhdHVzX3RleHQpIHtcblx0XHRcdFx0bWVzc2FnZSArPSBgOiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YDtcblx0XHRcdH1cblxuXHRcdFx0JGVycm9yX2xhYmVsLnRleHQobWVzc2FnZSkuc2hvdygpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChpc19kaWZmZXJlbnQgJiYgJGVycm9yX2xhYmVsID09IG51bGwpIHtcblx0XHRcdGFsZXJ0KGAke2kxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2V9OiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlzX2RpZmZlcmVudDtcblx0fVxuXG5cdC8vIFRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBodHRwZG9jcy90ZW1wbGF0ZXMvY29uZmlnX2xpc3RfY29tcG9uZW50cy9pbXBvcnRfbW9kYWwuaHRtbFxuXHRzdGF0aWMgaW1wb3J0TW9kYWxIZWxwZXIocGFyYW1zKSB7XG5cblx0XHRpZiAoIXBhcmFtcy5sb2FkQ29uZmlnWEhSKSB7IHRocm93IChcImltcG9ydE1vZGFsSGVscGVyOjogTWlzc2luZyAnbG9hZENvbmZpZ1hIUicgcGFyYW1cIik7IHJldHVybjsgfVxuXG5cdFx0JChgaW5wdXQjaW1wb3J0LWlucHV0YCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcblx0XHRcdGNvbnN0IGZpbGVuYW1lID0gJCh0aGlzKS52YWwoKS5yZXBsYWNlKFwiQzpcXFxcZmFrZXBhdGhcXFxcXCIsIFwiXCIpO1xuXHRcdFx0JChgI2J0bi1jb25maXJtLWltcG9ydGApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcblx0XHR9KTtcblxuXHRcdCQoYCNpbXBvcnQtbW9kYWxgKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0JChgI2ltcG9ydC1pbnB1dGApLnZhbCgnJyk7XG5cdFx0XHQkKFwiI2ltcG9ydC1lcnJvclwiKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ3RleHQtd2FybmluZycpLmFkZENsYXNzKCdpbnZhbGlkLWZlZWRiYWNrJyk7XG5cdFx0XHQkKGAjYnRuLWNvbmZpcm0taW1wb3J0YCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cdFx0fSk7XG5cblx0XHQkKFwiI2ltcG9ydC1tb2RhbFwiKS5vbihcInN1Ym1pdFwiLCBcImZvcm1cIiwgZnVuY3Rpb24gKGUpIHtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRjb25zdCAkYnV0dG9uID0gJCgnI2J0bi1jb25maXJtLWltcG9ydCcpO1xuXHRcdFx0JGJ1dHRvbi5hdHRyKFwiZGlzYWJsZWRcIiwgXCJcIik7XG5cblx0XHRcdC8vIHJlYWQgY29uZmlndXJhdGlvbiBmaWxlXG5cdFx0XHRjb25zdCBmaWxlID0gJCgnI2ltcG9ydC1pbnB1dCcpWzBdLmZpbGVzWzBdO1xuXG5cdFx0XHRpZiAoIWZpbGUpIHtcblx0XHRcdFx0JChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChgJHtpMThuX2V4dC5ub19maWxlfWApLnNob3coKTtcblx0XHRcdFx0JGJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblx0XHRcdHJlYWRlci5yZWFkQXNUZXh0KGZpbGUsIFwiVVRGLThcIik7XG5cblx0XHRcdHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdC8vIENsaWVudC1zaWRlIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3JtYXQgY2hlY2tcblx0XHRcdFx0bGV0IGpzb25Db25maWd1cmF0aW9uID0gbnVsbFxuXHRcdFx0XHR0cnkgeyBqc29uQ29uZmlndXJhdGlvbiA9IEpTT04ucGFyc2UocmVhZGVyLnJlc3VsdCk7IH0gY2F0Y2ggKGUpIHsgfVxuXG5cdFx0XHRcdGlmICghanNvbkNvbmZpZ3VyYXRpb24pIHtcblx0XHRcdFx0XHQkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KGkxOG5fZXh0LnJlc3RfY29uc3RzW3Jlc3BvbnNlSlNPTi5yY19zdHJdIHx8ICdOb3QgSW1wbGVtZW50ZWQgWWV0Jykuc2hvdygpO1xuXHRcdFx0XHRcdCRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1Ym1pdCBjb25maWd1cmF0aW9uIGZpbGVcblx0XHRcdFx0cGFyYW1zLmxvYWRDb25maWdYSFIocmVhZGVyLnJlc3VsdClcblx0XHRcdFx0XHQuZG9uZSgocmVzcG9uc2UsIHN0YXR1cywgeGhyKSA9PiB7XG5cblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZS5yYyA8IDApIHtcblx0XHRcdFx0XHRcdFx0JChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChyZXNwb25zZS5yY19zdHIpLnNob3coKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsIGNhbGwgdGhlIHN1Y2Nlc3NDYWxsYmFja1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0cGFyYW1zLnN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQgICAgICAgIGNvbnN0IGtleSA9ICQoYGlucHV0W25hbWU9J2NvbmZpZ3VyYXRpb24nXTpjaGVja2VkYCkudmFsKCk7XG5cblx0XHRcdFx0XHQgICAgICAgIGNvbnN0IGJvZHkgPSAoa2V5ID09ICdhbGwnKVxuXHRcdFx0XHRcdCAgICAgICAgICAgICAgICA/IGkxOG5fZXh0Lm1hbmFnZV9jb25maWd1cmF0aW9ucy5tZXNzYWdnZXMuaW1wb3J0X2FsbF9zdWNjZXNzXG5cdFx0XHRcdFx0XHRcdDogaTE4bl9leHQubWFuYWdlX2NvbmZpZ3VyYXRpb25zLm1lc3NhZ2dlcy5pbXBvcnRfc3VjY2VzcztcblxuXHRcdFx0XHRcdFx0Ly8gc2hvdyBhIHN1Y2Nlc3MgYWxlcnQgbWVzc2FnZVxuXHRcdFx0XHRcdFx0VG9hc3RVdGlscy5zaG93VG9hc3Qoe1xuXHRcdFx0XHRcdFx0XHRpZDogJ2ltcG9ydC1jb25maWd1cmF0aW9uLWFsZXJ0Jyxcblx0XHRcdFx0XHRcdFx0bGV2ZWw6ICdzdWNjZXNzJyxcblx0XHRcdFx0XHRcdFx0dGl0bGU6IGkxOG5fZXh0LnN1Y2Nlc3MsXG5cdFx0XHRcdFx0XHRcdGJvZHk6IGJvZHksXG5cdFx0XHRcdFx0XHRcdGRlbGF5OiAyMDAwXG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0JChcIiNpbXBvcnQtbW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcblxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmZhaWwoKHsgcmVzcG9uc2VKU09OIH0pID0+IHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgUEFSVElBTF9JTVBPUlRfUkMgPSAtMjg7XG5cblx0XHRcdFx0XHRcdGlmIChwYXJhbXMuZmFpbHVyZUNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdHBhcmFtcy5mYWlsdXJlQ2FsbGJhY2socmVzcG9uc2VKU09OKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlSlNPTiAmJiByZXNwb25zZUpTT04ucmMgPiAwKSByZXR1cm47XG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2VKU09OLnJjID09IFBBUlRJQUxfSU1QT1JUX1JDKVxuXHRcdFx0XHRcdFx0XHQkKGAjaW1wb3J0LWVycm9yYCkucmVtb3ZlQ2xhc3MoJ2ludmFsaWQtZmVlZGJhY2snKS5hZGRDbGFzcygndGV4dC13YXJuaW5nJyk7XG5cblx0XHRcdFx0XHRcdCQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQoaTE4bl9leHQucmVzdF9jb25zdHNbcmVzcG9uc2VKU09OLnJjX3N0cl0gfHwgaTE4bl9leHQuRkFJTEVEX0hUVFBfUkVRVUVTVCkuc2hvdygpO1xuXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuYWx3YXlzKCgpID0+IHtcblx0XHRcdFx0XHRcdCRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIHNlcmlhbGl6ZUZvcm1BcnJheShzZXJpYWxpemVkQXJyYXkpIHtcblx0XHRjb25zdCBzZXJpYWxpemVkID0ge307XG5cdFx0c2VyaWFsaXplZEFycmF5LmZvckVhY2goKG9iaikgPT4ge1xuXHRcdFx0LyogaWYgdGhlIG9iamVjdCBpcyBhbiBhcnJheSAgKi9cblx0XHRcdGlmIChvYmoubmFtZS5pbmNsdWRlcygnW10nKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblxuXHRcdFx0XHQvLyBjbGVhbiB0aGUgc3RyaW5nXG5cdFx0XHRcdGlmICh0eXBlb2Ygb2JqLnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0b2JqLnZhbHVlID0gb2JqLnZhbHVlLnRyaW0oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZXJpYWxpemVkW29iai5uYW1lXSA9IG9iai52YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VyaWFsaXplZDtcblx0fVxuXG5cdHN0YXRpYyBjbGVhbkZvcm0oZm9ybVNlbGVjdG9yKSB7XG5cdFx0LyogcmVtb3ZlIHZhbGlkYXRpb24gZmllbGRzIGFuZCB0cmFja3MgKi9cblx0XHQkKGZvcm1TZWxlY3RvcikuZmluZCgnaW5wdXQsc2VsZWN0LHRleHRhcmVhJykuZWFjaChmdW5jdGlvbiAoaSwgaW5wdXQpIHtcblx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoYGlzLXZhbGlkYCkucmVtb3ZlQ2xhc3MoYGlzLWludmFsaWRgKTtcblx0XHR9KTtcblx0XHQvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuXHRcdCQoZm9ybVNlbGVjdG9yKVswXS5yZXNldCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2UgYSBmZXRjaCBjYWxsIHdpdGggYSB0aW1lb3V0IG9wdGlvblxuXHQgKi9cblx0c3RhdGljIGZldGNoV2l0aFRpbWVvdXQodXJpLCBvcHRpb25zID0ge30sIHRpbWUgPSA1MDAwKSB7XG5cblx0XHRjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpXG5cdFx0Y29uc3QgY29uZmlnID0geyAuLi5vcHRpb25zLCBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsIH1cblx0XHRjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRjb250cm9sbGVyLmFib3J0KClcblx0XHR9LCB0aW1lKVxuXG5cdFx0cmV0dXJuIGZldGNoKHVyaSwgY29uZmlnKVxuXHRcdFx0LnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlXG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKChlcnJvcikgPT4ge1xuXHRcdFx0XHRpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdSZXNwb25zZSB0aW1lZCBvdXQnKVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHR9XG5cblx0c3RhdGljIHNldFByZWYoYWN0aW9uLCBjc3JmLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG5cblx0XHRpZiAoYWN0aW9uID09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQW4gYWN0aW9uIGtleSBtdXN0IGJlIGRlZmluZWQgdG8gc2V0IGEgcHJlZmVyZW5jZSFcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZW1wdHkgPSAoKSA9PiB7IH07XG5cdFx0Y29uc3QgcmVxdWVzdCA9ICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3VwZGF0ZV9wcmVmcy5sdWFgLCB7IGFjdGlvbjogYWN0aW9uLCBjc3JmOiBjc3JmIH0pO1xuXHRcdHJlcXVlc3QuZG9uZShzdWNjZXNzIHx8IGVtcHR5KTtcblx0XHRyZXF1ZXN0LmZhaWwoZmFpbHVyZSB8fCBlbXB0eSk7XG5cdH1cblxuXHQvKipcblx0ICogR2x1ZSBzdHJpbmdzIGNvbnRhaW5lZCBpbiBhcnJheSBzZXBhcmF0ZWQgYnkgYSBjb21tYS5cblx0ICogQHBhcmFtIHthcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIHN0cmluZ3MuIEkuZS4gW1wiSGVsbG9cIiwgXCJXb3JsZFwiXVxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgSG93IG1hbnkgd29yZHMgdGhlIHN0cmluZyBjb250YWluc1xuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIGJ1aWx0IGJ5IGFycmF5J3MgZWxlbWVudHMuIGkuZTogXCJIZWxsbywgV29ybGRcIlxuXHQgKi9cblx0c3RhdGljIGFycmF5VG9MaXN0U3RyaW5nKGFycmF5LCBsaW1pdCkge1xuXG5cdFx0aWYgKGFycmF5ID09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cblx0XHRpZiAoYXJyYXkubGVuZ3RoID4gbGltaXQpIHtcblx0XHRcdHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpICsgYCAke2kxOG5fZXh0LmFuZF94X21vcmUucmVwbGFjZSgnJG51bScsIGFycmF5Lmxlbmd0aCAtIGxpbWl0KX1gO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpO1xuXHR9XG5cblx0c3RhdGljIGJ1aWxkVVJMKGxvY2F0aW9uLCBwYXJhbXMgPSB7fSwgaGFzUmVmZXJlciA9IGZhbHNlLCByZWZlcmVyUGFyYW1zID0ge30pIHtcblxuXHRcdGNvbnN0IHVybCA9IG5ldyBVUkwobG9jYXRpb24sIHdpbmRvdy5sb2NhdGlvbik7XG5cblx0XHRmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKVxuXHRcdFx0ICB1cmwuc2VhcmNoUGFyYW1zLnNldChuYW1lLCB2YWx1ZSk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoaGFzUmVmZXJlcikge1xuXG5cdFx0XHRjb25zdCByZWZVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblx0XHRcdGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZWZlcmVyUGFyYW1zKSkge1xuXHRcdFx0XHRpZiAoIXZhbHVlKSBjb250aW51ZTtcblx0XHRcdFx0cmVmVXJsLnNlYXJjaFBhcmFtcy5zZXQobmFtZSwgdmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHR1cmwuc2VhcmNoUGFyYW1zLnNldCgncmVmZXJlcicsIHJlZlVybC50b1N0cmluZygpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0RWRpdFBvb2xMaW5rKGhyZWYsIHBvb2xJZCkge1xuXHRcdGNvbnN0IHVybCA9IG5ldyBVUkwoaHJlZiwgd2luZG93LmxvY2F0aW9uKTtcblx0XHR1cmwuc2VhcmNoUGFyYW1zLnNldCgncG9vbF9pZCcsIHBvb2xJZCk7XG5cdFx0cmV0dXJuIHVybC50b1N0cmluZygpO1xuXHR9XG5cblx0c3RhdGljIGdldFBvb2xMaW5rKHBvb2xUeXBlLCBwb29sSWQgPSAwKSB7XG5cdFx0cmV0dXJuIGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvJHtwb29sVHlwZX0vcG9vbHMubHVhP3Bvb2w9JHtwb29sSWR9YDtcblx0fVxuXG5cdHN0YXRpYyBhc3luYyBnZXRQb29sKHBvb2xUeXBlLCBpZCA9IDApIHtcblxuXHRcdGlmIChwb29sVHlwZSA9PT0gbnVsbCkgdGhyb3cgJ0EgcG9vbCB0eXBlIG11c3QgYmUgZGVmaW5lZCEnO1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Y29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKE50b3BVdGlscy5nZXRQb29sTGluayhwb29sVHlwZSwgaWQpKTtcblx0XHRcdGNvbnN0IHBvb2wgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuXHRcdFx0aWYgKHBvb2wucmMgPCAwKSB7XG5cdFx0XHRcdHJldHVybiBbZmFsc2UsIHt9XTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFt0cnVlLCBwb29sLnJzcFswXV07XG5cdFx0fVxuXHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdHJldHVybiBbZmFsc2UsIHt9XTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2F2ZSB0aGUgc2NhbGUgb2YgZWxlbWVudCBpbnNpZGUgdGhlIGxvY2FsIHN0b3JhZ2Vcblx0ICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2NhbGVcblx0ICovXG5cdHN0YXRpYyBzYXZlRWxlbWVudFNjYWxlKCRlbGVtZW50LCBzY2FsZSA9IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSkge1xuXHRcdFxuXHRcdGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShzY2FsZSkpO1xuXHR9XG5cblx0c3RhdGljIGdlbmVyYXRlU2NhbGVFbGVtZW50S2V5KCRlbGVtZW50KSB7XG5cdFx0bGV0IGlkZW50aWZpY2F0b3I7XG5cdFx0Y29uc3QgcGFnZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHRcdGNvbnN0IGVsZW1lbnRJZCA9ICRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cblx0XHRpZiAoZWxlbWVudElkICE9PSBcIlwiKSB7XG5cdFx0XHRpZGVudGlmaWNhdG9yID0gZWxlbWVudElkO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNvbnN0IGNsYXNzTmFtZSA9ICRlbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG5cdFx0XHRpZGVudGlmaWNhdG9yID0gY2xhc3NOYW1lO1xuXHRcdH1cblxuXHRcdGNvbnN0IGtleSA9IGAke2lkZW50aWZpY2F0b3J9LSR7cGFnZX0tc2NhbGVgO1xuXHRcdHJldHVybiBrZXk7XG5cdH1cblxuXHQvKipcblx0ICogTG9hZCB0aGUgb2xkIHNjYWxlIHZhbHVlIG9meCBlbGVtZW50IGZyb20gdGhlIGxvY2FsIHN0b3JhZ2Vcblx0ICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuXHQgKi9cblx0c3RhdGljIGxvYWRFbGVtZW50U2NhbGUoJGVsZW1lbnQpIHtcblxuXHRcdGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG5cdFx0Y29uc3QgY3VycmVudFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblx0XHRpZiAoY3VycmVudFZhbHVlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRyZXR1cm4gSlNPTi5wYXJzZShjdXJyZW50VmFsdWUpO1xuXHR9XG5cblx0c3RhdGljIGZpbGxGaWVsZElmVmFsaWQoJGZpZWxkLCB2YWx1ZSkge1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdCRmaWVsZC52YWwoJycpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdCRmaWVsZC52YWwodmFsdWUpO1xuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGNvcHlUb0NsaXBib2FyZCh0ZXh0LCBpdGVtKSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGVsLnZhbHVlID0gdGV4dDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xuICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBlbC5zdHlsZS5sZWZ0ID0gJy05OTk5cHgnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIGVsLnNlbGVjdCgpO1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgXCJDb3BpZWQhXCIpLnRvb2x0aXAoXCJkaXNwb3NlXCIpLnRvb2x0aXAoKS50b29sdGlwKFwic2hvd1wiKTtcbiAgICAkKGl0ZW0pLnJlbW92ZUF0dHIoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpXG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgdGV4dClcblx0fVxuXG5cdHN0YXRpYyBzdHJpcFRhZ3MoaHRtbCkge1xuICAgICAgICBcdGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0LmlubmVySFRNTCA9IGh0bWw7XG5cdFx0cmV0dXJuIHQudGV4dENvbnRlbnQgfHwgdC5pbm5lclRleHQgfHwgXCJcIjtcblx0fVxuXG4gIHN0YXRpYyBzaG9ydGVuTGFiZWwobGFiZWwsIGxlbiwgbGFzdF9jaGFyKSB7XG4gICAgbGV0IHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsXG4gICAgaWYobGFiZWwubGVuZ3RoID4gbGVuICsgNSkge1xuICAgICAgbGV0IGxhc3RfaW5kZXggPSBsZW5cbiAgICAgIGlmKGxhc3RfY2hhcikge1xuICAgICAgICBsYXN0X2luZGV4ID0gbGFiZWwubGFzdEluZGV4T2YobGFzdF9jaGFyKVxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRfbGFiZWwgPSBsYWJlbC5zbGljZShsYXN0X2luZGV4KVxuICAgICAgICBpZihsZW4gPiBsYXN0X2luZGV4KSBcbiAgICAgICAgICBsZW4gPSBsYXN0X2luZGV4XG4gICAgICAgIHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsLnNsaWNlKDAsIGxlbikgKyBcIi4uLiBcIiArIHJlcXVlc3RlZF9sYWJlbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvcnRlbmVkX2xhYmVsID0gbGFiZWwuc2xpY2UoMCwgbGVuKSArIFwiLi4uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3J0ZW5lZF9sYWJlbFxuICB9XG5cdFxuICBzdGF0aWMgc29ydEFscGhhYmV0aWNhbGx5KGEsIGIpIHtcbiAgICBjb25zdCBuYW1lQSA9IGEubGFiZWwudG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBjb25zdCBuYW1lQiA9IGIubGFiZWwudG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBpZiAobmFtZUEgPCBuYW1lQikgeyByZXR1cm4gLTE7IH1cbiAgICBpZiAobmFtZUEgPiBuYW1lQikgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1yb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOSBwcm9ncmVzc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctd2FybmluZ1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2V9XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwiMTAwXCIgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50YWdlfSU7XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sXCI+ICR7cGVyY2VudGFnZX0gJTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YFxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlXzEsIHBlcmNlbnRhZ2VfMiwgbGFiZWxfMSwgbGFiZWxfMikge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXJvd1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIHByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy13YXJuaW5nXCIgYXJpYS12YWx1ZW5vdz1cIiR7cGVyY2VudGFnZV8xfVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6ICR7cGVyY2VudGFnZV8xfSU7XCI+JHtsYWJlbF8xfTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctc3VjY2Vzc1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2VfMn1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAke3BlcmNlbnRhZ2VfMn0lO1wiPiR7bGFiZWxfMn08L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gXG4gIH1cblxuICAvKiBSZXR1cm4gdGhlIG51bWJlciBvZiByb3dzIGF2YWlsYWJsZSBpbiBhIHRhYmxlICovXG4gIHN0YXRpYyBnZXROdW1UYWJsZVJvd3MoKSB7XG4gICAgcmV0dXJuIFsxMCwgMjAsIDUwLCAxMDBdO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdEFwZXhDaGFydExhYmVsRnJvbVhhbmROYW1lKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGApXG4gIH1cblxuICBzdGF0aWMgYXBleENoYXJ0SnVtcFRvQWxlcnRzKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgY29uc3QgeyBzZXJpZXMgfSA9IGNvbmZpZy5jb25maWc7XG4gICAgaWYgKHNlcmllc0luZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuICAgIGNvbnN0IGJhc2VfdXJsID0gc2VyaWUuYmFzZV91cmwgfHwgc2VyaWVzWzBdWydiYXNlX3VybCddXG4gICAgY29uc3QgZGVmYXVsdF91cmwgPSBzZXJpZS5zdGFydF91cmwgfHwgc2VyaWVzWzBdWydzdGFydF91cmwnXVxuICAgIGlmIChiYXNlX3VybCAhPSBudWxsICYmIGRlZmF1bHRfdXJsICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHNlYXJjaCA9IHNlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5O1xuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke2Jhc2VfdXJsfT8ke2RlZmF1bHRfdXJsfSR7c2VhcmNofWA7XG4gICAgfVxuICB9XG4gIFxuICBzdGF0aWMgZm9ybWF0QXBleENoYXJ0TGFiZWxGcm9tWGFuZFkoe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgIFxuICAgIGNvbnN0IHhfdmFsdWUgPSBzZXJpZVtcInhcIl07XG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7eF92YWx1ZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYClcbiAgfVxufVxuXG4kKGZ1bmN0aW9uICgpIHtcblx0Ly8gaWYgdGhlcmUgYXJlIGlucHV0cyB3aXRoICdwYXR0ZXJuJyBkYXRhIGF0dHJpYnV0ZVxuXHQvLyB0aGVuIGluaXRpYWxpemUgdGhlbVxuXHROdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xufSk7XG5cbiIsIi8vIDIwMTYtMTkgLSBudG9wLm9yZ1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3codGFibGUpIHtcbiAgJChcInRib2R5IHRyLmVtcHR5Um93XCIsICQodGFibGUpKS5yZW1vdmUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEVtcHR5Um93KHRhYmxlLCBlbXB0eV9zdHIpIHtcbiAgdmFyIGNvbHVtbnMgPSAkKFwidGhlYWQgdGhcIiwgJCh0YWJsZSkpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgIHJldHVybiAkKHRoaXMpLmNzcygnZGlzcGxheScpICE9ICdub25lJztcbiAgfSkubGVuZ3RoO1xuICAkKFwidGJvZHlcIiwgJCh0YWJsZSkpLmh0bWwoJzx0ciBjbGFzcz1cImVtcHR5Um93XCI+PHRkIGNvbHNwYW49XCInICsgY29sdW1ucyArICdcIj48aT4nICsgZW1wdHlfc3RyICsgJzwvaT48L3RkPjwvdHI+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyh0YWJsZSkge1xuICAgcmV0dXJuICQoXCJ0cjpub3QoLmVtcHR5Um93KVwiLCAkKHRhYmxlKSkubGVuZ3RoIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUlzRW1wdHkodGFibGUpIHtcbiAgcmV0dXJuIGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zKHRhYmxlKSA9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0QnlGb3JtKGZvcm0pIHtcbiAgcmV0dXJuICQoXCJ0YWJsZVwiLCAkKFwiI2R0LXRvcC1kZXRhaWxzXCIsICQoZm9ybSkpLnBhcmVudCgpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlVW5kb0FkZFJvdyhuZXdfcm93LCBlbXB0eV9zdHIsIGJ0X3RvX2VuYWJsZSwgY2FsbGJhY2tfc3RyKSB7XG4gIGlmIChidF90b19lbmFibGUpXG4gICAgICQoYnRfdG9fZW5hYmxlKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcblxuICB2YXIgZm9ybSA9ICQobmV3X3JvdykuY2xvc2VzdChcImZvcm1cIik7XG4gICQobmV3X3JvdykucmVtb3ZlKCk7XG4gIGF5c1VwZGF0ZUZvcm0oZm9ybSk7XG4gIHZhciBkdCA9IGRhdGF0YWJsZUdldEJ5Rm9ybShmb3JtKTtcblxuICBpZiAoZGF0YXRhYmxlSXNFbXB0eShkdCkpXG4gICAgIGRhdGF0YWJsZUFkZEVtcHR5Um93KGR0LCBlbXB0eV9zdHIpO1xuXG4gICBpZiAoY2FsbGJhY2tfc3RyKVxuICAgICAgLy8gaW52b2tlXG4gICAgICB3aW5kb3dbY2FsbGJhY2tfc3RyXShuZXdfcm93KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUZvckVhY2hSb3codGFibGUsIGNhbGxiYWNrcykge1xuICAgJChcInRyOm5vdCg6Zmlyc3QpXCIsIHRhYmxlKS5lYWNoKGZ1bmN0aW9uKHJvd19pKSB7XG4gICAgICBpZih0eXBlb2YgY2FsbGJhY2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICBjYWxsYmFja3MuYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgdmFyIGk7XG4gICAgICAgICBmb3IgKGk9MDsgaTxjYWxsYmFja3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBjYWxsYmFja3NbaV0uYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9XG4gICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgbGFiZWwsIGJzX2NsYXNzLCBjYWxsYmFja19zdHIsIGxpbmssIHZpc2libGUgPSB0cnVlLCB0aXRsZSA9ICcnKSB7XG4gICBpZiAoJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmZpbmQoJ2Rpdi5kLWZsZXgnKS5sZW5ndGggPT0gMCkge1xuICAgICAgJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmVtcHR5KCk7XG4gICAgICAkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuYXBwZW5kKCQoXCI8ZGl2IGNsYXNzPSdkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlcic+PC9kaXY+XCIpKTtcbiAgIH1cbiAgICQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5maW5kKCcuZC1mbGV4JykuYXBwZW5kKCc8YSBocmVmPVwiJyArIGxpbmsgKyBgXCIgdGl0bGU9JyR7dGl0bGV9JyBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBteC0xICR7YnNfY2xhc3N9ICR7IXZpc2libGUgPyAnZGlzYWJsZWQnIDogJyd9XCIgb25jbGljaz1cImAgKyBjYWxsYmFja19zdHIgKyAnXCIgcm9sZT1cImJ1dHRvblwiPicgKyBsYWJlbCArICc8L2E+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGNhbGxiYWNrX3N0ciwgbGFiZWwpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWRhbmdlclwiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHRydWUsICdEZWxldGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgY2FsbGJhY2tfc3RyLCBsYWJlbCwgdmlzaWJsZSA9IHRydWUsIHRpdGxlID0gJycpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgY2FsbGJhY2tfc3RyLCBcImphdmFzY3JpcHQ6dm9pZCgwKVwiLCB2aXNpYmxlLCB0aXRsZSk7XG59XG4gICAgXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBjYWxsYmFja19zdHIsIGxhYmVsLCB0aXRsZSA9ICcnLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4td2FybmluZ1wiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHZpc2libGUsIHRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGxpbmssIGxhYmVsLCB0aXRsZSA9ICcnKSB7XG4gICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgXCJcIiwgbGluaywgdHJ1ZSwgdGl0bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSh0cl9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zKSB7XG4gICBvcHRpb25zID0gTnRvcFV0aWxzLnBhcmFtc0V4dGVuZCh7XG4gICAgICBvbl9jaGFuZ2U6ICQubm9vcCwgICAgICAgICAgICAgICAgICAgICAvKiBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3QgaW5wdXQgY2hhbmdlcyAqL1xuICAgICAgc2VsZWN0b3JfZm46IGZ1bmN0aW9uKG9iaikgeyAgICAgICAgICAgLyogQSBjYWxsYmFjayB3aGljaCByZWNlaXZlcyBhIHRyIG9iamVjdCBhbmQgcmV0dXJucyBhIHNpbmdsZSBzZWxlY3QgaW5wdXQgKi9cbiAgICAgICAgIHJldHVybiBvYmouZmluZChcInNlbGVjdFwiKS5maXJzdCgpO1xuICAgICAgfSxcbiAgIH0sIG9wdGlvbnMpO1xuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuKHRoaXNfc2VsZWN0LCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGNhbGxiYWNrKSB7XG4gICAgICAkKFwiW2lkXj1cIiArIGFkZGVkX3Jvd3NfcHJlZml4ICsgXCJdXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgIHZhciBvdGhlciA9IHNlbGVjdG9yX2ZuKCQodGhpcykpO1xuICAgICAgICAgaWYgKG90aGVyWzBdICE9IHRoaXNfc2VsZWN0WzBdKVxuICAgICAgICAgICAgY2FsbGJhY2sob3RoZXIpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhvcHRpb25fb2JqLCBlbmFibGUpIHtcbiAgICAgIGlmIChlbmFibGUpIHtcbiAgICAgICAgIG9wdGlvbl9vYmoucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhciBzZWxlY3Rfb2JqID0gb3B0aW9uX29iai5jbG9zZXN0KFwic2VsZWN0XCIpO1xuICAgICAgICAgdmFyIHNob3VsZF9yZXNldCA9IChzZWxlY3Rfb2JqLnZhbCgpID09IG9wdGlvbl9vYmoudmFsKCkpO1xuICAgICAgICAgb3B0aW9uX29iai5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcblxuICAgICAgICAgaWYoc2hvdWxkX3Jlc2V0KSB7XG4gICAgICAgICAgICB2YXIgbmV3X3ZhbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKS52YWwoKTtcbiAgICAgICAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgICAgICAgc2VsZWN0X29iai5hdHRyKFwiZGF0YS1vbGQtdmFsXCIsIG5ld192YWwpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlKGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgY2hhbmdlX2NhbGxiYWNrKSB7XG4gICAgICB2YXIgb2xkX3ZhbHVlID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1vbGQtdmFsXCIpIHx8IFwiXCI7XG4gICAgICB2YXIgbmV3X3ZhbHVlID0gJCh0aGlzKS52YWwoKSB8fCBcIlwiO1xuICAgICAgdmFyIG90aGVycyA9IFtdO1xuXG4gICAgICBpZiAob2xkX3ZhbHVlID09IG5ld192YWx1ZSlcbiAgICAgICAgIG9sZF92YWx1ZSA9IFwiXCI7XG5cbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oJCh0aGlzKSwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKG90aGVyLmZpbmQoXCJvcHRpb25bdmFsdWU9J1wiICsgb2xkX3ZhbHVlICsgXCInXVwiKSwgdHJ1ZSk7XG4gICAgICAgICBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMob3RoZXIuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBuZXdfdmFsdWUgKyBcIiddXCIpLCBmYWxzZSk7XG4gICAgICAgICBvdGhlcnMucHVzaChvdGhlcik7XG4gICAgICB9KTtcblxuICAgICAgY2hhbmdlX2NhbGxiYWNrKCQodGhpcyksIG9sZF92YWx1ZSwgbmV3X3ZhbHVlLCBvdGhlcnMsIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyk7XG5cbiAgICAgICQodGhpcykuYXR0cihcImRhdGEtb2xkLXZhbFwiLCBuZXdfdmFsdWUpO1xuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPbkFkZFNlbGVjdEVudHJ5KHNlbGVjdF9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbikge1xuICAgICAgc2VsZWN0X29iai52YWwoXCJcIik7XG5cbiAgICAgIC8vIFRyaWdnZXIgYW4gdXBkYXRlIG9uIG90aGVyIGlucHV0cyBpbiBvcmRlciB0byBkaXNhYmxlIGVudHJpZXMgb24gdGhlIHNlbGVjdF9vYmpcbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oc2VsZWN0X29iaiwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgLy9kYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMoc2VsZWN0X29iai5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIG90aGVyLnZhbCgpICsgXCInXVwiKSwgZmFsc2UpO1xuICAgICAgICAgb3RoZXIudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBzZWxlY3QgZmlyc3QgYXZhaWxhYmxlIGVudHJ5XG4gICAgICB2YXIgbmV3X3NlbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKTtcbiAgICAgIHZhciBuZXdfdmFsID0gbmV3X3NlbC52YWwoKTtcblxuICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIG90aGVyIGVudHJpZXNcbiAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgc2VsZWN0X29iai50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgfVxuXG4gICB2YXIgc2VsZWN0ID0gb3B0aW9ucy5zZWxlY3Rvcl9mbih0cl9vYmopO1xuICAgc2VsZWN0Lm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCkgeyBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlLmJpbmQodGhpcykoYWRkZWRfcm93c19wcmVmaXgsIG9wdGlvbnMuc2VsZWN0b3JfZm4sIG9wdGlvbnMub25fY2hhbmdlKTsgfSk7XG4gICBzZWxlY3Qub24oXCJyZW1vdmVcIiwgZnVuY3Rpb24oKSB7JCh0aGlzKS52YWwoXCJcIikudHJpZ2dlcihcImNoYW5nZVwiKX0pO1xuICAgZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeShzZWxlY3QsIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zLnNlbGVjdG9yX2ZuKTtcbn1cblxuZnVuY3Rpb24gZGF0YXRhYmxlT3JkZXJlZEluc2VydCh0YWJsZSwgdGRfaWR4LCB0b19pbnNlcnQsIHRvX2luc2VydF92YWwsIGNtcF9mbikge1xuICAgdmFyIGNtcF9mbiA9IGNtcF9mbiB8fCBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBiIC0gYTsgfTtcbiAgIHZhciBpbnNlcnRlZCA9IGZhbHNlO1xuXG4gICBkYXRhdGFibGVGb3JFYWNoUm93KHRhYmxlLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmKGluc2VydGVkKSByZXR1cm47XG5cbiAgICAgIHZhciB0ciA9ICQodGhpcyk7XG4gICAgICB2YXIgY21wX3ZhbCA9IHBhcnNlSW50KCQoXCJ0ZDpudGgtY2hpbGQoXCIgKyB0ZF9pZHggKyBcIilcIiwgdHIpLmh0bWwoKSk7XG5cbiAgICAgIGlmICgoISBpc05hTihjbXBfdmFsKSkgJiYgKGNtcF9mbihjbXBfdmFsLCB0b19pbnNlcnRfdmFsKSA8IDApKSB7XG4gICAgICAgICB0ci5iZWZvcmUodG9faW5zZXJ0KTtcbiAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgIH0pO1xuXG4gICBpZiAoISBpbnNlcnRlZClcbiAgICAgIC8vIGRlZmF1bHQ6IGFwcGVuZFxuICAgICAgJCh0YWJsZSkuYXBwZW5kKHRvX2luc2VydCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVJc0xhc3RQYWdlKHRhYmxlKSB7XG4gICB2YXIgbGFzdHBhZ2UgPSAkKFwiI2R0LWJvdHRvbS1kZXRhaWxzIC5wYWdpbmF0aW9uIGxpOm50aC1sYXN0LWNoaWxkKDMpXCIsICQodGFibGUpKTtcbiAgIHJldHVybiAhKChsYXN0cGFnZS5sZW5ndGggPT0gMSkgJiYgKGxhc3RwYWdlLmhhc0NsYXNzKFwiYWN0aXZlXCIpID09IGZhbHNlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW4odGFibGUsIGlkX2tleSwgaWRfdmFsdWUpIHtcbiAgIHZhciByZXMgPSB0YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpLnJlc3VsdHNldC5kYXRhLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbVtpZF9rZXldID09PSBpZF92YWx1ZTtcbiAgIH0pO1xuXG4gICBpZihyZXMpIHJldHVybiByZXNbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCh0YWJsZSwgY29sdW1uX2tleSkge1xuICAgdmFyIGluZGV4ID0gdGFibGUuZGF0YShcImRhdGF0YWJsZVwiKS5vcHRpb25zLmNvbHVtbnMuZmluZEluZGV4KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmZpZWxkID09PSBjb2x1bW5fa2V5O1xuICAgfSk7XG5cbiAgIHJldHVybihpbmRleCk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gYWRkIHJlZnJlc2hhYmxlIGRhdGF0YWJsZXMgcm93cy5cbiAqXG4gKiB0YWJsZTogdGhlIGRhdGF0YWJsZSBkaXYganF1ZXJ5IG9iamVjdFxuICogY29sdW1uX2lkOiB0aGUgZmllbGQga2V5IHVzZWQgdG8gaW5kZW50aWZ5IHRoZSByb3dzXG4gKiByZWZyZXNoX2ludGVydmFsOiBtaWxsaXNlY29uZHMgcmVmcmVzaCBpbnRlcnZhbCBmb3IgdGhpcyB0YWJsZVxuICogdHJlbmRfY29sdW1uczogKG9wdGlvbmFsKSBhIG1hcCA8ZmllbGQgLT4gZm9ybWF0dGVyX2ZuPiB3aGljaCBpbmRpY2F0ZXMgdGhlIG51bWVyaWMgY29sdW1uc1xuICogd2hpY2ggc2hvdWxkIGJlIHNob3duIHdpdGggdXAvZG93biBhcnJvd3MgdXBvbiByZWZyZXNoLlxuICpcbiAqIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgJChcIiN0YWJsZS1yZWRpcy1zdGF0c1wiKS5kYXRhdGFibGUoe1xuICogICAgIC4uLlxuICogICAgIHRhYmxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgLy8gVGhlIHRhYmxlIHJvd3Mgd2lsbCBiZSBpZGVudGlmaWVkIGJ5IHRoZSBcImNvbHVtbl9rZXlcIixcbiAqICAgICAgIC8vIHJlZnJlc2hlZCBldmVyeSA1IHNlY29uZHMsIHdpdGggdXAvZG93biBhcnJvd3Mgb24gdGhlIFwiY29sdW1uX2hpdHNcIlxuICogICAgICAgZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKCQoXCIjdGFibGUtcmVkaXMtc3RhdHNcIiksIFwiY29sdW1uX2tleVwiLCA1MDAwLCB7XCJjb2x1bW5faGl0c1wiOiBhZGRDb21tYXN9KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKHRhYmxlLCBjb2x1bW5faWQsIHJlZnJlc2hfaW50ZXJ2YWwsIHRyZW5kX2NvbHVtbnMpIHtcbiAgdmFyICRkdCA9IHRhYmxlLmRhdGEoXCJkYXRhdGFibGVcIik7XG4gIHZhciByb3dzID0gJGR0LnJlc3VsdHNldC5kYXRhO1xuICB2YXIgb2xkX3RpbWVyID0gdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIpO1xuICB2YXIgb2xkX3JlcSA9IHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIpO1xuICB0cmVuZF9jb2x1bW5zID0gdHJlbmRfY29sdW1ucyB8fCB7fTtcblxuICBpZihvbGRfdGltZXIpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHByZXZpb3VzbHkgc2V0IHRpbWVyIHRvIGF2b2lkIGRvdWJsZSBzY2hlZHVsaW5nXG4gICAgY2xlYXJJbnRlcnZhbChvbGRfdGltZXIpO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci10aW1lclwiKTtcbiAgfVxuXG4gIGlmKG9sZF9yZXEpIHtcbiAgICAvLyBBYm9ydCB0aGUgcHJldmlvdXMgcmVxdWVzdCBpZiBhbnlcbiAgICBvbGRfcmVxLmFib3J0KCk7XG4gICAgdGFibGUucmVtb3ZlRGF0YShcImR0LXJyLWFqYXhcIik7XG4gIH1cblxuICB2YXIgaWRzID0gW107XG4gIHZhciBpZF90b19yb3cgPSB7fTtcblxuICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgdmFyIGRhdGEgPSByb3dzW3Jvd107XG5cbiAgICBpZihkYXRhW2NvbHVtbl9pZF0pIHtcbiAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuICAgICAgaWRfdG9fcm93W2RhdGFfaWRdID0gcm93O1xuICAgICAgaWRzLnB1c2goZGF0YV9pZCk7XG4gICAgfVxuICB9XG5cbiAgaWYoIWlkcylcbiAgICByZXR1cm4oZmFsc2UpO1xuXG4gIC8vIFRoZXNlIHBhcmFtZXRlcnMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHJlZnJlc2ggZW5kcG9pbnRcbiAgLy8gdGhlIGN1c3RvbV9ob3N0cyBwYXJhbWV0ZXIgd2lsbCBiZSBwYXNzZWQgaW4gdGhlIEFKQVggcmVxdWVzdCBhbmRcbiAgLy8gd2lsbCBjb250YWluIHRoZSBJRHMgdG8gcmVmcmVzaC4gSXQgc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHJlY2VpdmluZ1xuICAvLyBMdWEgc2NyaXB0IGFzIGEgZmlsdGVyXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgXCJjdXN0b21faG9zdHNcIjogaWRzLmpvaW4oXCIsXCIpXG4gIH07XG4gIHZhciB1cmwgPSAkZHQub3B0aW9ucy51cmw7XG4gIHZhciBmaXJzdF9sb2FkID0gdHJ1ZTtcblxuICB2YXIgX3Byb2Nlc3NfcmVzdWx0ID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgaWYodHlwZW9mKHJlc3VsdCkgPT09IFwic3RyaW5nXCIpXG4gICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG5cbiAgICBpZighcmVzdWx0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQmFkIEpTT04gcmVzdWx0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvcih2YXIgcm93IGluIHJlc3VsdC5kYXRhKSB7XG4gICAgICAgdmFyIGRhdGEgPSByZXN1bHQuZGF0YVtyb3ddO1xuICAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuXG4gICAgICAgaWYoZGF0YV9pZCAmJiBpZF90b19yb3dbZGF0YV9pZF0pIHtcbiAgICAgICAgICB2YXIgcm93X2lkeCA9IGlkX3RvX3Jvd1tkYXRhX2lkXTtcbiAgICAgICAgICB2YXIgcm93X2h0bWwgPSAkZHQucm93c1tyb3dfaWR4XTtcbiAgICAgICAgICB2YXIgcm93X3RkcyA9ICQoXCJ0ZFwiLCByb3dfaHRtbCk7XG5cbiAgICAgICAgICAvKiBUcnkgdG8gdXBkYXRlIGFsbCB0aGUgZmllbGRzIGZvciB0aGUgY3VycmVudCByb3cgKHJvd19odG1sKSAqL1xuICAgICAgICAgIGZvcih2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICB2YXIgY29sX2lkeCA9IGRhdGF0YWJsZUdldENvbHVtbkluZGV4KHRhYmxlLCBrZXkpO1xuICAgICAgICAgICAgIHZhciBjZWxsID0gcm93X3Rkc1tjb2xfaWR4XTtcbiAgICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGNlbGwpO1xuXG4gICAgICAgICAgICAgdmFyIG9sZF92YWwgPSAkY2VsbC5kYXRhKFwiZHQtcnItY3VyLXZhbFwiKSB8fCAkKGNlbGwpLmh0bWwoKTtcbiAgICAgICAgICAgICB2YXIgdHJlbmRfdmFsdWVfZm9ybWF0dGVyID0gdHJlbmRfY29sdW1uc1trZXldO1xuICAgICAgICAgICAgIHZhciBuZXdfdmFsID0gZGF0YVtrZXldO1xuICAgICAgICAgICAgIHZhciBhcnJvd3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgaWYodHJlbmRfdmFsdWVfZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgIGlmKHBhcnNlRmxvYXQobmV3X3ZhbCkgIT0gbmV3X3ZhbClcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIG51bWJlcjogXCIgKyBuZXdfdmFsKTtcblxuICAgICAgICAgICAgICBpZighZmlyc3RfbG9hZClcbiAgICAgICAgICAgICAgICBhcnJvd3MgPSBcIiBcIiArIE50b3BVdGlscy5kcmF3VHJlbmQocGFyc2VGbG9hdChuZXdfdmFsKSwgcGFyc2VGbG9hdChvbGRfdmFsKSk7XG5cbiAgICAgICAgICAgICAgLy8gVGhpcyB2YWx1ZSB3aWxsIGJlIG5lZWRlIGluIHRoZSBuZXh0IHJlZnJlc2hcbiAgICAgICAgICAgICAgJGNlbGwuZGF0YShcImR0LXJyLWN1ci12YWxcIiwgbmV3X3ZhbCk7XG5cbiAgICAgICAgICAgICAgbmV3X3ZhbCA9IHRyZW5kX3ZhbHVlX2Zvcm1hdHRlcihuZXdfdmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICQoY2VsbCkuaHRtbCgobmV3X3ZhbCAhPSAwKSA/IChuZXdfdmFsICsgYXJyb3dzKSA6IFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyc3RfbG9hZCA9IGZhbHNlO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci1hamF4XCIpO1xuIH07XG5cbiAgLy8gU2F2ZSB0aGUgdGltZXIgaW50byBcImR0LXJyLXRpbWVyXCIgdG8gYmUgYWJsZSB0byBzdG9wIGl0IGlmXG4gIC8vIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyBpcyBjYWxsZWQgYWdhaW5cbiAgdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIsIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIC8vIERvdWJsZSBjaGVjayB0aGF0IGEgcmVxdWVzdCBpcyBub3QgcGVuZGluZ1xuICAgIHZhciBvbGRfcmVxID0gdGFibGUuZGF0YShcImR0LXJyLWFqYXhcIik7XG5cbiAgICBpZihvbGRfcmVxKVxuICAgICAgcmV0dXJuO1xuXG4gICAgLy8gU2F2ZSB0aGUgYWpheCByZXF1ZXN0IHRvIHBvc3NpYmx5IGFib3J0IGl0IGlmXG4gICAgLy8gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzIGlzIGNhbGxlZCBhZ2FpblxuICAgIHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIsICQuYWpheCh7XG4gICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgdXJsOiB1cmwsXG4gICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICBzdWNjZXNzOiBfcHJvY2Vzc19yZXN1bHQsXG4gICAgfSkpO1xuICB9LCByZWZyZXNoX2ludGVydmFsKSk7XG5cbiAgLy8gRmlyc3QgdXBkYXRlXG4gIF9wcm9jZXNzX3Jlc3VsdCgkZHQucmVzdWx0c2V0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkcmF3X3Byb2Nlc3Nlc19ncmFwaChodHRwX3ByZWZpeCwgZ3JhcGhfZGl2X2lkLCBob3N0KSB7XG4gICAgdmFyIGxpbmtzO1xuICAgIHZhciBub2RlcyA9IHt9O1xuXG4gICAgdmFyIHVybCA9IGh0dHBfcHJlZml4ICsgJy9sdWEvZ2V0X3Byb2Nlc3Nlc19ncmFwaF9kYXRhLmx1YT9ob3N0PScgKyBob3N0O1xuXG4gICAgZDMuanNvbih1cmwsIGZ1bmN0aW9uKGVycm9yLCBqc29uKSB7XG5cdGlmKGVycm9yKVxuXHQgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnJvcik7XG5cblx0bGlua3MgPSBqc29uO1xuXHR2YXIgX2xpbms7XG5cblx0Ly8gQ29tcHV0ZSB0aGUgZGlzdGluY3Qgbm9kZXMgZnJvbSB0aGUgbGlua3MuXG5cdGxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuXHQgICAgaWYobGluay5zb3VyY2VfcGlkID09IC0xKSB7XG5cdFx0LyogSVAgQWRkcmVzcyAtPiBQSUQgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD1cIiArIGxpbmsuc291cmNlO1xuXHQgICAgfSBlbHNlIHtcblx0XHQvKiBQSUQgLT4gSVAgQWRkcmVzcyAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvY2Vzc19kZXRhaWxzLmx1YT9waWQ9XCIgKyBsaW5rLnNvdXJjZV9waWQgKyBcIiZwaWRfbmFtZT1cIiArIGxpbmsuc291cmNlX25hbWUgKyBcIiZob3N0PVwiICsgaG9zdCArIFwiJnBhZ2U9Zmxvd3NcIjtcblx0ICAgIH1cblxuXHQgICAgbGluay5zb3VyY2UgPSBub2Rlc1tsaW5rLnNvdXJjZV1cblx0XHR8fCAobm9kZXNbbGluay5zb3VyY2VdID0ge1xuXHRcdCAgICBuYW1lOiBsaW5rLnNvdXJjZV9uYW1lLCBudW06bGluay5zb3VyY2UsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnNvdXJjZV90eXBlLCBwaWQ6IGxpbmsuc291cmNlX3BpZFxuXHRcdH0pO1xuXG5cdCAgICBpZihsaW5rLnRhcmdldF9waWQgPT0gLTEpIHtcblx0XHQvKiBJUCBBZGRyZXNzIC0+IFBJRCAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PVwiICsgbGluay50YXJnZXQ7XG5cdCAgICB9IGVsc2Uge1xuXHRcdC8qIFBJRCAtPiBJUCBBZGRyZXNzICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm9jZXNzX2RldGFpbHMubHVhP3BpZD1cIiArIGxpbmsudGFyZ2V0X3BpZCArIFwiJnBpZF9uYW1lPVwiICsgbGluay50YXJnZXRfbmFtZSArIFwiJmhvc3Q9XCIgKyBob3N0ICsgXCImcGFnZT1mbG93c1wiO1xuXHQgICAgfVxuXG5cdCAgICBsaW5rLnRhcmdldCA9IG5vZGVzW2xpbmsudGFyZ2V0XVxuXHRcdHx8IChub2Rlc1tsaW5rLnRhcmdldF0gPSB7XG5cdFx0ICAgIG5hbWU6IGxpbmsudGFyZ2V0X25hbWUsIG51bTogbGluay50YXJnZXQsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnRhcmdldF90eXBlLCBwaWQ6IGxpbmsudGFyZ2V0X3BpZFxuXHRcdH0pO1xuXHR9KTtcblxuXHR2YXIgd2lkdGggPSA5NjAsIGhlaWdodCA9IDUwMCwgYXJyb3dfc2l6ZSA9IDY7XG5cdHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MTAoKTtcblxuXHQvKiBTYW1lIGNvbG9ycyBhcyB0aG9zZSB1c2VkIGluIHRoZSBmbG93X2RldGFpbHMubHVhIHBhZ2UgdG8gcmVwcmVzZW50IGhvc3RzIGFuZCBwcm9jZXNzZXMgKi9cblx0Y29sb3JbXCJwcm9jXCJdID0gXCJyZWRcIjtcblx0Y29sb3JbXCJob3N0XCJdID0gXCJsaWdodHN0ZWVsYmx1ZVwiO1xuXG5cdHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpXG5cdCAgICAubm9kZXMoZDMudmFsdWVzKG5vZGVzKSlcblx0ICAgIC5saW5rcyhsaW5rcylcblx0ICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcblx0ICAgIC5saW5rRGlzdGFuY2UoMTIwKSAvLyBBcmMgbGVuZ3RoXG5cdCAgICAuY2hhcmdlKC00MDApXG5cdCAgICAub24oXCJ0aWNrXCIsIHRpY2spXG5cdCAgICAuc3RhcnQoKTtcblxuXHR2YXIgc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgZ3JhcGhfZGl2X2lkKS5hcHBlbmQoXCJzdmdcIilcblx0ICAgIC5hdHRyKFwiaWRcIiwgXCJlYnBmX2dyYXBoXCIpXG5cdCAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHQgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KTtcblxuXHQvLyBQZXItdHlwZSBtYXJrZXJzLCBhcyB0aGV5IGRvbid0IGluaGVyaXQgc3R5bGVzLlxuXHRzdmcuYXBwZW5kKFwiZGVmc1wiKS5zZWxlY3RBbGwoXCJtYXJrZXJcIilcblx0ICAgIC5kYXRhKFtcInByb2MycHJvY1wiLCBcInByb2MyaG9zdFwiLCBcImhvc3QycHJvY1wiLCBcImhvc3QyaG9zdFwiXSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcIm1hcmtlclwiKVxuXHQgICAgLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXHQgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAtNSAyMCAyMFwiKVxuXHQgICAgLmF0dHIoXCJyZWZYXCIsIDE1KVxuXHQgICAgLmF0dHIoXCJyZWZZXCIsIC0xLjUpXG5cdCAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIGFycm93X3NpemUpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgYXJyb3dfc2l6ZSlcblx0ICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKVxuXHQgICAgLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuXG5cdHZhciBwYXRoID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwicGF0aFwiKVxuXHQgICAgLmRhdGEoZm9yY2UubGlua3MoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJsaW5rIFwiICsgZC50eXBlOyB9KVxuXHQgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidXJsKCNcIiArIGQudHlwZSArIFwiKVwiOyB9KTtcblxuXG5cdHZhciBjaXJjbGUgPSBzdmcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0ICAgIC5kYXRhKGZvcmNlLm5vZGVzKCkpXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX2NpcmNsZVwiKVxuXHQgICAgLmF0dHIoXCJyXCIsIDE1KSAvKiBSYWRpdXMgKi9cblx0ICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY29sb3JbZC50eXBlXTsgfSlcblx0ICAgIC5jYWxsKGZvcmNlLmRyYWcpXG5cdCAgICAub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLmxpbms7XG5cdCAgICB9ICk7XG5cblx0Ly8gQ2lyY2xlIGxhYmVsXG5cdHZhciB0ZXh0ID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHQgICAgLmRhdGEoZm9yY2Uubm9kZXMoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX3RleHRcIilcblx0ICAgIC5hdHRyKFwieFwiLCAxMilcblx0ICAgIC5hdHRyKFwieVwiLCBcIjAuNXJlbVwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMXJlbVwiKVxuXHQgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuXHRcdGlmKGQucGlkID49IDApIC8vIFByb2Nlc3Ncblx0XHQgICAgcmV0dXJuKGQubmFtZSArIFwiIFtwaWQ6IFwiK2QucGlkK1wiXVwiKTtcblx0XHRlbHNlIHsgLy8gSG9zdFxuXHRcdCAgICByZXR1cm4oZC5uYW1lKTtcblx0XHR9XG5cdCAgICB9KTtcblxuXHQvLyBVc2UgZWxsaXB0aWNhbCBhcmMgcGF0aCBzZWdtZW50cyB0byBkb3VibHktZW5jb2RlIGRpcmVjdGlvbmFsaXR5LlxuXHRmdW5jdGlvbiB0aWNrKCkge1xuXHQgICAgcGF0aC5hdHRyKFwiZFwiLCBsaW5rQXJjKTtcblx0ICAgIGNpcmNsZS5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG5cdCAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxpbmtBcmMoZCkge1xuXHQgICAgdmFyIGR4ID0gZC50YXJnZXQueCAtIGQuc291cmNlLngsXG5cdFx0ZHkgPSBkLnRhcmdldC55IC0gZC5zb3VyY2UueSxcblx0XHRkciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdCAgICByZXR1cm4gXCJNXCIgKyBkLnNvdXJjZS54ICsgXCIsXCIgKyBkLnNvdXJjZS55ICsgXCJBXCIgKyBkciArIFwiLFwiICsgZHIgKyBcIiAwIDAsMSBcIiArIGQudGFyZ2V0LnggKyBcIixcIiArIGQudGFyZ2V0Lnk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm0oZCkge1xuXHQgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcblx0fVxuICAgIH0pO1xufVxuIiwiLy8gMjAxOSAtIG50b3Aub3JnXG5cbnZhciBzY2hlbWFfMl9sYWJlbCA9IHt9O1xudmFyIGRhdGFfMl9sYWJlbCA9IHt9O1xudmFyIGdyYXBoX2kxOG4gPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRMYWJlbE1hcHMoX3NjaGVtYV8yX2xhYmVsLCBfZGF0YV8yX2xhYmVsLCBfZ3JhcGhfaTE4bikge1xuICBzY2hlbWFfMl9sYWJlbCA9IF9zY2hlbWFfMl9sYWJlbDtcbiAgZGF0YV8yX2xhYmVsID0gX2RhdGFfMl9sYWJlbDtcbiAgZ3JhcGhfaTE4biA9IF9ncmFwaF9pMThuO1xufTtcblxuZnVuY3Rpb24gZ2V0U2VyaWVMYWJlbChzY2hlbWEsIHNlcmllLCB2aXN1YWxpemF0aW9uLCBzZXJpZV9pbmRleCkge1xuICB2YXIgZGF0YV9sYWJlbCA9IHNlcmllLmxhYmVsO1xuICB2YXIgbmV3X2xhYmVsID0gZGF0YV8yX2xhYmVsW2RhdGFfbGFiZWxdO1xuXG4gIGlmKHZpc3VhbGl6YXRpb24gJiYgdmlzdWFsaXphdGlvbi5tZXRyaWNzX2xhYmVscyAmJiB2aXN1YWxpemF0aW9uLm1ldHJpY3NfbGFiZWxzW3NlcmllX2luZGV4XSlcbiAgICByZXR1cm4gdmlzdWFsaXphdGlvbi5tZXRyaWNzX2xhYmVsc1tzZXJpZV9pbmRleF07XG5cbiAgICBpZihzZXJpZS5leHRfbGFiZWwpIHtcblx0aWYobmV3X2xhYmVsKVxuXHQgICAgcmV0dXJuIHNlcmllLmV4dF9sYWJlbCArIFwiIChcIiArIG5ld19sYWJlbCArIFwiKVwiO1xuXHRlbHNlXG5cdCAgICByZXR1cm4gc2VyaWUuZXh0X2xhYmVsO1xuICAgIH0gIGVsc2UgaWYoKHNjaGVtYSA9PSBcInRvcDpsb2NhbF9zZW5kZXJzXCIpIHx8IChzY2hlbWEgPT0gXCJ0b3A6bG9jYWxfcmVjZWl2ZXJzXCIpKSB7XG4gICAgaWYoc2VyaWUuZXh0X2xhYmVsKVxuICAgICAgcmV0dXJuIHNlcmllLmV4dF9sYWJlbDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5ob3N0XG4gIH0gZWxzZSBpZihzY2hlbWEuc3RhcnRzV2l0aChcInRvcDpcIikpIHsgLy8gdG9wayBncmFwaHNcbiAgICBpZihzZXJpZS50YWdzLnByb3RvY29sKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MucHJvdG9jb2w7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmNhdGVnb3J5KVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuY2F0ZWdvcnk7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmw0cHJvdG8pXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5sNHByb3RvO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5kc2NwX2NsYXNzKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuZHNjcF9jbGFzcztcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MuaWZfaW5kZXgpIHsgLy8gU05NUCBpbnRlcmZhY2VcbiAgICAgIGlmKHNlcmllLmV4dF9sYWJlbCAhPSBcIlwiKVxuICAgICAgICAgIHJldHVybiBzZXJpZS5leHRfbGFiZWw7XG5cdGVsc2VcbiAgICAgICAgICByZXR1cm4gXCIoXCIgKyBzZXJpZS50YWdzLmlmX2luZGV4ICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MucG9ydCkgLy8gRmxvdyBkZXZpY2VcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLnBvcnQ7XG4gICAgZWxzZSBpZihzZXJpZS50YWdzLmV4cG9ydGVyICYmIHNlcmllLnRhZ3MuaWZuYW1lKSAvLyBFdmVudCBleHBvcnRlclxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuaWZuYW1lO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5wcm9maWxlKVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5wcm9maWxlO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5jaGVjaylcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLmNoZWNrO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5jb21tYW5kKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MuY29tbWFuZC5zdWJzdHJpbmcoNCkudG9VcHBlckNhc2UoKTtcbiAgfSBlbHNlIGlmKGRhdGFfbGFiZWwgIT0gXCJieXRlc1wiKSB7IC8vIHNpbmdsZSBzZXJpZXNcbiAgICBpZihzZXJpZS50YWdzLnByb3RvY29sKVxuICAgICAgcmV0dXJuIHNlcmllLnRhZ3MucHJvdG9jb2wgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuY2F0ZWdvcnkpXG4gICAgICByZXR1cm4gc2VyaWUudGFncy5jYXRlZ29yeSArIFwiIChcIiArIG5ld19sYWJlbCArIFwiKVwiO1xuICAgIGVsc2UgaWYoc2VyaWUudGFncy5kZXZpY2UgJiYgc2VyaWUudGFncy5pZl9pbmRleCkgLy8gU05NUCBpbnRlcmZhY2VcbiAgICAgIHJldHVybiBzZXJpZS5leHRfbGFiZWwgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgICBlbHNlIGlmKHNlcmllLnRhZ3MuZGV2aWNlICYmIHNlcmllLnRhZ3MucG9ydCkgLy8gRmxvdyBkZXZpY2VcbiAgICAgIHJldHVybiBzZXJpZS50YWdzLnBvcnQgKyBcIiAoXCIgKyBuZXdfbGFiZWwgKyBcIilcIjtcbiAgfSBlbHNlIHtcbiAgICAgIGlmKHNlcmllLnRhZ3MucHJvdG9jb2wpXG4gICAgICAgIHJldHVybiBzZXJpZS50YWdzLnByb3RvY29sO1xuICAgICAgZWxzZSBpZihzZXJpZS50YWdzLmNhdGVnb3J5KVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5jYXRlZ29yeTtcbiAgICAgIGVsc2UgaWYoc2VyaWUudGFncy5wcm9maWxlKVxuICAgICAgICByZXR1cm4gc2VyaWUudGFncy5wcm9maWxlO1xuICAgICAgZWxzZSBpZihkYXRhX2xhYmVsID09IFwiYnl0ZXNcIikge1xuICAgICAgICBpZihzY2hlbWEuY29udGFpbnMoXCJ2b2x1bWVcIikpXG4gICAgICAgICAgcmV0dXJuIGdyYXBoX2kxOG4udHJhZmZpY192b2x1bWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gZ3JhcGhfaTE4bi50cmFmZmljO1xuICAgICAgfVxuICB9XG5cbiAgaWYoc2NoZW1hXzJfbGFiZWxbc2NoZW1hXSlcbiAgICByZXR1cm4gTnRvcFV0aWxzLmNhcGl0YWxpc2VGaXJzdExldHRlcihzY2hlbWFfMl9sYWJlbFtzY2hlbWFdKTtcblxuICBpZihuZXdfbGFiZWwpXG4gICAgcmV0dXJuIE50b3BVdGlscy5jYXBpdGFsaXNlRmlyc3RMZXR0ZXIobmV3X2xhYmVsKTtcblxuICAvLyBkZWZhdWx0XG4gIHJldHVybiBOdG9wVXRpbHMuY2FwaXRhbGlzZUZpcnN0TGV0dGVyKGRhdGFfbGFiZWwpO1xufVxuXG4vLyBWYWx1ZSBmb3JtYXR0ZXJcbmZ1bmN0aW9uIGdldFZhbHVlRm9ybWF0dGVyKHNjaGVtYSwgbWV0cmljX3R5cGUsIHNlcmllcywgY3VzdG9tX2Zvcm1hdHRlciwgc3RhdHMpIHtcbiAgaWYoc2VyaWVzICYmIHNlcmllcy5sZW5ndGggJiYgc2VyaWVzWzBdLmxhYmVsKSB7XG4gICAgaWYoY3VzdG9tX2Zvcm1hdHRlcikge1xuICAgICAgdmFyIGZvcm1hdHRlcnMgPSBbXTtcblxuICAgICAgaWYodHlwZW9mKGN1c3RvbV9mb3JtYXR0ZXIpICE9IFwib2JqZWN0XCIpXG4gICAgICAgIGN1c3RvbV9mb3JtYXR0ZXIgPSBbY3VzdG9tX2Zvcm1hdHRlcl07XG5cbiAgICAgIGZvcih2YXIgaT0wOyBpPGN1c3RvbV9mb3JtYXR0ZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gdHJhbnNsYXRlIGZ1bmN0aW9uIG5hbWUgdG8gYWN0dWFsIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGN1c3RvbV9mb3JtYXR0ZXJbaV0ucmVwbGFjZShcIk50b3BVdGlscy5cIiwgXCJcIilcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyRnVuY3Rpb24gPSBOdG9wVXRpbHNbZnVuY3Rpb25OYW1lXTtcblxuICAgICAgICBpZih0eXBlb2YgZm9ybWF0dGVyRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2Fubm90IGZpbmQgY3VzdG9tIHZhbHVlIGZvcm1hdHRlciBcXFwiXCIgKyBjdXN0b21fZm9ybWF0dGVyICsgXCJcXFwiXCIpO1xuXG4gICAgICAgIGZvcm1hdHRlcnNbaV0gPSBmb3JtYXR0ZXJGdW5jdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuKGZvcm1hdHRlcnMpO1xuICAgIH1cblxuICAgIHZhciBsYWJlbCA9IHNlcmllc1swXS5sYWJlbDtcblxuICAgIGlmKGxhYmVsLmNvbnRhaW5zKFwiYnl0ZXNcIikpIHtcbiAgICAgIGlmKHNjaGVtYS5jb250YWlucyhcInZvbHVtZVwiKSB8fCBzY2hlbWEuY29udGFpbnMoXCJtZW1vcnlcIikgfHwgc2NoZW1hLmNvbnRhaW5zKFwic2l6ZVwiKSlcbiAgICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuYnl0ZXNUb1NpemUsIE50b3BVdGlscy5ieXRlc1RvU2l6ZV07XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBbTnRvcFV0aWxzLmZiaXRzX2Zyb21fYnl0ZXMsIE50b3BVdGlscy5ieXRlc1RvU2l6ZV07XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicGFja2V0c1wiKSlcbiAgICAgIHJldHVybiBbTnRvcFV0aWxzLmZwYWNrZXRzLCBOdG9wVXRpbHMuZm9ybWF0UGFja2V0c107XG4gICAgICBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicG9pbnRzXCIpKVxuICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuZnBvaW50cywgTnRvcFV0aWxzLmZvcm1hdFBvaW50c107XG4gICAgZWxzZSBpZihsYWJlbC5jb250YWlucyhcImZsb3dzXCIpKSB7XG4gICAgICB2YXIgYXNfY291bnRlciA9ICgobWV0cmljX3R5cGUgPT09IFwiY291bnRlclwiKSAmJiAoc2NoZW1hICE9PSBcImN1c3RvbTptZW1vcnlfdnNfZmxvd3NfaG9zdHNcIikpO1xuICAgICAgcmV0dXJuIFthc19jb3VudGVyID8gTnRvcFV0aWxzLmZmbG93cyA6IE50b3BVdGlscy5mb3JtYXRWYWx1ZSwgTnRvcFV0aWxzLmZvcm1hdEZsb3dzLCBhc19jb3VudGVyID8gTnRvcFV0aWxzLmZmbG93cyA6IE50b3BVdGlscy5mb3JtYXRGbG93c107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwibWlsbGlzXCIpIHx8IGxhYmVsLmNvbnRhaW5zKFwiX21zXCIpKSB7XG4gICAgICByZXR1cm4gW050b3BVdGlscy5mbWlsbGlzLCBOdG9wVXRpbHMuZm1pbGxpc107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwiYWxlcnRzXCIpICYmIChtZXRyaWNfdHlwZSA9PT0gXCJjb3VudGVyXCIpKSB7XG4gICAgICByZXR1cm4gW050b3BVdGlscy5mYWxlcnRzLCBOdG9wVXRpbHMuZmFsZXJ0c107XG4gICAgfSBlbHNlIGlmKGxhYmVsLmNvbnRhaW5zKFwicGVyY2VudFwiKSkge1xuICAgICAgcmV0dXJuIFtOdG9wVXRpbHMuZnBlcmNlbnQsIE50b3BVdGlscy5mcGVyY2VudF07XG4gICAgfVxuICB9XG5cbiAgLy8gZmFsbGJhY2tcbiAgaWYoc3RhdHMgJiYgKHN0YXRzLm1heF92YWwgPCAxKSkge1xuICAgIC8qIFVzZSB0aGUgZmxvYXQgZm9ybWF0dGVyIHRvIGF2b2lkIGhhdmluZyB0aGUgc2FtZSAwIHZhbHVlIHJlcGVhdGVkIGludG8gdGhlIHNjYWxlICovXG4gICAgcmV0dXJuIFtOdG9wVXRpbHMuZmZsb2F0LCBOdG9wVXRpbHMuZmZsb2F0XTtcbiAgfVxuXG4gIHJldHVybiBbTnRvcFV0aWxzLmZpbnQsTnRvcFV0aWxzLmZpbnRdO1xufVxuXG5mdW5jdGlvbiBtYWtlRmxhdExpbmVWYWx1ZXModHN0YXJ0LCB0c3RlcCwgbnVtLCBkYXRhKSB7XG4gIHZhciB0ID0gdHN0YXJ0O1xuICB2YXIgdmFsdWVzID0gW107XG5cbiAgZm9yKHZhciBpPTA7IGk8bnVtOyBpKyspIHtcbiAgICB2YWx1ZXNbaV0gPSBbdCwgZGF0YSBdO1xuICAgIHQgKz0gdHN0ZXA7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBjaGVja1Nlcmllc0NvbnNpbnN0ZW5jeShzY2hlbWFfbmFtZSwgY291bnQsIHNlcmllcykge1xuICB2YXIgcnYgPSB0cnVlO1xuXG4gIGZvcih2YXIgaT0wOyBpPHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkYXRhID0gc2VyaWVzW2ldLmRhdGE7XG5cbiAgICBpZihkYXRhLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJwb2ludHMgbWlzbWF0Y2g6IHNlcmllICdcIiArIGdldFNlcmllTGFiZWwoc2NoZW1hX25hbWUsIHNlcmllc1tpXSkgK1xuICAgICAgICAgIFwiJyBoYXMgXCIgKyBkYXRhLmxlbmd0aCArIFwiIHBvaW50cywgZXhwZWN0ZWQgXCIgKyBjb3VudCk7XG5cbiAgICAgIHJ2ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmKGRhdGEubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgIC8qIHVwc2FtcGxlICovXG4gICAgICBzZXJpZXNbaV0uZGF0YSA9IHVwc2FtcGxlU2VyaWUoZGF0YSwgY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBydjtcbn1cblxuZnVuY3Rpb24gdXBzYW1wbGVTZXJpZShzZXJpZSwgbnVtX3BvaW50cykge1xuICBpZihudW1fcG9pbnRzIDw9IHNlcmllLmxlbmd0aClcbiAgICByZXR1cm4gc2VyaWU7XG5cbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaW50ZXJ2YWxzID0gbnVtX3BvaW50cyAvIHNlcmllLmxlbmd0aDtcblxuICBmdW5jdGlvbiBsZXJwKHYwLCB2MSwgdCkge1xuICAgIHJldHVybiAoMSAtIHQpICogdjAgKyB0ICogdjE7XG4gIH1cblxuICBmb3IodmFyIGk9MDsgaTxudW1fcG9pbnRzOyBpKyspIHtcbiAgICB2YXIgaW5kZXggPSBpIC8gaW50ZXJ2YWxzO1xuICAgIHZhciBwcmV2X2kgPSBNYXRoLmZsb29yKGluZGV4KTtcbiAgICB2YXIgbmV4dF9pID0gTWF0aC5taW4oTWF0aC5jZWlsKGluZGV4KSwgc2VyaWUubGVuZ3RoLTEpO1xuICAgIHZhciB0ID0gaW5kZXggJSAxOyAvLyBmcmFjdGlvbmFsIHBhcnRcbiAgICB2YXIgdiA9IGxlcnAoc2VyaWVbcHJldl9pXSwgc2VyaWVbbmV4dF9pXSwgdCk7XG4gICAgLy9jb25zb2xlLmxvZyhwcmV2X2ksIG5leHRfaSwgdCwgXCI+PlwiLCB2KTtcblxuICAgIHJlcy5wdXNoKHYpO1xuICB9XG5cbiAgcmV0dXJuIHJlcy5zbGljZSgwLCBudW1fcG9pbnRzKTtcbn1cblxuLy8gdGhlIHN0YWNrZWQgdG90YWwgc2VyaWVcbmZ1bmN0aW9uIGJ1aWxkVG90YWxTZXJpZShkYXRhX3Nlcmllcykge1xuICB2YXIgc2VyaWVzID0gW107XG5cbiAgZm9yKHZhciBpPTA7IGk8ZGF0YV9zZXJpZXMubGVuZ3RoOyBpKyspXG4gICAgc2VyaWVzLnB1c2goZGF0YV9zZXJpZXNbaV0uZGF0YSk7XG5cbiAgcmV0dXJuIGQzLnRyYW5zcG9zZShzZXJpZXMpLm1hcChmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKGcpIHtcbiAgICAgIHJldHVybiBnO1xuICAgIH0pO1xuICB9KS5tYXAoZnVuY3Rpb24oeCkge3JldHVybiBkMy5zdW0oeCk7fSk7XG59XG5cbmZ1bmN0aW9uIGFycmF5VG9OdlNlcmllKHNlcmllX2RhdGEsIHN0YXJ0LCBzdGVwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIHQgPSBzdGFydDtcblxuICBmb3IodmFyIGk9MDsgaTxzZXJpZV9kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWVzW2ldID0gW3QsIHNlcmllX2RhdGFbaV1dO1xuICAgIHQgKz0gc3RlcDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbi8vIGNvbXB1dGVzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdmlzdWFsX3RvdGFsIGFuZCB0b3RhbF9zZXJpZVxuZnVuY3Rpb24gYnVpbGRPdGhlclNlcmllKHRvdGFsX3NlcmllLCB2aXN1YWxfdG90YWwpIHtcbiAgaWYodG90YWxfc2VyaWUubGVuZ3RoICE9PSB2aXN1YWxfdG90YWwubGVuZ3RoKSB7XG4gICAgY29uc29sZS53YXJuKFwiVG90YWwvVmlzdWFsIGxlbmd0aCBtaXNtYXRjaDogXCIgKyB0b3RhbF9zZXJpZS5sZW5ndGggKyBcIiB2cyBcIiArIHZpc3VhbF90b3RhbC5sZW5ndGgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIG1heF92YWwgPSAwO1xuXG4gIGZvcih2YXIgaT0wOyBpPHRvdGFsX3NlcmllLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoMCwgdG90YWxfc2VyaWVbaV0gLSB2aXN1YWxfdG90YWxbaV0pO1xuICAgIG1heF92YWwgPSBNYXRoLm1heChtYXhfdmFsLCB2YWx1ZSk7XG5cbiAgICByZXMucHVzaCh2YWx1ZSk7XG4gIH1cblxuICBpZihtYXhfdmFsID4gMC4xKVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVGltZUFycmF5KHN0YXJ0X3RpbWUsIGVuZF90aW1lLCBzdGVwKSB7XG4gIHZhciBhcnIgPSBbXTtcblxuICBmb3IodmFyIHQ9c3RhcnRfdGltZTsgdDxlbmRfdGltZTsgdCs9c3RlcClcbiAgICBhcnIucHVzaCh0KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBmaXhUaW1lUmFuZ2UoY2hhcnQsIHBhcmFtcywgYWxpZ25fc3RlcCwgYWN0dWFsX3N0ZXApIHtcbiAgdmFyIGRpZmZfZXBvY2ggPSAocGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciBmcmFtZSwgYWxpZ24sIHRpY2tfc3RlcCwgcmVzb2x1dGlvbiwgZm10ID0gXCIlSDolTTolU1wiO1xuXG4gIC8vIG11c3QgYmUgc29ydGVkIGJ5IGFzY2VuZGluZyBtYXhfZGlmZlxuICAvLyBtYXhfZGlmZiAvIHRpY2tfc3RlcCBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiB0aWNrcywgd2hpY2ggc2hvdWxkIGJlIDw9IDE1XG4gIC8vIG1heF9kaWZmIC8gcmVzb2x1dGlvbiBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBhY3R1YWwgcG9pbnRzLCB3aGljaCBzaG91bGQgYmUgfjMwMFxuICB2YXIgcmFuZ2VfcGFyYW1zID0gW1xuICAgIC8vIG1heF9kaWZmLCByZXNvbHV0aW9uLCB4X2Zvcm1hdCwgYWxpZ25tZW50LCB0aWNrX3N0ZXBcbiAgICBbMTUsIDEsIFwiJUg6JU06JVNcIiwgMSwgMV0sICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxNSBzZWNcbiAgICBbNjAsIDEsIFwiJUg6JU06JVNcIiwgMSwgNV0sICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxIG1pblxuICAgIFsxMjAsIDEsIFwiJUg6JU06JVNcIiwgMTAsIDEwXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIDw9IDIgbWluXG4gICAgWzMwMCwgMSwgXCIlSDolTTolU1wiLCAxMCwgMzBdLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPD0gNSBtaW5cbiAgICBbNjAwLCA1LCBcIiVIOiVNOiVTXCIsIDMwLCA2MF0sICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxMCBtaW5cbiAgICBbMTIwMCwgNSwgXCIlSDolTTolU1wiLCA2MCwgMTIwXSwgICAgICAgICAgICAgICAgICAgICAvLyA8PSAyMCBtaW5cbiAgICBbMzYwMCwgMTAsIFwiJUg6JU06JVNcIiwgNjAsIDMwMF0sICAgICAgICAgICAgICAgICAgICAvLyA8PSAxIGhcbiAgICBbNTQwMCwgMTUsIFwiJUg6JU1cIiwgMzAwLCA5MDBdLCAgICAgICAgICAgICAgICAgICAgICAvLyA8PSAxLjUgaFxuICAgIFsxMDgwMCwgMzAsIFwiJUg6JU1cIiwgMzAwLCA5MDBdLCAgICAgICAgICAgICAgICAgICAgIC8vIDw9IDMgaFxuICAgIFsyMTYwMCwgNjAsIFwiJUg6JU1cIiwgMzYwMCwgMTgwMF0sICAgICAgICAgICAgICAgICAgIC8vIDw9IDYgaFxuICAgIFs0MzIwMCwgMTIwLCBcIiVIOiVNXCIsIDM2MDAsIDM2MDBdLCAgICAgICAgICAgICAgICAgIC8vIDw9IDEyIGhcbiAgICBbODY0MDAsIDI0MCwgXCIlSDolTVwiLCAzNjAwLCA3MjAwXSwgICAgICAgICAgICAgICAgICAvLyA8PSAxIGRcbiAgICBbMTcyODAwLCA0ODAsIFwiJWEsICVIOiVNXCIsIDM2MDAsIDE0NDAwXSwgICAgICAgICAgICAvLyA8PSAyIGRcbiAgICBbNjA0ODAwLCAxODAwLCBcIiVZLSVtLSVkXCIsIDg2NDAwLCA4NjQwMF0sICAgICAgICAgICAvLyA8PSA3IGRcbiAgICBbMTIwOTYwMCwgMzYwMCwgXCIlWS0lbS0lZFwiLCA4NjQwMCwgMTcyODAwXSwgICAgICAgICAvLyA8PSAxNCBkXG4gICAgWzI2Nzg0MDAsIDcyMDAsIFwiJVktJW0tJWRcIiwgODY0MDAsIDI1OTIwMF0sICAgICAgICAgLy8gPD0gMSBtXG4gICAgWzE1NzY4MDAwLCAxNDQwMCwgXCIlWS0lbS0lZFwiLCAyNjc4NDAwLCAxMzE0MDAwXSwgICAgLy8gPD0gNiBtXG4gICAgWzMxNjIyNDAwLCAxNDQwMCwgXCIlWS0lbS0lZFwiLCAyNjc4NDAwLCAyNjc4NDAwXSwgICAgLy8gPD0gMSB5XG4gIF07XG5cbiAgZm9yKHZhciBpPTA7IGk8cmFuZ2VfcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJhbmdlID0gcmFuZ2VfcGFyYW1zW2ldO1xuXG4gICAgaWYoZGlmZl9lcG9jaCA8PSByYW5nZVswXSkge1xuICAgICAgZnJhbWUgPSByYW5nZVswXTtcbiAgICAgIHJlc29sdXRpb24gPSByYW5nZVsxXTtcbiAgICAgIGZtdCA9IHJhbmdlWzJdO1xuICAgICAgYWxpZ24gPSByYW5nZVszXTtcbiAgICAgIHRpY2tfc3RlcCA9IHJhbmdlWzRdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x1dGlvbiA9IE1hdGgubWF4KGFjdHVhbF9zdGVwLCByZXNvbHV0aW9uKTtcblxuICBpZihhbGlnbikge1xuICAgIGFsaWduID0gKGFsaWduX3N0ZXAgJiYgKGZyYW1lICE9IDg2NDAwKSAvKiBkbyBub3QgYWxpZ24gZGFpbHkgdHJhZmZpYyB0byBhdm9pZCBqdW1waW5nIHRvIG90aGVyIFJSQSAqLykgPyBNYXRoLm1heChhbGlnbiwgYWxpZ25fc3RlcCkgOiAxO1xuICAgIHBhcmFtcy5lcG9jaF9iZWdpbiAtPSBwYXJhbXMuZXBvY2hfYmVnaW4gJSBhbGlnbjtcbiAgICBwYXJhbXMuZXBvY2hfZW5kIC09IHBhcmFtcy5lcG9jaF9lbmQgJSBhbGlnbjtcbiAgICBkaWZmX2Vwb2NoID0gKHBhcmFtcy5lcG9jaF9lbmQgLSBwYXJhbXMuZXBvY2hfYmVnaW4pO1xuICAgIHBhcmFtcy5saW1pdCA9IE1hdGguY2VpbChkaWZmX2Vwb2NoIC8gcmVzb2x1dGlvbik7XG5cbiAgICAvLyBhbGlnbiBlcG9jaCBlbmQgd3J0IHBhcmFtcy5saW1pdFxuICAgIHBhcmFtcy5lcG9jaF9lbmQgKz0gTWF0aC5jZWlsKGRpZmZfZXBvY2ggLyBwYXJhbXMubGltaXQpICogcGFyYW1zLmxpbWl0IC0gZGlmZl9lcG9jaDtcbiAgICBjaGFydC5hbGlnbiA9IGFsaWduO1xuICAgIGNoYXJ0LnRpY2tfc3RlcCA9IHRpY2tfc3RlcDtcbiAgfSBlbHNlXG4gICAgY2hhcnQudGlja19zdGVwID0gbnVsbDtcblxuICBjaGFydC54X2ZtdCA9IGZtdDtcbn1cblxuZnVuY3Rpb24gZmluZEFjdHVhbFN0ZXAocmF3X3N0ZXAsIHRzdGFydCkge1xuICBpZih0eXBlb2Ygc3VwcG9ydGVkX3N0ZXBzID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYoc3VwcG9ydGVkX3N0ZXBzW3Jhd19zdGVwXSkge1xuICAgICAgdmFyIHJldGVudGlvbiA9IHN1cHBvcnRlZF9zdGVwc1tyYXdfc3RlcF0ucmV0ZW50aW9uO1xuXG4gICAgICBpZihyZXRlbnRpb24pIHtcbiAgICAgICAgdmFyIG5vd190cyA9IERhdGUubm93KCkgLyAxMDAwO1xuICAgICAgICB2YXIgZGVsdGEgPSBub3dfdHMgLSB0c3RhcnQ7XG5cbiAgICAgICAgZm9yKHZhciBpPTA7IGk8cmV0ZW50aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHBhcnRpYWwgPSByYXdfc3RlcCAqIHJldGVudGlvbltpXS5hZ2dyZWdhdGlvbl9kcDtcbiAgICAgICAgICB2YXIgdGZyYW1lID0gcGFydGlhbCAqIHJldGVudGlvbltpXS5yZXRlbnRpb25fZHA7XG4gICAgICAgICAgZGVsdGEgLT0gdGZyYW1lO1xuXG4gICAgICAgICAgaWYoZGVsdGEgPD0gMClcbiAgICAgICAgICAgIHJldHVybiBwYXJ0aWFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByYXdfc3RlcDtcbn1cblxuZnVuY3Rpb24gaGFzX2luaXRpYWxfem9vbSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBOdG9wVXRpbHMucGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5lcG9jaF9iZWdpbiAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cblxudmFyIGN1cnJlbnRfem9vbV9sZXZlbCA9IChoaXN0b3J5LnN0YXRlKSA/IChoaXN0b3J5LnN0YXRlLnpvb21fbGV2ZWwpIDogMDtcblxuZnVuY3Rpb24gY2FuQ29tcGFyZUJhY2t3YXJkcyhlcG9jaF9iZWdpbiwgZXBvY2hfZW5kKSB7XG4gIHZhciBqdW1wX2R1cmF0aW9uID0gJChcIiNidG4tanVtcC10aW1lLWFoZWFkXCIpLmRhdGEoXCJkdXJhdGlvblwiKTtcbiAgdmFyIGN1cnJlbnRfZHVyYXRpb24gPSBlcG9jaF9lbmQgLSBlcG9jaF9iZWdpbjtcbiAgcmV0dXJuKGp1bXBfZHVyYXRpb24gPT0gY3VycmVudF9kdXJhdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXhKdW1wQnV0dG9ucyhlcG9jaF9iZWdpbiwgZXBvY2hfZW5kKSB7XG4gIHZhciBkdXJhdGlvbiA9ICQoXCIjYnRuLWp1bXAtdGltZS1haGVhZFwiKS5kYXRhKFwiZHVyYXRpb25cIik7XG4gIGlmKChlcG9jaF9lbmQgKyBkdXJhdGlvbikqMTAwMCA+ICQubm93KCkpXG4gICAgJChcIiNidG4tanVtcC10aW1lLWFoZWFkXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gIGVsc2VcbiAgICAkKFwiI2J0bi1qdW1wLXRpbWUtYWhlYWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbn1cblxuZnVuY3Rpb24gc2hvd1F1ZXJ5U2xvdygpIHtcbiAgJChcIiNxdWVyeS1zbG93LWFsZXJ0XCIpLnNob3coKTtcbn1cblxuZnVuY3Rpb24gaGlkZVF1ZXJ5U2xvdygpIHtcbiAgJChcIiNxdWVyeS1zbG93LWFsZXJ0XCIpLmhpZGUoKTtcbn1cblxuZnVuY3Rpb24gY2hhcnRfZGF0YV9zdW0oc2VyaWVzKSB7XG4gIHJldHVybihzZXJpZXMucmVkdWNlKGZ1bmN0aW9uKGFjYywgeCkge1xuICAgIHJldHVybihhY2MgKyB4LnZhbHVlcy5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbihhY2MsIHB0KSB7XG4gICAgICAgIHJldHVybihhY2MgKyBwdFsxXSB8fCAwKTtcbiAgICAgIH0sIDApXG4gICAgKVxuICB9LCAwKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHJhd0V4dHJhTGluZXMoY2hhcnQsIGNoYXJ0X2lkLCBleHRyYV9saW5lcykge1xuICAvKiBSZW1vdmUgdGhlIHByZXZpb3VzIGV4dHJhIGxpbmVzICovXG4gIGQzLnNlbGVjdEFsbChjaGFydF9pZCArIFwiIGxpbmUuZXh0cmEtbGluZVwiKS5yZW1vdmUoKTtcblxuICBpZihleHRyYV9saW5lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHhWYWx1ZVNjYWxlID0gY2hhcnQueEF4aXMuc2NhbGUoKTtcbiAgICB2YXIgeVZhbHVlU2NhbGUgPSBjaGFydC55QXhpczEuc2NhbGUoKTtcbiAgICB2YXIgZyA9IGQzLnNlbGVjdChjaGFydF9pZCArIFwiIC5zdGFjazFXcmFwXCIpO1xuXG4gICAgZm9yKHZhciBpPTA7IGk8ZXh0cmFfbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkID0gZXh0cmFfbGluZXNbaV07XG5cbiAgICAgIGcuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjRkY1QjU2XCIpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjIuNXB4XCIpXG4gICAgICAgIC5hdHRyKFwieDFcIiwgeFZhbHVlU2NhbGUoZFswXSkpXG4gICAgICAgIC5hdHRyKFwieTFcIiwgeVZhbHVlU2NhbGUoZFsyXSkpXG4gICAgICAgIC5hdHRyKFwieDJcIiwgeFZhbHVlU2NhbGUoZFsxXSkpXG4gICAgICAgIC5hdHRyKFwieTJcIiwgeVZhbHVlU2NhbGUoZFszXSkpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJleHRyYS1saW5lXCIpXG4gICAgfVxuICB9XG59XG5cbi8vIGFkZCBhIG5ldyB1cGRhdGVTdGFja2VkQ2hhcnQgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hTdGFja2VkQ2hhcnRDYWxsYmFjayhjaGFydCwgc2NoZW1hX25hbWUsIGNoYXJ0X2lkLCB6b29tX3Jlc2V0X2lkLCBwYXJhbXMsIHN0ZXAsXG4gICAgICAgICAgbWV0cmljX3R5cGUsIGFsaWduX3N0ZXAsIHNob3dfYWxsX3Ntb290aCwgaW5pdGlhbF9yYW5nZSwgdHNfdGFibGVfc2hvd24pIHtcbiAgdmFyIHBlbmRpbmdfY2hhcnRfcmVxdWVzdCA9IG51bGw7XG4gIHZhciBwZW5kaW5nX3RhYmxlX3JlcXVlc3QgPSBudWxsO1xuICB2YXIgZDNfc2VsID0gZDMuc2VsZWN0KGNoYXJ0X2lkKTtcbiAgdmFyICRjaGFydCA9ICQoY2hhcnRfaWQpO1xuICB2YXIgJHpvb21fcmVzZXQgPSAkKHpvb21fcmVzZXRfaWQpO1xuICB2YXIgJGdyYXBoX3pvb20gPSAkKFwiI2dyYXBoX3pvb21cIik7XG4gIHZhciBtYXhfaW50ZXJ2YWwgPSBmaW5kQWN0dWFsU3RlcChzdGVwLCBwYXJhbXMuZXBvY2hfYmVnaW4pICogODtcbiAgdmFyIGluaXRpYWxfaW50ZXJ2YWwgPSAocGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciBpc19tYXhfem9vbSA9IChpbml0aWFsX2ludGVydmFsIDw9IG1heF9pbnRlcnZhbCk7XG4gIHZhciB1cmwgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3RzLmx1YVwiO1xuICB2YXIgZmlyc3RfbG9hZCA9IHRydWU7XG4gIHZhciBmaXJzdF90aW1lX2xvYWRlZCA9IHRydWU7XG4gIHZhciBtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXMgPSB7fTsgLy8ga2VlcHMgdHJhY2sgb2Ygc2VyaWVzIG1hbnVhbGx5IHNob3duL2hpZGRlbiBieSB0aGUgdXNlclxuICB2YXIgZGF0ZXRpbWVfZm9ybWF0ID0gXCJkZC9NTS95eXl5IGhoOm1tOnNzXCI7XG4gIHZhciBtYXhfY21wX292ZXJfdG90YWxfcmF0aW8gPSAzOyAgICAgLy8gaWYgdGhlIGNvbXBhcmlzb24gc2VyaWUgbWF4IHZhbHVlIGlzIHRvbyBiaWcgY29tcGFyZWQgdG8gdGhlIGFjdHVhbCBjaGFydCBzZXJpZXMsIGhpZGUgaXRcbiAgdmFyIG1heF9saW5lX292ZXJfdG90YWxfcmF0aW8gPSAxMDsgICAvLyBpZiB0aGUgZXh0cmEgbGluZSBzZXJpZXMgbWF4IHZhbHVlIGlzIHRvbyBiaWcgY29tcGFyZWQgdG8gdGhlIGFjdHVhbCBjaGFydCBzZXJpZXMsIGhpZGUgdGhlbVxuICB2YXIgcXVlcnlfdGltZXIgPSBudWxsO1xuICB2YXIgc2Vjb25kc19iZWZvcmVfcXVlcnlfc2xvdyA9IDY7XG4gIHZhciBxdWVyeV9jb21wbGV0ZWQgPSAwO1xuICB2YXIgcXVlcnlfd2FzX2Fib3J0ZWQgPSBmYWxzZTtcbiAgbGV0IGxhc3Rfa25vd25fdCA9IG51bGw7IC8vIG9ubHkgc2V0IGlmIHNob3dfdW5yZWFjaGFibGUgaXMgc2V0XG4gIGNvbnN0IHZpc3VhbGl6YXRpb24gPSBjaGFydC52aXN1YWxpemF0aW9uX29wdGlvbnMgfHwge307XG4gIGNoYXJ0LmlzX3pvb21lZCA9ICgoY3VycmVudF96b29tX2xldmVsID4gMCkgfHwgaGFzX2luaXRpYWxfem9vbSgpKTtcblxuICBpZighY2hhcnQpIHJldHVyblxuXG4gIC8qIEV4dHJhIGxpbmVzIHRvIGRyYXcgaW50byB0aGUgY2hhcnQuIEVhY2ggaXRlbSBpcyBpbiB0aGUgZm9ybWF0IFt4X3N0YXJ0LCB4X2VuZCwgeV9zdGFydCwgeV9lbmRdICovXG4gIGxldCBleHRyYV9saW5lcyA9IFtdO1xuICBsZXQgdW5yZWFjaGFibGVfdGltZXN0YW1wcyA9IHt9O1xuXG4gIC8vdmFyIHNwaW5uZXIgPSAkKFwiPGltZyBjbGFzcz0nY2hhcnQtbG9hZGluZy1zcGlubmVyJyBzcmM9J1wiICsgc3Bpbm5lcl91cmwgKyBcIicvPlwiKTtcbiAgdmFyIHNwaW5uZXIgPSAkKCc8aSBjbGFzcz1cImNoYXJ0LWxvYWRpbmctc3Bpbm5lciBmYXMgZmEtc3Bpbm5lciBmYS1sZyBmYS1zcGluXCI+PC9pPicpO1xuICAkY2hhcnQucGFyZW50KCkuY3NzKFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiKTtcblxuICB2YXIgY2hhcnRfY29sb3JzX2Z1bGwgPSBbXG4gICAgXCIjQzZEOUZEXCIsXG4gICAgXCIjOTBFRTkwXCIsXG4gICAgXCIjNjlCODdGXCIsXG4gICAgXCIjOTRDRkE0XCIsXG4gICAgXCIjQjNERUI2XCIsXG4gICAgXCIjRTVGMUE2XCIsXG4gICAgXCIjRkZGQ0M2XCIsXG4gICAgXCIjRkVERUE1XCIsXG4gICAgXCIjRkZCOTdCXCIsXG4gICAgXCIjRkY4RDZEXCIsXG4gICAgXCIjRTI3Qjg1XCJcbiAgXTtcblxuICB2YXIgY2hhcnRfY29sb3JzX21pbiA9IFtcbiAgICBcIiNDNkQ5RkRcIixcbiAgICBcIiM5MEVFOTBcIixcbiAgICBcIiNFRTg0MzRcIixcbiAgICBcIiNDOTVENjNcIiwgXG4gICAgXCIjQUU4Nzk5XCIsIFxuICAgIFwiIzcxN0VDM1wiLCBcbiAgICBcIiM0OTZEREJcIiwgXG4gICAgXCIjNUE3QURFXCIsIFxuICAgIFwiIzY5ODZFMVwiLCBcbiAgICBcIiM3NzkxRTRcIiwgXG4gICAgXCIjODM5QkU2XCIsXG4gICAgXCIjOEVBNEU4XCJcbiAgXTtcbiAgXG4gIHZhciBzcGxpdF9kaXJlY3Rpb25zX2NvbG9ycyA9IFtcbiAgICBcIiNDNkQ5RkRcIixcbiAgICBcIiM5MEVFOTBcIixcbiAgICBcIiNFRTg0MzRcIixcbiAgICBcIiNDOTVENjNcIiwgXG4gICAgXCIjQUU4Nzk5XCIsIFxuICAgIFwiIzcxN0VDM1wiLCBcbiAgICBcIiM0OTZEREJcIiwgXG4gICAgXCIjNUE3QURFXCIsIFxuICAgIFwiIzY5ODZFMVwiLCBcbiAgICBcIiM3NzkxRTRcIiwgXG4gICAgXCIjODM5QkU2XCIsXG4gICAgXCIjOEVBNEU4XCJcbiAgXTtcblxuICAvKiBUaGlzIGlzIHVzZWQgdG8gc2hvdyB0aGUgXCJ1bnJlYWNoYWJsZVwiIGxhYmVsIHdoZW4gdGhlIGNoYXJ0IFwic2hvd191bnJlYWNoYWJsZVwiXG4gICAqIG9wdGlvbnMgaXMgc2V0LiBTZWUgdGhlIGV4dHJhX2xpbmVzIGNvbXB1dGF0aW9uIGJlbG93LiAqL1xuICBmdW5jdGlvbiBmb3JtYXRfdW5yZWFjaGFibGUoZm9ybWF0dGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHksIGQpIHtcbiAgICAgIGlmKGQgJiYgdW5yZWFjaGFibGVfdGltZXN0YW1wc1tkWzBdXSlcbiAgICAgICAgcmV0dXJuKGkxOG5fZXh0LnVucmVhY2hhYmxlX2hvc3QpO1xuXG4gICAgICAvLyBOb3QgdW5yZWFjaGFibGUsIHVzZSB0aGUgcHJvdmlkZWQgZm9ybWF0dGVyXG4gICAgICByZXR1cm4oZm9ybWF0dGVyKHkpKTtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgZGVmYXVsdCBudW1iZXIgb2YgeSBwb2ludHMgKi9cbiAgdmFyIG51bV90aWNrc195MSA9IG51bGw7XG4gIHZhciBudW1fdGlja3NfeTIgPSBudWxsO1xuICB2YXIgZG9tYWluX3kxID0gbnVsbDtcbiAgdmFyIGRvbWFpbl95MiA9IG51bGw7XG4gIHZhciBmaXJzdF9ydW4gPSB0cnVlO1xuXG4gIHZhciB1cGRhdGVfY2hhcnRfZGF0YSA9IGZ1bmN0aW9uKG5ld19kYXRhKSB7XG4gICAgLyogcmVzZXQgY2hhcnQgZGF0YSBzbyB0aGF0IHRoZSBuZXh0IHRyYW5zaXRpb24gYW5pbWF0aW9uIHdpbGwgYmUgZ3JhY2VmdWxsICovXG4gICAgZDNfc2VsLmRhdHVtKFtdKS5jYWxsKGNoYXJ0KTtcbiAgICBkM19zZWwuZGF0dW0obmV3X2RhdGEpO1xuXG4gICAgLyogVGhpcyBhZGRpdGlvbmFsIHJlZnJlc2ggaXMgbmVlZGVkIHRvIGRldGVybWluZSB0aGUgeXRpY2tzXG4gICAgICogYW5kIGRvbWFpbiwgbmVlZGVkIGJlbG93LlxuICAgICAqIE5PVEU6IGNhbGxpbmcgdHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkgaXMgaW1wb3J0YW50IHRvIHByb3Blcmx5IHJlZnJlc2hcbiAgICAgKiB0aGUgdG9vbHRpcCBwb3NpdGlvbi4gKi9cbiAgICBkM19zZWwudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuY2FsbChjaGFydCk7XG5cbiAgICBpZihmaXJzdF9ydW4pIHtcbiAgICAgIG51bV90aWNrc195MSA9IGNoYXJ0LnlBeGlzMS50aWNrcygpO1xuICAgICAgbnVtX3RpY2tzX3kyID0gY2hhcnQueUF4aXMyLnRpY2tzKCk7XG4gICAgICBkb21haW5feTEgPSBjaGFydC55RG9tYWluMSgpO1xuICAgICAgZG9tYWluX3kyID0gY2hhcnQueURvbWFpbjIoKTtcbiAgICAgIGZpcnN0X3J1biA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmKG1ldHJpY190eXBlID09PSBcImdhdWdlXCIpIHtcbiAgICAgIHZhciBjdXJfZG9tYWluX3kxID0gY2hhcnQueUF4aXMxLnNjYWxlKCkuZG9tYWluKCk7XG4gICAgICB2YXIgY3VyX2RvbWFpbl95MiA9IGNoYXJ0LnlBeGlzMi5zY2FsZSgpLmRvbWFpbigpO1xuXG4gICAgICBjdXJfZG9tYWluX3kxID0gY3VyX2RvbWFpbl95MVsxXSAtIGN1cl9kb21haW5feTFbMF07XG4gICAgICBjdXJfZG9tYWluX3kyID0gY3VyX2RvbWFpbl95MlsxXSAtIGN1cl9kb21haW5feTJbMF07XG5cbiAgICAgIC8qIElmIHRoZXJlIGFyZSBub3QgZW5vdWdoIHBvaW50cyBhdmFpbGFibGUsIHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiB0aWNrcyB0byBhdm9pZCByZXBlYXRlZCB0aWNrcyB3aXRoIHNhbWUgaW50ZWdlciB2YWx1ZS5cbiAgICAgICAqIE90aGVyIHNvbHV0aW9ucyAoZG9jdW1lbnRlZCBpbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTA3NTI0NS9udmQzLXByZXZlbnQtcmVwZWF0ZWQtdmFsdWVzLW9uLXktYXhpcylcbiAgICAgICAqIGFyZSBub3QgZWFzaWx5IGFwcGxpY2FibGUgaW4gdGhpcyBjYXNlLlxuICAgICAgICpcbiAgICAgICAqIE5PVEU6IHRoZSBwcm9ibGVtIHNob3VsZCBub3Qgb2NjdXIgd2hlbiB1c2luZyBOdG9wVXRpbHMuZmZsb2F0XG4gICAgICAgKi9cbiAgICAgIGlmKGNoYXJ0LnlBeGlzMS50aWNrRm9ybWF0KCkgIT0gTnRvcFV0aWxzLmZmbG9hdClcbiAgICAgICAgY2hhcnQueUF4aXMxLnRpY2tzKE1hdGgubWluKGN1cl9kb21haW5feTEsIG51bV90aWNrc195MSkpO1xuICAgICAgaWYoY2hhcnQueUF4aXMyLnRpY2tGb3JtYXQoKSAhPSBOdG9wVXRpbHMuZmZsb2F0KVxuICAgICAgICBjaGFydC55QXhpczIudGlja3MoTWF0aC5taW4oY3VyX2RvbWFpbl95MiwgbnVtX3RpY2tzX3kyKSk7XG4gICAgfVxuXG4gICAgdmFyIHkxX3N1bSA9IGNoYXJ0X2RhdGFfc3VtKG5ld19kYXRhLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybih4LnlBeGlzID09IDEpOyB9KSlcbiAgICB2YXIgeTJfc3VtID0gY2hhcnRfZGF0YV9zdW0obmV3X2RhdGEuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuKHgueUF4aXMgPT0gMik7IH0pKVxuXG4gICAgLyogRml4IG5lZ2F0aXZlIHlkb21haW4gdmFsdWVzIGFwcGVhcmluZyB3aGVuIGRhdGFzZXQgaXMgZW1wdHkgKi9cbiAgICBpZih5MV9zdW0gPT0gMClcbiAgICAgIGNoYXJ0LnlEb21haW4xKFswLCAxXSk7XG4gICAgZWxzZVxuICAgICAgY2hhcnQueURvbWFpbjEoZG9tYWluX3kxKTtcblxuICAgIGlmKHkyX3N1bSA9PSAwKVxuICAgICAgY2hhcnQueURvbWFpbjIoWzAsIDFdKTtcbiAgICBlbHNlXG4gICAgICBjaGFydC55RG9tYWluMihkb21haW5feTIpO1xuXG4gICAgLyogUmVmcmVzaCB0aGUgY2hhcnQgKi9cbiAgICBkM19zZWwuY2FsbChjaGFydCk7XG4gICAgbnYudXRpbHMud2luZG93UmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgY2hhcnQudXBkYXRlKCk7XG4gICAgICByZWRyYXdFeHRyYUxpbmVzKGNoYXJ0LCBjaGFydF9pZCwgZXh0cmFfbGluZXMpO1xuICAgIH0pXG4gICAgcmVkcmF3RXh0cmFMaW5lcyhjaGFydCwgY2hhcnRfaWQsIGV4dHJhX2xpbmVzKTtcblxuICAgIHNwaW5uZXIucmVtb3ZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlZ2VuZERpc2FibGVkKGtleSwgZGVmYXVsdF92YWwpIHtcbiAgICBpZih0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YXIgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjaGFydF9zZXJpZXMuZGlzYWJsZWQuXCIgKyBrZXkpO1xuXG4gICAgICBpZih2YWwgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuKHZhbCA9PT0gXCJ0cnVlXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0X3ZhbDtcbiAgfVxuXG4gIGNoYXJ0LmxlZ2VuZC5kaXNwYXRjaC5vbignbGVnZW5kQ2xpY2snLCBmdW5jdGlvbihkLGkpIHtcbiAgICBtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXNbZC5sZWdlbmRfa2V5XSA9IHRydWU7XG5cbiAgICBpZih0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjaGFydF9zZXJpZXMuZGlzYWJsZWQuXCIgKyBkLmxlZ2VuZF9rZXksICghZC5kaXNhYmxlZCkgPyB0cnVlIDogZmFsc2UpO1xuICB9KTtcblxuICBjaGFydC5kaXNwYXRjaC5vbihcInpvb21cIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBjdXJfem9vbSA9IFtwYXJhbXMuZXBvY2hfYmVnaW4sIHBhcmFtcy5lcG9jaF9lbmRdO1xuICAgIHZhciB0X3N0YXJ0ID0gTWF0aC5mbG9vcihlLnhEb21haW5bMF0pO1xuICAgIHZhciB0X2VuZCA9IE1hdGguY2VpbChlLnhEb21haW5bMV0pO1xuICAgIHZhciBvbGRfem9vbWVkID0gY2hhcnQuaXNfem9vbWVkO1xuICAgIHZhciBpc191c2VyX3pvb20gPSAodHlwZW9mIGUuaXNfdXNlcl96b29tICE9PSBcInVuZGVmaW5lZFwiKSA/IGUuaXNfdXNlcl96b29tIDogdHJ1ZTtcbiAgICBjaGFydC5pc196b29tZWQgPSB0cnVlO1xuXG4gICAgaWYoY2hhcnQudXBkYXRlU3RhY2tlZENoYXJ0KHRfc3RhcnQsIHRfZW5kLCBmYWxzZSwgaXNfdXNlcl96b29tKSkge1xuICAgICAgaWYoaXNfdXNlcl96b29tIHx8IGUucHVzaF9zdGF0ZSkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiem9vbSBJTiFcIik7XG4gICAgICAgIGN1cnJlbnRfem9vbV9sZXZlbCArPSAxO1xuICAgICAgICB2YXIgdXJsID0gTnRvcFV0aWxzLmdldEhpc3RvcnlQYXJhbWV0ZXJzKHtlcG9jaF9iZWdpbjogdF9zdGFydCwgZXBvY2hfZW5kOiB0X2VuZH0pO1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7em9vbV9sZXZlbDogY3VycmVudF96b29tX2xldmVsLCByYW5nZTogW3Rfc3RhcnQsIHRfZW5kXX0sIFwiXCIsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIGNoYXJ0LmZpeENoYXJ0QnV0dG9ucygpO1xuICAgIH0gZWxzZVxuICAgICAgY2hhcnQuaXNfem9vbWVkID0gb2xkX3pvb21lZDtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlWm9vbSh6b29tLCBpc191c2VyX3pvb20sIGZvcmNlKSB7XG4gICAgdmFyIHRfc3RhcnQgPSB6b29tWzBdO1xuICAgIHZhciB0X2VuZCA9IHpvb21bMV07XG5cbiAgICBjaGFydC51cGRhdGVTdGFja2VkQ2hhcnQodF9zdGFydCwgdF9lbmQsIGZhbHNlLCBpc191c2VyX3pvb20sIG51bGwsIGZvcmNlKTtcbiAgICBjaGFydC5maXhDaGFydEJ1dHRvbnMoKTtcbiAgfVxuXG4gIGNoYXJ0Lnpvb21faW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VyX2ludGVydmFsID0gcGFyYW1zLmVwb2NoX2VuZCAtIHBhcmFtcy5lcG9jaF9iZWdpbjtcblxuICAgIGlmKGN1cl9pbnRlcnZhbCA+IDYwKSB7XG4gICAgICB2YXIgZGVsdGEgPSBjdXJfaW50ZXJ2YWwvNDtcbiAgICAgICQoXCIjcGVyaW9kX2JlZ2luXCIpLmRhdGV0aW1lcGlja2VyKFwiZGF0ZVwiLCBuZXcgRGF0ZSgocGFyYW1zLmVwb2NoX2JlZ2luICsgZGVsdGEpICogMTAwMCkpO1xuICAgICAgJChcIiNwZXJpb2RfZW5kXCIpLmRhdGV0aW1lcGlja2VyKFwiZGF0ZVwiLCBuZXcgRGF0ZSgocGFyYW1zLmVwb2NoX2VuZCAtIGRlbHRhKSAqIDEwMDApKTtcbiAgICAgIHVwZGF0ZUNoYXJ0RnJvbVBpY2tlcnMoKTtcbiAgICB9XG4gIH1cblxuICBjaGFydC56b29tX291dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJfaW50ZXJ2YWwgPSBwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luO1xuXG4gICAgLy9pZihjdXJyZW50X3pvb21fbGV2ZWwpIHtcbiAgICAgIC8vIFpvb20gb3V0IGZyb20gaGlzdG9yeVxuICAgICAgLy9jb25zb2xlLmxvZyhcInpvb20gT1VUXCIpO1xuICAgICAgLy9oaXN0b3J5LmJhY2soKTtcbiAgICAvL30gZWxzZSB7XG4gICAgLy8gWm9vbSBvdXQgd2l0aCBmaXhlZCBpbnRlcnZhbFxuICAgIC8vdmFyIGRlbHRhID0gem9vbV9vdXRfdmFsdWU7XG4gICAgdmFyIGRlbHRhID0gY3VyX2ludGVydmFsLzI7XG4gICAgLy9pZigocGFyYW1zLmVwb2NoX2VuZCArIGRlbHRhKSoxMDAwIDw9ICQubm93KCkpXG4gICAgICAvL2RlbHRhIC89IDI7XG5cbiAgICAkKFwiI3BlcmlvZF9iZWdpblwiKS5kYXRldGltZXBpY2tlcihcImRhdGVcIiwgbmV3IERhdGUoKHBhcmFtcy5lcG9jaF9iZWdpbiAtIGRlbHRhKSAqIDEwMDApKTtcbiAgICAkKFwiI3BlcmlvZF9lbmRcIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKChwYXJhbXMuZXBvY2hfZW5kICsgZGVsdGEpICogMTAwMCkpO1xuICAgIHVwZGF0ZUNoYXJ0RnJvbVBpY2tlcnMoKTtcbiAgICAvL31cbiAgfVxuXG4gICRjaGFydC5vbignZGJsY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIGlmKCQoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcyhcIm52LWxlZ2VuZC10ZXh0XCIpKVxuICAgICAgLy8gbGVnZW5kIHdhcyBkb3VibGUtY2xpY2tlZCwga2VlcCB0aGUgb3JpZ2luYWwgYmVoYXZpb3JcbiAgICAgIHJldHVybjtcblxuICAgIGNoYXJ0Lnpvb21fb3V0KCk7XG4gIH0pO1xuXG4gICR6b29tX3Jlc2V0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgaWYoY3VycmVudF96b29tX2xldmVsKSB7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiem9vbSBSRVNFVFwiKTtcbiAgICAgIGhpc3RvcnkuZ28oLWN1cnJlbnRfem9vbV9sZXZlbCk7XG4gICAgfVxuICB9KTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIHpvb20gPSBpbml0aWFsX3JhbmdlO1xuICAgIC8vY29uc29sZS5sb2coXCJwb3BzdGF0ZTogXCIsIGUuc3RhdGUpO1xuXG4gICAgaWYoZS5zdGF0ZSkge1xuICAgICAgem9vbSA9IGUuc3RhdGUucmFuZ2U7XG4gICAgICBjdXJyZW50X3pvb21fbGV2ZWwgPSBlLnN0YXRlLnpvb21fbGV2ZWw7XG4gICAgfSBlbHNlXG4gICAgICBjdXJyZW50X3pvb21fbGV2ZWwgPSAwO1xuXG4gICAgdXBkYXRlWm9vbSh6b29tLCB0cnVlLCB0cnVlIC8qIGZvcmNlICovKTtcbiAgfSk7XG5cbiAgY2hhcnQuZml4Q2hhcnRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gICAgaWYoKGN1cnJlbnRfem9vbV9sZXZlbCA+IDApIHx8IGhhc19pbml0aWFsX3pvb20oKSkge1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5idG4td2FybmluZzpub3QoLmN1c3RvbS16b29tLWJ0bilcIilcbiAgICAgICAgLmFkZENsYXNzKFwiaW5pdGlhbC16b29tLXNlbFwiKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJidG4td2FybmluZ1wiKTtcbiAgICAgICRncmFwaF96b29tLmZpbmQoXCIuY3VzdG9tLXpvb20tYnRuXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuXG4gICAgICB2YXIgem9vbV9saW5rID0gJGdyYXBoX3pvb20uZmluZChcIi5jdXN0b20tem9vbS1idG5cIik7XG4gICAgICB2YXIgbGluayA9IHpvb21fbGluay52YWwoKS5yZXBsYWNlKC8mZXBvY2hfYmVnaW49LiovLCBcIlwiKTtcbiAgICAgIGxpbmsgKz0gXCImZXBvY2hfYmVnaW49XCIgKyBwYXJhbXMuZXBvY2hfYmVnaW4gKyBcIiZlcG9jaF9lbmQ9XCIgKyBwYXJhbXMuZXBvY2hfZW5kO1xuICAgICAgem9vbV9saW5rLnZhbChsaW5rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5pbml0aWFsLXpvb20tc2VsXCIpXG4gICAgICAgIC5hZGRDbGFzcyhcImJ0bi13YXJuaW5nXCIpO1xuICAgICAgJGdyYXBoX3pvb20uZmluZChcIi5jdXN0b20tem9vbS1idG5cIikuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgIGNoYXJ0LmlzX3pvb21lZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZpeEp1bXBCdXR0b25zKHBhcmFtcy5lcG9jaF9iZWdpbiwgcGFyYW1zLmVwb2NoX2VuZCk7XG5cbiAgICBpZihjdXJyZW50X3pvb21fbGV2ZWwgPiAwKVxuICAgICAgJHpvb21fcmVzZXQuc2hvdygpO1xuICAgIGVsc2VcbiAgICAgICR6b29tX3Jlc2V0LmhpZGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUXVlcnlDb21wbGV0ZWQoKSB7XG4gICAgdmFyIGZsb3dzX2R0ID0gJChcIiNjaGFydDEtZmxvd3NcIik7XG4gICAgdmFyIHdhaXRfbnVtX3F1ZXJpZXMgPSAodHNfdGFibGVfc2hvd24gJiYgKCQoXCIjY2hhcnQxLWZsb3dzXCIpLmNzcyhcImRpc3BsYXlcIikgIT09IFwibm9uZVwiKSkgPyAyIDogMTtcblxuICAgIHF1ZXJ5X2NvbXBsZXRlZCArPSAxO1xuXG4gICAgaWYocXVlcnlfY29tcGxldGVkID49IHdhaXRfbnVtX3F1ZXJpZXMpIHtcbiAgICAgIGlmKHF1ZXJ5X3RpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocXVlcnlfdGltZXIpO1xuICAgICAgICBxdWVyeV90aW1lciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhpZGVRdWVyeVNsb3coKTtcbiAgICB9XG4gIH1cblxuICBjaGFydC5xdWVyeVdhc0Fib3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVlcnlfd2FzX2Fib3J0ZWQ7XG4gIH1cblxuICBjaGFydC5hYm9ydFF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgcXVlcnlfd2FzX2Fib3J0ZWQgPSB0cnVlO1xuXG4gICAgaWYocGVuZGluZ19jaGFydF9yZXF1ZXN0KSB7XG4gICAgICBwZW5kaW5nX2NoYXJ0X3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgIGNoYXJ0Lm5vRGF0YShpMThuX2V4dC5xdWVyeV93YXNfYWJvcnRlZCk7XG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShbXSk7XG4gICAgfVxuXG4gICAgaWYocGVuZGluZ190YWJsZV9yZXF1ZXN0KVxuICAgICAgcGVuZGluZ190YWJsZV9yZXF1ZXN0LmFib3J0KCk7XG5cbiAgICBpZihxdWVyeV90aW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbChxdWVyeV90aW1lcik7XG4gICAgICBxdWVyeV90aW1lciA9IG51bGw7XG4gICAgfVxuXG4gICAgaGlkZVF1ZXJ5U2xvdygpO1xuICB9XG5cbiAgY2hhcnQudGFibGVSZXF1ZXN0Q29tcGxldGVkID0gZnVuY3Rpb24oKSB7XG4gICAgY2hlY2tRdWVyeUNvbXBsZXRlZCgpO1xuICAgIHBlbmRpbmdfdGFibGVfcmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBjaGFydC5nZXREYXRhVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGFfcGFyYW1zID0galF1ZXJ5LmV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBkZWxldGUgZGF0YV9wYXJhbXMuem9vbTtcbiAgICBkZWxldGUgZGF0YV9wYXJhbXMudHNfY29tcGFyZTtcbiAgICBkYXRhX3BhcmFtcy5leHRlbmRlZCA9IDE7IC8qIHdpdGggZXh0ZW5kZWQgdGltZXN0YW1wcyAqL1xuICAgIHJldHVybiB1cmwgKyBcIj9cIiArICQucGFyYW0oZGF0YV9wYXJhbXMsIHRydWUpO1xuICB9XG5cbiAgdmFyIG9sZF9zdGFydCwgb2xkX2VuZCwgb2xkX2ludGVydmFsO1xuXG4gIC8qIFJldHVybnMgZmFsc2UgaWYgem9vbSB1cGRhdGUgaXMgcmVqZWN0ZWQuICovXG4gIGNoYXJ0LnVwZGF0ZVN0YWNrZWRDaGFydCA9IGZ1bmN0aW9uICh0c3RhcnQsIHRlbmQsIG5vX3NwaW5uZXIsIGlzX3VzZXJfem9vbSwgb25fbG9hZF9jYWxsYmFjaywgZm9yY2VfdXBkYXRlKSB7XG4gICAgaWYodHN0YXJ0KSBwYXJhbXMuZXBvY2hfYmVnaW4gPSB0c3RhcnQ7XG4gICAgaWYodGVuZCkgcGFyYW1zLmVwb2NoX2VuZCA9IHRlbmQ7XG4gICAgY29uc3Qgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHMgPSB7fTtcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xuXG4gICAgdmFyIGN1cl9pbnRlcnZhbCA9IChwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luKTtcbiAgICB2YXIgYWN0dWFsX3N0ZXAgPSBmaW5kQWN0dWFsU3RlcChzdGVwLCBwYXJhbXMuZXBvY2hfYmVnaW4pO1xuICAgIG1heF9pbnRlcnZhbCA9IGFjdHVhbF9zdGVwICogNjsgLyogaG9zdCB0cmFmZmljIDMwIG1pbiAqL1xuXG4gICAgaWYoY3VyX2ludGVydmFsIDwgbWF4X2ludGVydmFsKSB7XG4gICAgICBpZigoaXNfbWF4X3pvb20gJiYgKGN1cl9pbnRlcnZhbCA8IG9sZF9pbnRlcnZhbCkpICYmICFmb3JjZV91cGRhdGUpIHtcbiAgICAgICAgb2xkX2ludGVydmFsID0gY3VyX2ludGVydmFsO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmKCFmb3JjZV91cGRhdGUpIHtcbiAgICAgICAgLyogRW5zdXJlIHRoYXQgYSBtaW5pbWFsIG51bWJlciBvZiBwb2ludHMgaXMgYXZhaWxhYmxlICovXG4gICAgICAgIHZhciBlcG9jaCA9IHBhcmFtcy5lcG9jaF9iZWdpbiArIChwYXJhbXMuZXBvY2hfZW5kIC0gcGFyYW1zLmVwb2NoX2JlZ2luKSAvIDI7XG4gICAgICAgIHZhciBuZXdfZW5kID0gTWF0aC5mbG9vcihlcG9jaCArIG1heF9pbnRlcnZhbCAvIDIpO1xuXG4gICAgICAgIGlmKG5ld19lbmQgPj0gbm93KSB7XG4gICAgICAgICAgLyogT25seSBleHBhbmQgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW50ZXJ2YWwgKi9cbiAgICAgICAgICBwYXJhbXMuZXBvY2hfYmVnaW4gPSBwYXJhbXMuZXBvY2hfZW5kIC0gbWF4X2ludGVydmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtcy5lcG9jaF9iZWdpbiA9IE1hdGguZmxvb3IoZXBvY2ggLSBtYXhfaW50ZXJ2YWwgLyAyKTtcbiAgICAgICAgICBwYXJhbXMuZXBvY2hfZW5kID0gTWF0aC5mbG9vcihlcG9jaCArIG1heF9pbnRlcnZhbCAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNfbWF4X3pvb20gPSB0cnVlO1xuICAgICAgICBjaGFydC56b29tVHlwZShudWxsKTsgLy8gZGlzYWJsZSB6b29tXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJfaW50ZXJ2YWwgPiBtYXhfaW50ZXJ2YWwpIHtcbiAgICAgIGlzX21heF96b29tID0gZmFsc2U7XG4gICAgICBjaGFydC56b29tVHlwZSgneCcpOyAvLyBlbmFibGUgem9vbVxuICAgIH1cblxuICAgIG9sZF9pbnRlcnZhbCA9IGN1cl9pbnRlcnZhbDtcblxuICAgIGlmKCFmaXJzdF9sb2FkIHx8IGhhc19pbml0aWFsX3pvb20oKSB8fCBmb3JjZV91cGRhdGUpXG4gICAgICBhbGlnbl9zdGVwID0gbnVsbDtcbiAgICBmaXhUaW1lUmFuZ2UoY2hhcnQsIHBhcmFtcywgYWxpZ25fc3RlcCwgYWN0dWFsX3N0ZXApO1xuXG4gICAgaWYoZmlyc3RfbG9hZClcbiAgICAgIGluaXRpYWxfcmFuZ2UgPSBbcGFyYW1zLmVwb2NoX2JlZ2luLCBwYXJhbXMuZXBvY2hfZW5kXTtcblxuICAgIGlmKChvbGRfc3RhcnQgPT0gcGFyYW1zLmVwb2NoX2JlZ2luKSAmJiAob2xkX2VuZCA9PSBwYXJhbXMuZXBvY2hfZW5kKSAmJiAoIWZvcmNlX3VwZGF0ZSkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBvbGRfc3RhcnQgPSBwYXJhbXMuZXBvY2hfYmVnaW47XG4gICAgb2xkX2VuZCA9IHBhcmFtcy5lcG9jaF9lbmQ7XG5cbiAgICBpZihwZW5kaW5nX3RhYmxlX3JlcXVlc3QpXG4gICAgICBwZW5kaW5nX3RhYmxlX3JlcXVlc3QuYWJvcnQoKTtcblxuICAgIGlmKHBlbmRpbmdfY2hhcnRfcmVxdWVzdClcbiAgICAgIHBlbmRpbmdfY2hhcnRfcmVxdWVzdC5hYm9ydCgpO1xuICAgIGVsc2UgaWYoIW5vX3NwaW5uZXIpXG4gICAgICBzcGlubmVyLmFwcGVuZFRvKCRjaGFydC5wYXJlbnQoKSk7XG5cbiAgICAvLyBVcGRhdGUgZGF0ZXRpbWUgc2VsZWN0aW9uXG4gICAgJChcIiNwZXJpb2RfYmVnaW5cIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKHBhcmFtcy5lcG9jaF9iZWdpbiAqIDEwMDApKTtcbiAgICAkKFwiI3BlcmlvZF9lbmRcIikuZGF0ZXRpbWVwaWNrZXIoXCJkYXRlXCIsIG5ldyBEYXRlKE1hdGgubWluKHBhcmFtcy5lcG9jaF9lbmQgKiAxMDAwLCAkLm5vdygpKSkpO1xuXG4gICAgaWYocXVlcnlfdGltZXIpXG4gICAgICBjbGVhckludGVydmFsKHF1ZXJ5X3RpbWVyKTtcblxuICAgIHF1ZXJ5X3RpbWVyID0gc2V0SW50ZXJ2YWwoc2hvd1F1ZXJ5U2xvdywgc2Vjb25kc19iZWZvcmVfcXVlcnlfc2xvdyAqIDEwMDApO1xuICAgIHF1ZXJ5X2NvbXBsZXRlZCA9IDA7XG4gICAgcXVlcnlfd2FzX2Fib3J0ZWQgPSBmYWxzZTtcbiAgICBjaGFydC5ub0RhdGEoaTE4bl9leHQubm9fZGF0YV9hdmFpbGFibGUpO1xuICAgIGhpZGVRdWVyeVNsb3coKTtcblxuICAgIHZhciByZXFfcGFyYW1zID0gJC5leHRlbmQoe30sIHBhcmFtcyk7XG4gICAgLy8gc2tpcCBwYXN0IHBlcmlvZCBjb21wYXJpc29uIGlmIGEgY3VzdG9tIGludGVydmFsIGlzIHNlbGVjdGVkXG4gICAgaWYoIWNhbkNvbXBhcmVCYWNrd2FyZHMocmVxX3BhcmFtcy5lcG9jaF9iZWdpbiwgcmVxX3BhcmFtcy5lcG9jaF9lbmQpKVxuICAgICAgZGVsZXRlIHJlcV9wYXJhbXMudHNfY29tcGFyZTtcblxuICAgIC8qIERpc2FibGUgdGhlIG51bGwgZGF0YSBmaWxsaW5nIG9ubHkgZm9yIHRoZSBjaGFydHMgd2hpY2ggc3VwcG9ydCB0aGVcbiAgICAgKiBcInVucmVhY2hhYmxlXCIgc3RhdHVzICh1bnJlYWNoYWJsZSByZXBvcnRlZCBhcyBhIDAgdmFsdWUgaW5zdGVhZCBvZiBudWxsKS4gKi9cbiAgICBpZih2aXN1YWxpemF0aW9uLnNob3dfdW5yZWFjaGFibGUpXG4gICAgICByZXFfcGFyYW1zLm5vX2ZpbGwgPSAxO1xuXG4gICAgLy8gTG9hZCBkYXRhIHZpYSBhamF4XG4gICAgcGVuZGluZ19jaGFydF9yZXF1ZXN0ID0gJC5nZXQodXJsLCByZXFfcGFyYW1zLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnJzcDsgLyogQWRhcHRzIHRoZSByZXNwb25zZSB0byB0aGUgbmV3IFJFU1QgQVBJIHYxICovXG5cblx0aWYoZGF0YSAmJiBkYXRhLmVycm9yKVxuICAgICAgICBjaGFydC5ub0RhdGEoZGF0YS5lcnJvcik7XG5cbiAgICAgIGlmKCFkYXRhIHx8ICFkYXRhLnNlcmllcyB8fCAhZGF0YS5zZXJpZXMubGVuZ3RoIHx8ICFjaGVja1Nlcmllc0NvbnNpbnN0ZW5jeShzY2hlbWFfbmFtZSwgZGF0YS5jb3VudCwgZGF0YS5zZXJpZXMpKSB7XG4gICAgICAgIHVwZGF0ZV9jaGFydF9kYXRhKFtdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXggeCBheGlzXG4gICAgICB2YXIgdGlja19zdGVwID0gTWF0aC5jZWlsKGNoYXJ0LnRpY2tfc3RlcCAvIGRhdGEuc3RlcCkgKiBkYXRhLnN0ZXA7XG4gICAgICBjaGFydC54QXhpcy50aWNrVmFsdWVzKGJ1aWxkVGltZUFycmF5KGRhdGEuc3RhcnQsIGRhdGEuc3RhcnQgKyBkYXRhLmNvdW50ICogZGF0YS5zdGVwLCB0aWNrX3N0ZXApKTtcbiAgICAgIGNoYXJ0LnhBeGlzLnRpY2tGb3JtYXQoZnVuY3Rpb24oZCkgeyByZXR1cm4gZDMudGltZS5mb3JtYXQoY2hhcnQueF9mbXQpKG5ldyBEYXRlKGQqMTAwMCkpIH0pO1xuXG4gICAgICAvLyBBZGFwdCBkYXRhXG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICB2YXIgc2VyaWVzID0gZGF0YS5zZXJpZXM7XG4gICAgICB2YXIgdG90YWxfc2VyaWU7XG4gICAgICB2YXIgY29sb3JfaSA9IDA7XG4gICAgICBsZXQgdGltZV9lbGFwc2VkID0gMTtcblxuICAgICAgaWYodmlzdWFsaXphdGlvbi50aW1lX2VsYXBzZWQpXG4gICAgICAgIHRpbWVfZWxhcHNlZCA9IHZpc3VhbGl6YXRpb24udGltZV9lbGFwc2VkO1xuXG4gICAgICB2YXIgY2hhcnRfY29sb3JzID0gKHNlcmllcy5sZW5ndGggPD0gY2hhcnRfY29sb3JzX21pbi5sZW5ndGgpID8gY2hhcnRfY29sb3JzX21pbiA6IGNoYXJ0X2NvbG9yc19mdWxsO1xuXG4gICAgICBmb3IodmFyIGo9MDsgajxzZXJpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgc2VyaWVfZGF0YSA9IHNlcmllc1tqXS5kYXRhO1xuXG4gICAgICAgIHZhciB0ID0gZGF0YS5zdGFydDtcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VyaWVfZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhbHVlc1tpXSA9IFt0LCBzZXJpZV9kYXRhW2ldIC8gdGltZV9lbGFwc2VkIF07XG4gICAgICAgICAgdCArPSBkYXRhLnN0ZXA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFiZWwgPSBnZXRTZXJpZUxhYmVsKHNjaGVtYV9uYW1lLCBzZXJpZXNbal0sIHZpc3VhbGl6YXRpb24sIGopO1xuICAgICAgICB2YXIgbGVnZW5kX2tleSA9IHNjaGVtYV9uYW1lICsgXCI6XCIgKyBsYWJlbDtcbiAgICAgICAgY2hhcnQuY3VycmVudF9zdGVwID0gZGF0YS5zdGVwO1xuICAgICAgICBsZXQgc2VyaWVfdHlwZSA9IHNlcmllc1tqXS50eXBlO1xuICAgICAgICBsZXQgc2VyaWVfY29sb3IgPSBjaGFydF9jb2xvcnNbY29sb3JfaSsrXVxuXG4gICAgICAgIGlmKCFzZXJpZV90eXBlKSB7XG4gICAgICAgICAgaWYodmlzdWFsaXphdGlvbi5zcGxpdF9kaXJlY3Rpb25zKSB7XG4gICAgICAgICAgICAvKiBSWCBhbmQgVFggZGlyZWN0aW9ucyBhcmUgc3BsaXR0ZWQsIGRyb3cgdGhlIHNlY29uZCBzZXJpZVxuICAgICAgICAgICAgICogKFRYKSBhcyBhIGxpbmUgKi9cbiAgICAgICAgICAgIHNlcmllX3R5cGUgPSAoaiA9PSAwKSA/IFwiYXJlYVwiIDogXCJsaW5lXCI7XG4gICAgICAgICAgICBzZXJpZV9jb2xvciA9IHNwbGl0X2RpcmVjdGlvbnNfY29sb3JzW2pdIHx8IHNlcmllX2NvbG9yO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgc2VyaWVfdHlwZSA9IFwiYXJlYVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHNbal0gPSBsYWJlbDtcblxuICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAga2V5OiBsYWJlbCxcbiAgICAgICAgICB5QXhpczogc2VyaWVzW2pdLmF4aXMgfHwgMSxcbiAgICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgICB0eXBlOiBzZXJpZV90eXBlLFxuICAgICAgICAgIGNvbG9yOiBzZXJpZV9jb2xvcixcbiAgICAgICAgICBsZWdlbmRfa2V5OiBsZWdlbmRfa2V5LFxuICAgICAgICAgIGRpc2FibGVkOiBpc0xlZ2VuZERpc2FibGVkKGxlZ2VuZF9rZXksIGZhbHNlKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aXN1YWxfdG90YWwgPSBidWlsZFRvdGFsU2VyaWUoc2VyaWVzKTtcbiAgICAgIHZhciBoYXNfZnVsbF9kYXRhID0gZmFsc2U7XG5cbiAgICAgIGlmKGRhdGEuYWRkaXRpb25hbF9zZXJpZXMgJiYgZGF0YS5hZGRpdGlvbmFsX3Nlcmllcy50b3RhbCkge1xuICAgICAgICB0b3RhbF9zZXJpZSA9IGRhdGEuYWRkaXRpb25hbF9zZXJpZXMudG90YWw7XG5cbiAgICAgICAgLyogVG90YWwgLT4gT3RoZXIgKi9cbiAgICAgICAgdmFyIG90aGVyX3NlcmllID0gYnVpbGRPdGhlclNlcmllKHRvdGFsX3NlcmllLCB2aXN1YWxfdG90YWwpO1xuXG4gICAgICAgIGlmKG90aGVyX3NlcmllKSB7XG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAga2V5OiBncmFwaF9pMThuLm90aGVyLFxuICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICB2YWx1ZXM6IGFycmF5VG9OdlNlcmllKG90aGVyX3NlcmllLCBkYXRhLnN0YXJ0LCBkYXRhLnN0ZXApLFxuICAgICAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgICAgICBjb2xvcjogY2hhcnRfY29sb3JzW2NvbG9yX2krK10sXG4gICAgICAgICAgICBsZWdlbmRfa2V5OiBcIm90aGVyXCIsXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIm90aGVyXCIsIGZhbHNlKSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGhhc19mdWxsX2RhdGEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3RhbF9zZXJpZSA9IHZpc3VhbF90b3RhbDtcbiAgICAgICAgaGFzX2Z1bGxfZGF0YSA9ICFzY2hlbWFfbmFtZS5zdGFydHNXaXRoKFwidG9wOlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhc3Rfc2VyaWUgPSBudWxsO1xuXG4gICAgICBpZihkYXRhLmFkZGl0aW9uYWxfc2VyaWVzKSB7XG4gICAgICAgIGZvcih2YXIga2V5IGluIGRhdGEuYWRkaXRpb25hbF9zZXJpZXMpIHtcbiAgICAgICAgICBpZihrZXkgPT0gXCJ0b3RhbFwiKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWFudWFsbHkgYXMgXCJvdGhlclwiIGFib3ZlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2VyaWVfZGF0YSA9IHVwc2FtcGxlU2VyaWUoZGF0YS5hZGRpdGlvbmFsX3Nlcmllc1trZXldLCBkYXRhLmNvdW50KTtcbiAgICAgICAgICB2YXIgcmF0aW9fb3Zlcl90b3RhbCA9IGQzLm1heChzZXJpZV9kYXRhKSAvIGQzLm1heCh2aXN1YWxfdG90YWwpO1xuICAgICAgICAgIHZhciB2YWx1ZXMgPSBhcnJheVRvTnZTZXJpZShzZXJpZV9kYXRhLCBkYXRhLnN0YXJ0LCBkYXRhLnN0ZXApO1xuICAgICAgICAgIHZhciBpc19kaXNhYmxlZCA9IGlzTGVnZW5kRGlzYWJsZWQoa2V5LCBmYWxzZSk7XG4gICAgICAgICAgcGFzdF9zZXJpZSA9IHNlcmllX2RhdGE7IC8vIFRPRE86IG1vcmUgcmVsaWFibGUgd2F5IHRvIGRldGVybWluZSBwYXN0IHNlcmllXG5cbiAgICAgICAgICAvKiBIaWRlIGNvbXBhcmlzb24gc2VyaWUgYXQgZmlyc3QgbG9hZCBpZiBpdCdzIHRvbyBoaWdoICovXG4gICAgICAgICAgaWYoKGZpcnN0X3RpbWVfbG9hZGVkIHx8ICFtYW51YWxfdHJpZ2dlcl9leHRyYV9zZXJpZXNba2V5XSkgJiYgKHJhdGlvX292ZXJfdG90YWwgPiBtYXhfY21wX292ZXJfdG90YWxfcmF0aW8pKVxuICAgICAgICAgICAgaXNfZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAga2V5OiBOdG9wVXRpbHMuY2FwaXRhbGlzZUZpcnN0TGV0dGVyKGtleSksXG4gICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIiM3RTkxQTBcIixcbiAgICAgICAgICAgIGxlZ2VuZF9rZXk6IGtleSxcbiAgICAgICAgICAgIGRpc2FibGVkOiBpc19kaXNhYmxlZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBFeHRyYSBob3Jpem9udGFsIHNlcmllcyAqL1xuICAgICAgaWYodmlzdWFsaXphdGlvbiAmJiB2aXN1YWxpemF0aW9uLmV4dHJhX3Nlcmllcykge1xuICAgICAgICBmb3IodmFyIGk9MDsgaTx2aXN1YWxpemF0aW9uLmV4dHJhX3Nlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBzZXJpZSA9IHZpc3VhbGl6YXRpb24uZXh0cmFfc2VyaWVzW2ldO1xuXG4gICAgICAgICAgaWYoIXNlcmllLmxhYmVsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJNaXNzaW5nIGV4dHJhX3NlcmllcyBsYWJlbFwiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFzZXJpZS52YWx1ZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTWlzc2luZyBleHRyYV9zZXJpZXMgdmFsdWVcIik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmF0aW9fb3Zlcl90b3RhbCA9IHNlcmllLnZhbHVlIC8gZDMubWF4KHZpc3VhbF90b3RhbCk7XG4gICAgICAgICAgdmFyIGlzX2Rpc2FibGVkID0gaXNMZWdlbmREaXNhYmxlZChzZXJpZS5sYWJlbCwgZmFsc2UpO1xuXG4gICAgICAgICAgLyogSGlkZSB0aGUgbGluZSBzZXJpZSBhdCBmaXJzdCBsb2FkIGlmIGl0J3MgdG9vIGhpZ2ggKi9cbiAgICAgICAgICBpZigoZmlyc3RfdGltZV9sb2FkZWQgfHwgIW1hbnVhbF90cmlnZ2VyX2V4dHJhX3Nlcmllc1tzZXJpZS5sYWJlbF0pICYmIChyYXRpb19vdmVyX3RvdGFsID4gbWF4X2xpbmVfb3Zlcl90b3RhbF9yYXRpbykpXG4gICAgICAgICAgICBpc19kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICBrZXk6IHNlcmllLmxhYmVsLFxuICAgICAgICAgICAgeUF4aXM6IHNlcmllLmF4aXMgfHwgMSxcbiAgICAgICAgICAgIHZhbHVlczogYXJyYXlUb052U2VyaWUodXBzYW1wbGVTZXJpZShbc2VyaWUudmFsdWVdLCBkYXRhLmNvdW50KSwgZGF0YS5zdGFydCwgZGF0YS5zdGVwKSxcbiAgICAgICAgICAgIHR5cGU6IHNlcmllLnR5cGUgfHwgXCJsaW5lXCIsXG4gICAgICAgICAgICBjb2xvcjogc2VyaWUuY29sb3IgfHwgXCJyZWRcIixcbiAgICAgICAgICAgIGNsYXNzZWQ6IHNlcmllLmNsYXNzLFxuICAgICAgICAgICAgbGVnZW5kX2tleTogc2VyaWUubGFiZWwsXG4gICAgICAgICAgICBkaXNhYmxlZDogaXNfZGlzYWJsZWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYoIWRhdGEubm9fdHJlbmQgJiYgaGFzX2Z1bGxfZGF0YSAmJiAodG90YWxfc2VyaWUubGVuZ3RoID49IDMpKSB7XG4gICAgICAgIC8vIFNtb290aGVkIHNlcmllXG4gICAgICAgIC8qIG51bV9zbW9vdGhlZF9wb2ludHMgZGV0ZXJtaW5lcyB0aGUgd2luZG93IHNpemUgdG8gdXNlIHdoaWxlIGNvbXB1dGluZyByb2xsaW5nIGZ1bmN0aW9ucyAqL1xuICAgICAgICB2YXIgbnVtX3Ntb290aGVkX3BvaW50cyA9IE1hdGgubWluKE1hdGgubWF4KE1hdGguZmxvb3IodG90YWxfc2VyaWUubGVuZ3RoIC8gNSksIDMpLCAxMik7XG5cbiAgICAgICAgdmFyIHNtb290aF9mdW5jdGlvbnMgPSB7XG4gICAgICAgICAgLy90cmVuZDogW2dyYXBoX2kxOG4udHJlbmQsIFwiIzYyQURGNlwiLCBzbW9vdGgsIG51bV9zbW9vdGhlZF9wb2ludHNdLFxuICAgICAgICAgIC8vZW1hOiBbXCJFTUFcIiwgXCIjRjk2QkZGXCIsIGV4cG9uZW50aWFsTW92aW5nQXZlcmFnZUFycmF5LCB7cGVyaW9kczogbnVtX3Ntb290aGVkX3BvaW50c31dLFxuICAgICAgICAgIC8vc21hOiBbXCJTTUFcIiwgXCIjQTkwMEZGXCIsIHNpbXBsZU1vdmluZ0F2ZXJhZ2VBcnJheSwge3BlcmlvZHM6IG51bV9zbW9vdGhlZF9wb2ludHN9XSxcbiAgICAgICAgICAvL3JzaTogW1wiUlNJIGN1ciB2cyBwYXN0XCIsIFwiIzAwRkY1RFwiLCByZWxhdGl2ZVN0cmVuZ3RoSW5kZXhBcnJheSwge3BlcmlvZHM6IG51bV9zbW9vdGhlZF9wb2ludHN9XSxcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZF9zbW9vdGhlZF9zZXJpZShmbl90b191c2UpIHtcbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHNtb290aF9mdW5jdGlvbnNbZm5fdG9fdXNlXTtcbiAgICAgICAgICB2YXIgc21vb3RoZWQ7XG5cbiAgICAgICAgICBpZihmbl90b191c2UgPT0gXCJyc2lcIikge1xuICAgICAgICAgICAgaWYoIXBhc3Rfc2VyaWUpXG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIGRlbHRhX3NlcmllID0gW107XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTx0b3RhbF9zZXJpZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBkZWx0YV9zZXJpZVtpXSA9IHRvdGFsX3NlcmllW2ldIC0gcGFzdF9zZXJpZVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNtb290aGVkID0gb3B0aW9uc1syXShkZWx0YV9zZXJpZSwgb3B0aW9uc1szXSk7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBzbW9vdGhlZCA9IG9wdGlvbnNbMl0odG90YWxfc2VyaWUsIG9wdGlvbnNbM10pO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmaXJzdCBwb2ludCBhcyBpdCdzIHVzZWQgYXMgdGhlIGJhc2Ugd2luZG93IGluIHRoZSByb2xsaW5nIGZ1bmN0aW9uc1xuICAgICAgICAgIGlmKHNtb290aGVkWzBdKVxuICAgICAgICAgICAgZGVsZXRlIHNtb290aGVkWzBdO1xuXG4gICAgICAgICAgdmFyIG1heF92YWwgPSBkMy5tYXgoc21vb3RoZWQpO1xuICAgICAgICAgIGlmKG1heF92YWwgPiAwKSB7XG4gICAgICAgICAgICB2YXIgYWxpZ25lZDtcblxuICAgICAgICAgICAgaWYoKGZuX3RvX3VzZSAhPSBcImVtYVwiKSAmJiAoZm5fdG9fdXNlICE9IFwic21hXCIpICYmIChmbl90b191c2UgIT0gXCJyc2lcIikpIHtcbiAgICAgICAgICAgICAgdmFyIHNjYWxlID0gZDMubWF4KHRvdGFsX3NlcmllKSAvIG1heF92YWw7XG4gICAgICAgICAgICAgIHZhciBzY2FsZWQgPSAkLm1hcChzbW9vdGhlZCwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCAqIHNjYWxlOyB9KTtcbiAgICAgICAgICAgICAgYWxpZ25lZCA9IHVwc2FtcGxlU2VyaWUoc2NhbGVkLCBkYXRhLmNvdW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSAoZGF0YS5jb3VudCAtIHNtb290aGVkLmxlbmd0aCk7XG4gICAgICAgICAgICAgIHZhciB0b19maWxsID0gcmVtYWluaW5nIDwgbnVtX3Ntb290aGVkX3BvaW50cyA/IHJlbWFpbmluZyA6IG51bV9zbW9vdGhlZF9wb2ludHM7XG5cbiAgICAgICAgICAgICAgLyogRmlsbCB0aGUgaW5pdGlhbCBidWZmZXJpbmcgc3BhY2UgKi9cbiAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8dG9fZmlsbDsgaSsrKVxuICAgICAgICAgICAgICAgIHNtb290aGVkLnNwbGljZSgwLCAwLCBzbW9vdGhlZFswXSk7XG5cbiAgICAgICAgICAgICAgYWxpZ25lZCA9IHVwc2FtcGxlU2VyaWUoc21vb3RoZWQsIGRhdGEuY291bnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihmbl90b191c2UgPT0gXCJyc2lcIilcbiAgICAgICAgICAgICAgY2hhcnQueURvbWFpblJhdGlvWTIoMS4wKTtcblxuICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IG9wdGlvbnNbMF0sXG4gICAgICAgICAgICAgIHlBeGlzOiAoZm5fdG9fdXNlICE9IFwicnNpXCIpID8gMSA6IDIsXG4gICAgICAgICAgICAgIHZhbHVlczogYXJyYXlUb052U2VyaWUoYWxpZ25lZCwgZGF0YS5zdGFydCwgZGF0YS5zdGVwKSxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogb3B0aW9uc1sxXSxcbiAgICAgICAgICAgICAgbGVnZW5kX2tleTogZm5fdG9fdXNlLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChmbl90b191c2UsIGZhbHNlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHNob3dfYWxsX3Ntb290aCkge1xuICAgICAgICAgIGZvcihmbl90b191c2UgaW4gc21vb3RoX2Z1bmN0aW9ucylcbiAgICAgICAgICAgIGFkZF9zbW9vdGhlZF9zZXJpZShmbl90b191c2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIEFkZCBleHRyYSBsaW5lcy4gVGhlc2UgYXJlIGRpZmZlcmVudCBmcm9tIHRoZSBleHRyYSBzZXJpZXMgYXNcbiAgICAgICAqIHRoZXkgYXJlIHNpbXBsZSBsaW5lcywgc28gdGhleSBhcmUgbm90IGJvdW5kIHRvIGFuIGF4aXMuICovXG4gICAgICBleHRyYV9saW5lcyA9IFtdO1xuXG4gICAgICBpZigodmlzdWFsaXphdGlvbi5zaG93X3VucmVhY2hhYmxlKSAmJiAocmVzLmxlbmd0aCA+IDApKSB7XG4gICAgICAgIHZhciByZWZfc2VyaWUgPSByZXNbMF0udmFsdWVzO1xuICAgICAgICBsZXQgdG9rID0gcmVmX3NlcmllWzBdWzBdO1xuICAgICAgICBsZXQgd2FzX3VucmVhY2hhYmxlID0gZmFsc2U7XG4gICAgICAgIHVucmVhY2hhYmxlX3RpbWVzdGFtcHMgPSB7fTtcblxuICAgICAgICBmb3IodmFyIGk9MDsgaTxyZWZfc2VyaWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpc191bnJlYWNoYWJsZSA9IChyZWZfc2VyaWVbaV1bMV0gPT09IDApO1xuICAgICAgICAgIGNvbnN0IHR2YWwgPSByZWZfc2VyaWVbaV1bMF07XG5cbiAgICAgICAgICBpZigocmVmX3NlcmllW2ldWzFdID09IHJlZl9zZXJpZVtpXVsxXSkpXG4gICAgICAgICAgICAvKiBUaGUgbW9zdCByZWNlbnQgdGltZSBmb3Igbm9uIE5hTiB2YWx1ZXMgKi9cbiAgICAgICAgICAgIGxhc3Rfa25vd25fdCA9IHR2YWw7XG5cbiAgICAgICAgICBpZighaXNfdW5yZWFjaGFibGUpIHtcbiAgICAgICAgICAgIGlmKHdhc191bnJlYWNoYWJsZSlcbiAgICAgICAgICAgICAgZXh0cmFfbGluZXMucHVzaChbdG9rLCB0dmFsLCAwLCAwXSk7XG5cbiAgICAgICAgICAgIHRvayA9IHR2YWw7XG4gICAgICAgICAgICB3YXNfdW5yZWFjaGFibGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogQ2hhbmdlIHRoZSByZWZlcmVuY2Ugc2VyaWUgcG9pbnQgdG8gbnVsbCB0byBmaXggaW50ZXJwb2xhdGlvbiBpc3N1ZXMgKi9cbiAgICAgICAgICAgIHJlZl9zZXJpZVtpXVsxXSA9IG51bGw7XG4gICAgICAgICAgICB1bnJlYWNoYWJsZV90aW1lc3RhbXBzW3R2YWxdID0gdHJ1ZTtcblxuICAgICAgICAgICAgd2FzX3VucmVhY2hhYmxlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZih3YXNfdW5yZWFjaGFibGUpIHtcbiAgICAgICAgICBjb25zdCB0bGFzdCA9IHJlZl9zZXJpZVtyZWZfc2VyaWUubGVuZ3RoIC0gMV1bMF07XG5cbiAgICAgICAgICBpZih0bGFzdCAhPSB0b2spXG4gICAgICAgICAgICBleHRyYV9saW5lcy5wdXNoKFt0b2ssIHRsYXN0LCAwLCAwXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZ2V0IHRoZSB2YWx1ZSBmb3JtYXR0ZXJcbiAgICAgIHZhciBmb3JtYXR0ZXIxID0gZ2V0VmFsdWVGb3JtYXR0ZXIoc2NoZW1hX25hbWUsIG1ldHJpY190eXBlLCBzZXJpZXMuZmlsdGVyKGZ1bmN0aW9uKGQpIHsgcmV0dXJuKGQuYXhpcyAhPSAyKTsgfSksIHZpc3VhbGl6YXRpb24udmFsdWVfZm9ybWF0dGVyLCBkYXRhLnN0YXRpc3RpY3MpO1xuICAgICAgdmFyIHZhbHVlX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMF07XG4gICAgICB2YXIgdG90X2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMV0gfHwgdmFsdWVfZm9ybWF0dGVyO1xuICAgICAgdmFyIHN0YXRzX2Zvcm1hdHRlciA9IGZvcm1hdHRlcjFbMl0gfHwgdmFsdWVfZm9ybWF0dGVyO1xuICAgICAgY2hhcnQueUF4aXMxLnRpY2tGb3JtYXQodmFsdWVfZm9ybWF0dGVyKTtcbiAgICAgIGNoYXJ0LnlBeGlzMV9mb3JtYXR0ZXIgPSB2aXN1YWxpemF0aW9uLnNob3dfdW5yZWFjaGFibGUgPyBmb3JtYXRfdW5yZWFjaGFibGUodmFsdWVfZm9ybWF0dGVyKSA6IHZhbHVlX2Zvcm1hdHRlcjtcblxuICAgICAgdmFyIHNlY29uZF9heGlzX3NlcmllcyA9IHNlcmllcy5maWx0ZXIoZnVuY3Rpb24oZCkgeyByZXR1cm4oZC5heGlzID09IDIpOyB9KTtcbiAgICAgIHZhciBmb3JtYXR0ZXIyID0gZ2V0VmFsdWVGb3JtYXR0ZXIoc2NoZW1hX25hbWUsIG1ldHJpY190eXBlLCBzZWNvbmRfYXhpc19zZXJpZXMsIHZpc3VhbGl6YXRpb24udmFsdWVfZm9ybWF0dGVyMiB8fCB2aXN1YWxpemF0aW9uLnZhbHVlX2Zvcm1hdHRlciwgZGF0YS5zdGF0aXN0aWNzKTtcbiAgICAgIHZhciB2YWx1ZV9mb3JtYXR0ZXIyID0gZm9ybWF0dGVyMlswXTtcbiAgICAgIGNoYXJ0LnlBeGlzMi50aWNrRm9ybWF0KHZhbHVlX2Zvcm1hdHRlcjIpO1xuICAgICAgY2hhcnQueUF4aXMyX2Zvcm1hdHRlciA9IHZhbHVlX2Zvcm1hdHRlcjI7XG5cbiAgICAgIHZhciBzdGF0c190YWJsZSA9ICQoXCIjdHMtY2hhcnQtc3RhdHNcIik7XG4gICAgICB2YXIgc3RhdHMgPSBkYXRhLnN0YXRpc3RpY3M7XG5cbiAgICAgIGlmKHN0YXRzKSB7XG4gICAgICAgIGlmKHN0YXRzLmF2ZXJhZ2UpIHtcblxuXG4gICAgICAgICAgaWYoIXZpc3VhbGl6YXRpb24uc3BsaXRfZGlyZWN0aW9ucykge1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbWFrZUZsYXRMaW5lVmFsdWVzKGRhdGEuc3RhcnQsIGRhdGEuc3RlcCwgZGF0YS5jb3VudCwgc3RhdHMuYXZlcmFnZSk7XG5cblxuICAgICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGdyYXBoX2kxOG4uYXZnLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI0FDOURERlwiLFxuICAgICAgICAgICAgICBsZWdlbmRfa2V5OiBcImF2Z1wiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcImF2Z1wiLCB0cnVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IGF2Z19zZW50ID0gbWFrZUZsYXRMaW5lVmFsdWVzKGRhdGEuc3RhcnQsIGRhdGEuc3RlcCwgZGF0YS5jb3VudCwgc3RhdHMuYnlfc2VyaWVbMF1bXCJhdmVyYWdlXCJdKTtcbiAgICAgICAgICAgIGxldCBhdmdfcmN2ZCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzFdW1wiYXZlcmFnZVwiXSk7XG4gICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgIGtleTogZ3JhcGhfaTE4bi5hdmdfc2VudCxcbiAgICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICAgIHZhbHVlczogYXZnX3NlbnQsXG4gICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgICBjbGFzc2VkOiBcImxpbmUtZGFzaGVkIGxpbmUtYW5pbWF0ZWRcIixcbiAgICAgICAgICAgICAgY29sb3I6IFwiI0FDOURERlwiLFxuICAgICAgICAgICAgICBsZWdlbmRfa2V5OiBcImF2Z19zZW50XCIsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiBpc0xlZ2VuZERpc2FibGVkKFwiYXZnX3NlbnRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuLmF2Z19yY3ZkLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBhdmdfcmN2ZCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjQUM5RERGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiYXZnX3JjdmRcIixcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzTGVnZW5kRGlzYWJsZWQoXCJhdmdfcmN2ZFwiLCB0cnVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFxuICAgICAgICAgIEZ1bmN0aW9uIHVzZWQgdG8gc3BsaXQgY2hhcnRzIGluZm8sIG90aGVyd2lzZSBncmFwaHMgd2l0aCBtdWx0aXBsZVxuICAgICAgICAgIHRpbWVzZXJpZXMgYXJlIGdvaW5nIHRvIGhhdmUgaW5jb3JyZWN0IHZhbHVlc1xuICAgICAgICAqL1xuICAgICAgICAgIGZ1bmN0aW9uIHNwbGl0U2VyaWVzSW5mbyhzdGF0c19uYW1lLCBjZWxsLCBzaG93X2RhdGUsIGZvcm1hdHRlciwgdG90YWwpIHtcbiAgICAgICAgICBsZXQgdmFsID0gXCJcIjtcbiAgICAgICAgICBsZXQgdGltZV9lbGFwc2VkID0gMTtcbiAgICAgICAgICBjb25zdCB2YWxfZm9ybWF0dGVyID0gKGZvcm1hdHRlciA/IGZvcm1hdHRlciA6IHN0YXRzX2Zvcm1hdHRlcilcblxuICAgICAgICAgIGlmKHZpc3VhbGl6YXRpb24udGltZV9lbGFwc2VkKVxuICAgICAgICAgICAgdGltZV9lbGFwc2VkID0gdmlzdWFsaXphdGlvbi50aW1lX2VsYXBzZWRcbiAgICAgICAgICBcbiAgICAgICAgICBpZih2aXN1YWxpemF0aW9uLmZpcnN0X3RpbWVzZXJpZXNfb25seSkge1xuICAgICAgICAgICAgdmFsID0gdmFsX2Zvcm1hdHRlcihzdGF0cy5ieV9zZXJpZVswXVtzdGF0c19uYW1lXSAvIHRpbWVfZWxhcHNlZCkgKyAoc2hvd19kYXRlID8gKFwiIChcIiArIChuZXcgRGF0ZShyZXNbMF0udmFsdWVzW3N0YXRzW3N0YXRzX25hbWUgKyBcIl9pZHhcIl1dWzBdICogMTAwMCkpLmZvcm1hdChkYXRldGltZV9mb3JtYXQpICsgXCIpXCIpIDogXCJcIik7XG4gICAgICAgICAgfSBlbHNlIGlmKHZpc3VhbGl6YXRpb24uc3BsaXRfZGlyZWN0aW9ucyAmJiBzdGF0cy5ieV9zZXJpZSAmJiAhdG90YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAvKiBGb3JtYXQgZWFjaCBzcGxpdHRlZCBpbmZvICovXG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaTxzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYoc3RhdHMuYnlfc2VyaWVbaV0pXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsX2Zvcm1hdHRlcihzdGF0cy5ieV9zZXJpZVtpXVtzdGF0c19uYW1lXSAvIHRpbWVfZWxhcHNlZCkgK1xuICAgICAgICAgICAgICAgICAgXCIgW1wiICsgc2VyaWVzX2Zvcm1hdHRlZF9sYWJlbHNbaV0gKyBcIl1cIiArXG4gICAgICAgICAgICAgICAgICAvKiBBZGQgdGhlIGRhdGUgKi9cbiAgICAgICAgICAgICAgICAgIChzaG93X2RhdGUgPyAoXCIgKFwiICsgKG5ldyBEYXRlKHJlc1tpXS52YWx1ZXNbc3RhdHMuYnlfc2VyaWVbaV1bc3RhdHNfbmFtZSArIFwiX2lkeFwiXSArIDFdWzBdICogMTAwMCkpLmZvcm1hdChkYXRldGltZV9mb3JtYXQpICsgXCIpXCIpIDogXCJcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBKb2luIHRoZW0gdXNpbmcgYSBuZXcgbGluZSAqL1xuICAgICAgICAgICAgdmFsID0gdmFsdWVzLmpvaW4oXCI8YnIgLz5cIik7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICB2YWwgPSB2YWxfZm9ybWF0dGVyKHN0YXRzW3N0YXRzX25hbWVdIC8gdGltZV9lbGFwc2VkKSArIChzaG93X2RhdGUgPyAoXCIgKFwiICsgKG5ldyBEYXRlKHJlc1swXS52YWx1ZXNbc3RhdHNbc3RhdHNfbmFtZSArIFwiX2lkeFwiXV1bMF0gKiAxMDAwKSkuZm9ybWF0KGRhdGV0aW1lX2Zvcm1hdCkgKyBcIilcIikgOiBcIlwiKTtcblxuICAgICAgICAgIC8qIEFkZCB0aGUgc3RyaW5nIHRvIHRoZSBzcGFuICovXG4gICAgICAgICAgaWYodmFsKVxuICAgICAgICAgICAgY2VsbC5zaG93KCkuZmluZChcInNwYW5cIikuaHRtbCh2YWwpO1xuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbF9jZWxsID0gc3RhdHNfdGFibGUuZmluZChcIi5ncmFwaC12YWwtdG90YWxcIik7XG4gICAgICAgIHZhciBhdmVyYWdlX2NlbGwgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1hdmVyYWdlXCIpO1xuICAgICAgICB2YXIgbWluX2NlbGwgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1taW5cIik7XG4gICAgICAgIHZhciBtYXhfY2VsbCA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLW1heFwiKTtcbiAgICAgICAgdmFyIHBlcmNfY2VsbCA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLTk1cGVyY2VudGlsZVwiKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0b3RhbF9jZWxsX3RpdGxlID0gc3RhdHNfdGFibGUuZmluZChcIi5ncmFwaC12YWwtdG90YWwtdGl0bGVcIik7XG4gICAgICAgIHZhciBhdmVyYWdlX2NlbGxfdGl0bGUgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1hdmVyYWdlLXRpdGxlXCIpO1xuICAgICAgICB2YXIgbWF4X2NlbGxfdGl0bGUgPSBzdGF0c190YWJsZS5maW5kKFwiLmdyYXBoLXZhbC1tYXgtdGl0bGVcIik7XG4gICAgICAgIHZhciBtaW5fY2VsbF90aXRsZSA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLW1pbi10aXRsZVwiKTtcbiAgICAgICAgdmFyIHBlcmNfY2VsbF90aXRsZSA9IHN0YXRzX3RhYmxlLmZpbmQoXCIuZ3JhcGgtdmFsLTk1cGVyY2VudGlsZS10aXRsZVwiKTtcblxuXG4gICAgICAgIC8vIGZpbGwgdGhlIHN0YXRzXG4gICAgICAgIGlmKHN0YXRzLnRvdGFsIHx8IHRvdGFsX2NlbGxfdGl0bGUuaXMoJzp2aXNpYmxlJykpXG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwidG90YWxcIiwgdG90YWxfY2VsbF90aXRsZSwgZmFsc2UsIHRvdF9mb3JtYXR0ZXIsIHRydWUpO1xuICAgICAgICBpZihzdGF0cy5hdmVyYWdlIHx8IGF2ZXJhZ2VfY2VsbF90aXRsZS5pcygnOnZpc2libGUnKSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJhdmVyYWdlXCIsIGF2ZXJhZ2VfY2VsbF90aXRsZSwgZmFsc2UsIHN0YXRzX2Zvcm1hdHRlcik7XG4gICAgICAgIGlmKChzdGF0cy5tYXhfdmFsIHx8IG1heF9jZWxsX3RpdGxlLmlzKCc6dmlzaWJsZScpKSAmJiByZXNbMF0udmFsdWVzW3N0YXRzLm1heF92YWxfaWR4XSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJtYXhfdmFsXCIsIG1heF9jZWxsX3RpdGxlLCB0cnVlLCBzdGF0c19mb3JtYXR0ZXIpO1xuICAgICAgICBpZigoc3RhdHMubWluX3ZhbCB8fCBtaW5fY2VsbF90aXRsZS5pcygnOnZpc2libGUnKSkgJiYgcmVzWzBdLnZhbHVlc1tzdGF0cy5taW5fdmFsX2lkeF0pXG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwibWluX3ZhbFwiLCBtaW5fY2VsbF90aXRsZSwgdHJ1ZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgaWYoc3RhdHNbXCI5NXRoX3BlcmNlbnRpbGVcIl0gfHwgcGVyY19jZWxsLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgc3BsaXRTZXJpZXNJbmZvKFwiOTV0aF9wZXJjZW50aWxlXCIsIHBlcmNfY2VsbF90aXRsZSwgZmFsc2UsIHN0YXRzX2Zvcm1hdHRlcik7XG5cblxuXG5cblxuICAgICAgICAgIGlmKCF2aXN1YWxpemF0aW9uLnNwbGl0X2RpcmVjdGlvbnMpIHtcbiAgICAgICAgICAgIC8qIFdoZW4gZGlyZWN0aW9ucyBhcmUgc3BsaXQsIGhpZGUgdGhlIHRvdGFsIHN0YXQgKi9cbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBtYWtlRmxhdExpbmVWYWx1ZXMoZGF0YS5zdGFydCwgZGF0YS5zdGVwLCBkYXRhLmNvdW50LCBzdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSk7XG5cbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY1wiXSxcbiAgICAgICAgICAgICAgeUF4aXM6IDEsXG4gICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgICAgICAgY2xhc3NlZDogXCJsaW5lLWRhc2hlZCBsaW5lLWFuaW1hdGVkXCIsXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM0NzZERkZcIixcbiAgICAgICAgICAgICAgbGVnZW5kX2tleTogXCI5NXBlcmNcIixcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IGlzTGVnZW5kRGlzYWJsZWQoXCI5NXBlcmNcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxldCBwZXJjU2VudCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzBdW1wiOTV0aF9wZXJjZW50aWxlXCJdKTtcbiAgICAgICAgICAgIGxldCBwZXJjUmN2ZCA9IG1ha2VGbGF0TGluZVZhbHVlcyhkYXRhLnN0YXJ0LCBkYXRhLnN0ZXAsIGRhdGEuY291bnQsIHN0YXRzLmJ5X3NlcmllWzFdW1wiOTV0aF9wZXJjZW50aWxlXCJdKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY19zZW50XCJdLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBwZXJjU2VudCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjNDc2REZGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiOTVwZXJjU2VudFwiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIjk1cGVyY1NlbnRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBncmFwaF9pMThuW1wiOTVfcGVyY19yY3ZkXCJdLFxuICAgICAgICAgICAgICB5QXhpczogMSxcbiAgICAgICAgICAgICAgdmFsdWVzOiBwZXJjUmN2ZCxcbiAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzZWQ6IFwibGluZS1kYXNoZWQgbGluZS1hbmltYXRlZFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjNDc2REZGXCIsXG4gICAgICAgICAgICAgIGxlZ2VuZF9rZXk6IFwiOTVwZXJjUmN2ZFwiLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogaXNMZWdlbmREaXNhYmxlZChcIjk1cGVyY1JjdmRcIiwgdHJ1ZSksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gZmlsbCB0aGUgc3RhdHNcbiAgICAgICAgaWYoc3RhdHMudG90YWwgfHwgdG90YWxfY2VsbC5pcygnOnZpc2libGUnKSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJ0b3RhbFwiLCB0b3RhbF9jZWxsLCBmYWxzZSwgdG90X2Zvcm1hdHRlciwgdHJ1ZSk7XG4gICAgICAgIGlmKHN0YXRzLmF2ZXJhZ2UgfHwgYXZlcmFnZV9jZWxsLmlzKCc6dmlzaWJsZScpKVxuICAgICAgICAgIHNwbGl0U2VyaWVzSW5mbyhcImF2ZXJhZ2VcIiwgYXZlcmFnZV9jZWxsLCBmYWxzZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgaWYoKHN0YXRzLm1pbl92YWwgfHwgbWluX2NlbGwuaXMoJzp2aXNpYmxlJykpICYmIHJlc1swXS52YWx1ZXNbc3RhdHMubWluX3ZhbF9pZHhdKVxuICAgICAgICAgIHNwbGl0U2VyaWVzSW5mbyhcIm1pbl92YWxcIiwgbWluX2NlbGwsIHRydWUsIHN0YXRzX2Zvcm1hdHRlcik7XG4gICAgICAgIGlmKChzdGF0cy5tYXhfdmFsIHx8IG1heF9jZWxsLmlzKCc6dmlzaWJsZScpKSAmJiByZXNbMF0udmFsdWVzW3N0YXRzLm1heF92YWxfaWR4XSlcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCJtYXhfdmFsXCIsIG1heF9jZWxsLCB0cnVlLCBzdGF0c19mb3JtYXR0ZXIpO1xuICAgICAgICBpZihzdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSB8fCBwZXJjX2NlbGwuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICBzcGxpdFNlcmllc0luZm8oXCI5NXRoX3BlcmNlbnRpbGVcIiwgcGVyY19jZWxsLCBmYWxzZSwgc3RhdHNfZm9ybWF0dGVyKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHZpc2libGUgZWxlbWVudHNcbiAgICAgICAgLy9pZihzdGF0c190YWJsZS5maW5kKFwidGRcIikuZmlsdGVyKGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMpLmNzcyhcImRpc3BsYXlcIikgIT0gXCJub25lXCI7IH0pLmxlbmd0aCA+IDApXG4gICAgICB9XG4gICAgICBzdGF0c190YWJsZS5zaG93KCk7XG5cbiAgICAgIGlmKHZpc3VhbGl6YXRpb24uc2hvd191bnJlYWNoYWJsZSAmJiBsYXN0X2tub3duX3QgJiZcbiAgICAgICAgICAobGFzdF9rbm93bl90ICsgZGF0YS5zdGVwID4gbm93KSAmJiAobm93IDwgbGFzdF9rbm93bl90ICsgMipkYXRhLnN0ZXApKSB7XG4gICAgICAgIC8qIEZvciB0aGUgYWN0aXZlIG1vbml0b3JpbmcgY2hhcnQsIHdlIHNob3cgYW4gYWRkaXRpb25hbCBwb2ludCB3aXRoIHRoZVxuICAgICAgICAgKiBsYXN0IHZhbHVlIGFuZCB0aGUgbm93IHRpbWVzdGFtcCBhcyByZXF1ZXN0ZWQgZm9yXG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9udG9wL250b3BuZy9pc3N1ZXMvMzgyMiAqL1xuICAgICAgICBmb3IodmFyIGo9MDsgajxyZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBzZXJpZSA9IHJlc1tqXS52YWx1ZXM7XG5cbiAgICAgICAgICBpZihzZXJpZS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgc2VyaWVbc2VyaWUubGVuZ3RoXSA9IFtub3csIHNlcmllW3NlcmllLmxlbmd0aCAtIDFdWzFdXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZW5hYmxlZF9zZXJpZXMgPSByZXMuZmlsdGVyKGZ1bmN0aW9uKGQpIHsgcmV0dXJuKGQuZGlzYWJsZWQgIT09IHRydWUpOyB9KTtcblxuICAgICAgaWYoc2Vjb25kX2F4aXNfc2VyaWVzLmxlbmd0aCA+IDAgfHwgZW5hYmxlZF9zZXJpZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgLy8gRW5hYmxlIGFsbCB0aGUgc2VyaWVzXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPHJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICByZXNbaV0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYoc2Vjb25kX2F4aXNfc2VyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgc2VyaWVzIHRvZ2dsZSBieSBkaXNhYmxpbmcgbGVnZW5kIGNsaWNrc1xuICAgICAgICBjaGFydC5sZWdlbmQudXBkYXRlU3RhdGUoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShyZXMpO1xuICAgICAgZmlyc3RfdGltZV9sb2FkZWQgPSBmYWxzZTtcblxuICAgICAgaWYoZGF0YS5zb3VyY2VfYWdncmVnYXRpb24pXG4gICAgICAgICQoXCIjZGF0YS1hZ2dyLWRyb3Bkb3duID4gYnV0dG9uID4gc3BhbjpmaXJzdFwiKS5odG1sKGRhdGEuc291cmNlX2FnZ3JlZ2F0aW9uKTtcbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuICAgICAgaWYgKHhoci5zdGF0dXNUZXh0ID09J2Fib3J0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSByZXRyaWV2aW5nIHRoZSB0aW1lc2VyaWVzIGRhdGEgW1wiICsgc3RhdHVzICsgXCJdOiBcIiArIGVycm9yKTtcbiAgICAgIGNoYXJ0Lm5vRGF0YShlcnJvcik7XG4gICAgICB1cGRhdGVfY2hhcnRfZGF0YShbXSk7XG4gICAgfSkuYWx3YXlzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgeGhyKSB7XG4gICAgICBjaGVja1F1ZXJ5Q29tcGxldGVkKCk7XG4gICAgICBwZW5kaW5nX2NoYXJ0X3JlcXVlc3QgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgaWYoZmlyc3RfbG9hZCkge1xuICAgICAgZmlyc3RfbG9hZCA9IGZhbHNlO1xuXG4gICAgICAvKiBXYWl0IGZvciBwYWdlIGxvYWQgYmVjYXVzZSBkYXRhdGFibGUgaXMgbm90IGluc3RhbnRpYXRlZCB5ZXQgcmlnaHQgbm93ICovXG4gICAgICAkKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmxvd3NfZHQgPSAkKFwiI2NoYXJ0MS1mbG93c1wiKS5kYXRhKFwiZGF0YXRhYmxlXCIpO1xuICAgICAgICBpZihmbG93c19kdClcbiAgICAgICAgICBwZW5kaW5nX3RhYmxlX3JlcXVlc3QgPSBmbG93c19kdC5wZW5kaW5nUmVxdWVzdDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZmxvd3NfZHQgPSAkKFwiI2NoYXJ0MS1mbG93c1wiKTtcblxuICAgICAgLyogUmVsb2FkIGRhdGF0YWJsZSAqL1xuICAgICAgaWYodHNfdGFibGVfc2hvd24pIHtcbiAgICAgICAgLyogbm90ZTogZmxvd3NfZHQuZGF0YShcImRhdGF0YWJsZVwiKSB3aWxsIGNoYW5nZSBhZnRlciB0aGlzIGNhbGwgKi9cbiAgICAgICAgdXBkYXRlR3JhcGhzVGFibGVWaWV3KG51bGwsIHBhcmFtcyk7XG5cbiAgICAgICAgaWYoJChcIiNjaGFydDEtZmxvd3NcIikuY3NzKFwiZGlzcGxheVwiKSAhPT0gXCJub25lXCIpXG4gICAgICAgICAgcGVuZGluZ190YWJsZV9yZXF1ZXN0ID0gZmxvd3NfZHQuZGF0YShcImRhdGF0YWJsZVwiKS5wZW5kaW5nUmVxdWVzdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0eXBlb2Ygb25fbG9hZF9jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgb25fbG9hZF9jYWxsYmFjayhjaGFydCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG52YXIgZ3JhcGhfb2xkX3ZpZXcgPSBudWxsO1xudmFyIGdyYXBoX29sZF9oYXNfbmluZGV4ID0gbnVsbDtcbnZhciBncmFwaF9vbGRfbmluZGV4X3F1ZXJ5ID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIHRzUXVlcnlUb1RhZ3ModHNfcXVlcnkpIHtcbiAgcmV0dXJuIHRzX3F1ZXJ5LnNwbGl0KFwiLFwiKS5cbiAgICByZWR1Y2UoZnVuY3Rpb24ocGFyYW1zLCB2YWx1ZSkge1xuICAgICAgdmFyIHBvcyA9IHZhbHVlLmluZGV4T2YoXCI6XCIpO1xuXG4gICAgICBpZihwb3MgIT0gLTEpIHtcbiAgICAgICAgdmFyIGsgPSB2YWx1ZS5zbGljZSgwLCBwb3MpO1xuICAgICAgICB2YXIgdiA9IHZhbHVlLnNsaWNlKHBvcysxKTtcbiAgICAgICAgcGFyYW1zW2tdID0gdjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgfSwge30pO1xufVxuXG4vKiBIaWRlIG9yIHNob3cgdGhlIHRpbWVzZXJpZXMgdGFibGUgaXRlbXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgdGltZSByYW5nZSAqL1xuZnVuY3Rpb24gcmVjaGVja0dyYXBoVGFibGVFbnRyaWVzKCkge1xuICB2YXIgdGRpZmYgPSAoZ3JhcGhfcGFyYW1zLmVwb2NoX2VuZCAtIGdyYXBoX3BhcmFtcy5lcG9jaF9iZWdpbik7XG4gIHZhciByZXNldF9zZWxlY3Rpb24gPSBmYWxzZTtcbiAgJChcIiNjaGFydDEtZmxvd3NcIikuc2hvdygpO1xuICAkKFwiI2dyYXBocy10YWJsZS1zZWxlY3RvclwiKS5zaG93KCk7XG5cbiAgZm9yKGxldCB2aWV3X2lkIGluIGdyYXBoX3RhYmxlX3ZpZXdzKSB7XG4gICAgdmFyIHZpZXcgPSBncmFwaF90YWJsZV92aWV3c1t2aWV3X2lkXTtcbiAgICB2YXIgZWxlbSA9ICQoXCIjXCIgKyB2aWV3Lmh0bWxfaWQpO1xuXG4gICAgaWYodGRpZmYgPD0gdmlldy5taW5fc3RlcCkge1xuICAgICAgaWYoZ3JhcGhfb2xkX3ZpZXcuaWQgPT09IHZpZXdfaWQpXG4gICAgICAgIHJlc2V0X3NlbGVjdGlvbiA9IHRydWU7XG5cbiAgICAgIGVsZW0uaGlkZSgpO1xuICAgIH0gZWxzZVxuICAgICAgZWxlbS5zaG93KCk7XG4gIH1cblxuICAvKiBIaWRlL3Nob3cgdGhlIGhlYWRlcnMgKi9cbiAgdmFyIGl0ZW1zX3VsID0gJChcIiNncmFwaHMtdGFibGUtYWN0aXZlLXZpZXdcIikuY2xvc2VzdChcIi5idG4tZ3JvdXBcIikuZmluZChcInVsOmZpcnN0XCIpO1xuXG4gIGl0ZW1zX3VsLmZpbmQoXCJsaS5kcm9wZG93bi1oZWFkZXJcIikuZWFjaChmdW5jdGlvbihpZHgsZSkge1xuICAgIHZhciBuZXh0X2l0ZW0gPSAkKGUpLm5leHRBbGwoXCJsaVwiKS5maWx0ZXIoZnVuY3Rpb24oaWR4LGUpIHtcbiAgICAgIHJldHVybigoJChlKS5jc3MoXCJkaXNwbGF5XCIpICE9PSBcIm5vbmVcIikgfHwgKCEkKGUpLmF0dHIoXCJkYXRhLXZpZXctaWRcIikpKTtcbiAgICB9KS5maXJzdCgpO1xuICAgIHZhciBkaXZpZGVyID0gJChlKS5uZXh0QWxsKFwiLmRpdmlkZXJcIikuZmlyc3QoKTtcblxuICAgIGlmKCFuZXh0X2l0ZW0uYXR0cihcImRhdGEtdmlldy1pZFwiKSkge1xuICAgICAgJChlKS5oaWRlKCk7XG4gICAgICBkaXZpZGVyLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChlKS5zaG93KCk7XG4gICAgICBkaXZpZGVyLnNob3coKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmKHJlc2V0X3NlbGVjdGlvbikge1xuICAgIC8qIFNlbGVjdCB0aGUgZmlyc3QgYXZhaWxhYmxlIHZpZXcgKi9cbiAgICB2YXIgZmlyc3RfdmlldyA9IGl0ZW1zX3VsLmZpbmQoXCJsaVtkYXRhLXZpZXctaWRdXCIpLmZpbHRlcihmdW5jdGlvbihpZHgsZSkge1xuICAgICAgICByZXR1cm4oJChlKS5jc3MoXCJkaXNwbGF5XCIpICE9PSBcIm5vbmVcIik7XG4gICAgICB9KS5maXJzdCgpO1xuXG4gICAgaWYoZmlyc3Rfdmlldy5sZW5ndGgpXG4gICAgICBzZXRBY3RpdmVHcmFwaHNUYWJsZVZpZXcoZmlyc3Rfdmlldy5hdHRyKFwiZGF0YS12aWV3LWlkXCIpKTtcbiAgICBlbHNlIHtcbiAgICAgICQoXCIjY2hhcnQxLWZsb3dzXCIpLmhpZGUoKTtcbiAgICAgICQoXCIjZ3JhcGhzLXRhYmxlLXNlbGVjdG9yXCIpLmhpZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUdyYXBoc1RhYmxlVmlldyh2aWV3LCBncmFwaF9wYXJhbXMsIGhhc19uaW5kZXgsIG5pbmRleF9xdWVyeSwgcGVyX3BhZ2UpIHtcbiAgaWYodmlldylcbiAgICBncmFwaF9vbGRfdmlldyA9IHZpZXc7XG5cbiAgaWYoIXJlY2hlY2tHcmFwaFRhYmxlRW50cmllcyhncmFwaF9wYXJhbXMpKSB7XG4gICAgLyogaGFuZGxlZCBieSBzZXRBY3RpdmVHcmFwaHNUYWJsZVZpZXcgKi9cbiAgICByZXR1cm47XG4gIH1cblxuICBpZih2aWV3KSB7XG4gICAgZ3JhcGhfb2xkX2hhc19uaW5kZXggPSBoYXNfbmluZGV4O1xuICAgIGdyYXBoX29sZF9uaW5kZXhfcXVlcnkgPSBuaW5kZXhfcXVlcnk7XG4gIH0gZWxzZSB7XG4gICAgdmlldyA9IGdyYXBoX29sZF92aWV3O1xuICAgIGhhc19uaW5kZXggPSBncmFwaF9vbGRfaGFzX25pbmRleDtcbiAgICBuaW5kZXhfcXVlcnkgPSBncmFwaF9vbGRfbmluZGV4X3F1ZXJ5O1xuICB9XG5cbiAgdmFyIGdyYXBoX3RhYmxlID0gJChcIiNjaGFydDEtZmxvd3NcIik7XG4gIG5pbmRleF9xdWVyeSA9IG5pbmRleF9xdWVyeSArIFwiJmJlZ2luX3RpbWVfY2xhdXNlPVwiICsgZ3JhcGhfcGFyYW1zLmVwb2NoX2JlZ2luICsgXCImZW5kX3RpbWVfY2xhdXNlPVwiICsgZ3JhcGhfcGFyYW1zLmVwb2NoX2VuZDtcbiAgdmFyIG5pbmRleF9idXR0b25zID0gXCJcIjtcbiAgdmFyIHBhcmFtc19vYmogPSB0c1F1ZXJ5VG9UYWdzKGdyYXBoX3BhcmFtcy50c19xdWVyeSk7XG5cbiAgLy8gVE9ETyBsb2NhbGl6ZVxuXG4gIC8qIEhpZGUgSVAgdmVyc2lvbiBzZWxlY3RvciB3aGVuIGEgaG9zdCBpcyBzZWxlY3RlZCAqL1xuICBpZighcGFyYW1zX29iai5ob3N0KSB7XG4gICAgbmluZGV4X2J1dHRvbnMgKz0gJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIj4nO1xuICAgIG5pbmRleF9idXR0b25zICs9IFwiSVAgVmVyc2lvblwiO1xuICAgIG5pbmRleF9idXR0b25zICs9ICc8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPjwvYnV0dG9uPjx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiByb2xlPVwibWVudVwiPic7XG4gICAgbmluZGV4X2J1dHRvbnMgKz0gJzxsaT48YSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI1wiIG9uY2xpY2s9XCJyZXR1cm4gb25HcmFwaE1lbnVDbGljayhudWxsLCA0KVwiPjQ8L2E+PC9saT4nO1xuICAgIG5pbmRleF9idXR0b25zICs9ICc8bGk+PGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIiBvbmNsaWNrPVwicmV0dXJuIG9uR3JhcGhNZW51Q2xpY2sobnVsbCwgNilcIj42PC9hPjwvbGk+JztcbiAgICBuaW5kZXhfYnV0dG9ucyArPSAnPC9zcGFuPjwvZGl2Pic7XG4gIH1cbiAgXG4gIGlmKHZpZXcuY29sdW1ucykge1xuICAgIHZhciB1cmwgPSBodHRwX3ByZWZpeCArICh2aWV3Lm5pbmRleF92aWV3ID8gXCIvbHVhL3Byby9nZXRfbmluZGV4X2Zsb3dzLmx1YVwiIDogXCIvbHVhL3Byby9nZXRfdHNfdGFibGUubHVhXCIpO1xuXG4gICAgdmFyIGNvbHVtbnMgPSB2aWV3LmNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGNvbFsxXSxcbiAgICAgICAgZmllbGQ6IGNvbFswXSxcbiAgICAgICAgICBjc3M6IHtcblx0ICAgICAgdGV4dEFsaWduOiBjb2xbMl0sIHdpZHRoOiBjb2xbM10sLy9cblx0ICB9LFxuICAgICAgICBoaWRkZW46IGNvbFs0XSA/IHRydWUgOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgdGl0bGU6IGkxOG5fZXh0LmFjdGlvbnMsXG4gICAgICBmaWVsZDogXCJkcmlsbGRvd25cIixcbiAgICAgIGNzczoge3dpZHRoOiBcIjElXCIsIFwidGV4dC1hbGlnblwiOiBcImNlbnRlclwifSxcbiAgICB9KTtcblxuICAgIHZhciBvbGRfZHQgPSBncmFwaF90YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpO1xuICAgIGlmKG9sZF9kdCAmJiBvbGRfZHQucGVuZGluZ1JlcXVlc3QpXG4gICAgICBvbGRfZHQucGVuZGluZ1JlcXVlc3QuYWJvcnQoKTtcblxuICAgIC8qIEZvcmNlIHJlaW5zdGFudGlhdGlvbiAqL1xuICAgIGdyYXBoX3RhYmxlLnJlbW92ZURhdGEoJ2RhdGF0YWJsZScpO1xuICAgIGdyYXBoX3RhYmxlLmh0bWwoXCJcIik7XG5cbiAgICBncmFwaF90YWJsZS5kYXRhdGFibGUoe1xuICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIHBlclBhZ2U6IHBlcl9wYWdlLFxuICAgICAgbm9SZXN1bHRzTWVzc2FnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKHRzX2NoYXJ0LnF1ZXJ5V2FzQWJvcnRlZCgpKVxuICAgICAgICAgIHJldHVybiBpMThuX2V4dC5xdWVyeV93YXNfYWJvcnRlZDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiBpMThuX2V4dC5ub19yZXN1bHRzX2ZvdW5kO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW1zID0gJC5leHRlbmQoe30sIGdyYXBoX3BhcmFtcyk7XG4gICAgICAgIGRlbGV0ZSBwYXJhbXMudHNfY29tcGFyZTtcbiAgICAgICAgZGVsZXRlIHBhcmFtcy5pbml0aWFsX3BvaW50O1xuICAgICAgICBwYXJhbXMubGltaXQgPSAxOyAvLyBUT0RPIG1ha2Ugc3BlY2lmaWMgcXVlcnlcbiAgICAgICAgLy8gVE9ETyBjaGFuZ2UgdG9wa1xuICAgICAgICAvLyBUT0RPIGRpc2FibGUgc3RhdGlzdGljc1xuICAgICAgICBwYXJhbXMuZGV0YWlsX3ZpZXcgPSB2aWV3LmlkO1xuXG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICB9LFxuICAgICAgbG9hZGluZ1lPZmZzZXQ6IDQwLFxuICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgIGJ1dHRvbnM6IHZpZXcubmluZGV4X3ZpZXcgPyBbbmluZGV4X2J1dHRvbnMsIF0gOiBbXSxcbiAgICAgIHRhYmxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMucmVzdWx0c2V0O1xuICAgICAgICB0c19jaGFydC50YWJsZVJlcXVlc3RDb21wbGV0ZWQoKTtcblxuICAgICAgICBpZighZGF0YSkge1xuICAgICAgICAgIC8vIGVycm9yXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogVGhlIHVzZXIgY2hhbmdlZCBwYWdlICovXG4gICAgICAgIGlmKGRhdGEuY3VycmVudFBhZ2UgPiAxKVxuICAgICAgICAgIGdyYXBoX3RhYmxlLmRhdGEoXCJoYXNfaW50ZXJhY3Rpb25cIiwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHN0YXRzX2RpdiA9ICQoXCIjY2hhcnQxLWZsb3dzLXN0YXRzXCIpO1xuICAgICAgICB2YXIgaGFzX2RyaWxsZG93biA9IChkYXRhICYmIGRhdGEuZGF0YS5zb21lKGZ1bmN0aW9uKHJvdykgeyByZXR1cm4gcm93LmRyaWxsZG93bjsgfSkpO1xuXG4gICAgICAgIC8qIFJlbW92ZSB0aGUgZHJpbGxkb3duIGNvbHVtbiBpZiBubyBkcmlsbGRvd24gaXMgYXZhaWxhYmxlICovXG4gICAgICAgIGlmKCFoYXNfZHJpbGxkb3duKVxuICAgICAgICAgICQoXCJ0YWJsZSB0ZDpsYXN0LWNoaWxkLCB0aDpsYXN0LWNoaWxkXCIsIGdyYXBoX3RhYmxlKS5yZW1vdmUoKTtcblxuICAgICAgICBpZihkYXRhICYmIGRhdGEudG90YWxSb3dzID4gMCAmJiBkYXRhLnN0YXRzICYmIGRhdGEuc3RhdHMucXVlcnlfZHVyYXRpb25fbXNlYykge1xuICAgICAgICAgICBsZXQgdGltZV9lbGFwc2VkID0gZGF0YS5zdGF0cy5xdWVyeV9kdXJhdGlvbl9tc2VjLzEwMDAuMDtcbiAgICAgICAgICAgaWYodGltZV9lbGFwc2VkIDwgMC4xKVxuICAgICAgICAgICAgdGltZV9lbGFwc2VkID0gXCI8IDAuMVwiXG4gICAgICAgICAgICQoXCIjZmxvd3MtcXVlcnktdGltZVwiKS5odG1sKHRpbWVfZWxhcHNlZCk7XG4gICAgICAgICAgICQoXCIjZmxvd3MtcHJvY2Vzc2VkLXJlY29yZHNcIikuaHRtbChkYXRhLnN0YXRzLm51bV9yZWNvcmRzX3Byb2Nlc3NlZCk7XG4gICAgICAgICAgIHN0YXRzX2Rpdi5zaG93KCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHN0YXRzX2Rpdi5oaWRlKCk7XG4gICAgICB9LCByb3dDYWxsYmFjazogZnVuY3Rpb24ocm93LCByb3dfZGF0YSkge1xuICAgICAgICBpZigodHlwZW9mIHJvd19kYXRhLnRhZ3MgPT09IFwib2JqZWN0XCIpICYmIChcbiAgICAgICAgICAocGFyYW1zX29iai5jYXRlZ29yeSAmJiAocm93X2RhdGEudGFncy5jYXRlZ29yeSA9PT0gcGFyYW1zX29iai5jYXRlZ29yeSkpIHx8XG4gICAgICAgICAgKHBhcmFtc19vYmoucHJvdG9jb2wgJiYgKHJvd19kYXRhLnRhZ3MucHJvdG9jb2wgPT09IHBhcmFtc19vYmoucHJvdG9jb2wpKVxuICAgICAgICApKSB7XG4gICAgICAgICAgLyogSGlnaGxpZ2h0IHRoZSByb3cgKi9cbiAgICAgICAgICByb3cuYWRkQ2xhc3MoXCJpbmZvXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvdztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiLyogVXNlIHdpdGg6XG4gICpcbiAgKiAkKCcjZWRpdC1yZWNpcGllbnQtbW9kYWwgZm9ybScpLm1vZGFsSGFuZGxlcih7IC4uLiB9KVxuICAqL1xuY2xhc3MgTW9kYWxIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGZvcm0sIG9wdGlvbnMpIHtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY3NyZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpNaXNzaW5nIENTUkYgdG9rZW4hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZm9ybTtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSAkKGZvcm0pLmNsb3Nlc3QoXCIubW9kYWxcIik7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jc3JmID0gb3B0aW9ucy5jc3JmO1xuICAgICAgICB0aGlzLmRvbnREaXNhYmxlU3VibWl0ID0gb3B0aW9ucy5kb250RGlzYWJsZVN1Ym1pdDtcblxuICAgICAgICB0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGxpc3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmluZEZvcm1WYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICB0aGlzLmluaXREYXRhUGF0dGVybnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudFswXSwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J11gKTtcbiAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbi5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpUaGUgc3VibWl0IGJ1dHRvbiB3YXMgbm90IGZvdW5kIGluc2lkZSB0aGUgZm9ybSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG5cbiAgICB9XG5cbiAgICBpbml0RGF0YVBhdHRlcm5zKCkge1xuICAgICAgICBOdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZvcm0ncyBzbmFwc2hvdCB0byBzYXZlIGEgZm9ybSBzdGF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZUZvcm1TbmFwc2hvdCgpIHtcblxuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHtcbiAgICAgICAgICAgIGlucHV0czoge30sXG4gICAgICAgICAgICBoaWRkZW46IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ3RleHRhcmVhLHNlbGVjdCxpbnB1dFt0eXBlIT1cInJhZGlvXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAkKHRoaXMpLnByb3AoJ25vZGVOYW1lJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAkKHRoaXMpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgIHNuYXBzaG90LmlucHV0c1tgJHt0eXBlfVtuYW1lPScke25hbWV9J11gXSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKGBbc3R5bGU9J2Rpc3BsYXk6IG5vbmU7J10sIHNwYW4uaW52YWxpZC1mZWVkYmFja2ApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc25hcHNob3QuaGlkZGVuLnB1c2goJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICB9XG5cbiAgICBjb21wYXJlRm9ybVNuYXBoc290KHMxLCBzMikge1xuXG4gICAgICAgIGlmIChzMSA9PSBudWxsIHx8IHMyID09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzMS5pbnB1dHMpKSB7XG4gICAgICAgICAgICBpZiAoczIuaW5wdXRzW2tleV0gIT0gdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGRlbGVnYXRlTW9kYWxDbG9zaW5nKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5jYW5jZWwnKS5vZmYoJ2NsaWNrJykuY2xpY2soZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudClbMF0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5vZmYoJ2hpZGUuYnMubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlIGZvcm0gc3RhdGUgaGFzbid0IGNoYW5nZWQgdGhlbiBkb24ndCBzaG93IHRoZSBtZXNzYWdlXG4gICAgICAgICAgICBpZiAoc2VsZi5jb21wYXJlRm9ybVNuYXBoc290KHNlbGYuY3VycmVudFN0YXRlLCBzZWxmLmluaXRpYWxTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0KSByZXR1cm47XG4gICAgICAgICAgICAvLyBhYm9ydCB0aGUgbW9kYWwgY2xvc2luZyBldmVudFxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gZmxhZyBhIGNsb3NlIGF0dGVtcHQgaGFzIGJlZW4gaW52b2tlZFxuICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNob3cgYW4gYWxlcnQgdG8gaW5mb3JtIHRoZSB1c2VyXG4gICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCdidXR0b24uYnRuLWNsb3NlJykuZmFkZU91dCgxMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCcuY29uZmlybS1jbG9zaW5nJykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLm9mZignaGlkZGVuLmJzLm1vZGFsJykub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAvLyBmb3IgZWFjaCBpbnB1dCBpbnNpZGUgdGhlIGZvcm0gcmVzdG9yZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgc25hcHNob3QgdGFrZW4gYXQgaW5pdFxuICAgICAgICAgICAgZm9yIChjb25zdCBbc2VsZWN0b3IsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZWxmLmluaXRpYWxTdGF0ZS5pbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZChzZWxlY3RvcikudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKHNlbGVjdG9yKS5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBzaHdvbiBlbGVtZW50c1xuICAgICAgICAgICAgc2VsZi5pbml0aWFsU3RhdGUuaGlkZGVuLmZvckVhY2goKCRoaWRkZW4pID0+IHtcbiAgICAgICAgICAgICAgICAkaGlkZGVuLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZWxmLmVsZW1lbnQuZmluZChgW3R5cGU9J3N1Ym1pdCddYCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBjbGVhbiB0aGUgZm9ybSB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWRcbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGZpZWxkcyBmbGlja2VyaW5nXG4gICAgICAgICAgICBzZWxmLmNsZWFuRm9ybSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmaWxsRm9ybU1vZGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxvYWRGb3JtRGF0YSgpO1xuICAgIH1cblxuICAgIGludm9rZU1vZGFsSW5pdChkYXRhID0ge30pIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyByZXNldCBmb3JtIHZhbHVlcyB3aGVuIHRoZSBtb2RhbCBjbG9zZXNcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZU1vZGFsQ2xvc2luZygpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHRoaXMuZmlsbEZvcm1Nb2RhbCgpO1xuICAgICAgICB0aGlzLm9wdGlvbnMub25Nb2RhbEluaXQodGhpcy5kYXRhLCB0aGlzKTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkucGFyZW50cygnLm1vZGFsJykub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMub25Nb2RhbFNob3coKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGEgaW5pdGlhbCBmb3JtIHNuYXBzaG90IHRvIHJlc3RvcmUgZWxlbWVudHMgb24gY2xvc2luZ1xuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IHRoaXMuY3JlYXRlRm9ybVNuYXBzaG90KCk7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmRlbGVnYXRlUmVzZXRCdXR0b24oKTsgICBcbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVN1Ym1pdCgpIHtcblxuICAgICAgICB0aGlzLmJpbmRGb3JtVmFsaWRhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuc3VibWl0SGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYub3B0aW9ucy5pc1N5bmNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignc3VibWl0JywgdGhpcy5zdWJtaXRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBiaW5kRm9ybVZhbGlkYXRpb24oKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gaGFuZGxlIGlucHV0IHZhbGlkYXRpb25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoYGlucHV0LHNlbGVjdCx0ZXh0YXJlYWApLmVhY2goYXN5bmMgZnVuY3Rpb24gKGksIGlucHV0KSB7XG5cbiAgICAgICAgICAgIC8vIGpRdWVyeSBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgaW5wdXRcbiAgICAgICAgICAgIGNvbnN0ICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAvLyBpZCB0byBoYW5kbGUgdGhlIGN1cnJlbnQgdGltZW91dCBzZXQgdG8gc2hvdyBlcnJvcnNcbiAgICAgICAgICAgIGxldCB0aW1lb3V0SWQgPSAtMTtcblxuICAgICAgICAgICAgY29uc3QgdmFsaWRIb3N0bmFtZSA9IGFzeW5jICgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgdGhlIHNwaW5uZXIgdG8gdGhlIHVzZXIgYW5kIHNldCB0aGUgaW5wdXQgdG8gcmVhZG9ubHlcbiAgICAgICAgICAgICAgICBjb25zdCAkc3Bpbm5lciA9ICRpbnB1dC5wYXJlbnQoKS5maW5kKCcuc3Bpbm5lci1ib3JkZXInKTtcbiAgICAgICAgICAgICAgICAkaW5wdXQuYXR0cihcInJlYWRvbmx5XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTnRvcFV0aWxzLnJlc29sdmVETlMoJChpbnB1dCkudmFsKCkpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgc3Bpbm5lciBhbmQgcmVuYWJsZSB3cml0ZSB0byB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAkaW5wdXQucmVtb3ZlQXR0cihcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSByZXNwb25zZSB3YXMgbmVnYXRpdmUgdGhlbiBhbGVydCB0aGUgdXNlclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkocmVzcG9uc2UucmNfc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgcmVzcG9uc2UucmNfc3RyX2hyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gc3VjY2VzcyBmb3IgdmFsaWQgcmVzb2x2ZWQgaG9zdG5tYWVcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2YWxpZElucHV0ID0gYXN5bmMgKHZhbGlkYXRpb24pID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBpbnB1dCByZXF1aXJlIHRvIHZhbGlkYXRlIGhvc3QgbmFtZSB0aGVuIHBlcmZvcm0gYSBETlMgcmVzb2x2ZVxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uLmRhdGEucmVzb2x2ZUROUyAmJiAkaW5wdXQudmFsKCkubWF0Y2goTnRvcFV0aWxzLlJFR0VYRVMuZG9tYWluTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHZhbGlkSG9zdG5hbWUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbi5kYXRhLmNhbm5vdEJlRW1wdHkgJiYgdmFsaWRhdGlvbi5pc0lucHV0RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBpbnB1dCB2YWxpZGF0aW9uIGZsYWdcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJQbGVhc2UgZmlsbCB0aGUgaW5wdXQuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEudmFsaWRhdGlvbkVtcHR5TWVzc2FnZSB8fCBpMThuX2V4dC5taXNzaW5nX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucGF0dGVybk1pc21hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUGF0dGVybiBtaXNtYXRjaC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS52YWxpZGF0aW9uTWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlZhbHVlIGV4Y2VlZCB0aGUgbWF4aW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZU92ZXJmbG93TWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJWYWx1ZSBpcyB1bmRlciB0aGUgbWluaW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZVVuZGVyZmxvd01lc3NhZ2UgfHwgaTE4bl9leHQuaW52YWxpZF9maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHZhbGlkYXRpb24gdG8gdHJ1ZVxuICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGVja1ZhbGlkYXRpb24gPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25NZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRW1wdHlNZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvbkVtcHR5TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90QmVFbXB0eTogKCRpbnB1dC5hdHRyKCdyZXF1aXJlZCcpID09PSBcInJlcXVpcmVkXCIpIHx8ICgkaW5wdXQuZGF0YShcInZhbGlkYXRpb25Ob3RFbXB0eVwiKSA9PSB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVETlM6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmVzb2x2ZWRucycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VPdmVyZmxvd01lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmFuZ2VPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlVW5kZXJmbG93TWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25VbmRlcmZsb3dPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaXNJbnB1dEVtcHR5OiAodHlwZW9mKCRpbnB1dC52YWwoKSkgPT09IFwic3RyaW5nXCIgPyAkaW5wdXQudmFsKCkudHJpbSgpID09IFwiXCIgOiBmYWxzZSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgW2lzVmFsaWQsIG1lc3NhZ2VUb1Nob3ddID0gYXdhaXQgdmFsaWRJbnB1dCh2YWxpZGF0aW9uKTtcbiAgICAgICAgICAgICAgICBsZXQgJGVycm9yID0gJGlucHV0LnBhcmVudCgpLmZpbmQoYC5pbnZhbGlkLWZlZWRiYWNrYCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZXJyb3IgZWxlbWVudCBkb2Vzbid0IGV4aXN0IHRoZW4gY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIGlmICgkZXJyb3IubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJChgPHNwYW4gY2xhc3M9J2ludmFsaWQtZmVlZGJhY2snPjwvc3Bhbj5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkaXNwbGF5IHRoZSBlcnJvcnMgYW5kIGNvbG9yIHRoZSBpbnB1dCBib3hcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LmFkZENsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5wYXJlbnQoKS5hcHBlbmQoJGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yLnRleHQobWVzc2FnZVRvU2hvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB0aGUgdmFsaWRhdGlvbiBtZXNzYWdlIGFuZCByZW1vdmUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IuZmFkZU91dCg1MDAsIGZ1bmN0aW9uICgpIHsgJCh0aGlzKS5yZW1vdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKHRoaXMpLm9mZignaW5wdXQnKS5vbignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBzZWxmLmNyZWF0ZUZvcm1TbmFwc2hvdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgZXhpc3RzIGFscmVhZHkgYSBUaW1lb3V0IHRoZW4gY2xlYXIgaXRcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dElkICE9IC0xKSBjbGVhclRpbWVvdXQodGltZW91dElkKTtcblxuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGlucHV0IHZhbGlkYXRpb24gYWZ0ZXIgMzAwbXNlY1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBmb3JtIHZhbGlkYXRpb24gdG8gZW5hYmxlIHRoZSBzdWJtaXQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBjaGFuZ2VkIHRoZSBpbnB1dCwgd2UgY2FuIGFib3J0IHRoZSBmaXJzdCBjbG9zZSBhdHRlbXB0XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh0aGlzKS5vZmYoJ2ludmFsaWQnKS5vbignaW52YWxpZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBnZXRNb2RhbElEKCkge1xuICAgICAgICByZXR1cm4gJCh0aGlzLmVsZW1lbnQpLnBhcmVudHMoJy5tb2RhbCcpLmF0dHIoJ2lkJyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlRm9ybVN1Ym1pc3Npb24oKSB7XG5cbiAgICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIGlmIGVhY2ggaW5wdXQgaXMgbWFya2VkIGFzIHZhbGlkIHRoZW4gZW5hYmxlIHRoZSBmb3JtIHN1Ym1pdCBidXR0b25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0Om5vdCg6ZGlzYWJsZWQpLHNlbGVjdDpub3QoOmRpc2FibGVkKSx0ZXh0YXJlYTpub3QoOmRpc2FibGVkKScpLmVhY2goZnVuY3Rpb24gKGlkeCwgaW5wdXQpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgYSBjb25jYXRlbmF0ZSAmIGJldHdlZW4gdmFsaWQgZmxhZ3NcbiAgICAgICAgICAgIGlzVmFsaWQgJj0gaW5wdXQudmFsaWRpdHkudmFsaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlzVmFsaWRcbiAgICAgICAgICAgID8gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXSxbdHlwZT0ndGVzdCddYCkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgICAgICA6ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J10sW3R5cGU9J3Rlc3QnXWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICAgIH1cblxuICAgIGNsZWFuRm9ybSgpIHtcbiAgICAgICAgLyogcmVtb3ZlIHZhbGlkYXRpb24gY2xhc3MgZnJvbSBmaWVsZHMgKi9cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0LHRleHRhcmVhLHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKGksIGlucHV0KSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGBpcy12YWxpZGApLnJlbW92ZUNsYXNzKGBpcy1pbnZhbGlkYCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgICAgICAkKHRoaXMuZWxlbWVudClbMF0ucmVzZXQoKTtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWVzdCgpIHtcblxuICAgICAgICBjb25zdCAkZmVlZGJhY2tMYWJlbCA9ICQodGhpcy5lbGVtZW50KS5maW5kKGAuaW52YWxpZC1mZWVkYmFja2ApO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddYCk7XG4gICAgICAgIGxldCBkYXRhVG9TZW5kID0gdGhpcy5vcHRpb25zLmJlZm9yZVN1bWJpdCh0aGlzLmRhdGEpO1xuXG4gICAgICAgIGRhdGFUb1NlbmQuY3NyZiA9IHRoaXMuY3NyZjtcbiAgICAgICAgZGF0YVRvU2VuZCA9ICQuZXh0ZW5kKGRhdGFUb1NlbmQsIHRoaXMub3B0aW9ucy5zdWJtaXRPcHRpb25zKTtcblxuICAgICAgICAvKiBjbGVhbiBwcmV2aW91cyBzdGF0ZSBhbmQgZGlzYWJsZSBidXR0b24gKi9cbiAgICAgICAgc3VibWl0QnV0dG9uLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0O1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1ldGhvZCA9PSBcInBvc3RcIikge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHRoaXMub3B0aW9ucy5lbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YVRvU2VuZCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogc2VsZi5vcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmdldCh0aGlzLm9wdGlvbnMuZW5kcG9pbnQsIGRhdGFUb1NlbmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHJlcXVlc3QuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLnJlc2V0QWZ0ZXJTdWJtaXQpIHNlbGYuY2xlYW5Gb3JtKCk7XG4gICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHNlbGYub3B0aW9ucy5vblN1Ym1pdFN1Y2Nlc3MocmVzcG9uc2UsIGRhdGFUb1NlbmQsIHNlbGYpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdWJtaXQgcmV0dXJuIGEgdHJ1ZSBib29sZWFuIHRoZW4gY2xvc2UgdGhlIG1vZGFsXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYuZGlhbG9nLm1vZGFsKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZy5tb2RhbCgnaGlkZScpXG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJChgLm1vZGFsLWJhY2tkcm9wLmZhZGUuc2hvd2ApLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyogdW5iaW5kIHRoZSBvbGQgY2xvc3VyZSBvbiBzdWJtaXQgZXZlbnQgYW5kIGJpbmQgYSBuZXcgb25lICovXG4gICAgICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9mZignc3VibWl0Jywgc2VsZi5zdWJtaXRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLmRlbGVnYXRlU3VibWl0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGpxeGhyLnJlc3BvbnNlSlNPTjtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmMgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaHRtbChyZXNwb25zZS5yY19zdHJfaHIpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMub25TdWJtaXRFcnJvcihyZXNwb25zZSwgZGF0YVRvU2VuZCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gbm8gZW5kcG9pbnRcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIChzZWxmLm9wdGlvbnMucmVzZXRBZnRlclN1Ym1pdCkgc2VsZi5jbGVhbkZvcm0oKTtcbiAgICAgICAgICAgICAgICAkZmVlZGJhY2tMYWJlbC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gc2VsZi5vcHRpb25zLm9uU3VibWl0U3VjY2Vzcyh7fSwgZGF0YVRvU2VuZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN1Ym1pdCByZXR1cm4gYSB0cnVlIGJvb2xlYW4gdGhlbiBjbG9zZSB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5kaWFsb2cubW9kYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nLm1vZGFsKCdoaWRlJylcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiB1bmJpbmQgdGhlIG9sZCBjbG9zdXJlIG9uIHN1Ym1pdCBldmVudCBhbmQgYmluZCBhIG5ldyBvbmUgKi9cbiAgICAgICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkub2ZmKCdzdWJtaXQnLCBzZWxmLnN1Ym1pdEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVTdWJtaXQoKTtcblxuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVJlc2V0QnV0dG9uKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0ncmVzZXQnXWApO1xuICAgICAgICBpZiAocmVzZXRCdXR0b24ubGVuZ3RoID09IDApIHJldHVybjtcblxuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gTnRvcFV0aWxzLnNlcmlhbGl6ZUZvcm1BcnJheSgkKHRoaXMuZWxlbWVudCkuc2VyaWFsaXplQXJyYXkoKSk7XG5cbiAgICAgICAgcmVzZXRCdXR0b24uY2xpY2soZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgcHJldmlvdXMgdmFsdWVzXG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkuZmluZCgnaW5wdXQ6dmlzaWJsZSxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9ICQoaW5wdXQpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAkKGlucHV0KS52YWwoZGVmYXVsdFZhbHVlc1trZXldKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLWludmFsaWQnKS5yZW1vdmVDbGFzcygnaXMtdmFsaWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IG1vZGFsSGFuZGxlciA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggIT0gMSkgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhIGZvcm0gZWxlbWVudCBjYW4gYnkgaW5pdGlhbGl6ZWQhXCIpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgY3NyZjogJycsXG4gICAgICAgIGVuZHBvaW50OiAnJyxcbiAgICAgICAgcmVzZXRBZnRlclN1Ym1pdDogdHJ1ZSxcbiAgICAgICAgLyogVHJ1ZSB0byBza2lwIHRoZSBhcmUteW91LXN1cmUgY2hlY2sgb24gdGhlIGRpYWxvZyAqL1xuICAgICAgICBkb250RGlzYWJsZVN1Ym1pdDogZmFsc2UsXG4gICAgICAgIC8qIFRydWUgaWYgdGhlIHJlcXVlc3QgaXNuJ3QgZG9uZSBieSBBSkFYIHJlcXVlc3QgKi9cbiAgICAgICAgaXNTeW5jUmVxdWVzdDogZmFsc2UsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCBkYXRhIGFzeW5jaHJvbnVzbHkgZnJvbSB0aGUgc2VydmVyIG9yXG4gICAgICAgICAqIGxvYWRzIGRhdGEgZGlyZWN0bHkgZnJvbSB0aGUgY3VycmVudCBwYWdlLlxuICAgICAgICAgKiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm5zIHRoZSBmZXRjaGVkIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIFJldHVybnMgdGhlIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nXG4gICAgICAgICAqIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uIHdoZW4gZmV0Y2hpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIGxvYWRGb3JtRGF0YTogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKGBlbmRwb2ludC90by9kYXRhYCk7XG4gICAgICAgICAqICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGRhdGEuanNvbigpO1xuICAgICAgICAgKiAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgbG9hZEZvcm1EYXRhOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9uTW9kYWxJbml0KCkgaXMgaW52b2tlZCB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBsb2FkIHRoZSBmZXRjaGVkIGRhdGEgZnJvbSBgbG9hZEZvcm1EYXRhKClgXG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybSBtb2RhbCBpbnB1dHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsb2FkZWREYXRhIFRoaXMgYXJndW1lbnQgY29udGFpbnMgdGhlIGZldGNoZWQgZGF0YSBvYnRhaW5lZFxuICAgICAgICAgKiBmcm9tIGBsb2FkRm9ybURhdGEoKWBcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGhvdyB0byB1c2VcbiAgICAgICAgICogdGhlIGZ1bmN0aW9uICh3ZSBzdXBwb3NlIHRoYXQgbG9hZEZvcm1EYXRhKCkgcmV0dXJucyB0aGUgZm9sbG93aW5nXG4gICAgICAgICAqIG9iamVjdDogYGxvYWRlZFVzZXIgPSB7Zmlyc3RuYW1lOiAnRm9vJywgbGFzdG5hbWU6ICdCYXInLCBpZDogMTQyODEwM31gKVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbEluaXQ6IGZ1bmN0aW9uKGxvYWRlZFVzZXIpIHtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjZmlyc3RuYW1lYCkudmFsKGxvYWRlZFVzZXIuZmlyc3RuYW1lKTtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjbGFzdG5hbWVgKS52YWwobG9hZGVkVXNlci5sYXN0bmFtZSk7XG4gICAgICAgICAqICAgICAgJChgI3VzZXJNb2RhbCBmb3JtIGlucHV0I2lkYCkudmFsKGxvYWRlZFVzZXIuaWQpO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25Nb2RhbEluaXQ6IGZ1bmN0aW9uIChsb2FkZWREYXRhKSB7IH0sXG5cbiAgICAgICAgb25Nb2RhbFNob3c6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZ1bmN0aW9uIGJlZm9yZVN1Ym1pdCgpIGlzIGludm9rZWQgYWZ0ZXIgdGhlIHVzZXJcbiAgICAgICAgICogc3VibWl0IHRoZSBmb3JtLiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm4gdGhlIGRhdGEgdG9cbiAgICAgICAgICogc2VuZCB0byB0aGUgZW5kcG9pbnQuIElmIHRoZSBjaG9zZW4gbWV0aG9kIGlzIGBwb3N0YFxuICAgICAgICAgKiBhIGNzcmYgd2lsbCBiZSBhZGQgdG8gdGhlIHJldHVybmVkIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgV2Ugc2hvdyBiZWxvdyBhIHNpbXBsZSBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogYmVmb3JlU3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgKiAgICAgICAgICBhY3Rpb246ICdlZGl0JyxcbiAgICAgICAgICogICAgICAgICAgSlNPTjogSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplQXJyYXlGb3JtKCQoYGZvcm1gKS5zZXJpYWxpemVBcnJheSgpKSlcbiAgICAgICAgICogICAgICB9O1xuICAgICAgICAgKiAgICAgIHJldHVybiBib2R5O1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgYmVmb3JlU3VtYml0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgd2hlbiB0aGUgcmVxdWVzdCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgICogdGVybWluYXRlcyBzdWNjZXNzZnVsbHkgKDIwMCkuIEJlZm9yZSB0aGUgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAqIGEgbmV3IGNzcmYgcmV0cml2ZWQgZnJvbSB0aGUgc2VydmVyIHdpbGwgYmUgc2V0IGZvclxuICAgICAgICAgKiBmdXR1cmUgY2FsbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgcmVzcG9uc2VcbiAgICAgICAgICogZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdFN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAqICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coYFRoZSB1c2VyIGluZm8gaGFzIGJlZW4gZWRpdCB3aXRoIHN1Y2Nlc3MhYCk7XG4gICAgICAgICAqICAgICAgfVxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25TdWJtaXRTdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHJlcXVlc3QgdG8gdGhlIGVuZHBvaW50XG4gICAgICAgICAqIHRlcm1pbmF0ZXMgd2l0aCBmYWlsdXJlICghPSAyMDApLiBCZWZvcmUgdGhlIGNhbGwgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgKiBhIG5ldyBjc3JmIHJldHJpdmVkIGZyb20gdGhlIHNlcnZlciB3aWxsIGJlIHNldCBmb3JcbiAgICAgICAgICogZnV0dXJlIGNhbGxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VudCBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgc2VudCBkYXRhIHRvIHRoZSBlbmRwb2ludFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFN0YXR1cyBJdCBjb250YWlucyB0aGUgZXJyb3IgdGV4dCBzdGF0dXMgb2J0YWluZWRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yVGhyb3duIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGluZm8gYWJvdXQgdGhlIGVycm9yXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbihzZW50LCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGBPcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nIWApO1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgICogICAgICB9XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbiAoc2VudCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2sgdGhlIHJlc2V0IGlucHV0XG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHREYXRhIEl0IGNvbnRhaW5zIHRoZSBmZXRjaGVkIGRhdGEgZnJvbVxuICAgICAgICAgKiBgbG9hZEZvcm1EYXRhKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbFJlc2V0OiBmdW5jdGlvbihkZWZhdWx0RGF0YSkge1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2lkYCkudmFsKGRlZmF1bHREYXRhLmlkKTtcbiAgICAgICAgICogICAgICAkKGBpbnB1dCNuYW1lYCkudmFsKGRlZmF1bHREYXRhLm5hbWUpO1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2FkZHJlc3NgKS52YWwoZGVmYXVsdERhdGEuYWRkcmVzcyk7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvbk1vZGFsUmVzZXQ6IGZ1bmN0aW9uIChkZWZhdWx0RGF0YSkgeyB9LFxuICAgIH0sIGFyZ3MpO1xuXG4gICAgY29uc3QgbWggPSBuZXcgTW9kYWxIYW5kbGVyKHRoaXMsIG9wdGlvbnMpO1xuICAgIG1oLmRlbGVnYXRlU3VibWl0KCk7XG5cbiAgICByZXR1cm4gbWg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGFsSGFuZGxlclxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmNvbnN0IHR5cGVzID0ge1xuICAgIG5vX2Zvcm1hdHRpbmc6IHtcblx0aWQ6IFwibm9fZm9ybWF0dGluZ1wiLFxuXHR1bTogbnVsbCxcblx0c3RlcDogbnVsbCxcblx0ZGVjaW1hbDogbnVsbCxcblx0c2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgbnVtYmVyOiB7XG5cdGlkOiBcIm51bWJlclwiLFxuXHR1bTogW1wiXCIsIFwiS1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogbnVsbCxcblx0c2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgYnl0ZXM6IHtcblx0aWQ6IFwiYnl0ZXNcIixcblx0dW06IFtcIkJcIiwgXCJLQlwiLCBcIk1CXCIsIFwiR0JcIiwgXCJUQlwiLCBcIlBCXCIsIFwiRUJcIl0sXG5cdHN0ZXA6IDEwMjQsXG5cdGRlY2ltYWw6IDIsXG5cdHNjYWxlX3ZhbHVlczogbnVsbCxcblx0YWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBicHM6IHtcblx0aWQ6IFwiYnBzXCIsXG5cdHVtOiBbXCJicHNcIiwgXCJLYnBzXCIsIFwiTWJwc1wiLCBcIkdicHNcIiwgXCJUYnBzXCIsIFwiUGJwc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiA4LFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgZnBzOiB7XG5cdGlkOiBcImZwc1wiLFxuXHR1bTogW1wiZmxvd3Mvc1wiLCBcIktmbG93cy9zXCIsIFwiTWZsb3dzL3NcIiwgXCJHZmxvd3Mvc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcHBzOiB7XG5cdGlkOiBcInBwc1wiLFxuXHR1bTogW1wicHBzXCIsIFwiS3Bwc1wiLCBcIk1wcHNcIiwgXCJHcHBzXCIsIFwiVHBwc1wiXSxcblx0c3RlcDogMTAwMCxcblx0ZGVjaW1hbDogMixcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgbXM6IHtcblx0aWQ6IFwibXNcIixcblx0dW06IFtcIm1zXCIsIFwiS21zXCIsIFwiTW1zXCIsIFwiR21zXCIsIFwiVG1zXCJdLFxuXHRzdGVwOiAxMDAwLFxuXHRkZWNpbWFsOiAyLFxuXHRzY2FsZV92YWx1ZXM6IG51bGwsXHRcblx0YWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBwZXJjZW50YWdlOiB7XG5cdGlkOiBcInBlcmNlbnRhZ2VcIixcblx0dW06IFtcIiVcIl0sXG5cdHN0ZXA6IDEwMSxcblx0ZGVjaW1hbDogMCxcblx0c2NhbGVfdmFsdWVzOiBudWxsLFx0XG5cdG1heF92YWx1ZTogMTAwLFxuXHRhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gZ2V0VW5pdE1lYXN1cmVMZW4odHlwZSkge1xuICAgIC8vIDAwMC4wMFxuICAgIGxldCB0ID0gdHlwZXNbdHlwZV07XG4gICAgbGV0IHNwYWNlVmFsdWUgPSAzO1xuICAgIGlmICh0LmRlY2ltYWwgIT0gbnVsbCAmJiB0LmRlY2ltYWwgPiAwKSB7XHRcblx0c3BhY2VWYWx1ZSA9IDY7XG4gICAgfVxuICAgIGxldCBzcGFjZVVtID0gMDtcbiAgICBpZiAodC51bSAhPSBudWxsKSB7XG5cdHNwYWNlVW0gPSBNYXRoLm1heCguLi50LnVtLm1hcCgodW0pID0+IHVtLmxlbmd0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gKHNwYWNlVmFsdWUgKyAxICsgc3BhY2VVbSk7XG59XG5cbmZ1bmN0aW9uIGdldFNjYWxlRmFjdG9ySW5kZXgodHlwZSwgdmFsdWUpIHtcbiAgIGxldCB0eXBlT3B0aW9ucyA9IHR5cGVzW3R5cGVdO1xuICAgIGlmICh0eXBlID09IHR5cGVzLm5vX2Zvcm1hdHRpbmcuaWQgfHwgdmFsdWUgPT0gbnVsbCkge1xuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcyAhPSBudWxsKSB7XG5cdHZhbHVlICo9IHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcztcbiAgICB9XG4gICAgbGV0IHN0ZXAgPSB0eXBlT3B0aW9ucy5zdGVwO1xuICAgIGxldCBuZWdhdGl2ZVZhbHVlID0gdmFsdWUgPCAwO1xuICAgIGlmIChuZWdhdGl2ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBtZWFzdXJlcyA9IHR5cGVPcHRpb25zLnVtO1xuICAgIHdoaWxlICh2YWx1ZSA+PSBzdGVwICYmIGkgPCBtZWFzdXJlcy5sZW5ndGgpIHtcblx0dmFsdWUgPSB2YWx1ZSAvIHN0ZXA7XG5cdGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlcih0eXBlLCBhYnNvbHV0ZVZhbHVlLCBzY2FsZUZhY3RvckluZGV4KSB7XG4gICAgbGV0IHR5cGVPcHRpb25zID0gdHlwZXNbdHlwZV07XG4gICAgbGV0IG1heExlblZhbHVlID0gNjsgLy8gMDAwLjAwXG4gICAgbGV0IG1heExlblVtID0gODsgLy8gTWZsb3dzL3NcbiAgICBhYnNvbHV0ZVZhbHVlIHw9IHR5cGVPcHRpb25zLmFic29sdXRlX3ZhbHVlOyBcbiAgICBsZXQgZm9ybWF0dGVyID0gZnVuY3Rpb24odmFsdWUpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0ICAgIHJldHVybiAnJztcblx0fVxuXHRpZiAodHlwZSA9PSB0eXBlcy5ub19mb3JtYXR0aW5nLmlkKSB7XG5cdCAgICByZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcyAhPSBudWxsKSB7XG5cdCAgICB2YWx1ZSAqPSB0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXM7XG5cdH1cblx0bGV0IG5lZ2F0aXZlVmFsdWUgPSB2YWx1ZSA8IDA7XG5cdGlmIChuZWdhdGl2ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG5cdFxuXHRsZXQgc3RlcCA9IHR5cGVPcHRpb25zLnN0ZXA7XG5cdGxldCBkZWNpbWFsID0gdHlwZU9wdGlvbnMuZGVjaW1hbDtcblx0bGV0IG1lYXN1cmVzID0gdHlwZU9wdGlvbnMudW07XG5cdGxldCBpID0gMDtcbiAgaWYgKHR5cGVPcHRpb25zLm1heF92YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gdHlwZU9wdGlvbnMubWF4X3ZhbHVlKSB7XG4gICAgdmFsdWUgPSB0eXBlT3B0aW9ucy5tYXhfdmFsdWVcbiAgfVxuXG5cdHdoaWxlICgodmFsdWUgPj0gc3RlcCAmJiBpIDwgbWVhc3VyZXMubGVuZ3RoICYmICFzY2FsZUZhY3RvckluZGV4KSB8fCAoc2NhbGVGYWN0b3JJbmRleCAhPSBudWxsICYmIGkgPCBzY2FsZUZhY3RvckluZGV4KSkge1xuICAgIHZhbHVlID0gdmFsdWUgLyBzdGVwO1xuICAgIGkgKz0gMTtcblx0fVxuXG5cdGlmIChkZWNpbWFsICE9IG51bGwgJiYgZGVjaW1hbCA+IDApIHtcdCAgICBcblx0ICAgIHZhbHVlID0gdmFsdWUgKiBNYXRoLnBvdygxMCwgZGVjaW1hbCk7XG5cdCAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuXHQgICAgdmFsdWUgPSB2YWx1ZSAvIE1hdGgucG93KDEwLCBkZWNpbWFsKTtcblx0ICAgIHZhbHVlID0gdmFsdWUudG9GaXhlZChkZWNpbWFsKTtcblx0fSBlbHNlIHtcblx0ICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG5cdH1cblx0XG5cdGlmIChuZWdhdGl2ZVZhbHVlICYmICFhYnNvbHV0ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG5cdGxldCB2YWxTdHJpbmcgPSBgJHt2YWx1ZX1gO1xuXHQvLyBpZiAodmFsU3RyaW5nLmxlbmd0aCA8IG1heExlblZhbHVlKSB7XG5cdC8vICAgICB2YWxTdHJpbmcgPSB2YWxTdHJpbmcucGFkRW5kKG1heExlblZhbHVlIC0gdmFsU3RyaW5nLmxlbmd0aCwgXCIgXCIpO1xuXHQvLyB9XG5cdGxldCBtU3RyaW5nID0gYCR7bWVhc3VyZXNbaV19YDtcblx0Ly8gaWYgKG1TdHJpbmcubGVuZ3RoIDwgbWF4TGVuVW0pIHtcblx0Ly8gICAgIG1TdHJpbmcgPSBtU3RyaW5nLnBhZFN0YXJ0KG1heExlblVtIC0gbVN0cmluZy5sZW5ndGgsIFwiX1wiKTtcblx0Ly8gfVxuXHRsZXQgdGV4dCA9IGAke3ZhbFN0cmluZ30gJHttU3RyaW5nfWA7XG5cdHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVyO1xufVxuXG5jb25zdCBmb3JtYXR0ZXJVdGlscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdHR5cGVzLFxuXHRnZXRVbml0TWVhc3VyZUxlbixcblx0Z2V0Rm9ybWF0dGVyLFxuXHRnZXRTY2FsZUZhY3RvckluZGV4LFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlclV0aWxzO1xuIiwiaW1wb3J0IE50b3BVdGlscyBmcm9tICcuL250b3AtdXRpbHMnXG53aW5kb3cuTnRvcFV0aWxzID0gTnRvcFV0aWxzXG5cbmltcG9ydCB7IGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cywgZGF0YXRhYmxlRm9yRWFjaFJvdywgZGF0YXRhYmxlSXNFbXB0eSwgZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3csIGRhdGF0YWJsZUFkZEVtcHR5Um93LCBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcywgZGF0YXRhYmxlR2V0QnlGb3JtLCBkYXRhdGFibGVVbmRvQWRkUm93LCBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlLCBkYXRhdGFibGVJc0xhc3RQYWdlLCBkYXRhdGFibGVHZXRDb2x1bW4sIGRhdGF0YWJsZUdldENvbHVtbkluZGV4IH0gZnJvbSAnLi9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscydcblxud2luZG93LmRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyA9IGRhdGF0YWJsZUluaXRSZWZyZXNoUm93c1xud2luZG93LmRhdGF0YWJsZUZvckVhY2hSb3cgPSBkYXRhdGFibGVGb3JFYWNoUm93XG53aW5kb3cuZGF0YXRhYmxlSXNFbXB0eSA9IGRhdGF0YWJsZUlzRW1wdHlcbndpbmRvdy5kYXRhdGFibGVSZW1vdmVFbXB0eVJvdyA9IGRhdGF0YWJsZVJlbW92ZUVtcHR5Um93XG53aW5kb3cuZGF0YXRhYmxlQWRkRW1wdHlSb3cgPSBkYXRhdGFibGVBZGRFbXB0eVJvd1xud2luZG93LmRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zID0gZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXNcbndpbmRvdy5kYXRhdGFibGVHZXRCeUZvcm0gPSBkYXRhdGFibGVHZXRCeUZvcm1cbndpbmRvdy5kYXRhdGFibGVVbmRvQWRkUm93ID0gZGF0YXRhYmxlVW5kb0FkZFJvd1xud2luZG93LmRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlID0gZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZVxud2luZG93LmRhdGF0YWJsZUlzTGFzdFBhZ2UgPSBkYXRhdGFibGVJc0xhc3RQYWdlXG53aW5kb3cuZGF0YXRhYmxlR2V0Q29sdW1uID0gZGF0YXRhYmxlR2V0Q29sdW1uXG53aW5kb3cuZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXggPSBkYXRhdGFibGVHZXRDb2x1bW5JbmRleFxuXG5pbXBvcnQgJy4vZWJwZi11dGlscydcbmltcG9ydCAnLi9ncmFwaC9ncmFwaC11dGlscydcbmltcG9ydCBtb2RhbEhhbmRsZXIgZnJvbSAnLi9tb2RhbC9tb2RhbC11dGlscydcblxud2luZG93LiQuZm4ubW9kYWxIYW5kbGVyID0gbW9kYWxIYW5kbGVyXG5cbmltcG9ydCAnLi9zZXF1ZW5jZV9zdW5idXJzdCdcbmltcG9ydCAqIGFzIGVicGZVdGlscyBmcm9tICcuL2VicGYtdXRpbHMnXG5cbndpbmRvdy5lYnBmVXRpbHMgPSBlYnBmVXRpbHNcblxuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuL2Zvcm1hdHRlci11dGlsc1wiO1xud2luZG93Lm50b3BGb3JtYXR0ZXJVdGlscyA9IGZvcm1hdHRlclV0aWxzO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVWYWxpZGF0b3IoaXRlbXNfZnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIGNtcF9uYW1lID0gZmllbGQudmFsKCk7XG4gICAgdmFyIGNvdW50ID0gMDtcblxuICAgIC8vIHRoaXMgd2lsbCBiZSBjaGVja2VkIHNlcGFyYXRlbHksIHdpdGggJ3JlcXVpcmVkJyBhcmd1bWVudFxuICAgIGlmKCEgY21wX25hbWUpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGl0ZW1zX2Z1bmN0aW9uKGZpZWxkKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5hbWUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgaWYgKG5hbWUgPT0gY21wX25hbWUpXG4gICAgICAgIGNvdW50ID0gY291bnQgKyAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvdW50ID09IDE7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lbWJlclZhbHVlVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBtZW1iZXIgPSBpbnB1dC52YWwoKTtcbiAgaWYgKG1lbWJlciA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5pc19tYWNfYWRkcmVzcyhtZW1iZXIpIHx8IE50b3BVdGlscy5pc19uZXR3b3JrX21hc2sobWVtYmVyLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IocGF0dGVybikge1xuICByZXR1cm4gZnVuY3Rpb24gcGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yKGlucHV0KSB7XG4gICAgLy8gcmVxdWlyZWQgaXMgY2hlY2tlZCBzZXBhcmF0ZWx5XG4gICAgaWYoIWlucHV0LnZhbCgpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gJChpbnB1dCkudmFsKCkubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIG90aGVyX2lucHV0ID0gJChpbnB1dCkuY2xvc2VzdChcImZvcm1cIikuZmluZChcIltkYXRhLXBhc3N3b3JkbWF0Y2hdXCIpLm5vdChpbnB1dCk7XG4gIGlmKCFpbnB1dC52YWwoKSB8fCAhb3RoZXJfaW5wdXQudmFsKCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gb3RoZXJfaW5wdXQudmFsKCkgPT09IGlucHV0LnZhbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9vbG5hbWVWYWxpZGF0b3IoaW5wdXQpIHtcbiAgLy8gcmVxdWlyZWQgaXMgY2hlY2tlZCBzZXBhcmF0ZWx5XG4gIGlmKCFpbnB1dC52YWwoKSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiAkKGlucHV0KS52YWwoKS5tYXRjaCgvXlthLXowLTlfXSokLyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXNzd29yZE1hdGNoUmVjaGVjayhmb3JtKSB7XG4gIHZhciBpdGVtcyA9ICQoZm9ybSkuZmluZChcIltkYXRhLXBhc3N3b3JkbWF0Y2hdXCIpO1xuICB2YXIgbm90X2VtcHR5ID0gMDtcblxuICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGlmKCQodGhpcykudmFsKCkgIT0gXCJcIikgbm90X2VtcHR5Kys7XG4gIH0pO1xuXG4gIGlmKG5vdF9lbXB0eSA9PSBpdGVtcy5sZW5ndGgpIGl0ZW1zLnRyaWdnZXIoJ2lucHV0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBob3N0T3JNYWNWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIGhvc3QgPSBpbnB1dC52YWwoKTtcblxuICAvKiBIYW5kbGVkIHNlcGFyYXRlbHkgKi9cbiAgaWYgKGhvc3QgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuaXNfbWFjX2FkZHJlc3MoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2NChob3N0KSB8fCBOdG9wVXRpbHMuaXNfZ29vZF9pcHY2KGhvc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXBBZGRyZXNzVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBob3N0ID0gaW5wdXQudmFsKCk7XG5cbiAgLyogSGFuZGxlZCBzZXBhcmF0ZWx5ICovXG4gIGlmIChob3N0ID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gTnRvcFV0aWxzLmlzX2dvb2RfaXB2NChob3N0KSB8fCBOdG9wVXRpbHMuaXNfZ29vZF9pcHY2KGhvc3QpO1xufVxuXG52YXIgZmlsdGVyc190b192YWxpZGF0ZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gYnBmVmFsaWRhdG9yKGZpbHRlcl9maWVsZCwgc3luYyA9IGZhbHNlKSB7XG4gIHZhciBmaWx0ZXIgPSBmaWx0ZXJfZmllbGQudmFsKCk7XG5cbiAgaWYgKGZpbHRlci50cmltKCkgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBrZXkgPSBmaWx0ZXJfZmllbGQuYXR0cihcIm5hbWVcIik7XG4gIHZhciB0aW1lb3V0ID0gMjUwO1xuXG4gIGlmICghZmlsdGVyc190b192YWxpZGF0ZVtrZXldKVxuICAgICBmaWx0ZXJzX3RvX3ZhbGlkYXRlW2tleV0gPSB7YWpheF9vYmo6bnVsbCwgdmFsaWQ6dHJ1ZSwgdGltZXI6bnVsbCwgc3VibWl0X3JlbWluZDpmYWxzZSwgbGFzdF92YWw6bnVsbH07XG4gIHZhciBzdGF0dXMgPSBmaWx0ZXJzX3RvX3ZhbGlkYXRlW2tleV07XG5cbiAgdmFyIHNlbmRBamF4ID0gZnVuY3Rpb24gKCkge1xuICAgIHN0YXR1cy50aW1lciA9IG51bGw7XG5cbiAgICB2YXIgZmluYWxseV9jaGVjayA9IGZ1bmN0aW9uICh2YWxpZCkge1xuICAgICAgc3RhdHVzLmFqYXhfb2JqID0gbnVsbDtcbiAgICAgIHN0YXR1cy52YWxpZCA9IHZhbGlkO1xuICAgICAgc3RhdHVzLmxhc3RfdmFsID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMubGFzdF92YWwgIT09IGZpbHRlcikge1xuICAgICAgaWYgKHN0YXR1cy5hamF4X29iailcbiAgICAgICAgc3RhdHVzLmFqYXhfb2JqLmFib3J0KCk7XG5cbiAgICAgIHN0YXR1cy5hamF4X29iaiA9ICQuYWpheCh7XG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGVjay9maWx0ZXIubHVhYCxcbiAgICAgICAgYXN5bmM6ICFzeW5jLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcXVlcnk6IGZpbHRlcixcbiAgICAgICAgfSwgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZpbmFsbHlfY2hlY2soc3RhdHVzLnZhbGlkKTtcbiAgICAgICAgfSwgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciB2YWxpZCA9IGRhdGEucmVzcG9uc2UgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgZmluYWxseV9jaGVjayh2YWxpZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwb3NzaWJseSBwcm9jZXNzIHRoZSByZW1pbmRlclxuICAgICAgZmluYWxseV9jaGVjayhzdGF0dXMudmFsaWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzeW5jKSB7XG4gICAgc2VuZEFqYXgoKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMubGFzdF92YWwgPT09IGZpbHRlcikge1xuICAgIC8vIElnbm9yaW5nXG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0YXR1cy50aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXR1cy50aW1lcik7XG4gICAgICBzdGF0dXMuc3VibWl0X3JlbWluZCA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGF0dXMudGltZXIgPSBzZXRUaW1lb3V0KHNlbmRBamF4LCB0aW1lb3V0KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0dXMudmFsaWQ7XG59XG5cbiIsImltcG9ydCB7IG1ha2VVbmlxdWVWYWxpZGF0b3IsIG1lbWJlclZhbHVlVmFsaWRhdG9yLCBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yLCBwYXNzd29yZE1hdGNoVmFsaWRhdG9yLCBwb29sbmFtZVZhbGlkYXRvciwgcGFzc3dvcmRNYXRjaFJlY2hlY2ssIGhvc3RPck1hY1ZhbGlkYXRvciwgaXBBZGRyZXNzVmFsaWRhdG9yLCBicGZWYWxpZGF0b3IgfSBmcm9tICcuL250b3BuZy12YWxpZGF0b3JzLXV0aWxzJ1xuXG53aW5kb3cubWFrZVVuaXF1ZVZhbGlkYXRvciA9IG1ha2VVbmlxdWVWYWxpZGF0b3JcbndpbmRvdy5tZW1iZXJWYWx1ZVZhbGlkYXRvciA9IG1lbWJlclZhbHVlVmFsaWRhdG9yXG53aW5kb3cubWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvciA9IG1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3JcbndpbmRvdy5wYXNzd29yZE1hdGNoVmFsaWRhdG9yID0gcGFzc3dvcmRNYXRjaFZhbGlkYXRvclxud2luZG93LnBvb2xuYW1lVmFsaWRhdG9yID0gcG9vbG5hbWVWYWxpZGF0b3JcbndpbmRvdy5wYXNzd29yZE1hdGNoUmVjaGVjayA9IHBhc3N3b3JkTWF0Y2hSZWNoZWNrXG53aW5kb3cuaG9zdE9yTWFjVmFsaWRhdG9yID0gaG9zdE9yTWFjVmFsaWRhdG9yXG53aW5kb3cuaXBBZGRyZXNzVmFsaWRhdG9yID0gaXBBZGRyZXNzVmFsaWRhdG9yXG53aW5kb3cuYnBmVmFsaWRhdG9yID0gYnBmVmFsaWRhdG9yXG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuZXhwb3J0IGNvbnN0IG50b3BuZ19zeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvbXBvbmVudHNfcmVhZHkgPSB7fTtcbiAgICBsZXQgc3Vic2NyaWJlcnMgPSBbXTsgICAgICAgIFxuICAgIHJldHVybiB7XG5cdHJlYWR5OiBmdW5jdGlvbihjb21wb25lbnRfbmFtZSkge1xuXHQgICAgY29tcG9uZW50c19yZWFkeVtjb21wb25lbnRfbmFtZV0gPSB0cnVlO1xuXHQgICAgc3Vic2NyaWJlcnMuZmlsdGVyKChzKSA9PiBzLmNvbXBvbmVudF9uYW1lID09IGNvbXBvbmVudF9uYW1lKS5mb3JFYWNoKChzKSA9PiBzLnJlc29sdmUoKSk7XG5cdCAgICBzdWJzY3JpYmVycyA9IHN1YnNjcmliZXJzLmZpbHRlcigocykgPT4gcy5jb21wb25lbnRfbmFtZSAhPSBjb21wb25lbnRfbmFtZSk7XG5cdH0sXG5cdG9uX3JlYWR5OiBmdW5jdGlvbihjb21wb25lbnRfbmFtZSkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWpldnQpID0+IHtcblx0XHRpZiAoY29tcG9uZW50c19yZWFkeVtjb21wb25lbnRfbmFtZV0pIHtcblx0XHQgICAgcmVzb2x2ZSgpO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdHN1YnNjcmliZXJzLnB1c2goe3Jlc29sdmUsIGNvbXBvbmVudF9uYW1lLCBjb21wbGV0ZWQ6IGZhbHNlfSk7XG5cdCAgICB9KTtcblx0fSxcbiAgICB9O1xufSgpO1xuXG4vKipcbiogVXRpbGl0eSBnbG9iYWxzIGZ1bmN0aW9ucy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX3V0aWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgZ2xvYmFsX2h0dHBfaGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB7XG5cdGlzX2FycmF5OiBmdW5jdGlvbihlKSB7XG5cdCAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlKTtcblx0fSxcblx0aXNfb2JqZWN0OiBmdW5jdGlvbihlKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnXG5cdFx0JiYgIXRoaXMuaXNfYXJyYXkoZSlcblx0XHQmJiBlICE9PSBudWxsO1xuXHR9LFxuXHQvKipcblx0ICogRGVlcCBjb3B5IG9mIGEgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fS5cblx0ICovXG5cdGNsb25lOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfb2JqZWN0KG9iaikpIHtcblx0XHQvKiBUaGlzIGRvZXMgdGhlIGRlZXAgY29weSB1c2luZyBqcXVlcnkgZm9yIG9iamVjdHMgKi9cblx0XHRyZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIG9iaik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSl7XG5cdFx0LyogVGhpcyBkb2VzIHRoZSBkZWVwIGNvcHkgdXNpbmcganF1ZXJ5IGZvciBvdGhlciB0eXBlcyAqL1xuXHRcdGxldCByZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdCAgICBsZXQgZWwgPSB0aGlzLmNsb25lKG9ialtpXSk7XG5cdFx0ICAgIHJlcy5wdXNoKGVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0Ly8gcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSlcblx0XHRyZXR1cm4gb2JqO1xuXHQgICAgfVxuXHR9LCAgICAgIFxuXHRvYmplY3RfdG9fYXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgaWYgKG9iaiA9PSBudWxsKSB7IHJldHVybiBbXTsgfVxuXHQgICAgbGV0IGFycmF5ID0gW107XG5cdCAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG5cdFx0YXJyYXkucHVzaChvYmpba2V5XSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYXJyYXk7XG5cdH0sXG5cdGNoZWNrX2FuZF9zZXRfZGVmYXVsdF9pbnRlcnZhbF90aW1lOiBmdW5jdGlvbihzZXRfc3RhdHVzKSB7XG5cdCAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSA9PSBudWxsXG4gICAgICBcdFx0fHwgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIikgPT0gbnVsbCkge1xuXHRcdGxldCBkZWZhdWx0X2Vwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KChEYXRlLm5vdygpIC0gMTAwMCAqIDMwICogNjApIC8gMTAwMCk7XG5cdFx0bGV0IGRlZmF1bHRfZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcblx0XHRudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9iZWdpblwiLCBkZWZhdWx0X2Vwb2NoX2JlZ2luKTtcblx0XHRudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9lbmRcIiwgZGVmYXVsdF9lcG9jaF9lbmQpO1xuXHQgICAgfVxuXHQgICAgaWYgKHNldF9zdGF0dXMgPT0gdHJ1ZSkge1xuXHRcdFxuXHQgICAgfVxuXHR9LFxuXHRmcm9tX3V0Y19zX3RvX3NlcnZlcl9kYXRlOiBmdW5jdGlvbih1dGNfc2Vjb25kcykge1xuXHQgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcblx0ICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcblx0ICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cdCAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSAgc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcblx0ICAgIHZhciBkX3NlcnZlciA9IG5ldyBEYXRlKHV0YyArIG9mZnNldF9tcyk7XG5cdCAgICByZXR1cm4gZF9zZXJ2ZXI7XG5cdH0sXG5cdGZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdDogZnVuY3Rpb24odXRjX21zLCBmb3JtYXQpIHtcblx0ICAgIGlmIChmb3JtYXQgPT0gbnVsbCkgeyBmb3JtYXQgPSBcIkREL01NTS9ZWVlZIEhIOm1tXCI7IH1cblx0ICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHQgICAgLy8gbGV0IGVwb2NoX2JlZ2luID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKTtcblx0ICAgIC8vIGxldCBlcG9jaF9lbmQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcblx0ICAgIGxldCBlcG9jaF9iZWdpbiA9IHN0YXR1cy5lcG9jaF9iZWdpbjtcblx0ICAgIGxldCBlcG9jaF9lbmQgPSBzdGF0dXMuZXBvY2hfZW5kO1xuXHQgICAgaWYgKGVwb2NoX2JlZ2luICE9IG51bGwgJiYgZXBvY2hfZW5kICE9IG51bGwpIHtcblx0XHRsZXQgYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoZXBvY2hfYmVnaW4pO1xuXHRcdGxldCBlbmQgPSBOdW1iZXIucGFyc2VJbnQoZXBvY2hfZW5kKTtcblx0XHRpZiAoZW5kIC0gYmVnaW4gPD0gMzAwICkge1xuXHRcdCAgICBmb3JtYXQgPSBcIkREL01NTS9ZWVlZIEhIOm1tOnNzXCI7XG5cdFx0fVxuXHQgICAgfVxuXHQgICAgXG5cdCAgICBsZXQgbSA9IG1vbWVudC50eih1dGNfbXMsIG50b3Bfem9uZWluZm8pO1xuXHQgICAgbGV0IG1fbG9jYWwgPSBtb21lbnQodXRjX21zKTtcblx0ICAgIGxldCB0el9sb2NhbCA9IG1fbG9jYWwuZm9ybWF0KGZvcm1hdCk7XG5cdCAgICBsZXQgdHpfc2VydmVyID0gbS5mb3JtYXQoZm9ybWF0KTtcblx0ICAgIHJldHVybiB0el9zZXJ2ZXI7XG5cdH0sXG5cdGNvcHlfb2JqZWN0X2tleXM6IGZ1bmN0aW9uKHNvdXJjZV9vYmosIGRlc3Rfb2JqLCByZWN1cnNpdmVfb2JqZWN0ID0gZmFsc2UpIHtcblx0ICAgIGlmIChzb3VyY2Vfb2JqID09IG51bGwpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBmb3IgKGxldCBrZXkgaW4gc291cmNlX29iaikge1xuXHQgICAgXHRpZiAoc291cmNlX29ialtrZXldID09IG51bGwpIHsgY29udGludWU7IH1cblx0ICAgIFx0aWYgKHJlY3Vyc2l2ZV9vYmplY3QgPT0gdHJ1ZSAmJiB0aGlzLmlzX29iamVjdChzb3VyY2Vfb2JqW2tleV0pICYmIHRoaXMuaXNfb2JqZWN0KGRlc3Rfb2JqW2tleV0pKSB7XG5cdCAgICBcdCAgICB0aGlzLmNvcHlfb2JqZWN0X2tleXMoc291cmNlX29ialtrZXldLCBkZXN0X29ialtrZXldLCByZWN1cnNpdmVfb2JqZWN0KTtcblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0ICAgIGRlc3Rfb2JqW2tleV0gPSBzb3VyY2Vfb2JqW2tleV07XG5cdCAgICBcdH1cblx0ICAgIH1cblx0fSxcblx0c2V0X2h0dHBfZ2xvYmFsc19oZWFkZXJzKGhlYWRlcnMpIHtcblx0ICAgIGdsb2JhbF9odHRwX2hlYWRlcnMgPSBoZWFkZXJzO1xuXHR9LFxuXHRodHRwX3JlcXVlc3Q6IGFzeW5jIGZ1bmN0aW9uKHVybCwgb3B0aW9ucywgdGhyb3dfZXhjZXB0aW9uLCBub3RfdW53cmFwKSB7XG5cdCAgICB0cnkge1xuXHRcdGlmIChvcHRpb25zID09IG51bGwpIHtcblx0XHQgICAgb3B0aW9ucyA9IHt9O1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucy5oZWFkZXJzID09IG51bGwpIHtcblx0XHQgICAgb3B0aW9ucy5oZWFkZXJzID0ge307XG5cdFx0fVxuXHRcdGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5oZWFkZXJzICE9IG51bGwgJiYgZ2xvYmFsX2h0dHBfaGVhZGVycyAhPSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcblx0XHRcdC4uLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdC4uLmdsb2JhbF9odHRwX2hlYWRlcnMsXG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdGxldCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuXHRcdGlmIChyZXMub2sgPT0gZmFsc2UpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihgaHR0cF9yZXF1ZXN0ICR7dXJsfVxcbiBvayA9PSBmYWxzZWApO1xuXHRcdCAgICBjb25zb2xlLmVycm9yKHJlcyk7XG5cdFx0ICAgIHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRsZXQganNvbl9yZXMgPSBhd2FpdCByZXMuanNvbigpO1xuXHRcdGlmIChub3RfdW53cmFwID09IHRydWUpIHsgcmV0dXJuIGpzb25fcmVzOyB9XG5cdFx0cmV0dXJuIGpzb25fcmVzLnJzcDtcblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRpZiAodGhyb3dfZXhjZXB0aW9uID09IHRydWUpIHsgdGhyb3cgZXJyOyB9XG5cdFx0cmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdH0sXG5cdGRvd25sb2FkX1VSSTogZnVuY3Rpb24odXJpLCBuYW1lKSB7XG5cdCAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHQgICAgbGluay5kb3dubG9hZCA9IG5hbWU7XG5cdCAgICBsaW5rLmhyZWYgPSB1cmk7XG5cdCAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuXHQgICAgbGluay5jbGljaygpO1xuXHQgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcblx0fSxcblx0Z2V0X3JhbmRvbV9zdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cigyLCA4KTtcblx0fSxcblx0c3RyaW5nX2hhc2hfY29kZTogZnVuY3Rpb24ocykge1xuXHQgICAgbGV0IGhhc2ggPSAwLCBpLCBjaHI7XG5cdCAgICBpZiAocy5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHIgICA9IHMuY2hhckNvZGVBdChpKTtcblx0XHRoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuXHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdCAgICB9XG5cdCAgICByZXR1cm4gaGFzaDtcblx0fSxcblx0bW9kOiBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICB4ID0geCAlIHk7XG5cdCAgICBpZiAoeCA8IDApIHsgeCArPSB5OyB9XG5cdCAgICByZXR1cm4geDtcblx0fVxuICAgIH1cbn0oKTtcblxuLyoqXG4qIEFsbG93cyB0byBtYW5hZ2UgdGhlIGFwcGxpY2F0aW9uIGdsb2JhbCBzdGF0dXMuXG4qIFRoZSBzdGF0dXMgaXMgaW5jYXBzdWxhdGVkIGludG8gdGhlIHVybC5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX3N0YXR1c19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGdsb2FiYWxfc3RhdHVzID0ge307XG4gICAgLyoqIEB0eXBlIHt7IFtpZDogc3RyaW5nXTogKHN0YXR1czogb2JqZWN0KSA9PiB2b2lkfX0gKi9cbiAgICBsZXQgc3Vic2NyaWJlcnMgPSB7fTsgLy8gZGljdGlvbmFyeSBvZiB7IFtpZDogc3RyaW5nXTogZl9vbl9udG9wbmdfc3RhdHVzX2NoYW5nZSgpIH1cbiAgICBjb25zdCBjbG9uZSA9IChlKSA9PiBudG9wbmdfdXRpbGl0eS5jbG9uZShlKTtcblxuICAgIGNvbnN0IHJlbHBsYWNlX2dsb2JhbF9zdGF0dXMgPSBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgZ2xvYWJhbF9zdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgdGhlIHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMgd2l0aCBpZCBkaWZmZXJlbnQgZnJvbSBza2lwX2lkLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0dXMgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICovXG4gICAgY29uc3Qgbm90aWZ5X3N1YnNjcmliZXJzID0gZnVuY3Rpb24oc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICAgIGZvciAobGV0IGlkIGluIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICBpZiAoaWQgPT0gc2tpcF9pZCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgbGV0IGZfb25fY2hhbmdlID0gc3Vic2NyaWJlcnNbaWRdO1xuICAgICAgICAgICAgZl9vbl9jaGFuZ2UoY2xvbmUoc3RhdHVzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgZ2xvYmFsIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGdldF9zdGF0dXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lKGdsb2FiYWxfc3RhdHVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVfc3Vic2NyaWJlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBub3RpZnlfc3Vic2NyaWJlcnMoc3RhdHVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIHRvIHN1YnNjcmliZXJzIGZfb25fY2hhbmdlIGNhbGxiYWNrIG9uIHN0YXR1cyBjaGFuZ2UgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBhbiBpZGVudGlmaWVyIG9mIHRoZSBzdWJzY3JpYnRpb24uIFxuICAgICAgICAgKiBAcGFyYW0geyhzdGF0dXM6b2JqZWN0KSA9PiB2b2lkfSBmX29uX2NoYW5nZSBjYWxsYmFjayB0aGF0IHRha2Ugb2JqZWN0IHN0YXR1cyBhcyBwYXJhbS5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBnZXRfaW5pdF9ub3RpZnkgaWYgdHJ1ZSB0aGUgY2FsbGJhY2sgaXQncyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgbGFzdCBzdGF0dXMgYXZhaWxhYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgb25fc3RhdHVzX2NoYW5nZTogZnVuY3Rpb24oaWQsIGZfb25fY2hhbmdlLCBnZXRfaW5pdF9ub3RpZnkpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzW2lkXSA9IGZfb25fY2hhbmdlO1xuICAgICAgICAgICAgaWYgKGdldF9pbml0X25vdGlmeSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYXBsYWNlcyB0aGUgYXBwbGljYXRpb24gc3RhdHVzIGFuZCBub3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXR1cyBvYmplY3QgdGhhdCByZXByZXNlbnQgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZXBsYWNlX3N0YXR1czogZnVuY3Rpb24oc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICAgICAgICByZWxwbGFjZV9nbG9iYWxfc3RhdHVzKHN0YXR1cyk7XG4gICAgICAgICAgICBub3RpZnlfc3Vic2NyaWJlcnMoc3RhdHVzLCBza2lwX2lkKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBvciByZXBsYWNlcyBhbGwgb2JqIHBhcmFtIGtleXMgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogTm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIG9iamVjdCB0byBhZGQgb3IgZWRpdCB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRfb2JqX3RvX3N0YXR1czogZnVuY3Rpb24ob2JqLCBza2lwX2lkKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3N0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhvYmosIG5ld19zdGF0dXMpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3N0YXR1cyhuZXdfc3RhdHVzLCBza2lwX2lkKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBvciByZXBsYWNlcyB0aGUgdmFsdWUga2V5IHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBrZXkgdG8gYWRkcyBvciByZXBsYWNlcy5cbiAgICAgICAgICogQHBhcmFtIHthbnl9IHZhbHVlIHZhbHVlIHRvIGFkZHMgb3IgcmVwbGFjZXMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIGFkZF92YWx1ZV90b19zdGF0dXM6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHNraXBfaWQpIHtcbiAgICAgICAgICAgIGxldCBuZXdfc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBuZXdfc3RhdHVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIC8qIFRoaXMgaXMgbmVlZGVkIHRvIGhhdmUgbXVsaXBsZSBmaWx0ZXJzIGZvciB0aGUgc2FtZSBrZXkgKi9cbiAgICAgICAgICAgIC8vIChuZXdfc3RhdHVzW2tleV0gJiYgbmV3X3N0YXR1c1trZXldLnNlYXJjaCh2YWx1ZSkgPT09IC0xKSA/IG5ld19zdGF0dXNba2V5XSArPSBcIixcIiArIHZhbHVlIDogbmV3X3N0YXR1c1trZXldID0gdmFsdWVcbiAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV9zdGF0dXMobmV3X3N0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG4gICAgfVxufSgpO1xuXG5jb25zdCBudG9wbmdfcGFyYW1zX3VybF9zZXJpYWxpemVyID0ge1xuICAvLyBmaWx0ZXJzOiBmdW5jdGlvbihrZXksIGZpbHRlcnMpIHtcbiAgLy8gXHRpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybiBcIlwiOyB9XG4gIC8vIFx0bGV0IGZpbHRlcnNfZ3JvdXBzID0ge307XG4gIC8vIFx0ZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gIC8vIFx0ICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2YuaWRdO1xuICAvLyBcdCAgICBpZiAoZ3JvdXAgPT0gbnVsbCkge1xuICAvLyBcdFx0Z3JvdXAgPSBbXTtcbiAgLy8gXHRcdGZpbHRlcnNfZ3JvdXBzW2YuaWRdID0gZ3JvdXA7XG4gIC8vIFx0ICAgIH1cbiAgLy8gXHQgICAgZ3JvdXAucHVzaChmKTtcbiAgLy8gXHR9KTtcbiAgLy8gXHRsZXQgdXJsX3BhcmFtc19hcnJheSA9IFtdO1xuICAvLyBcdGZvciAobGV0IGZfaWQgaW4gZmlsdGVyc19ncm91cHMpIHtcbiAgLy8gXHQgICAgbGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZl9pZF07XG4gIC8vIFx0ICAgIGxldCB1cmxfdmFsdWVzID0gZ3JvdXAuZmlsdGVyKChmKSA9PiBmLnZhbHVlICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gXCJcIikubWFwKChmKSA9PiBgJHtmLnZhbHVlfTske2Yub3BlcmF0b3J9YCkuam9pbihcIixcIik7XG4gIC8vIFx0ICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShmX2lkLCB1cmxfdmFsdWVzKTtcbiAgLy8gXHQgICAgdXJsX3BhcmFtc19hcnJheS5wdXNoKHVybF9wYXJhbXMpO1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gdXJsX3BhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcbiAgLy8gfSxcbn07XG5cbmV4cG9ydCBjb25zdCBudG9wbmdfdXJsX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge3sgW2tleTogc3RyaW5nXTogKG9iajogYW55KSA9PiBzdHJpbmd9fSAqL1xuICAgIGxldCBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIgPSB7fTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKG50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIsIGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplcik7XG4gIFxuICAgIHJldHVybiB7XG5cbiAgICAgICAgZ2V0X3VybF9wYXJhbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfc2VhcmNoX3BhcmFtczogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBpZiAodXJsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybF9wYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHVybCk7XG4gICAgICAgICAgICByZXR1cm4gdXJsX3BhcmFtcztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX2VudHJpZXM6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgY29uc3QgdXJsX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKHVybCk7XG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gdXJsX3BhcmFtcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX2VudHJ5OiBmdW5jdGlvbihwYXJhbV9uYW1lLCB1cmwpIHtcbiAgICAgICAgICAgIGxldCBlbnRyaWVzID0gdGhpcy5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgICAgICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gcGFyYW1fbmFtZSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfb2JqZWN0OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGxldCBlbnRyaWVzID0gdGhpcy5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSxcblxuICAgICAgICByZWxvYWRfdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSxcblxuXHRnb190b191cmw6IGZ1bmN0aW9uKHVybCkge1xuXHQgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgd2luZG93LmxvY2F0aW9uKTtcblx0ICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybCk7XG5cdH0sXG5cbiAgICAgICAgcmVwbGFjZV91cmw6IGZ1bmN0aW9uKHVybF9wYXJhbXMpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgbnVsbCwgYD8ke3VybF9wYXJhbXN9YCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVwbGFjZV91cmxfYW5kX3JlbG9hZDogZnVuY3Rpb24odXJsX3BhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybCh1cmxfcGFyYW1zKTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkX3VybCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlcmlhbGl6ZV9wYXJhbTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcbiAgICAgICAgfSxcdFxuXG4gICAgICAgIHNldF9jdXN0b21fa2V5X3NlcmlhbGl6ZXI6IGZ1bmN0aW9uKGtleSwgZl9nZXRfdXJsX3BhcmFtKSB7XG4gICAgICAgICAgICBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXJba2V5XSA9IGZfZ2V0X3VybF9wYXJhbTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydCBqcyBvYmplY3QgaW50byBhIHN0cmluZyB0aGF0IHJlcHJlc2VudCB1cmwgcGFyYW1zLlxuICAgICAgICAgKiBVc2VzIGN1c3RvbSBzZXJpYWxpemVyIGlmIHNldC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iai5cbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30uXG4gICAgICAgICAqL1xuICAgICAgICBvYmpfdG9fdXJsX3BhcmFtczogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1zID0gW107XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0X3NlcmlhbGl6ZXIgPSB0aGlzLnNlcmlhbGl6ZV9wYXJhbTtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWFsaXplciA9IGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplcltrZXldO1xuICAgICAgICAgICAgICAgIGlmIChzZXJpYWxpemVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplciA9IGRlZmF1bHRfc2VyaWFsaXplcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtID0gc2VyaWFsaXplcihrZXksIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IHBhcmFtcy5qb2luKFwiJlwiKTtcbiAgICAgICAgICAgIHJldHVybiB1cmxfcGFyYW1zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZV9wYXJhbXM6IGZ1bmN0aW9uKHBhcmFtc19rZXkpIHtcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXMoKTtcbiAgICAgICAgICAgIHBhcmFtc19rZXkuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlYXJjaF9wYXJhbXMuZGVsZXRlKHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKSk7XHQgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0X2tleV90b191cmw6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IHZhbHVlID0gXCJcIjsgfVx0ICBcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXMoKTtcbiAgICAgICAgICAgIHNlYXJjaF9wYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZF9vYmpfdG9fdXJsOiBmdW5jdGlvbih1cmxfcGFyYW1zX29iaiwgdXJsKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3VybF9wYXJhbXMgPSB0aGlzLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXNfb2JqKTtcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXModXJsKTtcbiAgICAgICAgICAgIGxldCBuZXdfZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKG5ld191cmxfcGFyYW1zKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG5ld19lbnRyaWVzKSB7XG4gICAgICAgIFx0c2VhcmNoX3BhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV3X3VybCA9IHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICh1cmwgIT0gbnVsbCkgeyByZXR1cm4gbmV3X3VybDsgfVxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChuZXdfdXJsKTtcbiAgICAgICAgfSxcbiAgICB9XG59KCk7XG5cbi8vIGV4cG9ydCBjb25zdCBudG9wbmdfcGFyYW1zX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbi8vICAgICBjb25zdCBuZXcgPSBmdW5jdGlvbihwYXJhbXNfaW5fdXJsKSB7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiB7XG4vLyAgICAgfVxuLy8gfVxuXG4vKipcbiogT2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIGxpc3Qgb2YgcHJlZmVkZWZpbmVkIGV2ZW50cyB0aGF0IHJlcHJlc2VudCB0aGUgc3RhdHVzLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfZXZlbnRzID0ge1xuICBFUE9DSF9DSEFOR0U6IFwiZXBvY2hfY2hhbmdlXCIsIC8vIHsgZXBvY2hfYmVnaW46IG51bWJlciwgZXBvY2hfZW5kOiBudW1iZXIgfVxuICBGSUxURVJTX0NIQU5HRTogXCJmaWx0ZXJzX2NoYW5nZVwiLCAvLyB7ZmlsdGVyczoge2lkOiBzdHJpbmcsIG9wZXJhdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9W10gfVxufTtcblxuY29uc3QgbnRvcG5nX2V2ZW50c19jb21wYXJlID0ge1xuICBFUE9DSF9DSEFOR0U6IGZ1bmN0aW9uKG5ld19zdGF0dXMsIG9sZF9zdGF0dXMpIHtcbnJldHVybiBuZXdfc3RhdHVzLmVwb2NoX2JlZ2luICE9IG9sZF9zdGF0dXMuZXBvY2hfYmVnaW5cbiAgICB8fCBuZXdfc3RhdHVzLmVwb2NoX2VuZCAhPSBvbGRfc3RhdHVzLmVwb2NoX2VuZDtcbiAgfSxcbiAgRklMVEVSU19DSEFOR0U6IGZ1bmN0aW9uKG5ld19zdGF0dXMsIG9sZF9zdGF0dXMpIHtcdFxucmV0dXJuIChuZXdfc3RhdHVzLmZpbHRlcnMgPT0gbnVsbCAmJiBvbGRfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbClcbiAgICB8fCAobmV3X3N0YXR1cy5maWx0ZXJzICE9IG51bGwgJiYgb2xkX3N0YXR1cy5maWx0ZXJzID09IG51bGwpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmIG9sZF9zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmXG4gIChcbiAgICAgIChuZXdfc3RhdHVzLmZpbHRlcnMubGVuZ3RoICE9IG9sZF9zdGF0dXMuZmlsdGVycy5sZW5ndGgpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycy5zb21lKChmX25ldykgPT4gb2xkX3N0YXR1cy5maWx0ZXJzLmZpbmQoKGZfb2xkKSA9PiBmX29sZC5pZCA9PSBmX25ldy5pZCkgPT0gbnVsbCkpXG4gIClcbiAgICAgICApO1xuICB9LFxufTtcblxuLyoqXG4qIE9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIHByZWZlZGVmaW5lZCBjdXN0b20gZXZlbnRzLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfY3VzdG9tX2V2ZW50cyA9IHtcbiAgU0hPV19NT0RBTF9GSUxURVJTOiBcInNob3dfbW9kYWxfZmlsdGVyc1wiLCAvLyB7aWQ6IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgdmFsdWU6IHN0cmluZ31cbiAgTU9EQUxfRklMVEVSU19BUFBMWTogXCJtb2RhbF9maWx0ZXJzX2FwcGx5XCIsIC8vIHtpZDogc3RyaW5nLCBsYWJlbDogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB2YWx1ZV9sYWJlbDogc3RyaW5nfVxuICBTSE9XX0dMT0JBTF9BTEVSVF9JTkZPOiBcInNob3dfZ2xvYmFsX2FsZXJ0X2luZm9cIiwgLy8gaHRtbF90ZXh0OiBzdHJpbmdcbiAgVklTX0RBVEFfTE9BREVEOiBcInZpc19kYXRhX2xvYWRlZFwiLCBcbiAgQ0hBTkdFX1BBR0VfVElUTEU6IFwiY2hhbmdlX3BhZ2VfdGl0bGVcIiwgXG4gICAgREFUQVRBQkxFX0xPQURFRDogXCJkYXRhdGFibGVfbG9hZGVkXCIsXG4gICAgR0VUX0lOVEVSRkFDRV9GQVRBOiBcImdldF9pbnRlcmZhY2VfZGF0YVwiLCAvLyBvYmplY3QgcmV0dXJuZWQgYnkgL2x1YS9yZXN0L3YyL2dldC9pbnRlcmZhY2UvZGF0YS5sdWFcbn07XG5cblxuLyoqXG4qIEEgZ2xvYmFsIGV2ZW50cyBzZXJ2aWNlIHRoYXQgYWxsb3dzIHRvIG1hbmFnZSB0aGUgYXBwbGljYXRpb24gZ2xvYmFsIHN0YXR1cy5cbiogVGhlIHN0YXR1cyBpcyBpbmNhcHN1bGF0ZWQgaW50byB0aGUgdXJsLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfZXZlbnRzX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZXZlbnRzX21hbmFnZXJfaWQgPSBcImV2ZW50c19tYW5hZ2VyXCI7XG4gIGxldCBzdGF0dXMgPSB7fTtcblxuICAvKiogQHR5cGUge3sgW2V2ZW50X25hbWU6IHN0cmluZ106IHsgW2lkOiBzdHJpbmddOiAoc3RhdHVzOiBvYmplY3QpID0+IHZvaWR9fX0gKi9cbiAgbGV0IGV2ZW50c19zdWJzY3JpYmVycyA9IHt9OyAvLyBkaWN0aW9uYXJ5IG9mIHsgW2V2ZW50X25hbWU6IHN0cmluZ106IHsgW2lkOiBzdHJpbmddOiBmX29uX2V2ZW50IH1cblxuICAgIGNvbnN0IGNsb25lID0gKGUpID0+IG50b3BuZ191dGlsaXR5LmNsb25lKGUpO1xuXG4gIC8qKlxuICAgKiBOb3RpZmllcyB0aGUgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycyB3aXRoIGlkIGRpZmZlcmVudCBmcm9tIHNraXBfaWQuXG4gICAqIEBwYXJhbSB7eyBbaWQ6IHN0cmluZ106IChzdGF0dXM6IG9iamVjdCkgPT4gdm9pZH19IHN1YnNjcmliZXJzIGRpY3Rpb25hcnkgb2YgaWQgPT4gZl9vbl9ldmVudCgpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdHVzIG9iamVjdCB0aGF0IHJlcHJlc2VudCB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICovXG4gIGNvbnN0IG5vdGlmeV9zdWJzY3JpYmVycyA9IGZ1bmN0aW9uKHN1YnNjcmliZXJzLCBzdGF0dXMsIHNraXBfaWQpIHtcbiAgICAgIGZvciAobGV0IGlkIGluIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgaWYgKGlkID09IHNraXBfaWQpIHsgY29udGludWU7IH1cbiAgICAgICAgICBsZXQgZl9vbl9jaGFuZ2UgPSBzdWJzY3JpYmVyc1tpZF07XG4gICAgICAgICAgZl9vbl9jaGFuZ2UoY2xvbmUoc3RhdHVzKSk7XG4gICAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgdGhhdCBkaXNwYXRjaGVzIGVhY2ggZXZlbnQgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3X3N0YXR1cyBcbiAgICovXG4gIGNvbnN0IG9uX3N0YXR1c19jaGFuZ2UgPSBmdW5jdGlvbihuZXdfc3RhdHVzKSB7XG5mb3IgKGxldCBldmVudF9uYW1lIGluIG50b3BuZ19ldmVudHMpIHtcbiAgICBsZXQgZl9jb21wYXJlID0gbnRvcG5nX2V2ZW50c19jb21wYXJlW2V2ZW50X25hbWVdO1xuICAgIGlmIChmX2NvbXBhcmUobmV3X3N0YXR1cywgc3RhdHVzKSA9PSB0cnVlKSB7XG4gIGxldCBzdWJzY3JpYmVycyA9IGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF9uYW1lXTtcbiAgbm90aWZ5X3N1YnNjcmliZXJzKHN1YnNjcmliZXJzLCBuZXdfc3RhdHVzKTtcbiAgICB9XG59XG5cbiAgICAgIHN0YXR1cyA9IG5ld19zdGF0dXM7XG4gIH07XG5cbiAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UoZXZlbnRzX21hbmFnZXJfaWQsIG9uX3N0YXR1c19jaGFuZ2UsIHRydWUpO1xuXG4gIGNvbnN0IGVtaXQgPSBmdW5jdGlvbihldmVudCwgcGFyYW1zLCBza2lwX2lkKSB7XG5sZXQgc3Vic2NyaWJlcnMgPSBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdO1xuaWYgKHN1YnNjcmliZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5ub3RpZnlfc3Vic2NyaWJlcnMoc3Vic2NyaWJlcnMsIHBhcmFtcywgc2tpcF9pZCk7XG4gIH07XG5cbiAgY29uc3Qgb25fZXZlbnQgPSBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGdldF9pbml0X25vdGlmeSkge1xuICAgICAgaWYgKGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF0gPT0gbnVsbCkge1xuICAgICAgICAgIGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF0gPSB7fTsgICAgICAgIFxuICAgICAgfVxuICAgICAgaWYgKGdldF9pbml0X25vdGlmeSA9PSB0cnVlKSB7XG4gICAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7ICAgICAgICBcbiAgICAgICAgICBmX29uX2V2ZW50KGNsb25lKHN0YXR1cykpO1xuICAgICAgfVxuICAgICAgZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XVtpZF0gPSBmX29uX2V2ZW50O1xuICB9O1xuXG4gIHJldHVybiB7XG5lbWl0X2N1c3RvbV9ldmVudDogZnVuY3Rpb24oZXZlbnQsIHBhcmFtcykge1xuICAgIGVtaXQoZXZlbnQsIHBhcmFtcyk7XG59LFxub25fY3VzdG9tX2V2ZW50OiBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQpIHtcbiAgICBvbl9ldmVudChpZCwgZXZlbnQsIGZfb25fZXZlbnQpO1xufSxcbiAgICAgIC8qKlxuICAgICAgICogQ2hhbmdlcyB0aGUgYXBwbGljYXRpb24gc3RhdHVzIGFuZCBlbWl0cyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3ViY3JpYmVycyByZWdpc3RlcmVkIHRvIHRoZSBldmVudC4gXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgZXZlbnQgbmFtZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdfc3RhdHVzIG9iamVjdCB0byBhZGQgb3IgZWRpdCB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgKi9cbiAgICAgIGVtaXRfZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBuZXdfc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgZW1pdChldmVudCwgbmV3X3N0YXR1cywgc2tpcF9pZClcbiAgICAgICAgICBudG9wbmdfc3RhdHVzX21hbmFnZXIuYWRkX29ial90b19zdGF0dXMobmV3X3N0YXR1cywgZXZlbnRzX21hbmFnZXJfaWQpO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQWxsb3dzIHRvIHN1YnNjcmliZXJzIGZfb25fZXZlbnQgY2FsbGJhY2sgb24gc3RhdHVzIGNoYW5nZSBvbiBldmVudCBldmVudF9uYW1lLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIGFuIGlkZW50aWZpZXIgb2YgdGhlIHN1YnNjcmlidGlvbi4gXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgZXZlbnQgbmFtZS4gXG4gICAgICAgKiBAcGFyYW0geyhzdGF0dXM6b2JqZWN0KSA9PiB2b2lkfSBmX29uX2V2ZW50IGNhbGxiYWNrIHRoYXQgdGFrZSBvYmplY3Qgc3RhdHVzIGFzIHBhcmFtLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBnZXRfaW5pdF9ub3RpZnkgaWYgdHJ1ZSB0aGUgY2FsbGJhY2sgaXQncyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgbGFzdCBzdGF0dXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICBvbl9ldmVudF9jaGFuZ2U6IGZ1bmN0aW9uKGlkLCBldmVudCwgZl9vbl9ldmVudCwgZ2V0X2luaXRfbm90aWZ5KSB7XG4gICAgb25fZXZlbnQoaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBnZXRfaW5pdF9ub3RpZnkpO1xuICAgICAgfSxcbiAgfSAgICBcbn0oKTtcbiIsIi8vIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvc3RlcGhlbmJvYWsvaFl1UGIvXG5cbi8vIFdyYXBwZXIgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBkb19waWUobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpIHtcblx0dmFyIHBpZSA9IG5ldyBQaWVDaGFydChuYW1lLCB1cGRhdGVfdXJsLCB1cmxfcGFyYW1zLCB1bml0cywgcmVmcmVzaCk7XG5cdGlmIChyZWZyZXNoKVxuXHRcdHBpZS5zZXRJbnRlcnZhbChzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IHBpZS51cGRhdGUoKTsgfSwgcmVmcmVzaCkpO1xuXG5cdC8vIFJldHVybiBuZXcgY2xhc3MgaW5zdGFuY2UsIHdpdGhcblx0cmV0dXJuIHBpZTtcbn1cblxuZnVuY3Rpb24gUGllQ2hhcnQobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpIHtcblxuXHQvLyBBZGQgb2JqZWN0IHByb3BlcnRpZXMgbGlrZSB0aGlzXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cdHRoaXMudXBkYXRlX3VybCA9IHVwZGF0ZV91cmw7XG5cdHRoaXMudXJsX3BhcmFtcyA9IHVybF9wYXJhbXM7XG5cdHRoaXMudW5pdHMgPSB1bml0cztcblx0dGhpcy5yZWZyZXNoID0gcmVmcmVzaDtcblx0dGhpcy5waWVJbnRlcnZhbDtcblxuICBsZXQgc3RyZWFrZXJEYXRhQWRkZWQgPSBbXVxuICBsZXQgcGF0aHMgPSBcIlwiXG4gIGxldCBsaW5lcyA9IFtdXG4gIGxldCB2YWx1ZUxhYmVscyA9IFtdXG4gIGxldCBuYW1lTGFiZWxzID0gW11cblxuXHR2YXIgcGllRGF0YSA9IFtdO1xuXHR2YXIgb2xkUGllRGF0YSA9IFtdO1xuXHR2YXIgZmlsdGVyZWRQaWVEYXRhID0gW107XG5cdHZhciByc3AgPSBjcmVhdGVfcGllX2NoYXJ0KG5hbWUsIHVuaXRzKTtcblx0dmFyIGFyY19ncm91cCA9IHJzcFswXTtcblx0dmFyIGRvbnV0ID0gcnNwWzFdO1xuXHR2YXIgdG90YWxWYWx1ZSA9IHJzcFsyXTtcblx0dmFyIHRvdGFsVW5pdHMgPSByc3BbM107XG5cdHZhciBjb2xvciA9IHJzcFs0XTtcblx0dmFyIHR3ZWVuRHVyYXRpb24gPSByc3BbNV07XG5cdHZhciBhcmMgPSByc3BbNl07XG5cdHZhciBsYWJlbF9ncm91cCA9IHJzcFs3XTtcblx0dmFyIGNlbnRlcl9ncm91cCA9IHJzcFs4XTtcblx0dmFyIHIgPSByc3BbOV07XG5cdHZhciB0ZXh0T2Zmc2V0ID0gcnNwWzEwXTtcblxuXG5cdC8vIHRvIHJ1biBlYWNoIHRpbWUgZGF0YSBpcyBnZW5lcmF0ZWRcblxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLm5hbWUpO1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMudXJsX3BhcmFtcyk7XG5cdFx0JC5hamF4KHtcblx0XHRcdHR5cGU6ICdHRVQnLFxuXHRcdFx0dXJsOiB0aGlzLnVwZGF0ZV91cmwsXG5cdFx0XHRkYXRhOiB0aGlzLnVybF9wYXJhbXMsXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoY29udGVudCkge1xuXHRcdFx0XHRsZXQgcGFyc2VkX2NvbnRlbnQ7XG5cblx0XHRcdFx0aWYgKHR5cGVvZiAoY29udGVudCkgPT0gXCJvYmplY3RcIilcblx0XHRcdFx0XHRwYXJzZWRfY29udGVudCA9IGNvbnRlbnQ7XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiAoY29udGVudCkgPT0gXCJzdHJpbmdcIilcblx0XHRcdFx0XHRwYXJzZWRfY29udGVudCA9IGpRdWVyeS5wYXJzZUpTT04oY29udGVudCk7XG5cblx0XHRcdFx0aWYgKHBhcnNlZF9jb250ZW50KVxuXHRcdFx0XHRcdHVwZGF0ZV9waWVfY2hhcnQocGFyc2VkX2NvbnRlbnQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gU1RSRUFLRVIgQ09OTkVDVElPTiAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvLyBOZWVkZWQgdG8gZHJhdyB0aGUgcGllIGltbWVkaWF0ZWx5XG5cdHRoaXMudXBkYXRlKCk7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0Ly8gdmFyIHVwZGF0ZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHVwZGF0ZSwgcmVmcmVzaCk7XG5cblx0ZnVuY3Rpb24gY29tcGFyZV9ieV9sYWJlbChhLCBiKSB7XG5cdFx0aWYgKGEubGFiZWwgPCBiLmxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmIChhLmxhYmVsID4gYi5sYWJlbCkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZV9waWVfY2hhcnQoZGF0YSkge1xuXHRcdGlmIChkYXRhLnJzcCkgLy8gZGV0ZWN0IFJFU1QgQVBJIHYxXG5cdFx0XHRkYXRhID0gZGF0YS5yc3A7XG5cblx0XHRkYXRhLnNvcnQoY29tcGFyZV9ieV9sYWJlbCk7XG5cdFx0c3RyZWFrZXJEYXRhQWRkZWQgPSBkYXRhO1xuXHRcdG9sZFBpZURhdGEgPSBmaWx0ZXJlZFBpZURhdGE7XG5cdFx0cGllRGF0YSA9IGRvbnV0KHN0cmVha2VyRGF0YUFkZGVkKTtcblxuXHRcdHZhciB0b3RhbE9jdGV0cyA9IDA7XG5cdFx0ZmlsdGVyZWRQaWVEYXRhID0gcGllRGF0YS5maWx0ZXIoZmlsdGVyRGF0YSk7XG5cdFx0ZnVuY3Rpb24gZmlsdGVyRGF0YShlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcblx0XHRcdGVsZW1lbnQubmFtZSA9IHN0cmVha2VyRGF0YUFkZGVkW2luZGV4XS5sYWJlbDtcblx0XHRcdGVsZW1lbnQudmFsdWUgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0udmFsdWU7XG5cdFx0XHRlbGVtZW50LnVybCA9IHN0cmVha2VyRGF0YUFkZGVkW2luZGV4XS51cmw7XG5cdFx0XHR0b3RhbE9jdGV0cyArPSBlbGVtZW50LnZhbHVlO1xuXHRcdFx0cmV0dXJuIChlbGVtZW50LnZhbHVlID4gMCk7XG5cdFx0fVxuXG5cdFx0aWYgKChmaWx0ZXJlZFBpZURhdGEubGVuZ3RoID4gMCkgJiYgKG9sZFBpZURhdGEubGVuZ3RoID4gMCkpIHtcblx0XHRcdC8vUkVNT1ZFIFBMQUNFSE9MREVSIENJUkNMRVxuXHRcdFx0YXJjX2dyb3VwLnNlbGVjdEFsbChcImNpcmNsZVwiKS5yZW1vdmUoKTtcblxuXHRcdFx0aWYgKHRvdGFsVmFsdWUpIHtcblx0XHRcdFx0dG90YWxWYWx1ZS50ZXh0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIga2IgPSB0b3RhbE9jdGV0cyAvIDEwMjQ7XG5cdFx0XHRcdFx0cmV0dXJuIGtiLnRvRml4ZWQoMSk7XG5cdFx0XHRcdFx0Ly9yZXR1cm4gYmNoYXJ0LmxhYmVsLmFiYnJldmlhdGVkKHRvdGFsT2N0ZXRzKjgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9EUkFXIEFSQyBQQVRIU1xuXHRcdFx0cGF0aHMgPSBhcmNfZ3JvdXAuc2VsZWN0QWxsKFwicGF0aFwiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSk7XG5cdFx0XHRwYXRocy5lbnRlcigpLmFwcGVuZChcInN2ZzpwYXRoXCIpXG5cdFx0XHRcdC5hdHRyKFwic3Ryb2tlXCIsIFwid2hpdGVcIilcblx0XHRcdFx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMC41KVxuXHRcdFx0XHQuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24gKGQsIGkpIHsgcmV0dXJuIGNvbG9yKGkpOyB9KVxuXHRcdFx0XHQudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0clR3ZWVuKFwiZFwiLCBwaWVUd2Vlbik7XG5cdFx0XHRwYXRoc1xuXHRcdFx0XHQudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0clR3ZWVuKFwiZFwiLCBwaWVUd2Vlbik7XG5cdFx0XHRwYXRocy5leGl0KClcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcmVtb3ZlUGllVHdlZW4pXG5cdFx0XHRcdC5yZW1vdmUoKTtcblxuXHRcdFx0Ly9EUkFXIFRJQ0sgTUFSSyBMSU5FUyBGT1IgTEFCRUxTXG5cdFx0XHRsaW5lcyA9IGxhYmVsX2dyb3VwLnNlbGVjdEFsbChcImxpbmVcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpO1xuXHRcdFx0bGluZXMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6bGluZVwiKVxuXHRcdFx0XHQuYXR0cihcIngxXCIsIDApXG5cdFx0XHRcdC5hdHRyKFwieDJcIiwgMClcblx0XHRcdFx0LmF0dHIoXCJ5MVwiLCAtciAtIDMpXG5cdFx0XHRcdC5hdHRyKFwieTJcIiwgLXIgLSA4KVxuXHRcdFx0XHQuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJyb3RhdGUoXCIgKyAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyICogKDE4MCAvIE1hdGguUEkpICsgXCIpXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0bGluZXMudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBcInJvdGF0ZShcIiArIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgKiAoMTgwIC8gTWF0aC5QSSkgKyBcIilcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHRsaW5lcy5leGl0KCkucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBMQUJFTFMgV0lUSCBQRVJDRU5UQUdFIFZBTFVFU1xuXHRcdFx0dmFsdWVMYWJlbHMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJ0ZXh0LnZhbHVlXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiAtNztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cblx0XHRcdFx0XHRjb25zdCBwZXJjZW50YWdlID0gKGQudmFsdWUgLyB0b3RhbE9jdGV0cykgKiAxMDA7XG5cdFx0XHRcdFx0Ly8gYXBwcm9zc2ltYXRlIHRoZSBudW1iZXIgdG8gdGhlIHRoaXJkIGRlY2lhbWwgZGlnaXQgYW5kIHNob3cgb25seSB0aGUgZmlyc3QgZGVjaW1hbFxuXHRcdFx0XHRcdGxldCBwZXJjZW50YWdlTGFiZWwgPSBwZXJjZW50YWdlLnRvRml4ZWQoMSkgKyBcIiVcIjtcblx0XHRcdFx0XHRyZXR1cm4gcGVyY2VudGFnZUxhYmVsO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0dmFsdWVMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidmFsdWVcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcygoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIixcIiArIE1hdGguc2luKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLTc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKHRvdGFsT2N0ZXRzIDw9IDEpIHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSAoZC52YWx1ZSAvIHRvdGFsT2N0ZXRzKSAqIDEwMDtcblx0XHRcdFx0XHRsZXQgcGVyY2VudGFnZUxhYmVsID0gcGVyY2VudGFnZS50b0ZpeGVkKDEpICsgXCIlXCI7XG5cdFx0XHRcdFx0cmV0dXJuIHBlcmNlbnRhZ2VMYWJlbDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHZhbHVlTGFiZWxzLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKS5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgdGV4dFR3ZWVuKTtcblx0XHRcdHZhbHVlTGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuXHRcdFx0Ly9EUkFXIExBQkVMUyBXSVRIIEVOVElUWSBOQU1FU1xuXHRcdFx0bmFtZUxhYmVscyA9IGxhYmVsX2dyb3VwLnNlbGVjdEFsbChcInRleHQudW5pdHNcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMTc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkLm5hbWU7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChkKSB7IGlmIChkLnVybCkgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLnVybDsgfSk7XG5cblx0XHRcdG5hbWVMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidW5pdHNcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcygoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIixcIiArIE1hdGguc2luKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAxNztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGQubmFtZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGQpIHsgaWYgKGQudXJsKSB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGQudXJsOyB9KTtcblxuXHRcdFx0bmFtZUxhYmVscy50cmFuc2l0aW9uKCkuZHVyYXRpb24odHdlZW5EdXJhdGlvbikuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIHRleHRUd2Vlbik7XG5cblx0XHRcdG5hbWVMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIEZVTkNUSU9OUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly8gSW50ZXJwb2xhdGUgdGhlIGFyY3MgaW4gZGF0YSBzcGFjZS5cblx0ZnVuY3Rpb24gcGllVHdlZW4oZCwgaSkge1xuXHRcdHZhciBzMDtcblx0XHR2YXIgZTA7XG5cdFx0aWYgKG9sZFBpZURhdGFbaV0pIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtpXS5zdGFydEFuZ2xlO1xuXHRcdFx0ZTAgPSBvbGRQaWVEYXRhW2ldLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2ldKSAmJiBvbGRQaWVEYXRhW2kgLSAxXSkge1xuXHRcdFx0czAgPSBvbGRQaWVEYXRhW2kgLSAxXS5lbmRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGU7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaSAtIDFdKSAmJiBvbGRQaWVEYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLmVuZEFuZ2xlO1xuXHRcdFx0ZTAgPSBvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uZW5kQW5nbGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMwID0gMDtcblx0XHRcdGUwID0gMDtcblx0XHR9XG5cdFx0dmFyIGkgPSBkMy5pbnRlcnBvbGF0ZSh7IHN0YXJ0QW5nbGU6IHMwLCBlbmRBbmdsZTogZTAgfSwgeyBzdGFydEFuZ2xlOiBkLnN0YXJ0QW5nbGUsIGVuZEFuZ2xlOiBkLmVuZEFuZ2xlIH0pO1xuXHRcdHJldHVybiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIGIgPSBpKHQpO1xuXHRcdFx0cmV0dXJuIGFyYyhiKTtcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlUGllVHdlZW4oZCwgaSkge1xuXHRcdHMwID0gMiAqIE1hdGguUEk7XG5cdFx0ZTAgPSAyICogTWF0aC5QSTtcblx0XHR2YXIgaSA9IGQzLmludGVycG9sYXRlKHsgc3RhcnRBbmdsZTogZC5zdGFydEFuZ2xlLCBlbmRBbmdsZTogZC5lbmRBbmdsZSB9LCB7IHN0YXJ0QW5nbGU6IHMwLCBlbmRBbmdsZTogZTAgfSk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHR2YXIgYiA9IGkodCk7XG5cdFx0XHRyZXR1cm4gYXJjKGIpO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0VHdlZW4oZCwgaSkge1xuXHRcdHZhciBhO1xuXHRcdGlmIChvbGRQaWVEYXRhW2ldKSB7XG5cdFx0XHRhID0gKG9sZFBpZURhdGFbaV0uc3RhcnRBbmdsZSArIG9sZFBpZURhdGFbaV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaV0pICYmIG9sZFBpZURhdGFbaSAtIDFdKSB7XG5cdFx0XHRhID0gKG9sZFBpZURhdGFbaSAtIDFdLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW2kgLSAxXS5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpIC0gMV0pICYmIG9sZFBpZURhdGEubGVuZ3RoID4gMCkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uc3RhcnRBbmdsZSArIG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YSA9IDA7XG5cdFx0fVxuXHRcdHZhciBiID0gKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cblx0XHR2YXIgZm4gPSBkMy5pbnRlcnBvbGF0ZU51bWJlcihhLCBiKTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHQpIHtcblx0XHRcdHZhciB2YWwgPSBmbih0KTtcblx0XHRcdHJldHVybiBcInRyYW5zbGF0ZShcIiArIE1hdGguY29zKHZhbCkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbih2YWwpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiKVwiO1xuXHRcdH07XG5cdH1cblxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUFVCTElDIEZVTkNJT05UUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuUGllQ2hhcnQucHJvdG90eXBlLnNldFVybFBhcmFtcyA9IGZ1bmN0aW9uICh1cmxfcGFyYW1zKSB7XG5cdHRoaXMudXJsX3BhcmFtcyA9IHVybF9wYXJhbXM7XG5cdHRoaXMuZm9yY2VVcGRhdGUoKTtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKHVybF9wYXJhbXMpIHtcblx0dGhpcy5zdG9wSW50ZXJ2YWwoKTtcblx0dGhpcy51cGRhdGUoKTtcblx0dGhpcy5zdGFydEludGVydmFsKCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIChwX3BpZUludGVydmFsKSB7XG5cdHRoaXMucGllSW50ZXJ2YWwgPSBwX3BpZUludGVydmFsO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc3RvcEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuXHQvL2Rpc2FibGVkIGdyYXBoIGludGVydmFsXG5cdGNsZWFySW50ZXJ2YWwodGhpcy5waWVJbnRlcnZhbCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zdGFydEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLnBpZUludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy51cGRhdGUoKSwgdGhpcy5yZWZyZXNoKVxufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIElOSVQgRlVOQ0lPTlRTIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY3JlYXRlX3BpZV9jaGFydChuYW1lLCB1bml0cykge1xuXHR2YXIgdyA9IDUwMDsgLy8zODAgLSBQbGVhc2Uga2VlcCBpbiBzeW5jIHdpdGggcGllLWNoYXJ0LmNzc1xuXHR2YXIgaCA9IDMyNTsgLy8yODBcblx0dmFyIGlyID0gNTI7IC8vNDVcblx0dmFyIHRleHRPZmZzZXQgPSAxNDtcblx0dmFyIHR3ZWVuRHVyYXRpb24gPSAyNTA7XG5cdHZhciByID0gMTE2OyAvLzEwMDtcblxuXHRpZiAoJChuYW1lKS5oYXNDbGFzcyhcInBpZS1jaGFydC1zbWFsbFwiKSkge1xuXHRcdHcgPSAzMzA7XG5cdFx0aCA9IDI1MDtcblx0XHRyID0gdyAvIDUgKyAxNTtcblx0XHRpciA9IHIgLyAyO1xuXHR9XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gcG9wdWxhdGUgcGllIHNsaWNlIHBhcmFtZXRlcnMgZnJvbSBhcnJheSBkYXRhXG5cdHZhciBkb251dCA9IGQzLmxheW91dC5waWUoKS52YWx1ZShmdW5jdGlvbiAoZCkge1xuXHRcdGlmIChkLnZhbHVlID09IDApIHsgZC52YWx1ZSA9IDE7IH0gLy8gRm9yY2UgdG8gMSwgaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBncmFwaFxuXHRcdHJldHVybiBkLnZhbHVlO1xuXHR9KTtcblxuXHQvL0QzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgY29sb3JzIGZyb20gYW4gb3JkaW5hbCBzY2FsZVxuXHR2YXIgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTIwKCk7XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gZHJhdyBhcmNzLCBwb3B1bGF0ZXMgcGFyYW1ldGVyIFwiZFwiIGluIHBhdGggb2JqZWN0XG5cdHZhciBhcmMgPSBkMy5zdmcuYXJjKClcblx0XHQuc3RhcnRBbmdsZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5zdGFydEFuZ2xlOyB9KVxuXHRcdC5lbmRBbmdsZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5lbmRBbmdsZTsgfSlcblx0XHQuaW5uZXJSYWRpdXMoaXIpXG5cdFx0Lm91dGVyUmFkaXVzKHIpO1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIENSRUFURSBWSVMgJiBHUk9VUFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0dmFyIHZpcyA9IGQzLnNlbGVjdChuYW1lKS5hcHBlbmQoXCJzdmc6c3ZnXCIpXG5cdFx0LmF0dHIoXCJ3aWR0aFwiLCB3KVxuXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIGgpXG5cdFx0LmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIFwiICsgdyArIFwiIFwiICsgaClcblx0XHQuYXR0cihcInByZXNlcnZlQXNwZWN0UmF0aW9cIiwgXCJ4TWlkWU1pZFwiKTtcblxuXHQvL0dST1VQIEZPUiBBUkNTL1BBVEhTXG5cdHZhciBhcmNfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwiYXJjXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vR1JPVVAgRk9SIExBQkVMU1xuXHR2YXIgbGFiZWxfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwibGFiZWxfZ3JvdXBcIilcblx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICh3IC8gMikgKyBcIixcIiArIChoIC8gMikgKyBcIilcIik7XG5cblx0Ly9HUk9VUCBGT1IgQ0VOVEVSIFRFWFRcblx0dmFyIGNlbnRlcl9ncm91cCA9IHZpcy5hcHBlbmQoXCJzdmc6Z1wiKVxuXHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJjZW50ZXJfZ3JvdXBcIilcblx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICh3IC8gMikgKyBcIixcIiArIChoIC8gMikgKyBcIilcIik7XG5cblx0Ly9QTEFDRUhPTERFUiBHUkFZIENJUkNMRVxuXHR2YXIgcGF0aHMgPSBhcmNfZ3JvdXAuYXBwZW5kKFwic3ZnOmNpcmNsZVwiKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCBcIiNFRkVGRUZcIilcblx0XHQuYXR0cihcInJcIiwgcik7XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gQ0VOVEVSIFRFWFQgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL1dISVRFIENJUkNMRSBCRUhJTkQgTEFCRUxTXG5cdHZhciB3aGl0ZUNpcmNsZSA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6Y2lyY2xlXCIpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcblx0XHQuYXR0cihcInJcIiwgaXIpO1xuXG5cdHZhciB0b3RhbFVuaXRzID0gbnVsbDtcblx0dmFyIHRvdGFsTGFiZWwgPSBudWxsO1xuXHR2YXIgdG90YWxWYWx1ZSA9IG51bGw7XG5cblx0aWYgKHVuaXRzKSB7XG5cdFx0Ly8gXCJUT1RBTFwiIExBQkVMXG5cdFx0dG90YWxMYWJlbCA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIC0xNSlcblx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgLy8gdGV4dC1hbGlnbjogcmlnaHRcblx0XHRcdC50ZXh0KFwiVE9UQUxcIik7XG5cblx0XHQvL1RPVEFMIFRSQUZGSUMgVkFMVUVcblx0XHR0b3RhbFZhbHVlID0gY2VudGVyX2dyb3VwLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidG90YWxcIilcblx0XHRcdC5hdHRyKFwiZHlcIiwgNylcblx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgLy8gdGV4dC1hbGlnbjogcmlnaHRcblx0XHRcdC50ZXh0KFwiV2FpdGluZy4uLlwiKTtcblxuXHRcdC8vVU5JVFMgTEFCRUxcblx0XHR0b3RhbFVuaXRzID0gY2VudGVyX2dyb3VwLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidW5pdHNcIilcblx0XHRcdC5hdHRyKFwiZHlcIiwgMjEpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dCh1bml0cyk7XG5cdH1cblxuXHRyZXR1cm4gKFthcmNfZ3JvdXAsIGRvbnV0LCB0b3RhbFZhbHVlLCB0b3RhbFVuaXRzLCBjb2xvciwgdHdlZW5EdXJhdGlvbiwgYXJjLCBsYWJlbF9ncm91cCwgY2VudGVyX2dyb3VwLCByLCB0ZXh0T2Zmc2V0XSk7XG59XG4iLCJpbXBvcnQgeyBudG9wbmdfZXZlbnRzLCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N5bmMsIG50b3BuZ19jdXN0b21fZXZlbnRzIH0gZnJvbSAnLi9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJ1xuXG53aW5kb3cubnRvcG5nX2V2ZW50cyA9IG50b3BuZ19ldmVudHNcbndpbmRvdy5udG9wbmdfZXZlbnRzX21hbmFnZXIgPSBudG9wbmdfZXZlbnRzX21hbmFnZXJcbndpbmRvdy5udG9wbmdfc3RhdHVzX21hbmFnZXIgPSBudG9wbmdfc3RhdHVzX21hbmFnZXJcbndpbmRvdy5udG9wbmdfdXRpbGl0eSA9IG50b3BuZ191dGlsaXR5XG53aW5kb3cubnRvcG5nX3VybF9tYW5hZ2VyID0gbnRvcG5nX3VybF9tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3N5bmMgPSBudG9wbmdfc3luY1xud2luZG93Lm50b3BuZ19jdXN0b21fZXZlbnRzID0gbnRvcG5nX2N1c3RvbV9ldmVudHNcbiIsIi8qKlxuICogKEMpIDIwMTMtMjEgLSBudG9wLm9yZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgREVGSU5FRF9XSURHRVRTID0ge307XG4vKiBVc2VkIHRvIGltcGxlbWVudCB0aGUgb24gY2xpY2sgZXZlbnRzIG9udG8gdGhlIGdyYXBoICovXG5jb25zdCBERUZJTkVEX0VWRU5UUyA9IHtcbiAgICAvKiBPbiBjbGljayBldmVudCB1c2VkIGJ5IHRoZSBmbG93IGFuYWx5emUgc2VjdGlvbiwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgdXJsICsgYSBzaW5nbGUgZmlsdGVyICovXG4gICAgXCJkYl9hbmFseXplXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YVBvaW50SW5kZXggfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgeyBmaWx0ZXIgfSA9IGNvbmZpZy53LmNvbmZpZztcbiAgICAgICAgbGV0IHZhbHVlLCB2YWx1ZV9sYWJlbCwgbGFiZWw7XG5cbiAgICAgICAgaWYoY29uZmlnLncuY29uZmlnLmZpbHRlcmluZ19sYWJlbHMpXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbmZpZy53LmNvbmZpZy5maWx0ZXJpbmdfbGFiZWxzW2RhdGFQb2ludEluZGV4XTtcblxuICAgICAgICBpZihjb25maWcudy5jb25maWcubGFiZWxzKVxuICAgICAgICAgICAgdmFsdWVfbGFiZWwgPSBjb25maWcudy5jb25maWcubGFiZWxzW2RhdGFQb2ludEluZGV4XTtcblxuICAgICAgICBpZihmaWx0ZXIubGVuZ3RoID09IDAgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICAgICAgZmlsdGVycy5wdXNoKHtpZDogZmlsdGVyWzBdLCBvcGVyYXRvcjogXCJlcVwiLCB2YWx1ZTogdmFsdWV9KTtcbiAgICAgICAgLy8gbm90aWZ5IHRoYXQgZmlsdGVycyBzdGF0dXMgaXMgdXBkYXRlZFxuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuICAgIH0sXG5cbiAgICBcIm5vbmVcIiA6IGZ1bmN0aW9uIChldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0sXG4gICAgXG4gICAgLyogU3RhbmRhcmQgb24gY2xpY2sgZXZlbnQsIHJlZGlyZWN0IHRvIHRoZSB1cmwgKi9cbiAgICBcInN0YW5kYXJkXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzIH0gPSBjb25maWcudy5jb25maWc7XG4gICAgICAgIGlmIChzZXJpZXNJbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgaWYgKHNlcmllcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuICAgICAgICBpZiAoc2VyaWUuYmFzZV91cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdF91cmwgPSAoc2VyaWUuc3RhcnRfdXJsIHx8ICcnKSBcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaCA9IHNlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5O1xuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGAke3NlcmllLmJhc2VfdXJsfT8ke2RlZmF1bHRfdXJsfSR7c2VhcmNofWA7XG4gICAgICAgIH1cbiAgICB9LFxufVxuXG5jb25zdCBERUZJTkVEX1RPT0xUSVAgPSB7XG4gICAgLyogT24gY2xpY2sgZXZlbnQgdXNlZCBieSB0aGUgZmxvdyBhbmFseXplIHNlY3Rpb24sIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IHVybCArIGEgc2luZ2xlIGZpbHRlciAqL1xuICAgIFwiZm9ybWF0X2J5dGVzXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUodmFsdWUpO1xuICAgIH0sXG5cbiAgICBcImZvcm1hdF9wa3RzXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0UGFja2V0cyh2YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qIE9uIGNsaWNrIGV2ZW50IHVzZWQgYnkgdGhlIGZsb3cgYW5hbHl6ZSBzZWN0aW9uLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCB1cmwgKyBhIHNpbmdsZSBmaWx0ZXIgKi9cbiAgICBcImZvcm1hdF92YWx1ZVwiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgXCJmb3JtYXRfbXVsdGlwbGVfZGF0ZVwiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWVbMF0pICsgXCIgLSBcIiArIG5ldyBEYXRlKHZhbHVlWzFdKVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAqICBUaGlzIGZvcm1hdHRlciBpcyB1c2VkIGJ5IHRoZSBidWJibGUgaG9zdCBtYXAsIGZyb20gdGhlIHkgYXhpcyxcbiAgICAgKiAgdXNlZCB0byBzaG93IHRoZSBIb3N0cywgd2l0aCB0aGVpciByZXNwZWN0aXZlIHZhbHVlcyBcbiAgICAgKi9cbiAgICBcImZvcm1hdF9sYWJlbF9mcm9tX3h5XCIgOiBmdW5jdGlvbih7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeF92YWx1ZSA9IHNlcmllW1wieFwiXTtcbiAgICAgICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICAgICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICAgICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgICAgICByZXR1cm4gKGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke3hfdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmApXG4gICAgfSxcbiAgICBcImZvcm1hdF9sYWJlbF9mcm9tX3huYW1lXCIgOiBmdW5jdGlvbih7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICAgICAgcmV0dXJuIChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHtuYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gKVxuICAgIH0sXG59XG5cbi8qIFN0YW5kYXJkIEZvcm1hdHRlciAqL1xuY29uc3QgREVGQVVMVF9GT1JNQVRURVIgPSBERUZJTkVEX1RPT0xUSVBbXCJmb3JtYXRfdmFsdWVcIl07XG5cbmV4cG9ydCBjbGFzcyBXaWRnZXRVdGlscyB7XG5cbiAgICBzdGF0aWMgcmVnaXN0ZXJXaWRnZXQod2lkZ2V0KSB7XG4gICAgICAgIGlmICh3aWRnZXQgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihgVGhlIHBhc3NlZCB3aWRnZXQgcmVmZXJlbmNlIGlzIG51bGwhYCk7XG4gICAgICAgIGlmICh3aWRnZXQubmFtZSBpbiBERUZJTkVEX1dJREdFVFMpIHRocm93IG5ldyBFcnJvcihgVGhlIHdpZGdldCAke3dpZGdldC5uYW1lfSBpcyBhbHJlYWR5IGRlZmluZWQhYCk7XG4gICAgICAgIERFRklORURfV0lER0VUU1t3aWRnZXQubmFtZV0gPSB3aWRnZXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFdpZGdldEJ5TmFtZSh3aWRnZXROYW1lKSB7XG4gICAgICAgIGlmICh3aWRnZXROYW1lIGluIERFRklORURfV0lER0VUUykge1xuICAgICAgICAgICAgcmV0dXJuIERFRklORURfV0lER0VUU1t3aWRnZXROYW1lXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdpZGdldCAke3dpZGdldE5hbWV9IG5vdCBmb3VuZCFgKVxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBzaW1wbGUgd3JhcHBlciBjbGFzcyBmb3IgdGhlIHdpZGdldHMuXG4gKi9cbmNsYXNzIFdpZGdldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkYXRhc291cmNlID0ge30sIHVwZGF0ZVRpbWUgPSAwLCBhZGRpdGlvbmFsUGFyYW1zID0ge30pIHtcblxuICAgICAgICAvLyBmaWVsZCBjb250YWluaW5nIHRoZSBkYXRhIGZldGNoZWQgZnJvbSB0aGUgZGF0YXNvdXJjZXMgcHJvdmlkZWRcbiAgICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgICAgIC8vIGlmIDAgdGhlbiBkb24ndCB1cGRhdGUgdGhlIGNoYXJ0IGF1dG9tYXRpY2FsbHksIHRoZSB0aW1lXG4gICAgICAgIC8vIGlzIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5fdXBkYXRlVGltZSA9IHVwZGF0ZVRpbWU7XG5cbiAgICAgICAgdGhpcy5fZGF0YXNvdXJjZSA9IGRhdGFzb3VyY2U7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMgPSBhZGRpdGlvbmFsUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXQgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICBhc3luYyBpbml0KCkge1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIHRoZSB3aWRnZXQgdG8gdGhlIERFRklORURfV0lER0VUUyBvYmplY3RcbiAgICAgICAgV2lkZ2V0VXRpbHMucmVnaXN0ZXJXaWRnZXQodGhpcyk7XG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hEYXRhKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZVRpbWUgPiAwKSB7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7IGF3YWl0IHRoaXMudXBkYXRlKHRoaXMuX2RhdGFzb3VyY2UucGFyYW1zKTsgfSwgdGhpcy5fdXBkYXRlVGltZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSB3aWRnZXQgZnJlZWluZyB0aGUgcmVzb3VyY2VzIHVzZWQuXG4gICAgICovXG4gICAgYXN5bmMgZGVzdHJveSgpIHsgfVxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIHdpZGdldCB0byByZWxvYWQgaXQncyBkYXRhLlxuICAgICAqL1xuICAgIGFzeW5jIGRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZVBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZShkYXRhc291cmNlUGFyYW1zKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVCeVVybCh1cmwpIHtcbiAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKGAke2xvY2F0aW9uLm9yaWdpbn0ke3RoaXMuX2RhdGFzb3VyY2UubmFtZX1gKTtcbiAgICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcyh1cmwpO1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgIHUuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RhdGFzb3VyY2UuZW5kcG9pbnQgPSB1LnBhdGhuYW1lICsgdS5zZWFyY2g7XG4gICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IGF3YWl0IHRoaXMuX2ZldGNoRGF0YSgpO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgdXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuXHQvLyBidWlsZCB0aGUgbmV3IGVuZHBvaW50XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKGAke2xvY2F0aW9uLm9yaWdpbn0ke3RoaXMuX2RhdGFzb3VyY2UubmFtZX1gKTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhc291cmNlUGFyYW1zKSkge1xuICAgICAgICAgICAgdS5zZWFyY2hQYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGF0YXNvdXJjZS5lbmRwb2ludCA9IHUucGF0aG5hbWUgKyB1LnNlYXJjaDtcbiAgICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaERhdGEoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBkYXRhc291cmNlcyBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3IsXG4gICAgICogZG8gYSBHRVQgcmVxdWVzdCB0byBhIFJFU1QgZW5kcG9pbnQuXG4gICAgICovXG4gICAgYXN5bmMgX2ZldGNoRGF0YSgpIHtcbiAgICAgICAgY29uc3QgcmVxID0gYXdhaXQgZmV0Y2goYCR7aHR0cF9wcmVmaXh9JHt0aGlzLl9kYXRhc291cmNlLmVuZHBvaW50fWApO1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVxLmpzb24oKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIENoYXJ0V2lkZ2V0IGV4dGVuZHMgV2lkZ2V0IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHR5cGUgPSAnbGluZScsIGRhdGFzb3VyY2UgPSB7fSwgdXBkYXRlVGltZSA9IDAsIGFkZGl0aW9uYWxQYXJhbXMgPSB7fSkge1xuICAgICAgICBzdXBlcihuYW1lLCBkYXRhc291cmNlLCB1cGRhdGVUaW1lLCBhZGRpdGlvbmFsUGFyYW1zKTtcblxuICAgICAgICB0aGlzLl9jaGFydFR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9jaGFydCA9IHt9O1xuICAgICAgICB0aGlzLl8kaHRtbENoYXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2NhbnZhcy13aWRnZXQtJHtuYW1lfWApO1xuICAgIH1cblxuICAgIHN0YXRpYyByZWdpc3RlckV2ZW50Q2FsbGJhY2sod2lkZ2V0TmFtZSwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkZ2V0ID0gV2lkZ2V0VXRpbHMuZ2V0V2lkZ2V0QnlOYW1lKHdpZGdldE5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V2ZW50TmFtZV06IGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGF3YWl0IHdpZGdldC5fY2hhcnQudXBkYXRlT3B0aW9ucyh1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUNvbmZpZygpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbXSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IFswXSxcbiAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RkL01NL3l5eXkgSEg6bW06c3MnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlLCB7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHo6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5fY2hhcnRUeXBlLFxuICAgICAgICAgICAgICAgIGV2ZW50czoge30sXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblx0ICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZURhdGFTZXJpZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vRGF0YToge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdObyBEYXRhJyxcbiAgICAgICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcyNHB4J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgYWRkaXRpb25hbFBhcmFtcyBmaWVsZCBjb250YWlucyBhbiBhcGV4IHByb3BlcnR5LFxuICAgICAgICAvLyB0aGVuIG1lcmdlIHRoZSB0d28gY29uZmlndXJhdGlvbnMgZ2l2aW5nIHByaW9yaXR5IHRvIHRoZSBjdXN0b20gb25lXG4gICAgICAgIGlmICh0aGlzLl9hZGRpdGlvbmFsUGFyYW1zICYmIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMuYXBleCkge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkQ29uZmlnID0gT2JqZWN0LmFzc2lnbihjb25maWcsIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMuYXBleCk7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkQ29uZmlnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBfYnVpbGRUb29sdGlwKGNvbmZpZywgcnNwKSB7XG4gICAgICAgIC8qIEJ5IGRlZmF1bHQgdGhlIGFyZWFDaGFydCB0b29sdGlwW3ldIGlzIG92ZXJ3cml0dGVuICovXG4gICAgICAgIGNvbmZpZ1tcInRvb2x0aXBcIl1bXCJ5XCJdID0ge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qIENoYW5naW5nIGV2ZW50cyBpZiBnaXZlbiAqL1xuICAgICAgICBpZiAocnNwWyd0b29sdGlwJ10pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXhpcyBpbiByc3BbJ3Rvb2x0aXAnXSkge1xuICAgICAgICAgICAgICAgIGlmIChheGlzID09PSBcInhcIiB8fCBheGlzID09PSBcInlcIiB8fCBheGlzID09PSBcInpcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSByc3BbJ3Rvb2x0aXAnXVtheGlzXVsnZm9ybWF0dGVyJ107XG4gICAgICAgICAgICAgICAgICAgIGlmKCFjb25maWdbJ3Rvb2x0aXAnXVtheGlzXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ1sndG9vbHRpcCddW2F4aXNdID0ge31cblxuICAgICAgICAgICAgICAgICAgICBjb25maWdbJ3Rvb2x0aXAnXVtheGlzXVsnZm9ybWF0dGVyJ10gPSBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHNbZm9ybWF0dGVyXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogQ3VzdG9taXphYmxlIHRvb2x0aXAgcmVxdWVzdGVkICovXG4gICAgICAgICAgICBpZihyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ10pXG4gICAgICAgICAgICAgICAgY29uZmlnWyd0b29sdGlwJ11bJ2N1c3RvbSddID0gREVGSU5FRF9UT09MVElQW3JzcFsndG9vbHRpcCddWydjdXN0b20nXV0gfHwgTnRvcFV0aWxzW3JzcFsndG9vbHRpcCddWydjdXN0b20nXV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZEF4aXNGb3JtYXR0ZXIoY29uZmlnLCBheGlzTmFtZSkge1xuXG4gICAgICAgIGNvbnN0IGF4aXMgPSBjb25maWdbYXhpc05hbWVdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGF4aXMgPT09IHVuZGVmaW5lZCB8fCBheGlzLmxhYmVscyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAvLyBlbmFibGUgZm9ybWF0dGVyc1xuICAgICAgICBpZiAoYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCAmJiBheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybWF0dGVyID0gYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXI7XG5cbiAgICAgICAgICAgIGlmIChOdG9wVXRpbHNbc2VsZWN0ZWRGb3JtYXR0ZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGB4YXhpczogRm9ybWF0dGluZyBmdW5jdGlvbiAnJHtzZWxlY3RlZEZvcm1hdHRlcn0nIGRpZG4ndCBmb3VuZCBpbnNpZGUgTnRvcFV0aWxzLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW3NlbGVjdGVkRm9ybWF0dGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZERhdGFMYWJlbHMoY29uZmlnLCByc3ApIHtcbiAgICAgICAgaWYgKHJzcFtcImRhdGFMYWJlbHNcIl0pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2RhdGFMYWJlbHNPcHRzLCBkYXRhXSBvZiBPYmplY3QuZW50cmllcyhyc3BbXCJkYXRhTGFiZWxzXCJdKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1tcImRhdGFMYWJlbHNcIl1bZGF0YUxhYmVsc09wdHNdID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgIFxuXG4gICAgICAgIGxldCBmb3JtYXR0ZXIgPSBjb25maWdbXCJkYXRhTGFiZWxzXCJdW1wiZm9ybWF0dGVyXCJdO1xuICAgICAgICBcbiAgICAgICAgaWYoZm9ybWF0dGVyICYmIERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdKSB7XG4gICAgICAgICAgICBjb25maWdbXCJkYXRhTGFiZWxzXCJdW1wiZm9ybWF0dGVyXCJdID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRDb25maWcoKSB7XG5cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fZ2VuZXJhdGVDb25maWcoKTtcbiAgICAgICAgY29uc3QgcnNwID0gdGhpcy5fZmV0Y2hlZERhdGEucnNwO1xuICAgICAgICBcbiAgICAgICAgLy8gYWRkIGFkZGl0aW9uYWwgcGFyYW1zIGZldGNoZWQgZnJvbSB0aGUgZGF0YXNvdXJjZVxuICAgICAgICBjb25zdCBhZGRpdGlvbmFscyA9IFsnc2VyaWVzJywgJ3hheGlzJywgJ3lheGlzJywgJ2NvbG9ycycsICdsYWJlbHMnLCAnZmlsbCcsICdmaWx0ZXInLCAnZmlsdGVyaW5nX2xhYmVscyddO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBhZGRpdGlvbmFsIG9mIGFkZGl0aW9uYWxzKSB7XG5cbiAgICAgICAgICAgIGlmIChyc3BbYWRkaXRpb25hbF0gPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChjb25maWdbYWRkaXRpb25hbF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1thZGRpdGlvbmFsXSA9IE9iamVjdC5hc3NpZ24oY29uZmlnW2FkZGl0aW9uYWxdLCByc3BbYWRkaXRpb25hbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnW2FkZGl0aW9uYWxdID0gcnNwW2FkZGl0aW9uYWxdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKiBDaGFuZ2luZyBldmVudHMgaWYgZ2l2ZW4gKi9cbiAgICAgICAgaWYgKHJzcFsnZXZlbnRzJ10pIHtcbiAgICAgICAgICAgIC8qIEp1c3QgcGFzcyBhIHRhYmxlIG9mIGV2ZW50cy4gZS5nLiB7IGV2ZW50cyA9IHsgY2xpY2sgPSBcImRiX2FuYWx5emVcIiwgdXBkYXRlZCA9IFwic3RhbmRhcmRcIiB9IH0qL1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBpbiByc3BbJ2V2ZW50cyddKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnWydjaGFydCddWydldmVudHMnXVtldmVudF0gPSBERUZJTkVEX0VWRU5UU1tyc3BbJ2V2ZW50cyddW2V2ZW50XV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyc3BbJ2hvcml6b250YWxfY2hhcnQnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25maWdbJ3Bsb3RPcHRpb25zJ11bJ2JhciddWydob3Jpem9udGFsJ10gPSByc3BbJ2hvcml6b250YWxfY2hhcnQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2J1aWxkVG9vbHRpcChjb25maWcsIHJzcClcbiAgICAgICAgdGhpcy5fYnVpbGRBeGlzRm9ybWF0dGVyKGNvbmZpZywgJ3hheGlzJyk7XG4gICAgICAgIHRoaXMuX2J1aWxkQXhpc0Zvcm1hdHRlcihjb25maWcsICd5YXhpcycpO1xuICAgICAgICB0aGlzLl9idWlsZERhdGFMYWJlbHMoY29uZmlnLCByc3ApO1xuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVDaGFydCgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fYnVpbGRDb25maWcoKTtcbiAgICAgICAgdGhpcy5fY2hhcnRDb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gbmV3IEFwZXhDaGFydHModGhpcy5fJGh0bWxDaGFydCwgdGhpcy5fY2hhcnRDb25maWcpO1xuICAgICAgICB0aGlzLl9jaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICBhd2FpdCBzdXBlci5pbml0KCk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVDaGFydCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9jaGFydCA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuICAgICAgICBpZih0aGlzLl9jaGFydENvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XHQgICAgXG4gICAgICAgICAgaWYgKGRhdGFzb3VyY2VQYXJhbXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZShkYXRhc291cmNlUGFyYW1zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgc3VwZXIudXBkYXRlQnlVcmwoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHRoaXMuX2NoYXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBlY3RpbmcgdGhhdCByc3AgY29udGFpbnMgYW4gb2JqZWN0IGNhbGxlZCBzZXJpZXNcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbG9ycywgc2VyaWVzLCBkYXRhTGFiZWxzLCBsYWJlbHMsIHhheGlzLCBmaWx0ZXJpbmdfbGFiZWxzIH0gPSB0aGlzLl9mZXRjaGVkRGF0YS5yc3A7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjb2xvcnMgbGlzdFxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmNvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoeGF4aXMgJiYgeGF4aXMuY2F0ZWdvcmllcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcueGF4aXMuY2F0ZWdvcmllcyA9IHhheGlzLmNhdGVnb3JpZXM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyaW5nX2xhYmVscylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZmlsdGVyaW5nX2xhYmVscyA9IGZpbHRlcmluZ19sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICBpZihkYXRhTGFiZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3JtYXR0ZXIgPSB0aGlzLl9jaGFydENvbmZpZy5kYXRhTGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYoZm9ybWF0dGVyICYmIERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXIgPSBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXIgPSBERUZBVUxUX0ZPUk1BVFRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGxhYmVscykgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmxhYmVscyA9IGxhYmVscztcblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0LnVwZGF0ZU9wdGlvbnModGhpcy5fY2hhcnRDb25maWcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZGVzdHJveUFuZFVwZGF0ZShkYXRhc291cmNlID0ge30pIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZGVzdHJveUFuZFVwZGF0ZShkYXRhc291cmNlKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUNoYXJ0KCk7XG4gICAgfVxuXG59XG4iLCJjb25zdCBmaXhTdWJNZW51UG9zaXRpb24gPSAoJHN1Ym1lbnUsICRob3ZlckJ1dHRvbikgPT4ge1xuXG4gICAgY29uc3QgTUlOX1NQQUNFID0gMjA7XG4gICAgY29uc3QgTUlOX0hFSUdIVCA9IDE1MDtcblxuICAgIGxldCBkaXN0RnJvbUFib3ZlID0gJGhvdmVyQnV0dG9uLnBvc2l0aW9uKCkudG9wO1xuICAgIGNvbnN0IHN1Ym1lbnVIZWlnaHQgPSAkc3VibWVudS5oZWlnaHQoKTtcbiAgICBjb25zdCBkb2N1bWVudEhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcblxuICAgIC8vIGlmIHRoZSBzdWJtZW51IGlzIHRvbyBoaWdoIHRvIGJlIHNob3duIHRoZW4gc2V0XG4gICAgLy8gdGhlIG92ZXJmbG93IG9uIHkgYXhpc1xuICAgIGlmIChzdWJtZW51SGVpZ2h0ICsgZGlzdEZyb21BYm92ZSA+PSBkb2N1bWVudEhlaWdodCkge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdWJtZW51SGVpZ2h0ID0gZG9jdW1lbnRIZWlnaHQgLSBkaXN0RnJvbUFib3ZlO1xuICAgICAgICBpZiAoY3VycmVudFN1Ym1lbnVIZWlnaHQgPD0gTUlOX0hFSUdIVCkge1xuICAgICAgICAgICAgZGlzdEZyb21BYm92ZSA9IGRpc3RGcm9tQWJvdmUgLSBzdWJtZW51SGVpZ2h0ICsgJGhvdmVyQnV0dG9uLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkc3VibWVudS5jc3MoeydtYXgtaGVpZ2h0JzogY3VycmVudFN1Ym1lbnVIZWlnaHQgLSBNSU5fU1BBQ0UsICdvdmVyZmxvdy15JzogJ2F1dG8nfSlcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBzdWJtZW51IGhlaWdodFxuICAgICRzdWJtZW51LmNzcygndG9wJywgYCR7ZGlzdEZyb21BYm92ZX1weGApO1xuXG59O1xuXG4kKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCl7XG5cbiAgICBjb25zdCBVUFBFUl9MSU1JVCA9IDMyO1xuICAgIGNvbnN0IG5hdmJhckhlaWdodCA9ICQoYCNuLW5hdmJhcmApLmhlaWdodCgpO1xuICAgIGNvbnN0IHdpbmRvd1Njcm9sbFRvcCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG5cbiAgICBpZiAod2luZG93U2Nyb2xsVG9wID49IFVQUEVSX0xJTUlUKSB7XG4gICAgICAgICQoYCNuLW5hdmJhcmApLmFkZENsYXNzKFwic2Nyb2xsZWQgYmctbGlnaHRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAkKGAjbi1uYXZiYXJgKS5yZW1vdmVDbGFzcyhcInNjcm9sbGVkIGJnLWxpZ2h0XCIpO1xuICAgIH1cblxufSk7XG5cbiQoKCkgPT4ge1xuXG4gICAgY29uc3QgdG9nZ2xlU2lkZWJhciA9ICgpID0+IHtcbiAgICAgICAgLy8gaWYgdGhlIGxheWVyIGRvZXNuJ3QgZXhpc3RzIHRoZW4gY3JlYXRlIGl0XG4gICAgICAgIGlmICgkKGAuc2lkZWJhci1jbG9zZS1sYXllcmApLmxlbmd0aCA9PSAwKSB7XG5cbiAgICAgICAgICAgIGNvbnN0ICRsYXllciA9ICQoYDxkaXYgY2xhc3M9J3NpZGViYXItY2xvc2UtbGF5ZXInIHN0eWxlPSdkaXNwbGF5Om5vbmUnPjwvZGl2PmApO1xuICAgICAgICAgICAgLy8gd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIGxheWVyXG4gICAgICAgICAgICAkbGF5ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gc2lkZWJhclxuICAgICAgICAgICAgICAgICQoYCNuLXNpZGViYXJgKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgbGF5ZXIgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSBET01cbiAgICAgICAgICAgICAgICAkbGF5ZXIuZmFkZU91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIGxheWVyIHRvIHRoZSB3cmFwcGVyXG4gICAgICAgICAgICAkKGAjd3JhcHBlcmApLmFwcGVuZCgkbGF5ZXIpO1xuICAgICAgICAgICAgLy8gc2hvdyB0aGUgbGF5ZXIgaW5zaWRlIHRoZSBwYWdlXG4gICAgICAgICAgICAkbGF5ZXIuZmFkZUluKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBleGlzdGluZyBsYXllciBhbmQgZGVzdHJveSBpdFxuICAgICAgICAgICAgJChgLnNpZGViYXItY2xvc2UtbGF5ZXJgKS5mYWRlT3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cvaGlkZSB0aGUgc2lkZWJhclxuICAgICAgICAkKGAjbi1zaWRlYmFyYCkudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgICQoJyNuLXNpZGViYXIgYS5zdWJtZW51JykuYmluZCh7XG4gICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHN1Ym1lbnUgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApO1xuICAgICAgICAgICAgZml4U3ViTWVudVBvc2l0aW9uKHN1Ym1lbnUsICQodGhpcykpO1xuICAgICAgICAgICAgc3VibWVudS5zaG93KClcbiAgICAgICAgfSxcbiAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgc3VibWVudSA9ICQodGhpcykucGFyZW50KCkuZmluZChgZGl2W2lkJD0nc3VibWVudSddYCk7XG4gICAgICAgICAgICBzdWJtZW51LmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChgZGl2W2lkJD0nc3VibWVudSddYCkuYmluZCh7XG4gICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5zaG93KClcbiAgICAgICAgfSxcbiAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogdG9nZ2xlIHNpZGViYXIgZGlzcGxheSAqL1xuICAgICQoYGJ1dHRvbltkYXRhLWJzLXRvZ2dsZT0nc2lkZWJhciddYCkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRvZ2dsZVNpZGViYXIoKTtcbiAgICB9KTtcbn0pO1xuXG4kKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gcmUtY2FsYyBzdWJtZW51IGhlaWdodFxuICAgIGNvbnN0ICRjdXJyZW50U3VibWVudSA9ICQoJyNuLXNpZGViYXInKS5maW5kKGBkaXYuc2hvd1tpZCQ9J3N1Ym1lbnUnXWApO1xuXG4gICAgaWYgKCRjdXJyZW50U3VibWVudS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgY29uc3QgJGhvdmVyQnV0dG9uID0gJGN1cnJlbnRTdWJtZW51LnBhcmVudCgpLmZpbmQoYGFbZGF0YS1icy10b2dnbGU9J2NvbGxhcHNlJ11gKTtcbiAgICAgICAgZml4U3ViTWVudVBvc2l0aW9uKCRjdXJyZW50U3VibWVudSwgJGhvdmVyQnV0dG9uKTtcbiAgICB9XG5cbn0pO1xuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBudG9wQ2hhcnRBcGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhbGwgY2hhcnQgdHlwZS5cbiAgICBjb25zdCBfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyA9IHtcblx0c2VyaWVzOiBbXSxcblx0Y2hhcnQ6IHtcblx0ICAgIGhlaWdodDogXCIxMDAlXCIsXG5cdCAgICB3aWR0aDogXCIxMDAlXCIsXG5cdCAgICB0b29sYmFyOiB7XG5cdFx0dG9vbHM6IHtcblx0XHQgICAgem9vbW91dDogZmFsc2UsXG5cdFx0ICAgIGRvd25sb2FkOiBmYWxzZSxcblx0XHQgICAgem9vbWluOiBmYWxzZSxcblx0XHQgICAgem9vbTogXCIgXCIsXG5cdFx0ICAgIHNlbGVjdGlvbjogZmFsc2UsXG5cdFx0ICAgIHBhbjogZmFsc2UsXG5cdFx0ICAgIHJlc2V0OiBmYWxzZVxuXHRcdH1cblx0ICAgIH0sXG5cdCAgICBldmVudHM6IHt9XG5cdH0sXG5cdHhheGlzOiB7XG5cdCAgICB0b29sdGlwOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdCAgICB9LFxuXHR9LFxuXHR5YXhpczoge1xuXHQgICAgbGFiZWxzOiB7XG5cdFx0c2hvdzogdHJ1ZSxcblx0XHRzdHlsZToge1xuXHRcdCAgICBjb2xvcnM6IFtdLFxuXHRcdCAgICBmb250U2l6ZTogXCIxMXB4XCIsXG5cdFx0ICAgIGZvbnRXZWlnaHQ6IDQwMCxcblx0XHQgICAgY3NzQ2xhc3M6IFwiXCJcblx0XHR9XG5cdCAgICB9LFxuXHQgICAgdGl0bGU6IHtcblx0XHRyb3RhdGU6IC05MCxcblx0XHRvZmZzZXRZOiAwLFxuXHRcdG9mZnNldFg6IDAsXG5cdFx0c3R5bGU6IHtcblx0XHQgICAgZm9udFNpemU6IFwiMTFweFwiLFxuXHRcdCAgICBmb250V2VpZ2h0OiA5MDAsXG5cdFx0ICAgIGNzc0NsYXNzOiBcIlwiXG5cdFx0fVxuXHQgICAgfSxcblx0ICAgIHRvb2x0aXA6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0ICAgIH0sXG5cdH0sXG4gICAgXHRncmlkOiB7XG4gICAgXHQgICAgc2hvdzogZmFsc2UsXG4gICAgXHR9LFxuXHRsZWdlbmQ6IHtcblx0ICAgIHNob3c6IHRydWVcblx0fSxcbiAgICB9O1xuXG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgeGF4aXMgZm9ybWF0dGVyIGZvciBjaGFydCB3aXRoIGRhdGV0aW1lIG9uIHhheGlzLlxuICAgIGNvbnN0IF9zZXRYVGltZUZvcm1hdHRlciA9IGZ1bmN0aW9uKGNoYXJ0T3B0aW9ucykge1xuXHRjaGFydE9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IGZ1bmN0aW9uKHZhbHVlLCB7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQodmFsdWUpO1xuXHR9O1xuICAgIH07XG5cbiAgICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgICBjb25zdCBfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgICAgbGV0IFRTX0NPTFVNTl9DaGFydE9wdGlvbnMgPSB7XG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJiYXJcIixcbiAgICAgICAgem9vbToge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwieFwiLFxuICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAvLyBzaGFyZWQ6IHRydWUsXG4gICAgICAgIHg6IHtcbiAgICAgICAgICAgIGZvcm1hdDogXCJkZCBNTU0geXl5eSBISDptbTpzc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHt9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB4YXhpczoge1xuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBkYXRldGltZVVUQzogZmFsc2UsXG4gICAgICAgICAgICBmb3JtYXR0ZXI6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydGVkQ2F0VG9OdW1lcmljOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX0NPTFVNTl9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICAgICAgICB9KCk7XG4gICAgXG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gICAgY29uc3QgX2RlZmF1bHRfVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBcInhcIixcbiAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgLy8gc2hhcmVkOiB0cnVlLFxuICAgICAgICB4OiB7XG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGQgTU1NIHl5eXkgSEg6bW06c3NcIlxuICAgICAgICB9LFxuICAgICAgICB5OiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgZGF0ZXRpbWVVVEM6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gICAgICAgIH0oKTtcbiAgICBcbiAgICAgICAgXG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gICAgY29uc3QgX2RlZmF1bHRfVFNfUElFX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgIHR5cGU6IFwicG9sYXJBcmVhXCIsXG4gICAgICAgICAgaGVpZ2h0OiA0MDBcbiAgICAgICAgfSxcbiAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICAgICAgcmV0dXJuICh2YWwgPyBgJHt2YWwudG9GaXhlZCgxKX0lYCA6IGAwJWApXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICAgIH0sXG4gICAgICAgIHN0cm9rZToge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICAgIH0sXG4gICAgICAgIGZpbGw6IHtcbiAgICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cdG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG5cdHJldHVybiBjaGFydE9wdGlvbnM7XG4gICAgfSgpO1xuXG4gICAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBsaW5lIGNoYXJ0IHR5cGUuXG4gICAgY29uc3QgX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0bGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcblx0bGV0IFRTX0xJTkVfQ2hhcnRPcHRpb25zID0ge1xuXHQgICAgY2hhcnQ6IHtcblx0XHR0eXBlOiBcImxpbmVcIixcblx0XHR6b29tOiB7XG5cdFx0ICAgIGVuYWJsZWQ6IHRydWUsXG5cdFx0ICAgIHR5cGU6IFwieFwiLFxuXHRcdH0sXG5cdCAgICB9LFxuXHQgICAgdG9vbHRpcDoge1xuXHRcdHNoYXJlZDogdHJ1ZSxcblx0XHR4OiB7XG5cdFx0ICAgIGZvcm1hdDogXCJkZCBNTU0geXl5eSBISDptbTpzc1wiXG5cdFx0fSxcblx0XHR5OiB7fVxuXHQgICAgfSxcblx0ICAgIHhheGlzOiB7XG5cdFx0bGFiZWxzOiB7XG5cdFx0ICAgIHNob3c6IGZhbHNlLFxuXHRcdCAgICBkYXRldGltZVVUQzogZmFsc2UsXG5cdFx0ICAgIGZvcm1hdHRlcjogbnVsbCxcblx0XHR9LFxuXHRcdGF4aXNUaWNrczoge1xuXHRcdCAgICBzaG93OiB0cnVlXG5cdFx0fSxcblx0XHR0eXBlOiBcImRhdGV0aW1lXCIsXG5cdFx0YXhpc0JvcmRlcjoge1xuXHRcdCAgICBzaG93OiB0cnVlXG5cdFx0fSxcblx0XHRjb252ZXJ0ZWRDYXRUb051bWVyaWM6IGZhbHNlXG5cdCAgICB9LFxuICAgIFx0ICAgIHN0cm9rZToge1xuICAgIFx0ICAgIFx0c2hvdzogdHJ1ZSxcblx0XHR3aWR0aDogMixcbiAgICBcdCAgICBcdGN1cnZlOiBcInNtb290aFwiXG4gICAgXHQgICAgfSxcbiAgICBcdCAgICBncmlkOiB7XG4gICAgXHQgICAgXHRzaG93OiB0cnVlLFxuICAgIFx0ICAgIH0sXG4gICAgXHQgICAgZGF0YUxhYmVsczoge1xuICAgIFx0XHRlbmFibGVkOiBmYWxzZVxuICAgIFx0ICAgIH0sXG5cdH07XG5cdG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfTElORV9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG5cdHJldHVybiBjaGFydE9wdGlvbnM7XG4gICAgfSgpO1xuXG4gICAgY29uc3QgZm9ybWF0X2xhYmVsX2Zyb21feG5hbWUgPSBmdW5jdGlvbih7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgY29uc3QgbmFtZSA9IHNlcmllW1wibmFtZVwiXVxuICAgICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgICAgcmV0dXJuIChgXG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7bmFtZX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+YClcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGxpbmUgY2hhcnQgdHlwZS5cbiAgICBjb25zdCBfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG5cdGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gIGxldCBUU19CVUJCTEVfQ2hhcnRPcHRpb25zID0ge1xuICAgIGNoYXJ0OiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgdHlwZTogXCJidWJibGVcIixcbiAgICAgIHpvb206IHtcbiAgICAgICAgYXV0b1NjYWxlWWF4aXM6IHRydWVcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgfSxcbiAgICBzdHJva2U6IHtcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICB9LFxuICAgIGZpbGw6IHtcbiAgICAgIHR5cGU6IFwic29saWRcIlxuICAgIH0sXG4gICAgZXZlbnRzOiB7XG4gICAgICBkYXRhUG9pbnRTZWxlY3Rpb246IFwic3RhbmRhcmRcIixcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgbGVmdDogNlxuICAgICAgfSxcbiAgICB9LFxuICAgIHhheGlzOiB7XG4gICAgICB0eXBlOiAnbnVtZXJpYycsXG4gICAgICBsYWJlbHM6IHt9XG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgdHlwZTogJ251bWVyaWMnLFxuICAgICAgZm9yY2VOaWNlU2NhbGU6IHRydWUsXG4gICAgICBsYWJlbHM6IHt9XG4gICAgfSxcbiAgICBkYXRhTGFiZWxzOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgY3VzdG9tOiBmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSxcbiAgICB9XG4gIH07XG5cdG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcblx0cmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgICB9KCk7XG4gICAgXG4gICAgcmV0dXJuIHtcblx0dHlwZUNoYXJ0OiB7XG5cdCAgICBUU19MSU5FOiBcIlRTX0xJTkVcIixcblx0ICAgIFRTX1NUQUNLRUQ6IFwiVFNfU1RBQ0tFRFwiLFxuXHQgICAgVFNfQ09MVU1OOiBcIlRTX0NPTFVNTlwiLFxuXHQgICAgUElFOiBcIlBJRVwiLFxuICAgICAgQlVCQkxFOiBcIkJVQkJMRVwiLFxuXHQgICAgQkFTRTogXCJCQVNFXCIsXG5cdH0sXG5cdG5ld0NoYXJ0OiBmdW5jdGlvbih0eXBlKSB7XG5cdCAgICBsZXQgX2NoYXJ0T3B0aW9ucyA9IHt9O1xuXHQgICAgbGV0IF9jaGFydDtcblx0ICAgIGxldCBfY2hhcnRIdG1sRWxlbWVudDtcblxuXHQgICAgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfU1RBQ0tFRCkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMpO1xuICAgICAgICBfc2V0WFRpbWVGb3JtYXR0ZXIoX2NoYXJ0T3B0aW9ucyk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfTElORSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMpO1xuICAgICAgICBfc2V0WFRpbWVGb3JtYXR0ZXIoX2NoYXJ0T3B0aW9ucyk7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfQ09MVU1OKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuXHQgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlBJRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfUElFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuQlVCQkxFKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gIGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuQkFTRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcblx0XHR0aHJvdyBgbnRvcENoYXJ0QXBleDo6bmV3Q2hhcnQ6IGNoYXJ0IHR5cGUgPSAke3R5cGV9IHVuc3VwcG9ydGVkYDtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgcmV0dXJuIHtcblx0XHRkcmF3Q2hhcnQ6IGZ1bmN0aW9uKGh0bWxFbGVtZW50LCBjaGFydE9wdGlvbnMpIHtcblx0XHQgICAgLy8gYWRkL3JlcGxhY2UgY2hhcnRPcHRpb25zIGZpZWxkcyBpbiBfY2hhcnRPcHRpb25zXG5cdFx0ICAgIGlmKGNoYXJ0T3B0aW9ucy55YXhpcyAmJiBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzICYmIGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyKSB7XG4gICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXJcbiAgICAgICAgICBpZihmb3JtYXR0ZXIgPT0gXCJmb3JtYXRWYWx1ZVwiKSB7XG4gICAgICAgICAgICBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlscy5mb3JtYXRWYWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGZvcm1hdHRlciA9PSBcImJ5dGVzVG9TaXplXCIpIHtcbiAgICAgICAgICAgIGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoY2hhcnRPcHRpb25zLCBfY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICAgICAgX2NoYXJ0ID0gbmV3IEFwZXhDaGFydHMoaHRtbEVsZW1lbnQsIF9jaGFydE9wdGlvbnMpO1xuXHRcdCAgICBfY2hhcnRIdG1sRWxlbWVudCA9IGh0bWxFbGVtZW50O1xuXHRcdCAgICBfY2hhcnQucmVuZGVyKCk7XG5cdFx0fSxcblx0XHR0b19kYXRhX3VyaTogYXN5bmMgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdCAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0ICAgIGxldCByZXMgPSBhd2FpdCBfY2hhcnQuZGF0YVVSSShvcHRpb25zKTtcblx0XHQgICAgcmV0dXJuIHJlcy5pbWdVUkk7XG5cdFx0fSxcblx0XHRkZXN0cm95Q2hhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdCAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0ICAgIF9jaGFydC5kZXN0cm95KCk7XG5cdFx0fSxcblx0XHR1cGRhdGVDaGFydDogZnVuY3Rpb24oY2hhcnRPcHRpb25zKSB7XG5cdFx0ICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHQgICAgX2NoYXJ0LnVwZGF0ZU9wdGlvbnMoY2hhcnRPcHRpb25zLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcblx0XHR9LFxuXHRcdHVwZGF0ZVNlcmllczogZnVuY3Rpb24oc2VyaWVzKSB7XG5cdFx0ICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHQgICAgX2NoYXJ0LnVwZGF0ZVNlcmllcyhzZXJpZXMpO1xuXHRcdH0sXG5cdFx0cmVnaXN0ZXJFdmVudDogZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaywgdXBkYXRlQ2hhcnQgPSBmYWxzZSkge1xuXHRcdCAgICBfY2hhcnRPcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudE5hbWVdID0gY2FsbGJhY2s7XG5cdFx0ICAgIGlmICh1cGRhdGVDaGFydCA9PSB0cnVlKSB7XG5cdFx0XHRfY2hhcnQudXBkYXRlT3B0aW9ucyhfY2hhcnRPcHRpb25zKTtcdCAgICBcblx0XHQgICAgfVxuXHRcdH0sXG5cdCAgICB9O1xuXHR9LFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCB7IG50b3BDaGFydEFwZXggfTtcbiIsIi8qKlxuICogKEMpIDIwMjAtMjEgLSBudG9wLm9yZ1xuICogVGhpcyBmaWxlIGNvbnRhaW5zIHV0aWxpdGllcyB1c2VkIGJ5IHRoZSAqbmV3KiBkYXRhdGFibGVzLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL250b3AtdXRpbHNcIjtcblxuXG5jb25zdCBEYXRhVGFibGVIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBoYW5kbGVyc0lkRGljdCA9IHt9O1xuICAgIHJldHVybiB7XG5cdGFkZEhhbmRsZXI6IGZ1bmN0aW9uKGgpIHtcblx0ICAgIGxldCBoYW5kbGVycyA9IGhhbmRsZXJzSWREaWN0W2guaGFuZGxlcklkXTtcblx0ICAgIGlmIChoYW5kbGVycyA9PSBudWxsKSB7XG5cdFx0aGFuZGxlcnMgPSBbXTtcblx0XHRoYW5kbGVyc0lkRGljdFtoLmhhbmRsZXJJZF0gPSBoYW5kbGVycztcblx0ICAgIH1cblx0ICAgIGhhbmRsZXJzLnB1c2goKCkgPT4ge1xuXHRcdGgub25DbGljaygpO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gYHdpbmRvd1snX0RhdGFUYWJsZUJ1dHRvbnNPbkNsaWNrJ10oJyR7aC5oYW5kbGVySWR9JywgJyR7aGFuZGxlcnMubGVuZ3RoIC0gMX0nKWA7XG5cdH0sXG5cdGdldEhhbmRsZXI6IGZ1bmN0aW9uKGhhbmRsZXJJZCwgcm93SWQpIHtcblx0ICAgIGxldCBoYW5kbGVycyA9IGhhbmRsZXJzSWREaWN0W2hhbmRsZXJJZF07XG5cdCAgICBpZiAoaGFuZGxlcnMgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXHQgICAgcmV0dXJuIGhhbmRsZXJzW3Jvd0lkXTtcblx0fSxcblx0ZGVsZXRlSGFuZGxlcnNCeUlkOiBmdW5jdGlvbihoYW5kbGVySWQpIHtcblx0ICAgIGhhbmRsZXJzSWREaWN0W2hhbmRsZXJJZF0gPSBudWxsO1xuXHR9LFxuICAgIH1cbn0oKTtcbiAgICBcbmxldCBEYXRhVGFibGVCdXR0b25DbGlja0hhbmRsZXJzID0ge307XG5cbndpbmRvd1tcIl9EYXRhVGFibGVCdXR0b25zT25DbGlja1wiXSA9IGZ1bmN0aW9uKGhhbmRsZXJJZCwgcm93SWQpIHtcbiAgICBsZXQgb25DbGljayA9IERhdGFUYWJsZUhhbmRsZXJzLmdldEhhbmRsZXIoaGFuZGxlcklkLCByb3dJZCk7XG4gICAgaWYgKG9uQ2xpY2sgIT0gbnVsbCkge1xuXHRvbkNsaWNrKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlRmlsdGVyc01lbnUge1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29wdGlvbnN9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyB0YWJsZUFQSSwgZmlsdGVyTWVudUtleSwgZmlsdGVyVGl0bGUsIGZpbHRlcnMsIGNvbHVtbkluZGV4LCBpY29uID0gbnVsbCwgZXh0cmFBdHRyaWJ1dGVzID0gXCJcIiwgaWQgPSBudWxsLCB1cmwgPSBudWxsLCB1cmxQYXJhbXMgPSBudWxsLCByZW1vdmVBbGxFbnRyeSA9IGZhbHNlLCBjYWxsYmFja0Z1bmN0aW9uID0gbnVsbCB9KSB7XG4gICAgICAgIHRoaXMucmF3RmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIHRoaXMudGFibGVBUEkgPSB0YWJsZUFQSTtcbiAgICAgICAgdGhpcy5maWx0ZXJUaXRsZSA9IGZpbHRlclRpdGxlO1xuICAgICAgICB0aGlzLmljb24gPSBpY29uO1xuICAgICAgICB0aGlzLmZpbHRlck1lbnVLZXkgPSBmaWx0ZXJNZW51S2V5O1xuICAgICAgICB0aGlzLmNvbHVtbkluZGV4ID0gY29sdW1uSW5kZXg7XG4gICAgICAgIHRoaXMucHJldmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kZGF0YXRhYmxlV3JhcHBlciA9ICQodGFibGVBUEkuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAgICAgdGhpcy5leHRyYUF0dHJpYnV0ZXMgPSBleHRyYUF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMudXJsUGFyYW1zO1xuICAgICAgICB0aGlzLnJlbW92ZUFsbEVudHJ5ID0gcmVtb3ZlQWxsRW50cnk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiA9IGNhbGxiYWNrRnVuY3Rpb25cbiAgICAgIH1cblxuICAgIGdldCBzZWxlY3RlZEZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEZpbHRlclNlbGVjdGVkO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gd2hlbiB0aGUgZGF0YXRhYmxlIGhhcyBiZWVuIGluaXRpYWxpemVkIHJlbmRlciB0aGUgZHJvcGRvd25cbiAgICAgICAgdGhpcy4kZGF0YXRhYmxlV3JhcHBlci5vbignaW5pdC5kdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9yZW5kZXIoc2VsZi5yYXdGaWx0ZXJzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gb24gYWpheCByZWxvYWQgdGhlbiB1cGRhdGUgdGhlIGRhdGF0YWJsZSBlbnRyaWVzXG4gICAgICAgIHRoaXMudGFibGVBUEkub24oJ2RyYXcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5fdXBkYXRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIF9jb3VudEVudHJpZXMocmVnZXgsIGRhdGEgPSBbXSkge1xuXG4gICAgICAgIGlmIChyZWdleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRGF0YVRhYmxlRmlsdGVyc01lbnU6Ol9jb3VudEVudHJpZXMoKSA9PiB0aGUgcGFzc2VkIHJlZ2V4IGlzIHVuZGVmaW5lZCFcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKHJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKGNlbGxWYWx1ZSA9PiByZWcudGVzdChjZWxsVmFsdWUpKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgX2NyZWF0ZU1lbnVFbnRyeShmaWx0ZXIpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0ICRlbnRyeSA9ICQoYDxsaSBjbGFzcz0nZHJvcGRvd24taXRlbSBwb2ludGVyJz4ke2ZpbHRlci5sYWJlbH0gPC9saT5gKTtcbiAgICAgICAgXG4gICAgICAgIGlmKHNlbGYudXJsKSB7XG4gICAgICAgICAgJGVudHJ5ID0gJChgPGxpIGNsYXNzPSdkcm9wZG93bi1pdGVtIHBvaW50ZXInPjxhIGhyZWY9IyBjbGFzcz0ncC0xIHN0YW5kYXJkLWNvbG9yJz4ke2ZpbHRlci5sYWJlbH0gPC9saT5gKVxuXG4gICAgICAgICAgaWYoZmlsdGVyLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gc2V0IGFjdGl2ZSBmaWx0ZXIgdGl0bGUgYW5kIGtleVxuICAgICAgICAgICAgaWYgKHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoYGkuZmFzYCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUucGFyZW50KCkucHJlcGVuZChgPGkgY2xhc3M9J2ZhcyBmYS1maWx0ZXInPjwvaT5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9ICRlbnRyeS5odG1sKCk7XG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5odG1sKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBhY3RpdmUgY2xhc3MgZnJvbSB0aGUgbGkgZWxlbWVudHNcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLmNvbnRhaW5lci5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAgIC8vIGFkZCBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBlbnRyeVxuICAgICAgICAgICAgaWYoZmlsdGVyLmtleSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLnJlZ2V4ICE9PSB1bmRlZmluZWQgJiYgKGZpbHRlci5jb3VudGFibGUgPT09IHVuZGVmaW5lZCB8fCBmaWx0ZXIuY291bnRhYmxlKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMudGFibGVBUEkuY29sdW1ucyh0aGlzLmNvbHVtbkluZGV4KS5kYXRhKClbMF07XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2NvdW50RW50cmllcyhmaWx0ZXIucmVnZXgsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgJGNvdW50ZXIgPSAkKGA8c3BhbiBjbGFzcz0nY291bnRlcic+KCR7Y291bnR9KTwvc3Bhbj5gKTtcblxuICAgICAgICAgICAgLy8gaWYgdGhlIGNvdW50IGlzIDAgdGhlbiBoaWRlIHRoZSBtZW51IGVudHJ5XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkgJGVudHJ5LmhpZGUoKTtcblxuICAgICAgICAgICAgLy9hcHBlbmQgdGhlICRjb3VudGVyIG9iamVjdCBpbnNpZGUgdGhlICRlbnRyeVxuICAgICAgICAgICAgJGVudHJ5LmFwcGVuZCgkY291bnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkZW50cnkub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyBzZXQgYWN0aXZlIGZpbHRlciB0aXRsZSBhbmQga2V5XG4gICAgICAgICAgaWYgKHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoYGkuZmFzYCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLnByZXBlbmQoYDxpIGNsYXNzPSdmYXMgZmEtZmlsdGVyJz48L2k+YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9ICRlbnRyeS5odG1sKCk7XG4gICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUuaHRtbChuZXdDb250ZW50KTtcbiAgICAgICAgICAvLyByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzcyBmcm9tIHRoZSBsaSBlbGVtZW50c1xuICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLmNvbnRhaW5lci5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAvLyBhZGQgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgZW50cnlcbiAgICAgICAgICBpZihmaWx0ZXIua2V5ICE9PSAnYWxsJykge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihzZWxmLmNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGYuY2FsbGJhY2tGdW5jdGlvbihzZWxmLnRhYmxlQVBJLCBmaWx0ZXIpO1xuICAgICAgICAgICAgaWYoZmlsdGVyLmNhbGxiYWNrKSBmaWx0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZighc2VsZi51cmwpIHtcbiAgICAgICAgICAgIHNlbGYucHJldmVudFVwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBmaWx0ZXIgaGF2ZSBhIGNhbGxiYWNrIHRoZW4gY2FsbCBpdFxuICAgICAgICAgICAgaWYgKGZpbHRlci5jYWxsYmFjaykgZmlsdGVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAvLyBwZXJmb3JtIHRoZSB0YWJsZSBmaWx0ZXJpbmdcbiAgICAgICAgICAgIHNlbGYudGFibGVBUEkuY29sdW1uKHNlbGYuY29sdW1uSW5kZXgpLnNlYXJjaChmaWx0ZXIucmVnZXgsIHRydWUsIGZhbHNlKS5kcmF3KCk7XG4gICAgICAgICAgICAvLyBzZXQgY3VycmVudCBmaWx0ZXJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudEZpbHRlclNlbGVjdGVkID0gZmlsdGVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnVybFBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcbiAgICAgICAgICAgIGNvbnN0IG5ld1VybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VsZi51cmxQYXJhbXMpXG4gICAgICAgICAgICBuZXdVcmxQYXJhbXMuc2V0KHNlbGYuZmlsdGVyTWVudUtleSwgKHR5cGVvZihmaWx0ZXIuaWQpICE9IHVuZGVmaW5lZCkgPyBmaWx0ZXIuaWQgOiAnJylcbiAgICAgICAgICAgIGNvbnN0IG5ld1VybCA9IHNlbGYudXJsICsgJz8nICsgbmV3VXJsUGFyYW1zLnRvU3RyaW5nKClcblxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8nICsgbmV3VXJsUGFyYW1zLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICRlbnRyeTtcbiAgICB9XG5cbiAgICBfY3JlYXRlRmlsdGVycyhmaWx0ZXJzKSB7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyc0NyZWF0ZWQgPSB7fTtcblxuICAgICAgICAvLyBmb3IgZWFjaCBmaWx0ZXIgZGVmaW5lZCBpbiB0aGlzLmZpbHRlcnNcbiAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgZmlsdGVycykge1xuXG4gICAgICAgICAgICBjb25zdCAkZmlsdGVyID0gdGhpcy5fY3JlYXRlTWVudUVudHJ5KGZpbHRlcik7XG4gICAgICAgICAgICAvLyBzYXZlIHRoZSBmaWx0ZXIgaW5zaWRlIHRoZSAkZmlsdGVycyBvYmplY3RcbiAgICAgICAgICAgIGZpbHRlcnNDcmVhdGVkW2ZpbHRlci5rZXldID0geyBmaWx0ZXI6IGZpbHRlciwgJG5vZGU6ICRmaWx0ZXIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJzQ3JlYXRlZDtcbiAgICB9XG5cbiAgICBfcmVuZGVyKGZpbHRlcnMpIHtcbiAgICAgIGlmKHR5cGVvZiB0aGlzLmNvbHVtbkluZGV4ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICQoYDxzcGFuIGlkPVwiJHt0aGlzLmlkfVwiICR7dGhpcy5leHRyYUF0dHJpYnV0ZXN9IHRpdGxlPVwiJHt0aGlzLmZpbHRlclRpdGxlfVwiPiR7dGhpcy5pY29uIHx8IHRoaXMuZmlsdGVyVGl0bGV9PC9zcGFuPmApLmluc2VydEJlZm9yZSh0aGlzLiRkYXRhdGFibGVXcmFwcGVyLmZpbmQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLnBhcmVudCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93bkNvbnRhaW5lciA9ICQoYDxkaXYgaWQ9JyR7dGhpcy5maWx0ZXJNZW51S2V5fV9kcm9wZG93bicgY2xhc3M9J2Ryb3Bkb3duIGQtaW5saW5lJz48L2Rpdj5gKTtcbiAgICAgICAgY29uc3QgJGRyb3Bkb3duQnV0dG9uID0gJChgPGJ1dHRvbiBjbGFzcz0nYnRuLWxpbmsgYnRuIGRyb3Bkb3duLXRvZ2dsZScgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiIHR5cGU9J2J1dHRvbic+PC9idXR0b24+YCk7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93blRpdGxlID0gJChgPHNwYW4gY2xhc3M9J2ZpbHRlci10aXRsZSc+JHt0aGlzLmZpbHRlclRpdGxlfTwvc3Bhbj5gKTtcbiAgICAgICAgJGRyb3Bkb3duQnV0dG9uLmFwcGVuZCgkZHJvcGRvd25UaXRsZSk7XG5cbiAgICAgICAgdGhpcy4kZHJvcGRvd24gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiAkZHJvcGRvd25Db250YWluZXIsXG4gICAgICAgICAgdGl0bGU6ICRkcm9wZG93blRpdGxlLFxuICAgICAgICAgIGJ1dHRvbjogJGRyb3Bkb3duQnV0dG9uXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5maWx0ZXJzID0gdGhpcy5fY3JlYXRlRmlsdGVycyhmaWx0ZXJzKTtcblxuICAgICAgICBjb25zdCAkbWVudUNvbnRhaW5lciA9ICQoYDx1bCBjbGFzcz0nZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWxnLWVuZCBzY3JvbGxhYmxlLWRyb3Bkb3duJyBpZD0nJHt0aGlzLmZpbHRlck1lbnVLZXl9X2Ryb3Bkb3duX21lbnUnPjwvdWw+YCk7XG4gICAgICAgIGZvciAoY29uc3QgW18sIGZpbHRlcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5maWx0ZXJzKSkge1xuICAgICAgICAgICAgJG1lbnVDb250YWluZXIuYXBwZW5kKGZpbHRlci4kbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgQWxsIGVudHJ5IGlzIGNyZWF0ZWQgYnkgdGhlIG9iamVjdFxuICAgICAgICBpZighdGhpcy5yZW1vdmVBbGxFbnRyeSkge1xuICAgICAgICAgIGNvbnN0IGFsbEZpbHRlciA9IHRoaXMuX2dlbmVyYXRlQWxsRmlsdGVyKCk7XG4gICAgICAgICAgJG1lbnVDb250YWluZXIucHJlcGVuZCh0aGlzLl9jcmVhdGVNZW51RW50cnkoYWxsRmlsdGVyKSk7ICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBjcmVhdGVkIGRyb3Bkb3duIGluc2lkZVxuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuYXBwZW5kKCRkcm9wZG93bkJ1dHRvbik7XG4gICAgICAgICRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmQoJG1lbnVDb250YWluZXIpO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGRyb3Bkb3duIG1lbnUgaW5zaWRlIHRoZSBmaWx0ZXIgd3JhcHBlclxuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuaW5zZXJ0QmVmb3JlKHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIuZmluZCgnLmRhdGFUYWJsZXNfZmlsdGVyJykucGFyZW50KCkpO1xuXG4gICAgICAgIHRoaXMuX3NlbGVjdEZpbHRlckZyb21TdGF0ZSh0aGlzLmZpbHRlck1lbnVLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUoZmlsdGVyS2V5KSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRhYmxlQVBJLnN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy50YWJsZUFQSS5zdGF0ZS5sb2FkZWQoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMudGFibGVBUEkuc3RhdGUubG9hZGVkKCkuZmlsdGVycykgcmV0dXJuO1xuXG4gICAgICAgIC8vIHNhdmUgdGhlIGN1cnJlbnQgdGFibGUgc3RhdGVcbiAgICAgICAgdGFibGVBUEkuc3RhdGUuc2F2ZSgpO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUFsbEZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogJ2FsbCcsXG4gICAgICAgICAgICBsYWJlbDogaTE4bl9leHQuYWxsLFxuICAgICAgICAgICAgcmVnZXg6ICcnLFxuICAgICAgICAgICAgY291bnRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24udGl0bGUucGFyZW50KCkuZmluZCgnaS5mYXMuZmEtZmlsdGVyJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24udGl0bGUuaHRtbChgJHt0aGlzLmZpbHRlclRpdGxlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF91cGRhdGUoKSB7XG5cbiAgICAgICAgLy8gaWYgdGhlIGZpbHRlcnMgaGF2ZSBub3QgYmVlbiBpbml0aWFsaXplZCBieSBfcmVuZGVyIHRoZW4gcmV0dXJuXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5wcmV2ZW50VXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW18sIGZpbHRlcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5maWx0ZXJzKSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlci5jb3VudGFibGUgPT0gZmFsc2UgfHwgZmlsdGVyLmZpbHRlci5jb3VudGFibGUgPT0gZmFsc2UpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy50YWJsZUFQSS5jb2x1bW5zKHRoaXMuY29sdW1uSW5kZXgpLmRhdGEoKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fY291bnRFbnRyaWVzKGZpbHRlci5maWx0ZXIucmVnZXgsIGRhdGEpO1xuXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBmaWx0ZXIgaWYgdGhlIGNvdW50IGlzIHplcm9cbiAgICAgICAgICAgIChjb3VudCA9PSAwKSA/IGZpbHRlci4kbm9kZS5oaWRlKCkgOiBmaWx0ZXIuJG5vZGUuc2hvdygpO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjb3VudGVyIGxhYmVsXG4gICAgICAgICAgICBmaWx0ZXIuJG5vZGUuZmluZCgnLmNvdW50ZXInKS50ZXh0KGAoJHtjb3VudH0pYCk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHNlbGVjdGVkIGJ1dHRvbiBjb3VudGVyXG4gICAgICAgICAgICB0aGlzLiRkcm9wZG93bi5idXR0b24uZmluZCgnLmNvdW50ZXInKS50ZXh0KGAoJHtjb3VudH0pYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVV0aWxzIHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIHN0YW5kYXJkIGNvbmZpZyBmb3IgdGhlIFNwcnltZWRpYSAoYykgRGF0YVRhYmxlc1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTdGREYXRhdGFibGVDb25maWcoZHRCdXR0b25zID0gW10sIGRvbSA9IFwiPCdyb3cnPCdjb2wtc20tMiBkLWlubGluZS1ibG9jaydsPjwnY29sLXNtLTEwIHRleHQtZW5kIGQtaW5saW5lLWJsb2NrJzwnZHQtc2VhcmNoJ2Y+Qj5ydGlwPlwiKSB7XG5cbiAgICAgICAgLy8gaGlkZSB0aGUgYnV0dG9ucyBzZWN0aW9uIGlmIHRoZXJlIGFyZW4ndCBidXR0b25zIGluc2lkZSB0aGUgYXJyYXlcbiAgICAgICAgaWYgKGR0QnV0dG9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgZG9tID0gXCJmQnJ0aXBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb206IGRvbSxcbiAgICAgICAgICAgIHBhZ2luZ1R5cGU6ICdmdWxsX251bWJlcnMnLFxuICAgICAgICAgICAgbGVuZ3RoTWVudTogW1sxMCwgMjAsIDUwLCAxMDBdLCBbMTAsIDIwLCA1MCwgMTAwXV0sXG4gICAgICAgICAgICBsYW5ndWFnZToge1xuICAgICAgICAgICAgICAgIHNlYXJjaDogaTE4bi5zY3JpcHRfc2VhcmNoLFxuICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiAnJmx0OycsXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6ICcmZ3Q7JyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICfCqycsXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6ICfCuydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZVN0YXRlOiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBidXR0b25zOiBkdEJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgZG9tOiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYnRuIGJ0bi1saW5rJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2QtaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUxpbmtDYWxsYmFjayhhY3Rpb24pIHtcblx0bGV0IGhhbmRsZXIgPSBcIlwiO1xuXHRsZXQgZk9uQ2xpY2sgPSBEYXRhVGFibGVIYW5kbGVycy5hZGRIYW5kbGVyKGFjdGlvbi5oYW5kbGVyKTtcblx0aGFuZGxlciA9IGBvbmNsaWNrPVwiJHtmT25DbGlja31cImA7XG5cdHJldHVybiBgPGEgaHJlZj0jXG4gICAgICAgICAgICAgICAgICAgJHtoYW5kbGVyfT5cbiAgICAgICAgICAgICAgICAgICAke2FjdGlvbi50ZXh0IHx8ICcnfVxuICAgICAgICAgICAgICAgIDwvYT5gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4YW1wbGUgb2YgYWN0aW9uOlxuICAgICAqIHtcbiAgICAgKiAgY2xhc3M6IHN0cmluZyxcbiAgICAgKiAgZGF0YTogb2JqZWN0LFxuICAgICAqICBpY29uOiBzdHJpbmcsXG4gICAgICogIG1vZGFsOiBzdHJpbmcsXG4gICAgICogIGhyZWY6IHN0cmluZyxcbiAgICAgKiAgaGlkZGVuOiBib29sLFxuICAgICAqIH1cbiAgICAgKiBAcGFyYW0geyp9IGFjdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlQWN0aW9uQnV0dG9ucyhhY3Rpb25zID0gW10pIHtcblxuICAgICAgICBjb25zdCBidXR0b25zID0gW107XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duQnV0dG9uID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj48aSBjbGFzcz1cImZhcyBmYS1hbGlnbi1qdXN0aWZ5XCI+PC9pPjwvYnV0dG9uPidcblxuICAgICAgICBhY3Rpb25zLmZvckVhY2goKGFjdGlvbiwgaSkgPT4ge1xuXHQgICAgbGV0IGhhbmRsZXIgPSBcIlwiO1xuXHQgICAgaWYgKGFjdGlvbi5oYW5kbGVyKSB7XG5cdFx0bGV0IGZPbkNsaWNrID0gRGF0YVRhYmxlSGFuZGxlcnMuYWRkSGFuZGxlcihhY3Rpb24uaGFuZGxlcik7XG5cdFx0aGFuZGxlciA9IGBvbmNsaWNrPVwiJHtmT25DbGlja31cImA7XG5cdCAgICB9XG4gICAgICAgICAgICBsZXQgYnV0dG9uID0gKGBcbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAkeyhhY3Rpb24uaHJlZiB8fCBhY3Rpb24ubW9kYWwpID8gYGhyZWY9JyR7YWN0aW9uLmhyZWYgfHwgYWN0aW9uLm1vZGFsfSdgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICR7aGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgJHsoYWN0aW9uLm9uY2xpY2spID8gYG9uY2xpY2s9JyR7YWN0aW9uLm9uY2xpY2t9J2AgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24ubW9kYWwgPyBcImRhdGEtYnMtdG9nZ2xlPSdtb2RhbCdcIiA6IGBgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz0nZHJvcGRvd24taXRlbSAke2FjdGlvbi5jbGFzcyA/IGFjdGlvbi5jbGFzcyA6IGBgfSdcbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24uaGlkZGVuID8gXCJzdHlsZT0nZGlzcGxheTogbm9uZSdcIiA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAke2FjdGlvbi5leHRlcm5hbCA/IFwidGFyZ2V0PSdfYWJvdXQnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzICR7YWN0aW9uLmljb259Jz48L2k+ICR7YWN0aW9uLnRpdGxlIHx8ICcnfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICBgKTtcbiAgICAgICAgICAgIGJ1dHRvbnMucHVzaChidXR0b24pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsaXN0ID0gYDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj4ke2J1dHRvbnMuam9pbignJyl9PC91bD5gXG5cbiAgICAgICAgcmV0dXJuIChgPGRpdiBjbGFzcz0nZHJvcGRvd24nPiR7ZHJvcGRvd25CdXR0b259JHtsaXN0fTwvZGl2PmApO1xuICAgIH1cblxuICAgIHN0YXRpYyBkZWxldGVCdXR0b25IYW5kbGVycyhoYW5kbGVySWQpIHtcblx0RGF0YVRhYmxlSGFuZGxlcnMuZGVsZXRlSGFuZGxlcnNCeUlkKGhhbmRsZXJJZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldEFqYXhDb25maWcoY29uZmlnLCB1cmwsIGRhdGFTcmMgPSAnJywgbWV0aG9kID0gXCJnZXRcIiwgcGFyYW1zID0ge30pIHtcblxuICAgICAgICBjb25maWcuYWpheCA9IHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgZGF0YVNyYzogZGF0YVNyYyxcbiAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBzdGF0aWMgZXh0ZW5kQ29uZmlnKGNvbmZpZywgZXh0ZW5zaW9uKSB7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIGN1c3RvbSBmaWx0ZXJzIHRoZW4gbWFuYWdlIHN0YXRlIGluIHRoaXMgd2F5XG4gICAgICAgIGlmIChleHRlbnNpb24uaGFzRmlsdGVycykge1xuXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVTYXZlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnRGF0YVRhYmxlc18nICsgc2V0dGluZ3Muc0luc3RhbmNlLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGV4dGVuc2lvbi5zdGF0ZUxvYWRDYWxsYmFjayA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEYXRhVGFibGVzXycgKyBzZXR0aW5ncy5zSW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIG9uIHNhdmluZyB0aGUgdGFibGUgc3RhdGUgc3RvcmUgdGhlIHNlbGVjdGVkIGZpbHRlcnNcbiAgICAgICAgICAgIGV4dGVuc2lvbi5zdGF0ZVNhdmVQYXJhbXMgPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIC8vIHNhdmUgdGhlIGZpbHRlcnMgc2VsZWN0ZWQgZnJvbSB0aGUgdXNlciBpbnNpZGUgdGhlIHN0YXRlXG4gICAgICAgICAgICAgICAgJCgnW2RhdGEtZmlsdGVyXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUZpbHRlciA9ICQodGhpcykuZmluZChgbGkuYWN0aXZlYCkuZGF0YSgnZmlsdGVyLWtleScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZUZpbHRlcikgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmaWx0ZXJzIG9iamVjdCBpcyBub3QgYWxsb2NhdGVkIHRoZW4gaW5pdGl6aWFsaXplcyBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuZmlsdGVycykgZGF0YS5maWx0ZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsdGVyc1skKHRoaXMpLmRhdGEoJ2ZpbHRlcicpXSA9IGFjdGl2ZUZpbHRlcjtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnN0IHVzZXJJbml0Q29tcGxldGUgPSBleHRlbnNpb24uaW5pdENvbXBsZXRlO1xuXG4gICAgICAgIC8vIGNvbnN0IGluaXRDb21wbGV0ZSA9IChzZXR0aW5ncywganNvbikgPT4ge1xuICAgICAgICAvLyAgICAgaWYgKHVzZXJJbml0Q29tcGxldGUgIT09IHVuZGVmaW5lZCkgdXNlckluaXRDb21wbGV0ZShzZXR0aW5ncywganNvbik7XG4gICAgICAgIC8vICAgICAvLyB0dXJuIG9uIHRvb2x0aXBzXG4gICAgICAgIC8vICAgICAkKGAuYWN0aW9ucy1ncm91cCBbdGl0bGVdYCkudG9vbHRpcCgnZW5hYmxlJyk7XG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgLy8gLy8gb3ZlcnJpZGUgaW5pdENvbXBsZXRlIGZ1bmN0aW9uXG4gICAgICAgIC8vIGV4dGVuc2lvbi5pbml0Q29tcGxldGUgPSBpbml0Q29tcGxldGU7XG5cbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBjb25maWcsIGV4dGVuc2lvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9ybWF0IHRoZSBwYXNzZWQgc2Vjb25kcyBpbnRvIHRoZSBcIkhIOk1NOlNTXCIgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzXG4gICAgICovXG4gICAgc3RhdGljIHNlY29uZHNUb0hITU1TUyhzZWNvbmRzKSB7XG5cbiAgICAgICAgY29uc3QgcGFkWmVyb2VzID0gbiA9PiBgJHtufWAucGFkU3RhcnQoMiwgJzAnKTtcblxuICAgICAgICBjb25zdCBzZWMgPSBzZWNvbmRzICUgNjA7XG4gICAgICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCkgJSA2MDtcbiAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcblxuICAgICAgICByZXR1cm4gYCR7cGFkWmVyb2VzKGhvdXJzKX06JHtwYWRaZXJvZXMobWlucyl9OiR7cGFkWmVyb2VzKHNlYyl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIE9wZW4gdGhlIHBvb2wgZWRpdCBtb2RhbCBvZiBhIGNob3NlbiBwb29sIGlmIHRoZSBxdWVyeSBwYXJhbXMgY29udGFpbnMgdGhlIHBvb2wgcGFyYW1hdGVyXG4gICAgKiBAcGFyYW0gdGFibGVBUElcbiAgICAqL1xuICAgIHN0YXRpYyBvcGVuRWRpdE1vZGFsQnlRdWVyeShwYXJhbXMpIHtcblxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAoIXVybFBhcmFtcy5oYXMocGFyYW1zLnBhcmFtTmFtZSkpIHJldHVybjtcblxuICAgICAgICBjb25zdCBkYXRhSUQgPSB1cmxQYXJhbXMuZ2V0KHBhcmFtcy5wYXJhbU5hbWUpO1xuICAgICAgICBjb25zdCBkYXRhID0gcGFyYW1zLmRhdGF0YWJsZUluc3RhbmNlLmRhdGEoKS50b0FycmF5KCkuZmluZCgoZGF0YSA9PiBkYXRhW3BhcmFtcy5wYXJhbU5hbWVdID09IGRhdGFJRCkpO1xuXG4gICAgICAgIC8vIGlmIHRoZSBjYW5jZWxJZiBwYXJhbSBoYXMgYmVlbiBwYXNzZWRcbiAgICAgICAgLy8gdGhlbiB0ZXN0IHRoZSBjYW5jZWxJZiBmdW5jdGlvbiwgaWYgdGhlIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBpcyB0cnVlIHRoZW4gY2FuY2VsIHRoZSBtb2RhbCBvcGVuaW5nXG4gICAgICAgIGlmICh0eXBlb2YgKHBhcmFtcy5jYW5jZWxJZikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuY2FuY2VsSWYoZGF0YSkpIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0ICRtb2RhbCA9ICQoYCMke3BhcmFtcy5tb2RhbEhhbmRsZXIuZ2V0TW9kYWxJRCgpfWApO1xuXG4gICAgICAgIC8vIGlmIHRoZSBwb29sIGlkIGlzIHZhbGlkIHRoZW4gb3BlbiB0aGUgZWRpdCBtb2RhbFxuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMubW9kYWxIYW5kbGVyLmludm9rZU1vZGFsSW5pdChkYXRhKTtcbiAgICAgICAgICAgICRtb2RhbC5tb2RhbCgnc2hvdycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cmxQYXJhbXMuaGFzKCdyZWZlcmVyJykpIHtcbiAgICAgICAgICAgICRtb2RhbC5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKHBhcmFtcy5wYXJhbU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCB1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWZlcmVyID0gdXJsUGFyYW1zLmdldCgncmVmZXJlcicpO1xuXG4gICAgICAgICRtb2RhbC5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlZmVyZXI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRUb2dnbGVDb2x1bW5zRHJvcGRvd24odGFibGVBUEksIHRvZ2dsZUNhbGxiYWNrID0gKGNvbCwgdmlzaWJsZSkgPT4ge30pIHtcblxuICAgICAgICBpZiAodGFibGVBUEkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgJ1RoZSAkdGFibGUgaXMgdW5kZWZpbmVkISc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YWJsZUlEID0gdGFibGVBUEkudGFibGUoKS5ub2RlKCkuaWQ7XG5cbiAgICAgICAgRGF0YVRhYmxlVXRpbHMuX2xvYWRDb2x1bW5zVmlzaWJpbGl0eSh0YWJsZUFQSSkudGhlbihmdW5jdGlvbiAoZmV0Y2hlZERhdGEpIHtcblxuICAgICAgICAgICAgbGV0IHNhdmVkQ29sdW1ucyA9IFstMV07XG4gICAgICAgICAgICBpZiAoZmV0Y2hlZERhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHNhdmVkQ29sdW1ucyA9IGZldGNoZWREYXRhLmNvbHVtbnMubWFwKGkgPT4gcGFyc2VJbnQoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZldGNoZWREYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5zID0gW107XG4gICAgICAgICAgICBjb25zdCBpZ25vcmVkQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgJGRhdGF0YWJsZVdyYXBwZXIgPSAkKHRhYmxlQVBJLmNvbnRleHRbMF0ublRhYmxlV3JhcHBlcik7XG5cbiAgICAgICAgICAgIC8vIGdldCB0aGUgdGFibGUgaGVhZGVycyBcbiAgICAgICAgICAgIHRhYmxlQVBJLmNvbHVtbnMoKS5ldmVyeShmdW5jdGlvbiAoaSkge1xuXG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgYWxyZWFkeSBoaWRkZW4gY29sdW1uc1xuICAgICAgICAgICAgICAgIGlmICghdGFibGVBUEkuY29sdW1uKGkpLnZpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZ25vcmVkQ29sdW1ucy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHsgaW5kZXg6IGksIG5hbWU6IHRoaXMuaGVhZGVyKCkudGV4dENvbnRlbnQsIGxhYmVsOiB0aGlzLmkxOG4ubmFtZSAvKiBIdW1hbi1yZWFkYWJsZSBjb2x1bW4gbmFtZSAqLyB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCAkYnRuR3JvdXAgPSAkKGBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXllXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGApO1xuXG4gICAgICAgICAgICBjb25zdCAkZHJvcGRvd25NZW51ID0gJChgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodFwiIHN0eWxlPSd3aWR0aDogbWF4LWNvbnRlbnQ7Jz48aDYgY2xhc3M9XCJkcm9wZG93bi1oZWFkZXJcIj5TaG93IENvbHVtbnM8L2g2PjwvZGl2PmApO1xuICAgICAgICAgICAgY29uc3QgJGNoZWNrYm94ZXMgPSAkKGA8ZGl2IGNsYXNzPSdweC00Jz48L2Rpdj5gKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gY29sdW1uc1tpXTtcblxuXHRcdC8vIFByZXZlbnRzIGNvbHVtbnMgd2l0aCBubyBuYW1lcyB0byBiZSBzZWxlY3RpdmVseSBoaWRkZW4gKGUuZy4sIHRoZSBlbnRpdHkgdW5kZXIgdGhlIGFsbCBhbGVydHMgcGFnZSlcblx0XHRpZihjb2x1bW4ubmFtZSA9PSBcIlwiKVxuXHRcdCAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNoZWNrYm94IGFuZCBkZWxlZ2F0ZSBhIGNoYW5nZSBldmVudFxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYHRvZ2dsZS0ke2NvbHVtbi5uYW1lLnNwbGl0KCkuam9pbignXycpfWA7IFxuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGNvbHVtbiBpZCBpdCdzIGluc2lkZSB0aGUgc2F2ZWRDb2x1bW5zIGFycmF5XG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBpcyB0cnVlIHRoZW4gdGhlIGNvbHVtbiBpcyBub3QgaGlkZGVuXG4gICAgICAgICAgICAgICAgY29uc3QgdG9nZ2xlZCA9IHNhdmVkQ29sdW1ucy5pbmRleE9mKGNvbHVtbi5pbmRleCkgPT09IC0xO1xuICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSB0YWJsZUFQSS5jb2x1bW4oY29sdW1uLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29sLnZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0ICRjaGVja2JveCA9ICQoYDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiAkeyh0b2dnbGVkID8gJ2NoZWNrZWQnIDogJycpfSB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7aWR9XCI+YClcbiAgICAgICAgICAgICAgICBjb25zdCAkd3JhcHBlciA9ICQoYFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cIiR7aWR9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtjb2x1bW4ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIGApO1xuXG4gICAgICAgICAgICAgICAgJGNoZWNrYm94Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAkKGAub3ZlcmxheWApLnRvZ2dsZSg1MDApO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjb2x1bW4gQVBJIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSB0YWJsZUFQSS5jb2x1bW4oY29sdW1uLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHRoZSB2aXNpYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlKCFjb2wudmlzaWJsZSgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gY29sLnZpc2libGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW5Db2x1bW5zID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vIGluc2VydCBpbnNpZGUgdGhlIGFycmF5IG9ubHkgdGhlIGhpZGRlbiBjb2x1bW5zXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQVBJLmNvbHVtbnMoKS5ldmVyeShmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVBUEkuY29sdW1uKGkpLnZpc2libGUoKSB8fCBpZ25vcmVkQ29sdW1ucy5pbmRleE9mKGkpICE9PSAtMSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuQ29sdW1ucy5wdXNoKGkpOyBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSB0aGUgdGFibGUgdmlldyBpbnNpZGUgcmVkaXNcbiAgICAgICAgICAgICAgICAgICAgJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvZGF0YXRhYmxlX2NvbHVtbnMubHVhYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnc2F2ZScsIHRhYmxlOiB0YWJsZUlELCBjb2x1bW5zOiBoaWRkZW5Db2x1bW5zLmpvaW4oJywnKSwgY3NyZjogd2luZG93Ll9fQ1NSRl9EQVRBVEFCTEVfX1xuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2FsbGJhY2soY29sLCB2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkd3JhcHBlci5wcmVwZW5kKCRjaGVja2JveCk7XG4gICAgICAgICAgICAgICAgJGNoZWNrYm94ZXMuYXBwZW5kKCR3cmFwcGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGRyb3Bkb3duTWVudS5vbihcImNsaWNrLmJzLmRyb3Bkb3duXCIsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIG5ldyBub2RlIGluc2lkZSB0aGUgZGF0YXRhYmxlXG4gICAgICAgICAgICAkYnRuR3JvdXAuYXBwZW5kKCRkcm9wZG93bk1lbnUuYXBwZW5kKCRjaGVja2JveGVzKSk7XG4gICAgICAgICAgICAkZGF0YXRhYmxlV3JhcHBlci5maW5kKCcuZHQtc2VhcmNoJykucGFyZW50KCkuYXBwZW5kKCRidG5Hcm91cCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBfbG9hZENvbHVtbnNWaXNpYmlsaXR5KHRhYmxlQVBJKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlSUQgPSB0YWJsZUFQSS50YWJsZSgpLm5vZGUoKS5pZDtcbiAgICAgICAgcmV0dXJuICQuZ2V0KGAke2h0dHBfcHJlZml4fS9sdWEvZGF0YXRhYmxlX2NvbHVtbnMubHVhP3RhYmxlPSR7dGFibGVJRH0mYWN0aW9uPWxvYWRgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVJlbmRlcnMge1xuXG4gICAgc3RhdGljIGFsZXJ0U2V2ZXJpdHlBbmRUeXBlKHNldmVyaXR5LCB0eXBlLCBhbGVydCkge1xuICAgICAgICByZXR1cm4gYCR7RGF0YVRhYmxlUmVuZGVycy5mb3JtYXRWYWx1ZUxhYmVsKHNldmVyaXR5LCB0eXBlLCBhbGVydCl9ICR7RGF0YVRhYmxlUmVuZGVycy5mb3JtYXRWYWx1ZUxhYmVsKGFsZXJ0LmFsZXJ0X2lkLCB0eXBlLCBhbGVydCl9YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGlkZUlmWmVybyhvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBsZXQgY29sb3IgPSAob2JqLmNvbG9yICE9PSB1bmRlZmluZWQgPyBvYmouY29sb3IgOiBcIiNhYWFcIik7XG4gICAgICAgIGxldCB2YWx1ZSA9IChvYmoudmFsdWUgIT09IHVuZGVmaW5lZCA/IG9iai52YWx1ZSA6IG9iaik7XG4gICAgICAgIGlmICh0eXBlID09PSBcImRpc3BsYXlcIiAmJiBwYXJzZUludCh2YWx1ZSkgPT09IDApIGNvbG9yID0gXCIjYWFhXCI7XG4gICAgICAgIGxldCBzcGFuID0gYDxzcGFuIHN0eWxlPSdjb2xvcjogJHtjb2xvcn0nPiR7TnRvcFV0aWxzLmZpbnQodmFsdWUpfTwvc3Bhbj5gO1xuICAgICAgICBpZiAob2JqLnVybCAhPT0gdW5kZWZpbmVkKSBzcGFuID0gYDxhIGhyZWY9XCIke29iai51cmx9XCI+JHtzcGFufTwvYT5gO1xuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2Vjb25kc1RvVGltZShzZWNvbmRzLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZGlzcGxheVwiKSByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoc2Vjb25kcyk7XG4gICAgICAgIHJldHVybiBzZWNvbmRzO1xuICAgIH1cblxuICAgIHN0YXRpYyBmaWx0ZXJpemUoa2V5LCB2YWx1ZSwgbGFiZWwsIHRhZ19sYWJlbCwgdGl0bGUsIGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PScke2tleX0nIHRpdGxlPScke3RpdGxlIHx8IHZhbHVlfScgZGF0YS10YWctdmFsdWU9JyR7dmFsdWV9JyBkYXRhLXRhZy1sYWJlbD0nJHt0YWdfbGFiZWwgfHwgbGFiZWwgfHwgdmFsdWV9JyBocmVmPScjJz4ke2h0bWwgfHwgbGFiZWwgfHwgdmFsdWV9PC9hPmA7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFZhbHVlTGFiZWwob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IG9iai5sYWJlbDtcbiAgICAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdE1lc3NhZ2Uob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBjb25zdCBzdHJpcF90YWdzID0gZnVuY3Rpb24oaHRtbCkgeyBsZXQgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IHQuaW5uZXJIVE1MID0gaHRtbDsgcmV0dXJuIHQudGV4dENvbnRlbnQgfHwgdC5pbm5lclRleHQgfHwgXCJcIjsgfVxuICAgICAgICAgICBcbiAgICAgICAgbGV0IGNlbGwgPSBvYmouZGVzY3I7XG4gICAgICAgIGlmIChvYmouc2hvcnRlbl9kZXNjcilcbiAgICAgICAgICAgIGNlbGwgPSBgPHNwYW4gdGl0bGU9XCIke29iai5kZXNjcn1cIj4ke29iai5zaG9ydGVuX2Rlc2NyfTwvc3Bhbj5gO1xuXG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTdWJ0eXBlKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcblxuICAgICAgICBsZXQgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3VidHlwZScsIG9iaiwgb2JqKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7IFxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRGb3JtYXRHZW5lcmljRmllbGQoZmllbGQpIHtcblx0cmV0dXJuIGZ1bmN0aW9uKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgXHQgICAgbGV0IGh0bWxfcmVmID0gJyc7XG5cdCAgICBpZiAob2JqLnJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkKVxuXHRcdGh0bWxfcmVmID0gb2JqLnJlZmVyZW5jZVxuICAgICAgICAgICAgbGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoZmllbGQsIHJvd1tmaWVsZF0udmFsdWUsIHJvd1tmaWVsZF0ubGFiZWwsIHJvd1tmaWVsZF0ubGFiZWwsIHJvd1tmaWVsZF0ubGFiZWwpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsICsgJyAnICsgaHRtbF9yZWY7XG5cdH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U05NUEludGVyZmFjZShvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgIGxldCBjZWxsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3NubXBfaW50ZXJmYWNlJywgb2JqLnZhbHVlLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsKTtcbiAgICAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFNOTVBJUChvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnaXAnLCBvYmosIG9iaiwgb2JqLCBvYmopO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRQcm9iZUlQKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcblxuXHRsZXQgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncHJvYmVfaXAnLCBvYmoudmFsdWUsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsOyBcbiAgICB9XG4gICBcbiAgICBzdGF0aWMgZm9ybWF0SG9zdChvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG4gICAgXHRsZXQgaHRtbF9yZWYgPSAnJztcblx0aWYgKG9iai5yZWZlcmVuY2UgIT09IHVuZGVmaW5lZClcblx0ICAgaHRtbF9yZWYgPSBvYmoucmVmZXJlbmNlXG5cdGxldCBsYWJlbCA9IFwiXCI7XG5cblx0bGV0IGhvc3RLZXksIGhvc3RWYWx1ZTtcbiAgICAgICAgaWYgKG9iai5sYWJlbCAmJiBvYmoubGFiZWwgIT0gb2JqLnZhbHVlKSB7XG5cdCAgICBob3N0S2V5ID0gXCJuYW1lXCI7XG5cdCAgICBob3N0VmFsdWUgPSBvYmoubGFiZWxfbG9uZztcbiAgICAgICAgICAgIGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ25hbWUnLCBvYmoubGFiZWxfbG9uZywgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbF9sb25nKTtcblx0fVxuICAgICAgICBlbHNlIHtcblx0ICAgIGhvc3RLZXkgPSBcImlwXCI7XG5cdCAgICBob3N0VmFsdWUgPSBvYmoudmFsdWU7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdpcCcsIG9iai52YWx1ZSwgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbF9sb25nKTtcblx0fVxuXG4gICAgICAgIGlmIChyb3cudmxhbl9pZCAmJiByb3cudmxhbl9pZCAhPSBcIlwiICYmIHJvdy52bGFuX2lkICE9IFwiMFwiKSB7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKGhvc3RLZXksIGAke2hvc3RWYWx1ZX1AJHtyb3cudmxhbl9pZH1gLCBgJHtvYmoubGFiZWx9QCR7cm93LnZsYW5faWR9YCwgYCR7b2JqLmxhYmVsfUAke3Jvdy52bGFuX2lkfWAsIGAke29iai5sYWJlbF9sb25nfUAke3Jvdy52bGFuX2lkfWApO1xuXHR9XG5cbiAgICAgICAgaWYgKG9iai5jb3VudHJ5KVxuICAgICAgICAgICAgbGFiZWwgPSBsYWJlbCArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjb3VudHJ5Jywgb2JqLmNvdW50cnksIG9iai5jb3VudHJ5LCBvYmouY291bnRyeSwgb2JqLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBvYmouY291bnRyeS50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvYT4gJyk7XG5cbiAgICAgICAgaWYgKHJvdy5yb2xlICYmIHJvdy5yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgcm93LnJvbGUudmFsdWUsIFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLXNrdWxsXCIgdGl0bGU9XCInK3Jvdy5yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnJvbGUubGFiZWwpO1xuICAgICAgICBlbHNlIGlmIChyb3cucm9sZSAmJiByb3cucm9sZS52YWx1ZSA9PSAndmljdGltJylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCByb3cucm9sZS52YWx1ZSxcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cucm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlLmxhYmVsKTtcblxuICAgICAgICBpZiAocm93LnJvbGVfY2xpX3NydiAmJiByb3cucm9sZV9jbGlfc3J2LnZhbHVlID09ICdjbGllbnQnKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZV9jbGlfc3J2Jywgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSwgXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIiB0aXRsZT1cIicrcm93LnJvbGVfY2xpX3Nydi5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlX2NsaV9zcnYubGFiZWwpO1xuICAgICAgICBlbHNlIGlmIChyb3cucm9sZV9jbGlfc3J2ICYmIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUgPT0gJ3NlcnZlcicpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlX2NsaV9zcnYnLCByb3cucm9sZV9jbGlfc3J2LnZhbHVlLFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIiB0aXRsZT1cIicrcm93LnJvbGVfY2xpX3Nydi5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlX2NsaV9zcnYubGFiZWwpO1xuXG4gICAgICAgIHJldHVybiBsYWJlbCArICcgJyArIGh0bWxfcmVmOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZmlsdGVyaXplVmxhbihmbG93LCByb3csIGtleSwgdmFsdWUsIGxhYmVsLCB0aXRsZSkge1xuXHRsZXQgdmFsdWVWbGFuID0gdmFsdWU7XG4gIGxldCBsYWJlbFZsYW4gPSBsYWJlbDtcblx0bGV0IHRpdGxlVmxhbiA9IHRpdGxlO1xuXHRpZiAoZmxvdy52bGFuICYmIGZsb3cudmxhbi52YWx1ZSAhPSAwKSB7XG5cdCAgICB2YWx1ZVZsYW4gPSBgJHt2YWx1ZX1AJHtmbG93LnZsYW4udmFsdWV9YDtcblx0ICAgIGxhYmVsVmxhbiA9IGAke2xhYmVsfUAke2Zsb3cudmxhbi5sYWJlbH1gO1xuXHQgICAgdGl0bGVWbGFuID0gYCR7dGl0bGV9QCR7Zmxvdy52bGFuLnRpdGxlfWA7XG5cdH1cbiAgICAgIGxhYmVsVmxhbiA9IE50b3BVdGlscy5zaG9ydGVuTGFiZWwobGFiZWxWbGFuLCAxNiwgXCIuXCIpXG4gICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoa2V5LCB2YWx1ZVZsYW4sIGxhYmVsVmxhbiwgbGFiZWxWbGFuLCB0aXRsZVZsYW4pOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0Rmxvd1R1cGxlKGZsb3csIHR5cGUsIHJvdykge1xuICAgICAgbGV0IGFjdGl2ZV9yZWYgPSAoZmxvdy5hY3RpdmVfdXJsID8gYDxhIGhyZWY9XCIke2Zsb3cuYWN0aXZlX3VybH1cIj48aSBjbGFzcz1cImZhcyBmYS1zdHJlYW1cIj48L2k+PC9hPmAgOiBcIlwiKTtcbiAgICAgICAgbGV0IHZsYW4gPSBcIlwiXG5cbiAgICAgICAgbGV0IGNsaUxhYmVsID0gXCJcIjtcbiAgICAgICAgaWYgKGZsb3cuY2xpX2lwLm5hbWUpIHtcbiAgICAgICAgICBsZXQgdGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgaWYoZmxvdy5jbGlfaXAubGFiZWxfbG9uZykgdGl0bGUgPSBmbG93LmNsaV9pcC52YWx1ZSArIFwiIFtcIiArIGZsb3cuY2xpX2lwLmxhYmVsX2xvbmcgKyBcIl1cIjtcbiAgICAgICAgICAgIGNsaUxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ2NsaV9uYW1lJywgZmxvdy5jbGlfaXAubmFtZSwgZmxvdy5jbGlfaXAubGFiZWwsIHRpdGxlKTsgXG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgY2xpTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnY2xpX2lwJywgZmxvdy5jbGlfaXAudmFsdWUsIGZsb3cuY2xpX2lwLmxhYmVsLCBmbG93LmNsaV9pcC5sYWJlbF9sb25nKTsgXG5cbiAgICAgICAgbGV0IGNsaUZsYWdMYWJlbD0gJydcblxuICAgICAgICBpZiAoZmxvdy5jbGlfaXAuY291bnRyeSAmJiBmbG93LmNsaV9pcC5jb3VudHJ5ICE9PSBcIm5pbFwiKVxuICAgICAgICAgICAgY2xpRmxhZ0xhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2NsaV9jb3VudHJ5JywgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgJyA8aW1nIHNyYz1cIicgKyBodHRwX3ByZWZpeCArICcvZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJyArIGZsb3cuY2xpX2lwLmNvdW50cnkudG9Mb3dlckNhc2UoKSArICdcIj48L2E+ICcpO1xuXG4gICAgICAgIGxldCBjbGlQb3J0TGFiZWwgPSAoKGZsb3cuY2xpX3BvcnQgJiYgZmxvdy5jbGlfcG9ydCA+IDApID8gXCI6XCIrRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2NsaV9wb3J0JywgZmxvdy5jbGlfcG9ydCwgZmxvdy5jbGlfcG9ydCkgOiBcIlwiKTtcblxuICAgICAgICBsZXQgY2xpQmxhY2tsaXN0ZWQgPScnXG4gICAgICAgIGlmKGZsb3cuY2xpX2lwLmJsYWNrbGlzdGVkID09IHRydWUpIFxuICAgICAgICAgIGNsaUJsYWNrbGlzdGVkID0gXCIgPGkgY2xhc3M9XFwnZmFzIGZhLWJhbiBmYS1zbVxcJyB0aXRsZT1cXCdcIiArIGkxOG4oXCJob3N0c19zdGF0cy5ibGFja2xpc3RlZFwiKSArIFwiXFwnPjwvaT5cIlxuXG4gICAgICAgIGxldCBzcnZMYWJlbCA9IFwiXCJcbiAgICAgICAgaWYgKGZsb3cuc3J2X2lwLm5hbWUpIHtcbiAgICAgICAgICBsZXQgdGl0bGUgPSBcIlwiO1xuICAgICAgICAgIGlmKGZsb3cuc3J2X2lwLmxhYmVsX2xvbmcpIHRpdGxlID0gZmxvdy5zcnZfaXAudmFsdWUgKyBcIiBbXCIgKyBmbG93LnNydl9pcC5sYWJlbF9sb25nICsgXCJdXCI7XG4gICAgICAgICAgICBzcnZMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdzcnZfbmFtZScsIGZsb3cuc3J2X2lwLm5hbWUsIGZsb3cuc3J2X2lwLmxhYmVsLCB0aXRsZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgc3J2TGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnc3J2X2lwJywgZmxvdy5zcnZfaXAudmFsdWUsIGZsb3cuc3J2X2lwLmxhYmVsLCBmbG93LnNydl9pcC5sYWJlbF9sb25nKTtcbiAgICAgICAgbGV0IHNydlBvcnRMYWJlbCA9ICgoZmxvdy5jbGlfcG9ydCAmJiBmbG93LmNsaV9wb3J0ID4gMCkgPyBcIjpcIitEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3J2X3BvcnQnLCBmbG93LnNydl9wb3J0LCBmbG93LnNydl9wb3J0KSA6IFwiXCIpO1xuXG4gICAgICAgIGxldCBzcnZGbGFnTGFiZWw9ICcnXG5cbiAgICAgICAgaWYgKGZsb3cuc3J2X2lwLmNvdW50cnkgJiYgZmxvdy5zcnZfaXAuY291bnRyeSAhPT0gXCJuaWxcIilcbiAgICAgICAgICAgIHNydkZsYWdMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzcnZfY291bnRyeScsIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBmbG93LnNydl9pcC5jb3VudHJ5LnRvTG93ZXJDYXNlKCkgKyAnXCI+PC9hPiAnKTtcblxuICAgICAgICBsZXQgc3J2QmxhY2tsaXN0ZWQgPScnXG4gICAgICAgIGlmKGZsb3cuc3J2X2lwLmJsYWNrbGlzdGVkID09IHRydWUpIFxuICAgICAgICAgIHNydkJsYWNrbGlzdGVkID0gXCIgPGkgY2xhc3M9XFwnZmFzIGZhLWJhbiBmYS1zbVxcJyB0aXRsZT1cXCdcIiArIGkxOG4oXCJob3N0c19zdGF0cy5ibGFja2xpc3RlZFwiKSArIFwiXFwnPjwvaT5cIlxuICAgIFxuICAgICAgICBsZXQgY2xpSWNvbnMgPSBcIlwiO1xuICAgICAgICBsZXQgc3J2SWNvbnMgPSBcIlwiO1xuICAgICAgICBpZiAocm93LmNsaV9yb2xlKSB7XG4gICAgICAgICAgICBpZiAocm93LmNsaV9yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgICAgICAgY2xpSWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAnYXR0YWNrZXInLCAnPGkgY2xhc3M9XCJmYXMgZmEtc2t1bGxcIiB0aXRsZT1cIicrcm93LmNsaV9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LmNsaV9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgICAgICBlbHNlIGlmIChyb3cuY2xpX3JvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgICAgICAgY2xpSWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAndmljdGltJywgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cuY2xpX3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuY2xpX3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3cuc3J2X3JvbGUpIHtcbiAgICAgICAgICAgIGlmIChyb3cuc3J2X3JvbGUudmFsdWUgPT0gJ2F0dGFja2VyJylcbiAgICAgICAgICAgICAgICBzcnZJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICdhdHRhY2tlcicsICc8aSBjbGFzcz1cImZhcyBmYS1za3VsbFwiIHRpdGxlPVwiJytyb3cuc3J2X3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuc3J2X3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHJvdy5zcnZfcm9sZS52YWx1ZSA9PSAndmljdGltJylcbiAgICAgICAgICAgICAgICBzcnZJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICd2aWN0aW0nLCAgJzxpIGNsYXNzPVwiZmFzIGZhLXNhZC10ZWFyXCIgdGl0bGU9XCInK3Jvdy5zcnZfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5zcnZfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAke2FjdGl2ZV9yZWZ9ICR7Y2xpTGFiZWx9JHtjbGlCbGFja2xpc3RlZH0ke2NsaUZsYWdMYWJlbH0ke2NsaVBvcnRMYWJlbH0gJHtjbGlJY29uc30gJHtmbG93LmNsaV9pcC5yZWZlcmVuY2V9IDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2hhbmdlLWFsdCBmYS1sZ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4gJHtzcnZMYWJlbH0ke3NydkJsYWNrbGlzdGVkfSR7c3J2RmxhZ0xhYmVsfSR7c3J2UG9ydExhYmVsfSAke3Nydkljb25zfSAke2Zsb3cuc3J2X2lwLnJlZmVyZW5jZX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXROYW1lRGVzY3JpcHRpb24ob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLm5hbWU7XG4gICAgICAgIGxldCBtc2cgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnYWxlcnRfaWQnLCBvYmoudmFsdWUsIG9iai5uYW1lLCBvYmouZnVsbG5hbWUsIG9iai5mdWxsbmFtZSk7XG5cblx0LyogREVDSURFRCBOT1QgVE8gU0hPVyBTSE9SVEVORUQgREVTQ1JJUFRJT05TIElOIFRIRSBBTEVSVCBDT0xVTU5TXG4gICAgICAgIGlmKG9iai5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICBjb25zdCBzdHJpcF90YWdzID0gZnVuY3Rpb24oaHRtbCkgeyBsZXQgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IHQuaW5uZXJIVE1MID0gaHRtbDsgcmV0dXJuIHQudGV4dENvbnRlbnQgfHwgdC5pbm5lclRleHQgfHwgXCJcIjsgfVxuICAgICAgICAgICBsZXQgZGVzYyA9IHN0cmlwX3RhZ3Mob2JqLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgaWYoZGVzYy5zdGFydHNXaXRoKG9iai5uYW1lKSkgZGVzYyA9IGRlc2MucmVwbGFjZShvYmoubmFtZSwgXCJcIik7XG4gICAgICAgICAgIGxldCBuYW1lX2xlbiA9IHN0cmlwX3RhZ3Mob2JqLm5hbWUpLmxlbmd0aDtcbiAgICAgICAgICAgbGV0IGRlc2NfbGVuID0gZGVzYy5sZW5ndGg7XG4gICAgICAgICAgIGxldCB0b3RhbF9sZW4gPSBuYW1lX2xlbiArIGRlc2NfbGVuO1xuICAgICAgICAgICBsZXQgdG9vbHRpcCA9IFwiXCJcblxuICAgICAgICAgICBsZXQgbGltaXQgPSAzMDsgLy8gZGVzY3JpcHRpb24gbGltaXRcbiAgICAgICAgICAgaWYgKHJvdy5mYW1pbHkgIT0gJ2Zsb3cnKSB7XG4gICAgICAgICAgICAgbGltaXQgPSA1MDsgLy8gc29tZSBmYW1pbGllcyBoYXZlIHJvb20gZm9yIGJpZ2dlciBkZXNjcmlwdGlvbnNcbiAgICAgICAgICAgfVxuXG4gICAgICAgICAgIGlmICh0b3RhbF9sZW4gPiBsaW1pdCkgeyAvLyBjdXQgYW5kIHNldCBhIHRvb2x0aXBcbiAgICAgICAgICAgICBpZiAobmFtZV9sZW4gPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgIGRlc2MgPSBcIlwiOyAvLyBuYW1lIGlzIGFscmVhZHkgdG9vIGxvbmcsIG5vIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgfSBlbHNlIHsgLy8gY3V0IHRoZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgZGVzYyA9IGRlc2Muc3Vic3RyKDAsIGxpbWl0IC0gb2JqLm5hbWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoL1xccyhbXlxcc10qKSQvLCAnJyk7IC8vIHdvcmQgYnJlYWtcbiAgICAgICAgICAgICAgIGRlc2MgPSBkZXNjICsgJyZoZWxsaXA7JzsgLy8gYWRkICcuLi4nXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHRvb2x0aXAgPSBzdHJpcF90YWdzKG9iai5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICBtc2cgPSBtc2cgKyAnOiA8c3BhbiB0aXRsZT1cIicgKyB0b29sdGlwICsgJ1wiPicgKyBkZXNjICsgJzwvc3Bhbj4nO1xuICAgICAgICB9XG5cdCovXG5cbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG5cbiAgICBzdGF0aWMgYXBwbHlDZWxsU3R5bGUoY2VsbCwgY2VsbERhdGEsIHJvd0RhdGEsIHJvd0luZGV4LCBjb2xJbmRleCkge1xuICAgICAgaWYgKGNlbGxEYXRhLmhpZ2hsaWdodCkge1xuICAgICAgICAgJChjZWxsKS5jc3MoXCJib3JkZXItbGVmdFwiLCBcIjVweCBzb2xpZCBcIitjZWxsRGF0YS5oaWdobGlnaHQpO1xuICAgICAgfVxuICAgfVxufVxuIiwiZnVuY3Rpb24gZShlLHQpe2NvbnN0IG49T2JqZWN0LmNyZWF0ZShudWxsKSxvPWUuc3BsaXQoXCIsXCIpO2ZvcihsZXQgcj0wO3I8by5sZW5ndGg7cisrKW5bb1tyXV09ITA7cmV0dXJuIHQ/ZT0+ISFuW2UudG9Mb3dlckNhc2UoKV06ZT0+ISFuW2VdfWNvbnN0IHQ9ZShcIkluZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludFwiKSxuPWUoXCJpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlcIik7ZnVuY3Rpb24gbyhlKXtyZXR1cm4hIWV8fFwiXCI9PT1lfWZ1bmN0aW9uIHIoZSl7aWYoRShlKSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dLHM9UChvKT9sKG8pOnIobyk7aWYocylmb3IoY29uc3QgZSBpbiBzKXRbZV09c1tlXX1yZXR1cm4gdH1yZXR1cm4gUChlKXx8TShlKT9lOnZvaWQgMH1jb25zdCBzPS87KD8hW14oXSpcXCkpL2csaT0vOiguKykvO2Z1bmN0aW9uIGwoZSl7Y29uc3QgdD17fTtyZXR1cm4gZS5zcGxpdChzKS5mb3JFYWNoKChlPT57aWYoZSl7Y29uc3Qgbj1lLnNwbGl0KGkpO24ubGVuZ3RoPjEmJih0W25bMF0udHJpbSgpXT1uWzFdLnRyaW0oKSl9fSkpLHR9ZnVuY3Rpb24gYyhlKXtsZXQgdD1cIlwiO2lmKFAoZSkpdD1lO2Vsc2UgaWYoRShlKSlmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1jKGVbbl0pO28mJih0Kz1vK1wiIFwiKX1lbHNlIGlmKE0oZSkpZm9yKGNvbnN0IG4gaW4gZSllW25dJiYodCs9bitcIiBcIik7cmV0dXJuIHQudHJpbSgpfWZ1bmN0aW9uIGEoZSl7aWYoIWUpcmV0dXJuIG51bGw7bGV0e2NsYXNzOnQsc3R5bGU6bn09ZTtyZXR1cm4gdCYmIVAodCkmJihlLmNsYXNzPWModCkpLG4mJihlLnN0eWxlPXIobikpLGV9Y29uc3QgdT1lKFwiaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiKSxwPWUoXCJzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlcixmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLGZlRGlzdGFuY2VMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLGZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlcixmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3XCIpLGY9ZShcImFyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyXCIpO2Z1bmN0aW9uIGQoZSx0KXtpZihlPT09dClyZXR1cm4hMDtsZXQgbj1SKGUpLG89Uih0KTtpZihufHxvKXJldHVybiEoIW58fCFvKSYmZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTtpZihuPUEoZSksbz1BKHQpLG58fG8pcmV0dXJuIGU9PT10O2lmKG49RShlKSxvPUUodCksbnx8bylyZXR1cm4hKCFufHwhbykmJmZ1bmN0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtsZXQgbj0hMDtmb3IobGV0IG89MDtuJiZvPGUubGVuZ3RoO28rKyluPWQoZVtvXSx0W29dKTtyZXR1cm4gbn0oZSx0KTtpZihuPU0oZSksbz1NKHQpLG58fG8pe2lmKCFufHwhbylyZXR1cm4hMTtpZihPYmplY3Qua2V5cyhlKS5sZW5ndGghPT1PYmplY3Qua2V5cyh0KS5sZW5ndGgpcmV0dXJuITE7Zm9yKGNvbnN0IG4gaW4gZSl7Y29uc3Qgbz1lLmhhc093blByb3BlcnR5KG4pLHI9dC5oYXNPd25Qcm9wZXJ0eShuKTtpZihvJiYhcnx8IW8mJnJ8fCFkKGVbbl0sdFtuXSkpcmV0dXJuITF9fXJldHVybiBTdHJpbmcoZSk9PT1TdHJpbmcodCl9ZnVuY3Rpb24gaChlLHQpe3JldHVybiBlLmZpbmRJbmRleCgoZT0+ZChlLHQpKSl9Y29uc3QgbT1lPT5QKGUpP2U6bnVsbD09ZT9cIlwiOkUoZSl8fE0oZSkmJihlLnRvU3RyaW5nPT09SXx8IUYoZS50b1N0cmluZykpP0pTT04uc3RyaW5naWZ5KGUsZywyKTpTdHJpbmcoZSksZz0oZSx0KT0+dCYmdC5fX3ZfaXNSZWY/ZyhlLHQudmFsdWUpOiQodCk/e1tgTWFwKCR7dC5zaXplfSlgXTpbLi4udC5lbnRyaWVzKCldLnJlZHVjZSgoKGUsW3Qsbl0pPT4oZVtgJHt0fSA9PmBdPW4sZSkpLHt9KX06Tyh0KT97W2BTZXQoJHt0LnNpemV9KWBdOlsuLi50LnZhbHVlcygpXX06IU0odCl8fEUodCl8fEwodCk/dDpTdHJpbmcodCksdj17fSx5PVtdLF89KCk9Pnt9LGI9KCk9PiExLFM9L15vblteYS16XS8seD1lPT5TLnRlc3QoZSksQz1lPT5lLnN0YXJ0c1dpdGgoXCJvblVwZGF0ZTpcIiksdz1PYmplY3QuYXNzaWduLGs9KGUsdCk9Pntjb25zdCBuPWUuaW5kZXhPZih0KTtuPi0xJiZlLnNwbGljZShuLDEpfSxUPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTj0oZSx0KT0+VC5jYWxsKGUsdCksRT1BcnJheS5pc0FycmF5LCQ9ZT0+XCJbb2JqZWN0IE1hcF1cIj09PUIoZSksTz1lPT5cIltvYmplY3QgU2V0XVwiPT09QihlKSxSPWU9PlwiW29iamVjdCBEYXRlXVwiPT09QihlKSxGPWU9PlwiZnVuY3Rpb25cIj09dHlwZW9mIGUsUD1lPT5cInN0cmluZ1wiPT10eXBlb2YgZSxBPWU9Plwic3ltYm9sXCI9PXR5cGVvZiBlLE09ZT0+bnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlLFY9ZT0+TShlKSYmRihlLnRoZW4pJiZGKGUuY2F0Y2gpLEk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxCPWU9PkkuY2FsbChlKSxMPWU9PlwiW29iamVjdCBPYmplY3RdXCI9PT1CKGUpLGo9ZT0+UChlKSYmXCJOYU5cIiE9PWUmJlwiLVwiIT09ZVswXSYmXCJcIitwYXJzZUludChlLDEwKT09PWUsVT1lKFwiLGtleSxyZWYscmVmX2ZvcixyZWZfa2V5LG9uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCxvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLG9uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWRcIiksRD1lKFwiYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQsbWVtb1wiKSxIPWU9Pntjb25zdCB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIG49PnRbbl18fCh0W25dPWUobikpfSxXPS8tKFxcdykvZyx6PUgoKGU9PmUucmVwbGFjZShXLCgoZSx0KT0+dD90LnRvVXBwZXJDYXNlKCk6XCJcIikpKSksSz0vXFxCKFtBLVpdKS9nLEc9SCgoZT0+ZS5yZXBsYWNlKEssXCItJDFcIikudG9Mb3dlckNhc2UoKSkpLHE9SCgoZT0+ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKSksSj1IKChlPT5lP2BvbiR7cShlKX1gOlwiXCIpKSxZPShlLHQpPT4hT2JqZWN0LmlzKGUsdCksWj0oZSx0KT0+e2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKWVbbl0odCl9LFE9KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOm59KX0sWD1lPT57Y29uc3QgdD1wYXJzZUZsb2F0KGUpO3JldHVybiBpc05hTih0KT9lOnR9O2xldCBlZTtsZXQgdGU7Y2xhc3MgbmV7Y29uc3RydWN0b3IoZT0hMSl7dGhpcy5hY3RpdmU9ITAsdGhpcy5lZmZlY3RzPVtdLHRoaXMuY2xlYW51cHM9W10sIWUmJnRlJiYodGhpcy5wYXJlbnQ9dGUsdGhpcy5pbmRleD0odGUuc2NvcGVzfHwodGUuc2NvcGVzPVtdKSkucHVzaCh0aGlzKS0xKX1ydW4oZSl7aWYodGhpcy5hY3RpdmUpe2NvbnN0IHQ9dGU7dHJ5e3JldHVybiB0ZT10aGlzLGUoKX1maW5hbGx5e3RlPXR9fX1vbigpe3RlPXRoaXN9b2ZmKCl7dGU9dGhpcy5wYXJlbnR9c3RvcChlKXtpZih0aGlzLmFjdGl2ZSl7bGV0IHQsbjtmb3IodD0wLG49dGhpcy5lZmZlY3RzLmxlbmd0aDt0PG47dCsrKXRoaXMuZWZmZWN0c1t0XS5zdG9wKCk7Zm9yKHQ9MCxuPXRoaXMuY2xlYW51cHMubGVuZ3RoO3Q8bjt0KyspdGhpcy5jbGVhbnVwc1t0XSgpO2lmKHRoaXMuc2NvcGVzKWZvcih0PTAsbj10aGlzLnNjb3Blcy5sZW5ndGg7dDxuO3QrKyl0aGlzLnNjb3Blc1t0XS5zdG9wKCEwKTtpZih0aGlzLnBhcmVudCYmIWUpe2NvbnN0IGU9dGhpcy5wYXJlbnQuc2NvcGVzLnBvcCgpO2UmJmUhPT10aGlzJiYodGhpcy5wYXJlbnQuc2NvcGVzW3RoaXMuaW5kZXhdPWUsZS5pbmRleD10aGlzLmluZGV4KX10aGlzLmFjdGl2ZT0hMX19fWZ1bmN0aW9uIG9lKGUpe3JldHVybiBuZXcgbmUoZSl9ZnVuY3Rpb24gcmUoZSx0PXRlKXt0JiZ0LmFjdGl2ZSYmdC5lZmZlY3RzLnB1c2goZSl9ZnVuY3Rpb24gc2UoKXtyZXR1cm4gdGV9ZnVuY3Rpb24gaWUoZSl7dGUmJnRlLmNsZWFudXBzLnB1c2goZSl9Y29uc3QgbGU9ZT0+e2NvbnN0IHQ9bmV3IFNldChlKTtyZXR1cm4gdC53PTAsdC5uPTAsdH0sY2U9ZT0+KGUudyZmZSk+MCxhZT1lPT4oZS5uJmZlKT4wLHVlPW5ldyBXZWFrTWFwO2xldCBwZT0wLGZlPTE7bGV0IGRlO2NvbnN0IGhlPVN5bWJvbChcIlwiKSxtZT1TeW1ib2woXCJcIik7Y2xhc3MgZ2V7Y29uc3RydWN0b3IoZSx0PW51bGwsbil7dGhpcy5mbj1lLHRoaXMuc2NoZWR1bGVyPXQsdGhpcy5hY3RpdmU9ITAsdGhpcy5kZXBzPVtdLHRoaXMucGFyZW50PXZvaWQgMCxyZSh0aGlzLG4pfXJ1bigpe2lmKCF0aGlzLmFjdGl2ZSlyZXR1cm4gdGhpcy5mbigpO2xldCBlPWRlLHQ9YmU7Zm9yKDtlOyl7aWYoZT09PXRoaXMpcmV0dXJuO2U9ZS5wYXJlbnR9dHJ5e3JldHVybiB0aGlzLnBhcmVudD1kZSxkZT10aGlzLGJlPSEwLGZlPTE8PCsrcGUscGU8PTMwPygoe2RlcHM6ZX0pPT57aWYoZS5sZW5ndGgpZm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspZVt0XS53fD1mZX0pKHRoaXMpOnZlKHRoaXMpLHRoaXMuZm4oKX1maW5hbGx5e3BlPD0zMCYmKGU9Pntjb25zdHtkZXBzOnR9PWU7aWYodC5sZW5ndGgpe2xldCBuPTA7Zm9yKGxldCBvPTA7bzx0Lmxlbmd0aDtvKyspe2NvbnN0IHI9dFtvXTtjZShyKSYmIWFlKHIpP3IuZGVsZXRlKGUpOnRbbisrXT1yLHIudyY9fmZlLHIubiY9fmZlfXQubGVuZ3RoPW59fSkodGhpcyksZmU9MTw8LS1wZSxkZT10aGlzLnBhcmVudCxiZT10LHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLmRlZmVyU3RvcCYmdGhpcy5zdG9wKCl9fXN0b3AoKXtkZT09PXRoaXM/dGhpcy5kZWZlclN0b3A9ITA6dGhpcy5hY3RpdmUmJih2ZSh0aGlzKSx0aGlzLm9uU3RvcCYmdGhpcy5vblN0b3AoKSx0aGlzLmFjdGl2ZT0hMSl9fWZ1bmN0aW9uIHZlKGUpe2NvbnN0e2RlcHM6dH09ZTtpZih0Lmxlbmd0aCl7Zm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspdFtuXS5kZWxldGUoZSk7dC5sZW5ndGg9MH19ZnVuY3Rpb24geWUoZSx0KXtlLmVmZmVjdCYmKGU9ZS5lZmZlY3QuZm4pO2NvbnN0IG49bmV3IGdlKGUpO3QmJih3KG4sdCksdC5zY29wZSYmcmUobix0LnNjb3BlKSksdCYmdC5sYXp5fHxuLnJ1bigpO2NvbnN0IG89bi5ydW4uYmluZChuKTtyZXR1cm4gby5lZmZlY3Q9bixvfWZ1bmN0aW9uIF9lKGUpe2UuZWZmZWN0LnN0b3AoKX1sZXQgYmU9ITA7Y29uc3QgU2U9W107ZnVuY3Rpb24geGUoKXtTZS5wdXNoKGJlKSxiZT0hMX1mdW5jdGlvbiBDZSgpe2NvbnN0IGU9U2UucG9wKCk7YmU9dm9pZCAwPT09ZXx8ZX1mdW5jdGlvbiB3ZShlLHQsbil7aWYoYmUmJmRlKXtsZXQgdD11ZS5nZXQoZSk7dHx8dWUuc2V0KGUsdD1uZXcgTWFwKTtsZXQgbz10LmdldChuKTtvfHx0LnNldChuLG89bGUoKSksa2Uobyl9fWZ1bmN0aW9uIGtlKGUsdCl7bGV0IG49ITE7cGU8PTMwP2FlKGUpfHwoZS5ufD1mZSxuPSFjZShlKSk6bj0hZS5oYXMoZGUpLG4mJihlLmFkZChkZSksZGUuZGVwcy5wdXNoKGUpKX1mdW5jdGlvbiBUZShlLHQsbixvLHIscyl7Y29uc3QgaT11ZS5nZXQoZSk7aWYoIWkpcmV0dXJuO2xldCBsPVtdO2lmKFwiY2xlYXJcIj09PXQpbD1bLi4uaS52YWx1ZXMoKV07ZWxzZSBpZihcImxlbmd0aFwiPT09biYmRShlKSlpLmZvckVhY2goKChlLHQpPT57KFwibGVuZ3RoXCI9PT10fHx0Pj1vKSYmbC5wdXNoKGUpfSkpO2Vsc2Ugc3dpdGNoKHZvaWQgMCE9PW4mJmwucHVzaChpLmdldChuKSksdCl7Y2FzZVwiYWRkXCI6RShlKT9qKG4pJiZsLnB1c2goaS5nZXQoXCJsZW5ndGhcIikpOihsLnB1c2goaS5nZXQoaGUpKSwkKGUpJiZsLnB1c2goaS5nZXQobWUpKSk7YnJlYWs7Y2FzZVwiZGVsZXRlXCI6RShlKXx8KGwucHVzaChpLmdldChoZSkpLCQoZSkmJmwucHVzaChpLmdldChtZSkpKTticmVhaztjYXNlXCJzZXRcIjokKGUpJiZsLnB1c2goaS5nZXQoaGUpKX1pZigxPT09bC5sZW5ndGgpbFswXSYmTmUobFswXSk7ZWxzZXtjb25zdCBlPVtdO2Zvcihjb25zdCB0IG9mIGwpdCYmZS5wdXNoKC4uLnQpO05lKGxlKGUpKX19ZnVuY3Rpb24gTmUoZSx0KXtjb25zdCBuPUUoZSk/ZTpbLi4uZV07Zm9yKGNvbnN0IG8gb2YgbilvLmNvbXB1dGVkJiZFZShvKTtmb3IoY29uc3QgbyBvZiBuKW8uY29tcHV0ZWR8fEVlKG8pfWZ1bmN0aW9uIEVlKGUsdCl7KGUhPT1kZXx8ZS5hbGxvd1JlY3Vyc2UpJiYoZS5zY2hlZHVsZXI/ZS5zY2hlZHVsZXIoKTplLnJ1bigpKX1jb25zdCAkZT1lKFwiX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlXCIpLE9lPW5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKS5maWx0ZXIoKGU9PlwiYXJndW1lbnRzXCIhPT1lJiZcImNhbGxlclwiIT09ZSkpLm1hcCgoZT0+U3ltYm9sW2VdKSkuZmlsdGVyKEEpKSxSZT1JZSgpLEZlPUllKCExLCEwKSxQZT1JZSghMCksQWU9SWUoITAsITApLE1lPVZlKCk7ZnVuY3Rpb24gVmUoKXtjb25zdCBlPXt9O3JldHVybltcImluY2x1ZGVzXCIsXCJpbmRleE9mXCIsXCJsYXN0SW5kZXhPZlwiXS5mb3JFYWNoKCh0PT57ZVt0XT1mdW5jdGlvbiguLi5lKXtjb25zdCBuPWt0KHRoaXMpO2ZvcihsZXQgdD0wLHI9dGhpcy5sZW5ndGg7dDxyO3QrKyl3ZShuLDAsdCtcIlwiKTtjb25zdCBvPW5bdF0oLi4uZSk7cmV0dXJuLTE9PT1vfHwhMT09PW8/blt0XSguLi5lLm1hcChrdCkpOm99fSkpLFtcInB1c2hcIixcInBvcFwiLFwic2hpZnRcIixcInVuc2hpZnRcIixcInNwbGljZVwiXS5mb3JFYWNoKCh0PT57ZVt0XT1mdW5jdGlvbiguLi5lKXt4ZSgpO2NvbnN0IG49a3QodGhpcylbdF0uYXBwbHkodGhpcyxlKTtyZXR1cm4gQ2UoKSxufX0pKSxlfWZ1bmN0aW9uIEllKGU9ITEsdD0hMSl7cmV0dXJuIGZ1bmN0aW9uKG4sbyxyKXtpZihcIl9fdl9pc1JlYWN0aXZlXCI9PT1vKXJldHVybiFlO2lmKFwiX192X2lzUmVhZG9ubHlcIj09PW8pcmV0dXJuIGU7aWYoXCJfX3ZfaXNTaGFsbG93XCI9PT1vKXJldHVybiB0O2lmKFwiX192X3Jhd1wiPT09byYmcj09PShlP3Q/aHQ6ZHQ6dD9mdDpwdCkuZ2V0KG4pKXJldHVybiBuO2NvbnN0IHM9RShuKTtpZighZSYmcyYmTihNZSxvKSlyZXR1cm4gUmVmbGVjdC5nZXQoTWUsbyxyKTtjb25zdCBpPVJlZmxlY3QuZ2V0KG4sbyxyKTtyZXR1cm4oQShvKT9PZS5oYXMobyk6JGUobykpP2k6KGV8fHdlKG4sMCxvKSx0P2k6UnQoaSk/cyYmaihvKT9pOmkudmFsdWU6TShpKT9lP3l0KGkpOmd0KGkpOmkpfX1mdW5jdGlvbiBCZShlPSExKXtyZXR1cm4gZnVuY3Rpb24odCxuLG8scil7bGV0IHM9dFtuXTtpZih4dChzKSYmUnQocykmJiFSdChvKSlyZXR1cm4hMTtpZighZSYmIXh0KG8pJiYoQ3Qobyl8fChvPWt0KG8pLHM9a3QocykpLCFFKHQpJiZSdChzKSYmIVJ0KG8pKSlyZXR1cm4gcy52YWx1ZT1vLCEwO2NvbnN0IGk9RSh0KSYmaihuKT9OdW1iZXIobik8dC5sZW5ndGg6Tih0LG4pLGw9UmVmbGVjdC5zZXQodCxuLG8scik7cmV0dXJuIHQ9PT1rdChyKSYmKGk/WShvLHMpJiZUZSh0LFwic2V0XCIsbixvKTpUZSh0LFwiYWRkXCIsbixvKSksbH19Y29uc3QgTGU9e2dldDpSZSxzZXQ6QmUoKSxkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbihlLHQpe2NvbnN0IG49TihlLHQpLG89UmVmbGVjdC5kZWxldGVQcm9wZXJ0eShlLHQpO3JldHVybiBvJiZuJiZUZShlLFwiZGVsZXRlXCIsdCx2b2lkIDApLG99LGhhczpmdW5jdGlvbihlLHQpe2NvbnN0IG49UmVmbGVjdC5oYXMoZSx0KTtyZXR1cm4gQSh0KSYmT2UuaGFzKHQpfHx3ZShlLDAsdCksbn0sb3duS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gd2UoZSwwLEUoZSk/XCJsZW5ndGhcIjpoZSksUmVmbGVjdC5vd25LZXlzKGUpfX0samU9e2dldDpQZSxzZXQ6KGUsdCk9PiEwLGRlbGV0ZVByb3BlcnR5OihlLHQpPT4hMH0sVWU9dyh7fSxMZSx7Z2V0OkZlLHNldDpCZSghMCl9KSxEZT13KHt9LGplLHtnZXQ6QWV9KSxIZT1lPT5lLFdlPWU9PlJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoZSk7ZnVuY3Rpb24gemUoZSx0LG49ITEsbz0hMSl7Y29uc3Qgcj1rdChlPWUuX192X3Jhdykscz1rdCh0KTtufHwodCE9PXMmJndlKHIsMCx0KSx3ZShyLDAscykpO2NvbnN0e2hhczppfT1XZShyKSxsPW8/SGU6bj9FdDpOdDtyZXR1cm4gaS5jYWxsKHIsdCk/bChlLmdldCh0KSk6aS5jYWxsKHIscyk/bChlLmdldChzKSk6dm9pZChlIT09ciYmZS5nZXQodCkpfWZ1bmN0aW9uIEtlKGUsdD0hMSl7Y29uc3Qgbj10aGlzLl9fdl9yYXcsbz1rdChuKSxyPWt0KGUpO3JldHVybiB0fHwoZSE9PXImJndlKG8sMCxlKSx3ZShvLDAscikpLGU9PT1yP24uaGFzKGUpOm4uaGFzKGUpfHxuLmhhcyhyKX1mdW5jdGlvbiBHZShlLHQ9ITEpe3JldHVybiBlPWUuX192X3JhdywhdCYmd2Uoa3QoZSksMCxoZSksUmVmbGVjdC5nZXQoZSxcInNpemVcIixlKX1mdW5jdGlvbiBxZShlKXtlPWt0KGUpO2NvbnN0IHQ9a3QodGhpcyk7cmV0dXJuIFdlKHQpLmhhcy5jYWxsKHQsZSl8fCh0LmFkZChlKSxUZSh0LFwiYWRkXCIsZSxlKSksdGhpc31mdW5jdGlvbiBKZShlLHQpe3Q9a3QodCk7Y29uc3Qgbj1rdCh0aGlzKSx7aGFzOm8sZ2V0OnJ9PVdlKG4pO2xldCBzPW8uY2FsbChuLGUpO3N8fChlPWt0KGUpLHM9by5jYWxsKG4sZSkpO2NvbnN0IGk9ci5jYWxsKG4sZSk7cmV0dXJuIG4uc2V0KGUsdCkscz9ZKHQsaSkmJlRlKG4sXCJzZXRcIixlLHQpOlRlKG4sXCJhZGRcIixlLHQpLHRoaXN9ZnVuY3Rpb24gWWUoZSl7Y29uc3QgdD1rdCh0aGlzKSx7aGFzOm4sZ2V0Om99PVdlKHQpO2xldCByPW4uY2FsbCh0LGUpO3J8fChlPWt0KGUpLHI9bi5jYWxsKHQsZSkpLG8mJm8uY2FsbCh0LGUpO2NvbnN0IHM9dC5kZWxldGUoZSk7cmV0dXJuIHImJlRlKHQsXCJkZWxldGVcIixlLHZvaWQgMCksc31mdW5jdGlvbiBaZSgpe2NvbnN0IGU9a3QodGhpcyksdD0wIT09ZS5zaXplLG49ZS5jbGVhcigpO3JldHVybiB0JiZUZShlLFwiY2xlYXJcIix2b2lkIDAsdm9pZCAwKSxufWZ1bmN0aW9uIFFlKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4sbyl7Y29uc3Qgcj10aGlzLHM9ci5fX3ZfcmF3LGk9a3QocyksbD10P0hlOmU/RXQ6TnQ7cmV0dXJuIWUmJndlKGksMCxoZSkscy5mb3JFYWNoKCgoZSx0KT0+bi5jYWxsKG8sbChlKSxsKHQpLHIpKSl9fWZ1bmN0aW9uIFhlKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24oLi4ubyl7Y29uc3Qgcj10aGlzLl9fdl9yYXcscz1rdChyKSxpPSQocyksbD1cImVudHJpZXNcIj09PWV8fGU9PT1TeW1ib2wuaXRlcmF0b3ImJmksYz1cImtleXNcIj09PWUmJmksYT1yW2VdKC4uLm8pLHU9bj9IZTp0P0V0Ok50O3JldHVybiF0JiZ3ZShzLDAsYz9tZTpoZSkse25leHQoKXtjb25zdHt2YWx1ZTplLGRvbmU6dH09YS5uZXh0KCk7cmV0dXJuIHQ/e3ZhbHVlOmUsZG9uZTp0fTp7dmFsdWU6bD9bdShlWzBdKSx1KGVbMV0pXTp1KGUpLGRvbmU6dH19LFtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIHRoaXN9fX19ZnVuY3Rpb24gZXQoZSl7cmV0dXJuIGZ1bmN0aW9uKC4uLnQpe3JldHVyblwiZGVsZXRlXCIhPT1lJiZ0aGlzfX1mdW5jdGlvbiB0dCgpe2NvbnN0IGU9e2dldChlKXtyZXR1cm4gemUodGhpcyxlKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcyl9LGhhczpLZSxhZGQ6cWUsc2V0OkplLGRlbGV0ZTpZZSxjbGVhcjpaZSxmb3JFYWNoOlFlKCExLCExKX0sdD17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITEsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzKX0saGFzOktlLGFkZDpxZSxzZXQ6SmUsZGVsZXRlOlllLGNsZWFyOlplLGZvckVhY2g6UWUoITEsITApfSxuPXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSwhMCl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMsITApfSxoYXMoZSl7cmV0dXJuIEtlLmNhbGwodGhpcyxlLCEwKX0sYWRkOmV0KFwiYWRkXCIpLHNldDpldChcInNldFwiKSxkZWxldGU6ZXQoXCJkZWxldGVcIiksY2xlYXI6ZXQoXCJjbGVhclwiKSxmb3JFYWNoOlFlKCEwLCExKX0sbz17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITAsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzLCEwKX0saGFzKGUpe3JldHVybiBLZS5jYWxsKHRoaXMsZSwhMCl9LGFkZDpldChcImFkZFwiKSxzZXQ6ZXQoXCJzZXRcIiksZGVsZXRlOmV0KFwiZGVsZXRlXCIpLGNsZWFyOmV0KFwiY2xlYXJcIiksZm9yRWFjaDpRZSghMCwhMCl9O3JldHVybltcImtleXNcIixcInZhbHVlc1wiLFwiZW50cmllc1wiLFN5bWJvbC5pdGVyYXRvcl0uZm9yRWFjaCgocj0+e2Vbcl09WGUociwhMSwhMSksbltyXT1YZShyLCEwLCExKSx0W3JdPVhlKHIsITEsITApLG9bcl09WGUociwhMCwhMCl9KSksW2Usbix0LG9dfWNvbnN0W250LG90LHJ0LHN0XT10dCgpO2Z1bmN0aW9uIGl0KGUsdCl7Y29uc3Qgbj10P2U/c3Q6cnQ6ZT9vdDpudDtyZXR1cm4odCxvLHIpPT5cIl9fdl9pc1JlYWN0aXZlXCI9PT1vPyFlOlwiX192X2lzUmVhZG9ubHlcIj09PW8/ZTpcIl9fdl9yYXdcIj09PW8/dDpSZWZsZWN0LmdldChOKG4sbykmJm8gaW4gdD9uOnQsbyxyKX1jb25zdCBsdD17Z2V0Oml0KCExLCExKX0sY3Q9e2dldDppdCghMSwhMCl9LGF0PXtnZXQ6aXQoITAsITEpfSx1dD17Z2V0Oml0KCEwLCEwKX0scHQ9bmV3IFdlYWtNYXAsZnQ9bmV3IFdlYWtNYXAsZHQ9bmV3IFdlYWtNYXAsaHQ9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gbXQoZSl7cmV0dXJuIGUuX192X3NraXB8fCFPYmplY3QuaXNFeHRlbnNpYmxlKGUpPzA6ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcIk9iamVjdFwiOmNhc2VcIkFycmF5XCI6cmV0dXJuIDE7Y2FzZVwiTWFwXCI6Y2FzZVwiU2V0XCI6Y2FzZVwiV2Vha01hcFwiOmNhc2VcIldlYWtTZXRcIjpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX0oKGU9PkIoZSkuc2xpY2UoOCwtMSkpKGUpKX1mdW5jdGlvbiBndChlKXtyZXR1cm4geHQoZSk/ZTpidChlLCExLExlLGx0LHB0KX1mdW5jdGlvbiB2dChlKXtyZXR1cm4gYnQoZSwhMSxVZSxjdCxmdCl9ZnVuY3Rpb24geXQoZSl7cmV0dXJuIGJ0KGUsITAsamUsYXQsZHQpfWZ1bmN0aW9uIF90KGUpe3JldHVybiBidChlLCEwLERlLHV0LGh0KX1mdW5jdGlvbiBidChlLHQsbixvLHIpe2lmKCFNKGUpKXJldHVybiBlO2lmKGUuX192X3JhdyYmKCF0fHwhZS5fX3ZfaXNSZWFjdGl2ZSkpcmV0dXJuIGU7Y29uc3Qgcz1yLmdldChlKTtpZihzKXJldHVybiBzO2NvbnN0IGk9bXQoZSk7aWYoMD09PWkpcmV0dXJuIGU7Y29uc3QgbD1uZXcgUHJveHkoZSwyPT09aT9vOm4pO3JldHVybiByLnNldChlLGwpLGx9ZnVuY3Rpb24gU3QoZSl7cmV0dXJuIHh0KGUpP1N0KGUuX192X3Jhdyk6ISghZXx8IWUuX192X2lzUmVhY3RpdmUpfWZ1bmN0aW9uIHh0KGUpe3JldHVybiEoIWV8fCFlLl9fdl9pc1JlYWRvbmx5KX1mdW5jdGlvbiBDdChlKXtyZXR1cm4hKCFlfHwhZS5fX3ZfaXNTaGFsbG93KX1mdW5jdGlvbiB3dChlKXtyZXR1cm4gU3QoZSl8fHh0KGUpfWZ1bmN0aW9uIGt0KGUpe2NvbnN0IHQ9ZSYmZS5fX3ZfcmF3O3JldHVybiB0P2t0KHQpOmV9ZnVuY3Rpb24gVHQoZSl7cmV0dXJuIFEoZSxcIl9fdl9za2lwXCIsITApLGV9Y29uc3QgTnQ9ZT0+TShlKT9ndChlKTplLEV0PWU9Pk0oZSk/eXQoZSk6ZTtmdW5jdGlvbiAkdChlKXtiZSYmZGUmJmtlKChlPWt0KGUpKS5kZXB8fChlLmRlcD1sZSgpKSl9ZnVuY3Rpb24gT3QoZSx0KXsoZT1rdChlKSkuZGVwJiZOZShlLmRlcCl9ZnVuY3Rpb24gUnQoZSl7cmV0dXJuISghZXx8ITAhPT1lLl9fdl9pc1JlZil9ZnVuY3Rpb24gRnQoZSl7cmV0dXJuIEF0KGUsITEpfWZ1bmN0aW9uIFB0KGUpe3JldHVybiBBdChlLCEwKX1mdW5jdGlvbiBBdChlLHQpe3JldHVybiBSdChlKT9lOm5ldyBNdChlLHQpfWNsYXNzIE10e2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5fX3ZfaXNTaGFsbG93PXQsdGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwLHRoaXMuX3Jhd1ZhbHVlPXQ/ZTprdChlKSx0aGlzLl92YWx1ZT10P2U6TnQoZSl9Z2V0IHZhbHVlKCl7cmV0dXJuICR0KHRoaXMpLHRoaXMuX3ZhbHVlfXNldCB2YWx1ZShlKXtlPXRoaXMuX192X2lzU2hhbGxvdz9lOmt0KGUpLFkoZSx0aGlzLl9yYXdWYWx1ZSkmJih0aGlzLl9yYXdWYWx1ZT1lLHRoaXMuX3ZhbHVlPXRoaXMuX192X2lzU2hhbGxvdz9lOk50KGUpLE90KHRoaXMpKX19ZnVuY3Rpb24gVnQoZSl7T3QoZSl9ZnVuY3Rpb24gSXQoZSl7cmV0dXJuIFJ0KGUpP2UudmFsdWU6ZX1jb25zdCBCdD17Z2V0OihlLHQsbik9Pkl0KFJlZmxlY3QuZ2V0KGUsdCxuKSksc2V0OihlLHQsbixvKT0+e2NvbnN0IHI9ZVt0XTtyZXR1cm4gUnQocikmJiFSdChuKT8oci52YWx1ZT1uLCEwKTpSZWZsZWN0LnNldChlLHQsbixvKX19O2Z1bmN0aW9uIEx0KGUpe3JldHVybiBTdChlKT9lOm5ldyBQcm94eShlLEJ0KX1jbGFzcyBqdHtjb25zdHJ1Y3RvcihlKXt0aGlzLmRlcD12b2lkIDAsdGhpcy5fX3ZfaXNSZWY9ITA7Y29uc3R7Z2V0OnQsc2V0Om59PWUoKCgpPT4kdCh0aGlzKSksKCgpPT5PdCh0aGlzKSkpO3RoaXMuX2dldD10LHRoaXMuX3NldD1ufWdldCB2YWx1ZSgpe3JldHVybiB0aGlzLl9nZXQoKX1zZXQgdmFsdWUoZSl7dGhpcy5fc2V0KGUpfX1mdW5jdGlvbiBVdChlKXtyZXR1cm4gbmV3IGp0KGUpfWZ1bmN0aW9uIER0KGUpe2NvbnN0IHQ9RShlKT9uZXcgQXJyYXkoZS5sZW5ndGgpOnt9O2Zvcihjb25zdCBuIGluIGUpdFtuXT1XdChlLG4pO3JldHVybiB0fWNsYXNzIEh0e2NvbnN0cnVjdG9yKGUsdCxuKXt0aGlzLl9vYmplY3Q9ZSx0aGlzLl9rZXk9dCx0aGlzLl9kZWZhdWx0VmFsdWU9bix0aGlzLl9fdl9pc1JlZj0hMH1nZXQgdmFsdWUoKXtjb25zdCBlPXRoaXMuX29iamVjdFt0aGlzLl9rZXldO3JldHVybiB2b2lkIDA9PT1lP3RoaXMuX2RlZmF1bHRWYWx1ZTplfXNldCB2YWx1ZShlKXt0aGlzLl9vYmplY3RbdGhpcy5fa2V5XT1lfX1mdW5jdGlvbiBXdChlLHQsbil7Y29uc3Qgbz1lW3RdO3JldHVybiBSdChvKT9vOm5ldyBIdChlLHQsbil9Y2xhc3MgenR7Y29uc3RydWN0b3IoZSx0LG4sbyl7dGhpcy5fc2V0dGVyPXQsdGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwLHRoaXMuX2RpcnR5PSEwLHRoaXMuZWZmZWN0PW5ldyBnZShlLCgoKT0+e3RoaXMuX2RpcnR5fHwodGhpcy5fZGlydHk9ITAsT3QodGhpcykpfSkpLHRoaXMuZWZmZWN0LmNvbXB1dGVkPXRoaXMsdGhpcy5lZmZlY3QuYWN0aXZlPXRoaXMuX2NhY2hlYWJsZT0hbyx0aGlzLl9fdl9pc1JlYWRvbmx5PW59Z2V0IHZhbHVlKCl7Y29uc3QgZT1rdCh0aGlzKTtyZXR1cm4gJHQoZSksIWUuX2RpcnR5JiZlLl9jYWNoZWFibGV8fChlLl9kaXJ0eT0hMSxlLl92YWx1ZT1lLmVmZmVjdC5ydW4oKSksZS5fdmFsdWV9c2V0IHZhbHVlKGUpe3RoaXMuX3NldHRlcihlKX19Y29uc3QgS3Q9W107ZnVuY3Rpb24gR3QoZSwuLi50KXt4ZSgpO2NvbnN0IG49S3QubGVuZ3RoP0t0W0t0Lmxlbmd0aC0xXS5jb21wb25lbnQ6bnVsbCxvPW4mJm4uYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXIscj1mdW5jdGlvbigpe2xldCBlPUt0W0t0Lmxlbmd0aC0xXTtpZighZSlyZXR1cm5bXTtjb25zdCB0PVtdO2Zvcig7ZTspe2NvbnN0IG49dFswXTtuJiZuLnZub2RlPT09ZT9uLnJlY3Vyc2VDb3VudCsrOnQucHVzaCh7dm5vZGU6ZSxyZWN1cnNlQ291bnQ6MH0pO2NvbnN0IG89ZS5jb21wb25lbnQmJmUuY29tcG9uZW50LnBhcmVudDtlPW8mJm8udm5vZGV9cmV0dXJuIHR9KCk7aWYobylZdChvLG4sMTEsW2UrdC5qb2luKFwiXCIpLG4mJm4ucHJveHksci5tYXAoKCh7dm5vZGU6ZX0pPT5gYXQgPCR7THMobixlLnR5cGUpfT5gKSkuam9pbihcIlxcblwiKSxyXSk7ZWxzZXtjb25zdCBuPVtgW1Z1ZSB3YXJuXTogJHtlfWAsLi4udF07ci5sZW5ndGgmJm4ucHVzaChcIlxcblwiLC4uLmZ1bmN0aW9uKGUpe2NvbnN0IHQ9W107cmV0dXJuIGUuZm9yRWFjaCgoKGUsbik9Pnt0LnB1c2goLi4uMD09PW4/W106W1wiXFxuXCJdLC4uLmZ1bmN0aW9uKHt2bm9kZTplLHJlY3Vyc2VDb3VudDp0fSl7Y29uc3Qgbj10PjA/YC4uLiAoJHt0fSByZWN1cnNpdmUgY2FsbHMpYDpcIlwiLG89YCBhdCA8JHtMcyhlLmNvbXBvbmVudCxlLnR5cGUsISFlLmNvbXBvbmVudCYmbnVsbD09ZS5jb21wb25lbnQucGFyZW50KX1gLHI9XCI+XCIrbjtyZXR1cm4gZS5wcm9wcz9bbywuLi5xdChlLnByb3BzKSxyXTpbbytyXX0oZSkpfSkpLHR9KHIpKSxjb25zb2xlLndhcm4oLi4ubil9Q2UoKX1mdW5jdGlvbiBxdChlKXtjb25zdCB0PVtdLG49T2JqZWN0LmtleXMoZSk7cmV0dXJuIG4uc2xpY2UoMCwzKS5mb3JFYWNoKChuPT57dC5wdXNoKC4uLkp0KG4sZVtuXSkpfSkpLG4ubGVuZ3RoPjMmJnQucHVzaChcIiAuLi5cIiksdH1mdW5jdGlvbiBKdChlLHQsbil7cmV0dXJuIFAodCk/KHQ9SlNPTi5zdHJpbmdpZnkodCksbj90OltgJHtlfT0ke3R9YF0pOlwibnVtYmVyXCI9PXR5cGVvZiB0fHxcImJvb2xlYW5cIj09dHlwZW9mIHR8fG51bGw9PXQ/bj90OltgJHtlfT0ke3R9YF06UnQodCk/KHQ9SnQoZSxrdCh0LnZhbHVlKSwhMCksbj90OltgJHtlfT1SZWY8YCx0LFwiPlwiXSk6Rih0KT9bYCR7ZX09Zm4ke3QubmFtZT9gPCR7dC5uYW1lfT5gOlwiXCJ9YF06KHQ9a3QodCksbj90OltgJHtlfT1gLHRdKX1mdW5jdGlvbiBZdChlLHQsbixvKXtsZXQgcjt0cnl7cj1vP2UoLi4ubyk6ZSgpfWNhdGNoKHMpe1F0KHMsdCxuKX1yZXR1cm4gcn1mdW5jdGlvbiBadChlLHQsbixvKXtpZihGKGUpKXtjb25zdCByPVl0KGUsdCxuLG8pO3JldHVybiByJiZWKHIpJiZyLmNhdGNoKChlPT57UXQoZSx0LG4pfSkpLHJ9Y29uc3Qgcj1bXTtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKylyLnB1c2goWnQoZVtzXSx0LG4sbykpO3JldHVybiByfWZ1bmN0aW9uIFF0KGUsdCxuLG89ITApe2lmKHQpe2xldCBvPXQucGFyZW50O2NvbnN0IHI9dC5wcm94eSxzPW47Zm9yKDtvOyl7Y29uc3QgdD1vLmVjO2lmKHQpZm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoITE9PT10W25dKGUscixzKSlyZXR1cm47bz1vLnBhcmVudH1jb25zdCBpPXQuYXBwQ29udGV4dC5jb25maWcuZXJyb3JIYW5kbGVyO2lmKGkpcmV0dXJuIHZvaWQgWXQoaSxudWxsLDEwLFtlLHIsc10pfSFmdW5jdGlvbihlLHQsbixvPSEwKXtjb25zb2xlLmVycm9yKGUpfShlLDAsMCxvKX1sZXQgWHQ9ITEsZW49ITE7Y29uc3QgdG49W107bGV0IG5uPTA7Y29uc3Qgb249W107bGV0IHJuPW51bGwsc249MDtjb25zdCBsbj1bXTtsZXQgY249bnVsbCxhbj0wO2NvbnN0IHVuPVByb21pc2UucmVzb2x2ZSgpO2xldCBwbj1udWxsLGZuPW51bGw7ZnVuY3Rpb24gZG4oZSl7Y29uc3QgdD1wbnx8dW47cmV0dXJuIGU/dC50aGVuKHRoaXM/ZS5iaW5kKHRoaXMpOmUpOnR9ZnVuY3Rpb24gaG4oZSl7dG4ubGVuZ3RoJiZ0bi5pbmNsdWRlcyhlLFh0JiZlLmFsbG93UmVjdXJzZT9ubisxOm5uKXx8ZT09PWZufHwobnVsbD09ZS5pZD90bi5wdXNoKGUpOnRuLnNwbGljZShmdW5jdGlvbihlKXtsZXQgdD1ubisxLG49dG4ubGVuZ3RoO2Zvcig7dDxuOyl7Y29uc3Qgbz10K24+Pj4xO2JuKHRuW29dKTxlP3Q9bysxOm49b31yZXR1cm4gdH0oZS5pZCksMCxlKSxtbigpKX1mdW5jdGlvbiBtbigpe1h0fHxlbnx8KGVuPSEwLHBuPXVuLnRoZW4oU24pKX1mdW5jdGlvbiBnbihlLHQsbixvKXtFKGUpP24ucHVzaCguLi5lKTp0JiZ0LmluY2x1ZGVzKGUsZS5hbGxvd1JlY3Vyc2U/bysxOm8pfHxuLnB1c2goZSksbW4oKX1mdW5jdGlvbiB2bihlKXtnbihlLGNuLGxuLGFuKX1mdW5jdGlvbiB5bihlLHQ9bnVsbCl7aWYob24ubGVuZ3RoKXtmb3IoZm49dCxybj1bLi4ubmV3IFNldChvbildLG9uLmxlbmd0aD0wLHNuPTA7c248cm4ubGVuZ3RoO3NuKyspcm5bc25dKCk7cm49bnVsbCxzbj0wLGZuPW51bGwseW4oZSx0KX19ZnVuY3Rpb24gX24oZSl7aWYoeW4oKSxsbi5sZW5ndGgpe2NvbnN0IGU9Wy4uLm5ldyBTZXQobG4pXTtpZihsbi5sZW5ndGg9MCxjbilyZXR1cm4gdm9pZCBjbi5wdXNoKC4uLmUpO2Zvcihjbj1lLGNuLnNvcnQoKChlLHQpPT5ibihlKS1ibih0KSkpLGFuPTA7YW48Y24ubGVuZ3RoO2FuKyspY25bYW5dKCk7Y249bnVsbCxhbj0wfX1jb25zdCBibj1lPT5udWxsPT1lLmlkPzEvMDplLmlkO2Z1bmN0aW9uIFNuKGUpe2VuPSExLFh0PSEwLHluKGUpLHRuLnNvcnQoKChlLHQpPT5ibihlKS1ibih0KSkpO3RyeXtmb3Iobm49MDtubjx0bi5sZW5ndGg7bm4rKyl7Y29uc3QgZT10bltubl07ZSYmITEhPT1lLmFjdGl2ZSYmWXQoZSxudWxsLDE0KX19ZmluYWxseXtubj0wLHRuLmxlbmd0aD0wLF9uKCksWHQ9ITEscG49bnVsbCwodG4ubGVuZ3RofHxvbi5sZW5ndGh8fGxuLmxlbmd0aCkmJlNuKGUpfX1sZXQgeG4sQ249W107ZnVuY3Rpb24gd24oZSx0KXt2YXIgbixvO2lmKHhuPWUseG4peG4uZW5hYmxlZD0hMCxDbi5mb3JFYWNoKCgoe2V2ZW50OmUsYXJnczp0fSk9PnhuLmVtaXQoZSwuLi50KSkpLENuPVtdO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LkhUTUxFbGVtZW50JiYhKG51bGw9PT0obz1udWxsPT09KG49d2luZG93Lm5hdmlnYXRvcil8fHZvaWQgMD09PW4/dm9pZCAwOm4udXNlckFnZW50KXx8dm9pZCAwPT09bz92b2lkIDA6by5pbmNsdWRlcyhcImpzZG9tXCIpKSl7KHQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXz10Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX198fFtdKS5wdXNoKChlPT57d24oZSx0KX0pKSxzZXRUaW1lb3V0KCgoKT0+e3hufHwodC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fPW51bGwsQ249W10pfSksM2UzKX1lbHNlIENuPVtdfWZ1bmN0aW9uIGtuKGUsdCwuLi5uKXtpZihlLmlzVW5tb3VudGVkKXJldHVybjtjb25zdCBvPWUudm5vZGUucHJvcHN8fHY7bGV0IHI9bjtjb25zdCBzPXQuc3RhcnRzV2l0aChcInVwZGF0ZTpcIiksaT1zJiZ0LnNsaWNlKDcpO2lmKGkmJmkgaW4gbyl7Y29uc3QgZT1gJHtcIm1vZGVsVmFsdWVcIj09PWk/XCJtb2RlbFwiOml9TW9kaWZpZXJzYCx7bnVtYmVyOnQsdHJpbTpzfT1vW2VdfHx2O3MmJihyPW4ubWFwKChlPT5lLnRyaW0oKSkpKSx0JiYocj1uLm1hcChYKSl9bGV0IGwsYz1vW2w9Sih0KV18fG9bbD1KKHoodCkpXTshYyYmcyYmKGM9b1tsPUooRyh0KSldKSxjJiZadChjLGUsNixyKTtjb25zdCBhPW9bbCtcIk9uY2VcIl07aWYoYSl7aWYoZS5lbWl0dGVkKXtpZihlLmVtaXR0ZWRbbF0pcmV0dXJufWVsc2UgZS5lbWl0dGVkPXt9O2UuZW1pdHRlZFtsXT0hMCxadChhLGUsNixyKX19ZnVuY3Rpb24gVG4oZSx0LG49ITEpe2NvbnN0IG89dC5lbWl0c0NhY2hlLHI9by5nZXQoZSk7aWYodm9pZCAwIT09cilyZXR1cm4gcjtjb25zdCBzPWUuZW1pdHM7bGV0IGk9e30sbD0hMTtpZighRihlKSl7Y29uc3Qgbz1lPT57Y29uc3Qgbj1UbihlLHQsITApO24mJihsPSEwLHcoaSxuKSl9OyFuJiZ0Lm1peGlucy5sZW5ndGgmJnQubWl4aW5zLmZvckVhY2gobyksZS5leHRlbmRzJiZvKGUuZXh0ZW5kcyksZS5taXhpbnMmJmUubWl4aW5zLmZvckVhY2gobyl9cmV0dXJuIHN8fGw/KEUocyk/cy5mb3JFYWNoKChlPT5pW2VdPW51bGwpKTp3KGkscyksby5zZXQoZSxpKSxpKTooby5zZXQoZSxudWxsKSxudWxsKX1mdW5jdGlvbiBObihlLHQpe3JldHVybiEoIWV8fCF4KHQpKSYmKHQ9dC5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sXCJcIiksTihlLHRbMF0udG9Mb3dlckNhc2UoKSt0LnNsaWNlKDEpKXx8TihlLEcodCkpfHxOKGUsdCkpfWxldCBFbj1udWxsLCRuPW51bGw7ZnVuY3Rpb24gT24oZSl7Y29uc3QgdD1FbjtyZXR1cm4gRW49ZSwkbj1lJiZlLnR5cGUuX19zY29wZUlkfHxudWxsLHR9ZnVuY3Rpb24gUm4oZSl7JG49ZX1mdW5jdGlvbiBGbigpeyRuPW51bGx9Y29uc3QgUG49ZT0+QW47ZnVuY3Rpb24gQW4oZSx0PUVuLG4pe2lmKCF0KXJldHVybiBlO2lmKGUuX24pcmV0dXJuIGU7Y29uc3Qgbz0oLi4ubik9PntvLl9kJiZYcigtMSk7Y29uc3Qgcj1Pbih0KSxzPWUoLi4ubik7cmV0dXJuIE9uKHIpLG8uX2QmJlhyKDEpLHN9O3JldHVybiBvLl9uPSEwLG8uX2M9ITAsby5fZD0hMCxvfWZ1bmN0aW9uIE1uKGUpe2NvbnN0e3R5cGU6dCx2bm9kZTpuLHByb3h5Om8sd2l0aFByb3h5OnIscHJvcHM6cyxwcm9wc09wdGlvbnM6W2ldLHNsb3RzOmwsYXR0cnM6YyxlbWl0OmEscmVuZGVyOnUscmVuZGVyQ2FjaGU6cCxkYXRhOmYsc2V0dXBTdGF0ZTpkLGN0eDpoLGluaGVyaXRBdHRyczptfT1lO2xldCBnLHY7Y29uc3QgeT1PbihlKTt0cnl7aWYoNCZuLnNoYXBlRmxhZyl7Y29uc3QgZT1yfHxvO2c9Z3ModS5jYWxsKGUsZSxwLHMsZCxmLGgpKSx2PWN9ZWxzZXtjb25zdCBlPXQ7MCxnPWdzKGUocyxlLmxlbmd0aD4xP3thdHRyczpjLHNsb3RzOmwsZW1pdDphfTpudWxsKSksdj10LnByb3BzP2M6Vm4oYyl9fWNhdGNoKGIpe3FyLmxlbmd0aD0wLFF0KGIsZSwxKSxnPXVzKEtyKX1sZXQgXz1nO2lmKHYmJiExIT09bSl7Y29uc3QgZT1PYmplY3Qua2V5cyh2KSx7c2hhcGVGbGFnOnR9PV87ZS5sZW5ndGgmJjcmdCYmKGkmJmUuc29tZShDKSYmKHY9SW4odixpKSksXz1mcyhfLHYpKX1yZXR1cm4gbi5kaXJzJiYoXz1mcyhfKSxfLmRpcnM9Xy5kaXJzP18uZGlycy5jb25jYXQobi5kaXJzKTpuLmRpcnMpLG4udHJhbnNpdGlvbiYmKF8udHJhbnNpdGlvbj1uLnRyYW5zaXRpb24pLGc9XyxPbih5KSxnfWNvbnN0IFZuPWU9PntsZXQgdDtmb3IoY29uc3QgbiBpbiBlKShcImNsYXNzXCI9PT1ufHxcInN0eWxlXCI9PT1ufHx4KG4pKSYmKCh0fHwodD17fSkpW25dPWVbbl0pO3JldHVybiB0fSxJbj0oZSx0KT0+e2NvbnN0IG49e307Zm9yKGNvbnN0IG8gaW4gZSlDKG8pJiZvLnNsaWNlKDkpaW4gdHx8KG5bb109ZVtvXSk7cmV0dXJuIG59O2Z1bmN0aW9uIEJuKGUsdCxuKXtjb25zdCBvPU9iamVjdC5rZXlzKHQpO2lmKG8ubGVuZ3RoIT09T2JqZWN0LmtleXMoZSkubGVuZ3RoKXJldHVybiEwO2ZvcihsZXQgcj0wO3I8by5sZW5ndGg7cisrKXtjb25zdCBzPW9bcl07aWYodFtzXSE9PWVbc10mJiFObihuLHMpKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIExuKHt2bm9kZTplLHBhcmVudDp0fSxuKXtmb3IoO3QmJnQuc3ViVHJlZT09PWU7KShlPXQudm5vZGUpLmVsPW4sdD10LnBhcmVudH1jb25zdCBqbj1lPT5lLl9faXNTdXNwZW5zZSxVbj17bmFtZTpcIlN1c3BlbnNlXCIsX19pc1N1c3BlbnNlOiEwLHByb2Nlc3MoZSx0LG4sbyxyLHMsaSxsLGMsYSl7bnVsbD09ZT9mdW5jdGlvbihlLHQsbixvLHIscyxpLGwsYyl7Y29uc3R7cDphLG86e2NyZWF0ZUVsZW1lbnQ6dX19PWMscD11KFwiZGl2XCIpLGY9ZS5zdXNwZW5zZT1IbihlLHIsbyx0LHAsbixzLGksbCxjKTthKG51bGwsZi5wZW5kaW5nQnJhbmNoPWUuc3NDb250ZW50LHAsbnVsbCxvLGYscyxpKSxmLmRlcHM+MD8oRG4oZSxcIm9uUGVuZGluZ1wiKSxEbihlLFwib25GYWxsYmFja1wiKSxhKG51bGwsZS5zc0ZhbGxiYWNrLHQsbixvLG51bGwscyxpKSxLbihmLGUuc3NGYWxsYmFjaykpOmYucmVzb2x2ZSgpfSh0LG4sbyxyLHMsaSxsLGMsYSk6ZnVuY3Rpb24oZSx0LG4sbyxyLHMsaSxsLHtwOmMsdW06YSxvOntjcmVhdGVFbGVtZW50OnV9fSl7Y29uc3QgcD10LnN1c3BlbnNlPWUuc3VzcGVuc2U7cC52bm9kZT10LHQuZWw9ZS5lbDtjb25zdCBmPXQuc3NDb250ZW50LGQ9dC5zc0ZhbGxiYWNrLHthY3RpdmVCcmFuY2g6aCxwZW5kaW5nQnJhbmNoOm0saXNJbkZhbGxiYWNrOmcsaXNIeWRyYXRpbmc6dn09cDtpZihtKXAucGVuZGluZ0JyYW5jaD1mLHJzKGYsbSk/KGMobSxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTA/cC5yZXNvbHZlKCk6ZyYmKGMoaCxkLG4sbyxyLG51bGwscyxpLGwpLEtuKHAsZCkpKToocC5wZW5kaW5nSWQrKyx2PyhwLmlzSHlkcmF0aW5nPSExLHAuYWN0aXZlQnJhbmNoPW0pOmEobSxyLHApLHAuZGVwcz0wLHAuZWZmZWN0cy5sZW5ndGg9MCxwLmhpZGRlbkNvbnRhaW5lcj11KFwiZGl2XCIpLGc/KGMobnVsbCxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTA/cC5yZXNvbHZlKCk6KGMoaCxkLG4sbyxyLG51bGwscyxpLGwpLEtuKHAsZCkpKTpoJiZycyhmLGgpPyhjKGgsZixuLG8scixwLHMsaSxsKSxwLnJlc29sdmUoITApKTooYyhudWxsLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MCYmcC5yZXNvbHZlKCkpKTtlbHNlIGlmKGgmJnJzKGYsaCkpYyhoLGYsbixvLHIscCxzLGksbCksS24ocCxmKTtlbHNlIGlmKERuKHQsXCJvblBlbmRpbmdcIikscC5wZW5kaW5nQnJhbmNoPWYscC5wZW5kaW5nSWQrKyxjKG51bGwsZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wKXAucmVzb2x2ZSgpO2Vsc2V7Y29uc3R7dGltZW91dDplLHBlbmRpbmdJZDp0fT1wO2U+MD9zZXRUaW1lb3V0KCgoKT0+e3AucGVuZGluZ0lkPT09dCYmcC5mYWxsYmFjayhkKX0pLGUpOjA9PT1lJiZwLmZhbGxiYWNrKGQpfX0oZSx0LG4sbyxyLGksbCxjLGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGUsdCxuLG8scixzLGksbCxjKXtjb25zdCBhPXQuc3VzcGVuc2U9SG4odCxvLG4sZS5wYXJlbnROb2RlLGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbnVsbCxyLHMsaSxsLCEwKSx1PWMoZSxhLnBlbmRpbmdCcmFuY2g9dC5zc0NvbnRlbnQsbixhLHMsaSk7MD09PWEuZGVwcyYmYS5yZXNvbHZlKCk7cmV0dXJuIHV9LGNyZWF0ZTpIbixub3JtYWxpemU6ZnVuY3Rpb24oZSl7Y29uc3R7c2hhcGVGbGFnOnQsY2hpbGRyZW46bn09ZSxvPTMyJnQ7ZS5zc0NvbnRlbnQ9V24obz9uLmRlZmF1bHQ6biksZS5zc0ZhbGxiYWNrPW8/V24obi5mYWxsYmFjayk6dXMoS3IpfX07ZnVuY3Rpb24gRG4oZSx0KXtjb25zdCBuPWUucHJvcHMmJmUucHJvcHNbdF07RihuKSYmbigpfWZ1bmN0aW9uIEhuKGUsdCxuLG8scixzLGksbCxjLGEsdT0hMSl7Y29uc3R7cDpwLG06Zix1bTpkLG46aCxvOntwYXJlbnROb2RlOm0scmVtb3ZlOmd9fT1hLHY9WChlLnByb3BzJiZlLnByb3BzLnRpbWVvdXQpLHk9e3Zub2RlOmUscGFyZW50OnQscGFyZW50Q29tcG9uZW50Om4saXNTVkc6aSxjb250YWluZXI6byxoaWRkZW5Db250YWluZXI6cixhbmNob3I6cyxkZXBzOjAscGVuZGluZ0lkOjAsdGltZW91dDpcIm51bWJlclwiPT10eXBlb2Ygdj92Oi0xLGFjdGl2ZUJyYW5jaDpudWxsLHBlbmRpbmdCcmFuY2g6bnVsbCxpc0luRmFsbGJhY2s6ITAsaXNIeWRyYXRpbmc6dSxpc1VubW91bnRlZDohMSxlZmZlY3RzOltdLHJlc29sdmUoZT0hMSl7Y29uc3R7dm5vZGU6dCxhY3RpdmVCcmFuY2g6bixwZW5kaW5nQnJhbmNoOm8scGVuZGluZ0lkOnIsZWZmZWN0czpzLHBhcmVudENvbXBvbmVudDppLGNvbnRhaW5lcjpsfT15O2lmKHkuaXNIeWRyYXRpbmcpeS5pc0h5ZHJhdGluZz0hMTtlbHNlIGlmKCFlKXtjb25zdCBlPW4mJm8udHJhbnNpdGlvbiYmXCJvdXQtaW5cIj09PW8udHJhbnNpdGlvbi5tb2RlO2UmJihuLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZT0oKT0+e3I9PT15LnBlbmRpbmdJZCYmZihvLGwsdCwwKX0pO2xldHthbmNob3I6dH09eTtuJiYodD1oKG4pLGQobixpLHksITApKSxlfHxmKG8sbCx0LDApfUtuKHksbykseS5wZW5kaW5nQnJhbmNoPW51bGwseS5pc0luRmFsbGJhY2s9ITE7bGV0IGM9eS5wYXJlbnQsYT0hMTtmb3IoO2M7KXtpZihjLnBlbmRpbmdCcmFuY2gpe2MuZWZmZWN0cy5wdXNoKC4uLnMpLGE9ITA7YnJlYWt9Yz1jLnBhcmVudH1hfHx2bihzKSx5LmVmZmVjdHM9W10sRG4odCxcIm9uUmVzb2x2ZVwiKX0sZmFsbGJhY2soZSl7aWYoIXkucGVuZGluZ0JyYW5jaClyZXR1cm47Y29uc3R7dm5vZGU6dCxhY3RpdmVCcmFuY2g6bixwYXJlbnRDb21wb25lbnQ6byxjb250YWluZXI6cixpc1NWRzpzfT15O0RuKHQsXCJvbkZhbGxiYWNrXCIpO2NvbnN0IGk9aChuKSxhPSgpPT57eS5pc0luRmFsbGJhY2smJihwKG51bGwsZSxyLGksbyxudWxsLHMsbCxjKSxLbih5LGUpKX0sdT1lLnRyYW5zaXRpb24mJlwib3V0LWluXCI9PT1lLnRyYW5zaXRpb24ubW9kZTt1JiYobi50cmFuc2l0aW9uLmFmdGVyTGVhdmU9YSkseS5pc0luRmFsbGJhY2s9ITAsZChuLG8sbnVsbCwhMCksdXx8YSgpfSxtb3ZlKGUsdCxuKXt5LmFjdGl2ZUJyYW5jaCYmZih5LmFjdGl2ZUJyYW5jaCxlLHQsbikseS5jb250YWluZXI9ZX0sbmV4dDooKT0+eS5hY3RpdmVCcmFuY2gmJmgoeS5hY3RpdmVCcmFuY2gpLHJlZ2lzdGVyRGVwKGUsdCl7Y29uc3Qgbj0hIXkucGVuZGluZ0JyYW5jaDtuJiZ5LmRlcHMrKztjb25zdCBvPWUudm5vZGUuZWw7ZS5hc3luY0RlcC5jYXRjaCgodD0+e1F0KHQsZSwwKX0pKS50aGVuKChyPT57aWYoZS5pc1VubW91bnRlZHx8eS5pc1VubW91bnRlZHx8eS5wZW5kaW5nSWQhPT1lLnN1c3BlbnNlSWQpcmV0dXJuO2UuYXN5bmNSZXNvbHZlZD0hMDtjb25zdHt2bm9kZTpzfT1lO1JzKGUsciwhMSksbyYmKHMuZWw9byk7Y29uc3QgbD0hbyYmZS5zdWJUcmVlLmVsO3QoZSxzLG0ob3x8ZS5zdWJUcmVlLmVsKSxvP251bGw6aChlLnN1YlRyZWUpLHksaSxjKSxsJiZnKGwpLExuKGUscy5lbCksbiYmMD09LS15LmRlcHMmJnkucmVzb2x2ZSgpfSkpfSx1bm1vdW50KGUsdCl7eS5pc1VubW91bnRlZD0hMCx5LmFjdGl2ZUJyYW5jaCYmZCh5LmFjdGl2ZUJyYW5jaCxuLGUsdCkseS5wZW5kaW5nQnJhbmNoJiZkKHkucGVuZGluZ0JyYW5jaCxuLGUsdCl9fTtyZXR1cm4geX1mdW5jdGlvbiBXbihlKXtsZXQgdDtpZihGKGUpKXtjb25zdCBuPVFyJiZlLl9jO24mJihlLl9kPSExLFlyKCkpLGU9ZSgpLG4mJihlLl9kPSEwLHQ9SnIsWnIoKSl9aWYoRShlKSl7Y29uc3QgdD1mdW5jdGlvbihlKXtsZXQgdDtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dO2lmKCFvcyhvKSlyZXR1cm47aWYoby50eXBlIT09S3J8fFwidi1pZlwiPT09by5jaGlsZHJlbil7aWYodClyZXR1cm47dD1vfX1yZXR1cm4gdH0oZSk7ZT10fXJldHVybiBlPWdzKGUpLHQmJiFlLmR5bmFtaWNDaGlsZHJlbiYmKGUuZHluYW1pY0NoaWxkcmVuPXQuZmlsdGVyKCh0PT50IT09ZSkpKSxlfWZ1bmN0aW9uIHpuKGUsdCl7dCYmdC5wZW5kaW5nQnJhbmNoP0UoZSk/dC5lZmZlY3RzLnB1c2goLi4uZSk6dC5lZmZlY3RzLnB1c2goZSk6dm4oZSl9ZnVuY3Rpb24gS24oZSx0KXtlLmFjdGl2ZUJyYW5jaD10O2NvbnN0e3Zub2RlOm4scGFyZW50Q29tcG9uZW50Om99PWUscj1uLmVsPXQuZWw7byYmby5zdWJUcmVlPT09biYmKG8udm5vZGUuZWw9cixMbihvLHIpKX1mdW5jdGlvbiBHbihlLHQpe2lmKENzKXtsZXQgbj1Dcy5wcm92aWRlcztjb25zdCBvPUNzLnBhcmVudCYmQ3MucGFyZW50LnByb3ZpZGVzO289PT1uJiYobj1Dcy5wcm92aWRlcz1PYmplY3QuY3JlYXRlKG8pKSxuW2VdPXR9ZWxzZTt9ZnVuY3Rpb24gcW4oZSx0LG49ITEpe2NvbnN0IG89Q3N8fEVuO2lmKG8pe2NvbnN0IHI9bnVsbD09by5wYXJlbnQ/by52bm9kZS5hcHBDb250ZXh0JiZvLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXM6by5wYXJlbnQucHJvdmlkZXM7aWYociYmZSBpbiByKXJldHVybiByW2VdO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlyZXR1cm4gbiYmRih0KT90LmNhbGwoby5wcm94eSk6dH19ZnVuY3Rpb24gSm4oZSx0KXtyZXR1cm4gZW8oZSxudWxsLHQpfWZ1bmN0aW9uIFluKGUsdCl7cmV0dXJuIGVvKGUsbnVsbCx7Zmx1c2g6XCJwb3N0XCJ9KX1mdW5jdGlvbiBabihlLHQpe3JldHVybiBlbyhlLG51bGwse2ZsdXNoOlwic3luY1wifSl9Y29uc3QgUW49e307ZnVuY3Rpb24gWG4oZSx0LG4pe3JldHVybiBlbyhlLHQsbil9ZnVuY3Rpb24gZW8oZSx0LHtpbW1lZGlhdGU6bixkZWVwOm8sZmx1c2g6cn09dil7Y29uc3Qgcz1DcztsZXQgaSxsLGM9ITEsYT0hMTtpZihSdChlKT8oaT0oKT0+ZS52YWx1ZSxjPUN0KGUpKTpTdChlKT8oaT0oKT0+ZSxvPSEwKTpFKGUpPyhhPSEwLGM9ZS5zb21lKChlPT5TdChlKXx8Q3QoZSkpKSxpPSgpPT5lLm1hcCgoZT0+UnQoZSk/ZS52YWx1ZTpTdChlKT9vbyhlKTpGKGUpP1l0KGUscywyKTp2b2lkIDApKSk6aT1GKGUpP3Q/KCk9Pll0KGUscywyKTooKT0+e2lmKCFzfHwhcy5pc1VubW91bnRlZClyZXR1cm4gbCYmbCgpLFp0KGUscywzLFt1XSl9Ol8sdCYmbyl7Y29uc3QgZT1pO2k9KCk9Pm9vKGUoKSl9bGV0IHU9ZT0+e2w9aC5vblN0b3A9KCk9PntZdChlLHMsNCl9fSxwPWE/W106UW47Y29uc3QgZj0oKT0+e2lmKGguYWN0aXZlKWlmKHQpe2NvbnN0IGU9aC5ydW4oKTsob3x8Y3x8KGE/ZS5zb21lKCgoZSx0KT0+WShlLHBbdF0pKSk6WShlLHApKSkmJihsJiZsKCksWnQodCxzLDMsW2UscD09PVFuP3ZvaWQgMDpwLHVdKSxwPWUpfWVsc2UgaC5ydW4oKX07bGV0IGQ7Zi5hbGxvd1JlY3Vyc2U9ISF0LGQ9XCJzeW5jXCI9PT1yP2Y6XCJwb3N0XCI9PT1yPygpPT5QcihmLHMmJnMuc3VzcGVuc2UpOigpPT5mdW5jdGlvbihlKXtnbihlLHJuLG9uLHNuKX0oZik7Y29uc3QgaD1uZXcgZ2UoaSxkKTtyZXR1cm4gdD9uP2YoKTpwPWgucnVuKCk6XCJwb3N0XCI9PT1yP1ByKGgucnVuLmJpbmQoaCkscyYmcy5zdXNwZW5zZSk6aC5ydW4oKSwoKT0+e2guc3RvcCgpLHMmJnMuc2NvcGUmJmsocy5zY29wZS5lZmZlY3RzLGgpfX1mdW5jdGlvbiB0byhlLHQsbil7Y29uc3Qgbz10aGlzLnByb3h5LHI9UChlKT9lLmluY2x1ZGVzKFwiLlwiKT9ubyhvLGUpOigpPT5vW2VdOmUuYmluZChvLG8pO2xldCBzO0YodCk/cz10OihzPXQuaGFuZGxlcixuPXQpO2NvbnN0IGk9Q3M7a3ModGhpcyk7Y29uc3QgbD1lbyhyLHMuYmluZChvKSxuKTtyZXR1cm4gaT9rcyhpKTpUcygpLGx9ZnVuY3Rpb24gbm8oZSx0KXtjb25zdCBuPXQuc3BsaXQoXCIuXCIpO3JldHVybigpPT57bGV0IHQ9ZTtmb3IobGV0IGU9MDtlPG4ubGVuZ3RoJiZ0O2UrKyl0PXRbbltlXV07cmV0dXJuIHR9fWZ1bmN0aW9uIG9vKGUsdCl7aWYoIU0oZSl8fGUuX192X3NraXApcmV0dXJuIGU7aWYoKHQ9dHx8bmV3IFNldCkuaGFzKGUpKXJldHVybiBlO2lmKHQuYWRkKGUpLFJ0KGUpKW9vKGUudmFsdWUsdCk7ZWxzZSBpZihFKGUpKWZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKW9vKGVbbl0sdCk7ZWxzZSBpZihPKGUpfHwkKGUpKWUuZm9yRWFjaCgoZT0+e29vKGUsdCl9KSk7ZWxzZSBpZihMKGUpKWZvcihjb25zdCBuIGluIGUpb28oZVtuXSx0KTtyZXR1cm4gZX1mdW5jdGlvbiBybygpe2NvbnN0IGU9e2lzTW91bnRlZDohMSxpc0xlYXZpbmc6ITEsaXNVbm1vdW50aW5nOiExLGxlYXZpbmdWTm9kZXM6bmV3IE1hcH07cmV0dXJuIE9vKCgoKT0+e2UuaXNNb3VudGVkPSEwfSkpLFBvKCgoKT0+e2UuaXNVbm1vdW50aW5nPSEwfSkpLGV9Y29uc3Qgc289W0Z1bmN0aW9uLEFycmF5XSxpbz17bmFtZTpcIkJhc2VUcmFuc2l0aW9uXCIscHJvcHM6e21vZGU6U3RyaW5nLGFwcGVhcjpCb29sZWFuLHBlcnNpc3RlZDpCb29sZWFuLG9uQmVmb3JlRW50ZXI6c28sb25FbnRlcjpzbyxvbkFmdGVyRW50ZXI6c28sb25FbnRlckNhbmNlbGxlZDpzbyxvbkJlZm9yZUxlYXZlOnNvLG9uTGVhdmU6c28sb25BZnRlckxlYXZlOnNvLG9uTGVhdmVDYW5jZWxsZWQ6c28sb25CZWZvcmVBcHBlYXI6c28sb25BcHBlYXI6c28sb25BZnRlckFwcGVhcjpzbyxvbkFwcGVhckNhbmNlbGxlZDpzb30sc2V0dXAoZSx7c2xvdHM6dH0pe2NvbnN0IG49d3MoKSxvPXJvKCk7bGV0IHI7cmV0dXJuKCk9Pntjb25zdCBzPXQuZGVmYXVsdCYmZm8odC5kZWZhdWx0KCksITApO2lmKCFzfHwhcy5sZW5ndGgpcmV0dXJuO2xldCBpPXNbMF07aWYocy5sZW5ndGg+MSlmb3IoY29uc3QgZSBvZiBzKWlmKGUudHlwZSE9PUtyKXtpPWU7YnJlYWt9Y29uc3QgbD1rdChlKSx7bW9kZTpjfT1sO2lmKG8uaXNMZWF2aW5nKXJldHVybiBhbyhpKTtjb25zdCBhPXVvKGkpO2lmKCFhKXJldHVybiBhbyhpKTtjb25zdCB1PWNvKGEsbCxvLG4pO3BvKGEsdSk7Y29uc3QgcD1uLnN1YlRyZWUsZj1wJiZ1byhwKTtsZXQgZD0hMTtjb25zdHtnZXRUcmFuc2l0aW9uS2V5Omh9PWEudHlwZTtpZihoKXtjb25zdCBlPWgoKTt2b2lkIDA9PT1yP3I9ZTplIT09ciYmKHI9ZSxkPSEwKX1pZihmJiZmLnR5cGUhPT1LciYmKCFycyhhLGYpfHxkKSl7Y29uc3QgZT1jbyhmLGwsbyxuKTtpZihwbyhmLGUpLFwib3V0LWluXCI9PT1jKXJldHVybiBvLmlzTGVhdmluZz0hMCxlLmFmdGVyTGVhdmU9KCk9PntvLmlzTGVhdmluZz0hMSxuLnVwZGF0ZSgpfSxhbyhpKTtcImluLW91dFwiPT09YyYmYS50eXBlIT09S3ImJihlLmRlbGF5TGVhdmU9KGUsdCxuKT0+e2xvKG8sZilbU3RyaW5nKGYua2V5KV09ZixlLl9sZWF2ZUNiPSgpPT57dCgpLGUuX2xlYXZlQ2I9dm9pZCAwLGRlbGV0ZSB1LmRlbGF5ZWRMZWF2ZX0sdS5kZWxheWVkTGVhdmU9bn0pfXJldHVybiBpfX19O2Z1bmN0aW9uIGxvKGUsdCl7Y29uc3R7bGVhdmluZ1ZOb2RlczpufT1lO2xldCBvPW4uZ2V0KHQudHlwZSk7cmV0dXJuIG98fChvPU9iamVjdC5jcmVhdGUobnVsbCksbi5zZXQodC50eXBlLG8pKSxvfWZ1bmN0aW9uIGNvKGUsdCxuLG8pe2NvbnN0e2FwcGVhcjpyLG1vZGU6cyxwZXJzaXN0ZWQ6aT0hMSxvbkJlZm9yZUVudGVyOmwsb25FbnRlcjpjLG9uQWZ0ZXJFbnRlcjphLG9uRW50ZXJDYW5jZWxsZWQ6dSxvbkJlZm9yZUxlYXZlOnAsb25MZWF2ZTpmLG9uQWZ0ZXJMZWF2ZTpkLG9uTGVhdmVDYW5jZWxsZWQ6aCxvbkJlZm9yZUFwcGVhcjptLG9uQXBwZWFyOmcsb25BZnRlckFwcGVhcjp2LG9uQXBwZWFyQ2FuY2VsbGVkOnl9PXQsXz1TdHJpbmcoZS5rZXkpLGI9bG8obixlKSxTPShlLHQpPT57ZSYmWnQoZSxvLDksdCl9LHg9KGUsdCk9Pntjb25zdCBuPXRbMV07UyhlLHQpLEUoZSk/ZS5ldmVyeSgoZT0+ZS5sZW5ndGg8PTEpKSYmbigpOmUubGVuZ3RoPD0xJiZuKCl9LEM9e21vZGU6cyxwZXJzaXN0ZWQ6aSxiZWZvcmVFbnRlcih0KXtsZXQgbz1sO2lmKCFuLmlzTW91bnRlZCl7aWYoIXIpcmV0dXJuO289bXx8bH10Ll9sZWF2ZUNiJiZ0Ll9sZWF2ZUNiKCEwKTtjb25zdCBzPWJbX107cyYmcnMoZSxzKSYmcy5lbC5fbGVhdmVDYiYmcy5lbC5fbGVhdmVDYigpLFMobyxbdF0pfSxlbnRlcihlKXtsZXQgdD1jLG89YSxzPXU7aWYoIW4uaXNNb3VudGVkKXtpZighcilyZXR1cm47dD1nfHxjLG89dnx8YSxzPXl8fHV9bGV0IGk9ITE7Y29uc3QgbD1lLl9lbnRlckNiPXQ9PntpfHwoaT0hMCxTKHQ/czpvLFtlXSksQy5kZWxheWVkTGVhdmUmJkMuZGVsYXllZExlYXZlKCksZS5fZW50ZXJDYj12b2lkIDApfTt0P3godCxbZSxsXSk6bCgpfSxsZWF2ZSh0LG8pe2NvbnN0IHI9U3RyaW5nKGUua2V5KTtpZih0Ll9lbnRlckNiJiZ0Ll9lbnRlckNiKCEwKSxuLmlzVW5tb3VudGluZylyZXR1cm4gbygpO1MocCxbdF0pO2xldCBzPSExO2NvbnN0IGk9dC5fbGVhdmVDYj1uPT57c3x8KHM9ITAsbygpLFMobj9oOmQsW3RdKSx0Ll9sZWF2ZUNiPXZvaWQgMCxiW3JdPT09ZSYmZGVsZXRlIGJbcl0pfTtiW3JdPWUsZj94KGYsW3QsaV0pOmkoKX0sY2xvbmU6ZT0+Y28oZSx0LG4sbyl9O3JldHVybiBDfWZ1bmN0aW9uIGFvKGUpe2lmKHlvKGUpKXJldHVybihlPWZzKGUpKS5jaGlsZHJlbj1udWxsLGV9ZnVuY3Rpb24gdW8oZSl7cmV0dXJuIHlvKGUpP2UuY2hpbGRyZW4/ZS5jaGlsZHJlblswXTp2b2lkIDA6ZX1mdW5jdGlvbiBwbyhlLHQpezYmZS5zaGFwZUZsYWcmJmUuY29tcG9uZW50P3BvKGUuY29tcG9uZW50LnN1YlRyZWUsdCk6MTI4JmUuc2hhcGVGbGFnPyhlLnNzQ29udGVudC50cmFuc2l0aW9uPXQuY2xvbmUoZS5zc0NvbnRlbnQpLGUuc3NGYWxsYmFjay50cmFuc2l0aW9uPXQuY2xvbmUoZS5zc0ZhbGxiYWNrKSk6ZS50cmFuc2l0aW9uPXR9ZnVuY3Rpb24gZm8oZSx0PSExLG4pe2xldCBvPVtdLHI9MDtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKyl7bGV0IGk9ZVtzXTtjb25zdCBsPW51bGw9PW4/aS5rZXk6U3RyaW5nKG4pK1N0cmluZyhudWxsIT1pLmtleT9pLmtleTpzKTtpLnR5cGU9PT1Xcj8oMTI4JmkucGF0Y2hGbGFnJiZyKyssbz1vLmNvbmNhdChmbyhpLmNoaWxkcmVuLHQsbCkpKToodHx8aS50eXBlIT09S3IpJiZvLnB1c2gobnVsbCE9bD9mcyhpLHtrZXk6bH0pOmkpfWlmKHI+MSlmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKylvW3NdLnBhdGNoRmxhZz0tMjtyZXR1cm4gb31mdW5jdGlvbiBobyhlKXtyZXR1cm4gRihlKT97c2V0dXA6ZSxuYW1lOmUubmFtZX06ZX1jb25zdCBtbz1lPT4hIWUudHlwZS5fX2FzeW5jTG9hZGVyO2Z1bmN0aW9uIGdvKGUpe0YoZSkmJihlPXtsb2FkZXI6ZX0pO2NvbnN0e2xvYWRlcjp0LGxvYWRpbmdDb21wb25lbnQ6bixlcnJvckNvbXBvbmVudDpvLGRlbGF5OnI9MjAwLHRpbWVvdXQ6cyxzdXNwZW5zaWJsZTppPSEwLG9uRXJyb3I6bH09ZTtsZXQgYyxhPW51bGwsdT0wO2NvbnN0IHA9KCk9PntsZXQgZTtyZXR1cm4gYXx8KGU9YT10KCkuY2F0Y2goKGU9PntpZihlPWUgaW5zdGFuY2VvZiBFcnJvcj9lOm5ldyBFcnJvcihTdHJpbmcoZSkpLGwpcmV0dXJuIG5ldyBQcm9taXNlKCgodCxuKT0+e2woZSwoKCk9PnQoKHUrKyxhPW51bGwscCgpKSkpLCgoKT0+bihlKSksdSsxKX0pKTt0aHJvdyBlfSkpLnRoZW4oKHQ9PmUhPT1hJiZhP2E6KHQmJih0Ll9fZXNNb2R1bGV8fFwiTW9kdWxlXCI9PT10W1N5bWJvbC50b1N0cmluZ1RhZ10pJiYodD10LmRlZmF1bHQpLGM9dCx0KSkpKX07cmV0dXJuIGhvKHtuYW1lOlwiQXN5bmNDb21wb25lbnRXcmFwcGVyXCIsX19hc3luY0xvYWRlcjpwLGdldCBfX2FzeW5jUmVzb2x2ZWQoKXtyZXR1cm4gY30sc2V0dXAoKXtjb25zdCBlPUNzO2lmKGMpcmV0dXJuKCk9PnZvKGMsZSk7Y29uc3QgdD10PT57YT1udWxsLFF0KHQsZSwxMywhbyl9O2lmKGkmJmUuc3VzcGVuc2UpcmV0dXJuIHAoKS50aGVuKCh0PT4oKT0+dm8odCxlKSkpLmNhdGNoKChlPT4odChlKSwoKT0+bz91cyhvLHtlcnJvcjplfSk6bnVsbCkpKTtjb25zdCBsPUZ0KCExKSx1PUZ0KCksZj1GdCghIXIpO3JldHVybiByJiZzZXRUaW1lb3V0KCgoKT0+e2YudmFsdWU9ITF9KSxyKSxudWxsIT1zJiZzZXRUaW1lb3V0KCgoKT0+e2lmKCFsLnZhbHVlJiYhdS52YWx1ZSl7Y29uc3QgZT1uZXcgRXJyb3IoYEFzeW5jIGNvbXBvbmVudCB0aW1lZCBvdXQgYWZ0ZXIgJHtzfW1zLmApO3QoZSksdS52YWx1ZT1lfX0pLHMpLHAoKS50aGVuKCgoKT0+e2wudmFsdWU9ITAsZS5wYXJlbnQmJnlvKGUucGFyZW50LnZub2RlKSYmaG4oZS5wYXJlbnQudXBkYXRlKX0pKS5jYXRjaCgoZT0+e3QoZSksdS52YWx1ZT1lfSkpLCgpPT5sLnZhbHVlJiZjP3ZvKGMsZSk6dS52YWx1ZSYmbz91cyhvLHtlcnJvcjp1LnZhbHVlfSk6biYmIWYudmFsdWU/dXMobik6dm9pZCAwfX0pfWZ1bmN0aW9uIHZvKGUse3Zub2RlOntyZWY6dCxwcm9wczpuLGNoaWxkcmVuOm99fSl7Y29uc3Qgcj11cyhlLG4sbyk7cmV0dXJuIHIucmVmPXQscn1jb25zdCB5bz1lPT5lLnR5cGUuX19pc0tlZXBBbGl2ZSxfbz17bmFtZTpcIktlZXBBbGl2ZVwiLF9faXNLZWVwQWxpdmU6ITAscHJvcHM6e2luY2x1ZGU6W1N0cmluZyxSZWdFeHAsQXJyYXldLGV4Y2x1ZGU6W1N0cmluZyxSZWdFeHAsQXJyYXldLG1heDpbU3RyaW5nLE51bWJlcl19LHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1uLmN0eCxyPW5ldyBNYXAscz1uZXcgU2V0O2xldCBpPW51bGw7Y29uc3QgbD1uLnN1c3BlbnNlLHtyZW5kZXJlcjp7cDpjLG06YSx1bTp1LG86e2NyZWF0ZUVsZW1lbnQ6cH19fT1vLGY9cChcImRpdlwiKTtmdW5jdGlvbiBkKGUpe2tvKGUpLHUoZSxuLGwsITApfWZ1bmN0aW9uIGgoZSl7ci5mb3JFYWNoKCgodCxuKT0+e2NvbnN0IG89QnModC50eXBlKTshb3x8ZSYmZShvKXx8bShuKX0pKX1mdW5jdGlvbiBtKGUpe2NvbnN0IHQ9ci5nZXQoZSk7aSYmdC50eXBlPT09aS50eXBlP2kmJmtvKGkpOmQodCksci5kZWxldGUoZSkscy5kZWxldGUoZSl9by5hY3RpdmF0ZT0oZSx0LG4sbyxyKT0+e2NvbnN0IHM9ZS5jb21wb25lbnQ7YShlLHQsbiwwLGwpLGMocy52bm9kZSxlLHQsbixzLGwsbyxlLnNsb3RTY29wZUlkcyxyKSxQcigoKCk9PntzLmlzRGVhY3RpdmF0ZWQ9ITEscy5hJiZaKHMuYSk7Y29uc3QgdD1lLnByb3BzJiZlLnByb3BzLm9uVm5vZGVNb3VudGVkO3QmJmJzKHQscy5wYXJlbnQsZSl9KSxsKX0sby5kZWFjdGl2YXRlPWU9Pntjb25zdCB0PWUuY29tcG9uZW50O2EoZSxmLG51bGwsMSxsKSxQcigoKCk9Pnt0LmRhJiZaKHQuZGEpO2NvbnN0IG49ZS5wcm9wcyYmZS5wcm9wcy5vblZub2RlVW5tb3VudGVkO24mJmJzKG4sdC5wYXJlbnQsZSksdC5pc0RlYWN0aXZhdGVkPSEwfSksbCl9LFhuKCgoKT0+W2UuaW5jbHVkZSxlLmV4Y2x1ZGVdKSwoKFtlLHRdKT0+e2UmJmgoKHQ9PmJvKGUsdCkpKSx0JiZoKChlPT4hYm8odCxlKSkpfSkse2ZsdXNoOlwicG9zdFwiLGRlZXA6ITB9KTtsZXQgZz1udWxsO2NvbnN0IHY9KCk9PntudWxsIT1nJiZyLnNldChnLFRvKG4uc3ViVHJlZSkpfTtyZXR1cm4gT28odiksRm8odiksUG8oKCgpPT57ci5mb3JFYWNoKChlPT57Y29uc3R7c3ViVHJlZTp0LHN1c3BlbnNlOm99PW4scj1Ubyh0KTtpZihlLnR5cGUhPT1yLnR5cGUpZChlKTtlbHNle2tvKHIpO2NvbnN0IGU9ci5jb21wb25lbnQuZGE7ZSYmUHIoZSxvKX19KSl9KSksKCk9PntpZihnPW51bGwsIXQuZGVmYXVsdClyZXR1cm4gbnVsbDtjb25zdCBuPXQuZGVmYXVsdCgpLG89blswXTtpZihuLmxlbmd0aD4xKXJldHVybiBpPW51bGwsbjtpZighKG9zKG8pJiYoNCZvLnNoYXBlRmxhZ3x8MTI4Jm8uc2hhcGVGbGFnKSkpcmV0dXJuIGk9bnVsbCxvO2xldCBsPVRvKG8pO2NvbnN0IGM9bC50eXBlLGE9QnMobW8obCk/bC50eXBlLl9fYXN5bmNSZXNvbHZlZHx8e306Yykse2luY2x1ZGU6dSxleGNsdWRlOnAsbWF4OmZ9PWU7aWYodSYmKCFhfHwhYm8odSxhKSl8fHAmJmEmJmJvKHAsYSkpcmV0dXJuIGk9bCxvO2NvbnN0IGQ9bnVsbD09bC5rZXk/YzpsLmtleSxoPXIuZ2V0KGQpO3JldHVybiBsLmVsJiYobD1mcyhsKSwxMjgmby5zaGFwZUZsYWcmJihvLnNzQ29udGVudD1sKSksZz1kLGg/KGwuZWw9aC5lbCxsLmNvbXBvbmVudD1oLmNvbXBvbmVudCxsLnRyYW5zaXRpb24mJnBvKGwsbC50cmFuc2l0aW9uKSxsLnNoYXBlRmxhZ3w9NTEyLHMuZGVsZXRlKGQpLHMuYWRkKGQpKToocy5hZGQoZCksZiYmcy5zaXplPnBhcnNlSW50KGYsMTApJiZtKHMudmFsdWVzKCkubmV4dCgpLnZhbHVlKSksbC5zaGFwZUZsYWd8PTI1NixpPWwsam4oby50eXBlKT9vOmx9fX07ZnVuY3Rpb24gYm8oZSx0KXtyZXR1cm4gRShlKT9lLnNvbWUoKGU9PmJvKGUsdCkpKTpQKGUpP2Uuc3BsaXQoXCIsXCIpLmluY2x1ZGVzKHQpOiEhZS50ZXN0JiZlLnRlc3QodCl9ZnVuY3Rpb24gU28oZSx0KXtDbyhlLFwiYVwiLHQpfWZ1bmN0aW9uIHhvKGUsdCl7Q28oZSxcImRhXCIsdCl9ZnVuY3Rpb24gQ28oZSx0LG49Q3Mpe2NvbnN0IG89ZS5fX3dkY3x8KGUuX193ZGM9KCk9PntsZXQgdD1uO2Zvcig7dDspe2lmKHQuaXNEZWFjdGl2YXRlZClyZXR1cm47dD10LnBhcmVudH1yZXR1cm4gZSgpfSk7aWYoTm8odCxvLG4pLG4pe2xldCBlPW4ucGFyZW50O2Zvcig7ZSYmZS5wYXJlbnQ7KXlvKGUucGFyZW50LnZub2RlKSYmd28obyx0LG4sZSksZT1lLnBhcmVudH19ZnVuY3Rpb24gd28oZSx0LG4sbyl7Y29uc3Qgcj1Obyh0LGUsbywhMCk7QW8oKCgpPT57ayhvW3RdLHIpfSksbil9ZnVuY3Rpb24ga28oZSl7bGV0IHQ9ZS5zaGFwZUZsYWc7MjU2JnQmJih0LT0yNTYpLDUxMiZ0JiYodC09NTEyKSxlLnNoYXBlRmxhZz10fWZ1bmN0aW9uIFRvKGUpe3JldHVybiAxMjgmZS5zaGFwZUZsYWc/ZS5zc0NvbnRlbnQ6ZX1mdW5jdGlvbiBObyhlLHQsbj1DcyxvPSExKXtpZihuKXtjb25zdCByPW5bZV18fChuW2VdPVtdKSxzPXQuX193ZWh8fCh0Ll9fd2VoPSguLi5vKT0+e2lmKG4uaXNVbm1vdW50ZWQpcmV0dXJuO3hlKCksa3Mobik7Y29uc3Qgcj1adCh0LG4sZSxvKTtyZXR1cm4gVHMoKSxDZSgpLHJ9KTtyZXR1cm4gbz9yLnVuc2hpZnQocyk6ci5wdXNoKHMpLHN9fWNvbnN0IEVvPWU9Pih0LG49Q3MpPT4oIU9zfHxcInNwXCI9PT1lKSYmTm8oZSx0LG4pLCRvPUVvKFwiYm1cIiksT289RW8oXCJtXCIpLFJvPUVvKFwiYnVcIiksRm89RW8oXCJ1XCIpLFBvPUVvKFwiYnVtXCIpLEFvPUVvKFwidW1cIiksTW89RW8oXCJzcFwiKSxWbz1FbyhcInJ0Z1wiKSxJbz1FbyhcInJ0Y1wiKTtmdW5jdGlvbiBCbyhlLHQ9Q3Mpe05vKFwiZWNcIixlLHQpfWZ1bmN0aW9uIExvKGUsdCl7Y29uc3Qgbj1FbjtpZihudWxsPT09bilyZXR1cm4gZTtjb25zdCBvPVZzKG4pfHxuLnByb3h5LHI9ZS5kaXJzfHwoZS5kaXJzPVtdKTtmb3IobGV0IHM9MDtzPHQubGVuZ3RoO3MrKyl7bGV0W2UsbixpLGw9dl09dFtzXTtGKGUpJiYoZT17bW91bnRlZDplLHVwZGF0ZWQ6ZX0pLGUuZGVlcCYmb28obiksci5wdXNoKHtkaXI6ZSxpbnN0YW5jZTpvLHZhbHVlOm4sb2xkVmFsdWU6dm9pZCAwLGFyZzppLG1vZGlmaWVyczpsfSl9cmV0dXJuIGV9ZnVuY3Rpb24gam8oZSx0LG4sbyl7Y29uc3Qgcj1lLmRpcnMscz10JiZ0LmRpcnM7Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspe2NvbnN0IGw9cltpXTtzJiYobC5vbGRWYWx1ZT1zW2ldLnZhbHVlKTtsZXQgYz1sLmRpcltvXTtjJiYoeGUoKSxadChjLG4sOCxbZS5lbCxsLGUsdF0pLENlKCkpfX1mdW5jdGlvbiBVbyhlLHQpe3JldHVybiB6byhcImNvbXBvbmVudHNcIixlLCEwLHQpfHxlfWNvbnN0IERvPVN5bWJvbCgpO2Z1bmN0aW9uIEhvKGUpe3JldHVybiBQKGUpP3pvKFwiY29tcG9uZW50c1wiLGUsITEpfHxlOmV8fERvfWZ1bmN0aW9uIFdvKGUpe3JldHVybiB6byhcImRpcmVjdGl2ZXNcIixlKX1mdW5jdGlvbiB6byhlLHQsbj0hMCxvPSExKXtjb25zdCByPUVufHxDcztpZihyKXtjb25zdCBuPXIudHlwZTtpZihcImNvbXBvbmVudHNcIj09PWUpe2NvbnN0IGU9QnMobiwhMSk7aWYoZSYmKGU9PT10fHxlPT09eih0KXx8ZT09PXEoeih0KSkpKXJldHVybiBufWNvbnN0IHM9S28ocltlXXx8bltlXSx0KXx8S28oci5hcHBDb250ZXh0W2VdLHQpO3JldHVybiFzJiZvP246c319ZnVuY3Rpb24gS28oZSx0KXtyZXR1cm4gZSYmKGVbdF18fGVbeih0KV18fGVbcSh6KHQpKV0pfWZ1bmN0aW9uIEdvKGUsdCxuLG8pe2xldCByO2NvbnN0IHM9biYmbltvXTtpZihFKGUpfHxQKGUpKXtyPW5ldyBBcnJheShlLmxlbmd0aCk7Zm9yKGxldCBuPTAsbz1lLmxlbmd0aDtuPG87bisrKXJbbl09dChlW25dLG4sdm9pZCAwLHMmJnNbbl0pfWVsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe3I9bmV3IEFycmF5KGUpO2ZvcihsZXQgbj0wO248ZTtuKyspcltuXT10KG4rMSxuLHZvaWQgMCxzJiZzW25dKX1lbHNlIGlmKE0oZSkpaWYoZVtTeW1ib2wuaXRlcmF0b3JdKXI9QXJyYXkuZnJvbShlLCgoZSxuKT0+dChlLG4sdm9pZCAwLHMmJnNbbl0pKSk7ZWxzZXtjb25zdCBuPU9iamVjdC5rZXlzKGUpO3I9bmV3IEFycmF5KG4ubGVuZ3RoKTtmb3IobGV0IG89MCxpPW4ubGVuZ3RoO288aTtvKyspe2NvbnN0IGk9bltvXTtyW29dPXQoZVtpXSxpLG8scyYmc1tvXSl9fWVsc2Ugcj1bXTtyZXR1cm4gbiYmKG5bb109cikscn1mdW5jdGlvbiBxbyhlLHQpe2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKXtjb25zdCBvPXRbbl07aWYoRShvKSlmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyllW29bdF0ubmFtZV09b1t0XS5mbjtlbHNlIG8mJihlW28ubmFtZV09by5mbil9cmV0dXJuIGV9ZnVuY3Rpb24gSm8oZSx0LG49e30sbyxyKXtpZihFbi5pc0NFfHxFbi5wYXJlbnQmJm1vKEVuLnBhcmVudCkmJkVuLnBhcmVudC5pc0NFKXJldHVybiB1cyhcInNsb3RcIixcImRlZmF1bHRcIj09PXQ/bnVsbDp7bmFtZTp0fSxvJiZvKCkpO2xldCBzPWVbdF07cyYmcy5fYyYmKHMuX2Q9ITEpLFlyKCk7Y29uc3QgaT1zJiZZbyhzKG4pKSxsPW5zKFdyLHtrZXk6bi5rZXl8fGBfJHt0fWB9LGl8fChvP28oKTpbXSksaSYmMT09PWUuXz82NDotMik7cmV0dXJuIXImJmwuc2NvcGVJZCYmKGwuc2xvdFNjb3BlSWRzPVtsLnNjb3BlSWQrXCItc1wiXSkscyYmcy5fYyYmKHMuX2Q9ITApLGx9ZnVuY3Rpb24gWW8oZSl7cmV0dXJuIGUuc29tZSgoZT0+IW9zKGUpfHxlLnR5cGUhPT1LciYmIShlLnR5cGU9PT1XciYmIVlvKGUuY2hpbGRyZW4pKSkpP2U6bnVsbH1mdW5jdGlvbiBabyhlKXtjb25zdCB0PXt9O2Zvcihjb25zdCBuIGluIGUpdFtKKG4pXT1lW25dO3JldHVybiB0fWNvbnN0IFFvPWU9PmU/TnMoZSk/VnMoZSl8fGUucHJveHk6UW8oZS5wYXJlbnQpOm51bGwsWG89dyhPYmplY3QuY3JlYXRlKG51bGwpLHskOmU9PmUsJGVsOmU9PmUudm5vZGUuZWwsJGRhdGE6ZT0+ZS5kYXRhLCRwcm9wczplPT5lLnByb3BzLCRhdHRyczplPT5lLmF0dHJzLCRzbG90czplPT5lLnNsb3RzLCRyZWZzOmU9PmUucmVmcywkcGFyZW50OmU9PlFvKGUucGFyZW50KSwkcm9vdDplPT5RbyhlLnJvb3QpLCRlbWl0OmU9PmUuZW1pdCwkb3B0aW9uczplPT5pcihlKSwkZm9yY2VVcGRhdGU6ZT0+ZS5mfHwoZS5mPSgpPT5obihlLnVwZGF0ZSkpLCRuZXh0VGljazplPT5lLm58fChlLm49ZG4uYmluZChlLnByb3h5KSksJHdhdGNoOmU9PnRvLmJpbmQoZSl9KSxlcj17Z2V0KHtfOmV9LHQpe2NvbnN0e2N0eDpuLHNldHVwU3RhdGU6byxkYXRhOnIscHJvcHM6cyxhY2Nlc3NDYWNoZTppLHR5cGU6bCxhcHBDb250ZXh0OmN9PWU7bGV0IGE7aWYoXCIkXCIhPT10WzBdKXtjb25zdCBsPWlbdF07aWYodm9pZCAwIT09bClzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBvW3RdO2Nhc2UgMjpyZXR1cm4gclt0XTtjYXNlIDQ6cmV0dXJuIG5bdF07Y2FzZSAzOnJldHVybiBzW3RdfWVsc2V7aWYobyE9PXYmJk4obyx0KSlyZXR1cm4gaVt0XT0xLG9bdF07aWYociE9PXYmJk4ocix0KSlyZXR1cm4gaVt0XT0yLHJbdF07aWYoKGE9ZS5wcm9wc09wdGlvbnNbMF0pJiZOKGEsdCkpcmV0dXJuIGlbdF09MyxzW3RdO2lmKG4hPT12JiZOKG4sdCkpcmV0dXJuIGlbdF09NCxuW3RdO25yJiYoaVt0XT0wKX19Y29uc3QgdT1Yb1t0XTtsZXQgcCxmO3JldHVybiB1PyhcIiRhdHRyc1wiPT09dCYmd2UoZSwwLHQpLHUoZSkpOihwPWwuX19jc3NNb2R1bGVzKSYmKHA9cFt0XSk/cDpuIT09diYmTihuLHQpPyhpW3RdPTQsblt0XSk6KGY9Yy5jb25maWcuZ2xvYmFsUHJvcGVydGllcyxOKGYsdCk/Zlt0XTp2b2lkIDApfSxzZXQoe186ZX0sdCxuKXtjb25zdHtkYXRhOm8sc2V0dXBTdGF0ZTpyLGN0eDpzfT1lO3JldHVybiByIT09diYmTihyLHQpPyhyW3RdPW4sITApOm8hPT12JiZOKG8sdCk/KG9bdF09biwhMCk6IU4oZS5wcm9wcyx0KSYmKChcIiRcIiE9PXRbMF18fCEodC5zbGljZSgxKWluIGUpKSYmKHNbdF09biwhMCkpfSxoYXMoe186e2RhdGE6ZSxzZXR1cFN0YXRlOnQsYWNjZXNzQ2FjaGU6bixjdHg6byxhcHBDb250ZXh0OnIscHJvcHNPcHRpb25zOnN9fSxpKXtsZXQgbDtyZXR1cm4hIW5baV18fGUhPT12JiZOKGUsaSl8fHQhPT12JiZOKHQsaSl8fChsPXNbMF0pJiZOKGwsaSl8fE4obyxpKXx8TihYbyxpKXx8TihyLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLGkpfSxkZWZpbmVQcm9wZXJ0eShlLHQsbil7cmV0dXJuIG51bGwhPW4uZ2V0P2UuXy5hY2Nlc3NDYWNoZVt0XT0wOk4obixcInZhbHVlXCIpJiZ0aGlzLnNldChlLHQsbi52YWx1ZSxudWxsKSxSZWZsZWN0LmRlZmluZVByb3BlcnR5KGUsdCxuKX19LHRyPXcoe30sZXIse2dldChlLHQpe2lmKHQhPT1TeW1ib2wudW5zY29wYWJsZXMpcmV0dXJuIGVyLmdldChlLHQsZSl9LGhhczooZSxuKT0+XCJfXCIhPT1uWzBdJiYhdChuKX0pO2xldCBucj0hMDtmdW5jdGlvbiBvcihlKXtjb25zdCB0PWlyKGUpLG49ZS5wcm94eSxvPWUuY3R4O25yPSExLHQuYmVmb3JlQ3JlYXRlJiZycih0LmJlZm9yZUNyZWF0ZSxlLFwiYmNcIik7Y29uc3R7ZGF0YTpyLGNvbXB1dGVkOnMsbWV0aG9kczppLHdhdGNoOmwscHJvdmlkZTpjLGluamVjdDphLGNyZWF0ZWQ6dSxiZWZvcmVNb3VudDpwLG1vdW50ZWQ6ZixiZWZvcmVVcGRhdGU6ZCx1cGRhdGVkOmgsYWN0aXZhdGVkOm0sZGVhY3RpdmF0ZWQ6ZyxiZWZvcmVVbm1vdW50OnYsdW5tb3VudGVkOnkscmVuZGVyOmIscmVuZGVyVHJhY2tlZDpTLHJlbmRlclRyaWdnZXJlZDp4LGVycm9yQ2FwdHVyZWQ6QyxzZXJ2ZXJQcmVmZXRjaDp3LGV4cG9zZTprLGluaGVyaXRBdHRyczpULGNvbXBvbmVudHM6TixkaXJlY3RpdmVzOiR9PXQ7aWYoYSYmZnVuY3Rpb24oZSx0LG49XyxvPSExKXtFKGUpJiYoZT11cihlKSk7Zm9yKGNvbnN0IHIgaW4gZSl7Y29uc3Qgbj1lW3JdO2xldCBzO3M9TShuKT9cImRlZmF1bHRcImluIG4/cW4obi5mcm9tfHxyLG4uZGVmYXVsdCwhMCk6cW4obi5mcm9tfHxyKTpxbihuKSxSdChzKSYmbz9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6KCk9PnMudmFsdWUsc2V0OmU9PnMudmFsdWU9ZX0pOnRbcl09c319KGEsbyxudWxsLGUuYXBwQ29udGV4dC5jb25maWcudW53cmFwSW5qZWN0ZWRSZWYpLGkpZm9yKGNvbnN0IF8gaW4gaSl7Y29uc3QgZT1pW19dO0YoZSkmJihvW19dPWUuYmluZChuKSl9aWYocil7Y29uc3QgdD1yLmNhbGwobixuKTtNKHQpJiYoZS5kYXRhPWd0KHQpKX1pZihucj0hMCxzKWZvcihjb25zdCBFIGluIHMpe2NvbnN0IGU9c1tFXSx0PUYoZSk/ZS5iaW5kKG4sbik6RihlLmdldCk/ZS5nZXQuYmluZChuLG4pOl8scj0hRihlKSYmRihlLnNldCk/ZS5zZXQuYmluZChuKTpfLGk9anMoe2dldDp0LHNldDpyfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sRSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OigpPT5pLnZhbHVlLHNldDplPT5pLnZhbHVlPWV9KX1pZihsKWZvcihjb25zdCBfIGluIGwpc3IobFtfXSxvLG4sXyk7aWYoYyl7Y29uc3QgZT1GKGMpP2MuY2FsbChuKTpjO1JlZmxlY3Qub3duS2V5cyhlKS5mb3JFYWNoKCh0PT57R24odCxlW3RdKX0pKX1mdW5jdGlvbiBPKGUsdCl7RSh0KT90LmZvckVhY2goKHQ9PmUodC5iaW5kKG4pKSkpOnQmJmUodC5iaW5kKG4pKX1pZih1JiZycih1LGUsXCJjXCIpLE8oJG8scCksTyhPbyxmKSxPKFJvLGQpLE8oRm8saCksTyhTbyxtKSxPKHhvLGcpLE8oQm8sQyksTyhJbyxTKSxPKFZvLHgpLE8oUG8sdiksTyhBbyx5KSxPKE1vLHcpLEUoaykpaWYoay5sZW5ndGgpe2NvbnN0IHQ9ZS5leHBvc2VkfHwoZS5leHBvc2VkPXt9KTtrLmZvckVhY2goKGU9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtnZXQ6KCk9Pm5bZV0sc2V0OnQ9Pm5bZV09dH0pfSkpfWVsc2UgZS5leHBvc2VkfHwoZS5leHBvc2VkPXt9KTtiJiZlLnJlbmRlcj09PV8mJihlLnJlbmRlcj1iKSxudWxsIT1UJiYoZS5pbmhlcml0QXR0cnM9VCksTiYmKGUuY29tcG9uZW50cz1OKSwkJiYoZS5kaXJlY3RpdmVzPSQpfWZ1bmN0aW9uIHJyKGUsdCxuKXtadChFKGUpP2UubWFwKChlPT5lLmJpbmQodC5wcm94eSkpKTplLmJpbmQodC5wcm94eSksdCxuKX1mdW5jdGlvbiBzcihlLHQsbixvKXtjb25zdCByPW8uaW5jbHVkZXMoXCIuXCIpP25vKG4sbyk6KCk9Pm5bb107aWYoUChlKSl7Y29uc3Qgbj10W2VdO0YobikmJlhuKHIsbil9ZWxzZSBpZihGKGUpKVhuKHIsZS5iaW5kKG4pKTtlbHNlIGlmKE0oZSkpaWYoRShlKSllLmZvckVhY2goKGU9PnNyKGUsdCxuLG8pKSk7ZWxzZXtjb25zdCBvPUYoZS5oYW5kbGVyKT9lLmhhbmRsZXIuYmluZChuKTp0W2UuaGFuZGxlcl07RihvKSYmWG4ocixvLGUpfX1mdW5jdGlvbiBpcihlKXtjb25zdCB0PWUudHlwZSx7bWl4aW5zOm4sZXh0ZW5kczpvfT10LHttaXhpbnM6cixvcHRpb25zQ2FjaGU6cyxjb25maWc6e29wdGlvbk1lcmdlU3RyYXRlZ2llczppfX09ZS5hcHBDb250ZXh0LGw9cy5nZXQodCk7bGV0IGM7cmV0dXJuIGw/Yz1sOnIubGVuZ3RofHxufHxvPyhjPXt9LHIubGVuZ3RoJiZyLmZvckVhY2goKGU9PmxyKGMsZSxpLCEwKSkpLGxyKGMsdCxpKSk6Yz10LHMuc2V0KHQsYyksY31mdW5jdGlvbiBscihlLHQsbixvPSExKXtjb25zdHttaXhpbnM6cixleHRlbmRzOnN9PXQ7cyYmbHIoZSxzLG4sITApLHImJnIuZm9yRWFjaCgodD0+bHIoZSx0LG4sITApKSk7Zm9yKGNvbnN0IGkgaW4gdClpZihvJiZcImV4cG9zZVwiPT09aSk7ZWxzZXtjb25zdCBvPWNyW2ldfHxuJiZuW2ldO2VbaV09bz9vKGVbaV0sdFtpXSk6dFtpXX1yZXR1cm4gZX1jb25zdCBjcj17ZGF0YTphcixwcm9wczpmcixlbWl0czpmcixtZXRob2RzOmZyLGNvbXB1dGVkOmZyLGJlZm9yZUNyZWF0ZTpwcixjcmVhdGVkOnByLGJlZm9yZU1vdW50OnByLG1vdW50ZWQ6cHIsYmVmb3JlVXBkYXRlOnByLHVwZGF0ZWQ6cHIsYmVmb3JlRGVzdHJveTpwcixiZWZvcmVVbm1vdW50OnByLGRlc3Ryb3llZDpwcix1bm1vdW50ZWQ6cHIsYWN0aXZhdGVkOnByLGRlYWN0aXZhdGVkOnByLGVycm9yQ2FwdHVyZWQ6cHIsc2VydmVyUHJlZmV0Y2g6cHIsY29tcG9uZW50czpmcixkaXJlY3RpdmVzOmZyLHdhdGNoOmZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuIHQ7aWYoIXQpcmV0dXJuIGU7Y29uc3Qgbj13KE9iamVjdC5jcmVhdGUobnVsbCksZSk7Zm9yKGNvbnN0IG8gaW4gdCluW29dPXByKGVbb10sdFtvXSk7cmV0dXJuIG59LHByb3ZpZGU6YXIsaW5qZWN0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZyKHVyKGUpLHVyKHQpKX19O2Z1bmN0aW9uIGFyKGUsdCl7cmV0dXJuIHQ/ZT9mdW5jdGlvbigpe3JldHVybiB3KEYoZSk/ZS5jYWxsKHRoaXMsdGhpcyk6ZSxGKHQpP3QuY2FsbCh0aGlzLHRoaXMpOnQpfTp0OmV9ZnVuY3Rpb24gdXIoZSl7aWYoRShlKSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl0W2Vbbl1dPWVbbl07cmV0dXJuIHR9cmV0dXJuIGV9ZnVuY3Rpb24gcHIoZSx0KXtyZXR1cm4gZT9bLi4ubmV3IFNldChbXS5jb25jYXQoZSx0KSldOnR9ZnVuY3Rpb24gZnIoZSx0KXtyZXR1cm4gZT93KHcoT2JqZWN0LmNyZWF0ZShudWxsKSxlKSx0KTp0fWZ1bmN0aW9uIGRyKGUsdCxuLG8pe2NvbnN0W3Isc109ZS5wcm9wc09wdGlvbnM7bGV0IGksbD0hMTtpZih0KWZvcihsZXQgYyBpbiB0KXtpZihVKGMpKWNvbnRpbnVlO2NvbnN0IGE9dFtjXTtsZXQgdTtyJiZOKHIsdT16KGMpKT9zJiZzLmluY2x1ZGVzKHUpPyhpfHwoaT17fSkpW3VdPWE6blt1XT1hOk5uKGUuZW1pdHNPcHRpb25zLGMpfHxjIGluIG8mJmE9PT1vW2NdfHwob1tjXT1hLGw9ITApfWlmKHMpe2NvbnN0IHQ9a3Qobiksbz1pfHx2O2ZvcihsZXQgaT0wO2k8cy5sZW5ndGg7aSsrKXtjb25zdCBsPXNbaV07bltsXT1ocihyLHQsbCxvW2xdLGUsIU4obyxsKSl9fXJldHVybiBsfWZ1bmN0aW9uIGhyKGUsdCxuLG8scixzKXtjb25zdCBpPWVbbl07aWYobnVsbCE9aSl7Y29uc3QgZT1OKGksXCJkZWZhdWx0XCIpO2lmKGUmJnZvaWQgMD09PW8pe2NvbnN0IGU9aS5kZWZhdWx0O2lmKGkudHlwZSE9PUZ1bmN0aW9uJiZGKGUpKXtjb25zdHtwcm9wc0RlZmF1bHRzOnN9PXI7biBpbiBzP289c1tuXTooa3Mociksbz1zW25dPWUuY2FsbChudWxsLHQpLFRzKCkpfWVsc2Ugbz1lfWlbMF0mJihzJiYhZT9vPSExOiFpWzFdfHxcIlwiIT09byYmbyE9PUcobil8fChvPSEwKSl9cmV0dXJuIG99ZnVuY3Rpb24gbXIoZSx0LG49ITEpe2NvbnN0IG89dC5wcm9wc0NhY2hlLHI9by5nZXQoZSk7aWYocilyZXR1cm4gcjtjb25zdCBzPWUucHJvcHMsaT17fSxsPVtdO2xldCBjPSExO2lmKCFGKGUpKXtjb25zdCBvPWU9PntjPSEwO2NvbnN0W24sb109bXIoZSx0LCEwKTt3KGksbiksbyYmbC5wdXNoKC4uLm8pfTshbiYmdC5taXhpbnMubGVuZ3RoJiZ0Lm1peGlucy5mb3JFYWNoKG8pLGUuZXh0ZW5kcyYmbyhlLmV4dGVuZHMpLGUubWl4aW5zJiZlLm1peGlucy5mb3JFYWNoKG8pfWlmKCFzJiYhYylyZXR1cm4gby5zZXQoZSx5KSx5O2lmKEUocykpZm9yKGxldCB1PTA7dTxzLmxlbmd0aDt1Kyspe2NvbnN0IGU9eihzW3VdKTtncihlKSYmKGlbZV09dil9ZWxzZSBpZihzKWZvcihjb25zdCB1IGluIHMpe2NvbnN0IGU9eih1KTtpZihncihlKSl7Y29uc3QgdD1zW3VdLG49aVtlXT1FKHQpfHxGKHQpP3t0eXBlOnR9OnQ7aWYobil7Y29uc3QgdD1fcihCb29sZWFuLG4udHlwZSksbz1fcihTdHJpbmcsbi50eXBlKTtuWzBdPXQ+LTEsblsxXT1vPDB8fHQ8bywodD4tMXx8TihuLFwiZGVmYXVsdFwiKSkmJmwucHVzaChlKX19fWNvbnN0IGE9W2ksbF07cmV0dXJuIG8uc2V0KGUsYSksYX1mdW5jdGlvbiBncihlKXtyZXR1cm5cIiRcIiE9PWVbMF19ZnVuY3Rpb24gdnIoZSl7Y29uc3QgdD1lJiZlLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7cmV0dXJuIHQ/dFsxXTpudWxsPT09ZT9cIm51bGxcIjpcIlwifWZ1bmN0aW9uIHlyKGUsdCl7cmV0dXJuIHZyKGUpPT09dnIodCl9ZnVuY3Rpb24gX3IoZSx0KXtyZXR1cm4gRSh0KT90LmZpbmRJbmRleCgodD0+eXIodCxlKSkpOkYodCkmJnlyKHQsZSk/MDotMX1jb25zdCBicj1lPT5cIl9cIj09PWVbMF18fFwiJHN0YWJsZVwiPT09ZSxTcj1lPT5FKGUpP2UubWFwKGdzKTpbZ3MoZSldLHhyPShlLHQsbik9PntpZih0Ll9uKXJldHVybiB0O2NvbnN0IG89QW4oKCguLi5lKT0+U3IodCguLi5lKSkpLG4pO3JldHVybiBvLl9jPSExLG99LENyPShlLHQsbik9Pntjb25zdCBvPWUuX2N0eDtmb3IoY29uc3QgciBpbiBlKXtpZihicihyKSljb250aW51ZTtjb25zdCBuPWVbcl07aWYoRihuKSl0W3JdPXhyKDAsbixvKTtlbHNlIGlmKG51bGwhPW4pe2NvbnN0IGU9U3Iobik7dFtyXT0oKT0+ZX19fSx3cj0oZSx0KT0+e2NvbnN0IG49U3IodCk7ZS5zbG90cy5kZWZhdWx0PSgpPT5ufTtmdW5jdGlvbiBrcigpe3JldHVybnthcHA6bnVsbCxjb25maWc6e2lzTmF0aXZlVGFnOmIscGVyZm9ybWFuY2U6ITEsZ2xvYmFsUHJvcGVydGllczp7fSxvcHRpb25NZXJnZVN0cmF0ZWdpZXM6e30sZXJyb3JIYW5kbGVyOnZvaWQgMCx3YXJuSGFuZGxlcjp2b2lkIDAsY29tcGlsZXJPcHRpb25zOnt9fSxtaXhpbnM6W10sY29tcG9uZW50czp7fSxkaXJlY3RpdmVzOnt9LHByb3ZpZGVzOk9iamVjdC5jcmVhdGUobnVsbCksb3B0aW9uc0NhY2hlOm5ldyBXZWFrTWFwLHByb3BzQ2FjaGU6bmV3IFdlYWtNYXAsZW1pdHNDYWNoZTpuZXcgV2Vha01hcH19bGV0IFRyPTA7ZnVuY3Rpb24gTnIoZSx0KXtyZXR1cm4gZnVuY3Rpb24obixvPW51bGwpe0Yobil8fChuPU9iamVjdC5hc3NpZ24oe30sbikpLG51bGw9PW98fE0obyl8fChvPW51bGwpO2NvbnN0IHI9a3IoKSxzPW5ldyBTZXQ7bGV0IGk9ITE7Y29uc3QgbD1yLmFwcD17X3VpZDpUcisrLF9jb21wb25lbnQ6bixfcHJvcHM6byxfY29udGFpbmVyOm51bGwsX2NvbnRleHQ6cixfaW5zdGFuY2U6bnVsbCx2ZXJzaW9uOm9pLGdldCBjb25maWcoKXtyZXR1cm4gci5jb25maWd9LHNldCBjb25maWcoZSl7fSx1c2U6KGUsLi4udCk9PihzLmhhcyhlKXx8KGUmJkYoZS5pbnN0YWxsKT8ocy5hZGQoZSksZS5pbnN0YWxsKGwsLi4udCkpOkYoZSkmJihzLmFkZChlKSxlKGwsLi4udCkpKSxsKSxtaXhpbjplPT4oci5taXhpbnMuaW5jbHVkZXMoZSl8fHIubWl4aW5zLnB1c2goZSksbCksY29tcG9uZW50OihlLHQpPT50PyhyLmNvbXBvbmVudHNbZV09dCxsKTpyLmNvbXBvbmVudHNbZV0sZGlyZWN0aXZlOihlLHQpPT50PyhyLmRpcmVjdGl2ZXNbZV09dCxsKTpyLmRpcmVjdGl2ZXNbZV0sbW91bnQocyxjLGEpe2lmKCFpKXtjb25zdCB1PXVzKG4sbyk7cmV0dXJuIHUuYXBwQ29udGV4dD1yLGMmJnQ/dCh1LHMpOmUodSxzLGEpLGk9ITAsbC5fY29udGFpbmVyPXMscy5fX3Z1ZV9hcHBfXz1sLFZzKHUuY29tcG9uZW50KXx8dS5jb21wb25lbnQucHJveHl9fSx1bm1vdW50KCl7aSYmKGUobnVsbCxsLl9jb250YWluZXIpLGRlbGV0ZSBsLl9jb250YWluZXIuX192dWVfYXBwX18pfSxwcm92aWRlOihlLHQpPT4oci5wcm92aWRlc1tlXT10LGwpfTtyZXR1cm4gbH19ZnVuY3Rpb24gRXIoZSx0LG4sbyxyPSExKXtpZihFKGUpKXJldHVybiB2b2lkIGUuZm9yRWFjaCgoKGUscyk9PkVyKGUsdCYmKEUodCk/dFtzXTp0KSxuLG8scikpKTtpZihtbyhvKSYmIXIpcmV0dXJuO2NvbnN0IHM9NCZvLnNoYXBlRmxhZz9WcyhvLmNvbXBvbmVudCl8fG8uY29tcG9uZW50LnByb3h5Om8uZWwsaT1yP251bGw6cyx7aTpsLHI6Y309ZSxhPXQmJnQucix1PWwucmVmcz09PXY/bC5yZWZzPXt9OmwucmVmcyxwPWwuc2V0dXBTdGF0ZTtpZihudWxsIT1hJiZhIT09YyYmKFAoYSk/KHVbYV09bnVsbCxOKHAsYSkmJihwW2FdPW51bGwpKTpSdChhKSYmKGEudmFsdWU9bnVsbCkpLEYoYykpWXQoYyxsLDEyLFtpLHVdKTtlbHNle2NvbnN0IHQ9UChjKSxvPVJ0KGMpO2lmKHR8fG8pe2NvbnN0IGw9KCk9PntpZihlLmYpe2NvbnN0IG49dD91W2NdOmMudmFsdWU7cj9FKG4pJiZrKG4scyk6RShuKT9uLmluY2x1ZGVzKHMpfHxuLnB1c2gocyk6dD8odVtjXT1bc10sTihwLGMpJiYocFtjXT11W2NdKSk6KGMudmFsdWU9W3NdLGUuayYmKHVbZS5rXT1jLnZhbHVlKSl9ZWxzZSB0Pyh1W2NdPWksTihwLGMpJiYocFtjXT1pKSk6byYmKGMudmFsdWU9aSxlLmsmJih1W2Uua109aSkpfTtpPyhsLmlkPS0xLFByKGwsbikpOmwoKX19fWxldCAkcj0hMTtjb25zdCBPcj1lPT4vc3ZnLy50ZXN0KGUubmFtZXNwYWNlVVJJKSYmXCJmb3JlaWduT2JqZWN0XCIhPT1lLnRhZ05hbWUsUnI9ZT0+OD09PWUubm9kZVR5cGU7ZnVuY3Rpb24gRnIoZSl7Y29uc3R7bXQ6dCxwOm4sbzp7cGF0Y2hQcm9wOm8sY3JlYXRlVGV4dDpyLG5leHRTaWJsaW5nOnMscGFyZW50Tm9kZTppLHJlbW92ZTpsLGluc2VydDpjLGNyZWF0ZUNvbW1lbnQ6YX19PWUsdT0obixvLGwsYSxnLHY9ITEpPT57Y29uc3QgeT1ScihuKSYmXCJbXCI9PT1uLmRhdGEsXz0oKT0+aChuLG8sbCxhLGcseSkse3R5cGU6YixyZWY6UyxzaGFwZUZsYWc6eCxwYXRjaEZsYWc6Q309byx3PW4ubm9kZVR5cGU7by5lbD1uLC0yPT09QyYmKHY9ITEsby5keW5hbWljQ2hpbGRyZW49bnVsbCk7bGV0IGs9bnVsbDtzd2l0Y2goYil7Y2FzZSB6cjozIT09dz9cIlwiPT09by5jaGlsZHJlbj8oYyhvLmVsPXIoXCJcIiksaShuKSxuKSxrPW4pOms9XygpOihuLmRhdGEhPT1vLmNoaWxkcmVuJiYoJHI9ITAsbi5kYXRhPW8uY2hpbGRyZW4pLGs9cyhuKSk7YnJlYWs7Y2FzZSBLcjprPTghPT13fHx5P18oKTpzKG4pO2JyZWFrO2Nhc2UgR3I6aWYoMT09PXd8fDM9PT13KXtrPW47Y29uc3QgZT0hby5jaGlsZHJlbi5sZW5ndGg7Zm9yKGxldCB0PTA7dDxvLnN0YXRpY0NvdW50O3QrKyllJiYoby5jaGlsZHJlbis9MT09PWsubm9kZVR5cGU/ay5vdXRlckhUTUw6ay5kYXRhKSx0PT09by5zdGF0aWNDb3VudC0xJiYoby5hbmNob3I9ayksaz1zKGspO3JldHVybiBrfWs9XygpO2JyZWFrO2Nhc2UgV3I6az15P2QobixvLGwsYSxnLHYpOl8oKTticmVhaztkZWZhdWx0OmlmKDEmeClrPTEhPT13fHxvLnR5cGUudG9Mb3dlckNhc2UoKSE9PW4udGFnTmFtZS50b0xvd2VyQ2FzZSgpP18oKTpwKG4sbyxsLGEsZyx2KTtlbHNlIGlmKDYmeCl7by5zbG90U2NvcGVJZHM9Zztjb25zdCBlPWkobik7aWYodChvLGUsbnVsbCxsLGEsT3IoZSksdiksaz15P20obik6cyhuKSxrJiZScihrKSYmXCJ0ZWxlcG9ydCBlbmRcIj09PWsuZGF0YSYmKGs9cyhrKSksbW8obykpe2xldCB0O3k/KHQ9dXMoV3IpLHQuYW5jaG9yPWs/ay5wcmV2aW91c1NpYmxpbmc6ZS5sYXN0Q2hpbGQpOnQ9Mz09PW4ubm9kZVR5cGU/ZHMoXCJcIik6dXMoXCJkaXZcIiksdC5lbD1uLG8uY29tcG9uZW50LnN1YlRyZWU9dH19ZWxzZSA2NCZ4P2s9OCE9PXc/XygpOm8udHlwZS5oeWRyYXRlKG4sbyxsLGEsZyx2LGUsZik6MTI4JngmJihrPW8udHlwZS5oeWRyYXRlKG4sbyxsLGEsT3IoaShuKSksZyx2LGUsdSkpfXJldHVybiBudWxsIT1TJiZFcihTLG51bGwsYSxvKSxrfSxwPShlLHQsbixyLHMsaSk9PntpPWl8fCEhdC5keW5hbWljQ2hpbGRyZW47Y29uc3R7dHlwZTpjLHByb3BzOmEscGF0Y2hGbGFnOnUsc2hhcGVGbGFnOnAsZGlyczpkfT10LGg9XCJpbnB1dFwiPT09YyYmZHx8XCJvcHRpb25cIj09PWM7aWYoaHx8LTEhPT11KXtpZihkJiZqbyh0LG51bGwsbixcImNyZWF0ZWRcIiksYSlpZihofHwhaXx8NDgmdSlmb3IoY29uc3QgdCBpbiBhKShoJiZ0LmVuZHNXaXRoKFwidmFsdWVcIil8fHgodCkmJiFVKHQpKSYmbyhlLHQsbnVsbCxhW3RdLCExLHZvaWQgMCxuKTtlbHNlIGEub25DbGljayYmbyhlLFwib25DbGlja1wiLG51bGwsYS5vbkNsaWNrLCExLHZvaWQgMCxuKTtsZXQgYztpZigoYz1hJiZhLm9uVm5vZGVCZWZvcmVNb3VudCkmJmJzKGMsbix0KSxkJiZqbyh0LG51bGwsbixcImJlZm9yZU1vdW50XCIpLCgoYz1hJiZhLm9uVm5vZGVNb3VudGVkKXx8ZCkmJnpuKCgoKT0+e2MmJmJzKGMsbix0KSxkJiZqbyh0LG51bGwsbixcIm1vdW50ZWRcIil9KSxyKSwxNiZwJiYoIWF8fCFhLmlubmVySFRNTCYmIWEudGV4dENvbnRlbnQpKXtsZXQgbz1mKGUuZmlyc3RDaGlsZCx0LGUsbixyLHMsaSk7Zm9yKDtvOyl7JHI9ITA7Y29uc3QgZT1vO289by5uZXh0U2libGluZyxsKGUpfX1lbHNlIDgmcCYmZS50ZXh0Q29udGVudCE9PXQuY2hpbGRyZW4mJigkcj0hMCxlLnRleHRDb250ZW50PXQuY2hpbGRyZW4pfXJldHVybiBlLm5leHRTaWJsaW5nfSxmPShlLHQsbyxyLHMsaSxsKT0+e2w9bHx8ISF0LmR5bmFtaWNDaGlsZHJlbjtjb25zdCBjPXQuY2hpbGRyZW4sYT1jLmxlbmd0aDtmb3IobGV0IHA9MDtwPGE7cCsrKXtjb25zdCB0PWw/Y1twXTpjW3BdPWdzKGNbcF0pO2lmKGUpZT11KGUsdCxyLHMsaSxsKTtlbHNle2lmKHQudHlwZT09PXpyJiYhdC5jaGlsZHJlbiljb250aW51ZTskcj0hMCxuKG51bGwsdCxvLG51bGwscixzLE9yKG8pLGkpfX1yZXR1cm4gZX0sZD0oZSx0LG4sbyxyLGwpPT57Y29uc3R7c2xvdFNjb3BlSWRzOnV9PXQ7dSYmKHI9cj9yLmNvbmNhdCh1KTp1KTtjb25zdCBwPWkoZSksZD1mKHMoZSksdCxwLG4sbyxyLGwpO3JldHVybiBkJiZScihkKSYmXCJdXCI9PT1kLmRhdGE/cyh0LmFuY2hvcj1kKTooJHI9ITAsYyh0LmFuY2hvcj1hKFwiXVwiKSxwLGQpLGQpfSxoPShlLHQsbyxyLGMsYSk9PntpZigkcj0hMCx0LmVsPW51bGwsYSl7Y29uc3QgdD1tKGUpO2Zvcig7Oyl7Y29uc3Qgbj1zKGUpO2lmKCFufHxuPT09dClicmVhaztsKG4pfX1jb25zdCB1PXMoZSkscD1pKGUpO3JldHVybiBsKGUpLG4obnVsbCx0LHAsdSxvLHIsT3IocCksYyksdX0sbT1lPT57bGV0IHQ9MDtmb3IoO2U7KWlmKChlPXMoZSkpJiZScihlKSYmKFwiW1wiPT09ZS5kYXRhJiZ0KyssXCJdXCI9PT1lLmRhdGEpKXtpZigwPT09dClyZXR1cm4gcyhlKTt0LS19cmV0dXJuIGV9O3JldHVyblsoZSx0KT0+e2lmKCF0Lmhhc0NoaWxkTm9kZXMoKSlyZXR1cm4gbihudWxsLGUsdCksX24oKSx2b2lkKHQuX3Zub2RlPWUpOyRyPSExLHUodC5maXJzdENoaWxkLGUsbnVsbCxudWxsLG51bGwpLF9uKCksdC5fdm5vZGU9ZSwkciYmY29uc29sZS5lcnJvcihcIkh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuXCIpfSx1XX1jb25zdCBQcj16bjtmdW5jdGlvbiBBcihlKXtyZXR1cm4gVnIoZSl9ZnVuY3Rpb24gTXIoZSl7cmV0dXJuIFZyKGUsRnIpfWZ1bmN0aW9uIFZyKGUsdCl7KGVlfHwoZWU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOnt9KSkuX19WVUVfXz0hMDtjb25zdHtpbnNlcnQ6bixyZW1vdmU6byxwYXRjaFByb3A6cixjcmVhdGVFbGVtZW50OnMsY3JlYXRlVGV4dDppLGNyZWF0ZUNvbW1lbnQ6bCxzZXRUZXh0OmMsc2V0RWxlbWVudFRleHQ6YSxwYXJlbnROb2RlOnUsbmV4dFNpYmxpbmc6cCxzZXRTY29wZUlkOmY9XyxjbG9uZU5vZGU6ZCxpbnNlcnRTdGF0aWNDb250ZW50Omh9PWUsbT0oZSx0LG4sbz1udWxsLHI9bnVsbCxzPW51bGwsaT0hMSxsPW51bGwsYz0hIXQuZHluYW1pY0NoaWxkcmVuKT0+e2lmKGU9PT10KXJldHVybjtlJiYhcnMoZSx0KSYmKG89WShlKSxIKGUscixzLCEwKSxlPW51bGwpLC0yPT09dC5wYXRjaEZsYWcmJihjPSExLHQuZHluYW1pY0NoaWxkcmVuPW51bGwpO2NvbnN0e3R5cGU6YSxyZWY6dSxzaGFwZUZsYWc6cH09dDtzd2l0Y2goYSl7Y2FzZSB6cjpnKGUsdCxuLG8pO2JyZWFrO2Nhc2UgS3I6YihlLHQsbixvKTticmVhaztjYXNlIEdyOm51bGw9PWUmJlModCxuLG8saSk7YnJlYWs7Y2FzZSBXcjpSKGUsdCxuLG8scixzLGksbCxjKTticmVhaztkZWZhdWx0OjEmcD94KGUsdCxuLG8scixzLGksbCxjKTo2JnA/RihlLHQsbixvLHIscyxpLGwsYyk6KDY0JnB8fDEyOCZwKSYmYS5wcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLHRlKX1udWxsIT11JiZyJiZFcih1LGUmJmUucmVmLHMsdHx8ZSwhdCl9LGc9KGUsdCxvLHIpPT57aWYobnVsbD09ZSluKHQuZWw9aSh0LmNoaWxkcmVuKSxvLHIpO2Vsc2V7Y29uc3Qgbj10LmVsPWUuZWw7dC5jaGlsZHJlbiE9PWUuY2hpbGRyZW4mJmMobix0LmNoaWxkcmVuKX19LGI9KGUsdCxvLHIpPT57bnVsbD09ZT9uKHQuZWw9bCh0LmNoaWxkcmVufHxcIlwiKSxvLHIpOnQuZWw9ZS5lbH0sUz0oZSx0LG4sbyk9PntbZS5lbCxlLmFuY2hvcl09aChlLmNoaWxkcmVuLHQsbixvLGUuZWwsZS5hbmNob3IpfSx4PShlLHQsbixvLHIscyxpLGwsYyk9PntpPWl8fFwic3ZnXCI9PT10LnR5cGUsbnVsbD09ZT9DKHQsbixvLHIscyxpLGwsYyk6RShlLHQscixzLGksbCxjKX0sQz0oZSx0LG8saSxsLGMsdSxwKT0+e2xldCBmLGg7Y29uc3R7dHlwZTptLHByb3BzOmcsc2hhcGVGbGFnOnYsdHJhbnNpdGlvbjp5LHBhdGNoRmxhZzpfLGRpcnM6Yn09ZTtpZihlLmVsJiZ2b2lkIDAhPT1kJiYtMT09PV8pZj1lLmVsPWQoZS5lbCk7ZWxzZXtpZihmPWUuZWw9cyhlLnR5cGUsYyxnJiZnLmlzLGcpLDgmdj9hKGYsZS5jaGlsZHJlbik6MTYmdiYmVChlLmNoaWxkcmVuLGYsbnVsbCxpLGwsYyYmXCJmb3JlaWduT2JqZWN0XCIhPT1tLHUscCksYiYmam8oZSxudWxsLGksXCJjcmVhdGVkXCIpLGcpe2Zvcihjb25zdCB0IGluIGcpXCJ2YWx1ZVwiPT09dHx8VSh0KXx8cihmLHQsbnVsbCxnW3RdLGMsZS5jaGlsZHJlbixpLGwsSik7XCJ2YWx1ZVwiaW4gZyYmcihmLFwidmFsdWVcIixudWxsLGcudmFsdWUpLChoPWcub25Wbm9kZUJlZm9yZU1vdW50KSYmYnMoaCxpLGUpfWsoZixlLGUuc2NvcGVJZCx1LGkpfWImJmpvKGUsbnVsbCxpLFwiYmVmb3JlTW91bnRcIik7Y29uc3QgUz0oIWx8fGwmJiFsLnBlbmRpbmdCcmFuY2gpJiZ5JiYheS5wZXJzaXN0ZWQ7UyYmeS5iZWZvcmVFbnRlcihmKSxuKGYsdCxvKSwoKGg9ZyYmZy5vblZub2RlTW91bnRlZCl8fFN8fGIpJiZQcigoKCk9PntoJiZicyhoLGksZSksUyYmeS5lbnRlcihmKSxiJiZqbyhlLG51bGwsaSxcIm1vdW50ZWRcIil9KSxsKX0saz0oZSx0LG4sbyxyKT0+e2lmKG4mJmYoZSxuKSxvKWZvcihsZXQgcz0wO3M8by5sZW5ndGg7cysrKWYoZSxvW3NdKTtpZihyKXtpZih0PT09ci5zdWJUcmVlKXtjb25zdCB0PXIudm5vZGU7ayhlLHQsdC5zY29wZUlkLHQuc2xvdFNjb3BlSWRzLHIucGFyZW50KX19fSxUPShlLHQsbixvLHIscyxpLGwsYz0wKT0+e2ZvcihsZXQgYT1jO2E8ZS5sZW5ndGg7YSsrKXtjb25zdCBjPWVbYV09bD92cyhlW2FdKTpncyhlW2FdKTttKG51bGwsYyx0LG4sbyxyLHMsaSxsKX19LEU9KGUsdCxuLG8scyxpLGwpPT57Y29uc3QgYz10LmVsPWUuZWw7bGV0e3BhdGNoRmxhZzp1LGR5bmFtaWNDaGlsZHJlbjpwLGRpcnM6Zn09dDt1fD0xNiZlLnBhdGNoRmxhZztjb25zdCBkPWUucHJvcHN8fHYsaD10LnByb3BzfHx2O2xldCBtO24mJklyKG4sITEpLChtPWgub25Wbm9kZUJlZm9yZVVwZGF0ZSkmJmJzKG0sbix0LGUpLGYmJmpvKHQsZSxuLFwiYmVmb3JlVXBkYXRlXCIpLG4mJklyKG4sITApO2NvbnN0IGc9cyYmXCJmb3JlaWduT2JqZWN0XCIhPT10LnR5cGU7aWYocD8kKGUuZHluYW1pY0NoaWxkcmVuLHAsYyxuLG8sZyxpKTpsfHxCKGUsdCxjLG51bGwsbixvLGcsaSwhMSksdT4wKXtpZigxNiZ1KU8oYyx0LGQsaCxuLG8scyk7ZWxzZSBpZigyJnUmJmQuY2xhc3MhPT1oLmNsYXNzJiZyKGMsXCJjbGFzc1wiLG51bGwsaC5jbGFzcyxzKSw0JnUmJnIoYyxcInN0eWxlXCIsZC5zdHlsZSxoLnN0eWxlLHMpLDgmdSl7Y29uc3QgaT10LmR5bmFtaWNQcm9wcztmb3IobGV0IHQ9MDt0PGkubGVuZ3RoO3QrKyl7Y29uc3QgbD1pW3RdLGE9ZFtsXSx1PWhbbF07dT09PWEmJlwidmFsdWVcIiE9PWx8fHIoYyxsLGEsdSxzLGUuY2hpbGRyZW4sbixvLEopfX0xJnUmJmUuY2hpbGRyZW4hPT10LmNoaWxkcmVuJiZhKGMsdC5jaGlsZHJlbil9ZWxzZSBsfHxudWxsIT1wfHxPKGMsdCxkLGgsbixvLHMpOygobT1oLm9uVm5vZGVVcGRhdGVkKXx8ZikmJlByKCgoKT0+e20mJmJzKG0sbix0LGUpLGYmJmpvKHQsZSxuLFwidXBkYXRlZFwiKX0pLG8pfSwkPShlLHQsbixvLHIscyxpKT0+e2ZvcihsZXQgbD0wO2w8dC5sZW5ndGg7bCsrKXtjb25zdCBjPWVbbF0sYT10W2xdLHA9Yy5lbCYmKGMudHlwZT09PVdyfHwhcnMoYyxhKXx8NzAmYy5zaGFwZUZsYWcpP3UoYy5lbCk6bjttKGMsYSxwLG51bGwsbyxyLHMsaSwhMCl9fSxPPShlLHQsbixvLHMsaSxsKT0+e2lmKG4hPT1vKXtmb3IoY29uc3QgYyBpbiBvKXtpZihVKGMpKWNvbnRpbnVlO2NvbnN0IGE9b1tjXSx1PW5bY107YSE9PXUmJlwidmFsdWVcIiE9PWMmJnIoZSxjLHUsYSxsLHQuY2hpbGRyZW4scyxpLEopfWlmKG4hPT12KWZvcihjb25zdCBjIGluIG4pVShjKXx8YyBpbiBvfHxyKGUsYyxuW2NdLG51bGwsbCx0LmNoaWxkcmVuLHMsaSxKKTtcInZhbHVlXCJpbiBvJiZyKGUsXCJ2YWx1ZVwiLG4udmFsdWUsby52YWx1ZSl9fSxSPShlLHQsbyxyLHMsbCxjLGEsdSk9Pntjb25zdCBwPXQuZWw9ZT9lLmVsOmkoXCJcIiksZj10LmFuY2hvcj1lP2UuYW5jaG9yOmkoXCJcIik7bGV0e3BhdGNoRmxhZzpkLGR5bmFtaWNDaGlsZHJlbjpoLHNsb3RTY29wZUlkczptfT10O20mJihhPWE/YS5jb25jYXQobSk6bSksbnVsbD09ZT8obihwLG8sciksbihmLG8sciksVCh0LmNoaWxkcmVuLG8sZixzLGwsYyxhLHUpKTpkPjAmJjY0JmQmJmgmJmUuZHluYW1pY0NoaWxkcmVuPygkKGUuZHluYW1pY0NoaWxkcmVuLGgsbyxzLGwsYyxhKSwobnVsbCE9dC5rZXl8fHMmJnQ9PT1zLnN1YlRyZWUpJiZCcihlLHQsITApKTpCKGUsdCxvLGYscyxsLGMsYSx1KX0sRj0oZSx0LG4sbyxyLHMsaSxsLGMpPT57dC5zbG90U2NvcGVJZHM9bCxudWxsPT1lPzUxMiZ0LnNoYXBlRmxhZz9yLmN0eC5hY3RpdmF0ZSh0LG4sbyxpLGMpOlAodCxuLG8scixzLGksYyk6QShlLHQsYyl9LFA9KGUsdCxuLG8scixzLGkpPT57Y29uc3QgbD1lLmNvbXBvbmVudD1mdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLnR5cGUscj0odD90LmFwcENvbnRleHQ6ZS5hcHBDb250ZXh0KXx8U3Mscz17dWlkOnhzKyssdm5vZGU6ZSx0eXBlOm8scGFyZW50OnQsYXBwQ29udGV4dDpyLHJvb3Q6bnVsbCxuZXh0Om51bGwsc3ViVHJlZTpudWxsLGVmZmVjdDpudWxsLHVwZGF0ZTpudWxsLHNjb3BlOm5ldyBuZSghMCkscmVuZGVyOm51bGwscHJveHk6bnVsbCxleHBvc2VkOm51bGwsZXhwb3NlUHJveHk6bnVsbCx3aXRoUHJveHk6bnVsbCxwcm92aWRlczp0P3QucHJvdmlkZXM6T2JqZWN0LmNyZWF0ZShyLnByb3ZpZGVzKSxhY2Nlc3NDYWNoZTpudWxsLHJlbmRlckNhY2hlOltdLGNvbXBvbmVudHM6bnVsbCxkaXJlY3RpdmVzOm51bGwscHJvcHNPcHRpb25zOm1yKG8sciksZW1pdHNPcHRpb25zOlRuKG8sciksZW1pdDpudWxsLGVtaXR0ZWQ6bnVsbCxwcm9wc0RlZmF1bHRzOnYsaW5oZXJpdEF0dHJzOm8uaW5oZXJpdEF0dHJzLGN0eDp2LGRhdGE6dixwcm9wczp2LGF0dHJzOnYsc2xvdHM6dixyZWZzOnYsc2V0dXBTdGF0ZTp2LHNldHVwQ29udGV4dDpudWxsLHN1c3BlbnNlOm4sc3VzcGVuc2VJZDpuP24ucGVuZGluZ0lkOjAsYXN5bmNEZXA6bnVsbCxhc3luY1Jlc29sdmVkOiExLGlzTW91bnRlZDohMSxpc1VubW91bnRlZDohMSxpc0RlYWN0aXZhdGVkOiExLGJjOm51bGwsYzpudWxsLGJtOm51bGwsbTpudWxsLGJ1Om51bGwsdTpudWxsLHVtOm51bGwsYnVtOm51bGwsZGE6bnVsbCxhOm51bGwscnRnOm51bGwscnRjOm51bGwsZWM6bnVsbCxzcDpudWxsfTtzLmN0eD17XzpzfSxzLnJvb3Q9dD90LnJvb3Q6cyxzLmVtaXQ9a24uYmluZChudWxsLHMpLGUuY2UmJmUuY2Uocyk7cmV0dXJuIHN9KGUsbyxyKTtpZih5byhlKSYmKGwuY3R4LnJlbmRlcmVyPXRlKSxmdW5jdGlvbihlLHQ9ITEpe09zPXQ7Y29uc3R7cHJvcHM6bixjaGlsZHJlbjpvfT1lLnZub2RlLHI9TnMoZSk7KGZ1bmN0aW9uKGUsdCxuLG89ITEpe2NvbnN0IHI9e30scz17fTtRKHMsaXMsMSksZS5wcm9wc0RlZmF1bHRzPU9iamVjdC5jcmVhdGUobnVsbCksZHIoZSx0LHIscyk7Zm9yKGNvbnN0IGkgaW4gZS5wcm9wc09wdGlvbnNbMF0paSBpbiByfHwocltpXT12b2lkIDApO2UucHJvcHM9bj9vP3I6dnQocik6ZS50eXBlLnByb3BzP3I6cyxlLmF0dHJzPXN9KShlLG4scix0KSwoKGUsdCk9PntpZigzMiZlLnZub2RlLnNoYXBlRmxhZyl7Y29uc3Qgbj10Ll87bj8oZS5zbG90cz1rdCh0KSxRKHQsXCJfXCIsbikpOkNyKHQsZS5zbG90cz17fSl9ZWxzZSBlLnNsb3RzPXt9LHQmJndyKGUsdCk7UShlLnNsb3RzLGlzLDEpfSkoZSxvKTtjb25zdCBzPXI/ZnVuY3Rpb24oZSx0KXtjb25zdCBuPWUudHlwZTtlLmFjY2Vzc0NhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksZS5wcm94eT1UdChuZXcgUHJveHkoZS5jdHgsZXIpKTtjb25zdHtzZXR1cDpvfT1uO2lmKG8pe2NvbnN0IG49ZS5zZXR1cENvbnRleHQ9by5sZW5ndGg+MT9NcyhlKTpudWxsO2tzKGUpLHhlKCk7Y29uc3Qgcj1ZdChvLGUsMCxbZS5wcm9wcyxuXSk7aWYoQ2UoKSxUcygpLFYocikpe2lmKHIudGhlbihUcyxUcyksdClyZXR1cm4gci50aGVuKChuPT57UnMoZSxuLHQpfSkpLmNhdGNoKCh0PT57UXQodCxlLDApfSkpO2UuYXN5bmNEZXA9cn1lbHNlIFJzKGUscix0KX1lbHNlIEFzKGUsdCl9KGUsdCk6dm9pZCAwO09zPSExfShsKSxsLmFzeW5jRGVwKXtpZihyJiZyLnJlZ2lzdGVyRGVwKGwsTSksIWUuZWwpe2NvbnN0IGU9bC5zdWJUcmVlPXVzKEtyKTtiKG51bGwsZSx0LG4pfX1lbHNlIE0obCxlLHQsbixyLHMsaSl9LEE9KGUsdCxuKT0+e2NvbnN0IG89dC5jb21wb25lbnQ9ZS5jb21wb25lbnQ7aWYoZnVuY3Rpb24oZSx0LG4pe2NvbnN0e3Byb3BzOm8sY2hpbGRyZW46cixjb21wb25lbnQ6c309ZSx7cHJvcHM6aSxjaGlsZHJlbjpsLHBhdGNoRmxhZzpjfT10LGE9cy5lbWl0c09wdGlvbnM7aWYodC5kaXJzfHx0LnRyYW5zaXRpb24pcmV0dXJuITA7aWYoIShuJiZjPj0wKSlyZXR1cm4hKCFyJiYhbHx8bCYmbC4kc3RhYmxlKXx8byE9PWkmJihvPyFpfHxCbihvLGksYSk6ISFpKTtpZigxMDI0JmMpcmV0dXJuITA7aWYoMTYmYylyZXR1cm4gbz9CbihvLGksYSk6ISFpO2lmKDgmYyl7Y29uc3QgZT10LmR5bmFtaWNQcm9wcztmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3Qgbj1lW3RdO2lmKGlbbl0hPT1vW25dJiYhTm4oYSxuKSlyZXR1cm4hMH19cmV0dXJuITF9KGUsdCxuKSl7aWYoby5hc3luY0RlcCYmIW8uYXN5bmNSZXNvbHZlZClyZXR1cm4gdm9pZCBJKG8sdCxuKTtvLm5leHQ9dCxmdW5jdGlvbihlKXtjb25zdCB0PXRuLmluZGV4T2YoZSk7dD5ubiYmdG4uc3BsaWNlKHQsMSl9KG8udXBkYXRlKSxvLnVwZGF0ZSgpfWVsc2UgdC5lbD1lLmVsLG8udm5vZGU9dH0sTT0oZSx0LG4sbyxyLHMsaSk9Pntjb25zdCBsPWUuZWZmZWN0PW5ldyBnZSgoKCk9PntpZihlLmlzTW91bnRlZCl7bGV0IHQse25leHQ6bixidTpvLHU6bCxwYXJlbnQ6Yyx2bm9kZTphfT1lLHA9bjtJcihlLCExKSxuPyhuLmVsPWEuZWwsSShlLG4saSkpOm49YSxvJiZaKG8pLCh0PW4ucHJvcHMmJm4ucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkmJmJzKHQsYyxuLGEpLElyKGUsITApO2NvbnN0IGY9TW4oZSksZD1lLnN1YlRyZWU7ZS5zdWJUcmVlPWYsbShkLGYsdShkLmVsKSxZKGQpLGUscixzKSxuLmVsPWYuZWwsbnVsbD09PXAmJkxuKGUsZi5lbCksbCYmUHIobCxyKSwodD1uLnByb3BzJiZuLnByb3BzLm9uVm5vZGVVcGRhdGVkKSYmUHIoKCgpPT5icyh0LGMsbixhKSkscil9ZWxzZXtsZXQgaTtjb25zdHtlbDpsLHByb3BzOmN9PXQse2JtOmEsbTp1LHBhcmVudDpwfT1lLGY9bW8odCk7aWYoSXIoZSwhMSksYSYmWihhKSwhZiYmKGk9YyYmYy5vblZub2RlQmVmb3JlTW91bnQpJiZicyhpLHAsdCksSXIoZSwhMCksbCYmcmUpe2NvbnN0IG49KCk9PntlLnN1YlRyZWU9TW4oZSkscmUobCxlLnN1YlRyZWUsZSxyLG51bGwpfTtmP3QudHlwZS5fX2FzeW5jTG9hZGVyKCkudGhlbigoKCk9PiFlLmlzVW5tb3VudGVkJiZuKCkpKTpuKCl9ZWxzZXtjb25zdCBpPWUuc3ViVHJlZT1NbihlKTttKG51bGwsaSxuLG8sZSxyLHMpLHQuZWw9aS5lbH1pZih1JiZQcih1LHIpLCFmJiYoaT1jJiZjLm9uVm5vZGVNb3VudGVkKSl7Y29uc3QgZT10O1ByKCgoKT0+YnMoaSxwLGUpKSxyKX0oMjU2JnQuc2hhcGVGbGFnfHxwJiZtbyhwLnZub2RlKSYmMjU2JnAudm5vZGUuc2hhcGVGbGFnKSYmZS5hJiZQcihlLmEsciksZS5pc01vdW50ZWQ9ITAsdD1uPW89bnVsbH19KSwoKCk9PmhuKGMpKSxlLnNjb3BlKSxjPWUudXBkYXRlPSgpPT5sLnJ1bigpO2MuaWQ9ZS51aWQsSXIoZSwhMCksYygpfSxJPShlLHQsbik9Pnt0LmNvbXBvbmVudD1lO2NvbnN0IG89ZS52bm9kZS5wcm9wcztlLnZub2RlPXQsZS5uZXh0PW51bGwsZnVuY3Rpb24oZSx0LG4sbyl7Y29uc3R7cHJvcHM6cixhdHRyczpzLHZub2RlOntwYXRjaEZsYWc6aX19PWUsbD1rdChyKSxbY109ZS5wcm9wc09wdGlvbnM7bGV0IGE9ITE7aWYoIShvfHxpPjApfHwxNiZpKXtsZXQgbztkcihlLHQscixzKSYmKGE9ITApO2Zvcihjb25zdCBzIGluIGwpdCYmKE4odCxzKXx8KG89RyhzKSkhPT1zJiZOKHQsbykpfHwoYz8hbnx8dm9pZCAwPT09bltzXSYmdm9pZCAwPT09bltvXXx8KHJbc109aHIoYyxsLHMsdm9pZCAwLGUsITApKTpkZWxldGUgcltzXSk7aWYocyE9PWwpZm9yKGNvbnN0IGUgaW4gcyl0JiZOKHQsZSl8fChkZWxldGUgc1tlXSxhPSEwKX1lbHNlIGlmKDgmaSl7Y29uc3Qgbj1lLnZub2RlLmR5bmFtaWNQcm9wcztmb3IobGV0IG89MDtvPG4ubGVuZ3RoO28rKyl7bGV0IGk9bltvXTtpZihObihlLmVtaXRzT3B0aW9ucyxpKSljb250aW51ZTtjb25zdCB1PXRbaV07aWYoYylpZihOKHMsaSkpdSE9PXNbaV0mJihzW2ldPXUsYT0hMCk7ZWxzZXtjb25zdCB0PXooaSk7clt0XT1ocihjLGwsdCx1LGUsITEpfWVsc2UgdSE9PXNbaV0mJihzW2ldPXUsYT0hMCl9fWEmJlRlKGUsXCJzZXRcIixcIiRhdHRyc1wiKX0oZSx0LnByb3BzLG8sbiksKChlLHQsbik9Pntjb25zdHt2bm9kZTpvLHNsb3RzOnJ9PWU7bGV0IHM9ITAsaT12O2lmKDMyJm8uc2hhcGVGbGFnKXtjb25zdCBlPXQuXztlP24mJjE9PT1lP3M9ITE6KHcocix0KSxufHwxIT09ZXx8ZGVsZXRlIHIuXyk6KHM9IXQuJHN0YWJsZSxDcih0LHIpKSxpPXR9ZWxzZSB0JiYod3IoZSx0KSxpPXtkZWZhdWx0OjF9KTtpZihzKWZvcihjb25zdCBsIGluIHIpYnIobCl8fGwgaW4gaXx8ZGVsZXRlIHJbbF19KShlLHQuY2hpbGRyZW4sbikseGUoKSx5bih2b2lkIDAsZS51cGRhdGUpLENlKCl9LEI9KGUsdCxuLG8scixzLGksbCxjPSExKT0+e2NvbnN0IHU9ZSYmZS5jaGlsZHJlbixwPWU/ZS5zaGFwZUZsYWc6MCxmPXQuY2hpbGRyZW4se3BhdGNoRmxhZzpkLHNoYXBlRmxhZzpofT10O2lmKGQ+MCl7aWYoMTI4JmQpcmV0dXJuIHZvaWQgaih1LGYsbixvLHIscyxpLGwsYyk7aWYoMjU2JmQpcmV0dXJuIHZvaWQgTCh1LGYsbixvLHIscyxpLGwsYyl9OCZoPygxNiZwJiZKKHUscixzKSxmIT09dSYmYShuLGYpKToxNiZwPzE2Jmg/aih1LGYsbixvLHIscyxpLGwsYyk6Sih1LHIscywhMCk6KDgmcCYmYShuLFwiXCIpLDE2JmgmJlQoZixuLG8scixzLGksbCxjKSl9LEw9KGUsdCxuLG8scixzLGksbCxjKT0+e2NvbnN0IGE9KGU9ZXx8eSkubGVuZ3RoLHU9KHQ9dHx8eSkubGVuZ3RoLHA9TWF0aC5taW4oYSx1KTtsZXQgZjtmb3IoZj0wO2Y8cDtmKyspe2NvbnN0IG89dFtmXT1jP3ZzKHRbZl0pOmdzKHRbZl0pO20oZVtmXSxvLG4sbnVsbCxyLHMsaSxsLGMpfWE+dT9KKGUscixzLCEwLCExLHApOlQodCxuLG8scixzLGksbCxjLHApfSxqPShlLHQsbixvLHIscyxpLGwsYyk9PntsZXQgYT0wO2NvbnN0IHU9dC5sZW5ndGg7bGV0IHA9ZS5sZW5ndGgtMSxmPXUtMTtmb3IoO2E8PXAmJmE8PWY7KXtjb25zdCBvPWVbYV0sdT10W2FdPWM/dnModFthXSk6Z3ModFthXSk7aWYoIXJzKG8sdSkpYnJlYWs7bShvLHUsbixudWxsLHIscyxpLGwsYyksYSsrfWZvcig7YTw9cCYmYTw9Zjspe2NvbnN0IG89ZVtwXSxhPXRbZl09Yz92cyh0W2ZdKTpncyh0W2ZdKTtpZighcnMobyxhKSlicmVhazttKG8sYSxuLG51bGwscixzLGksbCxjKSxwLS0sZi0tfWlmKGE+cCl7aWYoYTw9Zil7Y29uc3QgZT1mKzEscD1lPHU/dFtlXS5lbDpvO2Zvcig7YTw9ZjspbShudWxsLHRbYV09Yz92cyh0W2FdKTpncyh0W2FdKSxuLHAscixzLGksbCxjKSxhKyt9fWVsc2UgaWYoYT5mKWZvcig7YTw9cDspSChlW2FdLHIscywhMCksYSsrO2Vsc2V7Y29uc3QgZD1hLGg9YSxnPW5ldyBNYXA7Zm9yKGE9aDthPD1mO2ErKyl7Y29uc3QgZT10W2FdPWM/dnModFthXSk6Z3ModFthXSk7bnVsbCE9ZS5rZXkmJmcuc2V0KGUua2V5LGEpfWxldCB2LF89MDtjb25zdCBiPWYtaCsxO2xldCBTPSExLHg9MDtjb25zdCBDPW5ldyBBcnJheShiKTtmb3IoYT0wO2E8YjthKyspQ1thXT0wO2ZvcihhPWQ7YTw9cDthKyspe2NvbnN0IG89ZVthXTtpZihfPj1iKXtIKG8scixzLCEwKTtjb250aW51ZX1sZXQgdTtpZihudWxsIT1vLmtleSl1PWcuZ2V0KG8ua2V5KTtlbHNlIGZvcih2PWg7djw9Zjt2KyspaWYoMD09PUNbdi1oXSYmcnMobyx0W3ZdKSl7dT12O2JyZWFrfXZvaWQgMD09PXU/SChvLHIscywhMCk6KENbdS1oXT1hKzEsdT49eD94PXU6Uz0hMCxtKG8sdFt1XSxuLG51bGwscixzLGksbCxjKSxfKyspfWNvbnN0IHc9Uz9mdW5jdGlvbihlKXtjb25zdCB0PWUuc2xpY2UoKSxuPVswXTtsZXQgbyxyLHMsaSxsO2NvbnN0IGM9ZS5sZW5ndGg7Zm9yKG89MDtvPGM7bysrKXtjb25zdCBjPWVbb107aWYoMCE9PWMpe2lmKHI9bltuLmxlbmd0aC0xXSxlW3JdPGMpe3Rbb109cixuLnB1c2gobyk7Y29udGludWV9Zm9yKHM9MCxpPW4ubGVuZ3RoLTE7czxpOylsPXMraT4+MSxlW25bbF1dPGM/cz1sKzE6aT1sO2M8ZVtuW3NdXSYmKHM+MCYmKHRbb109bltzLTFdKSxuW3NdPW8pfX1zPW4ubGVuZ3RoLGk9bltzLTFdO2Zvcig7cy0tID4wOyluW3NdPWksaT10W2ldO3JldHVybiBufShDKTp5O2Zvcih2PXcubGVuZ3RoLTEsYT1iLTE7YT49MDthLS0pe2NvbnN0IGU9aCthLHA9dFtlXSxmPWUrMTx1P3RbZSsxXS5lbDpvOzA9PT1DW2FdP20obnVsbCxwLG4sZixyLHMsaSxsLGMpOlMmJih2PDB8fGEhPT13W3ZdP0QocCxuLGYsMik6di0tKX19fSxEPShlLHQsbyxyLHM9bnVsbCk9Pntjb25zdHtlbDppLHR5cGU6bCx0cmFuc2l0aW9uOmMsY2hpbGRyZW46YSxzaGFwZUZsYWc6dX09ZTtpZig2JnUpcmV0dXJuIHZvaWQgRChlLmNvbXBvbmVudC5zdWJUcmVlLHQsbyxyKTtpZigxMjgmdSlyZXR1cm4gdm9pZCBlLnN1c3BlbnNlLm1vdmUodCxvLHIpO2lmKDY0JnUpcmV0dXJuIHZvaWQgbC5tb3ZlKGUsdCxvLHRlKTtpZihsPT09V3Ipe24oaSx0LG8pO2ZvcihsZXQgZT0wO2U8YS5sZW5ndGg7ZSsrKUQoYVtlXSx0LG8scik7cmV0dXJuIHZvaWQgbihlLmFuY2hvcix0LG8pfWlmKGw9PT1HcilyZXR1cm4gdm9pZCgoe2VsOmUsYW5jaG9yOnR9LG8scik9PntsZXQgcztmb3IoO2UmJmUhPT10OylzPXAoZSksbihlLG8sciksZT1zO24odCxvLHIpfSkoZSx0LG8pO2lmKDIhPT1yJiYxJnUmJmMpaWYoMD09PXIpYy5iZWZvcmVFbnRlcihpKSxuKGksdCxvKSxQcigoKCk9PmMuZW50ZXIoaSkpLHMpO2Vsc2V7Y29uc3R7bGVhdmU6ZSxkZWxheUxlYXZlOnIsYWZ0ZXJMZWF2ZTpzfT1jLGw9KCk9Pm4oaSx0LG8pLGE9KCk9PntlKGksKCgpPT57bCgpLHMmJnMoKX0pKX07cj9yKGksbCxhKTphKCl9ZWxzZSBuKGksdCxvKX0sSD0oZSx0LG4sbz0hMSxyPSExKT0+e2NvbnN0e3R5cGU6cyxwcm9wczppLHJlZjpsLGNoaWxkcmVuOmMsZHluYW1pY0NoaWxkcmVuOmEsc2hhcGVGbGFnOnUscGF0Y2hGbGFnOnAsZGlyczpmfT1lO2lmKG51bGwhPWwmJkVyKGwsbnVsbCxuLGUsITApLDI1NiZ1KXJldHVybiB2b2lkIHQuY3R4LmRlYWN0aXZhdGUoZSk7Y29uc3QgZD0xJnUmJmYsaD0hbW8oZSk7bGV0IG07aWYoaCYmKG09aSYmaS5vblZub2RlQmVmb3JlVW5tb3VudCkmJmJzKG0sdCxlKSw2JnUpcShlLmNvbXBvbmVudCxuLG8pO2Vsc2V7aWYoMTI4JnUpcmV0dXJuIHZvaWQgZS5zdXNwZW5zZS51bm1vdW50KG4sbyk7ZCYmam8oZSxudWxsLHQsXCJiZWZvcmVVbm1vdW50XCIpLDY0JnU/ZS50eXBlLnJlbW92ZShlLHQsbixyLHRlLG8pOmEmJihzIT09V3J8fHA+MCYmNjQmcCk/SihhLHQsbiwhMSwhMCk6KHM9PT1XciYmMzg0JnB8fCFyJiYxNiZ1KSYmSihjLHQsbiksbyYmVyhlKX0oaCYmKG09aSYmaS5vblZub2RlVW5tb3VudGVkKXx8ZCkmJlByKCgoKT0+e20mJmJzKG0sdCxlKSxkJiZqbyhlLG51bGwsdCxcInVubW91bnRlZFwiKX0pLG4pfSxXPWU9Pntjb25zdHt0eXBlOnQsZWw6bixhbmNob3I6cix0cmFuc2l0aW9uOnN9PWU7aWYodD09PVdyKXJldHVybiB2b2lkIEsobixyKTtpZih0PT09R3IpcmV0dXJuIHZvaWQoKHtlbDplLGFuY2hvcjp0fSk9PntsZXQgbjtmb3IoO2UmJmUhPT10OyluPXAoZSksbyhlKSxlPW47byh0KX0pKGUpO2NvbnN0IGk9KCk9PntvKG4pLHMmJiFzLnBlcnNpc3RlZCYmcy5hZnRlckxlYXZlJiZzLmFmdGVyTGVhdmUoKX07aWYoMSZlLnNoYXBlRmxhZyYmcyYmIXMucGVyc2lzdGVkKXtjb25zdHtsZWF2ZTp0LGRlbGF5TGVhdmU6b309cyxyPSgpPT50KG4saSk7bz9vKGUuZWwsaSxyKTpyKCl9ZWxzZSBpKCl9LEs9KGUsdCk9PntsZXQgbjtmb3IoO2UhPT10OyluPXAoZSksbyhlKSxlPW47byh0KX0scT0oZSx0LG4pPT57Y29uc3R7YnVtOm8sc2NvcGU6cix1cGRhdGU6cyxzdWJUcmVlOmksdW06bH09ZTtvJiZaKG8pLHIuc3RvcCgpLHMmJihzLmFjdGl2ZT0hMSxIKGksZSx0LG4pKSxsJiZQcihsLHQpLFByKCgoKT0+e2UuaXNVbm1vdW50ZWQ9ITB9KSx0KSx0JiZ0LnBlbmRpbmdCcmFuY2gmJiF0LmlzVW5tb3VudGVkJiZlLmFzeW5jRGVwJiYhZS5hc3luY1Jlc29sdmVkJiZlLnN1c3BlbnNlSWQ9PT10LnBlbmRpbmdJZCYmKHQuZGVwcy0tLDA9PT10LmRlcHMmJnQucmVzb2x2ZSgpKX0sSj0oZSx0LG4sbz0hMSxyPSExLHM9MCk9Pntmb3IobGV0IGk9cztpPGUubGVuZ3RoO2krKylIKGVbaV0sdCxuLG8scil9LFk9ZT0+NiZlLnNoYXBlRmxhZz9ZKGUuY29tcG9uZW50LnN1YlRyZWUpOjEyOCZlLnNoYXBlRmxhZz9lLnN1c3BlbnNlLm5leHQoKTpwKGUuYW5jaG9yfHxlLmVsKSxYPShlLHQsbik9PntudWxsPT1lP3QuX3Zub2RlJiZIKHQuX3Zub2RlLG51bGwsbnVsbCwhMCk6bSh0Ll92bm9kZXx8bnVsbCxlLHQsbnVsbCxudWxsLG51bGwsbiksX24oKSx0Ll92bm9kZT1lfSx0ZT17cDptLHVtOkgsbTpELHI6VyxtdDpQLG1jOlQscGM6QixwYmM6JCxuOlksbzplfTtsZXQgb2UscmU7cmV0dXJuIHQmJihbb2UscmVdPXQodGUpKSx7cmVuZGVyOlgsaHlkcmF0ZTpvZSxjcmVhdGVBcHA6TnIoWCxvZSl9fWZ1bmN0aW9uIElyKHtlZmZlY3Q6ZSx1cGRhdGU6dH0sbil7ZS5hbGxvd1JlY3Vyc2U9dC5hbGxvd1JlY3Vyc2U9bn1mdW5jdGlvbiBCcihlLHQsbj0hMSl7Y29uc3Qgbz1lLmNoaWxkcmVuLHI9dC5jaGlsZHJlbjtpZihFKG8pJiZFKHIpKWZvcihsZXQgcz0wO3M8by5sZW5ndGg7cysrKXtjb25zdCBlPW9bc107bGV0IHQ9cltzXTsxJnQuc2hhcGVGbGFnJiYhdC5keW5hbWljQ2hpbGRyZW4mJigodC5wYXRjaEZsYWc8PTB8fDMyPT09dC5wYXRjaEZsYWcpJiYodD1yW3NdPXZzKHJbc10pLHQuZWw9ZS5lbCksbnx8QnIoZSx0KSl9fWNvbnN0IExyPWU9PmUmJihlLmRpc2FibGVkfHxcIlwiPT09ZS5kaXNhYmxlZCksanI9ZT0+XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNWR0VsZW1lbnQmJmUgaW5zdGFuY2VvZiBTVkdFbGVtZW50LFVyPShlLHQpPT57Y29uc3Qgbj1lJiZlLnRvO2lmKFAobikpe2lmKHQpe3JldHVybiB0KG4pfXJldHVybiBudWxsfXJldHVybiBufTtmdW5jdGlvbiBEcihlLHQsbix7bzp7aW5zZXJ0Om99LG06cn0scz0yKXswPT09cyYmbyhlLnRhcmdldEFuY2hvcix0LG4pO2NvbnN0e2VsOmksYW5jaG9yOmwsc2hhcGVGbGFnOmMsY2hpbGRyZW46YSxwcm9wczp1fT1lLHA9Mj09PXM7aWYocCYmbyhpLHQsbiksKCFwfHxMcih1KSkmJjE2JmMpZm9yKGxldCBmPTA7ZjxhLmxlbmd0aDtmKyspcihhW2ZdLHQsbiwyKTtwJiZvKGwsdCxuKX1jb25zdCBIcj17X19pc1RlbGVwb3J0OiEwLHByb2Nlc3MoZSx0LG4sbyxyLHMsaSxsLGMsYSl7Y29uc3R7bWM6dSxwYzpwLHBiYzpmLG86e2luc2VydDpkLHF1ZXJ5U2VsZWN0b3I6aCxjcmVhdGVUZXh0Om19fT1hLGc9THIodC5wcm9wcyk7bGV0e3NoYXBlRmxhZzp2LGNoaWxkcmVuOnksZHluYW1pY0NoaWxkcmVuOl99PXQ7aWYobnVsbD09ZSl7Y29uc3QgZT10LmVsPW0oXCJcIiksYT10LmFuY2hvcj1tKFwiXCIpO2QoZSxuLG8pLGQoYSxuLG8pO2NvbnN0IHA9dC50YXJnZXQ9VXIodC5wcm9wcyxoKSxmPXQudGFyZ2V0QW5jaG9yPW0oXCJcIik7cCYmKGQoZixwKSxpPWl8fGpyKHApKTtjb25zdCBfPShlLHQpPT57MTYmdiYmdSh5LGUsdCxyLHMsaSxsLGMpfTtnP18obixhKTpwJiZfKHAsZil9ZWxzZXt0LmVsPWUuZWw7Y29uc3Qgbz10LmFuY2hvcj1lLmFuY2hvcix1PXQudGFyZ2V0PWUudGFyZ2V0LGQ9dC50YXJnZXRBbmNob3I9ZS50YXJnZXRBbmNob3IsbT1McihlLnByb3BzKSx2PW0/bjp1LHk9bT9vOmQ7aWYoaT1pfHxqcih1KSxfPyhmKGUuZHluYW1pY0NoaWxkcmVuLF8sdixyLHMsaSxsKSxCcihlLHQsITApKTpjfHxwKGUsdCx2LHkscixzLGksbCwhMSksZyltfHxEcih0LG4sbyxhLDEpO2Vsc2UgaWYoKHQucHJvcHMmJnQucHJvcHMudG8pIT09KGUucHJvcHMmJmUucHJvcHMudG8pKXtjb25zdCBlPXQudGFyZ2V0PVVyKHQucHJvcHMsaCk7ZSYmRHIodCxlLG51bGwsYSwwKX1lbHNlIG0mJkRyKHQsdSxkLGEsMSl9fSxyZW1vdmUoZSx0LG4sbyx7dW06cixvOntyZW1vdmU6c319LGkpe2NvbnN0e3NoYXBlRmxhZzpsLGNoaWxkcmVuOmMsYW5jaG9yOmEsdGFyZ2V0QW5jaG9yOnUsdGFyZ2V0OnAscHJvcHM6Zn09ZTtpZihwJiZzKHUpLChpfHwhTHIoZikpJiYocyhhKSwxNiZsKSlmb3IobGV0IGQ9MDtkPGMubGVuZ3RoO2QrKyl7Y29uc3QgZT1jW2RdO3IoZSx0LG4sITAsISFlLmR5bmFtaWNDaGlsZHJlbil9fSxtb3ZlOkRyLGh5ZHJhdGU6ZnVuY3Rpb24oZSx0LG4sbyxyLHMse286e25leHRTaWJsaW5nOmkscGFyZW50Tm9kZTpsLHF1ZXJ5U2VsZWN0b3I6Y319LGEpe2NvbnN0IHU9dC50YXJnZXQ9VXIodC5wcm9wcyxjKTtpZih1KXtjb25zdCBjPXUuX2xwYXx8dS5maXJzdENoaWxkO2lmKDE2JnQuc2hhcGVGbGFnKWlmKExyKHQucHJvcHMpKXQuYW5jaG9yPWEoaShlKSx0LGwoZSksbixvLHIscyksdC50YXJnZXRBbmNob3I9YztlbHNle3QuYW5jaG9yPWkoZSk7bGV0IGw9Yztmb3IoO2w7KWlmKGw9aShsKSxsJiY4PT09bC5ub2RlVHlwZSYmXCJ0ZWxlcG9ydCBhbmNob3JcIj09PWwuZGF0YSl7dC50YXJnZXRBbmNob3I9bCx1Ll9scGE9dC50YXJnZXRBbmNob3ImJmkodC50YXJnZXRBbmNob3IpO2JyZWFrfWEoYyx0LHUsbixvLHIscyl9fXJldHVybiB0LmFuY2hvciYmaSh0LmFuY2hvcil9fSxXcj1TeW1ib2wodm9pZCAwKSx6cj1TeW1ib2wodm9pZCAwKSxLcj1TeW1ib2wodm9pZCAwKSxHcj1TeW1ib2wodm9pZCAwKSxxcj1bXTtsZXQgSnI9bnVsbDtmdW5jdGlvbiBZcihlPSExKXtxci5wdXNoKEpyPWU/bnVsbDpbXSl9ZnVuY3Rpb24gWnIoKXtxci5wb3AoKSxKcj1xcltxci5sZW5ndGgtMV18fG51bGx9bGV0IFFyPTE7ZnVuY3Rpb24gWHIoZSl7UXIrPWV9ZnVuY3Rpb24gZXMoZSl7cmV0dXJuIGUuZHluYW1pY0NoaWxkcmVuPVFyPjA/SnJ8fHk6bnVsbCxacigpLFFyPjAmJkpyJiZKci5wdXNoKGUpLGV9ZnVuY3Rpb24gdHMoZSx0LG4sbyxyLHMpe3JldHVybiBlcyhhcyhlLHQsbixvLHIscywhMCkpfWZ1bmN0aW9uIG5zKGUsdCxuLG8scil7cmV0dXJuIGVzKHVzKGUsdCxuLG8sciwhMCkpfWZ1bmN0aW9uIG9zKGUpe3JldHVybiEhZSYmITA9PT1lLl9fdl9pc1ZOb2RlfWZ1bmN0aW9uIHJzKGUsdCl7cmV0dXJuIGUudHlwZT09PXQudHlwZSYmZS5rZXk9PT10LmtleX1mdW5jdGlvbiBzcyhlKXt9Y29uc3QgaXM9XCJfX3ZJbnRlcm5hbFwiLGxzPSh7a2V5OmV9KT0+bnVsbCE9ZT9lOm51bGwsY3M9KHtyZWY6ZSxyZWZfa2V5OnQscmVmX2ZvcjpufSk9Pm51bGwhPWU/UChlKXx8UnQoZSl8fEYoZSk/e2k6RW4scjplLGs6dCxmOiEhbn06ZTpudWxsO2Z1bmN0aW9uIGFzKGUsdD1udWxsLG49bnVsbCxvPTAscj1udWxsLHM9KGU9PT1Xcj8wOjEpLGk9ITEsbD0hMSl7Y29uc3QgYz17X192X2lzVk5vZGU6ITAsX192X3NraXA6ITAsdHlwZTplLHByb3BzOnQsa2V5OnQmJmxzKHQpLHJlZjp0JiZjcyh0KSxzY29wZUlkOiRuLHNsb3RTY29wZUlkczpudWxsLGNoaWxkcmVuOm4sY29tcG9uZW50Om51bGwsc3VzcGVuc2U6bnVsbCxzc0NvbnRlbnQ6bnVsbCxzc0ZhbGxiYWNrOm51bGwsZGlyczpudWxsLHRyYW5zaXRpb246bnVsbCxlbDpudWxsLGFuY2hvcjpudWxsLHRhcmdldDpudWxsLHRhcmdldEFuY2hvcjpudWxsLHN0YXRpY0NvdW50OjAsc2hhcGVGbGFnOnMscGF0Y2hGbGFnOm8sZHluYW1pY1Byb3BzOnIsZHluYW1pY0NoaWxkcmVuOm51bGwsYXBwQ29udGV4dDpudWxsfTtyZXR1cm4gbD8oeXMoYyxuKSwxMjgmcyYmZS5ub3JtYWxpemUoYykpOm4mJihjLnNoYXBlRmxhZ3w9UChuKT84OjE2KSxRcj4wJiYhaSYmSnImJihjLnBhdGNoRmxhZz4wfHw2JnMpJiYzMiE9PWMucGF0Y2hGbGFnJiZKci5wdXNoKGMpLGN9Y29uc3QgdXM9ZnVuY3Rpb24oZSx0PW51bGwsbj1udWxsLG89MCxzPW51bGwsaT0hMSl7ZSYmZSE9PURvfHwoZT1Lcik7aWYob3MoZSkpe2NvbnN0IG89ZnMoZSx0LCEwKTtyZXR1cm4gbiYmeXMobyxuKSxRcj4wJiYhaSYmSnImJig2Jm8uc2hhcGVGbGFnP0pyW0pyLmluZGV4T2YoZSldPW86SnIucHVzaChvKSksby5wYXRjaEZsYWd8PS0yLG99bD1lLEYobCkmJlwiX192Y2NPcHRzXCJpbiBsJiYoZT1lLl9fdmNjT3B0cyk7dmFyIGw7aWYodCl7dD1wcyh0KTtsZXR7Y2xhc3M6ZSxzdHlsZTpufT10O2UmJiFQKGUpJiYodC5jbGFzcz1jKGUpKSxNKG4pJiYod3QobikmJiFFKG4pJiYobj13KHt9LG4pKSx0LnN0eWxlPXIobikpfWNvbnN0IGE9UChlKT8xOmpuKGUpPzEyODooZT0+ZS5fX2lzVGVsZXBvcnQpKGUpPzY0Ok0oZSk/NDpGKGUpPzI6MDtyZXR1cm4gYXMoZSx0LG4sbyxzLGEsaSwhMCl9O2Z1bmN0aW9uIHBzKGUpe3JldHVybiBlP3d0KGUpfHxpcyBpbiBlP3coe30sZSk6ZTpudWxsfWZ1bmN0aW9uIGZzKGUsdCxuPSExKXtjb25zdHtwcm9wczpvLHJlZjpyLHBhdGNoRmxhZzpzLGNoaWxkcmVuOml9PWUsbD10P19zKG98fHt9LHQpOm87cmV0dXJue19fdl9pc1ZOb2RlOiEwLF9fdl9za2lwOiEwLHR5cGU6ZS50eXBlLHByb3BzOmwsa2V5OmwmJmxzKGwpLHJlZjp0JiZ0LnJlZj9uJiZyP0Uocik/ci5jb25jYXQoY3ModCkpOltyLGNzKHQpXTpjcyh0KTpyLHNjb3BlSWQ6ZS5zY29wZUlkLHNsb3RTY29wZUlkczplLnNsb3RTY29wZUlkcyxjaGlsZHJlbjppLHRhcmdldDplLnRhcmdldCx0YXJnZXRBbmNob3I6ZS50YXJnZXRBbmNob3Isc3RhdGljQ291bnQ6ZS5zdGF0aWNDb3VudCxzaGFwZUZsYWc6ZS5zaGFwZUZsYWcscGF0Y2hGbGFnOnQmJmUudHlwZSE9PVdyPy0xPT09cz8xNjoxNnxzOnMsZHluYW1pY1Byb3BzOmUuZHluYW1pY1Byb3BzLGR5bmFtaWNDaGlsZHJlbjplLmR5bmFtaWNDaGlsZHJlbixhcHBDb250ZXh0OmUuYXBwQ29udGV4dCxkaXJzOmUuZGlycyx0cmFuc2l0aW9uOmUudHJhbnNpdGlvbixjb21wb25lbnQ6ZS5jb21wb25lbnQsc3VzcGVuc2U6ZS5zdXNwZW5zZSxzc0NvbnRlbnQ6ZS5zc0NvbnRlbnQmJmZzKGUuc3NDb250ZW50KSxzc0ZhbGxiYWNrOmUuc3NGYWxsYmFjayYmZnMoZS5zc0ZhbGxiYWNrKSxlbDplLmVsLGFuY2hvcjplLmFuY2hvcn19ZnVuY3Rpb24gZHMoZT1cIiBcIix0PTApe3JldHVybiB1cyh6cixudWxsLGUsdCl9ZnVuY3Rpb24gaHMoZSx0KXtjb25zdCBuPXVzKEdyLG51bGwsZSk7cmV0dXJuIG4uc3RhdGljQ291bnQ9dCxufWZ1bmN0aW9uIG1zKGU9XCJcIix0PSExKXtyZXR1cm4gdD8oWXIoKSxucyhLcixudWxsLGUpKTp1cyhLcixudWxsLGUpfWZ1bmN0aW9uIGdzKGUpe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/dXMoS3IpOkUoZSk/dXMoV3IsbnVsbCxlLnNsaWNlKCkpOlwib2JqZWN0XCI9PXR5cGVvZiBlP3ZzKGUpOnVzKHpyLG51bGwsU3RyaW5nKGUpKX1mdW5jdGlvbiB2cyhlKXtyZXR1cm4gbnVsbD09PWUuZWx8fGUubWVtbz9lOmZzKGUpfWZ1bmN0aW9uIHlzKGUsdCl7bGV0IG49MDtjb25zdHtzaGFwZUZsYWc6b309ZTtpZihudWxsPT10KXQ9bnVsbDtlbHNlIGlmKEUodCkpbj0xNjtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiB0KXtpZig2NSZvKXtjb25zdCBuPXQuZGVmYXVsdDtyZXR1cm4gdm9pZChuJiYobi5fYyYmKG4uX2Q9ITEpLHlzKGUsbigpKSxuLl9jJiYobi5fZD0hMCkpKX17bj0zMjtjb25zdCBvPXQuXztvfHxpcyBpbiB0PzM9PT1vJiZFbiYmKDE9PT1Fbi5zbG90cy5fP3QuXz0xOih0Ll89MixlLnBhdGNoRmxhZ3w9MTAyNCkpOnQuX2N0eD1Fbn19ZWxzZSBGKHQpPyh0PXtkZWZhdWx0OnQsX2N0eDpFbn0sbj0zMik6KHQ9U3RyaW5nKHQpLDY0Jm8/KG49MTYsdD1bZHModCldKTpuPTgpO2UuY2hpbGRyZW49dCxlLnNoYXBlRmxhZ3w9bn1mdW5jdGlvbiBfcyguLi5lKXtjb25zdCB0PXt9O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBvPWVbbl07Zm9yKGNvbnN0IGUgaW4gbylpZihcImNsYXNzXCI9PT1lKXQuY2xhc3MhPT1vLmNsYXNzJiYodC5jbGFzcz1jKFt0LmNsYXNzLG8uY2xhc3NdKSk7ZWxzZSBpZihcInN0eWxlXCI9PT1lKXQuc3R5bGU9cihbdC5zdHlsZSxvLnN0eWxlXSk7ZWxzZSBpZih4KGUpKXtjb25zdCBuPXRbZV0scj1vW2VdOyFyfHxuPT09cnx8RShuKSYmbi5pbmNsdWRlcyhyKXx8KHRbZV09bj9bXS5jb25jYXQobixyKTpyKX1lbHNlXCJcIiE9PWUmJih0W2VdPW9bZV0pfXJldHVybiB0fWZ1bmN0aW9uIGJzKGUsdCxuLG89bnVsbCl7WnQoZSx0LDcsW24sb10pfWNvbnN0IFNzPWtyKCk7bGV0IHhzPTA7bGV0IENzPW51bGw7Y29uc3Qgd3M9KCk9PkNzfHxFbixrcz1lPT57Q3M9ZSxlLnNjb3BlLm9uKCl9LFRzPSgpPT57Q3MmJkNzLnNjb3BlLm9mZigpLENzPW51bGx9O2Z1bmN0aW9uIE5zKGUpe3JldHVybiA0JmUudm5vZGUuc2hhcGVGbGFnfWxldCBFcywkcyxPcz0hMTtmdW5jdGlvbiBScyhlLHQsbil7Rih0KT9lLnJlbmRlcj10Ok0odCkmJihlLnNldHVwU3RhdGU9THQodCkpLEFzKGUsbil9ZnVuY3Rpb24gRnMoZSl7RXM9ZSwkcz1lPT57ZS5yZW5kZXIuX3JjJiYoZS53aXRoUHJveHk9bmV3IFByb3h5KGUuY3R4LHRyKSl9fWNvbnN0IFBzPSgpPT4hRXM7ZnVuY3Rpb24gQXMoZSx0LG4pe2NvbnN0IG89ZS50eXBlO2lmKCFlLnJlbmRlcil7aWYoIXQmJkVzJiYhby5yZW5kZXIpe2NvbnN0IHQ9by50ZW1wbGF0ZTtpZih0KXtjb25zdHtpc0N1c3RvbUVsZW1lbnQ6bixjb21waWxlck9wdGlvbnM6cn09ZS5hcHBDb250ZXh0LmNvbmZpZyx7ZGVsaW1pdGVyczpzLGNvbXBpbGVyT3B0aW9uczppfT1vLGw9dyh3KHtpc0N1c3RvbUVsZW1lbnQ6bixkZWxpbWl0ZXJzOnN9LHIpLGkpO28ucmVuZGVyPUVzKHQsbCl9fWUucmVuZGVyPW8ucmVuZGVyfHxfLCRzJiYkcyhlKX1rcyhlKSx4ZSgpLG9yKGUpLENlKCksVHMoKX1mdW5jdGlvbiBNcyhlKXtjb25zdCB0PXQ9PntlLmV4cG9zZWQ9dHx8e319O2xldCBuO3JldHVybntnZXQgYXR0cnMoKXtyZXR1cm4gbnx8KG49ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm94eShlLmF0dHJzLHtnZXQ6KHQsbik9Pih3ZShlLDAsXCIkYXR0cnNcIiksdFtuXSl9KX0oZSkpfSxzbG90czplLnNsb3RzLGVtaXQ6ZS5lbWl0LGV4cG9zZTp0fX1mdW5jdGlvbiBWcyhlKXtpZihlLmV4cG9zZWQpcmV0dXJuIGUuZXhwb3NlUHJveHl8fChlLmV4cG9zZVByb3h5PW5ldyBQcm94eShMdChUdChlLmV4cG9zZWQpKSx7Z2V0Oih0LG4pPT5uIGluIHQ/dFtuXTpuIGluIFhvP1hvW25dKGUpOnZvaWQgMH0pKX1jb25zdCBJcz0vKD86XnxbLV9dKShcXHcpL2c7ZnVuY3Rpb24gQnMoZSx0PSEwKXtyZXR1cm4gRihlKT9lLmRpc3BsYXlOYW1lfHxlLm5hbWU6ZS5uYW1lfHx0JiZlLl9fbmFtZX1mdW5jdGlvbiBMcyhlLHQsbj0hMSl7bGV0IG89QnModCk7aWYoIW8mJnQuX19maWxlKXtjb25zdCBlPXQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7ZSYmKG89ZVsxXSl9aWYoIW8mJmUmJmUucGFyZW50KXtjb25zdCBuPWU9Pntmb3IoY29uc3QgbiBpbiBlKWlmKGVbbl09PT10KXJldHVybiBufTtvPW4oZS5jb21wb25lbnRzfHxlLnBhcmVudC50eXBlLmNvbXBvbmVudHMpfHxuKGUuYXBwQ29udGV4dC5jb21wb25lbnRzKX1yZXR1cm4gbz9vLnJlcGxhY2UoSXMsKGU9PmUudG9VcHBlckNhc2UoKSkpLnJlcGxhY2UoL1stX10vZyxcIlwiKTpuP1wiQXBwXCI6XCJBbm9ueW1vdXNcIn1jb25zdCBqcz0oZSx0KT0+ZnVuY3Rpb24oZSx0LG49ITEpe2xldCBvLHI7Y29uc3Qgcz1GKGUpO3JldHVybiBzPyhvPWUscj1fKToobz1lLmdldCxyPWUuc2V0KSxuZXcgenQobyxyLHN8fCFyLG4pfShlLDAsT3MpO2Z1bmN0aW9uIFVzKCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24gRHMoKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBIcyhlKXt9ZnVuY3Rpb24gV3MoZSx0KXtyZXR1cm4gbnVsbH1mdW5jdGlvbiB6cygpe3JldHVybiBHcygpLnNsb3RzfWZ1bmN0aW9uIEtzKCl7cmV0dXJuIEdzKCkuYXR0cnN9ZnVuY3Rpb24gR3MoKXtjb25zdCBlPXdzKCk7cmV0dXJuIGUuc2V0dXBDb250ZXh0fHwoZS5zZXR1cENvbnRleHQ9TXMoZSkpfWZ1bmN0aW9uIHFzKGUsdCl7Y29uc3Qgbj1FKGUpP2UucmVkdWNlKCgoZSx0KT0+KGVbdF09e30sZSkpLHt9KTplO2Zvcihjb25zdCBvIGluIHQpe2NvbnN0IGU9bltvXTtlP0UoZSl8fEYoZSk/bltvXT17dHlwZTplLGRlZmF1bHQ6dFtvXX06ZS5kZWZhdWx0PXRbb106bnVsbD09PWUmJihuW29dPXtkZWZhdWx0OnRbb119KX1yZXR1cm4gbn1mdW5jdGlvbiBKcyhlLHQpe2NvbnN0IG49e307Zm9yKGNvbnN0IG8gaW4gZSl0LmluY2x1ZGVzKG8pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobixvLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+ZVtvXX0pO3JldHVybiBufWZ1bmN0aW9uIFlzKGUpe2NvbnN0IHQ9d3MoKTtsZXQgbj1lKCk7cmV0dXJuIFRzKCksVihuKSYmKG49bi5jYXRjaCgoZT0+e3Rocm93IGtzKHQpLGV9KSkpLFtuLCgpPT5rcyh0KV19ZnVuY3Rpb24gWnMoZSx0LG4pe2NvbnN0IG89YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gMj09PW8/TSh0KSYmIUUodCk/b3ModCk/dXMoZSxudWxsLFt0XSk6dXMoZSx0KTp1cyhlLG51bGwsdCk6KG8+Mz9uPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTozPT09byYmb3MobikmJihuPVtuXSksdXMoZSx0LG4pKX1jb25zdCBRcz1TeW1ib2woXCJcIiksWHM9KCk9Pnt7Y29uc3QgZT1xbihRcyk7cmV0dXJuIGV8fEd0KFwiU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLlwiKSxlfX07ZnVuY3Rpb24gZWkoKXt9ZnVuY3Rpb24gdGkoZSx0LG4sbyl7Y29uc3Qgcj1uW29dO2lmKHImJm5pKHIsZSkpcmV0dXJuIHI7Y29uc3Qgcz10KCk7cmV0dXJuIHMubWVtbz1lLnNsaWNlKCksbltvXT1zfWZ1bmN0aW9uIG5pKGUsdCl7Y29uc3Qgbj1lLm1lbW87aWYobi5sZW5ndGghPXQubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgbz0wO288bi5sZW5ndGg7bysrKWlmKFkobltvXSx0W29dKSlyZXR1cm4hMTtyZXR1cm4gUXI+MCYmSnImJkpyLnB1c2goZSksITB9Y29uc3Qgb2k9XCIzLjIuMzdcIixyaT1udWxsLHNpPW51bGwsaWk9bnVsbCxsaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6bnVsbCxjaT1saSYmbGkuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpLGFpPXtpbnNlcnQ6KGUsdCxuKT0+e3QuaW5zZXJ0QmVmb3JlKGUsbnx8bnVsbCl9LHJlbW92ZTplPT57Y29uc3QgdD1lLnBhcmVudE5vZGU7dCYmdC5yZW1vdmVDaGlsZChlKX0sY3JlYXRlRWxlbWVudDooZSx0LG4sbyk9Pntjb25zdCByPXQ/bGkuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixlKTpsaS5jcmVhdGVFbGVtZW50KGUsbj97aXM6bn06dm9pZCAwKTtyZXR1cm5cInNlbGVjdFwiPT09ZSYmbyYmbnVsbCE9by5tdWx0aXBsZSYmci5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLG8ubXVsdGlwbGUpLHJ9LGNyZWF0ZVRleHQ6ZT0+bGkuY3JlYXRlVGV4dE5vZGUoZSksY3JlYXRlQ29tbWVudDplPT5saS5jcmVhdGVDb21tZW50KGUpLHNldFRleHQ6KGUsdCk9PntlLm5vZGVWYWx1ZT10fSxzZXRFbGVtZW50VGV4dDooZSx0KT0+e2UudGV4dENvbnRlbnQ9dH0scGFyZW50Tm9kZTplPT5lLnBhcmVudE5vZGUsbmV4dFNpYmxpbmc6ZT0+ZS5uZXh0U2libGluZyxxdWVyeVNlbGVjdG9yOmU9PmxpLnF1ZXJ5U2VsZWN0b3IoZSksc2V0U2NvcGVJZChlLHQpe2Uuc2V0QXR0cmlidXRlKHQsXCJcIil9LGNsb25lTm9kZShlKXtjb25zdCB0PWUuY2xvbmVOb2RlKCEwKTtyZXR1cm5cIl92YWx1ZVwiaW4gZSYmKHQuX3ZhbHVlPWUuX3ZhbHVlKSx0fSxpbnNlcnRTdGF0aWNDb250ZW50KGUsdCxuLG8scixzKXtjb25zdCBpPW4/bi5wcmV2aW91c1NpYmxpbmc6dC5sYXN0Q2hpbGQ7aWYociYmKHI9PT1zfHxyLm5leHRTaWJsaW5nKSlmb3IoO3QuaW5zZXJ0QmVmb3JlKHIuY2xvbmVOb2RlKCEwKSxuKSxyIT09cyYmKHI9ci5uZXh0U2libGluZyk7KTtlbHNle2NpLmlubmVySFRNTD1vP2A8c3ZnPiR7ZX08L3N2Zz5gOmU7Y29uc3Qgcj1jaS5jb250ZW50O2lmKG8pe2NvbnN0IGU9ci5maXJzdENoaWxkO2Zvcig7ZS5maXJzdENoaWxkOylyLmFwcGVuZENoaWxkKGUuZmlyc3RDaGlsZCk7ci5yZW1vdmVDaGlsZChlKX10Lmluc2VydEJlZm9yZShyLG4pfXJldHVybltpP2kubmV4dFNpYmxpbmc6dC5maXJzdENoaWxkLG4/bi5wcmV2aW91c1NpYmxpbmc6dC5sYXN0Q2hpbGRdfX07Y29uc3QgdWk9L1xccyohaW1wb3J0YW50JC87ZnVuY3Rpb24gcGkoZSx0LG4pe2lmKEUobikpbi5mb3JFYWNoKChuPT5waShlLHQsbikpKTtlbHNlIGlmKG51bGw9PW4mJihuPVwiXCIpLHQuc3RhcnRzV2l0aChcIi0tXCIpKWUuc2V0UHJvcGVydHkodCxuKTtlbHNle2NvbnN0IG89ZnVuY3Rpb24oZSx0KXtjb25zdCBuPWRpW3RdO2lmKG4pcmV0dXJuIG47bGV0IG89eih0KTtpZihcImZpbHRlclwiIT09byYmbyBpbiBlKXJldHVybiBkaVt0XT1vO289cShvKTtmb3IobGV0IHI9MDtyPGZpLmxlbmd0aDtyKyspe2NvbnN0IG49Zmlbcl0rbztpZihuIGluIGUpcmV0dXJuIGRpW3RdPW59cmV0dXJuIHR9KGUsdCk7dWkudGVzdChuKT9lLnNldFByb3BlcnR5KEcobyksbi5yZXBsYWNlKHVpLFwiXCIpLFwiaW1wb3J0YW50XCIpOmVbb109bn19Y29uc3QgZmk9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLGRpPXt9O2NvbnN0IGhpPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiO2NvbnN0W21pLGdpXT0oKCk9PntsZXQgZT1EYXRlLm5vdyx0PSExO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe0RhdGUubm93KCk+ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKS50aW1lU3RhbXAmJihlPXBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKSk7Y29uc3Qgbj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO3Q9ISEobiYmTnVtYmVyKG5bMV0pPD01Myl9cmV0dXJuW2UsdF19KSgpO2xldCB2aT0wO2NvbnN0IHlpPVByb21pc2UucmVzb2x2ZSgpLF9pPSgpPT57dmk9MH07ZnVuY3Rpb24gYmkoZSx0LG4sbyl7ZS5hZGRFdmVudExpc3RlbmVyKHQsbixvKX1mdW5jdGlvbiBTaShlLHQsbixvLHI9bnVsbCl7Y29uc3Qgcz1lLl92ZWl8fChlLl92ZWk9e30pLGk9c1t0XTtpZihvJiZpKWkudmFsdWU9bztlbHNle2NvbnN0W24sbF09ZnVuY3Rpb24oZSl7bGV0IHQ7aWYoeGkudGVzdChlKSl7bGV0IG47Zm9yKHQ9e307bj1lLm1hdGNoKHhpKTspZT1lLnNsaWNlKDAsZS5sZW5ndGgtblswXS5sZW5ndGgpLHRbblswXS50b0xvd2VyQ2FzZSgpXT0hMH1yZXR1cm5bRyhlLnNsaWNlKDIpKSx0XX0odCk7aWYobyl7Y29uc3QgaT1zW3RdPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lPT57Y29uc3Qgbz1lLnRpbWVTdGFtcHx8bWkoKTsoZ2l8fG8+PW4uYXR0YWNoZWQtMSkmJlp0KGZ1bmN0aW9uKGUsdCl7aWYoRSh0KSl7Y29uc3Qgbj1lLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249KCk9PntuLmNhbGwoZSksZS5fc3RvcHBlZD0hMH0sdC5tYXAoKGU9PnQ9PiF0Ll9zdG9wcGVkJiZlJiZlKHQpKSl9cmV0dXJuIHR9KGUsbi52YWx1ZSksdCw1LFtlXSl9O3JldHVybiBuLnZhbHVlPWUsbi5hdHRhY2hlZD0oKCk9PnZpfHwoeWkudGhlbihfaSksdmk9bWkoKSkpKCksbn0obyxyKTtiaShlLG4saSxsKX1lbHNlIGkmJighZnVuY3Rpb24oZSx0LG4sbyl7ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbixvKX0oZSxuLGksbCksc1t0XT12b2lkIDApfX1jb25zdCB4aT0vKD86T25jZXxQYXNzaXZlfENhcHR1cmUpJC87Y29uc3QgQ2k9L15vblthLXpdLztmdW5jdGlvbiB3aShlLHQpe2NvbnN0IG49aG8oZSk7Y2xhc3MgbyBleHRlbmRzIE5pe2NvbnN0cnVjdG9yKGUpe3N1cGVyKG4sZSx0KX19cmV0dXJuIG8uZGVmPW4sb31jb25zdCBraT1lPT53aShlLFRsKSxUaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTEVsZW1lbnQ/SFRNTEVsZW1lbnQ6Y2xhc3N7fTtjbGFzcyBOaSBleHRlbmRzIFRpe2NvbnN0cnVjdG9yKGUsdD17fSxuKXtzdXBlcigpLHRoaXMuX2RlZj1lLHRoaXMuX3Byb3BzPXQsdGhpcy5faW5zdGFuY2U9bnVsbCx0aGlzLl9jb25uZWN0ZWQ9ITEsdGhpcy5fcmVzb2x2ZWQ9ITEsdGhpcy5fbnVtYmVyUHJvcHM9bnVsbCx0aGlzLnNoYWRvd1Jvb3QmJm4/bih0aGlzLl9jcmVhdGVWTm9kZSgpLHRoaXMuc2hhZG93Um9vdCk6dGhpcy5hdHRhY2hTaGFkb3coe21vZGU6XCJvcGVuXCJ9KX1jb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMuX2Nvbm5lY3RlZD0hMCx0aGlzLl9pbnN0YW5jZXx8dGhpcy5fcmVzb2x2ZURlZigpfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5fY29ubmVjdGVkPSExLGRuKCgoKT0+e3RoaXMuX2Nvbm5lY3RlZHx8KGtsKG51bGwsdGhpcy5zaGFkb3dSb290KSx0aGlzLl9pbnN0YW5jZT1udWxsKX0pKX1fcmVzb2x2ZURlZigpe2lmKHRoaXMuX3Jlc29sdmVkKXJldHVybjt0aGlzLl9yZXNvbHZlZD0hMDtmb3IobGV0IG49MDtuPHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7bisrKXRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW25dLm5hbWUpO25ldyBNdXRhdGlvbk9ic2VydmVyKChlPT57Zm9yKGNvbnN0IHQgb2YgZSl0aGlzLl9zZXRBdHRyKHQuYXR0cmlidXRlTmFtZSl9KSkub2JzZXJ2ZSh0aGlzLHthdHRyaWJ1dGVzOiEwfSk7Y29uc3QgZT1lPT57Y29uc3R7cHJvcHM6dCxzdHlsZXM6bn09ZSxvPSFFKHQpLHI9dD9vP09iamVjdC5rZXlzKHQpOnQ6W107bGV0IHM7aWYobylmb3IoY29uc3QgaSBpbiB0aGlzLl9wcm9wcyl7Y29uc3QgZT10W2ldOyhlPT09TnVtYmVyfHxlJiZlLnR5cGU9PT1OdW1iZXIpJiYodGhpcy5fcHJvcHNbaV09WCh0aGlzLl9wcm9wc1tpXSksKHN8fChzPU9iamVjdC5jcmVhdGUobnVsbCkpKVtpXT0hMCl9dGhpcy5fbnVtYmVyUHJvcHM9cztmb3IoY29uc3QgaSBvZiBPYmplY3Qua2V5cyh0aGlzKSlcIl9cIiE9PWlbMF0mJnRoaXMuX3NldFByb3AoaSx0aGlzW2ldLCEwLCExKTtmb3IoY29uc3QgaSBvZiByLm1hcCh6KSlPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxpLHtnZXQoKXtyZXR1cm4gdGhpcy5fZ2V0UHJvcChpKX0sc2V0KGUpe3RoaXMuX3NldFByb3AoaSxlKX19KTt0aGlzLl9hcHBseVN0eWxlcyhuKSx0aGlzLl91cGRhdGUoKX0sdD10aGlzLl9kZWYuX19hc3luY0xvYWRlcjt0P3QoKS50aGVuKGUpOmUodGhpcy5fZGVmKX1fc2V0QXR0cihlKXtsZXQgdD10aGlzLmdldEF0dHJpYnV0ZShlKTt0aGlzLl9udW1iZXJQcm9wcyYmdGhpcy5fbnVtYmVyUHJvcHNbZV0mJih0PVgodCkpLHRoaXMuX3NldFByb3AoeihlKSx0LCExKX1fZ2V0UHJvcChlKXtyZXR1cm4gdGhpcy5fcHJvcHNbZV19X3NldFByb3AoZSx0LG49ITAsbz0hMCl7dCE9PXRoaXMuX3Byb3BzW2VdJiYodGhpcy5fcHJvcHNbZV09dCxvJiZ0aGlzLl9pbnN0YW5jZSYmdGhpcy5fdXBkYXRlKCksbiYmKCEwPT09dD90aGlzLnNldEF0dHJpYnV0ZShHKGUpLFwiXCIpOlwic3RyaW5nXCI9PXR5cGVvZiB0fHxcIm51bWJlclwiPT10eXBlb2YgdD90aGlzLnNldEF0dHJpYnV0ZShHKGUpLHQrXCJcIik6dHx8dGhpcy5yZW1vdmVBdHRyaWJ1dGUoRyhlKSkpKX1fdXBkYXRlKCl7a2wodGhpcy5fY3JlYXRlVk5vZGUoKSx0aGlzLnNoYWRvd1Jvb3QpfV9jcmVhdGVWTm9kZSgpe2NvbnN0IGU9dXModGhpcy5fZGVmLHcoe30sdGhpcy5fcHJvcHMpKTtyZXR1cm4gdGhpcy5faW5zdGFuY2V8fChlLmNlPWU9Pnt0aGlzLl9pbnN0YW5jZT1lLGUuaXNDRT0hMCxlLmVtaXQ9KGUsLi4udCk9Pnt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGUse2RldGFpbDp0fSkpfTtsZXQgdD10aGlzO2Zvcig7dD10JiYodC5wYXJlbnROb2RlfHx0Lmhvc3QpOylpZih0IGluc3RhbmNlb2YgTmkpe2UucGFyZW50PXQuX2luc3RhbmNlO2JyZWFrfX0pLGV9X2FwcGx5U3R5bGVzKGUpe2UmJmUuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3QudGV4dENvbnRlbnQ9ZSx0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodCl9KSl9fWZ1bmN0aW9uIEVpKGU9XCIkc3R5bGVcIil7e2NvbnN0IHQ9d3MoKTtpZighdClyZXR1cm4gdjtjb25zdCBuPXQudHlwZS5fX2Nzc01vZHVsZXM7aWYoIW4pcmV0dXJuIHY7Y29uc3Qgbz1uW2VdO3JldHVybiBvfHx2fX1mdW5jdGlvbiAkaShlKXtjb25zdCB0PXdzKCk7aWYoIXQpcmV0dXJuO2NvbnN0IG49KCk9Pk9pKHQuc3ViVHJlZSxlKHQucHJveHkpKTtZbihuKSxPbygoKCk9Pntjb25zdCBlPW5ldyBNdXRhdGlvbk9ic2VydmVyKG4pO2Uub2JzZXJ2ZSh0LnN1YlRyZWUuZWwucGFyZW50Tm9kZSx7Y2hpbGRMaXN0OiEwfSksQW8oKCgpPT5lLmRpc2Nvbm5lY3QoKSkpfSkpfWZ1bmN0aW9uIE9pKGUsdCl7aWYoMTI4JmUuc2hhcGVGbGFnKXtjb25zdCBuPWUuc3VzcGVuc2U7ZT1uLmFjdGl2ZUJyYW5jaCxuLnBlbmRpbmdCcmFuY2gmJiFuLmlzSHlkcmF0aW5nJiZuLmVmZmVjdHMucHVzaCgoKCk9PntPaShuLmFjdGl2ZUJyYW5jaCx0KX0pKX1mb3IoO2UuY29tcG9uZW50OyllPWUuY29tcG9uZW50LnN1YlRyZWU7aWYoMSZlLnNoYXBlRmxhZyYmZS5lbClSaShlLmVsLHQpO2Vsc2UgaWYoZS50eXBlPT09V3IpZS5jaGlsZHJlbi5mb3JFYWNoKChlPT5PaShlLHQpKSk7ZWxzZSBpZihlLnR5cGU9PT1Hcil7bGV0e2VsOm4sYW5jaG9yOm99PWU7Zm9yKDtuJiYoUmkobix0KSxuIT09byk7KW49bi5uZXh0U2libGluZ319ZnVuY3Rpb24gUmkoZSx0KXtpZigxPT09ZS5ub2RlVHlwZSl7Y29uc3Qgbj1lLnN0eWxlO2Zvcihjb25zdCBlIGluIHQpbi5zZXRQcm9wZXJ0eShgLS0ke2V9YCx0W2VdKX19Y29uc3QgRmk9KGUse3Nsb3RzOnR9KT0+WnMoaW8sSWkoZSksdCk7RmkuZGlzcGxheU5hbWU9XCJUcmFuc2l0aW9uXCI7Y29uc3QgUGk9e25hbWU6U3RyaW5nLHR5cGU6U3RyaW5nLGNzczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGR1cmF0aW9uOltTdHJpbmcsTnVtYmVyLE9iamVjdF0sZW50ZXJGcm9tQ2xhc3M6U3RyaW5nLGVudGVyQWN0aXZlQ2xhc3M6U3RyaW5nLGVudGVyVG9DbGFzczpTdHJpbmcsYXBwZWFyRnJvbUNsYXNzOlN0cmluZyxhcHBlYXJBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyVG9DbGFzczpTdHJpbmcsbGVhdmVGcm9tQ2xhc3M6U3RyaW5nLGxlYXZlQWN0aXZlQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmd9LEFpPUZpLnByb3BzPXcoe30saW8ucHJvcHMsUGkpLE1pPShlLHQ9W10pPT57RShlKT9lLmZvckVhY2goKGU9PmUoLi4udCkpKTplJiZlKC4uLnQpfSxWaT1lPT4hIWUmJihFKGUpP2Uuc29tZSgoZT0+ZS5sZW5ndGg+MSkpOmUubGVuZ3RoPjEpO2Z1bmN0aW9uIElpKGUpe2NvbnN0IHQ9e307Zm9yKGNvbnN0IHcgaW4gZSl3IGluIFBpfHwodFt3XT1lW3ddKTtpZighMT09PWUuY3NzKXJldHVybiB0O2NvbnN0e25hbWU6bj1cInZcIix0eXBlOm8sZHVyYXRpb246cixlbnRlckZyb21DbGFzczpzPWAke259LWVudGVyLWZyb21gLGVudGVyQWN0aXZlQ2xhc3M6aT1gJHtufS1lbnRlci1hY3RpdmVgLGVudGVyVG9DbGFzczpsPWAke259LWVudGVyLXRvYCxhcHBlYXJGcm9tQ2xhc3M6Yz1zLGFwcGVhckFjdGl2ZUNsYXNzOmE9aSxhcHBlYXJUb0NsYXNzOnU9bCxsZWF2ZUZyb21DbGFzczpwPWAke259LWxlYXZlLWZyb21gLGxlYXZlQWN0aXZlQ2xhc3M6Zj1gJHtufS1sZWF2ZS1hY3RpdmVgLGxlYXZlVG9DbGFzczpkPWAke259LWxlYXZlLXRvYH09ZSxoPWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpcmV0dXJuIG51bGw7aWYoTShlKSlyZXR1cm5bQmkoZS5lbnRlciksQmkoZS5sZWF2ZSldO3tjb25zdCB0PUJpKGUpO3JldHVyblt0LHRdfX0ociksbT1oJiZoWzBdLGc9aCYmaFsxXSx7b25CZWZvcmVFbnRlcjp2LG9uRW50ZXI6eSxvbkVudGVyQ2FuY2VsbGVkOl8sb25MZWF2ZTpiLG9uTGVhdmVDYW5jZWxsZWQ6UyxvbkJlZm9yZUFwcGVhcjp4PXYsb25BcHBlYXI6Qz15LG9uQXBwZWFyQ2FuY2VsbGVkOms9X309dCxUPShlLHQsbik9PntqaShlLHQ/dTpsKSxqaShlLHQ/YTppKSxuJiZuKCl9LE49KGUsdCk9PntlLl9pc0xlYXZpbmc9ITEsamkoZSxwKSxqaShlLGQpLGppKGUsZiksdCYmdCgpfSxFPWU9Pih0LG4pPT57Y29uc3Qgcj1lP0M6eSxpPSgpPT5UKHQsZSxuKTtNaShyLFt0LGldKSxVaSgoKCk9PntqaSh0LGU/YzpzKSxMaSh0LGU/dTpsKSxWaShyKXx8SGkodCxvLG0saSl9KSl9O3JldHVybiB3KHQse29uQmVmb3JlRW50ZXIoZSl7TWkodixbZV0pLExpKGUscyksTGkoZSxpKX0sb25CZWZvcmVBcHBlYXIoZSl7TWkoeCxbZV0pLExpKGUsYyksTGkoZSxhKX0sb25FbnRlcjpFKCExKSxvbkFwcGVhcjpFKCEwKSxvbkxlYXZlKGUsdCl7ZS5faXNMZWF2aW5nPSEwO2NvbnN0IG49KCk9Pk4oZSx0KTtMaShlLHApLEdpKCksTGkoZSxmKSxVaSgoKCk9PntlLl9pc0xlYXZpbmcmJihqaShlLHApLExpKGUsZCksVmkoYil8fEhpKGUsbyxnLG4pKX0pKSxNaShiLFtlLG5dKX0sb25FbnRlckNhbmNlbGxlZChlKXtUKGUsITEpLE1pKF8sW2VdKX0sb25BcHBlYXJDYW5jZWxsZWQoZSl7VChlLCEwKSxNaShrLFtlXSl9LG9uTGVhdmVDYW5jZWxsZWQoZSl7TihlKSxNaShTLFtlXSl9fSl9ZnVuY3Rpb24gQmkoZSl7cmV0dXJuIFgoZSl9ZnVuY3Rpb24gTGkoZSx0KXt0LnNwbGl0KC9cXHMrLykuZm9yRWFjaCgodD0+dCYmZS5jbGFzc0xpc3QuYWRkKHQpKSksKGUuX3Z0Y3x8KGUuX3Z0Yz1uZXcgU2V0KSkuYWRkKHQpfWZ1bmN0aW9uIGppKGUsdCl7dC5zcGxpdCgvXFxzKy8pLmZvckVhY2goKHQ9PnQmJmUuY2xhc3NMaXN0LnJlbW92ZSh0KSkpO2NvbnN0e192dGM6bn09ZTtuJiYobi5kZWxldGUodCksbi5zaXplfHwoZS5fdnRjPXZvaWQgMCkpfWZ1bmN0aW9uIFVpKGUpe3JlcXVlc3RBbmltYXRpb25GcmFtZSgoKCk9PntyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSl9KSl9bGV0IERpPTA7ZnVuY3Rpb24gSGkoZSx0LG4sbyl7Y29uc3Qgcj1lLl9lbmRJZD0rK0RpLHM9KCk9PntyPT09ZS5fZW5kSWQmJm8oKX07aWYobilyZXR1cm4gc2V0VGltZW91dChzLG4pO2NvbnN0e3R5cGU6aSx0aW1lb3V0OmwscHJvcENvdW50OmN9PVdpKGUsdCk7aWYoIWkpcmV0dXJuIG8oKTtjb25zdCBhPWkrXCJlbmRcIjtsZXQgdT0wO2NvbnN0IHA9KCk9PntlLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxmKSxzKCl9LGY9dD0+e3QudGFyZ2V0PT09ZSYmKyt1Pj1jJiZwKCl9O3NldFRpbWVvdXQoKCgpPT57dTxjJiZwKCl9KSxsKzEpLGUuYWRkRXZlbnRMaXN0ZW5lcihhLGYpfWZ1bmN0aW9uIFdpKGUsdCl7Y29uc3Qgbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxvPWU9PihuW2VdfHxcIlwiKS5zcGxpdChcIiwgXCIpLHI9byhcInRyYW5zaXRpb25EZWxheVwiKSxzPW8oXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiksaT16aShyLHMpLGw9byhcImFuaW1hdGlvbkRlbGF5XCIpLGM9byhcImFuaW1hdGlvbkR1cmF0aW9uXCIpLGE9emkobCxjKTtsZXQgdT1udWxsLHA9MCxmPTA7XCJ0cmFuc2l0aW9uXCI9PT10P2k+MCYmKHU9XCJ0cmFuc2l0aW9uXCIscD1pLGY9cy5sZW5ndGgpOlwiYW5pbWF0aW9uXCI9PT10P2E+MCYmKHU9XCJhbmltYXRpb25cIixwPWEsZj1jLmxlbmd0aCk6KHA9TWF0aC5tYXgoaSxhKSx1PXA+MD9pPmE/XCJ0cmFuc2l0aW9uXCI6XCJhbmltYXRpb25cIjpudWxsLGY9dT9cInRyYW5zaXRpb25cIj09PXU/cy5sZW5ndGg6Yy5sZW5ndGg6MCk7cmV0dXJue3R5cGU6dSx0aW1lb3V0OnAscHJvcENvdW50OmYsaGFzVHJhbnNmb3JtOlwidHJhbnNpdGlvblwiPT09dSYmL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KG4udHJhbnNpdGlvblByb3BlcnR5KX19ZnVuY3Rpb24gemkoZSx0KXtmb3IoO2UubGVuZ3RoPHQubGVuZ3RoOyllPWUuY29uY2F0KGUpO3JldHVybiBNYXRoLm1heCguLi50Lm1hcCgoKHQsbik9PktpKHQpK0tpKGVbbl0pKSkpfWZ1bmN0aW9uIEtpKGUpe3JldHVybiAxZTMqTnVtYmVyKGUuc2xpY2UoMCwtMSkucmVwbGFjZShcIixcIixcIi5cIikpfWZ1bmN0aW9uIEdpKCl7cmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0fWNvbnN0IHFpPW5ldyBXZWFrTWFwLEppPW5ldyBXZWFrTWFwLFlpPXtuYW1lOlwiVHJhbnNpdGlvbkdyb3VwXCIscHJvcHM6dyh7fSxBaSx7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSksc2V0dXAoZSx7c2xvdHM6dH0pe2NvbnN0IG49d3MoKSxvPXJvKCk7bGV0IHIscztyZXR1cm4gRm8oKCgpPT57aWYoIXIubGVuZ3RoKXJldHVybjtjb25zdCB0PWUubW92ZUNsYXNzfHxgJHtlLm5hbWV8fFwidlwifS1tb3ZlYDtpZighZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS5jbG9uZU5vZGUoKTtlLl92dGMmJmUuX3Z0Yy5mb3JFYWNoKChlPT57ZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGU9PmUmJm8uY2xhc3NMaXN0LnJlbW92ZShlKSkpfSkpO24uc3BsaXQoL1xccysvKS5mb3JFYWNoKChlPT5lJiZvLmNsYXNzTGlzdC5hZGQoZSkpKSxvLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7Y29uc3Qgcj0xPT09dC5ub2RlVHlwZT90OnQucGFyZW50Tm9kZTtyLmFwcGVuZENoaWxkKG8pO2NvbnN0e2hhc1RyYW5zZm9ybTpzfT1XaShvKTtyZXR1cm4gci5yZW1vdmVDaGlsZChvKSxzfShyWzBdLmVsLG4udm5vZGUuZWwsdCkpcmV0dXJuO3IuZm9yRWFjaChaaSksci5mb3JFYWNoKFFpKTtjb25zdCBvPXIuZmlsdGVyKFhpKTtHaSgpLG8uZm9yRWFjaCgoZT0+e2NvbnN0IG49ZS5lbCxvPW4uc3R5bGU7TGkobix0KSxvLnRyYW5zZm9ybT1vLndlYmtpdFRyYW5zZm9ybT1vLnRyYW5zaXRpb25EdXJhdGlvbj1cIlwiO2NvbnN0IHI9bi5fbW92ZUNiPWU9PntlJiZlLnRhcmdldCE9PW58fGUmJiEvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSl8fChuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsciksbi5fbW92ZUNiPW51bGwsamkobix0KSl9O24uYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIixyKX0pKX0pKSwoKT0+e2NvbnN0IGk9a3QoZSksbD1JaShpKTtsZXQgYz1pLnRhZ3x8V3I7cj1zLHM9dC5kZWZhdWx0P2ZvKHQuZGVmYXVsdCgpKTpbXTtmb3IobGV0IGU9MDtlPHMubGVuZ3RoO2UrKyl7Y29uc3QgdD1zW2VdO251bGwhPXQua2V5JiZwbyh0LGNvKHQsbCxvLG4pKX1pZihyKWZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKXtjb25zdCB0PXJbZV07cG8odCxjbyh0LGwsbyxuKSkscWkuc2V0KHQsdC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9cmV0dXJuIHVzKGMsbnVsbCxzKX19fTtmdW5jdGlvbiBaaShlKXtjb25zdCB0PWUuZWw7dC5fbW92ZUNiJiZ0Ll9tb3ZlQ2IoKSx0Ll9lbnRlckNiJiZ0Ll9lbnRlckNiKCl9ZnVuY3Rpb24gUWkoZSl7Smkuc2V0KGUsZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9ZnVuY3Rpb24gWGkoZSl7Y29uc3QgdD1xaS5nZXQoZSksbj1KaS5nZXQoZSksbz10LmxlZnQtbi5sZWZ0LHI9dC50b3Atbi50b3A7aWYob3x8cil7Y29uc3QgdD1lLmVsLnN0eWxlO3JldHVybiB0LnRyYW5zZm9ybT10LndlYmtpdFRyYW5zZm9ybT1gdHJhbnNsYXRlKCR7b31weCwke3J9cHgpYCx0LnRyYW5zaXRpb25EdXJhdGlvbj1cIjBzXCIsZX19Y29uc3QgZWw9ZT0+e2NvbnN0IHQ9ZS5wcm9wc1tcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl18fCExO3JldHVybiBFKHQpP2U9PloodCxlKTp0fTtmdW5jdGlvbiB0bChlKXtlLnRhcmdldC5jb21wb3Npbmc9ITB9ZnVuY3Rpb24gbmwoZSl7Y29uc3QgdD1lLnRhcmdldDt0LmNvbXBvc2luZyYmKHQuY29tcG9zaW5nPSExLHQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSkpfWNvbnN0IG9sPXtjcmVhdGVkKGUse21vZGlmaWVyczp7bGF6eTp0LHRyaW06bixudW1iZXI6b319LHIpe2UuX2Fzc2lnbj1lbChyKTtjb25zdCBzPW98fHIucHJvcHMmJlwibnVtYmVyXCI9PT1yLnByb3BzLnR5cGU7YmkoZSx0P1wiY2hhbmdlXCI6XCJpbnB1dFwiLCh0PT57aWYodC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtsZXQgbz1lLnZhbHVlO24mJihvPW8udHJpbSgpKSxzJiYobz1YKG8pKSxlLl9hc3NpZ24obyl9KSksbiYmYmkoZSxcImNoYW5nZVwiLCgoKT0+e2UudmFsdWU9ZS52YWx1ZS50cmltKCl9KSksdHx8KGJpKGUsXCJjb21wb3NpdGlvbnN0YXJ0XCIsdGwpLGJpKGUsXCJjb21wb3NpdGlvbmVuZFwiLG5sKSxiaShlLFwiY2hhbmdlXCIsbmwpKX0sbW91bnRlZChlLHt2YWx1ZTp0fSl7ZS52YWx1ZT1udWxsPT10P1wiXCI6dH0sYmVmb3JlVXBkYXRlKGUse3ZhbHVlOnQsbW9kaWZpZXJzOntsYXp5Om4sdHJpbTpvLG51bWJlcjpyfX0scyl7aWYoZS5fYXNzaWduPWVsKHMpLGUuY29tcG9zaW5nKXJldHVybjtpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ZSYmXCJyYW5nZVwiIT09ZS50eXBlKXtpZihuKXJldHVybjtpZihvJiZlLnZhbHVlLnRyaW0oKT09PXQpcmV0dXJuO2lmKChyfHxcIm51bWJlclwiPT09ZS50eXBlKSYmWChlLnZhbHVlKT09PXQpcmV0dXJufWNvbnN0IGk9bnVsbD09dD9cIlwiOnQ7ZS52YWx1ZSE9PWkmJihlLnZhbHVlPWkpfX0scmw9e2RlZXA6ITAsY3JlYXRlZChlLHQsbil7ZS5fYXNzaWduPWVsKG4pLGJpKGUsXCJjaGFuZ2VcIiwoKCk9Pntjb25zdCB0PWUuX21vZGVsVmFsdWUsbj1hbChlKSxvPWUuY2hlY2tlZCxyPWUuX2Fzc2lnbjtpZihFKHQpKXtjb25zdCBlPWgodCxuKSxzPS0xIT09ZTtpZihvJiYhcylyKHQuY29uY2F0KG4pKTtlbHNlIGlmKCFvJiZzKXtjb25zdCBuPVsuLi50XTtuLnNwbGljZShlLDEpLHIobil9fWVsc2UgaWYoTyh0KSl7Y29uc3QgZT1uZXcgU2V0KHQpO28/ZS5hZGQobik6ZS5kZWxldGUobikscihlKX1lbHNlIHIodWwoZSxvKSl9KSl9LG1vdW50ZWQ6c2wsYmVmb3JlVXBkYXRlKGUsdCxuKXtlLl9hc3NpZ249ZWwobiksc2woZSx0LG4pfX07ZnVuY3Rpb24gc2woZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSxvKXtlLl9tb2RlbFZhbHVlPXQsRSh0KT9lLmNoZWNrZWQ9aCh0LG8ucHJvcHMudmFsdWUpPi0xOk8odCk/ZS5jaGVja2VkPXQuaGFzKG8ucHJvcHMudmFsdWUpOnQhPT1uJiYoZS5jaGVja2VkPWQodCx1bChlLCEwKSkpfWNvbnN0IGlsPXtjcmVhdGVkKGUse3ZhbHVlOnR9LG4pe2UuY2hlY2tlZD1kKHQsbi5wcm9wcy52YWx1ZSksZS5fYXNzaWduPWVsKG4pLGJpKGUsXCJjaGFuZ2VcIiwoKCk9PntlLl9hc3NpZ24oYWwoZSkpfSkpfSxiZWZvcmVVcGRhdGUoZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSxvKXtlLl9hc3NpZ249ZWwobyksdCE9PW4mJihlLmNoZWNrZWQ9ZCh0LG8ucHJvcHMudmFsdWUpKX19LGxsPXtkZWVwOiEwLGNyZWF0ZWQoZSx7dmFsdWU6dCxtb2RpZmllcnM6e251bWJlcjpufX0sbyl7Y29uc3Qgcj1PKHQpO2JpKGUsXCJjaGFuZ2VcIiwoKCk9Pntjb25zdCB0PUFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLm9wdGlvbnMsKGU9PmUuc2VsZWN0ZWQpKS5tYXAoKGU9Pm4/WChhbChlKSk6YWwoZSkpKTtlLl9hc3NpZ24oZS5tdWx0aXBsZT9yP25ldyBTZXQodCk6dDp0WzBdKX0pKSxlLl9hc3NpZ249ZWwobyl9LG1vdW50ZWQoZSx7dmFsdWU6dH0pe2NsKGUsdCl9LGJlZm9yZVVwZGF0ZShlLHQsbil7ZS5fYXNzaWduPWVsKG4pfSx1cGRhdGVkKGUse3ZhbHVlOnR9KXtjbChlLHQpfX07ZnVuY3Rpb24gY2woZSx0KXtjb25zdCBuPWUubXVsdGlwbGU7aWYoIW58fEUodCl8fE8odCkpe2ZvcihsZXQgbz0wLHI9ZS5vcHRpb25zLmxlbmd0aDtvPHI7bysrKXtjb25zdCByPWUub3B0aW9uc1tvXSxzPWFsKHIpO2lmKG4pci5zZWxlY3RlZD1FKHQpP2godCxzKT4tMTp0LmhhcyhzKTtlbHNlIGlmKGQoYWwociksdCkpcmV0dXJuIHZvaWQoZS5zZWxlY3RlZEluZGV4IT09byYmKGUuc2VsZWN0ZWRJbmRleD1vKSl9bnx8LTE9PT1lLnNlbGVjdGVkSW5kZXh8fChlLnNlbGVjdGVkSW5kZXg9LTEpfX1mdW5jdGlvbiBhbChlKXtyZXR1cm5cIl92YWx1ZVwiaW4gZT9lLl92YWx1ZTplLnZhbHVlfWZ1bmN0aW9uIHVsKGUsdCl7Y29uc3Qgbj10P1wiX3RydWVWYWx1ZVwiOlwiX2ZhbHNlVmFsdWVcIjtyZXR1cm4gbiBpbiBlP2Vbbl06dH1jb25zdCBwbD17Y3JlYXRlZChlLHQsbil7ZmwoZSx0LG4sbnVsbCxcImNyZWF0ZWRcIil9LG1vdW50ZWQoZSx0LG4pe2ZsKGUsdCxuLG51bGwsXCJtb3VudGVkXCIpfSxiZWZvcmVVcGRhdGUoZSx0LG4sbyl7ZmwoZSx0LG4sbyxcImJlZm9yZVVwZGF0ZVwiKX0sdXBkYXRlZChlLHQsbixvKXtmbChlLHQsbixvLFwidXBkYXRlZFwiKX19O2Z1bmN0aW9uIGZsKGUsdCxuLG8scil7Y29uc3Qgcz1mdW5jdGlvbihlLHQpe3N3aXRjaChlKXtjYXNlXCJTRUxFQ1RcIjpyZXR1cm4gbGw7Y2FzZVwiVEVYVEFSRUFcIjpyZXR1cm4gb2w7ZGVmYXVsdDpzd2l0Y2godCl7Y2FzZVwiY2hlY2tib3hcIjpyZXR1cm4gcmw7Y2FzZVwicmFkaW9cIjpyZXR1cm4gaWw7ZGVmYXVsdDpyZXR1cm4gb2x9fX0oZS50YWdOYW1lLG4ucHJvcHMmJm4ucHJvcHMudHlwZSlbcl07cyYmcyhlLHQsbixvKX1jb25zdCBkbD1bXCJjdHJsXCIsXCJzaGlmdFwiLFwiYWx0XCIsXCJtZXRhXCJdLGhsPXtzdG9wOmU9PmUuc3RvcFByb3BhZ2F0aW9uKCkscHJldmVudDplPT5lLnByZXZlbnREZWZhdWx0KCksc2VsZjplPT5lLnRhcmdldCE9PWUuY3VycmVudFRhcmdldCxjdHJsOmU9PiFlLmN0cmxLZXksc2hpZnQ6ZT0+IWUuc2hpZnRLZXksYWx0OmU9PiFlLmFsdEtleSxtZXRhOmU9PiFlLm1ldGFLZXksbGVmdDplPT5cImJ1dHRvblwiaW4gZSYmMCE9PWUuYnV0dG9uLG1pZGRsZTplPT5cImJ1dHRvblwiaW4gZSYmMSE9PWUuYnV0dG9uLHJpZ2h0OmU9PlwiYnV0dG9uXCJpbiBlJiYyIT09ZS5idXR0b24sZXhhY3Q6KGUsdCk9PmRsLnNvbWUoKG49PmVbYCR7bn1LZXlgXSYmIXQuaW5jbHVkZXMobikpKX0sbWw9KGUsdCk9PihuLC4uLm8pPT57Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspe2NvbnN0IG89aGxbdFtlXV07aWYobyYmbyhuLHQpKXJldHVybn1yZXR1cm4gZShuLC4uLm8pfSxnbD17ZXNjOlwiZXNjYXBlXCIsc3BhY2U6XCIgXCIsdXA6XCJhcnJvdy11cFwiLGxlZnQ6XCJhcnJvdy1sZWZ0XCIscmlnaHQ6XCJhcnJvdy1yaWdodFwiLGRvd246XCJhcnJvdy1kb3duXCIsZGVsZXRlOlwiYmFja3NwYWNlXCJ9LHZsPShlLHQpPT5uPT57aWYoIShcImtleVwiaW4gbikpcmV0dXJuO2NvbnN0IG89RyhuLmtleSk7cmV0dXJuIHQuc29tZSgoZT0+ZT09PW98fGdsW2VdPT09bykpP2Uobik6dm9pZCAwfSx5bD17YmVmb3JlTW91bnQoZSx7dmFsdWU6dH0se3RyYW5zaXRpb246bn0pe2UuX3ZvZD1cIm5vbmVcIj09PWUuc3R5bGUuZGlzcGxheT9cIlwiOmUuc3R5bGUuZGlzcGxheSxuJiZ0P24uYmVmb3JlRW50ZXIoZSk6X2woZSx0KX0sbW91bnRlZChlLHt2YWx1ZTp0fSx7dHJhbnNpdGlvbjpufSl7biYmdCYmbi5lbnRlcihlKX0sdXBkYXRlZChlLHt2YWx1ZTp0LG9sZFZhbHVlOm59LHt0cmFuc2l0aW9uOm99KXshdCE9IW4mJihvP3Q/KG8uYmVmb3JlRW50ZXIoZSksX2woZSwhMCksby5lbnRlcihlKSk6by5sZWF2ZShlLCgoKT0+e19sKGUsITEpfSkpOl9sKGUsdCkpfSxiZWZvcmVVbm1vdW50KGUse3ZhbHVlOnR9KXtfbChlLHQpfX07ZnVuY3Rpb24gX2woZSx0KXtlLnN0eWxlLmRpc3BsYXk9dD9lLl92b2Q6XCJub25lXCJ9Y29uc3QgYmw9dyh7cGF0Y2hQcm9wOihlLHQscixzLGk9ITEsbCxjLGEsdSk9PntcImNsYXNzXCI9PT10P2Z1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuX3Z0YztvJiYodD0odD9bdCwuLi5vXTpbLi4ub10pLmpvaW4oXCIgXCIpKSxudWxsPT10P2UucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik6bj9lLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsdCk6ZS5jbGFzc05hbWU9dH0oZSxzLGkpOlwic3R5bGVcIj09PXQ/ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS5zdHlsZSxyPVAobik7aWYobiYmIXIpe2Zvcihjb25zdCBlIGluIG4pcGkobyxlLG5bZV0pO2lmKHQmJiFQKHQpKWZvcihjb25zdCBlIGluIHQpbnVsbD09bltlXSYmcGkobyxlLFwiXCIpfWVsc2V7Y29uc3Qgcz1vLmRpc3BsYXk7cj90IT09biYmKG8uY3NzVGV4dD1uKTp0JiZlLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpLFwiX3ZvZFwiaW4gZSYmKG8uZGlzcGxheT1zKX19KGUscixzKTp4KHQpP0ModCl8fFNpKGUsdCwwLHMsYyk6KFwiLlwiPT09dFswXT8odD10LnNsaWNlKDEpLDEpOlwiXlwiPT09dFswXT8odD10LnNsaWNlKDEpLDApOmZ1bmN0aW9uKGUsdCxuLG8pe2lmKG8pcmV0dXJuXCJpbm5lckhUTUxcIj09PXR8fFwidGV4dENvbnRlbnRcIj09PXR8fCEhKHQgaW4gZSYmQ2kudGVzdCh0KSYmRihuKSk7aWYoXCJzcGVsbGNoZWNrXCI9PT10fHxcImRyYWdnYWJsZVwiPT09dHx8XCJ0cmFuc2xhdGVcIj09PXQpcmV0dXJuITE7aWYoXCJmb3JtXCI9PT10KXJldHVybiExO2lmKFwibGlzdFwiPT09dCYmXCJJTlBVVFwiPT09ZS50YWdOYW1lKXJldHVybiExO2lmKFwidHlwZVwiPT09dCYmXCJURVhUQVJFQVwiPT09ZS50YWdOYW1lKXJldHVybiExO2lmKENpLnRlc3QodCkmJlAobikpcmV0dXJuITE7cmV0dXJuIHQgaW4gZX0oZSx0LHMsaSkpP2Z1bmN0aW9uKGUsdCxuLHIscyxpLGwpe2lmKFwiaW5uZXJIVE1MXCI9PT10fHxcInRleHRDb250ZW50XCI9PT10KXJldHVybiByJiZsKHIscyxpKSx2b2lkKGVbdF09bnVsbD09bj9cIlwiOm4pO2lmKFwidmFsdWVcIj09PXQmJlwiUFJPR1JFU1NcIiE9PWUudGFnTmFtZSYmIWUudGFnTmFtZS5pbmNsdWRlcyhcIi1cIikpe2UuX3ZhbHVlPW47Y29uc3Qgbz1udWxsPT1uP1wiXCI6bjtyZXR1cm4gZS52YWx1ZT09PW8mJlwiT1BUSU9OXCIhPT1lLnRhZ05hbWV8fChlLnZhbHVlPW8pLHZvaWQobnVsbD09biYmZS5yZW1vdmVBdHRyaWJ1dGUodCkpfWxldCBjPSExO2lmKFwiXCI9PT1ufHxudWxsPT1uKXtjb25zdCByPXR5cGVvZiBlW3RdO1wiYm9vbGVhblwiPT09cj9uPW8obik6bnVsbD09biYmXCJzdHJpbmdcIj09PXI/KG49XCJcIixjPSEwKTpcIm51bWJlclwiPT09ciYmKG49MCxjPSEwKX10cnl7ZVt0XT1ufWNhdGNoKGEpe31jJiZlLnJlbW92ZUF0dHJpYnV0ZSh0KX0oZSx0LHMsbCxjLGEsdSk6KFwidHJ1ZS12YWx1ZVwiPT09dD9lLl90cnVlVmFsdWU9czpcImZhbHNlLXZhbHVlXCI9PT10JiYoZS5fZmFsc2VWYWx1ZT1zKSxmdW5jdGlvbihlLHQscixzLGkpe2lmKHMmJnQuc3RhcnRzV2l0aChcInhsaW5rOlwiKSludWxsPT1yP2UucmVtb3ZlQXR0cmlidXRlTlMoaGksdC5zbGljZSg2LHQubGVuZ3RoKSk6ZS5zZXRBdHRyaWJ1dGVOUyhoaSx0LHIpO2Vsc2V7Y29uc3Qgcz1uKHQpO251bGw9PXJ8fHMmJiFvKHIpP2UucmVtb3ZlQXR0cmlidXRlKHQpOmUuc2V0QXR0cmlidXRlKHQscz9cIlwiOnIpfX0oZSx0LHMsaSkpfX0sYWkpO2xldCBTbCx4bD0hMTtmdW5jdGlvbiBDbCgpe3JldHVybiBTbHx8KFNsPUFyKGJsKSl9ZnVuY3Rpb24gd2woKXtyZXR1cm4gU2w9eGw/U2w6TXIoYmwpLHhsPSEwLFNsfWNvbnN0IGtsPSguLi5lKT0+e0NsKCkucmVuZGVyKC4uLmUpfSxUbD0oLi4uZSk9Pnt3bCgpLmh5ZHJhdGUoLi4uZSl9LE5sPSguLi5lKT0+e2NvbnN0IHQ9Q2woKS5jcmVhdGVBcHAoLi4uZSkse21vdW50Om59PXQ7cmV0dXJuIHQubW91bnQ9ZT0+e2NvbnN0IG89JGwoZSk7aWYoIW8pcmV0dXJuO2NvbnN0IHI9dC5fY29tcG9uZW50O0Yocil8fHIucmVuZGVyfHxyLnRlbXBsYXRlfHwoci50ZW1wbGF0ZT1vLmlubmVySFRNTCksby5pbm5lckhUTUw9XCJcIjtjb25zdCBzPW4obywhMSxvIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7cmV0dXJuIG8gaW5zdGFuY2VvZiBFbGVtZW50JiYoby5yZW1vdmVBdHRyaWJ1dGUoXCJ2LWNsb2FrXCIpLG8uc2V0QXR0cmlidXRlKFwiZGF0YS12LWFwcFwiLFwiXCIpKSxzfSx0fSxFbD0oLi4uZSk9Pntjb25zdCB0PXdsKCkuY3JlYXRlQXBwKC4uLmUpLHttb3VudDpufT10O3JldHVybiB0Lm1vdW50PWU9Pntjb25zdCB0PSRsKGUpO2lmKHQpcmV0dXJuIG4odCwhMCx0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl9LHR9O2Z1bmN0aW9uICRsKGUpe2lmKFAoZSkpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfXJldHVybiBlfWNvbnN0IE9sPV87dmFyIFJsPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHJlbmRlcjprbCxoeWRyYXRlOlRsLGNyZWF0ZUFwcDpObCxjcmVhdGVTU1JBcHA6RWwsaW5pdERpcmVjdGl2ZXNGb3JTU1I6T2wsZGVmaW5lQ3VzdG9tRWxlbWVudDp3aSxkZWZpbmVTU1JDdXN0b21FbGVtZW50OmtpLFZ1ZUVsZW1lbnQ6TmksdXNlQ3NzTW9kdWxlOkVpLHVzZUNzc1ZhcnM6JGksVHJhbnNpdGlvbjpGaSxUcmFuc2l0aW9uR3JvdXA6WWksdk1vZGVsVGV4dDpvbCx2TW9kZWxDaGVja2JveDpybCx2TW9kZWxSYWRpbzppbCx2TW9kZWxTZWxlY3Q6bGwsdk1vZGVsRHluYW1pYzpwbCx3aXRoTW9kaWZpZXJzOm1sLHdpdGhLZXlzOnZsLHZTaG93OnlsLHJlYWN0aXZlOmd0LHJlZjpGdCxyZWFkb25seTp5dCx1bnJlZjpJdCxwcm94eVJlZnM6THQsaXNSZWY6UnQsdG9SZWY6V3QsdG9SZWZzOkR0LGlzUHJveHk6d3QsaXNSZWFjdGl2ZTpTdCxpc1JlYWRvbmx5Onh0LGlzU2hhbGxvdzpDdCxjdXN0b21SZWY6VXQsdHJpZ2dlclJlZjpWdCxzaGFsbG93UmVmOlB0LHNoYWxsb3dSZWFjdGl2ZTp2dCxzaGFsbG93UmVhZG9ubHk6X3QsbWFya1JhdzpUdCx0b1JhdzprdCxlZmZlY3Q6eWUsc3RvcDpfZSxSZWFjdGl2ZUVmZmVjdDpnZSxlZmZlY3RTY29wZTpvZSxFZmZlY3RTY29wZTpuZSxnZXRDdXJyZW50U2NvcGU6c2Usb25TY29wZURpc3Bvc2U6aWUsY29tcHV0ZWQ6anMsd2F0Y2g6WG4sd2F0Y2hFZmZlY3Q6Sm4sd2F0Y2hQb3N0RWZmZWN0OlluLHdhdGNoU3luY0VmZmVjdDpabixvbkJlZm9yZU1vdW50OiRvLG9uTW91bnRlZDpPbyxvbkJlZm9yZVVwZGF0ZTpSbyxvblVwZGF0ZWQ6Rm8sb25CZWZvcmVVbm1vdW50OlBvLG9uVW5tb3VudGVkOkFvLG9uQWN0aXZhdGVkOlNvLG9uRGVhY3RpdmF0ZWQ6eG8sb25SZW5kZXJUcmFja2VkOklvLG9uUmVuZGVyVHJpZ2dlcmVkOlZvLG9uRXJyb3JDYXB0dXJlZDpCbyxvblNlcnZlclByZWZldGNoOk1vLHByb3ZpZGU6R24saW5qZWN0OnFuLG5leHRUaWNrOmRuLGRlZmluZUNvbXBvbmVudDpobyxkZWZpbmVBc3luY0NvbXBvbmVudDpnbyx1c2VBdHRyczpLcyx1c2VTbG90czp6cyxkZWZpbmVQcm9wczpVcyxkZWZpbmVFbWl0czpEcyxkZWZpbmVFeHBvc2U6SHMsd2l0aERlZmF1bHRzOldzLG1lcmdlRGVmYXVsdHM6cXMsY3JlYXRlUHJvcHNSZXN0UHJveHk6SnMsd2l0aEFzeW5jQ29udGV4dDpZcyxnZXRDdXJyZW50SW5zdGFuY2U6d3MsaDpacyxjcmVhdGVWTm9kZTp1cyxjbG9uZVZOb2RlOmZzLG1lcmdlUHJvcHM6X3MsaXNWTm9kZTpvcyxGcmFnbWVudDpXcixUZXh0OnpyLENvbW1lbnQ6S3IsU3RhdGljOkdyLFRlbGVwb3J0OkhyLFN1c3BlbnNlOlVuLEtlZXBBbGl2ZTpfbyxCYXNlVHJhbnNpdGlvbjppbyx3aXRoRGlyZWN0aXZlczpMbyx1c2VTU1JDb250ZXh0OlhzLHNzckNvbnRleHRLZXk6UXMsY3JlYXRlUmVuZGVyZXI6QXIsY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXI6TXIscXVldWVQb3N0Rmx1c2hDYjp2bix3YXJuOkd0LGhhbmRsZUVycm9yOlF0LGNhbGxXaXRoRXJyb3JIYW5kbGluZzpZdCxjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZzpadCxyZXNvbHZlQ29tcG9uZW50OlVvLHJlc29sdmVEaXJlY3RpdmU6V28scmVzb2x2ZUR5bmFtaWNDb21wb25lbnQ6SG8scmVnaXN0ZXJSdW50aW1lQ29tcGlsZXI6RnMsaXNSdW50aW1lT25seTpQcyx1c2VUcmFuc2l0aW9uU3RhdGU6cm8scmVzb2x2ZVRyYW5zaXRpb25Ib29rczpjbyxzZXRUcmFuc2l0aW9uSG9va3M6cG8sZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuOmZvLGluaXRDdXN0b21Gb3JtYXR0ZXI6ZWksZ2V0IGRldnRvb2xzKCl7cmV0dXJuIHhufSxzZXREZXZ0b29sc0hvb2s6d24sd2l0aEN0eDpBbixwdXNoU2NvcGVJZDpSbixwb3BTY29wZUlkOkZuLHdpdGhTY29wZUlkOlBuLHJlbmRlckxpc3Q6R28sdG9IYW5kbGVyczpabyxyZW5kZXJTbG90OkpvLGNyZWF0ZVNsb3RzOnFvLHdpdGhNZW1vOnRpLGlzTWVtb1NhbWU6bmksb3BlbkJsb2NrOllyLGNyZWF0ZUJsb2NrOm5zLHNldEJsb2NrVHJhY2tpbmc6WHIsY3JlYXRlVGV4dFZOb2RlOmRzLGNyZWF0ZUNvbW1lbnRWTm9kZTptcyxjcmVhdGVTdGF0aWNWTm9kZTpocyxjcmVhdGVFbGVtZW50Vk5vZGU6YXMsY3JlYXRlRWxlbWVudEJsb2NrOnRzLGd1YXJkUmVhY3RpdmVQcm9wczpwcyx0b0Rpc3BsYXlTdHJpbmc6bSxjYW1lbGl6ZTp6LGNhcGl0YWxpemU6cSx0b0hhbmRsZXJLZXk6Sixub3JtYWxpemVQcm9wczphLG5vcm1hbGl6ZUNsYXNzOmMsbm9ybWFsaXplU3R5bGU6cix0cmFuc2Zvcm1WTm9kZUFyZ3M6c3MsdmVyc2lvbjpvaSxzc3JVdGlsczpudWxsLHJlc29sdmVGaWx0ZXI6bnVsbCxjb21wYXRVdGlsczpudWxsfSk7ZnVuY3Rpb24gRmwoZSl7dGhyb3cgZX1mdW5jdGlvbiBQbChlKXt9ZnVuY3Rpb24gQWwoZSx0LG4sbyl7Y29uc3Qgcj1uZXcgU3ludGF4RXJyb3IoU3RyaW5nKGUpKTtyZXR1cm4gci5jb2RlPWUsci5sb2M9dCxyfWNvbnN0IE1sPVN5bWJvbChcIlwiKSxWbD1TeW1ib2woXCJcIiksSWw9U3ltYm9sKFwiXCIpLEJsPVN5bWJvbChcIlwiKSxMbD1TeW1ib2woXCJcIiksamw9U3ltYm9sKFwiXCIpLFVsPVN5bWJvbChcIlwiKSxEbD1TeW1ib2woXCJcIiksSGw9U3ltYm9sKFwiXCIpLFdsPVN5bWJvbChcIlwiKSx6bD1TeW1ib2woXCJcIiksS2w9U3ltYm9sKFwiXCIpLEdsPVN5bWJvbChcIlwiKSxxbD1TeW1ib2woXCJcIiksSmw9U3ltYm9sKFwiXCIpLFlsPVN5bWJvbChcIlwiKSxabD1TeW1ib2woXCJcIiksUWw9U3ltYm9sKFwiXCIpLFhsPVN5bWJvbChcIlwiKSxlYz1TeW1ib2woXCJcIiksdGM9U3ltYm9sKFwiXCIpLG5jPVN5bWJvbChcIlwiKSxvYz1TeW1ib2woXCJcIikscmM9U3ltYm9sKFwiXCIpLHNjPVN5bWJvbChcIlwiKSxpYz1TeW1ib2woXCJcIiksbGM9U3ltYm9sKFwiXCIpLGNjPVN5bWJvbChcIlwiKSxhYz1TeW1ib2woXCJcIiksdWM9U3ltYm9sKFwiXCIpLHBjPVN5bWJvbChcIlwiKSxmYz1TeW1ib2woXCJcIiksZGM9U3ltYm9sKFwiXCIpLGhjPVN5bWJvbChcIlwiKSxtYz1TeW1ib2woXCJcIiksZ2M9U3ltYm9sKFwiXCIpLHZjPVN5bWJvbChcIlwiKSx5Yz1TeW1ib2woXCJcIiksX2M9U3ltYm9sKFwiXCIpLGJjPXtbTWxdOlwiRnJhZ21lbnRcIixbVmxdOlwiVGVsZXBvcnRcIixbSWxdOlwiU3VzcGVuc2VcIixbQmxdOlwiS2VlcEFsaXZlXCIsW0xsXTpcIkJhc2VUcmFuc2l0aW9uXCIsW2psXTpcIm9wZW5CbG9ja1wiLFtVbF06XCJjcmVhdGVCbG9ja1wiLFtEbF06XCJjcmVhdGVFbGVtZW50QmxvY2tcIixbSGxdOlwiY3JlYXRlVk5vZGVcIixbV2xdOlwiY3JlYXRlRWxlbWVudFZOb2RlXCIsW3psXTpcImNyZWF0ZUNvbW1lbnRWTm9kZVwiLFtLbF06XCJjcmVhdGVUZXh0Vk5vZGVcIixbR2xdOlwiY3JlYXRlU3RhdGljVk5vZGVcIixbcWxdOlwicmVzb2x2ZUNvbXBvbmVudFwiLFtKbF06XCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudFwiLFtZbF06XCJyZXNvbHZlRGlyZWN0aXZlXCIsW1psXTpcInJlc29sdmVGaWx0ZXJcIixbUWxdOlwid2l0aERpcmVjdGl2ZXNcIixbWGxdOlwicmVuZGVyTGlzdFwiLFtlY106XCJyZW5kZXJTbG90XCIsW3RjXTpcImNyZWF0ZVNsb3RzXCIsW25jXTpcInRvRGlzcGxheVN0cmluZ1wiLFtvY106XCJtZXJnZVByb3BzXCIsW3JjXTpcIm5vcm1hbGl6ZUNsYXNzXCIsW3NjXTpcIm5vcm1hbGl6ZVN0eWxlXCIsW2ljXTpcIm5vcm1hbGl6ZVByb3BzXCIsW2xjXTpcImd1YXJkUmVhY3RpdmVQcm9wc1wiLFtjY106XCJ0b0hhbmRsZXJzXCIsW2FjXTpcImNhbWVsaXplXCIsW3VjXTpcImNhcGl0YWxpemVcIixbcGNdOlwidG9IYW5kbGVyS2V5XCIsW2ZjXTpcInNldEJsb2NrVHJhY2tpbmdcIixbZGNdOlwicHVzaFNjb3BlSWRcIixbaGNdOlwicG9wU2NvcGVJZFwiLFttY106XCJ3aXRoQ3R4XCIsW2djXTpcInVucmVmXCIsW3ZjXTpcImlzUmVmXCIsW3ljXTpcIndpdGhNZW1vXCIsW19jXTpcImlzTWVtb1NhbWVcIn07Y29uc3QgU2M9e3NvdXJjZTpcIlwiLHN0YXJ0OntsaW5lOjEsY29sdW1uOjEsb2Zmc2V0OjB9LGVuZDp7bGluZToxLGNvbHVtbjoxLG9mZnNldDowfX07ZnVuY3Rpb24geGMoZSx0LG4sbyxyLHMsaSxsPSExLGM9ITEsYT0hMSx1PVNjKXtyZXR1cm4gZSYmKGw/KGUuaGVscGVyKGpsKSxlLmhlbHBlcihaYyhlLmluU1NSLGEpKSk6ZS5oZWxwZXIoWWMoZS5pblNTUixhKSksaSYmZS5oZWxwZXIoUWwpKSx7dHlwZToxMyx0YWc6dCxwcm9wczpuLGNoaWxkcmVuOm8scGF0Y2hGbGFnOnIsZHluYW1pY1Byb3BzOnMsZGlyZWN0aXZlczppLGlzQmxvY2s6bCxkaXNhYmxlVHJhY2tpbmc6Yyxpc0NvbXBvbmVudDphLGxvYzp1fX1mdW5jdGlvbiBDYyhlLHQ9U2Mpe3JldHVybnt0eXBlOjE3LGxvYzp0LGVsZW1lbnRzOmV9fWZ1bmN0aW9uIHdjKGUsdD1TYyl7cmV0dXJue3R5cGU6MTUsbG9jOnQscHJvcGVydGllczplfX1mdW5jdGlvbiBrYyhlLHQpe3JldHVybnt0eXBlOjE2LGxvYzpTYyxrZXk6UChlKT9UYyhlLCEwKTplLHZhbHVlOnR9fWZ1bmN0aW9uIFRjKGUsdD0hMSxuPVNjLG89MCl7cmV0dXJue3R5cGU6NCxsb2M6bixjb250ZW50OmUsaXNTdGF0aWM6dCxjb25zdFR5cGU6dD8zOm99fWZ1bmN0aW9uIE5jKGUsdD1TYyl7cmV0dXJue3R5cGU6OCxsb2M6dCxjaGlsZHJlbjplfX1mdW5jdGlvbiBFYyhlLHQ9W10sbj1TYyl7cmV0dXJue3R5cGU6MTQsbG9jOm4sY2FsbGVlOmUsYXJndW1lbnRzOnR9fWZ1bmN0aW9uICRjKGUsdCxuPSExLG89ITEscj1TYyl7cmV0dXJue3R5cGU6MTgscGFyYW1zOmUscmV0dXJuczp0LG5ld2xpbmU6bixpc1Nsb3Q6byxsb2M6cn19ZnVuY3Rpb24gT2MoZSx0LG4sbz0hMCl7cmV0dXJue3R5cGU6MTksdGVzdDplLGNvbnNlcXVlbnQ6dCxhbHRlcm5hdGU6bixuZXdsaW5lOm8sbG9jOlNjfX1jb25zdCBSYz1lPT40PT09ZS50eXBlJiZlLmlzU3RhdGljLEZjPShlLHQpPT5lPT09dHx8ZT09PUcodCk7ZnVuY3Rpb24gUGMoZSl7cmV0dXJuIEZjKGUsXCJUZWxlcG9ydFwiKT9WbDpGYyhlLFwiU3VzcGVuc2VcIik/SWw6RmMoZSxcIktlZXBBbGl2ZVwiKT9CbDpGYyhlLFwiQmFzZVRyYW5zaXRpb25cIik/TGw6dm9pZCAwfWNvbnN0IEFjPS9eXFxkfFteXFwkXFx3XS8sTWM9ZT0+IUFjLnRlc3QoZSksVmM9L1tBLVphLXpfJFxceEEwLVxcdUZGRkZdLyxJYz0vW1xcLlxcP1xcdyRcXHhBMC1cXHVGRkZGXS8sQmM9L1xccytbLltdXFxzKnxcXHMqWy5bXVxccysvZyxMYz1lPT57ZT1lLnRyaW0oKS5yZXBsYWNlKEJjLChlPT5lLnRyaW0oKSkpO2xldCB0PTAsbj1bXSxvPTAscj0wLHM9bnVsbDtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKyl7Y29uc3QgbD1lLmNoYXJBdChpKTtzd2l0Y2godCl7Y2FzZSAwOmlmKFwiW1wiPT09bCluLnB1c2godCksdD0xLG8rKztlbHNlIGlmKFwiKFwiPT09bCluLnB1c2godCksdD0yLHIrKztlbHNlIGlmKCEoMD09PWk/VmM6SWMpLnRlc3QobCkpcmV0dXJuITE7YnJlYWs7Y2FzZSAxOlwiJ1wiPT09bHx8J1wiJz09PWx8fFwiYFwiPT09bD8obi5wdXNoKHQpLHQ9MyxzPWwpOlwiW1wiPT09bD9vKys6XCJdXCI9PT1sJiYoLS1vfHwodD1uLnBvcCgpKSk7YnJlYWs7Y2FzZSAyOmlmKFwiJ1wiPT09bHx8J1wiJz09PWx8fFwiYFwiPT09bCluLnB1c2godCksdD0zLHM9bDtlbHNlIGlmKFwiKFwiPT09bClyKys7ZWxzZSBpZihcIilcIj09PWwpe2lmKGk9PT1lLmxlbmd0aC0xKXJldHVybiExOy0tcnx8KHQ9bi5wb3AoKSl9YnJlYWs7Y2FzZSAzOmw9PT1zJiYodD1uLnBvcCgpLHM9bnVsbCl9fXJldHVybiFvJiYhcn07ZnVuY3Rpb24gamMoZSx0LG4pe2NvbnN0IG89e3NvdXJjZTplLnNvdXJjZS5zbGljZSh0LHQrbiksc3RhcnQ6VWMoZS5zdGFydCxlLnNvdXJjZSx0KSxlbmQ6ZS5lbmR9O3JldHVybiBudWxsIT1uJiYoby5lbmQ9VWMoZS5zdGFydCxlLnNvdXJjZSx0K24pKSxvfWZ1bmN0aW9uIFVjKGUsdCxuPXQubGVuZ3RoKXtyZXR1cm4gRGModyh7fSxlKSx0LG4pfWZ1bmN0aW9uIERjKGUsdCxuPXQubGVuZ3RoKXtsZXQgbz0wLHI9LTE7Zm9yKGxldCBzPTA7czxuO3MrKykxMD09PXQuY2hhckNvZGVBdChzKSYmKG8rKyxyPXMpO3JldHVybiBlLm9mZnNldCs9bixlLmxpbmUrPW8sZS5jb2x1bW49LTE9PT1yP2UuY29sdW1uK246bi1yLGV9ZnVuY3Rpb24gSGMoZSx0LG49ITEpe2ZvcihsZXQgbz0wO288ZS5wcm9wcy5sZW5ndGg7bysrKXtjb25zdCByPWUucHJvcHNbb107aWYoNz09PXIudHlwZSYmKG58fHIuZXhwKSYmKFAodCk/ci5uYW1lPT09dDp0LnRlc3Qoci5uYW1lKSkpcmV0dXJuIHJ9fWZ1bmN0aW9uIFdjKGUsdCxuPSExLG89ITEpe2ZvcihsZXQgcj0wO3I8ZS5wcm9wcy5sZW5ndGg7cisrKXtjb25zdCBzPWUucHJvcHNbcl07aWYoNj09PXMudHlwZSl7aWYobiljb250aW51ZTtpZihzLm5hbWU9PT10JiYocy52YWx1ZXx8bykpcmV0dXJuIHN9ZWxzZSBpZihcImJpbmRcIj09PXMubmFtZSYmKHMuZXhwfHxvKSYmemMocy5hcmcsdCkpcmV0dXJuIHN9fWZ1bmN0aW9uIHpjKGUsdCl7cmV0dXJuISghZXx8IVJjKGUpfHxlLmNvbnRlbnQhPT10KX1mdW5jdGlvbiBLYyhlKXtyZXR1cm4gNT09PWUudHlwZXx8Mj09PWUudHlwZX1mdW5jdGlvbiBHYyhlKXtyZXR1cm4gNz09PWUudHlwZSYmXCJzbG90XCI9PT1lLm5hbWV9ZnVuY3Rpb24gcWMoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJjM9PT1lLnRhZ1R5cGV9ZnVuY3Rpb24gSmMoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJjI9PT1lLnRhZ1R5cGV9ZnVuY3Rpb24gWWMoZSx0KXtyZXR1cm4gZXx8dD9IbDpXbH1mdW5jdGlvbiBaYyhlLHQpe3JldHVybiBlfHx0P1VsOkRsfWNvbnN0IFFjPW5ldyBTZXQoW2ljLGxjXSk7ZnVuY3Rpb24gWGMoZSx0PVtdKXtpZihlJiYhUChlKSYmMTQ9PT1lLnR5cGUpe2NvbnN0IG49ZS5jYWxsZWU7aWYoIVAobikmJlFjLmhhcyhuKSlyZXR1cm4gWGMoZS5hcmd1bWVudHNbMF0sdC5jb25jYXQoZSkpfXJldHVybltlLHRdfWZ1bmN0aW9uIGVhKGUsdCxuKXtsZXQgbyxyLHM9MTM9PT1lLnR5cGU/ZS5wcm9wczplLmFyZ3VtZW50c1syXSxpPVtdO2lmKHMmJiFQKHMpJiYxND09PXMudHlwZSl7Y29uc3QgZT1YYyhzKTtzPWVbMF0saT1lWzFdLHI9aVtpLmxlbmd0aC0xXX1pZihudWxsPT1zfHxQKHMpKW89d2MoW3RdKTtlbHNlIGlmKDE0PT09cy50eXBlKXtjb25zdCBlPXMuYXJndW1lbnRzWzBdO1AoZSl8fDE1IT09ZS50eXBlP3MuY2FsbGVlPT09Y2M/bz1FYyhuLmhlbHBlcihvYyksW3djKFt0XSksc10pOnMuYXJndW1lbnRzLnVuc2hpZnQod2MoW3RdKSk6ZS5wcm9wZXJ0aWVzLnVuc2hpZnQodCksIW8mJihvPXMpfWVsc2UgaWYoMTU9PT1zLnR5cGUpe2xldCBlPSExO2lmKDQ9PT10LmtleS50eXBlKXtjb25zdCBuPXQua2V5LmNvbnRlbnQ7ZT1zLnByb3BlcnRpZXMuc29tZSgoZT0+ND09PWUua2V5LnR5cGUmJmUua2V5LmNvbnRlbnQ9PT1uKSl9ZXx8cy5wcm9wZXJ0aWVzLnVuc2hpZnQodCksbz1zfWVsc2Ugbz1FYyhuLmhlbHBlcihvYyksW3djKFt0XSksc10pLHImJnIuY2FsbGVlPT09bGMmJihyPWlbaS5sZW5ndGgtMl0pOzEzPT09ZS50eXBlP3I/ci5hcmd1bWVudHNbMF09bzplLnByb3BzPW86cj9yLmFyZ3VtZW50c1swXT1vOmUuYXJndW1lbnRzWzJdPW99ZnVuY3Rpb24gdGEoZSx0KXtyZXR1cm5gXyR7dH1fJHtlLnJlcGxhY2UoL1teXFx3XS9nLCgodCxuKT0+XCItXCI9PT10P1wiX1wiOmUuY2hhckNvZGVBdChuKS50b1N0cmluZygpKSl9YH1mdW5jdGlvbiBuYShlLHtoZWxwZXI6dCxyZW1vdmVIZWxwZXI6bixpblNTUjpvfSl7ZS5pc0Jsb2NrfHwoZS5pc0Jsb2NrPSEwLG4oWWMobyxlLmlzQ29tcG9uZW50KSksdChqbCksdChaYyhvLGUuaXNDb21wb25lbnQpKSl9Y29uc3Qgb2E9LyYoZ3R8bHR8YW1wfGFwb3N8cXVvdCk7L2cscmE9e2d0OlwiPlwiLGx0OlwiPFwiLGFtcDpcIiZcIixhcG9zOlwiJ1wiLHF1b3Q6J1wiJ30sc2E9e2RlbGltaXRlcnM6W1wie3tcIixcIn19XCJdLGdldE5hbWVzcGFjZTooKT0+MCxnZXRUZXh0TW9kZTooKT0+MCxpc1ZvaWRUYWc6Yixpc1ByZVRhZzpiLGlzQ3VzdG9tRWxlbWVudDpiLGRlY29kZUVudGl0aWVzOmU9PmUucmVwbGFjZShvYSwoKGUsdCk9PnJhW3RdKSksb25FcnJvcjpGbCxvbldhcm46UGwsY29tbWVudHM6ITF9O2Z1bmN0aW9uIGlhKGUsdD17fSl7Y29uc3Qgbj1mdW5jdGlvbihlLHQpe2NvbnN0IG49dyh7fSxzYSk7bGV0IG87Zm9yKG8gaW4gdCluW29dPXZvaWQgMD09PXRbb10/c2Fbb106dFtvXTtyZXR1cm57b3B0aW9uczpuLGNvbHVtbjoxLGxpbmU6MSxvZmZzZXQ6MCxvcmlnaW5hbFNvdXJjZTplLHNvdXJjZTplLGluUHJlOiExLGluVlByZTohMSxvbldhcm46bi5vbldhcm59fShlLHQpLG89YmEobik7cmV0dXJuIGZ1bmN0aW9uKGUsdD1TYyl7cmV0dXJue3R5cGU6MCxjaGlsZHJlbjplLGhlbHBlcnM6W10sY29tcG9uZW50czpbXSxkaXJlY3RpdmVzOltdLGhvaXN0czpbXSxpbXBvcnRzOltdLGNhY2hlZDowLHRlbXBzOjAsY29kZWdlbk5vZGU6dm9pZCAwLGxvYzp0fX0obGEobiwwLFtdKSxTYShuLG8pKX1mdW5jdGlvbiBsYShlLHQsbil7Y29uc3Qgbz14YShuKSxyPW8/by5uczowLHM9W107Zm9yKDshTmEoZSx0LG4pOyl7Y29uc3QgaT1lLnNvdXJjZTtsZXQgbDtpZigwPT09dHx8MT09PXQpaWYoIWUuaW5WUHJlJiZDYShpLGUub3B0aW9ucy5kZWxpbWl0ZXJzWzBdKSlsPXZhKGUsdCk7ZWxzZSBpZigwPT09dCYmXCI8XCI9PT1pWzBdKWlmKDE9PT1pLmxlbmd0aCk7ZWxzZSBpZihcIiFcIj09PWlbMV0pbD1DYShpLFwiXFx4M2MhLS1cIik/dWEoZSk6Q2EoaSxcIjwhRE9DVFlQRVwiKT9wYShlKTpDYShpLFwiPCFbQ0RBVEFbXCIpJiYwIT09cj9hYShlLG4pOnBhKGUpO2Vsc2UgaWYoXCIvXCI9PT1pWzFdKWlmKDI9PT1pLmxlbmd0aCk7ZWxzZXtpZihcIj5cIj09PWlbMl0pe3dhKGUsMyk7Y29udGludWV9aWYoL1thLXpdL2kudGVzdChpWzJdKSl7aGEoZSwxLG8pO2NvbnRpbnVlfWw9cGEoZSl9ZWxzZS9bYS16XS9pLnRlc3QoaVsxXSk/bD1mYShlLG4pOlwiP1wiPT09aVsxXSYmKGw9cGEoZSkpO2lmKGx8fChsPXlhKGUsdCkpLEUobCkpZm9yKGxldCBlPTA7ZTxsLmxlbmd0aDtlKyspY2EocyxsW2VdKTtlbHNlIGNhKHMsbCl9bGV0IGk9ITE7aWYoMiE9PXQmJjEhPT10KXtjb25zdCB0PVwicHJlc2VydmVcIiE9PWUub3B0aW9ucy53aGl0ZXNwYWNlO2ZvcihsZXQgbj0wO248cy5sZW5ndGg7bisrKXtjb25zdCBvPXNbbl07aWYoZS5pblByZXx8MiE9PW8udHlwZSkzIT09by50eXBlfHxlLm9wdGlvbnMuY29tbWVudHN8fChpPSEwLHNbbl09bnVsbCk7ZWxzZSBpZigvW15cXHRcXHJcXG5cXGYgXS8udGVzdChvLmNvbnRlbnQpKXQmJihvLmNvbnRlbnQ9by5jb250ZW50LnJlcGxhY2UoL1tcXHRcXHJcXG5cXGYgXSsvZyxcIiBcIikpO2Vsc2V7Y29uc3QgZT1zW24tMV0scj1zW24rMV07IWV8fCFyfHx0JiYoMz09PWUudHlwZXx8Mz09PXIudHlwZXx8MT09PWUudHlwZSYmMT09PXIudHlwZSYmL1tcXHJcXG5dLy50ZXN0KG8uY29udGVudCkpPyhpPSEwLHNbbl09bnVsbCk6by5jb250ZW50PVwiIFwifX1pZihlLmluUHJlJiZvJiZlLm9wdGlvbnMuaXNQcmVUYWcoby50YWcpKXtjb25zdCBlPXNbMF07ZSYmMj09PWUudHlwZSYmKGUuY29udGVudD1lLmNvbnRlbnQucmVwbGFjZSgvXlxccj9cXG4vLFwiXCIpKX19cmV0dXJuIGk/cy5maWx0ZXIoQm9vbGVhbik6c31mdW5jdGlvbiBjYShlLHQpe2lmKDI9PT10LnR5cGUpe2NvbnN0IG49eGEoZSk7aWYobiYmMj09PW4udHlwZSYmbi5sb2MuZW5kLm9mZnNldD09PXQubG9jLnN0YXJ0Lm9mZnNldClyZXR1cm4gbi5jb250ZW50Kz10LmNvbnRlbnQsbi5sb2MuZW5kPXQubG9jLmVuZCx2b2lkKG4ubG9jLnNvdXJjZSs9dC5sb2Muc291cmNlKX1lLnB1c2godCl9ZnVuY3Rpb24gYWEoZSx0KXt3YShlLDkpO2NvbnN0IG49bGEoZSwzLHQpO3JldHVybiAwPT09ZS5zb3VyY2UubGVuZ3RofHx3YShlLDMpLG59ZnVuY3Rpb24gdWEoZSl7Y29uc3QgdD1iYShlKTtsZXQgbjtjb25zdCBvPS8tLShcXCEpPz4vLmV4ZWMoZS5zb3VyY2UpO2lmKG8pe249ZS5zb3VyY2Uuc2xpY2UoNCxvLmluZGV4KTtjb25zdCB0PWUuc291cmNlLnNsaWNlKDAsby5pbmRleCk7bGV0IHI9MSxzPTA7Zm9yKDstMSE9PShzPXQuaW5kZXhPZihcIlxceDNjIS0tXCIscikpOyl3YShlLHMtcisxKSxyPXMrMTt3YShlLG8uaW5kZXgrb1swXS5sZW5ndGgtcisxKX1lbHNlIG49ZS5zb3VyY2Uuc2xpY2UoNCksd2EoZSxlLnNvdXJjZS5sZW5ndGgpO3JldHVybnt0eXBlOjMsY29udGVudDpuLGxvYzpTYShlLHQpfX1mdW5jdGlvbiBwYShlKXtjb25zdCB0PWJhKGUpLG49XCI/XCI9PT1lLnNvdXJjZVsxXT8xOjI7bGV0IG87Y29uc3Qgcj1lLnNvdXJjZS5pbmRleE9mKFwiPlwiKTtyZXR1cm4tMT09PXI/KG89ZS5zb3VyY2Uuc2xpY2Uobiksd2EoZSxlLnNvdXJjZS5sZW5ndGgpKToobz1lLnNvdXJjZS5zbGljZShuLHIpLHdhKGUscisxKSkse3R5cGU6Myxjb250ZW50Om8sbG9jOlNhKGUsdCl9fWZ1bmN0aW9uIGZhKGUsdCl7Y29uc3Qgbj1lLmluUHJlLG89ZS5pblZQcmUscj14YSh0KSxzPWhhKGUsMCxyKSxpPWUuaW5QcmUmJiFuLGw9ZS5pblZQcmUmJiFvO2lmKHMuaXNTZWxmQ2xvc2luZ3x8ZS5vcHRpb25zLmlzVm9pZFRhZyhzLnRhZykpcmV0dXJuIGkmJihlLmluUHJlPSExKSxsJiYoZS5pblZQcmU9ITEpLHM7dC5wdXNoKHMpO2NvbnN0IGM9ZS5vcHRpb25zLmdldFRleHRNb2RlKHMsciksYT1sYShlLGMsdCk7aWYodC5wb3AoKSxzLmNoaWxkcmVuPWEsRWEoZS5zb3VyY2Uscy50YWcpKWhhKGUsMSxyKTtlbHNlIGlmKDA9PT1lLnNvdXJjZS5sZW5ndGgmJlwic2NyaXB0XCI9PT1zLnRhZy50b0xvd2VyQ2FzZSgpKXtjb25zdCBlPWFbMF07ZSYmQ2EoZS5sb2Muc291cmNlLFwiXFx4M2MhLS1cIil9cmV0dXJuIHMubG9jPVNhKGUscy5sb2Muc3RhcnQpLGkmJihlLmluUHJlPSExKSxsJiYoZS5pblZQcmU9ITEpLHN9Y29uc3QgZGE9ZShcImlmLGVsc2UsZWxzZS1pZixmb3Isc2xvdFwiKTtmdW5jdGlvbiBoYShlLHQsbil7Y29uc3Qgbz1iYShlKSxyPS9ePFxcLz8oW2Etel1bXlxcdFxcclxcblxcZiAvPl0qKS9pLmV4ZWMoZS5zb3VyY2UpLHM9clsxXSxpPWUub3B0aW9ucy5nZXROYW1lc3BhY2UocyxuKTt3YShlLHJbMF0ubGVuZ3RoKSxrYShlKTtjb25zdCBsPWJhKGUpLGM9ZS5zb3VyY2U7ZS5vcHRpb25zLmlzUHJlVGFnKHMpJiYoZS5pblByZT0hMCk7bGV0IGE9bWEoZSx0KTswPT09dCYmIWUuaW5WUHJlJiZhLnNvbWUoKGU9Pjc9PT1lLnR5cGUmJlwicHJlXCI9PT1lLm5hbWUpKSYmKGUuaW5WUHJlPSEwLHcoZSxsKSxlLnNvdXJjZT1jLGE9bWEoZSx0KS5maWx0ZXIoKGU9Plwidi1wcmVcIiE9PWUubmFtZSkpKTtsZXQgdT0hMTtpZigwPT09ZS5zb3VyY2UubGVuZ3RofHwodT1DYShlLnNvdXJjZSxcIi8+XCIpLHdhKGUsdT8yOjEpKSwxPT09dClyZXR1cm47bGV0IHA9MDtyZXR1cm4gZS5pblZQcmV8fChcInNsb3RcIj09PXM/cD0yOlwidGVtcGxhdGVcIj09PXM/YS5zb21lKChlPT43PT09ZS50eXBlJiZkYShlLm5hbWUpKSkmJihwPTMpOmZ1bmN0aW9uKGUsdCxuKXtjb25zdCBvPW4ub3B0aW9ucztpZihvLmlzQ3VzdG9tRWxlbWVudChlKSlyZXR1cm4hMTtpZihcImNvbXBvbmVudFwiPT09ZXx8L15bQS1aXS8udGVzdChlKXx8UGMoZSl8fG8uaXNCdWlsdEluQ29tcG9uZW50JiZvLmlzQnVpbHRJbkNvbXBvbmVudChlKXx8by5pc05hdGl2ZVRhZyYmIW8uaXNOYXRpdmVUYWcoZSkpcmV0dXJuITA7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspe2NvbnN0IGU9dFtyXTtpZig2PT09ZS50eXBlKXtpZihcImlzXCI9PT1lLm5hbWUmJmUudmFsdWUmJmUudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSlyZXR1cm4hMH1lbHNle2lmKFwiaXNcIj09PWUubmFtZSlyZXR1cm4hMDtcImJpbmRcIj09PWUubmFtZSYmemMoZS5hcmcsXCJpc1wiKX19fShzLGEsZSkmJihwPTEpKSx7dHlwZToxLG5zOmksdGFnOnMsdGFnVHlwZTpwLHByb3BzOmEsaXNTZWxmQ2xvc2luZzp1LGNoaWxkcmVuOltdLGxvYzpTYShlLG8pLGNvZGVnZW5Ob2RlOnZvaWQgMH19ZnVuY3Rpb24gbWEoZSx0KXtjb25zdCBuPVtdLG89bmV3IFNldDtmb3IoO2Uuc291cmNlLmxlbmd0aD4wJiYhQ2EoZS5zb3VyY2UsXCI+XCIpJiYhQ2EoZS5zb3VyY2UsXCIvPlwiKTspe2lmKENhKGUuc291cmNlLFwiL1wiKSl7d2EoZSwxKSxrYShlKTtjb250aW51ZX1jb25zdCByPWdhKGUsbyk7Nj09PXIudHlwZSYmci52YWx1ZSYmXCJjbGFzc1wiPT09ci5uYW1lJiYoci52YWx1ZS5jb250ZW50PXIudmFsdWUuY29udGVudC5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLnRyaW0oKSksMD09PXQmJm4ucHVzaChyKSwvXlteXFx0XFxyXFxuXFxmIC8+XS8udGVzdChlLnNvdXJjZSksa2EoZSl9cmV0dXJuIG59ZnVuY3Rpb24gZ2EoZSx0KXtjb25zdCBuPWJhKGUpLG89L15bXlxcdFxcclxcblxcZiAvPl1bXlxcdFxcclxcblxcZiAvPj1dKi8uZXhlYyhlLnNvdXJjZSlbMF07dC5oYXMobyksdC5hZGQobyk7e2NvbnN0IGU9L1tcIic8XS9nO2xldCB0O2Zvcig7dD1lLmV4ZWMobyk7KTt9bGV0IHI7d2EoZSxvLmxlbmd0aCksL15bXFx0XFxyXFxuXFxmIF0qPS8udGVzdChlLnNvdXJjZSkmJihrYShlKSx3YShlLDEpLGthKGUpLHI9ZnVuY3Rpb24oZSl7Y29uc3QgdD1iYShlKTtsZXQgbjtjb25zdCBvPWUuc291cmNlWzBdLHI9J1wiJz09PW98fFwiJ1wiPT09bztpZihyKXt3YShlLDEpO2NvbnN0IHQ9ZS5zb3VyY2UuaW5kZXhPZihvKTstMT09PXQ/bj1fYShlLGUuc291cmNlLmxlbmd0aCw0KToobj1fYShlLHQsNCksd2EoZSwxKSl9ZWxzZXtjb25zdCB0PS9eW15cXHRcXHJcXG5cXGYgPl0rLy5leGVjKGUuc291cmNlKTtpZighdClyZXR1cm47Y29uc3Qgbz0vW1wiJzw9YF0vZztsZXQgcjtmb3IoO3I9by5leGVjKHRbMF0pOyk7bj1fYShlLHRbMF0ubGVuZ3RoLDQpfXJldHVybntjb250ZW50Om4saXNRdW90ZWQ6cixsb2M6U2EoZSx0KX19KGUpKTtjb25zdCBzPVNhKGUsbik7aWYoIWUuaW5WUHJlJiYvXih2LVtBLVphLXowLTktXXw6fFxcLnxAfCMpLy50ZXN0KG8pKXtjb25zdCB0PS8oPzpedi0oW2EtejAtOS1dKykpPyg/Oig/Ojp8XlxcLnxeQHxeIykoXFxbW15cXF1dK1xcXXxbXlxcLl0rKSk/KC4rKT8kL2kuZXhlYyhvKTtsZXQgaSxsPUNhKG8sXCIuXCIpLGM9dFsxXXx8KGx8fENhKG8sXCI6XCIpP1wiYmluZFwiOkNhKG8sXCJAXCIpP1wib25cIjpcInNsb3RcIik7aWYodFsyXSl7Y29uc3Qgcj1cInNsb3RcIj09PWMscz1vLmxhc3RJbmRleE9mKHRbMl0pLGw9U2EoZSxUYShlLG4scyksVGEoZSxuLHMrdFsyXS5sZW5ndGgrKHImJnRbM118fFwiXCIpLmxlbmd0aCkpO2xldCBhPXRbMl0sdT0hMDthLnN0YXJ0c1dpdGgoXCJbXCIpPyh1PSExLGE9YS5lbmRzV2l0aChcIl1cIik/YS5zbGljZSgxLGEubGVuZ3RoLTEpOmEuc2xpY2UoMSkpOnImJihhKz10WzNdfHxcIlwiKSxpPXt0eXBlOjQsY29udGVudDphLGlzU3RhdGljOnUsY29uc3RUeXBlOnU/MzowLGxvYzpsfX1pZihyJiZyLmlzUXVvdGVkKXtjb25zdCBlPXIubG9jO2Uuc3RhcnQub2Zmc2V0KyssZS5zdGFydC5jb2x1bW4rKyxlLmVuZD1VYyhlLnN0YXJ0LHIuY29udGVudCksZS5zb3VyY2U9ZS5zb3VyY2Uuc2xpY2UoMSwtMSl9Y29uc3QgYT10WzNdP3RbM10uc2xpY2UoMSkuc3BsaXQoXCIuXCIpOltdO3JldHVybiBsJiZhLnB1c2goXCJwcm9wXCIpLHt0eXBlOjcsbmFtZTpjLGV4cDpyJiZ7dHlwZTo0LGNvbnRlbnQ6ci5jb250ZW50LGlzU3RhdGljOiExLGNvbnN0VHlwZTowLGxvYzpyLmxvY30sYXJnOmksbW9kaWZpZXJzOmEsbG9jOnN9fXJldHVybiFlLmluVlByZSYmQ2EobyxcInYtXCIpLHt0eXBlOjYsbmFtZTpvLHZhbHVlOnImJnt0eXBlOjIsY29udGVudDpyLmNvbnRlbnQsbG9jOnIubG9jfSxsb2M6c319ZnVuY3Rpb24gdmEoZSx0KXtjb25zdFtuLG9dPWUub3B0aW9ucy5kZWxpbWl0ZXJzLHI9ZS5zb3VyY2UuaW5kZXhPZihvLG4ubGVuZ3RoKTtpZigtMT09PXIpcmV0dXJuO2NvbnN0IHM9YmEoZSk7d2EoZSxuLmxlbmd0aCk7Y29uc3QgaT1iYShlKSxsPWJhKGUpLGM9ci1uLmxlbmd0aCxhPWUuc291cmNlLnNsaWNlKDAsYyksdT1fYShlLGMsdCkscD11LnRyaW0oKSxmPXUuaW5kZXhPZihwKTtmPjAmJkRjKGksYSxmKTtyZXR1cm4gRGMobCxhLGMtKHUubGVuZ3RoLXAubGVuZ3RoLWYpKSx3YShlLG8ubGVuZ3RoKSx7dHlwZTo1LGNvbnRlbnQ6e3R5cGU6NCxpc1N0YXRpYzohMSxjb25zdFR5cGU6MCxjb250ZW50OnAsbG9jOlNhKGUsaSxsKX0sbG9jOlNhKGUscyl9fWZ1bmN0aW9uIHlhKGUsdCl7Y29uc3Qgbj0zPT09dD9bXCJdXT5cIl06W1wiPFwiLGUub3B0aW9ucy5kZWxpbWl0ZXJzWzBdXTtsZXQgbz1lLnNvdXJjZS5sZW5ndGg7Zm9yKGxldCBzPTA7czxuLmxlbmd0aDtzKyspe2NvbnN0IHQ9ZS5zb3VyY2UuaW5kZXhPZihuW3NdLDEpOy0xIT09dCYmbz50JiYobz10KX1jb25zdCByPWJhKGUpO3JldHVybnt0eXBlOjIsY29udGVudDpfYShlLG8sdCksbG9jOlNhKGUscil9fWZ1bmN0aW9uIF9hKGUsdCxuKXtjb25zdCBvPWUuc291cmNlLnNsaWNlKDAsdCk7cmV0dXJuIHdhKGUsdCksMiE9PW4mJjMhPT1uJiZvLmluY2x1ZGVzKFwiJlwiKT9lLm9wdGlvbnMuZGVjb2RlRW50aXRpZXMobyw0PT09bik6b31mdW5jdGlvbiBiYShlKXtjb25zdHtjb2x1bW46dCxsaW5lOm4sb2Zmc2V0Om99PWU7cmV0dXJue2NvbHVtbjp0LGxpbmU6bixvZmZzZXQ6b319ZnVuY3Rpb24gU2EoZSx0LG4pe3JldHVybntzdGFydDp0LGVuZDpuPW58fGJhKGUpLHNvdXJjZTplLm9yaWdpbmFsU291cmNlLnNsaWNlKHQub2Zmc2V0LG4ub2Zmc2V0KX19ZnVuY3Rpb24geGEoZSl7cmV0dXJuIGVbZS5sZW5ndGgtMV19ZnVuY3Rpb24gQ2EoZSx0KXtyZXR1cm4gZS5zdGFydHNXaXRoKHQpfWZ1bmN0aW9uIHdhKGUsdCl7Y29uc3R7c291cmNlOm59PWU7RGMoZSxuLHQpLGUuc291cmNlPW4uc2xpY2UodCl9ZnVuY3Rpb24ga2EoZSl7Y29uc3QgdD0vXltcXHRcXHJcXG5cXGYgXSsvLmV4ZWMoZS5zb3VyY2UpO3QmJndhKGUsdFswXS5sZW5ndGgpfWZ1bmN0aW9uIFRhKGUsdCxuKXtyZXR1cm4gVWModCxlLm9yaWdpbmFsU291cmNlLnNsaWNlKHQub2Zmc2V0LG4pLG4pfWZ1bmN0aW9uIE5hKGUsdCxuKXtjb25zdCBvPWUuc291cmNlO3N3aXRjaCh0KXtjYXNlIDA6aWYoQ2EobyxcIjwvXCIpKWZvcihsZXQgZT1uLmxlbmd0aC0xO2U+PTA7LS1lKWlmKEVhKG8sbltlXS50YWcpKXJldHVybiEwO2JyZWFrO2Nhc2UgMTpjYXNlIDI6e2NvbnN0IGU9eGEobik7aWYoZSYmRWEobyxlLnRhZykpcmV0dXJuITA7YnJlYWt9Y2FzZSAzOmlmKENhKG8sXCJdXT5cIikpcmV0dXJuITB9cmV0dXJuIW99ZnVuY3Rpb24gRWEoZSx0KXtyZXR1cm4gQ2EoZSxcIjwvXCIpJiZlLnNsaWNlKDIsMit0Lmxlbmd0aCkudG9Mb3dlckNhc2UoKT09PXQudG9Mb3dlckNhc2UoKSYmL1tcXHRcXHJcXG5cXGYgLz5dLy50ZXN0KGVbMit0Lmxlbmd0aF18fFwiPlwiKX1mdW5jdGlvbiAkYShlLHQpe1JhKGUsdCxPYShlLGUuY2hpbGRyZW5bMF0pKX1mdW5jdGlvbiBPYShlLHQpe2NvbnN0e2NoaWxkcmVuOm59PWU7cmV0dXJuIDE9PT1uLmxlbmd0aCYmMT09PXQudHlwZSYmIUpjKHQpfWZ1bmN0aW9uIFJhKGUsdCxuPSExKXtjb25zdHtjaGlsZHJlbjpvfT1lLHI9by5sZW5ndGg7bGV0IHM9MDtmb3IobGV0IGk9MDtpPG8ubGVuZ3RoO2krKyl7Y29uc3QgZT1vW2ldO2lmKDE9PT1lLnR5cGUmJjA9PT1lLnRhZ1R5cGUpe2NvbnN0IG89bj8wOkZhKGUsdCk7aWYobz4wKXtpZihvPj0yKXtlLmNvZGVnZW5Ob2RlLnBhdGNoRmxhZz1cIi0xXCIsZS5jb2RlZ2VuTm9kZT10LmhvaXN0KGUuY29kZWdlbk5vZGUpLHMrKztjb250aW51ZX19ZWxzZXtjb25zdCBuPWUuY29kZWdlbk5vZGU7aWYoMTM9PT1uLnR5cGUpe2NvbnN0IG89SWEobik7aWYoKCFvfHw1MTI9PT1vfHwxPT09bykmJk1hKGUsdCk+PTIpe2NvbnN0IG89VmEoZSk7byYmKG4ucHJvcHM9dC5ob2lzdChvKSl9bi5keW5hbWljUHJvcHMmJihuLmR5bmFtaWNQcm9wcz10LmhvaXN0KG4uZHluYW1pY1Byb3BzKSl9fX1lbHNlIDEyPT09ZS50eXBlJiZGYShlLmNvbnRlbnQsdCk+PTImJihlLmNvZGVnZW5Ob2RlPXQuaG9pc3QoZS5jb2RlZ2VuTm9kZSkscysrKTtpZigxPT09ZS50eXBlKXtjb25zdCBuPTE9PT1lLnRhZ1R5cGU7biYmdC5zY29wZXMudlNsb3QrKyxSYShlLHQpLG4mJnQuc2NvcGVzLnZTbG90LS19ZWxzZSBpZigxMT09PWUudHlwZSlSYShlLHQsMT09PWUuY2hpbGRyZW4ubGVuZ3RoKTtlbHNlIGlmKDk9PT1lLnR5cGUpZm9yKGxldCBuPTA7bjxlLmJyYW5jaGVzLmxlbmd0aDtuKyspUmEoZS5icmFuY2hlc1tuXSx0LDE9PT1lLmJyYW5jaGVzW25dLmNoaWxkcmVuLmxlbmd0aCl9cyYmdC50cmFuc2Zvcm1Ib2lzdCYmdC50cmFuc2Zvcm1Ib2lzdChvLHQsZSkscyYmcz09PXImJjE9PT1lLnR5cGUmJjA9PT1lLnRhZ1R5cGUmJmUuY29kZWdlbk5vZGUmJjEzPT09ZS5jb2RlZ2VuTm9kZS50eXBlJiZFKGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pJiYoZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbj10LmhvaXN0KENjKGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pKSl9ZnVuY3Rpb24gRmEoZSx0KXtjb25zdHtjb25zdGFudENhY2hlOm59PXQ7c3dpdGNoKGUudHlwZSl7Y2FzZSAxOmlmKDAhPT1lLnRhZ1R5cGUpcmV0dXJuIDA7Y29uc3Qgbz1uLmdldChlKTtpZih2b2lkIDAhPT1vKXJldHVybiBvO2NvbnN0IHI9ZS5jb2RlZ2VuTm9kZTtpZigxMyE9PXIudHlwZSlyZXR1cm4gMDtpZihyLmlzQmxvY2smJlwic3ZnXCIhPT1lLnRhZyYmXCJmb3JlaWduT2JqZWN0XCIhPT1lLnRhZylyZXR1cm4gMDtpZihJYShyKSlyZXR1cm4gbi5zZXQoZSwwKSwwO3tsZXQgbz0zO2NvbnN0IHM9TWEoZSx0KTtpZigwPT09cylyZXR1cm4gbi5zZXQoZSwwKSwwO3M8byYmKG89cyk7Zm9yKGxldCByPTA7cjxlLmNoaWxkcmVuLmxlbmd0aDtyKyspe2NvbnN0IHM9RmEoZS5jaGlsZHJlbltyXSx0KTtpZigwPT09cylyZXR1cm4gbi5zZXQoZSwwKSwwO3M8byYmKG89cyl9aWYobz4xKWZvcihsZXQgcj0wO3I8ZS5wcm9wcy5sZW5ndGg7cisrKXtjb25zdCBzPWUucHJvcHNbcl07aWYoNz09PXMudHlwZSYmXCJiaW5kXCI9PT1zLm5hbWUmJnMuZXhwKXtjb25zdCByPUZhKHMuZXhwLHQpO2lmKDA9PT1yKXJldHVybiBuLnNldChlLDApLDA7cjxvJiYobz1yKX19aWYoci5pc0Jsb2NrKXtmb3IobGV0IHQ9MDt0PGUucHJvcHMubGVuZ3RoO3QrKyl7aWYoNz09PWUucHJvcHNbdF0udHlwZSlyZXR1cm4gbi5zZXQoZSwwKSwwfXQucmVtb3ZlSGVscGVyKGpsKSx0LnJlbW92ZUhlbHBlcihaYyh0LmluU1NSLHIuaXNDb21wb25lbnQpKSxyLmlzQmxvY2s9ITEsdC5oZWxwZXIoWWModC5pblNTUixyLmlzQ29tcG9uZW50KSl9cmV0dXJuIG4uc2V0KGUsbyksb31jYXNlIDI6Y2FzZSAzOnJldHVybiAzO2Nhc2UgOTpjYXNlIDExOmNhc2UgMTA6ZGVmYXVsdDpyZXR1cm4gMDtjYXNlIDU6Y2FzZSAxMjpyZXR1cm4gRmEoZS5jb250ZW50LHQpO2Nhc2UgNDpyZXR1cm4gZS5jb25zdFR5cGU7Y2FzZSA4OmxldCBzPTM7Zm9yKGxldCBuPTA7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspe2NvbnN0IG89ZS5jaGlsZHJlbltuXTtpZihQKG8pfHxBKG8pKWNvbnRpbnVlO2NvbnN0IHI9RmEobyx0KTtpZigwPT09cilyZXR1cm4gMDtyPHMmJihzPXIpfXJldHVybiBzfX1jb25zdCBQYT1uZXcgU2V0KFtyYyxzYyxpYyxsY10pO2Z1bmN0aW9uIEFhKGUsdCl7aWYoMTQ9PT1lLnR5cGUmJiFQKGUuY2FsbGVlKSYmUGEuaGFzKGUuY2FsbGVlKSl7Y29uc3Qgbj1lLmFyZ3VtZW50c1swXTtpZig0PT09bi50eXBlKXJldHVybiBGYShuLHQpO2lmKDE0PT09bi50eXBlKXJldHVybiBBYShuLHQpfXJldHVybiAwfWZ1bmN0aW9uIE1hKGUsdCl7bGV0IG49Mztjb25zdCBvPVZhKGUpO2lmKG8mJjE1PT09by50eXBlKXtjb25zdHtwcm9wZXJ0aWVzOmV9PW87Zm9yKGxldCBvPTA7bzxlLmxlbmd0aDtvKyspe2NvbnN0e2tleTpyLHZhbHVlOnN9PWVbb10saT1GYShyLHQpO2lmKDA9PT1pKXJldHVybiBpO2xldCBsO2lmKGk8biYmKG49aSksbD00PT09cy50eXBlP0ZhKHMsdCk6MTQ9PT1zLnR5cGU/QWEocyx0KTowLDA9PT1sKXJldHVybiBsO2w8biYmKG49bCl9fXJldHVybiBufWZ1bmN0aW9uIFZhKGUpe2NvbnN0IHQ9ZS5jb2RlZ2VuTm9kZTtpZigxMz09PXQudHlwZSlyZXR1cm4gdC5wcm9wc31mdW5jdGlvbiBJYShlKXtjb25zdCB0PWUucGF0Y2hGbGFnO3JldHVybiB0P3BhcnNlSW50KHQsMTApOnZvaWQgMH1mdW5jdGlvbiBCYShlLHtmaWxlbmFtZTp0PVwiXCIscHJlZml4SWRlbnRpZmllcnM6bj0hMSxob2lzdFN0YXRpYzpvPSExLGNhY2hlSGFuZGxlcnM6cj0hMSxub2RlVHJhbnNmb3JtczpzPVtdLGRpcmVjdGl2ZVRyYW5zZm9ybXM6aT17fSx0cmFuc2Zvcm1Ib2lzdDpsPW51bGwsaXNCdWlsdEluQ29tcG9uZW50OmM9Xyxpc0N1c3RvbUVsZW1lbnQ6YT1fLGV4cHJlc3Npb25QbHVnaW5zOnU9W10sc2NvcGVJZDpwPW51bGwsc2xvdHRlZDpmPSEwLHNzcjpkPSExLGluU1NSOmg9ITEsc3NyQ3NzVmFyczptPVwiXCIsYmluZGluZ01ldGFkYXRhOmc9dixpbmxpbmU6eT0hMSxpc1RTOmI9ITEsb25FcnJvcjpTPUZsLG9uV2Fybjp4PVBsLGNvbXBhdENvbmZpZzpDfSl7Y29uc3Qgdz10LnJlcGxhY2UoL1xcPy4qJC8sXCJcIikubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKSxrPXtzZWxmTmFtZTp3JiZxKHood1sxXSkpLHByZWZpeElkZW50aWZpZXJzOm4saG9pc3RTdGF0aWM6byxjYWNoZUhhbmRsZXJzOnIsbm9kZVRyYW5zZm9ybXM6cyxkaXJlY3RpdmVUcmFuc2Zvcm1zOmksdHJhbnNmb3JtSG9pc3Q6bCxpc0J1aWx0SW5Db21wb25lbnQ6Yyxpc0N1c3RvbUVsZW1lbnQ6YSxleHByZXNzaW9uUGx1Z2luczp1LHNjb3BlSWQ6cCxzbG90dGVkOmYsc3NyOmQsaW5TU1I6aCxzc3JDc3NWYXJzOm0sYmluZGluZ01ldGFkYXRhOmcsaW5saW5lOnksaXNUUzpiLG9uRXJyb3I6Uyxvbldhcm46eCxjb21wYXRDb25maWc6Qyxyb290OmUsaGVscGVyczpuZXcgTWFwLGNvbXBvbmVudHM6bmV3IFNldCxkaXJlY3RpdmVzOm5ldyBTZXQsaG9pc3RzOltdLGltcG9ydHM6W10sY29uc3RhbnRDYWNoZTpuZXcgTWFwLHRlbXBzOjAsY2FjaGVkOjAsaWRlbnRpZmllcnM6T2JqZWN0LmNyZWF0ZShudWxsKSxzY29wZXM6e3ZGb3I6MCx2U2xvdDowLHZQcmU6MCx2T25jZTowfSxwYXJlbnQ6bnVsbCxjdXJyZW50Tm9kZTplLGNoaWxkSW5kZXg6MCxpblZPbmNlOiExLGhlbHBlcihlKXtjb25zdCB0PWsuaGVscGVycy5nZXQoZSl8fDA7cmV0dXJuIGsuaGVscGVycy5zZXQoZSx0KzEpLGV9LHJlbW92ZUhlbHBlcihlKXtjb25zdCB0PWsuaGVscGVycy5nZXQoZSk7aWYodCl7Y29uc3Qgbj10LTE7bj9rLmhlbHBlcnMuc2V0KGUsbik6ay5oZWxwZXJzLmRlbGV0ZShlKX19LGhlbHBlclN0cmluZzplPT5gXyR7YmNbay5oZWxwZXIoZSldfWAscmVwbGFjZU5vZGUoZSl7ay5wYXJlbnQuY2hpbGRyZW5bay5jaGlsZEluZGV4XT1rLmN1cnJlbnROb2RlPWV9LHJlbW92ZU5vZGUoZSl7Y29uc3QgdD1lP2sucGFyZW50LmNoaWxkcmVuLmluZGV4T2YoZSk6ay5jdXJyZW50Tm9kZT9rLmNoaWxkSW5kZXg6LTE7ZSYmZSE9PWsuY3VycmVudE5vZGU/ay5jaGlsZEluZGV4PnQmJihrLmNoaWxkSW5kZXgtLSxrLm9uTm9kZVJlbW92ZWQoKSk6KGsuY3VycmVudE5vZGU9bnVsbCxrLm9uTm9kZVJlbW92ZWQoKSksay5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHQsMSl9LG9uTm9kZVJlbW92ZWQ6KCk9Pnt9LGFkZElkZW50aWZpZXJzKGUpe30scmVtb3ZlSWRlbnRpZmllcnMoZSl7fSxob2lzdChlKXtQKGUpJiYoZT1UYyhlKSksay5ob2lzdHMucHVzaChlKTtjb25zdCB0PVRjKGBfaG9pc3RlZF8ke2suaG9pc3RzLmxlbmd0aH1gLCExLGUubG9jLDIpO3JldHVybiB0LmhvaXN0ZWQ9ZSx0fSxjYWNoZTooZSx0PSExKT0+ZnVuY3Rpb24oZSx0LG49ITEpe3JldHVybnt0eXBlOjIwLGluZGV4OmUsdmFsdWU6dCxpc1ZOb2RlOm4sbG9jOlNjfX0oay5jYWNoZWQrKyxlLHQpfTtyZXR1cm4ga31mdW5jdGlvbiBMYShlLHQpe2NvbnN0IG49QmEoZSx0KTtqYShlLG4pLHQuaG9pc3RTdGF0aWMmJiRhKGUsbiksdC5zc3J8fGZ1bmN0aW9uKGUsdCl7Y29uc3R7aGVscGVyOm59PXQse2NoaWxkcmVuOm99PWU7aWYoMT09PW8ubGVuZ3RoKXtjb25zdCBuPW9bMF07aWYoT2EoZSxuKSYmbi5jb2RlZ2VuTm9kZSl7Y29uc3Qgbz1uLmNvZGVnZW5Ob2RlOzEzPT09by50eXBlJiZuYShvLHQpLGUuY29kZWdlbk5vZGU9b31lbHNlIGUuY29kZWdlbk5vZGU9bn1lbHNlIGlmKG8ubGVuZ3RoPjEpe2xldCBvPTY0O2UuY29kZWdlbk5vZGU9eGModCxuKE1sKSx2b2lkIDAsZS5jaGlsZHJlbixvK1wiXCIsdm9pZCAwLHZvaWQgMCwhMCx2b2lkIDAsITEpfX0oZSxuKSxlLmhlbHBlcnM9Wy4uLm4uaGVscGVycy5rZXlzKCldLGUuY29tcG9uZW50cz1bLi4ubi5jb21wb25lbnRzXSxlLmRpcmVjdGl2ZXM9Wy4uLm4uZGlyZWN0aXZlc10sZS5pbXBvcnRzPW4uaW1wb3J0cyxlLmhvaXN0cz1uLmhvaXN0cyxlLnRlbXBzPW4udGVtcHMsZS5jYWNoZWQ9bi5jYWNoZWR9ZnVuY3Rpb24gamEoZSx0KXt0LmN1cnJlbnROb2RlPWU7Y29uc3R7bm9kZVRyYW5zZm9ybXM6bn09dCxvPVtdO2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrKXtjb25zdCByPW5bc10oZSx0KTtpZihyJiYoRShyKT9vLnB1c2goLi4ucik6by5wdXNoKHIpKSwhdC5jdXJyZW50Tm9kZSlyZXR1cm47ZT10LmN1cnJlbnROb2RlfXN3aXRjaChlLnR5cGUpe2Nhc2UgMzp0LnNzcnx8dC5oZWxwZXIoemwpO2JyZWFrO2Nhc2UgNTp0LnNzcnx8dC5oZWxwZXIobmMpO2JyZWFrO2Nhc2UgOTpmb3IobGV0IG49MDtuPGUuYnJhbmNoZXMubGVuZ3RoO24rKylqYShlLmJyYW5jaGVzW25dLHQpO2JyZWFrO2Nhc2UgMTA6Y2FzZSAxMTpjYXNlIDE6Y2FzZSAwOiFmdW5jdGlvbihlLHQpe2xldCBuPTA7Y29uc3Qgbz0oKT0+e24tLX07Zm9yKDtuPGUuY2hpbGRyZW4ubGVuZ3RoO24rKyl7Y29uc3Qgcj1lLmNoaWxkcmVuW25dO1Aocil8fCh0LnBhcmVudD1lLHQuY2hpbGRJbmRleD1uLHQub25Ob2RlUmVtb3ZlZD1vLGphKHIsdCkpfX0oZSx0KX10LmN1cnJlbnROb2RlPWU7bGV0IHI9by5sZW5ndGg7Zm9yKDtyLS07KW9bcl0oKX1mdW5jdGlvbiBVYShlLHQpe2NvbnN0IG49UChlKT90PT50PT09ZTp0PT5lLnRlc3QodCk7cmV0dXJuKGUsbyk9PntpZigxPT09ZS50eXBlKXtjb25zdHtwcm9wczpyfT1lO2lmKDM9PT1lLnRhZ1R5cGUmJnIuc29tZShHYykpcmV0dXJuO2NvbnN0IHM9W107Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspe2NvbnN0IGw9cltpXTtpZig3PT09bC50eXBlJiZuKGwubmFtZSkpe3Iuc3BsaWNlKGksMSksaS0tO2NvbnN0IG49dChlLGwsbyk7biYmcy5wdXNoKG4pfX1yZXR1cm4gc319fWNvbnN0IERhPWU9PmAke2JjW2VdfTogXyR7YmNbZV19YDtmdW5jdGlvbiBIYShlLHQ9e30pe2NvbnN0IG49ZnVuY3Rpb24oZSx7bW9kZTp0PVwiZnVuY3Rpb25cIixwcmVmaXhJZGVudGlmaWVyczpuPVwibW9kdWxlXCI9PT10LHNvdXJjZU1hcDpvPSExLGZpbGVuYW1lOnI9XCJ0ZW1wbGF0ZS52dWUuaHRtbFwiLHNjb3BlSWQ6cz1udWxsLG9wdGltaXplSW1wb3J0czppPSExLHJ1bnRpbWVHbG9iYWxOYW1lOmw9XCJWdWVcIixydW50aW1lTW9kdWxlTmFtZTpjPVwidnVlXCIsc3NyUnVudGltZU1vZHVsZU5hbWU6YT1cInZ1ZS9zZXJ2ZXItcmVuZGVyZXJcIixzc3I6dT0hMSxpc1RTOnA9ITEsaW5TU1I6Zj0hMX0pe2NvbnN0IGQ9e21vZGU6dCxwcmVmaXhJZGVudGlmaWVyczpuLHNvdXJjZU1hcDpvLGZpbGVuYW1lOnIsc2NvcGVJZDpzLG9wdGltaXplSW1wb3J0czppLHJ1bnRpbWVHbG9iYWxOYW1lOmwscnVudGltZU1vZHVsZU5hbWU6Yyxzc3JSdW50aW1lTW9kdWxlTmFtZTphLHNzcjp1LGlzVFM6cCxpblNTUjpmLHNvdXJjZTplLmxvYy5zb3VyY2UsY29kZTpcIlwiLGNvbHVtbjoxLGxpbmU6MSxvZmZzZXQ6MCxpbmRlbnRMZXZlbDowLHB1cmU6ITEsbWFwOnZvaWQgMCxoZWxwZXI6ZT0+YF8ke2JjW2VdfWAscHVzaChlLHQpe2QuY29kZSs9ZX0saW5kZW50KCl7aCgrK2QuaW5kZW50TGV2ZWwpfSxkZWluZGVudChlPSExKXtlPy0tZC5pbmRlbnRMZXZlbDpoKC0tZC5pbmRlbnRMZXZlbCl9LG5ld2xpbmUoKXtoKGQuaW5kZW50TGV2ZWwpfX07ZnVuY3Rpb24gaChlKXtkLnB1c2goXCJcXG5cIitcIiAgXCIucmVwZWF0KGUpKX1yZXR1cm4gZH0oZSx0KTt0Lm9uQ29udGV4dENyZWF0ZWQmJnQub25Db250ZXh0Q3JlYXRlZChuKTtjb25zdHttb2RlOm8scHVzaDpyLHByZWZpeElkZW50aWZpZXJzOnMsaW5kZW50OmksZGVpbmRlbnQ6bCxuZXdsaW5lOmMsc3NyOmF9PW4sdT1lLmhlbHBlcnMubGVuZ3RoPjAscD0hcyYmXCJtb2R1bGVcIiE9PW87IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLG5ld2xpbmU6byxydW50aW1lR2xvYmFsTmFtZTpyfT10LHM9cjtpZihlLmhlbHBlcnMubGVuZ3RoPjAmJihuKGBjb25zdCBfVnVlID0gJHtzfVxcbmApLGUuaG9pc3RzLmxlbmd0aCkpe24oYGNvbnN0IHsgJHtbSGwsV2wsemwsS2wsR2xdLmZpbHRlcigodD0+ZS5oZWxwZXJzLmluY2x1ZGVzKHQpKSkubWFwKERhKS5qb2luKFwiLCBcIil9IH0gPSBfVnVlXFxuYCl9KGZ1bmN0aW9uKGUsdCl7aWYoIWUubGVuZ3RoKXJldHVybjt0LnB1cmU9ITA7Y29uc3R7cHVzaDpuLG5ld2xpbmU6b309dDtvKCk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspe2NvbnN0IHM9ZVtyXTtzJiYobihgY29uc3QgX2hvaXN0ZWRfJHtyKzF9ID0gYCksR2Eocyx0KSxvKCkpfXQucHVyZT0hMX0pKGUuaG9pc3RzLHQpLG8oKSxuKFwicmV0dXJuIFwiKX0oZSxuKTtpZihyKGBmdW5jdGlvbiAke2E/XCJzc3JSZW5kZXJcIjpcInJlbmRlclwifSgkeyhhP1tcIl9jdHhcIixcIl9wdXNoXCIsXCJfcGFyZW50XCIsXCJfYXR0cnNcIl06W1wiX2N0eFwiLFwiX2NhY2hlXCJdKS5qb2luKFwiLCBcIil9KSB7YCksaSgpLHAmJihyKFwid2l0aCAoX2N0eCkge1wiKSxpKCksdSYmKHIoYGNvbnN0IHsgJHtlLmhlbHBlcnMubWFwKERhKS5qb2luKFwiLCBcIil9IH0gPSBfVnVlYCkscihcIlxcblwiKSxjKCkpKSxlLmNvbXBvbmVudHMubGVuZ3RoJiYoV2EoZS5jb21wb25lbnRzLFwiY29tcG9uZW50XCIsbiksKGUuZGlyZWN0aXZlcy5sZW5ndGh8fGUudGVtcHM+MCkmJmMoKSksZS5kaXJlY3RpdmVzLmxlbmd0aCYmKFdhKGUuZGlyZWN0aXZlcyxcImRpcmVjdGl2ZVwiLG4pLGUudGVtcHM+MCYmYygpKSxlLnRlbXBzPjApe3IoXCJsZXQgXCIpO2ZvcihsZXQgdD0wO3Q8ZS50ZW1wczt0KyspcihgJHt0PjA/XCIsIFwiOlwiXCJ9X3RlbXAke3R9YCl9cmV0dXJuKGUuY29tcG9uZW50cy5sZW5ndGh8fGUuZGlyZWN0aXZlcy5sZW5ndGh8fGUudGVtcHMpJiYocihcIlxcblwiKSxjKCkpLGF8fHIoXCJyZXR1cm4gXCIpLGUuY29kZWdlbk5vZGU/R2EoZS5jb2RlZ2VuTm9kZSxuKTpyKFwibnVsbFwiKSxwJiYobCgpLHIoXCJ9XCIpKSxsKCkscihcIn1cIikse2FzdDplLGNvZGU6bi5jb2RlLHByZWFtYmxlOlwiXCIsbWFwOm4ubWFwP24ubWFwLnRvSlNPTigpOnZvaWQgMH19ZnVuY3Rpb24gV2EoZSx0LHtoZWxwZXI6bixwdXNoOm8sbmV3bGluZTpyLGlzVFM6c30pe2NvbnN0IGk9bihcImNvbXBvbmVudFwiPT09dD9xbDpZbCk7Zm9yKGxldCBsPTA7bDxlLmxlbmd0aDtsKyspe2xldCBuPWVbbF07Y29uc3QgYz1uLmVuZHNXaXRoKFwiX19zZWxmXCIpO2MmJihuPW4uc2xpY2UoMCwtNikpLG8oYGNvbnN0ICR7dGEobix0KX0gPSAke2l9KCR7SlNPTi5zdHJpbmdpZnkobil9JHtjP1wiLCB0cnVlXCI6XCJcIn0pJHtzP1wiIVwiOlwiXCJ9YCksbDxlLmxlbmd0aC0xJiZyKCl9fWZ1bmN0aW9uIHphKGUsdCl7Y29uc3Qgbj1lLmxlbmd0aD4zfHwhMTt0LnB1c2goXCJbXCIpLG4mJnQuaW5kZW50KCksS2EoZSx0LG4pLG4mJnQuZGVpbmRlbnQoKSx0LnB1c2goXCJdXCIpfWZ1bmN0aW9uIEthKGUsdCxuPSExLG89ITApe2NvbnN0e3B1c2g6cixuZXdsaW5lOnN9PXQ7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0IGw9ZVtpXTtQKGwpP3IobCk6RShsKT96YShsLHQpOkdhKGwsdCksaTxlLmxlbmd0aC0xJiYobj8obyYmcihcIixcIikscygpKTpvJiZyKFwiLCBcIikpfX1mdW5jdGlvbiBHYShlLHQpe2lmKFAoZSkpdC5wdXNoKGUpO2Vsc2UgaWYoQShlKSl0LnB1c2godC5oZWxwZXIoZSkpO2Vsc2Ugc3dpdGNoKGUudHlwZSl7Y2FzZSAxOmNhc2UgOTpjYXNlIDExOmNhc2UgMTI6R2EoZS5jb2RlZ2VuTm9kZSx0KTticmVhaztjYXNlIDI6IWZ1bmN0aW9uKGUsdCl7dC5wdXNoKEpTT04uc3RyaW5naWZ5KGUuY29udGVudCksZSl9KGUsdCk7YnJlYWs7Y2FzZSA0OnFhKGUsdCk7YnJlYWs7Y2FzZSA1OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQ7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7bihgJHtvKG5jKX0oYCksR2EoZS5jb250ZW50LHQpLG4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgODpKYShlLHQpO2JyZWFrO2Nhc2UgMzohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10O3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24oYCR7byh6bCl9KCR7SlNPTi5zdHJpbmdpZnkoZS5jb250ZW50KX0pYCxlKX0oZSx0KTticmVhaztjYXNlIDEzOiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQse3RhZzpzLHByb3BzOmksY2hpbGRyZW46bCxwYXRjaEZsYWc6YyxkeW5hbWljUHJvcHM6YSxkaXJlY3RpdmVzOnUsaXNCbG9jazpwLGRpc2FibGVUcmFja2luZzpmLGlzQ29tcG9uZW50OmR9PWU7dSYmbihvKFFsKStcIihcIik7cCYmbihgKCR7byhqbCl9KCR7Zj9cInRydWVcIjpcIlwifSksIGApO3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO2NvbnN0IGg9cD9aYyh0LmluU1NSLGQpOlljKHQuaW5TU1IsZCk7bihvKGgpK1wiKFwiLGUpLEthKGZ1bmN0aW9uKGUpe2xldCB0PWUubGVuZ3RoO2Zvcig7dC0tJiZudWxsPT1lW3RdOyk7cmV0dXJuIGUuc2xpY2UoMCx0KzEpLm1hcCgoZT0+ZXx8XCJudWxsXCIpKX0oW3MsaSxsLGMsYV0pLHQpLG4oXCIpXCIpLHAmJm4oXCIpXCIpO3UmJihuKFwiLCBcIiksR2EodSx0KSxuKFwiKVwiKSl9KGUsdCk7YnJlYWs7Y2FzZSAxNDohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10LHM9UChlLmNhbGxlZSk/ZS5jYWxsZWU6byhlLmNhbGxlZSk7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7bihzK1wiKFwiLGUpLEthKGUuYXJndW1lbnRzLHQpLG4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMTU6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGluZGVudDpvLGRlaW5kZW50OnIsbmV3bGluZTpzfT10LHtwcm9wZXJ0aWVzOml9PWU7aWYoIWkubGVuZ3RoKXJldHVybiB2b2lkIG4oXCJ7fVwiLGUpO2NvbnN0IGw9aS5sZW5ndGg+MXx8ITE7bihsP1wie1wiOlwieyBcIiksbCYmbygpO2ZvcihsZXQgYz0wO2M8aS5sZW5ndGg7YysrKXtjb25zdHtrZXk6ZSx2YWx1ZTpvfT1pW2NdO1lhKGUsdCksbihcIjogXCIpLEdhKG8sdCksYzxpLmxlbmd0aC0xJiYobihcIixcIikscygpKX1sJiZyKCksbihsP1wifVwiOlwiIH1cIil9KGUsdCk7YnJlYWs7Y2FzZSAxNzohZnVuY3Rpb24oZSx0KXt6YShlLmVsZW1lbnRzLHQpfShlLHQpO2JyZWFrO2Nhc2UgMTg6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGluZGVudDpvLGRlaW5kZW50OnJ9PXQse3BhcmFtczpzLHJldHVybnM6aSxib2R5OmwsbmV3bGluZTpjLGlzU2xvdDphfT1lO2EmJm4oYF8ke2JjW21jXX0oYCk7bihcIihcIixlKSxFKHMpP0thKHMsdCk6cyYmR2Eocyx0KTtuKFwiKSA9PiBcIiksKGN8fGwpJiYobihcIntcIiksbygpKTtpPyhjJiZuKFwicmV0dXJuIFwiKSxFKGkpP3phKGksdCk6R2EoaSx0KSk6bCYmR2EobCx0KTsoY3x8bCkmJihyKCksbihcIn1cIikpO2EmJm4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMTk6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7dGVzdDpuLGNvbnNlcXVlbnQ6byxhbHRlcm5hdGU6cixuZXdsaW5lOnN9PWUse3B1c2g6aSxpbmRlbnQ6bCxkZWluZGVudDpjLG5ld2xpbmU6YX09dDtpZig0PT09bi50eXBlKXtjb25zdCBlPSFNYyhuLmNvbnRlbnQpO2UmJmkoXCIoXCIpLHFhKG4sdCksZSYmaShcIilcIil9ZWxzZSBpKFwiKFwiKSxHYShuLHQpLGkoXCIpXCIpO3MmJmwoKSx0LmluZGVudExldmVsKyssc3x8aShcIiBcIiksaShcIj8gXCIpLEdhKG8sdCksdC5pbmRlbnRMZXZlbC0tLHMmJmEoKSxzfHxpKFwiIFwiKSxpKFwiOiBcIik7Y29uc3QgdT0xOT09PXIudHlwZTt1fHx0LmluZGVudExldmVsKys7R2Eocix0KSx1fHx0LmluZGVudExldmVsLS07cyYmYyghMCl9KGUsdCk7YnJlYWs7Y2FzZSAyMDohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8saW5kZW50OnIsZGVpbmRlbnQ6cyxuZXdsaW5lOml9PXQ7bihgX2NhY2hlWyR7ZS5pbmRleH1dIHx8IChgKSxlLmlzVk5vZGUmJihyKCksbihgJHtvKGZjKX0oLTEpLGApLGkoKSk7bihgX2NhY2hlWyR7ZS5pbmRleH1dID0gYCksR2EoZS52YWx1ZSx0KSxlLmlzVk5vZGUmJihuKFwiLFwiKSxpKCksbihgJHtvKGZjKX0oMSksYCksaSgpLG4oYF9jYWNoZVske2UuaW5kZXh9XWApLHMoKSk7bihcIilcIil9KGUsdCk7YnJlYWs7Y2FzZSAyMTpLYShlLmJvZHksdCwhMCwhMSl9fWZ1bmN0aW9uIHFhKGUsdCl7Y29uc3R7Y29udGVudDpuLGlzU3RhdGljOm99PWU7dC5wdXNoKG8/SlNPTi5zdHJpbmdpZnkobik6bixlKX1mdW5jdGlvbiBKYShlLHQpe2ZvcihsZXQgbj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXtjb25zdCBvPWUuY2hpbGRyZW5bbl07UChvKT90LnB1c2gobyk6R2Eobyx0KX19ZnVuY3Rpb24gWWEoZSx0KXtjb25zdHtwdXNoOm59PXQ7aWYoOD09PWUudHlwZSluKFwiW1wiKSxKYShlLHQpLG4oXCJdXCIpO2Vsc2UgaWYoZS5pc1N0YXRpYyl7bihNYyhlLmNvbnRlbnQpP2UuY29udGVudDpKU09OLnN0cmluZ2lmeShlLmNvbnRlbnQpLGUpfWVsc2UgbihgWyR7ZS5jb250ZW50fV1gLGUpfWNvbnN0IFphPVVhKC9eKGlmfGVsc2V8ZWxzZS1pZikkLywoKGUsdCxuKT0+ZnVuY3Rpb24oZSx0LG4sbyl7aWYoIShcImVsc2VcIj09PXQubmFtZXx8dC5leHAmJnQuZXhwLmNvbnRlbnQudHJpbSgpKSl7dC5leHA9VGMoXCJ0cnVlXCIsITEsdC5leHA/dC5leHAubG9jOmUubG9jKX1pZihcImlmXCI9PT10Lm5hbWUpe2NvbnN0IHI9UWEoZSx0KSxzPXt0eXBlOjksbG9jOmUubG9jLGJyYW5jaGVzOltyXX07aWYobi5yZXBsYWNlTm9kZShzKSxvKXJldHVybiBvKHMsciwhMCl9ZWxzZXtjb25zdCByPW4ucGFyZW50LmNoaWxkcmVuO2xldCBzPXIuaW5kZXhPZihlKTtmb3IoO3MtLSA+PS0xOyl7Y29uc3QgaT1yW3NdO2lmKCFpfHwyIT09aS50eXBlfHxpLmNvbnRlbnQudHJpbSgpLmxlbmd0aCl7aWYoaSYmOT09PWkudHlwZSl7bi5yZW1vdmVOb2RlKCk7Y29uc3Qgcj1RYShlLHQpO2kuYnJhbmNoZXMucHVzaChyKTtjb25zdCBzPW8mJm8oaSxyLCExKTtqYShyLG4pLHMmJnMoKSxuLmN1cnJlbnROb2RlPW51bGx9YnJlYWt9bi5yZW1vdmVOb2RlKGkpfX19KGUsdCxuLCgoZSx0LG8pPT57Y29uc3Qgcj1uLnBhcmVudC5jaGlsZHJlbjtsZXQgcz1yLmluZGV4T2YoZSksaT0wO2Zvcig7cy0tID49MDspe2NvbnN0IGU9cltzXTtlJiY5PT09ZS50eXBlJiYoaSs9ZS5icmFuY2hlcy5sZW5ndGgpfXJldHVybigpPT57aWYobyllLmNvZGVnZW5Ob2RlPVhhKHQsaSxuKTtlbHNle2NvbnN0IG89ZnVuY3Rpb24oZSl7Zm9yKDs7KWlmKDE5PT09ZS50eXBlKXtpZigxOSE9PWUuYWx0ZXJuYXRlLnR5cGUpcmV0dXJuIGU7ZT1lLmFsdGVybmF0ZX1lbHNlIDIwPT09ZS50eXBlJiYoZT1lLnZhbHVlKX0oZS5jb2RlZ2VuTm9kZSk7by5hbHRlcm5hdGU9WGEodCxpK2UuYnJhbmNoZXMubGVuZ3RoLTEsbil9fX0pKSkpO2Z1bmN0aW9uIFFhKGUsdCl7Y29uc3Qgbj0zPT09ZS50YWdUeXBlO3JldHVybnt0eXBlOjEwLGxvYzplLmxvYyxjb25kaXRpb246XCJlbHNlXCI9PT10Lm5hbWU/dm9pZCAwOnQuZXhwLGNoaWxkcmVuOm4mJiFIYyhlLFwiZm9yXCIpP2UuY2hpbGRyZW46W2VdLHVzZXJLZXk6V2MoZSxcImtleVwiKSxpc1RlbXBsYXRlSWY6bn19ZnVuY3Rpb24gWGEoZSx0LG4pe3JldHVybiBlLmNvbmRpdGlvbj9PYyhlLmNvbmRpdGlvbixldShlLHQsbiksRWMobi5oZWxwZXIoemwpLFsnXCJcIicsXCJ0cnVlXCJdKSk6ZXUoZSx0LG4pfWZ1bmN0aW9uIGV1KGUsdCxuKXtjb25zdHtoZWxwZXI6b309bixyPWtjKFwia2V5XCIsVGMoYCR7dH1gLCExLFNjLDIpKSx7Y2hpbGRyZW46c309ZSxpPXNbMF07aWYoMSE9PXMubGVuZ3RofHwxIT09aS50eXBlKXtpZigxPT09cy5sZW5ndGgmJjExPT09aS50eXBlKXtjb25zdCBlPWkuY29kZWdlbk5vZGU7cmV0dXJuIGVhKGUscixuKSxlfXtsZXQgdD02NDtyZXR1cm4geGMobixvKE1sKSx3Yyhbcl0pLHMsdCtcIlwiLHZvaWQgMCx2b2lkIDAsITAsITEsITEsZS5sb2MpfX17Y29uc3QgZT1pLmNvZGVnZW5Ob2RlLHQ9MTQ9PT0obD1lKS50eXBlJiZsLmNhbGxlZT09PXljP2wuYXJndW1lbnRzWzFdLnJldHVybnM6bDtyZXR1cm4gMTM9PT10LnR5cGUmJm5hKHQsbiksZWEodCxyLG4pLGV9dmFyIGx9Y29uc3QgdHU9VWEoXCJmb3JcIiwoKGUsdCxuKT0+e2NvbnN0e2hlbHBlcjpvLHJlbW92ZUhlbHBlcjpyfT1uO3JldHVybiBmdW5jdGlvbihlLHQsbixvKXtpZighdC5leHApcmV0dXJuO2NvbnN0IHI9c3UodC5leHApO2lmKCFyKXJldHVybjtjb25zdHtzY29wZXM6c309bix7c291cmNlOmksdmFsdWU6bCxrZXk6YyxpbmRleDphfT1yLHU9e3R5cGU6MTEsbG9jOnQubG9jLHNvdXJjZTppLHZhbHVlQWxpYXM6bCxrZXlBbGlhczpjLG9iamVjdEluZGV4QWxpYXM6YSxwYXJzZVJlc3VsdDpyLGNoaWxkcmVuOnFjKGUpP2UuY2hpbGRyZW46W2VdfTtuLnJlcGxhY2VOb2RlKHUpLHMudkZvcisrO2NvbnN0IHA9byYmbyh1KTtyZXR1cm4oKT0+e3MudkZvci0tLHAmJnAoKX19KGUsdCxuLCh0PT57Y29uc3Qgcz1FYyhvKFhsKSxbdC5zb3VyY2VdKSxpPXFjKGUpLGw9SGMoZSxcIm1lbW9cIiksYz1XYyhlLFwia2V5XCIpLGE9YyYmKDY9PT1jLnR5cGU/VGMoYy52YWx1ZS5jb250ZW50LCEwKTpjLmV4cCksdT1jP2tjKFwia2V5XCIsYSk6bnVsbCxwPTQ9PT10LnNvdXJjZS50eXBlJiZ0LnNvdXJjZS5jb25zdFR5cGU+MCxmPXA/NjQ6Yz8xMjg6MjU2O3JldHVybiB0LmNvZGVnZW5Ob2RlPXhjKG4sbyhNbCksdm9pZCAwLHMsZitcIlwiLHZvaWQgMCx2b2lkIDAsITAsIXAsITEsZS5sb2MpLCgpPT57bGV0IGM7Y29uc3R7Y2hpbGRyZW46Zn09dCxkPTEhPT1mLmxlbmd0aHx8MSE9PWZbMF0udHlwZSxoPUpjKGUpP2U6aSYmMT09PWUuY2hpbGRyZW4ubGVuZ3RoJiZKYyhlLmNoaWxkcmVuWzBdKT9lLmNoaWxkcmVuWzBdOm51bGw7aWYoaD8oYz1oLmNvZGVnZW5Ob2RlLGkmJnUmJmVhKGMsdSxuKSk6ZD9jPXhjKG4sbyhNbCksdT93YyhbdV0pOnZvaWQgMCxlLmNoaWxkcmVuLFwiNjRcIix2b2lkIDAsdm9pZCAwLCEwLHZvaWQgMCwhMSk6KGM9ZlswXS5jb2RlZ2VuTm9kZSxpJiZ1JiZlYShjLHUsbiksYy5pc0Jsb2NrIT09IXAmJihjLmlzQmxvY2s/KHIoamwpLHIoWmMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpOnIoWWMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpLGMuaXNCbG9jaz0hcCxjLmlzQmxvY2s/KG8oamwpLG8oWmMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpOm8oWWMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpLGwpe2NvbnN0IGU9JGMobHUodC5wYXJzZVJlc3VsdCxbVGMoXCJfY2FjaGVkXCIpXSkpO2UuYm9keT17dHlwZToyMSxib2R5OltOYyhbXCJjb25zdCBfbWVtbyA9IChcIixsLmV4cCxcIilcIl0pLE5jKFtcImlmIChfY2FjaGVkXCIsLi4uYT9bXCIgJiYgX2NhY2hlZC5rZXkgPT09IFwiLGFdOltdLGAgJiYgJHtuLmhlbHBlclN0cmluZyhfYyl9KF9jYWNoZWQsIF9tZW1vKSkgcmV0dXJuIF9jYWNoZWRgXSksTmMoW1wiY29uc3QgX2l0ZW0gPSBcIixjXSksVGMoXCJfaXRlbS5tZW1vID0gX21lbW9cIiksVGMoXCJyZXR1cm4gX2l0ZW1cIildLGxvYzpTY30scy5hcmd1bWVudHMucHVzaChlLFRjKFwiX2NhY2hlXCIpLFRjKFN0cmluZyhuLmNhY2hlZCsrKSkpfWVsc2Ugcy5hcmd1bWVudHMucHVzaCgkYyhsdSh0LnBhcnNlUmVzdWx0KSxjLCEwKSl9fSkpfSkpO2NvbnN0IG51PS8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLyxvdT0vLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC8scnU9L15cXCh8XFwpJC9nO2Z1bmN0aW9uIHN1KGUsdCl7Y29uc3Qgbj1lLmxvYyxvPWUuY29udGVudCxyPW8ubWF0Y2gobnUpO2lmKCFyKXJldHVybjtjb25zdFsscyxpXT1yLGw9e3NvdXJjZTppdShuLGkudHJpbSgpLG8uaW5kZXhPZihpLHMubGVuZ3RoKSksdmFsdWU6dm9pZCAwLGtleTp2b2lkIDAsaW5kZXg6dm9pZCAwfTtsZXQgYz1zLnRyaW0oKS5yZXBsYWNlKHJ1LFwiXCIpLnRyaW0oKTtjb25zdCBhPXMuaW5kZXhPZihjKSx1PWMubWF0Y2gob3UpO2lmKHUpe2M9Yy5yZXBsYWNlKG91LFwiXCIpLnRyaW0oKTtjb25zdCBlPXVbMV0udHJpbSgpO2xldCB0O2lmKGUmJih0PW8uaW5kZXhPZihlLGErYy5sZW5ndGgpLGwua2V5PWl1KG4sZSx0KSksdVsyXSl7Y29uc3Qgcj11WzJdLnRyaW0oKTtyJiYobC5pbmRleD1pdShuLHIsby5pbmRleE9mKHIsbC5rZXk/dCtlLmxlbmd0aDphK2MubGVuZ3RoKSkpfX1yZXR1cm4gYyYmKGwudmFsdWU9aXUobixjLGEpKSxsfWZ1bmN0aW9uIGl1KGUsdCxuKXtyZXR1cm4gVGModCwhMSxqYyhlLG4sdC5sZW5ndGgpKX1mdW5jdGlvbiBsdSh7dmFsdWU6ZSxrZXk6dCxpbmRleDpufSxvPVtdKXtyZXR1cm4gZnVuY3Rpb24oZSl7bGV0IHQ9ZS5sZW5ndGg7Zm9yKDt0LS0mJiFlW3RdOyk7cmV0dXJuIGUuc2xpY2UoMCx0KzEpLm1hcCgoKGUsdCk9PmV8fFRjKFwiX1wiLnJlcGVhdCh0KzEpLCExKSkpfShbZSx0LG4sLi4ub10pfWNvbnN0IGN1PVRjKFwidW5kZWZpbmVkXCIsITEpLGF1PShlLHQpPT57aWYoMT09PWUudHlwZSYmKDE9PT1lLnRhZ1R5cGV8fDM9PT1lLnRhZ1R5cGUpKXtjb25zdCBuPUhjKGUsXCJzbG90XCIpO2lmKG4pcmV0dXJuIHQuc2NvcGVzLnZTbG90KyssKCk9Pnt0LnNjb3Blcy52U2xvdC0tfX19LHV1PShlLHQsbik9PiRjKGUsdCwhMSwhMCx0Lmxlbmd0aD90WzBdLmxvYzpuKTtmdW5jdGlvbiBwdShlLHQsbj11dSl7dC5oZWxwZXIobWMpO2NvbnN0e2NoaWxkcmVuOm8sbG9jOnJ9PWUscz1bXSxpPVtdO2xldCBsPXQuc2NvcGVzLnZTbG90PjB8fHQuc2NvcGVzLnZGb3I+MDtjb25zdCBjPUhjKGUsXCJzbG90XCIsITApO2lmKGMpe2NvbnN0e2FyZzplLGV4cDp0fT1jO2UmJiFSYyhlKSYmKGw9ITApLHMucHVzaChrYyhlfHxUYyhcImRlZmF1bHRcIiwhMCksbih0LG8scikpKX1sZXQgYT0hMSx1PSExO2NvbnN0IHA9W10sZj1uZXcgU2V0O2ZvcihsZXQgbT0wO208by5sZW5ndGg7bSsrKXtjb25zdCBlPW9bbV07bGV0IHI7aWYoIXFjKGUpfHwhKHI9SGMoZSxcInNsb3RcIiwhMCkpKXszIT09ZS50eXBlJiZwLnB1c2goZSk7Y29udGludWV9aWYoYylicmVhazthPSEwO2NvbnN0e2NoaWxkcmVuOmQsbG9jOmh9PWUse2FyZzpnPVRjKFwiZGVmYXVsdFwiLCEwKSxleHA6dn09cjtsZXQgeTtSYyhnKT95PWc/Zy5jb250ZW50OlwiZGVmYXVsdFwiOmw9ITA7Y29uc3QgXz1uKHYsZCxoKTtsZXQgYixTLHg7aWYoYj1IYyhlLFwiaWZcIikpbD0hMCxpLnB1c2goT2MoYi5leHAsZnUoZyxfKSxjdSkpO2Vsc2UgaWYoUz1IYyhlLC9eZWxzZSgtaWYpPyQvLCEwKSl7bGV0IGUsdD1tO2Zvcig7dC0tJiYoZT1vW3RdLDM9PT1lLnR5cGUpOyk7aWYoZSYmcWMoZSkmJkhjKGUsXCJpZlwiKSl7by5zcGxpY2UobSwxKSxtLS07bGV0IGU9aVtpLmxlbmd0aC0xXTtmb3IoOzE5PT09ZS5hbHRlcm5hdGUudHlwZTspZT1lLmFsdGVybmF0ZTtlLmFsdGVybmF0ZT1TLmV4cD9PYyhTLmV4cCxmdShnLF8pLGN1KTpmdShnLF8pfX1lbHNlIGlmKHg9SGMoZSxcImZvclwiKSl7bD0hMDtjb25zdCBlPXgucGFyc2VSZXN1bHR8fHN1KHguZXhwKTtlJiZpLnB1c2goRWModC5oZWxwZXIoWGwpLFtlLnNvdXJjZSwkYyhsdShlKSxmdShnLF8pLCEwKV0pKX1lbHNle2lmKHkpe2lmKGYuaGFzKHkpKWNvbnRpbnVlO2YuYWRkKHkpLFwiZGVmYXVsdFwiPT09eSYmKHU9ITApfXMucHVzaChrYyhnLF8pKX19aWYoIWMpe2NvbnN0IGU9KGUsdCk9PmtjKFwiZGVmYXVsdFwiLG4oZSx0LHIpKTthP3AubGVuZ3RoJiZwLnNvbWUoKGU9Pmh1KGUpKSkmJih1fHxzLnB1c2goZSh2b2lkIDAscCkpKTpzLnB1c2goZSh2b2lkIDAsbykpfWNvbnN0IGQ9bD8yOmR1KGUuY2hpbGRyZW4pPzM6MTtsZXQgaD13YyhzLmNvbmNhdChrYyhcIl9cIixUYyhkK1wiXCIsITEpKSkscik7cmV0dXJuIGkubGVuZ3RoJiYoaD1FYyh0LmhlbHBlcih0YyksW2gsQ2MoaSldKSkse3Nsb3RzOmgsaGFzRHluYW1pY1Nsb3RzOmx9fWZ1bmN0aW9uIGZ1KGUsdCl7cmV0dXJuIHdjKFtrYyhcIm5hbWVcIixlKSxrYyhcImZuXCIsdCldKX1mdW5jdGlvbiBkdShlKXtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3Qgbj1lW3RdO3N3aXRjaChuLnR5cGUpe2Nhc2UgMTppZigyPT09bi50YWdUeXBlfHxkdShuLmNoaWxkcmVuKSlyZXR1cm4hMDticmVhaztjYXNlIDk6aWYoZHUobi5icmFuY2hlcykpcmV0dXJuITA7YnJlYWs7Y2FzZSAxMDpjYXNlIDExOmlmKGR1KG4uY2hpbGRyZW4pKXJldHVybiEwfX1yZXR1cm4hMX1mdW5jdGlvbiBodShlKXtyZXR1cm4gMiE9PWUudHlwZSYmMTIhPT1lLnR5cGV8fCgyPT09ZS50eXBlPyEhZS5jb250ZW50LnRyaW0oKTpodShlLmNvbnRlbnQpKX1jb25zdCBtdT1uZXcgV2Vha01hcCxndT0oZSx0KT0+ZnVuY3Rpb24oKXtpZigxIT09KGU9dC5jdXJyZW50Tm9kZSkudHlwZXx8MCE9PWUudGFnVHlwZSYmMSE9PWUudGFnVHlwZSlyZXR1cm47Y29uc3R7dGFnOm4scHJvcHM6b309ZSxyPTE9PT1lLnRhZ1R5cGU7bGV0IHM9cj9mdW5jdGlvbihlLHQsbj0hMSl7bGV0e3RhZzpvfT1lO2NvbnN0IHI9YnUobykscz1XYyhlLFwiaXNcIik7aWYocylpZihyKXtjb25zdCBlPTY9PT1zLnR5cGU/cy52YWx1ZSYmVGMocy52YWx1ZS5jb250ZW50LCEwKTpzLmV4cDtpZihlKXJldHVybiBFYyh0LmhlbHBlcihKbCksW2VdKX1lbHNlIDY9PT1zLnR5cGUmJnMudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSYmKG89cy52YWx1ZS5jb250ZW50LnNsaWNlKDQpKTtjb25zdCBpPSFyJiZIYyhlLFwiaXNcIik7aWYoaSYmaS5leHApcmV0dXJuIEVjKHQuaGVscGVyKEpsKSxbaS5leHBdKTtjb25zdCBsPVBjKG8pfHx0LmlzQnVpbHRJbkNvbXBvbmVudChvKTtpZihsKXJldHVybiBufHx0LmhlbHBlcihsKSxsO3JldHVybiB0LmhlbHBlcihxbCksdC5jb21wb25lbnRzLmFkZChvKSx0YShvLFwiY29tcG9uZW50XCIpfShlLHQpOmBcIiR7bn1cImA7Y29uc3QgaT1NKHMpJiZzLmNhbGxlZT09PUpsO2xldCBsLGMsYSx1LHAsZixkPTAsaD1pfHxzPT09Vmx8fHM9PT1JbHx8IXImJihcInN2Z1wiPT09bnx8XCJmb3JlaWduT2JqZWN0XCI9PT1uKTtpZihvLmxlbmd0aD4wKXtjb25zdCBuPXZ1KGUsdCx2b2lkIDAscixpKTtsPW4ucHJvcHMsZD1uLnBhdGNoRmxhZyxwPW4uZHluYW1pY1Byb3BOYW1lcztjb25zdCBvPW4uZGlyZWN0aXZlcztmPW8mJm8ubGVuZ3RoP0NjKG8ubWFwKChlPT5mdW5jdGlvbihlLHQpe2NvbnN0IG49W10sbz1tdS5nZXQoZSk7bz9uLnB1c2godC5oZWxwZXJTdHJpbmcobykpOih0LmhlbHBlcihZbCksdC5kaXJlY3RpdmVzLmFkZChlLm5hbWUpLG4ucHVzaCh0YShlLm5hbWUsXCJkaXJlY3RpdmVcIikpKTtjb25zdHtsb2M6cn09ZTtlLmV4cCYmbi5wdXNoKGUuZXhwKTtlLmFyZyYmKGUuZXhwfHxuLnB1c2goXCJ2b2lkIDBcIiksbi5wdXNoKGUuYXJnKSk7aWYoT2JqZWN0LmtleXMoZS5tb2RpZmllcnMpLmxlbmd0aCl7ZS5hcmd8fChlLmV4cHx8bi5wdXNoKFwidm9pZCAwXCIpLG4ucHVzaChcInZvaWQgMFwiKSk7Y29uc3QgdD1UYyhcInRydWVcIiwhMSxyKTtuLnB1c2god2MoZS5tb2RpZmllcnMubWFwKChlPT5rYyhlLHQpKSkscikpfXJldHVybiBDYyhuLGUubG9jKX0oZSx0KSkpKTp2b2lkIDAsbi5zaG91bGRVc2VCbG9jayYmKGg9ITApfWlmKGUuY2hpbGRyZW4ubGVuZ3RoPjApe3M9PT1CbCYmKGg9ITAsZHw9MTAyNCk7aWYociYmcyE9PVZsJiZzIT09Qmwpe2NvbnN0e3Nsb3RzOm4saGFzRHluYW1pY1Nsb3RzOm99PXB1KGUsdCk7Yz1uLG8mJihkfD0xMDI0KX1lbHNlIGlmKDE9PT1lLmNoaWxkcmVuLmxlbmd0aCYmcyE9PVZsKXtjb25zdCBuPWUuY2hpbGRyZW5bMF0sbz1uLnR5cGUscj01PT09b3x8OD09PW87ciYmMD09PUZhKG4sdCkmJihkfD0xKSxjPXJ8fDI9PT1vP246ZS5jaGlsZHJlbn1lbHNlIGM9ZS5jaGlsZHJlbn0wIT09ZCYmKGE9U3RyaW5nKGQpLHAmJnAubGVuZ3RoJiYodT1mdW5jdGlvbihlKXtsZXQgdD1cIltcIjtmb3IobGV0IG49MCxvPWUubGVuZ3RoO248bztuKyspdCs9SlNPTi5zdHJpbmdpZnkoZVtuXSksbjxvLTEmJih0Kz1cIiwgXCIpO3JldHVybiB0K1wiXVwifShwKSkpLGUuY29kZWdlbk5vZGU9eGModCxzLGwsYyxhLHUsZiwhIWgsITEscixlLmxvYyl9O2Z1bmN0aW9uIHZ1KGUsdCxuPWUucHJvcHMsbyxyLHM9ITEpe2NvbnN0e3RhZzppLGxvYzpsLGNoaWxkcmVuOmN9PWU7bGV0IGE9W107Y29uc3QgdT1bXSxwPVtdLGY9Yy5sZW5ndGg+MDtsZXQgZD0hMSxoPTAsbT0hMSxnPSExLHY9ITEseT0hMSxfPSExLGI9ITE7Y29uc3QgUz1bXSxDPSh7a2V5OmUsdmFsdWU6bn0pPT57aWYoUmMoZSkpe2NvbnN0IHM9ZS5jb250ZW50LGk9eChzKTtpZighaXx8byYmIXJ8fFwib25jbGlja1wiPT09cy50b0xvd2VyQ2FzZSgpfHxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIj09PXN8fFUocyl8fCh5PSEwKSxpJiZVKHMpJiYoYj0hMCksMjA9PT1uLnR5cGV8fCg0PT09bi50eXBlfHw4PT09bi50eXBlKSYmRmEobix0KT4wKXJldHVybjtcInJlZlwiPT09cz9tPSEwOlwiY2xhc3NcIj09PXM/Zz0hMDpcInN0eWxlXCI9PT1zP3Y9ITA6XCJrZXlcIj09PXN8fFMuaW5jbHVkZXMocyl8fFMucHVzaChzKSwhb3x8XCJjbGFzc1wiIT09cyYmXCJzdHlsZVwiIT09c3x8Uy5pbmNsdWRlcyhzKXx8Uy5wdXNoKHMpfWVsc2UgXz0hMH07Zm9yKGxldCB4PTA7eDxuLmxlbmd0aDt4Kyspe2NvbnN0IG89blt4XTtpZig2PT09by50eXBlKXtjb25zdHtsb2M6ZSxuYW1lOm4sdmFsdWU6cn09bztsZXQgcz0hMDtpZihcInJlZlwiPT09biYmKG09ITAsdC5zY29wZXMudkZvcj4wJiZhLnB1c2goa2MoVGMoXCJyZWZfZm9yXCIsITApLFRjKFwidHJ1ZVwiKSkpKSxcImlzXCI9PT1uJiYoYnUoaSl8fHImJnIuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSkpY29udGludWU7YS5wdXNoKGtjKFRjKG4sITAsamMoZSwwLG4ubGVuZ3RoKSksVGMocj9yLmNvbnRlbnQ6XCJcIixzLHI/ci5sb2M6ZSkpKX1lbHNle2NvbnN0e25hbWU6bixhcmc6cixleHA6Yyxsb2M6aH09byxtPVwiYmluZFwiPT09bixnPVwib25cIj09PW47aWYoXCJzbG90XCI9PT1uKWNvbnRpbnVlO2lmKFwib25jZVwiPT09bnx8XCJtZW1vXCI9PT1uKWNvbnRpbnVlO2lmKFwiaXNcIj09PW58fG0mJnpjKHIsXCJpc1wiKSYmYnUoaSkpY29udGludWU7aWYoZyYmcyljb250aW51ZTtpZigobSYmemMocixcImtleVwiKXx8ZyYmZiYmemMocixcInZ1ZTpiZWZvcmUtdXBkYXRlXCIpKSYmKGQ9ITApLG0mJnpjKHIsXCJyZWZcIikmJnQuc2NvcGVzLnZGb3I+MCYmYS5wdXNoKGtjKFRjKFwicmVmX2ZvclwiLCEwKSxUYyhcInRydWVcIikpKSwhciYmKG18fGcpKXtfPSEwLGMmJihhLmxlbmd0aCYmKHUucHVzaCh3Yyh5dShhKSxsKSksYT1bXSksdS5wdXNoKG0/Yzp7dHlwZToxNCxsb2M6aCxjYWxsZWU6dC5oZWxwZXIoY2MpLGFyZ3VtZW50czpbY119KSk7Y29udGludWV9Y29uc3Qgdj10LmRpcmVjdGl2ZVRyYW5zZm9ybXNbbl07aWYodil7Y29uc3R7cHJvcHM6bixuZWVkUnVudGltZTpyfT12KG8sZSx0KTshcyYmbi5mb3JFYWNoKEMpLGEucHVzaCguLi5uKSxyJiYocC5wdXNoKG8pLEEocikmJm11LnNldChvLHIpKX1lbHNlIEQobil8fChwLnB1c2gobyksZiYmKGQ9ITApKX19bGV0IHc7aWYodS5sZW5ndGg/KGEubGVuZ3RoJiZ1LnB1c2god2MoeXUoYSksbCkpLHc9dS5sZW5ndGg+MT9FYyh0LmhlbHBlcihvYyksdSxsKTp1WzBdKTphLmxlbmd0aCYmKHc9d2MoeXUoYSksbCkpLF8/aHw9MTY6KGcmJiFvJiYoaHw9MiksdiYmIW8mJihofD00KSxTLmxlbmd0aCYmKGh8PTgpLHkmJihofD0zMikpLGR8fDAhPT1oJiYzMiE9PWh8fCEobXx8Ynx8cC5sZW5ndGg+MCl8fChofD01MTIpLCF0LmluU1NSJiZ3KXN3aXRjaCh3LnR5cGUpe2Nhc2UgMTU6bGV0IGU9LTEsbj0tMSxvPSExO2ZvcihsZXQgdD0wO3Q8dy5wcm9wZXJ0aWVzLmxlbmd0aDt0Kyspe2NvbnN0IHI9dy5wcm9wZXJ0aWVzW3RdLmtleTtSYyhyKT9cImNsYXNzXCI9PT1yLmNvbnRlbnQ/ZT10Olwic3R5bGVcIj09PXIuY29udGVudCYmKG49dCk6ci5pc0hhbmRsZXJLZXl8fChvPSEwKX1jb25zdCByPXcucHJvcGVydGllc1tlXSxzPXcucHJvcGVydGllc1tuXTtvP3c9RWModC5oZWxwZXIoaWMpLFt3XSk6KHImJiFSYyhyLnZhbHVlKSYmKHIudmFsdWU9RWModC5oZWxwZXIocmMpLFtyLnZhbHVlXSkpLHMmJih2fHw0PT09cy52YWx1ZS50eXBlJiZcIltcIj09PXMudmFsdWUuY29udGVudC50cmltKClbMF18fDE3PT09cy52YWx1ZS50eXBlKSYmKHMudmFsdWU9RWModC5oZWxwZXIoc2MpLFtzLnZhbHVlXSkpKTticmVhaztjYXNlIDE0OmJyZWFrO2RlZmF1bHQ6dz1FYyh0LmhlbHBlcihpYyksW0VjKHQuaGVscGVyKGxjKSxbd10pXSl9cmV0dXJue3Byb3BzOncsZGlyZWN0aXZlczpwLHBhdGNoRmxhZzpoLGR5bmFtaWNQcm9wTmFtZXM6UyxzaG91bGRVc2VCbG9jazpkfX1mdW5jdGlvbiB5dShlKXtjb25zdCB0PW5ldyBNYXAsbj1bXTtmb3IobGV0IG89MDtvPGUubGVuZ3RoO28rKyl7Y29uc3Qgcj1lW29dO2lmKDg9PT1yLmtleS50eXBlfHwhci5rZXkuaXNTdGF0aWMpe24ucHVzaChyKTtjb250aW51ZX1jb25zdCBzPXIua2V5LmNvbnRlbnQsaT10LmdldChzKTtpPyhcInN0eWxlXCI9PT1zfHxcImNsYXNzXCI9PT1zfHx4KHMpKSYmX3UoaSxyKToodC5zZXQocyxyKSxuLnB1c2gocikpfXJldHVybiBufWZ1bmN0aW9uIF91KGUsdCl7MTc9PT1lLnZhbHVlLnR5cGU/ZS52YWx1ZS5lbGVtZW50cy5wdXNoKHQudmFsdWUpOmUudmFsdWU9Q2MoW2UudmFsdWUsdC52YWx1ZV0sZS5sb2MpfWZ1bmN0aW9uIGJ1KGUpe3JldHVyblwiY29tcG9uZW50XCI9PT1lfHxcIkNvbXBvbmVudFwiPT09ZX1jb25zdCBTdT0oZSx0KT0+e2lmKEpjKGUpKXtjb25zdHtjaGlsZHJlbjpuLGxvYzpvfT1lLHtzbG90TmFtZTpyLHNsb3RQcm9wczpzfT1mdW5jdGlvbihlLHQpe2xldCBuLG89J1wiZGVmYXVsdFwiJztjb25zdCByPVtdO2ZvcihsZXQgcz0wO3M8ZS5wcm9wcy5sZW5ndGg7cysrKXtjb25zdCB0PWUucHJvcHNbc107Nj09PXQudHlwZT90LnZhbHVlJiYoXCJuYW1lXCI9PT10Lm5hbWU/bz1KU09OLnN0cmluZ2lmeSh0LnZhbHVlLmNvbnRlbnQpOih0Lm5hbWU9eih0Lm5hbWUpLHIucHVzaCh0KSkpOlwiYmluZFwiPT09dC5uYW1lJiZ6Yyh0LmFyZyxcIm5hbWVcIik/dC5leHAmJihvPXQuZXhwKTooXCJiaW5kXCI9PT10Lm5hbWUmJnQuYXJnJiZSYyh0LmFyZykmJih0LmFyZy5jb250ZW50PXoodC5hcmcuY29udGVudCkpLHIucHVzaCh0KSl9aWYoci5sZW5ndGg+MCl7Y29uc3R7cHJvcHM6byxkaXJlY3RpdmVzOnN9PXZ1KGUsdCxyLCExLCExKTtuPW99cmV0dXJue3Nsb3ROYW1lOm8sc2xvdFByb3BzOm59fShlLHQpLGk9W3QucHJlZml4SWRlbnRpZmllcnM/XCJfY3R4LiRzbG90c1wiOlwiJHNsb3RzXCIscixcInt9XCIsXCJ1bmRlZmluZWRcIixcInRydWVcIl07bGV0IGw9MjtzJiYoaVsyXT1zLGw9Myksbi5sZW5ndGgmJihpWzNdPSRjKFtdLG4sITEsITEsbyksbD00KSx0LnNjb3BlSWQmJiF0LnNsb3R0ZWQmJihsPTUpLGkuc3BsaWNlKGwpLGUuY29kZWdlbk5vZGU9RWModC5oZWxwZXIoZWMpLGksbyl9fTtjb25zdCB4dT0vXlxccyooW1xcdyRfXSt8KGFzeW5jXFxzKik/XFwoW14pXSo/XFwpKVxccyo9PnxeXFxzKihhc3luY1xccyspP2Z1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvLEN1PShlLHQsbixvKT0+e2NvbnN0e2xvYzpyLG1vZGlmaWVyczpzLGFyZzppfT1lO2xldCBsO2lmKDQ9PT1pLnR5cGUpaWYoaS5pc1N0YXRpYyl7bGV0IGU9aS5jb250ZW50O2Uuc3RhcnRzV2l0aChcInZ1ZTpcIikmJihlPWB2bm9kZS0ke2Uuc2xpY2UoNCl9YCksbD1UYyhKKHooZSkpLCEwLGkubG9jKX1lbHNlIGw9TmMoW2Ake24uaGVscGVyU3RyaW5nKHBjKX0oYCxpLFwiKVwiXSk7ZWxzZSBsPWksbC5jaGlsZHJlbi51bnNoaWZ0KGAke24uaGVscGVyU3RyaW5nKHBjKX0oYCksbC5jaGlsZHJlbi5wdXNoKFwiKVwiKTtsZXQgYz1lLmV4cDtjJiYhYy5jb250ZW50LnRyaW0oKSYmKGM9dm9pZCAwKTtsZXQgYT1uLmNhY2hlSGFuZGxlcnMmJiFjJiYhbi5pblZPbmNlO2lmKGMpe2NvbnN0IGU9TGMoYy5jb250ZW50KSx0PSEoZXx8eHUudGVzdChjLmNvbnRlbnQpKSxuPWMuY29udGVudC5pbmNsdWRlcyhcIjtcIik7KHR8fGEmJmUpJiYoYz1OYyhbYCR7dD9cIiRldmVudFwiOlwiKC4uLmFyZ3MpXCJ9ID0+ICR7bj9cIntcIjpcIihcIn1gLGMsbj9cIn1cIjpcIilcIl0pKX1sZXQgdT17cHJvcHM6W2tjKGwsY3x8VGMoXCIoKSA9PiB7fVwiLCExLHIpKV19O3JldHVybiBvJiYodT1vKHUpKSxhJiYodS5wcm9wc1swXS52YWx1ZT1uLmNhY2hlKHUucHJvcHNbMF0udmFsdWUpKSx1LnByb3BzLmZvckVhY2goKGU9PmUua2V5LmlzSGFuZGxlcktleT0hMCkpLHV9LHd1PShlLHQsbik9Pntjb25zdHtleHA6byxtb2RpZmllcnM6cixsb2M6c309ZSxpPWUuYXJnO3JldHVybiA0IT09aS50eXBlPyhpLmNoaWxkcmVuLnVuc2hpZnQoXCIoXCIpLGkuY2hpbGRyZW4ucHVzaCgnKSB8fCBcIlwiJykpOmkuaXNTdGF0aWN8fChpLmNvbnRlbnQ9YCR7aS5jb250ZW50fSB8fCBcIlwiYCksci5pbmNsdWRlcyhcImNhbWVsXCIpJiYoND09PWkudHlwZT9pLmNvbnRlbnQ9aS5pc1N0YXRpYz96KGkuY29udGVudCk6YCR7bi5oZWxwZXJTdHJpbmcoYWMpfSgke2kuY29udGVudH0pYDooaS5jaGlsZHJlbi51bnNoaWZ0KGAke24uaGVscGVyU3RyaW5nKGFjKX0oYCksaS5jaGlsZHJlbi5wdXNoKFwiKVwiKSkpLG4uaW5TU1J8fChyLmluY2x1ZGVzKFwicHJvcFwiKSYma3UoaSxcIi5cIiksci5pbmNsdWRlcyhcImF0dHJcIikmJmt1KGksXCJeXCIpKSwhb3x8ND09PW8udHlwZSYmIW8uY29udGVudC50cmltKCk/e3Byb3BzOltrYyhpLFRjKFwiXCIsITAscykpXX06e3Byb3BzOltrYyhpLG8pXX19LGt1PShlLHQpPT57ND09PWUudHlwZT9lLmNvbnRlbnQ9ZS5pc1N0YXRpYz90K2UuY29udGVudDpgXFxgJHt0fVxcJHske2UuY29udGVudH19XFxgYDooZS5jaGlsZHJlbi51bnNoaWZ0KGAnJHt0fScgKyAoYCksZS5jaGlsZHJlbi5wdXNoKFwiKVwiKSl9LFR1PShlLHQpPT57aWYoMD09PWUudHlwZXx8MT09PWUudHlwZXx8MTE9PT1lLnR5cGV8fDEwPT09ZS50eXBlKXJldHVybigpPT57Y29uc3Qgbj1lLmNoaWxkcmVuO2xldCBvLHI9ITE7Zm9yKGxldCBlPTA7ZTxuLmxlbmd0aDtlKyspe2NvbnN0IHQ9bltlXTtpZihLYyh0KSl7cj0hMDtmb3IobGV0IHI9ZSsxO3I8bi5sZW5ndGg7cisrKXtjb25zdCBzPW5bcl07aWYoIUtjKHMpKXtvPXZvaWQgMDticmVha31vfHwobz1uW2VdPU5jKFt0XSx0LmxvYykpLG8uY2hpbGRyZW4ucHVzaChcIiArIFwiLHMpLG4uc3BsaWNlKHIsMSksci0tfX19aWYociYmKDEhPT1uLmxlbmd0aHx8MCE9PWUudHlwZSYmKDEhPT1lLnR5cGV8fDAhPT1lLnRhZ1R5cGV8fGUucHJvcHMuZmluZCgoZT0+Nz09PWUudHlwZSYmIXQuZGlyZWN0aXZlVHJhbnNmb3Jtc1tlLm5hbWVdKSkpKSlmb3IobGV0IGU9MDtlPG4ubGVuZ3RoO2UrKyl7Y29uc3Qgbz1uW2VdO2lmKEtjKG8pfHw4PT09by50eXBlKXtjb25zdCByPVtdOzI9PT1vLnR5cGUmJlwiIFwiPT09by5jb250ZW50fHxyLnB1c2gobyksdC5zc3J8fDAhPT1GYShvLHQpfHxyLnB1c2goXCIxXCIpLG5bZV09e3R5cGU6MTIsY29udGVudDpvLGxvYzpvLmxvYyxjb2RlZ2VuTm9kZTpFYyh0LmhlbHBlcihLbCkscil9fX19fSxOdT1uZXcgV2Vha1NldCxFdT0oZSx0KT0+e2lmKDE9PT1lLnR5cGUmJkhjKGUsXCJvbmNlXCIsITApKXtpZihOdS5oYXMoZSl8fHQuaW5WT25jZSlyZXR1cm47cmV0dXJuIE51LmFkZChlKSx0LmluVk9uY2U9ITAsdC5oZWxwZXIoZmMpLCgpPT57dC5pblZPbmNlPSExO2NvbnN0IGU9dC5jdXJyZW50Tm9kZTtlLmNvZGVnZW5Ob2RlJiYoZS5jb2RlZ2VuTm9kZT10LmNhY2hlKGUuY29kZWdlbk5vZGUsITApKX19fSwkdT0oZSx0LG4pPT57Y29uc3R7ZXhwOm8sYXJnOnJ9PWU7aWYoIW8pcmV0dXJuIE91KCk7Y29uc3Qgcz1vLmxvYy5zb3VyY2UsaT00PT09by50eXBlP28uY29udGVudDpzO2lmKCFpLnRyaW0oKXx8IUxjKGkpKXJldHVybiBPdSgpO2NvbnN0IGw9cnx8VGMoXCJtb2RlbFZhbHVlXCIsITApLGM9cj9SYyhyKT9gb25VcGRhdGU6JHtyLmNvbnRlbnR9YDpOYyhbJ1wib25VcGRhdGU6XCIgKyAnLHJdKTpcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjtsZXQgYTthPU5jKFtgJHtuLmlzVFM/XCIoJGV2ZW50OiBhbnkpXCI6XCIkZXZlbnRcIn0gPT4gKChgLG8sXCIpID0gJGV2ZW50KVwiXSk7Y29uc3QgdT1ba2MobCxlLmV4cCksa2MoYyxhKV07aWYoZS5tb2RpZmllcnMubGVuZ3RoJiYxPT09dC50YWdUeXBlKXtjb25zdCB0PWUubW9kaWZpZXJzLm1hcCgoZT0+KE1jKGUpP2U6SlNPTi5zdHJpbmdpZnkoZSkpK1wiOiB0cnVlXCIpKS5qb2luKFwiLCBcIiksbj1yP1JjKHIpP2Ake3IuY29udGVudH1Nb2RpZmllcnNgOk5jKFtyLCcgKyBcIk1vZGlmaWVyc1wiJ10pOlwibW9kZWxNb2RpZmllcnNcIjt1LnB1c2goa2MobixUYyhgeyAke3R9IH1gLCExLGUubG9jLDIpKSl9cmV0dXJuIE91KHUpfTtmdW5jdGlvbiBPdShlPVtdKXtyZXR1cm57cHJvcHM6ZX19Y29uc3QgUnU9bmV3IFdlYWtTZXQsRnU9KGUsdCk9PntpZigxPT09ZS50eXBlKXtjb25zdCBuPUhjKGUsXCJtZW1vXCIpO2lmKCFufHxSdS5oYXMoZSkpcmV0dXJuO3JldHVybiBSdS5hZGQoZSksKCk9Pntjb25zdCBvPWUuY29kZWdlbk5vZGV8fHQuY3VycmVudE5vZGUuY29kZWdlbk5vZGU7byYmMTM9PT1vLnR5cGUmJigxIT09ZS50YWdUeXBlJiZuYShvLHQpLGUuY29kZWdlbk5vZGU9RWModC5oZWxwZXIoeWMpLFtuLmV4cCwkYyh2b2lkIDAsbyksXCJfY2FjaGVcIixTdHJpbmcodC5jYWNoZWQrKyldKSl9fX07ZnVuY3Rpb24gUHUoZSx0PXt9KXtjb25zdCBuPXQub25FcnJvcnx8Rmwsbz1cIm1vZHVsZVwiPT09dC5tb2RlOyEwPT09dC5wcmVmaXhJZGVudGlmaWVycz9uKEFsKDQ2KSk6byYmbihBbCg0NykpO3QuY2FjaGVIYW5kbGVycyYmbihBbCg0OCkpLHQuc2NvcGVJZCYmIW8mJm4oQWwoNDkpKTtjb25zdCByPVAoZSk/aWEoZSx0KTplLFtzLGldPVtbRXUsWmEsRnUsdHUsU3UsZ3UsYXUsVHVdLHtvbjpDdSxiaW5kOnd1LG1vZGVsOiR1fV07cmV0dXJuIExhKHIsdyh7fSx0LHtwcmVmaXhJZGVudGlmaWVyczpmYWxzZSxub2RlVHJhbnNmb3JtczpbLi4ucywuLi50Lm5vZGVUcmFuc2Zvcm1zfHxbXV0sZGlyZWN0aXZlVHJhbnNmb3Jtczp3KHt9LGksdC5kaXJlY3RpdmVUcmFuc2Zvcm1zfHx7fSl9KSksSGEocix3KHt9LHQse3ByZWZpeElkZW50aWZpZXJzOmZhbHNlfSkpfWNvbnN0IEF1PVN5bWJvbChcIlwiKSxNdT1TeW1ib2woXCJcIiksVnU9U3ltYm9sKFwiXCIpLEl1PVN5bWJvbChcIlwiKSxCdT1TeW1ib2woXCJcIiksTHU9U3ltYm9sKFwiXCIpLGp1PVN5bWJvbChcIlwiKSxVdT1TeW1ib2woXCJcIiksRHU9U3ltYm9sKFwiXCIpLEh1PVN5bWJvbChcIlwiKTt2YXIgV3U7bGV0IHp1O1d1PXtbQXVdOlwidk1vZGVsUmFkaW9cIixbTXVdOlwidk1vZGVsQ2hlY2tib3hcIixbVnVdOlwidk1vZGVsVGV4dFwiLFtJdV06XCJ2TW9kZWxTZWxlY3RcIixbQnVdOlwidk1vZGVsRHluYW1pY1wiLFtMdV06XCJ3aXRoTW9kaWZpZXJzXCIsW2p1XTpcIndpdGhLZXlzXCIsW1V1XTpcInZTaG93XCIsW0R1XTpcIlRyYW5zaXRpb25cIixbSHVdOlwiVHJhbnNpdGlvbkdyb3VwXCJ9LE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoV3UpLmZvckVhY2goKGU9PntiY1tlXT1XdVtlXX0pKTtjb25zdCBLdT1lKFwic3R5bGUsaWZyYW1lLHNjcmlwdCxub3NjcmlwdFwiLCEwKSxHdT17aXNWb2lkVGFnOmYsaXNOYXRpdmVUYWc6ZT0+dShlKXx8cChlKSxpc1ByZVRhZzplPT5cInByZVwiPT09ZSxkZWNvZGVFbnRpdGllczpmdW5jdGlvbihlLHQ9ITEpe3JldHVybiB6dXx8KHp1PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLHQ/KHp1LmlubmVySFRNTD1gPGRpdiBmb289XCIke2UucmVwbGFjZSgvXCIvZyxcIiZxdW90O1wiKX1cIj5gLHp1LmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZShcImZvb1wiKSk6KHp1LmlubmVySFRNTD1lLHp1LnRleHRDb250ZW50KX0saXNCdWlsdEluQ29tcG9uZW50OmU9PkZjKGUsXCJUcmFuc2l0aW9uXCIpP0R1OkZjKGUsXCJUcmFuc2l0aW9uR3JvdXBcIik/SHU6dm9pZCAwLGdldE5hbWVzcGFjZShlLHQpe2xldCBuPXQ/dC5uczowO2lmKHQmJjI9PT1uKWlmKFwiYW5ub3RhdGlvbi14bWxcIj09PXQudGFnKXtpZihcInN2Z1wiPT09ZSlyZXR1cm4gMTt0LnByb3BzLnNvbWUoKGU9PjY9PT1lLnR5cGUmJlwiZW5jb2RpbmdcIj09PWUubmFtZSYmbnVsbCE9ZS52YWx1ZSYmKFwidGV4dC9odG1sXCI9PT1lLnZhbHVlLmNvbnRlbnR8fFwiYXBwbGljYXRpb24veGh0bWwreG1sXCI9PT1lLnZhbHVlLmNvbnRlbnQpKSkmJihuPTApfWVsc2UvXm0oPzpbaW9uc118dGV4dCkkLy50ZXN0KHQudGFnKSYmXCJtZ2x5cGhcIiE9PWUmJlwibWFsaWdubWFya1wiIT09ZSYmKG49MCk7ZWxzZSB0JiYxPT09biYmKFwiZm9yZWlnbk9iamVjdFwiIT09dC50YWcmJlwiZGVzY1wiIT09dC50YWcmJlwidGl0bGVcIiE9PXQudGFnfHwobj0wKSk7aWYoMD09PW4pe2lmKFwic3ZnXCI9PT1lKXJldHVybiAxO2lmKFwibWF0aFwiPT09ZSlyZXR1cm4gMn1yZXR1cm4gbn0sZ2V0VGV4dE1vZGUoe3RhZzplLG5zOnR9KXtpZigwPT09dCl7aWYoXCJ0ZXh0YXJlYVwiPT09ZXx8XCJ0aXRsZVwiPT09ZSlyZXR1cm4gMTtpZihLdShlKSlyZXR1cm4gMn1yZXR1cm4gMH19LHF1PShlLHQpPT57Y29uc3Qgbj1sKGUpO3JldHVybiBUYyhKU09OLnN0cmluZ2lmeShuKSwhMSx0LDMpfTtjb25zdCBKdT1lKFwicGFzc2l2ZSxvbmNlLGNhcHR1cmVcIiksWXU9ZShcInN0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QsbWlkZGxlXCIpLFp1PWUoXCJsZWZ0LHJpZ2h0XCIpLFF1PWUoXCJvbmtleXVwLG9ua2V5ZG93bixvbmtleXByZXNzXCIsITApLFh1PShlLHQpPT5SYyhlKSYmXCJvbmNsaWNrXCI9PT1lLmNvbnRlbnQudG9Mb3dlckNhc2UoKT9UYyh0LCEwKTo0IT09ZS50eXBlP05jKFtcIihcIixlLGApID09PSBcIm9uQ2xpY2tcIiA/IFwiJHt0fVwiIDogKGAsZSxcIilcIl0pOmUsZXA9KGUsdCk9PnsxIT09ZS50eXBlfHwwIT09ZS50YWdUeXBlfHxcInNjcmlwdFwiIT09ZS50YWcmJlwic3R5bGVcIiE9PWUudGFnfHx0LnJlbW92ZU5vZGUoKX0sdHA9W2U9PnsxPT09ZS50eXBlJiZlLnByb3BzLmZvckVhY2goKCh0LG4pPT57Nj09PXQudHlwZSYmXCJzdHlsZVwiPT09dC5uYW1lJiZ0LnZhbHVlJiYoZS5wcm9wc1tuXT17dHlwZTo3LG5hbWU6XCJiaW5kXCIsYXJnOlRjKFwic3R5bGVcIiwhMCx0LmxvYyksZXhwOnF1KHQudmFsdWUuY29udGVudCx0LmxvYyksbW9kaWZpZXJzOltdLGxvYzp0LmxvY30pfSkpfV0sbnA9e2Nsb2FrOigpPT4oe3Byb3BzOltdfSksaHRtbDooZSx0LG4pPT57Y29uc3R7ZXhwOm8sbG9jOnJ9PWU7cmV0dXJuIHQuY2hpbGRyZW4ubGVuZ3RoJiYodC5jaGlsZHJlbi5sZW5ndGg9MCkse3Byb3BzOltrYyhUYyhcImlubmVySFRNTFwiLCEwLHIpLG98fFRjKFwiXCIsITApKV19fSx0ZXh0OihlLHQsbik9Pntjb25zdHtleHA6byxsb2M6cn09ZTtyZXR1cm4gdC5jaGlsZHJlbi5sZW5ndGgmJih0LmNoaWxkcmVuLmxlbmd0aD0wKSx7cHJvcHM6W2tjKFRjKFwidGV4dENvbnRlbnRcIiwhMCksbz9GYShvLG4pPjA/bzpFYyhuLmhlbHBlclN0cmluZyhuYyksW29dLHIpOlRjKFwiXCIsITApKV19fSxtb2RlbDooZSx0LG4pPT57Y29uc3Qgbz0kdShlLHQsbik7aWYoIW8ucHJvcHMubGVuZ3RofHwxPT09dC50YWdUeXBlKXJldHVybiBvO2NvbnN0e3RhZzpyfT10LHM9bi5pc0N1c3RvbUVsZW1lbnQocik7aWYoXCJpbnB1dFwiPT09cnx8XCJ0ZXh0YXJlYVwiPT09cnx8XCJzZWxlY3RcIj09PXJ8fHMpe2xldCBlPVZ1LGk9ITE7aWYoXCJpbnB1dFwiPT09cnx8cyl7Y29uc3Qgbj1XYyh0LFwidHlwZVwiKTtpZihuKXtpZig3PT09bi50eXBlKWU9QnU7ZWxzZSBpZihuLnZhbHVlKXN3aXRjaChuLnZhbHVlLmNvbnRlbnQpe2Nhc2VcInJhZGlvXCI6ZT1BdTticmVhaztjYXNlXCJjaGVja2JveFwiOmU9TXU7YnJlYWs7Y2FzZVwiZmlsZVwiOmk9ITB9fWVsc2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJvcHMuc29tZSgoZT0+ISg3IT09ZS50eXBlfHxcImJpbmRcIiE9PWUubmFtZXx8ZS5hcmcmJjQ9PT1lLmFyZy50eXBlJiZlLmFyZy5pc1N0YXRpYykpKX0pKHQpJiYoZT1CdSl9ZWxzZVwic2VsZWN0XCI9PT1yJiYoZT1JdSk7aXx8KG8ubmVlZFJ1bnRpbWU9bi5oZWxwZXIoZSkpfXJldHVybiBvLnByb3BzPW8ucHJvcHMuZmlsdGVyKChlPT4hKDQ9PT1lLmtleS50eXBlJiZcIm1vZGVsVmFsdWVcIj09PWUua2V5LmNvbnRlbnQpKSksb30sb246KGUsdCxuKT0+Q3UoZSwwLG4sKHQ9Pntjb25zdHttb2RpZmllcnM6b309ZTtpZighby5sZW5ndGgpcmV0dXJuIHQ7bGV0e2tleTpyLHZhbHVlOnN9PXQucHJvcHNbMF07Y29uc3R7a2V5TW9kaWZpZXJzOmksbm9uS2V5TW9kaWZpZXJzOmwsZXZlbnRPcHRpb25Nb2RpZmllcnM6Y309KChlLHQsbixvKT0+e2NvbnN0IHI9W10scz1bXSxpPVtdO2ZvcihsZXQgbD0wO2w8dC5sZW5ndGg7bCsrKXtjb25zdCBuPXRbbF07SnUobik/aS5wdXNoKG4pOlp1KG4pP1JjKGUpP1F1KGUuY29udGVudCk/ci5wdXNoKG4pOnMucHVzaChuKTooci5wdXNoKG4pLHMucHVzaChuKSk6WXUobik/cy5wdXNoKG4pOnIucHVzaChuKX1yZXR1cm57a2V5TW9kaWZpZXJzOnIsbm9uS2V5TW9kaWZpZXJzOnMsZXZlbnRPcHRpb25Nb2RpZmllcnM6aX19KShyLG8pO2lmKGwuaW5jbHVkZXMoXCJyaWdodFwiKSYmKHI9WHUocixcIm9uQ29udGV4dG1lbnVcIikpLGwuaW5jbHVkZXMoXCJtaWRkbGVcIikmJihyPVh1KHIsXCJvbk1vdXNldXBcIikpLGwubGVuZ3RoJiYocz1FYyhuLmhlbHBlcihMdSksW3MsSlNPTi5zdHJpbmdpZnkobCldKSksIWkubGVuZ3RofHxSYyhyKSYmIVF1KHIuY29udGVudCl8fChzPUVjKG4uaGVscGVyKGp1KSxbcyxKU09OLnN0cmluZ2lmeShpKV0pKSxjLmxlbmd0aCl7Y29uc3QgZT1jLm1hcChxKS5qb2luKFwiXCIpO3I9UmMocik/VGMoYCR7ci5jb250ZW50fSR7ZX1gLCEwKTpOYyhbXCIoXCIscixgKSArIFwiJHtlfVwiYF0pfXJldHVybntwcm9wczpba2MocixzKV19fSkpLHNob3c6KGUsdCxuKT0+KHtwcm9wczpbXSxuZWVkUnVudGltZTpuLmhlbHBlcihVdSl9KX07Y29uc3Qgb3A9T2JqZWN0LmNyZWF0ZShudWxsKTtmdW5jdGlvbiBycChlLHQpe2lmKCFQKGUpKXtpZighZS5ub2RlVHlwZSlyZXR1cm4gXztlPWUuaW5uZXJIVE1MfWNvbnN0IG49ZSxvPW9wW25dO2lmKG8pcmV0dXJuIG87aWYoXCIjXCI9PT1lWzBdKXtjb25zdCB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk7ZT10P3QuaW5uZXJIVE1MOlwiXCJ9Y29uc3R7Y29kZTpyfT1mdW5jdGlvbihlLHQ9e30pe3JldHVybiBQdShlLHcoe30sR3UsdCx7bm9kZVRyYW5zZm9ybXM6W2VwLC4uLnRwLC4uLnQubm9kZVRyYW5zZm9ybXN8fFtdXSxkaXJlY3RpdmVUcmFuc2Zvcm1zOncoe30sbnAsdC5kaXJlY3RpdmVUcmFuc2Zvcm1zfHx7fSksdHJhbnNmb3JtSG9pc3Q6bnVsbH0pKX0oZSx3KHtob2lzdFN0YXRpYzohMCxvbkVycm9yOnZvaWQgMCxvbldhcm46X30sdCkpLHM9bmV3IEZ1bmN0aW9uKFwiVnVlXCIscikoUmwpO3JldHVybiBzLl9yYz0hMCxvcFtuXT1zfUZzKHJwKTtleHBvcnR7aW8gYXMgQmFzZVRyYW5zaXRpb24sS3IgYXMgQ29tbWVudCxuZSBhcyBFZmZlY3RTY29wZSxXciBhcyBGcmFnbWVudCxfbyBhcyBLZWVwQWxpdmUsZ2UgYXMgUmVhY3RpdmVFZmZlY3QsR3IgYXMgU3RhdGljLFVuIGFzIFN1c3BlbnNlLEhyIGFzIFRlbGVwb3J0LHpyIGFzIFRleHQsRmkgYXMgVHJhbnNpdGlvbixZaSBhcyBUcmFuc2l0aW9uR3JvdXAsTmkgYXMgVnVlRWxlbWVudCxadCBhcyBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyxZdCBhcyBjYWxsV2l0aEVycm9ySGFuZGxpbmcseiBhcyBjYW1lbGl6ZSxxIGFzIGNhcGl0YWxpemUsZnMgYXMgY2xvbmVWTm9kZSxpaSBhcyBjb21wYXRVdGlscyxycCBhcyBjb21waWxlLGpzIGFzIGNvbXB1dGVkLE5sIGFzIGNyZWF0ZUFwcCxucyBhcyBjcmVhdGVCbG9jayxtcyBhcyBjcmVhdGVDb21tZW50Vk5vZGUsdHMgYXMgY3JlYXRlRWxlbWVudEJsb2NrLGFzIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSxNciBhcyBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcixKcyBhcyBjcmVhdGVQcm9wc1Jlc3RQcm94eSxBciBhcyBjcmVhdGVSZW5kZXJlcixFbCBhcyBjcmVhdGVTU1JBcHAscW8gYXMgY3JlYXRlU2xvdHMsaHMgYXMgY3JlYXRlU3RhdGljVk5vZGUsZHMgYXMgY3JlYXRlVGV4dFZOb2RlLHVzIGFzIGNyZWF0ZVZOb2RlLFV0IGFzIGN1c3RvbVJlZixnbyBhcyBkZWZpbmVBc3luY0NvbXBvbmVudCxobyBhcyBkZWZpbmVDb21wb25lbnQsd2kgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCxEcyBhcyBkZWZpbmVFbWl0cyxIcyBhcyBkZWZpbmVFeHBvc2UsVXMgYXMgZGVmaW5lUHJvcHMsa2kgYXMgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCx4biBhcyBkZXZ0b29scyx5ZSBhcyBlZmZlY3Qsb2UgYXMgZWZmZWN0U2NvcGUsd3MgYXMgZ2V0Q3VycmVudEluc3RhbmNlLHNlIGFzIGdldEN1cnJlbnRTY29wZSxmbyBhcyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4scHMgYXMgZ3VhcmRSZWFjdGl2ZVByb3BzLFpzIGFzIGgsUXQgYXMgaGFuZGxlRXJyb3IsVGwgYXMgaHlkcmF0ZSxlaSBhcyBpbml0Q3VzdG9tRm9ybWF0dGVyLE9sIGFzIGluaXREaXJlY3RpdmVzRm9yU1NSLHFuIGFzIGluamVjdCxuaSBhcyBpc01lbW9TYW1lLHd0IGFzIGlzUHJveHksU3QgYXMgaXNSZWFjdGl2ZSx4dCBhcyBpc1JlYWRvbmx5LFJ0IGFzIGlzUmVmLFBzIGFzIGlzUnVudGltZU9ubHksQ3QgYXMgaXNTaGFsbG93LG9zIGFzIGlzVk5vZGUsVHQgYXMgbWFya1JhdyxxcyBhcyBtZXJnZURlZmF1bHRzLF9zIGFzIG1lcmdlUHJvcHMsZG4gYXMgbmV4dFRpY2ssYyBhcyBub3JtYWxpemVDbGFzcyxhIGFzIG5vcm1hbGl6ZVByb3BzLHIgYXMgbm9ybWFsaXplU3R5bGUsU28gYXMgb25BY3RpdmF0ZWQsJG8gYXMgb25CZWZvcmVNb3VudCxQbyBhcyBvbkJlZm9yZVVubW91bnQsUm8gYXMgb25CZWZvcmVVcGRhdGUseG8gYXMgb25EZWFjdGl2YXRlZCxCbyBhcyBvbkVycm9yQ2FwdHVyZWQsT28gYXMgb25Nb3VudGVkLElvIGFzIG9uUmVuZGVyVHJhY2tlZCxWbyBhcyBvblJlbmRlclRyaWdnZXJlZCxpZSBhcyBvblNjb3BlRGlzcG9zZSxNbyBhcyBvblNlcnZlclByZWZldGNoLEFvIGFzIG9uVW5tb3VudGVkLEZvIGFzIG9uVXBkYXRlZCxZciBhcyBvcGVuQmxvY2ssRm4gYXMgcG9wU2NvcGVJZCxHbiBhcyBwcm92aWRlLEx0IGFzIHByb3h5UmVmcyxSbiBhcyBwdXNoU2NvcGVJZCx2biBhcyBxdWV1ZVBvc3RGbHVzaENiLGd0IGFzIHJlYWN0aXZlLHl0IGFzIHJlYWRvbmx5LEZ0IGFzIHJlZixGcyBhcyByZWdpc3RlclJ1bnRpbWVDb21waWxlcixrbCBhcyByZW5kZXIsR28gYXMgcmVuZGVyTGlzdCxKbyBhcyByZW5kZXJTbG90LFVvIGFzIHJlc29sdmVDb21wb25lbnQsV28gYXMgcmVzb2x2ZURpcmVjdGl2ZSxIbyBhcyByZXNvbHZlRHluYW1pY0NvbXBvbmVudCxzaSBhcyByZXNvbHZlRmlsdGVyLGNvIGFzIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsWHIgYXMgc2V0QmxvY2tUcmFja2luZyx3biBhcyBzZXREZXZ0b29sc0hvb2sscG8gYXMgc2V0VHJhbnNpdGlvbkhvb2tzLHZ0IGFzIHNoYWxsb3dSZWFjdGl2ZSxfdCBhcyBzaGFsbG93UmVhZG9ubHksUHQgYXMgc2hhbGxvd1JlZixRcyBhcyBzc3JDb250ZXh0S2V5LHJpIGFzIHNzclV0aWxzLF9lIGFzIHN0b3AsbSBhcyB0b0Rpc3BsYXlTdHJpbmcsSiBhcyB0b0hhbmRsZXJLZXksWm8gYXMgdG9IYW5kbGVycyxrdCBhcyB0b1JhdyxXdCBhcyB0b1JlZixEdCBhcyB0b1JlZnMsc3MgYXMgdHJhbnNmb3JtVk5vZGVBcmdzLFZ0IGFzIHRyaWdnZXJSZWYsSXQgYXMgdW5yZWYsS3MgYXMgdXNlQXR0cnMsRWkgYXMgdXNlQ3NzTW9kdWxlLCRpIGFzIHVzZUNzc1ZhcnMsWHMgYXMgdXNlU1NSQ29udGV4dCx6cyBhcyB1c2VTbG90cyxybyBhcyB1c2VUcmFuc2l0aW9uU3RhdGUscmwgYXMgdk1vZGVsQ2hlY2tib3gscGwgYXMgdk1vZGVsRHluYW1pYyxpbCBhcyB2TW9kZWxSYWRpbyxsbCBhcyB2TW9kZWxTZWxlY3Qsb2wgYXMgdk1vZGVsVGV4dCx5bCBhcyB2U2hvdyxvaSBhcyB2ZXJzaW9uLEd0IGFzIHdhcm4sWG4gYXMgd2F0Y2gsSm4gYXMgd2F0Y2hFZmZlY3QsWW4gYXMgd2F0Y2hQb3N0RWZmZWN0LFpuIGFzIHdhdGNoU3luY0VmZmVjdCxZcyBhcyB3aXRoQXN5bmNDb250ZXh0LEFuIGFzIHdpdGhDdHgsV3MgYXMgd2l0aERlZmF1bHRzLExvIGFzIHdpdGhEaXJlY3RpdmVzLHZsIGFzIHdpdGhLZXlzLHRpIGFzIHdpdGhNZW1vLG1sIGFzIHdpdGhNb2RpZmllcnMsUG4gYXMgd2l0aFNjb3BlSWR9O1xuIiwiaW1wb3J0IHsgZG9fcGllIH0gZnJvbSAnLi9jaGFydHMvcGllLWNoYXJ0J1xuXG53aW5kb3cuZG9fcGllID0gZG9fcGllXG5cbmltcG9ydCB7IENoYXJ0V2lkZ2V0LCBXaWRnZXRVdGlscyB9IGZyb20gJy4vd2lkZ2V0L3dpZGdldHMnXG5pbXBvcnQgJy4vc2lkZWJhci9zaWRlYmFyJ1xuaW1wb3J0IHsgbnRvcENoYXJ0QXBleCB9IGZyb20gXCIuL250b3BDaGFydEFwZXhcIjtcblxuLyogZGF0YXRhYmxlcy5uZXQgZXh0ZW5zaW9ucyAqL1xuaW1wb3J0IHsgRGF0YVRhYmxlRmlsdGVyc01lbnUsIERhdGFUYWJsZVV0aWxzLCBEYXRhVGFibGVSZW5kZXJzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzJ1xuXG53aW5kb3cuRGF0YVRhYmxlVXRpbHMgPSBEYXRhVGFibGVVdGlsc1xud2luZG93LkRhdGFUYWJsZUZpbHRlcnNNZW51ID0gRGF0YVRhYmxlRmlsdGVyc01lbnVcbndpbmRvdy5EYXRhVGFibGVSZW5kZXJzID0gRGF0YVRhYmxlUmVuZGVyc1xuXG53aW5kb3cuQ2hhcnRXaWRnZXQgPSBDaGFydFdpZGdldDtcbndpbmRvdy5XaWRnZXRVdGlscyA9IFdpZGdldFV0aWxzO1xud2luZG93Lm50b3BDaGFydEFwZXggPSBudG9wQ2hhcnRBcGV4O1xuIiwiLyogSGFuZGxlIEJsb2cgTm90aWZpY2F0aW9ucyAqL1xuJChmdW5jdGlvbiAoKSB7XG5cbiAgZnVuY3Rpb24gYmxvZ05vdGlmY2F0aW9uQ2xpY2soZSkge1xuXG4gICAgaWYgKGUudHlwZSA9PSBcIm1vdXNlZG93blwiICYmIChlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IGUud2hpY2ggIT09IDIpKSByZXR1cm47XG5cbiAgICBjb25zdCBpZCA9ICQodGhpcykuZGF0YSgnaWQnKTtcblxuICAgICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3VwZGF0ZV9ibG9nX3Bvc3RzLmx1YWAsIHtcbiAgICAgIGJsb2dfbm90aWZpY2F0aW9uX2lkOiBpZCxcbiAgICAgIGNzcmY6IHdpbmRvdy5fX0JMT0dfTk9USUZJQ0FUSU9OX0NTUkZfX1xuICAgIH0sXG4gICAgICAoZGF0YSkgPT4ge1xuXG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcblxuICAgICAgICAgICQodGhpcykub2ZmKCdjbGljaycpLm9mZignbW91c2Vkb3duJykuYXR0cignZGF0YS1yZWFkJywgJ3RydWUnKS5kYXRhKCdyZWFkJywgJ3RydWUnKS5maW5kKCcuYmFkZ2UnKS5yZW1vdmUoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBjb3VudCA9ICQoYC5ibG9nLW5vdGlmaWNhdGlvbltkYXRhLXJlYWQ9J2ZhbHNlJ11gKS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICAgICAgJCgnLm5vdGlmaWNhdGlvbi1iZWxsJykucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJCgnLm5vdGlmaWNhdGlvbi1iZWxsJykuaHRtbChjb3VudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIG9uIHRoZSBub3RpZmljYXRpb25zIG5vdCB5ZXQgcmVhZCBkZWxlZ2F0ZSB0aGUgY2xpY2sgZXZlbnRcbiAgJChgLmJsb2ctbm90aWZpY2F0aW9uW2RhdGEtcmVhZD0nZmFsc2UnXWApLm9uKCdjbGljaycsIGJsb2dOb3RpZmNhdGlvbkNsaWNrKS5vbignbW91c2Vkb3duJywgYmxvZ05vdGlmY2F0aW9uQ2xpY2spO1xufSk7IiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiByZWY9XCJjaGFydFwiPjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdHJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U6IEJvb2xlYW4sXG5cdGJhc2VfdXJsX3JlcXVlc3Q6IFN0cmluZyxcblx0Z2V0X3BhcmFtc191cmxfcmVxdWVzdDogRnVuY3Rpb24sXG5cdGdldF9jdXN0b21fY2hhcnRfb3B0aW9uczogRnVuY3Rpb24sXG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIiwgXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjaGFydF9yZWxvYWRlZFwiLCBcInpvb21cIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBiZWZvcmVVbm1vdW50KCkge1xuXHR0aGlzLmNoYXJ0LmRlc3Ryb3lDaGFydCgpO1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGNoYXJ0OiBudWxsLFxuXHQgICAgY2hhcnRfb3B0aW9uczogbnVsbCxcblx0ICAgIGZyb21fem9vbTogZmFsc2UsXG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0YXdhaXQgdGhpcy5pbml0KCk7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRpbml0OiBhc3luYyBmdW5jdGlvbigpIHtcblx0ICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0ICAgIGlmICh0aGlzLnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2UpIHtcblx0XHR0aGlzLnJlZ2lzdGVyX3N0YXR1cyhzdGF0dXMpO1xuXHQgICAgfVxuXHQgICAgYXdhaXQgdGhpcy5kcmF3X2NoYXJ0KHVybF9yZXF1ZXN0KTtcblx0fSxcblx0Z2V0X2RhdGFfdXJpOiBhc3luYyBmdW5jdGlvbihvcHRpb25zKSB7XG5cdCAgICBpZiAodGhpcy5jaGFydCA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdCAgICBsZXQgZGF0YV91cmkgPSBhd2FpdCB0aGlzLmNoYXJ0LnRvX2RhdGFfdXJpKCk7XG5cdCAgICByZXR1cm4gZGF0YV91cmk7XG5cdH0sXG5cdGRvd25sb2FkX2NoYXJ0X3BuZzogYXN5bmMgZnVuY3Rpb24oZmlsZV9uYW1lLCBvcHRpb25zKSB7XG5cdCAgICBpZiAodGhpcy5jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgbGV0IGRhdGFfdXJpID0gYXdhaXQgdGhpcy5jaGFydC50b19kYXRhX3VyaSgpO1xuXHQgICAgZG93bmxvYWRVUkkoZGF0YV91cmksIGZpbGVfbmFtZSk7XG5cdH0sXG5cdHJlZ2lzdGVyX3N0YXR1czogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHQgICAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UodGhpcy5pZCwgKG5ld19zdGF0dXMpID0+IHtcblx0XHRpZiAodGhpcy5mcm9tX3pvb20gPT0gdHJ1ZSkge1xuXHRcdCAgICB0aGlzLmZyb21fem9vbSA9IGZhbHNlO1xuXHRcdCAgICAvL3JldHVybjtcblx0XHR9XG5cdFx0bGV0IG5ld191cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KG5ld19zdGF0dXMpO1xuXHRcdGlmIChuZXdfdXJsX3JlcXVlc3QgPT0gdXJsX3JlcXVlc3QpIHtcblx0XHQgICAgdXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0dGhpcy51cGRhdGVfY2hhcnQobmV3X3VybF9yZXF1ZXN0KTtcblx0ICAgIH0sIGZhbHNlKTtcblx0fSxcblx0Z2V0X3VybF9yZXF1ZXN0OiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgIGxldCB1cmxfcGFyYW1zO1xuXHQgICAgaWYgKHRoaXMuZ2V0X3BhcmFtc191cmxfcmVxdWVzdCAhPSBudWxsKSB7XG5cdFx0aWYgKHN0YXR1cyA9PSBudWxsKSB7XG5cdFx0ICAgIHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0fVxuXHRcdHVybF9wYXJhbXMgPSB0aGlzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0dXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHQgICAgfVxuXHQgICAgXG5cdCAgICByZXR1cm4gYCR7dGhpcy5iYXNlX3VybF9yZXF1ZXN0fT8ke3VybF9wYXJhbXN9YDtcblx0fSxcblx0ZHJhd19jaGFydDogYXN5bmMgZnVuY3Rpb24odXJsX3JlcXVlc3QpIHtcblx0ICAgIGxldCBjaGFydEFwZXggPSBudG9wQ2hhcnRBcGV4O1xuXHQgICAgbGV0IGNoYXJ0X3R5cGUgPSB0aGlzLmNoYXJ0X3R5cGU7XG5cdCAgICBpZiAoY2hhcnRfdHlwZSA9PSBudWxsKSB7XG5cdFx0Y2hhcnRfdHlwZSA9IGNoYXJ0QXBleC50eXBlQ2hhcnQuVFNfU1RBQ0tFRDtcblx0ICAgIH1cblx0ICAgIHRoaXMuY2hhcnQgPSBjaGFydEFwZXgubmV3Q2hhcnQoY2hhcnRfdHlwZSk7XG5cdCAgICBsZXQgbWUgPSB0aGlzO1xuXHQgICAgdGhpcy5jaGFydC5yZWdpc3RlckV2ZW50KFwiem9vbWVkXCIsIGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIGF4aXMpIHtcblx0XHRtZS5vbl96b29tZWQoY2hhcnRfY29udGV4dCwgYXhpcyk7XG5cdCAgICB9KTtcblx0ICAgIGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB0aGlzLmNoYXJ0LmRyYXdDaGFydCh0aGlzLiRyZWZzW1wiY2hhcnRcIl0sIGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHQgICAgdGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0fSxcblx0dXBkYXRlX2NoYXJ0X29wdGlvbnM6IGZ1bmN0aW9uKGNoYXJ0X29wdGlvbnMpIHtcblx0ICAgIHRoaXMuY2hhcnQudXBkYXRlQ2hhcnQoY2hhcnRfb3B0aW9ucyk7XG5cdH0sXG5cdHVwZGF0ZV9jaGFydF9zZXJpZXM6IGZ1bmN0aW9uKHNlcmllcykge1xuXHQgICAgaWYgKHNlcmllcyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgdGhpcy5jaGFydC51cGRhdGVTZXJpZXMoc2VyaWVzKTtcblx0fSxcblx0Z2V0X2NoYXJ0X29wdGlvbnM6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBsZXQgY2hhcnRfb3B0aW9ucztcblx0ICAgIGlmICh0aGlzLmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9PSBudWxsKSB7XHRcdFxuXHRcdGNoYXJ0X29wdGlvbnMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHQgICAgfSBlbHNlIHtcblx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHQgICAgfVxuXHQgICAgdGhpcy4kZW1pdCgnY2hhcnRfcmVsb2FkZWQnLCBjaGFydF9vcHRpb25zKTtcblx0ICAgIHJldHVybiBjaGFydF9vcHRpb25zO1xuXHR9LFxuXHRvbl96b29tZWQ6IGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIHsgeGF4aXMsIHlheGlzIH0pIHtcblx0ICAgIHRoaXMuZnJvbV96b29tID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGJlZ2luID0gbW9tZW50KHhheGlzLm1pbik7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBtb21lbnQoeGF4aXMubWF4KTtcbiAgICAgICAgICAgIC8vIHRoZSB0aW1lc3RhbXBzIGFyZSBpbiBtaWxsaXNlY29uZHMsIGNvbnZlcnQgdGhlbSBpbnRvIHNlY29uZHNcblx0ICAgIGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgbmV3X2Vwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdCAgICB0aGlzLiRlbWl0KCd6b29tJywgbmV3X2Vwb2NoX3N0YXR1cyk7XG5cdH0sXG4gICAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNlbGVjdCBjbGFzcz1cInNlbGVjdDIgZm9ybS1zZWxlY3RcIiByZWY9XCJzZWxlY3QyXCIgcmVxdWlyZWQgbmFtZT1cImZpbHRlcl90eXBlXCIgPlxuICAgIDxvcHRpb24gY2xhc3M9XCJudG9wbmctZHJvcGRvd24tbWluLXdpZHRoIG5vLXdyYXBcIiB2LWZvcj1cIihpdGVtLCBpKSBpbiBvcHRpb25zXzJcIiA6c2VsZWN0ZWQ9XCIoaXRlbS52YWx1ZSA9PSBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZSlcIiA6dmFsdWU9XCJpdGVtLnZhbHVlXCIgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiPlxuICAgICAge3tpdGVtLmxhYmVsfX1cbiAgICA8L29wdGlvbj5cbiAgICA8b3B0Z3JvdXAgdi1mb3I9XCIoaXRlbSwgaSkgaW4gZ3JvdXBzX29wdGlvbnNfMlwiIDpsYWJlbD1cIml0ZW0uZ3JvdXBcIj5cbiAgICAgIDxvcHRpb24gdi1mb3I9XCIob3B0LCBqKSBpbiBpdGVtLm9wdGlvbnNcIiA6c2VsZWN0ZWQ9XCIob3B0LnZhbHVlID09IHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlKVwiIDp2YWx1ZT1cIm9wdC52YWx1ZVwiIDpkaXNhYmxlZD1cIm9wdC5kaXNhYmxlZFwiPlxuICAgICAgICB7e29wdC5sYWJlbH19XG4gICAgICA8L29wdGlvbj5cbiAgICA8L29wdGdyb3VwPlxuICA8L3NlbGVjdD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IHNlbGVjdDIgPSByZWYobnVsbCk7XG5cbi8vIGNvbnN0IHNlbGVjdGVkMl9vcHRpb24gPSByZWYoe30pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9uJywgJ3NlbGVjdF9vcHRpb24nXSk7XG5cbmNvbnN0IG9wdGlvbnNfMiA9IHJlZihbXSk7XG5jb25zdCBncm91cHNfb3B0aW9uc18yID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX29wdGlvbl8yID0gcmVmKHt9KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZyxcbiAgICBvcHRpb25zOiBBcnJheSxcbiAgICBzZWxlY3RlZF9vcHRpb246IE9iamVjdCxcbiAgICBkaXNhYmxlX2NoYW5nZTogQm9vbGVhbixcbn0pO1xuXG5mdW5jdGlvbiBnZXRfcHJvcHNfc2VsZWN0ZWRfb3B0aW9uKCkge1xuICAgIGlmIChwcm9wcy5zZWxlY3RlZF9vcHRpb24gPT0gbnVsbCkge1xuXHRyZXR1cm4gcHJvcHMub3B0aW9uc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLnNlbGVjdGVkX29wdGlvbjtcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX29wdGlvbihzZWxlY3RlZF9vcHRpb24pIHtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uID09IG51bGwpIHtcblx0c2VsZWN0ZWRfb3B0aW9uID0gZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbigpO1xuICAgIH1cbiAgICBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZSA9IHNlbGVjdGVkX29wdGlvbjtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUudmFsdWUgPT0gbnVsbCkge1xuXHRzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS52YWx1ZSA9IHNlbGVjdGVkX29wdGlvbi5sYWJlbDtcbiAgICB9XG59XG5cbndhdGNoKCgpID0+IHByb3BzLnNlbGVjdGVkX29wdGlvbiwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgc2V0X3NlbGVjdGVkX29wdGlvbihjdXJfdmFsdWUpO1xuICAgIGxldCBzZWxlY3QyRGl2ID0gc2VsZWN0Mi52YWx1ZTtcbiAgICBsZXQgdmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oY3VyX3ZhbHVlKTtcblx0JChzZWxlY3QyRGl2KS52YWwodmFsdWUpXG5cdCQoc2VsZWN0MkRpdikudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAvLyB9XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5mdW5jdGlvbiBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oc2VsZWN0ZWRfb3B0aW9uKSB7XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChzZWxlY3RlZF9vcHRpb24udmFsdWUpIHtcblx0dmFsdWUgPSBzZWxlY3RlZF9vcHRpb24udmFsdWU7XG4gICAgfSBlbHNlIHtcblx0dmFsdWUgPSBzZWxlY3RlZF9vcHRpb24ubGFiZWw7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcblx0dmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgLy8gbGV0IG9wdGlvbiA9IG9wdGlvbnNfMi52YWx1ZS5maW5kKChvKSA9PiBvLnZhbHVlID09IHZhbHVlKTtcbiAgICBsZXQgb3B0aW9uID0gb3B0aW9uc18yLnZhbHVlLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuICAgIGlmIChvcHRpb24gIT0gbnVsbCkgeyByZXR1cm4gb3B0aW9uOyB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHNfb3B0aW9uc18yLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBnID0gZ3JvdXBzX29wdGlvbnNfMi52YWx1ZVtpXTtcblx0b3B0aW9uID0gZy5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuXHRpZiAob3B0aW9uICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBvcHRpb247XG5cdH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmxldCBmaXJzdF90aW1lX3JlbmRlciA9IHRydWU7XG5cbndhdGNoKCgpID0+IHByb3BzLm9wdGlvbnMsIChjdXJyZW50X3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZV9jaGFuZ2UgPT0gdHJ1ZSB8fCBjdXJyZW50X3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9ICAgIFxuICAgIHNldF9pbnB1dCgpO1xufSwgeyBmbHVzaDogJ3ByZSd9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbiAgICBpZiAoIXByb3BzLm9wdGlvbnMpIHsgcmV0dXJuOyB9XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlX2NoYW5nZSB8fCAhZmlyc3RfdGltZV9yZW5kZXIpIHtcbiAgICBcdHNldF9pbnB1dCgpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBzZXRfb3B0aW9ucygpIHtcbiAgICBvcHRpb25zXzIudmFsdWUgPSBbXTtcbiAgICBncm91cHNfb3B0aW9uc18yLnZhbHVlID0gW107XG4gICAgXG4gICAgaWYgKHByb3BzLm9wdGlvbnMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgZ3JvdXBzX2RpY3QgPSB7fTtcbiAgICBwcm9wcy5vcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuXHRsZXQgb3B0XzIgPSB7IC4uLm9wdGlvbiB9O1xuXHRpZiAob3B0XzIudmFsdWUgPT0gMCB8fCBvcHRfMi52YWx1ZSA9PSBcIjBcIikge1xuXHQgICAgb3B0XzIudmFsdWUgPSBudWxsO1xuXHR9XG5cdGlmIChvcHRfMi52YWx1ZSA9PSBudWxsKSB7XG5cdCAgICBvcHRfMi52YWx1ZSA9IG9wdF8yLmxhYmVsO1xuXHR9XG5cdGlmIChvcHRpb24uZ3JvdXAgPT0gbnVsbCkge1xuXHQgICAgb3B0aW9uc18yLnZhbHVlLnB1c2gob3B0XzIpO1xuXHR9IGVsc2Uge1xuXHQgICAgaWYgKGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPT0gbnVsbCkge1xuXHRcdGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPSB7IGdyb3VwOiBvcHRfMi5ncm91cCwgb3B0aW9uczogW10gfTtcblx0ICAgIH1cblx0ICAgIGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0ub3B0aW9ucy5wdXNoKG9wdF8yKTtcblx0fVxuICAgIH0pO1xuICAgIGdyb3Vwc19vcHRpb25zXzIudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoZ3JvdXBzX2RpY3QpO1xuICAgIFxufVxuXG53YXRjaChbb3B0aW9uc18yLCBncm91cHNfb3B0aW9uc18yXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgcmVuZGVyKCk7XG59LCB7IGZsdXNoOiAncG9zdCd9KTtcblxuZnVuY3Rpb24gc2V0X2lucHV0KCkge1xuICAgIHNldF9vcHRpb25zKCk7XG4gICAgc2V0X3NlbGVjdGVkX29wdGlvbigpO1xufVxuXG5jb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gICAgbGV0IHNlbGVjdDJEaXYgPSBzZWxlY3QyLnZhbHVlO1xuICAgIGlmIChmaXJzdF90aW1lX3JlbmRlciA9PSBmYWxzZSkge1xuXHRkZXN0cm95KCk7XG4gICAgfVxuICAgIGlmICghJChzZWxlY3QyRGl2KS5oYXNDbGFzcyhcInNlbGVjdDItaGlkZGVuLWFjY2Vzc2libGVcIikpIHtcblx0JChzZWxlY3QyRGl2KS5zZWxlY3QyKHtcblx0ICAgIHdpZHRoOiAnMTAwJScsXG5cdCAgICBoZWlnaHQ6ICc1MDBweCcsXG5cdCAgICB0aGVtZTogJ2Jvb3RzdHJhcC01Jyxcblx0ICAgIGRyb3Bkb3duUGFyZW50OiAkKHNlbGVjdDJEaXYpLnBhcmVudCgpLFxuXHQgICAgZHJvcGRvd25BdXRvV2lkdGggOiB0cnVlLFxuXHR9KTtcblx0JChzZWxlY3QyRGl2KS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbGV0IGRhdGEgPSBlLnBhcmFtcy5kYXRhO1xuXHQgICAgbGV0IHZhbHVlID0gZGF0YS5lbGVtZW50Ll92YWx1ZTtcblx0ICAgIGxldCBvcHRpb25fMiA9IGZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSh2YWx1ZSk7XG5cdCAgICBsZXQgb3B0aW9uID0gcHJvcHMub3B0aW9ucy5maW5kKChvKSA9PiBvLmxhYmVsID09IG9wdGlvbl8yLmxhYmVsKTtcblx0ICAgIGlmICh2YWx1ZSAhPSBwcm9wcy5zZWxlY3RlZF9vcHRpb24pIHtcblx0XHQvLyBlbWl0KCd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9uJywgdmFsdWUpO1xuXHRcdC8vIGVtaXQoJ3NlbGVjdF9vcHRpb24nLCB2YWx1ZSk7XG5cdFx0ZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIG9wdGlvbik7XG5cdFx0ZW1pdCgnc2VsZWN0X29wdGlvbicsIG9wdGlvbik7XG5cdCAgICB9XG5cdH0pO1xuICAgIH1cbiAgICBmaXJzdF90aW1lX3JlbmRlciA9IGZhbHNlO1xuICAgIC8vIHRoaXMuJGZvcmNlVXBkYXRlKCk7XG4gICAgLy8gJChzZWxlY3QyRGl2KS52YWwocHJvcHMuc2VsZWN0ZWRfb3B0aW9uKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHJlbmRlciB9KTtcblxuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0cnkge1xuXHQkKHNlbGVjdDIudmFsdWUpLnNlbGVjdDIoJ2Rlc3Ryb3knKTtcblx0JChzZWxlY3QyLnZhbHVlKS5vZmYoJ3NlbGVjdDI6c2VsZWN0Jyk7ICAgIFxuICAgIH0gY2F0Y2goZXJyKSB7XG5cdGNvbnNvbGUuZXJyb3IoXCJEZXN0cm95IHNlbGVjdC1zZWFyY2ggY2F0Y2ggZXJyb3I6XCIpO1xuXHRjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxufVxuXG5vbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj4gICAgXG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGQtZmxleCBmbGV4LXdyYXBcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbWUtYXV0byBidG4tZ3JvdXAtc21cIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfb3B0aW9uXCJcbiAgICAgICAgICA6aWQ9XCIndGltZV9wcmVzZXRfcmFuZ2VfcGlja2VyJ1wiXG4gICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX3ByZXNldF9saXN0XCJcbiAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RfdGltZShudWxsKVwiPlxuICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXMtMlwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2FsZW5kYXItYWx0XCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPGlucHV0ICBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCIgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiYmVnaW4tZGF0ZVwiPlxuICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfYmVnaW5fZGF0ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCAgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImVuZC1kYXRlXCI+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiIHN0eWxlPVwid2lkdGg6IDIuNXJlbTtcIj4gLS0+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cIndyb25nX2RhdGVcIiA6dGl0bGU9XCJpMThuKCd3cm9uZ19kYXRlX3JhbmdlJylcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjAuMnJlbTtjb2xvcjpyZWQ7XCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtcy0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cIiFlbmFibGVfYXBwbHkgfHwgd3JvbmdfZGF0ZVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cImp1bXBfdGltZV9iYWNrKClcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tanVtcC10aW1lLWJhY2tcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX2xlZnQnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJqdW1wX3RpbWVfYWhlYWQoKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGluayBtZS0yXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1haGVhZFwiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfcmlnaHQnKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiem9vbSgyKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLWluXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fem9vbV9pbicpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJ6b29tKDAuNSlcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1vdXRcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX291dCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLW1pbnVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsXCIgQGNsaWNrPVwiYXBwbHlfc3RhdHVzX2J5X2hpc3RvcnkoKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3VuZG8nKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXVuZG9cIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJzZWxlY3RfdGltZV92YWx1ZSA9PSAnY3VzdG9tJ1wiIEBjbGljaz1cImNoYW5nZV9zZWxlY3RfdGltZSgpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fcmVmcmVzaCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblx0XHQ8c2xvdCBuYW1lPVwiZXh0cmFfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj4gIFxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGVuYWJsZV9yZWZyZXNoOiBCb29sZWFuLFxuICAgIH0sXG4gICAgd2F0Y2g6IHtcblx0XCJlbmFibGVfcmVmcmVzaFwiOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkge1xuXHQgICAgaWYgKHZhbCA9PSB0cnVlKSB7XG5cdFx0dGhpcy5zdGFydF9yZWZyZXNoKCk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMucmVmcmVzaF9pbnRlcnZhbCAhPSBudWxsKSB7XG5cdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwpO1xuXHRcdHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IG51bGw7XG5cdCAgICB9XG5cdH1cbiAgICB9LFx0XG4gICAgZW1pdHM6IFtcImVwb2NoX2NoYW5nZVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcdFxuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bGV0IGVwb2NoX2JlZ2luID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKTtcblx0bGV0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuXHRpZiAoZXBvY2hfYmVnaW4gIT0gbnVsbCAmJiBlcG9jaF9lbmQgIT0gbnVsbCkge1xuXHQgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXNcblx0ICAgIFxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChlcG9jaF9iZWdpbiksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCkgfSwgdGhpcy4kcHJvcHMuaWQpO1xuXHR9XG5cdGxldCBtZSA9IHRoaXM7XG5cdGxldCBmX3NldF9waWNrZXIgPSAocGlja2VyLCB2YXJfbmFtZSkgPT4ge1xuXHQgICAgcmV0dXJuIGZsYXRwaWNrcigkKHRoaXMuJHJlZnNbcGlja2VyXSksIHtcblx0XHRlbmFibGVUaW1lOiB0cnVlLFxuXHRcdGRhdGVGb3JtYXQ6IFwiZC9tL1kgSDppXCIsXG5cdFx0Ly9hbHRJbnB1dDogdHJ1ZSxcblx0XHQvL2RhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuXHRcdC8vYWx0Rm9ybWF0OiBcImQtbS1ZIEg6aVwiLFxuXHRcdC8vbG9jYWxlOiBcIml0XCIsXG5cdFx0dGltZV8yNGhyOiB0cnVlLFxuXHRcdGNsaWNrT3BlbnM6IHRydWUsXHRcdFxuXHRcdC8vbW9kZTogXCJyYW5nZVwiLFxuXHRcdC8vc3RhdGljOiB0cnVlLFxuXHRcdG9uQ2hhbmdlOiBmdW5jdGlvbihzZWxlY3RlZERhdGVzLCBkYXRlU3RyLCBpbnN0YW5jZSkge1xuXHRcdCAgICBtZS5lbmFibGVfYXBwbHkgPSB0cnVlO1xuXHRcdCAgICBtZS53cm9uZ19kYXRlID0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID4gbWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKTtcblx0XHQgICAgLy9tZS5hW2RhdGFdID0gZDtcblx0XHR9LFxuXHQgICAgfSk7XG5cdH07XG5cdHRoaXMuZmxhdF9iZWdpbl9kYXRlID0gZl9zZXRfcGlja2VyKFwiYmVnaW4tZGF0ZVwiLCBcImJlZ2luX2RhdGVcIik7XG5cdHRoaXMuZmxhdF9lbmRfZGF0ZSA9IGZfc2V0X3BpY2tlcihcImVuZC1kYXRlXCIsIFwiZW5kX2RhdGVcIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHMuaWQsIG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCAobmV3X3N0YXR1cykgPT4gdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChuZXdfc3RhdHVzKSwgdHJ1ZSk7XG5cdFxuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHQvL2NvbnNvbGUubG9nKHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcblx0aWYgKHRoaXMuZW5hYmxlX3JlZnJlc2gpIHtcblx0ICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuXHR9XG4gICAgfSxcbiAgICBcbiAgICAvKiogTWV0aG9kcyBvZiB0aGUgY29tcG9uZW50LiAqL1xuICAgIG1ldGhvZHM6IHtcblx0c3RhcnRfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0bGV0IHZhbHVlID0gdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbj8udmFsdWU7XG5cdFx0aWYgKHRoaXMuZW5hYmxlX3JlZnJlc2ggJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPSBcImN1c3RvbVwiKSB7XG5cdFx0ICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSB0cnVlO1xuXHRcdCAgICB0aGlzLmNoYW5nZV9zZWxlY3RfdGltZSh0cnVlKTtcblx0XHR9XG5cdCAgICB9LCB0aGlzLnJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kcyAqIDEwMDApO1xuXHQgICAgLy8gfSwgMTAqIDEwMDApO1xuXHR9LFxuXHR1dGNfc190b19zZXJ2ZXJfZGF0ZTogZnVuY3Rpb24odXRjX3NlY29uZHMpIHtcblx0ICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG5cdCAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG5cdCAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuXHQgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9taW51dGVzID0gIHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG5cdCAgICB2YXIgZF9zZXJ2ZXIgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRfbXMpO1xuXHQgICAgcmV0dXJuIGRfc2VydmVyO1xuXHR9LFxuXHRzZXJ2ZXJfZGF0ZV90b19kYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcblx0ICAgIGxldCB1dGMgPSBkYXRlLmdldFRpbWUoKTtcblx0ICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cdCAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSAgc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcblx0ICAgIHZhciBkX2xvY2FsID0gbmV3IERhdGUodXRjIC0gb2Zmc2V0X21zKTtcblx0ICAgIHJldHVybiBkX2xvY2FsO1xuXHR9LFxuICAgICAgICBvbl9zdGF0dXNfdXBkYXRlZDogZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGVfdGltZV91dGMgPSBEYXRlLm5vdygpOyAgICAgICAgXG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlZ2luIGRhdGUgdGltZSBub3cgLSAzMCBtaW51dGVzXG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IGVuZF9kYXRlX3RpbWVfdXRjIC0gMzAgKiA2MCAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmVwb2NoX2VuZCAhPSBudWxsICYmIHN0YXR1cy5lcG9jaF9iZWdpbiAhPSBudWxsXG5cdFx0JiYgTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpID4gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbikpIHtcblx0XHRzdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKTtcblx0XHRzdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgICAgIGVuZF9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZV90aW1lX3V0Yyk7XG5cdFx0bnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMsIHRoaXMuJHByb3BzLmlkKTtcbiAgICAgICAgICAgIH1cblx0ICAgIC8vIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCkpO1xuXHQgICAgLy8gdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApKTtcblx0ICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4pKTtcblx0ICAgIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2VuZCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tZGF0ZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi10aW1lXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLWRhdGVcIiwgZW5kX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC10aW1lXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3NlbGVjdF90aW1lX3ZhbHVlKGJlZ2luX2RhdGVfdGltZV91dGMsIGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcblx0ICAgIGlmICh0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID09IGZhbHNlKSB7XG5cdFx0dGhpcy5hZGRfc3RhdHVzX2luX2hpc3RvcnkodGhpcy5lcG9jaF9zdGF0dXMpO1xuXHQgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmFibGVfYXBwbHkgPSBmYWxzZTtcblx0ICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSBmYWxzZTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybCh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldF9zZWxlY3RfdGltZV92YWx1ZTogZnVuY3Rpb24oYmVnaW5fdXRjLCBlbmRfdXRjKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF9zZWxlY3RfdmFsdWVzKCk7XG4gICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSA2MDtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgY29uc3QgZW5kX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX3V0Yyk7XG4gICAgICAgICAgICBjb25zdCBiZWdpbl91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX3V0Yyk7XG5cblx0ICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihlbmRfdXRjX3MsIG5vdywgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1pbl81LCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIm1pbl81XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1pbl8zMCwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJtaW5fMzBcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMuaG91ciwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJob3VyXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLmRheSwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJkYXlcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMud2VlaywgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJ3ZWVrXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLm1vbnRoLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIm1vbnRoXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHNfdmFsdWVzLnllYXIsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwieWVhclwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSBmYWxzZVxuICAgICAgICAgICAgICBpZihlbGVtZW50LnZhbHVlID09IHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gbGV0IGRhdGVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0SG91cnMoZF90aW1lX2JlZ2luLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRNaW51dGVzKGRfdGltZV9iZWdpbi5nZXRNaW51dGVzKCkgKyBkX3RpbWVfYmVnaW4uZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldFNlY29uZHMoZF90aW1lX2JlZ2luLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0SG91cnMoZF90aW1lX2VuZC5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldE1pbnV0ZXMoZF90aW1lX2VuZC5nZXRNaW51dGVzKCkgKyBkX3RpbWVfZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0U2Vjb25kcyhkX3RpbWVfZW5kLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2JlZ2luLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9lbmQudmFsdWVPZigpKTtcblx0ICAgIGxldCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXHQgICAgbGV0IGJlZ2luX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG5cdCAgICBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlLmdldFRpbWUoKSk7XG5cdCAgICBsZXQgZW5kX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuXHQgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlLmdldFRpbWUoKSk7XG5cdCAgICBpZiAoZXBvY2hfZW5kID4gbm93X3MpIHtcblx0XHRlcG9jaF9lbmQgPSBub3dfcztcblx0ICAgIH1cbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luICwgZXBvY2hfZW5kIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNldF9kYXRlX3RpbWU6IGZ1bmN0aW9uKHJlZl9uYW1lLCB1dGNfdHMsIGlzX3RpbWUpIHtcbiAgICAgICAgLy8gICAgIHV0Y190cyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKHV0Y190cykgKiAxMDAwOyAgICAgICAgXG4gICAgICAgIC8vICAgICBsZXQgZGF0ZV90aW1lID0gbmV3IERhdGUodXRjX3RzKTtcbiAgICAgICAgLy8gICAgIGRhdGVfdGltZS5zZXRNaW51dGVzKGRhdGVfdGltZS5nZXRNaW51dGVzKCkgLSBkYXRlX3RpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG5cdC8vICAgICBpZiAoaXNfdGltZSkge1xuXHQvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExLDE2KTtcblx0Ly8gICAgIH0gZWxzZSB7XG5cdC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwxMCk7XG5cdC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGNoYW5nZV9zZWxlY3RfdGltZTogZnVuY3Rpb24ocmVmcmVzaF9kYXRhKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF9zZWxlY3RfdmFsdWVzKCk7XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWxfcyA9IHNfdmFsdWVzW3RoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24udmFsdWVdO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gZXBvY2hfZW5kIC0gaW50ZXJ2YWxfcztcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaF9lbmQsIHJlZnJlc2hfZGF0YSB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfc2VsZWN0X3ZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgbWluID0gNjA7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbl81OiBtaW4gKiA1LFxuICAgICAgICAgICAgICAgIG1pbl8zMDogbWluICogMzAsXG4gICAgICAgICAgICAgICAgaG91cjogbWluICogNjAsXG4gICAgICAgICAgICAgICAgZGF5OiB0aGlzLmdldF9sYXN0X2RheV9zZWNvbmRzKCksIFxuICAgICAgICAgICAgICAgIHdlZWs6IHRoaXMuZ2V0X2xhc3Rfd2Vla19zZWNvbmRzKCksIFxuICAgICAgICAgICAgICAgIG1vbnRoOiB0aGlzLmdldF9sYXN0X21vbnRoX3NlY29uZHMoKSwgXG4gICAgICAgICAgICAgICAgeWVhcjogdGhpcy5nZXRfbGFzdF95ZWFyX3NlY29uZHMoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGdldF91dGNfc2Vjb25kczogZnVuY3Rpb24odXRjX3RzKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHV0Y190cyAvIDEwMDApO1xuICAgICAgICB9LFxuICAgICAgICBpc19iZXR3ZWVuOiBmdW5jdGlvbih4LCB5LCB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID49IHkgLSB0b2xlcmFuY2UgJiYgeCA8PSB5O1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF9kYXlfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0RGF0ZSh0LmdldERhdGUoKSAtIDEpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2xhc3Rfd2Vla19zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXREYXRlKHQuZ2V0RGF0ZSgpIC0gNykpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF9tb250aF9zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXRNb250aCh0LmdldE1vbnRoKCkgLSAxKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9sYXN0X3llYXJfc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgdCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHQuc2V0TW9udGgodC5nZXRNb250aCgpIC0gMTIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgem9vbTogZnVuY3Rpb24oc2NhbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IGludGVydmFsID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKSAvIHNjYWxlO1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLyAyICsgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLyAyKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gY2VudGVyIC0gaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gY2VudGVyICsgaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2JhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYWhlYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIGxldCBwcmV2aW91c19lbmQgPSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQ7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCArPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luICs9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBwcmV2aW91c19lbmQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVtaXRfZXBvY2hfY2hhbmdlOiBmdW5jdGlvbihlcG9jaF9zdGF0dXMsIGlkKSB7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsIHx8IGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsKSB7IHJldHVybjsgfTtcbiAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA+IGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSB0cnVlO1xuXHRcdHJldHVybjtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmIChpZCAhPSB0aGlzLmlkKSB7XG5cdFx0dGhpcy5vbl9zdGF0dXNfdXBkYXRlZChlcG9jaF9zdGF0dXMpO1xuXHQgICAgfVxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwiZXBvY2hfY2hhbmdlXCIsIGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cdGFkZF9zdGF0dXNfaW5faGlzdG9yeTogZnVuY3Rpb24oZXBvY2hfc3RhdHVzKSB7XG5cdCAgICB0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuXHQgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiA1KSB7XG5cdFx0dGhpcy5oaXN0b3J5LnNoaWZ0KCk7XG5cdCAgICB9XG5cdCAgICB0aGlzLmhpc3RvcnkucHVzaChlcG9jaF9zdGF0dXMpO1xuXHR9LFxuXHRcblx0YXBwbHlfc3RhdHVzX2J5X2hpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuXHQgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuXHQgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMpO1xuXHR9LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICAgUHJpdmF0ZSBkYXRlIG9mIHZ1ZSBjb21wb25lbnQuXG4gICAgKi9cbiAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAvL3N0YXR1c19pZDogXCJkYXRhLXRpbWUtcmFuZ2UtcGlja2VyXCIgKyB0aGlzLiRwcm9wcy5pZCxcblx0ICBlcG9jaF9zdGF0dXM6IG51bGwsXG5cdCAgcmVmcmVzaF9pbnRlcnZhbDogbnVsbCxcblx0ICByZWZyZXNoX2ludGVydmFsX3NlY29uZHM6IDYwLFxuXHQgIHVwZGF0ZV9mcm9tX2ludGVydmFsOiBmYWxzZSxcblx0ICBoaXN0b3J5OiBbXSxcblx0ICBoaXN0b3J5X2xhc3Rfc3RhdHVzOiBudWxsLFxuICAgICAgZW5hYmxlX2FwcGx5OiBmYWxzZSxcblx0ICBzZWxlY3RfdGltZV92YWx1ZTogXCJtaW5fNVwiLFxuXHQgIHNlbGVjdGVkX3RpbWVfb3B0aW9uOiB7IHZhbHVlOiBcIm1pbl81XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICB3cm9uZ19kYXRlOiBmYWxzZSxcbiAgICAgIGZsYXRfYmVnaW5fZGF0ZTogbnVsbCxcbiAgICAgIGZsYXRfZW5kX2RhdGU6IG51bGwsXG4gICAgICB0aW1lX3ByZXNldF9saXN0OiBbXG4gICAgICAgIHsgdmFsdWU6IFwibWluXzVcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJtaW5fMzBcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMzBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IHRydWUgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJkYXlcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuZGF5JyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgIHsgdmFsdWU6IFwibW9udGhcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMubW9udGgnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJ5ZWFyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLnllYXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5kYXRlX3RpbWVfaW5wdXQge1xuICB3aWR0aDogMTAuNXJlbTtcbiAgbWF4LXdpZHRoOiAxMC41cmVtO1xuICBtaW4td2lkdGg6IDEwLjVyZW07XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPiAgICBcbiAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHMgZC1mbGV4IGZsZXgtd3JhcFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtZS1hdXRvIGJ0bi1ncm91cC1zbVwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwiYmVnaW5cIj48L3Nsb3Q+XG4gICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vcHRpb25cIlxuICAgICAgICAgIDppZD1cIid0aW1lX3ByZXNldF9yYW5nZV9waWNrZXInXCJcbiAgICAgICAgICA6b3B0aW9ucz1cInRpbWVfcHJlc2V0X2xpc3RcIlxuICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NlbGVjdF90aW1lKG51bGwpXCI+XG4gICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtcy0yXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1jYWxlbmRhci1hbHRcIj48L2k+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIiBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJiZWdpbi1kYXRlXCI+XG4gICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJiZWdpbi1kYXRlXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgQGNoYW5nZT1cImNoYW5nZV9iZWdpbl9kYXRlXCIgdHlwZT1cImRhdGVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBiZWdpbi10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItcmlnaHQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPGlucHV0ICBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCIgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiZW5kLWRhdGVcIj5cbiAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImVuZC1kYXRlXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cImRhdGVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBlbmQtdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLWxlZnQtMCBmaXgtc2FmYXJpLWlucHV0XCIgc3R5bGU9XCJ3aWR0aDogMi41cmVtO1wiPiAtLT5cbiAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImVuZC10aW1lXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cInRpbWVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBlbmQtdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLWxlZnQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgPHNwYW4gdi1zaG93PVwid3JvbmdfZGF0ZVwiIDp0aXRsZT1cImkxOG4oJ3dyb25nX2RhdGVfcmFuZ2UnKVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6MC4ycmVtO2NvbG9yOnJlZDtcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGVcIj48L2k+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1zLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiIWVuYWJsZV9hcHBseSB8fCB3cm9uZ19kYXRlXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwianVtcF90aW1lX2JhY2soKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYmFja1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfbGVmdCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtbGVmdFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cImp1bXBfdGltZV9haGVhZCgpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rIG1lLTJcIiByZWY9XCJidG4tanVtcC10aW1lLWFoZWFkXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fbW92ZV9yaWdodCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJ6b29tKDIpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLXpvb20taW5cIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX2luJylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtcGx1c1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInpvb20oMC41KVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLW91dFwiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21fb3V0JylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtbWludXNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJoaXN0b3J5X2xhc3Rfc3RhdHVzID09IG51bGxcIiBAY2xpY2s9XCJhcHBseV9zdGF0dXNfYnlfaGlzdG9yeSgpXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fdW5kbycpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdW5kb1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cInNlbGVjdF90aW1lX3ZhbHVlID09ICdjdXN0b20nXCIgQGNsaWNrPVwiY2hhbmdlX3NlbGVjdF90aW1lKClcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9yZWZyZXNoJylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXHRcdDxzbG90IG5hbWU9XCJleHRyYV9idXR0b25zXCI+PC9zbG90PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PiAgXG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0ZW5hYmxlX3JlZnJlc2g6IEJvb2xlYW4sXG4gICAgfSxcbiAgICB3YXRjaDoge1xuXHRcImVuYWJsZV9yZWZyZXNoXCI6IGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG5cdCAgICBpZiAodmFsID09IHRydWUpIHtcblx0XHR0aGlzLnN0YXJ0X3JlZnJlc2goKTtcblx0ICAgIH0gZWxzZSBpZiAodGhpcy5yZWZyZXNoX2ludGVydmFsICE9IG51bGwpIHtcblx0XHRjbGVhckludGVydmFsKHRoaXMucmVmcmVzaF9pbnRlcnZhbCk7XG5cdFx0dGhpcy5yZWZyZXNoX2ludGVydmFsID0gbnVsbDtcblx0ICAgIH1cblx0fVxuICAgIH0sXHRcbiAgICBlbWl0czogW1wiZXBvY2hfY2hhbmdlXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1x0XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuXHRsZXQgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG5cdGlmIChlcG9jaF9iZWdpbiAhPSBudWxsICYmIGVwb2NoX2VuZCAhPSBudWxsKSB7XG5cdCAgICAvLyB1cGRhdGUgdGhlIHN0YXR1c1xuXHQgICAgXG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgeyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2JlZ2luKSwgZXBvY2hfZW5kOiBOdW1iZXIucGFyc2VJbnQoZXBvY2hfZW5kKSB9LCB0aGlzLiRwcm9wcy5pZCk7XG5cdH1cblx0bGV0IG1lID0gdGhpcztcblx0bGV0IGZfc2V0X3BpY2tlciA9IChwaWNrZXIsIHZhcl9uYW1lKSA9PiB7XG5cdCAgICByZXR1cm4gZmxhdHBpY2tyKCQodGhpcy4kcmVmc1twaWNrZXJdKSwge1xuXHRcdGVuYWJsZVRpbWU6IHRydWUsXG5cdFx0ZGF0ZUZvcm1hdDogXCJkL20vWSBIOmlcIixcblx0XHQvL2FsdElucHV0OiB0cnVlLFxuXHRcdC8vZGF0ZUZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXG5cdFx0Ly9hbHRGb3JtYXQ6IFwiZC1tLVkgSDppXCIsXG5cdFx0Ly9sb2NhbGU6IFwiaXRcIixcblx0XHR0aW1lXzI0aHI6IHRydWUsXG5cdFx0Y2xpY2tPcGVuczogdHJ1ZSxcdFx0XG5cdFx0Ly9tb2RlOiBcInJhbmdlXCIsXG5cdFx0Ly9zdGF0aWM6IHRydWUsXG5cdFx0b25DaGFuZ2U6IGZ1bmN0aW9uKHNlbGVjdGVkRGF0ZXMsIGRhdGVTdHIsIGluc3RhbmNlKSB7XG5cdFx0ICAgIG1lLmVuYWJsZV9hcHBseSA9IHRydWU7XG5cdFx0ICAgIG1lLndyb25nX2RhdGUgPSBtZS5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkgPiBtZS5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpO1xuXHRcdCAgICAvL21lLmFbZGF0YV0gPSBkO1xuXHRcdH0sXG5cdCAgICB9KTtcblx0fTtcblx0dGhpcy5mbGF0X2JlZ2luX2RhdGUgPSBmX3NldF9waWNrZXIoXCJiZWdpbi1kYXRlXCIsIFwiYmVnaW5fZGF0ZVwiKTtcblx0dGhpcy5mbGF0X2VuZF9kYXRlID0gZl9zZXRfcGlja2VyKFwiZW5kLWRhdGVcIiwgXCJlbmRfZGF0ZVwiKTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wcy5pZCwgbnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIChuZXdfc3RhdHVzKSA9PiB0aGlzLm9uX3N0YXR1c191cGRhdGVkKG5ld19zdGF0dXMpLCB0cnVlKTtcblx0XG5cdC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG5cdC8vY29uc29sZS5sb2codGhpcy4kcHJvcHNbXCJpZFwiXSk7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHRpZiAodGhpcy5lbmFibGVfcmVmcmVzaCkge1xuXHQgICAgdGhpcy5zdGFydF9yZWZyZXNoKCk7XG5cdH1cbiAgICB9LFxuICAgIFxuICAgIC8qKiBNZXRob2RzIG9mIHRoZSBjb21wb25lbnQuICovXG4gICAgbWV0aG9kczoge1xuXHRzdGFydF9yZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRsZXQgdmFsdWUgPSB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uPy52YWx1ZTtcblx0XHRpZiAodGhpcy5lbmFibGVfcmVmcmVzaCAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IFwiY3VzdG9tXCIpIHtcblx0XHQgICAgdGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9IHRydWU7XG5cdFx0ICAgIHRoaXMuY2hhbmdlX3NlbGVjdF90aW1lKHRydWUpO1xuXHRcdH1cblx0ICAgIH0sIHRoaXMucmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzICogMTAwMCk7XG5cdCAgICAvLyB9LCAxMCogMTAwMCk7XG5cdH0sXG5cdHV0Y19zX3RvX3NlcnZlcl9kYXRlOiBmdW5jdGlvbih1dGNfc2Vjb25kcykge1xuXHQgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcblx0ICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcblx0ICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cdCAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSAgc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcblx0ICAgIHZhciBkX3NlcnZlciA9IG5ldyBEYXRlKHV0YyArIG9mZnNldF9tcyk7XG5cdCAgICByZXR1cm4gZF9zZXJ2ZXI7XG5cdH0sXG5cdHNlcnZlcl9kYXRlX3RvX2RhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcm1hdCkge1xuXHQgICAgbGV0IHV0YyA9IGRhdGUuZ2V0VGltZSgpO1xuXHQgICAgbGV0IGxvY2FsX29mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblx0ICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbWludXRlcyA9ICBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuXHQgICAgdmFyIGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMgLSBvZmZzZXRfbXMpO1xuXHQgICAgcmV0dXJuIGRfbG9jYWw7XG5cdH0sXG4gICAgICAgIG9uX3N0YXR1c191cGRhdGVkOiBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBlbmRfZGF0ZV90aW1lX3V0YyA9IERhdGUubm93KCk7ICAgICAgICBcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgYmVnaW4gZGF0ZSB0aW1lIG5vdyAtIDMwIG1pbnV0ZXNcbiAgICAgICAgICAgIGxldCBiZWdpbl9kYXRlX3RpbWVfdXRjID0gZW5kX2RhdGVfdGltZV91dGMgLSAzMCAqIDYwICogMTAwMDtcbiAgICAgICAgICAgIGlmIChzdGF0dXMuZXBvY2hfZW5kICE9IG51bGwgJiYgc3RhdHVzLmVwb2NoX2JlZ2luICE9IG51bGxcblx0XHQmJiBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2VuZCkgPiBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKSkge1xuXHRcdHN0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfYmVnaW4pO1xuXHRcdHN0YXR1cy5lcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICAgICAgZW5kX2RhdGVfdGltZV91dGMgPSBzdGF0dXMuZXBvY2hfZW5kICogMTAwMDtcbiAgICAgICAgICAgICAgICBiZWdpbl9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlX3RpbWVfdXRjKTtcblx0XHRudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cywgdGhpcy4kcHJvcHMuaWQpO1xuICAgICAgICAgICAgfVxuXHQgICAgLy8gdGhpcy5mbGF0X2JlZ2luX2RhdGUuc2V0RGF0ZShuZXcgRGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwKSk7XG5cdCAgICAvLyB0aGlzLmZsYXRfZW5kX2RhdGUuc2V0RGF0ZShuZXcgRGF0ZShzdGF0dXMuZXBvY2hfZW5kICogMTAwMCkpO1xuXHQgICAgdGhpcy5mbGF0X2JlZ2luX2RhdGUuc2V0RGF0ZSh0aGlzLnV0Y19zX3RvX3NlcnZlcl9kYXRlKHN0YXR1cy5lcG9jaF9iZWdpbikpO1xuXHQgICAgdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfZW5kKSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi1kYXRlXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImJlZ2luLXRpbWVcIiwgYmVnaW5fZGF0ZV90aW1lX3V0YywgdHJ1ZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJlbmQtZGF0ZVwiLCBlbmRfZGF0ZV90aW1lX3V0YywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLXRpbWVcIiwgZW5kX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRfc2VsZWN0X3RpbWVfdmFsdWUoYmVnaW5fZGF0ZV90aW1lX3V0YywgZW5kX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBzdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogc3RhdHVzLmVwb2NoX2VuZCB9O1xuXHQgICAgaWYgKHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPT0gZmFsc2UpIHtcblx0XHR0aGlzLmFkZF9zdGF0dXNfaW5faGlzdG9yeSh0aGlzLmVwb2NoX3N0YXR1cyk7XG5cdCAgICB9XG4gICAgICAgICAgICB0aGlzLmVuYWJsZV9hcHBseSA9IGZhbHNlO1xuXHQgICAgdGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9IGZhbHNlO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0X3NlbGVjdF90aW1lX3ZhbHVlOiBmdW5jdGlvbihiZWdpbl91dGMsIGVuZF91dGMpIHtcbiAgICAgICAgICAgIGxldCBzX3ZhbHVlcyA9IHRoaXMuZ2V0X3NlbGVjdF92YWx1ZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvbGVyYW5jZSA9IDYwO1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBjb25zdCBlbmRfdXRjX3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfdXRjKTtcbiAgICAgICAgICAgIGNvbnN0IGJlZ2luX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fdXRjKTtcblxuXHQgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGVuZF91dGNfcywgbm93LCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMubWluXzUsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwibWluXzVcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMubWluXzMwLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIm1pbl8zMFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy5ob3VyLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImhvdXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMuZGF5LCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImRheVwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSBzX3ZhbHVlcy53ZWVrLCB0b2xlcmFuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcIndlZWtcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMubW9udGgsIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwibW9udGhcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gc192YWx1ZXMueWVhciwgdG9sZXJhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJ5ZWFyXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudGx5X2FjdGl2ZSA9IGZhbHNlXG4gICAgICAgICAgICAgIGlmKGVsZW1lbnQudmFsdWUgPT0gdGhpcy5zZWxlY3RfdGltZV92YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudGx5X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBsZXQgZGF0ZV9iZWdpbiA9IHRoaXMuJHJlZnNbXCJiZWdpbi1kYXRlXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gbGV0IGRfdGltZV9iZWdpbiA9IHRoaXMuJHJlZnNbXCJiZWdpbi10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRIb3VycyhkX3RpbWVfYmVnaW4uZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldE1pbnV0ZXMoZF90aW1lX2JlZ2luLmdldE1pbnV0ZXMoKSArIGRfdGltZV9iZWdpbi5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0U2Vjb25kcyhkX3RpbWVfYmVnaW4uZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbGV0IGRhdGVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC1kYXRlXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gbGV0IGRfdGltZV9lbmQgPSB0aGlzLiRyZWZzW1wiZW5kLXRpbWVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRIb3VycyhkX3RpbWVfZW5kLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0TWludXRlcyhkX3RpbWVfZW5kLmdldE1pbnV0ZXMoKSArIGRfdGltZV9lbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRTZWNvbmRzKGRfdGltZV9lbmQuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIC8vIGxldCBlcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGRhdGVfYmVnaW4udmFsdWVPZigpKTtcbiAgICAgICAgICAgIC8vIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2VuZC52YWx1ZU9mKCkpO1xuXHQgICAgbGV0IG5vd19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG5cdCAgICBsZXQgYmVnaW5fZGF0ZSA9IHRoaXMuc2VydmVyX2RhdGVfdG9fZGF0ZSh0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdKTtcblx0ICAgIGxldCBlcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX2RhdGUuZ2V0VGltZSgpKTtcblx0ICAgIGxldCBlbmRfZGF0ZSA9IHRoaXMuc2VydmVyX2RhdGVfdG9fZGF0ZSh0aGlzLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG5cdCAgICBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX2RhdGUuZ2V0VGltZSgpKTtcblx0ICAgIGlmIChlcG9jaF9lbmQgPiBub3dfcykge1xuXHRcdGVwb2NoX2VuZCA9IG5vd19zO1xuXHQgICAgfVxuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHsgZXBvY2hfYmVnaW4gLCBlcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2V0X2RhdGVfdGltZTogZnVuY3Rpb24ocmVmX25hbWUsIHV0Y190cywgaXNfdGltZSkge1xuICAgICAgICAvLyAgICAgdXRjX3RzID0gdGhpcy5nZXRfdXRjX3NlY29uZHModXRjX3RzKSAqIDEwMDA7ICAgICAgICBcbiAgICAgICAgLy8gICAgIGxldCBkYXRlX3RpbWUgPSBuZXcgRGF0ZSh1dGNfdHMpO1xuICAgICAgICAvLyAgICAgZGF0ZV90aW1lLnNldE1pbnV0ZXMoZGF0ZV90aW1lLmdldE1pbnV0ZXMoKSAtIGRhdGVfdGltZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcblx0Ly8gICAgIGlmIChpc190aW1lKSB7XG5cdC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMTEsMTYpO1xuXHQvLyAgICAgfSBlbHNlIHtcblx0Ly8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKTtcblx0Ly8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgY2hhbmdlX3NlbGVjdF90aW1lOiBmdW5jdGlvbihyZWZyZXNoX2RhdGEpIHtcbiAgICAgICAgICAgIGxldCBzX3ZhbHVlcyA9IHRoaXMuZ2V0X3NlbGVjdF92YWx1ZXMoKTtcbiAgICAgICAgICAgIGxldCBpbnRlcnZhbF9zID0gc192YWx1ZXNbdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbi52YWx1ZV07XG4gICAgICAgICAgICBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBlcG9jaF9lbmQgLSBpbnRlcnZhbF9zO1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHsgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGVwb2NoX2VuZCwgcmVmcmVzaF9kYXRhIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9zZWxlY3RfdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWluXzU6IG1pbiAqIDUsXG4gICAgICAgICAgICAgICAgbWluXzMwOiBtaW4gKiAzMCxcbiAgICAgICAgICAgICAgICBob3VyOiBtaW4gKiA2MCxcbiAgICAgICAgICAgICAgICBkYXk6IHRoaXMuZ2V0X2xhc3RfZGF5X3NlY29uZHMoKSwgXG4gICAgICAgICAgICAgICAgd2VlazogdGhpcy5nZXRfbGFzdF93ZWVrX3NlY29uZHMoKSwgXG4gICAgICAgICAgICAgICAgbW9udGg6IHRoaXMuZ2V0X2xhc3RfbW9udGhfc2Vjb25kcygpLCBcbiAgICAgICAgICAgICAgICB5ZWFyOiB0aGlzLmdldF9sYXN0X3llYXJfc2Vjb25kcygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3V0Y19zZWNvbmRzOiBmdW5jdGlvbih1dGNfdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodXRjX3RzIC8gMTAwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzX2JldHdlZW46IGZ1bmN0aW9uKHgsIHksIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggPj0geSAtIHRvbGVyYW5jZSAmJiB4IDw9IHk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9sYXN0X2RheV9zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXREYXRlKHQuZ2V0RGF0ZSgpIC0gMSkpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfbGFzdF93ZWVrX3NlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0LnNldERhdGUodC5nZXREYXRlKCkgLSA3KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9sYXN0X21vbnRoX3NlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0LnNldE1vbnRoKHQuZ2V0TW9udGgoKSAtIDEpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X2xhc3RfeWVhcl9zZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdC5zZXRNb250aCh0LmdldE1vbnRoKCkgLSAxMikpO1xuICAgICAgICB9LFxuICAgICAgICB6b29tOiBmdW5jdGlvbihzY2FsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pIC8gc2NhbGU7XG4gICAgICAgICAgICBsZXQgY2VudGVyID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAvIDIgKyB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAvIDIpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBjZW50ZXIgLSBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBjZW50ZXIgKyBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGp1bXBfdGltZV9haGVhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzX2VuZCA9IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZDtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kICs9ICgzMCAqIG1pbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gKz0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHByZXZpb3VzX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW1pdF9lcG9jaF9jaGFuZ2U6IGZ1bmN0aW9uKGVwb2NoX3N0YXR1cywgaWQpIHtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfZW5kID09IG51bGwgfHwgZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwpIHsgcmV0dXJuOyB9O1xuICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID4gZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IHRydWU7XG5cdFx0cmV0dXJuO1xuICAgICAgICAgICAgfVxuXHQgICAgaWYgKGlkICE9IHRoaXMuaWQpIHtcblx0XHR0aGlzLm9uX3N0YXR1c191cGRhdGVkKGVwb2NoX3N0YXR1cyk7XG5cdCAgICB9XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgZXBvY2hfc3RhdHVzLCB0aGlzLmlkKTtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJlcG9jaF9jaGFuZ2VcIiwgZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcblx0YWRkX3N0YXR1c19pbl9oaXN0b3J5OiBmdW5jdGlvbihlcG9jaF9zdGF0dXMpIHtcblx0ICAgIHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG5cdCAgICBpZiAodGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDUpIHtcblx0XHR0aGlzLmhpc3Rvcnkuc2hpZnQoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuaGlzdG9yeS5wdXNoKGVwb2NoX3N0YXR1cyk7XG5cdH0sXG5cdFxuXHRhcHBseV9zdGF0dXNfYnlfaGlzdG9yeTogZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG5cdCAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG5cdCAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyk7XG5cdH0sXG4gICAgfSxcbiAgICAvKipcbiAgICAgICBQcml2YXRlIGRhdGUgb2YgdnVlIGNvbXBvbmVudC5cbiAgICAqL1xuICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIC8vc3RhdHVzX2lkOiBcImRhdGEtdGltZS1yYW5nZS1waWNrZXJcIiArIHRoaXMuJHByb3BzLmlkLFxuXHQgIGVwb2NoX3N0YXR1czogbnVsbCxcblx0ICByZWZyZXNoX2ludGVydmFsOiBudWxsLFxuXHQgIHJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kczogNjAsXG5cdCAgdXBkYXRlX2Zyb21faW50ZXJ2YWw6IGZhbHNlLFxuXHQgIGhpc3Rvcnk6IFtdLFxuXHQgIGhpc3RvcnlfbGFzdF9zdGF0dXM6IG51bGwsXG4gICAgICBlbmFibGVfYXBwbHk6IGZhbHNlLFxuXHQgIHNlbGVjdF90aW1lX3ZhbHVlOiBcIm1pbl81XCIsXG5cdCAgc2VsZWN0ZWRfdGltZV9vcHRpb246IHsgdmFsdWU6IFwibWluXzVcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgIHdyb25nX2RhdGU6IGZhbHNlLFxuICAgICAgZmxhdF9iZWdpbl9kYXRlOiBudWxsLFxuICAgICAgZmxhdF9lbmRfZGF0ZTogbnVsbCxcbiAgICAgIHRpbWVfcHJlc2V0X2xpc3Q6IFtcbiAgICAgICAgeyB2YWx1ZTogXCJtaW5fNVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcIm1pbl8zMFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4zMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICB7IHZhbHVlOiBcImhvdXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuaG91cicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcImRheVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5kYXknKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJ3ZWVrXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLndlZWsnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcInllYXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMueWVhcicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICB7IHZhbHVlOiBcImN1c3RvbVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5jdXN0b20nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UsIGRpc2FibGVkOiB0cnVlLCB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmRhdGVfdGltZV9pbnB1dCB7XG4gIHdpZHRoOiAxMC41cmVtO1xuICBtYXgtd2lkdGg6IDEwLjVyZW07XG4gIG1pbi13aWR0aDogMTAuNXJlbTtcbn1cbjwvc3R5bGU+XG4iLCJmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlSW5qZWN0O1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgQHN1Ym1pdC5wcmV2ZW50PVwicHJldmVudEVudGVyXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgcmVmPVwibW9kYWxfaWRcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbGFiZWxsZWRieT1cImR0LWFkZC1maWx0ZXItbW9kYWwtdGl0bGVcIlxuICAgICBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGdcIiByb2xlPVwiZG9jdW1lbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuXHQgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cblx0PC9oNT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNsb3NlXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cblx0PHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1yLWF1dG9cIj5cbiAgICAgICAgPC9kaXY+XG5cdDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIHRlc3QtZmVlZGJhY2sgdy0xMDBcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJoaWRkZW5cIiwgXCJzaG93ZWRcIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGxldCBtZSA9IHRoaXM7XG5cdCQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5vbignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJzaG93ZWRcIik7XG5cdH0pO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBtZS4kZW1pdChcImhpZGRlblwiKTtcblx0fSk7XG5cdC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcInNob3dcIik7XG5cdH0sXG5cdHByZXZlbnRFbnRlcjogZnVuY3Rpb24oKSB7fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwiaGlkZVwiKTtcblx0fSxcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IEBzdWJtaXQucHJldmVudD1cInByZXZlbnRFbnRlclwiIGNsYXNzPVwibW9kYWwgZmFkZVwiIHJlZj1cIm1vZGFsX2lkXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCJkdC1hZGQtZmlsdGVyLW1vZGFsLXRpdGxlXCJcbiAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLWxnXCIgcm9sZT1cImRvY3VtZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5cblx0ICA8c2xvdCBuYW1lPVwidGl0bGVcIj48L3Nsb3Q+XG5cdDwvaDU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jbG9zZVwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG5cdDxzbG90IG5hbWU9XCJib2R5XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtci1hdXRvXCI+XG4gICAgICAgIDwvZGl2PlxuXHQ8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyB0ZXN0LWZlZWRiYWNrIHctMTAwXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICBlbWl0czogW1wiaGlkZGVuXCIsIFwic2hvd2VkXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgbWUgPSB0aGlzO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwic2hvd2VkXCIpO1xuXHR9KTtcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJoaWRkZW5cIik7XG5cdH0pO1xuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJzaG93XCIpO1xuXHR9LFxuXHRwcmV2ZW50RW50ZXI6IGZ1bmN0aW9uKCkge30sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcImhpZGVcIik7XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7e19pMThuKFwic25hcHNob3RzLm1hbmFnZVwiKX19XG4gICAgICA8YSB0YXJnZXQ9XCJfbmV3dGFiXCIgaHJlZj1cIiNcIiBzdHlsZT1cIlwiIGNsYXNzPVwibmF2LWl0ZW0gdGV4dC1tdXRlZFwiPjxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6MjhyZW07cGFkZGluZy10b3A6MC44cmVtO1wiPjwvaT48L2E+ICAgIFxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCI+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cImFjdGlvbj0nYWRkJ1wiPlxuXHQ8YSBjbGFzcz1cIm5hdi1saW5rXCIgOmNsYXNzPVwieydhY3RpdmUnOiBhY3Rpb24gPT0gJ2FkZCd9XCIgaHJlZj1cIiNcIj57e19pMThuKFwic25hcHNob3RzLmFkZFwiKX19PC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCIgQGNsaWNrPVwidXBkYXRlX2FjdGlvbignc2VsZWN0JylcIj5cblx0PGEgOmRpc2FibGVkPVwic25hcHNob3RzLmxlbmd0aCA9PSAwXCIgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdzZWxlY3QnLCAnbm90LWFsbG93ZWQnOiBzbmFwc2hvdHMubGVuZ3RoID09IDAgfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcInNuYXBzaG90cy5tYW5hZ2VcIil9fTwvYT5cbiAgICAgIDwvbGk+ICAgICAgXG4gICAgPC91bD5cbiAgICA8ZGl2IHYtaWY9XCJhY3Rpb24gPT0gJ2FkZCdcIiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj48Yj57e19pMThuKFwic25hcHNob3RzLm5hbWVcIil9fTo8L2I+PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG5cdCAgPGlucHV0IDpwYXR0ZXJuPVwicGF0dGVybl9zaW5nbGV3b3JkXCIgcGxhY2Vob2xkZXI9XCJcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNuYXBzaG90X25hbWVcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDwhLS0gPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+IC0tPlxuICAgICAgPCEtLSBcdDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tc3dpdGNoXCI+IC0tPlxuICAgICAgPCEtLSBcdCAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgdi1tb2RlbD1cInNhdmVfdGltZVwiPiAtLT5cblx0ICBcbiAgICAgIDwhLS0gXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPnt7c2F2ZV90aW1lX3RleHR9fTwvbGFiZWw+IC0tPlxuICAgICAgPCEtLSBcdDwvZGl2PiAtLT5cbiAgICAgIDwhLS0gPC9kaXY+ICAgICAgIC0tPlxuICAgIDwvZGl2PiA8IS0tIGFjdGlvbiBhZGQgLS0+XG4gICAgXG4gICAgPGRpdiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgc3R5bGU9XCJtaW4taGVpZ2h0OjguNXJlbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwic25hcHNob3RzLm9yZGVyX2J5XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiBAY2xpY2s9XCJzb3J0X3NuYXBzaG90c19ieSgpXCIgdi1tb2RlbD1cIm9yZGVyX2J5XCI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibmFtZVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMubmFtZVwiKX19PC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGF0ZVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuZGF0ZVwiKX19PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJzbmFwc2hvdHMuc2VsZWN0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiB2LW1vZGVsPVwic25hcHNob3Rfc2VsZWN0ZWRcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XCJpdGVtIGluIHNuYXBzaG90c1wiIDp2YWx1ZT1cIml0ZW1cIj57eyBkaXNwbGF5X25hbWUoaXRlbSkgfX08L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxuXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIHYtbW9kZWw9XCJhcHBseV90aW1lXCI+XG5cdCAgXG5cdCAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+e3thcHBseV90aW1lX3RleHR9fTwvbGFiZWw+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+IDwhLS0gYWN0aW9uIHNlbGVjdCAtLT5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ2FkZCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuYWRkXCIpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiBAY2xpY2s9XCJkZWxldGVfc25hcHNob3QodHJ1ZSlcIiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiBsZWZ0O21hcmdpbi1sZWZ0OiAwcHg7XCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBzdGFydC0wIHBvc2l0aW9uLWFic29sdXRlIG1zLTNcIj57e19pMThuKFwic25hcHNob3RzLmRlbGV0ZV9hbGxcIil9fTwvYnV0dG9uPiAgICBcbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+e3tfaTE4bihcInNuYXBzaG90cy5kZWxldGVcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzZWxlY3Rfc25hcHNob3RcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX3NlbGVjdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcInNuYXBzaG90cy5hcHBseVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWN0aW9uID0gcmVmKFwiYWRkXCIpOyAvLyBhZGQgLyBzZWxlY3RcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3Qgc25hcHNob3Rfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBhcHBseV90aW1lID0gcmVmKGZhbHNlKTtcbmNvbnN0IGFwcGx5X3RpbWVfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IHNhdmVfdGltZSA9IHJlZih0cnVlKTtcbmNvbnN0IHNhdmVfdGltZV90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3Qgc25hcHNob3RfbmFtZSA9IHJlZihcIlwiKTtcbmNvbnN0IHNuYXBzaG90cyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICBwYWdlOiBTdHJpbmcsXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkZWRfc25hcHNob3QnLCAnZGVsZXRlZF9zbmFwc2hvdCcsICdkZWxldGVkX2FsbF9zbmFwc2hvdHMnXSk7XG5cbmxldCBwYXR0ZXJuX3NpbmdsZXdvcmQgPSBOdG9wVXRpbHMuUkVHRVhFUy5zaW5nbGV3b3JkO1xuXG5jb25zdCBkaXNhYmxlX2FkZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcmcgPSBuZXcgUmVnRXhwKHBhdHRlcm5fc2luZ2xld29yZCk7XG4gICAgcmV0dXJuICFyZy50ZXN0KHNuYXBzaG90X25hbWUudmFsdWUpO1xufSk7XG5cbmNvbnN0IGRpc2FibGVfc2VsZWN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IHVwZGF0ZV9hY3Rpb24gPSAoYSkgPT4ge1xuICAgIGlmIChzbmFwc2hvdHMudmFsdWUubGVuZ3RoID09IDAgJiYgYSA9PSBcInNlbGVjdFwiKSB7IHJldHVybjsgfVxuICAgIGFjdGlvbi52YWx1ZSA9IGE7XG59XG5cbmZ1bmN0aW9uIGdldF9wYWdlKCkge1xuICAgIGlmIChwcm9wcy5wYWdlICE9IG51bGwpIHtcblx0cmV0dXJuIHByb3BzLnBhZ2U7XG4gICAgfVxuICAgIGxldCBpc19hbGVydF9zdGF0c191cmwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKS5tYXRjaCgvYWxlcnRfc3RhdHMubHVhLykgIT0gbnVsbDtcbiAgICBsZXQgcGFnZSA9IFwiYWxlcnRzXCI7XG4gICAgaWYgKCFpc19hbGVydF9zdGF0c191cmwpIHtcblx0cGFnZSA9IFwiZmxvd3NcIjtcbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlfbmFtZShzbmFwc2hvdCkge1xuICAgIGxldCB1dGNfbXMgPSBzbmFwc2hvdC51dGMgKiAxMDAwO1xuICAgIGxldCBkYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHV0Y19tcywgXCJERC9NTS9ZWVlZXCIpO1xuICAgIHJldHVybiBgJHtzbmFwc2hvdC5uYW1lfSAoJHtkYXRlfSlgXG59XG5cbmxldCBsYXN0X29yZGVyX2J5ID0gbnVsbDtcbmZ1bmN0aW9uIHNvcnRfc25hcHNob3RzX2J5KCkge1xuICAgIGlmIChsYXN0X29yZGVyX2J5ID09IG9yZGVyX2J5LnZhbHVlKSB7IHJldHVybjsgfVxuICAgIFxuICAgIHNuYXBzaG90cy52YWx1ZS5zb3J0KChhLCBiKSA9PiB7XG5cdGlmIChvcmRlcl9ieS52YWx1ZSA9PSBcIm5hbWVcIikge1xuXHQgICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG5cdH1cblx0cmV0dXJuIGEudXRjIC0gYi51dGM7XG4gICAgfSk7XG4gICAgaWYgKHNuYXBzaG90cy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlID0gc25hcHNob3RzLnZhbHVlWzBdO1xuICAgIH1cbiAgICBsYXN0X29yZGVyX2J5ID0gb3JkZXJfYnkudmFsdWU7ICAgIFxufVxuXG5sZXQgbG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhY3Rpb24udmFsdWUgPSBcImFkZFwiO1xuICAgIHNuYXBzaG90X25hbWUudmFsdWUgPSBcIlwiO1xuICAgIHNhdmVfdGltZS52YWx1ZSA9IHRydWU7XG4gICAgYXBwbHlfdGltZS52YWx1ZSA9IGZhbHNlO1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIGxldCBzYXZlX3RpbWVfZmlsdGVyX3RleHQgPSBfaTE4bihcInNuYXBzaG90cy5zYXZlX3RpbWVcIik7XG4gICAgbGV0IGJlZ2luX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCwgXCJERC9NTS9ZWVlZIEhIOm1tXCIpO1xuICAgIGxldCBlbmRfdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfZW5kICogMTAwMCwgXCJERC9NTS9ZWVlZIEhIOm1tXCIpO1xuICAgIHNhdmVfdGltZV9maWx0ZXJfdGV4dCA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCViZWdpbl90aW1lLywgYmVnaW5fdGltZSk7XG4gICAgc2F2ZV90aW1lX2ZpbHRlcl90ZXh0ID0gc2F2ZV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWVuZF90aW1lLywgZW5kX3RpbWUpO1xuICAgIHNhdmVfdGltZV90ZXh0LnZhbHVlID0gc2F2ZV90aW1lX2ZpbHRlcl90ZXh0O1xuICAgIGxldCBhcHBseV90aW1lX2ZpbHRlcl90ZXh0ID0gX2kxOG4oXCJzbmFwc2hvdHMuYXBwbHlfdGltZVwiKTtcbiAgICBhcHBseV90aW1lX2ZpbHRlcl90ZXh0ID0gYXBwbHlfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCViZWdpbl90aW1lLywgYmVnaW5fdGltZSk7XG4gICAgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlZW5kX3RpbWUvLCBlbmRfdGltZSk7XG4gICAgYXBwbHlfdGltZV90ZXh0LnZhbHVlID0gYXBwbHlfdGltZV9maWx0ZXJfdGV4dDtcbiAgICBpZiAobG9hZF9zbmFwc2hvdHMpIHtcblx0bG9hZF9zbmFwc2hvdHMgPSBmYWxzZTtcblx0bGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuXHRsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmlsdGVycy9zbmFwc2hvdHMubHVhP3BhZ2U9JHtwYWdlfWA7XG5cdGxldCBzbmFwc2hvdHNfb2JqID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG5cdHNuYXBzaG90cy52YWx1ZSA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShzbmFwc2hvdHNfb2JqKTtcbiAgICB9XG4gICAgc29ydF9zbmFwc2hvdHNfYnkoKTtcbiAgICBpZiAoc25hcHNob3RzLnZhbHVlLmxlbmd0aCA+IDApIHtcblx0c25hcHNob3Rfc2VsZWN0ZWQudmFsdWUgPSBzbmFwc2hvdHMudmFsdWVbMF07XG4gICAgfVxufVxuXG5jb25zdCBhZGRfc25hcHNob3QgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGZpbHRlcnM7XG4gICAgaWYgKHNhdmVfdGltZS52YWx1ZSkge1xuXHRmaWx0ZXJzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgfSBlbHNlIHtcblx0bGV0IHBhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcblx0ZGVsZXRlIHBhcmFtc19vYmouZXBvY2hfYmVnaW47XG5cdGRlbGV0ZSBwYXJhbXNfb2JqLmVwb2NoX2VuZDtcblx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICB9XG4gICAgbGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuICAgIGxldCBwYXJhbXMgPSB7XG5cdHNuYXBzaG90X25hbWU6IHNuYXBzaG90X25hbWUudmFsdWUsXG5cdGZpbHRlcnMsXG5cdHBhZ2VcbiAgICB9O1xuICAgIFxuICAgIHBhcmFtcy5jc3JmID0gcHJvcHMuY3NyZjtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvZmlsdGVycy9zbmFwc2hvdC5sdWFgO1xuICAgIHRyeSB7XG5cdGxldCBoZWFkZXJzID0ge1xuXHQgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHR9O1xuXHRhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuXHRsb2FkX3NuYXBzaG90cyA9IHRydWU7XG4gICAgfSBjYXRjaChlcnIpIHtcblx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xuICAgIGVtaXQoJ2FkZGVkX3NuYXBzaG90cycsIHBhcmFtcyk7XG59XG5cbmNvbnN0IHNlbGVjdF9zbmFwc2hvdCA9ICgpID0+IHtcbiAgICBjbG9zZSgpOyAgICBcbiAgICBsZXQgZmlsdGVycyA9IHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlLmZpbHRlcnM7XG4gICAgaWYgKGFwcGx5X3RpbWUudmFsdWUgPT0gdHJ1ZSkge1xuICAgIFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgXHRsZXQgcGFyYW1zX29iaiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdChmaWx0ZXJzKTtcbiAgICBcdHBhcmFtc19vYmouZXBvY2hfYmVnaW4gPSBzdGF0dXMuZXBvY2hfYmVnaW47XG4gICAgXHRwYXJhbXNfb2JqLmVwb2NoX2VuZCA9IHN0YXR1cy5lcG9jaF9lbmQ7XG4gICAgXHRmaWx0ZXJzID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtc19vYmopO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVwbGFjZV91cmxfYW5kX3JlbG9hZChmaWx0ZXJzKTtcbn1cblxuY29uc3QgZGVsZXRlX3NuYXBzaG90ID0gYXN5bmMgKGRlbGV0ZV9hbGwpID0+IHtcbiAgICBsZXQgbmFtZSA9IHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlLm5hbWU7XG4gICAgaWYgKGRlbGV0ZV9hbGwgPT0gdHJ1ZSkgeyBuYW1lID0gXCIqXCI7IH1cbiAgICBsZXQgcGFnZSA9IGdldF9wYWdlKCk7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICBcdHNuYXBzaG90X25hbWU6IG5hbWUsXG5cdHBhZ2UsXG4gICAgfTtcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2ZpbHRlcnMvc25hcHNob3QubHVhYDtcbiAgICB0cnkge1xuICAgIFx0bGV0IGhlYWRlcnMgPSB7XG4gICAgXHQgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIFx0fTtcbiAgICBcdGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgXHRsb2FkX3NuYXBzaG90cyA9IHRydWU7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICBcdGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZV9hbGwgPT0gdHJ1ZSkge1xuXHRlbWl0KCdkZWxldGVkX2FsbF9zbmFwc2hvdHMnLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG5cdGVtaXQoJ2RlbGV0ZWRfc25hcHNob3QnLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXY+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMTFcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCIgPlxuXHQ8Yj57e3RpdGxlfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMVwiIHYtaWY9XCJzaG93X2RlbGV0ZV9idXR0b25cIiBAY2xpY2s9XCJkZWxldGVfdHNcIj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJvcmRlclwiPlxuXHQ8c3Bhbj5cblx0ICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT5cblx0PC9zcGFuPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IHYtZm9yPVwiaXRlbSBpbiB0aW1lc2VyaWVzXCIgY2xhc3M9XCJyb3cgY3VzdG9tLW1zIG1lLTIgbXQtMVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTVcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5yYXdcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj57e2l0ZW0ubGFiZWx9fTwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTJcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5wYXN0XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+UGFzdCA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0yXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0uYXZnXCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+QXZnIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5wZXJjXzk1XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+OTV0aCBQZXJjIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGltZXNlcmllczogQXJyYXksXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBzaG93X2RlbGV0ZV9idXR0b246IEJvb2xlYW4sXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZGVsZXRlX3RzJywgJ3VwZGF0ZTp0aW1lc2VyaWVzJ10pXG5cbmZ1bmN0aW9uIHVwZGF0ZV90aW1lc2VyaWVzKCkge1xuICAgIGVtaXQoJ3VwZGF0ZTp0aW1lc2VyaWVzJywgcHJvcHMudGltZXNlcmllcyk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZV90cygpIHtcbiAgICBlbWl0KCdkZWxldGVfdHMnLCBwcm9wcy5pZCk7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmN1c3RvbS1tcyB7XG4gIG1hcmdpbi1sZWZ0OiAycmVtICFpbXBvcnRhbnQ7XG4gIH1cbi5pbmxpbmUtYmxvY2sge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG59XG4uYm9yZGVyIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkICFpbXBvcnRhbnQ7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgaGFuZGxlcklkQWRkTGluayA9IFwicGFnZS1zdGF0cy1hY3Rpb24tbGlua1wiO1xuY29uc3QgaGFuZGxlcklkSnVtcEhpc3RvcmljYWwgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWp1bXAtaGlzdG9yaWNhbFwiO1xuXG5jb25zdCB0b3BfYXBwbGljYXRpb24gPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9hcHBsaWNhdGlvbnMnKSxcbiAgICB2aWV3OiBcInRvcF9wcm90b2NvbHNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBsaWNhdGlvblwiKSwgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ3Byb3RvY29sJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHRcdGxldCBzY2hlbWEgPSBgdG9wOiR7c2VydmljZS50c19zY2hlbWF9YDtcblx0XHRcdGNvbnRleHQuYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEoc2NoZW1hLCBzZXJ2aWNlLnRzX3F1ZXJ5KVxuXHRcdCAgICB9LFxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgXHQvL3JldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIFx0cmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJywgb3JkZXJhYmxlOiBmYWxzZSxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgIH1cblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHQgICAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgc3RhdHVzID0gY29udGV4dC5zdGF0dXM7XG5cdFx0XHRsZXQgbDdfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwibDdwcm90b1wiLCBgJHtzZXJ2aWNlLnByb3RvY29sLmlkfTtlcWApO1xuXHRcdFx0bGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9JiR7bDdfcHJvdG99YDtcblx0XHRcdGxldCBzb3VyY2VfdHlwZSA9IGNvbnRleHQuc291cmNlX3R5cGU7XG5cdFx0XHRsZXQgc291cmNlX2FycmF5ID0gY29udGV4dC5zb3VyY2VfYXJyYXk7XG5cdFx0XHRcblx0XHRcdGxldCBwYXJhbXMgPSBcIlwiO1xuXHRcdFx0bGV0IHBhcmFtc19hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdFx0XHQgICAgbGV0IHNvdXJjZSA9IHNvdXJjZV9hcnJheVtpXTtcblx0XHRcdCAgICBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImlmaWRcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlmaWRcIiwgc291cmNlLnZhbHVlKTtcblx0XHRcdCAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJob3N0XCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHtzb3VyY2UudmFsdWV9O2VxYCk7XG5cdFx0XHQgICAgfVxuXHRcdFx0fSk7XG5cdFx0XHRwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHRoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0d2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdCAgICB9XG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdFx0ICAgIHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9LFxuXHRcdF0pO1xuXHQgICAgfVxuXHR9LF0sXG59O1xuXG5jb25zdCB0b3BfY2F0ZWdvcmllcyA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX2NhdGVnb3JpZXMnKSxcbiAgICB2aWV3OiBcInRvcF9jYXRlZ29yaWVzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDIsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImNhdGVnb3J5XCIpLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0bGV0IGhhbmRsZXIgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdFx0bGV0IHNjaGVtYSA9IGB0b3A6JHtzZXJ2aWNlLnRzX3NjaGVtYX1gO1xuXHRcdFx0Y29udGV4dC5hZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYShzY2hlbWEsIHNlcnZpY2UudHNfcXVlcnkpXG5cdFx0ICAgIH0sXG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljXCIpLCBuYW1lOiAndHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICBcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0cmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgfVxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdCAgICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0Y29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdGxldCBzdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcblx0XHRcdGxldCBjYXRlZ29yeSA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJsN2NhdFwiLCBgJHtzZXJ2aWNlLmNhdGVnb3J5LmlkfTtlcWApO1xuXHRcdFx0bGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9JiR7Y2F0ZWdvcnl9YDtcblx0XHRcdGxldCBzb3VyY2VfdHlwZSA9IGNvbnRleHQuc291cmNlX3R5cGU7XG5cdFx0XHRsZXQgc291cmNlX2FycmF5ID0gY29udGV4dC5zb3VyY2VfYXJyYXk7XG5cdFx0XHRcblx0XHRcdGxldCBwYXJhbXMgPSBcIlwiO1xuXHRcdFx0bGV0IHBhcmFtc19hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdFx0XHQgICAgbGV0IHNvdXJjZSA9IHNvdXJjZV9hcnJheVtpXTtcblx0XHRcdCAgICBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImlmaWRcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlmaWRcIiwgc291cmNlLnZhbHVlKTtcblx0XHRcdCAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJob3N0XCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHtzb3VyY2UudmFsdWV9O2VxYCk7XG5cdFx0XHQgICAgfVxuXHRcdFx0fSk7XG5cdFx0XHRwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHRoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0d2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdCAgICB9XG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdFx0ICAgIHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9LFxuXHRcdF0pO1xuXHQgICAgfVxuXHR9LF0sXG59O1xuXG5jb25zdCB0b3Bfc2VuZGVycyA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX3NlbmRlcnMnKSxcbiAgICB2aWV3OiBcInRvcF9zZW5kZXJzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AuaG9zdF9uYW1lXCIpLCBuYW1lOiAnaG9zdF9uYW1lJywgZGF0YTogJ2hvc3QnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHQgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgbGV0IGxhYmVsID0gZGF0YS5sYWJlbDtcbiAgICAgIGxldCBob3N0X3JlZiA9ICcnO1xuXHQgICAgbGV0IGhhbmRsZXIgPSB7XG5cdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdG9uQ2xpY2s6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHQgICAgLy8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0ICAgIGxldCBzY2hlbWEgPSBgaG9zdDp0cmFmZmljYDtcblx0XHQgICAgY29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcImhvc3RcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdH0sXG5cdCAgICB9O1xuXHQgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBkYXRhLmlzX2xvY2FsKSB7XG4gICAgICAgIGxhYmVsID0gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH1cbiAgICAgIGlmIChkYXRhLmlzX2F2YWlsYWJsZSkge1xuICAgICAgICBob3N0X3JlZiA9IGAgPGEgaHJlZj1cIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pZH1cIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIlwiPjxpIGNsYXNzPVwiZmFzIGZhLWxhcHRvcFwiPjwvaT48L2E+YFxuICAgICAgfVxuICAgICAgXG5cdCAgICByZXR1cm4gYCR7bGFiZWx9JHtob3N0X3JlZn1gO1xuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnNlbnRcIiksIG5hbWU6ICdzZW50JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwgLy8ge1xuXHQgICAgICAvLyBcdGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHQgICAgICAvLyBcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgICAgLy8gXHQgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0ICAgICAgLy8gXHQgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgICAvLyBcdH1cblx0ICAgICAgLy8gfSxcblx0ICAgICAge1xuXHRcdCAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHRcdCAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0ICAgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgIGNvbnN0IGhvc3QgPSBzZXJ2aWNlLmhvc3QuaWQ7XG4gICAgICAgICAgY29uc3QgaG9zdF90c19hdmFpbGFibGU9IHNlcnZpY2UuaG9zdC5pc19sb2NhbDtcblx0XHQgICAgICBjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXR1cyA9IGNvbnRleHQuc3RhdHVzO1xuICAgICAgICAgICAgICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG4gICAgICAgICAgICAgICAgbGV0IHNvdXJjZV90eXBlID0gY29udGV4dC5zb3VyY2VfdHlwZTtcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlX2FycmF5ID0gY29udGV4dC5zb3VyY2VfYXJyYXk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IFwiXCI7XHRcdFx0ICAgIFxuICAgICAgICAgICAgICAgIGxldCBwYXJhbXNfYXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2VydmljZS50YWdzKSB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHNlcnZpY2UudGFnc1trZXldO1xuICAgICAgICAgICAgICBsZXQgcF91cmwgPSBcIlwiO1xuICAgICAgICAgICAgICBpZiAoa2V5ID09IFwiaWZpZFwiKSB7XG4gICAgICAgICAgICAgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IFwiaG9zdFwiKSB7XG4gICAgICAgICAgICAgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHt2YWx1ZX07ZXFgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJhbXNfYXJyYXkucHVzaChwX3VybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgY29uc3QganVtcF90b19ob3N0ID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtob3N0fSZwYWdlPWhpc3RvcmljYWwmdHNfcXVlcnk9aWZpZDoke2lmaWR9LGhvc3Q6JHtob3N0fSZ0c19zY2hlbWE9aG9zdDpkZXRhaWxzJmVwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhvc3RfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZHJvcGRvd24gPSBbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dXG5cdCAgICAgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBob3N0X3RzX2F2YWlsYWJsZSkge1xuICAgICAgICAgICAgZHJvcGRvd24ucHVzaCh7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhvc3RfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hvc3QgfSlcbiAgICAgICAgICB9XG5cblx0XHQgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhkcm9wZG93bik7XG5cdFx0ICB9XG5cdCAgICAgIH0sXSxcbn07XG5cbmNvbnN0IHRvcF9yZWNlaXZlcnMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9yZWNlaXZlcnMnKSxcbiAgICB2aWV3OiBcInRvcF9yZWNlaXZlcnNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMSxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5ob3N0X25hbWVcIiksIG5hbWU6ICdob3N0X25hbWUnLCBkYXRhOiAnaG9zdCcsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0cmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdCAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICBsZXQgbGFiZWwgPSBkYXRhLmxhYmVsO1xuICAgICAgbGV0IGhvc3RfcmVmID0gJyc7XG5cdCAgICBsZXQgaGFuZGxlciA9IHtcblx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0b25DbGljazogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHQgICAgbGV0IHNjaGVtYSA9IGBob3N0OnRyYWZmaWNgO1xuXHRcdCAgICBjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwiaG9zdFwiLCBzZXJ2aWNlLnRhZ3MsIHNjaGVtYSk7XG5cdFx0fSxcblx0ICAgIH07XG5cdCAgICBpZiAoY29udGV4dC5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbXCJob3N0XCJdICYmIGRhdGEuaXNfbG9jYWwpIHtcbiAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfVxuICAgICAgaWYgKGRhdGEuaXNfYXZhaWxhYmxlKSB7XG4gICAgICAgIGhvc3RfcmVmID0gYCA8YSBocmVmPVwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLmlkfVwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIHRpdGxlPVwiXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGFwdG9wXCI+PC9pPjwvYT5gXG4gICAgICB9XG4gICAgICBcblx0ICAgIHJldHVybiBgJHtsYWJlbH0ke2hvc3RfcmVmfWA7XG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AucmVjZWl2ZWRcIiksIG5hbWU6ICdyZWNlaXZlZCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIC8vIHtcblx0ICAgICAgLy8gXHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgICAgLy8gXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICAgIC8vIFx0ICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdCAgICAgIC8vIFx0ICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgICAgLy8gXHR9XG5cdCAgICAgIC8vIH0sXG5cdCAgICAgIHtcblx0XHQgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0XHQgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdCAgICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBob3N0ID0gc2VydmljZS5ob3N0LmlkO1xuICAgICAgICAgIGNvbnN0IGhvc3RfdHNfYXZhaWxhYmxlPSBzZXJ2aWNlLmhvc3QuaXNfbG9jYWw7XG5cdFx0ICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuXHRcdFx0ICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdFx0ICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICAgIGxldCBzdGF0dXMgPSBjb250ZXh0LnN0YXR1cztcblx0XHRcdCAgICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG5cdFx0XHQgICAgICBsZXQgc291cmNlX3R5cGUgPSBjb250ZXh0LnNvdXJjZV90eXBlO1xuXHRcdFx0ICAgICAgbGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuXHRcdFx0ICAgICAgXG5cdFx0XHQgICAgICBsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdCAgICAgIGxldCBwYXJhbXNfYXJyYXkgPSBbXTtcblx0XHRcdCAgICAgIGZvciAobGV0IGtleSBpbiBzZXJ2aWNlLnRhZ3MpIHtcblx0XHRcdFx0ICBsZXQgdmFsdWUgPSBzZXJ2aWNlLnRhZ3Nba2V5XTtcblx0XHRcdFx0ICBsZXQgcF91cmwgPSBcIlwiO1xuXHRcdFx0XHQgIGlmIChrZXkgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0ICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKGtleSwgdmFsdWUpO1xuXHRcdFx0XHQgIH0gZWxzZSBpZiAoa2V5ID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdCAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlwXCIsIGAke3ZhbHVlfTtlcWApO1xuXHRcdFx0XHQgIH1cblx0XHRcdFx0ICBwYXJhbXNfYXJyYXkucHVzaChwX3VybCk7XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgICBwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHQgICAgICBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0ICAgICAgLy8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0ICAgICAgd2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0ICB9XG5cdFx0ICAgICAgfTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgY29uc3QganVtcF90b19ob3N0ID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtob3N0fSZwYWdlPWhpc3RvcmljYWwmdHNfcXVlcnk9aWZpZDoke2lmaWR9LGhvc3Q6JHtob3N0fSZ0c19zY2hlbWE9aG9zdDpkZXRhaWxzJmVwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhvc3RfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZHJvcGRvd24gPSBbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dXG5cdCAgICAgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBob3N0X3RzX2F2YWlsYWJsZSkge1xuICAgICAgICAgICAgZHJvcGRvd24ucHVzaCh7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhvc3RfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hvc3QgfSlcbiAgICAgICAgICB9XG5cblx0XHQgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhkcm9wZG93bik7XG5cdFx0ICB9LFxuXHQgICAgICB9LF0sXG59O1xuXG5jb25zdCBpbnRlcmZhY2VfdG9wX3RhYmxlcyA9IFt0b3BfYXBwbGljYXRpb24sIHRvcF9jYXRlZ29yaWVzLCB0b3Bfc2VuZGVycywgdG9wX3JlY2VpdmVyc107XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZV90b3BfdGFibGVzO1xuXG4iLCJpbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBpbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcblxubGV0IHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UgPSBpbnRlcmZhY2VUb3BUYWJsZXMuZmluZCgodCkgPT4gdC52aWV3ID09IFwidG9wX3Byb3RvY29sc1wiKTtcbmlmICh0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlICE9IG51bGwpIHtcbiAgICB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSk7XG4gICAgdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZS50YWJsZV92YWx1ZSA9IFwiaG9zdFwiO1xufVxuXG5jb25zdCB0b3BfYXBwbGljYXRpb24gPSB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlO1xuXG5jb25zdCBob3N0X3RvcF90YWJsZXMgPSBbdG9wX2FwcGxpY2F0aW9uXTtcblxuZXhwb3J0IGRlZmF1bHQgaG9zdF90b3BfdGFibGVzO1xuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuXG5jb25zdCBieXRlc1RvU2l6ZUZvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJVdGlscy50eXBlcy5ieXRlcy5pZCk7XG5jb25zdCBicHNGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnBzLmlkKTtcbmNvbnN0IGhhbmRsZXJJZEFkZExpbmsgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWxpbmtcIjtcbmNvbnN0IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcblxuY29uc3QgdG9wX3NubXBfaW50ZXJmYWNlID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcInNubXBcIixcbiAgICB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Q6IHsgaWZpZDogdHJ1ZSwgZGV2aWNlOiB0cnVlLCBpZl9pbmRleDogZmFsc2UgfSxcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKSxcbiAgICB2aWV3OiBcInRvcF9zbm1wX2lmYWNlc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiA0LFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICBdLFxuICAgIGZfZ2V0X2xhYmVsOiAodHNfZ3JvdXApID0+IHtcblx0bGV0IHNvdXJjZV9kZWZfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuXHRsZXQgc291cmNlX2xhYmVsO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgIGlmIChzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlICE9IFwiZGV2aWNlXCIpIHsgY29udGludWU7IH1cblx0ICAgIHNvdXJjZV9sYWJlbCA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVtpXS5sYWJlbDtcblx0ICAgIGJyZWFrO1xuXHR9XG5cdHJldHVybiBgJHtpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfaW50ZXJmYWNlcycpfSAtIFNOTVAgJHtpMThuKCdwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlJyl9ICR7c291cmNlX2xhYmVsfWA7XG4gICAgfSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIFxuICAgIGNvbHVtbnM6IFt7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJpbnRlcmZhY2VcIiksIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRyZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0ICAgIGxldCBjb250ZXh0ID0gdGhpcztcblx0ICAgIGxldCBoYW5kbGVyID0ge1xuXHRcdGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHQgICAgbGV0IHNjaGVtYSA9IGBzbm1wX2lmOnRyYWZmaWNgO1xuXHRcdCAgICBjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwic25tcF9pbnRlcmZhY2VcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdH0sXG5cdCAgICB9O1xuXHQgICAgbGV0IGxhYmVsX3RleHQgPSBgJHtkYXRhLmxhYmVsfSAoJHtkYXRhLmlkfSlgO1xuXHQgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGxhYmVsX3RleHQsIGhhbmRsZXIgfSk7XG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3Auc2VudFwiKSwgbmFtZTogJ3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdzZW50Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICByZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICAvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0fSxcbiAgICB9LCB7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5yZWNlaXZlZFwiKSwgbmFtZTogJ3JlY2VpdmVkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAncmN2ZCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0b3RhbCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHQgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHR9XG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AudGhyb3VnaHB1dFwiKSwgbmFtZTogJ3Rocm91Z2hwdXQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0aHJvdWdocHV0Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICByZXR1cm4gYnBzRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSxdLFxufTtcblxuY29uc3Qgc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcyA9IFt0b3Bfc25tcF9pbnRlcmZhY2VdO1xuXG5leHBvcnQgZGVmYXVsdCBzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzO1xuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCBpbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBob3N0VG9wVGFibGVzIGZyb20gXCIuL2hvc3RfdG9wX3RhYmxlcy5qc1wiO1xuaW1wb3J0IHNubXBJbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qc1wiO1xuXG5jb25zdCB1aV90eXBlcyA9IHtcbiAgICBoaWRlOiBcImhpZGVcIixcbiAgICBzZWxlY3Q6IFwic2VsZWN0XCIsXG4gICAgaW5wdXQ6IFwiaW5wdXRcIixcbn07XG5cbmNvbnN0IHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZSA9IHtcbiAgICBpZmlkOiAocykgPT4ge1xuXHRsZXQgbGFiZWwgPSBzLmlmbmFtZTtcblx0aWYgKHMubmFtZSAhPSBudWxsKSB7XG5cdCAgICBsYWJlbCA9IHMubmFtZTtcblx0fVxuICAgICAgICByZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZTogcy5pZmlkLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcG9vbDogKHApID0+IHtcblx0bGV0IGxhYmVsID0gcC5wb29sX2lkO1xuXHRpZiAocC5uYW1lICE9IG51bGwpIHsgbGFiZWwgPSBwLm5hbWU7IH1cblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWU6IHAucG9vbF9pZCxcblx0fTtcbiAgICB9LFxuICAgIGFtX2hvc3Q6IChhbSkgPT4ge1xuXHRsZXQgbGFiZWwgPSBgJHthbS5sYWJlbH0gJHthbS5tZWFzdXJlbWVudH1gO1xuXHRsZXQgdmFsdWUgPSBgJHthbS5ob3N0fSxtZXRyaWM6JHthbS5tZWFzdXJlbWVudF9rZXl9YDtcblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWUsXG5cdH07XG4gICAgfSxcbn07XG5cbmNvbnN0IHRhYmxlX2NvbHVtbl9yZW5kZXJfdHlwZXMgPSB7XG4gICAgbWV0cmljOiBcIm1ldHJpY1wiLFxuICAgIHRleHQ6IFwidGV4dFwiLFxuICAgIHBlcmNlbnRhZ2U6IFwicGVyY2VudGFnZVwiLFxuICAgIGJ1dHRvbl9saW5rOiBcImJ1dHRvbl9saW5rXCIsXG59O1xuXG5jb25zdCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IHtcbiAgICBpbnRlcmZhY2U6IGludGVyZmFjZVRvcFRhYmxlcyxcbiAgICBob3N0OiBob3N0VG9wVGFibGVzLFxuICAgIHNubXBfaW50ZXJmYWNlOiBzbm1wSW50ZXJmYWNlVG9wVGFibGVzLFxuICAgIHNubXBfZGV2aWNlOiBzbm1wSW50ZXJmYWNlVG9wVGFibGVzLFxuICAgIC8vIHNubXBfaW50ZXJmYWNlOiBbO1xufTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IFtcbiAgICB7XG5cdGlkOiBcImludGVyZmFjZVwiLCAvL3VuaXF1ZSBpZFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9pZl9zdGF0c1wiLCAvLyByZWdleCB0byBtYXRjaCB1cmwgcGFnZVxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdHF1ZXJ5OiBcImlmYWNlXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsIFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogbnVsbCxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIiwgLy8gdXJsIHRvIGdldCBzb3VyY2VzIGxpc3Rcblx0ICAgIHNvdXJjZXNfZnVuY3Rpb246IG51bGwsIC8vIGN1c3RvbSBmdW5jdGlvbiB0aGF0IHJldHVybiBzb3VyY2VzX2xpc3QsIG92ZXJ3cml0ZSBzb3VyY2VzX3VybFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCAvLyB1c2VkIGluIHRzUXVlcnkgcGFyYW1ldGVyLCB0byBnZXQgaW5pdCBhbmQgc2V0IHZhbHVlIGluIHVybFxuXHQgICAgdmFsdWVfdXJsOiBudWxsLCAvLyBvdmVyd3JpdGUgdmFsdWUgdG8gZ2V0IGFuZCBzZXQgdmFsdWUgaW4gdXJsXG5cdCAgICB2YWx1ZV9tYXBfc291cmNlc19yZXM6IG51bGwsXG5cdCAgICBkaXNhYmxlX3Rza2V5OiBudWxsLFx0ICAgIFxuXHQgICAgZl9nZXRfdmFsdWVfdXJsOiBudWxsLCAvLyBvdmVyd3JpdGUgdmFsdWUgYW5kIHZhbHVlX3VybCB0byBnZXQgc3RhcnQgdmFsdWUgZnJvbSB1cmxcblx0ICAgIGZfc2V0X3ZhbHVlX3VybDogbnVsbCwgLy8gb3ZlcndyaXRlIHZhbHVlIGFuZCB2YWx1ZV91cmwgdG8gc2V0IHN0YXJ0IHZhbHVlIGluIHVybFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwiaG9zdFwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9ob3N0X2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0dGFibGVfdmFsdWU6IFwiaG9zdFwiLFxuXHRxdWVyeTogXCJob3N0XCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsIFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwiaXBcIixcdCAgICBcblx0ICAgIHZhbHVlOiBcImhvc3RcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwibWFjXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21hY19kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm1hY1wiKSxcblx0cXVlcnk6IFwibWFjXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsIFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubWFjXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJtYWNBZGRyZXNzXCIsXHQgICAgXG5cdCAgICB2YWx1ZTogXCJtYWNcIixcblx0ICAgIHZhbHVlX3VybDogXCJob3N0XCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcIm5ldHdvcmtcIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbmV0d29ya19kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm5ldHdvcmtcIiksXG5cdHF1ZXJ5OiBcInN1Ym5ldFwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLCBcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm5ldHdvcmtcIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcdCAgICBcblx0ICAgIHZhbHVlOiBcInN1Ym5ldFwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFx0XG4gICAgfSxcbiAgICB7XG5cdGlkOiBcImFzXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL2FzX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYXNcIiksXG5cdHF1ZXJ5OiBcImFzblwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYXNcIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcblx0ICAgIHZhbHVlOiBcImFzblwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJjb3VudHJ5XCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL2NvdW50cnlfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb3VudHJ5XCIpLFxuXHRxdWVyeTogXCJjb3VudHJ5XCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb3VudHJ5XCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdCAgICB2YWx1ZTogXCJjb3VudHJ5XCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcIm9zXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL29zX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub3NcIiksXG5cdHF1ZXJ5OiBcIm9zXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vc1wiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHQgICAgdmFsdWU6IFwib3NcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwidmxhblwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC92bGFuX2RldGFpbHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudmxhblwiKSxcblx0cXVlcnk6IFwidmxhblwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudmxhblwiKSxcblx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHQgICAgdmFsdWU6IFwidmxhblwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAge1xuXHRpZDogXCJwb29sXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Bvb2xfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb29sXCIpLFxuXHRxdWVyeTogXCJob3N0X3Bvb2xcIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvb2xcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvaG9zdC9wb29scy5sdWFcIixcblx0ICAgIHZhbHVlOiBcInBvb2xcIixcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG5cdGlkOiBcInN5c3RlbVwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9zeXN0ZW1fc3RhdHNcIixcblx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc3lzdGVtXCIpLFxuXHRxdWVyeTogXCJzeXN0ZW1cIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlN5c3RlbVwiLCB2YWx1ZTogLTEgfV0gfSxcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwicHJvZmlsZVwiLFx0XG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb2ZpbGVfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wcm9maWxlXCIpLFxuXHRxdWVyeTogXCJwcm9maWxlXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wcm9maWxlXCIpLFxuXHQgICAgcmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdCAgICB2YWx1ZTogXCJwcm9maWxlXCIsXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHRpZDogXCJyZWRpc1wiLFxuICAgIFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbW9uaXRvclxcL3JlZGlzX21vbml0b3IubHVhXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5yZWRpc1wiKSwgXG4gICAgXHRxdWVyeTogXCJyZWRpc1wiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiUmVkaXNcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHRpZDogXCJpbmZsdXhcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9pbmZsdXhkYl9tb25pdG9yLmx1YVwiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW5mbHV4XCIpLFxuICAgIFx0cXVlcnk6IFwiaW5mbHV4ZGJcIixcblx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIkluZmx1eFwiLCB2YWx1ZTogLTEgfV0gfSxcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHR9XSxcbiAgICB9LFxuICAgIHtcblx0aWQ6IFwiYWN0aXZlX21vbml0b3JpbmdcIixcblx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbW9uaXRvclxcL2FjdGl2ZV9tb25pdG9yaW5nX21vbml0b3IubHVhXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFjdGl2ZV9tb25pdG9yaW5nXCIpLFxuXHRxdWVyeTogXCJhbVwiLFxuXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgc291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcblx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdH0sIHtcblx0ICAgIG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFjdGl2ZV9tb25pdG9yaW5nXCIpLFxuXHQgICAgc291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L2FtX2hvc3QvbGlzdC5sdWFcIixcblx0ICAgIHZhbHVlOiBcImhvc3RcIixcblx0ICAgIGRpc2FibGVfdHNrZXk6IHRydWUsXG5cdCAgICB2YWx1ZV9tYXBfc291cmNlc19yZXM6IFwiYW1faG9zdFwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9XSxcbiAgICB9LFxuICAgIHtcbiAgICBcdGlkOiBcInNubXBfaW50ZXJmYWNlXCIsXG5cdGlkX2dyb3VwOiBcInNubXBcIixcbiAgICBcdC8vIGRpc2FibGVfc3RhdHM6IHRydWUsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc25tcF9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9pbnRlcmZhY2VcIiksXG4gICAgXHRxdWVyeTogXCJzbm1wX2ludGVyZmFjZVwiLFx0XG4gICAgXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcbiAgICBcdCAgICBzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG4gICAgXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuICAgIFx0fSwge1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaG9zdFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNubXBfaW50ZXJmYWNlXCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcImlmX2luZGV4XCIsXG5cdCAgICB2YWx1ZV91cmw6IFwic25tcF9wb3J0X2lkeFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHQvL3RvZG9fdGVzdFxuICAgIFx0aWQ6IFwic25tcF9kZXZpY2VcIixcblx0aWRfZ3JvdXA6IFwic25tcFwiLFxuICAgIFx0Ly8gZGlzYWJsZV9zdGF0czogdHJ1ZSxcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zbm1wX2RldmljZV9kZXRhaWxzXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2RldmljZVwiKSxcbiAgICBcdHF1ZXJ5OiBcInNubXBfZGV2aWNlXCIsXG4gICAgXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcbiAgICBcdCAgICBzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG4gICAgXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaG9zdFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHRpZDogXCJmbG93X2RldmljZVwiLFxuICAgIFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL2Zsb3dkZXZpY2VzX3N0YXRzXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5mbG93X2RldmljZVwiKSxcbiAgICBcdHF1ZXJ5OiBcImZsb3dkZXZcIixcbiAgICBcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcbiAgICBcdCAgICByZWdleF90eXBlOiBcImlwXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiZGV2aWNlXCIsXG5cdCAgICB2YWx1ZV91cmw6IFwiaXBcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwiZmxvd19pbnRlcmZhY2VcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9mbG93ZGV2aWNlX2ludGVyZmFjZV9kZXRhaWxzXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5mbG93X2ludGVyZmFjZVwiKSxcbiAgICBcdHF1ZXJ5OiBcImZsb3dkZXZfcG9ydFwiLFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG4gICAgXHR9LCB7XG4gICAgXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwiaXBcIixcbiAgICBcdCAgICB2YWx1ZTogXCJkZXZpY2VcIixcblx0ICAgIHZhbHVlX3VybDogXCJpcFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvcnRcIiksXG4gICAgXHQgICAgcmVnZXhfdHlwZTogXCJwb3J0XCIsXG4gICAgXHQgICAgdmFsdWU6IFwicG9ydFwiLFxuXHQgICAgdmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwic2Zsb3dfZGV2aWNlXCIsXG4gICAgXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc2Zsb3dkZXZpY2VzX3N0YXRzXCIsXG4gICAgXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zZmxvd19kZXZpY2VcIiksXG4gICAgXHRxdWVyeTogXCJzZmxvd2RldlwiLFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG4gICAgXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG4gICAgXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwiaXBcIixcbiAgICBcdCAgICB2YWx1ZTogXCJkZXZpY2VcIixcblx0ICAgIHZhbHVlX3VybDogXCJpcFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fV0sXG4gICAgfSxcbiAgICB7XG4gICAgXHRpZDogXCJzZmxvd19pbnRlcmZhY2VcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuICAgIFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc2Zsb3dfaW50ZXJmYWNlXCIpLFxuICAgIFx0cXVlcnk6IFwic2Zsb3dkZXZfcG9ydFwiLFxuICAgIFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0ICAgIHZhbHVlOiBcImlmaWRcIiwgXG5cdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG4gICAgXHR9LCB7XG4gICAgXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwiaXBcIixcbiAgICBcdCAgICB2YWx1ZTogXCJkZXZpY2VcIixcblx0ICAgIHZhbHVlX3VybDogXCJpcFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fSwge1xuXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvcnRcIiksXG4gICAgXHQgICAgcmVnZXhfdHlwZTogXCJwb3J0XCIsXG4gICAgXHQgICAgdmFsdWU6IFwicG9ydFwiLFxuXHQgICAgdmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcbiAgICBcdH1dLFxuICAgIH0sXG4gICAge1xuICAgIFx0aWQ6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcbiAgICBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9vYnNlcnZhdGlvbl9wb2ludHNcIixcbiAgICBcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9ic2VydmF0aW9uX3BvaW50XCIpLFxuICAgIFx0cXVlcnk6IFwib2JzX3BvaW50XCIsXG4gICAgXHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcbiAgICBcdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG4gICAgXHQgICAgdmFsdWU6IFwiaWZpZFwiLCBcbiAgICBcdCAgICB1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG4gICAgXHR9LCB7XG4gICAgXHQgICAgbWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuICAgIFx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9ic2VydmF0aW9uX3BvaW50XCIpLFxuICAgIFx0ICAgIHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuICAgIFx0ICAgIHZhbHVlOiBcIm9ic19wb2ludFwiLFxuICAgIFx0ICAgIHZhbHVlX3VybDogXCJvYnNlcnZhdGlvbl9wb2ludFwiLFxuICAgIFx0ICAgIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuICAgIFx0fV0sXG4gICAgfSxcbiAgICB7XG5cdC8vdG9kb190ZXN0XG5cdGlkOiBcInBvZFwiLFxuXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb2RfZGV0YWlsc1wiLFxuXHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb2RcIiksXHRcblx0cXVlcnk6IFwicG9kXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb2RcIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcblx0ICAgIHZhbHVlOiBcInBvZFwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sIHtcblx0Ly90b2RvX3Rlc3Rcblx0aWQ6IFwiY29udGFpbmVyXCIsXG5cdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL2NvbnRhaW5lcl9kZXRhaWxzXCIsXG5cdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmNvbnRhaW5lclwiKSxcblx0cXVlcnk6IFwiY29udGFpbmVyXCIsXG5cdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdCAgICBzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdCAgICB2YWx1ZTogXCJpZmlkXCIsIFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHR9LCB7XG5cdCAgICBtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdCAgICByZWdleF90eXBlOiBcInRleHRcIixcblx0ICAgIHZhbHVlOiBcImNvbnRhaW5lclwiLFxuXHQgICAgdWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdH1dLFxuICAgIH0sXG4gICAgLy8ge1xuICAgIC8vIFx0aWQ6IFwibl9lZGdlX2ludGVyZmFjZVwiLFxuICAgIC8vIFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvbmVkZ2VcXC9pZl9zdGF0cy5sdWFcIixcbiAgICAvLyBcdGxhYmVsOiBcIlByb2ZpbGUgbkVkZ2VcIixcbiAgICAvLyBcdHZhbHVlOiBcImlmaWRcIixcbiAgICAvLyBcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuICAgIC8vIFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0X2FuZF9pbnB1dCxcbiAgICAvLyBcdHF1ZXJ5OiBcImlmYWNlOm5lZGdlXCIsXG4gICAgLy8gfSxcbl07XG5cbmNvbnN0IG1ldHJpY3NDb25zdHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuXHR1aV90eXBlcyxcblx0c291cmNlc191cmxfZWxfdG9fc291cmNlLFxuXHRzb3VyY2VzX3R5cGVzLFxuXHRzb3VyY2VzX3R5cGVzX3RhYmxlcyxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBtZXRyaWNzQ29uc3RzO1xuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IG1ldHJpY3NDb25zdHMgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qc1wiXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcblxuY29uc3Qgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybCA9ICh0aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIGxldCBwYXJhbXNfdGltZXNlcmllc19ncm91cHMgPSBbXTtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCkgPT4ge1xuXHRsZXQgcGFyYW0gPSBnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtKHRzX2dyb3VwKTtcblx0cGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzLnB1c2gocGFyYW0pO1xuICAgIH0pO1xuICAgIGxldCB1cmxfdGltZXNlcmllc19ncm91cHMgPSBwYXJhbXNfdGltZXNlcmllc19ncm91cHMuam9pbihcIjs7XCIpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInRpbWVzZXJpZXNfZ3JvdXBzXCIsIHVybF90aW1lc2VyaWVzX2dyb3Vwcyk7XG59O1xuXG5mdW5jdGlvbiBnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtKHRzX2dyb3VwKSB7XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICB0c19ncm91cC50aW1lc2VyaWVzLmZvckVhY2goKHRzKSA9PiB7XG5cdHRpbWVzZXJpZXMucHVzaChgJHt0cy5pZH09JHt0cy5yYXd9OiR7dHMucGFzdH06JHt0cy5hdmd9OiR7dHMucGVyY185NX1gKTtcbiAgICB9KTtcbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeSA9IHRzX2dyb3VwLm1ldHJpYy5zY2hlbWE7XG4gICAgaWYgKHRzX2dyb3VwLm1ldHJpYy5xdWVyeSAhPSBudWxsKSB7XG5cdG1ldHJpY19zY2hlbWFfcXVlcnkgPSBgJHttZXRyaWNfc2NoZW1hX3F1ZXJ5fSske3RzX2dyb3VwLm1ldHJpYy5xdWVyeX1gO1xuICAgIH1cbiAgICBsZXQgdGltZXNlcmllc19wYXJhbSA9IHRpbWVzZXJpZXMuam9pbihcInxcIik7XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheV9xdWVyeSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLnZhbHVlKS5qb2luKFwiK1wiKTtcbiAgICBsZXQgcGFyYW0gPSBgJHt0c19ncm91cC5zb3VyY2VfdHlwZS5pZH07JHtzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnl9OyR7bWV0cmljX3NjaGVtYV9xdWVyeX07JHt0aW1lc2VyaWVzX3BhcmFtfWA7XG4gICAgcmV0dXJuIHBhcmFtO1xufVxuXG5jb25zdCBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwgPSBhc3luYyAoaHR0cF9wcmVmaXgsIHVybF90aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIGlmICh1cmxfdGltZXNlcmllc19ncm91cHMgPT0gbnVsbCkge1xuXHR1cmxfdGltZXNlcmllc19ncm91cHMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzXCIpO1xuICAgIH1cbiAgICBpZiAodXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwgfHwgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IFwiXCIpIHtcblx0cmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBncm91cHMgPSB1cmxfdGltZXNlcmllc19ncm91cHMuc3BsaXQoXCI7O1wiKTtcbiAgICBpZiAoIWdyb3Vwcz8ubGVuZ3RoID4gMCkge1xuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gUHJvbWlzZS5hbGwoZ3JvdXBzLm1hcChhc3luYyAoZykgPT4ge1xuXHRsZXQgdHNfZ3JvdXAgPSBhd2FpdCBnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAoZyk7XG5cdHJldHVybiB0c19ncm91cDtcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRpbWVzZXJpZXNfZ3JvdXBzO1xufTtcblxuY29uc3QgZ2V0X3RzX2dyb3VwID0gKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYykgPT4ge1xuICAgIGxldCBpZCA9IGdldF90c19ncm91cF9pZChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgZm9yIChsZXQga2V5IGluIG1ldHJpYy50aW1lc2VyaWVzKSB7XG5cdGxldCB0cyA9IG1ldHJpYy50aW1lc2VyaWVzW2tleV07XG5cdHRpbWVzZXJpZXMucHVzaCh7XG5cdCAgICBpZDoga2V5LFxuXHQgICAgbGFiZWw6IHRzLmxhYmVsLFxuXHQgICAgcmF3OiB0cnVlLFxuXHQgICAgcGFzdDogZmFsc2UsXG5cdCAgICBhdmc6IGZhbHNlLFxuXHQgICAgcGVyY185NTogZmFsc2UsXG5cdH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuXHRpZCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljLCB0aW1lc2VyaWVzLFxuICAgIH07XG59O1xuXG5jb25zdCBnZXRfZGVmYXVsdF90aW1lc2VyaWVzX2dyb3VwcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlKTtcbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IGdldF9tZXRyaWNzKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KTtcbiAgICBsZXQgbWV0cmljID0gZ2V0X2RlZmF1bHRfbWV0cmljKG1ldHJpY3MsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSk7XG4gICAgbGV0IHRzX2dyb3VwID0gZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgcmV0dXJuIFt0c19ncm91cF07XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAodHNfZ3JvdXBfdXJsX3BhcmFtKSB7XG4gICAgbGV0IGcgPSB0c19ncm91cF91cmxfcGFyYW07XG4gICAgbGV0IGluZm8gPSBnLnNwbGl0KFwiO1wiKTtcbiAgICBsZXQgc291cmNlX3R5cGVfaWQgPSBpbmZvWzBdO1xuICAgIGxldCBzb3VyY2VfdmFsdWVfcXVlcnkgPSBpbmZvWzFdO1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdmFsdWVfcXVlcnkuc3BsaXQoXCIrXCIpO1xuXG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnkgPSBpbmZvWzJdO1xuICAgIGxldCBtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5ID0gbWV0cmljX3NjaGVtYV9xdWVyeS5zcGxpdChcIitcIik7XG4gICAgaWYgKG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkubGVuZ3RoIDwgMikge1xuXHRtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5LnB1c2gobnVsbCk7XG4gICAgfVxuXG4gICAgbGV0IHRpbWVzZXJpZXNfdXJsID0gaW5mb1szXTtcblxuICAgIGxldCBzb3VyY2VfdHlwZSA9IGdldF9zb3VyY2VfdHlwZV9mcm9tX2lkKHNvdXJjZV90eXBlX2lkKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICBsZXQgbWV0cmljID0gYXdhaXQgZ2V0X21ldHJpY19mcm9tX3NjaGVtYShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheVswXSwgbWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheVsxXSk7XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBnZXRfdGltZXNlcmllcyh0aW1lc2VyaWVzX3VybCwgbWV0cmljKTtcbiAgICByZXR1cm4ge1xuXHRpZDogZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyksXG5cdHNvdXJjZV90eXBlLFxuXHRzb3VyY2VfYXJyYXksXG5cdG1ldHJpYyxcblx0dGltZXNlcmllcyxcbiAgICB9O1xufVxuXG5jb25zdCBnZXRfdHNfZ3JvdXBfaWQgPSAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljLCBlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0LCBzZXRfc291cmNlX3R5cGVfaWRfZ3JvdXApID0+IHtcbiAgICBsZXQgbWV0cmljX2lkID0gXCJcIjtcbiAgICBpZiAobWV0cmljICE9IG51bGwpIHtcblx0bWV0cmljX2lkID0gbWV0cmljLnNjaGVtYTsgICAgXG5cdGlmIChtZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuXHQgICAgbWV0cmljX2lkID0gYCR7bWV0cmljX2lkfSAtICR7bWV0cmljLnF1ZXJ5fWA7XG5cdH1cbiAgICB9XG4gICAgbGV0IHNvdXJjZV9kZWZfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfYXJyYXkubWFwKChzb3VyY2UsIGkpID0+IHtcblx0bGV0IHNvdXJjZV9kZWZfdmFsdWUgPSBzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlO1xuXHRpZiAoZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCAhPSBudWxsICYmICFlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0W3NvdXJjZV9kZWZfdmFsdWVdKSB7IHJldHVybiBudWxsOyB9XG5cdHJldHVybiBzb3VyY2UudmFsdWU7XG4gICAgfSkuZmlsdGVyKChzKSA9PiBzICE9IG51bGwpLmpvaW4oXCJfXCIpO1xuICAgIGxldCBzb3VyY2VfdHlwZV9pZCA9IHNvdXJjZV90eXBlLmlkO1xuICAgIGlmIChzZXRfc291cmNlX3R5cGVfaWRfZ3JvdXAgJiYgc291cmNlX3R5cGUuaWRfZ3JvdXAgIT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZV9pZCA9IHNvdXJjZV90eXBlLmlkX2dyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gYCR7c291cmNlX3R5cGVfaWR9IC0gJHtzb3VyY2VfdmFsdWVfYXJyYXl9IC0gJHttZXRyaWNfaWR9YDtcbn07XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfdXJsLCBtZXRyaWMpIHtcbiAgICBsZXQgdHNfdXJsX2FycmF5ID0gdGltZXNlcmllc191cmwuc3BsaXQoXCJ8XCIpO1xuICAgIGxldCByID0gLyguKyk9KC4rKTooLispOiguKyk6KC4rKS87XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICB0c191cmxfYXJyYXkuZm9yRWFjaCgodHNfdXJsKSA9PiB7XG5cdGxldCB2YWx1ZXMgPSByLmV4ZWModHNfdXJsKTtcblx0bGV0IGlkID0gdmFsdWVzWzFdO1xuXHRsZXQgbGFiZWwgPSBtZXRyaWMudGltZXNlcmllc1tpZF0ubGFiZWw7XG5cdGxldCByYXcgPSBKU09OLnBhcnNlKHZhbHVlc1syXSk7XG5cdGxldCBwYXN0ID0gSlNPTi5wYXJzZSh2YWx1ZXNbM10pO1xuXHRsZXQgYXZnID0gSlNPTi5wYXJzZSh2YWx1ZXNbNF0pO1xuXHRsZXQgcGVyY185NSA9IEpTT04ucGFyc2UodmFsdWVzWzVdKTtcblx0dGltZXNlcmllcy5wdXNoKHtcblx0ICAgIGlkLCBsYWJlbCwgcmF3LCBwYXN0LCBhdmcsIHBlcmNfOTUsXG5cdH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aW1lc2VyaWVzO1xufVxuXG5jb25zdCB1aV90eXBlcyA9IG1ldHJpY3NDb25zdHMudWlfdHlwZXM7XG5cbi8vIGRpY3Rpb25hcnkgb2YgZnVuY3Rpb25zIHRvIGNvbnZlcnQgYW4gZWxlbWVudCBvZiBzb3VyY2VfdXJsIHJlc3QgcmVzdWx0IHRvIGEgc291cmNlICh7bGFiZWwsIHZhbHVlIH0pXG5jb25zdCBzb3VyY2VzX3VybF9lbF90b19zb3VyY2UgPSBtZXRyaWNzQ29uc3RzLnNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IG1ldHJpY3NDb25zdHMuc291cmNlc190eXBlcztcbmNvbnN0IHNvdXJjZXNfdHlwZXNfdGFibGVzID0gbWV0cmljc0NvbnN0cy5zb3VyY2VzX3R5cGVzX3RhYmxlcztcblxuY29uc3QgZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQgPSAoc291cmNlX3R5cGVfaWQpID0+IHtcbiAgICByZXR1cm4gc291cmNlc190eXBlcy5maW5kKChzdCkgPT4gc3QuaWQgPT0gc291cmNlX3R5cGVfaWQpO1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5ID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkoc291cmNlX3R5cGUpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9kaWN0KSB7XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmKSA9PiBzb3VyY2VfdmFsdWVfZGljdFtzb3VyY2VfZGVmLnZhbHVlXSk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgcmV0dXJuIHNvdXJjZV9hcnJheTtcbn1cblxuY29uc3QgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5ID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcblx0c291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBbXTtcbiAgICBsZXQgc291cmNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX3ZhbHVlX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBzb3VyY2VfdmFsdWUgPSBzb3VyY2VfdmFsdWVfYXJyYXlbaV07XG5cdGxldCBzb3VyY2VfZGVmID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVtpXTtcblx0aWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwgfHwgc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKSB7XG5cdCAgICBsZXQgc291cmNlcyA9IFtdO1xuXHQgICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwpIHtcblx0XHRzb3VyY2VzID0gYXdhaXQgZ2V0X3NvdXJjZXMoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLmlkLCBzb3VyY2VfZGVmKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0c291cmNlcyA9IHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbigpO1xuXHQgICAgfVxuXHQgICAgc291cmNlID0gc291cmNlcy5maW5kKChzKSA9PiBzLnZhbHVlID09IHNvdXJjZV92YWx1ZSk7XG5cdCAgICBpZiAoc291cmNlID09IG51bGwpIHtcblx0XHRzb3VyY2UgPSBzb3VyY2VzWzBdO1xuXHQgICAgfVxuXHR9IGVsc2Uge1xuXHQgICAgc291cmNlID0geyBsYWJlbDogc291cmNlX3ZhbHVlLCB2YWx1ZTogc291cmNlX3ZhbHVlIH07XG5cdH1cblx0c291cmNlX2FycmF5LnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZV9hcnJheTtcbn07XG5cbmxldCBjYWNoZV9zb3VyY2VzID0ge307XG5cbmNvbnN0IGdldF9zb3VyY2VzID0gYXN5bmMgKGh0dHBfcHJlZml4LCBpZCwgc291cmNlX2RlZikgPT4ge1xuICAgIGxldCBrZXkgPSBgJHtpZH1fJHtzb3VyY2VfZGVmLnZhbHVlfWA7XG4gICAgaWYgKGNhY2hlX3NvdXJjZXNba2V5XSA9PSBudWxsKSB7XG5cdGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsKSB7XG5cdCAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9LyR7c291cmNlX2RlZi5zb3VyY2VzX3VybH1gO1xuXHQgICAgY2FjaGVfc291cmNlc1trZXldID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG5cdH0gZWxzZSBpZiAoc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKSB7XG5cdCAgICBjYWNoZV9zb3VyY2VzW2tleV0gPSBzb3VyY2VfZGVmLnNvdXJjZXNfZnVuY3Rpb24oKTtcblx0fSBlbHNlIHtcblx0ICAgIHJldHVybiBbXTtcblx0fVxuICAgIH1cbiAgICBsZXQgc291cmNlcyA9IGF3YWl0IGNhY2hlX3NvdXJjZXNba2V5XTtcbiAgICBpZiAoc291cmNlX2RlZi5zb3VyY2VzX3VybCkge1xuXHRsZXQgZl9tYXBfc291cmNlX2VsZW1lbnQgPSBzb3VyY2VzX3VybF9lbF90b19zb3VyY2Vbc291cmNlX2RlZi52YWx1ZV9tYXBfc291cmNlc19yZXNdO1xuXHRpZiAoZl9tYXBfc291cmNlX2VsZW1lbnQgPT0gbnVsbCkge1xuXHQgICAgZl9tYXBfc291cmNlX2VsZW1lbnQgPSBzb3VyY2VzX3VybF9lbF90b19zb3VyY2Vbc291cmNlX2RlZi52YWx1ZV07XG5cdH1cblx0aWYgKGZfbWFwX3NvdXJjZV9lbGVtZW50ID09IG51bGwpIHtcblx0ICAgIHRocm93IGA6RXJyb3I6IG1ldHJpY3MtbWFuYWdlci5qcywgbWlzc2luZyBzb3VyY2VzX3VybF90b19zb3VyY2UgJHtzb3VyY2VfZGVmLnZhbHVlfSBrZXlgO1xuXHR9XG5cdHNvdXJjZXMgPSBzb3VyY2VzLm1hcCgocykgPT4gZl9tYXBfc291cmNlX2VsZW1lbnQocykpXG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSkgICAgXG59O1xuXG5mdW5jdGlvbiBzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwoc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9vYmplY3QpIHtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNvdXJjZV9kZWYpID0+IHtcdFx0XG5cdGxldCBzb3VyY2VfdmFsdWUgPSBzb3VyY2VfdmFsdWVfb2JqZWN0W3NvdXJjZV9kZWYudmFsdWVdO1xuXHRpZiAoc291cmNlX3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdGlmIChzb3VyY2VfZGVmLmZfc2V0X3ZhbHVlX3VybCAhPSBudWxsKSB7XG5cdCAgICBzb3VyY2VfZGVmLmZfc2V0X3ZhbHVlX3VybCgpO1xuXHR9IGVsc2UgaWYgKHNvdXJjZV9kZWYudmFsdWVfdXJsICE9IG51bGwpIHtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChzb3VyY2VfZGVmLnZhbHVlX3VybCwgc291cmNlX3ZhbHVlKTtcblx0fSBlbHNlIHtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChzb3VyY2VfZGVmLnZhbHVlLCBzb3VyY2VfdmFsdWUpO1xuXHR9XG4gICAgfSk7XG59XG5cbmNvbnN0IGdldF9kZWZhdWx0X3NvdXJjZV92YWx1ZV9hcnJheSA9IChzb3VyY2VfdHlwZSkgPT4ge1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG5cdHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYpID0+IHtcblx0aWYgKHNvdXJjZV9kZWYuZl9nZXRfdmFsdWVfdXJsICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBzb3VyY2VfZGVmLmZfZ2V0X3ZhbHVlX3VybCgpO1xuXHR9XG5cdGxldCBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZi52YWx1ZV91cmw7XG5cdGlmIChzb3VyY2VfZGVmX3ZhbHVlID09IG51bGwpIHtcblx0ICAgIHNvdXJjZV9kZWZfdmFsdWUgPSBzb3VyY2VfZGVmLnZhbHVlO1xuXHR9XG5cdGxldCBzb3VyY2VfdmFsdWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShzb3VyY2VfZGVmX3ZhbHVlKTtcblx0cmV0dXJuIHNvdXJjZV92YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gc291cmNlX3ZhbHVlX2FycmF5O1xufTtcblxuZnVuY3Rpb24gZ2V0X21ldHJpY3NfdXJsKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KSB7XG4gICAgbGV0IHBhcmFtcyA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfT0ke3NvdXJjZV9hcnJheVtpXS52YWx1ZX1gO1xuICAgIH0pLmpvaW4oXCImXCIpO1xuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHlwZS9jb25zdHMubHVhP3F1ZXJ5PSR7c291cmNlX3R5cGUucXVlcnl9JiR7cGFyYW1zfWA7XG4gICAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZ2V0X21ldHJpY19rZXkoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSkge1xuICAgIGxldCBzb3VyY2VfYXJyYXlfa2V5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlKSA9PiBzb3VyY2UudmFsdWUpLmpvaW4oXCJfXCIpO1xuICAgIGxldCBrZXkgPSBgJHtzb3VyY2VfdHlwZS5pZH1fJHtzb3VyY2VfYXJyYXlfa2V5fWA7XG4gICAgcmV0dXJuIGtleTtcbn1cblxubGV0IGNhY2hlX21ldHJpY3MgPSB7fTtcbmxldCBsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IG51bGw7XG5jb25zdCBnZXRfbWV0cmljcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSkgPT4ge1xuICAgIGxldCBlcG9jaF9iZWdpbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG4gICAgbGV0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgIGxldCBjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsID0gYCR7ZXBvY2hfYmVnaW59XyR7ZXBvY2hfZW5kfWA7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcblx0c291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGlmIChzb3VyY2VfYXJyYXkgPT0gbnVsbCkge1xuXHRzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlKTtcbiAgICB9XG4gICAgLy8gbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90eXBlL2NvbnN0cy5sdWE/cXVlcnk9JHtzb3VyY2VfdHlwZS52YWx1ZX1gO1xuICAgIGxldCB1cmwgPSBnZXRfbWV0cmljc191cmwoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpO1xuICAgIGxldCBrZXkgPSBnZXRfbWV0cmljX2tleShzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KTtcbiAgICBpZiAoY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCAhPSBsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCkge1xuXHRjYWNoZV9tZXRyaWNzW2tleV0gPSBudWxsO1xuXHRsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IGN1cnJlbnRfbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWw7XG4gICAgfVxuICAgIGlmIChjYWNoZV9tZXRyaWNzW2tleV0gPT0gbnVsbCkge1xuXHRjYWNoZV9tZXRyaWNzW2tleV0gPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICB9XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBjYWNoZV9tZXRyaWNzW2tleV07XG4gICAgaWYgKG1ldHJpY3Muc29tZSgobSkgPT4gbS5kZWZhdWx0X3Zpc2libGUgPT0gdHJ1ZSkgPT0gZmFsc2UpIHtcblx0bWV0cmljc1swXS5kZWZhdWx0X3Zpc2libGUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuY2xvbmUobWV0cmljcyk7XG59O1xuXG5jb25zdCBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlID0gKCkgPT4ge1xuICAgIGxldCBwYXRobmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZXNfdHlwZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0bGV0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoc291cmNlc190eXBlc1tpXS5yZWdleF9wYWdlX3VybCk7XG5cdGlmIChyZWdFeHAudGVzdChwYXRobmFtZSkgPT0gdHJ1ZSkge1xuXHQgICAgcmV0dXJuIHNvdXJjZXNfdHlwZXNbaV07XG5cdH1cbiAgICB9XG4gICAgdGhyb3cgYHNvdXJjZV90eXBlIG5vdCBmb3VuZCBmb3IgJHtwYXRobmFtZX1gO1xufTtcblxuY29uc3QgZ2V0X21ldHJpY19mcm9tX3NjaGVtYSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBnZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSk7XG4gICAgcmV0dXJuIG1ldHJpY3MuZmluZCgobSkgPT4gbS5zY2hlbWEgPT0gbWV0cmljX3NjaGVtYSAmJiBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSk7IFxufTtcblxuY29uc3QgZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5ID0gKHRzX3F1ZXJ5LCBzb3VyY2VfdHlwZSkgPT4ge1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG5cdHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBsZXQgc291cmNlX2RlZl9kaWN0ID0ge307XG4gICAgc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5mb3JFYWNoKChzX2RlZikgPT4gc291cmNlX2RlZl9kaWN0W3NfZGVmLnZhbHVlXSA9IHRydWUpO1xuICAgIGxldCB0c19xdWVyeV9hcnJheSA9IHRzX3F1ZXJ5LnNwbGl0KFwiLFwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRzX3F1ZXJ5X2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCB0c192YWxfa2V5ID0gdHNfcXVlcnlfYXJyYXlbaV0uc3BsaXQoXCI6XCIpWzBdO1xuXHRpZiAoc291cmNlX2RlZl9kaWN0W3RzX3ZhbF9rZXldID09IG51bGwpIHtcblx0ICAgIHJldHVybiB0c19xdWVyeV9hcnJheVtpXTtcblx0fVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgZ2V0X2RlZmF1bHRfbWV0cmljID0gKG1ldHJpY3MsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBkZWZhdWx0X21ldHJpYztcbiAgICBpZiAobWV0cmljX3RzX3NjaGVtYSAhPSBudWxsKSB7XG5cdGRlZmF1bHRfbWV0cmljID0gbWV0cmljcy5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfdHNfc2NoZW1hICYmIChtZXRyaWNfcXVlcnkgPT0gbnVsbCB8fCBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSkpO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdF9tZXRyaWMgPT0gbnVsbCkge1xuXHRkZWZhdWx0X21ldHJpYyA9IG1ldHJpY3MuZmluZCgobSkgPT4gbS5kZWZhdWx0X3Zpc2libGUgPT0gdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0X21ldHJpYyAhPSBudWxsKSB7XG5cdHJldHVybiBkZWZhdWx0X21ldHJpYztcbiAgICB9XG4gICAgcmV0dXJuIG1ldHJpY3NbMF07XG59O1xuXG5jb25zdCBtZXRyaWNzTWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdHNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwsXG5cdGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybCxcblx0Z2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMsXG5cdGdldF90c19ncm91cCxcblx0Z2V0X3RzX2dyb3VwX2lkLFxuXG5cdHNvdXJjZXNfdHlwZXMsXG5cdHNvdXJjZXNfdHlwZXNfdGFibGVzLFx0XG5cdGdldF9zb3VyY2VfdHlwZV9mcm9tX2lkLFxuXHRnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlLFxuXG5cdGdldF9zb3VyY2VzLFxuXHRnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXksXG5cdGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9kaWN0LFxuXHRnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXksXG5cdGdldF9kZWZhdWx0X3NvdXJjZV92YWx1ZV9hcnJheSxcblxuXHRnZXRfbWV0cmljcyxcblx0Z2V0X21ldHJpY19mcm9tX3NjaGVtYSxcblx0Z2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5LFxuXHRnZXRfZGVmYXVsdF9tZXRyaWMsXG5cblx0c2V0X3NvdXJjZV92YWx1ZV9vYmplY3RfaW5fdXJsLFxuXG5cdHVpX3R5cGVzLFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IG1ldHJpY3NNYW5hZ2VyO1xuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cblxuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IGNvbG9yc0ludGVycG9sYXRpb24gZnJvbSBcIi4vY29sb3JzLWludGVycG9sYXRpb24uanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5mdW5jdGlvbiB0c1RvQXBleE9wdGlvbnModHNPcHRpb25zLCBtZXRyaWMpIHtcbiAgICBsZXQgc3RhcnRUaW1lID0gdHNPcHRpb25zLnN0YXJ0O1xuICAgIGxldCBzdGVwID0gdHNPcHRpb25zLnN0ZXAgKiAxMDAwO1xuICAgIHRzT3B0aW9ucy5zZXJpZXMuZm9yRWFjaCgocykgPT4ge1xuXHRzLm5hbWUgPSBzLmxhYmVsO1xuXHRkZWxldGUgcy50eXBlO1xuXHRsZXQgdGltZSA9IHN0YXJ0VGltZSAqIDEwMDA7XG5cdHMuZGF0YSA9IHMuZGF0YS5tYXAoKGQpID0+IHtcblx0ICAgIC8vbGV0IGQyID0geyB4OiB0aW1lLCB5OiBkICogOCB9O1xuXHQgICAgbGV0IGQyID0geyB4OiB0aW1lLCB5OiBkIH07XG5cdCAgICB0aW1lICs9IHN0ZXA7XG5cdCAgICByZXR1cm4gZDI7XG5cdH0pO1xuXHRsZXQgeUF4aXMgPSB7XG5cdH07XG4gICAgfSk7XG4gICAgdHNPcHRpb25zLnhheGlzID0ge1xuXHRsYWJlbHM6IHtcblx0ICAgIHNob3c6IHRydWUsXG5cdH0sXG5cdGF4aXNUaWNrczoge1xuXHQgICAgc2hvdzogdHJ1ZSxcblx0fSxcbiAgICB9O1xuICAgIFxuICAgIHRzT3B0aW9ucy55YXhpcyA9IHtcblx0Ly9yZXZlcnNlZDogdHJ1ZSxcblx0Ly9zZXJpZXNOYW1lOiBcblx0bGFiZWxzOiB7XG5cdCAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihtZXRyaWMubWVhc3VyZV91bml0KSxcblx0fSxcblx0YXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcblx0fSxcblx0dGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG1ldHJpYy5tZWFzdXJlX3VuaXQsXG5cdH0sXG4gICAgfTtcbiAgICAvL3RzSW50ZXJmYWNlLmNvbG9ycyA9IFtcIiNmZjMyMzFcIiwgXCIjZmZjMDA3XCJdO1xufVxuXG5mdW5jdGlvbiBnZXRTZXJpZUlkKHNlcmllKSB7XG4gICAgcmV0dXJuIGAke3NlcmllLmxhYmVsfWA7XG59XG5cbmZ1bmN0aW9uIGdldFlheGlzTmFtZShtZWFzdXJlVW5pdCwgc2NhbGUpIHtcbiAgICBpZiAobWVhc3VyZVVuaXQgPT0gXCJudW1iZXJcIikge1xuXHRyZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIHJldHVybiBtZWFzdXJlVW5pdDtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVOYW1lKG5hbWUsIGlkLCB0c0dyb3VwLCBleHRlbmRTZXJpZXNOYW1lKSB7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuXHRuYW1lID0gaWQ7XG4gICAgfVxuICAgIGxldCBuYW1lX21vcmVfc3BhY2UgPSBcIlwiO1xuICAgIGlmIChuYW1lICE9IG51bGwpIHtcblx0bmFtZV9tb3JlX3NwYWNlID0gYCR7bmFtZX0gYDtcbiAgICB9XG4gICAgaWYgKGV4dGVuZFNlcmllc05hbWUgPT0gZmFsc2UpIHtcblx0cmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG4gICAgbGV0IHNvdXJjZSA9IHRzR3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9pbmRleF07XG4gICAgbGV0IHByZWZpeCA9IGAke3NvdXJjZS5sYWJlbH1gO1xuICAgIGxldCB5YXhpc05hbWUgPSBnZXRZYXhpc05hbWUodHNHcm91cC5tZXRyaWMubWVhc3VyZV91bml0LCB0c0dyb3VwLm1ldHJpYy5zY2FsZSk7XG4gICAgcmV0dXJuIGAke3ByZWZpeH0gJHtuYW1lX21vcmVfc3BhY2V9KCR7eWF4aXNOYW1lfSlgO1xufVxuXG5mdW5jdGlvbiBnZXRBZGRTZXJpZXNOYW1lU291cmNlKHRzR3JwdXBzQXJyYXkpIHtcbiAgICByZXR1cm4gdHNHcnB1cHNBcnJheVswXT8uc291cmNlPy5uYW1lICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFlheGlzSWQobWV0cmljKSB7XG4gICAgcmV0dXJuIGAke21ldHJpYy5tZWFzdXJlX3VuaXR9XyR7bWV0cmljLnNjYWxlfWA7XG59XG5cbmZ1bmN0aW9uIGdldFNlcmllc0luQXBleEZvcm1hdCh0c09wdGlvbnMsIHRzR3JvdXAsIGV4dGVuZFNlcmllc05hbWUsIGZvcmNlRHJhd1R5cGUsIHRzQ29tcGFyZSkge1xuICAgIC8vIGV4dHJhY3Qgc3RhcnQgdGltZSBhbmQgc3RlcFxuICAgIGxldCBzdGFydFRpbWUgPSB0c09wdGlvbnMuc3RhcnQgKiAxMDAwO1xuICAgIGxldCBzdGVwID0gdHNPcHRpb25zLnN0ZXAgKiAxMDAwO1xuICAgIGxldCBzZXJpZXNBcGV4ID0gW107XG4gICAgbGV0IHNlcmllc0tleXMgPSBPYmplY3Qua2V5cyh0c0dyb3VwLm1ldHJpYy50aW1lc2VyaWVzKTtcbiAgICBpZiAodHNHcm91cC5tZXRyaWMudHlwZSAhPSBcInRvcFwiICYmIHRzT3B0aW9ucy5zZXJpZXM/Lmxlbmd0aCAhPSBzZXJpZXNLZXlzLmxlbmd0aCkge1x0XG5cdHRzT3B0aW9ucy5zZXJpZXMgPSBzZXJpZXNLZXlzLm1hcCgoc2ssIGkpID0+IHtcblx0ICAgIGxldCBzZXJpZSA9IHRzT3B0aW9ucy5zZXJpZXMuZmluZCgocykgPT4gZ2V0U2VyaWVJZChzKSA9PSBzayk7XG5cdCAgICBpZiAoc2VyaWUgIT0gbnVsbCkgeyByZXR1cm4gc2VyaWU7IH1cblx0ICAgIHJldHVybiB7XG5cdFx0bGFiZWw6IHNrLFxuXHRcdGRhdGE6IFtudWxsXSxcblx0ICAgIH07XG5cdH0pO1xuICAgIH1cbiAgICB0c09wdGlvbnMuc2VyaWVzLmZvckVhY2goKHMsIGkpID0+IHtcblx0Ly8gZXh0cmFjdCBpZFxuXHRsZXQgaWQgPSBnZXRTZXJpZUlkKHMpO1xuXHQvLyBmaW5kIHRpbWVzZXJpZXMgbWV0YWRhdGFcblx0bGV0IHNNZXRhZGF0YSA9IHRzR3JvdXAubWV0cmljLnRpbWVzZXJpZXNbaWRdO1xuXHRpZiAoc01ldGFkYXRhID09IG51bGwpIHtcblx0ICAgIHRocm93IGBJbXBvc3NpYmxlIGZpbmQgdGltZXNlcmllX2lkID0gJHtpZH0gaW4gbWV0cmljIG1ldGFkYXRhIChpZCxzY2hlbWEscXVlcnkpID0gKCR7bWV0cmljLmlkfSwke21ldHJpYy5zY2hlbWF9LCR7bWV0cmljLmlkfSlgO1xuXHR9XG5cdC8vIGV4dHJhY3QgZGF0YSBhbmQgY2hlY2sgaWYgd2UgbmVlZCBpbnZlcnQgZGlyZWN0aW9uXG5cdGxldCBzY2FsYXIgPSAxO1xuXHRpZiAoc01ldGFkYXRhLmludmVydF9kaXJlY3Rpb24gPT0gdHJ1ZSkge1xuXHQgICAgc2NhbGFyID0gLTE7XG5cdH1cblx0bGV0IGZNYXBEYXRhID0gKGRhdGEpID0+IHtcblx0ICAgIGxldCB0aW1lID0gc3RhcnRUaW1lO1xuXHQgICAgbGV0IHJlcyA9IGRhdGEubWFwKChkKSA9PiB7XG5cdFx0bGV0IGQyID0geyB4OiB0aW1lLCB5OiBkICogc2NhbGFyIH07XG5cdFx0dGltZSArPSBzdGVwO1xuXHRcdHJldHVybiBkMjtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHJlcztcblx0fTtcblx0XG5cdC8vIGV4dHJhY3QgdHMgdmlzaWJpbGl0eSAocmF3LCBhdmcsIHBlcmNfOTUpXG5cdGxldCB0c1Zpc2liaWxpdHkgPSB0c0dyb3VwLnRpbWVzZXJpZXM/LmZpbmQoKHQpID0+IHQuaWQgPT0gaWQpO1xuXHRsZXQgbmFtZSA9IHNNZXRhZGF0YS5sYWJlbDtcblx0aWYgKHMuZXh0X2xhYmVsICE9IG51bGwgJiYgdHNHcm91cC5tZXRyaWMudHlwZSA9PSBcInRvcFwiKSB7XG5cdCAgICBuYW1lID0gcy5leHRfbGFiZWw7XG5cdH1cblx0bGV0IHNOYW1lID0gZ2V0U2VyaWVOYW1lKG5hbWUsIGlkLCB0c0dyb3VwLCBleHRlbmRTZXJpZXNOYW1lKTtcblx0Ly8gY2hlY2sgYW5kIGFkZCByYXcgc2VyaWUgdmlzaWJpbGl0eVxuXHRpZiAodHNWaXNpYmlsaXR5ID09IG51bGwgfHwgdHNWaXNpYmlsaXR5LnJhdyA9PSB0cnVlKSB7XG5cdCAgICBsZXQgZGF0YSA9IGZNYXBEYXRhKHMuZGF0YSk7XG5cblx0ICAgIGxldCBkcmF3VHlwZSA9IHNNZXRhZGF0YS5kcmF3X3R5cGU7XG5cdCAgICBpZiAoZHJhd1R5cGUgPT0gbnVsbCAmJiBmb3JjZURyYXdUeXBlICE9IG51bGwpIHsgZHJhd1R5cGUgPSBmb3JjZURyYXdUeXBlOyB9XG5cdCAgICBlbHNlIGlmIChkcmF3VHlwZSA9PSBudWxsKSB7IGRyYXdUeXBlID0gXCJhcmVhXCI7IH1cblx0ICAgIFxuXHQgICAgLy8gY3JlYXRlIGFuIGFwZXggY2hhcnQgc2VyaWVcblx0ICAgIGxldCBzQXBleCA9IHtcblx0XHRpZCxcblx0XHRjb2xvclBhbGV0dGU6IDAsXG5cdFx0Y29sb3I6IHNNZXRhZGF0YS5jb2xvcixcblx0XHQvLyBzdGFja2VkOiB0c0dyb3VwLm1ldHJpYy5kcmF3X3N0YWNrZWQsXG5cdFx0dHlwZTogZHJhd1R5cGUsXG5cdFx0bmFtZTogc05hbWUsXHRcdFxuXHRcdGRhdGEsXG5cdFx0aW52ZXJ0X2RpcmVjdGlvbjogc01ldGFkYXRhLmludmVydF9kaXJlY3Rpb24sXG5cdCAgICB9O1xuXHQgICAgc2VyaWVzQXBleC5wdXNoKHNBcGV4KTtcblx0fVxuXG5cdC8vIGNoZWNrIGFuZCBhZGQgcGFzdCBzZXJpZSB2aXNpYmlsaXR5XG5cdGlmICh0c1Zpc2liaWxpdHk/LnBhc3QgPT0gdHJ1ZVxuXHQgICAgJiYgbnRvcG5nX3V0aWxpdHkuaXNfb2JqZWN0KHRzT3B0aW9ucy5hZGRpdGlvbmFsX3NlcmllcykpIHtcblx0ICAgIGxldCBzZXJpZXNEYXRhID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHRzT3B0aW9ucy5hZGRpdGlvbmFsX3NlcmllcylbMF07XG5cdCAgICBsZXQgc0FwZXggPSB7XG5cdFx0aWQsXG5cdFx0Y29sb3JQYWxldHRlOiAxLFxuXHRcdC8vIGNvbG9yOiBzTWV0YWRhdGEuY29sb3IsXG5cdFx0dHlwZTogXCJsaW5lXCIsXG5cdFx0Ly8gc3RhY2tlZDogdHNHcm91cC5tZXRyaWMuZHJhd19zdGFja2VkLFxuXHRcdG5hbWU6IGAke3NOYW1lfSAke3RzQ29tcGFyZX0gQWdvYCxcblx0XHRkYXRhOiBmTWFwRGF0YShzZXJpZXNEYXRhKSxcblx0XHRkYXNoZWQ6IHRydWUsXG5cdFx0aW52ZXJ0X2RpcmVjdGlvbjogc01ldGFkYXRhLmludmVydF9kaXJlY3Rpb24sXG5cdCAgICB9O1xuXHQgICAgc2VyaWVzQXBleC5wdXNoKHNBcGV4KTtcblx0fVxuXG5cdC8vIGRlZmluZSBhIGZ1bmN0aW9uIHRvIGJ1aWxkIGEgY29uc3RhbnQgc2VyaWVcblx0bGV0IGZCdWlsZENvbnN0YW50U2VyaWUgPSAocHJlZml4LCBpZCwgdmFsdWUpID0+IHtcblx0ICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdCAgICBsZXQgbmFtZSA9IGAke3NOYW1lfSAoJHtwcmVmaXh9KWA7XG5cdCAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdHZhbHVlICo9IHNjYWxhcjtcblx0ICAgIH1cblx0ICAgIGxldCB0aW1lID0gc3RhcnRUaW1lO1xuXHQgICAgbGV0IGRhdGEgPSBzLmRhdGEubWFwKChkKSA9PiB7XG5cdFx0bGV0IGQyID0geyB4OiB0aW1lLCB5OiB2YWx1ZSB9O1xuXHRcdHRpbWUgKz0gc3RlcDtcblx0XHRyZXR1cm4gZDI7XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiB7XG5cdFx0aWQsXG5cdFx0bmFtZTogbmFtZSxcblx0XHRjb2xvclBhbGV0dGU6IDEsXG5cdFx0Ly8gY29sb3I6IHNNZXRhZGF0YS5jb2xvcixcblx0XHR0eXBlOiAnbGluZScsXG5cdFx0Ly8gc3RhY2tlZDogdHNHcm91cC5tZXRyaWMuZHJhd19zdGFja2VkLFxuXHRcdGRhdGEsXG5cdFx0aW52ZXJ0X2RpcmVjdGlvbjogc01ldGFkYXRhLmludmVydF9kaXJlY3Rpb24sXG5cdCAgICB9O1xuXHR9O1xuXHQvLyBjaGVjayBhbmQgYWRkIGF2ZyBzZXJpZSB2aXNpYmlsaXR5XG5cdGlmICh0c1Zpc2liaWxpdHk/LmF2ZyA9PSB0cnVlKSB7XG5cdCAgICBsZXQgdmFsdWUgPSB0c09wdGlvbnMuc3RhdGlzdGljcz8uYnlfc2VyaWVbaV0uYXZlcmFnZTtcblx0ICAgIC8vIGNyZWF0ZSBhbiBhcGV4IGNoYXJ0IHNlcmllXG5cdCAgICBsZXQgc0FwZXggPSBmQnVpbGRDb25zdGFudFNlcmllKFwiQXZnXCIsIGlkLCB2YWx1ZSk7XG5cdCAgICBzZXJpZXNBcGV4LnB1c2goc0FwZXgpO1xuXHR9XG5cdC8vIGNoZWNrIGFuZCBhZGQgOTV0aHBlcmMgc2VyaWUgdmlzaWJpbGl0eVxuXHRpZiAodHNWaXNpYmlsaXR5Py5wZXJjXzk1ID09IHRydWUpIHtcblx0ICAgIGxldCB2YWx1ZSA9IHRzT3B0aW9ucy5zdGF0aXN0aWNzPy5ieV9zZXJpZVtpXVtcIjk1dGhfcGVyY2VudGlsZVwiXTtcblx0ICAgIC8vIGNyZWF0ZSBhbiBhcGV4IGNoYXJ0IHNlcmllXG5cdCAgICBsZXQgc0FwZXggPSBmQnVpbGRDb25zdGFudFNlcmllKFwiOTV0aCBQZXJjXCIsIGlkLCB2YWx1ZSk7XG5cdCAgICBzZXJpZXNBcGV4LnB1c2goc0FwZXgpO1xuXHR9XG5cbiAgICB9KTtcbiAgICByZXR1cm4gc2VyaWVzQXBleDtcbn1cblxuY29uc3QgZGVmYXVsdENvbG9ycyA9IFsgXG4gICAgXCIjQzZEOUZEXCIsXG4gICAgXCIjOTBFRTkwXCIsXG4gICAgXCIjRUU4NDM0XCIsXG4gICAgXCIjQzk1RDYzXCIsIFxuICAgIFwiI0FFODc5OVwiLCBcbiAgICBcIiM3MTdFQzNcIiwgXG4gICAgXCIjNDk2RERCXCIsIFxuICAgIFwiIzVBN0FERVwiLCBcbiAgICBcIiM2OTg2RTFcIiwgXG4gICAgXCIjNzc5MUU0XCIsIFxuICAgIFwiIzgzOUJFNlwiLFxuICAgIFwiIzhFQTRFOFwiLCBcbl07XG5cbmZ1bmN0aW9uIHNldFNlcmllc0NvbG9ycyhzZXJpZXNBcnJheSkgeyAgICBcbiAgICBsZXQgY29sb3JzID0gc2VyaWVzQXJyYXkubWFwKChzKSA9PiB7XG5cdGlmIChzLmNvbG9yICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBzLmNvbG9yO1xuXHR9XG5cdGxldCBoYXNoID0gbnRvcG5nX3V0aWxpdHkuc3RyaW5nX2hhc2hfY29kZShzLm5hbWUpO1xuXHRpZiAoaGFzaCA8IDApIHsgaGFzaCAqPSAtMTsgfVxuXHRsZXQgY29sb3JJbmRleCA9IGhhc2ggJSBkZWZhdWx0Q29sb3JzLmxlbmd0aDtcblx0cmV0dXJuIGRlZmF1bHRDb2xvcnNbY29sb3JJbmRleF07XG4gICAgfSk7XG4gICAgY29sb3JzID0gY29sb3JzSW50ZXJwb2xhdGlvbi50cmFuc2Zvcm1Db2xvcnMoY29sb3JzKTtcbiAgICBzZXJpZXNBcnJheS5mb3JFYWNoKChzLCBpKSA9PiBzLmNvbG9yID0gY29sb3JzW2ldKTtcbn1cblxuZnVuY3Rpb24gc2V0U2VyaWVzQ29sb3JzMihzZXJpZXNBcnJheSkge1xuICAgIGxldCBjb3VudDAgPSAwLCBjb3VudDEgPSAwO1xuICAgIGxldCBjb2xvcnMwID0gZGVmYXVsdENvbG9ycztcbiAgICBsZXQgY29sb3JzMSA9IGQzdjcuc2NoZW1lQ2F0ZWdvcnkxMDtcbiAgICBzZXJpZXNBcnJheS5mb3JFYWNoKChzKSA9PiB7XG5cdGlmIChzLmNvbG9yUGFsZXR0ZSA9PSAwKSB7XG5cdCAgICBzLmNvbG9yID0gY29sb3JzMFtjb3VudDAgJSBjb2xvcnMwLmxlbmd0aF07XG5cdCAgICBjb3VudDAgKz0gMTtcblx0fSBlbHNlIGlmIChzLmNvbG9yUGFsZXR0ZSA9PSAxKSB7XG5cdCAgICBzLmNvbG9yID0gY29sb3JzMVtjb3VudDEgJSBjb2xvcnMxLmxlbmd0aF07XG5cdCAgICBjb3VudDEgKz0gMTtcblx0fVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRNaW5NYXhZYXhpcyh5QXhpc0FycmF5LCBzZXJpZXNBcnJheSkge1xuICAgIGxldCB5QXhpc0FycmF5RGljdCA9IHt9O1xuICAgIGxldCBtaW5NYXhEaWN0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXNBcnJheS5sZW5ndGg7IGkrPSAxKSB7XG5cdGxldCBzID0gc2VyaWVzQXJyYXlbaV07XG5cdGxldCB5ID0geUF4aXNBcnJheVtpXTtcblx0bGV0IGlkID0geS5zZXJpZXNOYW1lO1xuXHRpZiAoeUF4aXNBcnJheURpY3RbaWRdID09IG51bGwpIHtcblx0ICAgIHlBeGlzQXJyYXlEaWN0W2lkXSA9IFtdO1xuXHQgICAgbWluTWF4RGljdFtpZF0gPSB7IG1pbjogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIG1heDogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIGludmVydF9kaXJlY3Rpb246IGZhbHNlIH07XG5cdH1cblx0eUF4aXNBcnJheURpY3RbaWRdLnB1c2goeSk7XG5cdGxldCBtaW5NYXggPSBtaW5NYXhEaWN0W2lkXTtcblx0cy5kYXRhLmZvckVhY2goKGQpID0+IHtcblx0ICAgIG1pbk1heC5tYXggPSBNYXRoLm1heChtaW5NYXgubWF4LCBkLnkpO1xuXHQgICAgbWluTWF4Lm1pbiA9IE1hdGgubWluKG1pbk1heC5taW4sIGQueSk7XG5cdH0pO1xuXHRtaW5NYXguaW52ZXJ0X2RpcmVjdGlvbiB8PSBzLmludmVydF9kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgbGV0IGZBZGRPclN1YnRyYWMzUGVyYyA9ICh4LCBpc0FkZCkgPT4ge1xuXHRpZiAoeCA9PSAwIHx8IHggPT0gbnVsbCB8fCB4ID09IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IHggPT0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpIHtcblx0ICAgIHJldHVybiAwO1xuXHR9XG5cdGxldCBvbmVQZXJjID0geCAvIDEwMCAqIDM7XG5cdGlmICgoaXNBZGQgJiYgeCA+IDApIHx8ICghaXNBZGQgJiYgeCA8IDApKSB7XG5cdCAgICByZXR1cm4geCArIG9uZVBlcmM7XG5cdH0gZWxzZSB7XG5cdCAgICByZXR1cm4geCAtIG9uZVBlcmM7XG5cdH1cbiAgICB9XG4gICAgZm9yIChsZXQgc05hbWUgaW4geUF4aXNBcnJheURpY3QpIHtcblx0bGV0IHlBcnJheSA9IHlBeGlzQXJyYXlEaWN0W3NOYW1lXTtcblx0bGV0IG1pbk1heCA9IG1pbk1heERpY3Rbc05hbWVdO1xuXHRtaW5NYXgubWluID0gZkFkZE9yU3VidHJhYzNQZXJjKG1pbk1heC5taW4sIGZhbHNlKTtcblx0bWluTWF4Lm1heCA9IGZBZGRPclN1YnRyYWMzUGVyYyhtaW5NYXgubWF4LCB0cnVlKTtcblx0XG5cdHlBcnJheS5mb3JFYWNoKCh5KSA9PiB7XG5cdCAgICBsZXQgbWluX2FicyA9IE1hdGguYWJzKG1pbk1heC5taW4pO1xuXHQgICAgbGV0IG1heF9hYnMgPSBNYXRoLmFicyhtaW5NYXgubWF4KTtcblx0ICAgIGlmIChtaW5fYWJzID4gbWF4X2Ficykge1xuXHQgICAgXHR5Lm1pbiA9IG1pbk1heC5taW47XG5cdCAgICBcdHkubWF4ID0gbWluX2Ficztcblx0ICAgIH0gZWxzZSBpZiAobWluX2FicyA8IG1heF9hYnMgJiYgbWluTWF4LmludmVydF9kaXJlY3Rpb24gPT0gdHJ1ZSkge1xuXHQgICAgXHR5Lm1pbiA9IC0xICogbWF4X2Ficztcblx0ICAgIFx0eS5tYXggPSBtaW5NYXgubWF4O1xuXHQgICAgfSBlbHNlIHtcblx0XHR5Lm1pbiA9IG1pbk1heC5taW47XG5cdFx0eS5tYXggPSBtaW5NYXgubWF4O1xuXHQgICAgfVxuXHR9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFlheGlzSW5BcGV4Rm9ybWF0KHNlcmllc0FwZXgsIHRzR3JvdXAsIHlheGlzRGljdCwgZm9ybWF0dGVyRGljdCkge1xuICAgIGxldCBtZXRyaWMgPSB0c0dyb3VwLm1ldHJpYztcbiAgICBsZXQgeWF4aXNJZCA9IGdldFlheGlzSWQobWV0cmljKTtcbiAgICBsZXQgaW52ZXJ0RGlyZWN0aW9uID0gZmFsc2U7XG4gICAgbGV0IGNvdW50WWF4aXNJZCA9IE9iamVjdC5rZXlzKHlheGlzRGljdCkubGVuZ3RoO1xuXG4gICAgbGV0IHlheGlzQXBleCA9IFtdOyAgICBcblxuICAgIGZvciAobGV0IG1kS2V5IGluIHRzR3JvdXAubWV0cmljLnRpbWVzZXJpZXMpIHtcblx0aW52ZXJ0RGlyZWN0aW9uIHw9IHRzR3JvdXAubWV0cmljLnRpbWVzZXJpZXNbbWRLZXldLmludmVydF9kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgc2VyaWVzQXBleC5mb3JFYWNoKChzKSA9PiB7XG5cdGxldCB5YXhpc1Nlcmllc05hbWUgPSB5YXhpc0RpY3RbeWF4aXNJZF07XG5cdGxldCBtYXggPSAwO1xuXHRsZXQgc2NhbGVGYWN0b3JJbmRleCA9IG51bGw7XG5cdGlmIChzLmRhdGEgIT0gbnVsbCkge1xuXHQgICAgLy8gY2FsY3VsYXRlIHNjYWxlRmFjdG9yIG9mIG1lYXN1cmVVbml0XG5cdCAgICAgbGV0IHZhbHVlcyA9IHMuZGF0YS5tYXAoKG8pID0+IHtcblx0XHRpZiAoby55ID09IG51bGwpIHsgcmV0dXJuIDA7IH1cblx0XHRyZXR1cm4gTWF0aC5hYnMoby55KTtcblx0ICAgICB9KTtcblx0ICAgIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlcyk7XG5cdCAgICBzY2FsZUZhY3RvckluZGV4ID0gZm9ybWF0dGVyVXRpbHMuZ2V0U2NhbGVGYWN0b3JJbmRleChtZXRyaWMubWVhc3VyZV91bml0LCBtYXgpO1xuXHR9XG5cdGlmICh5YXhpc1Nlcmllc05hbWUgPT0gbnVsbCkge1xuXHQgICAgZm9ybWF0dGVyRGljdFt5YXhpc0lkXSA9IHNjYWxlRmFjdG9ySW5kZXg7XG5cdCAgICBsZXQgeWF4aXMgPSB7XG5cdFx0c2VyaWVzTmFtZTogcy5uYW1lLFxuXHRcdHNob3c6IHRydWUsXG5cdFx0Ly9mb3JjZU5pY2VTY2FsZTogdHJ1ZSxcblx0XHRsYWJlbHM6IHtcblx0XHQgICAgLy8gZm9ybWF0dGVyOiBmb3JtYXR0ZXJEaWN0W3lheGlzSWRdLFxuXHRcdCAgICAvLyBtaW5XaWR0aDogNjAsXG5cdFx0ICAgICAvLyBtYXhXaWR0aDogNzUsXG5cdFx0ICAgIC8vIG9mZnNldFg6IC0yMCxcblx0XHR9LFxuXHRcdGF4aXNUaWNrczoge1xuXHRcdCAgICBzaG93OiB0cnVlXG5cdFx0fSxcblx0XHRheGlzQm9yZGVyOiB7XG5cdFx0ICAgIC8vIG9mZnNldFg6IDYwLFxuXHRcdCAgICBzaG93OiB0cnVlLFxuXHRcdH0sXG5cdFx0dGl0bGU6IHtcblx0XHQgICAgdGV4dDogZ2V0WWF4aXNOYW1lKHRzR3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCwgdHNHcm91cC5tZXRyaWMuc2NhbGUpLFxuXHRcdH0sXG5cdFx0b3Bwb3NpdGU6IChjb3VudFlheGlzSWQgJSAyKSA9PSAxLFxuXHQgICAgfTtcblx0ICAgIHlheGlzRGljdFt5YXhpc0lkXSA9IHlheGlzLnNlcmllc05hbWU7XG5cdCAgICB5YXhpc0FwZXgucHVzaCh5YXhpcyk7XG5cdH0gZWxzZSB7XG5cdCAgICB5YXhpc0FwZXgucHVzaCh7XG5cdFx0c2VyaWVzTmFtZTogeWF4aXNTZXJpZXNOYW1lLFxuXHRcdGxhYmVsczoge1xuXHRcdCAgICAvLyBmb3JtYXR0ZXI6IGZvcm1hdHRlckRpY3RbeWF4aXNJZF0sXG5cdFx0fSxcblx0XHRzaG93OiBmYWxzZSxcblx0ICAgIH0pO1xuXHR9XG5cdGZvcm1hdHRlckRpY3RbeWF4aXNJZF0gPSBNYXRoLm1heChmb3JtYXR0ZXJEaWN0W3lheGlzSWRdLCBzY2FsZUZhY3RvckluZGV4KTtcbiAgICB9KTtcbiAgICB5YXhpc0FwZXguZm9yRWFjaCgoeSkgPT4geS5sYWJlbHMuZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKG1ldHJpYy5tZWFzdXJlX3VuaXQsIGludmVydERpcmVjdGlvbiwgZm9ybWF0dGVyRGljdFt5YXhpc0lkXSkpO1xuICAgIHJldHVybiB5YXhpc0FwZXg7XG59XG5cbmNvbnN0IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW0gPSB7XG4gICcxX2NoYXJ0X3hfbWV0cmljJzogeyB2YWx1ZTogXCIxX2NoYXJ0X3hfbWV0cmljXCIsIGxhYmVsOiBpMThuKCdwYWdlX3N0YXRzLmxheW91dF8xX3Blcl8xJykgfSxcbiAgJzFfY2hhcnRfeF95YXhpcyc6IHsgdmFsdWU6IFwiMV9jaGFydF94X3lheGlzXCIsIGxhYmVsOiBpMThuKCdwYWdlX3N0YXRzLmxheW91dF8xX3Blcl95JykgfSxcbiAgJzFfY2hhcnQnOiB7IHZhbHVlOiBcIjFfY2hhcnRcIiwgbGFiZWw6IGkxOG4oJ3BhZ2Vfc3RhdHMubGF5b3V0XzFfcGVyX2FsbCcpIH0sXG59XG5cbmZ1bmN0aW9uIGdldEdyb3VwT3B0aW9uTW9kZShncm91cF9pZCkge1xuICByZXR1cm4gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtncm91cF9pZF0gfHwgbnVsbDtcbn07ICBcblxuZnVuY3Rpb24gdHNBcnJheVRvQXBleE9wdGlvbnNBcnJheSh0c09wdGlvbnNBcnJheSwgdHNHcnB1cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSkge1xuICAgIGlmIChncm91cHNPcHRpb25zTW9kZS52YWx1ZSA9PSBncm91cHNPcHRpb25zTW9kZXNFbnVtW1wiMV9jaGFydFwiXS52YWx1ZSkge1x0XG5cdGxldCBhcGV4T3B0aW9ucyA9IHRzQXJyYXlUb0FwZXhPcHRpb25zKHRzT3B0aW9uc0FycmF5LCB0c0dycHVwc0FycmF5LCB0c0NvbXBhcmUpO1xuXHRsZXQgYXBleE9wdGlvbnNBcnJheSA9IFthcGV4T3B0aW9uc107XG5cdHNldExlZnRQYWRkaW5nKGFwZXhPcHRpb25zQXJyYXkpO1xuXHRyZXR1cm4gYXBleE9wdGlvbnNBcnJheTtcbiAgICB9IGVsc2UgaWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfeWF4aXNcIl0udmFsdWUpIHtcblx0bGV0IHRzRGljdCA9IHt9O1xuXHR0c0dycHVwc0FycmF5LmZvckVhY2goKHRzR3JvdXAsIGkpID0+IHtcblx0ICAgIGxldCB5YXhpc0lkID0gZ2V0WWF4aXNJZCh0c0dyb3VwLm1ldHJpYyk7XG5cdCAgICBsZXQgdHNFbCA9IHt0c0dyb3VwLCB0c09wdGlvbnM6IHRzT3B0aW9uc0FycmF5W2ldfTtcblx0ICAgIGlmICh0c0RpY3RbeWF4aXNJZF0gPT0gbnVsbCkge1xuXHRcdHRzRGljdFt5YXhpc0lkXSA9IFt0c0VsXTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0dHNEaWN0W3lheGlzSWRdLnB1c2godHNFbCk7XG5cdCAgICB9XG5cdH0pO1x0XG5cdGxldCBhcGV4T3B0aW9uc0FycmF5ID0gW107XG5cdGZvciAobGV0IGtleSBpbiB0c0RpY3QpIHtcblx0ICAgIGxldCB0c0FycmF5ID0gdHNEaWN0W2tleV07XG5cdCAgICBsZXQgdHNPcHRpb25zQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c09wdGlvbnMpO1xuXHQgICAgbGV0IHRzR3JwdXBzQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c0dyb3VwKTtcblx0ICAgIGxldCBhcGV4T3B0aW9ucyA9IHRzQXJyYXlUb0FwZXhPcHRpb25zKHRzT3B0aW9uc0FycmF5MiwgdHNHcnB1cHNBcnJheTIsIHRzQ29tcGFyZSk7XG5cdCAgICBhcGV4T3B0aW9uc0FycmF5LnB1c2goYXBleE9wdGlvbnMpO1xuXHR9XG5cdHNldExlZnRQYWRkaW5nKGFwZXhPcHRpb25zQXJyYXkpO1xuXHRyZXR1cm4gYXBleE9wdGlvbnNBcnJheTtcbiAgICB9IGVsc2UgaWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfbWV0cmljXCJdLnZhbHVlKSB7XG5cdGxldCBhcGV4T3B0aW9uc0FycmF5ID0gW107XG5cdHRzT3B0aW9uc0FycmF5LmZvckVhY2goKHRzT3B0aW9ucywgaSkgPT4ge1xuXHQgICAgbGV0IGFwZXhPcHRpb25zID0gdHNBcnJheVRvQXBleE9wdGlvbnMoW3RzT3B0aW9uc10sIFt0c0dycHVwc0FycmF5W2ldXSwgdHNDb21wYXJlKTtcblx0ICAgIGFwZXhPcHRpb25zQXJyYXkucHVzaChhcGV4T3B0aW9ucyk7XHQgICAgXG5cdH0pO1xuXHRzZXRMZWZ0UGFkZGluZyhhcGV4T3B0aW9uc0FycmF5KTtcblx0cmV0dXJuIGFwZXhPcHRpb25zQXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gc2V0TGVmdFBhZGRpbmcoYXBleE9wdGlvbnNBcnJheSkge1xuICAgIC8vIGFwZXhPcHRpb25zLnlheGlzLmZpbHRlcigoeWF4aXMpID0+IHlheGlzLnNob3cpLmZvckVhY2goKHlheGlzKSA9PiB5YXhpc1xuICAgIGxldCBvbmVDaGFydCA9IGFwZXhPcHRpb25zQXJyYXkubGVuZ3RoID09IDE7XG4gICAgYXBleE9wdGlvbnNBcnJheS5mb3JFYWNoKChhcGV4T3B0aW9ucykgPT4ge1xuXHRpZiAoIW9uZUNoYXJ0KSB7XG5cdCAgICBhcGV4T3B0aW9ucy55YXhpcy5maWx0ZXIoKHlheGlzKSA9PiB5YXhpcy5zaG93KS5mb3JFYWNoKCh5YXhpcykgPT4ge1xuXHRcdHlheGlzLmxhYmVscy5taW5XaWR0aCA9IDYwO1xuXHQgICAgfSk7XG5cdH1cblx0aWYgKGFwZXhPcHRpb25zLnlheGlzLmxlbmd0aCA8IDIpIHtcblx0ICAgIHJldHVybjtcblx0fSAgICBcblx0YXBleE9wdGlvbnMueWF4aXMuZm9yRWFjaCgoeWF4aXMpID0+IHtcblx0ICAgIHlheGlzLmxhYmVscy5vZmZzZXRYID0gLTIwO1xuXHR9KTtcblx0YXBleE9wdGlvbnMuZ3JpZC5wYWRkaW5nLmxlZnQgPSAtNztcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdHNBcnJheVRvQXBleE9wdGlvbnModHNPcHRpb25zQXJyYXksIHRzR3JwdXBzQXJyYXksIHRzQ29tcGFyZSkge1xuICAgIGlmICh0c09wdGlvbnNBcnJheS5sZW5ndGggIT0gdHNHcnB1cHNBcnJheS5sZW5ndGgpIHtcblx0Y29uc29sZS5lcnJvcihgRXJyb3IgaW4gdGltZXNlcmllcy11dGlsczp0c0FycmF5VG9BcGV4T3B0aW9uczogdHNPcHRpb25zQXJyYXkgJHt0c09wdGlvbnNBcnJheX0gZGlmZmVyZW50IGxlbmd0aCBmcm9tIHRzR3JwdXBzQXJyYXkgJHt0c0dycHVwc0FycmF5fWApO1xuXHRyZXR1cm47XG4gICAgfVxuICAgIGxldCBzZXJpZXNBcnJheSA9IFtdO1xuICAgIGxldCB5YXhpc0FycmF5ID0gW107XG4gICAgbGV0IHlheGlzRGljdCA9IHt9O1xuICAgIGxldCBmb3JtYXR0ZXJEaWN0ID0ge307XG4gICAgbGV0IGFkZFNlcmllc05hbWVTb3VyY2UgPSBnZXRBZGRTZXJpZXNOYW1lU291cmNlKHRzR3JwdXBzQXJyYXkpO1xuICAgIGxldCBmb3JjZURyYXdUeXBlID0gbnVsbDtcbiAgICB0c09wdGlvbnNBcnJheS5mb3JFYWNoKCh0c09wdGlvbnMsIGkpID0+IHtcblx0bGV0IHRzR3JvdXAgPSB0c0dycHVwc0FycmF5W2ldO1xuXG5cdGlmIChpID4gMCkge1xuXHQgICAgZm9yY2VEcmF3VHlwZSA9IFwibGluZVwiO1xuXHR9XG5cdC8vIGdldCBzZXJpZXNEYXRhXG5cdGxldCBzZXJpZXNBcGV4ID0gZ2V0U2VyaWVzSW5BcGV4Rm9ybWF0KHRzT3B0aW9ucywgdHNHcm91cCwgdHJ1ZSwgZm9yY2VEcmF3VHlwZSwgdHNDb21wYXJlKTtcblxuXHRzZXJpZXNBcnJheSA9IHNlcmllc0FycmF5LmNvbmNhdChzZXJpZXNBcGV4KTtcblxuXHQvLyBnZXQgeWF4aXNcblx0bGV0IHlheGlzQXBleCA9IGdldFlheGlzSW5BcGV4Rm9ybWF0KHNlcmllc0FwZXgsIHRzR3JvdXAsIHlheGlzRGljdCwgZm9ybWF0dGVyRGljdCk7XG5cdHlheGlzQXJyYXkgPSB5YXhpc0FycmF5LmNvbmNhdCh5YXhpc0FwZXgpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IGNvbG9ycyBpbiBzZXJpZXNcbiAgICBzZXRTZXJpZXNDb2xvcnMyKHNlcmllc0FycmF5KTtcbiAgICBzZXRNaW5NYXhZYXhpcyh5YXhpc0FycmF5LCBzZXJpZXNBcnJheSk7XG4gICAgXG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IGJ1aWxkQ2hhcnRPcHRpb25zKHNlcmllc0FycmF5LCB5YXhpc0FycmF5KTsgICAgXG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbn1cblxuXG5mdW5jdGlvbiBidWlsZENoYXJ0T3B0aW9ucyhzZXJpZXNBcnJheSwgeWF4aXNBcnJheSkge1xuICAgIHJldHVybiB7XG5cdGNoYXJ0OiB7XG5cdCAgICBpZDogbnRvcG5nX3V0aWxpdHkuZ2V0X3JhbmRvbV9zdHJpbmcoKSxcblx0ICAgIGdyb3VwOiBcInRpbWVzZXJpZXNcIixcblx0ICAgIC8vIGhlaWdodDogMzAwLFxuXHR9LFxuXHRncmlkOiB7XG5cdCAgICBwYWRkaW5nOiB7XG5cdCAgICBcdC8vIGxlZnQ6IC04LFxuXHQgICAgfSxcblx0ICAgIHJvdzoge1xuXHRcdC8vIG9wYWNpdHk6IDEsXG5cdCAgICB9XG5cdH0sXG5cdGZpbGw6IHtcblx0ICAgIG9wYWNpdHk6IDAuOSxcblx0ICAgIHR5cGU6ICdzb2xpZCcsXG5cdCAgICBwYXR0ZXJuOiB7XG5cdFx0c3Ryb2tlV2lkdGg6IDEwLFxuXHQgICAgfSxcblx0fSxcblx0Ly8gZmlsbDoge1xuXHQgICAgXG5cdC8vIH1cblx0bWFya2Vyczoge1xuICAgICAgICAgICAgc2l6ZTogMi41LFxuXHQgICAgc3Ryb2tlV2lkdGg6IDEsXG5cdCAgICAvLyBmaWxsT3BhY2l0eTogMCxcblx0ICAgIC8vIHN0cm9rZUNvbG9yczogJyMwMDAnLFxuXHQgICAgLy8gY29sb3JzOiAnIzAwMCcsXG5cdCAgICBzdHJva2VDb2xvcnM6IHNlcmllc0FycmF5Lm1hcCgocykgPT4gcy5jb2xvciksXG5cdCAgICAvLyBjb2xvcnM6IG51bGwsXG5cdCAgICAvLyBzdHJva2VPcGFjaXR5OiAxLFxuXHR9LFxuXHRzdHJva2U6IHtcblx0ICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAvLyBjdXJ2ZTogJ3N0cmFpZ2h0Jyxcblx0ICAgIGxpbmVDYXA6ICdidXR0Jyxcblx0ICAgIHdpZHRoOiAzLFxuXHQgICAgZGFzaEFycmF5OiBzZXJpZXNBcnJheS5tYXAoKHMpID0+IHsgaWYgKHMuZGFzaGVkKSB7IHJldHVybiA0OyB9IHJldHVybiAwOyB9KSxcblx0fSxcblx0bGVnZW5kOiB7XG5cdCAgICBzaG93OiB0cnVlLFxuXHQgICAgc2hvd0ZvclNpbmdsZVNlcmllczogdHJ1ZSxcblx0ICAgIHBvc2l0aW9uOiBcInRvcFwiLFxuXHQgICAgaG9yaXpvbnRhbEFsaWduOiBcInJpZ2h0XCIsXG5cdCAgICBvbkl0ZW1DbGljazoge1xuXHRcdHRvZ2dsZURhdGFTZXJpZXM6IGZhbHNlLFxuXHQgICAgfSxcblx0fSxcblx0c2VyaWVzOiBzZXJpZXNBcnJheSxcblx0Ly8gY29sb3JzOiBjb2xvcnNJbnRlcnBvbGF0aW9uLnRyYW5zZm9ybUNvbG9ycyhjb2xvcnMpLFxuXHR5YXhpczogeWF4aXNBcnJheSxcblx0eGF4aXM6IHtcblx0ICAgIGxhYmVsczoge1xuXHRcdHNob3c6IHRydWUsXG5cdCAgICB9LFxuXHQgICAgYXhpc1RpY2tzOiB7XG5cdFx0c2hvdzogdHJ1ZSxcblx0ICAgIH0sXG5cdH0sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VHNRdWVyeSh0c0dyb3VwLCBub3RfbWV0cmljX3F1ZXJ5LCBlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KSB7XG4gICAgbGV0IHRzUXVlcnkgPSB0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdGlmIChlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0ICE9IG51bGwgJiYgIWVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Rbc291cmNlX2RlZi52YWx1ZV0pIHsgcmV0dXJuIG51bGw7IH1cblx0bGV0IHNvdXJjZV92YWx1ZSA9IHRzR3JvdXAuc291cmNlX2FycmF5W2ldLnZhbHVlO1xuXHRyZXR1cm4gYCR7c291cmNlX2RlZi52YWx1ZX06JHtzb3VyY2VfdmFsdWV9YDtcbiAgICB9KS5maWx0ZXIoKHMpID0+IHMgIT0gbnVsbCkuam9pbihcIixcIik7XG4gICAgXG4gICAgaWYgKCFub3RfbWV0cmljX3F1ZXJ5ICYmIHRzR3JvdXAubWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcblx0dHNRdWVyeSA9IGAke3RzUXVlcnl9LCR7dHNHcm91cC5tZXRyaWMucXVlcnl9YFxuICAgIH1cbiAgICByZXR1cm4gdHNRdWVyeTtcbn1cblxuZnVuY3Rpb24gZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzR3JvdXApIHtcbiAgICBsZXQgc291cmNlX2RlZl9hcnJheSA9IHRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0bGV0IHNvdXJjZV9kZWYgPSBzb3VyY2VfZGVmX2FycmF5W2ldO1xuXHRpZiAoc291cmNlX2RlZi5tYWluX3NvdXJjZV9kZWYgPT0gdHJ1ZSkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgICBcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VHNDaGFydHNPcHRpb25zKGh0dHBQcmVmaXgsIGVwb2NoU3RhdHVzLCB0c0NvbXBhcmUsIHRpbWVzZXJpZXNHcm91cHMsIGlzUHJvKSB7XG4gICAgbGV0IHBhcmFtc0Vwb2NoT2JqID0geyBlcG9jaF9iZWdpbjogZXBvY2hTdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hTdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgXG4gICAgbGV0IHRzQ2hhcnRzT3B0aW9ucztcbiAgICBpZiAoIWlzUHJvKSB7XG5cdGxldCB0c0RhdGFVcmwgPSBgJHtodHRwUHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90cy5sdWFgO1xuXHRsZXQgcGFyYW1zVXJsUmVxdWVzdCA9IGB0c19jb21wYXJlPSR7dHNDb21wYXJlfSZ2ZXJzaW9uPTQmem9vbT0ke3RzQ29tcGFyZX0maW5pdGlhbF9wb2ludD10cnVlJmxpbWl0PTE4MGA7XG5cdGxldCB0c0dyb3VwID0gdGltZXNlcmllc0dyb3Vwc1swXTtcblx0bGV0IG1haW5fc291cmNlX2luZGV4ID0gZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzR3JvdXApO1xuXHRsZXQgdHNRdWVyeSA9IGdldFRzUXVlcnkodHNHcm91cCk7XG5cdGxldCBwT2JqID0ge1xuXHQgICAgLi4ucGFyYW1zRXBvY2hPYmosXG5cdCAgICB0c19xdWVyeTogdHNRdWVyeSxcblx0ICAgIHRzX3NjaGVtYTogYCR7dHNHcm91cC5tZXRyaWMuc2NoZW1hfWAsXG5cdH07XG5cdGlmICghdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5W21haW5fc291cmNlX2luZGV4XS5kaXNhYmxlX3Rza2V5KSB7XG5cdCAgICBwT2JqLnRza2V5ID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLnZhbHVlO1xuXHR9XG5cdGxldCBwVXJsUmVxdWVzdCA9ICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwocE9iaiwgcGFyYW1zVXJsUmVxdWVzdCk7XG5cdGxldCB1cmwgPSBgJHt0c0RhdGFVcmx9PyR7cFVybFJlcXVlc3R9YDtcblx0bGV0IHRzQ2hhcnRPcHRpb24gPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcblx0dHNDaGFydHNPcHRpb25zID0gW3RzQ2hhcnRPcHRpb25dO1xuICAgIH0gZWxzZSB7XG5cdGxldCBwYXJhbXNDaGFydCA9IHtcblx0XHR6b29tOiB0c0NvbXBhcmUsXG5cdFx0aW5pdGlhbF9wb2ludDogdHJ1ZSxcblx0XHRsaW1pdDogMTgwLFxuXHRcdHZlcnNpb246IDQsXG5cdFx0dHNfY29tcGFyZTogdHNDb21wYXJlLFxuXHR9O1xuXHRsZXQgdHNSZXF1ZXN0cyA9IHRpbWVzZXJpZXNHcm91cHMubWFwKCh0c0dyb3VwKSA9PiB7XG5cdCAgICBsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdCAgICBsZXQgdHNRdWVyeSA9IGdldFRzUXVlcnkodHNHcm91cCk7XG5cdCAgICBsZXQgcE9iaiA9IHtcblx0XHR0c19xdWVyeTogdHNRdWVyeSxcblx0XHR0c19zY2hlbWE6IGAke3RzR3JvdXAubWV0cmljLnNjaGVtYX1gLFxuXHQgICAgfTtcblx0ICAgIGlmICghdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5W21haW5fc291cmNlX2luZGV4XS5kaXNhYmxlX3Rza2V5KSB7XG5cdFx0cE9iai50c2tleSA9IHRzR3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XS52YWx1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBwT2JqO1xuXHR9KTtcblx0bGV0IHRzRGF0YVVybE11bHRpID0gYCR7aHR0cFByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3RzX211bHRpLmx1YWA7XG5cdGxldCByZXEgPSB7IHRzX3JlcXVlc3RzOiB0c1JlcXVlc3RzLCAuLi5wYXJhbXNFcG9jaE9iaiwgLi4ucGFyYW1zQ2hhcnQgfTtcblx0bGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdH07XG5cdHRzQ2hhcnRzT3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh0c0RhdGFVcmxNdWx0aSwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxKX0pO1xuICAgIH1cbiAgICByZXR1cm4gdHNDaGFydHNPcHRpb25zO1xufVxuXG5jb25zdCB0aW1lc2VyaWVzVXRpbHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuXHRncm91cHNPcHRpb25zTW9kZXNFbnVtLFxuXHR0c1RvQXBleE9wdGlvbnMsXG5cdHRzQXJyYXlUb0FwZXhPcHRpb25zLFxuXHR0c0FycmF5VG9BcGV4T3B0aW9uc0FycmF5LFxuXHRnZXRHcm91cE9wdGlvbk1vZGUsXG5cdGdldFNlcmllSWQsXG5cdGdldFNlcmllTmFtZSxcblx0Z2V0VHNDaGFydHNPcHRpb25zLFxuXHRnZXRUc1F1ZXJ5LFxuXHRnZXRNYWluU291cmNlRGVmSW5kZXgsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgdGltZXNlcmllc1V0aWxzO1xuIiwiaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi9udG9wLXV0aWxzLmpzXCI7XG5cbmNvbnN0IFV0aWxzID0gTnRvcFV0aWxzO1xuZnVuY3Rpb24gZ2V0X2RhdGFfcGF0dGVybih0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0cmV0dXJuIGAuKmA7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwidmxhblwiKSB7XG5cdGxldCB2bGFuID0gU3RyaW5nLnJhd2BAKChbMS05XSl8KFsxLTldWzAtOV17MSwyfSl8KFsxLTNdWzAtOV17M30pfCg0MFswLThdWzAtOV0pfCg0MDlbMC01XSkpYDtcblx0cmV0dXJuIHZsYW47XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiaXBcIiB8fCB0eXBlID09IFwiY2lkclwiKSB7XG5cdGxldCB2bGFuID0gZ2V0X2RhdGFfcGF0dGVybihcInZsYW5cIik7XG5cdGxldCByX2lwdjQgPSBVdGlscy5SRUdFWEVTLmlwdjQ7XG5cdGxldCByX2lwdjRfdmxhbiA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBgJHt2bGFufSRgKTtcblx0bGV0IHJfaXB2NiA9IFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIGAke3ZsYW59JGApO1xuXHRpZiAodHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgbGV0IG5ldHdvcmtfaXB2NCA9IFN0cmluZy5yYXdgKFxcLygoWzEtOV0pfChbMS0yXVswLTldKXwoM1swLTJdKSkpYDtcblx0ICAgIGxldCBpcHY0X2NpZHIgPSByX2lwdjQucmVwbGFjZShcIiRcIiwgYCR7bmV0d29ya19pcHY0fSRgKTtcblx0ICAgIGxldCBpcHY0X2NpZHJfdmxhbiA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjR9JHt2bGFufSRgKTtcblx0ICAgIGxldCBuZXR3b3JrX2lwdjYgPSBTdHJpbmcucmF3YChcXC8oKFsxLTldKXwoWzEtOV1bMC05XSl8KDFbMC0xXVswLTldKXwoMTJbMC04XSkpKWA7XG5cdCAgICBsZXQgaXB2Nl9jaWRyID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIGAke25ldHdvcmtfaXB2Nn0kYCk7XG5cdCAgICBsZXQgaXB2Nl9jaWRyX3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7bmV0d29ya19pcHY2fSR7dmxhbn0kYCk7XG5cdCAgICByZXR1cm4gYCgke2lwdjRfY2lkcn18JHtpcHY0X2NpZHJfdmxhbn18JHtpcHY2X2NpZHJ9fCR7aXB2Nl9jaWRyX3ZsYW59KWA7XG5cdH1cblx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIm1hY1wiKSB7XG5cdHJldHVybiBVdGlscy5SRUdFWEVTW1wibWFjQWRkcmVzc1wiXTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJpcCxjaWRyXCIpIHtcblx0bGV0IGlwID0gZ2V0X2RhdGFfcGF0dGVybihcImlwXCIpO1xuXHRsZXQgY2lkciA9IGdldF9kYXRhX3BhdHRlcm4oXCJjaWRyXCIpO1xuXHRyZXR1cm4gYCgke2lwfSl8KCR7Y2lkcn0pYDtcbiAgICB9XG4gICAgcmV0dXJuIFV0aWxzLlJFR0VYRVNbdHlwZV07XG59XG5cbmNvbnN0IHJlZ2V4VmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdGdldF9kYXRhX3BhdHRlcm4sXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgcmVnZXhWYWxpZGF0aW9uO1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLnRpdGxlXCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdhZGQnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdhZGQnfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMuYWRkX3RpbWVzZXJpZXNcIil9fVxuXHQ8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdzZWxlY3QnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdzZWxlY3QnIH1cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1hbmFnZV90aW1lc2VyaWVzXCIpfX08L2E+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gICAgPCEtLSBhY3Rpb24gYWRkIC0tPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCI+XG4gICAgICA8IS0tIFNvdXJjZXMgVHlwZXMgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VfdHlwZVwiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zb3VyY2VfdHlwZSgpXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJzb3VyY2VzX3R5cGVzXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBTb3VyY2VzIC0tPlxuICAgICAgPGRpdiB2LWlmPVwiIWhpZGVfc291cmNlc1wiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbWItMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3cgXCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWxcIiA6dGl0bGU9XCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsXCIgc3R5bGU9XCJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7XCIgdHlwZT1cInRleHRcIiBkaXNhYmxlZD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG5cdDx0ZW1wbGF0ZSB2LWZvcj1cIihzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KSBpbiBzZWxlY3RlZF9zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5XCI+XG5cdCAgPCEtLSBzZWxlY3QgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLnNlbGVjdFwiIGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICAgIDxiPnt7c291cmNlX2RlZi5sYWJlbH19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCJcblx0XHRcdCAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKVwiXG5cdFx0XHQgICAgOm9wdGlvbnM9XCJzb3VyY2VzX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCI+XG5cdCAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gZW5kIHNlbGVjdCAtLT5cblxuXHQgIDwhLS0gaW5wdXQgdGV4dCAtLT5cblx0ICA8ZGl2IHYtaWY9XCJzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXRcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXQtMiByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgICA8Yj57e3NvdXJjZV9kZWYubGFiZWx9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgQGlucHV0PVwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSgpXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgOnBhdHRlcm49XCJzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlwiPlxuXHQgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gaW5wdXQgdGV4dCAtLT5cdCAgXG5cdDwvdGVtcGxhdGU+XG5cdFxuXHQ8ZGl2IHYtc2hvdz1cImVuYWJsZV9hcHBseV9zb3VyY2VcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IG10LTJcIiBzdHlsZT1cInRleHQtYWxpZ246ZW5kO1wiPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgIFx0ICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3NvdXJjZV9hcnJheVwiIDpkaXNhYmxlZD1cImVuYWJsZV9hcHBseV9zb3VyY2UgPT0gZmFsc2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFwcGx5X3NvdXJjZVwiKX19PC9idXR0b24+XG5cdCAgPC9kaXY+XHQgIFxuXHQ8L2Rpdj5cdFxuICAgICAgPC9kaXY+IDwhLS0gZW5kIFNvdXJjZXMgLS0+XG4gICAgICBcbiAgICAgIDwhLS0gTWV0cmljcyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1ldHJpY1wiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHJlZj1cInNlbGVjdF9zZWFyY2hfbWV0cmljc1wiXG5cdCAgXHRcdCAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQoKVwiXG5cdCAgXHRcdCAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIlxuXHQgIFx0XHQgIDpvcHRpb25zPVwibWV0cmljc1wiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgICBcblx0ICA8L2Rpdj5cdCAgXG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxMaXN0VGltZXNlcmllc1xuXHRpZD1cIlwiXG5cdDp0aXRsZT1cIl9pMThuKCdtb2RhbF90aW1lc2VyaWVzLnRpbWVzZXJpZXNfbGlzdCcpXCJcblx0di1tb2RlbDp0aW1lc2VyaWVzPVwidGltZXNlcmllc190b19hZGRcIj5cbiAgICAgIDwvTGlzdFRpbWVzZXJpZXM+ICAgICAgXG4gICAgPC90ZW1wbGF0ZT48IS0tIGFjdGlvbiA9PSBhZGQgLS0+XG5cbiAgICA8IS0tIGFjdGlvbiBzZWxlY3QtLT5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZFwiPlxuXHQ8TGlzdFRpbWVzZXJpZXNcblx0ICA6aWQ9XCJnZXRfdGltZXNlcmllc19ncm91cF9pZChpdGVtKVwiXG5cdCAgOnRpdGxlPVwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZShpdGVtKVwiXG5cdCAgdi1tb2RlbDp0aW1lc2VyaWVzPVwiaXRlbS50aW1lc2VyaWVzXCJcblx0ICA6c2hvd19kZWxldGVfYnV0dG9uPVwidGltZXNlcmllc19ncm91cHNfYWRkZWQubGVuZ3RoID4gMVwiXG5cdCAgQGRlbGV0ZV90cz1cImRlbGV0ZV90c1wiPlxuXHQ8L0xpc3RUaW1lc2VyaWVzPiAgICAgIFxuICAgICAgPC90ZW1wbGF0ZT48IS0tIHYtZm9yIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIC0tPlxuICAgIDwvdGVtcGxhdGU+PCEtLSBhY3Rpb24gPT0gc2VsZWN0IC0tPlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdi1zaG93PVwiYWN0aW9uID09ICdhZGQnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hZGRcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1zaG93PVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hcHBseVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExpc3RUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbGlzdC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNlbGVjdF9zZWFyY2hfbWV0cmljcyA9IHJlZihudWxsKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IGFjdGlvbiA9IHJlZihcInNlbGVjdFwiKTsgLy8gYWRkL3NlbGVjdCBcblxubGV0IGN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdHlwZSA9IHJlZihjdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUpO1xuXG5jb25zdCB1aV90eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnVpX3R5cGVzO1xuY29uc3Qgc291cmNlc19hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZXMsIGVhY2ggZWxlbWVudCBpcyB0aGUgc291cmNlcyBsaXN0IG9mIHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV1cbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZV92YWx1ZSBiaW5kaW5nIHdpdGggaW5wdXQgdGV4dFxuLy8gY29uc3Qgc3ViX3NvdXJjZXMgPSByZWYoW10pO1xuLy8gY29uc3Qgc2VsZWN0ZWRfc3ViX3NvdXJjZSA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsID0gcmVmKFwiXCIpO1xuY29uc3Qgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSA9IHJlZiAoW10pO1xuXG5jb25zdCBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBlbmFibGVfYXBwbHlfc291cmNlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9PSBmYWxzZSkge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgcmdfdGV4dCA9IHNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZ190ZXh0ID09IG51bGwpIHsgY29udGludWU7IH1cblx0bGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcblx0bGV0IHNvdXJjZV90ZXh0ID0gc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZWdleC50ZXN0KHNvdXJjZV90ZXh0KSA9PSBmYWxzZSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHR9XHRcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59KTtcbmNvbnN0IGhpZGVfc291cmNlcyA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IG1ldHJpY3MgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KTtcblxuY29uc3QgdGltZXNlcmllc19ncm91cHNfYWRkZWQgPSByZWYoW10pO1xuXG5jb25zdCB0aW1lc2VyaWVzX3RvX2FkZCA9IHJlZihbXSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FwcGx5J10pXG5cbmxldCB3YWl0X2luaXQgPSBudWxsO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzb3VyY2VzX3R5cGVzLmZvckVhY2goKHNvdXJjZV90eXBlKSA9PiB7XG5cdGxldCBzb3VyY2VfdHlwZV9lbmFibGVkID0gcHJvcHMuc291cmNlc190eXBlc19lbmFibGVkW3NvdXJjZV90eXBlLmlkXTtcblx0aWYgKHNvdXJjZV90eXBlX2VuYWJsZWQgPT0gbnVsbCB8fCBzb3VyY2VfdHlwZV9lbmFibGVkID09IGZhbHNlKSB7XG5cdCAgICBzb3VyY2VfdHlwZS5kaXNhYmxlZCA9IHRydWU7XG5cdH1cbiAgICB9KTsgICAgXG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICB3YWl0X2luaXQgPSBpbml0KCk7XG59KTtcblxuY29uc3Qgc2hvdyA9IGFzeW5jICh0aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgYXdhaXQgd2FpdF9pbml0O1xuICAgIGFjdGlvbi52YWx1ZSA9IFwic2VsZWN0XCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gY2hhbmdlX2FjdGlvbihhKSB7XG4gICAgYWN0aW9uLnZhbHVlID0gYTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3NvdXJjZV90eXBlKCkge1xuICAgIGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID0gZmFsc2U7XG4gICAgc2V0X3JlZ2V4KCk7XG4gICAgc2V0X2hpZGVfc291cmNlcygpO1xuICAgIGF3YWl0IHNldF9zb3VyY2VzX2FycmF5KCk7XG4gICAgYXdhaXQgc2V0X21ldHJpY3MoKTtcbn1cblxuZnVuY3Rpb24gc2V0X2hpZGVfc291cmNlcygpIHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZTtcbiAgICBoaWRlX3NvdXJjZXMudmFsdWUgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc2QpID0+IHNkLnVpX3R5cGUgPT0gdWlfdHlwZXMuaGlkZSkuZXZlcnkoKGhpZGUpID0+IGhpZGUgPT0gdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5X3NvdXJjZV9hcnJheSgpIHtcbiAgICBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9IGZhbHNlO1xuICAgIHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5LnZhbHVlLmZvckVhY2goKHNvdXJjZV92YWx1ZSwgaSkgPT4ge1xuXHRsZXQgc291cmNlX2RlZiA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdGlmIChzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXQpIHtcblx0ICAgIGxldCBzb3VyY2UgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWVbaV07XG5cdCAgICBzb3VyY2UudmFsdWUgPSBzb3VyY2VfdmFsdWU7XG5cdCAgICBzb3VyY2UubGFiZWwgPSBzb3VyY2VfdmFsdWU7XG5cdH1cbiAgICB9KTsgICAgXG4gICAgYXdhaXQgY2hhbmdlX3NvdXJjZV9hcnJheSgpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfYXJyYXkoKSB7ICAgIFxuICAgIGF3YWl0IHNldF9tZXRyaWNzKCk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKSB7XG4gICAgaXNfc2VsZWN0ZWRfc291cmNlX2NoYW5nZWQudmFsdWUgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVnZXgoKSB7XG4gICAgbGV0IHJlZ2V4X3NvdXJjZV9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlPy5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX2RlZi5yZWdleF90eXBlKTtcbiAgICBpZiAocmVnZXhfc291cmNlX2FycmF5ID09IG51bGwpIHsgcmVnZXhfc291cmNlX2FycmF5ID0gW107IH1cbiAgICBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5LnZhbHVlID0gcmVnZXhfc291cmNlX2FycmF5Lm1hcCgocmVnZXhfc291cmNlKSA9PiB7XG5cdGlmIChyZWdleF9zb3VyY2UgPT0gbnVsbCkgeyByZXR1cm4gIG51bGw7IH1cblx0cmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHJlZ2V4X3NvdXJjZSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCkge1xuICAgIGxldCBzb3VyY2VfbGFiZWxfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUuZmlsdGVyKChzb3VyY2UpID0+IHNvdXJjZS5sYWJlbCAhPSBudWxsICYmIHNvdXJjZS5sYWJlbCAhPSBcIlwiKS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLmxhYmVsKTtcbiAgICBsZXQgbGFiZWwgPSBzb3VyY2VfbGFiZWxfYXJyYXkuam9pbihcIiAtIFwiKTtcbiAgICByZXR1cm4gYCR7bGFiZWx9YDtcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKSB7XG4gICAgc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbC52YWx1ZSA9IGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zb3VyY2VzX2FycmF5KCkge1xuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlc19hcnJheV90ZW1wID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBzb3VyY2VzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZXMoaHR0cF9wcmVmaXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLmlkLCBzb3VyY2VfZGVmX2FycmF5W2ldKTtcblx0c291cmNlc19hcnJheV90ZW1wLnB1c2goc291cmNlcyk7XG4gICAgfVxuICAgIGxldCBkZWZhdWx0X3NvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUpO1xuICAgIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSA9IGRlZmF1bHRfc291cmNlX2FycmF5O1xuICAgIHNvdXJjZXNfYXJyYXkudmFsdWUgPSBzb3VyY2VzX2FycmF5X3RlbXA7XG4gICAgc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWUgPSBkZWZhdWx0X3NvdXJjZV9hcnJheS5tYXAoKHMpID0+IHMudmFsdWUpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9tZXRyaWNzKCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSk7XG4gICAgbWV0cmljcy52YWx1ZS5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpO1xuICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhd2FpdCBjaGFuZ2Vfc291cmNlX3R5cGUoKTtcbiAgICAvLyB0YWtlIGRlZmF1bHQgdmlzaWJsZVxuICAgIHVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZChmYWxzZSk7XG4gICAgLy9lbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKGRlZmF1bHRfY29uZmlnKSB7XG4gICAgdGltZXNlcmllc190b19hZGQudmFsdWUgPSBbXTtcbiAgICBsZXQgdGltZXNlcmllcyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS50aW1lc2VyaWVzO1xuICAgIGZvciAobGV0IHRzX2lkIGluIHRpbWVzZXJpZXMpIHtcbiAgICBcdHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlLnB1c2goe1xuICAgIFx0ICAgIGlkOiB0c19pZCxcbiAgICBcdCAgICBsYWJlbDogdGltZXNlcmllc1t0c19pZF0ubGFiZWwsXG4gICAgXHQgICAgcmF3OiB0cnVlLFxuXHQgICAgcGFzdDogZmFsc2UsXG4gICAgXHQgICAgYXZnOiBmYWxzZSxcbiAgICBcdCAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICBcdH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSh0c19ncm91cCkge1xuICAgIGxldCBzb3VyY2VfdHlwZV9uYW1lID0gdHNfZ3JvdXAuc291cmNlX3R5cGUubGFiZWw7XG4gICAgbGV0IHNvdXJjZV9kZWZfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdO1xuICAgIGxldCBzb3VyY2VfbmFtZSA9IHNvdXJjZS5sYWJlbDtcbiAgICBsZXQgbWV0cmljX25hbWUgPSB0c19ncm91cC5tZXRyaWMubGFiZWw7XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX25hbWV9IC0gJHtzb3VyY2VfbmFtZX0gLSAke21ldHJpY19uYW1lfWA7XG59XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYztcbiAgICBpZiAodHNfZ3JvdXAgPT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlO1xuXHRzb3VyY2VfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWU7XG5cdG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHRzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHRzb3VyY2VfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXk7XG5cdG1ldHJpYyA9IHRzX2dyb3VwLm1ldHJpYztcbiAgICB9XG4gICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgcmV0dXJuIGlkO1xufVxuXG5jb25zdCBkZWxldGVfdHMgPSAodHNfZ3JvdXBfaWQpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlLmZpbHRlcigodHNfZ3JvdXApID0+IGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSAhPSB0c19ncm91cF9pZCk7XG59O1xuXG5jb25zdCBzZXRfdGltZXNlcmllc19ncm91cHMgPSAodGltZXNlcmllc19ncm91cHMsIGVtaXRfYXBwbHkpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzO1xuICAgIGlmIChlbWl0X2FwcGx5KSB7XG5cdGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIH1cbn07XG5cbmNvbnN0IGFkZF90c19ncm91cCA9ICh0c19ncm91cF90b19hZGQsIGVtaXRfYXBwbHkpID0+IHtcbiAgICBsZXQgdHNfZ3JvdXBfaW5kZXggPSB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZS5maW5kSW5kZXgoKHRzX2dyb3VwKSA9PiB0c19ncm91cC5pZCA9PSB0c19ncm91cF90b19hZGQuaWQpO1xuICAgIGlmICh0c19ncm91cF9pbmRleCA8IDApIHtcblx0dGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUucHVzaCh0c19ncm91cF90b19hZGQpO1xuICAgIH0gZWxzZSB7XG5cdHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlW3RzX2dyb3VwX2luZGV4XSA9IHRzX2dyb3VwX3RvX2FkZDtcbiAgICB9XG5cbiAgICBpZiAoZW1pdF9hcHBseSkge1xuXHRlbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHBseSA9ICgpID0+IHtcbiAgICBpZiAoYWN0aW9uLnZhbHVlID09IFwiYWRkXCIpIHtcblx0bGV0IHRzX2dyb3VwX2lkID0gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQoKTtcblx0bGV0IHRzX2dyb3VwID0ge1xuXHQgICAgaWQ6IHRzX2dyb3VwX2lkLFxuXHQgICAgc291cmNlX3R5cGU6IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLFxuXHQgICAgc291cmNlX2FycmF5OiBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUsXG5cdCAgICBtZXRyaWM6IHNlbGVjdGVkX21ldHJpYy52YWx1ZSxcblx0ICAgIHRpbWVzZXJpZXM6IG50b3BuZ191dGlsaXR5LmNsb25lKHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlKSxcblx0fTtcblx0YWRkX3RzX2dyb3VwKHRzX2dyb3VwKTtcbiAgICB9XG4gICAgZW1pdCgnYXBwbHknLCB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UsIGFkZF90c19ncm91cCwgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG5cbi5jdXN0b20tbWFyZ2luIHtcbm1hcmdpbi1sZWZ0OiAtMC40cmVtO1xufVxuLndhcm4ge1xuYm9yZGVyLWNvbG9yOiAjZmZkNTAwO1xuYm9yZGVyLXN0eWxlOiBzb2xpZDtcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48bW9kYWwgOmlkPVwiaWRfbW9kYWxcIiBAYXBwbHk9XCJhcHBseVwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2V4dHJhY3QnKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgdi1odG1sPVwiZGVzY3JpcHRpb25cIj48L2Rpdj5cbiAgICA8Zm9ybSBzdHlsZT1cImhlaWdodDo5NSU7XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlx0XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0zIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X2hpZGVfbWVudVwiPnt7aTE4bignYWR2YW5jZWQnKX19PGkgOmNsYXNzPVwieyAnZmFzIGZhLWNhcmV0LWRvd24nOiBzaG93X21lbnUsICdmYXMgZmEtY2FyZXQtdXAnOiAhc2hvd19tZW51fVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblx0ICBcblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC05IHRleHQtcmlnaHQgYXNkXCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxcmVtO1wiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiAgdmFsdWU9XCJ0cnVlXCIgY2hlY2tlZD1cIlwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rfbm93Jyl9fSA8L2xhYmVsPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiIHZhbHVlPVwiZmFsc2VcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5xdWV1ZV9hc19qb2InKX19IDwvbGFiZWw+XG5cdCAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXHRcbiAgICAgICAgPGRpdiB2LXNob3c9XCJzaG93X21lbnVcIiBjbGFzcz1cInJvd1wiIGlkPVwicGNhcERvd25sb2FkTW9kYWxfYWR2YW5jZWRcIiBzdHlsZT1cIlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTEyIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJyPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2JwZicpfX0gPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3d3dy5udG9wLm9yZy9ndWlkZXMvbjJkaXNrL2ZpbHRlcnMuaHRtbFwiPjxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsdGVyXCI+PC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJicGZfZmlsdGVyXCIgdi1tb2RlbD1cImJwZl9maWx0ZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIGRhdGEtYnBmPVwiYnBmXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgc3BlbGxjaGVjaz1cImZhbHNlXCI+XG4gICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cImludmFsaWRfYnBmXCIgc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7ZGlzcGxheTpibG9jaztcIiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2sgXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXHQgICAgPGJyPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2V4YW1wbGVzJyl9fTo8L2xhYmVsPlxuXHQgICAgPGJyPlxuXHQgICAgPHVsPlxuXHQgICAgICA8bGk+SG9zdDogPGk+aG9zdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+SFRUUDogPGk+dGNwIGFuZCBwb3J0IDgwPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGJldHdlZW4gaG9zdHM6IDxpPmlwIGhvc3QgMTkyLjE2OC4xLjEgYW5kIDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGZyb20gYW4gaG9zdCB0byBhbm90aGVyOiA8aT5pcCBzcmMgMTkyLjE2OC4xLjEgYW5kIGRzdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cdFxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT4gIFxuPC9tb2RhbD4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgdXBkYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBkZXNjcmlwdGlvbjogXCJcIixcblx0ICAgIGludmFsaWRfYnBmOiBmYWxzZSxcblx0ICAgIGJwZl9maWx0ZXI6IFwiXCIsXG5cdCAgICBleHRyYWN0X25vdzogdHJ1ZSxcblx0ICAgIHNob3dfbWVudTogdHJ1ZSxcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHBhZDJfbnVtYmVyOiBmdW5jdGlvbihudW1iZXIpIHtcblx0ICAgIHJldHVybiBTdHJpbmcobnVtYmVyKS5wYWRTdGFydCgyLCAnMCcpO1xuXHR9LFxuXHRmb3JtYXRfZGF0ZTogZnVuY3Rpb24oZCkge1xuXHQgICAgLy8gbGV0IGRheSA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXREYXRlKCkpO1xuXHQgICAgLy8gbGV0IG1vbnRoID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1vbnRoKCkpO1xuXHQgICAgLy8gbGV0IGhvdXJzID0gdGhpcy5wYWQyX251bWJlcihkLmdldEhvdXJzKCkpO1xuXHQgICAgLy8gbGV0IG1pbnV0ZXMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TWludXRlcygpKTtcblx0ICAgIC8vIGxldCBzID0gYCR7ZGF5fS8ke21vbnRofS8ke2QuZ2V0RnVsbFllYXIoKX0gJHtob3Vyc306JHttaW51dGVzfWA7XG5cdCAgICBsZXQgZF9tcyA9IGQudmFsdWVPZigpO1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChkX21zKTtcblx0fSxcblx0YXBwbHk6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMuYnBmX2ZpbHRlciAhPSBudWxsICYmIHRoaXMuYnBmX2ZpbHRlciAhPSBcIlwiKSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGVjay9maWx0ZXIubHVhP3F1ZXJ5PSR7dGhpcy5icGZfZmlsdGVyfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdHRoaXMuaW52YWxpZF9icGYgPSAhcmVzLnJlc3BvbnNlO1xuXHRcdGlmICh0aGlzLmludmFsaWRfYnBmID09IHRydWUpIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cdFx0XG5cdCAgICB9XG5cdCAgICBsZXQgdXJsX3JlcXVlc3Rfb2JqID0ge1xuXHRcdGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcblx0XHRlcG9jaF9iZWdpbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSxcblx0XHRlcG9jaF9lbmQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpLFxuXHRcdGJwZl9maWx0ZXI6IHRoaXMuYnBmX2ZpbHRlcixcblx0ICAgIH07XG5cdCAgICBsZXQgdXJsX3JlcXVlc3RfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9yZXF1ZXN0X29iaik7XG5cdCAgICBpZiAodGhpcy5leHRyYWN0X25vdyA9PSB0cnVlKSB7XG5cdFx0XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9wY2FwL2xpdmVfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHR3aW5kb3cub3Blbih1cmxfcmVxdWVzdCwgJ19zZWxmJywgZmFsc2UpO1xuXHQgICAgfSBlbHNlIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3RyYWZmaWNfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdGxldCBqb2JfaWQgPSByZXNwLmlkO1xuXHRcdC8vbGV0IGpvYl9pZCA9IDI7XG5cdFx0bGV0IGFsZXJ0X3RleHRfaHRtbCA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rpb25fc2NoZWR1bGVkJyk7XG5cdFx0bGV0IHBhZ2VfbmFtZSA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnRyYWZmaWNfZXh0cmFjdGlvbl9qb2JzJyk7XG5cdFx0bGV0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIik7XG5cdFx0bGV0IGhyZWYgPSBgPGEgaHJlZj1cIi9sdWEvaWZfc3RhdHMubHVhP2lmaWQ9JHtpZmlkfSZwYWdlPXRyYWZmaWNfcmVjb3JkaW5nJnRhYj1qb2JzJmpvYl9pZD0ke2pvYl9pZH1cIj4ke3BhZ2VfbmFtZX08L2E+YDsgXG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYWxlcnRfdGV4dF9odG1sLnJlcGxhY2UoJyV7cGFnZX0nLCBocmVmKTtcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBgJHthbGVydF90ZXh0X2h0bWx9ICR7am9iX2lkfWA7XG5cdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBhbGVydF90ZXh0X2h0bWwsIHR5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiIH0pO1xuXHQgICAgfVxuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdH0sXG5cdHNob3c6IGFzeW5jIGZ1bmN0aW9uKGJwZl9maWx0ZXIpIHtcblx0ICAgIGlmIChicGZfZmlsdGVyID09IG51bGwpIHtcblx0XHRsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHRcdGlmIChyZXMgPT0gbnVsbCB8fCByZXMuYnBmID09IG51bGwpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihgbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiAke3VybF9yZXF1ZXN0fSByZXR1cm4gbnVsbCB2YWx1ZWApO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgfVxuXHQgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdCAgICBpZiAoc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwgfHwgc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsKSB7XG5cdFx0Y29uc29sZS5lcnJvcihcIm1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogZXBvY2hfYmVnaW4gYW5kIGVwb2NoX2VuZCB1bmRlZmluZWQgaW4gdXJsXCIpO1xuXHRcdHJldHVybjtcblx0ICAgIH1cblx0ICAgIGxldCBkYXRlX2JlZ2luID0gbmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCk7XG5cdCAgICBsZXQgZGF0ZV9lbmQgPSBuZXcgRGF0ZShzdGF0dXMuZXBvY2hfZW5kICogMTAwMCk7XG5cdCAgICBcblx0ICAgIGxldCBkZXNjID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuYWJvdXRfdG9fZG93bmxvYWRfZmxvdycpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2JlZ2lufScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9iZWdpbikpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2VuZH0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfZW5kKSk7XG5cdCAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzYztcblx0ICAgIFxuXHQgICAgLy8gbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIC8vIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHQgICAgLy8gbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdCAgICAvLyB0aGlzLmJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgdGhpcy5icGZfZmlsdGVyID0gYnBmX2ZpbHRlcjtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHNob3dfaGlkZV9tZW51OiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19tZW51ID0gIXRoaXMuc2hvd19tZW51O1xuXHR9LFxuICAgIH0sXG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgQGFwcGx5PVwiYXBwbHlcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9leHRyYWN0Jyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIHYtaHRtbD1cImRlc2NyaXB0aW9uXCI+PC9kaXY+XG4gICAgPGZvcm0gc3R5bGU9XCJoZWlnaHQ6OTUlO1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cdFxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMyBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19oaWRlX21lbnVcIj57e2kxOG4oJ2FkdmFuY2VkJyl9fTxpIDpjbGFzcz1cInsgJ2ZhcyBmYS1jYXJldC1kb3duJzogc2hvd19tZW51LCAnZmFzIGZhLWNhcmV0LXVwJzogIXNob3dfbWVudX1cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cdCAgXG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtOSB0ZXh0LXJpZ2h0IGFzZFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMXJlbTtcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgIHZhbHVlPVwidHJ1ZVwiIGNoZWNrZWQ9XCJcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0X25vdycpfX0gPC9sYWJlbD5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiB2YWx1ZT1cImZhbHNlXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucXVldWVfYXNfam9iJyl9fSA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblx0XG4gICAgICAgIDxkaXYgdi1zaG93PVwic2hvd19tZW51XCIgY2xhc3M9XCJyb3dcIiBpZD1cInBjYXBEb3dubG9hZE1vZGFsX2FkdmFuY2VkXCIgc3R5bGU9XCJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0xMiBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxicj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9icGYnKX19IDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL24yZGlzay9maWx0ZXJzLmh0bWxcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZpbHRlclwiPjwvc3Bhbj48L3NwYW4+XG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYnBmX2ZpbHRlclwiIHYtbW9kZWw9XCJicGZfZmlsdGVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBkYXRhLWJwZj1cImJwZlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJpbnZhbGlkX2JwZlwiIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO2Rpc3BsYXk6YmxvY2s7XCIgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrIFwiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICAgIDxicj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9leGFtcGxlcycpfX06PC9sYWJlbD5cblx0ICAgIDxicj5cblx0ICAgIDx1bD5cblx0ICAgICAgPGxpPkhvc3Q6IDxpPmhvc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPkhUVFA6IDxpPnRjcCBhbmQgcG9ydCA4MDwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBiZXR3ZWVuIGhvc3RzOiA8aT5pcCBob3N0IDE5Mi4xNjguMS4xIGFuZCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBmcm9tIGFuIGhvc3QgdG8gYW5vdGhlcjogPGk+aXAgc3JjIDE5Mi4xNjguMS4xIGFuZCBkc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXHRcbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+ICBcbjwvbW9kYWw+ICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgZGVzY3JpcHRpb246IFwiXCIsXG5cdCAgICBpbnZhbGlkX2JwZjogZmFsc2UsXG5cdCAgICBicGZfZmlsdGVyOiBcIlwiLFxuXHQgICAgZXh0cmFjdF9ub3c6IHRydWUsXG5cdCAgICBzaG93X21lbnU6IHRydWUsXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRwYWQyX251bWJlcjogZnVuY3Rpb24obnVtYmVyKSB7XG5cdCAgICByZXR1cm4gU3RyaW5nKG51bWJlcikucGFkU3RhcnQoMiwgJzAnKTtcblx0fSxcblx0Zm9ybWF0X2RhdGU6IGZ1bmN0aW9uKGQpIHtcblx0ICAgIC8vIGxldCBkYXkgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0RGF0ZSgpKTtcblx0ICAgIC8vIGxldCBtb250aCA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNb250aCgpKTtcblx0ICAgIC8vIGxldCBob3VycyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRIb3VycygpKTtcblx0ICAgIC8vIGxldCBtaW51dGVzID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1pbnV0ZXMoKSk7XG5cdCAgICAvLyBsZXQgcyA9IGAke2RheX0vJHttb250aH0vJHtkLmdldEZ1bGxZZWFyKCl9ICR7aG91cnN9OiR7bWludXRlc31gO1xuXHQgICAgbGV0IGRfbXMgPSBkLnZhbHVlT2YoKTtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZF9tcyk7XG5cdH0sXG5cdGFwcGx5OiBhc3luYyBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmJwZl9maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLmJwZl9maWx0ZXIgIT0gXCJcIikge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YT9xdWVyeT0ke3RoaXMuYnBmX2ZpbHRlcn1gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHR0aGlzLmludmFsaWRfYnBmID0gIXJlcy5yZXNwb25zZTtcblx0XHRpZiAodGhpcy5pbnZhbGlkX2JwZiA9PSB0cnVlKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XHRcdFxuXHQgICAgfVxuXHQgICAgbGV0IHVybF9yZXF1ZXN0X29iaiA9IHtcblx0XHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG5cdFx0ZXBvY2hfYmVnaW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIiksXG5cdFx0ZXBvY2hfZW5kOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSxcblx0XHRicGZfZmlsdGVyOiB0aGlzLmJwZl9maWx0ZXIsXG5cdCAgICB9O1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0X3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcmVxdWVzdF9vYmopO1xuXHQgICAgaWYgKHRoaXMuZXh0cmFjdF9ub3cgPT0gdHJ1ZSkge1xuXHRcdFxuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvcGNhcC9saXZlX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0d2luZG93Lm9wZW4odXJsX3JlcXVlc3QsICdfc2VsZicsIGZhbHNlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS90cmFmZmljX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0bGV0IHJlc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHRsZXQgam9iX2lkID0gcmVzcC5pZDtcblx0XHQvL2xldCBqb2JfaWQgPSAyO1xuXHRcdGxldCBhbGVydF90ZXh0X2h0bWwgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0aW9uX3NjaGVkdWxlZCcpO1xuXHRcdGxldCBwYWdlX25hbWUgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy50cmFmZmljX2V4dHJhY3Rpb25fam9icycpO1xuXHRcdGxldCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpO1xuXHRcdGxldCBocmVmID0gYDxhIGhyZWY9XCIvbHVhL2lmX3N0YXRzLmx1YT9pZmlkPSR7aWZpZH0mcGFnZT10cmFmZmljX3JlY29yZGluZyZ0YWI9am9icyZqb2JfaWQ9JHtqb2JfaWR9XCI+JHtwYWdlX25hbWV9PC9hPmA7IFxuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGFsZXJ0X3RleHRfaHRtbC5yZXBsYWNlKCcle3BhZ2V9JywgaHJlZik7XG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYCR7YWxlcnRfdGV4dF9odG1sfSAke2pvYl9pZH1gO1xuXHRcdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCB7IHRleHRfaHRtbDogYWxlcnRfdGV4dF9odG1sLCB0eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIiB9KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHR9LFxuXHRzaG93OiBhc3luYyBmdW5jdGlvbihicGZfZmlsdGVyKSB7XG5cdCAgICBpZiAoYnBmX2ZpbHRlciA9PSBudWxsKSB7XG5cdFx0bGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0XHRpZiAocmVzID09IG51bGwgfHwgcmVzLmJwZiA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYG1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogJHt1cmxfcmVxdWVzdH0gcmV0dXJuIG51bGwgdmFsdWVgKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRicGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIH1cblx0ICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHQgICAgaWYgKHN0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsIHx8IHN0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246IGVwb2NoX2JlZ2luIGFuZCBlcG9jaF9lbmQgdW5kZWZpbmVkIGluIHVybFwiKTtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBsZXQgZGF0ZV9iZWdpbiA9IG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApO1xuXHQgICAgbGV0IGRhdGVfZW5kID0gbmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApO1xuXHQgICAgXG5cdCAgICBsZXQgZGVzYyA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmFib3V0X3RvX2Rvd25sb2FkX2Zsb3cnKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9iZWdpbn0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfYmVnaW4pKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9lbmR9JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2VuZCkpO1xuXHQgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2M7XG5cdCAgICBcblx0ICAgIC8vIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICAvLyBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIC8vIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHQgICAgLy8gdGhpcy5icGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIHRoaXMuYnBmX2ZpbHRlciA9IGJwZl9maWx0ZXI7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRzaG93X2hpZGVfbWVudTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfbWVudSA9ICF0aGlzLnNob3dfbWVudTtcblx0fSxcbiAgICB9LFxufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e3Byb3BzLnRpdGxlfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG10LTIgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcIm1vZGFsX2Rvd25sb2FkX2ZpbGUuZmlsZW5hbWVcIil9fTo8L2I+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG5cdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHJlcXVpcmVkIDpwYXR0ZXJuPVwiZmlsZW5hbWVfdmFsaWRhdGlvblwiIHYtbW9kZWw9XCJmaWxlbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJcIj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cblx0Lnt7cHJvcHMuZXh0fX1cbiAgICAgIDwvbGFiZWw+XG4gICAgPC9kaXY+ICAgIFxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCJlbmFibGVfZG93bmxvYWQgPT0gZmFsc2VcIiA+e3tfaTE4bihcIm1vZGFsX2Rvd25sb2FkX2ZpbGUuZG93bmxvYWRcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGZpbGVuYW1lID0gcmVmKFwiXCIpO1xuXG4vL2NvbnN0IGZpbGVuYW1lX3ZhbGlkYXRpb24gPSBgW1xcYH4hQCMkJV4mKl98Ky09Pzs6J1wiLC48Pnt9W11cXFxcL11gO1xuY29uc3QgYmFja3RpY2sgPSAnYCc7XG5jb25zdCBmaWxlbmFtZV92YWxpZGF0aW9uID0gU3RyaW5nLnJhd2BeW15+JHtiYWNrdGlja30hQCMkJV4mKnwrLT0/OzonXCJcXFxcLC48PlxcL3t9KClcXFtcXF1cXHNdKyRgO1xuXG5jb25zdCBlbmFibGVfZG93bmxvYWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJnX3RleHQgPSBmaWxlbmFtZV92YWxpZGF0aW9uO1xuICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmdfdGV4dCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZW5hbWUudmFsdWUpO1xufSk7XG5cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBleHQ6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZG93bmxvYWRcIl0pO1xuXG5jb25zdCBzaG93ID0gKG5hbWUpID0+IHtcbiAgICBpZiAobmFtZSA9PSBudWxsKSB7IG5hbWUgPSBcIlwiOyB9XG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgvWy09Pzs6XFxzXS9nLCBcIl9cIik7XG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgvW2B+IUAjJCVeJip8Ky09Pzs6J1wiLFxcLjw+XFxzXFwve31cXFtcXF0oKV0vZywgXCJcIik7XG4gICAgZmlsZW5hbWUudmFsdWUgPSBuYW1lO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICAgIGxldCBuYW1lID0gYCR7ZmlsZW5hbWUudmFsdWV9LiR7cHJvcHMuZXh0fWA7XG4gICAgZW1pdCgnZG93bmxvYWQnLCBuYW1lKTtcbiAgICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiIHYtaWY9XCJzaG93X2FsZXJ0ID09IHRydWVcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCIgOmNsYXNzPVwiYWxlcnRfdHlwZVwiPlxuICA8c3BhbiB2LWh0bWw9XCJib2R5XCI+PC9zcGFuPlxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0bi1jbG9zZVwiICBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGdsb2JhbDogQm9vbGVhblxuICAgIH0sXG4gICAgZW1pdHM6IFtdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIHNob3dfYWxlcnQ6IGZhbHNlLFxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBib2R5OiBcIlwiLFxuXHQgICAgYWxlcnRfdHlwZTogXCJhbGVydC1zdWNjZXNzXCIsXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRpZiAodGhpcy5nbG9iYWwgPT0gdHJ1ZSkge1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCAoaW5mbykgPT4ge1xuXHRcdGlmIChpbmZvLnR5cGUgIT0gbnVsbCkge1xuXHRcdCAgICB0aGlzLmFsZXJ0X3R5cGUgPSBpbmZvLnR5cGU7XG5cdFx0fVxuXHRcdGlmIChpbmZvLnRpbWVvdXQgIT0gbnVsbCkge1xuXHRcdCAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5jbG9zZSgpOyB9LCAxMDAwICogaW5mby50aW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5zaG93KGluZm8udGV4dF9odG1sKTtcblx0ICAgIH0pO1x0XG5cdH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gZmFsc2U7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKGJvZHksIGFsZXJ0X3R5cGUpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IHRydWU7XG5cdCAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgaWYgKGFsZXJ0X3R5cGUgIT0gbnVsbCkge1xuXHRcdHRoaXMuYWxlcnRfdHlwZSA9IGFsZXJ0X3R5cGU7XG5cdCAgICB9XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiIHYtaWY9XCJzaG93X2FsZXJ0ID09IHRydWVcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCIgOmNsYXNzPVwiYWxlcnRfdHlwZVwiPlxuICA8c3BhbiB2LWh0bWw9XCJib2R5XCI+PC9zcGFuPlxuPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0bi1jbG9zZVwiICBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGdsb2JhbDogQm9vbGVhblxuICAgIH0sXG4gICAgZW1pdHM6IFtdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIHNob3dfYWxlcnQ6IGZhbHNlLFxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBib2R5OiBcIlwiLFxuXHQgICAgYWxlcnRfdHlwZTogXCJhbGVydC1zdWNjZXNzXCIsXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRpZiAodGhpcy5nbG9iYWwgPT0gdHJ1ZSkge1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCAoaW5mbykgPT4ge1xuXHRcdGlmIChpbmZvLnR5cGUgIT0gbnVsbCkge1xuXHRcdCAgICB0aGlzLmFsZXJ0X3R5cGUgPSBpbmZvLnR5cGU7XG5cdFx0fVxuXHRcdGlmIChpbmZvLnRpbWVvdXQgIT0gbnVsbCkge1xuXHRcdCAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5jbG9zZSgpOyB9LCAxMDAwICogaW5mby50aW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5zaG93KGluZm8udGV4dF9odG1sKTtcblx0ICAgIH0pO1x0XG5cdH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gZmFsc2U7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKGJvZHksIGFsZXJ0X3R5cGUpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IHRydWU7XG5cdCAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgaWYgKGFsZXJ0X3R5cGUgIT0gbnVsbCkge1xuXHRcdHRoaXMuYWxlcnRfdHlwZSA9IGFsZXJ0X3R5cGU7XG5cdCAgICB9XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdj4gIFxuPHRhYmxlIHJlZj1cInRhYmxlX2lkXCIgY2xhc3M9XCJ0YWJsZSB3LTEwMCB0YWJsZS1zdHJpcGVkIHRhYmxlLWhvdmVyIHRhYmxlLWJvcmRlcmVkXCI+XG4gIDx0aGVhZD5cbiAgICA8dHI+XG4gICAgICA8dGggY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHYtZm9yPVwiaXRlbSBpbiBjb2x1bW5zX2NvbmZpZ1wiPnt7IGl0ZW0uY29sdW1uTmFtZSB9fTwvdGg+XG4gICAgPC90cj5cbiAgPC90aGVhZD5cbiAgPHRib2R5PjwvdGJvZHk+XG48L3RhYmxlPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICB0YWJsZV9idXR0b25zOiBBcnJheSxcbiAgY29sdW1uc19jb25maWc6IEFycmF5LFxuICBkYXRhX3VybDogU3RyaW5nLFxuICBlbmFibGVfc2VhcmNoOiBCb29sZWFuLFxuICBmaWx0ZXJfYnV0dG9uczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgfSxcbiAgdGFibGVfY29uZmlnOiB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgfSxcbiAgYmFzZV91cmw6IFN0cmluZyxcbiAgYmFzZV9wYXJhbXM6IE9iamVjdCwgXG59KTtcblxubGV0IG5ld19wYXJhbXMgPSBwcm9wcy5iYXNlX3BhcmFtc1xuY29uc3QgdGFibGVfaWQgPSByZWYobnVsbCk7XG5cbmZ1bmN0aW9uIGxvYWREYXRhdGFibGUoKSB7XG4gIGxldCB1cGRhdGVkID0gZmFsc2U7XG4gIC8qIENyZWF0ZSBhIGRhdGF0YWJsZSB3aXRoIHRoZSBidXR0b25zICovXG4gIGxldCBleHRlbmRfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIHNjcm9sbFg6IGZhbHNlLFxuICAgIGRlc3Ryb3k6IHRydWUsXG4gICAgc2VhcmNoaW5nOiBwcm9wcy5lbmFibGVfc2VhcmNoLFxuICAgIG9yZGVyOiBbWzAsIFwiYXNjXCJdXSxcbiAgICBwYWdpbmdUeXBlOiAnZnVsbF9udW1iZXJzJyxcbiAgICBjb2x1bW5EZWZzOiBwcm9wcy5jb2x1bW5zX2NvbmZpZyxcbiAgICBjb2x1bW5zOiBwcm9wcy5jb2x1bW5zX2NvbmZpZyxcbiAgICBhdXRvV2lkdGg6IGZhbHNlLFxuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgYWpheDoge1xuICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgIHVybDogcHJvcHMuZGF0YV91cmwsXG4gICAgICBkYXRhU3JjOiAncnNwJyxcbiAgICAgIGRhdGE6IChkYXRhLCBzZXR0aW5ncykgPT4ge1xuICAgICAgICBpZihPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhYmxlQXBpID0gc2V0dGluZ3Mub0luc3RhbmNlLmFwaSgpO1xuICAgICAgICBjb25zdCBvcmRlckNvbHVtbkluZGV4ID0gZGF0YS5vcmRlclswXS5jb2x1bW47XG4gICAgICAgIGNvbnN0IG9yZGVyQ29sdW1uTmFtZSA9IHRhYmxlQXBpLmNvbHVtbihvcmRlckNvbHVtbkluZGV4KS5uYW1lKCkgfHwgdW5kZWZpbmVkO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGEub3JkZXIpIHtcbiAgICAgICAgICBkYXRhLm9yZGVyID0gZGF0YS5vcmRlclswXS5kaXI7XG4gICAgICAgICAgZGF0YS5zb3J0ID0gb3JkZXJDb2x1bW5OYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGVsZXRlIGRhdGEuY29sdW1ucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLnNlYXJjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGF0YS5tYXBfc2VhcmNoID0gZGF0YS5zZWFyY2gudmFsdWU7XG4gICAgICAgICAgZGVsZXRlIGRhdGEuc2VhcmNoXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSxcbiAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgZHJhd0NhbGxiYWNrOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVEKTtcbiAgICB9XG4gIH07XG4gIGZvciAoY29uc3QgaXRlbSBpbiAocHJvcHMudGFibGVfY29uZmlnIHx8IHt9KSkge1xuICAgIGV4dGVuZF9jb25maWdbaXRlbV0gPSBwcm9wcy50YWJsZV9jb25maWdbaXRlbV1cbiAgfVxuXG4gIGxldCBjb25maWcgPSBEYXRhVGFibGVVdGlscy5nZXRTdGREYXRhdGFibGVDb25maWcocHJvcHMudGFibGVfYnV0dG9ucyk7XG4gIGNvbmZpZyA9IERhdGFUYWJsZVV0aWxzLmV4dGVuZENvbmZpZyhjb25maWcsIGV4dGVuZF9jb25maWcpO1xuICB0YWJsZSA9ICQodGFibGVfaWQudmFsdWUpLkRhdGFUYWJsZShjb25maWcpO1xuICBmb3IgKGNvbnN0IGZpbHRlciBvZiAocHJvcHMuZmlsdGVyX2J1dHRvbnMgfHwgW10pKSB7XG4gICAgLyogU2V0IGZpbHRlcnMgdG8gYWN0aXZlIGlmIGF2YWlsYWJsZSBpbiB0aGUgdXJsICovXG4gICAgY29uc3QgY3Vycl92YWx1ZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlci5maWx0ZXJNZW51S2V5KVxuICAgIGlmKGN1cnJfdmFsdWUgJiYgY3Vycl92YWx1ZSAhPSAnJykge1xuICAgICAgbGV0IG51bV9ub25fYWN0aXZlX2VudHJpZXMgPSAwXG4gICAgICBmaWx0ZXIuZmlsdGVycy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIGkuY3VycmVudGx5X2FjdGl2ZSA9IGZhbHNlXG4gICAgICAgIG51bV9ub25fYWN0aXZlX2VudHJpZXMgKz0gMVxuICAgICAgICBpZihpLmlkID09IGN1cnJfdmFsdWUpIHtcbiAgICAgICAgICBpLmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlXG4gICAgICAgICAgbnVtX25vbl9hY3RpdmVfZW50cmllcyAtPSAxXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmKG51bV9ub25fYWN0aXZlX2VudHJpZXMgPT0gZmlsdGVyLmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgJycpO1xuICAgICAgICB1cGRhdGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIG5ldyBEYXRhVGFibGVGaWx0ZXJzTWVudSh7XG4gICAgICBmaWx0ZXJUaXRsZTogZmlsdGVyLmZpbHRlclRpdGxlLFxuICAgICAgdGFibGVBUEk6IHRhYmxlLFxuICAgICAgZmlsdGVyczogZmlsdGVyLmZpbHRlcnMsXG4gICAgICBmaWx0ZXJNZW51S2V5OiBmaWx0ZXIuZmlsdGVyTWVudUtleSxcbiAgICAgIGNvbHVtbkluZGV4OiBmaWx0ZXIuY29sdW1uSW5kZXgsXG4gICAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuICAgICAgaWQ6IGZpbHRlci5pZCxcbiAgICAgIHJlbW92ZUFsbEVudHJ5OiBmaWx0ZXIucmVtb3ZlQWxsRW50cnksXG4gICAgICBjYWxsYmFja0Z1bmN0aW9uOiBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvblxuICAgIH0pLmluaXQoKTtcbiAgfVxuXG4gIGlmKHVwZGF0ZWQgJiYgcHJvcHMuYmFzZV9wYXJhbXMpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpXG4gICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiAoZW50cmllcykpIHtcbiAgICAgIG5ld19wYXJhbXNba2V5XSA9IHZhbHVlXG4gICAgfVxuICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgbmV3X3BhcmFtcykpXG4gICAgcmVsb2FkKClcbiAgfVxufVxuXG5sZXQgdGFibGUgPSBudWxsO1xub25Nb3VudGVkKCgpID0+IHtcbiAgbG9hZERhdGF0YWJsZSgpXG59KTtcblxuY29uc3QgcmVsb2FkID0gKCkgPT4ge1xuICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgdGFibGUuYWpheC5yZWxvYWQoKTtcbn1cblxuY29uc3QgdXBkYXRlX3VybCA9IChuZXdfdXJsKSA9PiB7XG4gIGlmICh0YWJsZSA9PSBudWxsKSB7IHJldHVybjsgfVxuICB0YWJsZS5hamF4LnVybChuZXdfdXJsKTtcbn1cblxuY29uc3QgZGVsZXRlX2J1dHRvbl9oYW5kbGVycyA9IChoYW5kbGVySWQpID0+IHtcbiAgICBEYXRhVGFibGVVdGlscy5kZWxldGVCdXR0b25IYW5kbGVycyhoYW5kbGVySWQpO1xufTtcblxubGV0IGlzX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG5jb25zdCBkZXN0cm95X3RhYmxlID0gKCkgPT4ge1xuICAgIHRhYmxlLmNsZWFyKCk7XG4gICAgdGFibGUuZGVzdHJveSh0cnVlKTtcbiAgICBpc19kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHByb3BzLmNvbHVtbnNfY29uZmlnLmZpbHRlcigoY29uZmlnKSA9PiBjb25maWcuaGFuZGxlcklkICE9IG51bGwpLmZvckVhY2goKGNvbmZpZykgPT4ge1xuXHRkZWxldGVfYnV0dG9uX2hhbmRsZXJzKGNvbmZpZy5oYW5kbGVySWQpO1xuICAgIH0pO1xufVxuXG5kZWZpbmVFeHBvc2UoeyByZWxvYWQsIGRlbGV0ZV9idXR0b25faGFuZGxlcnMsIGRlc3Ryb3lfdGFibGUsIHVwZGF0ZV91cmwgfSk7XG5cbm9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgaWYgKGlzX2Rlc3Ryb3llZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgIGRlc3Ryb3lfdGFibGUoKTtcbiAgICAvLyB0YWJsZS5kZXN0cm95KHRydWUpO1xufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTIgbXQtMlwiPlxuICA8QWxlcnRJbmZvPjwvQWxlcnRJbmZvPlxuICA8ZGl2IGNsYXNzPVwiY2FyZCBoLTEwMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICA8RGF0YVRpbWVSYW5nZVBpY2tlciBzdHlsZT1cIm1hcmdpbi10b3A6MC41cmVtO1wiXG5cdFx0XHQgOmlkPVwiaWRfZGF0ZV90aW1lX3BpY2tlclwiXG5cdFx0XHQgOmVuYWJsZV9yZWZyZXNoPVwidHJ1ZVwiXG5cdFx0XHQgcmVmPVwiZGF0ZV90aW1lX3BpY2tlclwiXG5cdFx0XHQgQGVwb2NoX2NoYW5nZT1cImVwb2NoX2NoYW5nZVwiPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG5cdDxidXR0b24gdi1pZj1cImVuYWJsZV9zbmFwc2hvdHNcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCIgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMubWFuYWdlX3NuYXBzaG90c19idG4nKVwiPjxpIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWNhbWVyYS1yZXRyb1wiPjwvaT48L2J1dHRvbj5cblx0PGJ1dHRvbiB2LWlmPVwidHJhZmZpY19leHRyYWN0aW9uX3Blcm1pdHRlZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIEBjbGljaz1cInNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCIgOnRpdGxlPVwiX2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZG93bmxvYWQnKVwiPjxpIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWRvd25sb2FkXCI+PC9pPjwvYnV0dG9uPlxuXHQ8YnV0dG9uICBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX2Rvd25sb2FkX2ZpbGVcIiA6dGl0bGU9XCJfaTE4bigncGFnZV9zdGF0cy50aXRsZV9tb2RhbF9kb3dubG9hZF9maWxlJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1maWxlLWltYWdlXCI+PC9pPjwvYnV0dG9uPlxuXHQ8YnV0dG9uIHYtaWY9XCJpc19oaXN0b3J5X2VuYWJsZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3NcIiA6dGl0bGU9XCJfaTE4bigncGFnZV9zdGF0cy5oaXN0b3JpY2FsX2Zsb3dzJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS10YWJsZVwiPjwvaT48L2J1dHRvbj5cdFxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L0RhdGFUaW1lUmFuZ2VQaWNrZXI+XG4gICAgPCEtLSBzZWxlY3QgbWV0cmljIC0tPlxuICAgIDxkaXYgdi1zaG93PVwidHNfbWVudV9yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0xIG1lLTEgbXQtMVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImlubGluZSBzZWxlY3QyLXNpemUgbWUtMiBtdC0yXCI+XG5cdDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIlxuXHRcdCAgICAgIDpvcHRpb25zPVwibWV0cmljc1wiXG5cdFx0ICAgICAgQHNlbGVjdF9vcHRpb249XCJzZWxlY3RfbWV0cmljXCI+XG5cdDwvU2VsZWN0U2VhcmNoPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW5saW5lIHNlbGVjdDItc2l6ZSBtZS0yIG10LTJcIj5cblx0PFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZVwiXG5cdFx0ICAgICAgOm9wdGlvbnM9XCJncm91cHNfb3B0aW9uc19tb2Rlc1wiXG5cdFx0ICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZ3JvdXBzX29wdGlvbnNfbW9kZVwiPlxuXHQ8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19tYW5hZ2VfdGltZXNlcmllc1wiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBpbmxpbmVcIiBzdHlsZT0ndmVydGljYWwtYWxpZ246IHN1cGVyOycgdi1pZj1cImlzX250b3BfcHJvXCI+XG4gICAgICBcdE1hbmFnZSBUaW1lc2VyaWVzXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIFxuICAgIDwvZGl2PlxuICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpKSBpbiBjaGFydHNfb3B0aW9uc19pdGVtc1wiIDprZXk9XCJpdGVtLmtleVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm0tM1wiIHN0eWxlPVwiaGVpZ2h0OjMwMHB4O1wiPlxuXHQ8Q2hhcnQgOmlkPVwiaWRfY2hhcnQgKyBpXCIgOnJlZj1cImVsID0+IHsgY2hhcnRzW2ldID0gZWwgfVwiXG5cdCAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIlxuICAgICAgXHQgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiXG5cdCAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKGkpXCJcblx0ICAgICAgIEB6b29tPVwiZXBvY2hfY2hhbmdlXCJcblx0ICAgICAgIEBjaGFydF9yZWxvYWRlZD1cImNoYXJ0X3JlbG9hZGVkXCI+XG5cdDwvQ2hhcnQ+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L2Rpdj5cbiAgXG4gIDxkaXYgY2xhc3M9XCJtdC00IGNhcmQgY2FyZC1zaGFkb3dcIiB2LWlmPVwiZW5hYmxlX3N0YXRzX3RhYmxlXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgPEJvb3RzdHJhcFRhYmxlXG5cdGlkPVwicGFnZV9zdGF0c19ib290c3RyYXBfdGFibGVcIlxuXHQ6Y29sdW1ucz1cInN0YXRzX2NvbHVtbnNcIlxuXHQ6cm93cz1cInN0YXRzX3Jvd3NcIlxuXHQ6cHJpbnRfaHRtbF9jb2x1bW49XCIoY29sKSA9PiBwcmludF9zdGF0c19jb2x1bW4oY29sKVwiXG5cdDpwcmludF9odG1sX3Jvdz1cIihjb2wsIHJvdykgPT4gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KVwiPlxuICAgICAgPC9Cb290c3RyYXBUYWJsZT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIFxuICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCIgdi1pZj1cImlzX250b3BfcHJvXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgPGRpdiB2LWlmPVwic2VsZWN0ZWRfdG9wX3RhYmxlPy50YWJsZV9jb25maWdfZGVmXCIgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuXHQ8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdG9wX3RhYmxlXCJcblx0XHQgICAgICA6b3B0aW9ucz1cInRvcF90YWJsZV9vcHRpb25zXCI+XG5cdDwvU2VsZWN0U2VhcmNoPlxuICAgICAgPC9kaXY+XG4gICAgICA8RGF0YXRhYmxlIHYtaWY9XCJzZWxlY3RlZF90b3BfdGFibGU/LnRhYmxlX2NvbmZpZ19kZWZcIiA6a2V5PVwic2VsZWN0ZWRfdG9wX3RhYmxlPy52YWx1ZVwiIHJlZj1cInRvcF90YWJsZV9yZWZcIlxuICAgICAgICA6dGFibGVfYnV0dG9ucz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLnRhYmxlX2J1dHRvblwiXG4gICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgOmRhdGFfdXJsPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYuZGF0YV91cmxcIlxuICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICA6dGFibGVfY29uZmlnPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYudGFibGVfY29uZmlnXCI+XG4gICAgICA8L0RhdGF0YWJsZT4gICAgICBcbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cblxuPE1vZGFsU25hcHNob3Qgdi1pZj1cImVuYWJsZV9zbmFwc2hvdHNcIiByZWY9XCJtb2RhbF9zbmFwc2hvdFwiXG5cdCAgICAgICA6Y3NyZj1cImNzcmZcIlxuXHQgICAgICAgOnBhZ2U9XCJwYWdlX3NuYXBzaG90c1wiXG5cdCAgICAgICBAYWRkZWRfc25hcHNob3Q9XCJyZWZyZXNoX3NuYXBzaG90c1wiXG5cdCAgICAgICBAZGVsZXRlZF9zbmFwc2hvdHM9XCJyZWZyZXNoX3NuYXBzaG90c1wiXG5cdCAgICAgICBAZGVsZXRlZF9hbGxfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIj5cbjwvTW9kYWxTbmFwc2hvdD5cblxuPE1vZGFsVGltZXNlcmllcyB2LWlmPVwiaXNfbnRvcF9wcm9cIlxuXHRcdCByZWY9XCJtb2RhbF90aW1lc2VyaWVzXCJcblx0XHQgOnNvdXJjZXNfdHlwZXNfZW5hYmxlZD1cInNvdXJjZXNfdHlwZXNfZW5hYmxlZFwiXG5cdFx0IEBhcHBseT1cImFwcGx5X21vZGFsX3RpbWVzZXJpZXNcIj5cbjwvTW9kYWxUaW1lc2VyaWVzPlxuXG48TW9kYWxUcmFmZmljRXh0cmFjdGlvblxuICBpZD1cInBhZ2Vfc3RhdHNfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCJcbiAgcmVmPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCI+XG48L01vZGFsVHJhZmZpY0V4dHJhY3Rpb24+XG5cbjxNb2RhbERvd25sb2FkRmlsZVxuICByZWY9XCJtb2RhbF9kb3dubG9hZF9maWxlXCJcbiAgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMudGl0bGVfbW9kYWxfZG93bmxvYWRfZmlsZScpXCJcbiAgZXh0PVwicG5nXCJcbiAgQGRvd25sb2FkPVwiZG93bmxvYWRfY2hhcnRfcG5nXCI+XG48L01vZGFsRG93bmxvYWRGaWxlPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGFUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVGltZXNlcmllcyB9IGZyb20gXCIuL21vZGFsLXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gfSBmcm9tIFwiLi9tb2RhbC10cmFmZmljLWV4dHJhY3Rpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRG93bmxvYWRGaWxlIH0gZnJvbSBcIi4vbW9kYWwtZG93bmxvYWQtZmlsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgeyBEYXRhVGFibGVVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICBpc19udG9wX3BybzogQm9vbGVhbixcbiAgICBzb3VyY2VfdmFsdWVfb2JqZWN0OiBPYmplY3QsXG4gICAgc291cmNlc190eXBlc19lbmFibGVkOiBPYmplY3QsXG4gICAgc291cmNlc190eXBlc190b3BfZW5hYmxlZDogT2JqZWN0LFxuICAgIGVuYWJsZV9zbmFwc2hvdHM6IEJvb2xlYW4sXG4gICAgaXNfaGlzdG9yeV9lbmFibGVkOiBCb29sZWFuLFxuICAgIHRyYWZmaWNfZXh0cmFjdGlvbl9wZXJtaXR0ZWQ6IEJvb2xlYW4sXG4gICAgaXNfZGFya19tb2RlOiBCb29sZWFuLFxufSk7XG5cbm50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF9pbnRlcnZhbF90aW1lKCk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmxldCBpZF9jaGFydCA9IFwiY2hhcnRcIjtcbmxldCBpZF9kYXRlX3RpbWVfcGlja2VyID0gXCJkYXRlX3RpbWVfcGlja2VyXCI7XG5sZXQgY2hhcnRfdHlwZSA9IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX0xJTkU7XG5jb25zdCBjb25maWdfYXBwX3RhYmxlID0gcmVmKHt9KTtcbmNvbnN0IGluaXRfY29uZmlnX3RhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNoYXJ0cyA9IHJlZihbXSk7XG5jb25zdCBkYXRlX3RpbWVfcGlja2VyID0gcmVmKG51bGwpO1xuY29uc3QgdG9wX3RhYmxlX3JlZiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3RpbWVzZXJpZXMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9zbmFwc2hvdCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2Rvd25sb2FkX2ZpbGUgPSByZWYobnVsbCk7XG5cbmNvbnN0IG1ldHJpY3MgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KTtcbmNvbnN0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpOyAgICBcblxuY29uc3QgZW5hYmxlX3N0YXRzX3RhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV90b3BfdGFibGUgPSByZWYoZmFsc2UpO1xuXG4vKipcbiAqIHsga2V5OiBpZGVudGlmaWVyIG9mIENoYXJ0IGNvbXBvbmVudCwgaWYgY2hhbmdlIENoYXJ0IHdpbGwgYmUgZGVzdHJveWVkIGFuZCByZWNyZWF0ZWQsXG4gKiAgY2hhcnRfb3B0aW9uczogY2hhcnQgb3B0aW9ucyB9W11cbiAqKi9cbmNvbnN0IGNoYXJ0c19vcHRpb25zX2l0ZW1zID0gcmVmKFtdKTtcblxuLyoqXG4gKiBNb2RlcyB0aGF0IHJlcHJlc2VudCBob3cgaXQncyBwb3NzaWJsZSBkaXNwbGF5IHRpbWVzZXJpZXMuXG4gKi9cbmNvbnN0IGdyb3Vwc19vcHRpb25zX21vZGVzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHRpbWVzZXJpZXNVdGlscy5ncm91cHNPcHRpb25zTW9kZXNFbnVtKTtcbi8qKlxuICogQ3VycmVudCBkaXNwbGF5IHRpbWVzZXJpZXMgbW9kZS5cbiAqL1xuY29uc3QgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlID0gcmVmKGluaXRfZ3JvdXBzX29wdGlvbl9tb2RlKCkpO1xuXG5sZXQgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSBudWxsO1xuXG5jb25zdCBjdXN0b21fbWV0cmljID0geyBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5jdXN0b21fbWV0cmljcycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9XG5cbmNvbnN0IHBhZ2Vfc25hcHNob3RzID0gXCJ0aW1lc2VyaWVzXCI7XG5cbmNvbnN0IHRzX21lbnVfcmVhZHkgPSByZWYoZmFsc2UpO1xuXG5mdW5jdGlvbiBpbml0X2dyb3Vwc19vcHRpb25fbW9kZSgpIHtcbiAgICBsZXQgZ3JvdXBzX21vZGUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIik7XG4gICAgaWYgKGdyb3Vwc19tb2RlICE9IG51bGwgJiYgZ3JvdXBzX21vZGUgIT0gXCJcIikge1xuXHRyZXR1cm4gdGltZXNlcmllc1V0aWxzLmdldEdyb3VwT3B0aW9uTW9kZShncm91cHNfbW9kZSk7XG4gICAgfVxuICAgIHJldHVybiBncm91cHNfb3B0aW9uc19tb2Rlc1swXTtcbn1cblxuZnVuY3Rpb24gc2V0X2RlZmF1bHRfc291cmNlX29iamVjdF9pbl91cmwoKSB7XG4gICAgaWYgKHByb3BzLnNvdXJjZV92YWx1ZV9vYmplY3QgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgbWV0cmljc01hbmFnZXIuc2V0X3NvdXJjZV92YWx1ZV9vYmplY3RfaW5fdXJsKHNvdXJjZV90eXBlLCBwcm9wcy5zb3VyY2VfdmFsdWVfb2JqZWN0KTtcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0X2RlZmF1bHRfc291cmNlX29iamVjdF9pbl91cmwoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG5cdG50b3BuZ19zeW5jLm9uX3JlYWR5KGlkX2RhdGVfdGltZV9waWNrZXIpLFxuICAgIF0pO1xuICAgIC8vIGNoYXJ0LnZhbHVlLnJlZ2lzdGVyX3N0YXR1cygpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy9nZXRfZGVmYXVsdF90aW1lc2VyaWVzX2dyb3Vwc1xuICAgIGxldCBwdXNoX2N1c3RvbV9tZXRyaWMgPSB0cnVlO1xuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybChodHRwX3ByZWZpeCk7XG4gICAgbGV0IG1ldHJpY190c19zY2hlbWE7XG4gICAgbGV0IG1ldHJpY19xdWVyeTtcbiAgICBpZiAodGltZXNlcmllc19ncm91cHMgPT0gbnVsbCkge1xuXHRwdXNoX2N1c3RvbV9tZXRyaWMgPSBmYWxzZTtcblx0bWV0cmljX3RzX3NjaGVtYSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidHNfc2NoZW1hXCIpO1xuXHRsZXQgdHNfcXVlcnkgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRzX3F1ZXJ5XCIpO1xuXHRpZiAodHNfcXVlcnkgIT0gbnVsbCAmJiB0c19xdWVyeSAhPSBcIlwiKSB7XG5cdCAgICBtZXRyaWNfcXVlcnkgPSBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnkodHNfcXVlcnkpO1xuXHR9XG5cdGlmIChtZXRyaWNfdHNfc2NoZW1hID09IFwiXCIpIHsgbWV0cmljX3RzX3NjaGVtYSA9IG51bGw7IH1cblx0dGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfZGVmYXVsdF90aW1lc2VyaWVzX2dyb3VwcyhodHRwX3ByZWZpeCwgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KTtcbiAgICB9XG4gICAgbWV0cmljcy52YWx1ZSA9IGF3YWl0IGdldF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYyk7XG4gICAgXG4gICAgaWYgKHB1c2hfY3VzdG9tX21ldHJpYyA9PSB0cnVlKSB7XG5cdHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IGN1c3RvbV9tZXRyaWM7XG4gICAgfSBlbHNlIHtcblx0c2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfbWV0cmljKG1ldHJpY3MudmFsdWUsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSk7XG4gICAgfVxuICAgIHRzX21lbnVfcmVhZHkudmFsdWUgPSB0cnVlO1xuICAgIGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCB0cnVlKTtcbn1cblxubGV0IGxhc3RfcHVzaF9jdXN0b21fbWV0cmljID0gbnVsbDtcbmFzeW5jIGZ1bmN0aW9uIGdldF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgZm9yY2VfcmVmcmVzaCkge1xuICAgIGlmICghZm9yY2VfcmVmcmVzaCAmJiBsYXN0X3B1c2hfY3VzdG9tX21ldHJpYyA9PSBwdXNoX2N1c3RvbV9tZXRyaWMpIHsgcmV0dXJuIG1ldHJpY3MudmFsdWU7IH1cbiAgICBcbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNzKGh0dHBfcHJlZml4KTtcbiAgICBpZiAocHVzaF9jdXN0b21fbWV0cmljKSB7XG5cdG1ldHJpY3MucHVzaChjdXN0b21fbWV0cmljKTtcbiAgICB9XG4gICAgaWYgKGNhY2hlX3NuYXBzaG90cyA9PSBudWxsIHx8IGZvcmNlX3JlZnJlc2gpIHtcblx0Y2FjaGVfc25hcHNob3RzID0gYXdhaXQgZ2V0X3NuYXBzaG90c19tZXRyaWNzKCk7XG4gICAgfVxuICAgIGlmKHByb3BzLmVuYWJsZV9zbmFwc2hvdHMpIHtcblx0bGV0IHNuYXBzaG90c19tZXRyaWNzID0gY2FjaGVfc25hcHNob3RzO1xuXHRzbmFwc2hvdHNfbWV0cmljcy5mb3JFYWNoKChzbSkgPT4gbWV0cmljcy5wdXNoKHNtKSk7XG4gICAgfVxuICAgIC8qIE9yZGVyIE1ldHJpY3MgKi9cbiAgICBtZXRyaWNzLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSk7XG4gICAgXG4gICAgcmV0dXJuIG1ldHJpY3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zbmFwc2hvdHNfbWV0cmljcygpIHtcbiAgICBpZiAoIXByb3BzLmVuYWJsZV9zbmFwc2hvdHMpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ZpbHRlcnMvc25hcHNob3RzLmx1YT9wYWdlPSR7cGFnZV9zbmFwc2hvdHN9YDtcbiAgICBcbiAgICBsZXQgc25hcHNob3RzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIGxldCBzbmFwc2hvdHMgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoc25hcHNob3RzX29iaik7XG4gICAgbGV0IG1ldHJpY3Nfc25hcHNob3RzID0gc25hcHNob3RzLm1hcCgocykgPT4ge1xuXHRyZXR1cm4ge1xuICAgICAgICAgICAgLi4ucyxcbiAgICAgICAgICAgIGlzX3NuYXBzaG90OiB0cnVlLFxuICAgICAgICAgICAgbGFiZWw6IGAke3MubmFtZX1gLFxuXHQgICAgZ3JvdXA6IFwiU25hcHNob3RzXCIsXG5cdH07XG4gICAgfSk7XG4gICAgcmV0dXJuIG1ldHJpY3Nfc25hcHNob3RzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfc2VsZWN0ZWRfdGltZXNlcmllc19ncm91cHMoKSB7XG4gICAgbGV0IG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICByZXR1cm4gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpYyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWMpIHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpO1xuICAgIGxldCB0c19ncm91cCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IFt0c19ncm91cF07XG4gICAgcmV0dXJuIHRpbWVzZXJpZXNfZ3JvdXBzO1xufVxuXG5jb25zdCBhZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdCA9IGFzeW5jIChzb3VyY2VfdHlwZV9pZCwgc291cmNlX3ZhbHVlX2RpY3QsIG1ldHJpY19zY2hlbWEpID0+IHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX3R5cGVfZnJvbV9pZChzb3VyY2VfdHlwZV9pZCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9kaWN0KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2RpY3QpO1xuICAgIGxldCBtZXRyaWMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljX2Zyb21fc2NoZW1hKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hKTtcbiAgICBsZXQgdHNfZ3JvdXAgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICBhZGRfdHNfZ3JvdXAodHNfZ3JvdXApO1xufTtcblxuY29uc3QgYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEgPSBhc3luYyAobWV0cmljX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IG1ldHJpYyA9IG1ldHJpY3MudmFsdWUuZmluZCgobSkgPT4gbS5zY2hlbWEgPT0gbWV0cmljX3NjaGVtYSAmJiBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSk7XG4gICAgaWYgKG1ldHJpYyA9PSBudWxsKSB7XG5cdGNvbnNvbGUuZXJyb3IoYG1ldHJpYyA9ICR7bWV0cmljX3NjaGVtYX0sIHF1ZXJ5ID0gJHttZXRyaWNfcXVlcnl9IG5vdCBmb3VuZC5gKTtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljKTtcbiAgICAvLyBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNldF90aW1lc2VyaWVzX2dyb3VwcyhsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG4gICAgLy8gbW9kYWxfdGltZXNlcmllcy52YWx1ZS5hZGRfdHNfZ3JvdXAodGltZXNlcmllc19ncm91cHNbMF0sIHRydWUpO1xuICAgIGFkZF90c19ncm91cCh0aW1lc2VyaWVzX2dyb3Vwc1swXSk7XG59O1xuXG5mdW5jdGlvbiBhZGRfdHNfZ3JvdXAodHNfZ3JvdXApIHtcbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNldF90aW1lc2VyaWVzX2dyb3VwcyhsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG4gICAgbW9kYWxfdGltZXNlcmllcy52YWx1ZS5hZGRfdHNfZ3JvdXAodHNfZ3JvdXAsIHRydWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZWxlY3RfbWV0cmljKG1ldHJpYykge1xuICAgIGlmIChtZXRyaWMuaXNfc25hcHNob3QgPT0gdHJ1ZSkge1xuXHRsZXQgdXJsX3BhcmFtZXRlcnMgPSBtZXRyaWMuZmlsdGVycztcblx0bGV0IHRpbWVzZXJpZXNfdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZXNlcmllc19ncm91cHNcIiwgdXJsX3BhcmFtZXRlcnMpO1xuXHRsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwoaHR0cF9wcmVmaXgsIHRpbWVzZXJpZXNfdXJsX3BhcmFtcyk7XG5cdGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZSA9IHRpbWVzZXJpZXNVdGlscy5nZXRHcm91cE9wdGlvbk1vZGUobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIsIHVybF9wYXJhbWV0ZXJzKSk7XG5cdGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcblx0YXdhaXQgbG9hZF9zZWxlY3RlZF9tZXRyaWNfcGFnZV9zdGF0c19kYXRhKCk7XG5cdHJlZnJlc2hfbWV0cmljcyhmYWxzZSk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3NlbGVjdGVkX21ldHJpY19wYWdlX3N0YXRzX2RhdGEoKSB7XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgZ2V0X3NlbGVjdGVkX3RpbWVzZXJpZXNfZ3JvdXBzKCk7XG4gICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZXBvY2hfY2hhbmdlKG5ld19lcG9jaCkge1xuICAgIGxldCBwdXNoX2N1c3RvbV9tZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUubGFiZWwgPT0gY3VzdG9tX21ldHJpYy5sYWJlbDtcbiAgICBsb2FkX3BhZ2Vfc3RhdHNfZGF0YShsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCwgdHJ1ZSwgZmFsc2UsIG5ld19lcG9jaC5yZWZyZXNoX2RhdGEpO1xuICAgIHJlZnJlc2hfdG9wX3RhYmxlKCk7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoYXJ0X3JlbG9hZGVkKGNoYXJ0X29wdGlvbnMpIHtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9zbmFwc2hvdCgpIHtcbiAgICBtb2RhbF9zbmFwc2hvdC52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbWFuYWdlX3RpbWVzZXJpZXMoKSB7XG4gICAgaWYgKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbW9kYWxfdGltZXNlcmllcy52YWx1ZS5zaG93KGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gY2FsbGVkIGJ5IENoYXJ0IGNvbXBvbmVudCB0byBkcmF3IG9yIHVwZGF0ZSB0aGF0IHJldHVybiBjaGFydCBvcHRpb25zLlxuICoqL1xuZnVuY3Rpb24gZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKGNoYXJ0X2luZGV4KSB7XG4gICAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcblx0cmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICAgIH1cbn1cblxubGV0IGNhY2hlX3NuYXBzaG90cyA9IG51bGw7XG5mdW5jdGlvbiByZWZyZXNoX3NuYXBzaG90cygpIHtcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmxhYmVsID09IGN1c3RvbV9tZXRyaWMubGFiZWw7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpIHtcbiAgICBtZXRyaWNzLnZhbHVlID0gYXdhaXQgZ2V0X21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCBmb3JjZV9yZWZyZXNoKTtcbiAgICBpZiAocHVzaF9jdXN0b21fbWV0cmljKSB7XG5cdHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IGN1c3RvbV9tZXRyaWM7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseV9tb2RhbF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfZ3JvdXBzKSB7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHRydWUpO1xuICAgIGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGUoKSB7XG4gICAgbG9hZF9wYWdlX3N0YXRzX2RhdGEobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQsIGZhbHNlLCBmYWxzZSk7XG59XG5cbmxldCB0c19jaGFydHNfb3B0aW9ucztcbmFzeW5jIGZ1bmN0aW9uIGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCByZWxvYWRfY2hhcnRzX2RhdGEsIHJlbG9hZF90b3BfdGFibGVfb3B0aW9ucywgcmVmcmVzaGVkX3RpbWVfaW50ZXJ2YWwpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgdHNfY29tcGFyZSA9IGdldF90c19jb21wYXJlKHN0YXR1cyk7XG4gICAgaWYgKHJlbG9hZF9jaGFydHNfZGF0YSkge1xuXHR0c19jaGFydHNfb3B0aW9ucyA9IGF3YWl0IHRpbWVzZXJpZXNVdGlscy5nZXRUc0NoYXJ0c09wdGlvbnMoaHR0cF9wcmVmaXgsIHN0YXR1cywgdHNfY29tcGFyZSwgdGltZXNlcmllc19ncm91cHMsIHByb3BzLmlzX250b3BfcHJvKTtcbiAgICB9XG4gICAgXG4gICAgLy8gdXBkYXRlIHRpbWVzZXJpZXNfZ3JvdXBzIHNvdXJjZSBsYWJlbFxuICAgIHNldF90aW1lc2VyaWVzX2dyb3Vwc19zb3VyY2VfbGFiZWwodGltZXNlcmllc19ncm91cHMsIHRzX2NoYXJ0c19vcHRpb25zKTtcbiAgICBcbiAgICBsZXQgY2hhcnRzX29wdGlvbnMgPSB0aW1lc2VyaWVzVXRpbHMudHNBcnJheVRvQXBleE9wdGlvbnNBcnJheSh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZSwgdHNfY29tcGFyZSk7XG4gICAgaWYgKHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG5cdHVwZGF0ZV9jaGFydHMoY2hhcnRzX29wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG5cdHNldF9jaGFydHNfb3B0aW9uc19pdGVtcyhjaGFydHNfb3B0aW9ucyk7XG4gICAgfVxuICAgIHNldF9zdGF0c19yb3dzKHRzX2NoYXJ0c19vcHRpb25zLCB0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICBpZiAocmVsb2FkX3RvcF90YWJsZV9vcHRpb25zKSB7XG5cdHNldF90b3BfdGFibGVfb3B0aW9ucyh0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICB9XG4gICAgLy8gc2V0IGxhc3RfdGltZXNlcmllc19ncm91cGRfbG9hZGVkXG4gICAgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSB0aW1lc2VyaWVzX2dyb3VwcztcbiAgICAvLyB1cGRhdGUgdXJsIHBhcmFtc1xuICAgIHVwZGF0ZV91cmxfcGFyYW1zKCk7XG59XG5cbmZ1bmN0aW9uIHNldF90aW1lc2VyaWVzX2dyb3Vwc19zb3VyY2VfbGFiZWwodGltZXNlcmllc19ncm91cHMsIHRzX2NoYXJ0c19vcHRpb25zKSB7ICAgIFxuICAgIHRpbWVzZXJpZXNfZ3JvdXBzLmZvckVhY2goKHRzX2dyb3VwLCBpKSA9PiB7XG5cdGxldCB0c19vcHRpb25zID0gdHNfY2hhcnRzX29wdGlvbnNbaV07XG5cdGxldCBsYWJlbCA9IHRzX29wdGlvbnM/LnF1ZXJ5Py5sYWJlbDtcblx0aWYgKGxhYmVsICE9IG51bGwpIHtcblx0ICAgIGxldCBzb3VyY2VfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcblx0ICAgIGxldCBzb3VyY2UgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2luZGV4XTtcblx0ICAgIHNvdXJjZS5sYWJlbCA9IGxhYmVsO1xuXHR9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV91cmxfcGFyYW1zKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIiwgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlLnZhbHVlLnZhbHVlKTtcbiAgICBtZXRyaWNzTWFuYWdlci5zZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NoYXJ0cyhjaGFydHNfb3B0aW9ucykge1xuICAgIGNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbnMsIGkpID0+IHtcblx0Y2hhcnRzLnZhbHVlW2ldLnVwZGF0ZV9jaGFydF9vcHRpb25zKHsgeWF4aXM6IG9wdGlvbnMueWF4aXMgfSk7XG5cdGNoYXJ0cy52YWx1ZVtpXS51cGRhdGVfY2hhcnRfc2VyaWVzKG9wdGlvbnM/LnNlcmllcyk7XG4gICAgfSk7ICAgIFxufVxuXG5mdW5jdGlvbiBzZXRfY2hhcnRzX29wdGlvbnNfaXRlbXMoY2hhcnRzX29wdGlvbnMpIHtcbiAgICBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZSA9IGNoYXJ0c19vcHRpb25zLm1hcCgob3B0aW9ucywgaSkgPT4ge1xuXHRyZXR1cm4ge1xuXHQgICAga2V5OiBudG9wbmdfdXRpbGl0eS5nZXRfcmFuZG9tX3N0cmluZygpLFxuXHQgICAgY2hhcnRfb3B0aW9uczogb3B0aW9ucyxcblx0fTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0X3RzX2NvbXBhcmUoc3RhdHVzKSB7XG4gICAgLy8gNW0sIDMwbSwgMWgsIDFkLCAxdywgMU0sIDFZXG4gICAgbGV0IHIgPSBOdW1iZXIucGFyc2VJbnQoKHN0YXR1cy5lcG9jaF9lbmQgLSBzdGF0dXMuZXBvY2hfYmVnaW4pIC8gNjApO1xuICAgIGlmIChyIDw9IDUpIHtcblx0cmV0dXJuIFwiNW1cIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gMzApIHtcblx0cmV0dXJuIFwiMzBtXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwKSB7XG5cdHJldHVybiBcIjFoXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwICogMjQpIHtcblx0cmV0dXJuIFwiMWRcIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjAgKiAyNCAqIDcpIHtcblx0cmV0dXJuIFwiMXdcIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjAgKiAyNCAqIDMwKSB7XG5cdHJldHVybiBcIjFNXCI7XG4gICAgfSBlbHNlIHtcblx0cmV0dXJuIFwiMVlcIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF90b3BfdGFibGVfdXJsKHRzX2dyb3VwLCB0YWJsZV92YWx1ZSwgdGFibGVfdmlldywgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0LCBzdGF0dXMpIHtcbiAgICBpZiAoc3RhdHVzID09IG51bGwpIHtcblx0c3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcdFxuICAgIH1cbiAgICBsZXQgdHNfcXVlcnkgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0VHNRdWVyeSh0c19ncm91cCwgdHJ1ZSwgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICBsZXQgdiA9IHRhYmxlX3ZhbHVlO1xuICAgIGxldCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0LyR7dn0vdG9wL3RzX3N0YXRzLmx1YWA7XG4gICAgLy90b2RvOiBnZXQgdHNfcXVlcnlcbiAgICBsZXQgcF9vYmogPSB7XG5cdHpvb206ICc1bScsXG5cdHRzX3F1ZXJ5LFxuXHQvLyB0c19xdWVyeTogYGlmaWQ6JHtudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpfWAsXG5cdGVwb2NoX2JlZ2luOiBgJHtzdGF0dXMuZXBvY2hfYmVnaW59YCxcblx0ZXBvY2hfZW5kOiBgJHtzdGF0dXMuZXBvY2hfZW5kfWAsXG5cdGRldGFpbF92aWV3OiBgJHt0YWJsZV92aWV3fWAsXG5cdG5ld19jaGFydHM6IGB0cnVlYFxuICAgIH07XG4gICAgXG4gICAgbGV0IHBfdXJsX3JlcXVlc3QgPSAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHBfb2JqLCAnJyk7XG4gICAgcmV0dXJuIGAke2RhdGFfdXJsfT8ke3BfdXJsX3JlcXVlc3R9YDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF90b3BfdGFibGUoKSB7XG4gICAgaWYgKCFwcm9wcy5pc19udG9wX3BybykgeyByZXR1cm47IH1cbiAgICBsZXQgdGFibGVfY29uZmlnID0gc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlPy50YWJsZV9jb25maWdfZGVmO1xuICAgIGlmICh0YWJsZV9jb25maWcgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAvLyBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgbGV0IGRhdGFfdXJsID0gZ2V0X3RvcF90YWJsZV91cmwodGFibGVfY29uZmlnLnRzX2dyb3VwLCB0YWJsZV9jb25maWcudGFibGVfZGVmLnRhYmxlX3ZhbHVlLCB0YWJsZV9jb25maWcudGFibGVfZGVmLnZpZXcsIHRhYmxlX2NvbmZpZy50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QpO1xuICAgIHRvcF90YWJsZV9yZWYudmFsdWUudXBkYXRlX3VybChkYXRhX3VybCk7XG4gICAgdG9wX3RhYmxlX3JlZi52YWx1ZS5yZWxvYWQoKTtcbiAgICAvLyBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgXG59XG5cbmNvbnN0IHRvcF90YWJsZV9vcHRpb25zID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX3RvcF90YWJsZSA9IHJlZih7fSk7XG5mdW5jdGlvbiBzZXRfdG9wX3RhYmxlX29wdGlvbnModGltZXNlcmllc19ncm91cHMsIHN0YXR1cykge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcblx0dGltZXNlcmllc19ncm91cHMgPSBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZDtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG5cdHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgfVxuICAgIFxuICAgIGxldCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IG1ldHJpY3NNYW5hZ2VyLnNvdXJjZXNfdHlwZXNfdGFibGVzO1xuICAgIGxldCB0c19ncm91cF9kaWN0ID0ge307IC8vIGRpY3Rpb25hcnkgd2l0aCAxIHRzX2dyb3VwIGZvciBlYWNoIChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KVxuICAgIHRpbWVzZXJpZXNfZ3JvdXBzLmZvckVhY2goKHRzX2dyb3VwKSA9PiB7XG5cdGxldCBzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHQvLyBsZXQgc291cmNlX3R5cGVfdGFibGVzID0gc291cmNlc190eXBlc190YWJsZXNbc291cmNlX3R5cGUuaWRdO1xuXHQvLyBsZXQgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0ID0gc291cmNlX3R5cGVfdGFibGVzLnRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFxuXHRcblx0bGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHRzX2dyb3VwLnNvdXJjZV90eXBlLCB0c19ncm91cC5zb3VyY2VfYXJyYXkpO1xuXHR0c19ncm91cF9kaWN0W2lkXSA9IHRzX2dyb3VwO1xuICAgIH0pO1xuICAgIGxldCB0b3BfdGFibGVfaWRfZGljdCA9IHt9XG4gICAgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUgPSBbXTtcbiAgICBsZXQgc2VsZWN0X29wdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpZCBpbiB0c19ncm91cF9kaWN0KSB7XG5cdGxldCB0c19ncm91cCA9IHRzX2dyb3VwX2RpY3RbaWRdO1xuXHRsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcblx0bGV0IG1haW5fc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XTtcblx0bGV0IHNvdXJjZV90eXBlID0gdHNfZ3JvdXAuc291cmNlX3R5cGU7XG5cdGxldCBzb3VyY2VfdHlwZV90YWJsZXMgPSBzb3VyY2VzX3R5cGVzX3RhYmxlc1tzb3VyY2VfdHlwZS5pZF07XG5cdGlmIChzb3VyY2VfdHlwZV90YWJsZXMgPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXHRcblx0c291cmNlX3R5cGVfdGFibGVzLmZvckVhY2goKHRhYmxlX2RlZikgPT4ge1xuXHQgICAgbGV0IGVuYWJsZXNfdGFibGVfdmFsdWUgPSBwcm9wcy5zb3VyY2VzX3R5cGVzX3RvcF9lbmFibGVkW3RhYmxlX2RlZi50YWJsZV92YWx1ZV07XG5cdCAgICBpZiAoZW5hYmxlc190YWJsZV92YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgbGV0IGVuYWJsZV90YWJsZV9kZWYgPSBlbmFibGVzX3RhYmxlX3ZhbHVlW3RhYmxlX2RlZi52aWV3XTtcblx0ICAgIGlmICghZW5hYmxlX3RhYmxlX2RlZikgeyByZXR1cm47IH1cblx0ICAgIGxldCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgPSB0YWJsZV9kZWYudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0XG5cdCAgICBcblx0ICAgIGxldCBkYXRhX3VybCA9IGdldF90b3BfdGFibGVfdXJsKHRzX2dyb3VwLCB0YWJsZV9kZWYudGFibGVfdmFsdWUsIHRhYmxlX2RlZi52aWV3LCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHN0YXR1cyk7XG5cdCAgICBsZXQgdGFibGVfaWQgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXBfaWQodHNfZ3JvdXAuc291cmNlX3R5cGUsIHRzX2dyb3VwLnNvdXJjZV9hcnJheSwgbnVsbCwgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0LCB0cnVlKTtcblx0ICAgIHRhYmxlX2lkID0gYCR7dGFibGVfaWR9XyR7dGFibGVfZGVmLnZpZXd9YDtcblx0ICAgIGlmICh0b3BfdGFibGVfaWRfZGljdFt0YWJsZV9pZF0gIT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIHRvcF90YWJsZV9pZF9kaWN0W3RhYmxlX2lkXSA9IHRydWU7XG5cdCAgICBcblx0ICAgIGxldCB2YWx1ZSA9IGAke3RhYmxlX2RlZi50YWJsZV92YWx1ZX1fJHt0YWJsZV9kZWYudmlld31fJHt0YWJsZV9pZH1gO1xuXHQgICAgbGV0IGxhYmVsO1xuXHQgICAgaWYgKHRhYmxlX2RlZi5mX2dldF9sYWJlbCA9PSBudWxsKSB7XG5cdFx0bGFiZWwgPSBgJHt0YWJsZV9kZWYudGl0bGV9IC0gJHtzb3VyY2VfdHlwZS5sYWJlbH0gJHttYWluX3NvdXJjZS5sYWJlbH1gO1xuXHQgICAgfSBlbHNlIHtcblx0XHRsYWJlbCA9IHRhYmxlX2RlZi5mX2dldF9sYWJlbCh0c19ncm91cClcblx0ICAgIH1cblx0ICAgIGNvbnN0IHRhYmxlX2NvbmZpZ19kZWYgPSB7XG5cdFx0dHNfZ3JvdXAsXG5cdFx0dGFibGVfZGVmLFxuXHRcdC8vIHRhYmxlX3ZhbHVlOiB0YWJsZV9kZWYudGFibGVfdmFsdWUsXG5cdFx0Ly8gdGFibGVfdmlldzogdGFibGVfZGVmLnZpZXcsXG5cdFx0XG5cdFx0dGFibGVfYnV0dG9uczogWyBdLFxuXHRcdGRhdGFfdXJsLFxuXHRcdGVuYWJsZV9zZWFyY2g6IHRydWUsXG5cdFx0dGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIHRhYmxlX2RlZi5kZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogdGFibGVfZGVmLmNvbHVtbkRlZnMgfHwgW10sXG4gICAgfVxuXHQgICAgfTtcblx0ICAgIC8vIGl0IHNob3VsZCBiZSBoZXJlIGluIHRoaXMgaW5zdGFuY2UgdGhlIHZ1ZXRpZnkgb2JqZWN0IHdpdGggaXRzIHByb3BlcnRpZXNcblx0ICAgIHRhYmxlX2NvbmZpZ19kZWYuY29sdW1uc19jb25maWcgPSB0YWJsZV9kZWYuY29sdW1ucy5tYXAoKGNvbHVtbikgPT4ge1xuXHRcdGxldCByZW5kZXJfaWZfY29udGV4dCA9IHtcblx0XHQgICAgaXNfaGlzdG9yeV9lbmFibGVkOiBwcm9wcy5pc19oaXN0b3J5X2VuYWJsZWRcblx0XHR9O1xuXHRcdGxldCBjID0ge1xuXHRcdCAgICB2aXNpYmxlOiAhY29sdW1uLnJlbmRlcl9pZiB8fCBjb2x1bW4ucmVuZGVyX2lmKHJlbmRlcl9pZl9jb250ZXh0KSxcblx0XHQgICAgLi4uY29sdW1uLFxuXHRcdH07XG5cdFx0aWYgKGMuY2xhc3NOYW1lID09IG51bGwpIHsgYy5jbGFzc05hbWUgPSBcInRleHQtbm93cmFwXCI7IH1cblx0XHRpZiAoYy5yZXNwb25zaXZlUHJpb3JpdHkgPT0gbnVsbCkgeyBjLnJlc3BvbnNpdmVQcmlvcml0eSA9IDE7IH1cblx0XHRjLnJlbmRlciA9IGNvbHVtbi5yZW5kZXIuYmluZCh7XG5cdFx0ICAgIGFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hLFxuXHRcdCAgICBhZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdCxcblx0XHQgICAgc291cmNlc190eXBlc19lbmFibGVkOiBwcm9wcy5zb3VyY2VzX3R5cGVzX2VuYWJsZWQsXG5cdFx0ICAgIHN0YXR1cywgc291cmNlX3R5cGUsICBzb3VyY2VfYXJyYXk6IHRzX2dyb3VwLnNvdXJjZV9hcnJheSxcblx0XHR9KTtcblx0XHRyZXR1cm4gYztcblx0ICAgIH0pO1xuXHQgICAgbGV0IG9wdGlvbiA9IHsgdmFsdWUsIGxhYmVsLCB0YWJsZV9jb25maWdfZGVmIH07XG5cdCAgICB0b3BfdGFibGVfb3B0aW9ucy52YWx1ZS5wdXNoKG9wdGlvbik7XG5cdH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlICE9IG51bGwgJiYgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT0gc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlLnZhbHVlKSkge1xuXHRyZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSA9IHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnRhYmxlX2NvbmZpZ19kZWYuZGVmYXVsdCA9PSB0cnVlKTtcbiAgICBpZiAoc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID09IG51bGwpIHtcblx0c2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID0gdG9wX3RhYmxlX29wdGlvbnMudmFsdWVbMF07XG4gICAgfVxufVxuXG5sZXQgc3RhdHNfY29sdW1ucyA9IFtcbiAgICB7IGlkOiBcIm1ldHJpY1wiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1ldHJpY1wiKSB9LFxuICAgIHsgaWQ6IFwiYXZnXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMuYXZlcmFnZVwiKSB9LFxuICAgIHsgaWQ6IFwicGVyY185NVwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLjk1X3BlcmNcIikgfSxcbiAgICB7IGlkOiBcIm1heFwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1heFwiKSB9LFxuICAgIHsgaWQ6IFwibWluXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMubWluXCIpIH0sXG4gICAgeyBpZDogXCJ0b3RhbFwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLnRvdGFsXCIpIH0sXG5dO1xuXG5jb25zdCBzdGF0c19yb3dzID0gcmVmKFtdKTtcblxuZnVuY3Rpb24gc2V0X3N0YXRzX3Jvd3ModHNfY2hhcnRzX29wdGlvbnMsIHRpbWVzZXJpZXNfZ3JvdXBzLCBzdGF0dXMpIHtcbiAgICBsZXQgZXh0ZW5kX3NlcmllX25hbWUgPSB0cnVlO1xuICAgIGVuYWJsZV9zdGF0c190YWJsZS52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzLm1hcCgodHNfZ3JvdXApID0+ICF0c19ncm91cC5zb3VyY2VfdHlwZS5kaXNhYmxlX3N0YXRzKS5yZWR1Y2UoKHJlcywgZWwpID0+IHJlcyB8IGVsLCBmYWxzZSk7XG4gICAgaWYgKCFlbmFibGVfc3RhdHNfdGFibGUudmFsdWUpIHsgcmV0dXJuOyB9XG4gICAgY29uc3QgZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUgPSAodHlwZSkgPT4ge1xuXHRpZiAodHlwZSA9PSBcImJwc1wiKSB7XG5cdCAgICByZXR1cm4gXCJieXRlc1wiO1xuXHQgICAgLy8gcmV0dXJuIFwiYnl0ZXNfbmV0d29ya1wiO1xuXHR9XG5cdHJldHVybiB0eXBlO1xuICAgIH07ICAgIFxuICAgIHN0YXRzX3Jvd3MudmFsdWUgPSBbXTtcbiAgICB0c19jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25zLCBpKSA9PiB7XG5cdGxldCB0c19ncm91cCA9IHRpbWVzZXJpZXNfZ3JvdXBzW2ldO1xuXHRpZiAodHNfZ3JvdXAuc291cmNlX3R5cGUuZGlzYWJsZV9zdGF0cyA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRvcHRpb25zLnNlcmllcy5mb3JFYWNoKChzLCBqKSA9PiB7XG5cdCAgICBsZXQgdHNfaWQgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVJZChzKTtcblx0ICAgIGxldCBzX21ldGFkYXRhID0gdHNfZ3JvdXAubWV0cmljLnRpbWVzZXJpZXNbdHNfaWRdO1xuXHQgICAgbGV0IGZvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcih0c19ncm91cC5tZXRyaWMubWVhc3VyZV91bml0KTtcblx0ICAgIGxldCB0c19zdGF0cztcblx0ICAgIGlmICh0c19ncm91cC5tZXRyaWMudHlwZSA9PSBcInRvcFwiKSB7XG5cdFx0dHNfc3RhdHMgPSBvcHRpb25zLnN0YXRpc3RpY3M7XG5cdCAgICB9IGVsc2UgaWYgKG9wdGlvbnM/LnN0YXRpc3RpY3M/LmJ5X3NlcmllPy5sZW5ndGggPiBqKSB7XG5cdFx0dHNfc3RhdHMgPSBvcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbal07XG5cdCAgICB9XG5cdCAgICBpZiAodHNfc3RhdHMgPT0gbnVsbCB8fCAodHNfZ3JvdXAubWV0cmljLnR5cGUgPT0gXCJ0b3BcIiAmJiBqID4gMCkpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBsZXQgbmFtZSA9IHRpbWVzZXJpZXNVdGlscy5nZXRTZXJpZU5hbWUoc19tZXRhZGF0YS5sYWJlbCwgdHNfaWQsIHRzX2dyb3VwLCBleHRlbmRfc2VyaWVfbmFtZSk7XG5cdCAgICBsZXQgdG90YWwgPSBudWxsO1xuXHQgICAgbGV0IHRvdGFsX2Zvcm1hdHRlcl90eXBlID0gZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUodHNfZ3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCk7XG5cdCAgICBsZXQgdG90YWxfZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKHRvdGFsX2Zvcm1hdHRlcl90eXBlKTtcblx0ICAgIGlmICh0c19zdGF0cy50b3RhbCAhPSBudWxsKSB7XG5cdFx0bGV0IGludGVydmFsID0gc3RhdHVzLmVwb2NoX2VuZCAtIHN0YXR1cy5lcG9jaF9iZWdpbjtcblx0XHR0b3RhbCA9IGludGVydmFsICogdHNfc3RhdHMuYXZlcmFnZTtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgbGV0IHJvdyA9IHtcblx0XHRtZXRyaWM6IG5hbWUsXG5cdFx0Ly8gdG90YWw6IHRvdGFsX2Zvcm1hdHRlcih0b3RhbCksXG5cdFx0dG90YWw6IHRvdGFsX2Zvcm1hdHRlcih0c19zdGF0cy50b3RhbCksXG5cdFx0cGVyY185NTogZm9ybWF0dGVyKHRzX3N0YXRzW1wiOTV0aF9wZXJjZW50aWxlXCJdKSxcblx0XHRhdmc6IGZvcm1hdHRlcih0c19zdGF0cy5hdmVyYWdlKSxcblx0XHRtYXg6IGZvcm1hdHRlcih0c19zdGF0cy5tYXhfdmFsKSxcblx0XHRtaW46IGZvcm1hdHRlcih0c19zdGF0cy5taW5fdmFsKSxcblx0ICAgIH07XG5cdCAgICBzdGF0c19yb3dzLnZhbHVlLnB1c2gocm93KTtcblx0fSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX2NvbHVtbihjb2wpIHtcbiAgICByZXR1cm4gY29sLmxhYmVsO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19yb3coY29sLCByb3cpIHtcbiAgICBsZXQgbGFiZWwgPSByb3dbY29sLmlkXTtcbiAgICByZXR1cm4gbGFiZWw7XG59XG5cbmZ1bmN0aW9uIGp1bXBfdG9faGlzdG9yaWNhbF9mbG93cygpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgcGFyYW1zID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IGhpc3RvcmljYWxfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGhpc3RvcmljYWxfdXJsKTtcbn1cblxuY29uc3QgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uID0gcmVmKG51bGwpO1xuZnVuY3Rpb24gc2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb24oKSB7XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9kb3dubG9hZF9maWxlKCkge1xuICAgIGlmICghdHNfY2hhcnRzX29wdGlvbnM/Lmxlbmd0aCkgeyByZXR1cm47IH0gXG4gICAgbGV0IHRzX2dyb3VwID0gbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWRbMF07XG4gICAgbGV0IGZpbGVuYW1lID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllTmFtZShudWxsLCBudWxsLCB0c19ncm91cCk7XG4gICAgbW9kYWxfZG93bmxvYWRfZmlsZS52YWx1ZS5zaG93KGZpbGVuYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRfY2hhcnRfcG5nKGZpbGVuYW1lKSB7XG4gICAgbGV0IGNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UgPSBjaGFydHMudmFsdWUubWFwKGFzeW5jIChjaGFydCkgPT4ge1xuICAgIFx0bGV0IGRhdGFfdXJpID0gYXdhaXQgY2hhcnQuZ2V0X2RhdGFfdXJpKCk7XG4gICAgXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIFx0ICAgIGxldCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIFx0ICAgIGltYWdlLnNyYyA9IGRhdGFfdXJpO1xuICAgIFx0ICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIFx0XHRyZXNvbHZlKGltYWdlKTtcbiAgICBcdCAgICB9O1x0ICAgIFxuICAgIFx0fSk7XG4gICAgfSk7XG4gICAgbGV0IGhlaWdodCA9IDA7XG4gICAgbGV0IGNoYXJ0X2ltYWdlX2FycmF5ID0gYXdhaXQgUHJvbWlzZS5hbGwoY2hhcnRfaW1hZ2VfYXJyYXlfcHJvbWlzZSk7XG4gICAgY2hhcnRfaW1hZ2VfYXJyYXkuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICBcdGhlaWdodCArPSBpbWFnZS5oZWlnaHQ7XG4gICAgfSk7IFxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBsZXQgY2FudmFzX2NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjYW52YXMud2lkdGggPSBjaGFydF9pbWFnZV9hcnJheVswXS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGhlaWdodCA9IDA7XG4gICAgY2hhcnRfaW1hZ2VfYXJyYXkuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICBcdGNhbnZhc19jb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgaGVpZ2h0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcbiAgICBcdGhlaWdodCArPSBpbWFnZS5oZWlnaHQ7XG4gICAgfSk7XG4gICAgbnRvcG5nX3V0aWxpdHkuZG93bmxvYWRfVVJJKGNhbnZhcy50b0RhdGFVUkwoKSwgZmlsZW5hbWUpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5pbmxpbmUge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuICAuc2VsZWN0Mi1zaXplIHtcbiAgICBtaW4td2lkdGg6IDE4cmVtO1xuICB9XG48L3N0eWxlPlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBtYi0yXCI+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzIGNhcmQtaGVhZGVyLXRhYnNcIiByb2xlPVwidGFibGlzdFwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFiIGluIHRhYl9saXN0XCI+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidGFiLmFjdGl2ZVwiPlxuXHQgICAgICAgIDxsaSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG4gICAgICAgICAgICB7eyB0YWIudGl0bGUgfX1cbiAgICAgICAgICA8L2xpPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuXHQgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuXHQgICAgICAgIDxhIEBjbGljaz1cImNoYW5nZV90YWIodGFiKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG5cdCAgICAgICAgPC9hPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0YWJfbGlzdDogQXJyYXksXG4gIH0sXG4gIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIGNyZWF0ZWQoKSB7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9sZF90YWI6IG51bGxcbiAgICB9O1xuICB9LFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgbW91bnRlZCgpIHtcbiAgICBsZXQgdG1wXG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYodGFiLmFjdGl2ZSkge1xuICAgICAgICB0bXAgPSB0YWJcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYodG1wID09IHVuZGVmaW5lZClcbiAgICAgIHRtcCA9IHRoaXMudGFiX2xpc3RbMF1cblxuICAgIHRoaXMub2xkX3RhYiA9IHRtcC5pZCB8fCB0bXAubmFtZVxuICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2hhbmdlX3RhYjogZnVuY3Rpb24odGFiKSB7XG4gICAgICBpZigoIXRhYi5pZCB8fCB0aGlzLm9sZF90YWIgIT0gdGFiLmlkKSAmJlxuICAgICAgICAgKCF0YWIubmFtZSB8fCB0aGlzLm9sZF90YWIgIT0gdGFiLm5hbWUpKSB7XG4gICAgICAgIHRoaXMub2xkX3RhYiA9IHRhYi5pZCB8fCB0YWIubmFtZVxuICAgICAgICB0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgdGFiKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImNhcmQtaGVhZGVyIG1iLTJcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXYgbmF2LXRhYnMgY2FyZC1oZWFkZXItdGFic1wiIHJvbGU9XCJ0YWJsaXN0XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJ0YWIgaW4gdGFiX2xpc3RcIj5cblx0ICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ0YWIuYWN0aXZlXCI+XG5cdCAgICAgICAgPGxpIEBjbGljaz1cImNoYW5nZV90YWIodGFiKVwiIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHRhYi5hY3RpdmUgfVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cbiAgICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuICAgICAgICAgIDwvbGk+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG5cdCAgICAgICAgPGEgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgaHJlZj1cIiNcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG5cdCAgICAgICAgICB7eyB0YWIudGl0bGUgfX1cblx0ICAgICAgICA8L2E+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvdWw+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIGNvbXBvbmVudHM6IHtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBpZDogU3RyaW5nLFxuICAgIHRhYl9saXN0OiBBcnJheSxcbiAgfSxcbiAgZW1pdHM6IFtcImNsaWNrX2l0ZW1cIl0sXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgY3JlYXRlZCgpIHtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb2xkX3RhYjogbnVsbFxuICAgIH07XG4gIH0sXG4gIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBtb3VudGVkKCkge1xuICAgIGxldCB0bXBcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goZnVuY3Rpb24odGFiKSB7XG4gICAgICBpZih0YWIuYWN0aXZlKSB7XG4gICAgICAgIHRtcCA9IHRhYlxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZih0bXAgPT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdGhpcy50YWJfbGlzdFswXVxuXG4gICAgdGhpcy5vbGRfdGFiID0gdG1wLmlkIHx8IHRtcC5uYW1lXG4gICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBjaGFuZ2VfdGFiOiBmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKCghdGFiLmlkIHx8IHRoaXMub2xkX3RhYiAhPSB0YWIuaWQpICYmXG4gICAgICAgICAoIXRhYi5uYW1lIHx8IHRoaXMub2xkX3RhYiAhPSB0YWIubmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbGRfdGFiID0gdGFiLmlkIHx8IHRhYi5uYW1lXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCB0YWIpXG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAge3tib2R5fX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKCdkZWxldGUnKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZGVsZXRlJ10pXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGRlbGV0ZV8gPSAoKSA9PiB7XG4gICAgZW1pdCgnZGVsZXRlJyk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdhc3NldF9mYW1pbHknLCB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmFzc2V0X2ZhbWlseSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8ICdzdGFuZGFyZCdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfYXNzZXRfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiXCIsIGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0cycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgYXNzZXRfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2ZhbWlseVwiKSwgbmFtZTogJ2ZhbWlseScsIGRhdGE6ICdmYW1pbHknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDMgLyogTGFzdCBTZWVuICovLCAnZGVzYycgXV0gfVxuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLmxhYmVsIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X3RvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2luX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X291dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgMSAvKiBUb3RhbCBFZGdlcyAqLywgJ2Rlc2MnIF1dIH1cbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcblxuICBjb25zb2xlLmxvZyhjb25maWdEZXZpY2VzKVxuICBjb25zb2xlLmxvZyhjZW50cmFsaXR5Q29uZmlnRGV2aWNlcylcbiAgXG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY2VudHJhbGl0eUNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdhc3NldF9mYW1pbHknLCB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmFzc2V0X2ZhbWlseSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8ICdzdGFuZGFyZCdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfYXNzZXRfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiXCIsIGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0cycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgYXNzZXRfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2ZhbWlseVwiKSwgbmFtZTogJ2ZhbWlseScsIGRhdGE6ICdmYW1pbHknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDMgLyogTGFzdCBTZWVuICovLCAnZGVzYycgXV0gfVxuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLmxhYmVsIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X3RvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2luX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X291dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgMSAvKiBUb3RhbCBFZGdlcyAqLywgJ2Rlc2MnIF1dIH1cbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcblxuICBjb25zb2xlLmxvZyhjb25maWdEZXZpY2VzKVxuICBjb25zb2xlLmxvZyhjZW50cmFsaXR5Q29uZmlnRGV2aWNlcylcbiAgXG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY2VudHJhbGl0eUNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInBlcmlvZGljaXR5LXRhYmxlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiXG4gICAgICAgICAgICA6YmFzZV91cmw9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6YmFzZV9wYXJhbXM9XCJ1cmxfcGFyYW1zXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfYWRtaW5cIiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHsgIFxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgIFxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYmFzZV91cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3BlcmlvZGljaXR5YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh1cmxfcGFyYW1zKVxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSBudWxsXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5sYXN0X3NlZW4nKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5jbGllbnQnKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uuc2VydmVyJyksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnBvcnQnKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucHJvdG9jb2wnKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZmlyc3Rfc2VlbicpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uub2JzZXJ2YXRpb25zJyksIG5hbWU6ICdvYnNlcnZhdGlvbnMnLCBkYXRhOiAnb2JzZXJ2YXRpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZyZXF1ZW5jeScpLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiB0cnVlLCByZXNwb25zaXZlUHJpb3JpdHk6IDQsIHJlbmRlcjogKCBkYXRhLCB0eXBlLCByb3cgKSA9PiB7XG4gICAgICAgIHJldHVybiAodHlwZSA9PSBcInNvcnRcIiB8fCB0eXBlID09ICd0eXBlJykgPyBkYXRhIDogZGF0YSArIFwiIHNlY1wiOyBcbiAgICAgIH1cbiAgICB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNiAvKiBPYnNlcnZhdGlvbiBjb2x1bW4gKi9cblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInBlcmlvZGljaXR5LXRhYmxlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiXG4gICAgICAgICAgICA6YmFzZV91cmw9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6YmFzZV9wYXJhbXM9XCJ1cmxfcGFyYW1zXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfYWRtaW5cIiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHsgIFxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgIFxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYmFzZV91cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3BlcmlvZGljaXR5YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh1cmxfcGFyYW1zKVxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSBudWxsXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5sYXN0X3NlZW4nKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5jbGllbnQnKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uuc2VydmVyJyksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnBvcnQnKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucHJvdG9jb2wnKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZmlyc3Rfc2VlbicpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uub2JzZXJ2YXRpb25zJyksIG5hbWU6ICdvYnNlcnZhdGlvbnMnLCBkYXRhOiAnb2JzZXJ2YXRpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZyZXF1ZW5jeScpLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiB0cnVlLCByZXNwb25zaXZlUHJpb3JpdHk6IDQsIHJlbmRlcjogKCBkYXRhLCB0eXBlLCByb3cgKSA9PiB7XG4gICAgICAgIHJldHVybiAodHlwZSA9PSBcInNvcnRcIiB8fCB0eXBlID09ICd0eXBlJykgPyBkYXRhIDogZGF0YSArIFwiIHNlY1wiOyBcbiAgICAgIH1cbiAgICB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNiAvKiBPYnNlcnZhdGlvbiBjb2x1bW4gKi9cblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgXG4qL1xuXG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0geyBcbiAgYXV0b1Jlc2l6ZTogdHJ1ZSwgXG4gIG5vZGVzOiB7IFxuICAgICAgc2hhcGU6IFwiZG90XCIsIFxuICAgICAgc2NhbGluZzoge1xuICAgICAgICAgIG1pbjogMTAsXG4gICAgICAgICAgbWF4OiAzMCxcbiAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICBtaW46IDE1LFxuICAgICAgICAgICAgICBtYXg6IDE1LFxuICAgICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc2hhZG93OiBmYWxzZSxcbiAgfSxcbiAgZWRnZXM6IHtcbiAgICAgIHdpZHRoOiAwLjE1LFxuICAgICAgY29sb3I6IHsgaW5oZXJpdDogXCJmcm9tXCIgfSxcbiAgICAgIHNtb290aDoge1xuICAgICAgICAgIHR5cGU6IFwiY29udGludW91c1wiLFxuICAgICAgICAgIHJvdW5kbmVzczogMFxuICAgICAgfSxcbiAgfSxcbiAgaW50ZXJhY3Rpb246IHtcbiAgICAgIHRvb2x0aXBEZWxheTogMTUwLFxuICAgICAgaGlkZUVkZ2VzT25EcmFnOiB0cnVlLFxuICAgICAgaGlkZUVkZ2VzT25ab29tOiB0cnVlLFxuICAgICAgaG92ZXI6IHRydWUsXG4gICAgICB0b29sdGlwRGVsYXk6IDAsXG4gIH0sXG4gIHBoeXNpY3M6IHtcbiAgICBiYXJuZXNIdXQ6IHtcbiAgICAgICAgc3ByaW5nQ29uc3RhbnQ6IDAsXG4gICAgICAgIGF2b2lkT3ZlcmxhcDogMC4zLFxuICAgICAgICBncmF2aXRhdGlvbmFsQ29uc3RhbnQ6IC0xMDAwLFxuICAgICAgICBkYW1waW5nOiAwLjY1LFxuICAgICAgICBjZW50cmFsR3Jhdml0eTogMFxuICAgIH0sXG4gICAgc3RhYmlsaXphdGlvbjoge1xuICAgICAgICBvbmx5RHluYW1pY0VkZ2VzOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgZ3JvdXBzOiB7XG4gICAgICB1bmtub3duOiB7XG4gICAgICAgICAgc2hhcGU6IFwiZG90XCIsXG4gICAgICB9LFxuICAgICAgcHJpbnRlcjoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYwMmZcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHZpZGVvOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjAzZFwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgd29ya3N0YXRpb246IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMTA5XCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBsYXB0b3A6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMTA5XCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB0YWJsZXQ6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMTBhXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBwaG9uZToge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYxMGJcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHR2OiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjI2Y1wiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgbmV0d29ya2luZzoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiBcIidGb250QXdlc29tZSdcIixcbiAgICAgICAgICBjb2RlOiBcIlxcdWYwYjJcIixcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHdpZmk6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMWViXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBuYXM6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogXCInRm9udEF3ZXNvbWUnXCIsXG4gICAgICAgICAgY29kZTogXCJcXHVmMWMwXCIsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBtdWx0aW1lZGlhOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZjAwMVwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgaW90OiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6IFwiJ0ZvbnRBd2Vzb21lJ1wiLFxuICAgICAgICAgIGNvZGU6IFwiXFx1ZTAxMlwiLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG50b3BuZ19tYXBfbWFuYWdlciA9IHtcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgc3RhdHVzIG9mIGEgc2VydmljZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VfaWQgaWQgb2YgdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdfc3RhdGUgaWQgb2YgdGhlIG5ldyBzdGF0dXMgb2YgdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBzdWNjZXNzLlxuICAgKi9cbiAgdG9nZ2xlX3N0YXRlOiBmdW5jdGlvbihzZXJ2aWNlX2lkLCBuZXdfc3RhdGUsIGNhbGxiYWNrLCBjc3JmKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9ICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3N3aXRjaF9zZXJ2aWNlX3N0YXRlLmx1YWAsIHsgXG4gICAgICBzZXJ2aWNlX2lkOiBzZXJ2aWNlX2lkLCBzZXJ2aWNlX3N0YXR1czogbmV3X3N0YXRlLCBjc3JmOiBjc3JmXG4gICAgfSk7XG4gICAgcmVxdWVzdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICBpZihkYXRhLnN1Y2Nlc3MgJiYgY2FsbGJhY2spIFxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9LFxuICBnZXRfZGVmYXVsdF9vcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG4gIH0sXG59XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX3NlcnZpY2Vfc3RhbmRhcmRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX2NlbnRyYWxpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuPCEtLVxuICAgICAgICB7JSBpZiBpc19hZG1pbiB0aGVuICV9XG4gICAgICAgICAgPGZvcm0gY2xhc3M9XCJkLWlubGluZVwiIGlkPSdzd2l0Y2gtc3RhdGUtZm9ybSc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGQtaW5saW5lXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD57KiBpMThuKFwibWFwX3BhZ2Uuc2V0X3N0YXRlXCIsIHtsYWJlbCA9IFwiPHNwYW4gY2xhc3M9J2NvdW50Jz48L3NwYW4+XCJ9KSAqfTwvbGFiZWw+XG4gICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cIm5ld19zdGF0ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgZC1pbmxpbmVcIiBzdHlsZT1cIndpZHRoOiAxNnJlbVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgIHslIGZvciBfLCBzdGF0dXMgaW4gcGFpcnNCeUZpZWxkKG1hcC5maWx0ZXJzLnNlcnZpY2Vfc3RhdHVzX2ZpbHRlcnMsIGxhYmVsLCBhc2NfaW5zZW5zaXRpdmUpIGRvICV9XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7IHN0YXR1cy5pZCB9fVwiPnsqIHN0YXR1cy5sYWJlbCAqfTwvb3B0aW9uPlxuICAgICAgICAgICAgICB7JSBlbmQgJX1cbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBkLWlubGluZVwiIGNsYXNzPVwiYnRuLXN3aXRjaC1zdGF0ZVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcmFuZG9tXCI+PC9pPiB7eyBpMThuKFwic2V0XCIpIH19XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICB7JSBlbmQgJX1cbiAgICAtLT4gXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwic2VydmljZV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmNvbnN0IGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGhpcy4kcHJvcHMudXJsX3BhcmFtcy52aWV3XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJcIiwgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYik7XG4gICAgICB0YWJsZS5kZWxldGVfYnV0dG9uX2hhbmRsZXJzKHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9IHRhYjtcbiAgICB9KTtcbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIHNlcnZpY2VfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgIH0sIFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZWxldGVfYnV0dG9uX2hhbmRsZXJzKHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCwgaXRlbS5pZCk7XG4gICAgfSxcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbnM6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcbiAgICAgIGNvbnN0IHJlbG9hZCA9IHRoaXMucmVsb2FkX3RhYmxlXG4gICAgICBjb25zdCBjc3JmID0gdGhpcy4kcHJvcHMucGFnZV9jc3JmXG4gICAgICBjb25zdCB0b2dnbGVfYWxsb3dlZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV9kZW5pZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzFdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0b2dnbGVfdW5kZWNpZGVkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsyXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBkYXRhO1xuICAgICAgY29uc3QgY3VycmVudFN0YXR1cyA9IHNlcnZpY2UuYWNjZXB0YW5jZVxuICAgICAgY29uc3QgYWxsb3dlZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzBdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfYWxsb3dlZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgZGVuaWVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9kZW5pZWRfc3RhdGUgfTtcbiAgICAgIGNvbnN0IHVuZGVjaWRlZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtIGRpc2FibGVkJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfdW5kZWNpZGVkX3N0YXRlIH07XG4gICAgICBcbiAgICAgIHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuICAgICAgICBjYXNlIDA6IC8qIEFsbG93ZWQgKi8gICB7IGFsbG93ZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUnOyBicmVhazsgfVxuICAgICAgICBjYXNlIDE6IC8qIERlbmllZCAqLyAgICB7IGRlbmllZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMjogLyogVW5kZWNpZGVkICovIHsgdW5kZWNpZGVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlIGRpc2FibGVkJzsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFt1bmRlY2lkZWRCdXR0b24sIGFsbG93ZWRCdXR0b24sIGRlbmllZEJ1dHRvbl0pO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfc2VydmljZV8ke3RoaXMuc2VydmljZV90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fc3RhbmRhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHN3aXRjaF90b19jZW50cmFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnY2VudHJhbGl0eSdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLnNlcnZpY2VfdGFibGVfdGFiO1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubGFzdF9zZWVuXCIpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS52YWx1ZSB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucG9ydFwiKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnByb3RvY29sXCIpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuZmlyc3Rfc2VlblwiKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5udW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIHJlc3BvbnNpdmVQcmlvcml0eTogNSB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNiAvKiBOdW0gVXNlcyAqL1xuXG4gIGlmKERhdGF0YWJsZVZ1ZS5pc19hZG1pbikge1xuICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zdGF0dXNcIiksIG5hbWU6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBkYXRhOiAnc2VydmljZV9hY2NlcHRhbmNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbnMoZGF0YSwgdHlwZSwgc2VydmljZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuICAvKiBDZW50cmFsaXR5IHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2VudHJhbGl0eScgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKVxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaG9zdFwiKSwgbmFtZTogJ2hvc3QnLCBkYXRhOiAnaG9zdCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UudG90YWxfZWRnZXNcIiksIG5hbWU6ICd0b3RhbF9lZGdlcycsIGRhdGE6ICd0b3RhbF9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucmFua1wiKSwgbmFtZTogJ3JhbmsnLCBkYXRhOiAncmFuaycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5fZWRnZXNcIiksIG5hbWU6ICdpbl9lZGdlcycsIGRhdGE6ICdpbl9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uub3V0X2VkZ2VzXCIpLCBuYW1lOiAnb3V0X2VkZ2VzJywgZGF0YTogJ291dF9lZGdlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAyIC8qIFJhbmsgKi9cbiAgdGFibGVfY29uZmlnLm9yZGVyID0gW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX3NlcnZpY2Vfc3RhbmRhcmRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX2NlbnRyYWxpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuPCEtLVxuICAgICAgICB7JSBpZiBpc19hZG1pbiB0aGVuICV9XG4gICAgICAgICAgPGZvcm0gY2xhc3M9XCJkLWlubGluZVwiIGlkPSdzd2l0Y2gtc3RhdGUtZm9ybSc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGQtaW5saW5lXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD57KiBpMThuKFwibWFwX3BhZ2Uuc2V0X3N0YXRlXCIsIHtsYWJlbCA9IFwiPHNwYW4gY2xhc3M9J2NvdW50Jz48L3NwYW4+XCJ9KSAqfTwvbGFiZWw+XG4gICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cIm5ld19zdGF0ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgZC1pbmxpbmVcIiBzdHlsZT1cIndpZHRoOiAxNnJlbVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgIHslIGZvciBfLCBzdGF0dXMgaW4gcGFpcnNCeUZpZWxkKG1hcC5maWx0ZXJzLnNlcnZpY2Vfc3RhdHVzX2ZpbHRlcnMsIGxhYmVsLCBhc2NfaW5zZW5zaXRpdmUpIGRvICV9XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7IHN0YXR1cy5pZCB9fVwiPnsqIHN0YXR1cy5sYWJlbCAqfTwvb3B0aW9uPlxuICAgICAgICAgICAgICB7JSBlbmQgJX1cbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBkLWlubGluZVwiIGNsYXNzPVwiYnRuLXN3aXRjaC1zdGF0ZVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcmFuZG9tXCI+PC9pPiB7eyBpMThuKFwic2V0XCIpIH19XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICB7JSBlbmQgJX1cbiAgICAtLT4gXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwic2VydmljZV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmNvbnN0IGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGhpcy4kcHJvcHMudXJsX3BhcmFtcy52aWV3XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJcIiwgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYik7XG4gICAgICB0YWJsZS5kZWxldGVfYnV0dG9uX2hhbmRsZXJzKHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9IHRhYjtcbiAgICB9KTtcbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIHNlcnZpY2VfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgIH0sIFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZWxldGVfYnV0dG9uX2hhbmRsZXJzKHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCwgaXRlbS5pZCk7XG4gICAgfSxcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbnM6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcbiAgICAgIGNvbnN0IHJlbG9hZCA9IHRoaXMucmVsb2FkX3RhYmxlXG4gICAgICBjb25zdCBjc3JmID0gdGhpcy4kcHJvcHMucGFnZV9jc3JmXG4gICAgICBjb25zdCB0b2dnbGVfYWxsb3dlZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV9kZW5pZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzFdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0b2dnbGVfdW5kZWNpZGVkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsyXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBkYXRhO1xuICAgICAgY29uc3QgY3VycmVudFN0YXR1cyA9IHNlcnZpY2UuYWNjZXB0YW5jZVxuICAgICAgY29uc3QgYWxsb3dlZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzBdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfYWxsb3dlZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgZGVuaWVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9kZW5pZWRfc3RhdGUgfTtcbiAgICAgIGNvbnN0IHVuZGVjaWRlZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtIGRpc2FibGVkJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfdW5kZWNpZGVkX3N0YXRlIH07XG4gICAgICBcbiAgICAgIHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuICAgICAgICBjYXNlIDA6IC8qIEFsbG93ZWQgKi8gICB7IGFsbG93ZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUnOyBicmVhazsgfVxuICAgICAgICBjYXNlIDE6IC8qIERlbmllZCAqLyAgICB7IGRlbmllZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMjogLyogVW5kZWNpZGVkICovIHsgdW5kZWNpZGVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlIGRpc2FibGVkJzsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFt1bmRlY2lkZWRCdXR0b24sIGFsbG93ZWRCdXR0b24sIGRlbmllZEJ1dHRvbl0pO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfc2VydmljZV8ke3RoaXMuc2VydmljZV90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fc3RhbmRhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHN3aXRjaF90b19jZW50cmFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnY2VudHJhbGl0eSdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLnNlcnZpY2VfdGFibGVfdGFiO1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubGFzdF9zZWVuXCIpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS52YWx1ZSB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucG9ydFwiKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnByb3RvY29sXCIpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuZmlyc3Rfc2VlblwiKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5udW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIHJlc3BvbnNpdmVQcmlvcml0eTogNSB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNiAvKiBOdW0gVXNlcyAqL1xuXG4gIGlmKERhdGF0YWJsZVZ1ZS5pc19hZG1pbikge1xuICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zdGF0dXNcIiksIG5hbWU6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBkYXRhOiAnc2VydmljZV9hY2NlcHRhbmNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbnMoZGF0YSwgdHlwZSwgc2VydmljZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuICAvKiBDZW50cmFsaXR5IHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2VudHJhbGl0eScgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKVxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaG9zdFwiKSwgbmFtZTogJ2hvc3QnLCBkYXRhOiAnaG9zdCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UudG90YWxfZWRnZXNcIiksIG5hbWU6ICd0b3RhbF9lZGdlcycsIGRhdGE6ICd0b3RhbF9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucmFua1wiKSwgbmFtZTogJ3JhbmsnLCBkYXRhOiAncmFuaycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5fZWRnZXNcIiksIG5hbWU6ICdpbl9lZGdlcycsIGRhdGE6ICdpbl9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uub3V0X2VkZ2VzXCIpLCBuYW1lOiAnb3V0X2VkZ2VzJywgZGF0YTogJ291dF9lZGdlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAyIC8qIFJhbmsgKi9cbiAgdGFibGVfY29uZmlnLm9yZGVyID0gW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiBpZD1cImVtcHR5LW1hcC1tZXNzYWdlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgaGlkZGVuPlxuICB7eyBlbXB0eV9tZXNzYWdlIH19XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcmVzaXphYmxlLXktY29udGFpbmVyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiA2MHZoO1wiIDppZD1tYXBfaWQ+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmNvbnN0IE1JTl9TQ0FMRSA9IDAuMTU7XG5jb25zdCBkYXRhUmVxdWVzdCA9IHsgXG4gIGlmaWQ6IHByb3BzLnVybF9wYXJhbXMuaWZpZCwgXG4gIGFjdGlvbjogJ2xvYWRfZ3JhcGgnLCBcbiAgbWFwOiBwcm9wcy51cmxfcGFyYW1zLm1hcF9pZFxufTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGVtcHR5X21lc3NhZ2U6IFN0cmluZyxcbiAgZXZlbnRfbGlzdGVuZXJzOiBPYmplY3QsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmw6IFN0cmluZyxcbiAgdXJsX3BhcmFtczogT2JqZWN0LFxuICBtYXBfaWQ6IFN0cmluZyxcbn0pO1xuXG5sZXQgbmV0d29yayA9IG51bGw7XG5sZXQgbm9kZXNfZGF0YXNldCA9IHt9O1xubGV0IGVkZ2VzX2RhdGFzZXQgPSB7fTtcbmxldCBjb250YWluZXIgPSBudWxsO1xubGV0IG1heF9lbnRyaWVzID0gZmFsc2U7XG5sZXQgdXBkYXRlX3ZpZXdfc3RhdGVfaWQgPSBudWxsO1xubGV0IHVybF9wYXJhbXMgPSB7fTtcbmxldCBpc19kZXN0cm95ZWQgPSBmYWxzZTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgbG9hZF9zY2FsZSgpO1xuICB1cmxfcGFyYW1zID0gcHJvcHMudXJsX3BhcmFtcztcbiAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJvcHMubWFwX2lkKTtcbiAgXG4gIC8vIGlmIGFuIGhvc3QgaGFzIGJlZW4gZGVmaW5lZCBpbnNpZGUgdGhlIFVSTCBxdWVyeSB0aGVuIGFkZCBpdCB0byB0aGUgcmVxdWVzdFxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocHJvcHMudXJsLCB1cmxfcGFyYW1zKTsgXG4gIGF3YWl0ICQuZ2V0KHVybCwgZGF0YVJlcXVlc3QsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgY29uc3Qge25vZGVzLCBlZGdlcywgbWF4X2VudHJ5X3JlYWNoZWR9ID0gcmVzcG9uc2UucnNwO1xuICAgIG1heF9lbnRyaWVzID0gbWF4X2VudHJ5X3JlYWNoZWQ7XG4gICAgbm9kZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChub2Rlcyk7XG4gICAgZWRnZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChlZGdlcyk7XG4gICAgY29uc3QgZGF0YXNldHMgPSB7bm9kZXM6IG5vZGVzX2RhdGFzZXQsIGVkZ2VzOiBlZGdlc19kYXRhc2V0fTtcbiAgICBlbXB0eV9uZXR3b3JrKGRhdGFzZXRzKTtcbiAgICBuZXR3b3JrID0gbmV3IHZpcy5OZXR3b3JrKGNvbnRhaW5lciwgZGF0YXNldHMsIG50b3BuZ19tYXBfbWFuYWdlci5nZXRfZGVmYXVsdF9vcHRpb25zKCkpO1xuICAgIHNhdmVfdG9wb2xvZ3lfdmlldygpO1xuICAgIHNldF9ldmVudF9saXN0ZW5lcigpO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQpO1xuXHR9KTtcbn0pXG5cbm9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gIGlmIChpc19kZXN0cm95ZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgZGVzdHJveSgpO1xufSk7XG5cbmNvbnN0IGp1bXBfdG9faG9zdCA9IChwYXJhbXMpID0+IHtcbiAgY29uc3QgdG1wSG9zdCA9IHBhcmFtcy5pZC5zcGxpdCgnQCcpXG4gIHVybF9wYXJhbXNbJ2hvc3QnXSA9IHRtcEhvc3RbMF1cbiAgdXJsX3BhcmFtc1sndmxhbl9pZCddID0gdG1wSG9zdFsxXVxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2hvc3QnLCB1cmxfcGFyYW1zWydob3N0J10pO1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZsYW5faWQnLCB1cmxfcGFyYW1zWyd2bGFuX2lkJ10pO1xuICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIHBhcmFtcylcbiAgcmVsb2FkKCk7XG59XG5cbmNvbnN0IGVtcHR5X25ldHdvcmsgPSAoZGF0YXNldHMpID0+IHtcbiAgaWYoZGF0YXNldHMubm9kZXMubGVuZ3RoID09IDAgJiYgZGF0YXNldHMuZWRnZXMubGVuZ3RoID09IDApIHtcbiAgICAkKGAjZW1wdHktbWFwLW1lc3NhZ2VgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKTtcbiAgfSBlbHNlIHtcbiAgICAkKGAjZW1wdHktbWFwLW1lc3NhZ2VgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJyk7XG4gIH1cbn1cblxuY29uc3QgbG9hZF9zY2FsZSA9ICgpID0+IHtcbiAgLy8gbG9hZCBvbGQgc2NhbGUgZm9yIHJlc2l6YWJsZSBjb250YWluZXJzXG4gIGNvbnN0IG9sZFNjYWxlID0gTnRvcFV0aWxzLmxvYWRFbGVtZW50U2NhbGUoJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApKVxuXG4gIGlmKG9sZFNjYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKG9sZFNjYWxlLndpZHRoKTtcbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodChvbGRTY2FsZS5oZWlnaHQpO1xuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkub24oJ21vdXNldXAnLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gIH0pO1xuXG4gICQoYGJ1dHRvbltkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl1gKS50b29sdGlwKCk7XG59XG5cbmNvbnN0IHNldF9ldmVudF9saXN0ZW5lciA9ICgpID0+IHtcbiAgLyogRGVmYXVsdCBldmVudCBsaXN0ZW5lcnMgKi9cbiAgbmV0d29yay5vbignaG92ZXJFZGdlJywgZnVuY3Rpb24oKSB7XG4gICAgJChgLnZpcy10b29sdGlwYCkuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXG4gIH0pO1xuICBcbiAgbmV0d29yay5vbihcImRvdWJsZUNsaWNrXCIsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBqdW1wX3RvX2hvc3Qobm9kZXNfZGF0YXNldC5nZXQocGFyYW1zLm5vZGVzWzBdKSlcbiAgfSk7XG5cbiAgbmV0d29yay5vbignem9vbScsIGZ1bmN0aW9uKGUpIHtcbiAgICB1cGRhdGVfdmlld19zdGF0ZV9pZCA9IHpvb21faW5fYW5kX3NhdmVfdG9wb2xvZ3koKVxuICB9KTtcblxuICBuZXR3b3JrLm9uKFwiZHJhZ0VuZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgZHJhZygpXG4gIH0pO1xuXG4gIC8qIEdpdmVuIGV2ZW50IGxpc3RlbmVycyAqL1xuICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLmV2ZW50X2xpc3RlbmVycyB8fCB7fSkpIHtcbiAgICBuZXR3b3JrLm9uKGl0ZW0sIHByb3BzLmV2ZW50X2xpc3RlbmVyc1tpdGVtXSk7XG4gIH1cbn1cblxuY29uc3Qgc2F2ZV90b3BvbG9neV92aWV3ID0gKCkgPT4ge1xuICBpZighbmV0d29yaykgcmV0dXJuO1xuICAvLyBnZXQgYWxsIG5vZGVzIHBvc2l0aW9uXG4gIGNvbnN0IHBvc2l0aW9ucyA9IG5ldHdvcmsuZ2V0UG9zaXRpb25zKG5ldHdvcmsuYm9keS5kYXRhLm5vZGVzLm1hcCh4ID0+IHguaWQpKTtcblxuICAvLyBzYXZlIHRoZSBub2RlcyBwb3NpdGlvbiwgdGhlIG5ldHdvcmsgc2NhbGUgYW5kIHRoZSBuZXR3b3JrIHZpZXcgcG9zaXRpb25cbiAgY29uc3QgaW5mbyA9IHtcbiAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucyxcbiAgICBuZXR3b3JrOiB7XG4gICAgICBzY2FsZTogbmV0d29yay5nZXRTY2FsZSgpLFxuICAgICAgcG9zaXRpb246IG5ldHdvcmsuZ2V0Vmlld1Bvc2l0aW9uKClcbiAgICB9XG4gIH07XG5cbiAgJC5wb3N0KHByb3BzLnVybCwge1xuICAgIC4uLnVybF9wYXJhbXMsXG4gICAgLi4ueyBcbiAgICAgIGNzcmY6IHByb3BzLnBhZ2VfY3NyZixcbiAgICAgIEpTT046IEpTT04uc3RyaW5naWZ5KGluZm8pLCBcbiAgICAgIGFjdGlvbjogJ3NhdmVfdmlldycgXG4gICAgfVxuICB9KTtcbn1cblxuY29uc3Qgem9vbV9pbl9hbmRfc2F2ZV90b3BvbG9neSA9ICgpID0+IHtcbiAgaWYgKG5ldHdvcmsuZ2V0U2NhbGUoKSA8PSBNSU5fU0NBTEUpIHtcbiAgICBuZXR3b3JrLm1vdmVUbyh7XG4gICAgICBzY2FsZTogTUlOX1NDQUxFICsgMC4yNSxcbiAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgIGFuaW1hdGlvbjogeyBkdXJhdGlvbjogMTAwMCwgZWFzaW5nRnVuY3Rpb246ICdlYXNlSW5PdXRDdWJpYycgfVxuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJUaW1lb3V0KHVwZGF0ZV92aWV3X3N0YXRlX2lkKTtcblxuXG4gIHJldHVybiBzZXRUaW1lb3V0KHNhdmVfdG9wb2xvZ3lfdmlldyk7XG59XG5cbmNvbnN0IGF1dG9sYXlvdXQgPSAoKSA9PiB7XG4gIGlmIChuZXR3b3JrID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiVGhlIG5ldHdvcmsgaXMgdW5kZWZpbmVkIVwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIShuZXR3b3JrIGluc3RhbmNlb2YgdmlzLk5ldHdvcmspKSB7XG4gICAgY29uc29sZS5lcnJvcihcIk5vdCBhIHZpcy5OZXR3b3JrIGluc3RhbmNlIVwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBuZXR3b3JrLnN0YWJpbGl6ZSgpO1xuICBzZXRUaW1lb3V0KCgpID0+IHsgc2F2ZV90b3BvbG9neV92aWV3KCkgfSwgMTAwMCk7XG59XG5cbmNvbnN0IGRyYWcgPSAoKSA9PiB7XG4gIGlmICh1cGRhdGVfdmlld19zdGF0ZV9pZCkge1xuICAgIGNsZWFyVGltZW91dCh1cGRhdGVfdmlld19zdGF0ZV9pZCk7XG4gIH1cblxuICBzYXZlX3RvcG9sb2d5X3ZpZXcoKTtcbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgbmV0d29yay5kZXN0cm95KHRydWUpO1xuICBpc19kZXN0cm95ZWQgPSB0cnVlXG59XG5cbmNvbnN0IGlzX21heF9lbnRyeV9yZWFjaGVkID0gKCkgPT4ge1xuICByZXR1cm4gbWF4X2VudHJpZXM7XG59XG5cbmNvbnN0IHVwZGF0ZV91cmxfcGFyYW1zID0gKG5ld191cmxfcGFyYW1zKSA9PiB7XG4gIHVybF9wYXJhbXMgPSBuZXdfdXJsX3BhcmFtcztcbn1cblxuY29uc3QgcmVsb2FkID0gYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZyh1cmxfcGFyYW1zKVxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocHJvcHMudXJsLCB1cmxfcGFyYW1zKTsgXG4gIGF3YWl0ICQuZ2V0KHVybCwgZGF0YVJlcXVlc3QsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgY29uc3Qge25vZGVzLCBlZGdlcywgbWF4X2VudHJ5X3JlYWNoZWR9ID0gcmVzcG9uc2UucnNwO1xuICAgIG1heF9lbnRyaWVzID0gbWF4X2VudHJ5X3JlYWNoZWQ7XG4gICAgbm9kZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChub2Rlcyk7XG4gICAgZWRnZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChlZGdlcyk7XG4gICAgY29uc3QgZGF0YXNldHMgPSB7IG5vZGVzOiBub2Rlc19kYXRhc2V0LCBlZGdlczogZWRnZXNfZGF0YXNldCB9XG4gICAgZW1wdHlfbmV0d29yayhkYXRhc2V0cyk7XG4gICAgaWYobmV0d29yaylcbiAgICAgIG5ldHdvcmsuc2V0RGF0YShkYXRhc2V0cyk7XG4gICAgXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCk7XG5cdCAgc2F2ZV90b3BvbG9neV92aWV3KCk7XG4gIH0pO1xufVxuXG5cbmRlZmluZUV4cG9zZSh7IHJlbG9hZCwgZGVzdHJveSwgaXNfbWF4X2VudHJ5X3JlYWNoZWQsIGF1dG9sYXlvdXQsIHVwZGF0ZV91cmxfcGFyYW1zIH0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIHt7Ym9keX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImF1dG9sYXlvdXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdjb25maXJtJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2F1dG9sYXlvdXQnXSlcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGJvZHk6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgYXV0b2xheW91dF8gPSAoKSA9PiB7XG4gICAgZW1pdCgnYXV0b2xheW91dCcpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2hcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwic2VydmljZV9tYXBcIlxuICAgICAgICAgICAgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCJcbiAgICAgICAgICAgIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgICAgICAgICA6dXJsPVwiZ2V0X3VybFwiXG4gICAgICAgICAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgICAgICAgICAgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIGlmKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ZpbHRlci5pZF0gPSBmaWx0ZXI7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvL3RoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBcbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG4gICAgXG4gICAgc2V0VGltZW91dCgoKSA9PiBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCksIDApO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgc2VydmljZV9tYXBgXTtcbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSwgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZihhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZih2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS4kcHJvcHMudXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cInNlcnZpY2VfbWFwXCJcbiAgICAgICAgICAgIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiXG4gICAgICAgICAgICA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgICAgICAgICAgOnVybD1cImdldF91cmxcIlxuICAgICAgICAgICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICAgICAgICAgIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9maWx0ZXJfZXZlbnQgPSBcImNoYW5nZV9maWx0ZXJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZih0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtmaWx0ZXIuaWRdID0gZmlsdGVyO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZihtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy90aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpXG4gICAgXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuICAgIFxuICAgIHNldFRpbWVvdXQoKCkgPT4gTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpLCAwKTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHNlcnZpY2VfbWFwYF07XG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sIFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sIFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfSAgICAgIFxuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvcihsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcikgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3BlcmlvZGljaXR5XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cInBlcmlvZGljaXR5X21hcFwiXG4gICAgICAgICAgICA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIlxuICAgICAgICAgICAgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICAgICAgICAgIDp1cmw9XCJnZXRfdXJsXCJcbiAgICAgICAgICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgICAgICAgICA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zID0gdGhpcy4kcHJvcHMudXJsX3BhcmFtc1xuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpXG4gICAgaWYodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcblx0ICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ZpbHRlci5pZF0gPSBmaWx0ZXI7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKSwgMCk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICB1cGRhdGVkX3VybF9wYXJhbXM6IHt9LFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgcGVyaW9kaWNpdHlfbWFwYF1cbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfSAgICAgIFxuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvcihsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcikgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUudXBkYXRlZF91cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFBlcmlvZGljaXR5IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaFxuICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJwZXJpb2RpY2l0eV9tYXBcIlxuICAgICAgICAgICAgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCJcbiAgICAgICAgICAgIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgICAgICAgICA6dXJsPVwiZ2V0X3VybFwiXG4gICAgICAgICAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgICAgICAgICAgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9maWx0ZXJfZXZlbnQgPSBcImNoYW5nZV9maWx0ZXJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLnVybF9wYXJhbXNcbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuICAgIGlmKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9wZXJpb2RpY2l0eV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG5cdCAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtmaWx0ZXIuaWRdID0gZmlsdGVyO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZihtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG4gICAgXG4gICAgc2V0VGltZW91dCgoKSA9PiBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCksIDApO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgdXBkYXRlZF91cmxfcGFyYW1zOiB7fSxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHBlcmlvZGljaXR5X21hcGBdXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sIFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cGRhdGVkX3VybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSkgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBBc3NldCBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2hcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwiYXNzZXRfbWFwXCJcbiAgICAgICAgICAgIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiXG4gICAgICAgICAgICA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgICAgICAgICAgOnVybD1cImdldF91cmxcIlxuICAgICAgICAgICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICAgICAgICAgIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9maWx0ZXJfZXZlbnQgPSBcImNoYW5nZV9maWx0ZXJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZih0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG5cdCAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtmaWx0ZXIuaWRdID0gZmlsdGVyO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZihtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuICAgIFxuICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYGFzc2V0X21hcGBdO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgICAgfSAgICAgIFxuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvcihsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcikgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSBcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgQXNzZXQgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cImFzc2V0X21hcFwiXG4gICAgICAgICAgICA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIlxuICAgICAgICAgICAgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICAgICAgICAgIDp1cmw9XCJnZXRfdXJsXCJcbiAgICAgICAgICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgICAgICAgICA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwiYXNzZXRfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuXHQgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbZmlsdGVyLmlkXSA9IGZpbHRlcjtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcbiAgICBcbiAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2Bhc3NldF9tYXBgXTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sIFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpIFxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSkgXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8dGVtcGxhdGU+XG48bmF2IGNsYXNzPVwibmF2YmFyIG5hdmJhci1zaGFkb3cgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctbGlnaHQgcHgtMiBtYi0yXCI+XG4gIDxzcGFuIGNsYXNzPVwibWUtMSB0ZXh0LW5vd3JhcFwiIHN0eWxlPVwiZm9udC1zaXplOiAxLjFyZW07XCI+XG4gICAgPGkgOmNsYXNzPVwibWFpbl90aXRsZS5pY29uXCI+PC9pPlxuICAgIDxhIHYtaWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6aHJlZj1cIm1haW5fdGl0bGUuaHJlZlwiIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L2E+ICBcbiAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvc3Bhbj4gICAgXG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBzZWNvbmRhcnlfdGl0bGVfbGlzdFwiPiAvIFxuICAgICAgPGEgdi1pZj1cIml0ZW0uaHJlZlwiIDpocmVmPVwiaXRlbS5ocmVmXCIgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9hPiAgXG4gICAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIG1zLTEgZC1ub25lIGQtbGctaW5saW5lIGQtbWQtbm9uZVwiPnw8L3NwYW4+XG4gIDxidXR0b24gY2xhc3M9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyLWljb25cIj48L3NwYW4+XG4gIDwvYnV0dG9uPlxuICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIHNjcm9sbC14XCIgaWQ9XCJuYXZiYXJOYXZcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGl0ZW1zX3RhYmxlXCI+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5hY3RpdmVcIj5cblx0ICA8bGkgIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IGl0ZW0uYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1lbHNlPlxuXHQgIDxhIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgPC9hPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC91bD5cbiAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgbXMtYXV0b1wiPlxuICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+XG5cdDwvYT5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIDpocmVmPVwiaGVscF9saW5rXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRtYWluX3RpdGxlOiBPYmplY3QsXG4gIHNlY29uZGFyeV90aXRsZV9saXN0OiBBcnJheSxcblx0aGVscF9saW5rOiBTdHJpbmcsXG5cdGl0ZW1zX3RhYmxlOiBBcnJheSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPG5hdiBjbGFzcz1cIm5hdmJhciBuYXZiYXItc2hhZG93IG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWxpZ2h0IGJnLWxpZ2h0IHB4LTIgbWItMlwiPlxuICA8c3BhbiBjbGFzcz1cIm1lLTEgdGV4dC1ub3dyYXBcIiBzdHlsZT1cImZvbnQtc2l6ZTogMS4xcmVtO1wiPlxuICAgIDxpIDpjbGFzcz1cIm1haW5fdGl0bGUuaWNvblwiPjwvaT5cbiAgICA8YSB2LWlmPVwibWFpbl90aXRsZS5ocmVmXCIgOmhyZWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9hPiAgXG4gICAgPHNwYW4gdi1lbHNlIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L3NwYW4+ICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIj4gLyBcbiAgICAgIDxhIHYtaWY9XCJpdGVtLmhyZWZcIiA6aHJlZj1cIml0ZW0uaHJlZlwiIDp0aXRsZT1cIml0ZW0udGl0bGVcIj57e2l0ZW0ubGFiZWx9fTwvYT4gIFxuICAgICAgPHNwYW4gdi1lbHNlIDp0aXRsZT1cIml0ZW0udGl0bGVcIj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3NwYW4+XG4gIDxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZCBtcy0xIGQtbm9uZSBkLWxnLWlubGluZSBkLW1kLW5vbmVcIj58PC9zcGFuPlxuICA8YnV0dG9uIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXJcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxuICA8L2J1dHRvbj5cbiAgPGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSBzY3JvbGwteFwiIGlkPVwibmF2YmFyTmF2XCI+XG4gICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdlwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBpdGVtc190YWJsZVwiPlxuXHQ8dGVtcGxhdGUgdi1pZj1cIml0ZW0uYWN0aXZlXCI+XG5cdCAgPGxpICBAY2xpY2s9XCJ0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgaXRlbSlcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBpdGVtLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8Yj48aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgICA8L2I+XG5cdCAgPC9saT5cblx0PC90ZW1wbGF0ZT5cblx0PHRlbXBsYXRlIHYtZWxzZT5cblx0ICA8YSBAY2xpY2s9XCJ0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgaXRlbSlcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgIDwvYT5cblx0PC90ZW1wbGF0ZT5cblx0XG5cdFxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdWw+XG4gICAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1zLWF1dG9cIj5cbiAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6aGlzdG9yeS5iYWNrKClcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1hcnJvdy1sZWZ0XCI+PC9pPlxuXHQ8L2E+XG4gICAgICAgIDxhIHRhcmdldD1cIl9uZXd0YWJcIiA6aHJlZj1cImhlbHBfbGlua1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgPC9hPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9uYXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0bWFpbl90aXRsZTogT2JqZWN0LFxuICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogQXJyYXksXG5cdGhlbHBfbGluazogU3RyaW5nLFxuXHRpdGVtc190YWJsZTogQXJyYXksXG4gICAgfSxcbiAgICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3tib2R5fX08L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiaXRlbXMtbGlzdFwiIGlkPVwiaXRlbXNsaXN0LXRleHRhcmVhXCIgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2xcIiByb3dzPVwiNlwiIHYtbW9kZWw9XCJpbnB1dF9tYWNfbGlzdFwiPjwvdGV4dGFyZWE+XG4gICAgICAgICAgPHNtYWxsPnt7bGlzdF9ub3Rlc319PC9zbWFsbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2tcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNCBwdC0yXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKX19PC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBtcy0wXCIgdi1tb2RlbD1cImlucHV0X3RyaWdnZXJfYWxlcnRzXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnRfZGVzY3InKX19PC9zbWFsbD5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAge3tfaTE4bignaG9zdF9kZXRhaWxzLm5vdGVzJyl9fTpcbiAgICB7e2Zvb3Rlcn19XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignYWRkJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBpbnB1dF9tYWNfbGlzdCA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3RyaWdnZXJfYWxlcnRzID0gcmVmKFwiXCIpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCddKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgZm9vdGVyOiBTdHJpbmcsXG4gICAgbGlzdF9ub3RlczogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5wdXRfbWFjX2xpc3QudmFsdWUgPSBcIlwiO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGFkZF8gPSAoKSA9PiB7XG4gICAgZW1pdCgnYWRkJywgeyBtYWNfbGlzdDogaW5wdXRfbWFjX2xpc3QudmFsdWUsIHRyaWdnZXJfYWxlcnRzOiBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSB9KTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3tfaTE4bignZWRpdF9jaGVjay5kZXZpY2VfYWxpYXMnKX19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImN1c3RvbV9uYW1lXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cInt7X2kxOG4oJ2N1c3RvbV9uYW1lJyl9fVwiIHYtbW9kZWw9XCJpbnB1dF9tYWNfYWRkcmVzc19uYW1lXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPnt7X2kxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX3N0YXR1cycpfX08L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cbiAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJkZXZpY2Vfc3RhdHVzXCIgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIHYtbW9kZWw9XCJpbnB1dF9kZXZpY2Vfc3RhdHVzXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWxsb3dlZFwiPnt7X2kxOG4oJ2FsbG93ZWQnKX19PC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGVuaWVkXCI+e3tfaTE4bignZGVuaWVkJyl9fTwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTQgcHQtMlwiPnt7X2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0Jyl9fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IG1zLTBcIiB2LW1vZGVsPVwiaW5wdXRfdHJpZ2dlcl9hbGVydHNcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnRfZGVzY3InKX19PC9zbWFsbD5cbiAgICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignZWRpdCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgaW5wdXRfbWFjX2FkZHJlc3NfbmFtZSA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X2RldmljZV9zdGF0dXMgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF90cmlnZ2VyX2FsZXJ0cyA9IHJlZihcIlwiKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydlZGl0J10pXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0aXRsZTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gICAgaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZSA9IHJvdy5zdGF0dXM7XG4gICAgaW5wdXRfbWFjX2FkZHJlc3NfbmFtZS52YWx1ZSA9IHJvdy5tYWNfYWRkcmVzc19sYWJlbC5sYWJlbDtcbiAgICBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSA9IHJvdy50cmlnZ2VyX2FsZXJ0IHx8IGZhbHNlO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICAgIGVtaXQoJ2VkaXQnLCB7IG1hY19hbGlhczogaW5wdXRfbWFjX2FkZHJlc3NfbmFtZS52YWx1ZSwgbWFjX3N0YXR1czogaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlIH0pO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IGlkPVwibmF2YmFyXCI+XG48cGFnZS1uYXZiYXJcblx0aWQ9XCJwYWdlX25hdmJhclwiXG5cdDptYWluX3RpdGxlPVwibmF2YmFyX2NvbnRleHQubWFpbl90aXRsZVwiXG5cdDpiYXNlX3VybD1cIm5hdmJhcl9jb250ZXh0LmJhc2VfdXJsXCJcblx0OmhlbHBfbGluaz1cIm5hdmJhcl9jb250ZXh0LmhlbHBfbGlua1wiXG5cdDppdGVtc190YWJsZT1cIm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlXCJcblx0QGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG48L3BhZ2UtbmF2YmFyPlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBpZD1cImRldmljZXMtbGVhcm5pbmctc3RhdHVzXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgaGlkZGVuPlxuICAgICAgICAgIHt7IGxlYXJuaW5nX21lc3NhZ2UgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9kZXZpY2VzX3Z1ZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uIHJlZj1cIm1vZGFsX2FkZF9kZXZpY2VcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYWRkXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hZGRcIlxuICAgICAgICAgICAgOmZvb3Rlcj1cImZvb3Rlcl9hZGRcIlxuICAgICAgICAgICAgOmxpc3Rfbm90ZXM9XCJsaXN0X25vdGVzX2FkZFwiXG4gICAgICAgICAgICBAYWRkPVwiYWRkX2RldmljZVwiPlxuICAgICAgICAgIDwvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24+XG4gICAgICAgICAgPG1vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbiByZWY9XCJtb2RhbF9lZGl0X2RldmljZVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9lZGl0XCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdF9yb3dcIj5cbiAgICAgICAgICA8L21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZGV2aWNlc19leGNsdXNpb25cIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlcy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXMuZW5hYmxlX3NlYXJjaFwiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbC1kZXZpY2VzJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+XG4gICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwiZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zXCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgICAgICdwYWdlLW5hdmJhcic6IFBhZ2VOYXZiYXIsXHQgICAgICBcbiAgICAgICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAgICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICAgICAnbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24nOiBNb2RhbEFkZERldmljZUV4Y2x1c2lvbixcbiAgICAgICAgJ21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbic6IE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbixcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdHBhZ2VfY3NyZjogU3RyaW5nLFxuXHRpc19jbGlja2hvdXNlX2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG5cdHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmxlYXJuaW5nX3N0YXR1cygpO1xuICAgICAgJChcIiNidG4tZGVsZXRlLWFsbC1kZXZpY2VzXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBjb25maWdfZGV2aWNlczogbnVsbCxcbiAgICAgICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG5cdFx0bWFpbl90aXRsZToge1xuICAgICAgbGFiZWw6IGkxOG4oXCJlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb25fbGlzdFwiKSxcbiAgICAgIGljb246IFwiZmFzIGZhLWJlbGwtc2xhc2hcIixcbiAgICB9LFxuXHRcdGJhc2VfdXJsOiBcIiNcIixcblx0XHQvLyBoZWxwX2xpbms6IFwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL250b3BuZy93ZWJfZ3VpL2NoZWNrcy5odG1sXCIsXG5cdFx0aXRlbXNfdGFibGU6IFtcblx0XHQgICAgeyBhY3RpdmU6IHRydWUsIGxhYmVsOiBpMThuKCdkZXZpY2VzJyksIGlkOiBcImRldmljZXNcIiB9LFxuXHRcdF0sXG4gICAgICAgICAgICB9LFxuXHQgICAgXG4gICAgICAgICAgICB0aXRsZV9kZWxldGU6ICcnLFxuICAgICAgICAgICAgYm9keV9kZWxldGU6ICcnLFxuICAgICAgICAgICAgdGl0bGVfZGVsZXRlX2FsbDogaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zJyksXG4gICAgICAgICAgICBib2R5X2RlbGV0ZV9hbGw6IGkxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc19tZXNzYWdlJyksXG4gICAgICAgICAgICB0aXRsZV9hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb24nKSxcbiAgICAgICAgICAgIGJvZHlfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX21lc3NhZ2UnKSxcbiAgICAgICAgICAgIGZvb3Rlcl9hZGQ6IGkxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbm90ZXMnKSxcbiAgICAgICAgICAgIGxpc3Rfbm90ZXNfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX2xpc3Rfbm90ZXMnKSxcbiAgICAgICAgICAgIHRpdGxlX2VkaXQ6IGkxOG4oJ2VkaXRfY2hlY2suZWRpdF9kZXZpY2VfZXhjbHVzaW9uJyksXG4gICAgICAgICAgICBsZWFybmluZ19tZXNzYWdlOiBpMThuKCdlZGl0X2NoZWNrLmxlYXJuaW5nJyksXG4gICAgICAgICAgICByb3dfdG9fZGVsZXRlOiBudWxsLFxuICAgICAgICAgICAgcm93X3RvX2VkaXQ6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZF9kZXZpY2U6IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgICAgIHBhcmFtcy5tYWNfbGlzdCA9IHBhcmFtcy5tYWNfbGlzdC5yZXBsYWNlKC8oPzpcXHR8ICkvZywnJylcbiAgICAgICAgICBwYXJhbXMubWFjX2xpc3QgPSBwYXJhbXMubWFjX2xpc3QucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csICcsJyk7XG4gICAgICAgICAgcGFyYW1zLmNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmY7XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgZGV2aWNlOiAnYWxsJyxcbiAgICAgICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfSAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBkZWxldGVfcm93OiBhc3luYyBmdW5jdGlvbigpIHsgICAgICBcbiAgICAgICAgICBsZXQgcm93ID0gdGhpcy5yb3dfdG9fZGVsZXRlO1xuICAgICAgICAgIGxldCBwYXJhbXMgPSB7IGRldmljZTogcm93Lm1hY19hZGRyZXNzLCBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYgfTtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVsb2FkX3RhYmxlKCksIDMwMCk7XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRfcm93OiBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHsgICAgXG4gICAgICAgICAgbGV0IHJvdyA9IHRoaXMucm93X3RvX2VkaXQ7XG4gICAgICAgICAgcGFyYW1zLm1hY19hbGlhcyA9IHBhcmFtcy5tYWNfYWxpYXMucmVwbGFjZSgvKD86XFx0fCApL2csJycpICAgXG4gICAgICAgICAgcGFyYW1zLmNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgICAgICBwYXJhbXMubWFjID0gcm93Lm1hY19hZGRyZXNzXG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZWRpdC9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWxvYWRfdGFibGUoKSwgMzAwKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVhcm5pbmdfc3RhdHVzOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGV2aWNlL2xlYXJuaW5nX3N0YXR1cy5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAnZ2V0JywgaGVhZGVycyB9KTtcbiAgICAgICAgICAgIGlmKHJzcC5sZWFybmluZ19kb25lKSB7XG4gICAgICAgICAgICAgICQoYCNkZXZpY2VzLWxlYXJuaW5nLXN0YXR1c2ApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJChgI2RldmljZXMtbGVhcm5pbmctc3RhdHVzYCkucmVtb3ZlQXR0cignaGlkZGVuJykgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfSAgICAgIFxuICAgICAgICB9LFxuICAgICAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgICAgIHRoaXMubGVhcm5pbmdfc3RhdHVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9kZXZpY2VzX2V4Y2x1c2lvbmBdO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2FkZF9kZXZpY2VfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYWRkX2RldmljZVwiXS5zaG93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfZWRpdF9kZXZpY2VfZGlhbG9nOiBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgICB0aGlzLnJvd190b19lZGl0ID0gcm93XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2VkaXRfZGV2aWNlXCJdLnNob3cocm93KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2RlbGV0ZV9kaWFsb2c6IGZ1bmN0aW9uKHRpdGxlLCBib2R5LCByb3cpIHtcbiAgICAgICAgICB0aGlzLnJvd190b19kZWxldGUgPSByb3c7XG4gICAgICAgICAgdGhpcy50aXRsZV9kZWxldGUgPSB0aXRsZTtcbiAgICAgICAgICB0aGlzLmJvZHlfZGVsZXRlID0gYm9keTtcbiAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2NvbmZpcm1cIl0uc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0gIFxuXG4gICAgZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICAgIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gICAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfYWRkX2RldmljZV9kaWFsb2coKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgICBkYXRhX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgLFxuICAgICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gICAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gW1xuICAgICAge1xuICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgIHNlYXJjaGFibGU6IGZhbHNlLFxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgZGF0YTogJ21hY19hZGRyZXNzJyxcbiAgICAgICAgdHlwZTogJ21hYy1hZGRyZXNzJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLmV4Y2x1ZGVkX2RldmljZScpLFxuICAgICAgICBkYXRhOiAnbWFjX2FkZHJlc3NfbGFiZWwnLFxuICAgICAgICB0eXBlOiAnbWFjLWFkZHJlc3MnLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIGxldCBsYWJlbCA9IHJvd0RhdGEubGFiZWxcbiAgICAgICAgICBpZihyb3dEYXRhLmxhYmVsICE9PSByb3dEYXRhLm1hYylcbiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnIFsnICsgcm93RGF0YS5tYWMgKyAnXSdcblxuICAgICAgICAgIGlmKHJvd0RhdGEudXJsKVxuICAgICAgICAgICAgbGFiZWwgPSBgPGEgaHJlZj0nJHtyb3dEYXRhLnVybH0nIHRpdGxlPScke3Jvd0RhdGEubWFjfSc+JHtsYWJlbH08L2E+YFxuXG4gICAgICAgICAgcmV0dXJuIGxhYmVsXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignZmlyc3Rfc2VlbicpLFxuICAgICAgICBkYXRhOiAnZmlyc3Rfc2VlbicsXG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiByb3dEYXRhLmRhdGFcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdsYXN0X3NlZW4nKSxcbiAgICAgICAgZGF0YTogJ2xhc3Rfc2VlbicsXG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiByb3dEYXRhLmRhdGFcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLmRldmljZV9zdGF0dXMnKSxcbiAgICAgICAgZGF0YTogJ3N0YXR1cycsXG4gICAgICAgIHR5cGU6ICdzdGF0dXMnLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuIGkxOG4ocm93RGF0YSlcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfYWxlcnQnKSxcbiAgICAgICAgZGF0YTogJ3RyaWdnZXJfYWxlcnQnLFxuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICByZXR1cm4gcm93RGF0YSA/IGA8aSBjbGFzcz1cImZhcyBmYS1jaGVjayB0ZXh0LXN1Y2Nlc3NcIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhcyBmYS10aW1lcyB0ZXh0LWRhbmdlclwiPjwvaT5gXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgdGFyZ2V0czogLTEsXG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25cIiksXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIG5hbWU6ICdhY3Rpb25zJyxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLFxuICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBcImRlbGV0ZV9kZXZpY2VcIixcdCAgXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBib2R5ID0gYCR7aTE4bignZWRpdF9jaGVjay5kZWxldGVfZGV2aWNlX2V4Y2x1c2lvbicpfSAke3Jvd0RhdGEubWFjX2FkZHJlc3NfbGFiZWwubGFiZWx9YDtcbiAgICAgICAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfZGVsZXRlX2RpYWxvZyhpMThuKCdlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb24nKSwgYm9keSwgcm93RGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgICAgbGV0IGVkaXRfaGFuZGxlciA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogXCJlZGl0X2RldmljZVwiLFx0ICBcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgRGF0YXRhYmxlVnVlLnNob3dfZWRpdF9kZXZpY2VfZGlhbG9nKHJvd0RhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBqdW1wX3RvX2hpc3RvcmljYWxfZmxvdyA9IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke3Jvd0RhdGEuZmlyc3Rfc2Vlbi50aW1lc3RhbXB9JmVwb2NoX2VuZD0ke3Jvd0RhdGEubGFzdF9zZWVuLnRpbWVzdGFtcH0mbWFjPSR7cm93RGF0YS5tYWNfYWRkcmVzc307ZXFgXG4gICAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgICAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsX2Zsb3csIGljb246ICdmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhpZGRlbjogIWlzQ2xpY2tob3VzZUVuYWJsZWQgfSxcbiAgICAgICAgICAgIHsgY2xhc3M6IGBidG4tc2Vjb25kYXJ5YCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JyksIGNsYXNzOiBcInBvaW50ZXJcIiB9LFxuICAgICAgICAgICAgeyBjbGFzczogYGJ0bi1kYW5nZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpLCBjbGFzczogXCJwb2ludGVyXCIgfSxcbiAgICAgICAgICBdKTtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICBdO1xuICAgIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlcyA9IGNvbmZpZ0RldmljZXM7XG59XG5cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBpZD1cIm5hdmJhclwiPlxuPHBhZ2UtbmF2YmFyXG5cdGlkPVwicGFnZV9uYXZiYXJcIlxuXHQ6bWFpbl90aXRsZT1cIm5hdmJhcl9jb250ZXh0Lm1haW5fdGl0bGVcIlxuXHQ6YmFzZV91cmw9XCJuYXZiYXJfY29udGV4dC5iYXNlX3VybFwiXG5cdDpoZWxwX2xpbms9XCJuYXZiYXJfY29udGV4dC5oZWxwX2xpbmtcIlxuXHQ6aXRlbXNfdGFibGU9XCJuYXZiYXJfY29udGV4dC5pdGVtc190YWJsZVwiXG5cdEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuPC9wYWdlLW5hdmJhcj5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgaWQ9XCJkZXZpY2VzLWxlYXJuaW5nLXN0YXR1c1wiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIGhpZGRlbj5cbiAgICAgICAgICB7eyBsZWFybmluZ19tZXNzYWdlIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfZGV2aWNlc192dWVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICAgICAgICAgIDxtb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbiByZWY9XCJtb2RhbF9hZGRfZGV2aWNlXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2FkZFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfYWRkXCJcbiAgICAgICAgICAgIDpmb290ZXI9XCJmb290ZXJfYWRkXCJcbiAgICAgICAgICAgIDpsaXN0X25vdGVzPVwibGlzdF9ub3Rlc19hZGRcIlxuICAgICAgICAgICAgQGFkZD1cImFkZF9kZXZpY2VcIj5cbiAgICAgICAgICA8L21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uPlxuICAgICAgICAgIDxtb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24gcmVmPVwibW9kYWxfZWRpdF9kZXZpY2VcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZWRpdFwiXG4gICAgICAgICAgICBAZWRpdD1cImVkaXRfcm93XCI+XG4gICAgICAgICAgPC9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24+XG4gICAgICAgICAgICBcbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2RldmljZXNfZXhjbHVzaW9uXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlcy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlcy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzLmVuYWJsZV9zZWFyY2hcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwtZGV2aWNlcycgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPlxuICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcImVkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc1wiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24udnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XHQgIFxuICAgICAgICAncGFnZS1uYXZiYXInOiBQYWdlTmF2YmFyLFx0ICAgICAgXG4gICAgICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAgICAgJ21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uJzogTW9kYWxBZGREZXZpY2VFeGNsdXNpb24sXG4gICAgICAgICdtb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24nOiBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24sXG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRwYWdlX2NzcmY6IFN0cmluZyxcblx0aXNfY2xpY2tob3VzZV9lbmFibGVkOiBCb29sZWFuLFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuXHRzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5sZWFybmluZ19zdGF0dXMoKTtcbiAgICAgICQoXCIjYnRuLWRlbGV0ZS1hbGwtZGV2aWNlc1wiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgfSwgICAgXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgY29uZmlnX2RldmljZXM6IG51bGwsXG4gICAgICAgICAgICBuYXZiYXJfY29udGV4dDoge1xuXHRcdG1haW5fdGl0bGU6IHtcbiAgICAgIGxhYmVsOiBpMThuKFwiZWRpdF9jaGVjay5kZXZpY2VfZXhjbHVzaW9uX2xpc3RcIiksXG4gICAgICBpY29uOiBcImZhcyBmYS1iZWxsLXNsYXNoXCIsXG4gICAgfSxcblx0XHRiYXNlX3VybDogXCIjXCIsXG5cdFx0Ly8gaGVscF9saW5rOiBcImh0dHBzOi8vd3d3Lm50b3Aub3JnL2d1aWRlcy9udG9wbmcvd2ViX2d1aS9jaGVja3MuaHRtbFwiLFxuXHRcdGl0ZW1zX3RhYmxlOiBbXG5cdFx0ICAgIHsgYWN0aXZlOiB0cnVlLCBsYWJlbDogaTE4bignZGV2aWNlcycpLCBpZDogXCJkZXZpY2VzXCIgfSxcblx0XHRdLFxuICAgICAgICAgICAgfSxcblx0ICAgIFxuICAgICAgICAgICAgdGl0bGVfZGVsZXRlOiAnJyxcbiAgICAgICAgICAgIGJvZHlfZGVsZXRlOiAnJyxcbiAgICAgICAgICAgIHRpdGxlX2RlbGV0ZV9hbGw6IGkxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9ucycpLFxuICAgICAgICAgICAgYm9keV9kZWxldGVfYWxsOiBpMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnNfbWVzc2FnZScpLFxuICAgICAgICAgICAgdGl0bGVfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uJyksXG4gICAgICAgICAgICBib2R5X2FkZDogaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9tZXNzYWdlJyksXG4gICAgICAgICAgICBmb290ZXJfYWRkOiBpMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX25vdGVzJyksXG4gICAgICAgICAgICBsaXN0X25vdGVzX2FkZDogaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9saXN0X25vdGVzJyksXG4gICAgICAgICAgICB0aXRsZV9lZGl0OiBpMThuKCdlZGl0X2NoZWNrLmVkaXRfZGV2aWNlX2V4Y2x1c2lvbicpLFxuICAgICAgICAgICAgbGVhcm5pbmdfbWVzc2FnZTogaTE4bignZWRpdF9jaGVjay5sZWFybmluZycpLFxuICAgICAgICAgICAgcm93X3RvX2RlbGV0ZTogbnVsbCxcbiAgICAgICAgICAgIHJvd190b19lZGl0OiBudWxsLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRfZGV2aWNlOiBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICBwYXJhbXMubWFjX2xpc3QgPSBwYXJhbXMubWFjX2xpc3QucmVwbGFjZSgvKD86XFx0fCApL2csJycpXG4gICAgICAgICAgcGFyYW1zLm1hY19saXN0ID0gcGFyYW1zLm1hY19saXN0LnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnLCcpO1xuICAgICAgICAgIHBhcmFtcy5jc3JmID0gdGhpcy4kcHJvcHMucGFnZV9jc3JmO1xuICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG4gICAgICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGRldmljZTogJ2FsbCcsXG4gICAgICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH0gICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlX3JvdzogYXN5bmMgZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAgICAgbGV0IHJvdyA9IHRoaXMucm93X3RvX2RlbGV0ZTtcbiAgICAgICAgICBsZXQgcGFyYW1zID0geyBkZXZpY2U6IHJvdy5tYWNfYWRkcmVzcywgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmIH07XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2RldmljZS9leGNsdXNpb24ubHVhYDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlbG9hZF90YWJsZSgpLCAzMDApO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlZGl0X3JvdzogYXN5bmMgZnVuY3Rpb24ocGFyYW1zKSB7ICAgIFxuICAgICAgICAgIGxldCByb3cgPSB0aGlzLnJvd190b19lZGl0O1xuICAgICAgICAgIHBhcmFtcy5tYWNfYWxpYXMgPSBwYXJhbXMubWFjX2FsaWFzLnJlcGxhY2UoLyg/OlxcdHwgKS9nLCcnKSAgIFxuICAgICAgICAgIHBhcmFtcy5jc3JmID0gdGhpcy4kcHJvcHMucGFnZV9jc3JmXG4gICAgICAgICAgcGFyYW1zLm1hYyA9IHJvdy5tYWNfYWRkcmVzc1xuICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2VkaXQvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVsb2FkX3RhYmxlKCksIDMwMCk7XG4gICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxlYXJuaW5nX3N0YXR1czogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RldmljZS9sZWFybmluZ19zdGF0dXMubHVhYDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ2dldCcsIGhlYWRlcnMgfSk7XG4gICAgICAgICAgICBpZihyc3AubGVhcm5pbmdfZG9uZSkge1xuICAgICAgICAgICAgICAkKGAjZGV2aWNlcy1sZWFybmluZy1zdGF0dXNgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICQoYCNkZXZpY2VzLWxlYXJuaW5nLXN0YXR1c2ApLnJlbW92ZUF0dHIoJ2hpZGRlbicpICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH0gICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgICAgICB0aGlzLmxlYXJuaW5nX3N0YXR1cygpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZGV2aWNlc19leGNsdXNpb25gXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19hZGRfZGV2aWNlX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2FkZF9kZXZpY2VcIl0uc2hvdygpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X2VkaXRfZGV2aWNlX2RpYWxvZzogZnVuY3Rpb24ocm93KSB7XG4gICAgICAgICAgdGhpcy5yb3dfdG9fZWRpdCA9IHJvd1xuICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9lZGl0X2RldmljZVwiXS5zaG93KHJvdyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19kZWxldGVfZGlhbG9nOiBmdW5jdGlvbih0aXRsZSwgYm9keSwgcm93KSB7XG4gICAgICAgICAgdGhpcy5yb3dfdG9fZGVsZXRlID0gcm93O1xuICAgICAgICAgIHRoaXMudGl0bGVfZGVsZXRlID0gdGl0bGU7XG4gICAgICAgICAgdGhpcy5ib2R5X2RlbGV0ZSA9IGJvZHk7XG4gICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJdLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9ICBcblxuICAgIGZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAgIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICAgIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG4gICAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICAgIERhdGF0YWJsZVZ1ZS5zaG93X2FkZF9kZXZpY2VfZGlhbG9nKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAgIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgICAgZGF0YV91cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RldmljZS9leGNsdXNpb24ubHVhYCxcbiAgICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgfTtcblxuICAgIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gICAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICAgIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gICAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IFtcbiAgICAgIHtcbiAgICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgICAgICBzZWFyY2hhYmxlOiBmYWxzZSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGRhdGE6ICdtYWNfYWRkcmVzcycsXG4gICAgICAgIHR5cGU6ICdtYWMtYWRkcmVzcycsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignZWRpdF9jaGVjay5leGNsdWRlZF9kZXZpY2UnKSxcbiAgICAgICAgZGF0YTogJ21hY19hZGRyZXNzX2xhYmVsJyxcbiAgICAgICAgdHlwZTogJ21hYy1hZGRyZXNzJyxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICBsZXQgbGFiZWwgPSByb3dEYXRhLmxhYmVsXG4gICAgICAgICAgaWYocm93RGF0YS5sYWJlbCAhPT0gcm93RGF0YS5tYWMpXG4gICAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyBbJyArIHJvd0RhdGEubWFjICsgJ10nXG5cbiAgICAgICAgICBpZihyb3dEYXRhLnVybClcbiAgICAgICAgICAgIGxhYmVsID0gYDxhIGhyZWY9JyR7cm93RGF0YS51cmx9JyB0aXRsZT0nJHtyb3dEYXRhLm1hY30nPiR7bGFiZWx9PC9hPmBcblxuICAgICAgICAgIHJldHVybiBsYWJlbFxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGNvbHVtbk5hbWU6IGkxOG4oJ2ZpcnN0X3NlZW4nKSxcbiAgICAgICAgZGF0YTogJ2ZpcnN0X3NlZW4nLFxuICAgICAgICB0eXBlOiAndGltZScsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICByZXR1cm4gcm93RGF0YS5kYXRhXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignbGFzdF9zZWVuJyksXG4gICAgICAgIGRhdGE6ICdsYXN0X3NlZW4nLFxuICAgICAgICB0eXBlOiAndGltZScsXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxuICAgICAgICBzZWFyY2hhYmxlOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsXG4gICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihyb3dEYXRhLCB0eXBlLCBzY3JpcHQpIHtcbiAgICAgICAgICByZXR1cm4gcm93RGF0YS5kYXRhXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignZWRpdF9jaGVjay5kZXZpY2Vfc3RhdHVzJyksXG4gICAgICAgIGRhdGE6ICdzdGF0dXMnLFxuICAgICAgICB0eXBlOiAnc3RhdHVzJyxcbiAgICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJyxcbiAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIHJldHVybiBpMThuKHJvd0RhdGEpXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgY29sdW1uTmFtZTogaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2FsZXJ0JyksXG4gICAgICAgIGRhdGE6ICd0cmlnZ2VyX2FsZXJ0JyxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgc2VhcmNoYWJsZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocm93RGF0YSwgdHlwZSwgc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuIHJvd0RhdGEgPyBgPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2sgdGV4dC1zdWNjZXNzXCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXMgdGV4dC1kYW5nZXJcIj48L2k+YFxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIHRhcmdldHM6IC0xLFxuICAgICAgICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uXCIpLFxuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBuYW1lOiAnYWN0aW9ucycsXG4gICAgICAgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJyxcbiAgICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKHJvd0RhdGEsIHR5cGUsIHNjcmlwdCkge1xuICAgICAgICAgIGxldCBkZWxldGVfaGFuZGxlciA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogXCJkZWxldGVfZGV2aWNlXCIsXHQgIFxuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICBsZXQgYm9keSA9IGAke2kxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2RldmljZV9leGNsdXNpb24nKX0gJHtyb3dEYXRhLm1hY19hZGRyZXNzX2xhYmVsLmxhYmVsfWA7XG4gICAgICAgICAgICAgIERhdGF0YWJsZVZ1ZS5zaG93X2RlbGV0ZV9kaWFsb2coaTE4bignZWRpdF9jaGVjay5kZXZpY2VfZXhjbHVzaW9uJyksIGJvZHksIHJvd0RhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IFwiZWRpdF9kZXZpY2VcIixcdCAgXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIERhdGF0YWJsZVZ1ZS5zaG93X2VkaXRfZGV2aWNlX2RpYWxvZyhyb3dEYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBsZXQganVtcF90b19oaXN0b3JpY2FsX2Zsb3cgPSB7XG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtyb3dEYXRhLmZpcnN0X3NlZW4udGltZXN0YW1wfSZlcG9jaF9lbmQ9JHtyb3dEYXRhLmxhc3Rfc2Vlbi50aW1lc3RhbXB9Jm1hYz0ke3Jvd0RhdGEubWFjX2FkZHJlc3N9O2VxYFxuICAgICAgICAgICAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICAgICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbF9mbG93LCBpY29uOiAnZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoaWRkZW46ICFpc0NsaWNraG91c2VFbmFibGVkIH0sXG4gICAgICAgICAgICB7IGNsYXNzOiBgYnRuLXNlY29uZGFyeWAsIGhhbmRsZXI6IGVkaXRfaGFuZGxlciwgaWNvbjogJ2ZhLWVkaXQnLCB0aXRsZTogaTE4bignZWRpdCcpLCBjbGFzczogXCJwb2ludGVyXCIgfSxcbiAgICAgICAgICAgIHsgY2xhc3M6IGBidG4tZGFuZ2VyYCwgaGFuZGxlcjogZGVsZXRlX2hhbmRsZXIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSwgY2xhc3M6IFwicG9pbnRlclwiIH0sXG4gICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgXTtcbiAgICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXMgPSBjb25maWdEZXZpY2VzO1xufVxuXG48L3NjcmlwdD5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgVExTIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3Rsc1wiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZmluZ2VycHJpbnRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGI+e3sgaTE4bignZmluZ2VycHJpbnRfbm90ZScpIH19PC9iPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZmluZ2VycHJpbnRgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiamEzX2NsaWVudF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBUTFMgaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2hvc3RfdGxzXCI+XG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9maW5nZXJwcmludFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8Yj57eyBpMThuKCdmaW5nZXJwcmludF9ub3RlJykgfX08L2I+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge30sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9maW5nZXJwcmludGBdO1xuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMyAvKiBDb250YWN0cyBjb2x1bW4gKi87XG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9maW5nZXJwcmludC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJqYTNfY2xpZW50X2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF9zc2hcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2hhc3NoXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hhc3NoYF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhhc3NoX2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF9zc2hcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2hhc3NoXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hhc3NoYF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhhc3NoX2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPHBhZ2UtbmF2YmFyXG4gIGlkPVwicGFnZV9uYXZiYXJcIlxuICA6bWFpbl90aXRsZT1cIm5hdmJhcl9jb250ZXh0Lm1haW5fdGl0bGVcIlxuICA6c2Vjb25kYXJ5X3RpdGxlX2xpc3Q9XCJuYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdFwiXG4gIDpoZWxwX2xpbms9XCJuYXZiYXJfY29udGV4dC5oZWxwX2xpbmtcIlxuICA6aXRlbXNfdGFibGU9XCJuYXZiYXJfY29udGV4dC5pdGVtc190YWJsZVwiXG4gIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuPC9wYWdlLW5hdmJhcj5cblxuPHBhZ2Utc2VydmljZS1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJzZXJ2aWNlX21hcF9ncmFwaFwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6aWZpZD1cImlmaWRcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gIDptYXBfaWQ9XCJtYXBfaWRcIlxuICA6YWxsX2ZpbHRlcl9saXN0PVwic2VydmljZV9tYXBfZmlsdGVyX2xpc3RcIj5cbjwvcGFnZS1zZXJ2aWNlLW1hcD5cblxuPHBhZ2Utc2VydmljZS10YWJsZSB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnc2VydmljZV9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cInNlcnZpY2VfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0XCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6c2VydmljZV9hY2NlcHRhbmNlPVwic2VydmljZV9hY2NlcHRhbmNlXCI+XG48L3BhZ2Utc2VydmljZS10YWJsZT5cblxuPHBhZ2UtcGVyaW9kaWNpdHktbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdwZXJpb2RpY2l0eV9tYXAnICYmIHBhZ2UgPT0gJ2dyYXBoJ1wiIHJlZj1cInBlcmlvZGljaXR5X21hcF9ncmFwaFwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6aWZpZD1cImlmaWRcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gIDptYXBfaWQ9XCJtYXBfaWRcIlxuICA6YWxsX2ZpbHRlcl9saXN0PVwicGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktbWFwPlxuXG48cGFnZS1wZXJpb2RpY2l0eS10YWJsZSB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfdGFibGVcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICA6dGFibGVfZmlsdGVycz1cInBlcmlvZGljaXR5X3RhYmxlX2ZpbHRlcl9saXN0XCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIj5cbjwvcGFnZS1wZXJpb2RpY2l0eS10YWJsZT5cblxuPHRlbXBsYXRlIHYtaWY9XCJhc3NldF9tYXBfZmlsdGVyX2xpc3QgJiYgYXNzZXRfdGFibGVfZmlsdGVyX2xpc3RcIj5cbiAgPHBhZ2UtYXNzZXQtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ2dyYXBoJ1wiIHJlZj1cImFzc2V0X21hcF9ncmFwaFwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6aWZpZD1cImlmaWRcIlxuICAgIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgICA6YWxsX2ZpbHRlcl9saXN0PVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0XCI+XG4gIDwvcGFnZS1hc3NldC1tYXA+XG5cbiAgPHBhZ2UtYXNzZXQtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ2Fzc2V0X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwiYXNzZXRfbWFwX3RhYmxlXCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgICA6dGFibGVfZmlsdGVycz1cImFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDwvcGFnZS1hc3NldC10YWJsZT5cbjwvdGVtcGxhdGU+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5VGFibGUgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LXRhYmxlLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eU1hcCB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldFRhYmxlIH0gZnJvbSBcIi4vcGFnZS1hc3NldC10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRNYXAgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1zZXJ2aWNlLXRhYmxlLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlTWFwIH0gZnJvbSBcIi4vcGFnZS1zZXJ2aWNlLW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbiAgY29uc3QgY2hhbmdlX21hcF9ldmVudCA9IFwiY2hhbmdlX21hcF9ldmVudFwiO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XHQgIFxuICAgICAgJ3BhZ2UtcGVyaW9kaWNpdHktbWFwJzogUGFnZVBlcmlvZGljaXR5TWFwLFxuICAgICAgJ3BhZ2UtcGVyaW9kaWNpdHktdGFibGUnOiBQYWdlUGVyaW9kaWNpdHlUYWJsZSxcbiAgICAgICdwYWdlLWFzc2V0LW1hcCc6IFBhZ2VBc3NldE1hcCxcbiAgICAgICdwYWdlLWFzc2V0LXRhYmxlJzogUGFnZUFzc2V0VGFibGUsXG4gICAgICAncGFnZS1zZXJ2aWNlLW1hcCc6IFBhZ2VTZXJ2aWNlTWFwLFxuICAgICAgJ3BhZ2Utc2VydmljZS10YWJsZSc6IFBhZ2VTZXJ2aWNlVGFibGUsXG4gICAgICAncGFnZS1uYXZiYXInOiBQYWdlTmF2YmFyLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgICAgYmFzZV91cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgICBpZmlkOiBOdW1iZXIsXG4gICAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICAgIG1hcF9pZDogU3RyaW5nLFxuICAgICAgdmlldzogU3RyaW5nLFxuICAgICAgbmF2YmFyX2luZm86IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfYWNjZXB0YW5jZTogQXJyYXksXG4gICAgICBzZXJ2aWNlX21hcF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICAgICAgc2VydmljZV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBwZXJpb2RpY2l0eV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHBlcmlvZGljaXR5X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICAgIGFzc2V0X21hcF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICAgICAgYXNzZXRfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgdGhpcy51cmxfcGFyYW1zID0gdGhpcy4kcHJvcHMuYmFzZV91cmxfcGFyYW1zXG4gICAgICB0aGlzLmFjdGl2ZV90YWIgPSB0aGlzLiRwcm9wcy5tYXBfaWRcbiAgICAgIHRoaXMucGFnZSA9IHRoaXMudXJsX3BhcmFtcy5wYWdlXG4gICAgICB0aGlzLnVwZGF0ZWRfdmlldyA9IHRoaXMuJHByb3BzLnZpZXdcblxuICAgICAgaWYoYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0KSB7XG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdhc3NldF9tYXAnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignYXNzZXRfdGFibGUnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgKGkuaWQgPT0gdGhpcy5hY3RpdmVfdGFiICYmIGkucGFnZSA9PSB0aGlzLnBhZ2UpID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgXG4gICAgICBjb25zdCBmb3JtYXRfbmF2YmFyID0gdGhpcy5mb3JtYXRfbmF2YmFyX3RpdGxlO1xuICAgICAgZm9ybWF0X25hdmJhcih0aGlzLiRwcm9wcy5uYXZiYXJfaW5mbyk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX25hdmJhclwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgICAgZm9ybWF0X25hdmJhcih7IHNlbGVjdGVkX2lmYWNlOiB0aGlzLiRwcm9wcy5uYXZiYXJfaW5mby5zZWxlY3RlZF9pZmFjZSwgc2VsZWN0ZWRfaG9zdDogbm9kZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9tYXBfZXZlbnQsICh0YWIpID0+IHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdtYXAnLCB0YWIuaWQpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCB0YWIucGFnZSk7XG4gICAgICAgIGlmKHRhYi5wYWdlID09ICd0YWJsZScpXG4gICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRhYi5pZFxuICAgICAgICB0aGlzLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVybF9wYXJhbXMubWFwID0gdGFiLmlkXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpXG4gICAgICAgIGZvcm1hdF9uYXZiYXIoKVxuICAgICB9KTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgIGFjdGl2ZV90YWI6IG51bGwsXG4gICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgIHVybF9wYXJhbXM6IHt9LFxuICAgICAgICB1cGRhdGVkX3ZpZXc6IG51bGwsXG4gICAgICAgIG5hdmJhcl9ub2RlOiB7fSxcbiAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcbiAgICAgICAgICBtYWluX3RpdGxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJyAnICsgaTE4bihcIm1hcHNcIiksXG4gICAgICAgICAgICBpY29uOiBcImZhcyBmYS1tYXBcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY29uZGFyeV90aXRsZV9saXN0OiBbXSxcbiAgICAgICAgICBpdGVtc190YWJsZTogW1xuICAgICAgICAgICAgeyBhY3RpdmU6IHRydWUsIGxhYmVsOiBpMThuKCdzZXJ2aWNlX21hcCcpLCBpZDogXCJzZXJ2aWNlX21hcFwiLCBwYWdlOiBcImdyYXBoXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ3NlcnZpY2VfdGFibGUnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdwZXJpb2RpY2l0eV9tYXAnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHlfdGFibGUnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczogeyBcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudF90YWIgPSB0aGlzLmdldF9hY3RpdmVfdGFiKCk7XG4gICAgICAgIGN1cnJlbnRfdGFiLmRlc3Ryb3koKVxuICAgICAgfSxcbiAgICAgIGZvcm1hdF9uYXZiYXJfdGl0bGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX25vZGUgPSBkYXRhIC8qIFVwZGF0ZSBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLm5hdmJhcl9ub2RlIC8qIFVzZSB0aGUgb2xkIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdCA9IFtcbiAgICAgICAgICB7IGxhYmVsOiBkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsLCB0aXRsZTogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsfWAsIDE2KSB9XG4gICAgICAgIF1cblxuICAgICAgICBpZihkYXRhLnNlbGVjdGVkX2hvc3QgJiYgZGF0YS5zZWxlY3RlZF9ob3N0LmlkICE9ICcnKSB7XG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdFswXVsnaHJlZiddID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhP21hcD0ke3RoaXMuYWN0aXZlX3RhYn0mcGFnZT0ke3RoaXMucGFnZX0maWZpZD0ke3RoaXMuJHByb3BzLmlmaWR9YFxuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCwgMTYsICcuJyksXG4gICAgICAgICAgICB0aXRsZTogYCR7ZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsfWAsXG4gICAgICAgICAgICBocmVmOiBkYXRhLnNlbGVjdGVkX2hvc3QuaXNfYWN0aXZlID8gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLnNlbGVjdGVkX2hvc3QuaWR9YCA6IG51bGwsXG4gICAgICAgICAgICB0YXJnZXRfYmxhbms6IFwidHJ1ZVwiLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gIFxuICAgICAgfSxcbiAgICAgIGdldF9hY3RpdmVfdGFiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbdGhpcy5hY3RpdmVfdGFiICsgXCJfXCIgKyB0aGlzLnBhZ2VdO1xuICAgICAgfSxcbiAgICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9tYXBfZXZlbnQsIGl0ZW0pO1xuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignYXNzZXRfbWFwJyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcImdyYXBoXCIgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ2Fzc2V0X3RhYmxlJyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIChpLmlkID09IHRoaXMuYWN0aXZlX3RhYiAmJiBpLnBhZ2UgPT0gdGhpcy5wYWdlKSA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgIFxuICAgICAgY29uc3QgZm9ybWF0X25hdmJhciA9IHRoaXMuZm9ybWF0X25hdmJhcl90aXRsZTtcbiAgICAgIGZvcm1hdF9uYXZiYXIodGhpcy4kcHJvcHMubmF2YmFyX2luZm8pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9uYXZiYXJcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICAgIGZvcm1hdF9uYXZiYXIoeyBzZWxlY3RlZF9pZmFjZTogdGhpcy4kcHJvcHMubmF2YmFyX2luZm8uc2VsZWN0ZWRfaWZhY2UsIHNlbGVjdGVkX2hvc3Q6IG5vZGUgfSk7XG4gICAgICB9KTtcblxuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2VfbWFwX2V2ZW50LCAodGFiKSA9PiB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbWFwJywgdGFiLmlkKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgdGFiLnBhZ2UpO1xuICAgICAgICBpZih0YWIucGFnZSA9PSAndGFibGUnKVxuICAgICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFjdGl2ZV90YWIgPSB0YWIuaWRcbiAgICAgICAgdGhpcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cmxfcGFyYW1zLm1hcCA9IHRhYi5pZFxuICAgICAgICB0aGlzLnVybF9wYXJhbXMucGFnZSA9IHRhYi5wYWdlXG4gICAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKVxuICAgICAgICBmb3JtYXRfbmF2YmFyKClcbiAgICAgfSk7XG4gICAgfSwgICAgXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICBhY3RpdmVfdGFiOiBudWxsLFxuICAgICAgICBwYWdlOiBudWxsLFxuICAgICAgICB1cmxfcGFyYW1zOiB7fSxcbiAgICAgICAgdXBkYXRlZF92aWV3OiBudWxsLFxuICAgICAgICBuYXZiYXJfbm9kZToge30sXG4gICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG4gICAgICAgICAgbWFpbl90aXRsZToge1xuICAgICAgICAgICAgbGFiZWw6ICcgJyArIGkxOG4oXCJtYXBzXCIpLFxuICAgICAgICAgICAgaWNvbjogXCJmYXMgZmEtbWFwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogW10sXG4gICAgICAgICAgaXRlbXNfdGFibGU6IFtcbiAgICAgICAgICAgIHsgYWN0aXZlOiB0cnVlLCBsYWJlbDogaTE4bignc2VydmljZV9tYXAnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCdzZXJ2aWNlX3RhYmxlJyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHlfbWFwJyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcImdyYXBoXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ3BlcmlvZGljaXR5X3RhYmxlJyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHsgXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRfdGFiID0gdGhpcy5nZXRfYWN0aXZlX3RhYigpO1xuICAgICAgICBjdXJyZW50X3RhYi5kZXN0cm95KClcbiAgICAgIH0sXG4gICAgICBmb3JtYXRfbmF2YmFyX3RpdGxlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9ub2RlID0gZGF0YSAvKiBVcGRhdGUgbmF2YmFyIG5vZGUgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gdGhpcy5uYXZiYXJfbm9kZSAvKiBVc2UgdGhlIG9sZCBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QgPSBbXG4gICAgICAgICAgeyBsYWJlbDogZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbCwgdGl0bGU6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbH1gLCAxNikgfVxuICAgICAgICBdXG5cbiAgICAgICAgaWYoZGF0YS5zZWxlY3RlZF9ob3N0ICYmIGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCAhPSAnJykge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RbMF1bJ2hyZWYnXSA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YT9tYXA9JHt0aGlzLmFjdGl2ZV90YWJ9JnBhZ2U9JHt0aGlzLnBhZ2V9JmlmaWQ9JHt0aGlzLiRwcm9wcy5pZmlkfWBcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0LnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsfWAsIDE2LCAnLicpLFxuICAgICAgICAgICAgdGl0bGU6IGAke2RhdGEuc2VsZWN0ZWRfaG9zdC5sYWJlbH1gLFxuICAgICAgICAgICAgaHJlZjogZGF0YS5zZWxlY3RlZF9ob3N0LmlzX2FjdGl2ZSA/IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5zZWxlY3RlZF9ob3N0LmlkfWAgOiBudWxsLFxuICAgICAgICAgICAgdGFyZ2V0X2JsYW5rOiBcInRydWVcIixcbiAgICAgICAgICB9KVxuICAgICAgICB9ICBcbiAgICAgIH0sXG4gICAgICBnZXRfYWN0aXZlX3RhYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZzW3RoaXMuYWN0aXZlX3RhYiArIFwiX1wiICsgdGhpcy5wYWdlXTtcbiAgICAgIH0sXG4gICAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSAgXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2PlxuICA8c3ZnXG4gICAgcmVmPVwic2Fua2V5X2NoYXJ0X3JlZlwiXG4gICAgOndpZHRoPVwic2Fua2V5X3NpemUud2lkdGhcIlxuICAgIDpoZWlnaHQ9XCJzYW5rZXlfc2l6ZS5oZWlnaHRcIlxuICAgIHN0eWxlPVwibWFyZ2luOjEwcHg7XCI+XG4gICAgPGRlZnMgLz5cbiAgICA8ZyBjbGFzcz1cIm5vZGVzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC41O1wiLz5cbiAgICA8ZyBjbGFzcz1cImxpbmtzXCJcbiAgICAgICBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjM7IGZpbGw6IG5vbmU7XCIvPlxuICAgIDxnIGNsYXNzPVwidGV4dHNcIiAvPlxuICA8L3N2Zz5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBkMyA9IGQzdjc7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHdpZHRoOiBOdW1iZXIsXG4gICAgaGVpZ2h0OiBOdW1iZXIsXG59KTtcblxuY29uc3Qgc2Fua2V5X2NoYXJ0X3JlZiA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9zaXplID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudChhc3luYygpID0+IHt9KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHsgICAgXG4gICAgZHJhd19zYW5rZXkoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBkcmF3X3NhbmtleSgpIHtcbiAgICBjb25zdCBjb2xvcnMgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XG4gICAgbGV0IGRhdGEgPSBhd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBjb25zdCBzaXplID0gZ2V0X3NpemUoKTtcbiAgICBzYW5rZXlfc2l6ZS52YWx1ZSA9IHNpemU7XG4gICAgY29uc3QgeyBsaW5rcywgbm9kZXMgfSA9IGNhbGN1bGF0ZV9zYW5rZXkoZGF0YSwgc2l6ZS53aWR0aCAtIDEwLCBzaXplLmhlaWdodCAtIDUpO1xuICAgIFxuICAgIGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQuc2VsZWN0KFwiZy5ub2Rlc1wiKVxuXHQuc2VsZWN0QWxsKFwicmVjdFwiKVxuXHQuZGF0YShub2Rlcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBlID0gZW50ZXIuYXBwZW5kKFwicmVjdFwiKTtcblx0XHRcblx0XHRlLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngwKS5hdHRyKFwieVwiLCAoZCkgPT4gZC55MCk7XG5cdFx0XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcImhlaWdodFwiLCAoZCkgPT4gZC55MSAtIGQueTApXG5cdFx0ICAgIC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQueDEgLSBkLngwKVxuXHRcdCAgICAuYXR0cihcImRhdGFJbmRleFwiLCAoZCkgPT4gZC5pbmRleClcblx0XHQgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiBjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuXHRcdGUuYXBwZW5kKFwidGl0bGVcIikudGV4dCgoZCkgPT4gYCR7ZC5uYW1lfVxcbiR7ZC5ob3Vyc31gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PlxuXHRcdHVwZGF0ZVxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0LmRlbGF5KDUwMClcblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5hdHRyKFwieFwiLCAoZCkgPT4gZC54MClcblx0XHQuYXR0cihcInlcIiwgKGQpID0+IGQueTApXG5cdFx0LmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHRcdC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQueDEgLSBkLngwKVxuXHRcdC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHRcdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKVxuXHRcdC5zZWxlY3QoXCJ0aXRsZVwiKVxuXHRcdC50ZXh0KChkKSA9PiBgJHtkLm5hbWV9XFxuJHtkLmhvdXJzfWApLFxuICAgICAgICAgICAgKGV4aXQpID0+XG5cdFx0ZXhpdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpLmR1cmF0aW9uKDUwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDApLnJlbW92ZSgpXG5cdCkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAvL3RvZG8gcG9ydGFyZSBmdW9yaVxuXHQgICAgLy8gZGF0YSA9IGRhdGEuY3VycmVudFRhcmdldC5fX2RhdGFfX1xuXHQgICAgLy8gY29uc3Qgc291cmNlTGluayA9IGRhdGEuc291cmNlTGlua3M7XG5cdCAgICAvLyBjb25zdCB0YXJnZXRMaW5rID0gZGF0YS50YXJnZXRMaW5rcztcblx0ICAgIC8vIGNvbnN0IGxpbmsgPSAoc291cmNlTGluayAmJiBzb3VyY2VMaW5rWzBdKSA/IHNvdXJjZUxpbmtbMF0gOiB0YXJnZXRMaW5rWzBdO1xuXHQgICAgXG5cdCAgICAvLyBpZihsaW5rKSB7XG5cdCAgICAvLyAgIC8qIEdldCB0aGUgbm9kZSBsaW5rIGZyb20gdGhlIHJlc3QgKi9cblx0ICAgIC8vICAgaWYobGluay5zb3VyY2UuaWQgPT09IGRhdGEuaWQpIHtcblx0ICAgIC8vICAgICBpZihsaW5rLnNvdXJjZV9saW5rICYmIGxpbmsuc291cmNlX2xpbmsgIT09ICcnKVxuXHQgICAgLy8gICAgICAgd2luZG93Lm9wZW4obGluay5zb3VyY2VfbGluaywgJ19ibGFuaycpO1xuXHQgICAgLy8gICB9IGVsc2UgaWYobGluay50YXJnZXQuaWQgPT09IGRhdGEuaWQpIHtcblx0ICAgIC8vICAgICBpZihsaW5rLnRhcmdldF9saW5rICYmIGxpbmsudGFyZ2V0X2xpbmsgIT09ICcnKVxuXHQgICAgLy8gICAgICAgd2luZG93Lm9wZW4obGluay50YXJnZXRfbGluaywgJ19ibGFuaycpO1xuXHQgICAgLy8gICB9IFxuXHQgICAgLy8gfSBcblx0fSk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLnRleHRzXCIpXG5cdC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJ0ZXh0XCIpO1xuXHRcdFxuXHRcdGUudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdCAgICAuZGVsYXkoMTAwMClcblx0XHQgICAgLmR1cmF0aW9uKDUwMClcblx0XHQgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiAoZC54MCA8IHNpemUud2lkdGggLyAyID8gZC54MSArIDYgOiBkLngwIC0gNikpXG5cdFx0ICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gKGQueTEgKyBkLnkwKSAvIDIpXG5cdFx0ICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdFx0ICAgIC5hdHRyKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpXG5cdFx0ICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgKGQpID0+XG5cdFx0XHQgIGQueDAgPCBzaXplLndpZHRoIC8gMiA/IFwic3RhcnRcIiA6IFwiZW5kXCJcblx0XHRcdCApXG5cdFx0ICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDkpXG5cdFx0ICAgIC50ZXh0KChkKSA9PiBkLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJ4XCIsIChkKSA9PiAoZC54MCA8IHNpemUud2lkdGggLyAyID8gZC54MSArIDYgOiBkLngwIC0gNikpXG5cdFx0LmF0dHIoXCJ5XCIsIChkKSA9PiAoZC55MSArIGQueTApIC8gMilcblx0XHQuYXR0cihcImZpbGxcIiwgKGQpID0+IGQzLnJnYihjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpLmRhcmtlcigpKVxuXHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgKGQpID0+XG5cdFx0ICAgICAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuXHRcdCAgICAgKVxuXHRcdC5hdHRyKFwiZm9udC1zaXplXCIsIDkpXG5cdFx0LnRleHQoKGQpID0+IGQubmFtZSksXG4gICAgICAgICAgICAoZXhpdCkgPT5cblx0XHRleGl0XG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAgICAgICAgIC8qIC5kZWxheSg1MDApICovXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cdFx0LnJlbW92ZSgpXG5cdCk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJkZWZzXCIpXG5cdC5zZWxlY3RBbGwoXCJsaW5lYXJHcmFkaWVudFwiKVxuXHQuZGF0YShsaW5rcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBsZyA9IGVudGVyLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpO1xuXHRcdFxuXHRcdGxnLmF0dHIoXCJpZFwiLCAoZCkgPT4gYGdyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKVxuXHRcdCAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcblx0XHQgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC50YXJnZXQueDApO1xuXHRcdFxuXHRcdGxnLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIwXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0XG5cdFx0bGcuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjEwMCVcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC50YXJnZXQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PiB7XG5cdFx0dXBkYXRlXG5cdFx0ICAgIC5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQgICAgLmF0dHIoXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIilcblx0XHQgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5zb3VyY2UueDEpXG5cdFx0ICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcblx0XHR1cGRhdGUuc2VsZWN0QWxsKFwic3RvcFwiKS5yZW1vdmUoKTtcblx0XHR1cGRhdGVcblx0XHQgICAgLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIwXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0XG5cdFx0dXBkYXRlXG5cdFx0ICAgIC5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChleGl0KSA9PiBleGl0LnJlbW92ZSgpXG5cdCk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLmxpbmtzXCIpXG5cdC5zZWxlY3RBbGwoXCJwYXRoXCIpXG5cdC5kYXRhKGxpbmtzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJwYXRoXCIpO1xuXHRcdGUudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdCAgICAuZGVsYXkoMTAwMClcblx0XHQgICAgLmR1cmF0aW9uKDUwMClcblx0XHQgICAgLmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG5cdFx0ICAgIC5hdHRyKFwic3Ryb2tlXCIsIChkKSA9PiBgdXJsKCNncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IGQud2lkdGgpO1xuXHRcdGUuYXBwZW5kKFwidGl0bGVcIikudGV4dCgoZCkgPT4gYCR7ZC5ob3Vyc31gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PlxuXHRcdHVwZGF0ZVxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0LmRlbGF5KDUwMClcblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5hdHRyKFwiZFwiLCBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpKVxuXHRcdC5hdHRyKFwic3Ryb2tlXCIsIChkKSA9PiBgdXJsKCNncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4gZC53aWR0aClcblx0XHQuc2VsZWN0KFwidGl0bGVcIilcblx0XHQudGV4dCgoZCkgPT4gYCR7ZC5ob3Vyc31gKSxcbiAgICAgICAgICAgIChleGl0KSA9PlxuXHRcdGV4aXRcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgICAgICAgICAgLyogLmRlbGF5KDEwMDApICovXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cdFx0LnJlbW92ZSgpXG5cdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBjb25zdCByc3AgPSBbXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPUlHTVBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJsaW5rXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTIyNC4wLjAuMjUxJnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogNjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTE5Mi4xNjguMS43JnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCJJR01QXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcImxpbmtcIjogXCJJR01QXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMlwiLFxuXHQgICAgXCJ0YXJnZXRfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogMTIwXG5cdH0sXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPUlHTVBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIklHTVBcIixcblx0ICAgIFwibGlua1wiOiBcIklHTVBcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0yMjQuMC4wLjImdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogNjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTE5Mi4xNjguMS43JnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCJNRE5TXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcImxpbmtcIjogXCJNRE5TXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249TUROU1wiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInRhcmdldF9jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAzOTZcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249TUROU1wiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCJNRE5TXCIsXG5cdCAgICBcImxpbmtcIjogXCJNRE5TXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MjI0LjAuMC4yNTEmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAzOTZcblx0fVxuICAgIF07XG4gICAgXG4gICAgICAgIFxuICAgIGxldCBkYXRhID0ge1xuXHQvLyBub2RlczogW1xuXHQvLyAgICAgeyBpbmRleDogMCwgbmFtZTogXCJMaWlrZXZhaWh0b1wiLCB2YWx1ZTogMTAwLCBob3VyczogXCIxMDAlXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDEsIG5hbWU6IFwiS2lpbnRlw6R0IGt1bHV0XCIsIHZhbHVlOiA3NSwgaG91cnM6IFwiODUlXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDIsIG5hbWU6IFwiTXV1dHR1dmF0IGt1bHV0XCIsIHZhbHVlOiAxMCwgaG91cnM6IFwiMzowMFwiIH0sXG5cdC8vICAgICB7IGluZGV4OiAzLCBuYW1lOiBcIlBhbGtrYWt1bHV0XCIsIHZhbHVlOiA2OSwgaG91cnM6IFwiMToyMFwiIH0sXG5cdC8vICAgICB7IGluZGV4OiA0LCBuYW1lOiBcIk11dXQga2lpbnRlXCIsIHZhbHVlOiA2LCBob3VyczogXCIxOjQwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDUsIG5hbWU6IFwiS2F0ZVwiLCB2YWx1ZTogMTUsIGhvdXJzOiBcIjE6NDBcIiB9XG5cdC8vIF0sXG5cdG5vZGVzOiBbXG5cdCAgICB7IGluZGV4OiAwLCBuYW1lOiBcIkxpaWtldmFpaHRvXCIsIGhvdXJzOiBcIjEwMCVcIiB9LFxuXHQgICAgeyBpbmRleDogMSwgbmFtZTogXCJLaWludGXDpHQga3VsdXRcIiwgaG91cnM6IFwiODUlXCIgfSxcblx0ICAgIHsgaW5kZXg6IDIsIG5hbWU6IFwiTXV1dHR1dmF0IGt1bHV0XCIsIGhvdXJzOiBcIjM6MDBcIiB9LFxuXHQgICAgeyBpbmRleDogMywgbmFtZTogXCJQYWxra2FrdWx1dFwiLCBob3VyczogXCIxOjIwXCIgfSxcblx0ICAgIHsgaW5kZXg6IDQsIG5hbWU6IFwiTXV1dCBraWludGVcIiwgaG91cnM6IFwiMTo0MFwiIH0sXG5cdCAgICB7IGluZGV4OiA1LCBuYW1lOiBcIkthdGVcIiwgaG91cnM6IFwiMTo0MFwiIH1cblx0XSxcblx0bGlua3M6IFtcblx0ICAgIHsgc291cmNlOiAwLCB0YXJnZXQ6IDEsIHZhbHVlOiA3NSwgaG91cnM6IFwiKzE6MDBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDAsIHRhcmdldDogMiwgdmFsdWU6IDEwLCBob3VyczogXCIrMjowMFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMSwgdGFyZ2V0OiAzLCB2YWx1ZTogNjksIGhvdXJzOiBcIisxOjIwXCIgfSxcblx0ICAgIHsgc291cmNlOiAxLCB0YXJnZXQ6IDQsIHZhbHVlOiA2LCBob3VyczogXCIrMTo0MFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMCwgdGFyZ2V0OiA1LCB2YWx1ZTogMTUsIGhvdXJzOiBcIisxOjQwXCIgfVxuXHRdXG4gICAgfTtcblxuICAgIGRhdGEgPSB3cmFwX2dyYXBoX3JzcChyc3ApO1xuXG4gICAgZGVidWdnZXI7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHdyYXBfZ3JhcGhfcnNwKHJzcCkge1xuICAgIGxldCBub2RlcyA9IFtdO1xuICAgIGxldCBsaW5rcyA9IFtdO1xuXG4gICAgbGV0IG5vZGVzX2FkZGVkX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua3NfYWRkZWRfZGljdCA9IHt9O1xuICAgIGNvbnN0IGZfYWRkX25vZGUgPSAobm9kZV9pZCwgaHJlZiwgY29sb3IpID0+IHtcblx0aWYgKG5vZGVzX2FkZGVkX2RpY3Rbbm9kZV9pZF0gIT0gbnVsbCkgeyByZXR1cm47IH1cblx0bGV0IGluZGV4ID0gbm9kZXMubGVuZ3RoO1xuXHRub2Rlc19hZGRlZF9kaWN0W25vZGVfaWRdID0gaW5kZXg7XG5cdGxldCBuZXdfbm9kZSA9IHsgaW5kZXgsIG5hbWU6IG5vZGVfaWQsIGhyZWYsIGNvbG9yIH07XG5cdG5vZGVzLnB1c2gobmV3X25vZGUpO1xuICAgIH07XG4gICAgY29uc3QgZl9hZGRfbGluayA9IChzb3VyY2UsIHRhcmdldCwgdmFsdWUsIGxhYmVsKSA9PiB7XG5cdGNvbnN0IHNvdXJjZV9pbmRleCA9IG5vZGVzX2FkZGVkX2RpY3Rbc291cmNlXTtcblx0Y29uc3QgdGFyZ2V0X2luZGV4ID0gbm9kZXNfYWRkZWRfZGljdFt0YXJnZXRdO1xuXHRsZXQgbmV3X2xpbmsgPSB7IHNvdXJjZTogc291cmNlX2luZGV4LCB0YXJnZXQ6IHRhcmdldF9pbmRleCwgdmFsdWUsIGxhYmVsIH07XG5cdGxpbmtzLnB1c2gobmV3X2xpbmspO1xuICAgIH07XG4gICAgcnNwLmZvckVhY2goKGVsKSA9PiB7XG5cdGZfYWRkX25vZGUoZWwuc291cmNlLCBlbC5zb3VyY2VfbGluaywgZWwuc291cmNlX2NvbG9yKTtcblx0Zl9hZGRfbm9kZShlbC50YXJnZXQsIGVsLnRhcmdldF9saW5rLCBlbC50YXJnZXRfY29sb3IpO1xuXHRmX2FkZF9saW5rKGVsLnNvdXJjZSwgZWwudGFyZ2V0LCBlbC52YWx1ZSwgZWwubGluayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9zaXplKCkge1xuICAgIGxldCB3aWR0aCA9IHByb3BzLndpZHRoO1xuICAgIGlmICh3aWR0aCA9PSBudWxsKSB7IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAyMDA7IH1cbiAgICBsZXQgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xuICAgIGlmIChoZWlnaHQgPT0gbnVsbCkgeyBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSA1MDsgfVxuXG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfc2Fua2V5KGRhdGEsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBzYW5rZXlpbXBsID0gZDMuc2Fua2V5KClcblx0ICAubm9kZUFsaWduKGQzLnNhbmtleUNlbnRlcilcblx0ICAubm9kZVdpZHRoKDEwKVxuXHQgIC5ub2RlUGFkZGluZygxMClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICBcbiAgICByZXR1cm4gc2Fua2V5aW1wbChkYXRhKTtcbn1cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5ub2RlIHJlY3Qge1xuICBmaWxsLW9wYWNpdHk6IDAuOTtcbiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzO1xufVxuXG4ubm9kZSB0ZXh0IHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmY7XG59XG5cbi5saW5rIHtcbiAgZmlsbDogbm9uZTtcbiAgc3Ryb2tlOiAjMDAwO1xuICBzdHJva2Utb3BhY2l0eTogMC4yO1xufVxuXG4ubGluazpob3ZlciB7XG4gIHN0cm9rZS1vcGFjaXR5OiAwLjU7XG59XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgIDxoMyB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCIgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPGNoYXJ0IHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIlxuICAgICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICA8L2NoYXJ0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnYXBwbGljYXRpb25zJ1wiIHJlZj1cInRhYmxlX2hvc3RfYXBwbGljYXRpb25zXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnY2F0ZWdvcmllcydcIiByZWY9XCJ0YWJsZV9ob3N0X2NhdGVnb3JpZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2NoYXJ0JzogQ2hhcnQsXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIGlzX2NoX2VuYWJsZWQ6IEJvb2xlYW4sXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZpZXdcIikgfHwgdGhpcy4kcHJvcHMudmlld1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiLCBjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIuaWQpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gdGFiLmlkO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBhcHBsaWNhdGlvbnNfdGFiOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2F0ZWdvcmllczogbnVsbCxcbiAgICAgIGNoYXJ0X29wdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfcHJvdG9jb2xzJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L3Byb3RvX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2FwcGxpY2F0aW9uc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9icmVlZF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgYXBwbGljYXRpb25zYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX2NhdGVnb3JpZXMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5QSUUsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvY2F0X2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9jYXRlZ29yaWVzYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgICBpZDogJ2FwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmNhdGVnb3JpZXNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnY2F0ZWdvcmllcycpLFxuICAgICAgICAgIGlkOiAnY2F0ZWdvcmllcydcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkX2FjdGlvbl9jb2x1bW46IGZ1bmN0aW9uKGNvbHVtbnMsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBob3N0ID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fWBcbiAgICAgIGNvbnN0IHZsYW4gPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59YFxuICAgICAgY29uc3QgaWZpZCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaWZpZH1gXG4gICAgICBsZXQgaGFuZGxlcklkID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcbiAgICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICBoYW5kbGVySWQsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/aWZpZD0ke2lmaWR9JiR7bmFtZX09JHtzZXJ2aWNlW3ZhbHVlXS5pZH07ZXEmaXA9JHtob3N0fTtlcWBcbiAgICAgICAgICAgIGlmKHZsYW4gIT0gMClcbiAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfSZ2bGFuX2lkPSR7dmxhbn07ZXFgXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dKVxuICAgICAgfX0pXG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCBpdGVtKTtcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hvc3RfJHt0aGlzLmFwcGxpY2F0aW9uc190YWJ9YF07XG4gICAgfSxcbiAgICBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBQYWdlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdhcHBsaWNhdGlvbnMnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9QCR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy52bGFufSZ0c19zY2hlbWE9aG9zdDpuZHBpJnBhZ2U9aGlzdG9yaWNhbCZwcm90b2NvbD0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzEwJywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuc2VudFwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcxMCcsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMucmN2ZFwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcxMCcsIG5hbWU6ICdyY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3NlbnQgPSAocm93LmJ5dGVzX3NlbnQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9yY3ZkID0gKHJvdy5ieXRlc19yY3ZkICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCcsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN3Byb3RvJywgJ2FwcGxpY2F0aW9uJyk7XG4gIFxuICBsZXQgYXBwbGljYXRpb25zQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGFwcGxpY2F0aW9uc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zID0gYXBwbGljYXRpb25zQ29uZmlnO1xuXG5cbiAgLyogQ2F0ZWdvcmllcyB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NhdGVnb3JpZXMnICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKVxuXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuY2F0ZWdvcnlcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mdHNfc2NoZW1hPWhvc3Q6bmRwaV9jYXRlZ29yaWVzJnBhZ2U9aGlzdG9yaWNhbCZjYXRlZ29yeT0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc1wiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbnMnLCBkYXRhOiAnYXBwbGljYXRpb25zJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS8ke2RhdGEuaHJlZn0ke2RhdGEuY2F0ZWdvcnlfaWR9XCI+JHtkYXRhLm1vcmVfcHJvdG9zIHx8ICcnfTwvYT5gXG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzE1JywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjUnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgd2lkdGg6ICcyMCUnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3Y2F0JywgJ2NhdGVnb3J5Jyk7XG4gIFxuICBsZXQgY2F0ZWdvcmllc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjYXRlZ29yaWVzQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA0IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV1cbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMiB9LFxuICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICBdXG4gIFxuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPGgzIHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIiBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8Y2hhcnQgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiXG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvY2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdhcHBsaWNhdGlvbnMnXCIgcmVmPVwidGFibGVfaG9zdF9hcHBsaWNhdGlvbnNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdjYXRlZ29yaWVzJ1wiIHJlZj1cInRhYmxlX2hvc3RfY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnY2hhcnQnOiBDaGFydCxcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgaXNfY2hfZW5hYmxlZDogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmlld1wiKSB8fCB0aGlzLiRwcm9wcy52aWV3XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPT0gaS5pZCA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCIsIGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYi5pZCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSB0YWIuaWQ7XG4gICAgfSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGFwcGxpY2F0aW9uc190YWI6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnM6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzOiBudWxsLFxuICAgICAgY2hhcnRfb3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfMTBfbmRwaV9wcm90b2NvbHMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5QSUUsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvcHJvdG9fZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGFwcGxpY2F0aW9uc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYXBwbGljYXRpb25zYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfY2F0ZWdvcmllcycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9jYXRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2NhdGVnb3JpZXNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfYnJlZWQnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5QSUUsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvYnJlZWRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuYXBwbGljYXRpb25zX3RhYicpLFxuICAgICAgICAgIGFjdGl2ZTogKHRoaXMuJHByb3BzLnZpZXcgPT0gJ2FwcGxpY2F0aW9ucycpLFxuICAgICAgICAgIGlkOiAnYXBwbGljYXRpb25zJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuY2F0ZWdvcmllc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdjYXRlZ29yaWVzJyksXG4gICAgICAgICAgaWQ6ICdjYXRlZ29yaWVzJ1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRfYWN0aW9uX2NvbHVtbjogZnVuY3Rpb24oY29sdW1ucywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IGhvc3QgPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9YFxuICAgICAgY29uc3QgdmxhbiA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMudmxhbn1gXG4gICAgICBjb25zdCBpZmlkID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfWBcbiAgICAgIGxldCBoYW5kbGVySWQgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWp1bXAtaGlzdG9yaWNhbFwiO1xuICAgICAgY29sdW1ucy5wdXNoKHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuICAgICAgICAgIGhhbmRsZXJJZCxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9pZmlkPSR7aWZpZH0mJHtuYW1lfT0ke3NlcnZpY2VbdmFsdWVdLmlkfTtlcSZpcD0ke2hvc3R9O2VxYFxuICAgICAgICAgICAgaWYodmxhbiAhPSAwKVxuICAgICAgICAgICAgICB1cmwgPSBgJHt1cmx9JnZsYW5faWQ9JHt2bGFufTtlcWBcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybClcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFt7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfV0pXG4gICAgICB9fSlcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsIGl0ZW0pO1xuICAgIH0sIFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaG9zdF8ke3RoaXMuYXBwbGljYXRpb25zX3RhYn1gXTtcbiAgICB9LFxuICAgIGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICAgICAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIFBhZ2VWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2FwcGxpY2F0aW9ucydcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9kYXRhLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ2FwcGxpY2F0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnRzX3NjaGVtYT1ob3N0Om5kcGkmcGFnZT1oaXN0b3JpY2FsJnByb3RvY29sPSR7ZGF0YS5sYWJlbH1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDEsIHdpZHRoOiAnMTAnLCBuYW1lOiAnZHVyYXRpb24nLCBkYXRhOiAnZHVyYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5zZW50XCIpLCB0YXJnZXRzOiAyLCB3aWR0aDogJzEwJywgbmFtZTogJ3NlbnQnLCBkYXRhOiAnYnl0ZXNfc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5yY3ZkXCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzEwJywgbmFtZTogJ3JjdmQnLCBkYXRhOiAnYnl0ZXNfcmN2ZCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYnJlYWtkb3duXCIpLCB0YXJnZXRzOiA0LCB3aWR0aDogJzEwJywgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2Vfc2VudCA9IChyb3cuYnl0ZXNfc2VudCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3JjdmQgPSAocm93LmJ5dGVzX3JjdmQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVCcmVha2Rvd24ocGVyY2VudGFnZV9zZW50LCBwZXJjZW50YWdlX3JjdmQsIGkxOG4oJ2hvc3RfZGV0YWlscy5zZW50JyksIGkxOG4oJ2hvc3RfZGV0YWlscy5yY3ZkJykpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiA1LCB3aWR0aDogJzIwJywgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9wZXJjZW50YWdlXCIpLCB0YXJnZXRzOiA2LCB3aWR0aDogJzIwJywgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAncGVyY2VudGFnZScsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3cHJvdG8nLCAnYXBwbGljYXRpb24nKTtcbiAgXG4gIGxldCBhcHBsaWNhdGlvbnNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgYXBwbGljYXRpb25zQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgUGFnZVZ1ZS5jb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMgPSBhcHBsaWNhdGlvbnNDb25maWc7XG5cblxuICAvKiBDYXRlZ29yaWVzIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2F0ZWdvcmllcycgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9kYXRhLmx1YWAsIHRtcF9wYXJhbXMpXG5cblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5jYXRlZ29yeVwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdjYXRlZ29yeScsIGRhdGE6ICdjYXRlZ29yeScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9QCR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy52bGFufSZ0c19zY2hlbWE9aG9zdDpuZHBpX2NhdGVnb3JpZXMmcGFnZT1oaXN0b3JpY2FsJmNhdGVnb3J5PSR7ZGF0YS5sYWJlbH1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYXBwbGljYXRpb25zXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ2FwcGxpY2F0aW9ucycsIGRhdGE6ICdhcHBsaWNhdGlvbnMnLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbCB8fCAnJ30gPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9LyR7ZGF0YS5ocmVmfSR7ZGF0YS5jYXRlZ29yeV9pZH1cIj4ke2RhdGEubW9yZV9wcm90b3MgfHwgJyd9PC9hPmBcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMTUnLCBuYW1lOiAnZHVyYXRpb24nLCBkYXRhOiAnZHVyYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyNScsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCB3aWR0aDogJzIwJScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdjYXQnLCAnY2F0ZWdvcnknKTtcbiAgXG4gIGxldCBjYXRlZ29yaWVzQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNhdGVnb3JpZXNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIDQgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXVxuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5jb2x1bW5EZWZzID0gW1xuICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gIF1cbiAgXG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRyYWZmaWNfdGFibGVcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfdHJhZmZpY190YWJsZS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ190cmFmZmljX3RhYmxlLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ190cmFmZmljX3RhYmxlLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX3RyYWZmaWNfdGFibGUuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX3RyYWZmaWNfdGFibGUudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5jb25zdCB0cmFmZmljX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbmZpZ190cmFmZmljX3RhYmxlID0gcmVmKHt9KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbn0pXG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICB9XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5sNF9wcm90bycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9wcm90b19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0cmFmZmljX3Byb3Rvc2AsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmNvbnRhY3RlZF9ob3N0cycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9jb250YWN0ZWRfaG9zdHNfZGF0YS5sdWFgLFxuICAgIGlkOiBgY29udGFjdGVkX2hvc3RzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMudHJhZmZpYycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC90cmFmZmljX2RhdGEubHVhYCxcbiAgICBpZDogYHRyYWZmaWNgLFxuICB9LFxuXVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gICAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwicHJvdG9jb2xcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwcm90b2NvbCcsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY2hhcnRcIiksIHRhcmdldHM6IDEsIG5hbWU6ICdoaXN0b3JpY2FsJywgZGF0YTogJ2hpc3RvcmljYWwnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJ5dGVzX3NlbnRcIiksIHRhcmdldHM6IDIsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy5ieXRlc19yY3ZkXCIpLCB0YXJnZXRzOiAzLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2Vfc2VudCA9IChyb3cuYnl0ZXNfc2VudCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfYnl0ZXNcIiksIHRhcmdldHM6IDUsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90YWxfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCUnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICd0b3RhbF9wZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGxldCB0cmFmZmljQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIHRyYWZmaWNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdfdHJhZmZpY190YWJsZS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTYgbWItNCBtdC00XCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIlxuICAgICAgICAgICAgICAgIEBjaGFydF9yZWxvYWRlZD1cImNoYXJ0X2RvbmVcIj5cbiAgICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmxfcGFyYW1zOiBPYmplY3QsXG59KVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY2hhcnRfb3B0aW9ucyA9IFtcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMucGFja2V0c19zZW50JyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvc2VudF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBwYWNrZXRzX3NlbnRgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5wYWNrZXRzX3JjdmQnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5QSUUsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9yY3ZkX2RhdGEubHVhYCxcbiAgICBpZDogYHBhY2tldHNfcmN2ZGAsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRjcF9mbGFncycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL3RjcF9mbGFnc19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0Y3BfZmxhZ3NgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5hcnBfZGlzdHJpYnV0aW9uJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvYXJwX2RhdGEubHVhYCxcbiAgICBpZDogYGFycF9yZXF1ZXN0c2AsXG4gIH0sXG5dXG5cbmZ1bmN0aW9uIGNoYXJ0X2RvbmUoZGF0YSwgdG1wLCB0bXAyKSB7XG4gIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKVxufVxuXG5vbk1vdW50ZWQoKCkgPT4ge30pXG5cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiLyoqXG4gICAgKEMpIDIwMjMgLSBudG9wLm9yZyAgICBcbiovXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiByZWY9XCJvdmVybGF5XCIgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBvdmVybGF5ID0gcmVmKG51bGwpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7fSk7XG5cbi8qIFNob3cgdGhlIGxvYWRpbmcgKi9cbmZ1bmN0aW9uIHNob3dfbG9hZGluZyh0aW1lID0gNTAwKSB7XG4gICQob3ZlcmxheS52YWx1ZSkuZmFkZUluKHRpbWUpO1xufVxuXG4vKiBIaWRlIHRoZSBsb2FkaW5nICovXG5mdW5jdGlvbiBoaWRlX2xvYWRpbmcodGltZSA9IDUwMCkge1xuICAkKG92ZXJsYXkudmFsdWUpLmZhZGVPdXQodGltZSk7XG59XG5cbmRlZmluZUV4cG9zZSh7IGhpZGVfbG9hZGluZywgc2hvd19sb2FkaW5nIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IHYtaWY9XCJub19kYXRhXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCIgaWQ9XCJlbXB0eS1tZXNzYWdlXCI+e3sgbm9fZGF0YV9tZXNzYWdlIHx8IF9pMThuKCdmbG93c19wYWdlLm5vX2RhdGEnKSB9fTwvZGl2PlxuPGRpdj5cbiAgPHN2Z1xuICAgIHJlZj1cInNhbmtleV9jaGFydF9yZWZcIlxuICAgIDp3aWR0aD1cInNhbmtleV9zaXplLndpZHRoXCJcbiAgICA6aGVpZ2h0PVwic2Fua2V5X3NpemUuaGVpZ2h0XCJcbiAgICBzdHlsZT1cIm1hcmdpbjoxMHB4O1wiPlxuICAgIDxnIGNsYXNzPVwibm9kZXNcIiBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjU7XCIvPlxuICAgIDxnIGNsYXNzPVwibGlua3NcIiBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjM7ZmlsbDpub25lO1wiLz5cbiAgPC9zdmc+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXAgPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGQzID0gZDN2NztcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnbm9kZV9jbGljaycsICd1cGRhdGVfd2lkdGgnLCAndXBkYXRlX2hlaWdodCddKVxuXG5jb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAyLjUsXG4gICAgcmlnaHQ6IDUsXG4gICAgYm90dG9tOiAyLjUsXG4gICAgbGVmdDogNVxufTtcblxuY29uc3Qgbm9kZV93aWR0aCA9IDEwO1xuY29uc3Qgbm9fZGF0YSA9IHJlZihmYWxzZSlcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIG5vX2RhdGFfbWVzc2FnZTogU3RyaW5nLFxuICB3aWR0aDogTnVtYmVyLFxuICBoZWlnaHQ6IE51bWJlcixcbiAgc2Fua2V5X2RhdGE6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBzYW5rZXlfY2hhcnRfcmVmID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X3NpemUgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xuICAgIGF0dGFjaF9ldmVudHMoKTtcbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5zYW5rZXlfZGF0YSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgc2V0X3NhbmtleV9kYXRhKHRydWUpO1xufSk7XG5cbmZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YShyZXNldCkge1xuICAgIGlmIChyZXNldCkge1xuXHQkKFwiLm5vZGVzXCIsIHNhbmtleV9jaGFydF9yZWYudmFsdWUpLmVtcHR5KCk7XG5cdCQoXCIubGlua3NcIiwgc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSkuZW1wdHkoKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNhbmtleV9kYXRhLm5vZGVzID09IG51bGwgfHwgcHJvcHMuc2Fua2V5X2RhdGEubGlua3MgPT0gbnVsbFxuXHR8fCBwcm9wcy5zYW5rZXlfZGF0YS5sZW5ndGggPT0gMCB8fCBwcm9wcy5zYW5rZXlfZGF0YS5saW5rcy5sZW5ndGggPT0gMCkge1xuXHRyZXR1cm47XG4gICAgfVxuICAgIGRyYXdfc2Fua2V5KCk7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaF9ldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHNldF9zYW5rZXlfZGF0YSh0cnVlKSk7XG59XG5cbmxldCBzYW5rZXkgPSBudWxsO1xubGV0IHNhbmtleURhdGEgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gZHJhd19zYW5rZXkoKSB7XG4gICAgY29uc3QgY29sb3JzID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApO1xuICAgIGxldCBkYXRhID0gcHJvcHMuc2Fua2V5X2RhdGE7Ly9hd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBjb25zdCBzaXplID0gZ2V0X3NpemUoKTtcbiAgICBzYW5rZXlfc2l6ZS52YWx1ZSA9IHNpemU7XG4gICAgc2Fua2V5ID0gY3JlYXRlX3NhbmtleShzaXplLndpZHRoIC0gMTAsIHNpemUuaGVpZ2h0IC0gNSk7XG4gICAgc2Fua2V5RGF0YSA9IHNhbmtleShkYXRhKTtcbiAgICBjb25zdCB7IGxpbmtzLCBub2RlcyB9ID0gc2Fua2V5RGF0YTtcbiAgICBcbiAgICBsZXQgZDNfbm9kZXMgPSBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubm9kZXNcIilcblx0LnNlbGVjdEFsbChcImdcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcblx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IGB0cmFuc2xhdGUoJHtkLngwfSwgJHtkLnkwfSlgKVxuICAgIFxuICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcblx0ICAuc2NhbGVFeHRlbnQoWzEsIDQwXSlcblx0ICAub24oXCJ6b29tXCIsIHpvb21lZCk7XG4gICAgXG4gICAgZDNfbm9kZXMuYXBwZW5kKFwicmVjdFwiKVxuICAgIC8vIC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgLy8gLmRlbGF5KDEwMDApXG4gICAgLy8gLmR1cmF0aW9uKDUwMClcblx0LmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHQuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLngxIC0gZC54MClcblx0LmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LW5vZGVcIilcblx0LmF0dHIoXCJzdHlsZVwiLCBcImN1cnNvcjptb3ZlO1wiKTtcbiAgICBkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKGQpID0+IGAke2QubGFiZWx9YCk7XG4gICAgXG4gICAgLy8gUmVsYXRpdmUgdG8gY29udGFpbmVyLyBub2RlIHJlY3QgICAgXG4gICAgZDNfbm9kZXMuZGF0YShub2Rlcylcblx0LmFwcGVuZChcInRleHRcIilcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApXG4gICAgXHQuYXR0cignY2xhc3MnLCAnbGFiZWwnKVxuICAgIFx0LnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdhdXRvJylcblx0LmF0dHIoXCJzdHlsZVwiLCBcImN1cnNvcjpwb2ludGVyO1wiKVxuICAgIFx0LnN0eWxlKCdmaWxsLW9wYWNpdHknLCBmdW5jdGlvbihkKSB7IHJldHVybiAxOyB9IClcbiAgICBcdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gXCIjMDAwXCIpXG4gICAgLy8gLmF0dHIoXCJmaWxsXCIsIChkKSA9PiBkMy5yZ2IoY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKS5kYXJrZXIoKSlcblx0LmF0dHIoXCJ4XCIsIChkKSA9PiAoZC54MCA8IHNpemUud2lkdGggLyAyID8gNiArIChkLngxIC0gZC54MCkgOiAtNikpXG5cdC5hdHRyKFwieVwiLCAoZCkgPT4gKGQueTEgLSBkLnkwKSAvIDIpXG4gICAgXHQuYXR0cihcImFsaWdubWVudC1iYXNlbGluZVwiLCBcIm1pZGRsZVwiKVxuXHQuYXR0cihcInRleHQtYW5jaG9yXCIsIChkKSA9PlxuICAgICAgICAgICAgICBkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBcInN0YXJ0XCIgOiBcImVuZFwiXG4gICAgICAgICAgICAgKVxuICAgIFx0LmF0dHIoXCJmb250LXNpemVcIiwgMTIpXG4gICAgXHQudGV4dCgoZCkgPT4gZC5sYWJlbClcblx0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQsIGRhdGFfb2JqKXsgZW1pdCgnbm9kZV9jbGljaycsIGRhdGFfb2JqLmRhdGEpOyB9KTsgICAgXG4gICAgZDNfbm9kZXNcblx0LmNhbGwoZDMuZHJhZygpLnN1YmplY3QoZCA9PiBkKS5vbihcInN0YXJ0XCIsIGRyYWdTdGFydCkub24oXCJkcmFnXCIsIGRyYWdNb3ZlKSk7XG4gICAgXG4gICAgY29uc3QgbGlua3NfZDMgPSBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0ICAuc2VsZWN0KFwiZy5saW5rc1wiKVxuXHQgIC5zZWxlY3RBbGwoXCJnXCIpXG5cdCAgLmRhdGEobGlua3MpXG5cdCAgLmpvaW4oKGVudGVyKSA9PiBlbnRlci5hcHBlbmQoXCJnXCIpKVxuICAgIFxuICAgIGxldCBsZ19kMyA9IGxpbmtzX2QzLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpO1xuICAgIGxnX2QzLmF0dHIoXCJpZFwiLCAoZCkgPT4gYGdyYWRpZW50LSR7ZC5pbmRleH1gKVxuICAgIFx0LmF0dHIoXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIilcbiAgICBcdC5hdHRyKFwieDFcIiwgKGQpID0+IGQuc291cmNlLngxKVxuICAgIFx0LmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC50YXJnZXQueDApO1xuICAgIFxuICAgIGxnX2QzLmFwcGVuZChcInN0b3BcIilcbiAgICBcdC5hdHRyKFwib2Zmc2V0XCIsIFwiMFwiKVxuICAgIFx0LmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC5zb3VyY2UuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcbiAgICBcbiAgICBsZ19kMy5hcHBlbmQoXCJzdG9wXCIpXG4gICAgXHQuYXR0cihcIm9mZnNldFwiLCBcIjEwMCVcIilcbiAgICBcdC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQudGFyZ2V0LmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgXG4gICAgbGlua3NfZDNcblx0LmFwcGVuZChcInBhdGhcIilcbiAgICBcdC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpXG5cdC5hdHRyKFwiY2xhc3NcIiwgXCJzYW5rZXktbGlua1wiKVxuXHQuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSlcbiAgICAvLyAuYXR0cihcInN0eWxlXCIsIGBzdHJva2Utd2lkdGg6ICR7ZC53aWR0aH1weDtgKVxuXHQuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4ge1xuXHQgICAgcmV0dXJuIE1hdGgubWF4KDEsIGQud2lkdGgpO1xuXHR9KVxuICAgIC8vIC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgLy8gLmRlbGF5KDEwMDApXG4gICAgLy8gLmR1cmF0aW9uKDUwMCkgXG4gICAgXHQuYXR0cihcInN0cm9rZVwiLCAoZCkgPT4gYHVybCgjZ3JhZGllbnQtJHtkLmluZGV4fWApXG4gICAgLy8gXHQuYXR0cihcInN0cm9rZVwiLCBgYmxhY2tgKVxuICAgIFxuICAgIC8vIFx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IE1hdGgubWF4KDEwMCwgZC53aWR0aCkpO1xuICAgICAgICBcbiAgICBsaW5rc19kM1xuICAgIFx0LmFwcGVuZChcInRpdGxlXCIpXG4gICAgXHQudGV4dCgoZCkgPT4gYCR7ZC5sYWJlbH1gKTtcbn1cblxuZnVuY3Rpb24gZHJhZ1N0YXJ0KGV2ZW50LCBkKSB7XG4gICAgZC5fX3ggPSBldmVudC54O1xuICAgIGQuX195ID0gZXZlbnQueTtcbiAgICBkLl9feDAgPSBkLngwO1xuICAgIGQuX195MCA9IGQueTA7XG4gICAgZC5fX3gxID0gZC54MTtcbiAgICBkLl9feTEgPSBkLnkxO1xufSAvL2RyYWdTdGFydFxuXG5mdW5jdGlvbiBkcmFnTW92ZShldmVudCwgZCkge1xuICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdGNvbnN0IGR4ID0gZXZlbnQueCAtIGQuX194O1xuXHRjb25zdCBkeSA9IGV2ZW50LnkgLSBkLl9feTtcblx0Y29uc3Qgd2lkdGggPSBzYW5rZXlfc2l6ZS52YWx1ZS53aWR0aDtcblx0Y29uc3QgaGVpZ2h0ID0gc2Fua2V5X3NpemUudmFsdWUud2lkdGg7XG5cdGQueDAgPSBkLl9feDAgKyBkeDtcblx0ZC54MSA9IGQuX194MSArIGR4O1xuXHRkLnkwID0gZC5fX3kwICsgZHk7XG5cdGQueTEgPSBkLl9feTEgKyBkeTtcblx0XG5cdGlmIChkLngwIDwgMCkge1xuICAgICAgICAgICAgZC54MCA9IDA7XG4gICAgICAgICAgICBkLngxID0gbm9kZV93aWR0aDtcblx0fSAvLyBpZlxuXHRcblx0aWYgKGQueDEgPiB3aWR0aCkge1xuICAgICAgICAgICAgZC54MCA9IHdpZHRoIC0gbm9kZV93aWR0aDtcbiAgICAgICAgICAgIGQueDEgPSB3aWR0aDtcblx0fSAvLyBpZlxuXHRcblx0aWYgKGQueTAgPCAwKSB7XG4gICAgICAgICAgICBkLnkwID0gMDtcbiAgICAgICAgICAgIGQueTEgPSBkLl9feTEgLSBkLl9feTA7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLnkxID4gaGVpZ2h0KSB7XG4gICAgICAgICAgICBkLnkwID0gaGVpZ2h0IC0gKGQuX195MSAtIGQuX195MCk7XG4gICAgICAgICAgICBkLnkxID0gaGVpZ2h0O1xuXHR9IC8vIGlmXG5cdHNhbmtleS51cGRhdGUoc2Fua2V5RGF0YSk7XG5cdGQzLnNlbGVjdEFsbChcIi5zYW5rZXktbGlua1wiKS5hdHRyKFwiZFwiLCBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpKTtcblx0cmV0dXJuIGB0cmFuc2xhdGUoJHtkLngwfSwgJHtkLnkwfSlgO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB6b29tZWQoe3RyYW5zZm9ybX0pIHtcbiAgICBnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcbn1cbmZ1bmN0aW9uIGdldF9zaXplKCkge1xuICAgIGVtaXQoJ3VwZGF0ZV93aWR0aCcpO1xuICAgIGxldCB3aWR0aCA9IHByb3BzLndpZHRoO1xuICAgIGlmICh3aWR0aCA9PSB1bmRlZmluZWQpIHsgd2lkdGggPSAkKHNhbmtleV9jaGFydF9yZWYudmFsdWUpLnBhcmVudCgpLnBhcmVudCgpLndpZHRoKCkgLSAxMCB9XG5cbiAgICBlbWl0KCd1cGRhdGVfaGVpZ2h0Jyk7XG4gICAgbGV0IGhlaWdodCA9IHByb3BzLmhlaWdodFxuICAgIGlmIChoZWlnaHQgPT0gdW5kZWZpbmVkKSB7IGhlaWdodCA9ICQoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSkucGFyZW50KCkucGFyZW50KCkuaGVpZ2h0KCkgLSA4MDsgfVxuXG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfc2Fua2V5KHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBfc2Fua2V5ID0gZDMuc2Fua2V5KClcblx0ICAubm9kZUFsaWduKGQzLnNhbmtleUNlbnRlcilcblx0ICAubm9kZVdpZHRoKDEwKVxuXHQgIC5ub2RlUGFkZGluZyhub2RlX3dpZHRoKVxuXHQgIC5leHRlbnQoW1xuXHQgICAgICBbMCwgNV0sXG5cdCAgICAgIFt3aWR0aCwgaGVpZ2h0XVxuXHQgIF0pO1xuICAgIHJldHVybiBfc2Fua2V5O1xufVxuXG4vKiBTZXQgdG8gdHJ1ZSwgdG8gc2hvdyB0aGUgJ05vIERhdGEnIG1lc3NhZ2UgKi9cbmZ1bmN0aW9uIHNldF9ub19kYXRhX2ZsYWcoc2V0X25vX2RhdGEpIHtcbiAgbm9fZGF0YS52YWx1ZSA9IHNldF9ub19kYXRhXG59XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG4gICAgXG5kZWZpbmVFeHBvc2UoeyBkcmF3X3NhbmtleSwgc2V0X25vX2RhdGFfZmxhZyB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi8qIC5ub2RlIHJlY3QgeyAqL1xuLyogICBmaWxsLW9wYWNpdHk6IDAuOTsgKi9cbi8qICAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzOyAqL1xuLyogfSAqL1xuXG4vKiAubm9kZSB0ZXh0IHsgKi9cbi8qICAgcG9pbnRlci1ldmVudHM6IG5vbmU7ICovXG4vKiAgIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmY7ICovXG4vKiB9ICovXG5cbi8qIHBhdGgubGluay5saW5rMiB7ICovXG4vKiAgICAgYWxsOiBpbml0aWFsOyAqL1xuLyogICAgIGZpbGw6IHVuc2V0OyAqL1xuLyogICAgIHN0cm9rZTogdW5zZXQ7ICovXG4vKiAgICAgc3Ryb2tlLW9wYWNpdHk6IHVuc2V0OyAqL1xuLyogICAgIHN0cm9rZS13aWR0aDogdW5zZXQ7ICovXG4vKiB9ICovXG5cbi8qIC5saW5rOmhvdmVyIHsgKi9cbi8qICAgc3Ryb2tlLW9wYWNpdHk6IDAuNTsgKi9cbi8qIH0gKi9cbjwvc3R5bGU+XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL250b3AtdXRpbHMuanNcIjtcblxubGV0IGQzID0gZDN2NztcblxuXG5mdW5jdGlvbiBnZXRfZDNfY29sb3IoaW5kZXgpIHtcbn1cblxuXG5cbmNvbnN0IGRlZmF1bHRTYW5rZXlTZXR0aW5ncyA9IHtcbiAgYWxpZ246IFwianVzdGlmeVwiLCAvLyBjb252ZW5pZW5jZSBzaG9ydGhhbmQgZm9yIG5vZGVBbGlnblxuICBub2RlSWQ6IGQgPT4gZC5pZCwgLy8gZ2l2ZW4gZCBpbiBub2RlcywgcmV0dXJucyBhIHVuaXF1ZSBpZGVudGlmaWVyIChzdHJpbmcpXG4gIG5vZGVUaXRsZTogZCA9PiBgJHtkLmlkfWAsIC8vIGdpdmVuIGQgaW4gKGNvbXB1dGVkKSBub2RlcywgaG92ZXIgdGV4dFxuICBub2RlR3JvdXA6IGQgPT4gZC5pZC5zcGxpdCgvXFxXLylbMF0sXG4gIG5vZGVBbGlnbjogZDMuc2Fua2V5SnVzdGlmeSwgLy8gU2Fua2V5IG5vZGUgYWxpZ25tZW50IHN0cmF0ZWd5OiBsZWZ0LCByaWdodCwganVzdGlmeSwgY2VudGVyXG4gIG5vZGVXaWR0aDogMTUsIC8vIHdpZHRoIG9mIG5vZGUgcmVjdHNcbiAgbm9kZVBhZGRpbmc6IDEwLCAvLyB2ZXJ0aWNhbCBzZXBhcmF0aW9uIGJldHdlZW4gYWRqYWNlbnQgbm9kZXNcbiAgbm9kZUxhYmVsOiBkID0+IGQuaWQsXG4gIG5vZGVMYWJlbFBhZGRpbmc6IDYsIC8vIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIG5vZGUgYW5kIGxhYmVsXG4gIG5vZGVTdHJva2U6IFwiY3VycmVudENvbG9yXCIsIC8vIHN0cm9rZSBhcm91bmQgbm9kZSByZWN0c1xuICBsaW5rU291cmNlOiAoe3NvdXJjZX0pID0+IHNvdXJjZSwgLy8gZ2l2ZW4gZCBpbiBsaW5rcywgcmV0dXJucyBhIG5vZGUgaWRlbnRpZmllciBzdHJpbmdcbiAgbGlua1RhcmdldDogKHt0YXJnZXR9KSA9PiB0YXJnZXQsIC8vIGdpdmVuIGQgaW4gbGlua3MsIHJldHVybnMgYSBub2RlIGlkZW50aWZpZXIgc3RyaW5nXG4gIGxpbmtTb3VyY2VOb2RlOiAoe3NvdXJjZV9ub2RlfSkgPT4gc291cmNlX25vZGUsIC8vIGdpdmVuIGQgaW4gbGlua3MsIHJldHVybnMgYSBub2RlIGlkZW50aWZpZXIgc3RyaW5nXG4gIGxpbmtUYXJnZXROb2RlOiAoe3RhcmdldF9ub2RlfSkgPT4gdGFyZ2V0X25vZGUsIC8vIGdpdmVuIGQgaW4gbGlua3MsIHJldHVybnMgYSBub2RlIGlkZW50aWZpZXIgc3RyaW5nXG4gIGxpbmtQYXRoOiBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpLCAvLyBnaXZlbiBkIGluIChjb21wdXRlZCkgbGlua3MsIHJldHVybnMgdGhlIFNWRyBwYXRoXG4gIGxpbmtWYWx1ZTogKHt2YWx1ZX0pID0+IHZhbHVlLCAvLyBnaXZlbiBkIGluIGxpbmtzLCByZXR1cm5zIHRoZSBxdWFudGl0YXRpdmUgdmFsdWVcbiAgbGlua0xpbms6ICh7bGlua30pID0+IGxpbmssIC8vIGdpdmVuIGQgaW4gbGlua3MsIHJldHVybnMgdGhlIHF1YW50aXRhdGl2ZSB2YWx1ZVxuICBsaW5rVGl0bGU6IGQgPT4gYCR7ZC5zb3VyY2Vfbm9kZX0g4oaSICR7ZC50YXJnZXRfbm9kZX0gOiAke2QubGlua31cXG4ke2QudmFsdWV9YCwgLy8gZ2l2ZW4gZCBpbiAoY29tcHV0ZWQpIGxpbmtzXG4gIGxpbmtDb2xvcjogKHtsaW5rX2NvbG9yfSkgPT4gbGlua19jb2xvciwgLy8gc291cmNlLCB0YXJnZXQsIHNvdXJjZS10YXJnZXQsIG9yIHN0YXRpYyBjb2xvclxuICBzb3VyY2VDb2xvcjogKHtzb3VyY2VfY29sb3J9KSA9PiBzb3VyY2VfY29sb3IgPyBzb3VyY2VfY29sb3IgOiAnJyxcbiAgdGFyZ2V0Q29sb3I6ICh7dGFyZ2V0X2NvbG9yfSkgPT4gdGFyZ2V0X2NvbG9yID8gdGFyZ2V0X2NvbG9yIDogJycsXG4gIHNvdXJjZUxpbms6ICh7c291cmNlX2xpbmt9KSA9PiBzb3VyY2VfbGluayA/IHNvdXJjZV9saW5rIDogJycsXG4gIHRhcmdldExpbms6ICh7dGFyZ2V0X2xpbmt9KSA9PiB0YXJnZXRfbGluayA/IHRhcmdldF9saW5rIDogJycsXG4gIGxpbmtTdHJva2VPcGFjaXR5OiAwLjUsIC8vIGxpbmsgc3Ryb2tlIG9wYWNpdHlcbiAgbGlua01peEJsZW5kTW9kZTogXCJtdWx0aXBseVwiLCAvLyBsaW5rIGJsZW5kaW5nIG1vZGVcbiAgY29sb3JzOiBkMy5zY2hlbWVUYWJsZWF1MTAsIC8vIGFycmF5IG9mIGNvbG9yc1xuICB3aWR0aDogMTIwMCwgLy8gb3V0ZXIgd2lkdGgsIGluIHBpeGVsc1xuICBoZWlnaHQ6IDYwMCwgLy8gb3V0ZXIgaGVpZ2h0LCBpbiBwaXhlbHNcbiAgbWFyZ2luVG9wOiA1LCAvLyB0b3AgbWFyZ2luLCBpbiBwaXhlbHNcbiAgbWFyZ2luUmlnaHQ6IDEsIC8vIHJpZ2h0IG1hcmdpbiwgaW4gcGl4ZWxzXG4gIG1hcmdpbkJvdHRvbTogNSwgLy8gYm90dG9tIG1hcmdpbiwgaW4gcGl4ZWxzXG4gIG1hcmdpbkxlZnQ6IDEsIC8vIGxlZnQgbWFyZ2luLCBpbiBwaXhlbHNcbn1cblxuY29uc3QgZm9ybWF0Rmxvd1RpdGxlID0gKGQpID0+IGAke2kxOG4oJ2Zsb3cnKX06ICR7ZC5zb3VyY2Vfbm9kZX0g4oaSICR7ZC50YXJnZXRfbm9kZX1cXG4ke2kxOG4oJ3Byb3RvY29sJyl9OiAke2QubGlua31cXG4ke2kxOG4oJ3RyYWZmaWMnKX06ICR7TnRvcFV0aWxzLmJ5dGVzVG9TaXplKGQudmFsdWUpfWBcblxuY29uc3QgZ2V0RGVmYXVsdFNhbmtleVNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBkZWZhdWx0U2Fua2V5U2V0dGluZ3M7XG59XG5cbmNvbnN0IGdldF9kYXRhID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHsgfTtcbn1cblxuXG5jb25zdCBzYW5rZXlVdGlscyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgICAgZm9ybWF0Rmxvd1RpdGxlLFxuICAgICAgZ2V0X2RhdGEsXG4gICAgZ2V0RGVmYXVsdFNhbmtleVNldHRpbmdzXG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNhbmtleVV0aWxzO1xuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8TG9hZGluZyByZWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItM1wiIHN0eWxlPVwiaGVpZ2h0OiA3MHZoO1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1iLTJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbm8td3JhcCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNnJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdob3N0cycpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9ob3N0c190eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJzYW5rZXlfZm9ybWF0X2xpc3RcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9zYW5rZXlcIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj48L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWxvYWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICA8L2Rpdj5cbiAgICAgICAgICA8U2Fua2V5MlxuICAgICAgICAgIHJlZj1cInNhbmtleV9jaGFydFwiXG4gICAgICAgICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCJcbiAgICAgICAgICA6c2Fua2V5X2RhdGE9XCJzYW5rZXlfZGF0YVwiPlxuICAgICAgICAgIDwvU2Fua2V5Mj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNhbmtleTIgfSBmcm9tIFwiLi9zYW5rZXlfMy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgc2Fua2V5VXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL21hcC9zYW5rZXlfdXRpbHMuanNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlzX2xvY2FsOiBCb29sZWFuXG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2hvc3QvZmxvd3MvZGF0YS5sdWFgO1xuY29uc3Qgc2Fua2V5X2NoYXJ0ID0gcmVmKG51bGwpXG5jb25zdCBsb2FkaW5nID0gcmVmKG51bGwpXG5cbmNvbnN0IHNhbmtleV9mb3JtYXRfbGlzdCA9IFtcbiAgICB7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMywgaWQ6ICdsb2NhbF9vcmlnaW5fcmVtb3RlX3RhcmdldCcsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9jbGlfcmVtb3RlX3NydicpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfY2xpX3JlbW90ZV9zcnYnKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0sXG4gICAgeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDQsIGlkOiAncmVtb3RlX29yaWdpbl9sb2NhbF90YXJnZXQnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfc3J2X3JlbW90ZV9jbGknKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX3Nydl9yZW1vdGVfY2xpJyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9LFxuICAgIHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiA1LCBpZDogJ2FsbF9ob3N0cycsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5hbGxfZmxvd3MnKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmFsbF9mbG93cycpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSxcbl07XG5cbmlmKHByb3BzLmlzX2xvY2FsKSB7XG4gIHNhbmtleV9mb3JtYXRfbGlzdC51bnNoaWZ0KHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiAxLCBpZDogJ2xvY2FsX29ubHknLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfb25seScpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfb25seScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSlcbn0gZWxzZSB7XG4gIHNhbmtleV9mb3JtYXRfbGlzdC51bnNoaWZ0KHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiAyLCBpZDogJ3JlbW90ZV9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLnJlbW90ZV9vbmx5JyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5yZW1vdGVfb25seScpLCAgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0pXG59XG5cbmNvbnN0IGFjdGl2ZV9ob3N0c190eXBlID0gcmVmKHNhbmtleV9mb3JtYXRfbGlzdFswXSk7XG5cbmNvbnN0IHNhbmtleV9kYXRhID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7fSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7IFxuICAgIHVwZGF0ZV9zYW5rZXkoYWN0aXZlX2hvc3RzX3R5cGUpO1xufSk7XG5cbmZ1bmN0aW9uIG9uX25vZGVfY2xpY2sobm9kZSkge1xuICAgIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgIGxldCB1cmxfb2JqID0ge1xuXHRob3N0OiBub2RlLmluZm8uaXAsXG5cdHZsYW46IG5vZGUuaW5mby52bGFuLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX29iaik7XG4gICAgY29uc3QgaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChob3N0X3VybCk7XG4gICAgLy9ob3N0PScgLi4gZmxvd1tcImNsaS5pcFwiXSAuLiAnJnZsYW49JyAuLiBmbG93W1widmxhblwiXVxufVxuXG5jb25zdCB1cGRhdGVfc2Fua2V5ID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGVudHJ5ID0gYWN0aXZlX2hvc3RzX3R5cGUudmFsdWU7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGVudHJ5LmZpbHRlcl9uYW1lLCBlbnRyeS5pZCk7XG4gICAgc2V0X3NhbmtleV9kYXRhKCk7XG59XG5cbmNvbnN0IHJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICB1cGRhdGVfc2Fua2V5KClcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3NhbmtleV9kYXRhKCkge1xuICBsb2FkaW5nLnZhbHVlLnNob3dfbG9hZGluZygpO1xuICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpO1xuICBzYW5rZXlfZGF0YS52YWx1ZSA9IGRhdGE7XG4gIGxvYWRpbmcudmFsdWUuaGlkZV9sb2FkaW5nKCk7XG59XG5cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybF9yZXF1ZXN0ID0gZ2V0X3NhbmtleV91cmwoKTtcbiAgICAvLyBsZXQgZ3JhcGggPSBhd2FpdCBzYW5rZXlVdGlscy5nZXRfZGF0YSgpO1xuICAgIGxldCBncmFwaCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgLy8gYWRkX2Zha2VfY2lyY3VsYXJfbGluayhncmFwaCk7XG4gICAgZ3JhcGggPSBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKTtcbiAgICBsZXQgbWFpbl9ub2RlX2lkID0gZ2V0X21haW5fbm9kZV9pZCgpO1xuICAgIGxldCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCwgbWFpbl9ub2RlX2lkKTtcbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgICAgc2Fua2V5X2NoYXJ0LnZhbHVlLnNldF9ub19kYXRhX2ZsYWcoZmFsc2UpIDogXG4gICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyh0cnVlKTtcbiAgICAvLyBzYW5rZXlfZGF0YSA9IG1ha2VfZGFnX2dyYXBoKHNhbmtleV9kYXRhKTtcbiAgICByZXR1cm4gc2Fua2V5X2RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfdXJsKCkge1xuICAgIGxldCBwYXJhbXMgPSB7XG5cdGhvc3Q6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKSxcblx0dmxhbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpLFxuXHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG5cdGhvc3RzX3R5cGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdHNfdHlwZVwiKSxcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7dXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgICByZXR1cm4gdXJsX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldF9tYWluX25vZGVfaWQoKSB7XG4gICAgcmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKGdyYXBoLCBtYWluX25vZGVfaWQpIHtcbiAgICBpZiAoZ3JhcGgubm9kZXMubGVuZ3RoID09IDAgJiYgZ3JhcGgubGlua3MubGVuZ3RoID09IDApIHsgcmV0dXJuIGdyYXBoOyB9XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGVfZGljdFtub2RlLm5vZGVfaWRdID0gbm9kZSk7XG5cbiAgICAvL2dldCBsaW5rIGRpcmVjdGlvbiBcbiAgICBjb25zdCBmX2dldF9saW5rX2RpcmVjdGlvbiA9IChsaW5rKSA9PiB7XG5cdGlmIChsaW5rLnNvdXJjZV9ub2RlX2lkID09IG1haW5fbm9kZV9pZCkge1xuXHQgICAgcmV0dXJuIC0xO1xuXHR9IGVsc2UgaWYgKGxpbmsudGFyZ2V0X25vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG5cdCAgICByZXR1cm4gMTtcblx0fVxuXHR0aHJvdyBgV3JvbmcgZGlyZWN0aW9uIGxpbmsgJHtsaW5rLnNvdXJjZV9ub2RlX2lkfSAtPiAke2xpbmsudGFyZ2V0X25vZGVfaWR9YDtcbiAgICB9O1xuXG4gICAgLy8gZ2V0IG5vZGUgaWQgd2l0aCBkaXJlY3Rpb25cbiAgICBjb25zdCBmX2dldF9ub2RlX2RpcmVjdGlvbl9pZCA9IChub2RlX2lkLCBkaXJlY3Rpb24pID0+IHtcblx0aWYgKG5vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG5cdCAgICByZXR1cm4gbm9kZV9pZDtcblx0fVxuXHRyZXR1cm4gYCR7ZGlyZWN0aW9ufV8ke25vZGVfaWR9YDsgXG4gICAgfTtcblxuICAgIC8vIGNyZWF0ZSBhIG5ldyBncmFwaCBkdXBsaWNhdGluZyBhbGwgbm9kZXMgd2l0aCBkaWZmZXJlbnQgZGlyZWN0aW9uXG4gICAgbGV0IGdyYXBoMl9ub2RlX2RpY3QgPSB7fTtcbiAgICBsZXQgZ3JhcGgyID0geyBub2RlczogW10sIGxpbmtzOiBbXSB9OyAgICBcbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XHRcblx0bGV0IGRpcmVjdGlvbiA9IGZfZ2V0X2xpbmtfZGlyZWN0aW9uKGxpbmspO1xuXHRsZXQgbmV3X2xpbmsgPSB7XG5cdCAgICBzb3VyY2Vfbm9kZV9pZDogZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQobGluay5zb3VyY2Vfbm9kZV9pZCwgZGlyZWN0aW9uKSxcblx0ICAgIHRhcmdldF9ub2RlX2lkOiBmX2dldF9ub2RlX2RpcmVjdGlvbl9pZChsaW5rLnRhcmdldF9ub2RlX2lkLCBkaXJlY3Rpb24pLFxuXHQgICAgbGFiZWw6IGxpbmsubGFiZWwsXG5cdCAgICB2YWx1ZTogbGluay52YWx1ZSxcblx0ICAgIGRhdGE6IGxpbmssXG5cdH07XG5cdGxldCBuZXdfbm9kZTtcblx0aWYgKGRpcmVjdGlvbiA9PSAtMSkge1xuXHQgICAgbGV0IG4gPSBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF07XG5cdCAgICBuZXdfbm9kZSA9IHsgbm9kZV9pZDogbmV3X2xpbmsudGFyZ2V0X25vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuIH07XG5cdH0gZWxzZSB7XG5cdCAgICBsZXQgbiA9IG5vZGVfZGljdFtsaW5rLnNvdXJjZV9ub2RlX2lkXTtcblx0ICAgIG5ld19ub2RlID0geyBub2RlX2lkOiBuZXdfbGluay5zb3VyY2Vfbm9kZV9pZCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4gfTtcblx0fVxuXHRncmFwaDIubGlua3MucHVzaChuZXdfbGluayk7XG5cdGlmIChncmFwaDJfbm9kZV9kaWN0W25ld19ub2RlLm5vZGVfaWRdID09IG51bGwpIHtcblx0ICAgIGdyYXBoMl9ub2RlX2RpY3RbbmV3X25vZGUubm9kZV9pZF0gPSB0cnVlO1xuXHQgICAgZ3JhcGgyLm5vZGVzLnB1c2gobmV3X25vZGUpO1xuXHR9XG4gICAgfSk7XG4gICAgbGV0IG1haW5fbm9kZSA9IG5vZGVfZGljdFttYWluX25vZGVfaWRdO1xuICAgIGdyYXBoMi5ub2Rlcy5wdXNoKHtub2RlX2lkOiBtYWluX25vZGUubm9kZV9pZCwgbGFiZWw6IG1haW5fbm9kZS5sYWJlbCwgZGF0YTogbWFpbl9ub2RlIH0pO1xuXG4gICAgLy8gdXBkYXRlIG5vZGUgZGljdFxuICAgIGdyYXBoMi5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIC8vIHJldHVybiB0aGUgbGluayBub2RlX2lkIFxuICAgIGNvbnN0IGZfZ2V0X2xpbmtfbm9kZV9pZCA9IChsaW5rKSA9PiB7XG5cdGxldCBkaXJlY3Rpb24gPSBmX2dldF9saW5rX2RpcmVjdGlvbihsaW5rKTtcblx0cmV0dXJuIGAke2RpcmVjdGlvbn1fJHtsaW5rLmxhYmVsfWA7IFxuXHQvLyByZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG5cbiAgICBsZXQgbGlua190b19ub2Rlc19kaWN0ID0ge307IC8vIGtleTogbGluayBub2RlIGlkLCB2YWx1ZTogbGlua3NcbiAgICAvLyBtZXJnZSBhbGwgbGlua3MgYnkgbGluayBub2RlX2lkXG4gICAgZ3JhcGgyLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuXHRcdGRhdGE6IHsgLi4ubGluaywgaXNfbGlua19ub2RlOiB0cnVlIH0sXG5cdFx0bm9kZV9saW5rczogW10sXG5cdCAgICB9O1xuXHQgICAgbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF0gPSBsaW5rX3RvX25vZGVzO1xuXHR9XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5wdXNoKHtcblx0ICAgIHNvdXJjZTogbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdLFxuXHQgICAgdGFyZ2V0OiBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF0sXG5cdCAgICB2YWx1ZTogZ2V0X2xpbmtfdmFsdWUobGluayksXG5cdH0pO1xuICAgIH0pO1xuXG4gICAgLy8gY3JlYXRlIG5vZGVzIGFuZCBsaW5rcyBncmFwaCwgY3JlYXRpbmcgYSBuZXcgbm9kZSBmb3IgZWFjaCBsaW5rXG4gICAgbGV0IG5vZGVzID0gZ3JhcGgyLm5vZGVzLm1hcCgobikgPT4gbiksIGxpbmtzID0gW107XG4gICAgZm9yIChsZXQgbGlua19ub2RlX2lkIGluIGxpbmtfdG9fbm9kZXNfZGljdCkge1xuXHRsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuXHRsZXQgbGlua19ub2RlID0ge1xuXHQgICAgbm9kZV9pZDogbGlua190b19ub2Rlcy5pZCxcdCAgICBcblx0ICAgIGxhYmVsOiBsaW5rX3RvX25vZGVzLmxhYmVsLFxuXHQgICAgZGF0YTogbGlua190b19ub2Rlcy5kYXRhLFxuXHR9O1xuXHRub2Rlcy5wdXNoKGxpbmtfbm9kZSk7XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGluay5zb3VyY2Uubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHRcdGRhdGE6IGxpbmssXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdFx0ZGF0YTogbGluayxcblx0ICAgIH0pO1xuXHR9KTtcbiAgICB9XG5cbiAgICBsZXQgc2Fua2V5X25vZGVfZGljdCA9IHt9OyAvLyBrZXk6IG5vZGVfaWQsIHZhbHVlOiBzYW5rZXlfbm9kZVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBbXTtcbiAgICBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdGxldCBzYW5rZXlfbm9kZSA9IHsgaW5kZXgsIG5vZGVfaWQ6IG4ubm9kZV9pZCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4uZGF0YSB9O1xuXHRzYW5rZXlfbm9kZV9kaWN0W24ubm9kZV9pZF0gPSBzYW5rZXlfbm9kZTtcblx0c2Fua2V5X25vZGVzLnB1c2goc2Fua2V5X25vZGUpO1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbGlua3MgPSBsaW5rcy5tYXAoKGwpID0+IHtcblx0bGV0IHNvdXJjZSA9IHNhbmtleV9ub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG5cdGxldCB0YXJnZXQgPSBzYW5rZXlfbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdO1xuXHRyZXR1cm4ge1xuXHQgICAgc291cmNlOiBzb3VyY2UuaW5kZXgsXG5cdCAgICB0YXJnZXQ6IHRhcmdldC5pbmRleCxcblx0ICAgIHNvdXJjZV9ub2RlX2lkOiBzb3VyY2UuaW5kZXgsXG5cdCAgICB0YXJnZXRfbm9kZV9pZDogdGFyZ2V0LmluZGV4LFxuXHQgICAgdmFsdWU6IGwudmFsdWUsXG5cdCAgICBsYWJlbDogbC5sYWJlbCxcblx0fTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBub2Rlczogc2Fua2V5X25vZGVzLCBsaW5rczogc2Fua2V5X2xpbmtzIH07XG59XG5cbi8vIHJlbW92ZSBhbGwgbGlua3Mgd2l0aCBhIG5vdCBleGlzdGluZyBub2RlXG5mdW5jdGlvbiBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIG5vdCBleGlzdGluZyBzb3VyY2UvdGFyZ2V0IG5vZGVgKTsgICAgXG4gICAgbGV0IGxpbmtzID0gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2dfbGluayk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9O1xufVxuXG4vLyByZW1lb3ZlIGFsbCBjaXJjdWxhciBsaW5rcyBhbmQgcmV0dXJuIGEgZGFnIGdyYXBoXG5mdW5jdGlvbiBtYWtlX2RhZ19ncmFwaChncmFwaCkgeyAgICBcbiAgICBsZXQgbm9kZXNfZGVzdF9kaWN0ID0ge307IC8vIGRpY3Rpb25hcnkgeyBbbm9kZV9zb3VyY2VfaWRdOiBub2Rlc190YXJnZXRbXSB9XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgPT0gbnVsbCkge1xuXHQgICAgbm9kZXNfZGVzdCA9IFtdO1xuXHQgICAgbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gbm9kZXNfZGVzdDtcblx0fVxuXHRub2Rlc19kZXN0LnB1c2gobC50YXJnZXRfbm9kZV9pZCk7XG4gICAgfSk7XG4gICAgbGV0IG5vZGVzX3RvX2NoZWNrID0ge307IC8vIHRlbXAgZGljdGlvbmFyeSB1c2VkIGZyb20gZl9hZGRfY2lyY3VsYXJfbGluayBcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiB7XG5cdG5vZGVzX3RvX2NoZWNrW24ubm9kZV9pZF0gPSB7IGNoZWNrZWQ6IGZhbHNlLCB2aXNpdGVkOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgLy8gY2lyY3VsYXIgbGlua3MgZGljdCAoa2V5OiBgJHtzb3VyY2Vfbm9kZV9pZH1fJHt0YXJnZXRfbm9kZV9pZH1gKVxuICAgIGxldCBjaXJjdWxhcl9saW5rcyA9IHt9O1xuICAgIGxldCBmX2dldF9saW5rX2tleSA9IChzb3VyY2VfaWQsIHRhcmdldF9pZCkgPT4gYCR7c291cmNlX2lkfV8ke3RhcmdldF9pZH1gO1xuICAgIFxuICAgIC8vIGRlZXAgbmF2aWdhdGUgc3RhcnRpbmcgZnJvbSBub2RlX2lkIGFuZCBhZGQgY2lyY3VsYXJfbGlua3MgdmlzaXRlZCBpbiBjaXJjdWxhcl9saW5rcyBkaWN0IFxuICAgIGxldCBmX3NldF9jaXJjdWxhcl9saW5rcyA9IChub2RlX2lkLCBmcm9tX25vZGVfaWQpID0+IHtcblx0bGV0IG5vZGVfdG9fY2hlY2sgPSBub2Rlc190b19jaGVja1tub2RlX2lkXTtcblx0aWYgKG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRlbHNlIGlmIChub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPT0gdHJ1ZSkge1xuXHQgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkoZnJvbV9ub2RlX2lkLCBub2RlX2lkKTtcblx0ICAgIGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9IHRydWU7XG5cdCAgICBjb25zb2xlLmVycm9yKGBMaW5rIChzb3VyY2U6ICR7ZnJvbV9ub2RlX2lkfSwgdGFyZ2V0OiAke25vZGVfaWR9ICkgaXMgYSBjaXJjdWxhciBsaW5rYCk7XG5cdCAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcblx0ICAgIHJldHVybjtcblx0fVxuXHRub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSB0cnVlO1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgIT0gbnVsbCkge1xuXHQgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc19kZXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0bGV0IHRhcmdldF9ub2RlX2lkID0gbm9kZXNfZGVzdFtpXTtcblx0XHRmX3NldF9jaXJjdWxhcl9saW5rcyh0YXJnZXRfbm9kZV9pZCwgbm9kZV9pZCk7XHQgICAgXG5cdCAgICB9XG5cdH1cblx0bm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG5cdG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvLyBzZXQgY2lyY3VsYXJfbGlua3MgZGljdGlvbmFyeVxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IGZfc2V0X2NpcmN1bGFyX2xpbmtzKG4ubm9kZV9pZCkpO1xuICAgIFxuICAgIC8vIHJlbW92ZSBubyBkYWcgbm9kZXMvbGlua3NcbiAgICBsZXQgZl9maWx0ZXJfbGluayA9IChsKSA9PiB7XG5cdGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGwuc291cmNlX25vZGVfaWQsIGwudGFyZ2V0X25vZGVfaWQpO1xuXHRsZXQgdGFrZV9saW5rID0gY2lyY3VsYXJfbGlua3NbbGlua19rZXldID09IG51bGw7XG5cdHJldHVybiB0YWtlX2xpbms7XG4gICAgfTtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlcl9saW5rLCBmX2xvZ19saW5rKTtcbiAgICBcbiAgICBsZXQgZl9sb2dfbm9kZSA9IChuKSA9PiBjb25zb2xlLmVycm9yKGBub2RlICR7bi5ub2RlX2lkfSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBub2RlcyA9IGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoe25vZGVzOiBncmFwaC5ub2RlcywgbGlua3N9LCBmX2xvZ19ub2RlKTtcblxuICAgIC8vIHJldHVybiBhIGRhZyBncmFwaFxuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBub2RlX2RpY3Rbbi5ub2RlX2lkXSA9IHRydWUpO1xuICAgIGxldCBmX2ZpbHRlciA9IChsKSA9PiBub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gIT0gbnVsbCAmJiBub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gIT0gbnVsbDsgICAgXG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmZ1bmN0aW9uIGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IGxpbmtfc291cmNlX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua190YXJnZXRfZGljdCA9IHt9O1xuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcblx0bGlua19zb3VyY2VfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IHRydWU7XG5cdGxpbmtfdGFyZ2V0X2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIGxldCBmX2ZpbHRlciA9IChuKSA9PiBsaW5rX3NvdXJjZV9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZSB8fCBsaW5rX3RhcmdldF9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZTtcbiAgICBsZXQgbm9kZXMgPSBmaWx0ZXJfbG9nKGdyYXBoLm5vZGVzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBub2Rlcztcbn1cblxuLy8gbG9nIGVsZW1lbnRzIGRlbGV0ZWQgaWYgZl9sb2cgIT0gbnVsbFxuZnVuY3Rpb24gZmlsdGVyX2xvZyhlbGVtZW50cywgZl9maWx0ZXIsIGZfbG9nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZSkgPT4ge1xuXHRjb25zdCB0YWtlX2VsZW1lbnQgPSBmX2ZpbHRlcihlKTtcblx0aWYgKHRha2VfZWxlbWVudCA9PSBmYWxzZSAmJiBmX2xvZyAhPSBudWxsKSB7XG5cdCAgICBmX2xvZyhlKTtcblx0fVxuXHRyZXR1cm4gdGFrZV9lbGVtZW50O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRfZmFrZV9jaXJjdWxhcl9saW5rKGdyYXBoKSB7XG4gICAgY29uc3Qgbm9kZV9pZF8wID0gXCJub2RlX2lkXzBcIiwgbm9kZV9pZF8xID0gXCJub2RlX2lkXzFcIjtcbiAgICBncmFwaC5ub2Rlcy5wdXNoKHsgbm9kZV9pZDogbm9kZV9pZF8wLCBsYWJlbDogbm9kZV9pZF8wIH0pO1xuICAgIGdyYXBoLm5vZGVzLnB1c2goeyBub2RlX2lkOiBub2RlX2lkXzEsIGxhYmVsOiBub2RlX2lkXzEgfSk7XG4gICAgZ3JhcGgubGlua3MucHVzaCh7IHNvdXJjZV9ub2RlX2lkOiBub2RlX2lkXzAsIHRhcmdldF9ub2RlX2lkOiBub2RlX2lkXzEsIHZhbHVlOiAxMCwgbGFiZWw6IFwiJHtub2RlX2lkXzB9XyR7bm9kZV9pZF8xfVwiIH0pO1xuICAgIGdyYXBoLmxpbmtzLnB1c2goeyBzb3VyY2Vfbm9kZV9pZDogbm9kZV9pZF8xLCB0YXJnZXRfbm9kZV9pZDogbm9kZV9pZF8wLCB2YWx1ZTogMTAsIGxhYmVsOiBcIiR7bm9kZV9pZF8xfV8ke25vZGVfaWRfMH1cIiB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0X2xpbmtfdmFsdWUobGluaykge1xuICAgIHJldHVybiBsaW5rLmRhdGE/LmluZm8/LnRyYWZmaWM7XG59XG5cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwic2NyaXB0LWRlc2NyaXB0aW9uXCIgY2xhc3M9XCJub3RlcyBiZy1saWdodCBib3JkZXJcIiByb2xlPVwiYWxlcnRcIj5cbiAgICA8Yj57eyBfaTE4bignbm90ZXMnKSB9fTwvYj5cbiAgICA8dWw+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJub3RlIGluIHByb3BzLm5vdGVfbGlzdFwiPlxuICAgICAgICA8bGk+e3sgbm90ZSB9fTwvbGk+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvdWw+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIG5vdGVfbGlzdDogQXJyYXksXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIiA+XG5cdCAgICAgIDxpbnB1dCByZWY9XCJob3N0XCIgQGlucHV0PVwiY2hlY2tfZW1wdHlfaG9zdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkEgbG9jYWwgaG9zdCBJUCBvciAnKicgZm9yIGNoZWNraW5nIGFsbCBsb2NhbCBob3N0c1wiIHJlcXVpcmVkPlxuXHQgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIE1ldHJpYyBpbmZvcm1hdGlvbiwgaGVyZSBhIG1ldHJpYyBpcyBzZWxlY3RlZCAoZS5nLiBETlMgdHJhZmZpYykgLS0+XG4gICAgPGRpdiB2LWlmPVwibWV0cmljc19yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLm1ldHJpY1wiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCJcbiAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV90aHJlc2hvbGQoKVwiXG4gICAgICAgICAgOm9wdGlvbnM9XCJtZXRyaWNfbGlzdFwiPlxuICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBGcmVxdWVuY3kgaW5mb3JtYXRpb24sIGEgZnJlcXVlbmN5IG9mIDEgZGF5LCA1IG1pbnV0ZSBvciAxIGhvdXIgZm9yIGV4YW1wbGUgLS0+XG4gICAgPGRpdiB2LWlmPVwibWV0cmljc19yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKX19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZnJlcXVlbmN5XCJcbiAgICAgICAgICA6b3B0aW9ucz1cImZyZXF1ZW5jeV9saXN0XCI+XG5cdFx0XHQgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIFRocmVzaG9sZCBpbmZvcm1hdGlvbiwgbWF4aW11bSBhbW91bnQgb2YgYnl0ZXMgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50aHJlc2hvbGRcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInZpc2libGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0zXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm1ldHJpY190eXBlXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwibWV0cmljX3R5cGVfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPiAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIiA6Y2xhc3M9XCJbIG1ldHJpY190eXBlLmlkID09ICd0aHJvdWdocHV0JyA/ICdwLTAnIDogJyddXCIgPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3Rocm91Z2hwdXQnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT4gXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlIHYtZm9yPVwibWVhc3VyZSBpbiB2b2x1bWVfdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPGRpdiA6Y2xhc3M9XCJbIHZpc2libGUgPyAnY29sLTInIDogJ2NvbC04J11cIj5cbiAgICAgICAgPGlucHV0IHZhbHVlPVwiMVwiIHJlZj1cInRocmVzaG9sZFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidGhyZXNob2xkXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBtYXg9XCIxMDIzXCIgbWluPVwiMVwiIHJlcXVpcmVkPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxOb3RlTGlzdFxuICAgIDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj5cbiAgICA8L05vdGVMaXN0PlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpjbGFzcz1cIlsgZGlzYWJsZV9hZGQgPyAnZGlzYWJsZWQnIDogJycgXVwiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJ10pXG5jb25zdCB0aXRsZSA9IGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5hZGRfaG9zdF9ydWxlc190aXRsZScpXG5jb25zdCBtZXRyaWNzX3JlYWR5ID0gcmVmKGZhbHNlKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgZnJlcXVlbmN5X2xpc3QgPSByZWYoW10pXG5jb25zdCB0aHJlc2hvbGRfbWVhc3VyZSA9IHJlZihudWxsKVxuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfZnJlcXVlbmN5ID0gcmVmKHt9KVxuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSlcbmNvbnN0IG1ldHJpY190eXBlID0gcmVmKHt9KVxuY29uc3QgdmlzaWJsZSA9IHJlZih0cnVlKVxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMScpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMicpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMycpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNCcpLFxuXVxuXG5jb25zdCBtZXRyaWNfdHlwZV9saXN0ID0gW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG5dXG5cbmNvbnN0IHZvbHVtZV90aHJlc2hvbGRfbGlzdCA9IFtcbiAgeyB0aXRsZTogX2kxOG4oJ2tiJyksIGxhYmVsOiBfaTE4bigna2InKSwgaWQ6ICdrYicsIHZhbHVlOiAxMDI0LCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdtYicpLCBsYWJlbDogX2kxOG4oJ21iJyksIGlkOiAnbWInLCB2YWx1ZTogMTA0ODU3NiwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignZ2InKSwgbGFiZWw6IF9pMThuKCdnYicpLCBpZDogJ2diJywgdmFsdWU6IDEwNzM3NDE4MjQsIGFjdGl2ZTogdHJ1ZSB9LFxuXVxuXG5jb25zdCB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0ID0gW1xuICB7IHRpdGxlOiBfaTE4bigna2JwcycpLCBsYWJlbDogX2kxOG4oJ2ticHMnKSwgaWQ6ICdrYnBzJywgdmFsdWU6IDEwMDAsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ21icHMnKSwgbGFiZWw6IF9pMThuKCdtYnBzJyksIGlkOiAnbWJwcycsIHZhbHVlOiAxMDAwMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdnYnBzJyksIGxhYmVsOiBfaTE4bignZ2JwcycpLCBpZDogJ2dicHMnLCB2YWx1ZTogMTAwMDAwMDAwMCwgYWN0aXZlOiB0cnVlIH0sXG5dXG5cblxuY29uc3QgaG9zdCA9IHJlZihudWxsKVxuY29uc3QgdGhyZXNob2xkID0gcmVmKG51bGwpXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgbWV0cmljX2xpc3Q6IEFycmF5LFxuICBmcmVxdWVuY3lfbGlzdDogQXJyYXksXG59KTtcblxuZnVuY3Rpb24gcmVzZXRfbW9kYWxfZm9ybSgpIHtcbiAgICBob3N0LnZhbHVlLnZhbHVlID0gXCJcIjtcbiAgICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBtZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3RbMF07XG5cbiAgICAvLyByZXNldCBtZXRyaWNfdHlwZV9saXN0XG4gICAgbWV0cmljX3R5cGVfbGlzdC5mb3JFYWNoKCh0KSA9PiB0LmFjdGl2ZSA9IGZhbHNlKTtcbiAgICBtZXRyaWNfdHlwZV9saXN0WzBdLmFjdGl2ZSA9IHRydWU7XG4gICAgXG4gICAgLy8gcmVzZXQgdm9sdW1lX3RocmVzaG9sZF9saXN0XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LmZvckVhY2goKHQpID0+IHQuYWN0aXZlID0gZmFsc2UpO1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdFt2b2x1bWVfdGhyZXNob2xkX2xpc3QubGVuZ3RoIC0gMV0uYWN0aXZlID0gdHJ1ZTtcbiAgICBcbiAgICAvLyByZXNldCB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0IFxuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgodCkgPT4gdC5hY3RpdmUgPSBmYWxzZSk7XG4gICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdFt0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0Lmxlbmd0aCAtIDFdLmFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSAxO1xufVxuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIHJlc2V0X21vZGFsX2Zvcm0oKTtcbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2hhbmdlX3RocmVzaG9sZCA9ICgpID0+IHtcbiAgKHNlbGVjdGVkX21ldHJpYy52YWx1ZS5zaG93X3ZvbHVtZSA9PSB0cnVlKSA/IHZpc2libGUudmFsdWUgPSB0cnVlIDogdmlzaWJsZS52YWx1ZSA9IGZhbHNlXG59XG5cbmNvbnN0IGNoZWNrX2VtcHR5X2hvc3QgPSAoKSA9PiB7XG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4oJ2lwJykpO1xuICBkaXNhYmxlX2FkZC52YWx1ZSA9ICEocmVnZXgudGVzdChob3N0LnZhbHVlLnZhbHVlKSB8fCBob3N0LnZhbHVlLnZhbHVlID09PSAnKicpO1xufVxuXG5jb25zdCBzZXRfYWN0aXZlX3JhZGlvID0gKHNlbGVjdGVkX3JhZGlvKSA9PiB7XG4gIGNvbnN0IGlkID0gc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LmlkO1xuXG4gIGlmKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd0aHJvdWdocHV0Jykge1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfVxuXG4gIEFycmF5LmZyb20oc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LnBhcmVudEVsZW1lbnQuY2hpbGRyZW4pLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAvKiBDaGVjayBpZiBpdCdzIGxhYmVsICovXG4gICAgaWYoZWxlbWVudC50YWdOYW1lID09ICdMQUJFTCcpIHtcbiAgICAgIGlmKGVsZW1lbnQuaWQgPT0gaWQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdidG4tc2Vjb25kYXJ5JylcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdidG4tcHJpbWFyeScpXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYnRuLXNlY29uZGFyeScpXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYnRuLXByaW1hcnknKVxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBhZGRfID0gKCkgPT4ge1xuICBkZWJ1Z2dlcjtcbiAgY29uc3QgdG1wX2hvc3QgPSBob3N0LnZhbHVlLnZhbHVlO1xuICBjb25zdCB0bXBfZnJlcXVlbmN5ID0gc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlLmlkO1xuICBjb25zdCB0bXBfbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmlkO1xuICBsZXQgdG1wX21ldHJpY190eXBlID0gbWV0cmljX3R5cGUudmFsdWUuaWQ7XG4gIGxldCB0bXBfZXh0cmFfbWV0cmljID0gKHNlbGVjdGVkX21ldHJpYy52YWx1ZS5leHRyYV9tZXRyaWMpID8gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYyA6IG51bGxcbiAgbGV0IGJhc2ljX3ZhbHVlO1xuICBsZXQgdG1wX3RocmVzaG9sZDtcblxuICBpZih2aXNpYmxlLnZhbHVlID09PSBmYWxzZSkge1xuICAgIHRtcF9tZXRyaWNfdHlwZSA9ICcnXG4gICAgdG1wX2V4dHJhX21ldHJpYyA9ICcnXG4gICAgdG1wX3RocmVzaG9sZCA9IHRocmVzaG9sZC52YWx1ZS52YWx1ZTtcbiAgfVxuICBpZih0bXBfbWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3RocmVzaG9sZCA9IGJhc2ljX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKSAvIDg7XG4gICAgLyogVGhlIHRocm91Z2hwdXQgaXMgaW4gYml0LCB0aGUgdm9sdW1lIGluIEJ5dGVzISEgKi9cbiAgfSBlbHNlIGlmKHRtcF9tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykge1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3RocmVzaG9sZCA9IGJhc2ljX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfVxuXG4gIGVtaXQoJ2FkZCcsIHsgXG4gICAgaG9zdDogdG1wX2hvc3QsIFxuICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSwgXG4gICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgfSk7XG4gIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmNvbnN0IG1ldHJpY3NMb2FkZWQgPSAoX21ldHJpY19saXN0KSA9PiB7XG4gIG1ldHJpY3NfcmVhZHkudmFsdWUgPSB0cnVlO1xuICBtZXRyaWNfbGlzdC52YWx1ZSA9IF9tZXRyaWNfbGlzdDtcbiAgZnJlcXVlbmN5X2xpc3QudmFsdWUgPSBwcm9wcy5mcmVxdWVuY3lfbGlzdDtcbiAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5X2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY19saXN0LnZhbHVlWzBdO1xufVxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0WzBdXG59KVxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSwgbWV0cmljc0xvYWRlZCB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi00XCI+XG4gICAgICAgICAgPGg0Pnt7IF9pMThuKCdpZl9zdGF0c19jb25maWcuaG9zdF9ydWxlcycpIH19PC9oND5cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X3J1bGVzXCI+XG4gICAgICAgICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvTW9kYWxEZWxldGVDb25maXJtPlxuICAgICAgICAgIDxNb2RhbEFkZEhvc3RSdWxlcyByZWY9XCJtb2RhbF9hZGRfaG9zdF9ydWxlXCJcbiAgICAgICAgICAgIDptZXRyaWNfbGlzdD1cIm1ldHJpY19saXN0XCJcbiAgICAgICAgICAgIDpmcmVxdWVuY3lfbGlzdD1cImZyZXF1ZW5jeV9saXN0XCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfaG9zdF9ydWxlXCI+XG4gICAgICAgICAgPC9Nb2RhbEFkZEhvc3RSdWxlcz5cbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX2hvc3RfcnVsZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPE5vdGVMaXN0XG4gICAgICAgIDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj5cbiAgICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Vbm1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEhvc3RSdWxlcyB9IGZyb20gXCIuL21vZGFsLWFkZC1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBpZmlkOiBTdHJpbmcsXG59KVxuXG5jb25zdCB0YWJsZV9ob3N0X3J1bGVzID0gcmVmKG51bGwpXG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZihudWxsKVxuY29uc3QgbW9kYWxfYWRkX2hvc3RfcnVsZSA9IHJlZihudWxsKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pXG5jb25zdCBtZXRyaWNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19tZXRyaWMubHVhYFxuY29uc3QgZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX2RhdGEubHVhYFxuY29uc3QgYWRkX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvYWRkX2hvc3RfcnVsZS5sdWFgXG5jb25zdCByZW1vdmVfcnVsZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9pbnRlcmZhY2UvaG9zdF9ydWxlcy9kZWxldGVfaG9zdF9ydWxlLmx1YWBcbiAgXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18zJyksXG5dXG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBpZmlkOiBwcm9wcy5pZmlkLFxuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxubGV0IGhvc3RfcnVsZXNfdGFibGVfY29uZmlnID0ge31cbmxldCB0aXRsZV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX3RpdGxlJylcbmxldCBib2R5X2RlbGV0ZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZGVsZXRlX2hvc3RfcnVsZXNfZGVzY3JpcHRpb24nKVxubGV0IG1ldHJpY19saXN0ID0gW11cbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gW1xuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy41X21pbicpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgaWQ6ICc1bWluJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLmhvdXJseScpLCBpZDogJ2hvdXInIH0sXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLmRhaWx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBpZDogJ2RheScgfVxuXVxuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbihyb3cpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBkZXN0cm95X3RhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRhYmxlX2hvc3RfcnVsZXMudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbn1cblxuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fZGVsZXRlLnZhbHVlO1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocmVtb3ZlX3J1bGVfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXMsXG4gICAgLi4ue1xuICAgICAgcnVsZV9pZDogcm93LmlkXG4gICAgfVxuICB9KVxuICBcbiAgYXdhaXQgJC5wb3N0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9KTtcbn1cblxuY29uc3QgYWRkX2hvc3RfcnVsZSA9IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYWRkX3J1bGVfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXMsXG4gICAgLi4ucGFyYW1zXG4gIH0pXG4gIFxuICBhd2FpdCAkLnBvc3QodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgcmVsb2FkX3RhYmxlKCk7XG4gIH0pO1xufVxuXG5jb25zdCBhZGRfYWN0aW9uX2NvbHVtbiA9IGZ1bmN0aW9uIChyb3dEYXRhKSB7XG4gIGxldCBkZWxldGVfaGFuZGxlciA9IHtcblx0ICBoYW5kbGVySWQ6IFwiZGVsZXRlX2hvc3RcIixcdCAgXG5cdCAgb25DbGljazogKCkgPT4ge1xuICAgICAgc2hvd19kZWxldGVfZGlhbG9nKHJvd0RhdGEpO1xuXHQgIH0sXG5cdH07XG4gIFxuICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdCAgeyBjbGFzczogYGJ0bi1kYW5nZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpLCBjbGFzczogXCJwb2ludGVyXCIgfSxcblx0XSk7XG59XG5cbmNvbnN0IGZvcm1hdF9tZXRyaWMgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBtZXRyaWNfbGFiZWwgPSBkYXRhICBcbiAgbWV0cmljX2xpc3QuZm9yRWFjaCgobWV0cmljKSA9PiB7XG4gICAgaWYobWV0cmljLmlkID09IGRhdGEpIHtcbiAgICAgIGlmKHJvd0RhdGEuZXh0cmFfbWV0cmljKSB7XG4gICAgICAgIGlmKHJvd0RhdGEuZXh0cmFfbWV0cmljID09IG1ldHJpYy5leHRyYV9tZXRyaWMpXG4gICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXRyaWNfbGFiZWwgPSBtZXRyaWMubGFiZWxcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBtZXRyaWNfbGFiZWxcbn1cblxuY29uc3QgZm9ybWF0X2ZyZXF1ZW5jeSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgbGV0IGZyZXF1ZW5jeV90aXRsZSA9ICcnXG4gIGZyZXF1ZW5jeV9saXN0LmZvckVhY2goKGZyZXF1ZW5jeSkgPT4ge1xuICAgIGlmKGRhdGEgPT0gZnJlcXVlbmN5LmlkKVxuICAgICAgZnJlcXVlbmN5X3RpdGxlID0gZnJlcXVlbmN5LnRpdGxlO1xuICB9KVxuXG4gIHJldHVybiBmcmVxdWVuY3lfdGl0bGVcbn1cblxuY29uc3QgZm9ybWF0X3RocmVzaG9sZCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gcGFyc2VJbnQoZGF0YSk7XG4gIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBOdG9wVXRpbHMuYml0c1RvU2l6ZShkYXRhICogOClcbiAgfSBlbHNlIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IGRhdGFcbiAgfVxuICBcbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5cbmNvbnN0IGdldF9tZXRyaWNfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgbWV0cmljX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbn1cblxuY29uc3Qgc3RhcnRfZGF0YXRhYmxlID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vZGFsX2FkZF9ob3N0X3J1bGUudmFsdWUuc2hvdygpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBjb25zdCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZFwiKSwgdmlzaWJsZTogZmFsc2UsIHRhcmdldHM6IDAsIG5hbWU6ICdpZCcsIGRhdGE6ICdpZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRcIiksIHRhcmdldHM6IDEsIHdpZHRoOiAnMjAnLCBuYW1lOiAndGFyZ2V0JywgZGF0YTogJ3RhcmdldCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMTAnLCBuYW1lOiAnbWV0cmljJywgZGF0YTogJ21ldHJpYycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF9tZXRyaWMoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcuZnJlcXVlbmN5XCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzEwJywgbmFtZTogJ2ZyZXF1ZW5jeScsIGRhdGE6ICdmcmVxdWVuY3knLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhKSB7IHJldHVybiBmb3JtYXRfZnJlcXVlbmN5KGRhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRocmVzaG9sZFwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICd0aHJlc2hvbGQnLCBkYXRhOiAndGhyZXNob2xkJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X3RocmVzaG9sZChkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcIm1ldHJpY190eXBlXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czogNSwgbmFtZTogJ21ldHJpY190eXBlJywgZGF0YTogJ21ldHJpY190eXBlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfVxuICBdO1xuXG4gIGNvbnN0IGhvc3RSdWxlc1RhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGRhdGFfdXJsLCByZXN0X3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBjb2x1bW5zX2NvbmZpZzogY29sdW1ucyxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAxIC8qIHRhcmdldCAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogY29sdW1uc1xuICAgIH1cbiAgfTtcbiAgXG4gIGhvc3RfcnVsZXNfdGFibGVfY29uZmlnID0gaG9zdFJ1bGVzVGFibGVDb25maWc7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBzdGFydF9kYXRhdGFibGUoKTtcbiAgYXdhaXQgZ2V0X21ldHJpY19saXN0KCk7XG4gIG1vZGFsX2FkZF9ob3N0X3J1bGUudmFsdWUubWV0cmljc0xvYWRlZChtZXRyaWNfbGlzdCk7XG59KVxuXG5vblVubW91bnRlZCgoKSA9PiB7XG4gIGRlc3Ryb3lfdGFibGUoKTtcbn0pXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cImhvc3RfZGV0YWlsc19wb3J0c1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19wb3J0c1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJ0YWJsZV9vcHRpb24gaW4gdGFibGVfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgICAgPEJvb3RzdHJhcFRhYmxlXG4gICAgICAgICAgICAgICAgICAgIDppZD1cInRhYmxlX29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2x1bW5zPVwidGFibGVfb3B0aW9uLmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICA6cm93cz1cInRhYmxlX29wdGlvbi5zdGF0c19yb3dzXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfY29sdW1uPVwiKGNvbCkgPT4gcHJpbnRfc3RhdHNfY29sdW1uKGNvbClcIlxuICAgICAgICAgICAgICAgICAgICA6cHJpbnRfaHRtbF9yb3c9XCIoY29sLCByb3cpID0+IHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdylcIj5cbiAgICAgICAgICAgICAgICAgIDwvQm9vdHN0cmFwVGFibGU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uVW5tb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2gsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHkgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHBvcnRzX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbmZpZ190cmFmZmljX3RhYmxlID0gcmVmKHt9KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbn0pXG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX2NvbHVtbihjb2wpIHtcbiAgcmV0dXJuIGNvbC5sYWJlbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KSB7XG4gIGRlYnVnZ2VyO1xuICBsZXQgbGFiZWwgPSByb3cubGFiZWw7XG4gIHJldHVybiBsYWJlbDtcbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5yZWxvYWQoKTtcbn1cbiAgICBcbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzdGFydF9kYXRhdGFibGUoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG59KVxuXG5vblVubW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGRlc3Ryb3koKVxufSk7XG5cbmNvbnN0IGNoYXJ0X29wdGlvbnMgPSBbXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmNsaV9wb3J0cycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlBJRSxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L2NsaV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuc3J2X3BvcnRzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuUElFLFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvc3J2X3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICB9LFxuXVxuXG5jb25zdCB0YWJsZV9vcHRpb25zID0gW1xuICB7XG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC90YWJsZV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgICBleHRyYV9wYXJhbXM6IHtcbiAgICAgIG1vZGU6ICdsb2NhbCcsXG4gICAgICBwcm90b2NvbDogJ3RjcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiYWN0aXZlX3NlcnZlcl90Y3BfcG9ydHNcIiwgbGFiZWw6IF9pMThuKFwicG9ydHNfcGFnZS5hY3RpdmVfc2VydmVyX3RjcF9wb3J0c1wiKSB9LFxuICAgICAgeyBpZDogXCJwb3J0X2FwcGxpY2F0aW9uXCIsIGxhYmVsOiBfaTE4bihcInBvcnRcIikgfSxcbiAgICBdLFxuICAgIHN0YXRzX3Jvd3M6IFtdLFxuICB9LFxuICB7XG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC90YWJsZV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgICBleHRyYV9wYXJhbXM6IHtcbiAgICAgIG1vZGU6ICdsb2NhbCcsXG4gICAgICBwcm90b2NvbDogJ3VkcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiYWN0aXZlX3NlcnZlcl91ZHBfcG9ydHNcIiwgbGFiZWw6IF9pMThuKFwicG9ydHNfcGFnZS5hY3RpdmVfc2VydmVyX3VkcF9wb3J0c1wiKSB9LFxuICAgICAgeyBpZDogXCJwb3J0X2FwcGxpY2F0aW9uXCIsIGxhYmVsOiBfaTE4bihcInBvcnRcIikgfSxcbiAgICBdLFxuICAgIHN0YXRzX3Jvd3M6IFtdLFxuICB9LFxuICB7XG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC90YWJsZV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYHNydl9wb3J0X2Zsb3dzYCxcbiAgICBleHRyYV9wYXJhbXM6IHtcbiAgICAgIG1vZGU6ICdyZW1vdGUnLFxuICAgICAgcHJvdG9jb2w6ICd0Y3AnXG4gICAgfSxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7IGlkOiBcImNsaWVudF9jb250YWN0ZWRfc2VydmVyX3RjcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmNsaWVudF9jb250YWN0ZWRfc2VydmVyX3RjcF9wb3J0c1wiKSB9LFxuICAgICAgeyBpZDogXCJwb3J0X2FwcGxpY2F0aW9uXCIsIGxhYmVsOiBfaTE4bihcInBvcnRcIikgfSxcbiAgICBdLFxuICAgIHN0YXRzX3Jvd3M6IFtdLFxuICB9LFxuICB7XG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC90YWJsZV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYHNydl9wb3J0X2Zsb3dzYCxcbiAgICBleHRyYV9wYXJhbXM6IHtcbiAgICAgIG1vZGU6ICdyZW1vdGUnLFxuICAgICAgcHJvdG9jb2w6ICd1ZHAnXG4gICAgfSxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7IGlkOiBcImNsaWVudF9jb250YWN0ZWRfc2VydmVyX3VkcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmNsaWVudF9jb250YWN0ZWRfc2VydmVyX3VkcF9wb3J0c1wiKSB9LFxuICAgICAgeyBpZDogXCJwb3J0X2FwcGxpY2F0aW9uXCIsIGxhYmVsOiBfaTE4bihcInBvcnRcIikgfSxcbiAgICBdLFxuICAgIHN0YXRzX3Jvd3M6IFtdLFxuICB9LFxuXVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoKSB7XG4gIGxldCB1cmxfcGFyYW1zID0ge31cbiAgXG4gIHVybF9wYXJhbXNbXCJob3N0XCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpXG4gIHVybF9wYXJhbXNbXCJ2bGFuXCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpXG4gIHVybF9wYXJhbXNbXCJpZmlkXCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpXG4gICAgXG4gIHRhYmxlX29wdGlvbnMuZm9yRWFjaCgodGFibGUpID0+IHtcbiAgICBsZXQgdG1wX3BhcmFtcyA9IHtcbiAgICAgIC4uLnRhYmxlLmV4dHJhX3BhcmFtcyxcbiAgICAgIC4uLnVybF9wYXJhbXMsXG4gICAgfVxuXG4gICAgJC5nZXQoTnRvcFV0aWxzLmJ1aWxkVVJMKHRhYmxlLnVybCwgdG1wX3BhcmFtcyksIGFzeW5jIGZ1bmN0aW9uKGRhdGEsIHN0YXR1cyl7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICAgIGxldCByb3dzID0gW11cbiAgICAgIGRhdGEucnNwLmZvckVhY2goKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcG9ydCA9IGRhdGEucG9ydF9pbmZvLnBvcnRcbiAgICAgICAgY29uc3QgcHJvdG8gPSBkYXRhLnBvcnRfaW5mby5sN19wcm90b1xuICAgICAgICByb3dzLnB1c2goeyBsYWJlbDogYCR7cG9ydH0gKCR7cHJvdG99KWAgfSlcbiAgICAgIH0pXG4gICAgICB0YWJsZS5zdGF0c19yb3dzID0gcm93cztcbiAgICB9KTtcbiAgfSlcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxMb2FkaW5nIHJlZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9J2FsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTMnIHN0eWxlPSdoZWlnaHQ6IDcwdmg7Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG8gZmxleC1yb3ctcmV2ZXJzZVwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWxvYWRcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXksIGluZGV4KSBpbiBhdmFpbGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1pZj1cInZhbHVlLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdidWJibGVfbWFwLicgKyBrZXkpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtrZXldXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IDppZD1cIndpZGdldF9uYW1lXCIgc3R5bGU9XCJoZWlnaHQ6IDkwJTtcIj5cbiAgICAgICAgICAgIDxDaGFydFxuICAgICAgICAgICAgICByZWY9XCJidWJibGVfY2hhcnRcIlxuICAgICAgICAgICAgICA6aWQ9XCJ3aWRnZXRfbmFtZVwiXG4gICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwicmVzdF91cmxcIlxuICAgICAgICAgICAgICA6Z2V0X3BhcmFtc191cmxfcmVxdWVzdD1cImZvcm1hdF9yZXF1ZXN0XCJcbiAgICAgICAgICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpXCJcbiAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IFN0cmluZyxcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGNoYXJ0c19vcHRpb25zOiBBcnJheSxcbiAgYXZhaWxhYmxlX2ZpbHRlcnM6IE9iamVjdCxcbn0pXG5cbi8qIEJ5IGRlZmF1bHQgdXNlIHRoZSBmaXJzdCBlbnRyeSAqL1xuY29uc3QgY3VycmVudGx5X3NlbGVjdGVkX2NoYXJ0ID0gMFxuXG5jb25zdCBsb2FkaW5nID0gcmVmKG51bGwpXG5jb25zdCBjaGFydF90eXBlID0gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuQlVCQkxFXG5jb25zdCByZXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hhcnRzL2FsZXJ0L2FuYWx5c2lzLmx1YWBcbmNvbnN0IHdpZGdldF9uYW1lID0gJ2FsZXJ0cy1tYXAnO1xuY29uc3QgYWN0aXZlX2ZpbHRlcl9saXN0ID0ge31cbmNvbnN0IGJ1YmJsZV9jaGFydCA9IHJlZihudWxsKVxuXG5jb25zdCBmb3JtYXRfcmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcGFyYW1zX3N0cmluZyA9ICcnXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBidWJibGVfbW9kZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyksXG4gICAgdGltZWZyYW1lOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndGltZWZyYW1lJyksXG4gICAgdmxhbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZsYW4nKSxcbiAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpLFxuICB9XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgIHBhcmFtc19zdHJpbmcgPSBgJHtwYXJhbXNfc3RyaW5nfSYke2tleX09JHt2YWx1ZX1gXG4gIH1cblxuICAvKiBSZXR1cm4gYSBjdXN0b20gc3RyaW5nLCBjb250YWluaW5nIGN1c3RvbSBvcHRpb25zICovXG4gIHJldHVybiBwYXJhbXNfc3RyaW5nXG59XG5cbmNvbnN0IHJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICBsb2FkaW5nLnZhbHVlLnNob3dfbG9hZGluZygpO1xuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbiAgbG9hZGluZy52YWx1ZS5oaWRlX2xvYWRpbmcoKTtcbn1cblxuY29uc3QgZm9ybWF0X29wdGlvbnMgPSBmdW5jdGlvbihtb2RlX2lkKSB7XG4gIGxldCBvcHRpb25zID0ge31cblxuICBwcm9wcy5jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25fbGlzdCkgPT4ge1xuICAgIGlmKG9wdGlvbl9saXN0Lm1vZGVfaWQgPT0gbW9kZV9pZClcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25fbGlzdDtcbiAgfSlcblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZXZlbnQgZnVuY3Rpb25zICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5jaGFydCAmJiBvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSB7XG4gICAgb3B0aW9ucy5jaGFydC5ldmVudHMgPSBvcHRpb25zLmNoYXJ0LmV2ZW50cyB8fCB7fVxuICAgIGZvcihjb25zdCBbZXZlbnQsIGZ1bl0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykpIHtcbiAgICAgIGlmKGZ1biA9PSB1bmRlZmluZWQpIFxuICAgICAgICBjb250aW51ZVxuXG4gICAgICBvcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudF0gPSBOdG9wVXRpbHNbZnVuXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgICB9XG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueGF4aXMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnlheGlzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy50b29sdGlwICYmIG9wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcilcbiAgICBvcHRpb25zLnRvb2x0aXAuY3VzdG9tID0gTnRvcFV0aWxzW29wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcl1cblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgXG4gIC8qIFJldHVybiB0aGUgbGlzdCBvZiBmb3JtYXR0ZWQgb3B0aW9ucyBvZiB0aGUgY2hhcnQgKi9cbiAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICBsZXQgb3B0aW9ucyA9IGZvcm1hdF9vcHRpb25zKE51bWJlcihhY3RpdmVfZmlsdGVyX2xpc3RbJ2J1YmJsZV9tb2RlJ10uaWQpKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBvcHRpb25zLnNlcmllcyA9IGRhdGEuc2VyaWVzIHx8IHt9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxufVxuXG5jb25zdCBjbGlja19pdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICBsb2FkaW5nLnZhbHVlLnNob3dfbG9hZGluZygpO1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG4gIGxvYWRpbmcudmFsdWUuaGlkZV9sb2FkaW5nKCk7XG59XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAvKiBCZWZvcmUgbW91bnRpbmcgdGhlIHZhcmlvdXMgd2lkZ2V0cywgdXBkYXRlIHRoZSB1cmwgdG8gdGhlIGNvcnJlY3Qgb25lLCBieSBhZGRpbmcgaWZpZCwgZWNjLiAqL1xuICBjb25zdCB0aW1lZnJhbWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndGltZWZyYW1lJyk7XG4gIGNvbnN0IHZsYW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmxhbicpO1xuICBjb25zdCBidWJibGVfbW9kZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpO1xuICBcbiAgaWYoIWJ1YmJsZV9tb2RlKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2J1YmJsZV9tb2RlJywgMCkgLyogRmlyc3QgRW50cnkgKi9cbiAgaWYoIXRpbWVmcmFtZSkgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd0aW1lZnJhbWUnLCAzMDApIC8qIERlZmF1bHQgNSBtaW4gKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbicsIDApIC8qIERlZmF1bHQgbm8gdmxhbiAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICBsb2FkaW5nLnZhbHVlLmhpZGVfbG9hZGluZygpO1xufSlcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz0nYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMycgc3R5bGU9J2hlaWdodDogNzB2aDsnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0byBmbGV4LXJvdy1yZXZlcnNlXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKHZhbHVlLCBrZXksIGluZGV4KSBpbiBhdmFpbGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInZhbHVlLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNXJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdidWJibGVfbWFwLicgKyBrZXkpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtrZXldXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IDppZD1cIndpZGdldF9uYW1lXCIgc3R5bGU9XCJoZWlnaHQ6IDkwJTtcIj5cbiAgICAgICAgICAgIDxDaGFydFxuICAgICAgICAgICAgICByZWY9XCJidWJibGVfY2hhcnRcIlxuICAgICAgICAgICAgICA6aWQ9XCJ3aWRnZXRfbmFtZVwiXG4gICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwicmVzdF91cmxcIlxuICAgICAgICAgICAgICA6Z2V0X3BhcmFtc191cmxfcmVxdWVzdD1cImZvcm1hdF9yZXF1ZXN0XCJcbiAgICAgICAgICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpXCJcbiAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IFN0cmluZyxcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGNoYXJ0c19vcHRpb25zOiBBcnJheSxcbiAgYXZhaWxhYmxlX2ZpbHRlcnM6IE9iamVjdCxcbn0pXG5cbi8qIEJ5IGRlZmF1bHQgdXNlIHRoZSBmaXJzdCBlbnRyeSAqL1xuY29uc3QgY3VycmVudGx5X3NlbGVjdGVkX2NoYXJ0ID0gMFxuXG5jb25zdCBjaGFydF90eXBlID0gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuQlVCQkxFXG5jb25zdCByZXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9jaGFydHMvaG9zdC9tYXAubHVhYFxuY29uc3Qgd2lkZ2V0X25hbWUgPSAnYWxlcnRzLW1hcCc7XG5jb25zdCBhY3RpdmVfZmlsdGVyX2xpc3QgPSB7fVxuY29uc3QgYnViYmxlX2NoYXJ0ID0gcmVmKG51bGwpXG5cbmNvbnN0IGZvcm1hdF9yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBwYXJhbXNfc3RyaW5nID0gJydcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGJ1YmJsZV9tb2RlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKSxcbiAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpLFxuICB9XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgIHBhcmFtc19zdHJpbmcgPSBgJHtwYXJhbXNfc3RyaW5nfSYke2tleX09JHt2YWx1ZX1gXG4gIH1cblxuICAvKiBSZXR1cm4gYSBjdXN0b20gc3RyaW5nLCBjb250YWluaW5nIGN1c3RvbSBvcHRpb25zICovXG4gIHJldHVybiBwYXJhbXNfc3RyaW5nXG59XG5cbmNvbnN0IGZvcm1hdF9vcHRpb25zID0gZnVuY3Rpb24obW9kZV9pZCkge1xuICBsZXQgb3B0aW9ucyA9IHt9XG5cbiAgcHJvcHMuY2hhcnRzX29wdGlvbnMuZm9yRWFjaCgob3B0aW9uX2xpc3QpID0+IHtcbiAgICBpZihvcHRpb25fbGlzdC5tb2RlX2lkID09IG1vZGVfaWQpXG4gICAgICBvcHRpb25zID0gb3B0aW9uX2xpc3Q7XG4gIH0pXG5cbiAgLyogQWRkIHRoZSBjb3JyYWN0IGV2ZW50IGZ1bmN0aW9ucyAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMuY2hhcnQgJiYgb3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykge1xuICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzID0gb3B0aW9ucy5jaGFydC5ldmVudHMgfHwge31cbiAgICBmb3IoY29uc3QgW2V2ZW50LCBmdW5dIG9mIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpKSB7XG4gICAgICBpZihmdW4gPT0gdW5kZWZpbmVkKSBcbiAgICAgICAgY29udGludWVcblxuICAgICAgb3B0aW9ucy5jaGFydC5ldmVudHNbZXZlbnRdID0gTnRvcFV0aWxzW2Z1bl0gfHwgTnRvcFV0aWxzLmZub25lXG4gICAgfVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnhheGlzICYmIG9wdGlvbnMueGF4aXMubGFiZWxzICYmIG9wdGlvbnMueGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy54YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy55YXhpcyAmJiBvcHRpb25zLnlheGlzLmxhYmVscyAmJiBvcHRpb25zLnlheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnlheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMudG9vbHRpcCAmJiBvcHRpb25zLnRvb2x0aXAubnRvcF91dGlsc19mb3JtYXR0ZXIpXG4gICAgb3B0aW9ucy50b29sdGlwLmN1c3RvbSA9IE50b3BVdGlsc1tvcHRpb25zLnRvb2x0aXAubnRvcF91dGlsc19mb3JtYXR0ZXJdXG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuY29uc3QgZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIFxuICAvKiBSZXR1cm4gdGhlIGxpc3Qgb2YgZm9ybWF0dGVkIG9wdGlvbnMgb2YgdGhlIGNoYXJ0ICovXG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgbGV0IG9wdGlvbnMgPSBmb3JtYXRfb3B0aW9ucyhOdW1iZXIoYWN0aXZlX2ZpbHRlcl9saXN0WydidWJibGVfbW9kZSddLmlkKSlcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgb3B0aW9ucy5zZXJpZXMgPSBkYXRhLnNlcmllcyB8fCB7fVxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cbn1cblxuY29uc3QgY2xpY2tfaXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGl0ZW0uZmlsdGVyX25hbWUsIGl0ZW0uaWQpXG4gIGJ1YmJsZV9jaGFydC52YWx1ZS51cGRhdGVfY2hhcnQoYCR7cmVzdF91cmx9PyR7Zm9ybWF0X3JlcXVlc3QoKX1gKVxufVxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgLyogQmVmb3JlIG1vdW50aW5nIHRoZSB2YXJpb3VzIHdpZGdldHMsIHVwZGF0ZSB0aGUgdXJsIHRvIHRoZSBjb3JyZWN0IG9uZSwgYnkgYWRkaW5nIGlmaWQsIGVjYy4gKi9cbiAgY29uc3QgYnViYmxlX21vZGUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKTtcbiAgXG4gIGlmKCFidWJibGVfbW9kZSkgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdidWJibGVfbW9kZScsIDApIC8qIEZpcnN0IEVudHJ5ICovXG4gIFxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2lmaWQnLCBwcm9wcy5pZmlkKSAvKiBDdXJyZW50IGludGVyZmFjZSAqL1xuXG4gIGZvcihjb25zdCBbbmFtZSwgZmlsdGVyc10gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMuYXZhaWxhYmxlX2ZpbHRlcnMpKSB7XG4gICAgZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGZpbHRlci5maWx0ZXJfbmFtZSA9IG5hbWVcbiAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlKVxuICAgICAgICBhY3RpdmVfZmlsdGVyX2xpc3RbbmFtZV0gPSBmaWx0ZXI7XG4gICAgfSlcbiAgfVxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgPExvYWRpbmcgcmVmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIiBzdHlsZT1cImhlaWdodDogNzB2aDtcIiByZWY9XCJib2R5X2RpdlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGZsZXgtcm93LXJldmVyc2UgbWItMlwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWxvYWRcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXksIGluZGV4KSBpbiBhdmFpbGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1pZj1cInZhbHVlLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdwb3J0c19hbmFseXNpcy4nICsga2V5KSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3Rba2V5XVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1heF9lbnRyaWVzX3JlYWNoZWQgPT0gdHJ1ZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtYXV0byBtLTFcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIHN0eWxlPVwiY3Vyc29yOiBoZWxwO1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgZGlzYWJsZWQ+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8U2Fua2V5MlxuICAgICAgICAgIHJlZj1cInNhbmtleV9jaGFydFwiXG4gICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgICAgIDpub19kYXRhX21lc3NhZ2U9XCJub19kYXRhX21lc3NhZ2VcIlxuICAgICAgICAgIDpzYW5rZXlfZGF0YT1cInNhbmtleV9kYXRhXCJcbiAgICAgICAgICBAdXBkYXRlX3dpZHRoPVwidXBkYXRlX3dpZHRoXCJcbiAgICAgICAgICBAdXBkYXRlX2hlaWdodD1cInVwZGF0ZV9oZWlnaHRcIlxuICAgICAgICAgIEBub2RlX2NsaWNrPVwib25fbm9kZV9jbGlja1wiPlxuICAgICAgICAgIDwvU2Fua2V5Mj4gICAgICAgIFxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5MiB9IGZyb20gXCIuL3NhbmtleV8zLnZ1ZVwiO1xuXG5jb25zdCBhY3RpdmVfZmlsdGVyX2xpc3QgPSB7fVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IE51bWJlcixcbiAgYXZhaWxhYmxlX2ZpbHRlcnM6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHJlZihmYWxzZSlcbmNvbnN0IG1heF9lbnRyeV90aXRsZSA9IF9pMThuKCdwb3J0c19hbmFseXNpcy5tYXhfZW50cmllcycpXG5jb25zdCBub19kYXRhX21lc3NhZ2UgPSBfaTE4bigncG9ydHNfYW5hbHlzaXMubm9fZGF0YScpXG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbClcbmNvbnN0IGJvZHlfZGl2ID0gcmVmKG51bGwpO1xuY29uc3Qgd2lkdGggPSByZWYobnVsbCk7XG5jb25zdCBoZWlnaHQgPSByZWYobnVsbCk7XG5jb25zdCBzYW5rZXlfZGF0YSA9IHJlZih7fSk7XG5jb25zdCBsaXZlX3Jlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC92bGFuL2xpdmVfcG9ydHMubHVhYFxuY29uc3QgaGlzdG9yaWNhbF9yZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvdmxhbi9oaXN0b3JpY2FsX3BvcnRzLmx1YWBcbmNvbnN0IGxvYWRpbmcgPSByZWYobnVsbClcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGw0X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2w0cHJvdG8nKTtcbiAgXG4gIGlmKCF0aW1lZnJhbWUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndGltZWZyYW1lJywgJ25vbmUnKSAvKiBEZWZhdWx0IGxpdmUgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbicsICdub25lJykgLyogRGVmYXVsdCBhbGwgVkxBTnMgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbDRwcm90bycsICdub25lJykgLyogRGVmYXVsdCBubyBwcm90b2NvbCAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICB1cGRhdGVfaGVpZ2h0KCk7XG4gIHVwZGF0ZV93aWR0aCgpO1xuICB1cGRhdGVfc2Fua2V5KCk7XG59KTtcblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICBpZiAobm9kZS5saW5rKSB7IG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwobm9kZS5saW5rKTsgfVxufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICB1cGRhdGVfc2Fua2V5KCk7XG59XG5cbmNvbnN0IHVwZGF0ZV9zYW5rZXkgPSBmdW5jdGlvbigpIHtcbiAgc2V0X3NhbmtleV9kYXRhKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrX21heF9lbnRyaWVzKGRhdGEpIHtcbiAgbWF4X2VudHJpZXNfcmVhY2hlZC52YWx1ZSA9IGRhdGEubWF4X2VudHJpZXNfcmVhY2hlZFxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEoKSB7XG4gIGxvYWRpbmcudmFsdWUuc2hvd19sb2FkaW5nKCk7XG4gIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7ICAgIFxuICBzYW5rZXlfZGF0YS52YWx1ZSA9IGRhdGE7XG4gIGxvYWRpbmcudmFsdWUuaGlkZV9sb2FkaW5nKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgY29uc3QgdXJsX3JlcXVlc3QgPSBnZXRfc2Fua2V5X3VybCgpO1xuICBsZXQgZ3JhcGggPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICBjaGVja19tYXhfZW50cmllcyhncmFwaCk7XG4gIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG4gIGNvbnN0IHNhbmtleV9kYXRhID0gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKGdyYXBoKTtcbiAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgKHNhbmtleV9kYXRhLmxpbmtzLmxlbmd0aCA+IDAgJiYgc2Fua2V5X2RhdGEubm9kZXMubGVuZ3RoID4gMCkgPyBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyh0cnVlKTtcbiAgXG4gIFxuICByZXR1cm4gc2Fua2V5X2RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfdXJsKCkge1xuICBsZXQgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKTtcbiAgbGV0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZWZyYW1lXCIpO1xuICBsZXQgbDRwcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwibDRwcm90b1wiKTtcbiAgaWYodmxhbiA9PSAnbm9uZScpIHsgdmxhbiA9ICcnOyB9XG4gIGlmKHRpbWVmcmFtZSA9PSAnbm9uZScpIHsgdGltZWZyYW1lID0gJyc7IH1cbiAgaWYobDRwcm90byA9PSAnbm9uZScpIHsgbDRwcm90byA9ICcnOyB9XG4gIFxuICBsZXQgdXJsX3JlcXVlc3QgPSAnJ1xuICBsZXQgcGFyYW1zID0ge1xuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcbiAgICB2bGFuOiB2bGFuLFxuICAgIHRpbWVmcmFtZTogdGltZWZyYW1lLFxuICAgIGw0cHJvdG86IGw0cHJvdG9cbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBpZih0aW1lZnJhbWUgPT0gJycpIHsgdXJsX3JlcXVlc3QgPSBgJHtsaXZlX3Jlc3R9PyR7dXJsX3BhcmFtc31gOyB9XG4gIGVsc2UgeyB1cmxfcmVxdWVzdCA9IGAke2hpc3RvcmljYWxfcmVzdH0/JHt1cmxfcGFyYW1zfWA7IH1cblxuICByZXR1cm4gdXJsX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShyZXMpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge30sIGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIHJlcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIGxldCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRyZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxhYmVsXG4gICAgcmVzLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgIGxpbms6IGxpbmsub3B0aW9uYWxfaW5mby5saW5rLFxuXHRcdG5vZGVfbGlua3M6IFtdLFx0XHRcblx0ICAgIH07XG5cdCAgICBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXSA9IGxpbmtfdG9fbm9kZXM7XG5cdH1cblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLnB1c2goe1xuXHQgICAgc291cmNlOiBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF0sXG5cdCAgICB0YXJnZXQ6IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXSxcblx0ICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuXHR9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3NcbiAgICBsZXQgbm9kZXMgPSByZXMubm9kZXMubWFwKChuKSA9PiBuKSwgbGlua3MgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5rX25vZGVfaWQgaW4gbGlua190b19ub2Rlc19kaWN0KSB7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGxldCBsaW5rX25vZGUgPSB7XG5cdCAgICBub2RlX2lkOiBsaW5rX3RvX25vZGVzLmlkLFxuXHQgICAgbGFiZWw6IGxpbmtfdG9fbm9kZXMubGFiZWwsXG4gICAgICBsaW5rOiBsaW5rX3RvX25vZGVzLmxpbmssXG5cdH07XG5cdG5vZGVzLnB1c2gobGlua19ub2RlKTtcblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rLnNvdXJjZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdHJldHVybiB7IGluZGV4LCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbm9kZV9kaWN0ID0ge307ICAgIFxuICAgIHNhbmtleV9ub2Rlcy5mb3JFYWNoKChzbiwgaW5kZXgpID0+IHNhbmtleV9ub2RlX2RpY3Rbc24uZGF0YS5ub2RlX2lkXSA9IHNuKTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2VfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdLmluZGV4O1xuXHRsZXQgdGFyZ2V0X2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXS5pbmRleDtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlX2luZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsXG5cdCAgICB2YWx1ZTogbC52YWx1ZSxcblx0ICAgIGxhYmVsOiBsLmxhYmVsLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzOiBzYW5rZXlfbm9kZXMsIGxpbmtzOiBzYW5rZXlfbGlua3MgfTtcbn1cblxuLy8gcmVtb3ZlIGFsbCBsaW5rcyB3aXRoIGEgbm90IGV4aXN0aW5nIG5vZGVcbmZ1bmN0aW9uIG1ha2VfY29tcGxldGVfZ3JhcGgoZ3JhcGgpIHtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3Igbm90IGV4aXN0aW5nIHNvdXJjZS90YXJnZXQgbm9kZWApOyAgICBcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbi8vIHJlbWVvdmUgYWxsIGNpcmN1bGFyIGxpbmtzIGFuZCByZXR1cm4gYSBkYWcgZ3JhcGhcbmZ1bmN0aW9uIG1ha2VfZGFnX2dyYXBoKGdyYXBoKSB7ICAgIFxuICAgIGxldCBub2Rlc19kZXN0X2RpY3QgPSB7fTsgLy8gZGljdGlvbmFyeSB7IFtub2RlX3NvdXJjZV9pZF06IG5vZGVzX3RhcmdldFtdIH1cbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsKSA9PiB7XG5cdGxldCBub2Rlc19kZXN0ID0gbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdO1xuXHRpZiAobm9kZXNfZGVzdCA9PSBudWxsKSB7XG5cdCAgICBub2Rlc19kZXN0ID0gW107XG5cdCAgICBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gPSBub2Rlc19kZXN0O1xuXHR9XG5cdG5vZGVzX2Rlc3QucHVzaChsLnRhcmdldF9ub2RlX2lkKTtcbiAgICB9KTtcbiAgICBsZXQgbm9kZXNfdG9fY2hlY2sgPSB7fTsgLy8gdGVtcCBkaWN0aW9uYXJ5IHVzZWQgZnJvbSBmX2FkZF9jaXJjdWxhcl9saW5rIFxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IHtcblx0bm9kZXNfdG9fY2hlY2tbbi5ub2RlX2lkXSA9IHsgY2hlY2tlZDogZmFsc2UsIHZpc2l0ZWQ6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICAvLyBjaXJjdWxhciBsaW5rcyBkaWN0IChrZXk6IGAke3NvdXJjZV9ub2RlX2lkfV8ke3RhcmdldF9ub2RlX2lkfWApXG4gICAgbGV0IGNpcmN1bGFyX2xpbmtzID0ge307XG4gICAgbGV0IGZfZ2V0X2xpbmtfa2V5ID0gKHNvdXJjZV9pZCwgdGFyZ2V0X2lkKSA9PiBgJHtzb3VyY2VfaWR9XyR7dGFyZ2V0X2lkfWA7XG4gICAgXG4gICAgLy8gZGVlcCBuYXZpZ2F0ZSBzdGFydGluZyBmcm9tIG5vZGVfaWQgYW5kIGFkZCBjaXJjdWxhcl9saW5rcyB2aXNpdGVkIGluIGNpcmN1bGFyX2xpbmtzIGRpY3QgXG4gICAgbGV0IGZfc2V0X2NpcmN1bGFyX2xpbmtzID0gKG5vZGVfaWQsIGZyb21fbm9kZV9pZCkgPT4ge1xuXHRsZXQgbm9kZV90b19jaGVjayA9IG5vZGVzX3RvX2NoZWNrW25vZGVfaWRdO1xuXHRpZiAobm9kZV90b19jaGVjay5jaGVja2VkID09IHRydWUpIHsgcmV0dXJuOyB9XG5cdGVsc2UgaWYgKG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9PSB0cnVlKSB7XG5cdCAgICBsZXQgbGlua19rZXkgPSBmX2dldF9saW5rX2tleShmcm9tX25vZGVfaWQsIG5vZGVfaWQpO1xuXHQgICAgY2lyY3VsYXJfbGlua3NbbGlua19rZXldID0gdHJ1ZTtcblx0ICAgIGNvbnNvbGUuZXJyb3IoYExpbmsgKHNvdXJjZTogJHtmcm9tX25vZGVfaWR9LCB0YXJnZXQ6ICR7bm9kZV9pZH0gKSBpcyBhIGNpcmN1bGFyIGxpbmtgKTtcblx0ICAgIG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IGZhbHNlO1xuXHQgICAgcmV0dXJuO1xuXHR9XG5cdG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IHRydWU7XG5cdGxldCBub2Rlc19kZXN0ID0gbm9kZXNfZGVzdF9kaWN0W25vZGVfaWRdO1xuXHRpZiAobm9kZXNfZGVzdCAhPSBudWxsKSB7XG5cdCAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzX2Rlc3QubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRsZXQgdGFyZ2V0X25vZGVfaWQgPSBub2Rlc19kZXN0W2ldO1xuXHRcdGZfc2V0X2NpcmN1bGFyX2xpbmtzKHRhcmdldF9ub2RlX2lkLCBub2RlX2lkKTtcdCAgICBcblx0ICAgIH1cblx0fVxuXHRub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcblx0bm9kZV90b19jaGVjay5jaGVja2VkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8vIHNldCBjaXJjdWxhcl9saW5rcyBkaWN0aW9uYXJ5XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4gZl9zZXRfY2lyY3VsYXJfbGlua3Mobi5ub2RlX2lkKSk7XG4gICAgXG4gICAgLy8gcmVtb3ZlIG5vIGRhZyBub2Rlcy9saW5rc1xuICAgIGxldCBmX2ZpbHRlcl9saW5rID0gKGwpID0+IHtcblx0bGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkobC5zb3VyY2Vfbm9kZV9pZCwgbC50YXJnZXRfbm9kZV9pZCk7XG5cdGxldCB0YWtlX2xpbmsgPSBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPT0gbnVsbDtcblx0cmV0dXJuIHRha2VfbGluaztcbiAgICB9O1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyX2xpbmssIGZfbG9nX2xpbmspO1xuICAgIFxuICAgIGxldCBmX2xvZ19ub2RlID0gKG4pID0+IGNvbnNvbGUuZXJyb3IoYG5vZGUgJHtuLm5vZGVfaWR9IHJlbW92ZWQgZm9yIGNpcmN1bGFyIGxpbmtzYCk7XG4gICAgbGV0IG5vZGVzID0gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayh7bm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rc30sIGZfbG9nX25vZGUpO1xuXG4gICAgLy8gcmV0dXJuIGEgZGFnIGdyYXBoXG4gICAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IG5vZGVfZGljdFtuLm5vZGVfaWRdID0gdHJ1ZSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKGwpID0+IG5vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSAhPSBudWxsICYmIG5vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXSAhPSBudWxsOyAgICBcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcblx0bGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG5cdGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuXHRpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcblx0ICAgIGZfbG9nKGUpO1xuXHR9XG5cdHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9oZWlnaHQoKSB7XG4gIGhlaWdodC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLmhlaWdodCgpIC0gMTAwO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfd2lkdGgoKSB7XG4gIHdpZHRoLnZhbHVlID0gJChib2R5X2Rpdi52YWx1ZSkud2lkdGgoKSAtIDEwO1xufVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgIDxMb2FkaW5nIHJlZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgaWQ9XCJhZ2dyZWdhdGVkX2xpdmVfZmxvd3NcIj4gICAgICAgICAgXG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9hZ2dyZWdhdGVkX2xpdmVfZmxvd3NcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJ0YWJsZV9jb25maWcuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCI7XG5cbmNvbnN0IGxvYWRpbmcgPSByZWYobnVsbClcbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSlcbmNvbnN0IHRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cyA9IHJlZihudWxsKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICB2bGFuczogQXJyYXksXG4gIGlmaWQ6IE51bWJlcixcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9mbG93L2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cy5sdWFgXG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgdGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzLnZhbHVlLnJlbG9hZCgpO1xufVxuICAgIFxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHN0YXJ0X2RhdGF0YWJsZSgpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBwYXJhbXMgPSB7IFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5pZmlkLFxuICAgIHZsYW5faWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhbl9pZFwiKVxuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB2bGFuX2ZpbHRlcnMgPSBbXVxuICBcbiAgaWYocHJvcHMudmxhbnMubGVuZ3RoID4gMCkge1xuICAgIHZsYW5fZmlsdGVycy5wdXNoKHtcbiAgICAgIGZpbHRlclRpdGxlOiBfaTE4bignbWFwX3BhZ2UudmxhbnMnKSxcbiAgICAgIGZpbHRlcnM6IHByb3BzLnZsYW5zLFxuICAgICAgZmlsdGVyTWVudUtleTogJ3ZsYW5faWQnLFxuICAgICAgY29sdW1uSW5kZXg6IDAsXG4gICAgICByZW1vdmVBbGxFbnRyeTogdHJ1ZSxcbiAgICAgIGNhbGxiYWNrRnVuY3Rpb246ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHsgXG4gICAgICAgICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQgLFxuICAgICAgICAgIHZsYW5faWQ6IHZhbHVlLmlkLFxuICAgICAgICB9O1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZsYW5faWQnLCB2YWx1ZS5pZCk7XG4gICAgICAgIHRhYmxlLmFqYXgudXJsKGAke3VybH0/JHtudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKX1gKTtcbiAgICAgICAgbG9hZGluZy52YWx1ZS5zaG93X2xvYWRpbmcoKTtcbiAgICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgICAgbG9hZGluZy52YWx1ZS5oaWRlX2xvYWRpbmcoKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIFxuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBgJHt1cmx9PyR7dXJsX3BhcmFtc31gLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfZmlsdGVyczogdmxhbl9maWx0ZXJzLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA3IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDcgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA4IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgXG4gICAgICBjb2x1bW5OYW1lOiBpMThuKFwiYXBwbGljYXRpb25fcHJvdG9cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/YXBwbGljYXRpb249JHtkYXRhLmlkfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBcbiAgICB9LFxuICBdO1xuXG4gIGlmKHByb3BzLnZsYW5zLmxlbmd0aCA+IDApIHtcbiAgICBjb2x1bW5zLnB1c2goeyBcbiAgICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ2bGFuXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAndmxhbl9pZCcsIGRhdGE6ICd2bGFuX2lkJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgaWYoZGF0YS5pZCA9PT0gMClcbiAgICAgICAgICByZXR1cm4gYGBcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3ZsYW49JHtkYXRhLmlkfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBcbiAgICB9KVxuXG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA4IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV07XG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNyB9LFxuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA4IH0sXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDkgfSxcbiAgICBdO1xuICB9XG5cbiAgY29sdW1ucy5wdXNoKHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcImZsb3dzXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnZmxvd3MnLCBkYXRhOiAnZmxvd3MnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuICB9LCB7IFxuICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJzY29yZVwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3Njb3JlJywgZGF0YTogJ3RvdF9zY29yZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcImNsaWVudHNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdudW1fY2xpZW50cycsIGRhdGE6ICdudW1fY2xpZW50cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcInNlcnZlcnNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdudW1fc2VydmVycycsIGRhdGE6ICdudW1fc2VydmVycycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcImJyZWFrZG93blwiKSwgdGFyZ2V0czogMCwgc29ydGluZzogZmFsc2UsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKGRhdGEucGVyY2VudGFnZV9ieXRlc19zZW50LCBkYXRhLnBlcmNlbnRhZ2VfYnl0ZXNfcmN2ZCwgaTE4bignc2VudCcpLCBpMThuKCdyY3ZkJykpO1xuICAgIH1cbiAgfSwgeyBcbiAgICBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19zZW50XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnYnl0ZXNfc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1lbmQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgfVxuICB9LCB7IFxuICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX3JjdmRcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdieXRlc19yY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWVuZCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICB9XG4gIH0sIHsgXG4gICAgY29sdW1uTmFtZTogaTE4bihcInRvdGFsX3RyYWZmaWNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICd0b3RfdHJhZmZpYycsIGRhdGE6ICd0b3RfdHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtZW5kJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgIH1cbiAgfSlcbiAgXG4gIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ2FsZXJ0c19kYXNoYm9hcmQuYWRkX2ZpbHRlcicpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJkdC1maWx0ZXItdHlwZS1zZWxlY3RcIj5cblx0ICA8Yj5GaWx0ZXI8L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsdGVyX3R5cGVfc2VsZWN0ZWRcIlxuICAgICAgOmlkPVwiJ2ZpbHRlcl90eXBlJ1wiXG4gICAgICA6b3B0aW9ucz1cImZpbHRlcnNfb3B0aW9uc1wiXG4gICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9maWx0ZXIoKVwiPlxuICAgIDwvc2VsZWN0LXNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkdC1maWx0ZXItdGVtcGxhdGUtY29udGFpbmVyIGZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCI+XG4gICAgICAgICAgPGI+e3tmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmQgY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcGVyYXRvcl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ29wZXJhdG9yX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3BlcmF0b3JzX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX29wZXJhdG9yX3R5cGVcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWlmPVwib3B0aW9uc190b19zaG93XCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICA6aWQ9XCInZGF0YV9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGF0YV9maWx0ZXJcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cImlucHV0X3ZhbHVlXCIgOnBhdHRlcm49XCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWRcIiBuYW1lPVwidmFsdWVcIiA6cmVxdWlyZWQ9XCJpbnB1dF9yZXF1aXJlZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7XCIgY2xhc3M9XCJhbGVydCBpbnZhbGlkLWZlZWRiYWNrXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPCEtLSBlbmQgZGl2IGlucHV0LWdyb3VwIG1iLTMgLS0+XG5cdDwvZGl2PlxuXHQ8IS0tIGVuZCBkaXYgZm9ybS1ncm91cC1yb3cgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tICcuL3NlbGVjdC1zZWFyY2gudnVlJ1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG4gICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sIFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGZpbHRlcnNfb3B0aW9uczogQXJyYXksXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgalF1ZXJ5OiAkLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdCAgICBmaWx0ZXJfdHlwZV9zZWxlY3RlZDogW10sXG5cdCAgICBmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZDogbnVsbCxcblx0ICAgIG9wZXJhdG9yX3NlbGVjdGVkOiBbXSxcblx0ICAgIG9wdGlvbl9zZWxlY3RlZDogW10sXG5cdCAgICBpbnB1dF92YWx1ZTogbnVsbCxcblx0ICAgIGRhdGFfcGF0dGVybl9zZWxlY3RlZDogbnVsbCxcblx0ICAgIGlucHV0X3JlcXVpcmVkOiBmYWxzZSxcblx0ICAgIG9wdGlvbnNfdG9fc2hvdzogbnVsbCxcblx0ICAgIG9wZXJhdG9yc190b19zaG93OiBbXSxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge30sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcbiAgICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWwpO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIChmaWx0ZXIpID0+IHRoaXMuc2hvdyhmaWx0ZXIpKTtcdFxuICAgICAgLy8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcbiAgICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICBpZiAodGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zID09IG51bGwgfHwgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmxlbmd0aCA9PSAwKSB7IFxuICAgICAgcmV0dXJuOyBcbiAgICB9XG4gICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG5cdCAgXHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gZmlsdGVyO1xuXHRcdCAgdGhpcy5jaGFuZ2VfZmlsdGVyKGZpbHRlcik7XHRcdFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zWzBdO1xuICAgICAgdGhpcy5jaGFuZ2VfZmlsdGVyKCk7XG4gICAgfVxuICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG4gIHBvc3RfY2hhbmdlOiBmdW5jdGlvbihmaWx0ZXIsIHZhbHVlX3R5cGUpIHtcbiAgICBpZiAoZmlsdGVyLmlkICYmIHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucykge1xuICAgICAgLyogRmlsdGVyIHR5cGUgc2VsZWN0ZWQsIGUuZy4gQWxlcnQgVHlwZSwgQXBwbGljYXRpb24sIGVjYy4gKi9cblx0XHRcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5pZCk7XG4gICAgfVxuICAgIGlmIChmaWx0ZXIudmFsdWUpIHtcbiAgICAgIC8qIEZpbHRlciBzZWxlY3RlZCBmb3IgdGhlIHR5cGUsIGUuZy4gRE5TLCBJQ01QLCBlY2MuICovXG4gICAgICBpZiAodGhpcy5vcHRpb25zX3RvX3Nob3cpIHtcblx0XHRcdCAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG5cdFx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gW107XG4gICAgICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBmaWx0ZXIudmFsdWU7XG4gICAgICAgIHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlsdGVyLm9wZXJhdG9yICYmIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cpIHtcbiAgICAgIC8qIE9wZXJhdG9yIGZpbHRlciBzZWxlY3RlZCwgZS5nLiA9LCAhPSwgZWNjLiAqL1xuXHRcdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHRoaXMub3BlcmF0b3JzX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5vcGVyYXRvcik7XG4gICAgfVxuICB9LFxuICBjaGFuZ2Vfb3BlcmF0b3JfdHlwZTogZnVuY3Rpb24oc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSkge1xuICAgIGlmKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUgIT0gW10pIHtcbiAgICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBzZWxlY3RlZF9vcGVyYXRvcl90eXBlXG4gICAgfVxuICB9LCAgXG4gIGNoYW5nZV9kYXRhX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG4gICAgaWYoc2VsZWN0ZWRfZmlsdGVyICE9IFtdKSB7XG4gICAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHNlbGVjdGVkX2ZpbHRlclxuICAgIH1cbiAgfSwgIFxuICBjaGFuZ2VfZmlsdGVyOiBmdW5jdGlvbihzZWxlY3RlZF9maWx0ZXIpIHtcbiAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG4gICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBudWxsO1xuICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBudWxsXG4gICAgbGV0IGZpbHRlcnNfb3B0aW9ucyA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucztcbiAgICAgIC8qIFNlYXJjaCB0aGUgZmlsdGVyIHNlbGVjdGVkICovXG4gICAgbGV0IGZpbHRlciA9IGZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG4gICAgaWYgKGZpbHRlciA9PSBudWxsKSB7IFxuICAgICAgcmV0dXJuOyBcbiAgICB9XG4gICAgLyogU2V0IHRoZSBjb3JyZWN0IGZpbHRlcnMgdG8gZGlzcGxheSAqL1xuICAgIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cgPSBmaWx0ZXIub3BlcmF0b3JzO1xuICAgIHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQgPSBmaWx0ZXIubGFiZWw7XG4gICAgaWYgKGZpbHRlci5vcHRpb25zICE9IG51bGwpIHtcbiAgICAgIHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBpZiAoYSA9PSBudWxsIHx8IGEubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gLTE7IH1cbiAgICAgICAgaWYgKGIgPT0gbnVsbCB8fCBiLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIDE7IH1cbiAgICAgICAgcmV0dXJuIGEubGFiZWwudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICAgIGlmKCF0aGlzLm9wdGlvbl9zZWxlY3RlZClcbiAgICAgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvd1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuICAgICAgdGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuICAgIH1cblxuICAgIGlmKGZpbHRlci5vcGVyYXRvcnMgJiYgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZC5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IGZpbHRlci5vcGVyYXRvcnNbMF1cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWRfZmlsdGVyICE9IG51bGwpIHsgXG4gICAgICB0aGlzLnBvc3RfY2hhbmdlKHNlbGVjdGVkX2ZpbHRlciwgZmlsdGVyLnZhbHVlX3R5cGUpOyBcbiAgICB9XG5cdH0sXG5cdGdldF9kYXRhX3BhdHRlcm46IGZ1bmN0aW9uKHZhbHVlX3R5cGUpIHtcblx0ICAgIHRoaXMuaW5wdXRfcmVxdWlyZWQgPSB0cnVlO1xuXHQgICAgaWYgKHZhbHVlX3R5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0XHR0aGlzLmlucHV0X3JlcXVpcmVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGAuKmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cblx0ICAgIC8vIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJpcFwiKSB7XG5cdCAgICAvLyBcdGxldCByX2lwdjQgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY0O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZShcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdGxldCByX2lwdjYgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcblx0ICAgIC8vIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgLy8gXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG5cdCAgICAvLyB9XG5cdCAgICBcblx0ICAgIC8vIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcblx0fSxcblx0Y2hlY2tfZGlzYWJsZV9hcHBseTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkKTtcblx0ICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gIXRoaXMub3B0aW9uc190b19zaG93ICYmIChcblx0XHQodGhpcy5pbnB1dF9yZXF1aXJlZCAmJiAodGhpcy5pbnB1dF92YWx1ZSA9PSBudWxsIHx8IHRoaXMuaW5wdXRfdmFsdWUgPT0gXCJcIikpXG5cdFx0ICAgIHx8IChyZWdleC50ZXN0KHRoaXMuaW5wdXRfdmFsdWUpID09IGZhbHNlKVxuXHRcdCk7XG5cdCAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcblx0fSxcblx0YXBwbHk6IGZ1bmN0aW9uKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuaW5wdXRfdmFsdWU7XG4gICAgbGV0IHZhbHVlX2xhYmVsID0gdGhpcy5pbnB1dF92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodGhpcy5vcHRpb25fc2VsZWN0ZWQgIT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9uX3NlbGVjdGVkLmxlbmd0aCAhPSAwKSkge1xuICAgICAgbGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcbiAgICAgIGxldCBvcHRpb24gPSBmaWx0ZXIub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHRoaXMub3B0aW9uX3NlbGVjdGVkLnZhbHVlKTtcbiAgICAgIHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuICAgICAgdmFsdWVfbGFiZWwgPSBvcHRpb24udmFsdWVfbGFiZWwgfHwgb3B0aW9uLmxhYmVsO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgaWQ6IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQsXG4gICAgICBsYWJlbDogdGhpcy5maWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCxcbiAgICAgIG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkLmlkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdmFsdWVfbGFiZWw6IHZhbHVlX2xhYmVsLFxuICAgIH07XG4gICAgdGhpcy4kZW1pdChcImFwcGx5XCIsIHBhcmFtcyk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLk1PREFMX0ZJTFRFUlNfQVBQTFksIHBhcmFtcyk7XG4gICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCdhbGVydHNfZGFzaGJvYXJkLmFkZF9maWx0ZXInKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxmb3JtIGF1dG9jb21wbGV0ZT1cIm9mZlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCIgZm9yPVwiZHQtZmlsdGVyLXR5cGUtc2VsZWN0XCI+XG5cdCAgPGI+RmlsdGVyPC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImZpbHRlcl90eXBlX3NlbGVjdGVkXCJcbiAgICAgIDppZD1cIidmaWx0ZXJfdHlwZSdcIlxuICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJzX29wdGlvbnNcIlxuICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZmlsdGVyKClcIj5cbiAgICA8L3NlbGVjdC1zZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aHI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZHQtZmlsdGVyLXRlbXBsYXRlLWNvbnRhaW5lciBmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiPlxuICAgICAgICAgIDxiPnt7ZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWR9fTwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIG1iLTNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kIGNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3BlcmF0b3Jfc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgIDppZD1cIidvcGVyYXRvcl9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wZXJhdG9yc190b19zaG93XCJcbiAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9vcGVyYXRvcl90eXBlXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1pZj1cIm9wdGlvbnNfdG9fc2hvd1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ2RhdGFfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2RhdGFfZmlsdGVyXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJpbnB1dF92YWx1ZVwiIDpwYXR0ZXJuPVwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkXCIgbmFtZT1cInZhbHVlXCIgOnJlcXVpcmVkPVwiaW5wdXRfcmVxdWlyZWRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO1wiIGNsYXNzPVwiYWxlcnQgaW52YWxpZC1mZWVkYmFja1wiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwhLS0gZW5kIGRpdiBpbnB1dC1ncm91cCBtYi0zIC0tPlxuXHQ8L2Rpdj5cblx0PCEtLSBlbmQgZGl2IGZvcm0tZ3JvdXAtcm93IC0tPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSAnLi9zZWxlY3Qtc2VhcmNoLnZ1ZSdcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICB9LCBcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRmaWx0ZXJzX29wdGlvbnM6IEFycmF5LFxuICAgIH0sXG4gICAgdXBkYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGpRdWVyeTogJCxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHQgICAgZmlsdGVyX3R5cGVfc2VsZWN0ZWQ6IFtdLFxuXHQgICAgZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQ6IG51bGwsXG5cdCAgICBvcGVyYXRvcl9zZWxlY3RlZDogW10sXG5cdCAgICBvcHRpb25fc2VsZWN0ZWQ6IFtdLFxuXHQgICAgaW5wdXRfdmFsdWU6IG51bGwsXG5cdCAgICBkYXRhX3BhdHRlcm5fc2VsZWN0ZWQ6IG51bGwsXG5cdCAgICBpbnB1dF9yZXF1aXJlZDogZmFsc2UsXG5cdCAgICBvcHRpb25zX3RvX3Nob3c6IG51bGwsXG5cdCAgICBvcGVyYXRvcnNfdG9fc2hvdzogW10sXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHt9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsKTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCAoZmlsdGVyKSA9PiB0aGlzLnNob3coZmlsdGVyKSk7XHRcbiAgICAgIC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG4gICAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgaWYgKHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucyA9PSBudWxsIHx8IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5sZW5ndGggPT0gMCkgeyBcbiAgICAgIHJldHVybjsgXG4gICAgfVxuICAgIGlmIChmaWx0ZXIgIT0gbnVsbCkge1xuXHQgIFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IGZpbHRlcjtcblx0XHQgIHRoaXMuY2hhbmdlX2ZpbHRlcihmaWx0ZXIpO1x0XHRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9uc1swXTtcbiAgICAgIHRoaXMuY2hhbmdlX2ZpbHRlcigpO1xuICAgIH1cbiAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuICBwb3N0X2NoYW5nZTogZnVuY3Rpb24oZmlsdGVyLCB2YWx1ZV90eXBlKSB7XG4gICAgaWYgKGZpbHRlci5pZCAmJiB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMpIHtcbiAgICAgIC8qIEZpbHRlciB0eXBlIHNlbGVjdGVkLCBlLmcuIEFsZXJ0IFR5cGUsIEFwcGxpY2F0aW9uLCBlY2MuICovXG5cdFx0XHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIuaWQpO1xuICAgIH1cbiAgICBpZiAoZmlsdGVyLnZhbHVlKSB7XG4gICAgICAvKiBGaWx0ZXIgc2VsZWN0ZWQgZm9yIHRoZSB0eXBlLCBlLmcuIEROUywgSUNNUCwgZWNjLiAqL1xuICAgICAgaWYgKHRoaXMub3B0aW9uc190b19zaG93KSB7XG5cdFx0XHQgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuXHRcdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IFtdO1xuICAgICAgICB0aGlzLmlucHV0X3ZhbHVlID0gZmlsdGVyLnZhbHVlO1xuICAgICAgICB0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZpbHRlci5vcGVyYXRvciAmJiB0aGlzLm9wZXJhdG9yc190b19zaG93KSB7XG4gICAgICAvKiBPcGVyYXRvciBmaWx0ZXIgc2VsZWN0ZWQsIGUuZy4gPSwgIT0sIGVjYy4gKi9cblx0XHRcdHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSB0aGlzLm9wZXJhdG9yc190b19zaG93LmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIub3BlcmF0b3IpO1xuICAgIH1cbiAgfSxcbiAgY2hhbmdlX29wZXJhdG9yX3R5cGU6IGZ1bmN0aW9uKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUpIHtcbiAgICBpZihzZWxlY3RlZF9vcGVyYXRvcl90eXBlICE9IFtdKSB7XG4gICAgICB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZVxuICAgIH1cbiAgfSwgIFxuICBjaGFuZ2VfZGF0YV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuICAgIGlmKHNlbGVjdGVkX2ZpbHRlciAhPSBbXSkge1xuICAgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBzZWxlY3RlZF9maWx0ZXJcbiAgICB9XG4gIH0sICBcbiAgY2hhbmdlX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG4gICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gbnVsbDtcbiAgICB0aGlzLmlucHV0X3ZhbHVlID0gbnVsbFxuICAgIGxldCBmaWx0ZXJzX29wdGlvbnMgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnM7XG4gICAgICAvKiBTZWFyY2ggdGhlIGZpbHRlciBzZWxlY3RlZCAqL1xuICAgIGxldCBmaWx0ZXIgPSBmaWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuICAgIGlmIChmaWx0ZXIgPT0gbnVsbCkgeyBcbiAgICAgIHJldHVybjsgXG4gICAgfVxuICAgIC8qIFNldCB0aGUgY29ycmVjdCBmaWx0ZXJzIHRvIGRpc3BsYXkgKi9cbiAgICB0aGlzLm9wZXJhdG9yc190b19zaG93ID0gZmlsdGVyLm9wZXJhdG9ycztcbiAgICB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkID0gZmlsdGVyLmxhYmVsO1xuICAgIGlmIChmaWx0ZXIub3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IGZpbHRlci5vcHRpb25zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG4gICAgICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG4gICAgICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuICAgICAgfSk7XG4gICAgICBpZighdGhpcy5vcHRpb25fc2VsZWN0ZWQpXG4gICAgICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3dbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3B0aW9uc190b19zaG93ID0gbnVsbDtcbiAgICAgIHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKGZpbHRlci52YWx1ZV90eXBlKTtcbiAgICB9XG5cbiAgICBpZihmaWx0ZXIub3BlcmF0b3JzICYmIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQubGVuZ3RoID09IDApIHtcbiAgICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBmaWx0ZXIub3BlcmF0b3JzWzBdXG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkX2ZpbHRlciAhPSBudWxsKSB7IFxuICAgICAgdGhpcy5wb3N0X2NoYW5nZShzZWxlY3RlZF9maWx0ZXIsIGZpbHRlci52YWx1ZV90eXBlKTsgXG4gICAgfVxuXHR9LFxuXHRnZXRfZGF0YV9wYXR0ZXJuOiBmdW5jdGlvbih2YWx1ZV90eXBlKSB7XG5cdCAgICB0aGlzLmlucHV0X3JlcXVpcmVkID0gdHJ1ZTtcblx0ICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdFx0dGhpcy5pbnB1dF9yZXF1aXJlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBgLipgO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuXG5cdCAgICAvLyBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0ICAgIC8vIFx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG5cdCAgICAvLyB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjaWRyXCIpIHtcblx0ICAgIC8vIFx0Y29uc29sZS5sb2coXCJ0ZXN0XCIpO1xuXHQgICAgLy8gfVxuXHQgICAgXG5cdCAgICAvLyByZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVNbdmFsdWVfdHlwZV07XG5cdH0sXG5cdGNoZWNrX2Rpc2FibGVfYXBwbHk6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCk7XG5cdCAgICBsZXQgZGlzYWJsZV9hcHBseSA9ICF0aGlzLm9wdGlvbnNfdG9fc2hvdyAmJiAoXG5cdFx0KHRoaXMuaW5wdXRfcmVxdWlyZWQgJiYgKHRoaXMuaW5wdXRfdmFsdWUgPT0gbnVsbCB8fCB0aGlzLmlucHV0X3ZhbHVlID09IFwiXCIpKVxuXHRcdCAgICB8fCAocmVnZXgudGVzdCh0aGlzLmlucHV0X3ZhbHVlKSA9PSBmYWxzZSlcblx0XHQpO1xuXHQgICAgcmV0dXJuIGRpc2FibGVfYXBwbHk7XG5cdH0sXG5cdGFwcGx5OiBmdW5jdGlvbigpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0X3ZhbHVlO1xuICAgIGxldCB2YWx1ZV9sYWJlbCA9IHRoaXMuaW5wdXRfdmFsdWU7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKHRoaXMub3B0aW9uX3NlbGVjdGVkICE9IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbl9zZWxlY3RlZC5sZW5ndGggIT0gMCkpIHtcbiAgICAgIGxldCBmaWx0ZXIgPSB0aGlzLmZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG4gICAgICBsZXQgb3B0aW9uID0gZmlsdGVyLm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSB0aGlzLm9wdGlvbl9zZWxlY3RlZC52YWx1ZSk7XG4gICAgICB2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcbiAgICAgIHZhbHVlX2xhYmVsID0gb3B0aW9uLnZhbHVlX2xhYmVsIHx8IG9wdGlvbi5sYWJlbDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gXCJcIjtcbiAgICB9XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgIGlkOiB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkLFxuICAgICAgbGFiZWw6IHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQsXG4gICAgICBvcGVyYXRvcjogdGhpcy5vcGVyYXRvcl9zZWxlY3RlZC5pZCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHZhbHVlX2xhYmVsOiB2YWx1ZV9sYWJlbCxcbiAgICB9O1xuICAgIHRoaXMuJGVtaXQoXCJhcHBseVwiLCBwYXJhbXMpO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5NT0RBTF9GSUxURVJTX0FQUExZLCBwYXJhbXMpO1xuICAgIHRoaXMuY2xvc2UoKTtcblx0fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdH0sXG4gICAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gIDxkaXYgY2xhc3M9XCJtYi0xXCIgPiAgICBcbiAgICA8bW9kYWwtZmlsdGVycyA6ZmlsdGVyc19vcHRpb25zPVwibW9kYWxfZGF0YVwiIEBhcHBseT1cImFwcGx5X21vZGFsXCIgcmVmPVwibW9kYWxfZmlsdGVyc1wiIDppZD1cImlkX21vZGFsX2ZpbHRlcnNcIj5cbiAgICA8L21vZGFsLWZpbHRlcnM+XG4gICAgPGRhdGEtdGltZS1yYW5nZS1waWNrZXIgOmlkPVwiaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlclwiPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cblx0PGRpdiB2LWlmPVwiaXNfYWxlcnRfc3RhdHNfdXJsXCIgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1lLTJcIj5cblx0ICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgaWQ9XCJzdGF0dXNTd2l0Y2hcIiByb2xlPVwiZ3JvdXBcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdoaXN0b3JpY2FsJylcIiBjbGFzcz1cImJ0biBidG4tc21cIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdoaXN0b3JpY2FsJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdoaXN0b3JpY2FsJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnfVwiPlBhc3Q8L2E+XG4gICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYWNrbm93bGVkZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2Fja25vd2xlZGdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnfVwiPkFjazwvYT5cbiAgICAgICAgICAgIDxhIHYtaWY9XCJwYWdlICE9ICdmbG93J1wiIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdlbmdhZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdlbmdhZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnfVwiPkVuZ2FnZWQ8L2E+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuXHQ8c2VsZWN0IHYtaWY9XCJlbmFibGVfcXVlcnlfcHJlc2V0c1wiIGNsYXNzPVwibWUtMiBmb3JtLXNlbGVjdFwiIHYtbW9kZWw9XCJxdWVyeV9wcmVzZXRcIiAgQGNoYW5nZT1cInVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cygpXCI+XG5cdCAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cdCAgICA8b3B0aW9uIHYtaWY9XCJpdGVtLmJ1aWx0aW4gPT0gdHJ1ZVwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cblx0ICA8L3RlbXBsYXRlPlxuXHQgIDxvcHRncm91cCB2LWlmPVwicGFnZSAhPSAnYW5hbHlzaXMnXCIgOmxhYmVsPVwiaTE4bigncXVlcmllcy5xdWVyaWVzJylcIj5cblx0ICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gcXVlcnlfcHJlc2V0c1wiPlxuXHQgICAgICBcbiAgICBcdCAgICAgIDxvcHRpb24gdi1pZj1cIiFpdGVtLmJ1aWx0aW5cIiA6dmFsdWU9XCJpdGVtXCI+e3sgaXRlbS5uYW1lIH19PC9vcHRpb24+XG5cdCAgICA8L3RlbXBsYXRlPlxuXHQgIDwvb3B0Z3JvdXA+XG5cdDwvc2VsZWN0PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cblx0PHNsb3QgbmFtZT1cImV4dHJhX3JhbmdlX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvZGF0YS10aW1lLXJhbmdlLXBpY2tlcj5cbiAgPC9kaXY+XG5cbiAgPCEtLSB0YWdpZnkgLS0+XG4gIDxkaXYgdi1pZj1cInBhZ2UgIT0gJ2FsbCdcIiBjbGFzcz1cImQtZmxleCBtdC0xXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgPGlucHV0IGNsYXNzPVwidy0xMDAgZm9ybS1jb250cm9sIGgtYXV0b1wiIG5hbWU9XCJ0YWdzXCIgcmVmPVwidGFnaWZ5XCIgOnBsYWNlaG9sZGVyPVwiaTE4bignc2hvd19hbGVydHMuZmlsdGVycycpXCI+XG4gICAgXG4gICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgYXJpYS1jb250cm9scz1cImZsb3ctYWxlcnRzLXRhYmxlXCIgdHlwZT1cImJ1dHRvblwiIGlkPVwiYnRuLWFkZC1hbGVydC1maWx0ZXJcIiBAY2xpY2s9XCJzaG93X21vZGFsX2ZpbHRlcnNcIj48c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1wbHVzXCIgZGF0YS1vcmlnaW5hbC10aXRsZT1cIlwiIHRpdGxlPVwiQWRkIEZpbHRlclwiPjwvaT48L3NwYW4+XG4gICAgPC9idXR0b24+XG4gICAgXG4gICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCIgdGl0bGU9XCJ7eyBpMThuKCdzaG93X2FsZXJ0cy5yZW1vdmVfZmlsdGVycycpIH19XCIgQGNsaWNrPVwicmVtb3ZlX2ZpbHRlcnNcIiBjbGFzcz1cImJ0biBtcy0xIG15LWF1dG8gYnRuLXNtIGJ0bi1yZW1vdmUtdGFnc1wiPlxuICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuICA8IS0tIGVuZCB0YWdpZnkgLS0+XG5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGFUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEZpbHRlcnMgfSBmcm9tIFwiLi9tb2RhbC1maWx0ZXJzLnZ1ZVwiO1xuXG5mdW5jdGlvbiBnZXRfcGFnZShhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgbGV0IHBhZ2UgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIik7XG4gICAgaWYgKHBhZ2UgPT0gbnVsbCkge1xuXHRpZiAoYWxlcnRfc3RhdHNfcGFnZSkge1xuXHQgICAgcGFnZSA9IFwiYWxsXCI7XG5cdH0gZWxzZSB7XG5cdCAgICBwYWdlID0gXCJvdmVydmlld1wiO1xuXHR9XG4gICAgfVxuICAgIHJldHVybiBwYWdlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfZmlsdGVyX2NvbnN0KGlzX2FsZXJ0X3N0YXRzX3VybCwgcGFnZSkge1xuICAgIGxldCB1cmxfcmVxdWVzdDtcbiAgICBpZiAoaXNfYWxlcnRfc3RhdHNfdXJsKSB7XG5cdHVybF9yZXF1ZXN0ID0gYCR7YmFzZV9wYXRofS9sdWEvcmVzdC92Mi9nZXQvYWxlcnQvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9YDtcbiAgICB9IGVsc2Uge1xuXHRsZXQgcXVlcnlfcHJlc2V0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIik7XG5cdGlmIChxdWVyeV9wcmVzZXQgPT0gbnVsbCkgeyBxdWVyeV9wcmVzZXQgPSBcIlwiOyB9XG5cdHVybF9yZXF1ZXN0ID0gYCR7YmFzZV9wYXRofS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfSZxdWVyeV9wcmVzZXQ9JHtxdWVyeV9wcmVzZXR9YDtcbiAgICB9XG4gICAgbGV0IGZpbHRlcl9jb25zdHMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIHJldHVybiBmaWx0ZXJfY29uc3RzO1xufVxuXG5sZXQgRklMVEVSU19DT05TVCA9IFtdO1xubGV0IFRBR19PUEVSQVRPUlM7XG5sZXQgREVGSU5FRF9UQUdTO1xuY29uc3QgVklFV19PTkxZX1RBR1MgPSB0cnVlO1xuLyogSW5pdGlhbCBUYWdzICovXG5sZXQgaW5pdGlhbFRhZ3M7IFxuLy9sZXQgcGFnZUhhbmRsZSA9IHt9O1xubGV0IFRBR0lGWTtcbmxldCBJU19BTEVSVF9TVEFUU19VUkwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKS5tYXRjaCgvYWxlcnRfc3RhdHMubHVhLykgIT0gbnVsbDtcbmxldCBRVUVSWV9QUkVTRVQgPSB7IFxuICB2YWx1ZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIiksXG4gIGNvdW50OiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImNvdW50XCIpLFxufTtcbmlmIChRVUVSWV9QUkVTRVQudmFsdWUgPT0gbnVsbCkge1xuICAgIFFVRVJZX1BSRVNFVC52YWx1ZSA9IFwiXCI7XG59XG5sZXQgU1RBVFVTX1ZJRVcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbmlmIChTVEFUVVNfVklFVyA9PSBudWxsIHx8IFNUQVRVU19WSUVXID09IFwiXCIpIHtcbiAgICBTVEFUVVNfVklFVyA9IFwiaGlzdG9yaWNhbFwiO1xufVxuY29uc3QgRU5BQkxFX1FVRVJZX1BSRVNFVFMgPSAhSVNfQUxFUlRfU1RBVFNfVVJMO1xuXG5sZXQgUEFHRSA9IGdldF9wYWdlKElTX0FMRVJUX1NUQVRTX1VSTCk7XG5cbmNvbnN0IHVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCB2YWx1ZSA9ICQoYCNzZWxlY3QtcXVlcnktcHJlc2V0c2ApLnZhbCgpO1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIHN0YXR1c1sncXVlcnlfcHJlc2V0J10gPSB2YWx1ZTtcbiAgICBudG9wbmdfdXRpbGl0eS5yZXBsYWNlX3VybF9hbmRfcmVsb2FkKHN0YXR1cyk7XG59XG5cbmNvbnN0IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICBsZXQgZl9jb25zdCA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZikgPT4gZi5pZCA9PSBmaWx0ZXIuaWQpO1xuICAgIGlmIChmX2NvbnN0ID09IG51bGwpIHsgY29uc29sZS5lcnJvcihcImNyZWF0ZV90YWdfZnJvbV9maWx0ZXI6IGZpbHRlciBjb25zdCBub3QgZm91bmQ7XCIpOyB9XG4gICAgXG4gICAgbGV0IHZhbHVlX2xhYmVsID0gZmlsdGVyLnZhbHVlO1xuICAgIGlmIChmX2NvbnN0Lm9wdGlvbnMgIT0gbnVsbCkge1xuXHRsZXQgb3B0ID0gZl9jb25zdC5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcblx0aWYgKG9wdCAhPSBudWxsKSB7XG5cdCAgICB2YWx1ZV9sYWJlbCA9IG9wdC5sYWJlbDtcblx0fVxuICAgIH1cbiAgICBjb25zdCB0YWcgPSB7XG5cdGxhYmVsOiBmX2NvbnN0LmxhYmVsLFxuXHRrZXk6IGZfY29uc3QuaWQsXG5cdHZhbHVlOiB2YWx1ZV9sYWJlbCxcblx0cmVhbFZhbHVlOiBmaWx0ZXIudmFsdWUsXG5cdHRpdGxlOiBgJHtmX2NvbnN0LmxhYmVsfSR7ZmlsdGVyLm9wZXJhdG9yfSR7dmFsdWVfbGFiZWx9YCxcblx0c2VsZWN0ZWRPcGVyYXRvcjogZmlsdGVyLm9wZXJhdG9yLFxuICAgIH07XG4gICAgaWYgKHRhZy52YWx1ZSA9PSBcIlwiKSB7IHRhZy52YWx1ZSA9IFwiJydcIiB9XG4gICAgaWYgKHRhZy5yZWFsVmFsdWUgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IFwiXCIpIHtcblx0cmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59ICBcblxuY29uc3QgbG9hZF9maWx0ZXJzX2RhdGEgPSBhc3luYyBmdW5jdGlvbigpIHsgICAgXG4gICAgRklMVEVSU19DT05TVCA9IGF3YWl0IGdldF9maWx0ZXJfY29uc3QoSVNfQUxFUlRfU1RBVFNfVVJMLCBQQUdFKTtcbiAgICBGSUxURVJTX0NPTlNULmZpbHRlcigoeCkgPT4geC5sYWJlbCA9PSBudWxsKS5mb3JFYWNoKCh4KSA9PiB7IGNvbnNvbGUuZXJyb3IoYGxhYmVsIG5vdCBkZWZpbmVkIGZvciBmaWx0ZXIgJHtKU09OLnN0cmluZ2lmeSh4KX1gKTsgeC5sYWJlbCA9IFwiXCI7IH0pO1xuICAgIEZJTFRFUlNfQ09OU1Quc29ydCgoYSwgYikgPT4gYS5sYWJlbC5sb2NhbGVDb21wYXJlKGIubGFiZWwpKTtcbiAgICBpMThuX2V4dC50YWdzID0ge307XG4gICAgVEFHX09QRVJBVE9SUyA9IHt9O1xuICAgIERFRklORURfVEFHUyA9IHt9O1xuICAgIEZJTFRFUlNfQ09OU1QuZm9yRWFjaCgoZl9kZWYpID0+IHtcblx0aTE4bl9leHQudGFnc1tmX2RlZi5pZF0gPSBmX2RlZi5sYWJlbDtcblx0Zl9kZWYub3BlcmF0b3JzLmZvckVhY2goKG9wKSA9PiBUQUdfT1BFUkFUT1JTW29wLmlkXSA9IG9wLmxhYmVsKTtcblx0REVGSU5FRF9UQUdTW2ZfZGVmLmlkXSA9IGZfZGVmLm9wZXJhdG9ycy5tYXAoKG9wKSA9PiBvcC5pZCk7XG4gICAgfSk7XG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgbGV0IGZpbHRlcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgXHRsZXQgZmlsdGVyX2RlZiA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZmMpID0+IGZjLmlkID09IGtleSk7XG4gICAgXHRpZiAoZmlsdGVyX2RlZiAhPSBudWxsKSB7XG4gICAgXHQgICAgbGV0IG9wdGlvbnNfc3RyaW5nID0gdmFsdWUuc3BsaXQoXCIsXCIpO1xuXHQgICAgb3B0aW9uc19zdHJpbmcuZm9yRWFjaCgob3B0X3N0aXJuZykgPT4ge1xuICAgIFx0XHRsZXQgW3ZhbHVlLCBvcGVyYXRvcl0gPSBvcHRfc3Rpcm5nLnNwbGl0KFwiO1wiKTtcblx0XHRpZiAoXG5cdFx0ICAgIG9wZXJhdG9yID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCB8fCBvcGVyYXRvciA9PSBcIlwiXG5cdFx0ICAgIHx8IChmaWx0ZXJfZGVmLm9wdGlvbnMgIT0gbnVsbCAmJiBmaWx0ZXJfZGVmLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpID09IG51bGwpXG5cdFx0ICAgKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0ZmlsdGVycy5wdXNoKHtpZDogZmlsdGVyX2RlZi5pZCwgb3BlcmF0b3I6IG9wZXJhdG9yLCB2YWx1ZTogdmFsdWV9KTtcblx0ICAgIH0pO1xuICAgIFx0fVx0XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIC8vIFwibDdwcm90bz1YWFg7ZXFcIlxufVxuXG5mdW5jdGlvbiBnZXRfZmlsdGVyc19vYmplY3QoZmlsdGVycykge1xuICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuIHt9OyB9XG4gICAgbGV0IGZpbHRlcnNfZ3JvdXBzID0ge307XG4gICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG5cdGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2YuaWRdO1xuXHRpZiAoZ3JvdXAgPT0gbnVsbCkge1xuXHQgICAgZ3JvdXAgPSBbXTtcblx0ICAgIGZpbHRlcnNfZ3JvdXBzW2YuaWRdID0gZ3JvdXA7XG5cdH1cblx0Z3JvdXAucHVzaChmKTtcbiAgICB9KTtcbiAgICBsZXQgZmlsdGVyc19vYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBmX2lkIGluIGZpbHRlcnNfZ3JvdXBzKSB7XG5cdGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2ZfaWRdO1xuXHRsZXQgZmlsdGVyX3ZhbHVlcyA9IGdyb3VwLmZpbHRlcigoZikgPT4gZi52YWx1ZSAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IFwiXCIpLm1hcCgoZikgPT4gYCR7Zi52YWx1ZX07JHtmLm9wZXJhdG9yfWApLmpvaW4oXCIsXCIpO1xuXHRmaWx0ZXJzX29iamVjdFtmX2lkXSA9IGZpbHRlcl92YWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzX29iamVjdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3F1ZXJ5X3ByZXNldChyYW5nZV9waWNrZXJfdnVlKSB7XG4gICAgbGV0IHBhZ2UgPSByYW5nZV9waWNrZXJfdnVlLnBhZ2U7XG4gICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7YmFzZV9wYXRofS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3ByZXNldC9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgbGV0IHF1ZXJ5X3ByZXNldHMgPSByZXNbMF0ubGlzdC5tYXAoKGVsKSA9PiB7XG5cdHJldHVybiB7XG5cdCAgICB2YWx1ZTogZWwuaWQsIC8vPT0gbnVsbCA/IFwiZmxvd1wiIDogZWwuaWQsXG5cdCAgICBuYW1lOiBlbC5uYW1lLFxuXHQgICAgY291bnQ6IGVsLmNvdW50LFxuXHQgICAgYnVpbHRpbjogdHJ1ZSxcblx0fTtcbiAgICB9KTtcbiAgICBpZiAocmVzLmxlbmd0aCA+IDEpIHtcblx0cmVzWzFdLmxpc3QuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBcdCAgICBsZXQgcXVlcnkgPSB7XG4gICAgXHRcdHZhbHVlOiBlbC5pZCxcbiAgICBcdFx0bmFtZTogZWwubmFtZSxcblx0ICAgICAgICBjb3VudDogZWwuY291bnQsXG4gICAgXHQgICAgfTtcbiAgICBcdCAgICBxdWVyeV9wcmVzZXRzLnB1c2gocXVlcnkpO1xuXHR9KTtcbiAgICB9XG4gICAgaWYgKHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0ID09IG51bGwgfHwgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQudmFsdWUgPT0gXCJcIikge1xuXHRyYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldCA9IHF1ZXJ5X3ByZXNldHNbMF07XG4gICAgfSBlbHNlIHtcblx0bGV0IHEgPSBxdWVyeV9wcmVzZXRzLmZpbmQoKGkpID0+IGkudmFsdWUgPT0gcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQudmFsdWUpO1xuICAgICAgIHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0ID0gcTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0LnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC5jb3VudCk7XG4gICAgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXRzID0gcXVlcnlfcHJlc2V0cztcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICBcdCdkYXRhLXRpbWUtcmFuZ2UtcGlja2VyJzogRGF0YVRpbWVSYW5nZVBpY2tlcixcblx0J21vZGFsLWZpbHRlcnMnOiBNb2RhbEZpbHRlcnMsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHRsZXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXIpO1xuXHRsZXQgbW9kYWxfZmlsdGVyc19tb3VudGVkID0gbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbF9maWx0ZXJzKTtcblx0YXdhaXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQ7XG5cblx0aWYgKHRoaXMuZW5hYmxlX3F1ZXJ5X3ByZXNldHMpIHtcblx0ICAgIGF3YWl0IHNldF9xdWVyeV9wcmVzZXQodGhpcyk7XG5cdH1cblx0aWYgKHRoaXMucGFnZSAhPSAnYWxsJykge1xuXHQgICAgbGV0IGZpbHRlcnMgPSBhd2FpdCBsb2FkX2ZpbHRlcnNfZGF0YSgpO1xuXHQgICAgXG5cdCAgICBUQUdJRlkgPSBjcmVhdGVfdGFnaWZ5KHRoaXMpO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgKHN0YXR1cykgPT4gdGhpcy5yZWxvYWRfc3RhdHVzKHN0YXR1cyksIHRydWUpO1xuXHR9XG5cdHRoaXMubW9kYWxfZGF0YSA9IEZJTFRFUlNfQ09OU1Q7XG5cdFxuXHQvL2F3YWl0IG1vZGFsX2ZpbHRlcnNfbW91bnRlZDtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogaTE4bixcblx0ICAgIGlkX21vZGFsX2ZpbHRlcnM6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbF9maWx0ZXJzYCxcblx0ICAgIGlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXI6IGAke3RoaXMuJHByb3BzLmlkfV9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyYCxcblx0ICAgIHNob3dfZmlsdGVyczogZmFsc2UsXG5cdCAgICBlZGl0X3RhZzogbnVsbCxcblx0ICAgIGlzX2FsZXJ0X3N0YXRzX3VybDogSVNfQUxFUlRfU1RBVFNfVVJMLFxuXHQgICAgcXVlcnlfcHJlc2V0czogW10sXG5cdCAgICBxdWVyeV9wcmVzZXQ6IFFVRVJZX1BSRVNFVCxcblx0ICAgIHN0YXR1c192aWV3OiBTVEFUVVNfVklFVyxcblx0ICAgIGVuYWJsZV9xdWVyeV9wcmVzZXRzOiBFTkFCTEVfUVVFUllfUFJFU0VUUyxcblx0ICAgIHBhZ2U6IFBBR0UsXG5cdCAgICBtb2RhbF9kYXRhOiBbXSxcblx0ICAgIGxhc3RfZmlsdGVyczogW10sXG5cdH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGlzX2ZpbHRlcl9kZWZpbmVkOiBmdW5jdGlvbihmaWx0ZXIpIHtcblx0ICAgIHJldHVybiBERUZJTkVEX1RBR1NbZmlsdGVyLmlkXSAhPSBudWxsO1xuXHR9LFxuXHR1cGRhdGVfc3RhdHVzX3ZpZXc6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIHN0YXR1cyk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1x0ICAgIFxuXHR9LFxuXHR1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHVybCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIHRoaXMucXVlcnlfcHJlc2V0LnZhbHVlKTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHRoaXMucXVlcnlfcHJlc2V0LmNvdW50KTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG5cdH0sXG5cdHNob3dfbW9kYWxfZmlsdGVyczogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxfZmlsdGVyc1wiXS5zaG93KCk7XG5cdH0sXG5cdHJlbW92ZV9maWx0ZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIGxldCBmaWx0ZXJzID0gW107XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuXHR9LFxuXHRyZWxvYWRfc3RhdHVzOiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG5cdCAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHQgICAgLy8gZGVsZXRlIGFsbCBwcmV2aW91cyBmaWx0ZXJcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKEZJTFRFUlNfQ09OU1QubWFwKChmKSA9PiBmLmlkKSk7XG5cdCAgICBUQUdJRlkudGFnaWZ5LnJlbW92ZUFsbFRhZ3MoKTtcblx0ICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IGdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG5cdCAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcblx0XHRsZXQgdGFnID0gY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcihmKTtcblx0XHRpZiAodGFnID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0VEFHSUZZLmFkZEZpbHRlclRhZyh0YWcpO1xuXHQgICAgfSk7XG5cdCAgICB0aGlzLmxhc3RfZmlsdGVycyA9IGZpbHRlcnM7XG5cdH0sXG5cdGFwcGx5X21vZGFsOiBmdW5jdGlvbihwYXJhbXMpIHtcblx0ICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHQgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcblx0ICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgZmlsdGVycyA9IFtdOyB9XG5cdCAgICBpZiAodGhpcy5lZGl0X3RhZyAhPSBudWxsKSB7XG5cdFx0ZmlsdGVycyA9IGZpbHRlcnMuZmlsdGVyKChmKSA9PiBmLmlkICE9IHRoaXMuZWRpdF90YWcua2V5IHx8IGYudmFsdWUgIT0gdGhpcy5lZGl0X3RhZy5yZWFsVmFsdWUpO1xuXHRcdHRoaXMuZWRpdF90YWcgPSBudWxsO1xuXHQgICAgfVxuXHQgICAgZmlsdGVycy5wdXNoKHBhcmFtcyk7XG5cdCAgICAvLyB0cmlnZ2VyIGV2ZW50IGFuZCB0aGVuIGNhbGwgcmVsb2FkX3N0YXR1c1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcblx0fSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlX3RhZ2lmeShyYW5nZV9waWNrZXJfdnVlKSB7XG4gICAgLy8gY3JlYXRlIHRhZ2lmeVxuICAgIGNvbnN0IHRhZ2lmeSA9IG5ldyBUYWdpZnkocmFuZ2VfcGlja2VyX3Z1ZS4kcmVmc1tcInRhZ2lmeVwiXSwge1xuXHRkdXBsaWNhdGVzOiB0cnVlLFxuXHRkZWxpbWl0ZXJzIDogbnVsbCxcblx0ZHJvcGRvd24gOiB7XG4gICAgICAgICAgICBlbmFibGVkOiAxLCAvLyBzdWdnZXN0IHRhZ3MgYWZ0ZXIgYSBzaW5nbGUgY2hhcmFjdGVyIGlucHV0XG4gICAgICAgICAgICBjbGFzc25hbWUgOiAnZXh0cmEtcHJvcGVydGllcycgLy8gY3VzdG9tIGNsYXNzIGZvciB0aGUgc3VnZ2VzdGlvbnMgZHJvcGRvd25cblx0fSxcblx0YXV0b0NvbXBsZXRlOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG5cdHRlbXBsYXRlcyA6IHtcbiAgICAgICAgICAgIHRhZyA6IGZ1bmN0aW9uKHRhZ0RhdGEpe1xuXHRcdHRyeXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8dGFnIHRpdGxlPScke3RhZ0RhdGEudmFsdWV9JyBjb250ZW50ZWRpdGFibGU9J2ZhbHNlJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiBjbGFzcz0ndGFnaWZ5X190YWcgJHt0YWdEYXRhLmNsYXNzID8gdGFnRGF0YS5jbGFzcyA6IFwiXCJ9JyAke3RoaXMuZ2V0QXR0cmlidXRlcyh0YWdEYXRhKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8eCB0aXRsZT0ncmVtb3ZlIHRhZycgY2xhc3M9J3RhZ2lmeV9fdGFnX19yZW1vdmVCdG4nPjwveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHt0YWdEYXRhLmxhYmVsID8gYDxiPiR7dGFnRGF0YS5sYWJlbH08L2I+Jm5ic3A7YCA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7IVZJRVdfT05MWV9UQUdTICYmIHRhZ0RhdGEub3BlcmF0b3JzID8gYDxzZWxlY3QgY2xhc3M9J29wZXJhdG9yJz4ke3RhZ0RhdGEub3BlcmF0b3JzLm1hcChvcCA9PiBgPG9wdGlvbiAke3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciA9PT0gb3AgPyAnc2VsZWN0ZWQnIDogJyd9IHZhbHVlPScke29wfSc+JHtUQUdfT1BFUkFUT1JTW29wXX08L29wdGlvbj5gKS5qb2luKCl9PC9zZWxlY3Q+YCA6IGA8YiBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID8gVEFHX09QRVJBVE9SU1t0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3JdIDogJz0nfTwvYj5gfSZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0YWdpZnlfX3RhZy10ZXh0Jz4ke3RhZ0RhdGEudmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvdGFnPmBcblx0XHR9XG5cdFx0Y2F0Y2goZXJyKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHRhZzogJHtlcnJ9YCk7XG5cdFx0fVxuICAgICAgICAgICAgfSxcblx0fSxcblx0dmFsaWRhdGU6IGZ1bmN0aW9uKHRhZ0RhdGEpIHtcblx0ICAgIHJldHVybiAodHlwZW9mIHRhZ0RhdGEua2V5ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdCAgICB0eXBlb2YgdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdCAgICB0eXBlb2YgdGFnRGF0YS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpO1xuXHR9XG4gICAgfSk7XG4gICAgXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cdC8vIGFkZCBleGlzdGluZyB0YWdzXG5cdHRhZ2lmeS5hZGRUYWdzKGluaXRpYWxUYWdzKTtcbiAgICB9KTsgLyogJChkb2N1bWVudCkucmVhZHkoKSAqL1xuICAgIFxuICAgIGNvbnN0IGNyZWF0ZVZhbHVlRnJvbVRhZyA9IGZ1bmN0aW9uKHRhZykge1xuXHRpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG5cdGxldCB2YWwgPSB0YWcucmVhbFZhbHVlICE9IG51bGwgPyB0YWcucmVhbFZhbHVlIDogdGFnLnZhbHVlO1xuXHRsZXQgdmFsdWUgPSBgJHt2YWx9OyR7dGFnLnNlbGVjdGVkT3BlcmF0b3J9YDtcblx0cmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBhZGRGaWx0ZXJUYWcgPSBhc3luYyBmdW5jdGlvbih0YWcpIHtcbiAgICAgICAgLyogQ29udmVydCB2YWx1ZXMgdG8gc3RyaW5nICh0aGlzIGF2b2lkcyBpc3N1ZXMgZS5nLiB3aXRoIDApICovXG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnJlYWxWYWx1ZSA9PSAnbnVtYmVyJykgeyB0YWcucmVhbFZhbHVlID0gJycrdGFnLnJlYWxWYWx1ZTsgfVxuICAgICAgICBpZiAodHlwZW9mIHRhZy52YWx1ZSA9PSAnbnVtYmVyJykgeyB0YWcudmFsdWUgPSAnJyt0YWcudmFsdWU7IH1cblx0XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFnRWxtcyA9IHRhZ2lmeS5nZXRUYWdFbG1zKCk7XG5cdFxuICAgICAgICAvKiBMb29rdXAgYnkga2V5LCB2YWx1ZSBhbmQgb3BlcmF0b3IgKGRvIG5vdCBhZGQgdGhlIHNhbWUga2V5IGFuZCB2YWx1ZSBtdWx0aXBsZSB0aW1lcykgKi9cbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnRWxlbWVudCA9IGV4aXN0aW5nVGFnRWxtcy5maW5kKGh0bWxUYWcgPT4gXG5cdFx0XHRcdFx0XHQgICAgICBodG1sVGFnLmdldEF0dHJpYnV0ZSgna2V5JykgPT09IHRhZy5rZXlcblx0XHRcdFx0XHRcdCAgICAgICYmIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdyZWFsVmFsdWUnKSA9PT0gdGFnLnJlYWxWYWx1ZSBcblx0XHRcdFx0XHRcdCAgICAgIC8vJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkT3BlcmF0b3InKSA9PT0gdGFnLnNlbGVjdGVkT3BlcmF0b3Jcblx0XHRcdFx0XHRcdCAgICAgKTtcbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnID0gdGFnaWZ5LnRhZ0RhdGEoZXhpc3RpbmdUYWdFbGVtZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXHRcbiAgICAgICAgLy8gaGFzIHRoZSB0YWcgYW4gb3BlcmF0b3Igb2JqZWN0P1xuICAgICAgICBpZiAoREVGSU5FRF9UQUdTW3RhZy5rZXldICYmICFBcnJheS5pc0FycmF5KERFRklORURfVEFHU1t0YWcua2V5XSkpIHtcbiAgICAgICAgICAgIHRhZy5vcGVyYXRvcnMgPSBERUZJTkVEX1RBR1NbdGFnLmtleV0ub3BlcmF0b3JzO1xuICAgICAgICB9XG5cdFxuICAgICAgICBpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB7XG4gICAgICAgICAgICB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIGZpbHRlciFcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoW3RhZ10pO1xuICAgIH1cbiAgICBcbiAgICAvLyB3aGVuIGFuIHVzZXIgcmVtb3ZlIHRoZSB0YWdcbiAgICB0YWdpZnkub24oJ3JlbW92ZScsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGNvbnN0IGtleSA9IGUuZGV0YWlsLmRhdGEua2V5O1xuICAgICAgY29uc3QgdmFsdWUgPSBlLmRldGFpbC5kYXRhLnJlYWxWYWx1ZTtcbiAgICAgIGNvbnN0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgICBcbiAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChzdGF0dXMuZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICBjb25zdCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnMuZmlsdGVyKChmKSA9PiAoZi5pZCAhPSBrZXkgfHwgKGYuaWQgPT0ga2V5ICYmIGYudmFsdWUgIT0gdmFsdWUpKSk7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1x0XG4gICAgfSk7XG4gICAgXG4gICAgdGFnaWZ5Lm9uKCdhZGQnLCBhc3luYyBmdW5jdGlvbihlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cdFxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcdFxuICAgICAgICAvLyBsZXQncyBjaGVjayBpZiB0aGUgdGFnIGhhcyBhIGtleSBmaWVsZFxuICAgICAgICBpZiAoIXRhZy5rZXkpIHtcbiAgICAgICAgICAgIHRhZ2lmeS5yZW1vdmVUYWdzKFtlLmRldGFpbC50YWddKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIFRhZyAnY2xpY2snIGV2ZW50IGhhbmRsZXIgdG8gb3BlbiB0aGUgJ0VkaXQnIG1vZGFsLiBOb3RlOiB0aGlzIHByZXZlbnRzXG4gICAgLy8gaW5saW5lIGVkaXRpbmcgb2YgdGhlIHRhZyAoJ2VkaXQ6dXBkYXRlZCcgaXMgbmV2ZXIgY2FsbGVkIGFzIGEgY29uc2VxdWVuY2UpXG4gICAgdGFnaWZ5Lm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XHRcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YS5rZXkgPT09IHVuZGVmaW5lZCkge3JldHVybjt9XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1xuXHQvLyByZW1lbWJlciB0aGF0IHRoaXMgdGFnIGFscmVhZHkgZXhpeHRzXG5cdHJhbmdlX3BpY2tlcl92dWUuZWRpdF90YWcgPSB0YWc7XG5cdC8vIHNob3cgbW9kYWwtZmlsdGVyc1xuXHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCB7aWQ6IHRhZy5rZXksIG9wZXJhdG9yOiB0YWcuc2VsZWN0ZWRPcGVyYXRvciwgdmFsdWU6IHRhZy5yZWFsVmFsdWV9KTtcbiAgICB9KTtcbiAgICBcbiAgICB0YWdpZnkub24oJ2VkaXQ6dXBkYXRlZCcsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcblx0Y29uc29sZS53YXJuKFwiVVBEQVRFRFwiKTtcblx0cmV0dXJuO1xuICAgIH0pO1xuICAgIFxuICAgICQoYHRhZ3NgKS5vbignY2hhbmdlJywgJ3NlbGVjdC5vcGVyYXRvcicsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcblx0Y29uc29sZS53YXJuKFwiVEFHUyBjaGFuZ2VcIik7XG5cdHJldHVybjtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuXHR0YWdpZnksXG5cdGFkZEZpbHRlclRhZyxcbiAgICB9O1xufVxuPC9zY3JpcHQ+XG5cblxuPHN0eWxlIHNjb3BlZD5cbi50YWdpZnlfX2lucHV0IHtcbiAgbWluLXdpZHRoOiAxNzVweDtcbn1cbi50YWdpZnlfX3RhZyB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG1hcmdpbjogM3B4IDBweCA1cHggNXB4O1xufVxuLnRhZ2lmeV9fdGFnIHNlbGVjdC5vcGVyYXRvciB7XG4gIG1hcmdpbjogMHB4IDRweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuLnRhZ2lmeV9fdGFnIGIub3BlcmF0b3Ige1xuICBtYXJnaW46IDBweCA0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIHBhZGRpbmc6IDAuMDVlbSAwLjJlbTtcbn1cbi50YWdpZnlfX3RhZyA+IGRpdiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgPGRpdiBjbGFzcz1cIm1iLTFcIiA+ICAgIFxuICAgIDxtb2RhbC1maWx0ZXJzIDpmaWx0ZXJzX29wdGlvbnM9XCJtb2RhbF9kYXRhXCIgQGFwcGx5PVwiYXBwbHlfbW9kYWxcIiByZWY9XCJtb2RhbF9maWx0ZXJzXCIgOmlkPVwiaWRfbW9kYWxfZmlsdGVyc1wiPlxuICAgIDwvbW9kYWwtZmlsdGVycz5cbiAgICA8ZGF0YS10aW1lLXJhbmdlLXBpY2tlciA6aWQ9XCJpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyXCI+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmJlZ2luPlxuXHQ8ZGl2IHYtaWY9XCJpc19hbGVydF9zdGF0c191cmxcIiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPlxuXHQgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBpZD1cInN0YXR1c1N3aXRjaFwiIHJvbGU9XCJncm91cFwiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2hpc3RvcmljYWwnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2hpc3RvcmljYWwnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCd9XCI+UGFzdDwvYT5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhY2tub3dsZWRnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCd9XCI+QWNrPC9hPlxuICAgICAgICAgICAgPGEgdi1pZj1cInBhZ2UgIT0gJ2Zsb3cnXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2VuZ2FnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2VuZ2FnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCd9XCI+RW5nYWdlZDwvYT5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG5cdDxzZWxlY3Qgdi1pZj1cImVuYWJsZV9xdWVyeV9wcmVzZXRzXCIgY2xhc3M9XCJtZS0yIGZvcm0tc2VsZWN0XCIgdi1tb2RlbD1cInF1ZXJ5X3ByZXNldFwiICBAY2hhbmdlPVwidXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzKClcIj5cblx0ICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cblx0ICAgIDxvcHRpb24gdi1pZj1cIml0ZW0uYnVpbHRpbiA9PSB0cnVlXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuXHQgIDwvdGVtcGxhdGU+XG5cdCAgPG9wdGdyb3VwIHYtaWY9XCJwYWdlICE9ICdhbmFseXNpcydcIiA6bGFiZWw9XCJpMThuKCdxdWVyaWVzLnF1ZXJpZXMnKVwiPlxuXHQgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cdCAgICAgIFxuICAgIFx0ICAgICAgPG9wdGlvbiB2LWlmPVwiIWl0ZW0uYnVpbHRpblwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cblx0ICAgIDwvdGVtcGxhdGU+XG5cdCAgPC9vcHRncm91cD5cblx0PC9zZWxlY3Q+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuXHQ8c2xvdCBuYW1lPVwiZXh0cmFfcmFuZ2VfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyPlxuICA8L2Rpdj5cblxuICA8IS0tIHRhZ2lmeSAtLT5cbiAgPGRpdiB2LWlmPVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiZC1mbGV4IG10LTFcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICA8aW5wdXQgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2wgaC1hdXRvXCIgbmFtZT1cInRhZ3NcIiByZWY9XCJ0YWdpZnlcIiA6cGxhY2Vob2xkZXI9XCJpMThuKCdzaG93X2FsZXJ0cy5maWx0ZXJzJylcIj5cbiAgICBcbiAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBhcmlhLWNvbnRyb2xzPVwiZmxvdy1hbGVydHMtdGFibGVcIiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tYWRkLWFsZXJ0LWZpbHRlclwiIEBjbGljaz1cInNob3dfbW9kYWxfZmlsdGVyc1wiPjxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIiBkYXRhLW9yaWdpbmFsLXRpdGxlPVwiXCIgdGl0bGU9XCJBZGQgRmlsdGVyXCI+PC9pPjwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICBcbiAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIiB0aXRsZT1cInt7IGkxOG4oJ3Nob3dfYWxlcnRzLnJlbW92ZV9maWx0ZXJzJykgfX1cIiBAY2xpY2s9XCJyZW1vdmVfZmlsdGVyc1wiIGNsYXNzPVwiYnRuIG1zLTEgbXktYXV0byBidG4tc20gYnRuLXJlbW92ZS10YWdzXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS10aW1lc1wiPjwvaT5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIDwhLS0gZW5kIHRhZ2lmeSAtLT5cblxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YVRpbWVSYW5nZVBpY2tlciB9IGZyb20gXCIuL2RhdGEtdGltZS1yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRmlsdGVycyB9IGZyb20gXCIuL21vZGFsLWZpbHRlcnMudnVlXCI7XG5cbmZ1bmN0aW9uIGdldF9wYWdlKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICBsZXQgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7XG5cdGlmIChhbGVydF9zdGF0c19wYWdlKSB7XG5cdCAgICBwYWdlID0gXCJhbGxcIjtcblx0fSBlbHNlIHtcblx0ICAgIHBhZ2UgPSBcIm92ZXJ2aWV3XCI7XG5cdH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QoaXNfYWxlcnRfc3RhdHNfdXJsLCBwYWdlKSB7XG4gICAgbGV0IHVybF9yZXF1ZXN0O1xuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcblx0dXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9yZXN0L3YyL2dldC9hbGVydC9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuICAgIH0gZWxzZSB7XG5cdGxldCBxdWVyeV9wcmVzZXQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKTtcblx0aWYgKHF1ZXJ5X3ByZXNldCA9PSBudWxsKSB7IHF1ZXJ5X3ByZXNldCA9IFwiXCI7IH1cblx0dXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9JnF1ZXJ5X3ByZXNldD0ke3F1ZXJ5X3ByZXNldH1gO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmxldCBGSUxURVJTX0NPTlNUID0gW107XG5sZXQgVEFHX09QRVJBVE9SUztcbmxldCBERUZJTkVEX1RBR1M7XG5jb25zdCBWSUVXX09OTFlfVEFHUyA9IHRydWU7XG4vKiBJbml0aWFsIFRhZ3MgKi9cbmxldCBpbml0aWFsVGFnczsgXG4vL2xldCBwYWdlSGFuZGxlID0ge307XG5sZXQgVEFHSUZZO1xubGV0IElTX0FMRVJUX1NUQVRTX1VSTCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xubGV0IFFVRVJZX1BSRVNFVCA9IHsgXG4gIHZhbHVlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKSxcbiAgY291bnQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiY291bnRcIiksXG59O1xuaWYgKFFVRVJZX1BSRVNFVC52YWx1ZSA9PSBudWxsKSB7XG4gICAgUVVFUllfUFJFU0VULnZhbHVlID0gXCJcIjtcbn1cbmxldCBTVEFUVVNfVklFVyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpO1xuaWYgKFNUQVRVU19WSUVXID09IG51bGwgfHwgU1RBVFVTX1ZJRVcgPT0gXCJcIikge1xuICAgIFNUQVRVU19WSUVXID0gXCJoaXN0b3JpY2FsXCI7XG59XG5jb25zdCBFTkFCTEVfUVVFUllfUFJFU0VUUyA9ICFJU19BTEVSVF9TVEFUU19VUkw7XG5cbmxldCBQQUdFID0gZ2V0X3BhZ2UoSVNfQUxFUlRfU1RBVFNfVVJMKTtcblxuY29uc3QgdXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHZhbHVlID0gJChgI3NlbGVjdC1xdWVyeS1wcmVzZXRzYCkudmFsKCk7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgc3RhdHVzWydxdWVyeV9wcmVzZXQnXSA9IHZhbHVlO1xuICAgIG50b3BuZ191dGlsaXR5LnJlcGxhY2VfdXJsX2FuZF9yZWxvYWQoc3RhdHVzKTtcbn1cblxuY29uc3QgY3JlYXRlX3RhZ19mcm9tX2ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgIGxldCBmX2NvbnN0ID0gRklMVEVSU19DT05TVC5maW5kKChmKSA9PiBmLmlkID09IGZpbHRlci5pZCk7XG4gICAgaWYgKGZfY29uc3QgPT0gbnVsbCkgeyBjb25zb2xlLmVycm9yKFwiY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcjogZmlsdGVyIGNvbnN0IG5vdCBmb3VuZDtcIik7IH1cbiAgICBcbiAgICBsZXQgdmFsdWVfbGFiZWwgPSBmaWx0ZXIudmFsdWU7XG4gICAgaWYgKGZfY29uc3Qub3B0aW9ucyAhPSBudWxsKSB7XG5cdGxldCBvcHQgPSBmX2NvbnN0Lm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSBmaWx0ZXIudmFsdWUpO1xuXHRpZiAob3B0ICE9IG51bGwpIHtcblx0ICAgIHZhbHVlX2xhYmVsID0gb3B0LmxhYmVsO1xuXHR9XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IHtcblx0bGFiZWw6IGZfY29uc3QubGFiZWwsXG5cdGtleTogZl9jb25zdC5pZCxcblx0dmFsdWU6IHZhbHVlX2xhYmVsLFxuXHRyZWFsVmFsdWU6IGZpbHRlci52YWx1ZSxcblx0dGl0bGU6IGAke2ZfY29uc3QubGFiZWx9JHtmaWx0ZXIub3BlcmF0b3J9JHt2YWx1ZV9sYWJlbH1gLFxuXHRzZWxlY3RlZE9wZXJhdG9yOiBmaWx0ZXIub3BlcmF0b3IsXG4gICAgfTtcbiAgICBpZiAodGFnLnZhbHVlID09IFwiXCIpIHsgdGFnLnZhbHVlID0gXCInJ1wiIH1cbiAgICBpZiAodGFnLnJlYWxWYWx1ZSA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gXCJcIikge1xuXHRyZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn0gIFxuXG5jb25zdCBsb2FkX2ZpbHRlcnNfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uKCkgeyAgICBcbiAgICBGSUxURVJTX0NPTlNUID0gYXdhaXQgZ2V0X2ZpbHRlcl9jb25zdChJU19BTEVSVF9TVEFUU19VUkwsIFBBR0UpO1xuICAgIEZJTFRFUlNfQ09OU1QuZmlsdGVyKCh4KSA9PiB4LmxhYmVsID09IG51bGwpLmZvckVhY2goKHgpID0+IHsgY29uc29sZS5lcnJvcihgbGFiZWwgbm90IGRlZmluZWQgZm9yIGZpbHRlciAke0pTT04uc3RyaW5naWZ5KHgpfWApOyB4LmxhYmVsID0gXCJcIjsgfSk7XG4gICAgRklMVEVSU19DT05TVC5zb3J0KChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCkpO1xuICAgIGkxOG5fZXh0LnRhZ3MgPSB7fTtcbiAgICBUQUdfT1BFUkFUT1JTID0ge307XG4gICAgREVGSU5FRF9UQUdTID0ge307XG4gICAgRklMVEVSU19DT05TVC5mb3JFYWNoKChmX2RlZikgPT4ge1xuXHRpMThuX2V4dC50YWdzW2ZfZGVmLmlkXSA9IGZfZGVmLmxhYmVsO1xuXHRmX2RlZi5vcGVyYXRvcnMuZm9yRWFjaCgob3ApID0+IFRBR19PUEVSQVRPUlNbb3AuaWRdID0gb3AubGFiZWwpO1xuXHRERUZJTkVEX1RBR1NbZl9kZWYuaWRdID0gZl9kZWYub3BlcmF0b3JzLm1hcCgob3ApID0+IG9wLmlkKTtcbiAgICB9KTtcbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICBcdGxldCBmaWx0ZXJfZGVmID0gRklMVEVSU19DT05TVC5maW5kKChmYykgPT4gZmMuaWQgPT0ga2V5KTtcbiAgICBcdGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICBcdCAgICBsZXQgb3B0aW9uc19zdHJpbmcgPSB2YWx1ZS5zcGxpdChcIixcIik7XG5cdCAgICBvcHRpb25zX3N0cmluZy5mb3JFYWNoKChvcHRfc3Rpcm5nKSA9PiB7XG4gICAgXHRcdGxldCBbdmFsdWUsIG9wZXJhdG9yXSA9IG9wdF9zdGlybmcuc3BsaXQoXCI7XCIpO1xuXHRcdGlmIChcblx0XHQgICAgb3BlcmF0b3IgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsIHx8IG9wZXJhdG9yID09IFwiXCJcblx0XHQgICAgfHwgKGZpbHRlcl9kZWYub3B0aW9ucyAhPSBudWxsICYmIGZpbHRlcl9kZWYub3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSkgPT0gbnVsbClcblx0XHQgICApIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRmaWx0ZXJzLnB1c2goe2lkOiBmaWx0ZXJfZGVmLmlkLCBvcGVyYXRvcjogb3BlcmF0b3IsIHZhbHVlOiB2YWx1ZX0pO1xuXHQgICAgfSk7XG4gICAgXHR9XHRcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgLy8gXCJsN3Byb3RvPVhYWDtlcVwiXG59XG5cbmZ1bmN0aW9uIGdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKSB7XG4gICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm4ge307IH1cbiAgICBsZXQgZmlsdGVyc19ncm91cHMgPSB7fTtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcblx0bGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZi5pZF07XG5cdGlmIChncm91cCA9PSBudWxsKSB7XG5cdCAgICBncm91cCA9IFtdO1xuXHQgICAgZmlsdGVyc19ncm91cHNbZi5pZF0gPSBncm91cDtcblx0fVxuXHRncm91cC5wdXNoKGYpO1xuICAgIH0pO1xuICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IHt9O1xuICAgIGZvciAobGV0IGZfaWQgaW4gZmlsdGVyc19ncm91cHMpIHtcblx0bGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZl9pZF07XG5cdGxldCBmaWx0ZXJfdmFsdWVzID0gZ3JvdXAuZmlsdGVyKChmKSA9PiBmLnZhbHVlICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gXCJcIikubWFwKChmKSA9PiBgJHtmLnZhbHVlfTske2Yub3BlcmF0b3J9YCkuam9pbihcIixcIik7XG5cdGZpbHRlcnNfb2JqZWN0W2ZfaWRdID0gZmlsdGVyX3ZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnNfb2JqZWN0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfcXVlcnlfcHJlc2V0KHJhbmdlX3BpY2tlcl92dWUpIHtcbiAgICBsZXQgcGFnZSA9IHJhbmdlX3BpY2tlcl92dWUucGFnZTtcbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtiYXNlX3BhdGh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvcHJlc2V0L2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBsZXQgcXVlcnlfcHJlc2V0cyA9IHJlc1swXS5saXN0Lm1hcCgoZWwpID0+IHtcblx0cmV0dXJuIHtcblx0ICAgIHZhbHVlOiBlbC5pZCwgLy89PSBudWxsID8gXCJmbG93XCIgOiBlbC5pZCxcblx0ICAgIG5hbWU6IGVsLm5hbWUsXG5cdCAgICBjb3VudDogZWwuY291bnQsXG5cdCAgICBidWlsdGluOiB0cnVlLFxuXHR9O1xuICAgIH0pO1xuICAgIGlmIChyZXMubGVuZ3RoID4gMSkge1xuXHRyZXNbMV0ubGlzdC5mb3JFYWNoKChlbCkgPT4ge1xuICAgIFx0ICAgIGxldCBxdWVyeSA9IHtcbiAgICBcdFx0dmFsdWU6IGVsLmlkLFxuICAgIFx0XHRuYW1lOiBlbC5uYW1lLFxuXHQgICAgICAgIGNvdW50OiBlbC5jb3VudCxcbiAgICBcdCAgICB9O1xuICAgIFx0ICAgIHF1ZXJ5X3ByZXNldHMucHVzaChxdWVyeSk7XG5cdH0pO1xuICAgIH1cbiAgICBpZiAocmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQgPT0gbnVsbCB8fCByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC52YWx1ZSA9PSBcIlwiKSB7XG5cdHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0ID0gcXVlcnlfcHJlc2V0c1swXTtcbiAgICB9IGVsc2Uge1xuXHRsZXQgcSA9IHF1ZXJ5X3ByZXNldHMuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldC52YWx1ZSk7XG4gICAgICAgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQgPSBxO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgcmFuZ2VfcGlja2VyX3Z1ZS5xdWVyeV9wcmVzZXQudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHJhbmdlX3BpY2tlcl92dWUucXVlcnlfcHJlc2V0LmNvdW50KTtcbiAgICByYW5nZV9waWNrZXJfdnVlLnF1ZXJ5X3ByZXNldHMgPSBxdWVyeV9wcmVzZXRzO1xuICAgIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgIFx0J2RhdGEtdGltZS1yYW5nZS1waWNrZXInOiBEYXRhVGltZVJhbmdlUGlja2VyLFxuXHQnbW9kYWwtZmlsdGVycyc6IE1vZGFsRmlsdGVycyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGxldCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcik7XG5cdGxldCBtb2RhbF9maWx0ZXJzX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsX2ZpbHRlcnMpO1xuXHRhd2FpdCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZDtcblxuXHRpZiAodGhpcy5lbmFibGVfcXVlcnlfcHJlc2V0cykge1xuXHQgICAgYXdhaXQgc2V0X3F1ZXJ5X3ByZXNldCh0aGlzKTtcblx0fVxuXHRpZiAodGhpcy5wYWdlICE9ICdhbGwnKSB7XG5cdCAgICBsZXQgZmlsdGVycyA9IGF3YWl0IGxvYWRfZmlsdGVyc19kYXRhKCk7XG5cdCAgICBcblx0ICAgIFRBR0lGWSA9IGNyZWF0ZV90YWdpZnkodGhpcyk7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCAoc3RhdHVzKSA9PiB0aGlzLnJlbG9hZF9zdGF0dXMoc3RhdHVzKSwgdHJ1ZSk7XG5cdH1cblx0dGhpcy5tb2RhbF9kYXRhID0gRklMVEVSU19DT05TVDtcblx0XG5cdC8vYXdhaXQgbW9kYWxfZmlsdGVyc19tb3VudGVkO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBpMThuOiBpMThuLFxuXHQgICAgaWRfbW9kYWxfZmlsdGVyczogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsX2ZpbHRlcnNgLFxuXHQgICAgaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcjogYCR7dGhpcy4kcHJvcHMuaWR9X2RhdGEtdGltZS1yYW5nZS1waWNrZXJgLFxuXHQgICAgc2hvd19maWx0ZXJzOiBmYWxzZSxcblx0ICAgIGVkaXRfdGFnOiBudWxsLFxuXHQgICAgaXNfYWxlcnRfc3RhdHNfdXJsOiBJU19BTEVSVF9TVEFUU19VUkwsXG5cdCAgICBxdWVyeV9wcmVzZXRzOiBbXSxcblx0ICAgIHF1ZXJ5X3ByZXNldDogUVVFUllfUFJFU0VULFxuXHQgICAgc3RhdHVzX3ZpZXc6IFNUQVRVU19WSUVXLFxuXHQgICAgZW5hYmxlX3F1ZXJ5X3ByZXNldHM6IEVOQUJMRV9RVUVSWV9QUkVTRVRTLFxuXHQgICAgcGFnZTogUEFHRSxcblx0ICAgIG1vZGFsX2RhdGE6IFtdLFxuXHQgICAgbGFzdF9maWx0ZXJzOiBbXSxcblx0fTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0aXNfZmlsdGVyX2RlZmluZWQ6IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgcmV0dXJuIERFRklORURfVEFHU1tmaWx0ZXIuaWRdICE9IG51bGw7XG5cdH0sXG5cdHVwZGF0ZV9zdGF0dXNfdmlldzogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJzdGF0dXNcIiwgc3RhdHVzKTtcblx0ICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XHQgICAgXG5cdH0sXG5cdHVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0czogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgdGhpcy5xdWVyeV9wcmVzZXQudmFsdWUpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgdGhpcy5xdWVyeV9wcmVzZXQuY291bnQpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcblx0fSxcblx0c2hvd19tb2RhbF9maWx0ZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9maWx0ZXJzXCJdLnNob3coKTtcblx0fSxcblx0cmVtb3ZlX2ZpbHRlcnM6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IGZpbHRlcnMgPSBbXTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XG5cdH0sXG5cdHJlbG9hZF9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcblx0ICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICAvLyBkZWxldGUgYWxsIHByZXZpb3VzIGZpbHRlclxuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoRklMVEVSU19DT05TVC5tYXAoKGYpID0+IGYuaWQpKTtcblx0ICAgIFRBR0lGWS50YWdpZnkucmVtb3ZlQWxsVGFncygpO1xuXHQgICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0gZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpO1xuXHQgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKGZpbHRlcnNfb2JqZWN0KTtcblx0ICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuXHRcdGxldCB0YWcgPSBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyKGYpO1xuXHRcdGlmICh0YWcgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHRUQUdJRlkuYWRkRmlsdGVyVGFnKHRhZyk7XG5cdCAgICB9KTtcblx0ICAgIHRoaXMubGFzdF9maWx0ZXJzID0gZmlsdGVycztcblx0fSxcblx0YXBwbHlfbW9kYWw6IGZ1bmN0aW9uKHBhcmFtcykge1xuXHQgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdCAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuXHQgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyBmaWx0ZXJzID0gW107IH1cblx0ICAgIGlmICh0aGlzLmVkaXRfdGFnICE9IG51bGwpIHtcblx0XHRmaWx0ZXJzID0gZmlsdGVycy5maWx0ZXIoKGYpID0+IGYuaWQgIT0gdGhpcy5lZGl0X3RhZy5rZXkgfHwgZi52YWx1ZSAhPSB0aGlzLmVkaXRfdGFnLnJlYWxWYWx1ZSk7XG5cdFx0dGhpcy5lZGl0X3RhZyA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBmaWx0ZXJzLnB1c2gocGFyYW1zKTtcblx0ICAgIC8vIHRyaWdnZXIgZXZlbnQgYW5kIHRoZW4gY2FsbCByZWxvYWRfc3RhdHVzXG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuXHR9LFxuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfdGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUpIHtcbiAgICAvLyBjcmVhdGUgdGFnaWZ5XG4gICAgY29uc3QgdGFnaWZ5ID0gbmV3IFRhZ2lmeShyYW5nZV9waWNrZXJfdnVlLiRyZWZzW1widGFnaWZ5XCJdLCB7XG5cdGR1cGxpY2F0ZXM6IHRydWUsXG5cdGRlbGltaXRlcnMgOiBudWxsLFxuXHRkcm9wZG93biA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IDEsIC8vIHN1Z2dlc3QgdGFncyBhZnRlciBhIHNpbmdsZSBjaGFyYWN0ZXIgaW5wdXRcbiAgICAgICAgICAgIGNsYXNzbmFtZSA6ICdleHRyYS1wcm9wZXJ0aWVzJyAvLyBjdXN0b20gY2xhc3MgZm9yIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93blxuXHR9LFxuXHRhdXRvQ29tcGxldGU6IHsgZW5hYmxlZDogZmFsc2UgfSxcblx0dGVtcGxhdGVzIDoge1xuICAgICAgICAgICAgdGFnIDogZnVuY3Rpb24odGFnRGF0YSl7XG5cdFx0dHJ5e1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDx0YWcgdGl0bGU9JyR7dGFnRGF0YS52YWx1ZX0nIGNvbnRlbnRlZGl0YWJsZT0nZmFsc2UnIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGNsYXNzPSd0YWdpZnlfX3RhZyAke3RhZ0RhdGEuY2xhc3MgPyB0YWdEYXRhLmNsYXNzIDogXCJcIn0nICR7dGhpcy5nZXRBdHRyaWJ1dGVzKHRhZ0RhdGEpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke3RhZ0RhdGEubGFiZWwgPyBgPGI+JHt0YWdEYXRhLmxhYmVsfTwvYj4mbmJzcDtgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHshVklFV19PTkxZX1RBR1MgJiYgdGFnRGF0YS5vcGVyYXRvcnMgPyBgPHNlbGVjdCBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5vcGVyYXRvcnMubWFwKG9wID0+IGA8b3B0aW9uICR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID09PSBvcCA/ICdzZWxlY3RlZCcgOiAnJ30gdmFsdWU9JyR7b3B9Jz4ke1RBR19PUEVSQVRPUlNbb3BdfTwvb3B0aW9uPmApLmpvaW4oKX08L3NlbGVjdD5gIDogYDxiIGNsYXNzPSdvcGVyYXRvcic+JHt0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgPyBUQUdfT1BFUkFUT1JTW3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvcl0gOiAnPSd9PC9iPmB9Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3RhZ2lmeV9fdGFnLXRleHQnPiR7dGFnRGF0YS52YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90YWc+YFxuXHRcdH1cblx0XHRjYXRjaChlcnIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgdGFnOiAke2Vycn1gKTtcblx0XHR9XG4gICAgICAgICAgICB9LFxuXHR9LFxuXHR2YWxpZGF0ZTogZnVuY3Rpb24odGFnRGF0YSkge1xuXHQgICAgcmV0dXJuICh0eXBlb2YgdGFnRGF0YS5rZXkgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0ICAgIHR5cGVvZiB0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0ICAgIHR5cGVvZiB0YWdEYXRhLnZhbHVlICE9PSAndW5kZWZpbmVkJyk7XG5cdH1cbiAgICB9KTtcbiAgICBcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0Ly8gYWRkIGV4aXN0aW5nIHRhZ3Ncblx0dGFnaWZ5LmFkZFRhZ3MoaW5pdGlhbFRhZ3MpO1xuICAgIH0pOyAvKiAkKGRvY3VtZW50KS5yZWFkeSgpICovXG4gICAgXG4gICAgY29uc3QgY3JlYXRlVmFsdWVGcm9tVGFnID0gZnVuY3Rpb24odGFnKSB7XG5cdGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcblx0bGV0IHZhbCA9IHRhZy5yZWFsVmFsdWUgIT0gbnVsbCA/IHRhZy5yZWFsVmFsdWUgOiB0YWcudmFsdWU7XG5cdGxldCB2YWx1ZSA9IGAke3ZhbH07JHt0YWcuc2VsZWN0ZWRPcGVyYXRvcn1gO1xuXHRyZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFkZEZpbHRlclRhZyA9IGFzeW5jIGZ1bmN0aW9uKHRhZykge1xuICAgICAgICAvKiBDb252ZXJ0IHZhbHVlcyB0byBzdHJpbmcgKHRoaXMgYXZvaWRzIGlzc3VlcyBlLmcuIHdpdGggMCkgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcucmVhbFZhbHVlID09ICdudW1iZXInKSB7IHRhZy5yZWFsVmFsdWUgPSAnJyt0YWcucmVhbFZhbHVlOyB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnZhbHVlID09ICdudW1iZXInKSB7IHRhZy52YWx1ZSA9ICcnK3RhZy52YWx1ZTsgfVxuXHRcbiAgICAgICAgY29uc3QgZXhpc3RpbmdUYWdFbG1zID0gdGFnaWZ5LmdldFRhZ0VsbXMoKTtcblx0XG4gICAgICAgIC8qIExvb2t1cCBieSBrZXksIHZhbHVlIGFuZCBvcGVyYXRvciAoZG8gbm90IGFkZCB0aGUgc2FtZSBrZXkgYW5kIHZhbHVlIG11bHRpcGxlIHRpbWVzKSAqL1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWdFbGVtZW50ID0gZXhpc3RpbmdUYWdFbG1zLmZpbmQoaHRtbFRhZyA9PiBcblx0XHRcdFx0XHRcdCAgICAgIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdrZXknKSA9PT0gdGFnLmtleVxuXHRcdFx0XHRcdFx0ICAgICAgJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3JlYWxWYWx1ZScpID09PSB0YWcucmVhbFZhbHVlIFxuXHRcdFx0XHRcdFx0ICAgICAgLy8mJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWRPcGVyYXRvcicpID09PSB0YWcuc2VsZWN0ZWRPcGVyYXRvclxuXHRcdFx0XHRcdFx0ICAgICApO1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWcgPSB0YWdpZnkudGFnRGF0YShleGlzdGluZ1RhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmdUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cdFxuICAgICAgICAvLyBoYXMgdGhlIHRhZyBhbiBvcGVyYXRvciBvYmplY3Q/XG4gICAgICAgIGlmIChERUZJTkVEX1RBR1NbdGFnLmtleV0gJiYgIUFycmF5LmlzQXJyYXkoREVGSU5FRF9UQUdTW3RhZy5rZXldKSkge1xuICAgICAgICAgICAgdGFnLm9wZXJhdG9ycyA9IERFRklORURfVEFHU1t0YWcua2V5XS5vcGVyYXRvcnM7XG4gICAgICAgIH1cblx0XG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgZmlsdGVyIVxuICAgICAgICB0YWdpZnkuYWRkVGFncyhbdGFnXSk7XG4gICAgfVxuICAgIFxuICAgIC8vIHdoZW4gYW4gdXNlciByZW1vdmUgdGhlIHRhZ1xuICAgIHRhZ2lmeS5vbigncmVtb3ZlJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuICAgICAgY29uc3Qga2V5ID0gZS5kZXRhaWwuZGF0YS5rZXk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGUuZGV0YWlsLmRhdGEucmVhbFZhbHVlO1xuICAgICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgIFxuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHN0YXR1cy5maWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGNvbnN0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycy5maWx0ZXIoKGYpID0+IChmLmlkICE9IGtleSB8fCAoZi5pZCA9PSBrZXkgJiYgZi52YWx1ZSAhPSB2YWx1ZSkpKTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XHRcbiAgICB9KTtcbiAgICBcbiAgICB0YWdpZnkub24oJ2FkZCcsIGFzeW5jIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVx0XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1x0XG4gICAgICAgIC8vIGxldCdzIGNoZWNrIGlmIHRoZSB0YWcgaGFzIGEga2V5IGZpZWxkXG4gICAgICAgIGlmICghdGFnLmtleSkge1xuICAgICAgICAgICAgdGFnaWZ5LnJlbW92ZVRhZ3MoW2UuZGV0YWlsLnRhZ10pO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVx0XG4gICAgfSk7XG4gICAgXG4gICAgLy8gVGFnICdjbGljaycgZXZlbnQgaGFuZGxlciB0byBvcGVuIHRoZSAnRWRpdCcgbW9kYWwuIE5vdGU6IHRoaXMgcHJldmVudHNcbiAgICAvLyBpbmxpbmUgZWRpdGluZyBvZiB0aGUgdGFnICgnZWRpdDp1cGRhdGVkJyBpcyBuZXZlciBjYWxsZWQgYXMgYSBjb25zZXF1ZW5jZSlcbiAgICB0YWdpZnkub24oJ2NsaWNrJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcdFxuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGRldGFpbC5kYXRhLmtleSA9PT0gdW5kZWZpbmVkKSB7cmV0dXJuO31cbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XG5cdC8vIHJlbWVtYmVyIHRoYXQgdGhpcyB0YWcgYWxyZWFkeSBleGl4dHNcblx0cmFuZ2VfcGlja2VyX3Z1ZS5lZGl0X3RhZyA9IHRhZztcblx0Ly8gc2hvdyBtb2RhbC1maWx0ZXJzXG5cdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIHtpZDogdGFnLmtleSwgb3BlcmF0b3I6IHRhZy5zZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogdGFnLnJlYWxWYWx1ZX0pO1xuICAgIH0pO1xuICAgIFxuICAgIHRhZ2lmeS5vbignZWRpdDp1cGRhdGVkJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuXHRjb25zb2xlLndhcm4oXCJVUERBVEVEXCIpO1xuXHRyZXR1cm47XG4gICAgfSk7XG4gICAgXG4gICAgJChgdGFnc2ApLm9uKCdjaGFuZ2UnLCAnc2VsZWN0Lm9wZXJhdG9yJywgYXN5bmMgZnVuY3Rpb24oZSkge1xuXHRjb25zb2xlLndhcm4oXCJUQUdTIGNoYW5nZVwiKTtcblx0cmV0dXJuO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG5cdHRhZ2lmeSxcblx0YWRkRmlsdGVyVGFnLFxuICAgIH07XG59XG48L3NjcmlwdD5cblxuXG48c3R5bGUgc2NvcGVkPlxuLnRhZ2lmeV9faW5wdXQge1xuICBtaW4td2lkdGg6IDE3NXB4O1xufVxuLnRhZ2lmeV9fdGFnIHtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbWFyZ2luOiAzcHggMHB4IDVweCA1cHg7XG59XG4udGFnaWZ5X190YWcgc2VsZWN0Lm9wZXJhdG9yIHtcbiAgbWFyZ2luOiAwcHggNHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG4udGFnaWZ5X190YWcgYi5vcGVyYXRvciB7XG4gIG1hcmdpbjogMHB4IDRweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgcGFkZGluZzogMC4wNWVtIDAuMmVtO1xufVxuLnRhZ2lmeV9fdGFnID4gZGl2IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdj5cbjx0YWJsZSAgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJsZXNzIGdyYXBoLXN0YXRpc3RpY3MgbWItMlwiIHN0eWxlPVwiXCI+XG4gICAgPHRoZWFkIGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLXRvdGFsLXRpdGxlIGZzLTZcIiBzdHlsZT1cImJvcmRlci1sZWZ0LXdpZHRoOiAxcHg7IGJvcmRlci10b3Atd2lkdGg6IDFweDtcIj4gVG90YWw6PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImdyYXBoLXZhbC05NXBlcmNlbnRpbGUtdGl0bGUgZnMtNlwiIHN0eWxlPVwiYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4O1wiPjk1dGggPGEgaHJlZj1cImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcmNlbnRpbGVcIj5QZXJjZW50aWxlPC9hPjo8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLWF2ZXJhZ2UtdGl0bGUgZnMtNlwiIHN0eWxlPVwiYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4O1wiPkF2ZXJhZ2U6PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImdyYXBoLXZhbC1tYXgtdGl0bGUgZnMtNlwiIHN0eWxlPVwiYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcIj5NYXg6PC90aD5cbiAgICAgICAgPC90cj5cbiAgICA8L3RoZWFkPlxuICAgIDx0Ym9keT48dHI+XG4gICA8dGQgY2xhc3M9XCJncmFwaC12YWwtdG90YWwgdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci13aWR0aDogMXB4O1wiPiA8c3Bhbj57e3RvdGFsfX08L3NwYW4+PC90ZD5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC05NXBlcmNlbnRpbGUgdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci10b3Atd2lkdGg6IDFweDsgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7IGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcIj4gPHNwYW4+e3twZXJjZW50aWxlX3NlbnR9fSBbU2VudF08YnI+e3twZXJjZW50aWxlX3JjdmR9fSBbUmN2ZF08L3NwYW4+PC90ZD5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC1hdmVyYWdlIHRleHQtY2VudGVyXCIgc3R5bGU9XCJib3JkZXItdG9wLXdpZHRoOiAxcHg7IGJvcmRlci1yaWdodC13aWR0aDogMXB4OyBib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7XCI+IDxzcGFuPnt7YXZnX3NlbnR9fSBLYml0L3MgW1NlbnRdPGJyPnt7YXZnX3JjdmR9fSBbUmN2ZF08L3NwYW4+PC90ZD5cbiAgIDwhLS0gPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLW1pblwiIHN0eWxlPVwiZGlzcGxheTpub25lO2JvcmRlci1ib3R0b20td2lkdGg6IDFweDtib3JkZXItdG9wLXdpZHRoOiAxcHg7Ym9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XCI+bmlsOiA8c3Bhbj48L3NwYW4+PC90ZD4gLS0+XG4gICA8dGQgY2xhc3M9XCJncmFwaC12YWwtbWF4IHRleHQtY2VudGVyXCIgc3R5bGU9XCJib3JkZXItYm90dG9tLXdpZHRoOiAxcHg7IGJvcmRlci10b3Atd2lkdGg6IDFweDsgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XCI+IDxzcGFuPnt7bWF4X3NlbnR9fSBbU2VudF08YnI+e3ttYXhfcmN2ZH19IFtSY3ZkXTwvc3Bhbj48L3RkPlxuPC90cj48L3Rib2R5PjwvdGFibGU+XG5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRjaGFydF9vcHRpb25zOiBPYmplY3QsXG4gICAgfSxcbiAgICB3YXRjaDoge1xuXHRcImNoYXJ0X29wdGlvbnNcIjogZnVuY3Rpb24odmFsLCBvbGRWYWwpIHtcblx0ICAgIHRoaXMucmVsb2FkZWRfdGFibGUoKTtcblx0fVxuICAgIH0sXG4gICAgZW1pdHM6IFtdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcbiAgICAgICAgdG90YWw6MCxcbiAgICAgICAgcGVyY2VudGlsZV9zZW50OjAsXG4gICAgICAgIHBlcmNlbnRpbGVfcmN2ZDowLFxuICAgICAgICBhdmdfc2VudDowLFxuICAgICAgICBhdmdfcmN2ZDowLFxuXHQgICAgbWF4X3NlbnQ6IDAsXG5cdCAgICBtYXhfcmN2ZDogMCxcblxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0Ly8gY29uc29sZS5sb2coXCJNb3VudGVkIFNpbXBsZSB0YWJsZVwiKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0cmVsb2FkZWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgZkJpdCA9ICBudG9wQ2hhcnRBcGV4LmNoYXJ0T3B0aW9uc1V0aWxpdHkuZ2V0QXBleFlGb3JtYXR0ZXIobnRvcENoYXJ0QXBleC5jaGFydE9wdGlvbnNVdGlsaXR5LmFwZXhZRm9ybWF0dGVyVHlwZXMuYnBzLmlkKTtcbiAgICAgICAgbGV0IGZCeXRlcyA9IG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5nZXRBcGV4WUZvcm1hdHRlcihudG9wQ2hhcnRBcGV4LmNoYXJ0T3B0aW9uc1V0aWxpdHkuYXBleFlGb3JtYXR0ZXJUeXBlcy5ieXRlcy5pZCk7XG5cdCAgICAvLyBjb25zb2xlLmxvZyhcInJlbG9hZGVkIHRhYmxlIGNhbGxlZFwiKTtcblx0ICAgIC8vY29uc29sZS5sb2coT2JqZWN0LmtleXModGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MpKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWUpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIk9CSkVDVCBLRVlTXCIpXG4gICAgICAgIGxldCB0b3RhbCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLnRvdGFsO1xuICAgICAgICBsZXQgbWF4X3NlbnQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVswXS5tYXhfdmFsO1xuICAgICAgICBsZXQgbWF4X3JjdmQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVsxXS5tYXhfdmFsO1xuICAgICAgICBsZXQgYXZnX3NlbnQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVswXS5hdmVyYWdlO1xuICAgICAgICBsZXQgYXZnX3JjdmQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVsxXS5hdmVyYWdlO1xuICAgICAgICBsZXQgcGVyY2VudGlsZV9zZW50ID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MuYnlfc2VyaWVbMF1bXCI5NXRoX3BlcmNlbnRpbGVcIl07XG4gICAgICAgIGxldCBwZXJjZW50aWxlX3JjdmQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVsxXVtcIjk1dGhfcGVyY2VudGlsZVwiXTtcbiAgICAgICAgdGhpcy5tYXhfc2VudCA9IGZCaXQobWF4X3NlbnQqOCk7XG4gICAgICAgIHRoaXMubWF4X3JjdmQgPSBmQml0KG1heF9yY3ZkKjgpO1xuICAgICAgICB0aGlzLmF2Z19zZW50ID0gZkJpdChhdmdfc2VudCo4KTtcbiAgICAgICAgdGhpcy5hdmdfcmN2ZCA9IGZCaXQoYXZnX3JjdmQqOCk7XG4gICAgICAgIHRoaXMucGVyY2VudGlsZV9zZW50ID0gZkJpdChwZXJjZW50aWxlX3NlbnQqOCk7XG4gICAgICAgIHRoaXMucGVyY2VudGlsZV9yY3ZkID0gZkJpdChwZXJjZW50aWxlX3JjdmQqOCk7XG4gICAgICAgIHRoaXMudG90YWwgPSBmQnl0ZXModG90YWwpO1xuXG5cdH0sXG4gICAgfSxcbn07XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2PlxuPHRhYmxlICBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmxlc3MgZ3JhcGgtc3RhdGlzdGljcyBtYi0yXCIgc3R5bGU9XCJcIj5cbiAgICA8dGhlYWQgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtdG90YWwtdGl0bGUgZnMtNlwiIHN0eWxlPVwiYm9yZGVyLWxlZnQtd2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4O1wiPiBUb3RhbDo8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLTk1cGVyY2VudGlsZS10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7XCI+OTV0aCA8YSBocmVmPVwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyY2VudGlsZVwiPlBlcmNlbnRpbGU8L2E+OjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJncmFwaC12YWwtYXZlcmFnZS10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7XCI+QXZlcmFnZTo8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiZ3JhcGgtdmFsLW1heC10aXRsZSBmcy02XCIgc3R5bGU9XCJib3JkZXItbGVmdC13aWR0aDogMXB4OyBib3JkZXItdG9wLXdpZHRoOiAxcHg7IGJvcmRlci1yaWdodC13aWR0aDogMXB4O1wiPk1heDo8L3RoPlxuICAgICAgICA8L3RyPlxuICAgIDwvdGhlYWQ+XG4gICAgPHRib2R5Pjx0cj5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC10b3RhbCB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLXdpZHRoOiAxcHg7XCI+IDxzcGFuPnt7dG90YWx9fTwvc3Bhbj48L3RkPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLTk1cGVyY2VudGlsZSB0ZXh0LWNlbnRlclwiIHN0eWxlPVwiYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDsgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1wiPiA8c3Bhbj57e3BlcmNlbnRpbGVfc2VudH19IFtTZW50XTxicj57e3BlcmNlbnRpbGVfcmN2ZH19IFtSY3ZkXTwvc3Bhbj48L3RkPlxuICAgPHRkIGNsYXNzPVwiZ3JhcGgtdmFsLWF2ZXJhZ2UgdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci10b3Atd2lkdGg6IDFweDsgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7IGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcIj4gPHNwYW4+e3thdmdfc2VudH19IEtiaXQvcyBbU2VudF08YnI+e3thdmdfcmN2ZH19IFtSY3ZkXTwvc3Bhbj48L3RkPlxuICAgPCEtLSA8dGQgY2xhc3M9XCJncmFwaC12YWwtbWluXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7Ym9yZGVyLWJvdHRvbS13aWR0aDogMXB4O2JvcmRlci10b3Atd2lkdGg6IDFweDtib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcIj5uaWw6IDxzcGFuPjwvc3Bhbj48L3RkPiAtLT5cbiAgIDx0ZCBjbGFzcz1cImdyYXBoLXZhbC1tYXggdGV4dC1jZW50ZXJcIiBzdHlsZT1cImJvcmRlci1ib3R0b20td2lkdGg6IDFweDsgYm9yZGVyLXRvcC13aWR0aDogMXB4OyBib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcIj4gPHNwYW4+e3ttYXhfc2VudH19IFtTZW50XTxicj57e21heF9yY3ZkfX0gW1JjdmRdPC9zcGFuPjwvdGQ+XG48L3RyPjwvdGJvZHk+PC90YWJsZT5cblxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGNoYXJ0X29wdGlvbnM6IE9iamVjdCxcbiAgICB9LFxuICAgIHdhdGNoOiB7XG5cdFwiY2hhcnRfb3B0aW9uc1wiOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkge1xuXHQgICAgdGhpcy5yZWxvYWRlZF90YWJsZSgpO1xuXHR9XG4gICAgfSxcbiAgICBlbWl0czogW10sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuICAgICAgICB0b3RhbDowLFxuICAgICAgICBwZXJjZW50aWxlX3NlbnQ6MCxcbiAgICAgICAgcGVyY2VudGlsZV9yY3ZkOjAsXG4gICAgICAgIGF2Z19zZW50OjAsXG4gICAgICAgIGF2Z19yY3ZkOjAsXG5cdCAgICBtYXhfc2VudDogMCxcblx0ICAgIG1heF9yY3ZkOiAwLFxuXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHQvLyBjb25zb2xlLmxvZyhcIk1vdW50ZWQgU2ltcGxlIHRhYmxlXCIpO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRyZWxvYWRlZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxldCBmQml0ID0gIG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5nZXRBcGV4WUZvcm1hdHRlcihudG9wQ2hhcnRBcGV4LmNoYXJ0T3B0aW9uc1V0aWxpdHkuYXBleFlGb3JtYXR0ZXJUeXBlcy5icHMuaWQpO1xuICAgICAgICBsZXQgZkJ5dGVzID0gbnRvcENoYXJ0QXBleC5jaGFydE9wdGlvbnNVdGlsaXR5LmdldEFwZXhZRm9ybWF0dGVyKG50b3BDaGFydEFwZXguY2hhcnRPcHRpb25zVXRpbGl0eS5hcGV4WUZvcm1hdHRlclR5cGVzLmJ5dGVzLmlkKTtcblx0ICAgIC8vIGNvbnNvbGUubG9nKFwicmVsb2FkZWQgdGFibGUgY2FsbGVkXCIpO1xuXHQgICAgLy9jb25zb2xlLmxvZyhPYmplY3Qua2V5cyh0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcykpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiT0JKRUNUIEtFWVNcIilcbiAgICAgICAgbGV0IHRvdGFsID0gdGhpcy5jaGFydF9vcHRpb25zLnN0YXRpc3RpY3MudG90YWw7XG4gICAgICAgIGxldCBtYXhfc2VudCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzBdLm1heF92YWw7XG4gICAgICAgIGxldCBtYXhfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdLm1heF92YWw7XG4gICAgICAgIGxldCBhdmdfc2VudCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzBdLmF2ZXJhZ2U7XG4gICAgICAgIGxldCBhdmdfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdLmF2ZXJhZ2U7XG4gICAgICAgIGxldCBwZXJjZW50aWxlX3NlbnQgPSB0aGlzLmNoYXJ0X29wdGlvbnMuc3RhdGlzdGljcy5ieV9zZXJpZVswXVtcIjk1dGhfcGVyY2VudGlsZVwiXTtcbiAgICAgICAgbGV0IHBlcmNlbnRpbGVfcmN2ZCA9IHRoaXMuY2hhcnRfb3B0aW9ucy5zdGF0aXN0aWNzLmJ5X3NlcmllWzFdW1wiOTV0aF9wZXJjZW50aWxlXCJdO1xuICAgICAgICB0aGlzLm1heF9zZW50ID0gZkJpdChtYXhfc2VudCo4KTtcbiAgICAgICAgdGhpcy5tYXhfcmN2ZCA9IGZCaXQobWF4X3JjdmQqOCk7XG4gICAgICAgIHRoaXMuYXZnX3NlbnQgPSBmQml0KGF2Z19zZW50KjgpO1xuICAgICAgICB0aGlzLmF2Z19yY3ZkID0gZkJpdChhdmdfcmN2ZCo4KTtcbiAgICAgICAgdGhpcy5wZXJjZW50aWxlX3NlbnQgPSBmQml0KHBlcmNlbnRpbGVfc2VudCo4KTtcbiAgICAgICAgdGhpcy5wZXJjZW50aWxlX3JjdmQgPSBmQml0KHBlcmNlbnRpbGVfcmN2ZCo4KTtcbiAgICAgICAgdGhpcy50b3RhbCA9IGZCeXRlcyh0b3RhbCk7XG5cblx0fSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiB2LWlmPVwibm9fZGF0YVwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIGlkPVwiZW1wdHktbWVzc2FnZVwiPnt7IF9pMThuKCdmbG93c19wYWdlLm5vX2RhdGEnKSB9fTwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyXCIgdi1iaW5kOmlkPVwiaWRcIj48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBzYW5rZXlVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL21hcC9zYW5rZXlfdXRpbHNcIlxuXG5jb25zdCBub19kYXRhID0gcmVmKGZhbHNlKVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlkOiBTdHJpbmcsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmw6IFN0cmluZyxcbiAgdXJsX3BhcmFtczogQXJyYXksXG4gIGV4dHJhX3NldHRpbmdzOiBPYmplY3QsXG59KVxuXG5mdW5jdGlvbiBTYW5rZXlDaGFydChkYXRhKSB7XG4gIC8qIEdldCBkZWZhdWx0IHNldHRpbmdzICovXG4gIGxldCBzZXR0aW5ncyA9IHtcbiAgICAuLi5zYW5rZXlVdGlscy5nZXREZWZhdWx0U2Fua2V5U2V0dGluZ3MoKSxcbiAgICAuLi5wcm9wcy5leHRyYV9zZXR0aW5nc1xuICB9XG5cbiAgLyogR2V0IHRoZSBsaW5rcyBhbmQgbm9kZXMgZm9ybWF0dGVkIGxpc3QgKi9cbiAgY29uc3QgbGlua19zb3VyY2UgPSBkM3Y3Lm1hcChkYXRhLCBzZXR0aW5ncy5saW5rU291cmNlKS5tYXAoaW50ZXJuKTtcbiAgY29uc3QgbGlua190YXJnZXQgPSBkM3Y3Lm1hcChkYXRhLCBzZXR0aW5ncy5saW5rVGFyZ2V0KS5tYXAoaW50ZXJuKTtcbiAgY29uc3QgbGlua19zb3VyY2Vfbm9kZSA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLmxpbmtTb3VyY2VOb2RlKS5tYXAoaW50ZXJuKTtcbiAgY29uc3QgbGlua190YXJnZXRfbm9kZSA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLmxpbmtUYXJnZXROb2RlKS5tYXAoaW50ZXJuKTtcbiAgY29uc3QgbGlua19saW5rID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MubGlua0xpbmspLm1hcChpbnRlcm4pO1xuICBjb25zdCBsaW5rX3ZhbHVlID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MubGlua1ZhbHVlKTtcbiAgY29uc3QgbGlua19jb2xvciA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLmxpbmtDb2xvcik7XG4gIGNvbnN0IHNvdXJjZV9jb2xvciA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLnNvdXJjZUNvbG9yKTtcbiAgY29uc3QgdGFyZ2V0X2NvbG9yID0gZDN2Ny5tYXAoZGF0YSwgc2V0dGluZ3MudGFyZ2V0Q29sb3IpO1xuICBjb25zdCBzb3VyY2VfbGluayA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLnNvdXJjZUxpbmspO1xuICBjb25zdCB0YXJnZXRfbGluayA9IGQzdjcubWFwKGRhdGEsIHNldHRpbmdzLnRhcmdldExpbmspO1xuXG4gIGxldCBsaW5rcyA9IGRhdGE7XG4gIGxldCBub2RlcyA9IEFycmF5LmZyb20oZDN2Ny51bmlvbihsaW5rX3NvdXJjZSwgbGlua190YXJnZXQpLCBpZCA9PiAoeyBpZCB9KSk7XG5cbiAgY29uc3Qgbm9kZV9pZF9saXN0ID0gZDN2Ny5tYXAobm9kZXMsIHNldHRpbmdzLm5vZGVJZCkubWFwKGludGVybik7XG4gIHNldHRpbmdzLm5vZGVHcm91cHMgPSBkM3Y3Lm1hcChub2Rlcywgc2V0dGluZ3Mubm9kZUdyb3VwKS5tYXAoaW50ZXJuKTtcblxuICBub2RlcyA9IGQzdjcubWFwKG5vZGVzLCAoXywgaSkgPT4gKHsgaWQ6IG5vZGVfaWRfbGlzdFtpXSB9KSk7XG4gIGxpbmtzID0gZDN2Ny5tYXAobGlua3MsIChfLCBpKSA9PiAoeyBcbiAgICBzb3VyY2U6IGxpbmtfc291cmNlW2ldLCBcbiAgICB0YXJnZXQ6IGxpbmtfdGFyZ2V0W2ldLCBcbiAgICB2YWx1ZTogbGlua192YWx1ZVtpXSAsXG4gICAgc291cmNlX25vZGU6IGxpbmtfc291cmNlX25vZGVbaV0sXG4gICAgdGFyZ2V0X25vZGU6IGxpbmtfdGFyZ2V0X25vZGVbaV0sXG4gICAgbGluazogbGlua19saW5rW2ldLFxuICAgIGNvbG9yOiBsaW5rX2NvbG9yW2ldLFxuICAgIHNvdXJjZV9jb2xvcjogc291cmNlX2NvbG9yW2ldLFxuICAgIHRhcmdldF9jb2xvcjogdGFyZ2V0X2NvbG9yW2ldLFxuICAgIHNvdXJjZV9saW5rOiBzb3VyY2VfbGlua1tpXSxcbiAgICB0YXJnZXRfbGluazogdGFyZ2V0X2xpbmtbaV0sXG4gIH0pKTtcblxuICAvKiBDb2xvcnMvTGFiZWwvVGl0bGVzIGFycmF5cyAqL1xuICBjb25zdCBjb2xvciA9IGQzdjcuc2NhbGVPcmRpbmFsKHNldHRpbmdzLm5vZGVHcm91cHMsIHNldHRpbmdzLmNvbG9ycyk7XG4gIGNvbnN0IG5vZGVfbGFiZWxfbGlzdCA9IGQzdjcubWFwKG5vZGVzLCBzZXR0aW5ncy5ub2RlTGFiZWwpO1xuICBjb25zdCBub2RlX3RpdGxlX2xpc3QgPSBkM3Y3Lm1hcChub2Rlcywgc2V0dGluZ3Mubm9kZVRpdGxlKTtcbiAgY29uc3QgbGlua190aXRsZV9saXN0ID0gZDN2Ny5tYXAobGlua3MsIHNldHRpbmdzLmxpbmtUaXRsZSk7XG5cbiAgLyogQ29tcHV0ZSB0aGUgU2Fua2V5IGxheW91dC4gKi9cbiAgbGV0IHNhbmtleSA9IGQzdjcuc2Fua2V5KClcbiAgICAubm9kZUlkKCh7aW5kZXg6IGl9KSA9PiBub2RlX2lkX2xpc3RbaV0pXG4gICAgLm5vZGVBbGlnbihzZXR0aW5ncy5ub2RlQWxpZ24pXG4gICAgLm5vZGVXaWR0aChzZXR0aW5ncy5ub2RlV2lkdGgpXG4gICAgLm5vZGVQYWRkaW5nKHNldHRpbmdzLm5vZGVQYWRkaW5nKVxuICAgIC5leHRlbnQoW1tzZXR0aW5ncy5tYXJnaW5MZWZ0LCBzZXR0aW5ncy5tYXJnaW5Ub3BdLCBbc2V0dGluZ3Mud2lkdGggLSBzZXR0aW5ncy5tYXJnaW5SaWdodCwgc2V0dGluZ3MuaGVpZ2h0IC0gc2V0dGluZ3MubWFyZ2luQm90dG9tXV0pXG4gICAgKHtub2RlcywgbGlua3N9KTtcblxuICBjb25zdCBzdmcgPSBkM3Y3LmNyZWF0ZShcInN2Z1wiKVxuICAgIC5hdHRyKFwidmlld0JveFwiLCBbMCwgMCwgc2V0dGluZ3Mud2lkdGgsIHNldHRpbmdzLmhlaWdodF0pXG4gICAgLmF0dHIoXCJzdHlsZVwiLCBcIm1heC13aWR0aDogMTAwJTsgaGVpZ2h0OiA2MHZoOyBoZWlnaHQ6IGludHJpbnNpYztcIik7XG5cbiAgbGV0IGRlbHRhWCwgZGVsdGFZO1xuICAgIFxuICBjb25zdCB3aWR0aCA9IHNldHRpbmdzLndpZHRoXG4gIGNvbnN0IGxpbmsgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIHNldHRpbmdzLmxpbmtTdHJva2VPcGFjaXR5KVxuICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgLmRhdGEobGlua3MpXG4gICAgLmpvaW4oXCJnXCIpXG4gICAgLnN0eWxlKFwibWl4LWJsZW5kLW1vZGVcIiwgc2V0dGluZ3MubGlua01peEJsZW5kTW9kZSlcbiAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgIC5hdHRyKFwiZFwiLCBzZXR0aW5ncy5saW5rUGF0aClcbiAgICAuYXR0cihcInN0cm9rZVwiLCAoeyBjb2xvciB9KSA9PiBjb2xvciApXG4gICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKHsgd2lkdGggfSkgPT4gTWF0aC5tYXgoMSwgd2lkdGgpKVxuICAgIC5jYWxsKGxpbmtfdGl0bGVfbGlzdCA/IHBhdGggPT4gcGF0aC5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KCh7aW5kZXg6IGl9KSA9PiBsaW5rX3RpdGxlX2xpc3RbaV0pIDogKCkgPT4ge30pO1xuXG5cbiAgY29uc3QgZHJhZyA9IGQzdjcuZHJhZygpXG4gICAgLm9uKFwic3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50LCBkKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBkM3Y3LnNlbGVjdCh0aGlzKTtcbiAgICAgICAgZGVsdGFYID0gY3VycmVudC5hdHRyKFwieFwiKSAtIGV2ZW50Lng7XG4gICAgICAgIGRlbHRhWSA9IGN1cnJlbnQuYXR0cihcInlcIikgLSBldmVudC55O1xuICAgIH0pXG4gICAgLm9uKFwiZHJhZ1wiLCBmdW5jdGlvbiAoZXZlbnQsIGQpIHtcbiAgICAgIGQzdjcuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZXZlbnQueCArIGRlbHRhWClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBldmVudC55ICsgZGVsdGFZKTtcblxuICAgICAgZGVidWdnZXI7XG4gICAgICBzYW5rZXkgPSBkM3Y3LnNhbmtleSgpLnVwZGF0ZShzYW5rZXkpXG4gICAgICAgIGxpbmsuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgICAgICAuZGF0YShzYW5rZXkubGlua3MsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQ7IH0pO1xuICAgIH0pO1xuICAgIFxuICBjb25zdCBub2RlID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInN0cm9rZVwiLCBzZXR0aW5ncy5ub2RlU3Ryb2tlKVxuICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIHNldHRpbmdzLm5vZGVTdHJva2VXaWR0aClcbiAgICAuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIHNldHRpbmdzLm5vZGVTdHJva2VPcGFjaXR5KVxuICAgIC5hdHRyKFwic3Ryb2tlLWxpbmVqb2luXCIsIHNldHRpbmdzLm5vZGVTdHJva2VMaW5lam9pbilcbiAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgIC5kYXRhKG5vZGVzKSAgICBcbiAgICAuam9pbihcInJlY3RcIilcbiAgICAuY2FsbChkcmFnKVxuXHQgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGRhdGEpIHsgXG4gICAgICBkYXRhID0gZGF0YS5jdXJyZW50VGFyZ2V0Ll9fZGF0YV9fXG4gICAgICBjb25zdCBzb3VyY2VMaW5rID0gZGF0YS5zb3VyY2VMaW5rcztcbiAgICAgIGNvbnN0IHRhcmdldExpbmsgPSBkYXRhLnRhcmdldExpbmtzO1xuICAgICAgY29uc3QgbGluayA9IChzb3VyY2VMaW5rICYmIHNvdXJjZUxpbmtbMF0pID8gc291cmNlTGlua1swXSA6IHRhcmdldExpbmtbMF07XG5cbiAgICAgIGlmKGxpbmspIHtcbiAgICAgICAgLyogR2V0IHRoZSBub2RlIGxpbmsgZnJvbSB0aGUgcmVzdCAqL1xuICAgICAgICBpZihsaW5rLnNvdXJjZS5pZCA9PT0gZGF0YS5pZCkge1xuICAgICAgICAgIGlmKGxpbmsuc291cmNlX2xpbmsgJiYgbGluay5zb3VyY2VfbGluayAhPT0gJycpXG4gICAgICAgICAgICB3aW5kb3cub3BlbihsaW5rLnNvdXJjZV9saW5rLCAnX2JsYW5rJyk7XG4gICAgICAgIH0gZWxzZSBpZihsaW5rLnRhcmdldC5pZCA9PT0gZGF0YS5pZCkge1xuICAgICAgICAgIGlmKGxpbmsudGFyZ2V0X2xpbmsgJiYgbGluay50YXJnZXRfbGluayAhPT0gJycpXG4gICAgICAgICAgICB3aW5kb3cub3BlbihsaW5rLnRhcmdldF9saW5rLCAnX2JsYW5rJyk7XG4gICAgICAgIH0gXG4gICAgICB9IFxuICAgIH0pXG4gICAgLyoub24oXCJkcmFnXCIsIHNhbmtleVV0aWxzLmRyYWdOb2RlRXZlbnQpICovXG4gICAgLmF0dHIoXCJ4XCIsIGQgPT4gZC54MClcbiAgICAuYXR0cihcInlcIiwgZCA9PiBkLnkwKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGQgPT4gZC55MSAtIGQueTApXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBkID0+IGQueDEgLSBkLngwKVxuICAgIC5hdHRyKFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCAoZGF0YSkgPT4geyBcbiAgICAgIGNvbnN0IHNvdXJjZUxpbmsgPSBkYXRhLnNvdXJjZUxpbmtzO1xuICAgICAgbGV0IG5vZGVfY29sb3IgPSBjb2xvcihzZXR0aW5ncy5ub2RlR3JvdXBzW2RhdGEuaW5kZXhdKSBcblxuICAgICAgaWYoc291cmNlTGluayAmJiBzb3VyY2VMaW5rWzBdKSB7XG4gICAgICAgIC8qIEdldCB0aGUgbm9kZSBjb2xvciBmcm9tIHRoZSByZXN0ICovXG4gICAgICAgIGlmKHNvdXJjZUxpbmtbMF0uc291cmNlLmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgICAgKHNvdXJjZUxpbmtbMF0uc291cmNlX2NvbG9yICYmIHNvdXJjZUxpbmtbMF0uc291cmNlX2NvbG9yICE9PSAnJykgPyBub2RlX2NvbG9yID0gc291cmNlTGlua1swXS5zb3VyY2VfY29sb3IgOiBub2RlX2NvbG9yID0gbm9kZV9jb2xvcjtcbiAgICAgICAgfSBlbHNlIGlmKHNvdXJjZUxpbmtbMF0udGFyZ2V0LmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgICAgKHNvdXJjZUxpbmtbMF0udGFyZ2V0X2NvbG9yICYmIHNvdXJjZUxpbmtbMF0udGFyZ2V0X2NvbG9yICE9PSAnJykgPyBub2RlX2NvbG9yID0gc291cmNlTGlua1swXS50YXJnZXRfY29sb3IgOiBub2RlX2NvbG9yID0gbm9kZV9jb2xvcjtcbiAgICAgICAgfVxuICAgICAgfSBcbiAgICAgIFxuICAgICAgcmV0dXJuIG5vZGVfY29sb3I7XG4gICAgfSlcbiAgICAuYXBwZW5kKFwidGl0bGVcIikudGV4dCgoe2luZGV4OiBpfSkgPT4gbm9kZV90aXRsZV9saXN0W2ldKVxuXG4gIHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgIC5kYXRhKG5vZGVzKVxuICAgIC5qb2luKFwidGV4dFwiKVxuICAgIC5hdHRyKFwieFwiLCBkID0+IGQueDAgPCB3aWR0aCAvIDIgPyBkLngxICsgc2V0dGluZ3Mubm9kZUxhYmVsUGFkZGluZyA6IGQueDAgLSBzZXR0aW5ncy5ub2RlTGFiZWxQYWRkaW5nKVxuICAgIC5hdHRyKFwieVwiLCBkID0+IChkLnkxICsgZC55MCkgLyAyKVxuICAgIC5hdHRyKFwiZHlcIiwgXCIwLjM1ZW1cIilcbiAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIGQgPT4gZC54MCA8IHNldHRpbmdzLndpZHRoIC8gMiA/IFwic3RhcnRcIiA6IFwiZW5kXCIpXG4gICAgLnRleHQoKHtpbmRleDogaX0pID0+IG5vZGVfbGFiZWxfbGlzdFtpXSk7XG5cbiAgZnVuY3Rpb24gaW50ZXJuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3ZnLm5vZGUoKSwge3NjYWxlczoge2NvbG9yfX0pO1xufVxuXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBmb3JtYXRfcmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcGFyYW1zID0ge31cbiAgcHJvcHMudXJsX3BhcmFtcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgcGFyYW1zW25hbWVdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkobmFtZSk7XG4gIH0pO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuYnVpbGRVUkwocHJvcHMudXJsLCBwYXJhbXMpOyBcbn1cblxuY29uc3QgdXBkYXRlRGF0YSA9IGFzeW5jIGZ1bmN0aW9uKGRhdGEpIHtcbiAgLyogU2hvdyB0aGUgbG9hZGluZyBvdmVybGF5ICovXG4gIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTsgIFxuXG4gIC8qIFVwZGF0ZSB0aGUgVVJMIHVzaW5nIHRoZSBwYXJhbXMgbmVlZGVkICovXG4gIGNvbnN0IHVybCA9IGZvcm1hdF9yZXF1ZXN0KClcbiAgLyogRG8gdGhlIHJlcXVlc3QgYW5kIHVwZGF0ZSB0aGUgc2Fua2V5ICovXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGNvbnN0IGRhdGEgPSByc3AucnNwO1xuICAgIGlmKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGNoYXJ0ID0gU2Fua2V5Q2hhcnQoZGF0YSlcbiAgICAgIG5vX2RhdGEudmFsdWUgPSBmYWxzZVxuICAgICAgJChgIyR7cHJvcHMuaWR9YCkuZW1wdHkoKTtcbiAgICAgICQoYCMke3Byb3BzLmlkfWApLmFwcGVuZChjaGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoYCMke3Byb3BzLmlkfWApLmVtcHR5KCk7XG4gICAgICBub19kYXRhLnZhbHVlID0gdHJ1ZVxuICAgIH0gIFxuICB9KTtcblxuICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG59O1xuXG5vbk1vdW50ZWQoKCkgPT4geyB9KVxuXG5kZWZpbmVFeHBvc2UoeyB1cGRhdGVEYXRhIH0pXG48L3NjcmlwdD5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmFkZF9leGNsdXNpb25cIikgfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+ICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdob3N0cydcIj4gPCEtLSBtb2RhbCBob3N0cyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cblx0ICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5tZW1iZXJfdHlwZVwiKSB9fTwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG5cdCAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG5cdCAgICA8bGFiZWwgOmNsYXNzPVwieydhY3RpdmUnOiBleGNsdWRlX3R5cGUgPT0gJ2lwJ31cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+XG5cdCAgICAgIDxpbnB1dCAgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwibWVtYmVyX3R5cGVcIiB2YWx1ZT1cImlwXCIgQGNsaWNrPVwic2V0X2V4Y2x1ZGVfdHlwZSgnaXAnKVwiPiB7eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5pcF9hZGRyZXNzXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGxhYmVsIDpjbGFzcz1cInsnYWN0aXZlJzogZXhjbHVkZV90eXBlID09ICduZXR3b3JrJ31cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+XG5cdCAgICAgIDxpbnB1dCBAY2xpY2s9XCJzZXRfZXhjbHVkZV90eXBlKCduZXR3b3JrJylcIiBjbGFzcz1cImJ0bi1jaGVja1wiICB0eXBlPVwicmFkaW9cIiBuYW1lPVwibWVtYmVyX3R5cGVcIiB2YWx1ZT1cIm5ldHdvcmtcIj4ge3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubmV0d29ya1wiKSB9fVxuXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cImhvc3QtYWxlcnQtZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICBcdCAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5ob3N0X2FsZXJ0X3R5cGVcIikgfX08L2I+XG4gICAgXHQgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJ2YWx1ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgYWxlcnQtc2VsZWN0XCIgdi1tb2RlbD1cImhvc3Rfc2VsZWN0ZWRcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm5vbmVcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5leGNsdWRlX2FsbF9hbGVydHNcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiBkaXNhYmxlZD57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5zcGFjaW5nX2JhclwiKSB9fTwvb3B0aW9uPlxuXHQgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGhvc3RfYWxlcnRfdHlwZXNcIj5cblx0XHQ8b3B0aW9uIHYtaWY9XCJpdGVtICE9IG51bGxcIiA6dmFsdWU9XCJpdGVtLmFsZXJ0X2lkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3M9XCJmbG93LWFsZXJ0LWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmZsb3dfYWxlcnRfdHlwZVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgPHNlbGVjdCBpZD1cImZsb3ctYWxlcnQtc2VsZWN0XCIgbmFtZT1cInZhbHVlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBhbGVydC1zZWxlY3RcIiB2LW1vZGVsPVwiZmxvd19zZWxlY3RlZFwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubm9uZVwiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2FsZXJ0c1wiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnNwYWNpbmdfYmFyXCIpIH19PC9vcHRpb24+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gZmxvd19hbGVydF90eXBlc1wiPlxuXHRcdDxvcHRpb24gIHYtaWY9XCJpdGVtICE9IG51bGxcIiA6dmFsdWU9XCJpdGVtLmFsZXJ0X2lkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgdi1pZj1cImV4Y2x1ZGVfdHlwZSA9PSAnaXAnXCIgY2xhc3M9XCJpcC1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5pcF9hZGRyZXNzXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuX2lwXCIgcGxhY2Vob2xkZXI9XCIxOTIuMTY4LjEuMVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF9pcFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgdi1pZj1cImV4Y2x1ZGVfdHlwZSA9PSAnbmV0d29yaydcIiBjbGFzcz1cIm5ldHdvcmstZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubmV0d29ya1wiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNCBwci0wXCI+XG4gICAgICAgICAgICA8aW5wdXQgcmVxdWlyZWQgc3R5bGU9XCJ3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7XCIgbmFtZT1cIm5ldHdvcmtcIiBjbGFzcz1cImZvcm0tY29udHJvbCBkLWlubGluZVwiIHBsYWNlaG9sZGVyPVwiMTcyLjE2LjAuMFwiIDpwYXR0ZXJuPVwicGF0dGVybl9pcFwiIHYtbW9kZWw9XCJpbnB1dF9uZXR3b3JrXCIvPlxuICAgIFx0ICA8L2Rpdj5cbiAgICBcdCAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHBzLTQgcGUtMFwiPlxuICAgIFx0ICAgIDxzcGFuIGNsYXNzPVwibWUtMlwiPi88L3NwYW4+XG4gICAgXHQgICAgPGlucHV0IHBsYWNlaG9sZGVyPScyNCcgcmVxdWlyZWQgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUgdy03NVwiIG1pbj1cIjFcIiBtYXg9XCIxMjdcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImNpZHJcIiB2LW1vZGVsPVwibmV0bWFza1wiPlxuICAgIFx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKCd2bGFuJykgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj1cIjBcIiBtaW49XCIwXCIgdHlwZT1cIm51bWJlclwiIHYtbW9kZWw9XCJpbnB1dF92bGFuXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+ICAgICAgXG4gICAgPC90ZW1wbGF0ZT4gPCEtLSBtZG9hbCBob3N0cyAtLT5cbiAgICBcbiAgICA8dGVtcGxhdGUgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSAhPSAnaG9zdHMnXCI+IDwhLS0gbW9kYWwgZG9tYWluX25hbWVzLS0+XG4gICAgICA8ZGl2PlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2RvbWFpbl9uYW1lcydcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5kb21haW5cIikgfX08L2I+XG4gICAgICAgICAgICA8YiB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICd0bHNfY2VydGlmaWNhdGUnXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24udGxzX2NlcnRpZmljYXRlXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8aW5wdXQgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnZG9tYWluX25hbWVzJ1wiIHBsYWNlaG9sZGVyPVwiXCIgOnBhdHRlcm49XCJwYXR0ZXJuX3RleHRcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpcF9hZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaW5wdXRfdGV4dFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJ1wiIHBsYWNlaG9sZGVyPVwiQ049ODEzODQ1NjU3MDAzMzM5ODM4LCBPPUNvZGU0MiwgT1U9VEVTVCwgU1Q9TU4sIEM9VVwiIDpwYXR0ZXJuPVwicGF0dGVybl9jZXJ0aWZpY2F0ZVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF90ZXh0XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICA8L3RlbXBsYXRlPiA8IS0tIG1vZGFsIGNvbW1lbnQtLT5cbiAgICA8aHIgY2xhc3M9XCJzZXBhcmF0b3IgbXQtNVwiID5cbiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7IF9pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKSB9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtMVwiPlxuICAgICAgICA8dGV4dGFyZWEgOnBsYWNlaG9sZGVyPWNvbW1lbnRfcGxhY2Vob2xkZXIgaWQ9XCJhbGVydC1sYWJlbFwiIG5hbWU9XCJsYWJlbFwiIHJvd3M9XCIzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjb21tZW50XCIgbWF4bGVuZ3RoPVwiNDUwXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBAY2xpY2s9XCJhZGRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBleGNsdWRlX3R5cGUgPSByZWYoXCJpcFwiKTtcbmNvbnN0IGlucHV0X2lwID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfbmV0d29yayA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3ZsYW4gPSByZWYoMCk7XG5jb25zdCBpbnB1dF90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3QgaG9zdF9zZWxlY3RlZCA9IHJlZihcIlwiKTtcbmNvbnN0IGZsb3dfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBuZXRtYXNrID0gcmVmKFwiXCIpO1xuY29uc3QgY29tbWVudCA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnRfcGxhY2Vob2xkZXIgPSBpMThuKFwiZGV0YWlscy5jb21tZW50X3BsYWNlaG9sZGVyXCIpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnXSlcbi8vcy5zcGxpdChcIixcIikuZXZlcnkoKGEpID0+IHtyZXR1cm4gLy4rPS4rLy50ZXN0KGEpfSlcbmZ1bmN0aW9uIGdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSkge1xuICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy5ub25fcXVvdGVkX3RleHQ7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaG9zdG5hbWVcIikge1xuXHRyZXR1cm4gYCR7TnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZH18W2EtekEtWjAtOS5fXFwtXXszLDI1MH1AWzAtOV17MCw1fSRgO1xuICAgIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0cmV0dXJuIE50b3BVdGlscy5SRUdFWEVTLnRsc19jZXJ0aWZpY2F0ZTtcbiAgICB9XG4gICAgcmV0dXJuIE50b3BVdGlscy5SRUdFWEVTW3ZhbHVlX3R5cGVdO1xufVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBhbGVydF9leGNsdXNpb25zX3BhZ2U6IFN0cmluZyxcbiAgICBob3N0X2FsZXJ0X3R5cGVzOiBBcnJheSxcbiAgICBmbG93X2FsZXJ0X3R5cGVzOiBBcnJheSwgICAgXG59KTtcblxubGV0IHBhdHRlcm5faXAgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiaXBcIik7XG5sZXQgcGF0dGVybl90ZXh0ID0gZ2V0X2RhdGFfcGF0dGVybihcInRleHRcIik7XG5sZXQgcGF0dGVybl9jZXJ0aWZpY2F0ZSA9IGdldF9kYXRhX3BhdHRlcm4oXCJjZXJ0aWZpY2F0ZVwiKTtcblxuY29uc3Qgc2V0X2V4Y2x1ZGVfdHlwZSA9ICh0eXBlKSA9PiB7XG4gICAgZXhjbHVkZV90eXBlLnZhbHVlID0gdHlwZTtcbn1cblxuY29uc3QgY2hlY2tfZGlzYWJsZV9hcHBseSA9ICgpID0+IHtcbiAgICBsZXQgcmVnZXggPSBudWxsO1xuICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gdHJ1ZTtcbiAgICBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdob3N0cycpIHtcblx0cmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5faXApO1xuXHRpZiAoZXhjbHVkZV90eXBlLnZhbHVlID09IFwiaXBcIikge1xuXHQgICAgZGlzYWJsZV9hcHBseSA9IChpbnB1dF9pcC52YWx1ZSA9PSBudWxsIHx8IGlucHV0X2lwLnZhbHVlID09IFwiXCIpIHx8IChyZWdleC50ZXN0KGlucHV0X2lwLnZhbHVlKSA9PSBmYWxzZSkgfHwgKGhvc3Rfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIiAmJiBmbG93X3NlbGVjdGVkLnZhbHVlID09IFwiXCIpO1xuXHR9IGVsc2Uge1xuXHQgICAgZGlzYWJsZV9hcHBseSA9IChpbnB1dF9uZXR3b3JrLnZhbHVlID09IG51bGwgfHwgaW5wdXRfbmV0d29yay52YWx1ZSA9PSBcIlwiKVxuXHRcdHx8IChyZWdleC50ZXN0KGlucHV0X25ldHdvcmsudmFsdWUpID09IGZhbHNlKVxuXHRcdHx8IChob3N0X3NlbGVjdGVkLnZhbHVlID09IFwiXCIgJiYgZmxvd19zZWxlY3RlZC52YWx1ZSA9PSBcIlwiKVxuXHRcdHx8IChuZXRtYXNrLnZhbHVlID09IG51bGwgfHwgbmV0bWFzay52YWx1ZSA9PSBcIlwiIHx8IHBhcnNlSW50KG5ldG1hc2sudmFsdWUpIDwgMSB8fCBwYXJzZUludChuZXRtYXNrLnZhbHVlKSA+IDEyNyk7XG5cdH1cbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnZG9tYWluX25hbWVzJykge1xuXHRyZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybl90ZXh0KTtcblx0ZGlzYWJsZV9hcHBseSA9IChpbnB1dF90ZXh0LnZhbHVlID09IG51bGwgfHwgaW5wdXRfdGV4dC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF90ZXh0LnZhbHVlKSA9PSBmYWxzZSk7XG5cdFxuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICd0bHNfY2VydGlmaWNhdGUnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2NlcnRpZmljYXRlKTtcblx0ZGlzYWJsZV9hcHBseSA9IChpbnB1dF90ZXh0LnZhbHVlID09IG51bGwgfHwgaW5wdXRfdGV4dC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF90ZXh0LnZhbHVlKSA9PSBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xufTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgZXhjbHVkZV90eXBlLnZhbHVlID0gXCJpcFwiO1xuICAgIGlucHV0X2lwLnZhbHVlID0gXCJcIjtcbiAgICBpbnB1dF9uZXR3b3JrLnZhbHVlID0gXCJcIjtcbiAgICBpbnB1dF92bGFuLnZhbHVlID0gMDtcbiAgICBob3N0X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcbiAgICBmbG93X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcbiAgICBuZXRtYXNrLnZhbHVlID0gXCJcIjtcbiAgICBpbnB1dF90ZXh0LnZhbHVlID0gXCJcIjtcbiAgICBjb21tZW50LnZhbHVlID0gXCJcIjtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgYWRkID0gKCkgPT4ge1xuICAgIGxldCBwYXJhbXM7XG4gICAgbGV0IGFsZXJ0X2FkZHIgPSBpbnB1dF9pcC52YWx1ZTtcbiAgICBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09IFwiaG9zdHNcIikge1xuXHRpZiAoZXhjbHVkZV90eXBlLnZhbHVlID09IFwibmV0d29ya1wiKSB7XG5cdCAgICBhbGVydF9hZGRyID0gYCR7aW5wdXRfbmV0d29yay52YWx1ZX0vJHtuZXRtYXNrLnZhbHVlfWA7XG5cdH1cbiAgICAgICAgaWYgKGlucHV0X3ZsYW4udmFsdWUgIT0gbnVsbCAmJiBpbnB1dF92bGFuLnZhbHVlICE9IDApIHtcblx0ICAgIGFsZXJ0X2FkZHIgPSBgJHthbGVydF9hZGRyfUAke2lucHV0X3ZsYW4udmFsdWV9YDtcbiAgICAgICAgfVxuXHRwYXJhbXMgPSB7IGFsZXJ0X2FkZHIsIGhvc3RfYWxlcnRfa2V5OiBob3N0X3NlbGVjdGVkLnZhbHVlLCBmbG93X2FsZXJ0X2tleTogZmxvd19zZWxlY3RlZC52YWx1ZSB9O1xuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09IFwiZG9tYWluX25hbWVzXCIpIHtcblx0cGFyYW1zID0geyBhbGVydF9kb21haW46IGlucHV0X3RleHQudmFsdWUgfTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcInRsc19jZXJ0aWZpY2F0ZVwiKSB7XG5cdHBhcmFtcyA9IHsgYWxlcnRfY2VydGlmaWNhdGU6IGlucHV0X3RleHQudmFsdWUgfTtcbiAgICB9XG4gICAgcGFyYW1zLmxhYmVsID0gY29tbWVudC52YWx1ZTtcbiAgICBlbWl0KCdhZGQnLCBwYXJhbXMpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59ICBcbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgX2kxOG4oJ2V4Y2x1ZGVfY2hlY2snKSB9fTogPHNwYW4gdi1odG1sPVwiYWxlcnRfbmFtZVwiPjwvc3Bhbj48L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBcIj5cbiAgICAgIDxkaXY+XG5cdDxsYWJlbD57eyBfaTE4bignZXhjbHVkZV9jaGVjaycpIH19IFwiPGIgdi1odG1sPVwiYWxlcnRfbmFtZVwiPjwvYj5cIi4gPHNwYW4gY2xhc3M9XCJhbGVydF9sYWJlbFwiPnt7IF9pMThuKCdleGNsdWRlX2ZvcicpIH19Ojwvc3Bhbj4gPC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJhbnlcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICA8c3Bhbj4ge3sgX2kxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcl9kaXNhYmxlX2NoZWNrJykgfX0gPC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG5cdDwvZGl2PlxuXHQ8dGVtcGxhdGUgdi1pZj1cInBhZ2UgPT0gJ2hvc3QnXCI+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImhvc3RcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgICAgPHNwYW4+e3sgaG9zdF9hZGRyLmxhYmVsIH19PC9zcGFuPlxuICAgICAgXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cdFxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1pZj1cInBhZ2UgPT0gJ2Zsb3cnXCI+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImNsaWVudF9ob3N0XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICAgIDxzcGFuPnt7IF9pMThuKCdjbGllbnQnKSB9fToge3tmbG93X2FkZHIuY2xpX2xhYmVsfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJzZXJ2ZXJfaG9zdFwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgICA8c3Bhbj57eyBfaTE4bignc2VydmVyJykgfX06IHt7IGZsb3dfYWRkci5zcnZfbGFiZWwgfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQ8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtaWY9XCJkb21haW4gIT0gbnVsbCB8fCB0bHNfY2VydGlmaWNhdGUgIT0gbnVsbFwiIGNsYXNzPVwiZXhjbHVkZS1kb21haW4tY2VydGlmaWNhdGVcIj5cblx0PGxhYmVsPjxzcGFuIGNsYXNzPVwiYWxlcnRfbGFiZWxcIj57eyBfaTE4bignY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2NoZWNrc19mb3InKSB9fTo8L3NwYW4+IDwvbGFiZWw+XHRcblx0PGRpdiB2LWlmPVwiZG9tYWluICE9IG51bGxcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJkb21haW5cIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIHdoaXRlc3BhY2VcIj5cbiAgICAgIFx0ICAgIDxzcGFuPnt7X2kxOG4oXCJjaGVja19leGNsdXNpb24uZG9tYWluXCIpfX06PC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG4gICAgICBcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOnBhdHRlcm49XCJwYXR0ZXJuX2RvbWFpblwiIDpkaXNhYmxlZD1cInJhZGlvX3NlbGVjdGVkICE9ICdkb21haW4nXCIgcmVxdWlyZWQgdi1tb2RlbD1cImRvbWFpblwiIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBjdXN0b20td2lkdGhcIj5cblx0PC9kaXY+XG5cdDxkaXYgdi1pZj1cInRsc19jZXJ0aWZpY2F0ZSAhPSBudWxsXCIgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiY2VydGlmaWNhdGVcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIHdoaXRlc3BhY2VcIj5cbiAgICAgIFx0ICAgIDxzcGFuPnt7X2kxOG4oXCJjaGVja19leGNsdXNpb24udGxzX2NlcnRpZmljYXRlXCIpfX06PC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG4gICAgICBcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOmRpc2FibGVkPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2NlcnRpZmljYXRlJ1wiIHYtbW9kZWw9XCJ0bHNfY2VydGlmaWNhdGVcIiA6cGF0dGVybj1cInBhdHRlcm5fY2VydGlmaWNhdGVcIiByZXF1aXJlZCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY3VzdG9tLXdpZHRoXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWlmPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2FueSdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7IF9pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKSB9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtMVwiPlxuICAgICAgICA8dGV4dGFyZWEgOnBsYWNlaG9sZGVyPWNvbW1lbnRfcGxhY2Vob2xkZXIgaWQ9XCJhbGVydC1sYWJlbFwiIG5hbWU9XCJsYWJlbFwiIHJvd3M9XCIzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjb21tZW50XCIgbWF4bGVuZ3RoPVwiNDUwXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICAgPGhyIHYtc2hvdz1cImRpc2FibGVfYWxlcnRzXCIgY2xhc3M9XCJzZXBhcmF0b3JcIiA+XG5cbiAgICA8dGVtcGxhdGUgdi1pZj1cInJhZGlvX3NlbGVjdGVkICE9ICdkb21haW4nICYmIHJhZGlvX3NlbGVjdGVkICE9ICdjZXJ0aWZpY2F0ZSdcIj5cblxuICAgICAgPGRpdiB2LXNob3c9XCJkaXNhYmxlX2FsZXJ0c1wiIGNsYXNzPVwibWVzc2FnZSBhbGVydCBhbGVydC1kYW5nZXJcIj5cblx0e3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2RlbGV0ZV9maWx0ZXJlZF9hbGVydHNcIikgfX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyIGNsYXNzPVwic2VwYXJhdG9yXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIFwiPlxuXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxuXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2VcIiAgdi1tb2RlbD1cImRpc2FibGVfYWxlcnRzXCI+XG5cdCAgXG5cdCAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIj57e19pMThuKFwiZGVsZXRlX2Rpc2FibGVkX2FsZXJ0c1wiKX19PC9sYWJlbD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxkaXYgIGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZyBib3JkZXJcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgIHt7X2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2ZpbHRlcl9hbGVydFwiKX19XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZXhjbHVkZVwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIGNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nXCI+e3tfaTE4bihcImZpbHRlclwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgcmFkaW9fc2VsZWN0ZWQgPSByZWYoXCJhbnlcIik7XG5jb25zdCBkaXNhYmxlX2FsZXJ0cyA9IHJlZih0cnVlKTtcbmNvbnN0IGRvbWFpbiA9IHJlZihudWxsKTtcbmNvbnN0IHRsc19jZXJ0aWZpY2F0ZSA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnQgPSByZWYobnVsbCk7XG5jb25zdCBjb21tZW50X3BsYWNlaG9sZGVyID0gaTE4bihcImRldGFpbHMuY29tbWVudF9wbGFjZWhvbGRlclwiKTtcblxuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydleGNsdWRlJ10pXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBhbGVydDogT2JqZWN0LFxuICAgIHBhZ2U6IFN0cmluZyxcbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5hbGVydCwgKGN1cnJlbnRfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGlmIChjdXJyZW50X3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgcmFkaW9fc2VsZWN0ZWQudmFsdWUgPSBcImFueVwiO1xuICAgIGRpc2FibGVfYWxlcnRzLnZhbHVlID0gdHJ1ZTtcbiAgICBkb21haW4udmFsdWUgPSBjdXJyZW50X3ZhbHVlLmluZm8/LnZhbHVlID09IFwiXCIgPyBudWxsIDogY3VycmVudF92YWx1ZS5pbmZvPy52YWx1ZTtcbiAgICB0bHNfY2VydGlmaWNhdGUudmFsdWUgPSBjdXJyZW50X3ZhbHVlLmluZm8/Lmlzc3VlcmRuID09IFwiXCIgPyBudWxsIDogY3VycmVudF92YWx1ZS5pbmZvPy5pc3N1ZXJkbjtcbn0pO1xuLy8gY29uc3QgY2xpY2tfZGVsZXRlX2Rpc2FibGVfYWxlcnRzID0gKCkgPT4ge1xuLy8gfTtcblxuY29uc3QgY2hlY2tfZGlzYWJsZV9hcHBseSA9ICgpID0+IHtcbiAgICBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJkb21haW5cIikge1xuXHRsZXQgcmVnZXhfZG9tYWluID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2RvbWFpbik7XG5cdHJldHVybiBkb21haW4udmFsdWUgPT0gbnVsbCB8fCByZWdleF9kb21haW4udGVzdChkb21haW4udmFsdWUpID09IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdGxldCByZWdleF9jZXJ0aWZpY2F0ZSA9IG5ldyBSZWdFeHAocGF0dGVybl9jZXJ0aWZpY2F0ZSk7XG5cdHJldHVybiB0bHNfY2VydGlmaWNhdGUudmFsdWUgPT0gbnVsbCB8fCByZWdleF9jZXJ0aWZpY2F0ZS50ZXN0KHRsc19jZXJ0aWZpY2F0ZS52YWx1ZSkgPT0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuY29uc3QgYWxlcnRfbmFtZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmFsZXJ0Py5hbGVydF9uYW1lKTtcblxuY29uc3QgaG9zdF9hZGRyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZXMgPSB7IHZhbHVlOiBcIlwiLCBsYWJlbDogXCJcIiB9O1xuICAgIGlmIChwcm9wcy5wYWdlICE9IFwiaG9zdFwiIHx8IHByb3BzLmFsZXJ0ID09IG51bGwpIHsgcmV0dXJuIHJlczsgfVxuICAgIGxldCBhbGVydCA9IHByb3BzLmFsZXJ0O1xuICAgIHJlcy52YWx1ZSA9IGFsZXJ0LmlwLnZhbHVlO1xuICAgIGlmIChhbGVydC52bGFuICE9IG51bGwgJiYgYWxlcnQudmxhbi52YWx1ZSAhPSBudWxsICYmIGFsZXJ0LnZsYW4udmFsdWUgIT0gMCkge1xuXHRyZXMudmFsdWUgPSByZXMudmFsdWUgKyAnQCcgKyBhbGVydC52bGFuLnZhbHVlO1xuICAgIH1cbiAgICByZXMubGFiZWwgPSAoYWxlcnQuaXAubGFiZWwpID8gYCR7YWxlcnQuaXAubGFiZWx9ICgke2FsZXJ0LmlwLnZhbHVlfSlgIDogYWxlcnQuaXAudmFsdWU7XG4gICAgcmV0dXJuIHJlcztcbn0pO1xuXG5jb25zdCBmbG93X2FkZHIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJlcyA9IHsgY2xpX3ZhbHVlOiBcIlwiLCBjbGlfbGFiZWw6IFwiXCIsIHNydl92YWx1ZTogXCJcIiwgc3J2X2xhYmVsOiBcIlwiIH07XG4gICAgaWYgKHByb3BzLnBhZ2UgIT0gXCJmbG93XCIgfHwgcHJvcHMuYWxlcnQgPT0gbnVsbCkgeyByZXR1cm4gcmVzOyB9XG4gICAgbGV0IGFsZXJ0ID0gcHJvcHMuYWxlcnQ7XG4gICAgcmVzLmNsaV92YWx1ZSA9IGFsZXJ0LmZsb3cuY2xpX2lwLnZhbHVlO1xuICAgIHJlcy5zcnZfdmFsdWUgPSBhbGVydC5mbG93LnNydl9pcC52YWx1ZTtcbiAgICBsZXQgY2xpX2xhYmVsID0gYCR7YWxlcnQuZmxvdy5jbGlfaXAubGFiZWwgfHwgYWxlcnQuZmxvdy5jbGlfaXAudmFsdWV9YFxuICAgIGxldCBzcnZfbGFiZWwgPSBgJHthbGVydC5mbG93LnNydl9pcC5sYWJlbCB8fCBhbGVydC5mbG93LnNydl9pcC52YWx1ZX1gXG5cbiAgICBpZihhbGVydC5mbG93LnZsYW4gIT0gbnVsbCAmJiBhbGVydC5mbG93LnZsYW4udmFsdWUgIT0gbnVsbCAmJiBhbGVydC5mbG93LnZsYW4udmFsdWUgIT0gMCkge1xuICAgICAgY2xpX2xhYmVsID0gYCR7Y2xpX2xhYmVsfUAke2FsZXJ0LmZsb3cudmxhbi5sYWJlbH1gXG4gICAgICBzcnZfbGFiZWwgPSBgJHtzcnZfbGFiZWx9QCR7YWxlcnQuZmxvdy52bGFuLmxhYmVsfWBcbiAgICAgIHJlcy5jbGlfdmFsdWUgPSByZXMuY2xpX3ZhbHVlICsgJ0AnICsgYWxlcnQuZmxvdy52bGFuLnZhbHVlXG4gICAgICByZXMuc3J2X3ZhbHVlID0gcmVzLnNydl92YWx1ZSArICdAJyArIGFsZXJ0LmZsb3cudmxhbi52YWx1ZVxuICAgIH1cblxuICAgIGlmKGNsaV9sYWJlbCAhPT0gcmVzLmNsaV92YWx1ZSkge1xuICAgICAgY2xpX2xhYmVsID0gYCR7Y2xpX2xhYmVsfSAoJHtyZXMuY2xpX3ZhbHVlfSlgXG4gICAgfVxuICAgIGlmKHNydl9sYWJlbCAhPT0gcmVzLnNydl92YWx1ZSkge1xuICAgICAgc3J2X2xhYmVsID0gYCR7c3J2X2xhYmVsfSAoJHtyZXMuc3J2X3ZhbHVlfSlgXG4gICAgfVxuICAgIFxuICAgIHJlcy5jbGlfbGFiZWwgPSBjbGlfbGFiZWxcbiAgICByZXMuc3J2X2xhYmVsID0gc3J2X2xhYmVsXG4gICAgcmV0dXJuIHJlcztcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGNvbW1lbnQudmFsdWUgPSBcIlwiO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGdldF90eXBlKCkge1xuICAgIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImRvbWFpblwiIHx8IHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRyZXR1cm4gcmFkaW9fc2VsZWN0ZWQudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBcImhvc3RcIjtcbn1cblxubGV0IHBhdHRlcm5fZG9tYWluID0gTnRvcFV0aWxzLlJFR0VYRVMuZG9tYWluX25hbWVfbm90X3N0cmljdDtcbmxldCBwYXR0ZXJuX2NlcnRpZmljYXRlID0gTnRvcFV0aWxzLlJFR0VYRVMudGxzX2NlcnRpZmljYXRlO1xuXG5jb25zdCBleGNsdWRlID0gKCkgPT4ge1xuICAgIGxldCBwYWdlID0gcHJvcHMucGFnZTtcbiAgICBsZXQgdHlwZSA9IGdldF90eXBlKCk7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICBcdGRlbGV0ZV9hbGVydHM6IGRpc2FibGVfYWxlcnRzLnZhbHVlLFxuICAgICAgbGFiZWw6IGNvbW1lbnQudmFsdWUsXG5cblx0dHlwZSxcdFxuICAgIH07XG4gICAgbGV0IGFkZHIgPSBudWxsO1xuICAgIGlmICh0eXBlID09IFwiaG9zdFwiKSB7XHRcblx0aWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdCAgICBhZGRyID0gaG9zdF9hZGRyLnZhbHVlLnZhbHVlO1xuXHR9IGVsc2UgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwic2VydmVyX2hvc3RcIikge1xuXHQgICAgYWRkciA9IGZsb3dfYWRkci52YWx1ZS5zcnZfdmFsdWU7XG5cdH0gZWxzZSBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjbGllbnRfaG9zdFwiKSB7XG5cdCAgICBhZGRyID0gZmxvd19hZGRyLnZhbHVlLmNsaV92YWx1ZTtcblx0fVxuXHRwYXJhbXMuYWxlcnRfYWRkciA9IGFkZHI7XG5cdGlmIChwYWdlID09IFwiZmxvd1wiKSB7XG5cdCAgICBwYXJhbXMuZmxvd19hbGVydF9rZXkgPSBwcm9wcy5hbGVydC5hbGVydF9pZC52YWx1ZTtcblx0fSBlbHNlIGlmIChwYWdlID09IFwiaG9zdFwiKSB7XG5cdCAgICBwYXJhbXMuaG9zdF9hbGVydF9rZXkgPSBwcm9wcy5hbGVydC5hbGVydF9pZC52YWx1ZTtcblx0fVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImRvbWFpblwiKSB7XG5cdHBhcmFtcy5kZWxldGVfYWxlcnRzID0gZmFsc2U7XG5cdHBhcmFtcy5hbGVydF9kb21haW4gPSBkb21haW4udmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRwYXJhbXMuZGVsZXRlX2FsZXJ0cyA9IGZhbHNlO1xuXHRwYXJhbXMuYWxlcnRfY2VydGlmaWNhdGUgPSB0bHNfY2VydGlmaWNhdGUudmFsdWU7XG4gICAgfVxuICAgIGNsb3NlKCk7XG4gICAgZW1pdCgnZXhjbHVkZScsIHBhcmFtcyk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi53aGl0ZXNwYWNlIHtcbiAgbWFyZ2luLXJpZ2h0OiAwLjJyZW07XG59XG4uY3VzdG9tLXdpZHRoIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4uZXhjbHVkZS1kb21haW4tY2VydGlmaWNhdGUge1xuICBtYXJnaW4tdG9wOiAwLjRyZW07XG59XG48L3N0eWxlPlxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbmltcG9ydCAqIGFzIFZ1ZSBmcm9tIFwidnVlXCI7XG4vLyB3aW5kb3cuVnVlID0gVnVlO1xuXG4vLyBwYWdlc1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU3RhdHMgfSBmcm9tIFwiLi9wYWdlLXN0YXRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VNYXAgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VEZXZpY2VFeGNsdXNpb25zIH0gZnJvbSBcIi4vcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RUTFMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtdGxzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFNTSCB9IGZyb20gXCIuL3BhZ2UtaG9zdC1zc2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb21lTWFwIH0gZnJvbSBcIi4vcGFnZS1ob21lLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNhbmtleSB9IGZyb20gXCIuL3BhZ2Utc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1hcHBsaWNhdGlvbnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc1RyYWZmaWMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy10cmFmZmljLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNQYWNrZXRzIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtcGFja2V0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleSB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLWZsb3ctc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFJ1bGVzIH0gZnJvbSBcIi4vcGFnZS1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNQb3J0cyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLXBvcnRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQWxlcnRBbmFseXNpcyB9IGZyb20gXCIuL3BhZ2UtYWxlcnQtYW5hbHlzaXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0TWFwIH0gZnJvbSBcIi4vcGFnZS1ob3N0LW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVZMQU5Qb3J0c1NhbmtleSB9IGZyb20gXCIuL3BhZ2Utdmxhbi1wb3J0cy1zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzIH0gZnJvbSBcIi4vcGFnZS1hZ2dyZWdhdGVkLWxpdmUtZmxvd3MudnVlXCI7XG5cbi8vIGNvbXBvbmVudHNcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRhLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFJhbmdlUGlja2VyIH0gZnJvbSBcIi4vcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTaW1wbGVUYWJsZSB9IGZyb20gXCIuL3NpbXBsZS10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcblxuLy8gbGlzdFxuaW1wb3J0IHsgZGVmYXVsdCBhcyBMaXN0VGltZXNlcmllcyB9IGZyb20gXCIuL2xpc3QtdGltZXNlcmllcy52dWVcIjtcblxuLy8gbW9kYWxzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZENoZWNrRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWNoZWNrLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGREZXZpY2VFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFsZXJ0c0ZpbHRlciB9IGZyb20gXCIuL21vZGFsLWFsZXJ0cy1maWx0ZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRmlsdGVycyB9IGZyb20gXCIuL21vZGFsLWZpbHRlcnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVGltZXNlcmllcyB9IGZyb20gXCIuL21vZGFsLXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gfSBmcm9tIFwiLi9tb2RhbC10cmFmZmljLWV4dHJhY3Rpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsU25hcHNob3QgfSBmcm9tIFwiLi9tb2RhbC1zbmFwc2hvdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRIb3N0UnVsZXMgfSBmcm9tIFwiLi9tb2RhbC1hZGQtaG9zdC1ydWxlcy52dWVcIjtcblxubGV0IG50b3BWdWUgPSB7XG4gICAgLy8gcGFnZXNcbiAgICBQYWdlU3RhdHM6IFBhZ2VTdGF0cyxcbiAgICBQYWdlQXNzZXRUYWJsZTogUGFnZUFzc2V0VGFibGUsXG4gICAgUGFnZVBlcmlvZGljaXR5VGFibGU6IFBhZ2VQZXJpb2RpY2l0eVRhYmxlLFxuICAgIFBhZ2VTZXJ2aWNlVGFibGU6IFBhZ2VTZXJ2aWNlVGFibGUsXG4gICAgUGFnZVNlcnZpY2VNYXA6IFBhZ2VTZXJ2aWNlTWFwLFxuICAgIFBhZ2VQZXJpb2RpY2l0eU1hcDogUGFnZVBlcmlvZGljaXR5TWFwLFxuICAgIFBhZ2VBc3NldE1hcDogUGFnZUFzc2V0TWFwLFxuICAgIFBhZ2VEZXZpY2VFeGNsdXNpb25zOiBQYWdlRGV2aWNlRXhjbHVzaW9ucyxcbiAgICBQYWdlSG9zdFRMUzogUGFnZUhvc3RUTFMsXG4gICAgUGFnZUhvc3RTU0g6IFBhZ2VIb3N0U1NILFxuICAgIFBhZ2VIb21lTWFwOiBQYWdlSG9tZU1hcCxcbiAgICBQYWdlU2Fua2V5OiBQYWdlU2Fua2V5LFxuICAgIFBhZ2VIb3N0UnVsZXM6IFBhZ2VIb3N0UnVsZXMsXG4gICAgUGFnZUFsZXJ0QW5hbHlzaXM6IFBhZ2VBbGVydEFuYWx5c2lzLFxuICAgIFBhZ2VIb3N0TWFwOiBQYWdlSG9zdE1hcCxcblxuICAgIFBhZ2VWTEFOUG9ydHNGbG93U2Fua2V5OlBhZ2VWTEFOUG9ydHNTYW5rZXksXG5cbiAgICAvLyBIb3N0IGRldGFpbHMgcGFnZXNcbiAgICBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnM6IFBhZ2VIb3N0RGV0YWlsc0FwcGxpY2F0aW9ucyxcbiAgICBQYWdlSG9zdERldGFpbHNUcmFmZmljOiBQYWdlSG9zdERldGFpbHNUcmFmZmljLFxuICAgIFBhZ2VIb3N0RGV0YWlsc1BhY2tldHM6IFBhZ2VIb3N0RGV0YWlsc1BhY2tldHMsXG4gICAgUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleTogUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleSxcbiAgICBQYWdlSG9zdERldGFpbHNQb3J0czogUGFnZUhvc3REZXRhaWxzUG9ydHMsXG5cbiAgICBQYWdlQWdncmVnYXRlZExpdmVGbG93czogUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3MsXG5cbiAgICAvLyBjb21wb25lbnRzXG4gICAgQWxlcnRJbmZvOiBBbGVydEluZm8sXG4gICAgQ2hhcnQ6IENoYXJ0LFxuICAgIERhdGF0YWJsZTogRGF0YXRhYmxlLFxuICAgIERhdGVUaW1lUmFuZ2VQaWNrZXI6IERhdGVUaW1lUmFuZ2VQaWNrZXIsXG4gICAgTmV0d29ya01hcDogTmV0d29ya01hcCxcbiAgICBSYW5nZVBpY2tlcjogUmFuZ2VQaWNrZXIsXG4gICAgUGFnZU5hdmJhcjogUGFnZU5hdmJhcixcbiAgICBTaW1wbGVUYWJsZTogU2ltcGxlVGFibGUsXG4gICAgU2VsZWN0U2VhcmNoOiBTZWxlY3RTZWFyY2gsXG4gICAgVGFiTGlzdDogVGFiTGlzdCxcbiAgICBTYW5rZXk6IFNhbmtleSxcbiAgICBOb3RlTGlzdDogTm90ZUxpc3QsXG4gICAgTG9hZGluZzogTG9hZGluZyxcbiAgICBcbiAgICAvLyBsaXN0XG4gICAgTGlzdFRpbWVzZXJpZXM6IExpc3RUaW1lc2VyaWVzLFxuXG4gICAgLy8gbW9kYWxzXG4gICAgTW9kYWw6IE1vZGFsLFxuICAgIE1vZGFsQWRkQ2hlY2tFeGNsdXNpb246IE1vZGFsQWRkQ2hlY2tFeGNsdXNpb24sXG4gICAgTW9kYWxBbGVydHNGaWx0ZXI6IE1vZGFsQWxlcnRzRmlsdGVyLFxuICAgIE1vZGFsRmlsdGVyczogTW9kYWxGaWx0ZXJzLFxuICAgIE1vZGFsVGltZXNlcmllczogTW9kYWxUaW1lc2VyaWVzLFxuICAgIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb246IE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24sXG4gICAgTW9kYWxEZWxldGVDb25maXJtOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgTW9kYWxTbmFwc2hvdDogTW9kYWxTbmFwc2hvdCxcbiAgICBNb2RhbEFkZERldmljZUV4Y2x1c2lvbjogTW9kYWxBZGREZXZpY2VFeGNsdXNpb24sXG4gICAgTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uOiBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24sXG4gICAgTW9kYWxBZGRIb3N0UnVsZXM6IE1vZGFsQWRkSG9zdFJ1bGVzLFxuXG4gICAgVnVlOiBWdWUsXG59O1xud2luZG93Lm50b3BWdWUgPSBudG9wVnVlO1xuIiwidmFyIF8weDRhZTU9W1wiXFx4NjhcXHg3NFxceDZEXFx4NkNcIixcIlxceDYzXFx4NkNcXHg2RlxceDZFXFx4NjVcIixcIlxceDYxXFx4NzBcXHg3MFxceDY1XFx4NkVcXHg2NFwiLFwiXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDJGXFx4M0VcIixcIlxceDNDXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDY4XFx4NzJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NkNcXHg2NVxceDY2XFx4NzRcXHgzQVxceDIwXFx4NjFcXHg3NVxceDc0XFx4NkZcXHgzQlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg2MVxceDc1XFx4NzRcXHg2RlxceDNCXFx4NzBcXHg2MVxceDY0XFx4NjRcXHg2OVxceDZFXFx4NjdcXHgyRFxceDZDXFx4NjVcXHg2NlxceDc0XFx4M0FcXHgyMFxceDc2XFx4NjFcXHg3MlxceDI4XFx4MkRcXHgyRFxceDYyXFx4NzNcXHgyRFxceDY3XFx4NzVcXHg3NFxceDc0XFx4NjVcXHg3MlxceDJEXFx4NzhcXHgyQ1xceDJFXFx4MzdcXHgzNVxceDcyXFx4NjVcXHg2RFxceDI5XFx4M0JcXHg3MFxceDYxXFx4NjRcXHg2NFxceDY5XFx4NkVcXHg2N1xceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg3NlxceDYxXFx4NzJcXHgyOFxceDJEXFx4MkRcXHg2MlxceDczXFx4MkRcXHg2N1xceDc1XFx4NzRcXHg3NFxceDY1XFx4NzJcXHgyRFxceDc4XFx4MkNcXHgyRVxceDM3XFx4MzVcXHg3MlxceDY1XFx4NkRcXHgyOVxceDNCXFx4NzdcXHg2OVxceDY0XFx4NzRcXHg2OFxceDNBXFx4MjBcXHgzMVxceDMwXFx4MzBcXHgyNVxceDNCXFx4MjJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDcyXFx4NkZcXHg3N1xceDIwXFx4NkRcXHg3NFxceDJEXFx4MzJcXHgyMlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjNcXHg2RlxceDZDXFx4MkRcXHgzMVxceDMyXFx4MjBcXHg2M1xceDZGXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDM0XFx4MjBcXHg3MFxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzMFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDczXFx4NzRcXHg2MVxceDcyXFx4NzRcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2MVxceDIwXFx4NjhcXHg3MlxceDY1XFx4NjZcXHgzRFxceDIyXFx4NjhcXHg3NFxceDc0XFx4NzBcXHg3M1xceDNBXFx4MkZcXHgyRlxceDc3XFx4NzdcXHg3N1xceDJFXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRVxceDZGXFx4NzJcXHg2N1xceDJGXFx4NzBcXHg3MlxceDZGXFx4NjRcXHg3NVxceDYzXFx4NzRcXHg3M1xceDJGXFx4NzRcXHg3MlxceDYxXFx4NjZcXHg2NlxceDY5XFx4NjNcXHgyRFxceDYxXFx4NkVcXHg2MVxceDZDXFx4NzlcXHg3M1xceDY5XFx4NzNcXHgyRlxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkZcXHgyMlxceDIwXFx4NzRcXHg2MVxceDcyXFx4NjdcXHg2NVxceDc0XFx4M0RcXHgyMlxceDVGXFx4NjJcXHg2Q1xceDYxXFx4NkVcXHg2QlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDc2XFx4NjVcXHg3MlxceDczXFx4NjlcXHg2RlxceDZFXFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2MVxceDNFXFx4MjBcXHg3Q1xceDIwXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2N1xceDY5XFx4NzRcXHg2OFxceDc1XFx4NjJcXHgyMlxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIyXFx4M0VcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RVxceDc0XFx4MkRcXHg3M1xceDY5XFx4N0FcXHg2NVxceDNBXFx4MjBcXHgyRVxceDM4XFx4MzdcXHgzNVxceDY1XFx4NkRcXHgzQlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDYxXFx4NjdcXHg2NVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDY1XFx4NkVcXHg2NFxceDIwXFx4NzBcXHg3MlxceDJEXFx4NkRcXHg2NFxceDJEXFx4MzBcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2OVxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NlxceDYxXFx4NzNcXHgyMFxceDY2XFx4NjFcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDIwXFx4NzRcXHg2OVxceDc0XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg1M1xceDY1XFx4NzJcXHg3NlxceDY1XFx4NzJcXHgyMFxceDU0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2OVxceDNFXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NjNcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgyMFxceDU1XFx4NTRcXHg0M1xceDIwXFx4N0NcXHgyMFxceDU1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVxceDNBXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NzVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXCIsXCJcXHg2RVxceDc0XFx4NkZcXHg3MFxceDZFXFx4NjdcXHg1RlxceDcyXFx4NjVcXHg2Q1xceDY1XFx4NjFcXHg3M1xceDY1XFx4NUZcXHg2OVxceDZFXFx4NjZcXHg2RlwiLFwiXFx4N0NcIixcIlxceDczXFx4NzBcXHg2Q1xceDY5XFx4NzRcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NzZcXHg2NVxceDcyXFx4NzNcXHg2OVxceDZGXFx4NkVcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjdcXHg2OVxceDc0XFx4NjhcXHg3NVxceDYyXCIsXCJcXHhBOVxceDIwXFx4MzFcXHgzOVxceDM5XFx4MzhcXHgyRFwiLFwiXFx4NkVcXHg3NFxceDZGXFx4NzBcXHg1RlxceDYxXFx4NjdcXHg2NVxceDVGXFx4NzRcXHg2RlwiLFwiXFx4MjBcXHgyRFxceDIwXFx4NkVcXHg3NFxceDZGXFx4NzBcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjFcXHg2N1xceDY1XCIsXCJcXHg2MlxceDZGXFx4NjRcXHg3OVxceDIwXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2RFxceDYxXFx4NjlcXHg2RVwiLFwiXFx4NzBcXHg2MVxceDcyXFx4NjVcXHg2RVxceDc0XCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcIixcIlwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDcyXFx4NjVcXHg2RFxceDZGXFx4NzZcXHg2NVwiLFwiXFx4NkNcXHg2RlxceDYzXFx4NjFcXHg2Q1xceDc0XFx4NjlcXHg2RFxceDY1XCIsXCJcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDYzXFx4NjhcXHg2MVxceDcyXFx4NzRcXHg1RlxceDYzXFx4NkZcXHg2Q1xceDZGXFx4NzJcXHg3M1wiLFwiXFx4NkZcXHg2RVxceDVGXFx4NjNcXHg3NVxceDczXFx4NzRcXHg2RlxceDZEXFx4NUZcXHg2NVxceDc2XFx4NjVcXHg2RVxceDc0XCIsXCJcXHg3MlxceDY1XFx4NjFcXHg2NFxceDc5XCJdO2Z1bmN0aW9uIGkoKXtjb25zdCBfMHg2NDhjeDI9KF8weDY0OGN4Myk9PntyZXR1cm4gJChfMHg0YWU1WzNdKVtfMHg0YWU1WzJdXSgkKF8weDY0OGN4MylbXzB4NGFlNVsxXV0oKSlbXzB4NGFlNVswXV0oKX07bGV0IF8weDY0OGN4ND1fMHg0YWU1WzRdO2NvbnN0IF8weDY0OGN4NT0oKT0+e2xldCBfMHg2NDhjeDY9JChfMHg2NDhjeDQpO2xldCBfMHg2NDhjeDc9aTE4bihfMHg0YWU1WzVdKTtsZXQgXzB4NjQ4Y3g4PV8weDY0OGN4N1tfMHg0YWU1WzddXShfMHg0YWU1WzZdKTskKF8weDRhZTVbOF0sXzB4NjQ4Y3g2KVtfMHg0YWU1WzBdXShfMHg2NDhjeDhbMF0pOyQoXzB4NGFlNVs5XSxfMHg2NDhjeDYpW18weDRhZTVbMF1dKF8weDY0OGN4OFsxXSk7bGV0IF8weDY0OGN4OT1gJHtfMHg0YWU1WzEwXX0ke2kxOG4oXzB4NGFlNVsxMV0pfSR7XzB4NGFlNVsxMl19YDskKF8weDRhZTVbMTNdLF8weDY0OGN4NilbXzB4NGFlNVswXV0oXzB4NjQ4Y3g5KTtyZXR1cm4gXzB4NjQ4Y3gyKF8weDY0OGN4Nil9O2NvbnN0IF8weDY0OGN4YT1fMHg2NDhjeDUoKTtjb25zdCBfMHg2NDhjeGI9KCk9PnskKF8weDRhZTVbMTRdKVtfMHg0YWU1WzJdXShfMHg2NDhjeGEpfTtfMHg2NDhjeGIoKTtjb25zdCBfMHg2NDhjeGM9KCk9PntyZXR1cm4gJChfMHg0YWU1WzE2XSlbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKCl9O2NvbnN0IF8weDY0OGN4ZD0oKT0+e2xldCBfMHg2NDhjeGU9XzB4NjQ4Y3hjKCk7aWYoXzB4NjQ4Y3hlPT0gbnVsbCl7cmV0dXJuIGZhbHNlfTtsZXQgXzB4NjQ4Y3hmPV8weDY0OGN4ZVtfMHg0YWU1WzFdXSgpOyQoXzB4NGFlNVsxNl0sXzB4NjQ4Y3hmKVtfMHg0YWU1WzBdXShfMHg0YWU1WzE3XSk7JChfMHg0YWU1WzE4XSxfMHg2NDhjeGYpW18weDRhZTVbMF1dKF8weDRhZTVbMTddKTtjb25zdCBfMHg2NDhjeDEwPV8weDY0OGN4MihfMHg2NDhjeGYpO2lmKF8weDY0OGN4YSE9PSBfMHg2NDhjeDEwKXtyZXR1cm4gZmFsc2V9O3JldHVybiB0cnVlfTtjb25zdCBfMHg2NDhjeDExPSgpPT57bGV0IF8weDY0OGN4ZT1fMHg2NDhjeGMoKTtpZihfMHg2NDhjeGUhPSBudWxsKXtfMHg2NDhjeGVbXzB4NGFlNVsxOV1dKCl9fTtjb25zdCBfMHg2NDhjeDEyPShfMHg2NDhjeDEzKT0+eyQoXzB4NGFlNVsxNl0pW18weDRhZTVbMF1dKF8weDY0OGN4MTNbXzB4NGFlNVsyMF1dKTskKF8weDRhZTVbMThdKVtfMHg0YWU1WzBdXShfMHg2NDhjeDEzW18weDRhZTVbMjFdXSl9O250b3BuZ19ldmVudHNfbWFuYWdlcltfMHg0YWU1WzIzXV0oXzB4NGFlNVsyMl0sbnRvcG5nX2N1c3RvbV9ldmVudHMuR0VUX0lOVEVSRkFDRV9EQVRBLChfMHg2NDhjeDEzKT0+e2lmKF8weDY0OGN4ZCgpPT0gZmFsc2Upe18weDY0OGN4MTEoKTtfMHg2NDhjeGIoKX07XzB4NjQ4Y3gxMihfMHg2NDhjeDEzKX0pfSQoZG9jdW1lbnQpW18weDRhZTVbMjRdXSgoKT0+e3JldHVybiBpKCl9KVxuIl0sIm5hbWVzIjpbIkRhdGUiLCJwcm90b3R5cGUiLCJmb3JtYXQiLCJvIiwidGhpcyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJNYXRoIiwiZmxvb3IiLCJTIiwiZ2V0TWlsbGlzZWNvbmRzIiwiayIsInRlc3QiLCJyZXBsYWNlIiwiUmVnRXhwIiwiJDEiLCJnZXRGdWxsWWVhciIsInN1YnN0ciIsImxlbmd0aCIsImpRdWVyeSIsImZuIiwiZXh0ZW5kIiwiZGlzYWJsZSIsInN0YXRlIiwiZWFjaCIsIiR0aGlzIiwiJCIsImlzIiwiZGlzYWJsZWQiLCJ0b2dnbGVDbGFzcyIsIk5UT1BOR19NSU5fVklTVUFMX1ZBTFVFIiwiUkVHRVhFUyIsImlwdjQiLCJTdHJpbmciLCJyYXciLCJpcHY2IiwiZG9tYWluTmFtZSIsInBvcnQiLCJsYXRlbmN5IiwidXJsIiwiZW1haWxVcmwiLCJtYWNBZGRyZXNzIiwiaG9zdG5hbWUiLCJ1c2VybmFtZSIsInNpbmdsZXdvcmQiLCJlbWFpbCIsImh0dHBzIiwidG9rZW4iLCJzY29yZSIsInRlbGVncmFtX2NoYW5uZWwiLCJwYXNzd29yZCIsInRsc19jZXJ0aWZpY2F0ZSIsImRvbWFpbl9uYW1lX25vdF9zdHJpY3QiLCJub25fcXVvdGVkX3RleHQiLCJOdG9wVXRpbHMiLCJzdGF0aWMiLCJ0aW1lIiwidG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsInN1YnN0cmluZyIsInJlcXVlc3QiLCJmZXRjaCIsImh0dHBfcHJlZml4IiwianNvbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInJjIiwicmNfc3RyIiwiZGF0YVBhdHRlcm4iLCJkYXRhIiwid2FybiIsInBhdHRlcm4iLCJzcGxpdCIsIm1hcCIsInAiLCJ0b1N0cmluZyIsImpvaW4iLCJhdHRyIiwicmVtb3ZlQXR0ciIsIm1hYyIsInZhbHVlIiwid2hhdCIsIm9wdGlvbmFsX21hc2siLCJpcF9hZGRyIiwiZWxlbXMiLCJtYXNrIiwiaXNOdW1lcmljIiwicGFyc2VJbnQiLCJpc19nb29kX2lwdjQiLCJ0eXBlIiwiYWRkcmVzcyIsImlzX2dvb2RfaXB2NiIsImJpdHMiLCJzaXplcyIsImJpdHNfbG9nMTAwMCIsImxvZyIsImkiLCJpc05hTiIsInJvdW5kIiwicG93IiwicmV0IiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJlcHMiLCJyZXMiLCJzY2FsZVZhbHVlIiwiZXhwb3J0cyIsImV4cG9ydHNfbGFiZWwiLCJpMThuX2V4dCIsInRvTG93ZXJDYXNlIiwiYnl0ZXMiLCJmYml0cyIsInBwcyIsImZwcyIsIm1wcyIsIm1zIiwidW5kZWZpbmVkIiwidmFsIiwiYXBzIiwid2hlbiIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJhY3R1YWwiLCJiZWZvcmUiLCJzdHIiLCJsZW4iLCJudW0iLCJraWxvYnl0ZSIsIm1lZ2FieXRlIiwiZ2lnYWJ5dGUiLCJ0ZXJhYnl0ZSIsImN1cnJlbnQiLCJsYXN0Iiwid2l0aENvbG9yIiwiZW5hYmxlZCIsImZpbmQiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwicHJvcCIsInRvZ2dsZUFsbFRhYnMiLCJzIiwiblN0ciIsIngiLCJ4MSIsIngyIiwicmd4Iiwic2NhbGUiLCJkZWNpbWFscyIsImZhY3RvciIsIm4iLCJhZGRDb21tYXMiLCJzZWNvbmRzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlYyIsIm1zZyIsIm1zZ19hcnJheSIsInllYXJzIiwicHVzaCIsIm1zZWMiLCJzZWNvbmRzVG9UaW1lIiwiZXBvY2giLCJkIiwidGRpZmYiLCJnZXRUaW1lIiwiZGlmZl9lcG9jaCIsImRlZmF1bHRzIiwib3ZlcnJpZGUiLCJmb3JtIiwicGFyYW1zIiwiaGFzT3duUHJvcGVydHkiLCJhcHBlbmRUbyIsImhvc3Rfa2V5IiwibmF2X29iamVjdCIsImRlZmF1bHRfdGFiIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJvbiIsImlkIiwidGFyZ2V0IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsInRhYiIsIm5hbWUiLCJjb250ZXh0IiwiX2FkZF9maW5kX2hvc3RfbGluayIsImlwIiwibmV0d29yayIsInNubXBfcG9ydF9pZHgiLCJhc24iLCJodG1sX3RhZyIsInRpbWVzdGFtcCIsImh0bWwiLCJsb2NhbGl6ZWQiLCJkMyIsImhvc3QiLCJxdWVyeVN0cmluZyIsInF1ZXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY3VyX3BhcmFtcyIsInBhcnNlUXVlcnkiLCJzZWFyY2giLCJuZXdfcGFyYW1zIiwibmV3X3F1ZXJ5IiwicGFyYW0iLCJwcm90b2NvbCIsInBhdGhuYW1lIiwic3RhdHVzX2NvZGUiLCJzdGF0dXNfdGV4dCIsIiRlcnJvcl9sYWJlbCIsImlzX2RpZmZlcmVudCIsIm1lc3NhZ2UiLCJyZXF1ZXN0X2ZhaWxlZF9tZXNzYWdlIiwidGV4dCIsInNob3ciLCJhbGVydCIsImxvYWRDb25maWdYSFIiLCJoaWRlIiwiJGJ1dHRvbiIsImZpbGUiLCJmaWxlcyIsIm5vX2ZpbGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsIm9ubG9hZCIsImpzb25Db25maWd1cmF0aW9uIiwiSlNPTiIsInBhcnNlIiwicmVzdWx0IiwicmVzdF9jb25zdHMiLCJyZXNwb25zZUpTT04iLCJkb25lIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJ4aHIiLCJzdWNjZXNzQ2FsbGJhY2siLCJib2R5IiwibWFuYWdlX2NvbmZpZ3VyYXRpb25zIiwibWVzc2FnZ2VzIiwiaW1wb3J0X2FsbF9zdWNjZXNzIiwiaW1wb3J0X3N1Y2Nlc3MiLCJUb2FzdFV0aWxzIiwic2hvd1RvYXN0IiwibGV2ZWwiLCJ0aXRsZSIsInN1Y2Nlc3MiLCJkZWxheSIsIm1vZGFsIiwiZmFpbCIsImZhaWx1cmVDYWxsYmFjayIsIkZBSUxFRF9IVFRQX1JFUVVFU1QiLCJhbHdheXMiLCJzZXJpYWxpemVkQXJyYXkiLCJzZXJpYWxpemVkIiwiZm9yRWFjaCIsIm9iaiIsImluY2x1ZGVzIiwidHJpbSIsImZvcm1TZWxlY3RvciIsImlucHV0IiwicmVzZXQiLCJ1cmkiLCJvcHRpb25zIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImNvbmZpZyIsInNpZ25hbCIsInNldFRpbWVvdXQiLCJhYm9ydCIsInRoZW4iLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImNhdGNoIiwiYWN0aW9uIiwiY3NyZiIsImZhaWx1cmUiLCJlbXB0eSIsInBvc3QiLCJhcnJheSIsImxpbWl0IiwiYW5kX3hfbW9yZSIsImhhc1JlZmVyZXIiLCJyZWZlcmVyUGFyYW1zIiwiVVJMIiwiT2JqZWN0IiwiZW50cmllcyIsInNlYXJjaFBhcmFtcyIsInNldCIsInJlZlVybCIsImhyZWYiLCJwb29sSWQiLCJwb29sVHlwZSIsImdldFBvb2xMaW5rIiwicG9vbCIsInJzcCIsIiRlbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJrZXkiLCJnZW5lcmF0ZVNjYWxlRWxlbWVudEtleSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJpZGVudGlmaWNhdG9yIiwicGFnZSIsImVsZW1lbnRJZCIsImN1cnJlbnRWYWx1ZSIsImdldEl0ZW0iLCIkZmllbGQiLCJpdGVtIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsImFwcGVuZENoaWxkIiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDaGlsZCIsInRvb2x0aXAiLCJ0IiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJpbm5lclRleHQiLCJsYWJlbCIsImxhc3RfY2hhciIsInNob3J0ZW5lZF9sYWJlbCIsImxhc3RfaW5kZXgiLCJsYXN0SW5kZXhPZiIsInJlcXVlc3RlZF9sYWJlbCIsImEiLCJiIiwibmFtZUEiLCJuYW1lQiIsInBlcmNlbnRhZ2UiLCJwZXJjZW50YWdlXzEiLCJwZXJjZW50YWdlXzIiLCJsYWJlbF8xIiwibGFiZWxfMiIsInNlcmllcyIsInNlcmllc0luZGV4IiwiZGF0YVBvaW50SW5kZXgiLCJ3Iiwic2VyaWUiLCJ5X3ZhbHVlIiwieGF4aXMiLCJ5YXhpcyIsImV2ZW50IiwiY2hhcnRDb250ZXh0IiwiYmFzZV91cmwiLCJkZWZhdWx0X3VybCIsInN0YXJ0X3VybCIsIm1ldGEiLCJ1cmxfcXVlcnkiLCJ4X3ZhbHVlIiwiZGF0YXRhYmxlQWRkRW1wdHlSb3ciLCJ0YWJsZSIsImVtcHR5X3N0ciIsImNvbHVtbnMiLCJmaWx0ZXIiLCJjc3MiLCJkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyIsImRhdGF0YWJsZUlzRW1wdHkiLCJkYXRhdGFibGVHZXRCeUZvcm0iLCJwYXJlbnQiLCJkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjayIsInRkX2lkeCIsImJzX2NsYXNzIiwiY2FsbGJhY2tfc3RyIiwibGluayIsInZpc2libGUiLCJhcHBlbmQiLCJkYXRhdGFibGVHZXRDb2x1bW5JbmRleCIsImNvbHVtbl9rZXkiLCJmaW5kSW5kZXgiLCJmaWVsZCIsImluaXREYXRhUGF0dGVybnMiLCJncmFwaF9kaXZfaWQiLCJsaW5rcyIsIm5vZGVzIiwiX2xpbmsiLCJzb3VyY2VfcGlkIiwic291cmNlIiwic291cmNlX25hbWUiLCJzb3VyY2VfdHlwZSIsInBpZCIsInRhcmdldF9waWQiLCJ0YXJnZXRfbmFtZSIsInRhcmdldF90eXBlIiwiY29sb3IiLCJjYXRlZ29yeTEwIiwiZm9yY2UiLCJsYXlvdXQiLCJ2YWx1ZXMiLCJzaXplIiwibGlua0Rpc3RhbmNlIiwiY2hhcmdlIiwicGF0aCIsImxpbmtBcmMiLCJjaXJjbGUiLCJ0cmFuc2Zvcm0iLCJzdGFydCIsInN2ZyIsInNlbGVjdEFsbCIsImVudGVyIiwiY2FsbCIsImRyYWciLCJkeCIsImR5IiwieSIsImRyIiwic3FydCIsInpvb21fbGV2ZWwiLCJNb2RhbEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJkaWFsb2ciLCJjbG9zZXN0IiwiZG9udERpc2FibGVTdWJtaXQiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJsaXN0IiwiYmluZEZvcm1WYWxpZGF0aW9uIiwidG9nZ2xlRm9ybVN1Ym1pc3Npb24iLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImluaXRpYWxTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImZpcnN0Q2xvc2VBdHRlbXB0IiwiaXNTdWJtaXR0aW5nIiwiY3JlYXRlRm9ybVNuYXBzaG90Iiwic25hcHNob3QiLCJpbnB1dHMiLCJoaWRkZW4iLCJjb21wYXJlRm9ybVNuYXBoc290IiwiczEiLCJzMiIsImRlbGVnYXRlTW9kYWxDbG9zaW5nIiwic2VsZiIsIm9mZiIsInJlcG9ydFZhbGlkaXR5Iiwic2VsZWN0b3IiLCIkaGlkZGVuIiwiY2xlYW5Gb3JtIiwiZmlsbEZvcm1Nb2RhbCIsImxvYWRGb3JtRGF0YSIsImludm9rZU1vZGFsSW5pdCIsIm9uTW9kYWxJbml0IiwicGFyZW50cyIsIm9uTW9kYWxTaG93IiwiZGVsZWdhdGVSZXNldEJ1dHRvbiIsImRlbGVnYXRlU3VibWl0Iiwic3VibWl0SGFuZGxlciIsImlzU3luY1JlcXVlc3QiLCJzdG9wUHJvcGFnYXRpb24iLCJtYWtlUmVxdWVzdCIsImFzeW5jIiwiJGlucHV0IiwidGltZW91dElkIiwidmFsaWRJbnB1dCIsInZhbGlkYXRpb24iLCJyZXNvbHZlRE5TIiwibWF0Y2giLCIkc3Bpbm5lciIsInNldEN1c3RvbVZhbGlkaXR5IiwicmNfc3RyX2hyIiwidmFsaWRIb3N0bmFtZSIsImNhbm5vdEJlRW1wdHkiLCJpc0lucHV0RW1wdHkiLCJ2YWxpZGF0aW9uRW1wdHlNZXNzYWdlIiwibWlzc2luZ19maWVsZCIsInZhbGlkaXR5IiwicGF0dGVybk1pc21hdGNoIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJpbnZhbGlkX2ZpZWxkIiwicmFuZ2VPdmVyZmxvdyIsInJhbmdlT3ZlcmZsb3dNZXNzYWdlIiwicmFuZ2VVbmRlcmZsb3ciLCJyYW5nZVVuZGVyZmxvd01lc3NhZ2UiLCJjaGVja1ZhbGlkYXRpb24iLCJpc1ZhbGlkIiwibWVzc2FnZVRvU2hvdyIsIiRlcnJvciIsInJlbW92ZSIsImNsZWFyVGltZW91dCIsImdldE1vZGFsSUQiLCJpZHgiLCJ2YWxpZCIsIiRmZWVkYmFja0xhYmVsIiwic3VibWl0QnV0dG9uIiwiZGF0YVRvU2VuZCIsImJlZm9yZVN1bWJpdCIsInN1Ym1pdE9wdGlvbnMiLCJlbmRwb2ludCIsIm1ldGhvZCIsImFqYXgiLCJkYXRhVHlwZSIsImNvbnRlbnRUeXBlIiwiZ2V0IiwidGV4dFN0YXR1cyIsInJlc2V0QWZ0ZXJTdWJtaXQiLCJvblN1Ym1pdFN1Y2Nlc3MiLCJqcXhociIsImVycm9yVGhyb3duIiwib25TdWJtaXRFcnJvciIsInJlc2V0QnV0dG9uIiwiZGVmYXVsdFZhbHVlcyIsInNlcmlhbGl6ZUZvcm1BcnJheSIsInNlcmlhbGl6ZUFycmF5IiwidHlwZXMiLCJub19mb3JtYXR0aW5nIiwidW0iLCJzdGVwIiwiZGVjaW1hbCIsInNjYWxlX3ZhbHVlcyIsIm51bWJlciIsImFic29sdXRlX3ZhbHVlIiwiYnBzIiwibWF4X3ZhbHVlIiwiZ2V0VW5pdE1lYXN1cmVMZW4iLCJzcGFjZVZhbHVlIiwic3BhY2VVbSIsIm1heCIsImdldFNjYWxlRmFjdG9ySW5kZXgiLCJ0eXBlT3B0aW9ucyIsIm1lYXN1cmVzIiwiZ2V0Rm9ybWF0dGVyIiwiYWJzb2x1dGVWYWx1ZSIsInNjYWxlRmFjdG9ySW5kZXgiLCJuZWdhdGl2ZVZhbHVlIiwiZm9ybWF0dGVyVXRpbHMiLCJkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MiLCJjb2x1bW5faWQiLCJyZWZyZXNoX2ludGVydmFsIiwidHJlbmRfY29sdW1ucyIsIiRkdCIsInJvd3MiLCJyZXN1bHRzZXQiLCJvbGRfdGltZXIiLCJvbGRfcmVxIiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZURhdGEiLCJpZHMiLCJpZF90b19yb3ciLCJyb3ciLCJkYXRhX2lkIiwiY3VzdG9tX2hvc3RzIiwiZmlyc3RfbG9hZCIsIl9wcm9jZXNzX3Jlc3VsdCIsInJvd19pZHgiLCJyb3dfaHRtbCIsInJvd190ZHMiLCJjZWxsIiwiJGNlbGwiLCJvbGRfdmFsIiwidHJlbmRfdmFsdWVfZm9ybWF0dGVyIiwibmV3X3ZhbCIsImFycm93cyIsImRyYXdUcmVuZCIsInNldEludGVydmFsIiwiY2FjaGUiLCJkYXRhdGFibGVGb3JFYWNoUm93IiwiY2FsbGJhY2tzIiwicm93X2kiLCJiaW5kIiwiZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3ciLCJkYXRhdGFibGVVbmRvQWRkUm93IiwibmV3X3JvdyIsImJ0X3RvX2VuYWJsZSIsImF5c1VwZGF0ZUZvcm0iLCJkdCIsImRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrIiwiZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWUiLCJ0cl9vYmoiLCJhZGRlZF9yb3dzX3ByZWZpeCIsImRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4iLCJ0aGlzX3NlbGVjdCIsInNlbGVjdG9yX2ZuIiwiY2FsbGJhY2siLCJvdGhlciIsImRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyIsIm9wdGlvbl9vYmoiLCJlbmFibGUiLCJzZWxlY3Rfb2JqIiwic2hvdWxkX3Jlc2V0IiwiZmlyc3QiLCJkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlIiwiY2hhbmdlX2NhbGxiYWNrIiwib2xkX3ZhbHVlIiwibmV3X3ZhbHVlIiwib3RoZXJzIiwicGFyYW1zRXh0ZW5kIiwib25fY2hhbmdlIiwibm9vcCIsInRyaWdnZXIiLCJkYXRhdGFibGVPbkFkZFNlbGVjdEVudHJ5IiwiZGF0YXRhYmxlSXNMYXN0UGFnZSIsImxhc3RwYWdlIiwiaGFzQ2xhc3MiLCJkYXRhdGFibGVHZXRDb2x1bW4iLCJpZF9rZXkiLCJpZF92YWx1ZSIsIm1vZGFsSGFuZGxlciIsImFyZ3MiLCJsb2FkZWREYXRhIiwic2VudCIsIm9uTW9kYWxSZXNldCIsImRlZmF1bHREYXRhIiwibWgiLCJlYnBmVXRpbHMiLCJudG9wRm9ybWF0dGVyVXRpbHMiLCJmaWx0ZXJzX3RvX3ZhbGlkYXRlIiwibWFrZVVuaXF1ZVZhbGlkYXRvciIsIml0ZW1zX2Z1bmN0aW9uIiwiY21wX25hbWUiLCJjb3VudCIsIm1lbWJlclZhbHVlVmFsaWRhdG9yIiwibWVtYmVyIiwiaXNfbWFjX2FkZHJlc3MiLCJpc19uZXR3b3JrX21hc2siLCJtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yIiwicGFzc3dvcmRNYXRjaFZhbGlkYXRvciIsIm90aGVyX2lucHV0Iiwibm90IiwicG9vbG5hbWVWYWxpZGF0b3IiLCJwYXNzd29yZE1hdGNoUmVjaGVjayIsIml0ZW1zIiwibm90X2VtcHR5IiwiaG9zdE9yTWFjVmFsaWRhdG9yIiwiaXBBZGRyZXNzVmFsaWRhdG9yIiwiYnBmVmFsaWRhdG9yIiwiZmlsdGVyX2ZpZWxkIiwic3luYyIsImFqYXhfb2JqIiwidGltZXIiLCJzdWJtaXRfcmVtaW5kIiwibGFzdF92YWwiLCJzZW5kQWpheCIsImZpbmFsbHlfY2hlY2siLCJudG9wbmdfc3luYyIsImNvbXBvbmVudHNfcmVhZHkiLCJzdWJzY3JpYmVycyIsInJlYWR5IiwiY29tcG9uZW50X25hbWUiLCJyZXNvbHZlIiwib25fcmVhZHkiLCJQcm9taXNlIiwicmVqZXZ0IiwiY29tcGxldGVkIiwibnRvcG5nX3V0aWxpdHkiLCJnbG9iYWxfaHR0cF9oZWFkZXJzIiwiaXNfYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJpc19vYmplY3QiLCJjbG9uZSIsIm9iamVjdF90b19hcnJheSIsImNoZWNrX2FuZF9zZXRfZGVmYXVsdF9pbnRlcnZhbF90aW1lIiwic2V0X3N0YXR1cyIsIm50b3BuZ191cmxfbWFuYWdlciIsImdldF91cmxfZW50cnkiLCJkZWZhdWx0X2Vwb2NoX2JlZ2luIiwiTnVtYmVyIiwibm93IiwiZGVmYXVsdF9lcG9jaF9lbmQiLCJzZXRfa2V5X3RvX3VybCIsImZyb21fdXRjX3NfdG9fc2VydmVyX2RhdGUiLCJ1dGNfc2Vjb25kcyIsInV0YyIsImxvY2FsX29mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0Iiwic2VydmVyX29mZnNldCIsIm1vbWVudCIsInR6IiwibnRvcF96b25laW5mbyIsIl9vZmZzZXQiLCJmcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQiLCJ1dGNfbXMiLCJudG9wbmdfc3RhdHVzX21hbmFnZXIiLCJnZXRfc3RhdHVzIiwiZXBvY2hfYmVnaW4iLCJlcG9jaF9lbmQiLCJiZWdpbiIsIm0iLCJjb3B5X29iamVjdF9rZXlzIiwic291cmNlX29iaiIsImRlc3Rfb2JqIiwicmVjdXJzaXZlX29iamVjdCIsInNldF9odHRwX2dsb2JhbHNfaGVhZGVycyIsImhlYWRlcnMiLCJodHRwX3JlcXVlc3QiLCJ0aHJvd19leGNlcHRpb24iLCJub3RfdW53cmFwIiwianNvbl9yZXMiLCJkb3dubG9hZF9VUkkiLCJkb3dubG9hZCIsImdldF9yYW5kb21fc3RyaW5nIiwicmFuZG9tIiwic3RyaW5nX2hhc2hfY29kZSIsImNociIsImNoYXJDb2RlQXQiLCJtb2QiLCJnbG9hYmFsX3N0YXR1cyIsIm5vdGlmeV9zdWJzY3JpYmVycyIsInNraXBfaWQiLCJmX29uX2NoYW5nZSIsInVwZGF0ZV9zdWJzY3JpYmVycyIsIm9uX3N0YXR1c19jaGFuZ2UiLCJnZXRfaW5pdF9ub3RpZnkiLCJyZXBsYWNlX3N0YXR1cyIsInJlbHBsYWNlX2dsb2JhbF9zdGF0dXMiLCJhZGRfb2JqX3RvX3N0YXR1cyIsIm5ld19zdGF0dXMiLCJhZGRfdmFsdWVfdG9fc3RhdHVzIiwibnRvcG5nX3BhcmFtc191cmxfc2VyaWFsaXplciIsImN1c3RvbV9wYXJhbXNfc2VyaWFsaXplciIsImdldF91cmxfcGFyYW1zIiwiZ2V0X3VybF9zZWFyY2hfcGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiZ2V0X3VybF9lbnRyaWVzIiwicGFyYW1fbmFtZSIsImdldF91cmxfb2JqZWN0IiwicmVsb2FkX3VybCIsInJlbG9hZCIsImdvX3RvX3VybCIsInB1c2hTdGF0ZSIsInJlcGxhY2VfdXJsIiwidXJsX3BhcmFtcyIsInJlcGxhY2VfdXJsX2FuZF9yZWxvYWQiLCJzZXJpYWxpemVfcGFyYW0iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXRfY3VzdG9tX2tleV9zZXJpYWxpemVyIiwiZl9nZXRfdXJsX3BhcmFtIiwib2JqX3RvX3VybF9wYXJhbXMiLCJkZWZhdWx0X3NlcmlhbGl6ZXIiLCJzZXJpYWxpemVyIiwiZGVsZXRlX3BhcmFtcyIsInBhcmFtc19rZXkiLCJzZWFyY2hfcGFyYW1zIiwiZGVsZXRlIiwiYWRkX29ial90b191cmwiLCJ1cmxfcGFyYW1zX29iaiIsIm5ld191cmxfcGFyYW1zIiwibmV3X2VudHJpZXMiLCJuZXdfdXJsIiwibnRvcG5nX2V2ZW50cyIsIkVQT0NIX0NIQU5HRSIsIkZJTFRFUlNfQ0hBTkdFIiwibnRvcG5nX2V2ZW50c19jb21wYXJlIiwib2xkX3N0YXR1cyIsImZpbHRlcnMiLCJzb21lIiwiZl9uZXciLCJmX29sZCIsIm50b3BuZ19ldmVudHNfbWFuYWdlciIsImV2ZW50c19tYW5hZ2VyX2lkIiwiZXZlbnRzX3N1YnNjcmliZXJzIiwiZXZlbnRfbmFtZSIsImZfY29tcGFyZSIsImVtaXQiLCJvbl9ldmVudCIsImZfb25fZXZlbnQiLCJlbWl0X2N1c3RvbV9ldmVudCIsIm9uX2N1c3RvbV9ldmVudCIsImVtaXRfZXZlbnQiLCJvbl9ldmVudF9jaGFuZ2UiLCJQaWVDaGFydCIsInVwZGF0ZV91cmwiLCJ1bml0cyIsInJlZnJlc2giLCJwaWVJbnRlcnZhbCIsInN0cmVha2VyRGF0YUFkZGVkIiwicGF0aHMiLCJsaW5lcyIsInZhbHVlTGFiZWxzIiwibmFtZUxhYmVscyIsInBpZURhdGEiLCJvbGRQaWVEYXRhIiwiZmlsdGVyZWRQaWVEYXRhIiwiaCIsImlyIiwidGV4dE9mZnNldCIsInR3ZWVuRHVyYXRpb24iLCJyIiwiZG9udXQiLCJwaWUiLCJjYXRlZ29yeTIwIiwiYXJjIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInZpcyIsImFyY19ncm91cCIsImxhYmVsX2dyb3VwIiwiY2VudGVyX2dyb3VwIiwidG90YWxVbml0cyIsInRvdGFsVmFsdWUiLCJjcmVhdGVfcGllX2NoYXJ0IiwiY29tcGFyZV9ieV9sYWJlbCIsInBpZVR3ZWVuIiwiczAiLCJlMCIsImludGVycG9sYXRlIiwicmVtb3ZlUGllVHdlZW4iLCJQSSIsInRleHRUd2VlbiIsImludGVycG9sYXRlTnVtYmVyIiwiY29zIiwic2luIiwidXBkYXRlIiwiY29udGVudCIsInBhcnNlZF9jb250ZW50IiwicGFyc2VKU09OIiwic29ydCIsInRvdGFsT2N0ZXRzIiwiZmlsdGVyRGF0YSIsImluZGV4IiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiYXR0clR3ZWVuIiwiZXhpdCIsInVwZGF0ZV9waWVfY2hhcnQiLCJudG9wbmdfY3VzdG9tX2V2ZW50cyIsIlNIT1dfTU9EQUxfRklMVEVSUyIsIk1PREFMX0ZJTFRFUlNfQVBQTFkiLCJTSE9XX0dMT0JBTF9BTEVSVF9JTkZPIiwiVklTX0RBVEFfTE9BREVEIiwiQ0hBTkdFX1BBR0VfVElUTEUiLCJEQVRBVEFCTEVfTE9BREVEIiwiR0VUX0lOVEVSRkFDRV9GQVRBIiwic2V0VXJsUGFyYW1zIiwiZm9yY2VVcGRhdGUiLCJzdG9wSW50ZXJ2YWwiLCJzdGFydEludGVydmFsIiwicF9waWVJbnRlcnZhbCIsIkRFRklORURfV0lER0VUUyIsIkRFRklORURfRVZFTlRTIiwiZGJfYW5hbHl6ZSIsImZpbHRlcmluZ19sYWJlbHMiLCJsYWJlbHMiLCJvcGVyYXRvciIsIm5vbmUiLCJzdGFuZGFyZCIsIkRFRklORURfVE9PTFRJUCIsImZvcm1hdF9ieXRlcyIsImJ5dGVzVG9TaXplIiwiZm9ybWF0X3BrdHMiLCJmb3JtYXRQYWNrZXRzIiwiZm9ybWF0X3ZhbHVlIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRfbXVsdGlwbGVfZGF0ZSIsImZvcm1hdF9sYWJlbF9mcm9tX3h5IiwiZm9ybWF0X2xhYmVsX2Zyb21feG5hbWUiLCJERUZBVUxUX0ZPUk1BVFRFUiIsIldpZGdldFV0aWxzIiwid2lkZ2V0Iiwid2lkZ2V0TmFtZSIsIldpZGdldCIsImRhdGFzb3VyY2UiLCJ1cGRhdGVUaW1lIiwiYWRkaXRpb25hbFBhcmFtcyIsIl9mZXRjaGVkRGF0YSIsIl91cGRhdGVUaW1lIiwiX2RhdGFzb3VyY2UiLCJfYWRkaXRpb25hbFBhcmFtcyIsInJlZ2lzdGVyV2lkZ2V0IiwiX2ZldGNoRGF0YSIsImRhdGFzb3VyY2VQYXJhbXMiLCJkZXN0cm95IiwidSIsIm9yaWdpbiIsInJlcSIsImZpeFN1Yk1lbnVQb3NpdGlvbiIsIiRzdWJtZW51IiwiJGhvdmVyQnV0dG9uIiwiZGlzdEZyb21BYm92ZSIsInRvcCIsInN1Ym1lbnVIZWlnaHQiLCJkb2N1bWVudEhlaWdodCIsImN1cnJlbnRTdWJtZW51SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJ0b2dnbGVTaWRlYmFyIiwiJGxheWVyIiwibW91c2VlbnRlciIsInN1Ym1lbnUiLCJtb3VzZWxlYXZlIiwiJGN1cnJlbnRTdWJtZW51IiwibnRvcENoYXJ0QXBleCIsIl9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zIiwiY2hhcnQiLCJ0b29sYmFyIiwidG9vbHMiLCJ6b29tb3V0Iiwiem9vbWluIiwiem9vbSIsInNlbGVjdGlvbiIsInBhbiIsImV2ZW50cyIsImNvbG9ycyIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImNzc0NsYXNzIiwicm90YXRlIiwib2Zmc2V0WSIsIm9mZnNldFgiLCJncmlkIiwibGVnZW5kIiwiX3NldFhUaW1lRm9ybWF0dGVyIiwiY2hhcnRPcHRpb25zIiwiZm9ybWF0dGVyIiwiX2RlZmF1bHRfVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyIsInN0YWNrZWQiLCJkYXRldGltZVVUQyIsImF4aXNUaWNrcyIsImF4aXNCb3JkZXIiLCJjb252ZXJ0ZWRDYXRUb051bWVyaWMiLCJkYXRhTGFiZWxzIiwic3Ryb2tlIiwiY3VydmUiLCJmaWxsIiwiX2RlZmF1bHRfVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMiLCJfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zIiwiVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMiLCJvcHRzIiwiX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMiLCJzaGFyZWQiLCJfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zIiwiVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyIsImF1dG9TY2FsZVlheGlzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwicGFkZGluZyIsImZvcmNlTmljZVNjYWxlIiwiY3VzdG9tIiwidHlwZUNoYXJ0IiwiVFNfTElORSIsIlRTX1NUQUNLRUQiLCJUU19DT0xVTU4iLCJQSUUiLCJCVUJCTEUiLCJCQVNFIiwibmV3Q2hhcnQiLCJfY2hhcnQiLCJfY2hhcnRPcHRpb25zIiwiZHJhd0NoYXJ0IiwiaHRtbEVsZW1lbnQiLCJBcGV4Q2hhcnRzIiwicmVuZGVyIiwidG9fZGF0YV91cmkiLCJkYXRhVVJJIiwiaW1nVVJJIiwiZGVzdHJveUNoYXJ0IiwidXBkYXRlQ2hhcnQiLCJ1cGRhdGVPcHRpb25zIiwidXBkYXRlU2VyaWVzIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50TmFtZSIsIkRhdGFUYWJsZUhhbmRsZXJzIiwiaGFuZGxlcnNJZERpY3QiLCJhZGRIYW5kbGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVySWQiLCJvbkNsaWNrIiwiZ2V0SGFuZGxlciIsInJvd0lkIiwiZGVsZXRlSGFuZGxlcnNCeUlkIiwiRGF0YVRhYmxlVXRpbHMiLCJkdEJ1dHRvbnMiLCJkb20iLCJwYWdpbmdUeXBlIiwibGVuZ3RoTWVudSIsImxhbmd1YWdlIiwiaTE4biIsInNjcmlwdF9zZWFyY2giLCJwYWdpbmF0ZSIsInByZXZpb3VzIiwibmV4dCIsInNhdmVTdGF0ZSIsInJlc3BvbnNpdmUiLCJidXR0b25zIiwiYnV0dG9uIiwiY2xhc3NOYW1lIiwiY29udGFpbmVyIiwiaGFuZGxlciIsImFjdGlvbnMiLCJvbmNsaWNrIiwiY2xhc3MiLCJleHRlcm5hbCIsImljb24iLCJkYXRhU3JjIiwiZXh0ZW5zaW9uIiwiaGFzRmlsdGVycyIsInN0YXRlU2F2ZUNhbGxiYWNrIiwic2V0dGluZ3MiLCJzSW5zdGFuY2UiLCJzdGF0ZUxvYWRDYWxsYmFjayIsInN0YXRlU2F2ZVBhcmFtcyIsImFjdGl2ZUZpbHRlciIsInBhZFplcm9lcyIsInBhZFN0YXJ0IiwibWlucyIsInVybFBhcmFtcyIsImhhcyIsInBhcmFtTmFtZSIsImRhdGFJRCIsImRhdGF0YWJsZUluc3RhbmNlIiwidG9BcnJheSIsImNhbmNlbElmIiwiJG1vZGFsIiwicmVmZXJlciIsInRhYmxlQVBJIiwidG9nZ2xlQ2FsbGJhY2siLCJjb2wiLCJ0YWJsZUlEIiwibm9kZSIsIl9sb2FkQ29sdW1uc1Zpc2liaWxpdHkiLCJmZXRjaGVkRGF0YSIsInNhdmVkQ29sdW1ucyIsImlnbm9yZWRDb2x1bW5zIiwiJGRhdGF0YWJsZVdyYXBwZXIiLCJuVGFibGVXcmFwcGVyIiwiZXZlcnkiLCJjb2x1bW4iLCJoZWFkZXIiLCIkYnRuR3JvdXAiLCIkZHJvcGRvd25NZW51IiwiJGNoZWNrYm94ZXMiLCJ0b2dnbGVkIiwiaW5kZXhPZiIsIiRjaGVja2JveCIsIiR3cmFwcGVyIiwiaGlkZGVuQ29sdW1ucyIsIl9fQ1NSRl9EQVRBVEFCTEVfXyIsInByZXBlbmQiLCJEYXRhVGFibGVSZW5kZXJzIiwic2V2ZXJpdHkiLCJmb3JtYXRWYWx1ZUxhYmVsIiwiYWxlcnRfaWQiLCJzcGFuIiwiZmludCIsInRhZ19sYWJlbCIsImRlc2NyIiwic2hvcnRlbl9kZXNjciIsImZpbHRlcml6ZSIsImh0bWxfcmVmIiwicmVmZXJlbmNlIiwibGFiZWxfbG9uZyIsImhvc3RLZXkiLCJob3N0VmFsdWUiLCJ2bGFuX2lkIiwiY291bnRyeSIsInJvbGUiLCJyb2xlX2NsaV9zcnYiLCJmbG93IiwidmFsdWVWbGFuIiwibGFiZWxWbGFuIiwidGl0bGVWbGFuIiwidmxhbiIsInNob3J0ZW5MYWJlbCIsImFjdGl2ZV9yZWYiLCJhY3RpdmVfdXJsIiwiY2xpTGFiZWwiLCJjbGlfaXAiLCJmaWx0ZXJpemVWbGFuIiwiY2xpRmxhZ0xhYmVsIiwiY2xpUG9ydExhYmVsIiwiY2xpX3BvcnQiLCJjbGlCbGFja2xpc3RlZCIsImJsYWNrbGlzdGVkIiwic3J2TGFiZWwiLCJzcnZfaXAiLCJzcnZQb3J0TGFiZWwiLCJzcnZfcG9ydCIsInNydkZsYWdMYWJlbCIsInNydkJsYWNrbGlzdGVkIiwiY2xpSWNvbnMiLCJzcnZJY29ucyIsImNsaV9yb2xlIiwic3J2X3JvbGUiLCJmdWxsbmFtZSIsImNlbGxEYXRhIiwicm93RGF0YSIsInJvd0luZGV4IiwiY29sSW5kZXgiLCJoaWdobGlnaHQiLCJjcmVhdGUiLCJkb19waWUiLCJEYXRhVGFibGVGaWx0ZXJzTWVudSIsImZpbHRlck1lbnVLZXkiLCJmaWx0ZXJUaXRsZSIsImNvbHVtbkluZGV4IiwiZXh0cmFBdHRyaWJ1dGVzIiwicmVtb3ZlQWxsRW50cnkiLCJjYWxsYmFja0Z1bmN0aW9uIiwicmF3RmlsdGVycyIsInByZXZlbnRVcGRhdGUiLCJjdXJyZW50RmlsdGVyU2VsZWN0ZWQiLCJzZWxlY3RlZEZpbHRlciIsImluaXQiLCJfcmVuZGVyIiwiX3VwZGF0ZSIsIl9jb3VudEVudHJpZXMiLCJyZWdleCIsInJlZyIsImNlbGxWYWx1ZSIsIl9jcmVhdGVNZW51RW50cnkiLCIkZW50cnkiLCJjdXJyZW50bHlfYWN0aXZlIiwiJGRyb3Bkb3duIiwibmV3Q29udGVudCIsImNvdW50YWJsZSIsIiRjb3VudGVyIiwibmV3VXJsUGFyYW1zIiwiZHJhdyIsIl9jcmVhdGVGaWx0ZXJzIiwiZmlsdGVyc0NyZWF0ZWQiLCIkZmlsdGVyIiwiJG5vZGUiLCJpbnNlcnRCZWZvcmUiLCIkZHJvcGRvd25Db250YWluZXIiLCIkZHJvcGRvd25CdXR0b24iLCIkZHJvcGRvd25UaXRsZSIsIiRtZW51Q29udGFpbmVyIiwiXyIsImFsbEZpbHRlciIsIl9nZW5lcmF0ZUFsbEZpbHRlciIsIl9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUiLCJmaWx0ZXJLZXkiLCJsb2FkZWQiLCJzYXZlIiwiYWxsIiwiQ2hhcnRXaWRnZXQiLCJzdXBlciIsIl9jaGFydFR5cGUiLCJfJGh0bWxDaGFydCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRXaWRnZXRCeU5hbWUiLCJ1cGRhdGVkT3B0aW9ucyIsIl9nZW5lcmF0ZUNvbmZpZyIsImVuYWJsZWRPblNlcmllcyIsInoiLCJ6YXhpcyIsIm9uSXRlbUNsaWNrIiwidG9nZ2xlRGF0YVNlcmllcyIsInBsb3RPcHRpb25zIiwiYmFyIiwiYm9yZGVyUmFkaXVzIiwiaG9yaXpvbnRhbCIsIm5vRGF0YSIsImFsaWduIiwidmVydGljYWxBbGlnbiIsImFwZXgiLCJhc3NpZ24iLCJfYnVpbGRUb29sdGlwIiwiYXhpcyIsIl9idWlsZEF4aXNGb3JtYXR0ZXIiLCJheGlzTmFtZSIsIm50b3BfdXRpbHNfZm9ybWF0dGVyIiwic2VsZWN0ZWRGb3JtYXR0ZXIiLCJfYnVpbGREYXRhTGFiZWxzIiwiZGF0YUxhYmVsc09wdHMiLCJfYnVpbGRDb25maWciLCJhZGRpdGlvbmFscyIsImFkZGl0aW9uYWwiLCJfaW5pdGlhbGl6ZUNoYXJ0IiwiX2NoYXJ0Q29uZmlnIiwidXBkYXRlQnlVcmwiLCJjYXRlZ29yaWVzIiwiZGVzdHJveUFuZFVwZGF0ZSIsImJsb2dOb3RpZmNhdGlvbkNsaWNrIiwibWV0YUtleSIsImN0cmxLZXkiLCJ3aGljaCIsImJsb2dfbm90aWZpY2F0aW9uX2lkIiwiX19CTE9HX05PVElGSUNBVElPTl9DU1JGX18iLCJFIiwiUCIsImwiLCJNIiwiYyIsImYiLCJSIiwiQSIsImtleXMiLCJJIiwiRiIsImciLCJfX3ZfaXNSZWYiLCJyZWR1Y2UiLCJPIiwiTCIsInYiLCJDIiwic3RhcnRzV2l0aCIsInNwbGljZSIsIlQiLCJOIiwiQiIsIlYiLCJqIiwiVSIsIkQiLCJIIiwiVyIsIksiLCJHIiwicSIsIkoiLCJZIiwiWiIsIlEiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJYIiwiZWUiLCJ0ZSIsIm5lIiwiYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwic2NvcGVzIiwicnVuIiwic3RvcCIsInBvcCIsIm9lIiwicmUiLCJzZSIsImllIiwibGUiLCJTZXQiLCJjZSIsImZlIiwiYWUiLCJ1ZSIsIldlYWtNYXAiLCJkZSIsInBlIiwiaGUiLCJTeW1ib2wiLCJtZSIsImdlIiwic2NoZWR1bGVyIiwiZGVwcyIsImJlIiwidmUiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJ5ZSIsImVmZmVjdCIsInNjb3BlIiwibGF6eSIsIl9lIiwiU2UiLCJ4ZSIsIkNlIiwid2UiLCJNYXAiLCJrZSIsImFkZCIsIlRlIiwiTmUiLCJjb21wdXRlZCIsIkVlIiwiYWxsb3dSZWN1cnNlIiwiJGUiLCJPZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJSZSIsIkllIiwiRmUiLCJQZSIsIkFlIiwiTWUiLCJrdCIsImFwcGx5IiwiVmUiLCJodCIsImZ0IiwicHQiLCJSZWZsZWN0IiwiUnQiLCJ5dCIsImd0IiwiQmUiLCJ4dCIsIkN0IiwiTGUiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJqZSIsIlVlIiwiRGUiLCJIZSIsIldlIiwiZ2V0UHJvdG90eXBlT2YiLCJ6ZSIsIl9fdl9yYXciLCJFdCIsIk50IiwiS2UiLCJHZSIsInFlIiwiSmUiLCJZZSIsIlplIiwiY2xlYXIiLCJRZSIsIlhlIiwiaXRlcmF0b3IiLCJldCIsIm50Iiwib3QiLCJydCIsInN0IiwidHQiLCJpdCIsImx0IiwiY3QiLCJhdCIsInV0IiwiYnQiLCJ2dCIsIl90IiwiX192X2lzUmVhY3RpdmUiLCJfX3Zfc2tpcCIsImlzRXh0ZW5zaWJsZSIsIm10IiwiUHJveHkiLCJTdCIsIl9fdl9pc1JlYWRvbmx5IiwiX192X2lzU2hhbGxvdyIsInd0IiwiVHQiLCIkdCIsImRlcCIsIk90IiwiRnQiLCJBdCIsIlB0IiwiTXQiLCJfcmF3VmFsdWUiLCJfdmFsdWUiLCJWdCIsIkl0IiwiQnQiLCJMdCIsImp0IiwiX2dldCIsIl9zZXQiLCJVdCIsIkR0IiwiV3QiLCJIdCIsIl9vYmplY3QiLCJfa2V5IiwiX2RlZmF1bHRWYWx1ZSIsInp0IiwiX3NldHRlciIsIl9kaXJ0eSIsIl9jYWNoZWFibGUiLCJLdCIsIkd0IiwiY29tcG9uZW50IiwiYXBwQ29udGV4dCIsIndhcm5IYW5kbGVyIiwidm5vZGUiLCJyZWN1cnNlQ291bnQiLCJZdCIsInByb3h5IiwiTHMiLCJwcm9wcyIsInF0IiwiSnQiLCJRdCIsIlp0IiwiZWMiLCJlcnJvckhhbmRsZXIiLCJYdCIsImVuIiwidG4iLCJubiIsInJuIiwic24iLCJsbiIsImNuIiwiYW4iLCJ1biIsInBuIiwiZG4iLCJobiIsImJuIiwibW4iLCJTbiIsImduIiwidm4iLCJ5biIsIl9uIiwieG4iLCJDbiIsInduIiwiSFRNTEVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwia24iLCJpc1VubW91bnRlZCIsImVtaXR0ZWQiLCJUbiIsImVtaXRzQ2FjaGUiLCJlbWl0cyIsIm1peGlucyIsImV4dGVuZHMiLCJObiIsIkVuIiwiJG4iLCJPbiIsIl9fc2NvcGVJZCIsIlJuIiwiRm4iLCJQbiIsIkFuIiwiX2QiLCJYciIsIl9jIiwiTW4iLCJ3aXRoUHJveHkiLCJwcm9wc09wdGlvbnMiLCJzbG90cyIsImF0dHJzIiwicmVuZGVyQ2FjaGUiLCJzZXR1cFN0YXRlIiwiY3R4IiwiaW5oZXJpdEF0dHJzIiwic2hhcGVGbGFnIiwiZ3MiLCJWbiIsInFyIiwidXMiLCJLciIsIkluIiwiZnMiLCJkaXJzIiwiY29uY2F0IiwiQm4iLCJMbiIsInN1YlRyZWUiLCJqbiIsIl9faXNTdXNwZW5zZSIsIlVuIiwicHJvY2VzcyIsInN1c3BlbnNlIiwiSG4iLCJwZW5kaW5nQnJhbmNoIiwic3NDb250ZW50IiwiRG4iLCJzc0ZhbGxiYWNrIiwiS24iLCJhY3RpdmVCcmFuY2giLCJpc0luRmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsInJzIiwiaGlkZGVuQ29udGFpbmVyIiwicGVuZGluZ0lkIiwidGltZW91dCIsImZhbGxiYWNrIiwiaHlkcmF0ZSIsInBhcmVudE5vZGUiLCJub3JtYWxpemUiLCJjaGlsZHJlbiIsIlduIiwiZGVmYXVsdCIsInBhcmVudENvbXBvbmVudCIsImlzU1ZHIiwiYW5jaG9yIiwibW9kZSIsImFmdGVyTGVhdmUiLCJtb3ZlIiwicmVnaXN0ZXJEZXAiLCJhc3luY0RlcCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiUnMiLCJ1bm1vdW50IiwiUXIiLCJZciIsIkpyIiwiWnIiLCJvcyIsImR5bmFtaWNDaGlsZHJlbiIsInpuIiwiR24iLCJDcyIsInByb3ZpZGVzIiwicW4iLCJhcmd1bWVudHMiLCJKbiIsImVvIiwiWW4iLCJmbHVzaCIsIlpuIiwiUW4iLCJYbiIsImltbWVkaWF0ZSIsImRlZXAiLCJvbyIsIlByIiwidG8iLCJubyIsImtzIiwiVHMiLCJybyIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJPbyIsIlBvIiwic28iLCJGdW5jdGlvbiIsImlvIiwiYXBwZWFyIiwiQm9vbGVhbiIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJzZXR1cCIsIndzIiwiZm8iLCJhbyIsInVvIiwiY28iLCJwbyIsImdldFRyYW5zaXRpb25LZXkiLCJkZWxheUxlYXZlIiwibG8iLCJfbGVhdmVDYiIsImRlbGF5ZWRMZWF2ZSIsImJlZm9yZUVudGVyIiwiX2VudGVyQ2IiLCJsZWF2ZSIsInlvIiwiV3IiLCJwYXRjaEZsYWciLCJobyIsIm1vIiwiX19hc3luY0xvYWRlciIsImdvIiwibG9hZGVyIiwibG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiX19hc3luY1Jlc29sdmVkIiwidm8iLCJyZWYiLCJfX2lzS2VlcEFsaXZlIiwiX28iLCJpbmNsdWRlIiwiZXhjbHVkZSIsInJlbmRlcmVyIiwia28iLCJCcyIsImFjdGl2YXRlIiwic2xvdFNjb3BlSWRzIiwiaXNEZWFjdGl2YXRlZCIsIm9uVm5vZGVNb3VudGVkIiwiYnMiLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwiYm8iLCJUbyIsIkZvIiwiU28iLCJDbyIsInhvIiwiX193ZGMiLCJObyIsIndvIiwiQW8iLCJfX3dlaCIsInVuc2hpZnQiLCJFbyIsIk9zIiwiJG8iLCJSbyIsIk1vIiwiVm8iLCJJbyIsIkJvIiwiTG8iLCJWcyIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiZGlyIiwiaW5zdGFuY2UiLCJvbGRWYWx1ZSIsImFyZyIsIm1vZGlmaWVycyIsImpvIiwiVW8iLCJ6byIsIkRvIiwiSG8iLCJXbyIsIktvIiwiR28iLCJmcm9tIiwicW8iLCJKbyIsImlzQ0UiLCJZbyIsIm5zIiwic2NvcGVJZCIsIlpvIiwiUW8iLCJOcyIsIlhvIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsInJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCJyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsImVyIiwiYWNjZXNzQ2FjaGUiLCJuciIsIl9fY3NzTW9kdWxlcyIsImdsb2JhbFByb3BlcnRpZXMiLCJ0ciIsInVuc2NvcGFibGVzIiwicnIiLCJzciIsIm9wdGlvbnNDYWNoZSIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImxyIiwiY3IiLCJhciIsImZyIiwibWV0aG9kcyIsImJlZm9yZUNyZWF0ZSIsInByIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYmVmb3JlRGVzdHJveSIsImJlZm9yZVVubW91bnQiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCIsImNvbXBvbmVudHMiLCJkaXJlY3RpdmVzIiwid2F0Y2giLCJwcm92aWRlIiwiaW5qZWN0IiwidXIiLCJlbWl0c09wdGlvbnMiLCJociIsInByb3BzRGVmYXVsdHMiLCJtciIsInByb3BzQ2FjaGUiLCJnciIsIl9yIiwidnIiLCJ5ciIsImJyIiwiU3IiLCJ4ciIsIkNyIiwiX2N0eCIsIndyIiwia3IiLCJhcHAiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiY29tcGlsZXJPcHRpb25zIiwiVHIiLCJOciIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwidmVyc2lvbiIsIm9pIiwidXNlIiwiaW5zdGFsbCIsIm1peGluIiwiZGlyZWN0aXZlIiwibW91bnQiLCJfX3Z1ZV9hcHBfXyIsIkVyIiwiJHIiLCJPciIsIm5hbWVzcGFjZVVSSSIsInRhZ05hbWUiLCJSciIsIm5vZGVUeXBlIiwiRnIiLCJwYXRjaFByb3AiLCJjcmVhdGVUZXh0IiwibmV4dFNpYmxpbmciLCJpbnNlcnQiLCJjcmVhdGVDb21tZW50IiwienIiLCJHciIsInN0YXRpY0NvdW50Iiwib3V0ZXJIVE1MIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiZHMiLCJlbmRzV2l0aCIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImZpcnN0Q2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwiX3Zub2RlIiwiQXIiLCJWciIsIk1yIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsIl9fVlVFX18iLCJzZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJzZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsInZzIiwiSXIiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiZHluYW1pY1Byb3BzIiwib25Wbm9kZVVwZGF0ZWQiLCJCciIsIlNzIiwidWlkIiwieHMiLCJleHBvc2VkIiwiZXhwb3NlUHJveHkiLCJzZXR1cENvbnRleHQiLCJiYyIsImJtIiwiYnUiLCJidW0iLCJydGciLCJydGMiLCJzcCIsIk1zIiwiQXMiLCIkc3RhYmxlIiwibWluIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJtYyIsInBjIiwicGJjIiwiY3JlYXRlQXBwIiwiTHIiLCJqciIsIlNWR0VsZW1lbnQiLCJVciIsIkRyIiwidGFyZ2V0QW5jaG9yIiwiSHIiLCJfX2lzVGVsZXBvcnQiLCJfbHBhIiwiZXMiLCJ0cyIsImFzIiwiX192X2lzVk5vZGUiLCJzcyIsImxzIiwiY3MiLCJyZWZfa2V5IiwicmVmX2ZvciIsInlzIiwiX192Y2NPcHRzIiwicHMiLCJfcyIsImhzIiwibWVtbyIsIkVzIiwiJHMiLCJGcyIsIl9yYyIsIlBzIiwidGVtcGxhdGUiLCJpc0N1c3RvbUVsZW1lbnQiLCJkZWxpbWl0ZXJzIiwicmVuZGVyVHJhY2tlZCIsInJlbmRlclRyaWdnZXJlZCIsImV4cG9zZSIsInVud3JhcEluamVjdGVkUmVmIiwianMiLCJvciIsIklzIiwiZGlzcGxheU5hbWUiLCJfX25hbWUiLCJfX2ZpbGUiLCJVcyIsIkRzIiwiSHMiLCJXcyIsInpzIiwiR3MiLCJLcyIsInFzIiwiSnMiLCJZcyIsIlpzIiwiUXMiLCJYcyIsImVpIiwidGkiLCJuaSIsImxpIiwiY2kiLCJhaSIsImNyZWF0ZUVsZW1lbnROUyIsIm11bHRpcGxlIiwiY3JlYXRlVGV4dE5vZGUiLCJub2RlVmFsdWUiLCJ1aSIsInBpIiwic2V0UHJvcGVydHkiLCJkaSIsImZpIiwiaGkiLCJtaSIsImdpIiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJ2aSIsInlpIiwiX2kiLCJiaSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ4aSIsIkNpIiwid2kiLCJOaSIsImRlZiIsImtpIiwiVGwiLCJUaSIsIl9kZWYiLCJfY29ubmVjdGVkIiwiX3Jlc29sdmVkIiwiX251bWJlclByb3BzIiwic2hhZG93Um9vdCIsIl9jcmVhdGVWTm9kZSIsImF0dGFjaFNoYWRvdyIsImNvbm5lY3RlZENhbGxiYWNrIiwiX3Jlc29sdmVEZWYiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImtsIiwiYXR0cmlidXRlcyIsIl9zZXRBdHRyIiwiYXR0cmlidXRlTmFtZSIsInN0eWxlcyIsIl9zZXRQcm9wIiwiX2dldFByb3AiLCJfYXBwbHlTdHlsZXMiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJFaSIsIiRpIiwiT2kiLCJkaXNjb25uZWN0IiwiUmkiLCJGaSIsIklpIiwiUGkiLCJlbnRlckZyb21DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJhcHBlYXJGcm9tQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJsZWF2ZUZyb21DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJBaSIsIk1pIiwiVmkiLCJCaSIsImppIiwiX2lzTGVhdmluZyIsIlVpIiwiTGkiLCJIaSIsIkdpIiwiY2xhc3NMaXN0IiwiX3Z0YyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRpIiwiX2VuZElkIiwicHJvcENvdW50IiwiV2kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInppIiwiaGFzVHJhbnNmb3JtIiwidHJhbnNpdGlvblByb3BlcnR5IiwiS2kiLCJvZmZzZXRIZWlnaHQiLCJxaSIsIkppIiwiWWkiLCJ0YWciLCJtb3ZlQ2xhc3MiLCJkaXNwbGF5IiwiWmkiLCJRaSIsIlhpIiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRsIiwiY29tcG9zaW5nIiwibmwiLCJFdmVudCIsIm9sIiwiX2Fzc2lnbiIsImFjdGl2ZUVsZW1lbnQiLCJybCIsIl9tb2RlbFZhbHVlIiwiYWwiLCJjaGVja2VkIiwidWwiLCJzbCIsImlsIiwibGwiLCJzZWxlY3RlZCIsImNsIiwic2VsZWN0ZWRJbmRleCIsInBsIiwiZmwiLCJkbCIsImhsIiwicHJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJjdHJsIiwic2hpZnQiLCJzaGlmdEtleSIsImFsdCIsImFsdEtleSIsIm1pZGRsZSIsInJpZ2h0IiwiZXhhY3QiLCJtbCIsImdsIiwiZXNjIiwic3BhY2UiLCJ1cCIsImRvd24iLCJ2bCIsInlsIiwiX3ZvZCIsIl9sIiwiYmwiLCJjc3NUZXh0IiwiX3ZlaSIsImF0dGFjaGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJTaSIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJTbCIsInhsIiwiQ2wiLCJ3bCIsIk5sIiwiJGwiLCJFbGVtZW50IiwiRWwiLCJPbCIsIlJsIiwiZnJlZXplIiwiX19wcm90b19fIiwiY3JlYXRlU1NSQXBwIiwiaW5pdERpcmVjdGl2ZXNGb3JTU1IiLCJkZWZpbmVDdXN0b21FbGVtZW50IiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsIlZ1ZUVsZW1lbnQiLCJ1c2VDc3NNb2R1bGUiLCJ1c2VDc3NWYXJzIiwiVHJhbnNpdGlvbiIsIlRyYW5zaXRpb25Hcm91cCIsInZNb2RlbFRleHQiLCJ2TW9kZWxDaGVja2JveCIsInZNb2RlbFJhZGlvIiwidk1vZGVsU2VsZWN0Iiwidk1vZGVsRHluYW1pYyIsIndpdGhNb2RpZmllcnMiLCJ3aXRoS2V5cyIsInZTaG93IiwicmVhY3RpdmUiLCJyZWFkb25seSIsInVucmVmIiwicHJveHlSZWZzIiwiaXNSZWYiLCJ0b1JlZiIsInRvUmVmcyIsImlzUHJveHkiLCJpc1JlYWN0aXZlIiwiaXNSZWFkb25seSIsImlzU2hhbGxvdyIsImN1c3RvbVJlZiIsInRyaWdnZXJSZWYiLCJzaGFsbG93UmVmIiwic2hhbGxvd1JlYWN0aXZlIiwic2hhbGxvd1JlYWRvbmx5IiwibWFya1JhdyIsInRvUmF3IiwiUmVhY3RpdmVFZmZlY3QiLCJlZmZlY3RTY29wZSIsIkVmZmVjdFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwib25TY29wZURpc3Bvc2UiLCJ3YXRjaEVmZmVjdCIsIndhdGNoUG9zdEVmZmVjdCIsIndhdGNoU3luY0VmZmVjdCIsIm9uQmVmb3JlTW91bnQiLCJvbk1vdW50ZWQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uVXBkYXRlZCIsIm9uQmVmb3JlVW5tb3VudCIsIm9uVW5tb3VudGVkIiwib25BY3RpdmF0ZWQiLCJvbkRlYWN0aXZhdGVkIiwib25SZW5kZXJUcmFja2VkIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJvblNlcnZlclByZWZldGNoIiwibmV4dFRpY2siLCJkZWZpbmVDb21wb25lbnQiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsInVzZUF0dHJzIiwidXNlU2xvdHMiLCJkZWZpbmVQcm9wcyIsImRlZmluZUVtaXRzIiwiZGVmaW5lRXhwb3NlIiwid2l0aERlZmF1bHRzIiwibWVyZ2VEZWZhdWx0cyIsImNyZWF0ZVByb3BzUmVzdFByb3h5Iiwid2l0aEFzeW5jQ29udGV4dCIsImdldEN1cnJlbnRJbnN0YW5jZSIsImNyZWF0ZVZOb2RlIiwiY2xvbmVWTm9kZSIsIm1lcmdlUHJvcHMiLCJpc1ZOb2RlIiwiRnJhZ21lbnQiLCJUZXh0IiwiQ29tbWVudCIsIlN0YXRpYyIsIlRlbGVwb3J0IiwiU3VzcGVuc2UiLCJLZWVwQWxpdmUiLCJCYXNlVHJhbnNpdGlvbiIsIndpdGhEaXJlY3RpdmVzIiwidXNlU1NSQ29udGV4dCIsInNzckNvbnRleHRLZXkiLCJjcmVhdGVSZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyIiwicXVldWVQb3N0Rmx1c2hDYiIsImhhbmRsZUVycm9yIiwiY2FsbFdpdGhFcnJvckhhbmRsaW5nIiwiY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmciLCJyZXNvbHZlQ29tcG9uZW50IiwicmVzb2x2ZURpcmVjdGl2ZSIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwicmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIiLCJpc1J1bnRpbWVPbmx5IiwidXNlVHJhbnNpdGlvblN0YXRlIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsImluaXRDdXN0b21Gb3JtYXR0ZXIiLCJkZXZ0b29scyIsInNldERldnRvb2xzSG9vayIsIndpdGhDdHgiLCJwdXNoU2NvcGVJZCIsInBvcFNjb3BlSWQiLCJ3aXRoU2NvcGVJZCIsInJlbmRlckxpc3QiLCJ0b0hhbmRsZXJzIiwicmVuZGVyU2xvdCIsImNyZWF0ZVNsb3RzIiwid2l0aE1lbW8iLCJpc01lbW9TYW1lIiwib3BlbkJsb2NrIiwiY3JlYXRlQmxvY2siLCJzZXRCbG9ja1RyYWNraW5nIiwiY3JlYXRlVGV4dFZOb2RlIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiY3JlYXRlU3RhdGljVk5vZGUiLCJjcmVhdGVFbGVtZW50Vk5vZGUiLCJjcmVhdGVFbGVtZW50QmxvY2siLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJ0b0Rpc3BsYXlTdHJpbmciLCJjYW1lbGl6ZSIsImNhcGl0YWxpemUiLCJ0b0hhbmRsZXJLZXkiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplU3R5bGUiLCJ0cmFuc2Zvcm1WTm9kZUFyZ3MiLCJzc3JVdGlscyIsInJlc29sdmVGaWx0ZXIiLCJjb21wYXRVdGlscyIsIkZsIiwiUGwiLCJBbCIsIlN5bnRheEVycm9yIiwiY29kZSIsImxvYyIsIk1sIiwiVmwiLCJJbCIsIkJsIiwiTGwiLCJqbCIsIlVsIiwiRGwiLCJIbCIsIldsIiwiemwiLCJLbCIsIkdsIiwicWwiLCJKbCIsIllsIiwiWmwiLCJRbCIsIlhsIiwidGMiLCJuYyIsIm9jIiwic2MiLCJpYyIsImxjIiwiY2MiLCJhYyIsInVjIiwiZmMiLCJkYyIsImhjIiwiZ2MiLCJ2YyIsInljIiwiU2MiLCJsaW5lIiwib2Zmc2V0IiwiZW5kIiwieGMiLCJoZWxwZXIiLCJaYyIsImluU1NSIiwiWWMiLCJpc0Jsb2NrIiwiZGlzYWJsZVRyYWNraW5nIiwiaXNDb21wb25lbnQiLCJDYyIsImVsZW1lbnRzIiwid2MiLCJwcm9wZXJ0aWVzIiwia2MiLCJUYyIsImlzU3RhdGljIiwiY29uc3RUeXBlIiwiTmMiLCJFYyIsImNhbGxlZSIsIiRjIiwicmV0dXJucyIsIm5ld2xpbmUiLCJpc1Nsb3QiLCJPYyIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJSYyIsIkZjIiwiUGMiLCJBYyIsIk1jIiwiVmMiLCJJYyIsIkJjIiwiTGMiLCJqYyIsIlVjIiwiRGMiLCJIYyIsImV4cCIsIldjIiwiemMiLCJLYyIsIkdjIiwicWMiLCJ0YWdUeXBlIiwiSmMiLCJRYyIsIlhjIiwiZWEiLCJ0YSIsIm5hIiwicmVtb3ZlSGVscGVyIiwib2EiLCJyYSIsImFtcCIsImFwb3MiLCJxdW90Iiwic2EiLCJnZXROYW1lc3BhY2UiLCJnZXRUZXh0TW9kZSIsImlzVm9pZFRhZyIsImlzUHJlVGFnIiwiZGVjb2RlRW50aXRpZXMiLCJvbldhcm4iLCJjb21tZW50cyIsImxhIiwieGEiLCJOYSIsImluVlByZSIsIkNhIiwidmEiLCJ1YSIsInBhIiwiYWEiLCJ3YSIsImhhIiwiZmEiLCJ5YSIsImNhIiwid2hpdGVzcGFjZSIsImluUHJlIiwiYmEiLCJleGVjIiwiU2EiLCJpc1NlbGZDbG9zaW5nIiwiRWEiLCJrYSIsIm1hIiwiaXNCdWlsdEluQ29tcG9uZW50IiwiY29kZWdlbk5vZGUiLCJnYSIsIl9hIiwiaXNRdW90ZWQiLCJUYSIsIm9yaWdpbmFsU291cmNlIiwiJGEiLCJSYSIsIk9hIiwiRmEiLCJob2lzdCIsIklhIiwiTWEiLCJWYSIsInZTbG90IiwiYnJhbmNoZXMiLCJ0cmFuc2Zvcm1Ib2lzdCIsImNvbnN0YW50Q2FjaGUiLCJQYSIsIkFhIiwiTGEiLCJmaWxlbmFtZSIsInByZWZpeElkZW50aWZpZXJzIiwiaG9pc3RTdGF0aWMiLCJjYWNoZUhhbmRsZXJzIiwibm9kZVRyYW5zZm9ybXMiLCJkaXJlY3RpdmVUcmFuc2Zvcm1zIiwiZXhwcmVzc2lvblBsdWdpbnMiLCJzbG90dGVkIiwic3NyIiwic3NyQ3NzVmFycyIsImJpbmRpbmdNZXRhZGF0YSIsImlubGluZSIsImlzVFMiLCJjb21wYXRDb25maWciLCJzZWxmTmFtZSIsImhlbHBlcnMiLCJob2lzdHMiLCJpbXBvcnRzIiwidGVtcHMiLCJjYWNoZWQiLCJpZGVudGlmaWVycyIsInZGb3IiLCJ2UHJlIiwidk9uY2UiLCJjdXJyZW50Tm9kZSIsImNoaWxkSW5kZXgiLCJpblZPbmNlIiwiaGVscGVyU3RyaW5nIiwicmVwbGFjZU5vZGUiLCJyZW1vdmVOb2RlIiwib25Ob2RlUmVtb3ZlZCIsImFkZElkZW50aWZpZXJzIiwicmVtb3ZlSWRlbnRpZmllcnMiLCJob2lzdGVkIiwiQmEiLCJqYSIsIlVhIiwiRGEiLCJXYSIsInphIiwiaW5kZW50IiwiS2EiLCJkZWluZGVudCIsIkdhIiwicWEiLCJwdXJlIiwiSmEiLCJZYSIsImluZGVudExldmVsIiwiWmEiLCJRYSIsIlhhIiwiY29uZGl0aW9uIiwidXNlcktleSIsImlzVGVtcGxhdGVJZiIsImV1IiwidHUiLCJzdSIsInZhbHVlQWxpYXMiLCJrZXlBbGlhcyIsIm9iamVjdEluZGV4QWxpYXMiLCJwYXJzZVJlc3VsdCIsImx1IiwibnUiLCJvdSIsInJ1IiwiaXUiLCJyZXBlYXQiLCJjdSIsImF1IiwidXUiLCJwdSIsImZ1IiwiaHUiLCJkdSIsImhhc0R5bmFtaWNTbG90cyIsIm11IiwiZ3UiLCJ2dSIsImR5bmFtaWNQcm9wTmFtZXMiLCJzaG91bGRVc2VCbG9jayIsInl1IiwibmVlZFJ1bnRpbWUiLCJpc0hhbmRsZXJLZXkiLCJfdSIsIlN1Iiwic2xvdE5hbWUiLCJzbG90UHJvcHMiLCJ4dSIsIkN1Iiwid3UiLCJrdSIsIlR1IiwiTnUiLCJXZWFrU2V0IiwiRXUiLCIkdSIsIk91IiwiUnUiLCJGdSIsIlB1IiwiaWEiLCJtb2RlbCIsInNvdXJjZU1hcCIsIm9wdGltaXplSW1wb3J0cyIsInJ1bnRpbWVHbG9iYWxOYW1lIiwicnVudGltZU1vZHVsZU5hbWUiLCJzc3JSdW50aW1lTW9kdWxlTmFtZSIsIm9uQ29udGV4dENyZWF0ZWQiLCJhc3QiLCJwcmVhbWJsZSIsInRvSlNPTiIsIkhhIiwiQXUiLCJNdSIsIlZ1IiwiSXUiLCJCdSIsIkx1IiwianUiLCJVdSIsIkR1IiwiSHUiLCJXdSIsInp1IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiS3UiLCJHdSIsInF1IiwiSnUiLCJZdSIsIlp1IiwiUXUiLCJYdSIsImVwIiwidHAiLCJucCIsImNsb2FrIiwia2V5TW9kaWZpZXJzIiwibm9uS2V5TW9kaWZpZXJzIiwiZXZlbnRPcHRpb25Nb2RpZmllcnMiLCJvcCIsInJwIiwic2NyaXB0JE8iLCJjaGFydF90eXBlIiwicmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSIsImJhc2VfdXJsX3JlcXVlc3QiLCJnZXRfcGFyYW1zX3VybF9yZXF1ZXN0IiwiZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zIiwiY2hhcnRfb3B0aW9ucyIsImZyb21fem9vbSIsInVybF9yZXF1ZXN0IiwiZ2V0X3VybF9yZXF1ZXN0IiwicmVnaXN0ZXJfc3RhdHVzIiwiZHJhd19jaGFydCIsImdldF9kYXRhX3VyaSIsImRvd25sb2FkX2NoYXJ0X3BuZyIsImZpbGVfbmFtZSIsImRhdGFfdXJpIiwiZG93bmxvYWRVUkkiLCJuZXdfdXJsX3JlcXVlc3QiLCJ1cGRhdGVfY2hhcnQiLCJjaGFydEFwZXgiLCJjaGFydF9jb250ZXh0Iiwib25fem9vbWVkIiwiZ2V0X2NoYXJ0X29wdGlvbnMiLCJ1cGRhdGVfY2hhcnRfb3B0aW9ucyIsInVwZGF0ZV9jaGFydF9zZXJpZXMiLCJuZXdfZXBvY2hfc3RhdHVzIiwidW5peCIsInNlbGVjdDIiLCJvcHRpb25zXzIiLCJncm91cHNfb3B0aW9uc18yIiwic2VsZWN0ZWRfb3B0aW9uXzIiLCJnZXRfcHJvcHNfc2VsZWN0ZWRfb3B0aW9uIiwic2VsZWN0ZWRfb3B0aW9uIiwic2V0X3NlbGVjdGVkX29wdGlvbiIsImdldF92YWx1ZV9mcm9tX3NlbGVjdGVkX29wdGlvbiIsImN1cl92YWx1ZSIsInNlbGVjdDJEaXYiLCJmaXJzdF90aW1lX3JlbmRlciIsInNldF9pbnB1dCIsImdyb3Vwc19kaWN0Iiwib3B0aW9uIiwib3B0XzIiLCJncm91cCIsInNldF9vcHRpb25zIiwiY3VycmVudF92YWx1ZSIsImRpc2FibGVfY2hhbmdlIiwidGhlbWUiLCJkcm9wZG93blBhcmVudCIsImRyb3Bkb3duQXV0b1dpZHRoIiwib3B0aW9uXzIiLCJmaW5kX29wdGlvbl8yX2Zyb21fdmFsdWUiLCJzY3JpcHQkTSIsIlNlbGVjdFNlYXJjaCIsImVuYWJsZV9yZWZyZXNoIiwib2xkVmFsIiwic3RhcnRfcmVmcmVzaCIsImZfc2V0X3BpY2tlciIsInBpY2tlciIsInZhcl9uYW1lIiwiZmxhdHBpY2tyIiwiZW5hYmxlVGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lXzI0aHIiLCJjbGlja09wZW5zIiwib25DaGFuZ2UiLCJzZWxlY3RlZERhdGVzIiwiZGF0ZVN0ciIsImVuYWJsZV9hcHBseSIsIndyb25nX2RhdGUiLCJmbGF0X2JlZ2luX2RhdGUiLCJmbGF0X2VuZF9kYXRlIiwib25fc3RhdHVzX3VwZGF0ZWQiLCJzZWxlY3RlZF90aW1lX29wdGlvbiIsInVwZGF0ZV9mcm9tX2ludGVydmFsIiwiY2hhbmdlX3NlbGVjdF90aW1lIiwicmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzIiwidXRjX3NfdG9fc2VydmVyX2RhdGUiLCJzZXJ2ZXJfZGF0ZV90b19kYXRlIiwiZGF0ZSIsImVuZF9kYXRlX3RpbWVfdXRjIiwiYmVnaW5fZGF0ZV90aW1lX3V0YyIsImdldF91dGNfc2Vjb25kcyIsImVtaXRfZXBvY2hfY2hhbmdlIiwic2V0RGF0ZSIsInNldF9zZWxlY3RfdGltZV92YWx1ZSIsImVwb2NoX3N0YXR1cyIsImFkZF9zdGF0dXNfaW5faGlzdG9yeSIsImJlZ2luX3V0YyIsImVuZF91dGMiLCJzX3ZhbHVlcyIsImdldF9zZWxlY3RfdmFsdWVzIiwidG9sZXJhbmNlIiwiZW5kX3V0Y19zIiwiYmVnaW5fdXRjX3MiLCJpc19iZXR3ZWVuIiwibWluXzUiLCJzZWxlY3RfdGltZV92YWx1ZSIsIm1pbl8zMCIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJ5ZWFyIiwidGltZV9wcmVzZXRfbGlzdCIsIm5vd19zIiwiYmVnaW5fZGF0ZSIsImVuZF9kYXRlIiwicmVmcmVzaF9kYXRhIiwiaW50ZXJ2YWxfcyIsImdldF9sYXN0X2RheV9zZWNvbmRzIiwiZ2V0X2xhc3Rfd2Vla19zZWNvbmRzIiwiZ2V0X2xhc3RfbW9udGhfc2Vjb25kcyIsImdldF9sYXN0X3llYXJfc2Vjb25kcyIsInV0Y190cyIsInNldE1vbnRoIiwiaW50ZXJ2YWwiLCJjZW50ZXIiLCJqdW1wX3RpbWVfYmFjayIsImp1bXBfdGltZV9haGVhZCIsInByZXZpb3VzX2VuZCIsImhpc3RvcnlfbGFzdF9zdGF0dXMiLCJhcHBseV9zdGF0dXNfYnlfaGlzdG9yeSIsIl9ob2lzdGVkXzEiLCJfaG9pc3RlZF8yIiwiX2hvaXN0ZWRfMyIsIl9ob2lzdGVkXzQiLCJfaG9pc3RlZF81IiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsInBsYWNlaG9sZGVyIiwiX2hvaXN0ZWRfMTMiLCJfaG9pc3RlZF8xNSIsInN0eWxlSW5qZWN0IiwiaW5zZXJ0QXQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdHlsZVNoZWV0IiwiX3JlbmRlclNsb3QiLCJfY29tcG9uZW50X3NlbGVjdF9zZWFyY2giLCIkZXZlbnQiLCJvblNlbGVjdF9vcHRpb24iLCJfaG9pc3RlZF82IiwiX2hvaXN0ZWRfNyIsIl9jcmVhdGVDb21tZW50Vk5vZGUiLCJfaG9pc3RlZF84IiwiX2hvaXN0ZWRfOSIsInNjcmlwdCRMIiwicHJldmVudEVudGVyIiwiY2xvc2UiLCJfY3JlYXRlRWxlbWVudEJsb2NrIiwib25TdWJtaXQiLCJ0YWJpbmRleCIsIm1vZGFsX2lkIiwic25hcHNob3Rfc2VsZWN0ZWQiLCJhcHBseV90aW1lIiwiYXBwbHlfdGltZV90ZXh0Iiwic2F2ZV90aW1lIiwic2F2ZV90aW1lX3RleHQiLCJzbmFwc2hvdF9uYW1lIiwic25hcHNob3RzIiwib3JkZXJfYnkiLCJwYXR0ZXJuX3NpbmdsZXdvcmQiLCJkaXNhYmxlX2FkZCIsImRpc2FibGVfc2VsZWN0IiwiZ2V0X3BhZ2UiLCJsYXN0X29yZGVyX2J5Iiwic29ydF9zbmFwc2hvdHNfYnkiLCJsb2NhbGVDb21wYXJlIiwibG9hZF9zbmFwc2hvdHMiLCJhZGRfc25hcHNob3QiLCJwYXJhbXNfb2JqIiwic2VsZWN0X3NuYXBzaG90IiwiZGVsZXRlX3NuYXBzaG90IiwiZGVsZXRlX2FsbCIsInNhdmVfdGltZV9maWx0ZXJfdGV4dCIsIl9pMThuIiwiYmVnaW5fdGltZSIsImVuZF90aW1lIiwiYXBwbHlfdGltZV9maWx0ZXJfdGV4dCIsInNuYXBzaG90c19vYmoiLCJ1cGRhdGVfdGltZXNlcmllcyIsInRpbWVzZXJpZXMiLCJkZWxldGVfdHMiLCJieXRlc1RvU2l6ZUZvcm1hdHRlciIsImhhbmRsZXJJZEFkZExpbmsiLCJoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCIsInRvcF9hcHBsaWNhdGlvbiIsInRhYmxlX3ZhbHVlIiwidmlldyIsImRlZmF1bHRfc29ydGluZ19jb2x1bW5zIiwiY29sdW1uRGVmcyIsInRhcmdldHMiLCJjb2x1bW5OYW1lIiwic2VydmljZSIsInNjaGVtYSIsInRzX3NjaGVtYSIsImFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hIiwidHNfcXVlcnkiLCJjcmVhdGVMaW5rQ2FsbGJhY2siLCJvcmRlcmFibGUiLCJjcmVhdGVQcm9ncmVzc0JhciIsInJlc3BvbnNpdmVQcmlvcml0eSIsInJlbmRlcl9pZiIsImlzX2hpc3RvcnlfZW5hYmxlZCIsImp1bXBfdG9faGlzdG9yaWNhbCIsImw3X3Byb3RvIiwiaGlzdG9yaWNhbF9mbG93c191cmwiLCJzb3VyY2VfYXJyYXkiLCJwYXJhbXNfYXJyYXkiLCJzb3VyY2VfZGVmX2FycmF5Iiwic291cmNlX2RlZiIsIm9wZW4iLCJjcmVhdGVBY3Rpb25CdXR0b25zIiwidG9wX2NhdGVnb3JpZXMiLCJjYXRlZ29yeSIsImludGVyZmFjZV90b3BfdGFibGVzIiwiaG9zdF9yZWYiLCJhZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdCIsInRhZ3MiLCJzb3VyY2VzX3R5cGVzX2VuYWJsZWQiLCJpc19sb2NhbCIsImlzX2F2YWlsYWJsZSIsImhvc3RfdHNfYXZhaWxhYmxlIiwicF91cmwiLCJqdW1wX3RvX2hvc3QiLCJpZmlkIiwiaG9zdF91cmwiLCJkcm9wZG93biIsInRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UiLCJpbnRlcmZhY2VUb3BUYWJsZXMiLCJob3N0X3RvcF90YWJsZXMiLCJicHNGb3JtYXR0ZXIiLCJ0b3Bfc25tcF9pbnRlcmZhY2UiLCJ0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QiLCJkZXZpY2UiLCJpZl9pbmRleCIsImZfZ2V0X2xhYmVsIiwidHNfZ3JvdXAiLCJzb3VyY2VfbGFiZWwiLCJsYWJlbF90ZXh0Iiwic25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcyIsInVpX3R5cGVzIiwic291cmNlc191cmxfZWxfdG9fc291cmNlIiwiaWZuYW1lIiwicG9vbF9pZCIsImFtX2hvc3QiLCJhbSIsIm1lYXN1cmVtZW50IiwibWVhc3VyZW1lbnRfa2V5Iiwic291cmNlc190eXBlc190YWJsZXMiLCJpbnRlcmZhY2UiLCJob3N0VG9wVGFibGVzIiwic25tcF9pbnRlcmZhY2UiLCJzbm1wSW50ZXJmYWNlVG9wVGFibGVzIiwic25tcF9kZXZpY2UiLCJzb3VyY2VzX3R5cGVzIiwicmVnZXhfcGFnZV91cmwiLCJtYWluX3NvdXJjZV9kZWYiLCJyZWdleF90eXBlIiwic291cmNlc191cmwiLCJzb3VyY2VzX2Z1bmN0aW9uIiwidmFsdWVfdXJsIiwidmFsdWVfbWFwX3NvdXJjZXNfcmVzIiwiZGlzYWJsZV90c2tleSIsImZfZ2V0X3ZhbHVlX3VybCIsImZfc2V0X3ZhbHVlX3VybCIsInVpX3R5cGUiLCJpZF9ncm91cCIsIm1ldHJpY3NDb25zdHMiLCJzZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsIiwidGltZXNlcmllc19ncm91cHMiLCJwYXJhbXNfdGltZXNlcmllc19ncm91cHMiLCJwYXN0IiwiYXZnIiwicGVyY185NSIsIm1ldHJpY19zY2hlbWFfcXVlcnkiLCJtZXRyaWMiLCJ0aW1lc2VyaWVzX3BhcmFtIiwic291cmNlX3ZhbHVlX2FycmF5X3F1ZXJ5IiwiZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSIsInVybF90aW1lc2VyaWVzX2dyb3VwcyIsImdldF90c19ncm91cCIsImdldF90c19ncm91cF9pZCIsImdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzIiwibWV0cmljX3RzX3NjaGVtYSIsIm1ldHJpY19xdWVyeSIsImdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUiLCJnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJtZXRyaWNzIiwiZ2V0X21ldHJpY3MiLCJnZXRfZGVmYXVsdF9tZXRyaWMiLCJnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAiLCJ0c19ncm91cF91cmxfcGFyYW0iLCJpbmZvIiwic291cmNlX3R5cGVfaWQiLCJzb3VyY2VfdmFsdWVfYXJyYXkiLCJtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5IiwidGltZXNlcmllc191cmwiLCJnZXRfc291cmNlX3R5cGVfZnJvbV9pZCIsImdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSIsImdldF9tZXRyaWNfZnJvbV9zY2hlbWEiLCJ0c191cmxfYXJyYXkiLCJ0c191cmwiLCJnZXRfdGltZXNlcmllcyIsImVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QiLCJzZXRfc291cmNlX3R5cGVfaWRfZ3JvdXAiLCJtZXRyaWNfaWQiLCJzb3VyY2VfZGVmX3ZhbHVlIiwiZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5IiwiZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QiLCJzb3VyY2VfdmFsdWVfZGljdCIsInNvdXJjZV92YWx1ZSIsInNvdXJjZXMiLCJnZXRfc291cmNlcyIsImNhY2hlX3NvdXJjZXMiLCJmX21hcF9zb3VyY2VfZWxlbWVudCIsInNvcnRBbHBoYWJldGljYWxseSIsInNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybCIsInNvdXJjZV92YWx1ZV9vYmplY3QiLCJjYWNoZV9tZXRyaWNzIiwibGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwiLCJjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsIiwiZ2V0X21ldHJpY3NfdXJsIiwic291cmNlX2FycmF5X2tleSIsImdldF9tZXRyaWNfa2V5IiwiZGVmYXVsdF92aXNpYmxlIiwibWV0cmljX3NjaGVtYSIsImdldF9tZXRyaWNfcXVlcnlfZnJvbV90c19xdWVyeSIsInNvdXJjZV9kZWZfZGljdCIsInNfZGVmIiwidHNfcXVlcnlfYXJyYXkiLCJ0c192YWxfa2V5IiwiZGVmYXVsdF9tZXRyaWMiLCJtZXRyaWNzTWFuYWdlciIsImdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybCIsImdyb3VwcyIsInRzVG9BcGV4T3B0aW9ucyIsInRzT3B0aW9ucyIsInN0YXJ0VGltZSIsImQyIiwibWVhc3VyZV91bml0IiwiZ2V0U2VyaWVJZCIsImdldFlheGlzTmFtZSIsIm1lYXN1cmVVbml0IiwiZ2V0U2VyaWVOYW1lIiwidHNHcm91cCIsImV4dGVuZFNlcmllc05hbWUiLCJuYW1lX21vcmVfc3BhY2UiLCJzb3VyY2VfaW5kZXgiLCJnZXRNYWluU291cmNlRGVmSW5kZXgiLCJnZXRZYXhpc0lkIiwiZGVmYXVsdENvbG9ycyIsImdyb3Vwc09wdGlvbnNNb2Rlc0VudW0iLCJnZXRHcm91cE9wdGlvbk1vZGUiLCJncm91cF9pZCIsInRzQXJyYXlUb0FwZXhPcHRpb25zQXJyYXkiLCJ0c09wdGlvbnNBcnJheSIsInRzR3JwdXBzQXJyYXkiLCJncm91cHNPcHRpb25zTW9kZSIsInRzQ29tcGFyZSIsImFwZXhPcHRpb25zQXJyYXkiLCJ0c0FycmF5VG9BcGV4T3B0aW9ucyIsInNldExlZnRQYWRkaW5nIiwidHNEaWN0IiwieWF4aXNJZCIsInRzRWwiLCJ0c0FycmF5IiwidHNPcHRpb25zQXJyYXkyIiwidHNHcnB1cHNBcnJheTIiLCJhcGV4T3B0aW9ucyIsIm9uZUNoYXJ0IiwibWluV2lkdGgiLCJzZXJpZXNBcnJheSIsInlheGlzQXJyYXkiLCJ5YXhpc0RpY3QiLCJmb3JtYXR0ZXJEaWN0IiwiZ2V0QWRkU2VyaWVzTmFtZVNvdXJjZSIsImZvcmNlRHJhd1R5cGUiLCJzZXJpZXNBcGV4Iiwic2VyaWVzS2V5cyIsInNrIiwic01ldGFkYXRhIiwic2NhbGFyIiwiaW52ZXJ0X2RpcmVjdGlvbiIsImZNYXBEYXRhIiwidHNWaXNpYmlsaXR5IiwiZXh0X2xhYmVsIiwic05hbWUiLCJkcmF3VHlwZSIsImRyYXdfdHlwZSIsInNBcGV4IiwiY29sb3JQYWxldHRlIiwiYWRkaXRpb25hbF9zZXJpZXMiLCJzZXJpZXNEYXRhIiwiZGFzaGVkIiwiZkJ1aWxkQ29uc3RhbnRTZXJpZSIsInByZWZpeCIsInN0YXRpc3RpY3MiLCJieV9zZXJpZSIsImF2ZXJhZ2UiLCJnZXRTZXJpZXNJbkFwZXhGb3JtYXQiLCJ5YXhpc0FwZXgiLCJpbnZlcnREaXJlY3Rpb24iLCJjb3VudFlheGlzSWQiLCJtZEtleSIsInlheGlzU2VyaWVzTmFtZSIsImFicyIsInNlcmllc05hbWUiLCJvcHBvc2l0ZSIsImdldFlheGlzSW5BcGV4Rm9ybWF0IiwiY291bnQwIiwiY291bnQxIiwiY29sb3JzMCIsImNvbG9yczEiLCJkM3Y3Iiwic2NoZW1lQ2F0ZWdvcnkxMCIsInNldFNlcmllc0NvbG9yczIiLCJ5QXhpc0FycmF5IiwieUF4aXNBcnJheURpY3QiLCJtaW5NYXhEaWN0IiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJtaW5NYXgiLCJmQWRkT3JTdWJ0cmFjM1BlcmMiLCJpc0FkZCIsIm9uZVBlcmMiLCJ5QXJyYXkiLCJtaW5fYWJzIiwibWF4X2FicyIsInNldE1pbk1heFlheGlzIiwib3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibWFya2VycyIsInN0cm9rZUNvbG9ycyIsImxpbmVDYXAiLCJkYXNoQXJyYXkiLCJzaG93Rm9yU2luZ2xlU2VyaWVzIiwiaG9yaXpvbnRhbEFsaWduIiwiYnVpbGRDaGFydE9wdGlvbnMiLCJnZXRUc1F1ZXJ5Iiwibm90X21ldHJpY19xdWVyeSIsInRzUXVlcnkiLCJnZXRUc0NoYXJ0c09wdGlvbnMiLCJodHRwUHJlZml4IiwiZXBvY2hTdGF0dXMiLCJ0aW1lc2VyaWVzR3JvdXBzIiwiaXNQcm8iLCJ0c0NoYXJ0c09wdGlvbnMiLCJwYXJhbXNFcG9jaE9iaiIsInBhcmFtc0NoYXJ0IiwiaW5pdGlhbF9wb2ludCIsInRzX2NvbXBhcmUiLCJ0c0RhdGFVcmxNdWx0aSIsInRzX3JlcXVlc3RzIiwibWFpbl9zb3VyY2VfaW5kZXgiLCJwT2JqIiwidHNrZXkiLCJ0c0RhdGFVcmwiLCJwYXJhbXNVcmxSZXF1ZXN0IiwidGltZXNlcmllc1V0aWxzIiwiVXRpbHMiLCJnZXRfZGF0YV9wYXR0ZXJuIiwicl9pcHY0Iiwicl9pcHY0X3ZsYW4iLCJyX2lwdjYiLCJyX2lwdjZfdmxhbiIsInJlcGxhY2VBbGwiLCJuZXR3b3JrX2lwdjQiLCJpcHY0X2NpZHIiLCJpcHY0X2NpZHJfdmxhbiIsIm5ldHdvcmtfaXB2NiIsInJlZ2V4VmFsaWRhdGlvbiIsInNlbGVjdF9zZWFyY2hfbWV0cmljcyIsImN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSIsInNlbGVjdGVkX3NvdXJjZV90eXBlIiwic291cmNlc19hcnJheSIsInNlbGVjdGVkX3NvdXJjZV9hcnJheSIsInNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5Iiwic2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCIsInNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXkiLCJpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZCIsImVuYWJsZV9hcHBseV9zb3VyY2UiLCJyZ190ZXh0Iiwic291cmNlX3RleHQiLCJoaWRlX3NvdXJjZXMiLCJzZWxlY3RlZF9tZXRyaWMiLCJ0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZCIsInRpbWVzZXJpZXNfdG9fYWRkIiwid2FpdF9pbml0Iiwic291cmNlX3R5cGVfZW5hYmxlZCIsImNoYW5nZV9zb3VyY2VfdHlwZSIsInVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZCIsImNoYW5nZV9hY3Rpb24iLCJyZWdleF9zb3VyY2VfYXJyYXkiLCJyZWdleF9zb3VyY2UiLCJzZXRfcmVnZXgiLCJzZCIsInNldF9oaWRlX3NvdXJjZXMiLCJzb3VyY2VzX2FycmF5X3RlbXAiLCJkZWZhdWx0X3NvdXJjZV9hcnJheSIsInNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic2V0X3NvdXJjZXNfYXJyYXkiLCJzZXRfbWV0cmljcyIsImFwcGx5X3NvdXJjZV9hcnJheSIsImNoYW5nZV9zb3VyY2VfYXJyYXkiLCJjaGFuZ2Vfc2VsZWN0ZWRfc291cmNlIiwiZGVmYXVsdF9jb25maWciLCJ0c19pZCIsImdldF90aW1lc2VyaWVzX2dyb3VwX25hbWUiLCJzb3VyY2VfdHlwZV9uYW1lIiwic291cmNlX2RlZl9pbmRleCIsImdldF90aW1lc2VyaWVzX2dyb3VwX2lkIiwidHNfZ3JvdXBfaWQiLCJhZGRfdHNfZ3JvdXAiLCJ0c19ncm91cF90b19hZGQiLCJlbWl0X2FwcGx5IiwidHNfZ3JvdXBfaW5kZXgiLCJzZXRfdGltZXNlcmllc19ncm91cHMiLCJzY3JpcHQkSCIsIk1vZGFsIiwiZGVzY3JpcHRpb24iLCJpbnZhbGlkX2JwZiIsImJwZl9maWx0ZXIiLCJleHRyYWN0X25vdyIsInNob3dfbWVudSIsImlkX21vZGFsIiwicGFkMl9udW1iZXIiLCJmb3JtYXRfZGF0ZSIsImRfbXMiLCJ2YWx1ZU9mIiwidXJsX3JlcXVlc3Rfb2JqIiwidXJsX3JlcXVlc3RfcGFyYW1zIiwiam9iX2lkIiwiYWxlcnRfdGV4dF9odG1sIiwicGFnZV9uYW1lIiwidGV4dF9odG1sIiwiYnBmIiwiZGF0ZV9iZWdpbiIsImRhdGVfZW5kIiwiZGVzYyIsInNob3dfaGlkZV9tZW51IiwiX2hvaXN0ZWRfMTAiLCJfaG9pc3RlZF8xMiIsIl9ob2lzdGVkXzE0IiwiX2hvaXN0ZWRfMTciLCJfY3JlYXRlQmxvY2siLCJfY29tcG9uZW50X21vZGFsIiwib25BcHBseSIsIl9ub3JtYWxpemVDbGFzcyIsIl9jcmVhdGVUZXh0Vk5vZGUiLCJfd2l0aERpcmVjdGl2ZXMiLCJfaG9pc3RlZF8xMSIsIl90b0Rpc3BsYXlTdHJpbmciLCJhdXRvY29tcGxldGUiLCJzcGVsbGNoZWNrIiwibWFyZ2luIiwiX2hvaXN0ZWRfMTYiLCJfaG9pc3RlZF8xOCIsIl9ob2lzdGVkXzE5IiwiZm9vdGVyIiwiZmlsZW5hbWVfdmFsaWRhdGlvbiIsImVuYWJsZV9kb3dubG9hZCIsImV4dCIsInNjcmlwdCRGIiwic2hvd19hbGVydCIsImFsZXJ0X3R5cGUiLCJiYXNlX3BhcmFtcyIsInRhYmxlX2lkIiwiZXh0ZW5kX2NvbmZpZyIsInNlcnZlclNpZGUiLCJzY3JvbGxYIiwic2VhcmNoaW5nIiwiZW5hYmxlX3NlYXJjaCIsIm9yZGVyIiwiY29sdW1uc19jb25maWciLCJhdXRvV2lkdGgiLCJkYXRhX3VybCIsInRhYmxlQXBpIiwib0luc3RhbmNlIiwiYXBpIiwib3JkZXJDb2x1bW5JbmRleCIsIm9yZGVyQ29sdW1uTmFtZSIsIm1hcF9zZWFyY2giLCJiZWZvcmVTZW5kIiwic2hvd092ZXJsYXlzIiwiZHJhd0NhbGxiYWNrIiwiaGlkZU92ZXJsYXlzIiwidGFibGVfY29uZmlnIiwiZ2V0U3RkRGF0YXRhYmxlQ29uZmlnIiwidGFibGVfYnV0dG9ucyIsImV4dGVuZENvbmZpZyIsIkRhdGFUYWJsZSIsImZpbHRlcl9idXR0b25zIiwiY3Vycl92YWx1ZSIsIm51bV9ub25fYWN0aXZlX2VudHJpZXMiLCJidWlsZFVSTCIsImxvYWREYXRhdGFibGUiLCJkZWxldGVfYnV0dG9uX2hhbmRsZXJzIiwiZGVsZXRlQnV0dG9uSGFuZGxlcnMiLCJpc19kZXN0cm95ZWQiLCJkZXN0cm95X3RhYmxlIiwiaWRfZGF0ZV90aW1lX3BpY2tlciIsImNoYXJ0cyIsImRhdGVfdGltZV9waWNrZXIiLCJ0b3BfdGFibGVfcmVmIiwibW9kYWxfdGltZXNlcmllcyIsIm1vZGFsX3NuYXBzaG90IiwibW9kYWxfZG93bmxvYWRfZmlsZSIsImVuYWJsZV9zdGF0c190YWJsZSIsImNoYXJ0c19vcHRpb25zX2l0ZW1zIiwiZ3JvdXBzX29wdGlvbnNfbW9kZXMiLCJjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGUiLCJncm91cHNfbW9kZSIsImluaXRfZ3JvdXBzX29wdGlvbl9tb2RlIiwibGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQiLCJjdXN0b21fbWV0cmljIiwicGFnZV9zbmFwc2hvdHMiLCJ0c19tZW51X3JlYWR5Iiwic2V0X2RlZmF1bHRfc291cmNlX29iamVjdF9pbl91cmwiLCJwdXNoX2N1c3RvbV9tZXRyaWMiLCJsb2FkX3BhZ2Vfc3RhdHNfZGF0YSIsImZvcmNlX3JlZnJlc2giLCJjYWNoZV9zbmFwc2hvdHMiLCJlbmFibGVfc25hcHNob3RzIiwibWV0cmljc19zbmFwc2hvdHMiLCJpc19zbmFwc2hvdCIsImdldF9zbmFwc2hvdHNfbWV0cmljcyIsInNtIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljIiwic2VsZWN0X21ldHJpYyIsInVybF9wYXJhbWV0ZXJzIiwidGltZXNlcmllc191cmxfcGFyYW1zIiwiZ2V0X3NlbGVjdGVkX3RpbWVzZXJpZXNfZ3JvdXBzIiwibG9hZF9zZWxlY3RlZF9tZXRyaWNfcGFnZV9zdGF0c19kYXRhIiwicmVmcmVzaF9tZXRyaWNzIiwiZXBvY2hfY2hhbmdlIiwibmV3X2Vwb2NoIiwiaXNfbnRvcF9wcm8iLCJzZWxlY3RlZF90b3BfdGFibGUiLCJ0YWJsZV9jb25maWdfZGVmIiwiZ2V0X3RvcF90YWJsZV91cmwiLCJ0YWJsZV9kZWYiLCJyZWZyZXNoX3RvcF90YWJsZSIsImNoYXJ0X3JlbG9hZGVkIiwic2hvd19tb2RhbF9zbmFwc2hvdCIsInNob3dfbWFuYWdlX3RpbWVzZXJpZXMiLCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJjaGFydF9pbmRleCIsInRzX2NoYXJ0c19vcHRpb25zIiwicmVmcmVzaF9zbmFwc2hvdHMiLCJhcHBseV9tb2RhbF90aW1lc2VyaWVzIiwiY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGUiLCJyZWxvYWRfY2hhcnRzX2RhdGEiLCJyZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMiLCJyZWZyZXNoZWRfdGltZV9pbnRlcnZhbCIsImdldF90c19jb21wYXJlIiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzX3NvdXJjZV9sYWJlbCIsImNoYXJ0c19vcHRpb25zIiwidXBkYXRlX2NoYXJ0cyIsInNldF9jaGFydHNfb3B0aW9uc19pdGVtcyIsImV4dGVuZF9zZXJpZV9uYW1lIiwiZGlzYWJsZV9zdGF0cyIsImZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlIiwic3RhdHNfcm93cyIsInRzX3N0YXRzIiwic19tZXRhZGF0YSIsInRvdGFsX2Zvcm1hdHRlcl90eXBlIiwidG90YWxfZm9ybWF0dGVyIiwidG90YWwiLCJtYXhfdmFsIiwibWluX3ZhbCIsInNldF9zdGF0c19yb3dzIiwidHNfZ3JvdXBfZGljdCIsInRvcF90YWJsZV9pZF9kaWN0IiwidG9wX3RhYmxlX29wdGlvbnMiLCJtYWluX3NvdXJjZSIsInNvdXJjZV90eXBlX3RhYmxlcyIsImVuYWJsZXNfdGFibGVfdmFsdWUiLCJzb3VyY2VzX3R5cGVzX3RvcF9lbmFibGVkIiwicmVuZGVyX2lmX2NvbnRleHQiLCJzZXRfdG9wX3RhYmxlX29wdGlvbnMiLCJ0YWJsZV92aWV3IiwicF9vYmoiLCJkZXRhaWxfdmlldyIsIm5ld19jaGFydHMiLCJzdGF0c19jb2x1bW5zIiwianVtcF90b19oaXN0b3JpY2FsX2Zsb3dzIiwiaGlzdG9yaWNhbF91cmwiLCJtb2RhbF90cmFmZmljX2V4dHJhY3Rpb24iLCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsInNob3dfbW9kYWxfZG93bmxvYWRfZmlsZSIsImNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UiLCJyZWplY3QiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiY2hhcnRfaW1hZ2VfYXJyYXkiLCJjYW52YXMiLCJjYW52YXNfY29udGV4dCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJzY3JpcHQkQiIsInRhYl9saXN0Iiwib2xkX3RhYiIsInRtcCIsImNoYW5nZV90YWIiLCJkZWxldGVfIiwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCIsInNjcmlwdCR6IiwiZGF0YXRhYmxlIiwiRGF0YXRhYmxlIiwiTW9kYWxEZWxldGVDb25maXJtIiwiVGFiTGlzdCIsInBhZ2VfY3NyZiIsInRhYmxlX2ZpbHRlcnMiLCJhc3NldF9mYW1pbHkiLCJEYXRhdGFibGVWdWUiLCJkYXRhdGFibGVCdXR0b24iLCJnZXRfdXJsIiwicmVsb2FkX3RhYmxlIiwidG1wX3BhcmFtcyIsImRlZmF1bHREYXRhdGFibGVDb25maWciLCJhc3NldF90YWJsZV90YWIiLCJjb25maWdEZXZpY2VzIiwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQiLCJjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyIsImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkiLCJzdGFydF9kYXRhdGFibGUiLCJoaWRlX2Ryb3Bkb3ducyIsImdldF9hY3RpdmVfdGFibGUiLCJzaG93X2RlbGV0ZV9hbGxfZGlhbG9nIiwidGl0bGVfZGVsZXRlIiwiYm9keV9kZWxldGUiLCJ0aXRsZV9kb3dubG9hZCIsImJvZHlfZG93bmxvYWQiLCJjbGlja19pdGVtIiwiX29wZW5CbG9jayIsIl9jb21wb25lbnRfbW9kYWxfZGVsZXRlX2NvbmZpcm0iLCJvbkRlbGV0ZSIsIl9jb21wb25lbnRfdGFiX2xpc3QiLCJvbkNsaWNrX2l0ZW0iLCJfY29tcG9uZW50X2RhdGF0YWJsZSIsInNjcmlwdCR5IiwiaXNfYWRtaW4iLCJkZWZhdWx0T3B0aW9ucyIsImF1dG9SZXNpemUiLCJzaGFwZSIsInNjYWxpbmciLCJzaGFkb3ciLCJlZGdlcyIsImluaGVyaXQiLCJzbW9vdGgiLCJyb3VuZG5lc3MiLCJpbnRlcmFjdGlvbiIsInRvb2x0aXBEZWxheSIsImhpZGVFZGdlc09uRHJhZyIsImhpZGVFZGdlc09uWm9vbSIsImhvdmVyIiwicGh5c2ljcyIsImJhcm5lc0h1dCIsInNwcmluZ0NvbnN0YW50IiwiYXZvaWRPdmVybGFwIiwiZ3Jhdml0YXRpb25hbENvbnN0YW50IiwiZGFtcGluZyIsImNlbnRyYWxHcmF2aXR5Iiwic3RhYmlsaXphdGlvbiIsIm9ubHlEeW5hbWljRWRnZXMiLCJ1bmtub3duIiwicHJpbnRlciIsImZhY2UiLCJ3ZWlnaHQiLCJ2aWRlbyIsIndvcmtzdGF0aW9uIiwibGFwdG9wIiwidGFibGV0IiwicGhvbmUiLCJ0diIsIm5ldHdvcmtpbmciLCJ3aWZpIiwibmFzIiwibXVsdGltZWRpYSIsImlvdCIsIm50b3BuZ19tYXBfbWFuYWdlciIsInNlcnZpY2VfaWQiLCJuZXdfc3RhdGUiLCJzZXJ2aWNlX3N0YXR1cyIsImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCIsInNjcmlwdCR4Iiwic2VydmljZV9hY2NlcHRhbmNlIiwic2VydmljZV90YWJsZV90YWIiLCJjcmVhdGVkQ2VsbCIsImFwcGx5Q2VsbFN0eWxlIiwiY3JlYXRlX2FjdGlvbl9idXR0b25zIiwidG9nZ2xlX2FsbG93ZWRfc3RhdGUiLCJoYXNoX2lkIiwidG9nZ2xlX2RlbmllZF9zdGF0ZSIsInRvZ2dsZV91bmRlY2lkZWRfc3RhdGUiLCJjdXJyZW50U3RhdHVzIiwiYWNjZXB0YW5jZSIsImFsbG93ZWRCdXR0b24iLCJkZW5pZWRCdXR0b24iLCJ1bmRlY2lkZWRCdXR0b24iLCJzd2l0Y2hfdG9fc3RhbmRhcmQiLCJzd2l0Y2hfdG9fY2VudHJhbGl0eSIsImRhdGFSZXF1ZXN0IiwibWFwX2lkIiwibm9kZXNfZGF0YXNldCIsImVkZ2VzX2RhdGFzZXQiLCJtYXhfZW50cmllcyIsInVwZGF0ZV92aWV3X3N0YXRlX2lkIiwibG9hZF9zY2FsZSIsImdldEVsZW1lbnRCeUlkIiwibWF4X2VudHJ5X3JlYWNoZWQiLCJEYXRhU2V0IiwiZGF0YXNldHMiLCJlbXB0eV9uZXR3b3JrIiwiTmV0d29yayIsInNhdmVfdG9wb2xvZ3lfdmlldyIsInNldF9ldmVudF9saXN0ZW5lciIsIm9sZFNjYWxlIiwibG9hZEVsZW1lbnRTY2FsZSIsInNhdmVFbGVtZW50U2NhbGUiLCJ0bXBIb3N0Iiwiem9vbV9pbl9hbmRfc2F2ZV90b3BvbG9neSIsImV2ZW50X2xpc3RlbmVycyIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9ucyIsImdldFNjYWxlIiwiZ2V0Vmlld1Bvc2l0aW9uIiwibW92ZVRvIiwiTUlOX1NDQUxFIiwiYW5pbWF0aW9uIiwiZWFzaW5nRnVuY3Rpb24iLCJzZXREYXRhIiwiaXNfbWF4X2VudHJ5X3JlYWNoZWQiLCJhdXRvbGF5b3V0Iiwic3RhYmlsaXplIiwidXBkYXRlX3VybF9wYXJhbXMiLCJhdXRvbGF5b3V0XyIsImNoYW5nZV9maWx0ZXJfZXZlbnQiLCJzY3JpcHQkdSIsIk5ldHdvcmtNYXAiLCJNb2RhbEF1dG9sYXlvdXRDb25maXJtIiwiYWxsX2ZpbHRlcl9saXN0IiwiTmV0d29ya01hcFZ1ZSIsImZpbHRlcl9uYW1lIiwiZmlsdGVyX2xpc3QiLCJhY3RpdmVfZmlsdGVyIiwiYWN0aXZlX2ZpbHRlcl9saXN0IiwiZG93bmxvYWRfdXJsIiwic3RhcnRfdmlzX25ldHdvcmtfbWFwIiwibWF4X2VudHJpZXNfcmVhY2hlZCIsInJlbG9hZF9tYXAiLCJ1cGRhdGVfYW5kX3JlbG9hZF9tYXAiLCJnZXRfbWFwIiwic2hvd19hdXRvbGF5b3V0X2RpYWxvZyIsInRpdGxlX2F1dG9sYXlvdXQiLCJib2R5X2F1dG9sYXlvdXQiLCJub19zZXJ2aWNlc19tZXNzYWdlIiwibWF4X2VudHJ5X3RpdGxlIiwiX0ZyYWdtZW50IiwiX3JlbmRlckxpc3QiLCJfY29tcG9uZW50X21vZGFsX2F1dG9sYXlvdXRfY29uZmlybSIsIm9uQXV0b2xheW91dCIsIl9jb21wb25lbnRfbmV0d29ya19tYXAiLCJlbXB0eV9tZXNzYWdlIiwic2NyaXB0JHQiLCJ1cGRhdGVkX3VybF9wYXJhbXMiLCJzY3JpcHQkcyIsInNjcmlwdCRyIiwibWFpbl90aXRsZSIsInNlY29uZGFyeV90aXRsZV9saXN0IiwiaGVscF9saW5rIiwiaXRlbXNfdGFibGUiLCJmbG9hdCIsImJhZGdlX251bSIsImlucHV0X21hY19saXN0IiwiaW5wdXRfdHJpZ2dlcl9hbGVydHMiLCJhZGRfIiwibWFjX2xpc3QiLCJ0cmlnZ2VyX2FsZXJ0cyIsImlucHV0X21hY19hZGRyZXNzX25hbWUiLCJpbnB1dF9kZXZpY2Vfc3RhdHVzIiwiZWRpdF8iLCJtYWNfYWxpYXMiLCJtYWNfc3RhdHVzIiwibWFjX2FkZHJlc3NfbGFiZWwiLCJ0cmlnZ2VyX2FsZXJ0Iiwic2NyaXB0JG8iLCJQYWdlTmF2YmFyIiwiTW9kYWxBZGREZXZpY2VFeGNsdXNpb24iLCJNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24iLCJpc19jbGlja2hvdXNlX2VuYWJsZWQiLCJzaG93X2FkZF9kZXZpY2VfZGlhbG9nIiwic29ydGFibGUiLCJzZWFyY2hhYmxlIiwic2NyaXB0IiwiZGVsZXRlX2hhbmRsZXIiLCJzaG93X2RlbGV0ZV9kaWFsb2ciLCJlZGl0X2hhbmRsZXIiLCJzaG93X2VkaXRfZGV2aWNlX2RpYWxvZyIsImp1bXBfdG9faGlzdG9yaWNhbF9mbG93IiwiZmlyc3Rfc2VlbiIsImxhc3Rfc2VlbiIsIm1hY19hZGRyZXNzIiwiaXNDbGlja2hvdXNlRW5hYmxlZCIsImNvbmZpZ19kZXZpY2VzIiwibGVhcm5pbmdfc3RhdHVzIiwibmF2YmFyX2NvbnRleHQiLCJ0aXRsZV9kZWxldGVfYWxsIiwiYm9keV9kZWxldGVfYWxsIiwidGl0bGVfYWRkIiwiYm9keV9hZGQiLCJmb290ZXJfYWRkIiwibGlzdF9ub3Rlc19hZGQiLCJ0aXRsZV9lZGl0IiwibGVhcm5pbmdfbWVzc2FnZSIsInJvd190b19kZWxldGUiLCJyb3dfdG9fZWRpdCIsImFkZF9kZXZpY2UiLCJkZWxldGVfcm93IiwiZWRpdF9yb3ciLCJsZWFybmluZ19kb25lIiwiX2NvbXBvbmVudF9wYWdlX25hdmJhciIsIl9jb21wb25lbnRfbW9kYWxfYWRkX2RldmljZV9leGNsdXNpb24iLCJsaXN0X25vdGVzIiwib25BZGQiLCJfY29tcG9uZW50X21vZGFsX2VkaXRfZGV2aWNlX2V4Y2x1c2lvbiIsIm9uRWRpdCIsInNjcmlwdCRuIiwic2NyaXB0JG0iLCJjaGFuZ2VfbWFwX2V2ZW50Iiwic2NyaXB0JGwiLCJQYWdlUGVyaW9kaWNpdHlNYXAiLCJQYWdlUGVyaW9kaWNpdHlUYWJsZSIsIlBhZ2VBc3NldE1hcCIsIlBhZ2VBc3NldFRhYmxlIiwiUGFnZVNlcnZpY2VNYXAiLCJQYWdlU2VydmljZVRhYmxlIiwiYmFzZV91cmxfcGFyYW1zIiwibmF2YmFyX2luZm8iLCJzZXJ2aWNlX21hcF9maWx0ZXJfbGlzdCIsInNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3QiLCJwZXJpb2RpY2l0eV9tYXBfZmlsdGVyX2xpc3QiLCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdCIsImFzc2V0X21hcF9maWx0ZXJfbGlzdCIsImFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0IiwiYWN0aXZlX3RhYiIsInVwZGF0ZWRfdmlldyIsImZvcm1hdF9uYXZiYXIiLCJmb3JtYXRfbmF2YmFyX3RpdGxlIiwic2VsZWN0ZWRfaWZhY2UiLCJzZWxlY3RlZF9ob3N0IiwibmF2YmFyX25vZGUiLCJnZXRfYWN0aXZlX3RhYiIsImlzX2FjdGl2ZSIsInRhcmdldF9ibGFuayIsIl9jb21wb25lbnRfcGFnZV9zZXJ2aWNlX21hcCIsIl9jb21wb25lbnRfcGFnZV9zZXJ2aWNlX3RhYmxlIiwiX2NvbXBvbmVudF9wYWdlX3BlcmlvZGljaXR5X21hcCIsIl9jb21wb25lbnRfcGFnZV9wZXJpb2RpY2l0eV90YWJsZSIsIl9jb21wb25lbnRfcGFnZV9hc3NldF9tYXAiLCJzYW5rZXlfY2hhcnRfcmVmIiwic2Fua2V5X3NpemUiLCJzY2FsZU9yZGluYWwiLCJub2Rlc19hZGRlZF9kaWN0IiwiZl9hZGRfbm9kZSIsIm5vZGVfaWQiLCJuZXdfbm9kZSIsImZfYWRkX2xpbmsiLCJuZXdfbGluayIsInNvdXJjZV9saW5rIiwic291cmNlX2NvbG9yIiwidGFyZ2V0X2xpbmsiLCJ0YXJnZXRfY29sb3IiLCJ3cmFwX2dyYXBoX3JzcCIsImxpbmtfY29sb3IiLCJ0YXJnZXRfbm9kZSIsInNvdXJjZV9ub2RlIiwiZ2V0X3NhbmtleV9kYXRhIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0X3NpemUiLCJzYW5rZXkiLCJub2RlQWxpZ24iLCJzYW5rZXlDZW50ZXIiLCJub2RlV2lkdGgiLCJub2RlUGFkZGluZyIsImV4dGVudCIsInNhbmtleWltcGwiLCJjYWxjdWxhdGVfc2Fua2V5IiwieDAiLCJ5MCIsImVhc2VMaW5lYXIiLCJ5MSIsInJnYiIsImRhcmtlciIsImxnIiwic2Fua2V5TGlua0hvcml6b250YWwiLCJkcmF3X3NhbmtleSIsImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50Iiwic2NyaXB0JGoiLCJDaGFydCIsImlzX2NoX2VuYWJsZWQiLCJhcHBsaWNhdGlvbnNfdGFiIiwiUGFnZVZ1ZSIsInBlcmNlbnRhZ2Vfc2VudCIsImJ5dGVzX3NlbnQiLCJ0b3RfYnl0ZXMiLCJwZXJjZW50YWdlX3JjdmQiLCJieXRlc19yY3ZkIiwiY3JlYXRlQnJlYWtkb3duIiwiYWRkX2FjdGlvbl9jb2x1bW4iLCJhcHBsaWNhdGlvbnNDb25maWciLCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMiLCJjYXRlZ29yeV9pZCIsIm1vcmVfcHJvdG9zIiwiY2F0ZWdvcmllc0NvbmZpZyIsImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMiLCJjaGFydF9vcHRpb24iLCJ0cmFmZmljX3RhYmxlIiwiY29uZmlnX3RyYWZmaWNfdGFibGUiLCJ0b3RhbF9ieXRlcyIsInRyYWZmaWNDb25maWciLCJjaGFydF9kb25lIiwidG1wMiIsIm92ZXJsYXkiLCJoaWRlX2xvYWRpbmciLCJzaG93X2xvYWRpbmciLCJub19kYXRhIiwic2V0X3NhbmtleV9kYXRhIiwic2Fua2V5X2RhdGEiLCJzYW5rZXlEYXRhIiwiZDNfbm9kZXMiLCJzY2FsZUV4dGVudCIsInpvb21lZCIsImRhdGFfb2JqIiwic3ViamVjdCIsImRyYWdTdGFydCIsImRyYWdNb3ZlIiwibGlua3NfZDMiLCJsZ19kMyIsIl9feCIsIl9feSIsIl9feDAiLCJfX3kwIiwiX194MSIsIl9feTEiLCJzZXRfbm9fZGF0YV9mbGFnIiwic2V0X25vX2RhdGEiLCJkZWZhdWx0U2Fua2V5U2V0dGluZ3MiLCJub2RlSWQiLCJub2RlVGl0bGUiLCJub2RlR3JvdXAiLCJzYW5rZXlKdXN0aWZ5Iiwibm9kZUxhYmVsIiwibm9kZUxhYmVsUGFkZGluZyIsIm5vZGVTdHJva2UiLCJsaW5rU291cmNlIiwibGlua1RhcmdldCIsImxpbmtTb3VyY2VOb2RlIiwibGlua1RhcmdldE5vZGUiLCJsaW5rUGF0aCIsImxpbmtWYWx1ZSIsImxpbmtMaW5rIiwibGlua1RpdGxlIiwibGlua0NvbG9yIiwic291cmNlQ29sb3IiLCJ0YXJnZXRDb2xvciIsInNvdXJjZUxpbmsiLCJ0YXJnZXRMaW5rIiwibGlua1N0cm9rZU9wYWNpdHkiLCJsaW5rTWl4QmxlbmRNb2RlIiwic2NoZW1lVGFibGVhdTEwIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwiZm9ybWF0Rmxvd1RpdGxlIiwic2Fua2V5VXRpbHMiLCJnZXRfZGF0YSIsImdldERlZmF1bHRTYW5rZXlTZXR0aW5ncyIsInNhbmtleV9jaGFydCIsImxvYWRpbmciLCJzYW5rZXlfZm9ybWF0X2xpc3QiLCJmaWx0ZXJfaWNvbiIsImFjdGl2ZV9ob3N0c190eXBlIiwib25fbm9kZV9jbGljayIsImlzX2xpbmtfbm9kZSIsInVybF9vYmoiLCJ1cGRhdGVfc2Fua2V5IiwiZW50cnkiLCJob3N0c190eXBlIiwiZ2V0X3NhbmtleV91cmwiLCJncmFwaCIsImZfbG9nX2xpbmsiLCJzb3VyY2Vfbm9kZV9pZCIsInRhcmdldF9ub2RlX2lkIiwiZl9sb2ciLCJub2RlX2RpY3QiLCJmX2ZpbHRlciIsInRha2VfZWxlbWVudCIsImZpbHRlcl9sb2ciLCJnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlIiwibWFrZV9jb21wbGV0ZV9ncmFwaCIsIm1haW5fbm9kZV9pZCIsImZfZ2V0X2xpbmtfZGlyZWN0aW9uIiwiZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQiLCJkaXJlY3Rpb24iLCJncmFwaDJfbm9kZV9kaWN0IiwiZ3JhcGgyIiwibWFpbl9ub2RlIiwiZl9nZXRfbGlua19ub2RlX2lkIiwibGlua190b19ub2Rlc19kaWN0IiwibGlua19ub2RlX2lkIiwibGlua190b19ub2RlcyIsIm5vZGVfbGlua3MiLCJnZXRfbGlua192YWx1ZSIsImxpbmtfbm9kZSIsInNhbmtleV9ub2RlX2RpY3QiLCJzYW5rZXlfbm9kZXMiLCJzYW5rZXlfbm9kZSIsInNhbmtleV9saW5rcyIsImdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YSIsInRyYWZmaWMiLCJtZXRyaWNzX3JlYWR5IiwibWV0cmljX2xpc3QiLCJmcmVxdWVuY3lfbGlzdCIsInRocmVzaG9sZF9tZWFzdXJlIiwic2VsZWN0ZWRfZnJlcXVlbmN5IiwibWV0cmljX3R5cGUiLCJub3RlX2xpc3QiLCJtZXRyaWNfdHlwZV9saXN0Iiwidm9sdW1lX3RocmVzaG9sZF9saXN0IiwidGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCIsInRocmVzaG9sZCIsImNoZWNrX2VtcHR5X2hvc3QiLCJzZXRfYWN0aXZlX3JhZGlvIiwic2VsZWN0ZWRfcmFkaW8iLCJtZWFzdXJlIiwicGFyZW50RWxlbWVudCIsInRtcF9ob3N0IiwidG1wX2ZyZXF1ZW5jeSIsInRtcF9tZXRyaWMiLCJiYXNpY192YWx1ZSIsInRtcF90aHJlc2hvbGQiLCJ0bXBfbWV0cmljX3R5cGUiLCJ0bXBfZXh0cmFfbWV0cmljIiwiZXh0cmFfbWV0cmljIiwiZnJlcXVlbmN5IiwibWV0cmljc0xvYWRlZCIsIl9tZXRyaWNfbGlzdCIsInNob3dfdm9sdW1lIiwidGFibGVfaG9zdF9ydWxlcyIsIm1vZGFsX2RlbGV0ZV9jb25maXJtIiwibW9kYWxfYWRkX2hvc3RfcnVsZSIsIm1ldHJpY191cmwiLCJhZGRfcnVsZV91cmwiLCJyZW1vdmVfcnVsZV91cmwiLCJyZXN0X3BhcmFtcyIsImhvc3RfcnVsZXNfdGFibGVfY29uZmlnIiwicnVsZV9pZCIsImFkZF9ob3N0X3J1bGUiLCJtZXRyaWNfbGFiZWwiLCJmb3JtYXRfbWV0cmljIiwiZnJlcXVlbmN5X3RpdGxlIiwiZm9ybWF0X2ZyZXF1ZW5jeSIsImZvcm1hdHRlZF9kYXRhIiwiYml0c1RvU2l6ZSIsImZvcm1hdF90aHJlc2hvbGQiLCJob3N0UnVsZXNUYWJsZUNvbmZpZyIsImdldF9tZXRyaWNfbGlzdCIsInRhYmxlX29wdGlvbnMiLCJleHRyYV9wYXJhbXMiLCJwb3J0X2luZm8iLCJwcm90byIsInJlc3RfdXJsIiwid2lkZ2V0X25hbWUiLCJidWJibGVfY2hhcnQiLCJmb3JtYXRfcmVxdWVzdCIsInBhcmFtc19zdHJpbmciLCJidWJibGVfbW9kZSIsInRpbWVmcmFtZSIsIm1vZGVfaWQiLCJvcHRpb25fbGlzdCIsIm50b3BfZXZlbnRzIiwiZnVuIiwiZm5vbmUiLCJmb3JtYXRfb3B0aW9ucyIsImF2YWlsYWJsZV9maWx0ZXJzIiwibm9fZGF0YV9tZXNzYWdlIiwiYm9keV9kaXYiLCJsaXZlX3Jlc3QiLCJoaXN0b3JpY2FsX3Jlc3QiLCJ1cGRhdGVfaGVpZ2h0IiwidXBkYXRlX3dpZHRoIiwibDRwcm90byIsImNoZWNrX21heF9lbnRyaWVzIiwib3B0aW9uYWxfaW5mbyIsInRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cyIsInZsYW5fZmlsdGVycyIsInZsYW5zIiwic29ydGluZyIsInBlcmNlbnRhZ2VfYnl0ZXNfc2VudCIsInBlcmNlbnRhZ2VfYnl0ZXNfcmN2ZCIsInNjcmlwdCQ1IiwiZmlsdGVyc19vcHRpb25zIiwiZmlsdGVyX3R5cGVfc2VsZWN0ZWQiLCJmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCIsIm9wZXJhdG9yX3NlbGVjdGVkIiwib3B0aW9uX3NlbGVjdGVkIiwiaW5wdXRfdmFsdWUiLCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWQiLCJpbnB1dF9yZXF1aXJlZCIsIm9wdGlvbnNfdG9fc2hvdyIsIm9wZXJhdG9yc190b19zaG93IiwiY2hhbmdlX2ZpbHRlciIsInBvc3RfY2hhbmdlIiwidmFsdWVfdHlwZSIsImNoYW5nZV9vcGVyYXRvcl90eXBlIiwic2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSIsImNoYW5nZV9kYXRhX2ZpbHRlciIsInNlbGVjdGVkX2ZpbHRlciIsIm9wZXJhdG9ycyIsImNoZWNrX2Rpc2FibGVfYXBwbHkiLCJ2YWx1ZV9sYWJlbCIsImZvciIsInJlcXVpcmVkIiwiVEFHX09QRVJBVE9SUyIsIkRFRklORURfVEFHUyIsIkZJTFRFUlNfQ09OU1QiLCJpbml0aWFsVGFncyIsIlRBR0lGWSIsIklTX0FMRVJUX1NUQVRTX1VSTCIsIlFVRVJZX1BSRVNFVCIsIlNUQVRVU19WSUVXIiwiRU5BQkxFX1FVRVJZX1BSRVNFVFMiLCJQQUdFIiwiYWxlcnRfc3RhdHNfcGFnZSIsImxvYWRfZmlsdGVyc19kYXRhIiwiaXNfYWxlcnRfc3RhdHNfdXJsIiwiYmFzZV9wYXRoIiwicXVlcnlfcHJlc2V0IiwiZ2V0X2ZpbHRlcl9jb25zdCIsImZfZGVmIiwiZmlsdGVyX2RlZiIsIm9wdF9zdGlybmciLCJvcHQiLCJzY3JpcHQkNCIsIkRhdGFUaW1lUmFuZ2VQaWNrZXIiLCJNb2RhbEZpbHRlcnMiLCJkdF9yYW5nZV9waWNrZXJfbW91bnRlZCIsImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXIiLCJpZF9tb2RhbF9maWx0ZXJzIiwiZW5hYmxlX3F1ZXJ5X3ByZXNldHMiLCJyYW5nZV9waWNrZXJfdnVlIiwicXVlcnlfcHJlc2V0cyIsImJ1aWx0aW4iLCJzZXRfcXVlcnlfcHJlc2V0IiwidGFnaWZ5IiwiVGFnaWZ5IiwiZHVwbGljYXRlcyIsImNsYXNzbmFtZSIsImF1dG9Db21wbGV0ZSIsInRlbXBsYXRlcyIsInRhZ0RhdGEiLCJnZXRBdHRyaWJ1dGVzIiwic2VsZWN0ZWRPcGVyYXRvciIsInZhbGlkYXRlIiwiYWRkVGFncyIsImFkZEZpbHRlclRhZyIsInJlYWxWYWx1ZSIsImV4aXN0aW5nVGFnRWxlbWVudCIsImdldFRhZ0VsbXMiLCJodG1sVGFnIiwicmVtb3ZlVGFncyIsImVkaXRfdGFnIiwiY3JlYXRlX3RhZ2lmeSIsInJlbG9hZF9zdGF0dXMiLCJtb2RhbF9kYXRhIiwic2hvd19maWx0ZXJzIiwic3RhdHVzX3ZpZXciLCJsYXN0X2ZpbHRlcnMiLCJpc19maWx0ZXJfZGVmaW5lZCIsInVwZGF0ZV9zdGF0dXNfdmlldyIsInVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cyIsInNob3dfbW9kYWxfZmlsdGVycyIsInJlbW92ZV9maWx0ZXJzIiwicmVtb3ZlQWxsVGFncyIsImZpbHRlcnNfb2JqZWN0IiwiZmlsdGVyc19ncm91cHMiLCJmX2lkIiwiZmlsdGVyX3ZhbHVlcyIsImdldF9maWx0ZXJzX29iamVjdCIsImZfY29uc3QiLCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyIiwiYXBwbHlfbW9kYWwiLCJfY29tcG9uZW50X21vZGFsX2ZpbHRlcnMiLCJfY29tcG9uZW50X2RhdGFfdGltZV9yYW5nZV9waWNrZXIiLCJleHRyYV9idXR0b25zIiwic2NyaXB0JDMiLCJyZWxvYWRlZF90YWJsZSIsInBlcmNlbnRpbGVfc2VudCIsInBlcmNlbnRpbGVfcmN2ZCIsImF2Z19zZW50IiwiYXZnX3JjdmQiLCJtYXhfc2VudCIsIm1heF9yY3ZkIiwiZkJpdCIsImNoYXJ0T3B0aW9uc1V0aWxpdHkiLCJnZXRBcGV4WUZvcm1hdHRlciIsImFwZXhZRm9ybWF0dGVyVHlwZXMiLCJmQnl0ZXMiLCJ1cGRhdGVEYXRhIiwiZXh0cmFfc2V0dGluZ3MiLCJsaW5rX3NvdXJjZSIsImludGVybiIsImxpbmtfdGFyZ2V0IiwibGlua19zb3VyY2Vfbm9kZSIsImxpbmtfdGFyZ2V0X25vZGUiLCJsaW5rX2xpbmsiLCJsaW5rX3ZhbHVlIiwidW5pb24iLCJub2RlX2lkX2xpc3QiLCJub2RlR3JvdXBzIiwibm9kZV9sYWJlbF9saXN0Iiwibm9kZV90aXRsZV9saXN0IiwibGlua190aXRsZV9saXN0IiwiZGVsdGFYIiwiZGVsdGFZIiwibm9kZVN0cm9rZVdpZHRoIiwibm9kZVN0cm9rZU9wYWNpdHkiLCJub2RlU3Ryb2tlTGluZWpvaW4iLCJfX2RhdGFfXyIsInNvdXJjZUxpbmtzIiwidGFyZ2V0TGlua3MiLCJub2RlX2NvbG9yIiwic2NhbGVzIiwiU2Fua2V5Q2hhcnQiLCJleGNsdWRlX3R5cGUiLCJpbnB1dF9pcCIsImlucHV0X25ldHdvcmsiLCJpbnB1dF92bGFuIiwiaW5wdXRfdGV4dCIsImhvc3Rfc2VsZWN0ZWQiLCJmbG93X3NlbGVjdGVkIiwibmV0bWFzayIsImNvbW1lbnQiLCJjb21tZW50X3BsYWNlaG9sZGVyIiwicGF0dGVybl9pcCIsInBhdHRlcm5fdGV4dCIsInBhdHRlcm5fY2VydGlmaWNhdGUiLCJzZXRfZXhjbHVkZV90eXBlIiwiZGlzYWJsZV9hcHBseSIsImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSIsImFsZXJ0X2FkZHIiLCJob3N0X2FsZXJ0X2tleSIsImZsb3dfYWxlcnRfa2V5IiwiYWxlcnRfZG9tYWluIiwiYWxlcnRfY2VydGlmaWNhdGUiLCJyYWRpb19zZWxlY3RlZCIsImRpc2FibGVfYWxlcnRzIiwiZG9tYWluIiwiaXNzdWVyZG4iLCJyZWdleF9kb21haW4iLCJwYXR0ZXJuX2RvbWFpbiIsInJlZ2V4X2NlcnRpZmljYXRlIiwiYWxlcnRfbmFtZSIsImhvc3RfYWRkciIsImZsb3dfYWRkciIsImNsaV92YWx1ZSIsImNsaV9sYWJlbCIsInNydl92YWx1ZSIsInNydl9sYWJlbCIsImRlbGV0ZV9hbGVydHMiLCJhZGRyIiwibnRvcFZ1ZSIsIlBhZ2VTdGF0cyIsIlBhZ2VEZXZpY2VFeGNsdXNpb25zIiwiUGFnZUhvc3RUTFMiLCJQYWdlSG9zdFNTSCIsIlBhZ2VIb21lTWFwIiwiUGFnZVNhbmtleSIsIlBhZ2VIb3N0UnVsZXMiLCJQYWdlQWxlcnRBbmFseXNpcyIsIlBhZ2VIb3N0TWFwIiwiUGFnZVZMQU5Qb3J0c0Zsb3dTYW5rZXkiLCJQYWdlVkxBTlBvcnRzU2Fua2V5IiwiUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zIiwiUGFnZUhvc3REZXRhaWxzVHJhZmZpYyIsIlBhZ2VIb3N0RGV0YWlsc1BhY2tldHMiLCJQYWdlSG9zdERldGFpbHNGbG93U2Fua2V5IiwiUGFnZUhvc3REZXRhaWxzUG9ydHMiLCJQYWdlQWdncmVnYXRlZExpdmVGbG93cyIsIkFsZXJ0SW5mbyIsIkRhdGVUaW1lUmFuZ2VQaWNrZXIiLCJSYW5nZVBpY2tlciIsIlNpbXBsZVRhYmxlIiwiU2Fua2V5IiwiTm90ZUxpc3QiLCJMb2FkaW5nIiwiTGlzdFRpbWVzZXJpZXMiLCJNb2RhbEFkZENoZWNrRXhjbHVzaW9uIiwiTW9kYWxBbGVydHNGaWx0ZXIiLCJNb2RhbFRpbWVzZXJpZXMiLCJNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIiwiTW9kYWxTbmFwc2hvdCIsIk1vZGFsQWRkSG9zdFJ1bGVzIiwiVnVlIiwiXzB4NGFlNSIsIl8weDY0OGN4MiIsIl8weDY0OGN4MyIsIl8weDY0OGN4NCIsIl8weDY0OGN4YSIsIl8weDY0OGN4NiIsIl8weDY0OGN4OCIsIl8weDY0OGN4OSIsIl8weDY0OGN4NSIsIl8weDY0OGN4YiIsIl8weDY0OGN4YyIsIkdFVF9JTlRFUkZBQ0VfREFUQSIsIl8weDY0OGN4MTMiLCJfMHg2NDhjeGUiLCJfMHg2NDhjeGYiLCJfMHg2NDhjeDEwIiwiXzB4NjQ4Y3hkIiwiXzB4NjQ4Y3gxMSIsIl8weDY0OGN4MTIiXSwibWFwcGluZ3MiOiJ5QkFDQUEsS0FBS0MsVUFBVUMsT0FBUyxTQUFVQSxHQUNqQyxJQUFJQyxFQUFJLENBQ1AsS0FBTUMsS0FBS0MsV0FBYSxFQUN4QixLQUFNRCxLQUFLRSxVQUNYLEtBQU1GLEtBQUtHLFdBQ1gsS0FBTUgsS0FBS0ksYUFDWCxLQUFNSixLQUFLSyxhQUNYLEtBQU1DLEtBQUtDLE9BQU9QLEtBQUtDLFdBQWEsR0FBSyxHQUN6Q08sRUFBS1IsS0FBS1MsbUJBS1gsSUFBSyxJQUFJQyxJQUZMLE9BQU9DLEtBQUtiLEtBQVNBLEVBQVNBLEVBQU9jLFFBQVFDLE9BQU9DLElBQ3REZCxLQUFLZSxjQUFnQixJQUFJQyxPQUFPLEVBQUlILE9BQU9DLEdBQUdHLFVBQ2xDbEIsRUFBTyxJQUFJYyxPQUFPLElBQU1ILEVBQUksS0FBS0MsS0FBS2IsS0FDbkRBLEVBQVNBLEVBQU9jLFFBQVFDLE9BQU9DLEdBQ1YsR0FBcEJELE9BQU9DLEdBQUdHLE9BQWNsQixFQUFFVyxJQUN4QixLQUFPWCxFQUFFVyxJQUFJTSxRQUFRLEdBQUtqQixFQUFFVyxJQUFJTyxVQUNwQyxPQUFPbkIsQ0FDUixFQUdBb0IsT0FBT0MsR0FBR0MsT0FBTyxDQUNoQkMsUUFBUyxTQUFVQyxHQUNsQixPQUFPdEIsS0FBS3VCLE1BQUssV0FDaEIsSUFBSUMsRUFBUUMsRUFBRXpCLE1BQ1Z3QixFQUFNRSxHQUFHLG1DQUNaMUIsS0FBSzJCLFNBQVdMLEVBRWhCRSxFQUFNSSxZQUFZLFdBQVlOLEVBQ2hDLEdBQ0QsSUFHRCxNQUFNTyxFQUEwQixLQUcxQkMsRUFBVSxDQUNmQyxLQUFNQyxPQUFPQyxHQUFJLG1LQUNqQkMsS0FBTUYsT0FBT0MsR0FBSSxxcUNBQ2pCRSxXQUFZSCxPQUFPQyxHQUFJLDBMQUN2QkcsS0FBTUosT0FBT0MsR0FBSSxzRkFDakJJLFFBQVNMLE9BQU9DLEdBQUksdUJBQ3BCSyxJQUFLTixPQUFPQyxHQUFJLGtDQUNoQk0sU0FBVVAsT0FBT0MsR0FBSSxzQ0FDckJPLFdBQVlSLE9BQU9DLEdBQUkseUNBQ3ZCUSxTQUFVVCxPQUFPQyxHQUFJLCtEQUNyQlMsU0FBVVYsT0FBT0MsR0FBSSw0QkFDckJVLFdBQVlYLE9BQU9DLEdBQUksbUVBQ3BCVyxNQUFPWixPQUFPQyxHQUFJLDhCQWJMLGdEQWNoQlksTUFBT2IsT0FBT0MsR0FBSSxrQkFDbEJhLE1BQU9kLE9BQU9DLEdBQUksZ0JBQ2xCYyxNQUFPZixPQUFPQyxHQUFJLGNBQ2xCZSxpQkFBa0JoQixPQUFPQyxHQUFJLGlCQUM3QmdCLFNBQVVqQixPQUFPQyxHQUFJLDhCQUNyQmlCLGdCQUFpQmxCLE9BQU9DLEdBQUkscUNBQzVCa0IsdUJBQXdCbkIsT0FBT0MsR0FBSSw0Q0FDbkNtQixnQkFBaUJwQixPQUFPQyxHQUFJLHFCQUdkLE1BQU1vQixFQUduQkMsc0JBQXNCQyxFQUFPLEtBQzNCOUIsRUFBRyxZQUFXK0IsT0FBT0QsRUFDdkIsQ0FFQUQsb0JBQW9CQyxFQUFPLEtBQ3pCOUIsRUFBRyxZQUFXZ0MsT0FBT0YsRUFDdkIsQ0FFQUQsb0JBQW9CQyxFQUFPLEtBQ3pCOUIsRUFBRyxZQUFXaUMsUUFBUUgsRUFDeEIsQ0FFVXpCLHFCQUNWLE9BQU9BLENBQ1IsQ0FFQXdCLDhCQUNDLE1BQU1yQyxFQUFTYSxFQUFRQyxLQUFLZCxPQUM1QixNQUFRLEdBQUVhLEVBQVFDLEtBQUs0QixVQUFVLEVBQUcxQyxFQUFTLDRDQUM5QyxDQUVBcUMsOEJBQ0MsTUFBTXJDLEVBQVNhLEVBQVFJLEtBQUtqQixPQUM1QixNQUFRLEdBQUVhLEVBQVFJLEtBQUt5QixVQUFVLEVBQUcxQyxFQUFTLHVEQUM5QyxDQU1BcUMsd0JBQXdCYixFQUFXLFlBR2xDLElBQ0MsTUFBTW1CLFFBQWdCQyxNQUFPLEdBQUVDLHdEQUF3RHJCLEtBRXZGLGFBRHVCbUIsRUFBUUcsTUFNaEMsQ0FIQSxNQUFPQyxHQUVOQyxRQUFRQyxNQUFPLGlEQUFnREYsSUFDaEUsQ0FJQSxNQUFPLENBQUVHLElBQUssRUFBR0MsT0FBUSxzQkFDMUIsQ0FNQWQsMEJBR0M3QixFQUFHLHVCQUFzQkYsTUFBSyxXQUc3QixNQUFNOEMsRUFBYzVDLEVBQUV6QixNQUFNc0UsS0FBSyxXQUNqQyxJQUFLRCxFQUVKLFlBREFKLFFBQVFNLEtBQU0sK0NBQStDdkUsTUFLOUQsTUFBTXdFLEVBQVVILEVBQVlJLE1BQU0sS0FBS0MsS0FBSUMsR0FBSzdDLEVBQVE2QyxHQUFHQyxhQUFZQyxLQUFLLEtBRTVFcEQsRUFBRXpCLE1BQU04RSxLQUFLLFVBQVdOLEdBRXhCL0MsRUFBRXpCLE1BQU0rRSxXQUFXLGVBQ3BCLEdBQ0QsQ0FFQXpCLG9CQUFvQnZCLEdBQ25CLE9BQU8sSUFBSWxCLE9BQU9pQixFQUFRQyxNQUFNcEIsS0FBS29CLEVBQ3RDLENBRUF1QixvQkFBb0JwQixHQUNuQixPQUFPLElBQUlyQixPQUFPaUIsRUFBUUksTUFBTXZCLEtBQUt1QixFQUN0QyxDQUVBb0Isc0JBQXNCMEIsR0FDckIsT0FBTyxJQUFJbkUsT0FBT2lCLEVBQVFVLFlBQVk3QixLQUFLcUUsRUFDNUMsQ0FFQTFCLGlCQUFpQjJCLEdBQ2hCLE1BQU8sUUFBUXRFLEtBQUtzRSxFQUNyQixDQUVBM0IsdUJBQXVCNEIsRUFBTUMsR0FDNUIsSUFFSUMsRUFGQUMsRUFBUUgsRUFBS1QsTUFBTSxLQUNuQmEsRUFBTyxLQUdYLEdBQW9CLEdBQWhCRCxFQUFNcEUsT0FBYSxDQUN0QixJQUFLa0UsRUFDSixPQUFPLEtBRVBDLEVBQVVGLENBQ1osS0FBTyxDQUdOLEdBRkFFLEVBQVVDLEVBQU0sSUFFWGhDLEVBQVVrQyxVQUFVRixFQUFNLElBQzlCLE9BQU8sS0FJUixJQUZBQyxFQUFPRSxTQUFTSCxFQUFNLEtBRVgsRUFDVixPQUFPLElBQ1QsQ0FFQSxHQUFJaEMsRUFBVW9DLGFBQWFMLEdBQVUsQ0FDcEMsR0FBYSxPQUFURSxFQUNIQSxFQUFPLFFBQ0gsR0FBSUEsRUFBTyxHQUNmLE9BQU8sS0FFUixNQUFPLENBQ05JLEtBQU0sT0FDTkMsUUFBU1AsRUFDVEUsS0FBTUEsRUFFUCxDQUFNLEdBQUlqQyxFQUFVdUMsYUFBYVAsRUFBTSxJQUFLLENBQzVDLEdBQWEsT0FBVEMsRUFDSEEsRUFBTyxTQUNILEdBQUlBLEVBQU8sSUFDZixPQUFRLEVBRVQsTUFBTyxDQUNOSSxLQUFNLE9BQ05DLFFBQVNQLEVBQ1RFLEtBQU1BLEVBRVIsQ0FFQSxPQUFPLElBQ1IsQ0FFQWhDLGFBQWF1QyxHQUNaLE1BQU1DLEVBQVEsQ0FBQyxNQUFPLE9BQVEsT0FBUSxPQUFRLFFBRTlDLFFBQXNCLElBQVZELEVBQ1gsTUFBTyxJQUVSLEdBQVksR0FBUkEsRUFBVyxNQUFPLElBQ3RCLEdBQUtBLEVBQU8sR0FBT0EsRUFBT2hFLEVBQTBCLE1BQVEsY0FDNUQsSUFBSWtFLEVBQWV6RixLQUFLMEYsSUFBSUgsR0FBUXZGLEtBQUswRixJQUFJLEtBQ3pDQyxFQUFJVCxTQUFTbEYsS0FBS0MsTUFBTXdGLElBQzVCLEdBQUlFLEVBQUksR0FBS0MsTUFBTUQsR0FDbEJBLEVBQUksT0FDRSxHQUFJQSxHQUFLSCxFQUFNN0UsT0FDckIsTUFBTyxLQUFPNkUsRUFBTUEsRUFBTTdFLE9BQVMsR0FHcEMsR0FBSWdGLEdBQUssRUFDUixPQUFPM0YsS0FBSzZGLE1BQU1OLEVBQU92RixLQUFLOEYsSUFBSSxJQUFNSCxHQUFLLEtBQU8sSUFBTSxJQUFNSCxFQUFNRyxHQUd0RSxJQUFJSSxFQUFNQyxXQUFXVCxFQUFPdkYsS0FBSzhGLElBQUksSUFBTUgsSUFBSU0sUUFBUSxHQUd2RCxPQUZJRixFQUFNLEdBQUssSUFDZEEsRUFBTS9GLEtBQUs2RixNQUFNRSxJQUNYQSxFQUFNLElBQU1QLEVBQU1HLEVBRTNCLENBRUEzQyxtQkFBbUJrRCxHQUNsQixRQUFxQixJQUFUQSxFQUNYLE1BQU8sSUFHUixHQUFXLEdBQVBBLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU0zRSxFQUEwQixNQUFRLGlCQUMxRCxJQUFJNEUsRUFBTXBELEVBQVVxRCxXQUFXRixFQUhuQixDQUFDLFFBQVMsVUFHcUIsS0FHM0MsT0FBT2xHLEtBQUs2RixNQUFlLElBQVRNLEVBQUksSUFBWSxJQUFNLElBQU1BLEVBQUksRUFDbkQsQ0FFQW5ELHNCQUFzQnFELEdBQ3JCLFFBQXlCLElBQWJBLEVBQ1gsTUFBTyxJQUVSLElBQUlDLEVBQWdCQyxTQUFTRixRQUFRRyxjQUVqQ2hCLEVBQVEsQ0FBQ2MsRUFBZSxLQUFPQSxHQUNuQyxHQUFlLEdBQVhELEVBQWMsTUFBTyxJQUN6QixHQUFLQSxFQUFVLEdBQU9BLEVBQVU5RSxFQUEwQixNQUFRLGlCQUNsRSxJQUFJNEUsRUFBTXBELEVBQVVxRCxXQUFXQyxFQUFTYixFQUFPLEtBRy9DLE9BQU94RixLQUFLNkYsTUFBZSxJQUFUTSxFQUFJLElBQVksSUFBTSxJQUFNQSxFQUFJLEVBQ25ELENBRUFuRCx3QkFBd0J5RCxHQUN2QixZQUF1QixJQUFYQSxFQUNKLElBQ0ExRCxFQUFVMkQsTUFBYyxFQUFSRCxFQUN6QixDQUVBekQsZ0JBQWdCMkQsR0FDZixRQUFxQixJQUFUQSxFQUNYLE1BQU8sSUFHUixHQUFXLEdBQVBBLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU1wRixFQUEwQixNQUFRLGNBQzFELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdPLEVBSG5CLENBQUMsTUFBTyxPQUFRLE9BQVEsT0FBUSxRQUdELEtBRzNDLE9BQU8zRyxLQUFLNkYsTUFBZSxJQUFUTSxFQUFJLElBQVksSUFBTSxJQUFNQSxFQUFJLEVBQ25ELENBRUFuRCxlQUFlMkQsR0FDZCxRQUFxQixJQUFUQSxFQUNYLE1BQU8sSUFHUixHQUFXLEdBQVBBLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU1wRixFQUEwQixNQUFRLGVBQzFELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdPLEVBSG5CLENBQUMsT0FBUSxRQUFTLFFBQVMsUUFBUyxTQUdMLEtBRzNDLE9BQU8zRyxLQUFLNkYsTUFBZSxJQUFUTSxFQUFJLElBQVksSUFBTSxJQUFNQSxFQUFJLEVBQ25ELENBRUFuRCxjQUFjNEQsR0FDYixRQUFxQixJQUFUQSxFQUNYLE1BQU8sSUFHUixHQUFXLEdBQVBBLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU1yRixFQUEwQixNQUFRLGNBQzFELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdRLEVBSG5CLENBQUMsTUFBTyxPQUFRLE9BQVEsT0FBUSxRQUdELEtBRzNDLE9BQU81RyxLQUFLNkYsTUFBZSxJQUFUTSxFQUFJLElBQVksSUFBTSxJQUFNQSxFQUFJLEVBQ25ELENBRUFuRCxhQUFhNkQsR0FDWixRQUFxQixJQUFUQSxFQUNYLE1BQU8sSUFHUixHQUFXLEdBQVBBLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU10RixFQUEwQixNQUFRLGNBQzFELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdTLEVBSG5CLENBQUMsUUFBUyxTQUFVLFFBQVMsU0FBVSxVQUdSLEtBRzNDLE9BQU83RyxLQUFLNkYsTUFBZSxJQUFUTSxFQUFJLElBQVksSUFBTSxJQUFNQSxFQUFJLEVBQ25ELENBRUFuRCxlQUFlOEQsR0FFZCxRQUFXQyxJQUFQRCxFQUFrQixNQUFPLElBQzdCLE1BQ01YLEVBQU1wRCxFQUFVcUQsV0FBV1UsRUFEbkIsQ0FBQyxNQUM2QixLQUM1QyxPQUFPOUcsS0FBSzZGLE1BQWUsSUFBVE0sRUFBSSxJQUFZLElBQU0sSUFBTUEsRUFBSSxFQUNuRCxDQUVBbkQsYUFBYWdFLEdBRVosWUFBWUQsSUFBUkMsRUFBMEIsSUFDdkJoSCxLQUFLNkYsTUFBWSxJQUFObUIsR0FBYSxHQUNoQyxDQUVBaEUsZUFBZWlFLEdBQ2QsWUFBcUIsSUFBVEEsRUFDSixJQUdEakgsS0FBSzZGLE1BQVksSUFBTm9CLEdBQWEsSUFBTSxXQUN0QyxDQUVBakUsWUFBWTJCLEdBQ1gsWUFBdUIsSUFBWEEsRUFDSixJQUVBM0UsS0FBSzZGLE1BQU1sQixHQUNWTCxXQUFXaEUsUUFBUSx3QkFBeUIsSUFDdEQsQ0FFQTBDLGNBQWMyQixHQUNiLFlBQXVCLElBQVhBLEVBQ0osS0FFQTNFLEtBQUs2RixNQUFjLElBQVJsQixHQUFlLEtBQ3pCTCxXQUFXaEUsUUFBUSx3QkFBeUIsSUFDdEQsQ0FFQTBDLGdCQUFnQjJCLEdBQ2YsWUFBdUIsSUFBWEEsRUFDSixJQUVEM0UsS0FBSzZGLE1BQWMsSUFBUmxCLEdBQWUsSUFBTSxHQUN4QyxDQUVBM0IsYUFBYWtFLEdBSVosT0FGUSxJQUFJNUgsS0FETyxJQUFQNEgsRUFJYixDQUVBbEUsNkJBQTZCbUUsR0FDNUIsT0FBT0EsRUFBT0MsT0FBTyxHQUFHQyxjQUFnQkYsRUFBT0csTUFBTSxFQUN0RCxDQUVBdEUsaUJBQWlCdUUsRUFBUUMsR0FDeEIsWUFBZ0JULElBQVhRLFFBQXFDUixJQUFYUyxHQUEwQkQsR0FBVUMsRUFDMUQsK0JBQ0VELEVBQVNDLEVBQ1gsa0NBRUEsbUNBRVYsQ0FFQXhFLHdCQUF3QnlFLEVBQUtDLEdBQzVCLE9BQUtELEVBRURBLEVBQUk5RyxPQUFTK0csRUFDVEQsRUFDREEsRUFBSXBFLFVBQVUsRUFBR3FFLEdBQU8sTUFIdkIsRUFJVCxDQUVBMUUsZ0JBQWdCMkUsR0FDZixPQUFLQSxFQUNFQSxFQUFJMUIsUUFBUSxHQURGLEVBRWxCLENBR0FqRCxtQkFBbUJ5RCxHQUNsQixRQUF1QixJQUFYQSxFQUNYLE1BQU8sSUFFUixJQUNJbUIsRUFBVyxLQUNYQyxFQUFXRCxRQUNYRSxFQUFXRCxXQUNYRSxFQUFXRCxjQUVmLE9BQUtyQixHQUFTLEdBQU9BLEVBQVFtQixFQUNyQjVCLFdBQVdTLEVBQU1SLFFBUFQsSUFPK0IsU0FDckNRLEdBQVNtQixHQUFjbkIsRUFBUW9CLEVBQ2pDN0IsWUFBWVMsRUFBUW1CLEdBQVUzQixRQVR0QixJQVM0QyxNQUNsRFEsR0FBU29CLEdBQWNwQixFQUFRcUIsRUFDakM5QixZQUFZUyxFQUFRb0IsR0FBVTVCLFFBWHRCLElBVzRDLE1BQ2xEUSxHQUFTcUIsR0FBY3JCLEVBQVFzQixFQUNqQy9CLFlBQVlTLEVBQVFxQixHQUFVN0IsUUFidEIsSUFhNEMsTUFDbkRRLEdBQVNzQixFQUNWL0IsWUFBWVMsRUFBUXNCLEdBQVU5QixRQWZ0QixJQWU0QyxNQUVwREQsV0FBV1MsRUFBTVIsUUFqQlQsSUFpQitCLFFBQ2hELENBRUFqRCxpQkFBaUJnRixFQUFTQyxFQUFNQyxHQUMvQixPQUFJRixHQUFXQyxFQUNOLCtCQUNFRCxFQUFVQyxFQUNaLDZCQUFpQ0MsRUFBWSxRQUU3QyxtQ0FFVixDQUVBbEYscUJBQXFCbUYsSUFDSixJQUFaQSxFQUNIaEgsRUFBRSw4QkFBOEJpSCxLQUFLLE1BQU1DLFlBQVksWUFBWUQsS0FBSyxLQUFLNUQsS0FBSyxjQUFlLE9BRWpHckQsRUFBRSw4QkFBOEJpSCxLQUFLLE1BQU1FLFNBQVMsWUFBWUYsS0FBSyxLQUFLM0QsV0FBVyxjQUN2RixDQUVBekIsb0NBQ0M3QixFQUFFLFVBQVVGLE1BQUssV0FDaEJFLEVBQUV6QixNQUFNNkksS0FBSyxZQUFZLEVBQzFCLElBQ0F4RixFQUFVeUYsZUFBYyxFQUN6QixDQUVBeEYsbUNBQ0M3QixFQUFFLFVBQVVGLE1BQUssV0FDaEJFLEVBQUV6QixNQUFNNkksS0FBSyxZQUFZLEVBQzFCLElBQ0F4RixFQUFVeUYsZUFBYyxFQUN6QixDQUVBeEYsa0JBQWtCeUYsR0FDakIsT0FBT0EsR0FBS0EsRUFBRSxHQUFHcEIsY0FBZ0JvQixFQUFFbkIsTUFBTSxFQUMxQyxDQUVBdEUsaUJBQWlCMEYsR0FNaEIsSUFKQSxJQUFJQyxHQURKRCxHQUFRLElBQ0t2RSxNQUFNLEtBQ2Z5RSxFQUFLRCxFQUFFLEdBQ1BFLEVBQUtGLEVBQUVoSSxPQUFTLEVBQUksSUFBTWdJLEVBQUUsR0FBSyxHQUNqQ0csRUFBTSxlQUNIQSxFQUFJekksS0FBS3VJLElBQ2ZBLEVBQUtBLEVBQUd0SSxRQUFRd0ksRUFBSyxTQUV0QixPQUFPRixFQUFLQyxDQUNiLENBRUE3RixrQkFBa0JnRSxFQUFLeEIsRUFBT3VELEVBQU9DLEdBQ3BDLEdBQVcsR0FBUGhDLEVBQVUsTUFBTyxDQUFDLEVBQUd4QixFQUFNLElBQy9CLElBQUl5RCxFQUFTRCxFQUFZLEdBQUtBLEVBQVksR0FFMUMsSUFBSXJELEVBQUlULFNBQVNsRixLQUFLQyxNQUFNRCxLQUFLMEYsSUFBSXNCLEdBQU9oSCxLQUFLMEYsSUFBSXFELEtBT3JELE9BTklwRCxFQUFJLEdBQUtDLE1BQU1ELEdBQ2xCQSxFQUFJLEVBQ01BLEdBQUtILEVBQU03RSxTQUNyQmdGLEVBQUlILEVBQU03RSxPQUFTLEdBR2IsQ0FBQ1gsS0FBSzZGLE1BQU9tQixFQUFNaEgsS0FBSzhGLElBQUlpRCxFQUFPcEQsR0FBTXNELEdBQVVBLEVBQVF6RCxFQUFNRyxHQUN6RSxDQUVBM0MsbUJBQW1CZ0UsRUFBS2dDLEdBRXZCLEdBQVcsR0FBUGhDLEVBQVUsTUFBTyxJQUNyQixHQUFLQSxFQUFNLEdBQU9BLEVBQU16RixFQUEwQixNQUFRLEtBQU9BLEVBQ2pEd0YsTUFBWmlDLElBQXVCQSxFQUFXLEdBQ3RDLElBQUk3QyxFQUFNcEQsRUFBVXFELFdBQVdZLEVBSm5CLENBQUMsR0FBSSxJQUFLLElBQUssSUFBSyxLQUlXLElBQU1nQyxHQUVqRCxPQUFPN0MsRUFBSSxHQUFLQSxFQUFJLEVBQ3JCLENBRUFuRCxxQkFBcUJrRyxHQUNwQixPQUFRbkcsRUFBVW9HLFVBQVVELEVBQUVqRCxRQUFRLElBQU0sT0FDN0MsQ0FFQWpELHFCQUFxQnlELEdBRXBCLEdBQWEsR0FBVEEsRUFBWSxNQUFPLFVBQ3ZCLEdBQUtBLEVBQVEsR0FBT0EsRUFBUWxGLEVBQTBCLE1BQVEsZ0JBQzlELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdLLEVBSG5CLENBQUMsUUFBUyxLQUFNLEtBQU0sS0FBTSxNQUdLLE1BRTdDLE9BQU9ULFdBQVdHLEVBQUksSUFBTSxJQUFNQSxFQUFJLEVBQ3ZDLENBRUFuRCw2QkFBNkJ5RCxHQUU1QixHQUFhLEdBQVRBLEVBQVksTUFBTyxVQUN2QixJQUFJZCxFQUFJVCxTQUFTbEYsS0FBS0MsTUFBTUQsS0FBSzBGLElBQUllLEdBQVN6RyxLQUFLMEYsSUFBSSxRQUN2RCxNQUFPLEVBQUVlLEVBQVF6RyxLQUFLOEYsSUFBSSxLQUFNSCxJQUFJTSxRQUFRLEdBSGhDLENBQUMsUUFBUyxLQUFNLEtBQU0sS0FBTSxNQUdjTixHQUN2RCxDQUVBM0Msa0JBQWtCdUMsRUFBTTBELEdBQ3ZCQSxFQUFTQSxHQUFVLElBRW5CLEdBQVksR0FBUjFELEVBQVcsTUFBTyxRQUN0QixHQUFLQSxFQUFPLEdBQU9BLEVBQU9oRSxFQUEwQixNQUFRLGNBQzVELElBQUk0RSxFQUFNcEQsRUFBVXFELFdBQVdiLEVBSG5CLENBQUMsTUFBTyxPQUFRLE9BQVEsT0FBUSxRQUdBMEQsR0FFNUMsT0FBTzlDLEVBQUksR0FBR0YsUUFBUSxHQUFLLElBQU1FLEVBQUksRUFDdEMsQ0FFQW5ELHFCQUFxQm9HLEdBRXBCLEdBQUlBLEVBQVUsRUFDYixNQUFRLFVBR1QsSUFBSUMsRUFBT3JKLEtBQUtDLE1BQU1tSixFQUFVLE9BQzVCRSxFQUFRdEosS0FBS0MsTUFBT21KLEVBQVUsS0FBZ0IsR0FBUEMsR0FDdkNFLEVBQVV2SixLQUFLQyxNQUFPbUosRUFBVSxHQUFjLEtBQVBDLEVBQXdCLEdBQVJDLEdBQ3ZERSxFQUFNSixFQUFVLEdBQ2hCSyxFQUFNLEdBQUlDLEVBQVksR0FFMUIsR0FBSUwsRUFBTyxFQUFHLENBQ2IsSUFBSU0sRUFBUTNKLEtBQUtDLE1BQU1vSixFQUFPLEtBRTFCTSxFQUFRLElBQ1hOLEdBQWMsSUFFZEksRUFBTUUsRUFBUSxRQUNWQSxFQUFRLElBQ1hGLEdBQU8sS0FHUkMsRUFBVUUsS0FBS0gsR0FDZkEsRUFBTSxJQUVQQSxFQUFNSixFQUFPLE9BQ1RBLEVBQU8sSUFBS0ksR0FBTyxLQUN2QkMsRUFBVUUsS0FBS0gsR0FDZkEsRUFBTSxFQUNQLENBYUEsT0FYSUgsRUFBUSxJQUNQQSxFQUFRLEtBQU1HLEVBQU0sS0FDeEJBLEdBQU9ILEVBQVEsS0FHWkMsRUFBVSxLQUFNRSxHQUFPLEtBQzNCQSxHQUFPRixFQUFVLElBQ2JDLEVBQU0sS0FBTUMsR0FBTyxLQUN2QkEsR0FBT0QsRUFDUEUsRUFBVUUsS0FBS0gsR0FFUkMsRUFBVW5GLEtBQUssS0FDdkIsQ0FFQXZCLGtCQUFrQjZHLEdBQ2pCLE9BQUlBLEdBQVEsSUFDSjlHLEVBQVUrRyxjQUFjRCxFQUFLLE1BRXJCN0osS0FBSzZGLE1BQWEsSUFBUGdFLEdBQWUsS0FDekJ2RixXQUFXaEUsUUFBUSx3QkFBeUIsS0FBTyxLQUVyRSxDQUVBMEMsa0JBQWtCK0csR0FFakIsSUFBSUMsRUFBSSxJQUFJMUssS0FBYSxJQUFSeUssR0FDYkUsRUFBUWpLLEtBQUtDLE9BQVEsSUFBSVgsTUFBUTRLLFVBQVksSUFBUUgsR0FFekQsT0FBUUMsRUFBRXhLLE9BQU8sdUJBQXlCLEtBQU91RCxFQUFVK0csY0FBY0csR0FBUyxPQUNuRixDQUdBakgsZ0NBQWdDbUgsR0FXL0IsT0FSSUEsR0FBYyxNQUNKLFdBQ0hBLEdBQWMsT0FDWCxrQkFFQSxPQUlmLENBRUFuSCxvQkFBb0JvSCxFQUFVQyxHQUM3QixPQUFPbEosRUFBRUwsT0FBTyxDQUFFLEVBQUVzSixFQUFVQyxFQUMvQixDQUVBckgsb0JBQW9Cc0gsRUFBTUMsR0FHekIsSUFBSyxJQUFJbkssS0FGVGtLLEVBQU9uSixFQUFFbUosR0FFS0MsRUFBUSxDQUNyQixHQUFJQSxFQUFPQyxlQUFlcEssR0FDYmUsRUFBRSw4QkFBZ0NmLEVBQUksWUFBY21LLEVBQU9uSyxHQUFLLE1BQ3RFcUssU0FBU0gsRUFFakIsQ0FFQSxPQUFPQSxDQUNSLENBY0F0SCx5QkFBeUJ1SCxHQUN4QixJQUFJNUUsRUFBSSxFQUNKUSxFQUFNLENBQUEsRUFFVixJQUFLLElBQUkvRixLQUFLbUssRUFDYnBFLEVBQUksT0FBU1IsR0FBS3ZGLEVBQ2xCK0YsRUFBSSxPQUFTUixHQUFLNEUsRUFBT25LLEdBQ3pCdUYsR0FBUSxFQUdULE9BQU9RLENBQ1IsQ0FFQW5ELHdCQUF3QjBILEdBU3ZCLE9BSEFBLEdBREFBLEdBREFBLEVBQVdBLEVBQVNwSyxRQUFRLFFBQVMsTUFDakJBLFFBQVEsT0FBUSxNQUNoQkEsUUFBUSxNQUFPLE1BRW5CNkQsTUFBTSxJQUV2QixDQUVBbkIsd0JBQXdCMkgsRUFBWUMsR0FDbkN6SixFQUFFLElBQUt3SixHQUFZRSxPQUFNLFNBQVVDLEdBQ2xDQSxFQUFFQyxnQkFDSCxJQUdBNUosRUFBRSxZQUFhd0osR0FBWUssR0FBRyxnQkFBZ0IsU0FBVUYsR0FDdkQsSUFBSUcsRUFBSzlKLEVBQUUySixFQUFFSSxRQUFRMUcsS0FBSyxRQUFROUQsT0FBTyxHQUNyQ3lLLFFBQVFDLGFBRVhELFFBQVFDLGFBQWEsS0FBTSxLQUFNLElBQU1ILEdBR3ZDSSxPQUFPQyxTQUFTQyxLQUFPTixDQUV6QixJQUdBLElBQUlNLEVBQU9GLE9BQU9DLFNBQVNDLEtBQ3RCQSxJQUFNQSxFQUFPLElBQU1YLEdBQ3hCekosRUFBRSxXQUFhb0ssRUFBTyxLQUFNWixHQUFZYSxJQUFJLE9BQzdDLENBRUF4SSwyQkFBMkJzSCxFQUFNbUIsRUFBTXpILEdBQ3RDN0MsRUFBRSxXQUFXcUQsS0FBSyxDQUNqQlksS0FBTSxTQUNONkYsR0FBSVEsRUFDSkEsS0FBTUEsRUFDTjlHLE1BQU9YLElBQ0x5RyxTQUFTSCxFQUNiLENBR0F0SCx3Q0FBd0NRLEdBQ3ZDLE9BQU8sU0FBVThHLEVBQU10RyxHQThCdEIsT0E3QklBLEVBQUswSCxTQUEyQixjQUFoQjFILEVBQUswSCxTQUN4QnBCLEVBQUs5RixLQUFLLFNBQVVoQixFQUFjLDBCQUNqQixNQUFiUSxFQUFLb0IsS0FDUnJDLEVBQVU0SSxvQkFBb0JyQixFQUFNLEtBQU10RyxFQUFLNEgsSUFDeEIsT0FBYjVILEVBQUtvQixLQUNmckMsRUFBVTRJLG9CQUFvQnJCLEVBQU0sTUFBT3RHLEVBQUtVLEtBRWhEM0IsRUFBVTRJLG9CQUFvQnJCLEVBQU0sT0FBUXRHLEVBQUs3QixTQUFXNkIsRUFBSzdCLFNBQVc2QixFQUFLeUgsT0FHakUsT0FBYnpILEVBQUtvQixLQUNSa0YsRUFBSzlGLEtBQUssU0FBVWhCLEVBQWMsd0JBQ1gsV0FBYlEsRUFBS29CLE1BQ2ZrRixFQUFLOUYsS0FBSyxTQUFVaEIsRUFBYyx3QkFDbENULEVBQVU0SSxvQkFBb0JyQixFQUFNLFVBQVd0RyxFQUFLNkgsVUFDN0IsUUFBYjdILEVBQUtvQixNQUNma0YsRUFBSzlGLEtBQUssU0FBVWhCLEVBQWMsa0RBQ2xDVCxFQUFVNEksb0JBQW9CckIsRUFBTSxnQkFBaUJ0RyxFQUFLOEgsZ0JBQ25DLGVBQWI5SCxFQUFLb0IsS0FDZmtGLEVBQUs5RixLQUFLLFNBQVVoQixFQUFjLCtDQUNYLE9BQWJRLEVBQUtvQixNQUNma0YsRUFBSzlGLEtBQUssU0FBVWhCLEVBQWMsd0JBQ2xDVCxFQUFVNEksb0JBQW9CckIsRUFBTSxNQUFPdEcsRUFBSytILE9BRWhEekIsRUFBSzlGLEtBQUssU0FBVWhCLEVBQWMseUJBQ2xDVCxFQUFVNEksb0JBQW9CckIsRUFBTSxPQUFRLGFBSXZDLEVBRVQsQ0FFQXRILDBCQUEwQmdKLEVBQVV4TSxFQUFReUssR0FDM0NBLEVBQVFBLEdBQVMsRUFDakIsSUFBSWdDLEVBQVkvRyxTQUFTOEcsRUFBU0UsUUFBVWpDLEVBQ3hDa0MsRUFBWUMsR0FBR25KLEtBQUt6RCxPQUFPQSxFQUFmNE0sQ0FBdUIsSUFBSTlNLEtBQWlCLElBQVoyTSxJQUVoRCxPQURBRCxFQUFTRSxLQUFLQyxHQUFXOUQsWUFBWSxVQUM5QjhELENBQ1IsQ0FFQW5KLGNBQWN5RixHQUNiLE9BQU9BLEVBQUVuSSxRQUFRLFdBQVksR0FDOUIsQ0FFQTBDLDBCQUEwQnFKLEdBRXpCLE9BQU9BLEVBQ0wvTCxRQUFRLGVBQWdCLElBQ3hCQSxRQUFRLGdCQUFpQixJQUV6QkEsUUFBUSxXQUFZLElBRXBCQSxRQUFRLHdCQUF5QixHQUNwQyxDQUdBMEMsa0JBQWtCc0osR0FHakIsSUFGQSxJQUFJQyxFQUFRLENBQUEsRUFDUkMsR0FBNEIsTUFBbkJGLEVBQVksR0FBYUEsRUFBWTVMLE9BQU8sR0FBSzRMLEdBQWFuSSxNQUFNLEtBQ3hFd0IsRUFBSSxFQUFHQSxFQUFJNkcsRUFBTTdMLE9BQVFnRixJQUFLLENBQ3RDLElBQUk4RyxFQUFPRCxFQUFNN0csR0FBR3hCLE1BQU0sS0FDMUJvSSxFQUFNRyxtQkFBbUJELEVBQUssS0FBT0MsbUJBQW1CRCxFQUFLLElBQU0sR0FDcEUsQ0FDQSxPQUFPRixDQUNSLENBRUF2Siw0QkFBNEJ1SCxHQUMzQixJQUFJb0MsRUFBYTVKLEVBQVU2SixXQUFXdkIsT0FBT0MsU0FBU3VCLFFBQ2xEQyxFQUFhM0wsRUFBRUwsT0FBTzZMLEVBQVlwQyxHQUNsQ3dDLEVBQVksSUFBTTVMLEVBQUU2TCxNQUFNRixHQUFZLEdBRzFDLE1BRmMsQ0FBQ3hCLFNBQVMyQixTQUFVLEtBQU0zQixTQUFTZSxLQUFNZixTQUFTNEIsVUFBVTNJLEtBQUssSUFFOUR3SSxDQUNsQixDQUdBL0oseUJBQXlCbUssRUFBYUMsRUFBYUMsR0FFbEQsTUFBTUMsRUFBOEIsS0FBZkgsRUFFckIsR0FBSUcsR0FBZ0MsTUFBaEJELEVBQXNCLENBRXpDLElBQUlFLEVBQVVoSCxTQUFTaUgsdUJBQ25CTCxHQUFlQyxJQUNsQkcsR0FBWSxLQUFJSixPQUFpQkMsS0FHbENDLEVBQWFJLEtBQUtGLEdBQVNHLE1BQzVCLE1BQ1NKLEdBQWdDLE1BQWhCRCxHQUN4Qk0sTUFBTyxHQUFFcEgsU0FBU2lILDJCQUEyQkwsT0FBaUJDLEtBRy9ELE9BQU9FLENBQ1IsQ0FHQXRLLHlCQUF5QnVILEdBRXhCLElBQUtBLEVBQU9xRCxjQUFpQixLQUFPLG9EQUVwQ3pNLEVBQUcsc0JBQXFCNkosR0FBRyxVQUFVLFdBQ25CN0osRUFBRXpCLE1BQU1zSCxNQUFNMUcsUUFBUSxpQkFBa0IsSUFDekRhLEVBQUcsdUJBQXNCc0QsV0FBVyxXQUNyQyxJQUVBdEQsRUFBRyxpQkFBZ0I2SixHQUFHLG1CQUFtQixXQUN4QzdKLEVBQUcsaUJBQWdCNkYsSUFBSSxJQUN2QjdGLEVBQUUsaUJBQWlCME0sT0FBT3hGLFlBQVksZ0JBQWdCQyxTQUFTLG9CQUMvRG5ILEVBQUcsdUJBQXNCcUQsS0FBSyxXQUFZLFdBQzNDLElBRUFyRCxFQUFFLGlCQUFpQjZKLEdBQUcsU0FBVSxRQUFRLFNBQVVGLEdBRWpEQSxFQUFFQyxpQkFFRixNQUFNK0MsRUFBVTNNLEVBQUUsdUJBQ2xCMk0sRUFBUXRKLEtBQUssV0FBWSxJQUd6QixNQUFNdUosRUFBTzVNLEVBQUUsaUJBQWlCLEdBQUc2TSxNQUFNLEdBRXpDLElBQUtELEVBR0osT0FGQTVNLEVBQUUsaUJBQWlCc00sS0FBTSxHQUFFbEgsU0FBUzBILFdBQVdQLFlBQy9DSSxFQUFRckosV0FBVyxZQUlwQixNQUFNeUosRUFBUyxJQUFJQyxXQUNuQkQsRUFBT0UsV0FBV0wsRUFBTSxTQUV4QkcsRUFBT0csT0FBUyxXQUVmLElBQUlDLEVBQW9CLEtBQ3hCLElBQU1BLEVBQW9CQyxLQUFLQyxNQUFNTixFQUFPTyxPQUF1QixDQUFaLE1BQU8zRCxHQUFLLENBRW5FLElBQUt3RCxFQUdKLE9BRkFuTixFQUFFLGlCQUFpQnNNLEtBQUtsSCxTQUFTbUksWUFBWUMsYUFBYTdLLFNBQVcsdUJBQXVCNEosWUFDNUZJLEVBQVFySixXQUFXLFlBS3BCOEYsRUFBT3FELGNBQWNNLEVBQU9PLFFBQzFCRyxNQUFLLENBQUNDLEVBQVVDLEVBQVFDLEtBRXhCLEdBQUlGLEVBQVNoTCxHQUFLLEVBRWpCLFlBREExQyxFQUFFLGlCQUFpQnNNLEtBQUtvQixFQUFTL0ssUUFBUTRKLE9BS3RDbkQsRUFBT3lFLGlCQUNWekUsRUFBT3lFLGdCQUFnQkgsR0FHakIsTUFFTUksRUFBZSxPQUZUOU4sRUFBRyx1Q0FBc0M2RixNQUczQ1QsU0FBUzJJLHNCQUFzQkMsVUFBVUMsbUJBQ3ZEN0ksU0FBUzJJLHNCQUFzQkMsVUFBVUUsZUFHNUNDLFdBQVdDLFVBQVUsQ0FDcEJ0RSxHQUFJLDZCQUNKdUUsTUFBTyxVQUNQQyxNQUFPbEosU0FBU21KLFFBQ2hCVCxLQUFNQSxFQUNOVSxNQUFPLE1BR1J4TyxFQUFFLGlCQUFpQnlPLE1BQU0sT0FBTyxJQUdoQ0MsTUFBSyxFQUFHbEIsbUJBSUpwRSxFQUFPdUYsaUJBQ1Z2RixFQUFPdUYsZ0JBQWdCbkIsR0FHcEJBLEdBQWdCQSxFQUFhOUssR0FBSyxLQU5YLElBT3ZCOEssRUFBYTlLLElBQ2hCMUMsRUFBRyxpQkFBZ0JrSCxZQUFZLG9CQUFvQkMsU0FBUyxnQkFFN0RuSCxFQUFFLGlCQUFpQnNNLEtBQUtsSCxTQUFTbUksWUFBWUMsRUFBYTdLLFNBQVd5QyxTQUFTd0oscUJBQXFCckMsT0FBTSxJQUd6R3NDLFFBQU8sS0FDUGxDLEVBQVFySixXQUFXLFdBQVcsSUFHbEMsR0FDRCxDQUVBekIsMEJBQTBCaU4sR0FDekIsTUFBTUMsRUFBYSxDQUFBLEVBZW5CLE9BZEFELEVBQWdCRSxTQUFTQyxJQUVwQkEsRUFBSTNFLEtBQUs0RSxTQUFTLFFBTUksaUJBQWRELEVBQUl6TCxRQUNkeUwsRUFBSXpMLE1BQVF5TCxFQUFJekwsTUFBTTJMLFFBRXZCSixFQUFXRSxFQUFJM0UsTUFBUTJFLEVBQUl6TCxNQUM1QixJQUVNdUwsQ0FDUixDQUVBbE4saUJBQWlCdU4sR0FFaEJwUCxFQUFFb1AsR0FBY25JLEtBQUsseUJBQXlCbkgsTUFBSyxTQUFVMEUsRUFBRzZLLEdBQy9EclAsRUFBRXpCLE1BQU0ySSxZQUFhLFlBQVdBLFlBQWEsYUFDOUMsSUFFQWxILEVBQUVvUCxHQUFjLEdBQUdFLE9BQ3BCLENBS0F6Tix3QkFBd0IwTixFQUFLQyxFQUFVLENBQUEsRUFBSTFOLEVBQU8sS0FFakQsTUFBTTJOLEVBQWEsSUFBSUMsZ0JBQ2pCQyxFQUFTLElBQUtILEVBQVNJLE9BQVFILEVBQVdHLFFBS2hELE9BSmdCQyxZQUFXLEtBQzFCSixFQUFXSyxPQUFPLEdBQ2hCaE8sR0FFSU0sTUFBTW1OLEVBQUtJLEdBQ2hCSSxNQUFNckMsSUFDTixJQUFLQSxFQUFTc0MsR0FDYixNQUFNLElBQUlDLE1BQU8sR0FBRXZDLEVBQVNDLFdBQVdELEVBQVN3QyxjQUVqRCxPQUFPeEMsQ0FBUSxJQUVmeUMsT0FBTzFOLElBQ1AsR0FBbUIsZUFBZkEsRUFBTTZILEtBQ1QsTUFBTSxJQUFJMkYsTUFBTSxxQkFDakIsR0FFSCxDQUVBcE8sZUFBZXVPLEVBQVFDLEVBQU05QixFQUFTK0IsR0FFckMsR0FBYzFLLE1BQVZ3SyxFQUVILFlBREE1TixRQUFRTSxLQUFLLHNEQUlkLE1BQU15TixFQUFRLE9BQ1JwTyxFQUFVbkMsRUFBRXdRLEtBQU0sR0FBRW5PLG1DQUFvQyxDQUFFK04sT0FBUUEsRUFBUUMsS0FBTUEsSUFDdEZsTyxFQUFRc0wsS0FBS2MsR0FBV2dDLEdBQ3hCcE8sRUFBUXVNLEtBQUs0QixHQUFXQyxFQUN6QixDQVNBMU8seUJBQXlCNE8sRUFBT0MsR0FFL0IsT0FBYTlLLE1BQVQ2SyxFQUEyQixHQUUzQkEsRUFBTWpSLE9BQVNrUixFQUNYRCxFQUFNdEssTUFBTSxFQUFHdUssR0FBT3ROLEtBQUssTUFBUyxJQUFHZ0MsU0FBU3VMLFdBQVd4UixRQUFRLE9BQVFzUixFQUFNalIsT0FBU2tSLEtBRzNGRCxFQUFNdEssTUFBTSxFQUFHdUssR0FBT3ROLEtBQUssS0FDbkMsQ0FFQXZCLGdCQUFnQnNJLEVBQVVmLEVBQVMsQ0FBQSxFQUFJd0gsR0FBYSxFQUFPQyxFQUFnQixJQUUxRSxNQUFNaFEsRUFBTSxJQUFJaVEsSUFBSTNHLEVBQVVELE9BQU9DLFVBRXJDLElBQUssTUFBT0csRUFBTTlHLEtBQVV1TixPQUFPQyxRQUFRNUgsSUFDbkM1RixHQUFtQixJQUFWQSxJQUNkM0MsRUFBSW9RLGFBQWFDLElBQUk1RyxFQUFNOUcsR0FJOUIsR0FBSW9OLEVBQVksQ0FFZixNQUFNTyxFQUFTLElBQUlMLElBQUk1RyxPQUFPQyxTQUFTaUgsTUFDdkMsSUFBSyxNQUFPOUcsRUFBTTlHLEtBQVV1TixPQUFPQyxRQUFRSCxHQUNyQ3JOLEdBQ0wyTixFQUFPRixhQUFhQyxJQUFJNUcsRUFBTTlHLEdBRy9CM0MsRUFBSW9RLGFBQWFDLElBQUksVUFBV0MsRUFBT2hPLFdBQ3hDLENBRUEsT0FBT3RDLEVBQUlzQyxVQUNaLENBRUF0Qix1QkFBdUJ1UCxFQUFNQyxHQUM1QixNQUFNeFEsRUFBTSxJQUFJaVEsSUFBSU0sRUFBTWxILE9BQU9DLFVBRWpDLE9BREF0SixFQUFJb1EsYUFBYUMsSUFBSSxVQUFXRyxHQUN6QnhRLEVBQUlzQyxVQUNaLENBRUF0QixtQkFBbUJ5UCxFQUFVRCxFQUFTLEdBQ3JDLE1BQVEsR0FBRWhQLCtCQUErQmlQLG9CQUEyQkQsR0FDckUsQ0FFQXhQLHFCQUFxQnlQLEVBQVV4SCxFQUFLLEdBRW5DLEdBQWlCLE9BQWJ3SCxFQUFtQixLQUFNLCtCQUU3QixJQUVDLE1BQU1uUCxRQUFnQkMsTUFBTVIsRUFBVTJQLFlBQVlELEVBQVV4SCxJQUN0RDBILFFBQWFyUCxFQUFRRyxPQUUzQixPQUFJa1AsRUFBSzlPLEdBQUssRUFDTixFQUFDLEVBQU8sQ0FBQSxHQUdULEVBQUMsRUFBTThPLEVBQUtDLElBQUksR0FJeEIsQ0FGQSxNQUFPbFAsR0FDTixNQUFPLEVBQUMsRUFBTyxDQUFBLEVBQ2hCLENBQ0QsQ0FPQVYsd0JBQXdCNlAsRUFBVTlKLEVBQVEsQ0FBQytKLE1BQU8sRUFBR0MsT0FBUSxJQUU1RCxNQUFNQyxFQUFNalEsRUFBVWtRLHdCQUF3QkosR0FDOUNLLGFBQWFDLFFBQVFILEVBQUt6RSxLQUFLNkUsVUFBVXJLLEdBQzFDLENBRUEvRiwrQkFBK0I2UCxHQUM5QixJQUFJUSxFQUNKLE1BQU1DLEVBQU9oSSxTQUFTNEIsU0FDaEJxRyxFQUFZVixFQUFTck8sS0FBSyxNQUVoQyxHQUFrQixLQUFkK08sRUFDSEYsRUFBZ0JFLE1BRVosQ0FFSkYsRUFEa0JSLEVBQVNyTyxLQUFLLFFBRWpDLENBR0EsTUFEYSxHQUFFNk8sS0FBaUJDLFNBRWpDLENBTUF0USx3QkFBd0I2UCxHQUV2QixNQUFNRyxFQUFNalEsRUFBVWtRLHdCQUF3QkosR0FDeENXLEVBQWVOLGFBQWFPLFFBQVFULEdBQzFDLEdBQW9CLE1BQWhCUSxFQUVKLE9BQU9qRixLQUFLQyxNQUFNZ0YsRUFDbkIsQ0FFQXhRLHdCQUF3QjBRLEVBQVEvTyxRQUVqQm9DLElBQVZwQyxFQUNIK08sRUFBTzFNLElBQUksSUFHWDBNLEVBQU8xTSxJQUFJckMsRUFHYixDQUVBM0IsdUJBQXVCeUssRUFBTWtHLEdBQzFCLE1BQU1DLEVBQUtDLFNBQVNDLGNBQWMsWUFDbENGLEVBQUdqUCxNQUFROEksRUFDWG1HLEVBQUdHLGFBQWEsV0FBWSxJQUM1QkgsRUFBR0ksTUFBTUMsU0FBVyxXQUNwQkwsRUFBR0ksTUFBTUUsS0FBTyxVQUNoQkwsU0FBUzVFLEtBQUtrRixZQUFZUCxHQUMxQkEsRUFBR1EsU0FDSFAsU0FBU1EsWUFBWSxRQUNyQlIsU0FBUzVFLEtBQUtxRixZQUFZVixHQUMxQnpTLEVBQUV3UyxHQUFNblAsS0FBSyxRQUFTLFdBQVcrUCxRQUFRLFdBQVdBLFVBQVVBLFFBQVEsUUFDdEVwVCxFQUFFd1MsR0FBTWxQLFdBQVcsMEJBQ25CdEQsRUFBRXdTLEdBQU1uUCxLQUFLLFFBQVNpSixFQUN6QixDQUVBekssaUJBQWlCa0osR0FDVCxJQUFJc0ksRUFBSVgsU0FBU0MsY0FBYyxPQUV0QyxPQURBVSxFQUFFQyxVQUFZdkksRUFDUHNJLEVBQUVFLGFBQWVGLEVBQUVHLFdBQWEsRUFDeEMsQ0FFQzNSLG9CQUFvQjRSLEVBQU9sTixFQUFLbU4sR0FDOUIsSUFBSUMsRUFBa0JGLEVBQ3RCLEdBQUdBLEVBQU1qVSxPQUFTK0csRUFBTSxFQUFHLENBQ3pCLElBQUlxTixFQUFhck4sRUFDakIsR0FBR21OLEVBQVcsQ0FDWkUsRUFBYUgsRUFBTUksWUFBWUgsR0FDL0IsTUFBTUksRUFBa0JMLEVBQU10TixNQUFNeU4sR0FDakNyTixFQUFNcU4sSUFDUHJOLEVBQU1xTixHQUNSRCxFQUFrQkYsRUFBTXROLE1BQU0sRUFBR0ksR0FBTyxPQUFTdU4sQ0FDbkQsTUFDRUgsRUFBa0JGLEVBQU10TixNQUFNLEVBQUdJLEdBQU8sS0FFNUMsQ0FFQSxPQUFPb04sQ0FDVCxDQUVBOVIsMEJBQTBCa1MsRUFBR0MsR0FDM0IsTUFBTUMsRUFBUUYsRUFBRU4sTUFBTXZOLGNBQ2hCZ08sRUFBUUYsRUFBRVAsTUFBTXZOLGNBQ3RCLE9BQUkrTixFQUFRQyxHQUFpQixFQUN6QkQsRUFBUUMsRUFBZ0IsRUFDckIsQ0FDVCxDQUVBclMseUJBQXlCc1MsR0FDdkIsTUFBUSxxS0FFMERBLDBEQUFtRUEsd0ZBR3ZHQSwrQkFFaEMsQ0FFQXRTLHVCQUF1QnVTLEVBQWNDLEVBQWNDLEVBQVNDLEdBQzFELE1BQVEsbUpBRTBESCwwREFBcUVBLFFBQW1CRSxnRkFDeEZELDBEQUFxRUEsUUFBbUJFLG1EQUc1SixDQUdBMVMseUJBQ0UsTUFBTyxDQUFDLEdBQUksR0FBSSxHQUFJLElBQ3RCLENBRUFBLHlDQUF3QzJTLE9BQUNBLEVBQU1DLFlBQUVBLEVBQVdDLGVBQUVBLEVBQWNDLEVBQUVBLElBQzVFLE1BQU1DLEVBQVFELEVBQUVoRixPQUFPNkUsT0FBT0MsR0FBbUIsS0FBRUMsR0FDN0NwSyxFQUFPc0ssRUFBWSxLQUNuQkMsRUFBVUQsRUFBUyxFQU16QixNQUFTLDJNQUxTQSxFQUFZLEtBQVMsMkxBRWxCRCxFQUFFaEYsT0FBT21GLE1BQU14RyxNQUFNaEMsYUFVSmhDLDBHQVRqQnFLLEVBQUVoRixPQUFPb0YsTUFBTSxHQUFHekcsTUFBTWhDLGFBWVB1SSx5REFLeEMsQ0FFQWhULDZCQUE2Qm1ULEVBQU9DLEVBQWN0RixHQUNoRCxNQUFNOEUsWUFBRUEsRUFBV0MsZUFBRUEsR0FBbUIvRSxHQUNsQzZFLE9BQUVBLEdBQVc3RSxFQUFPQSxPQUMxQixJQUFxQixJQUFqQjhFLEVBQW9CLE9BQ3hCLFFBQWU3TyxJQUFYNE8sRUFBc0IsT0FFMUIsTUFBTUksRUFBUUosRUFBT0MsR0FDZlMsRUFBV04sRUFBTU0sVUFBWVYsRUFBTyxHQUFhLFNBQ2pEVyxFQUFjUCxFQUFNUSxXQUFhWixFQUFPLEdBQWMsVUFDNUQsR0FBZ0IsTUFBWlUsR0FBbUMsTUFBZkMsRUFBcUIsQ0FDM0MsTUFBTXpKLEVBQVNrSixFQUFNL1IsS0FBSzZSLEdBQWdCVyxLQUFLQyxVQUMvQ25MLFNBQVNpSCxLQUFRLEdBQUU4RCxLQUFZQyxJQUFjekosR0FDL0MsQ0FDRixDQUVBN0osc0NBQXFDMlMsT0FBQ0EsRUFBTUMsWUFBRUEsRUFBV0MsZUFBRUEsRUFBY0MsRUFBRUEsSUFDekUsTUFBTUMsRUFBUUQsRUFBRWhGLE9BQU82RSxPQUFPQyxHQUFtQixLQUFFQyxHQUU3Q2EsRUFBVVgsRUFBUyxFQUNuQkMsRUFBVUQsRUFBUyxFQU16QixNQUFTLGlOQUxTQSxFQUFZLEtBQVMsbU1BRWxCRCxFQUFFaEYsT0FBT21GLE1BQU14RyxNQUFNaEMsYUFVRmlKLGdIQVRuQlosRUFBRWhGLE9BQU9vRixNQUFNLEdBQUd6RyxNQUFNaEMsYUFZTHVJLCtEQUsxQyxFQ3ByQ0ssU0FBU1csRUFBcUJDLEVBQU9DLEdBQzFDLElBQUlDLEVBQVUzVixFQUFFLFdBQVlBLEVBQUV5VixJQUFRRyxRQUFPLFdBQzVDLE1BQWlDLFFBQTFCNVYsRUFBRXpCLE1BQU1zWCxJQUFJLFVBQ25CLElBQUVyVyxPQUNIUSxFQUFFLFFBQVNBLEVBQUV5VixJQUFRMUssS0FBSyxxQ0FBdUM0SyxFQUFVLFFBQVVELEVBQVksaUJBQ25HLENBRU8sU0FBU0ksRUFBOEJMLEdBQzNDLE9BQU96VixFQUFFLG9CQUFxQkEsRUFBRXlWLElBQVFqVyxPQUFTLENBQ3BELENBRU8sU0FBU3VXLEVBQWlCTixHQUMvQixPQUErQyxHQUF4Q0ssRUFBOEJMLEVBQ3ZDLENBRU8sU0FBU08sRUFBbUI3TSxHQUNqQyxPQUFPbkosRUFBRSxRQUFTQSxFQUFFLGtCQUFtQkEsRUFBRW1KLElBQU84TSxTQUNsRCxDQStCTyxTQUFTQyxFQUEyQkMsRUFBUTFDLEVBQU8yQyxFQUFVQyxFQUFjQyxFQUFNQyxHQUFVLEVBQU1qSSxFQUFRLElBQ3JDLEdBQXBFdE8sRUFBRSxnQkFBZ0JtVyxFQUFPLElBQUtuVyxFQUFFekIsT0FBTzBJLEtBQUssY0FBY3pILFNBQzNEUSxFQUFFLGdCQUFnQm1XLEVBQU8sSUFBS25XLEVBQUV6QixPQUFPZ1MsUUFDdkN2USxFQUFFLGdCQUFnQm1XLEVBQU8sSUFBS25XLEVBQUV6QixPQUFPaVksT0FBT3hXLEVBQUUsdURBRW5EQSxFQUFFLGdCQUFnQm1XLEVBQU8sSUFBS25XLEVBQUV6QixPQUFPMEksS0FBSyxXQUFXdVAsT0FBTyxZQUFjRixFQUFRLFlBQVdoSSxxREFBeUQ4SCxLQUFhRyxFQUF1QixHQUFiLHdCQUErQkYsRUFBZSxtQkFBcUI1QyxFQUFRLE9BQzdQLENBK0hPLFNBQVNnRCxFQUF3QmhCLEVBQU9pQixHQUs1QyxPQUpZakIsRUFBTTVTLEtBQUssYUFBYTJNLFFBQVFtRyxRQUFRZ0IsV0FBVSxTQUFTbkUsR0FDcEUsT0FBT0EsRUFBS29FLFFBQVVGLENBQ3pCLEdBR0gsQ0Q0L0JBMVcsR0FBRSxXQUdENEIsRUFBVWlWLGtCQUNYLDZERWpzQ08sU0FBOEJ4VSxFQUFheVUsRUFBYzVMLEdBQzVELElBQUk2TCxFQUNBQyxFQUFRLENBQUEsRUFFUm5XLEVBQU13QixFQUFjLDBDQUE0QzZJLEVBRXBFRCxHQUFHM0ksS0FBS3pCLEdBQUssU0FBUzRCLEVBQU9ILEdBQ2hDLEdBQUdHLEVBQ0MsT0FBT0QsUUFBUU0sS0FBS0wsR0FHeEIsSUFBSXdVLEdBREpGLEVBQVF6VSxHQUlGME0sU0FBUSxTQUFTc0gsR0FHdEJXLEdBRjBCLEdBQXBCWCxFQUFLWSxXQUVIN1UsRUFBYyw4QkFBZ0NpVSxFQUFLYSxPQUduRDlVLEVBQWMsZ0NBQWtDaVUsRUFBS1ksV0FBYSxhQUFlWixFQUFLYyxZQUFjLFNBQVdsTSxFQUFPLGNBRzNIb0wsRUFBS2EsT0FBU0gsRUFBTVYsRUFBS2EsVUFDeEJILEVBQU1WLEVBQUthLFFBQVUsQ0FDckI3TSxLQUFNZ00sRUFBS2MsWUFBYTVRLElBQUk4UCxFQUFLYSxPQUNqQ2IsS0FBTVcsRUFBT2hULEtBQU1xUyxFQUFLZSxZQUFhQyxJQUFLaEIsRUFBS1ksYUFLbkRELEdBRjBCLEdBQXBCWCxFQUFLaUIsV0FFSGxWLEVBQWMsOEJBQWdDaVUsRUFBS3ZNLE9BR25EMUgsRUFBYyxnQ0FBa0NpVSxFQUFLaUIsV0FBYSxhQUFlakIsRUFBS2tCLFlBQWMsU0FBV3RNLEVBQU8sY0FHM0hvTCxFQUFLdk0sT0FBU2lOLEVBQU1WLEVBQUt2TSxVQUN4QmlOLEVBQU1WLEVBQUt2TSxRQUFVLENBQ3JCTyxLQUFNZ00sRUFBS2tCLFlBQWFoUixJQUFLOFAsRUFBS3ZNLE9BQ2xDdU0sS0FBTVcsRUFBT2hULEtBQU1xUyxFQUFLbUIsWUFBYUgsSUFBS2hCLEVBQUtpQixZQUVwRCxJQUVBLElBQ0lHLEVBQVF6TSxHQUFHckQsTUFBTStQLGFBR3JCRCxFQUFZLEtBQUksTUFDaEJBLEVBQVksS0FBSSxpQkFFaEIsSUFBSUUsRUFBUTNNLEdBQUc0TSxPQUFPRCxRQUNqQlosTUFBTS9MLEdBQUc2TSxPQUFPZCxJQUNoQkQsTUFBTUEsR0FDTmdCLEtBQUssQ0FWRSxJQUFjLE1BV3JCQyxhQUFhLEtBQ2JDLFFBQVEsS0FDUnBPLEdBQUcsUUF3RFIsV0FDSXFPLEVBQUs3VSxLQUFLLElBQUs4VSxHQUNmQyxFQUFPL1UsS0FBSyxZQUFhZ1YsR0FDekIvTCxFQUFLakosS0FBSyxZQUFhZ1YsRUFDM0IsSUEzREtDLFFBRURDLEVBQU10TixHQUFHZ0ksT0FBTyxJQUFNNkQsR0FBY04sT0FBTyxPQUMxQ25ULEtBQUssS0FBTSxjQUNYQSxLQUFLLFFBbEJFLEtBbUJQQSxLQUFLLFNBbkJnQixLQXNCMUJrVixFQUFJL0IsT0FBTyxRQUFRZ0MsVUFBVSxVQUN4QjNWLEtBQUssQ0FBQyxZQUFhLFlBQWEsWUFBYSxjQUM3QzRWLFFBQVFqQyxPQUFPLFVBQ2ZuVCxLQUFLLE1BQU0sU0FBU3dGLEdBQUssT0FBT0EsQ0FBSSxJQUNwQ3hGLEtBQUssVUFBVyxjQUNoQkEsS0FBSyxPQUFRLElBQ2JBLEtBQUssUUFBUyxLQUNkQSxLQUFLLGNBN0JrQyxHQTZCUEEsS0FBSyxlQTdCRSxHQThCdkNBLEtBQUssU0FBVSxRQUNmbVQsT0FBTyxRQUNQblQsS0FBSyxJQUFLLGtCQUVmLElBQUk2VSxFQUFPSyxFQUFJL0IsT0FBTyxLQUFLZ0MsVUFBVSxRQUNoQzNWLEtBQUsrVSxFQUFNYixTQUNYMEIsUUFBUWpDLE9BQU8sUUFDZm5ULEtBQUssU0FBUyxTQUFTd0YsR0FBSyxNQUFPLFFBQVVBLEVBQUU1RSxJQUFPLElBQ3REWixLQUFLLGNBQWMsU0FBU3dGLEdBQUssTUFBTyxRQUFVQSxFQUFFNUUsS0FBTyxHQUFLLElBR2pFbVUsRUFBU0csRUFBSS9CLE9BQU8sS0FBS2dDLFVBQVUsVUFDbEMzVixLQUFLK1UsRUFBTVosU0FDWHlCLFFBQVFqQyxPQUFPLFVBQ2ZuVCxLQUFLLFFBQVMsZUFDZEEsS0FBSyxJQUFLLElBQ1Z3UCxNQUFNLFFBQVEsU0FBU2hLLEdBQUssT0FBTzZPLEVBQU03TyxFQUFFNUUsS0FBTyxJQUNsRHlVLEtBQUtkLEVBQU1lLE1BQ1g5TyxHQUFHLFlBQVksU0FBU2hCLEdBQzVCcUIsT0FBT0MsU0FBU2lILEtBQU92SSxFQUFFeU4sSUFDdEIsSUFHQWhLLEVBQU9pTSxFQUFJL0IsT0FBTyxLQUFLZ0MsVUFBVSxRQUNoQzNWLEtBQUsrVSxFQUFNWixTQUNYeUIsUUFBUWpDLE9BQU8sUUFDZm5ULEtBQUssUUFBUyxhQUNkQSxLQUFLLElBQUssSUFDVkEsS0FBSyxJQUFLLFVBQ1R3UCxNQUFNLFlBQWEsUUFDcEJ2RyxNQUFLLFNBQVN6RCxHQUNsQixPQUFHQSxFQUFFeU8sS0FBTyxFQUNEek8sRUFBRXlCLEtBQU8sVUFBVXpCLEVBQUV5TyxJQUFJLElBRXpCek8sRUFBRXlCLElBRVYsSUFTSixTQUFTNk4sRUFBUXRQLEdBQ2IsSUFBSStQLEVBQUsvUCxFQUFFa0IsT0FBT3ZDLEVBQUlxQixFQUFFc08sT0FBTzNQLEVBQ2xDcVIsRUFBS2hRLEVBQUVrQixPQUFPK08sRUFBSWpRLEVBQUVzTyxPQUFPMkIsRUFDM0JDLEVBQUtsYSxLQUFLbWEsS0FBS0osRUFBS0EsRUFBS0MsRUFBS0EsR0FDM0IsTUFBTyxJQUFNaFEsRUFBRXNPLE9BQU8zUCxFQUFJLElBQU1xQixFQUFFc08sT0FBTzJCLEVBQUksSUFBTUMsRUFBSyxJQUFNQSxFQUFLLFVBQVlsUSxFQUFFa0IsT0FBT3ZDLEVBQUksSUFBTXFCLEVBQUVrQixPQUFPK08sQ0FDL0csQ0FFQSxTQUFTVCxFQUFVeFAsR0FDZixNQUFPLGFBQWVBLEVBQUVyQixFQUFJLElBQU1xQixFQUFFaVEsRUFBSSxHQUM1QyxDQUNHLEdBQ0osSUNxTjBCOU8sUUFBUW5LLE9BQVVtSyxRQUFRbkssTUFBTW9aLFdDblYxRCxNQUFNQyxFQUVGQyxZQUFZaFEsRUFBTXFHLEdBRWQsUUFBNEIsSUFBakJBLEVBQVFhLEtBQ2YsTUFBTSxJQUFJSixNQUFNLHFDQUdwQjFSLEtBQUs2YSxRQUFValEsRUFDZjVLLEtBQUs4YSxPQUFTclosRUFBRW1KLEdBQU1tUSxRQUFRLFVBRTlCL2EsS0FBS2lSLFFBQVVBLEVBQ2ZqUixLQUFLOFIsS0FBT2IsRUFBUWEsS0FDcEI5UixLQUFLZ2Isa0JBQW9CL0osRUFBUStKLGtCQUVqQ2hiLEtBQUtpYixTQUFXLElBQUlDLGtCQUFrQkMsSUFDbENuYixLQUFLb2IscUJBQ0xwYixLQUFLcWIsdUJBQ0xyYixLQUFLc1ksa0JBQWtCLElBRzNCdFksS0FBS2liLFNBQVNLLFFBQVF0YixLQUFLNmEsUUFBUSxHQUFJLENBQ25DVSxXQUFXLEVBQ1hDLFNBQVMsSUFHYnhiLEtBQUt5YixhQUFlLEtBQ3BCemIsS0FBSzBiLGFBQWUsS0FDcEIxYixLQUFLMmIsbUJBQW9CLEVBQ3pCM2IsS0FBSzRiLGNBQWUsRUFHcEIsR0FBMkIsR0FETm5hLEVBQUV6QixLQUFLNmEsU0FBU25TLEtBQU0sbUJBQzFCekgsT0FDYixNQUFNLElBQUl5USxNQUFNLGtFQUdwQjFSLEtBQUtxYixzQkFFVCxDQUVBL0MsbUJBQ0lqVixVQUFVaVYsa0JBQ2QsQ0FLQXVELHFCQUVJLE1BQU1DLEVBQVcsQ0FDYkMsT0FBUSxDQUFFLEVBQ1ZDLE9BQVEsSUFjWixPQVhBdmEsRUFBRXpCLEtBQUs2YSxTQUFTblMsS0FBSyx3Q0FBd0NuSCxNQUFLLFdBRTlELE1BQU1tRSxFQUFPakUsRUFBRXpCLE1BQU02SSxLQUFLLFlBQVkvQixjQUNoQ2lGLEVBQU90SyxFQUFFekIsTUFBTThFLEtBQUssUUFDMUJnWCxFQUFTQyxPQUFRLEdBQUVyVyxXQUFjcUcsT0FBWXRLLEVBQUV6QixNQUFNc0gsS0FDekQsSUFFQTdGLEVBQUV6QixLQUFLNmEsU0FBU25TLEtBQU0sbURBQWtEbkgsTUFBSyxXQUN6RXVhLEVBQVNFLE9BQU85UixLQUFLekksRUFBRXpCLE1BQzNCLElBRU84YixDQUNYLENBRUFHLG9CQUFvQkMsRUFBSUMsR0FFcEIsR0FBVSxNQUFORCxHQUFvQixNQUFOQyxFQUFZLE9BQU8sRUFFckMsSUFBSyxJQUFLN0ksRUFBS3JPLEtBQVV1TixPQUFPQyxRQUFReUosRUFBR0gsUUFDdkMsR0FBSUksRUFBR0osT0FBT3pJLElBQVFyTyxFQUFPLE9BQU8sRUFHeEMsT0FBTyxDQUNYLENBRUFtWCx1QkFFSSxNQUFNQyxFQUFPcmMsS0FFYnlCLEVBQUV6QixLQUFLOGEsUUFBUXBTLEtBQUssaUJBQWlCNFQsSUFBSSxTQUFTblIsT0FBTSxXQUVwRGtSLEVBQUtWLG1CQUFvQixFQUN6QmxhLEVBQUU0YSxFQUFLeEIsU0FBUyxHQUFHMEIsaUJBQ25COWEsRUFBRTRhLEVBQUt2QixRQUFRcFMsS0FBSyxvQkFBb0JoRixRQUFRLEtBQUssV0FDakRqQyxFQUFFNGEsRUFBS3ZCLFFBQVFwUyxLQUFLLG9CQUFvQmpGLE9BQU8sSUFDbkQsR0FDSixJQUVBaEMsRUFBRXpCLEtBQUs4YSxRQUFRd0IsSUFBSSxpQkFBaUJoUixHQUFHLGlCQUFpQixTQUFVbUwsR0FFMUQ0RixFQUFLVCxhQUNMbkYsRUFBTXBMLGlCQUtOZ1IsRUFBS0osb0JBQW9CSSxFQUFLWCxhQUFjVyxFQUFLWixlQUlqRFksRUFBS1Ysb0JBRVRsRixFQUFNcEwsaUJBR05nUixFQUFLVixtQkFBb0IsRUFHekJsYSxFQUFFNGEsRUFBS3ZCLFFBQVFwUyxLQUFLLG9CQUFvQmhGLFFBQVEsS0FBSyxXQUNqRGpDLEVBQUU0YSxFQUFLdkIsUUFBUXBTLEtBQUssb0JBQW9CakYsT0FBTyxJQUNuRCxJQUlKLElBRUFoQyxFQUFFekIsS0FBSzhhLFFBQVF3QixJQUFJLG1CQUFtQmhSLEdBQUcsbUJBQW1CLFNBQVVtTCxHQUlsRSxJQUFLLE1BQU8rRixFQUFVdlgsS0FBVXVOLE9BQU9DLFFBQVE0SixFQUFLWixhQUFhTSxRQUM3RHRhLEVBQUU0YSxFQUFLdkIsUUFBUXBTLEtBQUs4VCxHQUFVbFYsSUFBSXJDLEdBQ2xDeEQsRUFBRTRhLEVBQUt2QixRQUFRcFMsS0FBSzhULEdBQVU3VCxZQUFZLGNBSTlDMFQsRUFBS1osYUFBYU8sT0FBT3ZMLFNBQVNnTSxJQUM5QkEsRUFBUXRPLE1BQU0sSUFHbEJrTyxFQUFLeEIsUUFBUW5TLEtBQU0sbUJBQWtCNUQsS0FBSyxXQUFZLFlBQ3REdVgsRUFBS1gsYUFBZSxLQUNwQlcsRUFBS1YsbUJBQW9CLEVBRXpCbGEsRUFBRTRhLEVBQUt2QixRQUFRcFMsS0FBSyxvQkFBb0JoRixRQUFRLEtBQUssV0FDakRqQyxFQUFFNGEsRUFBS3ZCLFFBQVFwUyxLQUFLLG9CQUFvQmpGLE9BQU8sSUFDbkQsSUFJQTRZLEVBQUtLLFdBQ1QsR0FDSixDQUVBQyxnQkFDSSxPQUFPM2MsS0FBS2lSLFFBQVEyTCxjQUN4QixDQUVBQyxnQkFBZ0J2WSxFQUFPLElBRW5CLE1BQU0rWCxFQUFPcmMsS0FHYkEsS0FBS29jLHVCQUNMcGMsS0FBS3NFLEtBQU9BLEdBQVF0RSxLQUFLMmMsZ0JBQ3pCM2MsS0FBS2lSLFFBQVE2TCxZQUFZOWMsS0FBS3NFLEtBQU10RSxNQUVwQ3lCLEVBQUV6QixLQUFLNmEsU0FBU2tDLFFBQVEsVUFBVXpSLEdBQUcsaUJBQWlCLFdBQ2xEK1EsRUFBS3BMLFFBQVErTCxhQUNqQixJQUdBaGQsS0FBS3liLGFBQWV6YixLQUFLNmIscUJBQ3pCN2IsS0FBSzBiLGFBQWUsS0FFcEIxYixLQUFLaWQscUJBQ1QsQ0FFQUMsaUJBRUlsZCxLQUFLb2IscUJBRUwsTUFBTWlCLEVBQU9yYyxLQUViQSxLQUFLbWQsY0FBZ0IsU0FBVS9SLEdBQ3RCaVIsRUFBS3BMLFFBQVFtTSxnQkFDZGhTLEVBQUVDLGlCQUNGRCxFQUFFaVMsa0JBQ0ZoQixFQUFLaUIsZ0JBSWI3YixFQUFFekIsS0FBSzZhLFNBQVN2UCxHQUFHLFNBQVV0TCxLQUFLbWQsY0FDdEMsQ0FFQS9CLHFCQUVJLE1BQU1pQixFQUFPcmMsS0FHYnlCLEVBQUV6QixLQUFLNmEsU0FBU25TLEtBQU0seUJBQXdCbkgsTUFBS2djLGVBQWdCdFgsRUFBRzZLLEdBR2xFLE1BQU0wTSxFQUFTL2IsRUFBRXpCLE1BRWpCLElBQUl5ZCxHQUFhLEVBRWpCLE1BeUJNQyxFQUFhSCxTQUdYSSxFQUFXclosS0FBS3NaLFlBQWNKLEVBQU9sVyxNQUFNdVcsTUFBTXhhLFVBQVV2QixRQUFRSyxpQkE1QnJEb2IsV0FHbEIsTUFBTU8sRUFBV04sRUFBTzlGLFNBQVNoUCxLQUFLLG1CQUN0QzhVLEVBQU8xWSxLQUFLLFlBQVksR0FDeEJnWixFQUFTOVAsT0FFVCxNQUFNbUIsUUFBaUI5TCxVQUFVdWEsV0FBV25jLEVBQUVxUCxHQUFPeEosT0FPckQsT0FKQWtXLEVBQU96WSxXQUFXLFlBQ2xCK1ksRUFBUzNQLE9BR0xnQixFQUFTaEwsR0FBSyxHQUNkMk0sRUFBTWlOLGtCQUFrQjVPLEVBQVMvSyxRQUMxQixFQUFDLEVBQU8rSyxFQUFTNk8sYUFJNUJsTixFQUFNaU4sa0JBQWtCLElBRWpCLEVBQUMsRUFBTSxXQUFVLEVBT1BFLEdBR2JOLEVBQVdyWixLQUFLNFosZUFBaUJQLEVBQVdRLGNBRTVDck4sRUFBTWlOLGtCQUFrQiwwQkFDakIsRUFBQyxFQUFPSixFQUFXclosS0FBSzhaLHdCQUEwQnZYLFNBQVN3WCxnQkFHbEV2TixFQUFNd04sU0FBU0MsaUJBQ2Z6TixFQUFNaU4sa0JBQWtCLHFCQUNqQixFQUFDLEVBQU9KLEVBQVdyWixLQUFLa2EsbUJBQXFCM1gsU0FBUzRYLGdCQUc3RDNOLEVBQU13TixTQUFTSSxlQUNmNU4sRUFBTWlOLGtCQUFrQixtQ0FDakIsRUFBQyxFQUFPSixFQUFXclosS0FBS3FhLHNCQUF3QjlYLFNBQVM0WCxnQkFHaEUzTixFQUFNd04sU0FBU00sZ0JBQ2Y5TixFQUFNaU4sa0JBQWtCLHFDQUNqQixFQUFDLEVBQU9KLEVBQVdyWixLQUFLdWEsdUJBQXlCaFksU0FBUzRYLGlCQUlyRTNOLEVBQU1pTixrQkFBa0IsSUFDakIsRUFBQyxFQUFNLFlBR1plLEVBQWtCdkIsVUFFcEIsTUFBTUksRUFBYSxDQUNmclosS0FBTSxDQUNGa2Esa0JBQW1CaEIsRUFBT2xaLEtBQUsscUJBQy9COFosdUJBQXdCWixFQUFPbFosS0FBSywwQkFDcEM0WixjQUE0QyxhQUE1QlYsRUFBTzFZLEtBQUssYUFBcUUsR0FBckMwWSxFQUFPbFosS0FBSyxzQkFDeEVzWixXQUFZSixFQUFPbFosS0FBSyx3QkFDeEJxYSxxQkFBc0JuQixFQUFPbFosS0FBSyxrQ0FDbEN1YSxzQkFBdUJyQixFQUFPbFosS0FBSyx1Q0FFdkM2WixhQUF3QyxpQkFBbEJYLEVBQU9sVyxPQUE2QyxJQUF2QmtXLEVBQU9sVyxNQUFNc0osU0FHN0RtTyxFQUFTQyxTQUF1QnRCLEVBQVdDLEdBQ2xELElBQUlzQixFQUFTekIsRUFBTzlGLFNBQVNoUCxLQUFNLHFCQUdkLEdBQWpCdVcsRUFBT2hlLFNBQ1BnZSxFQUFTeGQsRUFBRywyQ0FJWHNkLEdBT0R2QixFQUFPN1UsWUFBWSxjQUNuQnNXLEVBQU92YixRQUFRLEtBQUssV0FBY2pDLEVBQUV6QixNQUFNa2YsUUFBVSxNQVBwRDFCLEVBQU81VSxTQUFTLGNBQ2hCNFUsRUFBTzlGLFNBQVNPLE9BQU9nSCxHQUN2QkEsRUFBT2xSLEtBQUtpUixHQU1oQixFQUdKdmQsRUFBRXpCLE1BQU1zYyxJQUFJLFNBQVNoUixHQUFHLFNBQVMsU0FBVUYsR0FFdkNpUixFQUFLWCxhQUFlVyxFQUFLUixzQkFHUCxHQUFkNEIsR0FBaUIwQixhQUFhMUIsR0FFN0JELEVBQU8xWSxLQUFLLG9CQUViMlksRUFBWW5NLFlBQVcsS0FDbkJ3TixJQUVBekMsRUFBS2hCLHNCQUFzQixHQUM1QixLQUVIZ0IsRUFBS1YsbUJBQW9CLEVBRWpDLElBRUFsYSxFQUFFekIsTUFBTXNjLElBQUksV0FBV2hSLEdBQUcsV0FBVyxTQUFVRixHQUMzQ0EsRUFBRUMsaUJBQ0dtUyxFQUFPMVksS0FBSyxtQkFDYmdhLEdBRVIsR0FDSixHQUVKLENBRUFNLGFBQ0ksT0FBTzNkLEVBQUV6QixLQUFLNmEsU0FBU2tDLFFBQVEsVUFBVWpZLEtBQUssS0FDbEQsQ0FFQXVXLHVCQUVJLElBQUkwRCxHQUFVLEVBR2R0ZCxFQUFFekIsS0FBSzZhLFNBQVNuUyxLQUFLLHNFQUFzRW5ILE1BQUssU0FBVThkLEVBQUt2TyxHQUUzR2lPLEdBQVdqTyxFQUFNd04sU0FBU2dCLEtBQzlCLElBRUFQLEVBQ010ZCxFQUFFekIsS0FBSzZhLFNBQVNuUyxLQUFNLGlDQUFnQzNELFdBQVcsWUFDakV0RCxFQUFFekIsS0FBSzZhLFNBQVNuUyxLQUFNLGlDQUFnQzVELEtBQUssV0FBWSxXQUNqRixDQUVBNFgsWUFFSWpiLEVBQUV6QixLQUFLNmEsU0FBU25TLEtBQUsseUJBQXlCbkgsTUFBSyxTQUFVMEUsRUFBRzZLLEdBQzVEclAsRUFBRXpCLE1BQU0ySSxZQUFhLFlBQVdBLFlBQWEsYUFDakQsSUFFQWxILEVBQUV6QixLQUFLNmEsU0FBUyxHQUFHOUosT0FDdkIsQ0FFQXVNLGNBRUksTUFBTWlDLEVBQWlCOWQsRUFBRXpCLEtBQUs2YSxTQUFTblMsS0FBTSxxQkFDdkM4VyxFQUFlL2QsRUFBRXpCLEtBQUs2YSxTQUFTblMsS0FBTSxtQkFDM0MsSUFBSStXLEVBQWF6ZixLQUFLaVIsUUFBUXlPLGFBQWExZixLQUFLc0UsTUFFaERtYixFQUFXM04sS0FBTzlSLEtBQUs4UixLQUN2QjJOLEVBQWFoZSxFQUFFTCxPQUFPcWUsRUFBWXpmLEtBQUtpUixRQUFRME8sZUFHL0NILEVBQWExYSxLQUFLLFdBQVksWUFFOUIsTUFBTXVYLEVBQU9yYyxLQUViLEdBQUlBLEtBQUtpUixRQUFRMk8sU0FBVSxDQUN2QixJQUFJaGMsRUFHQUEsRUFEdUIsUUFBdkJ5WSxFQUFLcEwsUUFBUTRPLE9BQ0hwZSxFQUFFcWUsS0FBSyxDQUNieGQsSUFBS3RDLEtBQUtpUixRQUFRMk8sU0FDbEJ0YixLQUFNdUssS0FBSzZFLFVBQVUrTCxHQUNyQkksT0FBUXhELEVBQUtwTCxRQUFRNE8sT0FDckJFLFNBQVUsT0FDVkMsWUFBYSxvQ0FJUHZlLEVBQUV3ZSxJQUFJamdCLEtBQUtpUixRQUFRMk8sU0FBVUgsR0FHM0N6ZixLQUFLNGIsY0FBZSxFQUVwQmhZLEVBQVFzTCxNQUFLLFNBQVVDLEVBQVUrUSxHQUc3QjdELEVBQUtULGNBQWUsRUFFcEJTLEVBQUtYLGFBQWUsS0FFaEJXLEVBQUtwTCxRQUFRa1Asa0JBQWtCOUQsRUFBS0ssWUFDeEM2QyxFQUFlcFIsT0FFQ2tPLEVBQUtwTCxRQUFRbVAsZ0JBQWdCalIsRUFBVXNRLEVBQVlwRCxLQUc5REEsRUFBS3ZCLE9BQU81SyxNQUNibU0sRUFBS3ZCLE9BQU81SyxNQUFNLFNBRWxCbU0sRUFBS3ZCLE9BQU8sR0FBR2tCLFFBQVMsRUFDeEJ2YSxFQUFHLDZCQUE0QnlkLFdBS25DemQsRUFBRTRhLEVBQUt4QixTQUFTeUIsSUFBSSxTQUFVRCxFQUFLYyxlQUNuQ2QsRUFBS2EsZ0JBQ1IsSUFDQS9NLE1BQUssU0FBVWtRLEVBQU9ILEVBQVlJLEdBRS9CakUsRUFBS1QsY0FBZSxFQUNwQixNQUFNek0sRUFBV2tSLEVBQU1wUixrQkFDSDVILElBQWhCOEgsRUFBU2hMLElBQW9CZ0wsRUFBU2hMLEdBQUssR0FDM0NvYixFQUFlL1MsS0FBSzJDLEVBQVM2TyxXQUFXaFEsT0FHNUNxTyxFQUFLcEwsUUFBUXNQLGNBQWNwUixFQUFVc1EsRUFBWVMsRUFBWUksRUFDakUsSUFDQ2hRLFFBQU8sU0FBVWhHLEdBQ2RrVixFQUFhemEsV0FBVyxXQUM1QixHQUVKLEtBQU8sQ0FHQ3NYLEVBQUtYLGFBQWUsS0FHcEI2RCxFQUFlcFIsT0FFQ2tPLEVBQUtwTCxRQUFRbVAsZ0JBQWdCLEdBQUlYLEVBQVlwRCxLQUd4REEsRUFBS3ZCLE9BQU81SyxNQUNibU0sRUFBS3ZCLE9BQU81SyxNQUFNLFFBRWxCbU0sRUFBS3ZCLE9BQU8sR0FBR2tCLFFBQVMsR0FJNUJ2YSxFQUFFNGEsRUFBS3hCLFNBQVN5QixJQUFJLFNBQVVELEVBQUtjLGVBQ25DZCxFQUFLYSxpQkFFTHNDLEVBQWF6YSxXQUFXLFdBQ2hDLENBQ0osQ0FFQWtZLHNCQUVJLE1BQU1aLEVBQU9yYyxLQUNQd2dCLEVBQWMvZSxFQUFFekIsS0FBSzZhLFNBQVNuUyxLQUFNLGtCQUMxQyxHQUEwQixHQUF0QjhYLEVBQVl2ZixPQUFhLE9BRTdCLE1BQU13ZixFQUFnQnBkLFVBQVVxZCxtQkFBbUJqZixFQUFFekIsS0FBSzZhLFNBQVM4RixrQkFFbkVILEVBQVlyVixPQUFNLFNBQVVDLEdBRXhCQSxFQUFFQyxpQkFHRjVKLEVBQUU0YSxFQUFLeEIsU0FBU25TLEtBQUssd0JBQXdCbkgsTUFBSyxTQUFVMEUsRUFBRzZLLEdBQzNELE1BQU13QyxFQUFNN1IsRUFBRXFQLEdBQU9oTSxLQUFLLFFBQzFCckQsRUFBRXFQLEdBQU94SixJQUFJbVosRUFBY25OLElBQ3RCM0ssWUFBWSxjQUFjQSxZQUFZLFdBQy9DLEdBQ0osR0FDSixFQUdKLE1DdGRNaVksRUFBUSxDQUNWQyxjQUFlLENBQ2xCdFYsR0FBSSxnQkFDSnVWLEdBQUksS0FDSkMsS0FBTSxLQUNOQyxRQUFTLEtBQ1RDLGFBQWMsTUFFWEMsT0FBUSxDQUNYM1YsR0FBSSxTQUNKdVYsR0FBSSxDQUFDLEdBQUksSUFBSyxJQUFLLElBQUssS0FDeEJDLEtBQU0sSUFDTkMsUUFBUyxLQUNUQyxhQUFjLE1BRVhsYSxNQUFPLENBQ1Z3RSxHQUFJLFFBQ0p1VixHQUFJLENBQUMsSUFBSyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDeENDLEtBQU0sS0FDTkMsUUFBUyxFQUNUQyxhQUFjLEtBQ2RFLGdCQUFnQixHQUViQyxJQUFLLENBQ1I3VixHQUFJLE1BQ0p1VixHQUFJLENBQUMsTUFBTyxPQUFRLE9BQVEsT0FBUSxPQUFRLFFBQzVDQyxLQUFNLElBQ05DLFFBQVMsRUFDVEMsYUFBYyxFQUNkRSxnQkFBZ0IsR0FFYmphLElBQUssQ0FDUnFFLEdBQUksTUFDSnVWLEdBQUksQ0FBQyxVQUFXLFdBQVksV0FBWSxZQUN4Q0MsS0FBTSxJQUNOQyxRQUFTLEVBQ1RDLGFBQWMsS0FDZEUsZ0JBQWdCLEdBRWJsYSxJQUFLLENBQ1JzRSxHQUFJLE1BQ0p1VixHQUFJLENBQUMsTUFBTyxPQUFRLE9BQVEsT0FBUSxRQUNwQ0MsS0FBTSxJQUNOQyxRQUFTLEVBQ1RDLGFBQWMsS0FDZEUsZ0JBQWdCLEdBRWIvWixHQUFJLENBQ1BtRSxHQUFJLEtBQ0p1VixHQUFJLENBQUMsS0FBTSxNQUFPLE1BQU8sTUFBTyxPQUNoQ0MsS0FBTSxJQUNOQyxRQUFTLEVBQ1RDLGFBQWMsS0FDZEUsZ0JBQWdCLEdBRWJ2TCxXQUFZLENBQ2ZySyxHQUFJLGFBQ0p1VixHQUFJLENBQUMsS0FDTEMsS0FBTSxJQUNOQyxRQUFTLEVBQ1RDLGFBQWMsS0FDZEksVUFBVyxJQUNYRixnQkFBZ0IsSUFJakIsU0FBU0csRUFBa0I1YixHQUV2QixJQUFJb1AsRUFBSThMLEVBQU1sYixHQUNWNmIsRUFBYSxFQUNBLE1BQWJ6TSxFQUFFa00sU0FBbUJsTSxFQUFFa00sUUFBVSxJQUN4Q08sRUFBYSxHQUVWLElBQUlDLEVBQVUsRUFJZCxPQUhZLE1BQVIxTSxFQUFFZ00sS0FDVFUsRUFBVWxoQixLQUFLbWhCLE9BQU8zTSxFQUFFZ00sR0FBR3BjLEtBQUtvYyxHQUFPQSxFQUFHN2YsV0FFL0JzZ0IsRUFBYSxFQUFJQyxDQUM3QixDQUVBLFNBQVNFLEVBQW9CaGMsRUFBTVQsR0FDaEMsSUFBSTBjLEVBQWNmLEVBQU1sYixHQUN2QixHQUFJQSxHQUFRa2IsRUFBTUMsY0FBY3RWLElBQWUsTUFBVHRHLEVBQ3pDLE9BQU8sS0FFNEIsTUFBNUIwYyxFQUFZVixlQUNuQmhjLEdBQVMwYyxFQUFZVixjQUVsQixJQUFJRixFQUFPWSxFQUFZWixLQUNIOWIsRUFBUSxJQUNQQSxJQUFVLEdBQy9CLElBQUlnQixFQUFJLEVBQ0oyYixFQUFXRCxFQUFZYixHQUMzQixLQUFPN2IsR0FBUzhiLEdBQVE5YSxFQUFJMmIsRUFBUzNnQixRQUN4Q2dFLEdBQWdCOGIsRUFDaEI5YSxHQUFLLEVBRUYsT0FBT0EsQ0FDWCxDQUVBLFNBQVM0YixFQUFhbmMsRUFBTW9jLEVBQWVDLEdBQ3ZDLElBQUlKLEVBQWNmLEVBQU1sYixHQUd4Qm9jLEdBQWlCSCxFQUFZUixlQWdEN0IsT0EvQ2dCLFNBQVNsYyxHQUM1QixHQUFhLE1BQVRBLEVBQ0EsTUFBTyxHQUVYLEdBQUlTLEdBQVFrYixFQUFNQyxjQUFjdFYsR0FDNUIsT0FBT3RHLEVBRXFCLE1BQTVCMGMsRUFBWVYsZUFDWmhjLEdBQVMwYyxFQUFZVixjQUV6QixJQUFJZSxFQUFnQi9jLEVBQVEsRUFDeEIrYyxJQUFpQi9jLElBQVUsR0FFL0IsSUFBSThiLEVBQU9ZLEVBQVlaLEtBQ25CQyxFQUFVVyxFQUFZWCxRQUN0QlksRUFBV0QsRUFBWWIsR0FDdkI3YSxFQUFJLEVBS1IsSUFKOEIsTUFBekIwYixFQUFZTixXQUFxQnBjLEVBQVEwYyxFQUFZTixZQUN2RHBjLEVBQVEwYyxFQUFZTixXQUdmcGMsR0FBUzhiLEdBQVE5YSxFQUFJMmIsRUFBUzNnQixTQUFXOGdCLEdBQTBDLE1BQXBCQSxHQUE0QjliLEVBQUk4YixHQUNwRzljLEdBQWdCOGIsRUFDaEI5YSxHQUFLLEVBc0JSLE9BbkJlLE1BQVgrYSxHQUFtQkEsRUFBVSxHQUM3Qi9iLEdBQWdCM0UsS0FBSzhGLElBQUksR0FBSTRhLEdBQzdCL2IsRUFBUTNFLEtBQUs2RixNQUFNbEIsR0FFbkJBLEdBREFBLEdBQWdCM0UsS0FBSzhGLElBQUksR0FBSTRhLElBQ2Z6YSxRQUFReWEsSUFFdEIvYixFQUFRM0UsS0FBSzZGLE1BQU1sQixHQUduQitjLElBQWtCRixJQUFpQjdjLElBQVUsR0FTckMsR0FSSyxHQUFFQSxPQUlKLEdBQUUyYyxFQUFTM2IsT0FRM0IsQ0FFQSxNQUFNZ2MsRUFDSyxDQUNWckIsUUFDQVUsb0JBQ0FPLGVBQ0FILHVCQ2xLRC9WLE9BQU90SSxVQUFZQSxFQUluQnNJLE9BQU91Vyx5QkxtTkEsU0FBa0NoTCxFQUFPaUwsRUFBV0MsRUFBa0JDLEdBQzNFLElBQUlDLEVBQU1wTCxFQUFNNVMsS0FBSyxhQUNqQmllLEVBQU9ELEVBQUlFLFVBQVVsZSxLQUNyQm1lLEVBQVl2TCxFQUFNNVMsS0FBSyxlQUN2Qm9lLEVBQVV4TCxFQUFNNVMsS0FBSyxjQUN6QitkLEVBQWdCQSxHQUFpQixHQUU5QkksSUFFREUsY0FBY0YsR0FDZHZMLEVBQU0wTCxXQUFXLGdCQUdoQkYsSUFFREEsRUFBUW5SLFFBQ1IyRixFQUFNMEwsV0FBVyxlQUduQixJQUFJQyxFQUFNLEdBQ05DLEVBQVksQ0FBQSxFQUVoQixJQUFJLElBQUlDLEtBQU9SLEVBQU0sQ0FDbkIsSUFBSWplLEVBQU9pZSxFQUFLUSxHQUVoQixHQUFHemUsRUFBSzZkLEdBQVksQ0FDbEIsSUFBSWEsRUFBVTFlLEVBQUs2ZCxHQUNuQlcsRUFBVUUsR0FBV0QsRUFDckJGLEVBQUkzWSxLQUFLOFksRUFDWCxDQUNGLENBRUEsSUFBSUgsRUFDRixPQUFPLEVBTVQsSUFBSWhZLEVBQVMsQ0FDWG9ZLGFBQWdCSixFQUFJaGUsS0FBSyxNQUV2QnZDLEVBQU1nZ0IsRUFBSXJSLFFBQVEzTyxJQUNsQjRnQixHQUFhLEVBRWJDLEVBQWtCLFNBQVNwVSxHQUk3QixHQUhzQixpQkFBWkEsSUFDUkEsRUFBU0YsS0FBS0MsTUFBTUMsSUFFbEJBLEVBQUosQ0FLQSxJQUFJLElBQUlnVSxLQUFPaFUsRUFBT3pLLEtBQU0sQ0FDekIsSUFBSUEsRUFBT3lLLEVBQU96SyxLQUFLeWUsR0FDbkJDLEVBQVUxZSxFQUFLNmQsR0FFbkIsR0FBR2EsR0FBV0YsRUFBVUUsR0FBVSxDQUMvQixJQUFJSSxFQUFVTixFQUFVRSxHQUNwQkssRUFBV2YsRUFBSUMsS0FBS2EsR0FDcEJFLEVBQVU3aEIsRUFBRSxLQUFNNGhCLEdBR3RCLElBQUksSUFBSS9QLEtBQU9oUCxFQUFNLENBQ2xCLElBQ0lpZixFQUFPRCxFQURHcEwsRUFBd0JoQixFQUFPNUQsSUFFekNrUSxFQUFRL2hCLEVBQUU4aEIsR0FFVkUsRUFBVUQsRUFBTWxmLEtBQUssa0JBQW9CN0MsRUFBRThoQixHQUFNL1csT0FDakRrWCxFQUF3QnJCLEVBQWMvTyxHQUN0Q3FRLEVBQVVyZixFQUFLZ1AsR0FDZnNRLEVBQVMsR0FFVkYsSUFDQ3BkLFdBQVdxZCxJQUFZQSxHQUN4QjFmLFFBQVFNLEtBQUssbUJBQXFCb2YsR0FFaENULElBQ0ZVLEVBQVMsSUFBTXZnQixVQUFVd2dCLFVBQVV2ZCxXQUFXcWQsR0FBVXJkLFdBQVdtZCxLQUdyRUQsRUFBTWxmLEtBQUssZ0JBQWlCcWYsR0FFNUJBLEVBQVVELEVBQXNCQyxJQUdqQ2xpQixFQUFFOGhCLEdBQU0vVyxLQUFpQixHQUFYbVgsRUFBaUJBLEVBQVVDLEVBQVUsR0FDdEQsQ0FDSCxDQUNILENBRUFWLEdBQWEsRUFDYmhNLEVBQU0wTCxXQUFXLGFBekNqQixNQUZFM2UsUUFBUUMsTUFBTSxvQkFnRGxCZ1QsRUFBTTVTLEtBQUssY0FBZXdmLGFBQVksV0FFdEI1TSxFQUFNNVMsS0FBSyxlQU96QjRTLEVBQU01UyxLQUFLLGFBQWM3QyxFQUFFcWUsS0FBSyxDQUM3QnBhLEtBQU0sTUFDTnBELElBQUtBLEVBQ0xnQyxLQUFNdUcsRUFDTmtaLE9BQU8sRUFDUC9ULFFBQVNtVCxPQUVYZixJQUdIZSxFQUFnQmIsRUFBSUUsVUFDdEIsRUt4VUE3VyxPQUFPcVksb0JMb0NBLFNBQTZCOU0sRUFBTytNLEdBQ3hDeGlCLEVBQUUsaUJBQWtCeVYsR0FBTzNWLE1BQUssU0FBUzJpQixHQUluQyxJQUFJamUsRUFIUCxHQUF3QixtQkFBZGdlLEVBQ1BBLEVBQVVFLEtBQUtua0IsS0FBZmlrQixDQUFxQkMsUUFHckIsSUFBS2plLEVBQUUsRUFBR0EsRUFBRWdlLEVBQVVoakIsT0FBUWdGLElBQzNCZ2UsRUFBVWhlLEdBQUdrZSxLQUFLbmtCLEtBQWxCaWtCLENBQXdCQyxFQUVqQyxHQUNILEVLN0NBdlksT0FBTzZMLGlCQUFtQkEsRUFDMUI3TCxPQUFPeVksd0JMTkEsU0FBaUNsTixHQUN0Q3pWLEVBQUUsb0JBQXFCQSxFQUFFeVYsSUFBUWdJLFFBQ25DLEVLS0F2VCxPQUFPc0wscUJBQXVCQSxFQUM5QnRMLE9BQU80TCw4QkFBZ0NBLEVBQ3ZDNUwsT0FBTzhMLG1CQUFxQkEsRUFDNUI5TCxPQUFPMFksb0JMYUEsU0FBNkJDLEVBQVNuTixFQUFXb04sRUFBY3pNLEdBQ2hFeU0sR0FDRDlpQixFQUFFOGlCLEdBQWN4ZixXQUFXLFlBQVk0RCxZQUFZLFlBRXRELElBQUlpQyxFQUFPbkosRUFBRTZpQixHQUFTdkosUUFBUSxRQUM5QnRaLEVBQUU2aUIsR0FBU3BGLFNBQ1hzRixjQUFjNVosR0FDZCxJQUFJNlosRUFBS2hOLEVBQW1CN00sR0FFeEI0TSxFQUFpQmlOLElBQ2xCeE4sRUFBcUJ3TixFQUFJdE4sR0FFdkJXLEdBRURuTSxPQUFPbU0sR0FBY3dNLEVBQzNCLEVLM0JBM1ksT0FBT2dNLDJCQUE2QkEsRUFDcENoTSxPQUFPK1ksaUNMZ0RBLFNBQTBDOU0sRUFBUUUsRUFBYzVDLEdBQ25FeUMsRUFBMkJ3TSxLQUFLbmtCLEtBQWhDMlgsQ0FBc0NDLEVBQVExQyxFQUFPLGFBQWM0QyxFQUFjLHNCQUFzQixFQUFNLFNBQ2pILEVLakRBbk0sT0FBT2daLGlDTG1EQSxTQUEwQy9NLEVBQVFFLEVBQWM1QyxFQUFPOEMsR0FBVSxFQUFNakksRUFBUSxJQUNsRzRILEVBQTJCd00sS0FBS25rQixLQUFoQzJYLENBQXNDQyxFQUFRMUMsRUFBTyxXQUFZNEMsRUFBYyxxQkFBc0JFLEVBQVNqSSxFQUNsSCxFS3BEQXBFLE9BQU9pWixpQ0xzREEsU0FBMENoTixFQUFRRSxFQUFjNUMsRUFBT25GLEVBQVEsR0FBSWlJLEdBQVUsR0FDaEdMLEVBQTJCd00sS0FBS25rQixLQUFoQzJYLENBQXNDQyxFQUFRMUMsRUFBTyxjQUFlNEMsRUFBYyxxQkFBc0JFLEVBQVNqSSxFQUNySCxFS3ZEQXBFLE9BQU9rWiwrQkx5REEsU0FBd0NqTixFQUFRRyxFQUFNN0MsRUFBT25GLEVBQVEsSUFDekU0SCxFQUEyQndNLEtBQUtua0IsS0FBaEMyWCxDQUFzQ0MsRUFBUTFDLEVBQU8sV0FBWSxHQUFJNkMsR0FBTSxFQUFNaEksRUFDcEYsRUsxREFwRSxPQUFPbVosMEJMNERBLFNBQW1DQyxFQUFRQyxFQUFtQi9ULEdBUWxFLFNBQVNnVSxFQUFnQ0MsRUFBYUYsRUFBbUJHLEVBQWFDLEdBQ25GM2pCLEVBQUUsUUFBVXVqQixFQUFvQixLQUFLempCLE1BQUssV0FDdkMsSUFBSThqQixFQUFRRixFQUFZMWpCLEVBQUV6QixPQUN0QnFsQixFQUFNLElBQU1ILEVBQVksSUFDekJFLEVBQVNDLEVBQ2YsR0FDSCxDQUVBLFNBQVNDLEVBQTRCQyxFQUFZQyxHQUM5QyxHQUFJQSxFQUNERCxFQUFXeGdCLFdBQVcsZ0JBQ2xCLENBQ0osSUFBSTBnQixFQUFhRixFQUFXeEssUUFBUSxVQUNoQzJLLEVBQWdCRCxFQUFXbmUsT0FBU2llLEVBQVdqZSxNQUduRCxHQUZBaWUsRUFBV3pnQixLQUFLLFdBQVksWUFFekI0Z0IsRUFBYyxDQUNkLElBQUkvQixFQUFVOEIsRUFBVy9jLEtBQUssMEJBQTBCaWQsUUFBUXJlLE1BQ2hFbWUsRUFBV25lLElBQUlxYyxHQUNmOEIsRUFBVzNnQixLQUFLLGVBQWdCNmUsRUFDbkMsQ0FDSCxDQUNILENBRUEsU0FBU2lDLEVBQTZCWixFQUFtQkcsRUFBYVUsR0FDbkUsSUFBSUMsRUFBWXJrQixFQUFFekIsTUFBTThFLEtBQUssaUJBQW1CLEdBQzVDaWhCLEVBQVl0a0IsRUFBRXpCLE1BQU1zSCxPQUFTLEdBQzdCMGUsRUFBUyxHQUVURixHQUFhQyxJQUNkRCxFQUFZLElBRWZiLEVBQWdDeGpCLEVBQUV6QixNQUFPZ2xCLEVBQW1CRyxHQUFhLFNBQVNFLEdBQy9FQyxFQUE0QkQsRUFBTTNjLEtBQUssaUJBQW1Cb2QsRUFBWSxPQUFPLEdBQzdFUixFQUE0QkQsRUFBTTNjLEtBQUssaUJBQW1CcWQsRUFBWSxPQUFPLEdBQzdFQyxFQUFPOWIsS0FBS21iLEVBQ2YsSUFFQVEsRUFBZ0Jwa0IsRUFBRXpCLE1BQU84bEIsRUFBV0MsRUFBV0MsRUFBUVYsR0FFdkQ3akIsRUFBRXpCLE1BQU04RSxLQUFLLGVBQWdCaWhCLEVBQ2hDLENBb0JBLElBQUlyUixHQXBFSnpELEVBQVU1TixVQUFVNGlCLGFBQWEsQ0FDOUJDLFVBQVd6a0IsRUFBRTBrQixLQUNiaEIsWUFBYSxTQUFTelUsR0FDbkIsT0FBT0EsRUFBSWhJLEtBQUssVUFBVWlkLE9BQzdCLEdBQ0ExVSxJQStEa0JrVSxZQUFZSixHQUNqQ3JRLEVBQU9wSixHQUFHLFVBQVUsV0FBYXNhLEVBQTZCekIsS0FBS25rQixLQUFsQzRsQixDQUF3Q1osRUFBbUIvVCxFQUFRa1UsWUFBYWxVLEVBQVFpVixVQUFZLElBQ3JJeFIsRUFBT3BKLEdBQUcsVUFBVSxXQUFZN0osRUFBRXpCLE1BQU1zSCxJQUFJLElBQUk4ZSxRQUFRLFNBQVMsSUFwQmpFLFNBQW1DWCxFQUFZVCxFQUFtQkcsR0FDL0RNLEVBQVduZSxJQUFJLElBR2YyZCxFQUFnQ1EsRUFBWVQsRUFBbUJHLEdBQWEsU0FBU0UsR0FFbEZBLEVBQU1lLFFBQVEsU0FDakIsSUFHQSxJQUNJekMsRUFEVThCLEVBQVcvYyxLQUFLLDBCQUEwQmlkLFFBQ2xDcmUsTUFHdEJtZSxFQUFXbmUsSUFBSXFjLEdBQ2Y4QixFQUFXVyxRQUFRLFNBQ3RCLENBS0FDLENBQTBCM1IsRUFBUXNRLEVBQW1CL1QsRUFBUWtVLFlBQ2hFLEVLcElBeFosT0FBTzJhLG9CTDJKQSxTQUE2QnBQLEdBQ2pDLElBQUlxUCxFQUFXOWtCLEVBQUUsc0RBQXVEQSxFQUFFeVYsSUFDMUUsUUFBNkIsR0FBbkJxUCxFQUFTdGxCLFFBQWdELEdBQS9Cc2xCLEVBQVNDLFNBQVMsVUFDekQsRUs3SkE3YSxPQUFPOGEsbUJMK0pBLFNBQTRCdlAsRUFBT3dQLEVBQVFDLEdBQy9DLElBQUlsZ0IsRUFBTXlRLEVBQU01UyxLQUFLLGFBQWFrZSxVQUFVbGUsS0FBSytTLFFBQU8sU0FBU3BELEdBQzlELE9BQU9BLEVBQUt5UyxLQUFZQyxDQUMzQixJQUVBLEdBQUdsZ0IsRUFBSyxPQUFPQSxFQUFJLEVBQ3RCLEVLcEtBa0YsT0FBT3VNLHdCQUEwQkEsRUFNakN2TSxPQUFPbEssRUFBRU4sR0FBR3lsQixhRjhiUyxTQUFVQyxHQUUzQixHQUFtQixHQUFmN21CLEtBQUtpQixPQUFhLE1BQU0sSUFBSXlRLE1BQU0sMkNBRXRDLE1BQU1ULEVBQVV4UCxFQUFFTCxPQUFPLENBQ3JCMFEsS0FBTSxHQUNOOE4sU0FBVSxHQUNWTyxrQkFBa0IsRUFFbEJuRixtQkFBbUIsRUFFbkJvQyxlQUFlLEVBQ2Z5QyxPQUFRLE1BaUJSakQsYUFBYyxXQUFlLEVBb0I3QkUsWUFBYSxTQUFVZ0ssR0FBZSxFQUV0QzlKLFlBQWEsV0FBZSxFQW1CNUIwQyxhQUFjLFdBQWMsTUFBTyxFQUFJLEVBb0J2Q1UsZ0JBQWlCLFNBQVVqUixHQUFhLEVBc0J4Q29SLGNBQWUsU0FBVXdHLEVBQU03RyxFQUFZSSxHQUFnQixFQWtCM0QwRyxhQUFjLFNBQVVDLEdBQWUsR0FDeENKLEdBRUdLLEVBQUssSUFBSXZNLEVBQWEzYSxLQUFNaVIsR0FHbEMsT0FGQWlXLEVBQUdoSyxpQkFFSWdLLENBQ1gsRUVsa0JBdmIsT0FBT3diLFVBQVlBLEVBR25CeGIsT0FBT3liLG1CQUFxQm5GLEVDd0M1QixJQUFJb0YsRUFBc0IsQ0FBQSxFQ3pFMUIxYixPQUFPMmIsb0JERkEsU0FBNkJDLEdBQ2xDLE9BQU8sU0FBU2xQLEdBQ2QsSUFBSW1QLEVBQVduUCxFQUFNL1EsTUFDakJtZ0IsRUFBUSxFQUdaLE9BQUtELElBR0xELEVBQWVsUCxHQUFPOVcsTUFBSyxXQUNkRSxFQUFFekIsTUFBTXNILE9BQ1BrZ0IsSUFDVkMsR0FBZ0IsRUFDcEIsSUFFZ0IsR0FBVEEsR0FFWCxFQ2RBOWIsT0FBTytiLHFCRGdCQSxTQUE4QjVXLEdBQ25DLElBQUk2VyxFQUFTN1csRUFBTXhKLE1BQ25CLE1BQWUsS0FBWHFnQixJQUVHdGtCLFVBQVV1a0IsZUFBZUQsSUFBV3RrQixVQUFVd2tCLGdCQUFnQkYsR0FBUSxHQUMvRSxFQ3BCQWhjLE9BQU9tYyw2QkRzQkEsU0FBc0N0akIsR0FDM0MsT0FBTyxTQUFrQ3NNLEdBRXZDLE9BQUlBLEVBQU14SixPQUNIN0YsRUFBRXFQLEdBQU94SixNQUFNdVcsTUFBTXJaLEdBRWhDLEVDM0JBbUgsT0FBT29jLHVCRDZCQSxTQUFnQ2pYLEdBQ3JDLElBQUlrWCxFQUFjdm1CLEVBQUVxUCxHQUFPaUssUUFBUSxRQUFRclMsS0FBSyx3QkFBd0J1ZixJQUFJblgsR0FDNUUsT0FBSUEsRUFBTXhKLFFBQVUwZ0IsRUFBWTFnQixPQUN6QjBnQixFQUFZMWdCLFFBQVV3SixFQUFNeEosS0FDckMsRUNoQ0FxRSxPQUFPdWMsa0JEa0NBLFNBQTJCcFgsR0FFaEMsT0FBSUEsRUFBTXhKLE9BQ0g3RixFQUFFcVAsR0FBT3hKLE1BQU11VyxNQUFNLGVBQzlCLEVDckNBbFMsT0FBT3djLHFCRHVDQSxTQUE4QnZkLEdBQ25DLElBQUl3ZCxFQUFRM21CLEVBQUVtSixHQUFNbEMsS0FBSyx3QkFDckIyZixFQUFZLEVBRWhCRCxFQUFNN21CLE1BQUssV0FDVyxJQUFqQkUsRUFBRXpCLE1BQU1zSCxPQUFhK2dCLEdBQzFCLElBRUdBLEdBQWFELEVBQU1ubkIsUUFBUW1uQixFQUFNaEMsUUFBUSxRQUM5QyxFQy9DQXphLE9BQU8yYyxtQkRpREEsU0FBNEJ4WCxHQUNqQyxJQUFJbkUsRUFBT21FLEVBQU14SixNQUdqQixNQUFhLEtBQVRxRixJQUVHdEosVUFBVXVrQixlQUFlamIsSUFBU3RKLFVBQVVvQyxhQUFha0gsSUFBU3RKLFVBQVV1QyxhQUFhK0csR0FDbEcsRUN2REFoQixPQUFPNGMsbUJEeURBLFNBQTRCelgsR0FDakMsSUFBSW5FLEVBQU9tRSxFQUFNeEosTUFHakIsTUFBYSxLQUFUcUYsSUFFR3RKLFVBQVVvQyxhQUFha0gsSUFBU3RKLFVBQVV1QyxhQUFhK0csR0FDaEUsRUMvREFoQixPQUFPNmMsYURtRUEsU0FBc0JDLEVBQWNDLEdBQU8sR0FDaEQsSUFBSXJSLEVBQVNvUixFQUFhbmhCLE1BRTFCLEdBQXNCLEtBQWxCK1AsRUFBT3pHLE9BQ1QsT0FBTyxFQUdULElBQUkwQyxFQUFNbVYsRUFBYTNqQixLQUFLLFFBR3ZCdWlCLEVBQW9CL1QsS0FDdEIrVCxFQUFvQi9ULEdBQU8sQ0FBQ3FWLFNBQVMsS0FBTXJKLE9BQU0sRUFBTXNKLE1BQU0sS0FBTUMsZUFBYyxFQUFPQyxTQUFTLE9BQ3BHLElBQUkxWixFQUFTaVksRUFBb0IvVCxHQUU3QnlWLEVBQVcsV0FDYjNaLEVBQU93WixNQUFRLEtBRWYsSUFBSUksRUFBZ0IsU0FBVTFKLEdBQzVCbFEsRUFBT3VaLFNBQVcsS0FDbEJ2WixFQUFPa1EsTUFBUUEsRUFDZmxRLEVBQU8wWixTQUFXelIsR0FHaEJqSSxFQUFPMFosV0FBYXpSLEdBQ2xCakksRUFBT3VaLFVBQ1R2WixFQUFPdVosU0FBU3BYLFFBRWxCbkMsRUFBT3VaLFNBQVdsbkIsRUFBRXFlLEtBQUssQ0FDdkJwYSxLQUFNLE1BQ05wRCxJQUFNLEdBQUV3QiwrQ0FDUnlaLE9BQVFtTCxFQUNScGtCLEtBQU0sQ0FDSnVJLE1BQU93SyxHQUNOblQsTUFBTyxXQUNSOGtCLEVBQWM1WixFQUFPa1EsTUFDdEIsRUFBRXRQLFFBQVMsU0FBUzFMLEdBQ25CLElBQUlnYixJQUFRaGIsRUFBSzZLLFNBQ2pCNlosRUFBYzFKLEVBQ2hCLEtBSUYwSixFQUFjNVosRUFBT2tRLFFBZ0J6QixPQVpJb0osRUFDRkssSUFDUzNaLEVBQU8wWixXQUFhelIsSUFHekJqSSxFQUFPd1osUUFDVHpKLGFBQWEvUCxFQUFPd1osT0FDcEJ4WixFQUFPeVosZUFBZ0IsR0FFekJ6WixFQUFPd1osTUFBUXRYLFdBQVd5WCxFQS9DZCxNQWtEUDNaLEVBQU9rUSxLQUNoQixFRXBJTyxNQUFNMkosRUFBYyxXQUN2QixJQUFJQyxFQUFtQixDQUFBLEVBQ25CQyxFQUFjLEdBQ2xCLE1BQU8sQ0FDVkMsTUFBTyxTQUFTQyxHQUNaSCxFQUFpQkcsSUFBa0IsRUFDbkNGLEVBQVk5UixRQUFRdE8sR0FBTUEsRUFBRXNnQixnQkFBa0JBLElBQWdCNVksU0FBUzFILEdBQU1BLEVBQUV1Z0IsWUFDL0VILEVBQWNBLEVBQVk5UixRQUFRdE8sR0FBTUEsRUFBRXNnQixnQkFBa0JBLEdBQy9ELEVBQ0RFLFNBQVUsU0FBU0YsR0FDZixPQUFPLElBQUlHLFNBQVEsQ0FBQ0YsRUFBU0csS0FDNUJQLEVBQWlCRyxHQUNqQkMsSUFHSkgsRUFBWWpmLEtBQUssQ0FBQ29mLFVBQVNELGlCQUFnQkssV0FBVyxHQUFPLEdBRTlELEVBRUQsQ0FuQjJCLEdBd0JkQyxFQUFpQixXQUMxQixJQUFJQyxFQUFzQixDQUFBLEVBQzFCLE1BQU8sQ0FDVkMsU0FBVSxTQUFTemUsR0FDZixPQUFPMGUsTUFBTUMsUUFBUTNlLEVBQ3hCLEVBQ0Q0ZSxVQUFXLFNBQVM1ZSxHQUNoQixNQUFvQixpQkFBTkEsSUFDYnBMLEtBQUs2cEIsU0FBU3plLElBQ1QsT0FBTkEsQ0FDSCxFQU1ENmUsTUFBTyxTQUFTdlosR0FDTCxHQUFXLE1BQVBBLEVBQWUsT0FBTyxLQUMxQixHQUFJMVEsS0FBS2dxQixVQUFVdFosR0FFN0IsT0FBT2pQLEVBQUVMLFFBQU8sRUFBTSxDQUFFLEVBQUVzUCxHQUNULEdBQUlvWixNQUFNQyxRQUFRclosR0FBSyxDQUV4QyxJQUFJakssRUFBTSxHQUNWLElBQUssSUFBSVIsRUFBSSxFQUFHQSxFQUFJeUssRUFBSXpQLE9BQVFnRixHQUFLLEVBQUcsQ0FDcEMsSUFBSWlPLEVBQUtsVSxLQUFLaXFCLE1BQU12WixFQUFJekssSUFDeEJRLEVBQUl5RCxLQUFLZ0ssRUFDYixDQUNBLE9BQU96TixDQUNHLENBRVYsT0FBT2lLLENBRVAsRUFDRHdaLGdCQUFpQixTQUFTeFosR0FDdEIsR0FBVyxNQUFQQSxFQUFlLE1BQU8sR0FDMUIsSUFBSXdCLEVBQVEsR0FDWixJQUFLLElBQUlvQixLQUFPNUMsRUFDbkJ3QixFQUFNaEksS0FBS3dHLEVBQUk0QyxJQUVaLE9BQU9wQixDQUNWLEVBQ0RpWSxvQ0FBcUMsU0FBU0MsR0FDMUMsR0FBdUQsTUFBbkRDLEVBQW1CQyxjQUFjLGdCQUNrQixNQUFqREQsRUFBbUJDLGNBQWMsYUFBc0IsQ0FDaEUsSUFBSUMsRUFBc0JDLE9BQU9obEIsVUFBVTVGLEtBQUs2cUIsTUFBUSxNQUFrQixLQUN0RUMsRUFBb0JGLE9BQU9obEIsU0FBUzVGLEtBQUs2cUIsTUFBUSxLQUNyREosRUFBbUJNLGVBQWUsY0FBZUosR0FDakRGLEVBQW1CTSxlQUFlLFlBQWFELEVBQzVDLENBSUgsRUFDREUsMEJBQTJCLFNBQVNDLEdBQ2hDLElBQUlDLEVBQW9CLElBQWRELEVBRU5FLEVBRFUsSUFBSW5yQixLQUFLa3JCLEdBQ0lFLG9CQUN2QkMsRUFBZ0JDLE9BQU9DLEdBQUdMLEVBQUtNLGVBQWVDLFFBSWxELE9BRGUsSUFBSXpyQixLQUFLa3JCLEVBRFMsS0FEWEcsRUFBZ0JGLEdBQ0UsR0FHM0MsRUFDRE8sK0JBQWdDLFNBQVNDLEVBQVF6ckIsR0FDL0IsTUFBVkEsSUFBa0JBLEVBQVMscUJBQy9CLElBQUlzUCxFQUFTb2MsRUFBc0JDLGFBRy9CQyxFQUFjdGMsRUFBT3NjLFlBQ3JCQyxFQUFZdmMsRUFBT3VjLFVBQ3ZCLEdBQW1CLE1BQWZELEdBQW9DLE1BQWJDLEVBQW1CLENBQ2pELElBQUlDLEVBQVFwQixPQUFPaGxCLFNBQVNrbUIsR0FDbEJsQixPQUFPaGxCLFNBQVNtbUIsR0FDaEJDLEdBQVMsTUFDZjlyQixFQUFTLHVCQUVWLENBRUEsSUFBSStyQixFQUFJWCxPQUFPQyxHQUFHSSxFQUFRSCxlQUkxQixPQUhjRixPQUFPSyxHQUNFenJCLE9BQU9BLEdBQ2QrckIsRUFBRS9yQixPQUFPQSxFQUU1QixFQUNEZ3NCLGlCQUFrQixTQUFTQyxFQUFZQyxFQUFVQyxHQUFtQixHQUNoRSxHQUFrQixNQUFkRixFQUdKLElBQUssSUFBSXpZLEtBQU95WSxFQUNRLE1BQW5CQSxFQUFXelksS0FDUyxHQUFwQjJZLEdBQTRCanNCLEtBQUtncUIsVUFBVStCLEVBQVd6WSxLQUFTdFQsS0FBS2dxQixVQUFVZ0MsRUFBUzFZLElBQ3ZGdFQsS0FBSzhyQixpQkFBaUJDLEVBQVd6WSxHQUFNMFksRUFBUzFZLEdBQU0yWSxHQUV0REQsRUFBUzFZLEdBQU95WSxFQUFXelksR0FHbkMsRUFDRDRZLHlCQUF5QkMsR0FDckJ2QyxFQUFzQnVDLENBQ3pCLEVBQ0RDLGFBQWM3TyxlQUFlamIsRUFBSzJPLEVBQVNvYixFQUFpQkMsR0FDeEQsSUFDWSxNQUFYcmIsSUFDQUEsRUFBVSxDQUFBLEdBRVMsTUFBbkJBLEVBQVFrYixVQUNSbGIsRUFBUWtiLFFBQVUsSUFFUCxNQUFYbGIsR0FBc0MsTUFBbkJBLEVBQVFrYixTQUEwQyxNQUF2QnZDLElBQzlDM1ksRUFBUWtiLFFBQVUsSUFDbEJsYixFQUFRa2IsV0FDUnZDLElBR0osSUFBSW5qQixRQUFZNUMsTUFBTXZCLEVBQUsyTyxHQUMzQixHQUFjLEdBQVZ4SyxFQUFJZ0wsR0FHSixPQUZBeE4sUUFBUUMsTUFBTyxnQkFBZTVCLG1CQUM5QjJCLFFBQVFDLE1BQU11QyxHQUNQLEtBRVgsSUFBSThsQixRQUFpQjlsQixFQUFJMUMsT0FDekIsT0FBa0IsR0FBZHVvQixFQUE2QkMsRUFDMUJBLEVBQVNyWixHQUtiLENBSkUsTUFBT2xQLEdBRVosR0FEQUMsUUFBUUMsTUFBTUYsR0FDUyxHQUFuQnFvQixFQUEyQixNQUFNcm9CLEVBQ3JDLE9BQU8sSUFDSixDQUNILEVBQ0R3b0IsYUFBYyxTQUFTeGIsRUFBS2pGLEdBQ3hCLElBQUlnTSxFQUFPNUQsU0FBU0MsY0FBYyxLQUNsQzJELEVBQUswVSxTQUFXMWdCLEVBQ2hCZ00sRUFBS2xGLEtBQU83QixFQUNabUQsU0FBUzVFLEtBQUtrRixZQUFZc0QsR0FDMUJBLEVBQUs1TSxRQUNMZ0osU0FBUzVFLEtBQUtxRixZQUFZbUQsRUFDN0IsRUFDRDJVLGtCQUFtQixXQUNmLE9BQU9wc0IsS0FBS3FzQixTQUFTL25CLFNBQVMsSUFBSTVELE9BQU8sRUFBRyxFQUMvQyxFQUNENHJCLGlCQUFrQixTQUFTN2pCLEdBQ3ZCLElBQWM5QyxFQUFHNG1CLEVBQWJoaEIsRUFBTyxFQUNYLEdBQWlCLElBQWI5QyxFQUFFOUgsT0FBYyxPQUFPNEssRUFDM0IsSUFBSzVGLEVBQUksRUFBR0EsRUFBSThDLEVBQUU5SCxPQUFRZ0YsSUFDN0I0bUIsRUFBUTlqQixFQUFFK2pCLFdBQVc3bUIsR0FDckI0RixHQUFVQSxHQUFRLEdBQUtBLEVBQVFnaEIsRUFDL0JoaEIsR0FBUSxFQUVMLE9BQU9BLENBQ1YsRUFDRGtoQixJQUFLLFNBQVM5akIsRUFBR3NSLEdBR2IsT0FGQXRSLEdBQVFzUixHQUNBLElBQUt0UixHQUFLc1IsR0FDWHRSLENBQ1gsRUFFRCxDQTdKOEIsR0FtS2pCdWlCLEVBQXdCLFdBQ2pDLElBQUl3QixFQUFpQixDQUFBLEVBRWpCN0QsRUFBYyxDQUFBLEVBQ2xCLE1BQU1jLEVBQVM3ZSxHQUFNdWUsRUFBZU0sTUFBTTdlLEdBV3BDNmhCLEVBQXFCLFNBQVM3ZCxFQUFROGQsR0FDeEMsSUFBSyxJQUFJM2hCLEtBQU00ZCxFQUFhLENBQ3hCLEdBQUk1ZCxHQUFNMmhCLEVBQVcsVUFFckJDLEVBRGtCaEUsRUFBWTVkLElBQ2xCMGUsRUFBTTdhLEdBQ3RCLEdBR0osTUFBTyxDQUtIcWMsV0FBWSxXQUNSLE9BQU94QixFQUFNK0MsRUFDaEIsRUFFREksbUJBQW9CLFdBQ2hCLE1BQU1oZSxFQUFTcFAsS0FBS3lyQixhQUNwQndCLEVBQW1CN2QsRUFDdEIsRUFRRGllLGlCQUFrQixTQUFTOWhCLEVBQUk0aEIsRUFBYUcsR0FFeEMsR0FEQW5FLEVBQVk1ZCxHQUFNNGhCLEVBQ0ssR0FBbkJHLEVBQXlCLENBQ3pCLElBQUlsZSxFQUFTcFAsS0FBS3lyQixhQUNsQjBCLEVBQVlsRCxFQUFNN2EsR0FDdEIsQ0FDSCxFQVFEbWUsZUFBZ0IsU0FBU25lLEVBQVE4ZCxJQW5ETixTQUFTOWQsR0FDcEM0ZCxFQUFpQjVkLEVBbURib2UsQ0FBdUJwZSxHQUN2QjZkLEVBQW1CN2QsRUFBUThkLEVBQzlCLEVBUURPLGtCQUFtQixTQUFTL2MsRUFBS3djLEdBQzdCLElBQUlRLEVBQWExdEIsS0FBS3lyQixhQUN0QjlCLEVBQWVtQyxpQkFBaUJwYixFQUFLZ2QsR0FDckMxdEIsS0FBS3V0QixlQUFlRyxFQUFZUixFQUNuQyxFQVNEUyxvQkFBcUIsU0FBU3JhLEVBQUtyTyxFQUFPaW9CLEdBQ3RDLElBQUlRLEVBQWExdEIsS0FBS3lyQixhQUN0QmlDLEVBQVdwYSxHQUFPck8sRUFJbEJqRixLQUFLdXRCLGVBQWVHLEVBQVlSLEVBQ3BDLEVBRVIsQ0ExRnFDLEdBNEYvQlUsRUFBK0IsQ0FvQm5DLEVBR1d2RCxFQUFxQixXQUU5QixJQUFJd0QsRUFBMkIsQ0FBQSxFQUcvQixPQUZBbEUsRUFBZW1DLGlCQUFpQjhCLEVBQThCQyxHQUV2RCxDQUVIQyxlQUFnQixXQUNaLE9BQU9uaUIsT0FBT0MsU0FBU3VCLE9BQU94SixVQUFVLEVBQzNDLEVBRURvcUIsc0JBQXVCLFNBQVN6ckIsR0FDakIsTUFBUEEsSUFDQUEsRUFBTXRDLEtBQUs4dEIsa0JBSWYsT0FEbUIsSUFBSUUsZ0JBQWdCMXJCLEVBRTFDLEVBRUQyckIsZ0JBQWlCLFNBQVMzckIsR0FHdEIsT0FGbUJ0QyxLQUFLK3RCLHNCQUFzQnpyQixHQUNuQm1RLFNBRTlCLEVBRUQ2WCxjQUFlLFNBQVM0RCxFQUFZNXJCLEdBQ2hDLElBQUltUSxFQUFVelMsS0FBS2l1QixnQkFBZ0IzckIsR0FDbkMsSUFBSSxNQUFPZ1IsRUFBS3JPLEtBQVV3TixFQUN0QixHQUFJYSxHQUFPNGEsRUFBYyxPQUFPanBCLEVBRXBDLE9BQU8sSUFDVixFQUVEa3BCLGVBQWdCLFNBQVM3ckIsR0FDckIsSUFBSW1RLEVBQVV6UyxLQUFLaXVCLGdCQUFnQjNyQixHQUMvQm9PLEVBQU0sQ0FBQSxFQUNWLElBQUssTUFBTzRDLEVBQUtyTyxLQUFVd04sRUFDdkIvQixFQUFJNEMsR0FBT3JPLEVBRWYsT0FBT3lMLENBQ1YsRUFFRDBkLFdBQVksV0FDUnppQixPQUFPQyxTQUFTeWlCLFFBQ25CLEVBRVJDLFVBQVcsU0FBU2hzQixHQUNoQnFKLE9BQU9GLFFBQVE4aUIsVUFBVSxDQUFBLEVBQUksR0FBSTVpQixPQUFPQyxVQUN4Q0QsT0FBT0MsU0FBU2hMLFFBQVEwQixFQUMzQixFQUVNa3NCLFlBQWEsU0FBU0MsR0FDbEI5aUIsT0FBT0YsUUFBUUMsYUFBYSxDQUFFLEVBQUUsS0FBTyxJQUFHK2lCLElBQzdDLEVBRURDLHVCQUF3QixTQUFTRCxHQUM3Qnp1QixLQUFLd3VCLFlBQVlDLEdBQ2pCenVCLEtBQUtvdUIsWUFDUixFQUVETyxnQkFBaUIsU0FBU3JiLEVBQUtyTyxHQUkzQixPQUhhLE1BQVRBLElBQ0FBLEVBQVEsSUFFSixHQUFFcU8sS0FBT3NiLG1CQUFtQjNwQixJQUN2QyxFQUVENHBCLDBCQUEyQixTQUFTdmIsRUFBS3diLEdBQ3JDakIsRUFBeUJ2YSxHQUFPd2IsQ0FDbkMsRUFRREMsa0JBQW1CLFNBQVNyZSxHQUN4QixJQUFJN0YsRUFBUyxHQUNiLE1BQU1ta0IsRUFBcUJodkIsS0FBSzJ1QixnQkFDaEMsSUFBSyxJQUFJcmIsS0FBTzVDLEVBQUssQ0FDakIsSUFBSXVlLEVBQWFwQixFQUF5QnZhLEdBQ3hCLE1BQWQyYixJQUNBQSxFQUFhRCxHQUVqQixJQUFJMWhCLEVBQVEyaEIsRUFBVzNiLEVBQUs1QyxFQUFJNEMsSUFDaEN6SSxFQUFPWCxLQUFLb0QsRUFDaEIsQ0FFQSxPQURpQnpDLEVBQU9oRyxLQUFLLElBRWhDLEVBRURxcUIsY0FBZSxTQUFTQyxHQUNwQixJQUFJQyxFQUFnQnB2QixLQUFLK3RCLHdCQUN6Qm9CLEVBQVcxZSxTQUFTOUwsSUFDaEJ5cUIsRUFBY0MsT0FBTzFxQixFQUFFLElBRTNCM0UsS0FBS3d1QixZQUFZWSxFQUFjeHFCLFdBQ2xDLEVBRUQrbEIsZUFBZ0IsU0FBU3JYLEVBQUtyTyxHQUNiLE1BQVRBLElBQWlCQSxFQUFRLElBQzdCLElBQUltcUIsRUFBZ0JwdkIsS0FBSyt0Qix3QkFDekJxQixFQUFjemMsSUFBSVcsRUFBS3JPLEdBQ3ZCakYsS0FBS3d1QixZQUFZWSxFQUFjeHFCLFdBQ2xDLEVBRUQwcUIsZUFBZ0IsU0FBU0MsRUFBZ0JqdEIsR0FDckMsSUFBSWt0QixFQUFpQnh2QixLQUFLK3VCLGtCQUFrQlEsR0FDeENILEVBQWdCcHZCLEtBQUsrdEIsc0JBQXNCenJCLEdBQzNDbXRCLEVBQWN6dkIsS0FBS2l1QixnQkFBZ0J1QixHQUN2QyxJQUFLLE1BQU9sYyxFQUFLck8sS0FBVXdxQixFQUM5QkwsRUFBY3pjLElBQUlXLEVBQUtyTyxHQUVwQixJQUFJeXFCLEVBQVVOLEVBQWN4cUIsV0FDNUIsR0FBVyxNQUFQdEMsRUFBZSxPQUFPb3RCLEVBQzFCMXZCLEtBQUt3dUIsWUFBWWtCLEVBQ3JCLEVBRVIsQ0F4SGtDLEdBb0lyQkMsRUFBZ0IsQ0FDM0JDLGFBQWMsZUFDZEMsZUFBZ0Isa0JBR1pDLEVBQXdCLENBQzVCRixhQUFjLFNBQVNsQyxFQUFZcUMsR0FDckMsT0FBT3JDLEVBQVdoQyxhQUFlcUUsRUFBV3JFLGFBQ3JDZ0MsRUFBVy9CLFdBQWFvRSxFQUFXcEUsU0FDdkMsRUFDRGtFLGVBQWdCLFNBQVNuQyxFQUFZcUMsR0FDdkMsT0FBOEIsTUFBdEJyQyxFQUFXc0MsU0FBeUMsTUFBdEJELEVBQVdDLFNBQ25CLE1BQXRCdEMsRUFBV3NDLFNBQXlDLE1BQXRCRCxFQUFXQyxTQUNuQixNQUF0QnRDLEVBQVdzQyxTQUF5QyxNQUF0QkQsRUFBV0MsVUFFMUN0QyxFQUFXc0MsUUFBUS91QixRQUFVOHVCLEVBQVdDLFFBQVEvdUIsUUFDL0N5c0IsRUFBV3NDLFFBQVFDLE1BQU1DLEdBQXNFLE1BQTVESCxFQUFXQyxRQUFRdG5CLE1BQU15bkIsR0FBVUEsRUFBTTVrQixJQUFNMmtCLEVBQU0za0IsT0FHOUYsR0FxQlc2a0IsRUFBd0IsV0FDbkMsTUFBTUMsRUFBb0IsaUJBQzFCLElBQUlqaEIsRUFBUyxDQUFBLEVBR1RraEIsRUFBcUIsQ0FBQSxFQUV2QixNQUFNckcsRUFBUzdlLEdBQU11ZSxFQUFlTSxNQUFNN2UsR0FRdEM2aEIsRUFBcUIsU0FBUzlELEVBQWEvWixFQUFROGQsR0FDckQsSUFBSyxJQUFJM2hCLEtBQU00ZCxFQUFhLENBQ3hCLEdBQUk1ZCxHQUFNMmhCLEVBQVcsVUFFckJDLEVBRGtCaEUsRUFBWTVkLElBQ2xCMGUsRUFBTTdhLEdBQ3RCLEdBbUJKb2MsRUFBc0I2QixpQkFBaUJnRCxHQVpkLFNBQVMzQyxHQUNwQyxJQUFLLElBQUk2QyxLQUFjWixFQUFlLENBRWxDLEdBQXFDLElBQWpDYSxFQURZVixFQUFzQlMsSUFDeEI3QyxFQUFZdGUsR0FBaUIsQ0FDN0MsSUFBSStaLEVBQWNtSCxFQUFtQkMsR0FDckN0RCxFQUFtQjlELEVBQWF1RSxFQUM5QixDQUNKLENBRU10ZSxFQUFTc2UsS0FHK0QsR0FFNUUsTUFBTStDLEVBQU8sU0FBU2hhLEVBQU81TCxFQUFRcWlCLEdBQ3ZDLElBQUkvRCxFQUFjbUgsRUFBbUI3WixHQUNsQixNQUFmMFMsR0FDSjhELEVBQW1COUQsRUFBYXRlLEVBQVFxaUIsSUFHaEN3RCxFQUFXLFNBQVNubEIsRUFBSWtMLEVBQU9rYSxFQUFZckQsR0FJN0MsR0FIaUMsTUFBN0JnRCxFQUFtQjdaLEtBQ25CNlosRUFBbUI3WixHQUFTLElBRVQsR0FBbkI2VyxFQUF5QixDQUN6QixJQUFJbGUsRUFBU29jLEVBQXNCQyxhQUNuQ2tGLEVBQVcxRyxFQUFNN2EsR0FDckIsQ0FDQWtoQixFQUFtQjdaLEdBQU9sTCxHQUFNb2xCLEdBR3BDLE1BQU8sQ0FDVEMsa0JBQW1CLFNBQVNuYSxFQUFPNUwsR0FDL0I0bEIsRUFBS2hhLEVBQU81TCxFQUNmLEVBQ0RnbUIsZ0JBQWlCLFNBQVN0bEIsRUFBSWtMLEVBQU9rYSxHQUNqQ0QsRUFBU25sQixFQUFJa0wsRUFBT2thLEVBQ3ZCLEVBT0tHLFdBQVksU0FBU3JhLEVBQU9pWCxFQUFZUixHQUMxQ3VELEVBQUtoYSxFQUFPaVgsRUFBWVIsR0FDbEIxQixFQUFzQmlDLGtCQUFrQkMsRUFBWTJDLEVBQ3ZELEVBUURVLGdCQUFpQixTQUFTeGxCLEVBQUlrTCxFQUFPa2EsRUFBWXJELEdBQ25Eb0QsRUFBU25sQixFQUFJa0wsRUFBT2thLEVBQVlyRCxFQUM5QixFQUVOLENBdEZxQyxHQ2xkckMsU0FBUzBELEVBQVNqbEIsRUFBTWtsQixFQUFZeEMsRUFBWXlDLEVBQU9DLEdBR3REbnhCLEtBQUsrTCxLQUFPQSxFQUNaL0wsS0FBS2l4QixXQUFhQSxFQUNsQmp4QixLQUFLeXVCLFdBQWFBLEVBQ2xCenVCLEtBQUtreEIsTUFBUUEsRUFDYmx4QixLQUFLbXhCLFFBQVVBLEVBQ2ZueEIsS0FBS294QixZQUVKLElBQUlDLEVBQW9CLEdBQ3BCQyxFQUFRLEdBQ1JDLEVBQVEsR0FDUkMsRUFBYyxHQUNkQyxFQUFhLEdBRWxCLElBQUlDLEVBQVUsR0FDVkMsRUFBYSxHQUNiQyxFQUFrQixHQUNsQjFlLEVBOFRMLFNBQTBCbkgsRUFBTW1sQixHQUMvQixJQUFJOWEsRUFBSSxJQUNKeWIsRUFBSSxJQUNKQyxFQUFLLEdBQ0xDLEVBQWEsR0FDYkMsRUFBZ0IsSUFDaEJDLEVBQUksSUFFSnh3QixFQUFFc0ssR0FBTXlhLFNBQVMscUJBRXBCcUwsRUFBSSxJQUVKQyxHQURBRyxHQUZBN2IsRUFBSSxLQUVJLEVBQUksSUFDSCxHQUlWLElBQUk4YixFQUFReGxCLEdBQUc0TSxPQUFPNlksTUFBTWx0QixPQUFNLFNBQVVxRixHQUUzQyxPQURlLEdBQVhBLEVBQUVyRixRQUFjcUYsRUFBRXJGLE1BQVEsR0FDdkJxRixFQUFFckYsS0FDVixJQUdJa1UsRUFBUXpNLEdBQUdyRCxNQUFNK29CLGFBR2pCQyxFQUFNM2xCLEdBQUdzTixJQUFJcVksTUFDZkMsWUFBVyxTQUFVaG9CLEdBQUssT0FBT0EsRUFBRWdvQixVQUFZLElBQy9DQyxVQUFTLFNBQVVqb0IsR0FBSyxPQUFPQSxFQUFFaW9CLFFBQVcsSUFDNUNDLFlBQVlWLEdBQ1pXLFlBQVlSLEdBTVZTLEVBQU1obUIsR0FBR2dJLE9BQU8zSSxHQUFNa00sT0FBTyxXQUMvQm5ULEtBQUssUUFBU3NSLEdBQ2R0UixLQUFLLFNBQVUrc0IsR0FDZi9zQixLQUFLLFVBQVcsT0FBU3NSLEVBQUksSUFBTXliLEdBQ25DL3NCLEtBQUssc0JBQXVCLFlBRzFCNnRCLEVBQVlELEVBQUl6YSxPQUFPLFNBQ3pCblQsS0FBSyxRQUFTLE9BQ2RBLEtBQUssWUFBYSxhQUFnQnNSLEVBQUksRUFBSyxJQUFPeWIsRUFBSSxFQUFLLEtBR3pEZSxFQUFjRixFQUFJemEsT0FBTyxTQUMzQm5ULEtBQUssUUFBUyxlQUNkQSxLQUFLLFlBQWEsYUFBZ0JzUixFQUFJLEVBQUssSUFBT3liLEVBQUksRUFBSyxLQUd6RGdCLEVBQWVILEVBQUl6YSxPQUFPLFNBQzVCblQsS0FBSyxRQUFTLGdCQUNkQSxLQUFLLFlBQWEsYUFBZ0JzUixFQUFJLEVBQUssSUFBT3liLEVBQUksRUFBSyxLQUdqRGMsRUFBVTFhLE9BQU8sY0FDM0JuVCxLQUFLLE9BQVEsV0FDYkEsS0FBSyxJQUFLbXRCLEdBT01ZLEVBQWE1YSxPQUFPLGNBQ3BDblQsS0FBSyxPQUFRLFNBQ2JBLEtBQUssSUFBS2d0QixHQUVaLElBQUlnQixFQUFhLEtBRWJDLEVBQWEsS0FFYjdCLElBRVUyQixFQUFhNWEsT0FBTyxZQUMvQm5ULEtBQUssUUFBUyxTQUNkQSxLQUFLLE1BQU8sSUFDWkEsS0FBSyxjQUFlLFVBQ3BCaUosS0FBSyxTQUdQZ2xCLEVBQWFGLEVBQWE1YSxPQUFPLFlBQy9CblQsS0FBSyxRQUFTLFNBQ2RBLEtBQUssS0FBTSxHQUNYQSxLQUFLLGNBQWUsVUFDcEJpSixLQUFLLGNBR1Ara0IsRUFBYUQsRUFBYTVhLE9BQU8sWUFDL0JuVCxLQUFLLFFBQVMsU0FDZEEsS0FBSyxLQUFNLElBQ1hBLEtBQUssY0FBZSxVQUNwQmlKLEtBQUttakIsSUFHUixNQUFRLENBQUN5QixFQUFXVCxFQUFPYSxFQUFZRCxFQUFZM1osRUFBTzZZLEVBQWVLLEVBQUtPLEVBQWFDLEVBQWNaLEVBQUdGLEVBQzdHLENBaGFXaUIsQ0FBaUJqbkIsRUFBTW1sQixHQUM3QnlCLEVBQVl6ZixFQUFJLEdBQ2hCZ2YsRUFBUWhmLEVBQUksR0FDWjZmLEVBQWE3ZixFQUFJLEdBRWpCaUcsRUFBUWpHLEVBQUksR0FDWjhlLEVBQWdCOWUsRUFBSSxHQUNwQm1mLEVBQU1uZixFQUFJLEdBQ1YwZixFQUFjMWYsRUFBSSxHQUVsQitlLEVBQUkvZSxFQUFJLEdBQ1I2ZSxFQUFhN2UsRUFBSSxJQW9DckIsU0FBUytmLEVBQWlCemQsRUFBR0MsR0FDNUIsT0FBSUQsRUFBRU4sTUFBUU8sRUFBRVAsT0FDUCxFQUNFTSxFQUFFTixNQUFRTyxFQUFFUCxNQUNmLEVBRUEsQ0FFVCxDQWdMQSxTQUFTZ2UsRUFBUzVvQixFQUFHckUsR0FDcEIsSUFBSWt0QixFQUNBQyxFQUNBekIsRUFBVzFyQixJQUNka3RCLEVBQUt4QixFQUFXMXJCLEdBQUdxc0IsV0FDbkJjLEVBQUt6QixFQUFXMXJCLEdBQUdzc0IsV0FDUFosRUFBVzFyQixJQUFPMHJCLEVBQVcxckIsRUFBSSxJQUM3Q2t0QixFQUFLeEIsRUFBVzFyQixFQUFJLEdBQUdzc0IsU0FDdkJhLEVBQUt6QixFQUFXMXJCLEVBQUksR0FBR3NzQixXQUNYWixFQUFXMXJCLEVBQUksSUFBTzByQixFQUFXMXdCLE9BQVMsR0FDdERreUIsRUFBS3hCLEVBQVdBLEVBQVcxd0IsT0FBUyxHQUFHc3hCLFNBQ3ZDYSxFQUFLekIsRUFBV0EsRUFBVzF3QixPQUFTLEdBQUdzeEIsV0FFdkNZLEVBQUssRUFDTEMsRUFBSyxHQUVGbnRCLEVBQUl5RyxHQUFHMm1CLFlBQVksQ0FBRWYsV0FBWWEsRUFBSVosU0FBVWEsR0FBTSxDQUFFZCxXQUFZaG9CLEVBQUVnb0IsV0FBWUMsU0FBVWpvQixFQUFFaW9CLFdBQ2pHLE9BQU8sU0FBVXpkLEdBQ2hCLElBQUlXLEVBQUl4UCxFQUFFNk8sR0FDVixPQUFPdWQsRUFBSTVjLEdBRWIsQ0FFQSxTQUFTNmQsRUFBZWhwQixFQUFHckUsR0FDMUJrdEIsR0FBSyxFQUFJN3lCLEtBQUtpekIsR0FDZEgsR0FBSyxFQUFJOXlCLEtBQUtpekIsR0FDVnR0QixFQUFJeUcsR0FBRzJtQixZQUFZLENBQUVmLFdBQVlob0IsRUFBRWdvQixXQUFZQyxTQUFVam9CLEVBQUVpb0IsVUFBWSxDQUFFRCxXQUFZYSxHQUFJWixTQUFVYSxLQUN2RyxPQUFPLFNBQVV0ZSxHQUNoQixJQUFJVyxFQUFJeFAsRUFBRTZPLEdBQ1YsT0FBT3VkLEVBQUk1YyxHQUViLENBRUEsU0FBUytkLEVBQVVscEIsRUFBR3JFLEdBQ3JCLElBQUl1UCxFQUVIQSxFQURHbWMsRUFBVzFyQixJQUNUMHJCLEVBQVcxckIsR0FBR3FzQixXQUFhWCxFQUFXMXJCLEdBQUdzc0IsU0FBV2p5QixLQUFLaXpCLElBQU0sR0FDeEQ1QixFQUFXMXJCLElBQU8wckIsRUFBVzFyQixFQUFJLElBQ3hDMHJCLEVBQVcxckIsRUFBSSxHQUFHcXNCLFdBQWFYLEVBQVcxckIsRUFBSSxHQUFHc3NCLFNBQVdqeUIsS0FBS2l6QixJQUFNLEdBQ2hFNUIsRUFBVzFyQixFQUFJLElBQU8wckIsRUFBVzF3QixPQUFTLEdBQ2pEMHdCLEVBQVdBLEVBQVcxd0IsT0FBUyxHQUFHcXhCLFdBQWFYLEVBQVdBLEVBQVcxd0IsT0FBUyxHQUFHc3hCLFNBQVdqeUIsS0FBS2l6QixJQUFNLEVBRXhHLEVBRUwsSUFBSTlkLEdBQUtuTCxFQUFFZ29CLFdBQWFob0IsRUFBRWlvQixTQUFXanlCLEtBQUtpekIsSUFBTSxFQUU1Q3B5QixFQUFLdUwsR0FBRyttQixrQkFBa0JqZSxFQUFHQyxHQUNqQyxPQUFPLFNBQVVYLEdBQ2hCLElBQUl4TixFQUFNbkcsRUFBRzJULEdBQ2IsTUFBTyxhQUFleFUsS0FBS296QixJQUFJcHNCLElBQVEycUIsRUFBSUYsR0FBYyxJQUFNenhCLEtBQUtxekIsSUFBSXJzQixJQUFRMnFCLEVBQUlGLEdBQWMsSUFFcEcsQ0ExUUEveEIsS0FBSzR6QixPQUFTLFdBR2JueUIsRUFBRXFlLEtBQUssQ0FDTnBhLEtBQU0sTUFDTnBELElBQUt0QyxLQUFLaXhCLFdBQ1Yzc0IsS0FBTXRFLEtBQUt5dUIsV0FDWHplLFFBQVMsU0FBVTZqQixHQUNsQixJQUFJQyxFQUVvQixpQkFBWkQsRUFDWEMsRUFBaUJELEVBQ1csaUJBQVpBLElBQ2hCQyxFQUFpQjV5QixPQUFPNnlCLFVBQVVGLElBRS9CQyxHQTBCUCxTQUEwQnh2QixHQUNyQkEsRUFBSzRPLE1BQ1I1TyxFQUFPQSxFQUFLNE8sS0FFYjVPLEVBQUswdkIsS0FBS2YsR0FDVjVCLEVBQW9CL3NCLEVBQ3BCcXRCLEVBQWFDLEVBQ2JGLEVBQVVRLEVBQU1iLEdBRWhCLElBQUk0QyxFQUFjLEVBRWxCLFNBQVNDLEVBQVdyWixFQUFTc1osRUFBT2ppQixHQUtuQyxPQUpBMkksRUFBUTlPLEtBQU9zbEIsRUFBa0I4QyxHQUFPamYsTUFDeEMyRixFQUFRNVYsTUFBUW9zQixFQUFrQjhDLEdBQU9sdkIsTUFDekM0VixFQUFRdlksSUFBTSt1QixFQUFrQjhDLEdBQU83eEIsSUFDdkMyeEIsR0FBZXBaLEVBQVE1VixNQUNmNFYsRUFBUTVWLE1BQVEsQ0FDekIsRUFQQTJzQixFQUFrQkYsRUFBUXJhLE9BQU82YyxJQVNaanpCLE9BQVMsR0FBTzB3QixFQUFXMXdCLE9BQVMsSUFFeEQweEIsRUFBVTFZLFVBQVUsVUFBVWlGLFNBRTFCNlQsR0FDSEEsRUFBV2hsQixNQUFLLFdBRWYsT0FEU2ttQixFQUFjLE1BQ2IxdEIsUUFBUSxFQUVuQixJQUlEK3FCLEVBQVFxQixFQUFVMVksVUFBVSxRQUFRM1YsS0FBS3N0QixHQUN6Q04sRUFBTXBYLFFBQVFqQyxPQUFPLFlBQ25CblQsS0FBSyxTQUFVLFNBQ2ZBLEtBQUssZUFBZ0IsSUFDckJBLEtBQUssUUFBUSxTQUFVd0YsRUFBR3JFLEdBQUssT0FBT2tULEVBQU1sVCxFQUFJLElBQ2hEbXVCLGFBQ0FDLFNBQVNyQyxHQUNUc0MsVUFBVSxJQUFLcEIsR0FDakI1QixFQUNFOEMsYUFDQUMsU0FBU3JDLEdBQ1RzQyxVQUFVLElBQUtwQixHQUNqQjVCLEVBQU1pRCxPQUNKSCxhQUNBQyxTQUFTckMsR0FDVHNDLFVBQVUsSUFBS2hCLEdBQ2ZwVSxTQUdGcVMsRUFBUXFCLEVBQVkzWSxVQUFVLFFBQVEzVixLQUFLc3RCLEdBQzNDTCxFQUFNclgsUUFBUWpDLE9BQU8sWUFDbkJuVCxLQUFLLEtBQU0sR0FDWEEsS0FBSyxLQUFNLEdBQ1hBLEtBQUssTUFBT210QixFQUFJLEdBQ2hCbnRCLEtBQUssTUFBT210QixFQUFJLEdBQ2hCbnRCLEtBQUssU0FBVSxRQUNmQSxLQUFLLGFBQWEsU0FBVXdGLEdBQzVCLE1BQU8sV0FBYUEsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsVUFBWSxHQUFLLElBQU1qeUIsS0FBS2l6QixJQUFNLEdBQ3hFLElBQ0RoQyxFQUFNNkMsYUFDSkMsU0FBU3JDLEdBQ1RsdEIsS0FBSyxhQUFhLFNBQVV3RixHQUM1QixNQUFPLFdBQWFBLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFVBQVksR0FBSyxJQUFNanlCLEtBQUtpekIsSUFBTSxHQUN4RSxJQUNEaEMsRUFBTWdELE9BQU9yVixTQUdic1MsRUFBY29CLEVBQVkzWSxVQUFVLGNBQWMzVixLQUFLc3RCLEdBQ3JEOXNCLEtBQUssTUFBTSxTQUFVd0YsR0FDckIsT0FBS0EsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsVUFBWSxFQUFJanlCLEtBQUtpekIsR0FBSyxJQUFNanBCLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFVBQVksRUFBYyxJQUFWanlCLEtBQUtpekIsR0FDcEYsR0FFQyxDQUVULElBQ0F6dUIsS0FBSyxlQUFlLFNBQVV3RixHQUM5QixPQUFLQSxFQUFFZ29CLFdBQWFob0IsRUFBRWlvQixVQUFZLEVBQUlqeUIsS0FBS2l6QixHQUNuQyxZQUVBLEtBRVQsSUFDQ3hsQixNQUFLLFNBQVV6RCxHQUtmLE9BSG9CQSxFQUFFckYsTUFBUWd2QixFQUFlLEtBRVoxdEIsUUFBUSxHQUFLLEdBRS9DLElBRURpckIsRUFBWXRYLFFBQVFqQyxPQUFPLFlBQ3pCblQsS0FBSyxRQUFTLFNBQ2RBLEtBQUssYUFBYSxTQUFVd0YsR0FDNUIsTUFBTyxhQUFlaEssS0FBS296QixLQUFNcHBCLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFNBQVdqeUIsS0FBS2l6QixJQUFNLElBQU90QixFQUFJRixHQUFjLElBQU16eEIsS0FBS3F6QixLQUFLcnBCLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFNBQVdqeUIsS0FBS2l6QixJQUFNLElBQU10QixFQUFJRixHQUFjLEdBQ2hMLElBQ0FqdEIsS0FBSyxNQUFNLFNBQVV3RixHQUNyQixPQUFLQSxFQUFFZ29CLFdBQWFob0IsRUFBRWlvQixVQUFZLEVBQUlqeUIsS0FBS2l6QixHQUFLLElBQU1qcEIsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsVUFBWSxFQUFjLElBQVZqeUIsS0FBS2l6QixHQUNwRixHQUVDLENBRVQsSUFDQXp1QixLQUFLLGVBQWUsU0FBVXdGLEdBQzlCLE9BQUtBLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFVBQVksRUFBSWp5QixLQUFLaXpCLEdBQ25DLFlBRUEsS0FFVCxJQUFHeGxCLE1BQUssU0FBVXpELEdBQ2pCLEdBQUkycEIsR0FBZSxFQUFHLE1BQU8sR0FHN0IsT0FGb0IzcEIsRUFBRXJGLE1BQVFndkIsRUFBZSxLQUNaMXRCLFFBQVEsR0FBSyxHQUUvQyxJQUVEaXJCLEVBQVk0QyxhQUFhQyxTQUFTckMsR0FBZXNDLFVBQVUsWUFBYWQsR0FDeEVoQyxFQUFZK0MsT0FBT3JWLFNBR25CdVMsRUFBYW1CLEVBQVkzWSxVQUFVLGNBQWMzVixLQUFLc3RCLEdBQ3BEOXNCLEtBQUssTUFBTSxTQUFVd0YsR0FDckIsT0FBS0EsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsVUFBWSxFQUFJanlCLEtBQUtpekIsR0FBSyxJQUFNanBCLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFVBQVksRUFBYyxJQUFWanlCLEtBQUtpekIsR0FDcEYsR0FFQSxDQUVSLElBQ0F6dUIsS0FBSyxlQUFlLFNBQVV3RixHQUM5QixPQUFLQSxFQUFFZ29CLFdBQWFob0IsRUFBRWlvQixVQUFZLEVBQUlqeUIsS0FBS2l6QixHQUNuQyxZQUVBLEtBRVQsSUFBR3hsQixNQUFLLFNBQVV6RCxHQUNqQixPQUFPQSxFQUFFeUIsSUFDVCxJQUNBVCxHQUFHLFNBQVMsU0FBVWhCLEdBQVNBLEVBQUVoSSxNQUFLcUosT0FBT0MsU0FBU2lILEtBQU92SSxFQUFFaEksSUFBSyxJQUV0RW12QixFQUFXdlgsUUFBUWpDLE9BQU8sWUFDeEJuVCxLQUFLLFFBQVMsU0FDZEEsS0FBSyxhQUFhLFNBQVV3RixHQUM1QixNQUFPLGFBQWVoSyxLQUFLb3pCLEtBQU1wcEIsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsU0FBV2p5QixLQUFLaXpCLElBQU0sSUFBT3RCLEVBQUlGLEdBQWMsSUFBTXp4QixLQUFLcXpCLEtBQUtycEIsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsU0FBV2p5QixLQUFLaXpCLElBQU0sSUFBTXRCLEVBQUlGLEdBQWMsR0FDaEwsSUFDQWp0QixLQUFLLE1BQU0sU0FBVXdGLEdBQ3JCLE9BQUtBLEVBQUVnb0IsV0FBYWhvQixFQUFFaW9CLFVBQVksRUFBSWp5QixLQUFLaXpCLEdBQUssSUFBTWpwQixFQUFFZ29CLFdBQWFob0IsRUFBRWlvQixVQUFZLEVBQWMsSUFBVmp5QixLQUFLaXpCLEdBQ3BGLEdBRUEsQ0FFUixJQUNBenVCLEtBQUssZUFBZSxTQUFVd0YsR0FDOUIsT0FBS0EsRUFBRWdvQixXQUFhaG9CLEVBQUVpb0IsVUFBWSxFQUFJanlCLEtBQUtpekIsR0FDbkMsWUFFQSxLQUVULElBQUd4bEIsTUFBSyxTQUFVekQsR0FDakIsT0FBT0EsRUFBRXlCLElBQ1QsSUFDQVQsR0FBRyxTQUFTLFNBQVVoQixHQUFTQSxFQUFFaEksTUFBS3FKLE9BQU9DLFNBQVNpSCxLQUFPdkksRUFBRWhJLElBQUssSUFFdEVtdkIsRUFBVzJDLGFBQWFDLFNBQVNyQyxHQUFlc0MsVUFBVSxZQUFhZCxHQUV2RS9CLEVBQVc4QyxPQUFPclYsU0FFcEIsQ0FoTUlzVixDQUFpQlYsRUFDbkIsS0FTRjl6QixLQUFLNHpCLFNBQ0w1ekIsS0FBSzR6QixRQWlQTixDQ3pUQWpvQixPQUFPZ2tCLGNBQWdCQSxFQUN2QmhrQixPQUFPeWtCLHNCQUF3QkEsRUFDL0J6a0IsT0FBTzZmLHNCQUF3QkEsRUFDL0I3ZixPQUFPZ2UsZUFBaUJBLEVBQ3hCaGUsT0FBTzBlLG1CQUFxQkEsRUFDNUIxZSxPQUFPc2QsWUFBY0EsRUFDckJ0ZCxPQUFPOG9CLHFCRnVjNkIsQ0FDbENDLG1CQUFvQixxQkFDcEJDLG9CQUFxQixzQkFDckJDLHVCQUF3Qix5QkFDeEJDLGdCQUFpQixrQkFDakJDLGtCQUFtQixvQkFDakJDLGlCQUFrQixtQkFDbEJDLG1CQUFvQixzQkNwSnhCaEUsRUFBU254QixVQUFVbzFCLGFBQWUsU0FBVXhHLEdBQzNDenVCLEtBQUt5dUIsV0FBYUEsRUFDbEJ6dUIsS0FBS2sxQixhQUNOLEVBRUFsRSxFQUFTbnhCLFVBQVVxMUIsWUFBYyxTQUFVekcsR0FDMUN6dUIsS0FBS20xQixlQUNMbjFCLEtBQUs0ekIsU0FDTDV6QixLQUFLbzFCLGVBQ04sRUFFQXBFLEVBQVNueEIsVUFBVWlrQixZQUFjLFNBQVV1UixHQUMxQ3IxQixLQUFLb3hCLFlBQWNpRSxDQUNwQixFQUVBckUsRUFBU254QixVQUFVczFCLGFBQWUsV0FFakN4UyxjQUFjM2lCLEtBQUtveEIsWUFDcEIsRUFFQUosRUFBU254QixVQUFVdTFCLGNBQWdCLFdBQ2xDcDFCLEtBQUtveEIsWUFBY3ROLFlBQVk5akIsS0FBSzR6QixTQUFVNXpCLEtBQUtteEIsUUFDcEQsRUVsVkEsTUFBTW1FLEVBQWtCLENBQUEsRUFFbEJDLEVBQWlCLENBRW5CQyxXQUFlLFNBQVUvZSxFQUFPQyxFQUFjdEYsR0FDMUMsTUFBTStFLGVBQUVBLEdBQW1CL0UsR0FDckJpRyxPQUFFQSxHQUFXakcsRUFBT2dGLEVBQUVoRixPQUM1QixJQUFJbk0sRUFRSixHQU5HbU0sRUFBT2dGLEVBQUVoRixPQUFPcWtCLG1CQUNmeHdCLEVBQVFtTSxFQUFPZ0YsRUFBRWhGLE9BQU9xa0IsaUJBQWlCdGYsSUFFMUMvRSxFQUFPZ0YsRUFBRWhGLE9BQU9za0IsUUFDRHRrQixFQUFPZ0YsRUFBRWhGLE9BQU9za0IsT0FBT3ZmLEdBRXJCLEdBQWpCa0IsRUFBT3BXLGFBQXlCb0csSUFBVnBDLEVBQ3JCLE9BRUosSUFDSStxQixFQURTeEUsc0JBQXNCQyxhQUNkdUUsUUFDckJBLEVBQVE5bEIsS0FBSyxDQUFDcUIsR0FBSThMLEVBQU8sR0FBSXNlLFNBQVUsS0FBTTF3QixNQUFPQSxJQUVwRG1yQixzQkFBc0JVLFdBQVduQixjQUFjRSxlQUFnQixDQUFDRyxXQUNuRSxFQUVENEYsS0FBUyxTQUFVbmYsRUFBT0MsRUFBY3RGLEdBRXZDLEVBR0R5a0IsU0FBYSxTQUFVcGYsRUFBT0MsRUFBY3RGLEdBQ3hDLE1BQU04RSxZQUFFQSxFQUFXQyxlQUFFQSxHQUFtQi9FLEdBQ2xDNkUsT0FBRUEsR0FBVzdFLEVBQU9nRixFQUFFaEYsT0FDNUIsSUFBcUIsSUFBakI4RSxFQUFvQixPQUN4QixRQUFlN08sSUFBWDRPLEVBQXNCLE9BRTFCLE1BQU1JLEVBQVFKLEVBQU9DLEdBQ3JCLFFBQXVCN08sSUFBbkJnUCxFQUFNTSxTQUF3QixDQUM5QixNQUFNQyxFQUFlUCxFQUFNUSxXQUFhLEdBQ2xDMUosRUFBU2tKLEVBQU0vUixLQUFLNlIsR0FBZ0JXLEtBQUtDLFVBQy9DbkwsU0FBU2lILEtBQVEsR0FBRXdELEVBQU1NLFlBQVlDLElBQWN6SixHQUN2RCxDQUNKLEdBR0Uyb0IsRUFBa0IsQ0FFcEJDLGFBQWlCLFNBQVM5d0IsR0FBT21NLE9BQUVBLEVBQU04RSxZQUFFQSxFQUFXQyxlQUFFQSxJQUNwRCxPQUFPOVMsVUFBVTJ5QixZQUFZL3dCLEVBQ2hDLEVBRURneEIsWUFBZ0IsU0FBU2h4QixHQUFPbU0sT0FBRUEsRUFBTThFLFlBQUVBLEVBQVdDLGVBQUVBLElBQ25ELE9BQU85UyxVQUFVNnlCLGNBQWNqeEIsRUFDbEMsRUFHRGt4QixhQUFpQixTQUFTbHhCLEdBQU9tTSxPQUFFQSxFQUFNOEUsWUFBRUEsRUFBV0MsZUFBRUEsSUFDcEQsT0FBTzlTLFVBQVUreUIsWUFBWW54QixFQUNoQyxFQUVEb3hCLHFCQUF5QixTQUFTcHhCLEdBQU9tTSxPQUFFQSxFQUFNOEUsWUFBRUEsRUFBV0MsZUFBRUEsSUFDNUQsT0FBTyxJQUFJdlcsS0FBS3FGLEVBQU0sSUFBTSxNQUFRLElBQUlyRixLQUFLcUYsRUFBTSxHQUN0RCxFQU1EcXhCLHFCQUF5QixVQUFTcmdCLE9BQUNBLEVBQU1DLFlBQUVBLEVBQVdDLGVBQUVBLEVBQWNDLEVBQUVBLElBQ3BFLE1BQU1DLEVBQVFELEVBQUVoRixPQUFPNkUsT0FBT0MsR0FBbUIsS0FBRUMsR0FFN0NhLEVBQVVYLEVBQVMsRUFDbkJDLEVBQVVELEVBQVMsRUFNekIsTUFBUyxtT0FMU0EsRUFBWSxLQUFTLDJOQUVsQkQsRUFBRWhGLE9BQU9tRixNQUFNeEcsTUFBTWhDLGFBVUFpSixrSUFUckJaLEVBQUVoRixPQUFPb0YsTUFBTSxHQUFHekcsTUFBTWhDLGFBWUh1SSwyRUFJN0MsRUFDRGlnQix3QkFBNEIsVUFBU3RnQixPQUFDQSxFQUFNQyxZQUFFQSxFQUFXQyxlQUFFQSxFQUFjQyxFQUFFQSxJQUN2RSxNQUFNQyxFQUFRRCxFQUFFaEYsT0FBTzZFLE9BQU9DLEdBQW1CLEtBQUVDLEdBQzdDcEssRUFBT3NLLEVBQVksS0FDbkJDLEVBQVVELEVBQVMsRUFNekIsTUFBUyxtT0FMU0EsRUFBWSxLQUFTLDJOQUVsQkQsRUFBRWhGLE9BQU9tRixNQUFNeEcsTUFBTWhDLGFBVUFoQyxrSUFUckJxSyxFQUFFaEYsT0FBT29GLE1BQU0sR0FBR3pHLE1BQU1oQyxhQVlIdUksMkVBSTlDLEdBSUVrZ0IsRUFBb0JWLEVBQThCLGFBRWpELE1BQU1XLEVBRVRuekIsc0JBQXNCb3pCLEdBQ2xCLEdBQWUsT0FBWEEsRUFBaUIsTUFBTSxJQUFJaGxCLE1BQU8sd0NBQ3RDLEdBQUlnbEIsRUFBTzNxQixRQUFRdXBCLEVBQWlCLE1BQU0sSUFBSTVqQixNQUFPLGNBQWFnbEIsRUFBTzNxQiw0QkFDekV1cEIsRUFBZ0JvQixFQUFPM3FCLE1BQVEycUIsQ0FDbkMsQ0FFQXB6Qix1QkFBdUJxekIsR0FDbkIsR0FBSUEsS0FBY3JCLEVBQ2QsT0FBT0EsRUFBZ0JxQixHQUUzQixNQUFNLElBQUlqbEIsTUFBTyxVQUFTaWxCLGVBQzlCLEVBTUosTUFBTUMsRUFFRmhjLFlBQVk3TyxFQUFNOHFCLEVBQWEsQ0FBQSxFQUFJQyxFQUFhLEVBQUdDLEVBQW1CLElBR2xFLzJCLEtBQUtnM0IsYUFBZSxHQUVwQmgzQixLQUFLK0wsS0FBT0EsRUFJWi9MLEtBQUtpM0IsWUFBY0gsRUFFbkI5MkIsS0FBS2szQixZQUFjTCxFQUNuQjcyQixLQUFLbTNCLGtCQUFvQkosQ0FDN0IsQ0FLQXhaLGFBR0lrWixFQUFZVyxlQUFlcDNCLE1BQzNCQSxLQUFLZzNCLG1CQUFxQmgzQixLQUFLcTNCLGFBRTNCcjNCLEtBQUtpM0IsWUFBYyxHQUNuQm5ULGFBQVl2RyxnQkFBb0J2ZCxLQUFLNHpCLE9BQU81ekIsS0FBS2szQixZQUFZcnNCLE9BQU8sR0FBSzdLLEtBQUtpM0IsWUFFdEYsQ0FLQTFaLGdCQUFrQixDQUtsQkEsdUJBQXVCK1osRUFBbUIsVUFDaEN0M0IsS0FBS3UzQixnQkFDTHYzQixLQUFLNHpCLE9BQU8wRCxFQUN0QixDQUVBL1osa0JBQWtCamIsR0FDaEIsTUFBTWsxQixFQUFJLElBQUlqbEIsSUFBSyxHQUFFM0csU0FBUzZyQixTQUFTejNCLEtBQUtrM0IsWUFBWW5yQixRQUN4RCxJQUFJMEcsRUFBVTRYLG1CQUFtQjRELGdCQUFnQjNyQixHQUNqRCxJQUFLLE1BQU9nUixFQUFLck8sS0FBVXdOLEVBQ3ZCK2tCLEVBQUU5a0IsYUFBYUMsSUFBSVcsRUFBS3JPLEdBRTVCakYsS0FBS2szQixZQUFZdFgsU0FBVzRYLEVBQUVocUIsU0FBV2dxQixFQUFFcnFCLE9BQzNDbk4sS0FBS2czQixtQkFBcUJoM0IsS0FBS3EzQixZQUNqQyxDQUVBOVosYUFBYStaLEVBQW1CLElBRTVCLE1BQU1FLEVBQUksSUFBSWpsQixJQUFLLEdBQUUzRyxTQUFTNnJCLFNBQVN6M0IsS0FBS2szQixZQUFZbnJCLFFBRXhELElBQUssTUFBT3VILEVBQUtyTyxLQUFVdU4sT0FBT0MsUUFBUTZrQixHQUN0Q0UsRUFBRTlrQixhQUFhQyxJQUFJVyxFQUFLck8sR0FHNUJqRixLQUFLazNCLFlBQVl0WCxTQUFXNFgsRUFBRWhxQixTQUFXZ3FCLEVBQUVycUIsT0FDM0NuTixLQUFLZzNCLG1CQUFxQmgzQixLQUFLcTNCLFlBQ25DLENBTUE5WixtQkFDSSxNQUFNbWEsUUFBWTd6QixNQUFPLEdBQUVDLGNBQWM5RCxLQUFLazNCLFlBQVl0WCxZQUMxRCxhQUFhOFgsRUFBSTN6QixNQUNyQixFQzVOSixNQUFNNHpCLEVBQXFCLENBQUNDLEVBQVVDLEtBS2xDLElBQUlDLEVBQWdCRCxFQUFhdGpCLFdBQVd3akIsSUFDNUMsTUFBTUMsRUFBZ0JKLEVBQVN2a0IsU0FDekI0a0IsRUFBaUJ4MkIsRUFBRWtLLFFBQVEwSCxTQUlqQyxHQUFJMmtCLEVBQWdCRixHQUFpQkcsRUFBZ0IsQ0FFakQsTUFBTUMsRUFBdUJELEVBQWlCSCxFQUMxQ0ksR0FYVyxJQVlYSixFQUFnQkEsRUFBZ0JFLEVBQWdCSCxFQUFhTSxjQUc3RFAsRUFBU3RnQixJQUFJLENBQUMsYUFBYzRnQixFQWhCbEIsR0FnQm9ELGFBQWMsUUFHcEYsQ0FHQU4sRUFBU3RnQixJQUFJLE1BQVEsR0FBRXdnQixNQUFrQixFQUk3Q3IyQixFQUFFa0ssUUFBUUwsR0FBRyxVQUFVLFdBR0U3SixFQUFHLGFBQVk0UixTQUNaNVIsRUFBRXpCLE1BQU1vNEIsYUFGWixHQUtoQjMyQixFQUFHLGFBQVltSCxTQUFTLHFCQUd4Qm5ILEVBQUcsYUFBWWtILFlBQVksb0JBR25DLElBRUFsSCxHQUFFLEtBRUUsTUFBTTQyQixFQUFnQixLQUVsQixHQUF3QyxHQUFwQzUyQixFQUFHLHdCQUF1QlIsT0FBYSxDQUV2QyxNQUFNcTNCLEVBQVM3MkIsRUFBRyxnRUFFbEI2MkIsRUFBT2h0QixHQUFHLFNBQVMsV0FFZjdKLEVBQUcsY0FBYWtILFlBQVksVUFFNUIydkIsRUFBTzUwQixTQUFRLFdBQ1hqQyxFQUFFekIsTUFBTWtmLFFBQ1osR0FDSixJQUdBemQsRUFBRyxZQUFXd1csT0FBT3FnQixHQUVyQkEsRUFBTzcwQixRQUNYLE1BR0loQyxFQUFHLHdCQUF1QmlDLFNBQVEsV0FDOUJqQyxFQUFFekIsTUFBTWtmLFFBQ1osSUFJSnpkLEVBQUcsY0FBYUcsWUFBWSxTQUFTLEVBR3pDSCxFQUFFLHdCQUF3QjBpQixLQUFLLENBQzNCb1UsV0FBWSxXQUNSLElBQUlDLEVBQVUvMkIsRUFBRXpCLE1BQU0wWCxTQUFTaFAsS0FBTSxzQkFDckNpdkIsRUFBbUJhLEVBQVMvMkIsRUFBRXpCLE9BQzlCdzRCLEVBQVF4cUIsTUFDWCxFQUNEeXFCLFdBQVksV0FDTWgzQixFQUFFekIsTUFBTTBYLFNBQVNoUCxLQUFNLHNCQUM3QnlGLE1BQ1osSUFHSjFNLEVBQUcsc0JBQXFCMGlCLEtBQUssQ0FDekJvVSxXQUFZLFdBQ1I5MkIsRUFBRXpCLE1BQU1nTyxNQUNYLEVBQ0R5cUIsV0FBWSxXQUNSaDNCLEVBQUV6QixNQUFNbU8sTUFDWixJQUlKMU0sRUFBRyxvQ0FBbUM2SixHQUFHLFNBQVMsV0FDOUMrc0IsR0FDSixHQUFFLElBR041MkIsRUFBRWtLLFFBQVFMLEdBQUcsVUFBVSxXQUduQixNQUFNb3RCLEVBQWtCajNCLEVBQUUsY0FBY2lILEtBQU0sMkJBRTlDLEdBQUlnd0IsRUFBZ0J6M0IsT0FBUyxFQUFHLENBRTVCLE1BQU00MkIsRUFBZWEsRUFBZ0JoaEIsU0FBU2hQLEtBQU0sZ0NBQ3BEaXZCLEVBQW1CZSxFQUFpQmIsRUFDeEMsQ0FFSixJQzVHQSxNQUFNYyxFQUFnQixXQUVsQixNQUFNQyxFQUE2QixDQUN0QzNpQixPQUFRLEdBQ1I0aUIsTUFBTyxDQUNIeGxCLE9BQVEsT0FDUkQsTUFBTyxPQUNQMGxCLFFBQVMsQ0FDWkMsTUFBTyxDQUNIQyxTQUFTLEVBQ1R2TSxVQUFVLEVBQ1Z3TSxRQUFRLEVBQ1JDLEtBQU0sSUFDTkMsV0FBVyxFQUNYQyxLQUFLLEVBQ0xyb0IsT0FBTyxJQUdSc29CLE9BQVEsQ0FBQyxHQUViOWlCLE1BQU8sQ0FDSDFCLFFBQVMsQ0FDWnBNLFNBQVMsSUFHVitOLE1BQU8sQ0FDSGtmLE9BQVEsQ0FDWDFuQixNQUFNLEVBQ05zRyxNQUFPLENBQ0hnbEIsT0FBUSxHQUNSQyxTQUFVLE9BQ1ZDLFdBQVksSUFDWkMsU0FBVSxLQUdYMXBCLE1BQU8sQ0FDVjJwQixRQUFTLEdBQ1RDLFFBQVMsRUFDVEMsUUFBUyxFQUNUdGxCLE1BQU8sQ0FDSGlsQixTQUFVLE9BQ1ZDLFdBQVksSUFDWkMsU0FBVSxLQUdYNWtCLFFBQVMsQ0FDWnBNLFNBQVMsSUFHTm94QixLQUFNLENBQ0Y3ckIsTUFBTSxHQUVkOHJCLE9BQVEsQ0FDSjlyQixNQUFNLElBS0QrckIsRUFBcUIsU0FBU0MsR0FDdkNBLEVBQWF6akIsTUFBTW1mLE9BQU91RSxVQUFZLFNBQVNoMUIsR0FBT2dSLE9BQUVBLEVBQU1DLFlBQUVBLEVBQVdDLGVBQUVBLEVBQWNDLEVBQUVBLElBQ3pGLE9BQU91VCxFQUFlMkIsK0JBQStCcm1CLEtBS2hEaTFCLEVBQWtDLFdBQ3RDLElBQUlGLEVBQWVyUSxFQUFlTSxNQUFNMk8sR0E0Q3hDLE9BREFqUCxFQUFlbUMsaUJBMUNjLENBQ3pCK00sTUFBTyxDQUNUc0IsU0FBUyxFQUNUejBCLEtBQU0sTUFDTnd6QixLQUFNLENBQ0Z6d0IsU0FBUyxFQUNUL0MsS0FBTSxNQUdSbVAsUUFBUyxDQUVYNUwsRUFBRyxDQUNDbkosT0FBUSx3QkFFWnlhLEVBQUcsQ0FBQyxHQUVGaEUsTUFBTyxDQUNUbWYsT0FBUSxDQUNKMW5CLE1BQU0sRUFDTm9zQixhQUFhLEVBQ2JILFVBQVcsTUFFZkksVUFBVyxDQUNQcnNCLE1BQU0sR0FFVnRJLEtBQU0sV0FDTjQwQixXQUFZLENBQ1J0c0IsTUFBTSxHQUVWdXNCLHVCQUF1QixHQUVqQkMsV0FBWSxDQUNkL3hCLFNBQVMsR0FFUGd5QixPQUFRLENBQ056c0IsTUFBTSxFQUNOMHNCLE1BQU8sVUFFVEMsS0FBTSxDQUNKajFCLEtBQU0sVUFHd0NzMEIsR0FBYyxHQUMvREEsQ0FDTCxDQTlDb0MsR0FpRGxDWSxFQUFtQyxXQUN2QyxJQUFJWixFQUFlclEsRUFBZU0sTUFBTTJPLEdBNEN4QyxPQURBalAsRUFBZW1DLGlCQTFDZSxDQUMxQitNLE1BQU8sQ0FDVHNCLFNBQVMsRUFDVHowQixLQUFNLE9BQ053ekIsS0FBTSxDQUNGendCLFNBQVMsRUFDVC9DLEtBQU0sTUFHUm1QLFFBQVMsQ0FFWDVMLEVBQUcsQ0FDQ25KLE9BQVEsd0JBRVp5YSxFQUFHLENBQUMsR0FFRmhFLE1BQU8sQ0FDVG1mLE9BQVEsQ0FDSjFuQixNQUFNLEVBQ05vc0IsYUFBYSxFQUNiSCxVQUFXLE1BRWZJLFVBQVcsQ0FDUHJzQixNQUFNLEdBRVZ0SSxLQUFNLFdBQ040MEIsV0FBWSxDQUNSdHNCLE1BQU0sR0FFVnVzQix1QkFBdUIsR0FFakJDLFdBQVksQ0FDZC94QixTQUFTLEdBRVBneUIsT0FBUSxDQUNOenNCLE1BQU0sRUFDTjBzQixNQUFPLFVBRVRDLEtBQU0sQ0FDSmoxQixLQUFNLFVBR3lDczBCLEdBQWMsR0FDaEVBLENBQ0wsQ0E5Q3FDLEdBa0RuQ2EsRUFBK0IsV0FDbkMsSUFBSWIsRUFBZXJRLEVBQWVNLE1BQU0yTyxHQUNwQ2tDLEVBQTBCLENBQzVCakMsTUFBTyxDQUNMc0IsU0FBUyxFQUNUejBCLEtBQU0sWUFDTjJOLE9BQVEsS0FFVm1ELE1BQU8sQ0FDTHhJLE1BQU0sRUFDTjBuQixPQUFRLENBQ051RSxVQUFXNTJCLEVBQVUyeUIsY0FHekJ3RSxXQUFZLENBQ1YveEIsU0FBUyxFQUNUd3hCLFVBQVcsU0FBVTN5QixFQUFLeXpCLEdBQ3hCLE9BQVF6ekIsRUFBTyxHQUFFQSxFQUFJZixRQUFRLE1BQVMsSUFDeEMsR0FFRnV6QixPQUFRLENBQ05yeEIsU0FBUyxFQUNUOEwsU0FBVSxVQUVaa21CLE9BQVEsQ0FDTnpzQixNQUFNLEVBQ04wc0IsTUFBTyxVQUVUQyxLQUFNLENBQ0pqMUIsS0FBTSxTQUVSbVAsUUFBUyxDQUNQMEYsRUFBRyxDQUNEMGYsVUFBVzUyQixFQUFVMnlCLGVBS2hDLE9BREFyTSxFQUFlbUMsaUJBQWlCZ1AsRUFBeUJkLEdBQWMsR0FDaEVBLENBQ0osQ0F2Q3FDLEdBMEMvQmdCLEVBQWdDLFdBQ3pDLElBQUloQixFQUFlclEsRUFBZU0sTUFBTTJPLEdBNEN4QyxPQURBalAsRUFBZW1DLGlCQTFDWSxDQUN2QitNLE1BQU8sQ0FDVm56QixLQUFNLE9BQ053ekIsS0FBTSxDQUNGendCLFNBQVMsRUFDVC9DLEtBQU0sTUFHUG1QLFFBQVMsQ0FDWm9tQixRQUFRLEVBQ1JoeUIsRUFBRyxDQUNDbkosT0FBUSx3QkFFWnlhLEVBQUcsQ0FBQyxHQUVEaEUsTUFBTyxDQUNWbWYsT0FBUSxDQUNKMW5CLE1BQU0sRUFDTm9zQixhQUFhLEVBQ2JILFVBQVcsTUFFZkksVUFBVyxDQUNQcnNCLE1BQU0sR0FFVnRJLEtBQU0sV0FDTjQwQixXQUFZLENBQ1J0c0IsTUFBTSxHQUVWdXNCLHVCQUF1QixHQUVoQkUsT0FBUSxDQUNQenNCLE1BQU0sRUFDZG9GLE1BQU8sRUFDQ3NuQixNQUFPLFVBRVJiLEtBQU0sQ0FDTDdyQixNQUFNLEdBRVB3c0IsV0FBWSxDQUNmL3hCLFNBQVMsSUFHd0N1eEIsR0FBYyxHQUM3REEsQ0FDSixDQTlDc0MsR0FnRGhDekQsRUFBMEIsVUFBU3RnQixPQUFFQSxFQUFNQyxZQUFFQSxFQUFXQyxlQUFFQSxFQUFjQyxFQUFFQSxJQUM5RSxNQUFNQyxFQUFRRCxFQUFFaEYsT0FBTzZFLE9BQU9DLEdBQW1CLEtBQUVDLEdBQzdDcEssRUFBT3NLLEVBQVksS0FDbkJDLEVBQVVELEVBQVMsRUFNekIsTUFBUyw2TkFMU0EsRUFBWSxLQUFTLG1OQUVsQkQsRUFBRWhGLE9BQU9tRixNQUFNeEcsTUFBTWhDLGFBVUFoQyw0SEFUckJxSyxFQUFFaEYsT0FBT29GLE1BQU0sR0FBR3pHLE1BQU1oQyxhQVlIdUksdUVBT3RDNGtCLEVBQWtDLFdBQzNDLElBQUlsQixFQUFlclEsRUFBZU0sTUFBTTJPLEdBQ25DdUMsRUFBeUIsQ0FDM0J0QyxNQUFPLENBQ0x6bEIsTUFBTyxPQUNQQyxPQUFRLE9BQ1I4bUIsU0FBUyxFQUNUejBCLEtBQU0sU0FDTnd6QixLQUFNLENBQ0prQyxnQkFBZ0IsSUFHcEJ0QixPQUFRLENBQ05yeEIsU0FBUyxFQUNUOEwsU0FBVSxVQUVaa21CLE9BQVEsQ0FDTnpzQixNQUFNLEVBQ04wc0IsTUFBTyxVQUVUQyxLQUFNLENBQ0pqMUIsS0FBTSxTQUVSMnpCLE9BQVEsQ0FDTmdDLG1CQUFvQixZQUV0QnhCLEtBQU0sQ0FDSnlCLFFBQVMsQ0FDUDltQixLQUFNLElBR1YrQixNQUFPLENBQ0w3USxLQUFNLFVBQ05nd0IsT0FBUSxDQUFDLEdBRVhsZixNQUFPLENBQ0w5USxLQUFNLFVBQ042MUIsZ0JBQWdCLEVBQ2hCN0YsT0FBUSxDQUFDLEdBRVg4RSxXQUFZLENBQ1YveEIsU0FBUyxHQUVYb00sUUFBUyxDQUNQMm1CLE9BQVFqRixJQUliLE9BREE1TSxFQUFlbUMsaUJBQWlCcVAsRUFBd0JuQixHQUFjLEdBQy9EQSxDQUNKLENBakR3QyxHQW1EeEMsTUFBTyxDQUNWeUIsVUFBVyxDQUNQQyxRQUFTLFVBQ1RDLFdBQVksYUFDWkMsVUFBVyxZQUNYQyxJQUFLLE1BQ0pDLE9BQVEsU0FDVEMsS0FBTSxRQUVWQyxTQUFVLFNBQVN0MkIsR0FDZixJQUNJdTJCLEVBREFDLEVBQWdCLENBQUEsRUFJcEIsR0FBSXgyQixHQUFRMUYsS0FBS3k3QixVQUFVRSxXQUN4Qk8sRUFBZ0J2UyxFQUFlTSxNQUFNMlEsR0FDckNiLEVBQW1CbUMsUUFDZixHQUFJeDJCLEdBQVExRixLQUFLeTdCLFVBQVVDLFFBQy9CUSxFQUFnQnZTLEVBQWVNLE1BQU0rUSxHQUNyQ2pCLEVBQW1CbUMsUUFDZixHQUFJeDJCLEdBQVExRixLQUFLeTdCLFVBQVVHLFVBQy9CTSxFQUFnQnZTLEVBQWVNLE1BQU1pUSxHQUNyQ0gsRUFBbUJtQyxRQUNmLEdBQUl4MkIsR0FBUTFGLEtBQUt5N0IsVUFBVUksSUFDL0JLLEVBQWdCdlMsRUFBZU0sTUFBTTRRLFFBQ2hDLEdBQUluMUIsR0FBUTFGLEtBQUt5N0IsVUFBVUssT0FDaENJLEVBQWdCdlMsRUFBZU0sTUFBTWlSLE9BQy9CLElBQUl4MUIsR0FBUTFGLEtBQUt5N0IsVUFBVU0sS0FHdkMsS0FBTyx5Q0FBd0NyMkIsZ0JBRnpDdzJCLEVBQWdCdlMsRUFBZU0sTUFBTTJPLEVBR3hDLENBRUEsTUFBTyxDQUNWdUQsVUFBVyxTQUFTQyxFQUFhcEMsR0FFN0IsR0FBR0EsRUFBYXhqQixPQUFTd2pCLEVBQWF4akIsTUFBTWtmLFFBQVVzRSxFQUFheGpCLE1BQU1rZixPQUFPdUUsVUFBVyxDQUN2RixNQUFNQSxFQUFZRCxFQUFheGpCLE1BQU1rZixPQUFPdUUsVUFDNUIsZUFBYkEsRUFDREQsRUFBYXhqQixNQUFNa2YsT0FBT3VFLFVBQVk1MkIsRUFBVSt5QixZQUU3QixlQUFiNkQsSUFDTkQsRUFBYXhqQixNQUFNa2YsT0FBT3VFLFVBQVk1MkIsRUFBVTJ5QixZQUVwRCxDQUNBck0sRUFBZW1DLGlCQUFpQmtPLEVBQWNrQyxHQUFlLEdBQzdERCxFQUFTLElBQUlJLFdBQVdELEVBQWFGLEdBRXZDRCxFQUFPSyxRQUNWLEVBQ0RDLFlBQWFoZixlQUFldE0sR0FDeEIsR0FBYyxNQUFWZ3JCLEVBQWtCLE9BRXRCLGFBRGdCQSxFQUFPTyxRQUFRdnJCLElBQ3BCd3JCLE1BQ2QsRUFDREMsYUFBYyxXQUNJLE1BQVZULEdBQ0pBLEVBQU8xRSxTQUNWLEVBQ0RvRixZQUFhLFNBQVMzQyxHQUNKLE1BQVZpQyxHQUNKQSxFQUFPVyxjQUFjNUMsR0FBYyxHQUFPLEdBQU8sRUFDcEQsRUFDRDZDLGFBQWMsU0FBUzVtQixHQUNMLE1BQVZnbUIsR0FDSkEsRUFBT1ksYUFBYTVtQixFQUN2QixFQUNENm1CLGNBQWUsU0FBU0MsRUFBVzNYLEVBQVV1WCxHQUFjLEdBQ3ZEVCxFQUFjckQsTUFBTVEsT0FBTzBELEdBQWEzWCxFQUNyQixHQUFmdVgsR0FDUFYsRUFBT1csY0FBY1YsRUFFdEIsRUFFRCxFQUVELENBdlpzQixHQ0doQmMsRUFBb0IsV0FDdEIsSUFBSUMsRUFBaUIsQ0FBQSxFQUNyQixNQUFPLENBQ1ZDLFdBQVksU0FBU3JMLEdBQ2pCLElBQUlzTCxFQUFXRixFQUFlcEwsRUFBRXVMLFdBUWhDLE9BUGdCLE1BQVpELElBQ1BBLEVBQVcsR0FDWEYsRUFBZXBMLEVBQUV1TCxXQUFhRCxHQUUzQkEsRUFBU2p6QixNQUFLLEtBQ2pCMm5CLEVBQUV3TCxTQUFTLElBRUEsdUNBQXNDeEwsRUFBRXVMLGdCQUFnQkQsRUFBU2w4QixPQUFTLEtBQ3JGLEVBQ0RxOEIsV0FBWSxTQUFTRixFQUFXRyxHQUM1QixJQUFJSixFQUFXRixFQUFlRyxHQUM5QixPQUFnQixNQUFaRCxFQUEyQixLQUN4QkEsRUFBU0ksRUFDbkIsRUFDREMsbUJBQW9CLFNBQVNKLEdBQ3pCSCxFQUFlRyxHQUFhLElBQ2hDLEVBRUQsQ0F2QjBCLEdBMkIxQnp4QixPQUFpQyx5QkFBSSxTQUFTeXhCLEVBQVdHLEdBQ3JELElBQUlGLEVBQVVMLEVBQWtCTSxXQUFXRixFQUFXRyxHQUN2QyxNQUFYRixHQUNQQSxHQUVELEVBOE9PLE1BQU1JLEVBS1RuNkIsNkJBQTZCbzZCLEVBQVksR0FBSUMsRUFBTSwrRkFPL0MsT0FKd0IsR0FBcEJELEVBQVV6OEIsU0FDVjA4QixFQUFNLFVBR0gsQ0FDSEEsSUFBS0EsRUFDTEMsV0FBWSxlQUNaQyxXQUFZLENBQUMsQ0FBQyxHQUFJLEdBQUksR0FBSSxLQUFNLENBQUMsR0FBSSxHQUFJLEdBQUksTUFDN0NDLFNBQVUsQ0FDTjN3QixPQUFRNHdCLEtBQUtDLGNBQ2JDLFNBQVUsQ0FDTkMsU0FBVSxPQUNWQyxLQUFNLE9BQ054WSxNQUFPLElBQ1BwZCxLQUFNLE1BR2Q2MUIsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFFBQVMsQ0FDTEEsUUFBU1osRUFDVEMsSUFBSyxDQUNEWSxPQUFRLENBQ0pDLFVBQVcsZ0JBRWZDLFVBQVcsQ0FDUEQsVUFBVyxvQkFLL0IsQ0FFQWw3QiwwQkFBMEJ1TyxHQUM3QixJQUFJNnNCLEVBQVUsR0FHZCxPQURBQSxFQUFXLFlBREkxQixFQUFrQkUsV0FBV3JyQixFQUFPNnNCLFlBRTNDLGlDQUNZQSwwQkFDQTdzQixFQUFPOUQsTUFBUSwwQkFFaEMsQ0FjQXpLLDJCQUEyQnE3QixFQUFVLElBRWpDLE1BQU1MLEVBQVUsR0FHaEJLLEVBQVFsdUIsU0FBUSxDQUFDb0IsRUFBUTVMLEtBQzVCLElBQUl5NEIsRUFBVSxHQUNkLEdBQUk3c0IsRUFBTzZzQixRQUFTLENBRXZCQSxFQUFXLFlBREkxQixFQUFrQkUsV0FBV3JyQixFQUFPNnNCLFdBRWhELENBQ08sSUFBSUgsRUFBVywrREFHSjFzQixFQUFPZ0IsTUFBUWhCLEVBQU8zQixNQUFVLFNBQVEyQixFQUFPZ0IsTUFBUWhCLEVBQU8zQixTQUFZLDJCQUMzRXd1QiwwQkFDQzdzQixFQUFPK3NCLFFBQVksWUFBVy9zQixFQUFPK3NCLFdBQWMsMkJBQ3BEL3NCLEVBQU8zQixNQUFRLHlCQUE0QixnREFDdEIyQixFQUFPZ3RCLE1BQVFodEIsRUFBT2d0QixNQUFTLDRCQUNwRGh0QixFQUFPbUssT0FBUyx3QkFBMkIsMkJBQzNDbkssRUFBT2l0QixTQUFXLGtCQUFxQixnRUFFekJqdEIsRUFBT2t0QixjQUFjbHRCLEVBQU85QixPQUFTLDREQUk3RHV1QixFQUFRcDBCLEtBQUtxMEIsRUFBTyxJQUt4QixNQUFTLDZMQUZLLDZCQUE0QkQsRUFBUXo1QixLQUFLLGtCQUczRCxDQUVBdkIsNEJBQTRCODVCLEdBQy9CSixFQUFrQlEsbUJBQW1CSixFQUNsQyxDQUVBOTVCLHFCQUFxQjhOLEVBQVE5TyxFQUFLMDhCLEVBQVUsR0FBSW5mLEVBQVMsTUFBT2hWLEVBQVMsSUFXckUsT0FUQXVHLEVBQU8wTyxLQUFPLENBQ1Z4ZCxJQUFLQSxFQUNMb0QsS0FBTW1hLEVBQ05tZixRQUFTQSxFQUNUMTZCLEtBQU0sU0FBVWdHLEdBQ1osT0FBTzdJLEVBQUVMLE9BQU8sQ0FBRSxFQUFFa0osRUFBR08sRUFDM0IsR0FHR3VHLENBQ1gsQ0FFQTlOLG9CQUFvQjhOLEVBQVE2dEIsR0F5Q3hCLE9BdENJQSxFQUFVQyxhQUVWRCxFQUFVRSxrQkFBb0IsU0FBVUMsRUFBVTk2QixHQUM5Q2tQLGFBQWFDLFFBQVEsY0FBZ0IyckIsRUFBU0MsVUFBV3h3QixLQUFLNkUsVUFBVXBQLEtBRzVFMjZCLEVBQVVLLGtCQUFvQixTQUFVRixHQUNwQyxPQUFPdndCLEtBQUtDLE1BQU0wRSxhQUFhTyxRQUFRLGNBQWdCcXJCLEVBQVNDLGFBSXBFSixFQUFVTSxnQkFBa0IsU0FBVUgsRUFBVTk2QixHQUc1QzdDLEVBQUUsaUJBQWlCRixNQUFLLFdBRXBCLE1BQU1pK0IsRUFBZS85QixFQUFFekIsTUFBTTBJLEtBQU0sYUFBWXBFLEtBQUssY0FDL0NrN0IsSUFHQWw3QixFQUFLMHJCLFVBQVMxckIsRUFBSzByQixRQUFVLENBQUEsR0FDbEMxckIsRUFBSzByQixRQUFRdnVCLEVBQUV6QixNQUFNc0UsS0FBSyxXQUFhazdCLEVBRTNDLE1BZUQvOUIsRUFBRUwsT0FBTyxDQUFFLEVBQUVnUSxFQUFRNnRCLEVBQ2hDLENBTUEzN0IsdUJBQXVCb0csR0FFbkIsTUFBTSsxQixFQUFZajJCLEdBQU0sR0FBRUEsSUFBSWsyQixTQUFTLEVBQUcsS0FFcEM1MUIsRUFBTUosRUFBVSxHQUNoQmkyQixFQUFPci9CLEtBQUtDLE1BQU1tSixFQUFVLElBQU0sR0FHeEMsTUFBUSxHQUFFKzFCLEVBRkluL0IsS0FBS0MsTUFBTW1KLEVBQVUsVUFFTCsxQixFQUFVRSxNQUFTRixFQUFVMzFCLElBQy9ELENBTUF4Ryw0QkFBNEJ1SCxHQUV4QixNQUFNKzBCLEVBQVksSUFBSTVSLGdCQUFnQnJpQixPQUFPQyxTQUFTdUIsUUFDdEQsSUFBS3l5QixFQUFVQyxJQUFJaDFCLEVBQU9pMUIsV0FBWSxPQUV0QyxNQUFNQyxFQUFTSCxFQUFVM2YsSUFBSXBWLEVBQU9pMUIsV0FDOUJ4N0IsRUFBT3VHLEVBQU9tMUIsa0JBQWtCMTdCLE9BQU8yN0IsVUFBVXYzQixNQUFNcEUsR0FBUUEsRUFBS3VHLEVBQU9pMUIsWUFBY0MsSUFLL0YsR0FBaUMsbUJBQXJCbDFCLEVBQU9xMUIsVUFDWHIxQixFQUFPcTFCLFNBQVM1N0IsR0FBTyxPQUcvQixNQUFNNjdCLEVBQVMxK0IsRUFBRyxJQUFHb0osRUFBTytiLGFBQWF4SCxnQkFRekMsUUFMYS9YLElBQVQvQyxJQUNBdUcsRUFBTytiLGFBQWEvSixnQkFBZ0J2WSxHQUNwQzY3QixFQUFPandCLE1BQU0sVUFHWjB2QixFQUFVQyxJQUFJLFdBUWYsWUFQQU0sRUFBTzcwQixHQUFHLG1CQUFtQixTQUFVRixHQUVuQyxNQUFNOUksRUFBTSxJQUFJaVEsSUFBSTVHLE9BQU9DLFNBQVNpSCxNQUNwQ3ZRLEVBQUlvUSxhQUFhMmMsT0FBT3hrQixFQUFPaTFCLFdBRS9CcjBCLFFBQVFDLGFBQWEsQ0FBRSxFQUFFLEdBQUlwSixFQUFJc0MsV0FDckMsSUFHSixNQUFNdzdCLEVBQVVSLEVBQVUzZixJQUFJLFdBRTlCa2dCLEVBQU83MEIsR0FBRyxtQkFBbUIsU0FBVUYsR0FDbkNPLE9BQU9DLFNBQVd3MEIsQ0FDdEIsR0FDSixDQUVBOThCLGdDQUFnQys4QixFQUFVQyxFQUFpQixFQUFDQyxFQUFLdm9CLEtBQU4sSUFFdkQsUUFBaUIzUSxJQUFiZzVCLEVBQ0EsS0FBTSwyQkFHVixNQUFNRyxFQUFVSCxFQUFTbnBCLFFBQVF1cEIsT0FBT2wxQixHQUV4Q2t5QixFQUFlaUQsdUJBQXVCTCxHQUFVN3VCLE1BQUssU0FBVW12QixHQUUzRCxJQUFJQyxFQUFlLEVBQUUsR0FDakJELEVBQVkzd0IsUUFDWjR3QixFQUFlRCxFQUFZdnBCLFFBQVExUyxLQUFJdUIsR0FBS1QsU0FBU1MsS0FHckRoQyxRQUFRTSxLQUFLbzhCLEVBQVk5eUIsU0FHN0IsTUFBTXVKLEVBQVUsR0FDVnlwQixFQUFpQixHQUNqQkMsRUFBb0JyL0IsRUFBRTQrQixFQUFTcjBCLFFBQVEsR0FBRyswQixlQUdoRFYsRUFBU2pwQixVQUFVNHBCLE9BQU0sU0FBVS82QixHQUcxQm82QixFQUFTWSxPQUFPaDdCLEdBQUcrUixVQUt4QlosRUFBUWxOLEtBQUssQ0FBRWlxQixNQUFPbHVCLEVBQUc4RixLQUFNL0wsS0FBS2toQyxTQUFTbHNCLFlBQWFFLE1BQU9sVixLQUFLKzlCLEtBQUtoeUIsT0FKdkU4MEIsRUFBZTMyQixLQUFLakUsRUFLNUIsSUFFQSxNQUFNazdCLEVBQVkxL0IsRUFBRyw0VEFRZjIvQixFQUFnQjMvQixFQUFHLG9JQUNuQjQvQixFQUFjNS9CLEVBQUcsNEJBRXZCLElBQUssSUFBSXdFLEVBQUksRUFBR0EsRUFBSW1SLEVBQVFuVyxPQUFRZ0YsSUFBSyxDQUNyQyxNQUFNZzdCLEVBQVM3cEIsRUFBUW5SLEdBR3JDLEdBQWtCLElBQWZnN0IsRUFBT2wxQixLQUNOLFNBR1UsTUFBTVIsRUFBTSxVQUFTMDFCLEVBQU9sMUIsS0FBS3RILFFBQVFJLEtBQUssT0FJeEN5OEIsR0FBa0QsSUFBeENWLEVBQWFXLFFBQVFOLEVBQU85TSxPQUM1QyxJQUFLbU4sRUFBUyxDQUNFakIsRUFBU1ksT0FBT0EsRUFBTzlNLE9BQy9CbmMsU0FBUSxFQUNoQixDQUVBLE1BQU13cEIsRUFBWS8vQixFQUFHLG1DQUFtQzYvQixFQUFVLFVBQVksMEJBQTJCLzFCLE9BQ25HazJCLEVBQVdoZ0MsRUFBRyw0SEFFMkI4SixvQ0FDakMwMUIsRUFBT2wxQix3RkFLckJ5MUIsRUFBVWwyQixHQUFHLFVBQVUsU0FBVUYsR0FDN0IzSixFQUFHLFlBQVcrQixPQUFPLEtBR3JCLE1BQU0rOEIsRUFBTUYsRUFBU1ksT0FBT0EsRUFBTzlNLE9BRW5Db00sRUFBSXZvQixTQUFTdW9CLEVBQUl2b0IsV0FFakIsTUFBTUEsRUFBVXVvQixFQUFJdm9CLFVBRWQwcEIsRUFBZ0IsR0FFdEJyQixFQUFTanBCLFVBQVU0cEIsT0FBTSxTQUFTLzZCLEdBQzFCbzZCLEVBQVNZLE9BQU9oN0IsR0FBRytSLFlBQTRDLElBQS9CNm9CLEVBQWVVLFFBQVF0N0IsSUFDM0R5N0IsRUFBY3gzQixLQUFLakUsRUFDdkIsSUFHQXhFLEVBQUV3USxLQUFNLEdBQUVuTyx3Q0FBeUMsQ0FDL0MrTixPQUFRLE9BQVFxRixNQUFPc3BCLEVBQVNwcEIsUUFBU3NxQixFQUFjNzhCLEtBQUssS0FBTWlOLEtBQU1uRyxPQUFPZzJCLHFCQUNoRm53QixNQUFLLFNBQVNsTixHQUNUQSxFQUFLMEwsU0FDVC9MLFFBQVFNLEtBQUtELEVBQUt1SixRQUN0QixTQUV1QnhHLElBQW5CaTVCLEdBQ0FBLEVBQWVDLEVBQUt2b0IsRUFHNUIsSUFFQXlwQixFQUFTRyxRQUFRSixHQUNqQkgsRUFBWXBwQixPQUFPd3BCLEVBQ3ZCLENBRUFMLEVBQWM5MUIsR0FBRyxxQkFBcUIsU0FBVUYsR0FBS0EsRUFBRWlTLGlCQUFtQixJQUcxRThqQixFQUFVbHBCLE9BQU9tcEIsRUFBY25wQixPQUFPb3BCLElBQ3RDUCxFQUFrQnA0QixLQUFLLGNBQWNnUCxTQUFTTyxPQUFPa3BCLEVBQ3pELEdBQ0osQ0FFQTc5QixvQ0FBb0MrOEIsR0FDaEMsTUFBTUcsRUFBVUgsRUFBU25wQixRQUFRdXBCLE9BQU9sMUIsR0FDeEMsT0FBTzlKLEVBQUV3ZSxJQUFLLEdBQUVuYywrQ0FBK0MwOEIsZ0JBQ25FLEVBSUcsTUFBTXFCLEVBRVR2K0IsNEJBQTRCdytCLEVBQVVwOEIsRUFBTXVJLEdBQ3hDLE1BQVEsR0FBRTR6QixFQUFpQkUsaUJBQWlCRCxFQUFVcDhCLEVBQU11SSxNQUFVNHpCLEVBQWlCRSxpQkFBaUI5ekIsRUFBTSt6QixTQUFVdDhCLEVBQU11SSxJQUNsSSxDQUVBM0ssa0JBQWtCb04sRUFBS2hMLEVBQU1xZCxHQUN6QixJQUFJNUosT0FBdUI5UixJQUFkcUosRUFBSXlJLE1BQXNCekksRUFBSXlJLE1BQVEsT0FDL0NsVSxPQUF1Qm9DLElBQWRxSixFQUFJekwsTUFBc0J5TCxFQUFJekwsTUFBUXlMLEVBQ3RDLFlBQVRoTCxHQUEwQyxJQUFwQkYsU0FBU1AsS0FBY2tVLEVBQVEsUUFDekQsSUFBSThvQixFQUFRLHVCQUFzQjlvQixNQUFVOVYsRUFBVTYrQixLQUFLajlCLFlBRTNELFlBRGdCb0MsSUFBWnFKLEVBQUlwTyxNQUFtQjIvQixFQUFRLFlBQVd2eEIsRUFBSXBPLFFBQVEyL0IsU0FDbkRBLENBQ1gsQ0FFQTMrQixxQkFBcUJvRyxFQUFTaEUsRUFBTXFkLEdBQ2hDLE1BQWEsWUFBVHJkLEVBQTJCckMsRUFBVStHLGNBQWNWLEdBQ2hEQSxDQUNYLENBRUFwRyxpQkFBaUJnUSxFQUFLck8sRUFBT2lRLEVBQU9pdEIsRUFBV3B5QixFQUFPdkQsR0FDbEQsTUFBUSx1Q0FBc0M4RyxhQUFldkQsR0FBUzlLLHNCQUEwQkEsc0JBQTBCazlCLEdBQWFqdEIsR0FBU2pRLGVBQW1CdUgsR0FBUTBJLEdBQVNqUSxPQUN4TCxDQUVBM0Isd0JBQXdCb04sRUFBS2hMLEVBQU1xZCxHQUMvQixHQUFhLFlBQVRyZCxFQUFvQixPQUFPZ0wsRUFBSXpMLE1BQ25DLElBQUlzZSxFQUFPN1MsRUFBSXdFLE1BRWYsT0FESXhFLEVBQUl5SSxRQUFPb0ssRUFBUSxnREFBK0M3UyxFQUFJeUksVUFBVW9LLFlBQzdFQSxDQUNYLENBRUFqZ0IscUJBQXFCb04sRUFBS2hMLEVBQU1xZCxHQUM1QixHQUFhLFlBQVRyZCxFQUFvQixPQUFPZ0wsRUFBSXpMLE1BR25DLElBQUlzZSxFQUFPN1MsRUFBSTB4QixNQUlmLE9BSEkxeEIsRUFBSTJ4QixnQkFDSjllLEVBQVEsZ0JBQWU3UyxFQUFJMHhCLFVBQVUxeEIsRUFBSTJ4Qix3QkFFdEM5ZSxDQUNYLENBRUFqZ0IscUJBQXFCb04sRUFBS2hMLEVBQU1xZCxHQUM1QixHQUFhLFlBQVRyZCxFQUFvQixPQUFPZ0wsRUFJL0IsT0FGWW14QixFQUFpQlMsVUFBVSxVQUFXNXhCLEVBQUtBLEVBRzNELENBRUFwTiw2QkFBNkIrVSxHQUNoQyxPQUFPLFNBQVMzSCxFQUFLaEwsRUFBTXFkLEdBQ2hCLEdBQWEsWUFBVHJkLEVBQW9CLE9BQU9nTCxFQUFJekwsTUFDdEMsSUFBSXM5QixFQUFXLEdBSVosWUFIZWw3QixJQUFsQnFKLEVBQUk4eEIsWUFDWEQsRUFBVzd4QixFQUFJOHhCLFdBQ09YLEVBQWlCUyxVQUFVanFCLEVBQU8wSyxFQUFJMUssR0FBT3BULE1BQU84ZCxFQUFJMUssR0FBT25ELE1BQU82TixFQUFJMUssR0FBT25ELE1BQU82TixFQUFJMUssR0FBT25ELE9BQ2hHLElBQU1xdEIsRUFFN0IsQ0FFQWovQiwyQkFBMkJvTixFQUFLaEwsRUFBTXFkLEdBQ2xDLEdBQWEsWUFBVHJkLEVBQW9CLE9BQU9nTCxFQUFJekwsTUFDbkMsSUFBSXNlLEVBQU9zZSxFQUFpQlMsVUFBVSxpQkFBa0I1eEIsRUFBSXpMLE1BQU95TCxFQUFJd0UsTUFBT3hFLEVBQUl3RSxNQUFPeEUsRUFBSXdFLE9BRTdGLE9BREl4RSxFQUFJeUksUUFBT29LLEVBQVEsZ0RBQStDN1MsRUFBSXlJLFVBQVVvSyxZQUM3RUEsQ0FDWCxDQUVBamdCLG9CQUFvQm9OLEVBQUtoTCxFQUFNcWQsR0FDM0IsTUFBYSxZQUFUcmQsRUFBMkJnTCxFQUN4Qm14QixFQUFpQlMsVUFBVSxLQUFNNXhCLEVBQUtBLEVBQUtBLEVBQUtBLEVBQzNELENBRUFwTixxQkFBcUJvTixFQUFLaEwsRUFBTXFkLEdBQzVCLEdBQWEsWUFBVHJkLEVBQW9CLE9BQU9nTCxFQUkvQixPQUZLbXhCLEVBQWlCUyxVQUFVLFdBQVk1eEIsRUFBSXpMLE1BQU95TCxFQUFJd0UsTUFBT3hFLEVBQUl3RSxNQUFPeEUsRUFBSSt4QixXQUdyRixDQUVBbi9CLGtCQUFrQm9OLEVBQUtoTCxFQUFNcWQsR0FDekIsR0FBYSxZQUFUcmQsRUFBb0IsT0FBT2dMLEVBQ2xDLElBQUk2eEIsRUFBVyxRQUNHbDdCLElBQWxCcUosRUFBSTh4QixZQUNMRCxFQUFXN3hCLEVBQUk4eEIsV0FDbEIsSUFFSUUsRUFBU0MsRUFGVHp0QixFQUFRLEdBbUNMLE9BaENJeEUsRUFBSXdFLE9BQVN4RSxFQUFJd0UsT0FBU3hFLEVBQUl6TCxPQUNyQ3k5QixFQUFVLE9BQ1ZDLEVBQVlqeUIsRUFBSSt4QixXQUNUdnRCLEVBQVEyc0IsRUFBaUJTLFVBQVUsT0FBUTV4QixFQUFJK3hCLFdBQVkveEIsRUFBSXdFLE1BQU94RSxFQUFJd0UsTUFBT3hFLEVBQUkreEIsY0FHNUZDLEVBQVUsS0FDVkMsRUFBWWp5QixFQUFJekwsTUFDVGlRLEVBQVEyc0IsRUFBaUJTLFVBQVUsS0FBTTV4QixFQUFJekwsTUFBT3lMLEVBQUl3RSxNQUFPeEUsRUFBSXdFLE1BQU94RSxFQUFJK3hCLGFBRzlFMWYsRUFBSTZmLFNBQTBCLElBQWY3ZixFQUFJNmYsU0FBZ0MsS0FBZjdmLEVBQUk2ZixVQUN4QzF0QixFQUFRMnNCLEVBQWlCUyxVQUFVSSxFQUFVLEdBQUVDLEtBQWE1ZixFQUFJNmYsVUFBWSxHQUFFbHlCLEVBQUl3RSxTQUFTNk4sRUFBSTZmLFVBQVksR0FBRWx5QixFQUFJd0UsU0FBUzZOLEVBQUk2ZixVQUFZLEdBQUVseUIsRUFBSSt4QixjQUFjMWYsRUFBSTZmLFlBR2xLbHlCLEVBQUlteUIsVUFDSjN0QixHQUFnQjJzQixFQUFpQlMsVUFBVSxVQUFXNXhCLEVBQUlteUIsUUFBU255QixFQUFJbXlCLFFBQVNueUIsRUFBSW15QixRQUFTbnlCLEVBQUlteUIsUUFBUyxjQUFnQi8rQixZQUFjLDRDQUE4QzRNLEVBQUlteUIsUUFBUS83QixjQUFnQixZQUVsTmljLEVBQUkrZixNQUEwQixZQUFsQi9mLEVBQUkrZixLQUFLNzlCLE1BQ3ZCaVEsRUFBUUEsRUFBUSxJQUFNMnNCLEVBQWlCUyxVQUFVLE9BQVF2ZixFQUFJK2YsS0FBSzc5QixNQUNoRSxrQ0FBa0M4ZCxFQUFJK2YsS0FBSzV0QixNQUFNLFNBQVU2TixFQUFJK2YsS0FBSzV0QixPQUMvRDZOLEVBQUkrZixNQUEwQixVQUFsQi9mLEVBQUkrZixLQUFLNzlCLFFBQzVCaVEsRUFBUUEsRUFBUSxJQUFNMnNCLEVBQWlCUyxVQUFVLE9BQVF2ZixFQUFJK2YsS0FBSzc5QixNQUNoRSxxQ0FBcUM4ZCxFQUFJK2YsS0FBSzV0QixNQUFNLFNBQVU2TixFQUFJK2YsS0FBSzV0QixRQUV2RTZOLEVBQUlnZ0IsY0FBMEMsVUFBMUJoZ0IsRUFBSWdnQixhQUFhOTlCLE1BQ3ZDaVEsRUFBUUEsRUFBUSxJQUFNMnNCLEVBQWlCUyxVQUFVLGVBQWdCdmYsRUFBSWdnQixhQUFhOTlCLE1BQ2hGLGlEQUFpRDhkLEVBQUlnZ0IsYUFBYTd0QixNQUFNLFNBQVU2TixFQUFJZ2dCLGFBQWE3dEIsT0FDOUY2TixFQUFJZ2dCLGNBQTBDLFVBQTFCaGdCLEVBQUlnZ0IsYUFBYTk5QixRQUM1Q2lRLEVBQVFBLEVBQVEsSUFBTTJzQixFQUFpQlMsVUFBVSxlQUFnQnZmLEVBQUlnZ0IsYUFBYTk5QixNQUNoRixnREFBZ0Q4ZCxFQUFJZ2dCLGFBQWE3dEIsTUFBTSxTQUFVNk4sRUFBSWdnQixhQUFhN3RCLFFBRS9GQSxFQUFRLElBQU1xdEIsQ0FDekIsQ0FFQWovQixxQkFBcUIwL0IsRUFBTWpnQixFQUFLelAsRUFBS3JPLEVBQU9pUSxFQUFPbkYsR0FDdEQsSUFBSWt6QixFQUFZaCtCLEVBQ1hpK0IsRUFBWWh1QixFQUNiaXVCLEVBQVlwekIsRUFPWCxPQU5EaXpCLEVBQUtJLE1BQTJCLEdBQW5CSixFQUFLSSxLQUFLbitCLFFBQ3ZCZytCLEVBQWEsR0FBRWgrQixLQUFTKzlCLEVBQUtJLEtBQUtuK0IsUUFDbENpK0IsRUFBYSxHQUFFaHVCLEtBQVM4dEIsRUFBS0ksS0FBS2x1QixRQUNsQ2l1QixFQUFhLEdBQUVwekIsS0FBU2l6QixFQUFLSSxLQUFLcnpCLFNBRWpDbXpCLEVBQVk3L0IsRUFBVWdnQyxhQUFhSCxFQUFXLEdBQUksS0FDM0NyQixFQUFpQlMsVUFBVWh2QixFQUFLMnZCLEVBQVdDLEVBQVdBLEVBQVdDLEVBQzFFLENBRUE3L0IsdUJBQXVCMC9CLEVBQU10OUIsRUFBTXFkLEdBQ2pDLElBQUl1Z0IsRUFBY04sRUFBS08sV0FBYyxZQUFXUCxFQUFLTyxnREFBa0QsR0FHakdDLEVBQVcsR0FDZixHQUFJUixFQUFLUyxPQUFPMTNCLEtBQU0sQ0FDcEIsSUFBSWdFLEVBQVEsR0FDUGl6QixFQUFLUyxPQUFPaEIsYUFBWTF5QixFQUFRaXpCLEVBQUtTLE9BQU94K0IsTUFBUSxLQUFPKzlCLEVBQUtTLE9BQU9oQixXQUFhLEtBQ3ZGZSxFQUFXM0IsRUFBaUI2QixjQUFjVixFQUFNamdCLEVBQUssV0FBWWlnQixFQUFLUyxPQUFPMTNCLEtBQU1pM0IsRUFBS1MsT0FBT3Z1QixNQUFPbkYsRUFDMUcsTUFDSXl6QixFQUFXM0IsRUFBaUI2QixjQUFjVixFQUFNamdCLEVBQUssU0FBVWlnQixFQUFLUyxPQUFPeCtCLE1BQU8rOUIsRUFBS1MsT0FBT3Z1QixNQUFPOHRCLEVBQUtTLE9BQU9oQixZQUVySCxJQUFJa0IsRUFBYyxHQUVkWCxFQUFLUyxPQUFPWixTQUFtQyxRQUF4QkcsRUFBS1MsT0FBT1osVUFDbkNjLEVBQWU5QixFQUFpQlMsVUFBVSxjQUFlVSxFQUFLUyxPQUFPWixRQUFTRyxFQUFLUyxPQUFPWixRQUFTRyxFQUFLUyxPQUFPWixRQUFTRyxFQUFLUyxPQUFPWixRQUFTLGNBQWdCLytCLFlBQWMsNENBQThDay9CLEVBQUtTLE9BQU9aLFFBQVEvN0IsY0FBZ0IsWUFFalEsSUFBSTg4QixFQUFpQlosRUFBS2EsVUFBWWIsRUFBS2EsU0FBVyxFQUFLLElBQUloQyxFQUFpQlMsVUFBVSxXQUFZVSxFQUFLYSxTQUFVYixFQUFLYSxVQUFZLEdBRWxJQyxFQUFnQixHQUNVLEdBQTNCZCxFQUFLUyxPQUFPTSxjQUNiRCxFQUFpQix1Q0FBNEMvRixLQUFLLDJCQUE2QixVQUVqRyxJQUFJaUcsRUFBVyxHQUNmLEdBQUloQixFQUFLaUIsT0FBT2w0QixLQUFNLENBQ3BCLElBQUlnRSxFQUFRLEdBQ1RpekIsRUFBS2lCLE9BQU94QixhQUFZMXlCLEVBQVFpekIsRUFBS2lCLE9BQU9oL0IsTUFBUSxLQUFPKzlCLEVBQUtpQixPQUFPeEIsV0FBYSxLQUNyRnVCLEVBQVduQyxFQUFpQjZCLGNBQWNWLEVBQU1qZ0IsRUFBSyxXQUFZaWdCLEVBQUtpQixPQUFPbDRCLEtBQU1pM0IsRUFBS2lCLE9BQU8vdUIsTUFBT25GLEVBQzFHLE1BQ0lpMEIsRUFBV25DLEVBQWlCNkIsY0FBY1YsRUFBTWpnQixFQUFLLFNBQVVpZ0IsRUFBS2lCLE9BQU9oL0IsTUFBTys5QixFQUFLaUIsT0FBTy91QixNQUFPOHRCLEVBQUtpQixPQUFPeEIsWUFDckgsSUFBSXlCLEVBQWlCbEIsRUFBS2EsVUFBWWIsRUFBS2EsU0FBVyxFQUFLLElBQUloQyxFQUFpQlMsVUFBVSxXQUFZVSxFQUFLbUIsU0FBVW5CLEVBQUttQixVQUFZLEdBRWxJQyxFQUFjLEdBRWRwQixFQUFLaUIsT0FBT3BCLFNBQW1DLFFBQXhCRyxFQUFLaUIsT0FBT3BCLFVBQ25DdUIsRUFBZXZDLEVBQWlCUyxVQUFVLGNBQWVVLEVBQUtpQixPQUFPcEIsUUFBU0csRUFBS2lCLE9BQU9wQixRQUFTRyxFQUFLaUIsT0FBT3BCLFFBQVNHLEVBQUtpQixPQUFPcEIsUUFBUyxjQUFnQi8rQixZQUFjLDRDQUE4Q2svQixFQUFLaUIsT0FBT3BCLFFBQVEvN0IsY0FBZ0IsWUFFalEsSUFBSXU5QixFQUFnQixHQUNVLEdBQTNCckIsRUFBS2lCLE9BQU9GLGNBQ2JNLEVBQWlCLHVDQUE0Q3RHLEtBQUssMkJBQTZCLFVBRWpHLElBQUl1RyxFQUFXLEdBQ1hDLEVBQVcsR0FlZixPQWRJeGhCLEVBQUl5aEIsV0FDc0IsWUFBdEJ6aEIsRUFBSXloQixTQUFTdi9CLE1BQ2JxL0IsR0FBWXpDLEVBQWlCUyxVQUFVLE9BQVEsV0FBWSxrQ0FBa0N2ZixFQUFJeWhCLFNBQVN0dkIsTUFBTSxTQUFVNk4sRUFBSXloQixTQUFTckMsV0FDNUcsVUFBdEJwZixFQUFJeWhCLFNBQVN2L0IsUUFDbEJxL0IsR0FBWXpDLEVBQWlCUyxVQUFVLE9BQVEsU0FBVyxxQ0FBcUN2ZixFQUFJeWhCLFNBQVN0dkIsTUFBTSxTQUFVNk4sRUFBSXloQixTQUFTckMsYUFHN0lwZixFQUFJMGhCLFdBQ3NCLFlBQXRCMWhCLEVBQUkwaEIsU0FBU3gvQixNQUNicy9CLEdBQVkxQyxFQUFpQlMsVUFBVSxPQUFRLFdBQVksa0NBQWtDdmYsRUFBSTBoQixTQUFTdnZCLE1BQU0sU0FBVTZOLEVBQUkwaEIsU0FBU3RDLFdBQzVHLFVBQXRCcGYsRUFBSTBoQixTQUFTeC9CLFFBQ2xCcy9CLEdBQVkxQyxFQUFpQlMsVUFBVSxPQUFRLFNBQVcscUNBQXFDdmYsRUFBSTBoQixTQUFTdnZCLE1BQU0sU0FBVTZOLEVBQUkwaEIsU0FBU3RDLGFBR3pJLEdBQUVtQixLQUFjRSxJQUFXTSxJQUFpQkgsSUFBZUMsS0FBZ0JVLEtBQVl0QixFQUFLUyxPQUFPakIsMEVBQTBFd0IsSUFBV0ssSUFBaUJELElBQWVGLEtBQWdCSyxLQUFZdkIsRUFBS2lCLE9BQU96QixXQUM1USxDQUVBbC9CLDZCQUE2Qm9OLEVBQUtoTCxFQUFNcWQsR0FDcEMsR0FBYSxZQUFUcmQsRUFBb0IsT0FBT2dMLEVBQUkzRSxLQWlDbkMsT0FoQ1U4MUIsRUFBaUJTLFVBQVUsV0FBWTV4QixFQUFJekwsTUFBT3lMLEVBQUkzRSxLQUFNMkUsRUFBSWcwQixTQUFVaDBCLEVBQUlnMEIsU0FpQzVGLENBRUFwaEMsc0JBQXNCaWdCLEVBQU1vaEIsRUFBVUMsRUFBU0MsRUFBVUMsR0FDbkRILEVBQVNJLFdBQ1Z0akMsRUFBRThoQixHQUFNak0sSUFBSSxjQUFlLGFBQWFxdEIsRUFBU0ksVUFFdkQsRUN6MUJILFNBQVMzNUIsRUFBRUEsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUVnSixPQUFPd3lCLE9BQU8sTUFBTWpsQyxFQUFFcUwsRUFBRTNHLE1BQU0sS0FBSyxJQUFJLElBQUl3dEIsRUFBRSxFQUFFQSxFQUFFbHlCLEVBQUVrQixPQUFPZ3hCLElBQUl6b0IsRUFBRXpKLEVBQUVreUIsS0FBSSxFQUFHLE9BQU9uZCxFQUFFMUosS0FBSzVCLEVBQUU0QixFQUFFdEUsZUFBZXNFLEtBQUs1QixFQUFFNEIsRUFBRSxDQ0UzSU8sT0FBT3M1QixPUENBLFNBQWdCbDVCLEVBQU1rbEIsRUFBWXhDLEVBQVl5QyxFQUFPQyxHQUMzRCxJQUFJZ0IsRUFBTSxJQUFJbkIsRUFBU2psQixFQUFNa2xCLEVBQVl4QyxFQUFZeUMsRUFBT0MsR0FLNUQsT0FKSUEsR0FDSGdCLEVBQUlyTyxZQUFZQSxhQUFZLFdBQWNxTyxFQUFJeUIsV0FBYXpDLElBR3JEZ0IsQ0FDUixFT0NBeG1CLE9BQU84eEIsZUFBaUJBLEVBQ3hCOXhCLE9BQU91NUIscUJGK0JBLE1BTUh0cUIsYUFBWXlsQixTQUFFQSxFQUFROEUsY0FBRUEsRUFBYUMsWUFBRUEsRUFBV3BWLFFBQUVBLEVBQU9xVixZQUFFQSxFQUFXdEcsS0FBRUEsRUFBTyxLQUFJdUcsZ0JBQUVBLEVBQWtCLEdBQUUvNUIsR0FBRUEsRUFBSyxLQUFJakosSUFBRUEsRUFBTSxLQUFJczlCLFVBQUVBLEVBQVksS0FBSTJGLGVBQUVBLEdBQWlCLEVBQUtDLGlCQUFFQSxFQUFtQixPQUM3THhsQyxLQUFLeWxDLFdBQWF6VixFQUNsQmh3QixLQUFLcWdDLFNBQVdBLEVBQ2hCcmdDLEtBQUtvbEMsWUFBY0EsRUFDbkJwbEMsS0FBSysrQixLQUFPQSxFQUNaLytCLEtBQUttbEMsY0FBZ0JBLEVBQ3JCbmxDLEtBQUtxbEMsWUFBY0EsRUFDbkJybEMsS0FBSzBsQyxlQUFnQixFQUNyQjFsQyxLQUFLMmxDLDJCQUF3QnQrQixFQUM3QnJILEtBQUs4Z0Msa0JBQW9Cci9CLEVBQUU0K0IsRUFBU3IwQixRQUFRLEdBQUcrMEIsZUFDL0MvZ0MsS0FBS3NsQyxnQkFBa0JBLEVBQ3ZCdGxDLEtBQUt1TCxHQUFLQSxFQUNWdkwsS0FBS3NDLElBQU1BLEVBQ1h0QyxLQUFLNC9CLFVBQ0w1L0IsS0FBS3VsQyxlQUFpQkEsRUFDdEJ2bEMsS0FBS3dsQyxpQkFBbUJBLENBQzFCLENBRUVJLHFCQUNBLE9BQU81bEMsS0FBSzJsQyxxQkFDaEIsQ0FFQUUsT0FFSSxNQUFNeHBCLEVBQU9yYyxLQVliLE9BVEFBLEtBQUs4Z0Msa0JBQWtCeDFCLEdBQUcsV0FBVyxXQUNuQytRLEVBQUt5cEIsUUFBUXpwQixFQUFLb3BCLFdBQ3BCLElBR0F6bEMsS0FBS3FnQyxTQUFTLzBCLEdBQUcsUUFBUSxXQUN2QitRLEVBQUswcEIsU0FDUCxJQUVPMXBCLENBQ1gsQ0FFQTJwQixjQUFjQyxFQUFPM2hDLEVBQU8sU0FFVitDLElBQVY0K0IsR0FDQWhpQyxRQUFRQyxNQUFNLDJFQUdsQixNQUFNZ2lDLEVBQU0sSUFBSXJsQyxPQUFPb2xDLEdBQ3ZCLE9BQU8zaEMsRUFBSytTLFFBQU84dUIsR0FBYUQsRUFBSXZsQyxLQUFLd2xDLEtBQVlsbEMsTUFDekQsQ0FFQW1sQyxpQkFBaUIvdUIsR0FFYixNQUFNZ0YsRUFBT3JjLEtBQ2IsSUFBSXFtQyxFQUFTNWtDLEVBQUcscUNBQW9DNFYsRUFBT25DLGVBRTNELEdBQUdtSCxFQUFLL1osS0FHTixHQUZBK2pDLEVBQVM1a0MsRUFBRywwRUFBeUU0VixFQUFPbkMsZUFFOUQsR0FBM0JtQyxFQUFPaXZCLGlCQUEwQixDQUV3QixHQUF0RGpxQixFQUFLa3FCLFVBQVV4MkIsTUFBTTJILFNBQVNoUCxLQUFNLFNBQVF6SCxRQUM5Q29iLEVBQUtrcUIsVUFBVXgyQixNQUFNMkgsU0FBU2txQixRQUFTLGlDQUd6QyxNQUFNNEUsRUFBYUgsRUFBTzc1QixPQUMxQjZQLEVBQUtrcUIsVUFBVXgyQixNQUFNdkQsS0FBS2c2QixHQUUxQm5xQixFQUFLa3FCLFVBQVU5SCxVQUFVLzFCLEtBQUssTUFBTUMsWUFBYSxVQUUvQixRQUFmME8sRUFBTy9ELEtBQ1IreUIsRUFBT3o5QixTQUFVLFNBRXJCLE9BQ0ssUUFBcUJ2QixJQUFqQmdRLEVBQU80dUIsYUFBNkM1K0IsSUFBckJnUSxFQUFPb3ZCLFdBQTJCcHZCLEVBQU9vdkIsV0FBWSxDQUMzRixNQUFNbmlDLEVBQU90RSxLQUFLcWdDLFNBQVNqcEIsUUFBUXBYLEtBQUtxbEMsYUFBYS9nQyxPQUFPLEdBQ3REbWpCLEVBQVF6bkIsS0FBS2dtQyxjQUFjM3VCLEVBQU80dUIsTUFBTzNoQyxHQUN6Q29pQyxFQUFXamxDLEVBQUcsMEJBQXlCZ21CLGFBR2hDLEdBQVRBLEdBQVk0ZSxFQUFPbDRCLE9BR3ZCazRCLEVBQU9wdUIsT0FBT3l1QixFQUNsQixDQTJDQSxPQXpDQUwsRUFBTy82QixHQUFHLFNBQVMsU0FBVUYsR0FFK0IsR0FBdERpUixFQUFLa3FCLFVBQVV4MkIsTUFBTTJILFNBQVNoUCxLQUFNLFNBQVF6SCxRQUM5Q29iLEVBQUtrcUIsVUFBVXgyQixNQUFNMkgsU0FBU2txQixRQUFTLGlDQUd6QyxNQUFNNEUsRUFBYUgsRUFBTzc1QixPQVMxQixHQVJBNlAsRUFBS2txQixVQUFVeDJCLE1BQU12RCxLQUFLZzZCLEdBRTFCbnFCLEVBQUtrcUIsVUFBVTlILFVBQVUvMUIsS0FBSyxNQUFNQyxZQUFhLFVBRS9CLFFBQWYwTyxFQUFPL0QsS0FDUit5QixFQUFPejlCLFNBQVUsVUFHaEJ5VCxFQUFLbXBCLGlCQUdOLE9BRkFucEIsRUFBS21wQixpQkFBaUJucEIsRUFBS2drQixTQUFVaHBCLFFBQ2xDQSxFQUFPK04sVUFBVS9OLEVBQU8rTixZQUk3QixHQUFJL0ksRUFBSy9aLElBU0YsQ0FDTCtaLEVBQUt1akIsVUFBWWowQixPQUFPQyxTQUFTdUIsT0FDakMsTUFBTXc1QixFQUFlLElBQUkzWSxnQkFBZ0IzUixFQUFLdWpCLFdBQzlDK0csRUFBYWgwQixJQUFJMEosRUFBSzhvQixjQUFxQzk5QixhQUFkZ1EsRUFBTzlMLEdBQW9COEwsRUFBTzlMLEdBQUssSUFDckU4USxFQUFLL1osSUFBWXFrQyxFQUFhL2hDLFdBRTdDK0csT0FBT0YsUUFBUThpQixVQUFVLEdBQUksR0FBSTVpQixPQUFPQyxTQUFTNEIsU0FBVyxJQUFNbTVCLEVBQWEvaEMsWUFDL0VnSCxTQUFTeWlCLFFBQ1gsTUFoQkVoUyxFQUFLcXBCLGVBQWdCLEVBR2pCcnVCLEVBQU8rTixVQUFVL04sRUFBTytOLFdBRTVCL0ksRUFBS2drQixTQUFTWSxPQUFPNWtCLEVBQUtncEIsYUFBYWw0QixPQUFPa0ssRUFBTzR1QixPQUFPLEdBQU0sR0FBT1csT0FFekV2cUIsRUFBS3NwQixzQkFBd0J0dUIsQ0FVakMsSUFFT2d2QixDQUNYLENBRUFRLGVBQWU3VyxHQUVYLE1BQU04VyxFQUFpQixDQUFBLEVBR3ZCLElBQUssTUFBTXp2QixLQUFVMlksRUFBUyxDQUUxQixNQUFNK1csRUFBVS9tQyxLQUFLb21DLGlCQUFpQi91QixHQUV0Q3l2QixFQUFlenZCLEVBQU8vRCxLQUFPLENBQUUrRCxPQUFRQSxFQUFRMnZCLE1BQU9ELEVBQzFELENBRUEsT0FBT0QsQ0FDWCxDQUVBaEIsUUFBUTlWLEdBQ04sUUFBOEIsSUFBcEJod0IsS0FBS3FsQyxZQUNiNWpDLEVBQUcsYUFBWXpCLEtBQUt1TCxPQUFPdkwsS0FBS3NsQywwQkFBMEJ0bEMsS0FBS29sQyxnQkFBZ0JwbEMsS0FBSysrQixNQUFRLytCLEtBQUtvbEMsc0JBQXNCNkIsYUFBYWpuQyxLQUFLOGdDLGtCQUFrQnA0QixLQUFLLHNCQUFzQmdQLGNBQ2pMLENBQ0wsTUFBTXd2QixFQUFxQnpsQyxFQUFHLFlBQVd6QixLQUFLbWxDLDREQUN4Q2dDLEVBQWtCMWxDLEVBQUcsb0dBQ3JCMmxDLEVBQWlCM2xDLEVBQUcsOEJBQTZCekIsS0FBS29sQyxzQkFDNUQrQixFQUFnQmx2QixPQUFPbXZCLEdBRXZCcG5DLEtBQUt1bUMsVUFBWSxDQUNmOUgsVUFBV3lJLEVBQ1huM0IsTUFBT3EzQixFQUNQN0ksT0FBUTRJLEdBR1ZubkMsS0FBS2d3QixRQUFVaHdCLEtBQUs2bUMsZUFBZTdXLEdBRW5DLE1BQU1xWCxFQUFpQjVsQyxFQUFHLDBFQUF5RXpCLEtBQUttbEMsc0NBQ3hHLElBQUssTUFBT21DLEVBQUdqd0IsS0FBVzdFLE9BQU9DLFFBQVF6UyxLQUFLZ3dCLFNBQzFDcVgsRUFBZXB2QixPQUFPWixFQUFPMnZCLE9BSWpDLElBQUlobkMsS0FBS3VsQyxlQUFnQixDQUN2QixNQUFNZ0MsRUFBWXZuQyxLQUFLd25DLHFCQUN2QkgsRUFBZXpGLFFBQVE1aEMsS0FBS29tQyxpQkFBaUJtQixHQUMvQyxDQUdBTCxFQUFtQmp2QixPQUFPa3ZCLEdBQzFCRCxFQUFtQmp2QixPQUFPb3ZCLEdBRTFCSCxFQUFtQkQsYUFBYWpuQyxLQUFLOGdDLGtCQUFrQnA0QixLQUFLLHNCQUFzQmdQLFVBRWxGMVgsS0FBS3luQyx1QkFBdUJ6bkMsS0FBS21sQyxjQUNuQyxDQUNGLENBRUFzQyx1QkFBdUJDLEdBRWQxbkMsS0FBS3FnQyxTQUFTLytCLE9BQ2R0QixLQUFLcWdDLFNBQVMvK0IsTUFBTXFtQyxVQUNwQjNuQyxLQUFLcWdDLFNBQVMvK0IsTUFBTXFtQyxTQUFTM1gsU0FHbENxUSxTQUFTLytCLE1BQU1zbUMsTUFDbkIsQ0FFQUoscUJBQ0ksTUFBTyxDQUNIbDBCLElBQUssTUFDTDRCLE1BQU9yTyxTQUFTZ2hDLElBQ2hCNUIsTUFBTyxHQUNQUSxXQUFXLEVBQ1hyaEIsU0FBVSxLQUNOcGxCLEtBQUt1bUMsVUFBVXgyQixNQUFNMkgsU0FBU2hQLEtBQUssbUJBQW1Cd1csU0FDdERsZixLQUFLdW1DLFVBQVV4MkIsTUFBTXZELEtBQU0sR0FBRXhNLEtBQUtvbEMsY0FBYyxFQUc1RCxDQUVBVyxVQUdJLFFBQXFCMStCLElBQWpCckgsS0FBS2d3QixRQUNULEdBQUlod0IsS0FBSzBsQyxjQUNMMWxDLEtBQUswbEMsZUFBZ0IsT0FJekIsSUFBSyxNQUFPNEIsRUFBR2p3QixLQUFXN0UsT0FBT0MsUUFBUXpTLEtBQUtnd0IsU0FBVSxDQUNwRCxHQUF3QixHQUFwQjNZLEVBQU9vdkIsV0FBaUQsR0FBM0JwdkIsRUFBT0EsT0FBT292QixVQUFvQixTQUVuRSxNQUFNbmlDLEVBQU90RSxLQUFLcWdDLFNBQVNqcEIsUUFBUXBYLEtBQUtxbEMsYUFBYS9nQyxPQUFPLEdBQ3REbWpCLEVBQVF6bkIsS0FBS2dtQyxjQUFjM3VCLEVBQU9BLE9BQU80dUIsTUFBTzNoQyxHQUc1QyxHQUFUbWpCLEVBQWNwUSxFQUFPMnZCLE1BQU03NEIsT0FBU2tKLEVBQU8ydkIsTUFBTWg1QixPQUVsRHFKLEVBQU8ydkIsTUFBTXQrQixLQUFLLFlBQVlxRixLQUFNLElBQUcwWixNQUV2Q3puQixLQUFLdW1DLFVBQVVoSSxPQUFPNzFCLEtBQUssWUFBWXFGLEtBQU0sSUFBRzBaLEtBQ3BELENBQ0osR0V0UUo5YixPQUFPazJCLGlCQUFtQkEsRUFFMUJsMkIsT0FBT204QixZTGlOQSxjQUEwQmxSLEVBRTdCaGMsWUFBWTdPLEVBQU1yRyxFQUFPLE9BQVFteEIsRUFBYSxDQUFFLEVBQUVDLEVBQWEsRUFBR0MsRUFBbUIsSUFDakZnUixNQUFNaDhCLEVBQU04cUIsRUFBWUMsRUFBWUMsR0FFcEMvMkIsS0FBS2dvQyxXQUFhdGlDLEVBQ2xCMUYsS0FBS2k4QixPQUFTLEdBQ2RqOEIsS0FBS2lvQyxZQUFjOXpCLFNBQVMrekIsY0FBZSxrQkFBaUJuOEIsSUFDaEUsQ0FFQXpJLDZCQUE2QnF6QixFQUFZb0csRUFBVzNYLEdBQ2hEOVQsWUFBV2lNLFVBQ1AsSUFDSSxNQUFNbVosRUFBU0QsRUFBWTBSLGdCQUFnQnhSLEdBQ3JDeVIsRUFBaUIsQ0FDbkJ2UCxNQUFPLENBQ0hRLE9BQVEsQ0FDSjBELENBQUNBLEdBQVkzWCxXQUluQnNSLEVBQU91RixPQUFPVyxjQUFjd0wsRUFJdEMsQ0FGQSxNQUFPaDlCLEdBRVAsSUFDRCxJQUNQLENBRUFpOUIsa0JBQ0ksTUFBTWozQixFQUFTLENBQ1g2RSxPQUFRLEdBQ1JwQixRQUFTLENBQ0x5ekIsZ0JBQWlCLENBQUMsR0FDbEJyL0IsRUFBRyxDQUNDK0UsTUFBTSxFQUNObE8sT0FBUSx1QkFFWnlhLEVBQUcsQ0FDQzBmLFVBQVcsU0FBU2gxQixHQUFPZ1IsT0FBRUEsRUFBTUMsWUFBRUEsRUFBV0MsZUFBRUEsRUFBY0MsRUFBRUEsSUFDOUQsT0FBT25SLENBQ1gsR0FFSnNqQyxFQUFHLENBQ0N2NkIsTUFBTSxJQUdkNnFCLE1BQU8sQ0FDSG56QixLQUFNMUYsS0FBS2dvQyxXQUNYM08sT0FBUSxDQUFFLEVBQ1ZobUIsT0FBUSxPQUNSeWxCLFFBQVMsQ0FDTDlxQixNQUFNLElBR2R1SSxNQUFPLENBQ0htZixPQUFRLENBQ0pwaEIsTUFBTyxDQUNIaWxCLFNBQVUsU0FHbEIxa0IsUUFBUyxDQUNMcE0sU0FBUyxFQUNUd3hCLFVBQVcsU0FBU2gxQixHQUNoQixPQUFPQSxDQUNYLElBR1J1UixNQUFPLENBQ0hrZixPQUFRLENBQ0pwaEIsTUFBTyxDQUNIaWxCLFNBQVUsU0FHbEIxa0IsUUFBUyxDQUNMcE0sU0FBUyxFQUNUd3hCLFVBQVcsU0FBU2gxQixHQUNoQixPQUFPQSxDQUNYLElBR1J1akMsTUFBTyxDQUNIOVMsT0FBUSxDQUNKcGhCLE1BQU8sQ0FDSGlsQixTQUFVLFNBR2xCMWtCLFFBQVMsQ0FDTHBNLFNBQVMsSUFHakIreEIsV0FBWSxDQUNSL3hCLFNBQVMsRUFDVDZMLE1BQU8sQ0FDSGlsQixTQUFVLFNBR3pCN0QsT0FBUSxHQUNEb0UsT0FBUSxDQUNKOXJCLE1BQU0sRUFDTnVyQixTQUFVLE9BQ1ZobEIsU0FBVSxTQUNWazBCLFlBQWEsQ0FDVEMsa0JBQWtCLElBRzFCQyxZQUFhLENBQ1RDLElBQUssQ0FDREMsYUFBYyxFQUNkQyxZQUFZLElBR3BCQyxPQUFRLENBQ0poN0IsS0FBTSxVQUNOaTdCLE1BQU8sU0FDUEMsY0FBZSxTQUNmMzBCLE1BQU8sQ0FDSGlsQixTQUFVLFVBT3RCLEdBQUl2NUIsS0FBS20zQixtQkFBcUJuM0IsS0FBS20zQixrQkFBa0IrUixLQUFNLENBRXZELE9BRHFCMTJCLE9BQU8yMkIsT0FBTy8zQixFQUFRcFIsS0FBS20zQixrQkFBa0IrUixLQUV0RSxDQUVBLE9BQU85M0IsQ0FDWCxDQUVBZzRCLGNBQWNoNEIsRUFBUThCLEdBU2xCLEdBUEE5QixFQUFnQixRQUFLLEVBQUksQ0FDckI2b0IsVUFBVyxTQUFTaDFCLEdBQU9nUixPQUFFQSxFQUFNQyxZQUFFQSxFQUFXQyxlQUFFQSxFQUFjQyxFQUFFQSxJQUM5RCxPQUFPblIsQ0FDWCxHQUlBaU8sRUFBYSxRQUFHLENBQ2hCLElBQUssTUFBTW0yQixLQUFRbjJCLEVBQWEsUUFDNUIsR0FBYSxNQUFUbTJCLEdBQXlCLE1BQVRBLEdBQXlCLE1BQVRBLEVBQWMsQ0FDOUMsTUFBTXBQLEVBQVkvbUIsRUFBYSxRQUFFbTJCLEdBQWlCLFVBQzlDajRCLEVBQWdCLFFBQUVpNEIsS0FDbEJqNEIsRUFBZ0IsUUFBRWk0QixHQUFRLElBRTlCajRCLEVBQWdCLFFBQUVpNEIsR0FBaUIsVUFBSXZULEVBQWdCbUUsSUFBYzUyQixVQUFVNDJCLEVBQ25GLENBSUQvbUIsRUFBYSxRQUFVLFNBQ3RCOUIsRUFBZ0IsUUFBVSxPQUFJMGtCLEVBQWdCNWlCLEVBQWEsUUFBVSxTQUFNN1AsVUFBVTZQLEVBQWEsUUFBVSxRQUNwSCxDQUNKLENBRUFvMkIsb0JBQW9CbDRCLEVBQVFtNEIsR0FFeEIsTUFBTUYsRUFBT2o0QixFQUFPbTRCLEdBRXBCLFFBQWFsaUMsSUFBVGdpQyxRQUFzQ2hpQyxJQUFoQmdpQyxFQUFLM1QsYUFHVXJ1QixJQUFyQ2dpQyxFQUFLM1QsT0FBTzhULHNCQUEyRSxTQUFyQ0gsRUFBSzNULE9BQU84VCxxQkFBaUMsQ0FFL0YsTUFBTUMsRUFBb0JKLEVBQUszVCxPQUFPOFQsMEJBRURuaUMsSUFBakNoRSxVQUFVb21DLEdBQ1Z4bEMsUUFBUUMsTUFBTywrQkFBOEJ1bEMscUNBRzdDSixFQUFLM1QsT0FBT3VFLFVBQVk1MkIsVUFBVW9tQyxFQUUxQyxDQUNKLENBRUFDLGlCQUFpQnQ0QixFQUFROEIsR0FDckIsR0FBSUEsRUFBZ0IsV0FDaEIsSUFBSyxNQUFPeTJCLEVBQWdCcmxDLEtBQVNrTyxPQUFPQyxRQUFRUyxFQUFnQixZQUNoRTlCLEVBQW1CLFdBQUV1NEIsR0FBa0JybEMsRUFJL0MsSUFBSTIxQixFQUFZN29CLEVBQW1CLFdBQWEsVUFFN0M2b0IsR0FBYW5FLEVBQWdCbUUsS0FDNUI3b0IsRUFBbUIsV0FBYSxVQUFJMGtCLEVBQWdCbUUsR0FFNUQsQ0FFQTJQLGVBRUksTUFBTXg0QixFQUFTcFIsS0FBS3FvQyxrQkFDZG4xQixFQUFNbFQsS0FBS2czQixhQUFhOWpCLElBR3hCMjJCLEVBQWMsQ0FBQyxTQUFVLFFBQVMsUUFBUyxTQUFVLFNBQVUsT0FBUSxTQUFVLG9CQUV2RixJQUFLLE1BQU1DLEtBQWNELE9BRUd4aUMsSUFBcEI2TCxFQUFJNDJCLFVBRW1CemlDLElBQXZCK0osRUFBTzA0QixHQUNQMTRCLEVBQU8wNEIsR0FBY3QzQixPQUFPMjJCLE9BQU8vM0IsRUFBTzA0QixHQUFhNTJCLEVBQUk0MkIsSUFHM0QxNEIsRUFBTzA0QixHQUFjNTJCLEVBQUk0MkIsSUFLakMsR0FBSTUyQixFQUFZLE9BRVosSUFBSyxNQUFNdUQsS0FBU3ZELEVBQVksT0FDNUI5QixFQUFjLE1BQVUsT0FBRXFGLEdBQVM4ZSxFQUFlcmlCLEVBQVksT0FBRXVELElBYXhFLFlBVGdDcFAsSUFBNUI2TCxFQUFzQixtQkFDdEI5QixFQUFvQixZQUFPLElBQWMsV0FBSThCLEVBQXNCLGtCQUd2RWxULEtBQUtvcEMsY0FBY2g0QixFQUFROEIsR0FDM0JsVCxLQUFLc3BDLG9CQUFvQmw0QixFQUFRLFNBQ2pDcFIsS0FBS3NwQyxvQkFBb0JsNEIsRUFBUSxTQUNqQ3BSLEtBQUswcEMsaUJBQWlCdDRCLEVBQVE4QixHQUV2QjlCLENBQ1gsQ0FFQTI0QixtQkFDSSxNQUFNMzRCLEVBQVNwUixLQUFLNHBDLGVBQ3BCNXBDLEtBQUtncUMsYUFBZTU0QixFQUNwQnBSLEtBQUtpOEIsT0FBUyxJQUFJSSxXQUFXcjhCLEtBQUtpb0MsWUFBYWpvQyxLQUFLZ3FDLGNBQ3BEaHFDLEtBQUtpOEIsT0FBT0ssUUFDaEIsQ0FFQS9lLG1CQUNVd3FCLE1BQU1sQyxPQUNaN2xDLEtBQUsrcEMsa0JBQ1QsQ0FFQXhzQixzQkFDVXdxQixNQUFNeFEsVUFDWnYzQixLQUFLaThCLE9BQU8xRSxVQUNadjNCLEtBQUtpOEIsT0FBUyxJQUNsQixDQUVBMWUsYUFBYStaLEVBQW1CLElBQzVCLFFBQXlCandCLElBQXRCckgsS0FBS2dxQyxlQUNGMVMsUUFDSXlRLE1BQU1uVSxPQUFPMEQsU0FFYnlRLE1BQU1rQyxjQUdLLE1BQWZqcUMsS0FBS2k4QixRQUFnQixDQUVuQixNQUFNM0MsT0FBRUEsRUFBTXJqQixPQUFFQSxFQUFNdWtCLFdBQUVBLEVBQVU5RSxPQUFFQSxFQUFNbmYsTUFBRUEsRUFBS2tmLGlCQUFFQSxHQUFxQnoxQixLQUFLZzNCLGFBQWE5akIsSUFXMUYsR0FUQWxULEtBQUtncUMsYUFBYTFRLE9BQVNBLEVBQzNCdDVCLEtBQUtncUMsYUFBYS96QixPQUFTQSxFQUV4Qk0sR0FBU0EsRUFBTTJ6QixhQUNkbHFDLEtBQUtncUMsYUFBYXp6QixNQUFNMnpCLFdBQWEzekIsRUFBTTJ6QixZQUU1Q3pVLElBQ0N6MUIsS0FBS2dxQyxhQUFhdlUsaUJBQW1CQSxHQUV0QytFLEVBQVksQ0FDWCxJQUFJUCxFQUFZajZCLEtBQUtncUMsYUFBYXhQLFdBQVdQLFVBRXpDajZCLEtBQUtncUMsYUFBYXhQLFdBQVdQLFVBRDlCQSxHQUFhbkUsRUFBZ0JtRSxHQUNhbkUsRUFBZ0JtRSxHQUVoQnpELENBQ2pELENBRUdkLElBQ0MxMUIsS0FBS2dxQyxhQUFhdFUsT0FBU0EsR0FFL0IxMUIsS0FBS2k4QixPQUFPVyxjQUFjNThCLEtBQUtncUMsY0FBYyxFQUNqRCxDQUVSLENBRUF6c0IsdUJBQXVCc1osRUFBYSxVQUMxQmtSLE1BQU1vQyxpQkFBaUJ0VCxHQUM3QjcyQixLQUFLK3BDLGtCQUNULEdLbGZKcCtCLE9BQU84cUIsWUFBY0EsRUFDckI5cUIsT0FBT2d0QixjQUFnQkEsRUNoQnZCbDNCLEdBQUUsV0FFQSxTQUFTMm9DLEVBQXFCaC9CLEdBRTVCLEdBQWMsYUFBVkEsRUFBRTFGLE9BQXdCMEYsRUFBRWkvQixTQUFXai9CLEVBQUVrL0IsU0FBdUIsSUFBWmwvQixFQUFFbS9CLE9BQWMsT0FFeEUsTUFBTWgvQixFQUFLOUosRUFBRXpCLE1BQU1zRSxLQUFLLE1BRXhCN0MsRUFBRXdRLEtBQU0sR0FBRW5PLHdDQUF5QyxDQUNqRDBtQyxxQkFBc0JqL0IsRUFDdEJ1RyxLQUFNbkcsT0FBTzgrQiw2QkFFWm5tQyxJQUVDLEdBQUlBLEVBQUswTCxRQUFTLENBRWhCdk8sRUFBRXpCLE1BQU1zYyxJQUFJLFNBQVNBLElBQUksYUFBYXhYLEtBQUssWUFBYSxRQUFRUixLQUFLLE9BQVEsUUFBUW9FLEtBQUssVUFBVXdXLFNBRXBHLE1BQU11SSxFQUFRaG1CLEVBQUcseUNBQXdDUixPQUU1QyxHQUFUd21CLEVBQ0ZobUIsRUFBRSxzQkFBc0J5ZCxTQUd4QnpkLEVBQUUsc0JBQXNCK0ssS0FBS2liLEVBRWpDLElBRU4sQ0FHQWhtQixFQUFHLHlDQUF3QzZKLEdBQUcsUUFBUzgrQixHQUFzQjkrQixHQUFHLFlBQWE4K0IsRUFDL0YsSUZqQzRJLE1BQU10MUIsRUFBRTFKLEVBQUUsb01BQW9NNUIsRUFBRTRCLEVBQUUsK0VBQStFLFNBQVNyTCxFQUFFcUwsR0FBRyxRQUFRQSxHQUFHLEtBQUtBLENBQUMsQ0FBQyxTQUFTNm1CLEVBQUU3bUIsR0FBRyxHQUFHcy9CLEdBQUV0L0IsR0FBRyxDQUFDLE1BQU0wSixFQUFFLENBQUEsRUFBRyxJQUFJLElBQUl0TCxFQUFFLEVBQUVBLEVBQUU0QixFQUFFbkssT0FBT3VJLElBQUksQ0FBQyxNQUFNekosRUFBRXFMLEVBQUU1QixHQUFHVCxFQUFFNGhDLEdBQUU1cUMsR0FBRzZxQyxFQUFFN3FDLEdBQUdreUIsRUFBRWx5QixHQUFHLEdBQUdnSixFQUFFLElBQUksTUFBTXFDLEtBQUtyQyxFQUFFK0wsRUFBRTFKLEdBQUdyQyxFQUFFcUMsRUFBRSxDQUFDLE9BQU8wSixDQUFDLENBQUMsT0FBTzYxQixHQUFFdi9CLElBQUl5L0IsR0FBRXovQixHQUFHQSxPQUFFLENBQU0sQ0FBQyxNQUFNckMsRUFBRSxnQkFBZ0I5QyxFQUFFLFFBQVEsU0FBUzJrQyxFQUFFeC9CLEdBQUcsTUFBTTBKLEVBQUUsQ0FBQSxFQUFHLE9BQU8xSixFQUFFM0csTUFBTXNFLEdBQUcwSCxTQUFTckYsSUFBSSxHQUFHQSxFQUFFLENBQUMsTUFBTTVCLEVBQUU0QixFQUFFM0csTUFBTXdCLEdBQUd1RCxFQUFFdkksT0FBTyxJQUFJNlQsRUFBRXRMLEVBQUUsR0FBR29ILFFBQVFwSCxFQUFFLEdBQUdvSCxPQUFPLEtBQUtrRSxDQUFDLENBQUMsU0FBU2cyQixFQUFFMS9CLEdBQUcsSUFBSTBKLEVBQUUsR0FBRyxHQUFHNjFCLEdBQUV2L0IsR0FBRzBKLEVBQUUxSixPQUFPLEdBQUdzL0IsR0FBRXQvQixHQUFHLElBQUksSUFBSTVCLEVBQUUsRUFBRUEsRUFBRTRCLEVBQUVuSyxPQUFPdUksSUFBSSxDQUFDLE1BQU16SixFQUFFK3FDLEVBQUUxL0IsRUFBRTVCLElBQUl6SixJQUFJK1UsR0FBRy9VLEVBQUUsSUFBSyxNQUFLLEdBQUc4cUMsR0FBRXovQixHQUFHLElBQUksTUFBTTVCLEtBQUs0QixFQUFFQSxFQUFFNUIsS0FBS3NMLEdBQUd0TCxFQUFFLEtBQUssT0FBT3NMLEVBQUVsRSxNQUFNLENBQUMsU0FBUzRFLEVBQUVwSyxHQUFHLElBQUlBLEVBQUUsT0FBTyxLQUFLLElBQUl5ekIsTUFBTS9wQixFQUFFUixNQUFNOUssR0FBRzRCLEVBQUUsT0FBTzBKLElBQUk2MUIsR0FBRTcxQixLQUFLMUosRUFBRXl6QixNQUFNaU0sRUFBRWgyQixJQUFJdEwsSUFBSTRCLEVBQUVrSixNQUFNMmQsRUFBRXpvQixJQUFJNEIsQ0FBQyxDQUFDLE1BQU1vc0IsRUFBRXBzQixFQUFFLDJrQkFBMmtCekcsRUFBRXlHLEVBQUUsc3BCQUFzcEIyL0IsRUFBRTMvQixFQUFFLHdFQUF3RSxTQUFTZCxFQUFFYyxFQUFFMEosR0FBRyxHQUFHMUosSUFBSTBKLEVBQUUsT0FBTSxFQUFHLElBQUl0TCxFQUFFd2hDLEdBQUU1L0IsR0FBR3JMLEVBQUVpckMsR0FBRWwyQixHQUFHLEdBQUd0TCxHQUFHekosRUFBRSxTQUFTeUosSUFBSXpKLElBQUlxTCxFQUFFWixZQUFZc0ssRUFBRXRLLFVBQVUsR0FBR2hCLEVBQUV5aEMsR0FBRTcvQixHQUFHckwsRUFBRWtyQyxHQUFFbjJCLEdBQUd0TCxHQUFHekosRUFBRSxPQUFPcUwsSUFBSTBKLEVBQUUsR0FBR3RMLEVBQUVraEMsR0FBRXQvQixHQUFHckwsRUFBRTJxQyxHQUFFNTFCLEdBQUd0TCxHQUFHekosRUFBRSxTQUFTeUosSUFBSXpKLElBQUksU0FBU3FMLEVBQUUwSixHQUFHLEdBQUcxSixFQUFFbkssU0FBUzZULEVBQUU3VCxPQUFPLE9BQU0sRUFBRyxJQUFJdUksR0FBRSxFQUFHLElBQUksSUFBSXpKLEVBQUUsRUFBRXlKLEdBQUd6SixFQUFFcUwsRUFBRW5LLE9BQU9sQixJQUFJeUosRUFBRWMsRUFBRWMsRUFBRXJMLEdBQUcrVSxFQUFFL1UsSUFBSSxPQUFPeUosQ0FBQyxDQUE1RyxDQUE4RzRCLEVBQUUwSixHQUFHLEdBQUd0TCxFQUFFcWhDLEdBQUV6L0IsR0FBR3JMLEVBQUU4cUMsR0FBRS8xQixHQUFHdEwsR0FBR3pKLEVBQUUsQ0FBQyxJQUFJeUosSUFBSXpKLEVBQUUsT0FBTSxFQUFHLEdBQUd5UyxPQUFPMDRCLEtBQUs5L0IsR0FBR25LLFNBQVN1UixPQUFPMDRCLEtBQUtwMkIsR0FBRzdULE9BQU8sT0FBTSxFQUFHLElBQUksTUFBTXVJLEtBQUs0QixFQUFFLENBQUMsTUFBTXJMLEVBQUVxTCxFQUFFTixlQUFldEIsR0FBR3lvQixFQUFFbmQsRUFBRWhLLGVBQWV0QixHQUFHLEdBQUd6SixJQUFJa3lCLElBQUlseUIsR0FBR2t5QixJQUFJM25CLEVBQUVjLEVBQUU1QixHQUFHc0wsRUFBRXRMLElBQUksT0FBTSxDQUFFLENBQUMsQ0FBQyxPQUFPeEgsT0FBT29KLEtBQUtwSixPQUFPOFMsRUFBRSxDQUFDLFNBQVMrYyxFQUFFem1CLEVBQUUwSixHQUFHLE9BQU8xSixFQUFFZ04sV0FBV2hOLEdBQUdkLEVBQUVjLEVBQUUwSixJQUFJLENBQUMsTUFBTStXLEdBQUV6Z0IsR0FBR3UvQixHQUFFdi9CLEdBQUdBLEVBQUUsTUFBTUEsRUFBRSxHQUFHcy9CLEdBQUV0L0IsSUFBSXkvQixHQUFFei9CLEtBQUtBLEVBQUV4RyxXQUFXdW1DLEtBQUlDLEdBQUVoZ0MsRUFBRXhHLFdBQVdpSyxLQUFLNkUsVUFBVXRJLEVBQUVpZ0MsR0FBRSxHQUFHcnBDLE9BQU9vSixHQUFHaWdDLEdBQUUsQ0FBQ2pnQyxFQUFFMEosSUFBSUEsR0FBR0EsRUFBRXcyQixVQUFVRCxHQUFFamdDLEVBQUUwSixFQUFFN1AsT0FBT3hELEdBQUVxVCxHQUFHLENBQUMsQ0FBRSxPQUFNQSxFQUFFMEUsU0FBUyxJQUFJMUUsRUFBRXJDLFdBQVc4NEIsUUFBUSxDQUFDbmdDLEdBQUcwSixFQUFFdEwsTUFBTTRCLEVBQUcsR0FBRTBKLFFBQVF0TCxFQUFFNEIsSUFBSSxDQUFBLElBQUtvZ0MsR0FBRTEyQixHQUFHLENBQUMsQ0FBRSxPQUFNQSxFQUFFMEUsU0FBUyxJQUFJMUUsRUFBRXlFLFlBQVlzeEIsR0FBRS8xQixJQUFJNDFCLEdBQUU1MUIsSUFBSTIyQixHQUFFMzJCLEdBQUdBLEVBQUU5UyxPQUFPOFMsR0FBRzQyQixHQUFFLENBQUUsRUFBQ254QixHQUFFLEdBQUcrc0IsR0FBRSxPQUFPN3hCLEdBQUUsS0FBSSxFQUFHalYsR0FBRSxZQUFZeUksR0FBRW1DLEdBQUc1SyxHQUFFRyxLQUFLeUssR0FBR3VnQyxHQUFFdmdDLEdBQUdBLEVBQUV3Z0MsV0FBVyxhQUFheDFCLEdBQUU1RCxPQUFPMjJCLE9BQU96b0MsR0FBRSxDQUFDMEssRUFBRTBKLEtBQUssTUFBTXRMLEVBQUU0QixFQUFFbTJCLFFBQVF6c0IsR0FBR3RMLEdBQUcsR0FBRzRCLEVBQUV5Z0MsT0FBT3JpQyxFQUFFLEVBQUUsRUFBRXNpQyxHQUFFdDVCLE9BQU8zUyxVQUFVaUwsZUFBZWloQyxHQUFFLENBQUMzZ0MsRUFBRTBKLElBQUlnM0IsR0FBRTN4QixLQUFLL08sRUFBRTBKLEdBQUc0MUIsR0FBRTVnQixNQUFNQyxRQUFRdG9CLEdBQUUySixHQUFHLGlCQUFpQjRnQyxHQUFFNWdDLEdBQUdvZ0MsR0FBRXBnQyxHQUFHLGlCQUFpQjRnQyxHQUFFNWdDLEdBQUc0L0IsR0FBRTUvQixHQUFHLGtCQUFrQjRnQyxHQUFFNWdDLEdBQUdnZ0MsR0FBRWhnQyxHQUFHLG1CQUFtQkEsRUFBRXUvQixHQUFFdi9CLEdBQUcsaUJBQWlCQSxFQUFFNi9CLEdBQUU3L0IsR0FBRyxpQkFBaUJBLEVBQUV5L0IsR0FBRXovQixHQUFHLE9BQU9BLEdBQUcsaUJBQWlCQSxFQUFFNmdDLEdBQUU3Z0MsR0FBR3kvQixHQUFFei9CLElBQUlnZ0MsR0FBRWhnQyxFQUFFb0csT0FBTzQ1QixHQUFFaGdDLEVBQUV3RyxPQUFPdTVCLEdBQUUzNEIsT0FBTzNTLFVBQVUrRSxTQUFTb25DLEdBQUU1Z0MsR0FBRysvQixHQUFFaHhCLEtBQUsvTyxHQUFHcWdDLEdBQUVyZ0MsR0FBRyxvQkFBb0I0Z0MsR0FBRTVnQyxHQUFHOGdDLEdBQUU5Z0MsR0FBR3UvQixHQUFFdi9CLElBQUksUUFBUUEsR0FBRyxNQUFNQSxFQUFFLElBQUksR0FBRzVGLFNBQVM0RixFQUFFLE1BQU1BLEVBQUUrZ0MsR0FBRS9nQyxFQUFFLHVJQUF1SWdoQyxHQUFFaGhDLEVBQUUsNkVBQTZFaWhDLEdBQUVqaEMsSUFBSSxNQUFNMEosRUFBRXRDLE9BQU93eUIsT0FBTyxNQUFNLE9BQU94N0IsR0FBR3NMLEVBQUV0TCxLQUFLc0wsRUFBRXRMLEdBQUc0QixFQUFFNUIsR0FBRyxFQUFFOGlDLEdBQUUsU0FBUy9ELEdBQUU4RCxJQUFHamhDLEdBQUdBLEVBQUV4SyxRQUFRMHJDLElBQUcsQ0FBQ2xoQyxFQUFFMEosSUFBSUEsRUFBRUEsRUFBRW5OLGNBQWMsT0FBTzRrQyxHQUFFLGFBQWFDLEdBQUVILElBQUdqaEMsR0FBR0EsRUFBRXhLLFFBQVEyckMsR0FBRSxPQUFPemxDLGdCQUFnQjJsQyxHQUFFSixJQUFHamhDLEdBQUdBLEVBQUUxRCxPQUFPLEdBQUdDLGNBQWN5RCxFQUFFeEQsTUFBTSxLQUFLOGtDLEdBQUVMLElBQUdqaEMsR0FBR0EsRUFBRyxLQUFJcWhDLEdBQUVyaEMsS0FBSyxLQUFLdWhDLEdBQUUsQ0FBQ3ZoQyxFQUFFMEosS0FBS3RDLE9BQU85USxHQUFHMEosRUFBRTBKLEdBQUc4M0IsR0FBRSxDQUFDeGhDLEVBQUUwSixLQUFLLElBQUksSUFBSXRMLEVBQUUsRUFBRUEsRUFBRTRCLEVBQUVuSyxPQUFPdUksSUFBSTRCLEVBQUU1QixHQUFHc0wsRUFBRSxFQUFFKzNCLEdBQUUsQ0FBQ3poQyxFQUFFMEosRUFBRXRMLEtBQUtnSixPQUFPczZCLGVBQWUxaEMsRUFBRTBKLEVBQUUsQ0FBQ2k0QixjQUFhLEVBQUdDLFlBQVcsRUFBRy9uQyxNQUFNdUUsR0FBRyxFQUFFeWpDLEdBQUU3aEMsSUFBSSxNQUFNMEosRUFBRXhPLFdBQVc4RSxHQUFHLE9BQU9sRixNQUFNNE8sR0FBRzFKLEVBQUUwSixDQUFDLEVBQUUsSUFBSW80QixHQUFPQyxHQUFHLE1BQU1DLEdBQUd4eUIsWUFBWXhQLEdBQUUsR0FBSXBMLEtBQUtxdEMsUUFBTyxFQUFHcnRDLEtBQUtzdEMsUUFBUSxHQUFHdHRDLEtBQUt1dEMsU0FBUyxJQUFJbmlDLEdBQUcraEMsS0FBS250QyxLQUFLMFgsT0FBT3kxQixHQUFHbnRDLEtBQUttMEIsT0FBT2daLEdBQUdLLFNBQVNMLEdBQUdLLE9BQU8sS0FBS3RqQyxLQUFLbEssTUFBTSxFQUFFLENBQUN5dEMsSUFBSXJpQyxHQUFHLEdBQUdwTCxLQUFLcXRDLE9BQU8sQ0FBQyxNQUFNdjRCLEVBQUVxNEIsR0FBRyxJQUFJLE9BQU9BLEdBQUdudEMsS0FBS29MLEdBQWdCLENBQUwsUUFBQytoQyxHQUFHcjRCLENBQUMsQ0FBQyxDQUFDLENBQUN4SixLQUFLNmhDLEdBQUdudEMsSUFBSSxDQUFDc2MsTUFBTTZ3QixHQUFHbnRDLEtBQUswWCxNQUFNLENBQUNnMkIsS0FBS3RpQyxHQUFHLEdBQUdwTCxLQUFLcXRDLE9BQU8sQ0FBQyxJQUFJdjRCLEVBQUV0TCxFQUFFLElBQUlzTCxFQUFFLEVBQUV0TCxFQUFFeEosS0FBS3N0QyxRQUFRcnNDLE9BQU82VCxFQUFFdEwsRUFBRXNMLElBQUk5VSxLQUFLc3RDLFFBQVF4NEIsR0FBRzQ0QixPQUFPLElBQUk1NEIsRUFBRSxFQUFFdEwsRUFBRXhKLEtBQUt1dEMsU0FBU3RzQyxPQUFPNlQsRUFBRXRMLEVBQUVzTCxJQUFJOVUsS0FBS3V0QyxTQUFTejRCLEtBQUssR0FBRzlVLEtBQUt3dEMsT0FBTyxJQUFJMTRCLEVBQUUsRUFBRXRMLEVBQUV4SixLQUFLd3RDLE9BQU92c0MsT0FBTzZULEVBQUV0TCxFQUFFc0wsSUFBSTlVLEtBQUt3dEMsT0FBTzE0QixHQUFHNDRCLE1BQUssR0FBSSxHQUFHMXRDLEtBQUswWCxTQUFTdE0sRUFBRSxDQUFDLE1BQU1BLEVBQUVwTCxLQUFLMFgsT0FBTzgxQixPQUFPRyxNQUFNdmlDLEdBQUdBLElBQUlwTCxPQUFPQSxLQUFLMFgsT0FBTzgxQixPQUFPeHRDLEtBQUttMEIsT0FBTy9vQixFQUFFQSxFQUFFK29CLE1BQU1uMEIsS0FBS20wQixNQUFNLENBQUNuMEIsS0FBS3F0QyxRQUFPLENBQUUsQ0FBQyxFQUFFLFNBQVNPLEdBQUd4aUMsR0FBRyxPQUFPLElBQUlnaUMsR0FBR2hpQyxFQUFFLENBQUMsU0FBU3lpQyxHQUFHemlDLEVBQUUwSixFQUFFcTRCLElBQUlyNEIsR0FBR0EsRUFBRXU0QixRQUFRdjRCLEVBQUV3NEIsUUFBUXBqQyxLQUFLa0IsRUFBRSxDQUFDLFNBQVMwaUMsS0FBSyxPQUFPWCxFQUFFLENBQUMsU0FBU1ksR0FBRzNpQyxHQUFHK2hDLElBQUlBLEdBQUdJLFNBQVNyakMsS0FBS2tCLEVBQUUsQ0FBQyxNQUFNNGlDLEdBQUc1aUMsSUFBSSxNQUFNMEosRUFBRSxJQUFJbTVCLElBQUk3aUMsR0FBRyxPQUFPMEosRUFBRXNCLEVBQUUsRUFBRXRCLEVBQUV0TCxFQUFFLEVBQUVzTCxDQUFDLEVBQUVvNUIsR0FBRzlpQyxJQUFJQSxFQUFFZ0wsRUFBRSszQixJQUFJLEVBQUVDLEdBQUdoakMsSUFBSUEsRUFBRTVCLEVBQUUya0MsSUFBSSxFQUFFRSxHQUFHLElBQUlDLFFBQVEsSUFBa0JDLEdBQWRDLEdBQUcsRUFBRUwsR0FBRyxFQUFTLE1BQU1NLEdBQUdDLE9BQU8sSUFBSUMsR0FBR0QsT0FBTyxJQUFJLE1BQU1FLEdBQUdoMEIsWUFBWXhQLEVBQUUwSixFQUFFLEtBQUt0TCxHQUFHeEosS0FBS21CLEdBQUdpSyxFQUFFcEwsS0FBSzZ1QyxVQUFVLzVCLEVBQUU5VSxLQUFLcXRDLFFBQU8sRUFBR3J0QyxLQUFLOHVDLEtBQUssR0FBRzl1QyxLQUFLMFgsWUFBTyxFQUFPbTJCLEdBQUc3dEMsS0FBS3dKLEVBQUUsQ0FBQ2lrQyxNQUFNLElBQUl6dEMsS0FBS3F0QyxPQUFPLE9BQU9ydEMsS0FBS21CLEtBQUssSUFBSWlLLEVBQUVtakMsR0FBR3o1QixFQUFFaTZCLEdBQUcsS0FBSzNqQyxHQUFHLENBQUMsR0FBR0EsSUFBSXBMLEtBQUssT0FBT29MLEVBQUVBLEVBQUVzTSxNQUFNLENBQUMsSUFBSSxPQUFPMVgsS0FBSzBYLE9BQU82MkIsR0FBR0EsR0FBR3Z1QyxLQUFLK3VDLElBQUcsRUFBR1osR0FBRyxLQUFLSyxHQUFHQSxJQUFJLEdBQUcsR0FBR00sS0FBSzFqQyxNQUFNLEdBQUdBLEVBQUVuSyxPQUFPLElBQUksSUFBSTZULEVBQUUsRUFBRUEsRUFBRTFKLEVBQUVuSyxPQUFPNlQsSUFBSTFKLEVBQUUwSixHQUFHc0IsR0FBRyszQixFQUFHLEVBQWhFLENBQWtFbnVDLE1BQU1ndkMsR0FBR2h2QyxNQUFNQSxLQUFLbUIsSUFBOFAsQ0FBbFAsUUFBQ3F0QyxJQUFJLElBQUksQ0FBQ3BqQyxJQUFJLE1BQU0wakMsS0FBS2g2QixHQUFHMUosRUFBRSxHQUFHMEosRUFBRTdULE9BQU8sQ0FBQyxJQUFJdUksRUFBRSxFQUFFLElBQUksSUFBSXpKLEVBQUUsRUFBRUEsRUFBRStVLEVBQUU3VCxPQUFPbEIsSUFBSSxDQUFDLE1BQU1reUIsRUFBRW5kLEVBQUUvVSxHQUFHbXVDLEdBQUdqYyxLQUFLbWMsR0FBR25jLEdBQUdBLEVBQUU1QyxPQUFPamtCLEdBQUcwSixFQUFFdEwsS0FBS3lvQixFQUFFQSxFQUFFN2IsSUFBSSszQixHQUFHbGMsRUFBRXpvQixJQUFJMmtDLEVBQUUsQ0FBQ3I1QixFQUFFN1QsT0FBT3VJLENBQUMsQ0FBRSxFQUFwSixDQUFzSnhKLE1BQU1tdUMsR0FBRyxLQUFLSyxHQUFHRCxHQUFHdnVDLEtBQUswWCxPQUFPcTNCLEdBQUdqNkIsRUFBRTlVLEtBQUswWCxZQUFPLEVBQU8xWCxLQUFLaXZDLFdBQVdqdkMsS0FBSzB0QyxNQUFNLENBQUMsQ0FBQ0EsT0FBT2EsS0FBS3Z1QyxLQUFLQSxLQUFLaXZDLFdBQVUsRUFBR2p2QyxLQUFLcXRDLFNBQVMyQixHQUFHaHZDLE1BQU1BLEtBQUtrdkMsUUFBUWx2QyxLQUFLa3ZDLFNBQVNsdkMsS0FBS3F0QyxRQUFPLEVBQUcsRUFBRSxTQUFTMkIsR0FBRzVqQyxHQUFHLE1BQU0wakMsS0FBS2g2QixHQUFHMUosRUFBRSxHQUFHMEosRUFBRTdULE9BQU8sQ0FBQyxJQUFJLElBQUl1SSxFQUFFLEVBQUVBLEVBQUVzTCxFQUFFN1QsT0FBT3VJLElBQUlzTCxFQUFFdEwsR0FBRzZsQixPQUFPamtCLEdBQUcwSixFQUFFN1QsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTa3VDLEdBQUcvakMsRUFBRTBKLEdBQUcxSixFQUFFZ2tDLFNBQVNoa0MsRUFBRUEsRUFBRWdrQyxPQUFPanVDLElBQUksTUFBTXFJLEVBQUUsSUFBSW9sQyxHQUFHeGpDLEdBQUcwSixJQUFJc0IsR0FBRTVNLEVBQUVzTCxHQUFHQSxFQUFFdTZCLE9BQU94QixHQUFHcmtDLEVBQUVzTCxFQUFFdTZCLFFBQVF2NkIsR0FBR0EsRUFBRXc2QixNQUFNOWxDLEVBQUVpa0MsTUFBTSxNQUFNMXRDLEVBQUV5SixFQUFFaWtDLElBQUl0cEIsS0FBSzNhLEdBQUcsT0FBT3pKLEVBQUVxdkMsT0FBTzVsQyxFQUFFekosQ0FBQyxDQUFDLFNBQVN3dkMsR0FBR25rQyxHQUFHQSxFQUFFZ2tDLE9BQU8xQixNQUFNLENBQUMsSUFBSXFCLElBQUcsRUFBRyxNQUFNUyxHQUFHLEdBQUcsU0FBU0MsS0FBS0QsR0FBR3RsQyxLQUFLNmtDLElBQUlBLElBQUcsQ0FBRSxDQUFDLFNBQVNXLEtBQUssTUFBTXRrQyxFQUFFb2tDLEdBQUc3QixNQUFNb0IsUUFBRyxJQUFTM2pDLEdBQUdBLENBQUMsQ0FBQyxTQUFTdWtDLEdBQUd2a0MsRUFBRTBKLEVBQUV0TCxHQUFHLEdBQUd1bEMsSUFBSVIsR0FBRyxDQUFDLElBQUl6NUIsRUFBRXU1QixHQUFHcHVCLElBQUk3VSxHQUFHMEosR0FBR3U1QixHQUFHMTdCLElBQUl2SCxFQUFFMEosRUFBRSxJQUFJODZCLEtBQUssSUFBSTd2QyxFQUFFK1UsRUFBRW1MLElBQUl6VyxHQUFHekosR0FBRytVLEVBQUVuQyxJQUFJbkosRUFBRXpKLEVBQUVpdUMsTUFBTTZCLEdBQUc5dkMsRUFBRSxDQUFDLENBQUMsU0FBUzh2QyxHQUFHemtDLEVBQUUwSixHQUFHLElBQUl0TCxHQUFFLEVBQUdnbEMsSUFBSSxHQUFHSixHQUFHaGpDLEtBQUtBLEVBQUU1QixHQUFHMmtDLEdBQUcza0MsR0FBRzBrQyxHQUFHOWlDLElBQUk1QixHQUFHNEIsRUFBRXkwQixJQUFJME8sSUFBSS9rQyxJQUFJNEIsRUFBRTBrQyxJQUFJdkIsSUFBSUEsR0FBR08sS0FBSzVrQyxLQUFLa0IsR0FBRyxDQUFDLFNBQVMya0MsR0FBRzNrQyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsR0FBRyxNQUFNOUMsRUFBRW9vQyxHQUFHcHVCLElBQUk3VSxHQUFHLElBQUluRixFQUFFLE9BQU8sSUFBSTJrQyxFQUFFLEdBQUcsR0FBRyxVQUFVOTFCLEVBQUU4MUIsRUFBRSxJQUFJM2tDLEVBQUVzVCxlQUFlLEdBQUcsV0FBVy9QLEdBQUdraEMsR0FBRXQvQixHQUFHbkYsRUFBRXdLLFNBQVMsQ0FBQ3JGLEVBQUUwSixNQUFNLFdBQVdBLEdBQUdBLEdBQUcvVSxJQUFJNnFDLEVBQUUxZ0MsS0FBS2tCLEVBQUUsU0FBUyxZQUFPLElBQVM1QixHQUFHb2hDLEVBQUUxZ0MsS0FBS2pFLEVBQUVnYSxJQUFJelcsSUFBSXNMLEdBQUcsSUFBSSxNQUFNNDFCLEdBQUV0L0IsR0FBRzhnQyxHQUFFMWlDLElBQUlvaEMsRUFBRTFnQyxLQUFLakUsRUFBRWdhLElBQUksWUFBWTJxQixFQUFFMWdDLEtBQUtqRSxFQUFFZ2EsSUFBSXd1QixLQUFLaHRDLEdBQUUySixJQUFJdy9CLEVBQUUxZ0MsS0FBS2pFLEVBQUVnYSxJQUFJMHVCLE1BQU0sTUFBTSxJQUFJLFNBQVNqRSxHQUFFdC9CLEtBQUt3L0IsRUFBRTFnQyxLQUFLakUsRUFBRWdhLElBQUl3dUIsS0FBS2h0QyxHQUFFMkosSUFBSXcvQixFQUFFMWdDLEtBQUtqRSxFQUFFZ2EsSUFBSTB1QixNQUFNLE1BQU0sSUFBSSxNQUFNbHRDLEdBQUUySixJQUFJdy9CLEVBQUUxZ0MsS0FBS2pFLEVBQUVnYSxJQUFJd3VCLEtBQUssR0FBRyxJQUFJN0QsRUFBRTNwQyxPQUFPMnBDLEVBQUUsSUFBSW9GLEdBQUdwRixFQUFFLFFBQVEsQ0FBQyxNQUFNeC9CLEVBQUUsR0FBRyxJQUFJLE1BQU0wSixLQUFLODFCLEVBQUU5MUIsR0FBRzFKLEVBQUVsQixRQUFRNEssR0FBR2s3QixHQUFHaEMsR0FBRzVpQyxHQUFHLENBQUMsQ0FBQyxTQUFTNGtDLEdBQUc1a0MsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUVraEMsR0FBRXQvQixHQUFHQSxFQUFFLElBQUlBLEdBQUcsSUFBSSxNQUFNckwsS0FBS3lKLEVBQUV6SixFQUFFa3dDLFVBQVVDLEdBQUdud0MsR0FBRyxJQUFJLE1BQU1BLEtBQUt5SixFQUFFekosRUFBRWt3QyxVQUFVQyxHQUFHbndDLEVBQUUsQ0FBQyxTQUFTbXdDLEdBQUc5a0MsRUFBRTBKLElBQUkxSixJQUFJbWpDLElBQUluakMsRUFBRStrQyxnQkFBZ0Iva0MsRUFBRXlqQyxVQUFVempDLEVBQUV5akMsWUFBWXpqQyxFQUFFcWlDLE1BQU0sQ0FBQyxNQUFNMkMsR0FBR2hsQyxFQUFFLCtCQUErQmlsQyxHQUFHLElBQUlwQyxJQUFJejdCLE9BQU84OUIsb0JBQW9CNUIsUUFBUXIzQixRQUFRak0sR0FBRyxjQUFjQSxHQUFHLFdBQVdBLElBQUkxRyxLQUFLMEcsR0FBR3NqQyxPQUFPdGpDLEtBQUtpTSxPQUFPNHpCLEtBQUlzRixHQUFHQyxLQUFLQyxHQUFHRCxJQUFHLEdBQUcsR0FBSUUsR0FBR0YsSUFBRyxHQUFJRyxHQUFHSCxJQUFHLEdBQUcsR0FBSUksR0FBUSxXQUFjLE1BQU14bEMsRUFBRSxDQUFBLEVBQUcsTUFBTSxDQUFDLFdBQVcsVUFBVSxlQUFlcUYsU0FBU3FFLElBQUkxSixFQUFFMEosR0FBRyxZQUFZMUosR0FBRyxNQUFNNUIsRUFBRXFuQyxHQUFHN3dDLE1BQU0sSUFBSSxJQUFJOFUsRUFBRSxFQUFFbWQsRUFBRWp5QixLQUFLaUIsT0FBTzZULEVBQUVtZCxFQUFFbmQsSUFBSTY2QixHQUFHbm1DLEVBQUUsRUFBRXNMLEVBQUUsSUFBSSxNQUFNL1UsRUFBRXlKLEVBQUVzTCxNQUFNMUosR0FBRyxPQUFPLElBQUlyTCxJQUFHLElBQUtBLEVBQUV5SixFQUFFc0wsTUFBTTFKLEVBQUUxRyxJQUFJbXNDLEtBQUs5d0MsRUFBRSxJQUFJLENBQUMsT0FBTyxNQUFNLFFBQVEsVUFBVSxVQUFVMFEsU0FBU3FFLElBQUkxSixFQUFFMEosR0FBRyxZQUFZMUosR0FBR3FrQyxLQUFLLE1BQU1qbUMsRUFBRXFuQyxHQUFHN3dDLE1BQU04VSxHQUFHZzhCLE1BQU05d0MsS0FBS29MLEdBQUcsT0FBT3NrQyxLQUFLbG1DLEVBQUUsSUFBSTRCLENBQUMsQ0FBaFgybEMsR0FBaVgsU0FBU1AsR0FBR3BsQyxHQUFFLEVBQUcwSixHQUFFLEdBQUksT0FBTyxTQUFTdEwsRUFBRXpKLEVBQUVreUIsR0FBRyxHQUFHLG1CQUFtQmx5QixFQUFFLE9BQU9xTCxFQUFFLEdBQUcsbUJBQW1CckwsRUFBRSxPQUFPcUwsRUFBRSxHQUFHLGtCQUFrQnJMLEVBQUUsT0FBTytVLEVBQUUsR0FBRyxZQUFZL1UsR0FBR2t5QixLQUFLN21CLEVBQUUwSixFQUFFazhCLEdBQUd2c0IsR0FBRzNQLEVBQUVtOEIsR0FBR0MsSUFBSWp4QixJQUFJelcsR0FBRyxPQUFPQSxFQUFFLE1BQU1ULEVBQUUyaEMsR0FBRWxoQyxHQUFHLElBQUk0QixHQUFHckMsR0FBR2dqQyxHQUFFNkUsR0FBRzd3QyxHQUFHLE9BQU9veEMsUUFBUWx4QixJQUFJMndCLEdBQUc3d0MsRUFBRWt5QixHQUFHLE1BQU1oc0IsRUFBRWtyQyxRQUFRbHhCLElBQUl6VyxFQUFFekosRUFBRWt5QixHQUFHLE9BQU9nWixHQUFFbHJDLEdBQUdzd0MsR0FBR3hRLElBQUk5L0IsR0FBR3F3QyxHQUFHcndDLElBQUlrRyxHQUFHbUYsR0FBR3VrQyxHQUFHbm1DLEVBQUUsRUFBRXpKLEdBQUcrVSxFQUFFN08sRUFBRW1yQyxHQUFHbnJDLEdBQUc4QyxHQUFHbWpDLEdBQUVuc0MsR0FBR2tHLEVBQUVBLEVBQUVoQixNQUFNNGxDLEdBQUU1a0MsR0FBR21GLEVBQUVpbUMsR0FBR3ByQyxHQUFHcXJDLEdBQUdyckMsR0FBR0EsR0FBRyxDQUFDLFNBQVNzckMsR0FBR25tQyxHQUFFLEdBQUksT0FBTyxTQUFTMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEdBQUcsSUFBSWxwQixFQUFFK0wsRUFBRXRMLEdBQUcsR0FBR2dvQyxHQUFHem9DLElBQUlxb0MsR0FBR3JvQyxLQUFLcW9DLEdBQUdyeEMsR0FBRyxPQUFNLEVBQUcsSUFBSXFMLElBQUlvbUMsR0FBR3p4QyxLQUFLMHhDLEdBQUcxeEMsS0FBS0EsRUFBRTh3QyxHQUFHOXdDLEdBQUdnSixFQUFFOG5DLEdBQUc5bkMsS0FBSzJoQyxHQUFFNTFCLElBQUlzOEIsR0FBR3JvQyxLQUFLcW9DLEdBQUdyeEMsSUFBSSxPQUFPZ0osRUFBRTlELE1BQU1sRixHQUFFLEVBQUcsTUFBTWtHLEVBQUV5a0MsR0FBRTUxQixJQUFJbzNCLEdBQUUxaUMsR0FBR2doQixPQUFPaGhCLEdBQUdzTCxFQUFFN1QsT0FBTzhxQyxHQUFFajNCLEVBQUV0TCxHQUFHb2hDLEVBQUV1RyxRQUFReCtCLElBQUltQyxFQUFFdEwsRUFBRXpKLEVBQUVreUIsR0FBRyxPQUFPbmQsSUFBSSs3QixHQUFHNWUsS0FBS2hzQixFQUFFMG1DLEdBQUU1c0MsRUFBRWdKLElBQUlnbkMsR0FBR2o3QixFQUFFLE1BQU10TCxFQUFFekosR0FBR2d3QyxHQUFHajdCLEVBQUUsTUFBTXRMLEVBQUV6SixJQUFJNnFDLEVBQUUsQ0FBQyxNQUFNOEcsR0FBRyxDQUFDenhCLElBQUlzd0IsR0FBRzU5QixJQUFJNCtCLEtBQUtJLGVBQWUsU0FBU3ZtQyxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRXVpQyxHQUFFM2dDLEVBQUUwSixHQUFHL1UsRUFBRW94QyxRQUFRUSxlQUFldm1DLEVBQUUwSixHQUFHLE9BQU8vVSxHQUFHeUosR0FBR3VtQyxHQUFHM2tDLEVBQUUsU0FBUzBKLE9BQUUsR0FBUS9VLENBQUUsRUFBQzgvQixJQUFJLFNBQVN6MEIsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUUybkMsUUFBUXRSLElBQUl6MEIsRUFBRTBKLEdBQUcsT0FBT20yQixHQUFFbjJCLElBQUl1N0IsR0FBR3hRLElBQUkvcUIsSUFBSTY2QixHQUFHdmtDLEVBQUUsRUFBRTBKLEdBQUd0TCxDQUFFLEVBQUNvb0MsUUFBUSxTQUFTeG1DLEdBQUcsT0FBT3VrQyxHQUFHdmtDLEVBQUUsRUFBRXMvQixHQUFFdC9CLEdBQUcsU0FBU3FqQyxJQUFJMEMsUUFBUVMsUUFBUXhtQyxFQUFFLEdBQUd5bUMsR0FBRyxDQUFDNXhCLElBQUl5d0IsR0FBRy85QixJQUFJLENBQUN2SCxFQUFFMEosS0FBSSxFQUFHNjhCLGVBQWUsQ0FBQ3ZtQyxFQUFFMEosS0FBSSxHQUFJZzlCLEdBQUcxN0IsR0FBRSxDQUFFLEVBQUNzN0IsR0FBRyxDQUFDenhCLElBQUl3d0IsR0FBRzk5QixJQUFJNCtCLElBQUcsS0FBTVEsR0FBRzM3QixHQUFFLENBQUUsRUFBQ3k3QixHQUFHLENBQUM1eEIsSUFBSTB3QixLQUFLcUIsR0FBRzVtQyxHQUFHQSxFQUFFNm1DLEdBQUc3bUMsR0FBRytsQyxRQUFRZSxlQUFlOW1DLEdBQUcsU0FBUyttQyxHQUFHL21DLEVBQUUwSixFQUFFdEwsR0FBRSxFQUFHekosR0FBRSxHQUFJLE1BQU1reUIsRUFBRTRlLEdBQUd6bEMsRUFBRUEsRUFBRWduQyxTQUFTcnBDLEVBQUU4bkMsR0FBRy83QixHQUFHdEwsSUFBSXNMLElBQUkvTCxHQUFHNG1DLEdBQUcxZCxFQUFFLEVBQUVuZCxHQUFHNjZCLEdBQUcxZCxFQUFFLEVBQUVscEIsSUFBSSxNQUFNODJCLElBQUk1NUIsR0FBR2dzQyxHQUFHaGdCLEdBQUcyWSxFQUFFN3FDLEVBQUVpeUMsR0FBR3hvQyxFQUFFNm9DLEdBQUdDLEdBQUcsT0FBT3JzQyxFQUFFa1UsS0FBSzhYLEVBQUVuZCxHQUFHODFCLEVBQUV4L0IsRUFBRTZVLElBQUluTCxJQUFJN08sRUFBRWtVLEtBQUs4WCxFQUFFbHBCLEdBQUc2aEMsRUFBRXgvQixFQUFFNlUsSUFBSWxYLFNBQVNxQyxJQUFJNm1CLEdBQUc3bUIsRUFBRTZVLElBQUluTCxHQUFHLENBQUMsU0FBU3k5QixHQUFHbm5DLEVBQUUwSixHQUFFLEdBQUksTUFBTXRMLEVBQUV4SixLQUFLb3lDLFFBQVFyeUMsRUFBRTh3QyxHQUFHcm5DLEdBQUd5b0IsRUFBRTRlLEdBQUd6bEMsR0FBRyxPQUFPMEosSUFBSTFKLElBQUk2bUIsR0FBRzBkLEdBQUc1dkMsRUFBRSxFQUFFcUwsR0FBR3VrQyxHQUFHNXZDLEVBQUUsRUFBRWt5QixJQUFJN21CLElBQUk2bUIsRUFBRXpvQixFQUFFcTJCLElBQUl6MEIsR0FBRzVCLEVBQUVxMkIsSUFBSXowQixJQUFJNUIsRUFBRXEyQixJQUFJNU4sRUFBRSxDQUFDLFNBQVN1Z0IsR0FBR3BuQyxFQUFFMEosR0FBRSxHQUFJLE9BQU8xSixFQUFFQSxFQUFFZ25DLFNBQVN0OUIsR0FBRzY2QixHQUFHa0IsR0FBR3psQyxHQUFHLEVBQUVxakMsSUFBSTBDLFFBQVFseEIsSUFBSTdVLEVBQUUsT0FBT0EsRUFBRSxDQUFDLFNBQVNxbkMsR0FBR3JuQyxHQUFHQSxFQUFFeWxDLEdBQUd6bEMsR0FBRyxNQUFNMEosRUFBRSs3QixHQUFHN3dDLE1BQU0sT0FBT2l5QyxHQUFHbjlCLEdBQUcrcUIsSUFBSTFsQixLQUFLckYsRUFBRTFKLEtBQUswSixFQUFFZzdCLElBQUkxa0MsR0FBRzJrQyxHQUFHajdCLEVBQUUsTUFBTTFKLEVBQUVBLElBQUlwTCxJQUFJLENBQUMsU0FBUzB5QyxHQUFHdG5DLEVBQUUwSixHQUFHQSxFQUFFKzdCLEdBQUcvN0IsR0FBRyxNQUFNdEwsRUFBRXFuQyxHQUFHN3dDLE9BQU82L0IsSUFBSTkvQixFQUFFa2dCLElBQUlnUyxHQUFHZ2dCLEdBQUd6b0MsR0FBRyxJQUFJVCxFQUFFaEosRUFBRW9hLEtBQUszUSxFQUFFNEIsR0FBR3JDLElBQUlxQyxFQUFFeWxDLEdBQUd6bEMsR0FBR3JDLEVBQUVoSixFQUFFb2EsS0FBSzNRLEVBQUU0QixJQUFJLE1BQU1uRixFQUFFZ3NCLEVBQUU5WCxLQUFLM1EsRUFBRTRCLEdBQUcsT0FBTzVCLEVBQUVtSixJQUFJdkgsRUFBRTBKLEdBQUcvTCxFQUFFNGpDLEdBQUU3M0IsRUFBRTdPLElBQUk4cEMsR0FBR3ZtQyxFQUFFLE1BQU00QixFQUFFMEosR0FBR2k3QixHQUFHdm1DLEVBQUUsTUFBTTRCLEVBQUUwSixHQUFHOVUsSUFBSSxDQUFDLFNBQVMyeUMsR0FBR3ZuQyxHQUFHLE1BQU0wSixFQUFFKzdCLEdBQUc3d0MsT0FBTzYvQixJQUFJcjJCLEVBQUV5VyxJQUFJbGdCLEdBQUdreUMsR0FBR245QixHQUFHLElBQUltZCxFQUFFem9CLEVBQUUyUSxLQUFLckYsRUFBRTFKLEdBQUc2bUIsSUFBSTdtQixFQUFFeWxDLEdBQUd6bEMsR0FBRzZtQixFQUFFem9CLEVBQUUyUSxLQUFLckYsRUFBRTFKLElBQUlyTCxHQUFHQSxFQUFFb2EsS0FBS3JGLEVBQUUxSixHQUFHLE1BQU1yQyxFQUFFK0wsRUFBRXVhLE9BQU9qa0IsR0FBRyxPQUFPNm1CLEdBQUc4ZCxHQUFHajdCLEVBQUUsU0FBUzFKLE9BQUUsR0FBUXJDLENBQUMsQ0FBQyxTQUFTNnBDLEtBQUssTUFBTXhuQyxFQUFFeWxDLEdBQUc3d0MsTUFBTThVLEVBQUUsSUFBSTFKLEVBQUVvTyxLQUFLaFEsRUFBRTRCLEVBQUV5bkMsUUFBUSxPQUFPLzlCLEdBQUdpN0IsR0FBRzNrQyxFQUFFLGFBQVEsT0FBTyxHQUFRNUIsQ0FBQyxDQUFDLFNBQVNzcEMsR0FBRzFuQyxFQUFFMEosR0FBRyxPQUFPLFNBQVN0TCxFQUFFekosR0FBRyxNQUFNa3lCLEVBQUVqeUIsS0FBSytJLEVBQUVrcEIsRUFBRW1nQixRQUFRbnNDLEVBQUU0cUMsR0FBRzluQyxHQUFHNmhDLEVBQUU5MUIsRUFBRWs5QixHQUFHNW1DLEVBQUVpbkMsR0FBR0MsR0FBRyxPQUFPbG5DLEdBQUd1a0MsR0FBRzFwQyxFQUFFLEVBQUV3b0MsSUFBSTFsQyxFQUFFMEgsU0FBUyxDQUFDckYsRUFBRTBKLElBQUl0TCxFQUFFMlEsS0FBS3BhLEVBQUU2cUMsRUFBRXgvQixHQUFHdy9CLEVBQUU5MUIsR0FBR21kLEtBQUssQ0FBQyxTQUFTOGdCLEdBQUczbkMsRUFBRTBKLEVBQUV0TCxHQUFHLE9BQU8sWUFBWXpKLEdBQUcsTUFBTWt5QixFQUFFanlCLEtBQUtveUMsUUFBUXJwQyxFQUFFOG5DLEdBQUc1ZSxHQUFHaHNCLEVBQUV4RSxHQUFFc0gsR0FBRzZoQyxFQUFFLFlBQVl4L0IsR0FBR0EsSUFBSXNqQyxPQUFPc0UsVUFBVS9zQyxFQUFFNmtDLEVBQUUsU0FBUzEvQixHQUFHbkYsRUFBRXVQLEVBQUV5YyxFQUFFN21CLE1BQU1yTCxHQUFHeTNCLEVBQUVodUIsRUFBRXdvQyxHQUFHbDlCLEVBQUV1OUIsR0FBR0MsR0FBRyxPQUFPeDlCLEdBQUc2NkIsR0FBRzVtQyxFQUFFLEVBQUUraEMsRUFBRTZELEdBQUdGLElBQUksQ0FBQ3RRLE9BQU8sTUFBTWw1QixNQUFNbUcsRUFBRThELEtBQUs0RixHQUFHVSxFQUFFMm9CLE9BQU8sT0FBT3JwQixFQUFFLENBQUM3UCxNQUFNbUcsRUFBRThELEtBQUs0RixHQUFHLENBQUM3UCxNQUFNMmxDLEVBQUUsQ0FBQ3BULEVBQUVwc0IsRUFBRSxJQUFJb3NCLEVBQUVwc0IsRUFBRSxLQUFLb3NCLEVBQUVwc0IsR0FBRzhELEtBQUs0RixFQUFHLEVBQUMsQ0FBQzQ1QixPQUFPc0UsWUFBWSxPQUFPaHpDLElBQUksR0FBRyxDQUFDLFNBQVNpekMsR0FBRzduQyxHQUFHLE9BQU8sWUFBWTBKLEdBQUcsTUFBTSxXQUFXMUosR0FBR3BMLEtBQUssQ0FBa3dCLE1BQU1rekMsR0FBR0MsR0FBR0MsR0FBR0MsSUFBaHhCLFdBQWMsTUFBTWpvQyxFQUFFLENBQUM2VSxJQUFJN1UsR0FBRyxPQUFPK21DLEdBQUdueUMsS0FBS29MLEVBQUcsRUFBS29PLFdBQU8sT0FBT2c1QixHQUFHeHlDLEtBQU0sRUFBQzYvQixJQUFJMFMsR0FBR3pDLElBQUkyQyxHQUFHOS9CLElBQUkrL0IsR0FBR3JqQixPQUFPc2pCLEdBQUdFLE1BQU1ELEdBQUduaUMsUUFBUXFpQyxJQUFHLEdBQUcsSUFBS2grQixFQUFFLENBQUNtTCxJQUFJN1UsR0FBRyxPQUFPK21DLEdBQUdueUMsS0FBS29MLEdBQUUsR0FBRyxFQUFJLEVBQUtvTyxXQUFPLE9BQU9nNUIsR0FBR3h5QyxLQUFNLEVBQUM2L0IsSUFBSTBTLEdBQUd6QyxJQUFJMkMsR0FBRzkvQixJQUFJKy9CLEdBQUdyakIsT0FBT3NqQixHQUFHRSxNQUFNRCxHQUFHbmlDLFFBQVFxaUMsSUFBRyxHQUFHLElBQUt0cEMsRUFBRSxDQUFDeVcsSUFBSTdVLEdBQUcsT0FBTyttQyxHQUFHbnlDLEtBQUtvTCxHQUFFLEVBQUksRUFBS29PLFdBQU8sT0FBT2c1QixHQUFHeHlDLE1BQUssRUFBSSxFQUFDNi9CLElBQUl6MEIsR0FBRyxPQUFPbW5DLEdBQUdwNEIsS0FBS25hLEtBQUtvTCxHQUFFLEVBQUksRUFBQzBrQyxJQUFJbUQsR0FBRyxPQUFPdGdDLElBQUlzZ0MsR0FBRyxPQUFPNWpCLE9BQU80akIsR0FBRyxVQUFVSixNQUFNSSxHQUFHLFNBQVN4aUMsUUFBUXFpQyxJQUFHLEdBQUcsSUFBSy95QyxFQUFFLENBQUNrZ0IsSUFBSTdVLEdBQUcsT0FBTyttQyxHQUFHbnlDLEtBQUtvTCxHQUFFLEdBQUcsRUFBSSxFQUFLb08sV0FBTyxPQUFPZzVCLEdBQUd4eUMsTUFBSyxFQUFJLEVBQUM2L0IsSUFBSXowQixHQUFHLE9BQU9tbkMsR0FBR3A0QixLQUFLbmEsS0FBS29MLEdBQUUsRUFBSSxFQUFDMGtDLElBQUltRCxHQUFHLE9BQU90Z0MsSUFBSXNnQyxHQUFHLE9BQU81akIsT0FBTzRqQixHQUFHLFVBQVVKLE1BQU1JLEdBQUcsU0FBU3hpQyxRQUFRcWlDLElBQUcsR0FBRyxJQUFLLE1BQU0sQ0FBQyxPQUFPLFNBQVMsVUFBVXBFLE9BQU9zRSxVQUFVdmlDLFNBQVN3aEIsSUFBSTdtQixFQUFFNm1CLEdBQUc4Z0IsR0FBRzlnQixHQUFFLEdBQUcsR0FBSXpvQixFQUFFeW9CLEdBQUc4Z0IsR0FBRzlnQixHQUFFLEdBQUcsR0FBSW5kLEVBQUVtZCxHQUFHOGdCLEdBQUc5Z0IsR0FBRSxHQUFHLEdBQUlseUIsRUFBRWt5QixHQUFHOGdCLEdBQUc5Z0IsR0FBRSxHQUFHLEVBQUcsSUFBSSxDQUFDN21CLEVBQUU1QixFQUFFc0wsRUFBRS9VLEVBQUUsQ0FBb0J1ekMsR0FBSyxTQUFTQyxHQUFHbm9DLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFc0wsRUFBRTFKLEVBQUVpb0MsR0FBR0QsR0FBR2hvQyxFQUFFK25DLEdBQUdELEdBQUcsTUFBTSxDQUFDcCtCLEVBQUUvVSxFQUFFa3lCLElBQUksbUJBQW1CbHlCLEdBQUdxTCxFQUFFLG1CQUFtQnJMLEVBQUVxTCxFQUFFLFlBQVlyTCxFQUFFK1UsRUFBRXE4QixRQUFRbHhCLElBQUk4ckIsR0FBRXZpQyxFQUFFekosSUFBSUEsS0FBSytVLEVBQUV0TCxFQUFFc0wsRUFBRS9VLEVBQUVreUIsRUFBRSxDQUFDLE1BQU11aEIsR0FBRyxDQUFDdnpCLElBQUlzekIsSUFBRyxHQUFHLElBQUtFLEdBQUcsQ0FBQ3h6QixJQUFJc3pCLElBQUcsR0FBRyxJQUFLRyxHQUFHLENBQUN6ekIsSUFBSXN6QixJQUFHLEdBQUcsSUFBS0ksR0FBRyxDQUFDMXpCLElBQUlzekIsSUFBRyxHQUFHLElBQUtyQyxHQUFHLElBQUk1QyxRQUFRMkMsR0FBRyxJQUFJM0MsUUFBUTdwQixHQUFHLElBQUk2cEIsUUFBUTBDLEdBQUcsSUFBSTFDLFFBQWtPLFNBQVNnRCxHQUFHbG1DLEdBQUcsT0FBT29tQyxHQUFHcG1DLEdBQUdBLEVBQUV3b0MsR0FBR3hvQyxHQUFFLEVBQUdzbUMsR0FBRzhCLEdBQUd0QyxHQUFHLENBQUMsU0FBUzJDLEdBQUd6b0MsR0FBRyxPQUFPd29DLEdBQUd4b0MsR0FBRSxFQUFHMG1DLEdBQUcyQixHQUFHeEMsR0FBRyxDQUFDLFNBQVNJLEdBQUdqbUMsR0FBRyxPQUFPd29DLEdBQUd4b0MsR0FBRSxFQUFHeW1DLEdBQUc2QixHQUFHanZCLEdBQUcsQ0FBQyxTQUFTcXZCLEdBQUcxb0MsR0FBRyxPQUFPd29DLEdBQUd4b0MsR0FBRSxFQUFHMm1DLEdBQUc0QixHQUFHM0MsR0FBRyxDQUFDLFNBQVM0QyxHQUFHeG9DLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsR0FBRyxJQUFJNFksR0FBRXovQixHQUFHLE9BQU9BLEVBQUUsR0FBR0EsRUFBRWduQyxXQUFXdDlCLElBQUkxSixFQUFFMm9DLGdCQUFnQixPQUFPM29DLEVBQUUsTUFBTXJDLEVBQUVrcEIsRUFBRWhTLElBQUk3VSxHQUFHLEdBQUdyQyxFQUFFLE9BQU9BLEVBQUUsTUFBTTlDLEVBQS9mLFNBQVltRixHQUFHLE9BQU9BLEVBQUU0b0MsV0FBV3hoQyxPQUFPeWhDLGFBQWE3b0MsR0FBRyxFQUFFLFNBQVNBLEdBQUcsT0FBT0EsR0FBRyxJQUFJLFNBQVMsSUFBSSxRQUFRLE9BQU8sRUFBRSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksVUFBVSxJQUFJLFVBQVUsT0FBTyxFQUFFLFFBQVEsT0FBTyxFQUFHLENBQW5JLENBQW9JLENBQUNBLEdBQUc0Z0MsR0FBRTVnQyxHQUFHeEQsTUFBTSxHQUFHLEdBQWxCLENBQXNCd0QsR0FBRyxDQUF3UzhvQyxDQUFHOW9DLEdBQUcsR0FBRyxJQUFJbkYsRUFBRSxPQUFPbUYsRUFBRSxNQUFNdy9CLEVBQUUsSUFBSXVKLE1BQU0vb0MsRUFBRSxJQUFJbkYsRUFBRWxHLEVBQUV5SixHQUFHLE9BQU95b0IsRUFBRXRmLElBQUl2SCxFQUFFdy9CLEdBQUdBLENBQUMsQ0FBQyxTQUFTd0osR0FBR2hwQyxHQUFHLE9BQU9vbUMsR0FBR3BtQyxHQUFHZ3BDLEdBQUdocEMsRUFBRWduQyxZQUFZaG5DLElBQUlBLEVBQUUyb0MsZUFBZSxDQUFDLFNBQVN2QyxHQUFHcG1DLEdBQUcsU0FBU0EsSUFBSUEsRUFBRWlwQyxlQUFlLENBQUMsU0FBUzVDLEdBQUdybUMsR0FBRyxTQUFTQSxJQUFJQSxFQUFFa3BDLGNBQWMsQ0FBQyxTQUFTQyxHQUFHbnBDLEdBQUcsT0FBT2dwQyxHQUFHaHBDLElBQUlvbUMsR0FBR3BtQyxFQUFFLENBQUMsU0FBU3lsQyxHQUFHemxDLEdBQUcsTUFBTTBKLEVBQUUxSixHQUFHQSxFQUFFZ25DLFFBQVEsT0FBT3Q5QixFQUFFKzdCLEdBQUcvN0IsR0FBRzFKLENBQUMsQ0FBQyxTQUFTb3BDLEdBQUdwcEMsR0FBRyxPQUFPeWhDLEdBQUV6aEMsRUFBRSxZQUFXLEdBQUlBLENBQUMsQ0FBQyxNQUFNa25DLEdBQUdsbkMsR0FBR3kvQixHQUFFei9CLEdBQUdrbUMsR0FBR2xtQyxHQUFHQSxFQUFFaW5DLEdBQUdqbkMsR0FBR3kvQixHQUFFei9CLEdBQUdpbUMsR0FBR2ptQyxHQUFHQSxFQUFFLFNBQVNxcEMsR0FBR3JwQyxHQUFHMmpDLElBQUlSLElBQUlzQixJQUFJemtDLEVBQUV5bEMsR0FBR3psQyxJQUFJc3BDLE1BQU10cEMsRUFBRXNwQyxJQUFJMUcsTUFBTSxDQUFDLFNBQVMyRyxHQUFHdnBDLEVBQUUwSixJQUFJMUosRUFBRXlsQyxHQUFHemxDLElBQUlzcEMsS0FBSzFFLEdBQUc1a0MsRUFBRXNwQyxJQUFJLENBQUMsU0FBU3RELEdBQUdobUMsR0FBRyxTQUFTQSxJQUFHLElBQUtBLEVBQUVrZ0MsVUFBVSxDQUFDLFNBQVNzSixHQUFHeHBDLEdBQUcsT0FBT3lwQyxHQUFHenBDLEdBQUUsRUFBRyxDQUFDLFNBQVMwcEMsR0FBRzFwQyxHQUFHLE9BQU95cEMsR0FBR3pwQyxHQUFFLEVBQUcsQ0FBQyxTQUFTeXBDLEdBQUd6cEMsRUFBRTBKLEdBQUcsT0FBT3M4QixHQUFHaG1DLEdBQUdBLEVBQUUsSUFBSTJwQyxHQUFHM3BDLEVBQUUwSixFQUFFLENBQUMsTUFBTWlnQyxHQUFHbjZCLFlBQVl4UCxFQUFFMEosR0FBRzlVLEtBQUtzMEMsY0FBY3gvQixFQUFFOVUsS0FBSzAwQyxTQUFJLEVBQU8xMEMsS0FBS3NyQyxXQUFVLEVBQUd0ckMsS0FBS2cxQyxVQUFVbGdDLEVBQUUxSixFQUFFeWxDLEdBQUd6bEMsR0FBR3BMLEtBQUtpMUMsT0FBT25nQyxFQUFFMUosRUFBRWtuQyxHQUFHbG5DLEVBQUUsQ0FBS25HLFlBQVEsT0FBT3d2QyxHQUFHejBDLE1BQU1BLEtBQUtpMUMsTUFBTSxDQUFLaHdDLFVBQU1tRyxHQUFHQSxFQUFFcEwsS0FBS3MwQyxjQUFjbHBDLEVBQUV5bEMsR0FBR3psQyxHQUFHdWhDLEdBQUV2aEMsRUFBRXBMLEtBQUtnMUMsYUFBYWgxQyxLQUFLZzFDLFVBQVU1cEMsRUFBRXBMLEtBQUtpMUMsT0FBT2oxQyxLQUFLczBDLGNBQWNscEMsRUFBRWtuQyxHQUFHbG5DLEdBQUd1cEMsR0FBRzMwQyxNQUFNLEVBQUUsU0FBU2sxQyxHQUFHOXBDLEdBQUd1cEMsR0FBR3ZwQyxFQUFFLENBQUMsU0FBUytwQyxHQUFHL3BDLEdBQUcsT0FBT2dtQyxHQUFHaG1DLEdBQUdBLEVBQUVuRyxNQUFNbUcsQ0FBQyxDQUFDLE1BQU1ncUMsR0FBRyxDQUFDbjFCLElBQUksQ0FBQzdVLEVBQUUwSixFQUFFdEwsSUFBSTJyQyxHQUFHaEUsUUFBUWx4QixJQUFJN1UsRUFBRTBKLEVBQUV0TCxJQUFJbUosSUFBSSxDQUFDdkgsRUFBRTBKLEVBQUV0TCxFQUFFekosS0FBSyxNQUFNa3lCLEVBQUU3bUIsRUFBRTBKLEdBQUcsT0FBT3M4QixHQUFHbmYsS0FBS21mLEdBQUc1bkMsSUFBSXlvQixFQUFFaHRCLE1BQU11RSxHQUFFLEdBQUkybkMsUUFBUXgrQixJQUFJdkgsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRSxHQUFHLFNBQVNzMUMsR0FBR2pxQyxHQUFHLE9BQU9ncEMsR0FBR2hwQyxHQUFHQSxFQUFFLElBQUkrb0MsTUFBTS9vQyxFQUFFZ3FDLEdBQUcsQ0FBQyxNQUFNRSxHQUFHMTZCLFlBQVl4UCxHQUFHcEwsS0FBSzAwQyxTQUFJLEVBQU8xMEMsS0FBS3NyQyxXQUFVLEVBQUcsTUFBTXJyQixJQUFJbkwsRUFBRW5DLElBQUluSixHQUFHNEIsR0FBRyxJQUFJcXBDLEdBQUd6MEMsUUFBUSxJQUFJMjBDLEdBQUczMEMsUUFBUUEsS0FBS3UxQyxLQUFLemdDLEVBQUU5VSxLQUFLdzFDLEtBQUtoc0MsQ0FBQyxDQUFLdkUsWUFBUSxPQUFPakYsS0FBS3UxQyxNQUFNLENBQUt0d0MsVUFBTW1HLEdBQUdwTCxLQUFLdzFDLEtBQUtwcUMsRUFBRSxFQUFFLFNBQVNxcUMsR0FBR3JxQyxHQUFHLE9BQU8sSUFBSWtxQyxHQUFHbHFDLEVBQUUsQ0FBQyxTQUFTc3FDLEdBQUd0cUMsR0FBRyxNQUFNMEosRUFBRTQxQixHQUFFdC9CLEdBQUcsSUFBSTBlLE1BQU0xZSxFQUFFbkssUUFBUSxHQUFHLElBQUksTUFBTXVJLEtBQUs0QixFQUFFMEosRUFBRXRMLEdBQUdtc0MsR0FBR3ZxQyxFQUFFNUIsR0FBRyxPQUFPc0wsQ0FBQyxDQUFDLE1BQU04Z0MsR0FBR2g3QixZQUFZeFAsRUFBRTBKLEVBQUV0TCxHQUFHeEosS0FBSzYxQyxRQUFRenFDLEVBQUVwTCxLQUFLODFDLEtBQUtoaEMsRUFBRTlVLEtBQUsrMUMsY0FBY3ZzQyxFQUFFeEosS0FBS3NyQyxXQUFVLENBQUUsQ0FBS3JtQyxZQUFRLE1BQU1tRyxFQUFFcEwsS0FBSzYxQyxRQUFRNzFDLEtBQUs4MUMsTUFBTSxZQUFPLElBQVMxcUMsRUFBRXBMLEtBQUsrMUMsY0FBYzNxQyxDQUFDLENBQUtuRyxVQUFNbUcsR0FBR3BMLEtBQUs2MUMsUUFBUTcxQyxLQUFLODFDLE1BQU0xcUMsQ0FBQyxFQUFFLFNBQVN1cUMsR0FBR3ZxQyxFQUFFMEosRUFBRXRMLEdBQUcsTUFBTXpKLEVBQUVxTCxFQUFFMEosR0FBRyxPQUFPczhCLEdBQUdyeEMsR0FBR0EsRUFBRSxJQUFJNjFDLEdBQUd4cUMsRUFBRTBKLEVBQUV0TCxFQUFFLENBQUMsTUFBTXdzQyxHQUFHcDdCLFlBQVl4UCxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHQyxLQUFLaTJDLFFBQVFuaEMsRUFBRTlVLEtBQUswMEMsU0FBSSxFQUFPMTBDLEtBQUtzckMsV0FBVSxFQUFHdHJDLEtBQUtrMkMsUUFBTyxFQUFHbDJDLEtBQUtvdkMsT0FBTyxJQUFJUixHQUFHeGpDLEdBQUcsS0FBS3BMLEtBQUtrMkMsU0FBU2wyQyxLQUFLazJDLFFBQU8sRUFBR3ZCLEdBQUczMEMsTUFBTSxJQUFJQSxLQUFLb3ZDLE9BQU9hLFNBQVNqd0MsS0FBS0EsS0FBS292QyxPQUFPL0IsT0FBT3J0QyxLQUFLbTJDLFlBQVlwMkMsRUFBRUMsS0FBS3EwQyxlQUFlN3FDLENBQUMsQ0FBS3ZFLFlBQVEsTUFBTW1HLEVBQUV5bEMsR0FBRzd3QyxNQUFNLE9BQU95MEMsR0FBR3JwQyxJQUFJQSxFQUFFOHFDLFFBQVE5cUMsRUFBRStxQyxhQUFhL3FDLEVBQUU4cUMsUUFBTyxFQUFHOXFDLEVBQUU2cEMsT0FBTzdwQyxFQUFFZ2tDLE9BQU8zQixPQUFPcmlDLEVBQUU2cEMsTUFBTSxDQUFLaHdDLFVBQU1tRyxHQUFHcEwsS0FBS2kyQyxRQUFRN3FDLEVBQUUsRUFBRSxNQUFNZ3JDLEdBQUcsR0FBRyxTQUFTQyxHQUFHanJDLEtBQUswSixHQUFHMjZCLEtBQUssTUFBTWptQyxFQUFFNHNDLEdBQUduMUMsT0FBT20xQyxHQUFHQSxHQUFHbjFDLE9BQU8sR0FBR3ExQyxVQUFVLEtBQUt2MkMsRUFBRXlKLEdBQUdBLEVBQUUrc0MsV0FBV25sQyxPQUFPb2xDLFlBQVl2a0IsRUFBRSxXQUFXLElBQUk3bUIsRUFBRWdyQyxHQUFHQSxHQUFHbjFDLE9BQU8sR0FBRyxJQUFJbUssRUFBRSxNQUFNLEdBQUcsTUFBTTBKLEVBQUUsR0FBRyxLQUFLMUosR0FBRyxDQUFDLE1BQU01QixFQUFFc0wsRUFBRSxHQUFHdEwsR0FBR0EsRUFBRWl0QyxRQUFRcnJDLEVBQUU1QixFQUFFa3RDLGVBQWU1aEMsRUFBRTVLLEtBQUssQ0FBQ3VzQyxNQUFNcnJDLEVBQUVzckMsYUFBYSxJQUFJLE1BQU0zMkMsRUFBRXFMLEVBQUVrckMsV0FBV2xyQyxFQUFFa3JDLFVBQVU1K0IsT0FBT3RNLEVBQUVyTCxHQUFHQSxFQUFFMDJDLEtBQUssQ0FBQyxPQUFPM2hDLENBQUMsQ0FBL00sR0FBbU4sR0FBRy9VLEVBQUU0MkMsR0FBRzUyQyxFQUFFeUosRUFBRSxHQUFHLENBQUM0QixFQUFFMEosRUFBRWpRLEtBQUssSUFBSTJFLEdBQUdBLEVBQUVvdEMsTUFBTTNrQixFQUFFdnRCLEtBQUssRUFBRSt4QyxNQUFNcnJDLEtBQU0sT0FBTXlyQyxHQUFHcnRDLEVBQUU0QixFQUFFMUYsV0FBV2IsS0FBSyxNQUFNb3RCLFFBQVEsQ0FBQyxNQUFNem9CLEVBQUUsQ0FBRSxlQUFjNEIsT0FBTzBKLEdBQUdtZCxFQUFFaHhCLFFBQVF1SSxFQUFFVSxLQUFLLFFBQVEsU0FBU2tCLEdBQUcsTUFBTTBKLEVBQUUsR0FBRyxPQUFPMUosRUFBRXFGLFNBQVMsQ0FBQ3JGLEVBQUU1QixLQUFLc0wsRUFBRTVLLFFBQVEsSUFBSVYsRUFBRSxHQUFHLENBQUMsU0FBUyxVQUFVaXRDLE1BQU1yckMsRUFBRXNyQyxhQUFhNWhDLElBQUksTUFBTXRMLEVBQUVzTCxFQUFFLEVBQUcsUUFBT0EscUJBQXFCLEdBQUcvVSxFQUFHLFFBQU84MkMsR0FBR3pyQyxFQUFFa3JDLFVBQVVsckMsRUFBRTFGLE9BQU8wRixFQUFFa3JDLFdBQVcsTUFBTWxyQyxFQUFFa3JDLFVBQVU1K0IsVUFBVXVhLEVBQUUsSUFBSXpvQixFQUFFLE9BQU80QixFQUFFMHJDLE1BQU0sQ0FBQy8yQyxLQUFLZzNDLEdBQUczckMsRUFBRTByQyxPQUFPN2tCLEdBQUcsQ0FBQ2x5QixFQUFFa3lCLEdBQXpNLENBQTZNN21CLEdBQUcsSUFBSTBKLEVBQWxTLENBQXFTbWQsSUFBSWh1QixRQUFRTSxRQUFRaUYsRUFBRSxDQUFDa21DLElBQUksQ0FBQyxTQUFTcUgsR0FBRzNyQyxHQUFHLE1BQU0wSixFQUFFLEdBQUd0TCxFQUFFZ0osT0FBTzA0QixLQUFLOS9CLEdBQUcsT0FBTzVCLEVBQUU1QixNQUFNLEVBQUUsR0FBRzZJLFNBQVNqSCxJQUFJc0wsRUFBRTVLLFFBQVE4c0MsR0FBR3h0QyxFQUFFNEIsRUFBRTVCLElBQUksSUFBSUEsRUFBRXZJLE9BQU8sR0FBRzZULEVBQUU1SyxLQUFLLFFBQVE0SyxDQUFDLENBQUMsU0FBU2tpQyxHQUFHNXJDLEVBQUUwSixFQUFFdEwsR0FBRyxPQUFPbWhDLEdBQUU3MUIsSUFBSUEsRUFBRWpHLEtBQUs2RSxVQUFVb0IsR0FBR3RMLEVBQUVzTCxFQUFFLENBQUUsR0FBRTFKLEtBQUswSixNQUFNLGlCQUFpQkEsR0FBRyxrQkFBa0JBLEdBQUcsTUFBTUEsRUFBRXRMLEVBQUVzTCxFQUFFLENBQUUsR0FBRTFKLEtBQUswSixLQUFLczhCLEdBQUd0OEIsSUFBSUEsRUFBRWtpQyxHQUFHNXJDLEVBQUV5bEMsR0FBRy83QixFQUFFN1AsUUFBTyxHQUFJdUUsRUFBRXNMLEVBQUUsQ0FBRSxHQUFFMUosU0FBUzBKLEVBQUUsTUFBTXMyQixHQUFFdDJCLEdBQUcsQ0FBRSxHQUFFMUosT0FBTzBKLEVBQUUvSSxLQUFNLElBQUcrSSxFQUFFL0ksUUFBUSxPQUFPK0ksRUFBRSs3QixHQUFHLzdCLEdBQUd0TCxFQUFFc0wsRUFBRSxDQUFFLEdBQUUxSixLQUFLMEosR0FBRyxDQUFDLFNBQVM2aEMsR0FBR3ZyQyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLElBQUlreUIsRUFBRSxJQUFJQSxFQUFFbHlCLEVBQUVxTCxLQUFLckwsR0FBR3FMLEdBQXNCLENBQWxCLE1BQU1yQyxHQUFHa3VDLEdBQUdsdUMsRUFBRStMLEVBQUV0TCxFQUFFLENBQUMsT0FBT3lvQixDQUFDLENBQUMsU0FBU2lsQixHQUFHOXJDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUcsR0FBR3FyQyxHQUFFaGdDLEdBQUcsQ0FBQyxNQUFNNm1CLEVBQUUwa0IsR0FBR3ZyQyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE9BQU9reUIsR0FBR2dhLEdBQUVoYSxJQUFJQSxFQUFFcmdCLE9BQU94RyxJQUFJNnJDLEdBQUc3ckMsRUFBRTBKLEVBQUV0TCxFQUFFLElBQUl5b0IsQ0FBQyxDQUFDLE1BQU1BLEVBQUUsR0FBRyxJQUFJLElBQUlscEIsRUFBRSxFQUFFQSxFQUFFcUMsRUFBRW5LLE9BQU84SCxJQUFJa3BCLEVBQUUvbkIsS0FBS2d0QyxHQUFHOXJDLEVBQUVyQyxHQUFHK0wsRUFBRXRMLEVBQUV6SixJQUFJLE9BQU9reUIsQ0FBQyxDQUFDLFNBQVNnbEIsR0FBRzdyQyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFFLEdBQUksR0FBRytVLEVBQUUsQ0FBQyxJQUFJL1UsRUFBRStVLEVBQUU0QyxPQUFPLE1BQU11YSxFQUFFbmQsRUFBRThoQyxNQUFNN3RDLEVBQUVTLEVBQUUsS0FBS3pKLEdBQUcsQ0FBQyxNQUFNK1UsRUFBRS9VLEVBQUVvM0MsR0FBRyxHQUFHcmlDLEVBQUUsSUFBSSxJQUFJdEwsRUFBRSxFQUFFQSxFQUFFc0wsRUFBRTdULE9BQU91SSxJQUFJLElBQUcsSUFBS3NMLEVBQUV0TCxHQUFHNEIsRUFBRTZtQixFQUFFbHBCLEdBQUcsT0FBT2hKLEVBQUVBLEVBQUUyWCxNQUFNLENBQUMsTUFBTXpSLEVBQUU2TyxFQUFFeWhDLFdBQVdubEMsT0FBT2dtQyxhQUFhLEdBQUdueEMsRUFBRSxZQUFZMHdDLEdBQUcxd0MsRUFBRSxLQUFLLEdBQUcsQ0FBQ21GLEVBQUU2bUIsRUFBRWxwQixHQUFHLEVBQUUsU0FBU3FDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUUsR0FBSWtFLFFBQVFDLE1BQU1rSCxFQUFHLENBQXRDLENBQXVDQSxFQUFFLEVBQUUsRUFBRXJMLEVBQUUsQ0FBQyxJQUFJczNDLElBQUcsRUFBR0MsSUFBRyxFQUFHLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxHQUFHLEVBQUUsTUFBTWxzQyxHQUFHLEdBQUcsSUFBSW1zQyxHQUFHLEtBQUtDLEdBQUcsRUFBRSxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsR0FBRyxLQUFLQyxHQUFHLEVBQUUsTUFBTUMsR0FBR3R1QixRQUFRRixVQUFVLElBQUl5dUIsR0FBRyxLQUFLNTJDLEdBQUcsS0FBSyxTQUFTNjJDLEdBQUc1c0MsR0FBRyxNQUFNMEosRUFBRWlqQyxJQUFJRCxHQUFHLE9BQU8xc0MsRUFBRTBKLEVBQUV0RCxLQUFLeFIsS0FBS29MLEVBQUUrWSxLQUFLbmtCLE1BQU1vTCxHQUFHMEosQ0FBQyxDQUFDLFNBQVNtakMsR0FBRzdzQyxHQUFHbXNDLEdBQUd0MkMsUUFBUXMyQyxHQUFHNW1DLFNBQVN2RixFQUFFaXNDLElBQUlqc0MsRUFBRStrQyxhQUFhcUgsR0FBRyxFQUFFQSxLQUFLcHNDLElBQUlqSyxLQUFLLE1BQU1pSyxFQUFFRyxHQUFHZ3NDLEdBQUdydEMsS0FBS2tCLEdBQUdtc0MsR0FBRzFMLE9BQU8sU0FBU3pnQyxHQUFHLElBQUkwSixFQUFFMGlDLEdBQUcsRUFBRWh1QyxFQUFFK3RDLEdBQUd0MkMsT0FBTyxLQUFLNlQsRUFBRXRMLEdBQUcsQ0FBQyxNQUFNekosRUFBRStVLEVBQUV0TCxJQUFJLEVBQUUwdUMsR0FBR1gsR0FBR3gzQyxJQUFJcUwsRUFBRTBKLEVBQUUvVSxFQUFFLEVBQUV5SixFQUFFekosQ0FBQyxDQUFDLE9BQU8rVSxDQUFDLENBQTVGLENBQThGMUosRUFBRUcsSUFBSSxFQUFFSCxHQUFHK3NDLEtBQUssQ0FBQyxTQUFTQSxLQUFLZCxJQUFJQyxLQUFLQSxJQUFHLEVBQUdTLEdBQUdELEdBQUd0bUMsS0FBSzRtQyxJQUFJLENBQUMsU0FBU0MsR0FBR2p0QyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHMnFDLEdBQUV0L0IsR0FBRzVCLEVBQUVVLFFBQVFrQixHQUFHMEosR0FBR0EsRUFBRW5FLFNBQVN2RixFQUFFQSxFQUFFK2tDLGFBQWFwd0MsRUFBRSxFQUFFQSxJQUFJeUosRUFBRVUsS0FBS2tCLEdBQUcrc0MsSUFBSSxDQUFDLFNBQVNHLEdBQUdsdEMsR0FBR2l0QyxHQUFHanRDLEVBQUV3c0MsR0FBR0QsR0FBR0UsR0FBRyxDQUFDLFNBQVNVLEdBQUdudEMsRUFBRTBKLEVBQUUsTUFBTSxHQUFHeEosR0FBR3JLLE9BQU8sQ0FBQyxJQUFJRSxHQUFHMlQsRUFBRTJpQyxHQUFHLElBQUksSUFBSXhKLElBQUkzaUMsS0FBS0EsR0FBR3JLLE9BQU8sRUFBRXkyQyxHQUFHLEVBQUVBLEdBQUdELEdBQUd4MkMsT0FBT3kyQyxLQUFLRCxHQUFHQyxNQUFNRCxHQUFHLEtBQUtDLEdBQUcsRUFBRXYyQyxHQUFHLEtBQUtvM0MsR0FBR250QyxFQUFFMEosRUFBRSxDQUFDLENBQUMsU0FBUzBqQyxHQUFHcHRDLEdBQUcsR0FBR210QyxLQUFLWixHQUFHMTJDLE9BQU8sQ0FBQyxNQUFNbUssRUFBRSxJQUFJLElBQUk2aUMsSUFBSTBKLEtBQUssR0FBR0EsR0FBRzEyQyxPQUFPLEVBQUUyMkMsR0FBRyxZQUFZQSxHQUFHMXRDLFFBQVFrQixHQUFHLElBQUl3c0MsR0FBR3hzQyxFQUFFd3NDLEdBQUc1akIsTUFBTSxDQUFDNW9CLEVBQUUwSixJQUFJb2pDLEdBQUc5c0MsR0FBRzhzQyxHQUFHcGpDLEtBQUsraUMsR0FBRyxFQUFFQSxHQUFHRCxHQUFHMzJDLE9BQU80MkMsS0FBS0QsR0FBR0MsTUFBTUQsR0FBRyxLQUFLQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU1LLEdBQUc5c0MsR0FBRyxNQUFNQSxFQUFFRyxHQUFHLElBQUlILEVBQUVHLEdBQUcsU0FBUzZzQyxHQUFHaHRDLEdBQUdrc0MsSUFBRyxFQUFHRCxJQUFHLEVBQUdrQixHQUFHbnRDLEdBQUdtc0MsR0FBR3ZqQixNQUFNLENBQUM1b0IsRUFBRTBKLElBQUlvakMsR0FBRzlzQyxHQUFHOHNDLEdBQUdwakMsS0FBSyxJQUFJLElBQUkwaUMsR0FBRyxFQUFFQSxHQUFHRCxHQUFHdDJDLE9BQU91MkMsS0FBSyxDQUFDLE1BQU1wc0MsRUFBRW1zQyxHQUFHQyxJQUFJcHNDLElBQUcsSUFBS0EsRUFBRWlpQyxRQUFRc0osR0FBR3ZyQyxFQUFFLEtBQUssR0FBRyxDQUFzRixDQUE3RSxRQUFDb3NDLEdBQUcsRUFBRUQsR0FBR3QyQyxPQUFPLEVBQUV1M0MsS0FBS25CLElBQUcsRUFBR1UsR0FBRyxNQUFNUixHQUFHdDJDLFFBQVFxSyxHQUFHckssUUFBUTAyQyxHQUFHMTJDLFNBQVNtM0MsR0FBR2h0QyxFQUFFLENBQUMsQ0FBQyxJQUFJcXRDLEdBQUdDLEdBQUcsR0FBRyxTQUFTQyxHQUFHdnRDLEVBQUUwSixHQUFHLElBQUl0TCxFQUFFekosRUFBSzA0QyxHQUFHcnRDLEVBQUVxdEMsSUFBR0EsR0FBR2h3QyxTQUFRLEVBQUdpd0MsR0FBR2pvQyxTQUFTLEVBQUVnRyxNQUFNckwsRUFBRXliLEtBQUsvUixLQUFLMmpDLEdBQUdob0IsS0FBS3JsQixLQUFLMEosS0FBSzRqQyxHQUFHLElBQVcsb0JBQW9CL3NDLFFBQVFBLE9BQU9pdEMsZUFBZSxRQUFRNzRDLEVBQUUsUUFBUXlKLEVBQUVtQyxPQUFPa3RDLGlCQUFZLElBQVNydkMsT0FBRSxFQUFPQSxFQUFFc3ZDLGlCQUFZLElBQVMvNEMsT0FBRSxFQUFPQSxFQUFFNFEsU0FBUyxZQUFZbUUsRUFBRWlrQyw2QkFBNkJqa0MsRUFBRWlrQyw4QkFBOEIsSUFBSTd1QyxNQUFNa0IsSUFBSXV0QyxHQUFHdnRDLEVBQUUwSixFQUFFLElBQUl4RCxZQUFZLEtBQUttbkMsS0FBSzNqQyxFQUFFaWtDLDZCQUE2QixLQUFLTCxHQUFHLEdBQUcsR0FBRyxNQUFVQSxHQUFHLEVBQUUsQ0FBQyxTQUFTTSxHQUFHNXRDLEVBQUUwSixLQUFLdEwsR0FBRyxHQUFHNEIsRUFBRTZ0QyxZQUFZLE9BQU8sTUFBTWw1QyxFQUFFcUwsRUFBRXFyQyxNQUFNSyxPQUFPcEwsR0FBRSxJQUFJelosRUFBRXpvQixFQUFFLE1BQU1ULEVBQUUrTCxFQUFFODJCLFdBQVcsV0FBVzNsQyxFQUFFOEMsR0FBRytMLEVBQUVsTixNQUFNLEdBQUcsR0FBRzNCLEdBQUdBLEtBQUtsRyxFQUFFLENBQUMsTUFBTXFMLEVBQUcsR0FBRSxlQUFlbkYsRUFBRSxRQUFRQSxjQUFjaWIsT0FBT3BNLEVBQUVsRSxLQUFLN0gsR0FBR2hKLEVBQUVxTCxJQUFJc2dDLEdBQUUzaUMsSUFBSWtwQixFQUFFem9CLEVBQUU5RSxLQUFLMEcsR0FBR0EsRUFBRXdGLFVBQVVrRSxJQUFJbWQsRUFBRXpvQixFQUFFOUUsSUFBSXVvQyxJQUFHLENBQUMsSUFBSXJDLEVBQUVFLEVBQUUvcUMsRUFBRTZxQyxFQUFFOEIsR0FBRTUzQixLQUFLL1UsRUFBRTZxQyxFQUFFOEIsR0FBRW5FLEdBQUV6ekIsTUFBTWcyQixHQUFHL2hDLElBQUkraEMsRUFBRS9xQyxFQUFFNnFDLEVBQUU4QixHQUFFRixHQUFFMTNCLE1BQU1nMkIsR0FBR29NLEdBQUdwTSxFQUFFMS9CLEVBQUUsRUFBRTZtQixHQUFHLE1BQU16YyxFQUFFelYsRUFBRTZxQyxFQUFFLFFBQVEsR0FBR3AxQixFQUFFLENBQUMsR0FBR3BLLEVBQUU4dEMsU0FBUyxHQUFHOXRDLEVBQUU4dEMsUUFBUXRPLEdBQUcsWUFBWXgvQixFQUFFOHRDLFFBQVEsR0FBRzl0QyxFQUFFOHRDLFFBQVF0TyxJQUFHLEVBQUdzTSxHQUFHMWhDLEVBQUVwSyxFQUFFLEVBQUU2bUIsRUFBRSxDQUFDLENBQUMsU0FBU2tuQixHQUFHL3RDLEVBQUUwSixFQUFFdEwsR0FBRSxHQUFJLE1BQU16SixFQUFFK1UsRUFBRXNrQyxXQUFXbm5CLEVBQUVseUIsRUFBRWtnQixJQUFJN1UsR0FBRyxRQUFHLElBQVM2bUIsRUFBRSxPQUFPQSxFQUFFLE1BQU1scEIsRUFBRXFDLEVBQUVpdUMsTUFBTSxJQUFJcHpDLEVBQUUsQ0FBRSxFQUFDMmtDLEdBQUUsRUFBRyxJQUFJUSxHQUFFaGdDLEdBQUcsQ0FBQyxNQUFNckwsRUFBRXFMLElBQUksTUFBTTVCLEVBQUUydkMsR0FBRy90QyxFQUFFMEosR0FBRSxHQUFJdEwsSUFBSW9oQyxHQUFFLEVBQUd4MEIsR0FBRW5RLEVBQUV1RCxHQUFHLEdBQUdBLEdBQUdzTCxFQUFFd2tDLE9BQU9yNEMsUUFBUTZULEVBQUV3a0MsT0FBTzdvQyxRQUFRMVEsR0FBR3FMLEVBQUVtdUMsU0FBU3g1QyxFQUFFcUwsRUFBRW11QyxTQUFTbnVDLEVBQUVrdUMsUUFBUWx1QyxFQUFFa3VDLE9BQU83b0MsUUFBUTFRLEVBQUUsQ0FBQyxPQUFPZ0osR0FBRzZoQyxHQUFHRixHQUFFM2hDLEdBQUdBLEVBQUUwSCxTQUFTckYsR0FBR25GLEVBQUVtRixHQUFHLE9BQU9nTCxHQUFFblEsRUFBRThDLEdBQUdoSixFQUFFNFMsSUFBSXZILEVBQUVuRixHQUFHQSxJQUFJbEcsRUFBRTRTLElBQUl2SCxFQUFFLE1BQU0sS0FBSyxDQUFDLFNBQVNvdUMsR0FBR3B1QyxFQUFFMEosR0FBRyxTQUFTMUosSUFBSW5DLEdBQUU2TCxNQUFNQSxFQUFFQSxFQUFFbE4sTUFBTSxHQUFHaEgsUUFBUSxRQUFRLElBQUltckMsR0FBRTNnQyxFQUFFMEosRUFBRSxHQUFHaE8sY0FBY2dPLEVBQUVsTixNQUFNLEtBQUtta0MsR0FBRTNnQyxFQUFFb2hDLEdBQUUxM0IsS0FBS2kzQixHQUFFM2dDLEVBQUUwSixHQUFHLENBQUMsSUFBSTJrQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxHQUFHdnVDLEdBQUcsTUFBTTBKLEVBQUUya0MsR0FBRyxPQUFPQSxHQUFHcnVDLEVBQUVzdUMsR0FBR3R1QyxHQUFHQSxFQUFFMUYsS0FBS2swQyxXQUFXLEtBQUs5a0MsQ0FBQyxDQUFDLFNBQVMra0MsR0FBR3p1QyxHQUFHc3VDLEdBQUd0dUMsQ0FBQyxDQUFDLFNBQVMwdUMsS0FBS0osR0FBRyxJQUFJLENBQUMsTUFBTUssR0FBRzN1QyxHQUFHNHVDLEdBQUcsU0FBU0EsR0FBRzV1QyxFQUFFMEosRUFBRTJrQyxHQUFHandDLEdBQUcsSUFBSXNMLEVBQUUsT0FBTzFKLEVBQUUsR0FBR0EsRUFBRW90QyxHQUFHLE9BQU9wdEMsRUFBRSxNQUFNckwsRUFBRSxJQUFJeUosS0FBS3pKLEVBQUVrNkMsSUFBSUMsSUFBSSxHQUFHLE1BQU1qb0IsRUFBRTBuQixHQUFHN2tDLEdBQUcvTCxFQUFFcUMsS0FBSzVCLEdBQUcsT0FBT213QyxHQUFHMW5CLEdBQUdseUIsRUFBRWs2QyxJQUFJQyxHQUFHLEdBQUdueEMsQ0FBQyxFQUFFLE9BQU9oSixFQUFFeTRDLElBQUcsRUFBR3o0QyxFQUFFbzZDLElBQUcsRUFBR3A2QyxFQUFFazZDLElBQUcsRUFBR2w2QyxDQUFDLENBQUMsU0FBU3E2QyxHQUFHaHZDLEdBQUcsTUFBTTFGLEtBQUtvUCxFQUFFMmhDLE1BQU1qdEMsRUFBRW90QyxNQUFNNzJDLEVBQUVzNkMsVUFBVXBvQixFQUFFNmtCLE1BQU0vdEMsRUFBRXV4QyxjQUFjcjBDLEdBQUdzMEMsTUFBTTNQLEVBQUU0UCxNQUFNMVAsRUFBRXJhLEtBQUtqYixFQUFFOG1CLE9BQU85RSxFQUFFaWpCLFlBQVk5MUMsRUFBRUwsS0FBS3ltQyxFQUFFMlAsV0FBV3B3QyxFQUFFcXdDLElBQUk5b0IsRUFBRStvQixhQUFhL3VCLEdBQUd6Z0IsRUFBRSxJQUFJaWdDLEVBQUVLLEVBQUUsTUFBTW54QixFQUFFby9CLEdBQUd2dUMsR0FBRyxJQUFJLEdBQUcsRUFBRTVCLEVBQUVxeEMsVUFBVSxDQUFDLE1BQU16dkMsRUFBRTZtQixHQUFHbHlCLEVBQUVzckMsRUFBRXlQLEdBQUd0akIsRUFBRXJkLEtBQUsvTyxFQUFFQSxFQUFFekcsRUFBRW9FLEVBQUV1QixFQUFFeWdDLEVBQUVsWixJQUFJNlosRUFBRVosQ0FBQyxLQUFLLENBQWFPLEVBQUV5UCxHQUFOaG1DLEVBQVcvTCxFQUFYK0wsRUFBZTdULE9BQU8sRUFBRSxDQUFDdTVDLE1BQU0xUCxFQUFFeVAsTUFBTTNQLEVBQUVuYSxLQUFLamIsR0FBRyxPQUFPazJCLEVBQUU1MkIsRUFBRWdpQyxNQUFNaE0sRUFBRWlRLEdBQUdqUSxFQUFFLENBQXlDLENBQXZDLE1BQU1yMUIsR0FBR3VsQyxHQUFHLzVDLE9BQU8sRUFBRWcyQyxHQUFHeGhDLEVBQUVySyxFQUFFLEdBQUdpZ0MsRUFBRTRQLEdBQUdDLEdBQUcsQ0FBQyxJQUFJNVQsRUFBRStELEVBQUUsR0FBR0ssSUFBRyxJQUFLN2YsRUFBRSxDQUFDLE1BQU16Z0IsRUFBRW9ILE9BQU8wNEIsS0FBS1EsSUFBSW1QLFVBQVUvbEMsR0FBR3d5QixFQUFFbDhCLEVBQUVuSyxRQUFRLEVBQUU2VCxJQUFJN08sR0FBR21GLEVBQUU2a0IsS0FBSzBiLE1BQUtELEVBQUV5UCxHQUFHelAsRUFBRXpsQyxJQUFJcWhDLEVBQUU4VCxHQUFHOVQsRUFBRW9FLEdBQUcsQ0FBQyxPQUFPbGlDLEVBQUU2eEMsT0FBTy9ULEVBQUU4VCxHQUFHOVQsR0FBR0EsRUFBRStULEtBQUsvVCxFQUFFK1QsS0FBSy9ULEVBQUUrVCxLQUFLQyxPQUFPOXhDLEVBQUU2eEMsTUFBTTd4QyxFQUFFNnhDLE1BQU03eEMsRUFBRTRxQixhQUFha1QsRUFBRWxULFdBQVc1cUIsRUFBRTRxQixZQUFZaVgsRUFBRS9ELEVBQUVxUyxHQUFHcC9CLEdBQUc4d0IsQ0FBQyxDQUFDLE1BQU0wUCxHQUFHM3ZDLElBQUksSUFBSTBKLEVBQUUsSUFBSSxNQUFNdEwsS0FBSzRCLEdBQUcsVUFBVTVCLEdBQUcsVUFBVUEsR0FBR1AsR0FBRU8sT0FBT3NMLElBQUlBLEVBQUUsS0FBS3RMLEdBQUc0QixFQUFFNUIsSUFBSSxPQUFPc0wsQ0FBQyxFQUFFcW1DLEdBQUcsQ0FBQy92QyxFQUFFMEosS0FBSyxNQUFNdEwsRUFBRSxDQUFBLEVBQUcsSUFBSSxNQUFNekosS0FBS3FMLEVBQUV1Z0MsR0FBRTVyQyxJQUFJQSxFQUFFNkgsTUFBTSxLQUFLa04sSUFBSXRMLEVBQUV6SixHQUFHcUwsRUFBRXJMLElBQUksT0FBT3lKLENBQUMsRUFBRSxTQUFTK3hDLEdBQUdud0MsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU16SixFQUFFeVMsT0FBTzA0QixLQUFLcDJCLEdBQUcsR0FBRy9VLEVBQUVrQixTQUFTdVIsT0FBTzA0QixLQUFLOS9CLEdBQUduSyxPQUFPLE9BQU0sRUFBRyxJQUFJLElBQUlneEIsRUFBRSxFQUFFQSxFQUFFbHlCLEVBQUVrQixPQUFPZ3hCLElBQUksQ0FBQyxNQUFNbHBCLEVBQUVoSixFQUFFa3lCLEdBQUcsR0FBR25kLEVBQUUvTCxLQUFLcUMsRUFBRXJDLEtBQUt5d0MsR0FBR2h3QyxFQUFFVCxHQUFHLE9BQU0sQ0FBRSxDQUFDLE9BQU0sQ0FBRSxDQUFDLFNBQVN5eUMsSUFBSS9FLE1BQU1yckMsRUFBRXNNLE9BQU81QyxHQUFHdEwsR0FBRyxLQUFLc0wsR0FBR0EsRUFBRTJtQyxVQUFVcndDLElBQUlBLEVBQUUwSixFQUFFMmhDLE9BQU92aUMsR0FBRzFLLEVBQUVzTCxFQUFFQSxFQUFFNEMsTUFBTSxDQUFDLE1BQU1na0MsR0FBR3R3QyxHQUFHQSxFQUFFdXdDLGFBQWFDLEdBQUcsQ0FBQzd2QyxLQUFLLFdBQVc0dkMsY0FBYSxFQUFHRSxRQUFRendDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxFQUFFdDFCLEdBQUcsTUFBTXBLLEVBQUUsU0FBU0EsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEdBQUcsTUFBTW5tQyxFQUFFNlEsRUFBRXpWLEdBQUdxVSxjQUFjb2pCLElBQUlzVCxFQUFFbm1DLEVBQUU2eUIsRUFBRSxPQUFPdVQsRUFBRTMvQixFQUFFMHdDLFNBQVNDLEdBQUczd0MsRUFBRTZtQixFQUFFbHlCLEVBQUUrVSxFQUFFblEsRUFBRTZFLEVBQUVULEVBQUU5QyxFQUFFMmtDLEVBQUVFLEdBQUd0MUIsRUFBRSxLQUFLdTFCLEVBQUVpUixjQUFjNXdDLEVBQUU2d0MsVUFBVXQzQyxFQUFFLEtBQUs1RSxFQUFFZ3JDLEVBQUVoaUMsRUFBRTlDLEdBQUc4a0MsRUFBRStELEtBQUssR0FBR29OLEdBQUc5d0MsRUFBRSxhQUFhOHdDLEdBQUc5d0MsRUFBRSxjQUFjb0ssRUFBRSxLQUFLcEssRUFBRSt3QyxXQUFXcm5DLEVBQUV0TCxFQUFFekosRUFBRSxLQUFLZ0osRUFBRTlDLEdBQUdtMkMsR0FBR3JSLEVBQUUzL0IsRUFBRSt3QyxhQUFhcFIsRUFBRXpoQixTQUFTLENBQWxSLENBQW9SeFUsRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsRUFBRXQxQixHQUFHLFNBQVNwSyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsR0FBR2ptQyxFQUFFbW1DLEVBQUVocUIsR0FBR3RMLEVBQUV6VixHQUFHcVUsY0FBY29qQixLQUFLLE1BQU03eUIsRUFBRW1RLEVBQUVnbkMsU0FBUzF3QyxFQUFFMHdDLFNBQVNuM0MsRUFBRTh4QyxNQUFNM2hDLEVBQUVBLEVBQUVaLEdBQUc5SSxFQUFFOEksR0FBRyxNQUFNNjJCLEVBQUVqMkIsRUFBRW1uQyxVQUFVM3hDLEVBQUV3SyxFQUFFcW5DLFlBQVlFLGFBQWF4cUIsRUFBRW1xQixjQUFjbndCLEVBQUV5d0IsYUFBYWpSLEVBQUVrUixZQUFZN1EsR0FBRy9tQyxFQUFFLEdBQUdrbkIsRUFBRWxuQixFQUFFcTNDLGNBQWNqUixFQUFFeVIsR0FBR3pSLEVBQUVsZixJQUFJaWYsRUFBRWpmLEVBQUVrZixFQUFFcG1DLEVBQUU4M0MsZ0JBQWdCLEtBQUt4cUIsRUFBRXR0QixFQUFFb0UsRUFBRTlDLEVBQUUya0MsR0FBR2ptQyxFQUFFbXFDLE1BQU0sRUFBRW5xQyxFQUFFMmtCLFVBQVUraEIsSUFBSVAsRUFBRWpaLEVBQUV2bkIsRUFBRWQsRUFBRXpKLEVBQUVreUIsRUFBRSxLQUFLbHBCLEVBQUU5QyxFQUFFMmtDLEdBQUd3UixHQUFHejNDLEVBQUUyRixNQUFNM0YsRUFBRSszQyxZQUFZaFIsR0FBRy9tQyxFQUFFNDNDLGFBQVksRUFBRzUzQyxFQUFFMDNDLGFBQWF4d0IsR0FBR3JXLEVBQUVxVyxFQUFFb0csRUFBRXR0QixHQUFHQSxFQUFFbXFDLEtBQUssRUFBRW5xQyxFQUFFMm9DLFFBQVFyc0MsT0FBTyxFQUFFMEQsRUFBRTgzQyxnQkFBZ0JqbEIsRUFBRSxPQUFPNlQsR0FBR1AsRUFBRSxLQUFLQyxFQUFFcG1DLEVBQUU4M0MsZ0JBQWdCLEtBQUt4cUIsRUFBRXR0QixFQUFFb0UsRUFBRTlDLEVBQUUya0MsR0FBR2ptQyxFQUFFbXFDLE1BQU0sRUFBRW5xQyxFQUFFMmtCLFdBQVd3aEIsRUFBRWpaLEVBQUV2bkIsRUFBRWQsRUFBRXpKLEVBQUVreUIsRUFBRSxLQUFLbHBCLEVBQUU5QyxFQUFFMmtDLEdBQUd3UixHQUFHejNDLEVBQUUyRixLQUFLdW5CLEdBQUcycUIsR0FBR3pSLEVBQUVsWixJQUFJaVosRUFBRWpaLEVBQUVrWixFQUFFdmhDLEVBQUV6SixFQUFFa3lCLEVBQUV0dEIsRUFBRW9FLEVBQUU5QyxFQUFFMmtDLEdBQUdqbUMsRUFBRTJrQixTQUFRLEtBQU13aEIsRUFBRSxLQUFLQyxFQUFFcG1DLEVBQUU4M0MsZ0JBQWdCLEtBQUt4cUIsRUFBRXR0QixFQUFFb0UsRUFBRTlDLEVBQUUya0MsR0FBR2ptQyxFQUFFbXFDLE1BQU0sR0FBR25xQyxFQUFFMmtCLGlCQUFpQixHQUFHdUksR0FBRzJxQixHQUFHelIsRUFBRWxaLEdBQUdpWixFQUFFalosRUFBRWtaLEVBQUV2aEMsRUFBRXpKLEVBQUVreUIsRUFBRXR0QixFQUFFb0UsRUFBRTlDLEVBQUUya0MsR0FBR3dSLEdBQUd6M0MsRUFBRW9tQyxRQUFRLEdBQUdtUixHQUFHcG5DLEVBQUUsYUFBYW5RLEVBQUVxM0MsY0FBY2pSLEVBQUVwbUMsRUFBRSszQyxZQUFZNVIsRUFBRSxLQUFLQyxFQUFFcG1DLEVBQUU4M0MsZ0JBQWdCLEtBQUt4cUIsRUFBRXR0QixFQUFFb0UsRUFBRTlDLEVBQUUya0MsR0FBR2ptQyxFQUFFbXFDLE1BQU0sRUFBRW5xQyxFQUFFMmtCLGNBQWMsQ0FBQyxNQUFNcXpCLFFBQVF2eEMsRUFBRXN4QyxVQUFVNW5DLEdBQUduUSxFQUFFeUcsRUFBRSxFQUFFa0csWUFBWSxLQUFLM00sRUFBRSszQyxZQUFZNW5DLEdBQUduUSxFQUFFaTRDLFNBQVN0eUMsRUFBRSxHQUFHYyxHQUFHLElBQUlBLEdBQUd6RyxFQUFFaTRDLFNBQVN0eUMsRUFBRSxDQUFDLENBQWg4QixDQUFrOEJjLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWhzQixFQUFFMmtDLEVBQUVFLEVBQUV0MUIsRUFBRyxFQUFDcW5DLFFBQVEsU0FBU3p4QyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsR0FBRyxNQUFNdDFCLEVBQUVWLEVBQUVnbkMsU0FBU0MsR0FBR2puQyxFQUFFL1UsRUFBRXlKLEVBQUU0QixFQUFFMHhDLFdBQVczb0MsU0FBU0MsY0FBYyxPQUFPLEtBQUs2ZCxFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEdBQUUsR0FBSXBULEVBQUVzVCxFQUFFMS9CLEVBQUVvSyxFQUFFd21DLGNBQWNsbkMsRUFBRW1uQyxVQUFVenlDLEVBQUVnTSxFQUFFek0sRUFBRTlDLEdBQTJCLE9BQXhCLElBQUl1UCxFQUFFczVCLE1BQU10NUIsRUFBRThULFVBQWlCa08sQ0FBRSxFQUFDd04sT0FBTytXLEdBQUdnQixVQUFVLFNBQVMzeEMsR0FBRyxNQUFNeXZDLFVBQVUvbEMsRUFBRWtvQyxTQUFTeHpDLEdBQUc0QixFQUFFckwsRUFBRSxHQUFHK1UsRUFBRTFKLEVBQUU2d0MsVUFBVWdCLEdBQUdsOUMsRUFBRXlKLEVBQUUwekMsUUFBUTF6QyxHQUFHNEIsRUFBRSt3QyxXQUFXcDhDLEVBQUVrOUMsR0FBR3p6QyxFQUFFb3pDLFVBQVUzQixHQUFHQyxHQUFHLEdBQUcsU0FBU2dCLEdBQUc5d0MsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUU0QixFQUFFMHJDLE9BQU8xckMsRUFBRTByQyxNQUFNaGlDLEdBQUdzMkIsR0FBRTVoQyxJQUFJQSxHQUFHLENBQUMsU0FBU3V5QyxHQUFHM3dDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxFQUFFdDFCLEVBQUVnaUIsR0FBRSxHQUFJLE1BQU03eUIsRUFBRUEsRUFBRWtuQixFQUFFa2YsRUFBRWpxQixHQUFHeFcsRUFBRWQsRUFBRXFvQixFQUFFOXhCLEdBQUcrOEMsV0FBV2p4QixFQUFFM00sT0FBT21zQixJQUFJNzFCLEVBQUVrMkIsRUFBRXVCLEdBQUU3aEMsRUFBRTByQyxPQUFPMXJDLEVBQUUwckMsTUFBTTZGLFNBQVNwaUMsRUFBRSxDQUFDazhCLE1BQU1yckMsRUFBRXNNLE9BQU81QyxFQUFFcW9DLGdCQUFnQjN6QyxFQUFFNHpDLE1BQU1uM0MsRUFBRXc0QixVQUFVMStCLEVBQUUwOEMsZ0JBQWdCeHFCLEVBQUVvckIsT0FBT3QwQyxFQUFFK2xDLEtBQUssRUFBRTROLFVBQVUsRUFBRUMsUUFBUSxpQkFBaUJqUixFQUFFQSxHQUFHLEVBQUUyUSxhQUFhLEtBQUtMLGNBQWMsS0FBS00sY0FBYSxFQUFHQyxZQUFZL2tCLEVBQUV5aEIsYUFBWSxFQUFHM0wsUUFBUSxHQUFHaGtCLFFBQVFsZSxHQUFFLEdBQUksTUFBTXFyQyxNQUFNM2hDLEVBQUV1bkMsYUFBYTd5QyxFQUFFd3lDLGNBQWNqOEMsRUFBRTI4QyxVQUFVenFCLEVBQUVxYixRQUFRdmtDLEVBQUVvMEMsZ0JBQWdCbDNDLEVBQUV3NEIsVUFBVW1NLEdBQUdyd0IsRUFBRSxHQUFHQSxFQUFFZ2lDLFlBQVloaUMsRUFBRWdpQyxhQUFZLE9BQVEsSUFBSW54QyxFQUFFLENBQUMsTUFBTUEsRUFBRTVCLEdBQUd6SixFQUFFcTBCLFlBQVksV0FBV3IwQixFQUFFcTBCLFdBQVdrcEIsS0FBS2x5QyxJQUFJNUIsRUFBRTRxQixXQUFXbXBCLFdBQVcsS0FBS3RyQixJQUFJMVgsRUFBRW1pQyxXQUFXM1IsRUFBRWhyQyxFQUFFNnFDLEVBQUU5MUIsRUFBRSxFQUFFLEdBQUcsSUFBSXVvQyxPQUFPdm9DLEdBQUd5RixFQUFFL1EsSUFBSXNMLEVBQUUrYyxFQUFFcm9CLEdBQUdjLEVBQUVkLEVBQUV2RCxFQUFFc1UsR0FBRSxJQUFLblAsR0FBRzIvQixFQUFFaHJDLEVBQUU2cUMsRUFBRTkxQixFQUFFLEVBQUUsQ0FBQ3NuQyxHQUFHN2hDLEVBQUV4YSxHQUFHd2EsRUFBRXloQyxjQUFjLEtBQUt6aEMsRUFBRStoQyxjQUFhLEVBQUcsSUFBSXhSLEVBQUV2d0IsRUFBRTdDLE9BQU9sQyxHQUFFLEVBQUcsS0FBS3MxQixHQUFHLENBQUMsR0FBR0EsRUFBRWtSLGNBQWMsQ0FBQ2xSLEVBQUV3QyxRQUFRcGpDLFFBQVFuQixHQUFHeU0sR0FBRSxFQUFHLEtBQUssQ0FBQ3MxQixFQUFFQSxFQUFFcHpCLE1BQU0sQ0FBQ2xDLEdBQUc4aUMsR0FBR3Z2QyxHQUFHd1IsRUFBRSt5QixRQUFRLEdBQUc0TyxHQUFHcG5DLEVBQUUsWUFBYSxFQUFDOG5DLFNBQVN4eEMsR0FBRyxJQUFJbVAsRUFBRXloQyxjQUFjLE9BQU8sTUFBTXZGLE1BQU0zaEMsRUFBRXVuQyxhQUFhN3lDLEVBQUUyekMsZ0JBQWdCcDlDLEVBQUUwK0IsVUFBVXhNLEVBQUVtckIsTUFBTXIwQyxHQUFHd1IsRUFBRTJoQyxHQUFHcG5DLEVBQUUsY0FBYyxNQUFNN08sRUFBRTRyQixFQUFFcm9CLEdBQUdnTSxFQUFFLEtBQUsrRSxFQUFFK2hDLGVBQWUzM0MsRUFBRSxLQUFLeUcsRUFBRTZtQixFQUFFaHNCLEVBQUVsRyxFQUFFLEtBQUtnSixFQUFFNmhDLEVBQUVFLEdBQUdzUixHQUFHN2hDLEVBQUVuUCxHQUFHLEVBQUVvc0IsRUFBRXBzQixFQUFFZ3BCLFlBQVksV0FBV2hwQixFQUFFZ3BCLFdBQVdrcEIsS0FBSzlsQixJQUFJaHVCLEVBQUU0cUIsV0FBV21wQixXQUFXL25DLEdBQUcrRSxFQUFFK2hDLGNBQWEsRUFBR2h5QyxFQUFFZCxFQUFFekosRUFBRSxNQUFLLEdBQUl5M0IsR0FBR2hpQixHQUFJLEVBQUNnb0MsS0FBS3B5QyxFQUFFMEosRUFBRXRMLEdBQUcrUSxFQUFFOGhDLGNBQWN0UixFQUFFeHdCLEVBQUU4aEMsYUFBYWp4QyxFQUFFMEosRUFBRXRMLEdBQUcrUSxFQUFFa2tCLFVBQVVyekIsQ0FBRSxFQUFDK3lCLEtBQUssSUFBSTVqQixFQUFFOGhDLGNBQWN4cUIsRUFBRXRYLEVBQUU4aEMsY0FBY29CLFlBQVlyeUMsRUFBRTBKLEdBQUcsTUFBTXRMLElBQUkrUSxFQUFFeWhDLGNBQWN4eUMsR0FBRytRLEVBQUV1MEIsT0FBTyxNQUFNL3VDLEVBQUVxTCxFQUFFcXJDLE1BQU12aUMsR0FBRzlJLEVBQUVzeUMsU0FBUzlyQyxPQUFPa0QsSUFBSW1pQyxHQUFHbmlDLEVBQUUxSixFQUFFLEVBQUUsSUFBSW9HLE1BQU15Z0IsSUFBSSxHQUFHN21CLEVBQUU2dEMsYUFBYTErQixFQUFFMCtCLGFBQWExK0IsRUFBRW1pQyxZQUFZdHhDLEVBQUV1eUMsV0FBVyxPQUFPdnlDLEVBQUV3eUMsZUFBYyxFQUFHLE1BQU1uSCxNQUFNMXRDLEdBQUdxQyxFQUFFeXlDLEdBQUd6eUMsRUFBRTZtQixHQUFFLEdBQUlseUIsSUFBSWdKLEVBQUVtTCxHQUFHblUsR0FBRyxNQUFNNnFDLEdBQUc3cUMsR0FBR3FMLEVBQUVxd0MsUUFBUXZuQyxHQUFHWSxFQUFFMUosRUFBRXJDLEVBQUU4aUIsRUFBRTlyQixHQUFHcUwsRUFBRXF3QyxRQUFRdm5DLElBQUluVSxFQUFFLEtBQUs4eEIsRUFBRXptQixFQUFFcXdDLFNBQVNsaEMsRUFBRXRVLEVBQUU2a0MsR0FBR0YsR0FBR1MsRUFBRVQsR0FBRzRRLEdBQUdwd0MsRUFBRXJDLEVBQUVtTCxJQUFJMUssR0FBRyxLQUFLK1EsRUFBRXUwQixNQUFNdjBCLEVBQUUrTyxTQUFTLEdBQUksRUFBQ3cwQixRQUFRMXlDLEVBQUUwSixHQUFHeUYsRUFBRTArQixhQUFZLEVBQUcxK0IsRUFBRThoQyxjQUFjL3hDLEVBQUVpUSxFQUFFOGhDLGFBQWE3eUMsRUFBRTRCLEVBQUUwSixHQUFHeUYsRUFBRXloQyxlQUFlMXhDLEVBQUVpUSxFQUFFeWhDLGNBQWN4eUMsRUFBRTRCLEVBQUUwSixFQUFFLEdBQUcsT0FBT3lGLENBQUMsQ0FBQyxTQUFTMGlDLEdBQUc3eEMsR0FBRyxJQUFJMEosRUFBRSxHQUFHczJCLEdBQUVoZ0MsR0FBRyxDQUFDLE1BQU01QixFQUFFdTBDLElBQUkzeUMsRUFBRSt1QyxHQUFHM3dDLElBQUk0QixFQUFFNnVDLElBQUcsRUFBRytELE1BQU01eUMsRUFBRUEsSUFBSTVCLElBQUk0QixFQUFFNnVDLElBQUcsRUFBR25sQyxFQUFFbXBDLEdBQUdDLEtBQUssQ0FBQyxHQUFHeFQsR0FBRXQvQixHQUFHLENBQUMsTUFBTTBKLEVBQUUsU0FBUzFKLEdBQUcsSUFBSTBKLEVBQUUsSUFBSSxJQUFJdEwsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRW5LLE9BQU91SSxJQUFJLENBQUMsTUFBTXpKLEVBQUVxTCxFQUFFNUIsR0FBRyxJQUFJMjBDLEdBQUdwK0MsR0FBRyxPQUFPLEdBQUdBLEVBQUUyRixPQUFPdzFDLElBQUksU0FBU243QyxFQUFFaTlDLFNBQVMsQ0FBQyxHQUFHbG9DLEVBQUUsT0FBT0EsRUFBRS9VLENBQUMsQ0FBQyxDQUFDLE9BQU8rVSxDQUFFLENBQTNJLENBQTRJMUosR0FBR0EsRUFBRTBKLENBQUMsQ0FBQyxPQUFPMUosRUFBRTB2QyxHQUFHMXZDLEdBQUcwSixJQUFJMUosRUFBRWd6QyxrQkFBa0JoekMsRUFBRWd6QyxnQkFBZ0J0cEMsRUFBRXVDLFFBQVF2QyxHQUFHQSxJQUFJMUosS0FBS0EsQ0FBQyxDQUFDLFNBQVNpekMsR0FBR2p6QyxFQUFFMEosR0FBR0EsR0FBR0EsRUFBRWtuQyxjQUFjdFIsR0FBRXQvQixHQUFHMEosRUFBRXc0QixRQUFRcGpDLFFBQVFrQixHQUFHMEosRUFBRXc0QixRQUFRcGpDLEtBQUtrQixHQUFHa3RDLEdBQUdsdEMsRUFBRSxDQUFDLFNBQVNneEMsR0FBR2h4QyxFQUFFMEosR0FBRzFKLEVBQUVpeEMsYUFBYXZuQyxFQUFFLE1BQU0yaEMsTUFBTWp0QyxFQUFFMnpDLGdCQUFnQnA5QyxHQUFHcUwsRUFBRTZtQixFQUFFem9CLEVBQUUwSyxHQUFHWSxFQUFFWixHQUFHblUsR0FBR0EsRUFBRTA3QyxVQUFVanlDLElBQUl6SixFQUFFMDJDLE1BQU12aUMsR0FBRytkLEVBQUV1cEIsR0FBR3o3QyxFQUFFa3lCLEdBQUcsQ0FBQyxTQUFTcXNCLEdBQUdsekMsRUFBRTBKLEdBQUcsR0FBR3lwQyxHQUFHLENBQUMsSUFBSS8wQyxFQUFFKzBDLEdBQUdDLFNBQVMsTUFBTXorQyxFQUFFdytDLEdBQUc3bUMsUUFBUTZtQyxHQUFHN21DLE9BQU84bUMsU0FBU3orQyxJQUFJeUosSUFBSUEsRUFBRSswQyxHQUFHQyxTQUFTaHNDLE9BQU93eUIsT0FBT2psQyxJQUFJeUosRUFBRTRCLEdBQUcwSixDQUFNLENBQUMsQ0FBQyxTQUFTMnBDLEdBQUdyekMsRUFBRTBKLEVBQUV0TCxHQUFFLEdBQUksTUFBTXpKLEVBQUV3K0MsSUFBSTlFLEdBQUcsR0FBRzE1QyxFQUFFLENBQUMsTUFBTWt5QixFQUFFLE1BQU1seUIsRUFBRTJYLE9BQU8zWCxFQUFFMDJDLE1BQU1GLFlBQVl4MkMsRUFBRTAyQyxNQUFNRixXQUFXaUksU0FBU3orQyxFQUFFMlgsT0FBTzhtQyxTQUFTLEdBQUd2c0IsR0FBRzdtQixLQUFLNm1CLEVBQUUsT0FBT0EsRUFBRTdtQixHQUFHLEdBQUdzekMsVUFBVXo5QyxPQUFPLEVBQUUsT0FBT3VJLEdBQUc0aEMsR0FBRXQyQixHQUFHQSxFQUFFcUYsS0FBS3BhLEVBQUU2MkMsT0FBTzloQyxDQUFDLENBQUMsQ0FBQyxTQUFTNnBDLEdBQUd2ekMsRUFBRTBKLEdBQUcsT0FBTzhwQyxHQUFHeHpDLEVBQUUsS0FBSzBKLEVBQUUsQ0FBQyxTQUFTK3BDLEdBQUd6ekMsRUFBRTBKLEdBQUcsT0FBTzhwQyxHQUFHeHpDLEVBQUUsS0FBSyxDQUFDMHpDLE1BQU0sUUFBUSxDQUFDLFNBQVNDLEdBQUczekMsRUFBRTBKLEdBQUcsT0FBTzhwQyxHQUFHeHpDLEVBQUUsS0FBSyxDQUFDMHpDLE1BQU0sUUFBUSxDQUFDLE1BQU1FLEdBQUcsQ0FBQSxFQUFHLFNBQVNDLEdBQUc3ekMsRUFBRTBKLEVBQUV0TCxHQUFHLE9BQU9vMUMsR0FBR3h6QyxFQUFFMEosRUFBRXRMLEVBQUUsQ0FBQyxTQUFTbzFDLEdBQUd4ekMsRUFBRTBKLEdBQUdvcUMsVUFBVTExQyxFQUFFMjFDLEtBQUtwL0MsRUFBRSsrQyxNQUFNN3NCLEdBQUd5WixJQUFHLE1BQU0zaUMsRUFBRXcxQyxHQUFHLElBQUl0NEMsRUFBRTJrQyxFQUFFRSxHQUFFLEVBQUd0MUIsR0FBRSxFQUFHLEdBQUc0N0IsR0FBR2htQyxJQUFJbkYsRUFBRSxJQUFJbUYsRUFBRW5HLE1BQU02bEMsRUFBRTJHLEdBQUdybUMsSUFBSWdwQyxHQUFHaHBDLElBQUluRixFQUFFLElBQUltRixFQUFFckwsR0FBRSxHQUFJMnFDLEdBQUV0L0IsSUFBSW9LLEdBQUUsRUFBR3MxQixFQUFFMS9CLEVBQUU2a0IsTUFBTTdrQixHQUFHZ3BDLEdBQUdocEMsSUFBSXFtQyxHQUFHcm1DLEtBQUtuRixFQUFFLElBQUltRixFQUFFMUcsS0FBSzBHLEdBQUdnbUMsR0FBR2htQyxHQUFHQSxFQUFFbkcsTUFBTW12QyxHQUFHaHBDLEdBQUdnMEMsR0FBR2gwQyxHQUFHZ2dDLEdBQUVoZ0MsR0FBR3VyQyxHQUFHdnJDLEVBQUVyQyxFQUFFLFFBQUcsS0FBVTlDLEVBQUVtbEMsR0FBRWhnQyxHQUFHMEosRUFBRSxJQUFJNmhDLEdBQUd2ckMsRUFBRXJDLEVBQUUsR0FBRyxLQUFLLElBQUlBLElBQUlBLEVBQUVrd0MsWUFBWSxPQUFPck8sR0FBR0EsSUFBSXNNLEdBQUc5ckMsRUFBRXJDLEVBQUUsRUFBRSxDQUFDeXVCLEdBQUcsRUFBRThQLEdBQUV4eUIsR0FBRy9VLEVBQUUsQ0FBQyxNQUFNcUwsRUFBRW5GLEVBQUVBLEVBQUUsSUFBSW01QyxHQUFHaDBDLElBQUksQ0FBQyxJQUFJb3NCLEVBQUVwc0IsSUFBSXcvQixFQUFFL1ksRUFBRXFkLE9BQU8sS0FBS3lILEdBQUd2ckMsRUFBRXJDLEVBQUUsRUFBRSxDQUFDLEVBQUVwRSxFQUFFNlEsRUFBRSxHQUFHd3BDLEdBQUcsTUFBTWpVLEVBQUUsS0FBSyxHQUFHbFosRUFBRXdiLE9BQU8sR0FBR3Y0QixFQUFFLENBQUMsTUFBTTFKLEVBQUV5bUIsRUFBRTRiLE9BQU8xdEMsR0FBRytxQyxJQUFJdDFCLEVBQUVwSyxFQUFFNmtCLE1BQU0sQ0FBQzdrQixFQUFFMEosSUFBSTYzQixHQUFFdmhDLEVBQUV6RyxFQUFFbVEsTUFBTTYzQixHQUFFdmhDLEVBQUV6RyxPQUFPaW1DLEdBQUdBLElBQUlzTSxHQUFHcGlDLEVBQUUvTCxFQUFFLEVBQUUsQ0FBQ3FDLEVBQUV6RyxJQUFJcTZDLFFBQUcsRUFBT3I2QyxFQUFFNnlCLElBQUk3eUIsRUFBRXlHLEVBQUUsTUFBTXltQixFQUFFNGIsS0FBSyxFQUFFLElBQUluakMsRUFBRXlnQyxFQUFFb0YsZUFBZXI3QixFQUFFeEssRUFBRSxTQUFTMm5CLEVBQUU4WSxFQUFFLFNBQVM5WSxFQUFFLElBQUlvdEIsR0FBR3RVLEVBQUVoaUMsR0FBR0EsRUFBRSt5QyxVQUFVLElBQUksU0FBUzF3QyxHQUFHaXRDLEdBQUdqdEMsRUFBRXFzQyxHQUFHbnNDLEdBQUdvc0MsR0FBSSxDQUEzQixDQUE0QjNNLEdBQUcsTUFBTWxaLEVBQUUsSUFBSStjLEdBQUczb0MsRUFBRXFFLEdBQUcsT0FBT3dLLEVBQUV0TCxFQUFFdWhDLElBQUlwbUMsRUFBRWt0QixFQUFFNGIsTUFBTSxTQUFTeGIsRUFBRW90QixHQUFHeHRCLEVBQUU0YixJQUFJdHBCLEtBQUswTixHQUFHOW9CLEdBQUdBLEVBQUUreUMsVUFBVWpxQixFQUFFNGIsTUFBTSxLQUFLNWIsRUFBRTZiLE9BQU8za0MsR0FBR0EsRUFBRXNtQyxPQUFPM3VDLEdBQUVxSSxFQUFFc21DLE1BQU0vQixRQUFRemIsRUFBRSxDQUFDLENBQUMsU0FBU3l0QixHQUFHbDBDLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNekosRUFBRUMsS0FBSzQyQyxNQUFNM2tCLEVBQUUwWSxHQUFFdi9CLEdBQUdBLEVBQUV1RixTQUFTLEtBQUs0dUMsR0FBR3gvQyxFQUFFcUwsR0FBRyxJQUFJckwsRUFBRXFMLEdBQUdBLEVBQUUrWSxLQUFLcGtCLEVBQUVBLEdBQUcsSUFBSWdKLEVBQUVxaUMsR0FBRXQyQixHQUFHL0wsRUFBRStMLEdBQUcvTCxFQUFFK0wsRUFBRTRwQixRQUFRbDFCLEVBQUVzTCxHQUFHLE1BQU03TyxFQUFFczRDLEdBQUdpQixHQUFHeC9DLE1BQU0sTUFBTTRxQyxFQUFFZ1UsR0FBRzNzQixFQUFFbHBCLEVBQUVvYixLQUFLcGtCLEdBQUd5SixHQUFHLE9BQU92RCxFQUFFdTVDLEdBQUd2NUMsR0FBR3c1QyxLQUFLN1UsQ0FBQyxDQUFDLFNBQVMyVSxHQUFHbjBDLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFc0wsRUFBRXJRLE1BQU0sS0FBSyxNQUFNLEtBQUssSUFBSXFRLEVBQUUxSixFQUFFLElBQUksSUFBSUEsRUFBRSxFQUFFQSxFQUFFNUIsRUFBRXZJLFFBQVE2VCxFQUFFMUosSUFBSTBKLEVBQUVBLEVBQUV0TCxFQUFFNEIsSUFBSSxPQUFPMEosQ0FBQyxDQUFDLENBQUMsU0FBU3NxQyxHQUFHaDBDLEVBQUUwSixHQUFHLElBQUkrMUIsR0FBRXovQixJQUFJQSxFQUFFNG9DLFNBQVMsT0FBTzVvQyxFQUFFLElBQUkwSixFQUFFQSxHQUFHLElBQUltNUIsS0FBS3BPLElBQUl6MEIsR0FBRyxPQUFPQSxFQUFFLEdBQUcwSixFQUFFZzdCLElBQUkxa0MsR0FBR2dtQyxHQUFHaG1DLEdBQUdnMEMsR0FBR2gwQyxFQUFFbkcsTUFBTTZQLFFBQVEsR0FBRzQxQixHQUFFdC9CLEdBQUcsSUFBSSxJQUFJNUIsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRW5LLE9BQU91SSxJQUFJNDFDLEdBQUdoMEMsRUFBRTVCLEdBQUdzTCxRQUFRLEdBQUcwMkIsR0FBRXBnQyxJQUFJM0osR0FBRTJKLEdBQUdBLEVBQUVxRixTQUFTckYsSUFBSWcwQyxHQUFHaDBDLEVBQUUwSixFQUFFLFNBQVMsR0FBRzIyQixHQUFFcmdDLEdBQUcsSUFBSSxNQUFNNUIsS0FBSzRCLEVBQUVnMEMsR0FBR2gwQyxFQUFFNUIsR0FBR3NMLEdBQUcsT0FBTzFKLENBQUMsQ0FBQyxTQUFTczBDLEtBQUssTUFBTXQwQyxFQUFFLENBQUN1MEMsV0FBVSxFQUFHQyxXQUFVLEVBQUdDLGNBQWEsRUFBR0MsY0FBYyxJQUFJbFEsS0FBSyxPQUFPbVEsSUFBSSxLQUFLMzBDLEVBQUV1MEMsV0FBVSxDQUFFLElBQUlLLElBQUksS0FBSzUwQyxFQUFFeTBDLGNBQWEsQ0FBRSxJQUFJejBDLENBQUMsQ0FBQyxNQUFNNjBDLEdBQUcsQ0FBQ0MsU0FBU3AyQixPQUFPcTJCLEdBQUcsQ0FBQ3AwQyxLQUFLLGlCQUFpQitxQyxNQUFNLENBQUN3RyxLQUFLdDdDLE9BQU9vK0MsT0FBT0MsUUFBUUMsVUFBVUQsUUFBUUUsY0FBY04sR0FBR08sUUFBUVAsR0FBR1EsYUFBYVIsR0FBR1MsaUJBQWlCVCxHQUFHVSxjQUFjVixHQUFHVyxRQUFRWCxHQUFHWSxhQUFhWixHQUFHYSxpQkFBaUJiLEdBQUdjLGVBQWVkLEdBQUdlLFNBQVNmLEdBQUdnQixjQUFjaEIsR0FBR2lCLGtCQUFrQmpCLElBQUlrQixNQUFNLzFDLEdBQUdtdkMsTUFBTXpsQyxJQUFJLE1BQU10TCxFQUFFNDNDLEtBQUtyaEQsRUFBRTIvQyxLQUFLLElBQUl6dEIsRUFBRSxNQUFNLEtBQUssTUFBTWxwQixFQUFFK0wsRUFBRW9vQyxTQUFTbUUsR0FBR3ZzQyxFQUFFb29DLFdBQVUsR0FBSSxJQUFJbjBDLElBQUlBLEVBQUU5SCxPQUFPLE9BQU8sSUFBSWdGLEVBQUU4QyxFQUFFLEdBQUcsR0FBR0EsRUFBRTlILE9BQU8sRUFBRSxJQUFJLE1BQU1tSyxLQUFLckMsRUFBRSxHQUFHcUMsRUFBRTFGLE9BQU93MUMsR0FBRyxDQUFDajFDLEVBQUVtRixFQUFFLEtBQUssQ0FBQyxNQUFNdy9CLEVBQUVpRyxHQUFHemxDLElBQUlreUMsS0FBS3hTLEdBQUdGLEVBQUUsR0FBRzdxQyxFQUFFNi9DLFVBQVUsT0FBTzBCLEdBQUdyN0MsR0FBRyxNQUFNdVAsRUFBRStyQyxHQUFHdDdDLEdBQUcsSUFBSXVQLEVBQUUsT0FBTzhyQyxHQUFHcjdDLEdBQUcsTUFBTXV4QixFQUFFZ3FCLEdBQUdoc0MsRUFBRW8xQixFQUFFN3FDLEVBQUV5SixHQUFHaTRDLEdBQUdqc0MsRUFBRWdpQixHQUFHLE1BQU03eUIsRUFBRTZFLEVBQUVpeUMsUUFBUTFRLEVBQUVwbUMsR0FBRzQ4QyxHQUFHNThDLEdBQUcsSUFBSTJGLEdBQUUsRUFBRyxNQUFNbzNDLGlCQUFpQjd2QixHQUFHcmMsRUFBRTlQLEtBQUssR0FBR21zQixFQUFFLENBQUMsTUFBTXptQixFQUFFeW1CLFNBQUksSUFBU0ksRUFBRUEsRUFBRTdtQixFQUFFQSxJQUFJNm1CLElBQUlBLEVBQUU3bUIsRUFBRWQsR0FBRSxFQUFHLENBQUMsR0FBR3lnQyxHQUFHQSxFQUFFcmxDLE9BQU93MUMsTUFBTXNCLEdBQUdobkMsRUFBRXUxQixJQUFJemdDLEdBQUcsQ0FBQyxNQUFNYyxFQUFFbzJDLEdBQUd6VyxFQUFFSCxFQUFFN3FDLEVBQUV5SixHQUFHLEdBQUdpNEMsR0FBRzFXLEVBQUUzL0IsR0FBRyxXQUFXMC9CLEVBQUUsT0FBTy9xQyxFQUFFNi9DLFdBQVUsRUFBR3gwQyxFQUFFbXlDLFdBQVcsS0FBS3g5QyxFQUFFNi9DLFdBQVUsRUFBR3AyQyxFQUFFb3FCLFFBQVEsRUFBRTB0QixHQUFHcjdDLEdBQUcsV0FBVzZrQyxHQUFHdDFCLEVBQUU5UCxPQUFPdzFDLEtBQUs5dkMsRUFBRXUyQyxXQUFXLENBQUN2MkMsRUFBRTBKLEVBQUV0TCxLQUFLbzRDLEdBQUc3aEQsRUFBRWdyQyxHQUFHL29DLE9BQU8rb0MsRUFBRXozQixNQUFNeTNCLEVBQUUzL0IsRUFBRXkyQyxTQUFTLEtBQUsvc0MsSUFBSTFKLEVBQUV5MkMsY0FBUyxTQUFjcnFCLEVBQUVzcUIsWUFBWSxFQUFFdHFCLEVBQUVzcUIsYUFBYXQ0QyxDQUFDLEVBQUUsQ0FBQyxPQUFPdkQsQ0FBQyxDQUFDLEdBQUcsU0FBUzI3QyxHQUFHeDJDLEVBQUUwSixHQUFHLE1BQU1nckMsY0FBY3QyQyxHQUFHNEIsRUFBRSxJQUFJckwsRUFBRXlKLEVBQUV5VyxJQUFJbkwsRUFBRXBQLE1BQU0sT0FBTzNGLElBQUlBLEVBQUV5UyxPQUFPd3lCLE9BQU8sTUFBTXg3QixFQUFFbUosSUFBSW1DLEVBQUVwUCxLQUFLM0YsSUFBSUEsQ0FBQyxDQUFDLFNBQVN5aEQsR0FBR3AyQyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE1BQU1xZ0QsT0FBT251QixFQUFFcXJCLEtBQUt2MEMsRUFBRXUzQyxVQUFVcjZDLEdBQUUsRUFBR3M2QyxjQUFjM1YsRUFBRTRWLFFBQVExVixFQUFFMlYsYUFBYWpyQyxFQUFFa3JDLGlCQUFpQmxwQixFQUFFbXBCLGNBQWNoOEMsRUFBRWk4QyxRQUFRN1YsRUFBRThWLGFBQWF2MkMsRUFBRXcyQyxpQkFBaUJqdkIsRUFBRWt2QixlQUFlbDFCLEVBQUVtMUIsU0FBUzNWLEVBQUU0VixjQUFjdlYsRUFBRXdWLGtCQUFrQjNtQyxHQUFHekYsRUFBRXd5QixFQUFFdGxDLE9BQU9vSixFQUFFa0ksS0FBS21DLEVBQUVtc0MsR0FBR3A0QyxFQUFFNEIsR0FBRzVLLEVBQUUsQ0FBQzRLLEVBQUUwSixLQUFLMUosR0FBRzhyQyxHQUFHOXJDLEVBQUVyTCxFQUFFLEVBQUUrVSxFQUFFLEVBQUU3TCxFQUFFLENBQUNtQyxFQUFFMEosS0FBSyxNQUFNdEwsRUFBRXNMLEVBQUUsR0FBR3RVLEVBQUU0SyxFQUFFMEosR0FBRzQxQixHQUFFdC9CLEdBQUdBLEVBQUU0MUIsT0FBTzUxQixHQUFHQSxFQUFFbkssUUFBUSxLQUFLdUksSUFBSTRCLEVBQUVuSyxRQUFRLEdBQUd1SSxHQUFHLEVBQUVtaUMsRUFBRSxDQUFDMlIsS0FBS3YwQyxFQUFFdTNDLFVBQVVyNkMsRUFBRTg3QyxZQUFZanRDLEdBQUcsSUFBSS9VLEVBQUU2cUMsRUFBRSxJQUFJcGhDLEVBQUVtMkMsVUFBVSxDQUFDLElBQUkxdEIsRUFBRSxPQUFPbHlCLEVBQUU4ckIsR0FBRytlLENBQUMsQ0FBQzkxQixFQUFFK3NDLFVBQVUvc0MsRUFBRStzQyxVQUFTLEdBQUksTUFBTTk0QyxFQUFFME0sRUFBRTZ4QixHQUFHditCLEdBQUd5ekMsR0FBR3B4QyxFQUFFckMsSUFBSUEsRUFBRW1MLEdBQUcydEMsVUFBVTk0QyxFQUFFbUwsR0FBRzJ0QyxXQUFXcmhELEVBQUVULEVBQUUsQ0FBQytVLEdBQUksRUFBQ29GLE1BQU05TyxHQUFHLElBQUkwSixFQUFFZzJCLEVBQUUvcUMsRUFBRXlWLEVBQUV6TSxFQUFFeXVCLEVBQUUsSUFBSWh1QixFQUFFbTJDLFVBQVUsQ0FBQyxJQUFJMXRCLEVBQUUsT0FBT25kLEVBQUV1MkIsR0FBR1AsRUFBRS9xQyxFQUFFMnJDLEdBQUdsMkIsRUFBRXpNLEVBQUV3UixHQUFHaWQsQ0FBQyxDQUFDLElBQUl2eEIsR0FBRSxFQUFHLE1BQU0ya0MsRUFBRXgvQixFQUFFNDJDLFNBQVNsdEMsSUFBSTdPLElBQUlBLEdBQUUsRUFBR3pGLEVBQUVzVSxFQUFFL0wsRUFBRWhKLEVBQUUsQ0FBQ3FMLElBQUl1Z0MsRUFBRW1XLGNBQWNuVyxFQUFFbVcsZUFBZTEyQyxFQUFFNDJDLGNBQVMsRUFBTyxFQUFFbHRDLEVBQUU3TCxFQUFFNkwsRUFBRSxDQUFDMUosRUFBRXcvQixJQUFJQSxHQUFJLEVBQUNxWCxNQUFNbnRDLEVBQUUvVSxHQUFHLE1BQU1reUIsRUFBRWp3QixPQUFPb0osRUFBRWtJLEtBQUssR0FBR3dCLEVBQUVrdEMsVUFBVWx0QyxFQUFFa3RDLFVBQVMsR0FBSXg0QyxFQUFFcTJDLGFBQWEsT0FBTzkvQyxJQUFJUyxFQUFFbUUsRUFBRSxDQUFDbVEsSUFBSSxJQUFJL0wsR0FBRSxFQUFHLE1BQU05QyxFQUFFNk8sRUFBRStzQyxTQUFTcjRDLElBQUlULElBQUlBLEdBQUUsRUFBR2hKLElBQUlTLEVBQUVnSixFQUFFcW9CLEVBQUV2bkIsRUFBRSxDQUFDd0ssSUFBSUEsRUFBRStzQyxjQUFTLEVBQU9wc0MsRUFBRXdjLEtBQUs3bUIsVUFBVXFLLEVBQUV3YyxHQUFHLEVBQUV4YyxFQUFFd2MsR0FBRzdtQixFQUFFMi9CLEVBQUU5aEMsRUFBRThoQyxFQUFFLENBQUNqMkIsRUFBRTdPLElBQUlBLEdBQUksRUFBQ2drQixNQUFNN2UsR0FBR28yQyxHQUFHcDJDLEVBQUUwSixFQUFFdEwsRUFBRXpKLElBQUksT0FBTzRyQyxDQUFDLENBQUMsU0FBUzJWLEdBQUdsMkMsR0FBRyxHQUFHODJDLEdBQUc5MkMsR0FBRyxPQUFPQSxFQUFFZ3dDLEdBQUdod0MsSUFBSTR4QyxTQUFTLEtBQUs1eEMsQ0FBQyxDQUFDLFNBQVNtMkMsR0FBR24yQyxHQUFHLE9BQU84MkMsR0FBRzkyQyxHQUFHQSxFQUFFNHhDLFNBQVM1eEMsRUFBRTR4QyxTQUFTLFFBQUcsRUFBTzV4QyxDQUFDLENBQUMsU0FBU3EyQyxHQUFHcjJDLEVBQUUwSixHQUFHLEVBQUUxSixFQUFFeXZDLFdBQVd6dkMsRUFBRWtyQyxVQUFVbUwsR0FBR3IyQyxFQUFFa3JDLFVBQVVtRixRQUFRM21DLEdBQUcsSUFBSTFKLEVBQUV5dkMsV0FBV3p2QyxFQUFFNndDLFVBQVU3bkIsV0FBV3RmLEVBQUVtVixNQUFNN2UsRUFBRTZ3QyxXQUFXN3dDLEVBQUUrd0MsV0FBVy9uQixXQUFXdGYsRUFBRW1WLE1BQU03ZSxFQUFFK3dDLGFBQWEvd0MsRUFBRWdwQixXQUFXdGYsQ0FBQyxDQUFDLFNBQVN1c0MsR0FBR2oyQyxFQUFFMEosR0FBRSxFQUFHdEwsR0FBRyxJQUFJekosRUFBRSxHQUFHa3lCLEVBQUUsRUFBRSxJQUFJLElBQUlscEIsRUFBRSxFQUFFQSxFQUFFcUMsRUFBRW5LLE9BQU84SCxJQUFJLENBQUMsSUFBSTlDLEVBQUVtRixFQUFFckMsR0FBRyxNQUFNNmhDLEVBQUUsTUFBTXBoQyxFQUFFdkQsRUFBRXFOLElBQUl0UixPQUFPd0gsR0FBR3hILE9BQU8sTUFBTWlFLEVBQUVxTixJQUFJck4sRUFBRXFOLElBQUl2SyxHQUFHOUMsRUFBRVAsT0FBT3k4QyxJQUFJLElBQUlsOEMsRUFBRW04QyxXQUFXbndCLElBQUlseUIsRUFBRUEsRUFBRXU3QyxPQUFPK0YsR0FBR3A3QyxFQUFFKzJDLFNBQVNsb0MsRUFBRTgxQixNQUFNOTFCLEdBQUc3TyxFQUFFUCxPQUFPdzFDLEtBQUtuN0MsRUFBRW1LLEtBQUssTUFBTTBnQyxFQUFFd1EsR0FBR24xQyxFQUFFLENBQUNxTixJQUFJczNCLElBQUkza0MsRUFBRSxDQUFDLEdBQUdnc0IsRUFBRSxFQUFFLElBQUksSUFBSWxwQixFQUFFLEVBQUVBLEVBQUVoSixFQUFFa0IsT0FBTzhILElBQUloSixFQUFFZ0osR0FBR3E1QyxXQUFXLEVBQUUsT0FBT3JpRCxDQUFDLENBQUMsU0FBU3NpRCxHQUFHajNDLEdBQUcsT0FBT2dnQyxHQUFFaGdDLEdBQUcsQ0FBQysxQyxNQUFNLzFDLEVBQUVXLEtBQUtYLEVBQUVXLE1BQU1YLENBQUMsQ0FBQyxNQUFNazNDLEdBQUdsM0MsS0FBS0EsRUFBRTFGLEtBQUs2OEMsY0FBYyxTQUFTQyxHQUFHcDNDLEdBQUdnZ0MsR0FBRWhnQyxLQUFLQSxFQUFFLENBQUNxM0MsT0FBT3IzQyxJQUFJLE1BQU1xM0MsT0FBTzN0QyxFQUFFNHRDLGlCQUFpQmw1QyxFQUFFbTVDLGVBQWU1aUQsRUFBRWtRLE1BQU1naUIsRUFBRSxJQUFJMHFCLFFBQVE1ekMsRUFBRTY1QyxZQUFZMzhDLEdBQUUsRUFBRzQ4QyxRQUFRalksR0FBR3gvQixFQUFFLElBQUkwL0IsRUFBRXQxQixFQUFFLEtBQUtnaUIsRUFBRSxFQUFFLE1BQU03eUIsRUFBRSxLQUFLLElBQUl5RyxFQUFFLE9BQU9vSyxJQUFJcEssRUFBRW9LLEVBQUVWLElBQUlsRCxPQUFPeEcsSUFBSSxHQUFHQSxFQUFFQSxhQUFhc0csTUFBTXRHLEVBQUUsSUFBSXNHLE1BQU0xUCxPQUFPb0osSUFBSXcvQixFQUFFLE9BQU8sSUFBSXBoQixTQUFTLENBQUMxVSxFQUFFdEwsS0FBS29oQyxFQUFFeC9CLEdBQUcsSUFBSTBKLEdBQUcwaUIsSUFBSWhpQixFQUFFLEtBQUs3USxRQUFRLElBQUk2RSxFQUFFNEIsSUFBSW9zQixFQUFFLEVBQUUsSUFBSSxNQUFNcHNCLENBQUMsSUFBSW9HLE1BQU1zRCxHQUFHMUosSUFBSW9LLEdBQUdBLEVBQUVBLEdBQUdWLElBQUlBLEVBQUVndUMsWUFBWSxXQUFXaHVDLEVBQUU0NUIsT0FBT3FVLGdCQUFnQmp1QyxFQUFFQSxFQUFFb29DLFNBQVNwUyxFQUFFaDJCLEVBQUVBLEtBQUssRUFBRSxPQUFPdXRDLEdBQUcsQ0FBQ3QyQyxLQUFLLHdCQUF3QncyQyxjQUFjNTlDLEVBQU1xK0Msc0JBQWtCLE9BQU9sWSxDQUFFLEVBQUNxVyxRQUFRLE1BQU0vMUMsRUFBRW16QyxHQUFHLEdBQUd6VCxFQUFFLE1BQU0sSUFBSW1ZLEdBQUduWSxFQUFFMS9CLEdBQUcsTUFBTTBKLEVBQUVBLElBQUlVLEVBQUUsS0FBS3loQyxHQUFHbmlDLEVBQUUxSixFQUFFLElBQUlyTCxFQUFFLEVBQUUsR0FBR2tHLEdBQUdtRixFQUFFMHdDLFNBQVMsT0FBT24zQyxJQUFJNk0sTUFBTXNELEdBQUcsSUFBSW11QyxHQUFHbnVDLEVBQUUxSixLQUFLd0csT0FBT3hHLElBQUkwSixFQUFFMUosR0FBRyxJQUFJckwsRUFBRWs3QyxHQUFHbDdDLEVBQUUsQ0FBQ21FLE1BQU1rSCxJQUFJLFFBQVEsTUFBTXcvQixFQUFFZ0ssSUFBRyxHQUFJcGQsRUFBRW9kLEtBQUs3SixFQUFFNkosS0FBSzNpQixHQUFHLE9BQU9BLEdBQUczZ0IsWUFBWSxLQUFLeTVCLEVBQUU5bEMsT0FBTSxDQUFFLEdBQUdndEIsR0FBRyxNQUFNbHBCLEdBQUd1SSxZQUFZLEtBQUssSUFBSXM1QixFQUFFM2xDLFFBQVF1eUIsRUFBRXZ5QixNQUFNLENBQUMsTUFBTW1HLEVBQUUsSUFBSXNHLE1BQU8sbUNBQWtDM0ksUUFBUStMLEVBQUUxSixHQUFHb3NCLEVBQUV2eUIsTUFBTW1HLENBQUMsSUFBSXJDLEdBQUdwRSxJQUFJNk0sTUFBTSxLQUFLbzVCLEVBQUUzbEMsT0FBTSxFQUFHbUcsRUFBRXNNLFFBQVF3cUMsR0FBRzkyQyxFQUFFc00sT0FBTysrQixRQUFRd0IsR0FBRzdzQyxFQUFFc00sT0FBT2tjLE9BQU8sSUFBSWhpQixPQUFPeEcsSUFBSTBKLEVBQUUxSixHQUFHb3NCLEVBQUV2eUIsTUFBTW1HLENBQUMsSUFBSSxJQUFJdy9CLEVBQUUzbEMsT0FBTzZsQyxFQUFFbVksR0FBR25ZLEVBQUUxL0IsR0FBR29zQixFQUFFdnlCLE9BQU9sRixFQUFFazdDLEdBQUdsN0MsRUFBRSxDQUFDbUUsTUFBTXN6QixFQUFFdnlCLFFBQVF1RSxJQUFJdWhDLEVBQUU5bEMsTUFBTWcyQyxHQUFHenhDLFFBQUcsQ0FBTSxHQUFHLENBQUMsU0FBU3k1QyxHQUFHNzNDLEdBQUdxckMsT0FBT3lNLElBQUlwdUMsRUFBRWdpQyxNQUFNdHRDLEVBQUV3ekMsU0FBU2o5QyxLQUFLLE1BQU1reUIsRUFBRWdwQixHQUFHN3ZDLEVBQUU1QixFQUFFekosR0FBRyxPQUFPa3lCLEVBQUVpeEIsSUFBSXB1QyxFQUFFbWQsQ0FBQyxDQUFDLE1BQU1pd0IsR0FBRzkyQyxHQUFHQSxFQUFFMUYsS0FBS3k5QyxjQUFjQyxHQUFHLENBQUNyM0MsS0FBSyxZQUFZbzNDLGVBQWMsRUFBR3JNLE1BQU0sQ0FBQ3VNLFFBQVEsQ0FBQ3JoRCxPQUFPbkIsT0FBT2lwQixPQUFPdzVCLFFBQVEsQ0FBQ3RoRCxPQUFPbkIsT0FBT2lwQixPQUFPckksSUFBSSxDQUFDemYsT0FBT3dvQixTQUFTMjJCLE1BQU0vMUMsR0FBR212QyxNQUFNemxDLElBQUksTUFBTXRMLEVBQUU0M0MsS0FBS3JoRCxFQUFFeUosRUFBRW14QyxJQUFJMW9CLEVBQUUsSUFBSTJkLElBQUk3bUMsRUFBRSxJQUFJa2xDLElBQUksSUFBSWhvQyxFQUFFLEtBQUssTUFBTTJrQyxFQUFFcGhDLEVBQUVzeUMsVUFBVXlILFVBQVU1K0MsRUFBRW1tQyxFQUFFamYsRUFBRXJXLEVBQUVzTCxHQUFHMFcsRUFBRXozQixHQUFHcVUsY0FBY3pQLEtBQUs1RSxFQUFFZ3JDLEVBQUVwbUMsRUFBRSxPQUFPLFNBQVMyRixFQUFFYyxHQUFHbzRDLEdBQUdwNEMsR0FBR29zQixFQUFFcHNCLEVBQUU1QixFQUFFb2hDLEdBQUUsRUFBRyxDQUFDLFNBQVMvWSxFQUFFem1CLEdBQUc2bUIsRUFBRXhoQixTQUFTLENBQUNxRSxFQUFFdEwsS0FBSyxNQUFNekosRUFBRTBqRCxHQUFHM3VDLEVBQUVwUCxPQUFPM0YsR0FBR3FMLEdBQUdBLEVBQUVyTCxJQUFJOHJCLEVBQUVyaUIsRUFBRSxHQUFHLENBQUMsU0FBU3FpQixFQUFFemdCLEdBQUcsTUFBTTBKLEVBQUVtZCxFQUFFaFMsSUFBSTdVLEdBQUduRixHQUFHNk8sRUFBRXBQLE9BQU9PLEVBQUVQLEtBQUtPLEdBQUd1OUMsR0FBR3Y5QyxHQUFHcUUsRUFBRXdLLEdBQUdtZCxFQUFFNUMsT0FBT2prQixHQUFHckMsRUFBRXNtQixPQUFPamtCLEVBQUUsQ0FBQ3JMLEVBQUUyakQsU0FBUyxDQUFDdDRDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsS0FBSyxNQUFNbHBCLEVBQUVxQyxFQUFFa3JDLFVBQVU5Z0MsRUFBRXBLLEVBQUUwSixFQUFFdEwsRUFBRSxFQUFFb2hDLEdBQUdFLEVBQUUvaEMsRUFBRTB0QyxNQUFNcnJDLEVBQUUwSixFQUFFdEwsRUFBRVQsRUFBRTZoQyxFQUFFN3FDLEVBQUVxTCxFQUFFdTRDLGFBQWExeEIsR0FBR290QixJQUFJLEtBQUt0MkMsRUFBRTY2QyxlQUFjLEVBQUc3NkMsRUFBRXlNLEdBQUdvM0IsR0FBRTdqQyxFQUFFeU0sR0FBRyxNQUFNVixFQUFFMUosRUFBRTByQyxPQUFPMXJDLEVBQUUwckMsTUFBTStNLGVBQWUvdUMsR0FBR2d2QyxHQUFHaHZDLEVBQUUvTCxFQUFFMk8sT0FBT3RNLEVBQUUsR0FBR3cvQixFQUFFLEVBQUU3cUMsRUFBRWdrRCxXQUFXMzRDLElBQUksTUFBTTBKLEVBQUUxSixFQUFFa3JDLFVBQVU5Z0MsRUFBRXBLLEVBQUUyL0IsRUFBRSxLQUFLLEVBQUVILEdBQUd5VSxJQUFJLEtBQUt2cUMsRUFBRWt2QyxJQUFJcFgsR0FBRTkzQixFQUFFa3ZDLElBQUksTUFBTXg2QyxFQUFFNEIsRUFBRTByQyxPQUFPMXJDLEVBQUUwckMsTUFBTW1OLGlCQUFpQno2QyxHQUFHczZDLEdBQUd0NkMsRUFBRXNMLEVBQUU0QyxPQUFPdE0sR0FBRzBKLEVBQUU4dUMsZUFBYyxDQUFFLEdBQUdoWixFQUFFLEVBQUVxVSxJQUFJLElBQUksQ0FBQzd6QyxFQUFFaTRDLFFBQVFqNEMsRUFBRWs0QyxXQUFXLEVBQUVsNEMsRUFBRTBKLE1BQU0xSixHQUFHeW1CLEdBQUcvYyxHQUFHb3ZDLEdBQUc5NEMsRUFBRTBKLEtBQUtBLEdBQUcrYyxHQUFHem1CLElBQUk4NEMsR0FBR3B2QyxFQUFFMUosSUFBSSxHQUFHLENBQUMwekMsTUFBTSxPQUFPSyxNQUFLLElBQUssSUFBSTlULEVBQUUsS0FBSyxNQUFNSyxFQUFFLEtBQUssTUFBTUwsR0FBR3BaLEVBQUV0ZixJQUFJMDRCLEVBQUU4WSxHQUFHMzZDLEVBQUVpeUMsU0FBUyxFQUFFLE9BQU9zRSxHQUFHclUsR0FBRzBZLEdBQUcxWSxHQUFHc1UsSUFBSSxLQUFLL3RCLEVBQUV4aEIsU0FBU3JGLElBQUksTUFBTXF3QyxRQUFRM21DLEVBQUVnbkMsU0FBUy83QyxHQUFHeUosRUFBRXlvQixFQUFFa3lCLEdBQUdydkMsR0FBRyxHQUFHMUosRUFBRTFGLE9BQU91c0IsRUFBRXZzQixLQUFLNEUsRUFBRWMsT0FBTyxDQUFDbzRDLEdBQUd2eEIsR0FBRyxNQUFNN21CLEVBQUU2bUIsRUFBRXFrQixVQUFVME4sR0FBRzU0QyxHQUFHaTBDLEdBQUdqMEMsRUFBRXJMLEVBQUUsSUFBSSxJQUFJLEtBQUssR0FBR3NyQyxFQUFFLE1BQU12MkIsRUFBRW9vQyxRQUFRLE9BQU8sS0FBSyxNQUFNMXpDLEVBQUVzTCxFQUFFb29DLFVBQVVuOUMsRUFBRXlKLEVBQUUsR0FBRyxHQUFHQSxFQUFFdkksT0FBTyxFQUFFLE9BQU9nRixFQUFFLEtBQUt1RCxFQUFFLElBQUsyMEMsR0FBR3ArQyxNQUFLLEVBQUVBLEVBQUU4NkMsV0FBVyxJQUFJOTZDLEVBQUU4NkMsV0FBWSxPQUFPNTBDLEVBQUUsS0FBS2xHLEVBQUUsSUFBSTZxQyxFQUFFdVosR0FBR3BrRCxHQUFHLE1BQU0rcUMsRUFBRUYsRUFBRWxsQyxLQUFLOFAsRUFBRWl1QyxHQUFHbkIsR0FBRzFYLEdBQUdBLEVBQUVsbEMsS0FBS3M5QyxpQkFBaUIsQ0FBRSxFQUFDbFksSUFBSXVZLFFBQVE3ckIsRUFBRThyQixRQUFRMytDLEVBQUU4YyxJQUFJc3BCLEdBQUczL0IsRUFBRSxHQUFHb3NCLEtBQUtoaUIsSUFBSTB1QyxHQUFHMXNCLEVBQUVoaUIsS0FBSzdRLEdBQUc2USxHQUFHMHVDLEdBQUd2L0MsRUFBRTZRLEdBQUcsT0FBT3ZQLEVBQUUya0MsRUFBRTdxQyxFQUFFLE1BQU11SyxFQUFFLE1BQU1zZ0MsRUFBRXQzQixJQUFJdzNCLEVBQUVGLEVBQUV0M0IsSUFBSXVlLEVBQUVJLEVBQUVoUyxJQUFJM1YsR0FBRyxPQUFPc2dDLEVBQUUxMkIsS0FBSzAyQixFQUFFd1EsR0FBR3hRLEdBQUcsSUFBSTdxQyxFQUFFODZDLFlBQVk5NkMsRUFBRWs4QyxVQUFVclIsSUFBSVMsRUFBRS9nQyxFQUFFdW5CLEdBQUcrWSxFQUFFMTJCLEdBQUcyZCxFQUFFM2QsR0FBRzAyQixFQUFFMEwsVUFBVXprQixFQUFFeWtCLFVBQVUxTCxFQUFFeFcsWUFBWXF0QixHQUFHN1csRUFBRUEsRUFBRXhXLFlBQVl3VyxFQUFFaVEsV0FBVyxJQUFJOXhDLEVBQUVzbUIsT0FBTy9rQixHQUFHdkIsRUFBRSttQyxJQUFJeGxDLEtBQUt2QixFQUFFK21DLElBQUl4bEMsR0FBR3lnQyxHQUFHaGlDLEVBQUV5USxLQUFLaFUsU0FBU3VsQyxFQUFFLEtBQUtsZixFQUFFOWlCLEVBQUV3USxTQUFTNGtCLE9BQU9sNUIsUUFBUTJsQyxFQUFFaVEsV0FBVyxJQUFJNTBDLEVBQUUya0MsRUFBRThRLEdBQUczN0MsRUFBRTJGLE1BQU0zRixFQUFFNnFDLENBQUMsQ0FBQyxHQUFHLFNBQVNzWixHQUFHOTRDLEVBQUUwSixHQUFHLE9BQU80MUIsR0FBRXQvQixHQUFHQSxFQUFFNmtCLE1BQU03a0IsR0FBRzg0QyxHQUFHOTRDLEVBQUUwSixLQUFLNjFCLEdBQUV2L0IsR0FBR0EsRUFBRTNHLE1BQU0sS0FBS2tNLFNBQVNtRSxLQUFLMUosRUFBRXpLLE1BQU15SyxFQUFFekssS0FBS21VLEVBQUUsQ0FBQyxTQUFTdXZDLEdBQUdqNUMsRUFBRTBKLEdBQUd3dkMsR0FBR2w1QyxFQUFFLElBQUkwSixFQUFFLENBQUMsU0FBU3l2QyxHQUFHbjVDLEVBQUUwSixHQUFHd3ZDLEdBQUdsNUMsRUFBRSxLQUFLMEosRUFBRSxDQUFDLFNBQVN3dkMsR0FBR2w1QyxFQUFFMEosRUFBRXRMLEVBQUUrMEMsSUFBSSxNQUFNeCtDLEVBQUVxTCxFQUFFbzVDLFFBQVFwNUMsRUFBRW81QyxNQUFNLEtBQUssSUFBSTF2QyxFQUFFdEwsRUFBRSxLQUFLc0wsR0FBRyxDQUFDLEdBQUdBLEVBQUU4dUMsY0FBYyxPQUFPOXVDLEVBQUVBLEVBQUU0QyxNQUFNLENBQUMsT0FBT3RNLEdBQUcsR0FBRyxHQUFHcTVDLEdBQUczdkMsRUFBRS9VLEVBQUV5SixHQUFHQSxFQUFFLENBQUMsSUFBSTRCLEVBQUU1QixFQUFFa08sT0FBTyxLQUFLdE0sR0FBR0EsRUFBRXNNLFFBQVF3cUMsR0FBRzkyQyxFQUFFc00sT0FBTysrQixRQUFRaU8sR0FBRzNrRCxFQUFFK1UsRUFBRXRMLEVBQUU0QixHQUFHQSxFQUFFQSxFQUFFc00sTUFBTSxDQUFDLENBQUMsU0FBU2d0QyxHQUFHdDVDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUcsTUFBTWt5QixFQUFFd3lCLEdBQUczdkMsRUFBRTFKLEVBQUVyTCxHQUFFLEdBQUk0a0QsSUFBSSxLQUFLamtELEdBQUVYLEVBQUUrVSxHQUFHbWQsRUFBRSxHQUFHem9CLEVBQUUsQ0FBQyxTQUFTZzZDLEdBQUdwNEMsR0FBRyxJQUFJMEosRUFBRTFKLEVBQUV5dkMsVUFBVSxJQUFJL2xDLElBQUlBLEdBQUcsS0FBSyxJQUFJQSxJQUFJQSxHQUFHLEtBQUsxSixFQUFFeXZDLFVBQVUvbEMsQ0FBQyxDQUFDLFNBQVNxdkMsR0FBRy80QyxHQUFHLE9BQU8sSUFBSUEsRUFBRXl2QyxVQUFVenZDLEVBQUU2d0MsVUFBVTd3QyxDQUFDLENBQUMsU0FBU3E1QyxHQUFHcjVDLEVBQUUwSixFQUFFdEwsRUFBRSswQyxHQUFHeCtDLEdBQUUsR0FBSSxHQUFHeUosRUFBRSxDQUFDLE1BQU15b0IsRUFBRXpvQixFQUFFNEIsS0FBSzVCLEVBQUU0QixHQUFHLElBQUlyQyxFQUFFK0wsRUFBRTh2QyxRQUFROXZDLEVBQUU4dkMsTUFBTSxJQUFJN2tELEtBQUssR0FBR3lKLEVBQUV5dkMsWUFBWSxPQUFPeEosS0FBSytQLEdBQUdoMkMsR0FBRyxNQUFNeW9CLEVBQUVpbEIsR0FBR3BpQyxFQUFFdEwsRUFBRTRCLEVBQUVyTCxHQUFHLE9BQU8wL0MsS0FBSy9QLEtBQUt6ZCxDQUFDLEdBQUcsT0FBT2x5QixFQUFFa3lCLEVBQUU0eUIsUUFBUTk3QyxHQUFHa3BCLEVBQUUvbkIsS0FBS25CLEdBQUdBLENBQUMsQ0FBQyxDQUFDLE1BQU0rN0MsR0FBRzE1QyxHQUFHLENBQUMwSixFQUFFdEwsRUFBRSswQyxPQUFPd0csSUFBSSxPQUFPMzVDLElBQUlxNUMsR0FBR3I1QyxFQUFFMEosRUFBRXRMLEdBQUd3N0MsR0FBR0YsR0FBRyxNQUFNL0UsR0FBRytFLEdBQUcsS0FBS0csR0FBR0gsR0FBRyxNQUFNVixHQUFHVSxHQUFHLEtBQUs5RSxHQUFHOEUsR0FBRyxPQUFPSCxHQUFHRyxHQUFHLE1BQU1JLEdBQUdKLEdBQUcsTUFBTUssR0FBR0wsR0FBRyxPQUFPTSxHQUFHTixHQUFHLE9BQU8sU0FBU08sR0FBR2o2QyxFQUFFMEosRUFBRXlwQyxJQUFJa0csR0FBRyxLQUFLcjVDLEVBQUUwSixFQUFFLENBQUMsU0FBU3d3QyxHQUFHbDZDLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFaXdDLEdBQUcsR0FBRyxPQUFPandDLEVBQUUsT0FBTzRCLEVBQUUsTUFBTXJMLEVBQUV3bEQsR0FBRy83QyxJQUFJQSxFQUFFb3RDLE1BQU0za0IsRUFBRTdtQixFQUFFaXdDLE9BQU9qd0MsRUFBRWl3QyxLQUFLLElBQUksSUFBSSxJQUFJdHlDLEVBQUUsRUFBRUEsRUFBRStMLEVBQUU3VCxPQUFPOEgsSUFBSSxDQUFDLElBQUlxQyxFQUFFNUIsRUFBRXZELEVBQUUya0MsRUFBRWMsSUFBRzUyQixFQUFFL0wsR0FBR3FpQyxHQUFFaGdDLEtBQUtBLEVBQUUsQ0FBQ282QyxRQUFRcDZDLEVBQUVxNkMsUUFBUXI2QyxJQUFJQSxFQUFFK3pDLE1BQU1DLEdBQUc1MUMsR0FBR3lvQixFQUFFL25CLEtBQUssQ0FBQ3c3QyxJQUFJdDZDLEVBQUV1NkMsU0FBUzVsRCxFQUFFa0YsTUFBTXVFLEVBQUVvOEMsY0FBUyxFQUFPQyxJQUFJNS9DLEVBQUU2L0MsVUFBVWxiLEdBQUcsQ0FBQyxPQUFPeC9CLENBQUMsQ0FBQyxTQUFTMjZDLEdBQUczNkMsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRyxNQUFNa3lCLEVBQUU3bUIsRUFBRWl3QyxLQUFLdHlDLEVBQUUrTCxHQUFHQSxFQUFFdW1DLEtBQUssSUFBSSxJQUFJcDFDLEVBQUUsRUFBRUEsRUFBRWdzQixFQUFFaHhCLE9BQU9nRixJQUFJLENBQUMsTUFBTTJrQyxFQUFFM1ksRUFBRWhzQixHQUFHOEMsSUFBSTZoQyxFQUFFZ2IsU0FBUzc4QyxFQUFFOUMsR0FBR2hCLE9BQU8sSUFBSTZsQyxFQUFFRixFQUFFOGEsSUFBSTNsRCxHQUFHK3FDLElBQUkyRSxLQUFLeUgsR0FBR3BNLEVBQUV0aEMsRUFBRSxFQUFFLENBQUM0QixFQUFFOEksR0FBRzAyQixFQUFFeC9CLEVBQUUwSixJQUFJNDZCLEtBQUssQ0FBQyxDQUFDLFNBQVNzVyxHQUFHNTZDLEVBQUUwSixHQUFHLE9BQU9teEMsR0FBRyxhQUFhNzZDLEdBQUUsRUFBRzBKLElBQUkxSixDQUFDLENBQUMsTUFBTTg2QyxHQUFHeFgsU0FBUyxTQUFTeVgsR0FBRy82QyxHQUFHLE9BQU91L0IsR0FBRXYvQixHQUFHNjZDLEdBQUcsYUFBYTc2QyxHQUFFLElBQUtBLEVBQUVBLEdBQUc4NkMsRUFBRSxDQUFDLFNBQVNFLEdBQUdoN0MsR0FBRyxPQUFPNjZDLEdBQUcsYUFBYTc2QyxFQUFFLENBQUMsU0FBUzY2QyxHQUFHNzZDLEVBQUUwSixFQUFFdEwsR0FBRSxFQUFHekosR0FBRSxHQUFJLE1BQU1reUIsRUFBRXduQixJQUFJOEUsR0FBRyxHQUFHdHNCLEVBQUUsQ0FBQyxNQUFNem9CLEVBQUV5b0IsRUFBRXZzQixLQUFLLEdBQUcsZUFBZTBGLEVBQUUsQ0FBQyxNQUFNQSxFQUFFcTRDLEdBQUdqNkMsR0FBRSxHQUFJLEdBQUc0QixJQUFJQSxJQUFJMEosR0FBRzFKLElBQUltOUIsR0FBRXp6QixJQUFJMUosSUFBSXFoQyxHQUFFbEUsR0FBRXp6QixLQUFLLE9BQU90TCxDQUFDLENBQUMsTUFBTVQsRUFBRXM5QyxHQUFHcDBCLEVBQUU3bUIsSUFBSTVCLEVBQUU0QixHQUFHMEosSUFBSXV4QyxHQUFHcDBCLEVBQUVza0IsV0FBV25yQyxHQUFHMEosR0FBRyxPQUFPL0wsR0FBR2hKLEVBQUV5SixFQUFFVCxDQUFDLENBQUMsQ0FBQyxTQUFTczlDLEdBQUdqN0MsRUFBRTBKLEdBQUcsT0FBTzFKLElBQUlBLEVBQUUwSixJQUFJMUosRUFBRW05QixHQUFFenpCLEtBQUsxSixFQUFFcWhDLEdBQUVsRSxHQUFFenpCLEtBQUssQ0FBQyxTQUFTd3hDLEdBQUdsN0MsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRyxJQUFJa3lCLEVBQUUsTUFBTWxwQixFQUFFUyxHQUFHQSxFQUFFekosR0FBRyxHQUFHMnFDLEdBQUV0L0IsSUFBSXUvQixHQUFFdi9CLEdBQUcsQ0FBQzZtQixFQUFFLElBQUluSSxNQUFNMWUsRUFBRW5LLFFBQVEsSUFBSSxJQUFJdUksRUFBRSxFQUFFekosRUFBRXFMLEVBQUVuSyxPQUFPdUksRUFBRXpKLEVBQUV5SixJQUFJeW9CLEVBQUV6b0IsR0FBR3NMLEVBQUUxSixFQUFFNUIsR0FBR0EsT0FBRSxFQUFPVCxHQUFHQSxFQUFFUyxHQUFHLE1BQU0sR0FBRyxpQkFBaUI0QixFQUFFLENBQUM2bUIsRUFBRSxJQUFJbkksTUFBTTFlLEdBQUcsSUFBSSxJQUFJNUIsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRTVCLElBQUl5b0IsRUFBRXpvQixHQUFHc0wsRUFBRXRMLEVBQUUsRUFBRUEsT0FBRSxFQUFPVCxHQUFHQSxFQUFFUyxHQUFHLE1BQU0sR0FBR3FoQyxHQUFFei9CLEdBQUcsR0FBR0EsRUFBRXNqQyxPQUFPc0UsVUFBVS9nQixFQUFFbkksTUFBTXk4QixLQUFLbjdDLEdBQUcsQ0FBQ0EsRUFBRTVCLElBQUlzTCxFQUFFMUosRUFBRTVCLE9BQUUsRUFBT1QsR0FBR0EsRUFBRVMsVUFBVSxDQUFDLE1BQU1BLEVBQUVnSixPQUFPMDRCLEtBQUs5L0IsR0FBRzZtQixFQUFFLElBQUluSSxNQUFNdGdCLEVBQUV2SSxRQUFRLElBQUksSUFBSWxCLEVBQUUsRUFBRWtHLEVBQUV1RCxFQUFFdkksT0FBT2xCLEVBQUVrRyxFQUFFbEcsSUFBSSxDQUFDLE1BQU1rRyxFQUFFdUQsRUFBRXpKLEdBQUdreUIsRUFBRWx5QixHQUFHK1UsRUFBRTFKLEVBQUVuRixHQUFHQSxFQUFFbEcsRUFBRWdKLEdBQUdBLEVBQUVoSixHQUFHLENBQUMsTUFBTWt5QixFQUFFLEdBQUcsT0FBT3pvQixJQUFJQSxFQUFFekosR0FBR2t5QixHQUFHQSxDQUFDLENBQUMsU0FBU3UwQixHQUFHcDdDLEVBQUUwSixHQUFHLElBQUksSUFBSXRMLEVBQUUsRUFBRUEsRUFBRXNMLEVBQUU3VCxPQUFPdUksSUFBSSxDQUFDLE1BQU16SixFQUFFK1UsRUFBRXRMLEdBQUcsR0FBR2toQyxHQUFFM3FDLEdBQUcsSUFBSSxJQUFJK1UsRUFBRSxFQUFFQSxFQUFFL1UsRUFBRWtCLE9BQU82VCxJQUFJMUosRUFBRXJMLEVBQUUrVSxHQUFHL0ksTUFBTWhNLEVBQUUrVSxHQUFHM1QsUUFBUXBCLElBQUlxTCxFQUFFckwsRUFBRWdNLE1BQU1oTSxFQUFFb0IsR0FBRyxDQUFDLE9BQU9pSyxDQUFDLENBQUMsU0FBU3E3QyxHQUFHcjdDLEVBQUUwSixFQUFFdEwsRUFBRSxDQUFFLEVBQUN6SixFQUFFa3lCLEdBQUcsR0FBR3duQixHQUFHaU4sTUFBTWpOLEdBQUcvaEMsUUFBUTRxQyxHQUFHN0ksR0FBRy9oQyxTQUFTK2hDLEdBQUcvaEMsT0FBT2d2QyxLQUFLLE9BQU96TCxHQUFHLE9BQU8sWUFBWW5tQyxFQUFFLEtBQUssQ0FBQy9JLEtBQUsrSSxHQUFHL1UsR0FBR0EsS0FBSyxJQUFJZ0osRUFBRXFDLEVBQUUwSixHQUFHL0wsR0FBR0EsRUFBRW94QyxLQUFLcHhDLEVBQUVreEMsSUFBRyxHQUFJK0QsS0FBSyxNQUFNLzNDLEVBQUU4QyxHQUFHNDlDLEdBQUc1OUMsRUFBRVMsSUFBSW9oQyxFQUFFZ2MsR0FBR3pFLEdBQUcsQ0FBQzd1QyxJQUFJOUosRUFBRThKLEtBQU0sSUFBR3dCLEtBQUs3TyxJQUFJbEcsRUFBRUEsSUFBSSxJQUFJa0csR0FBRyxJQUFJbUYsRUFBRWs4QixFQUFFLElBQUksR0FBRyxPQUFPclYsR0FBRzJZLEVBQUVpYyxVQUFVamMsRUFBRStZLGFBQWEsQ0FBQy9ZLEVBQUVpYyxRQUFRLE9BQU85OUMsR0FBR0EsRUFBRW94QyxLQUFLcHhDLEVBQUVreEMsSUFBRyxHQUFJclAsQ0FBQyxDQUFDLFNBQVMrYixHQUFHdjdDLEdBQUcsT0FBT0EsRUFBRTZrQixNQUFNN2tCLElBQUkreUMsR0FBRy95QyxJQUFJQSxFQUFFMUYsT0FBT3cxQyxNQUFNOXZDLEVBQUUxRixPQUFPeThDLEtBQUt3RSxHQUFHdjdDLEVBQUU0eEMsYUFBYTV4QyxFQUFFLElBQUksQ0FBQyxTQUFTMDdDLEdBQUcxN0MsR0FBRyxNQUFNMEosRUFBRSxDQUFBLEVBQUcsSUFBSSxNQUFNdEwsS0FBSzRCLEVBQUUwSixFQUFFNDNCLEdBQUVsakMsSUFBSTRCLEVBQUU1QixHQUFHLE9BQU9zTCxDQUFDLENBQUMsTUFBTWl5QyxHQUFHMzdDLEdBQUdBLEVBQUU0N0MsR0FBRzU3QyxHQUFHbTZDLEdBQUduNkMsSUFBSUEsRUFBRXdyQyxNQUFNbVEsR0FBRzM3QyxFQUFFc00sUUFBUSxLQUFLdXZDLEdBQUc3d0MsR0FBRTVELE9BQU93eUIsT0FBTyxNQUFNLENBQUN2akMsRUFBRTJKLEdBQUdBLEVBQUU4N0MsSUFBSTk3QyxHQUFHQSxFQUFFcXJDLE1BQU12aUMsR0FBR2l6QyxNQUFNLzdDLEdBQUdBLEVBQUU5RyxLQUFLOGlELE9BQU9oOEMsR0FBR0EsRUFBRTByQyxNQUFNdVEsT0FBT2o4QyxHQUFHQSxFQUFFb3ZDLE1BQU04TSxPQUFPbDhDLEdBQUdBLEVBQUVtdkMsTUFBTWdOLE1BQU1uOEMsR0FBR0EsRUFBRW84QyxLQUFLQyxRQUFRcjhDLEdBQUcyN0MsR0FBRzM3QyxFQUFFc00sUUFBUWd3QyxNQUFNdDhDLEdBQUcyN0MsR0FBRzM3QyxFQUFFdThDLE1BQU1DLE1BQU14OEMsR0FBR0EsRUFBRXFsQixLQUFLbzNCLFNBQVN6OEMsR0FBRzBtQixHQUFHMW1CLEdBQUcwOEMsYUFBYTE4QyxHQUFHQSxFQUFFMi9CLElBQUkzL0IsRUFBRTIvQixFQUFFLElBQUlrTixHQUFHN3NDLEVBQUV3b0IsU0FBU20wQixVQUFVMzhDLEdBQUdBLEVBQUU1QixJQUFJNEIsRUFBRTVCLEVBQUV3dUMsR0FBRzd6QixLQUFLL1ksRUFBRXdyQyxRQUFRb1IsT0FBTzU4QyxHQUFHazBDLEdBQUduN0IsS0FBSy9ZLEtBQUs2OEMsR0FBRyxDQUFDaG9DLEtBQUtxbkIsRUFBRWw4QixHQUFHMEosR0FBRyxNQUFNNmxDLElBQUlueEMsRUFBRWt4QyxXQUFXMzZDLEVBQUV1RSxLQUFLMnRCLEVBQUU2a0IsTUFBTS90QyxFQUFFbS9DLFlBQVlqaUQsRUFBRVAsS0FBS2tsQyxFQUFFMkwsV0FBV3pMLEdBQUcxL0IsRUFBRSxJQUFJb0ssRUFBRSxHQUFHLE1BQU1WLEVBQUUsR0FBRyxDQUFDLE1BQU04MUIsRUFBRTNrQyxFQUFFNk8sR0FBRyxRQUFHLElBQVM4MUIsRUFBRSxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPN3FDLEVBQUUrVSxHQUFHLEtBQUssRUFBRSxPQUFPbWQsRUFBRW5kLEdBQUcsS0FBSyxFQUFFLE9BQU90TCxFQUFFc0wsR0FBRyxLQUFLLEVBQUUsT0FBTy9MLEVBQUUrTCxPQUFPLENBQUMsR0FBRy9VLElBQUkyckMsSUFBR0ssR0FBRWhzQyxFQUFFK1UsR0FBRyxPQUFPN08sRUFBRTZPLEdBQUcsRUFBRS9VLEVBQUUrVSxHQUFHLEdBQUdtZCxJQUFJeVosSUFBR0ssR0FBRTlaLEVBQUVuZCxHQUFHLE9BQU83TyxFQUFFNk8sR0FBRyxFQUFFbWQsRUFBRW5kLEdBQUcsSUFBSVUsRUFBRXBLLEVBQUVrdkMsYUFBYSxLQUFLdk8sR0FBRXYyQixFQUFFVixHQUFHLE9BQU83TyxFQUFFNk8sR0FBRyxFQUFFL0wsRUFBRStMLEdBQUcsR0FBR3RMLElBQUlraUMsSUFBR0ssR0FBRXZpQyxFQUFFc0wsR0FBRyxPQUFPN08sRUFBRTZPLEdBQUcsRUFBRXRMLEVBQUVzTCxHQUFHcXpDLEtBQUtsaUQsRUFBRTZPLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTTBpQixFQUFFeXZCLEdBQUdueUMsR0FBRyxJQUFJblEsRUFBRW9tQyxFQUFFLE9BQU92VCxHQUFHLFdBQVcxaUIsR0FBRzY2QixHQUFHdmtDLEVBQUUsRUFBRTBKLEdBQUcwaUIsRUFBRXBzQixLQUFLekcsRUFBRWltQyxFQUFFd2QsZ0JBQWdCempELEVBQUVBLEVBQUVtUSxJQUFJblEsRUFBRTZFLElBQUlraUMsSUFBR0ssR0FBRXZpQyxFQUFFc0wsSUFBSTdPLEVBQUU2TyxHQUFHLEVBQUV0TCxFQUFFc0wsS0FBS2kyQixFQUFFRCxFQUFFMTVCLE9BQU9pM0MsaUJBQWlCdGMsR0FBRWhCLEVBQUVqMkIsR0FBR2kyQixFQUFFajJCLFFBQUcsRUFBUSxFQUFDbkMsS0FBSzIwQixFQUFFbDhCLEdBQUcwSixFQUFFdEwsR0FBRyxNQUFNbEYsS0FBS3ZFLEVBQUUyNkMsV0FBV3pvQixFQUFFMG9CLElBQUk1eEMsR0FBR3FDLEVBQUUsT0FBTzZtQixJQUFJeVosSUFBR0ssR0FBRTlaLEVBQUVuZCxJQUFJbWQsRUFBRW5kLEdBQUd0TCxHQUFFLEdBQUl6SixJQUFJMnJDLElBQUdLLEdBQUVoc0MsRUFBRStVLElBQUkvVSxFQUFFK1UsR0FBR3RMLEdBQUUsS0FBS3VpQyxHQUFFM2dDLEVBQUUwckMsTUFBTWhpQyxJQUFNLE1BQU1BLEVBQUUsSUFBTUEsRUFBRWxOLE1BQU0sS0FBS3dELElBQU1yQyxFQUFFK0wsR0FBR3RMLEVBQUUsR0FBSyxFQUFDcTJCLEtBQUt5SCxHQUFHaGpDLEtBQUs4RyxFQUFFc3ZDLFdBQVc1bEMsRUFBRW96QyxZQUFZMStDLEVBQUVteEMsSUFBSTU2QyxFQUFFdzJDLFdBQVd0a0IsRUFBRXFvQixhQUFhdnhDLElBQUk5QyxHQUFHLElBQUkya0MsRUFBRSxRQUFRcGhDLEVBQUV2RCxJQUFJbUYsSUFBSXNnQyxJQUFHSyxHQUFFM2dDLEVBQUVuRixJQUFJNk8sSUFBSTQyQixJQUFHSyxHQUFFajNCLEVBQUU3TyxLQUFLMmtDLEVBQUU3aEMsRUFBRSxLQUFLZ2pDLEdBQUVuQixFQUFFM2tDLElBQUk4bEMsR0FBRWhzQyxFQUFFa0csSUFBSThsQyxHQUFFa2IsR0FBR2hoRCxJQUFJOGxDLEdBQUU5WixFQUFFN2dCLE9BQU9pM0MsaUJBQWlCcGlELEVBQUcsRUFBQzZtQyxlQUFlMWhDLEVBQUUwSixFQUFFdEwsR0FBRyxPQUFPLE1BQU1BLEVBQUV5VyxJQUFJN1UsRUFBRWs4QixFQUFFNGdCLFlBQVlwekMsR0FBRyxFQUFFaTNCLEdBQUV2aUMsRUFBRSxVQUFVeEosS0FBSzJTLElBQUl2SCxFQUFFMEosRUFBRXRMLEVBQUV2RSxNQUFNLE1BQU1rc0MsUUFBUXJFLGVBQWUxaEMsRUFBRTBKLEVBQUV0TCxFQUFFLEdBQUc4K0MsR0FBR2x5QyxHQUFFLENBQUUsRUFBQzZ4QyxHQUFHLENBQUNob0MsSUFBSTdVLEVBQUUwSixHQUFHLEdBQUdBLElBQUk0NUIsT0FBTzZaLFlBQVksT0FBT04sR0FBR2hvQyxJQUFJN1UsRUFBRTBKLEVBQUUxSixFQUFHLEVBQUN5MEIsSUFBSSxDQUFDejBCLEVBQUU1QixJQUFJLE1BQU1BLEVBQUUsS0FBS3NMLEVBQUV0TCxLQUFLLElBQUkyK0MsSUFBRyxFQUEyakQsU0FBU0ssR0FBR3A5QyxFQUFFMEosRUFBRXRMLEdBQUcwdEMsR0FBR3hNLEdBQUV0L0IsR0FBR0EsRUFBRTFHLEtBQUswRyxHQUFHQSxFQUFFK1ksS0FBS3JQLEVBQUU4aEMsU0FBU3hyQyxFQUFFK1ksS0FBS3JQLEVBQUU4aEMsT0FBTzloQyxFQUFFdEwsRUFBRSxDQUFDLFNBQVNpL0MsR0FBR3I5QyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE1BQU1reUIsRUFBRWx5QixFQUFFNFEsU0FBUyxLQUFLNHVDLEdBQUcvMUMsRUFBRXpKLEdBQUcsSUFBSXlKLEVBQUV6SixHQUFHLEdBQUc0cUMsR0FBRXYvQixHQUFHLENBQUMsTUFBTTVCLEVBQUVzTCxFQUFFMUosR0FBR2dnQyxHQUFFNWhDLElBQUl5MUMsR0FBR2h0QixFQUFFem9CLEVBQUcsTUFBSyxHQUFHNGhDLEdBQUVoZ0MsR0FBRzZ6QyxHQUFHaHRCLEVBQUU3bUIsRUFBRStZLEtBQUszYSxTQUFTLEdBQUdxaEMsR0FBRXovQixHQUFHLEdBQUdzL0IsR0FBRXQvQixHQUFHQSxFQUFFcUYsU0FBU3JGLEdBQUdxOUMsR0FBR3I5QyxFQUFFMEosRUFBRXRMLEVBQUV6SixTQUFTLENBQUMsTUFBTUEsRUFBRXFyQyxHQUFFaGdDLEVBQUVzekIsU0FBU3R6QixFQUFFc3pCLFFBQVF2YSxLQUFLM2EsR0FBR3NMLEVBQUUxSixFQUFFc3pCLFNBQVMwTSxHQUFFcnJDLElBQUlrL0MsR0FBR2h0QixFQUFFbHlCLEVBQUVxTCxFQUFFLENBQUMsQ0FBQyxTQUFTMG1CLEdBQUcxbUIsR0FBRyxNQUFNMEosRUFBRTFKLEVBQUUxRixNQUFNNHpDLE9BQU85dkMsRUFBRSt2QyxRQUFReDVDLEdBQUcrVSxHQUFHd2tDLE9BQU9ybkIsRUFBRXkyQixhQUFhMy9DLEVBQUVxSSxRQUFRdTNDLHNCQUFzQjFpRCxJQUFJbUYsRUFBRW1yQyxXQUFXM0wsRUFBRTdoQyxFQUFFa1gsSUFBSW5MLEdBQUcsSUFBSWcyQixFQUFFLE9BQU9GLEVBQUVFLEVBQUVGLEVBQUUzWSxFQUFFaHhCLFFBQVF1SSxHQUFHekosR0FBRytxQyxFQUFFLENBQUUsRUFBQzdZLEVBQUVoeEIsUUFBUWd4QixFQUFFeGhCLFNBQVNyRixHQUFHdzlDLEdBQUc5ZCxFQUFFMS9CLEVBQUVuRixHQUFFLEtBQU0yaUQsR0FBRzlkLEVBQUVoMkIsRUFBRTdPLElBQUk2a0MsRUFBRWgyQixFQUFFL0wsRUFBRTRKLElBQUltQyxFQUFFZzJCLEdBQUdBLENBQUMsQ0FBQyxTQUFTOGQsR0FBR3g5QyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFFLEdBQUksTUFBTXU1QyxPQUFPcm5CLEVBQUVzbkIsUUFBUXh3QyxHQUFHK0wsRUFBRS9MLEdBQUc2L0MsR0FBR3g5QyxFQUFFckMsRUFBRVMsR0FBRSxHQUFJeW9CLEdBQUdBLEVBQUV4aEIsU0FBU3FFLEdBQUc4ekMsR0FBR3g5QyxFQUFFMEosRUFBRXRMLEdBQUUsS0FBTSxJQUFJLE1BQU12RCxLQUFLNk8sRUFBRSxHQUFHL1UsR0FBRyxXQUFXa0csT0FBTyxDQUFDLE1BQU1sRyxFQUFFOG9ELEdBQUc1aUQsSUFBSXVELEdBQUdBLEVBQUV2RCxHQUFHbUYsRUFBRW5GLEdBQUdsRyxFQUFFQSxFQUFFcUwsRUFBRW5GLEdBQUc2TyxFQUFFN08sSUFBSTZPLEVBQUU3TyxFQUFFLENBQUMsT0FBT21GLENBQUMsQ0FBQyxNQUFNeTlDLEdBQUcsQ0FBQ3ZrRCxLQUFLd2tELEdBQUdoUyxNQUFNaVMsR0FBRzFQLE1BQU0wUCxHQUFHQyxRQUFRRCxHQUFHOVksU0FBUzhZLEdBQUdFLGFBQWFDLEdBQUdDLFFBQVFELEdBQUdFLFlBQVlGLEdBQUcxRCxRQUFRMEQsR0FBR0csYUFBYUgsR0FBR3pELFFBQVF5RCxHQUFHSSxjQUFjSixHQUFHSyxjQUFjTCxHQUFHTSxVQUFVTixHQUFHTyxVQUFVUCxHQUFHUSxVQUFVUixHQUFHUyxZQUFZVCxHQUFHVSxjQUFjVixHQUFHVyxlQUFlWCxHQUFHWSxXQUFXZixHQUFHZ0IsV0FBV2hCLEdBQUdpQixNQUFNLFNBQVM1K0MsRUFBRTBKLEdBQUcsSUFBSTFKLEVBQUUsT0FBTzBKLEVBQUUsSUFBSUEsRUFBRSxPQUFPMUosRUFBRSxNQUFNNUIsRUFBRTRNLEdBQUU1RCxPQUFPd3lCLE9BQU8sTUFBTTU1QixHQUFHLElBQUksTUFBTXJMLEtBQUsrVSxFQUFFdEwsRUFBRXpKLEdBQUdtcEQsR0FBRzk5QyxFQUFFckwsR0FBRytVLEVBQUUvVSxJQUFJLE9BQU95SixDQUFFLEVBQUN5Z0QsUUFBUW5CLEdBQUdvQixPQUFPLFNBQVM5K0MsRUFBRTBKLEdBQUcsT0FBT2kwQyxHQUFHb0IsR0FBRy8rQyxHQUFHKytDLEdBQUdyMUMsR0FBRyxHQUFHLFNBQVNnMEMsR0FBRzE5QyxFQUFFMEosR0FBRyxPQUFPQSxFQUFFMUosRUFBRSxXQUFXLE9BQU9nTCxHQUFFZzFCLEdBQUVoZ0MsR0FBR0EsRUFBRStPLEtBQUtuYSxLQUFLQSxNQUFNb0wsRUFBRWdnQyxHQUFFdDJCLEdBQUdBLEVBQUVxRixLQUFLbmEsS0FBS0EsTUFBTThVLElBQUlBLEVBQUUxSixDQUFDLENBQUMsU0FBUysrQyxHQUFHLytDLEdBQUcsR0FBR3MvQixHQUFFdC9CLEdBQUcsQ0FBQyxNQUFNMEosRUFBRSxDQUFBLEVBQUcsSUFBSSxJQUFJdEwsRUFBRSxFQUFFQSxFQUFFNEIsRUFBRW5LLE9BQU91SSxJQUFJc0wsRUFBRTFKLEVBQUU1QixJQUFJNEIsRUFBRTVCLEdBQUcsT0FBT3NMLENBQUMsQ0FBQyxPQUFPMUosQ0FBQyxDQUFDLFNBQVM4OUMsR0FBRzk5QyxFQUFFMEosR0FBRyxPQUFPMUosRUFBRSxJQUFJLElBQUk2aUMsSUFBSSxHQUFHcU4sT0FBT2x3QyxFQUFFMEosS0FBS0EsQ0FBQyxDQUFDLFNBQVNpMEMsR0FBRzM5QyxFQUFFMEosR0FBRyxPQUFPMUosRUFBRWdMLEdBQUVBLEdBQUU1RCxPQUFPd3lCLE9BQU8sTUFBTTU1QixHQUFHMEosR0FBR0EsQ0FBQyxDQUFDLFNBQVMwRixHQUFHcFAsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRyxNQUFNa3lCLEVBQUVscEIsR0FBR3FDLEVBQUVrdkMsYUFBYSxJQUFJcjBDLEVBQUUya0MsR0FBRSxFQUFHLEdBQUc5MUIsRUFBRSxJQUFJLElBQUlnMkIsS0FBS2gyQixFQUFFLENBQUMsR0FBR3EzQixHQUFFckIsR0FBRyxTQUFTLE1BQU10MUIsRUFBRVYsRUFBRWcyQixHQUFHLElBQUl0VCxFQUFFdkYsR0FBRzhaLEdBQUU5WixFQUFFdUYsRUFBRStRLEdBQUV1QyxJQUFJL2hDLEdBQUdBLEVBQUU0SCxTQUFTNm1CLElBQUl2eEIsSUFBSUEsRUFBRSxDQUFBLElBQUt1eEIsR0FBR2hpQixFQUFFaE0sRUFBRWd1QixHQUFHaGlCLEVBQUVna0MsR0FBR3B1QyxFQUFFZy9DLGFBQWF0ZixJQUFJQSxLQUFLL3FDLEdBQUd5VixJQUFJelYsRUFBRStxQyxLQUFLL3FDLEVBQUUrcUMsR0FBR3QxQixFQUFFbzFCLEdBQUUsRUFBRyxDQUFDLEdBQUc3aEMsRUFBRSxDQUFDLE1BQU0rTCxFQUFFKzdCLEdBQUdybkMsR0FBR3pKLEVBQUVrRyxHQUFHeWxDLEdBQUUsSUFBSSxJQUFJemxDLEVBQUUsRUFBRUEsRUFBRThDLEVBQUU5SCxPQUFPZ0YsSUFBSSxDQUFDLE1BQU0ya0MsRUFBRTdoQyxFQUFFOUMsR0FBR3VELEVBQUVvaEMsR0FBR3lmLEdBQUdwNEIsRUFBRW5kLEVBQUU4MUIsRUFBRTdxQyxFQUFFNnFDLEdBQUd4L0IsR0FBRzJnQyxHQUFFaHNDLEVBQUU2cUMsR0FBRyxDQUFDLENBQUMsT0FBT0EsQ0FBQyxDQUFDLFNBQVN5ZixHQUFHai9DLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixHQUFHLE1BQU05QyxFQUFFbUYsRUFBRTVCLEdBQUcsR0FBRyxNQUFNdkQsRUFBRSxDQUFDLE1BQU1tRixFQUFFMmdDLEdBQUU5bEMsRUFBRSxXQUFXLEdBQUdtRixRQUFHLElBQVNyTCxFQUFFLENBQUMsTUFBTXFMLEVBQUVuRixFQUFFaTNDLFFBQVEsR0FBR2ozQyxFQUFFUCxPQUFPdzZDLFVBQVU5VSxHQUFFaGdDLEdBQUcsQ0FBQyxNQUFNay9DLGNBQWN2aEQsR0FBR2twQixFQUFFem9CLEtBQUtULEVBQUVoSixFQUFFZ0osRUFBRVMsSUFBSWcyQyxHQUFHdnRCLEdBQUdseUIsRUFBRWdKLEVBQUVTLEdBQUc0QixFQUFFK08sS0FBSyxLQUFLckYsR0FBRzJxQyxXQUFXMS9DLEVBQUVxTCxDQUFDLENBQUNuRixFQUFFLEtBQUs4QyxJQUFJcUMsRUFBRXJMLEdBQUUsR0FBSWtHLEVBQUUsSUFBSSxLQUFLbEcsR0FBR0EsSUFBSXlzQyxHQUFFaGpDLEtBQUt6SixHQUFFLEdBQUksQ0FBQyxPQUFPQSxDQUFDLENBQUMsU0FBU3dxRCxHQUFHbi9DLEVBQUUwSixFQUFFdEwsR0FBRSxHQUFJLE1BQU16SixFQUFFK1UsRUFBRTAxQyxXQUFXdjRCLEVBQUVseUIsRUFBRWtnQixJQUFJN1UsR0FBRyxHQUFHNm1CLEVBQUUsT0FBT0EsRUFBRSxNQUFNbHBCLEVBQUVxQyxFQUFFMHJDLE1BQU03d0MsRUFBRSxDQUFFLEVBQUMya0MsRUFBRSxHQUFHLElBQUlFLEdBQUUsRUFBRyxJQUFJTSxHQUFFaGdDLEdBQUcsQ0FBQyxNQUFNckwsRUFBRXFMLElBQUkwL0IsR0FBRSxFQUFHLE1BQU10aEMsRUFBRXpKLEdBQUd3cUQsR0FBR24vQyxFQUFFMEosR0FBRSxHQUFJc0IsR0FBRW5RLEVBQUV1RCxHQUFHekosR0FBRzZxQyxFQUFFMWdDLFFBQVFuSyxFQUFFLEdBQUd5SixHQUFHc0wsRUFBRXdrQyxPQUFPcjRDLFFBQVE2VCxFQUFFd2tDLE9BQU83b0MsUUFBUTFRLEdBQUdxTCxFQUFFbXVDLFNBQVN4NUMsRUFBRXFMLEVBQUVtdUMsU0FBU251QyxFQUFFa3VDLFFBQVFsdUMsRUFBRWt1QyxPQUFPN29DLFFBQVExUSxFQUFFLENBQUMsSUFBSWdKLElBQUkraEMsRUFBRSxPQUFPL3FDLEVBQUU0UyxJQUFJdkgsRUFBRW1QLElBQUdBLEdBQUUsR0FBR213QixHQUFFM2hDLEdBQUcsSUFBSSxJQUFJeXVCLEVBQUUsRUFBRUEsRUFBRXp1QixFQUFFOUgsT0FBT3UyQixJQUFJLENBQUMsTUFBTXBzQixFQUFFbTlCLEdBQUV4L0IsRUFBRXl1QixJQUFJaXpCLEdBQUdyL0MsS0FBS25GLEVBQUVtRixHQUFHc2dDLEdBQUcsTUFBSyxHQUFHM2lDLEVBQUUsSUFBSSxNQUFNeXVCLEtBQUt6dUIsRUFBRSxDQUFDLE1BQU1xQyxFQUFFbTlCLEdBQUUvUSxHQUFHLEdBQUdpekIsR0FBR3IvQyxHQUFHLENBQUMsTUFBTTBKLEVBQUUvTCxFQUFFeXVCLEdBQUdodUIsRUFBRXZELEVBQUVtRixHQUFHcy9CLEdBQUU1MUIsSUFBSXMyQixHQUFFdDJCLEdBQUcsQ0FBQ3BQLEtBQUtvUCxHQUFHQSxFQUFFLEdBQUd0TCxFQUFFLENBQUMsTUFBTXNMLEVBQUU0MUMsR0FBR3JLLFFBQVE3MkMsRUFBRTlELE1BQU0zRixFQUFFMnFELEdBQUcxb0QsT0FBT3dILEVBQUU5RCxNQUFNOEQsRUFBRSxHQUFHc0wsR0FBRyxFQUFFdEwsRUFBRSxHQUFHekosRUFBRSxHQUFHK1UsRUFBRS9VLEdBQUcrVSxHQUFHLEdBQUdpM0IsR0FBRXZpQyxFQUFFLGFBQWFvaEMsRUFBRTFnQyxLQUFLa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNb0ssRUFBRSxDQUFDdlAsRUFBRTJrQyxHQUFHLE9BQU83cUMsRUFBRTRTLElBQUl2SCxFQUFFb0ssR0FBR0EsQ0FBQyxDQUFDLFNBQVNpMUMsR0FBR3IvQyxHQUFHLE1BQU0sTUFBTUEsRUFBRSxFQUFFLENBQUMsU0FBU3UvQyxHQUFHdi9DLEdBQUcsTUFBTTBKLEVBQUUxSixHQUFHQSxFQUFFeEcsV0FBV2laLE1BQU0sc0JBQXNCLE9BQU8vSSxFQUFFQSxFQUFFLEdBQUcsT0FBTzFKLEVBQUUsT0FBTyxFQUFFLENBQUMsU0FBU3cvQyxHQUFHeC9DLEVBQUUwSixHQUFHLE9BQU82MUMsR0FBR3YvQyxLQUFLdS9DLEdBQUc3MUMsRUFBRSxDQUFDLFNBQVM0MUMsR0FBR3QvQyxFQUFFMEosR0FBRyxPQUFPNDFCLEdBQUU1MUIsR0FBR0EsRUFBRXNELFdBQVd0RCxHQUFHODFDLEdBQUc5MUMsRUFBRTFKLEtBQUtnZ0MsR0FBRXQyQixJQUFJODFDLEdBQUc5MUMsRUFBRTFKLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTXkvQyxHQUFHei9DLEdBQUcsTUFBTUEsRUFBRSxJQUFJLFlBQVlBLEVBQUUwL0MsR0FBRzEvQyxHQUFHcy9CLEdBQUV0L0IsR0FBR0EsRUFBRTFHLElBQUlvMkMsSUFBSSxDQUFDQSxHQUFHMXZDLElBQUkyL0MsR0FBRyxDQUFDMy9DLEVBQUUwSixFQUFFdEwsS0FBSyxHQUFHc0wsRUFBRTBqQyxHQUFHLE9BQU8xakMsRUFBRSxNQUFNL1UsRUFBRWk2QyxJQUFJLElBQUk1dUMsSUFBSTAvQyxHQUFHaDJDLEtBQUsxSixLQUFLNUIsR0FBRyxPQUFPekosRUFBRW82QyxJQUFHLEVBQUdwNkMsQ0FBQyxFQUFFaXJELEdBQUcsQ0FBQzUvQyxFQUFFMEosRUFBRXRMLEtBQUssTUFBTXpKLEVBQUVxTCxFQUFFNi9DLEtBQUssSUFBSSxNQUFNaDVCLEtBQUs3bUIsRUFBRSxDQUFDLEdBQUd5L0MsR0FBRzU0QixHQUFHLFNBQVMsTUFBTXpvQixFQUFFNEIsRUFBRTZtQixHQUFHLEdBQUdtWixHQUFFNWhDLEdBQUdzTCxFQUFFbWQsR0FBRzg0QixHQUFHLEVBQUV2aEQsRUFBRXpKLFFBQVEsR0FBRyxNQUFNeUosRUFBRSxDQUFDLE1BQU00QixFQUFFMC9DLEdBQUd0aEQsR0FBR3NMLEVBQUVtZCxHQUFHLElBQUk3bUIsQ0FBQyxDQUFDLEdBQUc4L0MsR0FBRyxDQUFDOS9DLEVBQUUwSixLQUFLLE1BQU10TCxFQUFFc2hELEdBQUdoMkMsR0FBRzFKLEVBQUVtdkMsTUFBTTJDLFFBQVEsSUFBSTF6QyxDQUFDLEVBQUUsU0FBUzJoRCxLQUFLLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLaDZDLE9BQU8sQ0FBQ2k2QyxZQUFZNTFDLEdBQUU2MUMsYUFBWSxFQUFHakQsaUJBQWlCLENBQUUsRUFBQ00sc0JBQXNCLENBQUUsRUFBQ3ZSLGtCQUFhLEVBQU9aLGlCQUFZLEVBQU8rVSxnQkFBZ0IsQ0FBQyxHQUFHalMsT0FBTyxHQUFHd1EsV0FBVyxDQUFFLEVBQUNDLFdBQVcsQ0FBRSxFQUFDdkwsU0FBU2hzQyxPQUFPd3lCLE9BQU8sTUFBTTBqQixhQUFhLElBQUlwYSxRQUFRa2MsV0FBVyxJQUFJbGMsUUFBUThLLFdBQVcsSUFBSTlLLFFBQVEsQ0FBQyxJQUFJa2QsR0FBRyxFQUFFLFNBQVNDLEdBQUdyZ0QsRUFBRTBKLEdBQUcsT0FBTyxTQUFTdEwsRUFBRXpKLEVBQUUsTUFBTXFyQyxHQUFFNWhDLEtBQUtBLEVBQUVnSixPQUFPMjJCLE9BQU8sQ0FBQSxFQUFHMy9CLElBQUksTUFBTXpKLEdBQUc4cUMsR0FBRTlxQyxLQUFLQSxFQUFFLE1BQU0sTUFBTWt5QixFQUFFazVCLEtBQUtwaUQsRUFBRSxJQUFJa2xDLElBQUksSUFBSWhvQyxHQUFFLEVBQUcsTUFBTTJrQyxFQUFFM1ksRUFBRW01QixJQUFJLENBQUNNLEtBQUtGLEtBQUtHLFdBQVduaUQsRUFBRW9pRCxPQUFPN3JELEVBQUU4ckQsV0FBVyxLQUFLQyxTQUFTNzVCLEVBQUU4NUIsVUFBVSxLQUFLQyxRQUFRQyxHQUFPNzZDLGFBQVMsT0FBTzZnQixFQUFFN2dCLE1BQU8sRUFBS0EsV0FBT2hHLEdBQUksRUFBQzhnRCxJQUFJLENBQUM5Z0QsS0FBSzBKLEtBQUsvTCxFQUFFODJCLElBQUl6MEIsS0FBS0EsR0FBR2dnQyxHQUFFaGdDLEVBQUUrZ0QsVUFBVXBqRCxFQUFFK21DLElBQUkxa0MsR0FBR0EsRUFBRStnRCxRQUFRdmhCLEtBQUs5MUIsSUFBSXMyQixHQUFFaGdDLEtBQUtyQyxFQUFFK21DLElBQUkxa0MsR0FBR0EsRUFBRXcvQixLQUFLOTFCLEtBQUs4MUIsR0FBR3doQixNQUFNaGhELElBQUk2bUIsRUFBRXFuQixPQUFPM29DLFNBQVN2RixJQUFJNm1CLEVBQUVxbkIsT0FBT3B2QyxLQUFLa0IsR0FBR3cvQixHQUFHMEwsVUFBVSxDQUFDbHJDLEVBQUUwSixJQUFJQSxHQUFHbWQsRUFBRTYzQixXQUFXMStDLEdBQUcwSixFQUFFODFCLEdBQUczWSxFQUFFNjNCLFdBQVcxK0MsR0FBR2loRCxVQUFVLENBQUNqaEQsRUFBRTBKLElBQUlBLEdBQUdtZCxFQUFFODNCLFdBQVczK0MsR0FBRzBKLEVBQUU4MUIsR0FBRzNZLEVBQUU4M0IsV0FBVzMrQyxHQUFHa2hELE1BQU12akQsRUFBRStoQyxFQUFFdDFCLEdBQUcsSUFBSXZQLEVBQUUsQ0FBQyxNQUFNdXhCLEVBQUV5akIsR0FBR3p4QyxFQUFFekosR0FBRyxPQUFPeTNCLEVBQUUrZSxXQUFXdGtCLEVBQUU2WSxHQUFHaDJCLEVBQUVBLEVBQUUwaUIsRUFBRXp1QixHQUFHcUMsRUFBRW9zQixFQUFFenVCLEVBQUV5TSxHQUFHdlAsR0FBRSxFQUFHMmtDLEVBQUVpaEIsV0FBVzlpRCxFQUFFQSxFQUFFd2pELFlBQVkzaEIsRUFBRTJhLEdBQUcvdEIsRUFBRThlLFlBQVk5ZSxFQUFFOGUsVUFBVU0sS0FBSyxDQUFFLEVBQUNrSCxVQUFVNzNDLElBQUltRixFQUFFLEtBQUt3L0IsRUFBRWloQixtQkFBbUJqaEIsRUFBRWloQixXQUFXVSxZQUFhLEVBQUN0QyxRQUFRLENBQUM3K0MsRUFBRTBKLEtBQUttZCxFQUFFdXNCLFNBQVNwekMsR0FBRzBKLEVBQUU4MUIsSUFBSSxPQUFPQSxFQUFFLENBQUMsU0FBUzRoQixHQUFHcGhELEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsR0FBRSxHQUFJLEdBQUd5WSxHQUFFdC9CLEdBQUcsWUFBWUEsRUFBRXFGLFNBQVMsQ0FBQ3JGLEVBQUVyQyxJQUFJeWpELEdBQUdwaEQsRUFBRTBKLElBQUk0MUIsR0FBRTUxQixHQUFHQSxFQUFFL0wsR0FBRytMLEdBQUd0TCxFQUFFekosRUFBRWt5QixLQUFLLEdBQUdxd0IsR0FBR3ZpRCxLQUFLa3lCLEVBQUUsT0FBTyxNQUFNbHBCLEVBQUUsRUFBRWhKLEVBQUU4NkMsVUFBVTBLLEdBQUd4bEQsRUFBRXUyQyxZQUFZdjJDLEVBQUV1MkMsVUFBVU0sTUFBTTcyQyxFQUFFbVUsR0FBR2pPLEVBQUVnc0IsRUFBRSxLQUFLbHBCLEdBQUc5QyxFQUFFMmtDLEVBQUUzWSxFQUFFNlksR0FBRzEvQixFQUFFb0ssRUFBRVYsR0FBR0EsRUFBRW1kLEVBQUV1RixFQUFFb1QsRUFBRTRjLE9BQU85YixHQUFFZCxFQUFFNGMsS0FBSyxDQUFBLEVBQUc1YyxFQUFFNGMsS0FBSzdpRCxFQUFFaW1DLEVBQUU4UCxXQUFXLEdBQUcsTUFBTWxsQyxHQUFHQSxJQUFJczFCLElBQUlILEdBQUVuMUIsSUFBSWdpQixFQUFFaGlCLEdBQUcsS0FBS3UyQixHQUFFcG5DLEVBQUU2USxLQUFLN1EsRUFBRTZRLEdBQUcsT0FBTzQ3QixHQUFHNTdCLEtBQUtBLEVBQUV2USxNQUFNLE9BQU9tbUMsR0FBRU4sR0FBRzZMLEdBQUc3TCxFQUFFRixFQUFFLEdBQUcsQ0FBQzNrQyxFQUFFdXhCLFFBQVEsQ0FBQyxNQUFNMWlCLEVBQUU2MUIsR0FBRUcsR0FBRy9xQyxFQUFFcXhDLEdBQUd0RyxHQUFHLEdBQUdoMkIsR0FBRy9VLEVBQUUsQ0FBQyxNQUFNNnFDLEVBQUUsS0FBSyxHQUFHeC9CLEVBQUUyL0IsRUFBRSxDQUFDLE1BQU12aEMsRUFBRXNMLEVBQUUwaUIsRUFBRXNULEdBQUdBLEVBQUU3bEMsTUFBTWd0QixFQUFFeVksR0FBRWxoQyxJQUFJOUksR0FBRThJLEVBQUVULEdBQUcyaEMsR0FBRWxoQyxHQUFHQSxFQUFFbUgsU0FBUzVILElBQUlTLEVBQUVVLEtBQUtuQixHQUFHK0wsR0FBRzBpQixFQUFFc1QsR0FBRyxDQUFDL2hDLEdBQUdnakMsR0FBRXBuQyxFQUFFbW1DLEtBQUtubUMsRUFBRW1tQyxHQUFHdFQsRUFBRXNULE1BQU1BLEVBQUU3bEMsTUFBTSxDQUFDOEQsR0FBR3FDLEVBQUUxSyxJQUFJODJCLEVBQUVwc0IsRUFBRTFLLEdBQUdvcUMsRUFBRTdsQyxPQUFRLE1BQUs2UCxHQUFHMGlCLEVBQUVzVCxHQUFHN2tDLEVBQUU4bEMsR0FBRXBuQyxFQUFFbW1DLEtBQUtubUMsRUFBRW1tQyxHQUFHN2tDLElBQUlsRyxJQUFJK3FDLEVBQUU3bEMsTUFBTWdCLEVBQUVtRixFQUFFMUssSUFBSTgyQixFQUFFcHNCLEVBQUUxSyxHQUFHdUYsR0FBRyxFQUFFQSxHQUFHMmtDLEVBQUVyL0IsSUFBSSxFQUFFOHpDLEdBQUd6VSxFQUFFcGhDLElBQUlvaEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJNmhCLElBQUcsRUFBRyxNQUFNQyxHQUFHdGhELEdBQUcsTUFBTXpLLEtBQUt5SyxFQUFFdWhELGVBQWUsa0JBQWtCdmhELEVBQUV3aEQsUUFBUUMsR0FBR3poRCxHQUFHLElBQUlBLEVBQUUwaEQsU0FBUyxTQUFTQyxHQUFHM2hELEdBQUcsTUFBTThvQyxHQUFHcC9CLEVBQUVuUSxFQUFFNkUsRUFBRXpKLEdBQUdpdEQsVUFBVWp0RCxFQUFFa3RELFdBQVdoN0IsRUFBRWk3QixZQUFZbmtELEVBQUUrekMsV0FBVzcyQyxFQUFFaVosT0FBTzByQixFQUFFdWlCLE9BQU9yaUIsRUFBRXNpQixjQUFjNTNDLElBQUlwSyxFQUFFb3NCLEVBQUUsQ0FBQ2h1QixFQUFFekosRUFBRTZxQyxFQUFFcDFCLEVBQUU2MUIsRUFBRUssR0FBRSxLQUFNLE1BQU1ueEIsRUFBRXN5QyxHQUFHcmpELElBQUksTUFBTUEsRUFBRWxGLEtBQUtnakMsRUFBRSxJQUFJelYsRUFBRXJvQixFQUFFekosRUFBRTZxQyxFQUFFcDFCLEVBQUU2MUIsRUFBRTl3QixJQUFJN1UsS0FBSytQLEVBQUV5dEMsSUFBSTFpRCxFQUFFcTZDLFVBQVU1eEMsRUFBRW01QyxVQUFVelcsR0FBRzVyQyxFQUFFcVcsRUFBRTVNLEVBQUVzakQsU0FBUy9zRCxFQUFFbVUsR0FBRzFLLEdBQUcsSUFBSW1pQyxJQUFJRCxHQUFFLEVBQUczckMsRUFBRXErQyxnQkFBZ0IsTUFBTSxJQUFJMTlDLEVBQUUsS0FBSyxPQUFPK1UsR0FBRyxLQUFLNDNDLEdBQUcsSUFBSWozQyxFQUFFLEtBQUtyVyxFQUFFaTlDLFVBQVVsUyxFQUFFL3FDLEVBQUVtVSxHQUFHK2QsRUFBRSxJQUFJaHNCLEVBQUV1RCxHQUFHQSxHQUFHOUksRUFBRThJLEdBQUc5SSxFQUFFNG1DLEtBQUs5OUIsRUFBRWxGLE9BQU92RSxFQUFFaTlDLFdBQVd5UCxJQUFHLEVBQUdqakQsRUFBRWxGLEtBQUt2RSxFQUFFaTlDLFVBQVV0OEMsRUFBRXFJLEVBQUVTLElBQUksTUFBTSxLQUFLMHhDLEdBQUd4NkMsRUFBRSxJQUFJMFYsR0FBR21FLEVBQUUrc0IsSUFBSXYrQixFQUFFUyxHQUFHLE1BQU0sS0FBSzhqRCxHQUFHLEdBQUcsSUFBSWwzQyxHQUFHLElBQUlBLEVBQUUsQ0FBQzFWLEVBQUU4SSxFQUFFLE1BQU00QixHQUFHckwsRUFBRWk5QyxTQUFTLzdDLE9BQU8sSUFBSSxJQUFJNlQsRUFBRSxFQUFFQSxFQUFFL1UsRUFBRXd0RCxZQUFZejRDLElBQUkxSixJQUFJckwsRUFBRWk5QyxVQUFVLElBQUl0OEMsRUFBRW9zRCxTQUFTcHNELEVBQUU4c0QsVUFBVTlzRCxFQUFFNEQsTUFBTXdRLElBQUkvVSxFQUFFd3RELFlBQVksSUFBSXh0RCxFQUFFczlDLE9BQU8zOEMsR0FBR0EsRUFBRXFJLEVBQUVySSxHQUFHLE9BQU9BLENBQUMsQ0FBQ0EsRUFBRTRtQyxJQUFJLE1BQU0sS0FBSzZhLEdBQUd6aEQsRUFBRTZaLEVBQUVqUSxFQUFFZCxFQUFFekosRUFBRTZxQyxFQUFFcDFCLEVBQUU2MUIsRUFBRUssR0FBR3BFLElBQUksTUFBTSxRQUFRLEdBQUcsRUFBRXIrQixFQUFFdkksRUFBRSxJQUFJMFYsR0FBR3JXLEVBQUUyRixLQUFLb0IsZ0JBQWdCMEMsRUFBRW9qRCxRQUFROWxELGNBQWN3Z0MsSUFBSTNpQyxFQUFFNkUsRUFBRXpKLEVBQUU2cUMsRUFBRXAxQixFQUFFNjFCLEVBQUVLLFFBQVEsR0FBRyxFQUFFemlDLEVBQUUsQ0FBQ2xKLEVBQUU0akQsYUFBYXRZLEVBQUUsTUFBTWpnQyxFQUFFbkYsRUFBRXVELEdBQUcsR0FBR3NMLEVBQUUvVSxFQUFFcUwsRUFBRSxLQUFLdy9CLEVBQUVwMUIsRUFBRWszQyxHQUFHdGhELEdBQUdzZ0MsR0FBR2hyQyxFQUFFNlosRUFBRXNSLEVBQUVyaUIsR0FBR1QsRUFBRVMsR0FBRzlJLEdBQUdtc0QsR0FBR25zRCxJQUFJLGlCQUFpQkEsRUFBRTRELE9BQU81RCxFQUFFcUksRUFBRXJJLElBQUk0aEQsR0FBR3ZpRCxHQUFHLENBQUMsSUFBSStVLEVBQUV5RixHQUFHekYsRUFBRW1tQyxHQUFHa0gsSUFBSXJ0QyxFQUFFdW9DLE9BQU8zOEMsRUFBRUEsRUFBRStzRCxnQkFBZ0JyaUQsRUFBRXNpRCxXQUFXNTRDLEVBQUUsSUFBSXRMLEVBQUVzakQsU0FBU2EsR0FBRyxJQUFJMVMsR0FBRyxPQUFPbm1DLEVBQUVaLEdBQUcxSyxFQUFFekosRUFBRXUyQyxVQUFVbUYsUUFBUTNtQyxDQUFDLENBQUMsTUFBTSxHQUFHN0wsRUFBRXZJLEVBQUUsSUFBSTBWLEVBQUVreEIsSUFBSXZuQyxFQUFFMkYsS0FBS20zQyxRQUFRcnpDLEVBQUV6SixFQUFFNnFDLEVBQUVwMUIsRUFBRTYxQixFQUFFSyxFQUFFdGdDLEVBQUUyL0IsR0FBRyxJQUFJOWhDLElBQUl2SSxFQUFFWCxFQUFFMkYsS0FBS20zQyxRQUFRcnpDLEVBQUV6SixFQUFFNnFDLEVBQUVwMUIsRUFBRWszQyxHQUFHem1ELEVBQUV1RCxJQUFJNmhDLEVBQUVLLEVBQUV0Z0MsRUFBRW9zQixJQUFJLE9BQU8sTUFBTWgzQixHQUFHZ3NELEdBQUdoc0QsRUFBRSxLQUFLZ1YsRUFBRXpWLEdBQUdXLENBQUMsRUFBRWlFLEVBQUUsQ0FBQ3lHLEVBQUUwSixFQUFFdEwsRUFBRXlvQixFQUFFbHBCLEVBQUU5QyxLQUFLQSxFQUFFQSxLQUFLNk8sRUFBRXNwQyxnQkFBZ0IsTUFBTTE0QyxLQUFLb2xDLEVBQUVnTSxNQUFNdGhDLEVBQUU0c0MsVUFBVTVxQixFQUFFcWpCLFVBQVVsMkMsRUFBRTAyQyxLQUFLL3dDLEdBQUd3SyxFQUFFK2MsRUFBRSxVQUFVaVosR0FBR3hnQyxHQUFHLFdBQVd3Z0MsRUFBRSxHQUFHalosSUFBSSxJQUFJMkYsRUFBRSxDQUFDLEdBQUdsdEIsR0FBR3k3QyxHQUFHanhDLEVBQUUsS0FBS3RMLEVBQUUsV0FBV2dNLEVBQUUsR0FBR3FjLElBQUk1ckIsR0FBRyxHQUFHdXhCLEVBQUUsSUFBSSxNQUFNMWlCLEtBQUtVLEdBQUdxYyxHQUFHL2MsRUFBRTg0QyxTQUFTLFVBQVUza0QsR0FBRTZMLEtBQUtxM0IsR0FBRXIzQixLQUFLL1UsRUFBRXFMLEVBQUUwSixFQUFFLEtBQUtVLEVBQUVWLElBQUcsT0FBRyxFQUFPdEwsUUFBUWdNLEVBQUU2bkIsU0FBU3Q5QixFQUFFcUwsRUFBRSxVQUFVLEtBQUtvSyxFQUFFNm5CLFNBQVEsT0FBRyxFQUFPN3pCLEdBQUcsSUFBSXNoQyxFQUFFLElBQUlBLEVBQUV0MUIsR0FBR0EsRUFBRXE0QyxxQkFBcUIvSixHQUFHaFosRUFBRXRoQyxFQUFFc0wsR0FBR3hLLEdBQUd5N0MsR0FBR2p4QyxFQUFFLEtBQUt0TCxFQUFFLGlCQUFpQnNoQyxFQUFFdDFCLEdBQUdBLEVBQUVxdUMsaUJBQWlCdjVDLElBQUkrekMsSUFBSSxLQUFLdlQsR0FBR2daLEdBQUdoWixFQUFFdGhDLEVBQUVzTCxHQUFHeEssR0FBR3k3QyxHQUFHanhDLEVBQUUsS0FBS3RMLEVBQUUsVUFBVSxHQUFHeW9CLEdBQUcsR0FBR3R0QixLQUFLNlEsSUFBSUEsRUFBRVQsWUFBWVMsRUFBRVIsYUFBYSxDQUFDLElBQUlqVixFQUFFZ3JDLEVBQUUzL0IsRUFBRTBpRCxXQUFXaDVDLEVBQUUxSixFQUFFNUIsRUFBRXlvQixFQUFFbHBCLEVBQUU5QyxHQUFHLEtBQUtsRyxHQUFHLENBQUMwc0QsSUFBRyxFQUFHLE1BQU1yaEQsRUFBRXJMLEVBQUVBLEVBQUVBLEVBQUVtdEQsWUFBWXRpQixFQUFFeC9CLEVBQUUsQ0FBRSxNQUFLLEVBQUV6RyxHQUFHeUcsRUFBRTRKLGNBQWNGLEVBQUVrb0MsV0FBV3lQLElBQUcsRUFBR3JoRCxFQUFFNEosWUFBWUYsRUFBRWtvQyxTQUFTLENBQUMsT0FBTzV4QyxFQUFFOGhELFdBQVcsRUFBRW5pQixFQUFFLENBQUMzL0IsRUFBRTBKLEVBQUUvVSxFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsS0FBS0EsRUFBRUEsS0FBSzkxQixFQUFFc3BDLGdCQUFnQixNQUFNdFQsRUFBRWgyQixFQUFFa29DLFNBQVN4bkMsRUFBRXMxQixFQUFFN3BDLE9BQU8sSUFBSSxJQUFJMEQsRUFBRSxFQUFFQSxFQUFFNlEsRUFBRTdRLElBQUksQ0FBQyxNQUFNbVEsRUFBRTgxQixFQUFFRSxFQUFFbm1DLEdBQUdtbUMsRUFBRW5tQyxHQUFHbTJDLEdBQUdoUSxFQUFFbm1DLElBQUksR0FBR3lHLEVBQUVBLEVBQUVvc0IsRUFBRXBzQixFQUFFMEosRUFBRW1kLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsT0FBTyxDQUFDLEdBQUc5MUIsRUFBRXBQLE9BQU8ybkQsS0FBS3Y0QyxFQUFFa29DLFNBQVMsU0FBU3lQLElBQUcsRUFBR2pqRCxFQUFFLEtBQUtzTCxFQUFFL1UsRUFBRSxLQUFLa3lCLEVBQUVscEIsRUFBRTJqRCxHQUFHM3NELEdBQUdrRyxFQUFFLENBQUMsQ0FBQyxPQUFPbUYsQ0FBQyxFQUFFZCxFQUFFLENBQUNjLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRTJZLEtBQUssTUFBTStZLGFBQWFuc0IsR0FBRzFpQixFQUFFMGlCLElBQUl2RixFQUFFQSxFQUFFQSxFQUFFcXBCLE9BQU85akIsR0FBR0EsR0FBRyxNQUFNN3lCLEVBQUVzQixFQUFFbUYsR0FBR2QsRUFBRXlnQyxFQUFFaGlDLEVBQUVxQyxHQUFHMEosRUFBRW5RLEVBQUU2RSxFQUFFekosRUFBRWt5QixFQUFFMlksR0FBRyxPQUFPdGdDLEdBQUd1aUQsR0FBR3ZpRCxJQUFJLE1BQU1BLEVBQUVoRyxLQUFLeUUsRUFBRStMLEVBQUV1b0MsT0FBTy95QyxJQUFJbWlELElBQUcsRUFBRzNoQixFQUFFaDJCLEVBQUV1b0MsT0FBTzduQyxFQUFFLEtBQUs3USxFQUFFMkYsR0FBR0EsRUFBRSxFQUFFdW5CLEVBQUUsQ0FBQ3ptQixFQUFFMEosRUFBRS9VLEVBQUVreUIsRUFBRTZZLEVBQUV0MUIsS0FBSyxHQUFHaTNDLElBQUcsRUFBRzMzQyxFQUFFWixHQUFHLEtBQUtzQixFQUFFLENBQUMsTUFBTVYsRUFBRStXLEVBQUV6Z0IsR0FBRyxPQUFPLENBQUMsTUFBTTVCLEVBQUVULEVBQUVxQyxHQUFHLElBQUk1QixHQUFHQSxJQUFJc0wsRUFBRSxNQUFNODFCLEVBQUVwaEMsRUFBRSxDQUFDLENBQUMsTUFBTWd1QixFQUFFenVCLEVBQUVxQyxHQUFHekcsRUFBRXNCLEVBQUVtRixHQUFHLE9BQU93L0IsRUFBRXgvQixHQUFHNUIsRUFBRSxLQUFLc0wsRUFBRW5RLEVBQUU2eUIsRUFBRXozQixFQUFFa3lCLEVBQUV5NkIsR0FBRy9uRCxHQUFHbW1DLEdBQUd0VCxDQUFDLEVBQUUzTCxFQUFFemdCLElBQUksSUFBSTBKLEVBQUUsRUFBRSxLQUFLMUosR0FBRyxJQUFJQSxFQUFFckMsRUFBRXFDLEtBQUt5aEQsR0FBR3poRCxLQUFLLE1BQU1BLEVBQUU5RyxNQUFNd1EsSUFBSSxNQUFNMUosRUFBRTlHLE1BQU0sQ0FBQyxHQUFHLElBQUl3USxFQUFFLE9BQU8vTCxFQUFFcUMsR0FBRzBKLEdBQUcsQ0FBQyxPQUFPMUosQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDQSxFQUFFMEosS0FBSyxJQUFJQSxFQUFFaTVDLGdCQUFnQixPQUFPdmtELEVBQUUsS0FBSzRCLEVBQUUwSixHQUFHMGpDLFVBQVUxakMsRUFBRWs1QyxPQUFPNWlELEdBQUdxaEQsSUFBRyxFQUFHajFCLEVBQUUxaUIsRUFBRWc1QyxXQUFXMWlELEVBQUUsS0FBSyxLQUFLLE1BQU1vdEMsS0FBSzFqQyxFQUFFazVDLE9BQU81aUQsRUFBRXFoRCxJQUFJeG9ELFFBQVFDLE1BQU0sK0NBQStDLEVBQUVzekIsRUFBRSxDQUFDLE1BQU02bkIsR0FBR2hCLEdBQUcsU0FBUzRQLEdBQUc3aUQsR0FBRyxPQUFPOGlELEdBQUc5aUQsRUFBRSxDQUFDLFNBQVMraUQsR0FBRy9pRCxHQUFHLE9BQU84aUQsR0FBRzlpRCxFQUFFMmhELEdBQUcsQ0FBQyxTQUFTbUIsR0FBRzlpRCxFQUFFMEosSUFBSW80QixLQUFLQSxHQUFHLG9CQUFvQmtoQixXQUFXQSxXQUFXLG9CQUFvQi94QyxLQUFLQSxLQUFLLG9CQUFvQjFRLE9BQU9BLE9BQU8sb0JBQW9CMGlELE9BQU9BLE9BQU8sS0FBS0MsU0FBUSxFQUFHLE1BQU1uQixPQUFPM2pELEVBQUUwVixPQUFPbmYsRUFBRWl0RCxVQUFVLzZCLEVBQUU3ZCxjQUFjckwsRUFBRWtrRCxXQUFXaG5ELEVBQUVtbkQsY0FBY3hpQixFQUFFMmpCLFFBQVF6akIsRUFBRTBqQixlQUFlaDVDLEVBQUVzbkMsV0FBV3RsQixFQUFFMDFCLFlBQVl2b0QsRUFBRThwRCxXQUFXMWpCLEVBQUV6RCxHQUFFb25CLFVBQVVwa0QsRUFBRXFrRCxvQkFBb0I5OEIsR0FBR3ptQixFQUFFeWdCLEVBQUUsQ0FBQ3pnQixFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFLEtBQUtreUIsRUFBRSxLQUFLbHBCLEVBQUUsS0FBSzlDLEdBQUUsRUFBRzJrQyxFQUFFLEtBQUtFLElBQUloMkIsRUFBRXNwQyxtQkFBbUIsR0FBR2h6QyxJQUFJMEosRUFBRSxPQUFPMUosSUFBSW94QyxHQUFHcHhDLEVBQUUwSixLQUFLL1UsRUFBRTRzQyxFQUFFdmhDLEdBQUdpaEMsRUFBRWpoQyxFQUFFNm1CLEVBQUVscEIsR0FBRSxHQUFJcUMsRUFBRSxPQUFPLElBQUkwSixFQUFFc3RDLFlBQVl0WCxHQUFFLEVBQUdoMkIsRUFBRXNwQyxnQkFBZ0IsTUFBTSxNQUFNMTRDLEtBQUs4UCxFQUFFMHRDLElBQUkxckIsRUFBRXFqQixVQUFVbDJDLEdBQUdtUSxFQUFFLE9BQU9VLEdBQUcsS0FBSzYzQyxHQUFHaGlCLEVBQUVqZ0MsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRyxNQUFNLEtBQUttN0MsR0FBR3psQyxFQUFFckssRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRyxNQUFNLEtBQUt1dEQsR0FBRyxNQUFNbGlELEdBQUc1SyxFQUFFc1UsRUFBRXRMLEVBQUV6SixFQUFFa0csR0FBRyxNQUFNLEtBQUtrOEMsR0FBR25YLEVBQUU1L0IsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEdBQUcsTUFBTSxRQUFRLEVBQUVubUMsRUFBRXNFLEVBQUVtQyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsR0FBRyxFQUFFbm1DLEVBQUV5bUMsRUFBRWhnQyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsSUFBSSxHQUFHbm1DLEdBQUcsSUFBSUEsSUFBSTZRLEVBQUVxbUMsUUFBUXp3QyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsRUFBRXFDLEdBQUksTUFBTTNWLEdBQUd2RixHQUFHdTZCLEdBQUdoMUIsRUFBRXBzQixHQUFHQSxFQUFFODNDLElBQUluNkMsRUFBRStMLEdBQUcxSixHQUFHMEosRUFBRSxFQUFFdTJCLEVBQUUsQ0FBQ2pnQyxFQUFFMEosRUFBRS9VLEVBQUVreUIsS0FBSyxHQUFHLE1BQU03bUIsRUFBRTVCLEVBQUVzTCxFQUFFWixHQUFHak8sRUFBRTZPLEVBQUVrb0MsVUFBVWo5QyxFQUFFa3lCLE9BQU8sQ0FBQyxNQUFNem9CLEVBQUVzTCxFQUFFWixHQUFHOUksRUFBRThJLEdBQUdZLEVBQUVrb0MsV0FBVzV4QyxFQUFFNHhDLFVBQVVsUyxFQUFFdGhDLEVBQUVzTCxFQUFFa29DLFNBQVMsR0FBR3ZuQyxFQUFFLENBQUNySyxFQUFFMEosRUFBRS9VLEVBQUVreUIsS0FBSyxNQUFNN21CLEVBQUU1QixFQUFFc0wsRUFBRVosR0FBRzAyQixFQUFFOTFCLEVBQUVrb0MsVUFBVSxJQUFJajlDLEVBQUVreUIsR0FBR25kLEVBQUVaLEdBQUc5SSxFQUFFOEksRUFBRSxFQUFFMVQsRUFBRSxDQUFDNEssRUFBRTBKLEVBQUV0TCxFQUFFekosTUFBTXFMLEVBQUU4SSxHQUFHOUksRUFBRWl5QyxRQUFReHJCLEVBQUV6bUIsRUFBRTR4QyxTQUFTbG9DLEVBQUV0TCxFQUFFekosRUFBRXFMLEVBQUU4SSxHQUFHOUksRUFBRWl5QyxPQUFPLEVBQUVwMEMsRUFBRSxDQUFDbUMsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEtBQUs3a0MsRUFBRUEsR0FBRyxRQUFRNk8sRUFBRXBQLEtBQUssTUFBTTBGLEVBQUV1Z0MsRUFBRTcyQixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxHQUFHSixFQUFFdC9CLEVBQUUwSixFQUFFbWQsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxFQUFFLEVBQUVhLEVBQUUsQ0FBQ3ZnQyxFQUFFMEosRUFBRS9VLEVBQUVrRyxFQUFFMmtDLEVBQUVFLEVBQUV0VCxFQUFFN3lCLEtBQUssSUFBSW9tQyxFQUFFbFosRUFBRSxNQUFNbnNCLEtBQUttbUIsRUFBRWlyQixNQUFNekwsRUFBRXdQLFVBQVVuUCxFQUFFdFgsV0FBVzdaLEVBQUU2bkMsVUFBVTlhLEVBQUUrVCxLQUFLNWxDLEdBQUdySyxFQUFFLEdBQUdBLEVBQUU4SSxTQUFJLElBQVM1SixJQUFJLElBQUlnOUIsRUFBRXlELEVBQUUzL0IsRUFBRThJLEdBQUc1SixFQUFFYyxFQUFFOEksUUFBUSxDQUFDLEdBQUc2MkIsRUFBRTMvQixFQUFFOEksR0FBR25MLEVBQUVxQyxFQUFFMUYsS0FBS29sQyxFQUFFTyxHQUFHQSxFQUFFM3BDLEdBQUcycEMsR0FBRyxFQUFFSyxFQUFFbDJCLEVBQUV1MUIsRUFBRTMvQixFQUFFNHhDLFVBQVUsR0FBR3RSLEdBQUdJLEVBQUUxZ0MsRUFBRTR4QyxTQUFTalMsRUFBRSxLQUFLOWtDLEVBQUUya0MsRUFBRUUsR0FBRyxrQkFBa0JqZixFQUFFMkwsRUFBRTd5QixHQUFHOFEsR0FBR3N3QyxHQUFHMzZDLEVBQUUsS0FBS25GLEVBQUUsV0FBV29sQyxFQUFFLENBQUMsSUFBSSxNQUFNdjJCLEtBQUt1MkIsRUFBRSxVQUFVdjJCLEdBQUdxM0IsR0FBRXIzQixJQUFJbWQsRUFBRThZLEVBQUVqMkIsRUFBRSxLQUFLdTJCLEVBQUV2MkIsR0FBR2cyQixFQUFFMS9CLEVBQUU0eEMsU0FBUy8yQyxFQUFFMmtDLEVBQUU4QixHQUFHLFVBQVVyQixHQUFHcFosRUFBRThZLEVBQUUsUUFBUSxLQUFLTSxFQUFFcG1DLFFBQVE0c0IsRUFBRXdaLEVBQUV3aUIscUJBQXFCL0osR0FBR2p5QixFQUFFNXJCLEVBQUVtRixFQUFFLENBQUMxSyxFQUFFcXFDLEVBQUUzL0IsRUFBRUEsRUFBRXk3QyxRQUFRcnZCLEVBQUV2eEIsRUFBRSxDQUFDd1AsR0FBR3N3QyxHQUFHMzZDLEVBQUUsS0FBS25GLEVBQUUsZUFBZSxNQUFNekYsSUFBSW9xQyxHQUFHQSxJQUFJQSxFQUFFb1IsZ0JBQWdCemhDLElBQUlBLEVBQUUrbEMsVUFBVTkvQyxHQUFHK1osRUFBRXduQyxZQUFZaFgsR0FBR3ZoQyxFQUFFdWhDLEVBQUVqMkIsRUFBRS9VLEtBQUs4eEIsRUFBRXdaLEdBQUdBLEVBQUV3WSxpQkFBaUJyakQsR0FBR2lWLElBQUk0cEMsSUFBSSxLQUFLeHRCLEdBQUdpeUIsR0FBR2p5QixFQUFFNXJCLEVBQUVtRixHQUFHNUssR0FBRytaLEVBQUVMLE1BQU02d0IsR0FBR3QxQixHQUFHc3dDLEdBQUczNkMsRUFBRSxLQUFLbkYsRUFBRSxVQUFVLEdBQUcya0MsRUFBRSxFQUFFbHFDLEVBQUUsQ0FBQzBLLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsS0FBSyxHQUFHem9CLEdBQUd1aEMsRUFBRTMvQixFQUFFNUIsR0FBR3pKLEVBQUUsSUFBSSxJQUFJZ0osRUFBRSxFQUFFQSxFQUFFaEosRUFBRWtCLE9BQU84SCxJQUFJZ2lDLEVBQUUzL0IsRUFBRXJMLEVBQUVnSixJQUFJLEdBQUdrcEIsR0FBTW5kLElBQUltZCxFQUFFd3BCLFFBQVEsQ0FBQyxNQUFNM21DLEVBQUVtZCxFQUFFd2tCLE1BQU0vMUMsRUFBRTBLLEVBQUUwSixFQUFFQSxFQUFFK3hDLFFBQVEveEMsRUFBRTZ1QyxhQUFhMXhCLEVBQUV2YSxPQUFPLENBQUMsRUFBR28wQixFQUFFLENBQUMxZ0MsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEVBQUUsS0FBSyxJQUFJLElBQUl0MUIsRUFBRXMxQixFQUFFdDFCLEVBQUVwSyxFQUFFbkssT0FBT3VVLElBQUksQ0FBQyxNQUFNczFCLEVBQUUxL0IsRUFBRW9LLEdBQUdvMUIsRUFBRWdrQixHQUFHeGpELEVBQUVvSyxJQUFJc2xDLEdBQUcxdkMsRUFBRW9LLElBQUlxVyxFQUFFLEtBQUtpZixFQUFFaDJCLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUUsR0FBR0YsRUFBRSxDQUFDdC9CLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVnSixFQUFFOUMsRUFBRTJrQyxLQUFLLE1BQU1FLEVBQUVoMkIsRUFBRVosR0FBRzlJLEVBQUU4SSxHQUFHLElBQUlrdUMsVUFBVTVxQixFQUFFNG1CLGdCQUFnQno1QyxFQUFFMDJDLEtBQUt0USxHQUFHajJCLEVBQUUwaUIsR0FBRyxHQUFHcHNCLEVBQUVnM0MsVUFBVSxNQUFNOTNDLEVBQUVjLEVBQUUwckMsT0FBT3BMLEdBQUU3WixFQUFFL2MsRUFBRWdpQyxPQUFPcEwsR0FBRSxJQUFJN2YsRUFBRXJpQixHQUFHcWxELEdBQUdybEQsR0FBRSxJQUFLcWlCLEVBQUVnRyxFQUFFaTlCLHNCQUFzQmhMLEdBQUdqNEIsRUFBRXJpQixFQUFFc0wsRUFBRTFKLEdBQUcyL0IsR0FBR2diLEdBQUdqeEMsRUFBRTFKLEVBQUU1QixFQUFFLGdCQUFnQkEsR0FBR3FsRCxHQUFHcmxELEdBQUUsR0FBSSxNQUFNNmhDLEVBQUV0aUMsR0FBRyxrQkFBa0IrTCxFQUFFcFAsS0FBSyxHQUFHZixFQUFFbEQsRUFBRTJKLEVBQUVnekMsZ0JBQWdCejVDLEVBQUVtbUMsRUFBRXRoQyxFQUFFekosRUFBRXNyQyxFQUFFcGxDLEdBQUcya0MsR0FBR29CLEVBQUU1Z0MsRUFBRTBKLEVBQUVnMkIsRUFBRSxLQUFLdGhDLEVBQUV6SixFQUFFc3JDLEVBQUVwbEMsR0FBRSxHQUFJdXhCLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBR0EsRUFBRWdVLEVBQUVWLEVBQUVoMkIsRUFBRXhLLEVBQUV1bkIsRUFBRXJvQixFQUFFekosRUFBRWdKLFFBQVEsR0FBRyxFQUFFeXVCLEdBQUdsdEIsRUFBRXUwQixRQUFRaE4sRUFBRWdOLE9BQU81TSxFQUFFNlksRUFBRSxRQUFRLEtBQUtqWixFQUFFZ04sTUFBTTkxQixHQUFHLEVBQUV5dUIsR0FBR3ZGLEVBQUU2WSxFQUFFLFFBQVF4Z0MsRUFBRWdLLE1BQU11ZCxFQUFFdmQsTUFBTXZMLEdBQUcsRUFBRXl1QixFQUFFLENBQUMsTUFBTXZ4QixFQUFFNk8sRUFBRWk2QyxhQUFhLElBQUksSUFBSWo2QyxFQUFFLEVBQUVBLEVBQUU3TyxFQUFFaEYsT0FBTzZULElBQUksQ0FBQyxNQUFNODFCLEVBQUUza0MsRUFBRTZPLEdBQUdVLEVBQUVsTCxFQUFFc2dDLEdBQUdwVCxFQUFFM0YsRUFBRStZLEdBQUdwVCxJQUFJaGlCLEdBQUcsVUFBVW8xQixHQUFHM1ksRUFBRTZZLEVBQUVGLEVBQUVwMUIsRUFBRWdpQixFQUFFenVCLEVBQUVxQyxFQUFFNHhDLFNBQVN4ekMsRUFBRXpKLEVBQUUyc0MsRUFBRSxDQUFDLENBQUMsRUFBRWxWLEdBQUdwc0IsRUFBRTR4QyxXQUFXbG9DLEVBQUVrb0MsVUFBVXhuQyxFQUFFczFCLEVBQUVoMkIsRUFBRWtvQyxTQUFVLE1BQUtwUyxHQUFHLE1BQU1qbUMsR0FBRzZtQyxFQUFFVixFQUFFaDJCLEVBQUV4SyxFQUFFdW5CLEVBQUVyb0IsRUFBRXpKLEVBQUVnSixLQUFLOGlCLEVBQUVnRyxFQUFFbTlCLGlCQUFpQmprQixJQUFJc1UsSUFBSSxLQUFLeHpCLEdBQUdpNEIsR0FBR2o0QixFQUFFcmlCLEVBQUVzTCxFQUFFMUosR0FBRzIvQixHQUFHZ2IsR0FBR2p4QyxFQUFFMUosRUFBRTVCLEVBQUUsVUFBVSxHQUFHekosRUFBRSxFQUFFMEIsRUFBRSxDQUFDMkosRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxLQUFLLElBQUksSUFBSTJrQyxFQUFFLEVBQUVBLEVBQUU5MUIsRUFBRTdULE9BQU8ycEMsSUFBSSxDQUFDLE1BQU1FLEVBQUUxL0IsRUFBRXcvQixHQUFHcDFCLEVBQUVWLEVBQUU4MUIsR0FBR2ptQyxFQUFFbW1DLEVBQUU1MkIsS0FBSzQyQixFQUFFcGxDLE9BQU95OEMsS0FBSzNGLEdBQUcxUixFQUFFdDFCLElBQUksR0FBR3MxQixFQUFFK1AsV0FBV3JqQixFQUFFc1QsRUFBRTUyQixJQUFJMUssRUFBRXFpQixFQUFFaWYsRUFBRXQxQixFQUFFN1EsRUFBRSxLQUFLNUUsRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxHQUFFLEVBQUcsR0FBR3VsQyxFQUFFLENBQUNwZ0MsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWdKLEVBQUU5QyxFQUFFMmtDLEtBQUssR0FBR3BoQyxJQUFJekosRUFBRSxDQUFDLElBQUksTUFBTStxQyxLQUFLL3FDLEVBQUUsQ0FBQyxHQUFHb3NDLEdBQUVyQixHQUFHLFNBQVMsTUFBTXQxQixFQUFFelYsRUFBRStxQyxHQUFHdFQsRUFBRWh1QixFQUFFc2hDLEdBQUd0MUIsSUFBSWdpQixHQUFHLFVBQVVzVCxHQUFHN1ksRUFBRTdtQixFQUFFMC9CLEVBQUV0VCxFQUFFaGlCLEVBQUVvMUIsRUFBRTkxQixFQUFFa29DLFNBQVNqMEMsRUFBRTlDLEVBQUV5bUMsRUFBRSxDQUFDLEdBQUdsakMsSUFBSWtpQyxHQUFFLElBQUksTUFBTVosS0FBS3RoQyxFQUFFMmlDLEdBQUVyQixJQUFJQSxLQUFLL3FDLEdBQUdreUIsRUFBRTdtQixFQUFFMC9CLEVBQUV0aEMsRUFBRXNoQyxHQUFHLEtBQUtGLEVBQUU5MUIsRUFBRWtvQyxTQUFTajBDLEVBQUU5QyxFQUFFeW1DLEdBQUcsVUFBVTNzQyxHQUFHa3lCLEVBQUU3bUIsRUFBRSxRQUFRNUIsRUFBRXZFLE1BQU1sRixFQUFFa0YsTUFBTSxHQUFHK2xDLEVBQUUsQ0FBQzUvQixFQUFFMEosRUFBRS9VLEVBQUVreUIsRUFBRWxwQixFQUFFNmhDLEVBQUVFLEVBQUV0MUIsRUFBRWdpQixLQUFLLE1BQU03eUIsRUFBRW1RLEVBQUVaLEdBQUc5SSxFQUFFQSxFQUFFOEksR0FBR2pPLEVBQUUsSUFBSThrQyxFQUFFajJCLEVBQUV1b0MsT0FBT2p5QyxFQUFFQSxFQUFFaXlDLE9BQU9wM0MsRUFBRSxJQUFJLElBQUltOEMsVUFBVTkzQyxFQUFFOHpDLGdCQUFnQnZzQixFQUFFOHhCLGFBQWE5M0IsR0FBRy9XLEVBQUUrVyxJQUFJclcsRUFBRUEsRUFBRUEsRUFBRThsQyxPQUFPenZCLEdBQUdBLEdBQUcsTUFBTXpnQixHQUFHNUIsRUFBRTdFLEVBQUU1RSxFQUFFa3lCLEdBQUd6b0IsRUFBRXVoQyxFQUFFaHJDLEVBQUVreUIsR0FBRzZaLEVBQUVoM0IsRUFBRWtvQyxTQUFTajlDLEVBQUVnckMsRUFBRWhpQyxFQUFFNmhDLEVBQUVFLEVBQUV0MUIsRUFBRWdpQixJQUFJbHRCLEVBQUUsR0FBRyxHQUFHQSxHQUFHdW5CLEdBQUd6bUIsRUFBRWd6QyxpQkFBaUIzOEMsRUFBRTJKLEVBQUVnekMsZ0JBQWdCdnNCLEVBQUU5eEIsRUFBRWdKLEVBQUU2aEMsRUFBRUUsRUFBRXQxQixJQUFJLE1BQU1WLEVBQUV4QixLQUFLdkssR0FBRytMLElBQUkvTCxFQUFFMHlDLFVBQVV3VCxHQUFHN2pELEVBQUUwSixHQUFFLElBQUtrM0IsRUFBRTVnQyxFQUFFMEosRUFBRS9VLEVBQUVnckMsRUFBRWhpQyxFQUFFNmhDLEVBQUVFLEVBQUV0MUIsRUFBRWdpQixFQUFFLEVBQUU0VCxFQUFFLENBQUNoZ0MsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEtBQUtoMkIsRUFBRTZ1QyxhQUFhL1ksRUFBRSxNQUFNeC9CLEVBQUUsSUFBSTBKLEVBQUUrbEMsVUFBVTVvQixFQUFFMG9CLElBQUkrSSxTQUFTNXVDLEVBQUV0TCxFQUFFekosRUFBRWtHLEVBQUU2a0MsR0FBR0gsRUFBRTcxQixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTZrQyxHQUFHRyxFQUFFNy9CLEVBQUUwSixFQUFFZzJCLEVBQUUsRUFBRUgsRUFBRSxDQUFDdi9CLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsS0FBSyxNQUFNMmtDLEVBQUV4L0IsRUFBRWtyQyxVQUFVLFNBQVNsckMsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU16SixFQUFFcUwsRUFBRTFGLEtBQUt1c0IsR0FBR25kLEVBQUVBLEVBQUV5aEMsV0FBV25yQyxFQUFFbXJDLGFBQWEyWSxHQUFHbm1ELEVBQUUsQ0FBQ29tRCxJQUFJQyxLQUFLM1ksTUFBTXJyQyxFQUFFMUYsS0FBSzNGLEVBQUUyWCxPQUFPNUMsRUFBRXloQyxXQUFXdGtCLEVBQUUwMUIsS0FBSyxLQUFLeHBCLEtBQUssS0FBS3NkLFFBQVEsS0FBS3JNLE9BQU8sS0FBS3hiLE9BQU8sS0FBS3liLE1BQU0sSUFBSWpDLElBQUcsR0FBSTlRLE9BQU8sS0FBS3NhLE1BQU0sS0FBS3lZLFFBQVEsS0FBS0MsWUFBWSxLQUFLalYsVUFBVSxLQUFLbUUsU0FBUzFwQyxFQUFFQSxFQUFFMHBDLFNBQVNoc0MsT0FBT3d5QixPQUFPL1MsRUFBRXVzQixVQUFVMEosWUFBWSxLQUFLek4sWUFBWSxHQUFHcVAsV0FBVyxLQUFLQyxXQUFXLEtBQUt6UCxhQUFhaVEsR0FBR3hxRCxFQUFFa3lCLEdBQUdtNEIsYUFBYWpSLEdBQUdwNUMsRUFBRWt5QixHQUFHeEIsS0FBSyxLQUFLeW9CLFFBQVEsS0FBS29SLGNBQWM1ZSxHQUFFa1AsYUFBYTc2QyxFQUFFNjZDLGFBQWFELElBQUlqUCxHQUFFcG5DLEtBQUtvbkMsR0FBRW9MLE1BQU1wTCxHQUFFOE8sTUFBTTlPLEdBQUU2TyxNQUFNN08sR0FBRThiLEtBQUs5YixHQUFFZ1AsV0FBV2hQLEdBQUU2akIsYUFBYSxLQUFLelQsU0FBU3R5QyxFQUFFbTBDLFdBQVduMEMsRUFBRUEsRUFBRWt6QyxVQUFVLEVBQUVnQixTQUFTLEtBQUtFLGVBQWMsRUFBRytCLFdBQVUsRUFBRzFHLGFBQVksRUFBRzJLLGVBQWMsRUFBRzRMLEdBQUcsS0FBSzFrQixFQUFFLEtBQUsya0IsR0FBRyxLQUFLNWpDLEVBQUUsS0FBSzZqQyxHQUFHLEtBQUtsNEIsRUFBRSxLQUFLMVcsR0FBRyxLQUFLNnVDLElBQUksS0FBSzNMLEdBQUcsS0FBS3h1QyxFQUFFLEtBQUtvNkMsSUFBSSxLQUFLQyxJQUFJLEtBQUsxWSxHQUFHLEtBQUsyWSxHQUFHLE1BQXlFLE9BQW5FL21ELEVBQUU0eEMsSUFBSSxDQUFDclQsRUFBRXYrQixHQUFHQSxFQUFFNCtDLEtBQUs3eUMsRUFBRUEsRUFBRTZ5QyxLQUFLNStDLEVBQUVBLEVBQUUwbkIsS0FBS3VvQixHQUFHNzBCLEtBQUssS0FBS3BiLEdBQUdxQyxFQUFFOGlDLElBQUk5aUMsRUFBRThpQyxHQUFHbmxDLEdBQVVBLENBQUMsQ0FBdjFCLENBQXkxQnFDLEVBQUVyTCxFQUFFa3lCLEdBQUcsR0FBR2l3QixHQUFHOTJDLEtBQUt3L0IsRUFBRStQLElBQUk0SSxTQUFTcFcsR0FBSSxTQUFTL2hDLEVBQUUwSixHQUFFLEdBQUlpd0MsR0FBR2p3QyxFQUFFLE1BQU1naUMsTUFBTXR0QyxFQUFFd3pDLFNBQVNqOUMsR0FBR3FMLEVBQUVxckMsTUFBTXhrQixFQUFFKzBCLEdBQUc1N0MsSUFBRyxTQUFVQSxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFFLEdBQUksTUFBTWt5QixFQUFFLENBQUUsRUFBQ2xwQixFQUFFLENBQUEsRUFBRzhqQyxHQUFFOWpDLEVBQUVySCxHQUFHLEdBQUcwSixFQUFFay9DLGNBQWM5M0MsT0FBT3d5QixPQUFPLE1BQU14cUIsR0FBR3BQLEVBQUUwSixFQUFFbWQsRUFBRWxwQixHQUFHLElBQUksTUFBTTlDLEtBQUttRixFQUFFa3ZDLGFBQWEsR0FBR3IwQyxLQUFLZ3NCLElBQUlBLEVBQUVoc0IsUUFBRyxHQUFRbUYsRUFBRTByQyxNQUFNdHRDLEVBQUV6SixFQUFFa3lCLEVBQUU0aEIsR0FBRzVoQixHQUFHN21CLEVBQUUxRixLQUFLb3hDLE1BQU03a0IsRUFBRWxwQixFQUFFcUMsRUFBRW92QyxNQUFNenhDLENBQUUsRUFBdE0sQ0FBd01xQyxFQUFFNUIsRUFBRXlvQixFQUFFbmQsR0FBRyxFQUFFMUosRUFBRTBKLEtBQUssR0FBRyxHQUFHMUosRUFBRXFyQyxNQUFNb0UsVUFBVSxDQUFDLE1BQU1yeEMsRUFBRXNMLEVBQUV3eUIsRUFBRTk5QixHQUFHNEIsRUFBRW12QyxNQUFNMUosR0FBRy83QixHQUFHKzNCLEdBQUUvM0IsRUFBRSxJQUFJdEwsSUFBSXdoRCxHQUFHbDJDLEVBQUUxSixFQUFFbXZDLE1BQU0sQ0FBQSxFQUFHLE1BQU1udkMsRUFBRW12QyxNQUFNLENBQUUsRUFBQ3psQyxHQUFHbzJDLEdBQUc5L0MsRUFBRTBKLEdBQUcrM0IsR0FBRXpoQyxFQUFFbXZDLE1BQU03NEMsR0FBRyxFQUFHLEVBQXZJLENBQXlJMEosRUFBRXJMLEdBQVdreUIsR0FBRSxTQUFTN21CLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNEIsRUFBRTFGLEtBQUswRixFQUFFODhDLFlBQVkxMUMsT0FBT3d5QixPQUFPLE1BQU01NUIsRUFBRXdyQyxNQUFNcEMsR0FBRyxJQUFJTCxNQUFNL29DLEVBQUV1dkMsSUFBSXNOLEtBQUssTUFBTTlHLE1BQU1waEQsR0FBR3lKLEVBQUUsR0FBR3pKLEVBQUUsQ0FBQyxNQUFNeUosRUFBRTRCLEVBQUVta0QsYUFBYXh2RCxFQUFFa0IsT0FBTyxFQUFFOHVELEdBQUcza0QsR0FBRyxLQUFLbzBDLEdBQUdwMEMsR0FBR3FrQyxLQUFLLE1BQU14ZCxFQUFFMGtCLEdBQUc1MkMsRUFBRXFMLEVBQUUsRUFBRSxDQUFDQSxFQUFFMHJDLE1BQU10dEMsSUFBSSxHQUFHa21DLEtBQUsrUCxLQUFLeFQsR0FBRWhhLEdBQUcsQ0FBQyxHQUFHQSxFQUFFemdCLEtBQUtpdUMsR0FBR0EsSUFBSTNxQyxFQUFFLE9BQU9tZCxFQUFFemdCLE1BQU1oSSxJQUFJcTBDLEdBQUd6eUMsRUFBRTVCLEVBQUVzTCxFQUFFLElBQUlsRCxPQUFPa0QsSUFBSW1pQyxHQUFHbmlDLEVBQUUxSixFQUFFLEVBQUUsSUFBSUEsRUFBRXN5QyxTQUFTenJCLENBQUUsTUFBSzRyQixHQUFHenlDLEVBQUU2bUIsRUFBRW5kLEVBQUUsTUFBTWs3QyxHQUFHNWtELEVBQUUwSixFQUFFLENBQWxWLENBQW9WMUosRUFBRTBKLEdBQVVpd0MsSUFBRyxDQUFFLENBQTl3QixDQUFneEJuYSxHQUFHQSxFQUFFOFMsVUFBVSxHQUFHenJCLEdBQUdBLEVBQUV3ckIsWUFBWTdTLEVBQUVDLElBQUl6L0IsRUFBRThJLEdBQUcsQ0FBQyxNQUFNOUksRUFBRXcvQixFQUFFNlEsUUFBUVIsR0FBR0MsSUFBSXpsQyxFQUFFLEtBQUtySyxFQUFFMEosRUFBRXRMLEVBQUUsT0FBT3FoQyxFQUFFRCxFQUFFeC9CLEVBQUUwSixFQUFFdEwsRUFBRXlvQixFQUFFbHBCLEVBQUU5QyxFQUFFLEVBQUVnbEMsRUFBRSxDQUFDNy9CLEVBQUUwSixFQUFFdEwsS0FBSyxNQUFNekosRUFBRStVLEVBQUV3aEMsVUFBVWxyQyxFQUFFa3JDLFVBQVUsR0FBRyxTQUFTbHJDLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNc3RDLE1BQU0vMkMsRUFBRWk5QyxTQUFTL3FCLEVBQUVxa0IsVUFBVXZ0QyxHQUFHcUMsR0FBRzByQyxNQUFNN3dDLEVBQUUrMkMsU0FBU3BTLEVBQUV3WCxVQUFVdFgsR0FBR2gyQixFQUFFVSxFQUFFek0sRUFBRXFoRCxhQUFhLEdBQUd0MUMsRUFBRXVtQyxNQUFNdm1DLEVBQUVzZixXQUFXLE9BQU0sRUFBRyxLQUFLNXFCLEdBQUdzaEMsR0FBRyxHQUFHLFNBQVM3WSxJQUFJMlksR0FBR0EsR0FBR0EsRUFBRXFsQixVQUFVbHdELElBQUlrRyxJQUFJbEcsR0FBR2tHLEdBQUdzMUMsR0FBR3g3QyxFQUFFa0csRUFBRXVQLEtBQUt2UCxHQUFHLEdBQUcsS0FBSzZrQyxFQUFFLE9BQU0sRUFBRyxHQUFHLEdBQUdBLEVBQUUsT0FBTy9xQyxFQUFFdzdDLEdBQUd4N0MsRUFBRWtHLEVBQUV1UCxLQUFLdlAsRUFBRSxHQUFHLEVBQUU2a0MsRUFBRSxDQUFDLE1BQU0xL0IsRUFBRTBKLEVBQUVpNkMsYUFBYSxJQUFJLElBQUlqNkMsRUFBRSxFQUFFQSxFQUFFMUosRUFBRW5LLE9BQU82VCxJQUFJLENBQUMsTUFBTXRMLEVBQUU0QixFQUFFMEosR0FBRyxHQUFHN08sRUFBRXVELEtBQUt6SixFQUFFeUosS0FBS2d3QyxHQUFHaGtDLEVBQUVoTSxHQUFHLE9BQU0sQ0FBRSxDQUFDLENBQUMsT0FBTSxDQUFFLENBQTVYLENBQThYNEIsRUFBRTBKLEVBQUV0TCxHQUFHLENBQUMsR0FBR3pKLEVBQUUyOUMsV0FBVzM5QyxFQUFFNjlDLGNBQWMsWUFBWXpTLEVBQUVwckMsRUFBRStVLEVBQUV0TCxHQUFHekosRUFBRW8rQixLQUFLcnBCLEVBQUUsU0FBUzFKLEdBQUcsTUFBTTBKLEVBQUV5aUMsR0FBR2hXLFFBQVFuMkIsR0FBRzBKLEVBQUUwaUMsSUFBSUQsR0FBRzFMLE9BQU8vMkIsRUFBRSxFQUFHLENBQXZELENBQXdEL1UsRUFBRTZ6QixRQUFRN3pCLEVBQUU2ekIsUUFBUSxNQUFNOWUsRUFBRVosR0FBRzlJLEVBQUU4SSxHQUFHblUsRUFBRTAyQyxNQUFNM2hDLENBQUMsRUFBRSsxQixFQUFFLENBQUN6L0IsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxLQUFLLE1BQU0ya0MsRUFBRXgvQixFQUFFZ2tDLE9BQU8sSUFBSVIsSUFBSSxLQUFLLEdBQUd4akMsRUFBRXUwQyxVQUFVLENBQUMsSUFBSTdxQyxHQUFHcXBCLEtBQUszMEIsRUFBRWttRCxHQUFHM3ZELEVBQUV5M0IsRUFBRW9ULEVBQUVsekIsT0FBT296QixFQUFFMkwsTUFBTWpoQyxHQUFHcEssRUFBRXpHLEVBQUU2RSxFQUFFcWxELEdBQUd6akQsR0FBRSxHQUFJNUIsR0FBR0EsRUFBRTBLLEdBQUdzQixFQUFFdEIsR0FBR2kzQixFQUFFLy9CLEVBQUU1QixFQUFFdkQsSUFBSXVELEVBQUVnTSxFQUFFelYsR0FBRzZzQyxHQUFFN3NDLElBQUkrVSxFQUFFdEwsRUFBRXN0QyxPQUFPdHRDLEVBQUVzdEMsTUFBTWdZLHNCQUFzQmhMLEdBQUdodkMsRUFBRWcyQixFQUFFdGhDLEVBQUVnTSxHQUFHcTVDLEdBQUd6akQsR0FBRSxHQUFJLE1BQU0yL0IsRUFBRXFQLEdBQUdodkMsR0FBR2QsRUFBRWMsRUFBRXF3QyxRQUFRcndDLEVBQUVxd0MsUUFBUTFRLEVBQUVsZixFQUFFdmhCLEVBQUV5Z0MsRUFBRXZULEVBQUVsdEIsRUFBRTRKLElBQUl5NEIsRUFBRXJpQyxHQUFHYyxFQUFFNm1CLEVBQUVscEIsR0FBR1MsRUFBRTBLLEdBQUc2MkIsRUFBRTcyQixHQUFHLE9BQU92UCxHQUFHNjJDLEdBQUdwd0MsRUFBRTIvQixFQUFFNzJCLElBQUkwMkIsR0FBR3lVLEdBQUd6VSxFQUFFM1ksSUFBSW5kLEVBQUV0TCxFQUFFc3RDLE9BQU90dEMsRUFBRXN0QyxNQUFNa1ksaUJBQWlCM1AsSUFBSSxJQUFJeUUsR0FBR2h2QyxFQUFFZzJCLEVBQUV0aEMsRUFBRWdNLElBQUl5YyxFQUFFLEtBQUssQ0FBQyxJQUFJaHNCLEVBQUUsTUFBTWlPLEdBQUcwMkIsRUFBRWtNLE1BQU1oTSxHQUFHaDJCLEdBQUcyNkMsR0FBR2o2QyxFQUFFcVcsRUFBRTJMLEVBQUU5ZixPQUFPL1MsR0FBR3lHLEVBQUUyL0IsRUFBRXVYLEdBQUd4dEMsR0FBRyxHQUFHKzVDLEdBQUd6akQsR0FBRSxHQUFJb0ssR0FBR28zQixHQUFFcDNCLElBQUl1MUIsSUFBSTlrQyxFQUFFNmtDLEdBQUdBLEVBQUUraUIscUJBQXFCL0osR0FBRzc5QyxFQUFFdEIsRUFBRW1RLEdBQUcrNUMsR0FBR3pqRCxHQUFFLEdBQUl3L0IsR0FBR2lELEVBQUcsQ0FBQyxNQUFNcmtDLEVBQUUsS0FBSzRCLEVBQUVxd0MsUUFBUXJCLEdBQUdodkMsR0FBR3lpQyxFQUFHakQsRUFBRXgvQixFQUFFcXdDLFFBQVFyd0MsRUFBRTZtQixFQUFFLEtBQUssRUFBRThZLEVBQUVqMkIsRUFBRXBQLEtBQUs2OEMsZ0JBQWdCL3dDLE1BQU0sS0FBS3BHLEVBQUU2dEMsYUFBYXp2QyxNQUFNQSxHQUFHLEtBQUssQ0FBQyxNQUFNdkQsRUFBRW1GLEVBQUVxd0MsUUFBUXJCLEdBQUdodkMsR0FBR3lnQixFQUFFLEtBQUs1bEIsRUFBRXVELEVBQUV6SixFQUFFcUwsRUFBRTZtQixFQUFFbHBCLEdBQUcrTCxFQUFFWixHQUFHak8sRUFBRWlPLEVBQUUsQ0FBQyxHQUFHc2pCLEdBQUc2bkIsR0FBRzduQixFQUFFdkYsSUFBSThZLElBQUk5a0MsRUFBRTZrQyxHQUFHQSxFQUFFK1ksZ0JBQWdCLENBQUMsTUFBTXo0QyxFQUFFMEosRUFBRXVxQyxJQUFJLElBQUl5RSxHQUFHNzlDLEVBQUV0QixFQUFFeUcsSUFBSTZtQixFQUFFLEVBQUUsSUFBSW5kLEVBQUUrbEMsV0FBV2wyQyxHQUFHMjlDLEdBQUczOUMsRUFBRTh4QyxRQUFRLElBQUk5eEMsRUFBRTh4QyxNQUFNb0UsWUFBWXp2QyxFQUFFb0ssR0FBRzZwQyxHQUFHajBDLEVBQUVvSyxFQUFFeWMsR0FBRzdtQixFQUFFdTBDLFdBQVUsRUFBRzdxQyxFQUFFdEwsRUFBRXpKLEVBQUUsSUFBSSxLQUFLLElBQUlrNEMsR0FBR25OLElBQUkxL0IsRUFBRWlrQyxPQUFPdkUsRUFBRTEvQixFQUFFd29CLE9BQU8sSUFBSWdYLEVBQUU2QyxNQUFNM0MsRUFBRXYvQixHQUFHSCxFQUFFK2pELElBQUlOLEdBQUd6akQsR0FBRSxHQUFJMC9CLEdBQUcsRUFBRUssRUFBRSxDQUFDLy9CLEVBQUUwSixFQUFFdEwsS0FBS3NMLEVBQUV3aEMsVUFBVWxyQyxFQUFFLE1BQU1yTCxFQUFFcUwsRUFBRXFyQyxNQUFNSyxNQUFNMXJDLEVBQUVxckMsTUFBTTNoQyxFQUFFMUosRUFBRSt5QixLQUFLLEtBQUssU0FBUy95QixFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE1BQU0rMkMsTUFBTTdrQixFQUFFdW9CLE1BQU16eEMsRUFBRTB0QyxPQUFPMkwsVUFBVW44QyxJQUFJbUYsRUFBRXcvQixFQUFFaUcsR0FBRzVlLElBQUk2WSxHQUFHMS9CLEVBQUVrdkMsYUFBYSxJQUFJOWtDLEdBQUUsRUFBRyxLQUFLelYsR0FBR2tHLEVBQUUsSUFBSSxHQUFHQSxFQUFFLENBQUMsSUFBSWxHLEVBQUV5YSxHQUFHcFAsRUFBRTBKLEVBQUVtZCxFQUFFbHBCLEtBQUt5TSxHQUFFLEdBQUksSUFBSSxNQUFNek0sS0FBSzZoQyxFQUFFOTFCLElBQUlpM0IsR0FBRWozQixFQUFFL0wsS0FBS2hKLEVBQUV5c0MsR0FBRXpqQyxNQUFNQSxHQUFHZ2pDLEdBQUVqM0IsRUFBRS9VLE1BQU0rcUMsR0FBR3RoQyxRQUFHLElBQVNBLEVBQUVULFNBQUksSUFBU1MsRUFBRXpKLEtBQUtreUIsRUFBRWxwQixHQUFHc2hELEdBQUd2ZixFQUFFRixFQUFFN2hDLE9BQUUsRUFBT3FDLEdBQUUsV0FBWTZtQixFQUFFbHBCLElBQUksR0FBR0EsSUFBSTZoQyxFQUFFLElBQUksTUFBTXgvQixLQUFLckMsRUFBRStMLEdBQUdpM0IsR0FBRWozQixFQUFFMUosWUFBWXJDLEVBQUVxQyxHQUFHb0ssR0FBRSxFQUFHLE1BQU0sR0FBRyxFQUFFdlAsRUFBRSxDQUFDLE1BQU11RCxFQUFFNEIsRUFBRXFyQyxNQUFNc1ksYUFBYSxJQUFJLElBQUlodkQsRUFBRSxFQUFFQSxFQUFFeUosRUFBRXZJLE9BQU9sQixJQUFJLENBQUMsSUFBSWtHLEVBQUV1RCxFQUFFekosR0FBRyxHQUFHeTVDLEdBQUdwdUMsRUFBRWcvQyxhQUFhbmtELEdBQUcsU0FBUyxNQUFNdXhCLEVBQUUxaUIsRUFBRTdPLEdBQUcsR0FBRzZrQyxFQUFFLEdBQUdpQixHQUFFaGpDLEVBQUU5QyxHQUFHdXhCLElBQUl6dUIsRUFBRTlDLEtBQUs4QyxFQUFFOUMsR0FBR3V4QixFQUFFaGlCLEdBQUUsT0FBUSxDQUFDLE1BQU1WLEVBQUV5ekIsR0FBRXRpQyxHQUFHZ3NCLEVBQUVuZCxHQUFHdTFDLEdBQUd2ZixFQUFFRixFQUFFOTFCLEVBQUUwaUIsRUFBRXBzQixHQUFFLEVBQUcsTUFBTW9zQixJQUFJenVCLEVBQUU5QyxLQUFLOEMsRUFBRTlDLEdBQUd1eEIsRUFBRWhpQixHQUFFLEVBQUcsQ0FBQyxDQUFDQSxHQUFHdTZCLEdBQUcza0MsRUFBRSxNQUFNLFNBQVMsQ0FBL2tCLENBQWlsQkEsRUFBRTBKLEVBQUVnaUMsTUFBTS8yQyxFQUFFeUosR0FBRyxFQUFFNEIsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU1pdEMsTUFBTTEyQyxFQUFFdzZDLE1BQU10b0IsR0FBRzdtQixFQUFFLElBQUlyQyxHQUFFLEVBQUc5QyxFQUFFeWxDLEdBQUUsR0FBRyxHQUFHM3JDLEVBQUU4NkMsVUFBVSxDQUFDLE1BQU16dkMsRUFBRTBKLEVBQUV3eUIsRUFBRWw4QixFQUFFNUIsR0FBRyxJQUFJNEIsRUFBRXJDLEdBQUUsR0FBSXFOLEdBQUU2YixFQUFFbmQsR0FBR3RMLEdBQUcsSUFBSTRCLFVBQVU2bUIsRUFBRXFWLElBQUl2K0IsR0FBRytMLEVBQUVtN0MsUUFBUWpGLEdBQUdsMkMsRUFBRW1kLElBQUloc0IsRUFBRTZPLENBQUUsTUFBS0EsSUFBSW8yQyxHQUFHOS9DLEVBQUUwSixHQUFHN08sRUFBRSxDQUFDaTNDLFFBQVEsSUFBSSxHQUFHbjBDLEVBQUUsSUFBSSxNQUFNNmhDLEtBQUszWSxFQUFFNDRCLEdBQUdqZ0IsSUFBSUEsS0FBSzNrQyxVQUFVZ3NCLEVBQUUyWSxFQUFHLEVBQTFPLENBQTRPeC9CLEVBQUUwSixFQUFFa29DLFNBQVN4ekMsR0FBR2ltQyxLQUFLOEksUUFBRyxFQUFPbnRDLEVBQUV3b0IsUUFBUThiLElBQUksRUFBRTFELEVBQUUsQ0FBQzVnQyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsR0FBRSxLQUFNLE1BQU10VCxFQUFFcHNCLEdBQUdBLEVBQUU0eEMsU0FBU3I0QyxFQUFFeUcsRUFBRUEsRUFBRXl2QyxVQUFVLEVBQUU5UCxFQUFFajJCLEVBQUVrb0MsVUFBVW9GLFVBQVU5M0MsRUFBRXV3QyxVQUFVaHBCLEdBQUcvYyxFQUFFLEdBQUd4SyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUlBLEVBQUUsWUFBWTRoQyxFQUFFMVUsRUFBRXVULEVBQUV2aEMsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxHQUFHLEdBQUcsSUFBSXhnQyxFQUFFLFlBQVltaEMsRUFBRWpVLEVBQUV1VCxFQUFFdmhDLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsRUFBRSxDQUFDLEVBQUVqWixHQUFHLEdBQUdsdEIsR0FBRytuQyxFQUFFbFYsRUFBRXZGLEVBQUVscEIsR0FBR2dpQyxJQUFJdlQsR0FBR2hpQixFQUFFaE0sRUFBRXVoQyxJQUFJLEdBQUdwbUMsRUFBRSxHQUFHa3RCLEVBQUVxYSxFQUFFMVUsRUFBRXVULEVBQUV2aEMsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxHQUFHNEIsRUFBRWxWLEVBQUV2RixFQUFFbHBCLEdBQUUsSUFBSyxFQUFFcEUsR0FBRzZRLEVBQUVoTSxFQUFFLElBQUksR0FBR3FvQixHQUFHaWEsRUFBRWYsRUFBRXZoQyxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEdBQUcsRUFBRVcsRUFBRSxDQUFDcmdDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxLQUFLLE1BQU10MUIsR0FBR3BLLEVBQUVBLEdBQUdtUCxJQUFHdFosT0FBT3UyQixHQUFHMWlCLEVBQUVBLEdBQUd5RixJQUFHdFosT0FBTzBELEVBQUVyRSxLQUFLNHZELElBQUkxNkMsRUFBRWdpQixHQUFHLElBQUl1VCxFQUFFLElBQUlBLEVBQUUsRUFBRUEsRUFBRXBtQyxFQUFFb21DLElBQUksQ0FBQyxNQUFNaHJDLEVBQUUrVSxFQUFFaTJCLEdBQUdELEVBQUU4akIsR0FBRzk1QyxFQUFFaTJCLElBQUkrUCxHQUFHaG1DLEVBQUVpMkIsSUFBSWxmLEVBQUV6Z0IsRUFBRTIvQixHQUFHaHJDLEVBQUV5SixFQUFFLEtBQUt5b0IsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxFQUFFLENBQUN0MUIsRUFBRWdpQixFQUFFa1YsRUFBRXRoQyxFQUFFNm1CLEVBQUVscEIsR0FBRSxHQUFHLEVBQUdwRSxHQUFHbW5DLEVBQUVoM0IsRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsRUFBRW5tQyxFQUFFLEVBQUV1bkMsRUFBRSxDQUFDOWdDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxLQUFLLElBQUl0MUIsRUFBRSxFQUFFLE1BQU1naUIsRUFBRTFpQixFQUFFN1QsT0FBTyxJQUFJMEQsRUFBRXlHLEVBQUVuSyxPQUFPLEVBQUU4cEMsRUFBRXZULEVBQUUsRUFBRSxLQUFLaGlCLEdBQUc3USxHQUFHNlEsR0FBR3UxQixHQUFHLENBQUMsTUFBTWhyQyxFQUFFcUwsRUFBRW9LLEdBQUdnaUIsRUFBRTFpQixFQUFFVSxHQUFHczFCLEVBQUU4akIsR0FBRzk1QyxFQUFFVSxJQUFJc2xDLEdBQUdobUMsRUFBRVUsSUFBSSxJQUFJZ25DLEdBQUd6OEMsRUFBRXkzQixHQUFHLE1BQU0zTCxFQUFFOXJCLEVBQUV5M0IsRUFBRWh1QixFQUFFLEtBQUt5b0IsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxHQUFHdDFCLEdBQUcsQ0FBQyxLQUFLQSxHQUFHN1EsR0FBRzZRLEdBQUd1MUIsR0FBRyxDQUFDLE1BQU1ockMsRUFBRXFMLEVBQUV6RyxHQUFHNlEsRUFBRVYsRUFBRWkyQixHQUFHRCxFQUFFOGpCLEdBQUc5NUMsRUFBRWkyQixJQUFJK1AsR0FBR2htQyxFQUFFaTJCLElBQUksSUFBSXlSLEdBQUd6OEMsRUFBRXlWLEdBQUcsTUFBTXFXLEVBQUU5ckIsRUFBRXlWLEVBQUVoTSxFQUFFLEtBQUt5b0IsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFRSxHQUFHbm1DLElBQUlvbUMsR0FBRyxDQUFDLEdBQUd2MUIsRUFBRTdRLEdBQUcsR0FBRzZRLEdBQUd1MUIsRUFBRSxDQUFDLE1BQU0zL0IsRUFBRTIvQixFQUFFLEVBQUVwbUMsRUFBRXlHLEVBQUVvc0IsRUFBRTFpQixFQUFFMUosR0FBRzhJLEdBQUduVSxFQUFFLEtBQUt5VixHQUFHdTFCLEdBQUdsZixFQUFFLEtBQUsvVyxFQUFFVSxHQUFHczFCLEVBQUU4akIsR0FBRzk1QyxFQUFFVSxJQUFJc2xDLEdBQUdobUMsRUFBRVUsSUFBSWhNLEVBQUU3RSxFQUFFc3RCLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsR0FBR3QxQixHQUFHLE9BQU8sR0FBR0EsRUFBRXUxQixFQUFFLEtBQUt2MUIsR0FBRzdRLEdBQUcwbkMsRUFBRWpoQyxFQUFFb0ssR0FBR3ljLEVBQUVscEIsR0FBRSxHQUFJeU0sUUFBUSxDQUFDLE1BQU1sTCxFQUFFa0wsRUFBRXFjLEVBQUVyYyxFQUFFNjFCLEVBQUUsSUFBSXVFLElBQUksSUFBSXA2QixFQUFFcWMsRUFBRXJjLEdBQUd1MUIsRUFBRXYxQixJQUFJLENBQUMsTUFBTXBLLEVBQUUwSixFQUFFVSxHQUFHczFCLEVBQUU4akIsR0FBRzk1QyxFQUFFVSxJQUFJc2xDLEdBQUdobUMsRUFBRVUsSUFBSSxNQUFNcEssRUFBRWtJLEtBQUsrM0IsRUFBRTE0QixJQUFJdkgsRUFBRWtJLElBQUlrQyxFQUFFLENBQUMsSUFBSWsyQixFQUFFcEUsRUFBRSxFQUFFLE1BQU03eEIsRUFBRXMxQixFQUFFbFosRUFBRSxFQUFFLElBQUlyeEIsR0FBRSxFQUFHeUksRUFBRSxFQUFFLE1BQU0waUMsRUFBRSxJQUFJN2hCLE1BQU1yVSxHQUFHLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRUQsSUFBSW0yQixFQUFFbjJCLEdBQUcsRUFBRSxJQUFJQSxFQUFFbEwsRUFBRWtMLEdBQUc3USxFQUFFNlEsSUFBSSxDQUFDLE1BQU16VixFQUFFcUwsRUFBRW9LLEdBQUcsR0FBRzh4QixHQUFHN3hCLEVBQUUsQ0FBQzQyQixFQUFFdHNDLEVBQUVreUIsRUFBRWxwQixHQUFFLEdBQUksUUFBUSxDQUFDLElBQUl5dUIsRUFBRSxHQUFHLE1BQU16M0IsRUFBRXVULElBQUlra0IsRUFBRTZULEVBQUVwckIsSUFBSWxnQixFQUFFdVQsVUFBVSxJQUFJbzRCLEVBQUU3WixFQUFFNlosR0FBR1gsRUFBRVcsSUFBSSxHQUFHLElBQUlDLEVBQUVELEVBQUU3WixJQUFJMnFCLEdBQUd6OEMsRUFBRStVLEVBQUU0MkIsSUFBSSxDQUFDbFUsRUFBRWtVLEVBQUUsS0FBSyxNQUFDLElBQVNsVSxFQUFFNlUsRUFBRXRzQyxFQUFFa3lCLEVBQUVscEIsR0FBRSxJQUFLNGlDLEVBQUVuVSxFQUFFM0YsR0FBR3JjLEVBQUUsRUFBRWdpQixHQUFHdnVCLEVBQUVBLEVBQUV1dUIsRUFBRWgzQixHQUFFLEVBQUdxckIsRUFBRTlyQixFQUFFK1UsRUFBRTBpQixHQUFHaHVCLEVBQUUsS0FBS3lvQixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEdBQUd4RCxJQUFJLENBQUMsTUFBTWx4QixFQUFFNVYsRUFBRSxTQUFTNEssR0FBRyxNQUFNMEosRUFBRTFKLEVBQUV4RCxRQUFRNEIsRUFBRSxDQUFDLEdBQUcsSUFBSXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxFQUFFLE1BQU1FLEVBQUUxL0IsRUFBRW5LLE9BQU8sSUFBSWxCLEVBQUUsRUFBRUEsRUFBRStxQyxFQUFFL3FDLElBQUksQ0FBQyxNQUFNK3FDLEVBQUUxL0IsRUFBRXJMLEdBQUcsR0FBRyxJQUFJK3FDLEVBQUUsQ0FBQyxHQUFHN1ksRUFBRXpvQixFQUFFQSxFQUFFdkksT0FBTyxHQUFHbUssRUFBRTZtQixHQUFHNlksRUFBRSxDQUFDaDJCLEVBQUUvVSxHQUFHa3lCLEVBQUV6b0IsRUFBRVUsS0FBS25LLEdBQUcsUUFBUSxDQUFDLElBQUlnSixFQUFFLEVBQUU5QyxFQUFFdUQsRUFBRXZJLE9BQU8sRUFBRThILEVBQUU5QyxHQUFHMmtDLEVBQUU3aEMsRUFBRTlDLEdBQUcsRUFBRW1GLEVBQUU1QixFQUFFb2hDLElBQUlFLEVBQUUvaEMsRUFBRTZoQyxFQUFFLEVBQUUza0MsRUFBRTJrQyxFQUFFRSxFQUFFMS9CLEVBQUU1QixFQUFFVCxNQUFNQSxFQUFFLElBQUkrTCxFQUFFL1UsR0FBR3lKLEVBQUVULEVBQUUsSUFBSVMsRUFBRVQsR0FBR2hKLEVBQUUsQ0FBQyxDQUFxQixJQUFwQmdKLEVBQUVTLEVBQUV2SSxPQUFPZ0YsRUFBRXVELEVBQUVULEVBQUUsR0FBUUEsS0FBSyxHQUFHUyxFQUFFVCxHQUFHOUMsRUFBRUEsRUFBRTZPLEVBQUU3TyxHQUFHLE9BQU91RCxDQUFDLENBQXRULENBQXdUbWlDLEdBQUdweEIsR0FBRSxJQUFJbXhCLEVBQUV0MUIsRUFBRW5WLE9BQU8sRUFBRXVVLEVBQUVDLEVBQUUsRUFBRUQsR0FBRyxFQUFFQSxJQUFJLENBQUMsTUFBTXBLLEVBQUV5bUIsRUFBRXJjLEVBQUU3USxFQUFFbVEsRUFBRTFKLEdBQUcyL0IsRUFBRTMvQixFQUFFLEVBQUVvc0IsRUFBRTFpQixFQUFFMUosRUFBRSxHQUFHOEksR0FBR25VLEVBQUUsSUFBSTRyQyxFQUFFbjJCLEdBQUdxVyxFQUFFLEtBQUtsbkIsRUFBRTZFLEVBQUV1aEMsRUFBRTlZLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsR0FBR3RxQyxJQUFJa3JDLEVBQUUsR0FBR2wyQixJQUFJWSxFQUFFczFCLEdBQUdVLEVBQUV6bkMsRUFBRTZFLEVBQUV1aEMsRUFBRSxHQUFHVyxJQUFJLENBQUMsR0FBR1UsRUFBRSxDQUFDaGhDLEVBQUUwSixFQUFFL1UsRUFBRWt5QixFQUFFbHBCLEVBQUUsUUFBUSxNQUFNbUwsR0FBR2pPLEVBQUVQLEtBQUtrbEMsRUFBRXhXLFdBQVcwVyxFQUFFa1MsU0FBU3huQyxFQUFFcWxDLFVBQVVyakIsR0FBR3BzQixFQUFFLEdBQUcsRUFBRW9zQixFQUFjNFUsRUFBRWhoQyxFQUFFa3JDLFVBQVVtRixRQUFRM21DLEVBQUUvVSxFQUFFa3lCLFFBQUcsR0FBRyxJQUFJdUYsRUFBY3BzQixFQUFFMHdDLFNBQVMwQixLQUFLMW9DLEVBQUUvVSxFQUFFa3lCLFFBQUcsR0FBRyxHQUFHdUYsRUFBY29ULEVBQUU0UyxLQUFLcHlDLEVBQUUwSixFQUFFL1UsRUFBRW90QyxRQUFJLEdBQUd2QyxJQUFJdVgsR0FBa0YsR0FBR3ZYLElBQUkwaUIsR0FBa0csR0FBRyxJQUFJcjdCLEdBQUcsRUFBRXVGLEdBQUdzVCxFQUFFLEdBQUcsSUFBSTdZLEVBQUU2WSxFQUFFaVgsWUFBWTk3QyxHQUFHdUQsRUFBRXZELEVBQUU2TyxFQUFFL1UsR0FBR3MvQyxJQUFJLElBQUl2VSxFQUFFNXdCLE1BQU1qVSxJQUFJOEMsT0FBTyxDQUFDLE1BQU1rNUMsTUFBTTcyQyxFQUFFdTJDLFdBQVcxdkIsRUFBRXNyQixXQUFXeDBDLEdBQUcraEMsRUFBRUYsRUFBRSxJQUFJcGhDLEVBQUV2RCxFQUFFNk8sRUFBRS9VLEdBQUd5VixFQUFFLEtBQUtwSyxFQUFFbkYsR0FBRyxLQUFLMmtDLElBQUk3aEMsR0FBR0EsR0FBRyxHQUFHLEVBQUVrcEIsRUFBRUEsRUFBRWhzQixFQUFFMmtDLEVBQUVwMUIsR0FBR0EsR0FBRyxNQUFNaE0sRUFBRXZELEVBQUU2TyxFQUFFL1UsT0FBeFIsR0FBR21VLEdBQUc5SSxFQUFFaXlDLE9BQU92b0MsR0FBRy9VLEVBQUVreUIsS0FBSyxJQUFJbHBCLEVBQUUsS0FBS3FDLEdBQUdBLElBQUkwSixHQUFHL0wsRUFBRXBFLEVBQUV5RyxHQUFHNUIsRUFBRTRCLEVBQUVyTCxFQUFFa3lCLEdBQUc3bUIsRUFBRXJDLEVBQUVTLEVBQUVzTCxFQUFFL1UsRUFBRWt5QixFQUFHLEVBQTNFLENBQTZFN21CLEVBQUUwSixFQUFFL1UsT0FBL0wsQ0FBV3lKLEVBQUV2RCxFQUFFNk8sRUFBRS9VLEdBQUcsSUFBSSxJQUFJcUwsRUFBRSxFQUFFQSxFQUFFb0ssRUFBRXZVLE9BQU9tSyxJQUFJZ2hDLEVBQUU1MkIsRUFBRXBLLEdBQUcwSixFQUFFL1UsRUFBRWt5QixHQUFlem9CLEVBQUU0QixFQUFFaXlDLE9BQU92b0MsRUFBRS9VLEVBQUUsQ0FBZ1QsRUFBRXNzQyxFQUFFLENBQUNqaEMsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBRSxFQUFHa3lCLEdBQUUsS0FBTSxNQUFNdnNCLEtBQUtxRCxFQUFFK3RDLE1BQU03d0MsRUFBRWk5QyxJQUFJdFksRUFBRW9TLFNBQVNsUyxFQUFFc1QsZ0JBQWdCNW9DLEVBQUVxbEMsVUFBVXJqQixFQUFFNHFCLFVBQVV6OUMsRUFBRTAyQyxLQUFLdFEsR0FBRzMvQixFQUFFLEdBQUcsTUFBTXcvQixHQUFHNGhCLEdBQUc1aEIsRUFBRSxLQUFLcGhDLEVBQUU0QixHQUFFLEdBQUksSUFBSW9zQixFQUFFLFlBQVkxaUIsRUFBRTZsQyxJQUFJb0osV0FBVzM0QyxHQUFHLE1BQU1kLEVBQUUsRUFBRWt0QixHQUFHdVQsRUFBRWxaLEdBQUd5d0IsR0FBR2wzQyxHQUFHLElBQUl5Z0IsRUFBRSxHQUFHZ0csSUFBSWhHLEVBQUU1bEIsR0FBR0EsRUFBRWtxRCx1QkFBdUJyTSxHQUFHajRCLEVBQUUvVyxFQUFFMUosR0FBRyxFQUFFb3NCLEVBQUVpVixFQUFFcmhDLEVBQUVrckMsVUFBVTlzQyxFQUFFekosT0FBTyxDQUFDLEdBQUcsSUFBSXkzQixFQUFFLFlBQVlwc0IsRUFBRTB3QyxTQUFTZ0MsUUFBUXQwQyxFQUFFekosR0FBR3VLLEdBQUd5N0MsR0FBRzM2QyxFQUFFLEtBQUswSixFQUFFLGlCQUFpQixHQUFHMGlCLEVBQUVwc0IsRUFBRTFGLEtBQUt3WixPQUFPOVQsRUFBRTBKLEVBQUV0TCxFQUFFeW9CLEVBQUVrYixFQUFHcHRDLEdBQUd5VixJQUFJek0sSUFBSW81QyxJQUFJeDlDLEVBQUUsR0FBRyxHQUFHQSxHQUFHK25DLEVBQUVsM0IsRUFBRVYsRUFBRXRMLEdBQUUsR0FBRyxJQUFLVCxJQUFJbzVDLElBQUksSUFBSXg5QyxJQUFJc3RCLEdBQUcsR0FBR3VGLElBQUlrVixFQUFFNUIsRUFBRWgyQixFQUFFdEwsR0FBR3pKLEdBQUd1c0MsRUFBRWxoQyxFQUFFLEVBQUV5bUIsSUFBSWhHLEVBQUU1bEIsR0FBR0EsRUFBRWcrQyxtQkFBbUIzNUMsSUFBSSswQyxJQUFJLEtBQUt4ekIsR0FBR2k0QixHQUFHajRCLEVBQUUvVyxFQUFFMUosR0FBR2QsR0FBR3k3QyxHQUFHMzZDLEVBQUUsS0FBSzBKLEVBQUUsWUFBWSxHQUFHdEwsRUFBRSxFQUFFOGlDLEVBQUVsaEMsSUFBSSxNQUFNMUYsS0FBS29QLEVBQUVaLEdBQUcxSyxFQUFFNnpDLE9BQU9wckIsRUFBRW1DLFdBQVdyckIsR0FBR3FDLEVBQUUsR0FBRzBKLElBQUlxdEMsR0FBRyxZQUFZNVYsRUFBRS9pQyxFQUFFeW9CLEdBQUcsR0FBR25kLElBQUl3NEMsR0FBRyxXQUFXLEdBQUdwNUMsR0FBRzlJLEVBQUVpeUMsT0FBT3ZvQyxNQUFNLElBQUl0TCxFQUFFLEtBQUs0QixHQUFHQSxJQUFJMEosR0FBR3RMLEVBQUU3RSxFQUFFeUcsR0FBR3JMLEVBQUVxTCxHQUFHQSxFQUFFNUIsRUFBRXpKLEVBQUUrVSxFQUFHLEVBQS9ELENBQWlFMUosR0FBRyxNQUFNbkYsRUFBRSxLQUFLbEcsRUFBRXlKLEdBQUdULElBQUlBLEVBQUV1M0MsV0FBV3YzQyxFQUFFdzBDLFlBQVl4MEMsRUFBRXcwQyxZQUFZLEVBQUUsR0FBRyxFQUFFbnlDLEVBQUV5dkMsV0FBVzl4QyxJQUFJQSxFQUFFdTNDLFVBQVUsQ0FBQyxNQUFNMkIsTUFBTW50QyxFQUFFNnNDLFdBQVc1aEQsR0FBR2dKLEVBQUVrcEIsRUFBRSxJQUFJbmQsRUFBRXRMLEVBQUV2RCxHQUFHbEcsRUFBRUEsRUFBRXFMLEVBQUU4SSxHQUFHak8sRUFBRWdzQixHQUFHQSxHQUFJLE1BQUtoc0IsR0FBRyxFQUFFc21DLEVBQUUsQ0FBQ25oQyxFQUFFMEosS0FBSyxJQUFJdEwsRUFBRSxLQUFLNEIsSUFBSTBKLEdBQUd0TCxFQUFFN0UsRUFBRXlHLEdBQUdyTCxFQUFFcUwsR0FBR0EsRUFBRTVCLEVBQUV6SixFQUFFK1UsRUFBRSxFQUFFMjNCLEVBQUUsQ0FBQ3JoQyxFQUFFMEosRUFBRXRMLEtBQUssTUFBTW1tRCxJQUFJNXZELEVBQUVzdkMsTUFBTXBkLEVBQUUyQixPQUFPN3FCLEVBQUUweUMsUUFBUXgxQyxFQUFFNmEsR0FBRzhwQixHQUFHeC9CLEVBQUVyTCxHQUFHNnNDLEdBQUU3c0MsR0FBR2t5QixFQUFFeWIsT0FBTzNrQyxJQUFJQSxFQUFFc2tDLFFBQU8sRUFBR2hCLEVBQUVwbUMsRUFBRW1GLEVBQUUwSixFQUFFdEwsSUFBSW9oQyxHQUFHeVUsR0FBR3pVLEVBQUU5MUIsR0FBR3VxQyxJQUFJLEtBQUtqMEMsRUFBRTZ0QyxhQUFZLENBQUUsR0FBR25rQyxHQUFHQSxHQUFHQSxFQUFFa25DLGdCQUFnQmxuQyxFQUFFbWtDLGFBQWE3dEMsRUFBRXN5QyxXQUFXdHlDLEVBQUV3eUMsZUFBZXh5QyxFQUFFdXlDLGFBQWE3b0MsRUFBRTRuQyxZQUFZNW5DLEVBQUVnNkIsT0FBTyxJQUFJaDZCLEVBQUVnNkIsTUFBTWg2QixFQUFFd1UsVUFBVSxFQUFFb2pCLEVBQUUsQ0FBQ3RoQyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFFLEVBQUdreUIsR0FBRSxFQUFHbHBCLEVBQUUsS0FBSyxJQUFJLElBQUk5QyxFQUFFOEMsRUFBRTlDLEVBQUVtRixFQUFFbkssT0FBT2dGLElBQUlvbUMsRUFBRWpoQyxFQUFFbkYsR0FBRzZPLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFLEVBQUUwYSxFQUFFdmhDLEdBQUcsRUFBRUEsRUFBRXl2QyxVQUFVbE8sRUFBRXZoQyxFQUFFa3JDLFVBQVVtRixTQUFTLElBQUlyd0MsRUFBRXl2QyxVQUFVenZDLEVBQUUwd0MsU0FBUzNkLE9BQU94NUIsRUFBRXlHLEVBQUVpeUMsUUFBUWp5QyxFQUFFOEksSUFBSSs0QixFQUFFLENBQUM3aEMsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU00QixFQUFFMEosRUFBRWs1QyxRQUFRM2hCLEVBQUV2M0IsRUFBRWs1QyxPQUFPLEtBQUssTUFBSyxHQUFJbmlDLEVBQUUvVyxFQUFFazVDLFFBQVEsS0FBSzVpRCxFQUFFMEosRUFBRSxLQUFLLEtBQUssS0FBS3RMLEdBQUdndkMsS0FBSzFqQyxFQUFFazVDLE9BQU81aUQsQ0FBQyxFQUFFK2hDLEVBQUcsQ0FBQ3hvQyxFQUFFa25CLEVBQUUvSyxHQUFHdXJCLEVBQUV4Z0IsRUFBRXVnQixFQUFFbmEsRUFBRXFhLEVBQUU0SCxHQUFHdkosRUFBRXlsQixHQUFHdGtCLEVBQUV1a0IsR0FBR3JrQixFQUFFc2tCLElBQUk3dUQsRUFBRStILEVBQUVtakMsRUFBRTVzQyxFQUFFcUwsR0FBRyxJQUFJd2lDLEVBQUdDLEVBQUcsT0FBTy80QixLQUFLODRCLEVBQUdDLEdBQUkvNEIsRUFBRXE0QixJQUFLLENBQUM3USxPQUFPMlEsRUFBRTRQLFFBQVFqUCxFQUFHMmlCLFVBQVU5RSxHQUFHeGUsRUFBRVcsR0FBSSxDQUFDLFNBQVNpaEIsSUFBSXpmLE9BQU9oa0MsRUFBRXdvQixPQUFPOWUsR0FBR3RMLEdBQUc0QixFQUFFK2tDLGFBQWFyN0IsRUFBRXE3QixhQUFhM21DLENBQUMsQ0FBQyxTQUFTeWxELEdBQUc3akQsRUFBRTBKLEVBQUV0TCxHQUFFLEdBQUksTUFBTXpKLEVBQUVxTCxFQUFFNHhDLFNBQVMvcUIsRUFBRW5kLEVBQUVrb0MsU0FBUyxHQUFHdFMsR0FBRTNxQyxJQUFJMnFDLEdBQUV6WSxHQUFHLElBQUksSUFBSWxwQixFQUFFLEVBQUVBLEVBQUVoSixFQUFFa0IsT0FBTzhILElBQUksQ0FBQyxNQUFNcUMsRUFBRXJMLEVBQUVnSixHQUFHLElBQUkrTCxFQUFFbWQsRUFBRWxwQixHQUFHLEVBQUUrTCxFQUFFK2xDLFlBQVkvbEMsRUFBRXNwQyxtQkFBbUJ0cEMsRUFBRXN0QyxXQUFXLEdBQUcsS0FBS3R0QyxFQUFFc3RDLGFBQWF0dEMsRUFBRW1kLEVBQUVscEIsR0FBRzZsRCxHQUFHMzhCLEVBQUVscEIsSUFBSStMLEVBQUVaLEdBQUc5SSxFQUFFOEksSUFBSTFLLEdBQUd5bEQsR0FBRzdqRCxFQUFFMEosR0FBRyxDQUFDLENBQUMsTUFBTTA3QyxHQUFHcGxELEdBQUdBLElBQUlBLEVBQUV6SixVQUFVLEtBQUt5SixFQUFFekosVUFBVTh1RCxHQUFHcmxELEdBQUcsb0JBQW9Cc2xELFlBQVl0bEQsYUFBYXNsRCxXQUFXQyxHQUFHLENBQUN2bEQsRUFBRTBKLEtBQUssTUFBTXRMLEVBQUU0QixHQUFHQSxFQUFFazBDLEdBQUcsT0FBRzNVLEdBQUVuaEMsR0FBT3NMLEVBQVVBLEVBQUV0TCxHQUFVLEtBQVlBLENBQUMsRUFBRSxTQUFTb25ELEdBQUd4bEQsRUFBRTBKLEVBQUV0TCxHQUFHekosR0FBR290RCxPQUFPcHRELEdBQUc4ckIsRUFBRW9HLEdBQUdscEIsRUFBRSxHQUFHLElBQUlBLEdBQUdoSixFQUFFcUwsRUFBRXlsRCxhQUFhLzdDLEVBQUV0TCxHQUFHLE1BQU0wSyxHQUFHak8sRUFBRW8zQyxPQUFPelMsRUFBRWlRLFVBQVUvUCxFQUFFa1MsU0FBU3huQyxFQUFFc2hDLE1BQU10ZixHQUFHcHNCLEVBQUV6RyxFQUFFLElBQUlvRSxFQUFFLEdBQUdwRSxHQUFHNUUsRUFBRWtHLEVBQUU2TyxFQUFFdEwsS0FBSzdFLEdBQUc2ckQsR0FBR2g1QixLQUFLLEdBQUdzVCxFQUFFLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFdjFCLEVBQUV2VSxPQUFPOHBDLElBQUk5WSxFQUFFemMsRUFBRXUxQixHQUFHajJCLEVBQUV0TCxFQUFFLEdBQUc3RSxHQUFHNUUsRUFBRTZxQyxFQUFFOTFCLEVBQUV0TCxFQUFFLENBQUMsTUFBTXNuRCxHQUFHLENBQUNDLGNBQWEsRUFBR2xWLFFBQVF6d0MsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEVBQUVFLEVBQUV0MUIsR0FBRyxNQUFNNDZDLEdBQUc1NEIsRUFBRTY0QixHQUFHMXJELEVBQUUyckQsSUFBSXZsQixFQUFFaHJDLEdBQUdvdEQsT0FBTzdpRCxFQUFFNDlCLGNBQWNyVyxFQUFFbzdCLFdBQVdwaEMsSUFBSXJXLEVBQUU2MUIsRUFBRW1sQixHQUFHMTdDLEVBQUVnaUMsT0FBTyxJQUFJK0QsVUFBVW5QLEVBQUVzUixTQUFTemlDLEVBQUU2akMsZ0JBQWdCOVcsR0FBR3h5QixFQUFFLEdBQUcsTUFBTTFKLEVBQUUsQ0FBQyxNQUFNQSxFQUFFMEosRUFBRVosR0FBRzJYLEVBQUUsSUFBSXJXLEVBQUVWLEVBQUV1b0MsT0FBT3h4QixFQUFFLElBQUl2aEIsRUFBRWMsRUFBRTVCLEVBQUV6SixHQUFHdUssRUFBRWtMLEVBQUVoTSxFQUFFekosR0FBRyxNQUFNNEUsRUFBRW1RLEVBQUV0SixPQUFPbWxELEdBQUc3N0MsRUFBRWdpQyxNQUFNamxCLEdBQUdrWixFQUFFajJCLEVBQUUrN0MsYUFBYWhsQyxFQUFFLElBQUlsbkIsSUFBSTJGLEVBQUV5Z0MsRUFBRXBtQyxHQUFHc0IsRUFBRUEsR0FBR3dxRCxHQUFHOXJELElBQUksTUFBTTJpQyxFQUFFLENBQUNsOEIsRUFBRTBKLEtBQUssR0FBRzQyQixHQUFHbFUsRUFBRWpkLEVBQUVuUCxFQUFFMEosRUFBRW1kLEVBQUVscEIsRUFBRTlDLEVBQUUya0MsRUFBRUUsRUFBRSxFQUFFTyxFQUFFL0QsRUFBRTk5QixFQUFFZ00sR0FBRzdRLEdBQUcyaUMsRUFBRTNpQyxFQUFFb21DLEVBQUUsS0FBSyxDQUFDajJCLEVBQUVaLEdBQUc5SSxFQUFFOEksR0FBRyxNQUFNblUsRUFBRStVLEVBQUV1b0MsT0FBT2p5QyxFQUFFaXlDLE9BQU83bEIsRUFBRTFpQixFQUFFdEosT0FBT0osRUFBRUksT0FBT2xCLEVBQUV3SyxFQUFFKzdDLGFBQWF6bEQsRUFBRXlsRCxhQUFhaGxDLEVBQUUya0MsR0FBR3BsRCxFQUFFMHJDLE9BQU9wTCxFQUFFN2YsRUFBRXJpQixFQUFFZ3VCLEVBQUVqZCxFQUFFc1IsRUFBRTlyQixFQUFFdUssRUFBRSxHQUFHckUsRUFBRUEsR0FBR3dxRCxHQUFHajVCLEdBQUc4UCxHQUFHeUQsRUFBRTMvQixFQUFFZ3pDLGdCQUFnQjlXLEVBQUVvRSxFQUFFelosRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxHQUFHcWtCLEdBQUc3akQsRUFBRTBKLEdBQUUsSUFBS2cyQixHQUFHbm1DLEVBQUV5RyxFQUFFMEosRUFBRTQyQixFQUFFbnhCLEVBQUUwWCxFQUFFbHBCLEVBQUU5QyxFQUFFMmtDLEdBQUUsR0FBSVMsRUFBRXhmLEdBQUcra0MsR0FBRzk3QyxFQUFFdEwsRUFBRXpKLEVBQUV5VixFQUFFLFFBQVEsSUFBSVYsRUFBRWdpQyxPQUFPaGlDLEVBQUVnaUMsTUFBTXdJLE9BQU9sMEMsRUFBRTByQyxPQUFPMXJDLEVBQUUwckMsTUFBTXdJLElBQUksQ0FBQyxNQUFNbDBDLEVBQUUwSixFQUFFdEosT0FBT21sRCxHQUFHNzdDLEVBQUVnaUMsTUFBTWpsQixHQUFHem1CLEdBQUd3bEQsR0FBRzk3QyxFQUFFMUosRUFBRSxLQUFLb0ssRUFBRSxFQUFFLE1BQU1xVyxHQUFHK2tDLEdBQUc5N0MsRUFBRTBpQixFQUFFbHRCLEVBQUVrTCxFQUFFLEVBQUUsQ0FBRSxFQUFDMEosT0FBTzlULEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUcrZ0IsR0FBR21SLEVBQUVseUIsR0FBR21mLE9BQU9uVyxJQUFJOUMsR0FBRyxNQUFNNDBDLFVBQVVqUSxFQUFFb1MsU0FBU2xTLEVBQUV1UyxPQUFPN25DLEVBQUVxN0MsYUFBYXI1QixFQUFFaHNCLE9BQU83RyxFQUFFbXlDLE1BQU0vTCxHQUFHMy9CLEVBQUUsR0FBR3pHLEdBQUdvRSxFQUFFeXVCLElBQUl2eEIsSUFBSXVxRCxHQUFHemxCLE1BQU1oaUMsRUFBRXlNLEdBQUcsR0FBR28xQixHQUFHLElBQUksSUFBSXRnQyxFQUFFLEVBQUVBLEVBQUV3Z0MsRUFBRTdwQyxPQUFPcUosSUFBSSxDQUFDLE1BQU1jLEVBQUUwL0IsRUFBRXhnQyxHQUFHMm5CLEVBQUU3bUIsRUFBRTBKLEVBQUV0TCxHQUFFLElBQUs0QixFQUFFZ3pDLGdCQUFnQixDQUFFLEVBQUNaLEtBQUtvVCxHQUFHL1QsUUFBUSxTQUFTenhDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixHQUFHaEosR0FBR210RCxZQUFZam5ELEVBQUU2MkMsV0FBV2xTLEVBQUUxQyxjQUFjNEMsSUFBSXQxQixHQUFHLE1BQU1naUIsRUFBRTFpQixFQUFFdEosT0FBT21sRCxHQUFHNzdDLEVBQUVnaUMsTUFBTWhNLEdBQUcsR0FBR3RULEVBQUUsQ0FBQyxNQUFNc1QsRUFBRXRULEVBQUV3NUIsTUFBTXg1QixFQUFFczJCLFdBQVcsR0FBRyxHQUFHaDVDLEVBQUUrbEMsVUFBVSxHQUFHMlYsR0FBRzE3QyxFQUFFZ2lDLE9BQU9oaUMsRUFBRXVvQyxPQUFPN25DLEVBQUV2UCxFQUFFbUYsR0FBRzBKLEVBQUU4MUIsRUFBRXgvQixHQUFHNUIsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixHQUFHK0wsRUFBRSs3QyxhQUFhL2xCLE1BQU0sQ0FBQ2gyQixFQUFFdW9DLE9BQU9wM0MsRUFBRW1GLEdBQUcsSUFBSXcvQixFQUFFRSxFQUFFLEtBQUtGLEdBQUcsR0FBR0EsRUFBRTNrQyxFQUFFMmtDLEdBQUdBLEdBQUcsSUFBSUEsRUFBRWtpQixVQUFVLG9CQUFvQmxpQixFQUFFdG1DLEtBQUssQ0FBQ3dRLEVBQUUrN0MsYUFBYWptQixFQUFFcFQsRUFBRXc1QixLQUFLbDhDLEVBQUUrN0MsY0FBYzVxRCxFQUFFNk8sRUFBRSs3QyxjQUFjLEtBQUssQ0FBQ3I3QyxFQUFFczFCLEVBQUVoMkIsRUFBRTBpQixFQUFFaHVCLEVBQUV6SixFQUFFa3lCLEVBQUVscEIsRUFBRSxDQUFDLENBQUMsT0FBTytMLEVBQUV1b0MsUUFBUXAzQyxFQUFFNk8sRUFBRXVvQyxPQUFPLEdBQUc4RSxHQUFHelQsWUFBTyxHQUFRMmUsR0FBRzNlLFlBQU8sR0FBUXdNLEdBQUd4TSxZQUFPLEdBQVE0ZSxHQUFHNWUsWUFBTyxHQUFRc00sR0FBRyxHQUFHLElBQUlpRCxHQUFHLEtBQUssU0FBU0QsR0FBRzV5QyxHQUFFLEdBQUk0dkMsR0FBRzl3QyxLQUFLK3pDLEdBQUc3eUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxTQUFTOHlDLEtBQUtsRCxHQUFHck4sTUFBTXNRLEdBQUdqRCxHQUFHQSxHQUFHLzVDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSTg4QyxHQUFHLEVBQUUsU0FBUzdELEdBQUc5dUMsR0FBRzJ5QyxJQUFJM3lDLENBQUMsQ0FBQyxTQUFTNmxELEdBQUc3bEQsR0FBRyxPQUFPQSxFQUFFZ3pDLGdCQUFnQkwsR0FBRyxFQUFFRSxJQUFJMWpDLEdBQUUsS0FBSzJqQyxLQUFLSCxHQUFHLEdBQUdFLElBQUlBLEdBQUcvekMsS0FBS2tCLEdBQUdBLENBQUMsQ0FBQyxTQUFTOGxELEdBQUc5bEQsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEdBQUcsT0FBT2tvRCxHQUFHRSxHQUFHL2xELEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixHQUFFLEdBQUksQ0FBQyxTQUFTNjlDLEdBQUd4N0MsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixHQUFHLE9BQU9nL0IsR0FBR2hXLEdBQUc3dkMsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixHQUFFLEdBQUksQ0FBQyxTQUFTa3NCLEdBQUcveUMsR0FBRyxRQUFRQSxJQUFHLElBQUtBLEVBQUVnbUQsV0FBVyxDQUFDLFNBQVM1VSxHQUFHcHhDLEVBQUUwSixHQUFHLE9BQU8xSixFQUFFMUYsT0FBT29QLEVBQUVwUCxNQUFNMEYsRUFBRWtJLE1BQU13QixFQUFFeEIsR0FBRyxDQUFDLFNBQVMrOUMsR0FBR2ptRCxHQUFHLENBQUMsTUFBTTFKLEdBQUcsY0FBYzR2RCxHQUFHLEVBQUVoK0MsSUFBSWxJLEtBQUssTUFBTUEsRUFBRUEsRUFBRSxLQUFLbW1ELEdBQUcsRUFBRXJPLElBQUk5M0MsRUFBRW9tRCxRQUFRMThDLEVBQUUyOEMsUUFBUWpvRCxLQUFLLE1BQU00QixFQUFFdS9CLEdBQUV2L0IsSUFBSWdtQyxHQUFHaG1DLElBQUlnZ0MsR0FBRWhnQyxHQUFHLENBQUNuRixFQUFFd3pDLEdBQUd4bkIsRUFBRTdtQixFQUFFMUssRUFBRW9VLEVBQUVpMkIsSUFBSXZoQyxHQUFHNEIsRUFBRSxLQUFLLFNBQVMrbEQsR0FBRy9sRCxFQUFFMEosRUFBRSxLQUFLdEwsRUFBRSxLQUFLekosRUFBRSxFQUFFa3lCLEVBQUUsS0FBS2xwQixHQUFHcUMsSUFBSSsyQyxHQUFHLEVBQUUsR0FBR2w4QyxHQUFFLEVBQUcya0MsR0FBRSxHQUFJLE1BQU1FLEVBQUUsQ0FBQ3NtQixhQUFZLEVBQUdwZCxVQUFTLEVBQUd0dUMsS0FBSzBGLEVBQUUwckMsTUFBTWhpQyxFQUFFeEIsSUFBSXdCLEdBQUd3OEMsR0FBR3g4QyxHQUFHb3VDLElBQUlwdUMsR0FBR3k4QyxHQUFHejhDLEdBQUcreEMsUUFBUW5OLEdBQUdpSyxhQUFhLEtBQUszRyxTQUFTeHpDLEVBQUU4c0MsVUFBVSxLQUFLd0YsU0FBUyxLQUFLRyxVQUFVLEtBQUtFLFdBQVcsS0FBS2QsS0FBSyxLQUFLam5CLFdBQVcsS0FBS2xnQixHQUFHLEtBQUttcEMsT0FBTyxLQUFLN3hDLE9BQU8sS0FBS3FsRCxhQUFhLEtBQUt0RCxZQUFZLEVBQUUxUyxVQUFVOXhDLEVBQUVxNUMsVUFBVXJpRCxFQUFFZ3ZELGFBQWE5OEIsRUFBRW1zQixnQkFBZ0IsS0FBSzdILFdBQVcsTUFBTSxPQUFPM0wsR0FBRzhtQixHQUFHNW1CLEVBQUV0aEMsR0FBRyxJQUFJVCxHQUFHcUMsRUFBRTJ4QyxVQUFValMsSUFBSXRoQyxJQUFJc2hDLEVBQUUrUCxXQUFXbFEsR0FBRW5oQyxHQUFHLEVBQUUsSUFBSXUwQyxHQUFHLElBQUk5M0MsR0FBR2c0QyxLQUFLblQsRUFBRXNYLFVBQVUsR0FBRyxFQUFFcjVDLElBQUksS0FBSytoQyxFQUFFc1gsV0FBV25FLEdBQUcvekMsS0FBSzRnQyxHQUFHQSxDQUFDLENBQUMsTUFBTW1RLEdBQUcsU0FBUzd2QyxFQUFFMEosRUFBRSxLQUFLdEwsRUFBRSxLQUFLekosRUFBRSxFQUFFZ0osRUFBRSxLQUFLOUMsR0FBRSxHQUFzQixHQUFsQm1GLEdBQUdBLElBQUk4NkMsS0FBSzk2QyxFQUFFOHZDLElBQU9pRCxHQUFHL3lDLEdBQUcsQ0FBQyxNQUFNckwsRUFBRXE3QyxHQUFHaHdDLEVBQUUwSixHQUFFLEdBQUksT0FBT3RMLEdBQUdrb0QsR0FBRzN4RCxFQUFFeUosR0FBR3UwQyxHQUFHLElBQUk5M0MsR0FBR2c0QyxLQUFLLEVBQUVsK0MsRUFBRTg2QyxVQUFVb0QsR0FBR0EsR0FBRzFjLFFBQVFuMkIsSUFBSXJMLEVBQUVrK0MsR0FBRy96QyxLQUFLbkssSUFBSUEsRUFBRXFpRCxZQUFZLEVBQUVyaUQsQ0FBQyxDQUE0QyxJQUFJNnFDLEVBQUUsR0FBN0NRLEdBQUpSLEVBQUV4L0IsSUFBUSxjQUFjdy9CLElBQUl4L0IsRUFBRUEsRUFBRXVtRCxXQUFvQjc4QyxFQUFFLENBQUNBLEVBQUU4OEMsR0FBRzk4QyxHQUFHLElBQUkrcEIsTUFBTXp6QixFQUFFa0osTUFBTTlLLEdBQUdzTCxFQUFFMUosSUFBSXUvQixHQUFFdi9CLEtBQUswSixFQUFFK3BCLE1BQU1pTSxFQUFFMS9CLElBQUl5L0IsR0FBRXJoQyxLQUFLK3FDLEdBQUcvcUMsS0FBS2toQyxHQUFFbGhDLEtBQUtBLEVBQUU0TSxHQUFFLENBQUUsRUFBQzVNLElBQUlzTCxFQUFFUixNQUFNMmQsRUFBRXpvQixHQUFHLENBQW9FLE9BQU8ybkQsR0FBRy9sRCxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFZ0osRUFBN0U0aEMsR0FBRXYvQixHQUFHLEVBQUVzd0MsR0FBR3R3QyxHQUFHLElBQUksQ0FBQ0EsR0FBR0EsRUFBRTJsRCxhQUFOLENBQW9CM2xELEdBQUcsR0FBR3kvQixHQUFFei9CLEdBQUcsRUFBRWdnQyxHQUFFaGdDLEdBQUcsRUFBRSxFQUF3Qm5GLEdBQUUsRUFBRyxFQUFFLFNBQVMyckQsR0FBR3htRCxHQUFHLE9BQU9BLEVBQUVtcEMsR0FBR25wQyxJQUFJMUosTUFBTTBKLEVBQUVnTCxHQUFFLEdBQUdoTCxHQUFHQSxFQUFFLElBQUksQ0FBQyxTQUFTZ3dDLEdBQUdod0MsRUFBRTBKLEVBQUV0TCxHQUFFLEdBQUksTUFBTXN0QyxNQUFNLzJDLEVBQUVtakQsSUFBSWp4QixFQUFFbXdCLFVBQVVyNUMsRUFBRWkwQyxTQUFTLzJDLEdBQUdtRixFQUFFdy9CLEVBQUU5MUIsRUFBRSs4QyxHQUFHOXhELEdBQUcsQ0FBQSxFQUFHK1UsR0FBRy9VLEVBQUUsTUFBTSxDQUFDcXhELGFBQVksRUFBR3BkLFVBQVMsRUFBR3R1QyxLQUFLMEYsRUFBRTFGLEtBQUtveEMsTUFBTWxNLEVBQUV0M0IsSUFBSXMzQixHQUFHMG1CLEdBQUcxbUIsR0FBR3NZLElBQUlwdUMsR0FBR0EsRUFBRW91QyxJQUFJMTVDLEdBQUd5b0IsRUFBRXlZLEdBQUV6WSxHQUFHQSxFQUFFcXBCLE9BQU9pVyxHQUFHejhDLElBQUksQ0FBQ21kLEVBQUVzL0IsR0FBR3o4QyxJQUFJeThDLEdBQUd6OEMsR0FBR21kLEVBQUU0MEIsUUFBUXo3QyxFQUFFeTdDLFFBQVFsRCxhQUFhdjRDLEVBQUV1NEMsYUFBYTNHLFNBQVMvMkMsRUFBRXVGLE9BQU9KLEVBQUVJLE9BQU9xbEQsYUFBYXpsRCxFQUFFeWxELGFBQWF0RCxZQUFZbmlELEVBQUVtaUQsWUFBWTFTLFVBQVV6dkMsRUFBRXl2QyxVQUFVdUgsVUFBVXR0QyxHQUFHMUosRUFBRTFGLE9BQU95OEMsSUFBSSxJQUFJcDVDLEVBQUUsR0FBRyxHQUFHQSxFQUFFQSxFQUFFZ21ELGFBQWEzakQsRUFBRTJqRCxhQUFhM1EsZ0JBQWdCaHpDLEVBQUVnekMsZ0JBQWdCN0gsV0FBV25yQyxFQUFFbXJDLFdBQVc4RSxLQUFLandDLEVBQUVpd0MsS0FBS2puQixXQUFXaHBCLEVBQUVncEIsV0FBV2tpQixVQUFVbHJDLEVBQUVrckMsVUFBVXdGLFNBQVMxd0MsRUFBRTB3QyxTQUFTRyxVQUFVN3dDLEVBQUU2d0MsV0FBV2IsR0FBR2h3QyxFQUFFNndDLFdBQVdFLFdBQVcvd0MsRUFBRSt3QyxZQUFZZixHQUFHaHdDLEVBQUUrd0MsWUFBWWpvQyxHQUFHOUksRUFBRThJLEdBQUdtcEMsT0FBT2p5QyxFQUFFaXlDLE9BQU8sQ0FBQyxTQUFTc1EsR0FBR3ZpRCxFQUFFLElBQUkwSixFQUFFLEdBQUcsT0FBT21tQyxHQUFHb1MsR0FBRyxLQUFLamlELEVBQUUwSixFQUFFLENBQUMsU0FBU2c5QyxHQUFHMW1ELEVBQUUwSixHQUFHLE1BQU10TCxFQUFFeXhDLEdBQUdxUyxHQUFHLEtBQUtsaUQsR0FBRyxPQUFPNUIsRUFBRStqRCxZQUFZejRDLEVBQUV0TCxDQUFDLENBQUMsU0FBU3BDLEdBQUdnRSxFQUFFLEdBQUcwSixHQUFFLEdBQUksT0FBT0EsR0FBR2twQyxLQUFLNEksR0FBRzFMLEdBQUcsS0FBSzl2QyxJQUFJNnZDLEdBQUdDLEdBQUcsS0FBSzl2QyxFQUFFLENBQUMsU0FBUzB2QyxHQUFHMXZDLEdBQUcsT0FBTyxNQUFNQSxHQUFHLGtCQUFrQkEsRUFBRTZ2QyxHQUFHQyxJQUFJeFEsR0FBRXQvQixHQUFHNnZDLEdBQUdrSCxHQUFHLEtBQUsvMkMsRUFBRXhELFNBQVMsaUJBQWlCd0QsRUFBRXdqRCxHQUFHeGpELEdBQUc2dkMsR0FBR29TLEdBQUcsS0FBS3JyRCxPQUFPb0osR0FBRyxDQUFDLFNBQVN3akQsR0FBR3hqRCxHQUFHLE9BQU8sT0FBT0EsRUFBRThJLElBQUk5SSxFQUFFMm1ELEtBQUszbUQsRUFBRWd3QyxHQUFHaHdDLEVBQUUsQ0FBQyxTQUFTc21ELEdBQUd0bUQsRUFBRTBKLEdBQUcsSUFBSXRMLEVBQUUsRUFBRSxNQUFNcXhDLFVBQVU5NkMsR0FBR3FMLEVBQUUsR0FBRyxNQUFNMEosRUFBRUEsRUFBRSxVQUFVLEdBQUc0MUIsR0FBRTUxQixHQUFHdEwsRUFBRSxRQUFRLEdBQUcsaUJBQWlCc0wsRUFBRSxDQUFDLEdBQUcsR0FBRy9VLEVBQUUsQ0FBQyxNQUFNeUosRUFBRXNMLEVBQUVvb0MsUUFBUSxZQUFZMXpDLElBQUlBLEVBQUUyd0MsS0FBSzN3QyxFQUFFeXdDLElBQUcsR0FBSXlYLEdBQUd0bUQsRUFBRTVCLEtBQUtBLEVBQUUyd0MsS0FBSzN3QyxFQUFFeXdDLElBQUcsSUFBSyxDQUFDLENBQUN6d0MsRUFBRSxHQUFHLE1BQU16SixFQUFFK1UsRUFBRXd5QixFQUFFdm5DLEdBQUcyQixNQUFNb1QsRUFBRSxJQUFJL1UsR0FBRzA1QyxLQUFLLElBQUlBLEdBQUdjLE1BQU1qVCxFQUFFeHlCLEVBQUV3eUIsRUFBRSxHQUFHeHlCLEVBQUV3eUIsRUFBRSxFQUFFbDhCLEVBQUVnM0MsV0FBVyxPQUFPdHRDLEVBQUVtMkMsS0FBS3hSLEVBQUUsQ0FBQyxNQUFNck8sR0FBRXQyQixJQUFJQSxFQUFFLENBQUNvb0MsUUFBUXBvQyxFQUFFbTJDLEtBQUt4UixJQUFJandDLEVBQUUsS0FBS3NMLEVBQUU5UyxPQUFPOFMsR0FBRyxHQUFHL1UsR0FBR3lKLEVBQUUsR0FBR3NMLEVBQUUsQ0FBQzY0QyxHQUFHNzRDLEtBQUt0TCxFQUFFLEdBQUc0QixFQUFFNHhDLFNBQVNsb0MsRUFBRTFKLEVBQUV5dkMsV0FBV3J4QyxDQUFDLENBQUMsU0FBU3FvRCxNQUFNem1ELEdBQUcsTUFBTTBKLEVBQUUsQ0FBQSxFQUFHLElBQUksSUFBSXRMLEVBQUUsRUFBRUEsRUFBRTRCLEVBQUVuSyxPQUFPdUksSUFBSSxDQUFDLE1BQU16SixFQUFFcUwsRUFBRTVCLEdBQUcsSUFBSSxNQUFNNEIsS0FBS3JMLEVBQUUsR0FBRyxVQUFVcUwsRUFBRTBKLEVBQUUrcEIsUUFBUTkrQixFQUFFOCtCLFFBQVEvcEIsRUFBRStwQixNQUFNaU0sRUFBRSxDQUFDaDJCLEVBQUUrcEIsTUFBTTkrQixFQUFFOCtCLGNBQWMsR0FBRyxVQUFVenpCLEVBQUUwSixFQUFFUixNQUFNMmQsRUFBRSxDQUFDbmQsRUFBRVIsTUFBTXZVLEVBQUV1VSxhQUFhLEdBQUdyTCxHQUFFbUMsR0FBRyxDQUFDLE1BQU01QixFQUFFc0wsRUFBRTFKLEdBQUc2bUIsRUFBRWx5QixFQUFFcUwsSUFBSTZtQixHQUFHem9CLElBQUl5b0IsR0FBR3lZLEdBQUVsaEMsSUFBSUEsRUFBRW1ILFNBQVNzaEIsS0FBS25kLEVBQUUxSixHQUFHNUIsRUFBRSxHQUFHOHhDLE9BQU85eEMsRUFBRXlvQixHQUFHQSxFQUFFLEtBQUssS0FBSzdtQixJQUFJMEosRUFBRTFKLEdBQUdyTCxFQUFFcUwsR0FBRyxDQUFDLE9BQU8wSixDQUFDLENBQUMsU0FBU2d2QyxHQUFHMTRDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUUsTUFBTW0zQyxHQUFHOXJDLEVBQUUwSixFQUFFLEVBQUUsQ0FBQ3RMLEVBQUV6SixHQUFHLENBQUMsTUFBTW12RCxHQUFHL0QsS0FBSyxJQUFJaUUsR0FBRyxFQUFNN1EsR0FBRyxLQUFLLE1BQU02QyxHQUFHLElBQUk3QyxJQUFJOUUsR0FBRytGLEdBQUdwMEMsSUFBSW16QyxHQUFHbnpDLEVBQUVBLEVBQUVpa0MsTUFBTS9qQyxJQUFJLEVBQUVtMEMsR0FBRyxLQUFLbEIsSUFBSUEsR0FBR2xQLE1BQU0veUIsTUFBTWlpQyxHQUFHLElBQUksRUFBRSxTQUFTeUksR0FBRzU3QyxHQUFHLE9BQU8sRUFBRUEsRUFBRXFyQyxNQUFNb0UsU0FBUyxDQUFDLElBQUltWCxHQUFHQyxHQUFHbE4sSUFBRyxFQUFHLFNBQVNsSCxHQUFHenlDLEVBQUUwSixFQUFFdEwsR0FBRzRoQyxHQUFFdDJCLEdBQUcxSixFQUFFa3hCLE9BQU94bkIsRUFBRSsxQixHQUFFLzFCLEtBQUsxSixFQUFFc3ZDLFdBQVdyRixHQUFHdmdDLElBQUlrN0MsR0FBRzVrRCxFQUFFNUIsRUFBRSxDQUFDLFNBQVMwb0QsR0FBRzltRCxHQUFHNG1ELEdBQUc1bUQsRUFBRTZtRCxHQUFHN21ELElBQUlBLEVBQUVreEIsT0FBTzYxQixNQUFNL21ELEVBQUVpdkMsVUFBVSxJQUFJbEcsTUFBTS9vQyxFQUFFdXZDLElBQUkyTixJQUFJLENBQUMsQ0FBQyxNQUFNOEosR0FBRyxLQUFLSixHQUFHLFNBQVNoQyxHQUFHNWtELEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNekosRUFBRXFMLEVBQUUxRixLQUFLLElBQUkwRixFQUFFa3hCLE9BQU8sQ0FBQyxJQUFJeG5CLEdBQUdrOUMsS0FBS2p5RCxFQUFFdThCLE9BQU8sQ0FBQyxNQUFNeG5CLEVBQUUvVSxFQUFFc3lELFNBQVMsR0FBR3Y5QyxFQUFFLENBQUMsTUFBTXc5QyxnQkFBZ0I5b0QsRUFBRStoRCxnQkFBZ0J0NUIsR0FBRzdtQixFQUFFbXJDLFdBQVdubEMsUUFBUW1oRCxXQUFXeHBELEVBQUV3aUQsZ0JBQWdCdGxELEdBQUdsRyxFQUFFNnFDLEVBQUV4MEIsR0FBRUEsR0FBRSxDQUFDazhDLGdCQUFnQjlvRCxFQUFFK29ELFdBQVd4cEQsR0FBR2twQixHQUFHaHNCLEdBQUdsRyxFQUFFdThCLE9BQU8wMUIsR0FBR2w5QyxFQUFFODFCLEVBQUUsQ0FBQyxDQUFDeC9CLEVBQUVreEIsT0FBT3Y4QixFQUFFdThCLFFBQVFnTCxHQUFFMnFCLElBQUlBLEdBQUc3bUQsRUFBRSxDQUFDbzBDLEdBQUdwMEMsR0FBR3FrQyxLQUF0ODJCLFNBQVlya0MsR0FBRyxNQUFNMEosRUFBRWdkLEdBQUcxbUIsR0FBRzVCLEVBQUU0QixFQUFFd3JDLE1BQU03MkMsRUFBRXFMLEVBQUV1dkMsSUFBSXdOLElBQUcsRUFBR3J6QyxFQUFFbTBDLGNBQWNULEdBQUcxekMsRUFBRW0wQyxhQUFhNzlDLEVBQUUsTUFBTSxNQUFNOUcsS0FBSzJ0QixFQUFFZ2UsU0FBU2xuQyxFQUFFaWdELFFBQVEvaUQsRUFBRStqRCxNQUFNcGYsRUFBRXFmLFFBQVFuZixFQUFFb2YsT0FBTzEwQyxFQUFFMnpDLFFBQVEzeEIsRUFBRTR4QixZQUFZemtELEVBQUU2Z0QsUUFBUXphLEVBQUVzZSxhQUFhLytDLEVBQUVtN0MsUUFBUTV6QixFQUFFNjNCLFVBQVU3OUIsRUFBRTg5QixZQUFZdGUsRUFBRWtlLGNBQWM3ZCxFQUFFK2QsVUFBVWx2QyxFQUFFK2hCLE9BQU83bUIsRUFBRSs4QyxjQUFjaHlELEVBQUVpeUQsZ0JBQWdCeHBELEVBQUUyZ0QsY0FBY2plLEVBQUVrZSxlQUFlenpDLEVBQUVzOEMsT0FBT2h5RCxFQUFFazZDLGFBQWE5TyxFQUFFZ2UsV0FBVy9kLEVBQUVnZSxXQUFXdG9ELEdBQUdxVCxFQUFFLEdBQUdVLEdBQUcsU0FBU3BLLEVBQUUwSixFQUFFdEwsRUFBRTg5QixHQUFFdm5DLEdBQUUsR0FBSTJxQyxHQUFFdC9CLEtBQUtBLEVBQUUrK0MsR0FBRy8rQyxJQUFJLElBQUksTUFBTTZtQixLQUFLN21CLEVBQUUsQ0FBQyxNQUFNNUIsRUFBRTRCLEVBQUU2bUIsR0FBRyxJQUFJbHBCLEVBQUVBLEVBQUU4aEMsR0FBRXJoQyxHQUFHLFlBQVlBLEVBQUVpMUMsR0FBR2oxQyxFQUFFKzhDLE1BQU10MEIsRUFBRXpvQixFQUFFMHpDLFNBQVEsR0FBSXVCLEdBQUdqMUMsRUFBRSs4QyxNQUFNdDBCLEdBQUd3c0IsR0FBR2oxQyxHQUFHNG5DLEdBQUdyb0MsSUFBSWhKLEVBQUV5UyxPQUFPczZCLGVBQWVoNEIsRUFBRW1kLEVBQUUsQ0FBQythLFlBQVcsRUFBR0QsY0FBYSxFQUFHOXNCLElBQUksSUFBSWxYLEVBQUU5RCxNQUFNME4sSUFBSXZILEdBQUdyQyxFQUFFOUQsTUFBTW1HLElBQUkwSixFQUFFbWQsR0FBR2xwQixDQUFDLENBQUUsQ0FBN1AsQ0FBOFB5TSxFQUFFelYsRUFBRSxLQUFLcUwsRUFBRW1yQyxXQUFXbmxDLE9BQU91aEQsbUJBQW1CMXNELEVBQUUsSUFBSSxNQUFNcWhDLEtBQUtyaEMsRUFBRSxDQUFDLE1BQU1tRixFQUFFbkYsRUFBRXFoQyxHQUFHOEQsR0FBRWhnQyxLQUFLckwsRUFBRXVuQyxHQUFHbDhCLEVBQUUrWSxLQUFLM2EsR0FBRyxDQUFDLEdBQUd5b0IsRUFBRSxDQUFDLE1BQU1uZCxFQUFFbWQsRUFBRTlYLEtBQUszUSxFQUFFQSxHQUFHcWhDLEdBQUUvMUIsS0FBSzFKLEVBQUU5RyxLQUFLZ3RDLEdBQUd4OEIsR0FBRyxDQUFDLEdBQUdxekMsSUFBRyxFQUFHcC9DLEVBQUUsSUFBSSxNQUFNMmhDLEtBQUszaEMsRUFBRSxDQUFDLE1BQU1xQyxFQUFFckMsRUFBRTJoQyxHQUFHNTFCLEVBQUVzMkIsR0FBRWhnQyxHQUFHQSxFQUFFK1ksS0FBSzNhLEVBQUVBLEdBQUc0aEMsR0FBRWhnQyxFQUFFNlUsS0FBSzdVLEVBQUU2VSxJQUFJa0UsS0FBSzNhLEVBQUVBLEdBQUc4OUIsR0FBRXJWLEdBQUdtWixHQUFFaGdDLElBQUlnZ0MsR0FBRWhnQyxFQUFFdUgsS0FBS3ZILEVBQUV1SCxJQUFJd1IsS0FBSzNhLEdBQUc4OUIsR0FBRXJoQyxFQUFFMnNELEdBQUcsQ0FBQzN5QyxJQUFJbkwsRUFBRW5DLElBQUlzZixJQUFJemYsT0FBT3M2QixlQUFlL3NDLEVBQUUycUMsRUFBRSxDQUFDc0MsWUFBVyxFQUFHRCxjQUFhLEVBQUc5c0IsSUFBSSxJQUFJaGEsRUFBRWhCLE1BQU0wTixJQUFJdkgsR0FBR25GLEVBQUVoQixNQUFNbUcsR0FBRyxDQUFDLEdBQUd3L0IsRUFBRSxJQUFJLE1BQU10RCxLQUFLc0QsRUFBRTZkLEdBQUc3ZCxFQUFFdEQsR0FBR3ZuQyxFQUFFeUosRUFBRTg5QixHQUFHLEdBQUd3RCxFQUFFLENBQUMsTUFBTTEvQixFQUFFZ2dDLEdBQUVOLEdBQUdBLEVBQUUzd0IsS0FBSzNRLEdBQUdzaEMsRUFBRXFHLFFBQVFTLFFBQVF4bUMsR0FBR3FGLFNBQVNxRSxJQUFJd3BDLEdBQUd4cEMsRUFBRTFKLEVBQUUwSixHQUFHLEdBQUcsQ0FBQyxTQUFTMDJCLEVBQUVwZ0MsRUFBRTBKLEdBQUc0MUIsR0FBRTUxQixHQUFHQSxFQUFFckUsU0FBU3FFLEdBQUcxSixFQUFFMEosRUFBRXFQLEtBQUszYSxNQUFNc0wsR0FBRzFKLEVBQUUwSixFQUFFcVAsS0FBSzNhLEdBQUcsQ0FBQyxHQUFHZ3VCLEdBQUdneEIsR0FBR2h4QixFQUFFcHNCLEVBQUUsS0FBS29nQyxFQUFFd1osR0FBR3JnRCxHQUFHNm1DLEVBQUV1VSxHQUFHaFYsR0FBR1MsRUFBRXlaLEdBQUczNkMsR0FBR2toQyxFQUFFNFksR0FBR3Z5QixHQUFHMlosRUFBRTZZLEdBQUd4NEIsR0FBRzJmLEVBQUUrWSxHQUFHbFosR0FBR0csRUFBRTZaLEdBQUcxWixHQUFHSCxFQUFFNFosR0FBRzVrRCxHQUFHZ3JDLEVBQUUyWixHQUFHbDhDLEdBQUd1aUMsRUFBRXdVLEdBQUd0VSxHQUFHRixFQUFFbVosR0FBR3BxQyxHQUFHaXhCLEVBQUUwWixHQUFHOXVDLEdBQUdzMEIsR0FBRWhxQyxHQUFHLEdBQUdBLEVBQUVPLE9BQU8sQ0FBQyxNQUFNNlQsRUFBRTFKLEVBQUVpa0QsVUFBVWprRCxFQUFFaWtELFFBQVEsQ0FBQSxHQUFJM3VELEVBQUUrUCxTQUFTckYsSUFBSW9ILE9BQU9zNkIsZUFBZWg0QixFQUFFMUosRUFBRSxDQUFDNlUsSUFBSSxJQUFJelcsRUFBRTRCLEdBQUd1SCxJQUFJbUMsR0FBR3RMLEVBQUU0QixHQUFHMEosR0FBRyxHQUFJLE1BQUsxSixFQUFFaWtELFVBQVVqa0QsRUFBRWlrRCxRQUFRLENBQUUsR0FBRTU1QyxHQUFHckssRUFBRWt4QixTQUFTZ0wsS0FBSWw4QixFQUFFa3hCLE9BQU83bUIsR0FBRyxNQUFNcTJCLElBQUkxZ0MsRUFBRXd2QyxhQUFhOU8sR0FBR0MsSUFBSTNnQyxFQUFFMCtDLFdBQVcvZCxHQUFHdHFDLElBQUkySixFQUFFMitDLFdBQVd0b0QsRUFBRSxDQUFvNXpCb3hELENBQUd6bkQsR0FBR3NrQyxLQUFLK1AsSUFBSSxDQUFDLFNBQVNzUSxHQUFHM2tELEdBQWdDLElBQUk1QixFQUFFLE1BQU0sQ0FBS2d4QyxZQUFRLE9BQU9oeEMsSUFBSUEsRUFBRSxTQUFTNEIsR0FBRyxPQUFPLElBQUkrb0MsTUFBTS9vQyxFQUFFb3ZDLE1BQU0sQ0FBQ3Y2QixJQUFJLENBQUNuTCxFQUFFdEwsS0FBS21tQyxHQUFHdmtDLEVBQUUsRUFBRSxVQUFVMEosRUFBRXRMLE1BQXJFLENBQTRFNEIsR0FBSSxFQUFDbXZDLE1BQU1udkMsRUFBRW12QyxNQUFNOXBCLEtBQUtybEIsRUFBRXFsQixLQUFLaWlDLE9BQXRLNTlDLElBQUkxSixFQUFFaWtELFFBQVF2NkMsR0FBRyxFQUFFLEVBQTRKLENBQUMsU0FBU3l3QyxHQUFHbjZDLEdBQUcsR0FBR0EsRUFBRWlrRCxRQUFRLE9BQU9qa0QsRUFBRWtrRCxjQUFjbGtELEVBQUVra0QsWUFBWSxJQUFJbmIsTUFBTWtCLEdBQUdiLEdBQUdwcEMsRUFBRWlrRCxVQUFVLENBQUNwdkMsSUFBSSxDQUFDbkwsRUFBRXRMLElBQUlBLEtBQUtzTCxFQUFFQSxFQUFFdEwsR0FBR0EsS0FBS3k5QyxHQUFHQSxHQUFHejlDLEdBQUc0QixRQUFHLElBQVMsQ0FBQyxNQUFNMG5ELEdBQUcsa0JBQWtCLFNBQVNyUCxHQUFHcjRDLEVBQUUwSixHQUFFLEdBQUksT0FBT3MyQixHQUFFaGdDLEdBQUdBLEVBQUUybkQsYUFBYTNuRCxFQUFFVyxLQUFLWCxFQUFFVyxNQUFNK0ksR0FBRzFKLEVBQUU0bkQsTUFBTSxDQUFDLFNBQVNuYyxHQUFHenJDLEVBQUUwSixFQUFFdEwsR0FBRSxHQUFJLElBQUl6SixFQUFFMGpELEdBQUczdUMsR0FBRyxJQUFJL1UsR0FBRytVLEVBQUVtK0MsT0FBTyxDQUFDLE1BQU03bkQsRUFBRTBKLEVBQUVtK0MsT0FBT3AxQyxNQUFNLG1CQUFtQnpTLElBQUlyTCxFQUFFcUwsRUFBRSxHQUFHLENBQUMsSUFBSXJMLEdBQUdxTCxHQUFHQSxFQUFFc00sT0FBTyxDQUFDLE1BQU1sTyxFQUFFNEIsSUFBSSxJQUFJLE1BQU01QixLQUFLNEIsRUFBRSxHQUFHQSxFQUFFNUIsS0FBS3NMLEVBQUUsT0FBT3RMLENBQUMsRUFBRXpKLEVBQUV5SixFQUFFNEIsRUFBRTArQyxZQUFZMStDLEVBQUVzTSxPQUFPaFMsS0FBS29rRCxhQUFhdGdELEVBQUU0QixFQUFFbXJDLFdBQVd1VCxXQUFXLENBQUMsT0FBTy9wRCxFQUFFQSxFQUFFYSxRQUFRa3lELElBQUkxbkQsR0FBR0EsRUFBRXpELGdCQUFnQi9HLFFBQVEsUUFBUSxJQUFJNEksRUFBRSxNQUFNLFdBQVcsQ0FBQyxNQUFNb3BELEdBQUcsQ0FBQ3huRCxFQUFFMEosSUFBSSxTQUFTMUosRUFBRTBKLEVBQUV0TCxHQUFFLEdBQUksSUFBSXpKLEVBQUVreUIsRUFBRSxNQUFNbHBCLEVBQUVxaUMsR0FBRWhnQyxHQUFHLE9BQU9yQyxHQUFHaEosRUFBRXFMLEVBQUU2bUIsRUFBRXFWLEtBQUl2bkMsRUFBRXFMLEVBQUU2VSxJQUFJZ1MsRUFBRTdtQixFQUFFdUgsS0FBSyxJQUFJcWpDLEdBQUdqMkMsRUFBRWt5QixFQUFFbHBCLElBQUlrcEIsRUFBRXpvQixFQUFFLENBQWhHLENBQWtHNEIsRUFBRSxFQUFFMjVDLElBQUksU0FBU21PLEtBQUssT0FBTyxJQUFJLENBQUMsU0FBU0MsS0FBSyxPQUFPLElBQUksQ0FBQyxTQUFTQyxHQUFHaG9ELEdBQUcsQ0FBQyxTQUFTaW9ELEdBQUdqb0QsRUFBRTBKLEdBQUcsT0FBTyxJQUFJLENBQUMsU0FBU3crQyxLQUFLLE9BQU9DLEtBQUtoWixLQUFLLENBQUMsU0FBU2laLEtBQUssT0FBT0QsS0FBSy9ZLEtBQUssQ0FBQyxTQUFTK1ksS0FBSyxNQUFNbm9ELEVBQUVnMkMsS0FBSyxPQUFPaDJDLEVBQUVta0QsZUFBZW5rRCxFQUFFbWtELGFBQWFRLEdBQUcza0QsR0FBRyxDQUFDLFNBQVNxb0QsR0FBR3JvRCxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRWtoQyxHQUFFdC9CLEdBQUdBLEVBQUVtZ0MsUUFBUSxDQUFDbmdDLEVBQUUwSixLQUFLMUosRUFBRTBKLEdBQUcsQ0FBRSxFQUFDMUosSUFBSSxDQUFBLEdBQUlBLEVBQUUsSUFBSSxNQUFNckwsS0FBSytVLEVBQUUsQ0FBQyxNQUFNMUosRUFBRTVCLEVBQUV6SixHQUFHcUwsRUFBRXMvQixHQUFFdC9CLElBQUlnZ0MsR0FBRWhnQyxHQUFHNUIsRUFBRXpKLEdBQUcsQ0FBQzJGLEtBQUswRixFQUFFOHhDLFFBQVFwb0MsRUFBRS9VLElBQUlxTCxFQUFFOHhDLFFBQVFwb0MsRUFBRS9VLEdBQUcsT0FBT3FMLElBQUk1QixFQUFFekosR0FBRyxDQUFDbTlDLFFBQVFwb0MsRUFBRS9VLElBQUksQ0FBQyxPQUFPeUosQ0FBQyxDQUFDLFNBQVNrcUQsR0FBR3RvRCxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRSxDQUFBLEVBQUcsSUFBSSxNQUFNekosS0FBS3FMLEVBQUUwSixFQUFFbkUsU0FBUzVRLElBQUl5UyxPQUFPczZCLGVBQWV0akMsRUFBRXpKLEVBQUUsQ0FBQ2l0QyxZQUFXLEVBQUcvc0IsSUFBSSxJQUFJN1UsRUFBRXJMLEtBQUssT0FBT3lKLENBQUMsQ0FBQyxTQUFTbXFELEdBQUd2b0QsR0FBRyxNQUFNMEosRUFBRXNzQyxLQUFLLElBQUk1M0MsRUFBRTRCLElBQUksT0FBT3EwQyxLQUFLeFQsR0FBRXppQyxLQUFLQSxFQUFFQSxFQUFFb0ksT0FBT3hHLElBQUksTUFBTW8wQyxHQUFHMXFDLEdBQUcxSixDQUFDLEtBQUssQ0FBQzVCLEVBQUUsSUFBSWcyQyxHQUFHMXFDLEdBQUcsQ0FBQyxTQUFTOCtDLEdBQUd4b0QsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU16SixFQUFFMitDLFVBQVV6OUMsT0FBTyxPQUFPLElBQUlsQixFQUFFOHFDLEdBQUUvMUIsS0FBSzQxQixHQUFFNTFCLEdBQUdxcEMsR0FBR3JwQyxHQUFHbW1DLEdBQUc3dkMsRUFBRSxLQUFLLENBQUMwSixJQUFJbW1DLEdBQUc3dkMsRUFBRTBKLEdBQUdtbUMsR0FBRzd2QyxFQUFFLEtBQUswSixJQUFJL1UsRUFBRSxFQUFFeUosRUFBRXNnQixNQUFNanFCLFVBQVUrSCxNQUFNdVMsS0FBS3VrQyxVQUFVLEdBQUcsSUFBSTMrQyxHQUFHbytDLEdBQUczMEMsS0FBS0EsRUFBRSxDQUFDQSxJQUFJeXhDLEdBQUc3dkMsRUFBRTBKLEVBQUV0TCxHQUFHLENBQUMsTUFBTXFxRCxHQUFHbmxCLE9BQU8sSUFBSW9sQixHQUFHLEtBQUssQ0FBQyxNQUFNMW9ELEVBQUVxekMsR0FBR29WLElBQUksT0FBT3pvRCxHQUFHaXJDLEdBQUcsb0hBQW9IanJDLENBQUMsR0FBRyxTQUFTMm9ELEtBQUssQ0FBQyxTQUFTQyxHQUFHNW9ELEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUcsTUFBTWt5QixFQUFFem9CLEVBQUV6SixHQUFHLEdBQUdreUIsR0FBR2dpQyxHQUFHaGlDLEVBQUU3bUIsR0FBRyxPQUFPNm1CLEVBQUUsTUFBTWxwQixFQUFFK0wsSUFBSSxPQUFPL0wsRUFBRWdwRCxLQUFLM21ELEVBQUV4RCxRQUFRNEIsRUFBRXpKLEdBQUdnSixDQUFDLENBQUMsU0FBU2tyRCxHQUFHN29ELEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNEIsRUFBRTJtRCxLQUFLLEdBQUd2b0QsRUFBRXZJLFFBQVE2VCxFQUFFN1QsT0FBTyxPQUFNLEVBQUcsSUFBSSxJQUFJbEIsRUFBRSxFQUFFQSxFQUFFeUosRUFBRXZJLE9BQU9sQixJQUFJLEdBQUc0c0MsR0FBRW5qQyxFQUFFekosR0FBRytVLEVBQUUvVSxJQUFJLE9BQU0sRUFBRyxPQUFPZytDLEdBQUcsR0FBR0UsSUFBSUEsR0FBRy96QyxLQUFLa0IsSUFBRyxDQUFFLENBQUMsTUFBTTZnRCxHQUFHLFNBQWlDaUksR0FBRyxvQkFBb0IvL0MsU0FBU0EsU0FBUyxLQUFLZ2dELEdBQUdELElBQUlBLEdBQUc5L0MsY0FBYyxZQUFZZ2dELEdBQUcsQ0FBQ2pILE9BQU8sQ0FBQy9oRCxFQUFFMEosRUFBRXRMLEtBQUtzTCxFQUFFbXlCLGFBQWE3N0IsRUFBRTVCLEdBQUcsS0FBSyxFQUFFMFYsT0FBTzlULElBQUksTUFBTTBKLEVBQUUxSixFQUFFMHhDLFdBQVdob0MsR0FBR0EsRUFBRUYsWUFBWXhKLEVBQUUsRUFBRWdKLGNBQWMsQ0FBQ2hKLEVBQUUwSixFQUFFdEwsRUFBRXpKLEtBQUssTUFBTWt5QixFQUFFbmQsRUFBRW8vQyxHQUFHRyxnQkFBZ0IsNkJBQTZCanBELEdBQUc4b0QsR0FBRzkvQyxjQUFjaEosRUFBRTVCLEVBQUUsQ0FBQzlILEdBQUc4SCxRQUFHLEdBQVEsTUFBTSxXQUFXNEIsR0FBR3JMLEdBQUcsTUFBTUEsRUFBRXUwRCxVQUFVcmlDLEVBQUU1ZCxhQUFhLFdBQVd0VSxFQUFFdTBELFVBQVVyaUMsQ0FBQyxFQUFFZzdCLFdBQVc3aEQsR0FBRzhvRCxHQUFHSyxlQUFlbnBELEdBQUdnaUQsY0FBY2hpRCxHQUFHOG9ELEdBQUc5RyxjQUFjaGlELEdBQUdtakQsUUFBUSxDQUFDbmpELEVBQUUwSixLQUFLMUosRUFBRW9wRCxVQUFVMS9DLENBQUMsRUFBRTA1QyxlQUFlLENBQUNwakQsRUFBRTBKLEtBQUsxSixFQUFFNEosWUFBWUYsQ0FBQyxFQUFFZ29DLFdBQVcxeEMsR0FBR0EsRUFBRTB4QyxXQUFXb1EsWUFBWTloRCxHQUFHQSxFQUFFOGhELFlBQVlobEIsY0FBYzk4QixHQUFHOG9ELEdBQUdoc0IsY0FBYzk4QixHQUFHcWpELFdBQVdyakQsRUFBRTBKLEdBQUcxSixFQUFFaUosYUFBYVMsRUFBRSxHQUFJLEVBQUM0NUMsVUFBVXRqRCxHQUFHLE1BQU0wSixFQUFFMUosRUFBRXNqRCxXQUFVLEdBQUksTUFBTSxXQUFXdGpELElBQUkwSixFQUFFbWdDLE9BQU83cEMsRUFBRTZwQyxRQUFRbmdDLENBQUUsRUFBQzY1QyxvQkFBb0J2akQsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRWt5QixFQUFFbHBCLEdBQUcsTUFBTTlDLEVBQUV1RCxFQUFFQSxFQUFFaWtELGdCQUFnQjM0QyxFQUFFNDRDLFVBQVUsR0FBR3o3QixJQUFJQSxJQUFJbHBCLEdBQUdrcEIsRUFBRWk3QixhQUFhLEtBQUtwNEMsRUFBRW15QixhQUFhaFYsRUFBRXk4QixXQUFVLEdBQUlsbEQsR0FBR3lvQixJQUFJbHBCLElBQUlrcEIsRUFBRUEsRUFBRWk3QixtQkFBbUIsQ0FBQ2lILEdBQUdwL0MsVUFBVWhWLEVBQUcsUUFBT3FMLFVBQVVBLEVBQUUsTUFBTTZtQixFQUFFa2lDLEdBQUd0Z0MsUUFBUSxHQUFHOXpCLEVBQUUsQ0FBQyxNQUFNcUwsRUFBRTZtQixFQUFFNjdCLFdBQVcsS0FBSzFpRCxFQUFFMGlELFlBQVk3N0IsRUFBRXhkLFlBQVlySixFQUFFMGlELFlBQVk3N0IsRUFBRXJkLFlBQVl4SixFQUFFLENBQUMwSixFQUFFbXlCLGFBQWFoVixFQUFFem9CLEVBQUUsQ0FBQyxNQUFNLENBQUN2RCxFQUFFQSxFQUFFaW5ELFlBQVlwNEMsRUFBRWc1QyxXQUFXdGtELEVBQUVBLEVBQUVpa0QsZ0JBQWdCMzRDLEVBQUU0NEMsVUFBVSxHQUFTK0csR0FBRyxpQkFBaUIsU0FBU0MsR0FBR3RwRCxFQUFFMEosRUFBRXRMLEdBQUcsR0FBR2toQyxHQUFFbGhDLEdBQUdBLEVBQUVpSCxTQUFTakgsR0FBR2tyRCxHQUFHdHBELEVBQUUwSixFQUFFdEwsVUFBVSxHQUFHLE1BQU1BLElBQUlBLEVBQUUsSUFBSXNMLEVBQUU4MkIsV0FBVyxNQUFNeGdDLEVBQUV1cEQsWUFBWTcvQyxFQUFFdEwsT0FBTyxDQUFDLE1BQU16SixFQUFFLFNBQVNxTCxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRW9yRCxHQUFHOS9DLEdBQUcsR0FBR3RMLEVBQUUsT0FBT0EsRUFBRSxJQUFJekosRUFBRXdvQyxHQUFFenpCLEdBQUcsR0FBRyxXQUFXL1UsR0FBR0EsS0FBS3FMLEVBQUUsT0FBT3dwRCxHQUFHOS9DLEdBQUcvVSxFQUFFQSxFQUFFMHNDLEdBQUUxc0MsR0FBRyxJQUFJLElBQUlreUIsRUFBRSxFQUFFQSxFQUFFNGlDLEdBQUc1ekQsT0FBT2d4QixJQUFJLENBQUMsTUFBTXpvQixFQUFFcXJELEdBQUc1aUMsR0FBR2x5QixFQUFFLEdBQUd5SixLQUFLNEIsRUFBRSxPQUFPd3BELEdBQUc5L0MsR0FBR3RMLENBQUMsQ0FBQyxPQUFPc0wsQ0FBQyxDQUFqTCxDQUFtTDFKLEVBQUUwSixHQUFHMi9DLEdBQUc5ekQsS0FBSzZJLEdBQUc0QixFQUFFdXBELFlBQVlub0IsR0FBRXpzQyxHQUFHeUosRUFBRTVJLFFBQVE2ekQsR0FBRyxJQUFJLGFBQWFycEQsRUFBRXJMLEdBQUd5SixDQUFDLENBQUMsQ0FBQyxNQUFNcXJELEdBQUcsQ0FBQyxTQUFTLE1BQU0sTUFBTUQsR0FBRyxDQUFBLEVBQVNFLEdBQUcsZ0NBQXFDQyxHQUFHQyxJQUFJLE1BQU0sSUFBSTVwRCxFQUFFeEwsS0FBSzZxQixJQUFJM1YsR0FBRSxFQUFHLEdBQUcsb0JBQW9CbkosT0FBTyxDQUFDL0wsS0FBSzZxQixNQUFNdFcsU0FBUzhnRCxZQUFZLFNBQVNDLFlBQVk5cEQsRUFBRWtnRCxZQUFZN2dDLElBQUl0RyxLQUFLbW5DLGNBQWMsTUFBTTloRCxFQUFFcXZDLFVBQVVDLFVBQVVqN0IsTUFBTSxtQkFBbUIvSSxLQUFLdEwsR0FBR2doQixPQUFPaGhCLEVBQUUsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDNEIsRUFBRTBKLEVBQUcsRUFBOU8sR0FBa1AsSUFBSXFnRCxHQUFHLEVBQUUsTUFBTUMsR0FBRzVyQyxRQUFRRixVQUFVK3JDLEdBQUcsS0FBS0YsR0FBRyxDQUFDLEVBQUUsU0FBU0csR0FBR2xxRCxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHcUwsRUFBRW1xRCxpQkFBaUJ6Z0QsRUFBRXRMLEVBQUV6SixFQUFFLENBQXlyQixNQUFNeTFELEdBQUcsNEJBQWtDQyxHQUFHLFdBQVcsU0FBU0MsR0FBR3RxRCxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRTY0QyxHQUFHajNDLEdBQUcsTUFBTXJMLFVBQVU0MUQsR0FBRy82QyxZQUFZeFAsR0FBRzI4QixNQUFNditCLEVBQUU0QixFQUFFMEosRUFBRSxFQUFFLE9BQU8vVSxFQUFFNjFELElBQUlwc0QsRUFBRXpKLENBQUMsQ0FBQyxNQUFNODFELEdBQUd6cUQsR0FBR3NxRCxHQUFHdHFELEVBQUUwcUQsSUFBSUMsR0FBRyxvQkFBb0JuZCxZQUFZQSxZQUFZLFFBQVEsTUFBTStjLFdBQVdJLEdBQUduN0MsWUFBWXhQLEVBQUUwSixFQUFFLENBQUEsRUFBR3RMLEdBQUd1K0IsUUFBUS9uQyxLQUFLZzJELEtBQUs1cUQsRUFBRXBMLEtBQUs0ckQsT0FBTzkyQyxFQUFFOVUsS0FBSytyRCxVQUFVLEtBQUsvckQsS0FBS2kyRCxZQUFXLEVBQUdqMkQsS0FBS2syRCxXQUFVLEVBQUdsMkQsS0FBS20yRCxhQUFhLEtBQUtuMkQsS0FBS28yRCxZQUFZNXNELEVBQUVBLEVBQUV4SixLQUFLcTJELGVBQWVyMkQsS0FBS28yRCxZQUFZcDJELEtBQUtzMkQsYUFBYSxDQUFDaFosS0FBSyxRQUFRLENBQUNpWixvQkFBb0J2MkQsS0FBS2kyRCxZQUFXLEVBQUdqMkQsS0FBSytyRCxXQUFXL3JELEtBQUt3MkQsYUFBYSxDQUFDQyx1QkFBdUJ6MkQsS0FBS2kyRCxZQUFXLEVBQUdqZSxJQUFJLEtBQUtoNEMsS0FBS2kyRCxhQUFhUyxHQUFHLEtBQUsxMkQsS0FBS28yRCxZQUFZcDJELEtBQUsrckQsVUFBVSxLQUFLLEdBQUcsQ0FBQ3lLLGNBQWMsR0FBR3gyRCxLQUFLazJELFVBQVUsT0FBT2wyRCxLQUFLazJELFdBQVUsRUFBRyxJQUFJLElBQUkxc0QsRUFBRSxFQUFFQSxFQUFFeEosS0FBSzIyRCxXQUFXMTFELE9BQU91SSxJQUFJeEosS0FBSzQyRCxTQUFTNTJELEtBQUsyMkQsV0FBV250RCxHQUFHdUMsTUFBTSxJQUFJbVAsa0JBQWtCOVAsSUFBSSxJQUFJLE1BQU0wSixLQUFLMUosRUFBRXBMLEtBQUs0MkQsU0FBUzloRCxFQUFFK2hELGNBQWMsSUFBSXY3QyxRQUFRdGIsS0FBSyxDQUFDMjJELFlBQVcsSUFBSyxNQUFNdnJELEVBQUVBLElBQUksTUFBTTByQyxNQUFNaGlDLEVBQUVnaUQsT0FBT3R0RCxHQUFHNEIsRUFBRXJMLEdBQUcycUMsR0FBRTUxQixHQUFHbWQsRUFBRW5kLEVBQUUvVSxFQUFFeVMsT0FBTzA0QixLQUFLcDJCLEdBQUdBLEVBQUUsR0FBRyxJQUFJL0wsRUFBRSxHQUFHaEosRUFBRSxJQUFJLE1BQU1rRyxLQUFLakcsS0FBSzRyRCxPQUFPLENBQUMsTUFBTXhnRCxFQUFFMEosRUFBRTdPLElBQUltRixJQUFJb2YsUUFBUXBmLEdBQUdBLEVBQUUxRixPQUFPOGtCLFVBQVV4cUIsS0FBSzRyRCxPQUFPM2xELEdBQUdnbkMsR0FBRWp0QyxLQUFLNHJELE9BQU8zbEQsS0FBSzhDLElBQUlBLEVBQUV5SixPQUFPd3lCLE9BQU8sUUFBUS8rQixJQUFHLEVBQUcsQ0FBQ2pHLEtBQUttMkQsYUFBYXB0RCxFQUFFLElBQUksTUFBTTlDLEtBQUt1TSxPQUFPMDRCLEtBQUtsckMsTUFBTSxNQUFNaUcsRUFBRSxJQUFJakcsS0FBSysyRCxTQUFTOXdELEVBQUVqRyxLQUFLaUcsSUFBRyxHQUFHLEdBQUksSUFBSSxNQUFNQSxLQUFLZ3NCLEVBQUV2dEIsSUFBSTZqQyxJQUFHLzFCLE9BQU9zNkIsZUFBZTlzQyxLQUFLaUcsRUFBRSxDQUFDZ2EsTUFBTSxPQUFPamdCLEtBQUtnM0QsU0FBUy93RCxFQUFHLEVBQUMwTSxJQUFJdkgsR0FBR3BMLEtBQUsrMkQsU0FBUzl3RCxFQUFFbUYsRUFBRSxJQUFJcEwsS0FBS2kzRCxhQUFhenRELEdBQUd4SixLQUFLK2xDLFNBQVMsRUFBRWp4QixFQUFFOVUsS0FBS2cyRCxLQUFLelQsY0FBY3p0QyxFQUFFQSxJQUFJdEQsS0FBS3BHLEdBQUdBLEVBQUVwTCxLQUFLZzJELEtBQUssQ0FBQ1ksU0FBU3hyRCxHQUFHLElBQUkwSixFQUFFOVUsS0FBS2szRCxhQUFhOXJELEdBQUdwTCxLQUFLbTJELGNBQWNuMkQsS0FBS20yRCxhQUFhL3FELEtBQUswSixFQUFFbTRCLEdBQUVuNEIsSUFBSTlVLEtBQUsrMkQsU0FBU3h1QixHQUFFbjlCLEdBQUcwSixHQUFFLEVBQUcsQ0FBQ2tpRCxTQUFTNXJELEdBQUcsT0FBT3BMLEtBQUs0ckQsT0FBT3hnRCxFQUFFLENBQUMyckQsU0FBUzNyRCxFQUFFMEosRUFBRXRMLEdBQUUsRUFBR3pKLEdBQUUsR0FBSStVLElBQUk5VSxLQUFLNHJELE9BQU94Z0QsS0FBS3BMLEtBQUs0ckQsT0FBT3hnRCxHQUFHMEosRUFBRS9VLEdBQUdDLEtBQUsrckQsV0FBVy9yRCxLQUFLK2xDLFVBQVV2OEIsS0FBSSxJQUFLc0wsRUFBRTlVLEtBQUtxVSxhQUFhbTRCLEdBQUVwaEMsR0FBRyxJQUFJLGlCQUFpQjBKLEdBQUcsaUJBQWlCQSxFQUFFOVUsS0FBS3FVLGFBQWFtNEIsR0FBRXBoQyxHQUFHMEosRUFBRSxJQUFJQSxHQUFHOVUsS0FBS20zRCxnQkFBZ0IzcUIsR0FBRXBoQyxLQUFLLENBQUMyNkIsVUFBVTJ3QixHQUFHMTJELEtBQUtxMkQsZUFBZXIyRCxLQUFLbzJELFdBQVcsQ0FBQ0MsZUFBZSxNQUFNanJELEVBQUU2dkMsR0FBR2o3QyxLQUFLZzJELEtBQUs1L0MsR0FBRSxHQUFHcFcsS0FBSzRyRCxTQUFTLE9BQU81ckQsS0FBSytyRCxZQUFZM2dELEVBQUU4aUMsR0FBRzlpQyxJQUFJcEwsS0FBSytyRCxVQUFVM2dELEVBQUVBLEVBQUVzN0MsTUFBSyxFQUFHdDdDLEVBQUVxbEIsS0FBSyxDQUFDcmxCLEtBQUswSixLQUFLOVUsS0FBS28zRCxjQUFjLElBQUlDLFlBQVlqc0QsRUFBRSxDQUFDa3NELE9BQU94aUQsSUFBSSxFQUFFLElBQUlBLEVBQUU5VSxLQUFLLEtBQUs4VSxFQUFFQSxJQUFJQSxFQUFFZ29DLFlBQVlob0MsRUFBRW5JLE9BQU8sR0FBR21JLGFBQWE2Z0QsR0FBRyxDQUFDdnFELEVBQUVzTSxPQUFPNUMsRUFBRWkzQyxVQUFVLEtBQUssSUFBSTNnRCxDQUFDLENBQUM2ckQsYUFBYTdyRCxHQUFHQSxHQUFHQSxFQUFFcUYsU0FBU3JGLElBQUksTUFBTTBKLEVBQUVYLFNBQVNDLGNBQWMsU0FBU1UsRUFBRUUsWUFBWTVKLEVBQUVwTCxLQUFLbzJELFdBQVczaEQsWUFBWUssRUFBRSxHQUFHLEVBQUUsU0FBU3lpRCxHQUFHbnNELEVBQUUsVUFBVSxDQUFDLE1BQU0wSixFQUFFc3NDLEtBQUssSUFBSXRzQyxFQUFFLE9BQU80MkIsR0FBRSxNQUFNbGlDLEVBQUVzTCxFQUFFcFAsS0FBSzBpRCxhQUFhLElBQUk1K0MsRUFBRSxPQUFPa2lDLEdBQWUsT0FBTGxpQyxFQUFFNEIsSUFBYXNnQyxFQUFDLENBQUMsQ0FBQyxTQUFTOHJCLEdBQUdwc0QsR0FBRyxNQUFNMEosRUFBRXNzQyxLQUFLLElBQUl0c0MsRUFBRSxPQUFPLE1BQU10TCxFQUFFLElBQUlpdUQsR0FBRzNpRCxFQUFFMm1DLFFBQVFyd0MsRUFBRTBKLEVBQUU4aEMsUUFBUWlJLEdBQUdyMUMsR0FBR3UyQyxJQUFJLEtBQUssTUFBTTMwQyxFQUFFLElBQUk4UCxpQkFBaUIxUixHQUFHNEIsRUFBRWtRLFFBQVF4RyxFQUFFMm1DLFFBQVF2bkMsR0FBRzRvQyxXQUFXLENBQUN2aEMsV0FBVSxJQUFLb3BDLElBQUksSUFBSXY1QyxFQUFFc3NELGNBQWMsR0FBRyxDQUFDLFNBQVNELEdBQUdyc0QsRUFBRTBKLEdBQUcsR0FBRyxJQUFJMUosRUFBRXl2QyxVQUFVLENBQUMsTUFBTXJ4QyxFQUFFNEIsRUFBRTB3QyxTQUFTMXdDLEVBQUU1QixFQUFFNnlDLGFBQWE3eUMsRUFBRXd5QyxnQkFBZ0J4eUMsRUFBRSt5QyxhQUFhL3lDLEVBQUU4akMsUUFBUXBqQyxNQUFNLEtBQUt1dEQsR0FBR2p1RCxFQUFFNnlDLGFBQWF2bkMsRUFBRSxHQUFHLENBQUMsS0FBSzFKLEVBQUVrckMsV0FBV2xyQyxFQUFFQSxFQUFFa3JDLFVBQVVtRixRQUFRLEdBQUcsRUFBRXJ3QyxFQUFFeXZDLFdBQVd6dkMsRUFBRThJLEdBQUd5akQsR0FBR3ZzRCxFQUFFOEksR0FBR1ksUUFBUSxHQUFHMUosRUFBRTFGLE9BQU95OEMsR0FBRy8yQyxFQUFFNHhDLFNBQVN2c0MsU0FBU3JGLEdBQUdxc0QsR0FBR3JzRCxFQUFFMEosVUFBVSxHQUFHMUosRUFBRTFGLE9BQU80bkQsR0FBRyxDQUFDLElBQUlwNUMsR0FBRzFLLEVBQUU2ekMsT0FBT3Q5QyxHQUFHcUwsRUFBRSxLQUFLNUIsSUFBSW11RCxHQUFHbnVELEVBQUVzTCxHQUFHdEwsSUFBSXpKLElBQUl5SixFQUFFQSxFQUFFMGpELFdBQVcsQ0FBQyxDQUFDLFNBQVN5SyxHQUFHdnNELEVBQUUwSixHQUFHLEdBQUcsSUFBSTFKLEVBQUUwaEQsU0FBUyxDQUFDLE1BQU10akQsRUFBRTRCLEVBQUVrSixNQUFNLElBQUksTUFBTWxKLEtBQUswSixFQUFFdEwsRUFBRW1yRCxZQUFhLEtBQUl2cEQsSUFBSTBKLEVBQUUxSixHQUFHLENBQUMsQ0FBQyxNQUFNd3NELEdBQUcsQ0FBQ3hzRCxHQUFHbXZDLE1BQU16bEMsS0FBSzgrQyxHQUFHelQsR0FBRzBYLEdBQUd6c0QsR0FBRzBKLEdBQUc4aUQsR0FBRzdFLFlBQVksYUFBYSxNQUFNK0UsR0FBRyxDQUFDL3JELEtBQUsvSixPQUFPMEQsS0FBSzFELE9BQU9zVixJQUFJLENBQUM1UixLQUFLMjZDLFFBQVFuRCxTQUFRLEdBQUk3b0IsU0FBUyxDQUFDcnlCLE9BQU93b0IsT0FBT2hZLFFBQVF1bEQsZUFBZS8xRCxPQUFPZzJELGlCQUFpQmgyRCxPQUFPaTJELGFBQWFqMkQsT0FBT2syRCxnQkFBZ0JsMkQsT0FBT20yRCxrQkFBa0JuMkQsT0FBT28yRCxjQUFjcDJELE9BQU9xMkQsZUFBZXIyRCxPQUFPczJELGlCQUFpQnQyRCxPQUFPdTJELGFBQWF2MkQsUUFBUXcyRCxHQUFHWixHQUFHOWdCLE1BQU0xZ0MsR0FBRSxDQUFBLEVBQUcrcEMsR0FBR3JKLE1BQU1naEIsSUFBSVcsR0FBRyxDQUFDcnRELEVBQUUwSixFQUFFLE1BQU00MUIsR0FBRXQvQixHQUFHQSxFQUFFcUYsU0FBU3JGLEdBQUdBLEtBQUswSixLQUFLMUosR0FBR0EsS0FBSzBKLEVBQUUsRUFBRTRqRCxHQUFHdHRELEtBQUtBLElBQUlzL0IsR0FBRXQvQixHQUFHQSxFQUFFNmtCLE1BQU03a0IsR0FBR0EsRUFBRW5LLE9BQU8sSUFBSW1LLEVBQUVuSyxPQUFPLEdBQUcsU0FBUzQyRCxHQUFHenNELEdBQUcsTUFBTTBKLEVBQUUsQ0FBQSxFQUFHLElBQUksTUFBTXNCLEtBQUtoTCxFQUFFZ0wsS0FBSzBoRCxLQUFLaGpELEVBQUVzQixHQUFHaEwsRUFBRWdMLElBQUksSUFBRyxJQUFLaEwsRUFBRWtNLElBQUksT0FBT3hDLEVBQUUsTUFBTS9JLEtBQUt2QyxFQUFFLElBQUk5RCxLQUFLM0YsRUFBRXMwQixTQUFTcEMsRUFBRThsQyxlQUFlaHZELEVBQUcsR0FBRVMsZUFBZXd1RCxpQkFBaUIveEQsRUFBRyxHQUFFdUQsaUJBQWlCeXVELGFBQWFydEIsRUFBRyxHQUFFcGhDLGFBQWEwdUQsZ0JBQWdCcHRCLEVBQUUvaEMsRUFBRW92RCxrQkFBa0IzaUQsRUFBRXZQLEVBQUVteUQsY0FBYzVnQyxFQUFFb1QsRUFBRXl0QixlQUFlMXpELEVBQUcsR0FBRTZFLGVBQWU4dUQsaUJBQWlCdnRCLEVBQUcsR0FBRXZoQyxpQkFBaUIrdUQsYUFBYWp1RCxFQUFHLEdBQUVkLGNBQWM0QixFQUFFeW1CLEVBQUUsU0FBU3ptQixHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBR3kvQixHQUFFei9CLEdBQUcsTUFBTSxDQUFDdXRELEdBQUd2dEQsRUFBRThPLE9BQU95K0MsR0FBR3Z0RCxFQUFFNjJDLFFBQVEsQ0FBQyxNQUFNbnRDLEVBQUU2akQsR0FBR3Z0RCxHQUFHLE1BQU0sQ0FBQzBKLEVBQUVBLEVBQUUsQ0FBRSxDQUF2RyxDQUF3R21kLEdBQUdwRyxFQUFFZ0csR0FBR0EsRUFBRSxHQUFHd1osRUFBRXhaLEdBQUdBLEVBQUUsSUFBSTB1QixjQUFjN1UsRUFBRThVLFFBQVFqbUMsRUFBRW1tQyxpQkFBaUJwWixFQUFFc1osUUFBUW5yQyxFQUFFcXJDLGlCQUFpQnRnRCxFQUFFdWdELGVBQWU5M0MsRUFBRXlpQyxFQUFFc1YsU0FBU3JWLEVBQUVweEIsRUFBRTJtQyxrQkFBa0J4Z0QsRUFBRTRtQyxHQUFHeHlCLEVBQUVnM0IsRUFBRSxDQUFDMWdDLEVBQUUwSixFQUFFdEwsS0FBS292RCxHQUFHeHRELEVBQUUwSixFQUFFMGlCLEVBQUVvVCxHQUFHZ3VCLEdBQUd4dEQsRUFBRTBKLEVBQUVVLEVBQUV2UCxHQUFHdUQsR0FBR0EsR0FBRyxFQUFFdWlDLEVBQUUsQ0FBQzNnQyxFQUFFMEosS0FBSzFKLEVBQUV5dEQsWUFBVyxFQUFHRCxHQUFHeHRELEVBQUV6RyxHQUFHaTBELEdBQUd4dEQsRUFBRWQsR0FBR3N1RCxHQUFHeHRELEVBQUUyL0IsR0FBR2oyQixHQUFHQSxHQUFHLEVBQUU0MUIsRUFBRXQvQixHQUFHLENBQUMwSixFQUFFdEwsS0FBSyxNQUFNeW9CLEVBQUU3bUIsRUFBRXVnQyxFQUFFcHhCLEVBQUV0VSxFQUFFLElBQUk2bEMsRUFBRWgzQixFQUFFMUosRUFBRTVCLEdBQUdpdkQsR0FBR3htQyxFQUFFLENBQUNuZCxFQUFFN08sSUFBSTZ5RCxJQUFJLEtBQUtGLEdBQUc5akQsRUFBRTFKLEVBQUUwL0IsRUFBRS9oQyxHQUFHZ3dELEdBQUdqa0QsRUFBRTFKLEVBQUVvc0IsRUFBRW9ULEdBQUc4dEIsR0FBR3ptQyxJQUFJK21DLEdBQUdsa0QsRUFBRS9VLEVBQUU4ckIsRUFBRTVsQixFQUFFLEdBQUcsRUFBRSxPQUFPbVEsR0FBRXRCLEVBQUUsQ0FBQ3lyQyxjQUFjbjFDLEdBQUdxdEQsR0FBRy9zQixFQUFFLENBQUN0Z0MsSUFBSTJ0RCxHQUFHM3RELEVBQUVyQyxHQUFHZ3dELEdBQUczdEQsRUFBRW5GLEVBQUcsRUFBQzg2QyxlQUFlMzFDLEdBQUdxdEQsR0FBR3h2RCxFQUFFLENBQUNtQyxJQUFJMnRELEdBQUczdEQsRUFBRTAvQixHQUFHaXVCLEdBQUczdEQsRUFBRW9LLEVBQUcsRUFBQ2dyQyxRQUFROVYsR0FBRSxHQUFJc1csU0FBU3RXLEdBQUUsR0FBSWtXLFFBQVF4MUMsRUFBRTBKLEdBQUcxSixFQUFFeXRELFlBQVcsRUFBRyxNQUFNcnZELEVBQUUsSUFBSXVpQyxFQUFFM2dDLEVBQUUwSixHQUFHaWtELEdBQUczdEQsRUFBRXpHLEdBQUdzMEQsS0FBS0YsR0FBRzN0RCxFQUFFMi9CLEdBQUcrdEIsSUFBSSxLQUFLMXRELEVBQUV5dEQsYUFBYUQsR0FBR3h0RCxFQUFFekcsR0FBR28wRCxHQUFHM3RELEVBQUVkLEdBQUdvdUQsR0FBR2pqRCxJQUFJdWpELEdBQUc1dEQsRUFBRXJMLEVBQUVzckMsRUFBRTdoQyxHQUFHLElBQUlpdkQsR0FBR2hqRCxFQUFFLENBQUNySyxFQUFFNUIsR0FBSSxFQUFDazNDLGlCQUFpQnQxQyxHQUFHMGdDLEVBQUUxZ0MsR0FBRSxHQUFJcXRELEdBQUdueEIsRUFBRSxDQUFDbDhCLEdBQUksRUFBQzgxQyxrQkFBa0I5MUMsR0FBRzBnQyxFQUFFMWdDLEdBQUUsR0FBSXF0RCxHQUFHLzNELEVBQUUsQ0FBQzBLLEdBQUksRUFBQzAxQyxpQkFBaUIxMUMsR0FBRzJnQyxFQUFFM2dDLEdBQUdxdEQsR0FBR2o0RCxFQUFFLENBQUM0SyxHQUFHLEdBQUcsQ0FBQyxTQUFTdXRELEdBQUd2dEQsR0FBRyxPQUFPNmhDLEdBQUU3aEMsRUFBRSxDQUFDLFNBQVMydEQsR0FBRzN0RCxFQUFFMEosR0FBR0EsRUFBRXJRLE1BQU0sT0FBT2dNLFNBQVNxRSxHQUFHQSxHQUFHMUosRUFBRTh0RCxVQUFVcHBCLElBQUloN0IsTUFBTTFKLEVBQUUrdEQsT0FBTy90RCxFQUFFK3RELEtBQUssSUFBSWxyQixNQUFNNkIsSUFBSWg3QixFQUFFLENBQUMsU0FBUzhqRCxHQUFHeHRELEVBQUUwSixHQUFHQSxFQUFFclEsTUFBTSxPQUFPZ00sU0FBU3FFLEdBQUdBLEdBQUcxSixFQUFFOHRELFVBQVVoNkMsT0FBT3BLLEtBQUssTUFBTXFrRCxLQUFLM3ZELEdBQUc0QixFQUFFNUIsSUFBSUEsRUFBRTZsQixPQUFPdmEsR0FBR3RMLEVBQUVnUSxPQUFPcE8sRUFBRSt0RCxVQUFLLEdBQVEsQ0FBQyxTQUFTTCxHQUFHMXRELEdBQUdndUQsdUJBQXVCLEtBQUtBLHNCQUFzQmh1RCxFQUFFLEdBQUcsQ0FBQyxJQUFJaXVELEdBQUcsRUFBRSxTQUFTTCxHQUFHNXRELEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUcsTUFBTWt5QixFQUFFN21CLEVBQUVrdUQsU0FBU0QsR0FBR3R3RCxFQUFFLEtBQUtrcEIsSUFBSTdtQixFQUFFa3VELFFBQVF2NUQsR0FBRyxFQUFFLEdBQUd5SixFQUFFLE9BQU84SCxXQUFXdkksRUFBRVMsR0FBRyxNQUFNOUQsS0FBS08sRUFBRTAyQyxRQUFRL1IsRUFBRTJ1QixVQUFVenVCLEdBQUcwdUIsR0FBR3B1RCxFQUFFMEosR0FBRyxJQUFJN08sRUFBRSxPQUFPbEcsSUFBSSxNQUFNeVYsRUFBRXZQLEVBQUUsTUFBTSxJQUFJdXhCLEVBQUUsRUFBRSxNQUFNN3lCLEVBQUUsS0FBS3lHLEVBQUVxdUQsb0JBQW9CamtELEVBQUV1MUIsR0FBR2hpQyxHQUFHLEVBQUVnaUMsRUFBRWoyQixJQUFJQSxFQUFFdEosU0FBU0osS0FBS29zQixHQUFHc1QsR0FBR25tQyxHQUFHLEVBQUUyTSxZQUFZLEtBQUtrbUIsRUFBRXNULEdBQUdubUMsR0FBRyxHQUFHaW1DLEVBQUUsR0FBR3gvQixFQUFFbXFELGlCQUFpQi8vQyxFQUFFdTFCLEVBQUUsQ0FBQyxTQUFTeXVCLEdBQUdwdUQsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUVtQyxPQUFPK3RELGlCQUFpQnR1RCxHQUFHckwsRUFBRXFMLElBQUk1QixFQUFFNEIsSUFBSSxJQUFJM0csTUFBTSxNQUFNd3RCLEVBQUVseUIsRUFBRSxtQkFBbUJnSixFQUFFaEosRUFBRSxzQkFBc0JrRyxFQUFFMHpELEdBQUcxbkMsRUFBRWxwQixHQUFHNmhDLEVBQUU3cUMsRUFBRSxrQkFBa0IrcUMsRUFBRS9xQyxFQUFFLHFCQUFxQnlWLEVBQUVta0QsR0FBRy91QixFQUFFRSxHQUFHLElBQUl0VCxFQUFFLEtBQUs3eUIsRUFBRSxFQUFFb21DLEVBQUUsRUFBK00sTUFBN00sZUFBZWoyQixFQUFFN08sRUFBRSxJQUFJdXhCLEVBQUUsYUFBYTd5QixFQUFFc0IsRUFBRThrQyxFQUFFaGlDLEVBQUU5SCxRQUFRLGNBQWM2VCxFQUFFVSxFQUFFLElBQUlnaUIsRUFBRSxZQUFZN3lCLEVBQUU2USxFQUFFdTFCLEVBQUVELEVBQUU3cEMsU0FBUzBELEVBQUVyRSxLQUFLbWhCLElBQUl4YixFQUFFdVAsR0FBR2dpQixFQUFFN3lCLEVBQUUsRUFBRXNCLEVBQUV1UCxFQUFFLGFBQWEsWUFBWSxLQUFLdTFCLEVBQUV2VCxFQUFFLGVBQWVBLEVBQUV6dUIsRUFBRTlILE9BQU82cEMsRUFBRTdwQyxPQUFPLEdBQVMsQ0FBQ3lFLEtBQUs4eEIsRUFBRW1sQixRQUFRaDRDLEVBQUU0MEQsVUFBVXh1QixFQUFFNnVCLGFBQWEsZUFBZXBpQyxHQUFHLHlCQUF5QjcyQixLQUFLNkksRUFBRXF3RCxvQkFBb0IsQ0FBQyxTQUFTRixHQUFHdnVELEVBQUUwSixHQUFHLEtBQUsxSixFQUFFbkssT0FBTzZULEVBQUU3VCxRQUFRbUssRUFBRUEsRUFBRWt3QyxPQUFPbHdDLEdBQUcsT0FBTzlLLEtBQUttaEIsT0FBTzNNLEVBQUVwUSxLQUFLLENBQUNvUSxFQUFFdEwsSUFBSXN3RCxHQUFHaGxELEdBQUdnbEQsR0FBRzF1RCxFQUFFNUIsTUFBTSxDQUFDLFNBQVNzd0QsR0FBRzF1RCxHQUFHLE9BQU8sSUFBSW9mLE9BQU9wZixFQUFFeEQsTUFBTSxHQUFHLEdBQUdoSCxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVNxNEQsS0FBSyxPQUFPOWtELFNBQVM1RSxLQUFLd3FELFlBQVksQ0FBQyxNQUFNQyxHQUFHLElBQUkxckIsUUFBUTJyQixHQUFHLElBQUkzckIsUUFBUTRyQixHQUFHLENBQUNudUQsS0FBSyxrQkFBa0IrcUMsTUFBTTFnQyxHQUFFLENBQUUsRUFBQ29pRCxHQUFHLENBQUMyQixJQUFJbjRELE9BQU9vNEQsVUFBVXA0RCxTQUFTbS9DLE1BQU0vMUMsR0FBR212QyxNQUFNemxDLElBQUksTUFBTXRMLEVBQUU0M0MsS0FBS3JoRCxFQUFFMi9DLEtBQUssSUFBSXp0QixFQUFFbHBCLEVBQUUsT0FBT3E3QyxJQUFJLEtBQUssSUFBSW55QixFQUFFaHhCLE9BQU8sT0FBTyxNQUFNNlQsRUFBRTFKLEVBQUVndkQsV0FBWSxHQUFFaHZELEVBQUVXLE1BQU0sV0FBVyxJQUFJLFNBQVNYLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNekosRUFBRXFMLEVBQUVzakQsWUFBWXRqRCxFQUFFK3RELE1BQU0vdEQsRUFBRSt0RCxLQUFLMW9ELFNBQVNyRixJQUFJQSxFQUFFM0csTUFBTSxPQUFPZ00sU0FBU3JGLEdBQUdBLEdBQUdyTCxFQUFFbTVELFVBQVVoNkMsT0FBTzlULElBQUksSUFBSTVCLEVBQUUvRSxNQUFNLE9BQU9nTSxTQUFTckYsR0FBR0EsR0FBR3JMLEVBQUVtNUQsVUFBVXBwQixJQUFJMWtDLEtBQUtyTCxFQUFFdVUsTUFBTStsRCxRQUFRLE9BQU8sTUFBTXBvQyxFQUFFLElBQUluZCxFQUFFZzRDLFNBQVNoNEMsRUFBRUEsRUFBRWdvQyxXQUFXN3FCLEVBQUV4ZCxZQUFZMVUsR0FBRyxNQUFNNjVELGFBQWE3d0QsR0FBR3l3RCxHQUFHejVELEdBQUcsT0FBT2t5QixFQUFFcmQsWUFBWTdVLEdBQUdnSixDQUFDLENBQWpULENBQW1Ua3BCLEVBQUUsR0FBRy9kLEdBQUcxSyxFQUFFaXRDLE1BQU12aUMsR0FBR1ksR0FBRyxPQUFPbWQsRUFBRXhoQixRQUFRNnBELElBQUlyb0MsRUFBRXhoQixRQUFROHBELElBQUksTUFBTXg2RCxFQUFFa3lCLEVBQUU1YSxPQUFPbWpELElBQUl2QixLQUFLbDVELEVBQUUwUSxTQUFTckYsSUFBSSxNQUFNNUIsRUFBRTRCLEVBQUU4SSxHQUFHblUsRUFBRXlKLEVBQUU4SyxNQUFNeWtELEdBQUd2dkQsRUFBRXNMLEdBQUcvVSxFQUFFK1osVUFBVS9aLEVBQUUwNkQsZ0JBQWdCMTZELEVBQUUyNkQsbUJBQW1CLEdBQUcsTUFBTXpvQyxFQUFFem9CLEVBQUVteEQsUUFBUXZ2RCxJQUFJQSxHQUFHQSxFQUFFSSxTQUFTaEMsR0FBRzRCLElBQUksYUFBYXpLLEtBQUt5SyxFQUFFd3ZELGdCQUFnQnB4RCxFQUFFaXdELG9CQUFvQixnQkFBZ0J4bkMsR0FBR3pvQixFQUFFbXhELFFBQVEsS0FBSy9CLEdBQUdwdkQsRUFBRXNMLEdBQUcsRUFBRXRMLEVBQUUrckQsaUJBQWlCLGdCQUFnQnRqQyxFQUFFLEdBQUcsSUFBSSxLQUFLLE1BQU1oc0IsRUFBRTRxQyxHQUFHemxDLEdBQUd3L0IsRUFBRWl0QixHQUFHNXhELEdBQUcsSUFBSTZrQyxFQUFFN2tDLEVBQUVrMEQsS0FBS2hZLEdBQUdsd0IsRUFBRWxwQixFQUFFQSxFQUFFK0wsRUFBRW9vQyxRQUFRbUUsR0FBR3ZzQyxFQUFFb29DLFdBQVcsR0FBRyxJQUFJLElBQUk5eEMsRUFBRSxFQUFFQSxFQUFFckMsRUFBRTlILE9BQU9tSyxJQUFJLENBQUMsTUFBTTBKLEVBQUUvTCxFQUFFcUMsR0FBRyxNQUFNMEosRUFBRXhCLEtBQUttdUMsR0FBRzNzQyxFQUFFMHNDLEdBQUcxc0MsRUFBRTgxQixFQUFFN3FDLEVBQUV5SixHQUFHLENBQUMsR0FBR3lvQixFQUFFLElBQUksSUFBSTdtQixFQUFFLEVBQUVBLEVBQUU2bUIsRUFBRWh4QixPQUFPbUssSUFBSSxDQUFDLE1BQU0wSixFQUFFbWQsRUFBRTdtQixHQUFHcTJDLEdBQUczc0MsRUFBRTBzQyxHQUFHMXNDLEVBQUU4MUIsRUFBRTdxQyxFQUFFeUosSUFBSXd3RCxHQUFHcm5ELElBQUltQyxFQUFFQSxFQUFFWixHQUFHMm1ELHdCQUF3QixDQUFDLE9BQU81ZixHQUFHblEsRUFBRSxLQUFLL2hDLEVBQUUsQ0FBQyxHQUFHLFNBQVN1eEQsR0FBR2x2RCxHQUFHLE1BQU0wSixFQUFFMUosRUFBRThJLEdBQUdZLEVBQUU2bEQsU0FBUzdsRCxFQUFFNmxELFVBQVU3bEQsRUFBRWt0QyxVQUFVbHRDLEVBQUVrdEMsVUFBVSxDQUFDLFNBQVN1WSxHQUFHbnZELEdBQUc2dUQsR0FBR3RuRCxJQUFJdkgsRUFBRUEsRUFBRThJLEdBQUcybUQsd0JBQXdCLENBQUMsU0FBU0wsR0FBR3B2RCxHQUFHLE1BQU0wSixFQUFFa2xELEdBQUcvNUMsSUFBSTdVLEdBQUc1QixFQUFFeXdELEdBQUdoNkMsSUFBSTdVLEdBQUdyTCxFQUFFK1UsRUFBRU4sS0FBS2hMLEVBQUVnTCxLQUFLeWQsRUFBRW5kLEVBQUVpakIsSUFBSXZ1QixFQUFFdXVCLElBQUksR0FBR2g0QixHQUFHa3lCLEVBQUUsQ0FBQyxNQUFNbmQsRUFBRTFKLEVBQUU4SSxHQUFHSSxNQUFNLE9BQU9RLEVBQUVnRixVQUFVaEYsRUFBRTJsRCxnQkFBaUIsYUFBWTE2RCxPQUFPa3lCLE9BQU9uZCxFQUFFNGxELG1CQUFtQixLQUFLdHZELENBQUMsQ0FBQyxDQUFDLE1BQU04SSxHQUFHOUksSUFBSSxNQUFNMEosRUFBRTFKLEVBQUUwckMsTUFBTSx5QkFBd0IsRUFBRyxPQUFPcE0sR0FBRTUxQixHQUFHMUosR0FBR3doQyxHQUFFOTNCLEVBQUUxSixHQUFHMEosQ0FBQyxFQUFFLFNBQVNnbUQsR0FBRzF2RCxHQUFHQSxFQUFFSSxPQUFPdXZELFdBQVUsQ0FBRSxDQUFDLFNBQVNDLEdBQUc1dkQsR0FBRyxNQUFNMEosRUFBRTFKLEVBQUVJLE9BQU9zSixFQUFFaW1ELFlBQVlqbUQsRUFBRWltRCxXQUFVLEVBQUdqbUQsRUFBRXNpRCxjQUFjLElBQUk2RCxNQUFNLFVBQVUsQ0FBQyxNQUFNQyxHQUFHLENBQUMvUixRQUFRLzlDLEdBQUcwNkMsV0FBV3hXLEtBQUt4NkIsRUFBRWxFLEtBQUtwSCxFQUFFMFgsT0FBT25oQixJQUFJa3lCLEdBQUc3bUIsRUFBRSt2RCxRQUFRam5ELEdBQUcrZCxHQUFHLE1BQU1scEIsRUFBRWhKLEdBQUdreUIsRUFBRTZrQixPQUFPLFdBQVc3a0IsRUFBRTZrQixNQUFNcHhDLEtBQUs0dkQsR0FBR2xxRCxFQUFFMEosRUFBRSxTQUFTLFNBQVNBLElBQUksR0FBR0EsRUFBRXRKLE9BQU91dkQsVUFBVSxPQUFPLElBQUloN0QsRUFBRXFMLEVBQUVuRyxNQUFNdUUsSUFBSXpKLEVBQUVBLEVBQUU2USxRQUFRN0gsSUFBSWhKLEVBQUVrdEMsR0FBRWx0QyxJQUFJcUwsRUFBRSt2RCxRQUFRcDdELEVBQUUsSUFBSXlKLEdBQUc4ckQsR0FBR2xxRCxFQUFFLFVBQVUsS0FBS0EsRUFBRW5HLE1BQU1tRyxFQUFFbkcsTUFBTTJMLE1BQU0sSUFBSWtFLElBQUl3Z0QsR0FBR2xxRCxFQUFFLG1CQUFtQjB2RCxJQUFJeEYsR0FBR2xxRCxFQUFFLGlCQUFpQjR2RCxJQUFJMUYsR0FBR2xxRCxFQUFFLFNBQVM0dkQsSUFBSyxFQUFDeFYsUUFBUXA2QyxHQUFHbkcsTUFBTTZQLElBQUkxSixFQUFFbkcsTUFBTSxNQUFNNlAsRUFBRSxHQUFHQSxDQUFFLEVBQUN1MEMsYUFBYWorQyxHQUFHbkcsTUFBTTZQLEVBQUVneEMsV0FBV3hXLEtBQUs5bEMsRUFBRW9ILEtBQUs3USxFQUFFbWhCLE9BQU8rUSxJQUFJbHBCLEdBQUcsR0FBR3FDLEVBQUUrdkQsUUFBUWpuRCxHQUFHbkwsR0FBR3FDLEVBQUUydkQsVUFBVSxPQUFPLEdBQUc1bUQsU0FBU2luRCxnQkFBZ0Jod0QsR0FBRyxVQUFVQSxFQUFFMUYsS0FBSyxDQUFDLEdBQUc4RCxFQUFFLE9BQU8sR0FBR3pKLEdBQUdxTCxFQUFFbkcsTUFBTTJMLFNBQVNrRSxFQUFFLE9BQU8sSUFBSW1kLEdBQUcsV0FBVzdtQixFQUFFMUYsT0FBT3VuQyxHQUFFN2hDLEVBQUVuRyxTQUFTNlAsRUFBRSxNQUFNLENBQUMsTUFBTTdPLEVBQUUsTUFBTTZPLEVBQUUsR0FBR0EsRUFBRTFKLEVBQUVuRyxRQUFRZ0IsSUFBSW1GLEVBQUVuRyxNQUFNZ0IsRUFBRSxHQUFHbzFELEdBQUcsQ0FBQ2xjLE1BQUssRUFBR2dLLFFBQVEvOUMsRUFBRTBKLEVBQUV0TCxHQUFHNEIsRUFBRSt2RCxRQUFRam5ELEdBQUcxSyxHQUFHOHJELEdBQUdscUQsRUFBRSxVQUFVLEtBQUssTUFBTTBKLEVBQUUxSixFQUFFa3dELFlBQVk5eEQsRUFBRSt4RCxHQUFHbndELEdBQUdyTCxFQUFFcUwsRUFBRW93RCxRQUFRdnBDLEVBQUU3bUIsRUFBRSt2RCxRQUFRLEdBQUd6d0IsR0FBRTUxQixHQUFHLENBQUMsTUFBTTFKLEVBQUV5bUIsRUFBRS9jLEVBQUV0TCxHQUFHVCxHQUFHLElBQUlxQyxFQUFFLEdBQUdyTCxJQUFJZ0osRUFBRWtwQixFQUFFbmQsRUFBRXdtQyxPQUFPOXhDLFNBQVMsSUFBSXpKLEdBQUdnSixFQUFFLENBQUMsTUFBTVMsRUFBRSxJQUFJc0wsR0FBR3RMLEVBQUVxaUMsT0FBT3pnQyxFQUFFLEdBQUc2bUIsRUFBRXpvQixFQUFFLENBQUMsTUFBTSxHQUFHZ2lDLEdBQUUxMkIsR0FBRyxDQUFDLE1BQU0xSixFQUFFLElBQUk2aUMsSUFBSW41QixHQUFHL1UsRUFBRXFMLEVBQUUwa0MsSUFBSXRtQyxHQUFHNEIsRUFBRWlrQixPQUFPN2xCLEdBQUd5b0IsRUFBRTdtQixFQUFHLE1BQUs2bUIsRUFBRXdwQyxHQUFHcndELEVBQUVyTCxHQUFHLEdBQUksRUFBQ3lsRCxRQUFRa1csR0FBR3JTLGFBQWFqK0MsRUFBRTBKLEVBQUV0TCxHQUFHNEIsRUFBRSt2RCxRQUFRam5ELEdBQUcxSyxHQUFHa3lELEdBQUd0d0QsRUFBRTBKLEVBQUV0TCxFQUFFLEdBQUcsU0FBU2t5RCxHQUFHdHdELEdBQUduRyxNQUFNNlAsRUFBRTh3QyxTQUFTcDhDLEdBQUd6SixHQUFHcUwsRUFBRWt3RCxZQUFZeG1ELEVBQUU0MUIsR0FBRTUxQixHQUFHMUosRUFBRW93RCxRQUFRM3BDLEVBQUUvYyxFQUFFL1UsRUFBRSsyQyxNQUFNN3hDLFFBQVEsRUFBRXVtQyxHQUFFMTJCLEdBQUcxSixFQUFFb3dELFFBQVExbUQsRUFBRStxQixJQUFJOS9CLEVBQUUrMkMsTUFBTTd4QyxPQUFPNlAsSUFBSXRMLElBQUk0QixFQUFFb3dELFFBQVFseEQsRUFBRXdLLEVBQUUybUQsR0FBR3J3RCxHQUFFLElBQUssQ0FBQyxNQUFNdXdELEdBQUcsQ0FBQ3hTLFFBQVEvOUMsR0FBR25HLE1BQU02UCxHQUFHdEwsR0FBRzRCLEVBQUVvd0QsUUFBUWx4RCxFQUFFd0ssRUFBRXRMLEVBQUVzdEMsTUFBTTd4QyxPQUFPbUcsRUFBRSt2RCxRQUFRam5ELEdBQUcxSyxHQUFHOHJELEdBQUdscUQsRUFBRSxVQUFVLEtBQUtBLEVBQUUrdkQsUUFBUUksR0FBR253RCxHQUFHLEdBQUksRUFBQ2krQyxhQUFhaitDLEdBQUduRyxNQUFNNlAsRUFBRTh3QyxTQUFTcDhDLEdBQUd6SixHQUFHcUwsRUFBRSt2RCxRQUFRam5ELEdBQUduVSxHQUFHK1UsSUFBSXRMLElBQUk0QixFQUFFb3dELFFBQVFseEQsRUFBRXdLLEVBQUUvVSxFQUFFKzJDLE1BQU03eEMsT0FBTyxHQUFHMjJELEdBQUcsQ0FBQ3pjLE1BQUssRUFBR2dLLFFBQVEvOUMsR0FBR25HLE1BQU02UCxFQUFFZ3hDLFdBQVc1a0MsT0FBTzFYLElBQUl6SixHQUFHLE1BQU1reUIsRUFBRXVaLEdBQUUxMkIsR0FBR3dnRCxHQUFHbHFELEVBQUUsVUFBVSxLQUFLLE1BQU0wSixFQUFFZ1YsTUFBTWpxQixVQUFVd1gsT0FBTzhDLEtBQUsvTyxFQUFFNkYsU0FBUzdGLEdBQUdBLEVBQUV5d0QsV0FBV24zRCxLQUFLMEcsR0FBRzVCLEVBQUV5akMsR0FBRXN1QixHQUFHbndELElBQUltd0QsR0FBR253RCxLQUFLQSxFQUFFK3ZELFFBQVEvdkQsRUFBRWtwRCxTQUFTcmlDLEVBQUUsSUFBSWdjLElBQUluNUIsR0FBR0EsRUFBRUEsRUFBRSxHQUFHLElBQUkxSixFQUFFK3ZELFFBQVFqbkQsR0FBR25VLEVBQUcsRUFBQ3lsRCxRQUFRcDZDLEdBQUduRyxNQUFNNlAsSUFBSWduRCxHQUFHMXdELEVBQUUwSixFQUFHLEVBQUN1MEMsYUFBYWorQyxFQUFFMEosRUFBRXRMLEdBQUc0QixFQUFFK3ZELFFBQVFqbkQsR0FBRzFLLEVBQUcsRUFBQ2k4QyxRQUFRcjZDLEdBQUduRyxNQUFNNlAsSUFBSWduRCxHQUFHMXdELEVBQUUwSixFQUFFLEdBQUcsU0FBU2duRCxHQUFHMXdELEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNEIsRUFBRWtwRCxTQUFTLElBQUk5cUQsR0FBR2toQyxHQUFFNTFCLElBQUkwMkIsR0FBRTEyQixHQUFHLENBQUMsSUFBSSxJQUFJL1UsRUFBRSxFQUFFa3lCLEVBQUU3bUIsRUFBRTZGLFFBQVFoUSxPQUFPbEIsRUFBRWt5QixFQUFFbHlCLElBQUksQ0FBQyxNQUFNa3lCLEVBQUU3bUIsRUFBRTZGLFFBQVFsUixHQUFHZ0osRUFBRXd5RCxHQUFHdHBDLEdBQUcsR0FBR3pvQixFQUFFeW9CLEVBQUU0cEMsU0FBU254QixHQUFFNTFCLEdBQUcrYyxFQUFFL2MsRUFBRS9MLElBQUksRUFBRStMLEVBQUUrcUIsSUFBSTkyQixRQUFRLEdBQUd1QixFQUFFaXhELEdBQUd0cEMsR0FBR25kLEdBQUcsWUFBWTFKLEVBQUUyd0QsZ0JBQWdCaDhELElBQUlxTCxFQUFFMndELGNBQWNoOEQsR0FBRyxDQUFDeUosSUFBSSxJQUFJNEIsRUFBRTJ3RCxnQkFBZ0Izd0QsRUFBRTJ3RCxlQUFlLEVBQUUsQ0FBQyxDQUFDLFNBQVNSLEdBQUdud0QsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUU2cEMsT0FBTzdwQyxFQUFFbkcsS0FBSyxDQUFDLFNBQVN3MkQsR0FBR3J3RCxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRXNMLEVBQUUsYUFBYSxjQUFjLE9BQU90TCxLQUFLNEIsRUFBRUEsRUFBRTVCLEdBQUdzTCxDQUFDLENBQUMsTUFBTWtuRCxHQUFHLENBQUM3UyxRQUFRLzlDLEVBQUUwSixFQUFFdEwsR0FBR3l5RCxHQUFHN3dELEVBQUUwSixFQUFFdEwsRUFBRSxLQUFLLFVBQVcsRUFBQ2c4QyxRQUFRcDZDLEVBQUUwSixFQUFFdEwsR0FBR3l5RCxHQUFHN3dELEVBQUUwSixFQUFFdEwsRUFBRSxLQUFLLFVBQVcsRUFBQzYvQyxhQUFhaitDLEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQUdrOEQsR0FBRzd3RCxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFLGVBQWdCLEVBQUMwbEQsUUFBUXI2QyxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHazhELEdBQUc3d0QsRUFBRTBKLEVBQUV0TCxFQUFFekosRUFBRSxVQUFVLEdBQUcsU0FBU2s4RCxHQUFHN3dELEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsR0FBRyxNQUFNbHBCLEVBQUUsU0FBU3FDLEVBQUUwSixHQUFHLE9BQU8xSixHQUFHLElBQUksU0FBUyxPQUFPd3dELEdBQUcsSUFBSSxXQUFXLE9BQU9WLEdBQUcsUUFBUSxPQUFPcG1ELEdBQUcsSUFBSSxXQUFXLE9BQU91bUQsR0FBRyxJQUFJLFFBQVEsT0FBT00sR0FBRyxRQUFRLE9BQU9ULElBQUksQ0FBNUosQ0FBOEo5dkQsRUFBRXdoRCxRQUFRcGpELEVBQUVzdEMsT0FBT3R0QyxFQUFFc3RDLE1BQU1weEMsTUFBTXVzQixHQUFHbHBCLEdBQUdBLEVBQUVxQyxFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFLENBQUMsTUFBTW04RCxHQUFHLENBQUMsT0FBTyxRQUFRLE1BQU0sUUFBUUMsR0FBRyxDQUFDenVCLEtBQUt0aUMsR0FBR0EsRUFBRWlTLGtCQUFrQisrQyxRQUFRaHhELEdBQUdBLEVBQUVDLGlCQUFpQmdSLEtBQUtqUixHQUFHQSxFQUFFSSxTQUFTSixFQUFFaXhELGNBQWNDLEtBQUtseEQsSUFBSUEsRUFBRWsvQixRQUFRaXlCLE1BQU1ueEQsSUFBSUEsRUFBRW94RCxTQUFTQyxJQUFJcnhELElBQUlBLEVBQUVzeEQsT0FBTzVsRCxLQUFLMUwsSUFBSUEsRUFBRWkvQixRQUFRNzFCLEtBQUtwSixHQUFHLFdBQVdBLEdBQUcsSUFBSUEsRUFBRW16QixPQUFPbytCLE9BQU92eEQsR0FBRyxXQUFXQSxHQUFHLElBQUlBLEVBQUVtekIsT0FBT3ErQixNQUFNeHhELEdBQUcsV0FBV0EsR0FBRyxJQUFJQSxFQUFFbXpCLE9BQU9zK0IsTUFBTSxDQUFDenhELEVBQUUwSixJQUFJb25ELEdBQUdqc0MsTUFBTXptQixHQUFHNEIsRUFBRyxHQUFFNUIsVUFBVXNMLEVBQUVuRSxTQUFTbkgsTUFBTXN6RCxHQUFHLENBQUMxeEQsRUFBRTBKLElBQUksQ0FBQ3RMLEtBQUt6SixLQUFLLElBQUksSUFBSXFMLEVBQUUsRUFBRUEsRUFBRTBKLEVBQUU3VCxPQUFPbUssSUFBSSxDQUFDLE1BQU1yTCxFQUFFbzhELEdBQUdybkQsRUFBRTFKLElBQUksR0FBR3JMLEdBQUdBLEVBQUV5SixFQUFFc0wsR0FBRyxNQUFNLENBQUMsT0FBTzFKLEVBQUU1QixLQUFLekosRUFBRSxFQUFFZzlELEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxNQUFNLElBQUlDLEdBQUcsV0FBVzFvRCxLQUFLLGFBQWFvb0QsTUFBTSxjQUFjTyxLQUFLLGFBQWE5dEMsT0FBTyxhQUFhK3RDLEdBQUcsQ0FBQ2h5RCxFQUFFMEosSUFBSXRMLElBQUksS0FBSyxRQUFRQSxHQUFHLE9BQU8sTUFBTXpKLEVBQUV5c0MsR0FBRWhqQyxFQUFFOEosS0FBSyxPQUFPd0IsRUFBRW1iLE1BQU03a0IsR0FBR0EsSUFBSXJMLEdBQUdnOUQsR0FBRzN4RCxLQUFLckwsSUFBSXFMLEVBQUU1QixRQUFHLENBQU0sRUFBRTZ6RCxHQUFHLENBQUNqVSxZQUFZaCtDLEdBQUduRyxNQUFNNlAsSUFBSXNmLFdBQVc1cUIsSUFBSTRCLEVBQUVreUQsS0FBSyxTQUFTbHlELEVBQUVrSixNQUFNK2xELFFBQVEsR0FBR2p2RCxFQUFFa0osTUFBTStsRCxRQUFRN3dELEdBQUdzTCxFQUFFdEwsRUFBRXU0QyxZQUFZMzJDLEdBQUdteUQsR0FBR255RCxFQUFFMEosRUFBRyxFQUFDMHdDLFFBQVFwNkMsR0FBR25HLE1BQU02UCxJQUFJc2YsV0FBVzVxQixJQUFJQSxHQUFHc0wsR0FBR3RMLEVBQUUwUSxNQUFNOU8sRUFBRyxFQUFDcTZDLFFBQVFyNkMsR0FBR25HLE1BQU02UCxFQUFFOHdDLFNBQVNwOEMsSUFBSTRxQixXQUFXcjBCLEtBQUsrVSxJQUFJdEwsSUFBSXpKLEVBQUUrVSxHQUFHL1UsRUFBRWdpRCxZQUFZMzJDLEdBQUdteUQsR0FBR255RCxHQUFFLEdBQUlyTCxFQUFFbWEsTUFBTTlPLElBQUlyTCxFQUFFa2lELE1BQU03MkMsR0FBRyxLQUFLbXlELEdBQUdueUQsR0FBRSxFQUFHLElBQUlteUQsR0FBR255RCxFQUFFMEosR0FBSSxFQUFDeTBDLGNBQWNuK0MsR0FBR25HLE1BQU02UCxJQUFJeW9ELEdBQUdueUQsRUFBRTBKLEVBQUUsR0FBRyxTQUFTeW9ELEdBQUdueUQsRUFBRTBKLEdBQUcxSixFQUFFa0osTUFBTStsRCxRQUFRdmxELEVBQUUxSixFQUFFa3lELEtBQUssTUFBTSxDQUFDLE1BQU1FLEdBQUdwbkQsR0FBRSxDQUFDNDJDLFVBQVUsQ0FBQzVoRCxFQUFFMEosRUFBRW1kLEVBQUVscEIsRUFBRTlDLEdBQUUsRUFBRzJrQyxFQUFFRSxFQUFFdDFCLEVBQUVnaUIsS0FBSyxVQUFVMWlCLEVBQUUsU0FBUzFKLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNekosRUFBRXFMLEVBQUUrdEQsS0FBS3A1RCxJQUFJK1UsR0FBR0EsRUFBRSxDQUFDQSxLQUFLL1UsR0FBRyxJQUFJQSxJQUFJOEUsS0FBSyxNQUFNLE1BQU1pUSxFQUFFMUosRUFBRStyRCxnQkFBZ0IsU0FBUzN0RCxFQUFFNEIsRUFBRWlKLGFBQWEsUUFBUVMsR0FBRzFKLEVBQUVvekIsVUFBVTFwQixDQUFDLENBQWhKLENBQWtKMUosRUFBRXJDLEVBQUU5QyxHQUFHLFVBQVU2TyxFQUFFLFNBQVMxSixFQUFFMEosRUFBRXRMLEdBQUcsTUFBTXpKLEVBQUVxTCxFQUFFa0osTUFBTTJkLEVBQUUwWSxHQUFFbmhDLEdBQUcsR0FBR0EsSUFBSXlvQixFQUFFLENBQUMsSUFBSSxNQUFNN21CLEtBQUs1QixFQUFFa3JELEdBQUczMEQsRUFBRXFMLEVBQUU1QixFQUFFNEIsSUFBSSxHQUFHMEosSUFBSTYxQixHQUFFNzFCLEdBQUcsSUFBSSxNQUFNMUosS0FBSzBKLEVBQUUsTUFBTXRMLEVBQUU0QixJQUFJc3BELEdBQUczMEQsRUFBRXFMLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTXJDLEVBQUVoSixFQUFFczZELFFBQVFwb0MsRUFBRW5kLElBQUl0TCxJQUFJekosRUFBRTA5RCxRQUFRajBELEdBQUdzTCxHQUFHMUosRUFBRStyRCxnQkFBZ0IsU0FBUyxTQUFTL3JELElBQUlyTCxFQUFFczZELFFBQVF0eEQsRUFBRSxDQUFDLENBQXpPLENBQTJPcUMsRUFBRTZtQixFQUFFbHBCLEdBQUdFLEdBQUU2TCxHQUFHNjJCLEdBQUU3MkIsSUFBdmpaLFNBQVkxSixFQUFFMEosRUFBRXRMLEVBQUV6SixFQUFFa3lCLEVBQUUsTUFBTSxNQUFNbHBCLEVBQUVxQyxFQUFFc3lELE9BQU90eUQsRUFBRXN5RCxLQUFLLENBQUEsR0FBSXozRCxFQUFFOEMsRUFBRStMLEdBQUcsR0FBRy9VLEdBQUdrRyxFQUFFQSxFQUFFaEIsTUFBTWxGLE1BQU0sQ0FBQyxNQUFNeUosRUFBRW9oQyxHQUFHLFNBQVN4L0IsR0FBRyxJQUFJMEosRUFBRSxHQUFHMGdELEdBQUc3MEQsS0FBS3lLLEdBQUcsQ0FBQyxJQUFJNUIsRUFBRSxJQUFJc0wsRUFBRSxDQUFBLEVBQUd0TCxFQUFFNEIsRUFBRXlTLE1BQU0yM0MsS0FBS3BxRCxFQUFFQSxFQUFFeEQsTUFBTSxFQUFFd0QsRUFBRW5LLE9BQU91SSxFQUFFLEdBQUd2SSxRQUFRNlQsRUFBRXRMLEVBQUUsR0FBRzFDLGdCQUFlLENBQUUsQ0FBQyxNQUFNLENBQUMwbEMsR0FBRXBoQyxFQUFFeEQsTUFBTSxJQUFJa04sRUFBRyxDQUFsSixDQUFtSkEsR0FBRyxHQUFHL1UsRUFBRSxDQUFDLE1BQU1rRyxFQUFFOEMsRUFBRStMLEdBQUcsU0FBUzFKLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNEIsSUFBSSxNQUFNckwsRUFBRXFMLEVBQUU4cEQsV0FBV0gsTUFBTUMsSUFBSWoxRCxHQUFHeUosRUFBRW0wRCxTQUFTLElBQUl6bUIsR0FBRyxTQUFTOXJDLEVBQUUwSixHQUFHLEdBQUc0MUIsR0FBRTUxQixHQUFHLENBQUMsTUFBTXRMLEVBQUU0QixFQUFFd3lELHlCQUF5QixPQUFPeHlELEVBQUV3eUQseUJBQXlCLEtBQUtwMEQsRUFBRTJRLEtBQUsvTyxHQUFHQSxFQUFFeXlELFVBQVMsQ0FBRSxFQUFFL29ELEVBQUVwUSxLQUFLMEcsR0FBRzBKLElBQUlBLEVBQUUrb0QsVUFBVXp5RCxHQUFHQSxFQUFFMEosSUFBSSxDQUFDLE9BQU9BLENBQUMsQ0FBdEssQ0FBd0sxSixFQUFFNUIsRUFBRXZFLE9BQU82UCxFQUFFLEVBQUUsQ0FBQzFKLEdBQUcsRUFBRSxPQUFPNUIsRUFBRXZFLE1BQU1tRyxFQUFFNUIsRUFBRW0wRCxTQUFjeEksS0FBS0MsR0FBRzVqRCxLQUFLNmpELElBQUlGLEdBQUdKLE1BQVN2ckQsQ0FBQyxDQUExVSxDQUE0VXpKLEVBQUVreUIsR0FBR3FqQyxHQUFHbHFELEVBQUU1QixFQUFFdkQsRUFBRTJrQyxFQUFFLE1BQU0za0MsSUFBSyxTQUFTbUYsRUFBRTBKLEVBQUV0TCxFQUFFekosR0FBR3FMLEVBQUVxdUQsb0JBQW9CM2tELEVBQUV0TCxFQUFFekosRUFBRSxDQUE5QyxDQUFnRHFMLEVBQUU1QixFQUFFdkQsRUFBRTJrQyxHQUFHN2hDLEVBQUUrTCxRQUFHLEVBQU8sQ0FBQyxDQUFvNFhncEQsQ0FBRzF5RCxFQUFFMEosRUFBRSxFQUFFL0wsRUFBRStoQyxJQUFJLE1BQU1oMkIsRUFBRSxJQUFJQSxFQUFFQSxFQUFFbE4sTUFBTSxHQUFHLEdBQUcsTUFBTWtOLEVBQUUsSUFBSUEsRUFBRUEsRUFBRWxOLE1BQU0sR0FBRyxHQUFHLFNBQVN3RCxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE9BQUdBLEVBQVEsY0FBYytVLEdBQUcsZ0JBQWdCQSxNQUFNQSxLQUFLMUosR0FBR3FxRCxHQUFHOTBELEtBQUttVSxJQUFJczJCLEdBQUU1aEMsSUFBTyxlQUFlc0wsR0FBRyxjQUFjQSxHQUFHLGNBQWNBLElBQWMsU0FBU0EsS0FBYyxTQUFTQSxHQUFHLFVBQVUxSixFQUFFd2hELFlBQW9CLFNBQVM5M0MsR0FBRyxhQUFhMUosRUFBRXdoRCxhQUFvQjZJLEdBQUc5MEQsS0FBS21VLEtBQUk2MUIsR0FBRW5oQyxLQUFtQnNMLEtBQUsxSixLQUFFLENBQTFULENBQTJUQSxFQUFFMEosRUFBRS9MLEVBQUU5QyxJQUFJLFNBQVNtRixFQUFFMEosRUFBRXRMLEVBQUV5b0IsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxHQUFHLEdBQUcsY0FBYzkxQixHQUFHLGdCQUFnQkEsRUFBRSxPQUFPbWQsR0FBRzJZLEVBQUUzWSxFQUFFbHBCLEVBQUU5QyxRQUFRbUYsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUUsR0FBR0EsR0FBRyxHQUFHLFVBQVVzTCxHQUFHLGFBQWExSixFQUFFd2hELFVBQVV4aEQsRUFBRXdoRCxRQUFRajhDLFNBQVMsS0FBSyxDQUFDdkYsRUFBRTZwQyxPQUFPenJDLEVBQUUsTUFBTXpKLEVBQUUsTUFBTXlKLEVBQUUsR0FBR0EsRUFBRSxPQUFPNEIsRUFBRW5HLFFBQVFsRixHQUFHLFdBQVdxTCxFQUFFd2hELFVBQVV4aEQsRUFBRW5HLE1BQU1sRixRQUFRLE1BQU15SixHQUFHNEIsRUFBRStyRCxnQkFBZ0JyaUQsR0FBRyxDQUFDLElBQUlnMkIsR0FBRSxFQUFHLEdBQUcsS0FBS3RoQyxHQUFHLE1BQU1BLEVBQUUsQ0FBQyxNQUFNeW9CLFNBQVM3bUIsRUFBRTBKLEdBQUcsWUFBWW1kLEVBQUV6b0IsRUFBRXpKLEVBQUV5SixHQUFHLE1BQU1BLEdBQUcsV0FBV3lvQixHQUFHem9CLEVBQUUsR0FBR3NoQyxHQUFFLEdBQUksV0FBVzdZLElBQUl6b0IsRUFBRSxFQUFFc2hDLEdBQUUsRUFBRyxDQUFDLElBQUkxL0IsRUFBRTBKLEdBQUd0TCxDQUFXLENBQVQsTUFBTWdNLEdBQUcsQ0FBQ3MxQixHQUFHMS9CLEVBQUUrckQsZ0JBQWdCcmlELEVBQUcsQ0FBbmQsQ0FBb2QxSixFQUFFMEosRUFBRS9MLEVBQUU2aEMsRUFBRUUsRUFBRXQxQixFQUFFZ2lCLElBQUksZUFBZTFpQixFQUFFMUosRUFBRTJ5RCxXQUFXaDFELEVBQUUsZ0JBQWdCK0wsSUFBSTFKLEVBQUU0eUQsWUFBWWoxRCxHQUFHLFNBQVNxQyxFQUFFMEosRUFBRW1kLEVBQUVscEIsRUFBRTlDLEdBQUcsR0FBRzhDLEdBQUcrTCxFQUFFODJCLFdBQVcsVUFBVSxNQUFNM1osRUFBRTdtQixFQUFFNnlELGtCQUFrQm5KLEdBQUdoZ0QsRUFBRWxOLE1BQU0sRUFBRWtOLEVBQUU3VCxTQUFTbUssRUFBRTh5RCxlQUFlcEosR0FBR2hnRCxFQUFFbWQsT0FBTyxDQUFDLE1BQU1scEIsRUFBRVMsRUFBRXNMLEdBQUcsTUFBTW1kLEdBQUdscEIsSUFBSWhKLEVBQUVreUIsR0FBRzdtQixFQUFFK3JELGdCQUFnQnJpRCxHQUFHMUosRUFBRWlKLGFBQWFTLEVBQUUvTCxFQUFFLEdBQUdrcEIsRUFBRSxDQUFFLENBQWpOLENBQWtON21CLEVBQUUwSixFQUFFL0wsRUFBRTlDLEdBQUcsR0FBR211RCxJQUFJLElBQUkrSixHQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBSyxPQUFPRixLQUFLQSxHQUFHbFEsR0FBR3VQLElBQUksQ0FBQyxTQUFTYyxLQUFLLE9BQU9ILEdBQUdDLEdBQUdELEdBQUdoUSxHQUFHcVAsSUFBSVksSUFBRyxFQUFHRCxFQUFFLENBQUMsTUFBTXpILEdBQUcsSUFBSXRyRCxLQUFLaXpELEtBQUsvaEMsVUFBVWx4QixFQUFFLEVBQUUwcUQsR0FBRyxJQUFJMXFELEtBQUtrekQsS0FBS3poQixXQUFXenhDLEVBQUUsRUFBRW16RCxHQUFHLElBQUluekQsS0FBSyxNQUFNMEosRUFBRXVwRCxLQUFLOU4sYUFBYW5sRCxJQUFJa2hELE1BQU05aUQsR0FBR3NMLEVBQUUsT0FBT0EsRUFBRXczQyxNQUFNbGhELElBQUksTUFBTXJMLEVBQUV5K0QsR0FBR3B6RCxHQUFHLElBQUlyTCxFQUFFLE9BQU8sTUFBTWt5QixFQUFFbmQsRUFBRTYyQyxXQUFXdmdCLEdBQUVuWixJQUFJQSxFQUFFcUssUUFBUXJLLEVBQUVvZ0MsV0FBV3BnQyxFQUFFb2dDLFNBQVN0eUQsRUFBRWdWLFdBQVdoVixFQUFFZ1YsVUFBVSxHQUFHLE1BQU1oTSxFQUFFUyxFQUFFekosR0FBRSxFQUFHQSxhQUFhMndELFlBQVksT0FBTzN3RCxhQUFhMCtELFVBQVUxK0QsRUFBRW8zRCxnQkFBZ0IsV0FBV3AzRCxFQUFFc1UsYUFBYSxhQUFhLEtBQUt0TCxDQUFDLEVBQUUrTCxDQUFDLEVBQUU0cEQsR0FBRyxJQUFJdHpELEtBQUssTUFBTTBKLEVBQUV3cEQsS0FBSy9OLGFBQWFubEQsSUFBSWtoRCxNQUFNOWlELEdBQUdzTCxFQUFFLE9BQU9BLEVBQUV3M0MsTUFBTWxoRCxJQUFJLE1BQU0wSixFQUFFMHBELEdBQUdwekQsR0FBRyxHQUFHMEosRUFBRSxPQUFPdEwsRUFBRXNMLEdBQUUsRUFBR0EsYUFBYTQ3QyxXQUFXLEVBQUU1N0MsQ0FBQyxFQUFFLFNBQVMwcEQsR0FBR3B6RCxHQUFHLE9BQUd1L0IsR0FBRXYvQixHQUFXK0ksU0FBUyt6QixjQUFjOThCLEdBQVVBLENBQUMsQ0FBQyxNQUFNdXpELEdBQUdyM0IsR0FBRSxJQUFJczNCLEdBQUdwc0QsT0FBT3FzRCxPQUFPLENBQUNDLFVBQVUsS0FBS3hpQyxPQUFPbzZCLEdBQUc3WixRQUFRaVosR0FBR3ZGLFVBQVVnTyxHQUFHUSxhQUFhTCxHQUFHTSxxQkFBcUJMLEdBQUdNLG9CQUFvQnZKLEdBQUd3Six1QkFBdUJySixHQUFHc0osV0FBV3hKLEdBQUd5SixhQUFhN0gsR0FBRzhILFdBQVc3SCxHQUFHOEgsV0FBVzFILEdBQUcySCxnQkFBZ0JyRixHQUFHc0YsV0FBV3RFLEdBQUd1RSxlQUFlcEUsR0FBR3FFLFlBQVkvRCxHQUFHZ0UsYUFBYS9ELEdBQUdnRSxjQUFjNUQsR0FBRzZELGNBQWMvQyxHQUFHZ0QsU0FBUzFDLEdBQUcyQyxNQUFNMUMsR0FBRzJDLFNBQVMxdUIsR0FBRzRSLElBQUl0TyxHQUFHcXJCLFNBQVM1dUIsR0FBRzZ1QixNQUFNL3FCLEdBQUdnckIsVUFBVTlxQixHQUFHK3FCLE1BQU1odkIsR0FBR2l2QixNQUFNMXFCLEdBQUcycUIsT0FBTzVxQixHQUFHNnFCLFFBQVFoc0IsR0FBR2lzQixXQUFXcHNCLEdBQUdxc0IsV0FBV2p2QixHQUFHa3ZCLFVBQVVqdkIsR0FBR2t2QixVQUFVbHJCLEdBQUdtckIsV0FBVzFyQixHQUFHMnJCLFdBQVcvckIsR0FBR2dzQixnQkFBZ0JqdEIsR0FBR2t0QixnQkFBZ0JqdEIsR0FBR2t0QixRQUFReHNCLEdBQUd5c0IsTUFBTXB3QixHQUFHekIsT0FBT0QsR0FBR3pCLEtBQUs2QixHQUFHMnhCLGVBQWV0eUIsR0FBR3V5QixZQUFZdnpCLEdBQUd3ekIsWUFBWWgwQixHQUFHaTBCLGdCQUFnQnZ6QixHQUFHd3pCLGVBQWV2ekIsR0FBR2tDLFNBQVMyaUIsR0FBRzVJLE1BQU0vSyxHQUFHc2lCLFlBQVk1aUIsR0FBRzZpQixnQkFBZ0IzaUIsR0FBRzRpQixnQkFBZ0IxaUIsR0FBRzJpQixjQUFjMWMsR0FBRzJjLFVBQVU1aEIsR0FBRzZoQixlQUFlM2MsR0FBRzRjLFVBQVV6ZCxHQUFHMGQsZ0JBQWdCOWhCLEdBQUcraEIsWUFBWXBkLEdBQUdxZCxZQUFZM2QsR0FBRzRkLGNBQWMxZCxHQUFHMmQsZ0JBQWdCOWMsR0FBRytjLGtCQUFrQmhkLEdBQUdpZCxnQkFBZ0IvYyxHQUFHZ2QsaUJBQWlCbmQsR0FBRytFLFFBQVEzTCxHQUFHNEwsT0FBT3pMLEdBQUc2akIsU0FBU3RxQixHQUFHdXFCLGdCQUFnQmxnQixHQUFHbWdCLHFCQUFxQmhnQixHQUFHaWdCLFNBQVNqUCxHQUFHa1AsU0FBU3BQLEdBQUdxUCxZQUFZelAsR0FBRzBQLFlBQVl6UCxHQUFHMFAsYUFBYXpQLEdBQUcwUCxhQUFhelAsR0FBRzBQLGNBQWN0UCxHQUFHdVAscUJBQXFCdFAsR0FBR3VQLGlCQUFpQnRQLEdBQUd1UCxtQkFBbUI5aEIsR0FBR3Z2QixFQUFFK2hDLEdBQUd1UCxZQUFZbG9CLEdBQUdtb0IsV0FBV2hvQixHQUFHaW9CLFdBQVd4UixHQUFHeVIsUUFBUW5sQixHQUFHb2xCLFNBQVNwaEIsR0FBR3FoQixLQUFLblcsR0FBR29XLFFBQVF2b0IsR0FBR3dvQixPQUFPcFcsR0FBR3FXLFNBQVM3UyxHQUFHOFMsU0FBU2hvQixHQUFHaW9CLFVBQVV6Z0IsR0FBRzBnQixlQUFlM2pCLEdBQUc0akIsZUFBZXplLEdBQUcwZSxjQUFjbFEsR0FBR21RLGNBQWNwUSxHQUFHcVEsZUFBZWpXLEdBQUdrVyx3QkFBd0JoVyxHQUFHaVcsaUJBQWlCOXJCLEdBQUcvekMsS0FBSzh4QyxHQUFHZ3VCLFlBQVlwdEIsR0FBR3F0QixzQkFBc0IzdEIsR0FBRzR0QiwyQkFBMkJydEIsR0FBR3N0QixpQkFBaUJ4ZSxHQUFHeWUsaUJBQWlCcmUsR0FBR3NlLHdCQUF3QnZlLEdBQUd3ZSx3QkFBd0J6UyxHQUFHMFMsY0FBY3hTLEdBQUd5UyxtQkFBbUJubEIsR0FBR29sQix1QkFBdUJ0akIsR0FBR3VqQixtQkFBbUJ0akIsR0FBR3VqQix5QkFBeUIzakIsR0FBRzRqQixvQkFBb0JsUixHQUFPbVIsZUFBVyxPQUFPenNCLEVBQUcsRUFBQzBzQixnQkFBZ0J4c0IsR0FBR3lzQixRQUFRcHJCLEdBQUdxckIsWUFBWXhyQixHQUFHeXJCLFdBQVd4ckIsR0FBR3lyQixZQUFZeHJCLEdBQUd5ckIsV0FBV2xmLEdBQUdtZixXQUFXM2UsR0FBRzRlLFdBQVdqZixHQUFHa2YsWUFBWW5mLEdBQUdvZixTQUFTNVIsR0FBRzZSLFdBQVc1UixHQUFHNlIsVUFBVTluQixHQUFHK25CLFlBQVluZixHQUFHb2YsaUJBQWlCOXJCLEdBQUcrckIsZ0JBQWdCdFksR0FBR3VZLG1CQUFtQjkrRCxHQUFHKytELGtCQUFrQnJVLEdBQUdzVSxtQkFBbUJqVixHQUFHa1YsbUJBQW1CblYsR0FBR29WLG1CQUFtQjFVLEdBQUcyVSxnQkFBZ0IxNkMsR0FBRTI2QyxTQUFTaitCLEdBQUVrK0IsV0FBV2g2QixHQUFFaTZCLGFBQWFoNkIsR0FBRWk2QixlQUFlbnhELEVBQUVveEQsZUFBZTk3QixFQUFFKzdCLGVBQWU1MEMsRUFBRTYwQyxtQkFBbUJ6VixHQUFHckYsUUFBUUMsR0FBRzhhLFNBQVMsS0FBS0MsY0FBYyxLQUFLQyxZQUFZLE9BQU8sU0FBU0MsR0FBRzk3RCxHQUFHLE1BQU1BLENBQUMsQ0FBQyxTQUFTKzdELEdBQUcvN0QsR0FBRyxDQUFDLFNBQVNnOEQsR0FBR2g4RCxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLE1BQU1reUIsRUFBRSxJQUFJbzFDLFlBQVlybEUsT0FBT29KLElBQUksT0FBTzZtQixFQUFFcTFDLEtBQUtsOEQsRUFBRTZtQixFQUFFczFDLElBQUl6eUQsRUFBRW1kLENBQUMsQ0FBQyxNQUFNdTFDLEdBQUc5NEIsT0FBTyxJQUFJKzRCLEdBQUcvNEIsT0FBTyxJQUFJZzVCLEdBQUdoNUIsT0FBTyxJQUFJaTVCLEdBQUdqNUIsT0FBTyxJQUFJazVCLEdBQUdsNUIsT0FBTyxJQUFJbTVCLEdBQUduNUIsT0FBTyxJQUFJbzVCLEdBQUdwNUIsT0FBTyxJQUFJcTVCLEdBQUdyNUIsT0FBTyxJQUFJczVCLEdBQUd0NUIsT0FBTyxJQUFJdTVCLEdBQUd2NUIsT0FBTyxJQUFJdzVCLEdBQUd4NUIsT0FBTyxJQUFJeTVCLEdBQUd6NUIsT0FBTyxJQUFJMDVCLEdBQUcxNUIsT0FBTyxJQUFJMjVCLEdBQUczNUIsT0FBTyxJQUFJNDVCLEdBQUc1NUIsT0FBTyxJQUFJNjVCLEdBQUc3NUIsT0FBTyxJQUFJODVCLEdBQUc5NUIsT0FBTyxJQUFJKzVCLEdBQUcvNUIsT0FBTyxJQUFJZzZCLEdBQUdoNkIsT0FBTyxJQUFJeUksR0FBR3pJLE9BQU8sSUFBSWk2QixHQUFHajZCLE9BQU8sSUFBSWs2QixHQUFHbDZCLE9BQU8sSUFBSW02QixHQUFHbjZCLE9BQU8sSUFBSXZxQyxHQUFHdXFDLE9BQU8sSUFBSW82QixHQUFHcDZCLE9BQU8sSUFBSXE2QixHQUFHcjZCLE9BQU8sSUFBSXM2QixHQUFHdDZCLE9BQU8sSUFBSXU2QixHQUFHdjZCLE9BQU8sSUFBSXc2QixHQUFHeDZCLE9BQU8sSUFBSXk2QixHQUFHejZCLE9BQU8sSUFBSTJoQixHQUFHM2hCLE9BQU8sSUFBSTA2QixHQUFHMTZCLE9BQU8sSUFBSTI2QixHQUFHMzZCLE9BQU8sSUFBSTQ2QixHQUFHNTZCLE9BQU8sSUFBSTBoQixHQUFHMWhCLE9BQU8sSUFBSTY2QixHQUFHNzZCLE9BQU8sSUFBSTg2QixHQUFHOTZCLE9BQU8sSUFBSSs2QixHQUFHLzZCLE9BQU8sSUFBSXlMLEdBQUd6TCxPQUFPLElBQUk4Z0IsR0FBRyxDQUFDZ1ksQ0FBQ0EsSUFBSSxXQUFXQyxDQUFDQSxJQUFJLFdBQVdDLENBQUNBLElBQUksV0FBV0MsQ0FBQ0EsSUFBSSxZQUFZQyxDQUFDQSxJQUFJLGlCQUFpQkMsQ0FBQ0EsSUFBSSxZQUFZQyxDQUFDQSxJQUFJLGNBQWNDLENBQUNBLElBQUkscUJBQXFCQyxDQUFDQSxJQUFJLGNBQWNDLENBQUNBLElBQUkscUJBQXFCQyxDQUFDQSxJQUFJLHFCQUFxQkMsQ0FBQ0EsSUFBSSxrQkFBa0JDLENBQUNBLElBQUksb0JBQW9CQyxDQUFDQSxJQUFJLG1CQUFtQkMsQ0FBQ0EsSUFBSSwwQkFBMEJDLENBQUNBLElBQUksbUJBQW1CQyxDQUFDQSxJQUFJLGdCQUFnQkMsQ0FBQ0EsSUFBSSxpQkFBaUJDLENBQUNBLElBQUksYUFBYXZ4QixDQUFDQSxJQUFJLGFBQWF3eEIsQ0FBQ0EsSUFBSSxjQUFjQyxDQUFDQSxJQUFJLGtCQUFrQkMsQ0FBQ0EsSUFBSSxhQUFhMWtFLENBQUNBLElBQUksaUJBQWlCMmtFLENBQUNBLElBQUksaUJBQWlCQyxDQUFDQSxJQUFJLGlCQUFpQkMsQ0FBQ0EsSUFBSSxxQkFBcUJDLENBQUNBLElBQUksYUFBYUMsQ0FBQ0EsSUFBSSxXQUFXQyxDQUFDQSxJQUFJLGFBQWE5WSxDQUFDQSxJQUFJLGVBQWUrWSxDQUFDQSxJQUFJLG1CQUFtQkMsQ0FBQ0EsSUFBSSxjQUFjQyxDQUFDQSxJQUFJLGFBQWFsWixDQUFDQSxJQUFJLFVBQVVtWixDQUFDQSxJQUFJLFFBQVFDLENBQUNBLElBQUksUUFBUUMsQ0FBQ0EsSUFBSSxXQUFXdHZCLENBQUNBLElBQUksY0FBb0J1dkIsR0FBRyxDQUFDOXdELE9BQU8sR0FBR21CLE1BQU0sQ0FBQzR2RCxLQUFLLEVBQUUxb0MsT0FBTyxFQUFFMm9DLE9BQU8sR0FBR0MsSUFBSSxDQUFDRixLQUFLLEVBQUUxb0MsT0FBTyxFQUFFMm9DLE9BQU8sSUFBSSxTQUFTRSxHQUFHMStELEVBQUUwSixFQUFFdEwsRUFBRXpKLEVBQUVreUIsRUFBRWxwQixFQUFFOUMsRUFBRTJrQyxHQUFFLEVBQUdFLEdBQUUsRUFBR3QxQixHQUFFLEVBQUdnaUIsRUFBRWt5QyxJQUFJLE9BQU90K0QsSUFBSXcvQixHQUFHeC9CLEVBQUUyK0QsT0FBT2xDLElBQUl6OEQsRUFBRTIrRCxPQUFPQyxHQUFHNStELEVBQUU2K0QsTUFBTXowRCxLQUFLcEssRUFBRTIrRCxPQUFPRyxHQUFHOStELEVBQUU2K0QsTUFBTXowRCxJQUFJdlAsR0FBR21GLEVBQUUyK0QsT0FBT3RCLEtBQUssQ0FBQy9pRSxLQUFLLEdBQUd5MEQsSUFBSXJsRCxFQUFFZ2lDLE1BQU10dEMsRUFBRXd6QyxTQUFTajlDLEVBQUVxaUQsVUFBVW53QixFQUFFODhCLGFBQWFobUQsRUFBRWdoRCxXQUFXOWpELEVBQUVra0UsUUFBUXYvQixFQUFFdy9CLGdCQUFnQnQvQixFQUFFdS9CLFlBQVk3MEQsRUFBRSt4RCxJQUFJL3ZDLEVBQUUsQ0FBQyxTQUFTOHlDLEdBQUdsL0QsRUFBRTBKLEVBQUU0MEQsSUFBSSxNQUFNLENBQUNoa0UsS0FBSyxHQUFHNmhFLElBQUl6eUQsRUFBRXkxRCxTQUFTbi9ELEVBQUUsQ0FBQyxTQUFTby9ELEdBQUdwL0QsRUFBRTBKLEVBQUU0MEQsSUFBSSxNQUFNLENBQUNoa0UsS0FBSyxHQUFHNmhFLElBQUl6eUQsRUFBRTIxRCxXQUFXci9ELEVBQUUsQ0FBQyxTQUFTcy9ELEdBQUd0L0QsRUFBRTBKLEdBQUcsTUFBTSxDQUFDcFAsS0FBSyxHQUFHNmhFLElBQUltQyxHQUFHcDJELElBQUlxM0IsR0FBRXYvQixHQUFHdS9ELEdBQUd2L0QsR0FBRSxHQUFJQSxFQUFFbkcsTUFBTTZQLEVBQUUsQ0FBQyxTQUFTNjFELEdBQUd2L0QsRUFBRTBKLEdBQUUsRUFBR3RMLEVBQUVrZ0UsR0FBRzNwRSxFQUFFLEdBQUcsTUFBTSxDQUFDMkYsS0FBSyxFQUFFNmhFLElBQUkvOUQsRUFBRXFxQixRQUFRem9CLEVBQUV3L0QsU0FBUzkxRCxFQUFFKzFELFVBQVUvMUQsRUFBRSxFQUFFL1UsRUFBRSxDQUFDLFNBQVMrcUUsR0FBRzEvRCxFQUFFMEosRUFBRTQwRCxJQUFJLE1BQU0sQ0FBQ2hrRSxLQUFLLEVBQUU2aEUsSUFBSXp5RCxFQUFFa29DLFNBQVM1eEMsRUFBRSxDQUFDLFNBQVMyL0QsR0FBRzMvRCxFQUFFMEosRUFBRSxHQUFHdEwsRUFBRWtnRSxJQUFJLE1BQU0sQ0FBQ2hrRSxLQUFLLEdBQUc2aEUsSUFBSS85RCxFQUFFd2hFLE9BQU81L0QsRUFBRXN6QyxVQUFVNXBDLEVBQUUsQ0FBQyxTQUFTbTJELEdBQUc3L0QsRUFBRTBKLEVBQUV0TCxHQUFFLEVBQUd6SixHQUFFLEVBQUdreUIsRUFBRXkzQyxJQUFJLE1BQU0sQ0FBQ2hrRSxLQUFLLEdBQUdtRixPQUFPTyxFQUFFOC9ELFFBQVFwMkQsRUFBRXEyRCxRQUFRM2hFLEVBQUU0aEUsT0FBT3JyRSxFQUFFd25FLElBQUl0MUMsRUFBRSxDQUFDLFNBQVNvNUMsR0FBR2pnRSxFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFFLEdBQUksTUFBTSxDQUFDMkYsS0FBSyxHQUFHL0UsS0FBS3lLLEVBQUVrZ0UsV0FBV3gyRCxFQUFFeTJELFVBQVUvaEUsRUFBRTJoRSxRQUFRcHJFLEVBQUV3bkUsSUFBSW1DLEdBQUcsQ0FBQyxNQUFNOEIsR0FBR3BnRSxHQUFHLElBQUlBLEVBQUUxRixNQUFNMEYsRUFBRXcvRCxTQUFTYSxHQUFHLENBQUNyZ0UsRUFBRTBKLElBQUkxSixJQUFJMEosR0FBRzFKLElBQUlvaEMsR0FBRTEzQixHQUFHLFNBQVM0MkQsR0FBR3RnRSxHQUFHLE9BQU9xZ0UsR0FBR3JnRSxFQUFFLFlBQVlxOEQsR0FBR2dFLEdBQUdyZ0UsRUFBRSxZQUFZczhELEdBQUcrRCxHQUFHcmdFLEVBQUUsYUFBYXU4RCxHQUFHOEQsR0FBR3JnRSxFQUFFLGtCQUFrQnc4RCxRQUFHLENBQU0sQ0FBQyxNQUFNK0QsR0FBRyxjQUFjQyxHQUFHeGdFLElBQUl1Z0UsR0FBR2hyRSxLQUFLeUssR0FBR3lnRSxHQUFHLHdCQUF3QkMsR0FBRyx1QkFBdUJDLEdBQUcseUJBQXlCQyxHQUFHNWdFLElBQUlBLEVBQUVBLEVBQUV3RixPQUFPaFEsUUFBUW1yRSxJQUFJM2dFLEdBQUdBLEVBQUV3RixTQUFTLElBQUlrRSxFQUFFLEVBQUV0TCxFQUFFLEdBQUd6SixFQUFFLEVBQUVreUIsRUFBRSxFQUFFbHBCLEVBQUUsS0FBSyxJQUFJLElBQUk5QyxFQUFFLEVBQUVBLEVBQUVtRixFQUFFbkssT0FBT2dGLElBQUksQ0FBQyxNQUFNMmtDLEVBQUV4L0IsRUFBRTFELE9BQU96QixHQUFHLE9BQU82TyxHQUFHLEtBQUssRUFBRSxHQUFHLE1BQU04MUIsRUFBRXBoQyxFQUFFVSxLQUFLNEssR0FBR0EsRUFBRSxFQUFFL1UsU0FBUyxHQUFHLE1BQU02cUMsRUFBRXBoQyxFQUFFVSxLQUFLNEssR0FBR0EsRUFBRSxFQUFFbWQsU0FBUyxLQUFLLElBQUloc0IsRUFBRTRsRSxHQUFHQyxJQUFJbnJFLEtBQUtpcUMsR0FBRyxPQUFNLEVBQUcsTUFBTSxLQUFLLEVBQUUsTUFBTUEsR0FBRyxNQUFNQSxHQUFHLE1BQU1BLEdBQUdwaEMsRUFBRVUsS0FBSzRLLEdBQUdBLEVBQUUsRUFBRS9MLEVBQUU2aEMsR0FBRyxNQUFNQSxFQUFFN3FDLElBQUksTUFBTTZxQyxNQUFNN3FDLElBQUkrVSxFQUFFdEwsRUFBRW1rQyxRQUFRLE1BQU0sS0FBSyxFQUFFLEdBQUcsTUFBTS9DLEdBQUcsTUFBTUEsR0FBRyxNQUFNQSxFQUFFcGhDLEVBQUVVLEtBQUs0SyxHQUFHQSxFQUFFLEVBQUUvTCxFQUFFNmhDLE9BQU8sR0FBRyxNQUFNQSxFQUFFM1ksU0FBUyxHQUFHLE1BQU0yWSxFQUFFLENBQUMsR0FBRzNrQyxJQUFJbUYsRUFBRW5LLE9BQU8sRUFBRSxPQUFNLElBQUtneEIsSUFBSW5kLEVBQUV0TCxFQUFFbWtDLE1BQU0sQ0FBQyxNQUFNLEtBQUssRUFBRS9DLElBQUk3aEMsSUFBSStMLEVBQUV0TCxFQUFFbWtDLE1BQU01a0MsRUFBRSxNQUFNLENBQUMsT0FBT2hKLElBQUlreUIsQ0FBQyxFQUFFLFNBQVNnNkMsR0FBRzdnRSxFQUFFMEosRUFBRXRMLEdBQUcsTUFBTXpKLEVBQUUsQ0FBQzZZLE9BQU94TixFQUFFd04sT0FBT2hSLE1BQU1rTixFQUFFQSxFQUFFdEwsR0FBR3VRLE1BQU1teUQsR0FBRzlnRSxFQUFFMk8sTUFBTTNPLEVBQUV3TixPQUFPOUQsR0FBRyswRCxJQUFJeitELEVBQUV5K0QsS0FBSyxPQUFPLE1BQU1yZ0UsSUFBSXpKLEVBQUU4cEUsSUFBSXFDLEdBQUc5Z0UsRUFBRTJPLE1BQU0zTyxFQUFFd04sT0FBTzlELEVBQUV0TCxJQUFJekosQ0FBQyxDQUFDLFNBQVNtc0UsR0FBRzlnRSxFQUFFMEosRUFBRXRMLEVBQUVzTCxFQUFFN1QsUUFBUSxPQUFPa3JFLEdBQUcvMUQsR0FBRSxDQUFFLEVBQUNoTCxHQUFHMEosRUFBRXRMLEVBQUUsQ0FBQyxTQUFTMmlFLEdBQUcvZ0UsRUFBRTBKLEVBQUV0TCxFQUFFc0wsRUFBRTdULFFBQVEsSUFBSWxCLEVBQUUsRUFBRWt5QixHQUFHLEVBQUUsSUFBSSxJQUFJbHBCLEVBQUUsRUFBRUEsRUFBRVMsRUFBRVQsSUFBSSxLQUFLK0wsRUFBRWdZLFdBQVcvakIsS0FBS2hKLElBQUlreUIsRUFBRWxwQixHQUFHLE9BQU9xQyxFQUFFdytELFFBQVFwZ0UsRUFBRTRCLEVBQUV1K0QsTUFBTTVwRSxFQUFFcUwsRUFBRTYxQixRQUFRLElBQUloUCxFQUFFN21CLEVBQUU2MUIsT0FBT3ozQixFQUFFQSxFQUFFeW9CLEVBQUU3bUIsQ0FBQyxDQUFDLFNBQVNnaEUsR0FBR2hoRSxFQUFFMEosRUFBRXRMLEdBQUUsR0FBSSxJQUFJLElBQUl6SixFQUFFLEVBQUVBLEVBQUVxTCxFQUFFMHJDLE1BQU03MUMsT0FBT2xCLElBQUksQ0FBQyxNQUFNa3lCLEVBQUU3bUIsRUFBRTByQyxNQUFNLzJDLEdBQUcsR0FBRyxJQUFJa3lCLEVBQUV2c0IsT0FBTzhELEdBQUd5b0IsRUFBRW82QyxPQUFPMWhDLEdBQUU3MUIsR0FBR21kLEVBQUVsbUIsT0FBTytJLEVBQUVBLEVBQUVuVSxLQUFLc3hCLEVBQUVsbUIsT0FBTyxPQUFPa21CLENBQUMsQ0FBQyxDQUFDLFNBQVNxNkMsR0FBR2xoRSxFQUFFMEosRUFBRXRMLEdBQUUsRUFBR3pKLEdBQUUsR0FBSSxJQUFJLElBQUlreUIsRUFBRSxFQUFFQSxFQUFFN21CLEVBQUUwckMsTUFBTTcxQyxPQUFPZ3hCLElBQUksQ0FBQyxNQUFNbHBCLEVBQUVxQyxFQUFFMHJDLE1BQU03a0IsR0FBRyxHQUFHLElBQUlscEIsRUFBRXJELEtBQUssQ0FBQyxHQUFHOEQsRUFBRSxTQUFTLEdBQUdULEVBQUVnRCxPQUFPK0ksSUFBSS9MLEVBQUU5RCxPQUFPbEYsR0FBRyxPQUFPZ0osQ0FBRSxNQUFLLEdBQUcsU0FBU0EsRUFBRWdELE9BQU9oRCxFQUFFc2pFLEtBQUt0c0UsSUFBSXdzRSxHQUFHeGpFLEVBQUU4OEMsSUFBSS93QyxHQUFHLE9BQU8vTCxDQUFDLENBQUMsQ0FBQyxTQUFTd2pFLEdBQUduaEUsRUFBRTBKLEdBQUcsU0FBUzFKLElBQUlvZ0UsR0FBR3BnRSxJQUFJQSxFQUFFeW9CLFVBQVUvZSxFQUFFLENBQUMsU0FBUzAzRCxHQUFHcGhFLEdBQUcsT0FBTyxJQUFJQSxFQUFFMUYsTUFBTSxJQUFJMEYsRUFBRTFGLElBQUksQ0FBQyxTQUFTK21FLEdBQUdyaEUsR0FBRyxPQUFPLElBQUlBLEVBQUUxRixNQUFNLFNBQVMwRixFQUFFVyxJQUFJLENBQUMsU0FBUzJnRSxHQUFHdGhFLEdBQUcsT0FBTyxJQUFJQSxFQUFFMUYsTUFBTSxJQUFJMEYsRUFBRXVoRSxPQUFPLENBQUMsU0FBU0MsR0FBR3hoRSxHQUFHLE9BQU8sSUFBSUEsRUFBRTFGLE1BQU0sSUFBSTBGLEVBQUV1aEUsT0FBTyxDQUFDLFNBQVN6QyxHQUFHOStELEVBQUUwSixHQUFHLE9BQU8xSixHQUFHMEosRUFBRWt6RCxHQUFHQyxFQUFFLENBQUMsU0FBUytCLEdBQUc1K0QsRUFBRTBKLEdBQUcsT0FBTzFKLEdBQUcwSixFQUFFZ3pELEdBQUdDLEVBQUUsQ0FBQyxNQUFNOEUsR0FBRyxJQUFJNStCLElBQUksQ0FBQzg2QixHQUFHQyxLQUFLLFNBQVM4RCxHQUFHMWhFLEVBQUUwSixFQUFFLElBQUksR0FBRzFKLElBQUl1L0IsR0FBRXYvQixJQUFJLEtBQUtBLEVBQUUxRixLQUFLLENBQUMsTUFBTThELEVBQUU0QixFQUFFNC9ELE9BQU8sSUFBSXJnQyxHQUFFbmhDLElBQUlxakUsR0FBR2h0QyxJQUFJcjJCLEdBQUcsT0FBT3NqRSxHQUFHMWhFLEVBQUVzekMsVUFBVSxHQUFHNXBDLEVBQUV3bUMsT0FBT2x3QyxHQUFHLENBQUMsTUFBTSxDQUFDQSxFQUFFMEosRUFBRSxDQUFDLFNBQVNpNEQsR0FBRzNoRSxFQUFFMEosRUFBRXRMLEdBQUcsSUFBSXpKLEVBQUVreUIsRUFBRWxwQixFQUFFLEtBQUtxQyxFQUFFMUYsS0FBSzBGLEVBQUUwckMsTUFBTTFyQyxFQUFFc3pDLFVBQVUsR0FBR3o0QyxFQUFFLEdBQUcsR0FBRzhDLElBQUk0aEMsR0FBRTVoQyxJQUFJLEtBQUtBLEVBQUVyRCxLQUFLLENBQUMsTUFBTTBGLEVBQUUwaEUsR0FBRy9qRSxHQUFHQSxFQUFFcUMsRUFBRSxHQUFHbkYsRUFBRW1GLEVBQUUsR0FBRzZtQixFQUFFaHNCLEVBQUVBLEVBQUVoRixPQUFPLEVBQUUsQ0FBQyxHQUFHLE1BQU04SCxHQUFHNGhDLEdBQUU1aEMsR0FBR2hKLEVBQUV5cUUsR0FBRyxDQUFDMTFELFNBQVMsR0FBRyxLQUFLL0wsRUFBRXJELEtBQUssQ0FBQyxNQUFNMEYsRUFBRXJDLEVBQUUyMUMsVUFBVSxHQUFHL1QsR0FBRXYvQixJQUFJLEtBQUtBLEVBQUUxRixLQUFLcUQsRUFBRWlpRSxTQUFTL0IsR0FBR2xwRSxFQUFFZ3JFLEdBQUd2aEUsRUFBRXVnRSxPQUFPbEIsSUFBSSxDQUFDMkIsR0FBRyxDQUFDMTFELElBQUkvTCxJQUFJQSxFQUFFMjFDLFVBQVVtRyxRQUFRMmxCLEdBQUcsQ0FBQzExRCxLQUFLMUosRUFBRXEvRCxXQUFXNWxCLFFBQVEvdkMsSUFBSS9VLElBQUlBLEVBQUVnSixFQUFFLE1BQU0sR0FBRyxLQUFLQSxFQUFFckQsS0FBSyxDQUFDLElBQUkwRixHQUFFLEVBQUcsR0FBRyxJQUFJMEosRUFBRXhCLElBQUk1TixLQUFLLENBQUMsTUFBTThELEVBQUVzTCxFQUFFeEIsSUFBSXVnQixRQUFRem9CLEVBQUVyQyxFQUFFMGhFLFdBQVd4NkMsTUFBTTdrQixHQUFHLElBQUlBLEVBQUVrSSxJQUFJNU4sTUFBTTBGLEVBQUVrSSxJQUFJdWdCLFVBQVVycUIsR0FBRyxDQUFDNEIsR0FBR3JDLEVBQUUwaEUsV0FBVzVsQixRQUFRL3ZDLEdBQUcvVSxFQUFFZ0osQ0FBQyxNQUFNaEosRUFBRWdyRSxHQUFHdmhFLEVBQUV1Z0UsT0FBT2xCLElBQUksQ0FBQzJCLEdBQUcsQ0FBQzExRCxJQUFJL0wsSUFBSWtwQixHQUFHQSxFQUFFKzRDLFNBQVNoQyxLQUFLLzJDLEVBQUVoc0IsRUFBRUEsRUFBRWhGLE9BQU8sSUFBSSxLQUFLbUssRUFBRTFGLEtBQUt1c0IsRUFBRUEsRUFBRXlzQixVQUFVLEdBQUczK0MsRUFBRXFMLEVBQUUwckMsTUFBTS8yQyxFQUFFa3lCLEVBQUVBLEVBQUV5c0IsVUFBVSxHQUFHMytDLEVBQUVxTCxFQUFFc3pDLFVBQVUsR0FBRzMrQyxDQUFDLENBQUMsU0FBU2l0RSxHQUFHNWhFLEVBQUUwSixHQUFHLE1BQU8sSUFBR0EsS0FBSzFKLEVBQUV4SyxRQUFRLFVBQVUsQ0FBQ2tVLEVBQUV0TCxJQUFJLE1BQU1zTCxFQUFFLElBQUkxSixFQUFFMGhCLFdBQVd0akIsR0FBRzVFLGNBQWMsQ0FBQyxTQUFTcW9FLEdBQUc3aEUsR0FBRzIrRCxPQUFPajFELEVBQUVvNEQsYUFBYTFqRSxFQUFFeWdFLE1BQU1scUUsSUFBSXFMLEVBQUUrK0QsVUFBVS8rRCxFQUFFKytELFNBQVEsRUFBRzNnRSxFQUFFMGdFLEdBQUducUUsRUFBRXFMLEVBQUVpL0QsY0FBY3YxRCxFQUFFK3lELElBQUkveUQsRUFBRWsxRCxHQUFHanFFLEVBQUVxTCxFQUFFaS9ELGNBQWMsQ0FBQyxNQUFNOEMsR0FBRywyQkFBMkJDLEdBQUcsQ0FBQzk3QixHQUFHLElBQUlrQyxHQUFHLElBQUk2NUIsSUFBSSxJQUFJQyxLQUFLLElBQUlDLEtBQUssS0FBS0MsR0FBRyxDQUFDamIsV0FBVyxDQUFDLEtBQUssTUFBTWtiLGFBQWEsSUFBSSxFQUFFQyxZQUFZLElBQUksRUFBRUMsVUFBVWw0RCxHQUFFbTRELFNBQVNuNEQsR0FBRTY4QyxnQkFBZ0I3OEMsR0FBRW80RCxlQUFlemlFLEdBQUdBLEVBQUV4SyxRQUFRdXNFLElBQUksQ0FBQy9oRSxFQUFFMEosSUFBSXM0RCxHQUFHdDRELEtBQUsrdEMsUUFBUXFrQixHQUFHNEcsT0FBTzNHLEdBQUc0RyxVQUFTLEdBQWlaLFNBQVNDLEdBQUc1aUUsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU16SixFQUFFa3VFLEdBQUd6a0UsR0FBR3lvQixFQUFFbHlCLEVBQUVBLEVBQUU2bUQsR0FBRyxFQUFFNzlDLEVBQUUsR0FBRyxNQUFNbWxFLEdBQUc5aUUsRUFBRTBKLEVBQUV0TCxJQUFJLENBQUMsTUFBTXZELEVBQUVtRixFQUFFd04sT0FBTyxJQUFJZ3lCLEVBQUUsR0FBRyxJQUFJOTFCLEdBQUcsSUFBSUEsRUFBRSxJQUFJMUosRUFBRStpRSxRQUFRQyxHQUFHbm9FLEVBQUVtRixFQUFFNkYsUUFBUXNoRCxXQUFXLElBQUkzbkIsRUFBRXlqQyxHQUFHampFLEVBQUUwSixRQUFRLEdBQUcsSUFBSUEsR0FBRyxNQUFNN08sRUFBRSxHQUFHLEdBQUcsSUFBSUEsRUFBRWhGLGFBQWEsR0FBRyxNQUFNZ0YsRUFBRSxHQUFHMmtDLEVBQUV3akMsR0FBR25vRSxFQUFFLFdBQVdxb0UsR0FBR2xqRSxHQUFHZ2pFLEdBQUdub0UsRUFBRSxhQUFhc29FLEdBQUduakUsR0FBR2dqRSxHQUFHbm9FLEVBQUUsY0FBYyxJQUFJZ3NCLEVBQUV1OEMsR0FBR3BqRSxFQUFFNUIsR0FBRytrRSxHQUFHbmpFLFFBQVEsR0FBRyxNQUFNbkYsRUFBRSxHQUFHLEdBQUcsSUFBSUEsRUFBRWhGLFlBQVksQ0FBQyxHQUFHLE1BQU1nRixFQUFFLEdBQUcsQ0FBQ3dvRSxHQUFHcmpFLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxTQUFTekssS0FBS3NGLEVBQUUsSUFBSSxDQUFDeW9FLEdBQUd0akUsRUFBRSxFQUFFckwsR0FBRyxRQUFRLENBQUM2cUMsRUFBRTJqQyxHQUFHbmpFLEVBQUUsS0FBSyxTQUFTekssS0FBS3NGLEVBQUUsSUFBSTJrQyxFQUFFK2pDLEdBQUd2akUsRUFBRTVCLEdBQUcsTUFBTXZELEVBQUUsS0FBSzJrQyxFQUFFMmpDLEdBQUduakUsSUFBSSxHQUFHdy9CLElBQUlBLEVBQUVna0MsR0FBR3hqRSxFQUFFMEosSUFBSTQxQixHQUFFRSxHQUFHLElBQUksSUFBSXgvQixFQUFFLEVBQUVBLEVBQUV3L0IsRUFBRTNwQyxPQUFPbUssSUFBSXlqRSxHQUFHOWxFLEVBQUU2aEMsRUFBRXgvQixTQUFTeWpFLEdBQUc5bEUsRUFBRTZoQyxFQUFFLENBQUMsSUFBSTNrQyxHQUFFLEVBQUcsR0FBRyxJQUFJNk8sR0FBRyxJQUFJQSxFQUFFLENBQUMsTUFBTUEsRUFBRSxhQUFhMUosRUFBRTZGLFFBQVE2OUQsV0FBVyxJQUFJLElBQUl0bEUsRUFBRSxFQUFFQSxFQUFFVCxFQUFFOUgsT0FBT3VJLElBQUksQ0FBQyxNQUFNekosRUFBRWdKLEVBQUVTLEdBQUcsR0FBRzRCLEVBQUUyakUsT0FBTyxJQUFJaHZFLEVBQUUyRixLQUFLLElBQUkzRixFQUFFMkYsTUFBTTBGLEVBQUU2RixRQUFRODhELFdBQVc5bkUsR0FBRSxFQUFHOEMsRUFBRVMsR0FBRyxXQUFXLEdBQUcsZUFBZTdJLEtBQUtaLEVBQUU4ekIsU0FBUy9lLElBQUkvVSxFQUFFOHpCLFFBQVE5ekIsRUFBRTh6QixRQUFRanpCLFFBQVEsZ0JBQWdCLFVBQVUsQ0FBQyxNQUFNd0ssRUFBRXJDLEVBQUVTLEVBQUUsR0FBR3lvQixFQUFFbHBCLEVBQUVTLEVBQUUsSUFBSTRCLElBQUk2bUIsR0FBR25kLElBQUksSUFBSTFKLEVBQUUxRixNQUFNLElBQUl1c0IsRUFBRXZzQixNQUFNLElBQUkwRixFQUFFMUYsTUFBTSxJQUFJdXNCLEVBQUV2c0IsTUFBTSxTQUFTL0UsS0FBS1osRUFBRTh6QixXQUFXNXRCLEdBQUUsRUFBRzhDLEVBQUVTLEdBQUcsTUFBTXpKLEVBQUU4ekIsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHem9CLEVBQUUyakUsT0FBT2h2RSxHQUFHcUwsRUFBRTZGLFFBQVEyOEQsU0FBUzd0RSxFQUFFbzZELEtBQUssQ0FBQyxNQUFNL3VELEVBQUVyQyxFQUFFLEdBQUdxQyxHQUFHLElBQUlBLEVBQUUxRixPQUFPMEYsRUFBRXlvQixRQUFRem9CLEVBQUV5b0IsUUFBUWp6QixRQUFRLFNBQVMsSUFBSSxDQUFDLENBQUMsT0FBT3FGLEVBQUU4QyxFQUFFc08sT0FBT2dwQyxTQUFTdDNDLENBQUMsQ0FBQyxTQUFTOGxFLEdBQUd6akUsRUFBRTBKLEdBQUcsR0FBRyxJQUFJQSxFQUFFcFAsS0FBSyxDQUFDLE1BQU04RCxFQUFFeWtFLEdBQUc3aUUsR0FBRyxHQUFHNUIsR0FBRyxJQUFJQSxFQUFFOUQsTUFBTThELEVBQUUrOUQsSUFBSXNDLElBQUlELFNBQVM5MEQsRUFBRXl5RCxJQUFJeHRELE1BQU02dkQsT0FBTyxPQUFPcGdFLEVBQUVxcUIsU0FBUy9lLEVBQUUrZSxRQUFRcnFCLEVBQUUrOUQsSUFBSXNDLElBQUkvMEQsRUFBRXl5RCxJQUFJc0MsU0FBU3JnRSxFQUFFKzlELElBQUkzdUQsUUFBUTlELEVBQUV5eUQsSUFBSTN1RCxPQUFPLENBQUN4TixFQUFFbEIsS0FBSzRLLEVBQUUsQ0FBQyxTQUFTMDVELEdBQUdwakUsRUFBRTBKLEdBQUcyNUQsR0FBR3JqRSxFQUFFLEdBQUcsTUFBTTVCLEVBQUV3a0UsR0FBRzVpRSxFQUFFLEVBQUUwSixHQUFHLE9BQU8sSUFBSTFKLEVBQUV3TixPQUFPM1gsUUFBUXd0RSxHQUFHcmpFLEVBQUUsR0FBRzVCLENBQUMsQ0FBQyxTQUFTOGtFLEdBQUdsakUsR0FBRyxNQUFNMEosRUFBRWs2RCxHQUFHNWpFLEdBQUcsSUFBSTVCLEVBQUUsTUFBTXpKLEVBQUUsV0FBV2t2RSxLQUFLN2pFLEVBQUV3TixRQUFRLEdBQUc3WSxFQUFFLENBQUN5SixFQUFFNEIsRUFBRXdOLE9BQU9oUixNQUFNLEVBQUU3SCxFQUFFbzBCLE9BQU8sTUFBTXJmLEVBQUUxSixFQUFFd04sT0FBT2hSLE1BQU0sRUFBRTdILEVBQUVvMEIsT0FBTyxJQUFJbEMsRUFBRSxFQUFFbHBCLEVBQUUsRUFBRSxNQUFNLEtBQUtBLEVBQUUrTCxFQUFFeXNCLFFBQVEsVUFBVXRQLEtBQUt3OEMsR0FBR3JqRSxFQUFFckMsRUFBRWtwQixFQUFFLEdBQUdBLEVBQUVscEIsRUFBRSxFQUFFMGxFLEdBQUdyakUsRUFBRXJMLEVBQUVvMEIsTUFBTXAwQixFQUFFLEdBQUdrQixPQUFPZ3hCLEVBQUUsRUFBRyxNQUFLem9CLEVBQUU0QixFQUFFd04sT0FBT2hSLE1BQU0sR0FBRzZtRSxHQUFHcmpFLEVBQUVBLEVBQUV3TixPQUFPM1gsUUFBUSxNQUFNLENBQUN5RSxLQUFLLEVBQUVtdUIsUUFBUXJxQixFQUFFKzlELElBQUkySCxHQUFHOWpFLEVBQUUwSixHQUFHLENBQUMsU0FBU3k1RCxHQUFHbmpFLEdBQUcsTUFBTTBKLEVBQUVrNkQsR0FBRzVqRSxHQUFHNUIsRUFBRSxNQUFNNEIsRUFBRXdOLE9BQU8sR0FBRyxFQUFFLEVBQUUsSUFBSTdZLEVBQUUsTUFBTWt5QixFQUFFN21CLEVBQUV3TixPQUFPMm9CLFFBQVEsS0FBSyxPQUFPLElBQUl0UCxHQUFHbHlCLEVBQUVxTCxFQUFFd04sT0FBT2hSLE1BQU00QixHQUFHaWxFLEdBQUdyakUsRUFBRUEsRUFBRXdOLE9BQU8zWCxVQUFVbEIsRUFBRXFMLEVBQUV3TixPQUFPaFIsTUFBTTRCLEVBQUV5b0IsR0FBR3c4QyxHQUFHcmpFLEVBQUU2bUIsRUFBRSxJQUFJLENBQUN2c0IsS0FBSyxFQUFFbXVCLFFBQVE5ekIsRUFBRXduRSxJQUFJMkgsR0FBRzlqRSxFQUFFMEosR0FBRyxDQUFDLFNBQVM2NUQsR0FBR3ZqRSxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRTRCLEVBQUUyakUsTUFBTWh2RSxFQUFFcUwsRUFBRStpRSxPQUFPbDhDLEVBQUVnOEMsR0FBR241RCxHQUFHL0wsRUFBRTJsRSxHQUFHdGpFLEVBQUUsRUFBRTZtQixHQUFHaHNCLEVBQUVtRixFQUFFMmpFLFFBQVF2bEUsRUFBRW9oQyxFQUFFeC9CLEVBQUUraUUsU0FBU3B1RSxFQUFFLEdBQUdnSixFQUFFb21FLGVBQWUvakUsRUFBRTZGLFFBQVEwOEQsVUFBVTVrRSxFQUFFb3hELEtBQUssT0FBT2wwRCxJQUFJbUYsRUFBRTJqRSxPQUFNLEdBQUlua0MsSUFBSXgvQixFQUFFK2lFLFFBQU8sR0FBSXBsRSxFQUFFK0wsRUFBRTVLLEtBQUtuQixHQUFHLE1BQU0raEMsRUFBRTEvQixFQUFFNkYsUUFBUXk4RCxZQUFZM2tFLEVBQUVrcEIsR0FBR3pjLEVBQUV3NEQsR0FBRzVpRSxFQUFFMC9CLEVBQUVoMkIsR0FBRyxHQUFHQSxFQUFFNjRCLE1BQU01a0MsRUFBRWkwQyxTQUFTeG5DLEVBQUU0NUQsR0FBR2hrRSxFQUFFd04sT0FBTzdQLEVBQUVveEQsS0FBS3VVLEdBQUd0akUsRUFBRSxFQUFFNm1CLFFBQVEsR0FBRyxJQUFJN21CLEVBQUV3TixPQUFPM1gsUUFBUSxXQUFXOEgsRUFBRW94RCxJQUFJcnpELGNBQWMsQ0FBQyxNQUFNc0UsRUFBRW9LLEVBQUUsR0FBR3BLLEdBQUdnakUsR0FBR2hqRSxFQUFFbThELElBQUkzdUQsT0FBTyxVQUFVLENBQUMsT0FBTzdQLEVBQUV3K0QsSUFBSTJILEdBQUc5akUsRUFBRXJDLEVBQUV3K0QsSUFBSXh0RCxPQUFPOVQsSUFBSW1GLEVBQUUyakUsT0FBTSxHQUFJbmtDLElBQUl4L0IsRUFBRStpRSxRQUFPLEdBQUlwbEUsQ0FBQyxDQUFDLE1BQU1pN0MsR0FBRzU0QyxFQUFFLDRCQUE0QixTQUFTc2pFLEdBQUd0akUsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU16SixFQUFFaXZFLEdBQUc1akUsR0FBRzZtQixFQUFFLCtCQUErQmc5QyxLQUFLN2pFLEVBQUV3TixRQUFRN1AsRUFBRWtwQixFQUFFLEdBQUdoc0IsRUFBRW1GLEVBQUU2RixRQUFRdzhELGFBQWExa0UsRUFBRVMsR0FBR2lsRSxHQUFHcmpFLEVBQUU2bUIsRUFBRSxHQUFHaHhCLFFBQVFvdUUsR0FBR2prRSxHQUFHLE1BQU13L0IsRUFBRW9rQyxHQUFHNWpFLEdBQUcwL0IsRUFBRTEvQixFQUFFd04sT0FBT3hOLEVBQUU2RixRQUFRMjhELFNBQVM3a0UsS0FBS3FDLEVBQUUyakUsT0FBTSxHQUFJLElBQUl2NUQsRUFBRTg1RCxHQUFHbGtFLEVBQUUwSixHQUFHLElBQUlBLElBQUkxSixFQUFFK2lFLFFBQVEzNEQsRUFBRXlhLE1BQU03a0IsR0FBRyxJQUFJQSxFQUFFMUYsTUFBTSxRQUFRMEYsRUFBRVcsU0FBU1gsRUFBRStpRSxRQUFPLEVBQUcvM0QsR0FBRWhMLEVBQUV3L0IsR0FBR3gvQixFQUFFd04sT0FBT2t5QixFQUFFdDFCLEVBQUU4NUQsR0FBR2xrRSxFQUFFMEosR0FBR3VDLFFBQVFqTSxHQUFHLFVBQVVBLEVBQUVXLFFBQVEsSUFBSXlyQixHQUFFLEVBQUcsR0FBRyxJQUFJcHNCLEVBQUV3TixPQUFPM1gsU0FBU3UyQixFQUFFNDJDLEdBQUdoakUsRUFBRXdOLE9BQU8sTUFBTTYxRCxHQUFHcmpFLEVBQUVvc0IsRUFBRSxFQUFFLElBQUksSUFBSTFpQixFQUFFLE9BQU8sSUFBSW5RLEVBQUUsRUFBRSxPQUFPeUcsRUFBRStpRSxTQUFTLFNBQVNwbEUsRUFBRXBFLEVBQUUsRUFBRSxhQUFhb0UsRUFBRXlNLEVBQUV5YSxNQUFNN2tCLEdBQUcsSUFBSUEsRUFBRTFGLE1BQU1zK0MsR0FBRzU0QyxFQUFFVyxVQUFVcEgsRUFBRSxHQUFHLFNBQVN5RyxFQUFFMEosRUFBRXRMLEdBQUcsTUFBTXpKLEVBQUV5SixFQUFFeUgsUUFBUSxHQUFHbFIsRUFBRXV5RCxnQkFBZ0JsbkQsR0FBRyxPQUFNLEVBQUcsR0FBRyxjQUFjQSxHQUFHLFNBQVN6SyxLQUFLeUssSUFBSXNnRSxHQUFHdGdFLElBQUlyTCxFQUFFd3ZFLG9CQUFvQnh2RSxFQUFFd3ZFLG1CQUFtQm5rRSxJQUFJckwsRUFBRXNyRCxjQUFjdHJELEVBQUVzckQsWUFBWWpnRCxHQUFHLE9BQU0sRUFBRyxJQUFJLElBQUk2bUIsRUFBRSxFQUFFQSxFQUFFbmQsRUFBRTdULE9BQU9neEIsSUFBSSxDQUFDLE1BQU03bUIsRUFBRTBKLEVBQUVtZCxHQUFHLEdBQUcsSUFBSTdtQixFQUFFMUYsTUFBTSxHQUFHLE9BQU8wRixFQUFFVyxNQUFNWCxFQUFFbkcsT0FBT21HLEVBQUVuRyxNQUFNNHVCLFFBQVErWCxXQUFXLFFBQVEsT0FBTSxNQUFPLENBQUMsR0FBRyxPQUFPeGdDLEVBQUVXLEtBQUssT0FBTSxFQUFHLFNBQVNYLEVBQUVXLE1BQU13Z0UsR0FBR25oRSxFQUFFeTZDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBeFksQ0FBMFk5OEMsRUFBRXlNLEVBQUVwSyxLQUFLekcsRUFBRSxJQUFJLENBQUNlLEtBQUssRUFBRWtoRCxHQUFHM2dELEVBQUVrMEQsSUFBSXB4RCxFQUFFNGpFLFFBQVFob0UsRUFBRW15QyxNQUFNdGhDLEVBQUUyNUQsY0FBYzMzQyxFQUFFd2xCLFNBQVMsR0FBR3VxQixJQUFJMkgsR0FBRzlqRSxFQUFFckwsR0FBR3l2RSxpQkFBWSxFQUFPLENBQUMsU0FBU0YsR0FBR2xrRSxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRSxHQUFHekosRUFBRSxJQUFJa3VDLElBQUksS0FBSzdpQyxFQUFFd04sT0FBTzNYLE9BQU8sSUFBSW10RSxHQUFHaGpFLEVBQUV3TixPQUFPLE9BQU93MUQsR0FBR2hqRSxFQUFFd04sT0FBTyxPQUFPLENBQUMsR0FBR3cxRCxHQUFHaGpFLEVBQUV3TixPQUFPLEtBQUssQ0FBQzYxRCxHQUFHcmpFLEVBQUUsR0FBR2lrRSxHQUFHamtFLEdBQUcsUUFBUSxDQUFDLE1BQU02bUIsRUFBRXc5QyxHQUFHcmtFLEVBQUVyTCxHQUFHLElBQUlreUIsRUFBRXZzQixNQUFNdXNCLEVBQUVodEIsT0FBTyxVQUFVZ3RCLEVBQUVsbUIsT0FBT2ttQixFQUFFaHRCLE1BQU00dUIsUUFBUTVCLEVBQUVodEIsTUFBTTR1QixRQUFRanpCLFFBQVEsT0FBTyxLQUFLZ1EsUUFBUSxJQUFJa0UsR0FBR3RMLEVBQUVVLEtBQUsrbkIsR0FBRyxrQkFBa0J0eEIsS0FBS3lLLEVBQUV3TixRQUFReTJELEdBQUdqa0UsRUFBRSxDQUFDLE9BQU81QixDQUFDLENBQUMsU0FBU2ltRSxHQUFHcmtFLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFd2xFLEdBQUc1akUsR0FBR3JMLEVBQUUsa0NBQWtDa3ZFLEtBQUs3akUsRUFBRXdOLFFBQVEsR0FBRzlELEVBQUUrcUIsSUFBSTkvQixHQUFHK1UsRUFBRWc3QixJQUFJL3ZDLEdBQUcsQ0FBQyxNQUFNcUwsRUFBRSxTQUFlLEtBQU9BLEVBQUU2akUsS0FBS2x2RSxLQUFLLENBQUMsSUFBSWt5QixFQUFFdzhDLEdBQUdyakUsRUFBRXJMLEVBQUVrQixRQUFRLGlCQUFpQk4sS0FBS3lLLEVBQUV3TixVQUFVeTJELEdBQUdqa0UsR0FBR3FqRSxHQUFHcmpFLEVBQUUsR0FBR2lrRSxHQUFHamtFLEdBQUc2bUIsRUFBRSxTQUFTN21CLEdBQUcsTUFBTTBKLEVBQUVrNkQsR0FBRzVqRSxHQUFHLElBQUk1QixFQUFFLE1BQU16SixFQUFFcUwsRUFBRXdOLE9BQU8sR0FBR3FaLEVBQUUsTUFBTWx5QixHQUFHLE1BQU1BLEVBQUUsR0FBR2t5QixFQUFFLENBQUN3OEMsR0FBR3JqRSxFQUFFLEdBQUcsTUFBTTBKLEVBQUUxSixFQUFFd04sT0FBTzJvQixRQUFReGhDLElBQUksSUFBSStVLEVBQUV0TCxFQUFFa21FLEdBQUd0a0UsRUFBRUEsRUFBRXdOLE9BQU8zWCxPQUFPLElBQUl1SSxFQUFFa21FLEdBQUd0a0UsRUFBRTBKLEVBQUUsR0FBRzI1RCxHQUFHcmpFLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTTBKLEVBQUUsa0JBQWtCbTZELEtBQUs3akUsRUFBRXdOLFFBQVEsSUFBSTlELEVBQUUsT0FBTyxNQUFNL1UsRUFBRSxXQUFpQixLQUFPQSxFQUFFa3ZFLEtBQUtuNkQsRUFBRSxNQUFNdEwsRUFBRWttRSxHQUFHdGtFLEVBQUUwSixFQUFFLEdBQUc3VCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM0eUIsUUFBUXJxQixFQUFFbW1FLFNBQVMxOUMsRUFBRXMxQyxJQUFJMkgsR0FBRzlqRSxFQUFFMEosSUFBN1UsQ0FBa1YxSixJQUFJLE1BQU1yQyxFQUFFbW1FLEdBQUc5akUsRUFBRTVCLEdBQUcsSUFBSTRCLEVBQUUraUUsUUFBUSw2QkFBNkJ4dEUsS0FBS1osR0FBRyxDQUFDLE1BQU0rVSxFQUFFLHFFQUFxRW02RCxLQUFLbHZFLEdBQUcsSUFBSWtHLEVBQUUya0MsRUFBRXdqQyxHQUFHcnVFLEVBQUUsS0FBSytxQyxFQUFFaDJCLEVBQUUsS0FBSzgxQixHQUFHd2pDLEdBQUdydUUsRUFBRSxLQUFLLE9BQU9xdUUsR0FBR3J1RSxFQUFFLEtBQUssS0FBSyxRQUFRLEdBQUcrVSxFQUFFLEdBQUcsQ0FBQyxNQUFNbWQsRUFBRSxTQUFTNlksRUFBRS9oQyxFQUFFaEosRUFBRXVWLFlBQVlSLEVBQUUsSUFBSTgxQixFQUFFc2tDLEdBQUc5akUsRUFBRXdrRSxHQUFHeGtFLEVBQUU1QixFQUFFVCxHQUFHNm1FLEdBQUd4a0UsRUFBRTVCLEVBQUVULEVBQUUrTCxFQUFFLEdBQUc3VCxRQUFRZ3hCLEdBQUduZCxFQUFFLElBQUksSUFBSTdULFNBQVMsSUFBSXVVLEVBQUVWLEVBQUUsR0FBRzBpQixHQUFFLEVBQUdoaUIsRUFBRW8yQixXQUFXLE1BQU1wVSxHQUFFLEVBQUdoaUIsRUFBRUEsRUFBRW80QyxTQUFTLEtBQUtwNEMsRUFBRTVOLE1BQU0sRUFBRTROLEVBQUV2VSxPQUFPLEdBQUd1VSxFQUFFNU4sTUFBTSxJQUFJcXFCLElBQUl6YyxHQUFHVixFQUFFLElBQUksSUFBSTdPLEVBQUUsQ0FBQ1AsS0FBSyxFQUFFbXVCLFFBQVFyZSxFQUFFbzFELFNBQVNwekMsRUFBRXF6QyxVQUFVcnpDLEVBQUUsRUFBRSxFQUFFK3ZDLElBQUkzOEIsRUFBRSxDQUFDLEdBQUczWSxHQUFHQSxFQUFFMDlDLFNBQVMsQ0FBQyxNQUFNdmtFLEVBQUU2bUIsRUFBRXMxQyxJQUFJbjhELEVBQUUyTyxNQUFNNnZELFNBQVN4K0QsRUFBRTJPLE1BQU1rbkIsU0FBUzcxQixFQUFFeStELElBQUlxQyxHQUFHOWdFLEVBQUUyTyxNQUFNa1ksRUFBRTRCLFNBQVN6b0IsRUFBRXdOLE9BQU94TixFQUFFd04sT0FBT2hSLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTTROLEVBQUVWLEVBQUUsR0FBR0EsRUFBRSxHQUFHbE4sTUFBTSxHQUFHbkQsTUFBTSxLQUFLLEdBQUcsT0FBT21tQyxHQUFHcDFCLEVBQUV0TCxLQUFLLFFBQVEsQ0FBQ3hFLEtBQUssRUFBRXFHLEtBQUsrK0IsRUFBRXVoQyxJQUFJcDZDLEdBQUcsQ0FBQ3ZzQixLQUFLLEVBQUVtdUIsUUFBUTVCLEVBQUU0QixRQUFRKzJDLFVBQVMsRUFBR0MsVUFBVSxFQUFFdEQsSUFBSXQxQyxFQUFFczFDLEtBQUsxaEIsSUFBSTUvQyxFQUFFNi9DLFVBQVV0d0MsRUFBRSt4RCxJQUFJeCtELEVBQUUsQ0FBQyxPQUFPcUMsRUFBRStpRSxRQUFRQyxHQUFHcnVFLEVBQUUsTUFBTSxDQUFDMkYsS0FBSyxFQUFFcUcsS0FBS2hNLEVBQUVrRixNQUFNZ3RCLEdBQUcsQ0FBQ3ZzQixLQUFLLEVBQUVtdUIsUUFBUTVCLEVBQUU0QixRQUFRMHpDLElBQUl0MUMsRUFBRXMxQyxLQUFLQSxJQUFJeCtELEVBQUUsQ0FBQyxTQUFTc2xFLEdBQUdqakUsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUV6SixHQUFHcUwsRUFBRTZGLFFBQVFzaEQsV0FBV3RnQyxFQUFFN21CLEVBQUV3TixPQUFPMm9CLFFBQVF4aEMsRUFBRXlKLEVBQUV2SSxRQUFRLElBQUksSUFBSWd4QixFQUFFLE9BQU8sTUFBTWxwQixFQUFFaW1FLEdBQUc1akUsR0FBR3FqRSxHQUFHcmpFLEVBQUU1QixFQUFFdkksUUFBUSxNQUFNZ0YsRUFBRStvRSxHQUFHNWpFLEdBQUd3L0IsRUFBRW9rQyxHQUFHNWpFLEdBQUcwL0IsRUFBRTdZLEVBQUV6b0IsRUFBRXZJLE9BQU91VSxFQUFFcEssRUFBRXdOLE9BQU9oUixNQUFNLEVBQUVrakMsR0FBR3RULEVBQUVrNEMsR0FBR3RrRSxFQUFFMC9CLEVBQUVoMkIsR0FBR25RLEVBQUU2eUIsRUFBRTVtQixPQUFPbTZCLEVBQUV2VCxFQUFFK0osUUFBUTU4QixHQUFrQixPQUFmb21DLEVBQUUsR0FBR29oQyxHQUFHbG1FLEVBQUV1UCxFQUFFdTFCLEdBQVVvaEMsR0FBR3ZoQyxFQUFFcDFCLEVBQUVzMUIsR0FBR3RULEVBQUV2MkIsT0FBTzBELEVBQUUxRCxPQUFPOHBDLElBQUkwakMsR0FBR3JqRSxFQUFFckwsRUFBRWtCLFFBQVEsQ0FBQ3lFLEtBQUssRUFBRW11QixRQUFRLENBQUNudUIsS0FBSyxFQUFFa2xFLFVBQVMsRUFBR0MsVUFBVSxFQUFFaDNDLFFBQVFsdkIsRUFBRTRpRSxJQUFJMkgsR0FBRzlqRSxFQUFFbkYsRUFBRTJrQyxJQUFJMjhCLElBQUkySCxHQUFHOWpFLEVBQUVyQyxHQUFHLENBQUMsU0FBUzZsRSxHQUFHeGpFLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFLElBQUlzTCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUkxSixFQUFFNkYsUUFBUXNoRCxXQUFXLElBQUksSUFBSXh5RCxFQUFFcUwsRUFBRXdOLE9BQU8zWCxPQUFPLElBQUksSUFBSThILEVBQUUsRUFBRUEsRUFBRVMsRUFBRXZJLE9BQU84SCxJQUFJLENBQUMsTUFBTStMLEVBQUUxSixFQUFFd04sT0FBTzJvQixRQUFRLzNCLEVBQUVULEdBQUcsSUFBSSxJQUFJK0wsR0FBRy9VLEVBQUUrVSxJQUFJL1UsRUFBRStVLEVBQUUsQ0FBQyxNQUFNbWQsRUFBRSs4QyxHQUFHNWpFLEdBQUcsTUFBTSxDQUFDMUYsS0FBSyxFQUFFbXVCLFFBQVE2N0MsR0FBR3RrRSxFQUFFckwsRUFBRStVLEdBQUd5eUQsSUFBSTJILEdBQUc5akUsRUFBRTZtQixHQUFHLENBQUMsU0FBU3k5QyxHQUFHdGtFLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNekosRUFBRXFMLEVBQUV3TixPQUFPaFIsTUFBTSxFQUFFa04sR0FBRyxPQUFPMjVELEdBQUdyakUsRUFBRTBKLEdBQUcsSUFBSXRMLEdBQUcsSUFBSUEsR0FBR3pKLEVBQUU0USxTQUFTLEtBQUt2RixFQUFFNkYsUUFBUTQ4RCxlQUFlOXRFLEVBQUUsSUFBSXlKLEdBQUd6SixDQUFDLENBQUMsU0FBU2l2RSxHQUFHNWpFLEdBQUcsTUFBTTYxQixPQUFPbnNCLEVBQUU2MEQsS0FBS25nRSxFQUFFb2dFLE9BQU83cEUsR0FBR3FMLEVBQUUsTUFBTSxDQUFDNjFCLE9BQU9uc0IsRUFBRTYwRCxLQUFLbmdFLEVBQUVvZ0UsT0FBTzdwRSxFQUFFLENBQUMsU0FBU212RSxHQUFHOWpFLEVBQUUwSixFQUFFdEwsR0FBRyxNQUFNLENBQUN1USxNQUFNakYsRUFBRSswRCxJQUFJcmdFLEVBQUVBLEdBQUd3bEUsR0FBRzVqRSxHQUFHd04sT0FBT3hOLEVBQUV5a0UsZUFBZWpvRSxNQUFNa04sRUFBRTgwRCxPQUFPcGdFLEVBQUVvZ0UsUUFBUSxDQUFDLFNBQVNxRSxHQUFHN2lFLEdBQUcsT0FBT0EsRUFBRUEsRUFBRW5LLE9BQU8sRUFBRSxDQUFDLFNBQVNtdEUsR0FBR2hqRSxFQUFFMEosR0FBRyxPQUFPMUosRUFBRXdnQyxXQUFXOTJCLEVBQUUsQ0FBQyxTQUFTMjVELEdBQUdyakUsRUFBRTBKLEdBQUcsTUFBTThELE9BQU9wUCxHQUFHNEIsRUFBRStnRSxHQUFHL2dFLEVBQUU1QixFQUFFc0wsR0FBRzFKLEVBQUV3TixPQUFPcFAsRUFBRTVCLE1BQU1rTixFQUFFLENBQUMsU0FBU3U2RCxHQUFHamtFLEdBQUcsTUFBTTBKLEVBQUUsZ0JBQWdCbTZELEtBQUs3akUsRUFBRXdOLFFBQVE5RCxHQUFHMjVELEdBQUdyakUsRUFBRTBKLEVBQUUsR0FBRzdULE9BQU8sQ0FBQyxTQUFTMnVFLEdBQUd4a0UsRUFBRTBKLEVBQUV0TCxHQUFHLE9BQU8waUUsR0FBR3AzRCxFQUFFMUosRUFBRXlrRSxlQUFlam9FLE1BQU1rTixFQUFFODBELE9BQU9wZ0UsR0FBR0EsRUFBRSxDQUFDLFNBQVMwa0UsR0FBRzlpRSxFQUFFMEosRUFBRXRMLEdBQUcsTUFBTXpKLEVBQUVxTCxFQUFFd04sT0FBTyxPQUFPOUQsR0FBRyxLQUFLLEVBQUUsR0FBR3M1RCxHQUFHcnVFLEVBQUUsTUFBTSxJQUFJLElBQUlxTCxFQUFFNUIsRUFBRXZJLE9BQU8sRUFBRW1LLEdBQUcsSUFBSUEsRUFBRSxHQUFHZ2tFLEdBQUdydkUsRUFBRXlKLEVBQUU0QixHQUFHK3VELEtBQUssT0FBTSxFQUFHLE1BQU0sS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLE1BQU0vdUQsRUFBRTZpRSxHQUFHemtFLEdBQUcsR0FBRzRCLEdBQUdna0UsR0FBR3J2RSxFQUFFcUwsRUFBRSt1RCxLQUFLLE9BQU0sRUFBRyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUdpVSxHQUFHcnVFLEVBQUUsT0FBTyxPQUFNLEVBQUcsT0FBT0EsQ0FBQyxDQUFDLFNBQVNxdkUsR0FBR2hrRSxFQUFFMEosR0FBRyxPQUFPczVELEdBQUdoakUsRUFBRSxPQUFPQSxFQUFFeEQsTUFBTSxFQUFFLEVBQUVrTixFQUFFN1QsUUFBUTZGLGdCQUFnQmdPLEVBQUVoTyxlQUFlLGdCQUFnQm5HLEtBQUt5SyxFQUFFLEVBQUUwSixFQUFFN1QsU0FBUyxJQUFJLENBQUMsU0FBUzZ1RSxHQUFHMWtFLEVBQUUwSixHQUFHaTdELEdBQUcza0UsRUFBRTBKLEVBQUVrN0QsR0FBRzVrRSxFQUFFQSxFQUFFNHhDLFNBQVMsSUFBSSxDQUFDLFNBQVNnekIsR0FBRzVrRSxFQUFFMEosR0FBRyxNQUFNa29DLFNBQVN4ekMsR0FBRzRCLEVBQUUsT0FBTyxJQUFJNUIsRUFBRXZJLFFBQVEsSUFBSTZULEVBQUVwUCxPQUFPa25FLEdBQUc5M0QsRUFBRSxDQUFDLFNBQVNpN0QsR0FBRzNrRSxFQUFFMEosRUFBRXRMLEdBQUUsR0FBSSxNQUFNd3pDLFNBQVNqOUMsR0FBR3FMLEVBQUU2bUIsRUFBRWx5QixFQUFFa0IsT0FBTyxJQUFJOEgsRUFBRSxFQUFFLElBQUksSUFBSTlDLEVBQUUsRUFBRUEsRUFBRWxHLEVBQUVrQixPQUFPZ0YsSUFBSSxDQUFDLE1BQU1tRixFQUFFckwsRUFBRWtHLEdBQUcsR0FBRyxJQUFJbUYsRUFBRTFGLE1BQU0sSUFBSTBGLEVBQUV1aEUsUUFBUSxDQUFDLE1BQU01c0UsRUFBRXlKLEVBQUUsRUFBRXltRSxHQUFHN2tFLEVBQUUwSixHQUFHLEdBQUcvVSxFQUFFLEdBQUcsR0FBR0EsR0FBRyxFQUFFLENBQUNxTCxFQUFFb2tFLFlBQVlwdEIsVUFBVSxLQUFLaDNDLEVBQUVva0UsWUFBWTE2RCxFQUFFbzdELE1BQU05a0UsRUFBRW9rRSxhQUFhem1FLElBQUksUUFBUSxNQUFNLENBQUMsTUFBTVMsRUFBRTRCLEVBQUVva0UsWUFBWSxHQUFHLEtBQUtobUUsRUFBRTlELEtBQUssQ0FBQyxNQUFNM0YsRUFBRW93RSxHQUFHM21FLEdBQUcsS0FBS3pKLEdBQUcsTUFBTUEsR0FBRyxJQUFJQSxJQUFJcXdFLEdBQUdobEUsRUFBRTBKLElBQUksRUFBRSxDQUFDLE1BQU0vVSxFQUFFc3dFLEdBQUdqbEUsR0FBR3JMLElBQUl5SixFQUFFc3RDLE1BQU1oaUMsRUFBRW83RCxNQUFNbndFLEdBQUcsQ0FBQ3lKLEVBQUV1bEQsZUFBZXZsRCxFQUFFdWxELGFBQWFqNkMsRUFBRW83RCxNQUFNMW1FLEVBQUV1bEQsY0FBYyxDQUFDLENBQUMsTUFBTSxLQUFLM2pELEVBQUUxRixNQUFNdXFFLEdBQUc3a0UsRUFBRXlvQixRQUFRL2UsSUFBSSxJQUFJMUosRUFBRW9rRSxZQUFZMTZELEVBQUVvN0QsTUFBTTlrRSxFQUFFb2tFLGFBQWF6bUUsS0FBSyxHQUFHLElBQUlxQyxFQUFFMUYsS0FBSyxDQUFDLE1BQU04RCxFQUFFLElBQUk0QixFQUFFdWhFLFFBQVFuakUsR0FBR3NMLEVBQUUwNEIsT0FBTzhpQyxRQUFRUCxHQUFHM2tFLEVBQUUwSixHQUFHdEwsR0FBR3NMLEVBQUUwNEIsT0FBTzhpQyxPQUFPLE1BQU0sR0FBRyxLQUFLbGxFLEVBQUUxRixLQUFLcXFFLEdBQUcza0UsRUFBRTBKLEVBQUUsSUFBSTFKLEVBQUU0eEMsU0FBUy83QyxhQUFhLEdBQUcsSUFBSW1LLEVBQUUxRixLQUFLLElBQUksSUFBSThELEVBQUUsRUFBRUEsRUFBRTRCLEVBQUVtbEUsU0FBU3R2RSxPQUFPdUksSUFBSXVtRSxHQUFHM2tFLEVBQUVtbEUsU0FBUy9tRSxHQUFHc0wsRUFBRSxJQUFJMUosRUFBRW1sRSxTQUFTL21FLEdBQUd3ekMsU0FBUy83QyxPQUFPLENBQUM4SCxHQUFHK0wsRUFBRTA3RCxnQkFBZ0IxN0QsRUFBRTA3RCxlQUFlendFLEVBQUUrVSxFQUFFMUosR0FBR3JDLEdBQUdBLElBQUlrcEIsR0FBRyxJQUFJN21CLEVBQUUxRixNQUFNLElBQUkwRixFQUFFdWhFLFNBQVN2aEUsRUFBRW9rRSxhQUFhLEtBQUtwa0UsRUFBRW9rRSxZQUFZOXBFLE1BQU1nbEMsR0FBRXQvQixFQUFFb2tFLFlBQVl4eUIsWUFBWTV4QyxFQUFFb2tFLFlBQVl4eUIsU0FBU2xvQyxFQUFFbzdELE1BQU01RixHQUFHbC9ELEVBQUVva0UsWUFBWXh5QixXQUFXLENBQUMsU0FBU2l6QixHQUFHN2tFLEVBQUUwSixHQUFHLE1BQU0yN0QsY0FBY2puRSxHQUFHc0wsRUFBRSxPQUFPMUosRUFBRTFGLE1BQU0sS0FBSyxFQUFFLEdBQUcsSUFBSTBGLEVBQUV1aEUsUUFBUSxPQUFPLEVBQUUsTUFBTTVzRSxFQUFFeUosRUFBRXlXLElBQUk3VSxHQUFHLFFBQUcsSUFBU3JMLEVBQUUsT0FBT0EsRUFBRSxNQUFNa3lCLEVBQUU3bUIsRUFBRW9rRSxZQUFZLEdBQUcsS0FBS3Y5QyxFQUFFdnNCLEtBQUssT0FBTyxFQUFFLEdBQUd1c0IsRUFBRWs0QyxTQUFTLFFBQVEvK0QsRUFBRSt1RCxLQUFLLGtCQUFrQi91RCxFQUFFK3VELElBQUksT0FBTyxFQUFFLEdBQUdnVyxHQUFHbCtDLEdBQUcsT0FBT3pvQixFQUFFbUosSUFBSXZILEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSXJMLEVBQUUsRUFBRSxNQUFNZ0osRUFBRXFuRSxHQUFHaGxFLEVBQUUwSixHQUFHLEdBQUcsSUFBSS9MLEVBQUUsT0FBT1MsRUFBRW1KLElBQUl2SCxFQUFFLEdBQUcsRUFBRXJDLEVBQUVoSixJQUFJQSxFQUFFZ0osR0FBRyxJQUFJLElBQUlrcEIsRUFBRSxFQUFFQSxFQUFFN21CLEVBQUU0eEMsU0FBUy83QyxPQUFPZ3hCLElBQUksQ0FBQyxNQUFNbHBCLEVBQUVrbkUsR0FBRzdrRSxFQUFFNHhDLFNBQVMvcUIsR0FBR25kLEdBQUcsR0FBRyxJQUFJL0wsRUFBRSxPQUFPUyxFQUFFbUosSUFBSXZILEVBQUUsR0FBRyxFQUFFckMsRUFBRWhKLElBQUlBLEVBQUVnSixFQUFFLENBQUMsR0FBR2hKLEVBQUUsRUFBRSxJQUFJLElBQUlreUIsRUFBRSxFQUFFQSxFQUFFN21CLEVBQUUwckMsTUFBTTcxQyxPQUFPZ3hCLElBQUksQ0FBQyxNQUFNbHBCLEVBQUVxQyxFQUFFMHJDLE1BQU03a0IsR0FBRyxHQUFHLElBQUlscEIsRUFBRXJELE1BQU0sU0FBU3FELEVBQUVnRCxNQUFNaEQsRUFBRXNqRSxJQUFJLENBQUMsTUFBTXA2QyxFQUFFZytDLEdBQUdsbkUsRUFBRXNqRSxJQUFJdjNELEdBQUcsR0FBRyxJQUFJbWQsRUFBRSxPQUFPem9CLEVBQUVtSixJQUFJdkgsRUFBRSxHQUFHLEVBQUU2bUIsRUFBRWx5QixJQUFJQSxFQUFFa3lCLEVBQUUsQ0FBQyxDQUFDLEdBQUdBLEVBQUVrNEMsUUFBUSxDQUFDLElBQUksSUFBSXIxRCxFQUFFLEVBQUVBLEVBQUUxSixFQUFFMHJDLE1BQU03MUMsT0FBTzZULElBQUssR0FBRyxJQUFJMUosRUFBRTByQyxNQUFNaGlDLEdBQUdwUCxLQUFLLE9BQU84RCxFQUFFbUosSUFBSXZILEVBQUUsR0FBRyxFQUFFMEosRUFBRW80RCxhQUFhckYsSUFBSS95RCxFQUFFbzRELGFBQWFsRCxHQUFHbDFELEVBQUVtMUQsTUFBTWg0QyxFQUFFbzRDLGNBQWNwNEMsRUFBRWs0QyxTQUFRLEVBQUdyMUQsRUFBRWkxRCxPQUFPRyxHQUFHcDFELEVBQUVtMUQsTUFBTWg0QyxFQUFFbzRDLGFBQWEsQ0FBQyxPQUFPN2dFLEVBQUVtSixJQUFJdkgsRUFBRXJMLEdBQUdBLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxRQUFRLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQU9rd0UsR0FBRzdrRSxFQUFFeW9CLFFBQVEvZSxHQUFHLEtBQUssRUFBRSxPQUFPMUosRUFBRXkvRCxVQUFVLEtBQUssRUFBRSxJQUFJOWhFLEVBQUUsRUFBRSxJQUFJLElBQUlTLEVBQUUsRUFBRUEsRUFBRTRCLEVBQUU0eEMsU0FBUy83QyxPQUFPdUksSUFBSSxDQUFDLE1BQU16SixFQUFFcUwsRUFBRTR4QyxTQUFTeHpDLEdBQUcsR0FBR21oQyxHQUFFNXFDLElBQUlrckMsR0FBRWxyQyxHQUFHLFNBQVMsTUFBTWt5QixFQUFFZytDLEdBQUdsd0UsRUFBRStVLEdBQUcsR0FBRyxJQUFJbWQsRUFBRSxPQUFPLEVBQUVBLEVBQUVscEIsSUFBSUEsRUFBRWtwQixFQUFFLENBQUMsT0FBT2xwQixFQUFFLENBQUMsTUFBTTJuRSxHQUFHLElBQUl6aUMsSUFBSSxDQUFDOXBDLEdBQUcya0UsR0FBR0MsR0FBR0MsS0FBSyxTQUFTMkgsR0FBR3ZsRSxFQUFFMEosR0FBRyxHQUFHLEtBQUsxSixFQUFFMUYsT0FBT2lsQyxHQUFFdi9CLEVBQUU0L0QsU0FBUzBGLEdBQUc3d0MsSUFBSXowQixFQUFFNC9ELFFBQVEsQ0FBQyxNQUFNeGhFLEVBQUU0QixFQUFFc3pDLFVBQVUsR0FBRyxHQUFHLElBQUlsMUMsRUFBRTlELEtBQUssT0FBT3VxRSxHQUFHem1FLEVBQUVzTCxHQUFHLEdBQUcsS0FBS3RMLEVBQUU5RCxLQUFLLE9BQU9pckUsR0FBR25uRSxFQUFFc0wsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVNzN0QsR0FBR2hsRSxFQUFFMEosR0FBRyxJQUFJdEwsRUFBRSxFQUFFLE1BQU16SixFQUFFc3dFLEdBQUdqbEUsR0FBRyxHQUFHckwsR0FBRyxLQUFLQSxFQUFFMkYsS0FBSyxDQUFDLE1BQU0ra0UsV0FBV3IvRCxHQUFHckwsRUFBRSxJQUFJLElBQUlBLEVBQUUsRUFBRUEsRUFBRXFMLEVBQUVuSyxPQUFPbEIsSUFBSSxDQUFDLE1BQU11VCxJQUFJMmUsRUFBRWh0QixNQUFNOEQsR0FBR3FDLEVBQUVyTCxHQUFHa0csRUFBRWdxRSxHQUFHaCtDLEVBQUVuZCxHQUFHLEdBQUcsSUFBSTdPLEVBQUUsT0FBT0EsRUFBRSxJQUFJMmtDLEVBQUUsR0FBRzNrQyxFQUFFdUQsSUFBSUEsRUFBRXZELEdBQUcya0MsRUFBRSxJQUFJN2hDLEVBQUVyRCxLQUFLdXFFLEdBQUdsbkUsRUFBRStMLEdBQUcsS0FBSy9MLEVBQUVyRCxLQUFLaXJFLEdBQUc1bkUsRUFBRStMLEdBQUcsRUFBRSxJQUFJODFCLEVBQUUsT0FBT0EsRUFBRUEsRUFBRXBoQyxJQUFJQSxFQUFFb2hDLEVBQUUsQ0FBQyxDQUFDLE9BQU9waEMsQ0FBQyxDQUFDLFNBQVM2bUUsR0FBR2psRSxHQUFHLE1BQU0wSixFQUFFMUosRUFBRW9rRSxZQUFZLEdBQUcsS0FBSzE2RCxFQUFFcFAsS0FBSyxPQUFPb1AsRUFBRWdpQyxLQUFLLENBQUMsU0FBU3E1QixHQUFHL2tFLEdBQUcsTUFBTTBKLEVBQUUxSixFQUFFZzNDLFVBQVUsT0FBT3R0QyxFQUFFdFAsU0FBU3NQLEVBQUUsU0FBSSxDQUFNLENBQW11RCxTQUFTODdELEdBQUd4bEUsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQXp2RCxTQUFZNEIsR0FBR3lsRSxTQUFTLzdELEVBQUUsR0FBR2c4RCxrQkFBa0J0bkUsR0FBRSxFQUFHdW5FLFlBQVloeEUsR0FBRSxFQUFHaXhFLGNBQWMvK0MsR0FBRSxFQUFHZy9DLGVBQWVsb0UsRUFBRSxHQUFHbW9FLG9CQUFvQmpyRSxFQUFFLENBQUUsRUFBQ3VxRSxlQUFlNWxDLEVBQUUsS0FBSzJrQyxtQkFBbUJ6a0MsRUFBRXhELEdBQUVnckIsZ0JBQWdCOThDLEVBQUU4eEIsR0FBRTZwQyxrQkFBa0IzNUMsRUFBRSxHQUFHcXZCLFFBQVFsaUQsRUFBRSxLQUFLeXNFLFFBQVFybUMsR0FBRSxFQUFHc21DLElBQUkvbUUsR0FBRSxFQUFHMi9ELE1BQU1wNEMsR0FBRSxFQUFHeS9DLFdBQVd6bEQsRUFBRSxHQUFHMGxELGdCQUFnQmxtQyxFQUFFSyxHQUFFOGxDLE9BQU9qM0QsR0FBRSxFQUFHazNELEtBQUtoOEQsR0FBRSxFQUFHb3RDLFFBQVFyaUQsRUFBRTBtRSxHQUFHNEcsT0FBTzdrRSxFQUFFaytELEdBQUd1SyxhQUFhL2xDLElBQUksTUFBTXYxQixFQUFFdEIsRUFBRWxVLFFBQVEsUUFBUSxJQUFJaWQsTUFBTSxtQkFBbUJuZCxFQUFFLENBQUNpeEUsU0FBU3Y3RCxHQUFHcTJCLEdBQUVsRSxHQUFFbnlCLEVBQUUsS0FBSzA2RCxrQkFBa0J0bkUsRUFBRXVuRSxZQUFZaHhFLEVBQUVpeEUsY0FBYy8rQyxFQUFFZy9DLGVBQWVsb0UsRUFBRW1vRSxvQkFBb0JqckUsRUFBRXVxRSxlQUFlNWxDLEVBQUUya0MsbUJBQW1CemtDLEVBQUV3bkIsZ0JBQWdCOThDLEVBQUUyN0Qsa0JBQWtCMzVDLEVBQUVxdkIsUUFBUWxpRCxFQUFFeXNFLFFBQVFybUMsRUFBRXNtQyxJQUFJL21FLEVBQUUyL0QsTUFBTXA0QyxFQUFFeS9DLFdBQVd6bEQsRUFBRTBsRCxnQkFBZ0JsbUMsRUFBRW1tQyxPQUFPajNELEVBQUVrM0QsS0FBS2g4RCxFQUFFb3RDLFFBQVFyaUQsRUFBRXN0RSxPQUFPN2tFLEVBQUV5b0UsYUFBYS9sQyxFQUFFZ2MsS0FBS3Y4QyxFQUFFd21FLFFBQVEsSUFBSWhpQyxJQUFJa2EsV0FBVyxJQUFJN2IsSUFBSThiLFdBQVcsSUFBSTliLElBQUk0akMsT0FBTyxHQUFHQyxRQUFRLEdBQUdyQixjQUFjLElBQUk3Z0MsSUFBSW1pQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsWUFBWXovRCxPQUFPd3lCLE9BQU8sTUFBTXdJLE9BQU8sQ0FBQzBrQyxLQUFLLEVBQUU1QixNQUFNLEVBQUU2QixLQUFLLEVBQUVDLE1BQU0sR0FBRzE2RCxPQUFPLEtBQUsyNkQsWUFBWWpuRSxFQUFFa25FLFdBQVcsRUFBRUMsU0FBUSxFQUFHeEksT0FBTzMrRCxHQUFHLE1BQU0wSixFQUFFcFUsRUFBRWt4RSxRQUFRM3hELElBQUk3VSxJQUFJLEVBQUUsT0FBTzFLLEVBQUVreEUsUUFBUWovRCxJQUFJdkgsRUFBRTBKLEVBQUUsR0FBRzFKLENBQUUsRUFBQzhoRSxhQUFhOWhFLEdBQUcsTUFBTTBKLEVBQUVwVSxFQUFFa3hFLFFBQVEzeEQsSUFBSTdVLEdBQUcsR0FBRzBKLEVBQUUsQ0FBQyxNQUFNdEwsRUFBRXNMLEVBQUUsRUFBRXRMLEVBQUU5SSxFQUFFa3hFLFFBQVFqL0QsSUFBSXZILEVBQUU1QixHQUFHOUksRUFBRWt4RSxRQUFRdmlELE9BQU9qa0IsRUFBRSxDQUFFLEVBQUNvbkUsYUFBYXBuRSxHQUFJLElBQUdva0QsR0FBRzl1RCxFQUFFcXBFLE9BQU8zK0QsTUFBTXFuRSxZQUFZcm5FLEdBQUcxSyxFQUFFZ1gsT0FBT3NsQyxTQUFTdDhDLEVBQUU0eEUsWUFBWTV4RSxFQUFFMnhFLFlBQVlqbkUsQ0FBRSxFQUFDc25FLFdBQVd0bkUsR0FBRyxNQUFNMEosRUFBRTFKLEVBQUUxSyxFQUFFZ1gsT0FBT3NsQyxTQUFTemIsUUFBUW4yQixHQUFHMUssRUFBRTJ4RSxZQUFZM3hFLEVBQUU0eEUsWUFBWSxFQUFFbG5FLEdBQUdBLElBQUkxSyxFQUFFMnhFLFlBQVkzeEUsRUFBRTR4RSxXQUFXeDlELElBQUlwVSxFQUFFNHhFLGFBQWE1eEUsRUFBRWl5RSxrQkFBa0JqeUUsRUFBRTJ4RSxZQUFZLEtBQUszeEUsRUFBRWl5RSxpQkFBaUJqeUUsRUFBRWdYLE9BQU9zbEMsU0FBU25SLE9BQU8vMkIsRUFBRSxFQUFHLEVBQUM2OUQsY0FBYyxPQUFPQyxlQUFleG5FLEdBQUksRUFBQ3luRSxrQkFBa0J6bkUsR0FBSSxFQUFDOGtFLE1BQU05a0UsR0FBR3UvQixHQUFFdi9CLEtBQUtBLEVBQUV1L0QsR0FBR3YvRCxJQUFJMUssRUFBRW14RSxPQUFPM25FLEtBQUtrQixHQUFHLE1BQU0wSixFQUFFNjFELEdBQUksWUFBV2pxRSxFQUFFbXhFLE9BQU81d0UsVUFBUyxFQUFHbUssRUFBRW04RCxJQUFJLEdBQUcsT0FBT3p5RCxFQUFFZytELFFBQVExbkUsRUFBRTBKLENBQUUsRUFBQ2lQLE1BQU0sQ0FBQzNZLEVBQUUwSixHQUFFLElBQUssU0FBUzFKLEVBQUUwSixFQUFFdEwsR0FBRSxHQUFJLE1BQU0sQ0FBQzlELEtBQUssR0FBR3l1QixNQUFNL29CLEVBQUVuRyxNQUFNNlAsRUFBRXd1RCxRQUFROTVELEVBQUUrOUQsSUFBSW1DLEdBQUksQ0FBcEUsQ0FBcUVocEUsRUFBRXN4RSxTQUFTNW1FLEVBQUUwSixJQUFJLE9BQU9wVSxDQUFDLENBQTBCcXlFLENBQUczbkUsRUFBRTBKLEdBQUdrK0QsR0FBRzVuRSxFQUFFNUIsR0FBR3NMLEVBQUVpOEQsYUFBYWpCLEdBQUcxa0UsRUFBRTVCLEdBQUdzTCxFQUFFdThELEtBQUssU0FBU2ptRSxFQUFFMEosR0FBRyxNQUFNaTFELE9BQU92Z0UsR0FBR3NMLEdBQUdrb0MsU0FBU2o5QyxHQUFHcUwsRUFBRSxHQUFHLElBQUlyTCxFQUFFa0IsT0FBTyxDQUFDLE1BQU11SSxFQUFFekosRUFBRSxHQUFHLEdBQUdpd0UsR0FBRzVrRSxFQUFFNUIsSUFBSUEsRUFBRWdtRSxZQUFZLENBQUMsTUFBTXp2RSxFQUFFeUosRUFBRWdtRSxZQUFZLEtBQUt6dkUsRUFBRTJGLE1BQU11bkUsR0FBR2x0RSxFQUFFK1UsR0FBRzFKLEVBQUVva0UsWUFBWXp2RSxDQUFDLE1BQU1xTCxFQUFFb2tFLFlBQVlobUUsQ0FBQyxNQUFNLEdBQUd6SixFQUFFa0IsT0FBTyxFQUFFLENBQUMsSUFBSWxCLEVBQUUsR0FBR3FMLEVBQUVva0UsWUFBWTFGLEdBQUdoMUQsRUFBRXRMLEVBQUVnK0QsU0FBSSxFQUFPcDhELEVBQUU0eEMsU0FBU2o5QyxFQUFFLFFBQUcsT0FBTyxHQUFPLE9BQUcsR0FBTyxFQUFHLENBQUMsQ0FBalMsQ0FBbVNxTCxFQUFFNUIsR0FBRzRCLEVBQUV3bUUsUUFBUSxJQUFJcG9FLEVBQUVvb0UsUUFBUTFtQyxRQUFROS9CLEVBQUUwK0MsV0FBVyxJQUFJdGdELEVBQUVzZ0QsWUFBWTErQyxFQUFFMitDLFdBQVcsSUFBSXZnRCxFQUFFdWdELFlBQVkzK0MsRUFBRTBtRSxRQUFRdG9FLEVBQUVzb0UsUUFBUTFtRSxFQUFFeW1FLE9BQU9yb0UsRUFBRXFvRSxPQUFPem1FLEVBQUUybUUsTUFBTXZvRSxFQUFFdW9FLE1BQU0zbUUsRUFBRTRtRSxPQUFPeG9FLEVBQUV3b0UsTUFBTSxDQUFDLFNBQVNnQixHQUFHNW5FLEVBQUUwSixHQUFHQSxFQUFFdTlELFlBQVlqbkUsRUFBRSxNQUFNNmxFLGVBQWV6bkUsR0FBR3NMLEVBQUUvVSxFQUFFLEdBQUcsSUFBSSxJQUFJZ0osRUFBRSxFQUFFQSxFQUFFUyxFQUFFdkksT0FBTzhILElBQUksQ0FBQyxNQUFNa3BCLEVBQUV6b0IsRUFBRVQsR0FBR3FDLEVBQUUwSixHQUFHLEdBQUdtZCxJQUFJeVksR0FBRXpZLEdBQUdseUIsRUFBRW1LLFFBQVErbkIsR0FBR2x5QixFQUFFbUssS0FBSytuQixLQUFLbmQsRUFBRXU5RCxZQUFZLE9BQU9qbkUsRUFBRTBKLEVBQUV1OUQsV0FBVyxDQUFDLE9BQU9qbkUsRUFBRTFGLE1BQU0sS0FBSyxFQUFFb1AsRUFBRXU4RCxLQUFLdjhELEVBQUVpMUQsT0FBTzdCLElBQUksTUFBTSxLQUFLLEVBQUVwekQsRUFBRXU4RCxLQUFLdjhELEVBQUVpMUQsT0FBT25CLElBQUksTUFBTSxLQUFLLEVBQUUsSUFBSSxJQUFJcC9ELEVBQUUsRUFBRUEsRUFBRTRCLEVBQUVtbEUsU0FBU3R2RSxPQUFPdUksSUFBSXdwRSxHQUFHNW5FLEVBQUVtbEUsU0FBUy9tRSxHQUFHc0wsR0FBRyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxTQUFTMUosRUFBRTBKLEdBQUcsSUFBSXRMLEVBQUUsRUFBRSxNQUFNekosRUFBRSxLQUFLeUosR0FBRyxFQUFFLEtBQUtBLEVBQUU0QixFQUFFNHhDLFNBQVMvN0MsT0FBT3VJLElBQUksQ0FBQyxNQUFNeW9CLEVBQUU3bUIsRUFBRTR4QyxTQUFTeHpDLEdBQUdtaEMsR0FBRTFZLEtBQUtuZCxFQUFFNEMsT0FBT3RNLEVBQUUwSixFQUFFdzlELFdBQVc5b0UsRUFBRXNMLEVBQUU2OUQsY0FBYzV5RSxFQUFFaXpFLEdBQUcvZ0QsRUFBRW5kLEdBQUcsQ0FBQyxDQUF4SixDQUEwSjFKLEVBQUUwSixHQUFHQSxFQUFFdTlELFlBQVlqbkUsRUFBRSxJQUFJNm1CLEVBQUVseUIsRUFBRWtCLE9BQU8sS0FBS2d4QixLQUFLbHlCLEVBQUVreUIsSUFBSSxDQUFDLFNBQVNnaEQsR0FBRzduRSxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRW1oQyxHQUFFdi9CLEdBQUcwSixHQUFHQSxJQUFJMUosRUFBRTBKLEdBQUcxSixFQUFFekssS0FBS21VLEdBQUcsTUFBTSxDQUFDMUosRUFBRXJMLEtBQUssR0FBRyxJQUFJcUwsRUFBRTFGLEtBQUssQ0FBQyxNQUFNb3hDLE1BQU03a0IsR0FBRzdtQixFQUFFLEdBQUcsSUFBSUEsRUFBRXVoRSxTQUFTMTZDLEVBQUVoQyxLQUFLdzhDLElBQUksT0FBTyxNQUFNMWpFLEVBQUUsR0FBRyxJQUFJLElBQUk5QyxFQUFFLEVBQUVBLEVBQUVnc0IsRUFBRWh4QixPQUFPZ0YsSUFBSSxDQUFDLE1BQU0ya0MsRUFBRTNZLEVBQUVoc0IsR0FBRyxHQUFHLElBQUkya0MsRUFBRWxsQyxNQUFNOEQsRUFBRW9oQyxFQUFFNytCLE1BQU0sQ0FBQ2ttQixFQUFFNFosT0FBTzVsQyxFQUFFLEdBQUdBLElBQUksTUFBTXVELEVBQUVzTCxFQUFFMUosRUFBRXcvQixFQUFFN3FDLEdBQUd5SixHQUFHVCxFQUFFbUIsS0FBS1YsRUFBRSxDQUFDLENBQUMsT0FBT1QsQ0FBQyxFQUFFLENBQUMsTUFBTW1xRSxHQUFHOW5FLEdBQUksR0FBRW9rRCxHQUFHcGtELFFBQVFva0QsR0FBR3BrRCxLQUEwZ0UsU0FBUytuRSxHQUFHL25FLEVBQUUwSixHQUFHaTFELE9BQU92Z0UsRUFBRVUsS0FBS25LLEVBQUVvckUsUUFBUWw1QyxFQUFFdy9DLEtBQUsxb0UsSUFBSSxNQUFNOUMsRUFBRXVELEVBQUUsY0FBY3NMLEVBQUV1ekQsR0FBR0UsSUFBSSxJQUFJLElBQUkzOUIsRUFBRSxFQUFFQSxFQUFFeC9CLEVBQUVuSyxPQUFPMnBDLElBQUksQ0FBQyxJQUFJcGhDLEVBQUU0QixFQUFFdy9CLEdBQUcsTUFBTUUsRUFBRXRoQyxFQUFFb2tELFNBQVMsVUFBVTlpQixJQUFJdGhDLEVBQUVBLEVBQUU1QixNQUFNLEdBQUcsSUFBSTdILEVBQUcsU0FBUWl0RSxHQUFHeGpFLEVBQUVzTCxRQUFRN08sS0FBSzRJLEtBQUs2RSxVQUFVbEssS0FBS3NoQyxFQUFFLFNBQVMsTUFBTS9oQyxFQUFFLElBQUksTUFBTTZoQyxFQUFFeC9CLEVBQUVuSyxPQUFPLEdBQUdneEIsR0FBRyxDQUFDLENBQUMsU0FBU21oRCxHQUFHaG9FLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNEIsRUFBRW5LLE9BQU8sSUFBRyxFQUFHNlQsRUFBRTVLLEtBQUssS0FBS1YsR0FBR3NMLEVBQUV1K0QsU0FBU0MsR0FBR2xvRSxFQUFFMEosRUFBRXRMLEdBQUdBLEdBQUdzTCxFQUFFeStELFdBQVd6K0QsRUFBRTVLLEtBQUssSUFBSSxDQUFDLFNBQVNvcEUsR0FBR2xvRSxFQUFFMEosRUFBRXRMLEdBQUUsRUFBR3pKLEdBQUUsR0FBSSxNQUFNbUssS0FBSytuQixFQUFFazVDLFFBQVFwaUUsR0FBRytMLEVBQUUsSUFBSSxJQUFJN08sRUFBRSxFQUFFQSxFQUFFbUYsRUFBRW5LLE9BQU9nRixJQUFJLENBQUMsTUFBTTJrQyxFQUFFeC9CLEVBQUVuRixHQUFHMGtDLEdBQUVDLEdBQUczWSxFQUFFMlksR0FBR0YsR0FBRUUsR0FBR3dvQyxHQUFHeG9DLEVBQUU5MUIsR0FBRzArRCxHQUFHNW9DLEVBQUU5MUIsR0FBRzdPLEVBQUVtRixFQUFFbkssT0FBTyxJQUFJdUksR0FBR3pKLEdBQUdreUIsRUFBRSxLQUFLbHBCLEtBQUtoSixHQUFHa3lCLEVBQUUsTUFBTSxDQUFDLENBQUMsU0FBU3VoRCxHQUFHcG9FLEVBQUUwSixHQUFHLEdBQUc2MUIsR0FBRXYvQixHQUFHMEosRUFBRTVLLEtBQUtrQixRQUFRLEdBQUc2L0IsR0FBRTcvQixHQUFHMEosRUFBRTVLLEtBQUs0SyxFQUFFaTFELE9BQU8zK0QsU0FBUyxPQUFPQSxFQUFFMUYsTUFBTSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc4dEUsR0FBR3BvRSxFQUFFb2tFLFlBQVkxNkQsR0FBRyxNQUFNLEtBQUssR0FBRyxTQUFTMUosRUFBRTBKLEdBQUdBLEVBQUU1SyxLQUFLMkUsS0FBSzZFLFVBQVV0SSxFQUFFeW9CLFNBQVN6b0IsRUFBRSxDQUFqRCxDQUFtREEsRUFBRTBKLEdBQUcsTUFBTSxLQUFLLEVBQUUyK0QsR0FBR3JvRSxFQUFFMEosR0FBRyxNQUFNLEtBQUssR0FBRyxTQUFTMUosRUFBRTBKLEdBQUcsTUFBTTVLLEtBQUtWLEVBQUV1Z0UsT0FBT2hxRSxFQUFFMnpFLEtBQUt6aEQsR0FBR25kLEVBQUVtZCxHQUFHem9CLEVBQUUsaUJBQWlCQSxFQUFHLEdBQUV6SixFQUFFNm9FLFFBQVE0SyxHQUFHcG9FLEVBQUV5b0IsUUFBUS9lLEdBQUd0TCxFQUFFLElBQUksQ0FBekcsQ0FBMkc0QixFQUFFMEosR0FBRyxNQUFNLEtBQUssRUFBRTYrRCxHQUFHdm9FLEVBQUUwSixHQUFHLE1BQU0sS0FBSyxHQUFHLFNBQVMxSixFQUFFMEosR0FBRyxNQUFNNUssS0FBS1YsRUFBRXVnRSxPQUFPaHFFLEVBQUUyekUsS0FBS3poRCxHQUFHbmQsRUFBRW1kLEdBQUd6b0IsRUFBRSxpQkFBaUJBLEVBQUcsR0FBRXpKLEVBQUVtb0UsT0FBT3I1RCxLQUFLNkUsVUFBVXRJLEVBQUV5b0IsWUFBWXpvQixFQUFFLENBQWpILENBQW1IQSxFQUFFMEosR0FBRyxNQUFNLEtBQUssSUFBSSxTQUFTMUosRUFBRTBKLEdBQUcsTUFBTTVLLEtBQUtWLEVBQUV1Z0UsT0FBT2hxRSxFQUFFMnpFLEtBQUt6aEQsR0FBR25kLEdBQUdxbEQsSUFBSXB4RCxFQUFFK3RDLE1BQU03d0MsRUFBRSsyQyxTQUFTcFMsRUFBRXdYLFVBQVV0WCxFQUFFaWtCLGFBQWF2NUMsRUFBRXUwQyxXQUFXdnlCLEVBQUUyeUMsUUFBUXhsRSxFQUFFeWxFLGdCQUFnQnIvQixFQUFFcy9CLFlBQVkvL0QsR0FBR2MsRUFBRW9zQixHQUFHaHVCLEVBQUV6SixFQUFFMG9FLElBQUksS0FBSzlqRSxHQUFHNkUsRUFBRyxJQUFHekosRUFBRThuRSxPQUFPOThCLEVBQUUsT0FBTyxTQUFTOVksR0FBR3pvQixFQUFFLGlCQUF1REEsRUFBRXpKLEVBQWhDNEUsRUFBRXFsRSxHQUFHbDFELEVBQUVtMUQsTUFBTTMvRCxHQUFHNC9ELEdBQUdwMUQsRUFBRW0xRCxNQUFNMy9ELElBQVUsSUFBSWMsR0FBR2tvRSxHQUFHLFNBQVNsb0UsR0FBRyxJQUFJMEosRUFBRTFKLEVBQUVuSyxPQUFPLEtBQUs2VCxLQUFLLE1BQU0xSixFQUFFMEosS0FBSyxPQUFPMUosRUFBRXhELE1BQU0sRUFBRWtOLEVBQUUsR0FBR3BRLEtBQUswRyxHQUFHQSxHQUFHLFNBQW5GLENBQTZGLENBQUNyQyxFQUFFOUMsRUFBRTJrQyxFQUFFRSxFQUFFdDFCLElBQUlWLEdBQUd0TCxFQUFFLEtBQUs3RSxHQUFHNkUsRUFBRSxLQUFLZ3VCLElBQUlodUIsRUFBRSxNQUFNZ3FFLEdBQUdoOEMsRUFBRTFpQixHQUFHdEwsRUFBRSxLQUFLLENBQXZiLENBQXliNEIsRUFBRTBKLEdBQUcsTUFBTSxLQUFLLElBQUksU0FBUzFKLEVBQUUwSixHQUFHLE1BQU01SyxLQUFLVixFQUFFdWdFLE9BQU9ocUUsRUFBRTJ6RSxLQUFLemhELEdBQUduZCxFQUFFL0wsRUFBRTRoQyxHQUFFdi9CLEVBQUU0L0QsUUFBUTUvRCxFQUFFNC9ELE9BQU9qckUsRUFBRXFMLEVBQUU0L0QsUUFBUS80QyxHQUFHem9CLEVBQUUsaUJBQWlCQSxFQUFFVCxFQUFFLElBQUlxQyxHQUFHa29FLEdBQUdsb0UsRUFBRXN6QyxVQUFVNXBDLEdBQUd0TCxFQUFFLElBQUksQ0FBMUksQ0FBNEk0QixFQUFFMEosR0FBRyxNQUFNLEtBQUssSUFBSSxTQUFTMUosRUFBRTBKLEdBQUcsTUFBTTVLLEtBQUtWLEVBQUU2cEUsT0FBT3R6RSxFQUFFd3pFLFNBQVN0aEQsRUFBRWs1QyxRQUFRcGlFLEdBQUcrTCxHQUFHMjFELFdBQVd4a0UsR0FBR21GLEVBQUUsSUFBSW5GLEVBQUVoRixPQUFPLFlBQVl1SSxFQUFFLEtBQUs0QixHQUFHLE1BQU13L0IsRUFBRTNrQyxFQUFFaEYsT0FBTyxJQUFHLEVBQUd1SSxFQUFFb2hDLEVBQUUsSUFBSSxNQUFNQSxHQUFHN3FDLElBQUksSUFBSSxJQUFJK3FDLEVBQUUsRUFBRUEsRUFBRTdrQyxFQUFFaEYsT0FBTzZwQyxJQUFJLENBQUMsTUFBTXgzQixJQUFJbEksRUFBRW5HLE1BQU1sRixHQUFHa0csRUFBRTZrQyxHQUFHOG9DLEdBQUd4b0UsRUFBRTBKLEdBQUd0TCxFQUFFLE1BQU1ncUUsR0FBR3p6RSxFQUFFK1UsR0FBR2cyQixFQUFFN2tDLEVBQUVoRixPQUFPLElBQUl1SSxFQUFFLEtBQUtULElBQUksQ0FBQzZoQyxHQUFHM1ksSUFBSXpvQixFQUFFb2hDLEVBQUUsSUFBSSxLQUFLLENBQXpSLENBQTJSeC9CLEVBQUUwSixHQUFHLE1BQU0sS0FBSyxJQUFJLFNBQVMxSixFQUFFMEosR0FBR3MrRCxHQUFHaG9FLEVBQUVtL0QsU0FBU3oxRCxFQUFFLENBQTlCLENBQWdDMUosRUFBRTBKLEdBQUcsTUFBTSxLQUFLLElBQUksU0FBUzFKLEVBQUUwSixHQUFHLE1BQU01SyxLQUFLVixFQUFFNnBFLE9BQU90ekUsRUFBRXd6RSxTQUFTdGhELEdBQUduZCxHQUFHakssT0FBTzlCLEVBQUVtaUUsUUFBUWpsRSxFQUFFc0osS0FBS3E3QixFQUFFdWdDLFFBQVFyZ0MsRUFBRXNnQyxPQUFPNTFELEdBQUdwSyxFQUFFb0ssR0FBR2hNLEVBQUcsSUFBR2dtRCxHQUFHWSxRQUFRNW1ELEVBQUUsSUFBSTRCLEdBQUdzL0IsR0FBRTNoQyxHQUFHdXFFLEdBQUd2cUUsRUFBRStMLEdBQUcvTCxHQUFHeXFFLEdBQUd6cUUsRUFBRStMLEdBQUd0TCxFQUFFLFVBQVVzaEMsR0FBR0YsS0FBS3BoQyxFQUFFLEtBQUt6SixLQUFLa0csR0FBRzZrQyxHQUFHdGhDLEVBQUUsV0FBV2toQyxHQUFFemtDLEdBQUdtdEUsR0FBR250RSxFQUFFNk8sR0FBRzArRCxHQUFHdnRFLEVBQUU2TyxJQUFJODFCLEdBQUc0b0MsR0FBRzVvQyxFQUFFOTFCLElBQUlnMkIsR0FBR0YsS0FBSzNZLElBQUl6b0IsRUFBRSxNQUFNZ00sR0FBR2hNLEVBQUUsSUFBSSxDQUExUSxDQUE0UTRCLEVBQUUwSixHQUFHLE1BQU0sS0FBSyxJQUFJLFNBQVMxSixFQUFFMEosR0FBRyxNQUFNblUsS0FBSzZJLEVBQUU4aEUsV0FBV3ZyRSxFQUFFd3JFLFVBQVV0NUMsRUFBRWs1QyxRQUFRcGlFLEdBQUdxQyxHQUFHbEIsS0FBS2pFLEVBQUVvdEUsT0FBT3pvQyxFQUFFMm9DLFNBQVN6b0MsRUFBRXFnQyxRQUFRMzFELEdBQUdWLEVBQUUsR0FBRyxJQUFJdEwsRUFBRTlELEtBQUssQ0FBQyxNQUFNMEYsR0FBR3dnRSxHQUFHcGlFLEVBQUVxcUIsU0FBU3pvQixHQUFHbkYsRUFBRSxLQUFLd3RFLEdBQUdqcUUsRUFBRXNMLEdBQUcxSixHQUFHbkYsRUFBRSxJQUFJLE1BQU1BLEVBQUUsS0FBS3V0RSxHQUFHaHFFLEVBQUVzTCxHQUFHN08sRUFBRSxLQUFLOEMsR0FBRzZoQyxJQUFJOTFCLEVBQUUrK0QsY0FBYzlxRSxHQUFHOUMsRUFBRSxLQUFLQSxFQUFFLE1BQU11dEUsR0FBR3p6RSxFQUFFK1UsR0FBR0EsRUFBRSsrRCxjQUFjOXFFLEdBQUd5TSxJQUFJek0sR0FBRzlDLEVBQUUsS0FBS0EsRUFBRSxNQUFNLE1BQU11eEIsRUFBRSxLQUFLdkYsRUFBRXZzQixLQUFLOHhCLEdBQUcxaUIsRUFBRSsrRCxjQUFjTCxHQUFHdmhELEVBQUVuZCxHQUFHMGlCLEdBQUcxaUIsRUFBRSsrRCxjQUFjOXFFLEdBQUcraEMsR0FBRSxFQUFHLENBQTNXLENBQTZXMS9CLEVBQUUwSixHQUFHLE1BQU0sS0FBSyxJQUFJLFNBQVMxSixFQUFFMEosR0FBRyxNQUFNNUssS0FBS1YsRUFBRXVnRSxPQUFPaHFFLEVBQUVzekUsT0FBT3BoRCxFQUFFc2hELFNBQVN4cUUsRUFBRW9pRSxRQUFRbGxFLEdBQUc2TyxFQUFFdEwsRUFBRyxVQUFTNEIsRUFBRStvQixlQUFlL29CLEVBQUVrNEQsVUFBVXJ4QyxJQUFJem9CLEVBQUcsR0FBRXpKLEVBQUVxcEUsWUFBWW5qRSxLQUFLdUQsRUFBRyxVQUFTNEIsRUFBRStvQixhQUFhcS9DLEdBQUdwb0UsRUFBRW5HLE1BQU02UCxHQUFHMUosRUFBRWs0RCxVQUFVOTVELEVBQUUsS0FBS3ZELElBQUl1RCxFQUFHLEdBQUV6SixFQUFFcXBFLFdBQVduakUsSUFBSXVELEVBQUcsVUFBUzRCLEVBQUUrb0IsVUFBVXByQixLQUFLUyxFQUFFLElBQUksQ0FBblEsQ0FBcVE0QixFQUFFMEosR0FBRyxNQUFNLEtBQUssR0FBR3crRCxHQUFHbG9FLEVBQUVtRSxLQUFLdUYsR0FBRSxHQUFHLEdBQUksQ0FBQyxTQUFTMitELEdBQUdyb0UsRUFBRTBKLEdBQUcsTUFBTStlLFFBQVFycUIsRUFBRW9oRSxTQUFTN3FFLEdBQUdxTCxFQUFFMEosRUFBRTVLLEtBQUtuSyxFQUFFOE8sS0FBSzZFLFVBQVVsSyxHQUFHQSxFQUFFNEIsRUFBRSxDQUFDLFNBQVN1b0UsR0FBR3ZvRSxFQUFFMEosR0FBRyxJQUFJLElBQUl0TCxFQUFFLEVBQUVBLEVBQUU0QixFQUFFNHhDLFNBQVMvN0MsT0FBT3VJLElBQUksQ0FBQyxNQUFNekosRUFBRXFMLEVBQUU0eEMsU0FBU3h6QyxHQUFHbWhDLEdBQUU1cUMsR0FBRytVLEVBQUU1SyxLQUFLbkssR0FBR3l6RSxHQUFHenpFLEVBQUUrVSxFQUFFLENBQUMsQ0FBQyxTQUFTOCtELEdBQUd4b0UsRUFBRTBKLEdBQUcsTUFBTTVLLEtBQUtWLEdBQUdzTCxFQUFLLElBQUkxSixFQUFFMUYsTUFBSzhELEVBQUUsS0FBS21xRSxHQUFHdm9FLEVBQUUwSixHQUFHdEwsRUFBRSxNQUFhNEIsRUFBRXcvRCxTQUFVcGhFLEVBQUVvaUUsR0FBR3hnRSxFQUFFeW9CLFNBQVN6b0IsRUFBRXlvQixRQUFRaGxCLEtBQUs2RSxVQUFVdEksRUFBRXlvQixTQUFTem9CLEdBQVE1QixFQUFHLElBQUc0QixFQUFFeW9CLFdBQVd6b0IsRUFBRSxDQUFDLE1BQU0wb0UsR0FBR2IsR0FBRyx1QkFBdUIsQ0FBQzduRSxFQUFFMEosRUFBRXRMLElBQUksU0FBUzRCLEVBQUUwSixFQUFFdEwsRUFBRXpKLEdBQWlHLEdBQXpGLFNBQVMrVSxFQUFFL0ksTUFBTStJLEVBQUV1M0QsS0FBS3YzRCxFQUFFdTNELElBQUl4NEMsUUFBUWpqQixTQUFTa0UsRUFBRXUzRCxJQUFJMUIsR0FBRyxRQUFPLEVBQUc3MUQsRUFBRXUzRCxJQUFJdjNELEVBQUV1M0QsSUFBSTlFLElBQUluOEQsRUFBRW04RCxNQUFRLE9BQU96eUQsRUFBRS9JLEtBQUssQ0FBQyxNQUFNa21CLEVBQUU4aEQsR0FBRzNvRSxFQUFFMEosR0FBRy9MLEVBQUUsQ0FBQ3JELEtBQUssRUFBRTZoRSxJQUFJbjhELEVBQUVtOEQsSUFBSWdKLFNBQVMsQ0FBQ3QrQyxJQUFJLEdBQUd6b0IsRUFBRWlwRSxZQUFZMXBFLEdBQUdoSixFQUFFLE9BQU9BLEVBQUVnSixFQUFFa3BCLEdBQUUsRUFBRyxLQUFLLENBQUMsTUFBTUEsRUFBRXpvQixFQUFFa08sT0FBT3NsQyxTQUFTLElBQUlqMEMsRUFBRWtwQixFQUFFc1AsUUFBUW4yQixHQUFHLEtBQUtyQyxPQUFPLEdBQUcsQ0FBQyxNQUFNOUMsRUFBRWdzQixFQUFFbHBCLEdBQUcsSUFBSTlDLEdBQUcsSUFBSUEsRUFBRVAsTUFBTU8sRUFBRTR0QixRQUFRampCLE9BQU8zUCxPQUFPLENBQUMsR0FBR2dGLEdBQUcsSUFBSUEsRUFBRVAsS0FBSyxDQUFDOEQsRUFBRWtwRSxhQUFhLE1BQU16Z0QsRUFBRThoRCxHQUFHM29FLEVBQUUwSixHQUFHN08sRUFBRXNxRSxTQUFTcm1FLEtBQUsrbkIsR0FBRyxNQUFNbHBCLEVBQUVoSixHQUFHQSxFQUFFa0csRUFBRWdzQixHQUFFLEdBQUkrZ0QsR0FBRy9nRCxFQUFFem9CLEdBQUdULEdBQUdBLElBQUlTLEVBQUU2b0UsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDN29FLEVBQUVrcEUsV0FBV3pzRSxFQUFFLENBQUMsQ0FBQyxDQUF4ZSxDQUEwZW1GLEVBQUUwSixFQUFFdEwsR0FBRyxDQUFDNEIsRUFBRTBKLEVBQUUvVSxLQUFLLE1BQU1reUIsRUFBRXpvQixFQUFFa08sT0FBT3NsQyxTQUFTLElBQUlqMEMsRUFBRWtwQixFQUFFc1AsUUFBUW4yQixHQUFHbkYsRUFBRSxFQUFFLEtBQUs4QyxNQUFNLEdBQUcsQ0FBQyxNQUFNcUMsRUFBRTZtQixFQUFFbHBCLEdBQUdxQyxHQUFHLElBQUlBLEVBQUUxRixPQUFPTyxHQUFHbUYsRUFBRW1sRSxTQUFTdHZFLE9BQU8sQ0FBQyxNQUFNLEtBQUssR0FBR2xCLEVBQUVxTCxFQUFFb2tFLFlBQVl3RSxHQUFHbC9ELEVBQUU3TyxFQUFFdUQsT0FBTyxDQUFDLE1BQU16SixFQUFFLFNBQVNxTCxHQUFHLE9BQU8sR0FBRyxLQUFLQSxFQUFFMUYsS0FBSyxDQUFDLEdBQUcsS0FBSzBGLEVBQUVtZ0UsVUFBVTdsRSxLQUFLLE9BQU8wRixFQUFFQSxFQUFFQSxFQUFFbWdFLFNBQVMsTUFBTSxLQUFLbmdFLEVBQUUxRixPQUFPMEYsRUFBRUEsRUFBRW5HLE1BQU0sQ0FBaEgsQ0FBa0htRyxFQUFFb2tFLGFBQWF6dkUsRUFBRXdyRSxVQUFVeUksR0FBR2wvRCxFQUFFN08sRUFBRW1GLEVBQUVtbEUsU0FBU3R2RSxPQUFPLEVBQUV1SSxFQUFFLEVBQUUsTUFBTSxTQUFTdXFFLEdBQUczb0UsRUFBRTBKLEdBQUcsTUFBTXRMLEVBQUUsSUFBSTRCLEVBQUV1aEUsUUFBUSxNQUFNLENBQUNqbkUsS0FBSyxHQUFHNmhFLElBQUluOEQsRUFBRW04RCxJQUFJME0sVUFBVSxTQUFTbi9ELEVBQUUvSSxVQUFLLEVBQU8rSSxFQUFFdTNELElBQUlydkIsU0FBU3h6QyxJQUFJNGlFLEdBQUdoaEUsRUFBRSxPQUFPQSxFQUFFNHhDLFNBQVMsQ0FBQzV4QyxHQUFHOG9FLFFBQVE1SCxHQUFHbGhFLEVBQUUsT0FBTytvRSxhQUFhM3FFLEVBQUUsQ0FBQyxTQUFTd3FFLEdBQUc1b0UsRUFBRTBKLEVBQUV0TCxHQUFHLE9BQU80QixFQUFFNm9FLFVBQVU1SSxHQUFHamdFLEVBQUU2b0UsVUFBVUcsR0FBR2hwRSxFQUFFMEosRUFBRXRMLEdBQUd1aEUsR0FBR3ZoRSxFQUFFdWdFLE9BQU83QixJQUFJLENBQUMsS0FBSyxVQUFVa00sR0FBR2hwRSxFQUFFMEosRUFBRXRMLEVBQUUsQ0FBQyxTQUFTNHFFLEdBQUdocEUsRUFBRTBKLEVBQUV0TCxHQUFHLE1BQU11Z0UsT0FBT2hxRSxHQUFHeUosRUFBRXlvQixFQUFFeTRDLEdBQUcsTUFBTUMsR0FBSSxHQUFFNzFELEtBQUksRUFBRzQwRCxHQUFHLEtBQUsxc0IsU0FBU2owQyxHQUFHcUMsRUFBRW5GLEVBQUU4QyxFQUFFLEdBQUcsR0FBRyxJQUFJQSxFQUFFOUgsUUFBUSxJQUFJZ0YsRUFBRVAsS0FBSyxDQUFDLEdBQUcsSUFBSXFELEVBQUU5SCxRQUFRLEtBQUtnRixFQUFFUCxLQUFLLENBQUMsTUFBTTBGLEVBQUVuRixFQUFFdXBFLFlBQVksT0FBT3pDLEdBQUczaEUsRUFBRTZtQixFQUFFem9CLEdBQUc0QixDQUFDLENBQUMsQ0FBQyxJQUFJMEosRUFBRSxHQUFHLE9BQU9nMUQsR0FBR3RnRSxFQUFFekosRUFBRXluRSxJQUFJZ0QsR0FBRyxDQUFDdjRDLElBQUlscEIsRUFBRStMLEVBQUUsUUFBRyxPQUFPLEdBQU8sR0FBRyxHQUFHLEVBQUcxSixFQUFFbThELElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTW44RCxFQUFFbkYsRUFBRXVwRSxZQUFZMTZELEVBQUUsTUFBTTgxQixFQUFFeC9CLEdBQUcxRixNQUFNa2xDLEVBQUVvZ0MsU0FBU3ZCLEdBQUc3K0IsRUFBRThULFVBQVUsR0FBR3dzQixRQUFRdGdDLEVBQUUsT0FBTyxLQUFLOTFCLEVBQUVwUCxNQUFNdW5FLEdBQUduNEQsRUFBRXRMLEdBQUd1akUsR0FBR2o0RCxFQUFFbWQsRUFBRXpvQixHQUFHNEIsQ0FBQyxDQUFDLElBQUl3L0IsQ0FBQyxDQUFDLE1BQU15cEMsR0FBR3BCLEdBQUcsT0FBTyxDQUFDN25FLEVBQUUwSixFQUFFdEwsS0FBSyxNQUFNdWdFLE9BQU9ocUUsRUFBRW10RSxhQUFhajdDLEdBQUd6b0IsRUFBRSxPQUFPLFNBQVM0QixFQUFFMEosRUFBRXRMLEVBQUV6SixHQUFHLElBQUkrVSxFQUFFdTNELElBQUksT0FBTyxNQUFNcDZDLEVBQUVxaUQsR0FBR3gvRCxFQUFFdTNELEtBQUssSUFBSXA2QyxFQUFFLE9BQU8sTUFBTXViLE9BQU96a0MsR0FBR1MsR0FBR29QLE9BQU8zUyxFQUFFaEIsTUFBTTJsQyxFQUFFdDNCLElBQUl3M0IsRUFBRTNXLE1BQU0zZSxHQUFHeWMsRUFBRXVGLEVBQUUsQ0FBQzl4QixLQUFLLEdBQUc2aEUsSUFBSXp5RCxFQUFFeXlELElBQUkzdUQsT0FBTzNTLEVBQUVzdUUsV0FBVzNwQyxFQUFFNHBDLFNBQVMxcEMsRUFBRTJwQyxpQkFBaUJqL0QsRUFBRWsvRCxZQUFZemlELEVBQUUrcUIsU0FBUzB2QixHQUFHdGhFLEdBQUdBLEVBQUU0eEMsU0FBUyxDQUFDNXhDLElBQUk1QixFQUFFaXBFLFlBQVlqN0MsR0FBR3p1QixFQUFFbXBFLE9BQU8sTUFBTXZ0RSxFQUFFNUUsR0FBR0EsRUFBRXkzQixHQUFHLE1BQU0sS0FBS3p1QixFQUFFbXBFLE9BQU92dEUsR0FBR0EsR0FBRyxDQUFFLENBQW5ULENBQW9UeUcsRUFBRTBKLEVBQUV0TCxHQUFHc0wsSUFBSSxNQUFNL0wsRUFBRWdpRSxHQUFHaHJFLEVBQUUyb0UsSUFBSSxDQUFDNXpELEVBQUU4RCxTQUFTM1MsRUFBRXltRSxHQUFHdGhFLEdBQUd3L0IsRUFBRXdoQyxHQUFHaGhFLEVBQUUsUUFBUTAvQixFQUFFd2hDLEdBQUdsaEUsRUFBRSxPQUFPb0ssRUFBRXMxQixJQUFJLElBQUlBLEVBQUVwbEMsS0FBS2lsRSxHQUFHNy9CLEVBQUU3bEMsTUFBTTR1QixTQUFRLEdBQUlpWCxFQUFFdWhDLEtBQUs3MEMsRUFBRXNULEVBQUU0L0IsR0FBRyxNQUFNbDFELEdBQUcsS0FBSzdRLEVBQUUsSUFBSW1RLEVBQUU4RCxPQUFPbFQsTUFBTW9QLEVBQUU4RCxPQUFPaXlELFVBQVUsRUFBRTkvQixFQUFFcG1DLEVBQUUsR0FBR21tQyxFQUFFLElBQUksSUFBSSxPQUFPaDJCLEVBQUUwNkQsWUFBWTFGLEdBQUd0Z0UsRUFBRXpKLEVBQUV5bkUsU0FBSSxFQUFPeitELEVBQUVnaUMsRUFBRSxRQUFHLE9BQU8sR0FBTyxHQUFJcG1DLEdBQUUsRUFBR3lHLEVBQUVtOEQsS0FBSyxLQUFLLElBQUl6OEIsRUFBRSxNQUFNa1MsU0FBU2pTLEdBQUdqMkIsRUFBRXhLLEVBQUUsSUFBSXlnQyxFQUFFOXBDLFFBQVEsSUFBSThwQyxFQUFFLEdBQUdybEMsS0FBS21zQixFQUFFKzZDLEdBQUd4aEUsR0FBR0EsRUFBRW5GLEdBQUcsSUFBSW1GLEVBQUU0eEMsU0FBUy83QyxRQUFRMnJFLEdBQUd4aEUsRUFBRTR4QyxTQUFTLElBQUk1eEMsRUFBRTR4QyxTQUFTLEdBQUcsS0FBSyxHQUFHbnJCLEdBQUdpWixFQUFFalosRUFBRTI5QyxZQUFZdnBFLEdBQUd1eEIsR0FBR3UxQyxHQUFHamlDLEVBQUV0VCxFQUFFaHVCLElBQUljLEVBQUV3Z0MsRUFBRWcvQixHQUFHdGdFLEVBQUV6SixFQUFFeW5FLElBQUlod0MsRUFBRWd6QyxHQUFHLENBQUNoekMsU0FBSSxFQUFPcHNCLEVBQUU0eEMsU0FBUyxVQUFLLE9BQU8sR0FBTyxPQUFHLEdBQU8sSUFBS2xTLEVBQUVDLEVBQUUsR0FBR3lrQyxZQUFZdnBFLEdBQUd1eEIsR0FBR3UxQyxHQUFHamlDLEVBQUV0VCxFQUFFaHVCLEdBQUdzaEMsRUFBRXEvQixXQUFXeGxFLElBQUltbUMsRUFBRXEvQixTQUFTbDRDLEVBQUU0MUMsSUFBSTUxQyxFQUFFKzNDLEdBQUd4Z0UsRUFBRXlnRSxNQUFNbi9CLEVBQUV1L0IsZUFBZXA0QyxFQUFFaTRDLEdBQUcxZ0UsRUFBRXlnRSxNQUFNbi9CLEVBQUV1L0IsZUFBZXYvQixFQUFFcS9CLFNBQVN4bEUsRUFBRW1tQyxFQUFFcS9CLFNBQVNwcUUsRUFBRThuRSxJQUFJOW5FLEVBQUVpcUUsR0FBR3hnRSxFQUFFeWdFLE1BQU1uL0IsRUFBRXUvQixlQUFldHFFLEVBQUVtcUUsR0FBRzFnRSxFQUFFeWdFLE1BQU1uL0IsRUFBRXUvQixlQUFlei9CLEVBQUUsQ0FBQyxNQUFNeC9CLEVBQUU2L0QsR0FBRzBKLEdBQUc3L0QsRUFBRTQvRCxZQUFZLENBQUMvSixHQUFHLGNBQWN2L0QsRUFBRW1FLEtBQUssQ0FBQzdKLEtBQUssR0FBRzZKLEtBQUssQ0FBQ3U3RCxHQUFHLENBQUMsa0JBQWtCbGdDLEVBQUV5aEMsSUFBSSxNQUFNdkIsR0FBRyxDQUFDLGlCQUFpQnQxRCxFQUFFLENBQUMsdUJBQXVCQSxHQUFHLEdBQUksT0FBTWhNLEVBQUVncEUsYUFBYXI0Qix3Q0FBd0Myd0IsR0FBRyxDQUFDLGlCQUFpQmhnQyxJQUFJNi9CLEdBQUcsc0JBQXNCQSxHQUFHLGlCQUFpQnBELElBQUltQyxJQUFJM2dFLEVBQUUyMUMsVUFBVXgwQyxLQUFLa0IsRUFBRXUvRCxHQUFHLFVBQVVBLEdBQUczb0UsT0FBT3dILEVBQUV3b0UsV0FBWSxNQUFLanBFLEVBQUUyMUMsVUFBVXgwQyxLQUFLK2dFLEdBQUcwSixHQUFHNy9ELEVBQUU0L0QsYUFBYTVwQyxHQUFFLEdBQUksQ0FBQyxHQUFHLElBQVU4cEMsR0FBRyxxQ0FBcUNDLEdBQUcsaUNBQWlDQyxHQUFHLFdBQVcsU0FBU1IsR0FBR2xwRSxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRTRCLEVBQUVtOEQsSUFBSXhuRSxFQUFFcUwsRUFBRXlvQixRQUFRNUIsRUFBRWx5QixFQUFFOGQsTUFBTSsyRCxJQUFJLElBQUkzaUQsRUFBRSxPQUFPLE1BQU9scEIsQ0FBQUEsRUFBRTlDLEdBQUdnc0IsRUFBRTJZLEVBQUUsQ0FBQ2h5QixPQUFPbThELEdBQUd2ckUsRUFBRXZELEVBQUUySyxPQUFPN1EsRUFBRXdoQyxRQUFRdDdCLEVBQUU4QyxFQUFFOUgsU0FBU2dFLFdBQU0sRUFBT3FPLFNBQUksRUFBTzZnQixXQUFNLEdBQVEsSUFBSTJXLEVBQUUvaEMsRUFBRTZILE9BQU9oUSxRQUFRazBFLEdBQUcsSUFBSWxrRSxPQUFPLE1BQU00RSxFQUFFek0sRUFBRXc0QixRQUFRdUosR0FBR3RULEVBQUVzVCxFQUFFanRCLE1BQU1nM0QsSUFBSSxHQUFHcjlDLEVBQUUsQ0FBQ3NULEVBQUVBLEVBQUVscUMsUUFBUWkwRSxHQUFHLElBQUlqa0UsT0FBTyxNQUFNeEYsRUFBRW9zQixFQUFFLEdBQUc1bUIsT0FBTyxJQUFJa0UsRUFBRSxHQUFHMUosSUFBSTBKLEVBQUUvVSxFQUFFd2hDLFFBQVFuMkIsRUFBRW9LLEVBQUVzMUIsRUFBRTdwQyxRQUFRMnBDLEVBQUV0M0IsSUFBSXloRSxHQUFHdnJFLEVBQUU0QixFQUFFMEosSUFBSTBpQixFQUFFLEdBQUcsQ0FBQyxNQUFNdkYsRUFBRXVGLEVBQUUsR0FBRzVtQixPQUFPcWhCLElBQUkyWSxFQUFFelcsTUFBTTRnRCxHQUFHdnJFLEVBQUV5b0IsRUFBRWx5QixFQUFFd2hDLFFBQVF0UCxFQUFFMlksRUFBRXQzQixJQUFJd0IsRUFBRTFKLEVBQUVuSyxPQUFPdVUsRUFBRXMxQixFQUFFN3BDLFNBQVMsQ0FBQyxDQUFDLE9BQU82cEMsSUFBSUYsRUFBRTNsQyxNQUFNOHZFLEdBQUd2ckUsRUFBRXNoQyxFQUFFdDFCLElBQUlvMUIsQ0FBQyxDQUFDLFNBQVNtcUMsR0FBRzNwRSxFQUFFMEosRUFBRXRMLEdBQUcsT0FBT21oRSxHQUFHNzFELEdBQUUsRUFBR20zRCxHQUFHN2dFLEVBQUU1QixFQUFFc0wsRUFBRTdULFFBQVEsQ0FBQyxTQUFTMHpFLElBQUkxdkUsTUFBTW1HLEVBQUVrSSxJQUFJd0IsRUFBRXFmLE1BQU0zcUIsR0FBR3pKLEVBQUUsSUFBSSxPQUFPLFNBQVNxTCxHQUFHLElBQUkwSixFQUFFMUosRUFBRW5LLE9BQU8sS0FBSzZULE1BQU0xSixFQUFFMEosS0FBSyxPQUFPMUosRUFBRXhELE1BQU0sRUFBRWtOLEVBQUUsR0FBR3BRLEtBQUssQ0FBQzBHLEVBQUUwSixJQUFJMUosR0FBR3UvRCxHQUFHLElBQUlxSyxPQUFPbGdFLEVBQUUsSUFBRyxLQUFyRyxDQUE0RyxDQUFDMUosRUFBRTBKLEVBQUV0TCxLQUFLekosR0FBRyxDQUFDLE1BQU1rMUUsR0FBR3RLLEdBQUcsYUFBWSxHQUFJdUssR0FBRyxDQUFDOXBFLEVBQUUwSixLQUFLLEdBQUcsSUFBSTFKLEVBQUUxRixPQUFPLElBQUkwRixFQUFFdWhFLFNBQVMsSUFBSXZoRSxFQUFFdWhFLFNBQVMsQ0FBc0IsR0FBYlAsR0FBR2hoRSxFQUFFLFFBQWEsT0FBTzBKLEVBQUUwNEIsT0FBTzhpQyxRQUFRLEtBQUt4N0QsRUFBRTA0QixPQUFPOGlDLE9BQU8sQ0FBQyxHQUFHNkUsR0FBRyxDQUFDL3BFLEVBQUUwSixFQUFFdEwsSUFBSXloRSxHQUFHNy9ELEVBQUUwSixHQUFFLEdBQUcsRUFBR0EsRUFBRTdULE9BQU82VCxFQUFFLEdBQUd5eUQsSUFBSS85RCxHQUFHLFNBQVM0ckUsR0FBR2hxRSxFQUFFMEosRUFBRXRMLEVBQUUyckUsSUFBSXJnRSxFQUFFaTFELE9BQU8zWixJQUFJLE1BQU1wVCxTQUFTajlDLEVBQUV3bkUsSUFBSXQxQyxHQUFHN21CLEVBQUVyQyxFQUFFLEdBQUc5QyxFQUFFLEdBQUcsSUFBSTJrQyxFQUFFOTFCLEVBQUUwNEIsT0FBTzhpQyxNQUFNLEdBQUd4N0QsRUFBRTA0QixPQUFPMGtDLEtBQUssRUFBRSxNQUFNcG5DLEVBQUVzaEMsR0FBR2hoRSxFQUFFLFFBQU8sR0FBSSxHQUFHMC9CLEVBQUUsQ0FBQyxNQUFNK2EsSUFBSXo2QyxFQUFFaWhFLElBQUl2M0QsR0FBR2cyQixFQUFFMS9CLElBQUlvZ0UsR0FBR3BnRSxLQUFLdy9CLEdBQUUsR0FBSTdoQyxFQUFFbUIsS0FBS3dnRSxHQUFHdC9ELEdBQUd1L0QsR0FBRyxXQUFVLEdBQUluaEUsRUFBRXNMLEVBQUUvVSxFQUFFa3lCLElBQUksQ0FBQyxJQUFJemMsR0FBRSxFQUFHZ2lCLEdBQUUsRUFBRyxNQUFNN3lCLEVBQUUsR0FBR29tQyxFQUFFLElBQUlrRCxJQUFJLElBQUksSUFBSXBpQixFQUFFLEVBQUVBLEVBQUU5ckIsRUFBRWtCLE9BQU80cUIsSUFBSSxDQUFDLE1BQU16Z0IsRUFBRXJMLEVBQUU4ckIsR0FBRyxJQUFJb0csRUFBRSxJQUFJeTZDLEdBQUd0aEUsTUFBTTZtQixFQUFFbTZDLEdBQUdoaEUsRUFBRSxRQUFPLElBQUssQ0FBQyxJQUFJQSxFQUFFMUYsTUFBTWYsRUFBRXVGLEtBQUtrQixHQUFHLFFBQVEsQ0FBQyxHQUFHMC9CLEVBQUUsTUFBTXQxQixHQUFFLEVBQUcsTUFBTXduQyxTQUFTMXlDLEVBQUVpOUQsSUFBSTExQyxHQUFHem1CLEdBQUd5NkMsSUFBSXhhLEVBQUVzL0IsR0FBRyxXQUFVLEdBQUkwQixJQUFJM2dDLEdBQUd6WixFQUFFLElBQUkxWCxFQUFFaXhELEdBQUduZ0MsR0FBRzl3QixFQUFFOHdCLEVBQUVBLEVBQUV4WCxRQUFRLFVBQVUrVyxHQUFFLEVBQUcsTUFBTXRELEVBQUU5OUIsRUFBRWtpQyxFQUFFcGhDLEVBQUV1bkIsR0FBRyxJQUFJcGMsRUFBRWpWLEVBQUV5SSxFQUFFLEdBQUd3TSxFQUFFMjJELEdBQUdoaEUsRUFBRSxNQUFNdy9CLEdBQUUsRUFBRzNrQyxFQUFFaUUsS0FBS21oRSxHQUFHNTFELEVBQUU0MkQsSUFBSWdKLEdBQUdocUMsRUFBRS9ELEdBQUcydEMsVUFBVSxHQUFHejBFLEVBQUU0ckUsR0FBR2hoRSxFQUFFLGdCQUFlLEdBQUksQ0FBQyxJQUFJQSxFQUFFMEosRUFBRStXLEVBQUUsS0FBSy9XLE1BQU0xSixFQUFFckwsRUFBRStVLEdBQUcsSUFBSTFKLEVBQUUxRixRQUFRLEdBQUcwRixHQUFHc2hFLEdBQUd0aEUsSUFBSWdoRSxHQUFHaGhFLEVBQUUsTUFBTSxDQUFDckwsRUFBRThyQyxPQUFPaGdCLEVBQUUsR0FBR0EsSUFBSSxJQUFJemdCLEVBQUVuRixFQUFFQSxFQUFFaEYsT0FBTyxHQUFHLEtBQUssS0FBS21LLEVBQUVtZ0UsVUFBVTdsRSxNQUFNMEYsRUFBRUEsRUFBRW1nRSxVQUFVbmdFLEVBQUVtZ0UsVUFBVS9xRSxFQUFFNnJFLElBQUloQixHQUFHN3FFLEVBQUU2ckUsSUFBSWdKLEdBQUdocUMsRUFBRS9ELEdBQUcydEMsSUFBSUksR0FBR2hxQyxFQUFFL0QsRUFBRSxDQUFFLE1BQUssR0FBR3IrQixFQUFFbWpFLEdBQUdoaEUsRUFBRSxPQUFPLENBQUN3L0IsR0FBRSxFQUFHLE1BQU14L0IsRUFBRW5DLEVBQUV5ckUsYUFBYUosR0FBR3JyRSxFQUFFb2pFLEtBQUtqaEUsR0FBR25GLEVBQUVpRSxLQUFLNmdFLEdBQUdqMkQsRUFBRWkxRCxPQUFPckIsSUFBSSxDQUFDdDlELEVBQUV3TixPQUFPcXlELEdBQUcwSixHQUFHdnBFLEdBQUdpcUUsR0FBR2hxQyxFQUFFL0QsSUFBRyxLQUFNLEtBQUssQ0FBQyxHQUFHL3NCLEVBQUUsQ0FBQyxHQUFHd3dCLEVBQUVsTCxJQUFJdGxCLEdBQUcsU0FBU3d3QixFQUFFK0UsSUFBSXYxQixHQUFHLFlBQVlBLElBQUlpZCxHQUFFLEVBQUcsQ0FBQ3p1QixFQUFFbUIsS0FBS3dnRSxHQUFHci9CLEVBQUUvRCxHQUFHLENBQUMsQ0FBQyxJQUFJd0QsRUFBRSxDQUFDLE1BQU0xL0IsRUFBRSxDQUFDQSxFQUFFMEosSUFBSTQxRCxHQUFHLFVBQVVsaEUsRUFBRTRCLEVBQUUwSixFQUFFbWQsSUFBSXpjLEVBQUU3USxFQUFFMUQsUUFBUTBELEVBQUVzckIsTUFBTTdrQixHQUFHa3FFLEdBQUdscUUsT0FBT29zQixHQUFHenVCLEVBQUVtQixLQUFLa0IsT0FBRSxFQUFPekcsS0FBS29FLEVBQUVtQixLQUFLa0IsT0FBRSxFQUFPckwsR0FBRyxDQUFDLE1BQU11SyxFQUFFc2dDLEVBQUUsRUFBRTJxQyxHQUFHbnFFLEVBQUU0eEMsVUFBVSxFQUFFLEVBQUUsSUFBSW5yQixFQUFFMjRDLEdBQUd6aEUsRUFBRXV5QyxPQUFPb3ZCLEdBQUcsSUFBSUMsR0FBR3JnRSxFQUFFLElBQUcsS0FBTTJuQixHQUFHLE9BQU9oc0IsRUFBRWhGLFNBQVM0d0IsRUFBRWs1QyxHQUFHajJELEVBQUVpMUQsT0FBT3BCLElBQUksQ0FBQzkyQyxFQUFFeTRDLEdBQUdya0UsTUFBTSxDQUFDczBDLE1BQU0xb0IsRUFBRTJqRCxnQkFBZ0I1cUMsRUFBRSxDQUFDLFNBQVN5cUMsR0FBR2pxRSxFQUFFMEosR0FBRyxPQUFPMDFELEdBQUcsQ0FBQ0UsR0FBRyxPQUFPdC9ELEdBQUdzL0QsR0FBRyxLQUFLNTFELElBQUksQ0FBQyxTQUFTeWdFLEdBQUducUUsR0FBRyxJQUFJLElBQUkwSixFQUFFLEVBQUVBLEVBQUUxSixFQUFFbkssT0FBTzZULElBQUksQ0FBQyxNQUFNdEwsRUFBRTRCLEVBQUUwSixHQUFHLE9BQU90TCxFQUFFOUQsTUFBTSxLQUFLLEVBQUUsR0FBRyxJQUFJOEQsRUFBRW1qRSxTQUFTNEksR0FBRy9yRSxFQUFFd3pDLFVBQVUsT0FBTSxFQUFHLE1BQU0sS0FBSyxFQUFFLEdBQUd1NEIsR0FBRy9yRSxFQUFFK21FLFVBQVUsT0FBTSxFQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHZ0YsR0FBRy9yRSxFQUFFd3pDLFVBQVUsT0FBTSxFQUFHLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBU3M0QixHQUFHbHFFLEdBQUcsT0FBTyxJQUFJQSxFQUFFMUYsTUFBTSxLQUFLMEYsRUFBRTFGLE9BQU8sSUFBSTBGLEVBQUUxRixPQUFPMEYsRUFBRXlvQixRQUFRampCLE9BQU8wa0UsR0FBR2xxRSxFQUFFeW9CLFNBQVMsQ0FBQyxNQUFNNGhELEdBQUcsSUFBSW5uQyxRQUFRb25DLEdBQUcsQ0FBQ3RxRSxFQUFFMEosSUFBSSxXQUFXLEdBQUcsS0FBSzFKLEVBQUUwSixFQUFFdTlELGFBQWEzc0UsTUFBTSxJQUFJMEYsRUFBRXVoRSxTQUFTLElBQUl2aEUsRUFBRXVoRSxRQUFRLE9BQU8sTUFBTXhTLElBQUkzd0QsRUFBRXN0QyxNQUFNLzJDLEdBQUdxTCxFQUFFNm1CLEVBQUUsSUFBSTdtQixFQUFFdWhFLFFBQVEsSUFBSTVqRSxFQUFFa3BCLEVBQUUsU0FBUzdtQixFQUFFMEosRUFBRXRMLEdBQUUsR0FBSSxJQUFJMndELElBQUlwNkQsR0FBR3FMLEVBQUUsTUFBTTZtQixFQUFFeTlCLEdBQUczdkQsR0FBR2dKLEVBQUV1akUsR0FBR2xoRSxFQUFFLE1BQU0sR0FBR3JDLEVBQUUsR0FBR2twQixFQUFFLENBQUMsTUFBTTdtQixFQUFFLElBQUlyQyxFQUFFckQsS0FBS3FELEVBQUU5RCxPQUFPMGxFLEdBQUc1aEUsRUFBRTlELE1BQU00dUIsU0FBUSxHQUFJOXFCLEVBQUVzakUsSUFBSSxHQUFHamhFLEVBQUUsT0FBTzIvRCxHQUFHajJELEVBQUVpMUQsT0FBT3pCLElBQUksQ0FBQ2w5RCxHQUFHLE1BQU0sSUFBSXJDLEVBQUVyRCxNQUFNcUQsRUFBRTlELE1BQU00dUIsUUFBUStYLFdBQVcsVUFBVTdyQyxFQUFFZ0osRUFBRTlELE1BQU00dUIsUUFBUWpzQixNQUFNLElBQUksTUFBTTNCLEdBQUdnc0IsR0FBR202QyxHQUFHaGhFLEVBQUUsTUFBTSxHQUFHbkYsR0FBR0EsRUFBRW9tRSxJQUFJLE9BQU90QixHQUFHajJELEVBQUVpMUQsT0FBT3pCLElBQUksQ0FBQ3JpRSxFQUFFb21FLE1BQU0sTUFBTXpoQyxFQUFFOGdDLEdBQUczckUsSUFBSStVLEVBQUV5NkQsbUJBQW1CeHZFLEdBQUcsT0FBRzZxQyxHQUFTcGhDLEdBQUdzTCxFQUFFaTFELE9BQU9uL0IsR0FBR0EsSUFBUzkxQixFQUFFaTFELE9BQU8xQixJQUFJdnpELEVBQUVnMUMsV0FBV2hhLElBQUkvdkMsR0FBR2l0RSxHQUFHanRFLEVBQUUsY0FBdGEsQ0FBb2JxTCxFQUFFMEosR0FBSSxJQUFHdEwsS0FBSyxNQUFNdkQsRUFBRTRrQyxHQUFFOWhDLElBQUlBLEVBQUVpaUUsU0FBUzFDLEdBQUcsSUFBSTE5QixFQUFFRSxFQUFFdDFCLEVBQUVnaUIsRUFBRTd5QixFQUFFb21DLEVBQUV6Z0MsRUFBRSxFQUFFdW5CLEVBQUU1ckIsR0FBRzhDLElBQUkwK0QsSUFBSTErRCxJQUFJMitELEtBQUt6MUMsSUFBSSxRQUFRem9CLEdBQUcsa0JBQWtCQSxHQUFHLEdBQUd6SixFQUFFa0IsT0FBTyxFQUFFLENBQUMsTUFBTXVJLEVBQUVtc0UsR0FBR3ZxRSxFQUFFMEosT0FBRSxFQUFPbWQsRUFBRWhzQixHQUFHMmtDLEVBQUVwaEMsRUFBRXN0QyxNQUFNeHNDLEVBQUVkLEVBQUU0NEMsVUFBVXo5QyxFQUFFNkUsRUFBRW9zRSxpQkFBaUIsTUFBTTcxRSxFQUFFeUosRUFBRXVnRCxXQUFXaGYsRUFBRWhyQyxHQUFHQSxFQUFFa0IsT0FBT3FwRSxHQUFHdnFFLEVBQUUyRSxLQUFLMEcsR0FBRyxTQUFTQSxFQUFFMEosR0FBRyxNQUFNdEwsRUFBRSxHQUFHekosRUFBRTAxRSxHQUFHeDFELElBQUk3VSxHQUFHckwsRUFBRXlKLEVBQUVVLEtBQUs0SyxFQUFFMDlELGFBQWF6eUUsS0FBSytVLEVBQUVpMUQsT0FBT3hCLElBQUl6ekQsRUFBRWkxQyxXQUFXamEsSUFBSTFrQyxFQUFFVyxNQUFNdkMsRUFBRVUsS0FBSzhpRSxHQUFHNWhFLEVBQUVXLEtBQUssZUFBZSxNQUFNdzdELElBQUl0MUMsR0FBRzdtQixFQUFzRSxHQUFwRUEsRUFBRWloRSxLQUFLN2lFLEVBQUVVLEtBQUtrQixFQUFFaWhFLEtBQUtqaEUsRUFBRXk2QyxNQUFNejZDLEVBQUVpaEUsS0FBSzdpRSxFQUFFVSxLQUFLLFVBQVVWLEVBQUVVLEtBQUtrQixFQUFFeTZDLE1BQVNyekMsT0FBTzA0QixLQUFLOS9CLEVBQUUwNkMsV0FBVzdrRCxPQUFPLENBQUNtSyxFQUFFeTZDLE1BQU16NkMsRUFBRWloRSxLQUFLN2lFLEVBQUVVLEtBQUssVUFBVVYsRUFBRVUsS0FBSyxXQUFXLE1BQU00SyxFQUFFNjFELEdBQUcsUUFBTyxFQUFHMTRDLEdBQUd6b0IsRUFBRVUsS0FBS3NnRSxHQUFHcC9ELEVBQUUwNkMsVUFBVXBoRCxLQUFLMEcsR0FBR3MvRCxHQUFHdC9ELEVBQUUwSixLQUFLbWQsR0FBRyxDQUFDLE9BQU9xNEMsR0FBRzlnRSxFQUFFNEIsRUFBRW04RCxJQUFLLENBQXhZLENBQXlZbjhELEVBQUUwSixXQUFNLEVBQU90TCxFQUFFcXNFLGlCQUFpQmhrRCxHQUFFLEVBQUcsQ0FBQyxHQUFHem1CLEVBQUU0eEMsU0FBUy83QyxPQUFPLEVBQTBCLEdBQXZCOEgsSUFBSTQrRCxLQUFLOTFDLEdBQUUsRUFBR3ZuQixHQUFHLE1BQVMybkIsR0FBR2xwQixJQUFJMCtELElBQUkxK0QsSUFBSTQrRCxHQUFHLENBQUMsTUFBTXB0QixNQUFNL3dDLEVBQUVnc0UsZ0JBQWdCejFFLEdBQUdxMUUsR0FBR2hxRSxFQUFFMEosR0FBR2cyQixFQUFFdGhDLEVBQUV6SixJQUFJdUssR0FBRyxLQUFLLE1BQU0sR0FBRyxJQUFJYyxFQUFFNHhDLFNBQVMvN0MsUUFBUThILElBQUkwK0QsR0FBRyxDQUFDLE1BQU1qK0QsRUFBRTRCLEVBQUU0eEMsU0FBUyxHQUFHajlDLEVBQUV5SixFQUFFOUQsS0FBS3VzQixFQUFFLElBQUlseUIsR0FBRyxJQUFJQSxFQUFFa3lCLEdBQUcsSUFBSWcrQyxHQUFHem1FLEVBQUVzTCxLQUFLeEssR0FBRyxHQUFHd2dDLEVBQUU3WSxHQUFHLElBQUlseUIsRUFBRXlKLEVBQUU0QixFQUFFNHhDLFFBQVEsTUFBTWxTLEVBQUUxL0IsRUFBRTR4QyxTQUFTLElBQUkxeUMsSUFBSWtMLEVBQUV4VCxPQUFPc0ksR0FBRzNGLEdBQUdBLEVBQUUxRCxTQUFTdTJCLEVBQUUsU0FBU3BzQixHQUFHLElBQUkwSixFQUFFLElBQUksSUFBSSxJQUFJdEwsRUFBRSxFQUFFekosRUFBRXFMLEVBQUVuSyxPQUFPdUksRUFBRXpKLEVBQUV5SixJQUFJc0wsR0FBR2pHLEtBQUs2RSxVQUFVdEksRUFBRTVCLElBQUlBLEVBQUV6SixFQUFFLElBQUkrVSxHQUFHLE1BQU0sT0FBT0EsRUFBRSxHQUFHLENBQTFHLENBQTRHblEsS0FBS3lHLEVBQUVva0UsWUFBWTFGLEdBQUdoMUQsRUFBRS9MLEVBQUU2aEMsRUFBRUUsRUFBRXQxQixFQUFFZ2lCLEVBQUV1VCxJQUFJbFosR0FBRSxFQUFHSSxFQUFFN21CLEVBQUVtOEQsTUFBTSxTQUFTb08sR0FBR3ZxRSxFQUFFMEosRUFBRXRMLEVBQUU0QixFQUFFMHJDLE1BQU0vMkMsRUFBRWt5QixFQUFFbHBCLEdBQUUsR0FBSSxNQUFNb3hELElBQUlsMEQsRUFBRXNoRSxJQUFJMzhCLEVBQUVvUyxTQUFTbFMsR0FBRzEvQixFQUFFLElBQUlvSyxFQUFFLEdBQUcsTUFBTWdpQixFQUFFLEdBQUc3eUIsRUFBRSxHQUFHb21DLEVBQUVELEVBQUU3cEMsT0FBTyxFQUFFLElBQUlxSixHQUFFLEVBQUd1bkIsRUFBRSxFQUFFaEcsR0FBRSxFQUFHd2YsR0FBRSxFQUFHSyxHQUFFLEVBQUdueEIsR0FBRSxFQUFHK3NCLEdBQUUsRUFBRzd4QixHQUFFLEVBQUcsTUFBTWpWLEVBQUUsR0FBR21yQyxFQUFFLEVBQUVyNEIsSUFBSWxJLEVBQUVuRyxNQUFNdUUsTUFBTSxHQUFHZ2lFLEdBQUdwZ0UsR0FBRyxDQUFDLE1BQU1yQyxFQUFFcUMsRUFBRXlvQixRQUFRNXRCLEVBQUVnRCxHQUFFRixHQUFHLElBQUk5QyxHQUFHbEcsSUFBSWt5QixHQUFHLFlBQVlscEIsRUFBRWpDLGVBQWUsd0JBQXdCaUMsR0FBR29qQyxHQUFFcGpDLEtBQUt3UixHQUFFLEdBQUl0VSxHQUFHa21DLEdBQUVwakMsS0FBSzBNLEdBQUUsR0FBSSxLQUFLak0sRUFBRTlELE9BQU8sSUFBSThELEVBQUU5RCxNQUFNLElBQUk4RCxFQUFFOUQsT0FBT3VxRSxHQUFHem1FLEVBQUVzTCxHQUFHLEVBQUUsT0FBTyxRQUFRL0wsRUFBRThpQixHQUFFLEVBQUcsVUFBVTlpQixFQUFFc2lDLEdBQUUsRUFBRyxVQUFVdGlDLEVBQUUyaUMsR0FBRSxFQUFHLFFBQVEzaUMsR0FBR3ZJLEVBQUVtUSxTQUFTNUgsSUFBSXZJLEVBQUUwSixLQUFLbkIsSUFBSWhKLEdBQUcsVUFBVWdKLEdBQUcsVUFBVUEsR0FBR3ZJLEVBQUVtUSxTQUFTNUgsSUFBSXZJLEVBQUUwSixLQUFLbkIsRUFBRSxNQUFNdStCLEdBQUUsQ0FBRSxFQUFFLElBQUksSUFBSXIrQixFQUFFLEVBQUVBLEVBQUVPLEVBQUV2SSxPQUFPZ0ksSUFBSSxDQUFDLE1BQU1sSixFQUFFeUosRUFBRVAsR0FBRyxHQUFHLElBQUlsSixFQUFFMkYsS0FBSyxDQUFDLE1BQU02aEUsSUFBSW44RCxFQUFFVyxLQUFLdkMsRUFBRXZFLE1BQU1ndEIsR0FBR2x5QixFQUFFLElBQUlnSixHQUFFLEVBQUcsR0FBRyxRQUFRUyxJQUFJcWlCLEdBQUUsRUFBRy9XLEVBQUUwNEIsT0FBTzBrQyxLQUFLLEdBQUcxOEQsRUFBRXRMLEtBQUt3Z0UsR0FBR0MsR0FBRyxXQUFVLEdBQUlBLEdBQUcsV0FBVyxPQUFPbmhFLElBQUlrbUQsR0FBR3pwRCxJQUFJZ3NCLEdBQUdBLEVBQUU0QixRQUFRK1gsV0FBVyxTQUFTLFNBQVNwMkIsRUFBRXRMLEtBQUt3Z0UsR0FBR0MsR0FBR25oRSxHQUFFLEVBQUd5aUUsR0FBRzdnRSxFQUFFLEVBQUU1QixFQUFFdkksU0FBUzBwRSxHQUFHMTRDLEVBQUVBLEVBQUU0QixRQUFRLEdBQUc5cUIsRUFBRWtwQixFQUFFQSxFQUFFczFDLElBQUluOEQsSUFBSSxLQUFLLENBQUMsTUFBTVcsS0FBS3ZDLEVBQUVxOEMsSUFBSTV6QixFQUFFbzZDLElBQUl2aEMsRUFBRXk4QixJQUFJMTFDLEdBQUc5eEIsRUFBRThyQixFQUFFLFNBQVNyaUIsRUFBRTZoQyxFQUFFLE9BQU83aEMsRUFBRSxHQUFHLFNBQVNBLEVBQUUsU0FBUyxHQUFHLFNBQVNBLEdBQUcsU0FBU0EsRUFBRSxTQUFTLEdBQUcsT0FBT0EsR0FBR3FpQixHQUFHMGdELEdBQUd0NkMsRUFBRSxPQUFPeTlCLEdBQUd6cEQsR0FBRyxTQUFTLEdBQUdvbEMsR0FBR3RpQyxFQUFFLFNBQVMsSUFBSThpQixHQUFHMGdELEdBQUd0NkMsRUFBRSxRQUFRb1osR0FBR04sR0FBR3doQyxHQUFHdDZDLEVBQUUsd0JBQXdCM25CLEdBQUUsR0FBSXVoQixHQUFHMGdELEdBQUd0NkMsRUFBRSxRQUFRbmQsRUFBRTA0QixPQUFPMGtDLEtBQUssR0FBRzE4RCxFQUFFdEwsS0FBS3dnRSxHQUFHQyxHQUFHLFdBQVUsR0FBSUEsR0FBRyxXQUFXMTRDLElBQUlwRyxHQUFHd2YsR0FBRyxDQUFDL0QsR0FBRSxFQUFHd0QsSUFBSXQxQixFQUFFdlUsU0FBU3UyQixFQUFFdHRCLEtBQUtzZ0UsR0FBR3NMLEdBQUd0Z0UsR0FBR28xQixJQUFJcDFCLEVBQUUsSUFBSWdpQixFQUFFdHRCLEtBQUsyaEIsRUFBRWlmLEVBQUUsQ0FBQ3BsQyxLQUFLLEdBQUc2aEUsSUFBSTExQyxFQUFFbTVDLE9BQU9sMkQsRUFBRWkxRCxPQUFPZCxJQUFJdnFCLFVBQVUsQ0FBQzVULE1BQU0sUUFBUSxDQUFDLE1BQU1ZLEVBQUU1MkIsRUFBRW84RCxvQkFBb0IxbkUsR0FBRyxHQUFHa2lDLEVBQUUsQ0FBQyxNQUFNb0wsTUFBTXR0QyxFQUFFdXNFLFlBQVk5akQsR0FBR3laLEVBQUUzckMsRUFBRXFMLEVBQUUwSixJQUFJL0wsR0FBR1MsRUFBRWlILFFBQVFrN0IsR0FBR24yQixFQUFFdEwsUUFBUVYsR0FBR3lvQixJQUFJdHRCLEVBQUV1RixLQUFLbkssR0FBR2tyQyxHQUFFaFosSUFBSXdqRCxHQUFHOWlFLElBQUk1UyxFQUFFa3lCLEdBQUksTUFBS21hLEdBQUU1aUMsS0FBSzdFLEVBQUV1RixLQUFLbkssR0FBR2dyQyxJQUFJemdDLEdBQUUsR0FBSSxDQUFDLENBQUMsSUFBSThMLEVBQUUsR0FBR29oQixFQUFFdjJCLFFBQVF1VSxFQUFFdlUsUUFBUXUyQixFQUFFdHRCLEtBQUtzZ0UsR0FBR3NMLEdBQUd0Z0UsR0FBR28xQixJQUFJeDBCLEVBQUVvaEIsRUFBRXYyQixPQUFPLEVBQUU4cEUsR0FBR2oyRCxFQUFFaTFELE9BQU9sQixJQUFJcnhDLEVBQUVvVCxHQUFHcFQsRUFBRSxJQUFJaGlCLEVBQUV2VSxTQUFTbVYsRUFBRW8wRCxHQUFHc0wsR0FBR3RnRSxHQUFHbzFCLElBQUl0RCxFQUFFelYsR0FBRyxJQUFJd1osSUFBSXRyQyxJQUFJOHhCLEdBQUcsR0FBRzZaLElBQUkzckMsSUFBSTh4QixHQUFHLEdBQUdyeEIsRUFBRVMsU0FBUzR3QixHQUFHLEdBQUd0WCxJQUFJc1gsR0FBRyxLQUFLdm5CLEdBQUcsSUFBSXVuQixHQUFHLEtBQUtBLEtBQUtoRyxHQUFHcFcsR0FBRzlRLEVBQUUxRCxPQUFPLEtBQUs0d0IsR0FBRyxNQUFNL2MsRUFBRW0xRCxPQUFPN3pELEVBQUUsT0FBT0EsRUFBRTFRLE1BQU0sS0FBSyxHQUFHLElBQUkwRixHQUFHLEVBQUU1QixHQUFHLEVBQUV6SixHQUFFLEVBQUcsSUFBSSxJQUFJK1UsRUFBRSxFQUFFQSxFQUFFc0IsRUFBRXEwRCxXQUFXeHBFLE9BQU82VCxJQUFJLENBQUMsTUFBTW1kLEVBQUU3YixFQUFFcTBELFdBQVczMUQsR0FBR3hCLElBQUlrNEQsR0FBR3Y1QyxHQUFHLFVBQVVBLEVBQUU0QixRQUFRem9CLEVBQUUwSixFQUFFLFVBQVVtZCxFQUFFNEIsVUFBVXJxQixFQUFFc0wsR0FBR21kLEVBQUUrakQsZUFBZWoyRSxHQUFFLEVBQUcsQ0FBQyxNQUFNa3lCLEVBQUU3YixFQUFFcTBELFdBQVdyL0QsR0FBR3JDLEVBQUVxTixFQUFFcTBELFdBQVdqaEUsR0FBR3pKLEVBQUVxVyxFQUFFMjBELEdBQUdqMkQsRUFBRWkxRCxPQUFPaEIsSUFBSSxDQUFDM3lELEtBQUs2YixJQUFJdTVDLEdBQUd2NUMsRUFBRWh0QixTQUFTZ3RCLEVBQUVodEIsTUFBTThsRSxHQUFHajJELEVBQUVpMUQsT0FBTzVsRSxJQUFJLENBQUM4dEIsRUFBRWh0QixTQUFTOEQsSUFBSTJpQyxHQUFHLElBQUkzaUMsRUFBRTlELE1BQU1TLE1BQU0sTUFBTXFELEVBQUU5RCxNQUFNNHVCLFFBQVFqakIsT0FBTyxJQUFJLEtBQUs3SCxFQUFFOUQsTUFBTVMsUUFBUXFELEVBQUU5RCxNQUFNOGxFLEdBQUdqMkQsRUFBRWkxRCxPQUFPakIsSUFBSSxDQUFDLy9ELEVBQUU5RCxVQUFVLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUW1SLEVBQUUyMEQsR0FBR2oyRCxFQUFFaTFELE9BQU9oQixJQUFJLENBQUNnQyxHQUFHajJELEVBQUVpMUQsT0FBT2YsSUFBSSxDQUFDNXlELE1BQU0sTUFBTSxDQUFDMGdDLE1BQU0xZ0MsRUFBRTJ6QyxXQUFXcGxELEVBQUV5OUMsVUFBVXZ3QixFQUFFK2pELGlCQUFpQnAxRSxFQUFFcTFFLGVBQWV2ckUsRUFBRSxDQUFDLFNBQVN3ckUsR0FBRzFxRSxHQUFHLE1BQU0wSixFQUFFLElBQUk4NkIsSUFBSXBtQyxFQUFFLEdBQUcsSUFBSSxJQUFJekosRUFBRSxFQUFFQSxFQUFFcUwsRUFBRW5LLE9BQU9sQixJQUFJLENBQUMsTUFBTWt5QixFQUFFN21CLEVBQUVyTCxHQUFHLEdBQUcsSUFBSWt5QixFQUFFM2UsSUFBSTVOLE9BQU91c0IsRUFBRTNlLElBQUlzM0QsU0FBUyxDQUFDcGhFLEVBQUVVLEtBQUsrbkIsR0FBRyxRQUFRLENBQUMsTUFBTWxwQixFQUFFa3BCLEVBQUUzZSxJQUFJdWdCLFFBQVE1dEIsRUFBRTZPLEVBQUVtTCxJQUFJbFgsR0FBRzlDLEdBQUcsVUFBVThDLEdBQUcsVUFBVUEsR0FBR0UsR0FBRUYsS0FBS2t0RSxHQUFHaHdFLEVBQUVnc0IsSUFBSW5kLEVBQUVuQyxJQUFJNUosRUFBRWtwQixHQUFHem9CLEVBQUVVLEtBQUsrbkIsR0FBRyxDQUFDLE9BQU96b0IsQ0FBQyxDQUFDLFNBQVN5c0UsR0FBRzdxRSxFQUFFMEosR0FBRyxLQUFLMUosRUFBRW5HLE1BQU1TLEtBQUswRixFQUFFbkcsTUFBTXNsRSxTQUFTcmdFLEtBQUs0SyxFQUFFN1AsT0FBT21HLEVBQUVuRyxNQUFNcWxFLEdBQUcsQ0FBQ2wvRCxFQUFFbkcsTUFBTTZQLEVBQUU3UCxPQUFPbUcsRUFBRW04RCxJQUFJLENBQUMsU0FBUzdYLEdBQUd0a0QsR0FBRyxNQUFNLGNBQWNBLEdBQUcsY0FBY0EsQ0FBQyxDQUFDLE1BQU04cUUsR0FBRyxDQUFDOXFFLEVBQUUwSixLQUFLLEdBQUc4M0QsR0FBR3hoRSxHQUFHLENBQUMsTUFBTTR4QyxTQUFTeHpDLEVBQUUrOUQsSUFBSXhuRSxHQUFHcUwsR0FBRytxRSxTQUFTbGtELEVBQUVta0QsVUFBVXJ0RSxHQUFHLFNBQVNxQyxFQUFFMEosR0FBRyxJQUFJdEwsRUFBRXpKLEVBQUUsWUFBWSxNQUFNa3lCLEVBQUUsR0FBRyxJQUFJLElBQUlscEIsRUFBRSxFQUFFQSxFQUFFcUMsRUFBRTByQyxNQUFNNzFDLE9BQU84SCxJQUFJLENBQUMsTUFBTStMLEVBQUUxSixFQUFFMHJDLE1BQU0vdEMsR0FBRyxJQUFJK0wsRUFBRXBQLEtBQUtvUCxFQUFFN1AsUUFBUSxTQUFTNlAsRUFBRS9JLEtBQUtoTSxFQUFFOE8sS0FBSzZFLFVBQVVvQixFQUFFN1AsTUFBTTR1QixVQUFVL2UsRUFBRS9JLEtBQUt3OEIsR0FBRXp6QixFQUFFL0ksTUFBTWttQixFQUFFL25CLEtBQUs0SyxLQUFLLFNBQVNBLEVBQUUvSSxNQUFNd2dFLEdBQUd6M0QsRUFBRSt3QyxJQUFJLFFBQVEvd0MsRUFBRXUzRCxNQUFNdHNFLEVBQUUrVSxFQUFFdTNELE1BQU0sU0FBU3YzRCxFQUFFL0ksTUFBTStJLEVBQUUrd0MsS0FBSzJsQixHQUFHMTJELEVBQUUrd0MsT0FBTy93QyxFQUFFK3dDLElBQUloeUIsUUFBUTBVLEdBQUV6ekIsRUFBRSt3QyxJQUFJaHlCLFVBQVU1QixFQUFFL25CLEtBQUs0SyxHQUFHLENBQUMsR0FBR21kLEVBQUVoeEIsT0FBTyxFQUFFLENBQUMsTUFBTTYxQyxNQUFNLzJDLEVBQUVncUQsV0FBV2hoRCxHQUFHNHNFLEdBQUd2cUUsRUFBRTBKLEVBQUVtZCxHQUFFLEdBQUcsR0FBSXpvQixFQUFFekosQ0FBQyxDQUFDLE1BQU0sQ0FBQ28yRSxTQUFTcDJFLEVBQUVxMkUsVUFBVTVzRSxFQUFFLENBQXZhLENBQXlhNEIsRUFBRTBKLEdBQUc3TyxFQUFFLENBQUM2TyxFQUFFZzhELGtCQUFrQixjQUFjLFNBQVM3K0MsRUFBRSxLQUFLLFlBQVksUUFBUSxJQUFJMlksRUFBRSxFQUFFN2hDLElBQUk5QyxFQUFFLEdBQUc4QyxFQUFFNmhDLEVBQUUsR0FBR3BoQyxFQUFFdkksU0FBU2dGLEVBQUUsR0FBR2dsRSxHQUFHLEdBQUd6aEUsR0FBRSxHQUFHLEVBQUd6SixHQUFHNnFDLEVBQUUsR0FBRzkxQixFQUFFK3hDLFVBQVUveEMsRUFBRXM4RCxVQUFVeG1DLEVBQUUsR0FBRzNrQyxFQUFFNGxDLE9BQU9qQixHQUFHeC9CLEVBQUVva0UsWUFBWXpFLEdBQUdqMkQsRUFBRWkxRCxPQUFPNXlCLElBQUlseEMsRUFBRWxHLEVBQUUsR0FBU3MyRSxHQUFHLHNGQUFzRkMsR0FBRyxDQUFDbHJFLEVBQUUwSixFQUFFdEwsRUFBRXpKLEtBQUssTUFBTXduRSxJQUFJdDFDLEVBQUU2ekIsVUFBVS84QyxFQUFFODhDLElBQUk1L0MsR0FBR21GLEVBQUUsSUFBSXcvQixFQUFFLEdBQUcsSUFBSTNrQyxFQUFFUCxLQUFLLEdBQUdPLEVBQUUya0UsU0FBUyxDQUFDLElBQUl4L0QsRUFBRW5GLEVBQUU0dEIsUUFBUXpvQixFQUFFd2dDLFdBQVcsVUFBVXhnQyxFQUFHLFNBQVFBLEVBQUV4RCxNQUFNLE1BQU1nakMsRUFBRSsvQixHQUFHaitCLEdBQUVuRSxHQUFFbjlCLEtBQUksRUFBR25GLEVBQUVzaEUsSUFBSyxNQUFLMzhCLEVBQUVrZ0MsR0FBRyxDQUFFLEdBQUV0aEUsRUFBRWdwRSxhQUFhbmlCLE9BQU9wcUQsRUFBRSxXQUFXMmtDLEVBQUUza0MsRUFBRTJrQyxFQUFFb1MsU0FBUzZILFFBQVMsR0FBRXI3QyxFQUFFZ3BFLGFBQWFuaUIsUUFBUXpsQixFQUFFb1MsU0FBUzl5QyxLQUFLLEtBQUssSUFBSTRnQyxFQUFFMS9CLEVBQUVpaEUsSUFBSXZoQyxJQUFJQSxFQUFFalgsUUFBUWpqQixTQUFTazZCLE9BQUUsR0FBUSxJQUFJdDFCLEVBQUVoTSxFQUFFd25FLGdCQUFnQmxtQyxJQUFJdGhDLEVBQUUrb0UsUUFBUSxHQUFHem5DLEVBQUUsQ0FBQyxNQUFNMS9CLEVBQUU0Z0UsR0FBR2xoQyxFQUFFalgsU0FBUy9lLElBQUkxSixHQUFHaXJFLEdBQUcxMUUsS0FBS21xQyxFQUFFalgsVUFBVXJxQixFQUFFc2hDLEVBQUVqWCxRQUFRbGpCLFNBQVMsTUFBTW1FLEdBQUdVLEdBQUdwSyxLQUFLMC9CLEVBQUVnZ0MsR0FBRyxDQUFFLEdBQUVoMkQsRUFBRSxTQUFTLGtCQUFrQnRMLEVBQUUsSUFBSSxNQUFNc2hDLEVBQUV0aEMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxJQUFJZ3VCLEVBQUUsQ0FBQ3NmLE1BQU0sQ0FBQzR6QixHQUFHOS9CLEVBQUVFLEdBQUc2L0IsR0FBRyxZQUFXLEVBQUcxNEMsTUFBTSxPQUFPbHlCLElBQUl5M0IsRUFBRXozQixFQUFFeTNCLElBQUloaUIsSUFBSWdpQixFQUFFc2YsTUFBTSxHQUFHN3hDLE1BQU11RSxFQUFFdWEsTUFBTXlULEVBQUVzZixNQUFNLEdBQUc3eEMsUUFBUXV5QixFQUFFc2YsTUFBTXJtQyxTQUFTckYsR0FBR0EsRUFBRWtJLElBQUkwaUUsY0FBYSxJQUFLeCtDLENBQUMsRUFBRSsrQyxHQUFHLENBQUNuckUsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU02aUUsSUFBSXRzRSxFQUFFK2xELFVBQVU3ekIsRUFBRXMxQyxJQUFJeCtELEdBQUdxQyxFQUFFbkYsRUFBRW1GLEVBQUV5NkMsSUFBSSxPQUFPLElBQUk1L0MsRUFBRVAsTUFBTU8sRUFBRSsyQyxTQUFTNkgsUUFBUSxLQUFLNStDLEVBQUUrMkMsU0FBUzl5QyxLQUFLLFlBQVlqRSxFQUFFMmtFLFdBQVcza0UsRUFBRTR0QixRQUFTLEdBQUU1dEIsRUFBRTR0QixpQkFBaUI1QixFQUFFdGhCLFNBQVMsV0FBVyxJQUFJMUssRUFBRVAsS0FBS08sRUFBRTR0QixRQUFRNXRCLEVBQUUya0UsU0FBU3JpQyxHQUFFdGlDLEVBQUU0dEIsU0FBVSxHQUFFcnFCLEVBQUVncEUsYUFBYXRKLE9BQU9qakUsRUFBRTR0QixZQUFZNXRCLEVBQUUrMkMsU0FBUzZILFFBQVMsR0FBRXI3QyxFQUFFZ3BFLGFBQWF0SixRQUFRampFLEVBQUUrMkMsU0FBUzl5QyxLQUFLLE9BQU9WLEVBQUV5Z0UsUUFBUWg0QyxFQUFFdGhCLFNBQVMsU0FBUzZsRSxHQUFHdndFLEVBQUUsS0FBS2dzQixFQUFFdGhCLFNBQVMsU0FBUzZsRSxHQUFHdndFLEVBQUUsT0FBT2xHLEdBQUcsSUFBSUEsRUFBRTJGLE9BQU8zRixFQUFFOHpCLFFBQVFqakIsT0FBTyxDQUFDa21DLE1BQU0sQ0FBQzR6QixHQUFHemtFLEVBQUUwa0UsR0FBRyxJQUFHLEVBQUc1aEUsTUFBTSxDQUFDK3RDLE1BQU0sQ0FBQzR6QixHQUFHemtFLEVBQUVsRyxJQUFJLEVBQUV5MkUsR0FBRyxDQUFDcHJFLEVBQUUwSixLQUFLLElBQUkxSixFQUFFMUYsS0FBSzBGLEVBQUV5b0IsUUFBUXpvQixFQUFFdy9ELFNBQVM5MUQsRUFBRTFKLEVBQUV5b0IsUUFBUyxLQUFJL2UsT0FBTzFKLEVBQUV5b0IsY0FBY3pvQixFQUFFNHhDLFNBQVM2SCxRQUFTLElBQUcvdkMsVUFBVTFKLEVBQUU0eEMsU0FBUzl5QyxLQUFLLEtBQUssRUFBRXVzRSxHQUFHLENBQUNyckUsRUFBRTBKLEtBQUssR0FBRyxJQUFJMUosRUFBRTFGLE1BQU0sSUFBSTBGLEVBQUUxRixNQUFNLEtBQUswRixFQUFFMUYsTUFBTSxLQUFLMEYsRUFBRTFGLEtBQUssTUFBTSxLQUFLLE1BQU04RCxFQUFFNEIsRUFBRTR4QyxTQUFTLElBQUlqOUMsRUFBRWt5QixHQUFFLEVBQUcsSUFBSSxJQUFJN21CLEVBQUUsRUFBRUEsRUFBRTVCLEVBQUV2SSxPQUFPbUssSUFBSSxDQUFDLE1BQU0wSixFQUFFdEwsRUFBRTRCLEdBQUcsR0FBR29oRSxHQUFHMTNELEdBQUcsQ0FBQ21kLEdBQUUsRUFBRyxJQUFJLElBQUlBLEVBQUU3bUIsRUFBRSxFQUFFNm1CLEVBQUV6b0IsRUFBRXZJLE9BQU9neEIsSUFBSSxDQUFDLE1BQU1scEIsRUFBRVMsRUFBRXlvQixHQUFHLElBQUl1NkMsR0FBR3pqRSxHQUFHLENBQUNoSixPQUFFLEVBQU8sS0FBSyxDQUFDQSxJQUFJQSxFQUFFeUosRUFBRTRCLEdBQUcwL0QsR0FBRyxDQUFDaDJELEdBQUdBLEVBQUV5eUQsTUFBTXhuRSxFQUFFaTlDLFNBQVM5eUMsS0FBSyxNQUFNbkIsR0FBR1MsRUFBRXFpQyxPQUFPNVosRUFBRSxHQUFHQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdBLElBQUksSUFBSXpvQixFQUFFdkksUUFBUSxJQUFJbUssRUFBRTFGLE9BQU8sSUFBSTBGLEVBQUUxRixNQUFNLElBQUkwRixFQUFFdWhFLFNBQVN2aEUsRUFBRTByQyxNQUFNcHVDLE1BQU0wQyxHQUFHLElBQUlBLEVBQUUxRixPQUFPb1AsRUFBRW84RCxvQkFBb0I5bEUsRUFBRVcsVUFBVSxJQUFJLElBQUlYLEVBQUUsRUFBRUEsRUFBRTVCLEVBQUV2SSxPQUFPbUssSUFBSSxDQUFDLE1BQU1yTCxFQUFFeUosRUFBRTRCLEdBQUcsR0FBR29oRSxHQUFHenNFLElBQUksSUFBSUEsRUFBRTJGLEtBQUssQ0FBQyxNQUFNdXNCLEVBQUUsR0FBRyxJQUFJbHlCLEVBQUUyRixNQUFNLE1BQU0zRixFQUFFOHpCLFNBQVM1QixFQUFFL25CLEtBQUtuSyxHQUFHK1UsRUFBRXU4RCxLQUFLLElBQUlwQixHQUFHbHdFLEVBQUUrVSxJQUFJbWQsRUFBRS9uQixLQUFLLEtBQUtWLEVBQUU0QixHQUFHLENBQUMxRixLQUFLLEdBQUdtdUIsUUFBUTl6QixFQUFFd25FLElBQUl4bkUsRUFBRXduRSxJQUFJaUksWUFBWXpFLEdBQUdqMkQsRUFBRWkxRCxPQUFPNUIsSUFBSWwyQyxHQUFHLENBQUMsRUFBRSxFQUFFeWtELEdBQUcsSUFBSUMsUUFBUUMsR0FBRyxDQUFDeHJFLEVBQUUwSixLQUFLLEdBQUcsSUFBSTFKLEVBQUUxRixNQUFNMG1FLEdBQUdoaEUsRUFBRSxRQUFPLEdBQUksQ0FBQyxHQUFHc3JFLEdBQUc3MkMsSUFBSXowQixJQUFJMEosRUFBRXk5RCxRQUFRLE9BQU8sT0FBT21FLEdBQUc1bUMsSUFBSTFrQyxHQUFHMEosRUFBRXk5RCxTQUFRLEVBQUd6OUQsRUFBRWkxRCxPQUFPWCxJQUFJLEtBQUt0MEQsRUFBRXk5RCxTQUFRLEVBQUcsTUFBTW5uRSxFQUFFMEosRUFBRXU5RCxZQUFZam5FLEVBQUVva0UsY0FBY3BrRSxFQUFFb2tFLFlBQVkxNkQsRUFBRWlQLE1BQU0zWSxFQUFFb2tFLGFBQVksR0FBSSxDQUFDLEdBQUdxSCxHQUFHLENBQUN6ckUsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU02aUUsSUFBSXRzRSxFQUFFOGxELElBQUk1ekIsR0FBRzdtQixFQUFFLElBQUlyTCxFQUFFLE9BQU8rMkUsS0FBSyxNQUFNL3RFLEVBQUVoSixFQUFFd25FLElBQUkzdUQsT0FBTzNTLEVBQUUsSUFBSWxHLEVBQUUyRixLQUFLM0YsRUFBRTh6QixRQUFROXFCLEVBQUUsSUFBSTlDLEVBQUUySyxTQUFTbzdELEdBQUcvbEUsR0FBRyxPQUFPNndFLEtBQUssTUFBTWxzQyxFQUFFM1ksR0FBRzA0QyxHQUFHLGNBQWEsR0FBSTcvQixFQUFFN1ksRUFBRXU1QyxHQUFHdjVDLEdBQUksWUFBV0EsRUFBRTRCLFVBQVVpM0MsR0FBRyxDQUFDLGlCQUFpQjc0QyxJQUFJLHNCQUFzQixJQUFJemMsRUFBRUEsRUFBRXMxRCxHQUFHLEVBQUl0aEUsRUFBRWlvRSxLQUFLLGdCQUFnQixVQUF6QixTQUEwQzF4RSxFQUFFLGdCQUFnQixNQUFNeTNCLEVBQUUsQ0FBQ2t6QyxHQUFHOS9CLEVBQUV4L0IsRUFBRWloRSxLQUFLM0IsR0FBRzUvQixFQUFFdDFCLElBQUksR0FBR3BLLEVBQUUwNkMsVUFBVTdrRCxRQUFRLElBQUk2VCxFQUFFNjNELFFBQVEsQ0FBQyxNQUFNNzNELEVBQUUxSixFQUFFMDZDLFVBQVVwaEQsS0FBSzBHLElBQUl3Z0UsR0FBR3hnRSxHQUFHQSxFQUFFeUQsS0FBSzZFLFVBQVV0SSxJQUFJLFdBQVd2RyxLQUFLLE1BQU0yRSxFQUFFeW9CLEVBQUV1NUMsR0FBR3Y1QyxHQUFJLEdBQUVBLEVBQUU0QixtQkFBbUJpM0MsR0FBRyxDQUFDNzRDLEVBQUUsbUJBQW1CLGlCQUFpQnVGLEVBQUV0dEIsS0FBS3dnRSxHQUFHbGhFLEVBQUVtaEUsR0FBSSxLQUFJNzFELE9BQU0sRUFBRzFKLEVBQUVtOEQsSUFBSSxJQUFJLENBQUMsT0FBT3VQLEdBQUd0L0MsRUFBRSxFQUFFLFNBQVNzL0MsR0FBRzFyRSxFQUFFLElBQUksTUFBTSxDQUFDMHJDLE1BQU0xckMsRUFBRSxDQUFDLE1BQU0yckUsR0FBRyxJQUFJSixRQUFRSyxHQUFHLENBQUM1ckUsRUFBRTBKLEtBQUssR0FBRyxJQUFJMUosRUFBRTFGLEtBQUssQ0FBQyxNQUFNOEQsRUFBRTRpRSxHQUFHaGhFLEVBQUUsUUFBUSxJQUFJNUIsR0FBR3V0RSxHQUFHbDNDLElBQUl6MEIsR0FBRyxPQUFPLE9BQU8yckUsR0FBR2puQyxJQUFJMWtDLEdBQUcsS0FBSyxNQUFNckwsRUFBRXFMLEVBQUVva0UsYUFBYTE2RCxFQUFFdTlELFlBQVk3QyxZQUFZenZFLEdBQUcsS0FBS0EsRUFBRTJGLE9BQU8sSUFBSTBGLEVBQUV1aEUsU0FBU00sR0FBR2x0RSxFQUFFK1UsR0FBRzFKLEVBQUVva0UsWUFBWXpFLEdBQUdqMkQsRUFBRWkxRCxPQUFPTixJQUFJLENBQUNqZ0UsRUFBRTZpRSxJQUFJcEIsUUFBRyxFQUFPbHJFLEdBQUcsU0FBU2lDLE9BQU84UyxFQUFFazlELFlBQVksQ0FBQyxHQUFHLFNBQVNpRixHQUFHN3JFLEVBQUUwSixFQUFFLElBQUksTUFBTXRMLEVBQUVzTCxFQUFFK3RDLFNBQVNxa0IsR0FBR25uRSxFQUFFLFdBQVcrVSxFQUFFd29DLE1BQUssSUFBS3hvQyxFQUFFZzhELGtCQUFrQnRuRSxFQUFFNDlELEdBQUcsS0FBS3JuRSxHQUFHeUosRUFBRTQ5RCxHQUFHLEtBQUt0eUQsRUFBRWs4RCxlQUFleG5FLEVBQUU0OUQsR0FBRyxLQUFLdHlELEVBQUUreEMsVUFBVTltRCxHQUFHeUosRUFBRTQ5RCxHQUFHLEtBQUssTUFBTW4xQyxFQUFFMFksR0FBRXYvQixHQUF0amdDLFNBQVlBLEVBQUUwSixFQUFFLElBQUksTUFBTXRMLEVBQUUsU0FBUzRCLEVBQUUwSixHQUFHLE1BQU10TCxFQUFFNE0sR0FBRSxDQUFFLEVBQUNvM0QsSUFBSSxJQUFJenRFLEVBQUUsSUFBSUEsS0FBSytVLEVBQUV0TCxFQUFFekosUUFBRyxJQUFTK1UsRUFBRS9VLEdBQUd5dEUsR0FBR3p0RSxHQUFHK1UsRUFBRS9VLEdBQUcsTUFBTSxDQUFDa1IsUUFBUXpILEVBQUV5M0IsT0FBTyxFQUFFMG9DLEtBQUssRUFBRUMsT0FBTyxFQUFFaUcsZUFBZXprRSxFQUFFd04sT0FBT3hOLEVBQUUyakUsT0FBTSxFQUFHWixRQUFPLEVBQUdMLE9BQU90a0UsRUFBRXNrRSxPQUFPLENBQXJMLENBQXVMMWlFLEVBQUUwSixHQUFHL1UsRUFBRWl2RSxHQUFHeGxFLEdBQUcsT0FBTyxTQUFTNEIsRUFBRTBKLEVBQUU0MEQsSUFBSSxNQUFNLENBQUNoa0UsS0FBSyxFQUFFczNDLFNBQVM1eEMsRUFBRXdtRSxRQUFRLEdBQUc5bkIsV0FBVyxHQUFHQyxXQUFXLEdBQUc4bkIsT0FBTyxHQUFHQyxRQUFRLEdBQUdFLE9BQU8sRUFBRUQsTUFBTSxFQUFFdkMsaUJBQVksRUFBT2pJLElBQUl6eUQsRUFBRSxDQUFoSixDQUFrSms1RCxHQUFHeGtFLEVBQUUsRUFBRSxJQUFJMGxFLEdBQUcxbEUsRUFBRXpKLEdBQUcsQ0FBNnEvQm0zRSxDQUFHOXJFLEVBQUUwSixHQUFHMUosR0FBR3JDLEVBQUU5QyxHQUFHLENBQUMsQ0FBQzJ3RSxHQUFHOUMsR0FBR2tELEdBQUczQyxHQUFHNkIsR0FBR1IsR0FBR1IsR0FBR3VCLElBQUksQ0FBQ25yRSxHQUFHZ3JFLEdBQUdueUQsS0FBS295RCxHQUFHWSxNQUFNTixLQUFLLE9BQU9qRyxHQUFHMytDLEVBQUU3YixHQUFFLENBQUEsRUFBR3RCLEVBQUUsQ0FBQ2c4RCxtQkFBa0IsRUFBTUcsZUFBZSxJQUFJbG9FLEtBQUsrTCxFQUFFbThELGdCQUFnQixJQUFJQyxvQkFBb0I5NkQsR0FBRSxDQUFFLEVBQUNuUSxFQUFFNk8sRUFBRW84RCxxQkFBcUIsT0FBbjZtQixTQUFZOWxFLEVBQUUwSixFQUFFLElBQUksTUFBTXRMLEVBQUUsU0FBUzRCLEdBQUdreUMsS0FBS3hvQyxFQUFFLFdBQVdnOEQsa0JBQWtCdG5FLEVBQUUsV0FBV3NMLEVBQUVzaUUsVUFBVXIzRSxHQUFFLEVBQUc4d0UsU0FBUzUrQyxFQUFFLG9CQUFvQjQwQixRQUFROTlDLEVBQUUsS0FBS3N1RSxnQkFBZ0JweEUsR0FBRSxFQUFHcXhFLGtCQUFrQjFzQyxFQUFFLE1BQU0yc0Msa0JBQWtCenNDLEVBQUUsTUFBTTBzQyxxQkFBcUJoaUUsRUFBRSxzQkFBc0I2N0QsSUFBSTc1QyxHQUFFLEVBQUdpNkMsS0FBSzlzRSxHQUFFLEVBQUdzbEUsTUFBTWwvQixHQUFFLElBQUssTUFBTXpnQyxFQUFFLENBQUNnekMsS0FBS3hvQyxFQUFFZzhELGtCQUFrQnRuRSxFQUFFNHRFLFVBQVVyM0UsRUFBRTh3RSxTQUFTNStDLEVBQUU0MEIsUUFBUTk5QyxFQUFFc3VFLGdCQUFnQnB4RSxFQUFFcXhFLGtCQUFrQjFzQyxFQUFFMnNDLGtCQUFrQnpzQyxFQUFFMHNDLHFCQUFxQmhpRSxFQUFFNjdELElBQUk3NUMsRUFBRWk2QyxLQUFLOXNFLEVBQUVzbEUsTUFBTWwvQixFQUFFbnlCLE9BQU94TixFQUFFbThELElBQUkzdUQsT0FBTzB1RCxLQUFLLEdBQUdybUMsT0FBTyxFQUFFMG9DLEtBQUssRUFBRUMsT0FBTyxFQUFFaUssWUFBWSxFQUFFSCxNQUFLLEVBQUdodkUsU0FBSSxFQUFPcWxFLE9BQU8zK0QsR0FBSSxJQUFHb2tELEdBQUdwa0QsS0FBS2xCLEtBQUtrQixFQUFFMEosR0FBR3hLLEVBQUVnOUQsTUFBTWw4RCxDQUFFLEVBQUNpb0UsU0FBU3hoRCxJQUFJdm5CLEVBQUV1cEUsWUFBYSxFQUFDTixTQUFTbm9FLEdBQUUsR0FBSUEsSUFBSWQsRUFBRXVwRSxZQUFZaGlELElBQUl2bkIsRUFBRXVwRSxZQUFhLEVBQUMxSSxVQUFVdDVDLEVBQUV2bkIsRUFBRXVwRSxZQUFZLEdBQUcsU0FBU2hpRCxFQUFFem1CLEdBQUdkLEVBQUVKLEtBQUssS0FBSyxLQUFLOHFFLE9BQU81cEUsR0FBRyxDQUFDLE9BQU9kLENBQUMsQ0FBL3RCLENBQWl1QmMsRUFBRTBKLEdBQUdBLEVBQUUyaUUsa0JBQWtCM2lFLEVBQUUyaUUsaUJBQWlCanVFLEdBQUcsTUFBTTh6QyxLQUFLdjlDLEVBQUVtSyxLQUFLK25CLEVBQUU2K0Msa0JBQWtCL25FLEVBQUVzcUUsT0FBT3B0RSxFQUFFc3RFLFNBQVMzb0MsRUFBRXVnQyxRQUFRcmdDLEVBQUV1bUMsSUFBSTc3RCxHQUFHaE0sRUFBRWd1QixFQUFFcHNCLEVBQUV3bUUsUUFBUTN3RSxPQUFPLEVBQUUwRCxHQUFHb0UsR0FBRyxXQUFXaEosRUFBMGIsR0FBdmIsU0FBU3FMLEVBQUUwSixHQUFHLE1BQU01SyxLQUFLVixFQUFFMmhFLFFBQVFwckUsRUFBRXUzRSxrQkFBa0JybEQsR0FBR25kLEVBQUUvTCxFQUFFa3BCLEVBQUs3bUIsRUFBRXdtRSxRQUFRM3dFLE9BQU8sSUFBSXVJLEVBQUcsZ0JBQWVULE9BQU9xQyxFQUFFeW1FLE9BQU81d0UsU0FBU3VJLEVBQUcsV0FBVSxDQUFDdytELEdBQUdDLEdBQUdDLEdBQUdDLEdBQUdDLElBQUkvd0QsUUFBUXZDLEdBQUcxSixFQUFFd21FLFFBQVFqaEUsU0FBU21FLEtBQUtwUSxJQUFJd3VFLElBQUlydUUsS0FBSyxvQkFBb0IsU0FBVXVHLEVBQUUwSixHQUFHLElBQUkxSixFQUFFbkssT0FBTyxPQUFPNlQsRUFBRTQrRCxNQUFLLEVBQUcsTUFBTXhwRSxLQUFLVixFQUFFMmhFLFFBQVFwckUsR0FBRytVLEVBQUUvVSxJQUFJLElBQUksSUFBSWt5QixFQUFFLEVBQUVBLEVBQUU3bUIsRUFBRW5LLE9BQU9neEIsSUFBSSxDQUFDLE1BQU1scEIsRUFBRXFDLEVBQUU2bUIsR0FBR2xwQixJQUFJUyxFQUFHLGtCQUFpQnlvQixFQUFFLFFBQVF1aEQsR0FBR3pxRSxFQUFFK0wsR0FBRy9VLElBQUksQ0FBQytVLEVBQUU0K0QsTUFBSyxDQUFHLENBQTdLLENBQStLdG9FLEVBQUV5bUUsT0FBTy84RCxHQUFHL1UsSUFBSXlKLEVBQUUsVUFBVSxDQUFoYixDQUFrYjRCLEVBQUU1QixHQUFNeW9CLEVBQUcsWUFBV3pjLEVBQUUsWUFBWSxhQUFhQSxFQUFFLENBQUMsT0FBTyxRQUFRLFVBQVUsVUFBVSxDQUFDLE9BQU8sV0FBVzNRLEtBQUssWUFBWW9CLElBQUl0QixJQUFJc3RCLEVBQUUsaUJBQWlCaHNCLElBQUl1eEIsSUFBSXZGLEVBQUcsV0FBVTdtQixFQUFFd21FLFFBQVFsdEUsSUFBSXd1RSxJQUFJcnVFLEtBQUssa0JBQWtCb3RCLEVBQUUsTUFBTTZZLE1BQU0xL0IsRUFBRTArQyxXQUFXN29ELFNBQVNreUUsR0FBRy9uRSxFQUFFMCtDLFdBQVcsWUFBWXRnRCxJQUFJNEIsRUFBRTIrQyxXQUFXOW9ELFFBQVFtSyxFQUFFMm1FLE1BQU0sSUFBSWpuQyxLQUFLMS9CLEVBQUUyK0MsV0FBVzlvRCxTQUFTa3lFLEdBQUcvbkUsRUFBRTIrQyxXQUFXLFlBQVl2Z0QsR0FBRzRCLEVBQUUybUUsTUFBTSxHQUFHam5DLEtBQUsxL0IsRUFBRTJtRSxNQUFNLEVBQUUsQ0FBQzkvQyxFQUFFLFFBQVEsSUFBSSxJQUFJbmQsRUFBRSxFQUFFQSxFQUFFMUosRUFBRTJtRSxNQUFNajlELElBQUltZCxFQUFHLEdBQUVuZCxFQUFFLEVBQUUsS0FBSyxVQUFVQSxJQUFJLENBQUMsT0FBTzFKLEVBQUUwK0MsV0FBVzdvRCxRQUFRbUssRUFBRTIrQyxXQUFXOW9ELFFBQVFtSyxFQUFFMm1FLFNBQVM5L0MsRUFBRSxNQUFNNlksS0FBS3QxQixHQUFHeWMsRUFBRSxXQUFXN21CLEVBQUVva0UsWUFBWWdFLEdBQUdwb0UsRUFBRW9rRSxZQUFZaG1FLEdBQUd5b0IsRUFBRSxRQUFRdHRCLElBQUlpbUMsSUFBSTNZLEVBQUUsTUFBTTJZLElBQUkzWSxFQUFFLEtBQUssQ0FBQ3lsRCxJQUFJdHNFLEVBQUVrOEQsS0FBSzk5RCxFQUFFODlELEtBQUtxUSxTQUFTLEdBQUdqekUsSUFBSThFLEVBQUU5RSxJQUFJOEUsRUFBRTlFLElBQUlrekUsY0FBUyxFQUFPLENBQXM2aUJDLENBQUc1bEQsRUFBRTdiLEdBQUUsQ0FBQSxFQUFHdEIsRUFBRSxDQUFDZzhELG1CQUFrQixJQUFRLENBQUMsTUFBTWdILEdBQUdwcEMsT0FBTyxJQUFJcXBDLEdBQUdycEMsT0FBTyxJQUFJc3BDLEdBQUd0cEMsT0FBTyxJQUFJdXBDLEdBQUd2cEMsT0FBTyxJQUFJd3BDLEdBQUd4cEMsT0FBTyxJQUFJeXBDLEdBQUd6cEMsT0FBTyxJQUFJMHBDLEdBQUcxcEMsT0FBTyxJQUFJMnBDLEdBQUczcEMsT0FBTyxJQUFJNHBDLEdBQUc1cEMsT0FBTyxJQUFJNnBDLEdBQUc3cEMsT0FBTyxJQUFJLElBQUk4cEMsR0FBRyxJQUFJQyxHQUFHRCxHQUFHLENBQUNWLENBQUNBLElBQUksY0FBY0MsQ0FBQ0EsSUFBSSxpQkFBaUJDLENBQUNBLElBQUksYUFBYUMsQ0FBQ0EsSUFBSSxlQUFlQyxDQUFDQSxJQUFJLGdCQUFnQkMsQ0FBQ0EsSUFBSSxnQkFBZ0JDLENBQUNBLElBQUksV0FBV0MsQ0FBQ0EsSUFBSSxRQUFRQyxDQUFDQSxJQUFJLGFBQWFDLENBQUNBLElBQUksbUJBQW1CL2xFLE9BQU9rbUUsc0JBQXNCRixJQUFJL25FLFNBQVNyRixJQUFJb2tELEdBQUdwa0QsR0FBR290RSxHQUFHcHRFLEVBQUUsSUFBSSxNQUFNdXRFLEdBQUd2dEUsRUFBRSxnQ0FBK0IsR0FBSXd0RSxHQUFHLENBQUNqTCxVQUFVNWlDLEVBQUVzZ0IsWUFBWWpnRCxHQUFHb3NCLEVBQUVwc0IsSUFBSXpHLEVBQUV5RyxHQUFHd2lFLFNBQVN4aUUsR0FBRyxRQUFRQSxFQUFFeWlFLGVBQWUsU0FBU3ppRSxFQUFFMEosR0FBRSxHQUFJLE9BQU8yakUsS0FBS0EsR0FBR3RrRSxTQUFTQyxjQUFjLFFBQVFVLEdBQUcyakUsR0FBRzFqRSxVQUFXLGFBQVkzSixFQUFFeEssUUFBUSxLQUFLLGNBQWM2M0UsR0FBR3o3QixTQUFTLEdBQUdrYSxhQUFhLFNBQVN1aEIsR0FBRzFqRSxVQUFVM0osRUFBRXF0RSxHQUFHempFLFlBQWEsRUFBQ3U2RCxtQkFBbUJua0UsR0FBR3FnRSxHQUFHcmdFLEVBQUUsY0FBY2t0RSxHQUFHN00sR0FBR3JnRSxFQUFFLG1CQUFtQm10RSxRQUFHLEVBQU85SyxhQUFhcmlFLEVBQUUwSixHQUFHLElBQUl0TCxFQUFFc0wsRUFBRUEsRUFBRTh4QyxHQUFHLEVBQUUsR0FBRzl4QyxHQUFHLElBQUl0TCxFQUFFLEdBQUcsbUJBQW1Cc0wsRUFBRXFsRCxJQUFJLENBQUMsR0FBRyxRQUFRL3VELEVBQUUsT0FBTyxFQUFFMEosRUFBRWdpQyxNQUFNN21CLE1BQU03a0IsR0FBRyxJQUFJQSxFQUFFMUYsTUFBTSxhQUFhMEYsRUFBRVcsTUFBTSxNQUFNWCxFQUFFbkcsUUFBUSxjQUFjbUcsRUFBRW5HLE1BQU00dUIsU0FBUywwQkFBMEJ6b0IsRUFBRW5HLE1BQU00dUIsYUFBYXJxQixFQUFFLEVBQUcsS0FBSSxxQkFBcUI3SSxLQUFLbVUsRUFBRXFsRCxNQUFNLFdBQVcvdUQsR0FBRyxlQUFlQSxJQUFJNUIsRUFBRSxRQUFRc0wsR0FBRyxJQUFJdEwsSUFBSSxrQkFBa0JzTCxFQUFFcWxELEtBQUssU0FBU3JsRCxFQUFFcWxELEtBQUssVUFBVXJsRCxFQUFFcWxELE1BQU0zd0QsRUFBRSxJQUFJLEdBQUcsSUFBSUEsRUFBRSxDQUFDLEdBQUcsUUFBUTRCLEVBQUUsT0FBTyxFQUFFLEdBQUcsU0FBU0EsRUFBRSxPQUFPLENBQUMsQ0FBQyxPQUFPNUIsQ0FBRSxFQUFDa2tFLGFBQWF2VCxJQUFJL3VELEVBQUV3N0MsR0FBRzl4QyxJQUFJLEdBQUcsSUFBSUEsRUFBRSxDQUFDLEdBQUcsYUFBYTFKLEdBQUcsVUFBVUEsRUFBRSxPQUFPLEVBQUUsR0FBR3V0RSxHQUFHdnRFLEdBQUcsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUd5dEUsR0FBRyxDQUFDenRFLEVBQUUwSixLQUFLLE1BQU10TCxFQUFFb2hDLEVBQUV4L0IsR0FBRyxPQUFPdS9ELEdBQUc5N0QsS0FBSzZFLFVBQVVsSyxJQUFHLEVBQUdzTCxFQUFFLEVBQUUsRUFBUWdrRSxHQUFHMXRFLEVBQUUsd0JBQXdCMnRFLEdBQUczdEUsRUFBRSxzREFBc0Q0dEUsR0FBRzV0RSxFQUFFLGNBQWM2dEUsR0FBRzd0RSxFQUFFLGdDQUErQixHQUFJOHRFLEdBQUcsQ0FBQzl0RSxFQUFFMEosSUFBSTAyRCxHQUFHcGdFLElBQUksWUFBWUEsRUFBRXlvQixRQUFRL3NCLGNBQWM2akUsR0FBRzcxRCxHQUFFLEdBQUksSUFBSTFKLEVBQUUxRixLQUFLb2xFLEdBQUcsQ0FBQyxJQUFJMS9ELEVBQUcsc0JBQXFCMEosU0FBUzFKLEVBQUUsTUFBTUEsRUFBRSt0RSxHQUFHLENBQUMvdEUsRUFBRTBKLEtBQUssSUFBSTFKLEVBQUUxRixNQUFNLElBQUkwRixFQUFFdWhFLFNBQVMsV0FBV3ZoRSxFQUFFK3VELEtBQUssVUFBVS91RCxFQUFFK3VELEtBQUtybEQsRUFBRTQ5RCxZQUFZLEVBQUUwRyxHQUFHLENBQUNodUUsSUFBSSxJQUFJQSxFQUFFMUYsTUFBTTBGLEVBQUUwckMsTUFBTXJtQyxTQUFTLENBQUNxRSxFQUFFdEwsS0FBSyxJQUFJc0wsRUFBRXBQLE1BQU0sVUFBVW9QLEVBQUUvSSxNQUFNK0ksRUFBRTdQLFFBQVFtRyxFQUFFMHJDLE1BQU10dEMsR0FBRyxDQUFDOUQsS0FBSyxFQUFFcUcsS0FBSyxPQUFPODVDLElBQUk4a0IsR0FBRyxTQUFRLEVBQUc3MUQsRUFBRXl5RCxLQUFLOEUsSUFBSXdNLEdBQUcvakUsRUFBRTdQLE1BQU00dUIsUUFBUS9lLEVBQUV5eUQsS0FBS3poQixVQUFVLEdBQUd5aEIsSUFBSXp5RCxFQUFFeXlELEtBQUssR0FBRyxHQUFHOFIsR0FBRyxDQUFDQyxNQUFNLEtBQUssQ0FBQ3hpQyxNQUFNLEtBQUt0cUMsS0FBSyxDQUFDcEIsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU02aUUsSUFBSXRzRSxFQUFFd25FLElBQUl0MUMsR0FBRzdtQixFQUFFLE9BQU8wSixFQUFFa29DLFNBQVMvN0MsU0FBUzZULEVBQUVrb0MsU0FBUy83QyxPQUFPLEdBQUcsQ0FBQzYxQyxNQUFNLENBQUM0ekIsR0FBR0MsR0FBRyxhQUFZLEVBQUcxNEMsR0FBR2x5QixHQUFHNHFFLEdBQUcsSUFBRyxLQUFNLEVBQUU1OEQsS0FBSyxDQUFDM0MsRUFBRTBKLEVBQUV0TCxLQUFLLE1BQU02aUUsSUFBSXRzRSxFQUFFd25FLElBQUl0MUMsR0FBRzdtQixFQUFFLE9BQU8wSixFQUFFa29DLFNBQVMvN0MsU0FBUzZULEVBQUVrb0MsU0FBUy83QyxPQUFPLEdBQUcsQ0FBQzYxQyxNQUFNLENBQUM0ekIsR0FBR0MsR0FBRyxlQUFjLEdBQUk1cUUsRUFBRWt3RSxHQUFHbHdFLEVBQUV5SixHQUFHLEVBQUV6SixFQUFFZ3JFLEdBQUd2aEUsRUFBRWdwRSxhQUFhNUosSUFBSSxDQUFDN29FLEdBQUdreUIsR0FBRzA0QyxHQUFHLElBQUcsS0FBTSxFQUFFd00sTUFBTSxDQUFDL3JFLEVBQUUwSixFQUFFdEwsS0FBSyxNQUFNekosRUFBRTgyRSxHQUFHenJFLEVBQUUwSixFQUFFdEwsR0FBRyxJQUFJekosRUFBRSsyQyxNQUFNNzFDLFFBQVEsSUFBSTZULEVBQUU2M0QsUUFBUSxPQUFPNXNFLEVBQUUsTUFBTW82RCxJQUFJbG9DLEdBQUduZCxFQUFFL0wsRUFBRVMsRUFBRThvRCxnQkFBZ0JyZ0MsR0FBRyxHQUFHLFVBQVVBLEdBQUcsYUFBYUEsR0FBRyxXQUFXQSxHQUFHbHBCLEVBQUUsQ0FBQyxJQUFJcUMsRUFBRTRzRSxHQUFHL3hFLEdBQUUsRUFBRyxHQUFHLFVBQVVnc0IsR0FBR2xwQixFQUFFLENBQUMsTUFBTVMsRUFBRThpRSxHQUFHeDNELEVBQUUsUUFBUSxHQUFHdEwsR0FBRyxHQUFHLElBQUlBLEVBQUU5RCxLQUFLMEYsRUFBRThzRSxRQUFRLEdBQUcxdUUsRUFBRXZFLE1BQU0sT0FBT3VFLEVBQUV2RSxNQUFNNHVCLFNBQVMsSUFBSSxRQUFRem9CLEVBQUUwc0UsR0FBRyxNQUFNLElBQUksV0FBVzFzRSxFQUFFMnNFLEdBQUcsTUFBTSxJQUFJLE9BQU85eEUsR0FBRSxRQUFRLFNBQVVtRixHQUFHLE9BQU9BLEVBQUUwckMsTUFBTTdtQixNQUFNN2tCLEtBQUssSUFBSUEsRUFBRTFGLE1BQU0sU0FBUzBGLEVBQUVXLE1BQU1YLEVBQUV5NkMsS0FBSyxJQUFJejZDLEVBQUV5NkMsSUFBSW5nRCxNQUFNMEYsRUFBRXk2QyxJQUFJK2tCLFdBQVksRUFBN0csQ0FBK0c5MUQsS0FBSzFKLEVBQUU4c0UsR0FBSSxLQUFJLFdBQVdqbUQsSUFBSTdtQixFQUFFNnNFLElBQUloeUUsSUFBSWxHLEVBQUVnMkUsWUFBWXZzRSxFQUFFdWdFLE9BQU8zK0QsR0FBRyxDQUFDLE9BQU9yTCxFQUFFKzJDLE1BQU0vMkMsRUFBRSsyQyxNQUFNei9CLFFBQVFqTSxLQUFLLElBQUlBLEVBQUVrSSxJQUFJNU4sTUFBTSxlQUFlMEYsRUFBRWtJLElBQUl1Z0IsV0FBVzl6QixDQUFDLEVBQUV1TCxHQUFHLENBQUNGLEVBQUUwSixFQUFFdEwsSUFBSThzRSxHQUFHbHJFLEVBQUUsRUFBRTVCLEdBQUdzTCxJQUFJLE1BQU1neEMsVUFBVS9sRCxHQUFHcUwsRUFBRSxJQUFJckwsRUFBRWtCLE9BQU8sT0FBTzZULEVBQUUsSUFBSXhCLElBQUkyZSxFQUFFaHRCLE1BQU04RCxHQUFHK0wsRUFBRWdpQyxNQUFNLEdBQUcsTUFBTXlpQyxhQUFhdHpFLEVBQUV1ekUsZ0JBQWdCNXVDLEVBQUU2dUMscUJBQXFCM3VDLEdBQUcsRUFBRTEvQixFQUFFMEosRUFBRXRMLEVBQUV6SixLQUFLLE1BQU1reUIsRUFBRSxHQUFHbHBCLEVBQUUsR0FBRzlDLEVBQUUsR0FBRyxJQUFJLElBQUkya0MsRUFBRSxFQUFFQSxFQUFFOTFCLEVBQUU3VCxPQUFPMnBDLElBQUksQ0FBQyxNQUFNcGhDLEVBQUVzTCxFQUFFODFCLEdBQUdrdUMsR0FBR3R2RSxHQUFHdkQsRUFBRWlFLEtBQUtWLEdBQUd3dkUsR0FBR3h2RSxHQUFHZ2lFLEdBQUdwZ0UsR0FBRzZ0RSxHQUFHN3RFLEVBQUV5b0IsU0FBUzVCLEVBQUUvbkIsS0FBS1YsR0FBR1QsRUFBRW1CLEtBQUtWLElBQUl5b0IsRUFBRS9uQixLQUFLVixHQUFHVCxFQUFFbUIsS0FBS1YsSUFBSXV2RSxHQUFHdnZFLEdBQUdULEVBQUVtQixLQUFLVixHQUFHeW9CLEVBQUUvbkIsS0FBS1YsRUFBRSxDQUFDLE1BQU0sQ0FBQyt2RSxhQUFhdG5ELEVBQUV1bkQsZ0JBQWdCendFLEVBQUUwd0UscUJBQXFCeHpFLEVBQUcsRUFBelAsQ0FBMlBnc0IsRUFBRWx5QixHQUFHLEdBQUc2cUMsRUFBRWo2QixTQUFTLFdBQVdzaEIsRUFBRWluRCxHQUFHam5ELEVBQUUsa0JBQWtCMlksRUFBRWo2QixTQUFTLFlBQVlzaEIsRUFBRWluRCxHQUFHam5ELEVBQUUsY0FBYzJZLEVBQUUzcEMsU0FBUzhILEVBQUVnaUUsR0FBR3ZoRSxFQUFFdWdFLE9BQU9vTyxJQUFJLENBQUNwdkUsRUFBRThGLEtBQUs2RSxVQUFVazNCLE9BQU8za0MsRUFBRWhGLFFBQVF1cUUsR0FBR3Y1QyxLQUFLZ25ELEdBQUdobkQsRUFBRTRCLFdBQVc5cUIsRUFBRWdpRSxHQUFHdmhFLEVBQUV1Z0UsT0FBT3FPLElBQUksQ0FBQ3J2RSxFQUFFOEYsS0FBSzZFLFVBQVV6TixNQUFNNmtDLEVBQUU3cEMsT0FBTyxDQUFDLE1BQU1tSyxFQUFFMC9CLEVBQUVwbUMsSUFBSStuQyxJQUFHNW5DLEtBQUssSUFBSW90QixFQUFFdTVDLEdBQUd2NUMsR0FBRzA0QyxHQUFJLEdBQUUxNEMsRUFBRTRCLFVBQVV6b0IsS0FBSSxHQUFJMC9ELEdBQUcsQ0FBQyxJQUFJNzRDLEVBQUcsUUFBTzdtQixNQUFNLENBQUMsTUFBTSxDQUFDMHJDLE1BQU0sQ0FBQzR6QixHQUFHejRDLEVBQUVscEIsSUFBSSxJQUFJaUYsS0FBSyxDQUFDNUMsRUFBRTBKLEVBQUV0TCxLQUFLLENBQUNzdEMsTUFBTSxHQUFHaS9CLFlBQVl2c0UsRUFBRXVnRSxPQUFPc08sT0FBYXFCLEdBQUdsbkUsT0FBT3d5QixPQUFPLE1BQU0sU0FBUzIwQyxHQUFHdnVFLEVBQUUwSixHQUFHLElBQUk2MUIsR0FBRXYvQixHQUFHLENBQUMsSUFBSUEsRUFBRTBoRCxTQUFTLE9BQU94bEIsR0FBRWw4QixFQUFFQSxFQUFFMkosU0FBUyxDQUFDLE1BQU12TCxFQUFFNEIsRUFBRXJMLEVBQUUyNUUsR0FBR2x3RSxHQUFHLEdBQUd6SixFQUFFLE9BQU9BLEVBQUUsR0FBRyxNQUFNcUwsRUFBRSxHQUFHLENBQUMsTUFBTTBKLEVBQUVYLFNBQVMrekIsY0FBYzk4QixHQUFHQSxFQUFFMEosRUFBRUEsRUFBRUMsVUFBVSxFQUFFLENBQUMsTUFBTXV5RCxLQUFLcjFDLEdBQUcsU0FBUzdtQixFQUFFMEosRUFBRSxJQUFJLE9BQU9taUUsR0FBRzdyRSxFQUFFZ0wsR0FBRSxDQUFBLEVBQUd3aUUsR0FBRzlqRSxFQUFFLENBQUNtOEQsZUFBZSxDQUFDa0ksTUFBTUMsTUFBTXRrRSxFQUFFbThELGdCQUFnQixJQUFJQyxvQkFBb0I5NkQsR0FBRSxDQUFFLEVBQUNpakUsR0FBR3ZrRSxFQUFFbzhELHFCQUFxQixJQUFJVixlQUFlLE9BQU8sQ0FBdkssQ0FBeUtwbEUsRUFBRWdMLEdBQUUsQ0FBQzI2RCxhQUFZLEVBQUdsdUIsYUFBUSxFQUFPaXJCLE9BQU94bUMsSUFBR3h5QixJQUFJL0wsRUFBRSxJQUFJbTNDLFNBQVMsTUFBTWp1QixFQUFuQixDQUFzQjJzQyxJQUFJLE9BQU83MUQsRUFBRW9wRCxLQUFJLEVBQUd1bkIsR0FBR2x3RSxHQUFHVCxDQUFDLENBQUNtcEQsR0FBR3luQixvVUFBeC80RCx5MENBQVIsMEtBQVIseWdCR00xNmlFQyxHQUFBLENBQ1g5dkIsV0FBWSxDQUNYLEVBQ0RoVCxNQUFPLENBQ1Z2ckMsR0FBSXZKLE9BQ0o2M0UsV0FBWTczRSxPQUNaODNFLDBCQUEyQno1QixRQUMzQjA1QixpQkFBa0IvM0UsT0FDbEJnNEUsdUJBQXdCOTVCLFNBQ3hCKzVCLHlCQUEwQi81QixVQUV2QjdHLE1BQU8sQ0FBQyxRQUFTLFNBQVUsU0FBVSxpQkFBa0IsUUFFdkQ4UCxVQUNDLEVBQ0RJLGdCQUNIdnBELEtBQUs2NEIsTUFBTTZELGNBQ1AsRUFDRHA0QixLQUFJLEtBQ0EsQ0FDSHUwQixNQUFPLEtBQ1BxaEQsY0FBZSxLQUNmQyxXQUFXLElBS1o1OEQsc0JBQ0d2ZCxLQUFLNmxDLE9BQ1g1YyxZQUFZRyxNQUFNcHBCLEtBQUtvbkQsT0FBVyxHQUM5QixFQUNENEIsUUFBUyxDQUNabmpCLEtBQU10b0IsaUJBQ0YsSUFBSW5PLEVBQVNvYyxzQkFBc0JDLGFBQy9CMnVELEVBQWNwNkUsS0FBS3E2RSxnQkFBZ0JqckUsR0FDbkNwUCxLQUFLODVFLDJCQUNaOTVFLEtBQUtzNkUsZ0JBQWdCbHJFLFNBRVpwUCxLQUFLdTZFLFdBQVdILEVBQ3pCLEVBQ0RJLGFBQWNqOUQsZUFBZXRNLEdBQ3pCLEdBQWtCLE1BQWRqUixLQUFLNjRCLE1BQWlCLE9BQU8sS0FFakMsYUFEcUI3NEIsS0FBSzY0QixNQUFNMEQsYUFFbkMsRUFDRGsrQyxtQkFBb0JsOUQsZUFBZW05RCxFQUFXenBFLEdBQzFDLEdBQWtCLE1BQWRqUixLQUFLNjRCLE1BQWlCLE9BQzFCLElBQUk4aEQsUUFBaUIzNkUsS0FBSzY0QixNQUFNMEQsY0FDaENxK0MsWUFBWUQsRUFBVUQsRUFDekIsRUFDREosZ0JBQWlCLFNBQVNsckUsR0FDdEIsSUFBSWdyRSxFQUFjcDZFLEtBQUtxNkUsZ0JBQWdCanJFLEdBQ3ZDb2Msc0JBQXNCNkIsaUJBQWlCcnRCLEtBQUt1TCxJQUFLbWlCLElBQzlCLEdBQWxCMXRCLEtBQUttNkUsWUFDTG42RSxLQUFLbTZFLFdBQVksR0FHckIsSUFBSVUsRUFBa0I3NkUsS0FBS3E2RSxnQkFBZ0Izc0QsR0FDdkNtdEQsR0FBbUJULEdBSXZCQSxFQUFjUyxFQUNkNzZFLEtBQUs4NkUsYUFBYUQsSUFKZFQsRUFBY1MsQ0FJZ0IsSUFDNUIsRUFDTixFQUNEUixnQkFBaUIsU0FBU2pyRSxHQUN0QixJQUFJcWYsRUFVSixPQVRtQyxNQUEvQnp1QixLQUFLZzZFLHdCQUNFLE1BQVY1cUUsSUFDQUEsRUFBU29jLHNCQUFzQkMsY0FFbkNnRCxFQUFhenVCLEtBQUtnNkUsdUJBQXVCNXFFLElBRXpDcWYsRUFBYXBFLG1CQUFtQnlELGlCQUdyQixHQUFFOXRCLEtBQUsrNUUsb0JBQW9CdHJELEdBQ3RDLEVBQ0Q4ckQsV0FBWWg5RCxlQUFlNjhELEdBQ3ZCLElBQUlXLEVBQVlwaUQsY0FDWmtoRCxFQUFhNzVFLEtBQUs2NUUsV0FDSixNQUFkQSxJQUNQQSxFQUFha0IsRUFBVXQvQyxVQUFVRSxZQUU5QjM3QixLQUFLNjRCLE1BQVFraUQsRUFBVS8rQyxTQUFTNjlDLEdBQ2hDLElBQUlsckMsRUFBSzN1QyxLQUNUQSxLQUFLNjRCLE1BQU1pRSxjQUFjLFVBQVUsU0FBU2srQyxFQUFlM3hDLEdBQzlEc0YsRUFBR3NzQyxVQUFVRCxFQUFlM3hDLEVBQ3pCLElBQ0EsSUFBSTZ3QyxRQUFzQmw2RSxLQUFLazdFLGtCQUFrQmQsR0FDakRwNkUsS0FBSzY0QixNQUFNc0QsVUFBVW44QixLQUFLdW5ELE1BQWEsTUFBRzJ5QixFQUM3QyxFQUNEWSxhQUFjdjlELGVBQWU2OEQsR0FDekIsSUFBSUYsUUFBc0JsNkUsS0FBS2s3RSxrQkFBa0JkLEdBQ2pEcDZFLEtBQUs2NEIsTUFBTThELFlBQVl1OUMsRUFDMUIsRUFDRGlCLHFCQUFzQixTQUFTakIsR0FDM0JsNkUsS0FBSzY0QixNQUFNOEQsWUFBWXU5QyxFQUMxQixFQUNEa0Isb0JBQXFCLFNBQVNubEUsR0FDWixNQUFWQSxHQUNKalcsS0FBSzY0QixNQUFNZ0UsYUFBYTVtQixFQUMzQixFQUNEaWxFLGtCQUFtQjM5RCxlQUFlNjhELEdBQzlCLElBQUlGLEVBT0osT0FMSEEsRUFEd0MsTUFBakNsNkUsS0FBS2k2RSwrQkFDVXR3RCxlQUFleUMsYUFBYWd1RCxTQUU1QnA2RSxLQUFLaTZFLHlCQUF5QkcsR0FFakRwNkUsS0FBSzRuRCxNQUFNLGlCQUFrQnN5QixHQUN0QkEsQ0FDVixFQUNEZSxVQUFXLFNBQVNELEdBQWV6a0UsTUFBRUEsRUFBS0MsTUFBRUEsSUFDeEN4VyxLQUFLbTZFLFdBQVksRUFDVixNQUFNdnVELEVBQVFWLE9BQU8zVSxFQUFNMjVDLEtBQ3JCMlosRUFBTTMrQyxPQUFPM1UsRUFBTWtMLEtBRWhDLElBQUk0NUQsRUFBbUIsQ0FBRTN2RCxZQUFhbEIsT0FBT2hsQixTQUFTb21CLEVBQU0wdkQsUUFBUzN2RCxVQUFXbkIsT0FBT2hsQixTQUFTcWtFLEVBQUl5UixTQUNwR2xyRCxzQkFBc0JVLFdBQVduQixjQUFjQyxhQUFjeXJELEVBQWtCcjdFLEtBQUt1TCxJQUNwRnZMLEtBQUs0bkQsTUFBTSxPQUFReXpCLEVBQ3ZCLGtiQ2hIS0UsRUFBVXI0QixHQUFJLE1BTWRzNEIsRUFBWXQ0QixHQUFJLElBQ2hCdTRCLEVBQW1CdjRCLEdBQUksSUFDdkJ3NEIsRUFBb0J4NEIsR0FBSSxDQUFBLEdBUzlCLFNBQVN5NEIsSUFDTCxPQUE2QixNQUF6QjdrQyxFQUFNOGtDLGdCQUNOOWtDLEVBQU03bEMsUUFBUSxHQUVYNmxDLEVBQU04a0MsZUFDakIsQ0FFQSxTQUFTQyxFQUFvQkQsR0FDRixNQUFuQkEsSUFDUEEsRUFBa0JELEtBRWZELEVBQWtCejJFLE1BQVEyMkUsRUFDVyxNQUFqQ0YsRUFBa0J6MkUsTUFBTUEsUUFDL0J5MkUsRUFBa0J6MkUsTUFBTUEsTUFBUTIyRSxFQUFnQjFtRSxNQUVqRCxDQVdBLFNBQVM0bUUsRUFBK0JGLEdBSXBDLElBQUkzMkUsRUFNSixPQVR1QixNQUFuQjIyRSxJQUNQQSxFQUFrQkQsS0FJbEIxMkUsRUFETzIyRSxFQUFnQjMyRSxNQUNmMjJFLEVBQWdCMzJFLE1BRWhCMjJFLEVBQWdCMW1FLE1BRWRqUSxDQUNYLENBcEJBK2tELElBQU0sSUFBTWxULEVBQU04a0Msa0JBQWlCLENBQUNHLEVBQVdqMkQsS0FDM0MrMUQsRUFBb0JFLEdBQ3BCLElBQUlDLEVBQWFULEVBQVF0MkUsTUFDckJBLEVBQVE2MkUsRUFBK0JDLEdBQzlDdDZFLEVBQUV1NkUsR0FBWTEwRSxJQUFJckMsR0FDbEJ4RCxFQUFFdTZFLEdBQVk1MUQsUUFBUSxTQUFTLEdBRTdCLENBQUUwNEIsTUFBTyxRQWdDWixJQUFJbTlCLEdBQW9CLEVBNkN4QixTQUFTQyxLQS9CVCxXQUlJLEdBSEFWLEVBQVV2MkUsTUFBUSxHQUNsQncyRSxFQUFpQngyRSxNQUFRLEdBRUosTUFBakI2eEMsRUFBTTdsQyxRQUFtQixPQUM3QixJQUFJa3JFLEVBQWMsQ0FBQSxFQUNsQnJsQyxFQUFNN2xDLFFBQVFSLFNBQVMyckUsSUFDMUIsSUFBSUMsRUFBUSxJQUFLRCxHQUNFLEdBQWZDLEVBQU1wM0UsT0FBNkIsS0FBZm8zRSxFQUFNcDNFLFFBQzFCbzNFLEVBQU1wM0UsTUFBUSxNQUVDLE1BQWZvM0UsRUFBTXAzRSxRQUNObzNFLEVBQU1wM0UsTUFBUW8zRSxFQUFNbm5FLE9BRUosTUFBaEJrbkUsRUFBT0UsTUFDUGQsRUFBVXYyRSxNQUFNaUYsS0FBS215RSxJQUVZLE1BQTdCRixFQUFZQyxFQUFPRSxTQUMxQkgsRUFBWUMsRUFBT0UsT0FBUyxDQUFFQSxNQUFPRCxFQUFNQyxNQUFPcnJFLFFBQVMsS0FFeERrckUsRUFBWUMsRUFBT0UsT0FBT3JyRSxRQUFRL0csS0FBS215RSxHQUMzQyxJQUVHWixFQUFpQngyRSxNQUFRMGtCLGVBQWVPLGdCQUFnQml5RCxFQUU1RCxDQU9JSSxHQUNBVixHQUNKLENBOUNBN3hCLElBQU0sSUFBTWxULEVBQU03bEMsVUFBUyxDQUFDdXJFLEVBQWUxMkQsS0FDWCxHQUF4Qmd4QixFQUFNMmxDLGdCQUEyQyxNQUFqQkQsR0FDcENOLEdBQVcsR0FDWixDQUFFcDlCLE1BQU8sUUFFWjZpQixJQUFVLEtBQ0Q3cUIsRUFBTTdsQyxVQUNONmxDLEVBQU0ybEMsZ0JBQW1CUixHQUM3QkMsSUFDRCxJQThCSmx5QixHQUFNLENBQUN3eEIsRUFBV0MsSUFBbUIsQ0FBQ00sRUFBV2oyRCxLQUM3Q3dXLEdBQVEsR0FDVCxDQUFFd2lCLE1BQU8sU0FPWixNQUFNeGlCLEVBQVMsS0FDWCxJQUFJMC9DLEVBQWFULEVBQVF0MkUsTUFDQSxHQUFyQmczRSxHQUNQMWtELElBRVE5MUIsRUFBRXU2RSxHQUFZeDFELFNBQVMsK0JBQy9CL2tCLEVBQUV1NkUsR0FBWVQsUUFBUSxDQUNsQm5vRSxNQUFPLE9BQ1BDLE9BQVEsUUFDUnFwRSxNQUFPLGNBQ1BDLGVBQWdCbDdFLEVBQUV1NkUsR0FBWXRrRSxTQUM5QmtsRSxtQkFBb0IsSUFFeEJuN0UsRUFBRXU2RSxHQUFZMXdFLEdBQUcsa0JBQWtCLFNBQVVGLEdBQ3pDLElBQ0luRyxFQURPbUcsRUFBRVAsT0FBT3ZHLEtBQ0h1VyxRQUFRbzZCLE9BQ3JCNG5DLEVBbkZULFNBQWtDNTNFLEdBQ2pCLE1BQVRBLElBQ1BBLEVBQVE2MkUsS0FHTCxJQUFJTSxFQUFTWixFQUFVdjJFLE1BQU15RCxNQUFNM0ksR0FBTUEsRUFBRWtGLE9BQVNBLElBQ3BELEdBQWMsTUFBVm0zRSxFQUFrQixPQUFPQSxFQUM3QixJQUFLLElBQUluMkUsRUFBSSxFQUFHQSxFQUFJdzFFLEVBQWlCeDJFLE1BQU1oRSxPQUFRZ0YsR0FBSyxFQUczRCxHQURBbTJFLEVBRFFYLEVBQWlCeDJFLE1BQU1nQixHQUNwQmdMLFFBQVF2SSxNQUFNM0ksR0FBTUEsRUFBRWtGLE9BQVNBLElBQzVCLE1BQVZtM0UsRUFDQSxPQUFPQSxFQUdSLE9BQU8sSUFDWCxDQW9Fb0JVLENBQXlCNzNFLEdBQ3BDbTNFLEVBQVN0bEMsRUFBTTdsQyxRQUFRdkksTUFBTTNJLEdBQU1BLEVBQUVtVixPQUFTMm5FLEVBQVMzbkUsUUFDdkRqUSxHQUFTNnhDLEVBQU04a0Msa0JBR3RCbnJELEVBQUsseUJBQTBCMnJELEdBQy9CM3JELEVBQUssZ0JBQWlCMnJELEdBRXZCLEtBRUdILEdBQW9CLENBQUssRUFPN0IsU0FBUzFrRCxJQUNMLElBQ0g5MUIsRUFBRTg1RSxFQUFRdDJFLE9BQU9zMkUsUUFBUSxXQUN6Qjk1RSxFQUFFODVFLEVBQVF0MkUsT0FBT3FYLElBQUksaUJBSWxCLENBSEUsTUFBTXRZLEdBQ1hDLFFBQVFDLE1BQU0sc0NBQ2RELFFBQVFDLE1BQU1GLEVBQ1gsQ0FDSixRQVZBMHVELEVBQWEsQ0FBRXAyQixXQVlmd2xDLElBQWdCLEtBQ1p2cUMsR0FBUyx5bEJDdkhFd2xELEdBQUEsQ0FDWGp6QixXQUFZLENBQ2YsZ0JBQWlCa3pCLElBRWRsbUMsTUFBTyxDQUNWdnJDLEdBQUl2SixPQUNKaTdFLGVBQWdCNThCLFNBRWIySixNQUFPLENBQ1ZpekIsZUFBa0IsU0FBUzMxRSxFQUFLNDFFLEdBQ2pCLEdBQVA1MUUsRUFDUHRILEtBQUttOUUsZ0JBQ2tDLE1BQXpCbjlFLEtBQUtvaUIsbUJBQ25CTyxjQUFjM2lCLEtBQUtvaUIsa0JBQ25CcGlCLEtBQUtvaUIsaUJBQW1CLEtBRXpCLEdBRUdpM0IsTUFBTyxDQUFDLGdCQUVSOFAsVUFDQyxFQUVEM0QsVUFDSCxJQUFJOTVCLEVBQWNyQixtQkFBbUJDLGNBQWMsZUFDL0NxQixFQUFZdEIsbUJBQW1CQyxjQUFjLGFBQzlCLE1BQWZvQixHQUFvQyxNQUFiQyxHQUdoQnlFLHNCQUFzQlUsV0FBV25CLGNBQWNDLGFBQWMsQ0FBRWxFLFlBQWFsQixPQUFPaGxCLFNBQVNrbUIsR0FBY0MsVUFBV25CLE9BQU9obEIsU0FBU21tQixJQUFjM3JCLEtBQUtvbkQsT0FBTzc3QyxJQUUxSyxJQUFJb2pDLEVBQUszdUMsS0FDTG85RSxFQUFlLENBQUNDLEVBQVFDLElBQ2pCQyxVQUFVOTdFLEVBQUV6QixLQUFLdW5ELE1BQU04MUIsSUFBVSxDQUMzQ0csWUFBWSxFQUNaQyxXQUFZLFlBS1pDLFdBQVcsRUFDWEMsWUFBWSxFQUdaQyxTQUFVLFNBQVNDLEVBQWVDLEVBQVNuNEIsR0FDdkNoWCxFQUFHb3ZDLGNBQWUsRUFDbEJwdkMsRUFBR3F2QyxXQUFhcnZDLEVBQUdzdkMsZ0JBQWdCSixjQUFjLEdBQUdyekUsVUFBWW1rQyxFQUFHdXZDLGNBQWNMLGNBQWMsR0FBR3J6RSxTQUV0RyxJQUdEeEssS0FBS2krRSxnQkFBa0JiLEVBQWEsY0FDcENwOUUsS0FBS2srRSxjQUFnQmQsRUFBYSxZQUMzQmh0RCxzQkFBc0JXLGdCQUFnQi93QixLQUFLb25ELE9BQU83N0MsR0FBSW9rQixjQUFjQyxjQUFlbEMsR0FBZTF0QixLQUFLbStFLGtCQUFrQnp3RCxLQUFhLEdBSTdJekUsWUFBWUcsTUFBTXBwQixLQUFLb25ELE9BQVcsSUFDOUJwbkQsS0FBS2k5RSxnQkFDTGo5RSxLQUFLbTlFLGVBRUwsRUFHRG4wQixRQUFTLENBQ1ptMEIsY0FBZSxXQUNYbjlFLEtBQUtvaUIsaUJBQW1CMEIsYUFBWSxLQUN2QyxJQUFJN2UsRUFBUWpGLEtBQUtvK0Usc0JBQXNCbjVFLE1BQ25DakYsS0FBS2k5RSxnQkFBMkIsTUFBVGg0RSxHQUEwQixVQUFUQSxJQUN4Q2pGLEtBQUtxK0Usc0JBQXVCLEVBQzVCcitFLEtBQUtzK0Usb0JBQW1CLEdBQzVCLEdBQ3NDLElBQWhDdCtFLEtBQUt1K0UseUJBRVgsRUFDREMscUJBQXNCLFNBQVMzekQsR0FDM0IsSUFBSUMsRUFBb0IsSUFBZEQsRUFFTkUsRUFEVSxJQUFJbnJCLEtBQUtrckIsR0FDSUUsb0JBQ3ZCQyxFQUFnQkMsT0FBT0MsR0FBR0wsRUFBS00sZUFBZUMsUUFJbEQsT0FEZSxJQUFJenJCLEtBQUtrckIsRUFEUyxLQURYRyxFQUFnQkYsR0FDRSxHQUczQyxFQUNEMHpELG9CQUFxQixTQUFTQyxFQUFNNStFLEdBQ2hDLElBQUlnckIsRUFBTTR6RCxFQUFLbDBFLFVBQ1h1Z0IsRUFBZTJ6RCxFQUFLMXpELG9CQUNwQkMsRUFBZ0JDLE9BQU9DLEdBQUdMLEVBQUtNLGVBQWVDLFFBSWxELE9BRGMsSUFBSXpyQixLQUFLa3JCLEVBRFUsS0FEWEcsRUFBZ0JGLEdBQ0UsR0FHM0MsRUFDTW96RCxrQkFBbUIsU0FBUy91RSxHQUN4QixJQUFJdXZFLEVBQW9CLytFLEtBQUs2cUIsTUFFekJtMEQsRUFBc0JELEVBQW9CLEtBQ3RCLE1BQXBCdnZFLEVBQU91YyxXQUEyQyxNQUF0QnZjLEVBQU9zYyxhQUM5Q2xCLE9BQU9obEIsU0FBUzRKLEVBQU91YyxXQUFhbkIsT0FBT2hsQixTQUFTNEosRUFBT3NjLGNBQzlEdGMsRUFBT3NjLFlBQWNsQixPQUFPaGxCLFNBQVM0SixFQUFPc2MsYUFDNUN0YyxFQUFPdWMsVUFBWW5CLE9BQU9obEIsU0FBUzRKLEVBQU91YyxXQUM1Qmd6RCxFQUF1QyxJQUFuQnZ2RSxFQUFPdWMsVUFDM0JpekQsRUFBMkMsSUFBckJ4dkUsRUFBT3NjLGNBRTdCdGMsRUFBT3VjLFVBQVkzckIsS0FBSzYrRSxnQkFBZ0JGLEdBQ3hDdnZFLEVBQU9zYyxZQUFjMXJCLEtBQUs2K0UsZ0JBQWdCRCxHQUN4RHYwRCxtQkFBbUJpRixlQUFlbGdCLEdBQ3BCcFAsS0FBSzgrRSxrQkFBa0IxdkUsRUFBUXBQLEtBQUtvbkQsT0FBTzc3QyxLQUl0RHZMLEtBQUtpK0UsZ0JBQWdCYyxRQUFRLytFLEtBQUt3K0UscUJBQXFCcHZFLEVBQU9zYyxjQUM5RDFyQixLQUFLaytFLGNBQWNhLFFBQVEvK0UsS0FBS3crRSxxQkFBcUJwdkUsRUFBT3VjLFlBS3JEM3JCLEtBQUtnL0Usc0JBQXNCSixFQUFxQkQsR0FDaEQzK0UsS0FBS2kvRSxhQUFlLENBQUV2ekQsWUFBYXRjLEVBQU9zYyxZQUFhQyxVQUFXdmMsRUFBT3VjLFdBQy9DLEdBQTdCM3JCLEtBQUtxK0Usc0JBQ1pyK0UsS0FBS2svRSxzQkFBc0JsL0UsS0FBS2kvRSxjQUV0QmovRSxLQUFLKzlFLGNBQWUsRUFDM0IvOUUsS0FBS3ErRSxzQkFBdUIsRUFDNUJoMEQsbUJBQW1CaUYsZUFBZXR2QixLQUFLaS9FLGFBQ25DLEVBQ0RELHNCQUF1QixTQUFTRyxFQUFXQyxHQUN2QyxJQUFJQyxFQUFXci9FLEtBQUtzL0Usb0JBQ3BCLE1BQU1DLEVBQVksR0FDWjkwRCxFQUFNenFCLEtBQUs2K0UsZ0JBQWdCai9FLEtBQUs2cUIsT0FDaEMrMEQsRUFBWXgvRSxLQUFLNitFLGdCQUFnQk8sR0FDakNLLEVBQWN6L0UsS0FBSzYrRSxnQkFBZ0JNLEdBR3JDbi9FLEtBQUswL0UsV0FBV0YsRUFBVy8wRCxFQUFLODBELEdBQzVCdi9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNNLE1BQU9KLEdBQ25Edi9FLEtBQUs0L0Usa0JBQW9CLFFBQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNRLE9BQVFOLEdBQzNEdi9FLEtBQUs0L0Usa0JBQW9CLFNBQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNTLEtBQU1QLEdBQ3pEdi9FLEtBQUs0L0Usa0JBQW9CLE9BQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNVLElBQUtSLEdBQ3hEdi9FLEtBQUs0L0Usa0JBQW9CLE1BQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNXLEtBQU1ULEdBQ3pEdi9FLEtBQUs0L0Usa0JBQW9CLE9BQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNZLE1BQU9WLEdBQzFEdi9FLEtBQUs0L0Usa0JBQW9CLFFBQ2xCNS9FLEtBQUswL0UsV0FBV0QsRUFBYWgxRCxFQUFNNDBELEVBQVNhLEtBQU1YLEdBQ3pEdi9FLEtBQUs0L0Usa0JBQW9CLE9BRXpCNS9FLEtBQUs0L0Usa0JBQW9CLFNBRzdCNS9FLEtBQUs0L0Usa0JBQW9CLFNBRzdCNS9FLEtBQUttZ0YsaUJBQWlCMXZFLFNBQVFvSyxJQUM1QkEsRUFBUXlyQixrQkFBbUIsRUFDeEJ6ckIsRUFBUTVWLE9BQVNqRixLQUFLNC9FLG9CQUN2QjUvRSxLQUFLbytFLHFCQUF1QnZqRSxFQUM1QkEsRUFBUXlyQixrQkFBbUIsRUFDN0IsR0FFTCxFQUNEd0ssTUFBTyxXQWNWLElBQUlzdkMsRUFBUXBnRixLQUFLNitFLGdCQUFnQmovRSxLQUFLNnFCLE9BQ2xDNDFELEVBQWFyZ0YsS0FBS3krRSxvQkFBb0J6K0UsS0FBS2krRSxnQkFBZ0JKLGNBQWMsSUFDekVueUQsRUFBYzFyQixLQUFLNitFLGdCQUFnQndCLEVBQVc3MUUsV0FDOUM4MUUsRUFBV3RnRixLQUFLeStFLG9CQUFvQnorRSxLQUFLaytFLGNBQWNMLGNBQWMsSUFDckVseUQsRUFBWTNyQixLQUFLNitFLGdCQUFnQnlCLEVBQVM5MUUsV0FDMUNtaEIsRUFBWXkwRCxJQUNuQnowRCxFQUFZeTBELEdBRUYsSUFBSWh4RSxFQUFTLENBQUVzYyxjQUFjQyxhQUM3QjNyQixLQUFLOCtFLGtCQUFrQjF2RSxFQUMxQixFQVdEa3ZFLG1CQUFvQixTQUFTaUMsR0FDekIsSUFDSUMsRUFEV3hnRixLQUFLcy9FLG9CQUNNdC9FLEtBQUtvK0UscUJBQXFCbjVFLE9BQ2hEMG1CLEVBQVkzckIsS0FBSzYrRSxnQkFBZ0JqL0UsS0FBSzZxQixPQUV0Q3JiLEVBQVMsQ0FBRXNjLFlBREdDLEVBQVk2MEQsRUFDVzcwRCxVQUFXQSxFQUFXNDBELGdCQUMvRHZnRixLQUFLOCtFLGtCQUFrQjF2RSxFQUMxQixFQUNEa3dFLGtCQUFtQixXQUVmLE1BQU8sQ0FDSEssTUFBT3p2QixJQUNQMnZCLE9BQVEzdkIsS0FDUjR2QixLQUFNNXZCLEtBQ042dkIsSUFBSy8vRSxLQUFLeWdGLHVCQUNWVCxLQUFNaGdGLEtBQUswZ0Ysd0JBQ1hULE1BQU9qZ0YsS0FBSzJnRix5QkFDWlQsS0FBTWxnRixLQUFLNGdGLHdCQUVsQixFQUNEL0IsZ0JBQWlCLFNBQVNnQyxHQUN0QixPQUFPcjJELE9BQU9obEIsU0FBU3E3RSxFQUFTLElBQ25DLEVBQ0RuQixXQUFZLFNBQVN6MkUsRUFBR3NSLEVBQUdnbEUsR0FDdkIsT0FBT3QyRSxHQUFLc1IsRUFBSWdsRSxHQUFhdDJFLEdBQUtzUixDQUNyQyxFQUNEa21FLHFCQUFzQixXQUNsQixJQUFJM3JFLEVBQUksSUFBSWxWLEtBQ1osT0FBT0ksS0FBSzYrRSxnQkFBZ0JqL0UsS0FBSzZxQixNQUFRM1YsRUFBRWlxRSxRQUFRanFFLEVBQUU1VSxVQUFZLEdBQ3BFLEVBQ0R3Z0Ysc0JBQXVCLFdBQ25CLElBQUk1ckUsRUFBSSxJQUFJbFYsS0FDWixPQUFPSSxLQUFLNitFLGdCQUFnQmovRSxLQUFLNnFCLE1BQVEzVixFQUFFaXFFLFFBQVFqcUUsRUFBRTVVLFVBQVksR0FDcEUsRUFDRHlnRix1QkFBd0IsV0FDcEIsSUFBSTdyRSxFQUFJLElBQUlsVixLQUNaLE9BQU9JLEtBQUs2K0UsZ0JBQWdCai9FLEtBQUs2cUIsTUFBUTNWLEVBQUVnc0UsU0FBU2hzRSxFQUFFN1UsV0FBYSxHQUN0RSxFQUNEMmdGLHNCQUF1QixXQUNuQixJQUFJOXJFLEVBQUksSUFBSWxWLEtBQ1osT0FBT0ksS0FBSzYrRSxnQkFBZ0JqL0UsS0FBSzZxQixNQUFRM1YsRUFBRWdzRSxTQUFTaHNFLEVBQUU3VSxXQUFhLElBQ3RFLEVBQ0RpNUIsS0FBTSxTQUFTN3ZCLEdBQ1gsR0FBeUIsTUFBckJySixLQUFLaS9FLGFBQXdCLE9BQ2pDLElBQUk4QixHQUFZL2dGLEtBQUtpL0UsYUFBYXR6RCxVQUFZM3JCLEtBQUtpL0UsYUFBYXZ6RCxhQUFlcmlCLEVBQzNFMjNFLEVBQVVoaEYsS0FBS2kvRSxhQUFhdHpELFVBQVksRUFBSTNyQixLQUFLaS9FLGFBQWF2ekQsWUFBYyxFQUNoRjFyQixLQUFLaS9FLGFBQWF2ekQsWUFBY3MxRCxFQUFTRCxFQUFXLEVBQ3BEL2dGLEtBQUtpL0UsYUFBYXR6RCxVQUFZcTFELEVBQVNELEVBQVcsRUFDbEQsSUFBSXQyRCxFQUFNenFCLEtBQUs2K0UsZ0JBQWdCai9FLEtBQUs2cUIsT0FDaEN6cUIsS0FBS2kvRSxhQUFhdHpELFVBQVlsQixJQUM5QnpxQixLQUFLaS9FLGFBQWF0ekQsVUFBWWxCLEdBRWxDenFCLEtBQUtpL0UsYUFBYXR6RCxVQUFZbkIsT0FBT2hsQixTQUFTeEYsS0FBS2kvRSxhQUFhdHpELFdBQ2hFM3JCLEtBQUtpL0UsYUFBYXZ6RCxZQUFjbEIsT0FBT2hsQixTQUFTeEYsS0FBS2kvRSxhQUFhdnpELGFBQzlEMXJCLEtBQUtpL0UsYUFBYXZ6RCxhQUFlMXJCLEtBQUtpL0UsYUFBYXR6RCxZQUNuRDNyQixLQUFLaS9FLGFBQWF2ekQsYUFBZSxHQUVyQzFyQixLQUFLOCtFLGtCQUFrQjkrRSxLQUFLaS9FLGFBQy9CLEVBQ0RnQyxlQUFnQixXQUNaLEdBQXlCLE1BQXJCamhGLEtBQUtpL0UsYUFBd0IsT0FFakNqL0UsS0FBS2kvRSxhQUFhdnpELGFBQWdCLEtBQ2xDMXJCLEtBQUtpL0UsYUFBYXR6RCxXQUFjLEtBQ2hDM3JCLEtBQUs4K0Usa0JBQWtCOStFLEtBQUtpL0UsYUFDL0IsRUFDRGlDLGdCQUFpQixXQUNiLEdBQXlCLE1BQXJCbGhGLEtBQUtpL0UsYUFBd0IsT0FFakMsSUFBSWtDLEVBQWVuaEYsS0FBS2kvRSxhQUFhdHpELFVBQ2pDbEIsRUFBTXpxQixLQUFLNitFLGdCQUFnQmovRSxLQUFLNnFCLE9BRXBDenFCLEtBQUtpL0UsYUFBYXR6RCxXQUFjLEtBQzVCM3JCLEtBQUtpL0UsYUFBYXR6RCxVQUFZbEIsSUFDOUJ6cUIsS0FBS2kvRSxhQUFhdHpELFVBQVlsQixHQUVsQ3pxQixLQUFLaS9FLGFBQWF2ekQsYUFBZ0IxckIsS0FBS2kvRSxhQUFhdHpELFVBQVl3MUQsRUFDaEVuaEYsS0FBSzgrRSxrQkFBa0I5K0UsS0FBS2kvRSxhQUMvQixFQUNESCxrQkFBbUIsU0FBU0csRUFBYzF6RSxHQUNSLE1BQTFCMHpFLEVBQWF0ekQsV0FBaUQsTUFBNUJzekQsRUFBYXZ6RCxjQUNuRDFyQixLQUFLZytFLFlBQWEsRUFDZGlCLEVBQWF2ekQsWUFBY3V6RCxFQUFhdHpELFVBQ3hDM3JCLEtBQUtnK0UsWUFBYSxHQUd6Qnp5RSxHQUFNdkwsS0FBS3VMLElBQ2xCdkwsS0FBS20rRSxrQkFBa0JjLEdBRWI3dUQsc0JBQXNCVSxXQUFXbkIsY0FBY0MsYUFBY3F2RCxFQUFjai9FLEtBQUt1TCxJQUNoRnZMLEtBQUs0bkQsTUFBTSxlQUFnQnEzQixJQUM5QixFQUNSQyxzQkFBdUIsU0FBU0QsR0FDNUJqL0UsS0FBS29oRixvQkFBc0JwaEYsS0FBS3lMLFFBQVF6TCxLQUFLeUwsUUFBUXhLLE9BQVMsR0FDMURqQixLQUFLeUwsUUFBUXhLLE9BQVMsR0FDN0JqQixLQUFLeUwsUUFBUTh3RCxRQUVWdjhELEtBQUt5TCxRQUFRdkIsS0FBSyswRSxFQUNyQixFQUVEb0Msd0JBQXlCLFdBQ1csTUFBNUJyaEYsS0FBS29oRixzQkFDVHBoRixLQUFLeUwsUUFBUWtpQyxNQUNiM3RDLEtBQUt5TCxRQUFRa2lDLE1BQ2IzdEMsS0FBSzgrRSxrQkFBa0I5K0UsS0FBS29oRixxQkFDaEMsR0FLQzk4RSxLQUFJLEtBQ08sQ0FDVHk1QixLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUVuQm1xRSxhQUFjLEtBQ2Q3OEQsaUJBQWtCLEtBQ2xCbThELHlCQUEwQixHQUMxQkYsc0JBQXNCLEVBQ3RCNXlFLFFBQVMsR0FDVDIxRSxvQkFBcUIsS0FDbEJyRCxjQUFjLEVBQ2pCNkIsa0JBQW1CLFFBQ25CeEIscUJBQXNCLENBQUVuNUUsTUFBTyxRQUFTaVEsTUFBTzZvQixLQUFLLDZCQUE4QnVJLGtCQUFrQixHQUNqRzAzQyxZQUFZLEVBQ1pDLGdCQUFpQixLQUNqQkMsY0FBZSxLQUNmaUMsaUJBQWtCLENBQ2hCLENBQUVsN0UsTUFBTyxRQUFTaVEsTUFBTzZvQixLQUFLLDZCQUE4QnVJLGtCQUFrQixHQUM5RSxDQUFFcmhDLE1BQU8sU0FBVWlRLE1BQU82b0IsS0FBSyw4QkFBK0J1SSxrQkFBa0IsR0FDaEYsQ0FBRXJoQyxNQUFPLE9BQVFpUSxNQUFPNm9CLEtBQUssNEJBQTZCdUksa0JBQWtCLEdBQzVFLENBQUVyaEMsTUFBTyxNQUFPaVEsTUFBTzZvQixLQUFLLDJCQUE0QnVJLGtCQUFrQixHQUMxRSxDQUFFcmhDLE1BQU8sT0FBUWlRLE1BQU82b0IsS0FBSyw0QkFBNkJ1SSxrQkFBa0IsR0FDNUUsQ0FBRXJoQyxNQUFPLFFBQVNpUSxNQUFPNm9CLEtBQUssNkJBQThCdUksa0JBQWtCLEdBQzlFLENBQUVyaEMsTUFBTyxPQUFRaVEsTUFBTzZvQixLQUFLLDRCQUE2QnVJLGtCQUFrQixHQUM1RSxDQUFFcmhDLE1BQU8sU0FBVWlRLE1BQU82b0IsS0FBSyw4QkFBK0J1SSxrQkFBa0IsRUFBTzNrQyxVQUFVLHdEQzNZcEcyL0UsR0FBQSxDQUFBemlELE1BQU0sZUFDSjBpRCxHQUFBLENBQUExaUQsTUFBTSxjQUNKMmlELEdBQUEsQ0FBQTNpRCxNQUFNLDZCQUNKNGlELEdBQUEsQ0FBQTVpRCxNQUFNLGtDQU9KNmlELEdBQUEsQ0FBQTdpRCxNQUFNLDZCQUNIOGlELEdBRUMsT0FBQSxDQUZFOWlELE1BQUssb0JBQWtCLENBQzFCOGlELEdBQUUsSUFBQSxDQUFBOWlELE1BQUEsbUNBRUVBLE1BQU0sNEJBQTRCbjVCLEtBQUssT0FBT2s4RSxZQUFZLGtCQUFtQixVQUFPLFdBQVcxK0IsSUFBSSx5QkFHdkd5K0IsaUJBQVEsb0JBQWtCLENBQzFCQSxHQUFFLElBQUEsQ0FBQTlpRCxNQUFBLDJDQUVFQSxNQUFNLDRCQUE0Qm41QixLQUFLLE9BQVFrOEUsWUFBWSxrQkFBaUIsVUFBUSxXQUFXMStCLElBQUkscUNBSXZHeStCLEdBQUUsSUFBQSxDQUFBOWlELE1BQUEsNkJBQUEsTUFBQSxNQUlMZ2pELEdBQUEsQ0FBQWhqRCx3REFHSWlqRCxHQUFBLENBQUFqakQsTUFBSyxzQ0FFTjhpRCxHQUFRLElBQUEsQ0FBTDlpRCxNQUFLLDhCQUFBLE1BQUEsK0JBR1I4aUQsR0FBUSxJQUFBLENBQUw5aUQsTUFBSywrQkFBQSxNQUFBLCtCQUdSOGlELEdBQVEsSUFBQSxDQUFMOWlELE1BQUssc0JBQUEsTUFBQSwrQkFHUjhpRCxHQUFRLElBQUEsQ0FBTDlpRCxNQUFLLHVCQUFBLE1BQUEsMENBR1I4aUQsR0FBUSxJQUFBLENBQUw5aUQsTUFBSyxlQUFBLE1BQUEsMENBR1I4aUQsR0FBUSxJQUFBLENBQUw5aUQsTUFBSyxlQUFBLE1BQUEsTUNuRHhCLFNBQVNrakQsR0FBWXpxRSxFQUFLNHJDLFFBQ1gsSUFBUkEsSUFBaUJBLEVBQU0sQ0FBQSxHQUM1QixJQUFJOCtCLEVBQVc5K0IsRUFBSTgrQixTQUVuQixHQUFLMXFFLEdBQTJCLG9CQUFibkQsU0FBbkIsQ0FFQSxJQUFJOHRFLEVBQU85dEUsU0FBUzh0RSxNQUFROXRFLFNBQVMrdEUscUJBQXFCLFFBQVEsR0FDOUQ1dEUsRUFBUUgsU0FBU0MsY0FBYyxTQUNuQ0UsRUFBTTVPLEtBQU8sV0FFSSxRQUFiczhFLEdBQ0VDLEVBQUtuMEIsV0FDUG0wQixFQUFLaDdDLGFBQWEzeUIsRUFBTzJ0RSxFQUFLbjBCLFlBS2hDbTBCLEVBQUt4dEUsWUFBWUgsR0FHZkEsRUFBTTZ0RSxXQUNSN3RFLEVBQU02dEUsV0FBVzFrQixRQUFVbm1ELEVBRTNCaEQsRUFBTUcsWUFBWU4sU0FBU29nRCxlQUFlajlDLEdBbkJXLENBcUJ6RCx3TURyQklxcUUsR0FzREMsTUF0RERKLEdBc0RDLENBckRDSSxHQW9EQyxNQXBEREgsR0FvREMsSUFERSxTQUFBLENBakREWSxHQUEwQm4zQixFQUFBM0QsT0FBQSxTQUN4QitPLEdBSWNnc0IsRUFBQSxDQUpPekcsZ0JBQVV6MEIsRUFBQWkzQiwrREFBQWozQixFQUFBaTNCLHFCQUFBa0UsR0FDOUIvMkUsR0FBSSwyQkFDSjBGLFFBQVNrMkMsRUFBZ0JnNUIsaUJBQ3pCb0MsK0JBQVkxNkIsRUFBQXkyQixtQkFBQSwyREFHUGtFLEdBR0piLEdBQXdILFFBQXhIYyxHQUF3SCxLQUFBLEtBQ3hIQyxHQUE4Six3TEFDOUpBLEdBQThCLDRKQUMxQkMsR0FHSmhCLEdBQXNILFFBQXRIaUIsR0FBc0gsS0FBQSxLQUN0SEYsR0FBeUosOEtBQ3pKQSxHQUFpRywwSkFDN0ZmLEdBRUgsT0FBQSxDQUYwQjV4RSxNQUFPbzNDLEVBQUlwcEIsS0FBQSxvQkFBTXpwQixNQUFBLENBQUEsY0FBQSxTQUFBNkUsTUFBQSxzQkFBOUJndUMsRUFBVTYyQixtQkE2QnpCLFNBQUEsbUtBckJLMkQsR0FvQkgsTUFwQkdHLEdBb0JILENBbkJHSCxHQUVTLFNBQUEsQ0FGQXRrRCx1QkFBT3dxQixFQUFjbzVCLGtCQUFJcGlELE1BQU0sc0JBQUNxa0IsSUFBQSxxQkFBQW56QyxNQUFBbzNDLEVBQUFwcEIsS0FBQSxrREFHekM0akQsR0FFUyxTQUFBLENBRkF0a0QsdUJBQU93cUIsRUFBZXE1QixtQkFBSXJpRCxNQUFNLDJCQUFDcWtCLElBQUEsc0JBQUFuekMsTUFBQW8zQyxFQUFBcHBCLEtBQUEsbURBRzFDNGpELEdBRVMsU0FBQSxDQUZBdGtELHVCQUFPd3FCLEVBQUkzdUIsS0FBQSxJQUFLMkYsTUFBTSxzQkFBRXFrQixJQUFBLGNBQUFuekMsTUFBQW8zQyxFQUFBcHBCLEtBQUEsZ0RBR2pDNGpELEdBRVMsU0FBQSxDQUZBdGtELHVCQUFPd3FCLEVBQUkzdUIsS0FBQSxLQUFPMkYsTUFBTSxzQkFBQ3FrQixJQUFBLGVBQUFuekMsTUFBQW8zQyxFQUFBcHBCLEtBQUEsaURBR2xDNGpELEdBRVMsU0FBQSxDQUZBaGdGLFNBQWlCLE1BQVB3bEQsRUFBT2k2QixvQkFBQS9qRCx1QkFBQXdxQixFQUFBdzVCLDJCQUFBeGlELE1BQUEsc0JBQUE5dUIsTUFBQW8zQyxFQUFBcHBCLEtBQUEsNkNBRzFCNGpELEdBRVMsU0FBQSxDQUZBaGdGLFNBQWlCLFVBQVB3bEQsRUFBT3k0QixrQkFBQXZpRCx1QkFBQXdxQixFQUFBeTJCLHNCQUFBei9DLE1BQUEsc0JBQUE5dUIsTUFBQW8zQyxFQUFBcHBCLEtBQUEsbURBR3pCa3RCLEVBQUEzRCxPQUFBLGlIRXJCakIsSUFBQXU3QixHQUFldGdCLEdBQWdCLENBQzNCelksV0FBWSxDQUNYLEVBQ0RoVCxNQUFPLENBQ1Z2ckMsR0FBSXZKLFFBRURxM0MsTUFBTyxDQUFDLFNBQVUsVUFFbEI4UCxVQUNDLEVBQ0Q3a0QsS0FBSSxLQUNBLElBS0praEQsVUFDSCxJQUFJN1csRUFBSzN1QyxLQUNUeUIsRUFBRXpCLEtBQUt1bkQsTUFBZ0IsVUFBR2o4QyxHQUFHLGtCQUFrQixTQUFVRixHQUNyRHVqQyxFQUFHaVosTUFBTSxTQUNiLElBQ0FubUQsRUFBRXpCLEtBQUt1bkQsTUFBZ0IsVUFBR2o4QyxHQUFHLG1CQUFtQixTQUFVRixHQUN0RHVqQyxFQUFHaVosTUFBTSxTQUNiLElBRUEzK0IsWUFBWUcsTUFBTXBwQixLQUFLb25ELE9BQVcsR0FDOUIsRUFDRDRCLFFBQVMsQ0FDWmg3QyxLQUFNLFdBQ0Z2TSxFQUFFekIsS0FBS3VuRCxNQUFnQixVQUFHcjNDLE1BQU0sT0FDbkMsRUFDRDR5RSxhQUFjLFdBQWEsRUFDM0JDLE1BQU8sV0FDSHRoRixFQUFFekIsS0FBS3VuRCxNQUFnQixVQUFHcjNDLE1BQU0sT0FDcEMsZUM3RE0ydUIsTUFBTSw4Q0FBaUJpRSxLQUFBLFlBQ3JCeStDLEdBQUEsQ0FBQTFpRCxNQUFNLDJCQUNFLGdCQUNMNGlELEdBQUEsQ0FBQTVpRCxNQUFNLGtCQUdSOGlELEdBR0MsTUFBQSxDQUhFOWlELE1BQU0sZUFBYSxDQUN0QjhpRCxHQUNHLFNBQUEsQ0FES2o4RSxLQUFBLFNBQUFtNUIsTUFBQSxZQUFBLGtCQUFBLFFBQUEsYUFBQSxlQUlQMmpELEdBQUEsQ0FBQTNqRCxNQUFNLGNBR040akQsR0FBQSxDQUFBNWpELE1BQU0sbUJBQ1Q4aUQsR0FDTSxNQUFBLENBREQ5aUQsTUFBQSxXQUFBLE1BQUEsTUFHTDhpRCxHQUNHLE1BQUEsQ0FERTlpRCxNQUFBLHVDQUFBdnFCLE1BQUEsQ0FBQStsRCxRQUFBLDhEQXBCUjJvQixVQUFDQyxpQ0FBZ0JoNEIsRUFBQzYzQixjQUFBNzNCLEVBQUE2M0IsZ0JBQUFqOEQsSUFBQSxDQUFBLGFBQUFnWSxNQUFBLGFBQUFxa0IsSUFBQSxXQUFBZ2dDLFNBQUEsS0FBQXBnRCxLQUFBLFNBQUEsa0JBQUEsNEJBQ2xCLGNBQVksWUF1QlosU0FBQSxJQURFLFNBQUEsSUFYSyxTQUFBLENBUEw2K0MsUUFBQUYsSUFDSlcsR0FBRW4zQixFQUFBM0QsT0FBQSxXQUVLbzZCLEtBS0xDLEdBRU8sTUFGUGEsR0FFTyxJQUREdjNCLEVBQUEzRCxPQUFBLFVBRUhxNkIsR0FNQyxNQU5EYyxHQU1DLENBTERFLEdBRUFQLEdBQW9CbjNCLEVBQUEzRCxPQUFBLFVBQ3BCczdCLGluQ0NzREZPLEVBQVdqZ0MsR0FBSSxNQUNmcnhDLEVBQVNxeEMsR0FBSSxPQUVia2dDLEVBQW9CbGdDLEdBQUksSUFDeEJtZ0MsRUFBYW5nQyxJQUFJLEdBQ2pCb2dDLEVBQWtCcGdDLEdBQUksSUFDdEJxZ0MsRUFBWXJnQyxJQUFJLEdBQ2hCc2dDLEVBQWlCdGdDLEdBQUksSUFDckJ1Z0MsRUFBZ0J2Z0MsR0FBSSxJQUNwQndnQyxFQUFZeGdDLEdBQUksSUFDaEJ5Z0MsRUFBV3pnQyxHQUFJLFFBU3JCLElBQUkwZ0MsRUFBcUJ2Z0YsVUFBVXZCLFFBQVFhLFdBRTNDLE1BQU1raEYsRUFBYzV6QyxJQUFTLEtBQ2hCLElBQUlwdkMsT0FBTytpRixHQUNUampGLEtBQUs4aUYsRUFBY3grRSxTQUc1QjYrRSxFQUFpQjd6QyxJQUFTLElBQ00sSUFBM0JtekMsRUFBa0JuK0UsUUFhN0IsU0FBUzgrRSxJQUNMLEdBQWtCLE1BQWRqdEMsRUFBTWxqQyxLQUNiLE9BQU9rakMsRUFBTWxqQyxLQUVWLElBQ0lBLEVBQU8sU0FJWCxPQUxnRixNQUF2RGpJLE9BQU9DLFNBQVNoSCxXQUFXaVosTUFBTSxxQkFHN0RqSyxFQUFPLFNBRUdBLENBQ1gsQ0FRQSxJQUFJb3dFLEVBQWdCLEtBQ3BCLFNBQVNDLElBQ0RELEdBQWlCTCxFQUFTMStFLFFBRTlCeStFLEVBQVV6K0UsTUFBTSt1QixNQUFLLENBQUN4ZSxFQUFHQyxJQUNOLFFBQWxCa3VFLEVBQVMxK0UsTUFDRnVRLEVBQUV6SixLQUFLbTRFLGNBQWN6dUUsRUFBRTFKLE1BRTNCeUosRUFBRXNWLElBQU1yVixFQUFFcVYsTUFFVjQ0RCxFQUFVeitFLE1BQU1oRSxPQUFTLElBQ2hDbWlGLEVBQWtCbitFLE1BQVF5K0UsRUFBVXorRSxNQUFNLElBRXZDKytFLEVBQWdCTCxFQUFTMStFLE1BQzdCLENBRUEsSUFBSWsvRSxHQUFpQixFQThCckIsTUFBTUMsRUFBZTdtRSxVQUNqQixJQUFJeVMsRUFDSixHQUFJdXpELEVBQVV0K0UsTUFDakIrcUIsRUFBVTNGLG1CQUFtQnlELHFCQUNuQixDQUNWLElBQUl1MkQsRUFBYWg2RCxtQkFBbUI4RCx3QkFDN0JrMkQsRUFBVzM0RCxtQkFDWDI0RCxFQUFXMTRELFVBQ2xCcUUsRUFBVTNGLG1CQUFtQjBFLGtCQUFrQnMxRCxFQUM1QyxDQUNBLElBQUl6d0UsRUFBT213RSxJQUNQbDVFLEVBQVMsQ0FDaEI0NEUsY0FBZUEsRUFBY3grRSxNQUM3QitxQixVQUNBcGMsUUFHRy9JLEVBQU9pSCxLQUFPZ2xDLEVBQU1obEMsS0FDcEIsSUFBSXhQLEVBQU8sR0FBRXdCLHVEQUNiLElBQ0gsSUFBSXFvQixFQUFVLENBQ1YsZUFBZ0IsMEJBRWR4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE9BQVFzTSxVQUFTNWMsS0FBTVYsS0FBSzZFLFVBQVU3SSxLQUN2RnM1RSxHQUFpQixDQUdkLENBRkUsTUFBTW5nRixHQUNYQyxRQUFRQyxNQUFNRixFQUNYLENBQ0ErK0UsSUFDQXR5RCxFQUFLLGtCQUFtQjVsQixFQUFPLEVBRzdCeTVFLEVBQWtCLEtBQ3BCdkIsSUFDQSxJQUFJL3lELEVBQVVvekQsRUFBa0JuK0UsTUFBTStxQixRQUN0QyxHQUF3QixHQUFwQnF6RCxFQUFXcCtFLE1BQWUsQ0FDN0IsSUFBSW1LLEVBQVNvYyxzQkFBc0JDLGFBQy9CNDRELEVBQWFoNkQsbUJBQW1COEQsZUFBZTZCLEdBQ25EcTBELEVBQVczNEQsWUFBY3RjLEVBQU9zYyxZQUNoQzI0RCxFQUFXMTRELFVBQVl2YyxFQUFPdWMsVUFDOUJxRSxFQUFVM0YsbUJBQW1CMEUsa0JBQWtCczFELEVBQ2hELENBQ0FoNkQsbUJBQW1CcUUsdUJBQXVCc0IsRUFBUSxFQUdoRHUwRCxFQUFrQmhuRSxVQUNwQixJQUFJeFIsRUFBT3EzRSxFQUFrQm4rRSxNQUFNOEcsS0FDakIsR0FBZHk0RSxJQUFzQno0RSxFQUFPLEtBQ2pDLElBQ0lsQixFQUFTLENBQ1o0NEUsY0FBZTEzRSxFQUNuQjZILEtBSGNtd0UsS0FLWGw1RSxFQUFPaUgsS0FBT2dsQyxFQUFNaGxDLEtBQ3BCLElBQUl4UCxFQUFPLEdBQUV3QiwwREFDYixJQUNDLElBQUlxb0IsRUFBVSxDQUNWLGVBQWdCLDBCQUVkeEMsZUFBZXlDLGFBQWE5cEIsRUFBSyxDQUFFdWQsT0FBUSxPQUFRc00sVUFBUzVjLEtBQU1WLEtBQUs2RSxVQUFVN0ksS0FDdkZzNUUsR0FBaUIsQ0FHbEIsQ0FGRSxNQUFNbmdGLEdBQ1BDLFFBQVFDLE1BQU1GLEVBQ2YsQ0FFSHlzQixFQURxQixHQUFkK3pELEVBQ0Ysd0JBRUEsbUJBRnlCMzVFLEdBSTNCazRFLEdBQU8sRUFHTEEsRUFBUSxLQUNWSSxFQUFTbCtFLE1BQU04OUUsT0FBTyxFQUkxQnJ3QixFQUFhLENBQUUxa0QsS0F2SkYsTUE2Q2J1UCxpQkFDSTFMLEVBQU81TSxNQUFRLE1BQ2Z3K0UsRUFBY3grRSxNQUFRLEdBQ3RCcytFLEVBQVV0K0UsT0FBUSxFQUNsQm8rRSxFQUFXcCtFLE9BQVEsRUFDbkIsSUFBSW1LLEVBQVNvYyxzQkFBc0JDLGFBQy9CZzVELEVBQXdCQyxFQUFNLHVCQUM5QkMsRUFBYWg3RCxlQUFlMkIsK0JBQW9ELElBQXJCbGMsRUFBT3NjLFlBQW9CLG9CQUN0Rms1RCxFQUFXajdELGVBQWUyQiwrQkFBa0QsSUFBbkJsYyxFQUFPdWMsVUFBa0Isb0JBQ3RGODRELEVBQXdCQSxFQUFzQjdqRixRQUFRLGVBQWdCK2pGLEdBQ3RFRixFQUF3QkEsRUFBc0I3akYsUUFBUSxhQUFjZ2tGLEdBQ3BFcEIsRUFBZXYrRSxNQUFRdy9FLEVBQ3ZCLElBQUlJLEVBQXlCSCxFQUFNLHdCQUluQyxHQUhBRyxFQUF5QkEsRUFBdUJqa0YsUUFBUSxlQUFnQitqRixHQUN4RUUsRUFBeUJBLEVBQXVCamtGLFFBQVEsYUFBY2drRixHQUN0RXRCLEVBQWdCcitFLE1BQVE0L0UsRUFDcEJWLEVBQWdCLENBQ3ZCQSxHQUFpQixFQUNqQixJQUFJdndFLEVBQU9td0UsSUFDUHpoRixFQUFPLEdBQUV3Qiw4REFBOEQ4UCxJQUN2RWt4RSxRQUFzQm43RCxlQUFleUMsYUFBYTlwQixHQUN0RG9oRixFQUFVeitFLE1BQVEwa0IsZUFBZU8sZ0JBQWdCNDZELEVBQzlDLENBQ0FiLElBQ0lQLEVBQVV6K0UsTUFBTWhFLE9BQVMsSUFDaENtaUYsRUFBa0JuK0UsTUFBUXkrRSxFQUFVeitFLE1BQU0sR0FFM0MsQ0F2RUk0Z0MsR0FDQXM5QyxFQUFTbCtFLE1BQU0rSSxNQUFNLEVBcUpKKzBFLFVBRXJCcGhCLElBQVUsU0FHVixNQUFNK2lCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLHNYQXZKSFUsS0FDVyxHQUExQmt1RSxFQUFVeitFLE1BQU1oRSxRQUFvQixVQUFMdVUsSUFDbkMzRCxFQUFPNU0sTUFBUXVRLEVBQUMsKzVDQWVwQixTQUFzQnNHLEdBQ2xCLElBQUl5UCxFQUF3QixJQUFmelAsRUFBU2dQLElBQ2xCNHpELEVBQU8vMEQsZUFBZTJCLCtCQUErQkMsRUFBUSxjQUNqRSxNQUFRLEdBQUV6UCxFQUFTL1AsU0FBUzJ5RSxJQUNoQyxzc0VDaEZBLFNBQVNxRyxJQUNMdDBELEVBQUssb0JBQXFCcW1CLEVBQU1rdUMsV0FDcEMsQ0FFQSxTQUFTQyxJQUNMeDBELEVBQUssWUFBYXFtQixFQUFNdnJDLEdBQzVCLDJ6Q0N0REEsTUFBTTI1RSxHQUF1QmpqRSxFQUFlSixhQUFhSSxFQUFlckIsTUFBTTdaLE1BQU13RSxJQUM5RTQ1RSxHQUFtQix5QkFDbkJDLEdBQTBCLG9DQUUxQkMsR0FBa0IsQ0FDcEJDLFlBQWEsWUFDYnYxRSxNQUFPZ3VCLEtBQUssbUNBQ1p3bkQsS0FBTSxnQkFDTkMsd0JBQXlCLEVBQ3pCdG9DLFNBQVMsRUFDVHVvQyxXQUFZLENBQ1YsQ0FBRS8vRSxLQUFNLFlBQWFnZ0YsUUFBUyxJQUVoQ3R1RSxRQUFTLENBQUMsQ0FDVHV1RSxXQUFZNW5ELEtBQUssZUFBZ0JoeUIsS0FBTSxjQUFlekgsS0FBTSxXQUFZODRCLFVBQVcrbkQsR0FDbkY3b0QsT0FBUSxTQUFTaDRCLEVBQU1vQixFQUFNa2dGLEdBQ2hDLElBQUk1NUUsRUFBVWhNLEtBQ1YwK0IsRUFBVSxDQUNWdEIsVUFBVytuRCxHQUNYOW5ELFFBQVMsV0FHWixJQUFJd29ELEVBQVUsT0FBTUQsRUFBUUUsWUFDNUI5NUUsRUFBUSs1RSw4QkFBOEJGLEVBQVFELEVBQVFJLFNBQ25ELEdBRUosT0FBT3ZvRCxFQUFld29ELG1CQUFtQixDQUFFbDRFLEtBQU16SixFQUFLNFEsTUFBT3dwQixXQUMxRCxHQUNELENBQ0NpbkQsV0FBWTVuRCxLQUFLLFdBQVloeUIsS0FBTSxVQUFXeXlCLFVBQVcsV0FBWWw2QixLQUFNLFVBQVc0aEYsV0FBVyxFQUNqRzVwRCxPQUFTaDRCLEdBRURqQixFQUFVMnlCLFlBQVkxeEIsSUFFL0IsQ0FDQ3FoRixXQUFZNW5ELEtBQUssY0FBZWh5QixLQUFNLGVBQWdCeXlCLFVBQVcsY0FBZWw2QixLQUFNLGFBQWM0aEYsV0FBVyxFQUMvRzVwRCxPQUFTaDRCLElBQ1osTUFBTXNSLEVBQWF0UixFQUFLaUMsUUFBUSxHQUNoQyxPQUFPbEQsRUFBVThpRixrQkFBa0J2d0UsRUFBVyxHQUU1QyxDQUNDK3ZFLFdBQVk1bkQsS0FBSyxXQUFZM3FCLE1BQU8sS0FBTXJILEtBQU0sVUFBV3l5QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBR2hwRCxVQUFXZ29ELEdBQ3pJaUIsVUFBVyxTQUFTcjZFLEdBQVcsT0FBT0EsRUFBUXM2RSxrQkFBb0IsRUFDbEVocUQsT0FBUSxTQUFTaDRCLEVBQU1vQixFQUFNa2dGLEdBQ2hDLElBQUk1NUUsRUFBVWhNLEtBQ2QsTUFBTXVtRixFQUFxQixDQUN2Qm5wRCxVQUFXZ29ELEdBQ1gvbkQsUUFBUyxXQUNDcnhCLEVBQVFvRCxPQUNyQixJQUFJbzNFLEVBQVduOEQsRUFBbUJzRSxnQkFBZ0IsVUFBWSxHQUFFaTNELEVBQVFyNEUsU0FBU2hDLFNBQzdFazdFLEVBQXdCLEdBQUUzaUYsaURBQWlEa0ksRUFBUW9ELE9BQU9zYyx5QkFBeUIxZixFQUFRb0QsT0FBT3VjLGFBQWE2NkQsSUFDL0kxdEUsRUFBYzlNLEVBQVE4TSxZQUN0QjR0RSxFQUFlMTZFLEVBQVEwNkUsYUFFdkI3N0UsRUFBUyxHQUNUODdFLEVBQWU3dEUsRUFBWTh0RSxpQkFBaUJsaUYsS0FBSSxDQUFDbWlGLEVBQVk1Z0YsS0FDN0QsSUFBSTJTLEVBQVM4dEUsRUFBYXpnRixHQUMxQixNQUF3QixRQUFwQjRnRixFQUFXNWhGLE1BQ1hvbEIsRUFBbUJzRSxnQkFBZ0IsT0FBUS9WLEVBQU8zVCxPQUN2QixRQUFwQjRoRixFQUFXNWhGLE1BQ2xCb2xCLEVBQW1Cc0UsZ0JBQWdCLEtBQU8sR0FBRS9WLEVBQU8zVCxpQkFEaEQsQ0FFUCxJQUVKNEYsRUFBUzg3RSxFQUFhOWhGLEtBQUssS0FDM0I0aEYsRUFBd0IsR0FBRUEsS0FBd0I1N0UsSUFFbERjLE9BQU9tN0UsS0FBS0wsRUFDVCxHQUVKLE9BQU9ocEQsRUFBZXNwRCxvQkFBb0IsQ0FDdEMsQ0FBRWxvRCxNQUFPLGdCQUFpQmhzQixLQUFNLElBQUs5QyxNQUFPZ3VCLEtBQUssK0JBQWdDVyxRQUFTNm5ELElBRTNGLEtBSUNTLEdBQWlCLENBQ25CMUIsWUFBYSxZQUNidjFFLE1BQU9ndUIsS0FBSyxpQ0FDWnduRCxLQUFNLGlCQUNOQyx3QkFBeUIsRUFDekJDLFdBQVksQ0FDVixDQUFFLy9FLEtBQU0sWUFBYWdnRixRQUFTLElBRWhDdHVFLFFBQVMsQ0FBQyxDQUNUdXVFLFdBQVk1bkQsS0FBSyxZQUFhaHlCLEtBQU0sV0FBWXpILEtBQU0sV0FBWTg0QixVQUFXK25ELEdBQzdFN29ELE9BQVEsU0FBU2g0QixFQUFNb0IsRUFBTWtnRixHQUNoQyxJQUFJNTVFLEVBQVVoTSxLQUNWMCtCLEVBQVUsQ0FDVnRCLFVBQVcrbkQsR0FDWDluRCxRQUFTLFdBR1osSUFBSXdvRCxFQUFVLE9BQU1ELEVBQVFFLFlBQzVCOTVFLEVBQVErNUUsOEJBQThCRixFQUFRRCxFQUFRSSxTQUNuRCxHQUVKLE9BQU92b0QsRUFBZXdvRCxtQkFBbUIsQ0FBRWw0RSxLQUFNekosRUFBSzRRLE1BQU93cEIsV0FDMUQsR0FDRCxDQUNDaW5ELFdBQVk1bkQsS0FBSyxXQUFZaHlCLEtBQU0sVUFBV3l5QixVQUFXLFdBQVlsNkIsS0FBTSxVQUFXNGhGLFdBQVcsRUFDakc1cEQsT0FBU2g0QixHQUNENGdGLEdBQXFCNWdGLElBRzlCLENBQ0NxaEYsV0FBWTVuRCxLQUFLLGNBQWVoeUIsS0FBTSxlQUFnQnl5QixVQUFXLGNBQWVsNkIsS0FBTSxhQUN0Rmc0QixPQUFTaDRCLElBQ1osTUFBTXNSLEVBQWF0UixFQUFLaUMsUUFBUSxHQUNoQyxPQUFPbEQsRUFBVThpRixrQkFBa0J2d0UsRUFBVyxHQUU1QyxDQUNDK3ZFLFdBQVk1bkQsS0FBSyxXQUFZM3FCLE1BQU8sS0FBTXJILEtBQU0sVUFBV3l5QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBR2hwRCxVQUFXZ29ELEdBQ3pJaUIsVUFBVyxTQUFTcjZFLEdBQVcsT0FBT0EsRUFBUXM2RSxrQkFBb0IsRUFDbEVocUQsT0FBUSxTQUFTaDRCLEVBQU1vQixFQUFNa2dGLEdBQ2hDLElBQUk1NUUsRUFBVWhNLEtBQ2QsTUFBTXVtRixFQUFxQixDQUN2Qm5wRCxVQUFXZ29ELEdBQ1gvbkQsUUFBUyxXQUNDcnhCLEVBQVFvRCxPQUNyQixJQUFJNjNFLEVBQVc1OEQsRUFBbUJzRSxnQkFBZ0IsUUFBVSxHQUFFaTNELEVBQVFxQixTQUFTMTdFLFNBQzNFazdFLEVBQXdCLEdBQUUzaUYsaURBQWlEa0ksRUFBUW9ELE9BQU9zYyx5QkFBeUIxZixFQUFRb0QsT0FBT3VjLGFBQWFzN0QsSUFDL0ludUUsRUFBYzlNLEVBQVE4TSxZQUN0QjR0RSxFQUFlMTZFLEVBQVEwNkUsYUFFdkI3N0UsRUFBUyxHQUNUODdFLEVBQWU3dEUsRUFBWTh0RSxpQkFBaUJsaUYsS0FBSSxDQUFDbWlGLEVBQVk1Z0YsS0FDN0QsSUFBSTJTLEVBQVM4dEUsRUFBYXpnRixHQUMxQixNQUF3QixRQUFwQjRnRixFQUFXNWhGLE1BQ1hvbEIsRUFBbUJzRSxnQkFBZ0IsT0FBUS9WLEVBQU8zVCxPQUN2QixRQUFwQjRoRixFQUFXNWhGLE1BQ2xCb2xCLEVBQW1Cc0UsZ0JBQWdCLEtBQU8sR0FBRS9WLEVBQU8zVCxpQkFEaEQsQ0FFUCxJQUVKNEYsRUFBUzg3RSxFQUFhOWhGLEtBQUssS0FDM0I0aEYsRUFBd0IsR0FBRUEsS0FBd0I1N0UsSUFFbERjLE9BQU9tN0UsS0FBS0wsRUFDVCxHQUVKLE9BQU9ocEQsRUFBZXNwRCxvQkFBb0IsQ0FDdEMsQ0FBRWxvRCxNQUFPLGdCQUFpQmhzQixLQUFNLElBQUs5QyxNQUFPZ3VCLEtBQUssK0JBQWdDVyxRQUFTNm5ELElBRTNGLEtBME1DVyxHQUF1QixDQUFDN0IsR0FBaUIyQixHQXRNM0IsQ0FDaEIxQixZQUFhLFlBQ2J2MUUsTUFBT2d1QixLQUFLLDhCQUNad25ELEtBQU0sY0FDTkMsd0JBQXlCLEVBQ3pCQyxXQUFZLENBQ1YsQ0FBRS8vRSxLQUFNLFlBQWFnZ0YsUUFBUyxJQUVoQ3R1RSxRQUFTLENBQUMsQ0FDYnV1RSxXQUFZNW5ELEtBQUssNEJBQTZCaHlCLEtBQU0sWUFBYXpILEtBQU0sT0FBUTg0QixVQUFXK25ELEdBQzFGN29ELE9BQVEsU0FBU2g0QixFQUFNb0IsRUFBTWtnRixHQUN6QixJQUFJNTVFLEVBQVVoTSxLQUNUa1YsRUFBUTVRLEVBQUs0USxNQUNiaXlFLEVBQVcsR0FDWnpvRCxFQUFVLENBQ2pCdEIsVUFBVytuRCxHQUNYOW5ELFFBQVM5ZixpQkFJTHZSLEVBQVFvN0Usb0NBQW9DLE9BQVF4QixFQUFReUIsS0FEOUMsZUFFbEIsR0FTRyxPQVBJcjdFLEVBQVFzN0Usc0JBQTRCLE1BQUtoakYsRUFBS2lqRixXQUMvQ3J5RSxFQUFRdW9CLEVBQWV3b0QsbUJBQW1CLENBQUVsNEUsS0FBTXpKLEVBQUs0USxNQUFPd3BCLGFBRTVEcDZCLEVBQUtrakYsZUFDUEwsRUFBWSx3Q0FBdUM3aUYsRUFBS2lILDJFQUduRCxHQUFFMkosSUFBUWl5RSxHQUN0QixHQUNNLENBQ054QixXQUFZNW5ELEtBQUssdUJBQXdCaHlCLEtBQU0sT0FBUXl5QixVQUFXLFdBQVlsNkIsS0FBTSxVQUFXNGhGLFdBQVcsRUFDMUc1cEQsT0FBU2g0QixHQUNFNGdGLEdBQXFCNWdGLElBVTFCLENBQ0hxaEYsV0FBWTVuRCxLQUFLLFdBQVkzcUIsTUFBTyxLQUFNckgsS0FBTSxVQUFXeXlCLFVBQVcsY0FBZTBuRCxXQUFXLEVBQU9FLG1CQUFvQixFQUFHaHBELFVBQVdnb0QsR0FDeklpQixVQUFXLFNBQVNyNkUsR0FBVyxPQUFPQSxFQUFRczZFLGtCQUFvQixFQUNsRWhxRCxPQUFRLFNBQVNoNEIsRUFBTW9CLEVBQU1rZ0YsR0FDekIsSUFBSTU1RSxFQUFVaE0sS0FDWixNQUFNMk0sRUFBT2k1RSxFQUFRajVFLEtBQUtwQixHQUNwQms4RSxFQUFtQjdCLEVBQVFqNUUsS0FBSzQ2RSxTQUNsQ2hCLEVBQXFCLENBQ3ZCbnBELFVBQVdnb0QsR0FDWC9uRCxRQUFTLFdBQ1FyeEIsRUFBUW9ELE9BQ3JCLElBQUlxM0UsRUFBd0IsR0FBRTNpRixpREFBaURrSSxFQUFRb0QsT0FBT3NjLHlCQUF5QjFmLEVBQVFvRCxPQUFPdWMsWUFDcEgzZixFQUFROE0sWUFDUDlNLEVBQVEwNkUsYUFFM0IsSUFBSTc3RSxFQUFTLEdBQ1Q4N0UsRUFBZSxHQUNuQixJQUFLLElBQUlyekUsS0FBT3N5RSxFQUFReUIsS0FBTSxDQUNoQyxJQUFJcGlGLEVBQVEyZ0YsRUFBUXlCLEtBQUsvekUsR0FDckJvMEUsRUFBUSxHQUNELFFBQVBwMEUsRUFDQW8wRSxFQUFRcjlELEVBQW1Cc0UsZ0JBQWdCcmIsRUFBS3JPLEdBQ2xDLFFBQVBxTyxJQUNQbzBFLEVBQVFyOUQsRUFBbUJzRSxnQkFBZ0IsS0FBTyxHQUFFMXBCLFNBRXhEMGhGLEVBQWF6OEUsS0FBS3c5RSxFQUNoQixDQUNBNzhFLEVBQVM4N0UsRUFBYTloRixLQUFLLEtBQzNCNGhGLEVBQXdCLEdBQUVBLEtBQXdCNTdFLElBRWxEYyxPQUFPbTdFLEtBQUtMLEVBQ2hCLEdBR0lrQixFQUFlLENBQ25CdnFELFVBQVdnb0QsR0FDWC9uRCxRQUFTLFdBQ0wsTUFBTXVxRCxFQUFPdjlELEVBQW1CQyxjQUFjLFFBQ3hDdTlELEVBQVksR0FBRS9qRix5Q0FBeUM2SSxtQ0FBc0NpN0UsVUFBYWo3RSx3Q0FBMkNYLEVBQVFvRCxPQUFPc2MseUJBQXlCMWYsRUFBUW9ELE9BQU91YyxZQUVsTmhnQixPQUFPbTdFLEtBQUtlLEVBQ2hCLEdBR0lDLEVBQVcsQ0FBQyxDQUFFanBELE1BQU8sZ0JBQWlCaHNCLEtBQU0sSUFBSzlDLE1BQU9ndUIsS0FBSywrQkFBZ0NXLFFBQVM2bkQsSUFLOUcsT0FKS3Y2RSxFQUFRczdFLHNCQUE0QixNQUFLRyxHQUMxQ0ssRUFBUzU5RSxLQUFLLENBQUUyMEIsTUFBTyxnQkFBaUJoc0IsS0FBTSxJQUFLOUMsTUFBT2d1QixLQUFLLHlCQUEwQlcsUUFBU2lwRCxJQUcvRmxxRCxFQUFlc3BELG9CQUFvQmUsRUFDOUMsS0FJa0IsQ0FDbEJ4QyxZQUFhLFlBQ2J2MUUsTUFBT2d1QixLQUFLLGdDQUNad25ELEtBQU0sZ0JBQ05DLHdCQUF5QixFQUN6QkMsV0FBWSxDQUNWLENBQUUvL0UsS0FBTSxZQUFhZ2dGLFFBQVMsSUFFaEN0dUUsUUFBUyxDQUFDLENBQ2J1dUUsV0FBWTVuRCxLQUFLLDRCQUE2Qmh5QixLQUFNLFlBQWF6SCxLQUFNLE9BQVE4NEIsVUFBVytuRCxHQUMxRjdvRCxPQUFRLFNBQVNoNEIsRUFBTW9CLEVBQU1rZ0YsR0FDekIsSUFBSTU1RSxFQUFVaE0sS0FDVGtWLEVBQVE1USxFQUFLNFEsTUFDYml5RSxFQUFXLEdBQ1p6b0QsRUFBVSxDQUNqQnRCLFVBQVcrbkQsR0FDWDluRCxRQUFTOWYsaUJBSUx2UixFQUFRbzdFLG9DQUFvQyxPQUFReEIsRUFBUXlCLEtBRDlDLGVBRWxCLEdBU0csT0FQSXI3RSxFQUFRczdFLHNCQUE0QixNQUFLaGpGLEVBQUtpakYsV0FDL0NyeUUsRUFBUXVvQixFQUFld29ELG1CQUFtQixDQUFFbDRFLEtBQU16SixFQUFLNFEsTUFBT3dwQixhQUU1RHA2QixFQUFLa2pGLGVBQ1BMLEVBQVksd0NBQXVDN2lGLEVBQUtpSCwyRUFHbkQsR0FBRTJKLElBQVFpeUUsR0FDdEIsR0FDTSxDQUNOeEIsV0FBWTVuRCxLQUFLLDJCQUE0Qmh5QixLQUFNLFdBQVl5eUIsVUFBVyxXQUFZbDZCLEtBQU0sVUFBVzRoRixXQUFXLEVBQ2xINXBELE9BQVNoNEIsR0FDRTRnRixHQUFxQjVnRixJQVUxQixDQUNIcWhGLFdBQVk1bkQsS0FBSyxXQUFZM3FCLE1BQU8sS0FBTXJILEtBQU0sVUFBV3l5QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBR2hwRCxVQUFXZ29ELEdBQ3pJaUIsVUFBVyxTQUFTcjZFLEdBQVcsT0FBT0EsRUFBUXM2RSxrQkFBb0IsRUFDbEVocUQsT0FBUSxTQUFTaDRCLEVBQU1vQixFQUFNa2dGLEdBQ3pCLElBQUk1NUUsRUFBVWhNLEtBQ1osTUFBTTJNLEVBQU9pNUUsRUFBUWo1RSxLQUFLcEIsR0FDcEJrOEUsRUFBbUI3QixFQUFRajVFLEtBQUs0NkUsU0FDbENoQixFQUFxQixDQUM5Qm5wRCxVQUFXZ29ELEdBQ1gvbkQsUUFBUyxXQUNRcnhCLEVBQVFvRCxPQUNyQixJQUFJcTNFLEVBQXdCLEdBQUUzaUYsaURBQWlEa0ksRUFBUW9ELE9BQU9zYyx5QkFBeUIxZixFQUFRb0QsT0FBT3VjLFlBQ3BIM2YsRUFBUThNLFlBQ1A5TSxFQUFRMDZFLGFBRTNCLElBQUk3N0UsRUFBUyxHQUNUODdFLEVBQWUsR0FDbkIsSUFBSyxJQUFJcnpFLEtBQU9zeUUsRUFBUXlCLEtBQU0sQ0FDakMsSUFBSXBpRixFQUFRMmdGLEVBQVF5QixLQUFLL3pFLEdBQ3JCbzBFLEVBQVEsR0FDRCxRQUFQcDBFLEVBQ0FvMEUsRUFBUXI5RCxFQUFtQnNFLGdCQUFnQnJiLEVBQUtyTyxHQUNsQyxRQUFQcU8sSUFDUG8wRSxFQUFRcjlELEVBQW1Cc0UsZ0JBQWdCLEtBQU8sR0FBRTFwQixTQUV4RDBoRixFQUFhejhFLEtBQUt3OUUsRUFDZixDQUNBNzhFLEVBQVM4N0UsRUFBYTloRixLQUFLLEtBQzNCNGhGLEVBQXdCLEdBQUVBLEtBQXdCNTdFLElBRWxEYyxPQUFPbTdFLEtBQUtMLEVBQ2hCLEdBR1drQixFQUFlLENBQ25CdnFELFVBQVdnb0QsR0FDWC9uRCxRQUFTLFdBQ0wsTUFBTXVxRCxFQUFPdjlELEVBQW1CQyxjQUFjLFFBQ3hDdTlELEVBQVksR0FBRS9qRix5Q0FBeUM2SSxtQ0FBc0NpN0UsVUFBYWo3RSx3Q0FBMkNYLEVBQVFvRCxPQUFPc2MseUJBQXlCMWYsRUFBUW9ELE9BQU91YyxZQUVsTmhnQixPQUFPbTdFLEtBQUtlLEVBQ2hCLEdBR0lDLEVBQVcsQ0FBQyxDQUFFanBELE1BQU8sZ0JBQWlCaHNCLEtBQU0sSUFBSzlDLE1BQU9ndUIsS0FBSywrQkFBZ0NXLFFBQVM2bkQsSUFLOUcsT0FKS3Y2RSxFQUFRczdFLHNCQUE0QixNQUFLRyxHQUMxQ0ssRUFBUzU5RSxLQUFLLENBQUUyMEIsTUFBTyxnQkFBaUJoc0IsS0FBTSxJQUFLOUMsTUFBT2d1QixLQUFLLHlCQUEwQlcsUUFBU2lwRCxJQUcvRmxxRCxFQUFlc3BELG9CQUFvQmUsRUFDOUMsTUN2VkosSUFBSUMsR0FBNEJDLEdBQW1CdC9FLE1BQU1vTSxHQUFnQixpQkFBVkEsRUFBRXl3RSxPQUNoQyxNQUE3QndDLEtBQ0FBLEdBQTRCcCtELEVBQWVNLE1BQU04OUQsSUFDakRBLEdBQTBCekMsWUFBYyxRQUc1QyxNQUVNMkMsR0FBa0IsQ0FGQUYsSUNIbEI3QyxHQUF1QmpqRSxFQUFlSixhQUFhSSxFQUFlckIsTUFBTTdaLE1BQU13RSxJQUM5RTI4RSxHQUFlam1FLEVBQWVKLGFBQWFJLEVBQWVyQixNQUFNUSxJQUFJN1YsSUFDcEU0NUUsR0FBbUIseUJBR25CZ0QsR0FBcUIsQ0FDdkI3QyxZQUFhLE9BQ2I4Qyw0QkFBNkIsQ0FBRVIsTUFBTSxFQUFNUyxRQUFRLEVBQU1DLFVBQVUsR0FDbkV2NEUsTUFBT2d1QixLQUFLLGlDQUNad25ELEtBQU0sa0JBQ05DLHdCQUF5QixFQUN6QkMsV0FBWSxDQUNWLENBQUUvL0UsS0FBTSxZQUFhZ2dGLFFBQVMsR0FDOUIsQ0FBRWhnRixLQUFNLFlBQWFnZ0YsUUFBUyxHQUM5QixDQUFFaGdGLEtBQU0sWUFBYWdnRixRQUFTLElBRWhDNkMsWUFBY0MsSUFDakIsSUFDSUMsRUFEQTdCLEVBQW1CNEIsRUFBUzF2RSxZQUFZOHRFLGlCQUU1QyxJQUFLLElBQUkzZ0YsRUFBSSxFQUFHQSxFQUFJMmdGLEVBQWlCM2xGLE9BQVFnRixHQUFLLEVBQzlDLEdBQWlDLFVBQTdCMmdGLEVBQWlCM2dGLEdBQUdoQixNQUF4QixDQUNBd2pGLEVBQWVELEVBQVM5QixhQUFhemdGLEdBQUdpUCxNQUN4QyxLQUZ1RCxDQUkzRCxNQUFRLEdBQUU2b0IsS0FBSywyQ0FBMkNBLEtBQUssbUNBQW1DMHFELEdBQWMsRUFFN0d2ckMsU0FBUyxFQUVUOWxDLFFBQVMsQ0FBQyxDQUNidXVFLFdBQVk1bkQsS0FBSyxhQUFjaHlCLEtBQU0sWUFBYXpILEtBQU0sWUFBYTg0QixVQUFXK25ELEdBQ2hGN29ELE9BQVEsU0FBU2g0QixFQUFNb0IsRUFBTWtnRixHQUN6QixJQUFJNTVFLEVBQVVoTSxLQUNWMCtCLEVBQVUsQ0FDakJ0QixVQUFXK25ELEdBQ1g5bkQsUUFBUyxXQUVMcnhCLEVBQVFvN0Usb0NBQW9DLGlCQUFrQnhCLEVBQVF5QixLQUR4RCxrQkFFbEIsR0FFT3FCLEVBQWMsR0FBRXBrRixFQUFLNFEsVUFBVTVRLEVBQUtpSCxNQUN4QyxPQUFPa3lCLEVBQWV3b0QsbUJBQW1CLENBQUVsNEUsS0FBTTI2RSxFQUFZaHFELFdBQ2pFLEdBQ00sQ0FDTmluRCxXQUFZNW5ELEtBQUssdUJBQXdCaHlCLEtBQU0sT0FBUXl5QixVQUFXLFdBQVlsNkIsS0FBTSxPQUFRNGhGLFdBQVcsRUFDdkc1cEQsT0FBU2g0QixHQUNFNGdGLEdBQXFCNWdGLElBRzFCLENBQ05xaEYsV0FBWTVuRCxLQUFLLDJCQUE0Qmh5QixLQUFNLFdBQVl5eUIsVUFBVyxXQUFZbDZCLEtBQU0sT0FBUTRoRixXQUFXLEVBQy9HNXBELE9BQVNoNEIsR0FDRTRnRixHQUFxQjVnRixJQUcxQixDQUNOcWhGLFdBQVk1bkQsS0FBSyxXQUFZaHlCLEtBQU0sVUFBV3l5QixVQUFXLFdBQVlsNkIsS0FBTSxRQUFTNGhGLFdBQVcsRUFDL0Y1cEQsT0FBU2g0QixHQUNFNGdGLEdBQXFCNWdGLElBRzFCLENBQ05xaEYsV0FBWTVuRCxLQUFLLGNBQWVoeUIsS0FBTSxlQUFnQnl5QixVQUFXLGNBQWVsNkIsS0FBTSxhQUN0Rmc0QixPQUFTaDRCLElBQ0wsTUFBTXNSLEVBQWF0UixFQUFLaUMsUUFBUSxHQUNoQyxPQUFPbEQsRUFBVThpRixrQkFBa0J2d0UsRUFBVyxHQUU1QyxDQUNOK3ZFLFdBQVk1bkQsS0FBSyw2QkFBOEJoeUIsS0FBTSxhQUFjeXlCLFVBQVcsV0FBWWw2QixLQUFNLGFBQWM0aEYsV0FBVyxFQUN6SDVwRCxPQUFTaDRCLEdBQ0U0akYsR0FBYTVqRixNQU1uQnFrRixHQUE0QixDQUFDUixJQ3pFN0JTLEdBQVcsQ0FDYno2RSxLQUFNLE9BQ051RyxPQUFRLFNBQ1I1RCxNQUFPLFNBR0wrM0UsR0FBMkIsQ0FDN0JqQixLQUFPNytFLElBQ1YsSUFBSW1NLEVBQVFuTSxFQUFFKy9FLE9BSVAsT0FITyxNQUFWLy9FLEVBQUVnRCxPQUNGbUosRUFBUW5NLEVBQUVnRCxNQUVBLENBQ1ZtSixRQUNBalEsTUFBTzhELEVBQUU2K0UsS0FDTCxFQUVMMzBFLEtBQU90TyxJQUNWLElBQUl1USxFQUFRdlEsRUFBRW9rRixRQUVkLE9BRGMsTUFBVnBrRixFQUFFb0gsT0FBZ0JtSixFQUFRdlEsRUFBRW9ILE1BQ3pCLENBQ0htSixRQUNBalEsTUFBT04sRUFBRW9rRixRQUNaLEVBRUVDLFFBQVVDLElBR04sQ0FDSC96RSxNQUhTLEdBQUUrekUsRUFBRy96RSxTQUFTK3pFLEVBQUdDLGNBSTFCamtGLE1BSFMsR0FBRWdrRixFQUFHdDhFLGVBQWVzOEUsRUFBR0UscUJBZS9CQyxHQUF1QixDQUN6QkMsVUFBV3JCLEdBQ1hyN0UsS0FBTTI4RSxHQUNOQyxlQUFnQkMsR0FDaEJDLFlBQWFELElBSVhFLEdBQWdCLENBQ2xCLENBQ0huK0UsR0FBSSxZQUNKbytFLGVBQWdCLGVBQ2hCejBFLE1BQU82b0IsS0FBSyxtQ0FDWmx4QixNQUFPLFFBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZmdELGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssbUNBQ1o4ckQsV0FBWSxLQUNaQyxZQUFhLHdDQUNiQyxpQkFBa0IsS0FDbEI5a0YsTUFBTyxPQUNQK2tGLFVBQVcsS0FDWEMsc0JBQXVCLEtBQ3ZCQyxjQUFlLEtBQ2ZDLGdCQUFpQixLQUNqQkMsZ0JBQWlCLEtBQ2pCQyxRQUFTekIsR0FBU2wwRSxVQUduQixDQUNIbkosR0FBSSxPQUNKbytFLGVBQWdCLG1CQUNoQnowRSxNQUFPNm9CLEtBQUssOEJBQ1p1bkQsWUFBYSxPQUNiejRFLE1BQU8sT0FDUCs1RSxpQkFBa0IsQ0FBQyxDQUNmMXhFLE1BQU82b0IsS0FBSyxtQ0FDWityRCxZQUFhLHdDQUNiN2tGLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU2wwRSxRQUNuQixDQUNDazFFLGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssOEJBQ1o4ckQsV0FBWSxLQUNaNWtGLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBUzkzRSxTQUduQixDQUNIdkYsR0FBSSxNQUNKbytFLGVBQWdCLGtCQUNoQnowRSxNQUFPNm9CLEtBQUssNkJBQ1pseEIsTUFBTyxNQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ25CLENBQ0NrMUUsaUJBQWlCLEVBQ2pCMTBFLE1BQU82b0IsS0FBSyw2QkFDWjhyRCxXQUFZLGFBQ1o1a0YsTUFBTyxNQUNQK2tGLFVBQVcsT0FDWEssUUFBU3pCLEdBQVM5M0UsU0FHbkIsQ0FDSHZGLEdBQUksVUFDSm8rRSxlQUFnQixzQkFDaEJ6MEUsTUFBTzZvQixLQUFLLGlDQUNabHhCLE1BQU8sU0FDUCs1RSxpQkFBa0IsQ0FBQyxDQUNmMXhFLE1BQU82b0IsS0FBSyxtQ0FDWityRCxZQUFhLHdDQUNiN2tGLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU2wwRSxRQUNuQixDQUNDazFFLGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssaUNBQ1o4ckQsV0FBWSxPQUNaNWtGLE1BQU8sU0FDUG9sRixRQUFTekIsR0FBUzkzRSxTQUduQixDQUNIdkYsR0FBSSxLQUNKbytFLGVBQWdCLGlCQUNoQnowRSxNQUFPNm9CLEtBQUssNEJBQ1pseEIsTUFBTyxNQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ25CLENBQ0NrMUUsaUJBQWlCLEVBQ2pCMTBFLE1BQU82b0IsS0FBSyw0QkFDWjhyRCxXQUFZLE9BQ1o1a0YsTUFBTyxNQUNQb2xGLFFBQVN6QixHQUFTOTNFLFNBR25CLENBQ0h2RixHQUFJLFVBQ0pvK0UsZUFBZ0Isc0JBQ2hCejBFLE1BQU82b0IsS0FBSyxpQ0FDWmx4QixNQUFPLFVBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1orckQsWUFBYSx3Q0FDYjdrRixNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVNsMEUsUUFDbkIsQ0FDQ2sxRSxpQkFBaUIsRUFDakIxMEUsTUFBTzZvQixLQUFLLGlDQUNaOHJELFdBQVksT0FDWjVrRixNQUFPLFVBQ1BvbEYsUUFBU3pCLEdBQVM5M0UsU0FHbkIsQ0FDSHZGLEdBQUksS0FDSm8rRSxlQUFnQixpQkFDaEJ6MEUsTUFBTzZvQixLQUFLLDRCQUNabHhCLE1BQU8sS0FDUCs1RSxpQkFBa0IsQ0FBQyxDQUNmMXhFLE1BQU82b0IsS0FBSyxtQ0FDWityRCxZQUFhLHdDQUNiN2tGLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU2wwRSxRQUNuQixDQUNDazFFLGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssNEJBQ1o4ckQsV0FBWSxPQUNaNWtGLE1BQU8sS0FDUG9sRixRQUFTekIsR0FBUzkzRSxTQUduQixDQUNIdkYsR0FBSSxPQUNKbytFLGVBQWdCLG1CQUNoQnowRSxNQUFPNm9CLEtBQUssOEJBQ1pseEIsTUFBTyxPQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ25CLENBQ0NrMUUsaUJBQWlCLEVBQ2pCMTBFLE1BQU82b0IsS0FBSyw4QkFDWjhyRCxXQUFZLE9BQ1o1a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTOTNFLFNBR25CLENBQ0h2RixHQUFJLE9BQ0pvK0UsZUFBZ0IsbUJBQ2hCejBFLE1BQU82b0IsS0FBSyw4QkFDWmx4QixNQUFPLFlBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1orckQsWUFBYSx3Q0FDYjdrRixNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVNsMEUsUUFDbkIsQ0FDQ2sxRSxpQkFBaUIsRUFDakIxMEUsTUFBTzZvQixLQUFLLDhCQUNaK3JELFlBQWEsaUNBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFVBR25CLENBQ0huSixHQUFJLFNBQ0pvK0UsZUFBZ0IsbUJBQ2hCejBFLE1BQU82b0IsS0FBSyxnQ0FDWmx4QixNQUFPLFNBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1pnc0QsaUJBQWtCLElBQWUsQ0FBQyxDQUFFNzBFLE1BQU8sU0FBVWpRLE9BQVEsSUFDN0RBLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU3o2RSxRQUduQixDQUNINUMsR0FBSSxVQUNKbytFLGVBQWdCLHNCQUNoQnowRSxNQUFPNm9CLEtBQUssaUNBQ1pseEIsTUFBTyxVQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ25CLENBQ0NrMUUsaUJBQWlCLEVBQ2pCMTBFLE1BQU82b0IsS0FBSyxpQ0FDWjhyRCxXQUFZLE9BQ1o1a0YsTUFBTyxVQUNQb2xGLFFBQVN6QixHQUFTOTNFLFNBR25CLENBQ0N2RixHQUFJLFFBQ0pvK0UsZUFBZ0IsZ0NBQ2hCejBFLE1BQU82b0IsS0FBSywrQkFDWmx4QixNQUFPLFFBQ1grNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1pnc0QsaUJBQWtCLElBQWUsQ0FBQyxDQUFFNzBFLE1BQU8sUUFBU2pRLE9BQVEsSUFDNURBLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU3o2RSxRQUduQixDQUNDNUMsR0FBSSxTQUNKbytFLGVBQWdCLG1DQUNoQnowRSxNQUFPNm9CLEtBQUssZ0NBQ1pseEIsTUFBTyxXQUNYKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaZ3NELGlCQUFrQixJQUFlLENBQUMsQ0FBRTcwRSxNQUFPLFNBQVVqUSxPQUFRLElBQzdEQSxNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVN6NkUsUUFHbkIsQ0FDSDVDLEdBQUksb0JBQ0pvK0UsZUFBZ0IsNENBQ2hCejBFLE1BQU82b0IsS0FBSywyQ0FDWmx4QixNQUFPLEtBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1pnc0QsaUJBQWtCLElBQWUsQ0FBQyxDQUFFNzBFLE1BQU8sR0FBSWpRLE9BQVEsSUFDdkRBLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU3o2RSxNQUNuQixDQUNDeTdFLGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssMkNBQ1orckQsWUFBYSxtQ0FDYjdrRixNQUFPLE9BQ1BpbEYsZUFBZSxFQUNmRCxzQkFBdUIsVUFDdkJJLFFBQVN6QixHQUFTbDBFLFVBR25CLENBQ0NuSixHQUFJLGlCQUNSKytFLFNBQVUsT0FFTlgsZUFBZ0IsNENBQ2hCejBFLE1BQU82b0IsS0FBSyx3Q0FDWmx4QixNQUFPLGlCQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaZ3NELGlCQUFrQixJQUFlLENBQUMsQ0FBRTcwRSxNQUFPLEdBQUlqUSxPQUFRLElBQ3ZEQSxNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVN6NkUsTUFDbkIsQ0FDQytHLE1BQU82b0IsS0FBSyxnQ0FDWjhyRCxXQUFZLEtBQ1o1a0YsTUFBTyxTQUNYK2tGLFVBQVcsT0FDUEssUUFBU3pCLEdBQVM5M0UsT0FDbkIsQ0FDSDg0RSxpQkFBaUIsRUFDYjEwRSxNQUFPNm9CLEtBQUssd0NBQ1o4ckQsV0FBWSxPQUNaNWtGLE1BQU8sV0FDWCtrRixVQUFXLGdCQUNQSyxRQUFTekIsR0FBUzkzRSxTQUd2QixDQUVDdkYsR0FBSSxjQUNSKytFLFNBQVUsT0FFTlgsZUFBZ0IseUNBQ2hCejBFLE1BQU82b0IsS0FBSyxxQ0FDWmx4QixNQUFPLGNBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1pnc0QsaUJBQWtCLElBQWUsQ0FBQyxDQUFFNzBFLE1BQU8sR0FBSWpRLE9BQVEsSUFDdkRBLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU3o2RSxNQUNuQixDQUNIeTdFLGlCQUFpQixFQUNiMTBFLE1BQU82b0IsS0FBSyxnQ0FDWjhyRCxXQUFZLEtBQ1o1a0YsTUFBTyxTQUNYK2tGLFVBQVcsT0FDUEssUUFBU3pCLEdBQVM5M0UsU0FHdkIsQ0FDQ3ZGLEdBQUksY0FDSm8rRSxlQUFnQix1Q0FDaEJ6MEUsTUFBTzZvQixLQUFLLHFDQUNabHhCLE1BQU8sVUFDUCs1RSxpQkFBa0IsQ0FBQyxDQUNuQjF4RSxNQUFPNm9CLEtBQUssbUNBQ1orckQsWUFBYSx3Q0FDYjdrRixNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVNsMEUsUUFDZixDQUNIazFFLGlCQUFpQixFQUNiMTBFLE1BQU82b0IsS0FBSyxnQ0FDWjhyRCxXQUFZLEtBQ1o1a0YsTUFBTyxTQUNYK2tGLFVBQVcsS0FDUEssUUFBU3pCLEdBQVM5M0UsU0FHdkIsQ0FDQ3ZGLEdBQUksaUJBQ0pvK0UsZUFBZ0Isa0RBQ2hCejBFLE1BQU82b0IsS0FBSyx3Q0FDWmx4QixNQUFPLGVBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDbkIxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ2YsQ0FDQ1EsTUFBTzZvQixLQUFLLGdDQUNaOHJELFdBQVksS0FDWjVrRixNQUFPLFNBQ1gra0YsVUFBVyxLQUNQSyxRQUFTekIsR0FBUzkzRSxPQUNuQixDQUNIODRFLGlCQUFpQixFQUNiMTBFLE1BQU82b0IsS0FBSyw4QkFDWjhyRCxXQUFZLE9BQ1o1a0YsTUFBTyxPQUNYK2tGLFVBQVcsZ0JBQ1BLLFFBQVN6QixHQUFTOTNFLFNBR3ZCLENBQ0N2RixHQUFJLGVBQ0pvK0UsZUFBZ0Isd0NBQ2hCejBFLE1BQU82b0IsS0FBSyxzQ0FDWmx4QixNQUFPLFdBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDbkIxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ2YsQ0FDSGsxRSxpQkFBaUIsRUFDYjEwRSxNQUFPNm9CLEtBQUssZ0NBQ1o4ckQsV0FBWSxLQUNaNWtGLE1BQU8sU0FDWCtrRixVQUFXLEtBQ1BLLFFBQVN6QixHQUFTOTNFLFNBR3ZCLENBQ0N2RixHQUFJLGtCQUNKbytFLGVBQWdCLG1EQUNoQnowRSxNQUFPNm9CLEtBQUsseUNBQ1pseEIsTUFBTyxnQkFDUCs1RSxpQkFBa0IsQ0FBQyxDQUNuQjF4RSxNQUFPNm9CLEtBQUssbUNBQ1orckQsWUFBYSx3Q0FDYjdrRixNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVNsMEUsUUFDZixDQUNDUSxNQUFPNm9CLEtBQUssZ0NBQ1o4ckQsV0FBWSxLQUNaNWtGLE1BQU8sU0FDWCtrRixVQUFXLEtBQ1BLLFFBQVN6QixHQUFTOTNFLE9BQ25CLENBQ0g4NEUsaUJBQWlCLEVBQ2IxMEUsTUFBTzZvQixLQUFLLDhCQUNaOHJELFdBQVksT0FDWjVrRixNQUFPLE9BQ1gra0YsVUFBVyxnQkFDUEssUUFBU3pCLEdBQVM5M0UsU0FHdkIsQ0FDQ3ZGLEdBQUksb0JBQ0pvK0UsZUFBZ0Isd0NBQ2hCejBFLE1BQU82b0IsS0FBSywyQ0FDWmx4QixNQUFPLFlBQ1ArNUUsaUJBQWtCLENBQUMsQ0FDZjF4RSxNQUFPNm9CLEtBQUssbUNBQ1orckQsWUFBYSx3Q0FDYjdrRixNQUFPLE9BQ1BvbEYsUUFBU3pCLEdBQVNsMEUsUUFDbkIsQ0FDQ2sxRSxpQkFBaUIsRUFDakIxMEUsTUFBTzZvQixLQUFLLDJDQUNaOHJELFdBQVksT0FDWjVrRixNQUFPLFlBQ1Ara0YsVUFBVyxvQkFDWEssUUFBU3pCLEdBQVM5M0UsU0FHdkIsQ0FFSHZGLEdBQUksTUFDSm8rRSxlQUFnQixrQkFDaEJ6MEUsTUFBTzZvQixLQUFLLDZCQUNabHhCLE1BQU8sTUFDUCs1RSxpQkFBa0IsQ0FBQyxDQUNmMXhFLE1BQU82b0IsS0FBSyxtQ0FDWityRCxZQUFhLHdDQUNiN2tGLE1BQU8sT0FDUG9sRixRQUFTekIsR0FBU2wwRSxRQUNuQixDQUNDazFFLGlCQUFpQixFQUNqQjEwRSxNQUFPNm9CLEtBQUssNkJBQ1o4ckQsV0FBWSxPQUNaNWtGLE1BQU8sTUFDUG9sRixRQUFTekIsR0FBUzkzRSxTQUVoQixDQUVOdkYsR0FBSSxZQUNKbytFLGVBQWdCLHdCQUNoQnowRSxNQUFPNm9CLEtBQUssbUNBQ1pseEIsTUFBTyxZQUNQKzVFLGlCQUFrQixDQUFDLENBQ2YxeEUsTUFBTzZvQixLQUFLLG1DQUNaK3JELFlBQWEsd0NBQ2I3a0YsTUFBTyxPQUNQb2xGLFFBQVN6QixHQUFTbDBFLFFBQ25CLENBQ0NrMUUsaUJBQWlCLEVBQ2pCMTBFLE1BQU82b0IsS0FBSyxtQ0FDWjhyRCxXQUFZLE9BQ1o1a0YsTUFBTyxZQUNQb2xGLFFBQVN6QixHQUFTOTNFLFVBY2pCeTVFLEdBQ0ssVUFDVjNCLDRCQUNBQyxpQkFDQWEsR0FDQU4scUJBQUFBLElDcmZLb0IsR0FBZ0NDLElBQ2xDLElBQUlDLEVBQTJCLEdBQy9CRCxFQUFrQmg2RSxTQUFTKzNFLElBQzlCLElBQUlsN0UsRUFPTCxTQUFnQ2s3RSxHQUM1QixJQUFJeEQsRUFBYSxHQUNqQndELEVBQVN4RCxXQUFXdjBFLFNBQVN5Z0QsSUFDaEM4ekIsRUFBVzk2RSxLQUFNLEdBQUVnbkQsRUFBRzNsRCxNQUFNMmxELEVBQUdqdkQsT0FBT2l2RCxFQUFHeTVCLFFBQVF6NUIsRUFBRzA1QixPQUFPMTVCLEVBQUcyNUIsVUFBVSxJQUVyRSxJQUFJQyxFQUFzQnRDLEVBQVN1QyxPQUFPbEYsT0FDYixNQUF6QjJDLEVBQVN1QyxPQUFPbCtFLFFBQ3ZCaStFLEVBQXVCLEdBQUVBLEtBQXVCdEMsRUFBU3VDLE9BQU9sK0UsU0FFN0QsSUFBSW0rRSxFQUFtQmhHLEVBQVduZ0YsS0FBSyxLQUNuQ29tRixFQUEyQnpDLEVBQVM5QixhQUFhaGlGLEtBQUtrVSxHQUFXQSxFQUFPM1QsUUFBT0osS0FBSyxLQUNwRnlJLEVBQVMsR0FBRWs3RSxFQUFTMXZFLFlBQVl2TixNQUFNMC9FLEtBQTRCSCxLQUF1QkUsSUFDN0YsT0FBTzE5RSxDQUNYLENBcEJhNDlFLENBQXVCMUMsR0FDbkNrQyxFQUF5QnhnRixLQUFLb0QsRUFBTSxJQUVqQyxJQUFJNjlFLEVBQXdCVCxFQUF5QjdsRixLQUFLLE1BQzFEd2xCLEVBQW1CTSxlQUFlLG9CQUFxQndnRSxFQUFzQixFQWtCakYsTUFrQk1DLEdBQWUsQ0FBQ3R5RSxFQUFhNHRFLEVBQWNxRSxLQUM3QyxJQUFJeC9FLEVBQUs4L0UsR0FBZ0J2eUUsRUFBYTR0RSxFQUFjcUUsR0FDaEQvRixFQUFhLEdBQ2pCLElBQUssSUFBSTF4RSxLQUFPeTNFLEVBQU8vRixXQUFZLENBQ3RDLElBQUk5ekIsRUFBSzY1QixFQUFPL0YsV0FBVzF4RSxHQUMzQjB4RSxFQUFXOTZFLEtBQUssQ0FDWnFCLEdBQUkrSCxFQUNKNEIsTUFBT2c4QyxFQUFHaDhDLE1BQ1ZqVCxLQUFLLEVBQ0wwb0YsTUFBTSxFQUNOQyxLQUFLLEVBQ0xDLFNBQVMsR0FFVixDQUNBLE1BQU8sQ0FDVnQvRSxLQUFJdU4sY0FBYTR0RSxlQUFjcUUsU0FBUS9GLGFBQ25DLEVBR0NzRyxHQUFnQy90RSxNQUFPelosRUFBYXluRixFQUFrQkMsS0FDeEUsSUFBSTF5RSxFQUFjMnlFLEtBQ2QvRSxRQUFxQmdGLEdBQXlCNW5GLEVBQWFnVixHQUMzRDZ5RSxRQUFnQkMsR0FBWTluRixFQUFhZ1YsRUFBYTR0RSxHQUN0RHFFLEVBQVNjLEdBQW1CRixFQUFTSixFQUFrQkMsR0FFM0QsTUFBTyxDQURRSixHQUFhdHlFLEVBQWE0dEUsRUFBY3FFLEdBQ3RDLEVBR3JCeHRFLGVBQWV1dUUsR0FBNEJDLEdBQ3ZDLElBQ0lDLEVBRElELEVBQ0t0bkYsTUFBTSxLQUNmd25GLEVBQWlCRCxFQUFLLEdBRXRCRSxFQURxQkYsRUFBSyxHQUNjdm5GLE1BQU0sS0FHOUMwbkYsRUFEc0JILEVBQUssR0FDcUJ2bkYsTUFBTSxLQUN0RDBuRixFQUEwQmxyRixPQUFTLEdBQzFDa3JGLEVBQTBCamlGLEtBQUssTUFHNUIsSUFBSWtpRixFQUFpQkosRUFBSyxHQUV0Qmx6RSxFQUFjdXpFLEdBQXdCSixHQUN0Q3ZGLFFBQXFCNEYsR0FBa0N4b0YsWUFBYWdWLEVBQWFvekUsR0FDakZuQixRQUFld0IsR0FBdUJ6b0YsWUFBYWdWLEVBQWE0dEUsRUFBY3lGLEVBQTBCLEdBQUlBLEVBQTBCLElBQ3RJbkgsRUErQlIsU0FBd0JvSCxFQUFnQnJCLEdBQ3BDLElBQUl5QixFQUFlSixFQUFlM25GLE1BQU0sS0FDcEN3dEIsRUFBSSwyQkFDSit5RCxFQUFhLEdBYWpCLE9BWkF3SCxFQUFhLzdFLFNBQVNnOEUsSUFDekIsSUFBSWx6RSxFQUFTMFksRUFBRWc5QyxLQUFLd2QsR0FDaEJsaEYsRUFBS2dPLEVBQU8sR0FDWnJFLEVBQVE2MUUsRUFBTy9GLFdBQVd6NUUsR0FBSTJKLE1BQzlCalQsRUFBTTRNLEtBQUtDLE1BQU15SyxFQUFPLElBQ3hCb3hFLEVBQU85N0UsS0FBS0MsTUFBTXlLLEVBQU8sSUFDekJxeEUsRUFBTS83RSxLQUFLQyxNQUFNeUssRUFBTyxJQUN4QnN4RSxFQUFVaDhFLEtBQUtDLE1BQU15SyxFQUFPLElBQ2hDeXJFLEVBQVc5NkUsS0FBSyxDQUNacUIsS0FBSTJKLFFBQU9qVCxNQUFLMG9GLE9BQU1DLE1BQUtDLFdBQzdCLElBRVE3RixDQUNYLENBaERxQjBILENBQWVOLEVBQWdCckIsR0FDaEQsTUFBTyxDQUNWeC9FLEdBQUk4L0UsR0FBZ0J2eUUsRUFBYTR0RSxFQUFjcUUsR0FDL0NqeUUsY0FDQTR0RSxlQUNBcUUsU0FDQS9GLGFBRUQsQ0FFQSxNQUFNcUcsR0FBa0IsQ0FBQ3Z5RSxFQUFhNHRFLEVBQWNxRSxFQUFRNEIsRUFBOEJDLEtBQ3RGLElBQUlDLEVBQVksR0FDRixNQUFWOUIsSUFDUDhCLEVBQVk5QixFQUFPbEYsT0FDQyxNQUFoQmtGLEVBQU9sK0UsUUFDUGdnRixFQUFhLEdBQUVBLE9BQWU5QixFQUFPbCtFLFVBR3RDLElBQUkrNUUsRUFBbUI5dEUsRUFBWTh0RSxpQkFDL0JzRixFQUFxQnhGLEVBQWFoaUYsS0FBSSxDQUFDa1UsRUFBUTNTLEtBQ3RELElBQUk2bUYsRUFBbUJsRyxFQUFpQjNnRixHQUFHaEIsTUFDM0MsT0FBb0MsTUFBaEMwbkYsR0FBeUNBLEVBQTZCRyxHQUNuRWwwRSxFQUFPM1QsTUFEd0YsSUFDbkYsSUFDYm9TLFFBQVF0TyxHQUFXLE1BQUxBLElBQVdsRSxLQUFLLEtBQzdCb25GLEVBQWlCbnpFLEVBQVl2TixHQUlqQyxPQUhJcWhGLEdBQW9ELE1BQXhCOXpFLEVBQVl3eEUsV0FDL0MyQixFQUFpQm56RSxFQUFZd3hFLFVBRWxCLEdBQUUyQixPQUFvQkMsT0FBd0JXLEdBQVcsRUFzQnJFLE1BR01oRSxHQUEyQjBCLEdBQWMxQix5QkFFekNhLEdBQWdCYSxHQUFjYixjQUc5QjJDLEdBQTJCSixHQUN0QnZDLEdBQWNoaEYsTUFBTTJxQyxHQUFPQSxFQUFHOW5DLElBQU0wZ0YsSUFHekNQLEdBQTJCbnVFLE1BQU96WixFQUFhZ1YsS0FDakQsSUFBSW96RSxFQUFxQmEsR0FBK0JqMEUsR0FFeEQsYUFEeUJ3ekUsR0FBa0N4b0YsRUFBYWdWLEVBQWFvekUsRUFDbEUsRUFHdkIzdUUsZUFBZXl2RSxHQUFpQ2xwRixFQUFhZ1YsRUFBYW0wRSxHQUN0RSxJQUFJZixFQUFxQnB6RSxFQUFZOHRFLGlCQUFpQmxpRixLQUFLbWlGLEdBQWVvRyxFQUFrQnBHLEVBQVc1aEYsU0FFdkcsYUFEeUJxbkYsR0FBa0N4b0YsRUFBYWdWLEVBQWFvekUsRUFFekYsQ0FFQSxNQUFNSSxHQUFvQy91RSxNQUFPelosRUFBYWdWLEVBQWFvekUsS0FDcEQsTUFBZnB6RSxJQUNQQSxFQUFjMnlFLE1BRVgsSUFDSTd5RSxFQURBOHRFLEVBQWUsR0FFbkIsSUFBSyxJQUFJemdGLEVBQUksRUFBR0EsRUFBSWltRixFQUFtQmpyRixPQUFRZ0YsR0FBSyxFQUFHLENBQzFELElBQUlpbkYsRUFBZWhCLEVBQW1Cam1GLEdBQ2xDNGdGLEVBQWEvdEUsRUFBWTh0RSxpQkFBaUIzZ0YsR0FDOUMsR0FBSTRnRixFQUFXaUQsYUFBZWpELEVBQVdrRCxpQkFBa0IsQ0FDdkQsSUFBSW9ELEVBQVUsR0FFakJBLEVBRE90RyxFQUFXaUQsa0JBQ0ZzRCxHQUFZdHBGLEVBQWFnVixFQUFZdk4sR0FBSXM3RSxHQUUvQ0EsRUFBV2tELG1CQUVsQm54RSxFQUFTdTBFLEVBQVF6a0YsTUFBTUssR0FBTUEsRUFBRTlELE9BQVNpb0YsSUFDMUIsTUFBVnQwRSxJQUNQQSxFQUFTdTBFLEVBQVEsR0FFbEIsTUFDSXYwRSxFQUFTLENBQUUxRCxNQUFPZzRFLEVBQWNqb0YsTUFBT2lvRixHQUUzQ3hHLEVBQWF4OEUsS0FBSzBPLEVBQ2YsQ0FDQSxPQUFPOHRFLENBQVksRUFHdkIsSUFBSTJHLEdBQWdCLENBQUEsRUFFcEIsTUFBTUQsR0FBYzd2RSxNQUFPelosRUFBYXlILEVBQUlzN0UsS0FDeEMsSUFBSXZ6RSxFQUFPLEdBQUUvSCxLQUFNczdFLEVBQVc1aEYsUUFDOUIsR0FBMEIsTUFBdEJvb0YsR0FBYy81RSxHQUNyQixHQUFJdXpFLEVBQVdpRCxZQUFhLENBQ3hCLElBQUl4bkYsRUFBTyxHQUFFd0IsS0FBZStpRixFQUFXaUQsY0FDdkN1RCxHQUFjLzVFLEdBQU9xVyxFQUFleUMsYUFBYTlwQixFQUNyRCxLQUFPLEtBQUl1a0YsRUFBV2tELGlCQUdsQixNQUFPLEdBRlBzRCxHQUFjLzVFLEdBQU91ekUsRUFBV2tELGtCQUdwQyxDQUVHLElBQUlvRCxRQUFnQkUsR0FBYy81RSxHQUNsQyxHQUFJdXpFLEVBQVdpRCxZQUFhLENBQy9CLElBQUl3RCxFQUF1QnpFLEdBQXlCaEMsRUFBV29ELHVCQUkvRCxHQUg0QixNQUF4QnFELElBQ0FBLEVBQXVCekUsR0FBeUJoQyxFQUFXNWhGLFFBRW5DLE1BQXhCcW9GLEVBQ0EsS0FBTyw2REFBNER6RyxFQUFXNWhGLFlBRWxGa29GLEVBQVVBLEVBQVF6b0YsS0FBS3FFLEdBQU11a0YsRUFBcUJ2a0YsSUFDL0MsQ0FDQSxPQUFPb2tGLEVBQVFuNUQsS0FBSzN3QixFQUFVa3FGLG1CQUFtQixFQUdyRCxTQUFTQyxHQUErQjEwRSxFQUFhMjBFLEdBQ2pEMzBFLEVBQVk4dEUsaUJBQWlCbjJFLFNBQVNvMkUsSUFDekMsSUFBSXFHLEVBQWVPLEVBQW9CNUcsRUFBVzVoRixPQUM5QixNQUFoQmlvRixJQUM4QixNQUE5QnJHLEVBQVd1RCxnQkFDWHZELEVBQVd1RCxrQkFDb0IsTUFBeEJ2RCxFQUFXbUQsVUFDbEIzL0QsRUFBbUJNLGVBQWVrOEQsRUFBV21ELFVBQVdrRCxHQUV4RDdpRSxFQUFtQk0sZUFBZWs4RCxFQUFXNWhGLE1BQU9pb0YsR0FDeEQsR0FFRCxDQUVBLE1BQU1ILEdBQWtDajBFLElBQ2pCLE1BQWZBLElBQ1BBLEVBQWMyeUUsTUFFYzN5RSxFQUFZOHRFLGlCQUFpQmxpRixLQUFLbWlGLElBQzlELEdBQWtDLE1BQTlCQSxFQUFXc0QsZ0JBQ1gsT0FBT3RELEVBQVdzRCxrQkFFdEIsSUFBSTJDLEVBQW1CakcsRUFBV21ELFVBS2xDLE9BSndCLE1BQXBCOEMsSUFDQUEsRUFBbUJqRyxFQUFXNWhGLE9BRWZvbEIsRUFBbUJDLGNBQWN3aUUsRUFDakMsS0FtQnBCLElBQUlZLEdBQWdCLENBQUEsRUFDaEJDLEdBQTZCLEtBQ2pDLE1BQU0vQixHQUFjcnVFLE1BQU96WixFQUFhZ1YsRUFBYTR0RSxLQUNqRCxJQUVJa0gsRUFBc0MsR0FGeEJ2akUsRUFBbUJDLGNBQWMsa0JBQ25DRCxFQUFtQkMsY0FBYyxlQUU5QixNQUFmeFIsSUFDUEEsRUFBYzJ5RSxNQUVTLE1BQWhCL0UsSUFDUEEsUUFBcUJnRixHQUF5QjVuRixFQUFhZ1YsSUFHeEQsSUFBSXhXLEVBM0JSLFNBQXlCd0IsRUFBYWdWLEVBQWE0dEUsR0FDL0MsSUFBSTc3RSxFQUFTaU8sRUFBWTh0RSxpQkFBaUJsaUYsS0FBSSxDQUFDbWlGLEVBQVk1Z0YsSUFDdEQsR0FBRTRnRixFQUFXNWhGLFNBQVN5aEYsRUFBYXpnRixHQUFHaEIsVUFDeENKLEtBQUssS0FFUixNQURXLEdBQUVmLHNEQUFnRWdWLEVBQVlqTSxTQUFTaEMsR0FFdEcsQ0FxQmNnakYsQ0FBZ0IvcEYsRUFBYWdWLEVBQWE0dEUsR0FDaERwekUsRUFwQlIsU0FBd0J3RixFQUFhNHRFLEdBQ2pDLElBQUlvSCxFQUFtQnBILEVBQWFoaUYsS0FBS2tVLEdBQVdBLEVBQU8zVCxRQUFPSixLQUFLLEtBRXZFLE1BRFcsR0FBRWlVLEVBQVl2TixNQUFNdWlGLEdBRW5DLENBZ0JjQyxDQUFlajFFLEVBQWE0dEUsR0FDbENrSCxHQUFzQ0QsS0FDN0NELEdBQWNwNkUsR0FBTyxLQUNyQnE2RSxHQUE2QkMsR0FFQSxNQUF0QkYsR0FBY3A2RSxLQUNyQm82RSxHQUFjcDZFLEdBQU9xVyxFQUFleUMsYUFBYTlwQixJQUU5QyxJQUFJcXBGLFFBQWdCK0IsR0FBY3A2RSxHQUlsQyxPQUhzRCxHQUFsRHE0RSxFQUFRMTdELE1BQU1wRSxHQUEyQixHQUFyQkEsRUFBRW1pRSxvQkFDN0JyQyxFQUFRLEdBQUdxQyxpQkFBa0IsR0FFbkJya0UsRUFBZU0sTUFBTTBoRSxFQUFRLEVBR2xDRixHQUErQixLQUNqQyxJQUFJaitFLEVBQVc3QixPQUFPQyxTQUFTNEIsU0FDL0IsSUFBSyxJQUFJdkgsRUFBSSxFQUFHQSxFQUFJeWpGLEdBQWN6b0YsT0FBUWdGLEdBQUssRUFBRyxDQUVyRCxHQUE2QixHQURoQixJQUFJcEYsT0FBTzZvRixHQUFjempGLEdBQUcwakYsZ0JBQzlCaHBGLEtBQUs2TSxHQUNaLE9BQU9rOEUsR0FBY3pqRixFQUV0QixDQUNBLEtBQU8sNkJBQTRCdUgsR0FBVSxFQUczQysrRSxHQUF5Qmh2RSxNQUFPelosRUFBYWdWLEVBQWE0dEUsRUFBY3VILEVBQWV6QyxXQUNyRUksR0FBWTluRixFQUFhZ1YsRUFBYTR0RSxJQUMzQ2grRSxNQUFNbWpCLEdBQU1BLEVBQUVnNkQsUUFBVW9JLEdBQWlCcGlFLEVBQUVoZixPQUFTMitFLElBR2pFMEMsR0FBaUMsQ0FBQ2xJLEVBQVVsdEUsS0FDM0IsTUFBZkEsSUFDUEEsRUFBYzJ5RSxNQUVYLElBQUkwQyxFQUFrQixDQUFBLEVBQ3RCcjFFLEVBQVk4dEUsaUJBQWlCbjJFLFNBQVMyOUUsR0FBVUQsRUFBZ0JDLEVBQU1ucEYsUUFBUyxJQUMvRSxJQUFJb3BGLEVBQWlCckksRUFBU3ZoRixNQUFNLEtBQ3BDLElBQUssSUFBSXdCLEVBQUksRUFBR0EsRUFBSW9vRixFQUFlcHRGLE9BQVFnRixHQUFLLEVBQUcsQ0FDdEQsSUFBSXFvRixFQUFhRCxFQUFlcG9GLEdBQUd4QixNQUFNLEtBQUssR0FDOUMsR0FBbUMsTUFBL0IwcEYsRUFBZ0JHLEdBQ2hCLE9BQU9ELEVBQWVwb0YsRUFFdkIsQ0FDQSxPQUFPLElBQUksRUFHVDRsRixHQUFxQixDQUFDRixFQUFTSixFQUFrQkMsS0FDbkQsSUFBSStDLEVBT0osT0FOd0IsTUFBcEJoRCxJQUNQZ0QsRUFBaUI1QyxFQUFRampGLE1BQU1takIsR0FBTUEsRUFBRWc2RCxRQUFVMEYsSUFBcUMsTUFBaEJDLEdBQXdCMy9ELEVBQUVoZixPQUFTMitFLE1BRWhGLE1BQWxCK0MsSUFDUEEsRUFBaUI1QyxFQUFRampGLE1BQU1takIsR0FBMkIsR0FBckJBLEVBQUVtaUUsbUJBRWQsTUFBbEJPLEVBQ0FBLEVBRUc1QyxFQUFRLEVBQUUsRUFHZjZDLEdBQ0ssQ0FDVmhFLGdDQUNBaUUsK0JBOVRzQ2x4RSxNQUFPelosRUFBYXFuRixLQUl2RCxHQUg2QixNQUF6QkEsSUFDUEEsRUFBd0I5Z0UsRUFBbUJDLGNBQWMsc0JBRXpCLE1BQXpCNmdFLEdBQTBELElBQXpCQSxFQUN4QyxPQUFPLEtBRUosSUFBSXVELEVBQVN2RCxFQUFzQjFtRixNQUFNLE1BQ3pDLE9BQUtpcUYsR0FBUXp0RixPQUFTLEVBQ2xCLEtBRW9CdW9CLFFBQVFxZSxJQUFJNm1ELEVBQU9ocUYsS0FBSTZZLGVBQzdCdXVFLEdBQTRCemdELEtBR3RCLEVBZ1QzQmlnRCxpQ0FDQUYsZ0JBQ0FDLG1CQUVBM0IsaUJBQ0FOLHFCQTVNNEJtQixHQUFjbkIscUJBNk0xQ2lELDJCQUNBWixnQ0FFQTJCLGVBQ0ExQiw0QkFDQXNCLG9DQUNBVixxQ0FDQVMsa0NBRUFuQixlQUNBVywwQkFDQTJCLGtDQUNBckMsc0JBRUEyQixrQ0FFQTVFLFNBbk9nQjJCLEdBQWMzQixVQzFJL0IsU0FBUytGLEdBQWdCQyxFQUFXN0QsR0FDaEMsSUFBSThELEVBQVlELEVBQVU3MEUsTUFDdEJnSCxFQUF3QixJQUFqQjZ0RSxFQUFVN3RFLEtBQ3JCNnRFLEVBQVUzNEUsT0FBT3hGLFNBQVMxSCxJQUM3QkEsRUFBRWdELEtBQU9oRCxFQUFFbU0sYUFDSm5NLEVBQUVyRCxLQUNULElBQUluQyxFQUFtQixJQUFac3JGLEVBQ1g5bEYsRUFBRXpFLEtBQU95RSxFQUFFekUsS0FBS0ksS0FBSzRGLElBRWpCLElBQUl3a0YsRUFBSyxDQUFFN2xGLEVBQUcxRixFQUFNZ1gsRUFBR2pRLEdBRXZCLE9BREEvRyxHQUFRd2QsRUFDRCt0RSxDQUFFLEdBQ1gsSUFJQ0YsRUFBVXI0RSxNQUFRLENBQ3JCbWYsT0FBUSxDQUNKMW5CLE1BQU0sR0FFVnFzQixVQUFXLENBQ1Byc0IsTUFBTSxJQUlQNGdGLEVBQVVwNEUsTUFBUSxDQUdyQmtmLE9BQVEsQ0FDSnVFLFVBQVdoWSxFQUFlSixhQUFha3BFLEVBQU9nRSxlQUVsRHowRCxXQUFZLENBQ0R0c0IsTUFBTSxHQUVqQitCLE1BQU8sQ0FDSWhDLEtBQU1nOUUsRUFBT2dFLGNBSXpCLENBRUEsU0FBU0MsR0FBVzM0RSxHQUNoQixNQUFRLEdBQUVBLEVBQU1uQixPQUNwQixDQUVBLFNBQVMrNUUsR0FBYUMsRUFBYTdsRixHQUMvQixNQUFtQixVQUFmNmxGLEVBQ0E3bEYsRUFFRzZsRixDQUNYLENBRUEsU0FBU0MsR0FBYXBqRixFQUFNUixFQUFJNmpGLEVBQVNDLEdBQ3pCLE1BQVJ0akYsSUFDUEEsRUFBT1IsR0FFSixJQUFJK2pGLEVBQWtCLEdBSXRCLEdBSFksTUFBUnZqRixJQUNQdWpGLEVBQW1CLEdBQUV2akYsTUFFTSxHQUFwQnNqRixFQUNQLE9BQU90akYsRUFFSixJQUFJd2pGLEVBQWVDLEdBQXNCSixHQUl6QyxNQUFRLEdBRk0sR0FEREEsRUFBUTFJLGFBQWE2SSxHQUNYcjZFLFdBRUhvNkUsS0FESkwsR0FBYUcsRUFBUXJFLE9BQU9nRSxhQUFjSyxFQUFRckUsT0FBTzFoRixTQUU3RSxDQU1BLFNBQVNvbUYsR0FBVzFFLEdBQ2hCLE1BQVEsR0FBRUEsRUFBT2dFLGdCQUFnQmhFLEVBQU8xaEYsT0FDNUMsQ0FtSUEsTUFBTXFtRixHQUFnQixDQUNsQixVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsV0F3SkosTUFBTUMsR0FBeUIsQ0FDN0IsbUJBQW9CLENBQUUxcUYsTUFBTyxtQkFBb0JpUSxNQUFPNm9CLEtBQUssOEJBQzdELGtCQUFtQixDQUFFOTRCLE1BQU8sa0JBQW1CaVEsTUFBTzZvQixLQUFLLDhCQUMzRCxVQUFXLENBQUU5NEIsTUFBTyxVQUFXaVEsTUFBTzZvQixLQUFLLGlDQUc3QyxTQUFTNnhELEdBQW1CQyxHQUMxQixPQUFPRixHQUF1QkUsSUFBYSxJQUM3QyxDQUVBLFNBQVNDLEdBQTBCQyxFQUFnQkMsRUFBZUMsRUFBbUJDLEdBQ2pGLEdBQUlELEVBQWtCaHJGLE9BQVMwcUYsR0FBdUIsV0FBVzFxRixNQUFPLENBQzNFLElBQ0lrckYsRUFBbUIsQ0FETEMsR0FBcUJMLEVBQWdCQyxFQUFlRSxJQUd0RSxPQURBRyxHQUFlRixHQUNSQSxDQUNKLENBQU8sR0FBSUYsRUFBa0JockYsT0FBUzBxRixHQUF1QixtQkFBbUIxcUYsTUFBTyxDQUMxRixJQUFJcXJGLEVBQVMsQ0FBQSxFQUNiTixFQUFjdi9FLFNBQVEsQ0FBQzIrRSxFQUFTbnBGLEtBQzVCLElBQUlzcUYsRUFBVWQsR0FBV0wsRUFBUXJFLFFBQzdCeUYsRUFBTyxDQUFDcEIsVUFBU1IsVUFBV21CLEVBQWU5cEYsSUFDeEIsTUFBbkJxcUYsRUFBT0MsR0FDZEQsRUFBT0MsR0FBVyxDQUFDQyxHQUVuQkYsRUFBT0MsR0FBU3JtRixLQUFLc21GLEVBQ2xCLElBRUosSUFBSUwsRUFBbUIsR0FDdkIsSUFBSyxJQUFJNzhFLEtBQU9nOUUsRUFBUSxDQUNwQixJQUFJRyxFQUFVSCxFQUFPaDlFLEdBQ2pCbzlFLEVBQWtCRCxFQUFRL3JGLEtBQUt3c0QsR0FBT0EsRUFBRzA5QixZQUN6QytCLEVBQWlCRixFQUFRL3JGLEtBQUt3c0QsR0FBT0EsRUFBR2srQixVQUN4Q3dCLEVBQWNSLEdBQXFCTSxFQUFpQkMsRUFBZ0JULEdBQ3hFQyxFQUFpQmptRixLQUFLMG1GLEVBQzFCLENBRUEsT0FEQVAsR0FBZUYsR0FDUkEsQ0FDSixDQUFPLEdBQUlGLEVBQWtCaHJGLE9BQVMwcUYsR0FBdUIsb0JBQW9CMXFGLE1BQU8sQ0FDM0YsSUFBSWtyRixFQUFtQixHQU12QixPQUxBSixFQUFldC9FLFNBQVEsQ0FBQ20rRSxFQUFXM29GLEtBQy9CLElBQUkycUYsRUFBY1IsR0FBcUIsQ0FBQ3hCLEdBQVksQ0FBQ29CLEVBQWMvcEYsSUFBS2lxRixHQUN4RUMsRUFBaUJqbUYsS0FBSzBtRixFQUFZLElBRXRDUCxHQUFlRixHQUNSQSxDQUNKLENBQ0EsTUFBTyxFQUNYLENBRUEsU0FBU0UsR0FBZUYsR0FFcEIsSUFBSVUsRUFBc0MsR0FBM0JWLEVBQWlCbHZGLE9BQ2hDa3ZGLEVBQWlCMS9FLFNBQVNtZ0YsSUFDeEJDLEdBQ0RELEVBQVlwNkUsTUFBTWEsUUFBUWIsR0FBVUEsRUFBTXhJLE9BQU15QyxTQUFTK0YsSUFDNURBLEVBQU1rZixPQUFPbzdELFNBQVcsRUFBRSxJQUd2QkYsRUFBWXA2RSxNQUFNdlYsT0FBUyxJQUcvQjJ2RixFQUFZcDZFLE1BQU0vRixTQUFTK0YsSUFDdkJBLEVBQU1rZixPQUFPa0UsU0FBVyxFQUFFLElBRTlCZzNELEVBQVkvMkQsS0FBS3lCLFFBQVE5bUIsTUFBUSxFQUFDLEdBRW5DLENBRUEsU0FBUzQ3RSxHQUFxQkwsRUFBZ0JDLEVBQWVFLEdBQ3pELEdBQUlILEVBQWU5dUYsUUFBVSt1RixFQUFjL3VGLE9BRTlDLFlBREFnRCxRQUFRQyxNQUFPLGtFQUFpRTZyRix5Q0FBc0RDLEtBR25JLElBQUllLEVBQWMsR0FDZEMsRUFBYSxHQUNiQyxFQUFZLENBQUEsRUFDWkMsRUFBZ0IsQ0FBQSxHQXpYeEIsU0FBZ0NsQixHQUNyQkEsRUFBYyxJQUFJcDNFLFFBQVE3TSxJQUNyQyxDQXdYOEJvbEYsQ0FBdUJuQixHQUNqRCxJQUFJb0IsRUFBZ0IsS0FDcEJyQixFQUFldC9FLFNBQVEsQ0FBQ20rRSxFQUFXM29GLEtBQ3RDLElBQUltcEYsRUFBVVksRUFBYy9wRixHQUV4QkEsRUFBSSxJQUNKbXJGLEVBQWdCLFFBR3BCLElBQUlDLEVBM1hMLFNBQStCekMsRUFBV1EsRUFBU0MsRUFBa0IrQixFQUFlbEIsR0FFaEYsSUFBSXJCLEVBQThCLElBQWxCRCxFQUFVNzBFLE1BQ3RCZ0gsRUFBd0IsSUFBakI2dEUsRUFBVTd0RSxLQUNqQnN3RSxFQUFhLEdBQ2JDLEVBQWE5K0UsT0FBTzA0QixLQUFLa2tELEVBQVFyRSxPQUFPL0YsWUF5SDVDLE1BeEgyQixPQUF2Qm9LLEVBQVFyRSxPQUFPcmxGLE1BQWlCa3BGLEVBQVUzNEUsUUFBUWhWLFFBQVVxd0YsRUFBV3J3RixTQUM5RTJ0RixFQUFVMzRFLE9BQVNxN0UsRUFBVzVzRixLQUFJLENBQUM2c0YsRUFBSXRyRixLQUNuQyxJQUFJb1EsRUFBUXU0RSxFQUFVMzRFLE9BQU92TixNQUFNSyxHQUFNaW1GLEdBQVdqbUYsSUFBTXdvRixJQUMxRCxPQUFhLE1BQVRsN0UsRUFBd0JBLEVBQ3JCLENBQ1ZuQixNQUFPcThFLEVBQ1BqdEYsS0FBTSxDQUFDLE1BQ0gsS0FHRnNxRixFQUFVMzRFLE9BQU94RixTQUFRLENBQUMxSCxFQUFHOUMsS0FFaEMsSUFBSXNGLEVBQUt5akYsR0FBV2ptRixHQUVoQnlvRixFQUFZcEMsRUFBUXJFLE9BQU8vRixXQUFXejVFLEdBQzFDLEdBQWlCLE1BQWJpbUYsRUFDQSxLQUFPLGtDQUFpQ2ptRiw2Q0FBOEN3L0UsT0FBT3gvRSxNQUFNdy9FLE9BQU9sRixVQUFVa0YsT0FBT3gvRSxNQUcvSCxJQUFJa21GLEVBQVMsRUFDcUIsR0FBOUJELEVBQVVFLG1CQUNWRCxHQUFVLEdBRWQsSUFBSUUsRUFBWXJ0RixJQUNaLElBQUlmLEVBQU9zckYsRUFDUHBvRixFQUFNbkMsRUFBS0ksS0FBSzRGLElBQ3ZCLElBQUl3a0YsRUFBSyxDQUFFN2xGLEVBQUcxRixFQUFNZ1gsRUFBR2pRLEVBQUltbkYsR0FFM0IsT0FEQWx1RixHQUFRd2QsRUFDRCt0RSxDQUFFLElBRU4sT0FBT3JvRixDQUFHLEVBSVZtckYsRUFBZXhDLEVBQVFwSyxZQUFZdDhFLE1BQU1vTSxHQUFNQSxFQUFFdkosSUFBTUEsSUFDdkRRLEVBQU95bEYsRUFBVXQ4RSxNQUNGLE1BQWZuTSxFQUFFOG9GLFdBQTRDLE9BQXZCekMsRUFBUXJFLE9BQU9ybEYsT0FDdENxRyxFQUFPaEQsRUFBRThvRixXQUViLElBQUlDLEVBQVEzQyxHQUFhcGpGLEVBQU1SLEVBQUk2akYsRUFBU0MsR0FFNUMsR0FBb0IsTUFBaEJ1QyxHQUE0QyxHQUFwQkEsRUFBYTN2RixJQUFhLENBQ2xELElBQUlxQyxFQUFPcXRGLEVBQVM1b0YsRUFBRXpFLE1BRWxCeXRGLEVBQVdQLEVBQVVRLFVBQ1QsTUFBWkQsR0FBcUMsTUFBakJYLEVBQXlCVyxFQUFXWCxFQUN2QyxNQUFaVyxJQUFvQkEsRUFBVyxRQUd4QyxJQUFJRSxFQUFRLENBQ2YxbUYsS0FDQTJtRixhQUFjLEVBQ2QvNEUsTUFBT3E0RSxFQUFVcjRFLE1BRWpCelQsS0FBTXFzRixFQUNOaG1GLEtBQU0rbEYsRUFDTnh0RixPQUNBb3RGLGlCQUFrQkYsRUFBVUUsa0JBRXpCTCxFQUFXbm5GLEtBQUsrbkYsRUFDcEIsQ0FHQSxHQUEwQixHQUF0QkwsR0FBY2pILE1BQ1hoaEUsRUFBZUssVUFBVTRrRSxFQUFVdUQsbUJBQW9CLENBQzFELElBQUlDLEVBQWF6b0UsRUFBZU8sZ0JBQWdCMGtFLEVBQVV1RCxtQkFBbUIsR0FDekVGLEVBQVEsQ0FDZjFtRixLQUNBMm1GLGFBQWMsRUFFZHhzRixLQUFNLE9BRU5xRyxLQUFPLEdBQUUrbEYsS0FBUzVCLFFBQ2xCNXJGLEtBQU1xdEYsRUFBU1MsR0FDZkMsUUFBUSxFQUNSWCxpQkFBa0JGLEVBQVVFLGtCQUV6QkwsRUFBV25uRixLQUFLK25GLEVBQ3BCLENBR0EsSUFBSUssRUFBc0IsQ0FBQ0MsRUFBUWhuRixFQUFJdEcsS0FDbkMsR0FBYSxNQUFUQSxFQUFpQixPQUFPLEtBRWYsTUFBVEEsSUFDUEEsR0FBU3dzRixHQUVOLElBQUlsdUYsRUFBT3NyRixFQU1YLE1BQU8sQ0FDVnRqRixLQUNBUSxLQVplLEdBQUUrbEYsTUFBVVMsS0FhM0JMLGFBQWMsRUFFZHhzRixLQUFNLE9BRU5wQixLQVpjeUUsRUFBRXpFLEtBQUtJLEtBQUs0RixJQUMxQixJQUFJd2tGLEVBQUssQ0FBRTdsRixFQUFHMUYsRUFBTWdYLEVBQUd0VixHQUV2QixPQURBMUIsR0FBUXdkLEVBQ0QrdEUsQ0FBRSxJQVVUNEMsaUJBQWtCRixFQUFVRSxpQkFDeEIsRUFHTCxHQUF5QixHQUFyQkUsR0FBY2hILElBQWEsQ0FDM0IsSUFBSTNsRixFQUFRMnBGLEVBQVU0RCxZQUFZQyxTQUFTeHNGLEdBQUd5c0YsUUFFMUNULEVBQVFLLEVBQW9CLE1BQU8vbUYsRUFBSXRHLEdBQzNDb3NGLEVBQVdubkYsS0FBSytuRixFQUNwQixDQUVBLEdBQTZCLEdBQXpCTCxHQUFjL0csUUFBaUIsQ0FDL0IsSUFBSTVsRixFQUFRMnBGLEVBQVU0RCxZQUFZQyxTQUFTeHNGLEdBQUcsbUJBRTFDZ3NGLEVBQVFLLEVBQW9CLFlBQWEvbUYsRUFBSXRHLEdBQ2pEb3NGLEVBQVdubkYsS0FBSytuRixFQUNwQixLQUdVWixDQUNYLENBNFBrQnNCLENBQXNCL0QsRUFBV1EsR0FBUyxFQUFNZ0MsRUFBZWxCLEdBRWhGYSxFQUFjQSxFQUFZejFDLE9BQU8rMUMsR0FHakMsSUFBSXVCLEVBN0pMLFNBQThCdkIsRUFBWWpDLEVBQVM2QixFQUFXQyxHQUMxRCxJQUFJbkcsRUFBU3FFLEVBQVFyRSxPQUNqQndGLEVBQVVkLEdBQVcxRSxHQUNyQjhILEdBQWtCLEVBQ2xCQyxFQUFldGdGLE9BQU8wNEIsS0FBSytsRCxHQUFXaHdGLE9BRXRDMnhGLEVBQVksR0FFaEIsSUFBSyxJQUFJRyxLQUFTM0QsRUFBUXJFLE9BQU8vRixXQUNwQzZOLEdBQW1CekQsRUFBUXJFLE9BQU8vRixXQUFXK04sR0FBT3JCLGlCQXNEakQsT0FuREFMLEVBQVc1Z0YsU0FBUzFILElBQ3ZCLElBQUlpcUYsRUFBa0IvQixFQUFVVixHQUM1Qjl1RSxFQUFNLEVBQ05NLEVBQW1CLEtBQ3ZCLEdBQWMsTUFBVmhaLEVBQUV6RSxLQUFjLENBRWYsSUFBSWlWLEVBQVN4USxFQUFFekUsS0FBS0ksS0FBSzNFLEdBQ2xCLE1BQVBBLEVBQUV3YSxFQUFvQixFQUNuQmphLEtBQUsyeUYsSUFBSWx6RixFQUFFd2EsS0FFZmtILEVBQU1uaEIsS0FBS21oQixJQUFJcXZCLE1BQU14d0MsS0FBTWlaLEdBQzNCd0ksRUFBbUJFLEVBQWVQLG9CQUFvQnFwRSxFQUFPZ0UsYUFBY3R0RSxFQUMvRSxDQUNBLEdBQXVCLE1BQW5CdXhFLEVBQXlCLENBQ3pCOUIsRUFBY1gsR0FBV3h1RSxFQUN6QixJQUFJdkwsRUFBUSxDQUNmMDhFLFdBQVlucUYsRUFBRWdELEtBQ2RpQyxNQUFNLEVBRU4wbkIsT0FBUSxDQUtQLEVBQ0QyRSxVQUFXLENBQ1Byc0IsTUFBTSxHQUVWc3NCLFdBQVksQ0FFUnRzQixNQUFNLEdBRVYrQixNQUFPLENBQ0hoQyxLQUFNa2hGLEdBQWFHLEVBQVFyRSxPQUFPZ0UsYUFBY0ssRUFBUXJFLE9BQU8xaEYsUUFFbkU4cEYsU0FBV0wsRUFBZSxHQUFNLEdBRTdCN0IsRUFBVVYsR0FBVy81RSxFQUFNMDhFLFdBQzNCTixFQUFVMW9GLEtBQUtzTSxFQUNuQixNQUNJbzhFLEVBQVUxb0YsS0FBSyxDQUNsQmdwRixXQUFZRixFQUNadDlELE9BQVEsQ0FFUCxFQUNEMW5CLE1BQU0sSUFHUGtqRixFQUFjWCxHQUFXandGLEtBQUttaEIsSUFBSXl2RSxFQUFjWCxHQUFVeHVFLEVBQWlCLElBRXhFNndFLEVBQVVuaUYsU0FBUzhKLEdBQU1BLEVBQUVtYixPQUFPdUUsVUFBWWhZLEVBQWVKLGFBQWFrcEUsRUFBT2dFLGFBQWM4RCxFQUFpQjNCLEVBQWNYLE1BQ3ZIcUMsQ0FDWCxDQTZGaUJRLENBQXFCL0IsRUFBWWpDLEVBQVM2QixFQUFXQyxHQUNyRUYsRUFBYUEsRUFBVzExQyxPQUFPczNDLEVBQVUsSUFuTzFDLFNBQTBCN0IsR0FDdEIsSUFBSXNDLEVBQVMsRUFBR0MsRUFBUyxFQUNyQkMsRUFBVTdELEdBQ1Y4RCxFQUFVQyxLQUFLQyxpQkFDbkIzQyxFQUFZdGdGLFNBQVMxSCxJQUNGLEdBQWxCQSxFQUFFbXBGLGNBQ0ZucEYsRUFBRW9RLE1BQVFvNkUsRUFBUUYsRUFBU0UsRUFBUXR5RixRQUNuQ295RixHQUFVLEdBQ2UsR0FBbEJ0cUYsRUFBRW1wRixlQUNUbnBGLEVBQUVvUSxNQUFRcTZFLEVBQVFGLEVBQVNFLEVBQVF2eUYsUUFDbkNxeUYsR0FBVSxFQUNkLEdBRUQsQ0EwTklLLENBQWlCNUMsR0F4TnJCLFNBQXdCNkMsRUFBWTdDLEdBQ2hDLElBQUk4QyxFQUFpQixDQUFBLEVBQ2pCQyxFQUFhLENBQUEsRUFDakIsSUFBSyxJQUFJN3RGLEVBQUksRUFBR0EsRUFBSThxRixFQUFZOXZGLE9BQVFnRixHQUFJLEVBQUcsQ0FDbEQsSUFBSThDLEVBQUlnb0YsRUFBWTlxRixHQUNoQnNVLEVBQUlxNUUsRUFBVzN0RixHQUNmc0YsRUFBS2dQLEVBQUUyNEUsV0FDZSxNQUF0QlcsRUFBZXRvRixLQUNmc29GLEVBQWV0b0YsR0FBTSxHQUNyQnVvRixFQUFXdm9GLEdBQU0sQ0FBRTJrRCxJQUFLMWxDLE9BQU91cEUsaUJBQWtCdHlFLElBQUsrSSxPQUFPd3BFLGlCQUFrQnRDLGtCQUFrQixJQUVyR21DLEVBQWV0b0YsR0FBSXJCLEtBQUtxUSxHQUN4QixJQUFJMDVFLEVBQVNILEVBQVd2b0YsR0FDeEJ4QyxFQUFFekUsS0FBS21NLFNBQVNuRyxJQUNaMnBGLEVBQU94eUUsSUFBTW5oQixLQUFLbWhCLElBQUl3eUUsRUFBT3h5RSxJQUFLblgsRUFBRWlRLEdBQ3BDMDVFLEVBQU8vakMsSUFBTTV2RCxLQUFLNHZELElBQUkrakMsRUFBTy9qQyxJQUFLNWxELEVBQUVpUSxFQUFFLElBRTFDMDVFLEVBQU92QyxrQkFBb0Izb0YsRUFBRTJvRixnQkFDMUIsQ0FFQSxJQUFJd0MsRUFBcUIsQ0FBQ2pyRixFQUFHa3JGLEtBQ2hDLEdBQVMsR0FBTGxyRixHQUFlLE1BQUxBLEdBQWFBLEdBQUt1aEIsT0FBT3VwRSxrQkFBb0I5cUYsR0FBS3VoQixPQUFPd3BFLGlCQUNuRSxPQUFPLEVBRVgsSUFBSUksRUFBVW5yRixFQUFJLElBQU0sRUFDeEIsT0FBS2tyRixHQUFTbHJGLEVBQUksSUFBUWtyRixHQUFTbHJGLEVBQUksRUFDNUJBLEVBQUltckYsRUFFSm5yRixFQUFJbXJGLENBQ2YsRUFFRyxJQUFLLElBQUl0QyxLQUFTK0IsRUFBZ0IsQ0FDckMsSUFBSVEsRUFBU1IsRUFBZS9CLEdBQ3hCbUMsRUFBU0gsRUFBV2hDLEdBQ3hCbUMsRUFBTy9qQyxJQUFNZ2tDLEVBQW1CRCxFQUFPL2pDLEtBQUssR0FDNUMrakMsRUFBT3h5RSxJQUFNeXlFLEVBQW1CRCxFQUFPeHlFLEtBQUssR0FFNUM0eUUsRUFBTzVqRixTQUFTOEosSUFDWixJQUFJKzVFLEVBQVVoMEYsS0FBSzJ5RixJQUFJZ0IsRUFBTy9qQyxLQUMxQnFrQyxFQUFVajBGLEtBQUsyeUYsSUFBSWdCLEVBQU94eUUsS0FDMUI2eUUsRUFBVUMsR0FDYmg2RSxFQUFFMjFDLElBQU0rakMsRUFBTy9qQyxJQUNmMzFDLEVBQUVrSCxJQUFNNnlFLEdBQ0VBLEVBQVVDLEdBQXNDLEdBQTNCTixFQUFPdkMsa0JBQ3RDbjNFLEVBQUUyMUMsS0FBTyxFQUFJcWtDLEVBQ2JoNkUsRUFBRWtILElBQU13eUUsRUFBT3h5RSxNQUVuQmxILEVBQUUyMUMsSUFBTStqQyxFQUFPL2pDLElBQ2YzMUMsRUFBRWtILElBQU13eUUsRUFBT3h5RSxJQUNaLEdBRUQsQ0FDSixDQXFLSSt5RSxDQUFleEQsRUFBWUQsR0FFM0IsSUFBSS8yRCxFQUtSLFNBQTJCKzJELEVBQWFDLEdBQ3BDLE1BQU8sQ0FDVm40RCxNQUFPLENBQ0h0dEIsR0FBSW9lLEVBQWUrQyxvQkFDbkI0dkQsTUFBTyxjQUdYemlELEtBQU0sQ0FDRnlCLFFBQVMsQ0FFUixFQUNEdlksSUFBSyxDQUNSLEdBR0Q0WCxLQUFNLENBQ0Y4NUQsUUFBUyxHQUNUL3VGLEtBQU0sUUFDTmxCLFFBQVMsQ0FDWmt3RixZQUFhLEtBTWRDLFFBQVMsQ0FDRW43RSxLQUFNLElBQ2JrN0UsWUFBYSxFQUliRSxhQUFjN0QsRUFBWXJzRixLQUFLcUUsR0FBTUEsRUFBRW9RLFNBSTNDc2hCLE9BQVEsQ0FDSnpzQixNQUFNLEVBRU42bUYsUUFBUyxPQUNUemhGLE1BQU8sRUFDUDBoRixVQUFXL0QsRUFBWXJzRixLQUFLcUUsR0FBWUEsRUFBRXNwRixPQUFpQixFQUFZLEtBRTNFdjRELE9BQVEsQ0FDSjlyQixNQUFNLEVBQ04rbUYscUJBQXFCLEVBQ3JCeGdGLFNBQVUsTUFDVnlnRixnQkFBaUIsUUFDakJ2c0QsWUFBYSxDQUNoQkMsa0JBQWtCLElBR25CenlCLE9BQVE4NkUsRUFFUnY2RSxNQUFPdzZFLEVBQ1B6NkUsTUFBTyxDQUNIbWYsT0FBUSxDQUNYMW5CLE1BQU0sR0FFSHFzQixVQUFXLENBQ2Ryc0IsTUFBTSxJQUlSLENBcEV1QmluRixDQUFrQmxFLEVBQWFDLEdBQ2xELE9BQU9oM0QsQ0FDWCxDQW9FQSxTQUFTazdELEdBQVc5RixFQUFTK0YsRUFBa0J4SSxHQUMzQyxJQUFJeUksRUFBVWhHLEVBQVF0MkUsWUFBWTh0RSxpQkFBaUJsaUYsS0FBSSxDQUFDbWlGLEVBQVk1Z0YsS0FDdkUsR0FBb0MsTUFBaEMwbUYsSUFBeUNBLEVBQTZCOUYsRUFBVzVoRixPQUFVLE9BQU8sS0FDdEcsSUFBSWlvRixFQUFla0MsRUFBUTFJLGFBQWF6Z0YsR0FBR2hCLE1BQzNDLE1BQVEsR0FBRTRoRixFQUFXNWhGLFNBQVNpb0YsR0FBYyxJQUN0QzcxRSxRQUFRdE8sR0FBVyxNQUFMQSxJQUFXbEUsS0FBSyxLQUtqQyxPQUhLc3dGLEdBQTRDLE1BQXhCL0YsRUFBUXJFLE9BQU9sK0UsUUFDM0N1b0YsRUFBVyxHQUFFQSxLQUFXaEcsRUFBUXJFLE9BQU9sK0UsU0FFN0J1b0YsQ0FDWCxDQUVBLFNBQVM1RixHQUFzQkosR0FDM0IsSUFBSXhJLEVBQW1Cd0ksRUFBUXQyRSxZQUFZOHRFLGlCQUMzQyxJQUFLLElBQUkzZ0YsRUFBSSxFQUFHQSxFQUFJMmdGLEVBQWlCM2xGLE9BQVFnRixHQUFLLEVBQUcsQ0FFeEQsR0FBa0MsR0FEakIyZ0YsRUFBaUIzZ0YsR0FDbkIyakYsZ0JBQTJCLE9BQU8zakYsQ0FDOUMsQ0FDQSxPQUFPLENBRVgsQ0FFQXNYLGVBQWU4M0UsR0FBbUJDLEVBQVlDLEVBQWFyRixFQUFXc0YsRUFBa0JDLEdBQ3BGLElBRUlDLEVBRkFDLEVBQWlCLENBQUVqcUUsWUFBYTZwRSxFQUFZN3BFLFlBQWFDLFVBQVc0cEUsRUFBWTVwRSxXQUdwRixHQUFLOHBFLEVBa0JFLENBQ1YsSUFBSUcsRUFBYyxDQUNqQjE4RCxLQUFNZzNELEVBQ04yRixlQUFlLEVBQ2YxakYsTUFBTyxJQUNQNjVDLFFBQVMsRUFDVDhwQyxXQUFZNUYsR0FjVDZGLEVBQWtCLEdBQUVULGdEQUNwQjU5RCxFQUFNLENBQUVzK0QsWUFiS1IsRUFBaUI5d0YsS0FBSzBxRixJQUNuQyxJQUFJNkcsRUFBb0J6RyxHQUFzQkosR0FFMUM4RyxFQUFPLENBQ2RsUSxTQUZpQmtQLEdBQVc5RixHQUc1QnRKLFVBQVksR0FBRXNKLEVBQVFyRSxPQUFPbEYsVUFLMUIsT0FIS3VKLEVBQVF0MkUsWUFBWTh0RSxpQkFBaUJxUCxHQUFtQi9MLGdCQUNoRWdNLEVBQUtDLE1BQVEvRyxFQUFRMUksYUFBYXVQLEdBQW1CaHhGLE9BRTNDaXhGLENBQUksT0FHeUJQLEtBQW1CQyxHQUN2RHpwRSxFQUFVLENBQ0gsZUFBZ0Isb0JBRTNCdXBFLFFBQXdCL3JFLEVBQWV5QyxhQUFhMnBFLEVBQWdCLENBQUVsMkUsT0FBUSxPQUFRc00sVUFBUzVjLEtBQU1WLEtBQUs2RSxVQUFVZ2tCLElBQ2pILEtBNUNZLENBQ2YsSUFBSTArRCxFQUFhLEdBQUVkLHNDQUNmZSxFQUFvQixjQUFhbkcsb0JBQTRCQSxpQ0FDN0RkLEVBQVVvRyxFQUFpQixHQUMzQlMsRUFBb0J6RyxHQUFzQkosR0FDMUNnRyxFQUFVRixHQUFXOUYsR0FDckI4RyxFQUFPLElBQ0pQLEVBQ0gzUCxTQUFVb1AsRUFDVnRQLFVBQVksR0FBRXNKLEVBQVFyRSxPQUFPbEYsVUFFNUJ1SixFQUFRdDJFLFlBQVk4dEUsaUJBQWlCcVAsR0FBbUIvTCxnQkFDekRnTSxFQUFLQyxNQUFRL0csRUFBUTFJLGFBQWF1UCxHQUFtQmh4RixPQUV6RCxJQUNJM0MsRUFBTyxHQUFFOHpGLEtBRE0vckUsRUFBbUJpRixlQUFlNG1FLEVBQU1HLEtBRzNEWCxFQUFrQixPQURRL3JFLEVBQWV5QyxhQUFhOXBCLEdBRW5ELENBMkJBLE9BQU9vekYsQ0FDWCxDQUVBLE1BQU1ZLEdBQ0ssQ0FDVjNHLDBCQUNBaEIsbUJBQ0F5Qix3QkFDQU4sNkJBQ0FGLHNCQUNBWixjQUNBRyxnQkFDQWtHLHNCQUNBSCxjQUNBMUYsMEJDeG5CSytHLEdBQVFsekYsRUFDZCxTQUFTbXpGLEdBQWlCOXdGLEdBQ3RCLEdBQVksUUFBUkEsRUFDUCxNQUFRLEtBQ0UsR0FBWSxRQUFSQSxFQUFnQixDQUU5QixPQURXMUQsT0FBT0MsR0FBSSx3RUFFbEIsQ0FBTSxHQUFZLE1BQVJ5RCxHQUF3QixRQUFSQSxFQUFnQixDQUM5QyxJQUFJMDlCLEVBQU9vekQsR0FBaUIsUUFDeEJDLEVBQVNGLEdBQU16MEYsUUFBUUMsS0FDdkIyMEYsRUFBY0QsRUFBTzcxRixRQUFRLElBQU0sR0FBRXdpQyxNQUNyQ3V6RCxFQUFTSixHQUFNejBGLFFBQVFJLEtBQ3ZCMDBGLEVBQWNELEVBQU9FLFdBQVcsSUFBTSxHQUFFenpELE1BQzVDLEdBQVksUUFBUjE5QixFQUFnQixDQUNoQixJQUFJb3hGLEVBQWU5MEYsT0FBT0MsR0FBSSxzQ0FDMUI4MEYsRUFBWU4sRUFBTzcxRixRQUFRLElBQU0sR0FBRWsyRixNQUNuQ0UsRUFBaUJQLEVBQU83MUYsUUFBUSxJQUFNLEdBQUVrMkYsSUFBZTF6RCxNQUN2RDZ6RCxFQUFlajFGLE9BQU9DLEdBQUkscURBRzlCLE1BQVEsSUFBRzgwRixLQUFhQyxLQUZSTCxFQUFPRSxXQUFXLElBQU0sR0FBRUksU0FDckJOLEVBQU9FLFdBQVcsSUFBTSxHQUFFSSxJQUFlN3pELFFBRWxFLENBQ0EsTUFBUSxJQUFHcXpELE9BQVlDLE9BQWlCQyxPQUFZQyxJQUNqRCxDQUFPLEdBQVksT0FBUmx4RixFQUNkLE9BQU82d0YsR0FBTXowRixRQUFvQixXQUN2QixHQUFZLFdBQVI0RCxFQUFtQixDQUdqQyxNQUFRLElBRkM4d0YsR0FBaUIsV0FDZkEsR0FBaUIsVUFFekIsQ0FDQSxPQUFPRCxHQUFNejBGLFFBQVE0RCxFQUN6QixDQUVBLE1BQU13eEYsR0FDSyxDQUNWVixxNUJDa0dLclQsRUFBV2pnQyxHQUFJLE1BQ2ZpMEMsRUFBd0JqMEMsR0FBSSxNQUk1QnJ4QyxFQUFTcXhDLEdBQUksVUFFbkIsSUFBSWswQyxFQUEyQjVJLEdBQWUvQywrQkFFOUMsTUFBTS9CLEVBQWdCOEUsR0FBZTlFLGNBQy9CMk4sRUFBdUJuMEMsR0FBSWswQyxHQUUzQnhPLEVBQVc0RixHQUFlNUYsU0FDMUIwTyxFQUFnQnAwQyxHQUFJLElBQ3BCcTBDLEVBQXdCcjBDLEdBQUksSUFDNUJzMEMsRUFBNkJ0MEMsR0FBSSxJQUdqQ3UwQyxFQUErQnYwQyxHQUFJLElBQ25DdzBDLEVBQStCeDBDLEdBQUssSUFFcEN5MEMsRUFBNkJ6MEMsSUFBSSxHQUNqQzAwQyxFQUFzQjNuRCxJQUFTLEtBQ2pDLEdBQXdDLEdBQXBDMG5ELEVBQTJCMXlGLE1BQ2xDLE9BQU8sRUFFSixJQUFLLElBQUlnQixFQUFJLEVBQUdBLEVBQUl5eEYsRUFBNkJ6eUYsTUFBTWhFLE9BQVFnRixHQUFLLEVBQUcsQ0FDMUUsSUFBSTR4RixFQUFVSCxFQUE2Qnp5RixNQUFNZ0IsR0FDakQsR0FBZSxNQUFYNHhGLEVBQW1CLFNBQ3ZCLElBQUk1eEQsRUFBUSxJQUFJcGxDLE9BQU9nM0YsR0FDbkJDLEVBQWNOLEVBQTJCdnlGLE1BQU1nQixHQUNuRCxHQUErQixHQUEzQmdnQyxFQUFNdGxDLEtBQUttM0YsR0FDWCxPQUFPLENBRVIsQ0FDQSxPQUFPLENBQUksSUFFVEMsRUFBZTcwQyxJQUFJLEdBRW5CeW9DLEVBQVV6b0MsR0FBSSxJQUNkODBDLEVBQWtCOTBDLEdBQUksQ0FBQSxHQUV0QiswQyxFQUEwQi8wQyxHQUFJLElBRTlCZzFDLEVBQW9CaDFDLEdBQUksSUFJOUIsSUFBSWkxQyxFQUFZLEtBRWhCejJCLElBQWMsS0FDVmdvQixFQUFjajVFLFNBQVNxSSxJQUMxQixJQUFJcy9FLEVBQXNCdGhELEVBQU13d0Msc0JBQXNCeHVFLEVBQVl2TixJQUN2QyxNQUF2QjZzRixHQUFzRCxHQUF2QkEsSUFDL0J0L0UsRUFBWW5YLFVBQVcsRUFDM0IsR0FDSyxJQUdOZ2dFLElBQVVwa0QsVUFDTjQ2RSxFQXdGSjU2RSx1QkFDVTg2RSxJQUVOQyxHQUVKLENBN0ZnQnp5RCxFQUFNLElBVXRCLFNBQVMweUQsRUFBYy9pRixHQUNuQjNELEVBQU81TSxNQUFRdVEsQ0FDbkIsQ0FFQStILGVBQWU4NkUsSUFDWFYsRUFBMkIxeUYsT0FBUSxFQWtDdkMsV0FDSSxJQUFJdXpGLEVBQXFCbkIsRUFBcUJweUYsT0FBTzJoRixpQkFBaUJsaUYsS0FBS21pRixHQUFlQSxFQUFXZ0QsYUFDM0UsTUFBdEIyTyxJQUE4QkEsRUFBcUIsSUFDdkRkLEVBQTZCenlGLE1BQVF1ekYsRUFBbUI5ekYsS0FBSyt6RixHQUM1QyxNQUFoQkEsRUFBZ0MsS0FDN0J2QixHQUFnQlYsaUJBQWlCaUMsSUFFekMsQ0F4Q0lDLEdBTUosV0FDSSxJQUFJNS9FLEVBQWN1K0UsRUFBcUJweUYsTUFDdkM4eUYsRUFBYTl5RixNQUFRNlQsRUFBWTh0RSxpQkFBaUJsaUYsS0FBS2kwRixHQUFPQSxFQUFHdE8sU0FBV3pCLEVBQVN6NkUsT0FBTTZ5QixPQUFPN3lCLEdBQWlCLEdBQVJBLEdBQy9HLENBUkl5cUYsU0FtREpyN0UsaUJBQ0ksSUFBSXFwRSxFQUFtQnlRLEVBQXFCcHlGLE1BQU0yaEYsaUJBQzlDaVMsRUFBcUIsR0FDekIsSUFBSyxJQUFJNXlGLEVBQUksRUFBR0EsRUFBSTJnRixFQUFpQjNsRixPQUFRZ0YsR0FBSyxFQUFHLENBQ3hELElBQUlrbkYsUUFBZ0JxQixHQUFlcEIsWUFBWXRwRixZQUFhdXpGLEVBQXFCcHlGLE1BQU1zRyxHQUFJcTdFLEVBQWlCM2dGLElBQzVHNHlGLEVBQW1CM3VGLEtBQUtpakYsRUFDckIsQ0FDQSxJQUFJMkwsUUFBNkJ0SyxHQUFlOUMseUJBQXlCNW5GLFlBQWF1ekYsRUFBcUJweUYsT0FDM0dzeUYsRUFBc0J0eUYsTUFBUTZ6RixFQUM5QnhCLEVBQWNyeUYsTUFBUTR6RixFQUN0QnJCLEVBQTJCdnlGLE1BQVE2ekYsRUFBcUJwMEYsS0FBS3FFLEdBQU1BLEVBQUU5RCxRQUNyRTh6RixHQUNKLENBOURVQyxTQUNBQyxHQUNWLENBT0ExN0UsZUFBZTI3RSxJQUNYdkIsRUFBMkIxeUYsT0FBUSxFQUNuQ3V5RixFQUEyQnZ5RixNQUFNd0wsU0FBUSxDQUFDeThFLEVBQWNqbkYsS0FFM0QsR0FEaUJveEYsRUFBcUJweUYsTUFBTTJoRixpQkFBaUIzZ0YsR0FDOUNva0YsU0FBV3pCLEVBQVM5M0UsTUFBTyxDQUN0QyxJQUFJOEgsRUFBUzIrRSxFQUFzQnR5RixNQUFNZ0IsR0FDekMyUyxFQUFPM1QsTUFBUWlvRixFQUNmdDBFLEVBQU8xRCxNQUFRZzRFLENBQ25CLFdBTUQzdkUsdUJBQ1UwN0UsR0FDVixDQU5VRSxHQUNOSixHQUNKLENBTUEsU0FBU0ssSUFDTHpCLEVBQTJCMXlGLE9BQVEsQ0FDdkMsQ0FpQkEsU0FBUzh6RixJQUNMdEIsRUFBNkJ4eUYsTUFKckIsR0FGaUJzeUYsRUFBc0J0eUYsTUFBTW9TLFFBQVF1QixHQUEyQixNQUFoQkEsRUFBTzFELE9BQWlDLElBQWhCMEQsRUFBTzFELFFBQWF4USxLQUFLa1UsR0FBV0EsRUFBTzFELFFBQzVHclEsS0FBSyxRQU14QyxDQWdCQTBZLGVBQWUwN0UsSUFDWHROLEVBQVExbUYsWUFBY3VwRixHQUFlNUMsWUFBWTluRixZQUFhdXpGLEVBQXFCcHlGLE1BQU9zeUYsRUFBc0J0eUYsT0FDaEgwbUYsRUFBUTFtRixNQUFNK3VCLEtBQUszd0IsVUFBVWtxRixvQkFDN0J5SyxFQUFnQi95RixNQUFRdXBGLEdBQWUzQyxtQkFBbUJGLEVBQVExbUYsTUFDdEUsQ0FTQSxTQUFTcXpGLEVBQXlCZSxHQUM5Qm5CLEVBQWtCanpGLE1BQVEsR0FDMUIsSUFBSSsvRSxFQUFhZ1QsRUFBZ0IveUYsTUFBTSsvRSxXQUN2QyxJQUFLLElBQUlzVSxLQUFTdFUsRUFDakJrVCxFQUFrQmp6RixNQUFNaUYsS0FBSyxDQUN6QnFCLEdBQUkrdEYsRUFDSnBrRixNQUFPOHZFLEVBQVdzVSxHQUFPcGtGLE1BQ3pCalQsS0FBSyxFQUNUMG9GLE1BQU0sRUFDRkMsS0FBSyxFQUNMQyxTQUFTLEdBR2xCLENBRUEsU0FBUzBPLEVBQTBCL1EsR0FDL0IsSUFBSWdSLEVBQW1CaFIsRUFBUzF2RSxZQUFZNUQsTUFDeEN1a0YsRUFBbUJuRCxHQUFnQjlHLHNCQUFzQmhILEdBSTdELE1BQVEsR0FBRWdSLE9BSEdoUixFQUFTOUIsYUFBYStTLEdBQ1Z2a0YsV0FDUHN6RSxFQUFTdUMsT0FBTzcxRSxPQUV0QyxDQUVBLFNBQVN3a0YsRUFBd0JsUixHQUM3QixJQUFJMXZFLEVBQWE0dEUsRUFBY3FFLEVBVy9CLE9BVmdCLE1BQVp2QyxHQUNQMXZFLEVBQWN1K0UsRUFBcUJweUYsTUFDbkN5aEYsRUFBZTZRLEVBQXNCdHlGLE1BQ3JDOGxGLEVBQVNpTixFQUFnQi95RixRQUV6QjZULEVBQWMwdkUsRUFBUzF2RSxZQUN2QjR0RSxFQUFlOEIsRUFBUzlCLGFBQ3hCcUUsRUFBU3ZDLEVBQVN1QyxRQUVOeUQsR0FBZW5ELGdCQUFnQnZ5RSxFQUFhNHRFLEVBQWNxRSxFQUV2RSxDQUVBLE1BQU05RixFQUFhMFUsSUFDZjFCLEVBQXdCaHpGLE1BQVFnekYsRUFBd0JoekYsTUFBTW9TLFFBQVFteEUsR0FBYWtSLEVBQXdCbFIsSUFBYW1SLEdBQVksRUFVbElDLEVBQWUsQ0FBQ0MsRUFBaUJDLEtBQ25DLElBQUlDLEVBQWlCOUIsRUFBd0JoekYsTUFBTW1ULFdBQVdvd0UsR0FBYUEsRUFBU2o5RSxJQUFNc3VGLEVBQWdCdHVGLEtBQ3RHd3VGLEVBQWlCLEVBQ3hCOUIsRUFBd0JoekYsTUFBTWlGLEtBQUsydkYsR0FFbkM1QixFQUF3Qmh6RixNQUFNODBGLEdBQWtCRixFQUd6Q0MsR0FDUHJwRSxFQUFLLFFBQVN3bkUsRUFBd0JoekYsTUFDbkMsRUFHRTZyQyxFQUFRLEtBQ1YsR0FBb0IsT0FBaEJqL0IsRUFBTzVNLE1BQWdCLENBQzlCLElBQ0l1akYsRUFBVyxDQUNYajlFLEdBRmNtdUYsSUFHZDVnRixZQUFhdStFLEVBQXFCcHlGLE1BQ2xDeWhGLGFBQWM2USxFQUFzQnR5RixNQUNwQzhsRixPQUFRaU4sRUFBZ0IveUYsTUFDeEIrL0UsV0FBWXI3RCxFQUFlTSxNQUFNaXVFLEVBQWtCanpGLFFBRXZEMjBGLEVBQWFwUixFQUNWLENBQ0EvM0QsRUFBSyxRQUFTd25FLEVBQXdCaHpGLE9BQ3RDODlFLEdBQU8sRUFHTEEsRUFBUSxLQUNWSSxFQUFTbCtFLE1BQU04OUUsT0FBTyxFQUVwQjJCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLFVBRTFCNDlDLEVBQWEsQ0FBRTFrRCxLQWhMRnVQLFVBQ1QwNkUsRUFBd0JoekYsTUFBUXdsRixRQUMxQjBOLEVBQ050bUYsRUFBTzVNLE1BQVEsU0FDZmsrRSxFQUFTbCtFLE1BQU0rSSxNQUFNLEVBNEtKKzBFLFFBQU82VyxlQUFjSSxzQkF6Q1osQ0FBQ3ZQLEVBQW1CcVAsS0FDOUM3QixFQUF3Qmh6RixNQUFRd2xGLEVBQzVCcVAsR0FDUHJwRSxFQUFLLFFBQVN3bkUsRUFBd0JoekYsTUFDbkMsb3JIQzdSSixJQUFBZzFGLEdBQWUxM0IsR0FBZ0IsQ0FDM0J6WSxXQUFZLENBQ2Y1NUMsTUFBU2dxRixJQUVOcGpELE1BQU8sQ0FDVnZyQyxHQUFJdkosUUFFRHlqRCxVQUNDLEVBQ0RuaEQsT0FDSCxNQUFPLENBQ0g2MUYsWUFBYSxHQUNiQyxhQUFhLEVBQ2JDLFdBQVksR0FDWkMsYUFBYSxFQUNiQyxXQUFXLEVBQ1h4OEQsS0FBT2pwQixHQUFNaXBCLEtBQUtqcEIsR0FDbEIwbEYsU0FBVyxHQUFFeDZGLEtBQUtvbkQsT0FBTzc3QyxXQUV6QixFQUNEOHRDLE1BQU8sQ0FBQyxTQUNSOFAsVUFDQyxFQUVEM0QsVUFDQyxFQUNEd0QsUUFBUyxDQUNaeXhDLFlBQWEsU0FBU3Y1RSxHQUNsQixPQUFPbGYsT0FBT2tmLEdBQVF3ZSxTQUFTLEVBQUcsSUFDckMsRUFDRGc3RCxZQUFhLFNBQVNwd0YsR0FNbEIsSUFBSXF3RixFQUFPcndGLEVBQUVzd0YsVUFDYixPQUFPanhFLGVBQWUyQiwrQkFBK0JxdkUsRUFDeEQsRUFDRDdwRCxNQUFPdnpCLGlCQUNILEdBQXVCLE1BQW5CdmQsS0FBS3E2RixZQUF5QyxJQUFuQnI2RixLQUFLcTZGLFdBQWtCLENBQ3pELElBQUlqZ0IsRUFBZSxHQUFFdDJFLHNEQUFzRDlELEtBQUtxNkYsYUFDNUU1ekYsUUFBWWtqQixlQUFleUMsYUFBYWd1RCxFQUFhLE1BQU0sR0FBTyxHQUV0RSxHQURBcDZFLEtBQUtvNkYsYUFBZTN6RixFQUFJMEksU0FDQSxHQUFwQm5QLEtBQUtvNkYsWUFDTCxNQUVELENBQ0EsSUFBSVMsRUFBa0IsQ0FDekJqVCxLQUFNdjlELG1CQUFtQkMsY0FBYyxRQUN2Q29CLFlBQWFyQixtQkFBbUJDLGNBQWMsZUFDOUNxQixVQUFXdEIsbUJBQW1CQyxjQUFjLGFBQzVDK3ZFLFdBQVlyNkYsS0FBS3E2RixZQUVWUyxFQUFxQnp3RSxtQkFBbUIwRSxrQkFBa0I4ckUsR0FDOUQsR0FBd0IsR0FBcEI3NkYsS0FBS3M2RixZQUFxQixDQUVqQyxJQUFJbGdCLEVBQWUsR0FBRXQyRSx3REFBd0RnM0YsSUFDN0VudkYsT0FBT203RSxLQUFLMU0sRUFBYSxTQUFTLEVBQy9CLEtBQU8sQ0FDVixJQUFJQSxFQUFlLEdBQUV0MkUsMENBQTBDZzNGLElBRTNEQyxTQURhcHhFLGVBQWV5QyxhQUFhZ3VELEVBQWEsTUFBTSxHQUFPLElBQ3JEN3VFLEdBRWR5dkYsRUFBa0JqOUQsS0FBSywwQ0FDdkJrOUQsRUFBWWw5RCxLQUFLLDZDQUVqQmxyQixFQUFRLG1DQUREd1gsbUJBQW1CQyxjQUFjLGtEQUNpRHl3RSxNQUFXRSxRQUN4R0QsRUFBa0JBLEVBQWdCcDZGLFFBQVEsVUFBV2lTLEdBQ3JEbW9GLEVBQW1CLEdBQUVBLEtBQW1CRCxJQUN4QzNxRSxzQkFBc0JRLGtCQUFrQjZELHFCQUFxQkcsdUJBQXdCLENBQUVzbUUsVUFBV0YsRUFBaUJ0MUYsS0FBTSxpQkFDdEgsQ0FDQTFGLEtBQUt1bkQsTUFBYSxNQUFFdzdCLE9BQ3ZCLEVBQ0QvMEUsS0FBTXVQLGVBQWU4OEUsR0FDakIsR0FBa0IsTUFBZEEsRUFBb0IsQ0FDM0IsSUFBSTVyRSxFQUFhcEUsbUJBQW1CeUQsaUJBQ2hDc3NELEVBQWUsR0FBRXQyRSxxREFBcUQycUIsSUFDdEVob0IsUUFBWWtqQixlQUFleUMsYUFBYWd1RCxHQUM1QyxHQUFXLE1BQVAzekUsR0FBMEIsTUFBWEEsRUFBSTAwRixJQUVuQixZQURBbDNGLFFBQVFDLE1BQU8sNkJBQTRCazJFLHVCQUcvQ2lnQixFQUFhNXpGLEVBQUkwMEYsR0FDZCxDQUNBLElBQUkvckYsRUFBU29jLHNCQUFzQkMsYUFDbkMsR0FBMEIsTUFBdEJyYyxFQUFPc2MsYUFBMkMsTUFBcEJ0YyxFQUFPdWMsVUFFNUMsWUFEQTFuQixRQUFRQyxNQUFNLHdFQUdYLElBQUlrM0YsRUFBYSxJQUFJeDdGLEtBQTBCLElBQXJCd1AsRUFBT3NjLGFBQzdCMnZFLEVBQVcsSUFBSXo3RixLQUF3QixJQUFuQndQLEVBQU91YyxXQUUzQjJ2RSxFQUFPdjlELEtBQUssNENBQ2hCdTlELEVBQU9BLEVBQUsxNkYsUUFBUSxnQkFBaUJaLEtBQUswNkYsWUFBWVUsSUFDdERFLEVBQU9BLEVBQUsxNkYsUUFBUSxjQUFlWixLQUFLMDZGLFlBQVlXLElBQ3BEcjdGLEtBQUttNkYsWUFBY21CLEVBTW5CdDdGLEtBQUtxNkYsV0FBYUEsRUFDbEJyNkYsS0FBS3VuRCxNQUFhLE1BQUV2NUMsTUFDdkIsRUFDRHV0RixlQUFnQixXQUNadjdGLEtBQUt1NkYsV0FBYXY2RixLQUFLdTZGLFNBQzNCLHVFQ3pKU2haLEdBQUEsQ0FBQWp0RSxNQUFBLENBQW1CakIsT0FBQSxZQUNsQndyQixNQUFNLGNBQWN2cUIsTUFBQSxDQUFvQmpCLE9BQUEsU0FDdENvdUUsR0FBQSxDQUFBNWlELE1BQU0sT0FDSjZpRCxHQUFBLENBQUE3aUQsTUFBTSx5Q0FJYjJqRCxHQUFBLENBQUEzakQsTUFBTSwrQ0FDRkEsTUFBTSxlQUFldnFCLE1BQUEsQ0FBMEIsY0FBQSxTQUMvQ3F1RSxHQUFBLENBQUE5akQsTUFBTSxvQkFJY0EsTUFBTSxNQUFNdHpCLEdBQUcsNkJBQTZCK0ksTUFBQSxDQUFRLEdBQ3JFa25GLEdBQUEsQ0FBQTM4RCxNQUFNLHFEQUNoQjhpRCxHQUFHLEtBQUEsS0FBQSxNQUFBLEtBQ1c4WixHQUFBLENBQUE1OEQsTUFBTSx5QkFBc0Q4aUQsR0FBbUksSUFBQSxDQUFoSTlpRCxNQUFNLHVCQUF1QmhzQixLQUFLLG9EQUFrRDh1RSxHQUF3QyxJQUFBLENBQXJDOWlELE1BQU0sb0NBQzlKNjhELEdBQUEsQ0FBQTc4RCxNQUFNLDBCQUNUOGlELEdBQXNGLE9BQUEsQ0FBaEY5aUQsTUFBTSxxQkFBbUIsQ0FBQzhpRCxHQUFnRCxPQUFBLENBQTFDOWlELE1BQU0saURBSXJEOGlELEdBQUcsS0FBQSxLQUFBLE1BQUEsS0FDSWdhLEdBQUEsQ0FBQTk4RCxNQUFNLHlCQUNiOGlELEdBQUcsS0FBQSxLQUFBLE1BQUEsZ0JBQ0hBLEdBS0ksS0FBQSxLQUFBLENBSkZBLEdBQXFDLEtBQUEsS0FBQSxJQUFqQyxVQUFNQSxHQUF1QixTQUFwQixzQkFDYkEsR0FBb0MsS0FBQSxLQUFBLElBQWhDLFVBQU1BLEdBQXNCLFNBQW5CLHFCQUNiQSxHQUF5RSxLQUFBLEtBQUEsSUFBckUsMkJBQXVCQSxHQUEwQyxTQUF2Qyx5Q0FDOUJBLEdBQXNGLEtBQUEsS0FBQSxJQUFsRixxQ0FBaUNBLEdBQTZDLFNBQTFDLHFQQWxDL0NpYSxHQTZDT0MsRUFBQSxDQTdDQ3R3RixHQUFJMC9DLEVBQVF1dkMsU0FBR3NCLFFBQU83d0MsRUFBS25hLE1BQUVvUyxJQUFJLFVBQ3RCbnpDLFVBQU0sSUFBMEMsT0FBeENrN0MsRUFBSWx0QixLQUFBLG1DQUFBLE1BQ1p4dUIsU0FFZixJQUF3RCxDQUF4RG95RSxHQUF3RCxNQUFBLENBQW5EOWlELE1BQU0sbUJBQW1COXBCLFVBQVFrMkMsRUFBV2t2Qyx3QkFDakR4WSxHQW1DTSxPQW5DTkosR0FtQ00sQ0FsQ0pJLEdBaUNLLE1BakNMSCxHQWlDSyxDQWhDSEcsR0FTSyxNQVRMRixHQVNLLENBUkhFLEdBRUssTUFGTEQsR0FFSyxDQURWQyxHQUE0TCxTQUFBLENBQXBMOWlELE1BQU0sMkJBQTJCbjVCLEtBQUssU0FBVTIzQiw0QkFBTzR0QixFQUFjc3dDLGdCQUFBdHdDLEVBQUFzd0Msa0JBQUExMEUsWUFBSW9rQyxFQUFJbHRCLEtBQUEsYUFBQSxHQUFjNGpELEdBQWlGLElBQUEsQ0FBN0U5aUQsTUFBS2s5RCxFQUFBLENBQUEsb0JBQXlCOXdDLEVBQVNzdkMsVUFBQSxtQkFBc0J0dkMsRUFBU3N2Qyx5QkFHL0s1WSxHQUdLLE1BSExhLEdBR0ssQ0FGSGIsR0FBK0wsUUFBL0xjLEdBQStMLElBQXhJZCxHQUFxRixRQUFBLENBQTlFajhFLEtBQUssUUFBUXFHLEtBQUssbURBQXVCay9DLEVBQVdxdkMsWUFBQWhZLEdBQUdyOUUsTUFBTSxPQUFPdTJELFFBQVEsbUJBQW5DdlEsRUFBV3F2QyxlQUEwQjBCLEdBQUEsT0FBSS93QyxFQUFJbHRCLEtBQUEsa0NBQUEsS0FDcEo0akQsR0FBMEosUUFBMUpnQixHQUEwSixJQUE5SGhCLFlBQU9qOEUsS0FBSyxRQUFRcUcsS0FBSyxtREFBdUJrL0MsRUFBV3F2QyxZQUFBaFksR0FBRXI5RSxNQUFNLHdCQUFuQmdtRCxFQUFXcXZDLHlCQUFtQnJ2QyxFQUFJbHRCLEtBQUEsbUNBQUEsU0FJM0drK0QsR0FBQXRhLEdBbUJLLE1BbkJMaUIsR0FtQkssQ0FsQkhqQixHQWlCSyxNQWpCTDZaLEdBaUJLLENBaEJWVSxHQUNPdmEsR0FBNk0sUUFBN004WixHQUE2TSxDQUFqTE8sR0FBQUcsR0FBQWx4QyxFQUFBbHRCLDBDQUF1QyxHQUFBOGpELEtBQ25FRixHQUlLLE1BSkwrWixHQUlLLENBSEg1WixNQUNBSCxHQUFnSSxRQUFBLENBQXpINTFFLEtBQUssa0RBQXNCay9DLEVBQVVvdkMsV0FBQS9YLEdBQUV6akQsTUFBTSx3QkFBd0IsV0FBUyxNQUFNdTlELGFBQWEsTUFBTUMsV0FBVyx3QkFBdkZweEMsRUFBVW92QyxpQkFDNUMxWSxHQUFpSSxPQUFBLENBQXRHcnRFLE1BQUEsQ0FBNkNnb0YsT0FBQSxNQUFBaGhFLFFBQUEsSUFBQSsrQixRQUFBLFNBQUF4N0IsTUFBTSx1QkFBc0Jvc0IsRUFBSWx0QixLQUFBLGtCQUFBLEtBQUEsS0FBMUZrdEIsRUFBV212QyxpQkFFbENtQyxHQUNBNWEsR0FBK0UsUUFBL0VnYSxHQUE0QlEsR0FBQWx4QyxFQUFBbHRCLDJDQUEyQyxJQUFDLEdBQ3hFeStELEdBQ0FDLGdCQVpnQnh4QyxFQUFTc3ZDLG9CQXdCWG1DLFdBQ2YsSUFBc0YsQ0FBdEYvYSxHQUFzRixTQUFBLENBQTlFajhFLEtBQUssU0FBVTIzQiw0QkFBTzR0QixFQUFLbmEsT0FBQW1hLEVBQUFuYSxTQUFBanFCLElBQUVnWSxNQUFNLHNCQUFvQm9zQixFQUFJbHRCLEtBQUEsVUFBQSx5WUNkakVvbEQsRUFBV2pnQyxHQUFJLE1BQ2YydEIsRUFBVzN0QixHQUFJLElBSWZ5NUMsRUFBc0IzNkYsT0FBT0MsR0FBSSxPQUR0Qiw0Q0FHWDI2RixFQUFrQjNzRCxJQUFTLElBRWpCLElBQUlwdkMsT0FERjg3RixHQUVEaDhGLEtBQUtrd0UsRUFBUzVyRSxTQW1CL0IsU0FBU3duQixJQUNMLElBQUkxZ0IsRUFBUSxHQUFFOGtFLEVBQVM1ckUsU0FBUzZ4QyxFQUFNK2xELE1BQ3RDcHNFLEVBQUssV0FBWTFrQixHQUNqQmczRSxHQUNKLENBRUEsTUFBTUEsRUFBUSxLQUNWSSxFQUFTbCtFLE1BQU04OUUsT0FBTyxFQUcxQnJ3QixFQUFhLENBQUUxa0QsS0FsQkRqQyxJQUNFLE1BQVJBLElBQWdCQSxFQUFPLElBRTNCQSxHQURBQSxFQUFPQSxFQUFLOHFGLFdBQVcsYUFBYyxNQUN6QkEsV0FBVywwQ0FBMkMsSUFDbEVobUIsRUFBUzVyRSxNQUFROEcsRUFDakJvM0UsRUFBU2wrRSxNQUFNK0ksTUFBTSxFQWFKKzBFLFVBRXJCcGhCLElBQVUsU0FHVixNQUFNK2lCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLHF3QkNqRTFCLElBQUFnb0YsR0FBZXY2QixHQUFnQixDQUMzQnpZLFdBQVksQ0FDWCxFQUNEaFQsTUFBTyxDQUNWdnJDLEdBQUl2SixPQUNKcXNELE9BQVFoTyxTQUVMaEgsTUFBTyxHQUVQOFAsVUFDQyxFQUNEN2tELEtBQUksS0FDQSxDQUNIeTRGLFlBQVksRUFDWmgvRCxLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUNsQnZGLEtBQU0sR0FDTnl0RixXQUFZLGtCQUlieDNDLFVBQ2dCLEdBQWZ4bEQsS0FBS3F1RCxRQUNMaitCLHNCQUFzQlMsZ0JBQWdCN3dCLEtBQUtvbkQsT0FBVyxHQUFHM3lCLHFCQUFxQkcsd0JBQXlCbzNELElBQ3pGLE1BQWJBLEVBQUt0bUYsT0FDTDFGLEtBQUtnOUYsV0FBYWhSLEVBQUt0bUYsTUFFUCxNQUFoQnNtRixFQUFLcnZDLFNBQ0xyckMsWUFBVyxLQUFRdFIsS0FBSytpRixPQUFPLEdBQUssSUFBT2lKLEVBQUtydkMsU0FFcEQzOEMsS0FBS2dPLEtBQUtnK0UsRUFBS2tQLFVBQVUsR0FHdEIsRUFDRGx5QyxRQUFTLENBQ1orNUIsTUFBTyxXQUNIL2lGLEtBQUsrOEYsWUFBYSxDQUNyQixFQUNEL3VGLEtBQU0sU0FBU3VCLEVBQU15dEYsR0FDakJoOUYsS0FBSys4RixZQUFhLEVBQ2xCLzhGLEtBQUt1UCxLQUFPQSxFQUNNLE1BQWR5dEYsSUFDUGg5RixLQUFLZzlGLFdBQWFBLEVBRW5CLG1FQ25Ec0MsR0FBVC94QyxFQUFTOHhDLGlCQUF2Qy9aLEdBR0ssTUFBQSxPQUhBMXVFLE1BQUEsQ0FBbUJsQixNQUFBLFFBQTBCeXJCLE1BQUtrOUQsRUFBQSxDQUFDLDBCQUFrQzl3QyxFQUFVK3hDLGVBQ2xHcmIsR0FBMEIsT0FBQSxDQUFwQjVzRSxVQUFRazJDLEVBQUkxN0MsTUFBQSxLQUFBLEVBQUEreEUsSUFDcEJLLEdBQW1GLFNBQUEsQ0FBM0VqOEUsS0FBSyxTQUFVMjNCLDRCQUFPNHRCLEVBQUs4M0IsT0FBQTkzQixFQUFBODNCLFNBQUFsOEQsSUFBRWdZLE1BQU0sWUFBYSxhQUFXLG1ZQ2dDbkUsSUFBSXp4QixFQUFhMHBDLEVBQU1tbUQsWUFDdkIsTUFBTUMsRUFBV2g2QyxHQUFJLE1Bd0dyQixJQUFJaHNDLEVBQVEsS0FDWnlxRCxJQUFVLE1BdkdWLFdBQ0UsSUFBSWxjLEdBQVUsRUFFVjAzQyxFQUFnQixDQUNsQkMsWUFBWSxFQUNaQyxTQUFTLEVBQ1Q5bEUsU0FBUyxFQUNUK2xFLFVBQVd4bUQsRUFBTXltRCxjQUNqQkMsTUFBTyxDQUFDLENBQUMsRUFBRyxRQUNaNS9ELFdBQVksZUFDWjZuRCxXQUFZM3VDLEVBQU0ybUQsZUFDbEJybUYsUUFBUzAvQixFQUFNMm1ELGVBQ2ZDLFdBQVcsRUFDWHIvRCxZQUFZLEVBQ1p2ZSxLQUFNLENBQ0pELE9BQVEsTUFDUnZkLElBQUt3MEMsRUFBTTZtRCxTQUNYMytELFFBQVMsTUFDVDE2QixLQUFNLENBQUNBLEVBQU04NkIsS0FDWCxHQUErQixHQUE1QjVzQixPQUFPMDRCLEtBQUs1bUMsR0FBTXJELE9BQ25CLE9BR0YsTUFBTTI4RixFQUFXeCtELEVBQVN5K0QsVUFBVUMsTUFDOUJDLEVBQW1CejVGLEVBQUtrNUYsTUFBTSxHQUFHdjhELE9BQ2pDKzhELEVBQWtCSixFQUFTMzhELE9BQU84OEQsR0FBa0JoeUYsYUFBVTFFLEVBZ0JwRSxPQWRJL0MsRUFBS2s1RixRQUNQbDVGLEVBQUtrNUYsTUFBUWw1RixFQUFLazVGLE1BQU0sR0FBRzkzQyxJQUMzQnBoRCxFQUFLMHZCLEtBQU9ncUUsUUFHTzMyRixJQUFqQi9DLEVBQUs4UyxnQkFDQTlTLEVBQUs4UyxhQUdNL1AsSUFBaEIvQyxFQUFLNkksU0FDUDdJLEVBQUsyNUYsV0FBYTM1RixFQUFLNkksT0FBT2xJLGFBQ3ZCWCxFQUFLNkksUUFHUDdJLENBQUksRUFFYjQ1RixXQUFZLFdBQ1Y3NkYsVUFBVTg2RixjQUNaLEdBRUZDLGFBQWMsU0FBVWgvRCxHQUN0Qi83QixVQUFVZzdGLGVBQ1ZqdUUsc0JBQXNCUSxrQkFBa0I2RCxxQkFBcUJNLGlCQUMvRCxHQUVGLElBQUssTUFBTTlnQixLQUFTNmlDLEVBQU13bkQsY0FBZ0IsQ0FBQSxFQUN4Q25CLEVBQWNscEYsR0FBUTZpQyxFQUFNd25ELGFBQWFycUYsR0FHM0MsSUFBSTdDLEVBQVNxc0IsZUFBZThnRSxzQkFBc0J6bkQsRUFBTTBuRCxlQUN4RHB0RixFQUFTcXNCLGVBQWVnaEUsYUFBYXJ0RixFQUFRK3JGLEdBQzdDam1GLEVBQVF6VixFQUFFeTdGLEVBQVNqNEYsT0FBT3k1RixVQUFVdHRGLEdBQ3BDLElBQUssTUFBTWlHLEtBQVd5L0IsRUFBTTZuRCxnQkFBa0IsR0FBSyxDQUVqRCxNQUFNQyxFQUFhdjBFLEVBQW1CQyxjQUFjalQsRUFBTzh0QixlQUMzRCxHQUFHeTVELEdBQTRCLElBQWRBLEVBQWtCLENBQ2pDLElBQUlDLEVBQXlCLEVBQzdCeG5GLEVBQU8yWSxRQUFRdmYsU0FBU3hLLElBQ3RCQSxFQUFFcWdDLGtCQUFtQixFQUNyQnU0RCxHQUEwQixFQUN2QjU0RixFQUFFc0YsSUFBTXF6RixJQUNUMzRGLEVBQUVxZ0Msa0JBQW1CLEVBQ3JCdTRELEdBQTBCLEVBQzVCLElBR0NBLEdBQTBCeG5GLEVBQU8yWSxRQUFRL3VCLFNBQzFDb3BCLEVBQW1CTSxlQUFldFQsRUFBTzh0QixjQUFlLElBQ3hEc2dCLEdBQVUsRUFFZCxDQUVBLElBQUl2Z0IscUJBQXFCLENBQ3ZCRSxZQUFhL3RCLEVBQU8rdEIsWUFDcEIvRSxTQUFVbnBCLEVBQ1Y4WSxRQUFTM1ksRUFBTzJZLFFBQ2hCbVYsY0FBZTl0QixFQUFPOHRCLGNBQ3RCRSxZQUFhaHVCLEVBQU9ndUIsWUFDcEIvaUMsSUFBS3cwQyxFQUFNNm1ELFNBQ1hweUYsR0FBSThMLEVBQU85TCxHQUNYZzZCLGVBQWdCbHVCLEVBQU9rdUIsZUFDdkJDLGlCQUFrQm51QixFQUFPbXVCLG1CQUN4QkssTUFDTCxDQUVBLEdBQUc0ZixHQUFXM08sRUFBTW1tRCxZQUFhLENBQy9CLE1BQU14cUYsRUFBVTRYLEVBQW1CNEQsa0JBQ25DLElBQUksTUFBTzNhLEVBQUtyTyxLQUFXd04sRUFDekJyRixFQUFXa0csR0FBT3JPLEVBRXBCaVMsRUFBTTRJLEtBQUt4ZCxJQUFJZSxVQUFVeTdGLFNBQVUsR0FBRWg3Riw2Q0FBOENzSixJQUNuRmloQixHQUNGLENBQ0YsQ0FJRTB3RSxFQUFlLElBR2pCLE1BQU0xd0UsRUFBUyxLQUNBLE1BQVRuWCxHQUNKQSxFQUFNNEksS0FBS3VPLFFBQVEsRUFRZjJ3RSxFQUEwQjVoRSxJQUM1QkssZUFBZXdoRSxxQkFBcUI3aEUsRUFBVSxFQUdsRCxJQUFJOGhFLEdBQWUsRUFFbkIsTUFBTUMsRUFBZ0IsS0FDbEJqb0YsRUFBTTI3QixRQUNOMzdCLEVBQU1xZ0IsU0FBUSxHQUNkMm5FLEdBQWUsRUFDZnBvRCxFQUFNMm1ELGVBQWVwbUYsUUFBUWpHLEdBQStCLE1BQXBCQSxFQUFPZ3NCLFlBQW1CM3NCLFNBQVNXLElBQzlFNHRGLEVBQXVCNXRGLEVBQU9nc0IsVUFBVSxHQUNuQyxTQUdOczFCLEVBQWEsQ0FBRXJrQyxTQUFRMndFLHlCQUF3QkcsZ0JBQWVsdUUsV0FwQjFDdkIsSUFDTCxNQUFUeFksR0FDSkEsRUFBTTRJLEtBQUt4ZCxJQUFJb3RCLEVBQVEsSUFvQnpCb3lDLElBQWdCLEtBQ1EsR0FBaEJvOUIsR0FDSkMsR0FBZSxzN0RDaENuQngxRSxFQUFlUSxzQ0FFZixNQUFNdTZELEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBRTFCLElBQ0lzcUYsRUFBc0IsbUJBQ3RCdmxCLEVBQWFsaEQsY0FBYzhDLFVBQVVDLFFBQ2hCd25CLEdBQUksQ0FBQSxHQUNIQSxJQUFJLEdBQzlCLE1BQU1tOEMsRUFBU244QyxHQUFJLElBQ2JvOEMsRUFBbUJwOEMsR0FBSSxNQUN2QnE4QyxFQUFnQnI4QyxHQUFJLE1BQ3BCczhDLEVBQW1CdDhDLEdBQUksTUFDdkJ1OEMsRUFBaUJ2OEMsR0FBSSxNQUNyQnc4QyxFQUFzQng4QyxHQUFJLE1BRTFCeW9DLEVBQVV6b0MsR0FBSSxJQUNkODBDLEVBQWtCOTBDLEdBQUksQ0FBQSxHQUNSc3JDLEdBQWUvQywrQkFFbkMsTUFBTWtVLEVBQXFCejhDLElBQUksR0FDTkEsSUFBSSxHQU03QixNQUFNMDhDLEVBQXVCMThDLEdBQUksSUFLM0IyOEMsRUFBdUJsMkUsRUFBZU8sZ0JBQWdCb3NFLEdBQWdCM0csd0JBSXRFbVEsRUFBOEI1OEMsR0FVcEMsV0FDSSxJQUFJNjhDLEVBQWMxMUUsRUFBbUJDLGNBQWMsMEJBQ25ELEdBQW1CLE1BQWZ5MUUsR0FBc0MsSUFBZkEsRUFDOUIsT0FBT3pKLEdBQWdCMUcsbUJBQW1CbVEsR0FFdkMsT0FBT0YsRUFBcUIsRUFDaEMsQ0FoQndDRyxJQUV4QyxJQUFJQyxFQUFnQyxLQUVwQyxNQUFNQyxFQUFnQixDQUFFaHJGLE1BQU82b0IsS0FBSyw2QkFBOEJ1SSxrQkFBa0IsR0FFOUU2NUQsRUFBaUIsYUFFakJDLEVBQWdCbDlDLElBQUksR0FnQjFCd2UsSUFBY25rRCxXQU5kLFdBQ0ksR0FBaUMsTUFBN0J1NUIsRUFBTTIyQyxvQkFBK0IsT0FDekMsSUFBSTMwRSxFQUFjMDFFLEdBQWUvQywrQkFDakMrQyxHQUFlaEIsK0JBQStCMTBFLEVBQWFnK0IsRUFBTTIyQyxvQkFDckUsQ0FHSTRTLEVBQWtDLElBR3RDMStCLElBQVVwa0QsV0FRVkEsaUJBRUksSUFFSWd1RSxFQUNBQyxFQUhBOFUsR0FBcUIsRUFDckI3VixRQUEwQitELEdBQWVDLCtCQUErQjNxRixhQUc1RSxHQUF5QixNQUFyQjJtRixFQUEyQixDQUNsQzZWLEdBQXFCLEVBQ3JCL1UsRUFBbUJsaEUsRUFBbUJDLGNBQWMsYUFDcEQsSUFBSTA3RCxFQUFXMzdELEVBQW1CQyxjQUFjLFlBQ2hDLE1BQVowN0QsR0FBZ0MsSUFBWkEsSUFDcEJ3RixFQUFlZ0QsR0FBZU4sK0JBQStCbEksSUFFekMsSUFBcEJ1RixJQUEwQkEsRUFBbUIsTUFDakRkLFFBQTBCK0QsR0FBZWxELDhCQUE4QnhuRixZQUFheW5GLEVBQWtCQyxFQUNuRyxDQUNBRyxFQUFRMW1GLFlBQWMybUYsRUFBWTBVLEdBR3JDdEksRUFBZ0IveUYsTUFEYSxHQUF0QnE3RixFQUNpQkosRUFFQTFSLEdBQWUzQyxtQkFBbUJGLEVBQVExbUYsTUFBT3NtRixFQUFrQkMsR0FFeEY0VSxFQUFjbjdGLE9BQVEsUUFDaEJzN0YsRUFBcUI5VixHQUFtQixHQUFNLEVBQ3hELENBaENJNWtELFNBQ01yYyxRQUFRcWUsSUFBSSxDQUNyQjVlLFlBQVlNLFNBQVM2MUUsSUFDaEIsSUFnQ043aEYsZUFBZXF1RSxFQUFZMFUsRUFBb0JFLEdBQzNDLElBQUtBLEdBRnFCLE1BRXVCRixFQUFzQixPQUFPM1UsRUFBUTFtRixNQUV0RixJQUFJMG1GLFFBQWdCNkMsR0FBZTVDLFlBQVk5bkYsYUFPL0MsR0FOSXc4RixHQUNQM1UsRUFBUXpoRixLQUFLZzJGLElBRWEsTUFBbkJPLEdBQTJCRCxLQUNsQ0MsUUFZRGxqRixpQkFDSSxJQUFLdTVCLEVBQU00cEQsaUJBQW9CLE9BQy9CLElBQUlwK0YsRUFBTyxHQUFFd0IsOERBQThEcThGLElBRXZFcmIsUUFBc0JuN0QsRUFBZXlDLGFBQWE5cEIsR0FFbERxK0YsRUFEWWgzRSxFQUFlTyxnQkFBZ0I0NkQsR0FDYnBnRixLQUFLcUUsSUFDbkMsSUFDT0EsRUFDSDYzRixhQUFhLEVBQ2IxckYsTUFBUSxHQUFFbk0sRUFBRWdELE9BQ25CdXdFLE1BQU8sZ0JBR1IsT0FBT3FrQixDQUNYLENBM0J5QkUsSUFFbEIvcEQsRUFBTTRwRCxpQkFBa0IsQ0FDTkQsRUFDTmh3RixTQUFTcXdGLEdBQU9uVixFQUFRemhGLEtBQUs0MkYsSUFDNUMsQ0FJQSxPQUZBblYsRUFBUTMzRCxLQUFLM3dCLEVBQVVrcUYsb0JBRWhCNUIsQ0FDWCxDQXdCQXB1RSxlQUFld2pGLEVBQWtDaFcsR0FDN0MsSUFBSWp5RSxFQUFjMDFFLEdBQWUvQywrQkFDN0IvRSxRQUFxQjhILEdBQWU5Qyx5QkFBeUI1bkYsWUFBYWdWLEdBRzlFLE1BRHdCLENBRFQwMUUsR0FBZXBELGFBQWF0eUUsRUFBYTR0RSxFQUFjcUUsR0FHMUUsQ0FFQSxNQUFNM0QsRUFBc0M3cEUsTUFBTzB1RSxFQUFnQmdCLEVBQW1CZ0IsS0FDbEYsSUFBSW4xRSxFQUFjMDFFLEdBQWVuQyx3QkFBd0JKLEdBQ3JEdkYsUUFBcUI4SCxHQUFleEIsaUNBQWlDbHBGLFlBQWFnVixFQUFhbTBFLEdBQy9GbEMsUUFBZXlELEdBQWVqQyx1QkFBdUJ6b0YsWUFBYWdWLEVBQWE0dEUsRUFBY3VILEdBRWpHMkwsRUFEZXBMLEdBQWVwRCxhQUFhdHlFLEVBQWE0dEUsRUFBY3FFLEdBQ2hELEVBR3BCaEYsRUFBZ0N4b0UsTUFBTzB3RSxFQUFlekMsS0FDeEQsSUFBSVQsRUFBU1ksRUFBUTFtRixNQUFNeUQsTUFBTW1qQixHQUFNQSxFQUFFZzZELFFBQVVvSSxHQUFpQnBpRSxFQUFFaGYsT0FBUzIrRSxJQUNqRSxNQUFWVCxFQU9KNk8sU0FIOEJtSCxFQUFrQ2hXLElBR2pDLElBTmxDOW1GLFFBQVFDLE1BQU8sWUFBVytwRixjQUEwQnpDLGVBTWYsRUFHdEMsU0FBU29PLEVBQWFwUixHQUNsQmdYLEVBQWlCdjZGLE1BQU0rMEYsc0JBQXNCaUcsR0FDN0NULEVBQWlCdjZGLE1BQU0yMEYsYUFBYXBSLEdBQVUsRUFDbEQsQ0FFQWpyRSxlQUFleWpGLEVBQWNqVyxHQUN6QixHQUEwQixHQUF0QkEsRUFBTzZWLFlBQXFCLENBQ25DLElBQUlLLEVBQWlCbFcsRUFBTy82RCxRQUN4Qmt4RSxFQUF3QjcyRSxFQUFtQkMsY0FBYyxvQkFBcUIyMkUsR0FDOUV4VyxRQUEwQitELEdBQWVDLCtCQUErQjNxRixZQUFhbzlGLEdBQ3pGcEIsRUFBNEI3NkYsTUFBUXF4RixHQUFnQjFHLG1CQUFtQnZsRSxFQUFtQkMsY0FBYyx5QkFBMEIyMkUsVUFDNUhWLEVBQXFCOVYsR0FBbUIsR0FBTSxFQUNqRCxZQU1KbHRFLGlCQUNJLElBQUlrdEUsUUFwRFJsdEUsaUJBRUksT0FBT3dqRixFQURNL0ksRUFBZ0IveUYsTUFFakMsQ0FpRGtDazhGLFNBQ3hCWixFQUFxQjlWLEdBQW1CLEdBQU0sRUFDeEQsQ0FSTzJXLEdBQ05DLEdBQWdCLEVBRWpCLENBT0EsU0FBU0MsRUFBYUMsR0FDbEIsSUFBSWpCLEVBQXFCdEksRUFBZ0IveUYsTUFBTWlRLE9BQVNnckYsRUFBY2hyRixNQUN0RXFyRixFQUFxQk4sR0FBK0IsR0FBTSxFQUFPc0IsRUFBVWhoQixjQXNKL0VoakUsaUJBQ0ksSUFBS3U1QixFQUFNMHFELFlBQWUsT0FDMUIsSUFBSWxELEVBQWVtRCxFQUFtQng4RixPQUFPeThGLGlCQUM3QyxHQUFvQixNQUFoQnBELEVBQXdCLE9BRTVCLElBQUlYLEVBQVdnRSxFQUFrQnJELEVBQWE5VixTQUFVOFYsRUFBYXNELFVBQVV0YyxZQUFhZ1osRUFBYXNELFVBQVVyYyxLQUFNK1ksRUFBYWxXLDZCQUN0SW1YLEVBQWN0NkYsTUFBTWdzQixXQUFXMHNFLEdBQy9CNEIsRUFBY3Q2RixNQUFNb3BCLFFBR3hCLENBL0pJd3pFLEdBQ0FSLEVBQWdCZixHQUFvQixFQUN4QyxDQUVBLFNBQVN3QixFQUFlNW5CLEdBQ3hCLENBRUEsU0FBUzZuQixJQUNMdEMsRUFBZXg2RixNQUFNK0ksTUFDekIsQ0FFQSxTQUFTZzBGLElBQ2dDLE1BQWpDL0IsR0FDSlQsRUFBaUJ2NkYsTUFBTStJLEtBQUtpeUYsRUFDaEMsQ0FLQSxTQUFTZ0MsRUFBK0JDLEdBQ3BDLE9BQU8za0YsU0FDSHFpRixFQUFxQjM2RixNQUFNaTlGLEdBQWFob0IsYUFFaEQsQ0FFQSxJQXNCSWlvQixFQXRCQTFCLEVBQWtCLEtBQ3RCLFNBQVMyQixJQUVMZixFQUR5QnJKLEVBQWdCL3lGLE1BQU1pUSxPQUFTZ3JGLEVBQWNockYsT0FDbEMsRUFDeEMsQ0FFQXFJLGVBQWU4akYsRUFBZ0JmLEVBQW9CRSxHQUMvQzdVLEVBQVExbUYsWUFBYzJtRixFQUFZMFUsRUFBb0JFLEdBQ2xERixJQUNQdEksRUFBZ0IveUYsTUFBUWk3RixFQUV6QixDQUVBM2lGLGVBQWU4a0YsRUFBdUI1WCxHQUNsQzRXLEdBQWdCLFNBQ1ZkLEVBQXFCOVYsR0FBbUIsR0FBTSxFQUN4RCxDQUVBLFNBQVM2WCxJQUNML0IsRUFBcUJOLEdBQStCLEdBQU8sRUFDL0QsQ0FHQTFpRixlQUFlZ2pGLEVBQXFCOVYsRUFBbUI4WCxFQUFvQkMsRUFBMEJDLEdBQ2pHLElBQUlyekYsRUFBU29jLEVBQXNCQyxhQUMvQnFxRSxFQXlEUixTQUF3QjFtRixHQUVwQixJQUFJNmlCLEVBQUl6SCxPQUFPaGxCLFVBQVU0SixFQUFPdWMsVUFBWXZjLEVBQU9zYyxhQUFlLElBQ2xFLE9BQUl1RyxHQUFLLEVBQ0wsS0FDT0EsR0FBSyxHQUNaLE1BQ09BLEdBQUssR0FDWixLQUNPQSxHQUFLLEtBQ1osS0FDT0EsR0FBSyxNQUNaLEtBQ09BLEdBQUssTUFDWixLQUVBLElBRVIsQ0EzRXFCeXdFLENBQWV0ekYsR0FDNUJtekYsSUFDUEosUUFBMEI3TCxHQUFnQmpCLG1CQUFtQnZ4RixZQUFhc0wsRUFBUTBtRixFQUFZckwsRUFBbUIzekMsRUFBTTBxRCxjQXNCeEgsU0FBNEMvVyxFQUFtQjBYLEdBQzNEMVgsRUFBa0JoNkUsU0FBUSxDQUFDKzNFLEVBQVV2aUYsS0FDeEMsSUFDSWlQLEVBRGFpdEYsRUFBa0JsOEYsSUFDWDRHLE9BQU9xSSxNQUMvQixHQUFhLE1BQVRBLEVBQWUsQ0FDZixJQUFJcTZFLEVBQWUrRyxHQUFnQjlHLHNCQUFzQmhILEdBQzVDQSxFQUFTOUIsYUFBYTZJLEdBQzVCcjZFLE1BQVFBLENBQ25CLElBRUQsQ0E1Qkl5dEYsQ0FBbUNsWSxFQUFtQjBYLEdBRXRELElBQUlTLEVBQWlCdE0sR0FBZ0J4RywwQkFBMEJxUyxFQUFtQjFYLEVBQW1CcVYsRUFBNEI3NkYsTUFBTzZ3RixHQUNwSTJNLEVBZ0NSLFNBQXVCRyxHQUNuQkEsRUFBZW55RixTQUFRLENBQUNRLEVBQVNoTCxLQUNwQ281RixFQUFPcDZGLE1BQU1nQixHQUFHazFFLHFCQUFxQixDQUFFM2tFLE1BQU92RixFQUFRdUYsUUFDdEQ2b0YsRUFBT3A2RixNQUFNZ0IsR0FBR20xRSxvQkFBb0JucUUsR0FBU2dGLE9BQU8sR0FFckQsQ0FwQ0M0c0YsQ0FBY0QsR0FzQ2YsU0FBa0NBLEdBQzlCaEQsRUFBcUIzNkYsTUFBUTI5RixFQUFlbCtGLEtBQUksQ0FBQ3VNLEVBQVNoTCxLQUN0RCxDQUNIcU4sSUFBS3FXLEVBQWUrQyxvQkFDcEJ3dEQsY0FBZWpwRSxLQUdwQixDQTNDQzZ4RixDQUF5QkYsR0FrTjFCLFNBQXdCVCxFQUFtQjFYLEVBQW1CcjdFLEdBQzFELElBQUkyekYsR0FBb0IsRUFFeEIsR0FEQXBELEVBQW1CMTZGLE1BQVF3bEYsRUFBa0IvbEYsS0FBSzhqRixJQUFjQSxFQUFTMXZFLFlBQVlrcUYsZ0JBQWV6M0QsUUFBTyxDQUFDOWtDLEVBQUt5TixJQUFPek4sRUFBTXlOLElBQUksSUFDN0h5ckYsRUFBbUIxNkYsTUFBUyxPQUNqQyxNQUFNZytGLEVBQThCdjlGLEdBQzNCLE9BQVJBLEVBQ08sUUFHSkEsRUFFSnc5RixFQUFXaitGLE1BQVEsR0FDbkJrOUYsRUFBa0IxeEYsU0FBUSxDQUFDUSxFQUFTaEwsS0FDdkMsSUFBSXVpRixFQUFXaUMsRUFBa0J4a0YsR0FDUyxHQUF0Q3VpRixFQUFTMXZFLFlBQVlrcUYsZUFDekIveEYsRUFBUWdGLE9BQU94RixTQUFRLENBQUMxSCxFQUFHbWpDLEtBQ3ZCLElBR0lpM0QsRUFIQTdKLEVBQVFoRCxHQUFnQnRILFdBQVdqbUYsR0FDbkNxNkYsRUFBYTVhLEVBQVN1QyxPQUFPL0YsV0FBV3NVLEdBQ3hDci9ELEVBQVloWSxFQUFlSixhQUFhMm1FLEVBQVN1QyxPQUFPZ0UsY0FPNUQsR0FMNEIsT0FBeEJ2RyxFQUFTdUMsT0FBT3JsRixLQUN2Qnk5RixFQUFXbHlGLEVBQVF1aEYsV0FDTHZoRixHQUFTdWhGLFlBQVlDLFVBQVV4eEYsT0FBU2lyQyxJQUN0RGkzRCxFQUFXbHlGLEVBQVF1aEYsV0FBV0MsU0FBU3ZtRCxJQUVwQixNQUFaaTNELEdBQTZDLE9BQXhCM2EsRUFBU3VDLE9BQU9ybEYsTUFBaUJ3bUMsRUFBSSxFQUNqRSxPQUVHLElBQUluZ0MsRUFBT3VxRixHQUFnQm5ILGFBQWFpVSxFQUFXbHVGLE1BQU9va0YsRUFBTzlRLEVBQVV1YSxHQUV2RU0sRUFBdUJKLEVBQTJCemEsRUFBU3VDLE9BQU9nRSxjQUNsRXVVLEVBQWtCcmhGLEVBQWVKLGFBQWF3aEYsR0FDbEQsR0FBc0IsTUFBbEJGLEVBQVNJLE1BQWUsQ0FDaEJuMEYsRUFBT3VjLFVBQVl2YyxFQUFPc2MsWUFDdEJ5M0UsRUFBU3pRLE9BQ3pCLENBRUEsSUFBSTN2RSxFQUFNLENBQ2Jnb0UsT0FBUWgvRSxFQUVSdzNGLE1BQU9ELEVBQWdCSCxFQUFTSSxPQUNoQzFZLFFBQVM1d0QsRUFBVWtwRSxFQUFTLG9CQUM1QnZZLElBQUszd0QsRUFBVWtwRSxFQUFTelEsU0FDeEJqeEUsSUFBS3dZLEVBQVVrcEUsRUFBU0ssU0FDeEJ0ekMsSUFBS2oyQixFQUFVa3BFLEVBQVNNLFVBRXJCUCxFQUFXaitGLE1BQU1pRixLQUFLNlksRUFBSSxHQUM1QixHQUVILENBalFJMmdGLENBQWV2QixFQUFtQjFYLEVBQW1CcjdFLEdBQ2pEb3pGLEdBa0dSLFNBQStCL1gsRUFBbUJyN0UsR0FDOUMsSUFBSzBuQyxFQUFNMHFELFlBQWUsT0FDRCxNQUFyQi9XLElBQ1BBLEVBQW9Cd1YsR0FFSCxNQUFWN3dGLElBQ1BBLEVBQVNvYyxFQUFzQkMsY0FHNUIsSUFBSTI5RCxFQUF1Qm9GLEdBQWVwRixxQkFDdEN1YSxFQUFnQixDQUFBLEVBQ3BCbFosRUFBa0JoNkUsU0FBUyszRSxJQUNaQSxFQUFTMXZFLFlBSTNCLElBQUl2TixFQUFLaWpGLEdBQWVuRCxnQkFBZ0I3QyxFQUFTMXZFLFlBQWEwdkUsRUFBUzlCLGNBQ3ZFaWQsRUFBY3A0RixHQUFNaTlFLENBQVEsSUFFekIsSUFBSW9iLEVBQW9CLENBQUEsRUFDeEJDLEVBQWtCNStGLE1BQVEsR0FFMUIsSUFBSyxJQUFJc0csS0FBTW80RixFQUFlLENBQ2pDLElBQUluYixFQUFXbWIsRUFBY3A0RixHQUN6QjBxRixFQUFvQkssR0FBZ0I5RyxzQkFBc0JoSCxHQUMxRHNiLEVBQWN0YixFQUFTOUIsYUFBYXVQLEdBQ3BDbjlFLEVBQWMwdkUsRUFBUzF2RSxZQUN2QmlyRixFQUFxQjNhLEVBQXFCdHdFLEVBQVl2TixJQUNoQyxNQUF0Qnc0RixHQUVKQSxFQUFtQnR6RixTQUFTbXhGLElBQ3hCLElBQUlvQyxFQUFzQmx0RCxFQUFNbXRELDBCQUEwQnJDLEVBQVV0YyxhQUNwRSxHQUEyQixNQUF2QjBlLEVBQStCLE9BRW5DLElBRHVCQSxFQUFvQnBDLEVBQVVyYyxNQUM1QixPQUN6QixJQUFJNkMsRUFBOEJ3WixFQUFVeFosNEJBRXhDdVYsRUFBV2dFLEVBQWtCblosRUFBVW9aLEVBQVV0YyxZQUFhc2MsRUFBVXJjLEtBQU02QyxFQUE2Qmg1RSxHQUMzRzh0RixFQUFXMU8sR0FBZW5ELGdCQUFnQjdDLEVBQVMxdkUsWUFBYTB2RSxFQUFTOUIsYUFBYyxLQUFNMEIsR0FBNkIsR0FFOUgsR0FEQThVLEVBQVksR0FBRUEsS0FBWTBFLEVBQVVyYyxPQUNELE1BQS9CcWUsRUFBa0IxRyxHQUFxQixPQUMzQzBHLEVBQWtCMUcsSUFBWSxFQUU5QixJQUNJaG9GLEVBREFqUSxFQUFTLEdBQUUyOEYsRUFBVXRjLGVBQWVzYyxFQUFVcmMsUUFBUTJYLElBRzdEaG9GLEVBRGdDLE1BQXpCMHNGLEVBQVVyWixZQUNSLEdBQUVxWixFQUFVN3hGLFdBQVcrSSxFQUFZNUQsU0FBUzR1RixFQUFZNXVGLFFBRXpEMHNGLEVBQVVyWixZQUFZQyxHQUUzQixNQUFNa1osRUFBbUIsQ0FDNUJsWixXQUNBb1osWUFJQXBELGNBQWUsR0FDZmIsV0FDQUosZUFBZSxFQUNmZSxhQUFjLENBQ1ZsQixZQUFZLEVBQ1pJLE1BQU8sQ0FBQyxDQUFFb0UsRUFBVXBjLHdCQUF5QixTQUM3Q0MsV0FBWW1jLEVBQVVuYyxZQUFjLEtBSXJDaWMsRUFBaUJqRSxlQUFpQm1FLEVBQVV4cUYsUUFBUTFTLEtBQUt1OEIsSUFDNUQsSUFBSWlqRSxFQUFvQixDQUNwQjVkLG1CQUFvQnh2QyxFQUFNd3ZDLG9CQUUxQng3QyxFQUFJLENBQ0o5eUIsU0FBVWlwQixFQUFPb2xELFdBQWFwbEQsRUFBT29sRCxVQUFVNmQsTUFDNUNqakUsR0FVUCxPQVJtQixNQUFmNkosRUFBRXRNLFlBQXFCc00sRUFBRXRNLFVBQVksZUFDYixNQUF4QnNNLEVBQUVzN0MscUJBQThCdDdDLEVBQUVzN0MsbUJBQXFCLEdBQzNEdDdDLEVBQUV4TyxPQUFTMkUsRUFBTzNFLE9BQU9uWSxLQUFLLENBQzFCNGhFLGdDQUNBcUIsc0NBQ0FFLHNCQUF1Qnh3QyxFQUFNd3dDLHNCQUM3Qmw0RSxTQUFRMEosY0FBYzR0RSxhQUFjOEIsRUFBUzlCLGVBRTFDNTdDLENBQUMsSUFFTCxJQUFJc3hDLEVBQVMsQ0FBRW4zRSxRQUFPaVEsUUFBT3dzRixvQkFDN0JtQyxFQUFrQjUrRixNQUFNaUYsS0FBS2t5RSxFQUFPLEdBRXJDLENBQ0EsR0FBZ0MsTUFBNUJxbEIsRUFBbUJ4OEYsT0FBaUI0K0YsRUFBa0I1K0YsTUFBTXlELE1BQU0wekUsR0FBV0EsRUFBT24zRSxPQUFTdzhGLEVBQW1CeDhGLE1BQU1BLFFBQzdILE9BR0d3OEYsRUFBbUJ4OEYsTUFBUTQrRixFQUFrQjUrRixNQUFNeUQsTUFBTTB6RSxHQUE4QyxHQUFuQ0EsRUFBT3NsQixpQkFBaUJ4a0QsVUFDNUQsTUFBNUJ1a0QsRUFBbUJ4OEYsUUFDMUJ3OEYsRUFBbUJ4OEYsTUFBUTQrRixFQUFrQjUrRixNQUFNLEdBRXBELENBak1Day9GLENBQXNCMVosRUFBbUJyN0UsR0FHdEM2d0YsRUFBZ0N4VixFQWtCaENwZ0UsRUFBbUJNLGVBQWUseUJBQTBCbTFFLEVBQTRCNzZGLE1BQU1BLE9BQzlGdXBGLEdBQWVoRSw2QkFBNkJ5VixFQWhCaEQsQ0F1REEsU0FBUzBCLEVBQWtCblosRUFBVWxELEVBQWE4ZSxFQUFZaGMsRUFBNkJoNUUsR0FDekUsTUFBVkEsSUFDUEEsRUFBU29jLEVBQXNCQyxjQUU1QixJQUFJdTZELEVBQVdzUSxHQUFnQnBCLFdBQVcxTSxHQUFVLEVBQU1KLEdBRXREdVYsRUFBWSxHQUFFNzVGLG1DQURWd2hGLHFCQUdKK2UsRUFBUSxDQUNmbnJFLEtBQU0sS0FDTjhzRCxXQUVBdDZELFlBQWMsR0FBRXRjLEVBQU9zYyxjQUN2QkMsVUFBWSxHQUFFdmMsRUFBT3VjLFlBQ3JCMjRFLFlBQWMsR0FBRUYsSUFDaEJHLFdBQWEsUUFJVixNQUFRLEdBQUU1RyxLQURXdHpFLEVBQW1CaUYsZUFBZSswRSxFQUFPLEtBRWxFLENBY0EsTUFBTVIsRUFBb0IzZ0QsR0FBSSxJQUN4QnUrQyxFQUFxQnYrQyxHQUFJLENBQUEsR0FtRy9CLElBQUlzaEQsRUFBZ0IsQ0FDaEIsQ0FBRWo1RixHQUFJLFNBQVUySixNQUFPd3ZFLEVBQU0sc0JBQzdCLENBQUVuNUUsR0FBSSxNQUFPMkosTUFBT3d2RSxFQUFNLHVCQUMxQixDQUFFbjVFLEdBQUksVUFBVzJKLE1BQU93dkUsRUFBTSx1QkFDOUIsQ0FBRW41RSxHQUFJLE1BQU8ySixNQUFPd3ZFLEVBQU0sbUJBQzFCLENBQUVuNUUsR0FBSSxNQUFPMkosTUFBT3d2RSxFQUFNLG1CQUMxQixDQUFFbjVFLEdBQUksUUFBUzJKLE1BQU93dkUsRUFBTSxzQkFHaEMsTUFBTXdlLEVBQWFoZ0QsR0FBSSxJQThEdkIsU0FBU3VoRCxJQUNMLElBQUlyMUYsRUFBU29jLEVBQXNCQyxhQUMvQjVnQixFQUFTLENBQUU2Z0IsWUFBYXRjLEVBQU9zYyxZQUFhQyxVQUFXdmMsRUFBT3VjLFdBQzlEOEMsRUFBYXBFLEVBQW1CMEUsa0JBQWtCbGtCLEdBQ3RELE1BQU02NUYsRUFBa0IsR0FBRTVnRyxxQ0FBcUMycUIsSUFDL0RwRSxFQUFtQmlFLFVBQVVvMkUsRUFDakMsQ0FFQSxNQUFNQyxFQUEyQnpoRCxHQUFJLE1BQ3JDLFNBQVMwaEQsSUFDTEQsRUFBeUIxL0YsTUFBTStJLE1BQ25DLENBRUEsU0FBUzYyRixJQUNMLElBQUsxQyxHQUFtQmxoRyxPQUFVLE9BQ2xDLElBQUl1bkYsRUFBV3lYLEVBQThCLEdBQ3pDcHZCLEVBQVd5bEIsR0FBZ0JuSCxhQUFhLEtBQU0sS0FBTTNHLEdBQ3hEa1gsRUFBb0J6NkYsTUFBTStJLEtBQUs2aUUsRUFDbkMsQ0FFQXR6RCxlQUFlazlELEVBQW1CNUosR0FDOUIsSUFBSWkwQixFQUE0QnpGLEVBQU9wNkYsTUFBTVAsS0FBSTZZLFVBQ2hELElBQUlvOUQsUUFBaUI5aEQsRUFBTTJoRCxlQUMzQixPQUFPLElBQUloeEQsU0FBUSxDQUFDRixFQUFTeTdFLEtBQ3pCLElBQUlDLEVBQVEsSUFBSUMsTUFDaEJELEVBQU1FLElBQU12cUIsRUFDWnFxQixFQUFNcjJGLE9BQVMsV0FDbEIyYSxFQUFRMDdFLEdBQ0osR0FDSCxJQUVDM3hGLEVBQVMsRUFDVDh4RixRQUEwQjM3RSxRQUFRcWUsSUFBSWk5RCxHQUMxQ0ssRUFBa0IxMEYsU0FBU3UwRixJQUMxQjN4RixHQUFVMnhGLEVBQU0zeEYsTUFBTSxJQUV2QixJQUFJK3hGLEVBQVNqeEYsU0FBU0MsY0FBYyxVQUNoQ2l4RixFQUFpQkQsRUFBT0UsV0FBVyxNQUN2Q0YsRUFBT2h5RixNQUFRK3hGLEVBQWtCLEdBQUcveEYsTUFDcENneUYsRUFBTy94RixPQUFTQSxFQUNoQkEsRUFBUyxFQUNUOHhGLEVBQWtCMTBGLFNBQVN1MEYsSUFDMUJLLEVBQWVFLFVBQVVQLEVBQU8sRUFBRzN4RixFQUFRMnhGLEVBQU01eEYsTUFBTzR4RixFQUFNM3hGLFFBQzlEQSxHQUFVMnhGLEVBQU0zeEYsTUFBTSxJQUV2QnNXLEVBQWU2QyxhQUFhNDRFLEVBQU9JLFlBQWEzMEIsRUFDcEQsMjlDQTFqQmUsd1ZBbWdCZixTQUE0QnR3QyxHQUN4QixPQUFPQSxFQUFJcnJCLEtBQ2YsMkJBRUEsU0FBeUJxckIsRUFBS3hkLEdBRTFCLE9BRFlBLEVBQUl3ZCxFQUFJaDFCLEdBRXhCLGtrRENqb0JBLElBQUFrNkYsR0FBZWxqQyxHQUFnQixDQUM3QnpZLFdBQVksQ0FDWCxFQUNEaFQsTUFBTyxDQUNMdnJDLEdBQUl2SixPQUNKMGpHLFNBQVU1N0UsT0FFWnV2QixNQUFPLENBQUMsY0FFUjhQLFVBQ0MsRUFDRDdrRCxLQUFJLEtBQ0ssQ0FDTHFoRyxRQUFTLE9BSWJuZ0QsVUFDRSxJQUFJb2dELEVBQ0o1bEcsS0FBSzBsRyxTQUFTajFGLFNBQVEsU0FBUzNFLEdBQzFCQSxFQUFJdWhDLFNBQ0x1NEQsRUFBTTk1RixFQUVWLElBRVV6RSxNQUFQdStGLElBQ0RBLEVBQU01bEcsS0FBSzBsRyxTQUFTLElBRXRCMWxHLEtBQUsybEcsUUFBVUMsRUFBSXI2RixJQUFNcTZGLEVBQUk3NUYsS0FDN0JrZCxZQUFZRyxNQUFNcHBCLEtBQUtvbkQsT0FBVyxHQUNuQyxFQUNENEIsUUFBUyxDQUNQNjhDLFdBQVksU0FBUy81RixHQUNkQSxFQUFJUCxJQUFNdkwsS0FBSzJsRyxTQUFXNzVGLEVBQUlQLElBQzlCTyxFQUFJQyxNQUFRL0wsS0FBSzJsRyxTQUFXNzVGLEVBQUlDLE9BQ25DL0wsS0FBSzJsRyxRQUFVNzVGLEVBQUlQLElBQU1PLEVBQUlDLEtBQzdCL0wsS0FBSzRuRCxNQUFNLGFBQWM5N0MsR0FFN0IscUJDdERTLDhCQUNDLGdDQUFBZzNCLEtBQUEsb0lBQ0dtb0IsRUFBQXk2QyxVQUFBNTVGLHFCQUNNQSxFQUFBdWhDLGFBQ2QyMUMsR0FFRyxLQUFBLE9BRkUzbEQsUUFBS2lsRCxHQUFFcjNCLEVBQVU0NkMsV0FBQy81RixHQUFPK3lCLE1BQW1CazlELEVBQUEsQ0FBQSxDQUFBMXVELE9BQUF2aEMsRUFBSXVoQyxRQUFTLHVCQUN4RDh1RCxHQUFBcndGLEVBQUlpRSxPQUFLLEdBQUF5eEUsV0FJaEJ3QixjQUFBM2xELFFBQUFpbEQsR0FBQXIzQixFQUFBNDZDLFdBQUEvNUYsR0FBQStHLEtBQUEsSUFBQWdzQixNQUFBLHFCQUNEczlELEdBQUFyd0YsRUFBQWlFLE9BQUEsRUFBQTB4RSxpTENKUCxNQUFNMEIsRUFBV2pnQyxHQUFJLE1BY2Y0aUQsRUFBVSxLQUNacjFFLEVBQUssVUFDTHN5RCxHQUFPLEVBR0xBLEVBQVEsS0FDVkksRUFBU2wrRSxNQUFNODlFLE9BQU8sRUFJMUJyd0IsRUFBYSxDQUFFMWtELEtBZEYsS0FDVG0xRSxFQUFTbCtFLE1BQU0rSSxNQUFNLEVBYUorMEUsVUFFckJwaEIsSUFBVSxTQUdWLE1BQU0raUIsRUFBUzV2RSxHQUFNaXBCLEtBQUtqcEIseVRDbUIxQixNQUFNaXhGLEdBQStCLCtCQUV0QixJQUFBQyxHQUFBLENBQ2JsOEMsV0FBWSxDQUNWbThDLFVBQWFDLEdBQ2IsdUJBQXdCQyxHQUN4QixXQUFZQyxJQUVkdHZELE1BQU8sQ0FDTHV2RCxVQUFXcmtHLE9BQ1h5c0IsV0FBWWpjLE9BQ1oreUUsS0FBTXZqRixPQUNOc2tHLGNBQWV4OEUsT0FLakJxL0IsVUFDRTkrQixFQUFtQk0sZUFBZSxlQUFnQjNxQixLQUFLb25ELE9BQU8zNEIsV0FBVzgzRSxjQWlHN0UsU0FBeUJDLEdBQ3ZCLE1BQU1DLEVBQWtCLEdBQ3hCLElBQUlydkYsRUFBVSxHQUVkb3ZGLEVBQWFFLFFBQVVyakcsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDMnFCLFlBRzNGZzRFLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0FDN0JvMUYsRUFBYUcsY0FDZixJQUdGLElBQUlDLEVBQWFuNEUsV0FDakJtNEUsRUFBaUIsS0FBSSxXQUVyQixJQUFJQyxFQUF5QixDQUMzQnJJLGNBQWVpSSxFQUNmaEosZUFBZ0IsR0FDaEJFLFNBQVV0NkYsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDOGlHLEdBQzlFckosZUFBZSxHQUdiK0ksRUFBZ0IsR0FDcEIsSUFBSyxJQUFJanZGLEtBQVdtdkYsRUFBYXAvQyxPQUFPay9DLGVBQWlCLEdBQ3ZEanZGLEVBQU9tdUIsaUJBQW1CLENBQUN0dUIsRUFBT2pTLEtBQ2hDMmhHLEVBQWlCLEtBQUlKLEVBQWFNLGdCQUNsQ0YsRUFBV3Z2RixFQUFPOHRCLGVBQWlCbGdDLEVBQU1zRyxHQUN6QzhlLEVBQW1CTSxlQUFldFQsRUFBTzh0QixjQUFlbGdDLEVBQU1zRyxJQUM5RDJMLEVBQU00SSxLQUFLeGQsSUFBSWUsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDOGlHLElBQ25GdmpHLFVBQVU4NkYsZUFDVmpuRixFQUFNNEksS0FBS3VPLFNBQ1hockIsVUFBVWc3RixjQUFjLEVBRTFCaUksRUFBY3A4RixLQUFLbU4sR0FLckJELEVBQVUsQ0FDUixDQUFFdXVFLFdBQVk1bkQsS0FBSyxtQkFBb0JoeUIsS0FBTSxTQUFVekgsS0FBTSxTQUFVazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDckgsQ0FBRVQsV0FBWTVuRCxLQUFLLG1CQUFvQmh5QixLQUFNLFNBQVV6SCxLQUFNLFNBQVVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUNySCxDQUFFVCxXQUFZNW5ELEtBQUsseUJBQTBCaHlCLEtBQU0sU0FBVXpILEtBQU0sU0FBVWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQzNILENBQUVULFdBQVk1bkQsS0FBSyxzQkFBdUJoeUIsS0FBTSxZQUFhekgsS0FBTSxZQUFjazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsSUFHakksSUFBSTJnQixFQUFnQnA5RSxlQUFlTSxNQUFNNDhFLEdBQ3pDRSxFQUFjekksYUFBZSxDQUFFbEIsWUFBWSxFQUFPSSxNQUFPLENBQUMsQ0FBRSxFQUFtQixVQUMvRXVKLEVBQWN0SixlQUFpQnJtRixFQUMvQjJ2RixFQUFjVCxjQUFnQkEsRUFDOUJFLEVBQWFRLHdCQUEwQkQsRUFLdkNILEVBQWlCLEtBQUksYUFDckJDLEVBQXVCbEosU0FBV3Q2RixVQUFVeTdGLFNBQVUsR0FBRWg3Riw2Q0FBOEM4aUcsR0FFdEd4dkYsRUFBVSxDQUNSLENBQUV1dUUsV0FBWTVuRCxLQUFLLGlCQUFrQmh5QixLQUFNLE9BQVF6SCxLQUFNLE9BQVFrNkIsVUFBVyxjQUFlbEMsT0FBUSxDQUFDaDRCLEVBQU1vQixJQUFrQnBCLEVBQUs0USxNQUFTa3hFLG1CQUFvQixHQUM5SixDQUFFVCxXQUFZNW5ELEtBQUssOEJBQStCaHlCLEtBQU0sY0FBZXpILEtBQU0sY0FBZWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQzFJLENBQUVULFdBQVk1bkQsS0FBSywyQkFBNEJoeUIsS0FBTSxXQUFZekgsS0FBTSxXQUFZazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDakksQ0FBRVQsV0FBWTVuRCxLQUFLLDRCQUE2Qmh5QixLQUFNLFlBQWF6SCxLQUFNLFlBQWNrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixJQUd2SSxJQUFJNmdCLEVBQTBCdDlFLGVBQWVNLE1BQU00OEUsR0FDbkRJLEVBQXdCM0ksYUFBZSxDQUFFbEIsWUFBWSxFQUFPSSxNQUFPLENBQUMsQ0FBRSxFQUFxQixVQUMzRnlKLEVBQXdCeEosZUFBaUJybUYsRUFDekM2dkYsRUFBd0JYLGNBQWdCQSxFQUV4Q3JpRyxRQUFRK0IsSUFBSStnRyxHQUNaOWlHLFFBQVErQixJQUFJaWhHLEdBRVpULEVBQWFVLDBCQUE0QkQsQ0FDM0MsQ0E1S0lFLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFDRXhsRCxLQUFLOG1HLGdCQUFrQno4RSxFQUFtQkMsY0FBYyxTQUFXLFdBQ25FdHFCLEtBQUswbEcsU0FBU2oxRixTQUFTeEssSUFDckJqRyxLQUFLOG1HLGlCQUFtQjdnRyxFQUFFc0YsR0FBS3RGLEVBQUVvbkMsUUFBUyxFQUFPcG5DLEVBQUVvbkMsUUFBUyxDQUFJLElBRWxFamQsRUFBc0JTLGdCQUFnQixtQkFBb0I0RCxxQkFBcUJNLGtCQUFrQixLQUM1RjFLLEVBQW1CQyxjQUFjLFNBQ2xDdHFCLEtBQUtvbkcsZ0JBQWdCLElBRXpCaDNFLEVBQXNCUyxnQkFBZ0IseUJBQTBCazFFLElBQStCajZGLElBQzlGLElBQUlvTCxFQUFRbFgsS0FBS3FuRyxtQkFDaEJoOUUsRUFBbUJNLGVBQWUsT0FBUTdlLEdBQzFDb0wsRUFBTWlvRixnQkFDTm4vRixLQUFLOG1HLGdCQUFrQmg3RixDQUFHLElBRzVCckssRUFBRSxtQkFBbUIwSixPQUFNLElBQU1uTCxLQUFLc25HLDBCQUN2QyxFQUNEaGpHLEtBQUksS0FDSyxDQUNMeTVCLEtBQU9qcEIsR0FBTWlwQixLQUFLanBCLEdBQ2xCa3lGLHdCQUF5QixLQUN6QkUsMEJBQTJCLEtBQzNCSyxhQUFjeHBFLEtBQUssMEJBQ25CeXBFLFlBQWF6cEUsS0FBSyxrQ0FDbEIwcEUsZUFBZ0IxcEUsS0FBSyxxQkFDckIycEUsY0FBZTNwRSxLQUFLLDZCQUNwQjJvRSxRQUFTLEtBQ1RJLGdCQUFpQixLQUNqQnBCLFNBQVUsQ0FDUixDQUNFMzFGLE1BQU9ndUIsS0FBSywwQkFDWnNQLE9BQWlCLFlBQVJrNEMsS0FDVGg2RSxHQUFJLFlBRU4sQ0FDRXdFLE1BQU9ndUIsS0FBSyw0QkFDWnNQLE9BQWlCLGNBQVJrNEMsS0FDVGg2RSxHQUFJLGlCQUtaeTlDLFFBQVMsQ0FDUHp4QixRQUFTLFdBQ0t2M0IsS0FBS3FuRyxtQkFDWGxJLGVBQ1AsRUFFRHdJLFdBQVksU0FBUzF6RixHQUNuQmpVLEtBQUswbEcsU0FBU2oxRixTQUFTeEssR0FBTUEsRUFBRW9uQyxRQUFTLElBQ3hDcDVCLEVBQUtvNUIsUUFBUyxFQUNkamQsRUFBc0JRLGtCQUFrQm0xRSxHQUE4Qjl4RixFQUFLMUksR0FDNUUsRUFDRGk1RSxXQUFZam5FLGlCQUNWLElBQUlqYixFQUFPLEdBQUV3QixrREFDVCtHLEVBQVMsQ0FDWCs4RSxLQUFNNW5GLEtBQUt5dUIsV0FBV201RCxLQUN0Qi8xRSxPQUFRLFFBQ1IrQixLQUFNNVQsS0FBS3l1QixXQUFXN2EsS0FDdEI5QixLQUFNOVIsS0FBS29uRCxPQUFPaS9DLFVBQ2xCM2hHLElBQUsxRSxLQUFLeXVCLFdBQVcvcEIsS0FFdkIsSUFDRSxJQUFJeW5CLEVBQVUsQ0FDWixlQUFnQiwwQkFFWnhDLGVBQWV5QyxhQUFhOXBCLEVBQUssQ0FBRXVkLE9BQVEsT0FBUXNNLFVBQVM1YyxLQUFNVixLQUFLNkUsVUFBVTdJLEtBQ3ZGN0ssS0FBSzJtRyxjQUdQLENBRkUsTUFBTTNpRyxHQUNOaEUsS0FBSzJtRyxjQUNQLENBQ0QsRUFDRFMsZUFBZ0IsV0FDZDNsRyxFQUFHLHFCQUFvQmtILFlBQVksWUFDbkNsSCxFQUFHLHFCQUFvQmtILFlBQVksWUFDbkNsSCxFQUFHLHFCQUFvQnFELEtBQUssU0FBVSxVQUN0Q3JELEVBQUcscUJBQW9CcUQsS0FBSyxTQUFVLFNBQ3ZDLEVBQ0Q2aEcsYUFBYyxXQUNaLElBQUl6dkYsRUFBUWxYLEtBQUtxbkcsbUJBQ2pCaGtHLFVBQVU4NkYsZUFDVmpuRixFQUFNbVgsU0FDTmhyQixVQUFVZzdGLGNBQ1gsRUFDRGdKLGlCQUFrQixXQUNoQixPQUFPcm5HLEtBQUt1bkQsTUFBTyxlQUFjdm5ELEtBQUs4bUcsa0JBQ3ZDLEVBQ0RRLHVCQUF3QixXQUN0QnRuRyxLQUFLdW5ELE1BQXdCLGlCQUFFdjVDLE1BQ2pDLElDcEtFLE1BQUFzekUsR0FBQSxDQUFBemlELE1BQUssaUJBQ0UsMENBQ0UsNEJBQTRCdHpCLEdBQUcsb0JBQW9CdTNCLEtBQUcsNEJBRXRELGNBT0gsTUFBQSxDQU5EakUsTUFBRSxtRkFBQSxDQUNMOGlELEdBSU0sTUFBQSxDQUpIOWlELE1BQUEsZUFBQSxDQUNGOGlELEdBRU8sTUFBQSxDQUZEOWlELE1BQU0sbUNBQU9pRSxLQUFBLFdBQ2hCNitDLEdBQWdCLE9BQVYsQ0FBQTlpRCxNQUFNLDZCQUFJLHVCQUloQjJqRCxHQUFBLENBQUEzakQsTUFBSyxhQUNMNGpELEdBQUEsQ0FBQWwzRSxHQUFHLGVBK0JSbzNFLEdBQUEsQ0FBQTlqRCxNQUFBLG1CQUNGbjVCLEtBQUEsU0FBQTZGLEdBQUEsaUJBQUFzekIsTUFBQSwwQkFBQThpRCxHQUFBLElBQUEsQ0FBQTlpRCxNQUFBLGdCQUFBLE1BQUEsb0tBN0NDLE9BQUErb0UsS0FBQTVrQixTQUFBMUIsb0NBWU1LLEdBK0JILE1BL0JHYSxHQStCSCxJQURFLFNBQUEsSUF4QnNCcWxCLEVBQUEsd0JBSHBCOTNGLE1BQU9vM0MsRUFBWW9nRCxhQUNuQmg0RixLQUFNNDNDLEVBQVdxZ0QsWUFDakJNLFNBQVFqZ0QsRUFBVTI4QixtREFPVnVqQixFQUFBLHNCQUhUeDhGLEdBQUcsaUJBQ0ZtNkYsU0FBVXYrQyxFQUFRdStDLFNBQ2xCc0MsYUFBWW5nRCxFQUFVOC9DLGdEQUdPLFlBQWZ4Z0QsRUFBZTIvQyx5QkFPcEJtQixFQUFBLE9BUG9DL2tELElBQUksdUJBQ2pEczdDLGNBQWVyM0MsRUFBdUI2L0Msd0JBQUN4SSxjQUN2Q2YsZUFBUXQyQyxFQUFBNi9DLHdCQUFBdkosZUFDUkUsU0FBVXgyQyxFQUF1QjYvQyx3QkFBQ3JKLFNBQ2xDSixjQUFlcDJDLEVBQXVCNi9DLHdCQUFDekosY0FDdkNvQixlQUFnQngzQyxFQUF1QjYvQyx3QkFBQ1YsNEJBQWUsUUFBQSxvS0FHMUIsY0FBZm4vQyxFQUFlMi9DLHlCQU9wQm1CLEVBQUEsT0FQc0Mva0QsSUFBSSx5QkFDbkRzN0MsY0FBZXIzQyxFQUF5QisvQywwQkFBQzFJLGNBQ3pDZixlQUFRdDJDLEVBQUErL0MsMEJBQUF6SixlQUNSRSxTQUFBeDJDLEVBQUErL0MsMEJBQUF2SixTQUNGSixjQUFBcDJDLEVBQUErL0MsMEJBQUEzSixjQUNFb0IsZUFBZ0J4M0MsRUFBQysvQywwQkFBQVosNEJBQUEsSUFFbkIsSUFGbUIsMEtBS3hCM2tCLFNBQUFnQixJQUNEaEIsR0FBQSxTQUFBaUIsR0FBQSxDQUFBNFksR0FBQVEsR0FBQSxPQUFBNzBDLEVBQUFwcEIsS0FBQSwyQkFBQSxvTUNKVSxJQUFBbXFFLEdBQUEsQ0FDYnArQyxXQUFZLENBQ1ZtOEMsVUFBYUMsR0FDYix1QkFBd0JDLElBRTFCcnZELE1BQU8sQ0FDTHV2RCxVQUFXcmtHLE9BQ1h5c0IsV0FBWWpjLE9BQ1oreUUsS0FBTXZqRixPQUNOc2tHLGNBQWV4OEUsTUFDZnErRSxTQUFVOW5ELFNBS1o4SSxXQXFFRixTQUF5QnE5QyxHQUN2QixNQUFNQyxFQUFrQixHQUN4QixJQUFJcnZGLEVBQVUsR0FDVm91RSxFQUEwQixFQUM5QmdoQixFQUFhRSxRQUFVcmpHLFVBQVV5N0YsU0FBVSxHQUFFaDdGLDZDQUE4QzJxQixZQUczRmc0RSxFQUFnQnY4RixLQUFLLENBQ25CNkQsS0FBTSw4QkFDTnl3QixVQUFXLFdBQ1gzc0IsT0FBUSxTQUFVekcsRUFBR3FaLEVBQUlnYyxFQUFNcnZCLEdBQzdCbzFGLEVBQWFHLGNBQ2YsSUFHRixJQUFJQyxFQUFhajlFLGVBQWVNLE1BQU13RSxZQUN0Q200RSxFQUFpQixLQUFJLEtBQ3JCLElBQUlDLEVBQXlCLENBQzNCckksY0FBZWlJLEVBQ2ZoSixlQUFnQixHQUNoQkUsU0FBVXQ2RixVQUFVeTdGLFNBQVUsR0FBRWg3Riw2Q0FBOEM4aUcsR0FDOUVySixlQUFlLEdBR2IrSSxFQUFnQixHQUNwQixJQUFLLElBQUlqdkYsS0FBV212RixFQUFhcC9DLE9BQU9rL0MsZUFBaUIsR0FDdkRqdkYsRUFBT211QixpQkFBbUIsQ0FBQ3R1QixFQUFPalMsS0FDaEMyaEcsRUFBV3Z2RixFQUFPOHRCLGVBQWlCbGdDLEVBQU1zRyxHQUN6QzhlLEVBQW1CTSxlQUFldFQsRUFBTzh0QixjQUFlbGdDLEVBQU1zRyxJQUM5RDJMLEVBQU00SSxLQUFLeGQsSUFBSWUsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDOGlHLElBQ25GdmpHLFVBQVU4NkYsZUFDVmpuRixFQUFNNEksS0FBS3VPLFNBQ1hockIsVUFBVWc3RixjQUFjLEVBRTFCaUksRUFBY3A4RixLQUFLbU4sR0FLckJELEVBQVUsQ0FDUixDQUFFdXVFLFdBQVk1bkQsS0FBSyxzQkFBdUJoeUIsS0FBTSxZQUFhekgsS0FBTSxZQUFhazZCLFVBQVcsMEJBQTJCbEMsT0FBUSxDQUFDaDRCLEVBQU1vQixJQUFrQnBCLEVBQUtXLE1BQVNtaEYsbUJBQW9CLEdBQ3pMLENBQUVULFdBQVk1bkQsS0FBSyxtQkFBb0JoeUIsS0FBTSxTQUFVekgsS0FBTSxTQUFVazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDckgsQ0FBRVQsV0FBWTVuRCxLQUFLLG1CQUFvQmh5QixLQUFNLFNBQVV6SCxLQUFNLFNBQVVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUNySCxDQUFFVCxXQUFZNW5ELEtBQUssaUJBQWtCaHlCLEtBQU0sT0FBUXpILEtBQU0sT0FBU2s2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQ2hILENBQUVULFdBQVk1bkQsS0FBSyxxQkFBc0JoeUIsS0FBTSxVQUFXekgsS0FBTSxXQUFZazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDMUgsQ0FBRVQsV0FBWTVuRCxLQUFLLHVCQUF3Qmh5QixLQUFNLGFBQWN6SCxLQUFNLGFBQWMwVCxTQUFTLEVBQU9vdUUsbUJBQW9CLEdBQ3ZILENBQUVULFdBQVk1bkQsS0FBSyx5QkFBMEJoeUIsS0FBTSxlQUFnQnpILEtBQU0sZUFBZ0JrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUN2SSxDQUFFVCxXQUFZNW5ELEtBQUssc0JBQXVCaHlCLEtBQU0sWUFBYXpILEtBQU0sWUFBYWs2QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFNRSxtQkFBb0IsRUFBRzlwRCxPQUFRLENBQUVoNEIsRUFBTW9CLEVBQU1xZCxJQUNwSixRQUFScmQsR0FBMEIsUUFBUkEsRUFBa0JwQixFQUFPQSxFQUFPLFNBS2hFa2hGLEVBQTBCLEVBRzFCLElBQUk4WSxFQUFlLENBQ2pCbEIsWUFBWSxFQUNaSSxNQUFPLENBQUMsQ0FBRWhZLEVBQXlCLFVBR2pDdWhCLEVBQWdCcDlFLGVBQWVNLE1BQU00OEUsR0FDekNFLEVBQWN2SSxjQUFnQnFJLEVBQXVCckksY0FDckR1SSxFQUFjcEosU0FBWSxHQUFFb0osRUFBY3BKLFdBQzFDb0osRUFBY3RKLGVBQWlCcm1GLEVBQy9CMnZGLEVBQWNULGNBQWdCQSxFQUM5QlMsRUFBY3pJLGFBQWUzMEUsZUFBZU0sTUFBTXEwRSxHQUNsRGtJLEVBQWFRLHdCQUEwQkQsQ0FDekMsQ0F4SUlJLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFDRS9qRCxFQUFFLG1CQUFtQjBKLE9BQU0sSUFBTW5MLEtBQUtzbkcsMkJBRXRDbDNFLHNCQUFzQlMsZ0JBQWdCLHlCQUEwQjRELHFCQUFxQk0sa0JBQWtCLEtBQ2xHMUssRUFBbUJDLGNBQWMsU0FDbEN0cUIsS0FBS29uRyxnQkFBZ0IsR0FFMUIsRUFDRDlpRyxLQUFJLEtBQ0ssQ0FDTHk1QixLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUNsQjZCLFNBQVcsR0FBRTdTLDZDQUNia2pHLHdCQUF5QixLQUN6QkUsMEJBQTJCLEtBQzNCSyxhQUFjeHBFLEtBQUssNEJBQ25CeXBFLFlBQWF6cEUsS0FBSyxvQ0FDbEIwcEUsZUFBZ0IxcEUsS0FBSyxxQkFDckIycEUsY0FBZTNwRSxLQUFLLDZCQUNwQjJvRSxRQUFTLE9BR2IxOUMsUUFBUyxDQUNQbytDLGVBQWdCLFdBQ2QzbEcsRUFBRyxxQkFBb0JxRCxLQUFLLFNBQVUsVUFDdENyRCxFQUFHLHFCQUFvQnFELEtBQUssU0FBVSxVQUN0Q3JELEVBQUcscUJBQW9Ca0gsWUFBWSxZQUNuQ2xILEVBQUcscUJBQW9Ca0gsWUFBWSxXQUNwQyxFQUNENjdFLFdBQVlqbkUsaUJBQ1YsSUFBSWpiLEVBQU8sR0FBRXdCLGtEQUNUK0csRUFBUyxDQUNYKzhFLEtBQU01bkYsS0FBS3l1QixXQUFXbTVELEtBQ3RCLzFFLE9BQVEsUUFDUitCLEtBQU01VCxLQUFLeXVCLFdBQVc3YSxLQUN0QjlCLEtBQU05UixLQUFLb25ELE9BQU9pL0MsVUFDbEIzaEcsSUFBSzFFLEtBQUt5dUIsV0FBVy9wQixLQUV2QixJQUNFLElBQUl5bkIsRUFBVSxDQUNaLGVBQWdCLDBCQUVaeEMsZUFBZXlDLGFBQWE5cEIsRUFBSyxDQUFFdWQsT0FBUSxPQUFRc00sVUFBUzVjLEtBQU1WLEtBQUs2RSxVQUFVN0ksS0FDdkY3SyxLQUFLMm1HLGNBR1AsQ0FGRSxNQUFNM2lHLEdBQ05oRSxLQUFLMm1HLGNBQ1AsQ0FDRCxFQUNEQSxhQUFjLFdBQ1osSUFBSXp2RixFQUFRbFgsS0FBS3FuRyxtQkFDakJoa0csVUFBVTg2RixlQUNWam5GLEVBQU1tWCxTQUNOaHJCLFVBQVVnN0YsY0FDWCxFQUNEOW1FLFFBQVMsV0FDS3YzQixLQUFLcW5HLG1CQUNYbEksZUFDUCxFQUNEa0ksaUJBQWtCLFdBQ2hCLE9BQU9ybkcsS0FBS3VuRCxNQUF5QixpQkFDdEMsRUFDRCsvQyx1QkFBd0IsV0FDdEJ0bkcsS0FBS3VuRCxNQUF3QixpQkFBRXY1QyxNQUNqQyxJQ3pIRSxNQUFBc3pFLEdBQUEsQ0FBQXppRCxNQUFLLGlCQUNFLDBDQUNFLDRCQUE0QnR6QixHQUFHLG9CQUFvQnUzQixLQUFHLDRCQUV0RCxjQU9ILE1BQUEsQ0FORGpFLE1BQUUsbUZBQUEsQ0FDTDhpRCxHQUlNLE1BQUEsQ0FKSDlpRCxNQUFBLGVBQUEsQ0FDRjhpRCxHQUVPLE1BQUEsQ0FGRDlpRCxNQUFNLG1DQUFPaUUsS0FBQSxXQUNoQjYrQyxHQUFzQixPQUFoQixDQUFBOWlELE1BQU0sNkJBQVUsdUJBSXRCMmpELEdBQUEsQ0FBQTNqRCxNQUFLLGFBQ0w0akQsR0FBQSxDQUFBbDNFLEdBQUcscUJBbUJSbzNFLEdBQUEsQ0FBQTlqRCxNQUFBLHlCQUNGbjVCLEtBQUEsU0FBQTZGLEdBQUEsaUJBQUFzekIsTUFBQSwwQkFBQThpRCxHQUFBLElBQUEsQ0FBQTlpRCxNQUFBLGdCQUFBLE1BQUEsbUpBakNDLE9BQUErb0UsS0FBQTVrQixTQUFBMUIsb0NBWU1LLEdBbUJILE1BbkJHYSxHQW1CSCxJQURFLFNBQUEsSUFac0JxbEIsRUFBQSx3QkFIcEI5M0YsTUFBUW8zQyxFQUFXb2dELGFBQ25CaDRGLEtBQU00M0MsRUFBV3FnRCxZQUNqQk0sU0FBUWpnRCxFQUFVMjhCLG1EQVlUeWpCLEVBQUEsQ0FURC9rRCxJQUFJLG9CQUNaczdDLGNBQWVyM0MsRUFBdUI2L0Msd0JBQUN4SSxjQUN2Q2YsZUFBZ0J0MkMsRUFBRTYvQyx3QkFBQXZKLGVBQ2xCRSxTQUFVeDJDLEVBQWM2L0Msd0JBQUFySixTQUN4QkosY0FBUXAyQyxFQUFBNi9DLHdCQUFBekosY0FDUm9CLGVBQUF4M0MsRUFBQTYvQyx3QkFBQVYsY0FDRmhJLGFBQUFuM0MsRUFBQTYvQyx3QkFBQTFJLGFBQ0UzbkYsU0FBVXd3QyxFQUFPeHdDLFNBQ2pCc21GLFlBQWE3MUMsRUFBVTM0QiwrSUFJOUJrekQsU0FBQWdCLElBQ0R2N0IsRUFBQStnRCxVQUFBUCxLQUFBNWtCLEdBQUEsU0FBQUosR0FBQSxDQUFBNFksR0FBQVEsR0FBQSxPQUFBNzBDLEVBQUFwcEIsS0FBQSw2QkFBQSwrTkN4Q0wsTUFBTXFxRSxHQUFpQixDQUNyQkMsWUFBWSxFQUNaNXZGLE1BQU8sQ0FDSDZ2RixNQUFPLE1BQ1BDLFFBQVMsQ0FDTHI0QyxJQUFLLEdBQ0x6dUMsSUFBSyxHQUNMdk0sTUFBTyxDQUNIZzdDLElBQUssR0FDTHp1QyxJQUFLLEtBR2IrbUYsUUFBUSxHQUVaQyxNQUFPLENBQ0hyMUYsTUFBTyxJQUNQK0YsTUFBTyxDQUFFdXZGLFFBQVMsUUFDbEJDLE9BQVEsQ0FDSmpqRyxLQUFNLGFBQ05rakcsVUFBVyxJQUduQkMsWUFBYSxDQUNUQyxhQUFjLElBQ2RDLGlCQUFpQixFQUNqQkMsaUJBQWlCLEVBQ2pCQyxPQUFPLEVBQ1BILGFBQWMsR0FFbEJJLFFBQVMsQ0FDUEMsVUFBVyxDQUNQQyxlQUFnQixFQUNoQkMsYUFBYyxHQUNkQyx1QkFBd0IsSUFDeEJDLFFBQVMsSUFDVEMsZUFBZ0IsR0FFcEJDLGNBQWUsQ0FDWEMsa0JBQWtCLElBR3hCaGIsT0FBUSxDQUNKaWIsUUFBUyxDQUNMckIsTUFBTyxPQUVYc0IsUUFBUyxDQUNQdEIsTUFBTyxPQUNQdnBFLEtBQU0sQ0FDSjhxRSxLQUFNLGdCQUNOdmlDLEtBQU0sSUFDTjl0RCxLQUFNLEdBQ05zd0YsT0FBUSxNQUlaQyxNQUFPLENBQ0x6QixNQUFPLE9BQ1B2cEUsS0FBTSxDQUNKOHFFLEtBQU0sZ0JBQ052aUMsS0FBTSxJQUNOOXRELEtBQU0sR0FDTnN3RixPQUFRLE1BSVpFLFlBQWEsQ0FDWDFCLE1BQU8sT0FDUHZwRSxLQUFNLENBQ0o4cUUsS0FBTSxnQkFDTnZpQyxLQUFNLElBQ045dEQsS0FBTSxHQUNOc3dGLE9BQVEsTUFJWkcsT0FBUSxDQUNOM0IsTUFBTyxPQUNQdnBFLEtBQU0sQ0FDSjhxRSxLQUFNLGdCQUNOdmlDLEtBQU0sSUFDTjl0RCxLQUFNLEdBQ05zd0YsT0FBUSxNQUlaSSxPQUFRLENBQ041QixNQUFPLE9BQ1B2cEUsS0FBTSxDQUNKOHFFLEtBQU0sZ0JBQ052aUMsS0FBTSxJQUNOOXRELEtBQU0sR0FDTnN3RixPQUFRLE1BSVpLLE1BQU8sQ0FDTDdCLE1BQU8sT0FDUHZwRSxLQUFNLENBQ0o4cUUsS0FBTSxnQkFDTnZpQyxLQUFNLElBQ045dEQsS0FBTSxHQUNOc3dGLE9BQVEsTUFJWk0sR0FBSSxDQUNGOUIsTUFBTyxPQUNQdnBFLEtBQU0sQ0FDSjhxRSxLQUFNLGdCQUNOdmlDLEtBQU0sSUFDTjl0RCxLQUFNLEdBQ05zd0YsT0FBUSxNQUlaTyxXQUFZLENBQ1YvQixNQUFPLE9BQ1B2cEUsS0FBTSxDQUNKOHFFLEtBQU0sZ0JBQ052aUMsS0FBTSxJQUNOOXRELEtBQU0sR0FDTnN3RixPQUFRLE1BSVpRLEtBQU0sQ0FDSmhDLE1BQU8sT0FDUHZwRSxLQUFNLENBQ0o4cUUsS0FBTSxnQkFDTnZpQyxLQUFNLElBQ045dEQsS0FBTSxHQUNOc3dGLE9BQVEsTUFJWlMsSUFBSyxDQUNIakMsTUFBTyxPQUNQdnBFLEtBQU0sQ0FDSjhxRSxLQUFNLGdCQUNOdmlDLEtBQU0sSUFDTjl0RCxLQUFNLEdBQ05zd0YsT0FBUSxNQUlaVSxXQUFZLENBQ1ZsQyxNQUFPLE9BQ1B2cEUsS0FBTSxDQUNKOHFFLEtBQU0sZ0JBQ052aUMsS0FBTSxJQUNOOXRELEtBQU0sR0FDTnN3RixPQUFRLE1BSVpXLElBQUssQ0FDSG5DLE1BQU8sT0FDUHZwRSxLQUFNLENBQ0o4cUUsS0FBTSxnQkFDTnZpQyxLQUFNLElBQ045dEQsS0FBTSxHQUNOc3dGLE9BQVEsUUFPTFksR0FPRyxTQUFTQyxFQUFZQyxFQUFXeGxGLEVBQVV0VCxHQUN0Q3JRLEVBQUV3USxLQUFNLEdBQUVuTywwREFBMkQsQ0FDbkY2bUcsV0FBWUEsRUFBWUUsZUFBZ0JELEVBQVc5NEYsS0FBTUEsSUFFbkROLE1BQU1sTixJQUNUQSxFQUFLMEwsU0FBV29WLEdBQ2pCQSxHQUFVLEdBRWYsRUFmVXNsRixHQWdCVSxXQUNuQixPQUFPdEMsRUFDVCxFQzVHSTBDLEdBQWlDLGlDQUV4QixJQUFBQyxHQUFBLENBQ2JqaEQsV0FBWSxDQUNWbThDLFVBQWFDLEdBQ2IsdUJBQXdCQyxHQUN4QixXQUFZQyxJQUVkdHZELE1BQU8sQ0FDTHV2RCxVQUFXcmtHLE9BQ1h5c0IsV0FBWWpjLE9BQ1oreUUsS0FBTXZqRixPQUNOc2tHLGNBQWV4OEUsTUFDZnErRSxTQUFVOW5ELFFBQ1YycUQsbUJBQW9CbGhGLE9BS3RCcS9CLFdBNElGLFNBQXlCcTlDLEdBQ3ZCLE1BQU1DLEVBQWtCLEdBQ3hCLElBQUlydkYsRUFBVSxHQUNWb3VFLEVBQTBCLEVBQzlCZ2hCLEVBQWFFLFFBQVVyakcsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDMnFCLFlBRzNGZzRFLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0FDN0JvMUYsRUFBYUcsY0FDZixJQUdGLElBQUlDLEVBQWFuNEUsV0FDakJtNEUsRUFBaUIsS0FBSSxXQUVyQixJQUFJQyxFQUF5QixDQUMzQnJJLGNBQWVpSSxFQUNmaEosZUFBZ0IsR0FDaEJFLFNBQVV0NkYsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDOGlHLEdBQzlFckosZUFBZSxHQUdiK0ksRUFBZ0IsR0FDcEIsSUFBSyxJQUFJanZGLEtBQVdtdkYsRUFBYXAvQyxPQUFPay9DLGVBQWlCLEdBQ3ZEanZGLEVBQU9tdUIsaUJBQW1CLENBQUN0dUIsRUFBT2pTLEtBQ2hDMmhHLEVBQWlCLEtBQUlKLEVBQWF5RSxrQkFDbENyRSxFQUFXdnZGLEVBQU84dEIsZUFBaUJsZ0MsRUFBTXNHLEdBQ3pDOGUsRUFBbUJNLGVBQWV0VCxFQUFPOHRCLGNBQWVsZ0MsRUFBTXNHLElBQzlEMkwsRUFBTTRJLEtBQUt4ZCxJQUFJZSxVQUFVeTdGLFNBQVUsR0FBRWg3Riw2Q0FBOEM4aUcsSUFDbkZ2akcsVUFBVTg2RixlQUNWam5GLEVBQU00SSxLQUFLdU8sU0FDWGhyQixVQUFVZzdGLGNBQWMsRUFFMUJpSSxFQUFjcDhGLEtBQUttTixHQUtyQkQsRUFBVSxDQUNSLENBQUV1dUUsV0FBWTVuRCxLQUFLLHNCQUF1Qmh5QixLQUFNLFlBQWF6SCxLQUFNLFlBQWFrNkIsVUFBVywwQkFBMkJsQyxPQUFRLENBQUNoNEIsRUFBTW9CLElBQWtCcEIsRUFBS1csTUFBU21oRixtQkFBb0IsRUFBRzhrQixZQUFhcnBFLGlCQUFpQnNwRSxnQkFDMU4sQ0FBRXhsQixXQUFZNW5ELEtBQUssbUJBQW9CaHlCLEtBQU0sU0FBVXpILEtBQU0sU0FBVWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQ3JILENBQUVULFdBQVk1bkQsS0FBSyxtQkFBb0JoeUIsS0FBTSxTQUFVekgsS0FBTSxTQUFVazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDckgsQ0FBRVQsV0FBWTVuRCxLQUFLLGlCQUFrQmh5QixLQUFNLE9BQVF6SCxLQUFNLE9BQVNrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUNoSCxDQUFFVCxXQUFZNW5ELEtBQUsscUJBQXNCaHlCLEtBQU0sVUFBV3pILEtBQU0sV0FBWWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQzFILENBQUVULFdBQVk1bkQsS0FBSyx1QkFBd0JoeUIsS0FBTSxhQUFjekgsS0FBTSxhQUFjMFQsU0FBUyxFQUFPb3VFLG1CQUFvQixHQUN2SCxDQUFFVCxXQUFZNW5ELEtBQUsscUJBQXNCaHlCLEtBQU0sV0FBWXpILEtBQU0sV0FBYWs2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsR0FDeEksQ0FBRVQsV0FBWTVuRCxLQUFLLGlCQUFrQmh5QixLQUFNLE9BQVF6SCxLQUFNLE9BQVE4aEYsbUJBQW9CLElBR3ZGWixFQUEwQixFQUV2QmdoQixFQUFhMkIsVUFDZC93RixFQUFRbE4sS0FBSyxDQUFFeTdFLFdBQVk1bkQsS0FBSyxtQkFBb0JoeUIsS0FBTSxxQkFBc0J6SCxLQUFNLHFCQUFzQms2QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBRzlwRCxPQUFRLENBQUNoNEIsRUFBTW9CLEVBQU1rZ0YsSUFDekw0Z0IsRUFBYTRFLHNCQUFzQjltRyxFQUFNb0IsRUFBTWtnRixLQU01RCxJQUFJMFksRUFBZSxDQUNqQmxCLFlBQVksRUFDWkksTUFBTyxDQUFDLENBQUVoWSxFQUF5QixVQUdqQ3VoQixFQUFnQnA5RSxlQUFlTSxNQUFNNDhFLEdBQ3pDRSxFQUFjdkksY0FBZ0JxSSxFQUF1QnJJLGNBQ3JEdUksRUFBY3BKLFNBQVksR0FBRW9KLEVBQWNwSixXQUMxQ29KLEVBQWN0SixlQUFpQnJtRixFQUMvQjJ2RixFQUFjVCxjQUFnQkEsRUFDOUJTLEVBQWN6SSxhQUFlMzBFLGVBQWVNLE1BQU1xMEUsR0FDbERrSSxFQUFhUSx3QkFBMEJELEVBSXZDSCxFQUFpQixLQUFJLGFBQ3JCQyxFQUF1QmxKLFNBQVd0NkYsVUFBVXk3RixTQUFVLEdBQUVoN0YsNkNBQThDOGlHLEdBRXRHeHZGLEVBQVUsQ0FDUixDQUFFdXVFLFdBQVk1bkQsS0FBSyxpQkFBa0JoeUIsS0FBTSxPQUFRekgsS0FBTSxPQUFRazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDL0csQ0FBRVQsV0FBWTVuRCxLQUFLLHdCQUF5Qmh5QixLQUFNLGNBQWV6SCxLQUFNLGNBQWVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUNwSSxDQUFFVCxXQUFZNW5ELEtBQUssaUJBQWtCaHlCLEtBQU0sT0FBUXpILEtBQU0sT0FBUWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQy9HLENBQUVULFdBQVk1bkQsS0FBSyxxQkFBc0JoeUIsS0FBTSxXQUFZekgsS0FBTSxXQUFZazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDM0gsQ0FBRVQsV0FBWTVuRCxLQUFLLHNCQUF1Qmh5QixLQUFNLFlBQWF6SCxLQUFNLFlBQWNrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixJQUdqSVosRUFBMEIsRUFDMUI4WSxFQUFhZCxNQUFRLENBQUMsQ0FBRWhZLEVBQXlCLFNBQ2pEdWhCLEVBQWdCcDlFLGVBQWVNLE1BQU00OEUsR0FDckNFLEVBQWN2SSxjQUFnQnFJLEVBQXVCckksY0FDckR1SSxFQUFjcEosU0FBWSxHQUFFb0osRUFBY3BKLFdBQzFDb0osRUFBY3RKLGVBQWlCcm1GLEVBQy9CMnZGLEVBQWNULGNBQWdCQSxFQUM5QlMsRUFBY3pJLGFBQWUzMEUsZUFBZU0sTUFBTXEwRSxHQUNsRGtJLEVBQWFVLDBCQUE0QkgsQ0FDM0MsQ0E1T0lJLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFDRXhsRCxLQUFLaXJHLGtCQUFvQmpyRyxLQUFLb25ELE9BQU8zNEIsV0FBVzgyRCxLQUNoRHZsRixLQUFLMGxHLFNBQVNqMUYsU0FBU3hLLElBQ3JCakcsS0FBS2lyRyxtQkFBcUJobEcsRUFBRXNGLEdBQUt0RixFQUFFb25DLFFBQVMsRUFBT3BuQyxFQUFFb25DLFFBQVMsQ0FBSSxJQUdwRWpkLEVBQXNCUyxnQkFBZ0IscUJBQXNCNEQscUJBQXFCTSxrQkFBa0IsS0FDOUYxSyxFQUFtQkMsY0FBYyxTQUNsQ3RxQixLQUFLb25HLGdCQUFnQixJQUd6QmgzRSxFQUFzQlMsZ0JBQWdCLDJCQUE0Qmk2RSxJQUFpQ2gvRixJQUNsRyxJQUFJb0wsRUFBUWxYLEtBQUtxbkcsbUJBQ2hCaDlFLEVBQW1CTSxlQUFlLE9BQVE3ZSxHQUMxQ29MLEVBQU04bkYsdUJBQXVCaC9GLEtBQUtpckcsbUJBQ2xDL3pGLEVBQU1pb0YsZ0JBQ05uL0YsS0FBS2lyRyxrQkFBb0JuL0YsQ0FBRyxJQUU5QnJLLEVBQUUsbUJBQW1CMEosT0FBTSxJQUFNbkwsS0FBS3NuRywwQkFDdkMsRUFDRGhqRyxLQUFJLEtBQ0ssQ0FDTHk1QixLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUNsQmt5Rix3QkFBeUIsS0FDekJFLDBCQUEyQixLQUMzQkssYUFBY3hwRSxLQUFLLDRCQUNuQnlwRSxZQUFhenBFLEtBQUssb0NBQ2xCMm9FLFFBQVMsS0FDVHVFLGtCQUFtQixLQUNuQnZGLFNBQVUsQ0FDUixDQUNFMzFGLE1BQU9ndUIsS0FBSywwQkFDWnNQLE9BQWlCLFlBQVJrNEMsS0FDVGg2RSxHQUFJLFlBRU4sQ0FDRXdFLE1BQU9ndUIsS0FBSyw0QkFDWnNQLE9BQWlCLGNBQVJrNEMsS0FDVGg2RSxHQUFJLGlCQUtaeTlDLFFBQVMsQ0FDUG8rQyxlQUFnQixXQUNkM2xHLEVBQUcscUJBQW9CcUQsS0FBSyxTQUFVLFVBQ3RDckQsRUFBRyxxQkFBb0JxRCxLQUFLLFNBQVUsVUFDdENyRCxFQUFHLHFCQUFvQmtILFlBQVksWUFDbkNsSCxFQUFHLHFCQUFvQmtILFlBQVksV0FDcEMsRUFDRDR1QixRQUFTLFdBQ1AsSUFBSXJnQixFQUFRbFgsS0FBS3FuRyxtQkFDakJud0YsRUFBTThuRix1QkFBdUJoL0YsS0FBS2lyRyxtQkFDbEMvekYsRUFBTWlvRixlQUNQLEVBRUR3SSxXQUFZLFNBQVMxekYsR0FDbkJqVSxLQUFLMGxHLFNBQVNqMUYsU0FBU3hLLEdBQU1BLEVBQUVvbkMsUUFBUyxJQUN4Q3A1QixFQUFLbzVCLFFBQVMsRUFDZGpkLEVBQXNCUSxrQkFBa0JrNkUsR0FBZ0M3MkYsRUFBSzFJLEdBQzlFLEVBQ0Q2L0Ysc0JBQXVCLFNBQVM5bUcsRUFBTW9CLEVBQU1rZ0YsR0FDMUMsTUFBTXYzRCxFQUFTcnVCLEtBQUsybUcsYUFDZDcwRixFQUFPOVIsS0FBS29uRCxPQUFPaS9DLFVBQ25CZ0YsRUFBdUIsQ0FDM0JodUUsUUFBUyxLQUNQcXRFLEdBQWdDOWtCLEVBQVEwbEIsUUFBU3RyRyxLQUFLb25ELE9BQU80akQsbUJBQW1CLEdBQUd6L0YsR0FBSThpQixFQUFRdmMsRUFBSSxHQUdqR3k1RixFQUFzQixDQUMxQmx1RSxRQUFTLEtBQ1BxdEUsR0FBZ0M5a0IsRUFBUTBsQixRQUFTdHJHLEtBQUtvbkQsT0FBTzRqRCxtQkFBbUIsR0FBR3ovRixHQUFJOGlCLEVBQVF2YyxFQUFJLEdBR2pHMDVGLEVBQXlCLENBQzdCbnVFLFFBQVMsS0FDUHF0RSxHQUFnQzlrQixFQUFRMGxCLFFBQVN0ckcsS0FBS29uRCxPQUFPNGpELG1CQUFtQixHQUFHei9GLEdBQUk4aUIsRUFBUXZjLEVBQUksR0FJdkcsR0FBYSxZQUFUcE0sRUFBb0IsT0FBT3BCLEVBQy9CLE1BQU1tbkcsRUFBZ0I3bEIsRUFBUThsQixXQUN4QkMsRUFBZ0IsQ0FBRTlzRSxNQUFPLGdCQUFpQmhzQixLQUFNLElBQUs5QyxNQUFPL1AsS0FBS29uRCxPQUFPNGpELG1CQUFtQixHQUFHOTFGLE1BQU93cEIsUUFBUzJzRSxHQUM5R08sRUFBZSxDQUFFL3NFLE1BQU8sZ0JBQWlCaHNCLEtBQU0sSUFBSzlDLE1BQU8vUCxLQUFLb25ELE9BQU80akQsbUJBQW1CLEdBQUc5MUYsTUFBT3dwQixRQUFTNnNFLEdBQzdHTSxFQUFrQixDQUFFaHRFLE1BQU8seUJBQTBCaHNCLEtBQU0sSUFBSzlDLE1BQU8vUCxLQUFLb25ELE9BQU80akQsbUJBQW1CLEdBQUc5MUYsTUFBT3dwQixRQUFTOHNFLEdBRS9ILE9BQVFDLEdBQ04sS0FBSyxFQUFxQkUsRUFBYzlzRSxNQUFRLHVCQUF3QixNQUN4RSxLQUFLLEVBQXFCK3NFLEVBQWEvc0UsTUFBUSx1QkFBd0IsTUFDdkUsS0FBSyxFQUFxQmd0RSxFQUFnQmh0RSxNQUFRLGdDQUVwRCxPQUFPcEIsZUFBZXNwRCxvQkFBb0IsQ0FBQzhrQixFQUFpQkYsRUFBZUMsR0FDNUUsRUFDRHBuQixXQUFZam5FLGlCQUNWLElBQUlqYixFQUFPLEdBQUV3QixrREFDVCtHLEVBQVMsQ0FDWCs4RSxLQUFNNW5GLEtBQUt5dUIsV0FBV201RCxLQUN0Qi8xRSxPQUFRLFFBQ1IrQixLQUFNNVQsS0FBS3l1QixXQUFXN2EsS0FDdEI5QixLQUFNOVIsS0FBS29uRCxPQUFPaS9DLFVBQ2xCM2hHLElBQUsxRSxLQUFLeXVCLFdBQVcvcEIsS0FFdkIsSUFDRSxJQUFJeW5CLEVBQVUsQ0FDWixlQUFnQiwwQkFFWnhDLGVBQWV5QyxhQUFhOXBCLEVBQUssQ0FBRXVkLE9BQVEsT0FBUXNNLFVBQVM1YyxLQUFNVixLQUFLNkUsVUFBVTdJLEtBQ3ZGN0ssS0FBSzJtRyxjQUdQLENBRkUsTUFBTTNpRyxHQUNOaEUsS0FBSzJtRyxjQUNQLENBQ0QsRUFDREEsYUFBYyxXQUNaLElBQUl6dkYsRUFBUWxYLEtBQUtxbkcsbUJBQ2pCaGtHLFVBQVU4NkYsZUFDVmpuRixFQUFNbVgsU0FDTmhyQixVQUFVZzdGLGNBQ1gsRUFDRGdKLGlCQUFrQixXQUNoQixPQUFPcm5HLEtBQUt1bkQsTUFBTyxpQkFBZ0J2bkQsS0FBS2lyRyxvQkFDekMsRUFDRGEsbUJBQW9CLFdBQ0o5ckcsS0FBS3l1QixXQUNMLEtBQUksV0FDbEJ0YSxTQUFTdkksU0FBU2lILEtBQU94UCxVQUFVeTdGLFNBQVUsR0FBRWg3RixrREFBbUQycUIsV0FDbkcsRUFDRHM5RSxxQkFBc0IsV0FDTi9yRyxLQUFLeXVCLFdBQ0wsS0FBSSxhQUNsQnRhLFNBQVN2SSxTQUFTaUgsS0FBT3hQLFVBQVV5N0YsU0FBVSxHQUFFaDdGLGtEQUFtRDJxQixXQUNuRyxFQUNENjRFLHVCQUF3QixXQUN0QnRuRyxLQUFLdW5ELE1BQXdCLGlCQUFFdjVDLE1BQ2pDLElDbE9FLE1BQUFzekUsR0FBQSxDQUFBemlELE1BQUssaUJBQ0UsMENBQ0UsNEJBQTRCdHpCLEdBQUcsb0JBQW9CdTNCLEtBQUcsNEJBRXRELGNBT0gsTUFBQSxDQU5EakUsTUFBRSxtRkFBQSxDQUNMOGlELEdBSU0sTUFBQSxDQUpIOWlELE1BQUEsZUFBQSxDQUNGOGlELEdBRU8sTUFBQSxDQUZEOWlELE1BQU0sbUNBQU9pRSxLQUFBLFdBQ2hCNitDLEdBQWtCLE9BQVosQ0FBQTlpRCxNQUFNLDZCQUFNLHVCQUlsQjJqRCxHQUFBLENBQUEzakQsTUFBSyxhQUNMNGpELEdBQUEsQ0FBQWwzRSxHQUFHLGlCQStCRG8zRSxHQUFBLENBQUE5akQsTUFBRyxtQkFrQlpuNUIsS0FBQSxTQUFBNkYsR0FBQSxpQkFBQXN6QixNQUFBLDBCQUFBOGlELEdBQUEsSUFBQSxDQUFBOWlELE1BQUEsZ0JBQUEsTUFBQSxvS0E5REMsT0FBQStvRSxLQUFBNWtCLFNBQUExQixvQ0FZTUssR0ErQkEsTUEvQkFhLEdBK0JBLElBREUsU0FBQSxJQXhCbUJxbEIsRUFBQSx3QkFIcEI5M0YsTUFBT28zQyxFQUFZb2dELGFBQ25CaDRGLEtBQU00M0MsRUFBV3FnRCxZQUNqQk0sU0FBUWpnRCxFQUFVMjhCLG1EQU9WdWpCLEVBQUEsd0JBSFR4OEYsR0FBRyxtQkFDRm02RixTQUFVditDLEVBQVF1K0MsU0FDbEJzQyxhQUFZbmdELEVBQVU4L0MsZ0RBR1MsWUFBakJ4Z0QsRUFBaUI4akQsMkJBT3RCaEQsRUFBQSxPQVBzQy9rRCxJQUFJLHlCQUNuRHM3QyxjQUFlcjNDLEVBQXVCNi9DLHdCQUFDeEksY0FDdkNmLGVBQVF0MkMsRUFBQTYvQyx3QkFBQXZKLGVBQ1JFLFNBQVV4MkMsRUFBdUI2L0Msd0JBQUFySixTQUNqQ0osY0FBZXAyQyxFQUF1QjYvQyx3QkFBQ3pKLGNBQ3ZDb0IsZUFBZ0J4M0MsRUFBdUI2L0Msd0JBQUNWLGNBQ3hDaEksYUFBY24zQyxFQUF1QjYvQyx3QkFBQzFJLG1JQUVQLGNBQWpCbjNDLEVBQWlCOGpELDJCQU9yQmhELEVBQUEsT0FQdUMva0QsSUFBSSwyQkFDckRzN0MsY0FBZXIzQyxFQUF5QisvQywwQkFBQzFJLGNBQ3pDZixlQUFRdDJDLEVBQUErL0MsMEJBQUF6SixlQUNSRSxTQUFBeDJDLEVBQUErL0MsMEJBQUF2SixTQUNGSixjQUFBcDJDLEVBQUErL0MsMEJBQUEzSixjQUNFb0IsZUFBZ0J4M0MsRUFBQysvQywwQkFBQVosY0FDM0JoSSxhQUFBbjNDLEVBQUErL0MsMEJBQUE1SSx1SUFJVzNjLFNBQUFnQixJQUNBRCxHQWdCUCw0N0JBQ0ZmLEdBQUEsU0FBQWlCLEdBQUEsQ0FBQTRZLEdBQUFRLEdBQUEsT0FBQTcwQyxFQUFBcHBCLEtBQUEsNkJBQUEsa2NDM0RDaXVFLEVBQWMsQ0FDbEJwa0IsS0FBTTl3QyxFQUFNcm9CLFdBQVdtNUQsS0FDdkIvMUUsT0FBUSxhQUNSbk4sSUFBS295QyxFQUFNcm9CLFdBQVd3OUUsUUFZeEIsSUFBSTkvRixFQUFVLEtBQ1YrL0YsRUFBZ0IsQ0FBQSxFQUNoQkMsRUFBZ0IsQ0FBQSxFQUNoQjF0RSxFQUFZLEtBQ1oydEUsR0FBYyxFQUNkQyxFQUF1QixLQUN2QjU5RSxFQUFhLENBQUEsRUFDYnl3RSxHQUFlLEVBRW5CdjlCLElBQVVwa0QsVUFDUit1RixJQUNBNzlFLEVBQWFxb0IsRUFBTXJvQixXQUNuQmdRLEVBQVl0cUIsU0FBU280RixlQUFlejFELEVBQU1tMUQsUUFHMUMsTUFBTTNwRyxFQUFNZSxVQUFVeTdGLFNBQVNob0QsRUFBTXgwQyxJQUFLbXNCLFNBQ3BDaHRCLEVBQUV3ZSxJQUFJM2QsRUFBSzBwRyxHQUFhLFNBQVM3OEYsR0FDckMsTUFBTXNKLE1BQUNBLEVBQUtnd0YsTUFBRUEsRUFBSytELGtCQUFFQSxHQUFxQnI5RixFQUFTK0QsSUFDbkRrNUYsRUFBY0ksRUFDZE4sRUFBZ0IsSUFBSXg1RSxJQUFJKzVFLFFBQVFoMEYsR0FDaEMwekYsRUFBZ0IsSUFBSXo1RSxJQUFJKzVFLFFBQVFoRSxHQUNoQyxNQUFNaUUsRUFBVyxDQUFDajBGLE1BQU95ekYsRUFBZXpELE1BQU8wRCxHQUMvQ1EsRUFBY0QsR0FDZHZnRyxFQUFVLElBQUl1bUIsSUFBSWs2RSxRQUFRbnVFLEVBQVdpdUUsRUFBVWhDLE1BQy9DbUMsSUFDQUMsSUFDQTE4RSxFQUFzQlEsa0JBQWtCNkQscUJBQXFCSSxnQkFDaEUsR0FBRSxJQUdIaXRDLElBQWdCLEtBQ00sR0FBaEJvOUIsR0FDSjNuRSxHQUFTLElBR1gsTUFVTW8xRSxFQUFpQkQsSUFDTyxHQUF6QkEsRUFBU2owRixNQUFNeFgsUUFBd0MsR0FBekJ5ckcsRUFBU2pFLE1BQU14bkcsT0FDOUNRLEVBQUcsc0JBQXFCc0QsV0FBVyxVQUVuQ3RELEVBQUcsc0JBQXFCcUQsS0FBSyxTQUFVLFNBQ3pDLEVBR0l3bkcsRUFBYSxLQUVqQixNQUFNUyxFQUFXMXBHLFVBQVUycEcsaUJBQWlCdnJHLEVBQUcsMkJBRS9DLFFBQWdCNEYsSUFBYjBsRyxFQU1IdHJHLEVBQUcsMEJBQXlCMlIsTUFBTTI1RixFQUFTMzVGLE9BQzNDM1IsRUFBRywwQkFBeUI0UixPQUFPMDVGLEVBQVMxNUYsUUFDNUM1UixFQUFHLDBCQUF5QjZKLEdBQUcsV0FBVyxXQUN4QyxNQUFNakMsRUFBUSxDQUFDK0osTUFBTzNSLEVBQUcsMEJBQXlCMlIsUUFBU0MsT0FBUTVSLEVBQUcsMEJBQXlCNFIsVUFDL0ZoUSxVQUFVNHBHLGlCQUFpQnhyRyxFQUFFekIsTUFBT3FKLEVBQ3RDLElBRUE1SCxFQUFHLGlDQUFnQ29ULGNBYm5DLENBQ0UsTUFBTXhMLEVBQVEsQ0FBQytKLE1BQU8zUixFQUFHLDBCQUF5QjJSLFFBQVNDLE9BQVE1UixFQUFHLDBCQUF5QjRSLFVBQy9GaFEsVUFBVTRwRyxpQkFBaUJ4ckcsRUFBRXpCLE1BQU9xSixFQUV0QyxDQVM0QyxFQUd4Q3lqRyxFQUFxQixLQUV6QjNnRyxFQUFRYixHQUFHLGFBQWEsV0FDdEI3SixFQUFHLGdCQUFlNlYsSUFBSSxXQUFZLFdBQ3BDLElBRUFuTCxFQUFRYixHQUFHLGVBQWUsU0FBVVQsR0E1Q2hCQSxLQUNwQixNQUFNcWlHLEVBQVVyaUcsRUFBT1UsR0FBRzlHLE1BQU0sS0FDaENncUIsRUFBaUIsS0FBSXkrRSxFQUFRLEdBQzdCeitFLEVBQW9CLFFBQUl5K0UsRUFBUSxHQUNoQzdpRixFQUFtQk0sZUFBZSxPQUFROEQsRUFBaUIsTUFDM0RwRSxFQUFtQk0sZUFBZSxVQUFXOEQsRUFBb0IsU0FDakUyQixFQUFzQlEsa0JBQWtCNkQscUJBQXFCSyxrQkFBbUJqcUIsR0FDaEZ3akIsR0FBUSxFQXNDTnM1RCxDQUFhdWtCLEVBQWNqc0YsSUFBSXBWLEVBQU80TixNQUFNLElBQzlDLElBRUF0TSxFQUFRYixHQUFHLFFBQVEsU0FBU0YsR0FDMUJpaEcsRUFBdUJjLEdBQ3pCLElBRUFoaEcsRUFBUWIsR0FBRyxXQUFXLFNBQVNGLEdBQzdCZ1AsR0FDRixJQUdBLElBQUssTUFBTW5HLEtBQVM2aUMsRUFBTXMyRCxpQkFBbUIsQ0FBQSxFQUMzQ2poRyxFQUFRYixHQUFHMkksRUFBTTZpQyxFQUFNczJELGdCQUFnQm41RixHQUN6QyxFQUdJNDRGLEVBQXFCLEtBQ3pCLElBQUkxZ0csRUFBUyxPQUViLE1BQU1raEcsRUFBWWxoRyxFQUFRbWhHLGFBQWFuaEcsRUFBUW9ELEtBQUtqTCxLQUFLbVUsTUFBTS9ULEtBQUl1RSxHQUFLQSxFQUFFc0MsTUFHcEV5Z0YsRUFBTyxDQUNYcWhCLFVBQVdBLEVBQ1hsaEcsUUFBUyxDQUNQOUMsTUFBTzhDLEVBQVFvaEcsV0FDZmg1RixTQUFVcEksRUFBUXFoRyxvQkFJdEIvckcsRUFBRXdRLEtBQUs2a0MsRUFBTXgwQyxJQUFLLElBQ2Jtc0IsRUFFRDNjLEtBQU1nbEMsRUFBTXV2RCxVQUNaeDNGLEtBQU1BLEtBQUs2RSxVQUFVczRFLEdBQ3JCbjZFLE9BQVEsYUFFVixFQUdFczdGLEVBQTRCLEtBQzVCaGhHLEVBQVFvaEcsWUExSUksS0EySWRwaEcsRUFBUXNoRyxPQUFPLENBQ2Jwa0csTUFBT3FrRyxHQUNQbjVGLFNBQVUsQ0FBRXRMLEVBQUcsRUFBR3NSLEVBQUcsR0FDckJvekYsVUFBVyxDQUFFdDVFLFNBQVUsSUFBTXU1RSxlQUFnQixvQkFJakR6dUYsYUFBYWt0RixHQUdOLzZGLFdBQVd1N0YsSUFrQmR6eUYsRUFBTyxLQUNQaXlGLEdBQ0ZsdEYsYUFBYWt0RixHQUdmUSxHQUFvQixFQUdoQnQxRSxFQUFVLEtBQ2RwckIsRUFBUW9yQixTQUFRLEdBQ2hCMm5FLEdBQWUsQ0FBSSxFQVdmN3dFLEVBQVM5USxVQUNidFosUUFBUStCLElBQUl5b0IsR0FDWixNQUFNbnNCLEVBQU1lLFVBQVV5N0YsU0FBU2hvRCxFQUFNeDBDLElBQUttc0IsU0FDcENodEIsRUFBRXdlLElBQUkzZCxFQUFLMHBHLEdBQWEsU0FBUzc4RixHQUNyQyxNQUFNc0osTUFBQ0EsRUFBS2d3RixNQUFFQSxFQUFLK0Qsa0JBQUVBLEdBQXFCcjlGLEVBQVMrRCxJQUNuRGs1RixFQUFjSSxFQUNkTixFQUFnQixJQUFJeDVFLElBQUkrNUUsUUFBUWgwRixHQUNoQzB6RixFQUFnQixJQUFJejVFLElBQUkrNUUsUUFBUWhFLEdBQ2hDLE1BQU1pRSxFQUFXLENBQUVqMEYsTUFBT3l6RixFQUFlekQsTUFBTzBELEdBQ2hEUSxFQUFjRCxHQUNYdmdHLEdBQ0RBLEVBQVEwaEcsUUFBUW5CLEdBRWxCdDhFLEVBQXNCUSxrQkFBa0I2RCxxQkFBcUJJLGlCQUM5RGc0RSxHQUNELEdBQUUsU0FJSm42QyxFQUFhLENBQUVya0MsU0FBUWtKLFVBQVN1MkUscUJBM0JILElBQ3BCMUIsRUEwQjZDMkIsV0F2RG5DLFVBQ0QxbUcsSUFBWjhFLEVBS0VBLGFBQW1CdW1CLElBQUlrNkUsU0FLN0J6Z0csRUFBUTZoRyxZQUNSMThGLFlBQVcsS0FBUXU3RixHQUFvQixHQUFJLE1BTHpDNW9HLFFBQVFDLE1BQU0sK0JBTGRELFFBQVFDLE1BQU0sNEJBVWdDLEVBMkNnQitwRyxrQkF2QnZDeitFLElBQ3pCZixFQUFhZSxDQUFjLHlYQ3RMN0IsTUFBTTJ6RCxFQUFXamdDLEdBQUksTUFjZmdyRCxFQUFjLEtBQ2hCejlFLEVBQUssY0FDTHN5RCxHQUFPLEVBR0xBLEVBQVEsS0FDVkksRUFBU2wrRSxNQUFNODlFLE9BQU8sRUFJMUJyd0IsRUFBYSxDQUFFMWtELEtBZEYsS0FDVG0xRSxFQUFTbCtFLE1BQU0rSSxNQUFNLEVBYUorMEUsVUFFckJwaEIsSUFBVSxTQUdWLE1BQU0raUIsRUFBUzV2RSxHQUFNaXBCLEtBQUtqcEIsK1RDOEIxQixNQUFNcTVGLEdBQXNCLHNCQUViLElBQUFDLEdBQUEsQ0FDYnRrRCxXQUFZLENBQ1YsY0FBZXVrRCxHQUNmLHVCQUF3QmxJLEdBQ3hCLDJCQUE0Qm1JLEdBQzVCLGdCQUFpQnR4QixJQUVuQmxtQyxNQUFPLENBQ0x1dkQsVUFBV3JrRyxPQUNYNGxGLEtBQU1wOUQsT0FDTmlFLFdBQVlqYyxPQUNaeTVGLE9BQVFqcUcsT0FDUm1tRyxTQUFVOW5ELFFBQ1ZrdUQsZ0JBQWlCLzdGLFFBS25CMjJDLFdBK0hGLFNBQStCcWxELEdBRTdCLElBQUssTUFBTUMsS0FBZUQsRUFBY3BuRCxPQUFPbW5ELGdCQUFpQixDQUM5REMsRUFBY0UsWUFBWXhrRyxLQUFLc2tHLEVBQWNwbkQsT0FBT21uRCxnQkFBZ0JFLElBQ3BFLE1BQU1FLEVBQWdCdGtGLG1CQUFtQkMsY0FBY21rRixHQUV2RCxJQUFJLElBQUtubkUsRUFBR3JpQyxLQUFVdU4sT0FBT0MsUUFBUSs3RixFQUFjcG5ELE9BQU9tbkQsZ0JBQWdCRSxJQUN4RXhwRyxFQUFtQixZQUFJd3BHLEVBQ3BCRSxFQUVFMXBHLEVBQU1zRyxJQUFNb2pHLEdBQ2JILEVBQWNJLG1CQUFtQjFrRyxLQUFLakYsR0FHWCxHQUExQkEsRUFBTXFoQyxrQkFDUGtvRSxFQUFjSSxtQkFBbUIxa0csS0FBS2pGLEVBRzlDLENBRUF1cEcsRUFBYzlILFFBQVcsR0FBRTVpRyx5REFDM0IwcUcsRUFBY0ssYUFBZXhyRyxVQUFVeTdGLFNBQVMwUCxFQUFjOUgsUUFBUzhILEVBQWNwbkQsT0FBTzM0QixZQUM1RisvRSxFQUFjcEIsZ0JBQWtCLEVBQ2xDLENBckpJMEIsQ0FBc0I5dUcsS0FDdkIsRUFDRHdsRCxVQUNFLE1BQU11cEQsRUFBc0IvdUcsS0FBS3dzRyxrQkFDM0J3QyxFQUFhaHZHLEtBQUtndkcsV0FDckJodkcsS0FBS29uRCxPQUFPMzRCLFdBQVc5aEIsTUFBdUMsSUFBL0IzTSxLQUFLb25ELE9BQU8zNEIsV0FBVzloQixNQUN2RDNNLEtBQUtvbkcsaUJBR1BoM0UsRUFBc0JTLGdCQUFnQixtQkFBb0I0RCxxQkFBcUJLLG1CQUFvQjJMLElBQ2pHemdDLEtBQUtvbkcsZ0JBQWdCLElBR3ZCaDNFLEVBQXNCUyxnQkFBZ0Isc0JBQXVCczlFLElBQXNCOTJGLElBQ2pGclgsS0FBSzR1RyxtQkFBbUJ2M0YsRUFBTzlMLElBQU04TCxFQUNyQ2dULG1CQUFtQk0sZUFBZXRULEVBQU9vM0YsWUFBYXAzRixFQUFPL0QsS0FDN0R0VCxLQUFLeXVCLFdBQVdwWCxFQUFPbzNGLGFBQWVwM0YsRUFBTy9ELElBQzdDdFQsS0FBS2l2Ryx1QkFBdUIsSUFHOUI3K0UsRUFBc0JTLGdCQUFnQjd3QixLQUFLa3ZHLFVBQVd6NkUscUJBQXFCSSxpQkFBa0J4ZCxJQUN4RjAzRixJQUNEdHRHLEVBQUcsd0JBQXVCc0QsV0FBVyxVQUVyQ3RELEVBQUcsd0JBQXVCcUQsS0FBSyxTQUFVLFNBQzNDLElBSUYsSUFBSTJOLEVBQVU0WCxtQkFBbUI0RCxrQkFDakMsSUFBSSxNQUFPM2EsRUFBS3JPLEtBQVV3TixFQUN4QnpTLEtBQUt5dUIsV0FBV25iLEdBQU9yTyxFQUt6QnhELEVBQUcsaUJBQWdCMEosT0FBTSxTQUFTQyxHQUNoQzRqRyxHQUNGLElBRUExOUYsWUFBVyxJQUFNak8sVUFBVWc3RixnQkFBZ0IsR0FFM0M1OEYsRUFBRSxtQkFBbUIwSixPQUFNLElBQU1uTCxLQUFLc25HLDJCQUN0QzdsRyxFQUFFLGVBQWUwSixPQUFNLElBQU1uTCxLQUFLbXZHLDBCQUNuQyxFQUNEN3FHLEtBQUksS0FDSyxDQUNMeTVCLEtBQU9qcEIsR0FBTWlwQixLQUFLanBCLEdBQ2xCMnBCLFVBQVcsS0FDWDR0RSxxQkFBc0IsS0FDdEIzRixRQUFTLEtBQ1RtSSxhQUFjLEtBQ2RILFlBQWEsR0FDYkUsbUJBQW9CLEdBQ3BCeEIsZ0JBQWlCLENBQUUsRUFDbkI3RixhQUFjeHBFLEtBQUssNEJBQ25CeXBFLFlBQWF6cEUsS0FBSyxvQ0FDbEJxeEUsaUJBQWtCcnhFLEtBQUssZ0NBQ3ZCc3hFLGdCQUFpQnR4RSxLQUFLLHdDQUN0QnV4RSxvQkFBcUJ2eEUsS0FBSyx3QkFDMUJ3eEUsZ0JBQWlCeHhFLEtBQUsseUJBRzFCaXJCLFFBQVMsQ0FDUHp4QixRQUFTLFdBQ0d2M0IsS0FBS2t2RyxVQUNYMzNFLFNBQ0wsRUFFRG93RSxXQUFZLFNBQVN0d0YsR0FDbkIrWSxFQUFzQlEsa0JBQWtCdTlFLEdBQXFCOTJGLEVBQzlELEVBQ0Q2M0YsUUFBUyxXQUNQLE9BQU9sdkcsS0FBS3VuRCxNQUFtQixXQUNoQyxFQUNEaWxELGtCQUFtQixXQUVqQixPQURVeHNHLEtBQUtrdkcsVUFDSnBCLHNCQUNaLEVBQ0RrQixXQUFZenhGLGlCQUNWbGEsVUFBVTg2RixlQUNWLElBQUl6NUYsRUFBTTFFLEtBQUtrdkcsZ0JBQ1R4cUcsRUFBSTJwQixTQUNWaHJCLFVBQVVnN0YsY0FDWCxFQUNENFEsc0JBQXVCMXhGLGlCQUNyQixJQUFJN1ksRUFBTTFFLEtBQUtrdkcsVUFDZjdyRyxVQUFVODZGLGVBQ1Z6NUYsRUFBSXVwRyxrQkFBa0JqdUcsS0FBS3l1QixrQkFDckIvcEIsRUFBSTJwQixTQUNWaHJCLFVBQVVnN0YsY0FDWCxFQUNEMFAsV0FBWSxXQUNBL3RHLEtBQUtrdkcsVUFDWG5CLFlBQ0wsRUFDRHpHLHVCQUF3QixXQUN0QnRuRyxLQUFLdW5ELE1BQXdCLGlCQUFFdjVDLE1BQ2hDLEVBQ0RtaEcsdUJBQXdCLFdBQ3RCbnZHLEtBQUt1bkQsTUFBd0IsaUJBQUV2NUMsTUFDaEMsRUFDRG81RixlQUFnQixXQUNkM2xHLEVBQUcscUJBQW9CcUQsS0FBSyxTQUFVLFVBQ3RDckQsRUFBRyxxQkFBb0JxRCxLQUFLLFNBQVUsU0FDdkMsRUFDRDAvRSxXQUFZam5FLGlCQUNWLElBQUlqYixFQUFPLEdBQUV3QixrREFDVCtHLEVBQVMsQ0FDWCs4RSxLQUFNNW5GLEtBQUt5dUIsV0FBV201RCxLQUN0Qi8xRSxPQUFRLFFBQ1JDLEtBQU05UixLQUFLb25ELE9BQU9pL0MsVUFDbEIzaEcsSUFBSzFFLEtBQUt5dUIsV0FBVy9wQixLQUV2QixJQUNFLElBQUl5bkIsRUFBVSxDQUNaLGVBQWdCLDBCQUVaeEMsZUFBZXlDLGFBQWE5cEIsRUFBSyxDQUFFdWQsT0FBUSxPQUFRc00sVUFBUzVjLEtBQU1WLEtBQUs2RSxVQUFVN0ksSUFHekYsQ0FGVSxRQUNSN0ssS0FBS2d2RyxZQUNQLENBQ0Ysb0JDaE5PLGlCQUNFLGlDQUNFLGlDQUNKbndFLE1BQUUsbUZBQUEsQ0FDTDhpRCxHQUlNLE1BQUEsQ0FKSDlpRCxNQUFBLGVBQUEsQ0FDRjhpRCxHQUVPLE1BQUEsQ0FGRDlpRCxNQUFNLG1DQUFPaUUsS0FBQSxXQUNoQjYrQyxHQUFrQixPQUFaLENBQUE5aUQsTUFBTSw2QkFBTSx1QkFJbEI2aUQsR0FBQSxDQUFBN2lELE1BQUssYUFDTDJqRCxHQUFBLENBQUFqM0UsR0FBRyxpQkFDQWszRSxHQUFBLENBQUE1akQsTUFBTSwwRUFFK0MsSUFBQSxPQUE3QyxnREFBNkMsTUFBQSxjQUU3QyxrQkFDSjQ4RCxHQUFBLENBQUE1OEQsTUFBTSxVQVFiOGlELGFBQVFqOEUsS0FBQSxTQUFBNkYsR0FBQSxlQUFBc3pCLE1BQUEsa0NBQ044aUQsR0FBQyxJQUFBLENBQUE5aUQsTUFBQSx3QkFFSDhpRCxHQUVTLFNBQUEsQ0FGRGo4RSxLQUFLLFNBQVM2RixHQUFHLGFBQWFzekIsTUFBRywrQkFDdkM4aUQsR0FBa0IsSUFBQSxDQUFmOWlELE1BQU0sc0JBMEJoQmlqRCxHQUFBLENBQUFqakQsTUFBQSxtQkFDRm41QixLQUFBLFNBQUE2RixHQUFBLGlCQUFBc3pCLE1BQUEsMEJBQUE4aUQsR0FBQSxJQUFBLENBQUE5aUQsTUFBQSxnQkFBQSxNQUFBLGtRQTlDTzhpRCxHQTRDSCxNQTVDR0QsR0E0Q0gsSUFERSxTQUFBLENBekNHQyxHQW1CRSxNQW5CRmMsR0FtQkUsSUFoQkssU0FBQSxDQUZEbDNFLEdBQUcsc0JBQU03RixLQUFBLFNBQUFtNUIsTUFBQSxlQUFBOXVCLE1BQUFvM0MsRUFBQW9vRCxnQkFBQTV0RyxTQUFBLEdBQUFxYSxPQUFBLGdCQVdYLFNBQUEsRUFQRjRyRixJQUFBLEdBQUE1a0IsR0FNSXdzQixHQU5XLEtBQUFDLEdBQUF0b0QsRUFBQXVuRCxhQUFBLENBQUFwbkUsRUFBQW5ULEtBQWZ5ekUsS0FBQTVrQixHQU1JLE1BTkp5WSxHQU1JLENBTEpwbEMsR0FJSWdzQixFQUFBLENBSEh6RyxnQkFBQXowQixFQUFBeW5ELG1CQUFBejZFLEdBQUEsMkJBQUFtdUQsR0FBQW43QixFQUFBeW5ELG1CQUFBejZFLEdBQUFtdUQsRUFDR3J4RSxRQUFRazJDLEVBQVd1bkQsWUFBQ3Y2RSxHQUNyQm91RCxnQkFBZTE2QixFQUFNOC9DLDRHQUk1QjlsQixHQUdBNlosUUFTcUJtTSxFQUFBLHdCQUhwQjkzRixNQUFPbzNDLEVBQVlvZ0QsYUFDbkJoNEYsS0FBTTQzQyxFQUFXcWdELFlBQ2pCTSxTQUFRamdELEVBQVUyOEIsbURBT0VrckIsRUFBQSx3QkFIcEIzL0YsTUFBT28zQyxFQUFnQmlvRCxpQkFDdkI3L0YsS0FBTTQzQyxFQUFla29ELGdCQUNyQk0sYUFBWTluRCxFQUFVbW5ELHVEQVVYWSxFQUFBLENBUEQxc0QsSUFBSSxjQUNkMnNELGNBQWUxb0QsRUFBQW1vRCxvQkFDZmxDLGdCQUFVam1ELEVBQUFpbUQsZ0JBQ1YvRyxVQUFBai9DLEVBQUFpL0MsVUFDRi9qRyxJQUFBNmtELEVBQUF1L0MsUUFDRWo0RSxXQUFZMjRCLEVBQUszNEIsV0FDakJ3OUUsT0FBUTdrRCxFQUFNNmtELGdHQUlyQnRxQixTQUFBRyxJQUNESCxHQUFBLFNBQUE0YSxHQUFBLENBQUFaLEdBQUFLLEdBQUEsT0FBQTcwQyxFQUFBcHBCLEtBQUEsNkJBQUEsMk1DU0wsTUFBTW93RSxHQUFzQixzQkFFYixJQUFBMkIsR0FBQSxDQUNiaG1ELFdBQVksQ0FDVixjQUFldWtELEdBQ2YsdUJBQXdCbEksR0FDeEIsMkJBQTRCbUksR0FDNUIsZ0JBQWlCdHhCLElBRW5CbG1DLE1BQU8sQ0FDTHV2RCxVQUFXcmtHLE9BQ1g0bEYsS0FBTXA5RCxPQUNOaUUsV0FBWWpjLE9BQ1p5NUYsT0FBUWpxRyxPQUNSbW1HLFNBQVU5bkQsUUFDVmt1RCxnQkFBaUIvN0YsUUFLbkIyMkMsV0FnSUYsU0FBK0JxbEQsR0FFN0IsSUFBSyxNQUFNQyxLQUFlRCxFQUFjcG5ELE9BQU9tbkQsZ0JBQWlCLENBQzlEQyxFQUFjRSxZQUFZeGtHLEtBQUtza0csRUFBY3BuRCxPQUFPbW5ELGdCQUFnQkUsSUFDcEUsTUFBTUUsRUFBZ0J0a0YsbUJBQW1CQyxjQUFjbWtGLEdBRXZELElBQUksSUFBS25uRSxFQUFHcmlDLEtBQVV1TixPQUFPQyxRQUFRKzdGLEVBQWNwbkQsT0FBT21uRCxnQkFBZ0JFLElBQ3hFeHBHLEVBQW1CLFlBQUl3cEcsRUFDcEJFLEVBRUUxcEcsRUFBTXNHLElBQU1vakcsR0FDYkgsRUFBY0ksbUJBQW1CMWtHLEtBQUtqRixHQUdYLEdBQTFCQSxFQUFNcWhDLGtCQUNQa29FLEVBQWNJLG1CQUFtQjFrRyxLQUFLakYsRUFHOUMsQ0FFQXVwRyxFQUFjOUgsUUFBVyxHQUFFNWlHLHlEQUMzQjBxRyxFQUFjSyxhQUFleHJHLFVBQVV5N0YsU0FBUzBQLEVBQWM5SCxRQUFTOEgsRUFBY3VCLG9CQUNyRnZCLEVBQWNwQixnQkFBa0IsRUFDbEMsQ0F0SkkwQixDQUFzQjl1RyxLQUN2QixFQUNEd2xELFVBQ0V4bEQsS0FBSyt2RyxtQkFBcUIvdkcsS0FBS29uRCxPQUFPMzRCLFdBRXRDLElBQUloYyxFQUFVNFgsbUJBQW1CNEQsa0JBQ2pDLElBQUksTUFBTzNhLEVBQUtyTyxLQUFVd04sRUFDeEJ6UyxLQUFLK3ZHLG1CQUFtQno4RixHQUFPck8sRUFHakMsTUFBTThwRyxFQUFzQi91RyxLQUFLd3NHLGtCQUMzQndDLEVBQWFodkcsS0FBS2d2RyxXQUN4Qmh2RyxLQUFLaXZHLHdCQUNGanZHLEtBQUtvbkQsT0FBTzM0QixXQUFXOWhCLE1BQXVDLElBQS9CM00sS0FBS29uRCxPQUFPMzRCLFdBQVc5aEIsTUFDdkQzTSxLQUFLb25HLGlCQUdQaDNFLEVBQXNCUyxnQkFBZ0IsdUJBQXdCNEQscUJBQXFCSyxtQkFBb0IyTCxJQUNyR3pnQyxLQUFLb25HLGdCQUFnQixJQUd2QmgzRSxFQUFzQlMsZ0JBQWdCLHNCQUF1QnM5RSxJQUFzQjkyRixJQUNsRnJYLEtBQUs0dUcsbUJBQW1CdjNGLEVBQU85TCxJQUFNOEwsRUFDcENnVCxtQkFBbUJNLGVBQWV0VCxFQUFPbzNGLFlBQWFwM0YsRUFBTy9ELEtBQzdEdFQsS0FBS3l1QixXQUFXcFgsRUFBT28zRixhQUFlcDNGLEVBQU8vRCxJQUM3Q3RULEtBQUtpdkcsdUJBQXVCLElBRzlCNytFLEVBQXNCUyxnQkFBZ0I3d0IsS0FBS2t2RyxVQUFXejZFLHFCQUFxQkksaUJBQWtCeGQsSUFDeEYwM0YsSUFDRHR0RyxFQUFHLHdCQUF1QnNELFdBQVcsVUFFckN0RCxFQUFHLHdCQUF1QnFELEtBQUssU0FBVSxTQUMzQyxJQUdGckQsRUFBRyxpQkFBZ0IwSixPQUFNLFNBQVNDLEdBQ2hDNGpHLEdBQ0YsSUFFQTE5RixZQUFXLElBQU1qTyxVQUFVZzdGLGdCQUFnQixHQUUzQzU4RixFQUFFLG1CQUFtQjBKLE9BQU0sSUFBTW5MLEtBQUtzbkcsMkJBQ3RDN2xHLEVBQUUsZUFBZTBKLE9BQU0sSUFBTW5MLEtBQUttdkcsMEJBQ25DLEVBQ0Q3cUcsS0FBSSxLQUNLLENBQ0x5NUIsS0FBT2pwQixHQUFNaXBCLEtBQUtqcEIsR0FDbEIycEIsVUFBVyxLQUNYNHRFLHFCQUFzQixLQUN0QjNGLFFBQVMsS0FDVG1JLGFBQWMsS0FDZGtCLG1CQUFvQixDQUFFLEVBQ3RCckIsWUFBYSxHQUNiRSxtQkFBb0IsR0FDcEJ4QixnQkFBaUIsQ0FBRSxFQUNuQjdGLGFBQWN4cEUsS0FBSyw0QkFDbkJ5cEUsWUFBYXpwRSxLQUFLLG9DQUNsQnF4RSxpQkFBa0JyeEUsS0FBSyxnQ0FDdkJzeEUsZ0JBQWlCdHhFLEtBQUssd0NBQ3RCdXhFLG9CQUFxQnZ4RSxLQUFLLHdCQUMxQnd4RSxnQkFBaUJ4eEUsS0FBSyx5QkFHMUJpckIsUUFBUyxDQUNQenhCLFFBQVMsV0FDR3YzQixLQUFLa3ZHLFVBQ1gzM0UsU0FDTCxFQUVEb3dFLFdBQVksU0FBU3R3RixHQUNuQitZLEVBQXNCUSxrQkFBa0J1OUUsR0FBcUI5MkYsRUFDOUQsRUFDRDYzRixRQUFTLFdBQ1AsT0FBT2x2RyxLQUFLdW5ELE1BQXVCLGVBQ3BDLEVBQ0RpbEQsa0JBQW1CLFdBRWpCLE9BRFV4c0csS0FBS2t2RyxVQUNKcEIsc0JBQ1osRUFDRGtCLFdBQVl6eEYsaUJBQ1ZsYSxVQUFVODZGLGVBQ1YsSUFBSXo1RixFQUFNMUUsS0FBS2t2RyxnQkFDVHhxRyxFQUFJMnBCLFNBQ1ZockIsVUFBVWc3RixjQUNYLEVBQ0QrSSxlQUFnQixXQUNkM2xHLEVBQUcscUJBQW9CcUQsS0FBSyxTQUFVLFVBQ3RDckQsRUFBRyxxQkFBb0JxRCxLQUFLLFNBQVUsU0FDdkMsRUFDRG1xRyxzQkFBdUIxeEYsaUJBQ3JCLElBQUk3WSxFQUFNMUUsS0FBS2t2RyxVQUNmN3JHLFVBQVU4NkYsZUFDVno1RixFQUFJdXBHLGtCQUFrQmp1RyxLQUFLK3ZHLDBCQUNyQnJyRyxFQUFJMnBCLFNBQ1ZockIsVUFBVWc3RixjQUNYLEVBQ0QwUCxXQUFZLFdBQ0EvdEcsS0FBS2t2RyxVQUNYbkIsWUFDTCxFQUNEekcsdUJBQXdCLFdBQ3RCdG5HLEtBQUt1bkQsTUFBd0IsaUJBQUV2NUMsTUFDaEMsRUFDRG1oRyx1QkFBd0IsV0FDdEJudkcsS0FBS3VuRCxNQUF3QixpQkFBRXY1QyxNQUNoQyxFQUNEdzJFLFdBQVlqbkUsaUJBQ1YsSUFBSWpiLEVBQU8sR0FBRXdCLGtEQUNUK0csRUFBUyxDQUNYKzhFLEtBQU01bkYsS0FBSyt2RyxtQkFBbUJub0IsS0FDOUIvMUUsT0FBUSxRQUNSQyxLQUFNOVIsS0FBS29uRCxPQUFPaS9DLFVBQ2xCM2hHLElBQUsxRSxLQUFLK3ZHLG1CQUFtQnJyRyxLQUUvQixJQUNFLElBQUl5bkIsRUFBVSxDQUNaLGVBQWdCLDBCQUVaeEMsZUFBZXlDLGFBQWE5cEIsRUFBSyxDQUFFdWQsT0FBUSxPQUFRc00sVUFBUzVjLEtBQU1WLEtBQUs2RSxVQUFVN0ksSUFHekYsQ0FGVSxRQUNSN0ssS0FBS2d2RyxZQUNQLENBQ0Ysb0JDak5PLGlCQUNFLGlDQUNFLGlDQUNKbndFLE1BQUUsbUZBQUEsQ0FDTDhpRCxHQUlNLE1BQUEsQ0FKSDlpRCxNQUFBLGVBQUEsQ0FDRjhpRCxHQUVPLE1BQUEsQ0FGRDlpRCxNQUFNLG1DQUFPaUUsS0FBQSxXQUNoQjYrQyxHQUFzQixPQUFoQixDQUFBOWlELE1BQU0sNkJBQVUsdUJBSXRCNmlELEdBQUEsQ0FBQTdpRCxNQUFLLGFBQ0wyakQsR0FBQSxDQUFBajNFLEdBQUcscUJBQ0FrM0UsR0FBQSxDQUFBNWpELE1BQU0sMEVBRStDLElBQUEsT0FBN0MsZ0RBQTZDLE1BQUEsY0FFN0Msa0JBQ0o0OEQsR0FBQSxDQUFBNThELE1BQU0sVUFRYjhpRCxhQUFRajhFLEtBQUEsU0FBQTZGLEdBQUEsZUFBQXN6QixNQUFBLGtDQUNOOGlELEdBQUMsSUFBQSxDQUFBOWlELE1BQUEsd0JBRUg4aUQsR0FFUyxTQUFBLENBRkRqOEUsS0FBSyxTQUFTNkYsR0FBRyxhQUFhc3pCLE1BQUcsK0JBQ3ZDOGlELEdBQWtCLElBQUEsQ0FBZjlpRCxNQUFNLHNCQTBCaEJpakQsR0FBQSxDQUFBampELE1BQUEsbUJBQ0ZuNUIsS0FBQSxTQUFBNkYsR0FBQSxpQkFBQXN6QixNQUFBLDBCQUFBOGlELEdBQUEsSUFBQSxDQUFBOWlELE1BQUEsZ0JBQUEsTUFBQSxrUUE5Q084aUQsR0E0Q0gsTUE1Q0dELEdBNENILElBREUsU0FBQSxDQXpDR0MsR0FtQkUsTUFuQkZjLEdBbUJFLElBaEJLLFNBQUEsQ0FGRGwzRSxHQUFHLHNCQUFNN0YsS0FBQSxTQUFBbTVCLE1BQUEsZUFBQTl1QixNQUFBbzNDLEVBQUFvb0QsZ0JBQUE1dEcsU0FBQSxHQUFBcWEsT0FBQSxnQkFXWCxTQUFBLEVBUEY0ckYsSUFBQSxHQUFBNWtCLEdBTUl3c0IsR0FOVyxLQUFBQyxHQUFBdG9ELEVBQUF1bkQsYUFBQSxDQUFBcG5FLEVBQUFuVCxLQUFmeXpFLEtBQUE1a0IsR0FNSSxNQU5KeVksR0FNSSxDQUxKcGxDLEdBSUlnc0IsRUFBQSxDQUhIekcsZ0JBQUF6MEIsRUFBQXluRCxtQkFBQXo2RSxHQUFBLDJCQUFBbXVELEdBQUFuN0IsRUFBQXluRCxtQkFBQXo2RSxHQUFBbXVELEVBQ0dyeEUsUUFBUWsyQyxFQUFXdW5ELFlBQUN2NkUsR0FDckJvdUQsZ0JBQWUxNkIsRUFBTTgvQyw0R0FJNUI5bEIsR0FHQTZaLFFBU3FCbU0sRUFBQSx3QkFIcEI5M0YsTUFBT28zQyxFQUFZb2dELGFBQ25CaDRGLEtBQU00M0MsRUFBV3FnRCxZQUNqQk0sU0FBUWpnRCxFQUFVMjhCLG1EQU9Fa3JCLEVBQUEsd0JBSHBCMy9GLE1BQU9vM0MsRUFBZ0Jpb0QsaUJBQ3ZCNy9GLEtBQU00M0MsRUFBZWtvRCxnQkFDckJNLGFBQVk5bkQsRUFBVW1uRCx1REFVWFksRUFBQSxDQVBEMXNELElBQUksa0JBQ2Qyc0QsY0FBZTFvRCxFQUFBbW9ELG9CQUNmbEMsZ0JBQVVqbUQsRUFBQWltRCxnQkFDVi9HLFVBQUFqL0MsRUFBQWkvQyxVQUNGL2pHLElBQUE2a0QsRUFBQXUvQyxRQUNFajRFLFdBQVkyNEIsRUFBSzM0QixXQUNqQnc5RSxPQUFRN2tELEVBQU02a0QsZ0dBSXJCdHFCLFNBQUFHLElBQ0RILEdBQUEsU0FBQTRhLEdBQUEsQ0FBQVosR0FBQUssR0FBQSxPQUFBNzBDLEVBQUFwcEIsS0FBQSw2QkFBQSxtTkNTTCxNQUFNb3dFLEdBQXNCLHNCQUViLElBQUE2QixHQUFBLENBQ2JsbUQsV0FBWSxDQUNWLGNBQWV1a0QsR0FDZix1QkFBd0JsSSxHQUN4QiwyQkFBNEJtSSxHQUM1QixnQkFBaUJ0eEIsSUFFbkJsbUMsTUFBTyxDQUNMdXZELFVBQVdya0csT0FDWDRsRixLQUFNcDlELE9BQ05pRSxXQUFZamMsT0FDWnk1RixPQUFRanFHLE9BQ1JtbUcsU0FBVTluRCxRQUNWa3VELGdCQUFpQi83RixRQUtuQjIyQyxXQStIRixTQUErQnFsRCxHQUU3QixJQUFLLE1BQU1DLEtBQWVELEVBQWNwbkQsT0FBT21uRCxnQkFBaUIsQ0FDOURDLEVBQWNFLFlBQVl4a0csS0FBS3NrRyxFQUFjcG5ELE9BQU9tbkQsZ0JBQWdCRSxJQUNwRSxNQUFNRSxFQUFnQnRrRixFQUFtQkMsY0FBY21rRixHQUV2RCxJQUFJLElBQUtubkUsRUFBR3JpQyxLQUFVdU4sT0FBT0MsUUFBUSs3RixFQUFjcG5ELE9BQU9tbkQsZ0JBQWdCRSxJQUN4RXhwRyxFQUFtQixZQUFJd3BHLEVBQ3BCRSxFQUVFMXBHLEVBQU1zRyxJQUFNb2pHLEdBQ2JILEVBQWNJLG1CQUFtQjFrRyxLQUFLakYsR0FHWCxHQUExQkEsRUFBTXFoQyxrQkFDUGtvRSxFQUFjSSxtQkFBbUIxa0csS0FBS2pGLEVBRzlDLENBRUF1cEcsRUFBYzlILFFBQVcsR0FBRTVpRyx5REFDM0IwcUcsRUFBY0ssYUFBZXhyRyxVQUFVeTdGLFNBQVMwUCxFQUFjOUgsUUFBUzhILEVBQWNwbkQsT0FBTzM0QixZQUM1RisvRSxFQUFjcEIsZ0JBQWtCLEVBQ2xDLENBckpJMEIsQ0FBc0I5dUcsS0FDdkIsRUFDRHdsRCxVQUNFLE1BQU11cEQsRUFBc0IvdUcsS0FBS3dzRyxrQkFDM0J3QyxFQUFhaHZHLEtBQUtndkcsV0FDckJodkcsS0FBS29uRCxPQUFPMzRCLFdBQVc5aEIsTUFBdUMsSUFBL0IzTSxLQUFLb25ELE9BQU8zNEIsV0FBVzloQixNQUN2RDNNLEtBQUtvbkcsaUJBR1BoM0UsRUFBc0JTLGdCQUFnQixtQkFBb0I0RCxxQkFBcUJLLG1CQUFvQjJMLElBQ2pHemdDLEtBQUtvbkcsZ0JBQWdCLElBR3ZCaDNFLEVBQXNCUyxnQkFBZ0Isc0JBQXVCczlFLElBQXNCOTJGLElBQ2xGclgsS0FBSzR1RyxtQkFBbUJ2M0YsRUFBTzlMLElBQU04TCxFQUNwQ2dULEVBQW1CTSxlQUFldFQsRUFBT28zRixZQUFhcDNGLEVBQU8vRCxLQUM3RHRULEtBQUt5dUIsV0FBV3BYLEVBQU9vM0YsYUFBZXAzRixFQUFPL0QsSUFDN0N0VCxLQUFLaXZHLHVCQUF1QixJQUc5QjcrRSxFQUFzQlMsZ0JBQWdCN3dCLEtBQUtrdkcsVUFBV3o2RSxxQkFBcUJJLGlCQUFrQnhkLElBQ3hGMDNGLElBQ0R0dEcsRUFBRyx3QkFBdUJzRCxXQUFXLFVBRXJDdEQsRUFBRyx3QkFBdUJxRCxLQUFLLFNBQVUsU0FDM0MsSUFJRixJQUFJMk4sRUFBVTRYLEVBQW1CNEQsa0JBQ2pDLElBQUksTUFBTzNhLEVBQUtyTyxLQUFVd04sRUFDeEJ6UyxLQUFLeXVCLFdBQVduYixHQUFPck8sRUFHekJ4RCxFQUFHLGlCQUFnQjBKLE9BQU0sU0FBU0MsR0FDaEM0akcsR0FDRixJQUVBM3JHLFVBQVVnN0YsZUFFVjU4RixFQUFFLG1CQUFtQjBKLE9BQU0sSUFBTW5MLEtBQUtzbkcsMkJBQ3RDN2xHLEVBQUUsZUFBZTBKLE9BQU0sSUFBTW5MLEtBQUttdkcsMEJBQ25DLEVBQ0Q3cUcsS0FBSSxLQUNLLENBQ0x5NUIsS0FBT2pwQixHQUFNaXBCLEtBQUtqcEIsR0FDbEIycEIsVUFBVyxLQUNYNHRFLHFCQUFzQixLQUN0QjNGLFFBQVMsS0FDVG1JLGFBQWMsS0FDZEgsWUFBYSxHQUNiRSxtQkFBb0IsR0FDcEJ4QixnQkFBaUIsQ0FBRSxFQUNuQjdGLGFBQWN4cEUsS0FBSyw0QkFDbkJ5cEUsWUFBYXpwRSxLQUFLLG9DQUNsQnF4RSxpQkFBa0JyeEUsS0FBSyxnQ0FDdkJzeEUsZ0JBQWlCdHhFLEtBQUssd0NBQ3RCdXhFLG9CQUFxQnZ4RSxLQUFLLHdCQUMxQnd4RSxnQkFBaUJ4eEUsS0FBSyx5QkFHMUJpckIsUUFBUyxDQUNQenhCLFFBQVMsV0FDR3YzQixLQUFLa3ZHLFVBQ1gzM0UsU0FDTCxFQUVEb3dFLFdBQVksU0FBU3R3RixHQUNuQitZLEVBQXNCUSxrQkFBa0J1OUUsR0FBcUI5MkYsRUFDOUQsRUFDRDYzRixRQUFTLFdBQ1AsT0FBT2x2RyxLQUFLdW5ELE1BQWlCLFNBQzlCLEVBQ0Q2L0MsZUFBZ0IsV0FDZDNsRyxFQUFHLHFCQUFvQnFELEtBQUssU0FBVSxVQUN0Q3JELEVBQUcscUJBQW9CcUQsS0FBSyxTQUFVLFNBQ3ZDLEVBQ0Qwbkcsa0JBQW1CLFdBRWpCLE9BRFV4c0csS0FBS2t2RyxVQUNKcEIsc0JBQ1osRUFDRGtCLFdBQVl6eEYsaUJBQ1ZsYSxVQUFVODZGLGVBQ1YsSUFBSXo1RixFQUFNMUUsS0FBS2t2RyxnQkFDVHhxRyxFQUFJMnBCLFNBQ1ZockIsVUFBVWc3RixjQUNYLEVBQ0Q0USxzQkFBdUIxeEYsaUJBQ3JCLElBQUk3WSxFQUFNMUUsS0FBS2t2RyxVQUNmN3JHLFVBQVU4NkYsZUFDVno1RixFQUFJdXBHLGtCQUFrQmp1RyxLQUFLeXVCLGtCQUNyQi9wQixFQUFJMnBCLFNBQ1ZockIsVUFBVWc3RixjQUNYLEVBQ0QwUCxXQUFZLFdBQ0EvdEcsS0FBS2t2RyxVQUNYbkIsWUFDTCxFQUNEekcsdUJBQXdCLFdBQ3RCdG5HLEtBQUt1bkQsTUFBd0IsaUJBQUV2NUMsTUFDaEMsRUFDRG1oRyx1QkFBd0IsV0FDdEJudkcsS0FBS3VuRCxNQUF3QixpQkFBRXY1QyxNQUNoQyxFQUNEdzJFLFdBQVlqbkUsaUJBQ1YsSUFBSWpiLEVBQU8sR0FBRXdCLGtEQUNUK0csRUFBUyxDQUNYKzhFLEtBQU01bkYsS0FBS3l1QixXQUFXbTVELEtBQ3RCLzFFLE9BQVEsUUFDUkMsS0FBTTlSLEtBQUtvbkQsT0FBT2kvQyxVQUNsQjNoRyxJQUFLMUUsS0FBS3l1QixXQUFXL3BCLEtBRXZCLElBQ0UsSUFBSXluQixFQUFVLENBQ1osZUFBZ0IsMEJBRVp4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE9BQVFzTSxVQUFTNWMsS0FBTVYsS0FBSzZFLFVBQVU3SSxJQUt6RixDQUpVLFFBQ1J4SCxVQUFVODZGLGVBQ1ZuK0YsS0FBS2d2RyxhQUNMM3JHLFVBQVVnN0YsY0FDWixDQUNGLG9CQ2hOTyxpQkFDRSxpQ0FDRSxpQ0FDSngvRCxNQUFFLG1GQUFBLENBQ0w4aUQsR0FJTSxNQUFBLENBSkg5aUQsTUFBQSxlQUFBLENBQ0Y4aUQsR0FFTyxNQUFBLENBRkQ5aUQsTUFBTSxtQ0FBT2lFLEtBQUEsV0FDaEI2K0MsR0FBZ0IsT0FBVixDQUFBOWlELE1BQU0sNkJBQUksdUJBSWhCNmlELEdBQUEsQ0FBQTdpRCxNQUFLLGFBQ0wyakQsR0FBQSxDQUFBajNFLEdBQUcsZUFDQWszRSxHQUFBLENBQUE1akQsTUFBTSwwRUFFK0MsSUFBQSxPQUE3QyxnREFBNkMsTUFBQSxjQUU3QyxrQkFDSjQ4RCxHQUFBLENBQUE1OEQsTUFBTSxVQVFiOGlELGFBQVFqOEUsS0FBQSxTQUFBNkYsR0FBQSxlQUFBc3pCLE1BQUEsa0NBQ044aUQsR0FBQyxJQUFBLENBQUE5aUQsTUFBQSx3QkFFSDhpRCxHQUVTLFNBQUEsQ0FGRGo4RSxLQUFLLFNBQVM2RixHQUFHLGFBQWFzekIsTUFBRywrQkFDdkM4aUQsR0FBa0IsSUFBQSxDQUFmOWlELE1BQU0sc0JBMEJoQmlqRCxHQUFBLENBQUFqakQsTUFBQSxtQkFDRm41QixLQUFBLFNBQUE2RixHQUFBLGlCQUFBc3pCLE1BQUEsMEJBQUE4aUQsR0FBQSxJQUFBLENBQUE5aUQsTUFBQSxnQkFBQSxNQUFBLGtRQTlDTzhpRCxHQTRDSCxNQTVDR0QsR0E0Q0gsSUFERSxTQUFBLENBekNHQyxHQW1CRSxNQW5CRmMsR0FtQkUsSUFoQkssU0FBQSxDQUZEbDNFLEdBQUcsc0JBQU03RixLQUFBLFNBQUFtNUIsTUFBQSxlQUFBOXVCLE1BQUFvM0MsRUFBQW9vRCxnQkFBQTV0RyxTQUFBLEdBQUFxYSxPQUFBLGdCQVdYLFNBQUEsRUFQRjRyRixJQUFBLEdBQUE1a0IsR0FNSXdzQixHQU5XLEtBQUFDLEdBQUF0b0QsRUFBQXVuRCxhQUFBLENBQUFwbkUsRUFBQW5ULEtBQWZ5ekUsS0FBQTVrQixHQU1JLE1BTkp5WSxHQU1JLENBTEpwbEMsR0FJSWdzQixFQUFBLENBSEh6RyxnQkFBQXowQixFQUFBeW5ELG1CQUFBejZFLEdBQUEsMkJBQUFtdUQsR0FBQW43QixFQUFBeW5ELG1CQUFBejZFLEdBQUFtdUQsRUFDR3J4RSxRQUFRazJDLEVBQVd1bkQsWUFBQ3Y2RSxHQUNyQm91RCxnQkFBZTE2QixFQUFNOC9DLDRHQUk1QjlsQixHQUdBNlosUUFTcUJtTSxFQUFBLHdCQUhwQjkzRixNQUFPbzNDLEVBQVlvZ0QsYUFDbkJoNEYsS0FBTTQzQyxFQUFXcWdELFlBQ2pCTSxTQUFRamdELEVBQVUyOEIsbURBT0VrckIsRUFBQSx3QkFIcEIzL0YsTUFBT28zQyxFQUFnQmlvRCxpQkFDdkI3L0YsS0FBTTQzQyxFQUFla29ELGdCQUNyQk0sYUFBWTluRCxFQUFVbW5ELHVEQVVYWSxFQUFBLENBUEQxc0QsSUFBSSxZQUNkMnNELGNBQWUxb0QsRUFBQW1vRCxvQkFDZmxDLGdCQUFVam1ELEVBQUFpbUQsZ0JBQ1YvRyxVQUFBai9DLEVBQUFpL0MsVUFDRi9qRyxJQUFBNmtELEVBQUF1L0MsUUFDRWo0RSxXQUFZMjRCLEVBQUszNEIsV0FDakJ3OUUsT0FBUTdrRCxFQUFNNmtELGdHQUlyQnRxQixTQUFBRyxJQUNESCxHQUFBLFNBQUE0YSxHQUFBLENBQUFaLEdBQUFLLEdBQUEsT0FBQTcwQyxFQUFBcHBCLEtBQUEsNkJBQUEsdU1DaEJMLElBQUFreUUsR0FBZTF0QyxHQUFnQixDQUMzQnpZLFdBQVksQ0FDWCxFQUNEaFQsTUFBTyxDQUNWdnJDLEdBQUl2SixPQUNKa3VHLFdBQVkxOUYsT0FDWDI5RixxQkFBc0JybUYsTUFDdkJzbUYsVUFBV3B1RyxPQUNYcXVHLFlBQWF2bUYsT0FFVnV2QixNQUFPLENBQUMsY0FFUjhQLFVBQ0csRUFDSDdrRCxLQUFJLEtBQ0EsSUFLSmtoRCxVQUNIdjhCLFlBQVlHLE1BQU1wcEIsS0FBS29uRCxPQUFXLEdBQzlCLEVBQ0Q0QixRQUFTLENBQ1QsSUMxRUMsTUFBQXM0QixHQUFBLENBQUF6aUQsTUFBTSw2RUFDSEEsTUFBTSxtQkFBbUJ2cUIsTUFBQSxDQUEwQixZQUFBLDZFQVN6RG11RSxHQUFBZCxHQUFrRSxPQUE1RCxDQUFBOWlELE1BQU0sZ0RBQStDLEtBQUMsTUFDNUQ4aUQsR0FFUSxTQUFBLENBRkE5aUQsTUFBTSxpQkFBaUJuNUIsS0FBSyxXQUNsQ2k4RSxHQUF3QyxPQUFBLENBQWxDOWlELE1BQU0saUNBRVRBLE1BQU0sb0NBQW9DdHpCLEdBQUcsYUFDNUNpd0YsR0FBQSxDQUFBMzhELE1BQU0sdUNBSXVCQSxNQUFNLDZCQUE2QnZxQixNQUFBLENBQXdDZzhGLE1BQUEsUUFBQSxnQkFBQSxtQ0FRM0V6eEUsTUFBTSw2QkFBNkJ2cUIsTUFBQSxDQUF3Q2c4RixNQUFBLFFBQUEsZ0JBQUEsVUFTdEd4dUIsR0FBQSxDQUFBampELE1BQU0seUJBQ1I4aUQsR0FFSixJQUFBLENBRk85dUUsS0FBSyw0QkFBNEJnc0IsTUFBTSxpQ0FDeEM4aUQsR0FBZ0MsSUFBQSxDQUE3QjlpRCxNQUFNLDJDQUdUOGlELEdBQXFDLElBQUEsQ0FBbEM5aUQsTUFBTSwwQkFBd0IsTUFBQSxvQ0F6QzNDLE9BQUErb0UsS0FBQTVrQixHQTZDTyxNQTdDUDFCLEdBNkNPLENBNUNMSyxHQVFNLE9BUk5KLEdBUU0sQ0FQSkksR0FBK0IsSUFBQSxDQUEzQjlpRCxNQUFLazlELEVBQUU5d0MsRUFBVWlsRCxXQUFDbnhFLGVBQ2Jrc0IsRUFBQWlsRCxXQUFXcjlGLFdBQXBCbXdFLEdBQW9HLElBQUEsT0FBekVud0UsS0FBTW80QyxFQUFVaWxELFdBQUNyOUYsS0FBTzlDLE1BQU9rN0MsRUFBVWlsRCxXQUFDbmdHLE9BQVVvc0YsR0FBQWx4QyxFQUFBaWxELFdBQVdoN0YsT0FBSyxFQUFBc3NFLFdBQy9Gd0IsR0FBa0UsT0FBQSxPQUFwRGp6RSxNQUFPazdDLEVBQVVpbEQsV0FBQ25nRyxPQUFVb3NGLEdBQUFseEMsRUFBQWlsRCxXQUFXaDdGLE9BQUssRUFBQXVzRSxhQUMxRHVCLEdBR1V3c0IsR0FBQSxLQUFBQyxHQUhleGtELEVBQW9Ca2xELHNCQUE1Qmw4Rix3QkFBK0IsT0FDckNBLEVBQUtwQixXQUFkbXdFLEdBQTJFLElBQUEsT0FBdERud0UsS0FBTW9CLEVBQUtwQixLQUFPOUMsTUFBT2tFLEVBQUtsRSxPQUFTb3NGLEdBQUFsb0YsRUFBS2lCLE9BQUssRUFBQXdzRSxXQUN0RXNCLEdBQXFELE9BQUEsT0FBdkNqekUsTUFBT2tFLEVBQUtsRSxPQUFTb3NGLEdBQUFsb0YsRUFBS2lCLE9BQUssRUFBQXN0RSxxQkFHakRDLEdBQ0FFLEdBR0FoQixHQThCTyxNQTlCUGlCLEdBOEJPLENBN0JMakIsR0FvQk0sS0FwQk42WixHQW9CTSxTQW5CSnhZLEdBa0JVd3NCLEdBQUEsS0FBQUMsR0FsQmV4a0QsRUFBV29sRCxhQUFuQnA4RixxQkFDTkEsRUFBS281QixhQUNuQjIxQyxHQUtJLEtBQUEsT0FMRTNsRCxRQUFLaWxELEdBQUF0aUYsS0FBTzRuRCxNQUFLLGFBQWUzekMsR0FBUTRxQixNQUFtQms5RCxFQUFBLENBQUEsQ0FBQTF1RCxPQUFBcDVCLEVBQUtvNUIsUUFBZ0Isd0JBQ3hFcDVCLEVBQUtzOEYsVUFBVSxHQUEzQjNJLEtBQUE1a0IsR0FBc0ksT0FBdEl5WSxHQUErR1UsR0FBQWxvRixFQUFLczhGLFdBQVUsa0JBQzlINXVCLEdBRUcsSUFBQSxLQUFBLENBRkFBLEdBQXlCLElBQUEsQ0FBckI5aUQsTUFBS2s5RCxFQUFFOW5GLEVBQUs4cUIsa0JBQVMsSUFDMUJvOUQsR0FBRWxvRixFQUFLaUIsT0FBSyxvQkFLaEI4dEUsR0FJRyxJQUFBLE9BSkMzbEQsUUFBS2lsRCxHQUFBdGlGLEtBQU80bkQsTUFBSyxhQUFlM3pDLEdBQU9wQixLQUFLLElBQUlnc0IsTUFBTSxzQkFDNUM1cUIsRUFBS3M4RixVQUFVLEdBQTNCM0ksS0FBQTVrQixHQUFzSSxPQUF0STBZLEdBQStHUyxHQUFBbG9GLEVBQUtzOEYsV0FBVSxrQkFDOUg1dUIsR0FBeUIsSUFBQSxDQUFyQjlpRCxNQUFLazlELEVBQUU5bkYsRUFBSzhxQixrQkFBUyxJQUN2Qm85RCxHQUFFbG9GLEVBQUtpQixPQUFLLDJCQU9ieXNFLEdBT0ksS0FQSkcsR0FPSSxDQU5GeWEsR0FHQTVhLEdBRUcsSUFBQSxDQUZBbjJFLE9BQU8sVUFBV3FILEtBQU1vNEMsRUFBU21sRCxVQUFFdnhFLE1BQU0sb2hCQ1JwRCxNQUFNMnhFLEVBQWlCdHRELEdBQUksSUFDckJ1dEQsRUFBdUJ2dEQsR0FBSSxJQUUzQmlnQyxFQUFXamdDLEdBQUksTUFpQmZ3dEQsRUFBTyxLQUNUamdGLEVBQUssTUFBTyxDQUFFa2dGLFNBQVVILEVBQWV2ckcsTUFBTzJyRyxlQUFnQkgsRUFBcUJ4ckcsUUFDbkY4OUUsR0FBTyxFQUdMQSxFQUFRLEtBQ1ZJLEVBQVNsK0UsTUFBTTg5RSxPQUFPLEVBSTFCcndCLEVBQWEsQ0FBRTFrRCxLQWZGLEtBQ1R3aUcsRUFBZXZyRyxNQUFRLEdBQ3ZCaytFLEVBQVNsK0UsTUFBTStJLE1BQU0sRUFhSiswRSxVQUVyQnBoQixJQUFVLFNBR1YsTUFBTStpQixFQUFTNXZFLEdBQU1pcEIsS0FBS2pwQixnNUNDOUIxQixNQUFNKzdGLEVBQXlCM3RELEdBQUksSUFDN0I0dEQsRUFBc0I1dEQsR0FBSSxJQUMxQnV0RCxFQUF1QnZ0RCxHQUFJLElBRTNCaWdDLEVBQVdqZ0MsR0FBSSxNQWdCZjZ0RCxFQUFRLEtBQ1Z0Z0YsRUFBSyxPQUFRLENBQUV1Z0YsVUFBV0gsRUFBdUI1ckcsTUFBT2dzRyxXQUFZSCxFQUFvQjdyRyxNQUFPMnJHLGVBQWdCSCxFQUFxQnhyRyxRQUNwSTg5RSxHQUFPLEVBR0xBLEVBQVEsS0FDVkksRUFBU2wrRSxNQUFNODlFLE9BQU8sRUFJMUJyd0IsRUFBYSxDQUFFMWtELEtBakJEK1UsSUFDVit0RixFQUFvQjdyRyxNQUFROGQsRUFBSTNULE9BQ2hDeWhHLEVBQXVCNXJHLE1BQVE4ZCxFQUFJbXVGLGtCQUFrQmg4RixNQUNyRHU3RixFQUFxQnhyRyxNQUFROGQsRUFBSW91RixnQkFBaUIsRUFDbERodUIsRUFBU2wrRSxNQUFNK0ksTUFBTSxFQWFKKzBFLFVBRXJCcGhCLElBQVUsU0FHVixNQUFNK2lCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLG9vQ0NKWHM4RixHQUFBLENBQ1h0bkQsV0FBWSxDQUNSLGNBQWV1bkQsR0FDZnBMLFVBQWFDLEdBQ2IsdUJBQXdCQyxHQUN4Qiw2QkFBOEJtTCxHQUM5Qiw4QkFBK0JDLElBRW5DejZELE1BQU8sQ0FDVnV2RCxVQUFXcmtHLE9BQ1h3dkcsc0JBQXVCbnhELFNBS3BCOEksV0E4SUEsU0FBeUJxOUMsR0FDekIsTUFBTUMsRUFBa0IsR0FHeEJBLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0FDN0JvMUYsRUFBYWlMLHdCQUNmLElBR0FoTCxFQUFnQnY4RixLQUFLLENBQ3JCNkQsS0FBTSw4QkFDTnl3QixVQUFXLFdBQ1gzc0IsT0FBUSxTQUFVekcsRUFBR3FaLEVBQUlnYyxFQUFNcnZCLEdBQzdCbzFGLEVBQWFHLGNBQ2YsSUFHRixJQUFJRSxFQUF5QixDQUMzQnJJLGNBQWVpSSxFQUNmaEosZUFBZ0IsR0FDaEJFLFNBQVcsR0FBRTc1Rix1REFDYnk1RixlQUFlLEdBR2J3SixFQUFnQnA5RSxlQUFlTSxNQUFNNDhFLEdBQ3pDRSxFQUFjdkksY0FBZ0JxSSxFQUF1QnJJLGNBQ3JEdUksRUFBY3BKLFNBQVksR0FBRW9KLEVBQWNwSixXQUMxQ29KLEVBQWN0SixlQUFpQixDQUM3QixDQUNFaVUsVUFBVSxFQUNWQyxZQUFZLEVBQ1ozNUYsU0FBUyxFQUNUMVQsS0FBTSxjQUNOb0IsS0FBTSxjQUNOMGdGLG1CQUFvQixHQUNuQixDQUNEVCxXQUFZNW5ELEtBQUssOEJBQ2pCejVCLEtBQU0sb0JBQ05vQixLQUFNLGNBQ044NEIsVUFBVyxjQUNYa3pFLFVBQVUsRUFDVkMsWUFBWSxFQUNaekcsWUFBYXJwRSxpQkFBaUJzcEUsZUFDOUIva0IsbUJBQW9CLEVBQ3BCOXBELE9BQVEsU0FBU3NJLEVBQVNsL0IsRUFBTWtzRyxHQUM5QixJQUFJMThGLEVBQVEwdkIsRUFBUTF2QixNQU9wQixPQU5HMHZCLEVBQVExdkIsUUFBVTB2QixFQUFRNS9CLE1BQzNCa1EsRUFBUUEsRUFBUSxLQUFPMHZCLEVBQVE1L0IsSUFBTSxLQUVwQzQvQixFQUFRdGlDLE1BQ1Q0UyxFQUFTLFlBQVcwdkIsRUFBUXRpQyxlQUFlc2lDLEVBQVE1L0IsUUFBUWtRLFNBRXREQSxDQUNULEdBQ0MsQ0FDRHl3RSxXQUFZNW5ELEtBQUssY0FDakJ6NUIsS0FBTSxhQUNOb0IsS0FBTSxPQUNOZ3NHLFVBQVUsRUFDVkMsWUFBWSxFQUNabnpFLFVBQVcsMEJBQ1g0bkQsbUJBQW9CLEVBQ3BCOXBELE9BQVEsU0FBU3NJLEVBQVNsL0IsRUFBTWtzRyxHQUM5QixPQUFPaHRFLEVBQVF0Z0MsSUFDakIsR0FDQyxDQUNEcWhGLFdBQVk1bkQsS0FBSyxhQUNqQno1QixLQUFNLFlBQ05vQixLQUFNLE9BQ05nc0csVUFBVSxFQUNWQyxZQUFZLEVBQ1puekUsVUFBVywwQkFDWDRuRCxtQkFBb0IsRUFDcEI5cEQsT0FBUSxTQUFTc0ksRUFBU2wvQixFQUFNa3NHLEdBQzlCLE9BQU9odEUsRUFBUXRnQyxJQUNqQixHQUNDLENBQ0RxaEYsV0FBWTVuRCxLQUFLLDRCQUNqQno1QixLQUFNLFNBQ05vQixLQUFNLFNBQ05nc0csVUFBVSxFQUNWQyxZQUFZLEVBQ1puekUsVUFBVywwQkFDWDRuRCxtQkFBb0IsRUFDcEI5cEQsT0FBUSxTQUFTc0ksRUFBU2wvQixFQUFNa3NHLEdBQzlCLE9BQU83ekUsS0FBSzZHLEVBQ2QsR0FDQyxDQUNEK2dELFdBQVk1bkQsS0FBSyw0QkFDakJ6NUIsS0FBTSxnQkFDTm9CLEtBQU0sVUFDTmdzRyxVQUFVLEVBQ1ZDLFlBQVksRUFDWm56RSxVQUFXLDBCQUNYNG5ELG1CQUFvQixFQUNwQjlwRCxPQUFRLFNBQVNzSSxFQUFTbC9CLEVBQU1rc0csR0FDOUIsT0FBT2h0RSxFQUFXLDRDQUE4QywwQ0FDbEUsR0FDQyxDQUNEOGdELFNBQVUsRUFDVkMsV0FBWTVuRCxLQUFLLFVBQ2pCejVCLEtBQU0sS0FDTnlILEtBQU0sVUFDTnl5QixVQUFXLDBCQUNYa3pFLFVBQVUsRUFDVnRyQixtQkFBb0IsRUFDcEI5cEQsT0FBUSxTQUFVc0ksRUFBU2wvQixFQUFNa3NHLEdBQy9CLElBQUlDLEVBQWlCLENBQ25CejBFLFVBQVcsZ0JBQ1hDLFFBQVMsS0FDUCxJQUFJOXRCLEVBQVEsR0FBRXd1QixLQUFLLHlDQUF5QzZHLEVBQVFzc0Usa0JBQWtCaDhGLFFBQ3RGc3hGLEVBQWFzTCxtQkFBbUIvekUsS0FBSywrQkFBZ0N4dUIsRUFBTXExQixFQUFRLEdBR25GbXRFLEVBQWUsQ0FDakIzMEUsVUFBVyxjQUNYQyxRQUFTLEtBQ1BtcEUsRUFBYXdMLHdCQUF3QnB0RSxFQUFRLEdBRzdDcXRFLEVBQTBCLENBQzVCNTBFLFFBQVMsS0FDUCxNQUFNLzZCLEVBQU8sR0FBRXdCLGlEQUFpRDhnQyxFQUFRc3RFLFdBQVczbEcsdUJBQXVCcTRCLEVBQVF1dEUsVUFBVTVsRyxpQkFBaUJxNEIsRUFBUXd0RSxpQkFDckp6bUcsT0FBT203RSxLQUFLeGtGLEVBQUssU0FBUyxHQUk5QixPQUFPbTdCLGVBQWVzcEQsb0JBQW9CLENBQ3hDLENBQUVsb0QsTUFBUSxVQUFVSCxRQUFTdXpFLEVBQXlCbHpFLEtBQU0sWUFBYWh2QixNQUFPZ3VCLEtBQUssK0JBQWdDL2hCLFFBQVNxMkYscUJBQzlILENBQUV4ekUsTUFBUSxnQkFBZ0JILFFBQVNxekUsRUFBY2h6RSxLQUFNLFVBQVdodkIsTUFBT2d1QixLQUFLLFFBQVNjLE1BQU8sV0FDOUYsQ0FBRUEsTUFBUSxhQUFhSCxRQUFTbXpFLEVBQWdCOXlFLEtBQU0sV0FBWWh2QixNQUFPZ3VCLEtBQUssVUFBV2MsTUFBTyxZQUVwRyxJQUdKMm5FLEVBQWE4TCxlQUFpQnZMLENBQ2xDLENBeFJDSSxDQUFnQm5uRyxLQUNaLEVBQ0R3bEQsVUFDRXhsRCxLQUFLdXlHLGtCQUNMOXdHLEVBQUUsMkJBQTJCMEosT0FBTSxJQUFNbkwsS0FBS3NuRywwQkFDL0MsRUFDRGhqRyxLQUFJLEtBQ0EsQ0FDSHk1QixLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUNsQnc5RixlQUFnQixLQUNURSxlQUFnQixDQUMxQnRDLFdBQVksQ0FDUmg3RixNQUFPNm9CLEtBQUssb0NBQ1pnQixLQUFNLHFCQUVWcG9CLFNBQVUsSUFFVjA1RixZQUFhLENBQ1QsQ0FBRWhqRSxRQUFRLEVBQU1uNEIsTUFBTzZvQixLQUFLLFdBQVl4eUIsR0FBSSxhQUl0Q2c4RixhQUFjLEdBQ2RDLFlBQWEsR0FDYmlMLGlCQUFrQjEwRSxLQUFLLDJDQUN2QjIwRSxnQkFBaUIzMEUsS0FBSyxtREFDdEI0MEUsVUFBVzUwRSxLQUFLLG1DQUNoQjYwRSxTQUFVNzBFLEtBQUssMkNBQ2Y4MEUsV0FBWTkwRSxLQUFLLHlDQUNqQiswRSxlQUFnQi8wRSxLQUFLLDhDQUNyQmcxRSxXQUFZaDFFLEtBQUssb0NBQ2pCaTFFLGlCQUFrQmoxRSxLQUFLLHVCQUN2QmsxRSxjQUFlLEtBQ2ZDLFlBQWEsT0FHckJscUQsUUFBUyxDQUNMbXFELFdBQVk1MUYsZUFBZTFTLEdBQ3pCQSxFQUFPOGxHLFNBQVc5bEcsRUFBTzhsRyxTQUFTL3ZHLFFBQVEsWUFBWSxJQUN0RGlLLEVBQU84bEcsU0FBVzlsRyxFQUFPOGxHLFNBQVMvdkcsUUFBUSxrQkFBbUIsS0FDN0RpSyxFQUFPaUgsS0FBTzlSLEtBQUtvbkQsT0FBT2kvQyxVQUMxQixJQUFJL2pHLEVBQU8sR0FBRXdCLHVEQUNiLElBQ0UsSUFBSXFvQixFQUFVLENBQ1osZUFBZ0IsMEJBRVp4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE9BQVFzTSxVQUFTNWMsS0FBTVYsS0FBSzZFLFVBQVU3SSxLQUN2RjdLLEtBQUsybUcsY0FHUCxDQUZFLE1BQU0zaUcsR0FDTkMsUUFBUUMsTUFBTUYsRUFDaEIsQ0FDRCxFQUNEd2dGLFdBQVlqbkUsaUJBQ1YsSUFBSWpiLEVBQU8sR0FBRXdCLDBEQUNUK0csRUFBUyxDQUNYdzlFLE9BQVEsTUFDUnYyRSxLQUFNOVIsS0FBS29uRCxPQUFPaS9DLFdBRXBCLElBQ0UsSUFBSWw2RSxFQUFVLENBQ1osZUFBZ0IsMEJBRVp4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE9BQVFzTSxVQUFTNWMsS0FBTVYsS0FBSzZFLFVBQVU3SSxLQUN2RjdLLEtBQUsybUcsY0FHUCxDQUZFLE1BQU0zaUcsR0FDTkMsUUFBUUMsTUFBTUYsRUFDaEIsQ0FDRCxFQUNEb3ZHLFdBQVk3MUYsaUJBQ1YsSUFDSTFTLEVBQVMsQ0FBRXc5RSxPQURMcm9GLEtBQUtpekcsY0FDWWIsWUFBYXRnRyxLQUFNOVIsS0FBS29uRCxPQUFPaS9DLFdBQ3REL2pHLEVBQU8sR0FBRXdCLDBEQUNiLElBQ0UsSUFBSXFvQixFQUFVLENBQ1osZUFBZ0IsMEJBRVp4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE9BQVFzTSxVQUFTNWMsS0FBTVYsS0FBSzZFLFVBQVU3SSxLQUN2RnlHLFlBQVcsSUFBTXRSLEtBQUsybUcsZ0JBQWdCLElBR3hDLENBRkUsTUFBTTNpRyxHQUNOQyxRQUFRQyxNQUFNRixFQUNoQixDQUNELEVBQ0RxdkcsU0FBVTkxRixlQUFlMVMsR0FDdkIsSUFBSWtZLEVBQU0vaUIsS0FBS2t6RyxZQUNmcm9HLEVBQU9tbUcsVUFBWW5tRyxFQUFPbW1HLFVBQVVwd0csUUFBUSxZQUFZLElBQ3hEaUssRUFBT2lILEtBQU85UixLQUFLb25ELE9BQU9pL0MsVUFDMUJ4N0YsRUFBTzdGLElBQU0rZCxFQUFJcXZGLFlBQ2pCLElBQUk5dkcsRUFBTyxHQUFFd0Isd0RBQ2IsSUFDRSxJQUFJcW9CLEVBQVUsQ0FDWixlQUFnQiwwQkFFWnhDLGVBQWV5QyxhQUFhOXBCLEVBQUssQ0FBRXVkLE9BQVEsT0FBUXNNLFVBQVM1YyxLQUFNVixLQUFLNkUsVUFBVTdJLEtBQ3ZGeUcsWUFBVyxJQUFNdFIsS0FBSzJtRyxnQkFBZ0IsSUFHeEMsQ0FGRSxNQUFNM2lHLEdBQ05DLFFBQVFDLE1BQU1GLEVBQ2hCLENBQ0QsRUFDRHV1RyxnQkFBaUJoMUYsaUJBQ2YsSUFBSWpiLEVBQU8sR0FBRXdCLDZEQUNiLElBQ0UsSUFBSXFvQixFQUFVLENBQ1osZUFBZ0IsMkJBRUF4QyxlQUFleUMsYUFBYTlwQixFQUFLLENBQUV1ZCxPQUFRLE1BQU9zTSxhQUM3RG1uRixjQUNMN3hHLEVBQUcsNEJBQTJCcUQsS0FBSyxTQUFVLFVBRTdDckQsRUFBRyw0QkFBMkJzRCxXQUFXLFNBSTdDLENBRkUsTUFBTWYsR0FDTkMsUUFBUUMsTUFBTUYsRUFDaEIsQ0FDRCxFQUNEMmlHLGFBQWMsV0FDQTNtRyxLQUFLcW5HLG1CQUNYaDVFLFNBQ05ydUIsS0FBS3V5RyxpQkFDTixFQUNEbEwsaUJBQWtCLFdBQ2hCLE9BQU9ybkcsS0FBS3VuRCxNQUErQix1QkFDNUMsRUFDRGtxRCx1QkFBd0IsV0FDdEJ6eEcsS0FBS3VuRCxNQUF3QixpQkFBRXY1QyxNQUNoQyxFQUNEZ2tHLHdCQUF5QixTQUFTanZGLEdBQ2hDL2lCLEtBQUtrekcsWUFBY253RixFQUNuQi9pQixLQUFLdW5ELE1BQXlCLGtCQUFFdjVDLEtBQUsrVSxFQUN0QyxFQUNEdWtGLHVCQUF3QixXQUN0QnRuRyxLQUFLdW5ELE1BQXdCLGlCQUFFdjVDLE1BQ2hDLEVBQ0Q4akcsbUJBQW9CLFNBQVMvaEcsRUFBT1IsRUFBTXdULEdBQ3hDL2lCLEtBQUtpekcsY0FBZ0Jsd0YsRUFDckIvaUIsS0FBS3VuRyxhQUFleDNGLEVBQ3BCL1AsS0FBS3duRyxZQUFjajRGLEVBQ25CdlAsS0FBS3VuRCxNQUE0QixxQkFBRXY1QyxNQUNyQyxJQzdOSCxNQUFBc3pFLEdBQUEsQ0FBQS8xRSxHQUFHLFVBV0hnMkUsR0FBQSxDQUFBMWlELE1BQU0sT0FDSjJpRCxHQUFBLENBQUEzaUQsTUFBTSwwQkFDVDhpRCxHQUNLLE1BQUEsQ0FEQTlpRCxNQUFNLDRCQUE0QnR6QixHQUFHLG9CQUFvQnUzQixLQUFLLGtCQUU5RDQrQyxHQUFBLENBQUE3aUQsTUFBTSxRQUNKMmpELEdBQUEsQ0FBQTNqRCxNQUFNLGlCQUNKdHpCLEdBQUcsMEJBQTBCc3pCLE1BQU0sbUJBQW1CN2lCLE9BQUEsSUFHdkQybUUsR0FBQSxDQUFBcDNFLEdBQUcscUJBK0JKcTNFLEdBQUEsQ0FBQS9qRCxNQUFNLG1CQUNEbjVCLEtBQUssU0FBUzZGLEdBQUcseUJBQXlCc3pCLE1BQU0scUJBQ3REOGlELFFBQUc5aUQsTUFBTSxnQkFBYyxNQUFBLDJNQXJEakM4aUQsR0FTSyxNQVRMTCxHQVNLLENBUkxqckIsR0FPYWs5QyxFQUFBLENBTlpob0csR0FBRyxjQUNGMmtHLFdBQVkvb0QsRUFBY3FyRCxlQUFDdEMsV0FDM0J2NUYsU0FBVXd3QyxFQUFjcXJELGVBQUM3N0YsU0FDekJ5NUYsVUFBV2pwRCxFQUFjcXJELGVBQUNwQyxVQUMxQkMsWUFBYWxwRCxFQUFjcXJELGVBQUNuQyxZQUM1QnJJLGFBQVkvOEMsRUFBVTA4Qyx5RkFJeEJobUIsR0ErQ0ssTUEvQ0xKLEdBK0NLLENBOUNISSxHQTZDSyxNQTdDTEgsR0E2Q0ssQ0E1Q0hDLEdBRUFFLEdBeUNLLE1BekNMRCxHQXlDSyxDQXhDSEMsR0FrQ0ssTUFsQ0xhLEdBa0NLLENBakNIYixHQUVLLE1BRkxjLEdBRUswWixHQURBaDFDLHVCQUVOdzZCLEdBNkJNLE1BN0JOZ0IsR0E2Qk0sQ0E1Qkh0c0IsR0FJc0J3eEMsRUFBQSxDQUpBM2tELElBQUksdUJBQ3ZCbnpDLE1BQU9vM0MsRUFBWW9nRCxhQUNuQmg0RixLQUFNNDNDLEVBQVdxZ0QsWUFDakJNLFNBQVFqZ0QsRUFBVXVyRCxnREFFckIvOEMsR0FJc0J3eEMsRUFBQSxDQUpBM2tELElBQUksbUJBQ3ZCbnpDLE1BQU9vM0MsRUFBZ0JzckQsaUJBQ3ZCbGpHLEtBQU00M0MsRUFBZXVyRCxnQkFDckI1SyxTQUFRamdELEVBQVUyOEIsZ0RBRXJCbnVCLEdBTTRCbTlDLEVBQUEsQ0FOQXR3RCxJQUFJLG1CQUM3Qm56QyxNQUFPbzNDLEVBQVN3ckQsVUFDaEJwakcsS0FBTTQzQyxFQUFReXJELFNBQ2RsVyxPQUFRdjFDLEVBQVUwckQsV0FDbEJZLFdBQVl0c0QsRUFBYzJyRCxlQUMxQlksTUFBSzdyRCxFQUFVc3JELG1FQUVsQjk4QyxHQUc2QnM5QyxFQUFBLENBSEF6d0QsSUFBSSxvQkFDOUJuekMsTUFBT28zQyxFQUFVNHJELFdBQ2pCYSxPQUFNL3JELEVBQVF3ckQscUNBR2pCaDlDLEdBS1c0eEMsRUFBQSxDQUxBL2tELElBQUksMEJBQ1pzN0MsY0FBZXIzQyxFQUFjbXJELGVBQUM5VCxjQUM5QmYsZUFBZ0J0MkMsRUFBY21yRCxlQUFDN1UsZUFDL0JFLFNBQVV4MkMsRUFBY21yRCxlQUFDM1UsU0FDekJKLGNBQWVwMkMsRUFBY21yRCxlQUFDL1UseUZBSXJDNWIsR0FJSyxNQUpMaUIsR0FJSyxDQUhIakIsR0FFUSxTQUZSNlosR0FFUSxDQUROVSxhQUFnQy8wQyxFQUFJcHBCLEtBQUEsNENBQUEsdUVDcEIvQixJQUFBODFFLEdBQUEsQ0FDYi9wRCxXQUFZLENBQ1ZtOEMsVUFBYUMsSUFFZnB2RCxNQUFPLENBQ0x1dkQsVUFBV3JrRyxPQUNYeXNCLFdBQVlqYyxRQUtkMjJDLFdBdUJGLFNBQXlCcTlDLEdBQ3ZCLE1BQU1DLEVBQWtCLEdBQ3hCLElBQUlydkYsRUFBVSxHQUNWb3VFLEVBQTBCLEVBRzlCaWhCLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0FDN0JvMUYsRUFBYUcsY0FDZixJQUdGLElBQUlFLEVBQXlCLENBQzNCckksY0FBZWlJLEVBQ2ZoSixlQUFnQixHQUNoQkUsU0FBVXQ2RixVQUFVeTdGLFNBQVUsR0FBRWg3Rix3REFBeUQycUIsWUFDekY4dUUsZUFBZSxHQUtqQm5tRixFQUFVLENBQ1IsQ0FBRXV1RSxXQUFZNW5ELEtBQUssMEJBQTJCaHlCLEtBQU0sTUFBT3pILEtBQU0sTUFBT2s2QixVQUFXLGNBQWVsQyxPQUFRLENBQUNoNEIsRUFBTW9CLElBQ3JHLGlGQUFnRnBCLE1BQVNBLGlEQUNoRzhoRixtQkFBb0IsRUFBRzhrQixZQUFhcnBFLGlCQUFpQnNwRSxnQkFDMUQsQ0FBRXhsQixXQUFZNW5ELEtBQUssVUFBV2h5QixLQUFNLGVBQWdCekgsS0FBTSxlQUFnQms2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsRUFBRzlwRCxPQUFRLENBQUNoNEIsRUFBTW9CLElBQzFJcEIsRUFBUSx3REFBdUR5NUIsS0FBSyxxQkFBd0IseURBQXdEQSxLQUFLLGVBR3JLLENBQUU0bkQsV0FBWTVuRCxLQUFLLFlBQWFoeUIsS0FBTSxXQUFZekgsS0FBTSxXQUFZazZCLFVBQVcseUJBQTBCNG5ELG1CQUFvQixHQUM3SCxDQUFFVCxXQUFZNW5ELEtBQUssWUFBYWh5QixLQUFNLFdBQVl6SCxLQUFNLFdBQVlrNkIsVUFBVyx5QkFBMEI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUFrQmpCLFVBQVUreUIsWUFBWTl4QixLQUluTCxJQUFJZzZGLEVBQWUsQ0FDakJsQixZQUFZLEVBQ1pJLE1BQU8sQ0FBQyxDQUFFaFksRUFBeUIsVUFHakN1aEIsRUFBZ0JwOUUsZUFBZU0sTUFBTTQ4RSxHQUN6Q0UsRUFBY3ZJLGNBQWdCcUksRUFBdUJySSxjQUNyRHVJLEVBQWNwSixTQUFZLEdBQUVvSixFQUFjcEosV0FDMUNvSixFQUFjdEosZUFBaUJybUYsRUFDL0IydkYsRUFBY3pJLGFBQWUzMEUsZUFBZU0sTUFBTXEwRSxHQUNsRGtJLEVBQWFRLHdCQUEwQkQsQ0FDekMsQ0FyRUlJLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFBWSxFQUNabGhELEtBQUksS0FDSyxDQUNMeTVCLEtBQU9qcEIsR0FBTWlwQixLQUFLanBCLEdBQ2xCa3lGLHdCQUF5QixLQUN6QkUsMEJBQTJCLE9BRy9CbCtDLFFBQVMsQ0FFUDI5QyxhQUFjLFdBQ0EzbUcsS0FBS3FuRyxtQkFDWGg1RSxRQUNQLEVBQ0RnNUUsaUJBQWtCLFdBQ2hCLE9BQU9ybkcsS0FBS3VuRCxNQUF5QixpQkFDdkMsSUNwREUsTUFBQSs1QixHQUFBLENBQUF6aUQsTUFBSyxPQUNKMGlELEdBQUEsQ0FBQTFpRCxNQUFNLDBCQUNIOGlELFVBQUE5aUQsTUFBSyw0QkFBNEJ0ekIsR0FBQSxvQkFBQXUzQixLQUFBLDRCQUU1QixRQUNINCtDLEdBQUEsQ0FBQTdpRCxNQUFLLGFBQ0wyakQsR0FBQSxDQUFBajNFLEdBQUcsa0JBVVZrM0UsR0FBQSxDQUFBNWpELE1BQUEsdUVBaEJDLE9BQUErb0UsS0FBQTVrQixTQUFBMUIsaUJBRUlFLGdCQUdFRyxHQVVMLE1BVktELEdBVUwsSUFERSxTQUFBLElBREV1bUIsRUFBQSxDQU5VL2tELElBQUksb0JBQ1pzN0MsY0FBUXIzQyxFQUFBNi9DLHdCQUFBeEksY0FDUmYsZUFBQXQyQyxFQUFBNi9DLHdCQUFBdkosZUFDRkUsU0FBQXgyQyxFQUFBNi9DLHdCQUFBckosU0FDRUosY0FBZXAyQyxFQUFFNi9DLHdCQUFBekosY0FDbEJlLGFBQWVuM0MsRUFBaUI2L0Msd0JBQUExSSx1R0FJdkMzYyxTQUFBYyxzR0NHVSxJQUFBcXhCLEdBQUEsQ0FDYmhxRCxXQUFZLENBQ1ZtOEMsVUFBYUMsSUFFZnB2RCxNQUFPLENBQ0x1dkQsVUFBV3JrRyxPQUNYeXNCLFdBQVlqYyxRQUtkMjJDLFdBdUJGLFNBQXlCcTlDLEdBQ3ZCLE1BQU1DLEVBQWtCLEdBQ3hCLElBQUlydkYsRUFBVSxHQUNWb3VFLEVBQTBCLEVBRzlCaWhCLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0FDN0JvMUYsRUFBYUcsY0FDZixJQUdGLElBQUlFLEVBQXlCLENBQzNCckksY0FBZWlJLEVBQ2ZoSixlQUFnQixHQUNoQkUsU0FBVXQ2RixVQUFVeTdGLFNBQVUsR0FBRWg3Rix3REFBeUQycUIsWUFDekY4dUUsZUFBZSxHQUtqQm5tRixFQUFVLENBQ1IsQ0FBRXV1RSxXQUFZNW5ELEtBQUsscUJBQXNCaHlCLEtBQU0sTUFBT3pILEtBQU0sTUFBT2s2QixVQUFXLGNBQWVsQyxPQUFRLENBQUNoNEIsRUFBTW9CLElBQ2hHLGlGQUFnRnBCLE1BQVNBLGlEQUNoRzhoRixtQkFBb0IsRUFBRzhrQixZQUFhcnBFLGlCQUFpQnNwRSxnQkFDMUQsQ0FBRXhsQixXQUFZNW5ELEtBQUssVUFBV2h5QixLQUFNLGVBQWdCekgsS0FBTSxlQUFnQms2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsRUFBRzlwRCxPQUFRLENBQUNoNEIsRUFBTW9CLElBQzFJcEIsRUFBUSx3REFBdUR5NUIsS0FBSyxxQkFBd0IseURBQXdEQSxLQUFLLGVBR3JLLENBQUU0bkQsV0FBWTVuRCxLQUFLLFlBQWFoeUIsS0FBTSxXQUFZekgsS0FBTSxXQUFZazZCLFVBQVcseUJBQTBCNG5ELG1CQUFvQixHQUM3SCxDQUFFVCxXQUFZNW5ELEtBQUssWUFBYWh5QixLQUFNLFdBQVl6SCxLQUFNLFdBQVlrNkIsVUFBVyx5QkFBMEI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUFrQmpCLFVBQVUreUIsWUFBWTl4QixLQUluTCxJQUFJZzZGLEVBQWUsQ0FDakJsQixZQUFZLEVBQ1pJLE1BQU8sQ0FBQyxDQUFFaFksRUFBeUIsVUFHakN1aEIsRUFBZ0JwOUUsZUFBZU0sTUFBTTQ4RSxHQUN6Q0UsRUFBY3ZJLGNBQWdCcUksRUFBdUJySSxjQUNyRHVJLEVBQWNwSixTQUFZLEdBQUVvSixFQUFjcEosV0FDMUNvSixFQUFjdEosZUFBaUJybUYsRUFDL0IydkYsRUFBY3pJLGFBQWUzMEUsZUFBZU0sTUFBTXEwRSxHQUNsRGtJLEVBQWFRLHdCQUEwQkQsQ0FDekMsQ0FyRUlJLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFBWSxFQUNabGhELEtBQUksS0FDSyxDQUNMeTVCLEtBQU9qcEIsR0FBTWlwQixLQUFLanBCLEdBQ2xCa3lGLHdCQUF5QixLQUN6QkUsMEJBQTJCLE9BRy9CbCtDLFFBQVMsQ0FFUDI5QyxhQUFjLFdBQ0EzbUcsS0FBS3FuRyxtQkFDWGg1RSxRQUNQLEVBQ0RnNUUsaUJBQWtCLFdBQ2hCLE9BQU9ybkcsS0FBS3VuRCxNQUFtQixXQUNqQyxJQ2pERSxNQUFBKzVCLEdBQUEsQ0FBQXppRCxNQUFLLE9BQ0owaUQsR0FBQSxDQUFBMWlELE1BQU0sMENBQ0UsNEJBQXNCdHpCLEdBQUEsb0JBQUF1M0IsS0FBQSw0QkFFdEIsUUFDSDQrQyxHQUFBLENBQUE3aUQsTUFBSyxhQUNMMmpELEdBQUEsQ0FBQWozRSxHQUFHLDBFQU5ULE9BQUFxOEYsS0FBQTVrQixTQUFBMUIsaUNBS01LLFNBQUFELG9CQVFQdW1CLEVBQUEsQ0FOZ0Iva0QsSUFBSSxjQUNaczdDLGNBQVFyM0MsRUFBQTYvQyx3QkFBQXhJLGNBQ1JmLGVBQUF0MkMsRUFBQTYvQyx3QkFBQXZKLGVBQ0ZFLFNBQUF4MkMsRUFBQTYvQyx3QkFBQXJKLFNBQ0ZKLGNBQUFwMkMsRUFBQTYvQyx3QkFBQXpKLGNBQ0ZlLGFBQUFuM0MsRUFBQTYvQyx3QkFBQTFJLHlKQ3dETCxNQUFNeVYsR0FBbUIsbUJBRVYsSUFBQUMsR0FBQSxDQUNibHFELFdBQVksQ0FDVix1QkFBd0JtcUQsR0FDeEIseUJBQTBCQyxHQUMxQixpQkFBa0JDLEdBQ2xCLG1CQUFvQkMsR0FDcEIsbUJBQW9CQyxHQUNwQixxQkFBc0JDLEdBQ3RCLGNBQWVqRCxJQUVqQnY2RCxNQUFPLENBQ0x1dkQsVUFBV3JrRyxPQUNYdXlHLGdCQUFpQi9oRyxPQUNqQm8xRSxLQUFNcDlELE9BQ04yOUUsU0FBVTluRCxRQUNWNHJELE9BQVFqcUcsT0FDUnVqRixLQUFNdmpGLE9BQ053eUcsWUFBYWhpRyxPQUNidzRGLG1CQUFvQmxoRixNQUNwQjJxRix3QkFBeUJqaUcsT0FDekJraUcsMEJBQTJCNXFGLE1BQzNCNnFGLDRCQUE2Qm5pRyxPQUM3Qm9pRyw4QkFBK0I5cUYsTUFDL0IrcUYsc0JBQXVCcmlHLE9BQ3ZCc2lHLHdCQUF5QmhyRixPQUszQnEvQixVQUNFbnBELEtBQUt5dUIsV0FBYXp1QixLQUFLb25ELE9BQU9tdEQsZ0JBQzlCdjBHLEtBQUsrMEcsV0FBYS8wRyxLQUFLb25ELE9BQU82a0QsT0FDOUJqc0csS0FBSzRULEtBQU81VCxLQUFLeXVCLFdBQVc3YSxLQUM1QjVULEtBQUtnMUcsYUFBZWgxRyxLQUFLb25ELE9BQU9tK0IsS0FFN0JzdkIsdUJBQXlCQywwQkFDMUI5MEcsS0FBS3d5RyxlQUFlbkMsWUFBWW5tRyxLQUFLLENBQUVtakMsUUFBUSxFQUFPbjRCLE1BQU82b0IsS0FBSyxhQUFjeHlCLEdBQUksWUFBYXFJLEtBQU0sVUFDdkc1VCxLQUFLd3lHLGVBQWVuQyxZQUFZbm1HLEtBQUssQ0FBRW1qQyxRQUFRLEVBQU9uNEIsTUFBTzZvQixLQUFLLGVBQWdCeHlCLEdBQUksWUFBYXFJLEtBQU0sV0FHM0c1VCxLQUFLd3lHLGVBQWVuQyxZQUFZNS9GLFNBQVN4SyxJQUN0Q0EsRUFBRXNGLElBQU12TCxLQUFLKzBHLFlBQWM5dUcsRUFBRTJOLE1BQVE1VCxLQUFLNFQsS0FBUTNOLEVBQUVvbkMsUUFBUyxFQUFPcG5DLEVBQUVvbkMsUUFBUyxDQUFJLEdBRXZGLEVBQ0RtWSxVQUVFLE1BQU15dkQsRUFBZ0JqMUcsS0FBS2sxRyxvQkFDM0JELEVBQWNqMUcsS0FBS29uRCxPQUFPb3RELGFBRTFCcGtGLHNCQUFzQlMsZ0JBQWdCLGNBQWU0RCxxQkFBcUJLLG1CQUFvQjJMLElBQzVGdzBFLEVBQWMsQ0FBRUUsZUFBZ0JuMUcsS0FBS29uRCxPQUFPb3RELFlBQVlXLGVBQWdCQyxjQUFlMzBFLEdBQU8sSUFHaEdyUSxzQkFBc0JTLGdCQUFnQiwyQkFBNEJrakYsSUFBbUJqb0csSUFDbkZ1ZSxFQUFtQk0sZUFBZSxNQUFPN2UsRUFBSVAsSUFDN0M4ZSxFQUFtQk0sZUFBZSxPQUFRN2UsRUFBSThILE1BQy9CLFNBQVo5SCxFQUFJOEgsTUFDTDVULEtBQUt1M0IsVUFFUHYzQixLQUFLKzBHLFdBQWFqcEcsRUFBSVAsR0FDdEJ2TCxLQUFLNFQsS0FBTzlILEVBQUk4SCxLQUNoQjVULEtBQUt5dUIsV0FBVy9wQixJQUFNb0gsRUFBSVAsR0FDMUJ2TCxLQUFLeXVCLFdBQVc3YSxLQUFPOUgsRUFBSThILEtBQzNCNVQsS0FBS2cxRyxhQUFlM3FGLEVBQW1CQyxjQUFjLFFBQ3JEMnFGLEdBQWMsR0FFakIsRUFDRDN3RyxLQUFJLEtBQ0ssQ0FDTHk1QixLQUFPanBCLEdBQU1pcEIsS0FBS2pwQixHQUNsQmlnRyxXQUFZLEtBQ1puaEcsS0FBTSxLQUNONmEsV0FBWSxDQUFFLEVBQ2R1bUYsYUFBYyxLQUNkSyxZQUFhLENBQUUsRUFDZjdDLGVBQWdCLENBQ2R0QyxXQUFZLENBQ1ZoN0YsTUFBTyxJQUFNNm9CLEtBQUssUUFDbEJnQixLQUFNLGNBRVJveEUscUJBQXNCLEdBQ3RCRSxZQUFhLENBQ1gsQ0FBRWhqRSxRQUFRLEVBQU1uNEIsTUFBTzZvQixLQUFLLGVBQWdCeHlCLEdBQUksY0FBZXFJLEtBQU0sU0FDckUsQ0FBRXk1QixRQUFRLEVBQU9uNEIsTUFBTzZvQixLQUFLLGlCQUFrQnh5QixHQUFJLGNBQWVxSSxLQUFNLFNBQ3hFLENBQUV5NUIsUUFBUSxFQUFPbjRCLE1BQU82b0IsS0FBSyxtQkFBb0J4eUIsR0FBSSxrQkFBbUJxSSxLQUFNLFNBQzlFLENBQUV5NUIsUUFBUSxFQUFPbjRCLE1BQU82b0IsS0FBSyxxQkFBc0J4eUIsR0FBSSxrQkFBbUJxSSxLQUFNLGFBS3hGbzFDLFFBQVMsQ0FDUHp4QixRQUFTLFdBQ1d2M0IsS0FBS3MxRyxpQkFDWC85RSxTQUNiLEVBQ0QyOUUsb0JBQXFCLFNBQVM1d0csR0FDekJBLEVBQ0R0RSxLQUFLcTFHLFlBQWMvd0csRUFFbkJBLEVBQU90RSxLQUFLcTFHLFlBR2RyMUcsS0FBS3d5RyxlQUFlckMscUJBQXVCLENBQ3pDLENBQUVqN0YsTUFBTzVRLEVBQUs2d0csZUFBZWpnRyxNQUFPbkYsTUFBTzFNLFVBQVVnZ0MsYUFBYyxHQUFFLytCLEVBQUs2d0csZUFBZWpnRyxRQUFTLE1BR2pHNVEsRUFBSzh3RyxlQUEwQyxJQUF6Qjl3RyxFQUFLOHdHLGNBQWM3cEcsS0FDMUN2TCxLQUFLd3lHLGVBQWVyQyxxQkFBcUIsR0FBUyxLQUFLLEdBQUVyc0csdURBQXVEOUQsS0FBSyswRyxtQkFBbUIvMEcsS0FBSzRULGFBQWE1VCxLQUFLb25ELE9BQU93Z0MsT0FDdEs1bkYsS0FBS3d5RyxlQUFlckMscUJBQXFCam1HLEtBQUssQ0FDNUNnTCxNQUFPN1IsVUFBVWdnQyxhQUFjLEdBQUUvK0IsRUFBSzh3RyxjQUFjbGdHLFFBQVMsR0FBSSxLQUNqRW5GLE1BQVEsR0FBRXpMLEVBQUs4d0csY0FBY2xnRyxRQUM3QnJDLEtBQU12TyxFQUFLOHdHLGNBQWNHLFVBQWEsR0FBRXp4Ryx5Q0FBeUNRLEVBQUs4d0csY0FBYzdwRyxLQUFPLEtBQzNHaXFHLGFBQWMsU0FHbkIsRUFDREYsZUFBZ0IsV0FDZCxPQUFPdDFHLEtBQUt1bkQsTUFBTXZuRCxLQUFLKzBHLFdBQWEsSUFBTS8wRyxLQUFLNFQsS0FDaEQsRUFFRCt6RixXQUFZLFNBQVMxekYsR0FDbkJqVSxLQUFLd3lHLGVBQWVuQyxZQUFZNS9GLFNBQVN4SyxHQUFNQSxFQUFFb25DLFFBQVMsSUFDMURwNUIsRUFBS281QixRQUFTLEVBQ2RqZCxzQkFBc0JRLGtCQUFrQm1qRixHQUFrQjkvRixFQUM1RCxzUENsTUpvaUQsR0FPV2s5QyxFQUFBLENBTlhob0csR0FBRyxjQUNGMmtHLFdBQVUvb0QsRUFBQXFyRCxlQUFBdEMsc0VBRVZFLFVBQVdqcEQsRUFBY3FyRCxlQUFDcEMsVUFDMUJDLFlBQWFscEQsRUFBT3FyRCxlQUFBbkMsWUFDcEJySSxhQUFZbmdELEVBQVU4L0Msa0hBR1J4Z0QsRUFBQTR0RCxZQUFBLFNBQUE1dEQsRUFBQXZ6QyxXQUFmZ29GLEdBT2lCNlosRUFBQSxPQVBGdnlELElBQUEsb0JBQ2RtakQsVUFBV2ovQyxFQUFTaS9DLFVBQ3BCNTNFLFdBQVkwNEIsRUFBRzE0Qix1QkFFZjA1RSxTQUFVL2dELEVBQVErZ0QsU0FDbEI4RCxPQUFRN2tELEVBQU02a0QsT0FDZHNDLGdCQUFpQm5uRCxFQUFLcXRELHVJQUdKdHRELEVBQUE0dEQsWUFBQSxTQUFBNXRELEVBQUF2ekMsV0FBbkJnb0YsR0FPVzhaLEVBQUEsT0FQUXh5RCxJQUFBLG9CQUNsQm1qRCxVQUFXai9DLEVBQVNpL0MsVUFDcEI1M0UsV0FBWTA0QixFQUFLMTRCLCtCQUVqQjYzRSxjQUFlbC9DLEVBQXlCc3RELDBCQUN4Q3ZNLFNBQVUvZ0QsRUFBUStnRCxTQUNsQjZDLG1CQUFvQjVqRCxFQUFFNGpELGdKQUdSN2pELEVBQUE0dEQsWUFBQSxTQUFBNXRELEVBQUF2ekMsV0FBZmdvRixHQU9tQitaLEVBQUEsT0FQSnp5RCxJQUFBLHdCQUNkbWpELFVBQVdqL0MsRUFBU2kvQyxVQUNwQjUzRSxXQUFZMDRCLEVBQU8xNEIsdUJBRW5CMDVFLFNBQVUvZ0QsRUFBUStnRCxTQUNsQjhELE9BQVE3a0QsRUFBTTZrRCxPQUNkc0MsZ0JBQWlCbm5ELEVBQUt1dEQsK0lBR0h4dEQsRUFBQTR0RCxZQUFBLFNBQUE1dEQsRUFBQXZ6QyxXQUFwQmdvRixHQU11QmdhLEVBQUEsT0FOSDF5RCxJQUFBLHdCQUNuQm1qRCxVQUFXai9DLEVBQVNpL0Msa0NBRXBCOWdCLEtBQUtwK0IsRUFBYTZ0RCxhQUNsQjFPLGNBQWVsL0MsRUFBNkJ3dEQsOEJBQzNDek0sU0FBUy9nRCxFQUFRK2dELDhGQUdML2dELEVBQUF5dEQsdUJBQU96dEQsRUFBQTB0RCw4QkFBbkI5eEIsNEJBQ2U3N0IsRUFBQTR0RCxZQUFBLFNBQUE1dEQsRUFBQXZ6QyxXQUFmZ29GLEdBT2VpYSxFQUFBLE9BUEEzeUQsSUFBQSxrQkFDZG1qRCxVQUFXai9DLEVBQVNpL0MsVUFDcEI1M0UsV0FBWTA0QixFQUFDMTRCLHVCQUViMDVFLFNBQVUvZ0QsRUFBUStnRCxTQUNsQjhELE9BQVE3a0QsRUFBTTZrRCxPQUNkc0MsZ0JBQWlCbm5ELEVBQUt5dEQsbUlBR1AxdEQsRUFBQTR0RCxZQUFBLFNBQUE1dEQsRUFBQXZ6QyxXQUFsQmdvRixZQUFrQjE0QyxJQUFBLGtCQUNmbWpELFVBQUtqL0MsRUFBQWkvQyx5akJDOUNKMzVGLEVBQUsrbUYsS0FPTHFpQixFQUFtQjV5RCxHQUFJLE1BQ3ZCNnlELEVBQWM3eUQsR0FBSSxDQUFBLFVBRXhCd2UsSUFBY25rRCxjQUVkb2tELElBQVVwa0QsV0FJVkEsaUJBQ0ksTUFBTStiLEVBQVM1c0IsRUFBR3NwRyxhQUFhdHBHLEVBQUdnbkYsa0JBQ2xDLElBQUlwdkYsUUFpTFJpWixpQkFpRUksSUFBSWpaLEVBQU8sQ0FTZG1VLE1BQU8sQ0FDSCxDQUFFMGIsTUFBTyxFQUFHcG9CLEtBQU0sY0FBZW5DLE1BQU8sUUFDeEMsQ0FBRXVxQixNQUFPLEVBQUdwb0IsS0FBTSxpQkFBa0JuQyxNQUFPLE9BQzNDLENBQUV1cUIsTUFBTyxFQUFHcG9CLEtBQU0sa0JBQW1CbkMsTUFBTyxRQUM1QyxDQUFFdXFCLE1BQU8sRUFBR3BvQixLQUFNLGNBQWVuQyxNQUFPLFFBQ3hDLENBQUV1cUIsTUFBTyxFQUFHcG9CLEtBQU0sY0FBZW5DLE1BQU8sUUFDeEMsQ0FBRXVxQixNQUFPLEVBQUdwb0IsS0FBTSxPQUFRbkMsTUFBTyxTQUVyQzRPLE1BQU8sQ0FDSCxDQUFFSSxPQUFRLEVBQUdwTixPQUFRLEVBQUd2RyxNQUFPLEdBQUkyRSxNQUFPLFNBQzFDLENBQUVnUCxPQUFRLEVBQUdwTixPQUFRLEVBQUd2RyxNQUFPLEdBQUkyRSxNQUFPLFNBQzFDLENBQUVnUCxPQUFRLEVBQUdwTixPQUFRLEVBQUd2RyxNQUFPLEdBQUkyRSxNQUFPLFNBQzFDLENBQUVnUCxPQUFRLEVBQUdwTixPQUFRLEVBQUd2RyxNQUFPLEVBQUcyRSxNQUFPLFNBQ3pDLENBQUVnUCxPQUFRLEVBQUdwTixPQUFRLEVBQUd2RyxNQUFPLEdBQUkyRSxNQUFPLFdBSTNDdEYsRUFNSixTQUF3QjRPLEdBQ3BCLElBQUl1RixFQUFRLEdBQ1JELEVBQVEsR0FFUnk5RixFQUFtQixDQUFBLEVBRXZCLE1BQU1DLEVBQWEsQ0FBQ0MsRUFBU3RqRyxFQUFNc0csS0FDdEMsR0FBaUMsTUFBN0I4OEYsRUFBaUJFLEdBQW9CLE9BQ3pDLElBQUloaUYsRUFBUTFiLEVBQU14WCxPQUNsQmcxRyxFQUFpQkUsR0FBV2hpRixFQUM1QixJQUFJaWlGLEVBQVcsQ0FBRWppRixRQUFPcG9CLEtBQU1vcUcsRUFBU3RqRyxPQUFNc0csU0FDN0NWLEVBQU12TyxLQUFLa3NHLEVBQVMsRUFFWEMsRUFBYSxDQUFDejlGLEVBQVFwTixFQUFRdkcsRUFBT2lRLEtBRzlDLElBQUlvaEcsRUFBVyxDQUFFMTlGLE9BRklxOUYsRUFBaUJyOUYsR0FFQ3BOLE9BRGxCeXFHLEVBQWlCenFHLEdBQ3VCdkcsUUFBT2lRLFNBQ3BFc0QsRUFBTXRPLEtBQUtvc0csRUFBUyxFQU9qQixPQUxBcGpHLEVBQUl6QyxTQUFTeUQsSUFDaEJnaUcsRUFBV2hpRyxFQUFHMEUsT0FBUTFFLEVBQUdxaUcsWUFBYXJpRyxFQUFHc2lHLGNBQ3pDTixFQUFXaGlHLEVBQUcxSSxPQUFRMEksRUFBR3VpRyxZQUFhdmlHLEVBQUd3aUcsY0FDekNMLEVBQVduaUcsRUFBRzBFLE9BQVExRSxFQUFHMUksT0FBUTBJLEVBQUdqUCxNQUFPaVAsRUFBRzZELEtBQUssSUFFekMsQ0FBRVUsUUFBT0QsUUFDcEIsQ0EvQldtK0YsQ0ExRkssQ0FDZixDQUNJQyxXQUFjLFVBQ2RKLGFBQWdCLFVBQ2hCRCxZQUFlLDRFQUNmL3FHLE9BQVUsY0FDVm9OLE9BQVUsT0FDVmIsS0FBUSxPQUNSMCtGLFlBQWUsZ0RBQ2ZJLFlBQWUsY0FDZkMsWUFBZSxjQUNmN3hHLE1BQVMsSUFFYixDQUNJMnhHLFdBQWMsVUFDZEwsWUFBZSxnREFDZi9xRyxPQUFVLE9BQ1ZvTixPQUFVLGNBQ1ZiLEtBQVEsT0FDUjArRixZQUFlLDRFQUNmSSxZQUFlLFlBQ2ZILGFBQWdCLFVBQ2hCSSxZQUFlLGNBQ2Y3eEcsTUFBUyxLQUViLENBQ0kyeEcsV0FBYyxVQUNkSixhQUFnQixVQUNoQkQsWUFBZSw0RUFDZi9xRyxPQUFVLFlBQ1ZvTixPQUFVLE9BQ1ZiLEtBQVEsT0FDUjArRixZQUFlLDhDQUNmSSxZQUFlLFlBQ2ZDLFlBQWUsY0FDZjd4RyxNQUFTLElBRWIsQ0FDSTJ4RyxXQUFjLFVBQ2RMLFlBQWUsZ0RBQ2YvcUcsT0FBVSxPQUNWb04sT0FBVSxjQUNWYixLQUFRLE9BQ1IwK0YsWUFBZSw0RUFDZkksWUFBZSxjQUNmSCxhQUFnQixVQUNoQkksWUFBZSxjQUNmN3hHLE1BQVMsS0FFYixDQUNJMnhHLFdBQWMsVUFDZEosYUFBZ0IsVUFDaEJELFlBQWUsNEVBQ2YvcUcsT0FBVSxjQUNWb04sT0FBVSxPQUNWYixLQUFRLE9BQ1IwK0YsWUFBZSxnREFDZkksWUFBZSxjQUNmQyxZQUFlLGNBQ2Y3eEcsTUFBUyxPQWtDVixPQUFPWCxDQUNYLENBaFJxQnl5RyxHQUNqQixNQUFNdjlGLEVBNFNWLFdBQ0ksSUFBSXBHLEVBQVEwakMsRUFBTTFqQyxNQUNMLE1BQVRBLElBQWlCQSxFQUFRekgsT0FBT3FyRyxXQUFhLEtBQ2pELElBQUkzakcsRUFBU3lqQyxFQUFNempDLE9BQ0wsTUFBVkEsSUFBa0JBLEVBQVMxSCxPQUFPc3JHLFlBQWMsSUFFcEQsTUFBTyxDQUFFN2pHLFFBQU9DLFNBQ3BCLENBblRpQjZqRyxHQUNibkIsRUFBWTl3RyxNQUFRdVUsRUFDcEIsTUFBTWhCLE1BQUVBLEVBQUtDLE1BQUVBLEdBbVRuQixTQUEwQm5VLEVBQU04TyxFQUFPQyxHQVVuQyxPQVRtQjNHLEVBQUd5cUcsU0FDdEJDLFVBQVUxcUcsRUFBRzJxRyxjQUNiQyxVQUFVLElBQ1ZDLFlBQVksSUFDWkMsT0FBTyxDQUNKLENBQUMsRUFBRyxHQUNKLENBQUNwa0csRUFBT0MsSUFHSm9rRyxDQUFXbnpHLEVBQ3RCLENBOVQ2Qm96RyxDQUFpQnB6RyxFQUFNa1YsRUFBS3BHLE1BQVEsR0FBSW9HLEVBQUtuRyxPQUFTLEdBRS9FM0csRUFBR2dJLE9BQU9vaEcsRUFBaUI3d0csT0FDN0J5UCxPQUFPLFdBQ1B1RixVQUFVLFFBQ1YzVixLQUFLbVUsR0FDTDVULE1BQ1dxVixJQUNYLE1BQU05TyxFQUFJOE8sRUFBTWpDLE9BQU8sUUFFdkI3TSxFQUFFdEcsS0FBSyxLQUFNd0YsR0FBTUEsRUFBRXF0RyxLQUFJN3lHLEtBQUssS0FBTXdGLEdBQU1BLEVBQUVzdEcsS0FFNUN4c0csRUFBRWdwQixXQUFXMW5CLEVBQUdtckcsWUFDWDVuRyxNQUFNLEtBQ05va0IsU0FBUyxLQUNUdnZCLEtBQUssVUFBV3dGLEdBQU1BLEVBQUV3dEcsR0FBS3h0RyxFQUFFc3RHLEtBQy9COXlHLEtBQUssU0FBVXdGLEdBQU1BLEVBQUVwQixHQUFLb0IsRUFBRXF0RyxLQUM5Qjd5RyxLQUFLLGFBQWN3RixHQUFNQSxFQUFFNnBCLFFBQzNCcnZCLEtBQUssUUFBU3dGLEdBQU1ndkIsRUFBT2h2QixFQUFFNnBCLE1BQVExYixFQUFNeFgsVUFDaERtSyxFQUFFNk0sT0FBTyxTQUFTbEssTUFBTXpELEdBQU8sR0FBRUEsRUFBRXlCLFNBQVN6QixFQUFFVixTQUFRLElBRTNDZ3FCLEdBQ1hBLEVBQ0NRLFdBQVcxbkIsRUFBR21yRyxZQUNkNW5HLE1BQU0sS0FDTm9rQixTQUFTLEtBQ1R2dkIsS0FBSyxLQUFNd0YsR0FBTUEsRUFBRXF0RyxLQUNuQjd5RyxLQUFLLEtBQU13RixHQUFNQSxFQUFFc3RHLEtBQ25COXlHLEtBQUssVUFBV3dGLEdBQU1BLEVBQUV3dEcsR0FBS3h0RyxFQUFFc3RHLEtBQy9COXlHLEtBQUssU0FBVXdGLEdBQU1BLEVBQUVwQixHQUFLb0IsRUFBRXF0RyxLQUM5Qjd5RyxLQUFLLGFBQWN3RixHQUFNQSxFQUFFNnBCLFFBQzNCcnZCLEtBQUssUUFBU3dGLEdBQU1ndkIsRUFBT2h2QixFQUFFNnBCLE1BQVExYixFQUFNeFgsVUFDM0N5VCxPQUFPLFNBQ1AzRyxNQUFNekQsR0FBTyxHQUFFQSxFQUFFeUIsU0FBU3pCLEVBQUVWLFlBQ2xCMnFCLEdBQ1hBLEVBQUtILFdBQVcxbkIsRUFBR21yRyxZQUFZeGpGLFNBQVMsS0FBSy9mLE1BQU0sVUFBVyxHQUFHNEssV0FDaEU1VCxHQUFHLFlBQVksU0FBU2hILEdBZ0J0QixJQUdEb0ksRUFBR2dJLE9BQU9vaEcsRUFBaUI3d0csT0FDN0J5UCxPQUFPLFdBQ1B1RixVQUFVLFFBQ1YzVixLQUFLbVUsR0FDTDVULE1BQ1dxVixJQUNEQSxFQUFNakMsT0FBTyxRQUVyQm1jLFdBQVcxbkIsRUFBR21yRyxZQUNYNW5HLE1BQU0sS0FDTm9rQixTQUFTLEtBQ1R2dkIsS0FBSyxLQUFNd0YsR0FBT0EsRUFBRXF0RyxHQUFLbitGLEVBQUtwRyxNQUFRLEVBQUk5SSxFQUFFcEIsR0FBSyxFQUFJb0IsRUFBRXF0RyxHQUFLLElBQzVEN3lHLEtBQUssS0FBTXdGLElBQU9BLEVBQUV3dEcsR0FBS3h0RyxFQUFFc3RHLElBQU0sSUFDakM5eUcsS0FBSyxRQUFTd0YsR0FBTW9DLEVBQUdxckcsSUFBSXorRSxFQUFPaHZCLEVBQUU2cEIsTUFBUTFiLEVBQU14WCxTQUFTKzJHLFdBQzNEbHpHLEtBQUsscUJBQXNCLFVBQzNCQSxLQUFLLGVBQWdCd0YsR0FDdkJBLEVBQUVxdEcsR0FBS24rRixFQUFLcEcsTUFBUSxFQUFJLFFBQVUsUUFFaEN0TyxLQUFLLFlBQWEsR0FDbEJpSixNQUFNekQsR0FBTUEsRUFBRXlCLE1BQUssSUFFYjZuQixHQUNYQSxFQUNDUSxXQUFXMW5CLEVBQUdtckcsWUFDZDVuRyxNQUFNLEtBQ05va0IsU0FBUyxLQUNUdnZCLEtBQUssS0FBTXdGLEdBQU9BLEVBQUVxdEcsR0FBS24rRixFQUFLcEcsTUFBUSxFQUFJOUksRUFBRXBCLEdBQUssRUFBSW9CLEVBQUVxdEcsR0FBSyxJQUM1RDd5RyxLQUFLLEtBQU13RixJQUFPQSxFQUFFd3RHLEdBQUt4dEcsRUFBRXN0RyxJQUFNLElBQ2pDOXlHLEtBQUssUUFBU3dGLEdBQU1vQyxFQUFHcXJHLElBQUl6K0UsRUFBT2h2QixFQUFFNnBCLE1BQVExYixFQUFNeFgsU0FBUysyRyxXQUMzRGx6RyxLQUFLLGVBQWdCd0YsR0FDaEJBLEVBQUVxdEcsR0FBS24rRixFQUFLcEcsTUFBUSxFQUFJLFFBQVUsUUFFdkN0TyxLQUFLLFlBQWEsR0FDbEJpSixNQUFNekQsR0FBTUEsRUFBRXlCLFNBQ0p3b0IsR0FDWEEsRUFDQ0gsV0FBVzFuQixFQUFHbXJHLFlBRWR4akYsU0FBUyxLQUNUL2YsTUFBTSxVQUFXLEdBQ2pCNEssV0FHQ3hTLEVBQUdnSSxPQUFPb2hHLEVBQWlCN3dHLE9BQzdCeVAsT0FBTyxRQUNQdUYsVUFBVSxrQkFDVjNWLEtBQUtrVSxHQUNMM1QsTUFDV3FWLElBQ1gsTUFBTSs5RixFQUFLLzlGLEVBQU1qQyxPQUFPLGtCQUV4QmdnRyxFQUFHbnpHLEtBQUssTUFBT3dGLEdBQU8sWUFBV0EsRUFBRTZwQixVQUM5QnJ2QixLQUFLLGdCQUFpQixrQkFDdEJBLEtBQUssTUFBT3dGLEdBQU1BLEVBQUVzTyxPQUFPMVAsS0FDM0JwRSxLQUFLLE1BQU93RixHQUFNQSxFQUFFa0IsT0FBT21zRyxLQUVoQ00sRUFBR2hnRyxPQUFPLFFBQ0xuVCxLQUFLLFNBQVUsS0FDZkEsS0FBSyxjQUFld0YsR0FBTWd2QixFQUFPaHZCLEVBQUVzTyxPQUFPdWIsTUFBUTFiLEVBQU14WCxVQUU3RGczRyxFQUFHaGdHLE9BQU8sUUFDTG5ULEtBQUssU0FBVSxRQUNmQSxLQUFLLGNBQWV3RixHQUFNZ3ZCLEVBQU9odkIsRUFBRWtCLE9BQU8yb0IsTUFBUTFiLEVBQU14WCxTQUFRLElBRTFEMnlCLElBQ1hBLEVBQ0s5dUIsS0FBSyxNQUFPd0YsR0FBTyxZQUFXQSxFQUFFNnBCLFVBQ2hDcnZCLEtBQUssZ0JBQWlCLGtCQUN0QkEsS0FBSyxNQUFPd0YsR0FBTUEsRUFBRXNPLE9BQU8xUCxLQUMzQnBFLEtBQUssTUFBT3dGLEdBQU1BLEVBQUVrQixPQUFPbXNHLEtBQ2hDL2pGLEVBQU8zWixVQUFVLFFBQVFpRixTQUN6QjBVLEVBQ0szYixPQUFPLFFBQ1BuVCxLQUFLLFNBQVUsS0FDZkEsS0FBSyxjQUFld0YsR0FBTWd2QixFQUFPaHZCLEVBQUVzTyxPQUFPdWIsTUFBUTFiLEVBQU14WCxVQUU3RDJ5QixFQUNLM2IsT0FBTyxRQUNQblQsS0FBSyxTQUFVLFFBQ2ZBLEtBQUssY0FBZXdGLEdBQU1ndkIsRUFBT2h2QixFQUFFa0IsT0FBTzJvQixNQUFRMWIsRUFBTXhYLFNBQVEsSUFFMURzekIsR0FBU0EsRUFBS3JWLFdBR3ZCeFMsRUFBR2dJLE9BQU9vaEcsRUFBaUI3d0csT0FDN0J5UCxPQUFPLFdBQ1B1RixVQUFVLFFBQ1YzVixLQUFLa1UsR0FDTDNULE1BQ1dxVixJQUNYLE1BQU05TyxFQUFJOE8sRUFBTWpDLE9BQU8sUUFDdkI3TSxFQUFFZ3BCLFdBQVcxbkIsRUFBR21yRyxZQUNYNW5HLE1BQU0sS0FDTm9rQixTQUFTLEtBQ1R2dkIsS0FBSyxJQUFLNEgsRUFBR3dyRyx3QkFDYnB6RyxLQUFLLFVBQVd3RixHQUFPLGlCQUFnQkEsRUFBRTZwQixVQUN6Q3J2QixLQUFLLGdCQUFpQndGLEdBQU1BLEVBQUU4SSxRQUNuQ2hJLEVBQUU2TSxPQUFPLFNBQVNsSyxNQUFNekQsR0FBTyxHQUFFQSxFQUFFVixTQUFRLElBRWhDZ3FCLEdBQ1hBLEVBQ0NRLFdBQVcxbkIsRUFBR21yRyxZQUNkNW5HLE1BQU0sS0FDTm9rQixTQUFTLEtBQ1R2dkIsS0FBSyxJQUFLNEgsRUFBR3dyRyx3QkFDYnB6RyxLQUFLLFVBQVd3RixHQUFPLGlCQUFnQkEsRUFBRTZwQixVQUN6Q3J2QixLQUFLLGdCQUFpQndGLEdBQU1BLEVBQUU4SSxRQUM5QnNCLE9BQU8sU0FDUDNHLE1BQU16RCxHQUFPLEdBQUVBLEVBQUVWLFlBQ1AycUIsR0FDWEEsRUFDQ0gsV0FBVzFuQixFQUFHbXJHLFlBRWR4akYsU0FBUyxLQUNUL2YsTUFBTSxVQUFXLEdBQ2pCNEssVUFFSCxDQXBMSWk1RixFQUFhLGdkQzhCakIsTUFBTUMsR0FBZ0MsZ0NBRXZCLElBQUFDLEdBQUEsQ0FDYnZ1RCxXQUFZLENBQ1ZqeEIsTUFBU3kvRSxHQUNUclMsVUFBYUMsR0FDYix1QkFBd0JDLEdBQ3hCLFdBQVlDLElBRWR0dkQsTUFBTyxDQUNMdXZELFVBQVdya0csT0FDWHlzQixXQUFZamMsT0FDWit5RSxLQUFNdmpGLE9BQ051MkcsY0FBZWw0RCxTQUtqQjhJLFVBQ0VucEQsS0FBS3c0RyxpQkFBbUJudUYsRUFBbUJDLGNBQWMsU0FBV3RxQixLQUFLb25ELE9BQU9tK0IsS0FDaEZ2bEYsS0FBSzBsRyxTQUFTajFGLFNBQVN4SyxJQUNyQmpHLEtBQUt3NEcsa0JBQW9CdnlHLEVBQUVzRixHQUFLdEYsRUFBRW9uQyxRQUFTLEVBQU9wbkMsRUFBRW9uQyxRQUFTLENBQUksSUE2R3ZFLFNBQXlCb3JFLEdBQ3ZCLE1BQU1oUyxFQUFrQixHQUd4QkEsRUFBZ0J2OEYsS0FBSyxDQUNuQjZELEtBQU0sOEJBQ055d0IsVUFBVyxXQUNYM3NCLE9BQVEsU0FBVXpHLEVBQUdxWixFQUFJZ2MsRUFBTXJ2QixHQUM3QnFuRyxFQUFROVIsY0FDVixJQUdGLElBQUlDLEVBQWFuNEUsV0FDakJtNEUsRUFBaUIsS0FBSSxlQUVyQixJQUFJQyxFQUF5QixDQUMzQnJJLGNBQWVpSSxFQUNmOUksU0FBVXQ2RixVQUFVeTdGLFNBQVUsR0FBRWg3RiwrQ0FBZ0Q4aUcsR0FDaEZySixlQUFlLEVBQ2ZlLGFBQWMsQ0FDWmxCLFlBQVksRUFDWkksTUFBTyxDQUFDLENBQUUsRUFBMkIsU0FDckMvWCxXQUFZLENBQ1YsQ0FBRS8vRSxLQUFNLFdBQVlnZ0YsUUFBUyxHQUM3QixDQUFFaGdGLEtBQU0sWUFBYWdnRixRQUFTLEdBQzlCLENBQUVoZ0YsS0FBTSxZQUFhZ2dGLFFBQVMsR0FDOUIsQ0FBRWhnRixLQUFNLFlBQWFnZ0YsUUFBUyxNQU9oQ3R1RSxFQUFVLENBQ1osQ0FBRXV1RSxXQUFZNW5ELEtBQUssNEJBQTZCMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLGNBQWV6SCxLQUFNLGNBQWVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDakssWUFBV1IseUNBQXlDMjBHLEVBQVFyeEQsT0FBTzM0QixXQUFXOWhCLFFBQVE4ckcsRUFBUXJ4RCxPQUFPMzRCLFdBQVcyVSxxREFBcUQ5K0IsRUFBSzRRLDBCQUEwQjVRLEVBQUs0USxhQUdyTixDQUFFeXdFLFdBQVk1bkQsS0FBSyx5QkFBMEIybkQsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sV0FBWXpILEtBQU0sV0FBWWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUN6SmpCLFVBQVUrRyxjQUFjOUYsSUFHbkMsQ0FBRXFoRixXQUFZNW5ELEtBQUsscUJBQXNCMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLE9BQVF6SCxLQUFNLGFBQWNrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDbkpqQixVQUFVMnlCLFlBQVkxeEIsSUFHakMsQ0FBRXFoRixXQUFZNW5ELEtBQUsscUJBQXNCMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLE9BQVF6SCxLQUFNLGFBQWVrNkIsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUNoS2pCLFVBQVUyeUIsWUFBWTF4QixJQUdqQyxDQUFFcWhGLFdBQVk1bkQsS0FBSywwQkFBMkIybkQsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sWUFBYXpILEtBQU0sWUFBYTRoRixXQUFXLEVBQU8xbkQsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBUSxDQUFDaDRCLEVBQU1vQixFQUFNcWQsS0FDN00sTUFBTTIxRixFQUFvQyxJQUFqQjMxRixFQUFJNDFGLFdBQW9CNTFGLEVBQUk2MUYsVUFDL0NDLEVBQW9DLElBQWpCOTFGLEVBQUkrMUYsV0FBb0IvMUYsRUFBSTYxRixVQUNyRCxPQUFPdjFHLFVBQVUwMUcsZ0JBQWdCTCxFQUFpQkcsRUFBaUI5NkUsS0FBSyxxQkFBc0JBLEtBQUsscUJBQXFCLEdBRzVILENBQUU0bkQsV0FBWTVuRCxLQUFLLDBCQUEyQjJuRCxRQUFTLEVBQUd0eUUsTUFBTyxLQUFNckgsS0FBTSxZQUFhekgsS0FBTSxZQUFhazZCLFVBQVcsMEJBQTJCNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDeEtqQixVQUFVMnlCLFlBQVkxeEIsSUFHakMsQ0FBRXFoRixXQUFZNW5ELEtBQUssK0JBQWdDMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLGFBQWN6SCxLQUFNLGFBQWVrNkIsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixJQUN2TCxNQUFNc1IsRUFBYXRSLEVBQUtpQyxRQUFRLEdBQ2hDLE9BQU9sRCxVQUFVOGlGLGtCQUFrQnZ3RSxFQUFXLElBS2pEMmlHLGVBQ0RFLEVBQVFPLGtCQUFrQjVoRyxFQUFTLFVBQVcsZUFFaEQsSUFBSTZoRyxFQUFxQnR2RixlQUFlTSxNQUFNNDhFLEdBQzlDb1MsRUFBbUJ4YixlQUFpQnJtRixFQUNwQ3FoRyxFQUFRUyw0QkFBOEJELEVBS3RDclMsRUFBaUIsS0FBSSxhQUNyQkMsRUFBdUJsSixTQUFXdDZGLFVBQVV5N0YsU0FBVSxHQUFFaDdGLCtDQUFnRDhpRyxHQUd4R3h2RixFQUFVLENBQ1IsQ0FBRXV1RSxXQUFZNW5ELEtBQUsseUJBQTBCMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLFdBQVl6SCxLQUFNLFdBQVlrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDeEosWUFBV1IseUNBQXlDMjBHLEVBQVFyeEQsT0FBTzM0QixXQUFXOWhCLFFBQVE4ckcsRUFBUXJ4RCxPQUFPMzRCLFdBQVcyVSxnRUFBZ0U5K0IsRUFBSzRRLDBCQUEwQjVRLEVBQUs0USxhQUdoTyxDQUFFeXdFLFdBQVk1bkQsS0FBSyw2QkFBOEIybkQsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sZUFBZ0J6SCxLQUFNLGVBQWdCNGhGLFdBQVcsRUFBTzFuRCxVQUFXLGNBQWU0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUN0TCxHQUFFQSxFQUFLNFEsT0FBUyxlQUFlcFIsZUFBZVEsRUFBS3VPLE9BQU92TyxFQUFLNjBHLGdCQUFnQjcwRyxFQUFLODBHLGFBQWUsVUFHL0csQ0FBRXp6QixXQUFZNW5ELEtBQUsseUJBQTBCMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLFdBQVl6SCxLQUFNLFdBQVlrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDekpqQixVQUFVK0csY0FBYzlGLElBR25DLENBQUVxaEYsV0FBWTVuRCxLQUFLLDBCQUEyQjJuRCxRQUFTLEVBQUd0eUUsTUFBTyxLQUFNckgsS0FBTSxZQUFhekgsS0FBTSxZQUFhazZCLFVBQVcsMEJBQTJCNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDeEtqQixVQUFVMnlCLFlBQVkxeEIsSUFHakMsQ0FBRXFoRixXQUFZNW5ELEtBQUssK0JBQWdDMm5ELFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLGFBQWN6SCxLQUFNLGFBQWM4TyxNQUFPLE1BQU9vckIsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixJQUNwTSxNQUFNc1IsRUFBYXRSLEVBQUtpQyxRQUFRLEdBQ2hDLE9BQU9sRCxVQUFVOGlGLGtCQUFrQnZ3RSxFQUFXLElBS2pEMmlHLGVBQ0RFLEVBQVFPLGtCQUFrQjVoRyxFQUFTLFFBQVMsWUFFOUMsSUFBSWlpRyxFQUFtQjF2RixlQUFlTSxNQUFNNDhFLEdBQzVDd1MsRUFBaUI1YixlQUFpQnJtRixFQUNsQ2lpRyxFQUFpQi9hLGFBQWFkLE1BQVEsQ0FBQyxDQUFFLEVBQTJCLFNBQ3BFNmIsRUFBaUIvYSxhQUFhN1ksV0FBYSxDQUN6QyxDQUFFLy9FLEtBQU0sV0FBWWdnRixRQUFTLEdBQzdCLENBQUVoZ0YsS0FBTSxZQUFhZ2dGLFFBQVMsSUFHaEMreUIsRUFBUWEsMEJBQTRCRCxDQUN0QyxDQWhPSWxTLENBQWdCbm5HLEtBQ2pCLEVBQ0R3bEQsVUFDRXAxQixFQUFzQlMsZ0JBQWdCLGdDQUFpQ3VuRixJQUFnQ3RzRyxJQUN0RyxJQUFJb0wsRUFBUWxYLEtBQUtxbkcsbUJBQ2hCaDlFLEVBQW1CTSxlQUFlLE9BQVE3ZSxFQUFJUCxJQUM5QzJMLEVBQU1pb0YsZ0JBQ05uL0YsS0FBS3c0RyxpQkFBbUIxc0csRUFBSVAsRUFBRSxHQUVqQyxFQUNEakgsT0FDRSxNQUFPLENBQ0x5NUIsS0FBT2pwQixHQUFNaXBCLEtBQUtqcEIsR0FDbEIwakcsaUJBQWtCLEtBQ2xCVSw0QkFBNkIsS0FDN0JJLDBCQUEyQixLQUMzQnAvQixjQUFlLENBQ2IsQ0FDRW5xRSxNQUFPZ3VCLEtBQUssZ0NBQ1pyNEIsS0FBTWl6QixjQUFjOEMsVUFBVUksSUFDOUJ2NUIsSUFBTSxHQUFFd0IscURBQ1JnSSxJQUFNLGVBQ05QLEdBQUssb0JBRVAsQ0FDRXdFLE1BQU9ndUIsS0FBSyxvQkFDWnI0QixLQUFNaXpCLGNBQWM4QyxVQUFVSSxJQUM5QnY1QixJQUFNLEdBQUV3QixxREFDUmdJLElBQU0sZUFDTlAsR0FBSyxhQUVQLENBQ0V3RSxNQUFPZ3VCLEtBQUssaUNBQ1pyNEIsS0FBTWl6QixjQUFjOEMsVUFBVUksSUFDOUJ2NUIsSUFBTSxHQUFFd0IsbURBQ1JnSSxJQUFNLGFBQ05QLEdBQUssa0JBRVAsQ0FDRXdFLE1BQU9ndUIsS0FBSyxvQkFDWnI0QixLQUFNaXpCLGNBQWM4QyxVQUFVSSxJQUM5QnY1QixJQUFNLEdBQUV3QixxREFDUmdJLElBQU0sYUFDTlAsR0FBSyxjQUdUbTZGLFNBQVUsQ0FDUixDQUNFMzFGLE1BQU9ndUIsS0FBSyxpQ0FDWnNQLE9BQTZCLGdCQUFwQnJ0QyxLQUFLb25ELE9BQU9tK0IsS0FDckJoNkUsR0FBSSxnQkFFTixDQUNFd0UsTUFBT2d1QixLQUFLLCtCQUNac1AsT0FBNkIsY0FBcEJydEMsS0FBS29uRCxPQUFPbStCLEtBQ3JCaDZFLEdBQUksZUFJWCxFQUNEeTlDLFFBQVMsQ0FDUGd3RCxrQkFBbUIsU0FBUzVoRyxFQUFTckwsRUFBTTlHLEdBQ3pDLE1BQU0wSCxFQUFRLEdBQUUzTSxLQUFLb25ELE9BQU8zNEIsV0FBVzloQixPQUNqQ3kyQixFQUFRLEdBQUVwakMsS0FBS29uRCxPQUFPMzRCLFdBQVcyVSxPQUNqQ3drRCxFQUFRLEdBQUU1bkYsS0FBS29uRCxPQUFPMzRCLFdBQVdtNUQsT0FDdkMsSUFBSXhxRCxFQUFZLG9DQUNoQmhtQixFQUFRbE4sS0FBSyxDQUFFeTdFLFdBQVk1bkQsS0FBSyxXQUFZM3FCLE1BQU8sS0FBTXJILEtBQU0sVUFBV3l5QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBR2hwRCxZQUFXZCxPQUFRLENBQUNoNEIsRUFBTW9CLEVBQU1rZ0YsS0FDM0ssTUFBTVcsRUFBcUIsQ0FDekJucEQsWUFDQUMsUUFBUyxLQUNQLElBQUkvNkIsRUFBTyxHQUFFd0IsMENBQTBDOGpGLEtBQVE3N0UsS0FBUTY1RSxFQUFRM2dGLEdBQU9zRyxZQUFZb0IsT0FDdkYsR0FBUnkyQixJQUNEOWdDLEVBQU8sR0FBRUEsYUFBZThnQyxRQUMxQnozQixPQUFPbTdFLEtBQUt4a0YsRUFBRyxHQUduQixPQUFPbTdCLGVBQWVzcEQsb0JBQW9CLENBQUMsQ0FBRWxvRCxNQUFPLGdCQUFpQmhzQixLQUFNLElBQUs5QyxNQUFPZ3VCLEtBQUssK0JBQWdDVyxRQUFTNm5ELElBQXFCLEdBRTdKLEVBQ0RodkQsUUFBUyxXQUNLdjNCLEtBQUtxbkcsbUJBQ1hsSSxlQUNQLEVBRUR3SSxXQUFZLFNBQVMxekYsR0FDbkJqVSxLQUFLMGxHLFNBQVNqMUYsU0FBU3hLLEdBQU1BLEVBQUVvbkMsUUFBUyxJQUN4Q3A1QixFQUFLbzVCLFFBQVMsRUFDZGpkLEVBQXNCUSxrQkFBa0J3bkYsR0FBK0Jua0csRUFDeEUsRUFDRDB5RixhQUFjLFdBQ1osSUFBSXp2RixFQUFRbFgsS0FBS3FuRyxtQkFDakJoa0csVUFBVTg2RixlQUNWam5GLEVBQU1tWCxTQUNOaHJCLFVBQVVnN0YsY0FDWCxFQUNEZ0osaUJBQWtCLFdBQ2hCLE9BQU9ybkcsS0FBS3VuRCxNQUFPLGNBQWF2bkQsS0FBS3c0RyxtQkFDdEMsRUFDRHZXLCtCQUE4QixLQUM1QmgrRixRQUFRK0IsSUFBSSxVQUNMdVgsU0FDRXFpRixxQkFBcUIzNkYsTUFBTWk5RixhQUFhaG9CLGlDQ25MNUMsaUJBQ0UsaUNBQ0UsY0FPSCxNQUFBLENBTkRyN0MsTUFBSSxtRkFBQSxDQUNQOGlELEdBSU0sTUFBQSxDQUpEOWlELE1BQUEsZUFBQSxDQUNIOGlELEdBRU0sTUFBQSxDQUZMOWlELE1BQUEsbUNBQUFpRSxLQUFBLFdBQ0M2K0MsR0FBZ0IsT0FBVixDQUFBOWlELE1BQU0sNkJBQUksdUJBSWhCNmlELEdBQUEsQ0FBQTdpRCxNQUFLLGFBQ0wyakQsR0FBQSxDQUFBajNFLEdBQUcsdUNBT00sZ0JBQWdCQSxHQUFHLDZCQUVyQm8zRSxHQUFBLENBQUE5akQsTUFBTSxtQkFDNEJBLE1BQUEsNEpBWHpDOGlELFNBQUFELE9Bb0NQLFNBQUEsQ0FsQ0tyckIsR0FJVzB4QyxFQUFBLENBSkQ3a0QsSUFBQSw2RUFFUHdpRCxTQUFVditDLEVBQVF1K0MsU0FDbEJzQyxhQUFZbmdELEVBQVU4L0MsbURBZW5CLFNBQUEsU0FYRTNrQixHQVVLd3NCLEdBQUEsS0FBQUMsR0FWZXRvRCxFQUFBK3lCLGVBQVRxL0IsSUFDWDNSLEtBQUE1a0IsR0FRQyxNQVJETCxHQVFDLENBUE80MkIsRUFBYXp0RyxLQUFPcTdDLEVBQU9xeEQsa0JBQW5DNVEsS0FBQTVrQixHQUFtQyxLQUFuQ0osR0FBbUN1WixHQUFBb2QsRUFBQXhwRyxPQUFBLGtCQUN4QndwRyxFQUFhenRHLEtBQU9xN0MsRUFBR3F4RCx1QkFBbEM1YyxZQUNDcndGLEdBQUlndUcsRUFBQWh1RyxHQUNKc3VFLFdBQUEwL0IsRUFBQTd6RyxLQUNBcTBFLGlCQUFHdy9CLEVBQUFqM0csSUFDUHczRSwyQkFBQSw4RUFNNEIsZ0JBQWhCM3lCLEVBQWdCcXhELDBCQU1yQnZRLEVBQUEsT0FOeUMva0QsSUFBSSwwQkFDdERzN0MsY0FBZXIzQyxFQUEyQit4RCw0QkFBQzFhLGNBQzNDZixlQUFRdDJDLEVBQUEreEQsNEJBQUF6YixlQUNSRSxTQUFVeDJDLEVBQTJCK3hELDRCQUFDdmIsU0FDdENKLGNBQWVwMkMsRUFBMkIreEQsNEJBQUMzYixjQUMzQ2UsYUFBY24zQyxFQUEyQit4RCw0QkFBQzVhLGtIQUVaLGNBQWhCbjNDLEVBQWdCcXhELDBCQU1wQ3ZRLEVBQUEsT0FOc0Qva0QsSUFBSSx3QkFDcERzN0MsY0FBZXIzQyxFQUF5Qm15RCwwQkFBQzlhLGNBQ3pDZixlQUFRdDJDLEVBQUFteUQsMEJBQUE3YixlQUNSRSxTQUFBeDJDLEVBQUFteUQsMEJBQUEzYixTQUNGSixjQUFBcDJDLEVBQUFteUQsMEJBQUEvYixjQUNGZSxhQUFBbjNDLEVBQUFteUQsMEJBQUFoYixzdkJDRlQsTUFBTWtiLEVBQWdCdDJELEdBQUksTUFDWEEsR0FBSSxJQUNuQixNQUFNdTJELEVBQXVCdjJELEdBQUksQ0FBQSxHQXNCakN3ZSxJQUFjbmtELFdBNkJkLFNBQXlCazdGLEdBQ3ZCLE1BQU1oUyxFQUFrQixHQUN4QixJQUFJaDRFLEVBQWEsQ0FBQSxFQUVqQkEsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBQ3REbUUsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBQ3REbUUsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBR3REbThFLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFNBQVV6RyxFQUFHcVosRUFBSWdjLEVBQU1ydkIsR0E1Q2pDb29HLEVBQWN2MEcsTUFBTW9wQixRQThDbEIsSUFHRixJQUFJdzRFLEVBQXlCLENBQzNCckksY0FBZWlJLEVBQ2Y5SSxTQUFVdDZGLFVBQVV5N0YsU0FBVSxHQUFFaDdGLCtDQUFnRDJxQixHQUNoRjh1RSxlQUFlLEVBQ2ZlLGFBQWMsQ0FDWmxCLFlBQVksRUFDWkksTUFBTyxDQUFDLENBQUUsRUFBMkIsU0FDckMvWCxXQUFZLENBQ1YsQ0FBRS8vRSxLQUFNLFdBQVlnZ0YsUUFBUyxHQUM3QixDQUFFaGdGLEtBQU0sWUFBYWdnRixRQUFTLEdBQzlCLENBQUVoZ0YsS0FBTSxZQUFhZ2dGLFFBQVMsR0FDOUIsQ0FBRWhnRixLQUFNLFlBQWFnZ0YsUUFBUyxNQU9oQ3R1RSxFQUFVLENBQ1osQ0FBRXV1RSxXQUFZNW5ELEtBQUssWUFBYTJuRCxRQUFTLEVBQUczNUUsS0FBTSxXQUFZekgsS0FBTSxXQUFZazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDOUgsQ0FBRVQsV0FBWTVuRCxLQUFLLFNBQVUybkQsUUFBUyxFQUFHMzVFLEtBQU0sYUFBY3pILEtBQU0sYUFBY2s2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQy9ILENBQUVULFdBQVk1bkQsS0FBSyw2QkFBOEIybkQsUUFBUyxFQUFHMzVFLEtBQU0sT0FBUXpILEtBQU0sYUFBY2s2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUM5SWpCLFVBQVUyeUIsWUFBWTF4QixJQUdqQyxDQUFFcWhGLFdBQVk1bkQsS0FBSyw2QkFBOEIybkQsUUFBUyxFQUFHMzVFLEtBQU0sT0FBUXpILEtBQU0sYUFBZWs2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsRUFBRzlwRCxPQUFTaDRCLEdBQzNKakIsVUFBVTJ5QixZQUFZMXhCLElBR2pDLENBQUVxaEYsV0FBWTVuRCxLQUFLLDRCQUE2QjJuRCxRQUFTLEVBQUczNUUsS0FBTSxZQUFhekgsS0FBTSxZQUFhNGhGLFdBQVcsRUFBTzFuRCxVQUFXLDBCQUEyQjRuRCxtQkFBb0IsRUFBRzlwRCxPQUFRLENBQUNoNEIsRUFBTW9CLEVBQU1xZCxLQUNsTSxNQUFNMjFGLEVBQW9DLElBQWpCMzFGLEVBQUk0MUYsV0FBb0I1MUYsRUFBSTIyRixZQUMvQ2IsRUFBb0MsSUFBakI5MUYsRUFBSSsxRixXQUFvQi8xRixFQUFJMjJGLFlBQ3JELE9BQU9yMkcsVUFBVTAxRyxnQkFBZ0JMLEVBQWlCRyxFQUFpQjk2RSxLQUFLLHFCQUFzQkEsS0FBSyxxQkFBcUIsR0FHNUgsQ0FBRTRuRCxXQUFZNW5ELEtBQUssOEJBQStCMm5ELFFBQVMsRUFBRzM1RSxLQUFNLFlBQWF6SCxLQUFNLGNBQWVrNkIsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUNqS2pCLFVBQVUyeUIsWUFBWTF4QixJQUdqQyxDQUFFcWhGLFdBQVk1bkQsS0FBSyxtQ0FBb0MybkQsUUFBUyxFQUFHdHlFLE1BQU8sTUFBT3JILEtBQU0sYUFBY3pILEtBQU0sbUJBQXFCazZCLFVBQVcsMEJBQTJCNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsSUFDbE0sTUFBTXNSLEVBQWF0UixFQUFLaUMsUUFBUSxHQUNoQyxPQUFPbEQsVUFBVThpRixrQkFBa0J2d0UsRUFBVyxJQUtoRCtqRyxFQUFnQmh3RixlQUFlTSxNQUFNNDhFLEdBQ3pDOFMsRUFBY2xjLGVBQWlCcm1GLEVBQy9CcWlHLEVBQXFCeDBHLE1BQVEwMEcsQ0FDL0IsQ0E5RkV4UyxFQUFpQixJQUduQnBsQyxJQUFZeGtELFVBWFZpOEYsRUFBY3YwRyxNQUFNazZGLGVBWVgsSUFHWCxNQUFNamxCLEVBQWdCLENBQ3BCLENBQ0VucUUsTUFBT2d1QixLQUFLLG1CQUNacjRCLEtBQU1pekIsY0FBYzhDLFVBQVVJLElBQzlCdjVCLElBQU0sR0FBRXdCLHFEQUNSeUgsR0FBSyxrQkFFUCxDQUNFd0UsTUFBT2d1QixLQUFLLDBCQUNacjRCLEtBQU1pekIsY0FBYzhDLFVBQVVJLElBQzlCdjVCLElBQU0sR0FBRXdCLCtEQUNSeUgsR0FBSyxtQkFFUCxDQUNFd0UsTUFBT2d1QixLQUFLLGtCQUNacjRCLEtBQU1pekIsY0FBYzhDLFVBQVVJLElBQzlCdjVCLElBQU0sR0FBRXdCLHVEQUNSeUgsR0FBSyw2ckNDckRULE1BQU0ydUUsRUFBZ0IsQ0FDcEIsQ0FDRW5xRSxNQUFPZ3VCLEtBQUssdUJBQ1pyNEIsS0FBTWl6QixjQUFjOEMsVUFBVUksSUFDOUJ2NUIsSUFBTSxHQUFFd0IseURBQ1J5SCxHQUFLLGdCQUVQLENBQ0V3RSxNQUFPZ3VCLEtBQUssdUJBQ1pyNEIsS0FBTWl6QixjQUFjOEMsVUFBVUksSUFDOUJ2NUIsSUFBTSxHQUFFd0IseURBQ1J5SCxHQUFLLGdCQUVQLENBQ0V3RSxNQUFPZ3VCLEtBQUssb0JBQ1pyNEIsS0FBTWl6QixjQUFjOEMsVUFBVUksSUFDOUJ2NUIsSUFBTSxHQUFFd0IsOERBQ1J5SCxHQUFLLGFBRVAsQ0FDRXdFLE1BQU9ndUIsS0FBSywyQkFDWnI0QixLQUFNaXpCLGNBQWM4QyxVQUFVSSxJQUM5QnY1QixJQUFNLEdBQUV3Qix3REFDUnlILEdBQUssaUJBSVQsU0FBU3F1RyxFQUFXdDFHLEVBQU1zaEcsRUFBS2lVLEdBQzdCeDJHLEVBQVVnN0YsY0FDWixRQUVBMThCLElBQVUsb21CQzdEVixNQUFNbTRDLEVBQVU1MkQsR0FBSSxhQWFwQndQLEVBQWEsQ0FBRXFuRCxhQUpmLFNBQXNCeDJHLEVBQU8sS0FDM0I5QixFQUFFcTRHLEVBQVE3MEcsT0FBT3ZCLFFBQVFILEVBQzNCLEVBRTZCeTJHLGFBVDdCLFNBQXNCejJHLEVBQU8sS0FDM0I5QixFQUFFcTRHLEVBQVE3MEcsT0FBT3hCLE9BQU9GLEVBQzFCLGluQkNKTW1KLEVBQUsrbUYsS0FZTHdtQixFQUFVLzJELElBQUksR0FTZDR5RCxFQUFtQjV5RCxHQUFJLE1BQ3ZCNnlELEVBQWM3eUQsR0FBSSxDQUFBLEdBYXhCLFNBQVNnM0QsRUFBZ0JucEcsR0FDakJBLElBQ1B0UCxFQUFFLFNBQVVxMEcsRUFBaUI3d0csT0FBTytNLFFBQ3BDdlEsRUFBRSxTQUFVcTBHLEVBQWlCN3dHLE9BQU8rTSxTQUVGLE1BQTNCOGtDLEVBQU1xakUsWUFBWTFoRyxPQUE0QyxNQUEzQnErQixFQUFNcWpFLFlBQVkzaEcsT0FDN0IsR0FBNUJzK0IsRUFBTXFqRSxZQUFZbDVHLFFBQWlELEdBQWxDNjFDLEVBQU1xakUsWUFBWTNoRyxNQUFNdlgsUUFHekRrM0csR0FDSixDQXJCQXoyQyxJQUFjbmtELGNBRWRva0QsSUFBVXBrRCxVQUNOMjhGLElBcUJBdnVHLE9BQU80cEQsaUJBQWlCLFVBQVUsSUFBTTJrRCxHQUFnQixJQXBCekMsSUFHbkJsd0QsSUFBTSxJQUFNbFQsRUFBTXFqRSxjQUFhLENBQUNwK0IsRUFBV2oyRCxLQUN2Q28wRixHQUFnQixFQUFLLElBbUJ6QixJQUFJL0MsRUFBUyxLQUNUaUQsRUFBYSxLQUNqQjc4RixlQUFlNDZGLElBQ1gsTUFBTTcrRSxFQUFTNXNCLEVBQUdzcEcsYUFBYXRwRyxFQUFHZ25GLGtCQUNsQyxJQUFJcHZGLEVBQU93eUMsRUFBTXFqRSxZQUNqQixNQUFNM2dHLEVBK0lWLFdBQ0lpWCxFQUFLLGdCQUNMLElBQUlyZCxFQUFRMGpDLEVBQU0xakMsTUFDTC9MLE1BQVQrTCxJQUFzQkEsRUFBUTNSLEVBQUVxMEcsRUFBaUI3d0csT0FBT3lTLFNBQVNBLFNBQVN0RSxRQUFVLElBRXhGcWQsRUFBSyxpQkFDTCxJQUFJcGQsRUFBU3lqQyxFQUFNempDLE9BQ0xoTSxNQUFWZ00sSUFBdUJBLEVBQVM1UixFQUFFcTBHLEVBQWlCN3dHLE9BQU95UyxTQUFTQSxTQUFTckUsU0FBVyxJQUUzRixNQUFPLENBQUVELFFBQU9DLFNBQ3BCLENBekppQjZqRyxHQTJKakIsSUFBdUI5akcsRUFBT0MsRUExSjFCMGlHLEVBQVk5d0csTUFBUXVVLEVBMEpEcEcsRUF6SklvRyxFQUFLcEcsTUFBUSxHQXlKVkMsRUF6SmNtRyxFQUFLbkcsT0FBUyxFQUF0RDhqRyxFQTBKZ0J6cUcsRUFBR3lxRyxTQUNuQkMsVUFBVTFxRyxFQUFHMnFHLGNBQ2JDLFVBQVUsSUFDVkMsWUE1TWUsSUE2TWZDLE9BQU8sQ0FDSixDQUFDLEVBQUcsR0FDSixDQUFDcGtHLEVBQU9DLEtBL0pYK21HLEVBQWFqRCxFQUFPN3lHLEdBQ3BCLE1BQU1rVSxNQUFFQSxFQUFLQyxNQUFFQSxHQUFVMmhHLEVBRXpCLElBQUlDLEVBQVczdEcsRUFBR2dJLE9BQU9vaEcsRUFBaUI3d0csT0FDNUN5UCxPQUFPLFdBQ1B1RixVQUFVLEtBQ1YzVixLQUFLbVUsR0FDTDVULE1BQU1xVixHQUFVQSxFQUFNakMsT0FBTyxPQUM3Qm5ULEtBQUssYUFBY3dGLEdBQU8sYUFBWUEsRUFBRXF0RyxPQUFPcnRHLEVBQUVzdEcsUUFFbENsckcsRUFBR3dzQixPQUNoQm9oRixZQUFZLENBQUMsRUFBRyxLQUNoQmh2RyxHQUFHLE9BQVFpdkcsR0FFWEYsRUFBU3BpRyxPQUFPLFFBSWxCblQsS0FBSyxVQUFXd0YsR0FBTUEsRUFBRXd0RyxHQUFLeHRHLEVBQUVzdEcsS0FDL0I5eUcsS0FBSyxTQUFVd0YsR0FBTUEsRUFBRXBCLEdBQUtvQixFQUFFcXRHLEtBQzlCN3lHLEtBQUssYUFBY3dGLEdBQU1BLEVBQUU2cEIsUUFDM0JydkIsS0FBSyxRQUFTd0YsR0FBTWd2QixFQUFPaHZCLEVBQUU2cEIsTUFBUTFiLEVBQU14WCxVQUMzQzZELEtBQUssUUFBUyxlQUNkQSxLQUFLLFFBQVMsZ0JBQ1o0SCxFQUFHdU4sVUFBVSxRQUFRaEMsT0FBTyxTQUFTbEssTUFBTXpELEdBQU8sR0FBRUEsRUFBRTRLLFVBR3REbWxHLEVBQVMvMUcsS0FBS21VLEdBQ2hCUixPQUFPLFFBSUhuVCxLQUFLLFFBQVMsU0FDZHdQLE1BQU0saUJBQWtCLFFBQzVCeFAsS0FBSyxRQUFTLG1CQUNWd1AsTUFBTSxnQkFBZ0IsU0FBU2hLLEdBQUssT0FBTyxDQUFJLElBQy9DeEYsS0FBSyxRQUFTd0YsR0FBTSxTQUV4QnhGLEtBQUssS0FBTXdGLEdBQU9BLEVBQUVxdEcsR0FBS24rRixFQUFLcEcsTUFBUSxFQUFTOUksRUFBRXBCLEdBQUtvQixFQUFFcXRHLEdBQWQsR0FBcUIsSUFDL0Q3eUcsS0FBSyxLQUFNd0YsSUFBT0EsRUFBRXd0RyxHQUFLeHRHLEVBQUVzdEcsSUFBTSxJQUM3Qjl5RyxLQUFLLHFCQUFzQixVQUMvQkEsS0FBSyxlQUFnQndGLEdBQ1RBLEVBQUVxdEcsR0FBS24rRixFQUFLcEcsTUFBUSxFQUFJLFFBQVUsUUFFMUN0TyxLQUFLLFlBQWEsSUFDbEJpSixNQUFNekQsR0FBTUEsRUFBRTRLLFFBQ2xCNUosR0FBRyxTQUFTLFNBQVNtTCxFQUFPK2pHLEdBQVcvcEYsRUFBSyxhQUFjK3BGLEVBQVNsMkcsS0FBTyxJQUN4RSsxRyxFQUNGbGdHLEtBQUt6TixFQUFHME4sT0FBT3FnRyxTQUFRbndHLEdBQUtBLElBQUdnQixHQUFHLFFBQVNvdkcsR0FBV3B2RyxHQUFHLE9BQVFxdkcsSUFFL0QsTUFBTUMsRUFBV2x1RyxFQUFHZ0ksT0FBT29oRyxFQUFpQjd3RyxPQUM1Q3lQLE9BQU8sV0FDUHVGLFVBQVUsS0FDVjNWLEtBQUtrVSxHQUNMM1QsTUFBTXFWLEdBQVVBLEVBQU1qQyxPQUFPLE9BRTdCLElBQUk0aUcsRUFBUUQsRUFBUzNpRyxPQUFPLGtCQUM1QjRpRyxFQUFNLzFHLEtBQUssTUFBT3dGLEdBQU8sWUFBV0EsRUFBRTZwQixVQUNwQ3J2QixLQUFLLGdCQUFpQixrQkFDdEJBLEtBQUssTUFBT3dGLEdBQU1BLEVBQUVzTyxPQUFPMVAsS0FDM0JwRSxLQUFLLE1BQU93RixHQUFNQSxFQUFFa0IsT0FBT21zRyxLQUU3QmtELEVBQU01aUcsT0FBTyxRQUNYblQsS0FBSyxTQUFVLEtBQ2ZBLEtBQUssY0FBZXdGLEdBQU1ndkIsRUFBT2h2QixFQUFFc08sT0FBT3ViLE1BQVExYixFQUFNeFgsVUFFMUQ0NUcsRUFBTTVpRyxPQUFPLFFBQ1huVCxLQUFLLFNBQVUsUUFDZkEsS0FBSyxjQUFld0YsR0FBTWd2QixFQUFPaHZCLEVBQUVrQixPQUFPMm9CLE1BQVExYixFQUFNeFgsVUFFMUQyNUcsRUFDRjNpRyxPQUFPLFFBQ0gzRCxNQUFNLGlCQUFrQixRQUM1QnhQLEtBQUssUUFBUyxlQUNkQSxLQUFLLElBQUs0SCxFQUFHd3JHLHdCQUVicHpHLEtBQUssZ0JBQWlCd0YsR0FDWmhLLEtBQUttaEIsSUFBSSxFQUFHblgsRUFBRThJLFNBS3BCdE8sS0FBSyxVQUFXd0YsR0FBTyxpQkFBZ0JBLEVBQUU2cEIsVUFLM0N5bUYsRUFDRTNpRyxPQUFPLFNBQ1BsSyxNQUFNekQsR0FBTyxHQUFFQSxFQUFFNEssU0FDdkIsQ0FFQSxTQUFTd2xHLEVBQVVqa0csRUFBT25NLEdBQ3RCQSxFQUFFd3dHLElBQU1ya0csRUFBTXhOLEVBQ2RxQixFQUFFeXdHLElBQU10a0csRUFBTThELEVBQ2RqUSxFQUFFMHdHLEtBQU8xd0csRUFBRXF0RyxHQUNYcnRHLEVBQUUyd0csS0FBTzN3RyxFQUFFc3RHLEdBQ1h0dEcsRUFBRTR3RyxLQUFPNXdHLEVBQUVwQixHQUNYb0IsRUFBRTZ3RyxLQUFPN3dHLEVBQUV3dEcsRUFDZCxDQUVELFNBQVM2QyxFQUFTbGtHLEVBQU9uTSxHQUNyQm9DLEVBQUdnSSxPQUFPMVUsTUFBTThFLEtBQUssYUFBYSxTQUFVd0YsR0FDL0MsTUFBTStQLEVBQUs1RCxFQUFNeE4sRUFBSXFCLEVBQUV3d0csSUFDakJ4Z0csRUFBSzdELEVBQU04RCxFQUFJalEsRUFBRXl3RyxJQUNqQjNuRyxFQUFRMmlHLEVBQVk5d0csTUFBTW1PLE1BQzFCQyxFQUFTMGlHLEVBQVk5d0csTUFBTW1PLE1BMkJqQyxPQTFCQTlJLEVBQUVxdEcsR0FBS3J0RyxFQUFFMHdHLEtBQU8zZ0csRUFDaEIvUCxFQUFFcEIsR0FBS29CLEVBQUU0d0csS0FBTzdnRyxFQUNoQi9QLEVBQUVzdEcsR0FBS3R0RyxFQUFFMndHLEtBQU8zZ0csRUFDaEJoUSxFQUFFd3RHLEdBQUt4dEcsRUFBRTZ3RyxLQUFPN2dHLEVBRVpoUSxFQUFFcXRHLEdBQUssSUFDQXJ0RyxFQUFFcXRHLEdBQUssRUFDUHJ0RyxFQUFFcEIsR0FsS0ssSUFxS2RvQixFQUFFcEIsR0FBS2tLLElBQ0E5SSxFQUFFcXRHLEdBQUt2a0csRUF0S0EsR0F1S1A5SSxFQUFFcEIsR0FBS2tLLEdBR2Q5SSxFQUFFc3RHLEdBQUssSUFDQXR0RyxFQUFFc3RHLEdBQUssRUFDUHR0RyxFQUFFd3RHLEdBQUt4dEcsRUFBRTZ3RyxLQUFPN3dHLEVBQUUyd0csTUFHekIzd0csRUFBRXd0RyxHQUFLemtHLElBQ0EvSSxFQUFFc3RHLEdBQUt2a0csR0FBVS9JLEVBQUU2d0csS0FBTzd3RyxFQUFFMndHLE1BQzVCM3dHLEVBQUV3dEcsR0FBS3prRyxHQUVsQjhqRyxFQUFPdmpGLE9BQU93bUYsR0FDZDF0RyxFQUFHdU4sVUFBVSxnQkFBZ0JuVixLQUFLLElBQUs0SCxFQUFHd3JHLHdCQUNsQyxhQUFZNXRHLEVBQUVxdEcsT0FBT3J0RyxFQUFFc3RHLEtBQzVCLEdBQ0osQ0FFQSxTQUFTMkMsR0FBT3pnRyxVQUFDQSxJQUNidXhCLEVBQUV2bUMsS0FBSyxZQUFhZ1YsRUFDeEIsQ0E4QkEsTUFBTTRxRSxFQUFTNXZFLEdBQU1pcEIsS0FBS2pwQixVQUUxQjQ5QyxFQUFhLENBQUV5bEQsY0FBYWlELGlCQU41QixTQUEwQkMsR0FDeEJwQixFQUFRaDFHLE1BQVFvMkcsQ0FDbEIsNHVCQ2hQQSxJQUFJM3VHLEdBQUsrbUYsS0FRVCxNQUFNNm5CLEdBQXdCLENBQzVCdHlFLE1BQU8sVUFDUHV5RSxPQUFRanhHLEdBQUtBLEVBQUVpQixHQUNmaXdHLFVBQVdseEcsR0FBTSxHQUFFQSxFQUFFaUIsS0FDckJrd0csVUFBV254RyxHQUFLQSxFQUFFaUIsR0FBRzlHLE1BQU0sTUFBTSxHQUNqQzJ5RyxVQUFXMXFHLEdBQUdndkcsY0FDZHBFLFVBQVcsR0FDWEMsWUFBYSxHQUNib0UsVUFBV3J4RyxHQUFLQSxFQUFFaUIsR0FDbEJxd0csaUJBQWtCLEVBQ2xCQyxXQUFZLGVBQ1pDLFdBQVksRUFBRWxqRyxZQUFZQSxFQUMxQm1qRyxXQUFZLEVBQUV2d0csWUFBWUEsRUFDMUJ3d0csZUFBZ0IsRUFBRWxGLGlCQUFpQkEsRUFDbkNtRixlQUFnQixFQUFFcEYsaUJBQWlCQSxFQUNuQ3FGLFNBQVV4dkcsR0FBR3dyRyx1QkFDYmlFLFVBQVcsRUFBRWwzRyxXQUFXQSxFQUN4Qm0zRyxTQUFVLEVBQUVya0csVUFBVUEsRUFDdEJza0csVUFBVy94RyxHQUFNLEdBQUVBLEVBQUV3c0csaUJBQWlCeHNHLEVBQUV1c0csaUJBQWlCdnNHLEVBQUV5TixTQUFTek4sRUFBRXJGLFFBQ3RFcTNHLFVBQVcsRUFBRTFGLGdCQUFnQkEsRUFDN0IyRixZQUFhLEVBQUUvRixrQkFBa0JBLEdBQThCLEdBQy9EZ0csWUFBYSxFQUFFOUYsa0JBQWtCQSxHQUE4QixHQUMvRCtGLFdBQVksRUFBRWxHLGlCQUFpQkEsR0FBNEIsR0FDM0RtRyxXQUFZLEVBQUVqRyxpQkFBaUJBLEdBQTRCLEdBQzNEa0csa0JBQW1CLEdBQ25CQyxpQkFBa0IsV0FDbEJ0akYsT0FBUTVzQixHQUFHbXdHLGdCQUNYenBHLE1BQU8sS0FDUEMsT0FBUSxJQUNSeXBHLFVBQVcsRUFDWEMsWUFBYSxFQUNiQyxhQUFjLEVBQ2RDLFdBQVksR0FHUkMsR0FBbUI1eUcsR0FBTyxHQUFFeXpCLEtBQUssWUFBWXp6QixFQUFFd3NHLGlCQUFpQnhzRyxFQUFFdXNHLGdCQUFnQjk0RSxLQUFLLGdCQUFnQnp6QixFQUFFeU4sU0FBU2dtQixLQUFLLGVBQWUxNkIsRUFBVTJ5QixZQUFZMXJCLEVBQUVyRixTQVc5Sms0RyxHQUNHLENBQ0hELG1CQUNBRSxTQVJXNy9GLGlCQUNiLE1BQU8sRUFDWCxFQU9JOC9GLHlCQWI2QixXQUMvQixPQUFPL0IsRUFDVCxzaEJDS001MkIsRUFBUzV2RSxHQUFNaXBCLEtBQUtqcEIsR0FDcEJ4UyxFQUFPLEdBQUV3QixzREFDVHc1RyxFQUFlcDZELEdBQUksTUFDbkJxNkQsRUFBVXI2RCxHQUFJLE1BRWRzNkQsRUFBcUIsQ0FDdkIsQ0FBRS9PLFlBQWEsYUFBY243RixJQUFLLEVBQUcvSCxHQUFJLDZCQUE4QndFLE1BQU8yMEUsRUFBTSxtQ0FBb0N4dkUsTUFBT3d2RSxFQUFNLG1DQUFvQys0QixhQUFhLEVBQU9oM0UsV0FBVyxHQUN4TSxDQUFFZ29FLFlBQWEsYUFBY243RixJQUFLLEVBQUcvSCxHQUFJLDZCQUE4QndFLE1BQU8yMEUsRUFBTSxtQ0FBb0N4dkUsTUFBT3d2RSxFQUFNLG1DQUFvQys0QixhQUFhLEVBQU9oM0UsV0FBVyxHQUN4TSxDQUFFZ29FLFlBQWEsYUFBY243RixJQUFLLEVBQUcvSCxHQUFJLFlBQWF3RSxNQUFPMjBFLEVBQU0sd0JBQXlCeHZFLE1BQU93dkUsRUFBTSx3QkFBeUIrNEIsYUFBYSxFQUFPaDNFLFdBQVcsSUFHbEtxUSxFQUFNeXdDLFNBQ1BpMkIsRUFBbUIzNEQsUUFBUSxDQUFFNHBELFlBQWEsYUFBY243RixJQUFLLEVBQUcvSCxHQUFJLGFBQWN3RSxNQUFPMjBFLEVBQU0seUJBQTBCeHZFLE1BQU93dkUsRUFBTSx5QkFBMEIrNEIsYUFBYSxFQUFPaDNFLFdBQVcsSUFFL0wrMkUsRUFBbUIzNEQsUUFBUSxDQUFFNHBELFlBQWEsYUFBY243RixJQUFLLEVBQUcvSCxHQUFJLGNBQWV3RSxNQUFPMjBFLEVBQU0sMEJBQTJCeHZFLE1BQU93dkUsRUFBTSwwQkFBNEIrNEIsYUFBYSxFQUFPaDNFLFdBQVcsSUFHck0sTUFBTWkzRSxFQUFvQng2RCxHQUFJczZELEVBQW1CLElBRTNDckQsRUFBY2ozRCxHQUFJLENBQUEsR0FReEIsU0FBU3k2RCxFQUFjbDlFLEdBQ25CLEdBQXlCLEdBQXJCQSxFQUFLbTlFLGFBQXdCLE9BQ2pDLElBQUlDLEVBQVUsQ0FDakJseEcsS0FBTTh6QixFQUFLdXJELEtBQUs5L0UsR0FDaEJrM0IsS0FBTTNDLEVBQUt1ckQsS0FBSzVvRCxNQUVUM1UsRUFBYXBFLEVBQW1CMEUsa0JBQWtCOHVGLEdBQ3RELE1BQU1oMkIsRUFBWSxHQUFFL2pGLG9DQUFvQzJxQixJQUN4RHBFLEVBQW1CaUUsVUFBVXU1RCxFQUVqQyxDQWhCQW5tQixJQUFjLFNBRWRDLElBQVUsS0FDTm04QyxHQUFnQyxJQWVwQyxNQUFNQSxFQUFnQixXQUNsQixJQUFJQyxFQUFRTCxFQUFrQno0RyxNQUM5Qm9sQixFQUFtQk0sZUFBZW96RixFQUFNdFAsWUFBYXNQLEVBQU14eUcsSUFRL0RnUyxpQkFDRWdnRyxFQUFRdDRHLE1BQU0rMEcsZUFDZCxJQUFJMTFHLFFBTU5pWixpQkFDSSxNQUFNNjhELEVBY1YsV0FDSSxJQUFJdnZFLEVBQVMsQ0FDaEI4QixLQUFNMGQsRUFBbUJDLGNBQWMsUUFDdkM4WSxLQUFNL1ksRUFBbUJDLGNBQWMsUUFDdkNzOUQsS0FBTXY5RCxFQUFtQkMsY0FBYyxRQUN2QzB6RixXQUFZM3pGLEVBQW1CQyxjQUFjLGVBRXRDbUUsRUFBYXBFLEVBQW1CMEUsa0JBQWtCbGtCLEdBQ2xEdXZFLEVBQWUsR0FBRTkzRSxLQUFPbXNCLElBQzVCLE9BQU8yckQsQ0FDWCxDQXhCd0I2akMsR0FFcEIsSUFBSUMsUUFBY3YwRixFQUFleUMsYUFBYWd1RCxHQUU5QzhqQyxFQWlLSixTQUE2QkEsR0FDekIsSUFBSUMsRUFBY3Z6RSxHQUFNM21DLFFBQVFDLE1BQU8saUJBQWdCMG1DLEVBQUV3ekUsMkJBQTJCeHpFLEVBQUV5ekUsK0RBQ2xGN2xHLEVBaUVSLFNBQXNDMGxHLEVBQU9JLEdBQ3pDLElBQUlDLEVBQVksQ0FBQSxFQUNoQkwsRUFBTXpsRyxNQUFNaEksU0FBU2pILEdBQU0rMEcsRUFBVS8wRyxFQUFFMnNHLFVBQVcsSUFDbEQsSUFBSXFJLEVBQVk1ekUsR0FBcUMsTUFBL0IyekUsRUFBVTN6RSxFQUFFd3pFLGlCQUEwRCxNQUEvQkcsRUFBVTN6RSxFQUFFeXpFLGdCQUNyRTdsRyxFQWlCUixTQUFvQit4RCxFQUFVaTBDLEVBQVVGLEdBQ3BDLE9BQU8vekMsRUFBU2x6RCxRQUFRak0sSUFDM0IsTUFBTXF6RyxFQUFlRCxFQUFTcHpHLEdBSTlCLE9BSG9CLEdBQWhCcXpHLEdBQWtDLE1BQVRILEdBQ3pCQSxFQUFNbHpHLEdBRUhxekcsQ0FBWSxHQUVwQixDQXpCZ0JDLENBQVdSLEVBQU0xbEcsTUFBT2dtRyxFQUFVRixHQUM5QyxPQUFPOWxHLENBQ1gsQ0F2RWdCbW1HLENBQTZCVCxFQUFPQyxHQUNoRCxNQUFPLENBQUUxbEcsTUFBT3lsRyxFQUFNemxHLE1BQU9ELFFBQ2pDLENBcktZb21HLENBQW9CVixHQUM1QixJQUFJVyxFQXNCR3gwRixFQUFtQkMsY0FBYyxRQXJCcEM2dkYsRUF3QlIsU0FBd0MrRCxFQUFPVyxHQUMzQyxHQUEwQixHQUF0QlgsRUFBTXpsRyxNQUFNeFgsUUFBcUMsR0FBdEJpOUcsRUFBTTFsRyxNQUFNdlgsT0FBZSxPQUFPaTlHLEVBQ2pFLElBQUlLLEVBQVksQ0FBQSxFQUVoQkwsRUFBTXpsRyxNQUFNaEksU0FBU2d3QixHQUFTODlFLEVBQVU5OUUsRUFBSzAxRSxTQUFXMTFFLElBR3hELE1BQU1xK0UsRUFBd0IvbUcsSUFDakMsR0FBSUEsRUFBS3FtRyxnQkFBa0JTLEVBQ3ZCLE9BQVEsRUFDTCxHQUFJOW1HLEVBQUtzbUcsZ0JBQWtCUSxFQUM5QixPQUFPLEVBRVgsS0FBTyx3QkFBdUI5bUcsRUFBS3FtRyxxQkFBcUJybUcsRUFBS3NtRyxnQkFBZ0IsRUFJcEVVLEVBQTBCLENBQUM1SSxFQUFTNkksSUFDekM3SSxHQUFXMEksRUFDSjFJLEVBRUgsR0FBRTZJLEtBQWE3SSxJQUlwQixJQUFJOEksRUFBbUIsQ0FBQSxFQUNuQkMsRUFBUyxDQUFFem1HLE1BQU8sR0FBSUQsTUFBTyxJQUNqQzBsRyxFQUFNMWxHLE1BQU0vSCxTQUFTc0gsSUFDeEIsSUFRSXErRixFQVJBNEksRUFBWUYsRUFBcUIvbUcsR0FDakN1K0YsRUFBVyxDQUNYOEgsZUFBZ0JXLEVBQXdCaG5HLEVBQUtxbUcsZUFBZ0JZLEdBQzdEWCxlQUFnQlUsRUFBd0JobkcsRUFBS3NtRyxlQUFnQlcsR0FDN0Q5cEcsTUFBTzZDLEVBQUs3QyxNQUNaalEsTUFBTzhTLEVBQUs5UyxNQUNaWCxLQUFNeVQsR0FHVixJQUFrQixHQUFkaW5HLEVBQWlCLENBQ2pCLElBQUl4MUcsRUFBSSswRyxFQUFVeG1HLEVBQUtzbUcsZ0JBQ3ZCakksRUFBVyxDQUFFRCxRQUFTRyxFQUFTK0gsZUFBZ0JucEcsTUFBTzFMLEVBQUUwTCxNQUFPNVEsS0FBTWtGLEVBQ3pFLEtBQU8sQ0FDSCxJQUFJQSxFQUFJKzBHLEVBQVV4bUcsRUFBS3FtRyxnQkFDdkJoSSxFQUFXLENBQUVELFFBQVNHLEVBQVM4SCxlQUFnQmxwRyxNQUFPMUwsRUFBRTBMLE1BQU81USxLQUFNa0YsRUFDekUsQ0FDQTAxRyxFQUFPMW1HLE1BQU10TyxLQUFLb3NHLEdBQ3dCLE1BQXRDMkksRUFBaUI3SSxFQUFTRCxXQUMxQjhJLEVBQWlCN0ksRUFBU0QsVUFBVyxFQUNyQytJLEVBQU96bUcsTUFBTXZPLEtBQUtrc0csR0FDdEIsSUFFRyxJQUFJK0ksRUFBWVosRUFBVU0sR0FDMUJLLEVBQU96bUcsTUFBTXZPLEtBQUssQ0FBQ2lzRyxRQUFTZ0osRUFBVWhKLFFBQVNqaEcsTUFBT2lxRyxFQUFVanFHLE1BQU81USxLQUFNNjZHLElBRzdFRCxFQUFPem1HLE1BQU1oSSxTQUFTZ3dCLEdBQVM4OUUsRUFBVTk5RSxFQUFLMDFFLFNBQVcxMUUsSUFHekQsTUFBTTIrRSxFQUFzQnJuRyxHQUV2QixHQURRK21HLEVBQXFCL21HLE1BQ2RBLEVBQUs3QyxRQUl6QixJQUFJbXFHLEVBQXFCLENBQUEsRUFFekJILEVBQU8xbUcsTUFBTS9ILFNBQVNzSCxJQUN6QixJQUFJdW5HLEVBQWVGLEVBQW1Ccm5HLEdBQ2xDd25HLEVBQWdCRixFQUFtQkMsR0FDbEIsTUFBakJDLElBQ0FBLEVBQWdCLENBQ25CaDBHLEdBQUkrekcsRUFDSnBxRyxNQUFPNkMsRUFBSzdDLE1BQ1o1USxLQUFNLElBQUt5VCxFQUFNNmxHLGNBQWMsR0FDL0I0QixXQUFZLElBRVRILEVBQW1CQyxHQUFnQkMsR0FFdkNBLEVBQWNDLFdBQVd0MUcsS0FBSyxDQUMxQjBPLE9BQVEybEcsRUFBVXhtRyxFQUFLcW1HLGdCQUN2QjV5RyxPQUFRK3lHLEVBQVV4bUcsRUFBS3NtRyxnQkFDdkJwNUcsTUFBT3c2RyxFQUFlMW5HLElBQ3hCLElBSUMsSUFBSVUsRUFBUXltRyxFQUFPem1HLE1BQU0vVCxLQUFLOEUsR0FBTUEsSUFBSWdQLEVBQVEsR0FDaEQsSUFBSyxJQUFJOG1HLEtBQWdCRCxFQUFvQixDQUNoRCxJQUFJRSxFQUFnQkYsRUFBbUJDLEdBQ25DSSxFQUFZLENBQ1p2SixRQUFTb0osRUFBY2gwRyxHQUN2QjJKLE1BQU9xcUcsRUFBY3JxRyxNQUNyQjVRLEtBQU1pN0csRUFBY2o3RyxNQUV4Qm1VLEVBQU12TyxLQUFLdzFHLEdBQ1hILEVBQWNDLFdBQVcvdUcsU0FBU3NILElBQzlCUyxFQUFNdE8sS0FBSyxDQUNkazBHLGVBQWdCcm1HLEVBQUthLE9BQU91OUYsUUFDNUJrSSxlQUFnQnFCLEVBQVV2SixRQUMxQmpoRyxNQUFRLEdBQUU2QyxFQUFLYSxPQUFPMUQsV0FBVzZDLEVBQUt2TSxPQUFPMEosVUFBVXdxRyxFQUFVeHFHLFFBQ2pFalEsTUFBTzhTLEVBQUs5UyxNQUNaWCxLQUFNeVQsSUFFSFMsRUFBTXRPLEtBQUssQ0FDZGswRyxlQUFnQnNCLEVBQVV2SixRQUMxQmtJLGVBQWdCdG1HLEVBQUt2TSxPQUFPMnFHLFFBQzVCamhHLE1BQVEsR0FBRTZDLEVBQUthLE9BQU8xRCxXQUFXNkMsRUFBS3ZNLE9BQU8wSixVQUFVd3FHLEVBQVV4cUcsUUFDakVqUSxNQUFPOFMsRUFBSzlTLE1BQ1pYLEtBQU15VCxHQUNELEdBRUgsQ0FFQSxJQUFJNG5HLEVBQW1CLENBQUEsRUFDbkJDLEVBQWUsR0FDbkJubkcsRUFBTS9ULEtBQUksQ0FBQzhFLEVBQUcycUIsS0FDakIsSUFBSTByRixFQUFjLENBQUUxckYsUUFBT2dpRixRQUFTM3NHLEVBQUUyc0csUUFBU2poRyxNQUFPMUwsRUFBRTBMLE1BQU81USxLQUFNa0YsRUFBRWxGLE1BQ3ZFcTdHLEVBQWlCbjJHLEVBQUUyc0csU0FBVzBKLEVBQzlCRCxFQUFhMTFHLEtBQUsyMUcsRUFBWSxJQUUzQixJQUFJQyxFQUFldG5HLEVBQU05VCxLQUFLa21DLElBQ2pDLElBQUloeUIsRUFBUyttRyxFQUFpQi8wRSxFQUFFd3pFLGdCQUM1QjV5RyxFQUFTbTBHLEVBQWlCLzBFLEVBQUV5ekUsZ0JBQ2hDLE1BQU8sQ0FDSHpsRyxPQUFRQSxFQUFPdWIsTUFDZjNvQixPQUFRQSxFQUFPMm9CLE1BQ2ZpcUYsZUFBZ0J4bEcsRUFBT3ViLE1BQ3ZCa3FGLGVBQWdCN3lHLEVBQU8yb0IsTUFDdkJsdkIsTUFBTzJsQyxFQUFFM2xDLE1BQ1RpUSxNQUFPMDFCLEVBQUUxMUIsTUFDWixJQUVFLE1BQU8sQ0FBRXVELE1BQU9tbkcsRUFBY3BuRyxNQUFPc25HLEVBQ3pDLENBNUpzQkMsQ0FBK0I3QixFQUFPVyxHQUt4RCxPQUpDMUUsRUFBWTNoRyxNQUFNdlgsT0FBUyxHQUFLazVHLEVBQVkxaEcsTUFBTXhYLE9BQVMsRUFDMURxOEcsRUFBYXI0RyxNQUFNbTJHLGtCQUFpQixHQUNwQ2tDLEVBQWFyNEcsTUFBTW0yRyxrQkFBaUIsR0FFL0JqQixDQUNYLENBbkJtQnBELEdBQ2pCb0QsRUFBWWwxRyxNQUFRWCxFQUNwQmk1RyxFQUFRdDRHLE1BQU04MEcsY0FDaEIsQ0FaSUcsSUFHRTdyRixFQUFTLFdBQ2J5dkYsS0EyUkYsU0FBUzJCLEVBQWUxbkcsR0FDcEIsT0FBT0EsRUFBS3pULE1BQU0wbkYsTUFBTWcwQixPQUM1QiwyeEJDcFhNdDdCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLCszQkNxRUhvdUMsR0FBSSxJQUNFQSxHQUFJLElBRWpDLE1BQU1pZ0MsRUFBV2pnQyxHQUFJLE1BRWZuekMsRUFBUWd1QixLQUFLLHdDQUNia2lGLEVBQWdCLzhELElBQUksR0FDcEJ3aEMsRUFBUzV2RSxHQUFNaXBCLEtBQUtqcEIsR0FDcEJvckcsRUFBY2g5RCxHQUFJLElBQ2xCaTlELEVBQWlCajlELEdBQUksSUFDckJrOUQsRUFBb0JsOUQsR0FBSSxNQUN4QjgwQyxFQUFrQjkwQyxHQUFJLENBQUEsR0FDdEJtOUQsRUFBcUJuOUQsR0FBSSxDQUFBLEdBQ3pCMmdDLEVBQWMzZ0MsSUFBSSxHQUNsQm85RCxFQUFjcDlELEdBQUksQ0FBQSxHQUNsQmxyQyxFQUFVa3JDLElBQUksR0FDZHE5RCxFQUFZLENBQ2hCNzdCLEVBQU0sMEJBQ05BLEVBQU0sMEJBQ05BLEVBQU0sMEJBQ05BLEVBQU0sMkJBR0Y4N0IsRUFBbUIsQ0FDdkIsQ0FBRXp3RyxNQUFPMjBFLEVBQU0sVUFBV3h2RSxNQUFPd3ZFLEVBQU0sVUFBV241RSxHQUFJLFNBQVU4aEMsUUFBUSxHQUN4RSxDQUFFdDlCLE1BQU8yMEUsRUFBTSxjQUFleHZFLE1BQU93dkUsRUFBTSxjQUFlbjVFLEdBQUksYUFBYzhoQyxRQUFRLElBR2hGb3pFLEVBQXdCLENBQzVCLENBQUUxd0csTUFBTzIwRSxFQUFNLE1BQU94dkUsTUFBT3d2RSxFQUFNLE1BQU9uNUUsR0FBSSxLQUFNdEcsTUFBTyxLQUFNb29DLFFBQVEsR0FDekUsQ0FBRXQ5QixNQUFPMjBFLEVBQU0sTUFBT3h2RSxNQUFPd3ZFLEVBQU0sTUFBT241RSxHQUFJLEtBQU10RyxNQUFPLFFBQVNvb0MsUUFBUSxHQUM1RSxDQUFFdDlCLE1BQU8yMEUsRUFBTSxNQUFPeHZFLE1BQU93dkUsRUFBTSxNQUFPbjVFLEdBQUksS0FBTXRHLE1BQU8sV0FBWW9vQyxRQUFRLElBRzNFcXpFLEVBQTRCLENBQ2hDLENBQUUzd0csTUFBTzIwRSxFQUFNLFFBQVN4dkUsTUFBT3d2RSxFQUFNLFFBQVNuNUUsR0FBSSxPQUFRdEcsTUFBTyxJQUFNb29DLFFBQVEsR0FDL0UsQ0FBRXQ5QixNQUFPMjBFLEVBQU0sUUFBU3h2RSxNQUFPd3ZFLEVBQU0sUUFBU241RSxHQUFJLE9BQVF0RyxNQUFPLElBQVNvb0MsUUFBUSxHQUNsRixDQUFFdDlCLE1BQU8yMEUsRUFBTSxRQUFTeHZFLE1BQU93dkUsRUFBTSxRQUFTbjVFLEdBQUksT0FBUXRHLE1BQU8sSUFBWW9vQyxRQUFRLElBSWpGMWdDLEVBQU91MkMsR0FBSSxNQUNYeTlELEVBQVl6OUQsR0FBSSxNQThCdEIsTUFTTTA5RCxFQUFtQixLQUN2QixJQUFJMzZFLEVBQVEsSUFBSXBsQyxPQUFPcTJGLEdBQWdCVixpQkFBaUIsT0FDeEQzUyxFQUFZNStFLFFBQVVnaEMsRUFBTXRsQyxLQUFLZ00sRUFBSzFILE1BQU1BLFFBQStCLE1BQXJCMEgsRUFBSzFILE1BQU1BLE1BQWMsRUFHM0U0N0csRUFBb0JDLElBQ3hCLE1BQU12MUcsRUFBS3UxRyxFQUFldDFHLE9BQU9ELEdBRU4sY0FBeEIrMEcsRUFBWXI3RyxNQUFNc0csR0FDbkJtMUcsRUFBMEJqd0csU0FBU3N3RyxJQUNoQ0EsRUFBUXgxRyxLQUFPQSxFQUFNdzFHLEVBQVExekUsUUFBUyxFQUFPMHpFLEVBQVExekUsUUFBUyxDQUFLLElBR3RFb3pFLEVBQXNCaHdHLFNBQVNzd0csSUFDNUJBLEVBQVF4MUcsS0FBT0EsRUFBTXcxRyxFQUFRMXpFLFFBQVMsRUFBTzB6RSxFQUFRMXpFLFFBQVMsQ0FBSyxJQUl4RXZqQixNQUFNeThCLEtBQUt1NkQsRUFBZXQxRyxPQUFPdzFHLGNBQWNoa0UsVUFBVXZzQyxTQUFTb0ssSUFFMUMsU0FBbkJBLEVBQVEreEMsVUFDTi94QyxFQUFRdFAsSUFBTUEsR0FDZnNQLEVBQVFxK0MsVUFBVWg2QyxPQUFPLGlCQUN6QnJFLEVBQVFxK0MsVUFBVXBwQixJQUFJLGVBQ3RCajFCLEVBQVFxK0MsVUFBVXBwQixJQUFJLFlBRXRCajFCLEVBQVFxK0MsVUFBVXBwQixJQUFJLGlCQUN0QmoxQixFQUFRcStDLFVBQVVoNkMsT0FBTyxlQUN6QnJFLEVBQVFxK0MsVUFBVWg2QyxPQUFPLFdBRTdCLEdBQ0EsRUFHRXd4RixFQUFPLEtBRVgsTUFBTXVRLEVBQVd0MEcsRUFBSzFILE1BQU1BLE1BQ3RCaThHLEVBQWdCYixFQUFtQnA3RyxNQUFNc0csR0FDekM0MUcsRUFBYW5wQixFQUFnQi95RixNQUFNc0csR0FDekMsSUFFSTYxRyxFQUNBQyxFQUhBQyxFQUFrQmhCLEVBQVlyN0csTUFBTXNHLEdBQ3BDZzJHLEVBQW9CdnBCLEVBQWdCL3lGLE1BQU11OEcsYUFBZ0J4cEIsRUFBZ0IveUYsTUFBTXU4RyxhQUFlLE1BSTlFLElBQWxCeHBHLEVBQVEvUyxRQUNUcThHLEVBQWtCLEdBQ2xCQyxFQUFtQixHQUNuQkYsRUFBZ0JWLEVBQVUxN0csTUFBTUEsT0FFWixjQUFuQnE4RyxHQUNEWixFQUEwQmp3RyxTQUFTc3dHLElBQWlCQSxFQUFRMXpFLFNBQVErekUsRUFBY0wsRUFBUTk3RyxNQUFLLElBQy9GbzhHLEVBQWdCRCxFQUFjNTdHLFNBQVNtN0csRUFBVTE3RyxNQUFNQSxPQUFTLEdBRXJDLFVBQW5CcThHLElBQ1JiLEVBQXNCaHdHLFNBQVNzd0csSUFBaUJBLEVBQVExekUsU0FBUSt6RSxFQUFjTCxFQUFROTdHLE1BQUssSUFDM0ZvOEcsRUFBZ0JELEVBQWM1N0csU0FBU203RyxFQUFVMTdHLE1BQU1BLFFBR3pEd3JCLEVBQUssTUFBTyxDQUNWOWpCLEtBQU1zMEcsRUFDTlEsVUFBV1AsRUFDWG4yQixPQUFRbzJCLEVBQ1JSLFVBQVdVLEVBQ1hmLFlBQWFnQixFQUNiRSxhQUFjRCxJQUVoQngrQixHQUFPLEVBR0hBLEVBQVEsS0FDWkksRUFBU2wrRSxNQUFNODlFLE9BQU8sU0FXeEJyaEIsSUFBYyxLQUNaNCtDLEVBQVlyN0csTUFBUXU3RyxFQUFpQixFQUFFLElBR3pDOXRELEVBQWEsQ0FBRTFrRCxLQTlGRixLQXBCVHJCLEVBQUsxSCxNQUFNQSxNQUFRLEdBQ25CK3lGLEVBQWdCL3lGLE1BQVFpN0csRUFBWWo3RyxNQUFNLEdBQzFDbzdHLEVBQW1CcDdHLE1BQVFrN0csRUFBZWw3RyxNQUFNLEdBQ2hEcTdHLEVBQVlyN0csTUFBUXU3RyxFQUFpQixHQUdyQ0EsRUFBaUIvdkcsU0FBU3FFLEdBQU1BLEVBQUV1NEIsUUFBUyxJQUMzQ216RSxFQUFpQixHQUFHbnpFLFFBQVMsRUFHN0JvekUsRUFBc0Jod0csU0FBU3FFLEdBQU1BLEVBQUV1NEIsUUFBUyxJQUNoRG96RSxFQUFzQkEsRUFBc0J4L0csT0FBUyxHQUFHb3NDLFFBQVMsRUFHakVxekUsRUFBMEJqd0csU0FBU3FFLEdBQU1BLEVBQUV1NEIsUUFBUyxJQUNwRHF6RSxFQUEwQkEsRUFBMEJ6L0csT0FBUyxHQUFHb3NDLFFBQVMsRUFFekVzekUsRUFBVTE3RyxNQUFNQSxNQUFRLEVBSzFCaytFLEVBQVNsK0UsTUFBTStJLE1BQU0sRUE0RkYrMEUsUUFBTzIrQixjQVpMQyxJQUNyQjFCLEVBQWNoN0csT0FBUSxFQUN0Qmk3RyxFQUFZajdHLE1BQVEwOEcsRUFDcEJ4QixFQUFlbDdHLE1BQVE2eEMsRUFBTXFwRSxlQUM3QkUsRUFBbUJwN0csTUFBUWs3RyxFQUFlbDdHLE1BQU0sR0FDaEQreUYsRUFBZ0IveUYsTUFBUWk3RyxFQUFZajdHLE1BQU0sRUFBRSxxdEJBakZOLEdBQXJDK3lGLEVBQWdCL3lGLE1BQU0yOEcsWUFBdUI1cEcsRUFBUS9TLE9BQVEsRUFBTytTLEVBQVEvUyxPQUFRLHM3RUNyR2pGNDhHLEVBQW1CMytELEdBQUksTUFDdkI0K0QsRUFBdUI1K0QsR0FBSSxNQUMzQjYrRCxFQUFzQjcrRCxHQUFJLE1BQzFCd2hDLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBQ3BCbStGLEVBQWdCL3ZELEdBQUksQ0FBQSxHQUNwQjgrRCxFQUFjLEdBQUVsK0csNkVBQ2hCNjVGLEVBQVksR0FBRTc1RiwyRUFDZG0rRyxFQUFnQixHQUFFbitHLHlFQUNsQm8rRyxFQUFtQixHQUFFcCtHLCtFQUVyQnk4RyxFQUFZLENBQ2hCNzdCLEVBQU0sbUNBQ05BLEVBQU0sbUNBQ05BLEVBQU0sb0NBR0Z5OUIsRUFBYyxDQUNsQnY2QixLQUFNOXdDLEVBQU04d0MsS0FDWjkxRSxLQUFNZ2xDLEVBQU11dkQsV0FHZCxJQUFJK2IsRUFBMEIsQ0FBQSxFQUMxQjdhLEVBQWU3aUIsRUFBTSwyQ0FDckI4aUIsRUFBYzlpQixFQUFNLGlEQUNwQnc3QixFQUFjLEdBQ2xCLE1BQU1DLEVBQWlCLENBQ3JCLENBQUVwd0csTUFBT2d1QixLQUFLLHFCQUFzQjdvQixNQUFPNm9CLEtBQUsscUJBQXNCeHlCLEdBQUksUUFDMUUsQ0FBRXdFLE1BQU9ndUIsS0FBSyxzQkFBdUI3b0IsTUFBTzZvQixLQUFLLHNCQUF1Qnh5QixHQUFJLFFBQzVFLENBQUV3RSxNQUFPZ3VCLEtBQUsscUJBQXNCN29CLE1BQU82b0IsS0FBSyxxQkFBc0J4eUIsR0FBSSxRQVl0RW83RixFQUFlLFdBQ25Ca2IsRUFBaUI1OEcsTUFBTW9wQixVQUduQitrRixFQUFhNzFGLGlCQUNqQixNQUFNd0YsRUFBTWt3RixFQUFjaHVHLE1BQ3BCM0MsRUFBTWUsRUFBVXk3RixTQUFTb2pCLEVBQWlCLElBQzNDQyxFQUVERSxRQUFTdC9GLEVBQUl4WCxXQUlYOUosRUFBRXdRLEtBQUszUCxHQUFLLFNBQVM0USxFQUFLOUQsR0FDOUJ1M0YsR0FDRixLQUdJMmIsRUFBZ0Iva0csZUFBZTFTLEdBQ25DLE1BQU12SSxFQUFNZSxFQUFVeTdGLFNBQVNtakIsRUFBYyxJQUN4Q0UsS0FDQXQzRyxVQUdDcEosRUFBRXdRLEtBQUszUCxHQUFLLFNBQVM0USxFQUFLOUQsR0FDOUJ1M0YsR0FDRixLQUdJcVMsRUFBb0IsU0FBVXAwRSxHQUNsQyxJQUFJaXRFLEVBQWlCLENBQ3BCejBFLFVBQVcsY0FDWEMsUUFBUyxLQXpDZSxJQUFTdGEsSUEwQ1g2aEIsRUF6Q3ZCcXVFLEVBQWNodUcsTUFBUThkLEVBQ3RCKytGLEVBQXFCNzhHLE1BQU0rSSxNQXdDSSxHQUkvQixPQUFPeXZCLGVBQWVzcEQsb0JBQW9CLENBQ3pDLENBQUVsb0QsTUFBUSxhQUFhSCxRQUFTbXpFLEVBQWdCOXlFLEtBQU0sV0FBWWh2QixNQUFPZ3VCLEtBQUssVUFBV2MsTUFBTyxjQWtEN0Zzb0UsRUFBa0IsV0FDdEIsTUFBTVYsRUFBa0IsR0FHeEJBLEVBQWdCdjhGLEtBQUssQ0FDbkI2RCxLQUFNLDhCQUNOeXdCLFVBQVcsV0FDWDNzQixPQUFRLFdBQ044MEYsR0FDRixHQUNDLENBQ0Q1NEYsS0FBTSw4QkFDTnl3QixVQUFXLFdBQ1gzc0IsT0FBUSxXQUNOa3dHLEVBQW9COThHLE1BQU0rSSxNQUM1QixJQUdGLE1BQU1vSixFQUFVLENBQ2QsQ0FBRXV1RSxXQUFZakIsRUFBTSxNQUFPMXNFLFNBQVMsRUFBTzB0RSxRQUFTLEVBQUczNUUsS0FBTSxLQUFNekgsS0FBTSxLQUFNazZCLFVBQVcsY0FBZTRuRCxtQkFBb0IsR0FDN0gsQ0FBRVQsV0FBWWpCLEVBQU0sMEJBQTJCZ0IsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sU0FBVXpILEtBQU0sU0FBVWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEdBQ3RKLENBQUVULFdBQVlqQixFQUFNLDBCQUEyQmdCLFFBQVMsRUFBR3R5RSxNQUFPLEtBQU1ySCxLQUFNLFNBQVV6SCxLQUFNLFNBQVVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVEsU0FBU2g0QixFQUFNZ2pDLEVBQUcxQyxHQUFXLE9BbkU1SyxTQUFTdGdDLEVBQU1zZ0MsR0FDbkMsSUFBSTI5RSxFQUFlaitHLEVBV25CLE9BVkE0N0csRUFBWXp2RyxTQUFTczZFLElBQ2hCQSxFQUFPeC9FLElBQU1qSCxJQUNYc2dDLEVBQVE0OEUsYUFDTjU4RSxFQUFRNDhFLGNBQWdCejJCLEVBQU95MkIsZUFDaENlLEVBQWV4M0IsRUFBTzcxRSxPQUV4QnF0RyxFQUFleDNCLEVBQU83MUUsTUFFMUIsSUFFS3F0RyxFQXVEZ01DLENBQWNsK0csRUFBTXNnQyxFQUFTLEdBQ2xPLENBQUUrZ0QsV0FBWWpCLEVBQU0sNkJBQThCZ0IsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sWUFBYXpILEtBQU0sWUFBYWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEVBQUc5cEQsT0FBUSxTQUFTaDRCLEdBQVEsT0FyRHRLLFNBQVNBLEdBQ2hDLElBQUltK0csRUFBa0IsR0FNdEIsT0FMQXRDLEVBQWUxdkcsU0FBU2d4RyxJQUNuQm45RyxHQUFRbTlHLEVBQVVsMkcsS0FDbkJrM0csRUFBa0JoQixFQUFVMXhHLE1BQUssSUFHOUIweUcsRUE4QzZMQyxDQUFpQnArRyxFQUFNLEdBQ3pOLENBQUVxaEYsV0FBWWpCLEVBQU0sNkJBQThCZ0IsUUFBUyxFQUFHdHlFLE1BQU8sS0FBTXJILEtBQU0sWUFBYXpILEtBQU0sWUFBYWs2QixVQUFXLGNBQWU0bkQsbUJBQW9CLEVBQUc5cEQsT0FBUSxTQUFTaDRCLEVBQU1nakMsRUFBRzFDLEdBQVcsT0E1Q2xMLFNBQVN0Z0MsRUFBTXNnQyxHQUN0QyxJQUFJKzlFLEVBQWlCbjlHLFNBQVNsQixHQVM5QixPQVBFcStHLEVBREUvOUUsRUFBUTA3RSxhQUF3QyxjQUF2QjE3RSxFQUFRMDdFLFlBQ2xCajlHLEVBQVV1L0csV0FBa0IsRUFBUHQrRyxHQUM3QnNnQyxFQUFRMDdFLGFBQXdDLFVBQXZCMTdFLEVBQVEwN0UsWUFDekJqOUcsRUFBVTJ5QixZQUFZMXhCLEdBRXRCQSxFQUdacStHLEVBa0N5TUUsQ0FBaUJ2K0csRUFBTXNnQyxFQUFTLEdBQzlPLENBQUUrZ0QsV0FBWWpCLEVBQU0sZUFBZ0Ixc0UsU0FBUyxFQUFPMHRFLFFBQVMsRUFBRzM1RSxLQUFNLGNBQWV6SCxLQUFNLGNBQWVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixHQUN4SixDQUFFVCxXQUFZakIsRUFBTSxXQUFZdHhFLE1BQU8sS0FBTXJILEtBQU0sVUFBV3l5QixVQUFXLGNBQWUwbkQsV0FBVyxFQUFPRSxtQkFBb0IsRUFBRzlwRCxPQUFRLFNBQVVnTCxFQUFHNWhDLEVBQU1rL0IsR0FBVyxPQUFPbzBFLEVBQWtCcDBFLEVBQVMsSUFHck1rK0UsRUFBdUIsQ0FDM0J0a0IsY0FBZWlJLEVBQ2Y5SSxTQUFVdDZGLEVBQVV5N0YsU0FBU25CLEVBQVV3a0IsR0FDdkM1a0IsZUFBZSxFQUNmRSxlQUFnQnJtRixFQUNoQmtuRixhQUFjLENBQ1pqQixTQUFTLEVBQ1RELFlBQVksRUFDWkksTUFBTyxDQUFDLENBQUUsRUFBZ0IsU0FDMUIvWCxXQUFZcnVFLElBSWhCZ3JHLEVBQTBCVSxVQUc1QnBoRCxJQUFjbmtELFVBQ1o0cEYsVUFyRHNCNXBGLGlCQUN0QixNQUFNamIsRUFBTWUsRUFBVXk3RixTQUFTa2pCLEVBQVlHLFNBRXJDMWdILEVBQUV3ZSxJQUFJM2QsR0FBSyxTQUFTNFEsRUFBSzlELEdBQzdCOHdHLEVBQWNodEcsRUFBSUEsR0FDcEIsSUFpRE02dkcsR0FDTmhCLEVBQW9COThHLE1BQU15OEcsY0FBY3hCLEVBQVksSUFHdERuK0MsSUFBWSxLQTdJVjgvQyxFQUFpQjU4RyxNQUFNazZGLGVBOElSLHN3Q0NyTUdqOEMsR0FBSSxNQUNUQSxHQUFJLElBQ1VBLEdBQUksQ0FBQSxHQUVqQyxNQUFNd2hDLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBOEIxQjRzRCxJQUFjbmtELGdCQWtGZEEsaUJBQ0UsSUFBSWtSLEVBQWEsQ0FBQSxFQUVqQkEsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBQ3REbUUsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBQ3REbUUsRUFBaUIsS0FBSXBFLEVBQW1CQyxjQUFjLFFBRXREMDRGLEVBQWN2eUcsU0FBU3lHLElBQ3JCLElBQUkwdkYsRUFBYSxJQUNaMXZGLEVBQU0rckcsZ0JBQ054MEYsR0FHTGh0QixFQUFFd2UsSUFBSTVjLEVBQVV5N0YsU0FBUzVuRixFQUFNNVUsSUFBS3NrRyxJQUFhcnBGLGVBQWVqWixFQUFNOEssR0FFcEUsSUFBSW1ULEVBQU8sR0FDWGplLEVBQUs0TyxJQUFJekMsU0FBU25NLElBQ2hCLE1BQU1sQyxFQUFPa0MsRUFBSzQrRyxVQUFVOWdILEtBQ3RCK2dILEVBQVE3K0csRUFBSzQrRyxVQUFVMThCLFNBQzdCamtFLEVBQUtyWSxLQUFLLENBQUVnTCxNQUFRLEdBQUU5UyxNQUFTK2dILE1BQVcsSUFFNUNqc0csRUFBTWdzRixXQUFhM2dGLENBQ3JCLEdBQUUsR0FFTixDQXpHUTRrRixFQUFpQixJQUd6QnhsQyxJQUFVcGtELFVBQ1JsYSxFQUFVZzdGLGNBQWMsSUFHMUJ0OEIsSUFBWXhrRCxVQWZWaThGLGNBQWN2MEcsTUFBTWs2RixlQWdCWCxJQUtBcGhFLEtBQUssb0JBQ05wRixjQUFjOEMsVUFBVUksSUFDdEIvM0IsWUFJRGk2QixLQUFLLG9CQUNOcEYsY0FBYzhDLFVBQVVJLElBQ3RCLzNCLFlBS1osTUFBTWsvRyxFQUFnQixDQUNwQixDQUNFMWdILElBQU0sR0FBRXdCLDREQUNSeUgsR0FBSyxpQkFDTDAzRyxhQUFjLENBQ1ozbEUsS0FBTSxRQUNOL3ZDLFNBQVUsT0FFWjZKLFFBQVMsQ0FDUCxDQUFFN0wsR0FBSSwwQkFBMkIySixNQUFPd3ZFLEVBQU0sdUNBQzlDLENBQUVuNUUsR0FBSSxtQkFBb0IySixNQUFPd3ZFLEVBQU0sVUFFekN3ZSxXQUFZLElBRWQsQ0FDRTVnRyxJQUFNLEdBQUV3Qiw0REFDUnlILEdBQUssaUJBQ0wwM0csYUFBYyxDQUNaM2xFLEtBQU0sUUFDTi92QyxTQUFVLE9BRVo2SixRQUFTLENBQ1AsQ0FBRTdMLEdBQUksMEJBQTJCMkosTUFBT3d2RSxFQUFNLHVDQUM5QyxDQUFFbjVFLEdBQUksbUJBQW9CMkosTUFBT3d2RSxFQUFNLFVBRXpDd2UsV0FBWSxJQUVkLENBQ0U1Z0csSUFBTSxHQUFFd0IsNERBQ1J5SCxHQUFLLGlCQUNMMDNHLGFBQWMsQ0FDWjNsRSxLQUFNLFNBQ04vdkMsU0FBVSxPQUVaNkosUUFBUyxDQUNQLENBQUU3TCxHQUFJLG9DQUFxQzJKLE1BQU93dkUsRUFBTSxpREFDeEQsQ0FBRW41RSxHQUFJLG1CQUFvQjJKLE1BQU93dkUsRUFBTSxVQUV6Q3dlLFdBQVksSUFFZCxDQUNFNWdHLElBQU0sR0FBRXdCLDREQUNSeUgsR0FBSyxpQkFDTDAzRyxhQUFjLENBQ1ozbEUsS0FBTSxTQUNOL3ZDLFNBQVUsT0FFWjZKLFFBQVMsQ0FDUCxDQUFFN0wsR0FBSSxvQ0FBcUMySixNQUFPd3ZFLEVBQU0saURBQ3hELENBQUVuNUUsR0FBSSxtQkFBb0IySixNQUFPd3ZFLEVBQU0sVUFFekN3ZSxXQUFZLHdOQWhHaEIsU0FBNEIzaUUsR0FDMUIsT0FBT0EsRUFBSXJyQixLQUNiLDJCQUVBLFNBQXlCcXJCLEVBQUt4ZCxHQUc1QixPQURZQSxFQUFJN04sS0FFbEIsMHFCQ1hNd3ZFLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBV3BCeW9HLEVBQVVyNkQsR0FBSSxNQUNkMjJCLEVBQWFsaEQsY0FBYzhDLFVBQVVLLE9BQ3JDc25GLEVBQVksR0FBRXQvRyx3REFDZHUvRyxFQUFjLGFBQ2R6VSxFQUFxQixDQUFBLEVBQ3JCMFUsRUFBZXBnRSxHQUFJLE1BRW5CcWdFLEVBQWlCLFdBQ3JCLElBQUlDLEVBQWdCLEdBQ3BCLE1BQU0zNEcsRUFBUyxDQUNiNDRHLFlBQWFwNUYsRUFBbUJDLGNBQWMsZUFDOUNvNUYsVUFBV3I1RixFQUFtQkMsY0FBYyxhQUM1QzhZLEtBQU0vWSxFQUFtQkMsY0FBYyxRQUN2Q3M5RCxLQUFNdjlELEVBQW1CQyxjQUFjLFNBR3pDLElBQUssTUFBT2hYLEVBQUtyTyxLQUFVdU4sT0FBT0MsUUFBUTVILEdBQ3hDMjRHLEVBQWlCLEdBQUVBLEtBQWlCbHdHLEtBQU9yTyxJQUk3QyxPQUFPdStHLEdBR0huMUYsRUFBUyxXQUNia3ZGLEVBQVF0NEcsTUFBTSswRyxlQUNkc0osRUFBYXIrRyxNQUFNNjFFLGFBQWMsR0FBRXNvQyxLQUFZRyxPQUMvQ2hHLEVBQVF0NEcsTUFBTTgwRyxnQkF1Q1Y5WCxFQUFpQyxXQUdyQyxPQUFPMWtGLFVBQ0wsSUFBSXRNLEVBeENlLFNBQVMweUcsR0FDOUIsSUFBSTF5RyxFQUFVLENBQUEsRUFRZCxHQU5BNmxDLEVBQU04ckQsZUFBZW55RixTQUFTbXpHLElBQ3pCQSxFQUFZRCxTQUFXQSxJQUN4QjF5RyxFQUFVMnlHLEVBQVcsSUFJdEIzeUcsR0FBV0EsRUFBUTRuQixPQUFTNW5CLEVBQVE0bkIsTUFBTWdyRixZQUFhLENBQ3hENXlHLEVBQVE0bkIsTUFBTVEsT0FBU3BvQixFQUFRNG5CLE1BQU1RLFFBQVUsR0FDL0MsSUFBSSxNQUFPNWlCLEVBQU9xdEcsS0FBUXR4RyxPQUFPQyxRQUFReEIsRUFBUTRuQixNQUFNZ3JGLGFBQzNDeDhHLE1BQVB5OEcsSUFHSDd5RyxFQUFRNG5CLE1BQU1RLE9BQU81aUIsR0FBU3BULEVBQVV5Z0gsSUFBUXpnSCxFQUFVMGdILE1BRTlELENBZ0JBLE9BYkc5eUcsR0FBV0EsRUFBUXNGLE9BQVN0RixFQUFRc0YsTUFBTW1mLFFBQVV6a0IsRUFBUXNGLE1BQU1tZixPQUFPOFQsdUJBQzFFdjRCLEVBQVFzRixNQUFNbWYsT0FBT3VFLFVBQVk1MkIsRUFBVTROLEVBQVFzRixNQUFNbWYsT0FBTzhULHVCQUF5Qm5tQyxFQUFVMGdILE9BSWxHOXlHLEdBQVdBLEVBQVF1RixPQUFTdkYsRUFBUXVGLE1BQU1rZixRQUFVemtCLEVBQVF1RixNQUFNa2YsT0FBTzhULHVCQUMxRXY0QixFQUFRdUYsTUFBTWtmLE9BQU91RSxVQUFZNTJCLEVBQVU0TixFQUFRdUYsTUFBTWtmLE9BQU84VCx1QkFBeUJubUMsRUFBVTBnSCxPQUlsRzl5RyxHQUFXQSxFQUFRNEQsU0FBVzVELEVBQVE0RCxRQUFRMjBCLHVCQUMvQ3Y0QixFQUFRNEQsUUFBUTJtQixPQUFTbjRCLEVBQVU0TixFQUFRNEQsUUFBUTIwQix1QkFFOUN2NEIsRUFPUyt5RyxDQUFleDVGLE9BQU9va0YsRUFBZ0MsWUFBRXJqRyxLQUN0RSxNQUFNakgsUUFBYXFsQixlQUFleUMsYUFBYTlwQixHQUUvQyxPQURBMk8sRUFBUWdGLE9BQVMzUixFQUFLMlIsUUFBVSxDQUFBLEVBQ3pCaEYsQ0FBTyxHQUlaMDJGLEVBQWEsU0FBUzF6RixHQUMxQnNwRyxFQUFRdDRHLE1BQU0rMEcsZUFDZDN2RixFQUFtQk0sZUFBZTFXLEVBQUt3NkYsWUFBYXg2RixFQUFLMUksSUFDekQrM0csRUFBYXIrRyxNQUFNNjFFLGFBQWMsR0FBRXNvQyxLQUFZRyxPQUMvQ2hHLEVBQVF0NEcsTUFBTTgwRyx1QkFHaEJyNEMsSUFBYyxLQUVaLE1BQU1naUQsRUFBWXI1RixFQUFtQkMsY0FBYyxhQUM3QzhZLEVBQU8vWSxFQUFtQkMsY0FBYyxRQUMxQkQsRUFBbUJDLGNBQWMsZ0JBRXBDRCxFQUFtQk0sZUFBZSxjQUFlLEdBQzlEKzRGLEdBQVdyNUYsRUFBbUJNLGVBQWUsWUFBYSxLQUMxRHlZLEdBQU0vWSxFQUFtQk0sZUFBZSxPQUFRLEdBRXBETixFQUFtQk0sZUFBZSxPQUFRbXNCLEVBQU04d0MsTUFFaEQsSUFBSSxNQUFPNzdFLEVBQU1pa0IsS0FBWXhkLE9BQU9DLFFBQVFxa0MsRUFBTW10RSxtQkFDaERqMEYsRUFBUXZmLFNBQVM0RyxJQUNmQSxFQUFPbzNGLFlBQWMxaUcsRUFDbEJzTCxFQUFPaXZCLG1CQUNSc29FLEVBQW1CN2lHLEdBQVFzTCxFQUFNLEdBRXZDLElBR0ZzcUQsSUFBVSxLQUNSNDdDLEVBQVF0NEcsTUFBTTgwRyxjQUFjLHkyQ0M5SHhCcjFCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBV3BCK2tFLEVBQWFsaEQsY0FBYzhDLFVBQVVLLE9BQ3JDc25GLEVBQVksR0FBRXQvRyw4Q0FDZHUvRyxFQUFjLGFBQ2R6VSxFQUFxQixDQUFBLEVBQ3JCMFUsRUFBZXBnRSxHQUFJLE1BRW5CcWdFLEVBQWlCLFdBQ3JCLElBQUlDLEVBQWdCLEdBQ3BCLE1BQU0zNEcsRUFBUyxDQUNiNDRHLFlBQWFwNUYsRUFBbUJDLGNBQWMsZUFDOUNzOUQsS0FBTXY5RCxFQUFtQkMsY0FBYyxTQUd6QyxJQUFLLE1BQU9oWCxFQUFLck8sS0FBVXVOLE9BQU9DLFFBQVE1SCxHQUN4QzI0RyxFQUFpQixHQUFFQSxLQUFpQmx3RyxLQUFPck8sSUFJN0MsT0FBT3UrRyxHQXVDSHZoQixFQUFpQyxXQUdyQyxPQUFPMWtGLFVBQ0wsSUFBSXRNLEVBeENlLFNBQVMweUcsR0FDOUIsSUFBSTF5RyxFQUFVLENBQUEsRUFRZCxHQU5BNmxDLEVBQU04ckQsZUFBZW55RixTQUFTbXpHLElBQ3pCQSxFQUFZRCxTQUFXQSxJQUN4QjF5RyxFQUFVMnlHLEVBQVcsSUFJdEIzeUcsR0FBV0EsRUFBUTRuQixPQUFTNW5CLEVBQVE0bkIsTUFBTWdyRixZQUFhLENBQ3hENXlHLEVBQVE0bkIsTUFBTVEsT0FBU3BvQixFQUFRNG5CLE1BQU1RLFFBQVUsR0FDL0MsSUFBSSxNQUFPNWlCLEVBQU9xdEcsS0FBUXR4RyxPQUFPQyxRQUFReEIsRUFBUTRuQixNQUFNZ3JGLGFBQzNDeDhHLE1BQVB5OEcsSUFHSDd5RyxFQUFRNG5CLE1BQU1RLE9BQU81aUIsR0FBU3BULEVBQVV5Z0gsSUFBUXpnSCxFQUFVMGdILE1BRTlELENBZ0JBLE9BYkc5eUcsR0FBV0EsRUFBUXNGLE9BQVN0RixFQUFRc0YsTUFBTW1mLFFBQVV6a0IsRUFBUXNGLE1BQU1tZixPQUFPOFQsdUJBQzFFdjRCLEVBQVFzRixNQUFNbWYsT0FBT3VFLFVBQVk1MkIsRUFBVTROLEVBQVFzRixNQUFNbWYsT0FBTzhULHVCQUF5Qm5tQyxFQUFVMGdILE9BSWxHOXlHLEdBQVdBLEVBQVF1RixPQUFTdkYsRUFBUXVGLE1BQU1rZixRQUFVemtCLEVBQVF1RixNQUFNa2YsT0FBTzhULHVCQUMxRXY0QixFQUFRdUYsTUFBTWtmLE9BQU91RSxVQUFZNTJCLEVBQVU0TixFQUFRdUYsTUFBTWtmLE9BQU84VCx1QkFBeUJubUMsRUFBVTBnSCxPQUlsRzl5RyxHQUFXQSxFQUFRNEQsU0FBVzVELEVBQVE0RCxRQUFRMjBCLHVCQUMvQ3Y0QixFQUFRNEQsUUFBUTJtQixPQUFTbjRCLEVBQVU0TixFQUFRNEQsUUFBUTIwQix1QkFFOUN2NEIsRUFPUyt5RyxDQUFleDVGLE9BQU9va0YsRUFBZ0MsWUFBRXJqRyxLQUN0RSxNQUFNakgsUUFBYXFsQixlQUFleUMsYUFBYTlwQixHQUUvQyxPQURBMk8sRUFBUWdGLE9BQVMzUixFQUFLMlIsUUFBVSxDQUFBLEVBQ3pCaEYsQ0FBTyxHQUlaMDJGLEVBQWEsU0FBUzF6RixHQUMxQm9XLEVBQW1CTSxlQUFlMVcsRUFBS3c2RixZQUFheDZGLEVBQUsxSSxJQUN6RCszRyxFQUFhcitHLE1BQU02MUUsYUFBYyxHQUFFc29DLEtBQVlHLGVBR2pEN2hELElBQWMsS0FFUXIzQyxFQUFtQkMsY0FBYyxnQkFFcENELEVBQW1CTSxlQUFlLGNBQWUsR0FFbEVOLEVBQW1CTSxlQUFlLE9BQVFtc0IsRUFBTTh3QyxNQUVoRCxJQUFJLE1BQU83N0UsRUFBTWlrQixLQUFZeGQsT0FBT0MsUUFBUXFrQyxFQUFNbXRFLG1CQUNoRGowRixFQUFRdmYsU0FBUzRHLElBQ2ZBLEVBQU9vM0YsWUFBYzFpRyxFQUNsQnNMLEVBQU9pdkIsbUJBQ1Jzb0UsRUFBbUI3aUcsR0FBUXNMLEVBQU0sR0FFdkMsK3pDQ2pGSXUzRixFQUFxQixDQUFBLEVBTXJCbHFCLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLEdBQ3BCaTZGLEVBQXNCN3JELElBQUksR0FDMUJxc0QsRUFBa0I3cUIsRUFBTSw4QkFDeEJ3L0IsRUFBa0J4L0IsRUFBTSwwQkFDeEI0NEIsRUFBZXA2RCxHQUFJLE1BQ25CaWhFLEVBQVdqaEUsR0FBSSxNQUNmOXZDLEVBQVE4dkMsR0FBSSxNQUNaN3ZDLEVBQVM2dkMsR0FBSSxNQUNiaTNELEVBQWNqM0QsR0FBSSxDQUFBLEdBQ2xCa2hFLEVBQWEsR0FBRXRnSCxzREFDZnVnSCxFQUFtQixHQUFFdmdILDREQUNyQnk1RyxFQUFVcjZELEdBQUksTUE2QnBCLFNBQVN5NkQsRUFBY2w5RSxHQUNJLEdBQXJCQSxFQUFLbTlFLGNBQ0xuOUUsRUFBSzFvQixNQUFRc1MsRUFBbUJpRSxVQUFVbVMsRUFBSzFvQixLQUNyRCxDQTlCQTJwRCxJQUFjLEtBRVosTUFBTWdpRCxFQUFZcjVGLEVBQW1CQyxjQUFjLGFBQzdDOFksRUFBTy9ZLEVBQW1CQyxjQUFjLFFBQzdCRCxFQUFtQkMsY0FBYyxXQUU5Q281RixHQUFXcjVGLEVBQW1CTSxlQUFlLFlBQWEsUUFDMUR5WSxHQUFNL1ksRUFBbUJNLGVBQWUsT0FBUSxRQUNoRHlZLEdBQU0vWSxFQUFtQk0sZUFBZSxVQUFXLFFBRXZETixFQUFtQk0sZUFBZSxPQUFRbXNCLEVBQU04d0MsTUFFaEQsSUFBSSxNQUFPNzdFLEVBQU1pa0IsS0FBWXhkLE9BQU9DLFFBQVFxa0MsRUFBTW10RSxtQkFDaERqMEYsRUFBUXZmLFNBQVM0RyxJQUNmQSxFQUFPbzNGLFlBQWMxaUcsRUFDbEJzTCxFQUFPaXZCLG1CQUNSc29FLEVBQW1CN2lHLEdBQVFzTCxFQUFNLEdBRXZDLElBR0ZzcUQsSUFBVSxLQUNSMmlELElBQ0FDLElBQ0F6RyxHQUFlLElBUWpCLE1BQU16dkYsRUFBUyxXQUNieXZGLEtBR0luVyxFQUFhLFNBQVMxekYsR0FDMUJvVyxFQUFtQk0sZUFBZTFXLEVBQUt3NkYsWUFBYXg2RixFQUFLMUksSUFDekR1eUcsS0FHSUEsRUFBZ0IsWUFRdEJ2Z0csaUJBQ0VnZ0csRUFBUXQ0RyxNQUFNKzBHLGVBQ2QsSUFBSTExRyxRQUtOaVosaUJBQ0UsTUFBTTY4RCxFQWNSLFdBQ0UsSUFBSWgzQyxFQUFPL1ksRUFBbUJDLGNBQWMsUUFDeENvNUYsRUFBWXI1RixFQUFtQkMsY0FBYyxhQUM3Q2s2RixFQUFVbjZGLEVBQW1CQyxjQUFjLFdBQ3BDLFFBQVI4WSxJQUFrQkEsRUFBTyxJQUNaLFFBQWJzZ0YsSUFBdUJBLEVBQVksSUFDeEIsUUFBWGMsSUFBcUJBLEVBQVUsSUFFbEMsSUFBSXBxQyxFQUFjLEdBQ2R2dkUsRUFBUyxDQUNYKzhFLEtBQU12OUQsRUFBbUJDLGNBQWMsUUFDdkM4WSxLQUFNQSxFQUNOc2dGLFVBQVdBLEVBQ1hjLFFBQVNBLEdBRVAvMUYsRUFBYXBFLEVBQW1CMEUsa0JBQWtCbGtCLEdBRWhDdXZFLEVBQU4sSUFBYnNwQyxFQUFrQyxHQUFFVSxLQUFhMzFGLElBQzlCLEdBQUU0MUYsS0FBbUI1MUYsSUFFM0MsT0FBTzJyRCxDQUNULENBbkNzQjZqQyxHQUNwQixJQUFJQyxRQUFjdjBGLEVBQWV5QyxhQUFhZ3VELElBYmhELFNBQTJCOTFFLEdBQ3pCeXFHLEVBQW9COXBHLE1BQVFYLEVBQUt5cUcsbUJBQ25DLEVBWUUwVixDQUFrQnZHLEdBQ2xCQSxFQTBHRixTQUE2QkEsR0FDekIsSUFBSUMsRUFBY3Z6RSxHQUFNM21DLFFBQVFDLE1BQU8saUJBQWdCMG1DLEVBQUV3ekUsMkJBQTJCeHpFLEVBQUV5ekUsK0RBQ2xGN2xHLEVBaUVSLFNBQXNDMGxHLEVBQU9JLEdBQ3pDLElBQUlDLEVBQVksQ0FBQSxFQUNoQkwsRUFBTXpsRyxNQUFNaEksU0FBU2pILEdBQU0rMEcsRUFBVS8wRyxFQUFFMnNHLFVBQVcsSUFDbEQsSUFBSXFJLEVBQVk1ekUsR0FBcUMsTUFBL0IyekUsRUFBVTN6RSxFQUFFd3pFLGlCQUEwRCxNQUEvQkcsRUFBVTN6RSxFQUFFeXpFLGdCQUNyRTdsRyxFQWlCUixTQUFvQit4RCxFQUFVaTBDLEVBQVVGLEdBQ3BDLE9BQU8vekMsRUFBU2x6RCxRQUFRak0sSUFDM0IsTUFBTXF6RyxFQUFlRCxFQUFTcHpHLEdBSTlCLE9BSG9CLEdBQWhCcXpHLEdBQWtDLE1BQVRILEdBQ3pCQSxFQUFNbHpHLEdBRUhxekcsQ0FBWSxHQUVwQixDQXpCZ0JDLENBQVdSLEVBQU0xbEcsTUFBT2dtRyxFQUFVRixHQUM5QyxPQUFPOWxHLENBQ1gsQ0F2RWdCbW1HLENBQTZCVCxFQUFPQyxHQUNoRCxNQUFPLENBQUUxbEcsTUFBT3lsRyxFQUFNemxHLE1BQU9ELFFBQ2pDLENBOUdVb21HLENBQW9CVixHQUM1QixNQUFNL0QsRUFpQ1IsU0FBd0MxekcsR0FDcEMsSUFBSTgzRyxFQUFZLENBQUUsRUFBRWMsRUFBcUIsQ0FBQSxFQUV6QzU0RyxFQUFJZ1MsTUFBTWhJLFNBQVNnd0IsR0FBUzg5RSxFQUFVOTlFLEVBQUswMUUsU0FBVzExRSxJQUV0RCxJQUFJMitFLEVBQXNCcm5HLEdBQ3JCLEdBQUVBLEVBQUtxbUcsa0JBQWtCcm1HLEVBQUs3QyxRQUduQ3pPLEVBQUkrUixNQUFNL0gsU0FBU3NILElBQ3RCLElBQUl1bkcsRUFBZUYsRUFBbUJybkcsR0FDbEN3bkcsRUFBZ0JGLEVBQW1CQyxHQUNsQixNQUFqQkMsSUFDQUEsRUFBZ0IsQ0FDbkJoMEcsR0FBSSt6RyxFQUNKcHFHLE1BQU82QyxFQUFLN0MsTUFDVjZDLEtBQU1BLEVBQUsyc0csY0FBYzNzRyxLQUMzQnluRyxXQUFZLElBRVRILEVBQW1CQyxHQUFnQkMsR0FFdkNBLEVBQWNDLFdBQVd0MUcsS0FBSyxDQUMxQjBPLE9BQVEybEcsRUFBVXhtRyxFQUFLcW1HLGdCQUN2QjV5RyxPQUFRK3lHLEVBQVV4bUcsRUFBS3NtRyxnQkFDdkJwNUcsTUFBTzhTLEVBQUs5UyxPQUNkLElBSUMsSUFBSXdULEVBQVFoUyxFQUFJZ1MsTUFBTS9ULEtBQUs4RSxHQUFNQSxJQUFJZ1AsRUFBUSxHQUM3QyxJQUFLLElBQUk4bUcsS0FBZ0JELEVBQW9CLENBQ2hELElBQUlFLEVBQWdCRixFQUFtQkMsR0FDbkNJLEVBQVksQ0FDWnZKLFFBQVNvSixFQUFjaDBHLEdBQ3ZCMkosTUFBT3FxRyxFQUFjcnFHLE1BQ3BCNkMsS0FBTXduRyxFQUFjeG5HLE1BRXpCVSxFQUFNdk8sS0FBS3cxRyxHQUNYSCxFQUFjQyxXQUFXL3VHLFNBQVNzSCxJQUM5QlMsRUFBTXRPLEtBQUssQ0FDZGswRyxlQUFnQnJtRyxFQUFLYSxPQUFPdTlGLFFBQzVCa0ksZUFBZ0JxQixFQUFVdkosUUFDMUJqaEcsTUFBUSxHQUFFNkMsRUFBS2EsT0FBTzFELFdBQVc2QyxFQUFLdk0sT0FBTzBKLFVBQVV3cUcsRUFBVXhxRyxRQUNqRWpRLE1BQU84UyxFQUFLOVMsUUFFVHVULEVBQU10TyxLQUFLLENBQ2RrMEcsZUFBZ0JzQixFQUFVdkosUUFDMUJrSSxlQUFnQnRtRyxFQUFLdk0sT0FBTzJxRyxRQUM1QmpoRyxNQUFRLEdBQUU2QyxFQUFLYSxPQUFPMUQsV0FBVzZDLEVBQUt2TSxPQUFPMEosVUFBVXdxRyxFQUFVeHFHLFFBQ2pFalEsTUFBTzhTLEVBQUs5UyxPQUNQLEdBRUgsQ0FDQSxJQUFJMjZHLEVBQWVubkcsRUFBTS9ULEtBQUksQ0FBQzhFLEVBQUcycUIsS0FDN0IsQ0FBRUEsUUFBT2pmLE1BQU8xTCxFQUFFMEwsTUFBTzVRLEtBQU1rRixNQUUvQm0yRyxFQUFtQixDQUFBLEVBQ3ZCQyxFQUFhbnZHLFNBQVEsQ0FBQ2luQyxFQUFJdmpCLElBQVV3ckYsRUFBaUJqb0UsRUFBR3B6QyxLQUFLNnhHLFNBQVd6K0QsSUFDeEUsSUFBSW9vRSxFQUFldG5HLEVBQU05VCxLQUFLa21DLElBRzFCLENBQ0hoeUIsT0FIZSttRyxFQUFpQi8wRSxFQUFFd3pFLGdCQUFnQmpxRixNQUlsRDNvQixPQUhlbTBHLEVBQWlCLzBFLEVBQUV5ekUsZ0JBQWdCbHFGLE1BSWxEbHZCLE1BQU8ybEMsRUFBRTNsQyxNQUNUaVEsTUFBTzAxQixFQUFFMTFCLFVBR1YsTUFBTyxDQUFFdUQsTUFBT21uRyxFQUFjcG5HLE1BQU9zbkcsRUFDekMsQ0F0R3NCQyxDQUErQjdCLEdBT25ELE9BTEMvRCxFQUFZM2hHLE1BQU12WCxPQUFTLEdBQUtrNUcsRUFBWTFoRyxNQUFNeFgsT0FBUyxFQUMxRHE4RyxFQUFhcjRHLE1BQU1tMkcsa0JBQWlCLEdBQ3BDa0MsRUFBYXI0RyxNQUFNbTJHLGtCQUFpQixHQUcvQmpCLENBQ1QsQ0FsQm1CcEQsR0FDakJvRCxFQUFZbDFHLE1BQVFYLEVBQ3BCaTVHLEVBQVF0NEcsTUFBTTgwRyxjQUNoQixDQVpFRyxJQThORixTQUFTb0ssSUFDUGp4RyxFQUFPcE8sTUFBUXhELEVBQUUwaUgsRUFBU2wvRyxPQUFPb08sU0FBVyxHQUM5QyxDQUVBLFNBQVNreEcsSUFDUG54RyxFQUFNbk8sTUFBUXhELEVBQUUwaUgsRUFBU2wvRyxPQUFPbU8sUUFBVSxFQUM1Qyw4ekNDbFVNbXFHLEVBQVVyNkQsR0FBSSxNQUNkbzdDLEVBQWVwN0MsR0FBSSxDQUFBLEdBQ25CeWhFLEVBQThCemhFLEdBQUksTUFNbEN3aEMsRUFBUzV2RSxHQUFNaXBCLEtBQUtqcEIsR0FDcEJ4UyxFQUFPLEdBQUV3QixvRUFNZjQ5RCxJQUFjbmtELGdCQUlkQSxpQkFDRSxNQUFNa3BGLEVBQWtCLEdBQ3hCLElBQUk1N0YsRUFBUyxDQUNYKzhFLEtBQU12OUQsbUJBQW1CQyxjQUFjLFNBQVd3c0IsRUFBTTh3QyxLQUN4RGhsRCxRQUFTdlksbUJBQW1CQyxjQUFjLFlBRXhDbUUsRUFBYXBFLG1CQUFtQjBFLGtCQUFrQmxrQixHQUd0RDQ3RixFQUFnQnY4RixLQUFLLENBQ25CNkQsS0FBTSw4QkFDTnl3QixVQUFXLFdBQ1gzc0IsT0FBUSxTQUFVekcsRUFBR3FaLEVBQUlnYyxFQUFNcnZCLEdBbkJqQ3V6RyxFQUE0QjEvRyxNQUFNb3BCLFFBcUJoQyxJQUdGLE1BQU11MkYsRUFBZSxHQUVsQjl0RSxFQUFNK3RFLE1BQU01akgsT0FBUyxHQUN0QjJqSCxFQUFhMTZHLEtBQUssQ0FDaEJrN0IsWUFBYXMvQyxFQUFNLGtCQUNuQjEwRCxRQUFTOG1CLEVBQU0rdEUsTUFDZjEvRSxjQUFlLFVBQ2ZFLFlBQWEsRUFDYkUsZ0JBQWdCLEVBQ2hCQyxpQkFBa0IsQ0FBQ3R1QixFQUFPalMsS0FDeEIsSUFBSTRGLEVBQVMsQ0FDWCs4RSxLQUFNdjlELG1CQUFtQkMsY0FBYyxTQUFXd3NCLEVBQU04d0MsS0FDeERobEQsUUFBUzM5QixFQUFNc0csSUFFakI4ZSxtQkFBbUJNLGVBQWUsVUFBVzFsQixFQUFNc0csSUFDbkQyTCxFQUFNNEksS0FBS3hkLElBQUssR0FBRUEsS0FBTytuQixtQkFBbUIwRSxrQkFBa0Jsa0IsTUFDOUQweUcsRUFBUXQ0RyxNQUFNKzBHLGVBQ2Q5aUcsRUFBTTRJLEtBQUt1TyxTQUNYa3ZGLEVBQVF0NEcsTUFBTTgwRyxjQUFjLElBTWxDLElBQUlsVCxFQUF5QixDQUMzQnJJLGNBQWVpSSxFQUNmOUksU0FBVyxHQUFFcjdGLEtBQU9tc0IsSUFDcEI4dUUsZUFBZSxFQUNmK0ksY0FBZXNlLEVBQ2Z0bUIsYUFBYyxDQUNabEIsWUFBWSxFQUNaSSxNQUFPLENBQUMsQ0FBRSxFQUEyQixTQUNyQy9YLFdBQVksQ0FDVixDQUFFLy9FLEtBQU0sWUFBYWdnRixRQUFTLEdBQzlCLENBQUVoZ0YsS0FBTSxZQUFhZ2dGLFFBQVMsR0FDOUIsQ0FBRWhnRixLQUFNLFlBQWFnZ0YsUUFBUyxNQUtoQ3R1RSxFQUFVLENBQ1osQ0FDRXV1RSxXQUFZNW5ELEtBQUsscUJBQXNCMm5ELFFBQVMsRUFBRzM1RSxLQUFNLGNBQWV6SCxLQUFNLGNBQWVrNkIsVUFBVyxjQUFlNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDN0ksWUFBV1IsK0NBQStDUSxFQUFLaUgsdUJBQXVCakgsRUFBSzRRLGNBS3RHNGhDLEVBQU0rdEUsTUFBTTVqSCxPQUFTLElBQ3RCbVcsRUFBUWxOLEtBQUssQ0FDWHk3RSxXQUFZNW5ELEtBQUssUUFBUzJuRCxRQUFTLEVBQUczNUUsS0FBTSxVQUFXekgsS0FBTSxVQUFXazZCLFVBQVcsMEJBQTJCNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDN0gsSUFBWkEsRUFBS2lILEdBQ0UsR0FFQSxZQUFXekgsd0NBQXdDUSxFQUFLaUgsdUJBQXVCakgsRUFBSzRRLGNBSWxHMnhGLEVBQXVCdkksYUFBYWQsTUFBUSxDQUFDLENBQUUsRUFBMkIsU0FDMUVxSixFQUF1QnZJLGFBQWE3WSxXQUFhLENBQy9DLENBQUUvL0UsS0FBTSxZQUFhZ2dGLFFBQVMsR0FDOUIsQ0FBRWhnRixLQUFNLFlBQWFnZ0YsUUFBUyxHQUM5QixDQUFFaGdGLEtBQU0sWUFBYWdnRixRQUFTLEtBSWxDdHVFLEVBQVFsTixLQUFLLENBQ1h5N0UsV0FBWTVuRCxLQUFLLFNBQVUybkQsUUFBUyxFQUFHMzVFLEtBQU0sUUFBU3pILEtBQU0sUUFBU2s2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsR0FDOUgsQ0FDRFQsV0FBWTVuRCxLQUFLLFNBQVUybkQsUUFBUyxFQUFHMzVFLEtBQU0sUUFBU3pILEtBQU0sWUFBYWs2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsR0FDbEksQ0FDRFQsV0FBWTVuRCxLQUFLLFdBQVkybkQsUUFBUyxFQUFHMzVFLEtBQU0sY0FBZXpILEtBQU0sY0FBZWs2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsR0FDNUksQ0FDRFQsV0FBWTVuRCxLQUFLLFdBQVkybkQsUUFBUyxFQUFHMzVFLEtBQU0sY0FBZXpILEtBQU0sY0FBZWs2QixVQUFXLDBCQUEyQjRuRCxtQkFBb0IsR0FDNUksQ0FDRFQsV0FBWTVuRCxLQUFLLGFBQWMybkQsUUFBUyxFQUFHby9CLFNBQVMsRUFBTy80RyxLQUFNLFlBQWF6SCxLQUFNLFlBQWFrNkIsVUFBVywwQkFBMkI0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUM5SmpCLEVBQVUwMUcsZ0JBQWdCejBHLEVBQUt5Z0gsc0JBQXVCemdILEVBQUswZ0gsc0JBQXVCam5GLEtBQUssUUFBU0EsS0FBSyxVQUU3RyxDQUNENG5ELFdBQVk1bkQsS0FBSyxnQkFBaUIybkQsUUFBUyxFQUFHMzVFLEtBQU0sYUFBY3pILEtBQU0sYUFBY2s2QixVQUFXLHVCQUF3QjRuRCxtQkFBb0IsRUFBRzlwRCxPQUFTaDRCLEdBQ2hKakIsRUFBVTJ5QixZQUFZMXhCLElBRTlCLENBQ0RxaEYsV0FBWTVuRCxLQUFLLGdCQUFpQjJuRCxRQUFTLEVBQUczNUUsS0FBTSxhQUFjekgsS0FBTSxhQUFjazZCLFVBQVcsdUJBQXdCNG5ELG1CQUFvQixFQUFHOXBELE9BQVNoNEIsR0FDaEpqQixFQUFVMnlCLFlBQVkxeEIsSUFFOUIsQ0FDRHFoRixXQUFZNW5ELEtBQUssaUJBQWtCMm5ELFFBQVMsRUFBRzM1RSxLQUFNLGNBQWV6SCxLQUFNLGNBQWVrNkIsVUFBVyx1QkFBd0I0bkQsbUJBQW9CLEVBQUc5cEQsT0FBU2g0QixHQUNuSmpCLEVBQVUyeUIsWUFBWTF4QixLQUtqQ3VpRyxFQUF1QnBKLGVBQWlCcm1GLEVBQ3hDa25GLEVBQWFyNUYsTUFBUTRoRyxDQUN2QixDQW5IUU0sRUFBaUIsdWlCQ2FWOGQsR0FBQSxDQUNYbjdELFdBQVksQ0FDZjU1QyxNQUFTZ3FGLEdBQ1IsZ0JBQWlCbGQsSUFFZmxtQyxNQUFPLENBQ1Z2ckMsR0FBSXZKLE9BQ0prakgsZ0JBQWlCcDdGLE9BRWQyN0IsVUFDQyxFQUNEbmhELE9BQ0gsTUFBTyxDQUNIeTVCLEtBQU9qcEIsR0FBTWlwQixLQUFLanBCLEdBQ2xCNVQsT0FBUU8sRUFDUis0RixTQUFXLEdBQUV4NkYsS0FBS29uRCxPQUFPNzdDLFdBQ3pCNDVHLHFCQUFzQixHQUN0QkMsMkJBQTRCLEtBQzVCQyxrQkFBbUIsR0FDbkJDLGdCQUFpQixHQUNqQkMsWUFBYSxLQUNiQyxzQkFBdUIsS0FDdkJDLGdCQUFnQixFQUNoQkMsZ0JBQWlCLEtBQ2pCQyxrQkFBbUIsR0FFbkIsRUFDRHRzRSxNQUFPLENBQUMsU0FDUjhQLFVBQVksRUFFWjVyQyxzQkFDUTBMLFlBQVlNLFNBQVN2cEIsS0FBS3c2RixVQUNoQ3BxRSxzQkFBc0JTLGdCQUFnQjd3QixLQUFLb25ELE9BQVcsR0FBRzN5QixxQkFBcUJDLG9CQUFxQnJkLEdBQVdyWCxLQUFLZ08sS0FBS3FKLEtBRXhINFIsWUFBWUcsTUFBTXBwQixLQUFLb25ELE9BQVcsR0FDbkMsRUFDRDRCLFFBQVMsQ0FDWmg3QyxLQUFNLFNBQVNxSixHQUN1QixNQUEvQnJYLEtBQUtvbkQsT0FBTzg5RCxpQkFBaUUsR0FBdENsbEgsS0FBS29uRCxPQUFPODlELGdCQUFnQmprSCxTQUd6RCxNQUFWb1csR0FDSnJYLEtBQUttbEgscUJBQXVCOXRHLEVBQzVCclgsS0FBSzRsSCxjQUFjdnVHLEtBRWpCclgsS0FBS21sSCxxQkFBdUJubEgsS0FBS29uRCxPQUFPODlELGdCQUFnQixHQUN4RGxsSCxLQUFLNGxILGlCQUVQNWxILEtBQUt1bkQsTUFBYSxNQUFFdjVDLE9BQ3RCLEVBQ0E2M0csWUFBYSxTQUFTeHVHLEVBQVF5dUcsR0FDeEJ6dUcsRUFBTzlMLElBQU12TCxLQUFLb25ELE9BQU84OUQsa0JBRTlCbGxILEtBQUttbEgscUJBQXVCbmxILEtBQUtvbkQsT0FBTzg5RCxnQkFBZ0J4OEcsTUFBTTI0QyxHQUFPQSxFQUFHOTFDLElBQU04TCxFQUFPOUwsTUFFaEY4TCxFQUFPcFMsUUFFTGpGLEtBQUswbEgsZ0JBQ1YxbEgsS0FBS3NsSCxnQkFBa0J0bEgsS0FBSzBsSCxnQkFBZ0JoOUcsTUFBTTI0QyxHQUFPQSxFQUFHcDhDLE9BQVNvUyxFQUFPcFMsU0FFM0VqRixLQUFLc2xILGdCQUFrQixHQUNyQnRsSCxLQUFLdWxILFlBQWNsdUcsRUFBT3BTLE1BQzFCakYsS0FBS3dsSCxzQkFBd0J4bEgsS0FBS3cyRixpQkFBaUJzdkIsS0FHbkR6dUcsRUFBT3NlLFVBQVkzMUIsS0FBSzJsSCxvQkFFN0IzbEgsS0FBS3FsSCxrQkFBb0JybEgsS0FBSzJsSCxrQkFBa0JqOUcsTUFBTTI0QyxHQUFPQSxFQUFHOTFDLElBQU04TCxFQUFPc2UsV0FFN0UsRUFDRG93RixxQkFBc0IsU0FBU0MsR0FDMUJBLEdBQTBCLEtBQzNCaG1ILEtBQUtxbEgsa0JBQW9CVyxFQUU1QixFQUNEQyxtQkFBb0IsU0FBU0MsR0FDeEJBLEdBQW1CLEtBQ3BCbG1ILEtBQUtzbEgsZ0JBQWtCWSxFQUUxQixFQUNETixjQUFlLFNBQVNNLEdBQ3RCbG1ILEtBQUswbEgsZ0JBQWtCLEtBQ3ZCMWxILEtBQUtzbEgsZ0JBQWtCLEtBQ3ZCdGxILEtBQUt1bEgsWUFBYyxLQUNuQixJQUVJbHVHLEVBRmtCclgsS0FBS29uRCxPQUFPODlELGdCQUVMeDhHLE1BQU0yNEMsR0FBT0EsRUFBRzkxQyxJQUFNdkwsS0FBS21sSCxxQkFBcUI1NUcsS0FDL0QsTUFBVjhMLElBSUpyWCxLQUFLMmxILGtCQUFvQnR1RyxFQUFPOHVHLFVBQ2hDbm1ILEtBQUtvbEgsMkJBQTZCL3RHLEVBQU9uQyxNQUNuQixNQUFsQm1DLEVBQU9wRyxTQUNUalIsS0FBSzBsSCxnQkFBa0JydUcsRUFBT3BHLFFBQVEraUIsTUFBSyxDQUFDeGUsRUFBR0MsSUFDcEMsTUFBTEQsR0FBd0IsTUFBWEEsRUFBRU4sT0FBeUIsRUFDbkMsTUFBTE8sR0FBd0IsTUFBWEEsRUFBRVAsTUFBd0IsRUFDcENNLEVBQUVOLE1BQU10USxXQUFXcy9FLGNBQWN6dUUsRUFBRVAsTUFBTXRRLGNBRTlDNUUsS0FBS3NsSCxrQkFDUHRsSCxLQUFLc2xILGdCQUFrQnRsSCxLQUFLMGxILGdCQUFnQixNQUU5QzFsSCxLQUFLMGxILGdCQUFrQixLQUN2QjFsSCxLQUFLd2xILHNCQUF3QnhsSCxLQUFLdzJGLGlCQUFpQm4vRSxFQUFPeXVHLGFBR3pEenVHLEVBQU84dUcsV0FBOEMsR0FBakNubUgsS0FBS3FsSCxrQkFBa0Jwa0gsU0FDNUNqQixLQUFLcWxILGtCQUFvQmh1RyxFQUFPOHVHLFVBQVUsSUFHckIsTUFBbkJELEdBQ0ZsbUgsS0FBSzZsSCxZQUFZSyxFQUFpQjd1RyxFQUFPeXVHLFlBRTdDLEVBQ0R0dkIsaUJBQWtCLFNBQVNzdkIsR0FFdkIsT0FEQTlsSCxLQUFLeWxILGdCQUFpQixFQUNKLFFBQWRLLEdBQ1A5bEgsS0FBS3lsSCxnQkFBaUIsRUFDZCxNQUVFdnVCLEdBQWdCVixpQkFBaUJzdkIsRUFhM0MsRUFDRE0sb0JBQXFCLFdBQ2hCLElBQUluZ0YsRUFBUSxJQUFJcGxDLE9BQU9iLEtBQUt3bEgsdUJBSzdCLE9BSnFCeGxILEtBQUswbEgsa0JBQzVCMWxILEtBQUt5bEgsaUJBQXVDLE1BQXBCemxILEtBQUt1bEgsYUFBMkMsSUFBcEJ2bEgsS0FBS3VsSCxjQUNsQixHQUFoQ3QvRSxFQUFNdGxDLEtBQUtYLEtBQUt1bEgsYUFHeEIsRUFDRHowRSxNQUFPLFdBQ0osSUFBSTdyQyxFQUFRakYsS0FBS3VsSCxZQUNiYyxFQUFjcm1ILEtBQUt1bEgsWUFDdkIsR0FBYSxNQUFUdGdILEdBQTBDb0MsTUFBeEJySCxLQUFLc2xILGlCQUErRCxHQUEvQnRsSCxLQUFLc2xILGdCQUFnQnJrSCxPQUFjLENBQzVGLElBQUlvVyxFQUFTclgsS0FBS2tsSCxnQkFBZ0J4OEcsTUFBTTI0QyxHQUFPQSxFQUFHOTFDLElBQU12TCxLQUFLbWxILHFCQUFxQjU1RyxLQUM5RTZ3RSxFQUFTL2tFLEVBQU9wRyxRQUFRdkksTUFBTTNJLEdBQU1BLEVBQUVrRixPQUFTakYsS0FBS3NsSCxnQkFBZ0JyZ0gsUUFDeEVBLEVBQVFtM0UsRUFBT24zRSxNQUNmb2hILEVBQWNqcUMsRUFBT2lxQyxhQUFlanFDLEVBQU9sbkUsS0FDN0MsTUFBb0IsTUFBVGpRLElBQ1RBLEVBQVEsSUFFVixJQUFJNEYsRUFBUyxDQUNYVSxHQUFJdkwsS0FBS21sSCxxQkFBcUI1NUcsR0FDOUIySixNQUFPbFYsS0FBS29sSCwyQkFDWnp2RixTQUFVMzFCLEtBQUtxbEgsa0JBQWtCOTVHLEdBQ2pDdEcsTUFBT0EsRUFDUG9oSCxZQUFhQSxHQUVmcm1ILEtBQUs0bkQsTUFBTSxRQUFTLzhDLEdBQ3BCdWxCLHNCQUFzQlEsa0JBQWtCNkQscUJBQXFCRSxvQkFBcUI5cEIsR0FDbEY3SyxLQUFLK2lGLE9BQ1AsRUFDREEsTUFBTyxXQUNIL2lGLEtBQUt1bkQsTUFBYSxNQUFFdzdCLE9BQ3hCLHFEQzdOVXpCLEdBQUEsQ0FBQThhLGFBQVksT0FDWjdhLEdBQUEsQ0FBQTFpRCxNQUFNLGdDQUdSLFFBQUEsQ0FGREEsTUFBTSwwQkFBQ3luRixJQUFBLDBCQUNaM2tDLEdBQUssU0FBRixpQkFFQUYsR0FBQSxDQUFBNWlELE1BQU0sdUJBUU44aUQsR0FBSyxLQUFBLEtBQUEsTUFBQSxLQUNBYSxHQUFBLENBQUEzakQsTUFBTSwrQ0FDUDRqRCxHQUFBLENBQUE1akQsTUFBSSxxQ0FHRixZQUNHK2pELEdBQUEsQ0FBQS9qRCxNQUFNLG9CQUNKMjhELEdBQUEsQ0FBQTM4RCxNQUFNLDBDQU9OQSxNQUFNLDBDQVNIdnFCLE1BQUEsQ0FBRWdvRixPQUFBLE1BQUFoaEUsUUFBQSxLQUFBdUQsTUFBQSxrUUF2Q3BCKzhELE1BQU1yd0YsR0FBSTQ3QyxFQUFRcXpDLFNBQUV0M0MsSUFBSSxVQUNQbnpDLFVBQUksSUFBQSxPQUFBbzNDLEVBQUFwcEIsS0FBQSxnQ0FBQSxNQUNKeHVCLGFBNENSLElBQUEsVUFBQSxDQTFDTG95RSxHQVdHLE1BWEhKLEdBV0csT0FERixTQUFBLENBTERsckIsR0FJQWdzQixFQUFBLENBSmtCekcsZ0JBQUF6MEIsRUFBQWcrRCwrREFBQWgrRCxFQUFBZytELHFCQUFBN2lDLEdBQ2pCLzJFLEdBQUksY0FDSjBGLFFBQVNtMkMsRUFBZTg5RCxnQkFDeEIzaUMsK0JBQVkxNkIsRUFBQSs5RCw0REFJYmxrQyxHQUNBQyxHQTRCSSxNQTVCSmEsR0E0QkksQ0EzQkFiLEdBRUQsUUFGQ2MsR0FFRCxDQUREZCxHQUFBLFlBQUF4NkIsRUFBQWkrRCw0QkFBQSxRQXdCRCxTQUFBLENBckJLempDLEdBbUJJLE1BbkJKaUIsR0FtQkksSUFaRSxTQUFBLElBRERQLEVBQUEsQ0FKb0J6RyxnQkFBQ3owQixFQUFBaytELDREQUFBbCtELEVBQUFrK0Qsa0JBQUEvaUMsR0FDckIvMkUsR0FBSSxrQkFDSjBGLFFBQVNrMkMsRUFBaUJ3K0Qsa0JBQzFCcGpDLGdCQUFZMTZCLEVBQUFrK0QsZ0ZBR1c1K0QsRUFBZXUrRCx5QkFNckMsU0FBQSxDQUxGcnZELEdBSUNnc0IsRUFBQSxDQUppQnpHLGdCQUFBejBCLEVBQUFtK0QsMERBQUFuK0QsRUFBQW0rRCxnQkFBQWhqQyxHQUNqQi8yRSxHQUFJLGNBQ0owRixRQUFTazJDLEVBQWV1K0QsZ0JBQ3hCbmpDLGdCQUFZMTZCLEVBQUFvK0QscUZBR2ZqakMsR0FHQ3dzQixHQUFBLENBQUFsOEYsSUFBQSxHQUFBLElBRkRxdUUsR0FBbUcsUUFBQSxzQ0FBbkZ4NkIsRUFBV28rRCxZQUFBampDLEdBQUc5OUUsUUFBUzJpRCxFQUFxQnErRCxzQkFBRXo1RyxLQUFLLFFBQVN3NkcsU0FBVXAvRCxFQUFhcytELGVBQUEvL0csS0FBQSxPQUFBbTVCLE1BQUEsZ0NBQW5Gc29CLEVBQVdvK0QsZUFDM0I1akMsR0FBUSxPQUFSRSxHQUFRc2EsR0FBQWgxQyxFQUFBcHBCLEtBQUEsa0JBQUEsV0FHaEIya0QsR0FBQSxtQ0FFSyxtQ0FJUWdhLFdBQ2YsSUFBUSxDQUFSL2EsR0FBUSxTQUFBLENBQUFqOEUsS0FBQSxTQUFBL0QsU0FBQWttRCxFQUFBdStELHNCQUFBL29GLDRCQUFBd3FCLEVBQUEvVyxPQUFBK1csRUFBQS9XLFNBQUFqcUIsSUFBQWdZLE1BQUEsc0JBQUFzb0IsRUFBQXBwQixLQUFBLFVBQUEsRUFBQTI5RCxpR0N5QlosSUFDSThxQixHQUNBQyxHQUZBQyxHQUFnQixHQUtwQixJQUFJQyxHQUVBQyxHQUNBQyxHQUE0RSxNQUF2RGw3RyxPQUFPQyxTQUFTaEgsV0FBV2laLE1BQU0sbUJBQ3REaXBHLEdBQWUsQ0FDakI3aEgsTUFBT29sQixtQkFBbUJDLGNBQWMsZ0JBQ3hDN0MsTUFBTzRDLG1CQUFtQkMsY0FBYyxVQUVoQixNQUF0Qnc4RixHQUFhN2hILFFBQ2I2aEgsR0FBYTdoSCxNQUFRLElBRXpCLElBQUk4aEgsR0FBYzE4RixtQkFBbUJDLGNBQWMsVUFDaEMsTUFBZnk4RixJQUFzQyxJQUFmQSxLQUN2QkEsR0FBYyxjQUVsQixNQUFNQyxJQUF3QkgsR0FFOUIsSUFBSUksR0EvQ0osU0FBa0JDLEdBQ2QsSUFBSXR6RyxFQUFPeVcsbUJBQW1CQyxjQUFjLFFBUTVDLE9BUFksTUFBUjFXLElBRUhBLEVBREFzekcsRUFDTyxNQUVBLFlBR0R0ekcsQ0FDWCxDQXFDV213RSxDQUFTOGlDLElBU3BCLE1BMEJNTSxHQUFvQjVwRyxpQkFDdEJtcEcsU0F2RUpucEcsZUFBZ0M2cEcsRUFBb0J4ekcsR0FDaEQsSUFBSXdtRSxFQUNKLEdBQUlndEMsRUFDUGh0QyxFQUFlLEdBQUVpdEMsMERBQTBEenpHLFFBQ2pFLENBQ1YsSUFBSTB6RyxFQUFlajlGLG1CQUFtQkMsY0FBYyxnQkFDaEMsTUFBaEJnOUYsSUFBd0JBLEVBQWUsSUFDM0NsdEMsRUFBZSxHQUFFaXRDLDJEQUEyRHp6RyxrQkFBcUIwekcsR0FDOUYsQ0FFQSxhQUQwQjM5RixlQUFleUMsYUFBYWd1RCxFQUUxRCxDQTREMEJtdEMsQ0FBaUJWLEdBQW9CSSxJQUMzRFAsR0FBY3J2RyxRQUFRcE8sR0FBaUIsTUFBWEEsRUFBRWlNLFFBQWV6RSxTQUFTeEgsSUFBUWhGLFFBQVFDLE1BQU8sZ0NBQStCMkssS0FBSzZFLFVBQVV6SyxNQUFPQSxFQUFFaU0sTUFBUSxFQUFFLElBQzlJd3hHLEdBQWMxeUYsTUFBSyxDQUFDeGUsRUFBR0MsSUFBTUQsRUFBRU4sTUFBTWd2RSxjQUFjenVFLEVBQUVQLFNBQ3JEck8sU0FBU3dnRixLQUFPLEdBQ2hCbS9CLEdBQWdCLENBQUEsRUFDaEJDLEdBQWUsQ0FBQSxFQUNmQyxHQUFjajJHLFNBQVMrMkcsSUFDMUIzZ0gsU0FBU3dnRixLQUFLbWdDLEVBQU1qOEcsSUFBTWk4RyxFQUFNdHlHLE1BQ2hDc3lHLEVBQU1yQixVQUFVMTFHLFNBQVNpcEUsR0FBTzhzQyxHQUFjOXNDLEVBQUdudUUsSUFBTW11RSxFQUFHeGtFLFFBQzFEdXhHLEdBQWFlLEVBQU1qOEcsSUFBTWk4RyxFQUFNckIsVUFBVXpoSCxLQUFLZzFFLEdBQU9BLEVBQUdudUUsSUFBRyxJQUV4RCxJQUFJa0gsRUFBVTRYLG1CQUFtQjRELGtCQUM3QitCLEVBQVUsR0FDZCxJQUFLLE1BQU8xYyxFQUFLck8sS0FBVXdOLEVBQVMsQ0FDbkMsSUFBSWcxRyxFQUFhZixHQUFjaCtHLE1BQU0wZ0UsR0FBT0EsRUFBRzc5RCxJQUFNK0gsSUFDckQsR0FBa0IsTUFBZG0wRyxFQUFvQixDQUNDeGlILEVBQU1SLE1BQU0sS0FDdEJnTSxTQUFTaTNHLElBQ3ZCLElBQUt6aUgsRUFBTzB3QixHQUFZK3hGLEVBQVdqakgsTUFBTSxLQUU3QixNQUFaa3hCLEdBQTZCLE1BQVQxd0IsR0FBNkIsSUFBWjB3QixHQUNYLE1BQXRCOHhGLEVBQVd4MkcsU0FBMkUsTUFBeER3MkcsRUFBV3gyRyxRQUFRdkksTUFBTWkvRyxHQUFRQSxFQUFJMWlILE9BQVNBLEtBSXBGK3FCLEVBQVE5bEIsS0FBSyxDQUFDcUIsR0FBSWs4RyxFQUFXbDhHLEdBQUlvcUIsU0FBVUEsRUFBVTF3QixNQUFPQSxHQUFPLEdBRWhFLENBQ0QsQ0FDQSxPQUFPK3FCLENBRVgsRUF3RGUsSUFBQTQzRixHQUFBLENBQ1g5d0UsTUFBTyxDQUNWdnJDLEdBQUl2SixRQUVEOG5ELFdBQVksQ0FDWix5QkFBMEIrOUQsR0FDN0IsZ0JBQWlCQyxJQUtkMytELFVBQ0MsRUFDRDVyQyxnQkFDSCxJQUFJd3FHLEVBQTBCOStGLFlBQVlNLFNBQVN2cEIsS0FBS2dvSCwyQkFPeEQsR0FONEIvK0YsWUFBWU0sU0FBU3ZwQixLQUFLaW9ILHdCQUNoREYsRUFFRi9uSCxLQUFLa29ILDRCQXBEVjNxRyxlQUFnQzRxRyxHQUM1QixJQUFJdjBHLEVBQU91MEcsRUFBaUJ2MEcsS0FDeEJ3bUUsRUFBZSxHQUFFaXRDLDJEQUEyRHp6RyxJQUM1RW5OLFFBQVlrakIsZUFBZXlDLGFBQWFndUQsR0FDeENndUMsRUFBZ0IzaEgsRUFBSSxHQUFHMFUsS0FBS3pXLEtBQUt3UCxJQUNqQyxDQUNIalAsTUFBT2lQLEVBQUczSSxHQUNWUSxLQUFNbUksRUFBR25JLEtBQ1QwYixNQUFPdlQsRUFBR3VULE1BQ1Y0Z0csU0FBUyxNQWFWLEdBVkk1aEgsRUFBSXhGLE9BQVMsR0FDcEJ3RixFQUFJLEdBQUcwVSxLQUFLMUssU0FBU3lELElBQ2IsSUFBSXJILEVBQVEsQ0FDZjVILE1BQU9pUCxFQUFHM0ksR0FDVlEsS0FBTW1JLEVBQUduSSxLQUNOMGIsTUFBT3ZULEVBQUd1VCxPQUVWMmdHLEVBQWNsK0csS0FBSzJDLEVBQU0sSUFHTyxNQUFqQ3M3RyxFQUFpQmIsY0FBK0QsSUFBdkNhLEVBQWlCYixhQUFhcmlILE1BQzlFa2pILEVBQWlCYixhQUFlYyxFQUFjLE9BQ3BDLENBQ1YsSUFBSTM3RSxFQUFJMjdFLEVBQWMxL0csTUFBTXpDLEdBQU1BLEVBQUVoQixPQUFTa2pILEVBQWlCYixhQUFhcmlILFFBQ3JFa2pILEVBQWlCYixhQUFlNzZFLENBQ25DLENBSUEsT0FIQXBpQixtQkFBbUJNLGVBQWUsZUFBZ0J3OUYsRUFBaUJiLGFBQWFyaUgsT0FDaEZvbEIsbUJBQW1CTSxlQUFlLFFBQVN3OUYsRUFBaUJiLGFBQWE3L0YsT0FDekUwZ0csRUFBaUJDLGNBQWdCQSxFQUMxQjNoSCxDQUNYLENBcUJXNmhILENBQWlCdG9ILE1BRVYsT0FBYkEsS0FBSzRULEtBQWUsQ0FDcEIsSUFBSW9jLFFBQWdCbTNGLEtBRXBCUCxHQTZFTCxTQUF1QnVCLEdBRW5CLE1BQU1JLEVBQVMsSUFBSUMsT0FBT0wsRUFBaUI1Z0UsTUFBYyxPQUFHLENBQy9Ea2hFLFlBQVksRUFDWmwyRCxXQUFhLEtBQ2J1MUIsU0FBVyxDQUNBci9FLFFBQVMsRUFDVGlnSCxVQUFZLG9CQUV2QkMsYUFBYyxDQUFFbGdILFNBQVMsR0FDekJtZ0gsVUFBWSxDQUNEenVELElBQU0sU0FBUzB1RCxHQUN6QixJQUNrQixNQUFRLGVBQWNBLEVBQVE1akgsd0VBQXdFNGpILEVBQVFocUYsTUFBUWdxRixFQUFRaHFGLE1BQVEsT0FBTzcrQixLQUFLOG9ILGNBQWNELHNKQUd0SkEsRUFBUTN6RyxNQUFTLE1BQUsyekcsRUFBUTN6RyxrQkFBcUIsdURBQ21NMnpHLEVBQVFFLGlCQUFtQnZDLEdBQWNxQyxFQUFRRSxrQkFBb0IsNkVBQzVSRixFQUFRNWpILDBFQU1uRSxDQUZBLE1BQU1qQixHQUNZQyxRQUFRQyxNQUFPLDZDQUE0Q0YsSUFDN0UsQ0FDVSxHQUVYZ2xILFNBQVUsU0FBU0gsR0FDZixZQUErQixJQUFoQkEsRUFBUXYxRyxVQUNjLElBQTdCdTFHLEVBQVFFLHVCQUNVLElBQWxCRixFQUFRNWpILEtBQ3BCLElBR0d4RCxFQUFFMFMsVUFBVWlWLE9BQU0sV0FFckJtL0YsRUFBT1UsUUFBUXRDLE9BVVosTUFBTXVDLEVBQWUzckcsZUFBZTQ4QyxHQUVKLGlCQUFqQkEsRUFBSWd2RCxZQUF5Qmh2RCxFQUFJZ3ZELFVBQVksR0FBR2h2RCxFQUFJZ3ZELFdBQ3ZDLGlCQUFiaHZELEVBQUlsMUQsUUFBcUJrMUQsRUFBSWwxRCxNQUFRLEdBQUdrMUQsRUFBSWwxRCxPQUt2RCxJQUFJbWtILEVBSG9CYixFQUFPYyxhQUdVM2dILE1BQUs0Z0gsR0FDMUNBLEVBQVFweUQsYUFBYSxTQUFXaUQsRUFBSTdtRCxLQUNqQ2cyRyxFQUFRcHlELGFBQWEsZUFBaUJpRCxFQUFJZ3ZELGlCQUk3QjloSCxJQURGa2hILEVBQU9NLFFBQVFPLEtBTTdCM0MsR0FBYXRzRCxFQUFJN21ELE9BQVN3VyxNQUFNQyxRQUFRMDhGLEdBQWF0c0QsRUFBSTdtRCxRQUN6RDZtRCxFQUFJZ3NELFVBQVlNLEdBQWF0c0QsRUFBSTdtRCxLQUFLNnlHLFdBR3JDaHNELEVBQUk0dUQsbUJBQ0w1dUQsRUFBSTR1RCxpQkFBbUIsTUFHM0JSLEVBQU9VLFFBQVEsQ0FBQzl1RCxNQW1EcEIsT0EvQ0FvdUQsRUFBT2o5RyxHQUFHLFVBQVVpUyxlQUFlblMsR0FDakMsTUFBTWtJLEVBQU1sSSxFQUFFa3NELE9BQU9oekQsS0FBS2dQLElBQ3BCck8sRUFBUW1HLEVBQUVrc0QsT0FBT2h6RCxLQUFLNmtILFVBQ3RCLzVHLEVBQVNvYyxzQkFBc0JDLGFBRXJDLFFBQVlwa0IsSUFBUmlNLEVBQXFCLE9BQ3pCLEdBQXNCLE1BQWxCbEUsRUFBTzRnQixRQUFtQixPQUU5QixNQUFNQSxFQUFVNWdCLEVBQU80Z0IsUUFBUTNZLFFBQVEwekIsR0FBT0EsRUFBRXgvQixJQUFNK0gsR0FBUXkzQixFQUFFeC9CLElBQU0rSCxHQUFPeTNCLEVBQUU5bEMsT0FBU0EsSUFDeEZtckIsc0JBQXNCVSxXQUFXbkIsY0FBY0UsZUFBZ0IsQ0FBQ0csV0FDbEUsSUFFQXU0RixFQUFPajlHLEdBQUcsT0FBT2lTLGVBQWVuUyxHQUM1QixNQUFNa3NELEVBQVNsc0QsRUFBRWtzRCxPQUNqQixRQUFvQmp3RCxJQUFoQml3RCxFQUFPaHpELEtBQXNCLE9BR2pDLE9BRllnekQsRUFBT2h6RCxLQUVWZ1AsU0FBVCxHQUNJaTFHLEVBQU9nQixXQUFXLENBQUNuK0csRUFBRWtzRCxPQUFPNkMsTUFDNUIvdUQsRUFBRUMsc0JBQ0ZELEVBQUVpUyxrQkFHVixJQUlBa3JHLEVBQU9qOUcsR0FBRyxTQUFTaVMsZUFBZW5TLEdBQzlCLE1BQU1rc0QsRUFBU2xzRCxFQUFFa3NELE9BQ2pCLFFBQW9CandELElBQWhCaXdELEVBQU9oekQsS0FBc0IsT0FDakMsUUFBd0IrQyxJQUFwQml3RCxFQUFPaHpELEtBQUtnUCxJQUFvQixPQUNwQyxNQUFNNm1ELEVBQU03QyxFQUFPaHpELEtBRTFCNmpILEVBQWlCcUIsU0FBV3J2RCxFQUU1Qi9wQyxzQkFBc0JRLGtCQUFrQjZELHFCQUFxQkMsbUJBQW9CLENBQUNucEIsR0FBSTR1RCxFQUFJN21ELElBQUtxaUIsU0FBVXdrQyxFQUFJNHVELGlCQUFrQjlqSCxNQUFPazFELEVBQUlndkQsV0FDdkksSUFFQVosRUFBT2o5RyxHQUFHLGdCQUFnQmlTLGVBQWVuUyxHQUM1Q25ILFFBQVFNLEtBQUssVUFFVixJQUVBOUMsRUFBRyxRQUFPNkosR0FBRyxTQUFVLG1CQUFtQmlTLGVBQWVuUyxHQUM1RG5ILFFBQVFNLEtBQUssY0FFVixJQUNPLENBQ1Zna0gsU0FDQVcsZUFFRCxDQTdNY08sQ0FBY3pwSCxNQUN2Qm93QixzQkFBc0JVLFdBQVduQixjQUFjRSxlQUFnQixDQUFDRyxZQUNoRUksc0JBQXNCVyxnQkFBZ0Ivd0IsS0FBS29uRCxPQUFXLEdBQUd6M0IsY0FBY0UsZ0JBQWlCemdCLEdBQVdwUCxLQUFLMHBILGNBQWN0NkcsS0FBUyxFQUNuSSxDQUNBcFAsS0FBSzJwSCxXQUFhakQsR0FHbEJ6OUYsWUFBWUcsTUFBTXBwQixLQUFLb25ELE9BQVcsR0FDOUIsRUFDRDlpRCxPQUNILE1BQU8sQ0FDSHk1QixLQUFNQSxLQUNOa3FGLGlCQUFtQixHQUFFam9ILEtBQUtvbkQsT0FBTzc3QyxtQkFDakN5OEcsMEJBQTRCLEdBQUVob0gsS0FBS29uRCxPQUFPNzdDLDRCQUMxQ3ErRyxjQUFjLEVBQ2RKLFNBQVUsS0FDVnBDLG1CQUFvQlAsR0FDcEJ1QixjQUFlLEdBQ2ZkLGFBQWNSLEdBQ2QrQyxZQUFhOUMsR0FDYm1CLHFCQUFzQmxCLEdBQ3RCcHpHLEtBQU1xekcsR0FDTjBDLFdBQVksR0FDWkcsYUFBYyxHQUVkLEVBQ0Q5Z0UsUUFBUyxDQUNaK2dFLGtCQUFtQixTQUFTMXlHLEdBQ3hCLE9BQWtDLE1BQTNCb3ZHLEdBQWFwdkcsRUFBTzlMLEdBQzlCLEVBQ0R5K0csbUJBQW9CLFNBQVM1NkcsR0FDekJpYixtQkFBbUJNLGVBQWUsU0FBVXZiLEdBQzVDaWIsbUJBQW1CK0QsWUFDdEIsRUFDRDY3Riw0QkFBNkIsV0FDZjUvRixtQkFBbUJ5RCxpQkFDN0J6RCxtQkFBbUJNLGVBQWUsZUFBZ0IzcUIsS0FBS3NuSCxhQUFhcmlILE9BQ3BFb2xCLG1CQUFtQk0sZUFBZSxRQUFTM3FCLEtBQUtzbkgsYUFBYTcvRixPQUM3RDRDLG1CQUFtQitELFlBQ3RCLEVBQ0Q4N0YsbUJBQW9CLFdBQ2hCbHFILEtBQUt1bkQsTUFBcUIsY0FBRXY1QyxNQUMvQixFQUNEbThHLGVBQWdCLFdBRVovNUYsc0JBQXNCVSxXQUFXbkIsY0FBY0UsZUFBZ0IsQ0FBQ0csUUFEbEQsSUFFakIsRUFDRDA1RixjQUFlLFNBQVN0NkcsR0FDcEIsSUFBSTRnQixFQUFVNWdCLEVBQU80Z0IsUUFDckIsR0FBZSxNQUFYQSxFQUFtQixPQUV2QjNGLG1CQUFtQjZFLGNBQWN3M0YsR0FBY2hpSCxLQUFLcW1DLEdBQU1BLEVBQUV4L0IsTUFDNURxN0csR0FBTzJCLE9BQU82QixnQkFDZCxJQUFJQyxFQW5JVCxTQUE0QnI2RixHQUN4QixHQUFlLE1BQVhBLEVBQW1CLE1BQU8sR0FDOUIsSUFBSXM2RixFQUFpQixDQUFBLEVBQ3JCdDZGLEVBQVF2ZixTQUFTczZCLElBQ3BCLElBQUl1eEMsRUFBUWd1QyxFQUFldi9FLEVBQUV4L0IsSUFDaEIsTUFBVCt3RSxJQUNBQSxFQUFRLEdBQ1JndUMsRUFBZXYvRSxFQUFFeC9CLElBQU0rd0UsR0FFM0JBLEVBQU1weUUsS0FBSzZnQyxFQUFFLElBRVYsSUFBSXMvRSxFQUFpQixDQUFBLEVBQ3JCLElBQUssSUFBSUUsS0FBUUQsRUFBZ0IsQ0FDcEMsSUFDSUUsRUFEUUYsRUFBZUMsR0FDRGx6RyxRQUFRMHpCLEdBQWlCLE1BQVhBLEVBQUU5bEMsT0FBK0IsTUFBZDhsQyxFQUFFcFYsVUFBa0MsSUFBZG9WLEVBQUVwVixXQUFnQmp4QixLQUFLcW1DLEdBQU8sR0FBRUEsRUFBRTlsQyxTQUFTOGxDLEVBQUVwVixhQUFZOXdCLEtBQUssS0FDL0l3bEgsRUFBZUUsR0FBUUMsQ0FDcEIsQ0FDQSxPQUFPSCxDQUNYLENBaUgwQkksQ0FBbUJ6NkYsR0FDeEMzRixtQkFBbUJpRixlQUFlKzZGLEdBQ2xDcjZGLEVBQVF2ZixTQUFTczZCLElBQ3BCLElBQUlvdkIsRUFsTXlCLFNBQVM5aUQsR0FDcEMsSUFBSXF6RyxFQUFVaEUsR0FBY2grRyxNQUFNcWlDLEdBQU1BLEVBQUV4L0IsSUFBTThMLEVBQU85TCxLQUN4QyxNQUFYbS9HLEdBQW1Cem1ILFFBQVFDLE1BQU0sbURBRXJDLElBQUltaUgsRUFBY2h2RyxFQUFPcFMsTUFDekIsR0FBdUIsTUFBbkJ5bEgsRUFBUXo1RyxRQUFpQixDQUNoQyxJQUFJMDJHLEVBQU0rQyxFQUFRejVHLFFBQVF2SSxNQUFNM0ksR0FBTUEsRUFBRWtGLE9BQVNvUyxFQUFPcFMsUUFDN0MsTUFBUDBpSCxJQUNBdEIsRUFBY3NCLEVBQUl6eUcsTUFFbkIsQ0FDQSxNQUFNaWxELEVBQU0sQ0FDZmpsRCxNQUFPdzFHLEVBQVF4MUcsTUFDZjVCLElBQUtvM0csRUFBUW4vRyxHQUNidEcsTUFBT29oSCxFQUNQOEMsVUFBVzl4RyxFQUFPcFMsTUFDbEI4SyxNQUFRLEdBQUUyNkcsRUFBUXgxRyxRQUFRbUMsRUFBT3NlLFdBQVcwd0YsSUFDNUMwQyxpQkFBa0IxeEcsRUFBT3NlLFVBR3RCLE1BRGlCLElBQWJ3a0MsRUFBSWwxRCxRQUFlazFELEVBQUlsMUQsTUFBUSxNQUNkLE1BQWpCazFELEVBQUlndkQsV0FBNkMsTUFBeEJodkQsRUFBSTR1RCxrQkFBb0QsSUFBeEI1dUQsRUFBSTR1RCxpQkFDN0QsS0FFRzV1RCxDQUNYLENBMEtZd3dELENBQXVCNS9FLEdBQ3RCLE1BQVBvdkIsR0FDSnlzRCxHQUFPc0MsYUFBYS91RCxFQUFJLElBRXJCbjZELEtBQUs4cEgsYUFBZTk1RixDQUN2QixFQUNENDZGLFlBQWEsU0FBUy8vRyxHQUNsQixJQUNJbWxCLEVBRFN4RSxzQkFBc0JDLGFBQ2R1RSxRQUNOLE1BQVhBLElBQW1CQSxFQUFVLElBQ1osTUFBakJod0IsS0FBS3dwSCxXQUNaeDVGLEVBQVVBLEVBQVEzWSxRQUFRMHpCLEdBQU1BLEVBQUV4L0IsSUFBTXZMLEtBQUt3cEgsU0FBU2wyRyxLQUFPeTNCLEVBQUU5bEMsT0FBU2pGLEtBQUt3cEgsU0FBU0wsWUFDdEZucEgsS0FBS3dwSCxTQUFXLE1BRWJ4NUYsRUFBUTlsQixLQUFLVyxHQUVidWxCLHNCQUFzQlUsV0FBV25CLGNBQWNFLGVBQWdCLENBQUNHLFdBQ3BFLHFEQzlUSXN4RCxHQUFBLENBQUFodEUsTUFBQSxDQUFrQmxCLE1BQUEsU0FDaEJtdUUsR0FBQSxDQUFBMWlELE1BQU0sa0JBS21CQSxNQUFNLHNDQUM5QkEsTUFBTSxZQUFZdHpCLEdBQUcsZUFBZXUzQixLQUFLLDBEQXlCckJqRSxNQUFNLGNBQWN2cUIsTUFBQSxDQUFrQmxCLE1BQUEsd0NBR2tIdXVFLEdBQWlGLE9BQUEsS0FBQSxDQUEzRUEsR0FBcUUsSUFBQSxDQUFsRTlpRCxNQUFNLGNBQWMsc0JBQW9CLEdBQUc5dUIsTUFBTSxtQ0FJeE80eEUsR0FBMkIsSUFBQSxDQUF4QjlpRCxNQUFNLGdCQUFjLE1BQUEsNG5CQXZDN0IsT0FBQStvRSxLQUFBNWtCLEdBNENLLE1BNUNMMUIsR0E0Q0ssQ0EzQ0hLLEdBNEJLLE1BNUJMSixHQTRCSyxDQTNCSGxyQixHQUNldzBELEVBQUEsQ0FEQzNGLGdCQUFpQi85RCxFQUFVd2lFLFdBQUc3dEIsUUFBT2owQyxFQUFXK2lFLFlBQUUxbkUsSUFBSSxnQkFBaUIzM0MsR0FBSTQ3QyxFQUFnQjhnRSw2REFFM0c1eEQsR0F3QndCeTBELEVBQUEsQ0F4QkN2L0csR0FBSTQ3QyxFQUF5QjZnRSwyQkFBQSxDQUNuQ3A4RixVQUN0QixJQU1LLENBTk11N0IsRUFBa0JpZ0Usb0JBQTdCeGYsS0FBQTVrQixHQU1LLE1BTkx4QixHQU1LLENBTEhHLEdBSUssTUFKTEYsR0FJSyxDQUhJRSxHQUEwTixJQUFBLENBQXZOOXVFLEtBQUssSUFBS3dxQix1QkFBT3dxQixFQUFrQm1pRSxtQkFBQSxlQUFnQm5yRixTQUFNLGFBQVcsQ0FBQXdPLE9BQWtFLGNBQTdDOFosY0FBNkMsNkJBQUFBLEVBQUEwaUUsd0NBQTRDMWlFLGtCQUE4QixPQUFJLEdBQ3ZOdzZCLEdBQWlPLElBQUEsQ0FBOU45dUUsS0FBSyxJQUFLd3FCLHVCQUFPd3FCLEVBQWtCbWlFLG1CQUFBLGlCQUFrQm5yRixTQUFNLGFBQVcsQ0FBQXdPLE9BQW9FLGdCQUEvQzhaLGNBQStDLCtCQUFBQSxFQUFBMGlFLDBDQUE4QzFpRSxrQkFBZ0MsTUFBRyxHQUNsTixRQUFIQSxFQUFHdnpDLFdBQVpvdkUsR0FBdU8sSUFBQSxPQUE5TW53RSxLQUFLLElBQUt3cUIsdUJBQU93cUIsRUFBa0JtaUUsbUJBQUEsWUFBYW5yRixTQUFNLGFBQWEsQ0FBQXdPLE9BQTZELFdBQTFDOFosY0FBMEMsMEJBQUFBLEVBQUEwaUUsMEJBQXFELFdBQVoxaUUsRUFBWTBpRSxnQkFBZSxVQUFPLHFDQUdqTzFpRSxFQUFvQitnRSw4QkFBbENsbEMsR0FVUSxTQUFBLE9BVjRCbmtELE1BQU0sd0RBQTRCc29CLEVBQVltZ0UsYUFBQWhsQyxHQUFJMUUsd0JBQVEvMUIsRUFBMkJvaUUseUNBQ3ZIam5DLEdBRVV3c0IsR0FBQSxLQUFBQyxHQUZldG9ELEVBQWFpaEUsZUFBckJuMEcscUJBQ1ksR0FBYkEsRUFBS28wRyxjQUFuQnJsQyxHQUF5RSxTQUFBLE9BQXBDLzlFLE1BQU9nUCxHQUFTa29GLEdBQUFsb0YsRUFBS2xJLHlDQUV6QyxZQUFIbzdDLEVBQUd2ekMsV0FBbkJvdkUsR0FLVSxXQUFBLE9BTDJCOXRFLE1BQU9peUMsRUFBSXBwQixLQUFBLDZCQUM5Q2lsRCxHQUdVd3NCLEdBQUEsS0FBQUMsR0FIZXRvRCxFQUFhaWhFLGVBQXJCbjBHLHFCQUVJQSxFQUFLbzBHLDRCQUFwQnJsQyxHQUFrRSxTQUFBLE9BQXBDLzlFLE1BQU9nUCxHQUFTa29GLEdBQUFsb0YsRUFBS2xJLE1BQUssRUFBQTAyRSxxREFQSXQ3QixFQUFZbWdFLGlDQVk1RHlELGtCQUN0QixJQUF1QyxDQUF2QzNvQyxHQUF1Q24zQixFQUFBM0QsT0FBQSwyQ0FLdENvN0IsR0FBYyxZQUNBLE9BQUh2N0IsRUFBR3Z6QyxNQUFkZzBGLEtBQUE1a0IsR0FTSyxNQVRMTCxHQVNLLENBUkhoQixHQUE0RyxRQUFBLENBQXJHOWlELE1BQU0sNEJBQTRCOXlCLEtBQUssT0FBT20zQyxJQUFJLFNBQVUwK0IsWUFBYXo2QixFQUFJcHBCLEtBQUEsc0NBRXBGNGpELEdBQ1EsU0FBQSxDQUQ2QzlpRCxNQUFNLGVBQWUsZ0JBQWMsb0JBQW9CbjVCLEtBQUssU0FBUzZGLEdBQUcsdUJBQXdCOHhCLDRCQUFPd3FCLEVBQWtCcWlFLG9CQUFBcmlFLEVBQUFxaUUsc0JBQUFyakcsa0JBQTlKc2dDLEVBQVN3aUUsWUFBS3hpRSxFQUFVd2lFLFdBQUMxb0gsT0FBSyxRQUc5QzBnRixHQUVRLFNBQUEsQ0FGNkMsaUJBQWUsVUFBVSxpQkFBZSxTQUFTNXhFLE1BQU0sMkNBQTRDc3RCLDRCQUFPd3FCLEVBQWNzaUUsZ0JBQUF0aUUsRUFBQXNpRSxrQkFBQXRqRyxJQUFFZ1ksTUFBTSx3REFBcktzb0IsRUFBU3dpRSxZQUFLeGlFLEVBQVV3aUUsV0FBQzFvSCxPQUFLLHNCQUloRHloRixHQUFrQiw0RkNuQkwsSUFBQXNvQyxHQUFBLENBQ1hsaEUsV0FBWSxDQUNYLEVBQ0RoVCxNQUFPLENBQ1ZvakMsY0FBZTFuRSxRQUVadzNDLE1BQU8sQ0FDVmt3QixjQUFpQixTQUFTNXlFLEVBQUs0MUUsR0FDM0JsOUUsS0FBS2lySCxnQkFDVCxHQUVHNXhFLE1BQU8sR0FFUDhQLFVBQ0MsRUFDRDdrRCxLQUFJLEtBQ0EsQ0FDQWkvRixNQUFNLEVBQ04ybkIsZ0JBQWdCLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLFNBQVMsRUFDVEMsU0FBUyxFQUNaQyxTQUFVLEVBQ1ZDLFNBQVUsSUFLWGh1RyxnQkFFQyxFQUNEeXJDLFFBQVMsQ0FDWmlpRSxlQUFnQixXQUNULElBQUlPLEVBQVE3eUYsY0FBYzh5RixvQkFBb0JDLGtCQUFrQi95RixjQUFjOHlGLG9CQUFvQkUsb0JBQW9CdnFHLElBQUk3VixJQUN0SHFnSCxFQUFTanpGLGNBQWM4eUYsb0JBQW9CQyxrQkFBa0IveUYsY0FBYzh5RixvQkFBb0JFLG9CQUFvQjVrSCxNQUFNd0UsSUFLekhnNEYsRUFBUXZqRyxLQUFLazZFLGNBQWNzWSxXQUFXK1EsTUFDdEMrbkIsRUFBV3RySCxLQUFLazZFLGNBQWNzWSxXQUFXQyxTQUFTLEdBQUcrUSxRQUNyRCtuQixFQUFXdnJILEtBQUtrNkUsY0FBY3NZLFdBQVdDLFNBQVMsR0FBRytRLFFBQ3JENG5CLEVBQVdwckgsS0FBS2s2RSxjQUFjc1ksV0FBV0MsU0FBUyxHQUFHQyxRQUNyRDI0QixFQUFXcnJILEtBQUtrNkUsY0FBY3NZLFdBQVdDLFNBQVMsR0FBR0MsUUFDckR3NEIsRUFBa0JsckgsS0FBS2s2RSxjQUFjc1ksV0FBV0MsU0FBUyxHQUFHLG1CQUM1RDA0QixFQUFrQm5ySCxLQUFLazZFLGNBQWNzWSxXQUFXQyxTQUFTLEdBQUcsbUJBQ2hFenlGLEtBQUtzckgsU0FBV0UsRUFBYyxFQUFURixHQUNyQnRySCxLQUFLdXJILFNBQVdDLEVBQWMsRUFBVEQsR0FDckJ2ckgsS0FBS29ySCxTQUFXSSxFQUFjLEVBQVRKLEdBQ3JCcHJILEtBQUtxckgsU0FBV0csRUFBYyxFQUFUSCxHQUNyQnJySCxLQUFLa3JILGdCQUFrQk0sRUFBcUIsRUFBaEJOLEdBQzVCbHJILEtBQUttckgsZ0JBQWtCSyxFQUFxQixFQUFoQkwsR0FDNUJuckgsS0FBS3VqRyxNQUFRcW9CLEVBQU9yb0IsRUFFM0IsY0MxRU8xa0UsTUFBTSwrQ0FBZ0J2cUIsTUFBQSxDQUFBLE1BQ3RCcXRFLEdBT0ksUUFBQSxDQVBEOWlELE1BQUEsZUFBQSxJQU1BLEtBQUEsS0FBQSxDQUpDOGlELEdBQTBHLEtBQUEsQ0FBdEc5aUQsTUFBTSw2QkFBNEJ2cUIsTUFBQSxDQUF1RCxvQkFBQSxNQUFBLG1CQUFBLFFBQUEsV0FDN0ZxdEUsR0FBNEcsS0FBQSxDQUF4RzlpRCxNQUFNLG9DQUFvQ3ZxQixNQUFBLENBQXNELG9CQUFBLE1BQUEsbUJBQUEsWUFBQyxTQUFLcXRFLEdBQUUsSUFBQSxDQUFBOXVFLEtBQUEsNENBQUEsaUJBQUEsT0FDNUc4dUUsR0FBNkcsS0FBQSxDQUF6RzlpRCxNQUFNLCtCQUErQnZxQixNQUFBLENBQXNELG9CQUFBLE1BQUEsbUJBQUEsUUFBQyxZQUNoR3F0RSxHQUFBLEtBQUEsQ0FBQTlpRCxNQUFBLDJCQUFBdnFCLE1BQUEsQ0FBQSxvQkFBQSxNQUFBLG1CQUFBLE1BQUEscUJBQUEsUUFBQSxtQkFJTHVxQixNQUFNLDhCQUE4QnZxQixNQUFBLENBQTBCLGVBQUEsWUFDOUR1cUIsTUFBTSxxQ0FBcUN2cUIsTUFBQSxDQUFpRixtQkFBQSxNQUFBLHFCQUFBLE1BQUEsc0JBQUEsV0FBa0NxdEUsR0FBSSxLQUFBLEtBQUEsTUFBQSxPQUNqSzlpRCxNQUFLLGdDQUFnQ3ZxQixNQUFBLENBQWlGLG1CQUFBLE1BQUEscUJBQUEsTUFBQSxzQkFBQSxXQUEyQnF0RSxHQUFBLEtBQUEsS0FBQSxNQUFBLE9BRWxKOWlELE1BQU0sNEJBQU92cUIsTUFBQSxDQUFBLHNCQUFBLE1BQUEsbUJBQUEsTUFBQSxxQkFBQSxXQUFBcXRFLEdBQUEsS0FBQSxLQUFBLE1BQUEsK0NBZnBCcUIsOEJBRVF6QixHQVFKSSxpQkFBT0EsY0FDUkEsR0FBK0YsS0FBL0ZILEdBQStGLENBQTNCRyxHQUFzQixpQkFBVDRoQixPQUFBLEtBQ2pGNWhCLEdBQStMLEtBQS9MRixHQUErTCxDQUE3REUsR0FBNkQsT0FBQSxLQUFBLENBQXJEcWEsR0FBQUcsR0FBQWgxQyxFQUFBK2pFLGlCQUFpQixVQUFPLEdBQUF4cEMsR0FBTXNhLEdBQUFHLEdBQUFoMUMsRUFBQWdrRSxpQkFBaUIsVUFBTSxPQUMvTHhwQyxHQUFzSixLQUF0SmEsR0FBc0osQ0FBekJiLEdBQXlCLE9BQUEsS0FBQSxDQUFqQnFhLEdBQUFHLEdBQUFoMUMsRUFBQWlrRSxVQUFVLGlCQUFPLEdBQUEzb0MsR0FBQXVaLEdBQUFHLEdBQUFoMUMsRUFBQWtrRSxVQUFBLFVBQUEsT0FDdEozb0MsR0FBdUosb0pBQ3ZKZixHQUFpQixLQUFqQmdCLEdBQWlCLENBQUFoQixHQUFBLE9BQUEsS0FBQSxDQUFBcWEsR0FBQUcsR0FBQWgxQyxFQUFBbWtFLFVBQUEsVUFBQSxHQUFBMW9DLEdBQUFvWixHQUFBRyxHQUFBaDFDLEVBQUFva0UsVUFBQSxVQUFBLDRRQ0xkdFIsRUFBVS8yRCxJQUFJLEdBNEtwQixNQUFNd2hDLEVBQVM1dkUsR0FBTWlwQixLQUFLanBCLFVBaUMxQjZzRCxJQUFVLFNBRVZqUCxFQUFhLENBQUVtNUQsV0F6Qkl0dUcsZUFBZWpaLEdBRWhDakIsVUFBVTg2RixlQUdWLE1BQU03N0YsRUFkZSxXQUNyQixJQUFJdUksRUFBUyxDQUFBLEVBS2IsT0FKQWlzQyxFQUFNcm9CLFdBQVdoZSxTQUFTMUUsSUFDeEJsQixFQUFPa0IsR0FBUXNlLG1CQUFtQkMsY0FBY3ZlLEVBQUssSUFHaEQxSSxVQUFVeTdGLFNBQVNob0QsRUFBTXgwQyxJQUFLdUksR0FRekIwNEcsU0FFTjloSCxFQUFFd2UsSUFBSTNkLEdBQUssU0FBUzRRLEVBQUs5RCxHQUM3QixNQUFNOUssRUFBTzRPLEVBQUlBLElBQ2pCLEdBQUc1TyxFQUFLckQsT0FBUyxFQUFHLENBQ2xCLElBQUk0M0IsRUF2TFYsU0FBcUJ2MEIsR0FFbkIsSUFBSTg2QixFQUFXLElBQ1YrOUUsR0FBWUUsOEJBQ1p2bUUsRUFBTWcxRSxnQkFJWCxNQUFNQyxFQUFjdDRCLEtBQUsvdUYsSUFBSUosRUFBTTg2QixFQUFTMDhFLFlBQVlwM0csSUFBSXNuSCxHQUN0REMsRUFBY3g0QixLQUFLL3VGLElBQUlKLEVBQU04NkIsRUFBUzI4RSxZQUFZcjNHLElBQUlzbkgsR0FDdERFLEVBQW1CejRCLEtBQUsvdUYsSUFBSUosRUFBTTg2QixFQUFTNDhFLGdCQUFnQnQzRyxJQUFJc25ILEdBQy9ERyxFQUFtQjE0QixLQUFLL3VGLElBQUlKLEVBQU04NkIsRUFBUzY4RSxnQkFBZ0J2M0csSUFBSXNuSCxHQUMvREksRUFBWTM0QixLQUFLL3VGLElBQUlKLEVBQU04NkIsRUFBU2c5RSxVQUFVMTNHLElBQUlzbkgsR0FDbERLLEVBQWE1NEIsS0FBSy91RixJQUFJSixFQUFNODZCLEVBQVMrOEUsV0FDckN2RixFQUFhbmpCLEtBQUsvdUYsSUFBSUosRUFBTTg2QixFQUFTazlFLFdBQ3JDOUYsRUFBZS9pQixLQUFLL3VGLElBQUlKLEVBQU04NkIsRUFBU205RSxhQUN2QzdGLEVBQWVqakIsS0FBSy91RixJQUFJSixFQUFNODZCLEVBQVNvOUUsYUFDdkNqRyxFQUFjOWlCLEtBQUsvdUYsSUFBSUosRUFBTTg2QixFQUFTcTlFLFlBQ3RDaEcsRUFBY2hqQixLQUFLL3VGLElBQUlKLEVBQU04NkIsRUFBU3M5RSxZQUU1QyxJQUFJbGtHLEVBQVFsVSxFQUNSbVUsRUFBUXFSLE1BQU15OEIsS0FBS2t0QyxLQUFLNjRCLE1BQU1QLEVBQWFFLElBQWMxZ0gsSUFBTyxDQUFFQSxTQUV0RSxNQUFNZ2hILEVBQWU5NEIsS0FBSy91RixJQUFJK1QsRUFBTzJtQixFQUFTbThFLFFBQVE3MkcsSUFBSXNuSCxHQUMxRDVzRixFQUFTb3RGLFdBQWEvNEIsS0FBSy91RixJQUFJK1QsRUFBTzJtQixFQUFTcThFLFdBQVcvMkcsSUFBSXNuSCxHQUU5RHZ6RyxFQUFRZzdFLEtBQUsvdUYsSUFBSStULEdBQU8sQ0FBQzZ1QixFQUFHcmhDLEtBQU8sQ0FBRXNGLEdBQUlnaEgsRUFBYXRtSCxPQUN0RHVTLEVBQVFpN0UsS0FBSy91RixJQUFJOFQsR0FBTyxDQUFDOHVCLEVBQUdyaEMsS0FBTyxDQUNqQzJTLE9BQVFtekcsRUFBWTlsSCxHQUNwQnVGLE9BQVF5Z0gsRUFBWWhtSCxHQUNwQmhCLE1BQU9vbkgsRUFBV3BtSCxHQUNsQjZ3RyxZQUFhb1YsRUFBaUJqbUgsR0FDOUI0d0csWUFBYXNWLEVBQWlCbG1ILEdBQzlCOFIsS0FBTXEwRyxFQUFVbm1ILEdBQ2hCa1QsTUFBT3k5RixFQUFXM3dHLEdBQ2xCdXdHLGFBQWNBLEVBQWF2d0csR0FDM0J5d0csYUFBY0EsRUFBYXp3RyxHQUMzQnN3RyxZQUFhQSxFQUFZdHdHLEdBQ3pCd3dHLFlBQWFBLEVBQVl4d0csT0FJM0IsTUFBTWtULEVBQVFzNkUsS0FBS3VpQixhQUFhNTJFLEVBQVNvdEYsV0FBWXB0RixFQUFTOUYsUUFDeERtekYsRUFBa0JoNUIsS0FBSy91RixJQUFJK1QsRUFBTzJtQixFQUFTdThFLFdBQzNDK1EsRUFBa0JqNUIsS0FBSy91RixJQUFJK1QsRUFBTzJtQixFQUFTbzhFLFdBQzNDbVIsRUFBa0JsNUIsS0FBSy91RixJQUFJOFQsRUFBTzRtQixFQUFTaTlFLFdBR2pELElBQUlsRixFQUFTMWpCLEtBQUswakIsU0FDZm9FLFFBQU8sRUFBRXBuRixNQUFPbHVCLEtBQU9zbUgsRUFBYXRtSCxLQUNwQ214RyxVQUFVaDRFLEVBQVNnNEUsV0FDbkJFLFVBQVVsNEUsRUFBU2s0RSxXQUNuQkMsWUFBWW40RSxFQUFTbTRFLGFBQ3JCQyxPQUFPLENBQUMsQ0FBQ3A0RSxFQUFTNjlFLFdBQVk3OUUsRUFBUzA5RSxXQUFZLENBQUMxOUUsRUFBU2hzQixNQUFRZ3NCLEVBQVMyOUUsWUFBYTM5RSxFQUFTL3JCLE9BQVMrckIsRUFBUzQ5RSxlQUw1R3ZwQixDQU1WLENBQUNoN0UsUUFBT0QsVUFFWCxNQUFNd0IsRUFBTXk1RSxLQUFLenVELE9BQU8sT0FDckJsZ0MsS0FBSyxVQUFXLENBQUMsRUFBRyxFQUFHczZCLEVBQVNoc0IsTUFBT2dzQixFQUFTL3JCLFNBQ2hEdk8sS0FBSyxRQUFTLHFEQUVqQixJQUFJOG5ILEVBQVFDLEVBRVosTUFBTXo1RyxFQUFRZ3NCLEVBQVNoc0IsTUFDakIyRSxFQUFPaUMsRUFBSS9CLE9BQU8sS0FDckJuVCxLQUFLLE9BQVEsUUFDYkEsS0FBSyxpQkFBa0JzNkIsRUFBU3U5RSxtQkFDaEMxaUcsVUFBVSxLQUNWM1YsS0FBS2tVLEdBQ0wzVCxLQUFLLEtBQ0x5UCxNQUFNLGlCQUFrQjhxQixFQUFTdzlFLGtCQUNqQzNrRyxPQUFPLFFBQ1BuVCxLQUFLLElBQUtzNkIsRUFBUzg4RSxVQUNuQnAzRyxLQUFLLFVBQVUsRUFBR3FVLFdBQVlBLElBQzlCclUsS0FBSyxnQkFBZ0IsRUFBR3NPLFdBQVk5UyxLQUFLbWhCLElBQUksRUFBR3JPLEtBQ2hEK0csS0FBS3d5RyxFQUFrQmh6RyxHQUFRQSxFQUFLMUIsT0FBTyxTQUFTbEssTUFBSyxFQUFFb21CLE1BQU9sdUIsS0FBTzBtSCxFQUFnQjFtSCxLQUFNLFFBRzVGbVUsRUFBT3E1RSxLQUFLcjVFLE9BQ2Y5TyxHQUFHLFNBQVMsU0FBVW1MLEVBQU9uTSxHQUMxQixNQUFNaEMsRUFBVW1yRixLQUFLLytFLE9BQU8xVSxNQUM1QjRzSCxFQUFTdGtILEVBQVF4RCxLQUFLLEtBQU8yUixFQUFNeE4sRUFDbkM0akgsRUFBU3ZrSCxFQUFReEQsS0FBSyxLQUFPMlIsRUFBTThELENBQ3RDLElBQ0FqUCxHQUFHLFFBQVEsU0FBVW1MLEVBQU9uTSxHQUMzQm1wRixLQUFLLytFLE9BQU8xVSxNQUNMOEUsS0FBSyxJQUFLMlIsRUFBTXhOLEVBQUkyakgsR0FDcEI5bkgsS0FBSyxJQUFLMlIsRUFBTThELEVBQUlzeUcsR0FHM0IxVixFQUFTMWpCLEtBQUswakIsU0FBU3ZqRixPQUFPdWpGLEdBQzVCcC9GLEVBQUtrQyxVQUFVLFFBQ2QzVixLQUFLNnlHLEVBQU8zK0YsT0FBTyxTQUFTbE8sR0FBSyxPQUFPQSxDQUFHLEdBQ2hELElBK0RGLFNBQVMwaEgsRUFBTy9tSCxHQUNkLE9BQWlCLE9BQVZBLEdBQW1DLGlCQUFWQSxFQUFxQkEsRUFBTTIxRixVQUFZMzFGLENBQ3pFLENBRUEsT0FqRWErVSxFQUFJL0IsT0FBTyxLQUNyQm5ULEtBQUssU0FBVXM2QixFQUFTeThFLFlBQ3hCLzJHLEtBQUssZUFBZ0JzNkIsRUFBUzB0RixpQkFDOUJob0gsS0FBSyxpQkFBa0JzNkIsRUFBUzJ0RixtQkFDaENqb0gsS0FBSyxrQkFBbUJzNkIsRUFBUzR0RixvQkFDakMveUcsVUFBVSxRQUNWM1YsS0FBS21VLEdBQ0w1VCxLQUFLLFFBQ0xzVixLQUFLQyxHQUNOOU8sR0FBRyxZQUFZLFNBQVNoSCxHQUV0QixNQUFNbTRHLEdBRE5uNEcsRUFBT0EsRUFBSyszRCxjQUFjNHdELFVBQ0ZDLFlBQ2xCeFEsRUFBYXA0RyxFQUFLNm9ILFlBQ2xCcDFHLEVBQVEwa0csR0FBY0EsRUFBVyxHQUFNQSxFQUFXLEdBQUtDLEVBQVcsR0FFckUza0csSUFFRUEsRUFBS2EsT0FBT3JOLEtBQU9qSCxFQUFLaUgsR0FDdEJ3TSxFQUFLdytGLGFBQW9DLEtBQXJCeCtGLEVBQUt3K0YsYUFDMUI1cUcsT0FBT203RSxLQUFLL3VFLEVBQUt3K0YsWUFBYSxVQUN4QngrRixFQUFLdk0sT0FBT0QsS0FBT2pILEVBQUtpSCxJQUM3QndNLEVBQUswK0YsYUFBb0MsS0FBckIxK0YsRUFBSzArRixhQUMxQjlxRyxPQUFPbTdFLEtBQUsvdUUsRUFBSzArRixZQUFhLGNBS3JDM3hHLEtBQUssS0FBS3dGLEdBQUtBLEVBQUVxdEcsS0FDakI3eUcsS0FBSyxLQUFLd0YsR0FBS0EsRUFBRXN0RyxLQUNqQjl5RyxLQUFLLFVBQVV3RixHQUFLQSxFQUFFd3RHLEdBQUt4dEcsRUFBRXN0RyxLQUM3Qjl5RyxLQUFLLFNBQVN3RixHQUFLQSxFQUFFcEIsR0FBS29CLEVBQUVxdEcsS0FDNUI3eUcsS0FBSyxTQUFVLFdBQ2ZBLEtBQUssUUFBU1IsSUFDYixNQUFNbTRHLEVBQWFuNEcsRUFBSzRvSCxZQUN4QixJQUFJRSxFQUFhajBHLEVBQU1pbUIsRUFBU290RixXQUFXbG9ILEVBQUs2dkIsUUFXaEQsT0FUR3NvRixHQUFjQSxFQUFXLEtBRXZCQSxFQUFXLEdBQUc3akcsT0FBT3JOLEtBQU9qSCxFQUFLaUgsR0FDakNreEcsRUFBVyxHQUFHakcsY0FBK0MsS0FBL0JpRyxFQUFXLEdBQUdqRyxlQUF1QjRXLEVBQWEzUSxFQUFXLEdBQUdqRyxjQUN2RmlHLEVBQVcsR0FBR2p4RyxPQUFPRCxLQUFPakgsRUFBS2lILElBQ3hDa3hHLEVBQVcsR0FBRy9GLGNBQStDLEtBQS9CK0YsRUFBVyxHQUFHL0YsZUFBdUIwVyxFQUFhM1EsRUFBVyxHQUFHL0YsZUFJNUYwVyxDQUFVLElBRWxCbjFHLE9BQU8sU0FBU2xLLE1BQUssRUFBRW9tQixNQUFPbHVCLEtBQU95bUgsRUFBZ0J6bUgsS0FFeEQrVCxFQUFJL0IsT0FBTyxLQUNSblQsS0FBSyxjQUFlLGNBQ3BCQSxLQUFLLFlBQWEsSUFDbEJtVixVQUFVLFFBQ1YzVixLQUFLbVUsR0FDTDVULEtBQUssUUFDTEMsS0FBSyxLQUFLd0YsR0FBS0EsRUFBRXF0RyxHQUFLdmtHLEVBQVEsRUFBSTlJLEVBQUVwQixHQUFLazJCLEVBQVN3OEUsaUJBQW1CdHhHLEVBQUVxdEcsR0FBS3Y0RSxFQUFTdzhFLG1CQUNyRjkyRyxLQUFLLEtBQUt3RixJQUFNQSxFQUFFd3RHLEdBQUt4dEcsRUFBRXN0RyxJQUFNLElBQy9COXlHLEtBQUssS0FBTSxVQUNYQSxLQUFLLGVBQWV3RixHQUFLQSxFQUFFcXRHLEdBQUt2NEUsRUFBU2hzQixNQUFRLEVBQUksUUFBVSxRQUMvRHJGLE1BQUssRUFBRW9tQixNQUFPbHVCLEtBQU93bUgsRUFBZ0J4bUgsS0FNakN1TSxPQUFPMjJCLE9BQU9udkIsRUFBSXltQixPQUFRLENBQUM0c0YsT0FBUSxDQUFDbDBHLFVBQzdDLENBdUJrQm0wRyxDQUFZaHBILEdBQ3hCMjFHLEVBQVFoMUcsT0FBUSxFQUNoQnhELEVBQUcsSUFBR3ExQyxFQUFNdnJDLE1BQU15RyxRQUNsQnZRLEVBQUcsSUFBR3ExQyxFQUFNdnJDLE1BQU0wTSxPQUFPNGdCLEVBQzNCLE1BQ0VwM0IsRUFBRyxJQUFHcTFDLEVBQU12ckMsTUFBTXlHLFFBQ2xCaW9HLEVBQVFoMUcsT0FBUSxDQUVwQixJQUVBNUIsVUFBVWc3Riw4cURDdEZObGIsRUFBV2pnQyxHQUFJLE1BQ2ZxcUUsRUFBZXJxRSxHQUFJLE1BQ25Cc3FFLEVBQVd0cUUsR0FBSSxJQUNmdXFFLEVBQWdCdnFFLEdBQUksSUFDcEJ3cUUsRUFBYXhxRSxHQUFJLEdBQ2pCeXFFLEVBQWF6cUUsR0FBSSxJQUNqQjBxRSxFQUFnQjFxRSxHQUFJLElBQ3BCMnFFLEVBQWdCM3FFLEdBQUksSUFDcEI0cUUsRUFBVTVxRSxHQUFJLElBQ2Q2cUUsRUFBVTdxRSxHQUFJLE1BQ2Q4cUUsRUFBc0Jqd0YsS0FBSywrQkFJakMsU0FBU3k0RCxFQUFpQnN2QixHQUN0QixHQUFrQixRQUFkQSxFQUNQLE9BQU96aUgsVUFBVXZCLFFBQVFzQixnQkFDZixHQUFrQixNQUFkMGlILEVBQW9CLENBQ2xDLElBQUlydkIsRUFBU3B6RixVQUFVdkIsUUFBUUMsS0FDM0IyMEYsRUFBY0QsRUFBTzcxRixRQUFRLElBQUssZ0JBQ2xDKzFGLEVBQVN0ekYsVUFBVXZCLFFBQVFJLEtBQzNCMDBGLEVBQWNELEVBQU9FLFdBQVcsSUFBSyxnQkFDekMsTUFBUSxJQUFHSixPQUFZQyxPQUFpQkMsT0FBWUMsSUFDakQsQ0FBTyxNQUFrQixZQUFka3ZCLEVBQ04sR0FBRXppSCxVQUFVdkIsUUFBUWEsK0NBQ0EsZUFBZG1qSCxFQUNQemlILFVBQVV2QixRQUFRb0IsZ0JBRWZHLFVBQVV2QixRQUFRZ2tILEVBQzdCLENBUUEsSUFBSW1JLEVBQWF6M0IsRUFBaUIsTUFDOUIwM0IsRUFBZTEzQixFQUFpQixRQUNoQzIzQixFQUFzQjMzQixFQUFpQixlQUUzQyxNQUFNNDNCLEVBQW9CMW9ILElBQ3RCNm5ILEVBQWF0b0gsTUFBUVMsQ0FBSSxFQUd2QjBnSCxFQUFzQixLQUN4QixJQUFJbmdGLEVBQVEsS0FDUm9vRixHQUFnQixFQW1CcEIsTUFsQm1DLFNBQS9CdjNFLEVBQU13M0UsdUJBQ2Jyb0YsRUFBUSxJQUFJcGxDLE9BQU9vdEgsR0FFZkksRUFEc0IsTUFBdEJkLEVBQWF0b0gsTUFDc0IsTUFBbEJ1b0gsRUFBU3ZvSCxPQUFtQyxJQUFsQnVvSCxFQUFTdm9ILE9BQStDLEdBQTlCZ2hDLEVBQU10bEMsS0FBSzZzSCxFQUFTdm9ILFFBQTRDLElBQXZCMm9ILEVBQWMzb0gsT0FBc0MsSUFBdkI0b0gsRUFBYzVvSCxNQUVqSCxNQUF2QndvSCxFQUFjeG9ILE9BQXdDLElBQXZCd29ILEVBQWN4b0gsT0FDMUIsR0FBbkNnaEMsRUFBTXRsQyxLQUFLOHNILEVBQWN4b0gsUUFDRixJQUF2QjJvSCxFQUFjM29ILE9BQXNDLElBQXZCNG9ILEVBQWM1b0gsT0FDMUIsTUFBakI2b0gsRUFBUTdvSCxPQUFrQyxJQUFqQjZvSCxFQUFRN29ILE9BQWVPLFNBQVNzb0gsRUFBUTdvSCxPQUFTLEdBQUtPLFNBQVNzb0gsRUFBUTdvSCxPQUFTLEtBRWpFLGdCQUEvQjZ4QyxFQUFNdzNFLHVCQUNwQnJvRixFQUFRLElBQUlwbEMsT0FBT3F0SCxHQUNuQkcsRUFBcUMsTUFBcEJWLEVBQVcxb0gsT0FBcUMsSUFBcEIwb0gsRUFBVzFvSCxPQUFpRCxHQUFoQ2doQyxFQUFNdGxDLEtBQUtndEgsRUFBVzFvSCxRQUVsRCxtQkFBL0I2eEMsRUFBTXczRSx3QkFDcEJyb0YsRUFBUSxJQUFJcGxDLE9BQU9zdEgsR0FDbkJFLEVBQXFDLE1BQXBCVixFQUFXMW9ILE9BQXFDLElBQXBCMG9ILEVBQVcxb0gsT0FBaUQsR0FBaENnaEMsRUFBTXRsQyxLQUFLZ3RILEVBQVcxb0gsUUFFckZvcEgsQ0FBYSxFQWtCbEJ0ckMsRUFBUSxLQUNWSSxFQUFTbCtFLE1BQU04OUUsT0FBTyxFQUdwQmp6QyxFQUFNLEtBQ1IsSUFBSWpsQyxFQUNBMGpILEVBQWFmLEVBQVN2b0gsTUFDUyxTQUEvQjZ4QyxFQUFNdzNFLHVCQUNhLFdBQXRCZixFQUFhdG9ILFFBQ2JzcEgsRUFBYyxHQUFFZCxFQUFjeG9ILFNBQVM2b0gsRUFBUTdvSCxTQUVwQixNQUFwQnlvSCxFQUFXem9ILE9BQXFDLEdBQXBCeW9ILEVBQVd6b0gsUUFDOUNzcEgsRUFBYyxHQUFFQSxLQUFjYixFQUFXem9ILFNBRTdDNEYsRUFBUyxDQUFFMGpILGFBQVlDLGVBQWdCWixFQUFjM29ILE1BQU93cEgsZUFBZ0JaLEVBQWM1b0gsUUFDN0MsZ0JBQS9CNnhDLEVBQU13M0Usc0JBQ3BCempILEVBQVMsQ0FBRTZqSCxhQUFjZixFQUFXMW9ILE9BQ1MsbUJBQS9CNnhDLEVBQU13M0Usd0JBQ3BCempILEVBQVMsQ0FBRThqSCxrQkFBbUJoQixFQUFXMW9ILFFBRXRDNEYsRUFBT3FLLE1BQVE2NEcsRUFBUTlvSCxNQUN2QndyQixFQUFLLE1BQU81bEIsR0FDWms0RSxHQUFPLEVBR1hyd0IsRUFBYSxDQUFFMWtELEtBdENGLEtBQ1R1L0csRUFBYXRvSCxNQUFRLEtBQ3JCdW9ILEVBQVN2b0gsTUFBUSxHQUNqQndvSCxFQUFjeG9ILE1BQVEsR0FDdEJ5b0gsRUFBV3pvSCxNQUFRLEVBQ25CMm9ILEVBQWMzb0gsTUFBUSxHQUN0QjRvSCxFQUFjNW9ILE1BQVEsR0FDdEI2b0gsRUFBUTdvSCxNQUFRLEdBQ2hCMG9ILEVBQVcxb0gsTUFBUSxHQUNuQjhvSCxFQUFROW9ILE1BQVEsR0FDaEJrK0UsRUFBU2wrRSxNQUFNK0ksTUFBTSxFQTRCSiswRSxVQUVyQnBoQixJQUFVLFNBR1YsTUFBTStpQixFQUFTNXZFLEdBQU1pcEIsS0FBS2pwQixndUxDckpwQnF1RSxFQUFXamdDLEdBQUksTUFDZjByRSxFQUFpQjFyRSxHQUFJLE9BQ3JCMnJFLEVBQWlCM3JFLElBQUksR0FDckI0ckUsRUFBUzVyRSxHQUFJLE1BQ2JoZ0QsRUFBa0JnZ0QsR0FBSSxNQUN0QjZxRSxFQUFVN3FFLEdBQUksTUFDZDhxRSxFQUFzQmp3RixLQUFLLCtCQVlqQ2lzQixJQUFNLElBQU1sVCxFQUFNN29DLFFBQU8sQ0FBQ3V1RSxFQUFlMTJELEtBQ2hCLE1BQWpCMDJELElBQ0pveUMsRUFBZTNwSCxNQUFRLE1BQ3ZCNHBILEVBQWU1cEgsT0FBUSxFQUN2QjZwSCxFQUFPN3BILE1BQXFDLElBQTdCdTNFLEVBQWN3UCxNQUFNL21GLE1BQWMsS0FBT3UzRSxFQUFjd1AsTUFBTS9tRixNQUM1RS9CLEVBQWdCK0IsTUFBd0MsSUFBaEN1M0UsRUFBY3dQLE1BQU0raUMsU0FBaUIsS0FBT3Z5QyxFQUFjd1AsTUFBTStpQyxTQUFRLElBS3BHLE1BQU0zSSxFQUFzQixLQUN4QixHQUE0QixVQUF4QndJLEVBQWUzcEgsTUFBbUIsQ0FDekMsSUFBSStwSCxFQUFlLElBQUludUgsT0FBT291SCxHQUM5QixPQUF1QixNQUFoQkgsRUFBTzdwSCxPQUFvRCxHQUFuQytwSCxFQUFhcnVILEtBQUttdUgsRUFBTzdwSCxNQUNyRCxDQUFPLEdBQTRCLGVBQXhCMnBILEVBQWUzcEgsTUFBd0IsQ0FDckQsSUFBSWlxSCxFQUFvQixJQUFJcnVILE9BQU9zdEgsR0FDbkMsT0FBZ0MsTUFBekJqckgsRUFBZ0IrQixPQUFrRSxHQUFqRGlxSCxFQUFrQnZ1SCxLQUFLdUMsRUFBZ0IrQixNQUM1RSxDQUNBLE9BQU8sQ0FBSyxFQUdWa3FILEVBQWFsL0UsSUFBUyxJQUFNNkcsRUFBTTdvQyxPQUFPa2hILGFBRXpDQyxFQUFZbi9FLElBQVMsS0FDdkIsSUFBSXhwQyxFQUFNLENBQUV4QixNQUFPLEdBQUlpUSxNQUFPLElBQzlCLEdBQWtCLFFBQWQ0aEMsRUFBTWxqQyxNQUFpQyxNQUFma2pDLEVBQU03b0MsTUFBaUIsT0FBT3hILEVBQzFELElBQUl3SCxFQUFRNm9DLEVBQU03b0MsTUFNbEIsT0FMQXhILEVBQUl4QixNQUFRZ0osRUFBTS9CLEdBQUdqSCxNQUNILE1BQWRnSixFQUFNbTFCLE1BQW9DLE1BQXBCbjFCLEVBQU1tMUIsS0FBS24rQixPQUFxQyxHQUFwQmdKLEVBQU1tMUIsS0FBS24rQixRQUNwRXdCLEVBQUl4QixNQUFRd0IsRUFBSXhCLE1BQVEsSUFBTWdKLEVBQU1tMUIsS0FBS24rQixPQUV0Q3dCLEVBQUl5TyxNQUFTakgsRUFBTS9CLEdBQUdnSixNQUFVLEdBQUVqSCxFQUFNL0IsR0FBR2dKLFVBQVVqSCxFQUFNL0IsR0FBR2pILFNBQVdnSixFQUFNL0IsR0FBR2pILE1BQzNFd0IsQ0FBRyxJQUdSNG9ILEVBQVlwL0UsSUFBUyxLQUN2QixJQUFJeHBDLEVBQU0sQ0FBRTZvSCxVQUFXLEdBQUlDLFVBQVcsR0FBSUMsVUFBVyxHQUFJQyxVQUFXLElBQ3BFLEdBQWtCLFFBQWQzNEUsRUFBTWxqQyxNQUFpQyxNQUFma2pDLEVBQU03b0MsTUFBaUIsT0FBT3hILEVBQzFELElBQUl3SCxFQUFRNm9DLEVBQU03b0MsTUFDbEJ4SCxFQUFJNm9ILFVBQVlyaEgsRUFBTSswQixLQUFLUyxPQUFPeCtCLE1BQ2xDd0IsRUFBSStvSCxVQUFZdmhILEVBQU0rMEIsS0FBS2lCLE9BQU9oL0IsTUFDbEMsSUFBSXNxSCxFQUFhLEdBQUV0aEgsRUFBTSswQixLQUFLUyxPQUFPdnVCLE9BQVNqSCxFQUFNKzBCLEtBQUtTLE9BQU94K0IsUUFDNUR3cUgsRUFBYSxHQUFFeGhILEVBQU0rMEIsS0FBS2lCLE9BQU8vdUIsT0FBU2pILEVBQU0rMEIsS0FBS2lCLE9BQU9oL0IsUUFrQmhFLE9BaEJzQixNQUFuQmdKLEVBQU0rMEIsS0FBS0ksTUFBeUMsTUFBekJuMUIsRUFBTSswQixLQUFLSSxLQUFLbitCLE9BQTBDLEdBQXpCZ0osRUFBTSswQixLQUFLSSxLQUFLbitCLFFBQzdFc3FILEVBQWEsR0FBRUEsS0FBYXRoSCxFQUFNKzBCLEtBQUtJLEtBQUtsdUIsUUFDNUN1NkcsRUFBYSxHQUFFQSxLQUFheGhILEVBQU0rMEIsS0FBS0ksS0FBS2x1QixRQUM1Q3pPLEVBQUk2b0gsVUFBWTdvSCxFQUFJNm9ILFVBQVksSUFBTXJoSCxFQUFNKzBCLEtBQUtJLEtBQUtuK0IsTUFDdER3QixFQUFJK29ILFVBQVkvb0gsRUFBSStvSCxVQUFZLElBQU12aEgsRUFBTSswQixLQUFLSSxLQUFLbitCLE9BR3JEc3FILElBQWM5b0gsRUFBSTZvSCxZQUNuQkMsRUFBYSxHQUFFQSxNQUFjOW9ILEVBQUk2b0gsY0FFaENHLElBQWNocEgsRUFBSStvSCxZQUNuQkMsRUFBYSxHQUFFQSxNQUFjaHBILEVBQUkrb0gsY0FHbkMvb0gsRUFBSThvSCxVQUFZQSxFQUNoQjlvSCxFQUFJZ3BILFVBQVlBLEVBQ1RocEgsQ0FBRyxJQWVkLElBQUl3b0gsRUFBaUI1ckgsVUFBVXZCLFFBQVFxQix1QkFDbkNnckgsRUFBc0I5cUgsVUFBVXZCLFFBQVFvQixnQkFFNUMsTUFBTW9nRCxFQUFVLEtBQ1osSUFBSTF2QyxFQUFPa2pDLEVBQU1sakMsS0FDYmxPLEVBWHdCLFVBQXhCa3BILEVBQWUzcEgsT0FBNkMsZUFBeEIycEgsRUFBZTNwSCxNQUNuRDJwSCxFQUFlM3BILE1BRVosT0FTSDRGLEVBQVMsQ0FDWjZrSCxjQUFlYixFQUFlNXBILE1BQzdCaVEsTUFBTzY0RyxFQUFROW9ILE1BRXBCUyxRQUVPaXFILEVBQU8sS0FDQyxRQUFSanFILEdBQ3FCLFFBQXhCa3BILEVBQWUzcEgsTUFDZjBxSCxFQUFPUCxFQUFVbnFILE1BQU1BLE1BQ1EsZUFBeEIycEgsRUFBZTNwSCxNQUN0QjBxSCxFQUFPTixFQUFVcHFILE1BQU11cUgsVUFDUSxlQUF4QlosRUFBZTNwSCxRQUN0QjBxSCxFQUFPTixFQUFVcHFILE1BQU1xcUgsV0FFM0J6a0gsRUFBTzBqSCxXQUFhb0IsRUFDUixRQUFSLzdHLEVBQ0EvSSxFQUFPNGpILGVBQWlCMzNFLEVBQU03b0MsTUFBTSt6QixTQUFTLzhCLE1BQzlCLFFBQVIyTyxJQUNQL0ksRUFBTzJqSCxlQUFpQjEzRSxFQUFNN29DLE1BQU0rekIsU0FBUy84QixRQUUzQixVQUFSUyxHQUNkbUYsRUFBTzZrSCxlQUFnQixFQUN2QjdrSCxFQUFPNmpILGFBQWVJLEVBQU83cEgsT0FDUCxlQUFSUyxJQUNkbUYsRUFBTzZrSCxlQUFnQixFQUN2QjdrSCxFQUFPOGpILGtCQUFvQnpySCxFQUFnQitCLE9BRXhDODlFLElBQ0F0eUQsRUFBSyxVQUFXNWxCLEVBQU8sRUFHckJrNEUsRUFBUSxLQUNWSSxFQUFTbCtFLE1BQU04OUUsT0FBTyxFQUkxQnJ3QixFQUFhLENBQUUxa0QsS0F2REYsS0FDVCsvRyxFQUFROW9ILE1BQVEsR0FDaEJrK0UsRUFBU2wrRSxNQUFNK0ksTUFBTSxFQXFESiswRSxVQUVyQnBoQixJQUFVLFNBR1YsTUFBTStpQixFQUFTNXZFLEdBQU1pcEIsS0FBS2pwQix5dkhDN0sxQixJQUFJODZHLEdBQVUsQ0FFVkMsVUFBV0EsR0FDWHpiLGVBQWdCQSxHQUNoQkYscUJBQXNCQSxHQUN0QkksaUJBQWtCQSxHQUNsQkQsZUFBZ0JBLEdBQ2hCSixtQkFBb0JBLEdBQ3BCRSxhQUFjQSxHQUNkMmIscUJBQXNCQSxHQUN0QkMsWUFBYUEsR0FDYkMsWUFBYUEsR0FDYkMsWUFBYUEsR0FDYkMsV0FBWUEsR0FDWkMsY0FBZUEsR0FDZkMsa0JBQW1CQSxHQUNuQkMsWUFBYUEsR0FFYkMsd0JBQXdCQyxHQUd4QkMsNEJBQTZCQSxHQUM3QkMsdUJBQXdCQSxHQUN4QkMsdUJBQXdCQSxHQUN4QkMsMEJBQTJCQSxHQUMzQkMscUJBQXNCQSxHQUV0QkMsd0JBQXlCQSxHQUd6QkMsVUFBV0EsR0FDWHhZLE1BQU9BLEdBQ1BwUyxVQUFXQSxHQUNYNnFCLG9CQUFxQkEsR0FDckIxaUIsV0FBWUEsR0FDWjJpQixZQUFhQSxHQUNiM2YsV0FBWUEsR0FDWjRmLFlBQWFBLEdBQ2JqMEMsYUFBY0EsR0FDZG9wQixRQUFTQSxHQUNUOHFCLE9BQVFBLEdBQ1JDLFNBQVVBLEdBQ1ZDLFFBQVNBLEdBR1RDLGVBQWdCQSxHQUdoQm4zQixNQUFPQSxHQUNQbzNCLHVCQUF3QkEsR0FDeEJDLGtCQUFtQkEsR0FDbkJ6SixhQUFjQSxHQUNkMEosZ0JBQWlCQSxHQUNqQkMsdUJBQXdCQSxHQUN4QnRyQixtQkFBb0JBLEdBQ3BCdXJCLGNBQWVBLEdBQ2ZwZ0Isd0JBQXlCQSxHQUN6QkMseUJBQTBCQSxHQUMxQm9nQixrQkFBbUJBLEdBRW5CQyxJQUFLQSxJQUVUam1ILE9BQU9pa0gsUUFBVUEsR0M1SGpCLElBQUlpQyxHQUFRLENBQUMsT0FBbUIsUUFBdUIsU0FBMkIsVUFBK0IscTFCQUEyMEcsc0JBQStFLElBQU8sUUFBdUIsdUJBQW1GLHNCQUErRSxVQUErQixjQUErQyxVQUErQixtQkFBbUUsZ0JBQXVELFNBQTJCLHdCQUF1RixHQUFHLHlCQUEyRixTQUEyQixZQUF1QyxTQUEyQixlQUFtRCxrQkFBK0QsU0FBd0IsU0FBUzVySCxLQUFJLE1BQU02ckgsRUFBV0MsR0FBb0J0d0gsRUFBRW93SCxHQUFRLElBQUlBLEdBQVEsSUFBSXB3SCxFQUFFc3dILEdBQVdGLEdBQVEsT0FBT0EsR0FBUSxNQUFPLElBQUlHLEVBQVVILEdBQVEsR0FBRyxNQUF1WEksRUFBdlcsTUFBSyxJQUFJQyxFQUFVendILEVBQUV1d0gsR0FBOENHLEVBQXJCcDBGLEtBQUs4ekYsR0FBUSxJQUE0QkEsR0FBUSxJQUFJQSxHQUFRLElBQUlwd0gsRUFBRW93SCxHQUFRLEdBQUdLLEdBQVdMLEdBQVEsSUFBSU0sRUFBVSxJQUFJMXdILEVBQUVvd0gsR0FBUSxHQUFHSyxHQUFXTCxHQUFRLElBQUlNLEVBQVUsSUFBSSxJQUFJQyxFQUFXLEdBQUVQLEdBQVEsTUFBTTl6RixLQUFLOHpGLEdBQVEsT0FBT0EsR0FBUSxNQUFzRCxPQUFoRHB3SCxFQUFFb3dILEdBQVEsSUFBSUssR0FBV0wsR0FBUSxJQUFJTyxHQUFrQk4sRUFBVUksRUFBVSxFQUFrQkcsR0FBa0JDLEVBQVUsS0FBSzd3SCxFQUFFb3dILEdBQVEsS0FBS0EsR0FBUSxJQUFJSSxFQUFVLEVBQUVLLElBQVksTUFBTUMsRUFBVSxJQUFZOXdILEVBQUVvd0gsR0FBUSxLQUFLQSxHQUFRLE9BQU9BLEdBQVEsT0FBT0EsR0FBUSxPQUFPQSxHQUFRLE9BQU9BLEdBQVEsT0FBMGlCemhHLHNCQUFzQnloRyxHQUFRLEtBQUtBLEdBQVEsSUFBSXA5RixxQkFBcUIrOUYsb0JBQW9CQyxJQUErQixHQUF6b0IsTUFBSyxJQUFJQyxFQUFVSCxJQUFZLEdBQWUsTUFBWkcsRUFBa0IsT0FBTyxFQUFPLElBQUlDLEVBQVVELEVBQVViLEdBQVEsTUFBTXB3SCxFQUFFb3dILEdBQVEsSUFBSWMsR0FBV2QsR0FBUSxJQUFJQSxHQUFRLEtBQUtwd0gsRUFBRW93SCxHQUFRLElBQUljLEdBQVdkLEdBQVEsSUFBSUEsR0FBUSxLQUFLLE1BQU1lLEVBQVdkLEVBQVVhLEdBQVcsT0FBR1YsSUFBYVcsQ0FBcUMsRUFBb1ZDLEtBQWpVLE1BQUssSUFBSUgsRUFBVUgsSUFBMkIsTUFBWkcsR0FBa0JBLEVBQVViLEdBQVEsTUFBTSxFQUEwUWlCLEdBQWFSLEtBQWxRRyxLQUFjaHhILEVBQUVvd0gsR0FBUSxLQUFLQSxHQUFRLElBQUlZLEVBQVdaLEdBQVEsTUFBTXB3SCxFQUFFb3dILEdBQVEsS0FBS0EsR0FBUSxJQUFJWSxFQUFXWixHQUFRLEtBQUssRUFBMEprQixDQUFXTixFQUFXLEdBQUUsQ0FBQ2h4SCxFQUFFMFMsVUFBVTA5RyxHQUFRLE1BQUssSUFBWTVySCJ9
