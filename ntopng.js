!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url;if(null!=i){const e=`${i}?${o.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",v),p.attr("transform",v)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function v(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const v={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},v=n.options.url,m=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],v=$(f),h=v.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),v.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:v,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=v;var m={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");m[l]||(m[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=m[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},N=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var v=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),v=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,m,v,c,o,u,p,f,i,s]}(e,l),f=p[0],v=p[1],m=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function N(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=v(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",C).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=N,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=C,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const M=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");M(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");M(e,t)}}));const j=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:v.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=v.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=v.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=v.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class R{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;R._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class D{static alertSeverityAndType(e,t,a){return`${D.formatValueLabel(e,t,a)} ${D.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return D.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),D.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=D.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:D.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:D.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return D.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=D.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=D.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=D.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=D.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),D.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=D.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=D.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=D.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+D.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=D.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=D.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+D.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=D.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return D.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return D.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function F(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=R,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=D,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=I.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=j,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const q=F("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),z=F("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function Y(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const J=F("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=F("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=F("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):ve(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:me(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},oe=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,ve=e=>"[object Map]"===$e(e),me=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ce=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ne=F(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=F("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ee=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Pe=Ee((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Ue=/\B([A-Z])/g,Ie=Ee((e=>e.replace(Ue,"-$1").toLowerCase())),Oe=Ee((e=>e.charAt(0).toUpperCase()+e.slice(1))),Me=Ee((e=>e?`on${Oe(e)}`:"")),je=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Re=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},De=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Fe,qe;class ze{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&qe&&(this.parent=qe,this.index=(qe.scopes||(qe.scopes=[])).push(this)-1)}run(e){if(this.active){const t=qe;try{return qe=this,e()}finally{qe=t}}}on(){qe=this}off(){qe=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new ze(e)}function Ve(e,t=qe){t&&t.active&&t.effects.push(e)}function He(){return qe}function Ge(e){qe&&qe.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Ye=e=>(e.n&Qe)>0,Je=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=ot;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,ot=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Ye(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,ot=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let ot=!0;const it=[];function rt(){it.push(ot),ot=!1}function ct(){const e=it.pop();ot=void 0===e||e}function ut(e,t,a){if(ot&&Ze){let t=Je.get(e);t||Je.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Ye(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const o=Je.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&fe(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":fe(e)?Ce(a)&&i.push(o.get("length")):(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"delete":fe(e)||(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"set":ve(e)&&i.push(o.get(et))}if(1===i.length)i[0]&&pt(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const vt=F("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Jt:Yt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const o=Reflect.get(a,l,n);return(ye(l)?mt.has(l):vt(l))?o:(e||ut(a,0,l),t?o:fa(o)?s&&Ce(l)?o:o.value:we(o)?e?ta(o):Qt(o):o)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(oa(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const o=fe(t)&&Ce(a)?Number(a)<t.length:pe(t,a),i=Reflect.set(t,a,l,n);return t===ra(n)&&(o?je(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),i}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&mt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Ct=ue({},$t,{get:gt,set:kt(!0)}),Nt=ue({},St,{get:yt}),At=e=>e,Et=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:o}=Et(n),i=l?At:a?da:ua;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Ut(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function It(e){e=ra(e);const t=ra(this);return Et(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ot(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=Et(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?je(t,o)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function Mt(e){const t=ra(this),{has:a,get:l}=Et(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function jt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ra(s),i=t?At:e?da:ua;return!e&&ut(o,0,et),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Rt(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),o=ve(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?At:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Dt(e){return function(...t){return"delete"!==e&&this}}const[Ft,qt,zt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Rt(n,!1,!1),a[n]=Rt(n,!0,!1),t[n]=Rt(n,!1,!0),l[n]=Rt(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:zt:e?qt:Ft;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Yt=new WeakMap,Jt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Yt)}function ea(e){return la(e,!1,Ct,Gt,Jt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Nt,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function oa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Re(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){ot&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function va(e){return ha(e,!1)}function ma(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),je(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Na(e,a);return t}class Ca{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Na(e,t,a){const l=e[t];return fa(l)?l:new Ca(e,t,a)}class Aa{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ea=[];function Ta(e,...t){rt();const a=Ea.length?Ea[Ea.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ea[Ea.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ia(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${wo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${wo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Pa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ua(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ua(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ua(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ia(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){Ma(e,t,a)}return n}function Oa(e,t,a,l){if(ge(e)){const n=Ia(e,t,a,l);return n&&xe(n)&&n.catch((e=>{Ma(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Oa(e[s],t,a,l));return n}function Ma(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Ia(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let ja=!1,La=!1;const Ra=[];let Da=0;const Fa=[];let qa=null,za=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ya(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ja(e){Ra.length&&Ra.includes(e,ja&&e.allowRecurse?Da+1:Da)||e===Ka||(null==e.id?Ra.push(e):Ra.splice(function(e){let t=Da+1,a=Ra.length;for(;t<a;){const l=t+a>>>1;al(Ra[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){ja||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Fa.length){for(Ka=t,qa=[...new Set(Fa)],Fa.length=0,za=0;za<qa.length;za++)qa[za]();qa=null,za=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,ja=!0,el(e),Ra.sort(((e,t)=>al(e)-al(t)));try{for(Da=0;Da<Ra.length;Da++){const e=Ra[Da];e&&!1!==e.active&&Ia(e,null,14)}}finally{Da=0,Ra.length=0,tl(),ja=!1,Wa=null,(Ra.length||Fa.length||Ba.length)&&ll(e)}}let nl,sl=[];function ol(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ol(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function il(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(De))}let i,r=l[i=Me(t)]||l[i=Me(Pe(t))];!r&&s&&(r=l[i=Me(Ie(t))]),r&&Oa(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Oa(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(i=!0,ue(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(fe(s)?s.forEach((e=>o[e]=null)):ue(o,s),l.set(e,o),o):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const vl=e=>ml;function ml(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Os(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Os(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:v}=e;let m,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;m=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{m=Zs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){Es.length=0,Ma(t,e,1),m=Hs(Ns)}let b=m;if(h&&!1!==v){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ce)&&(h=bl(h,o)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),m=b,_l(g),m}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),Al(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:v,isInFallback:m,isHydrating:h}=d;if(v)d.pendingBranch=_,Ds(_,v)?(r(v,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():m&&(r(f,p,a,l,n,null,s,o,i),Al(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=v):c(v,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),Al(d,p))):f&&Ds(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Ds(_,f))r(f,_,a,l,n,d,s,o,i),Al(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Cl(l?a.default:a),e.ssFallback=l?Cl(a.fallback):Hs(Ns)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:v,remove:m}}=c,h=De(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}Al(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),Al(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{Ma(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;po(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,v(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&m(i),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Cl(e){let t;if(ge(e)){const a=Is&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Ts,Us())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Rs(l))return;if(l.type!==Ns||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Nl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Al(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function El(e,t){if(no){let a=no.provides;const l=no.parent&&no.parent.provides;l===a&&(a=no.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=no||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Pl(e,t){return jl(e,null,t)}function Ul(e,t){return jl(e,null,{flush:"post"})}function Il(e,t){return jl(e,null,{flush:"sync"})}const Ol={};function Ml(e,t,a){return jl(e,t,a)}function jl(e,t,{immediate:a,deep:l,flush:n}=le){const s=no;let o,i,r=!1,c=!1;if(fa(e)?(o=()=>e.value,r=oa(e)):na(e)?(o=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||oa(e))),o=()=>e.map((e=>fa(e)?e.value:na(e)?Dl(e):ge(e)?Ia(e,s,2):void 0))):o=ge(e)?t?()=>Ia(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Oa(e,s,3,[u])}:se,t&&l){const e=o;o=()=>Dl(e())}let u=e=>{i=f.onStop=()=>{Ia(e,s,4)}},d=c?[]:Ol;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>je(e,d[t]))):je(e,d)))&&(i&&i(),Oa(t,s,3,[e,d===Ol?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,qa,Fa,za)}(_);const f=new at(o,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Rl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const o=no;oo(this);const i=jl(n,s.bind(l),a);return o?oo(o):io(),i}function Rl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Dl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Dl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Dl(e[a],t);else if(me(e)||ve(e))e.forEach((e=>{Dl(e,t)}));else if(Se(e))for(const a in e)Dl(e[a],t);return e}function Fl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),vn((()=>{e.isUnmounting=!0})),e}const ql=[Function,Array],zl={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ql,onEnter:ql,onAfterEnter:ql,onEnterCancelled:ql,onBeforeLeave:ql,onLeave:ql,onAfterLeave:ql,onLeaveCancelled:ql,onBeforeAppear:ql,onAppear:ql,onAfterAppear:ql,onAppearCancelled:ql},setup(e,{slots:t}){const a=so(),l=Fl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==Ns){o=e;break}const i=ra(e),{mode:r}=i;if(l.isLeaving)return Hl(o);const c=Gl(o);if(!c)return Hl(o);const u=Vl(c,i,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Ns&&(!Ds(c,_)||p)){const e=Vl(_,i,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(o);"in-out"===r&&c.type!==Ns&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:v,onAppear:m,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Oa(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Ds(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=m||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Ss?(128&o.patchFlag&&n++,l=l.concat(Kl(o.children,t,i))):(t||o.type!==Ns)&&l.push(null!=i?Ws(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Yl(e){return ge(e)?{setup:e,name:e.name}:e}const Jl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Yl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=no;if(r)return()=>Xl(r,e);const t=t=>{c=null,Ma(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const i=va(!1),u=va(),_=va(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&Ql(e.parent.vnode)&&Ja(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=so(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=yo(t.type);!l||e&&e(l)||v(a)}))}function v(e){const t=n.get(e);o&&t.type===o.type?o&&on(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&to(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&to(a,t.parent,e),t.isDeactivated=!0}),i)},Ml((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let m=null;const h=()=>{null!=m&&n.set(m,rn(a.subTree))};return _n(h),fn(h),vn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(m=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Rs(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=rn(l);const r=i.type,c=yo(Jl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ws(i),128&l.shapeFlag&&(l.ssContent=i)),m=p,f?(i.el=f.el,i.component=f.component,i.transition&&Wl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&v(s.values().next().value)),i.shapeFlag|=256,o=i,xl(l.type)?l:i}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=no){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);mn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=no,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),oo(a);const n=Oa(t,a,e,l);return io(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=no)=>(!_o||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),vn=un("bum"),mn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=no){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=go(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Dl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(rt(),Oa(r,a,8,[e.el,i,e,t]),ct())}}function kn(e,t){return Nn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Nn("components",e,!1)||e:e||$n}function Cn(e){return Nn("directives",e)}function Nn(e,t,a=!0,l=!1){const n=ul||no;if(n){const a=n.type;if("components"===e){const e=yo(a,!1);if(e&&(e===t||e===Pe(t)||e===Oe(Pe(t))))return a}const s=An(n[e]||a[e],t)||An(n.appContext[e],t);return!s&&l?a:s}}function An(e,t){return e&&(e[t]||e[Pe(t)]||e[Oe(Pe(t))])}function En(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Pn(e,t,a={},l,n){if(ul.isCE||ul.parent&&Jl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Ps();const o=s&&Un(s(a)),i=Ls(Ss,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function Un(e){return e.some((e=>!Rs(e)||e.type!==Ns&&!(e.type===Ss&&!Un(e.children))))?e:null}function In(e){const t={};for(const a in e)t[Me(a)]=e[a];return t}const On=e=>e?ro(e)?go(e)||e.proxy:On(e.parent):null,Mn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>On(e.parent),$root:e=>On(e.root),$emit:e=>e.emit,$options:e=>qn(e),$forceUpdate:e=>e.f||(e.f=()=>Ja(e.update)),$nextTick:e=>e.n||(e.n=Ya.bind(e.proxy)),$watch:e=>Ll.bind(e)}),jn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return o[t]=1,l[t];if(n!==le&&pe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return o[t]=3,s[t];if(a!==le&&pe(a,t))return o[t]=4,a[t];Rn&&(o[t]=0)}}const u=Mn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==le&&pe(e,o)||t!==le&&pe(t,o)||(i=s[0])&&pe(i,o)||pe(l,o)||pe(Mn,o)||pe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},jn,{get(e,t){if(t!==Symbol.unscopables)return jn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!q(t)});let Rn=!0;function Dn(e,t,a){Oa(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Fn(e,t,a,l){const n=l.includes(".")?Rl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&Ml(n,a)}else if(ge(e))Ml(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Fn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&Ml(n,l,e)}}function qn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>zn(r,e,o,!0))),zn(r,t,o)):r=t,s.set(t,r),r}function zn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&zn(e,s,a,!0),n&&n.forEach((t=>zn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ne(r))continue;const c=t[r];let u;n&&pe(n,u=Pe(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ra(a),l=o||le;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Yn(n,t,i,l[i],e,!pe(l,i))}}return i}function Yn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=pe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(oo(n),l=s[a]=e.call(null,t),io())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Ie(a)||(l=!0))}return l}function Jn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Jn(e,t,!0);ue(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zn(t)&&(o[t]=le)}else if(s)for(const e in s){const t=Pe(e);if(Zn(t)){const a=s[e],l=o[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=ml(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function os(){return{app:null,config:{isNativeTag:oe,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=os(),s=new Set;let o=!1;const i=n.app={_uid:is++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Do,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(i,...t)):ge(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,go(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Jl(l)&&!n)return;const s=4&l.shapeFlag?go(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===le?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ia(r,i,12,[o,u]);else{const t=be(r),l=fa(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,pe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,fs(i,a)):i()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,m,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,i,c,m,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Cs:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Ns:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,i,c,m,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,m,h);else if(6&x){l.slotScopeIds=m;const e=o(a);if(t(l,e,null,i,c,ds(e),h),S=g?v(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Jl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,m,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,ds(o(a)),m,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ne(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&to(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Nl((()=>{r&&to(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){us=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Cs&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=v(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,ds(d),r),u},v=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Nl;function vs(e){return hs(e)}function ms(e){return hs(e,ps)}function hs(e,t){(Fe||(Fe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,v=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Ds(e,t)&&(l=q(e),j(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Cs:m(e,t,a,l);break;case Ns:h(e,t,a,l);break;case As:null==e&&g(t,a,l,o);break;case Ss:C(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?N(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},m=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:v,props:m,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,m&&m.is,m),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==v,u,d),y&&xn(e,null,o,"created"),m){for(const t in m)"value"===t||Ne(t)||n(_,t,null,m[t],r,e.children,o,i,F);"value"in m&&n(_,"value",null,m.value),(f=m.onVnodeBeforeMount)&&to(f,o,e)}w(_,e,e.scopeId,u,o)}y&&xn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=m&&m.onVnodeMounted)||k||y)&&fs((()=>{f&&to(f,o,e),k&&g.enter(_),y&&xn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Xs(e[c]):Zs(e[c]);v(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let v;a&&gs(a,!1),(v=f.onVnodeBeforeUpdate)&&to(v,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,m,o):i||U(e,t,r,null,a,l,m,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,F)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((v=f.onVnodeUpdated)||_)&&fs((()=>{v&&to(v,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Ss||!Ds(r,c)||70&r.shapeFlag)?u(r.el):a;v(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ne(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,F)}if(a!==le)for(const r in a)Ne(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,F);"value"in l&&n(e,"value",a.value,l.value)}},C=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):U(e,t,l,_,s,i,r,c,u)},N=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ao,s={uid:lo++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new ze(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=il.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(i.ctx.renderer=B),function(e,t=!1){_o=t;const{props:a,children:l}=e.vnode,n=ro(e);(function(e,t,a,l=!1){const n={},s={};Re(s,qs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Re(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Re(e.slots,qs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,jn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?ho(e):null;oo(e),rt();const n=Ia(l,e,0,[e.props,a]);if(ct(),io(),xe(n)){if(n.then(io,io),t)return n.then((a=>{po(e,a,t)})).catch((t=>{Ma(t,e,0)}));e.asyncDep=n}else po(e,n,t)}else mo(e,t)}(e,t),_o=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Hs(Ns);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||yl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?yl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Ra.indexOf(e);t>Da&&Ra.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&to(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,v(p,_,u(p.el),q(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),i&&fs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>to(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Jl(t);if(gs(e,!1),c&&Le(c),!_&&(o=r&&r.onVnodeBeforeMount)&&to(o,d,t),gs(e,!0),i&&H){const a=()=>{e.subTree=hl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=hl(e);v(null,o,a,l,e,n,s),t.el=o.el}if(u&&fs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;fs((()=>to(o,d,e)),n)}(256&t.shapeFlag||d&&Jl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ja(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Kn(e,t,n,s)&&(c=!0);for(const s in i)t&&(pe(t,s)||(l=Ie(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Yn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(cl(e.emitsOptions,o))continue;const u=t[o];if(r)if(pe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Pe(o);n[t]=Yn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),o=t}else t&&(ss(e,t),o={default:1});if(s)for(const e in n)ts(e)||e in o||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},U=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void I(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&F(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):F(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},I=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);v(e[_],l,a,null,n,s,o,i,r)}c>u?F(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Ds(l,u))break;v(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Ds(l,c))break;v(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)v(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)j(e[c],n,s,!0),c++;else{const p=c,f=c,m=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&m.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){j(l,n,s,!0);continue}let u;if(null!=l.key)u=m.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Ds(l,t[h])){u=h;break}void 0===u?j(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,v(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?v(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?M(d,a,_,2):h--)}}},M=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)M(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Ss)if(i!==As)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),fs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)M(c[e],t,l,n);a(e.anchor,t,l)}},j=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&cs(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Jl(e);let v;if(f&&(v=o&&o.onVnodeBeforeUnmount)&&to(v,t,e),6&u)D(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?F(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&F(r,t,a),l&&L(e)}(f&&(v=o&&o.onVnodeUnmounted)||p)&&fs((()=>{v&&to(v,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void R(a,n);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},R=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},D=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Le(l),n.stop(),s&&(s.active=!1,j(o,e,t,a)),i&&fs(i,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},F=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)j(e[o],t,a,l,n)},q=e=>6&e.shapeFlag?q(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),z=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:v,um:j,m:M,r:L,mt:A,mc:x,pc:U,pbc:$,n:q,o:e};let V,H;return t&&([V,H]=t(B)),{render:z,hydrate:V,createApp:rs(z,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:v}}=c,m=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),c=t.anchor=v("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=v("");d&&(p(_,d),o=o||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};m?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,v=ys(e.props),h=v?a:u,g=v?l:p;if(o=o||ws(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),bs(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),m)v||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else v&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ys(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Ss=Symbol(void 0),Cs=Symbol(void 0),Ns=Symbol(void 0),As=Symbol(void 0),Es=[];let Ts=null;function Ps(e=!1){Es.push(Ts=e?null:[])}function Us(){Es.pop(),Ts=Es[Es.length-1]||null}let Is=1;function Os(e){Is+=e}function Ms(e){return e.dynamicChildren=Is>0?Ts||ne:null,Us(),Is>0&&Ts&&Ts.push(e),e}function js(e,t,a,l,n,s){return Ms(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return Ms(Hs(e,t,a,l,n,!0))}function Rs(e){return!!e&&!0===e.__v_isVNode}function Ds(e,t){return e.type===t.type&&e.key===t.key}function Fs(e){}const qs="__vInternal",zs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&zs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Is>0&&!o&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Ns),Rs(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Is>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var o;if(ge(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ia(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ia(e)||qs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?eo(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&zs(i),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Cs,null,e,t)}function Ys(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Js(e="",t=!1){return t?(Ps(),Ls(Ns,null,e)):Hs(Ns,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Ns):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Cs,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||qs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function eo(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function to(e,t,a,l=null){Oa(e,t,7,[a,l])}const ao=os();let lo=0,no=null;const so=()=>no||ul,oo=e=>{no=e,e.scope.on()},io=()=>{no&&no.scope.off(),no=null};function ro(e){return 4&e.vnode.shapeFlag}let co,uo,_o=!1;function po(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mo(e,a)}function fo(e){co=e,uo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const vo=()=>!co;function mo(e,t,a){const l=e.type;if(!e.render){if(!t&&co&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=ue(ue({isCustomElement:a,delimiters:s},n),o);l.render=co(t,i)}}e.render=l.render||se,uo&&uo(e)}oo(e),rt(),function(e){const t=qn(e),a=e.proxy,l=e.ctx;Rn=!1,t.beforeCreate&&Dn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:v,deactivated:m,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Rn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,o=!ge(t)&&ge(t.set)?t.set.bind(a):se,i=xo({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)Fn(i[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{El(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Dn(u,e,"c"),A(dn,d),A(_n,_),A(pn,p),A(fn,f),A(an,v),A(ln,m),A(yn,x),A(bn,y),A(gn,w),A(vn,h),A(mn,g),A(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),ct(),io()}function ho(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function go(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Mn?Mn[a](e):void 0}))}const bo=/(?:^|[-_])(\w)/g;function yo(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function wo(e,t,a=!1){let l=yo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(bo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const xo=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Aa(l,n,s||!n,a)}(e,0,_o);function ko(){return null}function $o(){return null}function So(e){}function Co(e,t){return null}function No(){return Eo().slots}function Ao(){return Eo().attrs}function Eo(){const e=so();return e.setupContext||(e.setupContext=ho(e))}function To(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Po(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Uo(e){const t=so();let a=e();return io(),xe(a)&&(a=a.catch((e=>{throw oo(t),e}))),[a,()=>oo(t)]}function Io(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Rs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Rs(a)&&(a=[a]),Hs(e,t,a))}const Oo=Symbol(""),Mo=()=>{{const e=Tl(Oo);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function jo(){}function Lo(e,t,a,l){const n=a[l];if(n&&Ro(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Ro(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(je(a[e],t[e]))return!1;return Is>0&&Ts&&Ts.push(e),!0}const Do="3.2.37",Fo="undefined"!=typeof document?document:null,qo=Fo&&Fo.createElement("template"),zo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Fo.createElementNS("http://www.w3.org/2000/svg",e):Fo.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Fo.createTextNode(e),createComment:e=>Fo.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Fo.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{qo.innerHTML=l?`<svg>${e}</svg>`:e;const n=qo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bo=/\s*!important$/;function Vo(e,t,a){if(fe(a))a.forEach((a=>Vo(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Go[t];if(a)return a;let l=Pe(t);if("filter"!==l&&l in e)return Go[t]=l;l=Oe(l);for(let a=0;a<Ho.length;a++){const n=Ho[a]+l;if(n in e)return Go[t]=n}return t}(e,t);Bo.test(a)?e.setProperty(Ie(l),a.replace(Bo,""),"important"):e[l]=a}}const Ho=["Webkit","Moz","ms"],Go={},Wo="http://www.w3.org/1999/xlink",[Ko,Yo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Jo=0;const Zo=Promise.resolve(),Xo=()=>{Jo=0};function Qo(e,t,a,l){e.addEventListener(t,a,l)}const ei=/(?:Once|Passive|Capture)$/,ti=/^on[a-z]/;function ai(e,t){const a=Yl(e);class l extends si{constructor(e){super(a,e,t)}}return l.def=a,l}const li=e=>ai(e,nr),ni="undefined"!=typeof HTMLElement?HTMLElement:class{};class si extends ni{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ya((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=De(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=De(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof si){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function oi(e="$style"){{const t=so();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function ii(e){const t=so();if(!t)return;const a=()=>ri(t.subTree,e(t.proxy));Ul(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),mn((()=>e.disconnect()))}))}function ri(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ri(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ci(e.el,t);else if(e.type===Ss)e.children.forEach((e=>ri(e,t)));else if(e.type===As){let{el:a,anchor:l}=e;for(;a&&(ci(a,t),a!==l);)a=a.nextSibling}}function ci(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ui=(e,{slots:t})=>Io(zl,vi(e),t);ui.displayName="Transition";const di={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_i=ui.props=ue({},zl.props,di),pi=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fi=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function vi(e){const t={};for(const a in e)a in di||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[mi(e.enter),mi(e.leave)];{const t=mi(e);return[t,t]}}(n),v=f&&f[0],m=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{gi(e,t?u:i),gi(e,t?c:o),a&&a()},C=(e,t)=>{e._isLeaving=!1,gi(e,d),gi(e,p),gi(e,_),t&&t()},N=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);pi(n,[t,o]),bi((()=>{gi(t,e?r:s),hi(t,e?u:i),fi(n)||wi(t,l,v,o)}))};return ue(t,{onBeforeEnter(e){pi(h,[e]),hi(e,s),hi(e,o)},onBeforeAppear(e){pi(x,[e]),hi(e,r),hi(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>C(e,t);hi(e,d),Si(),hi(e,_),bi((()=>{e._isLeaving&&(gi(e,d),hi(e,p),fi(y)||wi(e,l,m,a))})),pi(y,[e,a])},onEnterCancelled(e){S(e,!1),pi(b,[e])},onAppearCancelled(e){S(e,!0),pi($,[e])},onLeaveCancelled(e){C(e),pi(w,[e])}})}function mi(e){return De(e)}function hi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yi=0;function wi(e,t,a,l){const n=e._endId=++yi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=xi(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function xi(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=ki(n,s),i=l("animationDelay"),r=l("animationDuration"),c=ki(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ki(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$i(t)+$i(e[a]))))}function $i(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(){return document.body.offsetHeight}const Ci=new WeakMap,Ni=new WeakMap,Ai={name:"TransitionGroup",props:ue({},_i,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=so(),l=Fl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xi(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ei),n.forEach(Ti);const l=n.filter(Pi);Si(),l.forEach((e=>{const a=e.el,l=a.style;hi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,gi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ra(e),i=vi(o);let r=o.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,i,l,a)),Ci.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ei(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ti(e){Ni.set(e,e.el.getBoundingClientRect())}function Pi(e){const t=Ci.get(e),a=Ni.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ui=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ii(e){e.target.composing=!0}function Oi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mi={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ui(n);const s=l||n.props&&"number"===n.props.type;Qo(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=De(l)),e._assign(l)})),a&&Qo(e,"change",(()=>{e.value=e.value.trim()})),t||(Qo(e,"compositionstart",Ii),Qo(e,"compositionend",Oi),Qo(e,"change",Oi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ui(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&De(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},ji={deep:!0,created(e,t,a){e._assign=Ui(a),Qo(e,"change",(()=>{const t=e._modelValue,a=qi(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(me(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(zi(e,l))}))},mounted:Li,beforeUpdate(e,t,a){e._assign=Ui(a),Li(e,t,a)}};function Li(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:me(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,zi(e,!0)))}const Ri={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Ui(a),Qo(e,"change",(()=>{e._assign(qi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ui(l),t!==a&&(e.checked=Q(t,l.props.value))}},Di={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=me(t);Qo(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?De(qi(e)):qi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ui(l)},mounted(e,{value:t}){Fi(e,t)},beforeUpdate(e,t,a){e._assign=Ui(a)},updated(e,{value:t}){Fi(e,t)}};function Fi(e,t){const a=e.multiple;if(!a||fe(t)||me(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=qi(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(qi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function qi(e){return"_value"in e?e._value:e.value}function zi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bi={created(e,t,a){Vi(e,t,a,null,"created")},mounted(e,t,a){Vi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vi(e,t,a,l,"updated")}};function Vi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Di;case"TEXTAREA":return Mi;default:switch(t){case"checkbox":return ji;case"radio":return Ri;default:return Mi}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Hi=["ctrl","shift","alt","meta"],Gi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Hi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wi=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Gi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ki={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Yi=(e,t)=>a=>{if(!("key"in a))return;const l=Ie(a.key);return t.some((e=>e===l||Ki[e]===l))?e(a):void 0},Ji={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zi(e,!0),l.enter(e)):l.leave(e,(()=>{Zi(e,!1)})):Zi(e,t))},beforeUnmount(e,{value:t}){Zi(e,t)}};function Zi(e,t){e.style.display=t?e._vod:"none"}const Xi=ue({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Vo(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vo(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ei.test(e)){let a;for(t={};a=e.match(ei);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Ko();(Yo||l>=a.attached-1)&&Oa(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Jo||(Zo.then(Xo),Jo=Ko()),a}(l,n);Qo(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ti.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ti.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Wo,t.slice(6,t.length)):e.setAttributeNS(Wo,t,a);else{const l=z(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},zo);let Qi,er=!1;function tr(){return Qi||(Qi=vs(Xi))}function ar(){return Qi=er?Qi:ms(Xi),er=!0,Qi}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=ir(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:or,initDirectivesForSSR:rr,defineCustomElement:ai,defineSSRCustomElement:li,VueElement:si,useCssModule:oi,useCssVars:ii,Transition:ui,TransitionGroup:Ai,vModelText:Mi,vModelCheckbox:ji,vModelRadio:Ri,vModelSelect:Di,vModelDynamic:Bi,withModifiers:Wi,withKeys:Yi,vShow:Ji,reactive:Qt,ref:va,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Na,toRefs:Sa,isProxy:ia,isReactive:na,isReadonly:sa,isShallow:oa,customRef:$a,triggerRef:ba,shallowRef:ma,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:ze,getCurrentScope:He,onScopeDispose:Ge,computed:xo,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:vn,onUnmounted:mn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:El,inject:Tl,nextTick:Ya,defineComponent:Yl,defineAsyncComponent:Zl,useAttrs:Ao,useSlots:No,defineProps:ko,defineEmits:$o,defineExpose:So,withDefaults:Co,mergeDefaults:To,createPropsRestProxy:Po,withAsyncContext:Uo,getCurrentInstance:so,h:Io,createVNode:Hs,cloneVNode:Ws,mergeProps:eo,isVNode:Rs,Fragment:Ss,Text:Cs,Comment:Ns,Static:As,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:zl,withDirectives:wn,useSSRContext:Mo,ssrContextKey:Oo,createRenderer:vs,createHydrationRenderer:ms,queuePostFlushCb:Qa,warn:Ta,handleError:Ma,callWithErrorHandling:Ia,callWithAsyncErrorHandling:Oa,resolveComponent:kn,resolveDirective:Cn,resolveDynamicComponent:Sn,registerRuntimeCompiler:fo,isRuntimeOnly:vo,useTransitionState:Fl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:jo,get devtools(){return nl},setDevtoolsHook:ol,withCtx:ml,pushScopeId:pl,popScopeId:fl,withScopeId:vl,renderList:En,toHandlers:In,renderSlot:Pn,createSlots:Tn,withMemo:Lo,isMemoSame:Ro,openBlock:Ps,createBlock:Ls,setBlockTracking:Os,createTextVNode:Ks,createCommentVNode:Js,createStaticVNode:Ys,createElementVNode:Vs,createElementBlock:js,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Oe,toHandlerKey:Me,normalizeProps:Y,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Fs,version:Do,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),vr=Symbol(""),mr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Mr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),Fr=Symbol(""),qr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Yr=Symbol(""),Jr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[vr]:"Suspense",[mr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Cr]:"resolveComponent",[Nr]:"resolveDynamicComponent",[Ar]:"resolveDirective",[Er]:"resolveFilter",[Tr]:"withDirectives",[Pr]:"renderList",[Ur]:"renderSlot",[Ir]:"createSlots",[Or]:"toDisplayString",[Mr]:"mergeProps",[jr]:"normalizeClass",[Lr]:"normalizeStyle",[Rr]:"normalizeProps",[Dr]:"guardReactiveProps",[Fr]:"toHandlers",[qr]:"camelize",[zr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Yr]:"isRef",[Jr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=Qr){return e&&(i?(e.helper(gr),e.helper(Ec(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),o&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function oc(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ie(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?vr:uc(e,"KeepAlive")?mr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,vc=/[\.\?\w$\xA0-\uFFFF]/,mc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(mc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?fc:vc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Cc(e){return 1===e.type&&3===e.tagType}function Nc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wr:xr}function Ec(e,t){return e||t?br:yr}const Tc=new Set([Rr,Dr]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Uc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Fr?l=oc(a.helper(Mr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=oc(a.helper(Mr),[ac([t]),s]),n&&n.callee===Dr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Oc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ac(l,e.isComponent)),t(gr),t(Ec(l,e.isComponent)))}const Mc=/&(gt|lt|amp|apos|quot);/g,jc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:oe,isPreTag:oe,isCustomElement:oe,decodeEntities:e=>e.replace(Mc,((e,t)=>jc[t])),onError:ur,onWarn:dr,comments:!1};function Rc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&eu(o,e.options.delimiters[0]))i=Kc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=eu(o,"\x3c!--")?qc(e):eu(o,"<!DOCTYPE")?zc(e):eu(o,"<![CDATA[")&&0!==n?Fc(e,a):zc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){tu(e,3);continue}if(/[a-z]/i.test(o[2])){Hc(e,1,l);continue}i=zc(e)}else/[a-z]/i.test(o[1])?i=Bc(e,a):"?"===o[1]&&(i=zc(e));if(i||(i=Yc(e,t)),fe(i))for(let e=0;e<i.length;e++)Dc(s,i[e]);else Dc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Dc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Fc(e,t){tu(e,9);const a=Rc(e,3,t);return 0===e.source.length||tu(e,3),a}function qc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function zc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Rc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Vc=F("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const i=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,i),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Jc(e,e.source.length,4):(a=Jc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Jc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=eu(l,"."),r=t[1]||(i||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const o=Zc(e),i=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Jc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(o,c,_),yc(i,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,o,i)},loc:Xc(e,s)}}function Yc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Jc(e,l,t),loc:Xc(e,n)}}function Jc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function ou(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Nc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ec(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ac(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([jr,Lr,Rr,Dr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=cu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function vu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:v="",bindingMetadata:m=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Pe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:v,bindingMetadata:m,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);mu(e,a),t.hoistStatic&&ou(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(iu(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Oc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function mu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let a=0;a<e.branches.length;a++)mu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,mu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Cr:Ar);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Ic(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];be(i)?n(i):fe(i)?yu(i,t):xu(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Or)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ec(t.inSSR,p):Ac(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Su(l,t),a(": "),xu(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),fe(o)?yu(o,t):xu(o,t)):i&&xu(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&o("("),ku(a,t),e&&o(")")}else o("("),xu(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),xu(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),o()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Vr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Cu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Nu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Nu(e,t);o.branches.push(n);const s=l&&l(o,n,!1);mu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Au(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Au(t,o+e.branches.length-1,a)}}}))));function Nu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?rc(e.condition,Eu(e,t,a),oc(a.helper(kr),['""',"true"])):Eu(e,t,a)}function Eu(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Uc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Jr?i.arguments[1].returns:i;return 13===t.type&&Oc(t,a),Uc(t,n,a),e}var i}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Ou(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Cc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=oc(l(Pr),[t.source]),o=Cc(e),i=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Nc(e)?e:o&&1===e.children.length&&Nc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Uc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Uc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ec(a.inSSR,r.isComponent))):n(Ac(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ec(a.inSSR,r.isComponent))):l(Ac(a.inSSR,r.isComponent))),i){const e=ic(ju(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",i.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(ju(t.parseResult),r,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Ou(e,t){const a=e.loc,l=e.content,n=l.match(Pu);if(!n)return;const[,s,o]=n,i={source:Mu(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Iu,"").trim();const c=s.indexOf(r),u=r.match(Uu);if(u){r=r.replace(Uu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=Mu(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=Mu(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=Mu(a,r,c)),i}function Mu(e,t,a){return nc(t,!1,gc(e,a,t.length))}function ju({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Ru=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Du=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Fu(e,t,a=Du){t.helper(Wr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(i=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Cc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:v}=n,{arg:m=nc("default",!0),exp:h}=p;let g;cc(m)?g=m?m.content:"default":i=!0;const b=a(h,f,v);let y,w,x;if(y=wc(n,"if"))i=!0,o.push(rc(y.exp,qu(m,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Cc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,qu(m,b),Lu):qu(m,b)}}else if(x=wc(n,"for")){i=!0;const e=x.parseResult||Ou(x.exp);e&&o.push(oc(t.helper(Pr),[e.source,ic(ju(e),qu(m,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(m,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:zu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return o.length&&(f=oc(t.helper(Ir),[f,tc(o)])),{slots:f,hasDynamicSlots:i}}function qu(e,t){return ac([lc("name",e),lc("fn",t)])}function zu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||zu(a.children))return!0;break;case 9:if(zu(a.branches))return!0;break;case 10:case 11:if(zu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Yu(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return oc(t.helper(Nr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&wc(e,"is");if(o&&o.exp)return oc(t.helper(Nr),[o.exp]);const i=dc(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Cr),t.components.add(l),Ic(l,"component"))}(e,t):`"${a}"`;const o=we(s)&&s.callee===Nr;let i,r,c,u,d,_,p=0,f=o||s===fr||s===vr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Ar),t.directives.add(e.name),a.push(Ic(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===mr&&(f=!0,p|=1024),n&&s!==fr&&s!==mr){const{slots:a,hasDynamicSlots:l}=Fu(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,v=!1,m=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,o=re(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ne(s)||(g=!0),o&&Ne(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?v=!0:"class"===s?m=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(v=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Yu(o)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,v="bind"===a,m="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||v&&kc(l,"is")&&Yu(o))continue;if(m&&s)continue;if((v&&kc(l,"key")||m&&_&&kc(l,"vue:before-update"))&&(p=!0),v&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(v||m)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),i)),c=[]),u.push(v?r:{type:14,loc:f,callee:t.helper(Fr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ae(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),i)),k=u.length>1?oc(t.helper(Mr),u,i):u[0]):c.length&&(k=ac(Wu(c),i)),b?f|=16:(m&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(v||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=oc(t.helper(Rr),[k]):(n&&!cc(n.value)&&(n.value=oc(t.helper(jr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=oc(t.helper(Lr),[s.value])));break;case 14:break;default:k=oc(t.helper(Rr),[oc(t.helper(Dr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||re(s))&&Ku(o,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Yu(e){return"component"===e||"Component"===e}const Ju=(e,t)=>{if(Nc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Pe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=ic([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=oc(t.helper(Ur),o,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=nc(Me(Pe(e)),!0,o.loc)}else i=sc([`${a.helperString(Br)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Br)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(i,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Pe(o.content):`${a.helperString(qr)}(${o.content})`:(o.children.unshift(`${a.helperString(qr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(o,"."),n.includes("attr")&&ed(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(o,nc("",!0,s))]}:{props:[lc(o,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:oc(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!hc(o))return sd();const i=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(i,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const od=new WeakSet,id=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||od.has(e))return;return od.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Oc(l,t),e.codegenNode=oc(t.helper(Jr),[a.exp,ic(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Rc(a,0,[]),Xc(a,l))}(e,t):e,[s,o]=[[ld,Cu,id,Tu,Ju,Hu,Ru,td],{on:Xu,bind:Qu,model:nd}];return vu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),vd=Symbol(""),md=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[vd]:"withKeys",[md]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=F("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>J(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=F("passive,once,capture"),Sd=F("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Cd=F("left,right"),Nd=F("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ed=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:oc(a.helperString(Or),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,o=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?o.push(l):Cd(l)?cc(e)?Nd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ad(n,"onContextmenu")),i.includes("middle")&&(n=Ad(n,"onMouseup")),i.length&&(s=oc(a.helper(fd),[s,JSON.stringify(i)])),!o.length||cc(n)&&!Nd(n.content)||(s=oc(a.helper(vd),[s,JSON.stringify(o)])),r.length){const e=r.map(Oe).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(md)})},Ud=Object.create(null);function Id(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Ud[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ed,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Ud[a]=s}fo(Id);var Od=Object.freeze({__proto__:null,BaseTransition:zl,Comment:Ns,EffectScope:ze,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:As,Suspense:kl,Teleport:$s,Text:Cs,Transition:ui,TransitionGroup:Ai,VueElement:si,callWithAsyncErrorHandling:Oa,callWithErrorHandling:Ia,camelize:Pe,capitalize:Oe,cloneVNode:Ws,compatUtils:null,compile:Id,computed:xo,createApp:sr,createBlock:Ls,createCommentVNode:Js,createElementBlock:js,createElementVNode:Vs,createHydrationRenderer:ms,createPropsRestProxy:Po,createRenderer:vs,createSSRApp:or,createSlots:Tn,createStaticVNode:Ys,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Yl,defineCustomElement:ai,defineEmits:$o,defineExpose:So,defineProps:ko,defineSSRCustomElement:li,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:so,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Io,handleError:Ma,hydrate:nr,initCustomFormatter:jo,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Ro,isProxy:ia,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:vo,isShallow:oa,isVNode:Rs,markRaw:ca,mergeDefaults:To,mergeProps:eo,nextTick:Ya,normalizeClass:K,normalizeProps:Y,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:vn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:mn,onUpdated:fn,openBlock:Ps,popScopeId:fl,provide:El,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:va,registerRuntimeCompiler:fo,render:lr,renderList:En,renderSlot:Pn,resolveComponent:kn,resolveDirective:Cn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Os,setDevtoolsHook:ol,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:ma,ssrContextKey:Oo,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:Me,toHandlers:In,toRaw:ra,toRef:Na,toRefs:Sa,transformVNodeArgs:Fs,triggerRef:ba,unref:ya,useAttrs:Ao,useCssModule:oi,useCssVars:ii,useSSRContext:Mo,useSlots:No,useTransitionState:Fl,vModelCheckbox:ji,vModelDynamic:Bi,vModelRadio:Ri,vModelSelect:Di,vModelText:Mi,vShow:Ji,version:Do,warn:Ta,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,withAsyncContext:Uo,withCtx:ml,withDefaults:Co,withDirectives:wn,withKeys:Yi,withMemo:Lo,withModifiers:Wi,withScopeId:vl});var Md={props:["content"],watch:{content:function(e,t){}},render(){return Io(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const jd=["id"],Ld=["aria-labelledby"],Rd={class:"dropdown-item"};var Dd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=No(),s=va([]);va([]);const o=va([]),i=va(null),r=va(null);let c=null;_n((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:i.value,dropdown_button:r.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=xo((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),o.value=[],e.forEach((e=>{let t=e;o.value.push(t)})),await Ya())}return t({load_menu:d}),(t,a)=>(Ps(),js("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",ya(u)]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Pn(t.$slots,"title")],14,jd),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Js(' <slot name="menu"></slot> '),Js(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Js("   asd "),Js("   </li> "),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("li",Rd,[Hs(Md,{content:e},null,8,["content"])])))),256))],8,Ld)],512))},__file:"http_src/vue/dropdown.vue"};const Fd=e=>i18n(e);function qd(e){const t={button_list:Bd(!0),button_array:Bd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function zd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return D.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=v.types[e.render_type])return e.render_func=v.getFormatter(e.render_type),e.render_func(l);if(null!=D[e.render_type])return D[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Bd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:Fd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),Fd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Dd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Vd(e,t,a){let l=Gd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let v=f.rsp;null!=e.rsp_records_field&&(v=f.rsp[e.rsp_records_field]);let m=f.query_info;return null!=e.rsp_query_info_field&&(m=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:v,query_info:m}}}function Hd(e){return e=>null!=e.title_i18n?Fd(e.title_i18n):null!=e.title?e.title:""}function Gd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Wd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Vd(o,l,n),get_column_id:Gd(o),print_column_name:Hd(),print_html_row:zd(),print_vue_node_row:qd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Kd={};async function Yd(e){return null==Kd[e]&&(Kd[e]=ntopng_utility.http_request(e)),await Kd[e]}const Jd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Zd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Xd={get_filter_const:Yd,get_filters_object:Zd,load_filters_data:Jd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},Qd=["multiple"],e_=["selected","value","disabled"],t_=["label"],a_=["selected","value","disabled"];var l_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,multiple:Boolean,add_tag:Boolean,disable_change:Boolean},emits:["update:selected_option","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va([]),o=va([]),i=va({}),r=va([]),c=va(0);let u=!0;function d(){!function(){if(s.value=[],o.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),v()}_n((()=>{l.options&&(l.disable_change&&u||d())})),Ml((()=>l.selected_option),((e,t)=>{v(e),n.value,p()}),{flush:"pre"}),Ml([c],((e,t)=>{_()}),{flush:"post"}),Ml((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&y(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:l.add_tag&&!l.multiple}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null==t.element){let e={label:t.text,value:t.id};a("update:selected_option",e),a("select_option",e)}else{let e=t.element._value,n=b(e);e!=l.selected_option&&(a("update:selected_option",n),a("select_option",n))}if(!l.multiple)return;r.value=r.value.filter((e=>e!=value)),r.value.push(value);let n=g(r.value);a("change_selected_options",n)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=b(t),s=g(r.value);a("unselect_option",n),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=h(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))}function v(e){null!=e||l.multiple||(e=m()),i.value=e}function m(){return null==l.selected_option?l.options[0]:l.selected_option}function h(e){let t;return null==e&&(e=m()),t=null!=e.value?e.value:e.label,t}function g(e){let t=e.map((e=>b(e)));return t}function b(e){let t=function(e){null==e&&(e=h());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.label==t.label));return a}function y(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),vn((()=>{y()})),(t,a)=>(Ps(),js("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),js("option",{class:"ntopng-dropdown-min-width no-wrap",selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,e_)))),256)),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("optgroup",{label:e.group},[(Ps(!0),js(Ss,null,En(e.options,((e,t)=>(Ps(),js("option",{selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,a_)))),256))],8,t_)))),256))],8,Qd))},__file:"http_src/vue/select-search.vue"},n_=Yl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const s_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},o_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},i_=["href","title"],r_=["title"],c_=["href","title"],u_=["title"],d_=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),__=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),p_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},f_={class:"navbar-nav"},v_=["onClick"],m_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},h_=["onClick"],g_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},b_=["onClick"],y_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},w_={class:"navbar-nav ms-auto"},x_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),k_=["href"],$_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];n_.render=function(e,t,a,l,n,s){return Ps(),js("nav",s_,[Vs("span",o_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),js("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,i_)):(Ps(),js("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,r_)),(Ps(!0),js(Ss,null,En(e.secondary_title_list,(e=>(Ps(),js(Ss,null,[Ks(" / "),e.href?(Ps(),js("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),js("i",{key:0,class:K(e.icon)},null,2)):Js("v-if",!0)],10,c_)):(Ps(),js("span",{key:1,title:e.title},te(e.label),9,u_))],64)))),256))]),d_,__,Vs("div",p_,[Vs("ul",f_,[(Ps(!0),js(Ss,null,En(e.items_table,(e=>(Ps(),js(Ss,null,[e.active?(Ps(),js(Ss,{key:0},[e.active?(Ps(),js("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Ps(),js("span",m_,te(e.badge_num),1)):Js("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,v_)):(Ps(),js("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",g_,te(e.badge_num),1)):Js("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,h_))],64)):(Ps(),js("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",y_,te(e.badge_num),1)):Js("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,b_))],64)))),256))]),Vs("ul",w_,[x_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},$_,8,k_)])])])},n_.__file="http_src/vue/page-navbar.vue";var S_=Yl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const C_=["innerHTML"];S_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Ps(),js("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,C_),e.no_close_button?Js("v-if",!0):(Ps(),js("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Js("v-if",!0)},S_.__file="http_src/vue/alert-info.vue";var N_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||N.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const A_={style:{width:"100%"},ref:"chart"};N_.render=function(e,t,a,l,n,s){return Ps(),js("div",A_,null,512)},N_.__file="http_src/vue/chart.vue";var E_={components:{"select-search":l_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),N.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),N.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const T_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),P_={class:"input-group"},U_={class:"form-group"},I_={class:"controls"},O_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},M_={class:"btn-group ms-2"},j_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),L_=["disabled"],R_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),D_=["disabled"],F_=["title"],q_=[T_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],z_={class:"d-flex align-items-center ms-2"},B_=["disabled"],V_={class:"btn-group"},H_=["disabled","title"],G_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],W_=["disabled","title"],K_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],Y_=["disabled","title"],J_=[T_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Z_=["disabled","title"],X_=[T_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],Q_=["disabled","title"],ep=[T_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],tp=["disabled","title"],ap=[T_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function lp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}lp("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),E_.render=function(e,t,a,l,n,s){const o=kn("select-search");return Ps(),js("div",P_,[Vs("div",U_,[Vs("div",I_,[Vs("div",O_,[Pn(e.$slots,"begin"),Vs("div",null,[Hs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",M_,[j_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,L_),Js(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Js(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),R_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,D_),Js(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Js(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},q_,8,F_),[[Ji,n.wrong_date||n.wrong_min_interval]])]),Vs("div",z_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,B_),Vs("div",V_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},G_,8,H_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},K_,8,W_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},J_,8,Y_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},X_,8,Z_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},ep,8,Q_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},ap,8,tp),Pn(e.$slots,"extra_buttons")])])])])])])},E_.__scopeId="data-v-6ae24a28",E_.__file="http_src/vue/date-time-range-picker.vue";var np=Yl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const sp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},op={class:"modal-content"},ip={class:"modal-header"},rp={class:"modal-title"},cp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),up={class:"modal-body"},dp={class:"modal-footer"},_p=Vs("div",{class:"mr-auto"},null,-1),pp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);np.render=function(e,t,a,l,n,s){return Ps(),js("div",{onSubmit:t[0]||(t[0]=Wi(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",sp,[Vs("div",op,[Vs("div",ip,[Vs("h5",rp,[Pn(e.$slots,"title")]),cp]),Vs("div",up,[Pn(e.$slots,"body")]),Vs("div",dp,[_p,Pn(e.$slots,"footer"),pp])])])],544)},np.__file="http_src/vue/modal.vue";const fp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},vp=e=>mp(e)||hp(e),mp=e=>new RegExp(fp.ipv4).test(e),hp=e=>new RegExp(fp.ipv6).test(e),gp=a;function bp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=bp("vlan"),a=gp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=gp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return gp.REGEXES.macAddress;if("ip,cidr"==e){return`(${bp("ip")})|(${bp("cidr")})`}return gp.REGEXES[e]}const yp={get_data_pattern:bp,validateIP:vp,validateIPv4:mp,validateIPv6:hp,validateHostName:e=>new RegExp(fp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(fp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(fp.singleword).test(e)};var wp={components:{modal:np,"select-search":l_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):yp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const xp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),kp={autocomplete:"off"},$p={class:"form-group row"},Sp=xp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Cp={class:"col-sm-8"},Np=xp((()=>Vs("hr",null,null,-1))),Ap={class:"dt-filter-template-container form-group row"},Ep={class:"col-form-label col-sm-3"},Tp={class:"col-sm-8"},Pp={class:"input-group mb-3"},Up={class:"input-group-prepend col-sm-3"},Ip={key:0,class:"col-sm-9"},Op={key:1,class:"col-sm-9"},Mp=["pattern","required"],jp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Lp=["disabled"];lp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),wp.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal");return Ps(),Ls(i,{id:n.id_modal,ref:"modal"},{title:ml((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:ml((()=>[Vs("form",kp,[Vs("div",$p,[Sp,Vs("div",Cp,[Hs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Np,Vs("div",Ap,[Vs("label",Ep,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Tp,[Vs("div",Pp,[Vs("div",Up,[Hs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Ps(),js("div",Ip,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Ps(),js("div",Op,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Ps(),js(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,Mp),[[Mi,n.input_value]]),Vs("span",jp,te(n.i18n("invalid_value")),1)],64))]),Js(" end div input-group mb-3 ")]),Js(" end div form-group-row ")])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Lp)])),_:1},8,["id"])},wp.__scopeId="data-v-3119c83e",wp.__file="http_src/vue/modal-filters.vue";let Rp,Dp,Fp,qp,zp=[],Bp=null!=window.location.toString().match(/alert_stats.lua/),Vp=ntopng_url_manager.get_url_entry("status");null!=Vp&&""!=Vp||(Vp="historical");let Hp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Bp);const Gp=async function(){zp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Bp,Hp),zp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),zp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Rp={},Dp={},zp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Rp[e.id]=e.label)),Dp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=zp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Wp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":E_,"modal-filters":wp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Gp();qp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Rp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Fp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Dp[e.key]&&!Array.isArray(Dp[e.key])&&(e.operators=Dp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=zp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Bp,status_view:Vp,page:Hp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Dp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(zp.map((e=>e.id))),qp.tagify.removeAllTags();let a=Xd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=zp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&qp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Kp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Yp={style:{width:"100%"}},Jp={class:"mb-1"},Zp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Xp={class:"btn-group",id:"statusSwitch",role:"group"},Qp=[Kp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],ef=[Kp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],tf=[Kp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],af={key:0,class:"d-flex mt-1",style:{width:"100%"}},lf=["placeholder"],nf=[Kp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],sf=[Kp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];lp("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Wp.render=function(e,t,a,l,n,s){const o=kn("modal-filters"),i=kn("date-time-range-picker");return Ps(),js("div",Yp,[Vs("div",Jp,[Hs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:ml((()=>[n.is_alert_stats_url?(Ps(),js("div",Zp,[Vs("div",Xp,["flow"!=n.page?(Ps(),js("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},Qp,2)):Js("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},ef,2),Js(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},tf,2)])])):Js("v-if",!0),Pn(e.$slots,"begin")])),extra_buttons:ml((()=>[Pn(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Js(" tagify "),"all"!=n.page?(Ps(),js("div",af,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,lf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},nf,512),[[Ji,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},sf,512),[[Ji,n.modal_data&&n.modal_data.length>0]])])):Js("v-if",!0),Js(" end tagify ")])},Wp.__scopeId="data-v-aaee59ea",Wp.__file="http_src/vue/range-picker.vue";const of={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},rf={class:"col-sm-12 col-md-5"},cf={class:"dataTables_info",role:"status","aria-live":"polite"},uf={class:"col-sm-12 col-md-7"},df={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},_f={class:"pagination"},pf={class:"paginate_button page-item previous"},ff=["onClick"],vf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},mf={class:"paginate_button page-item previous"};var hf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=6,s=va(0),o=va(0),i=va(0),r=va(0),c="Showing page %active_page of %total_pages: total %total_rows rows",u=va("");function d(){if(null==l.total_rows)return;let e=l.per_page;i.value=Number.parseInt((l.total_rows+e-1)/e),o.value=n,i.value<o.value&&(o.value=i.value),r.value>=i.value&&i.value>0&&(r.value=i.value-1,s.value=i.value-o.value,f(r.value)),v()}_n((()=>{d()})),Ml((()=>[l.total_rows,l.per_page]),((e,t)=>{d()}),{flush:"pre",immediate:!0});const _=xo((()=>!(i.value<n)&&r.value>=o.value-1)),p=xo((()=>!(i.value<n)&&r.value<i.value-o.value+1));function f(e,t){null!=e&&(r.value=e),null!=t&&(s.value=t),r.value==s.value&&s.value>0&&(s.value-=1);const l=s.value+o.value-1;r.value==l&&i.value-1>l&&(s.value+=1),r.value>i.value-1&&0!=i.value&&(r.value=i.value-1,s.value=r.value),v(),a("change_active_page",r.value)}function v(){u.value=c.replace("%active_page",m(`${r.value+1}`)).replace("%total_pages",m(`${i.value}`)).replace("%total_rows",m(`${l.total_rows}`)).replace("%per_page",m(`${l.per_page}`))}function m(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:f}),(e,t)=>(Ps(),js(Ss,null,[Js(" PerPage "),Vs("div",of,[Js(" div col-md-5 "),Vs("div",rf,[Vs("div",cf,te(u.value),1)]),Js(" div col-md-5 "),Js(" start div col-sm-12 "),wn(Vs("div",uf,[Vs("div",df,[Vs("ul",_f,[wn(Vs("li",pf,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>f(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Ji,ya(_)]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{f(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),js(Ss,null,En(o.value,(e=>(Ps(),js("li",{onClick:t=>f(s.value+e-1),class:K([{active:r.value==s.value+e-1},"paginate_button page-item"])},[Vs("a",vf,te(s.value+e),1),Js('  :key="total_rows"')],10,ff)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:r.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{f(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",mf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>f(i.value-1,i.value-o.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Ji,ya(p)]])])])],512),[[Ji,i.value>0]]),Js(" end div col-md-7 ")]),Js(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const gf={class:"text-center"},bf={class:"sr-only position-absolute"};var yf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=va(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Ps(),js("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",gf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",bf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const wf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},xf=["checked","title"],kf=["innerHTML"];var $f={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=va(!1);return _n((()=>{l.value=a.value})),Ml((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Ps(),js("div",wf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,xf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,kf)]))},__file:"http_src/vue/switch.vue"};const Sf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Cf=["id"],Nf={class:"button-group mb-2"},Af={style:{float:"left","margin-top":"0.5rem"}},Ef=["value"],Tf=Sf((()=>Vs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Pf={style:{"text-align":"right"},class:"form-group"},Uf={key:0,class:"d-inline"},If=[Sf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],Of=[Sf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},jf=Sf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Lf={class:"form-check form-switch ms-1"},Rf=["checked","onClick","id"],Df=["for","innerHTML"],Ff={key:0,class:"centered-message"},qf=["innerHTML"],zf=["data-resizable-columns-id"],Bf=["onClick","data-resizable-column-id"],Vf={style:{display:"flex"}},Hf=["innerHTML"],Gf={class:"fa fa-fw fa-sort-up"},Wf={class:"fa fa-fw fa-sort-down"},Kf={key:0,scope:"col",class:""},Yf=["innerHTML"],Jf={key:0,style:{},class:"",scope:"col"},Zf=[Sf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Xf={key:1,class:"mt-2"},Qf={class:"text-end"},ev={style:{},class:"query text-end"},tv={class:"records"},av={class:"text-start"},lv={id:"historical_flows_table-query-time",style:{},class:"query"},nv={class:"seconds"},sv=["title"];var ov={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Io,nextTick:Ya},s=e=>i18n(e);va(!0);const o=va(null),i=va(null),r=va(null);va([]);let c=0,u=[];const d=va([]),_=va([]),p=va(0),f=[10,20,40,50,80,100],v=va(10),m=window.store,h=va(""),g=va(null),y=va(!1),w=va(null),k=va(null),S=va(!1),C=va(!1),N=va(!1);_n((async()=>{null!=l.columns&&T()}));const A=xo((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));function E(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function T(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],o="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(o=l.f_get_column_style(a));let i=l.get_column_id(a),r=e[i],c=r?.sort;return c=1==t&&null==c&&null!=l.default_sort&&i==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:J(a),order:r?.order||n,classes:s,style:o,data:a}})),await j()}(),await Y(),M(),await Ya(),r.value.load_menu(),a("loaded")}let P;function U(){0!=N.value?P=setInterval((()=>{q()}),1e3*l.show_autorefresh):clearInterval(P)}async function I(){await async function(){O.value+=1,await Ya()}(),M()}Ml((()=>[l.id,l.columns]),((e,t)=>{T()}),{flush:"pre"});const O=va(0);function M(){let e={store:m,minWidth:32};$(i.value).resizableColumns(e)}async function j(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;m.remove(t)})),await I()}function R(){D.value+=1,q(0)}const D=va(0);const F=va(0);async function q(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||z?await Y():Z(),F.value+=1}let z=!1,B=!1;async function H(e){z=!0,B=e||!1,B?g.value.change_active_page():g.value.change_active_page(0,0),await Ya(),z=!1,B=!1}let G,W=!0;async function Y(){y.value=!B;let e=await l.get_rows(c,v.value,d.value,h.value,W);w.value=null,null!=e.query_info&&(w.value=e.query_info),W=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Z(),y.value=!1,a("rows_loaded",e)}function J(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Z(){let e=0;if(0==l.paging&&(e=c*v.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+v.value)}async function X(){let e=1e3;null!=G?clearTimeout(G):e=0,G=setTimeout((async()=>{await Y(),G=null}),e)}function Q(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:T,refresh_table:H,get_columns_defs:function(){return d.value},get_rows_num:function(){return p.value}}),(t,a)=>(Ps(),js(Ss,null,[Pn(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:o,id:e.id},[y.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",Nf,[Js(" TableHeader "),Vs("div",Af,[Vs("label",null,[Ks(" Show "),wn(Vs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>v.value=e),onChange:R},[(Ps(),js(Ss,null,En(f,(e=>Vs("option",{value:e},te(e),9,Ef))),64))],544),[[Di,v.value]]),Ks(" Entries ")])]),Tf,Vs("div",Pf,[Pn(t.$slots,"custom_header"),e.enable_search?(Ps(),js("div",Uf,[Vs("label",null,[Ks(te(s("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>h.value=e),onInput:X,class:""},null,544),[[Mi,h.value]])])])):Js("v-if",!0),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:L},If),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>H())},Of),e.show_autorefresh>0?(Ps(),js("div",Mf,[Hs($f,{value:N.value,"onUpdate:value":a[3]||(a[3]=e=>N.value=e),class:"me-2 mt-1",title:ya(A),style:{},onChange_value:U},null,8,["value","title"])])):Js("v-if",!0),Hs(Dd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:ml((()=>[jf])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(d.value,(t=>(Ps(),js("div",Lf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await Y(),await I(),await j(),S.value=!1}(t),type:"checkbox",id:E(t)},null,8,Rf),Vs("label",{class:"form-check-label",for:E(t),innerHTML:e.print_column_name(t.data)},null,8,Df)])))),256))])),_:1},8,["id"]),Js(" Dropdown columns ")])]),Js(" TableHeader "),(Ps(),js("div",{key:O.value,style:{overflow:"auto",width:"100%"}},[Js(" Table "),1==e.display_message?(Ps(),js("div",Ff,[Vs("span",{innerHTML:e.message_to_display},null,8,qf)])):Js("v-if",!0),Vs("table",{ref_key:"table",ref:i,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||y.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Js(" Table "),Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((t,a)=>(Ps(),js(Ss,null,[t.visible?(Ps(),js("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await Y():Z(),await j()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Vf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Hf),Js(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Gf,null,512),[[Ji,1==t.sort&&t.sortable]]),wn(Vs("i",Wf,null,512),[[Ji,2==t.sort&&t.sortable]])])],10,Bf)):Js("v-if",!0)],64)))),256))])]),Vs("tbody",null,[S.value||C.value?Js("v-if",!0):(Ps(!0),js(Ss,{key:0},En(_.value,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((a,l)=>(Ps(),js(Ss,null,[a.visible?(Ps(),js("td",Kf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Ps(),js("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Yf)):Js("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Ps(),Ls(Md,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Js("v-if",!0)],6)])):Js("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<v.value?(Ps(!0),js(Ss,{key:1},En(v.value-_.value.length,(e=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((e,t)=>(Ps(),js(Ss,null,[e.visible?(Ps(),js("td",Jf,Zf)):Js("v-if",!0)],64)))),256))])))),256)):Js("v-if",!0)])],10,zf),Js(" Table ")])),Js(" Table div"),Vs("div",null,[(Ps(),Ls(hf,{ref_key:"select_table_page",ref:g,key:D.value,total_rows:p.value,per_page:v.value,onChange_active_page:q},null,8,["total_rows","per_page"]))]),null!=w.value?(Ps(),js("div",Xf,[Vs("div",Qf,[Vs("small",ev,[Vs("span",tv,te(w.value.num_records_processed),1),Ks(".")])]),Vs("div",av,[Vs("small",lv,[Ks("Query performed in "),Vs("span",nv,te((w.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:Q,ref_key:"query_info_sql_button",ref:k},"SQL",8,sv)])])])):Js("v-if",!0)],8,Cf)],64))}};lp("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),ov.__scopeId="data-v-61956e9e",ov.__file="http_src/vue/table.vue";var iv={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n=va({}),s=va(null),o=va(!1);_n((async()=>{null==l.table_id&&null==l.table_config_id||r()})),Ml((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const i=xo((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){o.value=!1,await Ya();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Wd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),o.value=!0,await Ya()}function c(){a("loaded")}function u(e){a("custom_event",e)}function d(e){a("rows_loaded",e)}return t({refresh_table:e=>{s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs(),get_rows_num:()=>s.value.get_rows_num()}),(t,a)=>o.value?(Ps(),Ls(ov,{key:0,ref_key:"table",ref:s,id:ya(i),columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:c,onRows_loaded:d,onCustom_event:u},{custom_header:ml((()=>[Pn(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Js("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},rv={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Ps(),js("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Js("v-if",!0)),__file:"http_src/vue/spinner.vue"};const cv={id:"script-description",class:"notes bg-light border",role:"alert"},uv=["innerHTML"];var dv={__name:"note-list",props:{note_list:Array},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Ps(),js("div",cv,[Vs("b",null,te(a("notes")),1),Vs("ul",null,[(Ps(!0),js(Ss,null,En(t.note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,uv)))),256))])]))},__file:"http_src/vue/note-list.vue"},_v=Yl({components:{modal:np},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const pv=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),fv=["innerHTML"],vv={key:0,style:{height:"95%"}},mv={class:"tab-content",style:{height:"100%"}},hv={class:"row"},gv={class:"form-group mb-3 col-md-3 has-feedback"},bv={class:"form-group mb-3 col-md-9 text-right asd"},yv={class:"radio-inline",style:{"margin-left":"1rem"}},wv={class:"radio-inline"},xv={class:"row",id:"pcapDownloadModal_advanced",style:{}},kv={class:"form-group mb-3 col-md-12 has-feedback"},$v=pv((()=>Vs("br",null,null,-1))),Sv={class:"form-label"},Cv=pv((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Nv={class:"input-group"},Av=pv((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Ev=pv((()=>Vs("br",null,null,-1))),Tv={class:"form-label"},Pv=pv((()=>Vs("br",null,null,-1))),Uv=pv((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));lp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),_v.render=function(e,t,a,l,n,s){const o=kn("modal");return Ps(),Ls(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ml((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:ml((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,fv),1==e.data_available?(Ps(),js("form",vv,[Vs("div",mv,[Vs("div",hv,[Vs("div",gv,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",bv,[Vs("label",yv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Ri,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",wv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Ri,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",xv,[Vs("div",kv,[$v,Vs("label",Sv,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Cv]),Vs("div",Nv,[Av,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Mi,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Ji,e.invalid_bpf]])]),Ev,Vs("label",Tv,te(e.i18n("traffic_recording.filter_examples"))+":",1),Pv,Uv])],512),[[Ji,e.show_menu]])])])):Js("v-if",!0)])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Ji,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Ji,2==e.data_available]])])),_:1},8,["id","onApply"])},_v.__scopeId="data-v-0be978c4",_v.__file="http_src/vue/modal-traffic-extraction.vue";const Iv=e=>(pl("data-v-089b0491"),e=e(),fl(),e),Ov=Iv((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Mv={class:"nav nav-tabs"},jv=["disabled"],Lv={key:0,style:{"min-height":"8.5rem"}},Rv={class:"form-group ms-2 me-2 mt-3 row"},Dv={class:"col-form-label col-sm-4"},Fv={class:"col-sm-6"},qv=["pattern"],zv={key:1,style:{"min-height":"8.5rem"}},Bv={class:"form-group ms-2 me-2 mt-3 row"},Vv={class:"col-form-label col-sm-4"},Hv={class:"col-sm-8"},Gv={value:"name"},Wv={value:"date"},Kv={class:"form-group ms-2 me-2 mt-3 row"},Yv={class:"col-form-label col-sm-4"},Jv={class:"col-sm-8"},Zv=["value"],Xv={class:"form-group ms-2 me-2 mt-3 row"},Qv={class:"custom-control custom-switch"},em={class:"custom-control-label ms-1 form-check-label"},tm=["disabled"],am=["disabled"],lm=["disabled"];var nm={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("add"),o=va(""),i=va(!1),r=va(""),c=va(!0),u=va(""),d=va(""),_=va([]),p=va("date");let f=NtopUtils.REGEXES.singleword;const v=xo((()=>!new RegExp(f).test(d.value))),m=xo((()=>""==o.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(o.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=o.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=o.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(o.value=_.value[0])}(),n.value.show()},close:$}),_n((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(S("snapshots.manage"))+" ",1),Ov])),body:ml((()=>[Vs("ul",Mv,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==_.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},te(S("snapshots.manage")),11,jv)])]),"add"==s.value?(Ps(),js("div",Lv,[Vs("div",Rv,[Vs("label",Dv,[Vs("b",null,te(S("snapshots.name"))+":",1)]),Vs("div",Fv,[wn(Vs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,qv),[[Mi,d.value]])])]),Js(' <div class="form-group ms-2 me-2 mt-3 row"> '),Js(' \t<div class="custom-control custom-switch"> '),Js(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Js(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Js(" \t</div> "),Js(" </div>       ")])):Js("v-if",!0),Js(" action add "),"select"==s.value?(Ps(),js("div",zv,[Vs("div",Bv,[Vs("label",Vv,[Vs("b",null,te(S("snapshots.order_by")),1)]),Vs("div",Hv,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Vs("option",Gv,te(S("snapshots.name")),1),Vs("option",Wv,te(S("snapshots.date")),1)],544),[[Di,p.value]])])]),Vs("div",Kv,[Vs("label",Yv,[Vs("b",null,te(S("snapshots.select")),1)]),Vs("div",Jv,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>o.value=e)},[(Ps(!0),js(Ss,null,En(_.value,(e=>(Ps(),js("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Zv)))),256))],512),[[Di,o.value]])])]),Vs("div",Xv,[Vs("div",Qv,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[ji,i.value]]),Vs("label",em,te(r.value),1)])])])):Js("v-if",!0),Js(" action select ")])),footer:ml((()=>["add"==s.value?(Ps(),js("button",{key:0,type:"button",onClick:w,disabled:ya(v),class:"btn btn-primary"},te(S("snapshots.add")),9,tm)):Js("v-if",!0),"select"==s.value?(Ps(),js("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Js("v-if",!0),"select"==s.value?(Ps(),js("button",{key:2,type:"button",onClick:k,disabled:ya(m),class:"btn btn-danger"},te(S("snapshots.delete")),9,am)):Js("v-if",!0),"select"==s.value?(Ps(),js("button",{key:3,type:"button",onClick:x,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.apply")),9,lm)):Js("v-if",!0)])),_:1},512))}};lp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),nm.__scopeId="data-v-089b0491",nm.__file="http_src/vue/modal-snapshot.vue";const sm=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),om=["innerHTML"],im={class:"form-group mb-3"},rm=["innerHTML"],cm={class:"alert_label"},um={class:"form-check"},dm={class:"form-check-label"},_m={key:0,class:"form-check"},pm={class:"form-check-label"},fm={class:"form-check"},vm={class:"form-check-label"},mm={class:"form-check"},hm={class:"form-check-label"},gm={key:0,class:"exclude-domain-certificate"},bm={class:"alert_label"},ym={key:0,class:"form-check"},wm={class:"form-check-label whitespace"},xm=["pattern","disabled"],km={key:1,class:"form-check"},$m={class:"form-check-label whitespace"},Sm=["disabled","pattern"],Cm={key:0,class:"form-group row"},Nm={class:"col-form-label"},Am={class:"mt-1"},Em=["placeholder"],Tm={class:"separator"},Pm=sm((()=>Vs("hr",{class:"separator"},null,-1))),Um={class:"form-group mb-3"},Im={class:"custom-control custom-switch"},Om={class:"custom-control-label"},Mm={class:"alert alert-warning border",role:"alert"},jm=["disabled"];var Lm={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("any"),o=va(!0),i=va(null),r=va(null),c=va(null),u=i18n("details.comment_placeholder");Ml((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",o.value=!0,i.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=()=>{if("domain"==s.value){let e=new RegExp(v);return null==i.value||0==e.test(i.value)}if("certificate"==s.value){let e=new RegExp(m);return null==r.value||0==e.test(r.value)}return!1},_=xo((()=>l.alert?.alert_name)),p=xo((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),f=xo((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let v=NtopUtils.REGEXES.domain_name_not_strict,m=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:o.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=p.value.value:"server_host"==s.value?u=f.value.srv_value:"client_host"==s.value&&(u=f.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=i.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),g(),a("exclude",n)},g=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:g}),_n((()=>{}));const b=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(b("exclude_check"))+": ",1),Vs("span",{innerHTML:ya(_)},null,8,om)])),body:ml((()=>[Vs("div",im,[Vs("div",null,[Vs("label",null,[Ks(te(b("exclude_check"))+' "',1),Vs("b",{innerHTML:ya(_)},null,8,rm),Ks('". '),Vs("span",cm,te(b("exclude_for"))+":",1)]),Vs("div",um,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",dm,[Vs("span",null,te(b("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),js("div",_m,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",pm,[Vs("span",null,te(ya(p).label),1)])])):Js("v-if",!0),"flow"==e.page?(Ps(),js(Ss,{key:1},[Vs("div",fm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",vm,[Vs("span",null,te(b("client"))+": "+te(ya(f).cli_label),1)])]),Vs("div",mm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",hm,[Vs("span",null,te(b("server"))+": "+te(ya(f).srv_label),1)])])],64)):Js("v-if",!0)]),null!=i.value||null!=r.value?(Ps(),js("div",gm,[Vs("label",null,[Vs("span",bm,te(b("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Ps(),js("div",ym,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",wm,[Vs("span",null,te(b("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(v),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,xm),[[Mi,i.value]])])):Js("v-if",!0),null!=r.value?(Ps(),js("div",km,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Ri,s.value]]),Vs("label",$m,[Vs("span",null,te(b("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ya(m),required:"",class:"form-check-label custom-width"},null,8,Sm),[[Mi,r.value]])])):Js("v-if",!0)])):Js("v-if",!0)]),"any"!=s.value?(Ps(),js("div",Cm,[Vs("div",null,[Vs("label",Nm,[Vs("b",null,te(b("show_alerts.add_a_comment")),1)])]),Vs("div",Am,[wn(Vs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,Em),[[Mi,c.value]])])])):Js("v-if",!0),wn(Vs("hr",Tm,null,512),[[Ji,o.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ps(),js(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(b("show_alerts.confirm_delete_filtered_alerts")),513),[[Ji,o.value]]),Pm,Vs("div",Um,[Vs("div",Im,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>o.value=e)},null,512),[[ji,o.value]]),Vs("label",Om,te(b("delete_disabled_alerts")),1)])])],64)):Js("v-if",!0),Vs("div",Mm,te(b("show_alerts.confirm_filter_alert")),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:h,disabled:d(),class:"btn btn-warning"},te(b("filter")),9,jm)])),_:1},512))}};lp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Lm.__scopeId="data-v-19c5b1f1",Lm.__file="http_src/vue/modal-alerts-filter.vue";const Rm={class:"form-group row mb-2"},Dm={class:"col-sm-6"},Fm={class:"col-form-label"},qm={class:"col-sm-6 mt-1"};var zm={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:i.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}_n((()=>{}));const u=va({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),i.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");o.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.acknowledge_alert"))+": "+te(r.value),1)])),body:ml((()=>[Vs("div",Rm,[Vs("div",Dm,[Vs("label",Fm,[Vs("b",null,te(n("show_alerts.add_a_comment")),1)])]),Vs("div",qm,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[Mi,i.value]])])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Bm={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}_n((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=n("show_alerts.confirm_label_alert");o.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.delete_alert")),1)])),body:ml((()=>[Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Vm={class:"form-group row"},Hm={class:"col-sm-6"},Gm={class:"col-form-label"},Wm={class:"col-sm-6"},Km=["value"],Ym={class:"form-group row mb-2"},Jm={class:"col-sm-6"},Zm={class:"col-form-label"},Xm={class:"col-sm-6 mt-1"},Qm=["value"];var eh={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");va([]),_n((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("acknowledge_alerts")),1)])),body:ml((()=>[Vs("div",Vm,[Vs("div",Hm,[Vs("label",Gm,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Wm,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,Km)])]),Vs("div",Ym,[Vs("div",Jm,[Vs("label",Zm,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Xm,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,Qm)])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const th={class:"form-group row"},ah={class:"col-sm-6"},lh={class:"col-form-label"},nh={class:"col-sm-6"},sh=["value"],oh={class:"form-group row"},ih={class:"col-sm-6"},rh={class:"col-form-label"},ch={class:"col-sm-6 mt-1"},uh=["value"],dh={class:"form-group filters-list mb-2"},_h={class:"form-group row"},ph={class:"col-sm-6"},fh={class:"col-form-label"},vh={class:"col-sm-6 mt-1"},mh=["value"];var hh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va(""),c=va([]);_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Xd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_alerts")),1)])),body:ml((()=>[Vs("div",th,[Vs("div",ah,[Vs("label",lh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",nh,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,sh)])]),Vs("div",oh,[Vs("div",ih,[Vs("label",rh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",ch,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,uh)])]),Vs("div",dh,[(Ps(!0),js(Ss,null,En(c.value,(e=>(Ps(),js("div",_h,[Vs("div",ph,[Vs("label",fh,[Vs("b",null,te(e.label),1)])]),Vs("div",vh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,mh)])])))),256))]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const gh={class:"row"},bh={class:"col-12"},yh={class:"mb-2"},wh={class:"w-100"},xh={clas:"range-container d-flex flex-wrap"},kh={class:"range-picker d-flex m-auto flex-wrap"},$h={key:0,class:"ms-1 me-2"},Sh=["value"],Ch=["label"],Nh=["value"],Ah=["title"],Eh=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Th=["title","href"],Ph=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],Uh=["title"],Ih=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],Oh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],jh={class:"col-12"},Lh={class:"card card-shadow"},Rh={class:"card-body"},Dh={key:0,class:"row"},Fh={class:"col-12 mb-2",id:"chart-vue"},qh={class:"card h-100 overflow-hidden"},zh=Vs("div",null,null,-1),Bh=["title"],Vh=["onClick","title"],Hh={class:"card-footer"},Gh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Wh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Kh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(0),m=va(!1),g=va(""),w=va(null),k=t.context.ifid;let S;const N=va(""),A=va("");let E=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=j.typeChart.TS_COLUMN,P=va([]),U=va([]),I=va([a("show_alerts.alerts_info")]),O=va({}),M=va([]),L=va(!1),R=xo((()=>{if(!t.context.show_chart||null==s.value)return"";if(v.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");E="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,O.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==O.value.value&&(O.value.value="");N.value=`alert_${S}`,A.value=`${N.value}_${O.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(q());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,a=await b.http_request(e);if(null==a||0==a.length)return M.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(q());M.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};M.value.push(t)}));if(null==O.value||""==O.value.value)O.value=M.value[0];else{let e=M.value.find((e=>e.value==O.value.value));O.value=e||M.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(q())}(),L.value=!0,await z()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),z()}),!1)}()}));const F="page-alert-stats";function q(){return`${F}_query_presets`}async function z(e){1==t.context.show_cards&&1!=O.value.is_preset&&(P.value=await B("overview"))}async function B(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/${S}/alert/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const V=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await B(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),U.value[t].load_menu()}e.show_spinner=!1}(e,t)};function H(){$(`#${A.value}`).on("click","a.tag-filter",(async function(e){W(e,$(this))}))}const G=async e=>{await h.on_ready(q());let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return D.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${D.filterize("info",e.value,e.label)}`}},l=O.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},W=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),K({id:a,value:l,operator:n})};function K(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e)}const Y=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Z(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function X(){o.value.show()}function Q(){i.value.show()}async function ee(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ae(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function le(e){null!=e?.rows&&(m.value=0==e.rows.length)}function ne(e){let t={click_button_snmp_info:pe,click_button_info:fe,click_button_historical_flows:_e,click_button_acknowledge:de,click_button_disable:ue,click_button_settings:ce,click_button_remove:re,click_button_expand:se};null!=t[e.event_id]&&t[e.event_id](e)}function se(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Xd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function oe(){let e=y.get_status();p.value.show(e)}function ie(){let e=y.get_status();f.value.show(e)}function re(e){const t=e.row;let a=ve();_.value.show(t,a)}function ce(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ue(e){!function(e){w.value=e,u.value.show()}(e.row)}function de(e){const a=e.row;d.value.show(a,t.context)}function _e(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function pe(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function fe(e){const a=e.row;let l=ve(),n={page:S,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const o=`${t.context.alert_details_url}?${s}`;window.open(o,"_blank")}function ve(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,v)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",gh,[Vs("div",bh,[Vs("div",yh,[Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(_v,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(nm,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),L.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:ml((()=>[M.value.length>0?(Ps(),js("div",$h,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":v[0]||(v[0]=e=>O.value=e),onChange:v[1]||(v[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,Sh)):Js("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Ps(),js("optgroup",{key:0,label:a("queries.queries")},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[e.builtin?Js("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,Nh))],64)))),256))],8,Ch)):Js("v-if",!0)],544),[[Di,O.value]])])):Js("v-if",!0)])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:Z,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},Eh,8,Ah)):Js("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:ya(R)},Ph,8,Th)):Js("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:a("traffic_recording.pcap_download")},Ih,8,Uh)):Js("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:Q,title:a("datatable.manage_snapshots")},Mh,8,Oh)):Js("v-if",!0)])),_:1},512)):Js("v-if",!0)])])])])]),Vs("div",jh,[Vs("div",Lh,[Vs("div",Rh,[e.context.show_chart?(Ps(),js("div",Dh,[Vs("div",Fh,[Vs("div",qh,[Hs(N_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(E),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),zh,Hs(iv,{ref_key:"table_alerts",ref:s,table_config_id:N.value,table_id:A.value,csrf:e.context.csrf,f_map_columns:G,get_extra_params_obj:Y,display_message:m.value,message_to_display:g.value,onLoaded:H,onCustom_event:ne,onRows_loaded:le},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(P.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:V(e,t),ref_for:!0,ref:e=>{U.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Bh)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),K({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Vh)))),256))])),_:2},1032,["f_on_open"])))),256)),Js(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Js("v-if",!0)]),Js(" card body "),wn(Vs("div",Hh,[e.context.show_acknowledge_all?(Ps(),js("button",{key:0,onClick:oe,class:"btn btn-primary me-1"},[Gh,Ks(" "+te(a("acknowledge_alerts")),1)])):Js("v-if",!0),e.context.show_delete_all?(Ps(),js("button",{key:1,onClick:ie,class:"btn btn-danger"},[Wh,Ks(" "+te(a("delete_alerts")),1)])):Js("v-if",!0)],512),[[Ji,"all"!=ya(S)]]),Js(" card footer ")]),Js(" card-shadow ")]),Js(" div col "),Hs(dv,{note_list:I.value},null,8,["note_list"])]),Js(" div row "),Hs(zm,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ae},null,8,["context","page"]),Hs(Bm,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ae},null,8,["context","page"]),Hs(eh,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ae},null,8,["context","page"]),Hs(hh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ae},null,8,["context","page"]),Hs(Lm,{alert:w.value,page:ya(S),onExclude:ee,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Yh={class:"row"},Jh={class:"col-12"},Zh={class:"mb-2"},Xh={class:"w-100"},Qh={clas:"range-container d-flex flex-wrap"},eg={class:"range-picker d-flex m-auto flex-wrap"},tg={class:"ms-1 me-2"},ag=["value"],lg=["label"],ng=["value"],sg=["title"],og=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],ig=["title","href"],rg=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],cg=["title"],ug=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],dg=["title"],_g=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],pg={class:"col-12"},fg={class:"card card-shadow"},vg={class:"card-body"},mg={class:"row"},hg={key:0,class:"col-12 mb-2",id:"chart-vue"},gg={class:"card h-100 overflow-hidden"},bg=["title"],yg=["onClick","title"],wg={key:0,class:"card-footer"},xg={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},kg=Vs("i",{class:"fas fa fa-user-check"},null,-1),$g={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Sg=Vs("i",{class:"fas fa fa-trash"},null,-1);var Cg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n="page-flow-historical",s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),m=va(null),g=t.context.ifid,w=va(""),k=va(""),S=xo((()=>{if(null==U.value?.value)return k.value;return`${k.value}_${U.value.value}`})),N=xo((()=>{if(q.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=i.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const E=xo((()=>"topk-timeseries"==t.context?.chart_type?j.typeChart.TS_LINE:j.typeChart.TS_COLUMN)),T=va([]),P=va([]),U=va({}),I=va([]);va([]);const O=va(!1),M=va(!1),L=va(l("datatable.aggregated")),R=va(null),F=va(!1),q=va(0);function z(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){w.value=x.get_url_entry("page"),null==w.value&&(w.value="overview");A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,U.value={value:x.get_url_entry("query_preset")},null==U.value.value&&(U.value.value="");k.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(k.value="flow_historical_aggregated",M.value=!0,R.value="hour",F.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",g);if(0==M.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(R.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(R.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,R.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,R.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${w.value}&aggregated=${M.value}`,t=await b.http_request(e);I.value=t[0].list.map((e=>{let t=z(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=z(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};I.value.push(a)}));if(null==U.value||""==U.value.value)U.value=I.value[0];else{let e=I.value.find((e=>e.value==U.value.value));U.value=e||I.value[0]}x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),h.ready(_e())}(),O.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&o.value.register_status();y.on_status_change(w.value,(e=>{x.get_url_params(),i.value.refresh_table(),H(),q.value+=1}),!1)}(),H()}));const B=async e=>{await h.on_ready(_e());let t=U.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=v.getFormatter(t),e};function V(){0==M.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function H(e){1==t.context.show_cards&&(T.value=await G("overview"))}async function G(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const W=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await G(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),P.value[t].load_menu()}e.show_spinner=!1}(e,t)};function K(){$(`#${S.value}`).on("click","a.tag-filter",(async function(e){J(e,$(this))}))}const Y=async e=>{await h.on_ready(_e());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`;let s={first_seen:(e,t)=>{if(void 0!==e)return e.time},l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return D.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),U.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=s[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&M.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},J=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),Z({id:a,value:l,operator:n})};function Z(e){u.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const X=()=>x.get_url_object();function Q(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function ee(){const e=$(d.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function ae(){r.value.show()}function le(){c.value.show()}async function ne(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function se(e){let t=i.value,a=o.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function oe(e){let t={click_button_info:ie,click_button_flow_alerts:ue,click_button_historical_flows:ce,click_button_pcap_download:re,click_button_flows:de};null!=t[e.event_id]&&t[e.event_id](e)}function ie(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function re(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};r.value.show(t?.filter?.bpf,a)}function ce(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function ue(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function de(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function _e(){return`${n}_query_presets`}return(a,n)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:Q},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Yh,[Vs("div",Jh,[Vs("div",Zh,[Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:s},null,512),O.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:u,id:"range_picker",min_time_interval_id:R.value,round_time:F.value},{begin:ml((()=>[t.context.is_enterprise_xl?(Ps(),Ls($f,{key:0,value:M.value,"onUpdate:value":n[0]||(n[0]=e=>M.value=e),class:"me-2 mt-1",change_label_side:!0,label:L.value,style:{},onChange_value:V},null,8,["value","label"])):Js("v-if",!0),Vs("div",tg,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":n[1]||(n[1]=e=>U.value=e),onChange:n[2]||(n[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,ag)):Js("v-if",!0)],64)))),256)),"analysis"!=w.value?(Ps(),js("optgroup",{key:0,label:l("queries.queries")},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[e.builtin?Js("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,ng))],64)))),256))],8,lg)):Js("v-if",!0)],544),[[Di,U.value]])])])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:ee,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:d},og,8,sg)):Js("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:ya(N)},rg,8,ig)):Js("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:ae,title:l("traffic_recording.pcap_download")},ug,8,cg)):Js("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:le,title:l("datatable.manage_snapshots")},_g,8,dg)):Js("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Js("v-if",!0)])])])])]),Vs("div",pg,[Vs("div",fg,[Vs("div",vg,[Vs("div",mg,[e.context.show_chart?(Ps(),js("div",hg,[Vs("div",gg,[Hs(N_,{ref_key:"chart",ref:o,id:"chart_0",chart_type:ya(E),base_url_request:ya(A),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:R.value,round_time:F.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])])])):Js("v-if",!0),Hs(iv,{ref_key:"table_flows",ref:i,table_id:ya(S),table_config_id:k.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:X,onLoaded:K,onCustom_event:oe},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(T.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:W(e,t),ref_for:!0,ref:e=>{P.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,bg)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),Z({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,yg)))),256))])),_:2},1032,["f_on_open"])))),256)),Js(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Js(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Ps(),js("div",wg,[t.context.show_acknowledge_all?(Ps(),js("button",xg,[kg,Ks(" Acknowledge Alerts ")])):Js("v-if",!0),t.context.show_delete_all?(Ps(),js("button",$g,[Sg,Ks(" Delete Alerts ")])):Js("v-if",!0)])):Js("v-if",!0),Js(" card footer ")]),Js(" card-shadow ")]),Js(" div col ")]),Js(" div row "),Hs(_v,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:r},null,512),Hs(nm,{ref_key:"modal_snapshot",ref:c,csrf:e.context.csrf},null,8,["csrf"]),Hs(zm,{ref_key:"modal_acknowledge",ref:p,context:e.context,onAcknowledge:se},null,8,["context"]),Hs(Bm,{ref_key:"modal_delete",ref:f,context:e.context,onDelete_alert:se},null,8,["context"]),Hs(Lm,{alert:m.value,page:w.value,onExclude:ne,ref_key:"modal_alerts_filter",ref:_},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ng={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)},t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)},t.axes.x.axisLabelWidth=90,this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Ag={style:{width:"100% height:380px"},class:"text-end mb-2"},Eg={class:"form-check-label form-control-sm"},Tg=["onClick","checked"],Pg={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ug={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};Ng.render=function(e,t,a,l,n,s){return Ps(),js(Ss,null,[Vs("div",Ag,[(Ps(!0),js(Ss,null,En(n.timeseries_list,((e,t)=>(Ps(),js("label",Eg,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Tg),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Ps(),js("div",Pg,null,512)):(Ps(),js("div",Ug,null,512))],64)},Ng.__file="http_src/vue/timeseries-chart.vue";const Ig=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Og={class:"form-group ms-2 me-2 mt-3 row"},Mg={class:"col-11"},jg={class:"col-form-label"},Lg=[Ig((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Rg={class:"container"},Dg={class:"row custom-ms me-2 mt-1"},Fg={class:"col-5"},qg=["onUpdate:modelValue"],zg={class:"custom-control-label ms-1 form-check-label"},Bg={class:"col-2"},Vg=["onUpdate:modelValue"],Hg=Ig((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Gg={class:"col-2"},Wg=["onUpdate:modelValue"],Kg=Ig((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Yg={class:"col-3"},Jg=["onUpdate:modelValue"],Zg=Ig((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var Xg={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Ps(),js("div",null,[Vs("div",Og,[Vs("div",Mg,[Vs("label",jg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),js("div",{key:0,class:"col-1",onClick:n},Lg)):Js("v-if",!0)]),Vs("div",Rg,[(Ps(!0),js(Ss,null,En(e.timeseries,(e=>(Ps(),js("div",Dg,[Vs("div",Fg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,qg),[[ji,e.raw]]),Vs("label",zg,te(e.label),1)]),Vs("div",Bg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,Vg),[[ji,e.past]]),Hg]),Vs("div",Gg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Wg),[[ji,e.avg]]),Kg]),Vs("div",Yg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Jg),[[ji,e.perc_95]]),Zg])])))),256))])]))}};lp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),Xg.__scopeId="data-v-185590b6",Xg.__file="http_src/vue/list-timeseries.vue";const Qg=v.getFormatter(v.types.bytes.id),eb="page-stats-action-link",tb="page-stats-action-jump-historical",ab={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:eb,render:function(e,t,a){let l=this,n={handlerId:eb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return R.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:tb,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return R.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},lb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:eb,render:function(e,t,a){let l=this,n={handlerId:eb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return R.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:tb,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return R.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},nb=[ab,lb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:eb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:eb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=R.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:tb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:tb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),R.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:eb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:eb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=R.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:tb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:tb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),R.createActionButtons(r)}}]}];let sb=nb.find((e=>"top_protocols"==e.view));null!=sb&&(sb=b.clone(sb),sb.table_value="host");const ob=[sb],ib=v.getFormatter(v.types.bytes.id),rb=v.getFormatter(v.types.bps.id),cb="page-stats-action-link",ub={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:cb,render:function(e,t,a){let l=this,n={handlerId:cb,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return R.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:cb,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>ib(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>ib(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>ib(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>rb(e)}]},db=[ub],_b=v.getFormatter(v.types.bytes.id),pb=v.getFormatter(v.types.bps.id),fb="page-stats-action-link",vb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:fb,render:function(e,t,a){let l=this,n={handlerId:fb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return R.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>_b(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>_b(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>_b(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>pb(e)}]},mb=[vb],hb={hide:"hide",select:"select",input:"input"},gb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},bb={interface:nb,host:ob,snmp_interface:db,snmp_device:db,flow_device:mb,flow_interface:mb},yb=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:hb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:hb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:hb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:hb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:hb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:hb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:hb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:hb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:hb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:hb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:hb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:hb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input}]},{id:"top_flow_dev",label:i18n("page_stats.source_def.flow_exporter_traffic"),query:"top_flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:hb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:hb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:hb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:hb.input}]}],wb={ui_types:hb,sources_url_el_to_source:gb,sources_types:yb,sources_types_tables:bb},xb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const kb=(e,t,a)=>{let l=Cb(e,t,a),n=[];for(let e in a.timeseries){let t=a.timeseries[e];n.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:l,source_type:e,source_array:t,metric:a,timeseries:n}},$b=async(e,t,a)=>{let l=Fb(),n=await Tb(e,l),s=await Db(e,l,n),o=Bb(s,t,a);return[kb(l,n,o)]};async function Sb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=Eb(a),i=await Ub(http_prefix,o,l),r=await qb(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),o=JSON.parse(a[3]),i=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:o,avg:i,perc_95:r})}})),n}(s,r);return{id:Cb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const Cb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const Nb=wb.sources_url_el_to_source,Ab=wb.sources_types,Eb=e=>Ab.find((t=>t.id==e)),Tb=async(e,t)=>{let a=jb(t);return await Ub(e,t,a)};async function Pb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await Ub(e,t,l)}const Ub=async(e,t,a)=>{null==t&&(t=Fb());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let a=[];a=i.sources_url?await Ob(e,t.id,i):await i.sources_function(),l=a.find((e=>e.value==o)),null==l&&(l=a[0])}else l={label:o,value:o};n.push(l)}return n};let Ib={};const Ob=async(e,t,l)=>{let n=`${t}_${l.value}`;if(null==Ib[n])if(l.sources_url){let t=`${e}/${l.sources_url}`;Ib[n]=b.http_request(t)}else{if(!l.sources_function)return[];Ib[n]=l.sources_function()}let s=await Ib[n];if(l.sources_url){let e=Nb[l.value_map_sources_res];if(null==e&&(e=Nb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;s=s.map((t=>e(t)))}return s.sort(a.sortAlphabetically)};function Mb(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const jb=e=>(null==e&&(e=Fb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Lb={},Rb=null;const Db=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Fb()),null==a&&(a=await Tb(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=Rb&&(Lb[r]=null,Rb=o),null==Lb[r]&&(Lb[r]=b.http_request(i));let c=await Lb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Fb=()=>{let e=window.location.pathname;for(let t=0;t<Ab.length;t+=1){if(1==new RegExp(Ab[t].regex_page_url).test(e))return Ab[t]}throw`source_type not found for ${e}`},qb=async(e,t,a,l,n,s)=>(await Db(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),zb=(e,t)=>{null==t&&(t=Fb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Bb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Vb={set_timeseries_groups_in_url:xb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Sb(e))),Promise.all(a.map((async e=>await Sb(e))))},get_default_timeseries_groups:$b,get_ts_group:kb,get_ts_group_id:Cb,sources_types:Ab,sources_types_tables:wb.sources_types_tables,get_source_type_from_id:Eb,get_current_page_source_type:Fb,get_sources:Ob,get_default_source_array:Tb,get_source_array_from_value_dict:Pb,get_source_array_from_value_array:Ub,get_default_source_value_array:jb,get_metrics:Db,get_metric_from_schema:qb,get_metric_query_from_ts_query:zb,get_default_metric:Bb,set_source_value_object_in_url:Mb,ui_types:wb.ui_types};function Hb(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];Gb(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function Gb(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=Wb(n,t,a),r=Wb(s,t,a),c=Wb(o,t,a);return function(e,t,a){return"#"+Kb(e)+Kb(t)+Kb(a)}(i,r,c)}(e,l+1,t)))}function Wb(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function Kb(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const Yb={transformColors:Hb},Jb={"95_perc":"#8EA4E8",avg:"#839BE6"};function Zb(e){return`${e.id}`}function Xb(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=ry(a);return`${`${a.source_array[s].label}`} - ${n}`}const Qb=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const ey={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function ty(e){return ey[e]||null}function ay(e,t,a,l){if(a.value==ey["1_chart_x_metric"].value)return ly(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...ly(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,ey["1_chart_x_metric"],l),...ly(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function ly(e,t,a,l){let n=!1;if(a.value==ey["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=sy(o,i,l,n);s.push(r)}return s}if(a.value==ey["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let o=sy([e],[t[s]],l,n);a.push(o)})),a}return[]}function ny(e){return"point"==e?{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2}:"line"==e?{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5}:"bounds"==e?{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}:{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}function sy(e,t,a,l){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToOptions: tsOptionsArray ${e} different length from tsGroupsArray ${t}`);let n=[],s=[],o=["Time"],i=!1,r=[],c={},u=!1,d=null!=l&&l;e.forEach(((e,l)=>{const _=e.series||[],p=e.metadata.epoch_begin,f=e.metadata.epoch_step,v=e.additional_series;if(1==(t[l].metric.bounds||!1)){u=!0;let e=p;const{serie:a,color:i,formatter:d,serie_name:v,properties:m}=function(e,t){let a=[],l={},n=null,s=null,o={};return e.forEach(((e,i)=>{let r=1,c=uy.getSerieId(e);const u=e.data||[];let d=t.metric.timeseries[c];if(1==d.invert_direction&&(r=-1),"metric"==d.type){let e=d.label;s=Xb(e,c,t,!0),o=ny("bounds"),l={color:d.color,palette:0},n=t.metric.measure_unit}for(let e=0;e<u.length;e++){let t=u[e];null==t&&(t=NaN),null==a[e]&&(a[e]=[0,NaN,0]),"metric"==d.type?a[e][1]=t*r:"lower_bound"==d.type?a[e][0]=t*r:"upper_bound"==d.type&&(a[e][2]=t*r)}})),{serie:a,color:l,formatter:n,serie_name:s,properties:o}}(_,t[l]);r.push(i);const h=s.find((e=>e==d));null==h&&s.push(d);const g=`${v} ${i18n("lower_value_upper")}`;o.push(g),c[g]={},c[g]=m;Object.keys(a).forEach(((t,l)=>{const s=a[t];null==n[e]&&(n[e]=[{value:new Date(1e3*e),name:"Time"},{value:s,name:g}]),e+=f}))}else _.forEach(((e,u)=>{const _=e.data||[];let m=p,h=uy.getSerieId(e),g=t[l].metric.timeseries[h],b=t[l].timeseries[u],y=1,w=g.label;if(g.hidden)return;1==g.use_serie_name&&(w=e.name),0==i&&(i=t[l].metric.draw_stacked),1==g.invert_direction&&(y=-1),r.push({color:g.color,palette:0});const x=s.find((e=>e==t[l].metric.measure_unit));null==x&&s.push(t[l].metric.measure_unit),e.ext_label&&(w=e.ext_label);const k=Xb(w,h,t[l],d),$=Xb(w+" Avg",h,t[l],d),S=Xb(w+" 95th Perc",h,t[l],d),C=Xb(w+" "+a+" Ago",h,t[l],d);o.push(k),c[k]={},c[k]=ny(e.type||"filled"),1==b?.avg&&(o.push($),c[$]={},c[$]=ny("point"),r.push({color:Jb.avg,palette:1})),1==b?.perc_95&&(o.push(S),c[S]={},c[S]=ny("point"),r.push({color:Jb.perc_95,palette:1})),1==b?.past&&(o.push(C),c[C]={},c[C]=ny("line"),r.push({color:Jb.past,palette:1}));for(let t=0;t<_.length;t++){const a=_[t];if(null==n[m]&&(n[m]=[{value:new Date(1e3*m),name:"Time"}]),null!=a?n[m].push({value:a*y,name:k}):n[m].push({value:NaN,name:k}),1==b?.avg&&n[m].push({value:e.statistics.average*y,name:$}),1==b?.perc_95&&n[m].push({value:e.statistics["95th_percentile"]*y*y,name:S}),1==b?.past)for(const e in v)v[e]?.series[u]?.data[t]?n[m].push({value:v[e]?.series[u]?.data[t]*y,name:C}):n[m].push({value:NaN,name:C});m+=f}}))}));let _=[];Object.keys(n).forEach(((e,t)=>{_[t]=[],o.forEach((a=>{let l=!1;for(let s=0;s<n[e].length;s++)if(n[e][s].name==a){_[t].push(n[e][s].value),l=!0;break}0==l&&_[t].push(null)}))})),function(e){let t=e,a=0,l=0,n=Qb,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e[o]=n[a%n.length],a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}(r);let p=function(e,t,a,l,n,s,o){const i=Yb.transformColors(n);let r=document.getElementsByClassName("body dark").length>0,c="rgb(255, 255, 255)";r&&(c="rgb(13, 17, 23)");let u={customBars:o,labels:t,series:a,data:e,labelsSeparateLines:!0,legend:"follow",stackedGraph:s,connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesBackgroundColor:c,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{}},colors:i};l.length>1?(u.axes.y1=oy(v.getFormatter(l[0])),u.axes.y2=oy(v.getFormatter(l[1]))):1==l.length&&(u.axes.y=oy(v.getFormatter(l[0])));return u}(_,o,c,s,r,i,u);return p}function oy(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n.rawData_[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function iy(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function ry(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function cy(e,t,a,l,n){let s,o={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i={ts_requests:l.map((e=>{let t=ry(e),a={ts_query:iy(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...o,...t},r={"Content-Type":"application/json"};s=await b.http_request(n,{method:"post",headers:r,body:JSON.stringify(i)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=ry(i),c=iy(i),u={...o,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,n)}`;s=[await b.http_request(d)]}return s}Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=o.x*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const uy={groupsOptionsModesEnum:ey,tsArrayToOptions:sy,tsArrayToOptionsArray:ay,getGroupOptionMode:ty,getSerieId:Zb,getSerieName:Xb,getTsChartsOptions:cy,getTsQuery:iy,getMainSourceDefIndex:ry},dy={class:"nav nav-tabs"},_y={class:"form-group ms-2 me-2 mt-3 row"},py={class:"form-group row"},fy={class:"col-form-label col-sm-4"},vy={class:"col-sm-8"},my={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},hy={class:"form-group row"},gy={class:"col-form-label col-sm-4"},by={class:"col-sm-8"},yy=["title"],wy={key:0,class:"form-group mt-2 row"},xy={class:"col-form-label col-sm-4"},ky={class:"col-sm-8"},$y={key:1,class:"form-group mt-2 row"},Sy={class:"col-form-label col-sm-4"},Cy={class:"col-sm-8"},Ny=["onUpdate:modelValue","pattern"],Ay={class:"form-group row mt-2",style:{"text-align":"end"}},Ey={class:"col-sm-12"},Ty=["disabled"],Py={class:"form-group ms-2 me-2 mt-3 row"},Uy={class:"form-group row"},Iy={class:"col-form-label col-sm-4"},Oy={class:"col-sm-8"};var My={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(null),o=va("select");let i=Vb.get_current_page_source_type();const r=Vb.sources_types,c=va(i),u=Vb.ui_types,d=va([]),_=va([]),p=va([]),f=va(""),v=va([]),m=va(!1),h=xo((()=>{if(0==m.value)return!1;for(let e=0;e<v.value.length;e+=1){let t=v.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=va(!1),y=va([]),w=va({}),x=va([]),k=va([]);let $=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{$=async function(){await C(),P()}()}));function S(e){o.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);v.value=e.map((e=>null==e?null:yp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let a=0;a<e.length;a+=1){let l=await Vb.get_sources(http_prefix,c.value.id,e[a]);t.push(l)}let a=await Vb.get_default_source_array(http_prefix,c.value);_.value=a,d.value=t,p.value=a.map((e=>e.value)),E()}(),await T()}async function N(){m.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let a=_.value[t];a.value=e,a.label=e}})),await async function(){await T()}(),E()}function A(){m.value=!0}function E(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function T(){y.value=await Vb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Vb.get_default_metric(y.value),P()}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function U(e){let t=e.source_type.label,a=uy.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function I(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Vb.get_ts_group_id(t,a,l)}const O=e=>{x.value=x.value.filter((t=>I(t)!=e))},M=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},j=()=>{if("add"==o.value){let e={id:I(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};M(e)}a("apply",x.value),L()},L=()=>{n.value.close()},R=e=>i18n(e);return t({show:async e=>{x.value=e,await $,o.value="select",n.value.show()},close:L,add_ts_group:M,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(R("modal_timeseries.title")),1)])),body:ml((()=>[Vs("ul",dy,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==o.value}]),href:"#"},te(R("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==o.value}]),href:"#"},te(R("modal_timeseries.manage_timeseries")),3)])]),Js(" action add "),"add"==o.value?(Ps(),js(Ss,{key:0},[Js(" Sources Types "),Vs("div",_y,[Vs("div",py,[Vs("label",fy,[Vs("b",null,te(R("modal_timeseries.source_type")),1)]),Vs("div",vy,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:ya(r)},null,8,["selected_option","options"])])])]),Js(" Sources "),g.value?Js("v-if",!0):(Ps(),js("div",my,[Vs("div",hy,[Vs("label",gy,[Vs("b",null,te(R("modal_timeseries.source")),1)]),Vs("div",by,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,yy),[[Mi,f.value]])])]),(Ps(!0),js(Ss,null,En(c.value.source_def_array,((e,a)=>(Ps(),js(Ss,null,[Js(" select "),e.ui_type==ya(u).select?(Ps(),js("div",wy,[Vs("label",xy,[Vs("b",null,te(e.label),1)]),Vs("div",ky,[Hs(l_,{selected_option:_.value[a],"onUpdate:selected_option":e=>_.value[a]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[a]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0),Js(" end select "),Js(" input text "),e.ui_type==ya(u).input?(Ps(),js("div",$y,[Vs("label",Sy,[Vs("b",null,te(e.label),1)]),Vs("div",Cy,[wn(Vs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>p.value[a]=e,pattern:v.value[a],required:"",type:"text",placeholder:""},null,40,Ny),[[Mi,p.value[a]]])])])):Js("v-if",!0),Js(" input text ")],64)))),256)),wn(Vs("div",Ay,[Vs("div",Ey,[Vs("button",{type:"button",onClick:N,disabled:0==ya(h),class:"btn btn-primary"},te(R("modal_timeseries.apply_source")),9,Ty)])],512),[[Ji,ya(h)]])])),Js(" end Sources "),Js(" Metrics "),Vs("div",Py,[Vs("div",Uy,[Vs("label",Iy,[Vs("b",null,te(R("modal_timeseries.metric")),1)]),Vs("div",Oy,[Hs(l_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(Xg,{title:R("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Js("v-if",!0),Js(" action == add "),Js(" action select"),"select"==o.value?(Ps(),js(Ss,{key:1},[(Ps(!0),js(Ss,null,En(x.value,(e=>(Ps(),Ls(Xg,{id:I(e),title:U(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Js(" v-for timeseries_groups_added ")],64)):Js("v-if",!0),Js(" action == select ")])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(R("modal_timeseries.add")),513),[[Ji,"add"==o.value]]),wn(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(R("modal_timeseries.apply")),513),[[Ji,"select"==o.value]])])),_:1},512))}};lp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),My.__scopeId="data-v-103cd911",My.__file="http_src/vue/modal-timeseries.vue";const jy={class:"form-group mt-2 row"},Ly={class:"col-form-label col-sm-4"},Ry={class:"col-sm-6"},Dy={class:"col-form-label col-sm-2"},Fy=["disabled"];var qy={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=String.raw`^[a-zA-Z_\-1-9]*$`,i=xo((()=>new RegExp(o).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l.title),1)])),body:ml((()=>[Vs("div",jy,[Vs("label",Ly,[Vs("b",null,te(u("modal_download_file.filename"))+":",1)]),Vs("div",Ry,[wn(Vs("input",{class:"form-control",pattern:o,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[Mi,s.value]])]),Vs("label",Dy," ."+te(l.ext),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ya(i)},te(u("modal_download_file.download")),9,Fy)])),_:1},512))}};lp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),qy.__scopeId="data-v-59120eb8",qy.__file="http_src/vue/modal-download-file.vue";const zy={key:0},By={class:"text-center"},Vy=Vs("tbody",null,null,-1);var Hy={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=so(),s=No(),o=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},i=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=va(null),u=i()||[0,"asc"];let d=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:o}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Hs(e,t,a);return n&&n._context&&(o.appContext=n._context),s?lr(o,s):"undefined"!=typeof document&&lr(o,s=document.createElement("div")),{vNode:o,destroy:()=>{s&&lr(null,s),s=null,o=null},el:s}}(t,{app:n?.appContext?.app,element:a});let i=$(d.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const f=()=>{null!=d&&d.ajax.reload()},v=e=>{DataTableUtils.deleteButtonHandlers(e)};let m=!1;const h=()=>{d.clear(),d.destroy(!0),m=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{v(e.handlerId)}))};return t({reload:f,delete_button_handlers:v,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=i(e),load_last_sort:i,save_last_sort:o,search_value:function(e){null!=d&&d.search(e).draw()}}),vn((()=>{1!=m&&h()})),(t,a)=>(Ps(),js(Ss,null,[(Ps(),js("div",zy,[Js(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns_config,(e=>(Ps(),js("th",By,te(e.columnName),1)))),256))])]),Vy],512)])],64))},__file:"http_src/vue/datatable.vue"};const Gy={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},Wy=["innerHTML"],Ky={class:""},Yy=["innerHTML"],Jy=["innerHTML"],Zy={class:"table table-striped table-bordered"},Xy=["innerHTML"],Qy=["colspan","innerHTML"];var ew={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Ps(),js(Ss,null,[Js(" Normal table "),e.horizontal&&0!=e.horizontal?(Ps(),js(Ss,{key:1},[Js(" Horizontal table, with th on the rows "),Vs("table",Zy,[Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Xy),(Ps(!0),js(Ss,null,En(t.values,(a=>(Ps(),js("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Qy)))),256))])))),256))])])],2112)):(Ps(),js("table",Gy,[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns,(t=>(Ps(),js("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,Wy)))),256))])]),Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",Ky,[1==e.wrap_columns?(Ps(!0),js(Ss,{key:0},En(e.columns,(a=>(Ps(),js("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Yy)],2)))),256)):(Ps(!0),js(Ss,{key:1},En(e.columns,(a=>(Ps(),js("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Jy)))),256))])))),256))])]))],2112))};lp("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),ew.__scopeId="data-v-0533335c",ew.__file="http_src/vue/bootstrap-table.vue";const tw=e=>(pl("data-v-937058e4"),e=e(),fl(),e),aw={class:"col-12 mb-2 mt-2"},lw={class:"card h-100 overflow-hidden"},nw=["title"],sw=[tw((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],ow=["title"],iw=[tw((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],rw=["title"],cw=[tw((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],uw=["title"],dw=[tw((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],_w={class:"form-group ms-1 me-1 mt-1"},pw={class:"inline select2-size me-2 mt-2"},fw={class:"inline select2-size me-2 mt-2"},vw={key:0,class:"mt-4 card card-shadow"},mw={class:"card-body"},hw={key:1,class:"mt-4 card card-shadow"},gw={class:"card-body"},bw={key:0,class:"inline select2-size me-2 mt-2"};var yw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;va({}),va(!1);const o=va([]),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va([]),f=va({});Vb.get_current_page_source_type();const m=va(!1);va(!1);const h=va([]),g=b.object_to_array(uy.groupsOptionsModesEnum),w=va(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return uy.getGroupOptionMode(e);return g[0]}());let k=null;const $={label:i18n("page_stats.custom_metrics"),currently_active:!1},S="timeseries",C=va(!1),N=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];J.forEach((t=>{t.va&&e.push(t)})),J=e}t.source_value_object.is_va&&(_.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Vb.get_current_page_source_type();Vb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Vb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Vb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Vb.get_default_timeseries_groups(http_prefix,e,t)}p.value=await E(a),f.value=1==a?$:Vb.get_default_metric(p.value,e,t);C.value=!0,await G(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));let A=null;async function E(e,l){let n=await Vb.get_metrics(http_prefix);if(!l&&A==e)return n.value;if(e&&n.push($),(null==q||l)&&(q=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${S}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){q.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function T(e){let t=Vb.get_current_page_source_type(),a=await Vb.get_default_source_array(http_prefix,t);return[Vb.get_ts_group(t,a,e)]}const P=async(e,t,a)=>{let l=Vb.get_source_type_from_id(e),n=await Vb.get_source_array_from_value_dict(http_prefix,l,t),s=await Vb.get_metric_from_schema(http_prefix,l,n,a);I(Vb.get_ts_group(l,n,s))},U=async(e,t)=>{let a=p.value.find((a=>a.schema==e&&a.query==t));null!=a?I((await T(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function I(e){c.value.set_timeseries_groups(k),c.value.add_ts_group(e,!0)}async function O(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Vb.get_timeseries_groups_from_url(http_prefix,a);w.value=uy.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await G(l,!0,!1)}else await async function(){let e=await async function(){return T(f.value)}();await G(e,!0,!1)}(),B(!1)}function M(e){let a=f.value.label==$.label;G(k,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=Y.value?.table_config_def;if(null==e)return;let a=W(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),B(a,!0)}function j(e){}function L(){u.value.show()}function R(){null!=k&&c.value.show(k)}function D(e){return async t=>h.value[e].chart_options}let F,q=null;function z(){B(f.value.label==$.label,!0)}async function B(e,t){p.value=await E(e,t),e&&(f.value=$)}async function V(e){B(!0),await G(e,!0,!0)}function H(){G(k,!1,!1)}async function G(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");F=await uy.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=uy.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,F);let r=uy.tsArrayToOptionsArray(F,e,w.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.series)}))}(r):function(e){h.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(m.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!m.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};Z.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=uy.getSerieId(e),i=s.metric.timeseries[o],r=v.getFormatter(s.metric.measure_unit),c=i.label;if(i.hidden)return;if(1==i.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=uy.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:v.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Z.value.push(d)}))}))}(F,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=k);null==a&&(a=y.get_status());let l=Vb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Vb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};K.value=[];for(let e in n){let o=n[e],i=uy.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=W(o,e.table_value,e.view,n,a),u=Vb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:U,add_ts_group_from_source_value_dict:P,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};K.value.push(f)}))}if(null!=Y.value&&K.value.find((e=>e.value==Y.value.value)))return;Y.value=K.value.find((e=>1==e.table_config_def.default)),null==Y.value&&(Y.value=K.value[0])}(e,s),k=e,x.set_key_to_url("timeseries_groups_mode",w.value.value),Vb.set_timeseries_groups_in_url(k)}function W(e,t,a,l,n){null==n&&(n=y.get_status());let s=uy.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const K=va([]),Y=va({});let J=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const Z=va([]);function X(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const Q=va(null);function ee(){Q.value.show()}function te(){if(!F?.length)return;let e=k[0],t=uy.getSerieName(null,null,e);d.value.show(t)}async function ae(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Ps(),js(Ss,null,[Vs("div",aw,[Hs(S_),Vs("div",lw,[Hs(E_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:M,min_time_interval_id:_.value,custom_time_interval_list:N},{begin:ml((()=>[])),extra_buttons:ml((()=>[e.enable_snapshots?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:L,title:l("page_stats.manage_snapshots_btn")},sw,8,nw)):Js("v-if",!0),e.traffic_extraction_permitted?(Ps(),js("button",{key:1,class:"btn btn-link btn-sm",onClick:ee,title:l("traffic_recording.pcap_download")},iw,8,ow)):Js("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",onClick:te,title:l("page_stats.title_modal_download_file")},cw,8,rw),e.is_history_enabled?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:l("page_stats.historical_flows")},dw,8,uw)):Js("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Js(" select metric "),wn(Vs("div",_w,[Vs("div",pw,[Hs(l_,{selected_option:f.value,"onUpdate:selected_option":a[0]||(a[0]=e=>f.value=e),options:p.value,onSelect_option:O},null,8,["selected_option","options"])]),Vs("div",fw,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":a[1]||(a[1]=e=>w.value=e),options:ya(g),onSelect_option:H},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),js("button",{key:0,type:"button",onClick:R,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Js("v-if",!0)],512),[[Ji,C.value]]),(Ps(!0),js(Ss,null,En(h.value,((e,t)=>(Ps(),Ls(Ng,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:D(t),onZoom:M,onChart_reloaded:j},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),m.value?(Ps(),js("div",vw,[Vs("div",mw,[Hs(ew,{id:"page_stats_bootstrap_table",columns:ya(J),rows:Z.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Js("v-if",!0),e.is_ntop_pro?(Ps(),js("div",hw,[Vs("div",gw,[Y.value?.table_config_def?(Ps(),js("div",bw,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":a[2]||(a[2]=e=>Y.value=e),options:K.value},null,8,["selected_option","options"])])):Js("v-if",!0),Y.value?.table_config_def?(Ps(),Ls(Hy,{key:Y.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:Y.value.table_config_def.table_button,columns_config:Y.value.table_config_def.columns_config,data_url:Y.value.table_config_def.data_url,enable_search:Y.value.table_config_def.enable_search,table_config:Y.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])):Js("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(nm,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:S,onAdded_snapshot:z,onDeleted_snapshots:z,onDeleted_all_snapshots:z},null,8,["csrf"])):Js("v-if",!0),e.is_ntop_pro?(Ps(),Ls(My,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:V},null,8,["sources_types_enabled"])):Js("v-if",!0),Hs(_v,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Q},null,512),Hs(qy,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:ae},null,8,["title"])],64))}};lp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),yw.__scopeId="data-v-937058e4",yw.__file="http_src/vue/page-stats.vue";var ww=Yl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const xw={class:"card-header mb-2"},kw={class:"nav nav-tabs card-header-tabs",role:"tablist"},$w=["onClick"],Sw=["onClick"];ww.render=function(e,t,a,l,n,s){return Ps(),js("div",xw,[Vs("ul",kw,[(Ps(!0),js(Ss,null,En(e.tab_list,(t=>(Ps(),js(Ss,null,[t.active?(Ps(),js("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,$w)):(Ps(),js("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,Sw))],64)))),256))])])},ww.__file="http_src/vue/tab-list.vue";var Cw={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);let s=va(""),o=va("");const i=()=>{a("delete"),r()},r=()=>{n.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,o.value=t):(s.value=l.body,o.value=l.title),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(s)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:i,class:"btn btn-danger"},te(c("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const Nw="change_asset_table_tab_event";var Aw={components:{datatable:Hy,"modal-delete-confirm":Cw,"tab-list":ww},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[4,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){N.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_asset_table_tab",Nw,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(Nw,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Ew={class:"row"},Tw={class:"col-md-12 col-lg-12"},Pw=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Uw={class:"card"},Iw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ow={class:"card-body"},Mw={id:"table_asset"},jw={class:"card-footer"},Lw={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Rw=Vs("i",{class:"fas fa-trash"},null,-1),Dw=["href"],Fw=[Vs("i",{class:"fas fa-download"},null,-1)];Aw.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable");return Ps(),js("div",Ew,[Vs("div",Tw,[Pw,Vs("div",Uw,[Iw,Vs("div",Ow,[Vs("div",Mw,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Ps(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0),"centrality"==n.asset_table_tab?(Ps(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0)])]),Vs("div",jw,[Vs("button",Lw,[Rw,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},Fw,8,Dw)])])])])},Aw.__file="http_src/vue/page-asset-table.vue";var qw={components:{datatable:Hy,"modal-delete-confirm":Cw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o={server:`${n}`,client:`${a}`,port:`${s}`},i=x.obj_to_url_params(o),r=`${http_prefix}/lua/flows_stats.lua?${i}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const zw={class:"row"},Bw={class:"col-md-12 col-lg-12"},Vw=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Hw={class:"card"},Gw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ww={class:"card-body"},Kw={id:"periodicity-table"},Yw={class:"card-footer"},Jw={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Zw=Vs("i",{class:"fas fa-trash"},null,-1),Xw=["href"],Qw=[Vs("i",{class:"fas fa-download"},null,-1)];qw.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("datatable");return Ps(),js("div",zw,[Vs("div",Bw,[Vw,Vs("div",Hw,[Gw,Vs("div",Ww,[Vs("div",Kw,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Yw,[a.is_admin?(Ps(),js("button",Jw,[Zw,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Js("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Qw,8,Xw)])])])])},qw.__file="http_src/vue/page-periodicity-table.vue";const ex={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},tx=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},ax=function(){return ex},lx="change_service_table_tab_event";var nx={components:{datatable:Hy,"modal-delete-confirm":Cw,"tab-list":ww},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){N.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_service_table_tab",lx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(lx,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{tx(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{tx(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{tx(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const sx={class:"row"},ox={class:"col-md-12 col-lg-12"},ix=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),rx={class:"card"},cx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ux={class:"card-body"},dx={id:"table_service"},_x={class:"card-footer"},px={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},fx=Vs("i",{class:"fas fa-trash"},null,-1),vx=["href"],mx=[Vs("i",{class:"fas fa-download"},null,-1)];nx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable");return Ps(),js("div",sx,[Vs("div",ox,[ix,Vs("div",rx,[cx,Vs("div",ux,[Vs("div",dx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Ps(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0),"centrality"==n.service_table_tab?(Ps(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0)])]),Vs("div",_x,[Js('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",px,[fx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},mx,8,vx)])])])])},nx.__file="http_src/vue/page-service-table.vue";const hx={key:0,class:"alert alert-info"},gx=["id"];var bx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},o=!1,i=null;const r=va(!1),c=va(!0),u=va(!1),d=va({}),_=va(null),p=va(null),f=va(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await v(),p.value=ax(),i=new vis.Network(e,_.value,p.value),g()})),vn((()=>{1!=u.value&&b()}));const v=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),m()}))},m=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{i.on("stabilizationIterationsDone",(function(){i.setOptions({physics:!1})})),i.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;o=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=i.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(i.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===o){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);o=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),i.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),N.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),i.on("afterDrawing",(function(e){N.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})i.on(e,a.event_listeners[e])},b=()=>{null!=i&&i.destroy(!0),u.value=!0},y=async()=>{await v(),null!=i&&(i.setOptions({physics:p.value.physics}),i.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=i?i instanceof vis.Network?i.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Ps(),js(Ss,null,[c.value?(Ps(),js("div",hx,te(e.empty_message),1)):Js("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,gx)],64))},__file:"http_src/vue/network-map.vue"},yx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=va(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Ks(te(e.body),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-primary"},te(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const wx="change_filter_event";var xx={components:{"network-map":bx,"modal-delete-confirm":Cw,"modal-autolayout-confirm":yx,"select-search":l_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",wx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(wx,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const kx={class:"row"},$x={class:"col-md-12 col-lg-12"},Sx={class:"card card-shadow"},Cx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nx={class:"card-body"},Ax={id:"table_service"},Ex={class:"d-flex align-items-center justify-content-end mb-2"},Tx=["title"],Px=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ux={class:"d-flex ms-auto"},Ix={class:"m-1"},Ox=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Mx=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),jx={class:"card-footer"},Lx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Rx=Vs("i",{class:"fas fa-trash"},null,-1),Dx=["href"],Fx=[Vs("i",{class:"fas fa-download"},null,-1)];xx.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",kx,[Vs("div",$x,[Vs("div",Sx,[Cx,Vs("div",Nx,[Vs("div",Ax,[Vs("div",Ex,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Px,8,Tx),Vs("div",Ux,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Ix,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Ox,Mx]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",jx,[Vs("button",Lx,[Rx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Fx,8,Dx)])])])])},xx.__file="http_src/vue/page-service-map.vue";const qx="change_filter_event";var zx={components:{"network-map":bx,"modal-delete-confirm":Cw,"modal-autolayout-confirm":yx,"select-search":l_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",qx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(qx,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Bx={class:"row"},Vx={class:"col-md-12 col-lg-12"},Hx={class:"card card-shadow"},Gx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Wx={class:"card-body"},Kx={id:"table_periodicity"},Yx={class:"d-flex align-items-center justify-content-end mb-2"},Jx=["title"],Zx=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Xx={class:"d-flex ms-auto"},Qx={class:"m-1"},ek=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),tk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),ak={class:"card-footer"},lk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},nk=Vs("i",{class:"fas fa-trash"},null,-1),sk=["href"],ok=[Vs("i",{class:"fas fa-download"},null,-1)];zx.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",Bx,[Vs("div",Vx,[Vs("div",Hx,[Gx,Vs("div",Wx,[Vs("div",Kx,[Vs("div",Yx,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Zx,8,Jx),Vs("div",Xx,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Qx,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),ek,tk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",ak,[Vs("button",lk,[nk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},ok,8,sk)])])])])},zx.__file="http_src/vue/page-periodicity-map.vue";const ik="change_filter_event";var rk={components:{"network-map":bx,"modal-delete-confirm":Cw,"modal-autolayout-confirm":yx,"select-search":l_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",ik,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(ik,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const ck={class:"row"},uk={class:"col-md-12 col-lg-12"},dk={class:"card card-shadow"},_k=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),pk={class:"card-body"},fk={id:"table_asset"},vk={class:"d-flex align-items-center justify-content-end mb-2"},mk=["title"],hk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],gk={class:"d-flex ms-auto"},bk={class:"m-1"},yk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),wk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),xk={class:"card-footer"},kk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},$k=Vs("i",{class:"fas fa-trash"},null,-1),Sk=["href"],Ck=[Vs("i",{class:"fas fa-download"},null,-1)];rk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",ck,[Vs("div",uk,[Vs("div",dk,[_k,Vs("div",pk,[Vs("div",fk,[Vs("div",vk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},hk,8,mk),Vs("div",gk,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",bk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),yk,wk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",xk,[Vs("button",kk,[$k,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},Ck,8,Sk)])])])])},rk.__file="http_src/vue/page-asset-map.vue";const Nk={class:"form-group mb-3 row"},Ak={class:"col-form-label col-sm-4"},Ek={class:"col-sm-7"},Tk=Vs("div",{class:"invalid-feedback"},null,-1),Pk={class:"form-group mb-3 row"},Uk={class:"col-form-label col-sm-4 pt-2"},Ik={class:"form-switch col-sm-7 pt-2 ps-3"},Ok={class:"col-form-label"};var Mk={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(null),o=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),i()},i=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",Nk,[Vs("label",Ak,te(e.body),1),Vs("div",Ek,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[Mi,l.value]]),Vs("small",null,te(e.list_notes),1),Tk])]),Vs("div",Pk,[Vs("label",Uk,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Ik,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[ji,n.value]])]),Vs("small",Ok,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Ks(te(r("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const jk={key:0,class:"form-group mb-3 row"},Lk={class:"col-form-label col-sm-4"},Rk={class:"col-sm-7"},Dk=["placeholder"],Fk={class:"form-group mb-3 row"},qk={class:"col-form-label col-sm-4"},zk={class:"col-sm-7"},Bk={class:"form-group mb-3 row"},Vk={class:"col-form-label col-sm-4 pt-2"},Hk={class:"form-switch col-sm-7 pt-2 ps-3"},Gk={class:"col-form-label"};var Wk={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(""),o=va(i18n("if_stats_config.custom_name")),i=va(null),r=e=>i18n(e),c=va([{id:"allowed",value:"allowed",label:r("allowed")},{id:"denied",value:"denied",label:r("denied")}]),u=va(!1),d=()=>{0==u.value?a("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),_()},_=()=>{i.value.close()};return t({show:e=>{if(null!=e){let t=null;c.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=c.value[0],u.value=!0;i.value.show()},close:_}),_n((()=>{})),(t,a)=>(Ps(),Ls(np,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[0==u.value?(Ps(),js(Ss,{key:0},[Ks(te(e.title),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:ml((()=>[0==u.value?(Ps(),js("div",jk,[Vs("label",Lk,te(r("edit_check.device_alias")),1),Vs("div",Rk,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,Dk),[[Mi,l.value]])])])):Js("v-if",!0),Vs("div",Fk,[Vs("label",qk,te(r("edit_check.device_status")),1),Vs("div",zk,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:c.value},null,8,["selected_option","options"])])]),Vs("div",Bk,[Vs("label",Vk,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Hk,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[ji,s.value]])]),Vs("small",Gk,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(r("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const Kk={class:"row"},Yk={class:"col-md-12 col-lg-12"},Jk=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Zk={class:"card"},Xk={class:"card-body"},Qk={key:0,class:"alert alert-info"},e$={id:"table_devices_vue"},t$=[Vs("i",{class:"fas fa-plus"},null,-1)],a$={class:"card-footer"},l$=Vs("i",{class:"fas fa-trash"},null,-1),n$=Vs("i",{class:"fas fa-edit"},null,-1);var s$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=e,a=va(),l=va(),n=va(),s=va(),o=va(),i=va("device_exclusions"),r=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,_=va(!1),p=e=>i18n(e);let f="",v="",m=p("edit_check.delete_all_device_exclusions"),h=p("edit_check.delete_all_device_exclusions_message"),g=p("edit_check.add_device_exclusion"),b=p("edit_check.add_device_exclusion_message"),y=p("edit_check.add_device_exclusion_notes"),w=p("edit_check.add_device_exclusion_list_notes"),x=p("edit_check.edit_device_exclusion"),k=p("edit_check.edit_all_devices_status"),$=p("edit_check.learning"),S=va(null),C=va(null);const N={csrf:t.context.csrf,ifid:t.context.ifid};function A(e){let t={click_button_edit_device:T,click_button_historical_flows:P,click_button_delete:E};null!=t[e.event_id]&&t[e.event_id](e)}async function E(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;S.value=e.row,v=t,f=i18n("edit_check.device_exclusion"),l.value.show(v,f)}async function T(e){C.value=e.row,o.value.show(C.value)}function P(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await L()}));const U=t.crsf,I=async function(){const e=S.value,t=NtopUtils.buildURL(c,{device:e.mac_address.mac});N.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,N),R()},O=async function(){n.value.show()},M=async function(){o.value.show()},j=async function(){const e=NtopUtils.buildURL(c,{device:"all"});await ntopng_utility.http_post_request(e,N),R()},L=async function(){(await ntopng_utility.http_request(d)).learning_done?_.value=!1:_.value=!0},R=async function(){await L(),a.value.refresh_table()};function D(){s.value.show()}const F=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(r,{...t});await ntopng_utility.http_post_request(a,N),R()},q=async function(e){let a=C.value;null!=a&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=a&&(e.mac=a.mac_address.mac),e.csrf=t.context.csrf;const l=NtopUtils.buildURL(u,{...e});await ntopng_utility.http_post_request(l,N),R()};function z(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=B(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=B(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=V(l),n=V(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function B(e){return e.split("host=")[1].split("'")[0]}function V(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const H=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{const a=p(e);return"allowed"==e?`<span class="badge bg-success" title="${a}">${a}</span>`:`<span class="badge bg-danger" title="${a}">${a}</span>`},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},G=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||t.context.ifid});const W=e=>e;return(e,t)=>(Ps(),js("div",Kk,[Vs("div",Yk,[Jk,Vs("div",Zk,[Vs("div",Xk,[_.value?(Ps(),js("div",Qk,te(ya($)),1)):Js("v-if",!0),Vs("div",e$,[Hs(Cw,{ref_key:"modal_delete_confirm",ref:l,title:ya(f),body:ya(v),onDelete:I},null,8,["title","body"]),Hs(Cw,{ref_key:"modal_delete_all",ref:n,title:ya(m),body:ya(h),onDelete:j},null,8,["title","body"]),Hs(Mk,{ref_key:"modal_add_device",ref:s,title:ya(g),body:ya(b),footer:ya(y),list_notes:ya(w),onAdd:F},null,8,["title","body","footer","list_notes"]),Hs(Wk,{ref_key:"modal_edit_device",ref:o,title:ya(x),title_edit_all:ya(k),onEdit:q},null,8,["title","title_edit_all"]),Hs(iv,{ref_key:"table_device_exclusions",ref:a,csrf:ya(U),table_id:i.value,f_map_columns:H,get_extra_params_obj:G,f_map_config:W,f_sort_rows:z,onCustom_event:A},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:D},t$,512)])),_:1},8,["csrf","table_id"])])]),Vs("div",a$,[Vs("button",{type:"button",onClick:O,class:"btn btn-danger me-1"},[l$,Ks(" "+te(p("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:M,class:"btn btn-secondary"},[n$,Ks(" "+te(p("edit_check.edit_all_devices_status")),1)])])])])]))},__file:"http_src/vue/page-device-exclusions.vue"},o$={components:{datatable:Hy},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const i$={class:"row"},r$={class:"col-md-12 col-lg-12"},c$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),u$={class:"card"},d$={class:"card-body"},_$={id:"table_host_tls"},p$={class:"card-footer"};o$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",i$,[Vs("div",r$,[c$,Vs("div",u$,[Vs("div",d$,[Vs("div",_$,[Hs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",p$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},o$.__file="http_src/vue/page-host-tls.vue";var f$={components:{datatable:Hy},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const v$={class:"row"},m$={class:"col-md-12 col-lg-12"},h$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),g$={class:"card"},b$={class:"card-body"},y$={id:"table_host_ssh"};f$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",v$,[Vs("div",m$,[h$,Vs("div",g$,[Vs("div",b$,[Vs("div",y$,[Hs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},f$.__file="http_src/vue/page-host-ssh.vue";const w$="change_map_event";var x$={components:{"page-periodicity-map":zx,"page-periodicity-table":qw,"page-asset-map":rk,"page-asset-table":Aw,"page-service-map":xx,"page-service-table":nx,"page-navbar":n_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",w$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(w$,e))}}};x$.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Ps(),js(Ss,null,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Js("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Js("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),js(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Js("v-if",!0)],64)):Js("v-if",!0)],64)},x$.__file="http_src/vue/page-home-map.vue";const k$=["width","height"],$$=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var S$={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=va(null),n=va({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let o=await s();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=i;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(o,i.width-10,i.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),js("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},$$,8,k$))]))}};lp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),S$.__file="http_src/vue/page-sankey.vue";const C$="change_applications_tab_event";var N$={components:{chart:N_,datatable:Hy,"modal-delete-confirm":Cw,"tab-list":ww},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){N.on_custom_event("change_applications_tab_event",C$,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(C$,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const A$={class:"row"},E$={class:"col-md-12 col-lg-12"},T$={class:"card"},P$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),U$={class:"card-body"},I$={id:"host_details_applications"},O$={class:"row mb-4 mt-4",id:"host_details_applications"},M$={class:"col-6"},j$={key:0,class:"widget-name"};N$.render=function(e,t,a,l,n,s){const o=kn("tab-list"),i=kn("chart"),r=kn("datatable");return Ps(),js("div",A$,[Vs("div",E$,[Vs("div",T$,[P$,Vs("div",U$,[Vs("div",I$,[Hs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",O$,[(Ps(!0),js(Ss,null,En(n.chart_options,(e=>(Ps(),js("div",M$,[e.tab==n.applications_tab?(Ps(),js("h3",j$,te(e.title),1)):Js("v-if",!0),e.tab==n.applications_tab?(Ps(),Ls(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Js("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Ps(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0),"categories"==n.applications_tab?(Ps(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])])])])},N$.__file="http_src/vue/page-host-details-applications.vue";const L$={class:"row"},R$={class:"col-md-12 col-lg-12"},D$={class:"card"},F$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),q$={class:"card-body"},z$={id:"host_details_traffic"},B$={class:"row mb-4 mt-4",id:"host_details_traffic"},V$={class:"col-4"},H$={class:"widget-name"};var G$={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=va(null);va([]);const a=va({}),l=()=>{t.value.reload()};dn((async()=>{!function(e){const t=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l()}});let s={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),mn((async()=>{t.value.destroy_table()}));const n=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Ps(),js("div",L$,[Vs("div",R$,[Vs("div",D$,[F$,Vs("div",q$,[Vs("div",z$,[Vs("div",B$,[(Ps(),js(Ss,null,En(n,(e=>Vs("div",V$,[Vs("h3",H$,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(Hy,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const W$={class:"row"},K$={class:"col-md-12 col-lg-12"},Y$={class:"card"},J$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Z$={class:"card-body"},X$={class:"row"},Q$={class:"col-6 mb-4 mt-4"},eS={class:"widget-name"};var tS={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Ps(),js("div",W$,[Vs("div",K$,[Vs("div",Y$,[J$,Vs("div",Z$,[Vs("div",X$,[(Ps(),js(Ss,null,En(t,(e=>Vs("div",Q$,[Vs("h3",eS,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const aS={key:0,class:"alert alert-info",id:"empty-message"},lS=["width","height"],nS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var sS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=10,o=va(!1),i=va(null),r=va({});function c(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&_()}dn((async()=>{})),_n((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),Ml((()=>l.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function _(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const o=function(){a("update_width");let e=l.width;null==e&&(e=$(i.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var c,_;r.value=o,c=o.width-10,_=o.height-5,u=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(s).extent([[0,5],[c,_]]),d=u(t);const{links:m,nodes:h}=d;let g=n.select(i.value).select("g.nodes").selectAll("g").data(h).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",v),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/h.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),g.data(h).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<o.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),g.call(n.drag().subject((e=>e)).on("start",p).on("drag",f));const b=n.select(i.value).select("g.links").selectAll("g").data(m).join((e=>e.append("g")));let y=b.append("linearGradient");y.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),y.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/h.length))),y.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/h.length))),b.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),b.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,o=r.value.width,i=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=s),t.x1>o&&(t.x0=o-s,t.x1=o),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),u.update(d),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function v({transform:e}){g.attr("transform",e)}const m=e=>i18n(e);return t({draw_sankey:_,set_no_data_flag:function(e){o.value=e}}),(t,a)=>(Ps(),js(Ss,null,[o.value?(Ps(),js("div",aS,te(e.no_data_message||m("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:i,width:r.value.width,height:r.value.height,style:{margin:"10px"}},nS,8,lS))])],64))}};lp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),sS.__file="http_src/vue/sankey.vue";const oS={class:"row"},iS={class:"col-md-12 col-lg-12"},rS={class:"card card-shadow"},cS={class:"card-body"},uS={class:"d-flex align-items-center mb-2"},dS={class:"d-flex no-wrap ms-auto"},_S={class:"m-1"},pS={style:{"min-width":"16rem"}},fS={class:"my-auto me-1"},vS=Vs("label",{class:"my-auto me-1"},null,-1),mS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var hS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=va(null),s=va(!1),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=va(o[3]),r=va({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let v=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:v}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),js("div",oS,[Vs("div",iS,[Vs("div",rS,[s.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",cS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",uS,[Vs("div",dS,[Vs("div",_S,[Vs("div",pS,[Vs("label",fS,te(a("hosts"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[vS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},mS)])])])]),Hs(sS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const gS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)},bS={key:0,class:"alert alert-info alert-dismissable"},yS=Vs("span",{class:"text-info me-1"},null,-1),wS={class:"form-group ms-2 me-2 mt-3 row"},xS={class:"col-form-label col-sm-2"},kS={class:"col-sm-10"},$S={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},SS={key:1,class:"form-group ms-2 me-2 mt-3 row"},CS={class:"col-form-label col-sm-2"},NS={class:"col-sm-10"},AS=["placeholder"],ES={key:2,class:"form-group ms-2 me-2 mt-3 row"},TS={class:"col-form-label col-sm-2"},PS={class:"col-sm-10"},US={key:3,class:"form-group ms-2 me-2 mt-3 row"},IS={class:"col-form-label col-sm-2"},OS={class:"col-sm-10"},MS={key:4,class:"form-group ms-2 me-2 mt-3 row"},jS={class:"col-form-label col-sm-2"},LS={class:"col-10"},RS={key:5,class:"form-group ms-2 me-2 mt-3 row"},DS={class:"col-form-label col-sm-2"},FS={class:"col-10"},qS={class:"col-form-label col-sm-2"},zS={class:"col-10"},BS={key:6,class:"form-group ms-2 me-2 mt-3 row"},VS={class:"col-form-label col-sm-2"},HS={key:0,class:"col-10"},GS={key:1,class:"col-10"},WS={key:2,class:"col-10"},KS={key:3,class:"col-10"},YS={key:4,class:"col-10"},JS={key:7,class:"form-group ms-2 me-2 mt-3 row"},ZS={class:"col-form-label col-sm-2"},XS={class:"col-10"},QS={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},eC={class:"col-form-label col-sm-2"},tC={class:"col-sm-3"},aC={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},lC=["value","id"],nC=["id","for"],sC=["value","id"],oC=["id","for"],iC=["value","id"],rC=["id","for"],cC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},uC=["value","id"],dC=["id","for"],_C={key:8,class:"message alert alert-warning mt-3"},pC=["disabled"],fC=["disabled"];var vC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");let s=va(!1),o=va(!1);const i=va(null);let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=va(!1),d=e=>i18n(e),_=va([]),p=va(null),f=va(null),v=va([]),m=va([]),h=va([]),g=va([]),b=va([]),y=va([]),w=va([]),x=va(null),k=va(null),S=va({}),C=va({}),N=va({}),A=va({}),E=va({}),T=va({}),P=va({}),U=va({}),I=va(!0),O=va({}),M=va(!0),j=va("hosts"),L=va(!1),R=va(!1),D=va(null),F=va(null),q=va(!1),z=va(null),B=va(null),V=va({}),H=va({}),G=va({}),W=va(null);let Y=va([]);const J=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4"),d("if_stats_config.note_5")],Z=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),X=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),Q=va([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),ee=va([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),ae=va([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),le=[{title:"+",label:"%",id:"plus",value:1,active:!0}],ne=va(null),se=va(null),oe={csrf:n.page_csrf};function ie(e){e.forEach((e=>e.active=1==e.default_active))}const re=e=>{j.value=e,Y.value=Z.value,"host_pool"==e||"CIDR"==e?(ce(),O.value="host_pool"==e?Y.value[1]:Y.value[0]):O.value=Z.value[0]},ce=e=>{let t=[];"host_pool"==j.value&&"bps"!=P.value.measure_unit||"CIDR"==j.value&&"bps"!=G.value.measure_unit?(X.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),Y.value=t):(X.value.forEach((e=>{"value"!=e.id&&t.push(e)})),Y.value=t),null!=e&&0!=e||(O.value=Y.value[0])},ue=()=>{let e=new RegExp(yp.get_data_pattern("ip"));I.value=!(e.test(ne.value)||"*"===ne.value)},de=e=>{const t=e.target.id;ae.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},_e=e=>{const t=e.target.id;"throughput"==O.value.id?ee.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==O.value.id?Q.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==O.value.id&&le.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},pe=e=>{let t="";"interface"!=j.value&&(t=ne.value);const a=C.value.id;let n=S.value.id,s=S.value.label;"interface"==j.value?(n=T.value.id,s=T.value.label):"host_pool"==j.value?(n=P.value.schema,s=P.value.label):"CIDR"==j.value&&(n=G.value.schema,s=G.value.label);const o=T.value.id,i=j.value,r=N.value.id,c=N.value.label;let u,d,_,p,f=O.value.id,v="Host"==j.value?S.value.extra_metric?S.value.extra_metric:null:T.value.extra_metric?T.value.extra_metric:null,m=e?F.value:null;!1===M.value&&(f="",v="",_=se.value.value),"throughput"==f?(ae.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),ee.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(se.value.value)):"volume"==f?(ae.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),Q.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(se.value.value)):("percentage"==f||"value"==f)&&(ae.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(se.value.value));let h="add";if(1==e&&(h="edit"),"Host"==j.value)l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m});else if("interface"==j.value)l(h,{frequency:a,metric:o,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,interface:r,ifname:c,rule_threshold_sign:p,rule_id:m});else if("exporter"==j.value){const e=E.value.id,t=E.value.label,n=A.value.id;let s;null!=e&&"*"!=e?y.value.forEach((e=>{"flowdev_port:traffic"==e.id&&(s=e)})):y.value.forEach((e=>{"flowdev:traffic"==e.id&&(s=e)}));let o=s.label;l(h,{host:n,frequency:a,metric:s.id,metric_label:o,threshold:_,metric_type:f,rule_type:i,interface:e,ifname:t,rule_threshold_sign:p,rule_id:m})}else if("CIDR"==j.value){t=H.value.id;const e=H.value.network_id;l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m,network:e})}else if("host_pool"==j.value){const e=V.value.id,t=V.value.label;l(h,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m})}},fe=()=>{pe(!0)};return dn((()=>{Z.value.forEach((e=>{e.active&&(O.value=e)})),q.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),R.value=!0,F.value=e.row_id,I.value=!1,ae.value.forEach((t=>{t.active=t.value==e.threshold_sign})),Z.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,O.value=t):t.active=!1})),Y.value=Z.value,"volume"==e.metric_type?Q.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,se.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?ee.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,se.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?se.value.value=e.threshold:"value"==e.metric_type&&(se.value.value=e.threshold*e.threshold_sign),j.value=e.rule_type,"interface"==j.value?(v.value.forEach((t=>{t.id==e.target&&(N.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==j.value?(m.value.forEach((t=>{t.id==e.target&&(A.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(E.value=t)}))):"Host"==j.value?(ne.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==j.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),ce(!0),Y.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"host_pool"==j.value&&(z.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(P.value=t)})),ce(),Y.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))))})(e):async function(){if(q.value=!1,ne.value="",j.value="Host",N.value=v.value[0],S.value=_.value[0],T.value=g.value[0],U.value=y.value[0],R.value=!1,r=i18n("if_stats_config.add_host_rules_title"),C.value=w.value[0],O.value=Z.value[0],A.value=m.value[0],null!=A.value){oe.csrf=D.value;const e=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?`+A.value.details.split("?")[1],{...oe});let t=[],l=[];await $.get(e,(function(e,a){t=e.rsp})),l.push({id:"*",value:"*",label:"*",timeseries_available:t[0].timeseries_available}),t.forEach((e=>{l.push({id:e.ifindex,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0].timeseries_available}Z.value.forEach((e=>e.active=!1)),Z.value[0].active=!0,null!=z.value&&(V.value=z.value[0]),P.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),ie(Q.value),ie(ee.value),ie(ae.value),j.value="Host",I.value=!0,se.value.value=1,F.value=null,Y.value=Z.value,"Host"==j||"interface"==j?O.vale=Z.value[0]:O.value=Y.value[0]}(),i.value.show()},close:()=>{R.value=!1,q.value=!1,i.value.close()},metricsLoaded:async(e,t,l,i,r,c,d,x,k,T,P,U)=>{if(u.value=!0,_.value=e,g.value=l,v.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t}(t),w.value=n.frequency_list,C.value=w.value[0],S.value=_.value[0],N.value=v.value[0],D.value=c,d&&(p.value=d),x&&(f.value=x),m.value=function(e){let t=[];return e.forEach((e=>{let a=e.column_ip.split("=")[2].split("&")[0],l={id:a,label:a,value:a,details:e.column_ip.split("'")[1]};t.push(l)})),t}(i),gS.isEmptyArrayOrNull(k)||(s.value=!0),z.value=k,b.value=P,gS.isEmptyArrayOrNull(T)||(o.value=!0),B.value=T,W.value=U,y.value=r,A.value=m.value[0],null!=A.value){oe.csrf=D.value;const e=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?`+A.value.details.split("?")[1],{...oe});let t=[],l=[];await $.get(e,(function(e,a){t=e.rsp})),l.push({id:"*",value:"*",label:"*",timeseries_available:t[0].timeseries_available}),t.forEach((e=>{l.push({id:e.ifindex,value:e.ifindex,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0].timeseries_available}},invalidAdd:()=>{q.value=!0}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[22]||(t[22]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[Ks(te(ya(r)),1)])),body:ml((()=>[q.value?(Ps(),js("div",bS,[yS,Vs("span",null,te(d("rule_already_present")),1)])):Js("v-if",!0),Js(" Target information, here an IP is put "),Vs("div",wS,[Vs("label",xS,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",kS,[Vs("div",$S,[Vs("label",{class:K(["btn",["Host"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>re("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>re("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Ps(),js("label",{key:0,class:K(["btn",["exporter"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>re("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Js("v-if",!0),1==ya(s)?(Ps(),js("label",{key:1,class:K(["btn",["host_pool"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>re("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Js("v-if",!0),1==ya(o)?(Ps(),js("label",{key:2,class:K(["btn",["CIDR"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>re("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Js("v-if",!0)])])]),"Host"==j.value?(Ps(),js("div",SS,[Vs("label",CS,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",NS,[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>ne.value=e),onInput:ue,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,AS),[[Mi,ne.value]])])])):Js("v-if",!0),"CIDR"==j.value?(Ps(),js("div",ES,[Vs("label",TS,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",PS,[Hs(l_,{selected_option:H.value,"onUpdate:selected_option":t[6]||(t[6]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Js("v-if",!0),"host_pool"==j.value?(Ps(),js("div",US,[Vs("label",IS,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",OS,[Hs(l_,{selected_option:V.value,"onUpdate:selected_option":t[7]||(t[7]=e=>V.value=e),options:z.value},null,8,["selected_option","options"])])])):Js("v-if",!0),"interface"==j.value?(Ps(),js("div",MS,[Vs("label",jS,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",LS,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:v.value},null,8,["selected_option","options"])])])):Js("v-if",!0),"exporter"==j.value&&1==L.value?(Ps(),js("div",RS,[Vs("label",DS,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",FS,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":t[9]||(t[9]=e=>A.value=e),options:m.value},null,8,["selected_option","options"])]),Vs("label",qS,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",zS,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[10]||(t[10]=e=>E.value=e),options:h.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value&&"exporter"!=j.value?(Ps(),js("div",BS,[Vs("label",VS,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==j.value?(Ps(),js("div",HS,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[11]||(t[11]=e=>S.value=e),onSelect_option:t[12]||(t[12]=e=>{1==S.value.show_volume?M.value=!0:M.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==j.value?(Ps(),js("div",GS,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[13]||(t[13]=e=>T.value=e),onSelect_option:t[14]||(t[14]=e=>{1==T.value.show_volume?M.value=!0:M.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==j.value?(Ps(),js("div",WS,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[15]||(t[15]=e=>U.value=e),options:y.value},null,8,["selected_option","options"])])):"host_pool"==j.value?(Ps(),js("div",KS,[Hs(l_,{selected_option:P.value,"onUpdate:selected_option":t[16]||(t[16]=e=>P.value=e),onSelect_option:t[17]||(t[17]=e=>ce()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==j.value?(Ps(),js("div",YS,[Hs(l_,{selected_option:G.value,"onUpdate:selected_option":t[18]||(t[18]=e=>G.value=e),onSelect_option:t[19]||(t[19]=e=>ce()),options:W.value},null,8,["selected_option","options"])])):Js("v-if",!0)])):Js("v-if",!0),Js(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Ps(),js("div",JS,[Vs("label",ZS,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",XS,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[20]||(t[20]=e=>C.value=e),options:w.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Threshold information, maximum amount of bytes "),Vs("div",QS,[Vs("label",eC,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),M.value?(Ps(),js(Ss,{key:0},[Vs("div",tC,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[21]||(t[21]=e=>O.value=e),options:ya(Y)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==O.value.id?"p-0":""]])},[Vs("div",aC,["throughput"==O.value.id?(Ps(!0),js(Ss,{key:0},En(ee.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,lC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:_e,for:e.id},te(e.label),11,nC)],64)))),256)):Js("v-if",!0),"percentage"==O.value.id?(Ps(),js(Ss,{key:1},En(le,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,sC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:_e,for:e.id},te(e.label),11,oC)],64)))),64)):Js("v-if",!0),"volume"==O.value.id?(Ps(!0),js(Ss,{key:2},En(Q.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,iC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:_e,for:e.id},te(e.label),11,rC)],64)))),256)):Js("v-if",!0)])],2),Vs("div",cC,[(Ps(!0),js(Ss,null,En(ae.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,uC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:de,for:e.id},te(e.label),11,dC)],64)))),256))])],64)):Js("v-if",!0),Vs("div",{class:K([M.value?"col-sm-2":"col-sm-8"])},["percentage"==O.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:se,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:se,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==O.value.id?(Ps(),js("div",_C,te(d("show_alerts.host_rules_percentage")),1)):Js("v-if",!0)])),footer:ml((()=>[Hs(dv,{note_list:J}),0==R.value?(Ps(),js("button",{key:0,type:"button",onClick:pe,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},te(d("add")),9,pC)):(Ps(),js("button",{key:1,type:"button",onClick:fe,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},te(d("apply")),9,fC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const mC={class:"row"},hC={class:"col-md-12 col-lg-12"},gC={class:"card"},bC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yC={class:"card-body"},wC={class:"mb-4"},xC={id:"host_rules"},kC={class:"card-footer"};var $C={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=va(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,v=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const m=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,h=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,g=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,b=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,y=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,w=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,x=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],k={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let S={},C=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let N=o("if_stats_config.delete_host_rules_description"),A=[],E=[],T=[],P=[],U=[],I=[],O=[],M=[],j=[];const L=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function R(e){await z(e)}const D=function(){const e=r.value;return r.value=null,e},F=function(){l.value.reload()},q=async function(){const e=i.value,t=a.buildURL(w,{...k,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){F()}))},z=async function(e){const t=a.buildURL(y,{...e}),l=await ntopng_utility.http_post_request(t,k);c.value=l.rsp,0==c.value?(s.value.close(),F()):s.value.invalidAdd()},B=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},V=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){F()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return a=t.rule_type&&"interface"==t.rule_type?t.selected_iface:!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type?"host_pool"==t.rule_type?t.host_pool_label:t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?t.target:t.target+" "+o("on_interface")+": "+t.flow_exp_ifid_name:t.target,a}(0,a)}},{columnName:o("if_stats_config.rule_type"),targets:2,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev_port:traffic"==t.metric&&(a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?A.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):E.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return L.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:5,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);return"*"==t.target||null==e?"":(t.metric_type&&"throughput"==t.metric_type?l=a.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?l=a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type&&(e<0&&(e*=-1),l=a.fpercent(e)),l)}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:o("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return B(a)}}],l={table_buttons:e,data_url:a.buildURL(b,k),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};S=l};return dn((async()=>{V(),await async function(){const e=a.buildURL(u,k);await $.get(e,(function(e,t){A=e.rsp}))}(),await async function(){const e=a.buildURL(g,k);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(d,k);await $.get(e,(function(e,t){E=e.rsp}))}(),await async function(){const e=a.buildURL(f,{...k});await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...k});await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(m,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),O=t}(),await async function(){const e=a.buildURL(_,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),T=t}(),await async function(){const e=a.buildURL(h,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),M=t}(),await async function(){const e=a.buildURL(p,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),j=t}(),s.value.metricsLoaded(A,P,E,U,I,t.page_csrf,null,null,O,M,T,j)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",mC,[Vs("div",hC,[Vs("div",gC,[bC,Vs("div",yC,[Vs("div",wC,[Vs("h4",null,te(o("if_stats_config.traffic_rules")),1)]),Vs("div",xC,[Hs(Cw,{ref_key:"modal_delete_confirm",ref:n,title:ya(C),body:ya(N),onDelete:q},null,8,["title","body"]),Hs(vC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(A),interface_metric_list:ya(E),frequency_list:L,init_func:D,onAdd:z,onEdit:R},null,8,["metric_list","interface_metric_list"]),Hs(Hy,{ref_key:"table_host_rules",ref:l,table_buttons:ya(S).table_buttons,columns_config:ya(S).columns_config,data_url:ya(S).data_url,enable_search:ya(S).enable_search,table_config:ya(S).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",kC,[Hs(dv,{note_list:x})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const SC={class:"row"},CC={class:"col-md-12 col-lg-12"},NC={class:"card"},AC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),EC={class:"card-body"},TC={id:"host_details_ports"},PC={class:"row mb-4 mt-4",id:"host_details_ports"},UC={class:"col-6"};var IC={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){va(null),va([]),va({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),mn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),js("div",SC,[Vs("div",CC,[Vs("div",NC,[AC,Vs("div",EC,[Vs("div",TC,[Vs("div",PC,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",UC,[Hs(ew,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const OC={class:"row"},MC={class:"col-12"},jC={class:"card"},LC={class:"card-body"},RC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},DC={class:"d-flex ms-auto flex-row-reverse"},FC=Vs("label",{class:"my-auto me-1"},null,-1),qC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],zC={key:0,class:"m-1"},BC={style:{"min-width":"14rem"}},VC={class:"my-auto me-1"};var HC={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=va(!1),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i="alerts-map",r={},c=va(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},d=function(){n.value=!0,c.value.update_chart(`${o}?${u()}`),n.value=!1},_=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(r.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},p=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${o}?${u()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),_n((()=>{n.value=!1})),(t,a)=>(Ps(),js("div",OC,[Vs("div",MC,[Vs("div",jC,[Vs("div",LC,[Vs("div",RC,[Vs("div",DC,[Vs("div",null,[FC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},qC)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",zC,[Vs("div",BC,[Vs("label",VC,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256))]),n.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",{id:i,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(N_,{ref_key:"bubble_chart",ref:c,id:i,chart_type:ya(s),base_url_request:o,get_params_url_request:u,get_custom_chart_options:_(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const GC={class:"row"},WC={class:"col-12"},KC={class:"card"},YC={class:"card-body"},JC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},ZC={class:"d-flex ms-auto flex-row-reverse"},XC=Vs("label",{class:"my-auto me-1"},null,-1),QC={class:"m-1"},eN={key:0,style:{"min-width":"18rem"}},tN={class:"my-auto me-1"};var aN={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o="alerts-map",i={},r=va(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),(t,a)=>(Ps(),js("div",GC,[Vs("div",WC,[Vs("div",KC,[Vs("div",YC,[Vs("div",JC,[Vs("div",ZC,[XC,(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js("div",QC,[e.length>0?(Ps(),js("div",eN,[Vs("label",tN,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:i[t],"onUpdate:selected_option":e=>i[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Js("v-if",!0)])))),256))]),Vs("div",{id:o,style:{height:"90%"}},[Hs(N_,{ref_key:"bubble_chart",ref:r,id:o,chart_type:ya(n),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const lN={class:"row"},nN={class:"col-md-12 col-lg-12"},sN={class:"card card-shadow"},oN={class:"card-body"},iN={class:"d-flex align-items-center flex-row-reverse mb-2"},rN=Vs("label",{class:"my-auto me-1"},null,-1),cN=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],uN={key:0,class:"m-1"},dN={style:{"min-width":"14rem"}},_N={class:"my-auto me-1"},pN=["title"],fN=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var vN={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=va(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=va(null),r=va(null),c=va(null),u=va(null),d=va({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=va(!1);function v(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),_n((()=>{y(),w(),g()}));const m=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Ps(),js("div",lN,[Vs("div",nN,[Vs("div",sN,[f.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",oN,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",iN,[Vs("div",null,[rN,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},cN)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,n)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",uN,[Vs("div",dN,[Vs("label",_N,te(l("ports_analysis."+t))+": ",1),Hs(l_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256)),1==n.value?(Ps(),js("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},fN,8,pN)):Js("v-if",!0)]),Hs(sS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:ya(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:v},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const mN={class:"row"},hN={class:"col-md-12 col-lg-12"},gN={class:"card card-shadow"},bN={class:"card-body"},yN={class:"d-flex align-items-center mb-2"},wN={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},xN={class:"my-auto me-1"},kN=["title"],$N=["onClick","title"];var SN={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=va(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];va(null);const o=va(),i=va([]),r=va([]),c=va("aggregated_live_flows"),u=xo((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=va(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return va(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){i.value=await h("overview"),v()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function v(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const m=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7==d.value.value&&null!=t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:7==d.value.value&&null!=t.srv_port?`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`:`${e.label} ${a} ${e.extra_labels}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Ps(),js("div",mN,[Vs("div",hN,[Vs("div",gN,[Vs("div",bN,[Vs("div",yN,[Vs("div",wN,[Vs("label",xN,te(n("criteria_filter"))+": ",1),Hs(l_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(iv,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:ya(u),table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(i.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:m(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,kN)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),v(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,$N)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const CN={id:"aggregated_live_flows"};var NN={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=va({}),l=va(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Ps(),js("div",CN,[Hs(Hy,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const AN={class:"container-fluid"},EN={class:"row form-group mb-3"},TN={class:"col col-md-12"},PN={class:"form-label"},UN={class:"row form-group mb-3"},IN={class:"col col-md-6"},ON={class:"form-label"},MN={class:"col col-md-6"},jN={class:"form-label"},LN={key:0},RN={key:1},DN=["pattern"],FN={class:"row form-group mb-3"},qN={class:"col col-md-6"},zN={class:"form-label"},BN={class:"col col-md-6"},VN={class:"form-label"},HN={key:0},GN={key:1},WN=["pattern"],KN={class:"row form-group mb-3"},YN={class:"col col-md-12"},JN={class:"form-label"},ZN={class:"row form-group mb-3"},XN={class:"col col-md-12"},QN={class:"form-label"},eA=["disabled"];var tA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let i="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=va({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=va({}),p=va(0),f=va(0),v=va({}),m=va(""),h=va(""),g=va({}),y=va(""),w=va(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=va([]),S=va({}),C=va({}),N=va(""),A=xo((()=>I(v.value,h.value,m.value))),E=xo((()=>I(g.value,w.value,y.value))),T=va(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==v.value.value?(await M(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",j(m,v.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await M(),C.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function I(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let O=!1;async function M(){if(1==O)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}function j(e,t){e.value=yp.get_data_pattern(t)}const L=()=>{let e=v.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=C.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},o="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,o="edit"),a(o,s),R()},R=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),N.value=l("edit"),v.value=o.find((t=>t.value==e.source.type)),g.value=o.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),N.value=l("add");let e=o.find((e=>1==e.default));v.value=e,g.value=e,c.value=r.find((e=>e.value==i)),_.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),n.value.show()},close:R}),_n((()=>{})),(e,t)=>(Ps(),Ls(np,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Vs("div",AN,[Js(" Rule ID "),wn(Vs("div",EN,[Vs("div",TN,[Vs("label",PN,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[Mi,f.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[Mi,p.value]])])],512),[[Ji,!T.value]]),Js(" Source "),Vs("div",UN,[Vs("div",IN,[Vs("label",ON,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[2]||(t[2]=e=>v.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:o},null,8,["selected_option"])]),Vs("div",MN,[Vs("label",jN,te(l("nedge.page_rules_config.source")),1),"interface"==v.value.value?(Ps(),js("div",LN,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",RN,[wn(Vs("input",{type:"text",class:"form-control",pattern:m.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,DN),[[Mi,h.value]])]))])]),Js(" Dest "),Vs("div",FN,[Vs("div",qN,[Vs("label",zN,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:o},null,8,["selected_option"])]),Vs("div",BN,[Vs("label",VN,te(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Ps(),js("div",HN,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[8]||(t[8]=e=>C.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",GN,[wn(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,WN),[[Mi,w.value]])]))])]),Js(" Direction "),Vs("div",KN,[Vs("div",YN,[Vs("label",JN,te(l("nedge.page_rules_config.direction")),1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Js(" Action "),Vs("div",ZN,[Vs("div",XN,[Vs("label",QN,te(l("nedge.page_rules_config.action")),1),Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:!ya(A)||!ya(E),onClick:L,class:"btn btn-primary"},te(N.value),9,eA)])),_:1},512))}};lp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),tA.__scopeId="data-v-50692d68",tA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const aA={class:"container-fluid"},lA={class:"row form-group mb-3"},nA={class:"col col-md-12"},sA={class:"form-label"};var oA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],i=va({}),r=()=>{l.value.close()};function c(){a("apply",i.value.value),r()}return t({show:e=>{i.value=o.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Ps(),Ls(np,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(s)),1)])),body:ml((()=>[Vs("div",aA,[Js(" Default Policy "),Vs("div",lA,[Vs("div",nA,[Vs("label",sA,te(n("nedge.page_rules_config.default policy")),1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const iA={class:"mb-2"},rA=Vs("br",null,null,-1),cA={class:"d-inline-block"},uA={key:0,style:{color:"green"}},dA={key:1,style:{color:"red"}},_A=[Vs("i",{class:"fas fa-cog"},null,-1)],pA={id:"aggregated_live_flows"};var fA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=va({}),s=va(null),o=va(null),i=va(null),r=va({});function c(e){p(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function u(e){p(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function d(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}r.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function _(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),d(e),m()}function p(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),m()}function f(){i.value.show(r.value)}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){m()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null,r.value)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return v(a)}}),i.columns_config=c,n.value=i}(),d()}));const v=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),m()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function m(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",iA,[Vs("h2",null,te(a("nedge.rules_config_title")),1),rA,Vs("h5",cA,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==r.value?.value?(Ps(),js("span",uA,te(r.value?.label),1)):Js("v-if",!0),"deny"==r.value?.value?(Ps(),js("span",dA,te(r.value?.label),1)):Js("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:f},_A)])])]),Vs("div",pA,[Hs(Hy,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(tA,{ref_key:"modal_add_rule_config",ref:o,onAdd:u,onEdit:c},null,512),Hs(oA,{ref_key:"modal_change_default_policy",ref:i,onApply:_},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const vA={key:0,class:"form-group ms-2 me-2 mt-3 row"},mA={class:"col-form-label col-sm-4"},hA={class:"col-8"},gA={key:1,class:"form-group ms-2 me-2 mt-3 row"},bA={class:"col-form-label col-sm-4"},yA={class:"col-8"},wA={class:"form-group ms-2 me-2 mt-3 row"},xA={class:"col-form-label col-sm-4"},kA={class:"col-8"},$A=["placeholder"],SA=["disabled"],CA=["disabled"];var NA={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(!1),s=e=>i18n(e),o=va(!0);let i=va(i18n("add_application"));const r=va(i18n("details.custom_rules_placeholder")),c=va({}),u=va([]),d=va(""),_=va(""),p=va(null);va({});const f=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const v=()=>{1==m()&&1==h()?o.value=!1:o.value=!0},m=()=>/^[A-Za-z0-9]*$/.test(_.value),h=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},g=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),b()},b=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,i.value=i18n("add_application"),null!=e&&(p.value=e.application_id,_.value=e.application,n.value=!0,i.value=`${i18n("edit_application")}: ${_.value}`,(e=>{let t=null;u.value.forEach((a=>{a.id==e.category_id&&(t=a)})),c.value=t,d.value=e.custom_rules})(e)),l.value.show(),v()},close:b,loadCategoryList:e=>{u.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(i)),1)])),body:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,p.value]]),0==n.value?(Ps(),js("div",vA,[Vs("label",mA,[Vs("b",null,te(s("app_name")),1)]),Vs("div",hA,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:v,spellcheck:"false"},null,544),[[Mi,_.value]])])])):(Ps(),js("div",gA,[Vs("label",bA,[Vs("b",null,te(s("category")),1)]),Vs("div",yA,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",wA,[Vs("label",xA,[Vs("b",null,te(s("category_custom_rule")),1)]),Vs("div",kA,[wn(Vs("textarea",{class:"form-control",onInput:v,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,$A),[[Mi,d.value]])])])])),footer:ml((()=>[Hs(dv,{note_list:f}),0==n.value?(Ps(),js("button",{key:0,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("add")),9,SA)):(Ps(),js("button",{key:1,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("apply")),9,CA))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},AA={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=va(null);let o=va(i18n("custom_categories.delete_app"));const i=i18n("custom_categories.delete_app_confirm"),r=()=>{a("remove",{protocol_alias:s.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(s.value=e.application,o.value=`${i18n("custom_categories.delete_app")}: ${s.value}`),l.value.show()},close:c}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(i)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(n("delete")),1)])),default:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,s.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const EA=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var TA={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=va(null),l=va(null),n=va(null),s=va({}),o=va([]),i=va(null),r=va(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},v=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},m=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dn((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){m()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},l=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return b(a)}}],n=ntopng_utility.clone(a);n.columns_config=l,s.value=n}()})),_n((async()=>{await(async()=>{await $.get(u,(function(e,t){o.value=e.rsp})),n.value.loadCategoryList(o.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{a.value.search_value(e)})(e)})),mn((async()=>{a.value.destroy_table()}));const b=function(e){const t=[{class:"pointer",handler:{handlerId:"edit_rule",onClick:()=>{m(e)}},icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let a={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};t.push({class:"pointer",handler:a,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(t)};return(t,u)=>(Ps(),js(Ss,null,[EA,wn(Vs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},te(ya(c)),513),[[Ji,!r.value]]),Hs(NA,{ref_key:"modal_add_application",ref:n,category_list:o.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:v},null,8,["category_list","page_csrf","ifid"]),Hs(AA,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Hs(Hy,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const PA={class:"row"},UA={class:"col-12"},IA={class:"card card-shadow"},OA={class:"card-body"},MA={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},jA={key:2,class:"alert alert-info alert-dismissable"},LA=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),RA=["innerHTML"],DA=["innerHTML"];var FA={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=va(!1),l=i18n("map_page.fetch_error"),n=va(!1),s=va(null),o=va({}),i=va(null),r=va(""),c=i18n("discover.network_discovery_not_enabled"),u=va(!1),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=va(!1);let f;const v=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],m=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value=!1,await $.get(NtopUtils.buildURL(m,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(n.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(v.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(v.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(v.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(v.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))},y=()=>{s.value.reload()};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){y()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value=!1,$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,o.value=l}()})),mn((async()=>{s.value.destroy_table()})),(e,t)=>(Ps(),js("div",PA,[Vs("div",UA,[Vs("div",IA,[u.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",OA,[a.value?(Ps(),js("div",MA,te(ya(l)),1)):Js("v-if",!0),n.value?(Ps(),js("div",jA,[LA,Ks(" "+te(ya(c))+" ",1),Vs("span",{innerHTML:i.value},null,8,RA)])):(Ps(),Ls(Hy,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:o.value.table_buttons,columns_config:o.value.columns_config,data_url:o.value.data_url,enable_search:o.value.enable_search,table_config:o.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(dv,{note_list:v}),Js(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:r.value},null,8,DA)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const qA={class:"row"},zA={class:"col-md-12 col-lg-12"},BA={class:"card card-shadow"},VA={class:"card-body"},HA=Vs("div",{class:"d-flex align-items-center"},null,-1);var GA={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=va({}),o=va(!1),i=function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)},r=()=>{o.value=!0,l.value.reload(),o.value=!1};dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){r()}});let t={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},l=[];l.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>i(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),t.columns_config=l,s.value=t}()}));const c=function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])};return(e,t)=>(Ps(),js("div",qA,[Vs("div",zA,[Vs("div",BA,[Vs("div",VA,[o.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([o.value?"ntopng-gray-out":""])},[(Ps(),Ls(Hy,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:ml((()=>[HA])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const WA={class:"form-group ms-2 me-2 mt-3 row"},KA={class:"col-form-label col-sm-2"},YA={class:"col-sm-10"},JA={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},ZA={class:"form-group ms-2 me-2 mt-3 row"},XA={class:"col-form-label col-sm-2"},QA={class:"col-10"},eE={key:0,class:"form-group ms-2 me-2 mt-3 row"},tE={class:"col-form-label col-sm-2"},aE={class:"col-10"},lE={class:"form-group ms-2 me-2 mt-3 row"},nE={class:"col-form-label col-sm-2"},sE={class:"col-10"},oE={class:"form-group ms-2 me-2 mt-3 row"},iE={class:"col-form-label col-sm-2"},rE={class:"col-10"},cE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},uE={class:"col-form-label col-sm-2"},dE={class:"col-sm-3"},_E={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},pE=["value","id"],fE=["id","for"],vE=["value","id"],mE=["id","for"],hE=["value","id"],gE=["id","for"],bE={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},yE=["value","id"],wE=["id","for"],xE={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},kE=["value","id"],$E=["id","for"],SE={key:1,class:"message alert alert-warning mt-3"},CE=["disabled"],NE=["disabled"];var AE={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");const s=va(null),o=e=>i18n(e);va(null),va(null);const i=va([]),r=va([]);let c=va([]),u=va(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=va([]),p=va(null),f=va(null),v=va({}),m=va({}),h=va({}),g=va({}),b=va({}),y=va(!0),w=va({}),x=va(!0),k=va("snmp"),S=va(!1),C=va(null);let N=va([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4"),o("if_stats_config.note_5")],T=va([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),P=va([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),U=va([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),I=va([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),O=va([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],j=va(null),L=va(null),R={csrf:n.page_csrf};function D(e){e.forEach((e=>e.active=1==e.default_active))}const F=e=>{const t=e.target.id;I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?P.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function z(e){const t=a.buildURL(d+"?host="+m.value.label_to_insert,R);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==m.value.label_to_insert?u.value=!1:u.value=!0}function B(){let e=[];"packets"==g.value.id?T.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?T.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):T.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),N.value=e}const V=e=>{"snmp"==k.value&&j.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=m.value.label_to_insert,o=m.value.label,i=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=L.value.value),"throughput"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)/8):"volume"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),P.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)):"percentage"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(L.value.value),u="%"):(p=1,_=parseInt(L.value.value));let v="add";1==e&&(v="edit"),l(v,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:L.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),G()},H=()=>{V(!0)},G=()=>{s.value.close()};return dn((()=>{T.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(m.value=t)})),I.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?P.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):L.value.value=e.threshold,B(),N.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(m.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),z(e.device_port))})(e):async function(){S.value||(j.value="",v.value=i.value[0],m.value=null,m.value=r.value[0],z(),g.value=i.value[0],B(),b.value=_.value[0],w.value=T.value[0],T.value.forEach((e=>e.active=!1)),T.value[0].active=!0,D(P.value),D(U.value),D(I.value),k.value="snmp",y.value=!0,u.value=!1,L.value.value=1)}(),s.value.show()},close:G,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=n.frequency_list,b.value=_.value[0],v.value=i.value[0],C.value=a}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(ya(A)),1)])),body:ml((()=>[Js(" Target information, here an IP is put "),Vs("div",WA,[Vs("label",KA,[Vs("b",null,te(o("if_stats_config.add_rules_type")),1)]),Vs("div",YA,[Vs("div",JA,[Vs("label",{class:K(["btn",["snmp"==k.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"snmp",onClick:t[0]||(t[0]=e=>{return t="snmp",void(k.value=t);var t})}),Ks(" "+te(o("if_stats_config.add_rules_type_snmp")),1)],2)])])]),Vs("div",ZA,[Vs("label",XA,[Vs("b",null,te(o("if_stats_config.snmp_device")),1)]),Vs("div",QA,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[1]||(t[1]=e=>m.value=e),onSelect_option:t[2]||(t[2]=e=>z()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Ps(),js("div",eE,[Vs("label",tE,[Vs("b",null,te(o("if_stats_config.snmp_interface")),1)]),Vs("div",aE,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":t[3]||(t[3]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Js("v-if",!0),Vs("div",lE,[Vs("label",nE,[Vs("b",null,te(o("if_stats_config.metric")),1)]),Vs("div",sE,[Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[4]||(t[4]=e=>g.value=e),onSelect_option:t[5]||(t[5]=e=>B()),options:i.value},null,8,["selected_option","options"])])]),Js(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",oE,[Vs("label",iE,[Vs("b",null,te(o("if_stats_config.frequency")),1)]),Vs("div",rE,[Hs(l_,{selected_option:b.value,"onUpdate:selected_option":t[6]||(t[6]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Js(" Threshold information, maximum amount of bytes "),Vs("div",cE,[Vs("label",uE,[Vs("b",null,te(o("if_stats_config.threshold")),1)]),x.value?(Ps(),js(Ss,{key:0},[Vs("div",dE,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[7]||(t[7]=e=>w.value=e),options:ya(N)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",_E,["throughput"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:0},En(U.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,pE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,fE)],64)))),256)):Js("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Ps(),js(Ss,{key:1},En(M,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,vE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,mE)],64)))),64)):Js("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:2},En(P.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,hE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,gE)],64)))),256)):Js("v-if",!0)])],2),"packets"!=w.value.id?(Ps(),js("div",bE,[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,yE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},te(e.label),11,wE)],64)))),256))])):(Ps(),js("div",xE,[(Ps(!0),js(Ss,null,En(O.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,kE),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,$E)],64)))),256))]))],64)):Js("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==w.value.id?(Ps(),js("div",SE,te(o("show_alerts.host_rules_percentage")),1)):Js("v-if",!0)])),footer:ml((()=>[Hs(dv,{note_list:E}),0==S.value?(Ps(),js("button",{key:0,type:"button",onClick:V,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},te(o("add")),9,CE)):(Ps(),js("button",{key:1,type:"button",onClick:H,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},te(o("apply")),9,NE))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const EE={class:"row"},TE={class:"col-md-12 col-lg-12"},PE={class:"card"},UE=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),IE={class:"card-body"},OE={class:"mb-4"},ME={id:"host_rules"},jE={class:"card-footer"};var LE={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],v={ifid:t.ifid,csrf:t.page_csrf};let m={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await C(),await N(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},C=async function(){const e=i.value,t=a.buildURL(p,{...v,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},N=async function(e){const t=a.buildURL(_,{...v,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,v),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};m=l};return dn((async()=>{E(),await async function(){const e=a.buildURL(c,v);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){v.verbose=!0;const e=a.buildURL(u,v);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",EE,[Vs("div",TE,[Vs("div",PE,[UE,Vs("div",IE,[Vs("div",OE,[Vs("h4",null,te(o("if_stats_config.snmp_rules")),1)]),Vs("div",ME,[Hs(Cw,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:C},null,8,["title","body"]),Hs(AE,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:N,onEdit:x},null,512),Hs(Hy,{ref_key:"table_host_rules",ref:l,table_buttons:ya(m).table_buttons,columns_config:ya(m).columns_config,data_url:ya(m).data_url,enable_search:ya(m).enable_search,table_config:ya(m).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",jE,[Hs(dv,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"},RE={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return _n((async()=>{Wd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Ps(),js(Ss,null,[Ks(" Ciao Mondo "),Hs(dv,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const DE={class:"row"},FE={class:"col-md-12 col-lg-12"},qE={class:"card card-shadow"},zE={class:"card-body"},BE={class:"d-flex mb-3"},VE={class:"d-flex align-items-center ml-2 mb-2"},HE={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},GE={class:"my-auto me-1"},WE={class:"d-flex align-items-center mb-2"},KE={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},YE={class:"my-auto me-1"},JE={class:"d-flex align-items-center mb-2"},ZE={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},XE={class:"my-auto me-1"},QE=["title"],eT=["onClick","title"];var tT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=va([]),n=va([]);va({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),o=[{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1},{label:s("tcp"),value:6,param:"client",table_id:"tcp_ports_analysis",enterprise_m:!1}],i=va(o[0]),r=va("server_ports_analysis"),c=va({}),u=va({}),d=va();let _=va([]),p=va([]);const f=function(){if(t.is_ntop_enterprise_m)return va(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();_n((async()=>{!async function(e){l.value=await w("overview"),N()}();let e=x.get_url_entry("port"),t=x.get_url_entry("protocol");const a=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=t&&0!=t.localeCompare("")&&null!=a&&0!=a.localeCompare("")?(e=Number(e),t=Number(t),o.forEach((e=>{e.value==t&&(i.value=e)})),await A(!1,a,e)):(i.value=o[0],await A(!1),d.value.refresh_table())}));const v=()=>x.get_url_object();async function m(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=v(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){C(e.row.ip)}const C=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function N(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name.split(".")[0];s.push({label:e.srv_port+"/"+t+" ("+e.n_hosts+")",id:e.srv_port,application:t,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{null==p.value.find((t=>0==t.id.localeCompare(e.application)))&&p.value.push({label:e.application,id:e.application,value:e.application})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||null!=t||(u.value=p.value[0]),e||null==t||p.value.forEach((e=>{e.label==t&&(u.value=e)})),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),null!=a?_.value.forEach((e=>{e.id==a&&(c.value=e)})):c.value=_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return U(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},U=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Ps(),js("div",DE,[Vs("div",FE,[Vs("div",qE,[Vs("div",zE,[Vs("div",BE,[Vs("div",VE,[Vs("div",HE,[Vs("label",GE,te(s("protocol"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":a[0]||(a[0]=e=>i.value=e),options:ya(f),onSelect_option:m},null,8,["selected_option","options"])])]),Vs("div",WE,[Vs("div",KE,[Vs("label",YE,te(s("application"))+": ",1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",JE,[Vs("div",ZE,[Vs("label",XE,te(s("db_search.tags.srv_port"))+": ",1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(iv,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:v,onCustom_event:$},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(l.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,QE)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),N(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,eT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const aT={class:"container-fluid"},lT={class:"row form-group mb-3"},nT={class:"col col-md-6"},sT={class:"form-label"},oT={class:"row form-group mb-3"},iT={class:"col col-md-6"},rT={key:0},cT={class:"col-form-label col-sm-10"},uT=["placeholder"],dT={class:"row form-group mb-3"},_T={class:"col col-md-6"},pT={key:0},fT={class:"col-form-label col-sm-10"},vT=["placeholder"],mT={class:"row form-group mb-3"},hT={class:"col col-md-6"},gT={class:"col-form-label col-sm-10"},bT=["disabled"];var yT={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=va(null),i=va(null),r=va(null),c=va({value:"mdns",label:"MDNS"}),u=va(null),d=()=>{let e=new RegExp(yp.get_data_pattern("ip"));m.value=!(e.test(i.value)||"*"===i.value)},_=()=>{m.value=r<1||r>65535},p=va(""),f=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],v=va(0),m=va(!0),h=va(!0),g=va({}),y=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let w;const x=va([]),k=va([]),$=va(""),S=e=>{k.value=e,h.value=e.length<2},C=e=>{},N=e=>{},A=va(!0);async function E(e){c.value=g.value,"custom"==c.value.value&&await P()}let T=!1;async function P(){if(1==T)return;null==w&&(w=b.http_request(y));let e=await w;x.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),T=!0}const U=()=>{let e=c.value.label,t={repeater_type:e};if("custom"==c.value.value){t={repeater_type:e,ip:i.value,port:r.value}}let l="add";0==A.value&&(t.repeater_id=v.value,l="edit");let n="",s="";k.value.forEach((e=>{n+=e.value+",",e.value==e.label||e.label.includes(e.value)?s+=e.label+",":s+=e.label+" ("+e.value+"),"})),t.interfaces=n,t.interface_details=s,a(l,t),I()},I=()=>{o.value.close()};return t({show:e=>{!function(e){A.value=null==e,0==A.value?(p.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),$.value=l("edit"),v.value=e.repeater_id,f.forEach((t=>{t.label==e.type&&(g.value=t)})),"custom"==g.value.value&&(i.value=e.ip,r.value=e.port),E()):(p.value=l("nedge.page_rules_config.modal_rule_config.title_add"),$.value=l("add"),f.find((e=>1==e.default)));if(0==A.value){const t=e.interfaces.split(",");let a=[];x.value.forEach((function(e){e.selected=!1,t.find((t=>t==e.value))&&(e.selected=!0),a.push(e)})),u.value.update_multiple_values(a)}}(e),o.value.show()},close:I}),_n((async()=>{await P()})),(e,t)=>(Ps(),Ls(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(p.value),1)])),body:ml((()=>[Vs("div",aT,[Js(" Repeater Type "),Vs("div",lT,[Vs("div",nT,[Vs("label",sT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[0]||(t[0]=e=>g.value=e),onSelect_option:t[1]||(t[1]=e=>E()),options:f},null,8,["selected_option"])])]),Js(" IP "),Vs("div",oT,[Vs("div",iT,["custom"==g.value.value?(Ps(),js("div",rT,[Vs("label",cT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>i.value=e),onInput:d,class:"form-control",type:"text",placeholder:ya(n),required:""},null,40,uT),[[Mi,i.value]])])):Js("v-if",!0)])]),Js(" Port "),Vs("div",dT,[Vs("div",_T,["custom"==g.value.value?(Ps(),js("div",pT,[Vs("label",fT,[Vs("b",null,te(l("nedge.page_repeater_config.port")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>r.value=e),onInput:_,class:"form-control",type:"text",placeholder:ya(s),required:""},null,40,vT),[[Mi,r.value]])])):Js("v-if",!0)])]),Vs("div",mT,[Vs("div",hT,[Vs("label",gT,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Hs(l_,{ref_key:"interfaces_search",ref:u,options:x.value,multiple:!0,onSelect_option:C,onUnselect_option:N,onChange_selected_options:S},null,8,["options"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:h.value||m.value&&"custom"==c.value,onClick:U,class:"btn btn-primary"},te($.value),9,bT)])),_:1},512))}};lp("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),yT.__scopeId="data-v-5b3dc248",yT.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const wT={class:"mb-2"},xT=Vs("br",null,null,-1),kT={id:"aggregated_live_flows"};var $T={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=va({}),s=va(null),o=va(null);function i(e){c(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function r(e){c(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function c(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),_()}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){_()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return u(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return d(a)}}),i.columns_config=r,n.value=i}()}));const u=function(e,t){if(e){return e.replace(/.$/,"")}return e};const d=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),_()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function _(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",wT,[Vs("h2",null,te(a("nedge.repeaters_config_title")),1),xT]),Vs("div",kT,[Hs(Hy,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(yT,{ref_key:"modal_add_repeater_config",ref:o,onAdd:r,onEdit:i},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const ST={key:0,class:"text-left"};var CT={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(""),i=va(""),r=va(!1),c=va(!1),u=va({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,o.value=t,s.value.show()},close:_}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_inactive_host_title")),1)])),body:ml((()=>[Ks(te(o.value)+" ",1),r.value?(Ps(),js("div",ST,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Js("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const NT={class:"mt-3",style:{"max-width":"8rem"}},AT={key:0,class:"text-left"};var ET={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);va("csv");const s=va(),o=va(""),i=va(!1),r=va(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=va();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,i.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:u},{title:ml((()=>[Ks(te(n("delete")),1)])),body:ml((()=>[Ks(te(n("delete_since"))+" ",1),Vs("div",NT,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),i.value?(Ps(),js("div",AT,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Js("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const TT={class:"mt-3",style:{"max-width":"8rem"}};var PT={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);va("csv");const n=va(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=va();function i(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}_n((()=>{n.value=s[0]}));const c=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:c}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(l("download")),1)])),body:ml((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",TT,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:i},null,8,["selected_option"])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const UT={class:"row"},IT={class:"col-md-12 col-lg-12"},OT={class:"card card-shadow"},MT={class:"card-body"},jT={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},LT={class:"col-4"},RT={class:"widget-name"},DT=["title"],FT=["onClick","title"],qT={class:"card-footer mt-3"},zT=Vs("i",{class:"fas fa-trash"},null,-1),BT=Vs("i",{class:"fas fa-trash"},null,-1),VT=[Vs("i",{class:"fas fa-download"},null,-1)];var HT={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=va("inactive_hosts");va(a("local_hosts_only"));const n=va([]),s=va([]),o=va(),i=va(),r=va(),c=va(),u=va(),d=va(),_=va(),p=va(!1),f=va();va();const v="change_applications_tab_event",m=va({csrf:t.csrf,ifid:t.ifid}),h=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],g=va([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",v,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await w("overview"),b()}()}));function b(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function y(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),s.value[t].load_menu()}e.show_spinner=!1}async function w(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function k(){o.value.refresh_table()}function $(e){p.value=!p.value,g.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(v,e)}const S=()=>x.get_url_object();function C(e){let t={click_button_historical_flows:P,click_button_delete:N};null!=t[e.event_id]&&t[e.event_id](e)}function N(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function A(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function E(){c.value.show()}function T(){i.value.show()}function P(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const U=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Ps(),js(Ss,null,[Vs("div",UT,[Vs("div",IT,[Vs("div",OT,[Vs("div",MT,[Hs(ww,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:g.value,onClick_item:$},null,8,["tab_list"]),Js('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==p.value?(Ps(),js("div",jT,[1==p.value?(Ps(),js(Ss,{key:0},En(h,(e=>Vs("div",LT,[Vs("h3",RT,te(e.title),1),Hs(N_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Js("v-if",!0)])):(Ps(),Ls(iv,{key:1,ref_key:"table_inactive_hosts",ref:o,table_id:l.value,csrf:e.csrf,f_map_columns:U,get_extra_params_obj:S,onCustom_event:C},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(n.value,((e,t)=>{return Ps(),Ls(Dd,{f_on_open:(a=e,l=t,e=>{y(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,DT)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(a=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),b(),o.value.refresh_table(),1==p.value&&h.forEach((e=>{e.ref.value[0].update_chart()})),y(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Ps(),js(Ss,{key:0},[Ks(te(a.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,FT)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Js(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",qT,[Vs("button",{type:"button",ref:"delete_all",onClick:A,class:"btn btn-danger me-1"},[zT,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:E,class:"btn btn-danger me-1"},[BT,Ks(" "+te(a("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:T,class:"btn btn-primary me-1"},VT,512)])])])])]),Hs(CT,{ref_key:"modal_delete",ref:r,context:m.value,onDelete_host:k},null,8,["context"]),Hs(ET,{ref_key:"modal_delete_older",ref:c,context:m.value,onDelete_host:k},null,8,["context"]),Hs(PT,{ref_key:"modal_download",ref:i,context:m.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const GT={class:"row"},WT={class:"col-md-12 col-lg-12"},KT={class:"mt-4 card card-shadow"},YT={class:"card-body"};var JT={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=va("inactive_host_details"),a=va([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Ps(),js("div",GT,[Vs("div",WT,[Vs("div",KT,[Vs("div",YT,[Hs(ew,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const ZT={class:"table table-bordered table-striped"};var XT={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(""),s=va(!0),o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Ps(),js(Ss,null,[Vs("table",ZT,[Vs("tr",null,[Vs("th",null,te(a("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},te(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"},QT={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(""),s=va(""),o=va(""),i=va(!0),r=[i18n("note_scan_host")],c=()=>{"delete_all"==o.value?a("delete_all"):"delete_single_row"==o.value?a("delete"):"scan_all_rows"==o.value?a("scan_all_rows"):"scan_row"==o.value&&a("scan_row"),u()},u=()=>{l.value.close()};t({show:(e,t)=>{i.value=!1,o.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e?(i.value=!0,s.value=i18n("scan_host_title"),n.value=t):"delete_single_report"==e&&(s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),n.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ks(te(n.value)+" ",1),i.value?(Ps(),Ls(dv,{key:0,note_list:r})):Js("v-if",!0)])),footer:ml((()=>["delete_all"==o.value||"delete_single_row"==o.value?(Ps(),js("button",{key:0,type:"button",onClick:c,class:"btn btn-danger"},te(d("delete")),1)):(Ps(),js("button",{key:1,type:"button",onClick:c,class:"btn btn-primary"},te(d("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const eP={class:"form-group ms-2 me-2 mt-3 row"},tP={class:"col-form-label col-sm-4"},aP={class:"col-8"};var lP={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=va(null),n=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=va(n.value[0]);const o=()=>{a("update",{scan_frequency:s.value.id}),i()},i=()=>{l.value.close()};t({show:e=>{l.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",eP,[Vs("label",tP,[Vs("b",null,te(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",aP,[Hs(l_,{selected_option:ya(s),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},te(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const nP={class:"form-group ms-2 me-2 mt-3 row"},sP={class:"col-form-label col-sm-2"},oP={class:"col-sm-8"},iP=["disabled","placeholder"],rP={class:"col-sm-2"},cP={class:"form-group ms-2 me-2 mt-3 row"},uP={class:"col-form-label col-sm-2"},dP={class:"col-sm-10"},_P=["placeholder"],pP={class:"form-group ms-2 me-2 mt-3 row"},fP={class:"col-form-label col-sm-2"},vP={class:"col-10"},mP={key:0,class:"form-group ms-2 me-2 mt-3 row"},hP={class:"col-form-label col-sm-2"},gP={class:"col-10"},bP={class:"mt-4"},yP={key:0,class:"me-auto text-danger d-inline"},wP=["disabled"],xP=["disabled"];var kP={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=va(i18n("hosts_stats.page_scan_hosts.add_host")),o=va(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),i=i18n("hosts_stats.page_scan_hosts.host_placeholder"),r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),c=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3")],u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_4")],d=va(null),_=va({}),p=va(""),f=va(""),v=va(!1),m=va(!1),h=va([]),g=va(null),b=va(null),y=va(null),w=va(!1),x=va(null),k=va(!0),$=va(!0),S=va(!1),C=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),N="32",A=va([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),E=va(A.value[1]),T=va(C.value[0]),P=va(!1),U=()=>{const e=yp.validateIPv4(b.value),t=yp.validateIPv6(b.value),a=yp.validateHostName(b.value);e?(S.value=!0,b.value.endsWith(0)||(E.value=A.value.find((e=>e.id==N)))):t?(E.value=A.value[2],S.value=!0,E.value=A.value.find((e=>"128"==e.id))):a?(S.value=!0,E.value=A.value.find((e=>e.id==N))):S.value=!1},I=()=>{yp.validatePortRange(y.value)||yp.validateCommaSeparatedPortList(y.value)||gS.isEmptyOrNull(y.value)?k.value=!0:k.value=!1};const O=()=>{M(!0)},M=async e=>{const t=y.value,n=_.value.id,s=!0===e?"edit":"add",i=!0===e?f.value:null;let r=b.value,c=!0;v.value=!0,yp.validateIP(b.value)||(S.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(b.value),"no_success"===r&&(c=!1,o.value=b.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),P.value=!0,setTimeout((()=>{P.value=!1}),4e3)),S.value=!0),v.value=c,c&&l(s,{host:r,scan_type:n,scan_ports:t,cidr:E.value.id,scan_frequency:x?T.value.id:null,scan_id:i})};return t({show:(e,t)=>{b.value="",y.value="",k.value=!0,$.value=!0,S.value=!1,v.value=!1,w.value=!1,_.value=h.value[0],E.value=A.value[1],f.value=null,m.value=!1,P.value=!1,s.value=i18n("hosts_stats.page_scan_hosts.add_host"),gS.isEmptyOrNull(e)||(s.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{m.value=!0,b.value=e.host,y.value=e.ports,S.value=!0,k.value=!0,f.value=e.id,_.value=h.value.find((t=>t.id==e.scan_type)),yp.validateIPv4(e.host)?E.value=A.value.find((e=>e.id==N)):E.value=A.value.find((e=>"128"==e.id)),$.value=!0,x&&(T.value=C.value.find((t=>t.id==e.scan_frequency)))})(e)),gS.isEmptyOrNull(t)||(b.value=t,S.value=!0),d.value.show()},close:()=>{d.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));g.value=t,h.value=l,x.value=a,_.value=h.value[0]}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:d},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Js(" Target information, here an IP is put "),Vs("div",nP,[Vs("label",sP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host")),1)]),Vs("div",oP,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>b.value=e),onInput:U,disabled:m.value,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,iP),[[Mi,b.value]])]),Vs("div",rP,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[1]||(t[1]=e=>E.value=e),disabled:m.value,options:A.value},null,8,["selected_option","disabled","options"])])]),Vs("div",cP,[Vs("label",uP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",dP,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>y.value=e),onFocusout:I,class:K(["form-control",!0===p.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(r),required:""},null,42,_P),[[Mi,y.value]])])]),Vs("div",pP,[Vs("label",fP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",vP,[Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[3]||(t[3]=e=>_.value=e),options:h.value,disabled:m.value},null,8,["selected_option","options","disabled"])])]),1==x.value?(Ps(),js("div",mP,[Vs("label",hP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",gP,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[4]||(t[4]=e=>T.value=e),options:C.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Vs("div",bP,[0==x.value?(Ps(),Ls(dv,{key:0,note_list:c})):(Ps(),Ls(dv,{key:1,note_list:u}))])])),footer:ml((()=>[P.value?(Ps(),js("div",yP,te(o.value),1)):Js("v-if",!0),Vs("div",null,[Hs(rv,{show:v.value,size:"1rem",class:"me-2"},null,8,["show"]),0==m.value?(Ps(),js("button",{key:0,type:"button",onClick:M,class:"btn btn-primary",disabled:!($.value&&S.value&&k.value)},te(n("add")),9,wP)):(Ps(),js("button",{key:1,type:"button",onClick:O,class:"btn btn-primary",disabled:!($.value&&S.value&&k.value)},te(n("apply")),9,xP))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const $P=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",SP=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},CP=(e,t,a)=>{if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},NP=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),AP=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),EP=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},TP=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},PP=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},UP=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${PP(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${PP(a)}'></i></span>`}return l},IP=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=UP(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},OP=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=UP(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},MP=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),o=null;switch(s){case"unused":o=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":o=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return o},jP=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},LP=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=jP(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l};function RP(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const DP=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},FP=function(e,t,a){return e=RP(e),t=RP(t),1==a?e-t:t-e},qP=function(e,t,a,l){return e=DP(l,e,a),t=DP(l,t,a),FP(e,t,a)},zP={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:FP,sortByNumberWithNormalizationValue:qP},BP={class:"row"},VP={class:"col-md-12 col-lg-12"},HP={key:0,class:"alert alert-info alert-dismissable"},GP={class:"card card-shadow"},WP={class:"card-body"},KP={key:0,class:"alert alert-info alert-dismissable"},YP=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),JP={key:1,class:"alert alert-success alert-dismissable"},ZP=Vs("span",{class:"text-success me-1"},null,-1),XP={key:2,class:"alert alert-danger alert-dismissable"},QP=Vs("span",{class:"text-danger me-1"},null,-1),eU={id:"hosts_to_scan"},tU=[Vs("i",{class:"fas fa-plus"},null,-1)],aU={class:"card-footer mt-3"},lU=Vs("i",{class:"fas fa-trash"},null,-1),nU=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),sU={class:"card-footer"};var oU={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],n=va(i18n("scan_host_inserted")),s=va(i18n("scan_host_already_inserted")),o=va(""),i=va(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,v=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,m=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=va("hosts_to_scan"),w=va(),k=va(),$=va(),S=va(),C=va(0),N=va(null),A=va({}),E=va({}),T=va(!1),P=va(!1),U=va(!1),I=va(!1),O=va(!1),M={csrf:t.context.csrf},j=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});let L=[],R=null;function D(){null!=t.context.host&&""!=t.context.host?$.value.show(null,t.context.host):$.value.show()}function F(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}dn((()=>{R=Promise.all([oe(),ie()])})),_n((async()=>{await R,await $.value.metricsLoaded(L,t.context.ifid,t.context.is_enterprise_l),null!=t.context.host&&$.value.show(null,t.context.host),U.value=!t.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const q=()=>x.get_url_object();function z(e){let t={click_button_edit_host:Y,click_button_delete:G,click_button_scan:W,click_button_download:ve,click_button_show_result:me};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return zP.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan||1!=t.is_ok_last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan||1!=t.is_ok_last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id&&(a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):""),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return zP.sortByIP(l,n,e.sort);if("host_name"==e.id)return zP.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id)return zP.sortByNumber(l,n,e.sort);if("tcp_ports"==e.id||"udp_ports"==e.id)return zP.sortByNumber(l,n,e.sort);if("duration"==e.id){const t=-1;return zP.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return zP.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return"is_ok_last_scan"==e.id?zP.sortByName(l,n,e.sort):"max_score_cve"==e.id?zP.sortByNumber(l,n,e.sort):(e.id,zP.sortByName(l,n,e.sort))}return B(t,a)}function G(e){I.value=!1,O.value=!1,ne(),A.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){I.value=!1,O.value=!1,ne(),E.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function Y(e){$.value.show(e.row)}function J(){I.value=!1,O.value=!1,ne(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===I.value&&(I.value=!1),!0===O.value&&(O.value=!1)}function Q(){ie()}function ee(){C.value=w.value.get_rows_num()}const ae=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>LP(e,t),scan_type:(e,t)=>CP(e),last_scan:(e,t)=>NP(e,t),duration:(e,t)=>AP(e,t),scan_frequency:e=>EP(e),is_ok_last_scan:e=>TP(e),max_score_cve:(e,t)=>SP(e,t),tcp_ports:(e,t)=>OP(e,t),udp_ports:(e,t)=>IP(e,t),num_vulnerabilities_found:(e,t)=>$P(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,0,0,t.context.ifid),le=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,M);if($.value.close(),!0===a.rsp)null!=e.cidr?n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),I.value=!0,O.value=!1,setTimeout(X,1e4),F(!1);else{null!=e.cidr?s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),s.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),O.value=!0,I.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&F(!1)},ne=function(e){null!=e&&0!=e&&(o.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,M),I.value=!1,O.value=!1,ne(),F(!1)},oe=async function(){const e=NtopUtils.buildURL(v,{...M}),t=await b.http_request(e);L=t.rsp},ie=async function(){const e=NtopUtils.buildURL(g,{...M}),t=await b.http_request(e);I.value=!1,O.value=!1,ne(t.rsp.total_in_progress),null==N.value&&(N.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&N.value>0;N.value=t.rsp.total_in_progress,T.value=N.value>0&&!1===P.value,!0===T.value?setTimeout((function(){F(!0)}),2e3):a&&setTimeout((function(){F(!0)}),5e3)},re=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),F(!1)},ce=function(){S.value.show()},ue=async function(){const e=E.value;await de(e.host,e.scan_type,e.ports,e.id),F(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,M)};async function _e(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,M),F(!1)}const pe=async function(){const e=A.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,M),F(!1)},fe=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,M),F(!1)};function ve(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function me(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${m}?${n}`;x.go_to_url(s)}function he(e){P.value=e}return(e,d)=>(Ps(),js(Ss,null,[Vs("div",BP,[Vs("div",VP,[U.value?(Ps(),js("div",HP,[Vs("span",null,te(i.value),1)])):Js("v-if",!0),Vs("div",GP,[Vs("div",WP,[T.value?(Ps(),js("div",KP,[YP,Vs("span",null,te(o.value),1)])):Js("v-if",!0),I.value?(Ps(),js("div",JP,[ZP,Vs("span",null,te(n.value),1)])):Js("v-if",!0),O.value?(Ps(),js("div",XP,[QP,Vs("span",null,te(s.value),1)])):Js("v-if",!0),Vs("div",eU,[Hs(QT,{ref_key:"modal_delete_confirm",ref:k,title:ya(r),body:ya(c),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Hs(lP,{ref_key:"modal_update_perioditicy_scan",ref:S,title:ya(u),onUpdate:se},null,8,["title"]),Hs(iv,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:j.value.csrf,f_map_columns:ae,get_extra_params_obj:q,f_sort_rows:H,onCustom_event:z,onRows_loaded:ee},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:D},tU,512)])),_:1},8,["table_id","csrf"])])]),Vs("div",aU,[Vs("button",{type:"button",ref:"delete_all",onClick:J,class:K(["btn btn-danger me-1",{disabled:0==C.value}])},[lU,Ks(" "+te(a("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:re,class:K(["btn btn-primary me-1",{disabled:0==C.value}])},[nU,Ks(" "+te(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),t.context.is_enterprise_l?(Ps(),js("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:K(["btn btn-secondary me-1",{disabled:0==C.value}])},te(a("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Js("v-if",!0)]),Vs("div",sU,[Hs(dv,{note_list:l})])])])]),Hs(kP,{ref_key:"modal_add",ref:$,context:j.value,onAdd:le,onEdit:Z,onCloseModal:d[0]||(d[0]=e=>he(!1)),onOpenModal:d[1]||(d[1]=e=>he(!0)),onHidden:d[2]||(d[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const iU={class:"row"},rU={class:"col-md-12 col-lg-12"},cU={class:"card card-shadow"},uU=["innerHTML"],dU=["innerHTML"];var _U={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;va(null);const l=va(!1),n=va(""),s=va(""),o=va(""),i=va("");return va([]),dn((async()=>{await async function(e,r,c,u){l.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${a}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`;const v="true"===t.context.is_in_mem||1==t.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;i.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),null!=c&&(c=c.replaceAll("_"," ")),i.value=i.value.replace("%{date}",c),o.value=i.value,l.value=!1}(t.context.host,t.context.scan_type,t.context.date,t.context.epoch)})),(e,t)=>(Ps(),js("div",iU,[Vs("div",rU,[Vs("div",cU,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:o.value},null,8,uU),l.value?(Ps(),Ls(yf,{key:0})):Js("v-if",!0),Vs("div",{class:K(["card-body",[l.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,dU)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const pU={class:"row"},fU={class:"col-md-12 col-lg-12"},vU={class:"card card-shadow"},mU={class:"card-body"},hU={id:"open_ports"};var gU={__name:"page-open-ports",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/vulnerability_scan.lua`,l=va("open_ports"),n=e=>e,s=va();t.context.csrf;const o=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l}),i=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let t={hosts:(e,t)=>{let l="";const n=e.split(", "),s=n.length;let o=0;for(;o<5&&o<s;){const e=n[o].split("|"),t=e[0],s=e[1],i=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:t,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:i},_=x.obj_to_url_params(d),p=`${a}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:t;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,o++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};async function f(e){let t={port:e.row.port_number},l=x.obj_to_url_params(t),n=`${a}?${l}`;x.go_to_url(n)}return(e,t)=>(Ps(),js("div",pU,[Vs("div",fU,[Vs("div",vU,[Vs("div",mU,[Vs("div",hU,[Hs(iv,{ref_key:"table_open_ports",ref:s,table_id:l.value,csrf:o.value.csrf,f_map_columns:p,get_extra_params_obj:i,f_sort_rows:u,f_map_config:n,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const bU={class:"form-group ms-2 me-2 mt-3 row"},yU={class:"col-form-label col-sm-2"},wU={class:"col-sm-10"},xU={class:"form-group ms-2 me-2 mt-3 row"},kU={class:"col-form-label col-sm-2"},$U={class:"col-sm-10"},SU={class:"mt-4"},CU=["disabled"];var NU={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),s=va(null),o=va(null),i=va(null),r=va(null),c=va(!1),u=[l("hosts_stats.page_scan_hosts.notes.note_1"),l("hosts_stats.page_scan_hosts.notes.note_2"),l("hosts_stats.page_scan_hosts.notes.note_3")],d=()=>{const e=r.value.epoch,t=i.value;a("edit",{report_title:t,epoch_end:e}),s.value.close()},_=()=>{const e=yp.validateSingleWord(i.value);c.value=e};return t({show:e=>{o.value="",i.value="",r.value=null,(e=>{r.value=e,o.value=e.report_date,i.value=e.name})(e),s.value.show()},close:()=>{s.value.close()}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n.value),1)])),body:ml((()=>[Js(" Target information, here an IP is put "),Vs("div",bU,[Vs("label",yU,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",wU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[Mi,o.value]])])]),Vs("div",xU,[Vs("label",kU,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",$U,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),class:"form-control",type:"text",onInput:_,required:""},null,544),[[Mi,i.value]])])]),Vs("div",SU,[Hs(dv,{note_list:u})])])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:d,disabled:!c.value,class:"btn btn-primary"},te(l("apply")),9,CU)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const AU={class:"row"},EU={class:"col-md-12 col-lg-12"},TU={class:"card card-shadow"},PU={class:"card-body"},UU={id:"vs_reports"};var IU={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const l=a("hosts_stats.page_scan_hosts.report_page.delete_title"),n=a("hosts_stats.page_scan_hosts.report_page.delete_description"),s=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,o=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,i=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,r=va("vs_reports"),c=va(),u=va(),d=va(),_=va(0),p=va({}),f={csrf:t.context.csrf},v=va({csrf:t.context.csrf,ifid:t.context.ifid});function m(){c.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){return t[e.data.data_field]}function w(e,t){return zP.sortByName(e.report_date,t.report_date,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id?zP.sortByName(l,n,e.sort):"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?zP.sortByNumber(l,n,e.sort):"name"==e.id?zP.sortByName(l,n,e.sort):"num_hosts"==e.id?zP.sortByNumber(l,n,e.sort):zP.sortByName(l,n,e.sort)}return w(t,a)}function $(e){p.value=e.row,d.value.show("delete_single_report")}function S(e){u.value.show(e.row)}async function C(e){await N(e)}const N=async function(e){const t=NtopUtils.buildURL(i,{...e});await b.http_post_request(t,f),m()};function A(){_.value=c.value.get_rows_num()}const E=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(s,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=p.value,t=NtopUtils.buildURL(o,{epoch:e.epoch});await b.http_post_request(t,f),m()};return(e,t)=>(Ps(),js(Ss,null,[Vs("div",AU,[Vs("div",EU,[Vs("div",TU,[Vs("div",PU,[Vs("div",UU,[Hs(QT,{ref_key:"modal_delete_confirm",ref:d,title:ya(l),body:ya(n),onDelete:T},null,8,["title","body"]),Hs(iv,{ref_key:"table_vs_reports",ref:c,table_id:r.value,csrf:v.value.csrf,f_map_columns:E,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:A},null,8,["table_id","csrf"])])])])])]),Hs(NU,{ref_key:"modal_edit",ref:u,context:v.value,onEdit:C},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const OU={style:{"min-height":"8.5rem"}},MU={class:"form-group ms-2 me-2 mt-3 row"},jU={class:"col-form-label col-sm-4"},LU={class:"col-sm-6"},RU=["pattern"],DU=["disabled"];var FU={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("");va("date");let o=NtopUtils.REGEXES.singleword;const i=xo((()=>!new RegExp(o).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",OU,[Vs("div",MU,[Vs("label",jU,[Vs("b",null,te(u("name"))+":",1)]),Vs("div",LU,[wn(Vs("input",{pattern:ya(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,RU),[[Mi,s.value]])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,disabled:ya(i),class:"btn btn-primary"},te(u("save")),9,DU)])),_:1},512))}};lp("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),FU.__scopeId="data-v-87fda19e",FU.__file="http_src/vue/modal-file-save.vue";const qU={class:"form-group ms-2 me-2 mt-3 row"},zU={class:"col-form-label col-sm-4"},BU={class:"col-sm-8"},VU={value:"name"},HU={value:"date"},GU={class:"form-group ms-2 me-2 mt-3 row"},WU={class:"col-form-label col-sm-4"},KU={class:"col-sm-8"},YU=["disabled"],JU=["disabled"];var ZU={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va({}),o=va(""),i=va([]),r=va("date");NtopUtils.REGEXES.singleword;const c=xo((()=>""==s.value));function u(){i.value=i.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(s.value=i.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",i.value=await l.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:p}),_n((()=>{}));const f=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",qU,[Vs("label",zU,[Vs("b",null,te(f("order_by")),1)]),Vs("div",BU,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Vs("option",VU,te(f("name")),1),Vs("option",HU,te(f("date")),1)],544),[[Di,r.value]])])]),Vs("div",GU,[Vs("label",WU,[Vs("b",null,te(e.file_title),1)]),Vs("div",KU,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(f("delete_all_entries")),1),Vs("button",{type:"button",onClick:_,disabled:ya(c),class:"btn btn-danger"},te(f("delete")),9,YU),Vs("button",{type:"button",onClick:d,disabled:ya(c),class:"btn btn-primary"},te(f("open")),9,JU)])),_:1},512))}};lp("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),ZU.__scopeId="data-v-1976657e",ZU.__file="http_src/vue/modal-file-open.vue";const XU=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),QU={class:"form-group ms-2 me-2 mt-3 row"},eI={class:"col-form-label col-sm-4"},tI={class:"col-sm-8"},aI=XU((()=>Vs("span",null," ",-1))),lI=["disabled"];var nI={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=va(""),i=va(null);function r(){i.value.click()}function c(e){const t=e.target.files;o.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",o.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",s.value=""}(),n.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",QU,[Vs("label",eI,[Vs("b",null,te(e.file_title),1)]),Vs("div",tI,[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(_("upload")),1),aI,wn(Vs("small",null,"No file selected",512),[[Ji,!s.value]]),wn(Vs("small",null,te(o.value),513),[[Ji,o.value]]),Vs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},te(_("open")),9,lI)])),_:1},512))}};lp("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),nI.__scopeId="data-v-9db8ba96",nI.__file="http_src/vue/modal-file-upload.vue";const sI={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var oI={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=xo((()=>`col-${t.width||4}`)),l=xo((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Ps(),js("div",{class:K([ya(a),"widget-box-main-dashboard"])},[Vs("div",{class:K([ya(l),"widget-box"]),style:{position:"relative"}},[Js(" title "),Pn(e.$slots,"box_title"),Js(" content "),Pn(e.$slots,"box_content"),Js(" footer "),Vs("div",sI,[Pn(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},iI={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return va("empty_component"),Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Ps(),js("div"))},__file:"http_src/vue/dashboard-empty.vue"};const rI={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var cI={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,l=va("simple_table"),n=va([]),s=xo((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(v.types[e.data_type]){return v.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,a){return"host"==e.id?LP(a[e.id],a,t.ifid):"last_scan"==e.id?NP(a[e.id],a):"duration"==e.id?AP(a[e.id],a):"scan_frequency"==e.id?EP(a[e.id]):"is_ok_last_scan"==e.id?TP(a[e.id]):"tcp_ports"==e.id?OP(a[e.id],a):"udp_ports"==e.id?IP(a[e.id],a):"scan_type"==e.id?CP(a[e.id]):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=jP(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(a[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const o=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${o}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(a[e.id],a):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(a[e.id],a):"max_score_cve"==e.id?SP(a[e.id],a):"num_vulnerabilities_found"==e.id?$P(a[e.id],a):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=MP(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=MP(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(a.tcp_ports_list,a.udp_ports_list,a):a[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&i[t.params.table_type]){return(0,i[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];if(s="db_search"==t.params.table_type?l.records:l,"vs_scan_result"!=t.params.table_type){const e=t.max_height?t.max_height/4*6:6;s=s.slice(0,e)}n.value=s}return(e,t)=>(Ps(),js("div",rI,[Hs(ew,{id:l.value,columns:ya(s),rows:n.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};lp("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),cI.__file="http_src/vue/dashboard-table.vue";const uI={class:"d-flex align-items-center justify-content-between"},dI=["href"],_I={class:"fw-normal text-white"},pI={class:"subtitle text-white text-sm text mb-0 h5"},fI={class:"flex-shrink-0 ms-3"};var vI={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=e=>i18n(e);va("empty_component");const l=va(""),n=va(""),s=va(""),o=va("#");async function i(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=n[t.params.counter_path],i=n[t.params.counter_formatter];i||(i="number");let r=v.getFormatter(i);if(l.value=r(s),t.params.link){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.link.url_params},a=ntopng_url_manager.obj_to_url_params(e);o.value=`${http_prefix}${t.params.link.url}?${a}`}}}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{i()}),{flush:"pre",deep:!0}),dn((()=>{!function(){t.params.i18n_name&&(n.value=a(t.params.i18n_name));t.params.icon&&(s.value=t.params.icon+" fa-2xl");i()}()})),_n((()=>{})),(e,t)=>(Ps(),js("div",uI,[Vs("div",null,[Vs("a",{href:o.value},[Vs("h4",_I,te(l.value),1),Vs("p",pI,te(n.value),1)],8,dI)]),Vs("div",fI,[Vs("i",{class:K(["text-white",s.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},mI={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=va(ntopChartApex.typeChart.DONUT),l=va(null),n=xo((()=>`${http_prefix}${t.params.url}`)),s=()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params,...t.filters};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a};function o(){const e=n.value,a=s();return t.get_component_data(e,a)}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(t,s)=>(Ps(),js("div",null,[Hs(N_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(n),get_custom_chart_options:o,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"},hI={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=e,a=62.5,l=va(ntopChartApex.typeChart.TS_LINE),n=va(null),s=va([]),o=va(null),i=va(null),r=va([]);va([]);const c=xo((()=>`${http_prefix}${t.params.url}`));function u(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function d(e){if(r.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=u(e,t.ifid);a.source_def=[t.ifid],r.value.push(a)}))}async function _(e){if(r.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${t.ifid}&gui=true`)||[];a&&a.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=u(a,t.ifid),a.source_def=[t.probe_ip],r.value.push(a)}}))}async function p(e){if(r.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${t.ifid}`)||[];a&&a.forEach((a=>{if(a){let l=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,a.id);l=u(l,t.ifid),l.source_def=[t.ifid,a.id],r.value.push(l)}}))}async function f(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=Vb.get_source_type_from_id(t.params?.source_type),s=await Vb.get_source_array_from_value_array(http_prefix,n,a),o=await Vb.get_metric_from_schema(http_prefix,n,s,e,null,l);return Vb.get_ts_group(n,s,o)}async function v(){await async function(){const e=t.params.post_params?.ts_requests;for(const a in e||{})switch(a){case"$ANY_IFID$":await d(e[a]);break;case"$ANY_EXPORTER$":await _(e[a]);break;case"$ANY_NETWORK$":await p(e[a]);break;default:let l=u(e[a],t.ifid);l.source_def=[t.ifid],r.value.push(l)}}(),await async function(){if(0==s.value.length)for(const e of r.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const l=await f(t,a);s.value.push(l)}null==o.value&&(o.value=uy.getGroupOptionMode("1_chart_x_yaxis"))}();const e=c.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:r.value};let l=await t.get_component_data(e,"",a);return l=uy.tsArrayToOptionsArray(l,s.value,o.value,""),l[0]&&(l[0].height=i.value),l?.[0]}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){if(n.value){const e=await v();n.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){i.value=(t.max_height||4)*a}()})),_n((async()=>{})),(t,a)=>(Ps(),js("div",null,[Hs(Ng,{ref_key:"chart",ref:n,id:e.id,chart_type:l.value,base_url_request:ya(c),get_custom_chart_options:v,register_on_status_change:!1,disable_pointer_events:!0},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"},gI={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=va(null),n=va({}),s=va(null),o=va(null),i=va(null),r=62.5;Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{i.value=r*t.max_height,o.value=$(s.value).width(),c()}));const c=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params,...t.filters};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const o=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(s);return o.links.length>0&&o.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),o}();n.value=e}()};function u(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,t)=>(Ps(),js("div",{ref_key:"body_div",ref:s},[Hs(sS,{ref_key:"sankey_chart",ref:l,width:o.value,height:i.value,no_data_message:ya(a),sankey_data:n.value,onNode_click:u},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const bI=e=>(pl("data-v-c360f212"),e=e(),fl(),e),yI={class:"row"},wI={class:"me-2"},xI={class:"me-2"},kI=["title"],$I=[bI((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],SI=["title"],CI=[bI((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],NI=["title"],AI=[bI((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],EI=["title"],TI=[bI((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],PI=["title"],UI=[bI((()=>Vs("i",{class:"fas fa-print"},null,-1)))],II={key:1,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},OI={style:{"text-align":"center"}},MI={key:0},jI=["title"],LI=[bI((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],RI=["title"],DI=[bI((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],FI=["title"],qI=[bI((()=>Vs("i",{class:"fas fa-print"},null,-1)))],zI={key:0,class:"col-sm mt-1"},BI={class:"alert alert-warning"},VI={key:0,class:"dashboard-component-title"},HI={style:{color:"gray"}},GI={key:0,style:{color:"lightgray","font-size":"12px"}};var WI={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:vI,empty:iI,pie:mI,timeseries:hI,table:cI,sankey:gI},s=va(!0),o="page-dashboard",i=t.context.show_loading||!1,r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va([]),f=va({}),v=va({}),m=va([]),h=va({}),g=va("");let w={},k=!1,$=!1;const S=xo((()=>"report"==t.context.page&&!$)),C=xo((()=>"vs-report"==t.context.page)),A=xo((()=>!0)),E=xo((()=>1==h.value?.toolbox?.time?.hide)),T=xo((()=>1==h.value.is_open_report||E.value)),P=xo((()=>1==h.value.is_open_report||"vs-report"==t.context.page)),U=xo((()=>{let e="";return h.value.is_open_report?e=`Report: ${h.value.value}`:t.context.title&&(e=t.context.title),e})),I=xo((()=>e=>null==e.params.custom_style||$&&!e.params.custom_print_style?e.params.custom_print_style&&1==$?e.params.custom_print_style:"":e.params.custom_style)),O=xo((()=>e=>oe(e.epoch_begin,e.epoch_end)));dn((async()=>{let e=null;$="true"==x.get_url_entry("printable"),"report"!=t.context.page&&"vs-report"!=t.context.page||("report"==t.context.page?e=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==t.context.page&&(e=b.check_and_set_default_time_interval(void 0,void 0,!0)),_.value=e),await async function(){const e=t.context.template_list_endpoint;let a=await b.http_request(e);if(null==a?.list)return;m.value=a.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1})));const l=x.get_url_entry("report_template")||t.context.template;h.value=m.value.find((e=>e.value==l)),null==h.value&&(h.value=m.value[0])}();let a=x.get_url_entry("report_name");null!=a&&""!=a?await X(a):await L(e,h.value.value),1==$&&ie()})),_n((async()=>{"dashboard"==t.context.page&&setInterval((()=>{j()}),M)}));const M=1e4;function j(e){e&&(_.value=e),p.value.forEach(((t,a)=>{R(t,e)}))}async function L(e,a){k=!1;let l=`${t.context.template_endpoint}?template=${a}`,s=await b.http_request(l);p.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={component_id:q(t.id,a),filters:{},...t};return R(l,e),l})),async function(e){const a=await b.http_request(`${t.context.report_filters_endpoint}`);e.forEach((e=>{const t=e?.name||"",l=a.find((e=>e.id==t))?.options;if(l&&l.length>1){let e=i18n("db_search.all."+t);gS.isEmptyOrNull(e)&&(e=i18n("all")+" "+i18n("db_search."+t)),l.unshift({value:null,label:e}),v.value[t]=l,f.value[t]=l[0]}}))}(s.filters),await Ya()}function R(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function D(e,t){!function(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),p.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}(t,e.value)}function F(){if(1==$&&ie(),1==h.value.is_open_report)return;w={},Q();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==k&&(a=b.set_default_time_interval(void 0,"min"),N.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),L(a,h.value.value)}function q(e,t){return`${o}_${e}_${t}`}function z(){c.value.show()}function B(){u.value.show()}function H(){d.value.show()}function G(){let e="report";return"vs-report"==t.context.page?e=t.context.title:_.value&&_.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*_.value.epoch_end,"DD-MM-YYYY")),e}const W=async e=>{let t=JSON.parse(e);Y(t,t.name),x.delete_key_from_url("report_name")};function Y(e,a){Q(a);const l={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};N.emit_event(ntopng_events.EPOCH_CHANGE,l,t.context.page),Z(e)}const J=async()=>{let e=`${t.context.report_list_endpoint}?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},Z=async e=>{e.name;let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}k=!0,w=n,p.value=a,j(t)},X=async e=>{let l=`${t.context.report_open_endpoint}?ifid=${t.context.ifid}&report_name=${e}`,n=await b.http_request(l);n?(Y(n,e),g.value=""):g.value=a("report.unable_to_open")};function Q(e){if(m.value=m.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",h.value.value),void x.delete_key_from_url("report_name");let t={value:e,label:a("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0};m.value.push(t),h.value=t,x.set_key_to_url("report_name",h.value.value),x.delete_key_from_url("report_template")}const ee=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${t.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},ae=async e=>{let t={};for(var a in w)t[a]=await w[a].data;let l={version:"1.0",name:e,template:p.value,data:t};return _.value&&_.value.epoch_begin&&_.value.epoch_end&&(l.epoch_begin=_.value.epoch_begin,l.epoch_end=_.value.epoch_end),JSON.stringify(l)},le=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await ae(e)},n=`${t.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function ne(){var e=G(),t=e+".json",a=await ae(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function se(){if(1==$)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function oe(e,t){if(1==E.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),o=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),i=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==o?`${i}`:`${o} ${i}`}`}function ie(){const e=y.get_status(!0),t=oe(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${h.value.label} ${t}`;document.title=a}return(t,l)=>(Ps(),js(Ss,null,[Vs("div",yI,[Js(' <Dropdown v-for="(t, t_index) in top_table_array" '),Js('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Js("   <template v-slot:title> "),Js('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Js('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Js("   </template> "),Js("   <template v-slot:menu> "),Js('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Js('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Js('        :title="opt.value">{{ opt.label }}</a> '),Js("   </template>     "),Js(" </Dropdown> "),ya(S)?(Ps(),Ls(E_,{key:0,class:"dontprint",disabled_date_picker:ya(T),id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:j},{begin:ml((()=>[Vs("div",wI,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":l[0]||(l[0]=e=>h.value=e),options:m.value,onSelect_option:F},null,8,["selected_option","options"])]),(Ps(!0),js(Ss,null,En(v.value,((e,t)=>(Ps(),js("div",xI,[Hs(l_,{selected_option:f.value[t],"onUpdate:selected_option":e=>f.value[t]=e,options:e,onSelect_option:e=>D(f.value[t],t)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))])),extra_buttons:ml((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:z,title:a("dashboard.store")},$I,8,kI),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:B,title:a("dashboard.open")},CI,8,SI),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ne,title:a("download")},AI,8,NI),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:H,title:a("upload")},TI,8,EI),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("dashboard.print")},UI,8,PI)])),_:1},8,["disabled_date_picker"])):Js("v-if",!0),ya(P)?(Ps(),js("div",II,[Vs("h3",OI,[Ks(te(ya(U))+" ",1),ya(C)?(Ps(),js("span",MI,[ya(A)?(Ps(),js(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ne,title:a("download")},LI,8,jI),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:H,title:a("upload")},DI,8,RI)],64)):Js("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("dashboard.print")},qI,8,FI)])):Js("v-if",!0)])])):Js("v-if",!0),(Ps(),js("div",{ref_key:"report_box",ref:r,class:"row",key:p.value},[g.value?(Ps(),js("div",zI,[Vs("div",BI,te(g.value),1)])):Js("v-if",!0),(Ps(!0),js(Ss,null,En(p.value,(t=>(Ps(),Ls(oI,{style:{"min-width":"20rem"},color:t.color,width:t.width,height:t.height},{box_title:ml((()=>[t.i18n_name?(Ps(),js("div",VI,[Vs("h4",null,[Ks(te(a(t.i18n_name))+" ",1),Vs("span",HI,te(t.time_offset?a("dashboard.time_ago."+t.time_offset):""),1)])])):Js("v-if",!0)])),box_content:ml((()=>{return[s.value&&ya(i)?(Ps(),Ls(yf,{key:0,styles:"margin-top: 2rem !important;"})):Js("v-if",!0),Vs("div",{class:K([s.value&&ya(i)?"ntopng-gray-out":""])},[(Ps(),Ls(Sn(n[t.component]),{id:t.component_id,style:V(ya(I)(t)),epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid:e.context.ifid,max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(k)w[a.component_id]?n=w[a.component_id]:(console.error("No data for "+a.component_id),n.data={});else{w[a.component_id]&&(n=w[a.component_id],n.data&&await n.data);const o=`${e}?${t}`;s.value=!0,n.data=l?b.http_post_request(o,l):b.http_request(o),n.data.then((()=>{s.value=!1})),w[a.component_id]=n}return n.data}),csrf:e.context.csrf,filters:t.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","csrf","filters"]))],2)];var a})),box_footer:ml((()=>["empty"!=t.component&&t.i18n_name&&!ya(E)?(Ps(),js("span",GI,te(ya(O)(t)),1)):Js("v-if",!0)])),_:2},1032,["color","width","height"])))),256))]))]),Js(" div row "),Hs(FU,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:G,store_file:le,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Hs(ZU,{ref_key:"modal_open_report",ref:u,list_files:J,open_file:X,delete_file:ee,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Hs(nI,{ref_key:"modal_upload_report",ref:d,upload_file:W,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"])],64))}};lp("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),WI.__scopeId="data-v-c360f212",WI.__file="http_src/vue/dashboard.vue";const KI=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),YI={class:"mb-3 row"},JI={class:"col-form-label col-sm-4"},ZI={class:"col-sm-6"},XI={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},QI=KI((()=>Vs("hr",null,null,-1))),eO={class:"host-alert-fields"},tO={class:"mb-3 row"},aO={class:"col-form-label col-sm-4"},lO={class:"col-sm-6"},nO={value:""},sO={value:"0"},oO={disabled:""},iO=["value"],rO={class:"flow-alert-fields"},cO={class:"mb-3 row"},uO={class:"col-form-label col-sm-4"},dO={class:"col-sm-6"},_O={value:""},pO={value:"0"},fO={disabled:""},vO=["value"],mO={key:0,class:"ip-fields"},hO={class:"mb-3 row"},gO={class:"col-form-label col-sm-4"},bO={class:"col-sm-6"},yO=["pattern"],wO={key:1,class:"network-fields"},xO={class:"mb-3 row"},kO={class:"col-form-label col-sm-4"},$O={class:"col-sm-4 pr-0"},SO=["pattern"],CO={class:"col-sm-2 ps-4 pe-0"},NO=KI((()=>Vs("span",{class:"me-2"},"/",-1))),AO={class:"mb-3 row"},EO={class:"col-form-label col-sm-4"},TO={class:"col-sm-6"},PO={class:"mb-3 row"},UO={class:"col-form-label col-sm-4"},IO={key:0},OO={key:1},MO={class:"col-sm-6"},jO=["pattern"],LO=["pattern"],RO=KI((()=>Vs("hr",{class:"separator mt-5"},null,-1))),DO={class:"form-group row"},FO={class:"col-form-label"},qO={class:"mt-1"},zO=["placeholder"],BO=["disabled"];var VO={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);va(null);const s=va("ip"),o=va(""),i=va(""),r=va(0),c=va(""),u=va(""),d=va(""),_=va(""),p=va(null),f=i18n("details.comment_placeholder"),v=va(null),m=va(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip"),b=h("text"),y=h("certificate");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value:null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=()=>{let e,t=o.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${i.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,v.value&&(e.old_type=m.value.type,e.old_subdir=m.value.subdir,e.old_alert_domain=m.value.alert_domain,e.old_alert_certificate=m.value.alert_certificate,e.old_alert_addr=m.value.alert_addr,e.old_flow_alert_key=m.value.flow_alert_key,e.old_host_alert_key=m.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(v.value=!0,m.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",i.value=t[0],_.value=t[1],o.value=""):(s.value="ip",o.value=a[0],i.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",o.value="",i.value="",r.value=0,u.value="",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),_n((()=>{}));const S=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(S("check_exclusion.add_exclusion")),1)])),body:ml((()=>["hosts"==e.alert_exclusions_page?(Ps(),js(Ss,{key:0},[Js(" modal hosts "),Vs("div",YI,[Vs("label",JI,[Vs("b",null,te(S("check_exclusion.member_type")),1)]),Vs("div",ZI,[Vs("div",XI,[Vs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(S("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(S("check_exclusion.network")),1)],2)])])]),QI,Vs("div",eO,[Vs("div",tO,[Vs("label",aO,[Vs("b",null,te(S("check_exclusion.host_alert_type")),1)]),Vs("div",lO,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",nO,te(S("check_exclusion.none")),1),Vs("option",sO,te(S("check_exclusion.exclude_all_alerts")),1),Vs("option",oO,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.host_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,iO)):Js("v-if",!0)],64)))),256))],512),[[Di,u.value]])])])]),Vs("div",rO,[Vs("div",cO,[Vs("label",uO,[Vs("b",null,te(S("check_exclusion.flow_alert_type")),1)]),Vs("div",dO,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",_O,te(S("check_exclusion.none")),1),Vs("option",pO,te(S("check_exclusion.exclude_all_alerts")),1),Vs("option",fO,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.flow_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,vO)):Js("v-if",!0)],64)))),256))],512),[[Di,d.value]])])])]),"ip"==s.value?(Ps(),js("div",mO,[Vs("div",hO,[Vs("label",gO,[Vs("b",null,te(S("check_exclusion.ip_address")),1)]),Vs("div",bO,[wn(Vs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>o.value=e)},null,8,yO),[[Mi,o.value]])])])])):Js("v-if",!0),"network"==s.value?(Ps(),js("div",wO,[Vs("div",xO,[Vs("label",kO,[Vs("b",null,te(S("check_exclusion.network")),1)]),Vs("div",$O,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,SO),[[Mi,i.value]])]),Vs("div",CO,[NO,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[Mi,_.value]])])])])):Js("v-if",!0),Vs("div",AO,[Vs("label",EO,[Vs("b",null,te(S("vlan")),1)]),Vs("div",TO,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[Mi,r.value]])])])],64)):Js("v-if",!0),Js(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),js(Ss,{key:1},[Js(" modal domain_names"),Vs("div",null,[Vs("div",PO,[Vs("label",UO,["domain_names"==e.alert_exclusions_page?(Ps(),js("b",IO,te(S("check_exclusion.domain")),1)):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),js("b",OO,te(S("check_exclusion.tls_certificate")),1)):Js("v-if",!0)]),Vs("div",MO,["domain_names"==e.alert_exclusions_page?wn((Ps(),js("input",{key:0,placeholder:"",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,jO)),[[Mi,c.value]]):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Ps(),js("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,LO)),[[Mi,c.value]]):Js("v-if",!0)])])])],64)):Js("v-if",!0),Js(" modal comment"),RO,Vs("div",DO,[Vs("div",null,[Vs("label",FO,[Vs("b",null,te(S("show_alerts.add_a_comment")),1)])]),Vs("div",qO,[wn(Vs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,zO),[[Mi,p.value]])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:x(),onClick:$,class:"btn btn-primary"},te(S("add")),9,BO)])),_:1},512))}};lp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),VO.__scopeId="data-v-7e5acce0",VO.__file="http_src/vue/modal-add-check-exclusion.vue";let HO={PageAlertStats:Kh,PageFlowHistorical:Cg,PageStats:yw,PageAssetTable:Aw,PagePeriodicityTable:qw,PageServiceTable:nx,PageServiceMap:xx,PagePeriodicityMap:zx,PageAssetMap:rk,PageDeviceExclusions:s$,PageHostTLS:o$,PageHostSSH:f$,PageHomeMap:x$,PageSankey:S$,PageHostRules:$C,PageAlertAnalysis:HC,PageHostMap:aN,PageManageConfigurationBackup:GA,PageSNMPDeviceRules:LE,PageHostsPortsAnalysis:tT,PageInactiveHosts:HT,PageInactiveHostDetails:JT,PageVulnerabilityScan:oU,PageHostVsResult:_U,PageOpenPorts:gU,PageVulnerabilityScanReport:IU,PageEditApplications:TA,PageVLANPortsFlowSankey:vN,PageTestTable:NN,PageSnmpDevicesInterfacesSimilarity:RE,NedgeRulesConfig:fA,NedgeRepeatersConfig:$T,PageHostDetailsApplications:N$,PageHostDetailsTraffic:G$,PageHostDetailsPackets:tS,PageHostDetailsFlowSankey:hS,PageHostDetailsPorts:IC,PageAggregatedLiveFlows:SN,PageNetworkDiscovery:FA,PageFlowDeviceDetails:XT,AlertInfo:S_,Chart:N_,TimeseriesChart:Ng,Datatable:Hy,DateTimeRangePicker:E_,NetworkMap:bx,RangePicker:Wp,PageNavbar:n_,SelectSearch:l_,TabList:ww,Sankey:sS,NoteList:dv,Loading:yf,Dashboard:WI,DashboardBox:oI,DashboardEmpty:iI,DashboardTable:cI,DashboardBadge:vI,DashboardPie:mI,DashboardTimeseries:hI,DashboardSankey:gI,ListTimeseries:Xg,Modal:np,ModalAddCheckExclusion:VO,ModalAlertsFilter:Lm,ModalFilters:wp,ModalTimeseries:My,ModalTrafficExtraction:_v,ModalDeleteConfirm:Cw,ModalSnapshot:nm,ModalAddDeviceExclusion:Mk,ModalEditDeviceExclusion:Wk,ModalAddHostRules:vC,ModalAddApplication:NA,ModalDeleteApplication:AA,ModalEditReport:NU,Vue:Od};window.ntopVue=HO;var GO=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function WO(){const e=e=>$(GO[3])[GO[2]]($(e)[GO[1]]())[GO[0]]();let t=GO[4];const a=(()=>{let a=$(t),l=i18n(GO[5])[GO[7]](GO[6]);$(GO[8],a)[GO[0]](l[0]),$(GO[9],a)[GO[0]](l[1]);let n=`${GO[10]}${i18n(GO[11])}${GO[12]}`;return $(GO[13],a)[GO[0]](n),e(a)})(),l=()=>{$(GO[14])[GO[2]](a)};l();const n=()=>$(GO[16])[GO[15]]()[GO[15]]()[GO[15]]()[GO[15]]()[GO[15]]();ntopng_events_manager[GO[23]](GO[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[GO[1]]();$(GO[16],l)[GO[0]](GO[17]),$(GO[18],l)[GO[0]](GO[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[GO[19]]()})(),l()),(e=>{$(GO[16])[GO[0]](e[GO[20]]),$(GO[18])[GO[0]](e[GO[21]])})(t)}))}$(document)[GO[24]]((()=>WO()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnRvcG5nLmpzIiwic291cmNlcyI6WyIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbnRvcC11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9lYnBmLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21vZGFsL21vZGFsLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy91dGlsaXRpZXMuanMiLCIuLi8uLi9odHRwX3NyYy92YWxpZGF0b3JzL250b3BuZy12YWxpZGF0b3JzLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmFsaWRhdG9ycy92YWxpZGF0b3JzLmpzIiwiLi4vLi4vaHR0cF9zcmMvc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvY2hhcnRzL3BpZS1jaGFydC5qcyIsIi4uLy4uL2h0dHBfc3JjL3NlcnZpY2VzL3NlcnZpY2VzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5wcm9kLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmlld3MvcHVibGljL2Jsb2cvYmxvZy1ub3RpZmljYXRpb24tdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvdnVlX25vZGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Ryb3Bkb3duLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy90YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0LXNlYXJjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uYXZiYXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmF2YmFyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMzQ0MDQ5ZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRlOTgxMWE4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvY2hhcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZhZTI0YTI4JmxhbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFkZWZmZTAmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMxMTljODNlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcmFuZ2UtcGlja2VyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFhZWU1OWVhJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0X3RhYmxlX3BhZ2UudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xvYWRpbmcudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3N3aXRjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9zcGlubmVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9ub3RlLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYmU5NzhjNCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXNuYXBzaG90LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWFsZXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtc3RhdHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtZmxvdy1oaXN0b3JpY2FsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMTRhZGU0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xpc3QtdGltZXNlcmllcy52dWUiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaG9zdF90b3BfdGFibGVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29uc3RhbnRzL3NubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvZmxvd19kZXZpY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvY29sb3JzLWludGVycG9sYXRpb24uanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kb3dubG9hZC1maWxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXRhdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL250b3BfdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zdGF0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFiLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYi1saXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lMDVhMzM3YSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01N2NlN2Y2MCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNkZWJjN2EzJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjFiNWRmMjUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9uZXR3b3JrLW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02ZjA4YjU3MyZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODAwYWI1MWUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hc3NldC1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY5YjIyODZlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWViMjQ3YjcmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNWJhMTM3OCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJmYmJlYmNmJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLWFwcGxpY2F0aW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wN2JlZTE0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXRyYWZmaWMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXBhY2tldHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGEtdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1ydWxlcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtcG9ydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtYW5hbHlzaXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utdmxhbi1wb3J0cy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWdncmVnYXRlZC1saXZlLWZsb3dzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXRlc3QtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLW5lZGdlLWFkZC1ydWxlLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtbmVkZ2UtY2hhbmdlLWRlZmF1bHQtcG9saWN5LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLW5lZGdlLXJ1bGVzLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWFwcGxpY2F0aW9uLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kZWxldGUtYXBwbGljYXRpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtZWRpdC1hcHBsaWNhdGlvbnMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmV0d29yay1kaXNjb3ZlcnkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbWFuYWdlLWNvbmZpZ3VyYXRpb25zLWJhY2t1cC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLXNubXAtZGV2aWNlLXJ1bGVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNubXAtZGV2aWNlLXJ1bGVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNubXAtZGV2aWNlcy1pbnRlcmZhY2VzLXNpbWlsYXJpdHkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdHMtcG9ydHMtYW5hbHlzaXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLW5lZGdlLWFkZC1yZXBlYXRlci1jb25maWcudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmVkZ2UtcmVwZWF0ZXJzLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1pbmFjdGl2ZS1ob3N0LWVwb2NoLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kb3dubG9hZC1pbmFjdGl2ZS1ob3N0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWluYWN0aXZlLWhvc3RzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWluYWN0aXZlLWhvc3QtZGV0YWlscy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1mbG93ZGV2aWNlLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLXNjYW4tY29uZmlybS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdXBkYXRlLXBlcmlvZGljaXR5LXNjYW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWFkZC12cy1ob3N0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS12dWxuZXJhYmlsaXR5LXNjYW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC12cy1yZXN1bHQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utb3Blbi1wb3J0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZWRpdC12cy1yZXBvcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLXJlcG9ydC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZmlsZS1zYXZlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWxlLW9wZW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbGUtdXBsb2FkLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtYm94LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtZW1wdHkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLWJhZGdlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtcGllLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtdGltZXNlcmllcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLXNhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtY2hlY2stZXhjbHVzaW9uLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9udG9wX3Z1ZS5qcyIsIi4uLy4uL2h0dHBfc3JjL2V4dGVuc2lvbnMvY2hhcnRfY29sb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwMTQtMjAgLSBudG9wLm9yZ1xuRGF0ZS5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkgeyAvL2F1dGhvcjogbWVpenpcbiAgICAgICAgdmFyIG8gPSB7XG4gICAgICAgICAgICAgICAgXCJNK1wiOiB0aGlzLmdldE1vbnRoKCkgKyAxLCAvL21vbnRoXG4gICAgICAgICAgICAgICAgXCJkK1wiOiB0aGlzLmdldERhdGUoKSwgICAgLy9kYXlcbiAgICAgICAgICAgICAgICBcImgrXCI6IHRoaXMuZ2V0SG91cnMoKSwgICAvL2hvdXJcbiAgICAgICAgICAgICAgICBcIm0rXCI6IHRoaXMuZ2V0TWludXRlcygpLCAvL21pbnV0ZVxuICAgICAgICAgICAgICAgIFwicytcIjogdGhpcy5nZXRTZWNvbmRzKCksIC8vc2Vjb25kXG4gICAgICAgICAgICAgICAgXCJxK1wiOiBNYXRoLmZsb29yKCh0aGlzLmdldE1vbnRoKCkgKyAzKSAvIDMpLCAgLy9xdWFydGVyXG4gICAgICAgICAgICAgICAgXCJTXCI6IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCkgLy9taWxsaXNlY29uZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKC8oeSspLy50ZXN0KGZvcm1hdCkpIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFJlZ0V4cC4kMSxcbiAgICAgICAgICAgICAgICAodGhpcy5nZXRGdWxsWWVhcigpICsgXCJcIikuc3Vic3RyKDQgLSBSZWdFeHAuJDEubGVuZ3RoKSk7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKG5ldyBSZWdFeHAoXCIoXCIgKyBrICsgXCIpXCIpLnRlc3QoZm9ybWF0KSlcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShSZWdFeHAuJDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWdFeHAuJDEubGVuZ3RoID09IDEgPyBvW2tdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwiMDBcIiArIG9ba10pLnN1YnN0cigoXCJcIiArIG9ba10pLmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xufVxuXG4vLyBFeHRlbmRlZCBkaXNhYmxlIGZ1bmN0aW9uIFxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdGhpcy5pcygnaW5wdXQsIGJ1dHRvbiwgdGV4dGFyZWEsIHNlbGVjdCcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxufSk7XG5cbmNvbnN0IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFID0gMC4wMDU7XG5cbmNvbnN0IFJFR0VYRVMgPSB7XG4gICAgICAgIGlwdjQ6IFN0cmluZy5yYXdgXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJGAsXG4gICAgICAgIGlwdjY6IFN0cmluZy5yYXdgXigoKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pOil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkkfF5cXHMqKCgoWzAtOUEtRmEtZl17MSw0fTopezd9KFswLTlBLUZhLWZdezEsNH18OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KDpbMC05QS1GYS1mXXsxLDR9fCgoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwyfSl8OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7NH0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSwzfSl8KCg6WzAtOUEtRmEtZl17MSw0fSk/OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezN9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNH0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsMn06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Mn0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw1fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwzfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsxfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDZ9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDR9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg6KCgoOlswLTlBLUZhLWZdezEsNH0pezEsN30pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNX06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSkpKCUuKyk/XFxzKikkYCxcbiAgICAgICAgZG9tYWluTmFtZTogU3RyaW5nLnJhd2BeKFthLXpBLVpdKFthLXpBLVpdfFswLTldKT9cXC5bYS16QS1aXXsyLDEzfXxbYS16QS1aMC05XShbXFwtXy5hLXpBLVowLTldezEsNjF9W2EtekEtWjAtOV0pP1xcLlthLXpBLVpdezIsMTN9fFthLXpBLVowLTldKFtcXC1fLmEtekEtWjAtOV17MSw2MX1bYS16QS1aMC05XSk/XFwuW2EtekEtWl17MiwzMH1cXC5bYS16QS1aXXsyLDN9KSRgLFxuICAgICAgICBwb3J0OiBTdHJpbmcucmF3YF4oWzAtOV17MSw0fXxbMS01XVswLTldezR9fDZbMC00XVswLTldezN9fDY1WzAtNF1bMC05XXsyfXw2NTVbMC0yXVswLTldfDY1NTNbMC01XSkkYCxcbiAgICAgICAgbGF0ZW5jeTogU3RyaW5nLnJhd2BeKFswLTldKlsuXSk/WzAtOV0rJGAsXG4gICAgICAgIHVybDogU3RyaW5nLnJhd2BeKGh0dHBzP1xcOlxcL1xcL1teXFwvXFxzXSsoXFwvLiopPykkYCxcbiAgICAgICAgZW1haWxVcmw6IFN0cmluZy5yYXdgXnNtdHBzPzpcXC9cXC9bXFwtYS16QS1aMC05Oi5dezEsMjU2fSRgLFxuICAgICAgICBtYWNBZGRyZXNzOiBTdHJpbmcucmF3YF4oWzAtOUEtRmEtZl17Mn06KXs1fShbMC05QS1GYS1mXXsyfSkkYCxcbiAgICAgICAgaG9zdG5hbWU6IFN0cmluZy5yYXdgXig/IVxccyokKVthLXpBLVowLTkuXzogXFwtXFwvXXsxLDI1MH18XlthLXpBLVowLTkuXzogXFwtXFwvXXsxLDI1MH1AWzAtOV17MCw1fWAsXG4gICAgICAgIHVzZXJuYW1lOiBTdHJpbmcucmF3YF5bYS16QS1aMC05Ll9AIS0/XXszLDMwfSRgLFxuICAgICAgICBzaW5nbGV3b3JkOiBTdHJpbmcucmF3YF4oPz1bYS16QS1aMC05Ll86XFwtXXszLDI1M30kKSg/IS4qW18uOlxcLV17Mn0pW15fLjpcXC1dLipbXl8uOlxcLV0kYCxcbiAgICBlbWFpbDogU3RyaW5nLnJhd2BeKFthLXpBLVowLTkuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl0rQFthLXpBLVowLTlcXC1dKyg/OlxcLlthLXpBLVowLTlcXC1dKykqKSR8XlthLXpBLVpcXGQuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl17MSwxMjh9JGAsXG4gICAgICAgIGVtYWlsQ29tbWFMaXN0OiBTdHJpbmcucmF3YF4oKD86W2EtekEtWjAtOS4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XStAW2EtekEtWjAtOVxcLV0rKD86XFwuW2EtekEtWjAtOVxcLV0rKSopfChbYS16QS1aXFxkLiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dezEsMTI4fSkpKD86LCgoPzpbYS16QS1aMC05LiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dK0BbYS16QS1aMC05XFwtXSsoPzpcXC5bYS16QS1aMC05XFwtXSspKil8KFthLXpBLVpcXGQuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl17MSwxMjh9KSkpKiRgLFxuICAgICAgICBodHRwczogU3RyaW5nLnJhd2BeaHR0cHM/OlxcL1xcLy4rJGAsXG4gICAgICAgIHRva2VuOiBTdHJpbmcucmF3YF5bMC05YS1mXXszMn1gLFxuICAgICAgICBzY29yZTogU3RyaW5nLnJhd2BeWzAtOV17MSw1fWAsXG4gICAgICAgIHRlbGVncmFtX2NoYW5uZWw6IFN0cmluZy5yYXdgXlswLTlcXC1dezEsMTV9YCxcbiAgICAgICAgcGFzc3dvcmQ6IFN0cmluZy5yYXdgXltcXHdcXC8kIVxcLygpPT9eKkBfLV17NSwzMX0kYCxcbiAgICAgICAgdGxzX2NlcnRpZmljYXRlOiBTdHJpbmcucmF3YF5bXj0sXSs9W149LF0rKCxcXHNbXj0sXSs9W149LF0rKSokYCxcbiAgICAgICAgZG9tYWluX25hbWVfbm90X3N0cmljdDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOVxcLV9+XSsoKFxcLlthLXpBLVowLTlcXC1ffl0rKSspJGAsXG4gICAgICAgIG5vbl9xdW90ZWRfdGV4dDogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS4tX10rJGAsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdG9wVXRpbHMge1xuXG4gIC8qIFNob3cgYW4gb3ZlcmxheSB0byBoaWRlIGxvYWRpbmcgKi9cbiAgc3RhdGljIHRvZ2dsZU92ZXJsYXlzKHRpbWUgPSA1MDApIHtcbiAgICAkKGAub3ZlcmxheWApLnRvZ2dsZSh0aW1lKTtcbiAgfVxuICBcbiAgc3RhdGljIHNob3dPdmVybGF5cyh0aW1lID0gNTAwKSB7XG4gICAgJChgLm92ZXJsYXlgKS5mYWRlSW4odGltZSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBoaWRlT3ZlcmxheXModGltZSA9IDUwMCkge1xuICAgICQoYC5vdmVybGF5YCkuZmFkZU91dCh0aW1lKTtcbiAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXQgUkVHRVhFUygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUkVHRVhFUztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRJUHY0UmVnZXhXaXRoQ0lEUigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBSRUdFWEVTLmlwdjQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtSRUdFWEVTLmlwdjQuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIDEpfShcXFxcLz8pKFxcXFxiKFswLTldfFsxMl1bMC05XXwzWzAtMl0pP1xcXFxiKSRgO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldElQdjZSZWdleFdpdGhDSURSKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IFJFR0VYRVMuaXB2Ni5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke1JFR0VYRVMuaXB2Ni5zdWJzdHJpbmcoMCwgbGVuZ3RoIC0gMSl9KFxcXFwvPylcXFxcYihbMC05XXxbMS05XVswLTldfDFbMDFdWzAtOV18MTJbMC04XSk/XFxcXGIkYDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNvbHZlIGEgaG9zdG5hbWUgYnkgZG9pbmcgYSBETlMgUmVzb2x2ZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBob3N0bmFtZSB0byByZXNvbHZlXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgYXN5bmMgcmVzb2x2ZUROUyhob3N0bmFtZSA9IFwibnRvcC5vcmdcIikge1xuXG4gICAgICAgICAgICAgICAgLy8gcmVzb2x2ZSB0aGUgaG9zdG5hbWUgYnkgZG9pbmcgYSBmZXRjaCByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBmZXRjaChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2Rucy9yZXNvbHZlLmx1YT9ob3N0bmFtZT0ke2hvc3RuYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpbnRzIG91dCB0aGUgZXJyb3IgaWYgdGhlIHJlcXVlc3QgZmFpbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gcmVzb2x2aW5nIGhvc3RuYW1lOiAke2Vycn1gKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSByZXF1ZXN0IGhhcyBmYWlsZWQgcmV0dXJuIGEgcGxhY2Vob2xkZXIgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAvLyBpbmRpY2F0aW5nIHRoZSBmYWlsdXJlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcmM6IC0xLCByY19zdHI6IFwiRkFJTEVEX0hUVFBfUkVRVUVTVFwiIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVwbGFjZSB0aGUgaW5wdXRzIHdoaWNoIGNvbnRhaW4gdGhlIFtkYXRhLXBhdHRlcm5dIGF0dHJpYnV0ZVxuICAgICAgICAgKiB3aXRoIHRoZSBbcGF0dGVybl0gYXR0cmlidXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGluaXREYXRhUGF0dGVybnMoKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggaW5wdXQgd2l0aCB0aGUgZGF0YS1wYXR0ZXJuIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgIC8vIHN1YnN0aXR1dGUgdGhlIGRhdGEtcGF0dGVybiB3aXRoIHRoZSByaWdodCByZWdleGVzXG4gICAgICAgICAgICAgICAgJChgaW5wdXRbZGF0YS1wYXR0ZXJuXWApLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGF0dGVybiBpcyBlbXB0eSB0aGVuIHByaW50IGEgd2FybiBpbnNpZGUgdGhlIGNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFQYXR0ZXJuID0gJCh0aGlzKS5kYXRhKCdwYXR0ZXJuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGFQYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQW4gZW1wdHkgZGF0YS1wYXR0ZXJuIG9uIGFuIGlucHV0IHdhcyBmb3VuZCFgLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidWlsZCB0aGUgcmVnZXhwIHBhdHRlcm4gZm9yIHRoZSBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IGRhdGFQYXR0ZXJuLnNwbGl0KCd8JykubWFwKHAgPT4gUkVHRVhFU1twXS50b1N0cmluZygpKS5qb2luKCd8Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2FkIHRoZSBwYXR0ZXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3BhdHRlcm4nLCBwYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgZGF0YS1wYXR0ZXJuIGZyb20gdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUF0dHIoJ2RhdGEtcGF0dGVybicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzX2dvb2RfaXB2NChpcHY0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY0KS50ZXN0KGlwdjQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzX2dvb2RfaXB2NihpcHY2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5pcHY2KS50ZXN0KGlwdjYpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzX21hY19hZGRyZXNzKG1hYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFJFR0VYRVMubWFjQWRkcmVzcykudGVzdChtYWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzTnVtZXJpYyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvXlxcZCskLy50ZXN0KHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBpc19uZXR3b3JrX21hc2sod2hhdCwgb3B0aW9uYWxfbWFzaykge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IHdoYXQuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIHZhciBtYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgaXBfYWRkcjtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtcy5sZW5ndGggIT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25hbF9tYXNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBfYWRkciA9IHdoYXQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwX2FkZHIgPSBlbGVtc1swXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFOdG9wVXRpbHMuaXNOdW1lcmljKGVsZW1zWzFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSBwYXJzZUludChlbGVtc1sxXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrIDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKE50b3BVdGlscy5pc19nb29kX2lwdjQoaXBfYWRkcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrID0gMzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXNrID4gMzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlwdjRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogaXBfYWRkcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogbWFza1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE50b3BVdGlscy5pc19nb29kX2lwdjYoZWxlbXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzayA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA9IDEyODtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hc2sgPiAxMjgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlwdjZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogaXBfYWRkcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogbWFza1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmYml0cyhiaXRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZXMgPSBbJ2JwcycsICdLYnBzJywgJ01icHMnLCAnR2JwcycsICdUYnBzJ107XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChiaXRzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIGlmIChiaXRzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChiaXRzID4gMCkgJiYgKGJpdHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBicHMnKTtcbiAgICAgICAgICAgICAgICB2YXIgYml0c19sb2cxMDAwID0gTWF0aC5sb2coYml0cykgLyBNYXRoLmxvZygxMDAwKVxuICAgICAgICAgICAgICAgIHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihiaXRzX2xvZzEwMDApKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDAgfHwgaXNOYU4oaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+PSBzaXplcy5sZW5ndGgpIHsgLy8gcHJldmVudHMgb3ZlcmZsb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCI+IFwiICsgc2l6ZXNbc2l6ZXMubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChiaXRzIC8gTWF0aC5wb3coMTAwMCwgaSkgKiAxMDApIC8gMTAwICsgJyAnICsgc2l6ZXNbaV1cbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IHBhcnNlRmxvYXQoYml0cyAvIE1hdGgucG93KDEwMDAsIGkpKS50b0ZpeGVkKDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0ICUgMSA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBNYXRoLnJvdW5kKHJldClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQgKyAnICcgKyBzaXplc1tpXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBleHBvcnRfcmF0ZShlcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChlcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydleHAvcycsICdLZXhwL3MnXTtcbiAgICAgICAgICAgICAgICBpZiAoZXBzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChlcHMgPiAwKSAmJiAoZXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgZXhwcy9zJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGVwcywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBleHBvcnRzX2Zvcm1hdChleHBvcnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZXhwb3J0cykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgZXhwb3J0c19sYWJlbCA9IGkxOG5fZXh0LmV4cG9ydHMudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFtleHBvcnRzX2xhYmVsLCAnSyAnICsgZXhwb3J0c19sYWJlbF07XG4gICAgICAgICAgICAgICAgaWYgKGV4cG9ydHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKGV4cG9ydHMgPiAwKSAmJiAoZXhwb3J0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGV4cHMvcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShleHBvcnRzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZiaXRzX2Zyb21fYnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChieXRlcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChOdG9wVXRpbHMuZmJpdHMoYnl0ZXMgKiA4KSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZnBhY2tldHMocHBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsncHBzJywgJ0twcHMnLCAnTXBwcycsICdHcHBzJywgJ1RwcHMnXTtcbiAgICAgICAgICAgICAgICBpZiAocHBzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHBzJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKHBwcywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmcG9pbnRzKHBwcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHBwcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ3B0L3MnLCAnS3B0L3MnLCAnTXB0L3MnLCAnR3B0L3MnLCAnVHB0L3MnXTtcbiAgICAgICAgICAgICAgICBpZiAocHBzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChwcHMgPiAwKSAmJiAocHBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgcHQvcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShwcHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmZsb3dzKGZwcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGZwcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ2ZwcycsICdLZnBzJywgJ01mcHMnLCAnR2ZwcycsICdUZnBzJ107XG4gICAgICAgICAgICAgICAgaWYgKGZwcyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgoZnBzID4gMCkgJiYgKGZwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGZwcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShmcHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZm1zZ3MobXBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAobXBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnbXNnL3MnLCAnS21zZy9zJywgJ01zZy9zJywgJ0dtc2cvcycsICdUbXNnL3MnXTtcbiAgICAgICAgICAgICAgICBpZiAobXBzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChtcHMgPiAwKSAmJiAobXBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgbXBzJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKG1wcywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmbWlsbGlzKG1zKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAobXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuICctJztcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplcyA9IFsnbXMnXTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShtcywgc2l6ZXMsIDEwMDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZm5vbmUodmFsKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiAnLSc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsICogMTAwKSAvIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmYWxlcnRzKGFwcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGFwcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChhcHMgKiAxMDApIC8gMTAwICsgJyBhbGVydHMvcyc7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmludCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciB4ID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmZsb2F0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHggPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMC47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZnBlcmNlbnQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCkgLyAxMDAgKyBcIiAlXCI7XG4gICAgICAgIH1cblxuICAgIHN0YXRpYyBwZXJjZW50YWdlKHZhbHVlLCB0b3RhbCkge1xuICAgICAgICBpZih0b3RhbCA+IDApIHtcbiAgICAgICAgICAgIHZhciBwY3RnID0gTWF0aC5yb3VuZCgodmFsdWUgKiAxMDAwMCkgLyB0b3RhbClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYocGN0ZyA+IDApIHtcbiAgICAgICAgICAgICAgICAvKiBUd28gZGVjaW1hbHMgKi9cbiAgICAgICAgICAgICAgICByZXR1cm4oXCIgWyBcIiArIChwY3RnLzEwMCkgKyBcIiAlIF0gXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybihcIlwiKSBcbiAgICB9XG5cbiAgICAgICAgc3RhdGljIGZkYXRlKHdoZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgZXBvY2ggPSB3aGVuICogMTAwMDtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGVwb2NoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoZCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHN0cmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0X3RyZW5kKGFjdHVhbCwgYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChhY3R1YWwgPT09IHVuZGVmaW5lZCkgfHwgKGJlZm9yZSA9PT0gdW5kZWZpbmVkKSB8fCAoYWN0dWFsID09IGJlZm9yZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLW1pbnVzXFxcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0dWFsID4gYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy11cFxcXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctZG93blxcXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgYWJicmV2aWF0ZVN0cmluZyhzdHIsIGxlbikge1xuICAgICAgICAgICAgICAgIGlmICghc3RyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGggPCBsZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIGxlbikgKyBcIi4uLlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHRvRml4ZWQyKG51bSkge1xuICAgICAgICAgICAgICAgIGlmICghbnVtKSByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtLnRvRml4ZWQoMik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGJ5dGVzIHRvIGh1bWFuIHJlYWRhYmxlIGZvcm1hdFxuICAgICAgICBzdGF0aWMgYnl0ZXNUb1NpemUoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChieXRlcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJlY2lzaW9uID0gMjtcbiAgICAgICAgICAgICAgICB2YXIga2lsb2J5dGUgPSAxMDI0O1xuICAgICAgICAgICAgICAgIHZhciBtZWdhYnl0ZSA9IGtpbG9ieXRlICogMTAyNDtcbiAgICAgICAgICAgICAgICB2YXIgZ2lnYWJ5dGUgPSBtZWdhYnl0ZSAqIDEwMjQ7XG4gICAgICAgICAgICAgICAgdmFyIHRlcmFieXRlID0gZ2lnYWJ5dGUgKiAxMDI0O1xuXG4gICAgICAgICAgICAgICAgaWYgKChieXRlcyA+PSAwKSAmJiAoYnl0ZXMgPCBraWxvYnl0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihieXRlcyAhPSAwKSAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGJ5dGVzLnRvRml4ZWQocHJlY2lzaW9uKSkgKyBcIiBCeXRlc1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChieXRlcykgKyBcIiBCeXRlc1wiO1xuICBcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYnl0ZXMgPj0ga2lsb2J5dGUpICYmIChieXRlcyA8IG1lZ2FieXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIGtpbG9ieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBLQic7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGJ5dGVzID49IG1lZ2FieXRlKSAmJiAoYnl0ZXMgPCBnaWdhYnl0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBtZWdhYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgTUInO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChieXRlcyA+PSBnaWdhYnl0ZSkgJiYgKGJ5dGVzIDwgdGVyYWJ5dGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gZ2lnYWJ5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIEdCJztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChieXRlcyA+PSB0ZXJhYnl0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIHRlcmFieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBUQic7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYnl0ZXMudG9GaXhlZChwcmVjaXNpb24pKSArICcgQnl0ZXMnO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGRyYXdUcmVuZChjdXJyZW50LCBsYXN0LCB3aXRoQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1taW51c1xcXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQgPiBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy11cFxcXCJcIiArIHdpdGhDb2xvciArIFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LWRvd25cXFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHRvZ2dsZUFsbFRhYnMoZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkID09PSB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNoaXN0b3JpY2FsLXRhYnMtY29udGFpbmVyXCIpLmZpbmQoXCJsaVwiKS5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpLmZpbmQoXCJhXCIpLmF0dHIoXCJkYXRhLXRvZ2dsZVwiLCBcInRhYlwiKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2hpc3RvcmljYWwtdGFicy1jb250YWluZXJcIikuZmluZChcImxpXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIikuZmluZChcImFcIikucmVtb3ZlQXR0cihcImRhdGEtdG9nZ2xlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGRpc2FibGVBbGxEcm9wZG93bnNBbmRUYWJzKCkge1xuICAgICAgICAgICAgICAgICQoXCJzZWxlY3RcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBOdG9wVXRpbHMudG9nZ2xlQWxsVGFicyhmYWxzZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBlbmFibGVBbGxEcm9wZG93bnNBbmRUYWJzKCkge1xuICAgICAgICAgICAgICAgICQoXCJzZWxlY3RcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgTnRvcFV0aWxzLnRvZ2dsZUFsbFRhYnModHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjYXBpdGFsaXplKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcyAmJiBzWzBdLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGFkZENvbW1hcyhuU3RyKSB7XG4gICAgICAgICAgICAgICAgblN0ciArPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgeCA9IG5TdHIuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSB4WzBdO1xuICAgICAgICAgICAgICAgIHZhciB4MiA9IHgubGVuZ3RoID4gMSA/ICcuJyArIHhbMV0gOiAnJztcbiAgICAgICAgICAgICAgICB2YXIgcmd4ID0gLyhcXGQrKShcXGR7M30pLztcbiAgICAgICAgICAgICAgICB3aGlsZSAocmd4LnRlc3QoeDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4MSA9IHgxLnJlcGxhY2Uocmd4LCAnJDEnICsgJywnICsgJyQyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB4MSArIHgyO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHNjYWxlVmFsdWUodmFsLCBzaXplcywgc2NhbGUsIGRlY2ltYWxzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PSAwKSByZXR1cm4gWzAsIHNpemVzWzBdXTtcbiAgICAgICAgICAgICAgICBsZXQgZmFjdG9yID0gZGVjaW1hbHMgPyAoMTAgKiBkZWNpbWFscykgOiAxMDtcblxuICAgICAgICAgICAgICAgIHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5sb2coc2NhbGUpKSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPCAwIHx8IGlzTmFOKGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPj0gc2l6ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gc2l6ZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gW01hdGgucm91bmQoKHZhbCAvIE1hdGgucG93KHNjYWxlLCBpKSkgKiBmYWN0b3IpIC8gZmFjdG9yLCBzaXplc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZm9ybWF0VmFsdWUodmFsLCBkZWNpbWFscykge1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnJywgJ0snLCAnTScsICdHJywgJ1QnXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKCh2YWwgPiAwKSAmJiAodmFsIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlY2ltYWxzID09IHVuZGVmaW5lZCkgZGVjaW1hbHMgPSAwO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZSh2YWwsIHNpemVzLCAxMDAwLCBkZWNpbWFscyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzWzBdICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZvcm1hdFBhY2tldHMobikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoTnRvcFV0aWxzLmFkZENvbW1hcyhuLnRvRml4ZWQoMCkpICsgXCIgUGt0c1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBieXRlc1RvVm9sdW1lKGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQiddO1xuICAgICAgICAgICAgICAgIGlmIChieXRlcyA9PSAwKSByZXR1cm4gJzAgQnl0ZXMnO1xuICAgICAgICAgICAgICAgIGlmICgoYnl0ZXMgPiAwKSAmJiAoYnl0ZXMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgXCIgQnl0ZXNcIik7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGJ5dGVzLCBzaXplcywgMTAyNCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChyZXNbMF0pICsgXCIgXCIgKyByZXNbMV07XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGljIGJ5dGVzVG9Wb2x1bWVBbmRMYWJlbChieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXMgPT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coMTAyNCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyhieXRlcyAvIE1hdGgucG93KDEwMjQsIGkpKS50b0ZpeGVkKDIpLCBzaXplc1tpXV07XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGljIGJpdHNUb1NpemUoYml0cywgZmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yID0gZmFjdG9yIHx8IDEwMDA7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydicHMnLCAnS2JwcycsICdNYnBzJywgJ0dicHMnLCAnVGJwcyddO1xuICAgICAgICAgICAgICAgIGlmIChiaXRzID09IDApIHJldHVybiAnMCBicHMnO1xuICAgICAgICAgICAgICAgIGlmICgoYml0cyA+IDApICYmIChiaXRzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArIFwiIGJwc1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoYml0cywgc2l6ZXMsIGZhY3Rvcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzWzBdLnRvRml4ZWQoMikgKyBcIiBcIiArIHJlc1sxXTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0aWMgYml0c1RvU2l6ZV9ub19jb21tYShiaXRzLCBmYWN0b3IpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3IgPSBmYWN0b3IgfHwgMTAwMDtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ2JwcycsICdLYnBzJywgJ01icHMnLCAnR2JwcycsICdUYnBzJ107XG4gICAgICAgICAgICAgICAgaWYgKGJpdHMgPT0gMCkgcmV0dXJuICcwIGJwcyc7XG4gICAgICAgICAgICAgICAgaWYgKChiaXRzID4gMCkgJiYgKGJpdHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgXCIgYnBzXCIpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShiaXRzLCBzaXplcywgZmFjdG9yKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNbMF0rIFwiIFwiICsgcmVzWzFdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHN0YXRpYyBzZWNvbmRzVG9UaW1lKHNlY29uZHMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRzIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjwgMSBzZWNcIilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgZGF5cyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDg2NDAwKVxuICAgICAgICAgICAgICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IoKHNlY29uZHMgLyAzNjAwKSAtIChkYXlzICogMjQpKVxuICAgICAgICAgICAgICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAvIDYwKSAtIChkYXlzICogMTQ0MCkgLSAoaG91cnMgKiA2MCkpXG4gICAgICAgICAgICAgICAgbGV0IHNlYyA9IHNlY29uZHMgJSA2MFxuICAgICAgICAgICAgICAgIGxldCBtc2cgPSBcIlwiLCBtc2dfYXJyYXkgPSBbXVxuXG4gICAgICAgICAgICAgICAgaWYgKGRheXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeWVhcnMgPSBNYXRoLmZsb29yKGRheXMgLyAzNjUpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZWFycyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5cyA9IGRheXMgJSAzNjVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSB5ZWFycyArIFwiIHllYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhcnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnICs9IFwic1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2dfYXJyYXkucHVzaChtc2cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IGRheXMgKyBcIiBkYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheXMgPiAxKSB7IG1zZyArPSBcInNcIiB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2dfYXJyYXkucHVzaChtc2cpXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBcIlwiXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhvdXJzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTApIHsgbXNnID0gXCIwXCIgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnICs9IGhvdXJzICsgXCI6XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG1pbnV0ZXMgPCAxMCkgeyBtc2cgKz0gXCIwXCIgfVxuICAgICAgICAgICAgICAgIG1zZyArPSBtaW51dGVzICsgXCI6XCI7XG4gICAgICAgICAgICAgICAgaWYgKHNlYyA8IDEwKSB7IG1zZyArPSBcIjBcIiB9XG4gICAgICAgICAgICAgICAgbXNnICs9IHNlYztcbiAgICAgICAgICAgICAgICBtc2dfYXJyYXkucHVzaChtc2cpXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbXNnX2FycmF5LmpvaW4oXCIsIFwiKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIG1zZWNUb1RpbWUobXNlYykge1xuICAgICAgICAgICAgICAgIGlmIChtc2VjID49IDEwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShtc2VjLzEwMDApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IE1hdGgucm91bmQobXNlYyAqIDEwMDApIC8gMTAwMC47XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKSArIFwiIG1zXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGVwb2NoMlNlZW4oZXBvY2gpIHtcbiAgICAgICAgICAgICAgICAvKiAwOC8wMS8xMyAxNToxMjozNyBbMTggbWluLCAxMyBzZWMgYWdvXSAqL1xuICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoZXBvY2ggKiAxMDAwKTtcbiAgICAgICAgICAgICAgICB2YXIgdGRpZmYgPSBNYXRoLmZsb29yKCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCkgLSBlcG9jaCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGQuZm9ybWF0KFwiZGQvTU0veXl5eSBoaDptbTpzc1wiKSArIFwiIFtcIiArIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKHRkaWZmKSArIFwiIGFnb11cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvKiB0aWNrcyBmb3IgZ3JhcGggeCBheGlzICovXG4gICAgICAgIHN0YXRpYyBncmFwaEdldFhBeGlzVGlja3NGb3JtYXQoZGlmZl9lcG9jaCkge1xuICAgICAgICAgICAgICAgIHZhciB0aWNrRm9ybWF0O1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpZmZfZXBvY2ggPD0gODY0MDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tGb3JtYXQgPSBcIiVIOiVNOiVTXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmX2Vwb2NoIDw9IDIgKiA4NjQwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja0Zvcm1hdCA9IFwiJWIgJWUsICVIOiVNOiVTXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tGb3JtYXQgPSBcIiViICVlXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aWNrRm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBwYXJhbXNFeHRlbmQoZGVmYXVsdHMsIG92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3ZlcnJpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHBhcmFtc1RvRm9ybShmb3JtLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBmb3JtID0gJChmb3JtKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9ICQoJzxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cIicgKyBrICsgJ1wiIHZhbHVlPVwiJyArIHBhcmFtc1trXSArICdcIj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXBwZW5kVG8oZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm07XG4gICAgICAgIH1cblxuICAgICAgICAvKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBqYXZhc2NyaXB0IG9iamVjdCB3aGVyZSBlYWNoIGstPnYgcGFpciBvZiB0aGUgaW5wdXQgb2JqZWN0XG4gICAgICAgICAqIHRyYW5zbGF0ZXMgaW50byB0d28gcGFpcnMgaW4gdGhlIG91dHB1dCBvYmplY3Q6IGEga2V5X1tpXS0+ayBhbmQgYSB2YWxfW2ldLT52LCB3aGVyZVxuICAgICAgICAgKiBpIGlzIGFuIGluY3JlbWVudGFsIGluZGV4LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgb3V0cHV0IG9iamVjdCBjYW4gdGhlbiBiZSBzZXJpYWxpemVkIHRvIGFuIFVSTC4gVGhpcyBjb252ZXJzaW9uIGlzIHJlcXVpcmVkIGZvclxuICAgICAgICAgKiBoYW5kbGluZyBzcGVjaWFsIGNoYXJhY3RlcnM6IHNpbmNlIG50b3BuZyBzdHJpcHMgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIF9HRVQga2V5cyxcbiAgICAgICAgICogX0dFVCB2YWx1ZXMgbXVzdCBiZSB1c2VkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIHBlcmZvcm1zIHRoZSBpbnZlcnNlIGNvbnZlcnNpb24gb2YgbHVhIHBhcmFtc1BhaXJzRGVjb2RlLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHBhcmFtc1BhaXJzRW5jb2RlKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzW1wia2V5X1wiICsgaV0gPSBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzW1widmFsX1wiICsgaV0gPSBwYXJhbXNba107XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBob3N0a2V5Mmhvc3RJbmZvKGhvc3Rfa2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZm87XG5cbiAgICAgICAgICAgICAgICBob3N0X2tleSA9IGhvc3Rfa2V5LnJlcGxhY2UoL19fX18vZywgXCI6XCIpO1xuICAgICAgICAgICAgICAgIGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX19fL2csIFwiL1wiKTtcbiAgICAgICAgICAgICAgICBob3N0X2tleSA9IGhvc3Rfa2V5LnJlcGxhY2UoL19fL2csIFwiLlwiKTtcblxuICAgICAgICAgICAgICAgIGluZm8gPSBob3N0X2tleS5zcGxpdChcIkBcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpbmZvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBoYW5kbGVfdGFiX3N0YXRlKG5hdl9vYmplY3QsIGRlZmF1bHRfdGFiKSB7XG4gICAgICAgICAgICAgICAgJCgnYScsIG5hdl9vYmplY3QpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBzdG9yZSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRhYiBpbiB0aGUgaGFzaCB2YWx1ZVxuICAgICAgICAgICAgICAgICQoXCIgPiBsaSA+IGFcIiwgbmF2X29iamVjdCkub24oXCJzaG93bi5icy50YWJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9ICQoZS50YXJnZXQpLmF0dHIoXCJocmVmXCIpLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgcHJldmVudCB0aGUgJ2p1bXAnIHRvIHRoZSBoYXNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIFwiI1wiICsgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIG9uIGxvYWQgb2YgdGhlIHBhZ2U6IHN3aXRjaCB0byB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRhYlxuICAgICAgICAgICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNoKSBoYXNoID0gXCIjXCIgKyBkZWZhdWx0X3RhYjtcbiAgICAgICAgICAgICAgICAkKCdhW2hyZWY9XCInICsgaGFzaCArICdcIl0nLCBuYXZfb2JqZWN0KS50YWIoJ3Nob3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBfYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkKCc8aW5wdXQ+JykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIH0pLmFwcGVuZFRvKGZvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogVXNlZCB3aGlsZSBzZWFyY2hpbmcgaG9zdHMgYSBhbmQgbWFjcyB3aXRoIHR5cGVhaGVhZCAqL1xuICAgICAgICBzdGF0aWMgbWFrZUZpbmRIb3N0QmVmb3JlU3VibWl0Q2FsbGJhY2soaHR0cF9wcmVmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZvcm0sIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvbnRleHQgJiYgZGF0YS5jb250ZXh0ID09IFwiaGlzdG9yaWNhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm8vZGJfc2VhcmNoLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PSBcImlwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcImlwXCIsIGRhdGEuaXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcIm1hY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJtYWNcIiwgZGF0YS5tYWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImNvbW11bml0eV9pZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJjb21tdW5pdHlfaWRcIiwgZGF0YS5jb21tdW5pdHlfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImphM19jbGllbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiamEzX2NsaWVudFwiLCBkYXRhLmphM19jbGllbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImphM19zZXJ2ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiamEzX3NlcnZlclwiLCBkYXRhLmphM19zZXJ2ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgLyogXCJob3N0bmFtZVwiICovIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm5hbWVcIiwgZGF0YS5ob3N0bmFtZSA/IGRhdGEuaG9zdG5hbWUgOiBkYXRhLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50eXBlID09IFwibWFjXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvbWFjX2RldGFpbHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcIm5ldHdvcmtcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0c19zdGF0cy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJuZXR3b3JrXCIsIGRhdGEubmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwic25tcFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byby9lbnRlcnByaXNlL3NubXBfaW50ZXJmYWNlX2RldGFpbHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwic25tcF9wb3J0X2lkeFwiLCBkYXRhLnNubXBfcG9ydF9pZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcInNubXBfZGV2aWNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9kZXZpY2VfZGV0YWlscy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiYXNuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdHNfc3RhdHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiYXNuXCIsIGRhdGEuYXNuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm1vZGVcIiwgXCJyZXN0b3JlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyB0c3RhbXBUb0RhdGVTdHJpbmcoaHRtbF90YWcsIGZvcm1hdCwgdGRpZmYpIHtcbiAgICAgICAgICAgICAgICB0ZGlmZiA9IHRkaWZmIHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IHBhcnNlSW50KGh0bWxfdGFnLmh0bWwoKSkgKyB0ZGlmZjtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxpemVkID0gZDMudGltZS5mb3JtYXQoZm9ybWF0KShuZXcgRGF0ZSh0aW1lc3RhbXAgKiAxMDAwKSk7XG4gICAgICAgICAgICAgICAgaHRtbF90YWcuaHRtbChsb2NhbGl6ZWQpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGl6ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgbm9IdG1sKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC88W14+XSs+L2csICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjbGVhbkN1c3RvbUhvc3RVcmwoaG9zdCkge1xuICAgICAgICAgICAgICAgIC8qIFJlbW92ZSBzdGFydGluZyBodHRwKHMpLiAqL1xuICAgICAgICAgICAgICAgIHJldHVybiBob3N0XG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXmh0dHA6XFwvXFwvL2dpLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eaHR0cHM6XFwvXFwvL2dpLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlbW92ZSBzdGFydGluZyB3d3cuICovXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXnd3d1xcLi9naSwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBSZW1vdmUgbm9uLWFsbG93ZWQgY2hhcmFjdGVycyAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teMC05YS16QS1aXFwuOlxcL18tXS9naSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjA5MDU1MS9wYXJzZS1xdWVyeS1zdHJpbmctaW4tamF2YXNjcmlwdCAqL1xuICAgICAgICBzdGF0aWMgcGFyc2VRdWVyeShxdWVyeVN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBwYWlycyA9IChxdWVyeVN0cmluZ1swXSA9PT0gJz8nID8gcXVlcnlTdHJpbmcuc3Vic3RyKDEpIDogcXVlcnlTdHJpbmcpLnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdIHx8ICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldEhpc3RvcnlQYXJhbWV0ZXJzKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJfcGFyYW1zID0gTnRvcFV0aWxzLnBhcnNlUXVlcnkod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld19wYXJhbXMgPSAkLmV4dGVuZChjdXJfcGFyYW1zLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfcXVlcnkgPSBcIj9cIiArICQucGFyYW0obmV3X3BhcmFtcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSBbbG9jYXRpb24ucHJvdG9jb2wsICcvLycsIGxvY2F0aW9uLmhvc3QsIGxvY2F0aW9uLnBhdGhuYW1lXS5qb2luKCcnKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVXJsICsgbmV3X3F1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHRydWUgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIGRpZmZlcmVudCBmcm9tIDIwMFxuICAgICAgICBzdGF0aWMgY2hlY2tfc3RhdHVzX2NvZGUoc3RhdHVzX2NvZGUsIHN0YXR1c190ZXh0LCAkZXJyb3JfbGFiZWwpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzX2RpZmZlcmVudCA9IHN0YXR1c19jb2RlICE9IDIwMDtcblxuICAgICAgICAgICAgICAgIGlmIChpc19kaWZmZXJlbnQgJiYgJGVycm9yX2xhYmVsICE9IG51bGwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBpMThuX2V4dC5yZXF1ZXN0X2ZhaWxlZF9tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1c19jb2RlICYmIHN0YXR1c190ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDogJHtzdGF0dXNfY29kZX0gLSAke3N0YXR1c190ZXh0fWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRlcnJvcl9sYWJlbC50ZXh0KG1lc3NhZ2UpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNfZGlmZmVyZW50ICYmICRlcnJvcl9sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChgJHtpMThuX2V4dC5yZXF1ZXN0X2ZhaWxlZF9tZXNzYWdlfTogJHtzdGF0dXNfY29kZX0gLSAke3N0YXR1c190ZXh0fWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBpc19kaWZmZXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUbyBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggaHR0cGRvY3MvdGVtcGxhdGVzL2NvbmZpZ19saXN0X2NvbXBvbmVudHMvaW1wb3J0X21vZGFsLmh0bWxcbiAgICAgICAgc3RhdGljIGltcG9ydE1vZGFsSGVscGVyKHBhcmFtcykge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMubG9hZENvbmZpZ1hIUikgeyB0aHJvdyAoXCJpbXBvcnRNb2RhbEhlbHBlcjo6IE1pc3NpbmcgJ2xvYWRDb25maWdYSFInIHBhcmFtXCIpOyB9XG5cbiAgICAgICAgICAgICAgICAkKGBpbnB1dCNpbXBvcnQtaW5wdXRgKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChgI2J0bi1jb25maXJtLWltcG9ydGApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoYCNpbXBvcnQtbW9kYWxgKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChgI2ltcG9ydC1pbnB1dGApLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1lcnJvclwiKS5oaWRlKCkucmVtb3ZlQ2xhc3MoJ3RleHQtd2FybmluZycpLmFkZENsYXNzKCdpbnZhbGlkLWZlZWRiYWNrJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGAjYnRuLWNvbmZpcm0taW1wb3J0YCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1tb2RhbFwiKS5vbihcInN1Ym1pdFwiLCBcImZvcm1cIiwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCAkYnV0dG9uID0gJCgnI2J0bi1jb25maXJtLWltcG9ydCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbi5hdHRyKFwiZGlzYWJsZWRcIiwgXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlYWQgY29uZmlndXJhdGlvbiBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gJCgnI2ltcG9ydC1pbnB1dCcpWzBdLmZpbGVzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChgJHtpMThuX2V4dC5ub19maWxlfWApLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUsIFwiVVRGLThcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsaWVudC1zaWRlIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3JtYXQgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb25Db25maWd1cmF0aW9uID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyBqc29uQ29uZmlndXJhdGlvbiA9IEpTT04ucGFyc2UocmVhZGVyLnJlc3VsdCk7IH0gY2F0Y2ggKGUpIHsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghanNvbkNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KGkxOG5fZXh0LnJlc3RfY29uc3RzW3Jlc3BvbnNlSlNPTi5yY19zdHJdIHx8ICdOb3QgSW1wbGVtZW50ZWQgWWV0Jykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1Ym1pdCBjb25maWd1cmF0aW9uIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmxvYWRDb25maWdYSFIocmVhZGVyLnJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZG9uZSgocmVzcG9uc2UsIHN0YXR1cywgeGhyKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChyZXNwb25zZS5yY19zdHIpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsIGNhbGwgdGhlIHN1Y2Nlc3NDYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9ICQoYGlucHV0W25hbWU9J2NvbmZpZ3VyYXRpb24nXTpjaGVja2VkYCkudmFsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSAoa2V5ID09ICdhbGwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGkxOG4oXCJtYW5hZ2VfY29uZmlndXJhdGlvbnMubWVzc2FnZXMuaW1wb3J0X2FsbF9zdWNjZXNzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaTE4bihcIm1hbmFnZV9jb25maWd1cmF0aW9ucy5tZXNzYWdlcy5pbXBvcnRfc3VjY2Vzc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBhIHN1Y2Nlc3MgYWxlcnQgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9hc3RVdGlscy5zaG93VG9hc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ2ltcG9ydC1jb25maWd1cmF0aW9uLWFsZXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGkxOG4oXCJzdWNjZXNzXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogMjAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LW1vZGFsXCIpLm1vZGFsKCdoaWRlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mYWlsKCh7IHJlc3BvbnNlSlNPTiB9KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFBBUlRJQUxfSU1QT1JUX1JDID0gLTI4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZmFpbHVyZUNhbGxiYWNrKHJlc3BvbnNlSlNPTik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUpTT04gJiYgcmVzcG9uc2VKU09OLnJjID4gMCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlSlNPTi5yYyA9PSBQQVJUSUFMX0lNUE9SVF9SQylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChgI2ltcG9ydC1lcnJvcmApLnJlbW92ZUNsYXNzKCdpbnZhbGlkLWZlZWRiYWNrJykuYWRkQ2xhc3MoJ3RleHQtd2FybmluZycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KGkxOG5fZXh0LnJlc3RfY29uc3RzW3Jlc3BvbnNlSlNPTi5yY19zdHJdIHx8IGkxOG5fZXh0LkZBSUxFRF9IVFRQX1JFUVVFU1QpLnNob3coKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFsd2F5cygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgc2VyaWFsaXplRm9ybUFycmF5KHNlcmlhbGl6ZWRBcnJheSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkQXJyYXkuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBpZiB0aGUgb2JqZWN0IGlzIGFuIGFycmF5ICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5uYW1lLmluY2x1ZGVzKCdbXScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHRoZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmoudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoudmFsdWUgPSBvYmoudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWRbb2JqLm5hbWVdID0gb2JqLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNsZWFuRm9ybShmb3JtU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAvKiByZW1vdmUgdmFsaWRhdGlvbiBmaWVsZHMgYW5kIHRyYWNrcyAqL1xuICAgICAgICAgICAgICAgICQoZm9ybVNlbGVjdG9yKS5maW5kKCdpbnB1dCxzZWxlY3QsdGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhgaXMtdmFsaWRgKS5yZW1vdmVDbGFzcyhgaXMtaW52YWxpZGApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8qIHJlc2V0IGFsbCB0aGUgdmFsdWVzICovXG4gICAgICAgICAgICAgICAgJChmb3JtU2VsZWN0b3IpWzBdLnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZSBhIGZldGNoIGNhbGwgd2l0aCBhIHRpbWVvdXQgb3B0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgZmV0Y2hXaXRoVGltZW91dCh1cmksIG9wdGlvbnMgPSB7fSwgdGltZSA9IDUwMDApIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7IC4uLm9wdGlvbnMsIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVyaSwgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNwb25zZSB0aW1lZCBvdXQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHNldFByZWYoYWN0aW9uLCBjc3JmLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQW4gYWN0aW9uIGtleSBtdXN0IGJlIGRlZmluZWQgdG8gc2V0IGEgcHJlZmVyZW5jZSFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZW1wdHkgPSAoKSA9PiB7IH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9ICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3VwZGF0ZV9wcmVmcy5sdWFgLCB7IGFjdGlvbjogYWN0aW9uLCBjc3JmOiBjc3JmIH0pO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuZG9uZShzdWNjZXNzIHx8IGVtcHR5KTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmZhaWwoZmFpbHVyZSB8fCBlbXB0eSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2x1ZSBzdHJpbmdzIGNvbnRhaW5lZCBpbiBhcnJheSBzZXBhcmF0ZWQgYnkgYSBjb21tYS5cbiAgICAgICAgICogQHBhcmFtIHthcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIHN0cmluZ3MuIEkuZS4gW1wiSGVsbG9cIiwgXCJXb3JsZFwiXVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbGltaXQgSG93IG1hbnkgd29yZHMgdGhlIHN0cmluZyBjb250YWluc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIGJ1aWx0IGJ5IGFycmF5J3MgZWxlbWVudHMuIGkuZTogXCJIZWxsbywgV29ybGRcIlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFycmF5VG9MaXN0U3RyaW5nKGFycmF5LCBsaW1pdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5ID09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID4gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpICsgYCAke2kxOG5fZXh0LmFuZF94X21vcmUucmVwbGFjZSgnJG51bScsIGFycmF5Lmxlbmd0aCAtIGxpbWl0KX1gO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5zbGljZSgwLCBsaW1pdCkuam9pbihcIiwgXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGJ1aWxkVVJMKGxvY2F0aW9uLCBwYXJhbXMgPSB7fSwgaGFzUmVmZXJlciA9IGZhbHNlLCByZWZlcmVyUGFyYW1zID0ge30pIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobG9jYXRpb24sIHdpbmRvdy5sb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW1zKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhhc1JlZmVyZXIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmVXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVmZXJlclBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZlVybC5zZWFyY2hQYXJhbXMuc2V0KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3JlZmVyZXInLCByZWZVcmwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldEVkaXRQb29sTGluayhocmVmLCBwb29sSWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGhyZWYsIHdpbmRvdy5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3Bvb2xfaWQnLCBwb29sSWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRQb29sTGluayhwb29sVHlwZSwgcG9vbElkID0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0LyR7cG9vbFR5cGV9L3Bvb2xzLmx1YT9wb29sPSR7cG9vbElkfWA7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgYXN5bmMgZ2V0UG9vbChwb29sVHlwZSwgaWQgPSAwKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9vbFR5cGUgPT09IG51bGwpIHRocm93ICdBIHBvb2wgdHlwZSBtdXN0IGJlIGRlZmluZWQhJztcblxuICAgICAgICAgICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBmZXRjaChOdG9wVXRpbHMuZ2V0UG9vbExpbmsocG9vbFR5cGUsIGlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb29sID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb29sLnJjIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB7fV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgcG9vbC5yc3BbMF1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB7fV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhdmUgdGhlIHNjYWxlIG9mIGVsZW1lbnQgaW5zaWRlIHRoZSBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSAkZWxlbWVudCBcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNjYWxlXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgc2F2ZUVsZW1lbnRTY2FsZSgkZWxlbWVudCwgc2NhbGUgPSB7d2lkdGg6IDAsIGhlaWdodDogMH0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBOdG9wVXRpbHMuZ2VuZXJhdGVTY2FsZUVsZW1lbnRLZXkoJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoc2NhbGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGxldCBpZGVudGlmaWNhdG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50SWQgPSAkZWxlbWVudC5hdHRyKCdpZCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRJZCAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmljYXRvciA9IGVsZW1lbnRJZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSAkZWxlbWVudC5hdHRyKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmljYXRvciA9IGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBgJHtpZGVudGlmaWNhdG9yfS0ke3BhZ2V9LXNjYWxlYDtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWQgdGhlIG9sZCBzY2FsZSB2YWx1ZSBvZnggZWxlbWVudCBmcm9tIHRoZSBsb2NhbCBzdG9yYWdlXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSAkZWxlbWVudCBcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBsb2FkRWxlbWVudFNjYWxlKCRlbGVtZW50KSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBOdG9wVXRpbHMuZ2VuZXJhdGVTY2FsZUVsZW1lbnRLZXkoJGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmaWxsRmllbGRJZlZhbGlkKCRmaWVsZCwgdmFsdWUpIHtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQudmFsKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjb3B5VG9DbGlwYm9hcmQodGV4dCwgaXRlbSkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICBlbC52YWx1ZSA9IHRleHQ7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdyZWFkb25seScsICcnKTtcbiAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZWwuc3R5bGUubGVmdCA9ICctOTk5OXB4JztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICBlbC5zZWxlY3QoKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICQoaXRlbSkuYXR0cihcInRpdGxlXCIsIFwiQ29waWVkIVwiKS50b29sdGlwKFwiZGlzcG9zZVwiKS50b29sdGlwKCkudG9vbHRpcChcInNob3dcIik7XG4gICAgJChpdGVtKS5yZW1vdmVBdHRyKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiKVxuICAgICQoaXRlbSkuYXR0cihcInRpdGxlXCIsIHRleHQpXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgc3RyaXBUYWdzKGh0bWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgdC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnRleHRDb250ZW50IHx8IHQuaW5uZXJUZXh0IHx8IFwiXCI7XG4gICAgICAgIH1cblxuICBzdGF0aWMgc2hvcnRlbkxhYmVsKGxhYmVsLCBsZW4sIGxhc3RfY2hhcikge1xuICAgIGxldCBzaG9ydGVuZWRfbGFiZWwgPSBsYWJlbFxuICAgIGlmKGxhYmVsLmxlbmd0aCA+IGxlbiArIDUpIHtcbiAgICAgIGlmKGxhc3RfY2hhcikge1xuICAgICAgICBsZXQgbGFzdF9pbmRleCA9IGxhYmVsLmxhc3RJbmRleE9mKGxhc3RfY2hhcilcbiAgICAgICAgY29uc3QgcmVxdWVzdGVkX2xhYmVsID0gbGFiZWwuc2xpY2UobGFzdF9pbmRleClcbiAgICAgICAgaWYobGVuID4gbGFzdF9pbmRleCkgXG4gICAgICAgICAgbGVuID0gbGFzdF9pbmRleFxuICAgICAgICBzaG9ydGVuZWRfbGFiZWwgPSBsYWJlbC5zbGljZSgwLCBsZW4pICsgXCIuLi4gXCIgKyByZXF1ZXN0ZWRfbGFiZWxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsLnNsaWNlKDAsIGxlbikgKyBcIi4uLlwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaG9ydGVuZWRfbGFiZWxcbiAgfVxuICAgICAgICBcbiAgc3RhdGljIHNvcnRBbHBoYWJldGljYWxseShhLCBiKSB7XG4gICAgY29uc3QgbmFtZUEgPSBhLmxhYmVsPy50b1VwcGVyQ2FzZSgpOyAvLyBpZ25vcmUgdXBwZXIgYW5kIGxvd2VyY2FzZVxuICAgIGNvbnN0IG5hbWVCID0gYi5sYWJlbD8udG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBpZiAobmFtZUEgPCBuYW1lQikgeyByZXR1cm4gLTE7IH1cbiAgICBpZiAobmFtZUEgPiBuYW1lQikgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLyogVGhpcyBmdW5jdGlvbiwgZ2l2ZW4gYSBuYW1lIGFuZCBhIHZhbHVlLCByZXR1cm4gYSBzdHJpbmdcbiAgICogZm9ybWF0dGVkIGluIHRoZSBmb2xsb3dpbmcgd2F5OlxuICAgKiBuYW1lIFt2YWx1ZV1cbiAgICAgICAgKiBJZiBtYXhfbmFtZV9sZW4gaXMgZGlmZmVyZW50IGZyb20gMCwgdGhlbiBpdCdzIGdvaW5nIHRvIGN1dCB0aGUgbmFtZSBzdHJpbmdcbiAgICAgICAgKiB0byBtYXhfbmFtZV9sZW5cbiAgICovXG4gIHN0YXRpYyBmb3JtYXROYW1lVmFsdWUobmFtZSwgdmFsdWUsIG1heF9uYW1lX2xlbikge1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IG5hbWU7XG4gICAgICAgICAgICAgICAgaWYobmFtZSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYobWF4X25hbWVfbGVuICYmIHR5cGVvZihtYXhfbmFtZV9sZW4pID09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IHRoaXMuc2hvcnRlbkxhYmVsKGxhYmVsLCBtYXhfbmFtZV9sZW4sICcuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gYCR7bGFiZWx9IFske3ZhbHVlfV1gIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxcbiAgfVxuXG4gIC8qIFRoaXMgZnVuY3Rpb24sIHJlbW92ZSBmcm9tIGEgc3RyaW5nIHRoZSBWTEFOIDBcbiAgICogbmFtZUAwIC0+IG5hbWVcbiAgICovXG4gIHN0YXRpYyByZW1vdmVWbGFuKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSBuYW1lXG4gICAgICAgICAgICAgICAgY29uc3Qgdmxhbl9pbmRleCA9IGxhYmVsLmxhc3RJbmRleE9mKCdAJyk7XG4gICAgICAgICAgICAgICAgaWYodmxhbl9pbmRleCAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmxhbiA9ICBsYWJlbC5zbGljZSh2bGFuX2luZGV4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2bGFuID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBsYWJlbC5zbGljZSgwLCB2bGFuX2luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxcbiAgfVxuXG4gIC8qIEZvcm1hdCBhbiBvYmplY3Qgd2l0aCBsYWJlbCBhbmQgdmFsdWUgZnJvbSBhIGNvbHVtbiByb3cgKi9cbiAgc3RhdGljIGZvcm1hdEdlbmVyaWNPYmoob2JqLCByb3cpIHtcbiAgICBsZXQgbGFiZWwgPSBvYmoubGFiZWwgPyBvYmoubGFiZWwgOiBvYmoudmFsdWU7XG4gICAgbGV0IGtleSA9IG9iai52YWx1ZTtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvKiBGb3JtYXQgYSBjb3VudHJ5IGZyb20gYSBjb2x1bW4gb2JqZWN0ICovXG4gIHN0YXRpYyBmb3JtYXRDb3VudHJ5KG9iaiwgcm93KSB7XG4gICAgbGV0IGNvdW50cnlfY29kZSA9IG9iai52YWx1ZTtcbiAgICBsZXQgbGFiZWwgPSBvYmoubGFiZWwgPyBvYmoubGFiZWwgOiBvYmoudmFsdWU7XG4gICAgcmV0dXJuIGAke2xhYmVsfSA8aW1nIHNyYz1cIi9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0ke2NvdW50cnlfY29kZS50b0xvd2VyQ2FzZSgpfVwiPmA7XG4gIH1cblxuICAvKiBGb3JtYXQgYW4gaG9zdCBmcm9tIGEgY29sdW1uIG9iamVjdCAqL1xuICBzdGF0aWMgZm9ybWF0SG9zdChvYmosIHJvdywgaXNfY2xpZW50KSB7XG4gICAgbGV0IGxhYmVsID0gXCJcIjtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG4gICAgLyogTGluayAqL1xuICAgIGxldCBob3N0X2tleSA9IG9iai5pcDtcbiAgICBpZiAocm93LnZsYW5faWQgJiYgcm93LnZsYW5faWQudmFsdWUpXG4gICAgICBob3N0X2tleSA9IGhvc3Rfa2V5ICsgJ0AnICsgcm93LnZsYW5faWQudmFsdWU7XG5cbiAgICAvKiBMYWJlbCAqL1xuICAgIGxhYmVsID0gb2JqLmxhYmVsID8gb2JqLmxhYmVsIDogb2JqLnZhbHVlO1xuICAgIGlmIChyb3cudmxhbl9pZCAmJiByb3cudmxhbl9pZC5sYWJlbClcbiAgICAgIGxhYmVsICs9IGBAJHtyb3cudmxhbl9pZC5sYWJlbH1gO1xuXG4gICAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YWAsIHsgaG9zdDogaG9zdF9rZXl9KTtcbiAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtsYWJlbH08L2E+YDtcblxuICAgIC8qIENvdW50cnkgKi9cbiAgICBsZXQgY291bnRyeV9vYmogPSBpc19jbGllbnQgPyByb3cuY2xpX2NvdW50cnkgOiByb3cuc3J2X2NvdW50cnk7XG4gICAgaWYgKCFjb3VudHJ5X29iaiAmJiByb3cuY291bnRyeSkgY291bnRyeV9vYmogPSByb3cuY291bnRyeTtcbiAgICBpZiAoY291bnRyeV9vYmogJiYgY291bnRyeV9vYmoudmFsdWUpXG4gICAgICBsYWJlbCArPSBgIDxpbWcgc3JjPVwiJHtodHRwX3ByZWZpeH0vZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJHtjb3VudHJ5X29iai52YWx1ZS50b0xvd2VyQ2FzZSgpfVwiIHRpdGxlPVwiJHtjb3VudHJ5X29iai50aXRsZX1cIj48L2E+YDtcblxuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIC8qIEZvcm1hdCBhIG5ldHdvcmsgZnJvbSBhIGNvbHVtbiBvYmplY3QgKi9cbiAgc3RhdGljIGZvcm1hdE5ldHdvcmsob2JqLCByb3cpIHtcbiAgICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG5cbiAgICAvKiBMaW5rICovXG4gICAgbGV0IG5ldHdvcmtfa2V5ID0gb2JqLnZhbHVlO1xuXG4gICAgLyogTGFiZWwgKi9cbiAgICBsYWJlbCA9IG9iai5sYWJlbCA/IG9iai5sYWJlbCA6IG9iai52YWx1ZTtcbiAgICBpZiAocm93LnZsYW5faWQgJiYgcm93LnZsYW5faWQubGFiZWwpXG4gICAgICBsYWJlbCArPSBgQCR7cm93LnZsYW5faWQubGFiZWx9YDtcblxuICAgIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RzX3N0YXRzLmx1YWAsIHsgbmV0d29yazogbmV0d29ya19rZXl9KTtcbiAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtsYWJlbH08L2E+YDtcblxuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIC8qIFRoaXMgZnVuY3Rpb24gY29udmVydHMgYW4gaXAgdG8gYSBudW1iZXIgZXF1YWxlIHRvIHRoZSBpcCBidXQgd2l0aG91dCAuIG9yIDo6IGluIGNhc2Ugb2YgaXB2NlxuICAgKiB0aGlzIGlzIG5lZWRlZCBpbiBjYXNlIG9mIG9yZGVyaW5nXG4gICAqL1xuICBzdGF0aWMgY29udmVydElQQWRkcmVzcyhhKSB7XG4gICAgICAgIHZhciBpLCBpdGVtO1xuICAgICAgICB2YXIgbSwgbiwgdDtcbiAgICAgICAgdmFyIHgsIHhhO1xuXG4gICAgICAgIGlmICghYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgYSA9IGEucmVwbGFjZSgvPFtcXHNcXFNdKj8+L2csIFwiXCIpO1xuICAgICAgICAvL0lQdjQ6UG9ydFxuICAgICAgICAgICAgICAgIHQgPSBhLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICBpZiAodC5sZW5ndGggPT0gMil7XG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gdFswXS5zcGxpdChcIi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IGEuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgbiA9IGEuc3BsaXQoXCI6XCIpO1xuICAgICAgICB4ID0gXCJcIjtcbiAgICAgICAgeGEgPSBcIlwiO1xuXG4gICAgICAgIGlmIChtLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgICAgICAgLy8gSVBWNFxuICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gbVtpXTtcblxuICAgICAgICAgICAgICAgIGlmKGl0ZW0ubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gXCIwMFwiICsgaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpdGVtLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IFwiMFwiICsgaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBJUFY2XG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IG5baV07XG5cbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhhICs9IFwiOlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKGl0ZW0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0ubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhhICs9IFwiMDAwXCIgKyBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpdGVtLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YSArPSBcIjAwXCIgKyBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpdGVtLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YSArPSBcIjBcIiArIGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhhICs9IGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQYWRkaW5nIHRoZSA6OlxuICAgICAgICAgICAgICAgIG4gPSB4YS5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICAgICAgdmFyIHBhZGREb25lID0gMDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IG5baV07XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDAgJiYgcGFkZERvbmUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBhZGRpbmcgPSAwIDsgcGFkZGluZyA8ICgzMi1jb3VudCkgOyBwYWRkaW5nKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkRG9uZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geDtcbiAgfVxuXG4gIC8qIEZvcm1hdCBhbiBBUyBmcm9tIGEgY29sdW1uIG9iamVjdCAqL1xuICBzdGF0aWMgZm9ybWF0QVNOKG9iaiwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gXCJcIjtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG4gICAgLyogTGluayAqL1xuICAgIGxldCBhc25fa2V5ID0gb2JqLnZhbHVlO1xuXG4gICAgLyogTGFiZWwgKi9cbiAgICBsYWJlbCA9IG9iai5sYWJlbCA/IG9iai5sYWJlbCA6IG9iai52YWx1ZTtcblxuICAgIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RzX3N0YXRzLmx1YWAsIHsgYXNuOiBhc25fa2V5fSk7XG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7bGFiZWx9PC9hPmA7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSkge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXJvdyBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC05IHByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy13YXJuaW5nXCIgYXJpYS12YWx1ZW5vdz1cIiR7cGVyY2VudGFnZX1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAke3BlcmNlbnRhZ2V9JTtcIj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xcIj4gJHtwZXJjZW50YWdlfSAlPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gXG4gIH1cblxuICBzdGF0aWMgY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2VfMSwgcGVyY2VudGFnZV8yLCBsYWJlbF8xLCBsYWJlbF8yKSB7XG4gICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtcm93XCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgcHJvZ3Jlc3NcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIGJnLXdhcm5pbmdcIiBhcmlhLXZhbHVlbm93PVwiJHtwZXJjZW50YWdlXzF9XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwiMTAwXCIgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50YWdlXzF9JTtcIj4ke2xhYmVsXzF9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy1zdWNjZXNzXCIgYXJpYS12YWx1ZW5vdz1cIiR7cGVyY2VudGFnZV8yfVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6ICR7cGVyY2VudGFnZV8yfSU7XCI+JHtsYWJlbF8yfTwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmBcbiAgfVxuXG4gIC8qIFJldHVybiB0aGUgbnVtYmVyIG9mIHJvd3MgYXZhaWxhYmxlIGluIGEgdGFibGUgKi9cbiAgc3RhdGljIGdldE51bVRhYmxlUm93cygpIHtcbiAgICByZXR1cm4gWzEwLCAyMCwgNTAsIDEwMF07XG4gIH1cblxuICBzdGF0aWMgZm9ybWF0QXBleENoYXJ0TGFiZWxGcm9tWGFuZE5hbWUoe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgIGNvbnN0IG5hbWUgPSBzZXJpZVtcIm5hbWVcIl1cbiAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgcmV0dXJuIChgXG4gICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7bmFtZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYClcbiAgfVxuXG4gIHN0YXRpYyBhcGV4Q2hhcnRKdW1wVG9BbGVydHMoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgY29uc3QgeyBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSA9IGNvbmZpZztcbiAgICBjb25zdCB7IHNlcmllcyB9ID0gY29uZmlnLmNvbmZpZztcbiAgICBpZiAoc2VyaWVzSW5kZXggPT09IC0xKSByZXR1cm47XG4gICAgaWYgKHNlcmllcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBjb25zdCBzZXJpZSA9IHNlcmllc1tzZXJpZXNJbmRleF07XG4gICAgY29uc3QgYmFzZV91cmwgPSBzZXJpZS5iYXNlX3VybCB8fCBzZXJpZXNbMF1bJ2Jhc2VfdXJsJ11cbiAgICBjb25zdCBkZWZhdWx0X3VybCA9IHNlcmllLnN0YXJ0X3VybCB8fCBzZXJpZXNbMF1bJ3N0YXJ0X3VybCddXG4gICAgaWYgKGJhc2VfdXJsICE9IG51bGwgJiYgZGVmYXVsdF91cmwgIT0gbnVsbCkge1xuICAgICAgY29uc3Qgc2VhcmNoID0gc2VyaWUuZGF0YVtkYXRhUG9pbnRJbmRleF0ubWV0YS51cmxfcXVlcnk7XG4gICAgICBsb2NhdGlvbi5ocmVmID0gYCR7YmFzZV91cmx9PyR7ZGVmYXVsdF91cmx9JHtzZWFyY2h9YDtcbiAgICB9XG4gIH1cblxuXG4gIHN0YXRpYyBhcGV4Q2hhcnRKdW1wVG9Ib3N0RGV0YWlscyhldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICBjb25zdCB7IHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHsgc2VyaWVzIH0gPSBjb25maWcuY29uZmlnO1xuICAgIGlmIChzZXJpZXNJbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICBpZiAoc2VyaWVzID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIGNvbnN0IHNlcmllID0gc2VyaWVzW3Nlcmllc0luZGV4XTtcblxuICAgIGNvbnN0IGJhc2VfdXJsID0gc2VyaWUuYmFzZV91cmwgfHwgc2VyaWVzWzBdWydiYXNlX3VybCddXG4gICAgXG4gICAgaWYgKGJhc2VfdXJsICE9IG51bGwgKSB7XG4gICAgICBjb25zdCB1cmwgPSBgJHtiYXNlX3VybH0/JHtzZXJpZS5kYXRhW2RhdGFQb2ludEluZGV4XS5tZXRhLnVybF9xdWVyeX1gO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xuICAgIH1cbiAgfVxuXG4gIFxuICBzdGF0aWMgZm9ybWF0QXBleENoYXJ0TGFiZWxGcm9tWGFuZFkoe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgIFxuICAgIGNvbnN0IHhfdmFsdWUgPSBzZXJpZVtcInhcIl07XG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7eF92YWx1ZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYClcbiAgfVxufVxuXG4kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIGlucHV0cyB3aXRoICdwYXR0ZXJuJyBkYXRhIGF0dHJpYnV0ZVxuICAgICAgICAvLyB0aGVuIGluaXRpYWxpemUgdGhlbVxuICAgICAgICBOdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xufSk7XG5cbiIsIi8vIDIwMTYtMTkgLSBudG9wLm9yZ1xuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3codGFibGUpIHtcbiAgJChcInRib2R5IHRyLmVtcHR5Um93XCIsICQodGFibGUpKS5yZW1vdmUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEVtcHR5Um93KHRhYmxlLCBlbXB0eV9zdHIpIHtcbiAgdmFyIGNvbHVtbnMgPSAkKFwidGhlYWQgdGhcIiwgJCh0YWJsZSkpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgIHJldHVybiAkKHRoaXMpLmNzcygnZGlzcGxheScpICE9ICdub25lJztcbiAgfSkubGVuZ3RoO1xuICAkKFwidGJvZHlcIiwgJCh0YWJsZSkpLmh0bWwoJzx0ciBjbGFzcz1cImVtcHR5Um93XCI+PHRkIGNvbHNwYW49XCInICsgY29sdW1ucyArICdcIj48aT4nICsgZW1wdHlfc3RyICsgJzwvaT48L3RkPjwvdHI+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyh0YWJsZSkge1xuICAgcmV0dXJuICQoXCJ0cjpub3QoLmVtcHR5Um93KVwiLCAkKHRhYmxlKSkubGVuZ3RoIC0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUlzRW1wdHkodGFibGUpIHtcbiAgcmV0dXJuIGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zKHRhYmxlKSA9PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0QnlGb3JtKGZvcm0pIHtcbiAgcmV0dXJuICQoXCJ0YWJsZVwiLCAkKFwiI2R0LXRvcC1kZXRhaWxzXCIsICQoZm9ybSkpLnBhcmVudCgpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlVW5kb0FkZFJvdyhuZXdfcm93LCBlbXB0eV9zdHIsIGJ0X3RvX2VuYWJsZSwgY2FsbGJhY2tfc3RyKSB7XG4gIGlmIChidF90b19lbmFibGUpXG4gICAgICQoYnRfdG9fZW5hYmxlKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcblxuICB2YXIgZm9ybSA9ICQobmV3X3JvdykuY2xvc2VzdChcImZvcm1cIik7XG4gICQobmV3X3JvdykucmVtb3ZlKCk7XG4gIGF5c1VwZGF0ZUZvcm0oZm9ybSk7XG4gIHZhciBkdCA9IGRhdGF0YWJsZUdldEJ5Rm9ybShmb3JtKTtcblxuICBpZiAoZGF0YXRhYmxlSXNFbXB0eShkdCkpXG4gICAgIGRhdGF0YWJsZUFkZEVtcHR5Um93KGR0LCBlbXB0eV9zdHIpO1xuXG4gICBpZiAoY2FsbGJhY2tfc3RyKVxuICAgICAgLy8gaW52b2tlXG4gICAgICB3aW5kb3dbY2FsbGJhY2tfc3RyXShuZXdfcm93KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUZvckVhY2hSb3codGFibGUsIGNhbGxiYWNrcykge1xuICAgJChcInRyOm5vdCg6Zmlyc3QpXCIsIHRhYmxlKS5lYWNoKGZ1bmN0aW9uKHJvd19pKSB7XG4gICAgICBpZih0eXBlb2YgY2FsbGJhY2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICBjYWxsYmFja3MuYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgdmFyIGk7XG4gICAgICAgICBmb3IgKGk9MDsgaTxjYWxsYmFja3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBjYWxsYmFja3NbaV0uYmluZCh0aGlzKShyb3dfaSk7XG4gICAgICB9XG4gICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgbGFiZWwsIGJzX2NsYXNzLCBjYWxsYmFja19zdHIsIGxpbmssIHZpc2libGUgPSB0cnVlLCB0aXRsZSA9ICcnKSB7XG4gICBpZiAoJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmZpbmQoJ2Rpdi5kLWZsZXgnKS5sZW5ndGggPT0gMCkge1xuICAgICAgJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmVtcHR5KCk7XG4gICAgICAkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuYXBwZW5kKCQoXCI8ZGl2IGNsYXNzPSdkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlcic+PC9kaXY+XCIpKTtcbiAgIH1cbiAgICQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5maW5kKCcuZC1mbGV4JykuYXBwZW5kKCc8YSBocmVmPVwiJyArIGxpbmsgKyBgXCIgdGl0bGU9JyR7dGl0bGV9JyBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBteC0xICR7YnNfY2xhc3N9ICR7IXZpc2libGUgPyAnZGlzYWJsZWQnIDogJyd9XCIgb25jbGljaz1cImAgKyBjYWxsYmFja19zdHIgKyAnXCIgcm9sZT1cImJ1dHRvblwiPicgKyBsYWJlbCArICc8L2E+Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGNhbGxiYWNrX3N0ciwgbGFiZWwpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWRhbmdlclwiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHRydWUsICdEZWxldGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgY2FsbGJhY2tfc3RyLCBsYWJlbCwgdmlzaWJsZSA9IHRydWUsIHRpdGxlID0gJycpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgY2FsbGJhY2tfc3RyLCBcImphdmFzY3JpcHQ6dm9pZCgwKVwiLCB2aXNpYmxlLCB0aXRsZSk7XG59XG4gICAgXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBjYWxsYmFja19zdHIsIGxhYmVsLCB0aXRsZSA9ICcnLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4td2FybmluZ1wiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHZpc2libGUsIHRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGxpbmssIGxhYmVsLCB0aXRsZSA9ICcnKSB7XG4gICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLWluZm9cIiwgXCJcIiwgbGluaywgdHJ1ZSwgdGl0bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSh0cl9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zKSB7XG4gICBvcHRpb25zID0gTnRvcFV0aWxzLnBhcmFtc0V4dGVuZCh7XG4gICAgICBvbl9jaGFuZ2U6ICQubm9vcCwgICAgICAgICAgICAgICAgICAgICAvKiBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3QgaW5wdXQgY2hhbmdlcyAqL1xuICAgICAgc2VsZWN0b3JfZm46IGZ1bmN0aW9uKG9iaikgeyAgICAgICAgICAgLyogQSBjYWxsYmFjayB3aGljaCByZWNlaXZlcyBhIHRyIG9iamVjdCBhbmQgcmV0dXJucyBhIHNpbmdsZSBzZWxlY3QgaW5wdXQgKi9cbiAgICAgICAgIHJldHVybiBvYmouZmluZChcInNlbGVjdFwiKS5maXJzdCgpO1xuICAgICAgfSxcbiAgIH0sIG9wdGlvbnMpO1xuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuKHRoaXNfc2VsZWN0LCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGNhbGxiYWNrKSB7XG4gICAgICAkKFwiW2lkXj1cIiArIGFkZGVkX3Jvd3NfcHJlZml4ICsgXCJdXCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgIHZhciBvdGhlciA9IHNlbGVjdG9yX2ZuKCQodGhpcykpO1xuICAgICAgICAgaWYgKG90aGVyWzBdICE9IHRoaXNfc2VsZWN0WzBdKVxuICAgICAgICAgICAgY2FsbGJhY2sob3RoZXIpO1xuICAgICAgfSk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhvcHRpb25fb2JqLCBlbmFibGUpIHtcbiAgICAgIGlmIChlbmFibGUpIHtcbiAgICAgICAgIG9wdGlvbl9vYmoucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhciBzZWxlY3Rfb2JqID0gb3B0aW9uX29iai5jbG9zZXN0KFwic2VsZWN0XCIpO1xuICAgICAgICAgdmFyIHNob3VsZF9yZXNldCA9IChzZWxlY3Rfb2JqLnZhbCgpID09IG9wdGlvbl9vYmoudmFsKCkpO1xuICAgICAgICAgb3B0aW9uX29iai5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcblxuICAgICAgICAgaWYoc2hvdWxkX3Jlc2V0KSB7XG4gICAgICAgICAgICB2YXIgbmV3X3ZhbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKS52YWwoKTtcbiAgICAgICAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgICAgICAgc2VsZWN0X29iai5hdHRyKFwiZGF0YS1vbGQtdmFsXCIsIG5ld192YWwpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlKGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgY2hhbmdlX2NhbGxiYWNrKSB7XG4gICAgICB2YXIgb2xkX3ZhbHVlID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1vbGQtdmFsXCIpIHx8IFwiXCI7XG4gICAgICB2YXIgbmV3X3ZhbHVlID0gJCh0aGlzKS52YWwoKSB8fCBcIlwiO1xuICAgICAgdmFyIG90aGVycyA9IFtdO1xuXG4gICAgICBpZiAob2xkX3ZhbHVlID09IG5ld192YWx1ZSlcbiAgICAgICAgIG9sZF92YWx1ZSA9IFwiXCI7XG5cbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oJCh0aGlzKSwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKG90aGVyLmZpbmQoXCJvcHRpb25bdmFsdWU9J1wiICsgb2xkX3ZhbHVlICsgXCInXVwiKSwgdHJ1ZSk7XG4gICAgICAgICBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMob3RoZXIuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBuZXdfdmFsdWUgKyBcIiddXCIpLCBmYWxzZSk7XG4gICAgICAgICBvdGhlcnMucHVzaChvdGhlcik7XG4gICAgICB9KTtcblxuICAgICAgY2hhbmdlX2NhbGxiYWNrKCQodGhpcyksIG9sZF92YWx1ZSwgbmV3X3ZhbHVlLCBvdGhlcnMsIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyk7XG5cbiAgICAgICQodGhpcykuYXR0cihcImRhdGEtb2xkLXZhbFwiLCBuZXdfdmFsdWUpO1xuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPbkFkZFNlbGVjdEVudHJ5KHNlbGVjdF9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbikge1xuICAgICAgc2VsZWN0X29iai52YWwoXCJcIik7XG5cbiAgICAgIC8vIFRyaWdnZXIgYW4gdXBkYXRlIG9uIG90aGVyIGlucHV0cyBpbiBvcmRlciB0byBkaXNhYmxlIGVudHJpZXMgb24gdGhlIHNlbGVjdF9vYmpcbiAgICAgIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4oc2VsZWN0X29iaiwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgLy9kYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMoc2VsZWN0X29iai5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIG90aGVyLnZhbCgpICsgXCInXVwiKSwgZmFsc2UpO1xuICAgICAgICAgb3RoZXIudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBzZWxlY3QgZmlyc3QgYXZhaWxhYmxlIGVudHJ5XG4gICAgICB2YXIgbmV3X3NlbCA9IHNlbGVjdF9vYmouZmluZChcIm9wdGlvbjpub3QoW2Rpc2FibGVkXSlcIikuZmlyc3QoKTtcbiAgICAgIHZhciBuZXdfdmFsID0gbmV3X3NlbC52YWwoKTtcblxuICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIG90aGVyIGVudHJpZXNcbiAgICAgIHNlbGVjdF9vYmoudmFsKG5ld192YWwpO1xuICAgICAgc2VsZWN0X29iai50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgfVxuXG4gICB2YXIgc2VsZWN0ID0gb3B0aW9ucy5zZWxlY3Rvcl9mbih0cl9vYmopO1xuICAgc2VsZWN0Lm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKCkgeyBkYXRhdGFibGVPblNlbGVjdEVudHJ5Q2hhbmdlLmJpbmQodGhpcykoYWRkZWRfcm93c19wcmVmaXgsIG9wdGlvbnMuc2VsZWN0b3JfZm4sIG9wdGlvbnMub25fY2hhbmdlKTsgfSk7XG4gICBzZWxlY3Qub24oXCJyZW1vdmVcIiwgZnVuY3Rpb24oKSB7JCh0aGlzKS52YWwoXCJcIikudHJpZ2dlcihcImNoYW5nZVwiKX0pO1xuICAgZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeShzZWxlY3QsIGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zLnNlbGVjdG9yX2ZuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUlzTGFzdFBhZ2UodGFibGUpIHtcbiAgIHZhciBsYXN0cGFnZSA9ICQoXCIjZHQtYm90dG9tLWRldGFpbHMgLnBhZ2luYXRpb24gbGk6bnRoLWxhc3QtY2hpbGQoMylcIiwgJCh0YWJsZSkpO1xuICAgcmV0dXJuICEoKGxhc3RwYWdlLmxlbmd0aCA9PSAxKSAmJiAobGFzdHBhZ2UuaGFzQ2xhc3MoXCJhY3RpdmVcIikgPT0gZmFsc2UpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUdldENvbHVtbih0YWJsZSwgaWRfa2V5LCBpZF92YWx1ZSkge1xuICAgdmFyIHJlcyA9IHRhYmxlLmRhdGEoXCJkYXRhdGFibGVcIikucmVzdWx0c2V0LmRhdGEuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtW2lkX2tleV0gPT09IGlkX3ZhbHVlO1xuICAgfSk7XG5cbiAgIGlmKHJlcykgcmV0dXJuIHJlc1swXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUdldENvbHVtbkluZGV4KHRhYmxlLCBjb2x1bW5fa2V5KSB7XG4gICB2YXIgaW5kZXggPSB0YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpLm9wdGlvbnMuY29sdW1ucy5maW5kSW5kZXgoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uZmllbGQgPT09IGNvbHVtbl9rZXk7XG4gICB9KTtcblxuICAgcmV0dXJuKGluZGV4KTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBhZGQgcmVmcmVzaGFibGUgZGF0YXRhYmxlcyByb3dzLlxuICpcbiAqIHRhYmxlOiB0aGUgZGF0YXRhYmxlIGRpdiBqcXVlcnkgb2JqZWN0XG4gKiBjb2x1bW5faWQ6IHRoZSBmaWVsZCBrZXkgdXNlZCB0byBpbmRlbnRpZnkgdGhlIHJvd3NcbiAqIHJlZnJlc2hfaW50ZXJ2YWw6IG1pbGxpc2Vjb25kcyByZWZyZXNoIGludGVydmFsIGZvciB0aGlzIHRhYmxlXG4gKiB0cmVuZF9jb2x1bW5zOiAob3B0aW9uYWwpIGEgbWFwIDxmaWVsZCAtPiBmb3JtYXR0ZXJfZm4+IHdoaWNoIGluZGljYXRlcyB0aGUgbnVtZXJpYyBjb2x1bW5zXG4gKiB3aGljaCBzaG91bGQgYmUgc2hvd24gd2l0aCB1cC9kb3duIGFycm93cyB1cG9uIHJlZnJlc2guXG4gKlxuICogUmV0dXJucyB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICAkKFwiI3RhYmxlLXJlZGlzLXN0YXRzXCIpLmRhdGF0YWJsZSh7XG4gKiAgICAgLi4uXG4gKiAgICAgdGFibGVDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gKiAgICAgICAvLyBUaGUgdGFibGUgcm93cyB3aWxsIGJlIGlkZW50aWZpZWQgYnkgdGhlIFwiY29sdW1uX2tleVwiLFxuICogICAgICAgLy8gcmVmcmVzaGVkIGV2ZXJ5IDUgc2Vjb25kcywgd2l0aCB1cC9kb3duIGFycm93cyBvbiB0aGUgXCJjb2x1bW5faGl0c1wiXG4gKiAgICAgICBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MoJChcIiN0YWJsZS1yZWRpcy1zdGF0c1wiKSwgXCJjb2x1bW5fa2V5XCIsIDUwMDAsIHtcImNvbHVtbl9oaXRzXCI6IGFkZENvbW1hc30pO1xuICogICAgIH1cbiAqICAgfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3ModGFibGUsIGNvbHVtbl9pZCwgcmVmcmVzaF9pbnRlcnZhbCwgdHJlbmRfY29sdW1ucykge1xuICB2YXIgJGR0ID0gdGFibGUuZGF0YShcImRhdGF0YWJsZVwiKTtcbiAgdmFyIHJvd3MgPSAkZHQucmVzdWx0c2V0LmRhdGE7XG4gIHZhciBvbGRfdGltZXIgPSB0YWJsZS5kYXRhKFwiZHQtcnItdGltZXJcIik7XG4gIHZhciBvbGRfcmVxID0gdGFibGUuZGF0YShcImR0LXJyLWFqYXhcIik7XG4gIHRyZW5kX2NvbHVtbnMgPSB0cmVuZF9jb2x1bW5zIHx8IHt9O1xuXG4gIGlmKG9sZF90aW1lcikge1xuICAgIC8vIFJlbW92ZSB0aGUgcHJldmlvdXNseSBzZXQgdGltZXIgdG8gYXZvaWQgZG91YmxlIHNjaGVkdWxpbmdcbiAgICBjbGVhckludGVydmFsKG9sZF90aW1lcik7XG4gICAgdGFibGUucmVtb3ZlRGF0YShcImR0LXJyLXRpbWVyXCIpO1xuICB9XG5cbiAgaWYob2xkX3JlcSkge1xuICAgIC8vIEFib3J0IHRoZSBwcmV2aW91cyByZXF1ZXN0IGlmIGFueVxuICAgIG9sZF9yZXEuYWJvcnQoKTtcbiAgICB0YWJsZS5yZW1vdmVEYXRhKFwiZHQtcnItYWpheFwiKTtcbiAgfVxuXG4gIHZhciBpZHMgPSBbXTtcbiAgdmFyIGlkX3RvX3JvdyA9IHt9O1xuXG4gIGZvcih2YXIgcm93IGluIHJvd3MpIHtcbiAgICB2YXIgZGF0YSA9IHJvd3Nbcm93XTtcblxuICAgIGlmKGRhdGFbY29sdW1uX2lkXSkge1xuICAgICAgdmFyIGRhdGFfaWQgPSBkYXRhW2NvbHVtbl9pZF07XG4gICAgICBpZF90b19yb3dbZGF0YV9pZF0gPSByb3c7XG4gICAgICBpZHMucHVzaChkYXRhX2lkKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGVzZSBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSByZWZyZXNoIGVuZHBvaW50XG4gIC8vIHRoZSBjdXN0b21faG9zdHMgcGFyYW1ldGVyIHdpbGwgYmUgcGFzc2VkIGluIHRoZSBBSkFYIHJlcXVlc3QgYW5kXG4gIC8vIHdpbGwgY29udGFpbiB0aGUgSURzIHRvIHJlZnJlc2guIEl0IHNob3VsZCBiZSB1c2VkIGJ5IHRoZSByZWNlaXZpbmdcbiAgLy8gTHVhIHNjcmlwdCBhcyBhIGZpbHRlclxuICB2YXIgcGFyYW1zID0ge1xuICAgIFwiY3VzdG9tX2hvc3RzXCI6IGlkcy5qb2luKFwiLFwiKVxuICB9O1xuICB2YXIgdXJsID0gJGR0Lm9wdGlvbnMudXJsO1xuICB2YXIgZmlyc3RfbG9hZCA9IHRydWU7XG5cbiAgdmFyIF9wcm9jZXNzX3Jlc3VsdCA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgIGlmKHR5cGVvZihyZXN1bHQpID09PSBcInN0cmluZ1wiKVxuICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXN1bHQpO1xuXG4gICAgaWYoIXJlc3VsdCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkJhZCBKU09OIHJlc3VsdFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IodmFyIHJvdyBpbiByZXN1bHQuZGF0YSkge1xuICAgICAgIHZhciBkYXRhID0gcmVzdWx0LmRhdGFbcm93XTtcbiAgICAgICB2YXIgZGF0YV9pZCA9IGRhdGFbY29sdW1uX2lkXTtcblxuICAgICAgIGlmKGRhdGFfaWQgJiYgaWRfdG9fcm93W2RhdGFfaWRdKSB7XG4gICAgICAgICAgdmFyIHJvd19pZHggPSBpZF90b19yb3dbZGF0YV9pZF07XG4gICAgICAgICAgdmFyIHJvd19odG1sID0gJGR0LnJvd3Nbcm93X2lkeF07XG4gICAgICAgICAgdmFyIHJvd190ZHMgPSAkKFwidGRcIiwgcm93X2h0bWwpO1xuXG4gICAgICAgICAgLyogVHJ5IHRvIHVwZGF0ZSBhbGwgdGhlIGZpZWxkcyBmb3IgdGhlIGN1cnJlbnQgcm93IChyb3dfaHRtbCkgKi9cbiAgICAgICAgICBmb3IodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgdmFyIGNvbF9pZHggPSBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCh0YWJsZSwga2V5KTtcbiAgICAgICAgICAgICB2YXIgY2VsbCA9IHJvd190ZHNbY29sX2lkeF07XG4gICAgICAgICAgICAgdmFyICRjZWxsID0gJChjZWxsKTtcblxuICAgICAgICAgICAgIHZhciBvbGRfdmFsID0gJGNlbGwuZGF0YShcImR0LXJyLWN1ci12YWxcIikgfHwgJChjZWxsKS5odG1sKCk7XG4gICAgICAgICAgICAgdmFyIHRyZW5kX3ZhbHVlX2Zvcm1hdHRlciA9IHRyZW5kX2NvbHVtbnNba2V5XTtcbiAgICAgICAgICAgICB2YXIgbmV3X3ZhbCA9IGRhdGFba2V5XTtcbiAgICAgICAgICAgICB2YXIgYXJyb3dzID0gXCJcIjtcblxuICAgICAgICAgICAgIGlmKHRyZW5kX3ZhbHVlX2Zvcm1hdHRlcikge1xuICAgICAgICAgICAgICBpZihwYXJzZUZsb2F0KG5ld192YWwpICE9IG5ld192YWwpXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiSW52YWxpZCBudW1iZXI6IFwiICsgbmV3X3ZhbCk7XG5cbiAgICAgICAgICAgICAgaWYoIWZpcnN0X2xvYWQpXG4gICAgICAgICAgICAgICAgYXJyb3dzID0gXCIgXCIgKyBOdG9wVXRpbHMuZHJhd1RyZW5kKHBhcnNlRmxvYXQobmV3X3ZhbCksIHBhcnNlRmxvYXQob2xkX3ZhbCkpO1xuXG4gICAgICAgICAgICAgIC8vIFRoaXMgdmFsdWUgd2lsbCBiZSBuZWVkZSBpbiB0aGUgbmV4dCByZWZyZXNoXG4gICAgICAgICAgICAgICRjZWxsLmRhdGEoXCJkdC1yci1jdXItdmFsXCIsIG5ld192YWwpO1xuXG4gICAgICAgICAgICAgIG5ld192YWwgPSB0cmVuZF92YWx1ZV9mb3JtYXR0ZXIobmV3X3ZhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAkKGNlbGwpLmh0bWwoKG5ld192YWwgIT0gMCkgPyAobmV3X3ZhbCArIGFycm93cykgOiBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0X2xvYWQgPSBmYWxzZTtcbiAgICB0YWJsZS5yZW1vdmVEYXRhKFwiZHQtcnItYWpheFwiKTtcbiB9O1xuXG4gIC8vIFNhdmUgdGhlIHRpbWVyIGludG8gXCJkdC1yci10aW1lclwiIHRvIGJlIGFibGUgdG8gc3RvcCBpdCBpZlxuICAvLyBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MgaXMgY2FsbGVkIGFnYWluXG4gIHRhYmxlLmRhdGEoXCJkdC1yci10aW1lclwiLCBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAvLyBEb3VibGUgY2hlY2sgdGhhdCBhIHJlcXVlc3QgaXMgbm90IHBlbmRpbmdcbiAgICB2YXIgb2xkX3JlcSA9IHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIpO1xuXG4gICAgaWYob2xkX3JlcSlcbiAgICAgIHJldHVybjtcblxuICAgIC8vIFNhdmUgdGhlIGFqYXggcmVxdWVzdCB0byBwb3NzaWJseSBhYm9ydCBpdCBpZlxuICAgIC8vIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyBpcyBjYWxsZWQgYWdhaW5cbiAgICB0YWJsZS5kYXRhKFwiZHQtcnItYWpheFwiLCAkLmFqYXgoe1xuICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgIHVybDogdXJsLFxuICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgc3VjY2VzczogX3Byb2Nlc3NfcmVzdWx0LFxuICAgIH0pKTtcbiAgfSwgcmVmcmVzaF9pbnRlcnZhbCkpO1xuXG4gIC8vIEZpcnN0IHVwZGF0ZVxuICBfcHJvY2Vzc19yZXN1bHQoJGR0LnJlc3VsdHNldCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZHJhd19wcm9jZXNzZXNfZ3JhcGgoaHR0cF9wcmVmaXgsIGdyYXBoX2Rpdl9pZCwgaG9zdCkge1xuICAgIHZhciBsaW5rcztcbiAgICB2YXIgbm9kZXMgPSB7fTtcblxuICAgIHZhciB1cmwgPSBodHRwX3ByZWZpeCArICcvbHVhL2dldF9wcm9jZXNzZXNfZ3JhcGhfZGF0YS5sdWE/aG9zdD0nICsgaG9zdDtcblxuICAgIGQzLmpzb24odXJsLCBmdW5jdGlvbihlcnJvciwganNvbikge1xuXHRpZihlcnJvcilcblx0ICAgIHJldHVybiBjb25zb2xlLndhcm4oZXJyb3IpO1xuXG5cdGxpbmtzID0ganNvbjtcblx0dmFyIF9saW5rO1xuXG5cdC8vIENvbXB1dGUgdGhlIGRpc3RpbmN0IG5vZGVzIGZyb20gdGhlIGxpbmtzLlxuXHRsaW5rcy5mb3JFYWNoKGZ1bmN0aW9uKGxpbmspIHtcblx0ICAgIGlmKGxpbmsuc291cmNlX3BpZCA9PSAtMSkge1xuXHRcdC8qIElQIEFkZHJlc3MgLT4gUElEICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9XCIgKyBsaW5rLnNvdXJjZTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0LyogUElEIC0+IElQIEFkZHJlc3MgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byb2Nlc3NfZGV0YWlscy5sdWE/cGlkPVwiICsgbGluay5zb3VyY2VfcGlkICsgXCImcGlkX25hbWU9XCIgKyBsaW5rLnNvdXJjZV9uYW1lICsgXCImaG9zdD1cIiArIGhvc3QgKyBcIiZwYWdlPWZsb3dzXCI7XG5cdCAgICB9XG5cblx0ICAgIGxpbmsuc291cmNlID0gbm9kZXNbbGluay5zb3VyY2VdXG5cdFx0fHwgKG5vZGVzW2xpbmsuc291cmNlXSA9IHtcblx0XHQgICAgbmFtZTogbGluay5zb3VyY2VfbmFtZSwgbnVtOmxpbmsuc291cmNlLFxuXHRcdCAgICBsaW5rOiBfbGluaywgdHlwZTogbGluay5zb3VyY2VfdHlwZSwgcGlkOiBsaW5rLnNvdXJjZV9waWRcblx0XHR9KTtcblxuXHQgICAgaWYobGluay50YXJnZXRfcGlkID09IC0xKSB7XG5cdFx0LyogSVAgQWRkcmVzcyAtPiBQSUQgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD1cIiArIGxpbmsudGFyZ2V0O1xuXHQgICAgfSBlbHNlIHtcblx0XHQvKiBQSUQgLT4gSVAgQWRkcmVzcyAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvY2Vzc19kZXRhaWxzLmx1YT9waWQ9XCIgKyBsaW5rLnRhcmdldF9waWQgKyBcIiZwaWRfbmFtZT1cIiArIGxpbmsudGFyZ2V0X25hbWUgKyBcIiZob3N0PVwiICsgaG9zdCArIFwiJnBhZ2U9Zmxvd3NcIjtcblx0ICAgIH1cblxuXHQgICAgbGluay50YXJnZXQgPSBub2Rlc1tsaW5rLnRhcmdldF1cblx0XHR8fCAobm9kZXNbbGluay50YXJnZXRdID0ge1xuXHRcdCAgICBuYW1lOiBsaW5rLnRhcmdldF9uYW1lLCBudW06IGxpbmsudGFyZ2V0LFxuXHRcdCAgICBsaW5rOiBfbGluaywgdHlwZTogbGluay50YXJnZXRfdHlwZSwgcGlkOiBsaW5rLnRhcmdldF9waWRcblx0XHR9KTtcblx0fSk7XG5cblx0dmFyIHdpZHRoID0gOTYwLCBoZWlnaHQgPSA1MDAsIGFycm93X3NpemUgPSA2O1xuXHR2YXIgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTEwKCk7XG5cblx0LyogU2FtZSBjb2xvcnMgYXMgdGhvc2UgdXNlZCBpbiB0aGUgZmxvd19kZXRhaWxzLmx1YSBwYWdlIHRvIHJlcHJlc2VudCBob3N0cyBhbmQgcHJvY2Vzc2VzICovXG5cdGNvbG9yW1wicHJvY1wiXSA9IFwicmVkXCI7XG5cdGNvbG9yW1wiaG9zdFwiXSA9IFwibGlnaHRzdGVlbGJsdWVcIjtcblxuXHR2YXIgZm9yY2UgPSBkMy5sYXlvdXQuZm9yY2UoKVxuXHQgICAgLm5vZGVzKGQzLnZhbHVlcyhub2RlcykpXG5cdCAgICAubGlua3MobGlua3MpXG5cdCAgICAuc2l6ZShbd2lkdGgsIGhlaWdodF0pXG5cdCAgICAubGlua0Rpc3RhbmNlKDEyMCkgLy8gQXJjIGxlbmd0aFxuXHQgICAgLmNoYXJnZSgtNDAwKVxuXHQgICAgLm9uKFwidGlja1wiLCB0aWNrKVxuXHQgICAgLnN0YXJ0KCk7XG5cblx0dmFyIHN2ZyA9IGQzLnNlbGVjdChcIiNcIiArIGdyYXBoX2Rpdl9pZCkuYXBwZW5kKFwic3ZnXCIpXG5cdCAgICAuYXR0cihcImlkXCIsIFwiZWJwZl9ncmFwaFwiKVxuXHQgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcblx0ICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG5cblx0Ly8gUGVyLXR5cGUgbWFya2VycywgYXMgdGhleSBkb24ndCBpbmhlcml0IHN0eWxlcy5cblx0c3ZnLmFwcGVuZChcImRlZnNcIikuc2VsZWN0QWxsKFwibWFya2VyXCIpXG5cdCAgICAuZGF0YShbXCJwcm9jMnByb2NcIiwgXCJwcm9jMmhvc3RcIiwgXCJob3N0MnByb2NcIiwgXCJob3N0Mmhvc3RcIl0pXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJtYXJrZXJcIilcblx0ICAgIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZDsgfSlcblx0ICAgIC5hdHRyKFwidmlld0JveFwiLCBcIjAgLTUgMjAgMjBcIilcblx0ICAgIC5hdHRyKFwicmVmWFwiLCAxNSlcblx0ICAgIC5hdHRyKFwicmVmWVwiLCAtMS41KVxuXHQgICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCBhcnJvd19zaXplKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIGFycm93X3NpemUpXG5cdCAgICAuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIilcblx0ICAgIC5hcHBlbmQoXCJwYXRoXCIpXG5cdCAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKTtcblxuXHR2YXIgcGF0aCA9IHN2Zy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcInBhdGhcIilcblx0ICAgIC5kYXRhKGZvcmNlLmxpbmtzKCkpXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpXG5cdCAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwibGluayBcIiArIGQudHlwZTsgfSlcblx0ICAgIC5hdHRyKFwibWFya2VyLWVuZFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInVybCgjXCIgKyBkLnR5cGUgKyBcIilcIjsgfSk7XG5cblxuXHR2YXIgY2lyY2xlID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG5cdCAgICAuZGF0YShmb3JjZS5ub2RlcygpKVxuXHQgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXG5cdCAgICAuYXR0cihcImNsYXNzXCIsIFwiZWJwZl9jaXJjbGVcIilcblx0ICAgIC5hdHRyKFwiclwiLCAxNSkgLyogUmFkaXVzICovXG5cdCAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGNvbG9yW2QudHlwZV07IH0pXG5cdCAgICAuY2FsbChmb3JjZS5kcmFnKVxuXHQgICAgLm9uKFwiZGJsY2xpY2tcIiwgZnVuY3Rpb24oZCkge1xuXHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZC5saW5rO1xuXHQgICAgfSApO1xuXG5cdC8vIENpcmNsZSBsYWJlbFxuXHR2YXIgdGV4dCA9IHN2Zy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcInRleHRcIilcblx0ICAgIC5kYXRhKGZvcmNlLm5vZGVzKCkpXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpXG5cdCAgICAuYXR0cihcImNsYXNzXCIsIFwiZWJwZl90ZXh0XCIpXG5cdCAgICAuYXR0cihcInhcIiwgMTIpXG5cdCAgICAuYXR0cihcInlcIiwgXCIwLjVyZW1cIilcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjFyZW1cIilcblx0ICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcblx0XHRpZihkLnBpZCA+PSAwKSAvLyBQcm9jZXNzXG5cdFx0ICAgIHJldHVybihkLm5hbWUgKyBcIiBbcGlkOiBcIitkLnBpZCtcIl1cIik7XG5cdFx0ZWxzZSB7IC8vIEhvc3Rcblx0XHQgICAgcmV0dXJuKGQubmFtZSk7XG5cdFx0fVxuXHQgICAgfSk7XG5cblx0Ly8gVXNlIGVsbGlwdGljYWwgYXJjIHBhdGggc2VnbWVudHMgdG8gZG91Ymx5LWVuY29kZSBkaXJlY3Rpb25hbGl0eS5cblx0ZnVuY3Rpb24gdGljaygpIHtcblx0ICAgIHBhdGguYXR0cihcImRcIiwgbGlua0FyYyk7XG5cdCAgICBjaXJjbGUuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pO1xuXHQgICAgdGV4dC5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG5cdH1cblxuXHRmdW5jdGlvbiBsaW5rQXJjKGQpIHtcblx0ICAgIHZhciBkeCA9IGQudGFyZ2V0LnggLSBkLnNvdXJjZS54LFxuXHRcdGR5ID0gZC50YXJnZXQueSAtIGQuc291cmNlLnksXG5cdFx0ZHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHQgICAgcmV0dXJuIFwiTVwiICsgZC5zb3VyY2UueCArIFwiLFwiICsgZC5zb3VyY2UueSArIFwiQVwiICsgZHIgKyBcIixcIiArIGRyICsgXCIgMCAwLDEgXCIgKyBkLnRhcmdldC54ICsgXCIsXCIgKyBkLnRhcmdldC55O1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtKGQpIHtcblx0ICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCI7XG5cdH1cbiAgICB9KTtcbn1cbiIsIi8qIFVzZSB3aXRoOlxuICAqXG4gICogJCgnI2VkaXQtcmVjaXBpZW50LW1vZGFsIGZvcm0nKS5tb2RhbEhhbmRsZXIoeyAuLi4gfSlcbiAgKi9cbmNsYXNzIE1vZGFsSGFuZGxlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihmb3JtLCBvcHRpb25zKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNzcmYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZGFsSGFuZGxlcjo6TWlzc2luZyBDU1JGIHRva2VuIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGZvcm07XG4gICAgICAgIHRoaXMuZGlhbG9nID0gJChmb3JtKS5jbG9zZXN0KFwiLm1vZGFsXCIpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3NyZiA9IG9wdGlvbnMuY3NyZjtcbiAgICAgICAgdGhpcy5kb250RGlzYWJsZVN1Ym1pdCA9IG9wdGlvbnMuZG9udERpc2FibGVTdWJtaXQ7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChsaXN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJpbmRGb3JtVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVGb3JtU3VibWlzc2lvbigpO1xuICAgICAgICAgICAgdGhpcy5pbml0RGF0YVBhdHRlcm5zKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnRbMF0sIHtcbiAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddYCk7XG4gICAgICAgIGlmIChzdWJtaXRCdXR0b24ubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZGFsSGFuZGxlcjo6VGhlIHN1Ym1pdCBidXR0b24gd2FzIG5vdCBmb3VuZCBpbnNpZGUgdGhlIGZvcm0hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2dnbGVGb3JtU3VibWlzc2lvbigpO1xuXG4gICAgfVxuXG4gICAgaW5pdERhdGFQYXR0ZXJucygpIHtcbiAgICAgICAgTnRvcFV0aWxzLmluaXREYXRhUGF0dGVybnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBmb3JtJ3Mgc25hcHNob3QgdG8gc2F2ZSBhIGZvcm0gc3RhdGVcbiAgICAgKi9cbiAgICBjcmVhdGVGb3JtU25hcHNob3QoKSB7XG5cbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSB7XG4gICAgICAgICAgICBpbnB1dHM6IHt9LFxuICAgICAgICAgICAgaGlkZGVuOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKCd0ZXh0YXJlYSxzZWxlY3QsaW5wdXRbdHlwZSE9XCJyYWRpb1wiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gJCh0aGlzKS5wcm9wKCdub2RlTmFtZScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gJCh0aGlzKS5hdHRyKCduYW1lJyk7XG4gICAgICAgICAgICBzbmFwc2hvdC5pbnB1dHNbYCR7dHlwZX1bbmFtZT0nJHtuYW1lfSddYF0gPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZChgW3N0eWxlPSdkaXNwbGF5OiBub25lOyddLCBzcGFuLmludmFsaWQtZmVlZGJhY2tgKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNuYXBzaG90LmhpZGRlbi5wdXNoKCQodGhpcykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgfVxuXG4gICAgY29tcGFyZUZvcm1TbmFwaHNvdChzMSwgczIpIHtcblxuICAgICAgICBpZiAoczEgPT0gbnVsbCB8fCBzMiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoczEuaW5wdXRzKSkge1xuICAgICAgICAgICAgaWYgKHMyLmlucHV0c1trZXldICE9IHZhbHVlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZWxlZ2F0ZU1vZGFsQ2xvc2luZygpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5maW5kKCdidXR0b24uY2FuY2VsJykub2ZmKCdjbGljaycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpWzBdLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCcuY29uZmlybS1jbG9zaW5nJykuZmFkZU91dCgxMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCdidXR0b24uYnRuLWNsb3NlJykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh0aGlzLmRpYWxvZykub2ZmKCdoaWRlLmJzLm1vZGFsJykub24oJ2hpZGUuYnMubW9kYWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNlbGYuaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBmb3JtIHN0YXRlIGhhc24ndCBjaGFuZ2VkIHRoZW4gZG9uJ3Qgc2hvdyB0aGUgbWVzc2FnZVxuICAgICAgICAgICAgaWYgKHNlbGYuY29tcGFyZUZvcm1TbmFwaHNvdChzZWxmLmN1cnJlbnRTdGF0ZSwgc2VsZi5pbml0aWFsU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5maXJzdENsb3NlQXR0ZW1wdCkgcmV0dXJuO1xuICAgICAgICAgICAgLy8gYWJvcnQgdGhlIG1vZGFsIGNsb3NpbmcgZXZlbnRcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIGZsYWcgYSBjbG9zZSBhdHRlbXB0IGhhcyBiZWVuIGludm9rZWRcbiAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBzaG93IGFuIGFsZXJ0IHRvIGluZm9ybSB0aGUgdXNlclxuICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnYnV0dG9uLmJ0bi1jbG9zZScpLmZhZGVPdXQoMTAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnLmNvbmZpcm0tY2xvc2luZycpLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5vZmYoJ2hpZGRlbi5icy5tb2RhbCcpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgLy8gZm9yIGVhY2ggaW5wdXQgaW5zaWRlIHRoZSBmb3JtIHJlc3RvcmUgdGhlIGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgIC8vIGZyb20gdGhlIHNuYXBzaG90IHRha2VuIGF0IGluaXRcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3NlbGVjdG9yLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2VsZi5pbml0aWFsU3RhdGUuaW5wdXRzKSkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoc2VsZWN0b3IpLnZhbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZChzZWxlY3RvcikucmVtb3ZlQ2xhc3MoJ2lzLWludmFsaWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgc2h3b24gZWxlbWVudHNcbiAgICAgICAgICAgIHNlbGYuaW5pdGlhbFN0YXRlLmhpZGRlbi5mb3JFYWNoKCgkaGlkZGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgJGhpZGRlbi5oaWRlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VsZi5lbGVtZW50LmZpbmQoYFt0eXBlPSdzdWJtaXQnXWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCcuY29uZmlybS1jbG9zaW5nJykuZmFkZU91dCgxMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCdidXR0b24uYnRuLWNsb3NlJykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gY2xlYW4gdGhlIGZvcm0gd2hlbiB0aGUgbW9kYWwgaXMgY2xvc2VkXG4gICAgICAgICAgICAvLyB0byBwcmV2ZW50IHRoZSBmaWVsZHMgZmxpY2tlcmluZ1xuICAgICAgICAgICAgc2VsZi5jbGVhbkZvcm0oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmlsbEZvcm1Nb2RhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sb2FkRm9ybURhdGEoKTtcbiAgICB9XG5cbiAgICBpbnZva2VNb2RhbEluaXQoZGF0YSA9IHt9KSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gcmVzZXQgZm9ybSB2YWx1ZXMgd2hlbiB0aGUgbW9kYWwgY2xvc2VzXG4gICAgICAgIHRoaXMuZGVsZWdhdGVNb2RhbENsb3NpbmcoKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YSB8fCB0aGlzLmZpbGxGb3JtTW9kYWwoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uTW9kYWxJbml0KHRoaXMuZGF0YSwgdGhpcyk7XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnBhcmVudHMoJy5tb2RhbCcpLm9uKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vcHRpb25zLm9uTW9kYWxTaG93KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhIGluaXRpYWwgZm9ybSBzbmFwc2hvdCB0byByZXN0b3JlIGVsZW1lbnRzIG9uIGNsb3NpbmdcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGUgPSB0aGlzLmNyZWF0ZUZvcm1TbmFwc2hvdCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5kZWxlZ2F0ZVJlc2V0QnV0dG9uKCk7ICAgXG4gICAgfVxuXG4gICAgZGVsZWdhdGVTdWJtaXQoKSB7XG5cbiAgICAgICAgdGhpcy5iaW5kRm9ybVZhbGlkYXRpb24oKTtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICB0aGlzLnN1Ym1pdEhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLm9wdGlvbnMuaXNTeW5jUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHNlbGYubWFrZVJlcXVlc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ3N1Ym1pdCcsIHRoaXMuc3VibWl0SGFuZGxlcik7XG4gICAgfVxuXG4gICAgYmluZEZvcm1WYWxpZGF0aW9uKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIGhhbmRsZSBpbnB1dCB2YWxpZGF0aW9uXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKGBpbnB1dCxzZWxlY3QsdGV4dGFyZWFgKS5lYWNoKGFzeW5jIGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuXG4gICAgICAgICAgICAvLyBqUXVlcnkgb2JqZWN0IG9mIHRoZSBjdXJyZW50IGlucHV0XG4gICAgICAgICAgICBjb25zdCAkaW5wdXQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgLy8gaWQgdG8gaGFuZGxlIHRoZSBjdXJyZW50IHRpbWVvdXQgc2V0IHRvIHNob3cgZXJyb3JzXG4gICAgICAgICAgICBsZXQgdGltZW91dElkID0gLTE7XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbGlkSG9zdG5hbWUgPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBzcGlubmVyIHRvIHRoZSB1c2VyIGFuZCBzZXQgdGhlIGlucHV0IHRvIHJlYWRvbmx5XG4gICAgICAgICAgICAgICAgY29uc3QgJHNwaW5uZXIgPSAkaW5wdXQucGFyZW50KCkuZmluZCgnLnNwaW5uZXItYm9yZGVyJyk7XG4gICAgICAgICAgICAgICAgJGlucHV0LmF0dHIoXCJyZWFkb25seVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAkc3Bpbm5lci5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IE50b3BVdGlscy5yZXNvbHZlRE5TKCQoaW5wdXQpLnZhbCgpKTtcblxuICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIHNwaW5uZXIgYW5kIHJlbmFibGUgd3JpdGUgdG8gdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgJGlucHV0LnJlbW92ZUF0dHIoXCJyZWFkb25seVwiKTtcbiAgICAgICAgICAgICAgICAkc3Bpbm5lci5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcmVzcG9uc2Ugd2FzIG5lZ2F0aXZlIHRoZW4gYWxlcnQgdGhlIHVzZXJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KHJlc3BvbnNlLnJjX3N0cik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHJlc3BvbnNlLnJjX3N0cl9ocl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHN1Y2Nlc3MgZm9yIHZhbGlkIHJlc29sdmVkIGhvc3RubWFlXG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIFwiU3VjY2Vzc1wiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdmFsaWRJbnB1dCA9IGFzeW5jICh2YWxpZGF0aW9uKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgaW5wdXQgcmVxdWlyZSB0byB2YWxpZGF0ZSBob3N0IG5hbWUgdGhlbiBwZXJmb3JtIGEgRE5TIHJlc29sdmVcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbi5kYXRhLnJlc29sdmVETlMgJiYgJGlucHV0LnZhbCgpLm1hdGNoKE50b3BVdGlscy5SRUdFWEVTLmRvbWFpbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB2YWxpZEhvc3RuYW1lKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb24uZGF0YS5jYW5ub3RCZUVtcHR5ICYmIHZhbGlkYXRpb24uaXNJbnB1dEVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgaW5wdXQgdmFsaWRhdGlvbiBmbGFnXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUGxlYXNlIGZpbGwgdGhlIGlucHV0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdmFsaWRhdGlvbi5kYXRhLnZhbGlkYXRpb25FbXB0eU1lc3NhZ2UgfHwgaTE4bl9leHQubWlzc2luZ19maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbGlkaXR5LnBhdHRlcm5NaXNtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlBhdHRlcm4gbWlzbWF0Y2guXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEudmFsaWRhdGlvbk1lc3NhZ2UgfHwgaTE4bl9leHQuaW52YWxpZF9maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJWYWx1ZSBleGNlZWQgdGhlIG1heGltdW0gdmFsdWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEucmFuZ2VPdmVyZmxvd01lc3NhZ2UgfHwgaTE4bl9leHQuaW52YWxpZF9maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbGlkaXR5LnJhbmdlVW5kZXJmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiVmFsdWUgaXMgdW5kZXIgdGhlIG1pbmltdW0gdmFsdWUuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEucmFuZ2VVbmRlcmZsb3dNZXNzYWdlIHx8IGkxOG5fZXh0LmludmFsaWRfZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNldCB2YWxpZGF0aW9uIHRvIHRydWVcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIFwiU3VjY2Vzc1wiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2hlY2tWYWxpZGF0aW9uID0gYXN5bmMgKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uTWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVtcHR5TWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25FbXB0eU1lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbm5vdEJlRW1wdHk6ICgkaW5wdXQuYXR0cigncmVxdWlyZWQnKSA9PT0gXCJyZXF1aXJlZFwiKSB8fCAoJGlucHV0LmRhdGEoXCJ2YWxpZGF0aW9uTm90RW1wdHlcIikgPT0gdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRE5TOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvblJlc29sdmVkbnMnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlT3ZlcmZsb3dNZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvblJhbmdlT3ZlcmZsb3dNZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVVuZGVyZmxvd01lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uVW5kZXJmbG93T3ZlcmZsb3dNZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGlzSW5wdXRFbXB0eTogKHR5cGVvZigkaW5wdXQudmFsKCkpID09PSBcInN0cmluZ1wiID8gJGlucHV0LnZhbCgpLnRyaW0oKSA9PSBcIlwiIDogZmFsc2UpXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IFtpc1ZhbGlkLCBtZXNzYWdlVG9TaG93XSA9IGF3YWl0IHZhbGlkSW5wdXQodmFsaWRhdGlvbik7XG4gICAgICAgICAgICAgICAgbGV0ICRlcnJvciA9ICRpbnB1dC5wYXJlbnQoKS5maW5kKGAuaW52YWxpZC1mZWVkYmFja2ApO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGVycm9yIGVsZW1lbnQgZG9lc24ndCBleGlzdCB0aGVuIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICAgICAgICBpZiAoJGVycm9yLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICRlcnJvciA9ICQoYDxzcGFuIGNsYXNzPSdpbnZhbGlkLWZlZWRiYWNrJz48L3NwYW4+YCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGlzcGxheSB0aGUgZXJyb3JzIGFuZCBjb2xvciB0aGUgaW5wdXQgYm94XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5hZGRDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkaW5wdXQucGFyZW50KCkuYXBwZW5kKCRlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICRlcnJvci50ZXh0KG1lc3NhZ2VUb1Nob3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdGhlIHZhbGlkYXRpb24gbWVzc2FnZSBhbmQgcmVtb3ZlIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQucmVtb3ZlQ2xhc3MoJ2lzLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yLmZhZGVPdXQoNTAwLCBmdW5jdGlvbiAoKSB7ICQodGhpcykucmVtb3ZlKCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCh0aGlzKS5vZmYoJ2lucHV0Jykub24oJ2lucHV0JywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gc2VsZi5jcmVhdGVGb3JtU25hcHNob3QoKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGV4aXN0cyBhbHJlYWR5IGEgVGltZW91dCB0aGVuIGNsZWFyIGl0XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXRJZCAhPSAtMSkgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoISRpbnB1dC5hdHRyKFwiZm9ybW5vdmFsaWRhdGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBpbnB1dCB2YWxpZGF0aW9uIGFmdGVyIDMwMG1zZWNcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgZm9ybSB2YWxpZGF0aW9uIHRvIGVuYWJsZSB0aGUgc3VibWl0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50b2dnbGVGb3JtU3VibWlzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdXNlciBoYXMgY2hhbmdlZCB0aGUgaW5wdXQsIHdlIGNhbiBhYm9ydCB0aGUgZmlyc3QgY2xvc2UgYXR0ZW1wdFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQodGhpcykub2ZmKCdpbnZhbGlkJykub24oJ2ludmFsaWQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoISRpbnB1dC5hdHRyKFwiZm9ybW5vdmFsaWRhdGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZ2V0TW9kYWxJRCgpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcy5lbGVtZW50KS5wYXJlbnRzKCcubW9kYWwnKS5hdHRyKCdpZCcpO1xuICAgIH1cblxuICAgIHRvZ2dsZUZvcm1TdWJtaXNzaW9uKCkge1xuXG4gICAgICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcblxuICAgICAgICAvLyBpZiBlYWNoIGlucHV0IGlzIG1hcmtlZCBhcyB2YWxpZCB0aGVuIGVuYWJsZSB0aGUgZm9ybSBzdWJtaXQgYnV0dG9uXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKCdpbnB1dDpub3QoOmRpc2FibGVkKSxzZWxlY3Q6bm90KDpkaXNhYmxlZCksdGV4dGFyZWE6bm90KDpkaXNhYmxlZCknKS5lYWNoKGZ1bmN0aW9uIChpZHgsIGlucHV0KSB7XG4gICAgICAgICAgICAvLyBtYWtlIGEgY29uY2F0ZW5hdGUgJiBiZXR3ZWVuIHZhbGlkIGZsYWdzXG4gICAgICAgICAgICBpc1ZhbGlkICY9IGlucHV0LnZhbGlkaXR5LnZhbGlkO1xuICAgICAgICB9KTtcblxuICAgICAgICBpc1ZhbGlkXG4gICAgICAgICAgICA/ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J10sW3R5cGU9J3Rlc3QnXWApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICAgICAgICAgOiAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddLFt0eXBlPSd0ZXN0J11gKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICB9XG5cbiAgICBjbGVhbkZvcm0oKSB7XG4gICAgICAgIC8qIHJlbW92ZSB2YWxpZGF0aW9uIGNsYXNzIGZyb20gZmllbGRzICovXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKCdpbnB1dCx0ZXh0YXJlYSxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhgaXMtdmFsaWRgKS5yZW1vdmVDbGFzcyhgaXMtaW52YWxpZGApO1xuICAgICAgICB9KTtcbiAgICAgICAgLyogcmVzZXQgYWxsIHRoZSB2YWx1ZXMgKi9cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpWzBdLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgbWFrZVJlcXVlc3QoKSB7XG5cbiAgICAgICAgY29uc3QgJGZlZWRiYWNrTGFiZWwgPSAkKHRoaXMuZWxlbWVudCkuZmluZChgLmludmFsaWQtZmVlZGJhY2tgKTtcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXWApO1xuICAgICAgICBsZXQgZGF0YVRvU2VuZCA9IHRoaXMub3B0aW9ucy5iZWZvcmVTdW1iaXQodGhpcy5kYXRhKTtcblxuICAgICAgICBkYXRhVG9TZW5kLmNzcmYgPSB0aGlzLmNzcmY7XG4gICAgICAgIGRhdGFUb1NlbmQgPSAkLmV4dGVuZChkYXRhVG9TZW5kLCB0aGlzLm9wdGlvbnMuc3VibWl0T3B0aW9ucyk7XG5cbiAgICAgICAgLyogY2xlYW4gcHJldmlvdXMgc3RhdGUgYW5kIGRpc2FibGUgYnV0dG9uICovXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVuZHBvaW50KSB7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdDtcblxuICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5tZXRob2QgPT0gXCJwb3N0XCIpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGlzLm9wdGlvbnMuZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGFUb1NlbmQpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IHNlbGYub3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gJC5nZXQodGhpcy5vcHRpb25zLmVuZHBvaW50LCBkYXRhVG9TZW5kKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXF1ZXN0LmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlLCB0ZXh0U3RhdHVzKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBjbGVhciBzdWJtaXR0aW5nIHN0YXRlXG4gICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgY3VycmVudCBmb3JtIHN0YXRlXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5yZXNldEFmdGVyU3VibWl0KSBzZWxmLmNsZWFuRm9ybSgpO1xuICAgICAgICAgICAgICAgICRmZWVkYmFja0xhYmVsLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBzZWxmLm9wdGlvbnMub25TdWJtaXRTdWNjZXNzKHJlc3BvbnNlLCBkYXRhVG9TZW5kLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3VibWl0IHJldHVybiBhIHRydWUgYm9vbGVhbiB0aGVuIGNsb3NlIHRoZSBtb2RhbFxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICBpZihzZWxmLmRpYWxvZy5tb2RhbClcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2cubW9kYWwoJ2hpZGUnKVxuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nWzBdLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICQoYC5tb2RhbC1iYWNrZHJvcC5mYWRlLnNob3dgKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qIHVuYmluZCB0aGUgb2xkIGNsb3N1cmUgb24gc3VibWl0IGV2ZW50IGFuZCBiaW5kIGEgbmV3IG9uZSAqL1xuICAgICAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KS5vZmYoJ3N1Ym1pdCcsIHNlbGYuc3VibWl0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVN1Ym1pdCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mYWlsKGZ1bmN0aW9uIChqcXhociwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcblxuICAgICAgICAgICAgICAgIHNlbGYuaXNTdWJtaXR0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBqcXhoci5yZXNwb25zZUpTT047XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJjICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2UucmMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICRmZWVkYmFja0xhYmVsLmh0bWwocmVzcG9uc2UucmNfc3RyX2hyKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zLm9uU3VibWl0RXJyb3IocmVzcG9uc2UsIGRhdGFUb1NlbmQsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWx3YXlzKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7IC8vIG5vIGVuZHBvaW50XG5cbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgY3VycmVudCBmb3JtIHN0YXRlXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy9pZiAoc2VsZi5vcHRpb25zLnJlc2V0QWZ0ZXJTdWJtaXQpIHNlbGYuY2xlYW5Gb3JtKCk7XG4gICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHNlbGYub3B0aW9ucy5vblN1Ym1pdFN1Y2Nlc3Moe30sIGRhdGFUb1NlbmQsIHNlbGYpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdWJtaXQgcmV0dXJuIGEgdHJ1ZSBib29sZWFuIHRoZW4gY2xvc2UgdGhlIG1vZGFsXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYuZGlhbG9nLm1vZGFsKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZy5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZ1swXS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qIHVuYmluZCB0aGUgb2xkIGNsb3N1cmUgb24gc3VibWl0IGV2ZW50IGFuZCBiaW5kIGEgbmV3IG9uZSAqL1xuICAgICAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KS5vZmYoJ3N1Ym1pdCcsIHNlbGYuc3VibWl0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVN1Ym1pdCgpO1xuXG4gICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGVnYXRlUmVzZXRCdXR0b24oKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJlc2V0QnV0dG9uID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdyZXNldCddYCk7XG4gICAgICAgIGlmIChyZXNldEJ1dHRvbi5sZW5ndGggPT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZXMgPSBOdG9wVXRpbHMuc2VyaWFsaXplRm9ybUFycmF5KCQodGhpcy5lbGVtZW50KS5zZXJpYWxpemVBcnJheSgpKTtcblxuICAgICAgICByZXNldEJ1dHRvbi5jbGljayhmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBwcmV2aW91cyB2YWx1ZXNcbiAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KS5maW5kKCdpbnB1dDp2aXNpYmxlLHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKGksIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gJChpbnB1dCkuYXR0cignbmFtZScpO1xuICAgICAgICAgICAgICAgICQoaW5wdXQpLnZhbChkZWZhdWx0VmFsdWVzW2tleV0pXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpLnJlbW92ZUNsYXNzKCdpcy12YWxpZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgbW9kYWxIYW5kbGVyID0gZnVuY3Rpb24gKGFyZ3MpIHtcblxuICAgIGlmICh0aGlzLmxlbmd0aCAhPSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IGEgZm9ybSBlbGVtZW50IGNhbiBieSBpbml0aWFsaXplZCFcIik7XG5cbiAgICBjb25zdCBvcHRpb25zID0gJC5leHRlbmQoe1xuICAgICAgICBjc3JmOiAnJyxcbiAgICAgICAgZW5kcG9pbnQ6ICcnLFxuICAgICAgICByZXNldEFmdGVyU3VibWl0OiB0cnVlLFxuICAgICAgICAvKiBUcnVlIHRvIHNraXAgdGhlIGFyZS15b3Utc3VyZSBjaGVjayBvbiB0aGUgZGlhbG9nICovXG4gICAgICAgIGRvbnREaXNhYmxlU3VibWl0OiBmYWxzZSxcbiAgICAgICAgLyogVHJ1ZSBpZiB0aGUgcmVxdWVzdCBpc24ndCBkb25lIGJ5IEFKQVggcmVxdWVzdCAqL1xuICAgICAgICBpc1N5bmNSZXF1ZXN0OiBmYWxzZSxcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoIGRhdGEgYXN5bmNocm9udXNseSBmcm9tIHRoZSBzZXJ2ZXIgb3JcbiAgICAgICAgICogbG9hZHMgZGF0YSBkaXJlY3RseSBmcm9tIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICAgICAqIFRoZSBmdW5jdGlvbiBtdXN0IHJldHVybnMgdGhlIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMgUmV0dXJucyB0aGUgZmV0Y2hlZCBkYXRhLlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIHNob3dpbmdcbiAgICAgICAgICogaG93IHRvIHVzZSB0aGUgZnVuY3Rpb24gd2hlbiBmZXRjaGluZyBkYXRhIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogbG9hZEZvcm1EYXRhOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2goYGVuZHBvaW50L3RvL2RhdGFgKTtcbiAgICAgICAgICogICAgICBjb25zdCB1c2VyID0gYXdhaXQgZGF0YS5qc29uKCk7XG4gICAgICAgICAqICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBsb2FkRm9ybURhdGE6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogb25Nb2RhbEluaXQoKSBpcyBpbnZva2VkIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBpbml0aWFsaXplZC5cbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGxvYWQgdGhlIGZldGNoZWQgZGF0YSBmcm9tIGBsb2FkRm9ybURhdGEoKWBcbiAgICAgICAgICogaW5zaWRlIHRoZSBmb3JtIG1vZGFsIGlucHV0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGxvYWRlZERhdGEgVGhpcyBhcmd1bWVudCBjb250YWlucyB0aGUgZmV0Y2hlZCBkYXRhIG9idGFpbmVkXG4gICAgICAgICAqIGZyb20gYGxvYWRGb3JtRGF0YSgpYFxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIHNob3dpbmcgaG93IHRvIHVzZVxuICAgICAgICAgKiB0aGUgZnVuY3Rpb24gKHdlIHN1cHBvc2UgdGhhdCBsb2FkRm9ybURhdGEoKSByZXR1cm5zIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICogb2JqZWN0OiBgbG9hZGVkVXNlciA9IHtmaXJzdG5hbWU6ICdGb28nLCBsYXN0bmFtZTogJ0JhcicsIGlkOiAxNDI4MTAzfWApXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvbk1vZGFsSW5pdDogZnVuY3Rpb24obG9hZGVkVXNlcikge1xuICAgICAgICAgKiAgICAgICQoYCN1c2VyTW9kYWwgZm9ybSBpbnB1dCNmaXJzdG5hbWVgKS52YWwobG9hZGVkVXNlci5maXJzdG5hbWUpO1xuICAgICAgICAgKiAgICAgICQoYCN1c2VyTW9kYWwgZm9ybSBpbnB1dCNsYXN0bmFtZWApLnZhbChsb2FkZWRVc2VyLmxhc3RuYW1lKTtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjaWRgKS52YWwobG9hZGVkVXNlci5pZCk7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvbk1vZGFsSW5pdDogZnVuY3Rpb24gKGxvYWRlZERhdGEpIHsgfSxcblxuICAgICAgICBvbk1vZGFsU2hvdzogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZnVuY3Rpb24gYmVmb3JlU3VibWl0KCkgaXMgaW52b2tlZCBhZnRlciB0aGUgdXNlclxuICAgICAgICAgKiBzdWJtaXQgdGhlIGZvcm0uIFRoZSBmdW5jdGlvbiBtdXN0IHJldHVybiB0aGUgZGF0YSB0b1xuICAgICAgICAgKiBzZW5kIHRvIHRoZSBlbmRwb2ludC4gSWYgdGhlIGNob3NlbiBtZXRob2QgaXMgYHBvc3RgXG4gICAgICAgICAqIGEgY3NyZiB3aWxsIGJlIGFkZCB0byB0aGUgcmV0dXJuZWQgb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBXZSBzaG93IGJlbG93IGEgc2ltcGxlIGV4YW1wbGUgaG93IHRvIHVzZSB0aGUgZnVuY3Rpb246XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBiZWZvcmVTdWJtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAqICAgICAgICAgIGFjdGlvbjogJ2VkaXQnLFxuICAgICAgICAgKiAgICAgICAgICBKU09OOiBKU09OLnN0cmluZ2lmeShzZXJpYWxpemVBcnJheUZvcm0oJChgZm9ybWApLnNlcmlhbGl6ZUFycmF5KCkpKVxuICAgICAgICAgKiAgICAgIH07XG4gICAgICAgICAqICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBiZWZvcmVTdW1iaXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt9IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCB3aGVuIHRoZSByZXF1ZXN0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICAgKiB0ZXJtaW5hdGVzIHN1Y2Nlc3NmdWxseSAoMjAwKS4gQmVmb3JlIHRoZSBjYWxsIG9mIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICogYSBuZXcgY3NyZiByZXRyaXZlZCBmcm9tIHRoZSBzZXJ2ZXIgd2lsbCBiZSBzZXQgZm9yXG4gICAgICAgICAqIGZ1dHVyZSBjYWxscy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoaXMgb2JqZWN0IGNvbnRhaW5zIHRoZSByZXNwb25zZVxuICAgICAgICAgKiBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGEgc2ltcGxlIHVzZXIgY2FzZTpcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIG9uU3VibWl0U3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICogICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyhgVGhlIHVzZXIgaW5mbyBoYXMgYmVlbiBlZGl0IHdpdGggc3VjY2VzcyFgKTtcbiAgICAgICAgICogICAgICB9XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvblN1Ym1pdFN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgd2hlbiB0aGUgcmVxdWVzdCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgICogdGVybWluYXRlcyB3aXRoIGZhaWx1cmUgKCE9IDIwMCkuIEJlZm9yZSB0aGUgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAqIGEgbmV3IGNzcmYgcmV0cml2ZWQgZnJvbSB0aGUgc2VydmVyIHdpbGwgYmUgc2V0IGZvclxuICAgICAgICAgKiBmdXR1cmUgY2FsbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZW50IFRoaXMgb2JqZWN0IGNvbnRhaW5zIHRoZSBzZW50IGRhdGEgdG8gdGhlIGVuZHBvaW50XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0U3RhdHVzIEl0IGNvbnRhaW5zIHRoZSBlcnJvciB0ZXh0IHN0YXR1cyBvYnRhaW5lZFxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZXJyb3JUaHJvd24gVGhpcyBvYmplY3QgY29udGFpbnMgaW5mbyBhYm91dCB0aGUgZXJyb3JcbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGEgc2ltcGxlIHVzZXIgY2FzZTpcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIG9uU3VibWl0RXJyb3I6IGZ1bmN0aW9uKHNlbnQsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAqICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAqICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE9wcywgc29tZXRoaW5nIHdlbnQgd3JvbmchYCk7XG4gICAgICAgICAqICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JUaHJvd24pO1xuICAgICAgICAgKiAgICAgIH1cbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9uU3VibWl0RXJyb3I6IGZ1bmN0aW9uIChzZW50LCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgd2hlbiB0aGUgdXNlciBjbGljayB0aGUgcmVzZXQgaW5wdXRcbiAgICAgICAgICogaW5zaWRlIHRoZSBmb3JtLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdERhdGEgSXQgY29udGFpbnMgdGhlIGZldGNoZWQgZGF0YSBmcm9tXG4gICAgICAgICAqIGBsb2FkRm9ybURhdGEoKWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgaG93IHRvIHVzZSB0aGUgZnVuY3Rpb246XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvbk1vZGFsUmVzZXQ6IGZ1bmN0aW9uKGRlZmF1bHREYXRhKSB7XG4gICAgICAgICAqICAgICAgJChgaW5wdXQjaWRgKS52YWwoZGVmYXVsdERhdGEuaWQpO1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I25hbWVgKS52YWwoZGVmYXVsdERhdGEubmFtZSk7XG4gICAgICAgICAqICAgICAgJChgaW5wdXQjYWRkcmVzc2ApLnZhbChkZWZhdWx0RGF0YS5hZGRyZXNzKTtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9uTW9kYWxSZXNldDogZnVuY3Rpb24gKGRlZmF1bHREYXRhKSB7IH0sXG4gICAgfSwgYXJncyk7XG5cbiAgICBjb25zdCBtaCA9IG5ldyBNb2RhbEhhbmRsZXIodGhpcywgb3B0aW9ucyk7XG4gICAgbWguZGVsZWdhdGVTdWJtaXQoKTtcblxuICAgIHJldHVybiBtaDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbW9kYWxIYW5kbGVyXG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnXG4qL1xuY29uc3QgdHlwZXMgPSB7XG4gICAgbm9fZm9ybWF0dGluZzoge1xuICAgICAgICBpZDogXCJub19mb3JtYXR0aW5nXCIsXG4gICAgICAgIHVtOiBudWxsLFxuICAgICAgICBzdGVwOiBudWxsLFxuICAgICAgICBkZWNpbWFsOiBudWxsLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgICAgaWQ6IFwibnVtYmVyXCIsXG4gICAgICAgIHVtOiBbXCJcIiwgXCJLXCIsIFwiTVwiLCBcIkdcIiwgXCJUXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiBudWxsLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgfSxcbiAgICBmdWxsX251bWJlcjoge1xuICAgICAgICBpZDogXCJudW1iZXJcIixcbiAgICAgICAgdW06IFtcIlwiLCBcIktcIiwgXCJNXCIsIFwiR1wiLCBcIlRcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IG51bGwsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICAgICAgdGhvdXNhbmRzX3NlcDogXCIsXCIsIC8qIENvbW1lbnQgdGhpcyB0byBlbmFibGUgXCJ1bVwiIHNjYWxlZCBzdHlsZSAqL1xuICAgIH0sXG4gICAgYnl0ZXM6IHtcbiAgICAgICAgaWQ6IFwiYnl0ZXNcIixcbiAgICAgICAgdW06IFtcIkJcIiwgXCJLQlwiLCBcIk1CXCIsIFwiR0JcIiwgXCJUQlwiLCBcIlBCXCIsIFwiRUJcIl0sXG4gICAgICAgIHN0ZXA6IDEwMjQsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBicHM6IHtcbiAgICAgICAgaWQ6IFwiYnBzXCIsXG4gICAgICAgIHVtOiBbXCJicHNcIiwgXCJLYnBzXCIsIFwiTWJwc1wiLCBcIkdicHNcIiwgXCJUYnBzXCIsIFwiUGJwc1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiA4LFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGZsb3dzOiB7XG4gICAgICAgIGlkOiBcImZsb3dzXCIsXG4gICAgICAgIHVtOiBbXCJmbG93c1wiLCBcIktmbG93c1wiLCBcIk1mbG93c1wiLCBcIkdmbG93c1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgZnBzOiB7XG4gICAgICAgIGlkOiBcImZwc1wiLFxuICAgICAgICB1bTogW1wiZmxvd3Mvc1wiLCBcIktmbG93cy9zXCIsIFwiTWZsb3dzL3NcIiwgXCJHZmxvd3Mvc1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgYWxlcnRzOiB7XG4gICAgICAgIGlkOiBcImFsZXJ0c1wiLFxuICAgICAgICB1bTogW1wiYWxlcnRzXCIsIFwiS2FsZXJ0c1wiLCBcIk1hbGVydHNcIiwgXCJHYWxlcnRzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgYWxlcnRwczoge1xuICAgICAgICBpZDogXCJhbGVydHBzXCIsXG4gICAgICAgIHVtOiBbXCJhbGVydHMvc1wiLCBcIkthbGVydHMvc1wiLCBcIk1hbGVydHMvc1wiLCBcIkdhbGVydHMvc1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGhpdHM6IHtcbiAgICAgICAgaWQ6IFwiaGl0c1wiLFxuICAgICAgICB1bTogW1wiaGl0c1wiLCBcIktoaXRzXCIsIFwiTWhpdHNcIiwgXCJHaGl0c1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgaGl0c3M6IHtcbiAgICAgICAgaWQ6IFwiaGl0c3NcIixcbiAgICAgICAgdW06IFtcImhpdHMvc1wiLCBcIktoaXRzL3NcIiwgXCJNaGl0cy9zXCIsIFwiR2hpdHMvc1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcGFja2V0czoge1xuICAgICAgICBpZDogXCJwYWNrZXRzXCIsXG4gICAgICAgIHVtOiBbXCJwYWNrZXRzXCIsIFwiS3BhY2tldHNcIiwgXCJNcGFja2V0c1wiLCBcIkdwYWNrZXRzXCIsIFwiVHBhY2tldHNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDAsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHBwczoge1xuICAgICAgICBpZDogXCJwcHNcIixcbiAgICAgICAgdW06IFtcInBwc1wiLCBcIktwcHNcIiwgXCJNcHBzXCIsIFwiR3Bwc1wiLCBcIlRwcHNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIG1zOiB7XG4gICAgICAgIGlkOiBcIm1zXCIsXG4gICAgICAgIHVtOiBbXCJtc1wiLCBcInNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHBlcmNlbnRhZ2U6IHtcbiAgICAgICAgaWQ6IFwicGVyY2VudGFnZVwiLFxuICAgICAgICB1bTogW1wiJVwiXSxcbiAgICAgICAgc3RlcDogMTAxLFxuICAgICAgICBkZWNpbWFsOiAwLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgbWF4X3ZhbHVlOiAxMDAsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBnZXRVbml0TWVhc3VyZUxlbih0eXBlKSB7XG4gICAgLy8gMDAwLjAwXG4gICAgbGV0IHQgPSB0eXBlc1t0eXBlXTtcbiAgICBsZXQgc3BhY2VWYWx1ZSA9IDM7XG4gICAgaWYgKHQuZGVjaW1hbCAhPSBudWxsICYmIHQuZGVjaW1hbCA+IDApIHsgICAgICAgIFxuICAgICAgICBzcGFjZVZhbHVlID0gNjtcbiAgICB9XG4gICAgbGV0IHNwYWNlVW0gPSAwO1xuICAgIGlmICh0LnVtICE9IG51bGwpIHtcbiAgICAgICAgc3BhY2VVbSA9IE1hdGgubWF4KC4uLnQudW0ubWFwKCh1bSkgPT4gdW0ubGVuZ3RoKSk7XG4gICAgfVxuICAgIHJldHVybiAoc3BhY2VWYWx1ZSArIDEgKyBzcGFjZVVtKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGVGYWN0b3JJbmRleCh0eXBlLCB2YWx1ZSkge1xuICAgIGxldCB0eXBlT3B0aW9ucyA9IHR5cGVzW3R5cGVdO1xuICAgIGlmICh0eXBlID09IHR5cGVzLm5vX2Zvcm1hdHRpbmcuaWQgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcyAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlICo9IHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcztcbiAgICB9XG4gICAgbGV0IHN0ZXAgPSB0eXBlT3B0aW9ucy5zdGVwO1xuICAgIGxldCBuZWdhdGl2ZVZhbHVlID0gdmFsdWUgPCAwO1xuICAgIGlmIChuZWdhdGl2ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBtZWFzdXJlcyA9IHR5cGVPcHRpb25zLnVtO1xuICAgIHdoaWxlICh2YWx1ZSA+PSBzdGVwICYmIGkgPCBtZWFzdXJlcy5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIHN0ZXA7XG4gICAgICAgIGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1hdHRlcih0eXBlLCBhYnNvbHV0ZVZhbHVlLCBzY2FsZUZhY3RvckluZGV4KSB7XG4gICAgbGV0IHR5cGVPcHRpb25zID0gdHlwZXNbdHlwZV07XG4gICAgaWYgKHR5cGVPcHRpb25zID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cbiAgICBcbiAgICBhYnNvbHV0ZVZhbHVlIHw9IHR5cGVPcHRpb25zLmFic29sdXRlX3ZhbHVlOyBcbiAgICBsZXQgZm9ybWF0dGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PSB0eXBlcy5ub19mb3JtYXR0aW5nLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZSAqPSB0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5lZ2F0aXZlVmFsdWUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIGlmIChuZWdhdGl2ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG5cbiAgICAgICAgaWYgKHR5cGVPcHRpb25zLm1heF92YWx1ZSAhPSBudWxsICYmIHZhbHVlID4gdHlwZU9wdGlvbnMubWF4X3ZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVPcHRpb25zLm1heF92YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlT3B0aW9ucy50aG91c2FuZHNfc2VwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgJyc7XG4gICAgICAgICAgICB2YXIgeCA9IHZhbHVlLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICB2YXIgeDEgPSB4WzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gKHgubGVuZ3RoID4gMSkgPyAoJy4nICsgeFsxXSkgOiAnJztcbiAgICAgICAgICAgIHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xuICAgICAgICAgICAgd2hpbGUgKHJneC50ZXN0KHgxKSkge1xuICAgICAgICAgICAgICAgIHgxID0geDEucmVwbGFjZShyZ3gsICckMScgKyAnLCcgKyAnJDInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4MSArIHgyO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgc3RlcCA9IHR5cGVPcHRpb25zLnN0ZXA7XG4gICAgICAgIGxldCBkZWNpbWFsID0gdHlwZU9wdGlvbnMuZGVjaW1hbDtcbiAgICAgICAgbGV0IG1lYXN1cmVzID0gdHlwZU9wdGlvbnMudW07XG4gICAgICAgIGxldCBpID0gMDtcblxuICAgICAgICB3aGlsZSAoKHZhbHVlID49IHN0ZXAgJiYgaSA8IG1lYXN1cmVzLmxlbmd0aCAmJiAhc2NhbGVGYWN0b3JJbmRleCkgfHwgKHNjYWxlRmFjdG9ySW5kZXggIT0gbnVsbCAmJiBpIDwgc2NhbGVGYWN0b3JJbmRleCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBzdGVwO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlY2ltYWwgIT0gbnVsbCAmJiBkZWNpbWFsID4gMCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAqIE1hdGgucG93KDEwLCBkZWNpbWFsKTtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gTWF0aC5wb3coMTAsIGRlY2ltYWwpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0ZpeGVkKGRlY2ltYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG5lZ2F0aXZlVmFsdWUgJiYgIWFic29sdXRlVmFsdWUpIHsgdmFsdWUgKj0gLTE7IH1cbiAgICAgICAgbGV0IHZhbFN0cmluZyA9IGAke3ZhbHVlfWA7XG4gICAgICAgIC8vIGlmICh2YWxTdHJpbmcubGVuZ3RoIDwgbWF4TGVuVmFsdWUpIHtcbiAgICAgICAgLy8gICAgIHZhbFN0cmluZyA9IHZhbFN0cmluZy5wYWRFbmQobWF4TGVuVmFsdWUgLSB2YWxTdHJpbmcubGVuZ3RoLCBcIiBcIik7XG4gICAgICAgIC8vIH1cbiAgICAgICAgbGV0IG1TdHJpbmcgPSBgJHttZWFzdXJlc1tpXX1gO1xuICAgICAgICAvLyBpZiAobVN0cmluZy5sZW5ndGggPCBtYXhMZW5VbSkge1xuICAgICAgICAvLyAgICAgbVN0cmluZyA9IG1TdHJpbmcucGFkU3RhcnQobWF4TGVuVW0gLSBtU3RyaW5nLmxlbmd0aCwgXCJfXCIpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGxldCB0ZXh0ID0gYCR7dmFsU3RyaW5nfSAke21TdHJpbmd9YDtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXI7XG59XG5cbmNvbnN0IGZvcm1hdHRlclV0aWxzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZXMsXG4gICAgICAgIGdldFVuaXRNZWFzdXJlTGVuLFxuICAgICAgICBnZXRGb3JtYXR0ZXIsXG4gICAgICAgIGdldFNjYWxlRmFjdG9ySW5kZXgsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyVXRpbHM7XG4iLCJpbXBvcnQgTnRvcFV0aWxzIGZyb20gJy4vbnRvcC11dGlscydcbndpbmRvdy5OdG9wVXRpbHMgPSBOdG9wVXRpbHNcblxuaW1wb3J0IHsgZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzLCBkYXRhdGFibGVGb3JFYWNoUm93LCBkYXRhdGFibGVJc0VtcHR5LCBkYXRhdGFibGVSZW1vdmVFbXB0eVJvdywgZGF0YXRhYmxlQWRkRW1wdHlSb3csIGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zLCBkYXRhdGFibGVHZXRCeUZvcm0sIGRhdGF0YWJsZVVuZG9BZGRSb3csIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWUsIGRhdGF0YWJsZUlzTGFzdFBhZ2UsIGRhdGF0YWJsZUdldENvbHVtbiwgZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXggfSBmcm9tICcuL2RhdGF0YWJsZS9ib290c3RyYXAtZGF0YXRhYmxlLXV0aWxzJ1xuXG53aW5kb3cuZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzID0gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzXG53aW5kb3cuZGF0YXRhYmxlRm9yRWFjaFJvdyA9IGRhdGF0YWJsZUZvckVhY2hSb3dcbndpbmRvdy5kYXRhdGFibGVJc0VtcHR5ID0gZGF0YXRhYmxlSXNFbXB0eVxud2luZG93LmRhdGF0YWJsZVJlbW92ZUVtcHR5Um93ID0gZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3dcbndpbmRvdy5kYXRhdGFibGVBZGRFbXB0eVJvdyA9IGRhdGF0YWJsZUFkZEVtcHR5Um93XG53aW5kb3cuZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMgPSBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtc1xud2luZG93LmRhdGF0YWJsZUdldEJ5Rm9ybSA9IGRhdGF0YWJsZUdldEJ5Rm9ybVxud2luZG93LmRhdGF0YWJsZVVuZG9BZGRSb3cgPSBkYXRhdGFibGVVbmRvQWRkUm93XG53aW5kb3cuZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWUgPSBkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlXG53aW5kb3cuZGF0YXRhYmxlSXNMYXN0UGFnZSA9IGRhdGF0YWJsZUlzTGFzdFBhZ2VcbndpbmRvdy5kYXRhdGFibGVHZXRDb2x1bW4gPSBkYXRhdGFibGVHZXRDb2x1bW5cbndpbmRvdy5kYXRhdGFibGVHZXRDb2x1bW5JbmRleCA9IGRhdGF0YWJsZUdldENvbHVtbkluZGV4XG5cbmltcG9ydCAnLi9lYnBmLXV0aWxzJ1xuaW1wb3J0IG1vZGFsSGFuZGxlciBmcm9tICcuL21vZGFsL21vZGFsLXV0aWxzJ1xuXG53aW5kb3cuJC5mbi5tb2RhbEhhbmRsZXIgPSBtb2RhbEhhbmRsZXJcblxuaW1wb3J0ICcuL3NlcXVlbmNlX3N1bmJ1cnN0J1xuaW1wb3J0ICogYXMgZWJwZlV0aWxzIGZyb20gJy4vZWJwZi11dGlscydcblxud2luZG93LmVicGZVdGlscyA9IGVicGZVdGlsc1xuXG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4vZm9ybWF0dGVyLXV0aWxzXCI7XG53aW5kb3cubnRvcEZvcm1hdHRlclV0aWxzID0gZm9ybWF0dGVyVXRpbHM7XG4iLCJleHBvcnQgZnVuY3Rpb24gbWFrZVVuaXF1ZVZhbGlkYXRvcihpdGVtc19mdW5jdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24oZmllbGQpIHtcbiAgICB2YXIgY21wX25hbWUgPSBmaWVsZC52YWwoKTtcbiAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgLy8gdGhpcyB3aWxsIGJlIGNoZWNrZWQgc2VwYXJhdGVseSwgd2l0aCAncmVxdWlyZWQnIGFyZ3VtZW50XG4gICAgaWYoISBjbXBfbmFtZSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaXRlbXNfZnVuY3Rpb24oZmllbGQpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmFtZSA9ICQodGhpcykudmFsKCk7XG4gICAgICBpZiAobmFtZSA9PSBjbXBfbmFtZSlcbiAgICAgICAgY291bnQgPSBjb3VudCArIDE7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY291bnQgPT0gMTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVtYmVyVmFsdWVWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIG1lbWJlciA9IGlucHV0LnZhbCgpO1xuICBpZiAobWVtYmVyID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gTnRvcFV0aWxzLmlzX21hY19hZGRyZXNzKG1lbWJlcikgfHwgTnRvcFV0aWxzLmlzX25ldHdvcmtfbWFzayhtZW1iZXIsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvcihwYXR0ZXJuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IoaW5wdXQpIHtcbiAgICAvLyByZXF1aXJlZCBpcyBjaGVja2VkIHNlcGFyYXRlbHlcbiAgICBpZighaW5wdXQudmFsKCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAkKGlucHV0KS52YWwoKS5tYXRjaChwYXR0ZXJuKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFzc3dvcmRNYXRjaFZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgb3RoZXJfaW5wdXQgPSAkKGlucHV0KS5jbG9zZXN0KFwiZm9ybVwiKS5maW5kKFwiW2RhdGEtcGFzc3dvcmRtYXRjaF1cIikubm90KGlucHV0KTtcbiAgaWYoIWlucHV0LnZhbCgpIHx8ICFvdGhlcl9pbnB1dC52YWwoKSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiBvdGhlcl9pbnB1dC52YWwoKSA9PT0gaW5wdXQudmFsKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb29sbmFtZVZhbGlkYXRvcihpbnB1dCkge1xuICAvLyByZXF1aXJlZCBpcyBjaGVja2VkIHNlcGFyYXRlbHlcbiAgaWYoIWlucHV0LnZhbCgpKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuICQoaW5wdXQpLnZhbCgpLm1hdGNoKC9eW2EtejAtOV9dKiQvKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc3N3b3JkTWF0Y2hSZWNoZWNrKGZvcm0pIHtcbiAgdmFyIGl0ZW1zID0gJChmb3JtKS5maW5kKFwiW2RhdGEtcGFzc3dvcmRtYXRjaF1cIik7XG4gIHZhciBub3RfZW1wdHkgPSAwO1xuXG4gIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaWYoJCh0aGlzKS52YWwoKSAhPSBcIlwiKSBub3RfZW1wdHkrKztcbiAgfSk7XG5cbiAgaWYobm90X2VtcHR5ID09IGl0ZW1zLmxlbmd0aCkgaXRlbXMudHJpZ2dlcignaW5wdXQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvc3RPck1hY1ZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgaG9zdCA9IGlucHV0LnZhbCgpO1xuXG4gIC8qIEhhbmRsZWQgc2VwYXJhdGVseSAqL1xuICBpZiAoaG9zdCA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5pc19tYWNfYWRkcmVzcyhob3N0KSB8fCBOdG9wVXRpbHMuaXNfZ29vZF9pcHY0KGhvc3QpIHx8IE50b3BVdGlscy5pc19nb29kX2lwdjYoaG9zdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpcEFkZHJlc3NWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIGhvc3QgPSBpbnB1dC52YWwoKTtcblxuICAvKiBIYW5kbGVkIHNlcGFyYXRlbHkgKi9cbiAgaWYgKGhvc3QgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuaXNfZ29vZF9pcHY0KGhvc3QpIHx8IE50b3BVdGlscy5pc19nb29kX2lwdjYoaG9zdCk7XG59XG5cbnZhciBmaWx0ZXJzX3RvX3ZhbGlkYXRlID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBicGZWYWxpZGF0b3IoZmlsdGVyX2ZpZWxkLCBzeW5jID0gZmFsc2UpIHtcbiAgdmFyIGZpbHRlciA9IGZpbHRlcl9maWVsZC52YWwoKTtcblxuICBpZiAoZmlsdGVyLnRyaW0oKSA9PT0gXCJcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGtleSA9IGZpbHRlcl9maWVsZC5hdHRyKFwibmFtZVwiKTtcbiAgdmFyIHRpbWVvdXQgPSAyNTA7XG5cbiAgaWYgKCFmaWx0ZXJzX3RvX3ZhbGlkYXRlW2tleV0pXG4gICAgIGZpbHRlcnNfdG9fdmFsaWRhdGVba2V5XSA9IHthamF4X29iajpudWxsLCB2YWxpZDp0cnVlLCB0aW1lcjpudWxsLCBzdWJtaXRfcmVtaW5kOmZhbHNlLCBsYXN0X3ZhbDpudWxsfTtcbiAgdmFyIHN0YXR1cyA9IGZpbHRlcnNfdG9fdmFsaWRhdGVba2V5XTtcblxuICB2YXIgc2VuZEFqYXggPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhdHVzLnRpbWVyID0gbnVsbDtcblxuICAgIHZhciBmaW5hbGx5X2NoZWNrID0gZnVuY3Rpb24gKHZhbGlkKSB7XG4gICAgICBzdGF0dXMuYWpheF9vYmogPSBudWxsO1xuICAgICAgc3RhdHVzLnZhbGlkID0gdmFsaWQ7XG4gICAgICBzdGF0dXMubGFzdF92YWwgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cy5sYXN0X3ZhbCAhPT0gZmlsdGVyKSB7XG4gICAgICBpZiAoc3RhdHVzLmFqYXhfb2JqKVxuICAgICAgICBzdGF0dXMuYWpheF9vYmouYWJvcnQoKTtcblxuICAgICAgc3RhdHVzLmFqYXhfb2JqID0gJC5hamF4KHtcbiAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2NoZWNrL2ZpbHRlci5sdWFgLFxuICAgICAgICBhc3luYzogIXN5bmMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBxdWVyeTogZmlsdGVyLFxuICAgICAgICB9LCBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZmluYWxseV9jaGVjayhzdGF0dXMudmFsaWQpO1xuICAgICAgICB9LCBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZGF0YS5yZXNwb25zZSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICBmaW5hbGx5X2NoZWNrKHZhbGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHBvc3NpYmx5IHByb2Nlc3MgdGhlIHJlbWluZGVyXG4gICAgICBmaW5hbGx5X2NoZWNrKHN0YXR1cy52YWxpZCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChzeW5jKSB7XG4gICAgc2VuZEFqYXgoKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMubGFzdF92YWwgPT09IGZpbHRlcikge1xuICAgIC8vIElnbm9yaW5nXG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0YXR1cy50aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXR1cy50aW1lcik7XG4gICAgICBzdGF0dXMuc3VibWl0X3JlbWluZCA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGF0dXMudGltZXIgPSBzZXRUaW1lb3V0KHNlbmRBamF4LCB0aW1lb3V0KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0dXMudmFsaWQ7XG59XG5cbiIsImltcG9ydCB7IG1ha2VVbmlxdWVWYWxpZGF0b3IsIG1lbWJlclZhbHVlVmFsaWRhdG9yLCBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yLCBwYXNzd29yZE1hdGNoVmFsaWRhdG9yLCBwb29sbmFtZVZhbGlkYXRvciwgcGFzc3dvcmRNYXRjaFJlY2hlY2ssIGhvc3RPck1hY1ZhbGlkYXRvciwgaXBBZGRyZXNzVmFsaWRhdG9yLCBicGZWYWxpZGF0b3IgfSBmcm9tICcuL250b3BuZy12YWxpZGF0b3JzLXV0aWxzJ1xuXG53aW5kb3cubWFrZVVuaXF1ZVZhbGlkYXRvciA9IG1ha2VVbmlxdWVWYWxpZGF0b3JcbndpbmRvdy5tZW1iZXJWYWx1ZVZhbGlkYXRvciA9IG1lbWJlclZhbHVlVmFsaWRhdG9yXG53aW5kb3cubWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvciA9IG1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3JcbndpbmRvdy5wYXNzd29yZE1hdGNoVmFsaWRhdG9yID0gcGFzc3dvcmRNYXRjaFZhbGlkYXRvclxud2luZG93LnBvb2xuYW1lVmFsaWRhdG9yID0gcG9vbG5hbWVWYWxpZGF0b3JcbndpbmRvdy5wYXNzd29yZE1hdGNoUmVjaGVjayA9IHBhc3N3b3JkTWF0Y2hSZWNoZWNrXG53aW5kb3cuaG9zdE9yTWFjVmFsaWRhdG9yID0gaG9zdE9yTWFjVmFsaWRhdG9yXG53aW5kb3cuaXBBZGRyZXNzVmFsaWRhdG9yID0gaXBBZGRyZXNzVmFsaWRhdG9yXG53aW5kb3cuYnBmVmFsaWRhdG9yID0gYnBmVmFsaWRhdG9yXG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuZXhwb3J0IGNvbnN0IG50b3BuZ19zeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvbXBvbmVudHNfcmVhZHkgPSB7fTtcbiAgICBsZXQgc3Vic2NyaWJlcnMgPSBbXTsgICAgICAgIFxuICAgIHJldHVybiB7XG5cdHJlYWR5OiBmdW5jdGlvbihjb21wb25lbnRfbmFtZSkge1xuXHQgICAgY29tcG9uZW50c19yZWFkeVtjb21wb25lbnRfbmFtZV0gPSB0cnVlO1xuXHQgICAgc3Vic2NyaWJlcnMuZmlsdGVyKChzKSA9PiBzLmNvbXBvbmVudF9uYW1lID09IGNvbXBvbmVudF9uYW1lKS5mb3JFYWNoKChzKSA9PiBzLnJlc29sdmUoKSk7XG5cdCAgICBzdWJzY3JpYmVycyA9IHN1YnNjcmliZXJzLmZpbHRlcigocykgPT4gcy5jb21wb25lbnRfbmFtZSAhPSBjb21wb25lbnRfbmFtZSk7XG5cdH0sXG5cdG9uX3JlYWR5OiBmdW5jdGlvbihjb21wb25lbnRfbmFtZSkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWpldnQpID0+IHtcblx0XHRpZiAoY29tcG9uZW50c19yZWFkeVtjb21wb25lbnRfbmFtZV0pIHtcblx0XHQgICAgcmVzb2x2ZSgpO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdHN1YnNjcmliZXJzLnB1c2goe3Jlc29sdmUsIGNvbXBvbmVudF9uYW1lLCBjb21wbGV0ZWQ6IGZhbHNlfSk7XG5cdCAgICB9KTtcblx0fSxcbiAgICB9O1xufSgpO1xuXG4vKipcbiogVXRpbGl0eSBnbG9iYWxzIGZ1bmN0aW9ucy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX3V0aWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgZ2xvYmFsX2h0dHBfaGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB7XG5cdGlzX2FycmF5OiBmdW5jdGlvbihlKSB7XG5cdCAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlKTtcblx0fSxcblx0aXNfb2JqZWN0OiBmdW5jdGlvbihlKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnXG5cdFx0JiYgIXRoaXMuaXNfYXJyYXkoZSlcblx0XHQmJiBlICE9PSBudWxsO1xuXHR9LFxuXHQvKipcblx0ICogRGVlcCBjb3B5IG9mIGEgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqLlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fS5cblx0ICovXG5cdGNsb25lOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfb2JqZWN0KG9iaikpIHtcblx0XHQvKiBUaGlzIGRvZXMgdGhlIGRlZXAgY29weSB1c2luZyBqcXVlcnkgZm9yIG9iamVjdHMgKi9cblx0XHRyZXR1cm4gJC5leHRlbmQodHJ1ZSwge30sIG9iaik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSl7XG5cdFx0LyogVGhpcyBkb2VzIHRoZSBkZWVwIGNvcHkgdXNpbmcganF1ZXJ5IGZvciBvdGhlciB0eXBlcyAqL1xuXHRcdGxldCByZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdCAgICBsZXQgZWwgPSB0aGlzLmNsb25lKG9ialtpXSk7XG5cdFx0ICAgIHJlcy5wdXNoKGVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0Ly8gcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSlcblx0XHRyZXR1cm4gb2JqO1xuXHQgICAgfVxuXHR9LCAgICAgIFxuXHRvYmplY3RfdG9fYXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgaWYgKG9iaiA9PSBudWxsKSB7IHJldHVybiBbXTsgfVxuXHQgICAgbGV0IGFycmF5ID0gW107XG5cdCAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG5cdFx0YXJyYXkucHVzaChvYmpba2V5XSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYXJyYXk7XG5cdH0sXG5cdGdldF91dGNfc2Vjb25kczogZnVuY3Rpb24odXRjX21zKSB7XG5cdCAgICBpZiAodXRjX21zID09IG51bGwpIHsgdXRjX21zID0gRGF0ZS5ub3coKTsgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh1dGNfbXMgLyAxMDAwKTtcblx0fSxcblx0Z2V0X3RpbWVmcmFtZXNfZGljdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIGxldCB0X2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgdF93ZWVrID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxldCB0X21vbnRoID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxldCB0X3llYXIgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcIm1pblwiOiBtaW4sXG4gICAgICAgICAgICAgICAgXCI1X21pblwiOiBtaW4gKiA1LFxuICAgICAgICAgICAgICAgIFwiMTBfbWluXCI6IG1pbiAqIDEwLFxuICAgICAgICAgICAgICAgIFwiMzBfbWluXCI6IG1pbiAqIDMwLFxuICAgICAgICAgICAgICAgIGhvdXI6IG1pbiAqIDYwLFxuICAgICAgICAgICAgICAgIFwiMl9ob3Vyc1wiOiAyICogbWluICogNjAsXG4gICAgICAgICAgICAgICAgXCI2X2hvdXJzXCI6IDYgKiBtaW4gKiA2MCxcbiAgICAgICAgICAgICAgICBcIjEyX2hvdXJzXCI6IDEyICogbWluICogNjAsXG4gICAgICAgICAgICAgICAgZGF5OiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdF9kYXkuc2V0RGF0ZSh0X2RheS5nZXREYXRlKCkgLSAxKSksXG4gICAgICAgICAgICAgICAgd2VlazogdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHRfd2Vlay5zZXREYXRlKHRfd2Vlay5nZXREYXRlKCkgLSA3KSksXG4gICAgICAgICAgICAgICAgbW9udGg6IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0X21vbnRoLnNldE1vbnRoKHRfbW9udGguZ2V0TW9udGgoKSAtIDEpKSxcbiAgICAgICAgICAgICAgICB5ZWFyOiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdF95ZWFyLnNldE1vbnRoKHRfeWVhci5nZXRNb250aCgpIC0gMTIpKSxcbiAgICAgICAgICAgIH07XG5cdH0sXG5cdC8vIGdpdmVuIHZhbGlkIGludGVydmFsIHN0cmluZyBnZXQgdGltZSBpbiBzZWNvbmRzXG5cdGdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQ6IGZ1bmN0aW9uICh0aW1lZnJhbWVfaWQpIHtcbiAgICAgICAgICAgIGxldCB0aW1lZnJhbWVzX2RpY3QgPSB0aGlzLmdldF90aW1lZnJhbWVzX2RpY3QoKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHRpbWVmcmFtZXNfZGljdFtpbnRlcnZhbF9zdHJpbmddID09IG51bGwgPT4ga2V5IGlzIG5vdCBwcmVzZW50XG4gICAgICAgICAgICBpZiAodGltZWZyYW1lc19kaWN0W3RpbWVmcmFtZV9pZF0gPT0gbnVsbCkge1xuXHRcdHRocm93IGBXcm9uZyB0aW1lZnJhbWVfaWQgcGFzc2VkICR7dGltZWZyYW1lX2lkfSwgdmFsaWQgaW50ZXJ2YWxzIGFyZTogJHtPYmplY3Qua2V5cyh0aW1lZnJhbWVzX2RpY3QpLmpvaW4oXCIsIFwiKX1gO1xuICAgICAgICAgICAgfVxuXHQgICAgcmV0dXJuIHRpbWVmcmFtZXNfZGljdFt0aW1lZnJhbWVfaWRdO1xuXHR9LFxuXHRyb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZDogZnVuY3Rpb24odHMsIHRpbWVmcmFtZV9pZCkge1xuXHQgICAgY29uc3QgdGltZWZyYW1lID0gdGhpcy5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKHRpbWVmcmFtZV9pZCk7XG5cdCAgICByZXR1cm4gdHMgLSAodHMgJSB0aW1lZnJhbWUpO1xuXHR9LFxuXHQvLyBtZXRob2QgdG8gc2V0IGRlZmF1bHQgZXBvY2ggYmVnaW4gdG8gMzBfbWluIGFnb1xuXHRzZXRfZGVmYXVsdF90aW1lX2ludGVydmFsOiBmdW5jdGlvbiAodGltZV9pbnRlcnZhbF9pZD1cIjMwX21pblwiLCByb3VuZF90aW1lZnJhbWVfaWQpIHtcbiAgICAgICAgICAgIGxldCBlcG9jaCA9IHtcblx0XHRlcG9jaF9iZWdpbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSxcblx0XHRlcG9jaF9lbmQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpLFxuICAgICAgICAgICAgfTtcblx0ICAgIGNvbnN0IG5vd19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBsZXQgc2Vjb25kc19pbl9pbnRlcnZhbCA9IHRoaXMuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCh0aW1lX2ludGVydmFsX2lkKTtcbiAgICAgICAgICAgIGVwb2NoLmVwb2NoX2JlZ2luID0gbm93X3MgLSBzZWNvbmRzX2luX2ludGVydmFsO1xuICAgICAgICAgICAgZXBvY2guZXBvY2hfZW5kID0gbm93X3M7XG4gICAgICAgICAgICBpZiAocm91bmRfdGltZWZyYW1lX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlcG9jaC5lcG9jaF9iZWdpbiA9IHRoaXMucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQoZXBvY2guZXBvY2hfYmVnaW4sIHJvdW5kX3RpbWVmcmFtZV9pZCk7XG4gICAgICAgICAgICAgICAgZXBvY2guZXBvY2hfZW5kID0gdGhpcy5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChlcG9jaC5lcG9jaF9lbmQsIHJvdW5kX3RpbWVmcmFtZV9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9iZWdpblwiLCBlcG9jaC5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9lbmRcIiwgZXBvY2guZXBvY2hfZW5kKTtcblx0ICAgIFxuICAgICAgICAgICAgcmV0dXJuIGVwb2NoO1xuXHR9LFxuXHQvL3Nob3VsZCB0YWtlIGEgc3RyaW5nIGFzIHBhcmFtZXRlciB0aGF0IHJlcHJlc2VudCB0aW1lOiBtaW4sIDVfbWluLCAzMF9taW4sIGhvdXIsIDJfaG91cnMsIDZfaG91cnMsIDEyX2hvdXJzLCBkYXksIHdlZWssIG1vbnRoLCB5ZWFyLiBJRCB0aW1lX2ludGVydmFsX2lkIGlzIG51bGwsIGRlZmF1bHQgbXVzdCBiZSAzMF9taW5cblx0Ly8gcmV0dXJuIGVwb2NoX2ludGVydmFsIG9ubHkgaWYgZXBvY2ggdXJsIGlzIHNldFxuXHRjaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbDogZnVuY3Rpb24gKHRpbWVfaW50ZXJ2YWxfaWQ9XCIzMF9taW5cIiwgZl9jb25kaXRpb24sIGdldF9lcG9jaD1mYWxzZSwgcm91bmRfdGltZWZyYW1lX2lkKSB7XG4gICAgICAgICAgICBsZXQgZXBvY2ggPSB0aGlzLmdldF91cmxfZXBvY2hfaW50ZXJ2YWwoKTtcblxuICAgICAgICAgICAgLy8gaWYgdGltZV9pbnRlcnZhbF9pZCBpcyAzMCAoZGVmYXVsdClcbiAgICAgICAgICAgIGlmIChlcG9jaC5lcG9jaF9iZWdpbiA9PSBudWxsIHx8IGVwb2NoLmVwb2NoX2VuZCA9PSBudWxsIHx8IChmX2NvbmRpdGlvbiAhPSBudWxsICYmIGZfY29uZGl0aW9uKGVwb2NoKSA9PSB0cnVlKSkgIHtcblx0XHRlcG9jaCA9IHRoaXMuc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCh0aW1lX2ludGVydmFsX2lkLCByb3VuZF90aW1lZnJhbWVfaWQpO1xuXHRcdHJldHVybiBlcG9jaDtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmIChnZXRfZXBvY2ggPT0gdHJ1ZSkge1xuXHRcdHJldHVybiBlcG9jaDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBudWxsO1xuXHR9LFxuXHRnZXRfdXJsX2Vwb2NoX2ludGVydmFsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBlcG9jaCA9IHtcblx0XHRlcG9jaF9iZWdpbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSxcblx0XHRlcG9jaF9lbmQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpLFxuICAgICAgICAgICAgfTtcblx0ICAgIHJldHVybiBlcG9jaDtcblx0fSxcblx0ZnJvbV91dGNfc190b19zZXJ2ZXJfZGF0ZTogZnVuY3Rpb24odXRjX3NlY29uZHMpIHtcblx0ICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG5cdCAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG5cdCAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuXHQgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9taW51dGVzID0gIHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG5cdCAgICB2YXIgZF9zZXJ2ZXIgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRfbXMpO1xuXHQgICAgcmV0dXJuIGRfc2VydmVyO1xuXHR9LFxuICAgIGdldF9kYXRlX2Zvcm1hdDogYXN5bmMgZnVuY3Rpb24oaXNfcmFuZ2VfcGlja2VyLCBjc3JmLCBodHRwX3ByZWZpeCkge1xuICAgICAgICBjb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgICAgICAgICAgIGNzcmY6IGNzcmZcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZGF0ZV9mb3JtYXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL2RhdGVfZm9ybWF0Lmx1YWA7XG4gICAgICAgIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChkYXRlX2Zvcm1hdF91cmwsIHtcbiAgICAgICAgICAgIGlzX3JhbmdlX3BpY2tlcjogaXNfcmFuZ2VfcGlja2VyXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7ICAgIFxuICAgIH0sXG5cdGZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdDogZnVuY3Rpb24odXRjX21zLCBmb3JtYXQpIHtcblx0ICAgIGlmIChmb3JtYXQgPT0gbnVsbCkgeyBmb3JtYXQgPSBcIkREL01NTS9ZWVlZIEhIOm1tXCI7IH1cblx0ICAgIGxldCBtID0gbW9tZW50LnR6KHV0Y19tcywgbnRvcF96b25laW5mbyk7XG5cdCAgICBsZXQgdHpfc2VydmVyID0gbS5mb3JtYXQoZm9ybWF0KTtcblx0ICAgIHJldHVybiB0el9zZXJ2ZXI7XG5cdH0sXG5cdGNvcHlfb2JqZWN0X2tleXM6IGZ1bmN0aW9uKHNvdXJjZV9vYmosIGRlc3Rfb2JqLCByZWN1cnNpdmVfb2JqZWN0ID0gZmFsc2UpIHtcblx0ICAgIGlmIChzb3VyY2Vfb2JqID09IG51bGwpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBmb3IgKGxldCBrZXkgaW4gc291cmNlX29iaikge1xuXHQgICAgXHRpZiAoc291cmNlX29ialtrZXldID09IG51bGwpIHsgY29udGludWU7IH1cblx0XHQvKiBTZWN1cml0eSBjaGVjayBmb3IgUHJvdG90eXBlIHBvbGx1dGlvbiB2dWxuZXJhYmlsaXR5ICovXG5cdFx0aWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIikgeyBjb250aW51ZTsgfVxuXHQgICAgXHRpZiAocmVjdXJzaXZlX29iamVjdCA9PSB0cnVlICYmIHRoaXMuaXNfb2JqZWN0KHNvdXJjZV9vYmpba2V5XSkgJiYgdGhpcy5pc19vYmplY3QoZGVzdF9vYmpba2V5XSkpIHtcblx0ICAgIFx0ICAgIHRoaXMuY29weV9vYmplY3Rfa2V5cyhzb3VyY2Vfb2JqW2tleV0sIGRlc3Rfb2JqW2tleV0sIHJlY3Vyc2l2ZV9vYmplY3QpO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHQgICAgZGVzdF9vYmpba2V5XSA9IHNvdXJjZV9vYmpba2V5XTtcblx0ICAgIFx0fVxuXHQgICAgfVxuXHR9LFxuICAgIGdldF9jdmVfZGV0YWlsc191cmwoY3ZlX2lkLCBzY2FuX3R5cGUpIHtcbiAgICAgICAgLy8gIElNUE9SVEFOVDogVGhlIHJldHJpZXZlZCB2YWx1ZSBtdXN0IG1hdGNoIHRoZSB2YWx1ZSBpbiBcbiAgICAgICAgLy8gIHNjcmlwdHMvbHVhL21vZHVsZXMvdnVsbmVyYWJpbGl0eV9zY2FuL2N2ZV91dGlscy5sdWEgZm9yIHRoZSAnY3ZlX3V0aWxzLmdldERvY1VSTCcgZnVuY3Rpb24uXG4gICAgICAgIGlmKHNjYW5fdHlwZSA9PSBcImN2ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYGh0dHBzOi8vbnZkLm5pc3QuZ292L3Z1bG4vZGV0YWlsLyR7Y3ZlX2lkfWA7XG4gICAgICAgIH0gZWxzZSBpZihzY2FuX3R5cGUgPT0gXCJvcGVudmFzXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBgaHR0cHM6Ly92dWxuZXJzLmNvbS9vcGVudmFzL09QRU5WQVM6JHtjdmVfaWR9YDtcbiAgICAgICAgfVxuICAgIH0sXG5cdHNldF9odHRwX2dsb2JhbHNfaGVhZGVycyhoZWFkZXJzKSB7XG5cdCAgICBnbG9iYWxfaHR0cF9oZWFkZXJzID0gaGVhZGVycztcblx0fSxcblx0aHR0cF9wb3N0X3JlcXVlc3Q6IGFzeW5jIGZ1bmN0aW9uKHVybCwgcGFyYW1zLCB0aHJvd19leGNlcHRpb24sIG5vdF91bndyYXApIHtcblx0ICAgIGxldCBoZWFkZXJzID0ge1xuXHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0ICAgIH07XG5cdCAgICBpZiAocGFyYW1zLmNzcmYgPT0gbnVsbCkge1xuXHRcdHRocm93IGBOVUxMIGNzcmYgaW4gJHt1cmx9IFBPU1QgcmVxdWVzdC5gO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9LCB0aHJvd19leGNlcHRpb24sIG5vdF91bndyYXApO1xuXHR9LFxuXHRodHRwX3JlcXVlc3Q6IGFzeW5jIGZ1bmN0aW9uKHVybCwgb3B0aW9ucywgdGhyb3dfZXhjZXB0aW9uLCBub3RfdW53cmFwKSB7XG5cdCAgICB0cnkge1xuXHRcdGlmIChvcHRpb25zID09IG51bGwpIHtcblx0XHQgICAgb3B0aW9ucyA9IHt9O1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucy5oZWFkZXJzID09IG51bGwpIHtcblx0XHQgICAgb3B0aW9ucy5oZWFkZXJzID0ge307XG5cdFx0fVxuXHRcdGlmIChvcHRpb25zLmhlYWRlcnMgIT0gbnVsbCAmJiBnbG9iYWxfaHR0cF9oZWFkZXJzICE9IG51bGwpIHtcblx0XHQgICAgb3B0aW9ucy5oZWFkZXJzID0ge1xuXHRcdFx0Li4ub3B0aW9ucy5oZWFkZXJzLFxuXHRcdFx0Li4uZ2xvYmFsX2h0dHBfaGVhZGVycyxcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0bGV0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucyk7XG5cdFx0aWYgKHJlcy5vayA9PT0gZmFsc2UpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihgaHR0cF9yZXF1ZXN0ICR7dXJsfVxcbiBvayA9PSBmYWxzZWApO1xuXHRcdCAgICBjb25zb2xlLmVycm9yKHJlcyk7XG5cdFx0ICAgIHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRsZXQganNvbl9yZXMgPSBhd2FpdCByZXMuanNvbigpO1xuXHRcdGlmIChub3RfdW53cmFwID09PSB0cnVlKSB7IHJldHVybiBqc29uX3JlczsgfVxuXHRcdHJldHVybiBqc29uX3Jlcy5yc3A7XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0Y29uc29sZS5lcnJvcihcIlVSTDogXCIgKyB1cmwpO1xuXHRcdGlmICh0aHJvd19leGNlcHRpb24gPT0gdHJ1ZSkgeyB0aHJvdyBlcnI7IH1cblx0XHRyZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0fSxcblx0ZG93bmxvYWRfVVJJOiBmdW5jdGlvbih1cmksIG5hbWUpIHtcblx0ICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cdCAgICBsaW5rLmRvd25sb2FkID0gbmFtZTtcblx0ICAgIGxpbmsuaHJlZiA9IHVyaTtcblx0ICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG5cdCAgICBsaW5rLmNsaWNrKCk7XG5cdCAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xuXHR9LFxuXHRnZXRfcmFuZG9tX3N0cmluZzogZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyKDIsIDgpO1xuXHR9LFxuXHRzdHJpbmdfaGFzaF9jb2RlOiBmdW5jdGlvbihzKSB7XG5cdCAgICBsZXQgaGFzaCA9IDAsIGksIGNocjtcblx0ICAgIGlmIChzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuXHRcdGNociAgID0gcy5jaGFyQ29kZUF0KGkpO1xuXHRcdGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG5cdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0ICAgIH1cblx0ICAgIHJldHVybiBoYXNoO1xuXHR9LFxuXHRtb2Q6IGZ1bmN0aW9uKHgsIHkpIHtcblx0ICAgIHggPSB4ICUgeTtcblx0ICAgIGlmICh4IDwgMCkgeyB4ICs9IHk7IH1cblx0ICAgIHJldHVybiB4O1xuXHR9XG4gICAgfVxufSgpO1xuXG4vKipcbiogQWxsb3dzIHRvIG1hbmFnZSB0aGUgYXBwbGljYXRpb24gZ2xvYmFsIHN0YXR1cy5cbiogVGhlIHN0YXR1cyBpcyBpbmNhcHN1bGF0ZWQgaW50byB0aGUgdXJsLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfc3RhdHVzX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgZ2xvYmFsX3N0YXR1cyA9IHt9O1xuICAgIC8qKiBAdHlwZSB7eyBbaWQ6IHN0cmluZ106IChzdGF0dXM6IG9iamVjdCkgPT4gdm9pZH19ICovXG4gICAgbGV0IHN1YnNjcmliZXJzID0ge307IC8vIGRpY3Rpb25hcnkgb2YgeyBbaWQ6IHN0cmluZ106IGZfb25fbnRvcG5nX3N0YXR1c19jaGFuZ2UoKSB9XG4gICAgY29uc3QgY2xvbmUgPSAoZSkgPT4gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZSk7XG5cbiAgICBjb25zdCByZWxwbGFjZV9nbG9iYWxfc3RhdHVzID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgIGdsb2JhbF9zdGF0dXMgPSBzdGF0dXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgdGhlIHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMgd2l0aCBpZCBkaWZmZXJlbnQgZnJvbSBza2lwX2lkLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0dXMgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICovXG4gICAgY29uc3Qgbm90aWZ5X3N1YnNjcmliZXJzID0gZnVuY3Rpb24oc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICAgIGZvciAobGV0IGlkIGluIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICBpZiAoaWQgPT0gc2tpcF9pZCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgbGV0IGZfb25fY2hhbmdlID0gc3Vic2NyaWJlcnNbaWRdO1xuICAgICAgICAgICAgZl9vbl9jaGFuZ2UoY2xvbmUoc3RhdHVzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgZ2xvYmFsIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGdldF9zdGF0dXM6IGZ1bmN0aW9uKG5vdF9jbG9uZSkge1xuXHQgICAgaWYgKG5vdF9jbG9uZSA9PSB0cnVlKSB7XG5cdFx0cmV0dXJuIGdsb2JhbF9zdGF0dXM7XG5cdCAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2xvbmUoZ2xvYmFsX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlX3N1YnNjcmliZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbm90aWZ5X3N1YnNjcmliZXJzKHN0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93cyB0byBzdWJzY3JpYmVycyBmX29uX2NoYW5nZSBjYWxsYmFjayBvbiBzdGF0dXMgY2hhbmdlIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgYW4gaWRlbnRpZmllciBvZiB0aGUgc3Vic2NyaWJ0aW9uLiBcbiAgICAgICAgICogQHBhcmFtIHsoc3RhdHVzOm9iamVjdCkgPT4gdm9pZH0gZl9vbl9jaGFuZ2UgY2FsbGJhY2sgdGhhdCB0YWtlIG9iamVjdCBzdGF0dXMgYXMgcGFyYW0uXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0X2luaXRfbm90aWZ5IGlmIHRydWUgdGhlIGNhbGxiYWNrIGl0J3MgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGxhc3Qgc3RhdHVzIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIG9uX3N0YXR1c19jaGFuZ2U6IGZ1bmN0aW9uKGlkLCBmX29uX2NoYW5nZSwgZ2V0X2luaXRfbm90aWZ5KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyc1tpZF0gPSBmX29uX2NoYW5nZTtcbiAgICAgICAgICAgIGlmIChnZXRfaW5pdF9ub3RpZnkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgICAgICBmX29uX2NoYW5nZShjbG9uZShzdGF0dXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmFwbGFjZXMgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cyBhbmQgbm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBOb3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0dXMgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVwbGFjZV9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgc2tpcF9pZCkge1xuICAgICAgICAgICAgcmVscGxhY2VfZ2xvYmFsX3N0YXR1cyhzdGF0dXMpO1xuICAgICAgICAgICAgbm90aWZ5X3N1YnNjcmliZXJzKHN0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgb3IgcmVwbGFjZXMgYWxsIG9iaiBwYXJhbSBrZXlzIHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBvYmplY3QgdG8gYWRkIG9yIGVkaXQgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy4gXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkX29ial90b19zdGF0dXM6IGZ1bmN0aW9uKG9iaiwgc2tpcF9pZCkge1xuICAgICAgICAgICAgbGV0IG5ld19zdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMob2JqLCBuZXdfc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV9zdGF0dXMobmV3X3N0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgb3IgcmVwbGFjZXMgdGhlIHZhbHVlIGtleSB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICAgKiBOb3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkga2V5IHRvIGFkZHMgb3IgcmVwbGFjZXMuXG4gICAgICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZSB2YWx1ZSB0byBhZGRzIG9yIHJlcGxhY2VzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRfdmFsdWVfdG9fc3RhdHVzOiBmdW5jdGlvbihrZXksIHZhbHVlLCBza2lwX2lkKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3N0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbmV3X3N0YXR1c1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAvLyAvKiBUaGlzIGlzIG5lZWRlZCB0byBoYXZlIG11bGlwbGUgZmlsdGVycyBmb3IgdGhlIHNhbWUga2V5ICovXG4gICAgICAgICAgICAvLyAobmV3X3N0YXR1c1trZXldICYmIG5ld19zdGF0dXNba2V5XS5zZWFyY2godmFsdWUpID09PSAtMSkgPyBuZXdfc3RhdHVzW2tleV0gKz0gXCIsXCIgKyB2YWx1ZSA6IG5ld19zdGF0dXNba2V5XSA9IHZhbHVlXG4gICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2Vfc3RhdHVzKG5ld19zdGF0dXMsIHNraXBfaWQpO1xuICAgICAgICB9LFxuICAgIH1cbn0oKTtcblxuY29uc3QgbnRvcG5nX3BhcmFtc191cmxfc2VyaWFsaXplciA9IHtcbiAgLy8gZmlsdGVyczogZnVuY3Rpb24oa2V5LCBmaWx0ZXJzKSB7XG4gIC8vIFx0aWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm4gXCJcIjsgfVxuICAvLyBcdGxldCBmaWx0ZXJzX2dyb3VwcyA9IHt9O1xuICAvLyBcdGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAvLyBcdCAgICBsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmLmlkXTtcbiAgLy8gXHQgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgLy8gXHRcdGdyb3VwID0gW107XG4gIC8vIFx0XHRmaWx0ZXJzX2dyb3Vwc1tmLmlkXSA9IGdyb3VwO1xuICAvLyBcdCAgICB9XG4gIC8vIFx0ICAgIGdyb3VwLnB1c2goZik7XG4gIC8vIFx0fSk7XG4gIC8vIFx0bGV0IHVybF9wYXJhbXNfYXJyYXkgPSBbXTtcbiAgLy8gXHRmb3IgKGxldCBmX2lkIGluIGZpbHRlcnNfZ3JvdXBzKSB7XG4gIC8vIFx0ICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2ZfaWRdO1xuICAvLyBcdCAgICBsZXQgdXJsX3ZhbHVlcyA9IGdyb3VwLmZpbHRlcigoZikgPT4gZi52YWx1ZSAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IFwiXCIpLm1hcCgoZikgPT4gYCR7Zi52YWx1ZX07JHtmLm9wZXJhdG9yfWApLmpvaW4oXCIsXCIpO1xuICAvLyBcdCAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oZl9pZCwgdXJsX3ZhbHVlcyk7XG4gIC8vIFx0ICAgIHVybF9wYXJhbXNfYXJyYXkucHVzaCh1cmxfcGFyYW1zKTtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIHVybF9wYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG4gIC8vIH0sXG59O1xuXG5leHBvcnQgY29uc3QgbnRvcG5nX3VybF9tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IChvYmo6IGFueSkgPT4gc3RyaW5nfX0gKi9cbiAgICBsZXQgY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyID0ge307XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhudG9wbmdfcGFyYW1zX3VybF9zZXJpYWxpemVyLCBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIpO1xuICBcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGdldF91cmxfcGFyYW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX3NlYXJjaF9wYXJhbXM6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCB1cmxfcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh1cmwpO1xuICAgICAgICAgICAgcmV0dXJuIHVybF9wYXJhbXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9lbnRyaWVzOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcyh1cmwpO1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IHVybF9wYXJhbXMuZW50cmllcygpO1xuICAgICAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9lbnRyeTogZnVuY3Rpb24ocGFyYW1fbmFtZSwgdXJsKSB7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKHVybCk7XG4gICAgICAgICAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IHBhcmFtX25hbWUpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX29iamVjdDogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBsZXQgZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKHVybCk7XG4gICAgICAgICAgICBsZXQgb2JqID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3Blbl9uZXdfd2luZG93OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHVybCA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVsb2FkX3VybDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH0sXG5cblx0Z29fdG9fdXJsOiBmdW5jdGlvbih1cmwpIHtcblx0ICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHdpbmRvdy5sb2NhdGlvbik7XG5cdCAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuXHR9LFxuXG4gICAgICAgIHJlcGxhY2VfdXJsOiBmdW5jdGlvbih1cmxfcGFyYW1zKSB7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIG51bGwsIGA/JHt1cmxfcGFyYW1zfWApO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlcGxhY2VfdXJsX2FuZF9yZWxvYWQ6IGZ1bmN0aW9uKHVybF9wYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwodXJsX3BhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZF91cmwoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXJpYWxpemVfcGFyYW06IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke2tleX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XG4gICAgICAgIH0sXHRcblxuICAgICAgICBzZXRfY3VzdG9tX2tleV9zZXJpYWxpemVyOiBmdW5jdGlvbihrZXksIGZfZ2V0X3VybF9wYXJhbSkge1xuICAgICAgICAgICAgY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyW2tleV0gPSBmX2dldF91cmxfcGFyYW07XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnQganMgb2JqZWN0IGludG8gYSBzdHJpbmcgdGhhdCByZXByZXNlbnQgdXJsIHBhcmFtcy5cbiAgICAgICAgICogVXNlcyBjdXN0b20gc2VyaWFsaXplciBpZiBzZXQuXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmouXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9LlxuICAgICAgICAgKi9cbiAgICAgICAgb2JqX3RvX3VybF9wYXJhbXM6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdF9zZXJpYWxpemVyID0gdGhpcy5zZXJpYWxpemVfcGFyYW07XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcmlhbGl6ZXIgPSBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXJba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZXIgPSBkZWZhdWx0X3NlcmlhbGl6ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbSA9IHNlcmlhbGl6ZXIoa2V5LCBvYmpba2V5XSk7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBwYXJhbXMuam9pbihcIiZcIik7XG4gICAgICAgICAgICByZXR1cm4gdXJsX3BhcmFtcztcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVfcGFyYW1zOiBmdW5jdGlvbihwYXJhbXNfa2V5KSB7XG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKCk7XG4gICAgICAgICAgICBwYXJhbXNfa2V5LmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgICAgICBzZWFyY2hfcGFyYW1zLmRlbGV0ZShwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCkpO1x0ICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZV9rZXlfZnJvbV91cmw6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgbGV0IHNlYXJjaF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcygpO1xuICAgICAgICAgICAgc2VhcmNoX3BhcmFtcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwoc2VhcmNoX3BhcmFtcy50b1N0cmluZygpKTtcdCAgICBcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRfa2V5X3RvX3VybDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgdmFsdWUgPSBcIlwiOyB9XHQgIFxuICAgICAgICAgICAgbGV0IHNlYXJjaF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcygpO1xuICAgICAgICAgICAgc2VhcmNoX3BhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkX29ial90b191cmw6IGZ1bmN0aW9uKHVybF9wYXJhbXNfb2JqLCB1cmwpIHtcbiAgICAgICAgICAgIGxldCBuZXdfdXJsX3BhcmFtcyA9IHRoaXMub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtc19vYmopO1xuICAgICAgICAgICAgbGV0IHNlYXJjaF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcyh1cmwpO1xuICAgICAgICAgICAgbGV0IG5ld19lbnRyaWVzID0gdGhpcy5nZXRfdXJsX2VudHJpZXMobmV3X3VybF9wYXJhbXMpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbmV3X2VudHJpZXMpIHtcbiAgICAgICAgXHRzZWFyY2hfcGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXdfdXJsID0gc2VhcmNoX3BhcmFtcy50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHVybCAhPSBudWxsKSB7IHJldHVybiBuZXdfdXJsOyB9XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKG5ld191cmwpO1xuICAgICAgICB9LFxuICAgIH1cbn0oKTtcblxuLy8gZXhwb3J0IGNvbnN0IG50b3BuZ19wYXJhbXNfbWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuLy8gICAgIGNvbnN0IG5ldyA9IGZ1bmN0aW9uKHBhcmFtc19pbl91cmwpIHtcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICB9XG4vLyB9XG5cbi8qKlxuKiBPYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBwcmVmZWRlZmluZWQgZXZlbnRzIHRoYXQgcmVwcmVzZW50IHRoZSBzdGF0dXMuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ19ldmVudHMgPSB7XG4gIEVQT0NIX0NIQU5HRTogXCJlcG9jaF9jaGFuZ2VcIiwgLy8geyBlcG9jaF9iZWdpbjogbnVtYmVyLCBlcG9jaF9lbmQ6IG51bWJlciB9XG4gIEZJTFRFUlNfQ0hBTkdFOiBcImZpbHRlcnNfY2hhbmdlXCIsIC8vIHtmaWx0ZXJzOiB7aWQ6IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgdmFsdWU6IHN0cmluZ31bXSB9XG59O1xuXG5jb25zdCBudG9wbmdfZXZlbnRzX2NvbXBhcmUgPSB7XG4gIEVQT0NIX0NIQU5HRTogZnVuY3Rpb24obmV3X3N0YXR1cywgb2xkX3N0YXR1cykge1xucmV0dXJuIG5ld19zdGF0dXMuZXBvY2hfYmVnaW4gIT0gb2xkX3N0YXR1cy5lcG9jaF9iZWdpblxuICAgIHx8IG5ld19zdGF0dXMuZXBvY2hfZW5kICE9IG9sZF9zdGF0dXMuZXBvY2hfZW5kO1xuICB9LFxuICBGSUxURVJTX0NIQU5HRTogZnVuY3Rpb24obmV3X3N0YXR1cywgb2xkX3N0YXR1cykge1x0XG5yZXR1cm4gKG5ld19zdGF0dXMuZmlsdGVycyA9PSBudWxsICYmIG9sZF9zdGF0dXMuZmlsdGVycyAhPSBudWxsKVxuICAgIHx8IChuZXdfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbCAmJiBvbGRfc3RhdHVzLmZpbHRlcnMgPT0gbnVsbClcbiAgICB8fCAobmV3X3N0YXR1cy5maWx0ZXJzICE9IG51bGwgJiYgb2xkX3N0YXR1cy5maWx0ZXJzICE9IG51bGwgJiZcbiAgKFxuICAgICAgKG5ld19zdGF0dXMuZmlsdGVycy5sZW5ndGggIT0gb2xkX3N0YXR1cy5maWx0ZXJzLmxlbmd0aClcbiAgICB8fCAobmV3X3N0YXR1cy5maWx0ZXJzLnNvbWUoKGZfbmV3KSA9PiBvbGRfc3RhdHVzLmZpbHRlcnMuZmluZCgoZl9vbGQpID0+IGZfb2xkLmlkID09IGZfbmV3LmlkKSA9PSBudWxsKSlcbiAgKVxuICAgICAgICk7XG4gIH0sXG59O1xuXG4vKipcbiogT2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIGxpc3Qgb2YgcHJlZmVkZWZpbmVkIGN1c3RvbSBldmVudHMuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ19jdXN0b21fZXZlbnRzID0ge1xuICBTSE9XX01PREFMX0ZJTFRFUlM6IFwic2hvd19tb2RhbF9maWx0ZXJzXCIsIC8vIHtpZDogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfVxuICBNT0RBTF9GSUxURVJTX0FQUExZOiBcIm1vZGFsX2ZpbHRlcnNfYXBwbHlcIiwgLy8ge2lkOiBzdHJpbmcsIGxhYmVsOiBzdHJpbmcsIG9wZXJhdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHZhbHVlX2xhYmVsOiBzdHJpbmd9XG4gIFNIT1dfR0xPQkFMX0FMRVJUX0lORk86IFwic2hvd19nbG9iYWxfYWxlcnRfaW5mb1wiLCAvLyBodG1sX3RleHQ6IHN0cmluZ1xuICBWSVNfREFUQV9MT0FERUQ6IFwidmlzX2RhdGFfbG9hZGVkXCIsIFxuICBDSEFOR0VfUEFHRV9USVRMRTogXCJjaGFuZ2VfcGFnZV90aXRsZVwiLCBcbiAgICBEQVRBVEFCTEVfTE9BREVEOiBcImRhdGF0YWJsZV9sb2FkZWRcIixcbiAgICBHRVRfSU5URVJGQUNFX0ZBVEE6IFwiZ2V0X2ludGVyZmFjZV9kYXRhXCIsIC8vIG9iamVjdCByZXR1cm5lZCBieSAvbHVhL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9kYXRhLmx1YVxuICAgIENPTVBPTkVOVF9FUE9DSF9JTlRFUlZBTF9DSEFOR0U6IFwiY29tcG9uZW50X2Vwb2NoX2ludGVydmFsX2NoYW5nZVwiLCAvLyB7IGVwb2NoX2JlZ2luOiBudW1iZXIsIGVwb2NoX2VuZDogbnVtYmVyIH1cbn07XG5cblxuLyoqXG4qIEEgZ2xvYmFsIGV2ZW50cyBzZXJ2aWNlIHRoYXQgYWxsb3dzIHRvIG1hbmFnZSB0aGUgYXBwbGljYXRpb24gZ2xvYmFsIHN0YXR1cy5cbiogVGhlIHN0YXR1cyBpcyBpbmNhcHN1bGF0ZWQgaW50byB0aGUgdXJsLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfZXZlbnRzX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZXZlbnRzX21hbmFnZXJfaWQgPSBcImV2ZW50c19tYW5hZ2VyXCI7XG4gIGxldCBzdGF0dXMgPSB7fTtcblxuICAvKiogQHR5cGUge3sgW2V2ZW50X25hbWU6IHN0cmluZ106IHsgW2lkOiBzdHJpbmddOiAoc3RhdHVzOiBvYmplY3QpID0+IHZvaWR9fX0gKi9cbiAgbGV0IGV2ZW50c19zdWJzY3JpYmVycyA9IHt9OyAvLyBkaWN0aW9uYXJ5IG9mIHsgW2V2ZW50X25hbWU6IHN0cmluZ106IHsgW2lkOiBzdHJpbmddOiBmX29uX2V2ZW50IH1cblxuICAgIGNvbnN0IGNsb25lID0gKGUpID0+IG50b3BuZ191dGlsaXR5LmNsb25lKGUpO1xuXG4gIC8qKlxuICAgKiBOb3RpZmllcyB0aGUgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycyB3aXRoIGlkIGRpZmZlcmVudCBmcm9tIHNraXBfaWQuXG4gICAqIEBwYXJhbSB7eyBbaWQ6IHN0cmluZ106IChzdGF0dXM6IG9iamVjdCkgPT4gdm9pZH19IHN1YnNjcmliZXJzIGRpY3Rpb25hcnkgb2YgaWQgPT4gZl9vbl9ldmVudCgpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdHVzIG9iamVjdCB0aGF0IHJlcHJlc2VudCB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICovXG4gIGNvbnN0IG5vdGlmeV9zdWJzY3JpYmVycyA9IGZ1bmN0aW9uKHN1YnNjcmliZXJzLCBzdGF0dXMsIHNraXBfaWQpIHtcbiAgICAgIGZvciAobGV0IGlkIGluIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgaWYgKGlkID09IHNraXBfaWQpIHsgY29udGludWU7IH1cbiAgICAgICAgICBsZXQgZl9vbl9jaGFuZ2UgPSBzdWJzY3JpYmVyc1tpZF07XG4gICAgICAgICAgZl9vbl9jaGFuZ2UoY2xvbmUoc3RhdHVzKSk7XG4gICAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgdGhhdCBkaXNwYXRjaGVzIGVhY2ggZXZlbnQgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3X3N0YXR1cyBcbiAgICovXG4gIGNvbnN0IG9uX3N0YXR1c19jaGFuZ2UgPSBmdW5jdGlvbihuZXdfc3RhdHVzKSB7XG5mb3IgKGxldCBldmVudF9uYW1lIGluIG50b3BuZ19ldmVudHMpIHtcbiAgICBsZXQgZl9jb21wYXJlID0gbnRvcG5nX2V2ZW50c19jb21wYXJlW2V2ZW50X25hbWVdO1xuICAgIGlmIChmX2NvbXBhcmUobmV3X3N0YXR1cywgc3RhdHVzKSA9PSB0cnVlKSB7XG4gIGxldCBzdWJzY3JpYmVycyA9IGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF9uYW1lXTtcbiAgbm90aWZ5X3N1YnNjcmliZXJzKHN1YnNjcmliZXJzLCBuZXdfc3RhdHVzKTtcbiAgICB9XG59XG5cbiAgICAgIHN0YXR1cyA9IG5ld19zdGF0dXM7XG4gIH07XG5cbiAgICBjb25zdCBnZXRfZXZlbnRfZm9yX3NpbmdsZV9kZXN0ID0gKGV2ZW50LCBkZXN0X2lkKSA9PiB7XG5cdHJldHVybiBgJHtldmVudH1fJHtkZXN0X2lkfWA7XG4gICAgfTtcblxuICBudG9wbmdfc3RhdHVzX21hbmFnZXIub25fc3RhdHVzX2NoYW5nZShldmVudHNfbWFuYWdlcl9pZCwgb25fc3RhdHVzX2NoYW5nZSwgdHJ1ZSk7XG5cbiAgICBjb25zdCBlbWl0ID0gZnVuY3Rpb24oZXZlbnQsIHBhcmFtcywgc2tpcF9pZCwgZGVzdF9pZCkge1xuXHRpZiAoZGVzdF9pZCAhPSBudWxsKSB7XG5cdCAgICBldmVudCA9IGdldF9ldmVudF9mb3Jfc2luZ2xlX2Rlc3QoZXZlbnQsIGRlc3RfaWQpO1xuXHR9XG5cdGxldCBzdWJzY3JpYmVycyA9IGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF07XG5cdGlmIChzdWJzY3JpYmVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRub3RpZnlfc3Vic2NyaWJlcnMoc3Vic2NyaWJlcnMsIHBhcmFtcywgc2tpcF9pZCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uX2V2ZW50ID0gZnVuY3Rpb24oaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBnZXRfaW5pdF9ub3RpZnksIGlzX3NpbmdsZV9kZXN0X2V2ZW50KSB7XG5cdGlmIChpc19zaW5nbGVfZGVzdF9ldmVudCA9PSB0cnVlKSB7XG5cdCAgICBldmVudCA9IGdldF9ldmVudF9mb3Jfc2luZ2xlX2Rlc3QoZXZlbnQsIGlkKTtcblx0fVxuXHRpZiAoZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdID0ge307ICAgICAgICBcblx0fVxuXHRpZiAoZ2V0X2luaXRfbm90aWZ5ID09IHRydWUpIHtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpOyAgICAgICAgXG4gICAgICAgICAgICBmX29uX2V2ZW50KGNsb25lKHN0YXR1cykpO1xuXHR9XG5cdGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF1baWRdID0gZl9vbl9ldmVudDtcbiAgICB9O1xuXG4gIHJldHVybiB7XG4gICAgICBlbWl0X2N1c3RvbV9ldmVudDogZnVuY3Rpb24oZXZlbnQsIHBhcmFtcywgZGVzdF9pZCkge1xuXHQgIGVtaXQoZXZlbnQsIHBhcmFtcywgbnVsbCwgZGVzdF9pZCk7XG4gICAgICB9LFxuICAgICAgb25fY3VzdG9tX2V2ZW50OiBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGlzX3NpbmdsZV9kZXN0X2V2ZW50KSB7XG5cdCAgb25fZXZlbnQoaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBudWxsLCBpc19zaW5nbGVfZGVzdF9ldmVudCk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBDaGFuZ2VzIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMgYW5kIGVtaXRzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJjcmliZXJzIHJlZ2lzdGVyZWQgdG8gdGhlIGV2ZW50LiBcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBldmVudCBuYW1lLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IG5ld19zdGF0dXMgb2JqZWN0IHRvIGFkZCBvciBlZGl0IHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgICAqL1xuICAgICAgZW1pdF9ldmVudDogZnVuY3Rpb24oZXZlbnQsIG5ld19zdGF0dXMsIHNraXBfaWQpIHtcbiAgICBlbWl0KGV2ZW50LCBuZXdfc3RhdHVzLCBza2lwX2lkKVxuICAgICAgICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5hZGRfb2JqX3RvX3N0YXR1cyhuZXdfc3RhdHVzLCBldmVudHNfbWFuYWdlcl9pZCk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBBbGxvd3MgdG8gc3Vic2NyaWJlcnMgZl9vbl9ldmVudCBjYWxsYmFjayBvbiBzdGF0dXMgY2hhbmdlIG9uIGV2ZW50IGV2ZW50X25hbWUuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgYW4gaWRlbnRpZmllciBvZiB0aGUgc3Vic2NyaWJ0aW9uLiBcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBldmVudCBuYW1lLiBcbiAgICAgICAqIEBwYXJhbSB7KHN0YXR1czpvYmplY3QpID0+IHZvaWR9IGZfb25fZXZlbnQgY2FsbGJhY2sgdGhhdCB0YWtlIG9iamVjdCBzdGF0dXMgYXMgcGFyYW0uXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGdldF9pbml0X25vdGlmeSBpZiB0cnVlIHRoZSBjYWxsYmFjayBpdCdzIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBsYXN0IHN0YXR1cyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIG9uX2V2ZW50X2NoYW5nZTogZnVuY3Rpb24oaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBnZXRfaW5pdF9ub3RpZnkpIHtcbiAgICBvbl9ldmVudChpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGdldF9pbml0X25vdGlmeSk7XG4gICAgICB9LFxuICB9O1xufSgpO1xuIiwiLy8gaHR0cDovL2pzZmlkZGxlLm5ldC9zdGVwaGVuYm9hay9oWXVQYi9cblxuLy8gV3JhcHBlciBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGRvX3BpZShuYW1lLCB1cGRhdGVfdXJsLCB1cmxfcGFyYW1zLCB1bml0cywgcmVmcmVzaCkge1xuXHR2YXIgcGllID0gbmV3IFBpZUNoYXJ0KG5hbWUsIHVwZGF0ZV91cmwsIHVybF9wYXJhbXMsIHVuaXRzLCByZWZyZXNoKTtcblx0aWYgKHJlZnJlc2gpXG5cdFx0cGllLnNldEludGVydmFsKHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgcGllLnVwZGF0ZSgpOyB9LCByZWZyZXNoKSk7XG5cblx0Ly8gUmV0dXJuIG5ldyBjbGFzcyBpbnN0YW5jZSwgd2l0aFxuXHRyZXR1cm4gcGllO1xufVxuXG5mdW5jdGlvbiBQaWVDaGFydChuYW1lLCB1cGRhdGVfdXJsLCB1cmxfcGFyYW1zLCB1bml0cywgcmVmcmVzaCkge1xuXG5cdC8vIEFkZCBvYmplY3QgcHJvcGVydGllcyBsaWtlIHRoaXNcblx0dGhpcy5uYW1lID0gbmFtZTtcblx0dGhpcy51cGRhdGVfdXJsID0gdXBkYXRlX3VybDtcblx0dGhpcy51cmxfcGFyYW1zID0gdXJsX3BhcmFtcztcblx0dGhpcy51bml0cyA9IHVuaXRzO1xuXHR0aGlzLnJlZnJlc2ggPSByZWZyZXNoO1xuXG4gIGxldCBzdHJlYWtlckRhdGFBZGRlZCA9IFtdXG4gIGxldCBwYXRocyA9IFwiXCJcbiAgbGV0IGxpbmVzID0gW11cbiAgbGV0IHZhbHVlTGFiZWxzID0gW11cbiAgbGV0IG5hbWVMYWJlbHMgPSBbXVxuXG5cdHZhciBwaWVEYXRhID0gW107XG5cdHZhciBvbGRQaWVEYXRhID0gW107XG5cdHZhciBmaWx0ZXJlZFBpZURhdGEgPSBbXTtcblx0dmFyIHJzcCA9IGNyZWF0ZV9waWVfY2hhcnQobmFtZSwgdW5pdHMpO1xuXHR2YXIgYXJjX2dyb3VwID0gcnNwWzBdO1xuXHR2YXIgZG9udXQgPSByc3BbMV07XHRcblx0dmFyIHRvdGFsVmFsdWUgPSByc3BbMl07XG5cdHZhciB0b3RhbFVuaXRzID0gcnNwWzNdO1xuXHR2YXIgY29sb3IgPSByc3BbNF07XG5cdHZhciB0d2VlbkR1cmF0aW9uID0gcnNwWzVdO1xuXHR2YXIgYXJjID0gcnNwWzZdO1xuXHR2YXIgbGFiZWxfZ3JvdXAgPSByc3BbN107XHRcblx0dmFyIGNlbnRlcl9ncm91cCA9IHJzcFs4XTtcblx0dmFyIHIgPSByc3BbOV07XG5cdHZhciB0ZXh0T2Zmc2V0ID0gcnNwWzEwXTtcblxuXG5cdC8vIHRvIHJ1biBlYWNoIHRpbWUgZGF0YSBpcyBnZW5lcmF0ZWRcblxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLm5hbWUpO1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMudXJsX3BhcmFtcyk7XG5cdFx0JC5hamF4KHtcblx0XHRcdHR5cGU6ICdHRVQnLFxuXHRcdFx0dXJsOiB0aGlzLnVwZGF0ZV91cmwsXG5cdFx0XHRkYXRhOiB0aGlzLnVybF9wYXJhbXMsXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoY29udGVudCkge1xuXHRcdFx0XHRsZXQgcGFyc2VkX2NvbnRlbnQ7XG5cblx0XHRcdFx0aWYgKHR5cGVvZiAoY29udGVudCkgPT0gXCJvYmplY3RcIilcblx0XHRcdFx0XHRwYXJzZWRfY29udGVudCA9IGNvbnRlbnQ7XG5cdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiAoY29udGVudCkgPT0gXCJzdHJpbmdcIilcblx0XHRcdFx0XHRwYXJzZWRfY29udGVudCA9IGpRdWVyeS5wYXJzZUpTT04oY29udGVudCk7XG5cblx0XHRcdFx0aWYgKHBhcnNlZF9jb250ZW50KVxuXHRcdFx0XHRcdHVwZGF0ZV9waWVfY2hhcnQocGFyc2VkX2NvbnRlbnQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gU1RSRUFLRVIgQ09OTkVDVElPTiAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvLyBOZWVkZWQgdG8gZHJhdyB0aGUgcGllIGltbWVkaWF0ZWx5XG5cdHRoaXMudXBkYXRlKCk7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0Ly8gdmFyIHVwZGF0ZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHVwZGF0ZSwgcmVmcmVzaCk7XG5cblx0ZnVuY3Rpb24gY29tcGFyZV9ieV9sYWJlbChhLCBiKSB7XG5cdFx0aWYgKGEubGFiZWwgPCBiLmxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmIChhLmxhYmVsID4gYi5sYWJlbCkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZV9waWVfY2hhcnQoZGF0YSkge1xuXHRcdGlmIChkYXRhLnJzcCkgLy8gZGV0ZWN0IFJFU1QgQVBJIHYxXG5cdFx0XHRkYXRhID0gZGF0YS5yc3A7XG5cblx0XHRkYXRhLnNvcnQoY29tcGFyZV9ieV9sYWJlbCk7XG5cdFx0c3RyZWFrZXJEYXRhQWRkZWQgPSBkYXRhO1xuXHRcdG9sZFBpZURhdGEgPSBmaWx0ZXJlZFBpZURhdGE7XG5cdFx0cGllRGF0YSA9IGRvbnV0KHN0cmVha2VyRGF0YUFkZGVkKTtcblxuXHRcdHZhciB0b3RhbE9jdGV0cyA9IDA7XG5cdFx0ZmlsdGVyZWRQaWVEYXRhID0gcGllRGF0YS5maWx0ZXIoZmlsdGVyRGF0YSk7XG5cdFx0ZnVuY3Rpb24gZmlsdGVyRGF0YShlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcblx0XHRcdGVsZW1lbnQubmFtZSA9IHN0cmVha2VyRGF0YUFkZGVkW2luZGV4XS5sYWJlbDtcblx0XHRcdGVsZW1lbnQudmFsdWUgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0udmFsdWU7XG5cdFx0XHRlbGVtZW50LnVybCA9IHN0cmVha2VyRGF0YUFkZGVkW2luZGV4XS51cmw7XG5cdFx0XHR0b3RhbE9jdGV0cyArPSBlbGVtZW50LnZhbHVlO1xuXHRcdFx0cmV0dXJuIChlbGVtZW50LnZhbHVlID4gMCk7XG5cdFx0fVxuXG5cdFx0aWYgKChmaWx0ZXJlZFBpZURhdGEubGVuZ3RoID4gMCkgJiYgKG9sZFBpZURhdGEubGVuZ3RoID4gMCkpIHtcblx0XHRcdC8vUkVNT1ZFIFBMQUNFSE9MREVSIENJUkNMRVxuXHRcdFx0YXJjX2dyb3VwLnNlbGVjdEFsbChcImNpcmNsZVwiKS5yZW1vdmUoKTtcblxuXHRcdFx0aWYgKHRvdGFsVmFsdWUpIHtcblx0XHRcdFx0dG90YWxWYWx1ZS50ZXh0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIga2IgPSB0b3RhbE9jdGV0cyAvIDEwMjQ7XG5cdFx0XHRcdFx0cmV0dXJuIGtiLnRvRml4ZWQoMSk7XG5cdFx0XHRcdFx0Ly9yZXR1cm4gYmNoYXJ0LmxhYmVsLmFiYnJldmlhdGVkKHRvdGFsT2N0ZXRzKjgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9EUkFXIEFSQyBQQVRIU1xuXHRcdFx0cGF0aHMgPSBhcmNfZ3JvdXAuc2VsZWN0QWxsKFwicGF0aFwiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSk7XG5cdFx0XHRwYXRocy5lbnRlcigpLmFwcGVuZChcInN2ZzpwYXRoXCIpXG5cdFx0XHRcdC5hdHRyKFwic3Ryb2tlXCIsIFwid2hpdGVcIilcblx0XHRcdFx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMC41KVxuXHRcdFx0XHQuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24gKGQsIGkpIHsgcmV0dXJuIGNvbG9yKGkpOyB9KVxuXHRcdFx0XHQudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0clR3ZWVuKFwiZFwiLCBwaWVUd2Vlbik7XG5cdFx0XHRwYXRoc1xuXHRcdFx0XHQudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0clR3ZWVuKFwiZFwiLCBwaWVUd2Vlbik7XG5cdFx0XHRwYXRocy5leGl0KClcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcmVtb3ZlUGllVHdlZW4pXG5cdFx0XHRcdC5yZW1vdmUoKTtcblxuXHRcdFx0Ly9EUkFXIFRJQ0sgTUFSSyBMSU5FUyBGT1IgTEFCRUxTXG5cdFx0XHRsaW5lcyA9IGxhYmVsX2dyb3VwLnNlbGVjdEFsbChcImxpbmVcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpO1xuXHRcdFx0bGluZXMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6bGluZVwiKVxuXHRcdFx0XHQuYXR0cihcIngxXCIsIDApXG5cdFx0XHRcdC5hdHRyKFwieDJcIiwgMClcblx0XHRcdFx0LmF0dHIoXCJ5MVwiLCAtciAtIDMpXG5cdFx0XHRcdC5hdHRyKFwieTJcIiwgLXIgLSA4KVxuXHRcdFx0XHQuYXR0cihcInN0cm9rZVwiLCBcImdyYXlcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJyb3RhdGUoXCIgKyAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyICogKDE4MCAvIE1hdGguUEkpICsgXCIpXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0bGluZXMudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBcInJvdGF0ZShcIiArIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgKiAoMTgwIC8gTWF0aC5QSSkgKyBcIilcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHRsaW5lcy5leGl0KCkucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBMQUJFTFMgV0lUSCBQRVJDRU5UQUdFIFZBTFVFU1xuXHRcdFx0dmFsdWVMYWJlbHMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJ0ZXh0LnZhbHVlXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiAtNztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cblx0XHRcdFx0XHRjb25zdCBwZXJjZW50YWdlID0gKGQudmFsdWUgLyB0b3RhbE9jdGV0cykgKiAxMDA7XG5cdFx0XHRcdFx0Ly8gYXBwcm9zc2ltYXRlIHRoZSBudW1iZXIgdG8gdGhlIHRoaXJkIGRlY2lhbWwgZGlnaXQgYW5kIHNob3cgb25seSB0aGUgZmlyc3QgZGVjaW1hbFxuXHRcdFx0XHRcdGxldCBwZXJjZW50YWdlTGFiZWwgPSBwZXJjZW50YWdlLnRvRml4ZWQoMSkgKyBcIiVcIjtcblx0XHRcdFx0XHRyZXR1cm4gcGVyY2VudGFnZUxhYmVsO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0dmFsdWVMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidmFsdWVcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcygoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIixcIiArIE1hdGguc2luKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLTc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKHRvdGFsT2N0ZXRzIDw9IDEpIHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSAoZC52YWx1ZSAvIHRvdGFsT2N0ZXRzKSAqIDEwMDtcblx0XHRcdFx0XHRsZXQgcGVyY2VudGFnZUxhYmVsID0gcGVyY2VudGFnZS50b0ZpeGVkKDEpICsgXCIlXCI7XG5cdFx0XHRcdFx0cmV0dXJuIHBlcmNlbnRhZ2VMYWJlbDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHZhbHVlTGFiZWxzLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKS5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgdGV4dFR3ZWVuKTtcblx0XHRcdHZhbHVlTGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblxuXHRcdFx0Ly9EUkFXIExBQkVMUyBXSVRIIEVOVElUWSBOQU1FU1xuXHRcdFx0bmFtZUxhYmVscyA9IGxhYmVsX2dyb3VwLnNlbGVjdEFsbChcInRleHQudW5pdHNcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMTc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkLm5hbWU7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChkKSB7IGlmIChkLnVybCkgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLnVybDsgfSk7XG5cblx0XHRcdG5hbWVMYWJlbHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidW5pdHNcIilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcygoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIixcIiArIE1hdGguc2luKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAxNztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGQubmFtZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGQpIHsgaWYgKGQudXJsKSB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGQudXJsOyB9KTtcblxuXHRcdFx0bmFtZUxhYmVscy50cmFuc2l0aW9uKCkuZHVyYXRpb24odHdlZW5EdXJhdGlvbikuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIHRleHRUd2Vlbik7XG5cblx0XHRcdG5hbWVMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIEZVTkNUSU9OUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly8gSW50ZXJwb2xhdGUgdGhlIGFyY3MgaW4gZGF0YSBzcGFjZS5cblx0ZnVuY3Rpb24gcGllVHdlZW4oZCwgaSkge1xuXHRcdHZhciBzMDtcblx0XHR2YXIgZTA7XG5cdFx0aWYgKG9sZFBpZURhdGFbaV0pIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtpXS5zdGFydEFuZ2xlO1xuXHRcdFx0ZTAgPSBvbGRQaWVEYXRhW2ldLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2ldKSAmJiBvbGRQaWVEYXRhW2kgLSAxXSkge1xuXHRcdFx0czAgPSBvbGRQaWVEYXRhW2kgLSAxXS5lbmRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGU7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaSAtIDFdKSAmJiBvbGRQaWVEYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLmVuZEFuZ2xlO1xuXHRcdFx0ZTAgPSBvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uZW5kQW5nbGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMwID0gMDtcblx0XHRcdGUwID0gMDtcblx0XHR9XG5cdFx0dmFyIGkgPSBkMy5pbnRlcnBvbGF0ZSh7IHN0YXJ0QW5nbGU6IHMwLCBlbmRBbmdsZTogZTAgfSwgeyBzdGFydEFuZ2xlOiBkLnN0YXJ0QW5nbGUsIGVuZEFuZ2xlOiBkLmVuZEFuZ2xlIH0pO1xuXHRcdHJldHVybiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIGIgPSBpKHQpO1xuXHRcdFx0cmV0dXJuIGFyYyhiKTtcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlUGllVHdlZW4oZCwgaSkge1xuXHRcdHMwID0gMiAqIE1hdGguUEk7XG5cdFx0ZTAgPSAyICogTWF0aC5QSTtcblx0XHR2YXIgaSA9IGQzLmludGVycG9sYXRlKHsgc3RhcnRBbmdsZTogZC5zdGFydEFuZ2xlLCBlbmRBbmdsZTogZC5lbmRBbmdsZSB9LCB7IHN0YXJ0QW5nbGU6IHMwLCBlbmRBbmdsZTogZTAgfSk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHR2YXIgYiA9IGkodCk7XG5cdFx0XHRyZXR1cm4gYXJjKGIpO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0VHdlZW4oZCwgaSkge1xuXHRcdHZhciBhO1xuXHRcdGlmIChvbGRQaWVEYXRhW2ldKSB7XG5cdFx0XHRhID0gKG9sZFBpZURhdGFbaV0uc3RhcnRBbmdsZSArIG9sZFBpZURhdGFbaV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaV0pICYmIG9sZFBpZURhdGFbaSAtIDFdKSB7XG5cdFx0XHRhID0gKG9sZFBpZURhdGFbaSAtIDFdLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW2kgLSAxXS5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpIC0gMV0pICYmIG9sZFBpZURhdGEubGVuZ3RoID4gMCkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uc3RhcnRBbmdsZSArIG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YSA9IDA7XG5cdFx0fVxuXHRcdHZhciBiID0gKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cblx0XHR2YXIgZm4gPSBkMy5pbnRlcnBvbGF0ZU51bWJlcihhLCBiKTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHQpIHtcblx0XHRcdHZhciB2YWwgPSBmbih0KTtcblx0XHRcdHJldHVybiBcInRyYW5zbGF0ZShcIiArIE1hdGguY29zKHZhbCkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbih2YWwpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiKVwiO1xuXHRcdH07XG5cdH1cblxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUFVCTElDIEZVTkNJT05UUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuUGllQ2hhcnQucHJvdG90eXBlLnNldFVybFBhcmFtcyA9IGZ1bmN0aW9uICh1cmxfcGFyYW1zKSB7XG5cdHRoaXMudXJsX3BhcmFtcyA9IHVybF9wYXJhbXM7XG5cdHRoaXMuZm9yY2VVcGRhdGUoKTtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKHVybF9wYXJhbXMpIHtcblx0dGhpcy5zdG9wSW50ZXJ2YWwoKTtcblx0dGhpcy51cGRhdGUoKTtcblx0dGhpcy5zdGFydEludGVydmFsKCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIChwX3BpZUludGVydmFsKSB7XG5cdHRoaXMucGllSW50ZXJ2YWwgPSBwX3BpZUludGVydmFsO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc3RvcEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuXHQvL2Rpc2FibGVkIGdyYXBoIGludGVydmFsXG5cdGNsZWFySW50ZXJ2YWwodGhpcy5waWVJbnRlcnZhbCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zdGFydEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLnBpZUludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy51cGRhdGUoKSwgdGhpcy5yZWZyZXNoKVxufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIElOSVQgRlVOQ0lPTlRTIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY3JlYXRlX3BpZV9jaGFydChuYW1lLCB1bml0cykge1xuXHR2YXIgdyA9IDUwMDsgLy8zODAgLSBQbGVhc2Uga2VlcCBpbiBzeW5jIHdpdGggcGllLWNoYXJ0LmNzc1xuXHR2YXIgaCA9IDMyNTsgLy8yODBcblx0dmFyIGlyID0gNTI7IC8vNDVcblx0dmFyIHRleHRPZmZzZXQgPSAxNDtcblx0dmFyIHR3ZWVuRHVyYXRpb24gPSAyNTA7XG5cdHZhciByID0gMTE2OyAvLzEwMDtcblxuXHRpZiAoJChuYW1lKS5oYXNDbGFzcyhcInBpZS1jaGFydC1zbWFsbFwiKSkge1xuXHRcdHcgPSAzMzA7XG5cdFx0aCA9IDI1MDtcblx0XHRyID0gdyAvIDUgKyAxNTtcblx0XHRpciA9IHIgLyAyO1xuXHR9XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gcG9wdWxhdGUgcGllIHNsaWNlIHBhcmFtZXRlcnMgZnJvbSBhcnJheSBkYXRhXG5cdHZhciBkb251dCA9IGQzLmxheW91dC5waWUoKS52YWx1ZShmdW5jdGlvbiAoZCkge1xuXHRcdGlmIChkLnZhbHVlID09IDApIHsgZC52YWx1ZSA9IDE7IH0gLy8gRm9yY2UgdG8gMSwgaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBncmFwaFxuXHRcdHJldHVybiBkLnZhbHVlO1xuXHR9KTtcblxuXHQvL0QzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgY29sb3JzIGZyb20gYW4gb3JkaW5hbCBzY2FsZVxuXHR2YXIgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTIwKCk7XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gZHJhdyBhcmNzLCBwb3B1bGF0ZXMgcGFyYW1ldGVyIFwiZFwiIGluIHBhdGggb2JqZWN0XG5cdHZhciBhcmMgPSBkMy5zdmcuYXJjKClcblx0XHQuc3RhcnRBbmdsZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5zdGFydEFuZ2xlOyB9KVxuXHRcdC5lbmRBbmdsZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5lbmRBbmdsZTsgfSlcblx0XHQuaW5uZXJSYWRpdXMoaXIpXG5cdFx0Lm91dGVyUmFkaXVzKHIpO1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIENSRUFURSBWSVMgJiBHUk9VUFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0dmFyIHZpcyA9IGQzLnNlbGVjdChuYW1lKS5hcHBlbmQoXCJzdmc6c3ZnXCIpXG5cdFx0LmF0dHIoXCJ3aWR0aFwiLCB3KVxuXHRcdC5hdHRyKFwiaGVpZ2h0XCIsIGgpXG5cdFx0LmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIFwiICsgdyArIFwiIFwiICsgaClcblx0XHQuYXR0cihcInByZXNlcnZlQXNwZWN0UmF0aW9cIiwgXCJ4TWlkWU1pZFwiKTtcblxuXHQvL0dST1VQIEZPUiBBUkNTL1BBVEhTXG5cdHZhciBhcmNfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwiYXJjXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vR1JPVVAgRk9SIExBQkVMU1xuXHR2YXIgbGFiZWxfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwibGFiZWxfZ3JvdXBcIilcblx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICh3IC8gMikgKyBcIixcIiArIChoIC8gMikgKyBcIilcIik7XG5cblx0Ly9HUk9VUCBGT1IgQ0VOVEVSIFRFWFRcblx0dmFyIGNlbnRlcl9ncm91cCA9IHZpcy5hcHBlbmQoXCJzdmc6Z1wiKVxuXHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJjZW50ZXJfZ3JvdXBcIilcblx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICh3IC8gMikgKyBcIixcIiArIChoIC8gMikgKyBcIilcIik7XG5cblx0Ly9QTEFDRUhPTERFUiBHUkFZIENJUkNMRVxuXHRhcmNfZ3JvdXAuYXBwZW5kKFwic3ZnOmNpcmNsZVwiKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCBcIiNFRkVGRUZcIilcblx0XHQuYXR0cihcInJcIiwgcik7XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gQ0VOVEVSIFRFWFQgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL1dISVRFIENJUkNMRSBCRUhJTkQgTEFCRUxTXG5cdGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6Y2lyY2xlXCIpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcblx0XHQuYXR0cihcInJcIiwgaXIpO1xuXG5cdHZhciB0b3RhbFVuaXRzID0gbnVsbDtcblx0dmFyIHRvdGFsTGFiZWwgPSBudWxsO1xuXHR2YXIgdG90YWxWYWx1ZSA9IG51bGw7XG5cdFxuXHRpZiAodW5pdHMpIHtcblx0XHQvLyBcIlRPVEFMXCIgTEFCRUxcblx0XHR0b3RhbExhYmVsID0gY2VudGVyX2dyb3VwLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHQuYXR0cihcImNsYXNzXCIsIFwibGFiZWxcIilcblx0XHRcdC5hdHRyKFwiZHlcIiwgLTE1KVxuXHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKSAvLyB0ZXh0LWFsaWduOiByaWdodFxuXHRcdFx0LnRleHQoXCJUT1RBTFwiKTtcblxuXHRcdC8vVE9UQUwgVFJBRkZJQyBWQUxVRVxuXHRcdHRvdGFsVmFsdWUgPSBjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJ0b3RhbFwiKVxuXHRcdFx0LmF0dHIoXCJkeVwiLCA3KVxuXHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKSAvLyB0ZXh0LWFsaWduOiByaWdodFxuXHRcdFx0LnRleHQoXCJXYWl0aW5nLi4uXCIpO1xuXG5cdFx0Ly9VTklUUyBMQUJFTFxuXHRcdHRvdGFsVW5pdHMgPSBjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJ1bml0c1wiKVxuXHRcdFx0LmF0dHIoXCJkeVwiLCAyMSlcblx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgLy8gdGV4dC1hbGlnbjogcmlnaHRcblx0XHRcdC50ZXh0KHVuaXRzKTtcblx0fVxuXG5cdHJldHVybiAoW2FyY19ncm91cCwgZG9udXQsIHRvdGFsVmFsdWUsIHRvdGFsVW5pdHMsIGNvbG9yLCB0d2VlbkR1cmF0aW9uLCBhcmMsIGxhYmVsX2dyb3VwLCBjZW50ZXJfZ3JvdXAsIHIsIHRleHRPZmZzZXRdKTtcbn1cbiIsImltcG9ydCB7IG50b3BuZ19ldmVudHMsIG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLCBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3luYywgbnRvcG5nX2N1c3RvbV9ldmVudHMgfSBmcm9tICcuL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnXG5cbndpbmRvdy5udG9wbmdfZXZlbnRzID0gbnRvcG5nX2V2ZW50c1xud2luZG93Lm50b3BuZ19ldmVudHNfbWFuYWdlciA9IG50b3BuZ19ldmVudHNfbWFuYWdlclxud2luZG93Lm50b3BuZ19zdGF0dXNfbWFuYWdlciA9IG50b3BuZ19zdGF0dXNfbWFuYWdlclxud2luZG93Lm50b3BuZ191dGlsaXR5ID0gbnRvcG5nX3V0aWxpdHlcbndpbmRvdy5udG9wbmdfdXJsX21hbmFnZXIgPSBudG9wbmdfdXJsX21hbmFnZXJcbndpbmRvdy5udG9wbmdfc3luYyA9IG50b3BuZ19zeW5jXG53aW5kb3cubnRvcG5nX2N1c3RvbV9ldmVudHMgPSBudG9wbmdfY3VzdG9tX2V2ZW50c1xuIiwiLyoqXG4gKiAoQykgMjAxMy0yMSAtIG50b3Aub3JnXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBERUZJTkVEX1dJREdFVFMgPSB7fTtcbi8qIFVzZWQgdG8gaW1wbGVtZW50IHRoZSBvbiBjbGljayBldmVudHMgb250byB0aGUgZ3JhcGggKi9cbmNvbnN0IERFRklORURfRVZFTlRTID0ge1xuICAgIC8qIE9uIGNsaWNrIGV2ZW50IHVzZWQgYnkgdGhlIGZsb3cgYW5hbHl6ZSBzZWN0aW9uLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCB1cmwgKyBhIHNpbmdsZSBmaWx0ZXIgKi9cbiAgICBcImRiX2FuYWx5emVcIiA6IGZ1bmN0aW9uIChldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhUG9pbnRJbmRleCB9ID0gY29uZmlnO1xuICAgICAgICBjb25zdCB7IGZpbHRlciB9ID0gY29uZmlnLncuY29uZmlnO1xuICAgICAgICBsZXQgdmFsdWU7XG5cbiAgICAgICAgaWYoY29uZmlnLncuY29uZmlnLmZpbHRlcmluZ19sYWJlbHMpXG4gICAgICAgICAgICB2YWx1ZSA9IGNvbmZpZy53LmNvbmZpZy5maWx0ZXJpbmdfbGFiZWxzW2RhdGFQb2ludEluZGV4XTtcblxuICAgICAgICBpZihmaWx0ZXIubGVuZ3RoID09IDAgfHwgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICAgICAgZmlsdGVycy5wdXNoKHtpZDogZmlsdGVyWzBdLCBvcGVyYXRvcjogXCJlcVwiLCB2YWx1ZTogdmFsdWV9KTtcbiAgICAgICAgLy8gbm90aWZ5IHRoYXQgZmlsdGVycyBzdGF0dXMgaXMgdXBkYXRlZFxuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7ZmlsdGVyc30pO1xuICAgIH0sXG5cbiAgICBcIm5vbmVcIiA6IGZ1bmN0aW9uIChldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0sXG4gICAgXG4gICAgLyogU3RhbmRhcmQgb24gY2xpY2sgZXZlbnQsIHJlZGlyZWN0IHRvIHRoZSB1cmwgKi9cbiAgICBcInN0YW5kYXJkXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzIH0gPSBjb25maWcudy5jb25maWc7XG4gICAgICAgIGlmIChzZXJpZXNJbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICAgICAgaWYgKHNlcmllcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuICAgICAgICBpZiAoc2VyaWUuYmFzZV91cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdF91cmwgPSAoc2VyaWUuc3RhcnRfdXJsIHx8ICcnKSBcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaCA9IHNlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5O1xuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGAke3NlcmllLmJhc2VfdXJsfT8ke2RlZmF1bHRfdXJsfSR7c2VhcmNofWA7XG4gICAgICAgIH1cbiAgICB9LFxufVxuXG5jb25zdCBERUZJTkVEX1RPT0xUSVAgPSB7XG4gICAgLyogT24gY2xpY2sgZXZlbnQgdXNlZCBieSB0aGUgZmxvdyBhbmFseXplIHNlY3Rpb24sIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IHVybCArIGEgc2luZ2xlIGZpbHRlciAqL1xuICAgIFwiZm9ybWF0X2J5dGVzXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUodmFsdWUpO1xuICAgIH0sXG5cbiAgICBcImZvcm1hdF9wa3RzXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0UGFja2V0cyh2YWx1ZSk7XG4gICAgfSxcblxuICAgIC8qIE9uIGNsaWNrIGV2ZW50IHVzZWQgYnkgdGhlIGZsb3cgYW5hbHl6ZSBzZWN0aW9uLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCB1cmwgKyBhIHNpbmdsZSBmaWx0ZXIgKi9cbiAgICBcImZvcm1hdF92YWx1ZVwiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgXCJmb3JtYXRfbXVsdGlwbGVfZGF0ZVwiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWVbMF0pICsgXCIgLSBcIiArIG5ldyBEYXRlKHZhbHVlWzFdKVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAqICBUaGlzIGZvcm1hdHRlciBpcyB1c2VkIGJ5IHRoZSBidWJibGUgaG9zdCBtYXAsIGZyb20gdGhlIHkgYXhpcyxcbiAgICAgKiAgdXNlZCB0byBzaG93IHRoZSBIb3N0cywgd2l0aCB0aGVpciByZXNwZWN0aXZlIHZhbHVlcyBcbiAgICAgKi9cbiAgICBcImZvcm1hdF9sYWJlbF9mcm9tX3h5XCIgOiBmdW5jdGlvbih7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgeF92YWx1ZSA9IHNlcmllW1wieFwiXTtcbiAgICAgICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICAgICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICAgICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgICAgICByZXR1cm4gKGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke3hfdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmApXG4gICAgfSxcbiAgICBcImZvcm1hdF9sYWJlbF9mcm9tX3huYW1lXCIgOiBmdW5jdGlvbih7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgICAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICAgICAgcmV0dXJuIChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHtuYW1lfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gKVxuICAgIH0sXG59XG5cbi8qIFN0YW5kYXJkIEZvcm1hdHRlciAqL1xuY29uc3QgREVGQVVMVF9GT1JNQVRURVIgPSBERUZJTkVEX1RPT0xUSVBbXCJmb3JtYXRfdmFsdWVcIl07XG5cbmV4cG9ydCBjbGFzcyBXaWRnZXRVdGlscyB7XG5cbiAgICBzdGF0aWMgcmVnaXN0ZXJXaWRnZXQod2lkZ2V0KSB7XG4gICAgICAgIGlmICh3aWRnZXQgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihgVGhlIHBhc3NlZCB3aWRnZXQgcmVmZXJlbmNlIGlzIG51bGwhYCk7XG4gICAgICAgIGlmICh3aWRnZXQubmFtZSBpbiBERUZJTkVEX1dJREdFVFMpIHRocm93IG5ldyBFcnJvcihgVGhlIHdpZGdldCAke3dpZGdldC5uYW1lfSBpcyBhbHJlYWR5IGRlZmluZWQhYCk7XG4gICAgICAgIERFRklORURfV0lER0VUU1t3aWRnZXQubmFtZV0gPSB3aWRnZXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFdpZGdldEJ5TmFtZSh3aWRnZXROYW1lKSB7XG4gICAgICAgIGlmICh3aWRnZXROYW1lIGluIERFRklORURfV0lER0VUUykge1xuICAgICAgICAgICAgcmV0dXJuIERFRklORURfV0lER0VUU1t3aWRnZXROYW1lXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdpZGdldCAke3dpZGdldE5hbWV9IG5vdCBmb3VuZCFgKVxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBzaW1wbGUgd3JhcHBlciBjbGFzcyBmb3IgdGhlIHdpZGdldHMuXG4gKi9cbmNsYXNzIFdpZGdldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkYXRhc291cmNlID0ge30sIHVwZGF0ZVRpbWUgPSAwLCBhZGRpdGlvbmFsUGFyYW1zID0ge30pIHtcblxuICAgICAgICAvLyBmaWVsZCBjb250YWluaW5nIHRoZSBkYXRhIGZldGNoZWQgZnJvbSB0aGUgZGF0YXNvdXJjZXMgcHJvdmlkZWRcbiAgICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBbXTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgICAgIC8vIGlmIDAgdGhlbiBkb24ndCB1cGRhdGUgdGhlIGNoYXJ0IGF1dG9tYXRpY2FsbHksIHRoZSB0aW1lXG4gICAgICAgIC8vIGlzIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgdGhpcy5fdXBkYXRlVGltZSA9IHVwZGF0ZVRpbWU7XG5cbiAgICAgICAgdGhpcy5fZGF0YXNvdXJjZSA9IGRhdGFzb3VyY2U7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMgPSBhZGRpdGlvbmFsUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXQgdGhlIHdpZGdldC5cbiAgICAgKi9cbiAgICBhc3luYyBpbml0KCkge1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIHRoZSB3aWRnZXQgdG8gdGhlIERFRklORURfV0lER0VUUyBvYmplY3RcbiAgICAgICAgV2lkZ2V0VXRpbHMucmVnaXN0ZXJXaWRnZXQodGhpcyk7XG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hEYXRhKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZVRpbWUgPiAwKSB7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7IGF3YWl0IHRoaXMudXBkYXRlKHRoaXMuX2RhdGFzb3VyY2UucGFyYW1zKTsgfSwgdGhpcy5fdXBkYXRlVGltZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSB3aWRnZXQgZnJlZWluZyB0aGUgcmVzb3VyY2VzIHVzZWQuXG4gICAgICovXG4gICAgYXN5bmMgZGVzdHJveSgpIHsgfVxuXG4gICAgLyoqXG4gICAgICogRm9yY2UgdGhlIHdpZGdldCB0byByZWxvYWQgaXQncyBkYXRhLlxuICAgICAqL1xuICAgIGFzeW5jIGRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZVBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZShkYXRhc291cmNlUGFyYW1zKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVCeVVybCh1cmwpIHtcbiAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKGAke2xvY2F0aW9uLm9yaWdpbn0ke3RoaXMuX2RhdGFzb3VyY2UubmFtZX1gKTtcbiAgICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcyh1cmwpO1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgIHUuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2RhdGFzb3VyY2UuZW5kcG9pbnQgPSB1LnBhdGhuYW1lICsgdS5zZWFyY2g7XG4gICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IGF3YWl0IHRoaXMuX2ZldGNoRGF0YSgpO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgdXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuXHQvLyBidWlsZCB0aGUgbmV3IGVuZHBvaW50XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKGAke2xvY2F0aW9uLm9yaWdpbn0ke3RoaXMuX2RhdGFzb3VyY2UubmFtZX1gKTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhc291cmNlUGFyYW1zKSkge1xuICAgICAgICAgICAgdS5zZWFyY2hQYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGF0YXNvdXJjZS5lbmRwb2ludCA9IHUucGF0aG5hbWUgKyB1LnNlYXJjaDtcbiAgICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaERhdGEoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgZWFjaCBkYXRhc291cmNlcyBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3IsXG4gICAgICogZG8gYSBHRVQgcmVxdWVzdCB0byBhIFJFU1QgZW5kcG9pbnQuXG4gICAgICovXG4gICAgYXN5bmMgX2ZldGNoRGF0YSgpIHtcbiAgICAgICAgY29uc3QgcmVxID0gYXdhaXQgZmV0Y2goYCR7aHR0cF9wcmVmaXh9JHt0aGlzLl9kYXRhc291cmNlLmVuZHBvaW50fWApO1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVxLmpzb24oKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIENoYXJ0V2lkZ2V0IGV4dGVuZHMgV2lkZ2V0IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHR5cGUgPSAnbGluZScsIGRhdGFzb3VyY2UgPSB7fSwgdXBkYXRlVGltZSA9IDAsIGFkZGl0aW9uYWxQYXJhbXMgPSB7fSkge1xuICAgICAgICBzdXBlcihuYW1lLCBkYXRhc291cmNlLCB1cGRhdGVUaW1lLCBhZGRpdGlvbmFsUGFyYW1zKTtcblxuICAgICAgICB0aGlzLl9jaGFydFR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9jaGFydCA9IHt9O1xuICAgICAgICB0aGlzLl8kaHRtbENoYXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2NhbnZhcy13aWRnZXQtJHtuYW1lfWApO1xuICAgIH1cblxuICAgIHN0YXRpYyByZWdpc3RlckV2ZW50Q2FsbGJhY2sod2lkZ2V0TmFtZSwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkZ2V0ID0gV2lkZ2V0VXRpbHMuZ2V0V2lkZ2V0QnlOYW1lKHdpZGdldE5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V2ZW50TmFtZV06IGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGF3YWl0IHdpZGdldC5fY2hhcnQudXBkYXRlT3B0aW9ucyh1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUNvbmZpZygpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbXSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IFswXSxcbiAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RkL01NL3l5eXkgSEg6bW06c3MnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlLCB7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHo6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5fY2hhcnRUeXBlLFxuICAgICAgICAgICAgICAgIGV2ZW50czoge30sXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblx0ICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgICAgICAgICAgIG9uSXRlbUNsaWNrOiB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZURhdGFTZXJpZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vRGF0YToge1xuICAgICAgICAgICAgICAgIHRleHQ6ICdObyBEYXRhJyxcbiAgICAgICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcyNHB4J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgYWRkaXRpb25hbFBhcmFtcyBmaWVsZCBjb250YWlucyBhbiBhcGV4IHByb3BlcnR5LFxuICAgICAgICAvLyB0aGVuIG1lcmdlIHRoZSB0d28gY29uZmlndXJhdGlvbnMgZ2l2aW5nIHByaW9yaXR5IHRvIHRoZSBjdXN0b20gb25lXG4gICAgICAgIGlmICh0aGlzLl9hZGRpdGlvbmFsUGFyYW1zICYmIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMuYXBleCkge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkQ29uZmlnID0gT2JqZWN0LmFzc2lnbihjb25maWcsIHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMuYXBleCk7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkQ29uZmlnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBfYnVpbGRUb29sdGlwKGNvbmZpZywgcnNwKSB7XG4gICAgICAgIC8qIEJ5IGRlZmF1bHQgdGhlIGFyZWFDaGFydCB0b29sdGlwW3ldIGlzIG92ZXJ3cml0dGVuICovXG4gICAgICAgIGNvbmZpZ1tcInRvb2x0aXBcIl1bXCJ5XCJdID0ge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qIENoYW5naW5nIGV2ZW50cyBpZiBnaXZlbiAqL1xuICAgICAgICBpZiAocnNwWyd0b29sdGlwJ10pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXhpcyBpbiByc3BbJ3Rvb2x0aXAnXSkge1xuICAgICAgICAgICAgICAgIGlmIChheGlzID09PSBcInhcIiB8fCBheGlzID09PSBcInlcIiB8fCBheGlzID09PSBcInpcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSByc3BbJ3Rvb2x0aXAnXVtheGlzXVsnZm9ybWF0dGVyJ107XG4gICAgICAgICAgICAgICAgICAgIGlmKCFjb25maWdbJ3Rvb2x0aXAnXVtheGlzXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ1sndG9vbHRpcCddW2F4aXNdID0ge31cblxuICAgICAgICAgICAgICAgICAgICBjb25maWdbJ3Rvb2x0aXAnXVtheGlzXVsnZm9ybWF0dGVyJ10gPSBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHNbZm9ybWF0dGVyXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogQ3VzdG9taXphYmxlIHRvb2x0aXAgcmVxdWVzdGVkICovXG4gICAgICAgICAgICBpZihyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ10pXG4gICAgICAgICAgICAgICAgY29uZmlnWyd0b29sdGlwJ11bJ2N1c3RvbSddID0gREVGSU5FRF9UT09MVElQW3JzcFsndG9vbHRpcCddWydjdXN0b20nXV0gfHwgTnRvcFV0aWxzW3JzcFsndG9vbHRpcCddWydjdXN0b20nXV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZEF4aXNGb3JtYXR0ZXIoY29uZmlnLCBheGlzTmFtZSkge1xuXG4gICAgICAgIGNvbnN0IGF4aXMgPSBjb25maWdbYXhpc05hbWVdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGF4aXMgPT09IHVuZGVmaW5lZCB8fCBheGlzLmxhYmVscyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAvLyBlbmFibGUgZm9ybWF0dGVyc1xuICAgICAgICBpZiAoYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCAmJiBheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRm9ybWF0dGVyID0gYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXI7XG5cbiAgICAgICAgICAgIGlmIChOdG9wVXRpbHNbc2VsZWN0ZWRGb3JtYXR0ZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGB4YXhpczogRm9ybWF0dGluZyBmdW5jdGlvbiAnJHtzZWxlY3RlZEZvcm1hdHRlcn0nIGRpZG4ndCBmb3VuZCBpbnNpZGUgTnRvcFV0aWxzLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW3NlbGVjdGVkRm9ybWF0dGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZERhdGFMYWJlbHMoY29uZmlnLCByc3ApIHtcbiAgICAgICAgaWYgKHJzcFtcImRhdGFMYWJlbHNcIl0pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2RhdGFMYWJlbHNPcHRzLCBkYXRhXSBvZiBPYmplY3QuZW50cmllcyhyc3BbXCJkYXRhTGFiZWxzXCJdKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1tcImRhdGFMYWJlbHNcIl1bZGF0YUxhYmVsc09wdHNdID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgIFxuXG4gICAgICAgIGxldCBmb3JtYXR0ZXIgPSBjb25maWdbXCJkYXRhTGFiZWxzXCJdW1wiZm9ybWF0dGVyXCJdO1xuICAgICAgICBcbiAgICAgICAgaWYoZm9ybWF0dGVyICYmIERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdKSB7XG4gICAgICAgICAgICBjb25maWdbXCJkYXRhTGFiZWxzXCJdW1wiZm9ybWF0dGVyXCJdID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRDb25maWcoKSB7XG5cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fZ2VuZXJhdGVDb25maWcoKTtcbiAgICAgICAgY29uc3QgcnNwID0gdGhpcy5fZmV0Y2hlZERhdGEucnNwO1xuICAgICAgICBcbiAgICAgICAgLy8gYWRkIGFkZGl0aW9uYWwgcGFyYW1zIGZldGNoZWQgZnJvbSB0aGUgZGF0YXNvdXJjZVxuICAgICAgICBjb25zdCBhZGRpdGlvbmFscyA9IFsnc2VyaWVzJywgJ3hheGlzJywgJ3lheGlzJywgJ2NvbG9ycycsICdsYWJlbHMnLCAnZmlsbCcsICdmaWx0ZXInLCAnZmlsdGVyaW5nX2xhYmVscyddO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBhZGRpdGlvbmFsIG9mIGFkZGl0aW9uYWxzKSB7XG5cbiAgICAgICAgICAgIGlmIChyc3BbYWRkaXRpb25hbF0gPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChjb25maWdbYWRkaXRpb25hbF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1thZGRpdGlvbmFsXSA9IE9iamVjdC5hc3NpZ24oY29uZmlnW2FkZGl0aW9uYWxdLCByc3BbYWRkaXRpb25hbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnW2FkZGl0aW9uYWxdID0gcnNwW2FkZGl0aW9uYWxdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKiBDaGFuZ2luZyBldmVudHMgaWYgZ2l2ZW4gKi9cbiAgICAgICAgaWYgKHJzcFsnZXZlbnRzJ10pIHtcbiAgICAgICAgICAgIC8qIEp1c3QgcGFzcyBhIHRhYmxlIG9mIGV2ZW50cy4gZS5nLiB7IGV2ZW50cyA9IHsgY2xpY2sgPSBcImRiX2FuYWx5emVcIiwgdXBkYXRlZCA9IFwic3RhbmRhcmRcIiB9IH0qL1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBpbiByc3BbJ2V2ZW50cyddKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnWydjaGFydCddWydldmVudHMnXVtldmVudF0gPSBERUZJTkVEX0VWRU5UU1tyc3BbJ2V2ZW50cyddW2V2ZW50XV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyc3BbJ2hvcml6b250YWxfY2hhcnQnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25maWdbJ3Bsb3RPcHRpb25zJ11bJ2JhciddWydob3Jpem9udGFsJ10gPSByc3BbJ2hvcml6b250YWxfY2hhcnQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2J1aWxkVG9vbHRpcChjb25maWcsIHJzcClcbiAgICAgICAgdGhpcy5fYnVpbGRBeGlzRm9ybWF0dGVyKGNvbmZpZywgJ3hheGlzJyk7XG4gICAgICAgIHRoaXMuX2J1aWxkQXhpc0Zvcm1hdHRlcihjb25maWcsICd5YXhpcycpO1xuICAgICAgICB0aGlzLl9idWlsZERhdGFMYWJlbHMoY29uZmlnLCByc3ApO1xuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVDaGFydCgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fYnVpbGRDb25maWcoKTtcbiAgICAgICAgdGhpcy5fY2hhcnRDb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gbmV3IEFwZXhDaGFydHModGhpcy5fJGh0bWxDaGFydCwgdGhpcy5fY2hhcnRDb25maWcpO1xuICAgICAgICB0aGlzLl9jaGFydC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICBhd2FpdCBzdXBlci5pbml0KCk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVDaGFydCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9jaGFydCA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuICAgICAgICBpZih0aGlzLl9jaGFydENvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XHQgICAgXG4gICAgICAgICAgaWYgKGRhdGFzb3VyY2VQYXJhbXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZShkYXRhc291cmNlUGFyYW1zKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgc3VwZXIudXBkYXRlQnlVcmwoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHRoaXMuX2NoYXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBlY3RpbmcgdGhhdCByc3AgY29udGFpbnMgYW4gb2JqZWN0IGNhbGxlZCBzZXJpZXNcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbG9ycywgc2VyaWVzLCBkYXRhTGFiZWxzLCBsYWJlbHMsIHhheGlzLCBmaWx0ZXJpbmdfbGFiZWxzIH0gPSB0aGlzLl9mZXRjaGVkRGF0YS5yc3A7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjb2xvcnMgbGlzdFxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmNvbG9ycyA9IGNvbG9ycztcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoeGF4aXMgJiYgeGF4aXMuY2F0ZWdvcmllcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcueGF4aXMuY2F0ZWdvcmllcyA9IHhheGlzLmNhdGVnb3JpZXM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyaW5nX2xhYmVscylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZmlsdGVyaW5nX2xhYmVscyA9IGZpbHRlcmluZ19sYWJlbHM7XG5cbiAgICAgICAgICAgICAgICBpZihkYXRhTGFiZWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3JtYXR0ZXIgPSB0aGlzLl9jaGFydENvbmZpZy5kYXRhTGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYoZm9ybWF0dGVyICYmIERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXIgPSBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXIgPSBERUZBVUxUX0ZPUk1BVFRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGxhYmVscykgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmxhYmVscyA9IGxhYmVscztcblxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0LnVwZGF0ZU9wdGlvbnModGhpcy5fY2hhcnRDb25maWcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZGVzdHJveUFuZFVwZGF0ZShkYXRhc291cmNlID0ge30pIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZGVzdHJveUFuZFVwZGF0ZShkYXRhc291cmNlKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUNoYXJ0KCk7XG4gICAgfVxuXG59XG4iLCJjb25zdCBmaXhTdWJNZW51UG9zaXRpb24gPSAoJHN1Ym1lbnUsICRob3ZlckJ1dHRvbikgPT4ge1xuXG4gICAgY29uc3QgTUlOX1NQQUNFID0gMjA7XG4gICAgY29uc3QgTUlOX0hFSUdIVCA9IDE1MDtcblxuICAgIGxldCBkaXN0RnJvbUFib3ZlID0gJGhvdmVyQnV0dG9uLnBvc2l0aW9uKCkudG9wO1xuICAgIGNvbnN0IHN1Ym1lbnVIZWlnaHQgPSAkc3VibWVudS5oZWlnaHQoKTtcbiAgICBjb25zdCBkb2N1bWVudEhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcblxuICAgIC8vIGlmIHRoZSBzdWJtZW51IGlzIHRvbyBoaWdoIHRvIGJlIHNob3duIHRoZW4gc2V0XG4gICAgLy8gdGhlIG92ZXJmbG93IG9uIHkgYXhpc1xuICAgIGlmIChzdWJtZW51SGVpZ2h0ICsgZGlzdEZyb21BYm92ZSA+PSBkb2N1bWVudEhlaWdodCkge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdWJtZW51SGVpZ2h0ID0gZG9jdW1lbnRIZWlnaHQgLSBkaXN0RnJvbUFib3ZlO1xuICAgICAgICBpZiAoY3VycmVudFN1Ym1lbnVIZWlnaHQgPD0gTUlOX0hFSUdIVCkge1xuICAgICAgICAgICAgZGlzdEZyb21BYm92ZSA9IGRpc3RGcm9tQWJvdmUgLSBzdWJtZW51SGVpZ2h0ICsgJGhvdmVyQnV0dG9uLm91dGVySGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkc3VibWVudS5jc3MoeydtYXgtaGVpZ2h0JzogY3VycmVudFN1Ym1lbnVIZWlnaHQgLSBNSU5fU1BBQ0UsICdvdmVyZmxvdy15JzogJ2F1dG8nfSlcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBzdWJtZW51IGhlaWdodFxuICAgICRzdWJtZW51LmNzcygndG9wJywgYCR7ZGlzdEZyb21BYm92ZX1weGApO1xuXG59O1xuXG4kKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCl7XG5cbiAgICBjb25zdCBVUFBFUl9MSU1JVCA9IDMyO1xuICAgIGNvbnN0IHdpbmRvd1Njcm9sbFRvcCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG5cbiAgICBpZiAod2luZG93U2Nyb2xsVG9wID49IFVQUEVSX0xJTUlUKSB7XG4gICAgICAgICQoYCNuLW5hdmJhcmApLmFkZENsYXNzKFwic2Nyb2xsZWQgYmctbGlnaHRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAkKGAjbi1uYXZiYXJgKS5yZW1vdmVDbGFzcyhcInNjcm9sbGVkIGJnLWxpZ2h0XCIpO1xuICAgIH1cblxufSk7XG5cbiQoKCkgPT4ge1xuXG4gICAgY29uc3QgdG9nZ2xlU2lkZWJhciA9ICgpID0+IHtcbiAgICAgICAgLy8gaWYgdGhlIGxheWVyIGRvZXNuJ3QgZXhpc3RzIHRoZW4gY3JlYXRlIGl0XG4gICAgICAgIGlmICgkKGAuc2lkZWJhci1jbG9zZS1sYXllcmApLmxlbmd0aCA9PSAwKSB7XG5cbiAgICAgICAgICAgIGNvbnN0ICRsYXllciA9ICQoYDxkaXYgY2xhc3M9J3NpZGViYXItY2xvc2UtbGF5ZXInIHN0eWxlPSdkaXNwbGF5Om5vbmUnPjwvZGl2PmApO1xuICAgICAgICAgICAgLy8gd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIGxheWVyXG4gICAgICAgICAgICAkbGF5ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gc2lkZWJhclxuICAgICAgICAgICAgICAgICQoYCNuLXNpZGViYXJgKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgbGF5ZXIgYW5kIHJlbW92ZSBpdCBmcm9tIHRoZSBET01cbiAgICAgICAgICAgICAgICAkbGF5ZXIuZmFkZU91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIGxheWVyIHRvIHRoZSB3cmFwcGVyXG4gICAgICAgICAgICAkKGAjd3JhcHBlcmApLmFwcGVuZCgkbGF5ZXIpO1xuICAgICAgICAgICAgLy8gc2hvdyB0aGUgbGF5ZXIgaW5zaWRlIHRoZSBwYWdlXG4gICAgICAgICAgICAkbGF5ZXIuZmFkZUluKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBleGlzdGluZyBsYXllciBhbmQgZGVzdHJveSBpdFxuICAgICAgICAgICAgJChgLnNpZGViYXItY2xvc2UtbGF5ZXJgKS5mYWRlT3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNob3cvaGlkZSB0aGUgc2lkZWJhclxuICAgICAgICAkKGAjbi1zaWRlYmFyYCkudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgICQoJyNuLXNpZGViYXIgYS5zdWJtZW51JykuYmluZCh7XG4gICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHN1Ym1lbnUgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApO1xuICAgICAgICAgICAgZml4U3ViTWVudVBvc2l0aW9uKHN1Ym1lbnUsICQodGhpcykpO1xuICAgICAgICAgICAgc3VibWVudS5zaG93KClcbiAgICAgICAgfSxcbiAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgc3VibWVudSA9ICQodGhpcykucGFyZW50KCkuZmluZChgZGl2W2lkJD0nc3VibWVudSddYCk7XG4gICAgICAgICAgICBzdWJtZW51LmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChgZGl2W2lkJD0nc3VibWVudSddYCkuYmluZCh7XG4gICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5zaG93KClcbiAgICAgICAgfSxcbiAgICAgICAgbW91c2VsZWF2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogdG9nZ2xlIHNpZGViYXIgZGlzcGxheSAqL1xuICAgICQoYGJ1dHRvbltkYXRhLWJzLXRvZ2dsZT0nc2lkZWJhciddYCkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRvZ2dsZVNpZGViYXIoKTtcbiAgICB9KTtcbn0pO1xuXG4kKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gcmUtY2FsYyBzdWJtZW51IGhlaWdodFxuICAgIGNvbnN0ICRjdXJyZW50U3VibWVudSA9ICQoJyNuLXNpZGViYXInKS5maW5kKGBkaXYuc2hvd1tpZCQ9J3N1Ym1lbnUnXWApO1xuXG4gICAgaWYgKCRjdXJyZW50U3VibWVudS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgY29uc3QgJGhvdmVyQnV0dG9uID0gJGN1cnJlbnRTdWJtZW51LnBhcmVudCgpLmZpbmQoYGFbZGF0YS1icy10b2dnbGU9J2NvbGxhcHNlJ11gKTtcbiAgICAgICAgZml4U3ViTWVudVBvc2l0aW9uKCRjdXJyZW50U3VibWVudSwgJGhvdmVyQnV0dG9uKTtcbiAgICB9XG5cbn0pO1xuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IEZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5cbmNvbnN0IG50b3BDaGFydEFwZXggPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYWxsIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zID0ge1xuICAgIHNlcmllczogW10sXG4gICAgY2hhcnQ6IHtcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICB0b29sYmFyOiB7XG4gICAgICAgIHRvb2xzOiB7XG4gICAgICAgICAgem9vbW91dDogZmFsc2UsXG4gICAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxuICAgICAgICAgIHpvb21pbjogZmFsc2UsXG4gICAgICAgICAgem9vbTogXCIgXCIsXG4gICAgICAgICAgc2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICBwYW46IGZhbHNlLFxuICAgICAgICAgIHJlc2V0OiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXZlbnRzOiB7fVxuICAgIH0sXG4gICAgeGF4aXM6IHtcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yczogW10sXG4gICAgICAgICAgZm9udFNpemU6IFwiMTFweFwiLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDQwMCxcbiAgICAgICAgICBjc3NDbGFzczogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGl0bGU6IHtcbiAgICAgICAgcm90YXRlOiAtOTAsXG4gICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZm9udFNpemU6IFwiMTFweFwiLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IDkwMCxcbiAgICAgICAgICBjc3NDbGFzczogXCJcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBncmlkOiB7XG4gICAgICBzaG93OiBmYWxzZSxcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgc2hvdzogdHJ1ZVxuICAgIH0sXG4gIH07XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgeGF4aXMgZm9ybWF0dGVyIGZvciBjaGFydCB3aXRoIGRhdGV0aW1lIG9uIHhheGlzLlxuICBjb25zdCBfc2V0WFRpbWVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoY2hhcnRPcHRpb25zKSB7XG4gICAgY2hhcnRPcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUsIHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdCh2YWx1ZSk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19DT0xVTU5fQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJiYXJcIixcbiAgICAgICAgem9vbToge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgdHlwZTogXCJ4XCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICAvLyBzaGFyZWQ6IHRydWUsXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBmb3JtYXQ6IFwiZGQgTU1NIHl5eXkgSEg6bW06c3NcIlxuICAgICAgICB9LFxuICAgICAgICB5OiB7fVxuICAgICAgfSxcbiAgICAgIHhheGlzOiB7XG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgZGF0ZXRpbWVVVEM6IGZhbHNlLFxuICAgICAgICAgIGZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2VcbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19DT0xVTU5fQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImFyZWFcIixcbiAgICAgICAgem9vbToge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgdHlwZTogXCJ4XCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICAvLyBzaGFyZWQ6IHRydWUsXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBmb3JtYXQ6IFwiZGQgTU1NIHl5eXkgSEg6bW06c3NcIlxuICAgICAgICB9LFxuICAgICAgICB5OiB7fVxuICAgICAgfSxcbiAgICAgIHhheGlzOiB7XG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgZGF0ZXRpbWVVVEM6IGZhbHNlLFxuICAgICAgICAgIGZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2VcbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfUE9MQVJfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJwb2xhckFyZWFcIixcbiAgICAgICAgaGVpZ2h0OiA0MDBcbiAgICAgIH0sXG4gICAgICB5YXhpczoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gKHZhbCA/IGAke3ZhbC50b0ZpeGVkKDEpfSVgIDogYDAlYClcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgeToge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiZG9udXRcIixcbiAgICAgICAgaGVpZ2h0OiAzMDBcbiAgICAgIH0sXG4gICAgICB5YXhpczoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gKHZhbCA/IGAke3ZhbC50b0ZpeGVkKDEpfSVgIDogYDAlYClcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgeToge1xuICAgICAgICAgICAgZm9ybWF0dGVyOiBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJudW1iZXJcIiksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbm9EYXRhOiB7XG4gICAgICAgIHRleHQ6ICdObyBEYXRhJyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvbnRTaXplOiAnMjRweCcsXG4gICAgICAgICAgZm9udEZhbWlseTogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19SQURJQUxCQVJfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJyYWRpYWxCYXJcIixcbiAgICAgICAgaGVpZ2h0OiAzMDBcbiAgICAgIH0sXG4gICAgICB5YXhpczoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsLCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgeToge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbm9EYXRhOiB7XG4gICAgICAgIHRleHQ6ICdObyBEYXRhJyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvbnRTaXplOiAnMjRweCcsXG4gICAgICAgICAgZm9udEZhbWlseTogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgICAgZW5kQW5nbGU6IDI3MCxcbiAgICAgICAgICBob2xsb3c6IHtcbiAgICAgICAgICAgIG1hcmdpbjogNSxcbiAgICAgICAgICAgIHNpemU6ICczMCUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgIGltYWdlOiB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBmbG9hdGluZzogdHJ1ZSxcbiAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICAgICAgcG9zaXRpb246ICdsZWZ0JyxcbiAgICAgICAgb2Zmc2V0WDogMTYwLFxuICAgICAgICBvZmZzZXRZOiAxNSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgdXNlU2VyaWVzQ29sb3JzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgc2l6ZTogMFxuICAgICAgICB9LFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHNlcmllc05hbWUsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gc2VyaWVzTmFtZSArIFwiOiAgXCIgKyBvcHRzLncuZ2xvYmFscy5zZXJpZXNbb3B0cy5zZXJpZXNJbmRleF1cbiAgICAgICAgfSxcbiAgICAgICAgaXRlbU1hcmdpbjoge1xuICAgICAgICAgIHZlcnRpY2FsOiAzXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNwb25zaXZlOiBbe1xuICAgICAgICBicmVha3BvaW50OiA0ODAsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfUElFX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwicGllXCIsXG4gICAgICAgIGhlaWdodDogNDAwXG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsLCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuICh2YWwgPyBgJHt2YWwudG9GaXhlZCgxKX0lYCA6IGAwJWApXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgbGluZSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19MSU5FX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19MSU5FX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInhcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgeDoge1xuICAgICAgICAgIGZvcm1hdDogXCJkZCBNTU0geXl5eSBISDptbTpzc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHt9XG4gICAgICB9LFxuICAgICAgeGF4aXM6IHtcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgZGF0ZXRpbWVVVEM6IGZhbHNlLFxuICAgICAgICAgIGZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRlZENhdFRvTnVtZXJpYzogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZ3JpZDoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX0xJTkVfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICBjb25zdCBmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSA9IGZ1bmN0aW9uICh7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke25hbWV9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PmApXG4gIH07XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBsaW5lIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX0JVQkJMRV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImJ1YmJsZVwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgYXV0b1NjYWxlWWF4aXM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBkYXRhUG9pbnRTZWxlY3Rpb246IFwic3RhbmRhcmRcIixcbiAgICAgIH0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICBsZWZ0OiA2XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgeGF4aXM6IHtcbiAgICAgICAgdHlwZTogJ251bWVyaWMnLFxuICAgICAgICBsYWJlbHM6IHt9XG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgdHlwZTogJ251bWVyaWMnLFxuICAgICAgICBmb3JjZU5pY2VTY2FsZTogdHJ1ZSxcbiAgICAgICAgbGFiZWxzOiB7fVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIGN1c3RvbTogZm9ybWF0X2xhYmVsX2Zyb21feG5hbWUsXG4gICAgICB9XG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX0JVQkJMRV9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZUNoYXJ0OiB7XG4gICAgICBUU19MSU5FOiBcIlRTX0xJTkVcIixcbiAgICAgIFRTX1NUQUNLRUQ6IFwiVFNfU1RBQ0tFRFwiLFxuICAgICAgVFNfQ09MVU1OOiBcIlRTX0NPTFVNTlwiLFxuICAgICAgUElFOiBcIlBJRVwiLFxuICAgICAgRE9OVVQ6IFwiRE9OVVRcIixcbiAgICAgIFJBRElBTEJBUjogXCJSQURJQUxCQVJcIixcbiAgICAgIFJBREFSOiBcIlJBREFSXCIsXG4gICAgICBCVUJCTEU6IFwiQlVCQkxFXCIsXG4gICAgICBCQVNFOiBcIkJBU0VcIixcbiAgICB9LFxuICAgIG5ld0NoYXJ0OiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgbGV0IF9jaGFydE9wdGlvbnMgPSB7fTtcbiAgICAgIGxldCBfY2hhcnQ7XG4gICAgICBsZXQgX2NoYXJ0SHRtbEVsZW1lbnQ7XG5cbiAgICAgIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX1NUQUNLRUQpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1NUQUNLRURfQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX0xJTkUpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX0xJTkVfQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlRTX0NPTFVNTikge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyk7XG4gICAgICAgIF9zZXRYVGltZUZvcm1hdHRlcihfY2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5QSUUpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1BJRV9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkRPTlVUKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19ET05VVF9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlJBRElBTEJBUikge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfUkFESUFMQkFSX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuUE9MQVIpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuQlVCQkxFKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5CQVNFKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBgbnRvcENoYXJ0QXBleDo6bmV3Q2hhcnQ6IGNoYXJ0IHR5cGUgPSAke3R5cGV9IHVuc3VwcG9ydGVkYDtcbiAgICAgIH1cbiAgICAgICAgY29uc3Qgc2V0WWF4aXNGb3JtYXR0ZXIgPSAoY2hhcnRPcHRpb25zKSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNoYXJ0T3B0aW9ucz8ueWF4aXM/LmxhYmVscz8uZm9ybWF0dGVyKSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyO1xuICAgICAgICAgICAgICBsZXQgY2hhcnRGb3JtYXR0ZXIgPSBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyKTtcbiAgICAgICAgICAgICAgaWYgKGNoYXJ0Rm9ybWF0dGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gY2hhcnRGb3JtYXR0ZXI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZm9ybWF0dGVyID09IFwiZm9ybWF0VmFsdWVcIikge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gRm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZm9ybWF0dGVyID09IFwiYnl0ZXNUb1NpemVcIikge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0T3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gRm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKFwiYnl0ZXNcIik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkcmF3Q2hhcnQ6IGZ1bmN0aW9uIChodG1sRWxlbWVudCwgY2hhcnRPcHRpb25zKSB7XG4gICAgICAgICAgLy8gYWRkL3JlcGxhY2UgY2hhcnRPcHRpb25zIGZpZWxkcyBpbiBfY2hhcnRPcHRpb25zXG4gICAgICAgICAgICAgIHNldFlheGlzRm9ybWF0dGVyKGNoYXJ0T3B0aW9ucyk7XG4gICAgICAgICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhjaGFydE9wdGlvbnMsIF9jaGFydE9wdGlvbnMsIHRydWUpO1xuICAgICAgICAgIF9jaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGh0bWxFbGVtZW50LCBfY2hhcnRPcHRpb25zKTtcbiAgICAgICAgICBfY2hhcnRIdG1sRWxlbWVudCA9IGh0bWxFbGVtZW50O1xuICAgICAgICAgIF9jaGFydC5yZW5kZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9fZGF0YV91cmk6IGFzeW5jIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBfY2hhcnQuZGF0YVVSSShvcHRpb25zKTtcbiAgICAgICAgICByZXR1cm4gcmVzLmltZ1VSSTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveUNoYXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgIF9jaGFydC5kZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUNoYXJ0OiBmdW5jdGlvbiAoY2hhcnRPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgc2V0WWF4aXNGb3JtYXR0ZXIoY2hhcnRPcHRpb25zKTtcbiAgICAgICAgICBfY2hhcnQudXBkYXRlT3B0aW9ucyhjaGFydE9wdGlvbnMsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVTZXJpZXM6IGZ1bmN0aW9uIChzZXJpZXMpIHtcbiAgICAgICAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgX2NoYXJ0LnVwZGF0ZVNlcmllcyhzZXJpZXMpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlckV2ZW50OiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaywgdXBkYXRlQ2hhcnQgPSBmYWxzZSkge1xuICAgICAgICAgIF9jaGFydE9wdGlvbnMuY2hhcnQuZXZlbnRzW2V2ZW50TmFtZV0gPSBjYWxsYmFjaztcbiAgICAgICAgICBpZiAodXBkYXRlQ2hhcnQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgX2NoYXJ0LnVwZGF0ZU9wdGlvbnMoX2NoYXJ0T3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICB9O1xufSgpO1xuXG5leHBvcnQgeyBudG9wQ2hhcnRBcGV4IH07XG4iLCIvKipcbiAqIChDKSAyMDIwLTIxIC0gbnRvcC5vcmdcbiAqIFRoaXMgZmlsZSBjb250YWlucyB1dGlsaXRpZXMgdXNlZCBieSB0aGUgKm5ldyogZGF0YXRhYmxlcy5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi9udG9wLXV0aWxzXCI7XG5cblxuY29uc3QgRGF0YVRhYmxlSGFuZGxlcnMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgaGFuZGxlcnNJZERpY3QgPSB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRIYW5kbGVyOiBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICBsZXQgaGFuZGxlcnMgPSBoYW5kbGVyc0lkRGljdFtoLmhhbmRsZXJJZF07XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzID0gW107XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNJZERpY3RbaC5oYW5kbGVySWRdID0gaGFuZGxlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVycy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBoLm9uQ2xpY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGB3aW5kb3dbJ19EYXRhVGFibGVCdXR0b25zT25DbGljayddKCcke2guaGFuZGxlcklkfScsICcke2hhbmRsZXJzLmxlbmd0aCAtIDF9JylgO1xuICAgICAgICB9LFxuICAgICAgICBnZXRIYW5kbGVyOiBmdW5jdGlvbihoYW5kbGVySWQsIHJvd0lkKSB7XG4gICAgICAgICAgICBsZXQgaGFuZGxlcnMgPSBoYW5kbGVyc0lkRGljdFtoYW5kbGVySWRdO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJzID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyc1tyb3dJZF07XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUhhbmRsZXJzQnlJZDogZnVuY3Rpb24oaGFuZGxlcklkKSB7XG4gICAgICAgICAgICBoYW5kbGVyc0lkRGljdFtoYW5kbGVySWRdID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICB9XG59KCk7XG4gICAgXG53aW5kb3dbXCJfRGF0YVRhYmxlQnV0dG9uc09uQ2xpY2tcIl0gPSBmdW5jdGlvbihoYW5kbGVySWQsIHJvd0lkKSB7XG4gICAgbGV0IG9uQ2xpY2sgPSBEYXRhVGFibGVIYW5kbGVycy5nZXRIYW5kbGVyKGhhbmRsZXJJZCwgcm93SWQpO1xuICAgIGlmIChvbkNsaWNrICE9IG51bGwpIHtcbiAgICAgICAgb25DbGljaygpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZUZpbHRlcnNNZW51IHtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvcHRpb25zfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgdGFibGVBUEksIGZpbHRlck1lbnVLZXksIGZpbHRlclRpdGxlLCBmaWx0ZXJzLCBjb2x1bW5JbmRleCwgaWNvbiA9IG51bGwsIGV4dHJhQXR0cmlidXRlcyA9IFwiXCIsIGlkID0gbnVsbCwgdXJsID0gbnVsbCwgdXJsUGFyYW1zID0gbnVsbCwgcmVtb3ZlQWxsRW50cnkgPSBmYWxzZSwgY2FsbGJhY2tGdW5jdGlvbiA9IG51bGwgfSkge1xuICAgICAgICB0aGlzLnJhd0ZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgICB0aGlzLnRhYmxlQVBJID0gdGFibGVBUEk7XG4gICAgICAgIHRoaXMuZmlsdGVyVGl0bGUgPSBmaWx0ZXJUaXRsZTtcbiAgICAgICAgdGhpcy5pY29uID0gaWNvbjtcbiAgICAgICAgdGhpcy5maWx0ZXJNZW51S2V5ID0gZmlsdGVyTWVudUtleTtcbiAgICAgICAgdGhpcy5jb2x1bW5JbmRleCA9IGNvbHVtbkluZGV4O1xuICAgICAgICB0aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyU2VsZWN0ZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIgPSAkKHRhYmxlQVBJLmNvbnRleHRbMF0ublRhYmxlV3JhcHBlcik7XG4gICAgICAgIHRoaXMuZXh0cmFBdHRyaWJ1dGVzID0gZXh0cmFBdHRyaWJ1dGVzO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnJlbW92ZUFsbEVudHJ5ID0gcmVtb3ZlQWxsRW50cnk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiA9IGNhbGxiYWNrRnVuY3Rpb247XG4gICAgICB9XG5cbiAgICBnZXQgc2VsZWN0ZWRGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIHdoZW4gdGhlIGRhdGF0YWJsZSBoYXMgYmVlbiBpbml0aWFsaXplZCByZW5kZXIgdGhlIGRyb3Bkb3duXG4gICAgICAgIHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIub24oJ2luaXQuZHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5fcmVuZGVyKHNlbGYucmF3RmlsdGVycyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG9uIGFqYXggcmVsb2FkIHRoZW4gdXBkYXRlIHRoZSBkYXRhdGFibGUgZW50cmllc1xuICAgICAgICB0aGlzLnRhYmxlQVBJLm9uKCdkcmF3JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuX3VwZGF0ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICBfY291bnRFbnRyaWVzKHJlZ2V4LCBkYXRhID0gW10pIHtcblxuICAgICAgICBpZiAocmVnZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkRhdGFUYWJsZUZpbHRlcnNNZW51OjpfY291bnRFbnRyaWVzKCkgPT4gdGhlIHBhc3NlZCByZWdleCBpcyB1bmRlZmluZWQhXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChyZWdleCk7XG4gICAgICAgIHJldHVybiBkYXRhLmZpbHRlcihjZWxsVmFsdWUgPT4gcmVnLnRlc3QoY2VsbFZhbHVlKSkubGVuZ3RoO1xuICAgIH1cblxuICAgIF9jcmVhdGVNZW51RW50cnkoZmlsdGVyKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCAkZW50cnkgPSAkKGA8bGkgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gcG9pbnRlcic+JHtmaWx0ZXIubGFiZWx9IDwvbGk+YCk7XG4gICAgICAgIFxuICAgICAgICBpZihzZWxmLnVybCkge1xuICAgICAgICAgICRlbnRyeSA9ICQoYDxsaSBjbGFzcz0nZHJvcGRvd24taXRlbSBwb2ludGVyJz48YSBocmVmPSMgY2xhc3M9J3AtMSBzdGFuZGFyZC1jb2xvcic+JHtmaWx0ZXIubGFiZWx9IDwvbGk+YCk7XG5cbiAgICAgICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBzZXQgYWN0aXZlIGZpbHRlciB0aXRsZSBhbmQga2V5XG4gICAgICAgICAgICBpZiAoc2VsZi4kZHJvcGRvd24udGl0bGUucGFyZW50KCkuZmluZChgaS5mYXNgKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5wcmVwZW5kKGA8aSBjbGFzcz0nZmFzIGZhLWZpbHRlcic+PC9pPmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gJGVudHJ5Lmh0bWwoKTtcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLmh0bWwobmV3Q29udGVudCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzcyBmcm9tIHRoZSBsaSBlbGVtZW50c1xuICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24uY29udGFpbmVyLmZpbmQoJ2xpJykucmVtb3ZlQ2xhc3MoYGFjdGl2ZWApO1xuICAgICAgICAgICAgLy8gYWRkIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IGVudHJ5XG4gICAgICAgICAgICBpZihmaWx0ZXIua2V5ICE9PSAnYWxsJykge1xuICAgICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoYGFjdGl2ZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIucmVnZXggIT09IHVuZGVmaW5lZCAmJiAoZmlsdGVyLmNvdW50YWJsZSA9PT0gdW5kZWZpbmVkIHx8IGZpbHRlci5jb3VudGFibGUpKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy50YWJsZUFQSS5jb2x1bW5zKHRoaXMuY29sdW1uSW5kZXgpLmRhdGEoKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fY291bnRFbnRyaWVzKGZpbHRlci5yZWdleCwgZGF0YSk7XG4gICAgICAgICAgICBjb25zdCAkY291bnRlciA9ICQoYDxzcGFuIGNsYXNzPSdjb3VudGVyJz4oJHtjb3VudH0pPC9zcGFuPmApO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgY291bnQgaXMgMCB0aGVuIGhpZGUgdGhlIG1lbnUgZW50cnlcbiAgICAgICAgICAgIGlmIChjb3VudCA9PSAwKSAkZW50cnkuaGlkZSgpO1xuXG4gICAgICAgICAgICAvL2FwcGVuZCB0aGUgJGNvdW50ZXIgb2JqZWN0IGluc2lkZSB0aGUgJGVudHJ5XG4gICAgICAgICAgICAkZW50cnkuYXBwZW5kKCRjb3VudGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbnRyeS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIC8vIHNldCBhY3RpdmUgZmlsdGVyIHRpdGxlIGFuZCBrZXlcbiAgICAgICAgICBpZiAoc2VsZi4kZHJvcGRvd24udGl0bGUucGFyZW50KCkuZmluZChgaS5mYXNgKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUucGFyZW50KCkucHJlcGVuZChgPGkgY2xhc3M9J2ZhcyBmYS1maWx0ZXInPjwvaT5gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gJGVudHJ5Lmh0bWwoKTtcbiAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5odG1sKG5ld0NvbnRlbnQpO1xuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzIGZyb20gdGhlIGxpIGVsZW1lbnRzXG4gICAgICAgICAgc2VsZi4kZHJvcGRvd24uY29udGFpbmVyLmZpbmQoJ2xpJykucmVtb3ZlQ2xhc3MoYGFjdGl2ZWApO1xuICAgICAgICAgIC8vIGFkZCBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBlbnRyeVxuICAgICAgICAgIGlmKGZpbHRlci5rZXkgIT09ICdhbGwnKSB7XG4gICAgICAgICAgICAkZW50cnkuYWRkQ2xhc3MoYGFjdGl2ZWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKHNlbGYuY2FsbGJhY2tGdW5jdGlvbikge1xuICAgICAgICAgICAgc2VsZi5jYWxsYmFja0Z1bmN0aW9uKHNlbGYudGFibGVBUEksIGZpbHRlcik7XG4gICAgICAgICAgICBpZihmaWx0ZXIuY2FsbGJhY2spIGZpbHRlci5jYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFzZWxmLnVybCkge1xuICAgICAgICAgICAgc2VsZi5wcmV2ZW50VXBkYXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gaWYgdGhlIGZpbHRlciBoYXZlIGEgY2FsbGJhY2sgdGhlbiBjYWxsIGl0XG4gICAgICAgICAgICBpZiAoZmlsdGVyLmNhbGxiYWNrKSBmaWx0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICAgIC8vIHBlcmZvcm0gdGhlIHRhYmxlIGZpbHRlcmluZ1xuICAgICAgICAgICAgc2VsZi50YWJsZUFQSS5jb2x1bW4oc2VsZi5jb2x1bW5JbmRleCkuc2VhcmNoKGZpbHRlci5yZWdleCwgdHJ1ZSwgZmFsc2UpLmRyYXcoKTtcbiAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IGZpbHRlclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50RmlsdGVyU2VsZWN0ZWQgPSBmaWx0ZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYudXJsUGFyYW1zID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICAgICAgICAgICAgY29uc3QgbmV3VXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWxmLnVybFBhcmFtcylcbiAgICAgICAgICAgIG5ld1VybFBhcmFtcy5zZXQoc2VsZi5maWx0ZXJNZW51S2V5LCAodHlwZW9mKGZpbHRlci5pZCkgIT0gXCJ1bmRlZmluZWRcIikgPyBmaWx0ZXIuaWQgOiAnJylcblxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8nICsgbmV3VXJsUGFyYW1zLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICRlbnRyeTtcbiAgICB9XG5cbiAgICBfY3JlYXRlRmlsdGVycyhmaWx0ZXJzKSB7XG5cbiAgICAgICAgY29uc3QgZmlsdGVyc0NyZWF0ZWQgPSB7fTtcblxuICAgICAgICAvLyBmb3IgZWFjaCBmaWx0ZXIgZGVmaW5lZCBpbiB0aGlzLmZpbHRlcnNcbiAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgZmlsdGVycykge1xuXG4gICAgICAgICAgICBjb25zdCAkZmlsdGVyID0gdGhpcy5fY3JlYXRlTWVudUVudHJ5KGZpbHRlcik7XG4gICAgICAgICAgICAvLyBzYXZlIHRoZSBmaWx0ZXIgaW5zaWRlIHRoZSAkZmlsdGVycyBvYmplY3RcbiAgICAgICAgICAgIGZpbHRlcnNDcmVhdGVkW2ZpbHRlci5rZXldID0geyBmaWx0ZXI6IGZpbHRlciwgJG5vZGU6ICRmaWx0ZXIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJzQ3JlYXRlZDtcbiAgICB9XG5cbiAgICBfcmVuZGVyKGZpbHRlcnMpIHtcbiAgICAgIGlmKHR5cGVvZiB0aGlzLmNvbHVtbkluZGV4ID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICQoYDxzcGFuIGlkPVwiJHt0aGlzLmlkfVwiICR7dGhpcy5leHRyYUF0dHJpYnV0ZXN9IHRpdGxlPVwiJHt0aGlzLmZpbHRlclRpdGxlfVwiPiR7dGhpcy5pY29uIHx8IHRoaXMuZmlsdGVyVGl0bGV9PC9zcGFuPmApLmluc2VydEJlZm9yZSh0aGlzLiRkYXRhdGFibGVXcmFwcGVyLmZpbmQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLnBhcmVudCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93bkNvbnRhaW5lciA9ICQoYDxkaXYgaWQ9JyR7dGhpcy5maWx0ZXJNZW51S2V5fV9kcm9wZG93bicgY2xhc3M9J2Ryb3Bkb3duIGQtaW5saW5lJz48L2Rpdj5gKTtcbiAgICAgICAgY29uc3QgJGRyb3Bkb3duQnV0dG9uID0gJChgPGJ1dHRvbiBjbGFzcz0nYnRuLWxpbmsgYnRuIGRyb3Bkb3duLXRvZ2dsZScgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiIHR5cGU9J2J1dHRvbic+PC9idXR0b24+YCk7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93blRpdGxlID0gJChgPHNwYW4gY2xhc3M9J2ZpbHRlci10aXRsZSc+JHt0aGlzLmZpbHRlclRpdGxlfTwvc3Bhbj5gKTtcbiAgICAgICAgJGRyb3Bkb3duQnV0dG9uLmFwcGVuZCgkZHJvcGRvd25UaXRsZSk7XG5cbiAgICAgICAgdGhpcy4kZHJvcGRvd24gPSB7XG4gICAgICAgICAgY29udGFpbmVyOiAkZHJvcGRvd25Db250YWluZXIsXG4gICAgICAgICAgdGl0bGU6ICRkcm9wZG93blRpdGxlLFxuICAgICAgICAgIGJ1dHRvbjogJGRyb3Bkb3duQnV0dG9uXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5maWx0ZXJzID0gdGhpcy5fY3JlYXRlRmlsdGVycyhmaWx0ZXJzKTtcblxuICAgICAgICBjb25zdCAkbWVudUNvbnRhaW5lciA9ICQoYDx1bCBjbGFzcz0nZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LWxnLWVuZCBzY3JvbGxhYmxlLWRyb3Bkb3duJyBpZD0nJHt0aGlzLmZpbHRlck1lbnVLZXl9X2Ryb3Bkb3duX21lbnUnPjwvdWw+YCk7XG4gICAgICAgIGZvciAoY29uc3QgW18sIGZpbHRlcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5maWx0ZXJzKSkge1xuICAgICAgICAgICAgJG1lbnVDb250YWluZXIuYXBwZW5kKGZpbHRlci4kbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgQWxsIGVudHJ5IGlzIGNyZWF0ZWQgYnkgdGhlIG9iamVjdFxuICAgICAgICBpZighdGhpcy5yZW1vdmVBbGxFbnRyeSkge1xuICAgICAgICAgIGNvbnN0IGFsbEZpbHRlciA9IHRoaXMuX2dlbmVyYXRlQWxsRmlsdGVyKCk7XG4gICAgICAgICAgJG1lbnVDb250YWluZXIucHJlcGVuZCh0aGlzLl9jcmVhdGVNZW51RW50cnkoYWxsRmlsdGVyKSk7ICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBjcmVhdGVkIGRyb3Bkb3duIGluc2lkZVxuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuYXBwZW5kKCRkcm9wZG93bkJ1dHRvbik7XG4gICAgICAgICRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmQoJG1lbnVDb250YWluZXIpO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGRyb3Bkb3duIG1lbnUgaW5zaWRlIHRoZSBmaWx0ZXIgd3JhcHBlclxuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuaW5zZXJ0QmVmb3JlKHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIuZmluZCgnLmRhdGFUYWJsZXNfZmlsdGVyJykucGFyZW50KCkpO1xuXG4gICAgICAgIHRoaXMuX3NlbGVjdEZpbHRlckZyb21TdGF0ZSh0aGlzLmZpbHRlck1lbnVLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUoZmlsdGVyS2V5KSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRhYmxlQVBJLnN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy50YWJsZUFQSS5zdGF0ZS5sb2FkZWQoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMudGFibGVBUEkuc3RhdGUubG9hZGVkKCkuZmlsdGVycykgcmV0dXJuO1xuXG4gICAgICAgIC8vIHNhdmUgdGhlIGN1cnJlbnQgdGFibGUgc3RhdGVcbiAgICAgICAgdGFibGVBUEkuc3RhdGUuc2F2ZSgpO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUFsbEZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogJ2FsbCcsXG4gICAgICAgICAgICBsYWJlbDogaTE4bl9leHQuYWxsLFxuICAgICAgICAgICAgcmVnZXg6ICcnLFxuICAgICAgICAgICAgY291bnRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24udGl0bGUucGFyZW50KCkuZmluZCgnaS5mYXMuZmEtZmlsdGVyJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24udGl0bGUuaHRtbChgJHt0aGlzLmZpbHRlclRpdGxlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF91cGRhdGUoKSB7XG5cbiAgICAgICAgLy8gaWYgdGhlIGZpbHRlcnMgaGF2ZSBub3QgYmVlbiBpbml0aWFsaXplZCBieSBfcmVuZGVyIHRoZW4gcmV0dXJuXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5wcmV2ZW50VXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW18sIGZpbHRlcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5maWx0ZXJzKSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlci5jb3VudGFibGUgPT0gZmFsc2UgfHwgZmlsdGVyLmZpbHRlci5jb3VudGFibGUgPT0gZmFsc2UpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy50YWJsZUFQSS5jb2x1bW5zKHRoaXMuY29sdW1uSW5kZXgpLmRhdGEoKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fY291bnRFbnRyaWVzKGZpbHRlci5maWx0ZXIucmVnZXgsIGRhdGEpO1xuXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBmaWx0ZXIgaWYgdGhlIGNvdW50IGlzIHplcm9cbiAgICAgICAgICAgIChjb3VudCA9PSAwKSA/IGZpbHRlci4kbm9kZS5oaWRlKCkgOiBmaWx0ZXIuJG5vZGUuc2hvdygpO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjb3VudGVyIGxhYmVsXG4gICAgICAgICAgICBmaWx0ZXIuJG5vZGUuZmluZCgnLmNvdW50ZXInKS50ZXh0KGAoJHtjb3VudH0pYCk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHNlbGVjdGVkIGJ1dHRvbiBjb3VudGVyXG4gICAgICAgICAgICB0aGlzLiRkcm9wZG93bi5idXR0b24uZmluZCgnLmNvdW50ZXInKS50ZXh0KGAoJHtjb3VudH0pYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVV0aWxzIHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIHN0YW5kYXJkIGNvbmZpZyBmb3IgdGhlIFNwcnltZWRpYSAoYykgRGF0YVRhYmxlc1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTdGREYXRhdGFibGVDb25maWcoZHRCdXR0b25zID0gW10sIGRvbSA9IFwiPCdyb3cnPCdjb2wtc20tMiBkLWlubGluZS1ibG9jaydsPjwnY29sLXNtLTEwIHRleHQtZW5kIGQtaW5saW5lLWJsb2NrJzwnZHQtc2VhcmNoJ2Y+Qj5ydGlwPlwiKSB7XG5cbiAgICAgICAgLy8gaGlkZSB0aGUgYnV0dG9ucyBzZWN0aW9uIGlmIHRoZXJlIGFyZW4ndCBidXR0b25zIGluc2lkZSB0aGUgYXJyYXlcbiAgICAgICAgaWYgKGR0QnV0dG9ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgZG9tID0gXCJmQnJ0aXBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb206IGRvbSxcbiAgICAgICAgICAgIHBhZ2luZ1R5cGU6ICdmdWxsX251bWJlcnMnLFxuICAgICAgICAgICAgbGVuZ3RoTWVudTogW1sxMCwgMjAsIDUwLCAxMDBdLCBbMTAsIDIwLCA1MCwgMTAwXV0sXG4gICAgICAgICAgICBsYW5ndWFnZToge1xuICAgICAgICAgICAgICAgIHNlYXJjaDogaTE4bi5zY3JpcHRfc2VhcmNoLFxuICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiAnJmx0OycsXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6ICcmZ3Q7JyxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICfCqycsXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6ICfCuydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2F2ZVN0YXRlOiB0cnVlLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBidXR0b25zOiBkdEJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgZG9tOiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYnRuIGJ0bi1saW5rJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2QtaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUxpbmtDYWxsYmFjayhhY3Rpb24pIHtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBcIlwiO1xuICAgICAgICBsZXQgZk9uQ2xpY2sgPSBEYXRhVGFibGVIYW5kbGVycy5hZGRIYW5kbGVyKGFjdGlvbi5oYW5kbGVyKTtcbiAgICAgICAgaGFuZGxlciA9IGBvbmNsaWNrPVwiJHtmT25DbGlja31cImA7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj0jXG4gICAgICAgICAgICAgICAgICAgJHtoYW5kbGVyfT5cbiAgICAgICAgICAgICAgICAgICAke2FjdGlvbi50ZXh0IHx8ICcnfVxuICAgICAgICAgICAgICAgIDwvYT5gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4YW1wbGUgb2YgYWN0aW9uOlxuICAgICAqIHtcbiAgICAgKiAgY2xhc3M6IHN0cmluZyxcbiAgICAgKiAgZGF0YTogb2JqZWN0LFxuICAgICAqICBpY29uOiBzdHJpbmcsXG4gICAgICogIG1vZGFsOiBzdHJpbmcsXG4gICAgICogIGhyZWY6IHN0cmluZyxcbiAgICAgKiAgaGlkZGVuOiBib29sLFxuICAgICAqIH1cbiAgICAgKiBAcGFyYW0geyp9IGFjdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlQWN0aW9uQnV0dG9ucyhhY3Rpb25zID0gW10pIHtcblxuICAgICAgICBjb25zdCBidXR0b25zID0gW107XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duQnV0dG9uID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj48aSBjbGFzcz1cImZhcyBmYS1hbGlnbi1qdXN0aWZ5XCI+PC9pPjwvYnV0dG9uPidcblxuICAgICAgICBhY3Rpb25zLmZvckVhY2goKGFjdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZPbkNsaWNrID0gRGF0YVRhYmxlSGFuZGxlcnMuYWRkSGFuZGxlcihhY3Rpb24uaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IGBvbmNsaWNrPVwiJHtmT25DbGlja31cImA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYnV0dG9uID0gKGBcbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAkeyhhY3Rpb24uaHJlZiB8fCBhY3Rpb24ubW9kYWwpID8gYGhyZWY9JyR7YWN0aW9uLmhyZWYgfHwgYWN0aW9uLm1vZGFsfSdgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICR7aGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgJHsoYWN0aW9uLm9uY2xpY2spID8gYG9uY2xpY2s9JyR7YWN0aW9uLm9uY2xpY2t9J2AgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24ubW9kYWwgPyBcImRhdGEtYnMtdG9nZ2xlPSdtb2RhbCdcIiA6IGBgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz0nZHJvcGRvd24taXRlbSAke2FjdGlvbi5jbGFzcyA/IGFjdGlvbi5jbGFzcyA6IGBgfSdcbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24uaGlkZGVuID8gXCJzdHlsZT0nZGlzcGxheTogbm9uZSdcIiA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAke2FjdGlvbi5leHRlcm5hbCA/IFwidGFyZ2V0PSdfYWJvdXQnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzICR7YWN0aW9uLmljb259Jz48L2k+ICR7YWN0aW9uLnRpdGxlIHx8ICcnfVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICBgKTtcbiAgICAgICAgICAgIGJ1dHRvbnMucHVzaChidXR0b24pO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsaXN0ID0gYDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj4ke2J1dHRvbnMuam9pbignJyl9PC91bD5gXG5cbiAgICAgICAgcmV0dXJuIChgPGRpdiBjbGFzcz0nZHJvcGRvd24nPiR7ZHJvcGRvd25CdXR0b259JHtsaXN0fTwvZGl2PmApO1xuICAgIH1cblxuICAgIHN0YXRpYyBkZWxldGVCdXR0b25IYW5kbGVycyhoYW5kbGVySWQpIHtcbiAgICAgICAgRGF0YVRhYmxlSGFuZGxlcnMuZGVsZXRlSGFuZGxlcnNCeUlkKGhhbmRsZXJJZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldEFqYXhDb25maWcoY29uZmlnLCB1cmwsIGRhdGFTcmMgPSAnJywgbWV0aG9kID0gXCJnZXRcIiwgcGFyYW1zID0ge30pIHtcblxuICAgICAgICBjb25maWcuYWpheCA9IHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgICAgICAgZGF0YVNyYzogZGF0YVNyYyxcbiAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBzdGF0aWMgZXh0ZW5kQ29uZmlnKGNvbmZpZywgZXh0ZW5zaW9uKSB7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIGN1c3RvbSBmaWx0ZXJzIHRoZW4gbWFuYWdlIHN0YXRlIGluIHRoaXMgd2F5XG4gICAgICAgIGlmIChleHRlbnNpb24uaGFzRmlsdGVycykge1xuXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVTYXZlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnRGF0YVRhYmxlc18nICsgc2V0dGluZ3Muc0luc3RhbmNlLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGV4dGVuc2lvbi5zdGF0ZUxvYWRDYWxsYmFjayA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEYXRhVGFibGVzXycgKyBzZXR0aW5ncy5zSW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIG9uIHNhdmluZyB0aGUgdGFibGUgc3RhdGUgc3RvcmUgdGhlIHNlbGVjdGVkIGZpbHRlcnNcbiAgICAgICAgICAgIGV4dGVuc2lvbi5zdGF0ZVNhdmVQYXJhbXMgPSBmdW5jdGlvbiAoc2V0dGluZ3MsIGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIC8vIHNhdmUgdGhlIGZpbHRlcnMgc2VsZWN0ZWQgZnJvbSB0aGUgdXNlciBpbnNpZGUgdGhlIHN0YXRlXG4gICAgICAgICAgICAgICAgJCgnW2RhdGEtZmlsdGVyXScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUZpbHRlciA9ICQodGhpcykuZmluZChgbGkuYWN0aXZlYCkuZGF0YSgnZmlsdGVyLWtleScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZUZpbHRlcikgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmaWx0ZXJzIG9iamVjdCBpcyBub3QgYWxsb2NhdGVkIHRoZW4gaW5pdGl6aWFsaXplcyBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuZmlsdGVycykgZGF0YS5maWx0ZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsdGVyc1skKHRoaXMpLmRhdGEoJ2ZpbHRlcicpXSA9IGFjdGl2ZUZpbHRlcjtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnN0IHVzZXJJbml0Q29tcGxldGUgPSBleHRlbnNpb24uaW5pdENvbXBsZXRlO1xuXG4gICAgICAgIC8vIGNvbnN0IGluaXRDb21wbGV0ZSA9IChzZXR0aW5ncywganNvbikgPT4ge1xuICAgICAgICAvLyAgICAgaWYgKHVzZXJJbml0Q29tcGxldGUgIT09IHVuZGVmaW5lZCkgdXNlckluaXRDb21wbGV0ZShzZXR0aW5ncywganNvbik7XG4gICAgICAgIC8vICAgICAvLyB0dXJuIG9uIHRvb2x0aXBzXG4gICAgICAgIC8vICAgICAkKGAuYWN0aW9ucy1ncm91cCBbdGl0bGVdYCkudG9vbHRpcCgnZW5hYmxlJyk7XG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgLy8gLy8gb3ZlcnJpZGUgaW5pdENvbXBsZXRlIGZ1bmN0aW9uXG4gICAgICAgIC8vIGV4dGVuc2lvbi5pbml0Q29tcGxldGUgPSBpbml0Q29tcGxldGU7XG5cbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBjb25maWcsIGV4dGVuc2lvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9ybWF0IHRoZSBwYXNzZWQgc2Vjb25kcyBpbnRvIHRoZSBcIkhIOk1NOlNTXCIgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzXG4gICAgICovXG4gICAgc3RhdGljIHNlY29uZHNUb0hITU1TUyhzZWNvbmRzKSB7XG5cbiAgICAgICAgY29uc3QgcGFkWmVyb2VzID0gbiA9PiBgJHtufWAucGFkU3RhcnQoMiwgJzAnKTtcblxuICAgICAgICBjb25zdCBzZWMgPSBzZWNvbmRzICUgNjA7XG4gICAgICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCkgJSA2MDtcbiAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcblxuICAgICAgICByZXR1cm4gYCR7cGFkWmVyb2VzKGhvdXJzKX06JHtwYWRaZXJvZXMobWlucyl9OiR7cGFkWmVyb2VzKHNlYyl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIE9wZW4gdGhlIHBvb2wgZWRpdCBtb2RhbCBvZiBhIGNob3NlbiBwb29sIGlmIHRoZSBxdWVyeSBwYXJhbXMgY29udGFpbnMgdGhlIHBvb2wgcGFyYW1hdGVyXG4gICAgKiBAcGFyYW0gdGFibGVBUElcbiAgICAqL1xuICAgIHN0YXRpYyBvcGVuRWRpdE1vZGFsQnlRdWVyeShwYXJhbXMpIHtcblxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAoIXVybFBhcmFtcy5oYXMocGFyYW1zLnBhcmFtTmFtZSkpIHJldHVybjtcblxuICAgICAgICBjb25zdCBkYXRhSUQgPSB1cmxQYXJhbXMuZ2V0KHBhcmFtcy5wYXJhbU5hbWUpO1xuICAgICAgICBjb25zdCBkYXRhID0gcGFyYW1zLmRhdGF0YWJsZUluc3RhbmNlLmRhdGEoKS50b0FycmF5KCkuZmluZCgoZGF0YSA9PiBkYXRhW3BhcmFtcy5wYXJhbU5hbWVdID09IGRhdGFJRCkpO1xuXG4gICAgICAgIC8vIGlmIHRoZSBjYW5jZWxJZiBwYXJhbSBoYXMgYmVlbiBwYXNzZWRcbiAgICAgICAgLy8gdGhlbiB0ZXN0IHRoZSBjYW5jZWxJZiBmdW5jdGlvbiwgaWYgdGhlIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBpcyB0cnVlIHRoZW4gY2FuY2VsIHRoZSBtb2RhbCBvcGVuaW5nXG4gICAgICAgIGlmICh0eXBlb2YgKHBhcmFtcy5jYW5jZWxJZikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuY2FuY2VsSWYoZGF0YSkpIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0ICRtb2RhbCA9ICQoYCMke3BhcmFtcy5tb2RhbEhhbmRsZXIuZ2V0TW9kYWxJRCgpfWApO1xuXG4gICAgICAgIC8vIGlmIHRoZSBwb29sIGlkIGlzIHZhbGlkIHRoZW4gb3BlbiB0aGUgZWRpdCBtb2RhbFxuICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwYXJhbXMubW9kYWxIYW5kbGVyLmludm9rZU1vZGFsSW5pdChkYXRhKTtcbiAgICAgICAgICAgICRtb2RhbC5tb2RhbCgnc2hvdycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cmxQYXJhbXMuaGFzKCdyZWZlcmVyJykpIHtcbiAgICAgICAgICAgICRtb2RhbC5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuZGVsZXRlKHBhcmFtcy5wYXJhbU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCB1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWZlcmVyID0gdXJsUGFyYW1zLmdldCgncmVmZXJlcicpO1xuXG4gICAgICAgICRtb2RhbC5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlZmVyZXI7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRUb2dnbGVDb2x1bW5zRHJvcGRvd24odGFibGVBUEksIHRvZ2dsZUNhbGxiYWNrID0gKGNvbCwgdmlzaWJsZSkgPT4ge30pIHtcblxuICAgICAgICBpZiAodGFibGVBUEkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgJ1RoZSAkdGFibGUgaXMgdW5kZWZpbmVkISc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YWJsZUlEID0gdGFibGVBUEkudGFibGUoKS5ub2RlKCkuaWQ7XG5cbiAgICAgICAgRGF0YVRhYmxlVXRpbHMuX2xvYWRDb2x1bW5zVmlzaWJpbGl0eSh0YWJsZUFQSSkudGhlbihmdW5jdGlvbiAoZmV0Y2hlZERhdGEpIHtcblxuICAgICAgICAgICAgbGV0IHNhdmVkQ29sdW1ucyA9IFstMV07XG4gICAgICAgICAgICBpZiAoZmV0Y2hlZERhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHNhdmVkQ29sdW1ucyA9IGZldGNoZWREYXRhLmNvbHVtbnMubWFwKGkgPT4gcGFyc2VJbnQoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZldGNoZWREYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5zID0gW107XG4gICAgICAgICAgICBjb25zdCBpZ25vcmVkQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgJGRhdGF0YWJsZVdyYXBwZXIgPSAkKHRhYmxlQVBJLmNvbnRleHRbMF0ublRhYmxlV3JhcHBlcik7XG5cbiAgICAgICAgICAgIC8vIGdldCB0aGUgdGFibGUgaGVhZGVycyBcbiAgICAgICAgICAgIHRhYmxlQVBJLmNvbHVtbnMoKS5ldmVyeShmdW5jdGlvbiAoaSkge1xuXG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgYWxyZWFkeSBoaWRkZW4gY29sdW1uc1xuICAgICAgICAgICAgICAgIGlmICghdGFibGVBUEkuY29sdW1uKGkpLnZpc2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZ25vcmVkQ29sdW1ucy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHsgaW5kZXg6IGksIG5hbWU6IHRoaXMuaGVhZGVyKCkudGV4dENvbnRlbnQsIGxhYmVsOiB0aGlzLmkxOG4ubmFtZSAvKiBIdW1hbi1yZWFkYWJsZSBjb2x1bW4gbmFtZSAqLyB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCAkYnRuR3JvdXAgPSAkKGBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXllXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGApO1xuXG4gICAgICAgICAgICBjb25zdCAkZHJvcGRvd25NZW51ID0gJChgPGRpdiBjbGFzcz1cImRyb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1yaWdodFwiIHN0eWxlPSd3aWR0aDogbWF4LWNvbnRlbnQ7Jz48aDYgY2xhc3M9XCJkcm9wZG93bi1oZWFkZXJcIj5TaG93IENvbHVtbnM8L2g2PjwvZGl2PmApO1xuICAgICAgICAgICAgY29uc3QgJGNoZWNrYm94ZXMgPSAkKGA8ZGl2IGNsYXNzPSdweC00Jz48L2Rpdj5gKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gY29sdW1uc1tpXTtcblxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnRzIGNvbHVtbnMgd2l0aCBubyBuYW1lcyB0byBiZSBzZWxlY3RpdmVseSBoaWRkZW4gKGUuZy4sIHRoZSBlbnRpdHkgdW5kZXIgdGhlIGFsbCBhbGVydHMgcGFnZSlcbiAgICAgICAgICAgICAgICBpZihjb2x1bW4ubmFtZSA9PSBcIlwiKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNoZWNrYm94IGFuZCBkZWxlZ2F0ZSBhIGNoYW5nZSBldmVudFxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYHRvZ2dsZS0ke2NvbHVtbi5uYW1lLnNwbGl0KCkuam9pbignXycpfWA7IFxuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGNvbHVtbiBpZCBpdCdzIGluc2lkZSB0aGUgc2F2ZWRDb2x1bW5zIGFycmF5XG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBpcyB0cnVlIHRoZW4gdGhlIGNvbHVtbiBpcyBub3QgaGlkZGVuXG4gICAgICAgICAgICAgICAgY29uc3QgdG9nZ2xlZCA9IHNhdmVkQ29sdW1ucy5pbmRleE9mKGNvbHVtbi5pbmRleCkgPT09IC0xO1xuICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSB0YWJsZUFQSS5jb2x1bW4oY29sdW1uLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29sLnZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0ICRjaGVja2JveCA9ICQoYDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiAkeyh0b2dnbGVkID8gJ2NoZWNrZWQnIDogJycpfSB0eXBlPVwiY2hlY2tib3hcIiBpZD1cIiR7aWR9XCI+YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgJHdyYXBwZXIgPSAkKGBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCIke2lkfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7Y29sdW1uLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgKTtcblxuICAgICAgICAgICAgICAgICRjaGVja2JveC5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJChgLm92ZXJsYXlgKS50b2dnbGUoNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY29sdW1uIEFQSSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gdGFibGVBUEkuY29sdW1uKGNvbHVtbi5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICBjb2wudmlzaWJsZSghY29sLnZpc2libGUoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZSA9IGNvbC52aXNpYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlkZGVuQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnNlcnQgaW5zaWRlIHRoZSBhcnJheSBvbmx5IHRoZSBoaWRkZW4gY29sdW1uc1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUFQSS5jb2x1bW5zKCkuZXZlcnkoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlQVBJLmNvbHVtbihpKS52aXNpYmxlKCkgfHwgaWdub3JlZENvbHVtbnMuaW5kZXhPZihpKSAhPT0gLTEpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbkNvbHVtbnMucHVzaChpKTsgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgdGhlIHRhYmxlIHZpZXcgaW5zaWRlIHJlZGlzXG4gICAgICAgICAgICAgICAgICAgICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL2RhdGF0YWJsZV9jb2x1bW5zLmx1YWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NhdmUnLCB0YWJsZTogdGFibGVJRCwgY29sdW1uczogaGlkZGVuQ29sdW1ucy5qb2luKCcsJyksIGNzcmY6IHdpbmRvdy5fX0NTUkZfREFUQVRBQkxFX19cbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvZ2dsZUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNhbGxiYWNrKGNvbCwgdmlzaWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHdyYXBwZXIucHJlcGVuZCgkY2hlY2tib3gpO1xuICAgICAgICAgICAgICAgICRjaGVja2JveGVzLmFwcGVuZCgkd3JhcHBlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRkcm9wZG93bk1lbnUub24oXCJjbGljay5icy5kcm9wZG93blwiLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyB9KTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBuZXcgbm9kZSBpbnNpZGUgdGhlIGRhdGF0YWJsZVxuICAgICAgICAgICAgJGJ0bkdyb3VwLmFwcGVuZCgkZHJvcGRvd25NZW51LmFwcGVuZCgkY2hlY2tib3hlcykpO1xuICAgICAgICAgICAgJGRhdGF0YWJsZVdyYXBwZXIuZmluZCgnLmR0LXNlYXJjaCcpLnBhcmVudCgpLmFwcGVuZCgkYnRuR3JvdXApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2xvYWRDb2x1bW5zVmlzaWJpbGl0eSh0YWJsZUFQSSkge1xuICAgICAgICBjb25zdCB0YWJsZUlEID0gdGFibGVBUEkudGFibGUoKS5ub2RlKCkuaWQ7XG4gICAgICAgIHJldHVybiAkLmdldChgJHtodHRwX3ByZWZpeH0vbHVhL2RhdGF0YWJsZV9jb2x1bW5zLmx1YT90YWJsZT0ke3RhYmxlSUR9JmFjdGlvbj1sb2FkYCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVSZW5kZXJzIHtcblxuICAgIHN0YXRpYyBhbGVydFNldmVyaXR5QW5kVHlwZShzZXZlcml0eSwgdHlwZSwgYWxlcnQpIHtcbiAgICAgICAgcmV0dXJuIGAke0RhdGFUYWJsZVJlbmRlcnMuZm9ybWF0VmFsdWVMYWJlbChzZXZlcml0eSwgdHlwZSwgYWxlcnQpfSAke0RhdGFUYWJsZVJlbmRlcnMuZm9ybWF0VmFsdWVMYWJlbChhbGVydC5hbGVydF9pZCwgdHlwZSwgYWxlcnQpfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGhpZGVJZlplcm8ob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBsZXQgY29sb3IgPSAob2JqLmNvbG9yICE9PSB1bmRlZmluZWQgPyBvYmouY29sb3IgOiBcIiNhYWFcIik7XG4gICAgICAgIGxldCB2YWx1ZSA9IChvYmoudmFsdWUgIT09IHVuZGVmaW5lZCA/IG9iai52YWx1ZSA6IG9iaik7XG4gICAgICAgIGlmICh0eXBlID09PSBcImRpc3BsYXlcIiAmJiBwYXJzZUludCh2YWx1ZSkgPT09IDApIGNvbG9yID0gXCIjYWFhXCI7XG4gICAgICAgIGxldCBzcGFuID0gYDxzcGFuIHN0eWxlPSdjb2xvcjogJHtjb2xvcn0nPiR7TnRvcFV0aWxzLmZpbnQodmFsdWUpfTwvc3Bhbj5gO1xuICAgICAgICBpZiAob2JqLnVybCAhPT0gdW5kZWZpbmVkKSBzcGFuID0gYDxhIGhyZWY9XCIke29iai51cmx9XCI+JHtzcGFufTwvYT5gO1xuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2Vjb25kc1RvVGltZShzZWNvbmRzLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJkaXNwbGF5XCIpIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShzZWNvbmRzKTtcbiAgICAgICAgcmV0dXJuIHNlY29uZHM7XG4gICAgfVxuXG4gICAgc3RhdGljIGZpbHRlcml6ZShrZXksIHZhbHVlLCBsYWJlbCwgdGFnX2xhYmVsLCB0aXRsZSwgaHRtbCwgaXNfc25tcF9pcCwgaXApIHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0nJHtrZXl9JyB0aXRsZT0nJHt0aXRsZSB8fCB2YWx1ZX0nIGRhdGEtdGFnLXZhbHVlPScke3ZhbHVlfScgZGF0YS10YWctbGFiZWw9JyR7dGFnX2xhYmVsIHx8IGxhYmVsIHx8IHZhbHVlfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz4ke2h0bWwgfHwgbGFiZWwgfHwgdmFsdWV9PC9hPmA7XG4gICAgICAgIGlmKGlzX3NubXBfaXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYoaXNfc25tcF9pcCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9kZXZpY2VfZGV0YWlscy5sdWE/aG9zdD0ke3ZhbHVlfWApO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ICs9IGAgPGEgaHJlZj0nJHt1cmx9J2RhdGEtYnMtdG9nZ2xlPSd0b29sdGlwJyB0aXRsZT0nJz48aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvYT5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlwICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7aXB9JnNubXBfcG9ydF9pZHg9JHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgIDxhIGhyZWY9JyR7dXJsfSdkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFZhbHVlTGFiZWwob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgIGxldCBjZWxsID0gb2JqLmxhYmVsO1xuICAgICAgICBpZiAoemVyb19pc19udWxsID09IHRydWUgJiYgb2JqLnZhbHVlID09IDApIHtcbiAgICAgICAgICAgIGNlbGwgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRDYXRlZ29yeShvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgbGV0IGNlbGwgPSBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0nYWxlcnRfY2F0ZWdvcnknIGRhdGEtdGFnLXZhbHVlPScke29iai52YWx1ZX0nIGRhdGEtdGFnLWxhYmVsPScke29iai5sYWJlbH0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+PGkgY2xhc3M9XCJmYSBmYXMgJHtvYmouaWNvbn1cIiB0aXRsZT1cIiR7b2JqLmxhYmVsfVwiPjwvaT48L2E+YDtcbiAgICAgICAgaWYgKHplcm9faXNfbnVsbCA9PSB0cnVlICYmIG9iai52YWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICBjZWxsID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U2NvcmUob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgIGxldCBjZWxsID0gb2JqLmxhYmVsO1xuICAgICAgICBpZiAoemVyb19pc19udWxsID09IHRydWUgJiYgb2JqLnZhbHVlID09IDApIHtcbiAgICAgICAgICAgIGNlbGwgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0nc2NvcmUnIHRpdGxlPScke29iai5sYWJlbH0nIGRhdGEtdGFnLXZhbHVlPScke29iai52YWx1ZX0nIGRhdGEtdGFnLWxhYmVsPScke29iai5sYWJlbH0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtjZWxsfTwvYT5gO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRNZXNzYWdlKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICAgICBcbiAgICAgICAgbGV0IGNlbGwgPSBvYmouZGVzY3I7XG4gICAgICAgIGlmIChvYmouc2hvcnRlbl9kZXNjcilcbiAgICAgICAgICAgIGNlbGwgPSBgPHNwYW4gdGl0bGU9XCIke29iai5kZXNjcn1cIj4ke29iai5zaG9ydGVuX2Rlc2NyfTwvc3Bhbj5gO1xuXG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRUcmFmZmljKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnRvdGFsX2J5dGVzO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdHJhZmZpYyA9IGAke050b3BVdGlscy5mb3JtYXRQYWNrZXRzKG9iai50b3RhbF9wYWNrZXRzKX0gLyAke050b3BVdGlscy5ieXRlc1RvVm9sdW1lKG9iai50b3RhbF9ieXRlcyl9YFxuICAgICAgICByZXR1cm4gdHJhZmZpYztcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U3VidHlwZShvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcblxuICAgICAgICBsZXQgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3VidHlwZScsIG9iaiwgb2JqKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7IFxuICAgIH1cblxuICAgIHN0YXRpYyBmaWx0ZXJpemVfMihrZXksIHZhbHVlLCBsYWJlbCwgdGFnX2xhYmVsLCB0aXRsZSwgaHRtbCkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodmFsdWUgPT0gMCAmJiAobGFiZWwgPT0gbnVsbCB8fCBsYWJlbCA9PSBcIlwiKSkpIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PScke2tleX0nIHRpdGxlPScke3RpdGxlIHx8IHZhbHVlfScgZGF0YS10YWctdmFsdWU9JyR7dmFsdWV9JyBkYXRhLXRhZy1sYWJlbD0nJHt0YWdfbGFiZWwgfHwgbGFiZWwgfHwgdmFsdWV9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPiR7aHRtbCB8fCBsYWJlbCB8fCB2YWx1ZX08L2E+YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0Rm9ybWF0R2VuZXJpY0ZpZWxkKGZpZWxkLCB6ZXJvX2lzX251bGwpIHsgICAgICAgIFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgICAgIGlmICh6ZXJvX2lzX251bGwgPT0gdHJ1ZSAmJiBvYmo/LnZhbHVlID09IDApIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgICAgICAgICBsZXQgaHRtbF9yZWYgPSAnJztcbiAgICAgICAgICAgIGlmIChvYmoucmVmZXJlbmNlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgaHRtbF9yZWYgPSBvYmoucmVmZXJlbmNlXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZV8yKGZpZWxkLCByb3dbZmllbGRdLnZhbHVlLCByb3dbZmllbGRdLmxhYmVsLCByb3dbZmllbGRdLmxhYmVsLCByb3dbZmllbGRdLmxhYmVsKTtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbCArICcgJyArIGh0bWxfcmVmO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFNOTVBJbnRlcmZhY2Uob2JqLCB0eXBlLCByb3cpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzbm1wX2ludGVyZmFjZScsIG9iai52YWx1ZSwgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbCxudWxsLGZhbHNlLCByb3cuaXApO1xuICAgICAgICBpZiAob2JqLmNvbG9yKSBjZWxsID0gYDxzcGFuIGNsYXNzPSdmb250LXdlaWdodC1ib2xkJyBzdHlsZT0nY29sb3I6ICR7b2JqLmNvbG9yfSc+JHtjZWxsfTwvc3Bhbj5gO1xuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U05NUElQKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2lwJywgb2JqLCBvYmosIG9iaiwgb2JqLCBudWxsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0TmV0d29yayhvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcbiAgICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCduZXR3b3JrX25hbWUnLCBvYmosIG9iaiwgb2JqLCBvYmosIG51bGwsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0UHJvYmVJUChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcblxuICAgICAgICBsZXQgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncHJvYmVfaXAnLCBvYmoudmFsdWUsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsOyBcbiAgICB9XG4gICBcbiAgICBzdGF0aWMgZm9ybWF0SG9zdChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIGxldCBodG1sX3JlZiA9ICcnO1xuICAgICAgICBpZiAob2JqLnJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICBodG1sX3JlZiA9IG9iai5yZWZlcmVuY2U7XG4gICAgICAgIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgICAgICAgbGV0IGhvc3RLZXksIGhvc3RWYWx1ZTtcbiAgICAgICAgaWYgKG9iai5sYWJlbCAmJiBvYmoubGFiZWwgIT0gb2JqLnZhbHVlKSB7XG4gICAgICAgICAgICBob3N0S2V5ID0gXCJuYW1lXCI7XG4gICAgICAgICAgICBob3N0VmFsdWUgPSBvYmoubGFiZWxfbG9uZztcbiAgICAgICAgICAgIGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ25hbWUnLCBvYmoubGFiZWxfbG9uZywgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbF9sb25nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhvc3RLZXkgPSBcImlwXCI7XG4gICAgICAgICAgICBob3N0VmFsdWUgPSBvYmoudmFsdWU7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdpcCcsIG9iai52YWx1ZSwgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbF9sb25nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3cudmxhbl9pZCAmJiByb3cudmxhbl9pZCAhPSBcIlwiICYmIHJvdy52bGFuX2lkICE9IFwiMFwiKSB7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKGhvc3RLZXksIGAke2hvc3RWYWx1ZX1AJHtyb3cudmxhbl9pZH1gLCBgJHtvYmoubGFiZWx9QCR7cm93LnZsYW5faWR9YCwgYCR7b2JqLmxhYmVsfUAke3Jvdy52bGFuX2lkfWAsIGAke29iai5sYWJlbF9sb25nfUAke3Jvdy52bGFuX2lkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iai5jb3VudHJ5KVxuICAgICAgICAgICAgbGFiZWwgPSBsYWJlbCArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjb3VudHJ5Jywgb2JqLmNvdW50cnksIG9iai5jb3VudHJ5LCBvYmouY291bnRyeSwgb2JqLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBvYmouY291bnRyeS50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvYT4gJyk7XG5cbiAgICAgICAgaWYgKHJvdy5yb2xlICYmIHJvdy5yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgcm93LnJvbGUudmFsdWUsIFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLXNrdWxsXCIgdGl0bGU9XCInK3Jvdy5yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnJvbGUubGFiZWwpO1xuICAgICAgICBlbHNlIGlmIChyb3cucm9sZSAmJiByb3cucm9sZS52YWx1ZSA9PSAndmljdGltJylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCByb3cucm9sZS52YWx1ZSxcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cucm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlLmxhYmVsKTtcblxuICAgICAgICBpZiAocm93LnJvbGVfY2xpX3NydiAmJiByb3cucm9sZV9jbGlfc3J2LnZhbHVlID09ICdjbGllbnQnKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZV9jbGlfc3J2Jywgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSwgXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIiB0aXRsZT1cIicrcm93LnJvbGVfY2xpX3Nydi5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlX2NsaV9zcnYubGFiZWwpO1xuICAgICAgICBlbHNlIGlmIChyb3cucm9sZV9jbGlfc3J2ICYmIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUgPT0gJ3NlcnZlcicpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlX2NsaV9zcnYnLCByb3cucm9sZV9jbGlfc3J2LnZhbHVlLFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIiB0aXRsZT1cIicrcm93LnJvbGVfY2xpX3Nydi5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlX2NsaV9zcnYubGFiZWwpO1xuXG4gICAgICAgIHJldHVybiBsYWJlbCArICcgJyArIGh0bWxfcmVmOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZmlsdGVyaXplVmxhbihmbG93LCByb3csIGtleSwgdmFsdWUsIGxhYmVsLCB0aXRsZSkge1xuICAgICAgICBsZXQgdmFsdWVWbGFuID0gdmFsdWU7XG4gIGxldCBsYWJlbFZsYW4gPSBsYWJlbDtcbiAgICAgICAgbGV0IHRpdGxlVmxhbiA9IHRpdGxlO1xuICAgICAgICBpZiAoZmxvdy52bGFuICYmIGZsb3cudmxhbi52YWx1ZSAhPSAwKSB7XG4gICAgICAgICAgICB2YWx1ZVZsYW4gPSBgJHt2YWx1ZX1AJHtmbG93LnZsYW4udmFsdWV9YDtcbiAgICAgICAgICAgIGxhYmVsVmxhbiA9IGAke2xhYmVsfUAke2Zsb3cudmxhbi5sYWJlbH1gO1xuICAgICAgICAgICAgdGl0bGVWbGFuID0gYCR7dGl0bGV9QCR7Zmxvdy52bGFuLnRpdGxlfWA7XG4gICAgICAgIH1cbiAgICAgIGxhYmVsVmxhbiA9IE50b3BVdGlscy5zaG9ydGVuTGFiZWwobGFiZWxWbGFuLCAxNiwgXCIuXCIpXG4gICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoa2V5LCB2YWx1ZVZsYW4sIGxhYmVsVmxhbiwgbGFiZWxWbGFuLCB0aXRsZVZsYW4pOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0Rmxvd1R1cGxlKGZsb3csIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICBsZXQgYWN0aXZlX3JlZiA9IChmbG93LmFjdGl2ZV91cmwgPyBgPGEgaHJlZj1cIiR7Zmxvdy5hY3RpdmVfdXJsfVwiPjxpIGNsYXNzPVwiZmFzIGZhLXN0cmVhbVwiPjwvaT48L2E+YCA6IFwiXCIpO1xuICAgICAgICBsZXQgY2xpTGFiZWwgPSBcIlwiO1xuICAgICAgICBpZiAoZmxvdy5jbGlfaXAubmFtZSkge1xuICAgICAgICAgIGxldCB0aXRsZSA9IFwiXCI7XG4gICAgICAgICAgICBpZihmbG93LmNsaV9pcC5sYWJlbF9sb25nKSB0aXRsZSA9IGZsb3cuY2xpX2lwLnZhbHVlICsgXCIgW1wiICsgZmxvdy5jbGlfaXAubGFiZWxfbG9uZyArIFwiXVwiO1xuICAgICAgICAgICAgY2xpTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnY2xpX25hbWUnLCBmbG93LmNsaV9pcC5uYW1lLCBmbG93LmNsaV9pcC5sYWJlbCwgdGl0bGUpOyBcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBjbGlMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdjbGlfaXAnLCBmbG93LmNsaV9pcC52YWx1ZSwgZmxvdy5jbGlfaXAubGFiZWwsIGZsb3cuY2xpX2lwLmxhYmVsX2xvbmcpOyBcblxuICAgICAgICBsZXQgY2xpRmxhZ0xhYmVsPSAnJ1xuXG4gICAgICAgIGlmIChmbG93LmNsaV9pcC5jb3VudHJ5ICYmIGZsb3cuY2xpX2lwLmNvdW50cnkgIT09IFwibmlsXCIpXG4gICAgICAgICAgICBjbGlGbGFnTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnY2xpX2NvdW50cnknLCBmbG93LmNsaV9pcC5jb3VudHJ5LCBmbG93LmNsaV9pcC5jb3VudHJ5LCBmbG93LmNsaV9pcC5jb3VudHJ5LCBmbG93LmNsaV9pcC5jb3VudHJ5LCAnIDxpbWcgc3JjPVwiJyArIGh0dHBfcHJlZml4ICsgJy9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0nICsgZmxvdy5jbGlfaXAuY291bnRyeS50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvYT4gJyk7XG5cbiAgICAgICAgbGV0IGNsaVBvcnRMYWJlbCA9ICgoZmxvdy5jbGlfcG9ydCAmJiBmbG93LmNsaV9wb3J0ID4gMCkgPyBcIjpcIitEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnY2xpX3BvcnQnLCBmbG93LmNsaV9wb3J0LCBmbG93LmNsaV9wb3J0KSA6IFwiXCIpO1xuXG4gICAgICAgIGxldCBjbGlCbGFja2xpc3RlZCA9JydcbiAgICAgICAgaWYoZmxvdy5jbGlfaXAuYmxhY2tsaXN0ZWQgPT0gdHJ1ZSkgXG4gICAgICAgICAgY2xpQmxhY2tsaXN0ZWQgPSBcIiA8aSBjbGFzcz1cXCdmYXMgZmEtYmFuIGZhLXNtXFwnIHRpdGxlPVxcJ1wiICsgaTE4bihcImhvc3RzX3N0YXRzLmJsYWNrbGlzdGVkXCIpICsgXCJcXCc+PC9pPlwiXG5cbiAgICAgICAgbGV0IHNydkxhYmVsID0gXCJcIlxuICAgICAgICBpZiAoZmxvdy5zcnZfaXAubmFtZSkge1xuICAgICAgICAgIGxldCB0aXRsZSA9IFwiXCI7XG4gICAgICAgICAgaWYoZmxvdy5zcnZfaXAubGFiZWxfbG9uZykgdGl0bGUgPSBmbG93LnNydl9pcC52YWx1ZSArIFwiIFtcIiArIGZsb3cuc3J2X2lwLmxhYmVsX2xvbmcgKyBcIl1cIjtcbiAgICAgICAgICAgIHNydkxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ3Nydl9uYW1lJywgZmxvdy5zcnZfaXAubmFtZSwgZmxvdy5zcnZfaXAubGFiZWwsIHRpdGxlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBzcnZMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdzcnZfaXAnLCBmbG93LnNydl9pcC52YWx1ZSwgZmxvdy5zcnZfaXAubGFiZWwsIGZsb3cuc3J2X2lwLmxhYmVsX2xvbmcpO1xuICAgICAgICBsZXQgc3J2UG9ydExhYmVsID0gKChmbG93LnNydl9wb3J0ICYmIGZsb3cuc3J2X3BvcnQgPiAwKSA/IFwiOlwiK0RhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzcnZfcG9ydCcsIGZsb3cuc3J2X3BvcnQsIGZsb3cuc3J2X3BvcnQpIDogXCJcIik7XG5cbiAgICAgICAgbGV0IHNydkZsYWdMYWJlbD0gJydcblxuICAgICAgICBpZiAoZmxvdy5zcnZfaXAuY291bnRyeSAmJiBmbG93LnNydl9pcC5jb3VudHJ5ICE9PSBcIm5pbFwiKVxuICAgICAgICAgICAgc3J2RmxhZ0xhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3Nydl9jb3VudHJ5JywgZmxvdy5zcnZfaXAuY291bnRyeSwgZmxvdy5zcnZfaXAuY291bnRyeSwgZmxvdy5zcnZfaXAuY291bnRyeSwgZmxvdy5zcnZfaXAuY291bnRyeSwgJyA8aW1nIHNyYz1cIicgKyBodHRwX3ByZWZpeCArICcvZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJyArIGZsb3cuc3J2X2lwLmNvdW50cnkudG9Mb3dlckNhc2UoKSArICdcIj48L2E+ICcpO1xuXG4gICAgICAgIGxldCBzcnZCbGFja2xpc3RlZCA9JydcbiAgICAgICAgaWYoZmxvdy5zcnZfaXAuYmxhY2tsaXN0ZWQgPT0gdHJ1ZSkgXG4gICAgICAgICAgc3J2QmxhY2tsaXN0ZWQgPSBcIiA8aSBjbGFzcz1cXCdmYXMgZmEtYmFuIGZhLXNtXFwnIHRpdGxlPVxcJ1wiICsgaTE4bihcImhvc3RzX3N0YXRzLmJsYWNrbGlzdGVkXCIpICsgXCJcXCc+PC9pPlwiXG4gICAgXG4gICAgICAgIGxldCBjbGlJY29ucyA9IFwiXCI7XG4gICAgICAgIGxldCBzcnZJY29ucyA9IFwiXCI7XG4gICAgICAgIGlmIChyb3cuY2xpX3JvbGUpIHtcbiAgICAgICAgICAgIGlmIChyb3cuY2xpX3JvbGUudmFsdWUgPT0gJ2F0dGFja2VyJylcbiAgICAgICAgICAgICAgICBjbGlJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICdhdHRhY2tlcicsICc8aSBjbGFzcz1cImZhcyBmYS1za3VsbFwiIHRpdGxlPVwiJytyb3cuY2xpX3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuY2xpX3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHJvdy5jbGlfcm9sZS52YWx1ZSA9PSAndmljdGltJylcbiAgICAgICAgICAgICAgICBjbGlJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICd2aWN0aW0nLCAgJzxpIGNsYXNzPVwiZmFzIGZhLXNhZC10ZWFyXCIgdGl0bGU9XCInK3Jvdy5jbGlfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5jbGlfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdy5zcnZfcm9sZSkge1xuICAgICAgICAgICAgaWYgKHJvdy5zcnZfcm9sZS52YWx1ZSA9PSAnYXR0YWNrZXInKVxuICAgICAgICAgICAgICAgIHNydkljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ2F0dGFja2VyJywgJzxpIGNsYXNzPVwiZmFzIGZhLXNrdWxsXCIgdGl0bGU9XCInK3Jvdy5zcnZfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5zcnZfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICAgICAgZWxzZSBpZiAocm93LnNydl9yb2xlLnZhbHVlID09ICd2aWN0aW0nKVxuICAgICAgICAgICAgICAgIHNydkljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ3ZpY3RpbScsICAnPGkgY2xhc3M9XCJmYXMgZmEtc2FkLXRlYXJcIiB0aXRsZT1cIicrcm93LnNydl9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnNydl9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYCR7YWN0aXZlX3JlZn0gJHtjbGlMYWJlbH0ke2NsaUJsYWNrbGlzdGVkfSR7Y2xpRmxhZ0xhYmVsfSR7Y2xpUG9ydExhYmVsfSAke2NsaUljb25zfSAke2Zsb3cuY2xpX2lwLnJlZmVyZW5jZX0gPGkgY2xhc3M9XCJmYXMgZmEtZXhjaGFuZ2UtYWx0IGZhLWxnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiAke3NydkxhYmVsfSR7c3J2QmxhY2tsaXN0ZWR9JHtzcnZGbGFnTGFiZWx9JHtzcnZQb3J0TGFiZWx9ICR7c3J2SWNvbnN9ICR7Zmxvdy5zcnZfaXAucmVmZXJlbmNlfWA7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFN1YnR5cGVWYWx1ZUxhYmVsKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLm5hbWU7XG4gICAgICAgIGxldCBtc2cgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3VidHlwZScsIG9iai52YWx1ZSwgb2JqLm5hbWUsIG9iai5mdWxsbmFtZSwgb2JqLmZ1bGxuYW1lKTtcblxuICAgICAgICByZXR1cm4gbXNnO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXROYW1lRGVzY3JpcHRpb24ob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgbGV0IG1zZyA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdhbGVydF9pZCcsIG9iai52YWx1ZSwgb2JqLm5hbWUsIG9iai5mdWxsbmFtZSwgb2JqLmZ1bGxuYW1lKTtcblxuICAgICAgICByZXR1cm4gbXNnO1xuICAgIH1cblxuICAgIHN0YXRpYyBhcHBseUNlbGxTdHlsZShjZWxsLCBjZWxsRGF0YSwgcm93RGF0YSwgcm93SW5kZXgsIGNvbEluZGV4KSB7XG4gICAgICBpZiAoY2VsbERhdGEuaGlnaGxpZ2h0KSB7XG4gICAgICAgICAkKGNlbGwpLmNzcyhcImJvcmRlci1sZWZ0XCIsIFwiNXB4IHNvbGlkIFwiK2NlbGxEYXRhLmhpZ2hsaWdodCk7XG4gICAgICB9XG4gICB9XG59XG4iLCJmdW5jdGlvbiBlKGUsdCl7Y29uc3Qgbj1PYmplY3QuY3JlYXRlKG51bGwpLG89ZS5zcGxpdChcIixcIik7Zm9yKGxldCByPTA7cjxvLmxlbmd0aDtyKyspbltvW3JdXT0hMDtyZXR1cm4gdD9lPT4hIW5bZS50b0xvd2VyQ2FzZSgpXTplPT4hIW5bZV19Y29uc3QgdD1lKFwiSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50XCIpLG49ZShcIml0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seVwiKTtmdW5jdGlvbiBvKGUpe3JldHVybiEhZXx8XCJcIj09PWV9ZnVuY3Rpb24gcihlKXtpZihFKGUpKXtjb25zdCB0PXt9O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBvPWVbbl0scz1QKG8pP2wobyk6cihvKTtpZihzKWZvcihjb25zdCBlIGluIHMpdFtlXT1zW2VdfXJldHVybiB0fXJldHVybiBQKGUpfHxNKGUpP2U6dm9pZCAwfWNvbnN0IHM9LzsoPyFbXihdKlxcKSkvZyxpPS86KC4rKS87ZnVuY3Rpb24gbChlKXtjb25zdCB0PXt9O3JldHVybiBlLnNwbGl0KHMpLmZvckVhY2goKGU9PntpZihlKXtjb25zdCBuPWUuc3BsaXQoaSk7bi5sZW5ndGg+MSYmKHRbblswXS50cmltKCldPW5bMV0udHJpbSgpKX19KSksdH1mdW5jdGlvbiBjKGUpe2xldCB0PVwiXCI7aWYoUChlKSl0PWU7ZWxzZSBpZihFKGUpKWZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBvPWMoZVtuXSk7byYmKHQrPW8rXCIgXCIpfWVsc2UgaWYoTShlKSlmb3IoY29uc3QgbiBpbiBlKWVbbl0mJih0Kz1uK1wiIFwiKTtyZXR1cm4gdC50cmltKCl9ZnVuY3Rpb24gYShlKXtpZighZSlyZXR1cm4gbnVsbDtsZXR7Y2xhc3M6dCxzdHlsZTpufT1lO3JldHVybiB0JiYhUCh0KSYmKGUuY2xhc3M9Yyh0KSksbiYmKGUuc3R5bGU9cihuKSksZX1jb25zdCB1PWUoXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucyxjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSxzdW1tYXJ5LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290XCIpLHA9ZShcInN2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSxkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLGZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCxmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLGZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzayxtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4scG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXdcIiksZj1lKFwiYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnJcIik7ZnVuY3Rpb24gZChlLHQpe2lmKGU9PT10KXJldHVybiEwO2xldCBuPVIoZSksbz1SKHQpO2lmKG58fG8pcmV0dXJuISghbnx8IW8pJiZlLmdldFRpbWUoKT09PXQuZ2V0VGltZSgpO2lmKG49QShlKSxvPUEodCksbnx8bylyZXR1cm4gZT09PXQ7aWYobj1FKGUpLG89RSh0KSxufHxvKXJldHVybiEoIW58fCFvKSYmZnVuY3Rpb24oZSx0KXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2xldCBuPSEwO2ZvcihsZXQgbz0wO24mJm88ZS5sZW5ndGg7bysrKW49ZChlW29dLHRbb10pO3JldHVybiBufShlLHQpO2lmKG49TShlKSxvPU0odCksbnx8byl7aWYoIW58fCFvKXJldHVybiExO2lmKE9iamVjdC5rZXlzKGUpLmxlbmd0aCE9PU9iamVjdC5rZXlzKHQpLmxlbmd0aClyZXR1cm4hMTtmb3IoY29uc3QgbiBpbiBlKXtjb25zdCBvPWUuaGFzT3duUHJvcGVydHkobikscj10Lmhhc093blByb3BlcnR5KG4pO2lmKG8mJiFyfHwhbyYmcnx8IWQoZVtuXSx0W25dKSlyZXR1cm4hMX19cmV0dXJuIFN0cmluZyhlKT09PVN0cmluZyh0KX1mdW5jdGlvbiBoKGUsdCl7cmV0dXJuIGUuZmluZEluZGV4KChlPT5kKGUsdCkpKX1jb25zdCBtPWU9PlAoZSk/ZTpudWxsPT1lP1wiXCI6RShlKXx8TShlKSYmKGUudG9TdHJpbmc9PT1JfHwhRihlLnRvU3RyaW5nKSk/SlNPTi5zdHJpbmdpZnkoZSxnLDIpOlN0cmluZyhlKSxnPShlLHQpPT50JiZ0Ll9fdl9pc1JlZj9nKGUsdC52YWx1ZSk6JCh0KT97W2BNYXAoJHt0LnNpemV9KWBdOlsuLi50LmVudHJpZXMoKV0ucmVkdWNlKCgoZSxbdCxuXSk9PihlW2Ake3R9ID0+YF09bixlKSkse30pfTpPKHQpP3tbYFNldCgke3Quc2l6ZX0pYF06Wy4uLnQudmFsdWVzKCldfTohTSh0KXx8RSh0KXx8TCh0KT90OlN0cmluZyh0KSx2PXt9LHk9W10sXz0oKT0+e30sYj0oKT0+ITEsUz0vXm9uW15hLXpdLyx4PWU9PlMudGVzdChlKSxDPWU9PmUuc3RhcnRzV2l0aChcIm9uVXBkYXRlOlwiKSx3PU9iamVjdC5hc3NpZ24saz0oZSx0KT0+e2NvbnN0IG49ZS5pbmRleE9mKHQpO24+LTEmJmUuc3BsaWNlKG4sMSl9LFQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxOPShlLHQpPT5ULmNhbGwoZSx0KSxFPUFycmF5LmlzQXJyYXksJD1lPT5cIltvYmplY3QgTWFwXVwiPT09QihlKSxPPWU9PlwiW29iamVjdCBTZXRdXCI9PT1CKGUpLFI9ZT0+XCJbb2JqZWN0IERhdGVdXCI9PT1CKGUpLEY9ZT0+XCJmdW5jdGlvblwiPT10eXBlb2YgZSxQPWU9Plwic3RyaW5nXCI9PXR5cGVvZiBlLEE9ZT0+XCJzeW1ib2xcIj09dHlwZW9mIGUsTT1lPT5udWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUsVj1lPT5NKGUpJiZGKGUudGhlbikmJkYoZS5jYXRjaCksST1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLEI9ZT0+SS5jYWxsKGUpLEw9ZT0+XCJbb2JqZWN0IE9iamVjdF1cIj09PUIoZSksaj1lPT5QKGUpJiZcIk5hTlwiIT09ZSYmXCItXCIhPT1lWzBdJiZcIlwiK3BhcnNlSW50KGUsMTApPT09ZSxVPWUoXCIsa2V5LHJlZixyZWZfZm9yLHJlZl9rZXksb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLG9uVm5vZGVCZWZvcmVVcGRhdGUsb25Wbm9kZVVwZGF0ZWQsb25Wbm9kZUJlZm9yZVVubW91bnQsb25Wbm9kZVVubW91bnRlZFwiKSxEPWUoXCJiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCxtZW1vXCIpLEg9ZT0+e2NvbnN0IHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gbj0+dFtuXXx8KHRbbl09ZShuKSl9LFc9Ly0oXFx3KS9nLHo9SCgoZT0+ZS5yZXBsYWNlKFcsKChlLHQpPT50P3QudG9VcHBlckNhc2UoKTpcIlwiKSkpKSxLPS9cXEIoW0EtWl0pL2csRz1IKChlPT5lLnJlcGxhY2UoSyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKSkscT1IKChlPT5lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpKSxKPUgoKGU9PmU/YG9uJHtxKGUpfWA6XCJcIikpLFk9KGUsdCk9PiFPYmplY3QuaXMoZSx0KSxaPShlLHQpPT57Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspZVtuXSh0KX0sUT0oZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6bn0pfSxYPWU9Pntjb25zdCB0PXBhcnNlRmxvYXQoZSk7cmV0dXJuIGlzTmFOKHQpP2U6dH07bGV0IGVlO2xldCB0ZTtjbGFzcyBuZXtjb25zdHJ1Y3RvcihlPSExKXt0aGlzLmFjdGl2ZT0hMCx0aGlzLmVmZmVjdHM9W10sdGhpcy5jbGVhbnVwcz1bXSwhZSYmdGUmJih0aGlzLnBhcmVudD10ZSx0aGlzLmluZGV4PSh0ZS5zY29wZXN8fCh0ZS5zY29wZXM9W10pKS5wdXNoKHRoaXMpLTEpfXJ1bihlKXtpZih0aGlzLmFjdGl2ZSl7Y29uc3QgdD10ZTt0cnl7cmV0dXJuIHRlPXRoaXMsZSgpfWZpbmFsbHl7dGU9dH19fW9uKCl7dGU9dGhpc31vZmYoKXt0ZT10aGlzLnBhcmVudH1zdG9wKGUpe2lmKHRoaXMuYWN0aXZlKXtsZXQgdCxuO2Zvcih0PTAsbj10aGlzLmVmZmVjdHMubGVuZ3RoO3Q8bjt0KyspdGhpcy5lZmZlY3RzW3RdLnN0b3AoKTtmb3IodD0wLG49dGhpcy5jbGVhbnVwcy5sZW5ndGg7dDxuO3QrKyl0aGlzLmNsZWFudXBzW3RdKCk7aWYodGhpcy5zY29wZXMpZm9yKHQ9MCxuPXRoaXMuc2NvcGVzLmxlbmd0aDt0PG47dCsrKXRoaXMuc2NvcGVzW3RdLnN0b3AoITApO2lmKHRoaXMucGFyZW50JiYhZSl7Y29uc3QgZT10aGlzLnBhcmVudC5zY29wZXMucG9wKCk7ZSYmZSE9PXRoaXMmJih0aGlzLnBhcmVudC5zY29wZXNbdGhpcy5pbmRleF09ZSxlLmluZGV4PXRoaXMuaW5kZXgpfXRoaXMuYWN0aXZlPSExfX19ZnVuY3Rpb24gb2UoZSl7cmV0dXJuIG5ldyBuZShlKX1mdW5jdGlvbiByZShlLHQ9dGUpe3QmJnQuYWN0aXZlJiZ0LmVmZmVjdHMucHVzaChlKX1mdW5jdGlvbiBzZSgpe3JldHVybiB0ZX1mdW5jdGlvbiBpZShlKXt0ZSYmdGUuY2xlYW51cHMucHVzaChlKX1jb25zdCBsZT1lPT57Y29uc3QgdD1uZXcgU2V0KGUpO3JldHVybiB0Lnc9MCx0Lm49MCx0fSxjZT1lPT4oZS53JmZlKT4wLGFlPWU9PihlLm4mZmUpPjAsdWU9bmV3IFdlYWtNYXA7bGV0IHBlPTAsZmU9MTtsZXQgZGU7Y29uc3QgaGU9U3ltYm9sKFwiXCIpLG1lPVN5bWJvbChcIlwiKTtjbGFzcyBnZXtjb25zdHJ1Y3RvcihlLHQ9bnVsbCxuKXt0aGlzLmZuPWUsdGhpcy5zY2hlZHVsZXI9dCx0aGlzLmFjdGl2ZT0hMCx0aGlzLmRlcHM9W10sdGhpcy5wYXJlbnQ9dm9pZCAwLHJlKHRoaXMsbil9cnVuKCl7aWYoIXRoaXMuYWN0aXZlKXJldHVybiB0aGlzLmZuKCk7bGV0IGU9ZGUsdD1iZTtmb3IoO2U7KXtpZihlPT09dGhpcylyZXR1cm47ZT1lLnBhcmVudH10cnl7cmV0dXJuIHRoaXMucGFyZW50PWRlLGRlPXRoaXMsYmU9ITAsZmU9MTw8KytwZSxwZTw9MzA/KCh7ZGVwczplfSk9PntpZihlLmxlbmd0aClmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLnd8PWZlfSkodGhpcyk6dmUodGhpcyksdGhpcy5mbigpfWZpbmFsbHl7cGU8PTMwJiYoZT0+e2NvbnN0e2RlcHM6dH09ZTtpZih0Lmxlbmd0aCl7bGV0IG49MDtmb3IobGV0IG89MDtvPHQubGVuZ3RoO28rKyl7Y29uc3Qgcj10W29dO2NlKHIpJiYhYWUocik/ci5kZWxldGUoZSk6dFtuKytdPXIsci53Jj1+ZmUsci5uJj1+ZmV9dC5sZW5ndGg9bn19KSh0aGlzKSxmZT0xPDwtLXBlLGRlPXRoaXMucGFyZW50LGJlPXQsdGhpcy5wYXJlbnQ9dm9pZCAwLHRoaXMuZGVmZXJTdG9wJiZ0aGlzLnN0b3AoKX19c3RvcCgpe2RlPT09dGhpcz90aGlzLmRlZmVyU3RvcD0hMDp0aGlzLmFjdGl2ZSYmKHZlKHRoaXMpLHRoaXMub25TdG9wJiZ0aGlzLm9uU3RvcCgpLHRoaXMuYWN0aXZlPSExKX19ZnVuY3Rpb24gdmUoZSl7Y29uc3R7ZGVwczp0fT1lO2lmKHQubGVuZ3RoKXtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKyl0W25dLmRlbGV0ZShlKTt0Lmxlbmd0aD0wfX1mdW5jdGlvbiB5ZShlLHQpe2UuZWZmZWN0JiYoZT1lLmVmZmVjdC5mbik7Y29uc3Qgbj1uZXcgZ2UoZSk7dCYmKHcobix0KSx0LnNjb3BlJiZyZShuLHQuc2NvcGUpKSx0JiZ0Lmxhenl8fG4ucnVuKCk7Y29uc3Qgbz1uLnJ1bi5iaW5kKG4pO3JldHVybiBvLmVmZmVjdD1uLG99ZnVuY3Rpb24gX2UoZSl7ZS5lZmZlY3Quc3RvcCgpfWxldCBiZT0hMDtjb25zdCBTZT1bXTtmdW5jdGlvbiB4ZSgpe1NlLnB1c2goYmUpLGJlPSExfWZ1bmN0aW9uIENlKCl7Y29uc3QgZT1TZS5wb3AoKTtiZT12b2lkIDA9PT1lfHxlfWZ1bmN0aW9uIHdlKGUsdCxuKXtpZihiZSYmZGUpe2xldCB0PXVlLmdldChlKTt0fHx1ZS5zZXQoZSx0PW5ldyBNYXApO2xldCBvPXQuZ2V0KG4pO298fHQuc2V0KG4sbz1sZSgpKSxrZShvKX19ZnVuY3Rpb24ga2UoZSx0KXtsZXQgbj0hMTtwZTw9MzA/YWUoZSl8fChlLm58PWZlLG49IWNlKGUpKTpuPSFlLmhhcyhkZSksbiYmKGUuYWRkKGRlKSxkZS5kZXBzLnB1c2goZSkpfWZ1bmN0aW9uIFRlKGUsdCxuLG8scixzKXtjb25zdCBpPXVlLmdldChlKTtpZighaSlyZXR1cm47bGV0IGw9W107aWYoXCJjbGVhclwiPT09dClsPVsuLi5pLnZhbHVlcygpXTtlbHNlIGlmKFwibGVuZ3RoXCI9PT1uJiZFKGUpKWkuZm9yRWFjaCgoKGUsdCk9PnsoXCJsZW5ndGhcIj09PXR8fHQ+PW8pJiZsLnB1c2goZSl9KSk7ZWxzZSBzd2l0Y2godm9pZCAwIT09biYmbC5wdXNoKGkuZ2V0KG4pKSx0KXtjYXNlXCJhZGRcIjpFKGUpP2oobikmJmwucHVzaChpLmdldChcImxlbmd0aFwiKSk6KGwucHVzaChpLmdldChoZSkpLCQoZSkmJmwucHVzaChpLmdldChtZSkpKTticmVhaztjYXNlXCJkZWxldGVcIjpFKGUpfHwobC5wdXNoKGkuZ2V0KGhlKSksJChlKSYmbC5wdXNoKGkuZ2V0KG1lKSkpO2JyZWFrO2Nhc2VcInNldFwiOiQoZSkmJmwucHVzaChpLmdldChoZSkpfWlmKDE9PT1sLmxlbmd0aClsWzBdJiZOZShsWzBdKTtlbHNle2NvbnN0IGU9W107Zm9yKGNvbnN0IHQgb2YgbCl0JiZlLnB1c2goLi4udCk7TmUobGUoZSkpfX1mdW5jdGlvbiBOZShlLHQpe2NvbnN0IG49RShlKT9lOlsuLi5lXTtmb3IoY29uc3QgbyBvZiBuKW8uY29tcHV0ZWQmJkVlKG8pO2Zvcihjb25zdCBvIG9mIG4pby5jb21wdXRlZHx8RWUobyl9ZnVuY3Rpb24gRWUoZSx0KXsoZSE9PWRlfHxlLmFsbG93UmVjdXJzZSkmJihlLnNjaGVkdWxlcj9lLnNjaGVkdWxlcigpOmUucnVuKCkpfWNvbnN0ICRlPWUoXCJfX3Byb3RvX18sX192X2lzUmVmLF9faXNWdWVcIiksT2U9bmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpLmZpbHRlcigoZT0+XCJhcmd1bWVudHNcIiE9PWUmJlwiY2FsbGVyXCIhPT1lKSkubWFwKChlPT5TeW1ib2xbZV0pKS5maWx0ZXIoQSkpLFJlPUllKCksRmU9SWUoITEsITApLFBlPUllKCEwKSxBZT1JZSghMCwhMCksTWU9VmUoKTtmdW5jdGlvbiBWZSgpe2NvbnN0IGU9e307cmV0dXJuW1wiaW5jbHVkZXNcIixcImluZGV4T2ZcIixcImxhc3RJbmRleE9mXCJdLmZvckVhY2goKHQ9PntlW3RdPWZ1bmN0aW9uKC4uLmUpe2NvbnN0IG49a3QodGhpcyk7Zm9yKGxldCB0PTAscj10aGlzLmxlbmd0aDt0PHI7dCsrKXdlKG4sMCx0K1wiXCIpO2NvbnN0IG89blt0XSguLi5lKTtyZXR1cm4tMT09PW98fCExPT09bz9uW3RdKC4uLmUubWFwKGt0KSk6b319KSksW1wicHVzaFwiLFwicG9wXCIsXCJzaGlmdFwiLFwidW5zaGlmdFwiLFwic3BsaWNlXCJdLmZvckVhY2goKHQ9PntlW3RdPWZ1bmN0aW9uKC4uLmUpe3hlKCk7Y29uc3Qgbj1rdCh0aGlzKVt0XS5hcHBseSh0aGlzLGUpO3JldHVybiBDZSgpLG59fSkpLGV9ZnVuY3Rpb24gSWUoZT0hMSx0PSExKXtyZXR1cm4gZnVuY3Rpb24obixvLHIpe2lmKFwiX192X2lzUmVhY3RpdmVcIj09PW8pcmV0dXJuIWU7aWYoXCJfX3ZfaXNSZWFkb25seVwiPT09bylyZXR1cm4gZTtpZihcIl9fdl9pc1NoYWxsb3dcIj09PW8pcmV0dXJuIHQ7aWYoXCJfX3ZfcmF3XCI9PT1vJiZyPT09KGU/dD9odDpkdDp0P2Z0OnB0KS5nZXQobikpcmV0dXJuIG47Y29uc3Qgcz1FKG4pO2lmKCFlJiZzJiZOKE1lLG8pKXJldHVybiBSZWZsZWN0LmdldChNZSxvLHIpO2NvbnN0IGk9UmVmbGVjdC5nZXQobixvLHIpO3JldHVybihBKG8pP09lLmhhcyhvKTokZShvKSk/aTooZXx8d2UobiwwLG8pLHQ/aTpSdChpKT9zJiZqKG8pP2k6aS52YWx1ZTpNKGkpP2U/eXQoaSk6Z3QoaSk6aSl9fWZ1bmN0aW9uIEJlKGU9ITEpe3JldHVybiBmdW5jdGlvbih0LG4sbyxyKXtsZXQgcz10W25dO2lmKHh0KHMpJiZSdChzKSYmIVJ0KG8pKXJldHVybiExO2lmKCFlJiYheHQobykmJihDdChvKXx8KG89a3Qobykscz1rdChzKSksIUUodCkmJlJ0KHMpJiYhUnQobykpKXJldHVybiBzLnZhbHVlPW8sITA7Y29uc3QgaT1FKHQpJiZqKG4pP051bWJlcihuKTx0Lmxlbmd0aDpOKHQsbiksbD1SZWZsZWN0LnNldCh0LG4sbyxyKTtyZXR1cm4gdD09PWt0KHIpJiYoaT9ZKG8scykmJlRlKHQsXCJzZXRcIixuLG8pOlRlKHQsXCJhZGRcIixuLG8pKSxsfX1jb25zdCBMZT17Z2V0OlJlLHNldDpCZSgpLGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1OKGUsdCksbz1SZWZsZWN0LmRlbGV0ZVByb3BlcnR5KGUsdCk7cmV0dXJuIG8mJm4mJlRlKGUsXCJkZWxldGVcIix0LHZvaWQgMCksb30saGFzOmZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1SZWZsZWN0LmhhcyhlLHQpO3JldHVybiBBKHQpJiZPZS5oYXModCl8fHdlKGUsMCx0KSxufSxvd25LZXlzOmZ1bmN0aW9uKGUpe3JldHVybiB3ZShlLDAsRShlKT9cImxlbmd0aFwiOmhlKSxSZWZsZWN0Lm93bktleXMoZSl9fSxqZT17Z2V0OlBlLHNldDooZSx0KT0+ITAsZGVsZXRlUHJvcGVydHk6KGUsdCk9PiEwfSxVZT13KHt9LExlLHtnZXQ6RmUsc2V0OkJlKCEwKX0pLERlPXcoe30samUse2dldDpBZX0pLEhlPWU9PmUsV2U9ZT0+UmVmbGVjdC5nZXRQcm90b3R5cGVPZihlKTtmdW5jdGlvbiB6ZShlLHQsbj0hMSxvPSExKXtjb25zdCByPWt0KGU9ZS5fX3ZfcmF3KSxzPWt0KHQpO258fCh0IT09cyYmd2UociwwLHQpLHdlKHIsMCxzKSk7Y29uc3R7aGFzOml9PVdlKHIpLGw9bz9IZTpuP0V0Ok50O3JldHVybiBpLmNhbGwocix0KT9sKGUuZ2V0KHQpKTppLmNhbGwocixzKT9sKGUuZ2V0KHMpKTp2b2lkKGUhPT1yJiZlLmdldCh0KSl9ZnVuY3Rpb24gS2UoZSx0PSExKXtjb25zdCBuPXRoaXMuX192X3JhdyxvPWt0KG4pLHI9a3QoZSk7cmV0dXJuIHR8fChlIT09ciYmd2UobywwLGUpLHdlKG8sMCxyKSksZT09PXI/bi5oYXMoZSk6bi5oYXMoZSl8fG4uaGFzKHIpfWZ1bmN0aW9uIEdlKGUsdD0hMSl7cmV0dXJuIGU9ZS5fX3ZfcmF3LCF0JiZ3ZShrdChlKSwwLGhlKSxSZWZsZWN0LmdldChlLFwic2l6ZVwiLGUpfWZ1bmN0aW9uIHFlKGUpe2U9a3QoZSk7Y29uc3QgdD1rdCh0aGlzKTtyZXR1cm4gV2UodCkuaGFzLmNhbGwodCxlKXx8KHQuYWRkKGUpLFRlKHQsXCJhZGRcIixlLGUpKSx0aGlzfWZ1bmN0aW9uIEplKGUsdCl7dD1rdCh0KTtjb25zdCBuPWt0KHRoaXMpLHtoYXM6byxnZXQ6cn09V2Uobik7bGV0IHM9by5jYWxsKG4sZSk7c3x8KGU9a3QoZSkscz1vLmNhbGwobixlKSk7Y29uc3QgaT1yLmNhbGwobixlKTtyZXR1cm4gbi5zZXQoZSx0KSxzP1kodCxpKSYmVGUobixcInNldFwiLGUsdCk6VGUobixcImFkZFwiLGUsdCksdGhpc31mdW5jdGlvbiBZZShlKXtjb25zdCB0PWt0KHRoaXMpLHtoYXM6bixnZXQ6b309V2UodCk7bGV0IHI9bi5jYWxsKHQsZSk7cnx8KGU9a3QoZSkscj1uLmNhbGwodCxlKSksbyYmby5jYWxsKHQsZSk7Y29uc3Qgcz10LmRlbGV0ZShlKTtyZXR1cm4gciYmVGUodCxcImRlbGV0ZVwiLGUsdm9pZCAwKSxzfWZ1bmN0aW9uIFplKCl7Y29uc3QgZT1rdCh0aGlzKSx0PTAhPT1lLnNpemUsbj1lLmNsZWFyKCk7cmV0dXJuIHQmJlRlKGUsXCJjbGVhclwiLHZvaWQgMCx2b2lkIDApLG59ZnVuY3Rpb24gUWUoZSx0KXtyZXR1cm4gZnVuY3Rpb24obixvKXtjb25zdCByPXRoaXMscz1yLl9fdl9yYXcsaT1rdChzKSxsPXQ/SGU6ZT9FdDpOdDtyZXR1cm4hZSYmd2UoaSwwLGhlKSxzLmZvckVhY2goKChlLHQpPT5uLmNhbGwobyxsKGUpLGwodCkscikpKX19ZnVuY3Rpb24gWGUoZSx0LG4pe3JldHVybiBmdW5jdGlvbiguLi5vKXtjb25zdCByPXRoaXMuX192X3JhdyxzPWt0KHIpLGk9JChzKSxsPVwiZW50cmllc1wiPT09ZXx8ZT09PVN5bWJvbC5pdGVyYXRvciYmaSxjPVwia2V5c1wiPT09ZSYmaSxhPXJbZV0oLi4ubyksdT1uP0hlOnQ/RXQ6TnQ7cmV0dXJuIXQmJndlKHMsMCxjP21lOmhlKSx7bmV4dCgpe2NvbnN0e3ZhbHVlOmUsZG9uZTp0fT1hLm5leHQoKTtyZXR1cm4gdD97dmFsdWU6ZSxkb25lOnR9Ont2YWx1ZTpsP1t1KGVbMF0pLHUoZVsxXSldOnUoZSksZG9uZTp0fX0sW1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gdGhpc319fX1mdW5jdGlvbiBldChlKXtyZXR1cm4gZnVuY3Rpb24oLi4udCl7cmV0dXJuXCJkZWxldGVcIiE9PWUmJnRoaXN9fWZ1bmN0aW9uIHR0KCl7Y29uc3QgZT17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUpfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzKX0saGFzOktlLGFkZDpxZSxzZXQ6SmUsZGVsZXRlOlllLGNsZWFyOlplLGZvckVhY2g6UWUoITEsITEpfSx0PXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSwhMSwhMCl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMpfSxoYXM6S2UsYWRkOnFlLHNldDpKZSxkZWxldGU6WWUsY2xlYXI6WmUsZm9yRWFjaDpRZSghMSwhMCl9LG49e2dldChlKXtyZXR1cm4gemUodGhpcyxlLCEwKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcywhMCl9LGhhcyhlKXtyZXR1cm4gS2UuY2FsbCh0aGlzLGUsITApfSxhZGQ6ZXQoXCJhZGRcIiksc2V0OmV0KFwic2V0XCIpLGRlbGV0ZTpldChcImRlbGV0ZVwiKSxjbGVhcjpldChcImNsZWFyXCIpLGZvckVhY2g6UWUoITAsITEpfSxvPXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSwhMCwhMCl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMsITApfSxoYXMoZSl7cmV0dXJuIEtlLmNhbGwodGhpcyxlLCEwKX0sYWRkOmV0KFwiYWRkXCIpLHNldDpldChcInNldFwiKSxkZWxldGU6ZXQoXCJkZWxldGVcIiksY2xlYXI6ZXQoXCJjbGVhclwiKSxmb3JFYWNoOlFlKCEwLCEwKX07cmV0dXJuW1wia2V5c1wiLFwidmFsdWVzXCIsXCJlbnRyaWVzXCIsU3ltYm9sLml0ZXJhdG9yXS5mb3JFYWNoKChyPT57ZVtyXT1YZShyLCExLCExKSxuW3JdPVhlKHIsITAsITEpLHRbcl09WGUociwhMSwhMCksb1tyXT1YZShyLCEwLCEwKX0pKSxbZSxuLHQsb119Y29uc3RbbnQsb3QscnQsc3RdPXR0KCk7ZnVuY3Rpb24gaXQoZSx0KXtjb25zdCBuPXQ/ZT9zdDpydDplP290Om50O3JldHVybih0LG8scik9PlwiX192X2lzUmVhY3RpdmVcIj09PW8/IWU6XCJfX3ZfaXNSZWFkb25seVwiPT09bz9lOlwiX192X3Jhd1wiPT09bz90OlJlZmxlY3QuZ2V0KE4obixvKSYmbyBpbiB0P246dCxvLHIpfWNvbnN0IGx0PXtnZXQ6aXQoITEsITEpfSxjdD17Z2V0Oml0KCExLCEwKX0sYXQ9e2dldDppdCghMCwhMSl9LHV0PXtnZXQ6aXQoITAsITApfSxwdD1uZXcgV2Vha01hcCxmdD1uZXcgV2Vha01hcCxkdD1uZXcgV2Vha01hcCxodD1uZXcgV2Vha01hcDtmdW5jdGlvbiBtdChlKXtyZXR1cm4gZS5fX3Zfc2tpcHx8IU9iamVjdC5pc0V4dGVuc2libGUoZSk/MDpmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiT2JqZWN0XCI6Y2FzZVwiQXJyYXlcIjpyZXR1cm4gMTtjYXNlXCJNYXBcIjpjYXNlXCJTZXRcIjpjYXNlXCJXZWFrTWFwXCI6Y2FzZVwiV2Vha1NldFwiOnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fSgoZT0+QihlKS5zbGljZSg4LC0xKSkoZSkpfWZ1bmN0aW9uIGd0KGUpe3JldHVybiB4dChlKT9lOmJ0KGUsITEsTGUsbHQscHQpfWZ1bmN0aW9uIHZ0KGUpe3JldHVybiBidChlLCExLFVlLGN0LGZ0KX1mdW5jdGlvbiB5dChlKXtyZXR1cm4gYnQoZSwhMCxqZSxhdCxkdCl9ZnVuY3Rpb24gX3QoZSl7cmV0dXJuIGJ0KGUsITAsRGUsdXQsaHQpfWZ1bmN0aW9uIGJ0KGUsdCxuLG8scil7aWYoIU0oZSkpcmV0dXJuIGU7aWYoZS5fX3ZfcmF3JiYoIXR8fCFlLl9fdl9pc1JlYWN0aXZlKSlyZXR1cm4gZTtjb25zdCBzPXIuZ2V0KGUpO2lmKHMpcmV0dXJuIHM7Y29uc3QgaT1tdChlKTtpZigwPT09aSlyZXR1cm4gZTtjb25zdCBsPW5ldyBQcm94eShlLDI9PT1pP286bik7cmV0dXJuIHIuc2V0KGUsbCksbH1mdW5jdGlvbiBTdChlKXtyZXR1cm4geHQoZSk/U3QoZS5fX3ZfcmF3KTohKCFlfHwhZS5fX3ZfaXNSZWFjdGl2ZSl9ZnVuY3Rpb24geHQoZSl7cmV0dXJuISghZXx8IWUuX192X2lzUmVhZG9ubHkpfWZ1bmN0aW9uIEN0KGUpe3JldHVybiEoIWV8fCFlLl9fdl9pc1NoYWxsb3cpfWZ1bmN0aW9uIHd0KGUpe3JldHVybiBTdChlKXx8eHQoZSl9ZnVuY3Rpb24ga3QoZSl7Y29uc3QgdD1lJiZlLl9fdl9yYXc7cmV0dXJuIHQ/a3QodCk6ZX1mdW5jdGlvbiBUdChlKXtyZXR1cm4gUShlLFwiX192X3NraXBcIiwhMCksZX1jb25zdCBOdD1lPT5NKGUpP2d0KGUpOmUsRXQ9ZT0+TShlKT95dChlKTplO2Z1bmN0aW9uICR0KGUpe2JlJiZkZSYma2UoKGU9a3QoZSkpLmRlcHx8KGUuZGVwPWxlKCkpKX1mdW5jdGlvbiBPdChlLHQpeyhlPWt0KGUpKS5kZXAmJk5lKGUuZGVwKX1mdW5jdGlvbiBSdChlKXtyZXR1cm4hKCFlfHwhMCE9PWUuX192X2lzUmVmKX1mdW5jdGlvbiBGdChlKXtyZXR1cm4gQXQoZSwhMSl9ZnVuY3Rpb24gUHQoZSl7cmV0dXJuIEF0KGUsITApfWZ1bmN0aW9uIEF0KGUsdCl7cmV0dXJuIFJ0KGUpP2U6bmV3IE10KGUsdCl9Y2xhc3MgTXR7Y29uc3RydWN0b3IoZSx0KXt0aGlzLl9fdl9pc1NoYWxsb3c9dCx0aGlzLmRlcD12b2lkIDAsdGhpcy5fX3ZfaXNSZWY9ITAsdGhpcy5fcmF3VmFsdWU9dD9lOmt0KGUpLHRoaXMuX3ZhbHVlPXQ/ZTpOdChlKX1nZXQgdmFsdWUoKXtyZXR1cm4gJHQodGhpcyksdGhpcy5fdmFsdWV9c2V0IHZhbHVlKGUpe2U9dGhpcy5fX3ZfaXNTaGFsbG93P2U6a3QoZSksWShlLHRoaXMuX3Jhd1ZhbHVlKSYmKHRoaXMuX3Jhd1ZhbHVlPWUsdGhpcy5fdmFsdWU9dGhpcy5fX3ZfaXNTaGFsbG93P2U6TnQoZSksT3QodGhpcykpfX1mdW5jdGlvbiBWdChlKXtPdChlKX1mdW5jdGlvbiBJdChlKXtyZXR1cm4gUnQoZSk/ZS52YWx1ZTplfWNvbnN0IEJ0PXtnZXQ6KGUsdCxuKT0+SXQoUmVmbGVjdC5nZXQoZSx0LG4pKSxzZXQ6KGUsdCxuLG8pPT57Y29uc3Qgcj1lW3RdO3JldHVybiBSdChyKSYmIVJ0KG4pPyhyLnZhbHVlPW4sITApOlJlZmxlY3Quc2V0KGUsdCxuLG8pfX07ZnVuY3Rpb24gTHQoZSl7cmV0dXJuIFN0KGUpP2U6bmV3IFByb3h5KGUsQnQpfWNsYXNzIGp0e2NvbnN0cnVjdG9yKGUpe3RoaXMuZGVwPXZvaWQgMCx0aGlzLl9fdl9pc1JlZj0hMDtjb25zdHtnZXQ6dCxzZXQ6bn09ZSgoKCk9PiR0KHRoaXMpKSwoKCk9Pk90KHRoaXMpKSk7dGhpcy5fZ2V0PXQsdGhpcy5fc2V0PW59Z2V0IHZhbHVlKCl7cmV0dXJuIHRoaXMuX2dldCgpfXNldCB2YWx1ZShlKXt0aGlzLl9zZXQoZSl9fWZ1bmN0aW9uIFV0KGUpe3JldHVybiBuZXcganQoZSl9ZnVuY3Rpb24gRHQoZSl7Y29uc3QgdD1FKGUpP25ldyBBcnJheShlLmxlbmd0aCk6e307Zm9yKGNvbnN0IG4gaW4gZSl0W25dPVd0KGUsbik7cmV0dXJuIHR9Y2xhc3MgSHR7Y29uc3RydWN0b3IoZSx0LG4pe3RoaXMuX29iamVjdD1lLHRoaXMuX2tleT10LHRoaXMuX2RlZmF1bHRWYWx1ZT1uLHRoaXMuX192X2lzUmVmPSEwfWdldCB2YWx1ZSgpe2NvbnN0IGU9dGhpcy5fb2JqZWN0W3RoaXMuX2tleV07cmV0dXJuIHZvaWQgMD09PWU/dGhpcy5fZGVmYXVsdFZhbHVlOmV9c2V0IHZhbHVlKGUpe3RoaXMuX29iamVjdFt0aGlzLl9rZXldPWV9fWZ1bmN0aW9uIFd0KGUsdCxuKXtjb25zdCBvPWVbdF07cmV0dXJuIFJ0KG8pP286bmV3IEh0KGUsdCxuKX1jbGFzcyB6dHtjb25zdHJ1Y3RvcihlLHQsbixvKXt0aGlzLl9zZXR0ZXI9dCx0aGlzLmRlcD12b2lkIDAsdGhpcy5fX3ZfaXNSZWY9ITAsdGhpcy5fZGlydHk9ITAsdGhpcy5lZmZlY3Q9bmV3IGdlKGUsKCgpPT57dGhpcy5fZGlydHl8fCh0aGlzLl9kaXJ0eT0hMCxPdCh0aGlzKSl9KSksdGhpcy5lZmZlY3QuY29tcHV0ZWQ9dGhpcyx0aGlzLmVmZmVjdC5hY3RpdmU9dGhpcy5fY2FjaGVhYmxlPSFvLHRoaXMuX192X2lzUmVhZG9ubHk9bn1nZXQgdmFsdWUoKXtjb25zdCBlPWt0KHRoaXMpO3JldHVybiAkdChlKSwhZS5fZGlydHkmJmUuX2NhY2hlYWJsZXx8KGUuX2RpcnR5PSExLGUuX3ZhbHVlPWUuZWZmZWN0LnJ1bigpKSxlLl92YWx1ZX1zZXQgdmFsdWUoZSl7dGhpcy5fc2V0dGVyKGUpfX1jb25zdCBLdD1bXTtmdW5jdGlvbiBHdChlLC4uLnQpe3hlKCk7Y29uc3Qgbj1LdC5sZW5ndGg/S3RbS3QubGVuZ3RoLTFdLmNvbXBvbmVudDpudWxsLG89biYmbi5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcixyPWZ1bmN0aW9uKCl7bGV0IGU9S3RbS3QubGVuZ3RoLTFdO2lmKCFlKXJldHVybltdO2NvbnN0IHQ9W107Zm9yKDtlOyl7Y29uc3Qgbj10WzBdO24mJm4udm5vZGU9PT1lP24ucmVjdXJzZUNvdW50Kys6dC5wdXNoKHt2bm9kZTplLHJlY3Vyc2VDb3VudDowfSk7Y29uc3Qgbz1lLmNvbXBvbmVudCYmZS5jb21wb25lbnQucGFyZW50O2U9byYmby52bm9kZX1yZXR1cm4gdH0oKTtpZihvKVl0KG8sbiwxMSxbZSt0LmpvaW4oXCJcIiksbiYmbi5wcm94eSxyLm1hcCgoKHt2bm9kZTplfSk9PmBhdCA8JHtMcyhuLGUudHlwZSl9PmApKS5qb2luKFwiXFxuXCIpLHJdKTtlbHNle2NvbnN0IG49W2BbVnVlIHdhcm5dOiAke2V9YCwuLi50XTtyLmxlbmd0aCYmbi5wdXNoKFwiXFxuXCIsLi4uZnVuY3Rpb24oZSl7Y29uc3QgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKCgoZSxuKT0+e3QucHVzaCguLi4wPT09bj9bXTpbXCJcXG5cIl0sLi4uZnVuY3Rpb24oe3Zub2RlOmUscmVjdXJzZUNvdW50OnR9KXtjb25zdCBuPXQ+MD9gLi4uICgke3R9IHJlY3Vyc2l2ZSBjYWxscylgOlwiXCIsbz1gIGF0IDwke0xzKGUuY29tcG9uZW50LGUudHlwZSwhIWUuY29tcG9uZW50JiZudWxsPT1lLmNvbXBvbmVudC5wYXJlbnQpfWAscj1cIj5cIituO3JldHVybiBlLnByb3BzP1tvLC4uLnF0KGUucHJvcHMpLHJdOltvK3JdfShlKSl9KSksdH0ocikpLGNvbnNvbGUud2FybiguLi5uKX1DZSgpfWZ1bmN0aW9uIHF0KGUpe2NvbnN0IHQ9W10sbj1PYmplY3Qua2V5cyhlKTtyZXR1cm4gbi5zbGljZSgwLDMpLmZvckVhY2goKG49Pnt0LnB1c2goLi4uSnQobixlW25dKSl9KSksbi5sZW5ndGg+MyYmdC5wdXNoKFwiIC4uLlwiKSx0fWZ1bmN0aW9uIEp0KGUsdCxuKXtyZXR1cm4gUCh0KT8odD1KU09OLnN0cmluZ2lmeSh0KSxuP3Q6W2Ake2V9PSR7dH1gXSk6XCJudW1iZXJcIj09dHlwZW9mIHR8fFwiYm9vbGVhblwiPT10eXBlb2YgdHx8bnVsbD09dD9uP3Q6W2Ake2V9PSR7dH1gXTpSdCh0KT8odD1KdChlLGt0KHQudmFsdWUpLCEwKSxuP3Q6W2Ake2V9PVJlZjxgLHQsXCI+XCJdKTpGKHQpP1tgJHtlfT1mbiR7dC5uYW1lP2A8JHt0Lm5hbWV9PmA6XCJcIn1gXToodD1rdCh0KSxuP3Q6W2Ake2V9PWAsdF0pfWZ1bmN0aW9uIFl0KGUsdCxuLG8pe2xldCByO3RyeXtyPW8/ZSguLi5vKTplKCl9Y2F0Y2gocyl7UXQocyx0LG4pfXJldHVybiByfWZ1bmN0aW9uIFp0KGUsdCxuLG8pe2lmKEYoZSkpe2NvbnN0IHI9WXQoZSx0LG4sbyk7cmV0dXJuIHImJlYocikmJnIuY2F0Y2goKGU9PntRdChlLHQsbil9KSkscn1jb25zdCByPVtdO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKXIucHVzaChadChlW3NdLHQsbixvKSk7cmV0dXJuIHJ9ZnVuY3Rpb24gUXQoZSx0LG4sbz0hMCl7aWYodCl7bGV0IG89dC5wYXJlbnQ7Y29uc3Qgcj10LnByb3h5LHM9bjtmb3IoO287KXtjb25zdCB0PW8uZWM7aWYodClmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKylpZighMT09PXRbbl0oZSxyLHMpKXJldHVybjtvPW8ucGFyZW50fWNvbnN0IGk9dC5hcHBDb250ZXh0LmNvbmZpZy5lcnJvckhhbmRsZXI7aWYoaSlyZXR1cm4gdm9pZCBZdChpLG51bGwsMTAsW2UscixzXSl9IWZ1bmN0aW9uKGUsdCxuLG89ITApe2NvbnNvbGUuZXJyb3IoZSl9KGUsMCwwLG8pfWxldCBYdD0hMSxlbj0hMTtjb25zdCB0bj1bXTtsZXQgbm49MDtjb25zdCBvbj1bXTtsZXQgcm49bnVsbCxzbj0wO2NvbnN0IGxuPVtdO2xldCBjbj1udWxsLGFuPTA7Y29uc3QgdW49UHJvbWlzZS5yZXNvbHZlKCk7bGV0IHBuPW51bGwsZm49bnVsbDtmdW5jdGlvbiBkbihlKXtjb25zdCB0PXBufHx1bjtyZXR1cm4gZT90LnRoZW4odGhpcz9lLmJpbmQodGhpcyk6ZSk6dH1mdW5jdGlvbiBobihlKXt0bi5sZW5ndGgmJnRuLmluY2x1ZGVzKGUsWHQmJmUuYWxsb3dSZWN1cnNlP25uKzE6bm4pfHxlPT09Zm58fChudWxsPT1lLmlkP3RuLnB1c2goZSk6dG4uc3BsaWNlKGZ1bmN0aW9uKGUpe2xldCB0PW5uKzEsbj10bi5sZW5ndGg7Zm9yKDt0PG47KXtjb25zdCBvPXQrbj4+PjE7Ym4odG5bb10pPGU/dD1vKzE6bj1vfXJldHVybiB0fShlLmlkKSwwLGUpLG1uKCkpfWZ1bmN0aW9uIG1uKCl7WHR8fGVufHwoZW49ITAscG49dW4udGhlbihTbikpfWZ1bmN0aW9uIGduKGUsdCxuLG8pe0UoZSk/bi5wdXNoKC4uLmUpOnQmJnQuaW5jbHVkZXMoZSxlLmFsbG93UmVjdXJzZT9vKzE6byl8fG4ucHVzaChlKSxtbigpfWZ1bmN0aW9uIHZuKGUpe2duKGUsY24sbG4sYW4pfWZ1bmN0aW9uIHluKGUsdD1udWxsKXtpZihvbi5sZW5ndGgpe2Zvcihmbj10LHJuPVsuLi5uZXcgU2V0KG9uKV0sb24ubGVuZ3RoPTAsc249MDtzbjxybi5sZW5ndGg7c24rKylybltzbl0oKTtybj1udWxsLHNuPTAsZm49bnVsbCx5bihlLHQpfX1mdW5jdGlvbiBfbihlKXtpZih5bigpLGxuLmxlbmd0aCl7Y29uc3QgZT1bLi4ubmV3IFNldChsbildO2lmKGxuLmxlbmd0aD0wLGNuKXJldHVybiB2b2lkIGNuLnB1c2goLi4uZSk7Zm9yKGNuPWUsY24uc29ydCgoKGUsdCk9PmJuKGUpLWJuKHQpKSksYW49MDthbjxjbi5sZW5ndGg7YW4rKyljblthbl0oKTtjbj1udWxsLGFuPTB9fWNvbnN0IGJuPWU9Pm51bGw9PWUuaWQ/MS8wOmUuaWQ7ZnVuY3Rpb24gU24oZSl7ZW49ITEsWHQ9ITAseW4oZSksdG4uc29ydCgoKGUsdCk9PmJuKGUpLWJuKHQpKSk7dHJ5e2Zvcihubj0wO25uPHRuLmxlbmd0aDtubisrKXtjb25zdCBlPXRuW25uXTtlJiYhMSE9PWUuYWN0aXZlJiZZdChlLG51bGwsMTQpfX1maW5hbGx5e25uPTAsdG4ubGVuZ3RoPTAsX24oKSxYdD0hMSxwbj1udWxsLCh0bi5sZW5ndGh8fG9uLmxlbmd0aHx8bG4ubGVuZ3RoKSYmU24oZSl9fWxldCB4bixDbj1bXTtmdW5jdGlvbiB3bihlLHQpe3ZhciBuLG87aWYoeG49ZSx4bil4bi5lbmFibGVkPSEwLENuLmZvckVhY2goKCh7ZXZlbnQ6ZSxhcmdzOnR9KT0+eG4uZW1pdChlLC4uLnQpKSksQ249W107ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuSFRNTEVsZW1lbnQmJiEobnVsbD09PShvPW51bGw9PT0obj13aW5kb3cubmF2aWdhdG9yKXx8dm9pZCAwPT09bj92b2lkIDA6bi51c2VyQWdlbnQpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLmluY2x1ZGVzKFwianNkb21cIikpKXsodC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fPXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfX3x8W10pLnB1c2goKGU9Pnt3bihlLHQpfSkpLHNldFRpbWVvdXQoKCgpPT57eG58fCh0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX189bnVsbCxDbj1bXSl9KSwzZTMpfWVsc2UgQ249W119ZnVuY3Rpb24ga24oZSx0LC4uLm4pe2lmKGUuaXNVbm1vdW50ZWQpcmV0dXJuO2NvbnN0IG89ZS52bm9kZS5wcm9wc3x8djtsZXQgcj1uO2NvbnN0IHM9dC5zdGFydHNXaXRoKFwidXBkYXRlOlwiKSxpPXMmJnQuc2xpY2UoNyk7aWYoaSYmaSBpbiBvKXtjb25zdCBlPWAke1wibW9kZWxWYWx1ZVwiPT09aT9cIm1vZGVsXCI6aX1Nb2RpZmllcnNgLHtudW1iZXI6dCx0cmltOnN9PW9bZV18fHY7cyYmKHI9bi5tYXAoKGU9PmUudHJpbSgpKSkpLHQmJihyPW4ubWFwKFgpKX1sZXQgbCxjPW9bbD1KKHQpXXx8b1tsPUooeih0KSldOyFjJiZzJiYoYz1vW2w9SihHKHQpKV0pLGMmJlp0KGMsZSw2LHIpO2NvbnN0IGE9b1tsK1wiT25jZVwiXTtpZihhKXtpZihlLmVtaXR0ZWQpe2lmKGUuZW1pdHRlZFtsXSlyZXR1cm59ZWxzZSBlLmVtaXR0ZWQ9e307ZS5lbWl0dGVkW2xdPSEwLFp0KGEsZSw2LHIpfX1mdW5jdGlvbiBUbihlLHQsbj0hMSl7Y29uc3Qgbz10LmVtaXRzQ2FjaGUscj1vLmdldChlKTtpZih2b2lkIDAhPT1yKXJldHVybiByO2NvbnN0IHM9ZS5lbWl0cztsZXQgaT17fSxsPSExO2lmKCFGKGUpKXtjb25zdCBvPWU9Pntjb25zdCBuPVRuKGUsdCwhMCk7biYmKGw9ITAsdyhpLG4pKX07IW4mJnQubWl4aW5zLmxlbmd0aCYmdC5taXhpbnMuZm9yRWFjaChvKSxlLmV4dGVuZHMmJm8oZS5leHRlbmRzKSxlLm1peGlucyYmZS5taXhpbnMuZm9yRWFjaChvKX1yZXR1cm4gc3x8bD8oRShzKT9zLmZvckVhY2goKGU9PmlbZV09bnVsbCkpOncoaSxzKSxvLnNldChlLGkpLGkpOihvLnNldChlLG51bGwpLG51bGwpfWZ1bmN0aW9uIE5uKGUsdCl7cmV0dXJuISghZXx8IXgodCkpJiYodD10LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLyxcIlwiKSxOKGUsdFswXS50b0xvd2VyQ2FzZSgpK3Quc2xpY2UoMSkpfHxOKGUsRyh0KSl8fE4oZSx0KSl9bGV0IEVuPW51bGwsJG49bnVsbDtmdW5jdGlvbiBPbihlKXtjb25zdCB0PUVuO3JldHVybiBFbj1lLCRuPWUmJmUudHlwZS5fX3Njb3BlSWR8fG51bGwsdH1mdW5jdGlvbiBSbihlKXskbj1lfWZ1bmN0aW9uIEZuKCl7JG49bnVsbH1jb25zdCBQbj1lPT5BbjtmdW5jdGlvbiBBbihlLHQ9RW4sbil7aWYoIXQpcmV0dXJuIGU7aWYoZS5fbilyZXR1cm4gZTtjb25zdCBvPSguLi5uKT0+e28uX2QmJlhyKC0xKTtjb25zdCByPU9uKHQpLHM9ZSguLi5uKTtyZXR1cm4gT24ociksby5fZCYmWHIoMSksc307cmV0dXJuIG8uX249ITAsby5fYz0hMCxvLl9kPSEwLG99ZnVuY3Rpb24gTW4oZSl7Y29uc3R7dHlwZTp0LHZub2RlOm4scHJveHk6byx3aXRoUHJveHk6cixwcm9wczpzLHByb3BzT3B0aW9uczpbaV0sc2xvdHM6bCxhdHRyczpjLGVtaXQ6YSxyZW5kZXI6dSxyZW5kZXJDYWNoZTpwLGRhdGE6ZixzZXR1cFN0YXRlOmQsY3R4OmgsaW5oZXJpdEF0dHJzOm19PWU7bGV0IGcsdjtjb25zdCB5PU9uKGUpO3RyeXtpZig0Jm4uc2hhcGVGbGFnKXtjb25zdCBlPXJ8fG87Zz1ncyh1LmNhbGwoZSxlLHAscyxkLGYsaCkpLHY9Y31lbHNle2NvbnN0IGU9dDswLGc9Z3MoZShzLGUubGVuZ3RoPjE/e2F0dHJzOmMsc2xvdHM6bCxlbWl0OmF9Om51bGwpKSx2PXQucHJvcHM/YzpWbihjKX19Y2F0Y2goYil7cXIubGVuZ3RoPTAsUXQoYixlLDEpLGc9dXMoS3IpfWxldCBfPWc7aWYodiYmITEhPT1tKXtjb25zdCBlPU9iamVjdC5rZXlzKHYpLHtzaGFwZUZsYWc6dH09XztlLmxlbmd0aCYmNyZ0JiYoaSYmZS5zb21lKEMpJiYodj1Jbih2LGkpKSxfPWZzKF8sdikpfXJldHVybiBuLmRpcnMmJihfPWZzKF8pLF8uZGlycz1fLmRpcnM/Xy5kaXJzLmNvbmNhdChuLmRpcnMpOm4uZGlycyksbi50cmFuc2l0aW9uJiYoXy50cmFuc2l0aW9uPW4udHJhbnNpdGlvbiksZz1fLE9uKHkpLGd9Y29uc3QgVm49ZT0+e2xldCB0O2Zvcihjb25zdCBuIGluIGUpKFwiY2xhc3NcIj09PW58fFwic3R5bGVcIj09PW58fHgobikpJiYoKHR8fCh0PXt9KSlbbl09ZVtuXSk7cmV0dXJuIHR9LEluPShlLHQpPT57Y29uc3Qgbj17fTtmb3IoY29uc3QgbyBpbiBlKUMobykmJm8uc2xpY2UoOSlpbiB0fHwobltvXT1lW29dKTtyZXR1cm4gbn07ZnVuY3Rpb24gQm4oZSx0LG4pe2NvbnN0IG89T2JqZWN0LmtleXModCk7aWYoby5sZW5ndGghPT1PYmplY3Qua2V5cyhlKS5sZW5ndGgpcmV0dXJuITA7Zm9yKGxldCByPTA7cjxvLmxlbmd0aDtyKyspe2NvbnN0IHM9b1tyXTtpZih0W3NdIT09ZVtzXSYmIU5uKG4scykpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gTG4oe3Zub2RlOmUscGFyZW50OnR9LG4pe2Zvcig7dCYmdC5zdWJUcmVlPT09ZTspKGU9dC52bm9kZSkuZWw9bix0PXQucGFyZW50fWNvbnN0IGpuPWU9PmUuX19pc1N1c3BlbnNlLFVuPXtuYW1lOlwiU3VzcGVuc2VcIixfX2lzU3VzcGVuc2U6ITAscHJvY2VzcyhlLHQsbixvLHIscyxpLGwsYyxhKXtudWxsPT1lP2Z1bmN0aW9uKGUsdCxuLG8scixzLGksbCxjKXtjb25zdHtwOmEsbzp7Y3JlYXRlRWxlbWVudDp1fX09YyxwPXUoXCJkaXZcIiksZj1lLnN1c3BlbnNlPUhuKGUscixvLHQscCxuLHMsaSxsLGMpO2EobnVsbCxmLnBlbmRpbmdCcmFuY2g9ZS5zc0NvbnRlbnQscCxudWxsLG8sZixzLGkpLGYuZGVwcz4wPyhEbihlLFwib25QZW5kaW5nXCIpLERuKGUsXCJvbkZhbGxiYWNrXCIpLGEobnVsbCxlLnNzRmFsbGJhY2ssdCxuLG8sbnVsbCxzLGkpLEtuKGYsZS5zc0ZhbGxiYWNrKSk6Zi5yZXNvbHZlKCl9KHQsbixvLHIscyxpLGwsYyxhKTpmdW5jdGlvbihlLHQsbixvLHIscyxpLGwse3A6Yyx1bTphLG86e2NyZWF0ZUVsZW1lbnQ6dX19KXtjb25zdCBwPXQuc3VzcGVuc2U9ZS5zdXNwZW5zZTtwLnZub2RlPXQsdC5lbD1lLmVsO2NvbnN0IGY9dC5zc0NvbnRlbnQsZD10LnNzRmFsbGJhY2sse2FjdGl2ZUJyYW5jaDpoLHBlbmRpbmdCcmFuY2g6bSxpc0luRmFsbGJhY2s6Zyxpc0h5ZHJhdGluZzp2fT1wO2lmKG0pcC5wZW5kaW5nQnJhbmNoPWYscnMoZixtKT8oYyhtLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MD9wLnJlc29sdmUoKTpnJiYoYyhoLGQsbixvLHIsbnVsbCxzLGksbCksS24ocCxkKSkpOihwLnBlbmRpbmdJZCsrLHY/KHAuaXNIeWRyYXRpbmc9ITEscC5hY3RpdmVCcmFuY2g9bSk6YShtLHIscCkscC5kZXBzPTAscC5lZmZlY3RzLmxlbmd0aD0wLHAuaGlkZGVuQ29udGFpbmVyPXUoXCJkaXZcIiksZz8oYyhudWxsLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MD9wLnJlc29sdmUoKTooYyhoLGQsbixvLHIsbnVsbCxzLGksbCksS24ocCxkKSkpOmgmJnJzKGYsaCk/KGMoaCxmLG4sbyxyLHAscyxpLGwpLHAucmVzb2x2ZSghMCkpOihjKG51bGwsZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wJiZwLnJlc29sdmUoKSkpO2Vsc2UgaWYoaCYmcnMoZixoKSljKGgsZixuLG8scixwLHMsaSxsKSxLbihwLGYpO2Vsc2UgaWYoRG4odCxcIm9uUGVuZGluZ1wiKSxwLnBlbmRpbmdCcmFuY2g9ZixwLnBlbmRpbmdJZCsrLGMobnVsbCxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTApcC5yZXNvbHZlKCk7ZWxzZXtjb25zdHt0aW1lb3V0OmUscGVuZGluZ0lkOnR9PXA7ZT4wP3NldFRpbWVvdXQoKCgpPT57cC5wZW5kaW5nSWQ9PT10JiZwLmZhbGxiYWNrKGQpfSksZSk6MD09PWUmJnAuZmFsbGJhY2soZCl9fShlLHQsbixvLHIsaSxsLGMsYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oZSx0LG4sbyxyLHMsaSxsLGMpe2NvbnN0IGE9dC5zdXNwZW5zZT1Ibih0LG8sbixlLnBhcmVudE5vZGUsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxudWxsLHIscyxpLGwsITApLHU9YyhlLGEucGVuZGluZ0JyYW5jaD10LnNzQ29udGVudCxuLGEscyxpKTswPT09YS5kZXBzJiZhLnJlc29sdmUoKTtyZXR1cm4gdX0sY3JlYXRlOkhuLG5vcm1hbGl6ZTpmdW5jdGlvbihlKXtjb25zdHtzaGFwZUZsYWc6dCxjaGlsZHJlbjpufT1lLG89MzImdDtlLnNzQ29udGVudD1XbihvP24uZGVmYXVsdDpuKSxlLnNzRmFsbGJhY2s9bz9XbihuLmZhbGxiYWNrKTp1cyhLcil9fTtmdW5jdGlvbiBEbihlLHQpe2NvbnN0IG49ZS5wcm9wcyYmZS5wcm9wc1t0XTtGKG4pJiZuKCl9ZnVuY3Rpb24gSG4oZSx0LG4sbyxyLHMsaSxsLGMsYSx1PSExKXtjb25zdHtwOnAsbTpmLHVtOmQsbjpoLG86e3BhcmVudE5vZGU6bSxyZW1vdmU6Z319PWEsdj1YKGUucHJvcHMmJmUucHJvcHMudGltZW91dCkseT17dm5vZGU6ZSxwYXJlbnQ6dCxwYXJlbnRDb21wb25lbnQ6bixpc1NWRzppLGNvbnRhaW5lcjpvLGhpZGRlbkNvbnRhaW5lcjpyLGFuY2hvcjpzLGRlcHM6MCxwZW5kaW5nSWQ6MCx0aW1lb3V0OlwibnVtYmVyXCI9PXR5cGVvZiB2P3Y6LTEsYWN0aXZlQnJhbmNoOm51bGwscGVuZGluZ0JyYW5jaDpudWxsLGlzSW5GYWxsYmFjazohMCxpc0h5ZHJhdGluZzp1LGlzVW5tb3VudGVkOiExLGVmZmVjdHM6W10scmVzb2x2ZShlPSExKXtjb25zdHt2bm9kZTp0LGFjdGl2ZUJyYW5jaDpuLHBlbmRpbmdCcmFuY2g6byxwZW5kaW5nSWQ6cixlZmZlY3RzOnMscGFyZW50Q29tcG9uZW50OmksY29udGFpbmVyOmx9PXk7aWYoeS5pc0h5ZHJhdGluZyl5LmlzSHlkcmF0aW5nPSExO2Vsc2UgaWYoIWUpe2NvbnN0IGU9biYmby50cmFuc2l0aW9uJiZcIm91dC1pblwiPT09by50cmFuc2l0aW9uLm1vZGU7ZSYmKG4udHJhbnNpdGlvbi5hZnRlckxlYXZlPSgpPT57cj09PXkucGVuZGluZ0lkJiZmKG8sbCx0LDApfSk7bGV0e2FuY2hvcjp0fT15O24mJih0PWgobiksZChuLGkseSwhMCkpLGV8fGYobyxsLHQsMCl9S24oeSxvKSx5LnBlbmRpbmdCcmFuY2g9bnVsbCx5LmlzSW5GYWxsYmFjaz0hMTtsZXQgYz15LnBhcmVudCxhPSExO2Zvcig7Yzspe2lmKGMucGVuZGluZ0JyYW5jaCl7Yy5lZmZlY3RzLnB1c2goLi4ucyksYT0hMDticmVha31jPWMucGFyZW50fWF8fHZuKHMpLHkuZWZmZWN0cz1bXSxEbih0LFwib25SZXNvbHZlXCIpfSxmYWxsYmFjayhlKXtpZigheS5wZW5kaW5nQnJhbmNoKXJldHVybjtjb25zdHt2bm9kZTp0LGFjdGl2ZUJyYW5jaDpuLHBhcmVudENvbXBvbmVudDpvLGNvbnRhaW5lcjpyLGlzU1ZHOnN9PXk7RG4odCxcIm9uRmFsbGJhY2tcIik7Y29uc3QgaT1oKG4pLGE9KCk9Pnt5LmlzSW5GYWxsYmFjayYmKHAobnVsbCxlLHIsaSxvLG51bGwscyxsLGMpLEtuKHksZSkpfSx1PWUudHJhbnNpdGlvbiYmXCJvdXQtaW5cIj09PWUudHJhbnNpdGlvbi5tb2RlO3UmJihuLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZT1hKSx5LmlzSW5GYWxsYmFjaz0hMCxkKG4sbyxudWxsLCEwKSx1fHxhKCl9LG1vdmUoZSx0LG4pe3kuYWN0aXZlQnJhbmNoJiZmKHkuYWN0aXZlQnJhbmNoLGUsdCxuKSx5LmNvbnRhaW5lcj1lfSxuZXh0OigpPT55LmFjdGl2ZUJyYW5jaCYmaCh5LmFjdGl2ZUJyYW5jaCkscmVnaXN0ZXJEZXAoZSx0KXtjb25zdCBuPSEheS5wZW5kaW5nQnJhbmNoO24mJnkuZGVwcysrO2NvbnN0IG89ZS52bm9kZS5lbDtlLmFzeW5jRGVwLmNhdGNoKCh0PT57UXQodCxlLDApfSkpLnRoZW4oKHI9PntpZihlLmlzVW5tb3VudGVkfHx5LmlzVW5tb3VudGVkfHx5LnBlbmRpbmdJZCE9PWUuc3VzcGVuc2VJZClyZXR1cm47ZS5hc3luY1Jlc29sdmVkPSEwO2NvbnN0e3Zub2RlOnN9PWU7UnMoZSxyLCExKSxvJiYocy5lbD1vKTtjb25zdCBsPSFvJiZlLnN1YlRyZWUuZWw7dChlLHMsbShvfHxlLnN1YlRyZWUuZWwpLG8/bnVsbDpoKGUuc3ViVHJlZSkseSxpLGMpLGwmJmcobCksTG4oZSxzLmVsKSxuJiYwPT0tLXkuZGVwcyYmeS5yZXNvbHZlKCl9KSl9LHVubW91bnQoZSx0KXt5LmlzVW5tb3VudGVkPSEwLHkuYWN0aXZlQnJhbmNoJiZkKHkuYWN0aXZlQnJhbmNoLG4sZSx0KSx5LnBlbmRpbmdCcmFuY2gmJmQoeS5wZW5kaW5nQnJhbmNoLG4sZSx0KX19O3JldHVybiB5fWZ1bmN0aW9uIFduKGUpe2xldCB0O2lmKEYoZSkpe2NvbnN0IG49UXImJmUuX2M7biYmKGUuX2Q9ITEsWXIoKSksZT1lKCksbiYmKGUuX2Q9ITAsdD1KcixacigpKX1pZihFKGUpKXtjb25zdCB0PWZ1bmN0aW9uKGUpe2xldCB0O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBvPWVbbl07aWYoIW9zKG8pKXJldHVybjtpZihvLnR5cGUhPT1Lcnx8XCJ2LWlmXCI9PT1vLmNoaWxkcmVuKXtpZih0KXJldHVybjt0PW99fXJldHVybiB0fShlKTtlPXR9cmV0dXJuIGU9Z3MoZSksdCYmIWUuZHluYW1pY0NoaWxkcmVuJiYoZS5keW5hbWljQ2hpbGRyZW49dC5maWx0ZXIoKHQ9PnQhPT1lKSkpLGV9ZnVuY3Rpb24gem4oZSx0KXt0JiZ0LnBlbmRpbmdCcmFuY2g/RShlKT90LmVmZmVjdHMucHVzaCguLi5lKTp0LmVmZmVjdHMucHVzaChlKTp2bihlKX1mdW5jdGlvbiBLbihlLHQpe2UuYWN0aXZlQnJhbmNoPXQ7Y29uc3R7dm5vZGU6bixwYXJlbnRDb21wb25lbnQ6b309ZSxyPW4uZWw9dC5lbDtvJiZvLnN1YlRyZWU9PT1uJiYoby52bm9kZS5lbD1yLExuKG8scikpfWZ1bmN0aW9uIEduKGUsdCl7aWYoQ3Mpe2xldCBuPUNzLnByb3ZpZGVzO2NvbnN0IG89Q3MucGFyZW50JiZDcy5wYXJlbnQucHJvdmlkZXM7bz09PW4mJihuPUNzLnByb3ZpZGVzPU9iamVjdC5jcmVhdGUobykpLG5bZV09dH1lbHNlO31mdW5jdGlvbiBxbihlLHQsbj0hMSl7Y29uc3Qgbz1Dc3x8RW47aWYobyl7Y29uc3Qgcj1udWxsPT1vLnBhcmVudD9vLnZub2RlLmFwcENvbnRleHQmJm8udm5vZGUuYXBwQ29udGV4dC5wcm92aWRlczpvLnBhcmVudC5wcm92aWRlcztpZihyJiZlIGluIHIpcmV0dXJuIHJbZV07aWYoYXJndW1lbnRzLmxlbmd0aD4xKXJldHVybiBuJiZGKHQpP3QuY2FsbChvLnByb3h5KTp0fX1mdW5jdGlvbiBKbihlLHQpe3JldHVybiBlbyhlLG51bGwsdCl9ZnVuY3Rpb24gWW4oZSx0KXtyZXR1cm4gZW8oZSxudWxsLHtmbHVzaDpcInBvc3RcIn0pfWZ1bmN0aW9uIFpuKGUsdCl7cmV0dXJuIGVvKGUsbnVsbCx7Zmx1c2g6XCJzeW5jXCJ9KX1jb25zdCBRbj17fTtmdW5jdGlvbiBYbihlLHQsbil7cmV0dXJuIGVvKGUsdCxuKX1mdW5jdGlvbiBlbyhlLHQse2ltbWVkaWF0ZTpuLGRlZXA6byxmbHVzaDpyfT12KXtjb25zdCBzPUNzO2xldCBpLGwsYz0hMSxhPSExO2lmKFJ0KGUpPyhpPSgpPT5lLnZhbHVlLGM9Q3QoZSkpOlN0KGUpPyhpPSgpPT5lLG89ITApOkUoZSk/KGE9ITAsYz1lLnNvbWUoKGU9PlN0KGUpfHxDdChlKSkpLGk9KCk9PmUubWFwKChlPT5SdChlKT9lLnZhbHVlOlN0KGUpP29vKGUpOkYoZSk/WXQoZSxzLDIpOnZvaWQgMCkpKTppPUYoZSk/dD8oKT0+WXQoZSxzLDIpOigpPT57aWYoIXN8fCFzLmlzVW5tb3VudGVkKXJldHVybiBsJiZsKCksWnQoZSxzLDMsW3VdKX06Xyx0JiZvKXtjb25zdCBlPWk7aT0oKT0+b28oZSgpKX1sZXQgdT1lPT57bD1oLm9uU3RvcD0oKT0+e1l0KGUscyw0KX19LHA9YT9bXTpRbjtjb25zdCBmPSgpPT57aWYoaC5hY3RpdmUpaWYodCl7Y29uc3QgZT1oLnJ1bigpOyhvfHxjfHwoYT9lLnNvbWUoKChlLHQpPT5ZKGUscFt0XSkpKTpZKGUscCkpKSYmKGwmJmwoKSxadCh0LHMsMyxbZSxwPT09UW4/dm9pZCAwOnAsdV0pLHA9ZSl9ZWxzZSBoLnJ1bigpfTtsZXQgZDtmLmFsbG93UmVjdXJzZT0hIXQsZD1cInN5bmNcIj09PXI/ZjpcInBvc3RcIj09PXI/KCk9PlByKGYscyYmcy5zdXNwZW5zZSk6KCk9PmZ1bmN0aW9uKGUpe2duKGUscm4sb24sc24pfShmKTtjb25zdCBoPW5ldyBnZShpLGQpO3JldHVybiB0P24/ZigpOnA9aC5ydW4oKTpcInBvc3RcIj09PXI/UHIoaC5ydW4uYmluZChoKSxzJiZzLnN1c3BlbnNlKTpoLnJ1bigpLCgpPT57aC5zdG9wKCkscyYmcy5zY29wZSYmayhzLnNjb3BlLmVmZmVjdHMsaCl9fWZ1bmN0aW9uIHRvKGUsdCxuKXtjb25zdCBvPXRoaXMucHJveHkscj1QKGUpP2UuaW5jbHVkZXMoXCIuXCIpP25vKG8sZSk6KCk9Pm9bZV06ZS5iaW5kKG8sbyk7bGV0IHM7Rih0KT9zPXQ6KHM9dC5oYW5kbGVyLG49dCk7Y29uc3QgaT1Dcztrcyh0aGlzKTtjb25zdCBsPWVvKHIscy5iaW5kKG8pLG4pO3JldHVybiBpP2tzKGkpOlRzKCksbH1mdW5jdGlvbiBubyhlLHQpe2NvbnN0IG49dC5zcGxpdChcIi5cIik7cmV0dXJuKCk9PntsZXQgdD1lO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGgmJnQ7ZSsrKXQ9dFtuW2VdXTtyZXR1cm4gdH19ZnVuY3Rpb24gb28oZSx0KXtpZighTShlKXx8ZS5fX3Zfc2tpcClyZXR1cm4gZTtpZigodD10fHxuZXcgU2V0KS5oYXMoZSkpcmV0dXJuIGU7aWYodC5hZGQoZSksUnQoZSkpb28oZS52YWx1ZSx0KTtlbHNlIGlmKEUoZSkpZm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspb28oZVtuXSx0KTtlbHNlIGlmKE8oZSl8fCQoZSkpZS5mb3JFYWNoKChlPT57b28oZSx0KX0pKTtlbHNlIGlmKEwoZSkpZm9yKGNvbnN0IG4gaW4gZSlvbyhlW25dLHQpO3JldHVybiBlfWZ1bmN0aW9uIHJvKCl7Y29uc3QgZT17aXNNb3VudGVkOiExLGlzTGVhdmluZzohMSxpc1VubW91bnRpbmc6ITEsbGVhdmluZ1ZOb2RlczpuZXcgTWFwfTtyZXR1cm4gT28oKCgpPT57ZS5pc01vdW50ZWQ9ITB9KSksUG8oKCgpPT57ZS5pc1VubW91bnRpbmc9ITB9KSksZX1jb25zdCBzbz1bRnVuY3Rpb24sQXJyYXldLGlvPXtuYW1lOlwiQmFzZVRyYW5zaXRpb25cIixwcm9wczp7bW9kZTpTdHJpbmcsYXBwZWFyOkJvb2xlYW4scGVyc2lzdGVkOkJvb2xlYW4sb25CZWZvcmVFbnRlcjpzbyxvbkVudGVyOnNvLG9uQWZ0ZXJFbnRlcjpzbyxvbkVudGVyQ2FuY2VsbGVkOnNvLG9uQmVmb3JlTGVhdmU6c28sb25MZWF2ZTpzbyxvbkFmdGVyTGVhdmU6c28sb25MZWF2ZUNhbmNlbGxlZDpzbyxvbkJlZm9yZUFwcGVhcjpzbyxvbkFwcGVhcjpzbyxvbkFmdGVyQXBwZWFyOnNvLG9uQXBwZWFyQ2FuY2VsbGVkOnNvfSxzZXR1cChlLHtzbG90czp0fSl7Y29uc3Qgbj13cygpLG89cm8oKTtsZXQgcjtyZXR1cm4oKT0+e2NvbnN0IHM9dC5kZWZhdWx0JiZmbyh0LmRlZmF1bHQoKSwhMCk7aWYoIXN8fCFzLmxlbmd0aClyZXR1cm47bGV0IGk9c1swXTtpZihzLmxlbmd0aD4xKWZvcihjb25zdCBlIG9mIHMpaWYoZS50eXBlIT09S3Ipe2k9ZTticmVha31jb25zdCBsPWt0KGUpLHttb2RlOmN9PWw7aWYoby5pc0xlYXZpbmcpcmV0dXJuIGFvKGkpO2NvbnN0IGE9dW8oaSk7aWYoIWEpcmV0dXJuIGFvKGkpO2NvbnN0IHU9Y28oYSxsLG8sbik7cG8oYSx1KTtjb25zdCBwPW4uc3ViVHJlZSxmPXAmJnVvKHApO2xldCBkPSExO2NvbnN0e2dldFRyYW5zaXRpb25LZXk6aH09YS50eXBlO2lmKGgpe2NvbnN0IGU9aCgpO3ZvaWQgMD09PXI/cj1lOmUhPT1yJiYocj1lLGQ9ITApfWlmKGYmJmYudHlwZSE9PUtyJiYoIXJzKGEsZil8fGQpKXtjb25zdCBlPWNvKGYsbCxvLG4pO2lmKHBvKGYsZSksXCJvdXQtaW5cIj09PWMpcmV0dXJuIG8uaXNMZWF2aW5nPSEwLGUuYWZ0ZXJMZWF2ZT0oKT0+e28uaXNMZWF2aW5nPSExLG4udXBkYXRlKCl9LGFvKGkpO1wiaW4tb3V0XCI9PT1jJiZhLnR5cGUhPT1LciYmKGUuZGVsYXlMZWF2ZT0oZSx0LG4pPT57bG8obyxmKVtTdHJpbmcoZi5rZXkpXT1mLGUuX2xlYXZlQ2I9KCk9Pnt0KCksZS5fbGVhdmVDYj12b2lkIDAsZGVsZXRlIHUuZGVsYXllZExlYXZlfSx1LmRlbGF5ZWRMZWF2ZT1ufSl9cmV0dXJuIGl9fX07ZnVuY3Rpb24gbG8oZSx0KXtjb25zdHtsZWF2aW5nVk5vZGVzOm59PWU7bGV0IG89bi5nZXQodC50eXBlKTtyZXR1cm4gb3x8KG89T2JqZWN0LmNyZWF0ZShudWxsKSxuLnNldCh0LnR5cGUsbykpLG99ZnVuY3Rpb24gY28oZSx0LG4sbyl7Y29uc3R7YXBwZWFyOnIsbW9kZTpzLHBlcnNpc3RlZDppPSExLG9uQmVmb3JlRW50ZXI6bCxvbkVudGVyOmMsb25BZnRlckVudGVyOmEsb25FbnRlckNhbmNlbGxlZDp1LG9uQmVmb3JlTGVhdmU6cCxvbkxlYXZlOmYsb25BZnRlckxlYXZlOmQsb25MZWF2ZUNhbmNlbGxlZDpoLG9uQmVmb3JlQXBwZWFyOm0sb25BcHBlYXI6ZyxvbkFmdGVyQXBwZWFyOnYsb25BcHBlYXJDYW5jZWxsZWQ6eX09dCxfPVN0cmluZyhlLmtleSksYj1sbyhuLGUpLFM9KGUsdCk9PntlJiZadChlLG8sOSx0KX0seD0oZSx0KT0+e2NvbnN0IG49dFsxXTtTKGUsdCksRShlKT9lLmV2ZXJ5KChlPT5lLmxlbmd0aDw9MSkpJiZuKCk6ZS5sZW5ndGg8PTEmJm4oKX0sQz17bW9kZTpzLHBlcnNpc3RlZDppLGJlZm9yZUVudGVyKHQpe2xldCBvPWw7aWYoIW4uaXNNb3VudGVkKXtpZighcilyZXR1cm47bz1tfHxsfXQuX2xlYXZlQ2ImJnQuX2xlYXZlQ2IoITApO2NvbnN0IHM9YltfXTtzJiZycyhlLHMpJiZzLmVsLl9sZWF2ZUNiJiZzLmVsLl9sZWF2ZUNiKCksUyhvLFt0XSl9LGVudGVyKGUpe2xldCB0PWMsbz1hLHM9dTtpZighbi5pc01vdW50ZWQpe2lmKCFyKXJldHVybjt0PWd8fGMsbz12fHxhLHM9eXx8dX1sZXQgaT0hMTtjb25zdCBsPWUuX2VudGVyQ2I9dD0+e2l8fChpPSEwLFModD9zOm8sW2VdKSxDLmRlbGF5ZWRMZWF2ZSYmQy5kZWxheWVkTGVhdmUoKSxlLl9lbnRlckNiPXZvaWQgMCl9O3Q/eCh0LFtlLGxdKTpsKCl9LGxlYXZlKHQsbyl7Y29uc3Qgcj1TdHJpbmcoZS5rZXkpO2lmKHQuX2VudGVyQ2ImJnQuX2VudGVyQ2IoITApLG4uaXNVbm1vdW50aW5nKXJldHVybiBvKCk7UyhwLFt0XSk7bGV0IHM9ITE7Y29uc3QgaT10Ll9sZWF2ZUNiPW49PntzfHwocz0hMCxvKCksUyhuP2g6ZCxbdF0pLHQuX2xlYXZlQ2I9dm9pZCAwLGJbcl09PT1lJiZkZWxldGUgYltyXSl9O2Jbcl09ZSxmP3goZixbdCxpXSk6aSgpfSxjbG9uZTplPT5jbyhlLHQsbixvKX07cmV0dXJuIEN9ZnVuY3Rpb24gYW8oZSl7aWYoeW8oZSkpcmV0dXJuKGU9ZnMoZSkpLmNoaWxkcmVuPW51bGwsZX1mdW5jdGlvbiB1byhlKXtyZXR1cm4geW8oZSk/ZS5jaGlsZHJlbj9lLmNoaWxkcmVuWzBdOnZvaWQgMDplfWZ1bmN0aW9uIHBvKGUsdCl7NiZlLnNoYXBlRmxhZyYmZS5jb21wb25lbnQ/cG8oZS5jb21wb25lbnQuc3ViVHJlZSx0KToxMjgmZS5zaGFwZUZsYWc/KGUuc3NDb250ZW50LnRyYW5zaXRpb249dC5jbG9uZShlLnNzQ29udGVudCksZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb249dC5jbG9uZShlLnNzRmFsbGJhY2spKTplLnRyYW5zaXRpb249dH1mdW5jdGlvbiBmbyhlLHQ9ITEsbil7bGV0IG89W10scj0wO2ZvcihsZXQgcz0wO3M8ZS5sZW5ndGg7cysrKXtsZXQgaT1lW3NdO2NvbnN0IGw9bnVsbD09bj9pLmtleTpTdHJpbmcobikrU3RyaW5nKG51bGwhPWkua2V5P2kua2V5OnMpO2kudHlwZT09PVdyPygxMjgmaS5wYXRjaEZsYWcmJnIrKyxvPW8uY29uY2F0KGZvKGkuY2hpbGRyZW4sdCxsKSkpOih0fHxpLnR5cGUhPT1LcikmJm8ucHVzaChudWxsIT1sP2ZzKGkse2tleTpsfSk6aSl9aWYocj4xKWZvcihsZXQgcz0wO3M8by5sZW5ndGg7cysrKW9bc10ucGF0Y2hGbGFnPS0yO3JldHVybiBvfWZ1bmN0aW9uIGhvKGUpe3JldHVybiBGKGUpP3tzZXR1cDplLG5hbWU6ZS5uYW1lfTplfWNvbnN0IG1vPWU9PiEhZS50eXBlLl9fYXN5bmNMb2FkZXI7ZnVuY3Rpb24gZ28oZSl7RihlKSYmKGU9e2xvYWRlcjplfSk7Y29uc3R7bG9hZGVyOnQsbG9hZGluZ0NvbXBvbmVudDpuLGVycm9yQ29tcG9uZW50Om8sZGVsYXk6cj0yMDAsdGltZW91dDpzLHN1c3BlbnNpYmxlOmk9ITAsb25FcnJvcjpsfT1lO2xldCBjLGE9bnVsbCx1PTA7Y29uc3QgcD0oKT0+e2xldCBlO3JldHVybiBhfHwoZT1hPXQoKS5jYXRjaCgoZT0+e2lmKGU9ZSBpbnN0YW5jZW9mIEVycm9yP2U6bmV3IEVycm9yKFN0cmluZyhlKSksbClyZXR1cm4gbmV3IFByb21pc2UoKCh0LG4pPT57bChlLCgoKT0+dCgodSsrLGE9bnVsbCxwKCkpKSksKCgpPT5uKGUpKSx1KzEpfSkpO3Rocm93IGV9KSkudGhlbigodD0+ZSE9PWEmJmE/YToodCYmKHQuX19lc01vZHVsZXx8XCJNb2R1bGVcIj09PXRbU3ltYm9sLnRvU3RyaW5nVGFnXSkmJih0PXQuZGVmYXVsdCksYz10LHQpKSkpfTtyZXR1cm4gaG8oe25hbWU6XCJBc3luY0NvbXBvbmVudFdyYXBwZXJcIixfX2FzeW5jTG9hZGVyOnAsZ2V0IF9fYXN5bmNSZXNvbHZlZCgpe3JldHVybiBjfSxzZXR1cCgpe2NvbnN0IGU9Q3M7aWYoYylyZXR1cm4oKT0+dm8oYyxlKTtjb25zdCB0PXQ9PnthPW51bGwsUXQodCxlLDEzLCFvKX07aWYoaSYmZS5zdXNwZW5zZSlyZXR1cm4gcCgpLnRoZW4oKHQ9PigpPT52byh0LGUpKSkuY2F0Y2goKGU9Pih0KGUpLCgpPT5vP3VzKG8se2Vycm9yOmV9KTpudWxsKSkpO2NvbnN0IGw9RnQoITEpLHU9RnQoKSxmPUZ0KCEhcik7cmV0dXJuIHImJnNldFRpbWVvdXQoKCgpPT57Zi52YWx1ZT0hMX0pLHIpLG51bGwhPXMmJnNldFRpbWVvdXQoKCgpPT57aWYoIWwudmFsdWUmJiF1LnZhbHVlKXtjb25zdCBlPW5ldyBFcnJvcihgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3N9bXMuYCk7dChlKSx1LnZhbHVlPWV9fSkscykscCgpLnRoZW4oKCgpPT57bC52YWx1ZT0hMCxlLnBhcmVudCYmeW8oZS5wYXJlbnQudm5vZGUpJiZobihlLnBhcmVudC51cGRhdGUpfSkpLmNhdGNoKChlPT57dChlKSx1LnZhbHVlPWV9KSksKCk9PmwudmFsdWUmJmM/dm8oYyxlKTp1LnZhbHVlJiZvP3VzKG8se2Vycm9yOnUudmFsdWV9KTpuJiYhZi52YWx1ZT91cyhuKTp2b2lkIDB9fSl9ZnVuY3Rpb24gdm8oZSx7dm5vZGU6e3JlZjp0LHByb3BzOm4sY2hpbGRyZW46b319KXtjb25zdCByPXVzKGUsbixvKTtyZXR1cm4gci5yZWY9dCxyfWNvbnN0IHlvPWU9PmUudHlwZS5fX2lzS2VlcEFsaXZlLF9vPXtuYW1lOlwiS2VlcEFsaXZlXCIsX19pc0tlZXBBbGl2ZTohMCxwcm9wczp7aW5jbHVkZTpbU3RyaW5nLFJlZ0V4cCxBcnJheV0sZXhjbHVkZTpbU3RyaW5nLFJlZ0V4cCxBcnJheV0sbWF4OltTdHJpbmcsTnVtYmVyXX0sc2V0dXAoZSx7c2xvdHM6dH0pe2NvbnN0IG49d3MoKSxvPW4uY3R4LHI9bmV3IE1hcCxzPW5ldyBTZXQ7bGV0IGk9bnVsbDtjb25zdCBsPW4uc3VzcGVuc2Use3JlbmRlcmVyOntwOmMsbTphLHVtOnUsbzp7Y3JlYXRlRWxlbWVudDpwfX19PW8sZj1wKFwiZGl2XCIpO2Z1bmN0aW9uIGQoZSl7a28oZSksdShlLG4sbCwhMCl9ZnVuY3Rpb24gaChlKXtyLmZvckVhY2goKCh0LG4pPT57Y29uc3Qgbz1Ccyh0LnR5cGUpOyFvfHxlJiZlKG8pfHxtKG4pfSkpfWZ1bmN0aW9uIG0oZSl7Y29uc3QgdD1yLmdldChlKTtpJiZ0LnR5cGU9PT1pLnR5cGU/aSYma28oaSk6ZCh0KSxyLmRlbGV0ZShlKSxzLmRlbGV0ZShlKX1vLmFjdGl2YXRlPShlLHQsbixvLHIpPT57Y29uc3Qgcz1lLmNvbXBvbmVudDthKGUsdCxuLDAsbCksYyhzLnZub2RlLGUsdCxuLHMsbCxvLGUuc2xvdFNjb3BlSWRzLHIpLFByKCgoKT0+e3MuaXNEZWFjdGl2YXRlZD0hMSxzLmEmJloocy5hKTtjb25zdCB0PWUucHJvcHMmJmUucHJvcHMub25Wbm9kZU1vdW50ZWQ7dCYmYnModCxzLnBhcmVudCxlKX0pLGwpfSxvLmRlYWN0aXZhdGU9ZT0+e2NvbnN0IHQ9ZS5jb21wb25lbnQ7YShlLGYsbnVsbCwxLGwpLFByKCgoKT0+e3QuZGEmJloodC5kYSk7Y29uc3Qgbj1lLnByb3BzJiZlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7biYmYnMobix0LnBhcmVudCxlKSx0LmlzRGVhY3RpdmF0ZWQ9ITB9KSxsKX0sWG4oKCgpPT5bZS5pbmNsdWRlLGUuZXhjbHVkZV0pLCgoW2UsdF0pPT57ZSYmaCgodD0+Ym8oZSx0KSkpLHQmJmgoKGU9PiFibyh0LGUpKSl9KSx7Zmx1c2g6XCJwb3N0XCIsZGVlcDohMH0pO2xldCBnPW51bGw7Y29uc3Qgdj0oKT0+e251bGwhPWcmJnIuc2V0KGcsVG8obi5zdWJUcmVlKSl9O3JldHVybiBPbyh2KSxGbyh2KSxQbygoKCk9PntyLmZvckVhY2goKGU9Pntjb25zdHtzdWJUcmVlOnQsc3VzcGVuc2U6b309bixyPVRvKHQpO2lmKGUudHlwZSE9PXIudHlwZSlkKGUpO2Vsc2V7a28ocik7Y29uc3QgZT1yLmNvbXBvbmVudC5kYTtlJiZQcihlLG8pfX0pKX0pKSwoKT0+e2lmKGc9bnVsbCwhdC5kZWZhdWx0KXJldHVybiBudWxsO2NvbnN0IG49dC5kZWZhdWx0KCksbz1uWzBdO2lmKG4ubGVuZ3RoPjEpcmV0dXJuIGk9bnVsbCxuO2lmKCEob3MobykmJig0Jm8uc2hhcGVGbGFnfHwxMjgmby5zaGFwZUZsYWcpKSlyZXR1cm4gaT1udWxsLG87bGV0IGw9VG8obyk7Y29uc3QgYz1sLnR5cGUsYT1CcyhtbyhsKT9sLnR5cGUuX19hc3luY1Jlc29sdmVkfHx7fTpjKSx7aW5jbHVkZTp1LGV4Y2x1ZGU6cCxtYXg6Zn09ZTtpZih1JiYoIWF8fCFibyh1LGEpKXx8cCYmYSYmYm8ocCxhKSlyZXR1cm4gaT1sLG87Y29uc3QgZD1udWxsPT1sLmtleT9jOmwua2V5LGg9ci5nZXQoZCk7cmV0dXJuIGwuZWwmJihsPWZzKGwpLDEyOCZvLnNoYXBlRmxhZyYmKG8uc3NDb250ZW50PWwpKSxnPWQsaD8obC5lbD1oLmVsLGwuY29tcG9uZW50PWguY29tcG9uZW50LGwudHJhbnNpdGlvbiYmcG8obCxsLnRyYW5zaXRpb24pLGwuc2hhcGVGbGFnfD01MTIscy5kZWxldGUoZCkscy5hZGQoZCkpOihzLmFkZChkKSxmJiZzLnNpemU+cGFyc2VJbnQoZiwxMCkmJm0ocy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpKSxsLnNoYXBlRmxhZ3w9MjU2LGk9bCxqbihvLnR5cGUpP286bH19fTtmdW5jdGlvbiBibyhlLHQpe3JldHVybiBFKGUpP2Uuc29tZSgoZT0+Ym8oZSx0KSkpOlAoZSk/ZS5zcGxpdChcIixcIikuaW5jbHVkZXModCk6ISFlLnRlc3QmJmUudGVzdCh0KX1mdW5jdGlvbiBTbyhlLHQpe0NvKGUsXCJhXCIsdCl9ZnVuY3Rpb24geG8oZSx0KXtDbyhlLFwiZGFcIix0KX1mdW5jdGlvbiBDbyhlLHQsbj1Dcyl7Y29uc3Qgbz1lLl9fd2RjfHwoZS5fX3dkYz0oKT0+e2xldCB0PW47Zm9yKDt0Oyl7aWYodC5pc0RlYWN0aXZhdGVkKXJldHVybjt0PXQucGFyZW50fXJldHVybiBlKCl9KTtpZihObyh0LG8sbiksbil7bGV0IGU9bi5wYXJlbnQ7Zm9yKDtlJiZlLnBhcmVudDspeW8oZS5wYXJlbnQudm5vZGUpJiZ3byhvLHQsbixlKSxlPWUucGFyZW50fX1mdW5jdGlvbiB3byhlLHQsbixvKXtjb25zdCByPU5vKHQsZSxvLCEwKTtBbygoKCk9PntrKG9bdF0scil9KSxuKX1mdW5jdGlvbiBrbyhlKXtsZXQgdD1lLnNoYXBlRmxhZzsyNTYmdCYmKHQtPTI1NiksNTEyJnQmJih0LT01MTIpLGUuc2hhcGVGbGFnPXR9ZnVuY3Rpb24gVG8oZSl7cmV0dXJuIDEyOCZlLnNoYXBlRmxhZz9lLnNzQ29udGVudDplfWZ1bmN0aW9uIE5vKGUsdCxuPUNzLG89ITEpe2lmKG4pe2NvbnN0IHI9bltlXXx8KG5bZV09W10pLHM9dC5fX3dlaHx8KHQuX193ZWg9KC4uLm8pPT57aWYobi5pc1VubW91bnRlZClyZXR1cm47eGUoKSxrcyhuKTtjb25zdCByPVp0KHQsbixlLG8pO3JldHVybiBUcygpLENlKCkscn0pO3JldHVybiBvP3IudW5zaGlmdChzKTpyLnB1c2gocyksc319Y29uc3QgRW89ZT0+KHQsbj1Dcyk9PighT3N8fFwic3BcIj09PWUpJiZObyhlLHQsbiksJG89RW8oXCJibVwiKSxPbz1FbyhcIm1cIiksUm89RW8oXCJidVwiKSxGbz1FbyhcInVcIiksUG89RW8oXCJidW1cIiksQW89RW8oXCJ1bVwiKSxNbz1FbyhcInNwXCIpLFZvPUVvKFwicnRnXCIpLElvPUVvKFwicnRjXCIpO2Z1bmN0aW9uIEJvKGUsdD1Dcyl7Tm8oXCJlY1wiLGUsdCl9ZnVuY3Rpb24gTG8oZSx0KXtjb25zdCBuPUVuO2lmKG51bGw9PT1uKXJldHVybiBlO2NvbnN0IG89VnMobil8fG4ucHJveHkscj1lLmRpcnN8fChlLmRpcnM9W10pO2ZvcihsZXQgcz0wO3M8dC5sZW5ndGg7cysrKXtsZXRbZSxuLGksbD12XT10W3NdO0YoZSkmJihlPXttb3VudGVkOmUsdXBkYXRlZDplfSksZS5kZWVwJiZvbyhuKSxyLnB1c2goe2RpcjplLGluc3RhbmNlOm8sdmFsdWU6bixvbGRWYWx1ZTp2b2lkIDAsYXJnOmksbW9kaWZpZXJzOmx9KX1yZXR1cm4gZX1mdW5jdGlvbiBqbyhlLHQsbixvKXtjb25zdCByPWUuZGlycyxzPXQmJnQuZGlycztmb3IobGV0IGk9MDtpPHIubGVuZ3RoO2krKyl7Y29uc3QgbD1yW2ldO3MmJihsLm9sZFZhbHVlPXNbaV0udmFsdWUpO2xldCBjPWwuZGlyW29dO2MmJih4ZSgpLFp0KGMsbiw4LFtlLmVsLGwsZSx0XSksQ2UoKSl9fWZ1bmN0aW9uIFVvKGUsdCl7cmV0dXJuIHpvKFwiY29tcG9uZW50c1wiLGUsITAsdCl8fGV9Y29uc3QgRG89U3ltYm9sKCk7ZnVuY3Rpb24gSG8oZSl7cmV0dXJuIFAoZSk/em8oXCJjb21wb25lbnRzXCIsZSwhMSl8fGU6ZXx8RG99ZnVuY3Rpb24gV28oZSl7cmV0dXJuIHpvKFwiZGlyZWN0aXZlc1wiLGUpfWZ1bmN0aW9uIHpvKGUsdCxuPSEwLG89ITEpe2NvbnN0IHI9RW58fENzO2lmKHIpe2NvbnN0IG49ci50eXBlO2lmKFwiY29tcG9uZW50c1wiPT09ZSl7Y29uc3QgZT1CcyhuLCExKTtpZihlJiYoZT09PXR8fGU9PT16KHQpfHxlPT09cSh6KHQpKSkpcmV0dXJuIG59Y29uc3Qgcz1LbyhyW2VdfHxuW2VdLHQpfHxLbyhyLmFwcENvbnRleHRbZV0sdCk7cmV0dXJuIXMmJm8/bjpzfX1mdW5jdGlvbiBLbyhlLHQpe3JldHVybiBlJiYoZVt0XXx8ZVt6KHQpXXx8ZVtxKHoodCkpXSl9ZnVuY3Rpb24gR28oZSx0LG4sbyl7bGV0IHI7Y29uc3Qgcz1uJiZuW29dO2lmKEUoZSl8fFAoZSkpe3I9bmV3IEFycmF5KGUubGVuZ3RoKTtmb3IobGV0IG49MCxvPWUubGVuZ3RoO248bztuKyspcltuXT10KGVbbl0sbix2b2lkIDAscyYmc1tuXSl9ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgZSl7cj1uZXcgQXJyYXkoZSk7Zm9yKGxldCBuPTA7bjxlO24rKylyW25dPXQobisxLG4sdm9pZCAwLHMmJnNbbl0pfWVsc2UgaWYoTShlKSlpZihlW1N5bWJvbC5pdGVyYXRvcl0pcj1BcnJheS5mcm9tKGUsKChlLG4pPT50KGUsbix2b2lkIDAscyYmc1tuXSkpKTtlbHNle2NvbnN0IG49T2JqZWN0LmtleXMoZSk7cj1uZXcgQXJyYXkobi5sZW5ndGgpO2ZvcihsZXQgbz0wLGk9bi5sZW5ndGg7bzxpO28rKyl7Y29uc3QgaT1uW29dO3Jbb109dChlW2ldLGksbyxzJiZzW29dKX19ZWxzZSByPVtdO3JldHVybiBuJiYobltvXT1yKSxyfWZ1bmN0aW9uIHFvKGUsdCl7Zm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspe2NvbnN0IG89dFtuXTtpZihFKG8pKWZvcihsZXQgdD0wO3Q8by5sZW5ndGg7dCsrKWVbb1t0XS5uYW1lXT1vW3RdLmZuO2Vsc2UgbyYmKGVbby5uYW1lXT1vLmZuKX1yZXR1cm4gZX1mdW5jdGlvbiBKbyhlLHQsbj17fSxvLHIpe2lmKEVuLmlzQ0V8fEVuLnBhcmVudCYmbW8oRW4ucGFyZW50KSYmRW4ucGFyZW50LmlzQ0UpcmV0dXJuIHVzKFwic2xvdFwiLFwiZGVmYXVsdFwiPT09dD9udWxsOntuYW1lOnR9LG8mJm8oKSk7bGV0IHM9ZVt0XTtzJiZzLl9jJiYocy5fZD0hMSksWXIoKTtjb25zdCBpPXMmJllvKHMobikpLGw9bnMoV3Ise2tleTpuLmtleXx8YF8ke3R9YH0saXx8KG8/bygpOltdKSxpJiYxPT09ZS5fPzY0Oi0yKTtyZXR1cm4hciYmbC5zY29wZUlkJiYobC5zbG90U2NvcGVJZHM9W2wuc2NvcGVJZCtcIi1zXCJdKSxzJiZzLl9jJiYocy5fZD0hMCksbH1mdW5jdGlvbiBZbyhlKXtyZXR1cm4gZS5zb21lKChlPT4hb3MoZSl8fGUudHlwZSE9PUtyJiYhKGUudHlwZT09PVdyJiYhWW8oZS5jaGlsZHJlbikpKSk/ZTpudWxsfWZ1bmN0aW9uIFpvKGUpe2NvbnN0IHQ9e307Zm9yKGNvbnN0IG4gaW4gZSl0W0oobildPWVbbl07cmV0dXJuIHR9Y29uc3QgUW89ZT0+ZT9OcyhlKT9WcyhlKXx8ZS5wcm94eTpRbyhlLnBhcmVudCk6bnVsbCxYbz13KE9iamVjdC5jcmVhdGUobnVsbCkseyQ6ZT0+ZSwkZWw6ZT0+ZS52bm9kZS5lbCwkZGF0YTplPT5lLmRhdGEsJHByb3BzOmU9PmUucHJvcHMsJGF0dHJzOmU9PmUuYXR0cnMsJHNsb3RzOmU9PmUuc2xvdHMsJHJlZnM6ZT0+ZS5yZWZzLCRwYXJlbnQ6ZT0+UW8oZS5wYXJlbnQpLCRyb290OmU9PlFvKGUucm9vdCksJGVtaXQ6ZT0+ZS5lbWl0LCRvcHRpb25zOmU9PmlyKGUpLCRmb3JjZVVwZGF0ZTplPT5lLmZ8fChlLmY9KCk9PmhuKGUudXBkYXRlKSksJG5leHRUaWNrOmU9PmUubnx8KGUubj1kbi5iaW5kKGUucHJveHkpKSwkd2F0Y2g6ZT0+dG8uYmluZChlKX0pLGVyPXtnZXQoe186ZX0sdCl7Y29uc3R7Y3R4Om4sc2V0dXBTdGF0ZTpvLGRhdGE6cixwcm9wczpzLGFjY2Vzc0NhY2hlOmksdHlwZTpsLGFwcENvbnRleHQ6Y309ZTtsZXQgYTtpZihcIiRcIiE9PXRbMF0pe2NvbnN0IGw9aVt0XTtpZih2b2lkIDAhPT1sKXN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIG9bdF07Y2FzZSAyOnJldHVybiByW3RdO2Nhc2UgNDpyZXR1cm4gblt0XTtjYXNlIDM6cmV0dXJuIHNbdF19ZWxzZXtpZihvIT09diYmTihvLHQpKXJldHVybiBpW3RdPTEsb1t0XTtpZihyIT09diYmTihyLHQpKXJldHVybiBpW3RdPTIsclt0XTtpZigoYT1lLnByb3BzT3B0aW9uc1swXSkmJk4oYSx0KSlyZXR1cm4gaVt0XT0zLHNbdF07aWYobiE9PXYmJk4obix0KSlyZXR1cm4gaVt0XT00LG5bdF07bnImJihpW3RdPTApfX1jb25zdCB1PVhvW3RdO2xldCBwLGY7cmV0dXJuIHU/KFwiJGF0dHJzXCI9PT10JiZ3ZShlLDAsdCksdShlKSk6KHA9bC5fX2Nzc01vZHVsZXMpJiYocD1wW3RdKT9wOm4hPT12JiZOKG4sdCk/KGlbdF09NCxuW3RdKTooZj1jLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLE4oZix0KT9mW3RdOnZvaWQgMCl9LHNldCh7XzplfSx0LG4pe2NvbnN0e2RhdGE6byxzZXR1cFN0YXRlOnIsY3R4OnN9PWU7cmV0dXJuIHIhPT12JiZOKHIsdCk/KHJbdF09biwhMCk6byE9PXYmJk4obyx0KT8ob1t0XT1uLCEwKTohTihlLnByb3BzLHQpJiYoKFwiJFwiIT09dFswXXx8ISh0LnNsaWNlKDEpaW4gZSkpJiYoc1t0XT1uLCEwKSl9LGhhcyh7Xzp7ZGF0YTplLHNldHVwU3RhdGU6dCxhY2Nlc3NDYWNoZTpuLGN0eDpvLGFwcENvbnRleHQ6cixwcm9wc09wdGlvbnM6c319LGkpe2xldCBsO3JldHVybiEhbltpXXx8ZSE9PXYmJk4oZSxpKXx8dCE9PXYmJk4odCxpKXx8KGw9c1swXSkmJk4obCxpKXx8TihvLGkpfHxOKFhvLGkpfHxOKHIuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsaSl9LGRlZmluZVByb3BlcnR5KGUsdCxuKXtyZXR1cm4gbnVsbCE9bi5nZXQ/ZS5fLmFjY2Vzc0NhY2hlW3RdPTA6TihuLFwidmFsdWVcIikmJnRoaXMuc2V0KGUsdCxuLnZhbHVlLG51bGwpLFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZSx0LG4pfX0sdHI9dyh7fSxlcix7Z2V0KGUsdCl7aWYodCE9PVN5bWJvbC51bnNjb3BhYmxlcylyZXR1cm4gZXIuZ2V0KGUsdCxlKX0saGFzOihlLG4pPT5cIl9cIiE9PW5bMF0mJiF0KG4pfSk7bGV0IG5yPSEwO2Z1bmN0aW9uIG9yKGUpe2NvbnN0IHQ9aXIoZSksbj1lLnByb3h5LG89ZS5jdHg7bnI9ITEsdC5iZWZvcmVDcmVhdGUmJnJyKHQuYmVmb3JlQ3JlYXRlLGUsXCJiY1wiKTtjb25zdHtkYXRhOnIsY29tcHV0ZWQ6cyxtZXRob2RzOmksd2F0Y2g6bCxwcm92aWRlOmMsaW5qZWN0OmEsY3JlYXRlZDp1LGJlZm9yZU1vdW50OnAsbW91bnRlZDpmLGJlZm9yZVVwZGF0ZTpkLHVwZGF0ZWQ6aCxhY3RpdmF0ZWQ6bSxkZWFjdGl2YXRlZDpnLGJlZm9yZVVubW91bnQ6dix1bm1vdW50ZWQ6eSxyZW5kZXI6YixyZW5kZXJUcmFja2VkOlMscmVuZGVyVHJpZ2dlcmVkOngsZXJyb3JDYXB0dXJlZDpDLHNlcnZlclByZWZldGNoOncsZXhwb3NlOmssaW5oZXJpdEF0dHJzOlQsY29tcG9uZW50czpOLGRpcmVjdGl2ZXM6JH09dDtpZihhJiZmdW5jdGlvbihlLHQsbj1fLG89ITEpe0UoZSkmJihlPXVyKGUpKTtmb3IoY29uc3QgciBpbiBlKXtjb25zdCBuPWVbcl07bGV0IHM7cz1NKG4pP1wiZGVmYXVsdFwiaW4gbj9xbihuLmZyb218fHIsbi5kZWZhdWx0LCEwKTpxbihuLmZyb218fHIpOnFuKG4pLFJ0KHMpJiZvP09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDooKT0+cy52YWx1ZSxzZXQ6ZT0+cy52YWx1ZT1lfSk6dFtyXT1zfX0oYSxvLG51bGwsZS5hcHBDb250ZXh0LmNvbmZpZy51bndyYXBJbmplY3RlZFJlZiksaSlmb3IoY29uc3QgXyBpbiBpKXtjb25zdCBlPWlbX107RihlKSYmKG9bX109ZS5iaW5kKG4pKX1pZihyKXtjb25zdCB0PXIuY2FsbChuLG4pO00odCkmJihlLmRhdGE9Z3QodCkpfWlmKG5yPSEwLHMpZm9yKGNvbnN0IEUgaW4gcyl7Y29uc3QgZT1zW0VdLHQ9RihlKT9lLmJpbmQobixuKTpGKGUuZ2V0KT9lLmdldC5iaW5kKG4sbik6XyxyPSFGKGUpJiZGKGUuc2V0KT9lLnNldC5iaW5kKG4pOl8saT1qcyh7Z2V0OnQsc2V0OnJ9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxFLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6KCk9PmkudmFsdWUsc2V0OmU9PmkudmFsdWU9ZX0pfWlmKGwpZm9yKGNvbnN0IF8gaW4gbClzcihsW19dLG8sbixfKTtpZihjKXtjb25zdCBlPUYoYyk/Yy5jYWxsKG4pOmM7UmVmbGVjdC5vd25LZXlzKGUpLmZvckVhY2goKHQ9PntHbih0LGVbdF0pfSkpfWZ1bmN0aW9uIE8oZSx0KXtFKHQpP3QuZm9yRWFjaCgodD0+ZSh0LmJpbmQobikpKSk6dCYmZSh0LmJpbmQobikpfWlmKHUmJnJyKHUsZSxcImNcIiksTygkbyxwKSxPKE9vLGYpLE8oUm8sZCksTyhGbyxoKSxPKFNvLG0pLE8oeG8sZyksTyhCbyxDKSxPKElvLFMpLE8oVm8seCksTyhQbyx2KSxPKEFvLHkpLE8oTW8sdyksRShrKSlpZihrLmxlbmd0aCl7Y29uc3QgdD1lLmV4cG9zZWR8fChlLmV4cG9zZWQ9e30pO2suZm9yRWFjaCgoZT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2dldDooKT0+bltlXSxzZXQ6dD0+bltlXT10fSl9KSl9ZWxzZSBlLmV4cG9zZWR8fChlLmV4cG9zZWQ9e30pO2ImJmUucmVuZGVyPT09XyYmKGUucmVuZGVyPWIpLG51bGwhPVQmJihlLmluaGVyaXRBdHRycz1UKSxOJiYoZS5jb21wb25lbnRzPU4pLCQmJihlLmRpcmVjdGl2ZXM9JCl9ZnVuY3Rpb24gcnIoZSx0LG4pe1p0KEUoZSk/ZS5tYXAoKGU9PmUuYmluZCh0LnByb3h5KSkpOmUuYmluZCh0LnByb3h5KSx0LG4pfWZ1bmN0aW9uIHNyKGUsdCxuLG8pe2NvbnN0IHI9by5pbmNsdWRlcyhcIi5cIik/bm8obixvKTooKT0+bltvXTtpZihQKGUpKXtjb25zdCBuPXRbZV07RihuKSYmWG4ocixuKX1lbHNlIGlmKEYoZSkpWG4ocixlLmJpbmQobikpO2Vsc2UgaWYoTShlKSlpZihFKGUpKWUuZm9yRWFjaCgoZT0+c3IoZSx0LG4sbykpKTtlbHNle2NvbnN0IG89RihlLmhhbmRsZXIpP2UuaGFuZGxlci5iaW5kKG4pOnRbZS5oYW5kbGVyXTtGKG8pJiZYbihyLG8sZSl9fWZ1bmN0aW9uIGlyKGUpe2NvbnN0IHQ9ZS50eXBlLHttaXhpbnM6bixleHRlbmRzOm99PXQse21peGluczpyLG9wdGlvbnNDYWNoZTpzLGNvbmZpZzp7b3B0aW9uTWVyZ2VTdHJhdGVnaWVzOml9fT1lLmFwcENvbnRleHQsbD1zLmdldCh0KTtsZXQgYztyZXR1cm4gbD9jPWw6ci5sZW5ndGh8fG58fG8/KGM9e30sci5sZW5ndGgmJnIuZm9yRWFjaCgoZT0+bHIoYyxlLGksITApKSksbHIoYyx0LGkpKTpjPXQscy5zZXQodCxjKSxjfWZ1bmN0aW9uIGxyKGUsdCxuLG89ITEpe2NvbnN0e21peGluczpyLGV4dGVuZHM6c309dDtzJiZscihlLHMsbiwhMCksciYmci5mb3JFYWNoKCh0PT5scihlLHQsbiwhMCkpKTtmb3IoY29uc3QgaSBpbiB0KWlmKG8mJlwiZXhwb3NlXCI9PT1pKTtlbHNle2NvbnN0IG89Y3JbaV18fG4mJm5baV07ZVtpXT1vP28oZVtpXSx0W2ldKTp0W2ldfXJldHVybiBlfWNvbnN0IGNyPXtkYXRhOmFyLHByb3BzOmZyLGVtaXRzOmZyLG1ldGhvZHM6ZnIsY29tcHV0ZWQ6ZnIsYmVmb3JlQ3JlYXRlOnByLGNyZWF0ZWQ6cHIsYmVmb3JlTW91bnQ6cHIsbW91bnRlZDpwcixiZWZvcmVVcGRhdGU6cHIsdXBkYXRlZDpwcixiZWZvcmVEZXN0cm95OnByLGJlZm9yZVVubW91bnQ6cHIsZGVzdHJveWVkOnByLHVubW91bnRlZDpwcixhY3RpdmF0ZWQ6cHIsZGVhY3RpdmF0ZWQ6cHIsZXJyb3JDYXB0dXJlZDpwcixzZXJ2ZXJQcmVmZXRjaDpwcixjb21wb25lbnRzOmZyLGRpcmVjdGl2ZXM6ZnIsd2F0Y2g6ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm4gdDtpZighdClyZXR1cm4gZTtjb25zdCBuPXcoT2JqZWN0LmNyZWF0ZShudWxsKSxlKTtmb3IoY29uc3QgbyBpbiB0KW5bb109cHIoZVtvXSx0W29dKTtyZXR1cm4gbn0scHJvdmlkZTphcixpbmplY3Q6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnIodXIoZSksdXIodCkpfX07ZnVuY3Rpb24gYXIoZSx0KXtyZXR1cm4gdD9lP2Z1bmN0aW9uKCl7cmV0dXJuIHcoRihlKT9lLmNhbGwodGhpcyx0aGlzKTplLEYodCk/dC5jYWxsKHRoaXMsdGhpcyk6dCl9OnQ6ZX1mdW5jdGlvbiB1cihlKXtpZihFKGUpKXtjb25zdCB0PXt9O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXRbZVtuXV09ZVtuXTtyZXR1cm4gdH1yZXR1cm4gZX1mdW5jdGlvbiBwcihlLHQpe3JldHVybiBlP1suLi5uZXcgU2V0KFtdLmNvbmNhdChlLHQpKV06dH1mdW5jdGlvbiBmcihlLHQpe3JldHVybiBlP3codyhPYmplY3QuY3JlYXRlKG51bGwpLGUpLHQpOnR9ZnVuY3Rpb24gZHIoZSx0LG4sbyl7Y29uc3RbcixzXT1lLnByb3BzT3B0aW9ucztsZXQgaSxsPSExO2lmKHQpZm9yKGxldCBjIGluIHQpe2lmKFUoYykpY29udGludWU7Y29uc3QgYT10W2NdO2xldCB1O3ImJk4ocix1PXooYykpP3MmJnMuaW5jbHVkZXModSk/KGl8fChpPXt9KSlbdV09YTpuW3VdPWE6Tm4oZS5lbWl0c09wdGlvbnMsYyl8fGMgaW4gbyYmYT09PW9bY118fChvW2NdPWEsbD0hMCl9aWYocyl7Y29uc3QgdD1rdChuKSxvPWl8fHY7Zm9yKGxldCBpPTA7aTxzLmxlbmd0aDtpKyspe2NvbnN0IGw9c1tpXTtuW2xdPWhyKHIsdCxsLG9bbF0sZSwhTihvLGwpKX19cmV0dXJuIGx9ZnVuY3Rpb24gaHIoZSx0LG4sbyxyLHMpe2NvbnN0IGk9ZVtuXTtpZihudWxsIT1pKXtjb25zdCBlPU4oaSxcImRlZmF1bHRcIik7aWYoZSYmdm9pZCAwPT09byl7Y29uc3QgZT1pLmRlZmF1bHQ7aWYoaS50eXBlIT09RnVuY3Rpb24mJkYoZSkpe2NvbnN0e3Byb3BzRGVmYXVsdHM6c309cjtuIGluIHM/bz1zW25dOihrcyhyKSxvPXNbbl09ZS5jYWxsKG51bGwsdCksVHMoKSl9ZWxzZSBvPWV9aVswXSYmKHMmJiFlP289ITE6IWlbMV18fFwiXCIhPT1vJiZvIT09RyhuKXx8KG89ITApKX1yZXR1cm4gb31mdW5jdGlvbiBtcihlLHQsbj0hMSl7Y29uc3Qgbz10LnByb3BzQ2FjaGUscj1vLmdldChlKTtpZihyKXJldHVybiByO2NvbnN0IHM9ZS5wcm9wcyxpPXt9LGw9W107bGV0IGM9ITE7aWYoIUYoZSkpe2NvbnN0IG89ZT0+e2M9ITA7Y29uc3RbbixvXT1tcihlLHQsITApO3coaSxuKSxvJiZsLnB1c2goLi4ubyl9OyFuJiZ0Lm1peGlucy5sZW5ndGgmJnQubWl4aW5zLmZvckVhY2gobyksZS5leHRlbmRzJiZvKGUuZXh0ZW5kcyksZS5taXhpbnMmJmUubWl4aW5zLmZvckVhY2gobyl9aWYoIXMmJiFjKXJldHVybiBvLnNldChlLHkpLHk7aWYoRShzKSlmb3IobGV0IHU9MDt1PHMubGVuZ3RoO3UrKyl7Y29uc3QgZT16KHNbdV0pO2dyKGUpJiYoaVtlXT12KX1lbHNlIGlmKHMpZm9yKGNvbnN0IHUgaW4gcyl7Y29uc3QgZT16KHUpO2lmKGdyKGUpKXtjb25zdCB0PXNbdV0sbj1pW2VdPUUodCl8fEYodCk/e3R5cGU6dH06dDtpZihuKXtjb25zdCB0PV9yKEJvb2xlYW4sbi50eXBlKSxvPV9yKFN0cmluZyxuLnR5cGUpO25bMF09dD4tMSxuWzFdPW88MHx8dDxvLCh0Pi0xfHxOKG4sXCJkZWZhdWx0XCIpKSYmbC5wdXNoKGUpfX19Y29uc3QgYT1baSxsXTtyZXR1cm4gby5zZXQoZSxhKSxhfWZ1bmN0aW9uIGdyKGUpe3JldHVyblwiJFwiIT09ZVswXX1mdW5jdGlvbiB2cihlKXtjb25zdCB0PWUmJmUudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtyZXR1cm4gdD90WzFdOm51bGw9PT1lP1wibnVsbFwiOlwiXCJ9ZnVuY3Rpb24geXIoZSx0KXtyZXR1cm4gdnIoZSk9PT12cih0KX1mdW5jdGlvbiBfcihlLHQpe3JldHVybiBFKHQpP3QuZmluZEluZGV4KCh0PT55cih0LGUpKSk6Rih0KSYmeXIodCxlKT8wOi0xfWNvbnN0IGJyPWU9PlwiX1wiPT09ZVswXXx8XCIkc3RhYmxlXCI9PT1lLFNyPWU9PkUoZSk/ZS5tYXAoZ3MpOltncyhlKV0seHI9KGUsdCxuKT0+e2lmKHQuX24pcmV0dXJuIHQ7Y29uc3Qgbz1BbigoKC4uLmUpPT5Tcih0KC4uLmUpKSksbik7cmV0dXJuIG8uX2M9ITEsb30sQ3I9KGUsdCxuKT0+e2NvbnN0IG89ZS5fY3R4O2Zvcihjb25zdCByIGluIGUpe2lmKGJyKHIpKWNvbnRpbnVlO2NvbnN0IG49ZVtyXTtpZihGKG4pKXRbcl09eHIoMCxuLG8pO2Vsc2UgaWYobnVsbCE9bil7Y29uc3QgZT1TcihuKTt0W3JdPSgpPT5lfX19LHdyPShlLHQpPT57Y29uc3Qgbj1Tcih0KTtlLnNsb3RzLmRlZmF1bHQ9KCk9Pm59O2Z1bmN0aW9uIGtyKCl7cmV0dXJue2FwcDpudWxsLGNvbmZpZzp7aXNOYXRpdmVUYWc6YixwZXJmb3JtYW5jZTohMSxnbG9iYWxQcm9wZXJ0aWVzOnt9LG9wdGlvbk1lcmdlU3RyYXRlZ2llczp7fSxlcnJvckhhbmRsZXI6dm9pZCAwLHdhcm5IYW5kbGVyOnZvaWQgMCxjb21waWxlck9wdGlvbnM6e319LG1peGluczpbXSxjb21wb25lbnRzOnt9LGRpcmVjdGl2ZXM6e30scHJvdmlkZXM6T2JqZWN0LmNyZWF0ZShudWxsKSxvcHRpb25zQ2FjaGU6bmV3IFdlYWtNYXAscHJvcHNDYWNoZTpuZXcgV2Vha01hcCxlbWl0c0NhY2hlOm5ldyBXZWFrTWFwfX1sZXQgVHI9MDtmdW5jdGlvbiBOcihlLHQpe3JldHVybiBmdW5jdGlvbihuLG89bnVsbCl7RihuKXx8KG49T2JqZWN0LmFzc2lnbih7fSxuKSksbnVsbD09b3x8TShvKXx8KG89bnVsbCk7Y29uc3Qgcj1rcigpLHM9bmV3IFNldDtsZXQgaT0hMTtjb25zdCBsPXIuYXBwPXtfdWlkOlRyKyssX2NvbXBvbmVudDpuLF9wcm9wczpvLF9jb250YWluZXI6bnVsbCxfY29udGV4dDpyLF9pbnN0YW5jZTpudWxsLHZlcnNpb246b2ksZ2V0IGNvbmZpZygpe3JldHVybiByLmNvbmZpZ30sc2V0IGNvbmZpZyhlKXt9LHVzZTooZSwuLi50KT0+KHMuaGFzKGUpfHwoZSYmRihlLmluc3RhbGwpPyhzLmFkZChlKSxlLmluc3RhbGwobCwuLi50KSk6RihlKSYmKHMuYWRkKGUpLGUobCwuLi50KSkpLGwpLG1peGluOmU9PihyLm1peGlucy5pbmNsdWRlcyhlKXx8ci5taXhpbnMucHVzaChlKSxsKSxjb21wb25lbnQ6KGUsdCk9PnQ/KHIuY29tcG9uZW50c1tlXT10LGwpOnIuY29tcG9uZW50c1tlXSxkaXJlY3RpdmU6KGUsdCk9PnQ/KHIuZGlyZWN0aXZlc1tlXT10LGwpOnIuZGlyZWN0aXZlc1tlXSxtb3VudChzLGMsYSl7aWYoIWkpe2NvbnN0IHU9dXMobixvKTtyZXR1cm4gdS5hcHBDb250ZXh0PXIsYyYmdD90KHUscyk6ZSh1LHMsYSksaT0hMCxsLl9jb250YWluZXI9cyxzLl9fdnVlX2FwcF9fPWwsVnModS5jb21wb25lbnQpfHx1LmNvbXBvbmVudC5wcm94eX19LHVubW91bnQoKXtpJiYoZShudWxsLGwuX2NvbnRhaW5lciksZGVsZXRlIGwuX2NvbnRhaW5lci5fX3Z1ZV9hcHBfXyl9LHByb3ZpZGU6KGUsdCk9PihyLnByb3ZpZGVzW2VdPXQsbCl9O3JldHVybiBsfX1mdW5jdGlvbiBFcihlLHQsbixvLHI9ITEpe2lmKEUoZSkpcmV0dXJuIHZvaWQgZS5mb3JFYWNoKCgoZSxzKT0+RXIoZSx0JiYoRSh0KT90W3NdOnQpLG4sbyxyKSkpO2lmKG1vKG8pJiYhcilyZXR1cm47Y29uc3Qgcz00Jm8uc2hhcGVGbGFnP1ZzKG8uY29tcG9uZW50KXx8by5jb21wb25lbnQucHJveHk6by5lbCxpPXI/bnVsbDpzLHtpOmwscjpjfT1lLGE9dCYmdC5yLHU9bC5yZWZzPT09dj9sLnJlZnM9e306bC5yZWZzLHA9bC5zZXR1cFN0YXRlO2lmKG51bGwhPWEmJmEhPT1jJiYoUChhKT8odVthXT1udWxsLE4ocCxhKSYmKHBbYV09bnVsbCkpOlJ0KGEpJiYoYS52YWx1ZT1udWxsKSksRihjKSlZdChjLGwsMTIsW2ksdV0pO2Vsc2V7Y29uc3QgdD1QKGMpLG89UnQoYyk7aWYodHx8byl7Y29uc3QgbD0oKT0+e2lmKGUuZil7Y29uc3Qgbj10P3VbY106Yy52YWx1ZTtyP0UobikmJmsobixzKTpFKG4pP24uaW5jbHVkZXMocyl8fG4ucHVzaChzKTp0Pyh1W2NdPVtzXSxOKHAsYykmJihwW2NdPXVbY10pKTooYy52YWx1ZT1bc10sZS5rJiYodVtlLmtdPWMudmFsdWUpKX1lbHNlIHQ/KHVbY109aSxOKHAsYykmJihwW2NdPWkpKTpvJiYoYy52YWx1ZT1pLGUuayYmKHVbZS5rXT1pKSl9O2k/KGwuaWQ9LTEsUHIobCxuKSk6bCgpfX19bGV0ICRyPSExO2NvbnN0IE9yPWU9Pi9zdmcvLnRlc3QoZS5uYW1lc3BhY2VVUkkpJiZcImZvcmVpZ25PYmplY3RcIiE9PWUudGFnTmFtZSxScj1lPT44PT09ZS5ub2RlVHlwZTtmdW5jdGlvbiBGcihlKXtjb25zdHttdDp0LHA6bixvOntwYXRjaFByb3A6byxjcmVhdGVUZXh0OnIsbmV4dFNpYmxpbmc6cyxwYXJlbnROb2RlOmkscmVtb3ZlOmwsaW5zZXJ0OmMsY3JlYXRlQ29tbWVudDphfX09ZSx1PShuLG8sbCxhLGcsdj0hMSk9Pntjb25zdCB5PVJyKG4pJiZcIltcIj09PW4uZGF0YSxfPSgpPT5oKG4sbyxsLGEsZyx5KSx7dHlwZTpiLHJlZjpTLHNoYXBlRmxhZzp4LHBhdGNoRmxhZzpDfT1vLHc9bi5ub2RlVHlwZTtvLmVsPW4sLTI9PT1DJiYodj0hMSxvLmR5bmFtaWNDaGlsZHJlbj1udWxsKTtsZXQgaz1udWxsO3N3aXRjaChiKXtjYXNlIHpyOjMhPT13P1wiXCI9PT1vLmNoaWxkcmVuPyhjKG8uZWw9cihcIlwiKSxpKG4pLG4pLGs9bik6az1fKCk6KG4uZGF0YSE9PW8uY2hpbGRyZW4mJigkcj0hMCxuLmRhdGE9by5jaGlsZHJlbiksaz1zKG4pKTticmVhaztjYXNlIEtyOms9OCE9PXd8fHk/XygpOnMobik7YnJlYWs7Y2FzZSBHcjppZigxPT09d3x8Mz09PXcpe2s9bjtjb25zdCBlPSFvLmNoaWxkcmVuLmxlbmd0aDtmb3IobGV0IHQ9MDt0PG8uc3RhdGljQ291bnQ7dCsrKWUmJihvLmNoaWxkcmVuKz0xPT09ay5ub2RlVHlwZT9rLm91dGVySFRNTDprLmRhdGEpLHQ9PT1vLnN0YXRpY0NvdW50LTEmJihvLmFuY2hvcj1rKSxrPXMoayk7cmV0dXJuIGt9az1fKCk7YnJlYWs7Y2FzZSBXcjprPXk/ZChuLG8sbCxhLGcsdik6XygpO2JyZWFrO2RlZmF1bHQ6aWYoMSZ4KWs9MSE9PXd8fG8udHlwZS50b0xvd2VyQ2FzZSgpIT09bi50YWdOYW1lLnRvTG93ZXJDYXNlKCk/XygpOnAobixvLGwsYSxnLHYpO2Vsc2UgaWYoNiZ4KXtvLnNsb3RTY29wZUlkcz1nO2NvbnN0IGU9aShuKTtpZih0KG8sZSxudWxsLGwsYSxPcihlKSx2KSxrPXk/bShuKTpzKG4pLGsmJlJyKGspJiZcInRlbGVwb3J0IGVuZFwiPT09ay5kYXRhJiYoaz1zKGspKSxtbyhvKSl7bGV0IHQ7eT8odD11cyhXciksdC5hbmNob3I9az9rLnByZXZpb3VzU2libGluZzplLmxhc3RDaGlsZCk6dD0zPT09bi5ub2RlVHlwZT9kcyhcIlwiKTp1cyhcImRpdlwiKSx0LmVsPW4sby5jb21wb25lbnQuc3ViVHJlZT10fX1lbHNlIDY0Jng/az04IT09dz9fKCk6by50eXBlLmh5ZHJhdGUobixvLGwsYSxnLHYsZSxmKToxMjgmeCYmKGs9by50eXBlLmh5ZHJhdGUobixvLGwsYSxPcihpKG4pKSxnLHYsZSx1KSl9cmV0dXJuIG51bGwhPVMmJkVyKFMsbnVsbCxhLG8pLGt9LHA9KGUsdCxuLHIscyxpKT0+e2k9aXx8ISF0LmR5bmFtaWNDaGlsZHJlbjtjb25zdHt0eXBlOmMscHJvcHM6YSxwYXRjaEZsYWc6dSxzaGFwZUZsYWc6cCxkaXJzOmR9PXQsaD1cImlucHV0XCI9PT1jJiZkfHxcIm9wdGlvblwiPT09YztpZihofHwtMSE9PXUpe2lmKGQmJmpvKHQsbnVsbCxuLFwiY3JlYXRlZFwiKSxhKWlmKGh8fCFpfHw0OCZ1KWZvcihjb25zdCB0IGluIGEpKGgmJnQuZW5kc1dpdGgoXCJ2YWx1ZVwiKXx8eCh0KSYmIVUodCkpJiZvKGUsdCxudWxsLGFbdF0sITEsdm9pZCAwLG4pO2Vsc2UgYS5vbkNsaWNrJiZvKGUsXCJvbkNsaWNrXCIsbnVsbCxhLm9uQ2xpY2ssITEsdm9pZCAwLG4pO2xldCBjO2lmKChjPWEmJmEub25Wbm9kZUJlZm9yZU1vdW50KSYmYnMoYyxuLHQpLGQmJmpvKHQsbnVsbCxuLFwiYmVmb3JlTW91bnRcIiksKChjPWEmJmEub25Wbm9kZU1vdW50ZWQpfHxkKSYmem4oKCgpPT57YyYmYnMoYyxuLHQpLGQmJmpvKHQsbnVsbCxuLFwibW91bnRlZFwiKX0pLHIpLDE2JnAmJighYXx8IWEuaW5uZXJIVE1MJiYhYS50ZXh0Q29udGVudCkpe2xldCBvPWYoZS5maXJzdENoaWxkLHQsZSxuLHIscyxpKTtmb3IoO287KXskcj0hMDtjb25zdCBlPW87bz1vLm5leHRTaWJsaW5nLGwoZSl9fWVsc2UgOCZwJiZlLnRleHRDb250ZW50IT09dC5jaGlsZHJlbiYmKCRyPSEwLGUudGV4dENvbnRlbnQ9dC5jaGlsZHJlbil9cmV0dXJuIGUubmV4dFNpYmxpbmd9LGY9KGUsdCxvLHIscyxpLGwpPT57bD1sfHwhIXQuZHluYW1pY0NoaWxkcmVuO2NvbnN0IGM9dC5jaGlsZHJlbixhPWMubGVuZ3RoO2ZvcihsZXQgcD0wO3A8YTtwKyspe2NvbnN0IHQ9bD9jW3BdOmNbcF09Z3MoY1twXSk7aWYoZSllPXUoZSx0LHIscyxpLGwpO2Vsc2V7aWYodC50eXBlPT09enImJiF0LmNoaWxkcmVuKWNvbnRpbnVlOyRyPSEwLG4obnVsbCx0LG8sbnVsbCxyLHMsT3IobyksaSl9fXJldHVybiBlfSxkPShlLHQsbixvLHIsbCk9Pntjb25zdHtzbG90U2NvcGVJZHM6dX09dDt1JiYocj1yP3IuY29uY2F0KHUpOnUpO2NvbnN0IHA9aShlKSxkPWYocyhlKSx0LHAsbixvLHIsbCk7cmV0dXJuIGQmJlJyKGQpJiZcIl1cIj09PWQuZGF0YT9zKHQuYW5jaG9yPWQpOigkcj0hMCxjKHQuYW5jaG9yPWEoXCJdXCIpLHAsZCksZCl9LGg9KGUsdCxvLHIsYyxhKT0+e2lmKCRyPSEwLHQuZWw9bnVsbCxhKXtjb25zdCB0PW0oZSk7Zm9yKDs7KXtjb25zdCBuPXMoZSk7aWYoIW58fG49PT10KWJyZWFrO2wobil9fWNvbnN0IHU9cyhlKSxwPWkoZSk7cmV0dXJuIGwoZSksbihudWxsLHQscCx1LG8scixPcihwKSxjKSx1fSxtPWU9PntsZXQgdD0wO2Zvcig7ZTspaWYoKGU9cyhlKSkmJlJyKGUpJiYoXCJbXCI9PT1lLmRhdGEmJnQrKyxcIl1cIj09PWUuZGF0YSkpe2lmKDA9PT10KXJldHVybiBzKGUpO3QtLX1yZXR1cm4gZX07cmV0dXJuWyhlLHQpPT57aWYoIXQuaGFzQ2hpbGROb2RlcygpKXJldHVybiBuKG51bGwsZSx0KSxfbigpLHZvaWQodC5fdm5vZGU9ZSk7JHI9ITEsdSh0LmZpcnN0Q2hpbGQsZSxudWxsLG51bGwsbnVsbCksX24oKSx0Ll92bm9kZT1lLCRyJiZjb25zb2xlLmVycm9yKFwiSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5cIil9LHVdfWNvbnN0IFByPXpuO2Z1bmN0aW9uIEFyKGUpe3JldHVybiBWcihlKX1mdW5jdGlvbiBNcihlKXtyZXR1cm4gVnIoZSxGcil9ZnVuY3Rpb24gVnIoZSx0KXsoZWV8fChlZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6e30pKS5fX1ZVRV9fPSEwO2NvbnN0e2luc2VydDpuLHJlbW92ZTpvLHBhdGNoUHJvcDpyLGNyZWF0ZUVsZW1lbnQ6cyxjcmVhdGVUZXh0OmksY3JlYXRlQ29tbWVudDpsLHNldFRleHQ6YyxzZXRFbGVtZW50VGV4dDphLHBhcmVudE5vZGU6dSxuZXh0U2libGluZzpwLHNldFNjb3BlSWQ6Zj1fLGNsb25lTm9kZTpkLGluc2VydFN0YXRpY0NvbnRlbnQ6aH09ZSxtPShlLHQsbixvPW51bGwscj1udWxsLHM9bnVsbCxpPSExLGw9bnVsbCxjPSEhdC5keW5hbWljQ2hpbGRyZW4pPT57aWYoZT09PXQpcmV0dXJuO2UmJiFycyhlLHQpJiYobz1ZKGUpLEgoZSxyLHMsITApLGU9bnVsbCksLTI9PT10LnBhdGNoRmxhZyYmKGM9ITEsdC5keW5hbWljQ2hpbGRyZW49bnVsbCk7Y29uc3R7dHlwZTphLHJlZjp1LHNoYXBlRmxhZzpwfT10O3N3aXRjaChhKXtjYXNlIHpyOmcoZSx0LG4sbyk7YnJlYWs7Y2FzZSBLcjpiKGUsdCxuLG8pO2JyZWFrO2Nhc2UgR3I6bnVsbD09ZSYmUyh0LG4sbyxpKTticmVhaztjYXNlIFdyOlIoZSx0LG4sbyxyLHMsaSxsLGMpO2JyZWFrO2RlZmF1bHQ6MSZwP3goZSx0LG4sbyxyLHMsaSxsLGMpOjYmcD9GKGUsdCxuLG8scixzLGksbCxjKTooNjQmcHx8MTI4JnApJiZhLnByb2Nlc3MoZSx0LG4sbyxyLHMsaSxsLGMsdGUpfW51bGwhPXUmJnImJkVyKHUsZSYmZS5yZWYscyx0fHxlLCF0KX0sZz0oZSx0LG8scik9PntpZihudWxsPT1lKW4odC5lbD1pKHQuY2hpbGRyZW4pLG8scik7ZWxzZXtjb25zdCBuPXQuZWw9ZS5lbDt0LmNoaWxkcmVuIT09ZS5jaGlsZHJlbiYmYyhuLHQuY2hpbGRyZW4pfX0sYj0oZSx0LG8scik9PntudWxsPT1lP24odC5lbD1sKHQuY2hpbGRyZW58fFwiXCIpLG8scik6dC5lbD1lLmVsfSxTPShlLHQsbixvKT0+e1tlLmVsLGUuYW5jaG9yXT1oKGUuY2hpbGRyZW4sdCxuLG8sZS5lbCxlLmFuY2hvcil9LHg9KGUsdCxuLG8scixzLGksbCxjKT0+e2k9aXx8XCJzdmdcIj09PXQudHlwZSxudWxsPT1lP0ModCxuLG8scixzLGksbCxjKTpFKGUsdCxyLHMsaSxsLGMpfSxDPShlLHQsbyxpLGwsYyx1LHApPT57bGV0IGYsaDtjb25zdHt0eXBlOm0scHJvcHM6ZyxzaGFwZUZsYWc6dix0cmFuc2l0aW9uOnkscGF0Y2hGbGFnOl8sZGlyczpifT1lO2lmKGUuZWwmJnZvaWQgMCE9PWQmJi0xPT09XylmPWUuZWw9ZChlLmVsKTtlbHNle2lmKGY9ZS5lbD1zKGUudHlwZSxjLGcmJmcuaXMsZyksOCZ2P2EoZixlLmNoaWxkcmVuKToxNiZ2JiZUKGUuY2hpbGRyZW4sZixudWxsLGksbCxjJiZcImZvcmVpZ25PYmplY3RcIiE9PW0sdSxwKSxiJiZqbyhlLG51bGwsaSxcImNyZWF0ZWRcIiksZyl7Zm9yKGNvbnN0IHQgaW4gZylcInZhbHVlXCI9PT10fHxVKHQpfHxyKGYsdCxudWxsLGdbdF0sYyxlLmNoaWxkcmVuLGksbCxKKTtcInZhbHVlXCJpbiBnJiZyKGYsXCJ2YWx1ZVwiLG51bGwsZy52YWx1ZSksKGg9Zy5vblZub2RlQmVmb3JlTW91bnQpJiZicyhoLGksZSl9ayhmLGUsZS5zY29wZUlkLHUsaSl9YiYmam8oZSxudWxsLGksXCJiZWZvcmVNb3VudFwiKTtjb25zdCBTPSghbHx8bCYmIWwucGVuZGluZ0JyYW5jaCkmJnkmJiF5LnBlcnNpc3RlZDtTJiZ5LmJlZm9yZUVudGVyKGYpLG4oZix0LG8pLCgoaD1nJiZnLm9uVm5vZGVNb3VudGVkKXx8U3x8YikmJlByKCgoKT0+e2gmJmJzKGgsaSxlKSxTJiZ5LmVudGVyKGYpLGImJmpvKGUsbnVsbCxpLFwibW91bnRlZFwiKX0pLGwpfSxrPShlLHQsbixvLHIpPT57aWYobiYmZihlLG4pLG8pZm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspZihlLG9bc10pO2lmKHIpe2lmKHQ9PT1yLnN1YlRyZWUpe2NvbnN0IHQ9ci52bm9kZTtrKGUsdCx0LnNjb3BlSWQsdC5zbG90U2NvcGVJZHMsci5wYXJlbnQpfX19LFQ9KGUsdCxuLG8scixzLGksbCxjPTApPT57Zm9yKGxldCBhPWM7YTxlLmxlbmd0aDthKyspe2NvbnN0IGM9ZVthXT1sP3ZzKGVbYV0pOmdzKGVbYV0pO20obnVsbCxjLHQsbixvLHIscyxpLGwpfX0sRT0oZSx0LG4sbyxzLGksbCk9Pntjb25zdCBjPXQuZWw9ZS5lbDtsZXR7cGF0Y2hGbGFnOnUsZHluYW1pY0NoaWxkcmVuOnAsZGlyczpmfT10O3V8PTE2JmUucGF0Y2hGbGFnO2NvbnN0IGQ9ZS5wcm9wc3x8dixoPXQucHJvcHN8fHY7bGV0IG07biYmSXIobiwhMSksKG09aC5vblZub2RlQmVmb3JlVXBkYXRlKSYmYnMobSxuLHQsZSksZiYmam8odCxlLG4sXCJiZWZvcmVVcGRhdGVcIiksbiYmSXIobiwhMCk7Y29uc3QgZz1zJiZcImZvcmVpZ25PYmplY3RcIiE9PXQudHlwZTtpZihwPyQoZS5keW5hbWljQ2hpbGRyZW4scCxjLG4sbyxnLGkpOmx8fEIoZSx0LGMsbnVsbCxuLG8sZyxpLCExKSx1PjApe2lmKDE2JnUpTyhjLHQsZCxoLG4sbyxzKTtlbHNlIGlmKDImdSYmZC5jbGFzcyE9PWguY2xhc3MmJnIoYyxcImNsYXNzXCIsbnVsbCxoLmNsYXNzLHMpLDQmdSYmcihjLFwic3R5bGVcIixkLnN0eWxlLGguc3R5bGUscyksOCZ1KXtjb25zdCBpPXQuZHluYW1pY1Byb3BzO2ZvcihsZXQgdD0wO3Q8aS5sZW5ndGg7dCsrKXtjb25zdCBsPWlbdF0sYT1kW2xdLHU9aFtsXTt1PT09YSYmXCJ2YWx1ZVwiIT09bHx8cihjLGwsYSx1LHMsZS5jaGlsZHJlbixuLG8sSil9fTEmdSYmZS5jaGlsZHJlbiE9PXQuY2hpbGRyZW4mJmEoYyx0LmNoaWxkcmVuKX1lbHNlIGx8fG51bGwhPXB8fE8oYyx0LGQsaCxuLG8scyk7KChtPWgub25Wbm9kZVVwZGF0ZWQpfHxmKSYmUHIoKCgpPT57bSYmYnMobSxuLHQsZSksZiYmam8odCxlLG4sXCJ1cGRhdGVkXCIpfSksbyl9LCQ9KGUsdCxuLG8scixzLGkpPT57Zm9yKGxldCBsPTA7bDx0Lmxlbmd0aDtsKyspe2NvbnN0IGM9ZVtsXSxhPXRbbF0scD1jLmVsJiYoYy50eXBlPT09V3J8fCFycyhjLGEpfHw3MCZjLnNoYXBlRmxhZyk/dShjLmVsKTpuO20oYyxhLHAsbnVsbCxvLHIscyxpLCEwKX19LE89KGUsdCxuLG8scyxpLGwpPT57aWYobiE9PW8pe2Zvcihjb25zdCBjIGluIG8pe2lmKFUoYykpY29udGludWU7Y29uc3QgYT1vW2NdLHU9bltjXTthIT09dSYmXCJ2YWx1ZVwiIT09YyYmcihlLGMsdSxhLGwsdC5jaGlsZHJlbixzLGksSil9aWYobiE9PXYpZm9yKGNvbnN0IGMgaW4gbilVKGMpfHxjIGluIG98fHIoZSxjLG5bY10sbnVsbCxsLHQuY2hpbGRyZW4scyxpLEopO1widmFsdWVcImluIG8mJnIoZSxcInZhbHVlXCIsbi52YWx1ZSxvLnZhbHVlKX19LFI9KGUsdCxvLHIscyxsLGMsYSx1KT0+e2NvbnN0IHA9dC5lbD1lP2UuZWw6aShcIlwiKSxmPXQuYW5jaG9yPWU/ZS5hbmNob3I6aShcIlwiKTtsZXR7cGF0Y2hGbGFnOmQsZHluYW1pY0NoaWxkcmVuOmgsc2xvdFNjb3BlSWRzOm19PXQ7bSYmKGE9YT9hLmNvbmNhdChtKTptKSxudWxsPT1lPyhuKHAsbyxyKSxuKGYsbyxyKSxUKHQuY2hpbGRyZW4sbyxmLHMsbCxjLGEsdSkpOmQ+MCYmNjQmZCYmaCYmZS5keW5hbWljQ2hpbGRyZW4/KCQoZS5keW5hbWljQ2hpbGRyZW4saCxvLHMsbCxjLGEpLChudWxsIT10LmtleXx8cyYmdD09PXMuc3ViVHJlZSkmJkJyKGUsdCwhMCkpOkIoZSx0LG8sZixzLGwsYyxhLHUpfSxGPShlLHQsbixvLHIscyxpLGwsYyk9Pnt0LnNsb3RTY29wZUlkcz1sLG51bGw9PWU/NTEyJnQuc2hhcGVGbGFnP3IuY3R4LmFjdGl2YXRlKHQsbixvLGksYyk6UCh0LG4sbyxyLHMsaSxjKTpBKGUsdCxjKX0sUD0oZSx0LG4sbyxyLHMsaSk9Pntjb25zdCBsPWUuY29tcG9uZW50PWZ1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUudHlwZSxyPSh0P3QuYXBwQ29udGV4dDplLmFwcENvbnRleHQpfHxTcyxzPXt1aWQ6eHMrKyx2bm9kZTplLHR5cGU6byxwYXJlbnQ6dCxhcHBDb250ZXh0OnIscm9vdDpudWxsLG5leHQ6bnVsbCxzdWJUcmVlOm51bGwsZWZmZWN0Om51bGwsdXBkYXRlOm51bGwsc2NvcGU6bmV3IG5lKCEwKSxyZW5kZXI6bnVsbCxwcm94eTpudWxsLGV4cG9zZWQ6bnVsbCxleHBvc2VQcm94eTpudWxsLHdpdGhQcm94eTpudWxsLHByb3ZpZGVzOnQ/dC5wcm92aWRlczpPYmplY3QuY3JlYXRlKHIucHJvdmlkZXMpLGFjY2Vzc0NhY2hlOm51bGwscmVuZGVyQ2FjaGU6W10sY29tcG9uZW50czpudWxsLGRpcmVjdGl2ZXM6bnVsbCxwcm9wc09wdGlvbnM6bXIobyxyKSxlbWl0c09wdGlvbnM6VG4obyxyKSxlbWl0Om51bGwsZW1pdHRlZDpudWxsLHByb3BzRGVmYXVsdHM6dixpbmhlcml0QXR0cnM6by5pbmhlcml0QXR0cnMsY3R4OnYsZGF0YTp2LHByb3BzOnYsYXR0cnM6dixzbG90czp2LHJlZnM6dixzZXR1cFN0YXRlOnYsc2V0dXBDb250ZXh0Om51bGwsc3VzcGVuc2U6bixzdXNwZW5zZUlkOm4/bi5wZW5kaW5nSWQ6MCxhc3luY0RlcDpudWxsLGFzeW5jUmVzb2x2ZWQ6ITEsaXNNb3VudGVkOiExLGlzVW5tb3VudGVkOiExLGlzRGVhY3RpdmF0ZWQ6ITEsYmM6bnVsbCxjOm51bGwsYm06bnVsbCxtOm51bGwsYnU6bnVsbCx1Om51bGwsdW06bnVsbCxidW06bnVsbCxkYTpudWxsLGE6bnVsbCxydGc6bnVsbCxydGM6bnVsbCxlYzpudWxsLHNwOm51bGx9O3MuY3R4PXtfOnN9LHMucm9vdD10P3Qucm9vdDpzLHMuZW1pdD1rbi5iaW5kKG51bGwscyksZS5jZSYmZS5jZShzKTtyZXR1cm4gc30oZSxvLHIpO2lmKHlvKGUpJiYobC5jdHgucmVuZGVyZXI9dGUpLGZ1bmN0aW9uKGUsdD0hMSl7T3M9dDtjb25zdHtwcm9wczpuLGNoaWxkcmVuOm99PWUudm5vZGUscj1OcyhlKTsoZnVuY3Rpb24oZSx0LG4sbz0hMSl7Y29uc3Qgcj17fSxzPXt9O1EocyxpcywxKSxlLnByb3BzRGVmYXVsdHM9T2JqZWN0LmNyZWF0ZShudWxsKSxkcihlLHQscixzKTtmb3IoY29uc3QgaSBpbiBlLnByb3BzT3B0aW9uc1swXSlpIGluIHJ8fChyW2ldPXZvaWQgMCk7ZS5wcm9wcz1uP28/cjp2dChyKTplLnR5cGUucHJvcHM/cjpzLGUuYXR0cnM9c30pKGUsbixyLHQpLCgoZSx0KT0+e2lmKDMyJmUudm5vZGUuc2hhcGVGbGFnKXtjb25zdCBuPXQuXztuPyhlLnNsb3RzPWt0KHQpLFEodCxcIl9cIixuKSk6Q3IodCxlLnNsb3RzPXt9KX1lbHNlIGUuc2xvdHM9e30sdCYmd3IoZSx0KTtRKGUuc2xvdHMsaXMsMSl9KShlLG8pO2NvbnN0IHM9cj9mdW5jdGlvbihlLHQpe2NvbnN0IG49ZS50eXBlO2UuYWNjZXNzQ2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKSxlLnByb3h5PVR0KG5ldyBQcm94eShlLmN0eCxlcikpO2NvbnN0e3NldHVwOm99PW47aWYobyl7Y29uc3Qgbj1lLnNldHVwQ29udGV4dD1vLmxlbmd0aD4xP01zKGUpOm51bGw7a3MoZSkseGUoKTtjb25zdCByPVl0KG8sZSwwLFtlLnByb3BzLG5dKTtpZihDZSgpLFRzKCksVihyKSl7aWYoci50aGVuKFRzLFRzKSx0KXJldHVybiByLnRoZW4oKG49PntScyhlLG4sdCl9KSkuY2F0Y2goKHQ9PntRdCh0LGUsMCl9KSk7ZS5hc3luY0RlcD1yfWVsc2UgUnMoZSxyLHQpfWVsc2UgQXMoZSx0KX0oZSx0KTp2b2lkIDA7T3M9ITF9KGwpLGwuYXN5bmNEZXApe2lmKHImJnIucmVnaXN0ZXJEZXAobCxNKSwhZS5lbCl7Y29uc3QgZT1sLnN1YlRyZWU9dXMoS3IpO2IobnVsbCxlLHQsbil9fWVsc2UgTShsLGUsdCxuLHIscyxpKX0sQT0oZSx0LG4pPT57Y29uc3Qgbz10LmNvbXBvbmVudD1lLmNvbXBvbmVudDtpZihmdW5jdGlvbihlLHQsbil7Y29uc3R7cHJvcHM6byxjaGlsZHJlbjpyLGNvbXBvbmVudDpzfT1lLHtwcm9wczppLGNoaWxkcmVuOmwscGF0Y2hGbGFnOmN9PXQsYT1zLmVtaXRzT3B0aW9ucztpZih0LmRpcnN8fHQudHJhbnNpdGlvbilyZXR1cm4hMDtpZighKG4mJmM+PTApKXJldHVybiEoIXImJiFsfHxsJiZsLiRzdGFibGUpfHxvIT09aSYmKG8/IWl8fEJuKG8saSxhKTohIWkpO2lmKDEwMjQmYylyZXR1cm4hMDtpZigxNiZjKXJldHVybiBvP0JuKG8saSxhKTohIWk7aWYoOCZjKXtjb25zdCBlPXQuZHluYW1pY1Byb3BzO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCBuPWVbdF07aWYoaVtuXSE9PW9bbl0mJiFObihhLG4pKXJldHVybiEwfX1yZXR1cm4hMX0oZSx0LG4pKXtpZihvLmFzeW5jRGVwJiYhby5hc3luY1Jlc29sdmVkKXJldHVybiB2b2lkIEkobyx0LG4pO28ubmV4dD10LGZ1bmN0aW9uKGUpe2NvbnN0IHQ9dG4uaW5kZXhPZihlKTt0Pm5uJiZ0bi5zcGxpY2UodCwxKX0oby51cGRhdGUpLG8udXBkYXRlKCl9ZWxzZSB0LmVsPWUuZWwsby52bm9kZT10fSxNPShlLHQsbixvLHIscyxpKT0+e2NvbnN0IGw9ZS5lZmZlY3Q9bmV3IGdlKCgoKT0+e2lmKGUuaXNNb3VudGVkKXtsZXQgdCx7bmV4dDpuLGJ1Om8sdTpsLHBhcmVudDpjLHZub2RlOmF9PWUscD1uO0lyKGUsITEpLG4/KG4uZWw9YS5lbCxJKGUsbixpKSk6bj1hLG8mJloobyksKHQ9bi5wcm9wcyYmbi5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSYmYnModCxjLG4sYSksSXIoZSwhMCk7Y29uc3QgZj1NbihlKSxkPWUuc3ViVHJlZTtlLnN1YlRyZWU9ZixtKGQsZix1KGQuZWwpLFkoZCksZSxyLHMpLG4uZWw9Zi5lbCxudWxsPT09cCYmTG4oZSxmLmVsKSxsJiZQcihsLHIpLCh0PW4ucHJvcHMmJm4ucHJvcHMub25Wbm9kZVVwZGF0ZWQpJiZQcigoKCk9PmJzKHQsYyxuLGEpKSxyKX1lbHNle2xldCBpO2NvbnN0e2VsOmwscHJvcHM6Y309dCx7Ym06YSxtOnUscGFyZW50OnB9PWUsZj1tbyh0KTtpZihJcihlLCExKSxhJiZaKGEpLCFmJiYoaT1jJiZjLm9uVm5vZGVCZWZvcmVNb3VudCkmJmJzKGkscCx0KSxJcihlLCEwKSxsJiZyZSl7Y29uc3Qgbj0oKT0+e2Uuc3ViVHJlZT1NbihlKSxyZShsLGUuc3ViVHJlZSxlLHIsbnVsbCl9O2Y/dC50eXBlLl9fYXN5bmNMb2FkZXIoKS50aGVuKCgoKT0+IWUuaXNVbm1vdW50ZWQmJm4oKSkpOm4oKX1lbHNle2NvbnN0IGk9ZS5zdWJUcmVlPU1uKGUpO20obnVsbCxpLG4sbyxlLHIscyksdC5lbD1pLmVsfWlmKHUmJlByKHUsciksIWYmJihpPWMmJmMub25Wbm9kZU1vdW50ZWQpKXtjb25zdCBlPXQ7UHIoKCgpPT5icyhpLHAsZSkpLHIpfSgyNTYmdC5zaGFwZUZsYWd8fHAmJm1vKHAudm5vZGUpJiYyNTYmcC52bm9kZS5zaGFwZUZsYWcpJiZlLmEmJlByKGUuYSxyKSxlLmlzTW91bnRlZD0hMCx0PW49bz1udWxsfX0pLCgoKT0+aG4oYykpLGUuc2NvcGUpLGM9ZS51cGRhdGU9KCk9PmwucnVuKCk7Yy5pZD1lLnVpZCxJcihlLCEwKSxjKCl9LEk9KGUsdCxuKT0+e3QuY29tcG9uZW50PWU7Y29uc3Qgbz1lLnZub2RlLnByb3BzO2Uudm5vZGU9dCxlLm5leHQ9bnVsbCxmdW5jdGlvbihlLHQsbixvKXtjb25zdHtwcm9wczpyLGF0dHJzOnMsdm5vZGU6e3BhdGNoRmxhZzppfX09ZSxsPWt0KHIpLFtjXT1lLnByb3BzT3B0aW9ucztsZXQgYT0hMTtpZighKG98fGk+MCl8fDE2Jmkpe2xldCBvO2RyKGUsdCxyLHMpJiYoYT0hMCk7Zm9yKGNvbnN0IHMgaW4gbCl0JiYoTih0LHMpfHwobz1HKHMpKSE9PXMmJk4odCxvKSl8fChjPyFufHx2b2lkIDA9PT1uW3NdJiZ2b2lkIDA9PT1uW29dfHwocltzXT1ocihjLGwscyx2b2lkIDAsZSwhMCkpOmRlbGV0ZSByW3NdKTtpZihzIT09bClmb3IoY29uc3QgZSBpbiBzKXQmJk4odCxlKXx8KGRlbGV0ZSBzW2VdLGE9ITApfWVsc2UgaWYoOCZpKXtjb25zdCBuPWUudm5vZGUuZHluYW1pY1Byb3BzO2ZvcihsZXQgbz0wO288bi5sZW5ndGg7bysrKXtsZXQgaT1uW29dO2lmKE5uKGUuZW1pdHNPcHRpb25zLGkpKWNvbnRpbnVlO2NvbnN0IHU9dFtpXTtpZihjKWlmKE4ocyxpKSl1IT09c1tpXSYmKHNbaV09dSxhPSEwKTtlbHNle2NvbnN0IHQ9eihpKTtyW3RdPWhyKGMsbCx0LHUsZSwhMSl9ZWxzZSB1IT09c1tpXSYmKHNbaV09dSxhPSEwKX19YSYmVGUoZSxcInNldFwiLFwiJGF0dHJzXCIpfShlLHQucHJvcHMsbyxuKSwoKGUsdCxuKT0+e2NvbnN0e3Zub2RlOm8sc2xvdHM6cn09ZTtsZXQgcz0hMCxpPXY7aWYoMzImby5zaGFwZUZsYWcpe2NvbnN0IGU9dC5fO2U/biYmMT09PWU/cz0hMToodyhyLHQpLG58fDEhPT1lfHxkZWxldGUgci5fKToocz0hdC4kc3RhYmxlLENyKHQscikpLGk9dH1lbHNlIHQmJih3cihlLHQpLGk9e2RlZmF1bHQ6MX0pO2lmKHMpZm9yKGNvbnN0IGwgaW4gcilicihsKXx8bCBpbiBpfHxkZWxldGUgcltsXX0pKGUsdC5jaGlsZHJlbixuKSx4ZSgpLHluKHZvaWQgMCxlLnVwZGF0ZSksQ2UoKX0sQj0oZSx0LG4sbyxyLHMsaSxsLGM9ITEpPT57Y29uc3QgdT1lJiZlLmNoaWxkcmVuLHA9ZT9lLnNoYXBlRmxhZzowLGY9dC5jaGlsZHJlbix7cGF0Y2hGbGFnOmQsc2hhcGVGbGFnOmh9PXQ7aWYoZD4wKXtpZigxMjgmZClyZXR1cm4gdm9pZCBqKHUsZixuLG8scixzLGksbCxjKTtpZigyNTYmZClyZXR1cm4gdm9pZCBMKHUsZixuLG8scixzLGksbCxjKX04Jmg/KDE2JnAmJkoodSxyLHMpLGYhPT11JiZhKG4sZikpOjE2JnA/MTYmaD9qKHUsZixuLG8scixzLGksbCxjKTpKKHUscixzLCEwKTooOCZwJiZhKG4sXCJcIiksMTYmaCYmVChmLG4sbyxyLHMsaSxsLGMpKX0sTD0oZSx0LG4sbyxyLHMsaSxsLGMpPT57Y29uc3QgYT0oZT1lfHx5KS5sZW5ndGgsdT0odD10fHx5KS5sZW5ndGgscD1NYXRoLm1pbihhLHUpO2xldCBmO2ZvcihmPTA7ZjxwO2YrKyl7Y29uc3Qgbz10W2ZdPWM/dnModFtmXSk6Z3ModFtmXSk7bShlW2ZdLG8sbixudWxsLHIscyxpLGwsYyl9YT51P0ooZSxyLHMsITAsITEscCk6VCh0LG4sbyxyLHMsaSxsLGMscCl9LGo9KGUsdCxuLG8scixzLGksbCxjKT0+e2xldCBhPTA7Y29uc3QgdT10Lmxlbmd0aDtsZXQgcD1lLmxlbmd0aC0xLGY9dS0xO2Zvcig7YTw9cCYmYTw9Zjspe2NvbnN0IG89ZVthXSx1PXRbYV09Yz92cyh0W2FdKTpncyh0W2FdKTtpZighcnMobyx1KSlicmVhazttKG8sdSxuLG51bGwscixzLGksbCxjKSxhKyt9Zm9yKDthPD1wJiZhPD1mOyl7Y29uc3Qgbz1lW3BdLGE9dFtmXT1jP3ZzKHRbZl0pOmdzKHRbZl0pO2lmKCFycyhvLGEpKWJyZWFrO20obyxhLG4sbnVsbCxyLHMsaSxsLGMpLHAtLSxmLS19aWYoYT5wKXtpZihhPD1mKXtjb25zdCBlPWYrMSxwPWU8dT90W2VdLmVsOm87Zm9yKDthPD1mOyltKG51bGwsdFthXT1jP3ZzKHRbYV0pOmdzKHRbYV0pLG4scCxyLHMsaSxsLGMpLGErK319ZWxzZSBpZihhPmYpZm9yKDthPD1wOylIKGVbYV0scixzLCEwKSxhKys7ZWxzZXtjb25zdCBkPWEsaD1hLGc9bmV3IE1hcDtmb3IoYT1oO2E8PWY7YSsrKXtjb25zdCBlPXRbYV09Yz92cyh0W2FdKTpncyh0W2FdKTtudWxsIT1lLmtleSYmZy5zZXQoZS5rZXksYSl9bGV0IHYsXz0wO2NvbnN0IGI9Zi1oKzE7bGV0IFM9ITEseD0wO2NvbnN0IEM9bmV3IEFycmF5KGIpO2ZvcihhPTA7YTxiO2ErKylDW2FdPTA7Zm9yKGE9ZDthPD1wO2ErKyl7Y29uc3Qgbz1lW2FdO2lmKF8+PWIpe0gobyxyLHMsITApO2NvbnRpbnVlfWxldCB1O2lmKG51bGwhPW8ua2V5KXU9Zy5nZXQoby5rZXkpO2Vsc2UgZm9yKHY9aDt2PD1mO3YrKylpZigwPT09Q1t2LWhdJiZycyhvLHRbdl0pKXt1PXY7YnJlYWt9dm9pZCAwPT09dT9IKG8scixzLCEwKTooQ1t1LWhdPWErMSx1Pj14P3g9dTpTPSEwLG0obyx0W3VdLG4sbnVsbCxyLHMsaSxsLGMpLF8rKyl9Y29uc3Qgdz1TP2Z1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5zbGljZSgpLG49WzBdO2xldCBvLHIscyxpLGw7Y29uc3QgYz1lLmxlbmd0aDtmb3Iobz0wO288YztvKyspe2NvbnN0IGM9ZVtvXTtpZigwIT09Yyl7aWYocj1uW24ubGVuZ3RoLTFdLGVbcl08Yyl7dFtvXT1yLG4ucHVzaChvKTtjb250aW51ZX1mb3Iocz0wLGk9bi5sZW5ndGgtMTtzPGk7KWw9cytpPj4xLGVbbltsXV08Yz9zPWwrMTppPWw7YzxlW25bc11dJiYocz4wJiYodFtvXT1uW3MtMV0pLG5bc109byl9fXM9bi5sZW5ndGgsaT1uW3MtMV07Zm9yKDtzLS0gPjA7KW5bc109aSxpPXRbaV07cmV0dXJuIG59KEMpOnk7Zm9yKHY9dy5sZW5ndGgtMSxhPWItMTthPj0wO2EtLSl7Y29uc3QgZT1oK2EscD10W2VdLGY9ZSsxPHU/dFtlKzFdLmVsOm87MD09PUNbYV0/bShudWxsLHAsbixmLHIscyxpLGwsYyk6UyYmKHY8MHx8YSE9PXdbdl0/RChwLG4sZiwyKTp2LS0pfX19LEQ9KGUsdCxvLHIscz1udWxsKT0+e2NvbnN0e2VsOmksdHlwZTpsLHRyYW5zaXRpb246YyxjaGlsZHJlbjphLHNoYXBlRmxhZzp1fT1lO2lmKDYmdSlyZXR1cm4gdm9pZCBEKGUuY29tcG9uZW50LnN1YlRyZWUsdCxvLHIpO2lmKDEyOCZ1KXJldHVybiB2b2lkIGUuc3VzcGVuc2UubW92ZSh0LG8scik7aWYoNjQmdSlyZXR1cm4gdm9pZCBsLm1vdmUoZSx0LG8sdGUpO2lmKGw9PT1Xcil7bihpLHQsbyk7Zm9yKGxldCBlPTA7ZTxhLmxlbmd0aDtlKyspRChhW2VdLHQsbyxyKTtyZXR1cm4gdm9pZCBuKGUuYW5jaG9yLHQsbyl9aWYobD09PUdyKXJldHVybiB2b2lkKCh7ZWw6ZSxhbmNob3I6dH0sbyxyKT0+e2xldCBzO2Zvcig7ZSYmZSE9PXQ7KXM9cChlKSxuKGUsbyxyKSxlPXM7bih0LG8scil9KShlLHQsbyk7aWYoMiE9PXImJjEmdSYmYylpZigwPT09ciljLmJlZm9yZUVudGVyKGkpLG4oaSx0LG8pLFByKCgoKT0+Yy5lbnRlcihpKSkscyk7ZWxzZXtjb25zdHtsZWF2ZTplLGRlbGF5TGVhdmU6cixhZnRlckxlYXZlOnN9PWMsbD0oKT0+bihpLHQsbyksYT0oKT0+e2UoaSwoKCk9PntsKCkscyYmcygpfSkpfTtyP3IoaSxsLGEpOmEoKX1lbHNlIG4oaSx0LG8pfSxIPShlLHQsbixvPSExLHI9ITEpPT57Y29uc3R7dHlwZTpzLHByb3BzOmkscmVmOmwsY2hpbGRyZW46YyxkeW5hbWljQ2hpbGRyZW46YSxzaGFwZUZsYWc6dSxwYXRjaEZsYWc6cCxkaXJzOmZ9PWU7aWYobnVsbCE9bCYmRXIobCxudWxsLG4sZSwhMCksMjU2JnUpcmV0dXJuIHZvaWQgdC5jdHguZGVhY3RpdmF0ZShlKTtjb25zdCBkPTEmdSYmZixoPSFtbyhlKTtsZXQgbTtpZihoJiYobT1pJiZpLm9uVm5vZGVCZWZvcmVVbm1vdW50KSYmYnMobSx0LGUpLDYmdSlxKGUuY29tcG9uZW50LG4sbyk7ZWxzZXtpZigxMjgmdSlyZXR1cm4gdm9pZCBlLnN1c3BlbnNlLnVubW91bnQobixvKTtkJiZqbyhlLG51bGwsdCxcImJlZm9yZVVubW91bnRcIiksNjQmdT9lLnR5cGUucmVtb3ZlKGUsdCxuLHIsdGUsbyk6YSYmKHMhPT1Xcnx8cD4wJiY2NCZwKT9KKGEsdCxuLCExLCEwKToocz09PVdyJiYzODQmcHx8IXImJjE2JnUpJiZKKGMsdCxuKSxvJiZXKGUpfShoJiYobT1pJiZpLm9uVm5vZGVVbm1vdW50ZWQpfHxkKSYmUHIoKCgpPT57bSYmYnMobSx0LGUpLGQmJmpvKGUsbnVsbCx0LFwidW5tb3VudGVkXCIpfSksbil9LFc9ZT0+e2NvbnN0e3R5cGU6dCxlbDpuLGFuY2hvcjpyLHRyYW5zaXRpb246c309ZTtpZih0PT09V3IpcmV0dXJuIHZvaWQgSyhuLHIpO2lmKHQ9PT1HcilyZXR1cm4gdm9pZCgoe2VsOmUsYW5jaG9yOnR9KT0+e2xldCBuO2Zvcig7ZSYmZSE9PXQ7KW49cChlKSxvKGUpLGU9bjtvKHQpfSkoZSk7Y29uc3QgaT0oKT0+e28obikscyYmIXMucGVyc2lzdGVkJiZzLmFmdGVyTGVhdmUmJnMuYWZ0ZXJMZWF2ZSgpfTtpZigxJmUuc2hhcGVGbGFnJiZzJiYhcy5wZXJzaXN0ZWQpe2NvbnN0e2xlYXZlOnQsZGVsYXlMZWF2ZTpvfT1zLHI9KCk9PnQobixpKTtvP28oZS5lbCxpLHIpOnIoKX1lbHNlIGkoKX0sSz0oZSx0KT0+e2xldCBuO2Zvcig7ZSE9PXQ7KW49cChlKSxvKGUpLGU9bjtvKHQpfSxxPShlLHQsbik9Pntjb25zdHtidW06byxzY29wZTpyLHVwZGF0ZTpzLHN1YlRyZWU6aSx1bTpsfT1lO28mJloobyksci5zdG9wKCkscyYmKHMuYWN0aXZlPSExLEgoaSxlLHQsbikpLGwmJlByKGwsdCksUHIoKCgpPT57ZS5pc1VubW91bnRlZD0hMH0pLHQpLHQmJnQucGVuZGluZ0JyYW5jaCYmIXQuaXNVbm1vdW50ZWQmJmUuYXN5bmNEZXAmJiFlLmFzeW5jUmVzb2x2ZWQmJmUuc3VzcGVuc2VJZD09PXQucGVuZGluZ0lkJiYodC5kZXBzLS0sMD09PXQuZGVwcyYmdC5yZXNvbHZlKCkpfSxKPShlLHQsbixvPSExLHI9ITEscz0wKT0+e2ZvcihsZXQgaT1zO2k8ZS5sZW5ndGg7aSsrKUgoZVtpXSx0LG4sbyxyKX0sWT1lPT42JmUuc2hhcGVGbGFnP1koZS5jb21wb25lbnQuc3ViVHJlZSk6MTI4JmUuc2hhcGVGbGFnP2Uuc3VzcGVuc2UubmV4dCgpOnAoZS5hbmNob3J8fGUuZWwpLFg9KGUsdCxuKT0+e251bGw9PWU/dC5fdm5vZGUmJkgodC5fdm5vZGUsbnVsbCxudWxsLCEwKTptKHQuX3Zub2RlfHxudWxsLGUsdCxudWxsLG51bGwsbnVsbCxuKSxfbigpLHQuX3Zub2RlPWV9LHRlPXtwOm0sdW06SCxtOkQscjpXLG10OlAsbWM6VCxwYzpCLHBiYzokLG46WSxvOmV9O2xldCBvZSxyZTtyZXR1cm4gdCYmKFtvZSxyZV09dCh0ZSkpLHtyZW5kZXI6WCxoeWRyYXRlOm9lLGNyZWF0ZUFwcDpOcihYLG9lKX19ZnVuY3Rpb24gSXIoe2VmZmVjdDplLHVwZGF0ZTp0fSxuKXtlLmFsbG93UmVjdXJzZT10LmFsbG93UmVjdXJzZT1ufWZ1bmN0aW9uIEJyKGUsdCxuPSExKXtjb25zdCBvPWUuY2hpbGRyZW4scj10LmNoaWxkcmVuO2lmKEUobykmJkUocikpZm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspe2NvbnN0IGU9b1tzXTtsZXQgdD1yW3NdOzEmdC5zaGFwZUZsYWcmJiF0LmR5bmFtaWNDaGlsZHJlbiYmKCh0LnBhdGNoRmxhZzw9MHx8MzI9PT10LnBhdGNoRmxhZykmJih0PXJbc109dnMocltzXSksdC5lbD1lLmVsKSxufHxCcihlLHQpKX19Y29uc3QgTHI9ZT0+ZSYmKGUuZGlzYWJsZWR8fFwiXCI9PT1lLmRpc2FibGVkKSxqcj1lPT5cInVuZGVmaW5lZFwiIT10eXBlb2YgU1ZHRWxlbWVudCYmZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQsVXI9KGUsdCk9Pntjb25zdCBuPWUmJmUudG87aWYoUChuKSl7aWYodCl7cmV0dXJuIHQobil9cmV0dXJuIG51bGx9cmV0dXJuIG59O2Z1bmN0aW9uIERyKGUsdCxuLHtvOntpbnNlcnQ6b30sbTpyfSxzPTIpezA9PT1zJiZvKGUudGFyZ2V0QW5jaG9yLHQsbik7Y29uc3R7ZWw6aSxhbmNob3I6bCxzaGFwZUZsYWc6YyxjaGlsZHJlbjphLHByb3BzOnV9PWUscD0yPT09cztpZihwJiZvKGksdCxuKSwoIXB8fExyKHUpKSYmMTYmYylmb3IobGV0IGY9MDtmPGEubGVuZ3RoO2YrKylyKGFbZl0sdCxuLDIpO3AmJm8obCx0LG4pfWNvbnN0IEhyPXtfX2lzVGVsZXBvcnQ6ITAscHJvY2VzcyhlLHQsbixvLHIscyxpLGwsYyxhKXtjb25zdHttYzp1LHBjOnAscGJjOmYsbzp7aW5zZXJ0OmQscXVlcnlTZWxlY3RvcjpoLGNyZWF0ZVRleHQ6bX19PWEsZz1Mcih0LnByb3BzKTtsZXR7c2hhcGVGbGFnOnYsY2hpbGRyZW46eSxkeW5hbWljQ2hpbGRyZW46X309dDtpZihudWxsPT1lKXtjb25zdCBlPXQuZWw9bShcIlwiKSxhPXQuYW5jaG9yPW0oXCJcIik7ZChlLG4sbyksZChhLG4sbyk7Y29uc3QgcD10LnRhcmdldD1Vcih0LnByb3BzLGgpLGY9dC50YXJnZXRBbmNob3I9bShcIlwiKTtwJiYoZChmLHApLGk9aXx8anIocCkpO2NvbnN0IF89KGUsdCk9PnsxNiZ2JiZ1KHksZSx0LHIscyxpLGwsYyl9O2c/XyhuLGEpOnAmJl8ocCxmKX1lbHNle3QuZWw9ZS5lbDtjb25zdCBvPXQuYW5jaG9yPWUuYW5jaG9yLHU9dC50YXJnZXQ9ZS50YXJnZXQsZD10LnRhcmdldEFuY2hvcj1lLnRhcmdldEFuY2hvcixtPUxyKGUucHJvcHMpLHY9bT9uOnUseT1tP286ZDtpZihpPWl8fGpyKHUpLF8/KGYoZS5keW5hbWljQ2hpbGRyZW4sXyx2LHIscyxpLGwpLEJyKGUsdCwhMCkpOmN8fHAoZSx0LHYseSxyLHMsaSxsLCExKSxnKW18fERyKHQsbixvLGEsMSk7ZWxzZSBpZigodC5wcm9wcyYmdC5wcm9wcy50bykhPT0oZS5wcm9wcyYmZS5wcm9wcy50bykpe2NvbnN0IGU9dC50YXJnZXQ9VXIodC5wcm9wcyxoKTtlJiZEcih0LGUsbnVsbCxhLDApfWVsc2UgbSYmRHIodCx1LGQsYSwxKX19LHJlbW92ZShlLHQsbixvLHt1bTpyLG86e3JlbW92ZTpzfX0saSl7Y29uc3R7c2hhcGVGbGFnOmwsY2hpbGRyZW46YyxhbmNob3I6YSx0YXJnZXRBbmNob3I6dSx0YXJnZXQ6cCxwcm9wczpmfT1lO2lmKHAmJnModSksKGl8fCFMcihmKSkmJihzKGEpLDE2JmwpKWZvcihsZXQgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXtjb25zdCBlPWNbZF07cihlLHQsbiwhMCwhIWUuZHluYW1pY0NoaWxkcmVuKX19LG1vdmU6RHIsaHlkcmF0ZTpmdW5jdGlvbihlLHQsbixvLHIscyx7bzp7bmV4dFNpYmxpbmc6aSxwYXJlbnROb2RlOmwscXVlcnlTZWxlY3RvcjpjfX0sYSl7Y29uc3QgdT10LnRhcmdldD1Vcih0LnByb3BzLGMpO2lmKHUpe2NvbnN0IGM9dS5fbHBhfHx1LmZpcnN0Q2hpbGQ7aWYoMTYmdC5zaGFwZUZsYWcpaWYoTHIodC5wcm9wcykpdC5hbmNob3I9YShpKGUpLHQsbChlKSxuLG8scixzKSx0LnRhcmdldEFuY2hvcj1jO2Vsc2V7dC5hbmNob3I9aShlKTtsZXQgbD1jO2Zvcig7bDspaWYobD1pKGwpLGwmJjg9PT1sLm5vZGVUeXBlJiZcInRlbGVwb3J0IGFuY2hvclwiPT09bC5kYXRhKXt0LnRhcmdldEFuY2hvcj1sLHUuX2xwYT10LnRhcmdldEFuY2hvciYmaSh0LnRhcmdldEFuY2hvcik7YnJlYWt9YShjLHQsdSxuLG8scixzKX19cmV0dXJuIHQuYW5jaG9yJiZpKHQuYW5jaG9yKX19LFdyPVN5bWJvbCh2b2lkIDApLHpyPVN5bWJvbCh2b2lkIDApLEtyPVN5bWJvbCh2b2lkIDApLEdyPVN5bWJvbCh2b2lkIDApLHFyPVtdO2xldCBKcj1udWxsO2Z1bmN0aW9uIFlyKGU9ITEpe3FyLnB1c2goSnI9ZT9udWxsOltdKX1mdW5jdGlvbiBacigpe3FyLnBvcCgpLEpyPXFyW3FyLmxlbmd0aC0xXXx8bnVsbH1sZXQgUXI9MTtmdW5jdGlvbiBYcihlKXtRcis9ZX1mdW5jdGlvbiBlcyhlKXtyZXR1cm4gZS5keW5hbWljQ2hpbGRyZW49UXI+MD9Kcnx8eTpudWxsLFpyKCksUXI+MCYmSnImJkpyLnB1c2goZSksZX1mdW5jdGlvbiB0cyhlLHQsbixvLHIscyl7cmV0dXJuIGVzKGFzKGUsdCxuLG8scixzLCEwKSl9ZnVuY3Rpb24gbnMoZSx0LG4sbyxyKXtyZXR1cm4gZXModXMoZSx0LG4sbyxyLCEwKSl9ZnVuY3Rpb24gb3MoZSl7cmV0dXJuISFlJiYhMD09PWUuX192X2lzVk5vZGV9ZnVuY3Rpb24gcnMoZSx0KXtyZXR1cm4gZS50eXBlPT09dC50eXBlJiZlLmtleT09PXQua2V5fWZ1bmN0aW9uIHNzKGUpe31jb25zdCBpcz1cIl9fdkludGVybmFsXCIsbHM9KHtrZXk6ZX0pPT5udWxsIT1lP2U6bnVsbCxjcz0oe3JlZjplLHJlZl9rZXk6dCxyZWZfZm9yOm59KT0+bnVsbCE9ZT9QKGUpfHxSdChlKXx8RihlKT97aTpFbixyOmUsazp0LGY6ISFufTplOm51bGw7ZnVuY3Rpb24gYXMoZSx0PW51bGwsbj1udWxsLG89MCxyPW51bGwscz0oZT09PVdyPzA6MSksaT0hMSxsPSExKXtjb25zdCBjPXtfX3ZfaXNWTm9kZTohMCxfX3Zfc2tpcDohMCx0eXBlOmUscHJvcHM6dCxrZXk6dCYmbHModCkscmVmOnQmJmNzKHQpLHNjb3BlSWQ6JG4sc2xvdFNjb3BlSWRzOm51bGwsY2hpbGRyZW46bixjb21wb25lbnQ6bnVsbCxzdXNwZW5zZTpudWxsLHNzQ29udGVudDpudWxsLHNzRmFsbGJhY2s6bnVsbCxkaXJzOm51bGwsdHJhbnNpdGlvbjpudWxsLGVsOm51bGwsYW5jaG9yOm51bGwsdGFyZ2V0Om51bGwsdGFyZ2V0QW5jaG9yOm51bGwsc3RhdGljQ291bnQ6MCxzaGFwZUZsYWc6cyxwYXRjaEZsYWc6byxkeW5hbWljUHJvcHM6cixkeW5hbWljQ2hpbGRyZW46bnVsbCxhcHBDb250ZXh0Om51bGx9O3JldHVybiBsPyh5cyhjLG4pLDEyOCZzJiZlLm5vcm1hbGl6ZShjKSk6biYmKGMuc2hhcGVGbGFnfD1QKG4pPzg6MTYpLFFyPjAmJiFpJiZKciYmKGMucGF0Y2hGbGFnPjB8fDYmcykmJjMyIT09Yy5wYXRjaEZsYWcmJkpyLnB1c2goYyksY31jb25zdCB1cz1mdW5jdGlvbihlLHQ9bnVsbCxuPW51bGwsbz0wLHM9bnVsbCxpPSExKXtlJiZlIT09RG98fChlPUtyKTtpZihvcyhlKSl7Y29uc3Qgbz1mcyhlLHQsITApO3JldHVybiBuJiZ5cyhvLG4pLFFyPjAmJiFpJiZKciYmKDYmby5zaGFwZUZsYWc/SnJbSnIuaW5kZXhPZihlKV09bzpKci5wdXNoKG8pKSxvLnBhdGNoRmxhZ3w9LTIsb31sPWUsRihsKSYmXCJfX3ZjY09wdHNcImluIGwmJihlPWUuX192Y2NPcHRzKTt2YXIgbDtpZih0KXt0PXBzKHQpO2xldHtjbGFzczplLHN0eWxlOm59PXQ7ZSYmIVAoZSkmJih0LmNsYXNzPWMoZSkpLE0obikmJih3dChuKSYmIUUobikmJihuPXcoe30sbikpLHQuc3R5bGU9cihuKSl9Y29uc3QgYT1QKGUpPzE6am4oZSk/MTI4OihlPT5lLl9faXNUZWxlcG9ydCkoZSk/NjQ6TShlKT80OkYoZSk/MjowO3JldHVybiBhcyhlLHQsbixvLHMsYSxpLCEwKX07ZnVuY3Rpb24gcHMoZSl7cmV0dXJuIGU/d3QoZSl8fGlzIGluIGU/dyh7fSxlKTplOm51bGx9ZnVuY3Rpb24gZnMoZSx0LG49ITEpe2NvbnN0e3Byb3BzOm8scmVmOnIscGF0Y2hGbGFnOnMsY2hpbGRyZW46aX09ZSxsPXQ/X3Mob3x8e30sdCk6bztyZXR1cm57X192X2lzVk5vZGU6ITAsX192X3NraXA6ITAsdHlwZTplLnR5cGUscHJvcHM6bCxrZXk6bCYmbHMobCkscmVmOnQmJnQucmVmP24mJnI/RShyKT9yLmNvbmNhdChjcyh0KSk6W3IsY3ModCldOmNzKHQpOnIsc2NvcGVJZDplLnNjb3BlSWQsc2xvdFNjb3BlSWRzOmUuc2xvdFNjb3BlSWRzLGNoaWxkcmVuOmksdGFyZ2V0OmUudGFyZ2V0LHRhcmdldEFuY2hvcjplLnRhcmdldEFuY2hvcixzdGF0aWNDb3VudDplLnN0YXRpY0NvdW50LHNoYXBlRmxhZzplLnNoYXBlRmxhZyxwYXRjaEZsYWc6dCYmZS50eXBlIT09V3I/LTE9PT1zPzE2OjE2fHM6cyxkeW5hbWljUHJvcHM6ZS5keW5hbWljUHJvcHMsZHluYW1pY0NoaWxkcmVuOmUuZHluYW1pY0NoaWxkcmVuLGFwcENvbnRleHQ6ZS5hcHBDb250ZXh0LGRpcnM6ZS5kaXJzLHRyYW5zaXRpb246ZS50cmFuc2l0aW9uLGNvbXBvbmVudDplLmNvbXBvbmVudCxzdXNwZW5zZTplLnN1c3BlbnNlLHNzQ29udGVudDplLnNzQ29udGVudCYmZnMoZS5zc0NvbnRlbnQpLHNzRmFsbGJhY2s6ZS5zc0ZhbGxiYWNrJiZmcyhlLnNzRmFsbGJhY2spLGVsOmUuZWwsYW5jaG9yOmUuYW5jaG9yfX1mdW5jdGlvbiBkcyhlPVwiIFwiLHQ9MCl7cmV0dXJuIHVzKHpyLG51bGwsZSx0KX1mdW5jdGlvbiBocyhlLHQpe2NvbnN0IG49dXMoR3IsbnVsbCxlKTtyZXR1cm4gbi5zdGF0aWNDb3VudD10LG59ZnVuY3Rpb24gbXMoZT1cIlwiLHQ9ITEpe3JldHVybiB0PyhZcigpLG5zKEtyLG51bGwsZSkpOnVzKEtyLG51bGwsZSl9ZnVuY3Rpb24gZ3MoZSl7cmV0dXJuIG51bGw9PWV8fFwiYm9vbGVhblwiPT10eXBlb2YgZT91cyhLcik6RShlKT91cyhXcixudWxsLGUuc2xpY2UoKSk6XCJvYmplY3RcIj09dHlwZW9mIGU/dnMoZSk6dXMoenIsbnVsbCxTdHJpbmcoZSkpfWZ1bmN0aW9uIHZzKGUpe3JldHVybiBudWxsPT09ZS5lbHx8ZS5tZW1vP2U6ZnMoZSl9ZnVuY3Rpb24geXMoZSx0KXtsZXQgbj0wO2NvbnN0e3NoYXBlRmxhZzpvfT1lO2lmKG51bGw9PXQpdD1udWxsO2Vsc2UgaWYoRSh0KSluPTE2O2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIHQpe2lmKDY1Jm8pe2NvbnN0IG49dC5kZWZhdWx0O3JldHVybiB2b2lkKG4mJihuLl9jJiYobi5fZD0hMSkseXMoZSxuKCkpLG4uX2MmJihuLl9kPSEwKSkpfXtuPTMyO2NvbnN0IG89dC5fO298fGlzIGluIHQ/Mz09PW8mJkVuJiYoMT09PUVuLnNsb3RzLl8/dC5fPTE6KHQuXz0yLGUucGF0Y2hGbGFnfD0xMDI0KSk6dC5fY3R4PUVufX1lbHNlIEYodCk/KHQ9e2RlZmF1bHQ6dCxfY3R4OkVufSxuPTMyKToodD1TdHJpbmcodCksNjQmbz8obj0xNix0PVtkcyh0KV0pOm49OCk7ZS5jaGlsZHJlbj10LGUuc2hhcGVGbGFnfD1ufWZ1bmN0aW9uIF9zKC4uLmUpe2NvbnN0IHQ9e307Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89ZVtuXTtmb3IoY29uc3QgZSBpbiBvKWlmKFwiY2xhc3NcIj09PWUpdC5jbGFzcyE9PW8uY2xhc3MmJih0LmNsYXNzPWMoW3QuY2xhc3Msby5jbGFzc10pKTtlbHNlIGlmKFwic3R5bGVcIj09PWUpdC5zdHlsZT1yKFt0LnN0eWxlLG8uc3R5bGVdKTtlbHNlIGlmKHgoZSkpe2NvbnN0IG49dFtlXSxyPW9bZV07IXJ8fG49PT1yfHxFKG4pJiZuLmluY2x1ZGVzKHIpfHwodFtlXT1uP1tdLmNvbmNhdChuLHIpOnIpfWVsc2VcIlwiIT09ZSYmKHRbZV09b1tlXSl9cmV0dXJuIHR9ZnVuY3Rpb24gYnMoZSx0LG4sbz1udWxsKXtadChlLHQsNyxbbixvXSl9Y29uc3QgU3M9a3IoKTtsZXQgeHM9MDtsZXQgQ3M9bnVsbDtjb25zdCB3cz0oKT0+Q3N8fEVuLGtzPWU9PntDcz1lLGUuc2NvcGUub24oKX0sVHM9KCk9PntDcyYmQ3Muc2NvcGUub2ZmKCksQ3M9bnVsbH07ZnVuY3Rpb24gTnMoZSl7cmV0dXJuIDQmZS52bm9kZS5zaGFwZUZsYWd9bGV0IEVzLCRzLE9zPSExO2Z1bmN0aW9uIFJzKGUsdCxuKXtGKHQpP2UucmVuZGVyPXQ6TSh0KSYmKGUuc2V0dXBTdGF0ZT1MdCh0KSksQXMoZSxuKX1mdW5jdGlvbiBGcyhlKXtFcz1lLCRzPWU9PntlLnJlbmRlci5fcmMmJihlLndpdGhQcm94eT1uZXcgUHJveHkoZS5jdHgsdHIpKX19Y29uc3QgUHM9KCk9PiFFcztmdW5jdGlvbiBBcyhlLHQsbil7Y29uc3Qgbz1lLnR5cGU7aWYoIWUucmVuZGVyKXtpZighdCYmRXMmJiFvLnJlbmRlcil7Y29uc3QgdD1vLnRlbXBsYXRlO2lmKHQpe2NvbnN0e2lzQ3VzdG9tRWxlbWVudDpuLGNvbXBpbGVyT3B0aW9uczpyfT1lLmFwcENvbnRleHQuY29uZmlnLHtkZWxpbWl0ZXJzOnMsY29tcGlsZXJPcHRpb25zOml9PW8sbD13KHcoe2lzQ3VzdG9tRWxlbWVudDpuLGRlbGltaXRlcnM6c30sciksaSk7by5yZW5kZXI9RXModCxsKX19ZS5yZW5kZXI9by5yZW5kZXJ8fF8sJHMmJiRzKGUpfWtzKGUpLHhlKCksb3IoZSksQ2UoKSxUcygpfWZ1bmN0aW9uIE1zKGUpe2NvbnN0IHQ9dD0+e2UuZXhwb3NlZD10fHx7fX07bGV0IG47cmV0dXJue2dldCBhdHRycygpe3JldHVybiBufHwobj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb3h5KGUuYXR0cnMse2dldDoodCxuKT0+KHdlKGUsMCxcIiRhdHRyc1wiKSx0W25dKX0pfShlKSl9LHNsb3RzOmUuc2xvdHMsZW1pdDplLmVtaXQsZXhwb3NlOnR9fWZ1bmN0aW9uIFZzKGUpe2lmKGUuZXhwb3NlZClyZXR1cm4gZS5leHBvc2VQcm94eXx8KGUuZXhwb3NlUHJveHk9bmV3IFByb3h5KEx0KFR0KGUuZXhwb3NlZCkpLHtnZXQ6KHQsbik9Pm4gaW4gdD90W25dOm4gaW4gWG8/WG9bbl0oZSk6dm9pZCAwfSkpfWNvbnN0IElzPS8oPzpefFstX10pKFxcdykvZztmdW5jdGlvbiBCcyhlLHQ9ITApe3JldHVybiBGKGUpP2UuZGlzcGxheU5hbWV8fGUubmFtZTplLm5hbWV8fHQmJmUuX19uYW1lfWZ1bmN0aW9uIExzKGUsdCxuPSExKXtsZXQgbz1Ccyh0KTtpZighbyYmdC5fX2ZpbGUpe2NvbnN0IGU9dC5fX2ZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKTtlJiYobz1lWzFdKX1pZighbyYmZSYmZS5wYXJlbnQpe2NvbnN0IG49ZT0+e2Zvcihjb25zdCBuIGluIGUpaWYoZVtuXT09PXQpcmV0dXJuIG59O289bihlLmNvbXBvbmVudHN8fGUucGFyZW50LnR5cGUuY29tcG9uZW50cyl8fG4oZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpfXJldHVybiBvP28ucmVwbGFjZShJcywoZT0+ZS50b1VwcGVyQ2FzZSgpKSkucmVwbGFjZSgvWy1fXS9nLFwiXCIpOm4/XCJBcHBcIjpcIkFub255bW91c1wifWNvbnN0IGpzPShlLHQpPT5mdW5jdGlvbihlLHQsbj0hMSl7bGV0IG8scjtjb25zdCBzPUYoZSk7cmV0dXJuIHM/KG89ZSxyPV8pOihvPWUuZ2V0LHI9ZS5zZXQpLG5ldyB6dChvLHIsc3x8IXIsbil9KGUsMCxPcyk7ZnVuY3Rpb24gVXMoKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBEcygpe3JldHVybiBudWxsfWZ1bmN0aW9uIEhzKGUpe31mdW5jdGlvbiBXcyhlLHQpe3JldHVybiBudWxsfWZ1bmN0aW9uIHpzKCl7cmV0dXJuIEdzKCkuc2xvdHN9ZnVuY3Rpb24gS3MoKXtyZXR1cm4gR3MoKS5hdHRyc31mdW5jdGlvbiBHcygpe2NvbnN0IGU9d3MoKTtyZXR1cm4gZS5zZXR1cENvbnRleHR8fChlLnNldHVwQ29udGV4dD1NcyhlKSl9ZnVuY3Rpb24gcXMoZSx0KXtjb25zdCBuPUUoZSk/ZS5yZWR1Y2UoKChlLHQpPT4oZVt0XT17fSxlKSkse30pOmU7Zm9yKGNvbnN0IG8gaW4gdCl7Y29uc3QgZT1uW29dO2U/RShlKXx8RihlKT9uW29dPXt0eXBlOmUsZGVmYXVsdDp0W29dfTplLmRlZmF1bHQ9dFtvXTpudWxsPT09ZSYmKG5bb109e2RlZmF1bHQ6dFtvXX0pfXJldHVybiBufWZ1bmN0aW9uIEpzKGUsdCl7Y29uc3Qgbj17fTtmb3IoY29uc3QgbyBpbiBlKXQuaW5jbHVkZXMobyl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLG8se2VudW1lcmFibGU6ITAsZ2V0OigpPT5lW29dfSk7cmV0dXJuIG59ZnVuY3Rpb24gWXMoZSl7Y29uc3QgdD13cygpO2xldCBuPWUoKTtyZXR1cm4gVHMoKSxWKG4pJiYobj1uLmNhdGNoKChlPT57dGhyb3cga3ModCksZX0pKSksW24sKCk9PmtzKHQpXX1mdW5jdGlvbiBacyhlLHQsbil7Y29uc3Qgbz1hcmd1bWVudHMubGVuZ3RoO3JldHVybiAyPT09bz9NKHQpJiYhRSh0KT9vcyh0KT91cyhlLG51bGwsW3RdKTp1cyhlLHQpOnVzKGUsbnVsbCx0KToobz4zP249QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpOjM9PT1vJiZvcyhuKSYmKG49W25dKSx1cyhlLHQsbikpfWNvbnN0IFFzPVN5bWJvbChcIlwiKSxYcz0oKT0+e3tjb25zdCBlPXFuKFFzKTtyZXR1cm4gZXx8R3QoXCJTZXJ2ZXIgcmVuZGVyaW5nIGNvbnRleHQgbm90IHByb3ZpZGVkLiBNYWtlIHN1cmUgdG8gb25seSBjYWxsIHVzZVNTUkNvbnRleHQoKSBjb25kaXRpb25hbGx5IGluIHRoZSBzZXJ2ZXIgYnVpbGQuXCIpLGV9fTtmdW5jdGlvbiBlaSgpe31mdW5jdGlvbiB0aShlLHQsbixvKXtjb25zdCByPW5bb107aWYociYmbmkocixlKSlyZXR1cm4gcjtjb25zdCBzPXQoKTtyZXR1cm4gcy5tZW1vPWUuc2xpY2UoKSxuW29dPXN9ZnVuY3Rpb24gbmkoZSx0KXtjb25zdCBuPWUubWVtbztpZihuLmxlbmd0aCE9dC5sZW5ndGgpcmV0dXJuITE7Zm9yKGxldCBvPTA7bzxuLmxlbmd0aDtvKyspaWYoWShuW29dLHRbb10pKXJldHVybiExO3JldHVybiBRcj4wJiZKciYmSnIucHVzaChlKSwhMH1jb25zdCBvaT1cIjMuMi4zN1wiLHJpPW51bGwsc2k9bnVsbCxpaT1udWxsLGxpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDpudWxsLGNpPWxpJiZsaS5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIiksYWk9e2luc2VydDooZSx0LG4pPT57dC5pbnNlcnRCZWZvcmUoZSxufHxudWxsKX0scmVtb3ZlOmU9Pntjb25zdCB0PWUucGFyZW50Tm9kZTt0JiZ0LnJlbW92ZUNoaWxkKGUpfSxjcmVhdGVFbGVtZW50OihlLHQsbixvKT0+e2NvbnN0IHI9dD9saS5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGUpOmxpLmNyZWF0ZUVsZW1lbnQoZSxuP3tpczpufTp2b2lkIDApO3JldHVyblwic2VsZWN0XCI9PT1lJiZvJiZudWxsIT1vLm11bHRpcGxlJiZyLnNldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIsby5tdWx0aXBsZSkscn0sY3JlYXRlVGV4dDplPT5saS5jcmVhdGVUZXh0Tm9kZShlKSxjcmVhdGVDb21tZW50OmU9PmxpLmNyZWF0ZUNvbW1lbnQoZSksc2V0VGV4dDooZSx0KT0+e2Uubm9kZVZhbHVlPXR9LHNldEVsZW1lbnRUZXh0OihlLHQpPT57ZS50ZXh0Q29udGVudD10fSxwYXJlbnROb2RlOmU9PmUucGFyZW50Tm9kZSxuZXh0U2libGluZzplPT5lLm5leHRTaWJsaW5nLHF1ZXJ5U2VsZWN0b3I6ZT0+bGkucXVlcnlTZWxlY3RvcihlKSxzZXRTY29wZUlkKGUsdCl7ZS5zZXRBdHRyaWJ1dGUodCxcIlwiKX0sY2xvbmVOb2RlKGUpe2NvbnN0IHQ9ZS5jbG9uZU5vZGUoITApO3JldHVyblwiX3ZhbHVlXCJpbiBlJiYodC5fdmFsdWU9ZS5fdmFsdWUpLHR9LGluc2VydFN0YXRpY0NvbnRlbnQoZSx0LG4sbyxyLHMpe2NvbnN0IGk9bj9uLnByZXZpb3VzU2libGluZzp0Lmxhc3RDaGlsZDtpZihyJiYocj09PXN8fHIubmV4dFNpYmxpbmcpKWZvcig7dC5pbnNlcnRCZWZvcmUoci5jbG9uZU5vZGUoITApLG4pLHIhPT1zJiYocj1yLm5leHRTaWJsaW5nKTspO2Vsc2V7Y2kuaW5uZXJIVE1MPW8/YDxzdmc+JHtlfTwvc3ZnPmA6ZTtjb25zdCByPWNpLmNvbnRlbnQ7aWYobyl7Y29uc3QgZT1yLmZpcnN0Q2hpbGQ7Zm9yKDtlLmZpcnN0Q2hpbGQ7KXIuYXBwZW5kQ2hpbGQoZS5maXJzdENoaWxkKTtyLnJlbW92ZUNoaWxkKGUpfXQuaW5zZXJ0QmVmb3JlKHIsbil9cmV0dXJuW2k/aS5uZXh0U2libGluZzp0LmZpcnN0Q2hpbGQsbj9uLnByZXZpb3VzU2libGluZzp0Lmxhc3RDaGlsZF19fTtjb25zdCB1aT0vXFxzKiFpbXBvcnRhbnQkLztmdW5jdGlvbiBwaShlLHQsbil7aWYoRShuKSluLmZvckVhY2goKG49PnBpKGUsdCxuKSkpO2Vsc2UgaWYobnVsbD09biYmKG49XCJcIiksdC5zdGFydHNXaXRoKFwiLS1cIikpZS5zZXRQcm9wZXJ0eSh0LG4pO2Vsc2V7Y29uc3Qgbz1mdW5jdGlvbihlLHQpe2NvbnN0IG49ZGlbdF07aWYobilyZXR1cm4gbjtsZXQgbz16KHQpO2lmKFwiZmlsdGVyXCIhPT1vJiZvIGluIGUpcmV0dXJuIGRpW3RdPW87bz1xKG8pO2ZvcihsZXQgcj0wO3I8ZmkubGVuZ3RoO3IrKyl7Y29uc3Qgbj1maVtyXStvO2lmKG4gaW4gZSlyZXR1cm4gZGlbdF09bn1yZXR1cm4gdH0oZSx0KTt1aS50ZXN0KG4pP2Uuc2V0UHJvcGVydHkoRyhvKSxuLnJlcGxhY2UodWksXCJcIiksXCJpbXBvcnRhbnRcIik6ZVtvXT1ufX1jb25zdCBmaT1bXCJXZWJraXRcIixcIk1velwiLFwibXNcIl0sZGk9e307Y29uc3QgaGk9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI7Y29uc3RbbWksZ2ldPSgoKT0+e2xldCBlPURhdGUubm93LHQ9ITE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl7RGF0ZS5ub3coKT5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpLnRpbWVTdGFtcCYmKGU9cGVyZm9ybWFuY2Uubm93LmJpbmQocGVyZm9ybWFuY2UpKTtjb25zdCBuPW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7dD0hIShuJiZOdW1iZXIoblsxXSk8PTUzKX1yZXR1cm5bZSx0XX0pKCk7bGV0IHZpPTA7Y29uc3QgeWk9UHJvbWlzZS5yZXNvbHZlKCksX2k9KCk9Pnt2aT0wfTtmdW5jdGlvbiBiaShlLHQsbixvKXtlLmFkZEV2ZW50TGlzdGVuZXIodCxuLG8pfWZ1bmN0aW9uIFNpKGUsdCxuLG8scj1udWxsKXtjb25zdCBzPWUuX3ZlaXx8KGUuX3ZlaT17fSksaT1zW3RdO2lmKG8mJmkpaS52YWx1ZT1vO2Vsc2V7Y29uc3RbbixsXT1mdW5jdGlvbihlKXtsZXQgdDtpZih4aS50ZXN0KGUpKXtsZXQgbjtmb3IodD17fTtuPWUubWF0Y2goeGkpOyllPWUuc2xpY2UoMCxlLmxlbmd0aC1uWzBdLmxlbmd0aCksdFtuWzBdLnRvTG93ZXJDYXNlKCldPSEwfXJldHVybltHKGUuc2xpY2UoMikpLHRdfSh0KTtpZihvKXtjb25zdCBpPXNbdF09ZnVuY3Rpb24oZSx0KXtjb25zdCBuPWU9Pntjb25zdCBvPWUudGltZVN0YW1wfHxtaSgpOyhnaXx8bz49bi5hdHRhY2hlZC0xKSYmWnQoZnVuY3Rpb24oZSx0KXtpZihFKHQpKXtjb25zdCBuPWUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO3JldHVybiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbj0oKT0+e24uY2FsbChlKSxlLl9zdG9wcGVkPSEwfSx0Lm1hcCgoZT0+dD0+IXQuX3N0b3BwZWQmJmUmJmUodCkpKX1yZXR1cm4gdH0oZSxuLnZhbHVlKSx0LDUsW2VdKX07cmV0dXJuIG4udmFsdWU9ZSxuLmF0dGFjaGVkPSgoKT0+dml8fCh5aS50aGVuKF9pKSx2aT1taSgpKSkoKSxufShvLHIpO2JpKGUsbixpLGwpfWVsc2UgaSYmKCFmdW5jdGlvbihlLHQsbixvKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLG8pfShlLG4saSxsKSxzW3RdPXZvaWQgMCl9fWNvbnN0IHhpPS8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztjb25zdCBDaT0vXm9uW2Etel0vO2Z1bmN0aW9uIHdpKGUsdCl7Y29uc3Qgbj1obyhlKTtjbGFzcyBvIGV4dGVuZHMgTml7Y29uc3RydWN0b3IoZSl7c3VwZXIobixlLHQpfX1yZXR1cm4gby5kZWY9bixvfWNvbnN0IGtpPWU9PndpKGUsVGwpLFRpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MRWxlbWVudD9IVE1MRWxlbWVudDpjbGFzc3t9O2NsYXNzIE5pIGV4dGVuZHMgVGl7Y29uc3RydWN0b3IoZSx0PXt9LG4pe3N1cGVyKCksdGhpcy5fZGVmPWUsdGhpcy5fcHJvcHM9dCx0aGlzLl9pbnN0YW5jZT1udWxsLHRoaXMuX2Nvbm5lY3RlZD0hMSx0aGlzLl9yZXNvbHZlZD0hMSx0aGlzLl9udW1iZXJQcm9wcz1udWxsLHRoaXMuc2hhZG93Um9vdCYmbj9uKHRoaXMuX2NyZWF0ZVZOb2RlKCksdGhpcy5zaGFkb3dSb290KTp0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTpcIm9wZW5cIn0pfWNvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5fY29ubmVjdGVkPSEwLHRoaXMuX2luc3RhbmNlfHx0aGlzLl9yZXNvbHZlRGVmKCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLl9jb25uZWN0ZWQ9ITEsZG4oKCgpPT57dGhpcy5fY29ubmVjdGVkfHwoa2wobnVsbCx0aGlzLnNoYWRvd1Jvb3QpLHRoaXMuX2luc3RhbmNlPW51bGwpfSkpfV9yZXNvbHZlRGVmKCl7aWYodGhpcy5fcmVzb2x2ZWQpcmV0dXJuO3RoaXMuX3Jlc29sdmVkPSEwO2ZvcihsZXQgbj0wO248dGhpcy5hdHRyaWJ1dGVzLmxlbmd0aDtuKyspdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbbl0ubmFtZSk7bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGU9Pntmb3IoY29uc3QgdCBvZiBlKXRoaXMuX3NldEF0dHIodC5hdHRyaWJ1dGVOYW1lKX0pKS5vYnNlcnZlKHRoaXMse2F0dHJpYnV0ZXM6ITB9KTtjb25zdCBlPWU9Pntjb25zdHtwcm9wczp0LHN0eWxlczpufT1lLG89IUUodCkscj10P28/T2JqZWN0LmtleXModCk6dDpbXTtsZXQgcztpZihvKWZvcihjb25zdCBpIGluIHRoaXMuX3Byb3BzKXtjb25zdCBlPXRbaV07KGU9PT1OdW1iZXJ8fGUmJmUudHlwZT09PU51bWJlcikmJih0aGlzLl9wcm9wc1tpXT1YKHRoaXMuX3Byb3BzW2ldKSwoc3x8KHM9T2JqZWN0LmNyZWF0ZShudWxsKSkpW2ldPSEwKX10aGlzLl9udW1iZXJQcm9wcz1zO2Zvcihjb25zdCBpIG9mIE9iamVjdC5rZXlzKHRoaXMpKVwiX1wiIT09aVswXSYmdGhpcy5fc2V0UHJvcChpLHRoaXNbaV0sITAsITEpO2Zvcihjb25zdCBpIG9mIHIubWFwKHopKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGkse2dldCgpe3JldHVybiB0aGlzLl9nZXRQcm9wKGkpfSxzZXQoZSl7dGhpcy5fc2V0UHJvcChpLGUpfX0pO3RoaXMuX2FwcGx5U3R5bGVzKG4pLHRoaXMuX3VwZGF0ZSgpfSx0PXRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyO3Q/dCgpLnRoZW4oZSk6ZSh0aGlzLl9kZWYpfV9zZXRBdHRyKGUpe2xldCB0PXRoaXMuZ2V0QXR0cmlidXRlKGUpO3RoaXMuX251bWJlclByb3BzJiZ0aGlzLl9udW1iZXJQcm9wc1tlXSYmKHQ9WCh0KSksdGhpcy5fc2V0UHJvcCh6KGUpLHQsITEpfV9nZXRQcm9wKGUpe3JldHVybiB0aGlzLl9wcm9wc1tlXX1fc2V0UHJvcChlLHQsbj0hMCxvPSEwKXt0IT09dGhpcy5fcHJvcHNbZV0mJih0aGlzLl9wcm9wc1tlXT10LG8mJnRoaXMuX2luc3RhbmNlJiZ0aGlzLl91cGRhdGUoKSxuJiYoITA9PT10P3RoaXMuc2V0QXR0cmlidXRlKEcoZSksXCJcIik6XCJzdHJpbmdcIj09dHlwZW9mIHR8fFwibnVtYmVyXCI9PXR5cGVvZiB0P3RoaXMuc2V0QXR0cmlidXRlKEcoZSksdCtcIlwiKTp0fHx0aGlzLnJlbW92ZUF0dHJpYnV0ZShHKGUpKSkpfV91cGRhdGUoKXtrbCh0aGlzLl9jcmVhdGVWTm9kZSgpLHRoaXMuc2hhZG93Um9vdCl9X2NyZWF0ZVZOb2RlKCl7Y29uc3QgZT11cyh0aGlzLl9kZWYsdyh7fSx0aGlzLl9wcm9wcykpO3JldHVybiB0aGlzLl9pbnN0YW5jZXx8KGUuY2U9ZT0+e3RoaXMuX2luc3RhbmNlPWUsZS5pc0NFPSEwLGUuZW1pdD0oZSwuLi50KT0+e3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZSx7ZGV0YWlsOnR9KSl9O2xldCB0PXRoaXM7Zm9yKDt0PXQmJih0LnBhcmVudE5vZGV8fHQuaG9zdCk7KWlmKHQgaW5zdGFuY2VvZiBOaSl7ZS5wYXJlbnQ9dC5faW5zdGFuY2U7YnJlYWt9fSksZX1fYXBwbHlTdHlsZXMoZSl7ZSYmZS5mb3JFYWNoKChlPT57Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7dC50ZXh0Q29udGVudD1lLHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0KX0pKX19ZnVuY3Rpb24gRWkoZT1cIiRzdHlsZVwiKXt7Y29uc3QgdD13cygpO2lmKCF0KXJldHVybiB2O2NvbnN0IG49dC50eXBlLl9fY3NzTW9kdWxlcztpZighbilyZXR1cm4gdjtjb25zdCBvPW5bZV07cmV0dXJuIG98fHZ9fWZ1bmN0aW9uICRpKGUpe2NvbnN0IHQ9d3MoKTtpZighdClyZXR1cm47Y29uc3Qgbj0oKT0+T2kodC5zdWJUcmVlLGUodC5wcm94eSkpO1luKG4pLE9vKCgoKT0+e2NvbnN0IGU9bmV3IE11dGF0aW9uT2JzZXJ2ZXIobik7ZS5vYnNlcnZlKHQuc3ViVHJlZS5lbC5wYXJlbnROb2RlLHtjaGlsZExpc3Q6ITB9KSxBbygoKCk9PmUuZGlzY29ubmVjdCgpKSl9KSl9ZnVuY3Rpb24gT2koZSx0KXtpZigxMjgmZS5zaGFwZUZsYWcpe2NvbnN0IG49ZS5zdXNwZW5zZTtlPW4uYWN0aXZlQnJhbmNoLG4ucGVuZGluZ0JyYW5jaCYmIW4uaXNIeWRyYXRpbmcmJm4uZWZmZWN0cy5wdXNoKCgoKT0+e09pKG4uYWN0aXZlQnJhbmNoLHQpfSkpfWZvcig7ZS5jb21wb25lbnQ7KWU9ZS5jb21wb25lbnQuc3ViVHJlZTtpZigxJmUuc2hhcGVGbGFnJiZlLmVsKVJpKGUuZWwsdCk7ZWxzZSBpZihlLnR5cGU9PT1XcillLmNoaWxkcmVuLmZvckVhY2goKGU9Pk9pKGUsdCkpKTtlbHNlIGlmKGUudHlwZT09PUdyKXtsZXR7ZWw6bixhbmNob3I6b309ZTtmb3IoO24mJihSaShuLHQpLG4hPT1vKTspbj1uLm5leHRTaWJsaW5nfX1mdW5jdGlvbiBSaShlLHQpe2lmKDE9PT1lLm5vZGVUeXBlKXtjb25zdCBuPWUuc3R5bGU7Zm9yKGNvbnN0IGUgaW4gdCluLnNldFByb3BlcnR5KGAtLSR7ZX1gLHRbZV0pfX1jb25zdCBGaT0oZSx7c2xvdHM6dH0pPT5acyhpbyxJaShlKSx0KTtGaS5kaXNwbGF5TmFtZT1cIlRyYW5zaXRpb25cIjtjb25zdCBQaT17bmFtZTpTdHJpbmcsdHlwZTpTdHJpbmcsY3NzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZHVyYXRpb246W1N0cmluZyxOdW1iZXIsT2JqZWN0XSxlbnRlckZyb21DbGFzczpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsZW50ZXJUb0NsYXNzOlN0cmluZyxhcHBlYXJGcm9tQ2xhc3M6U3RyaW5nLGFwcGVhckFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJUb0NsYXNzOlN0cmluZyxsZWF2ZUZyb21DbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVUb0NsYXNzOlN0cmluZ30sQWk9RmkucHJvcHM9dyh7fSxpby5wcm9wcyxQaSksTWk9KGUsdD1bXSk9PntFKGUpP2UuZm9yRWFjaCgoZT0+ZSguLi50KSkpOmUmJmUoLi4udCl9LFZpPWU9PiEhZSYmKEUoZSk/ZS5zb21lKChlPT5lLmxlbmd0aD4xKSk6ZS5sZW5ndGg+MSk7ZnVuY3Rpb24gSWkoZSl7Y29uc3QgdD17fTtmb3IoY29uc3QgdyBpbiBlKXcgaW4gUGl8fCh0W3ddPWVbd10pO2lmKCExPT09ZS5jc3MpcmV0dXJuIHQ7Y29uc3R7bmFtZTpuPVwidlwiLHR5cGU6byxkdXJhdGlvbjpyLGVudGVyRnJvbUNsYXNzOnM9YCR7bn0tZW50ZXItZnJvbWAsZW50ZXJBY3RpdmVDbGFzczppPWAke259LWVudGVyLWFjdGl2ZWAsZW50ZXJUb0NsYXNzOmw9YCR7bn0tZW50ZXItdG9gLGFwcGVhckZyb21DbGFzczpjPXMsYXBwZWFyQWN0aXZlQ2xhc3M6YT1pLGFwcGVhclRvQ2xhc3M6dT1sLGxlYXZlRnJvbUNsYXNzOnA9YCR7bn0tbGVhdmUtZnJvbWAsbGVhdmVBY3RpdmVDbGFzczpmPWAke259LWxlYXZlLWFjdGl2ZWAsbGVhdmVUb0NsYXNzOmQ9YCR7bn0tbGVhdmUtdG9gfT1lLGg9ZnVuY3Rpb24oZSl7aWYobnVsbD09ZSlyZXR1cm4gbnVsbDtpZihNKGUpKXJldHVybltCaShlLmVudGVyKSxCaShlLmxlYXZlKV07e2NvbnN0IHQ9QmkoZSk7cmV0dXJuW3QsdF19fShyKSxtPWgmJmhbMF0sZz1oJiZoWzFdLHtvbkJlZm9yZUVudGVyOnYsb25FbnRlcjp5LG9uRW50ZXJDYW5jZWxsZWQ6XyxvbkxlYXZlOmIsb25MZWF2ZUNhbmNlbGxlZDpTLG9uQmVmb3JlQXBwZWFyOng9dixvbkFwcGVhcjpDPXksb25BcHBlYXJDYW5jZWxsZWQ6az1ffT10LFQ9KGUsdCxuKT0+e2ppKGUsdD91OmwpLGppKGUsdD9hOmkpLG4mJm4oKX0sTj0oZSx0KT0+e2UuX2lzTGVhdmluZz0hMSxqaShlLHApLGppKGUsZCksamkoZSxmKSx0JiZ0KCl9LEU9ZT0+KHQsbik9Pntjb25zdCByPWU/Qzp5LGk9KCk9PlQodCxlLG4pO01pKHIsW3QsaV0pLFVpKCgoKT0+e2ppKHQsZT9jOnMpLExpKHQsZT91OmwpLFZpKHIpfHxIaSh0LG8sbSxpKX0pKX07cmV0dXJuIHcodCx7b25CZWZvcmVFbnRlcihlKXtNaSh2LFtlXSksTGkoZSxzKSxMaShlLGkpfSxvbkJlZm9yZUFwcGVhcihlKXtNaSh4LFtlXSksTGkoZSxjKSxMaShlLGEpfSxvbkVudGVyOkUoITEpLG9uQXBwZWFyOkUoITApLG9uTGVhdmUoZSx0KXtlLl9pc0xlYXZpbmc9ITA7Y29uc3Qgbj0oKT0+TihlLHQpO0xpKGUscCksR2koKSxMaShlLGYpLFVpKCgoKT0+e2UuX2lzTGVhdmluZyYmKGppKGUscCksTGkoZSxkKSxWaShiKXx8SGkoZSxvLGcsbikpfSkpLE1pKGIsW2Usbl0pfSxvbkVudGVyQ2FuY2VsbGVkKGUpe1QoZSwhMSksTWkoXyxbZV0pfSxvbkFwcGVhckNhbmNlbGxlZChlKXtUKGUsITApLE1pKGssW2VdKX0sb25MZWF2ZUNhbmNlbGxlZChlKXtOKGUpLE1pKFMsW2VdKX19KX1mdW5jdGlvbiBCaShlKXtyZXR1cm4gWChlKX1mdW5jdGlvbiBMaShlLHQpe3Quc3BsaXQoL1xccysvKS5mb3JFYWNoKCh0PT50JiZlLmNsYXNzTGlzdC5hZGQodCkpKSwoZS5fdnRjfHwoZS5fdnRjPW5ldyBTZXQpKS5hZGQodCl9ZnVuY3Rpb24gamkoZSx0KXt0LnNwbGl0KC9cXHMrLykuZm9yRWFjaCgodD0+dCYmZS5jbGFzc0xpc3QucmVtb3ZlKHQpKSk7Y29uc3R7X3Z0YzpufT1lO24mJihuLmRlbGV0ZSh0KSxuLnNpemV8fChlLl92dGM9dm9pZCAwKSl9ZnVuY3Rpb24gVWkoZSl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKT0+e3JlcXVlc3RBbmltYXRpb25GcmFtZShlKX0pKX1sZXQgRGk9MDtmdW5jdGlvbiBIaShlLHQsbixvKXtjb25zdCByPWUuX2VuZElkPSsrRGkscz0oKT0+e3I9PT1lLl9lbmRJZCYmbygpfTtpZihuKXJldHVybiBzZXRUaW1lb3V0KHMsbik7Y29uc3R7dHlwZTppLHRpbWVvdXQ6bCxwcm9wQ291bnQ6Y309V2koZSx0KTtpZighaSlyZXR1cm4gbygpO2NvbnN0IGE9aStcImVuZFwiO2xldCB1PTA7Y29uc3QgcD0oKT0+e2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGYpLHMoKX0sZj10PT57dC50YXJnZXQ9PT1lJiYrK3U+PWMmJnAoKX07c2V0VGltZW91dCgoKCk9Pnt1PGMmJnAoKX0pLGwrMSksZS5hZGRFdmVudExpc3RlbmVyKGEsZil9ZnVuY3Rpb24gV2koZSx0KXtjb25zdCBuPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUpLG89ZT0+KG5bZV18fFwiXCIpLnNwbGl0KFwiLCBcIikscj1vKFwidHJhbnNpdGlvbkRlbGF5XCIpLHM9byhcInRyYW5zaXRpb25EdXJhdGlvblwiKSxpPXppKHIscyksbD1vKFwiYW5pbWF0aW9uRGVsYXlcIiksYz1vKFwiYW5pbWF0aW9uRHVyYXRpb25cIiksYT16aShsLGMpO2xldCB1PW51bGwscD0wLGY9MDtcInRyYW5zaXRpb25cIj09PXQ/aT4wJiYodT1cInRyYW5zaXRpb25cIixwPWksZj1zLmxlbmd0aCk6XCJhbmltYXRpb25cIj09PXQ/YT4wJiYodT1cImFuaW1hdGlvblwiLHA9YSxmPWMubGVuZ3RoKToocD1NYXRoLm1heChpLGEpLHU9cD4wP2k+YT9cInRyYW5zaXRpb25cIjpcImFuaW1hdGlvblwiOm51bGwsZj11P1widHJhbnNpdGlvblwiPT09dT9zLmxlbmd0aDpjLmxlbmd0aDowKTtyZXR1cm57dHlwZTp1LHRpbWVvdXQ6cCxwcm9wQ291bnQ6ZixoYXNUcmFuc2Zvcm06XCJ0cmFuc2l0aW9uXCI9PT11JiYvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvLnRlc3Qobi50cmFuc2l0aW9uUHJvcGVydHkpfX1mdW5jdGlvbiB6aShlLHQpe2Zvcig7ZS5sZW5ndGg8dC5sZW5ndGg7KWU9ZS5jb25jYXQoZSk7cmV0dXJuIE1hdGgubWF4KC4uLnQubWFwKCgodCxuKT0+S2kodCkrS2koZVtuXSkpKSl9ZnVuY3Rpb24gS2koZSl7cmV0dXJuIDFlMypOdW1iZXIoZS5zbGljZSgwLC0xKS5yZXBsYWNlKFwiLFwiLFwiLlwiKSl9ZnVuY3Rpb24gR2koKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHR9Y29uc3QgcWk9bmV3IFdlYWtNYXAsSmk9bmV3IFdlYWtNYXAsWWk9e25hbWU6XCJUcmFuc2l0aW9uR3JvdXBcIixwcm9wczp3KHt9LEFpLHt0YWc6U3RyaW5nLG1vdmVDbGFzczpTdHJpbmd9KSxzZXR1cChlLHtzbG90czp0fSl7Y29uc3Qgbj13cygpLG89cm8oKTtsZXQgcixzO3JldHVybiBGbygoKCk9PntpZighci5sZW5ndGgpcmV0dXJuO2NvbnN0IHQ9ZS5tb3ZlQ2xhc3N8fGAke2UubmFtZXx8XCJ2XCJ9LW1vdmVgO2lmKCFmdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLmNsb25lTm9kZSgpO2UuX3Z0YyYmZS5fdnRjLmZvckVhY2goKGU9PntlLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoZT0+ZSYmby5jbGFzc0xpc3QucmVtb3ZlKGUpKSl9KSk7bi5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGU9PmUmJm8uY2xhc3NMaXN0LmFkZChlKSkpLG8uc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtjb25zdCByPTE9PT10Lm5vZGVUeXBlP3Q6dC5wYXJlbnROb2RlO3IuYXBwZW5kQ2hpbGQobyk7Y29uc3R7aGFzVHJhbnNmb3JtOnN9PVdpKG8pO3JldHVybiByLnJlbW92ZUNoaWxkKG8pLHN9KHJbMF0uZWwsbi52bm9kZS5lbCx0KSlyZXR1cm47ci5mb3JFYWNoKFppKSxyLmZvckVhY2goUWkpO2NvbnN0IG89ci5maWx0ZXIoWGkpO0dpKCksby5mb3JFYWNoKChlPT57Y29uc3Qgbj1lLmVsLG89bi5zdHlsZTtMaShuLHQpLG8udHJhbnNmb3JtPW8ud2Via2l0VHJhbnNmb3JtPW8udHJhbnNpdGlvbkR1cmF0aW9uPVwiXCI7Y29uc3Qgcj1uLl9tb3ZlQ2I9ZT0+e2UmJmUudGFyZ2V0IT09bnx8ZSYmIS90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIixyKSxuLl9tb3ZlQ2I9bnVsbCxqaShuLHQpKX07bi5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHIpfSkpfSkpLCgpPT57Y29uc3QgaT1rdChlKSxsPUlpKGkpO2xldCBjPWkudGFnfHxXcjtyPXMscz10LmRlZmF1bHQ/Zm8odC5kZWZhdWx0KCkpOltdO2ZvcihsZXQgZT0wO2U8cy5sZW5ndGg7ZSsrKXtjb25zdCB0PXNbZV07bnVsbCE9dC5rZXkmJnBvKHQsY28odCxsLG8sbikpfWlmKHIpZm9yKGxldCBlPTA7ZTxyLmxlbmd0aDtlKyspe2NvbnN0IHQ9cltlXTtwbyh0LGNvKHQsbCxvLG4pKSxxaS5zZXQodCx0LmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKX1yZXR1cm4gdXMoYyxudWxsLHMpfX19O2Z1bmN0aW9uIFppKGUpe2NvbnN0IHQ9ZS5lbDt0Ll9tb3ZlQ2ImJnQuX21vdmVDYigpLHQuX2VudGVyQ2ImJnQuX2VudGVyQ2IoKX1mdW5jdGlvbiBRaShlKXtKaS5zZXQoZSxlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKX1mdW5jdGlvbiBYaShlKXtjb25zdCB0PXFpLmdldChlKSxuPUppLmdldChlKSxvPXQubGVmdC1uLmxlZnQscj10LnRvcC1uLnRvcDtpZihvfHxyKXtjb25zdCB0PWUuZWwuc3R5bGU7cmV0dXJuIHQudHJhbnNmb3JtPXQud2Via2l0VHJhbnNmb3JtPWB0cmFuc2xhdGUoJHtvfXB4LCR7cn1weClgLHQudHJhbnNpdGlvbkR1cmF0aW9uPVwiMHNcIixlfX1jb25zdCBlbD1lPT57Y29uc3QgdD1lLnByb3BzW1wib25VcGRhdGU6bW9kZWxWYWx1ZVwiXXx8ITE7cmV0dXJuIEUodCk/ZT0+Wih0LGUpOnR9O2Z1bmN0aW9uIHRsKGUpe2UudGFyZ2V0LmNvbXBvc2luZz0hMH1mdW5jdGlvbiBubChlKXtjb25zdCB0PWUudGFyZ2V0O3QuY29tcG9zaW5nJiYodC5jb21wb3Npbmc9ITEsdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIpKSl9Y29uc3Qgb2w9e2NyZWF0ZWQoZSx7bW9kaWZpZXJzOntsYXp5OnQsdHJpbTpuLG51bWJlcjpvfX0scil7ZS5fYXNzaWduPWVsKHIpO2NvbnN0IHM9b3x8ci5wcm9wcyYmXCJudW1iZXJcIj09PXIucHJvcHMudHlwZTtiaShlLHQ/XCJjaGFuZ2VcIjpcImlucHV0XCIsKHQ9PntpZih0LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuO2xldCBvPWUudmFsdWU7biYmKG89by50cmltKCkpLHMmJihvPVgobykpLGUuX2Fzc2lnbihvKX0pKSxuJiZiaShlLFwiY2hhbmdlXCIsKCgpPT57ZS52YWx1ZT1lLnZhbHVlLnRyaW0oKX0pKSx0fHwoYmkoZSxcImNvbXBvc2l0aW9uc3RhcnRcIix0bCksYmkoZSxcImNvbXBvc2l0aW9uZW5kXCIsbmwpLGJpKGUsXCJjaGFuZ2VcIixubCkpfSxtb3VudGVkKGUse3ZhbHVlOnR9KXtlLnZhbHVlPW51bGw9PXQ/XCJcIjp0fSxiZWZvcmVVcGRhdGUoZSx7dmFsdWU6dCxtb2RpZmllcnM6e2xhenk6bix0cmltOm8sbnVtYmVyOnJ9fSxzKXtpZihlLl9hc3NpZ249ZWwocyksZS5jb21wb3NpbmcpcmV0dXJuO2lmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT1lJiZcInJhbmdlXCIhPT1lLnR5cGUpe2lmKG4pcmV0dXJuO2lmKG8mJmUudmFsdWUudHJpbSgpPT09dClyZXR1cm47aWYoKHJ8fFwibnVtYmVyXCI9PT1lLnR5cGUpJiZYKGUudmFsdWUpPT09dClyZXR1cm59Y29uc3QgaT1udWxsPT10P1wiXCI6dDtlLnZhbHVlIT09aSYmKGUudmFsdWU9aSl9fSxybD17ZGVlcDohMCxjcmVhdGVkKGUsdCxuKXtlLl9hc3NpZ249ZWwobiksYmkoZSxcImNoYW5nZVwiLCgoKT0+e2NvbnN0IHQ9ZS5fbW9kZWxWYWx1ZSxuPWFsKGUpLG89ZS5jaGVja2VkLHI9ZS5fYXNzaWduO2lmKEUodCkpe2NvbnN0IGU9aCh0LG4pLHM9LTEhPT1lO2lmKG8mJiFzKXIodC5jb25jYXQobikpO2Vsc2UgaWYoIW8mJnMpe2NvbnN0IG49Wy4uLnRdO24uc3BsaWNlKGUsMSkscihuKX19ZWxzZSBpZihPKHQpKXtjb25zdCBlPW5ldyBTZXQodCk7bz9lLmFkZChuKTplLmRlbGV0ZShuKSxyKGUpfWVsc2Ugcih1bChlLG8pKX0pKX0sbW91bnRlZDpzbCxiZWZvcmVVcGRhdGUoZSx0LG4pe2UuX2Fzc2lnbj1lbChuKSxzbChlLHQsbil9fTtmdW5jdGlvbiBzbChlLHt2YWx1ZTp0LG9sZFZhbHVlOm59LG8pe2UuX21vZGVsVmFsdWU9dCxFKHQpP2UuY2hlY2tlZD1oKHQsby5wcm9wcy52YWx1ZSk+LTE6Tyh0KT9lLmNoZWNrZWQ9dC5oYXMoby5wcm9wcy52YWx1ZSk6dCE9PW4mJihlLmNoZWNrZWQ9ZCh0LHVsKGUsITApKSl9Y29uc3QgaWw9e2NyZWF0ZWQoZSx7dmFsdWU6dH0sbil7ZS5jaGVja2VkPWQodCxuLnByb3BzLnZhbHVlKSxlLl9hc3NpZ249ZWwobiksYmkoZSxcImNoYW5nZVwiLCgoKT0+e2UuX2Fzc2lnbihhbChlKSl9KSl9LGJlZm9yZVVwZGF0ZShlLHt2YWx1ZTp0LG9sZFZhbHVlOm59LG8pe2UuX2Fzc2lnbj1lbChvKSx0IT09biYmKGUuY2hlY2tlZD1kKHQsby5wcm9wcy52YWx1ZSkpfX0sbGw9e2RlZXA6ITAsY3JlYXRlZChlLHt2YWx1ZTp0LG1vZGlmaWVyczp7bnVtYmVyOm59fSxvKXtjb25zdCByPU8odCk7YmkoZSxcImNoYW5nZVwiLCgoKT0+e2NvbnN0IHQ9QXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUub3B0aW9ucywoZT0+ZS5zZWxlY3RlZCkpLm1hcCgoZT0+bj9YKGFsKGUpKTphbChlKSkpO2UuX2Fzc2lnbihlLm11bHRpcGxlP3I/bmV3IFNldCh0KTp0OnRbMF0pfSkpLGUuX2Fzc2lnbj1lbChvKX0sbW91bnRlZChlLHt2YWx1ZTp0fSl7Y2woZSx0KX0sYmVmb3JlVXBkYXRlKGUsdCxuKXtlLl9hc3NpZ249ZWwobil9LHVwZGF0ZWQoZSx7dmFsdWU6dH0pe2NsKGUsdCl9fTtmdW5jdGlvbiBjbChlLHQpe2NvbnN0IG49ZS5tdWx0aXBsZTtpZighbnx8RSh0KXx8Tyh0KSl7Zm9yKGxldCBvPTAscj1lLm9wdGlvbnMubGVuZ3RoO288cjtvKyspe2NvbnN0IHI9ZS5vcHRpb25zW29dLHM9YWwocik7aWYobilyLnNlbGVjdGVkPUUodCk/aCh0LHMpPi0xOnQuaGFzKHMpO2Vsc2UgaWYoZChhbChyKSx0KSlyZXR1cm4gdm9pZChlLnNlbGVjdGVkSW5kZXghPT1vJiYoZS5zZWxlY3RlZEluZGV4PW8pKX1ufHwtMT09PWUuc2VsZWN0ZWRJbmRleHx8KGUuc2VsZWN0ZWRJbmRleD0tMSl9fWZ1bmN0aW9uIGFsKGUpe3JldHVyblwiX3ZhbHVlXCJpbiBlP2UuX3ZhbHVlOmUudmFsdWV9ZnVuY3Rpb24gdWwoZSx0KXtjb25zdCBuPXQ/XCJfdHJ1ZVZhbHVlXCI6XCJfZmFsc2VWYWx1ZVwiO3JldHVybiBuIGluIGU/ZVtuXTp0fWNvbnN0IHBsPXtjcmVhdGVkKGUsdCxuKXtmbChlLHQsbixudWxsLFwiY3JlYXRlZFwiKX0sbW91bnRlZChlLHQsbil7ZmwoZSx0LG4sbnVsbCxcIm1vdW50ZWRcIil9LGJlZm9yZVVwZGF0ZShlLHQsbixvKXtmbChlLHQsbixvLFwiYmVmb3JlVXBkYXRlXCIpfSx1cGRhdGVkKGUsdCxuLG8pe2ZsKGUsdCxuLG8sXCJ1cGRhdGVkXCIpfX07ZnVuY3Rpb24gZmwoZSx0LG4sbyxyKXtjb25zdCBzPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUpe2Nhc2VcIlNFTEVDVFwiOnJldHVybiBsbDtjYXNlXCJURVhUQVJFQVwiOnJldHVybiBvbDtkZWZhdWx0OnN3aXRjaCh0KXtjYXNlXCJjaGVja2JveFwiOnJldHVybiBybDtjYXNlXCJyYWRpb1wiOnJldHVybiBpbDtkZWZhdWx0OnJldHVybiBvbH19fShlLnRhZ05hbWUsbi5wcm9wcyYmbi5wcm9wcy50eXBlKVtyXTtzJiZzKGUsdCxuLG8pfWNvbnN0IGRsPVtcImN0cmxcIixcInNoaWZ0XCIsXCJhbHRcIixcIm1ldGFcIl0saGw9e3N0b3A6ZT0+ZS5zdG9wUHJvcGFnYXRpb24oKSxwcmV2ZW50OmU9PmUucHJldmVudERlZmF1bHQoKSxzZWxmOmU9PmUudGFyZ2V0IT09ZS5jdXJyZW50VGFyZ2V0LGN0cmw6ZT0+IWUuY3RybEtleSxzaGlmdDplPT4hZS5zaGlmdEtleSxhbHQ6ZT0+IWUuYWx0S2V5LG1ldGE6ZT0+IWUubWV0YUtleSxsZWZ0OmU9PlwiYnV0dG9uXCJpbiBlJiYwIT09ZS5idXR0b24sbWlkZGxlOmU9PlwiYnV0dG9uXCJpbiBlJiYxIT09ZS5idXR0b24scmlnaHQ6ZT0+XCJidXR0b25cImluIGUmJjIhPT1lLmJ1dHRvbixleGFjdDooZSx0KT0+ZGwuc29tZSgobj0+ZVtgJHtufUtleWBdJiYhdC5pbmNsdWRlcyhuKSkpfSxtbD0oZSx0KT0+KG4sLi4ubyk9Pntmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKyl7Y29uc3Qgbz1obFt0W2VdXTtpZihvJiZvKG4sdCkpcmV0dXJufXJldHVybiBlKG4sLi4ubyl9LGdsPXtlc2M6XCJlc2NhcGVcIixzcGFjZTpcIiBcIix1cDpcImFycm93LXVwXCIsbGVmdDpcImFycm93LWxlZnRcIixyaWdodDpcImFycm93LXJpZ2h0XCIsZG93bjpcImFycm93LWRvd25cIixkZWxldGU6XCJiYWNrc3BhY2VcIn0sdmw9KGUsdCk9Pm49PntpZighKFwia2V5XCJpbiBuKSlyZXR1cm47Y29uc3Qgbz1HKG4ua2V5KTtyZXR1cm4gdC5zb21lKChlPT5lPT09b3x8Z2xbZV09PT1vKSk/ZShuKTp2b2lkIDB9LHlsPXtiZWZvcmVNb3VudChlLHt2YWx1ZTp0fSx7dHJhbnNpdGlvbjpufSl7ZS5fdm9kPVwibm9uZVwiPT09ZS5zdHlsZS5kaXNwbGF5P1wiXCI6ZS5zdHlsZS5kaXNwbGF5LG4mJnQ/bi5iZWZvcmVFbnRlcihlKTpfbChlLHQpfSxtb3VudGVkKGUse3ZhbHVlOnR9LHt0cmFuc2l0aW9uOm59KXtuJiZ0JiZuLmVudGVyKGUpfSx1cGRhdGVkKGUse3ZhbHVlOnQsb2xkVmFsdWU6bn0se3RyYW5zaXRpb246b30peyF0IT0hbiYmKG8/dD8oby5iZWZvcmVFbnRlcihlKSxfbChlLCEwKSxvLmVudGVyKGUpKTpvLmxlYXZlKGUsKCgpPT57X2woZSwhMSl9KSk6X2woZSx0KSl9LGJlZm9yZVVubW91bnQoZSx7dmFsdWU6dH0pe19sKGUsdCl9fTtmdW5jdGlvbiBfbChlLHQpe2Uuc3R5bGUuZGlzcGxheT10P2UuX3ZvZDpcIm5vbmVcIn1jb25zdCBibD13KHtwYXRjaFByb3A6KGUsdCxyLHMsaT0hMSxsLGMsYSx1KT0+e1wiY2xhc3NcIj09PXQ/ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS5fdnRjO28mJih0PSh0P1t0LC4uLm9dOlsuLi5vXSkuam9pbihcIiBcIikpLG51bGw9PXQ/ZS5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKTpuP2Uuc2V0QXR0cmlidXRlKFwiY2xhc3NcIix0KTplLmNsYXNzTmFtZT10fShlLHMsaSk6XCJzdHlsZVwiPT09dD9mdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLnN0eWxlLHI9UChuKTtpZihuJiYhcil7Zm9yKGNvbnN0IGUgaW4gbilwaShvLGUsbltlXSk7aWYodCYmIVAodCkpZm9yKGNvbnN0IGUgaW4gdCludWxsPT1uW2VdJiZwaShvLGUsXCJcIil9ZWxzZXtjb25zdCBzPW8uZGlzcGxheTtyP3QhPT1uJiYoby5jc3NUZXh0PW4pOnQmJmUucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIiksXCJfdm9kXCJpbiBlJiYoby5kaXNwbGF5PXMpfX0oZSxyLHMpOngodCk/Qyh0KXx8U2koZSx0LDAscyxjKTooXCIuXCI9PT10WzBdPyh0PXQuc2xpY2UoMSksMSk6XCJeXCI9PT10WzBdPyh0PXQuc2xpY2UoMSksMCk6ZnVuY3Rpb24oZSx0LG4sbyl7aWYobylyZXR1cm5cImlubmVySFRNTFwiPT09dHx8XCJ0ZXh0Q29udGVudFwiPT09dHx8ISEodCBpbiBlJiZDaS50ZXN0KHQpJiZGKG4pKTtpZihcInNwZWxsY2hlY2tcIj09PXR8fFwiZHJhZ2dhYmxlXCI9PT10fHxcInRyYW5zbGF0ZVwiPT09dClyZXR1cm4hMTtpZihcImZvcm1cIj09PXQpcmV0dXJuITE7aWYoXCJsaXN0XCI9PT10JiZcIklOUFVUXCI9PT1lLnRhZ05hbWUpcmV0dXJuITE7aWYoXCJ0eXBlXCI9PT10JiZcIlRFWFRBUkVBXCI9PT1lLnRhZ05hbWUpcmV0dXJuITE7aWYoQ2kudGVzdCh0KSYmUChuKSlyZXR1cm4hMTtyZXR1cm4gdCBpbiBlfShlLHQscyxpKSk/ZnVuY3Rpb24oZSx0LG4scixzLGksbCl7aWYoXCJpbm5lckhUTUxcIj09PXR8fFwidGV4dENvbnRlbnRcIj09PXQpcmV0dXJuIHImJmwocixzLGkpLHZvaWQoZVt0XT1udWxsPT1uP1wiXCI6bik7aWYoXCJ2YWx1ZVwiPT09dCYmXCJQUk9HUkVTU1wiIT09ZS50YWdOYW1lJiYhZS50YWdOYW1lLmluY2x1ZGVzKFwiLVwiKSl7ZS5fdmFsdWU9bjtjb25zdCBvPW51bGw9PW4/XCJcIjpuO3JldHVybiBlLnZhbHVlPT09byYmXCJPUFRJT05cIiE9PWUudGFnTmFtZXx8KGUudmFsdWU9byksdm9pZChudWxsPT1uJiZlLnJlbW92ZUF0dHJpYnV0ZSh0KSl9bGV0IGM9ITE7aWYoXCJcIj09PW58fG51bGw9PW4pe2NvbnN0IHI9dHlwZW9mIGVbdF07XCJib29sZWFuXCI9PT1yP249byhuKTpudWxsPT1uJiZcInN0cmluZ1wiPT09cj8obj1cIlwiLGM9ITApOlwibnVtYmVyXCI9PT1yJiYobj0wLGM9ITApfXRyeXtlW3RdPW59Y2F0Y2goYSl7fWMmJmUucmVtb3ZlQXR0cmlidXRlKHQpfShlLHQscyxsLGMsYSx1KTooXCJ0cnVlLXZhbHVlXCI9PT10P2UuX3RydWVWYWx1ZT1zOlwiZmFsc2UtdmFsdWVcIj09PXQmJihlLl9mYWxzZVZhbHVlPXMpLGZ1bmN0aW9uKGUsdCxyLHMsaSl7aWYocyYmdC5zdGFydHNXaXRoKFwieGxpbms6XCIpKW51bGw9PXI/ZS5yZW1vdmVBdHRyaWJ1dGVOUyhoaSx0LnNsaWNlKDYsdC5sZW5ndGgpKTplLnNldEF0dHJpYnV0ZU5TKGhpLHQscik7ZWxzZXtjb25zdCBzPW4odCk7bnVsbD09cnx8cyYmIW8ocik/ZS5yZW1vdmVBdHRyaWJ1dGUodCk6ZS5zZXRBdHRyaWJ1dGUodCxzP1wiXCI6cil9fShlLHQscyxpKSl9fSxhaSk7bGV0IFNsLHhsPSExO2Z1bmN0aW9uIENsKCl7cmV0dXJuIFNsfHwoU2w9QXIoYmwpKX1mdW5jdGlvbiB3bCgpe3JldHVybiBTbD14bD9TbDpNcihibCkseGw9ITAsU2x9Y29uc3Qga2w9KC4uLmUpPT57Q2woKS5yZW5kZXIoLi4uZSl9LFRsPSguLi5lKT0+e3dsKCkuaHlkcmF0ZSguLi5lKX0sTmw9KC4uLmUpPT57Y29uc3QgdD1DbCgpLmNyZWF0ZUFwcCguLi5lKSx7bW91bnQ6bn09dDtyZXR1cm4gdC5tb3VudD1lPT57Y29uc3Qgbz0kbChlKTtpZighbylyZXR1cm47Y29uc3Qgcj10Ll9jb21wb25lbnQ7RihyKXx8ci5yZW5kZXJ8fHIudGVtcGxhdGV8fChyLnRlbXBsYXRlPW8uaW5uZXJIVE1MKSxvLmlubmVySFRNTD1cIlwiO2NvbnN0IHM9bihvLCExLG8gaW5zdGFuY2VvZiBTVkdFbGVtZW50KTtyZXR1cm4gbyBpbnN0YW5jZW9mIEVsZW1lbnQmJihvLnJlbW92ZUF0dHJpYnV0ZShcInYtY2xvYWtcIiksby5zZXRBdHRyaWJ1dGUoXCJkYXRhLXYtYXBwXCIsXCJcIikpLHN9LHR9LEVsPSguLi5lKT0+e2NvbnN0IHQ9d2woKS5jcmVhdGVBcHAoLi4uZSkse21vdW50Om59PXQ7cmV0dXJuIHQubW91bnQ9ZT0+e2NvbnN0IHQ9JGwoZSk7aWYodClyZXR1cm4gbih0LCEwLHQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KX0sdH07ZnVuY3Rpb24gJGwoZSl7aWYoUChlKSl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSl9cmV0dXJuIGV9Y29uc3QgT2w9Xzt2YXIgUmw9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwscmVuZGVyOmtsLGh5ZHJhdGU6VGwsY3JlYXRlQXBwOk5sLGNyZWF0ZVNTUkFwcDpFbCxpbml0RGlyZWN0aXZlc0ZvclNTUjpPbCxkZWZpbmVDdXN0b21FbGVtZW50OndpLGRlZmluZVNTUkN1c3RvbUVsZW1lbnQ6a2ksVnVlRWxlbWVudDpOaSx1c2VDc3NNb2R1bGU6RWksdXNlQ3NzVmFyczokaSxUcmFuc2l0aW9uOkZpLFRyYW5zaXRpb25Hcm91cDpZaSx2TW9kZWxUZXh0Om9sLHZNb2RlbENoZWNrYm94OnJsLHZNb2RlbFJhZGlvOmlsLHZNb2RlbFNlbGVjdDpsbCx2TW9kZWxEeW5hbWljOnBsLHdpdGhNb2RpZmllcnM6bWwsd2l0aEtleXM6dmwsdlNob3c6eWwscmVhY3RpdmU6Z3QscmVmOkZ0LHJlYWRvbmx5Onl0LHVucmVmOkl0LHByb3h5UmVmczpMdCxpc1JlZjpSdCx0b1JlZjpXdCx0b1JlZnM6RHQsaXNQcm94eTp3dCxpc1JlYWN0aXZlOlN0LGlzUmVhZG9ubHk6eHQsaXNTaGFsbG93OkN0LGN1c3RvbVJlZjpVdCx0cmlnZ2VyUmVmOlZ0LHNoYWxsb3dSZWY6UHQsc2hhbGxvd1JlYWN0aXZlOnZ0LHNoYWxsb3dSZWFkb25seTpfdCxtYXJrUmF3OlR0LHRvUmF3Omt0LGVmZmVjdDp5ZSxzdG9wOl9lLFJlYWN0aXZlRWZmZWN0OmdlLGVmZmVjdFNjb3BlOm9lLEVmZmVjdFNjb3BlOm5lLGdldEN1cnJlbnRTY29wZTpzZSxvblNjb3BlRGlzcG9zZTppZSxjb21wdXRlZDpqcyx3YXRjaDpYbix3YXRjaEVmZmVjdDpKbix3YXRjaFBvc3RFZmZlY3Q6WW4sd2F0Y2hTeW5jRWZmZWN0OlpuLG9uQmVmb3JlTW91bnQ6JG8sb25Nb3VudGVkOk9vLG9uQmVmb3JlVXBkYXRlOlJvLG9uVXBkYXRlZDpGbyxvbkJlZm9yZVVubW91bnQ6UG8sb25Vbm1vdW50ZWQ6QW8sb25BY3RpdmF0ZWQ6U28sb25EZWFjdGl2YXRlZDp4byxvblJlbmRlclRyYWNrZWQ6SW8sb25SZW5kZXJUcmlnZ2VyZWQ6Vm8sb25FcnJvckNhcHR1cmVkOkJvLG9uU2VydmVyUHJlZmV0Y2g6TW8scHJvdmlkZTpHbixpbmplY3Q6cW4sbmV4dFRpY2s6ZG4sZGVmaW5lQ29tcG9uZW50OmhvLGRlZmluZUFzeW5jQ29tcG9uZW50OmdvLHVzZUF0dHJzOktzLHVzZVNsb3RzOnpzLGRlZmluZVByb3BzOlVzLGRlZmluZUVtaXRzOkRzLGRlZmluZUV4cG9zZTpIcyx3aXRoRGVmYXVsdHM6V3MsbWVyZ2VEZWZhdWx0czpxcyxjcmVhdGVQcm9wc1Jlc3RQcm94eTpKcyx3aXRoQXN5bmNDb250ZXh0OllzLGdldEN1cnJlbnRJbnN0YW5jZTp3cyxoOlpzLGNyZWF0ZVZOb2RlOnVzLGNsb25lVk5vZGU6ZnMsbWVyZ2VQcm9wczpfcyxpc1ZOb2RlOm9zLEZyYWdtZW50OldyLFRleHQ6enIsQ29tbWVudDpLcixTdGF0aWM6R3IsVGVsZXBvcnQ6SHIsU3VzcGVuc2U6VW4sS2VlcEFsaXZlOl9vLEJhc2VUcmFuc2l0aW9uOmlvLHdpdGhEaXJlY3RpdmVzOkxvLHVzZVNTUkNvbnRleHQ6WHMsc3NyQ29udGV4dEtleTpRcyxjcmVhdGVSZW5kZXJlcjpBcixjcmVhdGVIeWRyYXRpb25SZW5kZXJlcjpNcixxdWV1ZVBvc3RGbHVzaENiOnZuLHdhcm46R3QsaGFuZGxlRXJyb3I6UXQsY2FsbFdpdGhFcnJvckhhbmRsaW5nOll0LGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nOlp0LHJlc29sdmVDb21wb25lbnQ6VW8scmVzb2x2ZURpcmVjdGl2ZTpXbyxyZXNvbHZlRHluYW1pY0NvbXBvbmVudDpIbyxyZWdpc3RlclJ1bnRpbWVDb21waWxlcjpGcyxpc1J1bnRpbWVPbmx5OlBzLHVzZVRyYW5zaXRpb25TdGF0ZTpybyxyZXNvbHZlVHJhbnNpdGlvbkhvb2tzOmNvLHNldFRyYW5zaXRpb25Ib29rczpwbyxnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW46Zm8saW5pdEN1c3RvbUZvcm1hdHRlcjplaSxnZXQgZGV2dG9vbHMoKXtyZXR1cm4geG59LHNldERldnRvb2xzSG9vazp3bix3aXRoQ3R4OkFuLHB1c2hTY29wZUlkOlJuLHBvcFNjb3BlSWQ6Rm4sd2l0aFNjb3BlSWQ6UG4scmVuZGVyTGlzdDpHbyx0b0hhbmRsZXJzOlpvLHJlbmRlclNsb3Q6Sm8sY3JlYXRlU2xvdHM6cW8sd2l0aE1lbW86dGksaXNNZW1vU2FtZTpuaSxvcGVuQmxvY2s6WXIsY3JlYXRlQmxvY2s6bnMsc2V0QmxvY2tUcmFja2luZzpYcixjcmVhdGVUZXh0Vk5vZGU6ZHMsY3JlYXRlQ29tbWVudFZOb2RlOm1zLGNyZWF0ZVN0YXRpY1ZOb2RlOmhzLGNyZWF0ZUVsZW1lbnRWTm9kZTphcyxjcmVhdGVFbGVtZW50QmxvY2s6dHMsZ3VhcmRSZWFjdGl2ZVByb3BzOnBzLHRvRGlzcGxheVN0cmluZzptLGNhbWVsaXplOnosY2FwaXRhbGl6ZTpxLHRvSGFuZGxlcktleTpKLG5vcm1hbGl6ZVByb3BzOmEsbm9ybWFsaXplQ2xhc3M6Yyxub3JtYWxpemVTdHlsZTpyLHRyYW5zZm9ybVZOb2RlQXJnczpzcyx2ZXJzaW9uOm9pLHNzclV0aWxzOm51bGwscmVzb2x2ZUZpbHRlcjpudWxsLGNvbXBhdFV0aWxzOm51bGx9KTtmdW5jdGlvbiBGbChlKXt0aHJvdyBlfWZ1bmN0aW9uIFBsKGUpe31mdW5jdGlvbiBBbChlLHQsbixvKXtjb25zdCByPW5ldyBTeW50YXhFcnJvcihTdHJpbmcoZSkpO3JldHVybiByLmNvZGU9ZSxyLmxvYz10LHJ9Y29uc3QgTWw9U3ltYm9sKFwiXCIpLFZsPVN5bWJvbChcIlwiKSxJbD1TeW1ib2woXCJcIiksQmw9U3ltYm9sKFwiXCIpLExsPVN5bWJvbChcIlwiKSxqbD1TeW1ib2woXCJcIiksVWw9U3ltYm9sKFwiXCIpLERsPVN5bWJvbChcIlwiKSxIbD1TeW1ib2woXCJcIiksV2w9U3ltYm9sKFwiXCIpLHpsPVN5bWJvbChcIlwiKSxLbD1TeW1ib2woXCJcIiksR2w9U3ltYm9sKFwiXCIpLHFsPVN5bWJvbChcIlwiKSxKbD1TeW1ib2woXCJcIiksWWw9U3ltYm9sKFwiXCIpLFpsPVN5bWJvbChcIlwiKSxRbD1TeW1ib2woXCJcIiksWGw9U3ltYm9sKFwiXCIpLGVjPVN5bWJvbChcIlwiKSx0Yz1TeW1ib2woXCJcIiksbmM9U3ltYm9sKFwiXCIpLG9jPVN5bWJvbChcIlwiKSxyYz1TeW1ib2woXCJcIiksc2M9U3ltYm9sKFwiXCIpLGljPVN5bWJvbChcIlwiKSxsYz1TeW1ib2woXCJcIiksY2M9U3ltYm9sKFwiXCIpLGFjPVN5bWJvbChcIlwiKSx1Yz1TeW1ib2woXCJcIikscGM9U3ltYm9sKFwiXCIpLGZjPVN5bWJvbChcIlwiKSxkYz1TeW1ib2woXCJcIiksaGM9U3ltYm9sKFwiXCIpLG1jPVN5bWJvbChcIlwiKSxnYz1TeW1ib2woXCJcIiksdmM9U3ltYm9sKFwiXCIpLHljPVN5bWJvbChcIlwiKSxfYz1TeW1ib2woXCJcIiksYmM9e1tNbF06XCJGcmFnbWVudFwiLFtWbF06XCJUZWxlcG9ydFwiLFtJbF06XCJTdXNwZW5zZVwiLFtCbF06XCJLZWVwQWxpdmVcIixbTGxdOlwiQmFzZVRyYW5zaXRpb25cIixbamxdOlwib3BlbkJsb2NrXCIsW1VsXTpcImNyZWF0ZUJsb2NrXCIsW0RsXTpcImNyZWF0ZUVsZW1lbnRCbG9ja1wiLFtIbF06XCJjcmVhdGVWTm9kZVwiLFtXbF06XCJjcmVhdGVFbGVtZW50Vk5vZGVcIixbemxdOlwiY3JlYXRlQ29tbWVudFZOb2RlXCIsW0tsXTpcImNyZWF0ZVRleHRWTm9kZVwiLFtHbF06XCJjcmVhdGVTdGF0aWNWTm9kZVwiLFtxbF06XCJyZXNvbHZlQ29tcG9uZW50XCIsW0psXTpcInJlc29sdmVEeW5hbWljQ29tcG9uZW50XCIsW1lsXTpcInJlc29sdmVEaXJlY3RpdmVcIixbWmxdOlwicmVzb2x2ZUZpbHRlclwiLFtRbF06XCJ3aXRoRGlyZWN0aXZlc1wiLFtYbF06XCJyZW5kZXJMaXN0XCIsW2VjXTpcInJlbmRlclNsb3RcIixbdGNdOlwiY3JlYXRlU2xvdHNcIixbbmNdOlwidG9EaXNwbGF5U3RyaW5nXCIsW29jXTpcIm1lcmdlUHJvcHNcIixbcmNdOlwibm9ybWFsaXplQ2xhc3NcIixbc2NdOlwibm9ybWFsaXplU3R5bGVcIixbaWNdOlwibm9ybWFsaXplUHJvcHNcIixbbGNdOlwiZ3VhcmRSZWFjdGl2ZVByb3BzXCIsW2NjXTpcInRvSGFuZGxlcnNcIixbYWNdOlwiY2FtZWxpemVcIixbdWNdOlwiY2FwaXRhbGl6ZVwiLFtwY106XCJ0b0hhbmRsZXJLZXlcIixbZmNdOlwic2V0QmxvY2tUcmFja2luZ1wiLFtkY106XCJwdXNoU2NvcGVJZFwiLFtoY106XCJwb3BTY29wZUlkXCIsW21jXTpcIndpdGhDdHhcIixbZ2NdOlwidW5yZWZcIixbdmNdOlwiaXNSZWZcIixbeWNdOlwid2l0aE1lbW9cIixbX2NdOlwiaXNNZW1vU2FtZVwifTtjb25zdCBTYz17c291cmNlOlwiXCIsc3RhcnQ6e2xpbmU6MSxjb2x1bW46MSxvZmZzZXQ6MH0sZW5kOntsaW5lOjEsY29sdW1uOjEsb2Zmc2V0OjB9fTtmdW5jdGlvbiB4YyhlLHQsbixvLHIscyxpLGw9ITEsYz0hMSxhPSExLHU9U2Mpe3JldHVybiBlJiYobD8oZS5oZWxwZXIoamwpLGUuaGVscGVyKFpjKGUuaW5TU1IsYSkpKTplLmhlbHBlcihZYyhlLmluU1NSLGEpKSxpJiZlLmhlbHBlcihRbCkpLHt0eXBlOjEzLHRhZzp0LHByb3BzOm4sY2hpbGRyZW46byxwYXRjaEZsYWc6cixkeW5hbWljUHJvcHM6cyxkaXJlY3RpdmVzOmksaXNCbG9jazpsLGRpc2FibGVUcmFja2luZzpjLGlzQ29tcG9uZW50OmEsbG9jOnV9fWZ1bmN0aW9uIENjKGUsdD1TYyl7cmV0dXJue3R5cGU6MTcsbG9jOnQsZWxlbWVudHM6ZX19ZnVuY3Rpb24gd2MoZSx0PVNjKXtyZXR1cm57dHlwZToxNSxsb2M6dCxwcm9wZXJ0aWVzOmV9fWZ1bmN0aW9uIGtjKGUsdCl7cmV0dXJue3R5cGU6MTYsbG9jOlNjLGtleTpQKGUpP1RjKGUsITApOmUsdmFsdWU6dH19ZnVuY3Rpb24gVGMoZSx0PSExLG49U2Msbz0wKXtyZXR1cm57dHlwZTo0LGxvYzpuLGNvbnRlbnQ6ZSxpc1N0YXRpYzp0LGNvbnN0VHlwZTp0PzM6b319ZnVuY3Rpb24gTmMoZSx0PVNjKXtyZXR1cm57dHlwZTo4LGxvYzp0LGNoaWxkcmVuOmV9fWZ1bmN0aW9uIEVjKGUsdD1bXSxuPVNjKXtyZXR1cm57dHlwZToxNCxsb2M6bixjYWxsZWU6ZSxhcmd1bWVudHM6dH19ZnVuY3Rpb24gJGMoZSx0LG49ITEsbz0hMSxyPVNjKXtyZXR1cm57dHlwZToxOCxwYXJhbXM6ZSxyZXR1cm5zOnQsbmV3bGluZTpuLGlzU2xvdDpvLGxvYzpyfX1mdW5jdGlvbiBPYyhlLHQsbixvPSEwKXtyZXR1cm57dHlwZToxOSx0ZXN0OmUsY29uc2VxdWVudDp0LGFsdGVybmF0ZTpuLG5ld2xpbmU6byxsb2M6U2N9fWNvbnN0IFJjPWU9PjQ9PT1lLnR5cGUmJmUuaXNTdGF0aWMsRmM9KGUsdCk9PmU9PT10fHxlPT09Ryh0KTtmdW5jdGlvbiBQYyhlKXtyZXR1cm4gRmMoZSxcIlRlbGVwb3J0XCIpP1ZsOkZjKGUsXCJTdXNwZW5zZVwiKT9JbDpGYyhlLFwiS2VlcEFsaXZlXCIpP0JsOkZjKGUsXCJCYXNlVHJhbnNpdGlvblwiKT9MbDp2b2lkIDB9Y29uc3QgQWM9L15cXGR8W15cXCRcXHddLyxNYz1lPT4hQWMudGVzdChlKSxWYz0vW0EtWmEtel8kXFx4QTAtXFx1RkZGRl0vLEljPS9bXFwuXFw/XFx3JFxceEEwLVxcdUZGRkZdLyxCYz0vXFxzK1suW11cXHMqfFxccypbLltdXFxzKy9nLExjPWU9PntlPWUudHJpbSgpLnJlcGxhY2UoQmMsKGU9PmUudHJpbSgpKSk7bGV0IHQ9MCxuPVtdLG89MCxyPTAscz1udWxsO2ZvcihsZXQgaT0wO2k8ZS5sZW5ndGg7aSsrKXtjb25zdCBsPWUuY2hhckF0KGkpO3N3aXRjaCh0KXtjYXNlIDA6aWYoXCJbXCI9PT1sKW4ucHVzaCh0KSx0PTEsbysrO2Vsc2UgaWYoXCIoXCI9PT1sKW4ucHVzaCh0KSx0PTIscisrO2Vsc2UgaWYoISgwPT09aT9WYzpJYykudGVzdChsKSlyZXR1cm4hMTticmVhaztjYXNlIDE6XCInXCI9PT1sfHwnXCInPT09bHx8XCJgXCI9PT1sPyhuLnB1c2godCksdD0zLHM9bCk6XCJbXCI9PT1sP28rKzpcIl1cIj09PWwmJigtLW98fCh0PW4ucG9wKCkpKTticmVhaztjYXNlIDI6aWYoXCInXCI9PT1sfHwnXCInPT09bHx8XCJgXCI9PT1sKW4ucHVzaCh0KSx0PTMscz1sO2Vsc2UgaWYoXCIoXCI9PT1sKXIrKztlbHNlIGlmKFwiKVwiPT09bCl7aWYoaT09PWUubGVuZ3RoLTEpcmV0dXJuITE7LS1yfHwodD1uLnBvcCgpKX1icmVhaztjYXNlIDM6bD09PXMmJih0PW4ucG9wKCkscz1udWxsKX19cmV0dXJuIW8mJiFyfTtmdW5jdGlvbiBqYyhlLHQsbil7Y29uc3Qgbz17c291cmNlOmUuc291cmNlLnNsaWNlKHQsdCtuKSxzdGFydDpVYyhlLnN0YXJ0LGUuc291cmNlLHQpLGVuZDplLmVuZH07cmV0dXJuIG51bGwhPW4mJihvLmVuZD1VYyhlLnN0YXJ0LGUuc291cmNlLHQrbikpLG99ZnVuY3Rpb24gVWMoZSx0LG49dC5sZW5ndGgpe3JldHVybiBEYyh3KHt9LGUpLHQsbil9ZnVuY3Rpb24gRGMoZSx0LG49dC5sZW5ndGgpe2xldCBvPTAscj0tMTtmb3IobGV0IHM9MDtzPG47cysrKTEwPT09dC5jaGFyQ29kZUF0KHMpJiYobysrLHI9cyk7cmV0dXJuIGUub2Zmc2V0Kz1uLGUubGluZSs9byxlLmNvbHVtbj0tMT09PXI/ZS5jb2x1bW4rbjpuLXIsZX1mdW5jdGlvbiBIYyhlLHQsbj0hMSl7Zm9yKGxldCBvPTA7bzxlLnByb3BzLmxlbmd0aDtvKyspe2NvbnN0IHI9ZS5wcm9wc1tvXTtpZig3PT09ci50eXBlJiYobnx8ci5leHApJiYoUCh0KT9yLm5hbWU9PT10OnQudGVzdChyLm5hbWUpKSlyZXR1cm4gcn19ZnVuY3Rpb24gV2MoZSx0LG49ITEsbz0hMSl7Zm9yKGxldCByPTA7cjxlLnByb3BzLmxlbmd0aDtyKyspe2NvbnN0IHM9ZS5wcm9wc1tyXTtpZig2PT09cy50eXBlKXtpZihuKWNvbnRpbnVlO2lmKHMubmFtZT09PXQmJihzLnZhbHVlfHxvKSlyZXR1cm4gc31lbHNlIGlmKFwiYmluZFwiPT09cy5uYW1lJiYocy5leHB8fG8pJiZ6YyhzLmFyZyx0KSlyZXR1cm4gc319ZnVuY3Rpb24gemMoZSx0KXtyZXR1cm4hKCFlfHwhUmMoZSl8fGUuY29udGVudCE9PXQpfWZ1bmN0aW9uIEtjKGUpe3JldHVybiA1PT09ZS50eXBlfHwyPT09ZS50eXBlfWZ1bmN0aW9uIEdjKGUpe3JldHVybiA3PT09ZS50eXBlJiZcInNsb3RcIj09PWUubmFtZX1mdW5jdGlvbiBxYyhlKXtyZXR1cm4gMT09PWUudHlwZSYmMz09PWUudGFnVHlwZX1mdW5jdGlvbiBKYyhlKXtyZXR1cm4gMT09PWUudHlwZSYmMj09PWUudGFnVHlwZX1mdW5jdGlvbiBZYyhlLHQpe3JldHVybiBlfHx0P0hsOldsfWZ1bmN0aW9uIFpjKGUsdCl7cmV0dXJuIGV8fHQ/VWw6RGx9Y29uc3QgUWM9bmV3IFNldChbaWMsbGNdKTtmdW5jdGlvbiBYYyhlLHQ9W10pe2lmKGUmJiFQKGUpJiYxND09PWUudHlwZSl7Y29uc3Qgbj1lLmNhbGxlZTtpZighUChuKSYmUWMuaGFzKG4pKXJldHVybiBYYyhlLmFyZ3VtZW50c1swXSx0LmNvbmNhdChlKSl9cmV0dXJuW2UsdF19ZnVuY3Rpb24gZWEoZSx0LG4pe2xldCBvLHIscz0xMz09PWUudHlwZT9lLnByb3BzOmUuYXJndW1lbnRzWzJdLGk9W107aWYocyYmIVAocykmJjE0PT09cy50eXBlKXtjb25zdCBlPVhjKHMpO3M9ZVswXSxpPWVbMV0scj1pW2kubGVuZ3RoLTFdfWlmKG51bGw9PXN8fFAocykpbz13YyhbdF0pO2Vsc2UgaWYoMTQ9PT1zLnR5cGUpe2NvbnN0IGU9cy5hcmd1bWVudHNbMF07UChlKXx8MTUhPT1lLnR5cGU/cy5jYWxsZWU9PT1jYz9vPUVjKG4uaGVscGVyKG9jKSxbd2MoW3RdKSxzXSk6cy5hcmd1bWVudHMudW5zaGlmdCh3YyhbdF0pKTplLnByb3BlcnRpZXMudW5zaGlmdCh0KSwhbyYmKG89cyl9ZWxzZSBpZigxNT09PXMudHlwZSl7bGV0IGU9ITE7aWYoND09PXQua2V5LnR5cGUpe2NvbnN0IG49dC5rZXkuY29udGVudDtlPXMucHJvcGVydGllcy5zb21lKChlPT40PT09ZS5rZXkudHlwZSYmZS5rZXkuY29udGVudD09PW4pKX1lfHxzLnByb3BlcnRpZXMudW5zaGlmdCh0KSxvPXN9ZWxzZSBvPUVjKG4uaGVscGVyKG9jKSxbd2MoW3RdKSxzXSksciYmci5jYWxsZWU9PT1sYyYmKHI9aVtpLmxlbmd0aC0yXSk7MTM9PT1lLnR5cGU/cj9yLmFyZ3VtZW50c1swXT1vOmUucHJvcHM9bzpyP3IuYXJndW1lbnRzWzBdPW86ZS5hcmd1bWVudHNbMl09b31mdW5jdGlvbiB0YShlLHQpe3JldHVybmBfJHt0fV8ke2UucmVwbGFjZSgvW15cXHddL2csKCh0LG4pPT5cIi1cIj09PXQ/XCJfXCI6ZS5jaGFyQ29kZUF0KG4pLnRvU3RyaW5nKCkpKX1gfWZ1bmN0aW9uIG5hKGUse2hlbHBlcjp0LHJlbW92ZUhlbHBlcjpuLGluU1NSOm99KXtlLmlzQmxvY2t8fChlLmlzQmxvY2s9ITAsbihZYyhvLGUuaXNDb21wb25lbnQpKSx0KGpsKSx0KFpjKG8sZS5pc0NvbXBvbmVudCkpKX1jb25zdCBvYT0vJihndHxsdHxhbXB8YXBvc3xxdW90KTsvZyxyYT17Z3Q6XCI+XCIsbHQ6XCI8XCIsYW1wOlwiJlwiLGFwb3M6XCInXCIscXVvdDonXCInfSxzYT17ZGVsaW1pdGVyczpbXCJ7e1wiLFwifX1cIl0sZ2V0TmFtZXNwYWNlOigpPT4wLGdldFRleHRNb2RlOigpPT4wLGlzVm9pZFRhZzpiLGlzUHJlVGFnOmIsaXNDdXN0b21FbGVtZW50OmIsZGVjb2RlRW50aXRpZXM6ZT0+ZS5yZXBsYWNlKG9hLCgoZSx0KT0+cmFbdF0pKSxvbkVycm9yOkZsLG9uV2FybjpQbCxjb21tZW50czohMX07ZnVuY3Rpb24gaWEoZSx0PXt9KXtjb25zdCBuPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj13KHt9LHNhKTtsZXQgbztmb3IobyBpbiB0KW5bb109dm9pZCAwPT09dFtvXT9zYVtvXTp0W29dO3JldHVybntvcHRpb25zOm4sY29sdW1uOjEsbGluZToxLG9mZnNldDowLG9yaWdpbmFsU291cmNlOmUsc291cmNlOmUsaW5QcmU6ITEsaW5WUHJlOiExLG9uV2FybjpuLm9uV2Fybn19KGUsdCksbz1iYShuKTtyZXR1cm4gZnVuY3Rpb24oZSx0PVNjKXtyZXR1cm57dHlwZTowLGNoaWxkcmVuOmUsaGVscGVyczpbXSxjb21wb25lbnRzOltdLGRpcmVjdGl2ZXM6W10saG9pc3RzOltdLGltcG9ydHM6W10sY2FjaGVkOjAsdGVtcHM6MCxjb2RlZ2VuTm9kZTp2b2lkIDAsbG9jOnR9fShsYShuLDAsW10pLFNhKG4sbykpfWZ1bmN0aW9uIGxhKGUsdCxuKXtjb25zdCBvPXhhKG4pLHI9bz9vLm5zOjAscz1bXTtmb3IoOyFOYShlLHQsbik7KXtjb25zdCBpPWUuc291cmNlO2xldCBsO2lmKDA9PT10fHwxPT09dClpZighZS5pblZQcmUmJkNhKGksZS5vcHRpb25zLmRlbGltaXRlcnNbMF0pKWw9dmEoZSx0KTtlbHNlIGlmKDA9PT10JiZcIjxcIj09PWlbMF0paWYoMT09PWkubGVuZ3RoKTtlbHNlIGlmKFwiIVwiPT09aVsxXSlsPUNhKGksXCJcXHgzYyEtLVwiKT91YShlKTpDYShpLFwiPCFET0NUWVBFXCIpP3BhKGUpOkNhKGksXCI8IVtDREFUQVtcIikmJjAhPT1yP2FhKGUsbik6cGEoZSk7ZWxzZSBpZihcIi9cIj09PWlbMV0paWYoMj09PWkubGVuZ3RoKTtlbHNle2lmKFwiPlwiPT09aVsyXSl7d2EoZSwzKTtjb250aW51ZX1pZigvW2Etel0vaS50ZXN0KGlbMl0pKXtoYShlLDEsbyk7Y29udGludWV9bD1wYShlKX1lbHNlL1thLXpdL2kudGVzdChpWzFdKT9sPWZhKGUsbik6XCI/XCI9PT1pWzFdJiYobD1wYShlKSk7aWYobHx8KGw9eWEoZSx0KSksRShsKSlmb3IobGV0IGU9MDtlPGwubGVuZ3RoO2UrKyljYShzLGxbZV0pO2Vsc2UgY2EocyxsKX1sZXQgaT0hMTtpZigyIT09dCYmMSE9PXQpe2NvbnN0IHQ9XCJwcmVzZXJ2ZVwiIT09ZS5vcHRpb25zLndoaXRlc3BhY2U7Zm9yKGxldCBuPTA7bjxzLmxlbmd0aDtuKyspe2NvbnN0IG89c1tuXTtpZihlLmluUHJlfHwyIT09by50eXBlKTMhPT1vLnR5cGV8fGUub3B0aW9ucy5jb21tZW50c3x8KGk9ITAsc1tuXT1udWxsKTtlbHNlIGlmKC9bXlxcdFxcclxcblxcZiBdLy50ZXN0KG8uY29udGVudCkpdCYmKG8uY29udGVudD1vLmNvbnRlbnQucmVwbGFjZSgvW1xcdFxcclxcblxcZiBdKy9nLFwiIFwiKSk7ZWxzZXtjb25zdCBlPXNbbi0xXSxyPXNbbisxXTshZXx8IXJ8fHQmJigzPT09ZS50eXBlfHwzPT09ci50eXBlfHwxPT09ZS50eXBlJiYxPT09ci50eXBlJiYvW1xcclxcbl0vLnRlc3Qoby5jb250ZW50KSk/KGk9ITAsc1tuXT1udWxsKTpvLmNvbnRlbnQ9XCIgXCJ9fWlmKGUuaW5QcmUmJm8mJmUub3B0aW9ucy5pc1ByZVRhZyhvLnRhZykpe2NvbnN0IGU9c1swXTtlJiYyPT09ZS50eXBlJiYoZS5jb250ZW50PWUuY29udGVudC5yZXBsYWNlKC9eXFxyP1xcbi8sXCJcIikpfX1yZXR1cm4gaT9zLmZpbHRlcihCb29sZWFuKTpzfWZ1bmN0aW9uIGNhKGUsdCl7aWYoMj09PXQudHlwZSl7Y29uc3Qgbj14YShlKTtpZihuJiYyPT09bi50eXBlJiZuLmxvYy5lbmQub2Zmc2V0PT09dC5sb2Muc3RhcnQub2Zmc2V0KXJldHVybiBuLmNvbnRlbnQrPXQuY29udGVudCxuLmxvYy5lbmQ9dC5sb2MuZW5kLHZvaWQobi5sb2Muc291cmNlKz10LmxvYy5zb3VyY2UpfWUucHVzaCh0KX1mdW5jdGlvbiBhYShlLHQpe3dhKGUsOSk7Y29uc3Qgbj1sYShlLDMsdCk7cmV0dXJuIDA9PT1lLnNvdXJjZS5sZW5ndGh8fHdhKGUsMyksbn1mdW5jdGlvbiB1YShlKXtjb25zdCB0PWJhKGUpO2xldCBuO2NvbnN0IG89Ly0tKFxcISk/Pi8uZXhlYyhlLnNvdXJjZSk7aWYobyl7bj1lLnNvdXJjZS5zbGljZSg0LG8uaW5kZXgpO2NvbnN0IHQ9ZS5zb3VyY2Uuc2xpY2UoMCxvLmluZGV4KTtsZXQgcj0xLHM9MDtmb3IoOy0xIT09KHM9dC5pbmRleE9mKFwiXFx4M2MhLS1cIixyKSk7KXdhKGUscy1yKzEpLHI9cysxO3dhKGUsby5pbmRleCtvWzBdLmxlbmd0aC1yKzEpfWVsc2Ugbj1lLnNvdXJjZS5zbGljZSg0KSx3YShlLGUuc291cmNlLmxlbmd0aCk7cmV0dXJue3R5cGU6Myxjb250ZW50Om4sbG9jOlNhKGUsdCl9fWZ1bmN0aW9uIHBhKGUpe2NvbnN0IHQ9YmEoZSksbj1cIj9cIj09PWUuc291cmNlWzFdPzE6MjtsZXQgbztjb25zdCByPWUuc291cmNlLmluZGV4T2YoXCI+XCIpO3JldHVybi0xPT09cj8obz1lLnNvdXJjZS5zbGljZShuKSx3YShlLGUuc291cmNlLmxlbmd0aCkpOihvPWUuc291cmNlLnNsaWNlKG4sciksd2EoZSxyKzEpKSx7dHlwZTozLGNvbnRlbnQ6byxsb2M6U2EoZSx0KX19ZnVuY3Rpb24gZmEoZSx0KXtjb25zdCBuPWUuaW5QcmUsbz1lLmluVlByZSxyPXhhKHQpLHM9aGEoZSwwLHIpLGk9ZS5pblByZSYmIW4sbD1lLmluVlByZSYmIW87aWYocy5pc1NlbGZDbG9zaW5nfHxlLm9wdGlvbnMuaXNWb2lkVGFnKHMudGFnKSlyZXR1cm4gaSYmKGUuaW5QcmU9ITEpLGwmJihlLmluVlByZT0hMSksczt0LnB1c2gocyk7Y29uc3QgYz1lLm9wdGlvbnMuZ2V0VGV4dE1vZGUocyxyKSxhPWxhKGUsYyx0KTtpZih0LnBvcCgpLHMuY2hpbGRyZW49YSxFYShlLnNvdXJjZSxzLnRhZykpaGEoZSwxLHIpO2Vsc2UgaWYoMD09PWUuc291cmNlLmxlbmd0aCYmXCJzY3JpcHRcIj09PXMudGFnLnRvTG93ZXJDYXNlKCkpe2NvbnN0IGU9YVswXTtlJiZDYShlLmxvYy5zb3VyY2UsXCJcXHgzYyEtLVwiKX1yZXR1cm4gcy5sb2M9U2EoZSxzLmxvYy5zdGFydCksaSYmKGUuaW5QcmU9ITEpLGwmJihlLmluVlByZT0hMSksc31jb25zdCBkYT1lKFwiaWYsZWxzZSxlbHNlLWlmLGZvcixzbG90XCIpO2Z1bmN0aW9uIGhhKGUsdCxuKXtjb25zdCBvPWJhKGUpLHI9L148XFwvPyhbYS16XVteXFx0XFxyXFxuXFxmIC8+XSopL2kuZXhlYyhlLnNvdXJjZSkscz1yWzFdLGk9ZS5vcHRpb25zLmdldE5hbWVzcGFjZShzLG4pO3dhKGUsclswXS5sZW5ndGgpLGthKGUpO2NvbnN0IGw9YmEoZSksYz1lLnNvdXJjZTtlLm9wdGlvbnMuaXNQcmVUYWcocykmJihlLmluUHJlPSEwKTtsZXQgYT1tYShlLHQpOzA9PT10JiYhZS5pblZQcmUmJmEuc29tZSgoZT0+Nz09PWUudHlwZSYmXCJwcmVcIj09PWUubmFtZSkpJiYoZS5pblZQcmU9ITAsdyhlLGwpLGUuc291cmNlPWMsYT1tYShlLHQpLmZpbHRlcigoZT0+XCJ2LXByZVwiIT09ZS5uYW1lKSkpO2xldCB1PSExO2lmKDA9PT1lLnNvdXJjZS5sZW5ndGh8fCh1PUNhKGUuc291cmNlLFwiLz5cIiksd2EoZSx1PzI6MSkpLDE9PT10KXJldHVybjtsZXQgcD0wO3JldHVybiBlLmluVlByZXx8KFwic2xvdFwiPT09cz9wPTI6XCJ0ZW1wbGF0ZVwiPT09cz9hLnNvbWUoKGU9Pjc9PT1lLnR5cGUmJmRhKGUubmFtZSkpKSYmKHA9Myk6ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89bi5vcHRpb25zO2lmKG8uaXNDdXN0b21FbGVtZW50KGUpKXJldHVybiExO2lmKFwiY29tcG9uZW50XCI9PT1lfHwvXltBLVpdLy50ZXN0KGUpfHxQYyhlKXx8by5pc0J1aWx0SW5Db21wb25lbnQmJm8uaXNCdWlsdEluQ29tcG9uZW50KGUpfHxvLmlzTmF0aXZlVGFnJiYhby5pc05hdGl2ZVRhZyhlKSlyZXR1cm4hMDtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyl7Y29uc3QgZT10W3JdO2lmKDY9PT1lLnR5cGUpe2lmKFwiaXNcIj09PWUubmFtZSYmZS52YWx1ZSYmZS52YWx1ZS5jb250ZW50LnN0YXJ0c1dpdGgoXCJ2dWU6XCIpKXJldHVybiEwfWVsc2V7aWYoXCJpc1wiPT09ZS5uYW1lKXJldHVybiEwO1wiYmluZFwiPT09ZS5uYW1lJiZ6YyhlLmFyZyxcImlzXCIpfX19KHMsYSxlKSYmKHA9MSkpLHt0eXBlOjEsbnM6aSx0YWc6cyx0YWdUeXBlOnAscHJvcHM6YSxpc1NlbGZDbG9zaW5nOnUsY2hpbGRyZW46W10sbG9jOlNhKGUsbyksY29kZWdlbk5vZGU6dm9pZCAwfX1mdW5jdGlvbiBtYShlLHQpe2NvbnN0IG49W10sbz1uZXcgU2V0O2Zvcig7ZS5zb3VyY2UubGVuZ3RoPjAmJiFDYShlLnNvdXJjZSxcIj5cIikmJiFDYShlLnNvdXJjZSxcIi8+XCIpOyl7aWYoQ2EoZS5zb3VyY2UsXCIvXCIpKXt3YShlLDEpLGthKGUpO2NvbnRpbnVlfWNvbnN0IHI9Z2EoZSxvKTs2PT09ci50eXBlJiZyLnZhbHVlJiZcImNsYXNzXCI9PT1yLm5hbWUmJihyLnZhbHVlLmNvbnRlbnQ9ci52YWx1ZS5jb250ZW50LnJlcGxhY2UoL1xccysvZyxcIiBcIikudHJpbSgpKSwwPT09dCYmbi5wdXNoKHIpLC9eW15cXHRcXHJcXG5cXGYgLz5dLy50ZXN0KGUuc291cmNlKSxrYShlKX1yZXR1cm4gbn1mdW5jdGlvbiBnYShlLHQpe2NvbnN0IG49YmEoZSksbz0vXlteXFx0XFxyXFxuXFxmIC8+XVteXFx0XFxyXFxuXFxmIC8+PV0qLy5leGVjKGUuc291cmNlKVswXTt0LmhhcyhvKSx0LmFkZChvKTt7Y29uc3QgZT0vW1wiJzxdL2c7bGV0IHQ7Zm9yKDt0PWUuZXhlYyhvKTspO31sZXQgcjt3YShlLG8ubGVuZ3RoKSwvXltcXHRcXHJcXG5cXGYgXSo9Ly50ZXN0KGUuc291cmNlKSYmKGthKGUpLHdhKGUsMSksa2EoZSkscj1mdW5jdGlvbihlKXtjb25zdCB0PWJhKGUpO2xldCBuO2NvbnN0IG89ZS5zb3VyY2VbMF0scj0nXCInPT09b3x8XCInXCI9PT1vO2lmKHIpe3dhKGUsMSk7Y29uc3QgdD1lLnNvdXJjZS5pbmRleE9mKG8pOy0xPT09dD9uPV9hKGUsZS5zb3VyY2UubGVuZ3RoLDQpOihuPV9hKGUsdCw0KSx3YShlLDEpKX1lbHNle2NvbnN0IHQ9L15bXlxcdFxcclxcblxcZiA+XSsvLmV4ZWMoZS5zb3VyY2UpO2lmKCF0KXJldHVybjtjb25zdCBvPS9bXCInPD1gXS9nO2xldCByO2Zvcig7cj1vLmV4ZWModFswXSk7KTtuPV9hKGUsdFswXS5sZW5ndGgsNCl9cmV0dXJue2NvbnRlbnQ6bixpc1F1b3RlZDpyLGxvYzpTYShlLHQpfX0oZSkpO2NvbnN0IHM9U2EoZSxuKTtpZighZS5pblZQcmUmJi9eKHYtW0EtWmEtejAtOS1dfDp8XFwufEB8IykvLnRlc3Qobykpe2NvbnN0IHQ9Lyg/Ol52LShbYS16MC05LV0rKSk/KD86KD86OnxeXFwufF5AfF4jKShcXFtbXlxcXV0rXFxdfFteXFwuXSspKT8oLispPyQvaS5leGVjKG8pO2xldCBpLGw9Q2EobyxcIi5cIiksYz10WzFdfHwobHx8Q2EobyxcIjpcIik/XCJiaW5kXCI6Q2EobyxcIkBcIik/XCJvblwiOlwic2xvdFwiKTtpZih0WzJdKXtjb25zdCByPVwic2xvdFwiPT09YyxzPW8ubGFzdEluZGV4T2YodFsyXSksbD1TYShlLFRhKGUsbixzKSxUYShlLG4scyt0WzJdLmxlbmd0aCsociYmdFszXXx8XCJcIikubGVuZ3RoKSk7bGV0IGE9dFsyXSx1PSEwO2Euc3RhcnRzV2l0aChcIltcIik/KHU9ITEsYT1hLmVuZHNXaXRoKFwiXVwiKT9hLnNsaWNlKDEsYS5sZW5ndGgtMSk6YS5zbGljZSgxKSk6ciYmKGErPXRbM118fFwiXCIpLGk9e3R5cGU6NCxjb250ZW50OmEsaXNTdGF0aWM6dSxjb25zdFR5cGU6dT8zOjAsbG9jOmx9fWlmKHImJnIuaXNRdW90ZWQpe2NvbnN0IGU9ci5sb2M7ZS5zdGFydC5vZmZzZXQrKyxlLnN0YXJ0LmNvbHVtbisrLGUuZW5kPVVjKGUuc3RhcnQsci5jb250ZW50KSxlLnNvdXJjZT1lLnNvdXJjZS5zbGljZSgxLC0xKX1jb25zdCBhPXRbM10/dFszXS5zbGljZSgxKS5zcGxpdChcIi5cIik6W107cmV0dXJuIGwmJmEucHVzaChcInByb3BcIikse3R5cGU6NyxuYW1lOmMsZXhwOnImJnt0eXBlOjQsY29udGVudDpyLmNvbnRlbnQsaXNTdGF0aWM6ITEsY29uc3RUeXBlOjAsbG9jOnIubG9jfSxhcmc6aSxtb2RpZmllcnM6YSxsb2M6c319cmV0dXJuIWUuaW5WUHJlJiZDYShvLFwidi1cIikse3R5cGU6NixuYW1lOm8sdmFsdWU6ciYme3R5cGU6Mixjb250ZW50OnIuY29udGVudCxsb2M6ci5sb2N9LGxvYzpzfX1mdW5jdGlvbiB2YShlLHQpe2NvbnN0W24sb109ZS5vcHRpb25zLmRlbGltaXRlcnMscj1lLnNvdXJjZS5pbmRleE9mKG8sbi5sZW5ndGgpO2lmKC0xPT09cilyZXR1cm47Y29uc3Qgcz1iYShlKTt3YShlLG4ubGVuZ3RoKTtjb25zdCBpPWJhKGUpLGw9YmEoZSksYz1yLW4ubGVuZ3RoLGE9ZS5zb3VyY2Uuc2xpY2UoMCxjKSx1PV9hKGUsYyx0KSxwPXUudHJpbSgpLGY9dS5pbmRleE9mKHApO2Y+MCYmRGMoaSxhLGYpO3JldHVybiBEYyhsLGEsYy0odS5sZW5ndGgtcC5sZW5ndGgtZikpLHdhKGUsby5sZW5ndGgpLHt0eXBlOjUsY29udGVudDp7dHlwZTo0LGlzU3RhdGljOiExLGNvbnN0VHlwZTowLGNvbnRlbnQ6cCxsb2M6U2EoZSxpLGwpfSxsb2M6U2EoZSxzKX19ZnVuY3Rpb24geWEoZSx0KXtjb25zdCBuPTM9PT10P1tcIl1dPlwiXTpbXCI8XCIsZS5vcHRpb25zLmRlbGltaXRlcnNbMF1dO2xldCBvPWUuc291cmNlLmxlbmd0aDtmb3IobGV0IHM9MDtzPG4ubGVuZ3RoO3MrKyl7Y29uc3QgdD1lLnNvdXJjZS5pbmRleE9mKG5bc10sMSk7LTEhPT10JiZvPnQmJihvPXQpfWNvbnN0IHI9YmEoZSk7cmV0dXJue3R5cGU6Mixjb250ZW50Ol9hKGUsbyx0KSxsb2M6U2EoZSxyKX19ZnVuY3Rpb24gX2EoZSx0LG4pe2NvbnN0IG89ZS5zb3VyY2Uuc2xpY2UoMCx0KTtyZXR1cm4gd2EoZSx0KSwyIT09biYmMyE9PW4mJm8uaW5jbHVkZXMoXCImXCIpP2Uub3B0aW9ucy5kZWNvZGVFbnRpdGllcyhvLDQ9PT1uKTpvfWZ1bmN0aW9uIGJhKGUpe2NvbnN0e2NvbHVtbjp0LGxpbmU6bixvZmZzZXQ6b309ZTtyZXR1cm57Y29sdW1uOnQsbGluZTpuLG9mZnNldDpvfX1mdW5jdGlvbiBTYShlLHQsbil7cmV0dXJue3N0YXJ0OnQsZW5kOm49bnx8YmEoZSksc291cmNlOmUub3JpZ2luYWxTb3VyY2Uuc2xpY2UodC5vZmZzZXQsbi5vZmZzZXQpfX1mdW5jdGlvbiB4YShlKXtyZXR1cm4gZVtlLmxlbmd0aC0xXX1mdW5jdGlvbiBDYShlLHQpe3JldHVybiBlLnN0YXJ0c1dpdGgodCl9ZnVuY3Rpb24gd2EoZSx0KXtjb25zdHtzb3VyY2U6bn09ZTtEYyhlLG4sdCksZS5zb3VyY2U9bi5zbGljZSh0KX1mdW5jdGlvbiBrYShlKXtjb25zdCB0PS9eW1xcdFxcclxcblxcZiBdKy8uZXhlYyhlLnNvdXJjZSk7dCYmd2EoZSx0WzBdLmxlbmd0aCl9ZnVuY3Rpb24gVGEoZSx0LG4pe3JldHVybiBVYyh0LGUub3JpZ2luYWxTb3VyY2Uuc2xpY2UodC5vZmZzZXQsbiksbil9ZnVuY3Rpb24gTmEoZSx0LG4pe2NvbnN0IG89ZS5zb3VyY2U7c3dpdGNoKHQpe2Nhc2UgMDppZihDYShvLFwiPC9cIikpZm9yKGxldCBlPW4ubGVuZ3RoLTE7ZT49MDstLWUpaWYoRWEobyxuW2VdLnRhZykpcmV0dXJuITA7YnJlYWs7Y2FzZSAxOmNhc2UgMjp7Y29uc3QgZT14YShuKTtpZihlJiZFYShvLGUudGFnKSlyZXR1cm4hMDticmVha31jYXNlIDM6aWYoQ2EobyxcIl1dPlwiKSlyZXR1cm4hMH1yZXR1cm4hb31mdW5jdGlvbiBFYShlLHQpe3JldHVybiBDYShlLFwiPC9cIikmJmUuc2xpY2UoMiwyK3QubGVuZ3RoKS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpJiYvW1xcdFxcclxcblxcZiAvPl0vLnRlc3QoZVsyK3QubGVuZ3RoXXx8XCI+XCIpfWZ1bmN0aW9uICRhKGUsdCl7UmEoZSx0LE9hKGUsZS5jaGlsZHJlblswXSkpfWZ1bmN0aW9uIE9hKGUsdCl7Y29uc3R7Y2hpbGRyZW46bn09ZTtyZXR1cm4gMT09PW4ubGVuZ3RoJiYxPT09dC50eXBlJiYhSmModCl9ZnVuY3Rpb24gUmEoZSx0LG49ITEpe2NvbnN0e2NoaWxkcmVuOm99PWUscj1vLmxlbmd0aDtsZXQgcz0wO2ZvcihsZXQgaT0wO2k8by5sZW5ndGg7aSsrKXtjb25zdCBlPW9baV07aWYoMT09PWUudHlwZSYmMD09PWUudGFnVHlwZSl7Y29uc3Qgbz1uPzA6RmEoZSx0KTtpZihvPjApe2lmKG8+PTIpe2UuY29kZWdlbk5vZGUucGF0Y2hGbGFnPVwiLTFcIixlLmNvZGVnZW5Ob2RlPXQuaG9pc3QoZS5jb2RlZ2VuTm9kZSkscysrO2NvbnRpbnVlfX1lbHNle2NvbnN0IG49ZS5jb2RlZ2VuTm9kZTtpZigxMz09PW4udHlwZSl7Y29uc3Qgbz1JYShuKTtpZigoIW98fDUxMj09PW98fDE9PT1vKSYmTWEoZSx0KT49Mil7Y29uc3Qgbz1WYShlKTtvJiYobi5wcm9wcz10LmhvaXN0KG8pKX1uLmR5bmFtaWNQcm9wcyYmKG4uZHluYW1pY1Byb3BzPXQuaG9pc3Qobi5keW5hbWljUHJvcHMpKX19fWVsc2UgMTI9PT1lLnR5cGUmJkZhKGUuY29udGVudCx0KT49MiYmKGUuY29kZWdlbk5vZGU9dC5ob2lzdChlLmNvZGVnZW5Ob2RlKSxzKyspO2lmKDE9PT1lLnR5cGUpe2NvbnN0IG49MT09PWUudGFnVHlwZTtuJiZ0LnNjb3Blcy52U2xvdCsrLFJhKGUsdCksbiYmdC5zY29wZXMudlNsb3QtLX1lbHNlIGlmKDExPT09ZS50eXBlKVJhKGUsdCwxPT09ZS5jaGlsZHJlbi5sZW5ndGgpO2Vsc2UgaWYoOT09PWUudHlwZSlmb3IobGV0IG49MDtuPGUuYnJhbmNoZXMubGVuZ3RoO24rKylSYShlLmJyYW5jaGVzW25dLHQsMT09PWUuYnJhbmNoZXNbbl0uY2hpbGRyZW4ubGVuZ3RoKX1zJiZ0LnRyYW5zZm9ybUhvaXN0JiZ0LnRyYW5zZm9ybUhvaXN0KG8sdCxlKSxzJiZzPT09ciYmMT09PWUudHlwZSYmMD09PWUudGFnVHlwZSYmZS5jb2RlZ2VuTm9kZSYmMTM9PT1lLmNvZGVnZW5Ob2RlLnR5cGUmJkUoZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikmJihlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuPXQuaG9pc3QoQ2MoZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikpKX1mdW5jdGlvbiBGYShlLHQpe2NvbnN0e2NvbnN0YW50Q2FjaGU6bn09dDtzd2l0Y2goZS50eXBlKXtjYXNlIDE6aWYoMCE9PWUudGFnVHlwZSlyZXR1cm4gMDtjb25zdCBvPW4uZ2V0KGUpO2lmKHZvaWQgMCE9PW8pcmV0dXJuIG87Y29uc3Qgcj1lLmNvZGVnZW5Ob2RlO2lmKDEzIT09ci50eXBlKXJldHVybiAwO2lmKHIuaXNCbG9jayYmXCJzdmdcIiE9PWUudGFnJiZcImZvcmVpZ25PYmplY3RcIiE9PWUudGFnKXJldHVybiAwO2lmKElhKHIpKXJldHVybiBuLnNldChlLDApLDA7e2xldCBvPTM7Y29uc3Qgcz1NYShlLHQpO2lmKDA9PT1zKXJldHVybiBuLnNldChlLDApLDA7czxvJiYobz1zKTtmb3IobGV0IHI9MDtyPGUuY2hpbGRyZW4ubGVuZ3RoO3IrKyl7Y29uc3Qgcz1GYShlLmNoaWxkcmVuW3JdLHQpO2lmKDA9PT1zKXJldHVybiBuLnNldChlLDApLDA7czxvJiYobz1zKX1pZihvPjEpZm9yKGxldCByPTA7cjxlLnByb3BzLmxlbmd0aDtyKyspe2NvbnN0IHM9ZS5wcm9wc1tyXTtpZig3PT09cy50eXBlJiZcImJpbmRcIj09PXMubmFtZSYmcy5leHApe2NvbnN0IHI9RmEocy5leHAsdCk7aWYoMD09PXIpcmV0dXJuIG4uc2V0KGUsMCksMDtyPG8mJihvPXIpfX1pZihyLmlzQmxvY2spe2ZvcihsZXQgdD0wO3Q8ZS5wcm9wcy5sZW5ndGg7dCsrKXtpZig3PT09ZS5wcm9wc1t0XS50eXBlKXJldHVybiBuLnNldChlLDApLDB9dC5yZW1vdmVIZWxwZXIoamwpLHQucmVtb3ZlSGVscGVyKFpjKHQuaW5TU1Isci5pc0NvbXBvbmVudCkpLHIuaXNCbG9jaz0hMSx0LmhlbHBlcihZYyh0LmluU1NSLHIuaXNDb21wb25lbnQpKX1yZXR1cm4gbi5zZXQoZSxvKSxvfWNhc2UgMjpjYXNlIDM6cmV0dXJuIDM7Y2FzZSA5OmNhc2UgMTE6Y2FzZSAxMDpkZWZhdWx0OnJldHVybiAwO2Nhc2UgNTpjYXNlIDEyOnJldHVybiBGYShlLmNvbnRlbnQsdCk7Y2FzZSA0OnJldHVybiBlLmNvbnN0VHlwZTtjYXNlIDg6bGV0IHM9Mztmb3IobGV0IG49MDtuPGUuY2hpbGRyZW4ubGVuZ3RoO24rKyl7Y29uc3Qgbz1lLmNoaWxkcmVuW25dO2lmKFAobyl8fEEobykpY29udGludWU7Y29uc3Qgcj1GYShvLHQpO2lmKDA9PT1yKXJldHVybiAwO3I8cyYmKHM9cil9cmV0dXJuIHN9fWNvbnN0IFBhPW5ldyBTZXQoW3JjLHNjLGljLGxjXSk7ZnVuY3Rpb24gQWEoZSx0KXtpZigxND09PWUudHlwZSYmIVAoZS5jYWxsZWUpJiZQYS5oYXMoZS5jYWxsZWUpKXtjb25zdCBuPWUuYXJndW1lbnRzWzBdO2lmKDQ9PT1uLnR5cGUpcmV0dXJuIEZhKG4sdCk7aWYoMTQ9PT1uLnR5cGUpcmV0dXJuIEFhKG4sdCl9cmV0dXJuIDB9ZnVuY3Rpb24gTWEoZSx0KXtsZXQgbj0zO2NvbnN0IG89VmEoZSk7aWYobyYmMTU9PT1vLnR5cGUpe2NvbnN0e3Byb3BlcnRpZXM6ZX09bztmb3IobGV0IG89MDtvPGUubGVuZ3RoO28rKyl7Y29uc3R7a2V5OnIsdmFsdWU6c309ZVtvXSxpPUZhKHIsdCk7aWYoMD09PWkpcmV0dXJuIGk7bGV0IGw7aWYoaTxuJiYobj1pKSxsPTQ9PT1zLnR5cGU/RmEocyx0KToxND09PXMudHlwZT9BYShzLHQpOjAsMD09PWwpcmV0dXJuIGw7bDxuJiYobj1sKX19cmV0dXJuIG59ZnVuY3Rpb24gVmEoZSl7Y29uc3QgdD1lLmNvZGVnZW5Ob2RlO2lmKDEzPT09dC50eXBlKXJldHVybiB0LnByb3BzfWZ1bmN0aW9uIElhKGUpe2NvbnN0IHQ9ZS5wYXRjaEZsYWc7cmV0dXJuIHQ/cGFyc2VJbnQodCwxMCk6dm9pZCAwfWZ1bmN0aW9uIEJhKGUse2ZpbGVuYW1lOnQ9XCJcIixwcmVmaXhJZGVudGlmaWVyczpuPSExLGhvaXN0U3RhdGljOm89ITEsY2FjaGVIYW5kbGVyczpyPSExLG5vZGVUcmFuc2Zvcm1zOnM9W10sZGlyZWN0aXZlVHJhbnNmb3JtczppPXt9LHRyYW5zZm9ybUhvaXN0Omw9bnVsbCxpc0J1aWx0SW5Db21wb25lbnQ6Yz1fLGlzQ3VzdG9tRWxlbWVudDphPV8sZXhwcmVzc2lvblBsdWdpbnM6dT1bXSxzY29wZUlkOnA9bnVsbCxzbG90dGVkOmY9ITAsc3NyOmQ9ITEsaW5TU1I6aD0hMSxzc3JDc3NWYXJzOm09XCJcIixiaW5kaW5nTWV0YWRhdGE6Zz12LGlubGluZTp5PSExLGlzVFM6Yj0hMSxvbkVycm9yOlM9Rmwsb25XYXJuOng9UGwsY29tcGF0Q29uZmlnOkN9KXtjb25zdCB3PXQucmVwbGFjZSgvXFw/LiokLyxcIlwiKS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pLGs9e3NlbGZOYW1lOncmJnEoeih3WzFdKSkscHJlZml4SWRlbnRpZmllcnM6bixob2lzdFN0YXRpYzpvLGNhY2hlSGFuZGxlcnM6cixub2RlVHJhbnNmb3JtczpzLGRpcmVjdGl2ZVRyYW5zZm9ybXM6aSx0cmFuc2Zvcm1Ib2lzdDpsLGlzQnVpbHRJbkNvbXBvbmVudDpjLGlzQ3VzdG9tRWxlbWVudDphLGV4cHJlc3Npb25QbHVnaW5zOnUsc2NvcGVJZDpwLHNsb3R0ZWQ6Zixzc3I6ZCxpblNTUjpoLHNzckNzc1ZhcnM6bSxiaW5kaW5nTWV0YWRhdGE6ZyxpbmxpbmU6eSxpc1RTOmIsb25FcnJvcjpTLG9uV2Fybjp4LGNvbXBhdENvbmZpZzpDLHJvb3Q6ZSxoZWxwZXJzOm5ldyBNYXAsY29tcG9uZW50czpuZXcgU2V0LGRpcmVjdGl2ZXM6bmV3IFNldCxob2lzdHM6W10saW1wb3J0czpbXSxjb25zdGFudENhY2hlOm5ldyBNYXAsdGVtcHM6MCxjYWNoZWQ6MCxpZGVudGlmaWVyczpPYmplY3QuY3JlYXRlKG51bGwpLHNjb3Blczp7dkZvcjowLHZTbG90OjAsdlByZTowLHZPbmNlOjB9LHBhcmVudDpudWxsLGN1cnJlbnROb2RlOmUsY2hpbGRJbmRleDowLGluVk9uY2U6ITEsaGVscGVyKGUpe2NvbnN0IHQ9ay5oZWxwZXJzLmdldChlKXx8MDtyZXR1cm4gay5oZWxwZXJzLnNldChlLHQrMSksZX0scmVtb3ZlSGVscGVyKGUpe2NvbnN0IHQ9ay5oZWxwZXJzLmdldChlKTtpZih0KXtjb25zdCBuPXQtMTtuP2suaGVscGVycy5zZXQoZSxuKTprLmhlbHBlcnMuZGVsZXRlKGUpfX0saGVscGVyU3RyaW5nOmU9PmBfJHtiY1trLmhlbHBlcihlKV19YCxyZXBsYWNlTm9kZShlKXtrLnBhcmVudC5jaGlsZHJlbltrLmNoaWxkSW5kZXhdPWsuY3VycmVudE5vZGU9ZX0scmVtb3ZlTm9kZShlKXtjb25zdCB0PWU/ay5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihlKTprLmN1cnJlbnROb2RlP2suY2hpbGRJbmRleDotMTtlJiZlIT09ay5jdXJyZW50Tm9kZT9rLmNoaWxkSW5kZXg+dCYmKGsuY2hpbGRJbmRleC0tLGsub25Ob2RlUmVtb3ZlZCgpKTooay5jdXJyZW50Tm9kZT1udWxsLGsub25Ob2RlUmVtb3ZlZCgpKSxrLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UodCwxKX0sb25Ob2RlUmVtb3ZlZDooKT0+e30sYWRkSWRlbnRpZmllcnMoZSl7fSxyZW1vdmVJZGVudGlmaWVycyhlKXt9LGhvaXN0KGUpe1AoZSkmJihlPVRjKGUpKSxrLmhvaXN0cy5wdXNoKGUpO2NvbnN0IHQ9VGMoYF9ob2lzdGVkXyR7ay5ob2lzdHMubGVuZ3RofWAsITEsZS5sb2MsMik7cmV0dXJuIHQuaG9pc3RlZD1lLHR9LGNhY2hlOihlLHQ9ITEpPT5mdW5jdGlvbihlLHQsbj0hMSl7cmV0dXJue3R5cGU6MjAsaW5kZXg6ZSx2YWx1ZTp0LGlzVk5vZGU6bixsb2M6U2N9fShrLmNhY2hlZCsrLGUsdCl9O3JldHVybiBrfWZ1bmN0aW9uIExhKGUsdCl7Y29uc3Qgbj1CYShlLHQpO2phKGUsbiksdC5ob2lzdFN0YXRpYyYmJGEoZSxuKSx0LnNzcnx8ZnVuY3Rpb24oZSx0KXtjb25zdHtoZWxwZXI6bn09dCx7Y2hpbGRyZW46b309ZTtpZigxPT09by5sZW5ndGgpe2NvbnN0IG49b1swXTtpZihPYShlLG4pJiZuLmNvZGVnZW5Ob2RlKXtjb25zdCBvPW4uY29kZWdlbk5vZGU7MTM9PT1vLnR5cGUmJm5hKG8sdCksZS5jb2RlZ2VuTm9kZT1vfWVsc2UgZS5jb2RlZ2VuTm9kZT1ufWVsc2UgaWYoby5sZW5ndGg+MSl7bGV0IG89NjQ7ZS5jb2RlZ2VuTm9kZT14Yyh0LG4oTWwpLHZvaWQgMCxlLmNoaWxkcmVuLG8rXCJcIix2b2lkIDAsdm9pZCAwLCEwLHZvaWQgMCwhMSl9fShlLG4pLGUuaGVscGVycz1bLi4ubi5oZWxwZXJzLmtleXMoKV0sZS5jb21wb25lbnRzPVsuLi5uLmNvbXBvbmVudHNdLGUuZGlyZWN0aXZlcz1bLi4ubi5kaXJlY3RpdmVzXSxlLmltcG9ydHM9bi5pbXBvcnRzLGUuaG9pc3RzPW4uaG9pc3RzLGUudGVtcHM9bi50ZW1wcyxlLmNhY2hlZD1uLmNhY2hlZH1mdW5jdGlvbiBqYShlLHQpe3QuY3VycmVudE5vZGU9ZTtjb25zdHtub2RlVHJhbnNmb3JtczpufT10LG89W107Zm9yKGxldCBzPTA7czxuLmxlbmd0aDtzKyspe2NvbnN0IHI9bltzXShlLHQpO2lmKHImJihFKHIpP28ucHVzaCguLi5yKTpvLnB1c2gocikpLCF0LmN1cnJlbnROb2RlKXJldHVybjtlPXQuY3VycmVudE5vZGV9c3dpdGNoKGUudHlwZSl7Y2FzZSAzOnQuc3NyfHx0LmhlbHBlcih6bCk7YnJlYWs7Y2FzZSA1OnQuc3NyfHx0LmhlbHBlcihuYyk7YnJlYWs7Y2FzZSA5OmZvcihsZXQgbj0wO248ZS5icmFuY2hlcy5sZW5ndGg7bisrKWphKGUuYnJhbmNoZXNbbl0sdCk7YnJlYWs7Y2FzZSAxMDpjYXNlIDExOmNhc2UgMTpjYXNlIDA6IWZ1bmN0aW9uKGUsdCl7bGV0IG49MDtjb25zdCBvPSgpPT57bi0tfTtmb3IoO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXtjb25zdCByPWUuY2hpbGRyZW5bbl07UChyKXx8KHQucGFyZW50PWUsdC5jaGlsZEluZGV4PW4sdC5vbk5vZGVSZW1vdmVkPW8samEocix0KSl9fShlLHQpfXQuY3VycmVudE5vZGU9ZTtsZXQgcj1vLmxlbmd0aDtmb3IoO3ItLTspb1tyXSgpfWZ1bmN0aW9uIFVhKGUsdCl7Y29uc3Qgbj1QKGUpP3Q9PnQ9PT1lOnQ9PmUudGVzdCh0KTtyZXR1cm4oZSxvKT0+e2lmKDE9PT1lLnR5cGUpe2NvbnN0e3Byb3BzOnJ9PWU7aWYoMz09PWUudGFnVHlwZSYmci5zb21lKEdjKSlyZXR1cm47Y29uc3Qgcz1bXTtmb3IobGV0IGk9MDtpPHIubGVuZ3RoO2krKyl7Y29uc3QgbD1yW2ldO2lmKDc9PT1sLnR5cGUmJm4obC5uYW1lKSl7ci5zcGxpY2UoaSwxKSxpLS07Y29uc3Qgbj10KGUsbCxvKTtuJiZzLnB1c2gobil9fXJldHVybiBzfX19Y29uc3QgRGE9ZT0+YCR7YmNbZV19OiBfJHtiY1tlXX1gO2Z1bmN0aW9uIEhhKGUsdD17fSl7Y29uc3Qgbj1mdW5jdGlvbihlLHttb2RlOnQ9XCJmdW5jdGlvblwiLHByZWZpeElkZW50aWZpZXJzOm49XCJtb2R1bGVcIj09PXQsc291cmNlTWFwOm89ITEsZmlsZW5hbWU6cj1cInRlbXBsYXRlLnZ1ZS5odG1sXCIsc2NvcGVJZDpzPW51bGwsb3B0aW1pemVJbXBvcnRzOmk9ITEscnVudGltZUdsb2JhbE5hbWU6bD1cIlZ1ZVwiLHJ1bnRpbWVNb2R1bGVOYW1lOmM9XCJ2dWVcIixzc3JSdW50aW1lTW9kdWxlTmFtZTphPVwidnVlL3NlcnZlci1yZW5kZXJlclwiLHNzcjp1PSExLGlzVFM6cD0hMSxpblNTUjpmPSExfSl7Y29uc3QgZD17bW9kZTp0LHByZWZpeElkZW50aWZpZXJzOm4sc291cmNlTWFwOm8sZmlsZW5hbWU6cixzY29wZUlkOnMsb3B0aW1pemVJbXBvcnRzOmkscnVudGltZUdsb2JhbE5hbWU6bCxydW50aW1lTW9kdWxlTmFtZTpjLHNzclJ1bnRpbWVNb2R1bGVOYW1lOmEsc3NyOnUsaXNUUzpwLGluU1NSOmYsc291cmNlOmUubG9jLnNvdXJjZSxjb2RlOlwiXCIsY29sdW1uOjEsbGluZToxLG9mZnNldDowLGluZGVudExldmVsOjAscHVyZTohMSxtYXA6dm9pZCAwLGhlbHBlcjplPT5gXyR7YmNbZV19YCxwdXNoKGUsdCl7ZC5jb2RlKz1lfSxpbmRlbnQoKXtoKCsrZC5pbmRlbnRMZXZlbCl9LGRlaW5kZW50KGU9ITEpe2U/LS1kLmluZGVudExldmVsOmgoLS1kLmluZGVudExldmVsKX0sbmV3bGluZSgpe2goZC5pbmRlbnRMZXZlbCl9fTtmdW5jdGlvbiBoKGUpe2QucHVzaChcIlxcblwiK1wiICBcIi5yZXBlYXQoZSkpfXJldHVybiBkfShlLHQpO3Qub25Db250ZXh0Q3JlYXRlZCYmdC5vbkNvbnRleHRDcmVhdGVkKG4pO2NvbnN0e21vZGU6byxwdXNoOnIscHJlZml4SWRlbnRpZmllcnM6cyxpbmRlbnQ6aSxkZWluZGVudDpsLG5ld2xpbmU6Yyxzc3I6YX09bix1PWUuaGVscGVycy5sZW5ndGg+MCxwPSFzJiZcIm1vZHVsZVwiIT09bzshZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4sbmV3bGluZTpvLHJ1bnRpbWVHbG9iYWxOYW1lOnJ9PXQscz1yO2lmKGUuaGVscGVycy5sZW5ndGg+MCYmKG4oYGNvbnN0IF9WdWUgPSAke3N9XFxuYCksZS5ob2lzdHMubGVuZ3RoKSl7bihgY29uc3QgeyAke1tIbCxXbCx6bCxLbCxHbF0uZmlsdGVyKCh0PT5lLmhlbHBlcnMuaW5jbHVkZXModCkpKS5tYXAoRGEpLmpvaW4oXCIsIFwiKX0gfSA9IF9WdWVcXG5gKX0oZnVuY3Rpb24oZSx0KXtpZighZS5sZW5ndGgpcmV0dXJuO3QucHVyZT0hMDtjb25zdHtwdXNoOm4sbmV3bGluZTpvfT10O28oKTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7Y29uc3Qgcz1lW3JdO3MmJihuKGBjb25zdCBfaG9pc3RlZF8ke3IrMX0gPSBgKSxHYShzLHQpLG8oKSl9dC5wdXJlPSExfSkoZS5ob2lzdHMsdCksbygpLG4oXCJyZXR1cm4gXCIpfShlLG4pO2lmKHIoYGZ1bmN0aW9uICR7YT9cInNzclJlbmRlclwiOlwicmVuZGVyXCJ9KCR7KGE/W1wiX2N0eFwiLFwiX3B1c2hcIixcIl9wYXJlbnRcIixcIl9hdHRyc1wiXTpbXCJfY3R4XCIsXCJfY2FjaGVcIl0pLmpvaW4oXCIsIFwiKX0pIHtgKSxpKCkscCYmKHIoXCJ3aXRoIChfY3R4KSB7XCIpLGkoKSx1JiYocihgY29uc3QgeyAke2UuaGVscGVycy5tYXAoRGEpLmpvaW4oXCIsIFwiKX0gfSA9IF9WdWVgKSxyKFwiXFxuXCIpLGMoKSkpLGUuY29tcG9uZW50cy5sZW5ndGgmJihXYShlLmNvbXBvbmVudHMsXCJjb21wb25lbnRcIixuKSwoZS5kaXJlY3RpdmVzLmxlbmd0aHx8ZS50ZW1wcz4wKSYmYygpKSxlLmRpcmVjdGl2ZXMubGVuZ3RoJiYoV2EoZS5kaXJlY3RpdmVzLFwiZGlyZWN0aXZlXCIsbiksZS50ZW1wcz4wJiZjKCkpLGUudGVtcHM+MCl7cihcImxldCBcIik7Zm9yKGxldCB0PTA7dDxlLnRlbXBzO3QrKylyKGAke3Q+MD9cIiwgXCI6XCJcIn1fdGVtcCR7dH1gKX1yZXR1cm4oZS5jb21wb25lbnRzLmxlbmd0aHx8ZS5kaXJlY3RpdmVzLmxlbmd0aHx8ZS50ZW1wcykmJihyKFwiXFxuXCIpLGMoKSksYXx8cihcInJldHVybiBcIiksZS5jb2RlZ2VuTm9kZT9HYShlLmNvZGVnZW5Ob2RlLG4pOnIoXCJudWxsXCIpLHAmJihsKCkscihcIn1cIikpLGwoKSxyKFwifVwiKSx7YXN0OmUsY29kZTpuLmNvZGUscHJlYW1ibGU6XCJcIixtYXA6bi5tYXA/bi5tYXAudG9KU09OKCk6dm9pZCAwfX1mdW5jdGlvbiBXYShlLHQse2hlbHBlcjpuLHB1c2g6byxuZXdsaW5lOnIsaXNUUzpzfSl7Y29uc3QgaT1uKFwiY29tcG9uZW50XCI9PT10P3FsOllsKTtmb3IobGV0IGw9MDtsPGUubGVuZ3RoO2wrKyl7bGV0IG49ZVtsXTtjb25zdCBjPW4uZW5kc1dpdGgoXCJfX3NlbGZcIik7YyYmKG49bi5zbGljZSgwLC02KSksbyhgY29uc3QgJHt0YShuLHQpfSA9ICR7aX0oJHtKU09OLnN0cmluZ2lmeShuKX0ke2M/XCIsIHRydWVcIjpcIlwifSkke3M/XCIhXCI6XCJcIn1gKSxsPGUubGVuZ3RoLTEmJnIoKX19ZnVuY3Rpb24gemEoZSx0KXtjb25zdCBuPWUubGVuZ3RoPjN8fCExO3QucHVzaChcIltcIiksbiYmdC5pbmRlbnQoKSxLYShlLHQsbiksbiYmdC5kZWluZGVudCgpLHQucHVzaChcIl1cIil9ZnVuY3Rpb24gS2EoZSx0LG49ITEsbz0hMCl7Y29uc3R7cHVzaDpyLG5ld2xpbmU6c309dDtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKyl7Y29uc3QgbD1lW2ldO1AobCk/cihsKTpFKGwpP3phKGwsdCk6R2EobCx0KSxpPGUubGVuZ3RoLTEmJihuPyhvJiZyKFwiLFwiKSxzKCkpOm8mJnIoXCIsIFwiKSl9fWZ1bmN0aW9uIEdhKGUsdCl7aWYoUChlKSl0LnB1c2goZSk7ZWxzZSBpZihBKGUpKXQucHVzaCh0LmhlbHBlcihlKSk7ZWxzZSBzd2l0Y2goZS50eXBlKXtjYXNlIDE6Y2FzZSA5OmNhc2UgMTE6Y2FzZSAxMjpHYShlLmNvZGVnZW5Ob2RlLHQpO2JyZWFrO2Nhc2UgMjohZnVuY3Rpb24oZSx0KXt0LnB1c2goSlNPTi5zdHJpbmdpZnkoZS5jb250ZW50KSxlKX0oZSx0KTticmVhaztjYXNlIDQ6cWEoZSx0KTticmVhaztjYXNlIDU6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dDtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtuKGAke28obmMpfShgKSxHYShlLmNvbnRlbnQsdCksbihcIilcIil9KGUsdCk7YnJlYWs7Y2FzZSA4OkphKGUsdCk7YnJlYWs7Y2FzZSAzOiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQ7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7bihgJHtvKHpsKX0oJHtKU09OLnN0cmluZ2lmeShlLmNvbnRlbnQpfSlgLGUpfShlLHQpO2JyZWFrO2Nhc2UgMTM6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dCx7dGFnOnMscHJvcHM6aSxjaGlsZHJlbjpsLHBhdGNoRmxhZzpjLGR5bmFtaWNQcm9wczphLGRpcmVjdGl2ZXM6dSxpc0Jsb2NrOnAsZGlzYWJsZVRyYWNraW5nOmYsaXNDb21wb25lbnQ6ZH09ZTt1JiZuKG8oUWwpK1wiKFwiKTtwJiZuKGAoJHtvKGpsKX0oJHtmP1widHJ1ZVwiOlwiXCJ9KSwgYCk7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7Y29uc3QgaD1wP1pjKHQuaW5TU1IsZCk6WWModC5pblNTUixkKTtuKG8oaCkrXCIoXCIsZSksS2EoZnVuY3Rpb24oZSl7bGV0IHQ9ZS5sZW5ndGg7Zm9yKDt0LS0mJm51bGw9PWVbdF07KTtyZXR1cm4gZS5zbGljZSgwLHQrMSkubWFwKChlPT5lfHxcIm51bGxcIikpfShbcyxpLGwsYyxhXSksdCksbihcIilcIikscCYmbihcIilcIik7dSYmKG4oXCIsIFwiKSxHYSh1LHQpLG4oXCIpXCIpKX0oZSx0KTticmVhaztjYXNlIDE0OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQscz1QKGUuY2FsbGVlKT9lLmNhbGxlZTpvKGUuY2FsbGVlKTtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtuKHMrXCIoXCIsZSksS2EoZS5hcmd1bWVudHMsdCksbihcIilcIil9KGUsdCk7YnJlYWs7Y2FzZSAxNTohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saW5kZW50Om8sZGVpbmRlbnQ6cixuZXdsaW5lOnN9PXQse3Byb3BlcnRpZXM6aX09ZTtpZighaS5sZW5ndGgpcmV0dXJuIHZvaWQgbihcInt9XCIsZSk7Y29uc3QgbD1pLmxlbmd0aD4xfHwhMTtuKGw/XCJ7XCI6XCJ7IFwiKSxsJiZvKCk7Zm9yKGxldCBjPTA7YzxpLmxlbmd0aDtjKyspe2NvbnN0e2tleTplLHZhbHVlOm99PWlbY107WWEoZSx0KSxuKFwiOiBcIiksR2Eobyx0KSxjPGkubGVuZ3RoLTEmJihuKFwiLFwiKSxzKCkpfWwmJnIoKSxuKGw/XCJ9XCI6XCIgfVwiKX0oZSx0KTticmVhaztjYXNlIDE3OiFmdW5jdGlvbihlLHQpe3phKGUuZWxlbWVudHMsdCl9KGUsdCk7YnJlYWs7Y2FzZSAxODohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saW5kZW50Om8sZGVpbmRlbnQ6cn09dCx7cGFyYW1zOnMscmV0dXJuczppLGJvZHk6bCxuZXdsaW5lOmMsaXNTbG90OmF9PWU7YSYmbihgXyR7YmNbbWNdfShgKTtuKFwiKFwiLGUpLEUocyk/S2Eocyx0KTpzJiZHYShzLHQpO24oXCIpID0+IFwiKSwoY3x8bCkmJihuKFwie1wiKSxvKCkpO2k/KGMmJm4oXCJyZXR1cm4gXCIpLEUoaSk/emEoaSx0KTpHYShpLHQpKTpsJiZHYShsLHQpOyhjfHxsKSYmKHIoKSxuKFwifVwiKSk7YSYmbihcIilcIil9KGUsdCk7YnJlYWs7Y2FzZSAxOTohZnVuY3Rpb24oZSx0KXtjb25zdHt0ZXN0Om4sY29uc2VxdWVudDpvLGFsdGVybmF0ZTpyLG5ld2xpbmU6c309ZSx7cHVzaDppLGluZGVudDpsLGRlaW5kZW50OmMsbmV3bGluZTphfT10O2lmKDQ9PT1uLnR5cGUpe2NvbnN0IGU9IU1jKG4uY29udGVudCk7ZSYmaShcIihcIikscWEobix0KSxlJiZpKFwiKVwiKX1lbHNlIGkoXCIoXCIpLEdhKG4sdCksaShcIilcIik7cyYmbCgpLHQuaW5kZW50TGV2ZWwrKyxzfHxpKFwiIFwiKSxpKFwiPyBcIiksR2Eobyx0KSx0LmluZGVudExldmVsLS0scyYmYSgpLHN8fGkoXCIgXCIpLGkoXCI6IFwiKTtjb25zdCB1PTE5PT09ci50eXBlO3V8fHQuaW5kZW50TGV2ZWwrKztHYShyLHQpLHV8fHQuaW5kZW50TGV2ZWwtLTtzJiZjKCEwKX0oZSx0KTticmVhaztjYXNlIDIwOiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxpbmRlbnQ6cixkZWluZGVudDpzLG5ld2xpbmU6aX09dDtuKGBfY2FjaGVbJHtlLmluZGV4fV0gfHwgKGApLGUuaXNWTm9kZSYmKHIoKSxuKGAke28oZmMpfSgtMSksYCksaSgpKTtuKGBfY2FjaGVbJHtlLmluZGV4fV0gPSBgKSxHYShlLnZhbHVlLHQpLGUuaXNWTm9kZSYmKG4oXCIsXCIpLGkoKSxuKGAke28oZmMpfSgxKSxgKSxpKCksbihgX2NhY2hlWyR7ZS5pbmRleH1dYCkscygpKTtuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDIxOkthKGUuYm9keSx0LCEwLCExKX19ZnVuY3Rpb24gcWEoZSx0KXtjb25zdHtjb250ZW50Om4saXNTdGF0aWM6b309ZTt0LnB1c2gobz9KU09OLnN0cmluZ2lmeShuKTpuLGUpfWZ1bmN0aW9uIEphKGUsdCl7Zm9yKGxldCBuPTA7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspe2NvbnN0IG89ZS5jaGlsZHJlbltuXTtQKG8pP3QucHVzaChvKTpHYShvLHQpfX1mdW5jdGlvbiBZYShlLHQpe2NvbnN0e3B1c2g6bn09dDtpZig4PT09ZS50eXBlKW4oXCJbXCIpLEphKGUsdCksbihcIl1cIik7ZWxzZSBpZihlLmlzU3RhdGljKXtuKE1jKGUuY29udGVudCk/ZS5jb250ZW50OkpTT04uc3RyaW5naWZ5KGUuY29udGVudCksZSl9ZWxzZSBuKGBbJHtlLmNvbnRlbnR9XWAsZSl9Y29uc3QgWmE9VWEoL14oaWZ8ZWxzZXxlbHNlLWlmKSQvLCgoZSx0LG4pPT5mdW5jdGlvbihlLHQsbixvKXtpZighKFwiZWxzZVwiPT09dC5uYW1lfHx0LmV4cCYmdC5leHAuY29udGVudC50cmltKCkpKXt0LmV4cD1UYyhcInRydWVcIiwhMSx0LmV4cD90LmV4cC5sb2M6ZS5sb2MpfWlmKFwiaWZcIj09PXQubmFtZSl7Y29uc3Qgcj1RYShlLHQpLHM9e3R5cGU6OSxsb2M6ZS5sb2MsYnJhbmNoZXM6W3JdfTtpZihuLnJlcGxhY2VOb2RlKHMpLG8pcmV0dXJuIG8ocyxyLCEwKX1lbHNle2NvbnN0IHI9bi5wYXJlbnQuY2hpbGRyZW47bGV0IHM9ci5pbmRleE9mKGUpO2Zvcig7cy0tID49LTE7KXtjb25zdCBpPXJbc107aWYoIWl8fDIhPT1pLnR5cGV8fGkuY29udGVudC50cmltKCkubGVuZ3RoKXtpZihpJiY5PT09aS50eXBlKXtuLnJlbW92ZU5vZGUoKTtjb25zdCByPVFhKGUsdCk7aS5icmFuY2hlcy5wdXNoKHIpO2NvbnN0IHM9byYmbyhpLHIsITEpO2phKHIsbikscyYmcygpLG4uY3VycmVudE5vZGU9bnVsbH1icmVha31uLnJlbW92ZU5vZGUoaSl9fX0oZSx0LG4sKChlLHQsbyk9Pntjb25zdCByPW4ucGFyZW50LmNoaWxkcmVuO2xldCBzPXIuaW5kZXhPZihlKSxpPTA7Zm9yKDtzLS0gPj0wOyl7Y29uc3QgZT1yW3NdO2UmJjk9PT1lLnR5cGUmJihpKz1lLmJyYW5jaGVzLmxlbmd0aCl9cmV0dXJuKCk9PntpZihvKWUuY29kZWdlbk5vZGU9WGEodCxpLG4pO2Vsc2V7Y29uc3Qgbz1mdW5jdGlvbihlKXtmb3IoOzspaWYoMTk9PT1lLnR5cGUpe2lmKDE5IT09ZS5hbHRlcm5hdGUudHlwZSlyZXR1cm4gZTtlPWUuYWx0ZXJuYXRlfWVsc2UgMjA9PT1lLnR5cGUmJihlPWUudmFsdWUpfShlLmNvZGVnZW5Ob2RlKTtvLmFsdGVybmF0ZT1YYSh0LGkrZS5icmFuY2hlcy5sZW5ndGgtMSxuKX19fSkpKSk7ZnVuY3Rpb24gUWEoZSx0KXtjb25zdCBuPTM9PT1lLnRhZ1R5cGU7cmV0dXJue3R5cGU6MTAsbG9jOmUubG9jLGNvbmRpdGlvbjpcImVsc2VcIj09PXQubmFtZT92b2lkIDA6dC5leHAsY2hpbGRyZW46biYmIUhjKGUsXCJmb3JcIik/ZS5jaGlsZHJlbjpbZV0sdXNlcktleTpXYyhlLFwia2V5XCIpLGlzVGVtcGxhdGVJZjpufX1mdW5jdGlvbiBYYShlLHQsbil7cmV0dXJuIGUuY29uZGl0aW9uP09jKGUuY29uZGl0aW9uLGV1KGUsdCxuKSxFYyhuLmhlbHBlcih6bCksWydcIlwiJyxcInRydWVcIl0pKTpldShlLHQsbil9ZnVuY3Rpb24gZXUoZSx0LG4pe2NvbnN0e2hlbHBlcjpvfT1uLHI9a2MoXCJrZXlcIixUYyhgJHt0fWAsITEsU2MsMikpLHtjaGlsZHJlbjpzfT1lLGk9c1swXTtpZigxIT09cy5sZW5ndGh8fDEhPT1pLnR5cGUpe2lmKDE9PT1zLmxlbmd0aCYmMTE9PT1pLnR5cGUpe2NvbnN0IGU9aS5jb2RlZ2VuTm9kZTtyZXR1cm4gZWEoZSxyLG4pLGV9e2xldCB0PTY0O3JldHVybiB4YyhuLG8oTWwpLHdjKFtyXSkscyx0K1wiXCIsdm9pZCAwLHZvaWQgMCwhMCwhMSwhMSxlLmxvYyl9fXtjb25zdCBlPWkuY29kZWdlbk5vZGUsdD0xND09PShsPWUpLnR5cGUmJmwuY2FsbGVlPT09eWM/bC5hcmd1bWVudHNbMV0ucmV0dXJuczpsO3JldHVybiAxMz09PXQudHlwZSYmbmEodCxuKSxlYSh0LHIsbiksZX12YXIgbH1jb25zdCB0dT1VYShcImZvclwiLCgoZSx0LG4pPT57Y29uc3R7aGVscGVyOm8scmVtb3ZlSGVscGVyOnJ9PW47cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLG8pe2lmKCF0LmV4cClyZXR1cm47Y29uc3Qgcj1zdSh0LmV4cCk7aWYoIXIpcmV0dXJuO2NvbnN0e3Njb3BlczpzfT1uLHtzb3VyY2U6aSx2YWx1ZTpsLGtleTpjLGluZGV4OmF9PXIsdT17dHlwZToxMSxsb2M6dC5sb2Msc291cmNlOmksdmFsdWVBbGlhczpsLGtleUFsaWFzOmMsb2JqZWN0SW5kZXhBbGlhczphLHBhcnNlUmVzdWx0OnIsY2hpbGRyZW46cWMoZSk/ZS5jaGlsZHJlbjpbZV19O24ucmVwbGFjZU5vZGUodSkscy52Rm9yKys7Y29uc3QgcD1vJiZvKHUpO3JldHVybigpPT57cy52Rm9yLS0scCYmcCgpfX0oZSx0LG4sKHQ9Pntjb25zdCBzPUVjKG8oWGwpLFt0LnNvdXJjZV0pLGk9cWMoZSksbD1IYyhlLFwibWVtb1wiKSxjPVdjKGUsXCJrZXlcIiksYT1jJiYoNj09PWMudHlwZT9UYyhjLnZhbHVlLmNvbnRlbnQsITApOmMuZXhwKSx1PWM/a2MoXCJrZXlcIixhKTpudWxsLHA9ND09PXQuc291cmNlLnR5cGUmJnQuc291cmNlLmNvbnN0VHlwZT4wLGY9cD82NDpjPzEyODoyNTY7cmV0dXJuIHQuY29kZWdlbk5vZGU9eGMobixvKE1sKSx2b2lkIDAscyxmK1wiXCIsdm9pZCAwLHZvaWQgMCwhMCwhcCwhMSxlLmxvYyksKCk9PntsZXQgYztjb25zdHtjaGlsZHJlbjpmfT10LGQ9MSE9PWYubGVuZ3RofHwxIT09ZlswXS50eXBlLGg9SmMoZSk/ZTppJiYxPT09ZS5jaGlsZHJlbi5sZW5ndGgmJkpjKGUuY2hpbGRyZW5bMF0pP2UuY2hpbGRyZW5bMF06bnVsbDtpZihoPyhjPWguY29kZWdlbk5vZGUsaSYmdSYmZWEoYyx1LG4pKTpkP2M9eGMobixvKE1sKSx1P3djKFt1XSk6dm9pZCAwLGUuY2hpbGRyZW4sXCI2NFwiLHZvaWQgMCx2b2lkIDAsITAsdm9pZCAwLCExKTooYz1mWzBdLmNvZGVnZW5Ob2RlLGkmJnUmJmVhKGMsdSxuKSxjLmlzQmxvY2shPT0hcCYmKGMuaXNCbG9jaz8ocihqbCkscihaYyhuLmluU1NSLGMuaXNDb21wb25lbnQpKSk6cihZYyhuLmluU1NSLGMuaXNDb21wb25lbnQpKSksYy5pc0Jsb2NrPSFwLGMuaXNCbG9jaz8obyhqbCksbyhaYyhuLmluU1NSLGMuaXNDb21wb25lbnQpKSk6byhZYyhuLmluU1NSLGMuaXNDb21wb25lbnQpKSksbCl7Y29uc3QgZT0kYyhsdSh0LnBhcnNlUmVzdWx0LFtUYyhcIl9jYWNoZWRcIildKSk7ZS5ib2R5PXt0eXBlOjIxLGJvZHk6W05jKFtcImNvbnN0IF9tZW1vID0gKFwiLGwuZXhwLFwiKVwiXSksTmMoW1wiaWYgKF9jYWNoZWRcIiwuLi5hP1tcIiAmJiBfY2FjaGVkLmtleSA9PT0gXCIsYV06W10sYCAmJiAke24uaGVscGVyU3RyaW5nKF9jKX0oX2NhY2hlZCwgX21lbW8pKSByZXR1cm4gX2NhY2hlZGBdKSxOYyhbXCJjb25zdCBfaXRlbSA9IFwiLGNdKSxUYyhcIl9pdGVtLm1lbW8gPSBfbWVtb1wiKSxUYyhcInJldHVybiBfaXRlbVwiKV0sbG9jOlNjfSxzLmFyZ3VtZW50cy5wdXNoKGUsVGMoXCJfY2FjaGVcIiksVGMoU3RyaW5nKG4uY2FjaGVkKyspKSl9ZWxzZSBzLmFyZ3VtZW50cy5wdXNoKCRjKGx1KHQucGFyc2VSZXN1bHQpLGMsITApKX19KSl9KSk7Y29uc3QgbnU9LyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvLG91PS8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLyxydT0vXlxcKHxcXCkkL2c7ZnVuY3Rpb24gc3UoZSx0KXtjb25zdCBuPWUubG9jLG89ZS5jb250ZW50LHI9by5tYXRjaChudSk7aWYoIXIpcmV0dXJuO2NvbnN0WyxzLGldPXIsbD17c291cmNlOml1KG4saS50cmltKCksby5pbmRleE9mKGkscy5sZW5ndGgpKSx2YWx1ZTp2b2lkIDAsa2V5OnZvaWQgMCxpbmRleDp2b2lkIDB9O2xldCBjPXMudHJpbSgpLnJlcGxhY2UocnUsXCJcIikudHJpbSgpO2NvbnN0IGE9cy5pbmRleE9mKGMpLHU9Yy5tYXRjaChvdSk7aWYodSl7Yz1jLnJlcGxhY2Uob3UsXCJcIikudHJpbSgpO2NvbnN0IGU9dVsxXS50cmltKCk7bGV0IHQ7aWYoZSYmKHQ9by5pbmRleE9mKGUsYStjLmxlbmd0aCksbC5rZXk9aXUobixlLHQpKSx1WzJdKXtjb25zdCByPXVbMl0udHJpbSgpO3ImJihsLmluZGV4PWl1KG4scixvLmluZGV4T2YocixsLmtleT90K2UubGVuZ3RoOmErYy5sZW5ndGgpKSl9fXJldHVybiBjJiYobC52YWx1ZT1pdShuLGMsYSkpLGx9ZnVuY3Rpb24gaXUoZSx0LG4pe3JldHVybiBUYyh0LCExLGpjKGUsbix0Lmxlbmd0aCkpfWZ1bmN0aW9uIGx1KHt2YWx1ZTplLGtleTp0LGluZGV4Om59LG89W10pe3JldHVybiBmdW5jdGlvbihlKXtsZXQgdD1lLmxlbmd0aDtmb3IoO3QtLSYmIWVbdF07KTtyZXR1cm4gZS5zbGljZSgwLHQrMSkubWFwKCgoZSx0KT0+ZXx8VGMoXCJfXCIucmVwZWF0KHQrMSksITEpKSl9KFtlLHQsbiwuLi5vXSl9Y29uc3QgY3U9VGMoXCJ1bmRlZmluZWRcIiwhMSksYXU9KGUsdCk9PntpZigxPT09ZS50eXBlJiYoMT09PWUudGFnVHlwZXx8Mz09PWUudGFnVHlwZSkpe2NvbnN0IG49SGMoZSxcInNsb3RcIik7aWYobilyZXR1cm4gdC5zY29wZXMudlNsb3QrKywoKT0+e3Quc2NvcGVzLnZTbG90LS19fX0sdXU9KGUsdCxuKT0+JGMoZSx0LCExLCEwLHQubGVuZ3RoP3RbMF0ubG9jOm4pO2Z1bmN0aW9uIHB1KGUsdCxuPXV1KXt0LmhlbHBlcihtYyk7Y29uc3R7Y2hpbGRyZW46byxsb2M6cn09ZSxzPVtdLGk9W107bGV0IGw9dC5zY29wZXMudlNsb3Q+MHx8dC5zY29wZXMudkZvcj4wO2NvbnN0IGM9SGMoZSxcInNsb3RcIiwhMCk7aWYoYyl7Y29uc3R7YXJnOmUsZXhwOnR9PWM7ZSYmIVJjKGUpJiYobD0hMCkscy5wdXNoKGtjKGV8fFRjKFwiZGVmYXVsdFwiLCEwKSxuKHQsbyxyKSkpfWxldCBhPSExLHU9ITE7Y29uc3QgcD1bXSxmPW5ldyBTZXQ7Zm9yKGxldCBtPTA7bTxvLmxlbmd0aDttKyspe2NvbnN0IGU9b1ttXTtsZXQgcjtpZighcWMoZSl8fCEocj1IYyhlLFwic2xvdFwiLCEwKSkpezMhPT1lLnR5cGUmJnAucHVzaChlKTtjb250aW51ZX1pZihjKWJyZWFrO2E9ITA7Y29uc3R7Y2hpbGRyZW46ZCxsb2M6aH09ZSx7YXJnOmc9VGMoXCJkZWZhdWx0XCIsITApLGV4cDp2fT1yO2xldCB5O1JjKGcpP3k9Zz9nLmNvbnRlbnQ6XCJkZWZhdWx0XCI6bD0hMDtjb25zdCBfPW4odixkLGgpO2xldCBiLFMseDtpZihiPUhjKGUsXCJpZlwiKSlsPSEwLGkucHVzaChPYyhiLmV4cCxmdShnLF8pLGN1KSk7ZWxzZSBpZihTPUhjKGUsL15lbHNlKC1pZik/JC8sITApKXtsZXQgZSx0PW07Zm9yKDt0LS0mJihlPW9bdF0sMz09PWUudHlwZSk7KTtpZihlJiZxYyhlKSYmSGMoZSxcImlmXCIpKXtvLnNwbGljZShtLDEpLG0tLTtsZXQgZT1pW2kubGVuZ3RoLTFdO2Zvcig7MTk9PT1lLmFsdGVybmF0ZS50eXBlOyllPWUuYWx0ZXJuYXRlO2UuYWx0ZXJuYXRlPVMuZXhwP09jKFMuZXhwLGZ1KGcsXyksY3UpOmZ1KGcsXyl9fWVsc2UgaWYoeD1IYyhlLFwiZm9yXCIpKXtsPSEwO2NvbnN0IGU9eC5wYXJzZVJlc3VsdHx8c3UoeC5leHApO2UmJmkucHVzaChFYyh0LmhlbHBlcihYbCksW2Uuc291cmNlLCRjKGx1KGUpLGZ1KGcsXyksITApXSkpfWVsc2V7aWYoeSl7aWYoZi5oYXMoeSkpY29udGludWU7Zi5hZGQoeSksXCJkZWZhdWx0XCI9PT15JiYodT0hMCl9cy5wdXNoKGtjKGcsXykpfX1pZighYyl7Y29uc3QgZT0oZSx0KT0+a2MoXCJkZWZhdWx0XCIsbihlLHQscikpO2E/cC5sZW5ndGgmJnAuc29tZSgoZT0+aHUoZSkpKSYmKHV8fHMucHVzaChlKHZvaWQgMCxwKSkpOnMucHVzaChlKHZvaWQgMCxvKSl9Y29uc3QgZD1sPzI6ZHUoZS5jaGlsZHJlbik/MzoxO2xldCBoPXdjKHMuY29uY2F0KGtjKFwiX1wiLFRjKGQrXCJcIiwhMSkpKSxyKTtyZXR1cm4gaS5sZW5ndGgmJihoPUVjKHQuaGVscGVyKHRjKSxbaCxDYyhpKV0pKSx7c2xvdHM6aCxoYXNEeW5hbWljU2xvdHM6bH19ZnVuY3Rpb24gZnUoZSx0KXtyZXR1cm4gd2MoW2tjKFwibmFtZVwiLGUpLGtjKFwiZm5cIix0KV0pfWZ1bmN0aW9uIGR1KGUpe2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCBuPWVbdF07c3dpdGNoKG4udHlwZSl7Y2FzZSAxOmlmKDI9PT1uLnRhZ1R5cGV8fGR1KG4uY2hpbGRyZW4pKXJldHVybiEwO2JyZWFrO2Nhc2UgOTppZihkdShuLmJyYW5jaGVzKSlyZXR1cm4hMDticmVhaztjYXNlIDEwOmNhc2UgMTE6aWYoZHUobi5jaGlsZHJlbikpcmV0dXJuITB9fXJldHVybiExfWZ1bmN0aW9uIGh1KGUpe3JldHVybiAyIT09ZS50eXBlJiYxMiE9PWUudHlwZXx8KDI9PT1lLnR5cGU/ISFlLmNvbnRlbnQudHJpbSgpOmh1KGUuY29udGVudCkpfWNvbnN0IG11PW5ldyBXZWFrTWFwLGd1PShlLHQpPT5mdW5jdGlvbigpe2lmKDEhPT0oZT10LmN1cnJlbnROb2RlKS50eXBlfHwwIT09ZS50YWdUeXBlJiYxIT09ZS50YWdUeXBlKXJldHVybjtjb25zdHt0YWc6bixwcm9wczpvfT1lLHI9MT09PWUudGFnVHlwZTtsZXQgcz1yP2Z1bmN0aW9uKGUsdCxuPSExKXtsZXR7dGFnOm99PWU7Y29uc3Qgcj1idShvKSxzPVdjKGUsXCJpc1wiKTtpZihzKWlmKHIpe2NvbnN0IGU9Nj09PXMudHlwZT9zLnZhbHVlJiZUYyhzLnZhbHVlLmNvbnRlbnQsITApOnMuZXhwO2lmKGUpcmV0dXJuIEVjKHQuaGVscGVyKEpsKSxbZV0pfWVsc2UgNj09PXMudHlwZSYmcy52YWx1ZS5jb250ZW50LnN0YXJ0c1dpdGgoXCJ2dWU6XCIpJiYobz1zLnZhbHVlLmNvbnRlbnQuc2xpY2UoNCkpO2NvbnN0IGk9IXImJkhjKGUsXCJpc1wiKTtpZihpJiZpLmV4cClyZXR1cm4gRWModC5oZWxwZXIoSmwpLFtpLmV4cF0pO2NvbnN0IGw9UGMobyl8fHQuaXNCdWlsdEluQ29tcG9uZW50KG8pO2lmKGwpcmV0dXJuIG58fHQuaGVscGVyKGwpLGw7cmV0dXJuIHQuaGVscGVyKHFsKSx0LmNvbXBvbmVudHMuYWRkKG8pLHRhKG8sXCJjb21wb25lbnRcIil9KGUsdCk6YFwiJHtufVwiYDtjb25zdCBpPU0ocykmJnMuY2FsbGVlPT09Smw7bGV0IGwsYyxhLHUscCxmLGQ9MCxoPWl8fHM9PT1WbHx8cz09PUlsfHwhciYmKFwic3ZnXCI9PT1ufHxcImZvcmVpZ25PYmplY3RcIj09PW4pO2lmKG8ubGVuZ3RoPjApe2NvbnN0IG49dnUoZSx0LHZvaWQgMCxyLGkpO2w9bi5wcm9wcyxkPW4ucGF0Y2hGbGFnLHA9bi5keW5hbWljUHJvcE5hbWVzO2NvbnN0IG89bi5kaXJlY3RpdmVzO2Y9byYmby5sZW5ndGg/Q2Moby5tYXAoKGU9PmZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1bXSxvPW11LmdldChlKTtvP24ucHVzaCh0LmhlbHBlclN0cmluZyhvKSk6KHQuaGVscGVyKFlsKSx0LmRpcmVjdGl2ZXMuYWRkKGUubmFtZSksbi5wdXNoKHRhKGUubmFtZSxcImRpcmVjdGl2ZVwiKSkpO2NvbnN0e2xvYzpyfT1lO2UuZXhwJiZuLnB1c2goZS5leHApO2UuYXJnJiYoZS5leHB8fG4ucHVzaChcInZvaWQgMFwiKSxuLnB1c2goZS5hcmcpKTtpZihPYmplY3Qua2V5cyhlLm1vZGlmaWVycykubGVuZ3RoKXtlLmFyZ3x8KGUuZXhwfHxuLnB1c2goXCJ2b2lkIDBcIiksbi5wdXNoKFwidm9pZCAwXCIpKTtjb25zdCB0PVRjKFwidHJ1ZVwiLCExLHIpO24ucHVzaCh3YyhlLm1vZGlmaWVycy5tYXAoKGU9PmtjKGUsdCkpKSxyKSl9cmV0dXJuIENjKG4sZS5sb2MpfShlLHQpKSkpOnZvaWQgMCxuLnNob3VsZFVzZUJsb2NrJiYoaD0hMCl9aWYoZS5jaGlsZHJlbi5sZW5ndGg+MCl7cz09PUJsJiYoaD0hMCxkfD0xMDI0KTtpZihyJiZzIT09VmwmJnMhPT1CbCl7Y29uc3R7c2xvdHM6bixoYXNEeW5hbWljU2xvdHM6b309cHUoZSx0KTtjPW4sbyYmKGR8PTEwMjQpfWVsc2UgaWYoMT09PWUuY2hpbGRyZW4ubGVuZ3RoJiZzIT09Vmwpe2NvbnN0IG49ZS5jaGlsZHJlblswXSxvPW4udHlwZSxyPTU9PT1vfHw4PT09bztyJiYwPT09RmEobix0KSYmKGR8PTEpLGM9cnx8Mj09PW8/bjplLmNoaWxkcmVufWVsc2UgYz1lLmNoaWxkcmVufTAhPT1kJiYoYT1TdHJpbmcoZCkscCYmcC5sZW5ndGgmJih1PWZ1bmN0aW9uKGUpe2xldCB0PVwiW1wiO2ZvcihsZXQgbj0wLG89ZS5sZW5ndGg7bjxvO24rKyl0Kz1KU09OLnN0cmluZ2lmeShlW25dKSxuPG8tMSYmKHQrPVwiLCBcIik7cmV0dXJuIHQrXCJdXCJ9KHApKSksZS5jb2RlZ2VuTm9kZT14Yyh0LHMsbCxjLGEsdSxmLCEhaCwhMSxyLGUubG9jKX07ZnVuY3Rpb24gdnUoZSx0LG49ZS5wcm9wcyxvLHIscz0hMSl7Y29uc3R7dGFnOmksbG9jOmwsY2hpbGRyZW46Y309ZTtsZXQgYT1bXTtjb25zdCB1PVtdLHA9W10sZj1jLmxlbmd0aD4wO2xldCBkPSExLGg9MCxtPSExLGc9ITEsdj0hMSx5PSExLF89ITEsYj0hMTtjb25zdCBTPVtdLEM9KHtrZXk6ZSx2YWx1ZTpufSk9PntpZihSYyhlKSl7Y29uc3Qgcz1lLmNvbnRlbnQsaT14KHMpO2lmKCFpfHxvJiYhcnx8XCJvbmNsaWNrXCI9PT1zLnRvTG93ZXJDYXNlKCl8fFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiPT09c3x8VShzKXx8KHk9ITApLGkmJlUocykmJihiPSEwKSwyMD09PW4udHlwZXx8KDQ9PT1uLnR5cGV8fDg9PT1uLnR5cGUpJiZGYShuLHQpPjApcmV0dXJuO1wicmVmXCI9PT1zP209ITA6XCJjbGFzc1wiPT09cz9nPSEwOlwic3R5bGVcIj09PXM/dj0hMDpcImtleVwiPT09c3x8Uy5pbmNsdWRlcyhzKXx8Uy5wdXNoKHMpLCFvfHxcImNsYXNzXCIhPT1zJiZcInN0eWxlXCIhPT1zfHxTLmluY2x1ZGVzKHMpfHxTLnB1c2gocyl9ZWxzZSBfPSEwfTtmb3IobGV0IHg9MDt4PG4ubGVuZ3RoO3grKyl7Y29uc3Qgbz1uW3hdO2lmKDY9PT1vLnR5cGUpe2NvbnN0e2xvYzplLG5hbWU6bix2YWx1ZTpyfT1vO2xldCBzPSEwO2lmKFwicmVmXCI9PT1uJiYobT0hMCx0LnNjb3Blcy52Rm9yPjAmJmEucHVzaChrYyhUYyhcInJlZl9mb3JcIiwhMCksVGMoXCJ0cnVlXCIpKSkpLFwiaXNcIj09PW4mJihidShpKXx8ciYmci5jb250ZW50LnN0YXJ0c1dpdGgoXCJ2dWU6XCIpKSljb250aW51ZTthLnB1c2goa2MoVGMobiwhMCxqYyhlLDAsbi5sZW5ndGgpKSxUYyhyP3IuY29udGVudDpcIlwiLHMscj9yLmxvYzplKSkpfWVsc2V7Y29uc3R7bmFtZTpuLGFyZzpyLGV4cDpjLGxvYzpofT1vLG09XCJiaW5kXCI9PT1uLGc9XCJvblwiPT09bjtpZihcInNsb3RcIj09PW4pY29udGludWU7aWYoXCJvbmNlXCI9PT1ufHxcIm1lbW9cIj09PW4pY29udGludWU7aWYoXCJpc1wiPT09bnx8bSYmemMocixcImlzXCIpJiZidShpKSljb250aW51ZTtpZihnJiZzKWNvbnRpbnVlO2lmKChtJiZ6YyhyLFwia2V5XCIpfHxnJiZmJiZ6YyhyLFwidnVlOmJlZm9yZS11cGRhdGVcIikpJiYoZD0hMCksbSYmemMocixcInJlZlwiKSYmdC5zY29wZXMudkZvcj4wJiZhLnB1c2goa2MoVGMoXCJyZWZfZm9yXCIsITApLFRjKFwidHJ1ZVwiKSkpLCFyJiYobXx8Zykpe189ITAsYyYmKGEubGVuZ3RoJiYodS5wdXNoKHdjKHl1KGEpLGwpKSxhPVtdKSx1LnB1c2gobT9jOnt0eXBlOjE0LGxvYzpoLGNhbGxlZTp0LmhlbHBlcihjYyksYXJndW1lbnRzOltjXX0pKTtjb250aW51ZX1jb25zdCB2PXQuZGlyZWN0aXZlVHJhbnNmb3Jtc1tuXTtpZih2KXtjb25zdHtwcm9wczpuLG5lZWRSdW50aW1lOnJ9PXYobyxlLHQpOyFzJiZuLmZvckVhY2goQyksYS5wdXNoKC4uLm4pLHImJihwLnB1c2gobyksQShyKSYmbXUuc2V0KG8scikpfWVsc2UgRChuKXx8KHAucHVzaChvKSxmJiYoZD0hMCkpfX1sZXQgdztpZih1Lmxlbmd0aD8oYS5sZW5ndGgmJnUucHVzaCh3Yyh5dShhKSxsKSksdz11Lmxlbmd0aD4xP0VjKHQuaGVscGVyKG9jKSx1LGwpOnVbMF0pOmEubGVuZ3RoJiYodz13Yyh5dShhKSxsKSksXz9ofD0xNjooZyYmIW8mJihofD0yKSx2JiYhbyYmKGh8PTQpLFMubGVuZ3RoJiYoaHw9OCkseSYmKGh8PTMyKSksZHx8MCE9PWgmJjMyIT09aHx8IShtfHxifHxwLmxlbmd0aD4wKXx8KGh8PTUxMiksIXQuaW5TU1ImJncpc3dpdGNoKHcudHlwZSl7Y2FzZSAxNTpsZXQgZT0tMSxuPS0xLG89ITE7Zm9yKGxldCB0PTA7dDx3LnByb3BlcnRpZXMubGVuZ3RoO3QrKyl7Y29uc3Qgcj13LnByb3BlcnRpZXNbdF0ua2V5O1JjKHIpP1wiY2xhc3NcIj09PXIuY29udGVudD9lPXQ6XCJzdHlsZVwiPT09ci5jb250ZW50JiYobj10KTpyLmlzSGFuZGxlcktleXx8KG89ITApfWNvbnN0IHI9dy5wcm9wZXJ0aWVzW2VdLHM9dy5wcm9wZXJ0aWVzW25dO28/dz1FYyh0LmhlbHBlcihpYyksW3ddKToociYmIVJjKHIudmFsdWUpJiYoci52YWx1ZT1FYyh0LmhlbHBlcihyYyksW3IudmFsdWVdKSkscyYmKHZ8fDQ9PT1zLnZhbHVlLnR5cGUmJlwiW1wiPT09cy52YWx1ZS5jb250ZW50LnRyaW0oKVswXXx8MTc9PT1zLnZhbHVlLnR5cGUpJiYocy52YWx1ZT1FYyh0LmhlbHBlcihzYyksW3MudmFsdWVdKSkpO2JyZWFrO2Nhc2UgMTQ6YnJlYWs7ZGVmYXVsdDp3PUVjKHQuaGVscGVyKGljKSxbRWModC5oZWxwZXIobGMpLFt3XSldKX1yZXR1cm57cHJvcHM6dyxkaXJlY3RpdmVzOnAscGF0Y2hGbGFnOmgsZHluYW1pY1Byb3BOYW1lczpTLHNob3VsZFVzZUJsb2NrOmR9fWZ1bmN0aW9uIHl1KGUpe2NvbnN0IHQ9bmV3IE1hcCxuPVtdO2ZvcihsZXQgbz0wO288ZS5sZW5ndGg7bysrKXtjb25zdCByPWVbb107aWYoOD09PXIua2V5LnR5cGV8fCFyLmtleS5pc1N0YXRpYyl7bi5wdXNoKHIpO2NvbnRpbnVlfWNvbnN0IHM9ci5rZXkuY29udGVudCxpPXQuZ2V0KHMpO2k/KFwic3R5bGVcIj09PXN8fFwiY2xhc3NcIj09PXN8fHgocykpJiZfdShpLHIpOih0LnNldChzLHIpLG4ucHVzaChyKSl9cmV0dXJuIG59ZnVuY3Rpb24gX3UoZSx0KXsxNz09PWUudmFsdWUudHlwZT9lLnZhbHVlLmVsZW1lbnRzLnB1c2godC52YWx1ZSk6ZS52YWx1ZT1DYyhbZS52YWx1ZSx0LnZhbHVlXSxlLmxvYyl9ZnVuY3Rpb24gYnUoZSl7cmV0dXJuXCJjb21wb25lbnRcIj09PWV8fFwiQ29tcG9uZW50XCI9PT1lfWNvbnN0IFN1PShlLHQpPT57aWYoSmMoZSkpe2NvbnN0e2NoaWxkcmVuOm4sbG9jOm99PWUse3Nsb3ROYW1lOnIsc2xvdFByb3BzOnN9PWZ1bmN0aW9uKGUsdCl7bGV0IG4sbz0nXCJkZWZhdWx0XCInO2NvbnN0IHI9W107Zm9yKGxldCBzPTA7czxlLnByb3BzLmxlbmd0aDtzKyspe2NvbnN0IHQ9ZS5wcm9wc1tzXTs2PT09dC50eXBlP3QudmFsdWUmJihcIm5hbWVcIj09PXQubmFtZT9vPUpTT04uc3RyaW5naWZ5KHQudmFsdWUuY29udGVudCk6KHQubmFtZT16KHQubmFtZSksci5wdXNoKHQpKSk6XCJiaW5kXCI9PT10Lm5hbWUmJnpjKHQuYXJnLFwibmFtZVwiKT90LmV4cCYmKG89dC5leHApOihcImJpbmRcIj09PXQubmFtZSYmdC5hcmcmJlJjKHQuYXJnKSYmKHQuYXJnLmNvbnRlbnQ9eih0LmFyZy5jb250ZW50KSksci5wdXNoKHQpKX1pZihyLmxlbmd0aD4wKXtjb25zdHtwcm9wczpvLGRpcmVjdGl2ZXM6c309dnUoZSx0LHIsITEsITEpO249b31yZXR1cm57c2xvdE5hbWU6byxzbG90UHJvcHM6bn19KGUsdCksaT1bdC5wcmVmaXhJZGVudGlmaWVycz9cIl9jdHguJHNsb3RzXCI6XCIkc2xvdHNcIixyLFwie31cIixcInVuZGVmaW5lZFwiLFwidHJ1ZVwiXTtsZXQgbD0yO3MmJihpWzJdPXMsbD0zKSxuLmxlbmd0aCYmKGlbM109JGMoW10sbiwhMSwhMSxvKSxsPTQpLHQuc2NvcGVJZCYmIXQuc2xvdHRlZCYmKGw9NSksaS5zcGxpY2UobCksZS5jb2RlZ2VuTm9kZT1FYyh0LmhlbHBlcihlYyksaSxvKX19O2NvbnN0IHh1PS9eXFxzKihbXFx3JF9dK3woYXN5bmNcXHMqKT9cXChbXildKj9cXCkpXFxzKj0+fF5cXHMqKGFzeW5jXFxzKyk/ZnVuY3Rpb24oPzpcXHMrW1xcdyRdKyk/XFxzKlxcKC8sQ3U9KGUsdCxuLG8pPT57Y29uc3R7bG9jOnIsbW9kaWZpZXJzOnMsYXJnOml9PWU7bGV0IGw7aWYoND09PWkudHlwZSlpZihpLmlzU3RhdGljKXtsZXQgZT1pLmNvbnRlbnQ7ZS5zdGFydHNXaXRoKFwidnVlOlwiKSYmKGU9YHZub2RlLSR7ZS5zbGljZSg0KX1gKSxsPVRjKEooeihlKSksITAsaS5sb2MpfWVsc2UgbD1OYyhbYCR7bi5oZWxwZXJTdHJpbmcocGMpfShgLGksXCIpXCJdKTtlbHNlIGw9aSxsLmNoaWxkcmVuLnVuc2hpZnQoYCR7bi5oZWxwZXJTdHJpbmcocGMpfShgKSxsLmNoaWxkcmVuLnB1c2goXCIpXCIpO2xldCBjPWUuZXhwO2MmJiFjLmNvbnRlbnQudHJpbSgpJiYoYz12b2lkIDApO2xldCBhPW4uY2FjaGVIYW5kbGVycyYmIWMmJiFuLmluVk9uY2U7aWYoYyl7Y29uc3QgZT1MYyhjLmNvbnRlbnQpLHQ9IShlfHx4dS50ZXN0KGMuY29udGVudCkpLG49Yy5jb250ZW50LmluY2x1ZGVzKFwiO1wiKTsodHx8YSYmZSkmJihjPU5jKFtgJHt0P1wiJGV2ZW50XCI6XCIoLi4uYXJncylcIn0gPT4gJHtuP1wie1wiOlwiKFwifWAsYyxuP1wifVwiOlwiKVwiXSkpfWxldCB1PXtwcm9wczpba2MobCxjfHxUYyhcIigpID0+IHt9XCIsITEscikpXX07cmV0dXJuIG8mJih1PW8odSkpLGEmJih1LnByb3BzWzBdLnZhbHVlPW4uY2FjaGUodS5wcm9wc1swXS52YWx1ZSkpLHUucHJvcHMuZm9yRWFjaCgoZT0+ZS5rZXkuaXNIYW5kbGVyS2V5PSEwKSksdX0sd3U9KGUsdCxuKT0+e2NvbnN0e2V4cDpvLG1vZGlmaWVyczpyLGxvYzpzfT1lLGk9ZS5hcmc7cmV0dXJuIDQhPT1pLnR5cGU/KGkuY2hpbGRyZW4udW5zaGlmdChcIihcIiksaS5jaGlsZHJlbi5wdXNoKCcpIHx8IFwiXCInKSk6aS5pc1N0YXRpY3x8KGkuY29udGVudD1gJHtpLmNvbnRlbnR9IHx8IFwiXCJgKSxyLmluY2x1ZGVzKFwiY2FtZWxcIikmJig0PT09aS50eXBlP2kuY29udGVudD1pLmlzU3RhdGljP3ooaS5jb250ZW50KTpgJHtuLmhlbHBlclN0cmluZyhhYyl9KCR7aS5jb250ZW50fSlgOihpLmNoaWxkcmVuLnVuc2hpZnQoYCR7bi5oZWxwZXJTdHJpbmcoYWMpfShgKSxpLmNoaWxkcmVuLnB1c2goXCIpXCIpKSksbi5pblNTUnx8KHIuaW5jbHVkZXMoXCJwcm9wXCIpJiZrdShpLFwiLlwiKSxyLmluY2x1ZGVzKFwiYXR0clwiKSYma3UoaSxcIl5cIikpLCFvfHw0PT09by50eXBlJiYhby5jb250ZW50LnRyaW0oKT97cHJvcHM6W2tjKGksVGMoXCJcIiwhMCxzKSldfTp7cHJvcHM6W2tjKGksbyldfX0sa3U9KGUsdCk9Pns0PT09ZS50eXBlP2UuY29udGVudD1lLmlzU3RhdGljP3QrZS5jb250ZW50OmBcXGAke3R9XFwkeyR7ZS5jb250ZW50fX1cXGBgOihlLmNoaWxkcmVuLnVuc2hpZnQoYCcke3R9JyArIChgKSxlLmNoaWxkcmVuLnB1c2goXCIpXCIpKX0sVHU9KGUsdCk9PntpZigwPT09ZS50eXBlfHwxPT09ZS50eXBlfHwxMT09PWUudHlwZXx8MTA9PT1lLnR5cGUpcmV0dXJuKCk9Pntjb25zdCBuPWUuY2hpbGRyZW47bGV0IG8scj0hMTtmb3IobGV0IGU9MDtlPG4ubGVuZ3RoO2UrKyl7Y29uc3QgdD1uW2VdO2lmKEtjKHQpKXtyPSEwO2ZvcihsZXQgcj1lKzE7cjxuLmxlbmd0aDtyKyspe2NvbnN0IHM9bltyXTtpZighS2Mocykpe289dm9pZCAwO2JyZWFrfW98fChvPW5bZV09TmMoW3RdLHQubG9jKSksby5jaGlsZHJlbi5wdXNoKFwiICsgXCIscyksbi5zcGxpY2UociwxKSxyLS19fX1pZihyJiYoMSE9PW4ubGVuZ3RofHwwIT09ZS50eXBlJiYoMSE9PWUudHlwZXx8MCE9PWUudGFnVHlwZXx8ZS5wcm9wcy5maW5kKChlPT43PT09ZS50eXBlJiYhdC5kaXJlY3RpdmVUcmFuc2Zvcm1zW2UubmFtZV0pKSkpKWZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKXtjb25zdCBvPW5bZV07aWYoS2Mobyl8fDg9PT1vLnR5cGUpe2NvbnN0IHI9W107Mj09PW8udHlwZSYmXCIgXCI9PT1vLmNvbnRlbnR8fHIucHVzaChvKSx0LnNzcnx8MCE9PUZhKG8sdCl8fHIucHVzaChcIjFcIiksbltlXT17dHlwZToxMixjb250ZW50Om8sbG9jOm8ubG9jLGNvZGVnZW5Ob2RlOkVjKHQuaGVscGVyKEtsKSxyKX19fX19LE51PW5ldyBXZWFrU2V0LEV1PShlLHQpPT57aWYoMT09PWUudHlwZSYmSGMoZSxcIm9uY2VcIiwhMCkpe2lmKE51LmhhcyhlKXx8dC5pblZPbmNlKXJldHVybjtyZXR1cm4gTnUuYWRkKGUpLHQuaW5WT25jZT0hMCx0LmhlbHBlcihmYyksKCk9Pnt0LmluVk9uY2U9ITE7Y29uc3QgZT10LmN1cnJlbnROb2RlO2UuY29kZWdlbk5vZGUmJihlLmNvZGVnZW5Ob2RlPXQuY2FjaGUoZS5jb2RlZ2VuTm9kZSwhMCkpfX19LCR1PShlLHQsbik9Pntjb25zdHtleHA6byxhcmc6cn09ZTtpZighbylyZXR1cm4gT3UoKTtjb25zdCBzPW8ubG9jLnNvdXJjZSxpPTQ9PT1vLnR5cGU/by5jb250ZW50OnM7aWYoIWkudHJpbSgpfHwhTGMoaSkpcmV0dXJuIE91KCk7Y29uc3QgbD1yfHxUYyhcIm1vZGVsVmFsdWVcIiwhMCksYz1yP1JjKHIpP2BvblVwZGF0ZToke3IuY29udGVudH1gOk5jKFsnXCJvblVwZGF0ZTpcIiArICcscl0pOlwib25VcGRhdGU6bW9kZWxWYWx1ZVwiO2xldCBhO2E9TmMoW2Ake24uaXNUUz9cIigkZXZlbnQ6IGFueSlcIjpcIiRldmVudFwifSA9PiAoKGAsbyxcIikgPSAkZXZlbnQpXCJdKTtjb25zdCB1PVtrYyhsLGUuZXhwKSxrYyhjLGEpXTtpZihlLm1vZGlmaWVycy5sZW5ndGgmJjE9PT10LnRhZ1R5cGUpe2NvbnN0IHQ9ZS5tb2RpZmllcnMubWFwKChlPT4oTWMoZSk/ZTpKU09OLnN0cmluZ2lmeShlKSkrXCI6IHRydWVcIikpLmpvaW4oXCIsIFwiKSxuPXI/UmMocik/YCR7ci5jb250ZW50fU1vZGlmaWVyc2A6TmMoW3IsJyArIFwiTW9kaWZpZXJzXCInXSk6XCJtb2RlbE1vZGlmaWVyc1wiO3UucHVzaChrYyhuLFRjKGB7ICR7dH0gfWAsITEsZS5sb2MsMikpKX1yZXR1cm4gT3UodSl9O2Z1bmN0aW9uIE91KGU9W10pe3JldHVybntwcm9wczplfX1jb25zdCBSdT1uZXcgV2Vha1NldCxGdT0oZSx0KT0+e2lmKDE9PT1lLnR5cGUpe2NvbnN0IG49SGMoZSxcIm1lbW9cIik7aWYoIW58fFJ1LmhhcyhlKSlyZXR1cm47cmV0dXJuIFJ1LmFkZChlKSwoKT0+e2NvbnN0IG89ZS5jb2RlZ2VuTm9kZXx8dC5jdXJyZW50Tm9kZS5jb2RlZ2VuTm9kZTtvJiYxMz09PW8udHlwZSYmKDEhPT1lLnRhZ1R5cGUmJm5hKG8sdCksZS5jb2RlZ2VuTm9kZT1FYyh0LmhlbHBlcih5YyksW24uZXhwLCRjKHZvaWQgMCxvKSxcIl9jYWNoZVwiLFN0cmluZyh0LmNhY2hlZCsrKV0pKX19fTtmdW5jdGlvbiBQdShlLHQ9e30pe2NvbnN0IG49dC5vbkVycm9yfHxGbCxvPVwibW9kdWxlXCI9PT10Lm1vZGU7ITA9PT10LnByZWZpeElkZW50aWZpZXJzP24oQWwoNDYpKTpvJiZuKEFsKDQ3KSk7dC5jYWNoZUhhbmRsZXJzJiZuKEFsKDQ4KSksdC5zY29wZUlkJiYhbyYmbihBbCg0OSkpO2NvbnN0IHI9UChlKT9pYShlLHQpOmUsW3MsaV09W1tFdSxaYSxGdSx0dSxTdSxndSxhdSxUdV0se29uOkN1LGJpbmQ6d3UsbW9kZWw6JHV9XTtyZXR1cm4gTGEocix3KHt9LHQse3ByZWZpeElkZW50aWZpZXJzOmZhbHNlLG5vZGVUcmFuc2Zvcm1zOlsuLi5zLC4uLnQubm9kZVRyYW5zZm9ybXN8fFtdXSxkaXJlY3RpdmVUcmFuc2Zvcm1zOncoe30saSx0LmRpcmVjdGl2ZVRyYW5zZm9ybXN8fHt9KX0pKSxIYShyLHcoe30sdCx7cHJlZml4SWRlbnRpZmllcnM6ZmFsc2V9KSl9Y29uc3QgQXU9U3ltYm9sKFwiXCIpLE11PVN5bWJvbChcIlwiKSxWdT1TeW1ib2woXCJcIiksSXU9U3ltYm9sKFwiXCIpLEJ1PVN5bWJvbChcIlwiKSxMdT1TeW1ib2woXCJcIiksanU9U3ltYm9sKFwiXCIpLFV1PVN5bWJvbChcIlwiKSxEdT1TeW1ib2woXCJcIiksSHU9U3ltYm9sKFwiXCIpO3ZhciBXdTtsZXQgenU7V3U9e1tBdV06XCJ2TW9kZWxSYWRpb1wiLFtNdV06XCJ2TW9kZWxDaGVja2JveFwiLFtWdV06XCJ2TW9kZWxUZXh0XCIsW0l1XTpcInZNb2RlbFNlbGVjdFwiLFtCdV06XCJ2TW9kZWxEeW5hbWljXCIsW0x1XTpcIndpdGhNb2RpZmllcnNcIixbanVdOlwid2l0aEtleXNcIixbVXVdOlwidlNob3dcIixbRHVdOlwiVHJhbnNpdGlvblwiLFtIdV06XCJUcmFuc2l0aW9uR3JvdXBcIn0sT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhXdSkuZm9yRWFjaCgoZT0+e2JjW2VdPVd1W2VdfSkpO2NvbnN0IEt1PWUoXCJzdHlsZSxpZnJhbWUsc2NyaXB0LG5vc2NyaXB0XCIsITApLEd1PXtpc1ZvaWRUYWc6Zixpc05hdGl2ZVRhZzplPT51KGUpfHxwKGUpLGlzUHJlVGFnOmU9PlwicHJlXCI9PT1lLGRlY29kZUVudGl0aWVzOmZ1bmN0aW9uKGUsdD0hMSl7cmV0dXJuIHp1fHwoenU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksdD8oenUuaW5uZXJIVE1MPWA8ZGl2IGZvbz1cIiR7ZS5yZXBsYWNlKC9cIi9nLFwiJnF1b3Q7XCIpfVwiPmAsenUuY2hpbGRyZW5bMF0uZ2V0QXR0cmlidXRlKFwiZm9vXCIpKTooenUuaW5uZXJIVE1MPWUsenUudGV4dENvbnRlbnQpfSxpc0J1aWx0SW5Db21wb25lbnQ6ZT0+RmMoZSxcIlRyYW5zaXRpb25cIik/RHU6RmMoZSxcIlRyYW5zaXRpb25Hcm91cFwiKT9IdTp2b2lkIDAsZ2V0TmFtZXNwYWNlKGUsdCl7bGV0IG49dD90Lm5zOjA7aWYodCYmMj09PW4paWYoXCJhbm5vdGF0aW9uLXhtbFwiPT09dC50YWcpe2lmKFwic3ZnXCI9PT1lKXJldHVybiAxO3QucHJvcHMuc29tZSgoZT0+Nj09PWUudHlwZSYmXCJlbmNvZGluZ1wiPT09ZS5uYW1lJiZudWxsIT1lLnZhbHVlJiYoXCJ0ZXh0L2h0bWxcIj09PWUudmFsdWUuY29udGVudHx8XCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIj09PWUudmFsdWUuY29udGVudCkpKSYmKG49MCl9ZWxzZS9ebSg/Oltpb25zXXx0ZXh0KSQvLnRlc3QodC50YWcpJiZcIm1nbHlwaFwiIT09ZSYmXCJtYWxpZ25tYXJrXCIhPT1lJiYobj0wKTtlbHNlIHQmJjE9PT1uJiYoXCJmb3JlaWduT2JqZWN0XCIhPT10LnRhZyYmXCJkZXNjXCIhPT10LnRhZyYmXCJ0aXRsZVwiIT09dC50YWd8fChuPTApKTtpZigwPT09bil7aWYoXCJzdmdcIj09PWUpcmV0dXJuIDE7aWYoXCJtYXRoXCI9PT1lKXJldHVybiAyfXJldHVybiBufSxnZXRUZXh0TW9kZSh7dGFnOmUsbnM6dH0pe2lmKDA9PT10KXtpZihcInRleHRhcmVhXCI9PT1lfHxcInRpdGxlXCI9PT1lKXJldHVybiAxO2lmKEt1KGUpKXJldHVybiAyfXJldHVybiAwfX0scXU9KGUsdCk9Pntjb25zdCBuPWwoZSk7cmV0dXJuIFRjKEpTT04uc3RyaW5naWZ5KG4pLCExLHQsMyl9O2NvbnN0IEp1PWUoXCJwYXNzaXZlLG9uY2UsY2FwdHVyZVwiKSxZdT1lKFwic3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCxtaWRkbGVcIiksWnU9ZShcImxlZnQscmlnaHRcIiksUXU9ZShcIm9ua2V5dXAsb25rZXlkb3duLG9ua2V5cHJlc3NcIiwhMCksWHU9KGUsdCk9PlJjKGUpJiZcIm9uY2xpY2tcIj09PWUuY29udGVudC50b0xvd2VyQ2FzZSgpP1RjKHQsITApOjQhPT1lLnR5cGU/TmMoW1wiKFwiLGUsYCkgPT09IFwib25DbGlja1wiID8gXCIke3R9XCIgOiAoYCxlLFwiKVwiXSk6ZSxlcD0oZSx0KT0+ezEhPT1lLnR5cGV8fDAhPT1lLnRhZ1R5cGV8fFwic2NyaXB0XCIhPT1lLnRhZyYmXCJzdHlsZVwiIT09ZS50YWd8fHQucmVtb3ZlTm9kZSgpfSx0cD1bZT0+ezE9PT1lLnR5cGUmJmUucHJvcHMuZm9yRWFjaCgoKHQsbik9Pns2PT09dC50eXBlJiZcInN0eWxlXCI9PT10Lm5hbWUmJnQudmFsdWUmJihlLnByb3BzW25dPXt0eXBlOjcsbmFtZTpcImJpbmRcIixhcmc6VGMoXCJzdHlsZVwiLCEwLHQubG9jKSxleHA6cXUodC52YWx1ZS5jb250ZW50LHQubG9jKSxtb2RpZmllcnM6W10sbG9jOnQubG9jfSl9KSl9XSxucD17Y2xvYWs6KCk9Pih7cHJvcHM6W119KSxodG1sOihlLHQsbik9Pntjb25zdHtleHA6byxsb2M6cn09ZTtyZXR1cm4gdC5jaGlsZHJlbi5sZW5ndGgmJih0LmNoaWxkcmVuLmxlbmd0aD0wKSx7cHJvcHM6W2tjKFRjKFwiaW5uZXJIVE1MXCIsITAsciksb3x8VGMoXCJcIiwhMCkpXX19LHRleHQ6KGUsdCxuKT0+e2NvbnN0e2V4cDpvLGxvYzpyfT1lO3JldHVybiB0LmNoaWxkcmVuLmxlbmd0aCYmKHQuY2hpbGRyZW4ubGVuZ3RoPTApLHtwcm9wczpba2MoVGMoXCJ0ZXh0Q29udGVudFwiLCEwKSxvP0ZhKG8sbik+MD9vOkVjKG4uaGVscGVyU3RyaW5nKG5jKSxbb10scik6VGMoXCJcIiwhMCkpXX19LG1vZGVsOihlLHQsbik9Pntjb25zdCBvPSR1KGUsdCxuKTtpZighby5wcm9wcy5sZW5ndGh8fDE9PT10LnRhZ1R5cGUpcmV0dXJuIG87Y29uc3R7dGFnOnJ9PXQscz1uLmlzQ3VzdG9tRWxlbWVudChyKTtpZihcImlucHV0XCI9PT1yfHxcInRleHRhcmVhXCI9PT1yfHxcInNlbGVjdFwiPT09cnx8cyl7bGV0IGU9VnUsaT0hMTtpZihcImlucHV0XCI9PT1yfHxzKXtjb25zdCBuPVdjKHQsXCJ0eXBlXCIpO2lmKG4pe2lmKDc9PT1uLnR5cGUpZT1CdTtlbHNlIGlmKG4udmFsdWUpc3dpdGNoKG4udmFsdWUuY29udGVudCl7Y2FzZVwicmFkaW9cIjplPUF1O2JyZWFrO2Nhc2VcImNoZWNrYm94XCI6ZT1NdTticmVhaztjYXNlXCJmaWxlXCI6aT0hMH19ZWxzZShmdW5jdGlvbihlKXtyZXR1cm4gZS5wcm9wcy5zb21lKChlPT4hKDchPT1lLnR5cGV8fFwiYmluZFwiIT09ZS5uYW1lfHxlLmFyZyYmND09PWUuYXJnLnR5cGUmJmUuYXJnLmlzU3RhdGljKSkpfSkodCkmJihlPUJ1KX1lbHNlXCJzZWxlY3RcIj09PXImJihlPUl1KTtpfHwoby5uZWVkUnVudGltZT1uLmhlbHBlcihlKSl9cmV0dXJuIG8ucHJvcHM9by5wcm9wcy5maWx0ZXIoKGU9PiEoND09PWUua2V5LnR5cGUmJlwibW9kZWxWYWx1ZVwiPT09ZS5rZXkuY29udGVudCkpKSxvfSxvbjooZSx0LG4pPT5DdShlLDAsbiwodD0+e2NvbnN0e21vZGlmaWVyczpvfT1lO2lmKCFvLmxlbmd0aClyZXR1cm4gdDtsZXR7a2V5OnIsdmFsdWU6c309dC5wcm9wc1swXTtjb25zdHtrZXlNb2RpZmllcnM6aSxub25LZXlNb2RpZmllcnM6bCxldmVudE9wdGlvbk1vZGlmaWVyczpjfT0oKGUsdCxuLG8pPT57Y29uc3Qgcj1bXSxzPVtdLGk9W107Zm9yKGxldCBsPTA7bDx0Lmxlbmd0aDtsKyspe2NvbnN0IG49dFtsXTtKdShuKT9pLnB1c2gobik6WnUobik/UmMoZSk/UXUoZS5jb250ZW50KT9yLnB1c2gobik6cy5wdXNoKG4pOihyLnB1c2gobikscy5wdXNoKG4pKTpZdShuKT9zLnB1c2gobik6ci5wdXNoKG4pfXJldHVybntrZXlNb2RpZmllcnM6cixub25LZXlNb2RpZmllcnM6cyxldmVudE9wdGlvbk1vZGlmaWVyczppfX0pKHIsbyk7aWYobC5pbmNsdWRlcyhcInJpZ2h0XCIpJiYocj1YdShyLFwib25Db250ZXh0bWVudVwiKSksbC5pbmNsdWRlcyhcIm1pZGRsZVwiKSYmKHI9WHUocixcIm9uTW91c2V1cFwiKSksbC5sZW5ndGgmJihzPUVjKG4uaGVscGVyKEx1KSxbcyxKU09OLnN0cmluZ2lmeShsKV0pKSwhaS5sZW5ndGh8fFJjKHIpJiYhUXUoci5jb250ZW50KXx8KHM9RWMobi5oZWxwZXIoanUpLFtzLEpTT04uc3RyaW5naWZ5KGkpXSkpLGMubGVuZ3RoKXtjb25zdCBlPWMubWFwKHEpLmpvaW4oXCJcIik7cj1SYyhyKT9UYyhgJHtyLmNvbnRlbnR9JHtlfWAsITApOk5jKFtcIihcIixyLGApICsgXCIke2V9XCJgXSl9cmV0dXJue3Byb3BzOltrYyhyLHMpXX19KSksc2hvdzooZSx0LG4pPT4oe3Byb3BzOltdLG5lZWRSdW50aW1lOm4uaGVscGVyKFV1KX0pfTtjb25zdCBvcD1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIHJwKGUsdCl7aWYoIVAoZSkpe2lmKCFlLm5vZGVUeXBlKXJldHVybiBfO2U9ZS5pbm5lckhUTUx9Y29uc3Qgbj1lLG89b3Bbbl07aWYobylyZXR1cm4gbztpZihcIiNcIj09PWVbMF0pe2NvbnN0IHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTtlPXQ/dC5pbm5lckhUTUw6XCJcIn1jb25zdHtjb2RlOnJ9PWZ1bmN0aW9uKGUsdD17fSl7cmV0dXJuIFB1KGUsdyh7fSxHdSx0LHtub2RlVHJhbnNmb3JtczpbZXAsLi4udHAsLi4udC5ub2RlVHJhbnNmb3Jtc3x8W11dLGRpcmVjdGl2ZVRyYW5zZm9ybXM6dyh7fSxucCx0LmRpcmVjdGl2ZVRyYW5zZm9ybXN8fHt9KSx0cmFuc2Zvcm1Ib2lzdDpudWxsfSkpfShlLHcoe2hvaXN0U3RhdGljOiEwLG9uRXJyb3I6dm9pZCAwLG9uV2FybjpffSx0KSkscz1uZXcgRnVuY3Rpb24oXCJWdWVcIixyKShSbCk7cmV0dXJuIHMuX3JjPSEwLG9wW25dPXN9RnMocnApO2V4cG9ydHtpbyBhcyBCYXNlVHJhbnNpdGlvbixLciBhcyBDb21tZW50LG5lIGFzIEVmZmVjdFNjb3BlLFdyIGFzIEZyYWdtZW50LF9vIGFzIEtlZXBBbGl2ZSxnZSBhcyBSZWFjdGl2ZUVmZmVjdCxHciBhcyBTdGF0aWMsVW4gYXMgU3VzcGVuc2UsSHIgYXMgVGVsZXBvcnQsenIgYXMgVGV4dCxGaSBhcyBUcmFuc2l0aW9uLFlpIGFzIFRyYW5zaXRpb25Hcm91cCxOaSBhcyBWdWVFbGVtZW50LFp0IGFzIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLFl0IGFzIGNhbGxXaXRoRXJyb3JIYW5kbGluZyx6IGFzIGNhbWVsaXplLHEgYXMgY2FwaXRhbGl6ZSxmcyBhcyBjbG9uZVZOb2RlLGlpIGFzIGNvbXBhdFV0aWxzLHJwIGFzIGNvbXBpbGUsanMgYXMgY29tcHV0ZWQsTmwgYXMgY3JlYXRlQXBwLG5zIGFzIGNyZWF0ZUJsb2NrLG1zIGFzIGNyZWF0ZUNvbW1lbnRWTm9kZSx0cyBhcyBjcmVhdGVFbGVtZW50QmxvY2ssYXMgYXMgY3JlYXRlRWxlbWVudFZOb2RlLE1yIGFzIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLEpzIGFzIGNyZWF0ZVByb3BzUmVzdFByb3h5LEFyIGFzIGNyZWF0ZVJlbmRlcmVyLEVsIGFzIGNyZWF0ZVNTUkFwcCxxbyBhcyBjcmVhdGVTbG90cyxocyBhcyBjcmVhdGVTdGF0aWNWTm9kZSxkcyBhcyBjcmVhdGVUZXh0Vk5vZGUsdXMgYXMgY3JlYXRlVk5vZGUsVXQgYXMgY3VzdG9tUmVmLGdvIGFzIGRlZmluZUFzeW5jQ29tcG9uZW50LGhvIGFzIGRlZmluZUNvbXBvbmVudCx3aSBhcyBkZWZpbmVDdXN0b21FbGVtZW50LERzIGFzIGRlZmluZUVtaXRzLEhzIGFzIGRlZmluZUV4cG9zZSxVcyBhcyBkZWZpbmVQcm9wcyxraSBhcyBkZWZpbmVTU1JDdXN0b21FbGVtZW50LHhuIGFzIGRldnRvb2xzLHllIGFzIGVmZmVjdCxvZSBhcyBlZmZlY3RTY29wZSx3cyBhcyBnZXRDdXJyZW50SW5zdGFuY2Usc2UgYXMgZ2V0Q3VycmVudFNjb3BlLGZvIGFzIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbixwcyBhcyBndWFyZFJlYWN0aXZlUHJvcHMsWnMgYXMgaCxRdCBhcyBoYW5kbGVFcnJvcixUbCBhcyBoeWRyYXRlLGVpIGFzIGluaXRDdXN0b21Gb3JtYXR0ZXIsT2wgYXMgaW5pdERpcmVjdGl2ZXNGb3JTU1IscW4gYXMgaW5qZWN0LG5pIGFzIGlzTWVtb1NhbWUsd3QgYXMgaXNQcm94eSxTdCBhcyBpc1JlYWN0aXZlLHh0IGFzIGlzUmVhZG9ubHksUnQgYXMgaXNSZWYsUHMgYXMgaXNSdW50aW1lT25seSxDdCBhcyBpc1NoYWxsb3csb3MgYXMgaXNWTm9kZSxUdCBhcyBtYXJrUmF3LHFzIGFzIG1lcmdlRGVmYXVsdHMsX3MgYXMgbWVyZ2VQcm9wcyxkbiBhcyBuZXh0VGljayxjIGFzIG5vcm1hbGl6ZUNsYXNzLGEgYXMgbm9ybWFsaXplUHJvcHMsciBhcyBub3JtYWxpemVTdHlsZSxTbyBhcyBvbkFjdGl2YXRlZCwkbyBhcyBvbkJlZm9yZU1vdW50LFBvIGFzIG9uQmVmb3JlVW5tb3VudCxSbyBhcyBvbkJlZm9yZVVwZGF0ZSx4byBhcyBvbkRlYWN0aXZhdGVkLEJvIGFzIG9uRXJyb3JDYXB0dXJlZCxPbyBhcyBvbk1vdW50ZWQsSW8gYXMgb25SZW5kZXJUcmFja2VkLFZvIGFzIG9uUmVuZGVyVHJpZ2dlcmVkLGllIGFzIG9uU2NvcGVEaXNwb3NlLE1vIGFzIG9uU2VydmVyUHJlZmV0Y2gsQW8gYXMgb25Vbm1vdW50ZWQsRm8gYXMgb25VcGRhdGVkLFlyIGFzIG9wZW5CbG9jayxGbiBhcyBwb3BTY29wZUlkLEduIGFzIHByb3ZpZGUsTHQgYXMgcHJveHlSZWZzLFJuIGFzIHB1c2hTY29wZUlkLHZuIGFzIHF1ZXVlUG9zdEZsdXNoQ2IsZ3QgYXMgcmVhY3RpdmUseXQgYXMgcmVhZG9ubHksRnQgYXMgcmVmLEZzIGFzIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyLGtsIGFzIHJlbmRlcixHbyBhcyByZW5kZXJMaXN0LEpvIGFzIHJlbmRlclNsb3QsVW8gYXMgcmVzb2x2ZUNvbXBvbmVudCxXbyBhcyByZXNvbHZlRGlyZWN0aXZlLEhvIGFzIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LHNpIGFzIHJlc29sdmVGaWx0ZXIsY28gYXMgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyxYciBhcyBzZXRCbG9ja1RyYWNraW5nLHduIGFzIHNldERldnRvb2xzSG9vayxwbyBhcyBzZXRUcmFuc2l0aW9uSG9va3MsdnQgYXMgc2hhbGxvd1JlYWN0aXZlLF90IGFzIHNoYWxsb3dSZWFkb25seSxQdCBhcyBzaGFsbG93UmVmLFFzIGFzIHNzckNvbnRleHRLZXkscmkgYXMgc3NyVXRpbHMsX2UgYXMgc3RvcCxtIGFzIHRvRGlzcGxheVN0cmluZyxKIGFzIHRvSGFuZGxlcktleSxabyBhcyB0b0hhbmRsZXJzLGt0IGFzIHRvUmF3LFd0IGFzIHRvUmVmLER0IGFzIHRvUmVmcyxzcyBhcyB0cmFuc2Zvcm1WTm9kZUFyZ3MsVnQgYXMgdHJpZ2dlclJlZixJdCBhcyB1bnJlZixLcyBhcyB1c2VBdHRycyxFaSBhcyB1c2VDc3NNb2R1bGUsJGkgYXMgdXNlQ3NzVmFycyxYcyBhcyB1c2VTU1JDb250ZXh0LHpzIGFzIHVzZVNsb3RzLHJvIGFzIHVzZVRyYW5zaXRpb25TdGF0ZSxybCBhcyB2TW9kZWxDaGVja2JveCxwbCBhcyB2TW9kZWxEeW5hbWljLGlsIGFzIHZNb2RlbFJhZGlvLGxsIGFzIHZNb2RlbFNlbGVjdCxvbCBhcyB2TW9kZWxUZXh0LHlsIGFzIHZTaG93LG9pIGFzIHZlcnNpb24sR3QgYXMgd2FybixYbiBhcyB3YXRjaCxKbiBhcyB3YXRjaEVmZmVjdCxZbiBhcyB3YXRjaFBvc3RFZmZlY3QsWm4gYXMgd2F0Y2hTeW5jRWZmZWN0LFlzIGFzIHdpdGhBc3luY0NvbnRleHQsQW4gYXMgd2l0aEN0eCxXcyBhcyB3aXRoRGVmYXVsdHMsTG8gYXMgd2l0aERpcmVjdGl2ZXMsdmwgYXMgd2l0aEtleXMsdGkgYXMgd2l0aE1lbW8sbWwgYXMgd2l0aE1vZGlmaWVycyxQbiBhcyB3aXRoU2NvcGVJZH07XG4iLCJpbXBvcnQgeyBkb19waWUgfSBmcm9tICcuL2NoYXJ0cy9waWUtY2hhcnQnXG5cbndpbmRvdy5kb19waWUgPSBkb19waWVcblxuaW1wb3J0IHsgQ2hhcnRXaWRnZXQsIFdpZGdldFV0aWxzIH0gZnJvbSAnLi93aWRnZXQvd2lkZ2V0cydcbmltcG9ydCAnLi9zaWRlYmFyL3NpZGViYXInXG5pbXBvcnQgeyBudG9wQ2hhcnRBcGV4IH0gZnJvbSBcIi4vbnRvcENoYXJ0QXBleFwiO1xuXG4vKiBkYXRhdGFibGVzLm5ldCBleHRlbnNpb25zICovXG5pbXBvcnQgeyBEYXRhVGFibGVGaWx0ZXJzTWVudSwgRGF0YVRhYmxlVXRpbHMsIERhdGFUYWJsZVJlbmRlcnMgfSBmcm9tICcuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHMuanMnXG5cbndpbmRvdy5EYXRhVGFibGVVdGlscyA9IERhdGFUYWJsZVV0aWxzXG53aW5kb3cuRGF0YVRhYmxlRmlsdGVyc01lbnUgPSBEYXRhVGFibGVGaWx0ZXJzTWVudVxud2luZG93LkRhdGFUYWJsZVJlbmRlcnMgPSBEYXRhVGFibGVSZW5kZXJzXG5cbndpbmRvdy5DaGFydFdpZGdldCA9IENoYXJ0V2lkZ2V0O1xud2luZG93LldpZGdldFV0aWxzID0gV2lkZ2V0VXRpbHM7XG53aW5kb3cubnRvcENoYXJ0QXBleCA9IG50b3BDaGFydEFwZXg7XG4iLCIvKiBIYW5kbGUgQmxvZyBOb3RpZmljYXRpb25zICovXG4kKGZ1bmN0aW9uICgpIHtcblxuICBmdW5jdGlvbiBibG9nTm90aWZjYXRpb25DbGljayhlKSB7XG5cbiAgICBpZiAoZS50eXBlID09IFwibW91c2Vkb3duXCIgJiYgKGUubWV0YUtleSB8fCBlLmN0cmxLZXkgfHwgZS53aGljaCAhPT0gMikpIHJldHVybjtcblxuICAgIGNvbnN0IGlkID0gJCh0aGlzKS5kYXRhKCdpZCcpO1xuXG4gICAgJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvdXBkYXRlX2Jsb2dfcG9zdHMubHVhYCwge1xuICAgICAgYmxvZ19ub3RpZmljYXRpb25faWQ6IGlkLFxuICAgICAgY3NyZjogd2luZG93Ll9fQkxPR19OT1RJRklDQVRJT05fQ1NSRl9fXG4gICAgfSxcbiAgICAgIChkYXRhKSA9PiB7XG5cbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuXG4gICAgICAgICAgJCh0aGlzKS5vZmYoJ2NsaWNrJykub2ZmKCdtb3VzZWRvd24nKS5hdHRyKCdkYXRhLXJlYWQnLCAndHJ1ZScpLmRhdGEoJ3JlYWQnLCAndHJ1ZScpLmZpbmQoJy5iYWRnZScpLnJlbW92ZSgpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGNvdW50ID0gJChgLmJsb2ctbm90aWZpY2F0aW9uW2RhdGEtcmVhZD0nZmFsc2UnXWApLmxlbmd0aDtcblxuICAgICAgICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAkKCcubm90aWZpY2F0aW9uLWJlbGwnKS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkKCcubm90aWZpY2F0aW9uLWJlbGwnKS5odG1sKGNvdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLy8gb24gdGhlIG5vdGlmaWNhdGlvbnMgbm90IHlldCByZWFkIGRlbGVnYXRlIHRoZSBjbGljayBldmVudFxuICAkKGAuYmxvZy1ub3RpZmljYXRpb25bZGF0YS1yZWFkPSdmYWxzZSddYCkub24oJ2NsaWNrJywgYmxvZ05vdGlmY2F0aW9uQ2xpY2spLm9uKCdtb3VzZWRvd24nLCBibG9nTm90aWZjYXRpb25DbGljayk7XG59KTsiLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHNjcmlwdD5cbmltcG9ydCB7IGgsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczogWydjb250ZW50J10sXG4gICAgd2F0Y2g6IHtcblx0XCJjb250ZW50XCI6IGZ1bmN0aW9uKHZhbCwgb2xkVmFsKSB7XG5cdCAgICAvLyB0aGlzLiRmb3JjZVVwZGF0ZSgpO1xuXHR9XG4gICAgfSxcbiAgICByZW5kZXIoKSB7XG5cdHJldHVybiBoKHRoaXMuJHByb3BzLmNvbnRlbnQpO1xuICAgIH1cbn07XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48IS0tIFVzYWdlOiAtLT5cbjwhLS0gICA8RHJvcGRvd24gOmlkPVwiaWRcIiByZWY9XCJkcm9wZG93blwiPiA8XFwhLS0gRHJvcGRvd24gY29sdW1ucyAtXFwtPiAtLT5cbjwhLS0gICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+IC0tPlxuPCEtLSAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leWVcIj48L2k+IC0tPlxuPCEtLSAgICAgPC90ZW1wbGF0ZT4gLS0+XG48IS0tICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+IC0tPlxuPCEtLSAgICAgICA8ZGl2IHYtZm9yPVwiY29sIGluIGNvbHVtbnNfd3JhcFwiIGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiPjxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiBjaGVja2VkPVwiXCIgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJ0b2dnbGUtQmVnaW5cIj4gLS0+XG48IS0tICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cInRvZ2dsZS1CZWdpblwiIHYtaHRtbD1cInByaW50X2h0bWxfY29sdW1uKGNvbC5kYXRhKVwiPiAtLT5cbjwhLS0gICAgICAgICA8L2xhYmVsPiAtLT5cbjwhLS0gICAgICAgPC9kaXY+IC0tPlxuPCEtLSAgICAgPC90ZW1wbGF0ZT4gLS0+XG48IS0tICAgPC9Ecm9wZG93bj4gPFxcIS0tIERyb3Bkb3duIGNvbHVtbnMgLVxcLT4gLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJkcm9wZG93blwiIHJlZj1cImRyb3Bkb3duXCIgc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jaztcIj5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBkcm9wZG93bi10b2dnbGVcIiA6Y2xhc3M9XCJidXR0b25fY2xhc3NfMlwiIDpzdHlsZT1cImJ1dHRvbl9zdHlsZVwiIHR5cGU9XCJidXR0b25cIiA6aWQ9XCJpZFwiIHJlZj1cImRyb3Bkb3duX2J1dHRvblwiICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCI+XG4gICAgPHNsb3QgbmFtZT1cInRpdGxlXCI+PC9zbG90PlxuICA8L2J1dHRvbj5cbiAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIDphcmlhLWxhYmVsbGVkYnk9XCJpZFwiIHN0eWxlPVwiIG1heC1oZWlnaHQ6IDI1cmVtO292ZXJmbG93OmF1dG9cIj5cbiAgICA8IS0tIDxzbG90IG5hbWU9XCJtZW51XCI+PC9zbG90PiAtLT5cblxuICAgIDwhLS0gPGxpIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIHYtZm9yPVwiKG9wdCwgaSkgaW4gb3B0aW9uc1wiIDpyZWY9XCJlbCA9PiB7IG1lbnVbaV0gPSBlbCB9XCI+IC0tPlxuICAgIDwhLS0gICBhc2QgLS0+XG4gICAgICA8IS0tICAgPC9saT4gLS0+XG4gICAgICA8bGkgdi1mb3I9XCIob3B0LCBpKSBpbiBtZW51X29wdGlvbnNcIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIj5cblx0PFZOb2RlIDpjb250ZW50PVwib3B0XCI+PC9WTm9kZT5cbiAgICAgIDwvbGk+XG4gIDwvdWw+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgdXNlU2xvdHMsIHJlbmRlciwgZ2V0Q3VycmVudEluc3RhbmNlLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyByZW5kZXJfY29tcG9uZW50IH0gZnJvbSBcIi4vbnRvcF91dGlscy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBWTm9kZSB9IGZyb20gXCIuL3Z1ZV9ub2RlLnZ1ZVwiO1xuXG5jb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuY29uc3Qgc2xvdHMgPSB1c2VTbG90cygpO1xuXG5jb25zdCBvcHRpb25zID0gcmVmKFtdKTtcbmNvbnN0IG1lbnUgPSByZWYoW10pO1xuY29uc3QgbWVudV9vcHRpb25zID0gcmVmKFtdKTtcbmNvbnN0IGRyb3Bkb3duID0gcmVmKG51bGwpO1xuY29uc3QgZHJvcGRvd25fYnV0dG9uID0gcmVmKG51bGwpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW10pXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgYXV0b19sb2FkOiBCb29sZWFuLFxuICAgIGJ1dHRvbl9jbGFzczogU3RyaW5nLFxuICAgIGJ1dHRvbl9zdHlsZTogU3RyaW5nLFxuICAgIGZfb25fb3BlbjogRnVuY3Rpb24sXG4gICAgZl9vbl9jbG9zZTogRnVuY3Rpb24sXG59KTtcblxubGV0IGRlZmF1bHRfb3ZlcmZsb3cgPSBudWxsO1xub25Nb3VudGVkKCgpID0+IHtcbiAgICBkZWZhdWx0X292ZXJmbG93ID0gXHQkKGRyb3Bkb3duLnZhbHVlKS5wYXJlbnQoKS5jbG9zZXN0KCdkaXYnKS5jc3MoJ292ZXJmbG93Jyk7XG4gICAgaWYgKHByb3BzLmF1dG9fbG9hZCA9PSB0cnVlKSB7XG5cdGxvYWRfbWVudSgpO1xuICAgIH1cbiAgICBsZXQgZWwgPSB7IGRyb3Bkb3duOiBkcm9wZG93bi52YWx1ZSwgZHJvcGRvd25fYnV0dG9uOiBkcm9wZG93bl9idXR0b24udmFsdWUgfTtcbiAgICAkKGRyb3Bkb3duLnZhbHVlKS5vbignc2hvdy5icy5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcblx0JChkcm9wZG93bi52YWx1ZSkucGFyZW50KCkuY2xvc2VzdCgnZGl2JykuY3NzKCdvdmVyZmxvdycsIFwidmlzaWJsZVwiKTtcblx0aWYgKHByb3BzLmZfb25fb3BlbiAhPSBudWxsKSB7XG5cdCAgICBwcm9wcy5mX29uX29wZW4oZWwpO1xuXHR9XG4gICAgfSk7XG4gICAgJChkcm9wZG93bi52YWx1ZSkub24oJ2hpZGUuYnMuZHJvcGRvd24nLCBmdW5jdGlvbiAoKSB7XG5cdCQoZHJvcGRvd24udmFsdWUpLnBhcmVudCgpLmNsb3Nlc3QoJ2RpdicpLmNzcygnb3ZlcmZsb3cnLCBkZWZhdWx0X292ZXJmbG93KTtcblx0aWYgKHByb3BzLmZfb25fY2xvc2UgIT0gbnVsbCkge1xuXHQgICAgcHJvcHMuZl9vbl9jbG9zZShlbCk7XG5cdH1cbiAgICB9KTtcbn0pO1xuXG5jb25zdCBidXR0b25fY2xhc3NfMiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuYnV0dG9uX2NsYXNzICE9IG51bGwpIHsgcmV0dXJuIHByb3BzLmJ1dHRvbl9jbGFzczsgfVxuICAgIHJldHVybiBcImJ0bi1saW5rXCI7XG59KVxuXG5mdW5jdGlvbiBvcGVuX2Nsb3NlKCkge1xuICAgIC8vIGxldCBlbCA9IHsgZHJvcGRvd246IGRyb3Bkb3duLnZhbHVlLCBkcm9wZG93bl9idXR0b246IGRyb3Bkb3duX2J1dHRvbi52YWx1ZSB9O1xuICAgIC8vIGlmICghJChkcm9wZG93bi52YWx1ZSkuZmluZCgnLmRyb3Bkb3duLW1lbnUnKS5pcyhcIjpoaWRkZW5cIikpe1xuICAgIC8vIFx0JChkcm9wZG93bl9idXR0b24udmFsdWUpLmRyb3Bkb3duKCdoaWRlJyk7XG4gICAgLy8gXHQkKGRyb3Bkb3duLnZhbHVlKS5wYXJlbnQoKS5jbG9zZXN0KCdkaXYnKS5jc3MoJ292ZXJmbG93JywgXCJ2aXNpYmxlXCIpO1xuICAgIC8vIFx0JChkcm9wZG93bl9idXR0b24udmFsdWUpLmRyb3Bkb3duKCdzaG93Jyk7XG4gICAgLy8gXHRpZiAocHJvcHMuZl9vbl9vcGVuICE9IG51bGwpIHtcbiAgICAvLyBcdCAgICBwcm9wcy5mX29uX29wZW4oZWwpO1xuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gXHQkKGRyb3Bkb3duLnZhbHVlKS5wYXJlbnQoKS5jbG9zZXN0KCdkaXYnKS5jc3MoJ292ZXJmbG93JywgZGVmYXVsdF9vdmVyZmxvdyk7XG4gICAgLy8gXHQvLyBlbWl0KCdjbG9zZScsIGVsKTtcbiAgICAvLyB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfbWVudSgpIHtcbiAgICBvcHRpb25zLnZhbHVlID0gW107XG4gICAgaWYgKHNsb3RzID09IG51bGwgfHwgc2xvdHMubWVudSA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBtX29wdGlvbnMgPSBzbG90cy5tZW51KCk7XG4gICAgaWYgKG1fb3B0aW9ucyA9PSBudWxsIHx8IG1fb3B0aW9ucy5sZW5ndGggPT0gMCkgeyByZXR1cm47IH1cbiAgICBpZiAodHlwZW9mIG1fb3B0aW9uc1swXS50eXBlID09PSAnc3ltYm9sJykge1xuXHRtX29wdGlvbnMgPSBtX29wdGlvbnNbMF0uY2hpbGRyZW47XG4gICAgfVxuICAgIG1lbnVfb3B0aW9ucy52YWx1ZSA9IFtdO1xuICAgIG1fb3B0aW9ucy5mb3JFYWNoKChvcHRfc2xvdCkgPT4ge1xuXHRsZXQgbm9kZSA9IG9wdF9zbG90O1xuXHRtZW51X29wdGlvbnMudmFsdWUucHVzaChub2RlKTtcblx0Ly8gbGV0IGVsZW1lbnQgPSAkKFwiPGRpdj48L2Rpdj5cIilbMF07XG5cdC8vIGNvbnN0IHsgdk5vZGUsIGVsIH0gPSByZW5kZXJfY29tcG9uZW50KG5vZGUsIHsgYXBwOiAgaW5zdGFuY2U/LmFwcENvbnRleHQ/LmFwcCwgZWxlbWVudCB9KTtcblx0Ly8gb3B0aW9ucy52YWx1ZS5wdXNoKGVsKTtcbiAgICB9KTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIC8vIG5leHRUaWNrKCgpID0+IHtcbiAgICAvLyBcdG9wdGlvbnMudmFsdWUuZm9yRWFjaCgob3B0LCBpKSA9PiB7XG4gICAgLy8gXHQgICAgbGV0IGh0bWxfZWxlbWVudCA9IG1lbnUudmFsdWVbaV07XG4gICAgLy8gXHQgICAgJChodG1sX2VsZW1lbnQpLmFwcGVuZChvcHQpO1xuICAgIC8vIFx0fSk7XG4gICAgLy8gfSk7XG59XG5cbmRlZmluZUV4cG9zZSh7IGxvYWRfbWVudSB9KTtcblxuPC9zY3JpcHQ+XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnXG4qL1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcbmltcG9ydCB7IERhdGFUYWJsZVJlbmRlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4uL3Z1ZS8vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgRm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4vZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkX3RhYmxlKGh0dHBfcHJlZml4LCB0YWJsZV9pZCwgZl9tYXBfY29sdW1ucywgZl9nZXRfZXh0cmFfcGFyYW1zX29iaiwgZl9vbl9nZXRfcm93cykge1xuICAgIGxldCBlcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgIGxldCB0YWJsZV9kZWZfdXJsID0gYCR7aHR0cF9wcmVmaXh9L3RhYmxlc19jb25maWcvJHt0YWJsZV9pZH0uanNvbj9lcG9jaF9lbmQ9JHtlcG9jaF9lbmR9YDtcbiAgICBsZXQgdGFibGVfZGVmID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHRhYmxlX2RlZl91cmwsIG51bGwsIG51bGwsIHRydWUpO1xuICAgIGlmICh0YWJsZV9kZWYgPT0gbnVsbCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaWQ6IHRhYmxlX2lkLFxuXHQgICAgY29sdW1uczogW10sXHQgICAgXG5cdH1cbiAgICB9XG4gICAgaWYgKGZfbWFwX2NvbHVtbnMgIT0gbnVsbCkge1xuXHR0YWJsZV9kZWYuY29sdW1ucyA9IGF3YWl0IGZfbWFwX2NvbHVtbnModGFibGVfZGVmLmNvbHVtbnMpO1xuICAgIH1cbiAgICBjb25zdCB0YWJsZV9jb25maWcgPSB7XG5cdGlkOiB0YWJsZV9pZCxcblx0Y29sdW1uczogdGFibGVfZGVmLmNvbHVtbnMsXG5cdGdldF9yb3dzOiBnZXRfcm93c19mdW5jKHRhYmxlX2RlZiwgZl9nZXRfZXh0cmFfcGFyYW1zX29iaiwgZl9vbl9nZXRfcm93cyksXG5cdGdldF9jb2x1bW5faWQ6IGdldF9jb2x1bW5faWRfZnVuYyh0YWJsZV9kZWYpLFxuXHRwcmludF9jb2x1bW5fbmFtZTogZ2V0X2ZfcHJpbnRfY29sdW1uX25hbWUodGFibGVfZGVmKSxcblx0cHJpbnRfaHRtbF9yb3c6IGdldF9mX3ByaW50X2h0bWxfcm93KHRhYmxlX2RlZiksXG5cdHByaW50X3Z1ZV9ub2RlX3JvdzogZ2V0X2ZfcHJpbnRfdnVlX25vZGVfcm93KHRhYmxlX2RlZiksXG5cdGZfaXNfY29sdW1uX3NvcnRhYmxlOiBnZXRfZl9pc19jb2x1bW5fc29ydGFibGUodGFibGVfZGVmKSxcblx0Zl9nZXRfY29sdW1uX2NsYXNzZXM6IGdldF9mX2dldF9jb2x1bW5fY2xhc3Nlcyh0YWJsZV9kZWYpLFxuXHRmX2dldF9jb2x1bW5fc3R5bGU6IGdldF9mX2dldF9jb2x1bW5fc3R5bGUodGFibGVfZGVmKSxcblx0ZGlzcGxheV9lbXB0eV9yb3dzOiB0YWJsZV9kZWYuZGlzcGxheV9lbXB0eV9yb3dzLFxuXHRlbmFibGVfc2VhcmNoOiB0YWJsZV9kZWYuZW5hYmxlX3NlYXJjaCxcdFxuXHRkZWZhdWx0X3NvcnQ6IHRhYmxlX2RlZi5kZWZhdWx0X3NvcnQsXG5cdHNob3dfYXV0b3JlZnJlc2g6IHRhYmxlX2RlZi5zaG93X2F1dG9yZWZyZXNoLFxuXHRwYWdpbmc6IHRhYmxlX2RlZi5wYWdpbmcsXG4gICAgfTtcbiAgICByZXR1cm4gdGFibGVfY29uZmlnO1xufVxuXG5mdW5jdGlvbiBnZXRfZl9pc19jb2x1bW5fc29ydGFibGUodGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wpID0+IHtcblx0cmV0dXJuIGNvbC5zb3J0YWJsZTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfZl9nZXRfY29sdW1uX2NsYXNzZXModGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wpID0+IHtcblx0bGV0IGNsYXNzZXMgPSBjb2w/LmNsYXNzO1xuXHRpZiAoY2xhc3NlcyAhPSBudWxsKSB7IHJldHVybiBjbGFzc2VzOyB9XG5cdHJldHVybiBbXTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfZl9nZXRfY29sdW1uX3N0eWxlKHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sKSA9PiB7XG5cdGxldCBzdHlsZSA9IGNvbD8uc3R5bGU7XG5cdGlmIChzdHlsZSAhPSBudWxsKSB7IHJldHVybiBzdHlsZTsgfVxuXHRyZXR1cm4gXCJcIjtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfZl9wcmludF92dWVfbm9kZV9yb3codGFibGVfZGVmKSB7XG4gICAgY29uc3QgYXZhaWxhYmxlX3R5cGVzID0ge1xuXHRcImJ1dHRvbl9saXN0XCI6IGdldF9mX3ByaW50X3Zfbm9kZV9idXR0b25zKHRydWUpLFxuXHRcImJ1dHRvbl9hcnJheVwiOiBnZXRfZl9wcmludF92X25vZGVfYnV0dG9ucyhmYWxzZSksXG4gICAgfTtcbiAgICByZXR1cm4gKGNvbCwgcm93LCB2dWVfb2JqLCByZXR1cm5fdHJ1ZV9pZl9kZWYpID0+IHtcblx0aWYgKGNvbC5yZW5kZXJfdl9ub2RlX3R5cGUgPT0gbnVsbCAmJiBjb2wucmVuZGVyX3ZfZnVuYyA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdGlmIChyZXR1cm5fdHJ1ZV9pZl9kZWYgPT0gdHJ1ZSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRpZiAoY29sLnJlbmRlcl92X2Z1bmMgIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIGNvbC5yZW5kZXJfdl9mdW5jKGNvbCwgcm93LCB2dWVfb2JqLCByZXR1cm5fdHJ1ZV9pZl9kZWYpO1xuXHR9XG5cdGxldCBwcmludF92X25vZGVfYnV0dG9ucyA9IGF2YWlsYWJsZV90eXBlc1tjb2wucmVuZGVyX3Zfbm9kZV90eXBlXTtcblx0cmV0dXJuIHByaW50X3Zfbm9kZV9idXR0b25zKGNvbCwgcm93LCB2dWVfb2JqKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfZl9wcmludF9odG1sX3Jvdyh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCwgcm93LCByZXR1cm5fdHJ1ZV9pZl9kZWYpID0+IHtcblx0aWYgKGNvbC5yZW5kZXJfdl9mdW5jICE9IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0aWYgKHJldHVybl90cnVlX2lmX2RlZiA9PSB0cnVlKSB7IHJldHVybiB0cnVlOyB9XG5cblx0bGV0IGRhdGE7XG5cdGlmIChjb2wuZGF0YV9maWVsZCAhPSBudWxsKSB7XG5cdCAgICBkYXRhID0gcm93W2NvbC5kYXRhX2ZpZWxkXTtcblx0fVxuXHRpZiAoY29sLnplcm9faXNfbnVsbCAhPSBudWxsICYmIGRhdGEgIT0gbnVsbCAmJiBkYXRhID09IDApIHtcblx0ICAgIGRhdGEgPSBcIlwiO1xuXHR9XG5cdGlmIChjb2wucmVuZGVyX2dlbmVyaWMgIT0gbnVsbCkge1xuXHQgICAgbGV0IHJlbmRlciA9IERhdGFUYWJsZVJlbmRlcnMuZ2V0Rm9ybWF0R2VuZXJpY0ZpZWxkKGNvbC5yZW5kZXJfZ2VuZXJpYywgY29sLnplcm9faXNfbnVsbCk7XG5cdCAgICByZXR1cm4gcmVuZGVyKGRhdGEsICdkaXNwbGF5Jywgcm93KTtcblx0fVxuXHRpZiAoY29sLnJlbmRlcl9mdW5jICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBjb2wucmVuZGVyX2Z1bmMoZGF0YSwgcm93KTtcblx0fVxuXHRpZiAoY29sLnJlbmRlcl90eXBlICE9IG51bGwpIHtcblx0ICAgIGlmIChGb3JtYXR0ZXJVdGlscy50eXBlc1tjb2wucmVuZGVyX3R5cGVdICE9IG51bGwpIHtcblx0XHRjb2wucmVuZGVyX2Z1bmMgPSBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoY29sLnJlbmRlcl90eXBlKTtcblx0XHRyZXR1cm4gY29sLnJlbmRlcl9mdW5jKGRhdGEpO1xuXHQgICAgfSBlbHNlIGlmIChEYXRhVGFibGVSZW5kZXJzW2NvbC5yZW5kZXJfdHlwZV0gIT0gbnVsbCkge1xuXHRcdHJldHVybiBEYXRhVGFibGVSZW5kZXJzW2NvbC5yZW5kZXJfdHlwZV0oZGF0YSwgJ2Rpc3BsYXknLCByb3csIGNvbC56ZXJvX2lzX251bGwpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR0aHJvdyBgSW4gY29sdW1uICR7Y29sLmRhdGFfZmllbGR9IHJlbmRlcl90eXBlOiAke2NvbC5yZW5kZXJfdHlwZX0gbm90IGZvdW5kYDtcblx0ICAgIH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbiAgICB9O1xufVxuXG4vKiBUaGlzIGZ1bmN0aW9uIGFwcGFyZW50bHkgY3JlYXRlIHRoZSBhY3Rpb24gYnV0dG9ucyAqL1xuZnVuY3Rpb24gZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnMobGlzdF9vcl9hcnJheSkge1xuICAgIHJldHVybiAoY29sLCByb3csIHZ1ZV9vYmopID0+IHtcblx0Y29uc3Qgb25fY2xpY2sgPSAoaWQpID0+IHtcblx0ICAgIHJldHVybiAoZSkgPT4ge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0bGV0IGV2ZW50ID0ge2V2ZW50X2lkOiBpZCwgcm93LCBjb2x9O1xuXHRcdHZ1ZV9vYmouZW1pdCgnY3VzdG9tX2V2ZW50JywgZXZlbnQpO1xuXHQgICAgfVxuXHR9O1xuXHRsZXQgdl9ub2RlcyA9IGNvbC5idXR0b25fZGVmX2FycmF5Lm1hcCgoYl9kZWYpID0+IHtcblx0ICAgIGxldCBhdHRyaWJ1dGVzID0ge307XG5cdCAgICBpZiAoYl9kZWYuYXR0cmlidXRlcyAhPSBudWxsKSB7XG5cdFx0YXR0cmlidXRlcyA9IGJfZGVmLmF0dHJpYnV0ZXM7XG5cdCAgICB9XG5cdCAgICBsZXQgY2xhc3NfYXJyYXkgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShiX2RlZi5jbGFzcyk7XG5cdCAgICBpZiAoYl9kZWYuZl9tYXBfY2xhc3MgIT0gbnVsbCkge1xuXHRcdGNsYXNzX2FycmF5ID0gYl9kZWYuZl9tYXBfY2xhc3MoY2xhc3NfYXJyYXksIHJvdyk7XG5cdCAgICB9XG5cdCAgICBsZXQgX2NsYXNzID0gXCJcIjtcblx0ICAgIGlmIChjbGFzc19hcnJheSAhPSBudWxsICYmIGNsYXNzX2FycmF5Lmxlbmd0aCA+IDApIHtcblx0XHRfY2xhc3MgPSBjbGFzc19hcnJheS5qb2luKFwiIFwiKTtcblx0ICAgIH1cblx0ICAgIGlmIChsaXN0X29yX2FycmF5ID09IGZhbHNlKSB7XG5cdFx0cmV0dXJuIHZ1ZV9vYmouaChcImJ1dHRvblwiLCB7IGNsYXNzOiBgYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5ICR7X2NsYXNzfWAsIHN0eWxlOiBcIm1hcmdpbi1yaWdodDowLjJyZW07XCIsIG9uQ2xpY2s6IG9uX2NsaWNrKGJfZGVmLmV2ZW50X2lkKSwgLi4uYXR0cmlidXRlcyB9LCBbIHZ1ZV9vYmouaChcInNwYW5cIiwgeyBjbGFzczogYl9kZWYuaWNvbiwgc3R5bGU6IFwiXCIsIHRpdGxlOiBfaTE4bihiX2RlZi50aXRsZV9pMThuKX0pLCBdKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2dWVfb2JqLmgoXCJhXCIsIHsgY2xhc3M6IGAke19jbGFzc30gYnRuLXNtYCwgb25DbGljazogb25fY2xpY2soYl9kZWYuZXZlbnRfaWQpLCBzdHlsZTogXCJkaXNwbGF5OmJsb2NrO1wiLCAuLi5hdHRyaWJ1dGVzIH0sIFsgdnVlX29iai5oKFwic3BhblwiLCB7IGNsYXNzOiBiX2RlZi5pY29uLCBzdHlsZTogXCJtYXJnaW4tcmlnaHQ6MC4ycmVtO2N1cnNvcjpwb2ludGVyO1wiIH0pLCBfaTE4bihiX2RlZi50aXRsZV9pMThuKV0pO1xuXHR9KTtcblx0aWYgKGxpc3Rfb3JfYXJyYXkgPT0gdHJ1ZSkge1xuXHQgICAgbGV0IHZfdGl0bGUgPSB2dWVfb2JqLmgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiZmFzIGZhLXNtIGZhLWFsaWduLWp1c3RpZnlcIiB9KTtcblx0ICAgIGxldCBkcm9wZG93biA9ICB2dWVfb2JqLmgoRHJvcGRvd24sIHsgYXV0b19sb2FkOiB0cnVlLCBidXR0b25fc3R5bGU6IFwiXCIsIGJ1dHRvbl9jbGFzczogXCJidG4tc2Vjb25kYXJ5IGJ0bi1zbVwiIH0sIHtcblx0XHR0aXRsZTogKCkgPT4gdl90aXRsZSxcblx0XHRtZW51OiAoKSA9PiB2X25vZGVzLFxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gZHJvcGRvd247XG5cdH1cblx0cmV0dXJuIHZ1ZV9vYmouaChcImRpdlwiLCB7Y2xhc3M6XCJidXR0b24tZ3JvdXBcIn0sIHZfbm9kZXMpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9yb3dzX2Z1bmModGFibGVfZGVmLCBmX2dldF9leHRyYV9wYXJhbXNfb2JqLCBmX29uX2dldF9yb3dzKSB7XG4gICAgbGV0IGZfZ2V0X2NvbHVtbl9pZCA9IGdldF9jb2x1bW5faWRfZnVuYyh0YWJsZV9kZWYpO1xuICAgIHJldHVybiBhc3luYyAoYWN0aXZlX3BhZ2UsIHBlcl9wYWdlLCBjb2x1bW5zX3dyYXAsIG1hcF9zZWFyY2gsIGZpcnN0X2dldF9yb3dzKSA9PiB7XG5cdGxldCBzb3J0X2NvbHVtbiA9IGNvbHVtbnNfd3JhcC5maW5kKChjKSA9PiBjLnNvcnQgIT0gMCk7XG5cdGxldCB2aXNpYmxlX2NvbHVtbnMgPSBjb2x1bW5zX3dyYXAuZmlsdGVyKChjKSA9PiBjLnZpc2libGUgPT0gdHJ1ZSlcblx0ICAgIC5tYXAoKGMpID0+IGZfZ2V0X2NvbHVtbl9pZChjKSkuam9pbihcIixcIik7XG5cdGxldCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBzdGFydDogKGFjdGl2ZV9wYWdlICogcGVyX3BhZ2UpLFxuICAgICAgICAgICAgbGVuZ3RoOiBwZXJfcGFnZSxcblx0ICAgIG1hcF9zZWFyY2gsXG5cdCAgICB2aXNpYmxlX2NvbHVtbnMsXG5cdH07XG5cdGlmIChzb3J0X2NvbHVtbiAhPSBudWxsKSB7XG5cdCAgICBwYXJhbXMuc29ydCA9IGZfZ2V0X2NvbHVtbl9pZChzb3J0X2NvbHVtbi5kYXRhKTtcblx0ICAgIHBhcmFtcy5vcmRlciA9IHNvcnRfY29sdW1uLnNvcnQgPT0gMSA/IFwiYXNjXCIgOiBcImRlc2NcIjtcblx0fVxuXHRpZiAoZl9nZXRfZXh0cmFfcGFyYW1zX29iaiAhPSBudWxsKSB7XG5cdCAgICBsZXQgZXh0cmFfcGFyYW1zID0gZl9nZXRfZXh0cmFfcGFyYW1zX29iaigpO1xuXHQgICAgcGFyYW1zID0geyAuLi5wYXJhbXMsIC4uLmV4dHJhX3BhcmFtcywgfTtcblx0fVxuXHRjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cdGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS8ke3RhYmxlX2RlZi5kYXRhX3VybH0/JHt1cmxfcGFyYW1zfWA7XG5cdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCBudWxsLCBudWxsLCB0cnVlKTtcblx0aWYgKGZfb25fZ2V0X3Jvd3MgIT0gbnVsbCkge1xuXHQgICAgZl9vbl9nZXRfcm93cyhwYXJhbXMpO1xuXHR9XG5cdGxldCByb3dzID0gcmVzLnJzcDtcblx0aWYgKHRhYmxlX2RlZi5yc3BfcmVjb3Jkc19maWVsZCAhPSBudWxsKSB7XG5cdCAgICByb3dzID0gcmVzLnJzcFt0YWJsZV9kZWYucnNwX3JlY29yZHNfZmllbGRdO1xuXHR9XG5cdGxldCBxdWVyeV9pbmZvID0gcmVzLnF1ZXJ5X2luZm87XG5cdGlmICh0YWJsZV9kZWYucnNwX3F1ZXJ5X2luZm9fZmllbGQgIT0gbnVsbCkge1xuXHQgICAgcXVlcnlfaW5mbyA9IHJlcy5yc3BbdGFibGVfZGVmLnJzcF9xdWVyeV9pbmZvX2ZpZWxkXTtcblx0fVxuXHQvLyBmaXggc2VydmVyIHJlc3QgYnVnXG5cdGlmIChyZXMucmVjb3Jkc0ZpbHRlcmVkID4gcmVzLnJlY29yZHNUb3RhbCkge1xuXHQgICAgcmVzLnJlY29yZHNUb3RhbCA9IHJlcy5yZWNvcmRzRmlsdGVyZWQ7XG5cdH1cblx0cmV0dXJuIHsgdG90YWxfcm93czogcmVzLnJlY29yZHNUb3RhbCwgcm93cywgcXVlcnlfaW5mbyB9O1xuXHQvLyByZXR1cm4geyB0b3RhbF9yb3dzOiAxLCByb3dzOiBbcm93c1swXV0sIHF1ZXJ5X2luZm8gfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF9mX3ByaW50X2NvbHVtbl9uYW1lKHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sKSA9PiB7XG5cdGlmIChjb2wudGl0bGVfaTE4biAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gX2kxOG4oY29sLnRpdGxlX2kxOG4pO1xuXHR9XG5cdGlmIChjb2wudGl0bGUgIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIGNvbC50aXRsZTtcblx0fVxuXHRyZXR1cm4gXCJcIjtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfY29sdW1uX2lkX2Z1bmModGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wpID0+IHtcblx0aWYgKGNvbC5pZCAhPSBudWxsKSB7IHJldHVybiBjb2wuaWQ7IH1cblx0aWYgKGNvbC5kYXRhX2ZpZWxkICE9IG51bGwpIHsgcmV0dXJuIGNvbC5kYXRhX2ZpZWxkOyB9XG5cdHJldHVybiB0YWJsZV9kZWYuY29sdW1ucy5maW5kSW5kZXgoKGMpID0+IGMgPT0gY29sKTtcbiAgICB9O1xufVxuXG4vKipcbiAgIEdldCBjb2x1bW5zIGluIG5ldyB0YWJsZSBmb3JtYXQgZnJvbSBvbGQgZGF0YXRhYmxlIGZvcm1hdC5cbiovXG5mdW5jdGlvbiBnZXRfY29sdW1uc19mcm9tX2RhdGF0YWJsZV9jb2x1bW5zKGRhdGF0YWJsZV9jb2x1bW5zX3RpdGxlLCBkYXRhdGFibGVfY29sdW1uc19qcykge1xuICAgIGxldCB0YWJsZV9jb2x1bW5zX2NvbmZpZyA9IGRhdGF0YWJsZV9jb2x1bW5zX2pzLm1hcCgoYywgaW5kZXgpID0+IHtcblx0bGV0IGNvbmZpZyA9IHtcblx0ICAgIGRhdGFfZmllbGQ6IGMuZGF0YSxcblx0ICAgIHRpdGxlOiBkYXRhdGFibGVfY29sdW1uc190aXRsZVtpbmRleF0sXG5cdCAgICBzb3J0YWJsZTogYy5vcmRlcmFibGUgPT0gbnVsbCB8fCBjLm9yZGVyYWJsZSA9PSB0cnVlLFxuXHR9O1xuXHRpZiAoYy5jbGFzc05hbWUgIT0gbnVsbCkge1xuXHQgICAgY29uZmlnLmNsYXNzID0gYy5jbGFzc05hbWUuc3BsaXQoXCIgXCIpO1xuXHR9XG5cdGlmIChjLnJlbmRlciAhPSBudWxsKSB7XG5cdCAgICBjLnJlbmRlcl9mdW5jID0gKGRhdGEsIHJvdykgPT4gYy5yZW5kZXIoZGF0YSwgJ2Rpc3BsYXknLCByb3cpO1xuXHR9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhYmxlX2NvbHVtbnNfY29uZmlnO1xuXG59XG5cbmNvbnN0IHRhYmxlX3V0aWxzID0ge1xuICAgIGdldF9jb2x1bW5zX2Zyb21fZGF0YXRhYmxlX2NvbHVtbnMsXG4gICAgYnVpbGRfdGFibGUsXG59O1xuXG5jb25zdCByZW5kZXJfZnVuY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgIGZvcm1hdFZhbHVlTGFiZWwob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgIC8vICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgLy8gICAgIGxldCBjZWxsID0gb2JqLmxhYmVsO1xuICAgIC8vIFx0aWYgKHplcm9faXNfbnVsbCA9PSB0cnVlICYmIG9iai52YWx1ZSA9PSAwKSB7XG4gICAgLy8gXHQgICAgY2VsbCA9IFwiXCI7XG4gICAgLy8gXHR9XG4gICAgLy8gICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgLy8gICAgIHJldHVybiBjZWxsO1xuICAgIC8vIH1cblxufSgpO1xuXG5leHBvcnQgZGVmYXVsdCB0YWJsZV91dGlscztcbiIsImxldCBmaWx0ZXJzX2NvbnN0X2RpY3QgPSB7fTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X2ZpbHRlcl9jb25zdCh1cmxfcmVxdWVzdCkge1xuICAgIGlmIChmaWx0ZXJzX2NvbnN0X2RpY3RbdXJsX3JlcXVlc3RdID09IG51bGwpIHtcblx0ZmlsdGVyc19jb25zdF9kaWN0W3VybF9yZXF1ZXN0XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgfVxuICAgIGxldCBmaWx0ZXJfY29uc3RzID0gYXdhaXQgZmlsdGVyc19jb25zdF9kaWN0W3VybF9yZXF1ZXN0XTtcbiAgICByZXR1cm4gZmlsdGVyX2NvbnN0cztcbn1cblxuY29uc3QgdGFnX29wZXJhdG9yX2xhYmVsX2RpY3QgPSB7XG4gICAgXCJlcVwiOiBcIj1cIixcbiAgICBcIm5lcVwiOiBcIiE9XCIsXG4gICAgXCJsdFwiOiBcIjxcIixcbiAgICBcImd0XCI6IFwiPlwiLFxuICAgIFwiZ3RlXCI6IFwiPj1cIixcbiAgICBcImx0ZVwiOiBcIjw9XCIsXG4gICAgXCJpblwiOiBcImNvbnRhaW5zXCIsXG4gICAgXCJuaW5cIjogXCJkb2VzIG5vdCBjb250YWluXCJcbn07XG5cbmNvbnN0IGxvYWRfZmlsdGVyc19kYXRhID0gYXN5bmMgZnVuY3Rpb24gKGZpbHRlcnNfY29uc3QpIHtcbiAgICBmaWx0ZXJzX2NvbnN0LmZpbHRlcigoeCkgPT4geC5sYWJlbCA9PSBudWxsKS5mb3JFYWNoKCh4KSA9PiB7IGNvbnNvbGUuZXJyb3IoYGxhYmVsIG5vdCBkZWZpbmVkIGZvciBmaWx0ZXIgJHtKU09OLnN0cmluZ2lmeSh4KX1gKTsgeC5sYWJlbCA9IFwiXCI7IH0pO1xuICAgIGZpbHRlcnNfY29uc3Quc29ydCgoYSwgYikgPT4gYS5sYWJlbC5sb2NhbGVDb21wYXJlKGIubGFiZWwpKTtcbiAgICBpMThuX2V4dC50YWdzID0ge307XG4gICAgVEFHX09QRVJBVE9SUyA9IHt9O1xuICAgIERFRklORURfVEFHUyA9IHt9O1xuICAgIGZpbHRlcnNfY29uc3QuZm9yRWFjaCgoZl9kZWYpID0+IHtcbiAgICAgICAgaTE4bl9leHQudGFnc1tmX2RlZi5pZF0gPSBmX2RlZi5sYWJlbDtcbiAgICAgICAgZl9kZWYub3BlcmF0b3JzLmZvckVhY2goKG9wKSA9PiBUQUdfT1BFUkFUT1JTW29wLmlkXSA9IG9wLmxhYmVsKTtcbiAgICAgICAgREVGSU5FRF9UQUdTW2ZfZGVmLmlkXSA9IGZfZGVmLm9wZXJhdG9ycy5tYXAoKG9wKSA9PiBvcC5pZCk7XG4gICAgfSk7XG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgbGV0IGZpbHRlcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGxldCBmaWx0ZXJfZGVmID0gRklMVEVSU19DT05TVC5maW5kKChmYykgPT4gZmMuaWQgPT0ga2V5KTtcbiAgICAgICAgaWYgKGZpbHRlcl9kZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG9wdGlvbnNfc3RyaW5nID0gdmFsdWUuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgb3B0aW9uc19zdHJpbmcuZm9yRWFjaCgob3B0X3N0aXJuZykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBbdmFsdWUsIG9wZXJhdG9yXSA9IG9wdF9zdGlybmcuc3BsaXQoXCI7XCIpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsIHx8IG9wZXJhdG9yID09IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGZpbHRlcl9kZWYub3B0aW9ucyAhPSBudWxsICYmIGZpbHRlcl9kZWYub3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSkgPT0gbnVsbClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblx0XHRsZXQgdmFsdWVfbGFiZWwgPSB2YWx1ZTtcblx0XHRpZiAoZmlsdGVyX2RlZi52YWx1ZV90eXBlID09IFwiYXJyYXlcIikge1xuXHRcdCAgICB2YWx1ZV9sYWJlbCA9IGZpbHRlcl9kZWY/Lm9wdGlvbnM/LmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKT8ubGFiZWw7XG5cdFx0fVxuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7IGlkOiBmaWx0ZXJfZGVmLmlkLCBvcGVyYXRvcjogb3BlcmF0b3IsIHZhbHVlOiB2YWx1ZSwgbGFiZWw6IGZpbHRlcl9kZWYubGFiZWwsIHZhbHVlX2xhYmVsIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgLy8gXCJsN3Byb3RvPVhYWDtlcVwiXG59XG5cblxuZnVuY3Rpb24gZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpIHtcbiAgICBsZXQgZmlsdGVyc19ncm91cHMgPSB7fTtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgbGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZi5pZF07XG4gICAgICAgIGlmIChncm91cCA9PSBudWxsKSB7XG4gICAgICAgICAgICBncm91cCA9IFtdO1xuICAgICAgICAgICAgZmlsdGVyc19ncm91cHNbZi5pZF0gPSBncm91cDtcbiAgICAgICAgfVxuICAgICAgICBncm91cC5wdXNoKGYpO1xuICAgIH0pO1xuICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IHt9O1xuICAgIGZvciAobGV0IGZfaWQgaW4gZmlsdGVyc19ncm91cHMpIHtcbiAgICAgICAgbGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZl9pZF07XG4gICAgICAgIGxldCBmaWx0ZXJfdmFsdWVzID0gZ3JvdXAuZmlsdGVyKChmKSA9PiBmLnZhbHVlICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gXCJcIikubWFwKChmKSA9PiBgJHtmLnZhbHVlfTske2Yub3BlcmF0b3J9YCkuam9pbihcIixcIik7XG4gICAgICAgIGZpbHRlcnNfb2JqZWN0W2ZfaWRdID0gZmlsdGVyX3ZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnNfb2JqZWN0O1xufVxuXG5jb25zdCBmaWx0ZXJzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuXHRnZXRfZmlsdGVyX2NvbnN0LFxuXHRnZXRfZmlsdGVyc19vYmplY3QsXG5cdGxvYWRfZmlsdGVyc19kYXRhLFxuXHR0YWdfb3BlcmF0b3JfbGFiZWxfZGljdCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmaWx0ZXJzTWFuYWdlcjtcbiIsIjx0ZW1wbGF0ZT5cbiAgPHNlbGVjdCBjbGFzcz1cInNlbGVjdDIgZm9ybS1zZWxlY3RcIiByZWY9XCJzZWxlY3QyXCIgcmVxdWlyZWQgbmFtZT1cImZpbHRlcl90eXBlXCIgOm11bHRpcGxlPVwibXVsdGlwbGVcIj5cbiAgICA8b3B0aW9uIGNsYXNzPVwibnRvcG5nLWRyb3Bkb3duLW1pbi13aWR0aCBuby13cmFwXCIgdi1mb3I9XCIoaXRlbSwgaSkgaW4gb3B0aW9uc18yXCIgOnNlbGVjdGVkPVwiaXNfc2VsZWN0ZWQoaXRlbSlcIiA6dmFsdWU9XCJpdGVtLnZhbHVlXCIgOmRpc2FibGVkPVwiaXRlbS5kaXNhYmxlZFwiPlxuICAgICAge3tpdGVtLmxhYmVsfX1cbiAgICA8L29wdGlvbj5cbiAgICA8b3B0Z3JvdXAgdi1mb3I9XCIoaXRlbSwgaSkgaW4gZ3JvdXBzX29wdGlvbnNfMlwiIDpsYWJlbD1cIml0ZW0uZ3JvdXBcIj5cbiAgICAgIDxvcHRpb24gdi1mb3I9XCIob3B0LCBqKSBpbiBpdGVtLm9wdGlvbnNcIiA6c2VsZWN0ZWQ9XCJpc19zZWxlY3RlZChvcHQpXCIgOnZhbHVlPVwib3B0LnZhbHVlXCIgOmRpc2FibGVkPVwib3B0LmRpc2FibGVkXCI+XG4gICAgICAgIHt7b3B0LmxhYmVsfX1cbiAgICAgIDwvb3B0aW9uPlxuICAgIDwvb3B0Z3JvdXA+XG4gIDwvc2VsZWN0PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3Qgc2VsZWN0MiA9IHJlZihudWxsKTtcblxuLy8gY29uc3Qgc2VsZWN0ZWQyX29wdGlvbiA9IHJlZih7fSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ3VwZGF0ZTpzZWxlY3RlZF9vcHRpb24nLCAnc2VsZWN0X29wdGlvbicsICd1bnNlbGVjdF9vcHRpb24nLCAnY2hhbmdlX3NlbGVjdGVkX29wdGlvbnMnXSk7XG5cbmNvbnN0IG9wdGlvbnNfMiA9IHJlZihbXSk7XG5jb25zdCBncm91cHNfb3B0aW9uc18yID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX29wdGlvbl8yID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX3ZhbHVlcyA9IHJlZihbXSk7IC8vIHVzZWQgb25seSBpZiBtdWx0aXBsZSA9PSB0cnVlXG5jb25zdCByZWZyZXNoX29wdGlvbnMgPSByZWYoMCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgb3B0aW9uczogQXJyYXksXG4gICAgc2VsZWN0ZWRfb3B0aW9uOiBPYmplY3QsXG4gICAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gICAgYWRkX3RhZzogQm9vbGVhbixcbiAgICBkaXNhYmxlX2NoYW5nZTogQm9vbGVhbixcbn0pO1xuXG5sZXQgZmlyc3RfdGltZV9yZW5kZXIgPSB0cnVlO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIGlmICghcHJvcHMub3B0aW9ucykgeyByZXR1cm47IH1cbiAgICBpZiAoIXByb3BzLmRpc2FibGVfY2hhbmdlIHx8ICFmaXJzdF90aW1lX3JlbmRlcikge1xuICAgIFx0c2V0X2lucHV0KCk7XG4gICAgfVxufSk7XG5cbndhdGNoKCgpID0+IHByb3BzLnNlbGVjdGVkX29wdGlvbiwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgc2V0X3NlbGVjdGVkX29wdGlvbihjdXJfdmFsdWUpO1xuICAgIGxldCBzZWxlY3QyRGl2ID0gc2VsZWN0Mi52YWx1ZTtcbiAgICBjaGFuZ2Vfc2VsZWN0XzJfc2VsZWN0ZWRfdmFsdWUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbndhdGNoKFtyZWZyZXNoX29wdGlvbnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICByZW5kZXIoKTtcbn0sIHsgZmx1c2g6ICdwb3N0J30pO1xuXG5cbndhdGNoKCgpID0+IHByb3BzLm9wdGlvbnMsIChjdXJyZW50X3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZV9jaGFuZ2UgPT0gdHJ1ZSB8fCBjdXJyZW50X3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgc2V0X2lucHV0KCk7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5mdW5jdGlvbiBzZXRfaW5wdXQoKSB7XG4gICAgc2V0X29wdGlvbnMoKTtcbiAgICBzZXRfc2VsZWN0ZWRfb3B0aW9uKCk7XG59XG5cbmZ1bmN0aW9uIHNldF9vcHRpb25zKCkge1xuICAgIG9wdGlvbnNfMi52YWx1ZSA9IFtdO1xuICAgIGdyb3Vwc19vcHRpb25zXzIudmFsdWUgPSBbXTtcbiAgICBcbiAgICBpZiAocHJvcHMub3B0aW9ucyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBncm91cHNfZGljdCA9IHt9O1xuICAgIHByb3BzLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdGxldCBvcHRfMiA9IHsgLi4ub3B0aW9uIH07XG5cdGlmIChvcHRfMi52YWx1ZSA9PSBudWxsKSB7XG5cdCAgICBvcHRfMi52YWx1ZSA9IG9wdF8yLmxhYmVsO1xuXHR9XG5cdGlmIChvcHRpb24uZ3JvdXAgPT0gbnVsbCkge1xuXHQgICAgb3B0aW9uc18yLnZhbHVlLnB1c2gob3B0XzIpO1xuXHR9IGVsc2Uge1xuXHQgICAgaWYgKGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPT0gbnVsbCkge1xuXHRcdGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPSB7IGdyb3VwOiBvcHRfMi5ncm91cCwgb3B0aW9uczogW10gfTtcblx0ICAgIH1cblx0ICAgIGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0ub3B0aW9ucy5wdXNoKG9wdF8yKTtcblx0fVxuICAgIH0pO1xuICAgIGdyb3Vwc19vcHRpb25zXzIudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoZ3JvdXBzX2RpY3QpO1xuICAgIHJlZnJlc2hfb3B0aW9ucy52YWx1ZSArPSAxO1xufVxuXG5cbmNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBsZXQgc2VsZWN0MkRpdiA9IHNlbGVjdDIudmFsdWU7XG4gICAgaWYgKGZpcnN0X3RpbWVfcmVuZGVyID09IGZhbHNlKSB7XG5cdGRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKCEkKHNlbGVjdDJEaXYpLmhhc0NsYXNzKFwic2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZVwiKSkge1xuXHQkKHNlbGVjdDJEaXYpLnNlbGVjdDIoe1xuXHQgICAgd2lkdGg6ICcxMDAlJyxcblx0ICAgIGhlaWdodDogJzUwMHB4Jyxcblx0ICAgIHRoZW1lOiAnYm9vdHN0cmFwLTUnLFxuXHQgICAgZHJvcGRvd25QYXJlbnQ6ICQoc2VsZWN0MkRpdikucGFyZW50KCksXG5cdCAgICBkcm9wZG93bkF1dG9XaWR0aCA6IHRydWUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy5hZGRfdGFnICYmICFwcm9wcy5tdWx0aXBsZSxcblx0fSk7XG5cdCQoc2VsZWN0MkRpdikub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIGxldCBkYXRhID0gZS5wYXJhbXMuZGF0YTtcbiAgICAgICAgICAgIGlmIChkYXRhLmVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vVE9ETzogaW1wbGVtZW50IGZvciBtdWx0aXNlbGVjdFxuICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSB7IGxhYmVsOiBkYXRhLnRleHQsIHZhbHVlOiBkYXRhLmlkIH07XG5cdFx0ZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIG9wdGlvbik7XG5cdFx0ZW1pdCgnc2VsZWN0X29wdGlvbicsIG9wdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGxldCB2YWx1ZSA9IGRhdGEuZWxlbWVudC5fdmFsdWU7XG5cdCAgICAgICAgbGV0IG9wdGlvbiA9IGZpbmRfb3B0aW9uX2Zyb21fdmFsdWUodmFsdWUpO1xuXHQgICAgICAgIGlmICh2YWx1ZSAhPSBwcm9wcy5zZWxlY3RlZF9vcHRpb24pIHtcblx0XHQgICAgZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIG9wdGlvbik7XG5cdFx0ICAgIGVtaXQoJ3NlbGVjdF9vcHRpb24nLCBvcHRpb24pO1xuXHQgICAgICAgIH1cbiAgICAgICAgICAgIH1cblx0ICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBzZWxlY3RlZF92YWx1ZXMudmFsdWUgPSBzZWxlY3RlZF92YWx1ZXMudmFsdWUuZmlsdGVyKCh2KSA9PiB2ICE9IHZhbHVlKTtcblx0ICAgIHNlbGVjdGVkX3ZhbHVlcy52YWx1ZS5wdXNoKHZhbHVlKTtcblx0ICAgIGxldCBvcHRpb25zID0gZmluZF9vcHRpb25zX2Zyb21fdmFsdWVzKHNlbGVjdGVkX3ZhbHVlcy52YWx1ZSk7XG5cdCAgICBlbWl0KCdjaGFuZ2Vfc2VsZWN0ZWRfb3B0aW9ucycsIG9wdGlvbnMpO1x0XHQgXG5cdH0pO1xuXHQkKHNlbGVjdDJEaXYpLm9uKCdzZWxlY3QyOnVuc2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIGxldCBkYXRhID0gZS5wYXJhbXMuZGF0YTtcblx0ICAgIGxldCB2YWx1ZSA9IGRhdGEuZWxlbWVudC5fdmFsdWU7XG5cdCAgICBpZiAoIXByb3BzLm11bHRpcGxlKSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgc2VsZWN0ZWRfdmFsdWVzLnZhbHVlID0gc2VsZWN0ZWRfdmFsdWVzLnZhbHVlLmZpbHRlcigodikgPT4gdiAhPSB2YWx1ZSk7XG5cdCAgICBsZXQgb3B0aW9uID0gZmluZF9vcHRpb25fZnJvbV92YWx1ZSh2YWx1ZSk7XG5cdCAgICBsZXQgb3B0aW9ucyA9IGZpbmRfb3B0aW9uc19mcm9tX3ZhbHVlcyhzZWxlY3RlZF92YWx1ZXMudmFsdWUpO1xuXHQgICAgZW1pdCgndW5zZWxlY3Rfb3B0aW9uJywgb3B0aW9uKTtcblx0ICAgIGVtaXQoJ2NoYW5nZV9zZWxlY3RlZF9vcHRpb25zJywgb3B0aW9ucyk7XHRcdCBcblx0fSk7XG4gICAgfVxuICAgIGZpcnN0X3RpbWVfcmVuZGVyID0gZmFsc2U7XG4gICAgLy8gdGhpcy4kZm9yY2VVcGRhdGUoKTtcbiAgICBjaGFuZ2Vfc2VsZWN0XzJfc2VsZWN0ZWRfdmFsdWUoKTtcbn07XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RfMl9zZWxlY3RlZF92YWx1ZSgpIHtcbiAgICBsZXQgc2VsZWN0MkRpdiA9IHNlbGVjdDIudmFsdWU7XG4gICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuXHRsZXQgdmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24ocHJvcHMuc2VsZWN0ZWRfb3B0aW9uKTtcblx0JChzZWxlY3QyRGl2KS52YWwodmFsdWUpO1xuXHQkKHNlbGVjdDJEaXYpLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgfSBlbHNlIHtcblx0JChzZWxlY3QyRGl2KS52YWwoc2VsZWN0ZWRfdmFsdWVzLnZhbHVlKTtcblx0JChzZWxlY3QyRGl2KS50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNfc2VsZWN0ZWQoaXRlbSkge1xuICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcblx0Y29uc3QgaXNfemVyb192YWx1ZSA9IHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLnZhbHVlID09IDAgfHxzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS52YWx1ZSA9PSBcIjBcIjtcblx0cmV0dXJuIGl0ZW0udmFsdWUgPT0gc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUudmFsdWUgfHwgKGlzX3plcm9fdmFsdWUgJiYgaXRlbS5sYWJlbCA9PSBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS5sYWJlbCk7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZF92YWx1ZXMudmFsdWUuZmluZCgodikgPT4gdiA9PSBpdGVtLnZhbHVlKSAhPSBudWxsOyBcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX29wdGlvbihzZWxlY3RlZF9vcHRpb24pIHtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uID09IG51bGwgJiYgIXByb3BzLm11bHRpcGxlKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUgPSBzZWxlY3RlZF9vcHRpb247XG4gICAgLy8gaWYgKHByb3BzLm11bHRpcGxlID09IHRydWUgJiYgc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWU/LnZhbHVlICE9IG51bGwpIHtcbiAgICAvLyBcdHNlbGVjdGVkX3ZhbHVlcy52YWx1ZS5wdXNoKHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLnZhbHVlKTtcbiAgICAvLyB9XG59XG5cbmZ1bmN0aW9uIGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKSB7XG4gICAgaWYgKHByb3BzLnNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHJldHVybiBwcm9wcy5vcHRpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWRfb3B0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oc2VsZWN0ZWRfb3B0aW9uKSB7XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChzZWxlY3RlZF9vcHRpb24udmFsdWUgIT0gbnVsbCkge1xuXHR2YWx1ZSA9IHNlbGVjdGVkX29wdGlvbi52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHR2YWx1ZSA9IHNlbGVjdGVkX29wdGlvbi5sYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBmaW5kX29wdGlvbnNfZnJvbV92YWx1ZXModmFsdWVzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB2YWx1ZXMubWFwKCh2KSA9PiBmaW5kX29wdGlvbl9mcm9tX3ZhbHVlKHYpKTtcbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gZmluZF9vcHRpb25fZnJvbV92YWx1ZSh2YWx1ZSkge1xuICAgIGxldCBvcHRpb25fMiA9IGZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSh2YWx1ZSk7XG4gICAgbGV0IG9wdGlvbiA9IHByb3BzLm9wdGlvbnMuZmluZCgobykgPT4gby5sYWJlbCA9PSBvcHRpb25fMi5sYWJlbCk7XG4gICAgcmV0dXJuIG9wdGlvbjtcbn1cblxuZnVuY3Rpb24gZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcblx0dmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgLy8gbGV0IG9wdGlvbiA9IG9wdGlvbnNfMi52YWx1ZS5maW5kKChvKSA9PiBvLnZhbHVlID09IHZhbHVlKTtcbiAgICBsZXQgb3B0aW9uID0gb3B0aW9uc18yLnZhbHVlLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuICAgIGlmIChvcHRpb24gIT0gbnVsbCkgeyByZXR1cm4gb3B0aW9uOyB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHNfb3B0aW9uc18yLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBnID0gZ3JvdXBzX29wdGlvbnNfMi52YWx1ZVtpXTtcblx0b3B0aW9uID0gZy5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuXHRpZiAob3B0aW9uICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBvcHRpb247XG5cdH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4gICAgXG5kZWZpbmVFeHBvc2UoeyByZW5kZXIgfSk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdHJ5IHtcblx0JChzZWxlY3QyLnZhbHVlKS5zZWxlY3QyKCdkZXN0cm95Jyk7XG5cdCQoc2VsZWN0Mi52YWx1ZSkub2ZmKCdzZWxlY3QyOnNlbGVjdCcpOyAgICBcbiAgICB9IGNhdGNoKGVycikge1xuXHRjb25zb2xlLmVycm9yKFwiRGVzdHJveSBzZWxlY3Qtc2VhcmNoIGNhdGNoIGVycm9yOlwiKTtcblx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBkZXN0cm95KCk7XG59KTtcblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48bmF2IGNsYXNzPVwibmF2YmFyIG5hdmJhci1zaGFkb3cgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctbGlnaHQgcHgtMiBtYi0yXCI+XG4gIDxzcGFuIGNsYXNzPVwibWUtMSB0ZXh0LW5vd3JhcFwiIHN0eWxlPVwiZm9udC1zaXplOiAxLjFyZW07XCI+XG4gICAgPGkgOmNsYXNzPVwibWFpbl90aXRsZS5pY29uXCI+PC9pPlxuICAgIDxhIHYtaWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6aHJlZj1cIm1haW5fdGl0bGUuaHJlZlwiIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L2E+ICBcbiAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvc3Bhbj4gICAgXG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBzZWNvbmRhcnlfdGl0bGVfbGlzdFwiPiAvIFxuICAgICAgPGEgdi1pZj1cIml0ZW0uaHJlZlwiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIiA6aHJlZj1cIml0ZW0uaHJlZlwiIDp0aXRsZT1cIml0ZW0udGl0bGVcIj5cbiAgICAgICAge3tpdGVtLmxhYmVsfX1cbiAgICAgICAgPGkgdi1pZj1cIml0ZW0uaWNvblwiIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cbiAgICAgIDwvYT4gIFxuICAgICAgPHNwYW4gdi1lbHNlIDp0aXRsZT1cIml0ZW0udGl0bGVcIj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3NwYW4+XG4gIDxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZCBtcy0xIGQtbm9uZSBkLWxnLWlubGluZSBkLW1kLW5vbmVcIj58PC9zcGFuPlxuICA8YnV0dG9uIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXJcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxuICA8L2J1dHRvbj5cbiAgPGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSBzY3JvbGwteFwiIGlkPVwibmF2YmFyTmF2XCI+XG4gICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdlwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBpdGVtc190YWJsZVwiPlxuXHQ8dGVtcGxhdGUgdi1pZj1cIml0ZW0uYWN0aXZlXCI+XG5cdCAgPGxpIHYtaWY9XCJpdGVtLmFjdGl2ZVwiIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgYWN0aXZlXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlx0ICAgIFxuICAgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8Yj48aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgICA8L2I+XG5cdCAgPC9saT5cbiAgICA8bGkgdi1lbHNlIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1lbHNlPlxuXHQgIDxhIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgIDwvYT5cblx0PC90ZW1wbGF0ZT5cblx0XG5cdFxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdWw+XG4gICAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1zLWF1dG9cIj5cbiAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6aGlzdG9yeS5iYWNrKClcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1hcnJvdy1sZWZ0XCI+PC9pPlxuXHQ8L2E+XG4gICAgICAgIDxhIHRhcmdldD1cIl9uZXd0YWJcIiA6aHJlZj1cImhlbHBfbGlua1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgPC9hPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9uYXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0bWFpbl90aXRsZTogT2JqZWN0LFxuICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogQXJyYXksXG5cdGhlbHBfbGluazogU3RyaW5nLFxuXHRpdGVtc190YWJsZTogQXJyYXksXG4gICAgfSxcbiAgICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbjxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXNoYWRvdyBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBiZy1saWdodCBweC0yIG1iLTJcIj5cbiAgPHNwYW4gY2xhc3M9XCJtZS0xIHRleHQtbm93cmFwXCIgc3R5bGU9XCJmb250LXNpemU6IDEuMXJlbTtcIj5cbiAgICA8aSA6Y2xhc3M9XCJtYWluX3RpdGxlLmljb25cIj48L2k+XG4gICAgPGEgdi1pZj1cIm1haW5fdGl0bGUuaHJlZlwiIDpocmVmPVwibWFpbl90aXRsZS5ocmVmXCIgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvYT4gIFxuICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9zcGFuPiAgICBcbiAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHNlY29uZGFyeV90aXRsZV9saXN0XCI+IC8gXG4gICAgICA8YSB2LWlmPVwiaXRlbS5ocmVmXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiIDpocmVmPVwiaXRlbS5ocmVmXCIgOnRpdGxlPVwiaXRlbS50aXRsZVwiPlxuICAgICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgICAgICA8aSB2LWlmPVwiaXRlbS5pY29uXCIgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuICAgICAgPC9hPiAgXG4gICAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIG1zLTEgZC1ub25lIGQtbGctaW5saW5lIGQtbWQtbm9uZVwiPnw8L3NwYW4+XG4gIDxidXR0b24gY2xhc3M9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyLWljb25cIj48L3NwYW4+XG4gIDwvYnV0dG9uPlxuICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIHNjcm9sbC14XCIgaWQ9XCJuYXZiYXJOYXZcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGl0ZW1zX3RhYmxlXCI+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5hY3RpdmVcIj5cblx0ICA8bGkgdi1pZj1cIml0ZW0uYWN0aXZlXCIgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayBhY3RpdmVcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XHQgICAgXG4gICAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuICAgIDxsaSB2LWVsc2UgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGI+PGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgICAgPC9iPlxuXHQgIDwvbGk+XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWVsc2U+XG5cdCAgPGEgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgaHJlZj1cIiNcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgPC9hPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC91bD5cbiAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgbXMtYXV0b1wiPlxuICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+XG5cdDwvYT5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIDpocmVmPVwiaGVscF9saW5rXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRtYWluX3RpdGxlOiBPYmplY3QsXG4gIHNlY29uZGFyeV90aXRsZV9saXN0OiBBcnJheSxcblx0aGVscF9saW5rOiBTdHJpbmcsXG5cdGl0ZW1zX3RhYmxlOiBBcnJheSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiB2LWlmPVwic2hvd19hbGVydCA9PSB0cnVlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1kaXNtaXNzYWJsZVwiIDpjbGFzcz1cImFsZXJ0X3R5cGVcIj5cbiAgPHNwYW4gdi1odG1sPVwiYm9keVwiPjwvc3Bhbj5cbjxidXR0b24gdi1pZj1cIiFub19jbG9zZV9idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0bi1jbG9zZVwiICBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGdsb2JhbDogQm9vbGVhbixcblx0bm9fY2xvc2VfYnV0dG9uOiBCb29sZWFuLFxuICAgIH0sXG4gICAgZW1pdHM6IFtdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIHNob3dfYWxlcnQ6IGZhbHNlLFxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBib2R5OiBcIlwiLFxuXHQgICAgYWxlcnRfdHlwZTogXCJhbGVydC1zdWNjZXNzXCIsXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRpZiAodGhpcy5nbG9iYWwgPT0gdHJ1ZSkge1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCAoaW5mbykgPT4ge1xuXHRcdGlmIChpbmZvLnR5cGUgIT0gbnVsbCkge1xuXHRcdCAgICB0aGlzLmFsZXJ0X3R5cGUgPSBpbmZvLnR5cGU7XG5cdFx0fVxuXHRcdGlmIChpbmZvLnRpbWVvdXQgIT0gbnVsbCkge1xuXHRcdCAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5jbG9zZSgpOyB9LCAxMDAwICogaW5mby50aW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5zaG93KGluZm8udGV4dF9odG1sKTtcblx0ICAgIH0pO1x0XG5cdH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gZmFsc2U7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKGJvZHksIGFsZXJ0X3R5cGUpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IHRydWU7XG5cdCAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgaWYgKGFsZXJ0X3R5cGUgIT0gbnVsbCkge1xuXHRcdHRoaXMuYWxlcnRfdHlwZSA9IGFsZXJ0X3R5cGU7XG5cdCAgICB9XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiIHYtaWY9XCJzaG93X2FsZXJ0ID09IHRydWVcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCIgOmNsYXNzPVwiYWxlcnRfdHlwZVwiPlxuICA8c3BhbiB2LWh0bWw9XCJib2R5XCI+PC9zcGFuPlxuPGJ1dHRvbiB2LWlmPVwiIW5vX2Nsb3NlX2J1dHRvblwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJjbG9zZVwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Z2xvYmFsOiBCb29sZWFuLFxuXHRub19jbG9zZV9idXR0b246IEJvb2xlYW4sXG4gICAgfSxcbiAgICBlbWl0czogW10sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgc2hvd19hbGVydDogZmFsc2UsXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGJvZHk6IFwiXCIsXG5cdCAgICBhbGVydF90eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIixcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGlmICh0aGlzLmdsb2JhbCA9PSB0cnVlKSB7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIChpbmZvKSA9PiB7XG5cdFx0aWYgKGluZm8udHlwZSAhPSBudWxsKSB7XG5cdFx0ICAgIHRoaXMuYWxlcnRfdHlwZSA9IGluZm8udHlwZTtcblx0XHR9XG5cdFx0aWYgKGluZm8udGltZW91dCAhPSBudWxsKSB7XG5cdFx0ICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLmNsb3NlKCk7IH0sIDEwMDAgKiBpbmZvLnRpbWVvdXQpO1xuXHRcdH1cblx0XHR0aGlzLnNob3coaW5mby50ZXh0X2h0bWwpO1xuXHQgICAgfSk7XHRcblx0fVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSBmYWxzZTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oYm9keSwgYWxlcnRfdHlwZSkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gdHJ1ZTtcblx0ICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICBpZiAoYWxlcnRfdHlwZSAhPSBudWxsKSB7XG5cdFx0dGhpcy5hbGVydF90eXBlID0gYWxlcnRfdHlwZTtcblx0ICAgIH1cblx0fSxcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Y2hhcnRfdHlwZTogU3RyaW5nLFxuXHRyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlOiBCb29sZWFuLFxuXHRub3RfZW1pdF9nbG9iYWxfc3RhdHVzX3VwZGF0ZTogQm9vbGVhbixcblx0YmFzZV91cmxfcmVxdWVzdDogU3RyaW5nLFxuXHRnZXRfcGFyYW1zX3VybF9yZXF1ZXN0OiBGdW5jdGlvbixcblx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcbiAgICAgICAgbWFwX2NoYXJ0X29wdGlvbnM6IEZ1bmN0aW9uLFxuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZDogU3RyaW5nLFx0XG5cdHJvdW5kX3RpbWU6IEJvb2xlYW4sIC8vaWYgbWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCByb3VuZCB0aW1lIGJ5IG1pbl90aW1lX2ludGVydmFsX2lkXHRcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiLCBcImhpZGRlblwiLCBcInNob3dlZFwiLCBcImNoYXJ0X3JlbG9hZGVkXCIsIFwiem9vbVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGJlZm9yZVVubW91bnQoKSB7XG5cdHRoaXMuY2hhcnQuZGVzdHJveUNoYXJ0KCk7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgY2hhcnQ6IG51bGwsXG5cdCAgICBjaGFydF9vcHRpb25zOiBudWxsLFxuXHQgICAgZnJvbV96b29tOiBmYWxzZSxcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHRhd2FpdCB0aGlzLmluaXQoKTtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGluaXQ6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdCAgICBsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHQgICAgaWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdHRoaXMucmVnaXN0ZXJfc3RhdHVzKHN0YXR1cyk7XG5cdCAgICB9XG5cdCAgICBhd2FpdCB0aGlzLmRyYXdfY2hhcnQodXJsX3JlcXVlc3QpO1xuXHR9LFxuXHRnZXRfZGF0YV91cmk6IGFzeW5jIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIGlmICh0aGlzLmNoYXJ0ID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0ICAgIGxldCBkYXRhX3VyaSA9IGF3YWl0IHRoaXMuY2hhcnQudG9fZGF0YV91cmkoKTtcblx0ICAgIHJldHVybiBkYXRhX3VyaTtcblx0fSxcblx0ZG93bmxvYWRfY2hhcnRfcG5nOiBhc3luYyBmdW5jdGlvbihmaWxlX25hbWUsIG9wdGlvbnMpIHtcblx0ICAgIGlmICh0aGlzLmNoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICBsZXQgZGF0YV91cmkgPSBhd2FpdCB0aGlzLmNoYXJ0LnRvX2RhdGFfdXJpKCk7XG5cdCAgICBkb3dubG9hZFVSSShkYXRhX3VyaSwgZmlsZV9uYW1lKTtcblx0fSxcblx0cmVnaXN0ZXJfc3RhdHVzOiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICBudG9wbmdfc3RhdHVzX21hbmFnZXIub25fc3RhdHVzX2NoYW5nZSh0aGlzLmlkLCAobmV3X3N0YXR1cykgPT4ge1xuXHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0ICAgIHRoaXMuZnJvbV96b29tID0gZmFsc2U7XG5cdFx0ICAgIC8vcmV0dXJuO1xuXHRcdH1cblx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0aWYgKG5ld191cmxfcmVxdWVzdCA9PSB1cmxfcmVxdWVzdCkge1xuXHRcdCAgICB1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHR0aGlzLnVwZGF0ZV9jaGFydChuZXdfdXJsX3JlcXVlc3QpO1xuXHQgICAgfSwgZmFsc2UpO1xuXHR9LFxuXHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IHVybF9wYXJhbXM7XG5cdCAgICBpZiAodGhpcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0ICE9IG51bGwpIHtcblx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHQgICAgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHR9XG5cdFx0dXJsX3BhcmFtcyA9IHRoaXMuZ2V0X3BhcmFtc191cmxfcmVxdWVzdChzdGF0dXMpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIHJldHVybiBgJHt0aGlzLmJhc2VfdXJsX3JlcXVlc3R9PyR7dXJsX3BhcmFtc31gO1xuXHR9LFxuXHRkcmF3X2NoYXJ0OiBhc3luYyBmdW5jdGlvbih1cmxfcmVxdWVzdCkge1xuXHQgICAgbGV0IGNoYXJ0QXBleCA9IG50b3BDaGFydEFwZXg7XG5cdCAgICBsZXQgY2hhcnRfdHlwZSA9IHRoaXMuY2hhcnRfdHlwZTtcblx0ICAgIGlmIChjaGFydF90eXBlID09IG51bGwpIHtcblx0XHRjaGFydF90eXBlID0gY2hhcnRBcGV4LnR5cGVDaGFydC5UU19TVEFDS0VEO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jaGFydCA9IGNoYXJ0QXBleC5uZXdDaGFydChjaGFydF90eXBlKTtcblx0ICAgIGxldCBtZSA9IHRoaXM7XG5cdCAgICB0aGlzLmNoYXJ0LnJlZ2lzdGVyRXZlbnQoXCJiZWZvcmVab29tXCIsIGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIGF4aXMpIHtcblx0XHRtZS5vbl9iZWZvcmVfem9vbShjaGFydF9jb250ZXh0LCBheGlzKTtcblx0ICAgIH0pO1xuXHQgICAgdGhpcy5jaGFydC5yZWdpc3RlckV2ZW50KFwiem9vbWVkXCIsIGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIGF4aXMpIHtcblx0XHRtZS5vbl96b29tZWQoY2hhcnRfY29udGV4dCwgYXhpcyk7XG5cdCAgICB9KTtcblx0ICAgIGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB0aGlzLmNoYXJ0LmRyYXdDaGFydCh0aGlzLiRyZWZzW1wiY2hhcnRcIl0sIGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBpZiAodXJsX3JlcXVlc3QgPT0gbnVsbCkge1xuXHRcdHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QoKTtcblx0ICAgIH1cblx0ICAgIGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnRfb3B0aW9uczogZnVuY3Rpb24oY2hhcnRfb3B0aW9ucykge1xuXHQgICAgdGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0fSxcblx0dXBkYXRlX2NoYXJ0X3NlcmllczogZnVuY3Rpb24oc2VyaWVzKSB7XG5cdCAgICBpZiAoc2VyaWVzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZVNlcmllcyhzZXJpZXMpO1xuXHR9LFxuXHRnZXRfY2hhcnRfb3B0aW9uczogYXN5bmMgZnVuY3Rpb24odXJsX3JlcXVlc3QpIHtcblx0ICAgIGxldCBjaGFydF9vcHRpb25zO1xuXHQgICAgaWYgKHRoaXMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcdFx0XG5cdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tYXBfY2hhcnRfb3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2hhcnRfb3B0aW9ucyA9IHRoaXMubWFwX2NoYXJ0X29wdGlvbnMoY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cdCAgICB0aGlzLiRlbWl0KCdjaGFydF9yZWxvYWRlZCcsIGNoYXJ0X29wdGlvbnMpO1xuXHQgICAgcmV0dXJuIGNoYXJ0X29wdGlvbnM7XG5cdH0sXG5cdG9uX2JlZm9yZV96b29tOiBmdW5jdGlvbihjaGFydF9jb250ZXh0LCB7IHhheGlzLCB5YXhpcyB9KSB7XG5cdCAgICBsZXQgbmV3X2Vwb2NoX3N0YXR1cyA9IHRoaXMuZ2V0X2Vwb2NoX2Zyb21feGF4aXNfZXZlbnQoeGF4aXMpO1xuXHQgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCkge1xuXHRcdGNvbnN0IG1pbl90aW1lX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCh0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkKTtcblx0XHRpZiAobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIDwgbWluX3RpbWVfaW50ZXJ2YWwpIHtcblx0XHQgICAgXG5cdFx0ICAgIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKyBtaW5fdGltZV9pbnRlcnZhbDtcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIChuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAlIG1pbl90aW1lX2ludGVydmFsKTtcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gbWluX3RpbWVfaW50ZXJ2YWw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvdW5kX3RpbWUgPT0gdHJ1ZSkge1xuXHRcdCAgICBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiwgdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCk7XG5cdFx0ICAgIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQsIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHRcdH1cblx0XHRcblx0XHR4YXhpcy5taW4gPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMDtcblx0XHR4YXhpcy5tYXggPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4geGF4aXM7XG5cdH0sXG5cdG9uX3pvb21lZDogZnVuY3Rpb24oY2hhcnRfY29udGV4dCwgeyB4YXhpcywgeWF4aXMgfSkge1xuXHQgICAgdGhpcy5mcm9tX3pvb20gPSB0cnVlO1xuXHQgICAgY29uc3QgbmV3X2Vwb2NoX3N0YXR1cyA9IHRoaXMuZ2V0X2Vwb2NoX2Zyb21feGF4aXNfZXZlbnQoeGF4aXMpO1xuICAgICAgICAgICAgLy8gdGhlIHRpbWVzdGFtcHMgYXJlIGluIG1pbGxpc2Vjb25kcywgY29udmVydCB0aGVtIGludG8gc2Vjb25kc1xuXHQgICAgaWYgKCF0aGlzLm5vdF9lbWl0X2dsb2JhbF9zdGF0dXNfdXBkYXRlKSB7XG5cdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIG5ld19lcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHQgICAgfVxuXHQgICAgdGhpcy4kZW1pdCgnem9vbScsIG5ld19lcG9jaF9zdGF0dXMpO1xuXHR9LFxuXHRnZXRfZXBvY2hfZnJvbV94YXhpc19ldmVudDogZnVuY3Rpb24oeGF4aXMpIHtcblx0ICAgIGNvbnN0IGJlZ2luID0gbW9tZW50KHhheGlzLm1pbik7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBtb21lbnQoeGF4aXMubWF4KTtcblx0ICAgIGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdCAgICByZXR1cm4gbmV3X2Vwb2NoX3N0YXR1cztcblx0fVxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtZS1hdXRvIGJ0bi1ncm91cC1zbSBmbGV4LXdyYXAgZC1mbGV4XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJiZWdpblwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfb3B0aW9uXCIgOmlkPVwiJ3RpbWVfcHJlc2V0X3JhbmdlX3BpY2tlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZFwiIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NlbGVjdF90aW1lKG51bGwpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1zLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWNhbGVuZGFyLWFsdFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJiZWdpbi1kYXRlXCIgc3R5bGU9XCJ3aWR0aDoxMHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiBAY2hhbmdlPVwiY2hhbmdlX2JlZ2luX2RhdGVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJiZWdpbi10aW1lXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cInRpbWVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBiZWdpbi10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItcmlnaHQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXQgZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiZW5kLWRhdGVcIiBzdHlsZT1cIndpZHRoOjEwcmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIiBzdHlsZT1cIndpZHRoOiAyLjVyZW07XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJ3cm9uZ19kYXRlIHx8IHdyb25nX21pbl9pbnRlcnZhbFwiIDp0aXRsZT1cImludmFsaWRfZGF0ZV9tZXNzYWdlXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDowLjJyZW07Y29sb3I6cmVkO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXMtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCIhZW5hYmxlX2FwcGx5IHx8IHdyb25nX2RhdGUgfHwgd3JvbmdfbWluX2ludGVydmFsXCIgQGNsaWNrPVwiYXBwbHlcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCI+e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpMThuKCdhcHBseScpIH19PC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwianVtcF90aW1lX2JhY2soKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tanVtcC10aW1lLWJhY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX2xlZnQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJqdW1wX3RpbWVfYWhlYWQoKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmsgbWUtMlwiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYWhlYWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX3JpZ2h0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cInpvb20oMilcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLXpvb20taW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX2luJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cInpvb20oMC41KVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1vdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX291dCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1taW51c1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCB8fCBkaXNhYmxlZF9kYXRlX3BpY2tlclwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseV9zdGF0dXNfYnlfaGlzdG9yeSgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fdW5kbycpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXVuZG9cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJzZWxlY3RfdGltZV92YWx1ZSA9PSAnY3VzdG9tJyB8fCBkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImNoYW5nZV9zZWxlY3RfdGltZSgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3JlZnJlc2gnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJleHRyYV9idXR0b25zXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgZW5hYmxlX3JlZnJlc2g6IEJvb2xlYW4sXG4gICAgICAgIGRpc2FibGVkX2RhdGVfcGlja2VyOiBCb29sZWFuLFxuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZDogU3RyaW5nLFxuXHQgICAgcm91bmRfdGltZTogQm9vbGVhbiwgLy9pZiBtaW5fdGltZV9pbnRlcnZhbF9pZCAhPSBudWxsIHJvdW5kIHRpbWUgYnkgbWluX3RpbWVfaW50ZXJ2YWxfaWRcbiAgICAgICAgY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdDogQXJyYXksXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICAvLyBhIGNvbXB1dGVkIGdldHRlclxuICAgICAgICBpbnZhbGlkX2RhdGVfbWVzc2FnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud3JvbmdfZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmkxOG4oJ3dyb25nX2RhdGVfcmFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMud3JvbmdfbWluX2ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1zZyA9IHRoaXMuaTE4bignd3JvbmdfbWluX2ludGVydmFsJyk7XG4gICAgICAgICAgICAgICAgbXNnLnJlcGxhY2UoJyV0aW1lX2ludGVydmFsJywgdGhpcy5pMThuKGBzaG93X2FsZXJ0cy5wcmVzZXRzLiR7dGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZH1gKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbXNnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIFwiZW5hYmxlX3JlZnJlc2hcIjogZnVuY3Rpb24gKHZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWZyZXNoX2ludGVydmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucmVmcmVzaF9pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gdG9kb1xuICAgICAgICB9LFxuICAgICAgICBcInJvdW5kX3RpbWVcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJlcG9jaF9jaGFuZ2VcIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBiZWZvcmVNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJHByb3BzLmN1c3RvbV90aW1lX2ludGVydmFsX2xpc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0ID0gdGhpcy4kcHJvcHMuY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdDtcbiAgICAgICAgfVxuICAgICAgICAvLyBmaWx0ZXIgaW50ZXJ2YWxcbiAgICAgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkID0gdGhpcy50aW1lX3ByZXNldF9saXN0O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cdGNvbnN0IHRpbWVmcmFtZXNfZGljdCA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlKCk7XG5cdGNvbnN0IG1pbl90aW1lX2ludGVydmFsID0gdGltZWZyYW1lc19kaWN0W3RoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWRdO1xuICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3QuZmlsdGVyKChlbGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbS52YWx1ZSA9PSBcImN1c3RvbVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWluX3RpbWVfaW50ZXJ2YWwgPT0gbnVsbCB8fCB0aW1lZnJhbWVzX2RpY3RbZWxlbS52YWx1ZV0gPj0gbWluX3RpbWVfaW50ZXJ2YWw7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcbiAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKTtcbiAgICAgICAgbGV0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgICAgICBpZiAoZXBvY2hfYmVnaW4gIT0gbnVsbCAmJiBlcG9jaF9lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXNcblxuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh7IGVwb2NoX2JlZ2luOiBOdW1iZXIucGFyc2VJbnQoZXBvY2hfYmVnaW4pLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlcG9jaF9lbmQpIH0sIHRoaXMuJHByb3BzLmlkLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuICAgICAgICBsZXQgZl9zZXRfcGlja2VyID0gKHBpY2tlciwgdmFyX25hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmbGF0cGlja3IoJCh0aGlzLiRyZWZzW3BpY2tlcl0pLCB7XG4gICAgICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0OiBcImQvbS9ZIEg6aVwiLFxuICAgICAgICAgICAgICAgIC8vYWx0SW5wdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgLy9kYXRlRm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIixcbiAgICAgICAgICAgICAgICAvL2FsdEZvcm1hdDogXCJkLW0tWSBIOmlcIixcbiAgICAgICAgICAgICAgICAvL2xvY2FsZTogXCJpdFwiLFxuICAgICAgICAgICAgICAgIHRpbWVfMjRocjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjbGlja09wZW5zOiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vbW9kZTogXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIC8vc3RhdGljOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAoc2VsZWN0ZWREYXRlcywgZGF0ZVN0ciwgaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuZW5hYmxlX2FwcGx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWUud3JvbmdfZGF0ZSA9IG1lLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSA+IG1lLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIG1lLndyb25nX21pbl9pbnRlcnZhbCA9IG1lLm1pbl90aW1lX2ludGVydmFsX2lkICYmIG1lLmdldF91dGNfc2Vjb25kcygobWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSAtIG1lLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSkgPCBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKG1lLm1pbl90aW1lX2ludGVydmFsX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vbWUuYVtkYXRhXSA9IGQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZsYXRfYmVnaW5fZGF0ZSA9IGZfc2V0X3BpY2tlcihcImJlZ2luLWRhdGVcIiwgXCJiZWdpbl9kYXRlXCIpO1xuICAgICAgICB0aGlzLmZsYXRfZW5kX2RhdGUgPSBmX3NldF9waWNrZXIoXCJlbmQtZGF0ZVwiLCBcImVuZF9kYXRlXCIpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzLmlkLCBudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgKG5ld19zdGF0dXMpID0+IHRoaXMub25fc3RhdHVzX3VwZGF0ZWQobmV3X3N0YXR1cyksIHRydWUpO1xuXG4gICAgICAgIC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgICAgICBpZiAodGhpcy5lbmFibGVfcmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydF9yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqIE1ldGhvZHMgb2YgdGhlIGNvbXBvbmVudC4gKi9cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHN0YXJ0X3JlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uPy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVfcmVmcmVzaCAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX3NlbGVjdF90aW1lKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMucmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzICogMTAwMCk7XG4gICAgICAgICAgICAvLyB9LCAxMCogMTAwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIHV0Y19zX3RvX3NlcnZlcl9kYXRlOiBmdW5jdGlvbiAodXRjX3NlY29uZHMpIHtcbiAgICAgICAgICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG4gICAgICAgICAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG4gICAgICAgICAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9taW51dGVzID0gc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcbiAgICAgICAgICAgIHZhciBkX3NlcnZlciA9IG5ldyBEYXRlKHV0YyArIG9mZnNldF9tcyk7XG4gICAgICAgICAgICByZXR1cm4gZF9zZXJ2ZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlcl9kYXRlX3RvX2RhdGU6IGZ1bmN0aW9uIChkYXRlLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGxldCB1dGMgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMgLSBvZmZzZXRfbXMpO1xuICAgICAgICAgICAgcmV0dXJuIGRfbG9jYWw7XG4gICAgICAgIH0sXG4gICAgICAgIG9uX3N0YXR1c191cGRhdGVkOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGVfdGltZV91dGMgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBiZWdpbiBkYXRlIHRpbWUgbm93IC0gMzAgbWludXRlc1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGVfdGltZV91dGMgPSBlbmRfZGF0ZV90aW1lX3V0YyAtIDMwICogNjAgKiAxMDAwO1xuICAgICAgICAgICAgaWYgKHN0YXR1cy5lcG9jaF9lbmQgIT0gbnVsbCAmJiBzdGF0dXMuZXBvY2hfYmVnaW4gIT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKSA+IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKTtcbiAgICAgICAgICAgICAgICBlbmRfZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwO1xuICAgICAgICAgICAgICAgIGJlZ2luX2RhdGVfdGltZV91dGMgPSBzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChzdGF0dXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzLCB0aGlzLiRwcm9wcy5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKSk7XG4gICAgICAgICAgICB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2JlZ2luKSk7XG4gICAgICAgICAgICB0aGlzLmZsYXRfZW5kX2RhdGUuc2V0RGF0ZSh0aGlzLnV0Y19zX3RvX3NlcnZlcl9kYXRlKHN0YXR1cy5lcG9jaF9lbmQpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImJlZ2luLWRhdGVcIiwgYmVnaW5fZGF0ZV90aW1lX3V0YywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tdGltZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC1kYXRlXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJlbmQtdGltZVwiLCBlbmRfZGF0ZV90aW1lX3V0YywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldF9zZWxlY3RfdGltZV92YWx1ZShiZWdpbl9kYXRlX3RpbWVfdXRjLCBlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkX3N0YXR1c19pbl9oaXN0b3J5KHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW5hYmxlX2FwcGx5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gZmFsc2U7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRfc2VsZWN0X3RpbWVfdmFsdWU6IGZ1bmN0aW9uIChiZWdpbl91dGMsIGVuZF91dGMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVmcmFtZXNfZGljdCA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlKCk7XG4gICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSA2MDtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcblx0ICAgIGlmICh0aGlzLnJvdW5kX3RpbWUgPT0gdHJ1ZSAmJiB0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkICE9IG51bGwpIHtcblx0XHRub3cgPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKG5vdylcblx0ICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVuZF91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF91dGMpO1xuICAgICAgICAgICAgY29uc3QgYmVnaW5fdXRjX3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl91dGMpO1xuXHQgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGVuZF91dGNfcywgbm93LCB0b2xlcmFuY2UpKSB7XG5cdFx0dGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IG51bGw7XG5cdFx0Zm9yIChsZXQgdGltZV9pZCBpbiB0aW1lZnJhbWVzX2RpY3QpIHtcblx0XHQgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gdGltZWZyYW1lc19kaWN0W3RpbWVfaWRdLCB0b2xlcmFuY2UpKSB7XG5cdFx0XHR0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gdGltZV9pZDtcblx0XHQgICAgfVxuXHRcdH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudGx5X2FjdGl2ZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUgPT0gdGhpcy5zZWxlY3RfdGltZV92YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLXRpbWVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldEhvdXJzKGRfdGltZV9iZWdpbi5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0TWludXRlcyhkX3RpbWVfYmVnaW4uZ2V0TWludXRlcygpICsgZF90aW1lX2JlZ2luLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRTZWNvbmRzKGRfdGltZV9iZWdpbi5nZXRTZWNvbmRzKCkpO1xuXG4gICAgICAgICAgICAvLyBsZXQgZGF0ZV9lbmQgPSB0aGlzLiRyZWZzW1wiZW5kLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldEhvdXJzKGRfdGltZV9lbmQuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRNaW51dGVzKGRfdGltZV9lbmQuZ2V0TWludXRlcygpICsgZF90aW1lX2VuZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldFNlY29uZHMoZF90aW1lX2VuZC5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9iZWdpbi52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGRhdGVfZW5kLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICBsZXQgbm93X3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBiZWdpbl9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgbGV0IGVuZF9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgaWYgKGVwb2NoX2VuZCA+IG5vd19zKSB7XG4gICAgICAgICAgICAgICAgZXBvY2hfZW5kID0gbm93X3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNldF9kYXRlX3RpbWU6IGZ1bmN0aW9uKHJlZl9uYW1lLCB1dGNfdHMsIGlzX3RpbWUpIHtcbiAgICAgICAgLy8gICAgIHV0Y190cyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKHV0Y190cykgKiAxMDAwOyAgICAgICAgXG4gICAgICAgIC8vICAgICBsZXQgZGF0ZV90aW1lID0gbmV3IERhdGUodXRjX3RzKTtcbiAgICAgICAgLy8gICAgIGRhdGVfdGltZS5zZXRNaW51dGVzKGRhdGVfdGltZS5nZXRNaW51dGVzKCkgLSBkYXRlX3RpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgIC8vICAgICBpZiAoaXNfdGltZSkge1xuICAgICAgICAvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExLDE2KTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwxMCk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGNoYW5nZV9zZWxlY3RfdGltZTogZnVuY3Rpb24gKHJlZnJlc2hfZGF0YSkge1xuICAgICAgICAgICAgbGV0IHNfdmFsdWVzID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcbiAgICAgICAgICAgIGxldCBpbnRlcnZhbF9zID0gc192YWx1ZXNbdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbi52YWx1ZV07XG4gICAgICAgICAgICBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBlcG9jaF9lbmQgLSBpbnRlcnZhbF9zO1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHsgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGVwb2NoX2VuZCwgcmVmcmVzaF9kYXRhIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF90aW1lZnJhbWVzX2F2YWlsYWJsZTogZnVuY3Rpb24gKCkge1xuXHQgICAgY29uc3QgdGltZWZyYW1lc19kaWN0ID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZXNfZGljdCgpO1xuICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lc19pZHMgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3QubWFwKCh0cykgPT4gdHMudmFsdWUpO1xuXHQgICAgbGV0IHRpbWVmcmFtZXNfYXZhaWxhYmxlID0ge307XG5cdCAgICB0aW1lZnJhbWVzX2lkcy5mb3JFYWNoKCh0Zl9pZCkgPT4ge1xuXHRcdHRpbWVmcmFtZXNfYXZhaWxhYmxlW3RmX2lkXSA9IHRpbWVmcmFtZXNfZGljdFt0Zl9pZF07XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiB0aW1lZnJhbWVzX2F2YWlsYWJsZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3V0Y19zZWNvbmRzOiBmdW5jdGlvbiAodXRjX21zKSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZ2V0X3V0Y19zZWNvbmRzKHV0Y19tcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzX2JldHdlZW46IGZ1bmN0aW9uICh4LCB5LCB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID49IHkgLSB0b2xlcmFuY2UgJiYgeCA8PSB5O1xuICAgICAgICB9LFxuICAgICAgICB6b29tOiBmdW5jdGlvbiAoc2NhbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IGludGVydmFsID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKSAvIHNjYWxlO1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLyAyICsgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLyAyKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gY2VudGVyIC0gaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gY2VudGVyICsgaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2JhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAtPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2FoZWFkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzX2VuZCA9IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZDtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcblxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kICs9ICgzMCAqIG1pbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gKz0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHByZXZpb3VzX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW1pdF9lcG9jaF9jaGFuZ2U6IGZ1bmN0aW9uIChlcG9jaF9zdGF0dXMsIGlkLCBlbWl0X29ubHlfZ2xvYmFsX2V2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsIHx8IGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsKSB7IHJldHVybjsgfTtcbiAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA+IGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmICh0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkICYmIHRoaXMucm91bmRfdGltZSA9PSB0cnVlKSB7XG5cdFx0ZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5yb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbChlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuXHRcdGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuXHQgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQgIT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25fc3RhdHVzX3VwZGF0ZWQoZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBlcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHQgICAgaWYgKGVtaXRfb25seV9nbG9iYWxfZXZlbnQpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwiZXBvY2hfY2hhbmdlXCIsIGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cdHJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsOiBmdW5jdGlvbih0cykge1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKHRzLCB0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkKTtcblx0fSxcbiAgICAgICAgYWRkX3N0YXR1c19pbl9oaXN0b3J5OiBmdW5jdGlvbiAoZXBvY2hfc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChlcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5X3N0YXR1c19ieV9oaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAvKipcbiAgICAgICBQcml2YXRlIGRhdGUgb2YgdnVlIGNvbXBvbmVudC5cbiAgICAqL1xuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgICAgICAgIC8vc3RhdHVzX2lkOiBcImRhdGUtdGltZS1yYW5nZS1waWNrZXJcIiArIHRoaXMuJHByb3BzLmlkLFxuICAgICAgICAgICAgZXBvY2hfc3RhdHVzOiBudWxsLFxuICAgICAgICAgICAgcmVmcmVzaF9pbnRlcnZhbDogbnVsbCxcbiAgICAgICAgICAgIHJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kczogNjAsXG4gICAgICAgICAgICB1cGRhdGVfZnJvbV9pbnRlcnZhbDogZmFsc2UsXG4gICAgICAgICAgICBoaXN0b3J5OiBbXSxcbiAgICAgICAgICAgIGhpc3RvcnlfbGFzdF9zdGF0dXM6IG51bGwsXG4gICAgICAgICAgICBlbmFibGVfYXBwbHk6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0X3RpbWVfdmFsdWU6IFwiNV9taW5cIixcbiAgICAgICAgICAgIHNlbGVjdGVkX3RpbWVfb3B0aW9uOiB7IHZhbHVlOiBcIjVfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICB3cm9uZ19kYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyb25nX21pbl9pbnRlcnZhbDogZmFsc2UsXG4gICAgICAgICAgICBmbGF0X2JlZ2luX2RhdGU6IG51bGwsXG4gICAgICAgICAgICBmbGF0X2VuZF9kYXRlOiBudWxsLFxuICAgICAgICAgICAgdGltZV9wcmVzZXRfbGlzdDogW1xuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiNV9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjEwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjMwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4zMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiaG91clwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5ob3VyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjZfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMTJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcImRheVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5kYXknKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIndlZWtcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMud2VlaycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwibW9udGhcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMubW9udGgnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcInllYXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMueWVhcicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiY3VzdG9tXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmN1c3RvbScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUsIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uZGF0ZV90aW1lX2lucHV0IHtcbiAgICB3aWR0aDogMTAuNXJlbTtcbiAgICBtYXgtd2lkdGg6IDEwLjVyZW07XG4gICAgbWluLXdpZHRoOiAxMC41cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gYnRuLWdyb3VwLXNtIGZsZXgtd3JhcCBkLWZsZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vcHRpb25cIiA6aWQ9XCIndGltZV9wcmVzZXRfcmFuZ2VfcGlja2VyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc2VsZWN0X3RpbWUobnVsbClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXMtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2FsZW5kYXItYWx0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0IGZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImJlZ2luLWRhdGVcIiBzdHlsZT1cIndpZHRoOjEwcmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfYmVnaW5fZGF0ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJlbmQtZGF0ZVwiIHN0eWxlPVwid2lkdGg6MTByZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiIHN0eWxlPVwid2lkdGg6IDIuNXJlbTtcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cIndyb25nX2RhdGUgfHwgd3JvbmdfbWluX2ludGVydmFsXCIgOnRpdGxlPVwiaW52YWxpZF9kYXRlX21lc3NhZ2VcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjAuMnJlbTtjb2xvcjpyZWQ7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtcy0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cIiFlbmFibGVfYXBwbHkgfHwgd3JvbmdfZGF0ZSB8fCB3cm9uZ19taW5faW50ZXJ2YWxcIiBAY2xpY2s9XCJhcHBseVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIj57e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkxOG4oJ2FwcGx5JykgfX08L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJqdW1wX3RpbWVfYmFjaygpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYmFja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfbGVmdCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImp1bXBfdGltZV9haGVhZCgpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGluayBtZS0yXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1haGVhZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfcmlnaHQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgyKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1pblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21faW4nKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtcGx1c1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgwLjUpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLW91dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21fb3V0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLW1pbnVzXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5KClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl91bmRvJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdW5kb1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cInNlbGVjdF90aW1lX3ZhbHVlID09ICdjdXN0b20nIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiY2hhbmdlX3NlbGVjdF90aW1lKClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fcmVmcmVzaCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4dHJhX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBlbmFibGVfcmVmcmVzaDogQm9vbGVhbixcbiAgICAgICAgZGlzYWJsZWRfZGF0ZV9waWNrZXI6IEJvb2xlYW4sXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXG5cdCAgICByb3VuZF90aW1lOiBCb29sZWFuLCAvL2lmIG1pbl90aW1lX2ludGVydmFsX2lkICE9IG51bGwgcm91bmQgdGltZSBieSBtaW5fdGltZV9pbnRlcnZhbF9pZFxuICAgICAgICBjdXN0b21fdGltZV9pbnRlcnZhbF9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC8vIGEgY29tcHV0ZWQgZ2V0dGVyXG4gICAgICAgIGludmFsaWRfZGF0ZV9tZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53cm9uZ19kYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaTE4bignd3JvbmdfZGF0ZV9yYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy53cm9uZ19taW5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gdGhpcy5pMThuKCd3cm9uZ19taW5faW50ZXJ2YWwnKTtcbiAgICAgICAgICAgICAgICBtc2cucmVwbGFjZSgnJXRpbWVfaW50ZXJ2YWwnLCB0aGlzLmkxOG4oYHNob3dfYWxlcnRzLnByZXNldHMuJHt0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkfWApKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtc2dcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgXCJlbmFibGVfcmVmcmVzaFwiOiBmdW5jdGlvbiAodmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbl90aW1lX2ludGVydmFsX2lkXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0b2RvXG4gICAgICAgIH0sXG4gICAgICAgIFwicm91bmRfdGltZVwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gdG9kb1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImVwb2NoX2NoYW5nZVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGJlZm9yZU1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy4kcHJvcHMuY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3QgPSB0aGlzLiRwcm9wcy5jdXN0b21fdGltZV9pbnRlcnZhbF9saXN0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGZpbHRlciBpbnRlcnZhbFxuICAgICAgICBpZiAodGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3Q7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblx0Y29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcblx0Y29uc3QgbWluX3RpbWVfaW50ZXJ2YWwgPSB0aW1lZnJhbWVzX2RpY3RbdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZF07XG4gICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW5fdGltZV9pbnRlcnZhbCA9PSBudWxsIHx8IHRpbWVmcmFtZXNfZGljdFtlbGVtLnZhbHVlXSA+PSBtaW5fdGltZV9pbnRlcnZhbDtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgICAgICBsZXQgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG4gICAgICAgIGlmIChlcG9jaF9iZWdpbiAhPSBudWxsICYmIGVwb2NoX2VuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXR1c1xuXG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChlcG9jaF9iZWdpbiksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCkgfSwgdGhpcy4kcHJvcHMuaWQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG4gICAgICAgIGxldCBmX3NldF9waWNrZXIgPSAocGlja2VyLCB2YXJfbmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZsYXRwaWNrcigkKHRoaXMuJHJlZnNbcGlja2VyXSksIHtcbiAgICAgICAgICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiZC9tL1kgSDppXCIsXG4gICAgICAgICAgICAgICAgLy9hbHRJbnB1dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvL2RhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuICAgICAgICAgICAgICAgIC8vYWx0Rm9ybWF0OiBcImQtbS1ZIEg6aVwiLFxuICAgICAgICAgICAgICAgIC8vbG9jYWxlOiBcIml0XCIsXG4gICAgICAgICAgICAgICAgdGltZV8yNGhyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsaWNrT3BlbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgLy9tb2RlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgLy9zdGF0aWM6IHRydWUsXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIChzZWxlY3RlZERhdGVzLCBkYXRlU3RyLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5lbmFibGVfYXBwbHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtZS53cm9uZ19kYXRlID0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID4gbWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgbWUud3JvbmdfbWluX2ludGVydmFsID0gbWUubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgbWUuZ2V0X3V0Y19zZWNvbmRzKChtZS5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpIC0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKSA8IG50b3BuZ191dGlsaXR5LmdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQobWUubWluX3RpbWVfaW50ZXJ2YWxfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgLy9tZS5hW2RhdGFdID0gZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlID0gZl9zZXRfcGlja2VyKFwiYmVnaW4tZGF0ZVwiLCBcImJlZ2luX2RhdGVcIik7XG4gICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZSA9IGZfc2V0X3BpY2tlcihcImVuZC1kYXRlXCIsIFwiZW5kX2RhdGVcIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHMuaWQsIG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCAobmV3X3N0YXR1cykgPT4gdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChuZXdfc3RhdHVzKSwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogTWV0aG9kcyBvZiB0aGUgY29tcG9uZW50LiAqL1xuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3RhcnRfcmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24/LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2Vfc2VsZWN0X3RpbWUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5yZWZyZXNoX2ludGVydmFsX3NlY29uZHMgKiAxMDAwKTtcbiAgICAgICAgICAgIC8vIH0sIDEwKiAxMDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXRjX3NfdG9fc2VydmVyX2RhdGU6IGZ1bmN0aW9uICh1dGNfc2Vjb25kcykge1xuICAgICAgICAgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcbiAgICAgICAgICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcbiAgICAgICAgICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIGRfc2VydmVyID0gbmV3IERhdGUodXRjICsgb2Zmc2V0X21zKTtcbiAgICAgICAgICAgIHJldHVybiBkX3NlcnZlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyX2RhdGVfdG9fZGF0ZTogZnVuY3Rpb24gKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgbGV0IHV0YyA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgbGV0IGxvY2FsX29mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbWludXRlcyA9IHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG4gICAgICAgICAgICB2YXIgZF9sb2NhbCA9IG5ldyBEYXRlKHV0YyAtIG9mZnNldF9tcyk7XG4gICAgICAgICAgICByZXR1cm4gZF9sb2NhbDtcbiAgICAgICAgfSxcbiAgICAgICAgb25fc3RhdHVzX3VwZGF0ZWQ6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBlbmRfZGF0ZV90aW1lX3V0YyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlZ2luIGRhdGUgdGltZSBub3cgLSAzMCBtaW51dGVzXG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IGVuZF9kYXRlX3RpbWVfdXRjIC0gMzAgKiA2MCAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmVwb2NoX2VuZCAhPSBudWxsICYmIHN0YXR1cy5lcG9jaF9iZWdpbiAhPSBudWxsXG4gICAgICAgICAgICAgICAgJiYgTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpID4gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbikpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgICAgIGVuZF9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMsIHRoaXMuJHByb3BzLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4pKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2VuZCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tZGF0ZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi10aW1lXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLWRhdGVcIiwgZW5kX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC10aW1lXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3NlbGVjdF90aW1lX3ZhbHVlKGJlZ2luX2RhdGVfdGltZV91dGMsIGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRfc3RhdHVzX2luX2hpc3RvcnkodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmFibGVfYXBwbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybCh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldF9zZWxlY3RfdGltZV92YWx1ZTogZnVuY3Rpb24gKGJlZ2luX3V0YywgZW5kX3V0Yykge1xuICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvbGVyYW5jZSA9IDYwO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXHQgICAgaWYgKHRoaXMucm91bmRfdGltZSA9PSB0cnVlICYmIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCkge1xuXHRcdG5vdyA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwobm93KVxuXHQgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX3V0Yyk7XG4gICAgICAgICAgICBjb25zdCBiZWdpbl91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX3V0Yyk7XG5cdCAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oZW5kX3V0Y19zLCBub3csIHRvbGVyYW5jZSkpIHtcblx0XHR0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gbnVsbDtcblx0XHRmb3IgKGxldCB0aW1lX2lkIGluIHRpbWVmcmFtZXNfZGljdCkge1xuXHRcdCAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSB0aW1lZnJhbWVzX2RpY3RbdGltZV9pZF0sIHRvbGVyYW5jZSkpIHtcblx0XHRcdHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSB0aW1lX2lkO1xuXHRcdCAgICB9XG5cdFx0fVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSA9PSB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gbGV0IGRhdGVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0SG91cnMoZF90aW1lX2JlZ2luLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRNaW51dGVzKGRfdGltZV9iZWdpbi5nZXRNaW51dGVzKCkgKyBkX3RpbWVfYmVnaW4uZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldFNlY29uZHMoZF90aW1lX2JlZ2luLmdldFNlY29uZHMoKSk7XG5cbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0SG91cnMoZF90aW1lX2VuZC5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldE1pbnV0ZXMoZF90aW1lX2VuZC5nZXRNaW51dGVzKCkgKyBkX3RpbWVfZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0U2Vjb25kcyhkX3RpbWVfZW5kLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2JlZ2luLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9lbmQudmFsdWVPZigpKTtcbiAgICAgICAgICAgIGxldCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBpZiAoZXBvY2hfZW5kID4gbm93X3MpIHtcbiAgICAgICAgICAgICAgICBlcG9jaF9lbmQgPSBub3dfcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2V0X2RhdGVfdGltZTogZnVuY3Rpb24ocmVmX25hbWUsIHV0Y190cywgaXNfdGltZSkge1xuICAgICAgICAvLyAgICAgdXRjX3RzID0gdGhpcy5nZXRfdXRjX3NlY29uZHModXRjX3RzKSAqIDEwMDA7ICAgICAgICBcbiAgICAgICAgLy8gICAgIGxldCBkYXRlX3RpbWUgPSBuZXcgRGF0ZSh1dGNfdHMpO1xuICAgICAgICAvLyAgICAgZGF0ZV90aW1lLnNldE1pbnV0ZXMoZGF0ZV90aW1lLmdldE1pbnV0ZXMoKSAtIGRhdGVfdGltZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgLy8gICAgIGlmIChpc190aW1lKSB7XG4gICAgICAgIC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMTEsMTYpO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgY2hhbmdlX3NlbGVjdF90aW1lOiBmdW5jdGlvbiAocmVmcmVzaF9kYXRhKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSgpO1xuICAgICAgICAgICAgbGV0IGludGVydmFsX3MgPSBzX3ZhbHVlc1t0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uLnZhbHVlXTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IGVwb2NoX2VuZCAtIGludGVydmFsX3M7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hfZW5kLCByZWZyZXNoX2RhdGEgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBjb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lZnJhbWVzX2lkcyA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5tYXAoKHRzKSA9PiB0cy52YWx1ZSk7XG5cdCAgICBsZXQgdGltZWZyYW1lc19hdmFpbGFibGUgPSB7fTtcblx0ICAgIHRpbWVmcmFtZXNfaWRzLmZvckVhY2goKHRmX2lkKSA9PiB7XG5cdFx0dGltZWZyYW1lc19hdmFpbGFibGVbdGZfaWRdID0gdGltZWZyYW1lc19kaWN0W3RmX2lkXTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHRpbWVmcmFtZXNfYXZhaWxhYmxlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfdXRjX3NlY29uZHM6IGZ1bmN0aW9uICh1dGNfbXMpIHtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5nZXRfdXRjX3NlY29uZHModXRjX21zKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNfYmV0d2VlbjogZnVuY3Rpb24gKHgsIHksIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggPj0geSAtIHRvbGVyYW5jZSAmJiB4IDw9IHk7XG4gICAgICAgIH0sXG4gICAgICAgIHpvb206IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pIC8gc2NhbGU7XG4gICAgICAgICAgICBsZXQgY2VudGVyID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAvIDIgKyB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAvIDIpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBjZW50ZXIgLSBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBjZW50ZXIgKyBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYWhlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNfZW5kID0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKz0gKDMwICogbWluKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiArPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gcHJldmlvdXNfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBlbWl0X2Vwb2NoX2NoYW5nZTogZnVuY3Rpb24gKGVwb2NoX3N0YXR1cywgaWQsIGVtaXRfb25seV9nbG9iYWxfZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfZW5kID09IG51bGwgfHwgZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwpIHsgcmV0dXJuOyB9O1xuICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID4gZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXHQgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgdGhpcy5yb3VuZF90aW1lID09IHRydWUpIHtcblx0XHRlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG5cdFx0ZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG5cdCAgICB9XG5cbiAgICAgICAgICAgIGlmIChpZCAhPSB0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChlcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdCAgICBpZiAoZW1pdF9vbmx5X2dsb2JhbF9ldmVudCkge1xuXHRcdHJldHVybjtcblx0ICAgIH1cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJlcG9jaF9jaGFuZ2VcIiwgZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcblx0cm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWw6IGZ1bmN0aW9uKHRzKSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQodHMsIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHR9LFxuICAgICAgICBhZGRfc3RhdHVzX2luX2hpc3Rvcnk6IGZ1bmN0aW9uIChlcG9jaF9zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3Rvcnkuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlfc3RhdHVzX2J5X2hpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAgIFByaXZhdGUgZGF0ZSBvZiB2dWUgY29tcG9uZW50LlxuICAgICovXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICAgICAgLy9zdGF0dXNfaWQ6IFwiZGF0ZS10aW1lLXJhbmdlLXBpY2tlclwiICsgdGhpcy4kcHJvcHMuaWQsXG4gICAgICAgICAgICBlcG9jaF9zdGF0dXM6IG51bGwsXG4gICAgICAgICAgICByZWZyZXNoX2ludGVydmFsOiBudWxsLFxuICAgICAgICAgICAgcmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzOiA2MCxcbiAgICAgICAgICAgIHVwZGF0ZV9mcm9tX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgaGlzdG9yeV9sYXN0X3N0YXR1czogbnVsbCxcbiAgICAgICAgICAgIGVuYWJsZV9hcHBseTogZmFsc2UsXG4gICAgICAgICAgICBzZWxlY3RfdGltZV92YWx1ZTogXCI1X21pblwiLFxuICAgICAgICAgICAgc2VsZWN0ZWRfdGltZV9vcHRpb246IHsgdmFsdWU6IFwiNV9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIHdyb25nX2RhdGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JvbmdfbWluX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGZsYXRfYmVnaW5fZGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGZsYXRfZW5kX2RhdGU6IG51bGwsXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0OiBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCI1X21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMTBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMzBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiNl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy42X2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIxMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5kYXRlX3RpbWVfaW5wdXQge1xuICAgIHdpZHRoOiAxMC41cmVtO1xuICAgIG1heC13aWR0aDogMTAuNXJlbTtcbiAgICBtaW4td2lkdGg6IDEwLjVyZW07XG59XG48L3N0eWxlPlxuIiwiZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgaW5zZXJ0QXQgPSByZWYuaW5zZXJ0QXQ7XG5cbiAgaWYgKCFjc3MgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgaWYgKGluc2VydEF0ID09PSAndG9wJykge1xuICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZUluamVjdDtcbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IEBzdWJtaXQucHJldmVudD1cInByZXZlbnRFbnRlclwiIGNsYXNzPVwibW9kYWwgZmFkZVwiIHJlZj1cIm1vZGFsX2lkXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCJkdC1hZGQtZmlsdGVyLW1vZGFsLXRpdGxlXCJcbiAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLWxnXCIgcm9sZT1cImRvY3VtZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5cblx0ICA8c2xvdCBuYW1lPVwidGl0bGVcIj48L3Nsb3Q+XG5cdDwvaDU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jbG9zZVwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG5cdDxzbG90IG5hbWU9XCJib2R5XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtci1hdXRvXCI+XG4gICAgICAgIDwvZGl2PlxuXHQ8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyB0ZXN0LWZlZWRiYWNrIHctMTAwXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICBlbWl0czogW1wiaGlkZGVuXCIsIFwic2hvd2VkXCIsIFwiY2xvc2VNb2RhbFwiLCBcIm9wZW5Nb2RhbFwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bGV0IG1lID0gdGhpcztcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBtZS4kZW1pdChcInNob3dlZFwiKTtcblx0fSk7XG5cdCQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwiaGlkZGVuXCIpO1xuXHR9KTtcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwic2hvd1wiKTtcbiAgICAgIC8vIGVtaXQgb3Blbm1vZGFsIHRvIGRpc2FibGUgdGhlIGF1dG9yZWZyZXNoIG9uIHZzIHBhZ2UuXG4gICAgICB0aGlzLiRlbWl0KFwib3Blbk1vZGFsXCIpO1xuXHR9LFxuXHRwcmV2ZW50RW50ZXI6IGZ1bmN0aW9uKCkge30sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcImhpZGVcIik7XG4gICAgICAvLyBlbWl0IGNsb3NlbW9kYWwgdG8gZW5hYmxlIChldmVudHVhbGx5IGlmIGF1dG9yZWZyZXNoIHZhcmlhYmxlIGlzIHRydWUpXG4gICAgICAvLyB0aGUgYXV0b3JlZnJlc2ggb24gdnMgcGFnZS5cbiAgICAgIHRoaXMuJGVtaXQoXCJjbG9zZU1vZGFsXCIpO1xuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgQHN1Ym1pdC5wcmV2ZW50PVwicHJldmVudEVudGVyXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgcmVmPVwibW9kYWxfaWRcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbGFiZWxsZWRieT1cImR0LWFkZC1maWx0ZXItbW9kYWwtdGl0bGVcIlxuICAgICBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGdcIiByb2xlPVwiZG9jdW1lbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuXHQgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cblx0PC9oNT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNsb3NlXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cblx0PHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1yLWF1dG9cIj5cbiAgICAgICAgPC9kaXY+XG5cdDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIHRlc3QtZmVlZGJhY2sgdy0xMDBcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjbG9zZU1vZGFsXCIsIFwib3Blbk1vZGFsXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgbWUgPSB0aGlzO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwic2hvd2VkXCIpO1xuXHR9KTtcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJoaWRkZW5cIik7XG5cdH0pO1xuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJzaG93XCIpO1xuICAgICAgLy8gZW1pdCBvcGVubW9kYWwgdG8gZGlzYWJsZSB0aGUgYXV0b3JlZnJlc2ggb24gdnMgcGFnZS5cbiAgICAgIHRoaXMuJGVtaXQoXCJvcGVuTW9kYWxcIik7XG5cdH0sXG5cdHByZXZlbnRFbnRlcjogZnVuY3Rpb24oKSB7fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwiaGlkZVwiKTtcbiAgICAgIC8vIGVtaXQgY2xvc2Vtb2RhbCB0byBlbmFibGUgKGV2ZW50dWFsbHkgaWYgYXV0b3JlZnJlc2ggdmFyaWFibGUgaXMgdHJ1ZSlcbiAgICAgIC8vIHRoZSBhdXRvcmVmcmVzaCBvbiB2cyBwYWdlLlxuICAgICAgdGhpcy4kZW1pdChcImNsb3NlTW9kYWxcIik7XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCIvKlxuICogKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuICovXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCByZWdleGVzID0ge1xuICAgIGlwdjQ6IFN0cmluZy5yYXdgXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJGAsXG4gICAgaXB2NjogU3RyaW5nLnJhd2BeKD86KD86W2EtZkEtRlxcZF17MSw0fTopezd9KD86W2EtZkEtRlxcZF17MSw0fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7Nn0oPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318OlthLWZBLUZcXGRdezEsNH18Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezV9KD86Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSwyfXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7NH0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCwxfTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsM318Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezN9KD86KD86OlthLWZBLUZcXGRdezEsNH0pezAsMn06KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDR9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXsyfSg/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDN9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw1fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7MX0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCw0fTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsNn18Oil8KD86Oig/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDV9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw3fXw6KSkpKD86JVswLTlhLXpBLVpdezEsfSk/JGAsXG4gICAgbWFjX2FkZHJlc3M6IFN0cmluZy5yYXdgXihbMC05QS1GYS1mXXsyfTopezV9KFswLTlBLUZhLWZdezJ9KSRgLFxuICAgIGNvbW1hX3NlcGFydGVkX3BvcnRfcmVnZXg6IFN0cmluZy5yYXdgXihcXGR7MSw1fSkoLFxccypcXGR7MSw1fSkqJGAsXG4gICAgcG9ydF9yYW5nZV9yZWdleDogU3RyaW5nLnJhd2BeKFxcZHsxLDV9KS0oXFxkezEsNX0pJGAsXG5cdGhvc3RfbmFtZTogU3RyaW5nLnJhd2BeKD8hXFxzKiQpW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfXxeW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfUBbMC05XXswLDV9YCxcbiAgICBzaW5nbGV3b3JkOiBTdHJpbmcucmF3YF4oPz1bYS16QS1aMC05Ll86XFwtXXszLDI1M30kKSg/IS4qW18uOlxcLV17Mn0pW15fLjpcXC1dLipbXl8uOlxcLV0kYCxcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHZhbGlkYXRlSVAgPSAoaXApID0+IHtcbiAgICByZXR1cm4gKHZhbGlkYXRlSVB2NChpcCkgfHwgdmFsaWRhdGVJUHY2KGlwKSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUlQdjQgPSAoaXApID0+IHtcbiAgICBjb25zdCBpcHY0ID0gbmV3IFJlZ0V4cChyZWdleGVzLmlwdjQpO1xuXG4gICAgcmV0dXJuIGlwdjQudGVzdChpcCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUlQdjYgPSAoaXApID0+IHtcbiAgICBjb25zdCBpcHY2ID0gbmV3IFJlZ0V4cChyZWdleGVzLmlwdjYpO1xuXG4gICAgcmV0dXJuIGlwdjYudGVzdChpcCk7XG59XG5cbmNvbnN0IHZhbGlkYXRlSG9zdE5hbWUgPSAoaG9zdF9uYW1lKSA9PiB7XG5cdGNvbnN0IGhvc3RfbmFtZV9yZWdleHAgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuaG9zdF9uYW1lKTtcblxuXHRyZXR1cm4gaG9zdF9uYW1lX3JlZ2V4cC50ZXN0KGhvc3RfbmFtZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUNvbW1hU2VwYXJhdGVkUG9ydExpc3QgPSAocG9ydHMpID0+IHtcbiAgICBjb25zdCBwb3J0X2xpc3QgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuY29tbWFfc2VwYXJ0ZWRfcG9ydF9yZWdleCk7XG5cbiAgICByZXR1cm4gcG9ydF9saXN0LnRlc3QocG9ydHMpO1xufVxuXG5jb25zdCB2YWxpZGF0ZVNpbmdsZVdvcmQgPSAod29yZCkgPT4ge1xuICAgIGNvbnN0IHNpbmdlbFdvcmRSZWdleCA9IG5ldyBSZWdFeHAocmVnZXhlcy5zaW5nbGV3b3JkKVxuXG4gICAgcmV0dXJuIHNpbmdlbFdvcmRSZWdleC50ZXN0KHdvcmQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgdmFsaWRhdGVQb3J0UmFuZ2UgPSAocG9ydHMpID0+IHtcbiAgICBjb25zdCBwb3J0X2FycmF5ID0gcG9ydHMuc3BsaXQoXCItXCIsIDIpO1xuICAgIGNvbnN0IGxvdyA9IE51bWJlcihwb3J0X2FycmF5WzBdKTtcbiAgICBjb25zdCBoaWdoID0gTnVtYmVyKHBvcnRfYXJyYXlbMV0pO1xuXG4gICAgaWYgKChpc05hTihsb3cpKSB8fCAoaXNOYU4oaGlnaCkpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoKGxvdyA+IDApICYmIChsb3cgPCBoaWdoKSAmJiAoaGlnaCA8IDY1NTM2KSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcblxuY29uc3QgVXRpbHMgPSBOdG9wVXRpbHM7XG5mdW5jdGlvbiBnZXRfZGF0YV9wYXR0ZXJuKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSBcInRleHRcIikge1xuICAgICAgICByZXR1cm4gYC4qYDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJ2bGFuXCIpIHtcbiAgICAgICAgbGV0IHZsYW4gPSBTdHJpbmcucmF3YEAoKFsxLTldKXwoWzEtOV1bMC05XXsxLDJ9KXwoWzEtM11bMC05XXszfSl8KDQwWzAtOF1bMC05XSl8KDQwOVswLTVdKSlgO1xuICAgICAgICByZXR1cm4gdmxhbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJpcFwiIHx8IHR5cGUgPT0gXCJjaWRyXCIpIHtcbiAgICAgICAgbGV0IHZsYW4gPSBnZXRfZGF0YV9wYXR0ZXJuKFwidmxhblwiKTtcbiAgICAgICAgbGV0IHJfaXB2NCA9IFV0aWxzLlJFR0VYRVMuaXB2NDtcbiAgICAgICAgbGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIGAke3ZsYW59JGApO1xuICAgICAgICBsZXQgcl9pcHY2ID0gVXRpbHMuUkVHRVhFUy5pcHY2O1xuICAgICAgICBsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7dmxhbn0kYCk7XG4gICAgICAgIGlmICh0eXBlID09IFwiY2lkclwiKSB7XG4gICAgICAgICAgICBsZXQgbmV0d29ya19pcHY0ID0gU3RyaW5nLnJhd2AoXFwvKChbMS05XSl8KFsxLTJdWzAtOV0pfCgzWzAtMl0pKSlgO1xuICAgICAgICAgICAgbGV0IGlwdjRfY2lkciA9IHJfaXB2NC5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjR9JGApO1xuICAgICAgICAgICAgbGV0IGlwdjRfY2lkcl92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIGAke25ldHdvcmtfaXB2NH0ke3ZsYW59JGApO1xuICAgICAgICAgICAgbGV0IG5ldHdvcmtfaXB2NiA9IFN0cmluZy5yYXdgKFxcLygoWzEtOV0pfChbMS05XVswLTldKXwoMVswLTFdWzAtOV0pfCgxMlswLThdKSkpYDtcbiAgICAgICAgICAgIGxldCBpcHY2X2NpZHIgPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7bmV0d29ya19pcHY2fSRgKTtcbiAgICAgICAgICAgIGxldCBpcHY2X2NpZHJfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjZ9JHt2bGFufSRgKTtcbiAgICAgICAgICAgIHJldHVybiBgKCR7aXB2NF9jaWRyfXwke2lwdjRfY2lkcl92bGFufXwke2lwdjZfY2lkcn18JHtpcHY2X2NpZHJfdmxhbn0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwibWFjXCIpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLlJFR0VYRVNbXCJtYWNBZGRyZXNzXCJdO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImlwLGNpZHJcIikge1xuICAgICAgICBsZXQgaXAgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiaXBcIik7XG4gICAgICAgIGxldCBjaWRyID0gZ2V0X2RhdGFfcGF0dGVybihcImNpZHJcIik7XG4gICAgICAgIHJldHVybiBgKCR7aXB9KXwoJHtjaWRyfSlgO1xuICAgIH1cbiAgICByZXR1cm4gVXRpbHMuUkVHRVhFU1t0eXBlXTtcbn1cblxuY29uc3QgcmVnZXhWYWxpZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldF9kYXRhX3BhdHRlcm4sXG4gICAgICAgIHZhbGlkYXRlSVAsXG4gICAgICAgIHZhbGlkYXRlSVB2NCxcbiAgICAgICAgdmFsaWRhdGVJUHY2LFxuXHRcdHZhbGlkYXRlSG9zdE5hbWUsXG4gICAgICAgIHZhbGlkYXRlQ29tbWFTZXBhcmF0ZWRQb3J0TGlzdCxcbiAgICAgICAgdmFsaWRhdGVQb3J0UmFuZ2UsXG4gICAgICAgIHZhbGlkYXRlU2luZ2xlV29yZCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCByZWdleFZhbGlkYXRpb247XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ2FsZXJ0c19kYXNoYm9hcmQuYWRkX2ZpbHRlcicpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJkdC1maWx0ZXItdHlwZS1zZWxlY3RcIj5cblx0ICA8Yj5GaWx0ZXI8L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsdGVyX3R5cGVfc2VsZWN0ZWRcIlxuICAgICAgOmlkPVwiJ2ZpbHRlcl90eXBlJ1wiXG4gICAgICA6b3B0aW9ucz1cImZpbHRlcnNfb3B0aW9uc1wiXG4gICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9maWx0ZXIoKVwiPlxuICAgIDwvc2VsZWN0LXNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkdC1maWx0ZXItdGVtcGxhdGUtY29udGFpbmVyIGZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCI+XG4gICAgICAgICAgPGI+e3tmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmQgY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcGVyYXRvcl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ29wZXJhdG9yX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3BlcmF0b3JzX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX29wZXJhdG9yX3R5cGVcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0J1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2RhdGFfZmlsdGVyXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1lbHNlLWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0LXdpdGgtaW5wdXQnXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPVwiJ2RhdGFfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphZGRfdGFnPVwidHJ1ZVwiXG5cdFx0XHQgICAgIDpwYXR0ZXJuPVwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaW5wdXRfdmFsdWVcIiA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiIG5hbWU9XCJ2YWx1ZVwiIDpyZXF1aXJlZD1cImlucHV0X3JlcXVpcmVkXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtcIiBjbGFzcz1cImFsZXJ0IGludmFsaWQtZmVlZGJhY2tcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8IS0tIGVuZCBkaXYgaW5wdXQtZ3JvdXAgbWItMyAtLT5cblx0PC9kaXY+XG5cdDwhLS0gZW5kIGRpdiBmb3JtLWdyb3VwLXJvdyAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gJy4vc2VsZWN0LXNlYXJjaC52dWUnXG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcblx0J3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSwgXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0ZmlsdGVyc19vcHRpb25zOiBBcnJheSxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBqUXVlcnk6ICQsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0ICAgIGZpbHRlcl90eXBlX3NlbGVjdGVkOiB7fSxcblx0ICAgIGZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgb3BlcmF0b3Jfc2VsZWN0ZWQ6IHt9LFxuXHQgICAgb3B0aW9uX3NlbGVjdGVkOiB7fSxcblx0ICAgIGlucHV0X3ZhbHVlOiBudWxsLFxuXHQgICAgaW5wdXRfdHlwZTogbnVsbCxcblx0ICAgIGRhdGFfcGF0dGVybl9zZWxlY3RlZDogbnVsbCxcblx0ICAgIGlucHV0X3JlcXVpcmVkOiBmYWxzZSxcblx0ICAgIG9wdGlvbnNfdG9fc2hvdzogbnVsbCxcblx0ICAgIG9wZXJhdG9yc190b19zaG93OiBbXSxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge30sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0YXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbCk7XG5cdG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCAoZmlsdGVyKSA9PiB0aGlzLnNob3coZmlsdGVyKSk7XHRcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgaWYgKHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucyA9PSBudWxsIHx8IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5sZW5ndGggPT0gMCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG5cdCAgXHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gZmlsdGVyO1xuXHRcdHRoaXMuY2hhbmdlX2ZpbHRlcihmaWx0ZXIpO1x0XHRcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9uc1swXTtcblx0XHR0aGlzLmNoYW5nZV9maWx0ZXIoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHBvc3RfY2hhbmdlOiBmdW5jdGlvbihmaWx0ZXIsIHZhbHVlX3R5cGUpIHtcblx0ICAgIGlmIChmaWx0ZXIuaWQgJiYgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zKSB7XG5cdFx0LyogRmlsdGVyIHR5cGUgc2VsZWN0ZWQsIGUuZy4gQWxlcnQgVHlwZSwgQXBwbGljYXRpb24sIGVjYy4gKi9cblx0XHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIuaWQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlci52YWx1ZSAhPSBudWxsKSB7XG5cdFx0LyogRmlsdGVyIHNlbGVjdGVkIGZvciB0aGUgdHlwZSwgZS5nLiBETlMsIElDTVAsIGVjYy4gKi9cblx0XHRpZiAodGhpcy5vcHRpb25zX3RvX3Nob3cpIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHt9O1xuXHRcdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gZmlsdGVyLnZhbHVlO1xuXHRcdCAgICB0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcblx0XHR9XG5cdCAgICB9XG5cdCAgICBpZiAoZmlsdGVyLm9wZXJhdG9yICYmIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cpIHtcblx0XHQvKiBPcGVyYXRvciBmaWx0ZXIgc2VsZWN0ZWQsIGUuZy4gPSwgIT0sIGVjYy4gKi9cblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gdGhpcy5vcGVyYXRvcnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLm9wZXJhdG9yKTtcblx0ICAgIH1cblx0fSxcblx0Y2hhbmdlX29wZXJhdG9yX3R5cGU6IGZ1bmN0aW9uKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUpIHtcblx0ICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBzZWxlY3RlZF9vcGVyYXRvcl90eXBlXG5cdH0sXG5cdGNoYW5nZV9kYXRhX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHNlbGVjdGVkX2ZpbHRlclxuXHR9LCAgXG5cdGNoYW5nZV9pbnB1dF92YWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBpbnB1dDtcblx0fSxcblx0Y2hhbmdlX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IG51bGw7XG5cdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gbnVsbFxuXHQgICAgbGV0IGZpbHRlcnNfb3B0aW9ucyA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucztcblx0ICAgIC8qIFNlYXJjaCB0aGUgZmlsdGVyIHNlbGVjdGVkICovXG5cdCAgICBsZXQgZmlsdGVyID0gZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcblx0ICAgIGlmIChmaWx0ZXIgPT0gbnVsbCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgLyogU2V0IHRoZSBjb3JyZWN0IGZpbHRlcnMgdG8gZGlzcGxheSAqL1xuXHQgICAgdGhpcy5pbnB1dF90eXBlID0gZmlsdGVyLnR5cGU7XG5cdCAgICB0aGlzLm9wZXJhdG9yc190b19zaG93ID0gZmlsdGVyLm9wZXJhdG9ycztcblx0ICAgIHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQgPSBmaWx0ZXIubGFiZWw7XG5cdCAgICBpZiAodGhpcy5pbnB1dF90eXBlID09ICdzZWxlY3QnKSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBmaWx0ZXIub3B0aW9ucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcblx0XHR9KTtcblx0XHR0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLmlucHV0X3R5cGUgPT0gJ3NlbGVjdC13aXRoLWlucHV0Jykge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnM/LnNvcnQoKGEsIGIpID0+IHtcblx0XHQgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG5cdFx0ICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG5cdFx0ICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3dbMF07XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZihmaWx0ZXIub3BlcmF0b3JzICYmIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQ/LmlkID09IG51bGwpIHtcblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gZmlsdGVyLm9wZXJhdG9yc1swXVxuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZiAoc2VsZWN0ZWRfZmlsdGVyICE9IG51bGwpIHsgXG5cdFx0dGhpcy5wb3N0X2NoYW5nZShzZWxlY3RlZF9maWx0ZXIsIGZpbHRlci52YWx1ZV90eXBlKTsgXG5cdCAgICB9XG5cdH0sXG5cdGdldF9kYXRhX3BhdHRlcm46IGZ1bmN0aW9uKHZhbHVlX3R5cGUpIHtcblx0ICAgIHRoaXMuaW5wdXRfcmVxdWlyZWQgPSB0cnVlO1xuXHQgICAgaWYgKHZhbHVlX3R5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0XHR0aGlzLmlucHV0X3JlcXVpcmVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGAuKmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cdCAgICBcblx0ICAgIC8vIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJpcFwiKSB7XG5cdCAgICAvLyBcdGxldCByX2lwdjQgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY0O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZShcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdGxldCByX2lwdjYgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcblx0ICAgIC8vIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgLy8gXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG5cdCAgICAvLyB9XG5cdCAgICBcblx0ICAgIC8vIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcblx0fSxcblx0Y2hlY2tfZGlzYWJsZV9hcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkKTtcblx0ICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gIXRoaXMub3B0aW9uc190b19zaG93ICYmIChcblx0XHQodGhpcy5pbnB1dF9yZXF1aXJlZCAmJiAodGhpcy5pbnB1dF92YWx1ZSA9PSBudWxsIHx8IHRoaXMuaW5wdXRfdmFsdWUgPT0gXCJcIikpXG5cdFx0ICAgIHx8IChyZWdleC50ZXN0KHRoaXMuaW5wdXRfdmFsdWUpID09IGZhbHNlKVxuXHQgICAgKTtcblx0ICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xuXHR9LFxuXHRhcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0X3ZhbHVlO1xuXHQgICAgbGV0IHZhbHVlX2xhYmVsID0gdGhpcy5pbnB1dF92YWx1ZTtcblx0ICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh0aGlzLm9wdGlvbl9zZWxlY3RlZD8udmFsdWUgIT0gbnVsbCkpIHtcblx0XHRsZXQgZmlsdGVyID0gdGhpcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuICAgICAgICAgICAgICAgIFxuXHRcdGxldCBvcHRpb24gPSBmaWx0ZXIub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHRoaXMub3B0aW9uX3NlbGVjdGVkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gdGhpcy5vcHRpb25fc2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuXHRcdHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuXHRcdHZhbHVlX2xhYmVsID0gb3B0aW9uLnZhbHVlX2xhYmVsIHx8IG9wdGlvbi5sYWJlbDtcblx0ICAgIH1cblx0ICAgIGxldCBwYXJhbXMgPSB7XG5cdFx0aWQ6IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQsXG5cdFx0bGFiZWw6IHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQsXG5cdFx0b3BlcmF0b3I6IHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQuaWQsXG5cdFx0dmFsdWU6IHZhbHVlLFxuXHRcdHZhbHVlX2xhYmVsOiB2YWx1ZV9sYWJlbCxcblx0ICAgIH07XG5cdCAgICB0aGlzLiRlbWl0KFwiYXBwbHlcIiwgcGFyYW1zKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5NT0RBTF9GSUxURVJTX0FQUExZLCBwYXJhbXMpO1xuXHQgICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCdhbGVydHNfZGFzaGJvYXJkLmFkZF9maWx0ZXInKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxmb3JtIGF1dG9jb21wbGV0ZT1cIm9mZlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCIgZm9yPVwiZHQtZmlsdGVyLXR5cGUtc2VsZWN0XCI+XG5cdCAgPGI+RmlsdGVyPC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImZpbHRlcl90eXBlX3NlbGVjdGVkXCJcbiAgICAgIDppZD1cIidmaWx0ZXJfdHlwZSdcIlxuICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJzX29wdGlvbnNcIlxuICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZmlsdGVyKClcIj5cbiAgICA8L3NlbGVjdC1zZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aHI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZHQtZmlsdGVyLXRlbXBsYXRlLWNvbnRhaW5lciBmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiPlxuICAgICAgICAgIDxiPnt7ZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWR9fTwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIG1iLTNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kIGNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3BlcmF0b3Jfc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgIDppZD1cIidvcGVyYXRvcl9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wZXJhdG9yc190b19zaG93XCJcbiAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9vcGVyYXRvcl90eXBlXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1pZj1cImlucHV0X3R5cGUgPT0gJ3NlbGVjdCdcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcHRpb25fc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9XCInZGF0YV9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiIHYtZWxzZS1pZj1cImlucHV0X3R5cGUgPT0gJ3NlbGVjdC13aXRoLWlucHV0J1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YWRkX3RhZz1cInRydWVcIlxuXHRcdFx0ICAgICA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3B0aW9uc190b19zaG93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGF0YV9maWx0ZXJcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cImlucHV0X3ZhbHVlXCIgOnBhdHRlcm49XCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWRcIiBuYW1lPVwidmFsdWVcIiA6cmVxdWlyZWQ9XCJpbnB1dF9yZXF1aXJlZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7XCIgY2xhc3M9XCJhbGVydCBpbnZhbGlkLWZlZWRiYWNrXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPCEtLSBlbmQgZGl2IGlucHV0LWdyb3VwIG1iLTMgLS0+XG5cdDwvZGl2PlxuXHQ8IS0tIGVuZCBkaXYgZm9ybS1ncm91cC1yb3cgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tICcuL3NlbGVjdC1zZWFyY2gudnVlJ1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG5cdCdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sIFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGZpbHRlcnNfb3B0aW9uczogQXJyYXksXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgalF1ZXJ5OiAkLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdCAgICBmaWx0ZXJfdHlwZV9zZWxlY3RlZDoge30sXG5cdCAgICBmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZDogbnVsbCxcblx0ICAgIG9wZXJhdG9yX3NlbGVjdGVkOiB7fSxcblx0ICAgIG9wdGlvbl9zZWxlY3RlZDoge30sXG5cdCAgICBpbnB1dF92YWx1ZTogbnVsbCxcblx0ICAgIGlucHV0X3R5cGU6IG51bGwsXG5cdCAgICBkYXRhX3BhdHRlcm5fc2VsZWN0ZWQ6IG51bGwsXG5cdCAgICBpbnB1dF9yZXF1aXJlZDogZmFsc2UsXG5cdCAgICBvcHRpb25zX3RvX3Nob3c6IG51bGwsXG5cdCAgICBvcGVyYXRvcnNfdG9fc2hvdzogW10sXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHt9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWwpO1xuXHRudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgKGZpbHRlcikgPT4gdGhpcy5zaG93KGZpbHRlcikpO1x0XG5cdC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbihmaWx0ZXIpIHtcblx0ICAgIGlmICh0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMgPT0gbnVsbCB8fCB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMubGVuZ3RoID09IDApIHsgXG5cdFx0cmV0dXJuOyBcblx0ICAgIH1cblx0ICAgIGlmIChmaWx0ZXIgIT0gbnVsbCkge1xuXHQgIFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IGZpbHRlcjtcblx0XHR0aGlzLmNoYW5nZV9maWx0ZXIoZmlsdGVyKTtcdFx0XG5cdCAgICB9IGVsc2Uge1xuXHRcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnNbMF07XG5cdFx0dGhpcy5jaGFuZ2VfZmlsdGVyKCk7XG5cdCAgICB9XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRwb3N0X2NoYW5nZTogZnVuY3Rpb24oZmlsdGVyLCB2YWx1ZV90eXBlKSB7XG5cdCAgICBpZiAoZmlsdGVyLmlkICYmIHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucykge1xuXHRcdC8qIEZpbHRlciB0eXBlIHNlbGVjdGVkLCBlLmcuIEFsZXJ0IFR5cGUsIEFwcGxpY2F0aW9uLCBlY2MuICovXG5cdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLmlkKTtcblx0ICAgIH1cblx0ICAgIGlmIChmaWx0ZXIudmFsdWUgIT0gbnVsbCkge1xuXHRcdC8qIEZpbHRlciBzZWxlY3RlZCBmb3IgdGhlIHR5cGUsIGUuZy4gRE5TLCBJQ01QLCBlY2MuICovXG5cdFx0aWYgKHRoaXMub3B0aW9uc190b19zaG93KSB7XG5cdFx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB7fTtcblx0XHQgICAgdGhpcy5pbnB1dF92YWx1ZSA9IGZpbHRlci52YWx1ZTtcblx0XHQgICAgdGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cdFx0fVxuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlci5vcGVyYXRvciAmJiB0aGlzLm9wZXJhdG9yc190b19zaG93KSB7XG5cdFx0LyogT3BlcmF0b3IgZmlsdGVyIHNlbGVjdGVkLCBlLmcuID0sICE9LCBlY2MuICovXG5cdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHRoaXMub3BlcmF0b3JzX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5vcGVyYXRvcik7XG5cdCAgICB9XG5cdH0sXG5cdGNoYW5nZV9vcGVyYXRvcl90eXBlOiBmdW5jdGlvbihzZWxlY3RlZF9vcGVyYXRvcl90eXBlKSB7XG5cdCAgICB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZVxuXHR9LFxuXHRjaGFuZ2VfZGF0YV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuXHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBzZWxlY3RlZF9maWx0ZXJcblx0fSwgIFxuXHRjaGFuZ2VfaW5wdXRfdmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gaW5wdXQ7XG5cdH0sXG5cdGNoYW5nZV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuXHQgICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuXHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBudWxsO1xuXHQgICAgdGhpcy5pbnB1dF92YWx1ZSA9IG51bGxcblx0ICAgIGxldCBmaWx0ZXJzX29wdGlvbnMgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnM7XG5cdCAgICAvKiBTZWFyY2ggdGhlIGZpbHRlciBzZWxlY3RlZCAqL1xuXHQgICAgbGV0IGZpbHRlciA9IGZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG5cdCAgICBpZiAoZmlsdGVyID09IG51bGwpIHsgXG5cdFx0cmV0dXJuOyBcblx0ICAgIH1cblx0ICAgIC8qIFNldCB0aGUgY29ycmVjdCBmaWx0ZXJzIHRvIGRpc3BsYXkgKi9cblx0ICAgIHRoaXMuaW5wdXRfdHlwZSA9IGZpbHRlci50eXBlO1xuXHQgICAgdGhpcy5vcGVyYXRvcnNfdG9fc2hvdyA9IGZpbHRlci5vcGVyYXRvcnM7XG5cdCAgICB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkID0gZmlsdGVyLmxhYmVsO1xuXHQgICAgaWYgKHRoaXMuaW5wdXRfdHlwZSA9PSAnc2VsZWN0Jykge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuXHRcdCAgICBpZiAoYSA9PSBudWxsIHx8IGEubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gLTE7IH1cblx0XHQgICAgaWYgKGIgPT0gbnVsbCB8fCBiLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIDE7IH1cblx0XHQgICAgcmV0dXJuIGEubGFiZWwudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9TdHJpbmcoKSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvd1swXTtcblx0ICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dF90eXBlID09ICdzZWxlY3Qtd2l0aC1pbnB1dCcpIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IGZpbHRlci5vcHRpb25zPy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcblx0XHR9KTtcblx0XHR0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuXHRcdHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKGZpbHRlci52YWx1ZV90eXBlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuXHRcdHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKGZpbHRlci52YWx1ZV90eXBlKTtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgaWYoZmlsdGVyLm9wZXJhdG9ycyAmJiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkPy5pZCA9PSBudWxsKSB7XG5cdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IGZpbHRlci5vcGVyYXRvcnNbMF1cblx0ICAgIH1cblx0ICAgIFxuXHQgICAgaWYgKHNlbGVjdGVkX2ZpbHRlciAhPSBudWxsKSB7IFxuXHRcdHRoaXMucG9zdF9jaGFuZ2Uoc2VsZWN0ZWRfZmlsdGVyLCBmaWx0ZXIudmFsdWVfdHlwZSk7IFxuXHQgICAgfVxuXHR9LFxuXHRnZXRfZGF0YV9wYXR0ZXJuOiBmdW5jdGlvbih2YWx1ZV90eXBlKSB7XG5cdCAgICB0aGlzLmlucHV0X3JlcXVpcmVkID0gdHJ1ZTtcblx0ICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdFx0dGhpcy5pbnB1dF9yZXF1aXJlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBgLipgO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuXHQgICAgXG5cdCAgICAvLyBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0ICAgIC8vIFx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG5cdCAgICAvLyB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjaWRyXCIpIHtcblx0ICAgIC8vIFx0Y29uc29sZS5sb2coXCJ0ZXN0XCIpO1xuXHQgICAgLy8gfVxuXHQgICAgXG5cdCAgICAvLyByZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVNbdmFsdWVfdHlwZV07XG5cdH0sXG5cdGNoZWNrX2Rpc2FibGVfYXBwbHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCk7XG5cdCAgICBsZXQgZGlzYWJsZV9hcHBseSA9ICF0aGlzLm9wdGlvbnNfdG9fc2hvdyAmJiAoXG5cdFx0KHRoaXMuaW5wdXRfcmVxdWlyZWQgJiYgKHRoaXMuaW5wdXRfdmFsdWUgPT0gbnVsbCB8fCB0aGlzLmlucHV0X3ZhbHVlID09IFwiXCIpKVxuXHRcdCAgICB8fCAocmVnZXgudGVzdCh0aGlzLmlucHV0X3ZhbHVlKSA9PSBmYWxzZSlcblx0ICAgICk7XG5cdCAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcblx0fSxcblx0YXBwbHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHZhbHVlID0gdGhpcy5pbnB1dF92YWx1ZTtcblx0ICAgIGxldCB2YWx1ZV9sYWJlbCA9IHRoaXMuaW5wdXRfdmFsdWU7XG5cdCAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodGhpcy5vcHRpb25fc2VsZWN0ZWQ/LnZhbHVlICE9IG51bGwpKSB7XG5cdFx0bGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcbiAgICAgICAgICAgICAgICBcblx0XHRsZXQgb3B0aW9uID0gZmlsdGVyLm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSB0aGlzLm9wdGlvbl9zZWxlY3RlZC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IHRoaXMub3B0aW9uX3NlbGVjdGVkO1xuICAgICAgICAgICAgICAgIH1cblx0XHR2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcblx0XHR2YWx1ZV9sYWJlbCA9IG9wdGlvbi52YWx1ZV9sYWJlbCB8fCBvcHRpb24ubGFiZWw7XG5cdCAgICB9XG5cdCAgICBsZXQgcGFyYW1zID0ge1xuXHRcdGlkOiB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkLFxuXHRcdGxhYmVsOiB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkLFxuXHRcdG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkLmlkLFxuXHRcdHZhbHVlOiB2YWx1ZSxcblx0XHR2YWx1ZV9sYWJlbDogdmFsdWVfbGFiZWwsXG5cdCAgICB9O1xuXHQgICAgdGhpcy4kZW1pdChcImFwcGx5XCIsIHBhcmFtcyk7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuTU9EQUxfRklMVEVSU19BUFBMWSwgcGFyYW1zKTtcblx0ICAgIHRoaXMuY2xvc2UoKTtcblx0fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdH0sXG4gICAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWItMVwiPlxuICAgICAgICAgICAgPG1vZGFsLWZpbHRlcnMgOmZpbHRlcnNfb3B0aW9ucz1cIm1vZGFsX2RhdGFcIiBAYXBwbHk9XCJhcHBseV9tb2RhbFwiIHJlZj1cIm1vZGFsX2ZpbHRlcnNcIiA6aWQ9XCJpZF9tb2RhbF9maWx0ZXJzXCI+XG4gICAgICAgICAgICA8L21vZGFsLWZpbHRlcnM+XG4gICAgICAgICAgICA8ZGF0ZS10aW1lLXJhbmdlLXBpY2tlciA6aWQ9XCJpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyXCIgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIiA6cm91bmRfdGltZT1cInJvdW5kX3RpbWVcIj5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJlZ2luPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJpc19hbGVydF9zdGF0c191cmxcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDowLjFyZW07XCIgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBpZD1cInN0YXR1c1N3aXRjaFwiIHJvbGU9XCJncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtaWY9XCJwYWdlICE9ICdmbG93J1wiIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdlbmdhZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnZW5nYWdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1ob3VyZ2xhc3MtaGFsZlwiIHRpdGxlPVwiRW5nYWdlZFwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2hpc3RvcmljYWwnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdoaXN0b3JpY2FsJyB8fCAocGFnZSA9PSAnZmxvdycgJiYgc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnKSwgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdoaXN0b3JpY2FsJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnIHx8IChwYWdlID09ICdmbG93JyAmJiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcpIH1cIj48aSBjbGFzcz1cImZhLXJlZ3VsYXIgZmEtZXllXCIgdGl0bGU9XCJSZXF1aXJlIEF0dGVudGlvblwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYWNrbm93bGVkZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhY2tub3dsZWRnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaGVjay1kb3VibGVcIiB0aXRsZT1cIkFja25vd2xlZGdlZFwiPjwvaT48L2E+LS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2FueScpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2FueScsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnYW55JywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2FueScgfVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtaW5ib3hcIiB0aXRsZT1cIkFsbFwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cdFx0ICAgIDxzbG90IG5hbWU9XCJiZWdpblwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4dHJhX3JhbmdlX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGF0ZS10aW1lLXJhbmdlLXBpY2tlcj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSB0YWdpZnkgLS0+XG4gICAgICAgIDxkaXYgdi1pZj1cInBhZ2UgIT0gJ2FsbCdcIiBjbGFzcz1cImQtZmxleCBtdC0xXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2wgaC1hdXRvXCIgbmFtZT1cInRhZ3NcIiByZWY9XCJ0YWdpZnlcIiA6cGxhY2Vob2xkZXI9XCJpMThuKCdzaG93X2FsZXJ0cy5maWx0ZXJzJylcIj5cblxuICAgICAgICAgICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgYXJpYS1jb250cm9scz1cImZsb3ctYWxlcnRzLXRhYmxlXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tYWRkLWFsZXJ0LWZpbHRlclwiIEBjbGljaz1cInNob3dfbW9kYWxfZmlsdGVyc1wiPjxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbC10aXRsZT1cIlwiIHRpdGxlPVwiQWRkIEZpbHRlclwiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cInt7IGkxOG4oJ3Nob3dfYWxlcnRzLnJlbW92ZV9maWx0ZXJzJykgfX1cIiBAY2xpY2s9XCJyZW1vdmVfZmlsdGVyc1wiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gbXMtMSBteS1hdXRvIGJ0bi1zbSBidG4tcmVtb3ZlLXRhZ3NcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10aW1lc1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPCEtLSBlbmQgdGFnaWZ5IC0tPlxuXG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0ZVRpbWVSYW5nZVBpY2tlciB9IGZyb20gXCIuL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRmlsdGVycyB9IGZyb20gXCIuL21vZGFsLWZpbHRlcnMudnVlXCI7XG5pbXBvcnQgZmlsdGVyc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanNcIjtcblxuXG5mdW5jdGlvbiBnZXRfcGFnZShhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgbGV0IHBhZ2UgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIik7XG4gICAgaWYgKHBhZ2UgPT0gbnVsbCkge1xuICAgICAgICBpZiAoYWxlcnRfc3RhdHNfcGFnZSkge1xuICAgICAgICAgICAgcGFnZSA9IFwiYWxsXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdlID0gXCJvdmVydmlld1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWdlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfZmlsdGVyX2NvbnN0KGlzX2FsZXJ0X3N0YXRzX3VybCwgcGFnZSkge1xuICAgIGxldCB1cmxfcmVxdWVzdDtcbiAgICBsZXQgcXVlcnlfcHJlc2V0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIik7XG4gICAgaWYgKHF1ZXJ5X3ByZXNldCA9PSBudWxsKSB7IHF1ZXJ5X3ByZXNldCA9IFwiXCI7IH1cbiAgICBpZiAoaXNfYWxlcnRfc3RhdHNfdXJsKSB7XG4gICAgICAgIHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9hbGVydC9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGFnZ3JlZ2F0ZWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImFnZ3JlZ2F0ZWRcIik7XG4gICAgICAgIHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9JnF1ZXJ5X3ByZXNldD0ke3F1ZXJ5X3ByZXNldH0mYWdncmVnYXRlZD0ke2FnZ3JlZ2F0ZWR9YDtcbiAgICB9XG4gICAgbGV0IGZpbHRlcl9jb25zdHMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIHJldHVybiBmaWx0ZXJfY29uc3RzO1xufVxuXG5sZXQgRklMVEVSU19DT05TVCA9IFtdO1xubGV0IFRBR19PUEVSQVRPUlM7XG5sZXQgREVGSU5FRF9UQUdTO1xuY29uc3QgVklFV19PTkxZX1RBR1MgPSB0cnVlO1xuLyogSW5pdGlhbCBUYWdzICovXG5sZXQgaW5pdGlhbFRhZ3M7XG4vL2xldCBwYWdlSGFuZGxlID0ge307XG5sZXQgVEFHSUZZO1xubGV0IElTX0FMRVJUX1NUQVRTX1VSTCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xubGV0IFNUQVRVU19WSUVXID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG5pZiAoU1RBVFVTX1ZJRVcgPT0gbnVsbCB8fCBTVEFUVVNfVklFVyA9PSBcIlwiKSB7XG4gICAgU1RBVFVTX1ZJRVcgPSBcImhpc3RvcmljYWxcIjtcbn1cblxubGV0IFBBR0UgPSBnZXRfcGFnZShJU19BTEVSVF9TVEFUU19VUkwpO1xuXG5jb25zdCBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xuICAgIGxldCBmX2NvbnN0ID0gRklMVEVSU19DT05TVC5maW5kKChmKSA9PiBmLmlkID09IGZpbHRlci5pZCk7XG4gICAgaWYgKGZfY29uc3QgPT0gbnVsbCkgeyBjb25zb2xlLmVycm9yKFwiY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcjogZmlsdGVyIGNvbnN0IG5vdCBmb3VuZDtcIik7IH1cblxuICAgIGxldCB2YWx1ZV9sYWJlbCA9IGZpbHRlci52YWx1ZTtcbiAgICBpZiAoZl9jb25zdC5vcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgbGV0IG9wdCA9IGZfY29uc3Qub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG4gICAgICAgIGlmIChvcHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVfbGFiZWwgPSBvcHQubGFiZWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGFnID0ge1xuICAgICAgICBsYWJlbDogZl9jb25zdC5sYWJlbCxcbiAgICAgICAga2V5OiBmX2NvbnN0LmlkLFxuICAgICAgICB2YWx1ZTogdmFsdWVfbGFiZWwsXG4gICAgICAgIHJlYWxWYWx1ZTogZmlsdGVyLnZhbHVlLFxuICAgICAgICB0aXRsZTogYCR7Zl9jb25zdC5sYWJlbH0ke2ZpbHRlci5vcGVyYXRvcn0ke3ZhbHVlX2xhYmVsfWAsXG4gICAgICAgIHNlbGVjdGVkT3BlcmF0b3I6IGZpbHRlci5vcGVyYXRvcixcbiAgICB9O1xuICAgIGlmICh0YWcudmFsdWUgPT0gXCJcIikgeyB0YWcudmFsdWUgPSBcIicnXCIgfVxuICAgIGlmICh0YWcucmVhbFZhbHVlID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGFnO1xufVxuXG5jb25zdCBsb2FkX2ZpbHRlcnNfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBGSUxURVJTX0NPTlNUID0gYXdhaXQgZ2V0X2ZpbHRlcl9jb25zdChJU19BTEVSVF9TVEFUU19VUkwsIFBBR0UpO1xuICAgIEZJTFRFUlNfQ09OU1QuZmlsdGVyKCh4KSA9PiB4LmxhYmVsID09IG51bGwpLmZvckVhY2goKHgpID0+IHsgY29uc29sZS5lcnJvcihgbGFiZWwgbm90IGRlZmluZWQgZm9yIGZpbHRlciAke0pTT04uc3RyaW5naWZ5KHgpfWApOyB4LmxhYmVsID0gXCJcIjsgfSk7XG4gICAgRklMVEVSU19DT05TVC5zb3J0KChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCkpO1xuICAgIGkxOG5fZXh0LnRhZ3MgPSB7fTtcbiAgICBUQUdfT1BFUkFUT1JTID0ge307XG4gICAgREVGSU5FRF9UQUdTID0ge307XG4gICAgRklMVEVSU19DT05TVC5mb3JFYWNoKChmX2RlZikgPT4ge1xuICAgICAgICBpMThuX2V4dC50YWdzW2ZfZGVmLmlkXSA9IGZfZGVmLmxhYmVsO1xuICAgICAgICBmX2RlZi5vcGVyYXRvcnMuZm9yRWFjaCgob3ApID0+IFRBR19PUEVSQVRPUlNbb3AuaWRdID0gb3AubGFiZWwpO1xuICAgICAgICBERUZJTkVEX1RBR1NbZl9kZWYuaWRdID0gZl9kZWYub3BlcmF0b3JzLm1hcCgob3ApID0+IG9wLmlkKTtcbiAgICB9KTtcbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgbGV0IGZpbHRlcl9kZWYgPSBGSUxURVJTX0NPTlNULmZpbmQoKGZjKSA9PiBmYy5pZCA9PSBrZXkpO1xuICAgICAgICBpZiAoZmlsdGVyX2RlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9uc19zdHJpbmcgPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBvcHRpb25zX3N0cmluZy5mb3JFYWNoKChvcHRfc3Rpcm5nKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IFt2YWx1ZSwgb3BlcmF0b3JdID0gb3B0X3N0aXJuZy5zcGxpdChcIjtcIik7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9PSBudWxsIHx8IHZhbHVlID09IG51bGwgfHwgb3BlcmF0b3IgPT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICB8fCAoZmlsdGVyX2RlZi5vcHRpb25zICE9IG51bGwgJiYgZmlsdGVyX2RlZi5vcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKSA9PSBudWxsKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXHRcdGxldCB2YWx1ZV9sYWJlbCA9IHZhbHVlO1xuXHRcdGlmIChmaWx0ZXJfZGVmLnZhbHVlX3R5cGUgPT0gXCJhcnJheVwiKSB7XG5cdFx0ICAgIHZhbHVlX2xhYmVsID0gZmlsdGVyX2RlZj8ub3B0aW9ucz8uZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpPy5sYWJlbDtcblx0XHR9XG4gICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHsgaWQ6IGZpbHRlcl9kZWYuaWQsIG9wZXJhdG9yOiBvcGVyYXRvciwgdmFsdWU6IHZhbHVlLCBsYWJlbDogZmlsdGVyX2RlZi5sYWJlbCwgdmFsdWVfbGFiZWwgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVycztcbiAgICAvLyBcImw3cHJvdG89WFhYO2VxXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiB7XG4gICAgICAgIGlkOiBTdHJpbmcsXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXG4gICAgICAgIHJvdW5kX3RpbWU6IEJvb2xlYW4sXG4gICAgfSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdkYXRlLXRpbWUtcmFuZ2UtcGlja2VyJzogRGF0ZVRpbWVSYW5nZVBpY2tlcixcbiAgICAgICAgJ21vZGFsLWZpbHRlcnMnOiBNb2RhbEZpbHRlcnMsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBhc3luYyBtb3VudGVkKCkge1xuICAgICAgICBsZXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXIpO1xuICAgICAgICBsZXQgbW9kYWxfZmlsdGVyc19tb3VudGVkID0gbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbF9maWx0ZXJzKTtcbiAgICAgICAgYXdhaXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMucGFnZSAhPSAnYWxsJykge1xuICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBhd2FpdCBsb2FkX2ZpbHRlcnNfZGF0YSgpO1xuXG4gICAgICAgICAgICBUQUdJRlkgPSBjcmVhdGVfdGFnaWZ5KHRoaXMpO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCAoc3RhdHVzKSA9PiB0aGlzLnJlbG9hZF9zdGF0dXMoc3RhdHVzKSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RhbF9kYXRhID0gRklMVEVSU19DT05TVDtcblxuICAgICAgICAvL2F3YWl0IG1vZGFsX2ZpbHRlcnNfbW91bnRlZDtcbiAgICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaTE4bjogaTE4bixcbiAgICAgICAgICAgIGlkX21vZGFsX2ZpbHRlcnM6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbF9maWx0ZXJzYCxcbiAgICAgICAgICAgIGlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXI6IGAke3RoaXMuJHByb3BzLmlkfV9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyYCxcbiAgICAgICAgICAgIHNob3dfZmlsdGVyczogZmFsc2UsXG4gICAgICAgICAgICBlZGl0X3RhZzogbnVsbCxcbiAgICAgICAgICAgIGlzX2FsZXJ0X3N0YXRzX3VybDogSVNfQUxFUlRfU1RBVFNfVVJMLFxuICAgICAgICAgICAgc3RhdHVzX3ZpZXc6IFNUQVRVU19WSUVXLFxuICAgICAgICAgICAgcGFnZTogUEFHRSxcbiAgICAgICAgICAgIG1vZGFsX2RhdGE6IFtdLFxuICAgICAgICAgICAgbGFzdF9maWx0ZXJzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgaXNfZmlsdGVyX2RlZmluZWQ6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBERUZJTkVEX1RBR1NbZmlsdGVyLmlkXSAhPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVfc3RhdHVzX3ZpZXc6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBzdGF0dXMpO1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19tb2RhbF9maWx0ZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZmlsdGVyc1wiXS5zaG93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZV9maWx0ZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZWxvYWRfc3RhdHVzOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBhbGwgcHJldmlvdXMgZmlsdGVyXG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhGSUxURVJTX0NPTlNULm1hcCgoZikgPT4gZi5pZCkpO1xuICAgICAgICAgICAgVEFHSUZZLnRhZ2lmeS5yZW1vdmVBbGxUYWdzKCk7XG4gICAgICAgICAgICBsZXQgZmlsdGVyc19vYmplY3QgPSBmaWx0ZXJzTWFuYWdlci5nZXRfZmlsdGVyc19vYmplY3QoZmlsdGVycyk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoZmlsdGVyc19vYmplY3QpO1xuICAgICAgICAgICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhZyA9IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIoZik7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgIFRBR0lGWS5hZGRGaWx0ZXJUYWcodGFnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYXN0X2ZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseV9tb2RhbDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyBmaWx0ZXJzID0gW107IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRfdGFnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gZmlsdGVycy5maWx0ZXIoKGYpID0+IGYuaWQgIT0gdGhpcy5lZGl0X3RhZy5rZXkgfHwgZi52YWx1ZSAhPSB0aGlzLmVkaXRfdGFnLnJlYWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0X3RhZyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2gocGFyYW1zKTtcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgZXZlbnQgYW5kIHRoZW4gY2FsbCByZWxvYWRfc3RhdHVzXG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZV90YWdpZnkocmFuZ2VfcGlja2VyX3Z1ZSkge1xuICAgIC8vIGNyZWF0ZSB0YWdpZnlcbiAgICBjb25zdCB0YWdpZnkgPSBuZXcgVGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUuJHJlZnNbXCJ0YWdpZnlcIl0sIHtcbiAgICAgICAgZHVwbGljYXRlczogdHJ1ZSxcbiAgICAgICAgZGVsaW1pdGVyczogbnVsbCxcbiAgICAgICAgZHJvcGRvd246IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IDEsIC8vIHN1Z2dlc3QgdGFncyBhZnRlciBhIHNpbmdsZSBjaGFyYWN0ZXIgaW5wdXRcbiAgICAgICAgICAgIGNsYXNzbmFtZTogJ2V4dHJhLXByb3BlcnRpZXMnIC8vIGN1c3RvbSBjbGFzcyBmb3IgdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9Db21wbGV0ZTogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgICAgIHRhZzogZnVuY3Rpb24gKHRhZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDx0YWcgdGl0bGU9JyR7dGFnRGF0YS52YWx1ZX0nIGNvbnRlbnRlZGl0YWJsZT0nZmFsc2UnIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGNsYXNzPSd0YWdpZnlfX3RhZyc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8eCB0aXRsZT0ncmVtb3ZlIHRhZycgY2xhc3M9J3RhZ2lmeV9fdGFnX19yZW1vdmVCdG4nPjwveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3RhZ0RhdGEubGFiZWwgPyB0YWdEYXRhLmxhYmVsIDogdGFnRGF0YS5rZXl9PC9iPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGIgY2xhc3M9J29wZXJhdG9yJz4ke3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciA/IFRBR19PUEVSQVRPUlNbdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yXSA6ICc9J308L2I+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3RhZ2lmeV9fdGFnLXRleHQnPiR7dGFnRGF0YS52YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90YWc+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VyZWQgd2hlbiBjcmVhdGluZyBhIG5ldyB0YWc6ICR7ZXJyfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodGFnRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgdGFnRGF0YS5rZXkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFnRGF0YS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGFkZCBleGlzdGluZyB0YWdzXG4gICAgICAgIHRhZ2lmeS5hZGRUYWdzKGluaXRpYWxUYWdzKTtcbiAgICB9KTsgLyogJChkb2N1bWVudCkucmVhZHkoKSAqL1xuXG4gICAgY29uc3QgY3JlYXRlVmFsdWVGcm9tVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgICBpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG4gICAgICAgIGxldCB2YWwgPSB0YWcucmVhbFZhbHVlICE9IG51bGwgPyB0YWcucmVhbFZhbHVlIDogdGFnLnZhbHVlO1xuICAgICAgICBsZXQgdmFsdWUgPSBgJHt2YWx9OyR7dGFnLnNlbGVjdGVkT3BlcmF0b3J9YDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZEZpbHRlclRhZyA9IGFzeW5jIGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgLyogQ29udmVydCB2YWx1ZXMgdG8gc3RyaW5nICh0aGlzIGF2b2lkcyBpc3N1ZXMgZS5nLiB3aXRoIDApICovXG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnJlYWxWYWx1ZSA9PSAnbnVtYmVyJykgeyB0YWcucmVhbFZhbHVlID0gJycgKyB0YWcucmVhbFZhbHVlOyB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnZhbHVlID09ICdudW1iZXInKSB7IHRhZy52YWx1ZSA9ICcnICsgdGFnLnZhbHVlOyB9XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdUYWdFbG1zID0gdGFnaWZ5LmdldFRhZ0VsbXMoKTtcblxuICAgICAgICAvKiBMb29rdXAgYnkga2V5LCB2YWx1ZSBhbmQgb3BlcmF0b3IgKGRvIG5vdCBhZGQgdGhlIHNhbWUga2V5IGFuZCB2YWx1ZSBtdWx0aXBsZSB0aW1lcykgKi9cbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnRWxlbWVudCA9IGV4aXN0aW5nVGFnRWxtcy5maW5kKGh0bWxUYWcgPT5cbiAgICAgICAgICAgIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdrZXknKSA9PT0gdGFnLmtleVxuICAgICAgICAgICAgJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3JlYWxWYWx1ZScpID09PSB0YWcucmVhbFZhbHVlXG4gICAgICAgICAgICAvLyYmIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZE9wZXJhdG9yJykgPT09IHRhZy5zZWxlY3RlZE9wZXJhdG9yXG4gICAgICAgICk7XG4gICAgICAgIGxldCBleGlzdGluZ1RhZyA9IHRhZ2lmeS50YWdEYXRhKGV4aXN0aW5nVGFnRWxlbWVudCk7XG4gICAgICAgIGlmIChleGlzdGluZ1RhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYXMgdGhlIHRhZyBhbiBvcGVyYXRvciBvYmplY3Q/XG4gICAgICAgIGlmIChERUZJTkVEX1RBR1NbdGFnLmtleV0gJiYgIUFycmF5LmlzQXJyYXkoREVGSU5FRF9UQUdTW3RhZy5rZXldKSkge1xuICAgICAgICAgICAgdGFnLm9wZXJhdG9ycyA9IERFRklORURfVEFHU1t0YWcua2V5XS5vcGVyYXRvcnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB7XG4gICAgICAgICAgICB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIGZpbHRlciFcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoW3RhZ10pO1xuICAgIH1cblxuICAgIC8vIHdoZW4gYW4gdXNlciByZW1vdmUgdGhlIHRhZ1xuICAgIHRhZ2lmeS5vbigncmVtb3ZlJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZS5kZXRhaWwuZGF0YS5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS5kZXRhaWwuZGF0YS5yZWFsVmFsdWU7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3RhdHVzLmZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cblxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnMuZmlsdGVyKChmKSA9PiAoZi5pZCAhPSBrZXkgfHwgKGYuaWQgPT0ga2V5ICYmIGYudmFsdWUgIT0gdmFsdWUpKSk7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICB9KTtcblxuICAgIHRhZ2lmeS5vbignYWRkJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcbiAgICAgICAgLy8gbGV0J3MgY2hlY2sgaWYgdGhlIHRhZyBoYXMgYSBrZXkgZmllbGRcbiAgICAgICAgaWYgKCF0YWcua2V5KSB7XG4gICAgICAgICAgICB0YWdpZnkucmVtb3ZlVGFncyhbZS5kZXRhaWwudGFnXSk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUYWcgJ2NsaWNrJyBldmVudCBoYW5kbGVyIHRvIG9wZW4gdGhlICdFZGl0JyBtb2RhbC4gTm90ZTogdGhpcyBwcmV2ZW50c1xuICAgIC8vIGlubGluZSBlZGl0aW5nIG9mIHRoZSB0YWcgKCdlZGl0OnVwZGF0ZWQnIGlzIG5ldmVyIGNhbGxlZCBhcyBhIGNvbnNlcXVlbmNlKVxuICAgIHRhZ2lmeS5vbignY2xpY2snLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YS5rZXkgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XG4gICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhpcyB0YWcgYWxyZWFkeSBleGl4dHNcbiAgICAgICAgcmFuZ2VfcGlja2VyX3Z1ZS5lZGl0X3RhZyA9IHRhZztcbiAgICAgICAgLy8gc2hvdyBtb2RhbC1maWx0ZXJzXG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIHsgaWQ6IHRhZy5rZXksIG9wZXJhdG9yOiB0YWcuc2VsZWN0ZWRPcGVyYXRvciwgdmFsdWU6IHRhZy5yZWFsVmFsdWUgfSk7XG4gICAgfSk7XG5cbiAgICB0YWdpZnkub24oJ2VkaXQ6dXBkYXRlZCcsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVQREFURURcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9KTtcblxuICAgICQoYHRhZ3NgKS5vbignY2hhbmdlJywgJ3NlbGVjdC5vcGVyYXRvcicsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRBR1MgY2hhbmdlXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnaWZ5LFxuICAgICAgICBhZGRGaWx0ZXJUYWcsXG4gICAgfTtcbn1cbjwvc2NyaXB0PlxuXG5cbjxzdHlsZSBzY29wZWQ+XG4udGFnaWZ5X19pbnB1dCB7XG4gICAgbWluLXdpZHRoOiAxNzVweDtcbn1cblxuLnRhZ2lmeV9fdGFnIHtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG1hcmdpbjogM3B4IDBweCA1cHggNXB4O1xufVxuXG4udGFnaWZ5X190YWcgc2VsZWN0Lm9wZXJhdG9yIHtcbiAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi50YWdpZnlfX3RhZyBiLm9wZXJhdG9yIHtcbiAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgcGFkZGluZzogMC4wNWVtIDAuMmVtO1xufVxuXG4udGFnaWZ5X190YWc+ZGl2IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi0xXCI+XG4gICAgICAgICAgICA8bW9kYWwtZmlsdGVycyA6ZmlsdGVyc19vcHRpb25zPVwibW9kYWxfZGF0YVwiIEBhcHBseT1cImFwcGx5X21vZGFsXCIgcmVmPVwibW9kYWxfZmlsdGVyc1wiIDppZD1cImlkX21vZGFsX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZmlsdGVycz5cbiAgICAgICAgICAgIDxkYXRlLXRpbWUtcmFuZ2UtcGlja2VyIDppZD1cImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXJcIiA6bWluX3RpbWVfaW50ZXJ2YWxfaWQ9XCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiIDpyb3VuZF90aW1lPVwicm91bmRfdGltZVwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzX2FsZXJ0X3N0YXRzX3VybFwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjAuMXJlbTtcIiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIGlkPVwic3RhdHVzU3dpdGNoXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cInBhZ2UgIT0gJ2Zsb3cnXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2VuZ2FnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdlbmdhZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXCIgdGl0bGU9XCJFbmdhZ2VkXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnaGlzdG9yaWNhbCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnIHx8IChwYWdlID09ICdmbG93JyAmJiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcpLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2hpc3RvcmljYWwnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCcgfHwgKHBhZ2UgPT0gJ2Zsb3cnICYmIHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJykgfVwiPjxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS1leWVcIiB0aXRsZT1cIlJlcXVpcmUgQXR0ZW50aW9uXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhY2tub3dsZWRnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2Fja25vd2xlZGdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNoZWNrLWRvdWJsZVwiIHRpdGxlPVwiQWNrbm93bGVkZ2VkXCI+PC9pPjwvYT4tLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYW55JylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYW55JywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhbnknLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYW55JyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1pbmJveFwiIHRpdGxlPVwiQWxsXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblx0XHQgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0cmFfcmFuZ2VfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIHRhZ2lmeSAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiZC1mbGV4IG10LTFcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInctMTAwIGZvcm0tY29udHJvbCBoLWF1dG9cIiBuYW1lPVwidGFnc1wiIHJlZj1cInRhZ2lmeVwiIDpwbGFjZWhvbGRlcj1cImkxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcnMnKVwiPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBhcmlhLWNvbnRyb2xzPVwiZmxvdy1hbGVydHMtdGFibGVcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBpZD1cImJ0bi1hZGQtYWxlcnQtZmlsdGVyXCIgQGNsaWNrPVwic2hvd19tb2RhbF9maWx0ZXJzXCI+PHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsLXRpdGxlPVwiXCIgdGl0bGU9XCJBZGQgRmlsdGVyXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwie3sgaTE4bignc2hvd19hbGVydHMucmVtb3ZlX2ZpbHRlcnMnKSB9fVwiIEBjbGljaz1cInJlbW92ZV9maWx0ZXJzXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBtcy0xIG15LWF1dG8gYnRuLXNtIGJ0bi1yZW1vdmUtdGFnc1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIGVuZCB0YWdpZnkgLS0+XG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5cbmZ1bmN0aW9uIGdldF9wYWdlKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICBsZXQgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgICAgICAgICBwYWdlID0gXCJhbGxcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZ2UgPSBcIm92ZXJ2aWV3XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QoaXNfYWxlcnRfc3RhdHNfdXJsLCBwYWdlKSB7XG4gICAgbGV0IHVybF9yZXF1ZXN0O1xuICAgIGxldCBxdWVyeV9wcmVzZXQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKTtcbiAgICBpZiAocXVlcnlfcHJlc2V0ID09IG51bGwpIHsgcXVlcnlfcHJlc2V0ID0gXCJcIjsgfVxuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2FsZXJ0L2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfSZxdWVyeV9wcmVzZXQ9JHtxdWVyeV9wcmVzZXR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgYWdncmVnYXRlZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKTtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fSZhZ2dyZWdhdGVkPSR7YWdncmVnYXRlZH1gO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmxldCBGSUxURVJTX0NPTlNUID0gW107XG5sZXQgVEFHX09QRVJBVE9SUztcbmxldCBERUZJTkVEX1RBR1M7XG5jb25zdCBWSUVXX09OTFlfVEFHUyA9IHRydWU7XG4vKiBJbml0aWFsIFRhZ3MgKi9cbmxldCBpbml0aWFsVGFncztcbi8vbGV0IHBhZ2VIYW5kbGUgPSB7fTtcbmxldCBUQUdJRlk7XG5sZXQgSVNfQUxFUlRfU1RBVFNfVVJMID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG5sZXQgU1RBVFVTX1ZJRVcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbmlmIChTVEFUVVNfVklFVyA9PSBudWxsIHx8IFNUQVRVU19WSUVXID09IFwiXCIpIHtcbiAgICBTVEFUVVNfVklFVyA9IFwiaGlzdG9yaWNhbFwiO1xufVxuXG5sZXQgUEFHRSA9IGdldF9wYWdlKElTX0FMRVJUX1NUQVRTX1VSTCk7XG5cbmNvbnN0IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgbGV0IGZfY29uc3QgPSBGSUxURVJTX0NPTlNULmZpbmQoKGYpID0+IGYuaWQgPT0gZmlsdGVyLmlkKTtcbiAgICBpZiAoZl9jb25zdCA9PSBudWxsKSB7IGNvbnNvbGUuZXJyb3IoXCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyOiBmaWx0ZXIgY29uc3Qgbm90IGZvdW5kO1wiKTsgfVxuXG4gICAgbGV0IHZhbHVlX2xhYmVsID0gZmlsdGVyLnZhbHVlO1xuICAgIGlmIChmX2NvbnN0Lm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICBsZXQgb3B0ID0gZl9jb25zdC5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZV9sYWJlbCA9IG9wdC5sYWJlbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0YWcgPSB7XG4gICAgICAgIGxhYmVsOiBmX2NvbnN0LmxhYmVsLFxuICAgICAgICBrZXk6IGZfY29uc3QuaWQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZV9sYWJlbCxcbiAgICAgICAgcmVhbFZhbHVlOiBmaWx0ZXIudmFsdWUsXG4gICAgICAgIHRpdGxlOiBgJHtmX2NvbnN0LmxhYmVsfSR7ZmlsdGVyLm9wZXJhdG9yfSR7dmFsdWVfbGFiZWx9YCxcbiAgICAgICAgc2VsZWN0ZWRPcGVyYXRvcjogZmlsdGVyLm9wZXJhdG9yLFxuICAgIH07XG4gICAgaWYgKHRhZy52YWx1ZSA9PSBcIlwiKSB7IHRhZy52YWx1ZSA9IFwiJydcIiB9XG4gICAgaWYgKHRhZy5yZWFsVmFsdWUgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmNvbnN0IGxvYWRfZmlsdGVyc19kYXRhID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIEZJTFRFUlNfQ09OU1QgPSBhd2FpdCBnZXRfZmlsdGVyX2NvbnN0KElTX0FMRVJUX1NUQVRTX1VSTCwgUEFHRSk7XG4gICAgRklMVEVSU19DT05TVC5maWx0ZXIoKHgpID0+IHgubGFiZWwgPT0gbnVsbCkuZm9yRWFjaCgoeCkgPT4geyBjb25zb2xlLmVycm9yKGBsYWJlbCBub3QgZGVmaW5lZCBmb3IgZmlsdGVyICR7SlNPTi5zdHJpbmdpZnkoeCl9YCk7IHgubGFiZWwgPSBcIlwiOyB9KTtcbiAgICBGSUxURVJTX0NPTlNULnNvcnQoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7XG4gICAgaTE4bl9leHQudGFncyA9IHt9O1xuICAgIFRBR19PUEVSQVRPUlMgPSB7fTtcbiAgICBERUZJTkVEX1RBR1MgPSB7fTtcbiAgICBGSUxURVJTX0NPTlNULmZvckVhY2goKGZfZGVmKSA9PiB7XG4gICAgICAgIGkxOG5fZXh0LnRhZ3NbZl9kZWYuaWRdID0gZl9kZWYubGFiZWw7XG4gICAgICAgIGZfZGVmLm9wZXJhdG9ycy5mb3JFYWNoKChvcCkgPT4gVEFHX09QRVJBVE9SU1tvcC5pZF0gPSBvcC5sYWJlbCk7XG4gICAgICAgIERFRklORURfVEFHU1tmX2RlZi5pZF0gPSBmX2RlZi5vcGVyYXRvcnMubWFwKChvcCkgPT4gb3AuaWQpO1xuICAgIH0pO1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICBsZXQgZmlsdGVyX2RlZiA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZmMpID0+IGZjLmlkID09IGtleSk7XG4gICAgICAgIGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zX3N0cmluZyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIG9wdGlvbnNfc3RyaW5nLmZvckVhY2goKG9wdF9zdGlybmcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgW3ZhbHVlLCBvcGVyYXRvcl0gPSBvcHRfc3Rpcm5nLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCB8fCBvcGVyYXRvciA9PSBcIlwiXG4gICAgICAgICAgICAgICAgICAgIHx8IChmaWx0ZXJfZGVmLm9wdGlvbnMgIT0gbnVsbCAmJiBmaWx0ZXJfZGVmLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpID09IG51bGwpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cdFx0bGV0IHZhbHVlX2xhYmVsID0gdmFsdWU7XG5cdFx0aWYgKGZpbHRlcl9kZWYudmFsdWVfdHlwZSA9PSBcImFycmF5XCIpIHtcblx0XHQgICAgdmFsdWVfbGFiZWwgPSBmaWx0ZXJfZGVmPy5vcHRpb25zPy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSk/LmxhYmVsO1xuXHRcdH1cbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goeyBpZDogZmlsdGVyX2RlZi5pZCwgb3BlcmF0b3I6IG9wZXJhdG9yLCB2YWx1ZTogdmFsdWUsIGxhYmVsOiBmaWx0ZXJfZGVmLmxhYmVsLCB2YWx1ZV9sYWJlbCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIC8vIFwibDdwcm90bz1YWFg7ZXFcIlxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQ6IFN0cmluZyxcbiAgICAgICAgcm91bmRfdGltZTogQm9vbGVhbixcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ2RhdGUtdGltZS1yYW5nZS1waWNrZXInOiBEYXRlVGltZVJhbmdlUGlja2VyLFxuICAgICAgICAnbW9kYWwtZmlsdGVycyc6IE1vZGFsRmlsdGVycyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICAgIGxldCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcik7XG4gICAgICAgIGxldCBtb2RhbF9maWx0ZXJzX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsX2ZpbHRlcnMpO1xuICAgICAgICBhd2FpdCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZDtcblxuICAgICAgICBpZiAodGhpcy5wYWdlICE9ICdhbGwnKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IGF3YWl0IGxvYWRfZmlsdGVyc19kYXRhKCk7XG5cbiAgICAgICAgICAgIFRBR0lGWSA9IGNyZWF0ZV90YWdpZnkodGhpcyk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIChzdGF0dXMpID0+IHRoaXMucmVsb2FkX3N0YXR1cyhzdGF0dXMpLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsX2RhdGEgPSBGSUxURVJTX0NPTlNUO1xuXG4gICAgICAgIC8vYXdhaXQgbW9kYWxfZmlsdGVyc19tb3VudGVkO1xuICAgICAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpMThuOiBpMThuLFxuICAgICAgICAgICAgaWRfbW9kYWxfZmlsdGVyczogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsX2ZpbHRlcnNgLFxuICAgICAgICAgICAgaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcjogYCR7dGhpcy4kcHJvcHMuaWR9X2RhdGUtdGltZS1yYW5nZS1waWNrZXJgLFxuICAgICAgICAgICAgc2hvd19maWx0ZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRfdGFnOiBudWxsLFxuICAgICAgICAgICAgaXNfYWxlcnRfc3RhdHNfdXJsOiBJU19BTEVSVF9TVEFUU19VUkwsXG4gICAgICAgICAgICBzdGF0dXNfdmlldzogU1RBVFVTX1ZJRVcsXG4gICAgICAgICAgICBwYWdlOiBQQUdFLFxuICAgICAgICAgICAgbW9kYWxfZGF0YTogW10sXG4gICAgICAgICAgICBsYXN0X2ZpbHRlcnM6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBpc19maWx0ZXJfZGVmaW5lZDogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIERFRklORURfVEFHU1tmaWx0ZXIuaWRdICE9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZV9zdGF0dXNfdmlldzogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIHN0YXR1cyk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X21vZGFsX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9maWx0ZXJzXCJdLnNob3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbG9hZF9zdGF0dXM6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgLy8gZGVsZXRlIGFsbCBwcmV2aW91cyBmaWx0ZXJcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKEZJTFRFUlNfQ09OU1QubWFwKChmKSA9PiBmLmlkKSk7XG4gICAgICAgICAgICBUQUdJRlkudGFnaWZ5LnJlbW92ZUFsbFRhZ3MoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IGZpbHRlcnNNYW5hZ2VyLmdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG4gICAgICAgICAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGFnID0gY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcihmKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgVEFHSUZZLmFkZEZpbHRlclRhZyh0YWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RfZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5X21vZGFsOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IGZpbHRlcnMgPSBbXTsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdF90YWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcigoZikgPT4gZi5pZCAhPSB0aGlzLmVkaXRfdGFnLmtleSB8fCBmLnZhbHVlICE9IHRoaXMuZWRpdF90YWcucmVhbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRfdGFnID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbHRlcnMucHVzaChwYXJhbXMpO1xuICAgICAgICAgICAgLy8gdHJpZ2dlciBldmVudCBhbmQgdGhlbiBjYWxsIHJlbG9hZF9zdGF0dXNcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlX3RhZ2lmeShyYW5nZV9waWNrZXJfdnVlKSB7XG4gICAgLy8gY3JlYXRlIHRhZ2lmeVxuICAgIGNvbnN0IHRhZ2lmeSA9IG5ldyBUYWdpZnkocmFuZ2VfcGlja2VyX3Z1ZS4kcmVmc1tcInRhZ2lmeVwiXSwge1xuICAgICAgICBkdXBsaWNhdGVzOiB0cnVlLFxuICAgICAgICBkZWxpbWl0ZXJzOiBudWxsLFxuICAgICAgICBkcm9wZG93bjoge1xuICAgICAgICAgICAgZW5hYmxlZDogMSwgLy8gc3VnZ2VzdCB0YWdzIGFmdGVyIGEgc2luZ2xlIGNoYXJhY3RlciBpbnB1dFxuICAgICAgICAgICAgY2xhc3NuYW1lOiAnZXh0cmEtcHJvcGVydGllcycgLy8gY3VzdG9tIGNsYXNzIGZvciB0aGUgc3VnZ2VzdGlvbnMgZHJvcGRvd25cbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0NvbXBsZXRlOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgIHRlbXBsYXRlczoge1xuICAgICAgICAgICAgdGFnOiBmdW5jdGlvbiAodGFnRGF0YSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHRhZyB0aXRsZT0nJHt0YWdEYXRhLnZhbHVlfScgY29udGVudGVkaXRhYmxlPSdmYWxzZScgc3BlbGxjaGVjaz1cImZhbHNlXCIgY2xhc3M9J3RhZ2lmeV9fdGFnJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7dGFnRGF0YS5sYWJlbCA/IHRhZ0RhdGEubGFiZWwgOiB0YWdEYXRhLmtleX08L2I+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8YiBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID8gVEFHX09QRVJBVE9SU1t0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3JdIDogJz0nfTwvYj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGFnaWZ5X190YWctdGV4dCc+JHt0YWdEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RhZz5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHRhZzogJHtlcnJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0YWdEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB0YWdEYXRhLmtleSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0YWdEYXRhLnZhbHVlICE9PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gYWRkIGV4aXN0aW5nIHRhZ3NcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoaW5pdGlhbFRhZ3MpO1xuICAgIH0pOyAvKiAkKGRvY3VtZW50KS5yZWFkeSgpICovXG5cbiAgICBjb25zdCBjcmVhdGVWYWx1ZUZyb21UYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgbGV0IHZhbCA9IHRhZy5yZWFsVmFsdWUgIT0gbnVsbCA/IHRhZy5yZWFsVmFsdWUgOiB0YWcudmFsdWU7XG4gICAgICAgIGxldCB2YWx1ZSA9IGAke3ZhbH07JHt0YWcuc2VsZWN0ZWRPcGVyYXRvcn1gO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkRmlsdGVyVGFnID0gYXN5bmMgZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAvKiBDb252ZXJ0IHZhbHVlcyB0byBzdHJpbmcgKHRoaXMgYXZvaWRzIGlzc3VlcyBlLmcuIHdpdGggMCkgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcucmVhbFZhbHVlID09ICdudW1iZXInKSB7IHRhZy5yZWFsVmFsdWUgPSAnJyArIHRhZy5yZWFsVmFsdWU7IH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcudmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnZhbHVlID0gJycgKyB0YWcudmFsdWU7IH1cblxuICAgICAgICBjb25zdCBleGlzdGluZ1RhZ0VsbXMgPSB0YWdpZnkuZ2V0VGFnRWxtcygpO1xuXG4gICAgICAgIC8qIExvb2t1cCBieSBrZXksIHZhbHVlIGFuZCBvcGVyYXRvciAoZG8gbm90IGFkZCB0aGUgc2FtZSBrZXkgYW5kIHZhbHVlIG11bHRpcGxlIHRpbWVzKSAqL1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWdFbGVtZW50ID0gZXhpc3RpbmdUYWdFbG1zLmZpbmQoaHRtbFRhZyA9PlxuICAgICAgICAgICAgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ2tleScpID09PSB0YWcua2V5XG4gICAgICAgICAgICAmJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgncmVhbFZhbHVlJykgPT09IHRhZy5yZWFsVmFsdWVcbiAgICAgICAgICAgIC8vJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkT3BlcmF0b3InKSA9PT0gdGFnLnNlbGVjdGVkT3BlcmF0b3JcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnID0gdGFnaWZ5LnRhZ0RhdGEoZXhpc3RpbmdUYWdFbGVtZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhcyB0aGUgdGFnIGFuIG9wZXJhdG9yIG9iamVjdD9cbiAgICAgICAgaWYgKERFRklORURfVEFHU1t0YWcua2V5XSAmJiAhQXJyYXkuaXNBcnJheShERUZJTkVEX1RBR1NbdGFnLmtleV0pKSB7XG4gICAgICAgICAgICB0YWcub3BlcmF0b3JzID0gREVGSU5FRF9UQUdTW3RhZy5rZXldLm9wZXJhdG9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgZmlsdGVyIVxuICAgICAgICB0YWdpZnkuYWRkVGFncyhbdGFnXSk7XG4gICAgfVxuXG4gICAgLy8gd2hlbiBhbiB1c2VyIHJlbW92ZSB0aGUgdGFnXG4gICAgdGFnaWZ5Lm9uKCdyZW1vdmUnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBrZXkgPSBlLmRldGFpbC5kYXRhLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLmRldGFpbC5kYXRhLnJlYWxWYWx1ZTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzdGF0dXMuZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycy5maWx0ZXIoKGYpID0+IChmLmlkICE9IGtleSB8fCAoZi5pZCA9PSBrZXkgJiYgZi52YWx1ZSAhPSB2YWx1ZSkpKTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgIH0pO1xuXG4gICAgdGFnaWZ5Lm9uKCdhZGQnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1xuICAgICAgICAvLyBsZXQncyBjaGVjayBpZiB0aGUgdGFnIGhhcyBhIGtleSBmaWVsZFxuICAgICAgICBpZiAoIXRhZy5rZXkpIHtcbiAgICAgICAgICAgIHRhZ2lmeS5yZW1vdmVUYWdzKFtlLmRldGFpbC50YWddKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRhZyAnY2xpY2snIGV2ZW50IGhhbmRsZXIgdG8gb3BlbiB0aGUgJ0VkaXQnIG1vZGFsLiBOb3RlOiB0aGlzIHByZXZlbnRzXG4gICAgLy8gaW5saW5lIGVkaXRpbmcgb2YgdGhlIHRhZyAoJ2VkaXQ6dXBkYXRlZCcgaXMgbmV2ZXIgY2FsbGVkIGFzIGEgY29uc2VxdWVuY2UpXG4gICAgdGFnaWZ5Lm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGRldGFpbC5kYXRhLmtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcbiAgICAgICAgLy8gcmVtZW1iZXIgdGhhdCB0aGlzIHRhZyBhbHJlYWR5IGV4aXh0c1xuICAgICAgICByYW5nZV9waWNrZXJfdnVlLmVkaXRfdGFnID0gdGFnO1xuICAgICAgICAvLyBzaG93IG1vZGFsLWZpbHRlcnNcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgeyBpZDogdGFnLmtleSwgb3BlcmF0b3I6IHRhZy5zZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogdGFnLnJlYWxWYWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIHRhZ2lmeS5vbignZWRpdDp1cGRhdGVkJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVVBEQVRFRFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0pO1xuXG4gICAgJChgdGFnc2ApLm9uKCdjaGFuZ2UnLCAnc2VsZWN0Lm9wZXJhdG9yJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVEFHUyBjaGFuZ2VcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdpZnksXG4gICAgICAgIGFkZEZpbHRlclRhZyxcbiAgICB9O1xufVxuPC9zY3JpcHQ+XG5cblxuPHN0eWxlIHNjb3BlZD5cbi50YWdpZnlfX2lucHV0IHtcbiAgICBtaW4td2lkdGg6IDE3NXB4O1xufVxuXG4udGFnaWZ5X190YWcge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgbWFyZ2luOiAzcHggMHB4IDVweCA1cHg7XG59XG5cbi50YWdpZnlfX3RhZyBzZWxlY3Qub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLnRhZ2lmeV9fdGFnIGIub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBwYWRkaW5nOiAwLjA1ZW0gMC4yZW07XG59XG5cbi50YWdpZnlfX3RhZz5kaXYge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXG48IS0tIFBlclBhZ2UgLS0+XG48ZGl2IGNsYXNzPVwicm93XCIgc3R5bGU9XCJtYXJnaW4tbGVmdDotMnB4O21hcmdpbi1yaWdodDotMnB4O21hcmdpbi10b3A6MXJlbTttYXJnaW4tYm90dG9tOi0xcmVtO1wiPlxuICA8IS0tIGRpdiBjb2wtbWQtNSAtLT5cbiAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMiBjb2wtbWQtNVwiPlxuICAgIDxkaXYgY2xhc3M9XCJkYXRhVGFibGVzX2luZm9cIiByb2xlPVwic3RhdHVzXCIgYXJpYS1saXZlPVwicG9saXRlXCI+e3t0ZXh0fX1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+IDwhLS0gZGl2IGNvbC1tZC01IC0tPlxuICBcbiAgPCEtLSBzdGFydCBkaXYgY29sLXNtLTEyIC0tPlxuICA8ZGl2IHYtc2hvdz1cInRvdGFsX3BhZ2VzID4gMFwiIGNsYXNzPVwiY29sLXNtLTEyIGNvbC1tZC03XCI+XG4gICAgPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfcGFnaW5hdGUgcGFnaW5nX3NpbXBsZV9udW1iZXJzXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7IGp1c3RpZnktY29udGVudDpmbGV4LWVuZDtcIj5cbiAgICAgIDx1bCBjbGFzcz1cInBhZ2luYXRpb25cIj5cblx0PGxpIHYtc2hvdz1cImVuYWJsZV9maXJzdF9wYWdlXCIgY2xhc3M9XCJwYWdpbmF0ZV9idXR0b24gcGFnZS1pdGVtIHByZXZpb3VzXCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aXZlX3BhZ2UoMCwgMClcIiBhcmlhLWNvbnRyb2xzPVwiZGVmYXVsdC1kYXRhdGFibGVcIiBkYXRhLWR0LWlkeD1cIjBcIiB0YWJpbmRleD1cIjBcIiBjbGFzcz1cInBhZ2UtbGlua1wiPlxuXHQgICAgwqtcblx0ICA8L2E+XG5cdDwvbGk+XG5cdDxsaSBjbGFzcz1cInBhZ2luYXRlX2J1dHRvbiBwYWdlLWl0ZW0gcHJldmlvdXNcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6IGFjdGl2ZV9wYWdlID09IDB9XCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJiYWNrX3BhZ2UoKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiMFwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICAmbHQ7XG5cdCAgPC9hPlxuXHQ8L2xpPlxuXHQ8bGkgdi1mb3I9XCJuIGluIG51bV9wYWdlX2J1dHRvbnNcIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aXZlX3BhZ2Uoc3RhcnRfcGFnZV9idXR0b24gKyBuIC0gMSlcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGl2ZV9wYWdlID09IHN0YXJ0X3BhZ2VfYnV0dG9uICsgbiAtIDEgfVwiIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbVwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgYXJpYS1jb250cm9scz1cImRlZmF1bHQtZGF0YXRhYmxlXCIgZGF0YS1kdC1pZHg9XCIxXCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJwYWdlLWxpbmtcIiA+e3tzdGFydF9wYWdlX2J1dHRvbiArIG59fTwvYT5cblx0ICA8IS0tICA6a2V5PVwidG90YWxfcm93c1wiLS0+XG5cdCAgPC9saT5cblx0PGxpIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbSBuZXh0XCIgOmNsYXNzPVwieyAnZGlzYWJsZWQnOiBhY3RpdmVfcGFnZSA9PSB0b3RhbF9wYWdlcyAtIDF9XCIgaWQ9XCJkZWZhdWx0LWRhdGF0YWJsZV9uZXh0XCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJuZXh0X3BhZ2UoKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiN1wiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICAmZ3Q7XG5cdCAgPC9hPlxuXHQ8L2xpPlxuXHQ8bGkgdi1zaG93PVwiZW5hYmxlX2xhc3RfcGFnZVwiIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbSBwcmV2aW91c1wiPlxuXHQgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgQGNsaWNrPVwiY2hhbmdlX2FjdGl2ZV9wYWdlKHRvdGFsX3BhZ2VzIC0gMSwgdG90YWxfcGFnZXMgLSBudW1fcGFnZV9idXR0b25zKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiMFwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICDCu1xuXHQgIDwvYT5cblx0PC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIDwvZGl2PiA8IS0tIGVuZCBkaXYgY29sLW1kLTcgLS0+XG48L2Rpdj4gPCEtLSBQZXJQYWdlIC0tPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0b3RhbF9yb3dzOiBOdW1iZXIsXG4gICAgcGVyX3BhZ2U6IE51bWJlcixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydjaGFuZ2VfYWN0aXZlX3BhZ2UnXSk7XG5cbmNvbnN0IGRlZmF1bHRfcGVyX3BhZ2UgPSAxMDtcbmNvbnN0IG1heF9wYWdlX2J1dHRvbnMgPSA2O1xuXG5jb25zdCBzdGFydF9wYWdlX2J1dHRvbiA9IHJlZigwKTtcbmNvbnN0IG51bV9wYWdlX2J1dHRvbnMgPSByZWYoMCk7XG5cbmNvbnN0IHRvdGFsX3BhZ2VzID0gcmVmKDApO1xuY29uc3QgYWN0aXZlX3BhZ2UgPSByZWYoMCk7XG5cbmNvbnN0IHRleHRfdGVtcGxhdGUgPSBcIlNob3dpbmcgcGFnZSAlYWN0aXZlX3BhZ2Ugb2YgJXRvdGFsX3BhZ2VzOiB0b3RhbCAldG90YWxfcm93cyByb3dzXCI7XG5jb25zdCB0ZXh0ID0gcmVmKFwiXCIpO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIGNhbGN1bGF0ZV9wYWdlcygpO1xufSk7XG5cbndhdGNoKCgpID0+IFtwcm9wcy50b3RhbF9yb3dzLCBwcm9wcy5wZXJfcGFnZV0sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGNhbGN1bGF0ZV9wYWdlcygpO1xufSwgeyBmbHVzaDogJ3ByZScsIGltbWVkaWF0ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlX3BhZ2VzKCkge1xuICAgIGlmIChwcm9wcy50b3RhbF9yb3dzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHBlcl9wYWdlID0gcHJvcHMucGVyX3BhZ2U7XG4gICAgdG90YWxfcGFnZXMudmFsdWUgPSBOdW1iZXIucGFyc2VJbnQoKHByb3BzLnRvdGFsX3Jvd3MgKyBwZXJfcGFnZSAtIDEpIC8gcGVyX3BhZ2UpO1xuICAgIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgPSBtYXhfcGFnZV9idXR0b25zO1xuICAgIGlmICh0b3RhbF9wYWdlcy52YWx1ZSA8IG51bV9wYWdlX2J1dHRvbnMudmFsdWUpIHtcblx0ICAgIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgPSB0b3RhbF9wYWdlcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZV9wYWdlLnZhbHVlID49IHRvdGFsX3BhZ2VzLnZhbHVlICYmIHRvdGFsX3BhZ2VzLnZhbHVlID4gMCkge1xuICAgICAgLy9cdHRvdGFsX3BhZ2VzLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgKyAxO1xuICAgICAgLyogSW4gY2FzZSB0aGUgY3VycmVudCBhY3RpdmUgcGFnZSBpcyBoaWdoZXIgdGhhbiB0aGUgbWF4IHBhZ2VzLCByZXN0YXJ0IGZyb20gcGFnZSAxICovXG4gICAgICBhY3RpdmVfcGFnZS52YWx1ZSA9IHRvdGFsX3BhZ2VzLnZhbHVlIC0gMTtcbiAgICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgLSBudW1fcGFnZV9idXR0b25zLnZhbHVlO1xuICAgICAgLyogUmVkdW5kYW50IGNhbGwgaW4gb3JkZXIgdG8gY29ycmVjdGx5IGxvYWQgcGFnZXMgKi9cbiAgICAgIGNoYW5nZV9hY3RpdmVfcGFnZShhY3RpdmVfcGFnZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0X3RleHQoKTtcbn1cblxuY29uc3QgZW5hYmxlX2ZpcnN0X3BhZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHRvdGFsX3BhZ2VzLnZhbHVlIDwgbWF4X3BhZ2VfYnV0dG9ucykge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVfcGFnZS52YWx1ZSA+PSBudW1fcGFnZV9idXR0b25zLnZhbHVlIC0gMTtcbn0pO1xuXG5jb25zdCBlbmFibGVfbGFzdF9wYWdlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICh0b3RhbF9wYWdlcy52YWx1ZSA8IG1heF9wYWdlX2J1dHRvbnMpIHtcblx0cmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlX3BhZ2UudmFsdWUgPCB0b3RhbF9wYWdlcy52YWx1ZSAtIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgKyAxO1xufSk7XG5cblxuZnVuY3Rpb24gbmV4dF9wYWdlKCkge1xuICAgIGNoYW5nZV9hY3RpdmVfcGFnZShhY3RpdmVfcGFnZS52YWx1ZSArIDEpO1xufVxuXG5mdW5jdGlvbiBiYWNrX3BhZ2UoKSB7XG4gICAgY2hhbmdlX2FjdGl2ZV9wYWdlKGFjdGl2ZV9wYWdlLnZhbHVlIC0gMSk7XG59XG5cbi8qICBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc2V0IHRoZSBjdXJyZW50IGFjdGl2ZSBwYWdlLCBpZiBubyBwYXJhbXMgaXMgcGFzc2VkXG4gICAgdGhlbiBpdCdzIGdvaW5nIHRvIGtlZXAgdGhlIHNhbWUgcGFnZS5cbiAgICBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIGNhc2Ugd2hlcmUgdGhlIGFjdGl2ZSBwYWdlID4gbGFzdCBwYWdlLFxuICAgIHNldHRpbmcgdGhlIGFjdGl2ZSBwYWdlIGFzIHRoZSBsYXN0IHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIGNoYW5nZV9hY3RpdmVfcGFnZShuZXdfYWN0aXZlX3BhZ2UsIG5ld19zdGFydF9wYWdlX2J1dHRvbikge1xuICAvKiBJbiBjYXNlIGEgbmV3IGFjdGl2ZSBwYWdlIGlzIHJlcXVlc3RlZCwganVtcCB0byB0aGF0IHBhZ2UgKi9cbiAgaWYgKG5ld19hY3RpdmVfcGFnZSAhPSBudWxsKSB7XG4gICAgYWN0aXZlX3BhZ2UudmFsdWUgPSBuZXdfYWN0aXZlX3BhZ2U7XG4gIH0gXG5cbiAgLyogQ2hhbmdlIHRoZSB0YWJsZSBmb290ZXIgYnV0dG9uICovXG4gIGlmIChuZXdfc3RhcnRfcGFnZV9idXR0b24gIT0gbnVsbCkge1xuICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID0gbmV3X3N0YXJ0X3BhZ2VfYnV0dG9uO1xuICB9XG5cbiAgLyogU2V0IHVwIHRoZSBjb3JyZWN0IHN0YXJ0IGFuZCBlbmQgcGFnZSBvZiB0aGUgdGFibGUgZm9vdGVyICovXG4gIGlmIChhY3RpdmVfcGFnZS52YWx1ZSA9PSBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSAmJiBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSA+IDApIHtcbiAgICBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSAtPSAxO1xuICB9XG4gIGNvbnN0IGVuZF9wYWdlX2J1dHRvbiA9IHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlICsgbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSAtIDE7XG4gIGlmIChhY3RpdmVfcGFnZS52YWx1ZSA9PSBlbmRfcGFnZV9idXR0b24gJiYgdG90YWxfcGFnZXMudmFsdWUgLSAxID4gZW5kX3BhZ2VfYnV0dG9uKSB7XG4gICAgc3RhcnRfcGFnZV9idXR0b24udmFsdWUgKz0gMTtcdFxuICB9XG4gIFxuICAvKiBDaGVjayB0aGF0IHRoZSBhY3RpdmVfcGFnZSBpcyBub3QgZ3JlYXRlciB0aGVuIHRoZSBsYXN0IHBhZ2UgKi9cbiAgLyogb3RoZXJ3aXNlIHNldCB0byB0aGUgbGFzdCBwYWdlICovXG4gIGlmKGFjdGl2ZV9wYWdlLnZhbHVlID4gdG90YWxfcGFnZXMudmFsdWUgLSAxICYmIHRvdGFsX3BhZ2VzLnZhbHVlICE9IDApIHtcbiAgICBhY3RpdmVfcGFnZS52YWx1ZSA9IHRvdGFsX3BhZ2VzLnZhbHVlIC0gMTtcbiAgICBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSA9IGFjdGl2ZV9wYWdlLnZhbHVlO1xuICB9XG5cbiAgLyogU2V0IHRoZSB0ZXh0IG9uIHRoZSB0YWJsZSBmb290ZXIsIG51bV9wYWdlcywgdG90YWxfcm93cywgZWNjLiAqL1xuICBzZXRfdGV4dCgpO1xuXG4gIC8qIEVtaXQgdGhlIGNoYW5nZV9hY3RpdmVfcGFnZSBldmVudCAqL1xuICBlbWl0KCdjaGFuZ2VfYWN0aXZlX3BhZ2UnLCBhY3RpdmVfcGFnZS52YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHNldF90ZXh0KCkge1xuICAgIHRleHQudmFsdWUgPSB0ZXh0X3RlbXBsYXRlLnJlcGxhY2UoXCIlYWN0aXZlX3BhZ2VcIiwgZm9ybWF0X251bWJlcihgJHthY3RpdmVfcGFnZS52YWx1ZSArIDF9YCkpXG5cdC5yZXBsYWNlKFwiJXRvdGFsX3BhZ2VzXCIsIGZvcm1hdF9udW1iZXIoYCR7dG90YWxfcGFnZXMudmFsdWV9YCkpXG5cdC5yZXBsYWNlKFwiJXRvdGFsX3Jvd3NcIiwgZm9ybWF0X251bWJlcihgJHtwcm9wcy50b3RhbF9yb3dzfWApKVxuXHQucmVwbGFjZShcIiVwZXJfcGFnZVwiLCBmb3JtYXRfbnVtYmVyKGAke3Byb3BzLnBlcl9wYWdlfWApKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X251bWJlcihzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvKC4pKD89KFxcZHszfSkrJCkvZywnJDEsJyk7XG59XG5cbmRlZmluZUV4cG9zZSh7IGNoYW5nZV9hY3RpdmVfcGFnZSB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiLyoqXG4gICAgKEMpIDIwMjMgLSBudG9wLm9yZyAgICBcbiovXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiByZWY9XCJvdmVybGF5XCIgY2xhc3M9XCJvdmVybGF5IGNlbnRlcmVkLW1lc3NhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNlwiIDpzdHlsZT1cInN0eWxlc1wiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+e3sgbG9hZGluZyB9fTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IGxvYWRpbmcgPSBpMThuKCdsb2FkaW5nJylcbmNvbnN0IG92ZXJsYXkgPSByZWYobnVsbCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgc3R5bGVzOiBTdHJpbmdcbn0pO1xuXG4vKiBTaG93IHRoZSBsb2FkaW5nICovXG5mdW5jdGlvbiBzaG93X2xvYWRpbmcodGltZSA9IDUwMCkge1xuICAkKG92ZXJsYXkudmFsdWUpLmZhZGVJbih0aW1lKTtcbn1cblxuLyogSGlkZSB0aGUgbG9hZGluZyAqL1xuZnVuY3Rpb24gaGlkZV9sb2FkaW5nKHRpbWUgPSA1MDApIHtcbiAgJChvdmVybGF5LnZhbHVlKS5mYWRlT3V0KHRpbWUpO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBoaWRlX2xvYWRpbmcsIHNob3dfbG9hZGluZyB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG1zLTFcIiBzdHlsZT1cIndoaXRlLXNwYWNlOm5vd3JhcFwiPlxuICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyO1wiIDpjaGVja2VkPVwidmFsdWVfMiA9PSB0cnVlXCIgQGNsaWNrPVwiY2hhbmdlX3ZhbHVlKClcIiAgIHR5cGU9XCJjaGVja2JveFwiIGlkPVwidG9nZ2xlLUJlZ2luXCIgOnRpdGxlPVwidGl0bGVcIj5cbiAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwidG9nZ2xlLUJlZ2luXCIgdi1odG1sPVwibGFiZWxcIj5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBoIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGU6dmFsdWUnLCAnY2hhbmdlX3ZhbHVlJ10pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB2YWx1ZTogQm9vbGVhbixcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGxhYmVsOiBTdHJpbmcsXG59KTtcblxuY29uc3QgdmFsdWVfMiA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgdmFsdWVfMi52YWx1ZSA9IHByb3BzLnZhbHVlO1xufSk7XG5cbndhdGNoKCgpID0+IHByb3BzLnZhbHVlLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICB2YWx1ZV8yLnZhbHVlID0gcHJvcHMudmFsdWU7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5mdW5jdGlvbiBjaGFuZ2VfdmFsdWUoKSB7XG4gICAgZW1pdCgndXBkYXRlOnZhbHVlJywgIXZhbHVlXzIudmFsdWUpO1xuICAgIGVtaXQoJ2NoYW5nZV92YWx1ZScsICF2YWx1ZV8yLnZhbHVlKTtcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8c2xvdCBuYW1lPVwiY3VzdG9tX2hlYWRlcjJcIj48L3Nsb3Q+XG4gICAgPGRpdiByZWY9XCJ0YWJsZV9jb250YWluZXJcIiA6aWQ9XCJpZFwiPlxuICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ncm91cCBtYi0yXCI+IDwhLS0gVGFibGVIZWFkZXIgLS0+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW4tdG9wOjAuNXJlbTtcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIFNob3dcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCB2LW1vZGVsPVwicGVyX3BhZ2VcIiBAY2hhbmdlPVwiY2hhbmdlX3Blcl9wYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtZm9yPVwicHAgaW4gcGVyX3BhZ2Vfb3B0aW9uc1wiIDp2YWx1ZT1cInBwXCI+e3sgcHAgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIEVudHJpZXNcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodDtcIiBjbGFzcz1cImZvcm0tZ3JvdXAgXCI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCIgY2xhc3M9XCJmb3JtLWdyb3VwIFwiPlxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjdXN0b21faGVhZGVyXCI+PC9zbG90PlxuXG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiZW5hYmxlX3NlYXJjaFwiIGNsYXNzPVwiZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPnt7IF9pMThuKCdzZWFyY2gnKSB9fTpcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic2VhcmNoXCIgdi1tb2RlbD1cIm1hcF9zZWFyY2hcIiBAaW5wdXQ9XCJvbl9jaGFuZ2VfbWFwX3NlYXJjaFwiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG1lLTFcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVzZXRfY29sdW1uX3NpemVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY29sdW1uc1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG1lLTFcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVmcmVzaF90YWJsZSgpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXJlZnJlc2hcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd19hdXRvcmVmcmVzaCA+IDBcIiBjbGFzcz1cImQtaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTd2l0Y2ggdi1tb2RlbDp2YWx1ZT1cImVuYWJsZV9hdXRvcmVmcmVzaFwiIGNsYXNzPVwibWUtMiBtdC0xXCIgOnRpdGxlPVwiYXV0b3JlZnJlc2hfdGl0bGVcIiBzdHlsZT1cIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlX3ZhbHVlPVwidXBkYXRlX2F1dG9yZWZyZXNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duIDppZD1cImlkICsgJ19kcm9wZG93bidcIiByZWY9XCJkcm9wZG93blwiPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJjb2wgaW4gY29sdW1uc193cmFwXCIgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG1zLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjtcIiA6Y2hlY2tlZD1cImNvbC52aXNpYmxlID09IHRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VfY29sdW1uc192aXNpYmlsaXR5KGNvbClcIiB0eXBlPVwiY2hlY2tib3hcIiA6aWQ9XCJnZXRfY29sX2lkKGNvbClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgOmZvcj1cImdldF9jb2xfaWQoY29sKVwiIHYtaHRtbD1cInByaW50X2NvbHVtbl9uYW1lKGNvbC5kYXRhKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+IDwhLS0gVGFibGVIZWFkZXIgLS0+XG5cbiAgICAgICAgPGRpdiA6a2V5PVwidGFibGVfa2V5XCIgc3R5bGU9XCJvdmVyZmxvdzphdXRvO3dpZHRoOjEwMCU7XCI+IDwhLS0gVGFibGUgLS0+XG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCJkaXNwbGF5X21lc3NhZ2UgPT0gdHJ1ZVwiIGNsYXNzPVwiY2VudGVyZWQtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cIm1lc3NhZ2VfdG9fZGlzcGxheVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRhYmxlIHJlZj1cInRhYmxlXCIgY2xhc3M9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG1sLTAgbXItMCBtYi0wIG50b3BuZy10YWJsZVwiXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWyhkaXNwbGF5X21lc3NhZ2UgfHwgbG9hZGluZykgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiIGRhdGEtcmVzaXphYmxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgOmRhdGEtcmVzaXphYmxlLWNvbHVtbnMtaWQ9XCJpZFwiPiA8IS0tIFRhYmxlIC0tPlxuICAgICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGNvbCwgY29sX2luZGV4KSBpbiBjb2x1bW5zX3dyYXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdi1pZj1cImNvbC52aXNpYmxlXCIgc2NvcGU9XCJjb2xcIiA6Y2xhc3M9XCJ7ICdwb2ludGVyJzogY29sLnNvcnRhYmxlLCAndW5zZXQnOiAhY29sLnNvcnRhYmxlLCB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm93cmFwO1wiIEBjbGljaz1cImNoYW5nZV9jb2x1bW5fc29ydChjb2wsIGNvbF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS1yZXNpemFibGUtY29sdW1uLWlkPVwiZ2V0X2NvbHVtbl9pZChjb2wuZGF0YSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cInByaW50X2NvbHVtbl9uYW1lKGNvbC5kYXRhKVwiIGNsYXNzPVwid3JhcC1jb2x1bW5cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpIHYtc2hvdz1cImNvbC5zb3J0ID09IDBcIiBjbGFzcz1cImZhIGZhLWZ3IGZhLXNvcnRcIj48L2k+IC0tPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSB2LXNob3c9XCJjb2wuc29ydCA9PSAxICYmIGNvbC5zb3J0YWJsZVwiIGNsYXNzPVwiZmEgZmEtZncgZmEtc29ydC11cFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHYtc2hvdz1cImNvbC5zb3J0ID09IDIgJiYgY29sLnNvcnRhYmxlXCIgY2xhc3M9XCJmYSBmYS1mdyBmYS1zb3J0LWRvd25cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICA8dHIgdi1pZj1cIiFjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSAmJiAhY2hhbmdpbmdfcm93c1wiIHYtZm9yPVwicm93IGluIGFjdGl2ZV9yb3dzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sLCBjb2xfaW5kZXgpIGluIGNvbHVtbnNfd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2LWlmPVwiY29sLnZpc2libGVcIiBzY29wZT1cImNvbFwiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInByaW50X2h0bWxfcm93ICE9IG51bGwgJiYgcHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHJvdywgdHJ1ZSkgIT0gbnVsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJjb2wuY2xhc3Nlc1wiIGNsYXNzPVwid3JhcC1jb2x1bW5cIiA6c3R5bGU9XCJjb2wuc3R5bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1odG1sPVwicHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHJvdylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiY29sLnN0eWxlXCIgc3R5bGU9XCJcIiBjbGFzcz1cIndyYXAtY29sdW1uIG1hcmdpbi1zbVwiIDpjbGFzcz1cImNvbC5jbGFzc2VzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VnVlTm9kZSA6a2V5PVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwicHJpbnRfdnVlX25vZGVfcm93ICE9IG51bGwgJiYgcHJpbnRfdnVlX25vZGVfcm93KGNvbC5kYXRhLCByb3csIHZ1ZV9vYmosIHRydWUpICE9IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb250ZW50PVwicHJpbnRfdnVlX25vZGVfcm93KGNvbC5kYXRhLCByb3csIHZ1ZV9vYmopXCI+PC9WdWVOb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyIHYtaWY9XCJkaXNwbGF5X2VtcHR5X3Jvd3MgJiYgYWN0aXZlX3Jvd3MubGVuZ3RoIDwgcGVyX3BhZ2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCJpbmRleCBpbiAocGVyX3BhZ2UgLSBhY3RpdmVfcm93cy5sZW5ndGgpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sLCBjb2xfaW5kZXgpIGluIGNvbHVtbnNfd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cIlwiIGNsYXNzPVwiXCIgdi1pZj1cImNvbC52aXNpYmxlXCIgc2NvcGU9XCJjb2xcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIndyYXAtY29sdW1uXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+IDwhLS0gVGFibGUgLS0+XG4gICAgICAgIDwvZGl2PiA8IS0tIFRhYmxlIGRpdi0tPlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8U2VsZWN0VGFibGVQYWdlIHJlZj1cInNlbGVjdF90YWJsZV9wYWdlXCIgOmtleT1cInNlbGVjdF9wYWdlc19rZXlcIiA6dG90YWxfcm93cz1cInRvdGFsX3Jvd3NcIiA6cGVyX3BhZ2U9XCJwZXJfcGFnZVwiXG4gICAgICAgICAgICAgICAgQGNoYW5nZV9hY3RpdmVfcGFnZT1cImNoYW5nZV9hY3RpdmVfcGFnZVwiPlxuICAgICAgICAgICAgPC9TZWxlY3RUYWJsZVBhZ2U+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cInF1ZXJ5X2luZm8gIT0gbnVsbFwiIGNsYXNzPVwibXQtMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZW5kXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIHN0eWxlPVwiXCIgY2xhc3M9XCJxdWVyeSB0ZXh0LWVuZFwiPjxzcGFuIGNsYXNzPVwicmVjb3Jkc1wiPnt7IHF1ZXJ5X2luZm8ubnVtX3JlY29yZHNfcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgfX08L3NwYW4+Ljwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGlkPVwiaGlzdG9yaWNhbF9mbG93c190YWJsZS1xdWVyeS10aW1lXCIgc3R5bGU9XCJcIiBjbGFzcz1cInF1ZXJ5XCI+UXVlcnkgcGVyZm9ybWVkIGluIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNlY29uZHNcIj57eyAocXVlcnlfaW5mby5xdWVyeV9kdXJhdGlvbl9tc2VjIC8gMTAwMCkudG9GaXhlZCgzKSB9fTwvc3Bhbj4gc2Vjb25kcy4gPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiaGlzdG9yaWNhbF9mbG93c190YWJsZS1xdWVyeVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1xdWVyeV9pbmZvLnF1ZXJ5IEBjbGljaz1cImNvcHlfcXVlcnlfaW50b19jbGlwYm9hcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPVwicXVlcnlfaW5mb19zcWxfYnV0dG9uXCI+U1FMPC9zcGFuPjwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RUYWJsZVBhZ2UgfSBmcm9tIFwiLi9zZWxlY3RfdGFibGVfcGFnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVnVlTm9kZSB9IGZyb20gXCIuL3Z1ZV9ub2RlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3dpdGNoIH0gZnJvbSBcIi4vc3dpdGNoLnZ1ZVwiO1xuXG4vKiByb3dzX2xvYWRlZCwgaXMgZW1pdHRlZCBldmVyeSB0aW1lIHRoZSByb3dzIGFyZSBsb2FkZWQsXG4gKiBsb2FkZWQsICAgICAgaXMgZW1pdHRlZCB3aGVuIHRoZSB0YWJsZSBpcyBsb2FkZWQgKG1vdW50ZWQpXG4gKi9cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2N1c3RvbV9ldmVudCcsICdsb2FkZWQnLCAncm93c19sb2FkZWQnXSk7XG5jb25zdCB2dWVfb2JqID0ge1xuICAgIGVtaXQsXG4gICAgaCxcbiAgICBuZXh0VGljayxcbn07XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgY29sdW1uczogQXJyYXksXG4gICAgZ2V0X3Jvd3M6IEZ1bmN0aW9uLCAvLyBhc3luYyAoYWN0aXZlX3BhZ2U6IG51bWJlciwgcGVyX3BhZ2U6IG51bWJlciwgY29sdW1uc193cmFwOiBhbnlbXSwgc2VhcmNoX21hcDogc3RyaW5nLCBmaXJzdF9nZXRfcm93czogYm9vbGVhbikgPT4geyB0b3RhbF9yb3dzOiBudW1iZXIsIHJvd3M6IGFueVtdLCBxdWVyeV9pbmZvOiB7IHF1ZXJ5X2R1cmF0aW9uX21zZWM6IG51bWJlciwgbnVtX3JlY29yZHNfcHJvY2Vzc2VkOiBzdHJpbmcsIHF1ZXJ5OiBzdHJpbmcgfSB9XG4gICAgZ2V0X2NvbHVtbl9pZDogRnVuY3Rpb24sXG4gICAgcHJpbnRfY29sdW1uX25hbWU6IEZ1bmN0aW9uLFxuICAgIHByaW50X2h0bWxfcm93OiBGdW5jdGlvbixcbiAgICBwcmludF92dWVfbm9kZV9yb3c6IEZ1bmN0aW9uLFxuICAgIGZfaXNfY29sdW1uX3NvcnRhYmxlOiBGdW5jdGlvbixcbiAgICBmX3NvcnRfcm93czogRnVuY3Rpb24sXG4gICAgZl9nZXRfY29sdW1uX2NsYXNzZXM6IEZ1bmN0aW9uLFxuICAgIGZfZ2V0X2NvbHVtbl9zdHlsZTogRnVuY3Rpb24sXG4gICAgZW5hYmxlX3NlYXJjaDogQm9vbGVhbixcbiAgICBkaXNwbGF5X2VtcHR5X3Jvd3M6IEJvb2xlYW4sXG4gICAgc2hvd19hdXRvcmVmcmVzaDogTnVtYmVyLCAvLyBhdXRvcmVmcmVzaCBzZWNvbmRzLCBpZiBudWxsIG9yIDAgYXV0b3JlZnJlc2ggc3dpdGNoIHdpbGwgbm90IHNob3dlZFxuICAgIGRlZmF1bHRfc29ydDogT2JqZWN0LCAvLyB7IGNvbHVtbl9pZDogc3RyaW5nLCBzb3J0OiBudW1iZXIgKDAsIDEsIDIpIH1cbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgcGFnaW5nOiBCb29sZWFuLFxuICAgIGRpc3BsYXlfbWVzc2FnZTogQm9vbGVhbixcbiAgICBtZXNzYWdlX3RvX2Rpc3BsYXk6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBzaG93X3RhYmxlID0gcmVmKHRydWUpO1xuY29uc3QgdGFibGVfY29udGFpbmVyID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBkcm9wZG93biA9IHJlZihudWxsKTtcbmNvbnN0IHJvd3NfaHRtbF9lbGVtZW50ID0gcmVmKFtdKTtcbmxldCBhY3RpdmVfcGFnZSA9IDA7XG5sZXQgcm93cyA9IFtdO1xuY29uc3QgY29sdW1uc193cmFwID0gcmVmKFtdKTtcbmNvbnN0IGFjdGl2ZV9yb3dzID0gcmVmKFtdKTtcbmNvbnN0IHRvdGFsX3Jvd3MgPSByZWYoMCk7XG5jb25zdCBwZXJfcGFnZV9vcHRpb25zID0gWzEwLCAyMCwgNDAsIDUwLCA4MCwgMTAwXTtcbmNvbnN0IHBlcl9wYWdlID0gcmVmKDEwKTtcbmNvbnN0IHN0b3JlID0gd2luZG93LnN0b3JlO1xuY29uc3QgbWFwX3NlYXJjaCA9IHJlZihcIlwiKTtcblxuY29uc3Qgc2VsZWN0X3RhYmxlX3BhZ2UgPSByZWYobnVsbCk7XG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcbmNvbnN0IHF1ZXJ5X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBxdWVyeV9pbmZvX3NxbF9idXR0b24gPSByZWYobnVsbCk7XG5jb25zdCBjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSA9IHJlZihmYWxzZSk7XG5jb25zdCBjaGFuZ2luZ19yb3dzID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV9hdXRvcmVmcmVzaCA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHByb3BzLmNvbHVtbnMgIT0gbnVsbCkge1xuICAgICAgICBsb2FkX3RhYmxlKCk7XG4gICAgfVxufSk7XG5cbmNvbnN0IGF1dG9yZWZyZXNoX3RpdGxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5zaG93X2F1dG9yZWZyZXNoID09IG51bGwgfHwgcHJvcHMuc2hvd19hdXRvcmVmcmVzaCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBsZXQgdGV4dCA9IF9pMThuKFwidGFibGUuYXV0b3JlZnJlc2hcIik7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShcIiV0aW1lXCIsIHByb3BzLnNob3dfYXV0b3JlZnJlc2gpO1xufSk7XG5cbndhdGNoKCgpID0+IFtwcm9wcy5pZCwgcHJvcHMuY29sdW1uc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGxvYWRfdGFibGUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnIH0pO1xuXG5mdW5jdGlvbiBnZXRfY29sX2lkKGNvbCkge1xuICAgIGlmKGNvbCAhPSBudWxsICYmIGNvbC5pZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjb2wuaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidG9nZ2xlLUJlZ2luXCI7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZSgpIHtcbiAgICBhd2FpdCBzZXRfY29sdW1uc193cmFwKCk7XG4gICAgYXdhaXQgc2V0X3Jvd3MoKTtcbiAgICBzZXRfY29sdW1uc19yZXNpemFibGUoKTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGRyb3Bkb3duLnZhbHVlLmxvYWRfbWVudSgpO1xuICAgIGVtaXQoXCJsb2FkZWRcIik7XG59XG5cbmxldCBhdXRvcmVmcmVzaF9pbnRlcnZhbDtcbmZ1bmN0aW9uIHVwZGF0ZV9hdXRvcmVmcmVzaCgpIHtcbiAgICBpZiAoZW5hYmxlX2F1dG9yZWZyZXNoLnZhbHVlID09IGZhbHNlKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b3JlZnJlc2hfaW50ZXJ2YWwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGF1dG9yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjaGFuZ2VfYWN0aXZlX3BhZ2UoKTtcbiAgICB9LCBwcm9wcy5zaG93X2F1dG9yZWZyZXNoICogMTAwMCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9jb2x1bW5zX3Zpc2liaWxpdHkoY29sKSB7XG4gICAgY2hhbmdpbmdfY29sdW1uX3Zpc2liaWxpdHkudmFsdWUgPSB0cnVlO1xuICAgIGNvbC52aXNpYmxlID0gIWNvbC52aXNpYmxlO1xuICAgIGlmIChwcm9wcy5wYWdpbmcpIHtcbiAgICAgICAgYXdhaXQgc2V0X3Jvd3MoKTtcbiAgICB9XG4gICAgLy8gcmVkcmF3X3RhYmxlKCk7XG4gICAgYXdhaXQgcmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSgpO1xuICAgIGF3YWl0IHNldF9jb2x1bW5zX3Zpc2liaWxpdHkoKTtcbiAgICAvLyBzZXRfY29sdW1uc19yZXNpemFibGUoKTtcbiAgICBjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eS52YWx1ZSA9IGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWRyYXdfdGFibGVfcmVzaXphYmxlKCkge1xuICAgIGF3YWl0IHJlZHJhd190YWJsZSgpO1xuICAgIHNldF9jb2x1bW5zX3Jlc2l6YWJsZSgpO1xufVxuXG5jb25zdCB0YWJsZV9rZXkgPSByZWYoMCk7XG5hc3luYyBmdW5jdGlvbiByZWRyYXdfdGFibGUoKSB7XG4gICAgdGFibGVfa2V5LnZhbHVlICs9IDE7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbn1cblxuZnVuY3Rpb24gc2V0X2NvbHVtbnNfcmVzaXphYmxlKCkge1xuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAvLyBzZWxlY3RvcjogdGFibGUudmFsdWUsXG4gICAgICAgIC8vIHBhZGRpbmc6IDAsXG4gICAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgICAgbWluV2lkdGg6IDMyLFxuICAgICAgICAvLyBwYWRkaW5nOiAtNTAsXG4gICAgICAgIC8vIG1heFdpZHRoOiAxNTAsXG4gICAgfTtcbiAgICAkKHRhYmxlLnZhbHVlKS5yZXNpemFibGVDb2x1bW5zKG9wdGlvbnMpO1xuICAgIC8vICQodGFibGUudmFsdWUpLmNzcygnd2lkdGgnLCAnMTAwJScpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfY29sdW1uc192aXNpYmlsaXR5X2RpY3QoKSB7XG4gICAgaWYgKHByb3BzLmNzcmYgPT0gbnVsbCkgeyByZXR1cm4ge307IH1cbiAgICBjb25zdCBwYXJhbXMgPSB7IHRhYmxlX2lkOiBwcm9wcy5pZCB9O1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RhYmxlcy91c2VyX2NvbHVtbnNfY29uZmlnLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBsZXQgY29sdW1uc192aXNpYmxlID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgbGV0IGNvbHVtbnNfdmlzaWJsZV9kaWN0ID0ge307XG4gICAgY29sdW1uc192aXNpYmxlLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgY29sdW1uc192aXNpYmxlX2RpY3RbYy5pZF0gPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiBjb2x1bW5zX3Zpc2libGVfZGljdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2NvbHVtbnNfdmlzaWJpbGl0eSgpIHtcbiAgICBpZiAocHJvcHMuY3NyZiA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBwYXJhbXMgPSB7IHRhYmxlX2lkOiBwcm9wcy5pZCwgdmlzaWJsZV9jb2x1bW5zX2lkczogW10sIGNzcmY6IHByb3BzLmNzcmYgfTtcbiAgICBwYXJhbXMudmlzaWJsZV9jb2x1bW5zX2lkcyA9IGNvbHVtbnNfd3JhcC52YWx1ZS5tYXAoKGMsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBjLmlkLFxuICAgICAgICAgICAgdmlzaWJsZTogYy52aXNpYmxlLFxuICAgICAgICAgICAgb3JkZXI6IGMub3JkZXIsXG4gICAgICAgICAgICBzb3J0OiBjLnNvcnQsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2FkZC90YWJsZXMvdXNlcl9jb2x1bW5zX2NvbmZpZy5sdWFgO1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcGFyYW1zKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2NvbHVtbnNfd3JhcCgpIHtcbiAgICBsZXQgY29sc192aXNpYmlsaXR5X2RpY3QgPSBhd2FpdCBnZXRfY29sdW1uc192aXNpYmlsaXR5X2RpY3QoKTtcbiAgICBsZXQgaXNfdGFibGVfbm90X3NvcnRlZCA9IHRydWU7XG4gICAgZm9yIChsZXQgaWQgaW4gY29sc192aXNpYmlsaXR5X2RpY3QpIHtcbiAgICAgICAgaXNfdGFibGVfbm90X3NvcnRlZCAmPSAoY29sc192aXNpYmlsaXR5X2RpY3RbaWRdPy5zb3J0KTtcbiAgICB9XG4gICAgY29sdW1uc193cmFwLnZhbHVlID0gcHJvcHMuY29sdW1ucy5tYXAoKGMsIGkpID0+IHtcbiAgICAgICAgbGV0IGNsYXNzZXMgPSBbXTtcbiAgICAgICAgbGV0IHN0eWxlID0gXCJcIjtcbiAgICAgICAgaWYgKHByb3BzLmZfZ2V0X2NvbHVtbl9jbGFzc2VzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBwcm9wcy5mX2dldF9jb2x1bW5fY2xhc3NlcyhjKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuZl9nZXRfY29sdW1uX3N0eWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0eWxlID0gcHJvcHMuZl9nZXRfY29sdW1uX3N0eWxlKGMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpZCA9IHByb3BzLmdldF9jb2x1bW5faWQoYyk7XG4gICAgICAgIGxldCBjb2xfb3B0ID0gY29sc192aXNpYmlsaXR5X2RpY3RbaWRdO1xuICAgICAgICBsZXQgc29ydCA9IGNvbF9vcHQ/LnNvcnQ7XG4gICAgICAgIGlmIChpc190YWJsZV9ub3Rfc29ydGVkID09IHRydWUgJiYgc29ydCA9PSBudWxsICYmIHByb3BzLmRlZmF1bHRfc29ydCAhPSBudWxsICYmIGlkID09IHByb3BzLmRlZmF1bHRfc29ydC5jb2x1bW5faWQpIHtcbiAgICAgICAgICAgIHNvcnQgPSBwcm9wcy5kZWZhdWx0X3NvcnQuc29ydDtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xfb3B0Py5zb3J0KSB7XG4gICAgICAgICAgICBzb3J0ID0gY29sX29wdD8uc29ydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHZpc2libGU6IGNvbF9vcHQ/LnZpc2libGUgPT0gbnVsbCB8fCBjb2xfb3B0Py52aXNpYmxlID09IHRydWUsXG4gICAgICAgICAgICBzb3J0OiBzb3J0LFxuICAgICAgICAgICAgc29ydGFibGU6IGlzX2NvbHVtbl9zb3J0YWJsZShjKSxcbiAgICAgICAgICAgIG9yZGVyOiBjb2xfb3B0Py5vcmRlciB8fCBpLFxuICAgICAgICAgICAgY2xhc3NlcyxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgZGF0YTogYyxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBhd2FpdCBzZXRfY29sdW1uc192aXNpYmlsaXR5KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0X2NvbHVtbl9zaXplKCkge1xuICAgIHByb3BzLmNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBsZXQgaWQgPSBgJHtwcm9wcy5pZH0tJHtwcm9wcy5nZXRfY29sdW1uX2lkKGMpfWA7XG4gICAgICAgIHN0b3JlLnJlbW92ZShpZCk7XG4gICAgfSk7XG4gICAgYXdhaXQgcmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VfcGVyX3BhZ2UoKSB7XG4gICAgcmVkcmF3X3NlbGVjdF9wYWdlcygpO1xuICAgIGNoYW5nZV9hY3RpdmVfcGFnZSgwKTtcbn1cblxuY29uc3Qgc2VsZWN0X3BhZ2VzX2tleSA9IHJlZigwKTtcbmZ1bmN0aW9uIHJlZHJhd19zZWxlY3RfcGFnZXMoKSB7XG4gICAgc2VsZWN0X3BhZ2VzX2tleS52YWx1ZSArPSAxO1xufVxuXG5jb25zdCB0YWJsZV9jb250ZW50X2lkID0gcmVmKDApO1xuZnVuY3Rpb24gcmVmcmVzaF90YWJsZV9jb250ZW50KCkge1xuICAgIHRhYmxlX2NvbnRlbnRfaWQudmFsdWUgKz0gMTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2FjdGl2ZV9wYWdlKG5ld19hY3RpdmVfcGFnZSkge1xuICAgIGlmIChuZXdfYWN0aXZlX3BhZ2UgIT0gbnVsbCkge1xuICAgICAgICBhY3RpdmVfcGFnZSA9IG5ld19hY3RpdmVfcGFnZTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZV9wYWdlID09IG51bGwpIHtcbiAgICAgICAgYWN0aXZlX3BhZ2UgPSAwO1xuICAgIH1cbiAgICBpZiAocHJvcHMucGFnaW5nID09IHRydWUgfHwgZm9yY2VfcmVmcmVzaCkge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9hY3RpdmVfcm93cygpO1xuICAgIH1cbiAgICByZWZyZXNoX3RhYmxlX2NvbnRlbnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2NvbHVtbl9zb3J0KGNvbCwgY29sX2luZGV4KSB7XG4gICAgaWYgKCFjb2wuc29ydGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb2wuc29ydCA9IChjb2wuc29ydCArIDEpICUgMztcbiAgICBjb2x1bW5zX3dyYXAudmFsdWUuZmlsdGVyKChjLCBpKSA9PiBpICE9IGNvbF9pbmRleCkuZm9yRWFjaCgoYykgPT4gYy5zb3J0ID0gMCk7XG4gICAgaWYgKGNvbC5zb3J0ID09IDApIHsgcmV0dXJuOyB9XG4gICAgaWYgKHByb3BzLnBhZ2luZykge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9hY3RpdmVfcm93cygpO1xuICAgIH1cbiAgICBhd2FpdCBzZXRfY29sdW1uc192aXNpYmlsaXR5KCk7XG59XG5cbmZ1bmN0aW9uIGdldF9zb3J0X2Z1bmN0aW9uKCkge1xuICAgIGlmIChwcm9wcy5mX3NvcnRfcm93cyAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5mX3NvcnRfcm93cztcbiAgICB9XG4gICAgcmV0dXJuIChjb2wsIHIwLCByMSkgPT4ge1xuICAgICAgICBsZXQgcjBfY29sID0gcHJvcHMucHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHIwKTtcbiAgICAgICAgbGV0IHIxX2NvbCA9IHByb3BzLnByaW50X2h0bWxfcm93KGNvbC5kYXRhLCByMSk7XG4gICAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9O1xufVxuXG5sZXQgZm9yY2VfcmVmcmVzaCA9IGZhbHNlO1xubGV0IGZvcmNlX2Rpc2FibGVfbG9hZGluZyA9IGZhbHNlO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogIEZ1bmN0aW9uIHVzZWQgdG8gcmVsb2FkIHRoZSB0YWJsZSBjb250ZW50cywgXG4gICAgc2V0IGRpc2FibGVfbG9hZGluZyB0byB0cnVlIGlmIG5vIGxvYWRpbmcgaXMgbmVlZGVkIGFuZFxuICAgIGNvbnNlcXVlbnRseSBkbyBub3QganVtcCB0byB0aGUgZmlyc3QgcGFnZSwgYnV0XG4gICAganVzdCByZWxvYWQgdGhlIGN1cnJlbnQgcGFnZVxuKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKSB7XG4gICAgLyogTk9URTogZmlyc3QgcmVmcmVzaF90YWJsZSBpcyBjYWxsZWQgdGhlbiBzZXRfcm93cyAqL1xuICAgIGZvcmNlX3JlZnJlc2ggPSB0cnVlO1xuICAgIGZvcmNlX2Rpc2FibGVfbG9hZGluZyA9IGRpc2FibGVfbG9hZGluZyB8fCBmYWxzZTtcblxuICAgIGlmKGZvcmNlX2Rpc2FibGVfbG9hZGluZykge1xuICAgICAgICAvKiBJbiBjYXNlIG9mIGRpc2FibGVkIGxvYWRpbmcsIHJlbG9hZCB0aGUgc2FtZSBwYWdlICovXG4gICAgICAgIHNlbGVjdF90YWJsZV9wYWdlLnZhbHVlLmNoYW5nZV9hY3RpdmVfcGFnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIE90aGVyd2lzZSByZWxvYWQgZnJvbSBwYWdlIDEgKi9cbiAgICAgICAgc2VsZWN0X3RhYmxlX3BhZ2UudmFsdWUuY2hhbmdlX2FjdGl2ZV9wYWdlKDAsIDApO1xuICAgIH1cbiAgICBhd2FpdCBuZXh0VGljaygpO1xuXG4gICAgLyogUmVzZXQgdGhlIHJlZnJlc2gvbG9hZGluZyBwYXJhbXMgKi9cbiAgICBmb3JjZV9yZWZyZXNoID0gZmFsc2U7XG4gICAgZm9yY2VfZGlzYWJsZV9sb2FkaW5nID0gZmFsc2U7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5sZXQgZmlyc3RfZ2V0X3Jvd3MgPSB0cnVlO1xuYXN5bmMgZnVuY3Rpb24gc2V0X3Jvd3MoKSB7XG4gICAgLy8gY2hhbmdpbmdfcm93cy52YWx1ZSA9IHRydWU7XG4gICAgbG9hZGluZy52YWx1ZSA9IHRydWUgJiYgIWZvcmNlX2Rpc2FibGVfbG9hZGluZztcbiAgICBsZXQgcmVzID0gYXdhaXQgcHJvcHMuZ2V0X3Jvd3MoYWN0aXZlX3BhZ2UsIHBlcl9wYWdlLnZhbHVlLCBjb2x1bW5zX3dyYXAudmFsdWUsIG1hcF9zZWFyY2gudmFsdWUsIGZpcnN0X2dldF9yb3dzKTtcbiAgICBxdWVyeV9pbmZvLnZhbHVlID0gbnVsbDtcbiAgICBpZiAocmVzLnF1ZXJ5X2luZm8gIT0gbnVsbCkge1xuICAgICAgICBxdWVyeV9pbmZvLnZhbHVlID0gcmVzLnF1ZXJ5X2luZm87XG4gICAgfVxuICAgIGZpcnN0X2dldF9yb3dzID0gZmFsc2U7XG4gICAgdG90YWxfcm93cy52YWx1ZSA9IHJlcy5yb3dzLmxlbmd0aDtcbiAgICBpZiAocHJvcHMucGFnaW5nID09IHRydWUpIHtcbiAgICAgICAgdG90YWxfcm93cy52YWx1ZSA9IHJlcy50b3RhbF9yb3dzO1xuICAgIH1cbiAgICByb3dzID0gcmVzLnJvd3M7XG4gICAgc2V0X2FjdGl2ZV9yb3dzKCk7XG4gICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xuICAgIGVtaXQoJ3Jvd3NfbG9hZGVkJywgcmVzKTtcbn1cblxuZnVuY3Rpb24gaXNfY29sdW1uX3NvcnRhYmxlKGNvbCkge1xuICAgIGlmIChwcm9wcy5mX2lzX2NvbHVtbl9zb3J0YWJsZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5mX2lzX2NvbHVtbl9zb3J0YWJsZShjb2wpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0X2FjdGl2ZV9yb3dzKCkge1xuICAgIGxldCBzdGFydF9yb3dfaW5kZXggPSAwO1xuICAgIGlmIChwcm9wcy5wYWdpbmcgPT0gZmFsc2UpIHtcbiAgICAgICAgc3RhcnRfcm93X2luZGV4ID0gYWN0aXZlX3BhZ2UgKiBwZXJfcGFnZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBhZ2luZyA9PSBmYWxzZSkge1xuICAgICAgICBsZXQgZl9zb3J0ID0gZ2V0X3NvcnRfZnVuY3Rpb24oKTtcbiAgICAgICAgbGV0IGNvbF90b19zb3J0ID0gZ2V0X2NvbHVtbl90b19zb3J0KCk7XG4gICAgICAgIHJvd3MgPSByb3dzLnNvcnQoKHIwLCByMSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZfc29ydChjb2xfdG9fc29ydCwgcjAsIHIxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFjdGl2ZV9yb3dzLnZhbHVlID0gcm93cy5zbGljZShzdGFydF9yb3dfaW5kZXgsIHN0YXJ0X3Jvd19pbmRleCArIHBlcl9wYWdlLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbHVtbl90b19zb3J0KCkge1xuICAgIGxldCBjb2xfdG9fc29ydCA9IGNvbHVtbnNfd3JhcC52YWx1ZS5maW5kKChjKSA9PiBjLnNvcnQgIT0gMCk7XG4gICAgcmV0dXJuIGNvbF90b19zb3J0O1xufVxuXG5sZXQgbWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dDtcbmFzeW5jIGZ1bmN0aW9uIG9uX2NoYW5nZV9tYXBfc2VhcmNoKCkge1xuICAgIGxldCB0aW1lb3V0ID0gMTAwMDtcbiAgICBpZiAobWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICB9XG4gICAgbWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgICAgICBtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0ID0gbnVsbDtcbiAgICB9LCB0aW1lb3V0KTtcblxufVxuXG5mdW5jdGlvbiBjb3B5X3F1ZXJ5X2ludG9fY2xpcGJvYXJkKCRldmVudCkge1xuICAgIE50b3BVdGlscy5jb3B5VG9DbGlwYm9hcmQocXVlcnlfaW5mby52YWx1ZS5xdWVyeSwgcXVlcnlfaW5mb19zcWxfYnV0dG9uLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbHVtbnNfZGVmcygpIHtcbiAgICByZXR1cm4gY29sdW1uc193cmFwLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRfcm93c19udW0oKSB7XG4gICAgcmV0dXJuIHRvdGFsX3Jvd3MudmFsdWU7XG59XG5cbmRlZmluZUV4cG9zZSh7IGxvYWRfdGFibGUsIHJlZnJlc2hfdGFibGUsIGdldF9jb2x1bW5zX2RlZnMsIGdldF9yb3dzX251bSB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uc3RpY2t5IHtcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgIGxlZnQ6IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG5cbi53cmFwLWNvbHVtbiB7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4ucG9pbnRlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4udW5zZXQge1xuICAgIGN1cnNvcjogdW5zZXQ7XG59XG5cbi5saW5rLWJ1dHRvbiB7XG4gICAgY29sb3I6IHZhcigtLWJzLWRyb3Bkb3duLWxpbmstY29sb3IpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmxpbmstZGlzYWJsZWQge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGNvbG9yOiAjY2NjO1xufVxuXG50ZCB7XG4gICAgaGVpZ2h0OiAyLjVyZW07XG59XG5cbi5tYXJnaW4tc20ge1xuICAgIG1hcmdpbi1ib3R0b206IC0wLjI1cmVtO1xuICAgIG1hcmdpbi10b3A6IC0wLjI1cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxUYWJsZSB2LWlmPVwibW91bnRfdGFibGVcIiByZWY9XCJ0YWJsZVwiXG5cdCA6aWQ9XCJ0YWJsZV9pZF8yXCJcblx0IDpjb2x1bW5zPVwidGFibGVfY29uZmlnLmNvbHVtbnNcIlxuICAgICAgICAgOmdldF9yb3dzPVwidGFibGVfY29uZmlnLmdldF9yb3dzXCJcbiAgICAgICAgIDpnZXRfY29sdW1uX2lkPVwidGFibGVfY29uZmlnLmdldF9jb2x1bW5faWRcIlxuICAgICAgICAgOnByaW50X2NvbHVtbl9uYW1lPVwidGFibGVfY29uZmlnLnByaW50X2NvbHVtbl9uYW1lXCJcblx0IDpwcmludF9odG1sX3Jvdz1cInRhYmxlX2NvbmZpZy5wcmludF9odG1sX3Jvd1wiXG5cdCA6cHJpbnRfdnVlX25vZGVfcm93PVwidGFibGVfY29uZmlnLnByaW50X3Z1ZV9ub2RlX3Jvd1wiXG5cdCA6Zl9pc19jb2x1bW5fc29ydGFibGU9XCJ0YWJsZV9jb25maWcuZl9pc19jb2x1bW5fc29ydGFibGVcIlxuXHQgOmZfZ2V0X2NvbHVtbl9jbGFzc2VzPVwidGFibGVfY29uZmlnLmZfZ2V0X2NvbHVtbl9jbGFzc2VzXCJcblx0IDpmX2dldF9jb2x1bW5fc3R5bGU9XCJ0YWJsZV9jb25maWcuZl9nZXRfY29sdW1uX3N0eWxlXCJcblx0IDpkaXNwbGF5X2VtcHR5X3Jvd3M9XCJ0YWJsZV9jb25maWcuZGlzcGxheV9lbXB0eV9yb3dzXCJcblx0IDpmX3NvcnRfcm93cz1cImZfc29ydF9yb3dzXCJcblx0IDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuXHQgOmRlZmF1bHRfc29ydD1cInRhYmxlX2NvbmZpZy5kZWZhdWx0X3NvcnRcIlxuXHQgOnNob3dfYXV0b3JlZnJlc2g9XCJ0YWJsZV9jb25maWcuc2hvd19hdXRvcmVmcmVzaFwiXG5cdCA6cGFnaW5nPVwidGFibGVfY29uZmlnLnBhZ2luZ1wiXG5cdCA6Y3NyZj1cImNzcmZcIlxuICAgICA6ZGlzcGxheV9tZXNzYWdlPVwiZGlzcGxheV9tZXNzYWdlXCJcbiAgICAgOm1lc3NhZ2VfdG9fZGlzcGxheT1cIm1lc3NhZ2VfdG9fZGlzcGxheVwiXG5cdCBAbG9hZGVkPVwib25fbG9hZGVkXCJcbiAgICAgQHJvd3NfbG9hZGVkPVwicm93c19sb2FkZWRcIlxuXHQgQGN1c3RvbV9ldmVudD1cIm9uX2N1c3RvbV9ldmVudFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgIDxzbG90IG5hbWU9XCJjdXN0b21faGVhZGVyXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvVGFibGU+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGUgfSBmcm9tIFwiLi90YWJsZS52dWVcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvdGFibGUtdXRpbHNcIjtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnY3VzdG9tX2V2ZW50JywgJ2xvYWRlZCcsICdyb3dzX2xvYWRlZCddKVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdGFibGVfY29uZmlnX2lkOiBTdHJpbmcsIC8vIG5hbWUgb2YgY29uZmlndXJhdGlvbiBmaWxlIGluIGh0dHBkb2NzL3RhYmxlc19jb25maWdcbiAgICB0YWJsZV9pZDogU3RyaW5nLCAvLyBpZCBvZiB0YWJsZSwgc2FtZSB0YWJsZV9jb25maWdfaWQgY2FuIGhhdmUgZGlmZmVyZW50IHRhYmxlX2lkIGFuZCB0aGVuIGRpZmZlcmVudCBjb2x1bXVucyB2aXNpYmxlIHNldHRpbnNcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgZl9tYXBfY29uZmlnOiBGdW5jdGlvbixcbiAgICBmX21hcF9jb2x1bW5zOiBGdW5jdGlvbixcbiAgICBmX3NvcnRfcm93czogRnVuY3Rpb24sXG4gICAgZ2V0X2V4dHJhX3BhcmFtc19vYmo6IEZ1bmN0aW9uLFxuICAgIGRpc3BsYXlfbWVzc2FnZTogQm9vbGVhbixcbiAgICBtZXNzYWdlX3RvX2Rpc3BsYXk6IFN0cmluZyxcbn0pO1xuXG5jb25zdCB0YWJsZV9jb25maWcgPSByZWYoe30pO1xuY29uc3QgdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBtb3VudF90YWJsZSA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHByb3BzLnRhYmxlX2lkICE9IG51bGwgfHwgcHJvcHMudGFibGVfY29uZmlnX2lkICE9IG51bGwpIHtcblx0bG9hZF90YWJsZSgpO1xuICAgIH1cbn0pO1xuXG53YXRjaCgoKSA9PiBbcHJvcHMudGFibGVfaWQsIHByb3BzLnRhYmxlX2NvbmZpZ19pZF0sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGxvYWRfdGFibGUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbmNvbnN0IHRhYmxlX2lkXzIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLnRhYmxlX2lkICE9IG51bGwpIHsgcmV0dXJuIHByb3BzLnRhYmxlX2lkOyB9XG4gICAgcmV0dXJuIHByb3BzLnRhYmxlX2NvbmZpZ19pZDtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlKCkge1xuICAgIG1vdW50X3RhYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBsZXQgdGFibGVfY29uZmlnX2lkXzIgPSBwcm9wcy50YWJsZV9jb25maWdfaWQ7XG4gICAgaWYgKHRhYmxlX2NvbmZpZ19pZF8yID09IG51bGwpIHtcblx0dGFibGVfY29uZmlnX2lkXzIgPSBwcm9wcy50YWJsZV9pZDtcbiAgICB9XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gYXdhaXQgVGFibGVVdGlscy5idWlsZF90YWJsZShodHRwX3ByZWZpeCwgdGFibGVfY29uZmlnX2lkXzIsIHByb3BzLmZfbWFwX2NvbHVtbnMsIHByb3BzLmdldF9leHRyYV9wYXJhbXNfb2JqKTtcbiAgICBpZiAocHJvcHMuZl9tYXBfY29uZmlnICE9IG51bGwpIHtcblx0dGFibGVfY29uZmlnLnZhbHVlID0gcHJvcHMuZl9tYXBfY29uZmlnKHRhYmxlX2NvbmZpZy52YWx1ZSk7XG4gICAgfVxuICAgIG1vdW50X3RhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xufVxuXG5mdW5jdGlvbiBvbl9sb2FkZWQoKSB7XG4gICAgZW1pdCgnbG9hZGVkJyk7XG59XG5cbmZ1bmN0aW9uIG9uX2N1c3RvbV9ldmVudChldmVudCkge1xuICAgIGVtaXQoJ2N1c3RvbV9ldmVudCcsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcm93c19sb2FkZWQocmVzKSB7XG4gICAgZW1pdCgncm93c19sb2FkZWQnLCByZXMpO1xufVxuXG5jb25zdCByZWZyZXNoX3RhYmxlID0gKGRpc2FibGVfbG9hZGluZykgPT4ge1xuICAgIHRhYmxlLnZhbHVlLnJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKTtcbn1cblxuY29uc3QgZ2V0X2NvbHVtbnNfZGVmcyA9ICgpID0+IHtcbiAgICBpZiAodGFibGUudmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gW107IH1cbiAgICByZXR1cm4gdGFibGUudmFsdWUuZ2V0X2NvbHVtbnNfZGVmcygpO1xufVxuXG5jb25zdCBnZXRfcm93c19udW0gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRhYmxlLnZhbHVlLmdldF9yb3dzX251bSgpO1xufVxuXG5kZWZpbmVFeHBvc2UoeyByZWZyZXNoX3RhYmxlLCBnZXRfY29sdW1uc19kZWZzLCBnZXRfcm93c19udW0gfSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXYgdi1pZj1cInNob3dcIiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeVwiIDpzdHlsZT1cInsnd2lkdGgnOiBzaXplLCAnaGVpZ2h0Jzogc2l6ZX1cIiByb2xlPVwic3RhdHVzXCI+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIHNob3c6IEJvb2xlYW4sXG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjItMjMgLSBudG9wLm9yZyAgICAgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cInNjcmlwdC1kZXNjcmlwdGlvblwiIGNsYXNzPVwibm90ZXMgYmctbGlnaHQgYm9yZGVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgPGI+e3sgX2kxOG4oJ25vdGVzJykgfX08L2I+XG4gICAgPHVsPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibm90ZSBpbiBwcm9wcy5ub3RlX2xpc3RcIj5cbiAgICAgICAgPGxpIHYtaHRtbD1cIm5vdGVcIj48L2xpPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBub3RlX2xpc3Q6IEFycmF5LFxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIEBhcHBseT1cImFwcGx5XCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZXh0cmFjdCcpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0XCIgOmNsYXNzPVwieyAnYWxlcnQtaW5mbyc6IGRhdGFfYXZhaWxhYmxlICE9IDIsICdhbGVydC13YXJuaW5nJzogZGF0YV9hdmFpbGFibGUgPT0gMiB9XCIgdi1odG1sPVwiZGVzY3JpcHRpb25cIj48L2Rpdj5cbiAgICA8Zm9ybSB2LWlmPVwiZGF0YV9hdmFpbGFibGUgPT0gMVwiIHN0eWxlPVwiaGVpZ2h0Ojk1JTtcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0zIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X2hpZGVfbWVudVwiPnt7aTE4bignYWR2YW5jZWQnKX19PGkgOmNsYXNzPVwieyAnZmFzIGZhLWNhcmV0LWRvd24nOiBzaG93X21lbnUsICdmYXMgZmEtY2FyZXQtdXAnOiAhc2hvd19tZW51fVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblx0ICBcblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC05IHRleHQtcmlnaHQgYXNkXCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxcmVtO1wiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiAgdmFsdWU9XCJ0cnVlXCIgY2hlY2tlZD1cIlwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rfbm93Jyl9fSA8L2xhYmVsPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiIHZhbHVlPVwiZmFsc2VcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5xdWV1ZV9hc19qb2InKX19IDwvbGFiZWw+XG5cdCAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXHRcbiAgICAgICAgPGRpdiB2LXNob3c9XCJzaG93X21lbnVcIiBjbGFzcz1cInJvd1wiIGlkPVwicGNhcERvd25sb2FkTW9kYWxfYWR2YW5jZWRcIiBzdHlsZT1cIlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTEyIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJyPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2JwZicpfX0gPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3d3dy5udG9wLm9yZy9ndWlkZXMvbjJkaXNrL2ZpbHRlcnMuaHRtbFwiPjxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdCAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsdGVyXCI+PC9zcGFuPjwvc3Bhbj5cblx0ICAgICAgPGlucHV0IG5hbWU9XCJicGZfZmlsdGVyXCIgdi1tb2RlbD1cImJwZl9maWx0ZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIGRhdGEtYnBmPVwiYnBmXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgc3BlbGxjaGVjaz1cImZhbHNlXCI+XG5cdCAgICAgIDxzcGFuIHYtc2hvdz1cImludmFsaWRfYnBmXCIgc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7ZGlzcGxheTpibG9jaztcIiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2sgXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXHQgICAgPGJyPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2V4YW1wbGVzJyl9fTo8L2xhYmVsPlxuXHQgICAgPGJyPlxuXHQgICAgPHVsPlxuXHQgICAgICA8bGk+SG9zdDogPGk+aG9zdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+SFRUUDogPGk+dGNwIGFuZCBwb3J0IDgwPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGJldHdlZW4gaG9zdHM6IDxpPmlwIGhvc3QgMTkyLjE2OC4xLjEgYW5kIDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGZyb20gYW4gaG9zdCB0byBhbm90aGVyOiA8aT5pcCBzcmMgMTkyLjE2OC4xLjEgYW5kIGRzdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHYtc2hvdz1cImRhdGFfYXZhaWxhYmxlICE9IDJcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJkYXRhX2F2YWlsYWJsZSA9PSAyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ29rJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPiAgXG48L21vZGFsPiAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuXHQgICAgaW52YWxpZF9icGY6IGZhbHNlLFxuXHQgICAgYnBmX2ZpbHRlcjogXCJcIixcblx0ICAgIGV4dHJhY3Rfbm93OiB0cnVlLFxuXHQgICAgc2hvd19tZW51OiB0cnVlLFxuXHQgICAgZGF0YV9hdmFpbGFibGU6IDAsIC8vIDAgPT0gbG9hZGluZywgMSA9PSBhdmFpbGFibGUsIDIgPT0gbm8gZGF0YVxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBlcG9jaF9pbnRlcnZhbDogbnVsbCxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRwYWQyX251bWJlcjogZnVuY3Rpb24obnVtYmVyKSB7XG5cdCAgICByZXR1cm4gU3RyaW5nKG51bWJlcikucGFkU3RhcnQoMiwgJzAnKTtcblx0fSxcblx0Zm9ybWF0X2RhdGU6IGZ1bmN0aW9uKGQpIHtcblx0ICAgIC8vIGxldCBkYXkgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0RGF0ZSgpKTtcblx0ICAgIC8vIGxldCBtb250aCA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNb250aCgpKTtcblx0ICAgIC8vIGxldCBob3VycyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRIb3VycygpKTtcblx0ICAgIC8vIGxldCBtaW51dGVzID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1pbnV0ZXMoKSk7XG5cdCAgICAvLyBsZXQgcyA9IGAke2RheX0vJHttb250aH0vJHtkLmdldEZ1bGxZZWFyKCl9ICR7aG91cnN9OiR7bWludXRlc31gO1xuXHQgICAgbGV0IGRfbXMgPSBkLnZhbHVlT2YoKTtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZF9tcyk7XG5cdH0sXG5cdGFwcGx5OiBhc3luYyBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmJwZl9maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLmJwZl9maWx0ZXIgIT0gXCJcIikge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YT9xdWVyeT0ke3RoaXMuYnBmX2ZpbHRlcn1gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHR0aGlzLmludmFsaWRfYnBmID0gIXJlcy5yZXNwb25zZTtcblx0XHRpZiAodGhpcy5pbnZhbGlkX2JwZiA9PSB0cnVlKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XHRcdFxuXHQgICAgfVxuXHQgICAgbGV0IHVybF9yZXF1ZXN0X29iaiA9IHtcblx0XHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG5cdFx0ZXBvY2hfYmVnaW46IHRoaXMuZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sXG5cdFx0ZXBvY2hfZW5kOiB0aGlzLmVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCxcblx0XHRicGZfZmlsdGVyOiB0aGlzLmJwZl9maWx0ZXIsXG5cdCAgICB9O1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0X3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcmVxdWVzdF9vYmopO1xuXHQgICAgaWYgKHRoaXMuZXh0cmFjdF9ub3cgPT0gdHJ1ZSkge1xuXHRcdFxuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvcGNhcC9saXZlX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0d2luZG93Lm9wZW4odXJsX3JlcXVlc3QsICdfc2VsZicsIGZhbHNlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS90cmFmZmljX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0bGV0IHJlc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHRsZXQgam9iX2lkID0gcmVzcC5pZDtcblx0XHQvL2xldCBqb2JfaWQgPSAyO1xuXHRcdGxldCBhbGVydF90ZXh0X2h0bWwgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0aW9uX3NjaGVkdWxlZCcpO1xuXHRcdGxldCBwYWdlX25hbWUgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy50cmFmZmljX2V4dHJhY3Rpb25fam9icycpO1xuXHRcdGxldCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpO1xuXHRcdGxldCBocmVmID0gYDxhIGhyZWY9XCIvbHVhL2lmX3N0YXRzLmx1YT9pZmlkPSR7aWZpZH0mcGFnZT10cmFmZmljX3JlY29yZGluZyZ0YWI9am9icyZqb2JfaWQ9JHtqb2JfaWR9XCI+JHtwYWdlX25hbWV9PC9hPmA7IFxuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGFsZXJ0X3RleHRfaHRtbC5yZXBsYWNlKCcle3BhZ2V9JywgaHJlZik7XG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYCR7YWxlcnRfdGV4dF9odG1sfSAke2pvYl9pZH1gO1xuXHRcdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCB7IHRleHRfaHRtbDogYWxlcnRfdGV4dF9odG1sLCB0eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIiB9KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuY2xvc2UoKTtcblx0fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHR0aGlzLmRhdGFfYXZhaWxhYmxlID0gMDtcblx0ICAgIH0sIDEwMDApO1xuXHR9LFxuXHRzaG93OiBhc3luYyBmdW5jdGlvbihicGZfZmlsdGVyLCBlcG9jaF9pbnRlcnZhbCkge1x0ICAgIFxuXHQgICAgaWYgKGVwb2NoX2ludGVydmFsID09IG51bGwpIHtcblx0XHRsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHRpZiAoc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwgfHwgc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoXCJtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246IGVwb2NoX2JlZ2luIGFuZCBlcG9jaF9lbmQgdW5kZWZpbmVkIGluIHVybFwiKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRlcG9jaF9pbnRlcnZhbCA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG5cdCAgICB9XG5cdCAgICB0aGlzLmVwb2NoX2ludGVydmFsID0gZXBvY2hfaW50ZXJ2YWw7XG5cdCAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhlcG9jaF9pbnRlcnZhbCk7XG5cdCAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2NoZWNrX3JlY29yZGluZ19kYXRhLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIG51bGwsIHRydWUpO1xuXHQgICAgaWYgKHJlcy5hdmFpbGFibGUgPT0gZmFsc2UpIHtcblx0XHR0aGlzLmRhdGFfYXZhaWxhYmxlID0gMjtcblx0XHR0aGlzLmRlc2NyaXB0aW9uID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcubm9fcmVjb3JkZWRfZGF0YScpO1xuXHRcdHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdGhpcy5kYXRhX2F2YWlsYWJsZSA9IDE7XG5cdCAgICBsZXQgZXh0cmFfaW5mbyA9IFwiXCI7XG5cdCAgICBpZiAocmVzLmluZm8gIT0gbnVsbCkge1xuXHRcdGV4dHJhX2luZm8gPSByZXMuaW5mbztcblx0ICAgIH07XG5cdCAgICBpZiAoYnBmX2ZpbHRlciA9PSBudWxsKSB7XG5cdFx0bGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0XHRpZiAocmVzID09IG51bGwgfHwgcmVzLmJwZiA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYG1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogJHt1cmxfcmVxdWVzdH0gcmV0dXJuIG51bGwgdmFsdWVgKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRicGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIH1cblx0ICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9ucyhlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiwgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kLCBleHRyYV9pbmZvKTtcblx0ICAgIFxuXHQgICAgLy8gbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIC8vIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHQgICAgLy8gbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdCAgICAvLyB0aGlzLmJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgdGhpcy5icGZfZmlsdGVyID0gYnBmX2ZpbHRlcjtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHNldF9kZXNjcmlwdGlvbnM6IGZ1bmN0aW9uKGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQsIGluZm8pIHtcblx0ICAgIGxldCBkYXRlX2JlZ2luID0gbmV3IERhdGUoZXBvY2hfYmVnaW4gKiAxMDAwKTtcblx0ICAgIGxldCBkYXRlX2VuZCA9IG5ldyBEYXRlKGVwb2NoX2VuZCAqIDEwMDApO1xuXHQgICAgXG5cdCAgICBsZXQgZGVzYyA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmFib3V0X3RvX2Rvd25sb2FkX2Zsb3cnKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9iZWdpbn0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfYmVnaW4pKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9lbmR9JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2VuZCkpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtleHRyYV9pbmZvfScsIGluZm8pO1xuXHQgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2M7XG5cdH0sXG5cdHNob3dfaGlkZV9tZW51OiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19tZW51ID0gIXRoaXMuc2hvd19tZW51O1xuXHR9LFxuICAgIH0sXG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgQGFwcGx5PVwiYXBwbHlcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9leHRyYWN0Jyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnRcIiA6Y2xhc3M9XCJ7ICdhbGVydC1pbmZvJzogZGF0YV9hdmFpbGFibGUgIT0gMiwgJ2FsZXJ0LXdhcm5pbmcnOiBkYXRhX2F2YWlsYWJsZSA9PSAyIH1cIiB2LWh0bWw9XCJkZXNjcmlwdGlvblwiPjwvZGl2PlxuICAgIDxmb3JtIHYtaWY9XCJkYXRhX2F2YWlsYWJsZSA9PSAxXCIgc3R5bGU9XCJoZWlnaHQ6OTUlO1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTMgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfaGlkZV9tZW51XCI+e3tpMThuKCdhZHZhbmNlZCcpfX08aSA6Y2xhc3M9XCJ7ICdmYXMgZmEtY2FyZXQtZG93bic6IHNob3dfbWVudSwgJ2ZhcyBmYS1jYXJldC11cCc6ICFzaG93X21lbnV9XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXHQgIFxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTkgdGV4dC1yaWdodCBhc2RcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDFyZW07XCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiICB2YWx1ZT1cInRydWVcIiBjaGVja2VkPVwiXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdF9ub3cnKX19IDwvbGFiZWw+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgdmFsdWU9XCJmYWxzZVwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnF1ZXVlX2FzX2pvYicpfX0gPC9sYWJlbD5cblx0ICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cdFxuICAgICAgICA8ZGl2IHYtc2hvdz1cInNob3dfbWVudVwiIGNsYXNzPVwicm93XCIgaWQ9XCJwY2FwRG93bmxvYWRNb2RhbF9hZHZhbmNlZFwiIHN0eWxlPVwiXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMTIgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfYnBmJyl9fSA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm50b3Aub3JnL2d1aWRlcy9uMmRpc2svZmlsdGVycy5odG1sXCI+PGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cblx0ICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1maWx0ZXJcIj48L3NwYW4+PC9zcGFuPlxuXHQgICAgICA8aW5wdXQgbmFtZT1cImJwZl9maWx0ZXJcIiB2LW1vZGVsPVwiYnBmX2ZpbHRlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCIgZGF0YS1icGY9XCJicGZcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIj5cblx0ICAgICAgPHNwYW4gdi1zaG93PVwiaW52YWxpZF9icGZcIiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtkaXNwbGF5OmJsb2NrO1wiIGNsYXNzPVwiaW52YWxpZC1mZWVkYmFjayBcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cdCAgICA8YnI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfZXhhbXBsZXMnKX19OjwvbGFiZWw+XG5cdCAgICA8YnI+XG5cdCAgICA8dWw+XG5cdCAgICAgIDxsaT5Ib3N0OiA8aT5ob3N0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5IVFRQOiA8aT50Y3AgYW5kIHBvcnQgODA8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgYmV0d2VlbiBob3N0czogPGk+aXAgaG9zdCAxOTIuMTY4LjEuMSBhbmQgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgZnJvbSBhbiBob3N0IHRvIGFub3RoZXI6IDxpPmlwIHNyYyAxOTIuMTY4LjEuMSBhbmQgZHN0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdi1zaG93PVwiZGF0YV9hdmFpbGFibGUgIT0gMlwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtc2hvdz1cImRhdGFfYXZhaWxhYmxlID09IDJcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignb2snKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+ICBcbjwvbW9kYWw+ICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgZGVzY3JpcHRpb246IFwiXCIsXG5cdCAgICBpbnZhbGlkX2JwZjogZmFsc2UsXG5cdCAgICBicGZfZmlsdGVyOiBcIlwiLFxuXHQgICAgZXh0cmFjdF9ub3c6IHRydWUsXG5cdCAgICBzaG93X21lbnU6IHRydWUsXG5cdCAgICBkYXRhX2F2YWlsYWJsZTogMCwgLy8gMCA9PSBsb2FkaW5nLCAxID09IGF2YWlsYWJsZSwgMiA9PSBubyBkYXRhXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGVwb2NoX2ludGVydmFsOiBudWxsLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHBhZDJfbnVtYmVyOiBmdW5jdGlvbihudW1iZXIpIHtcblx0ICAgIHJldHVybiBTdHJpbmcobnVtYmVyKS5wYWRTdGFydCgyLCAnMCcpO1xuXHR9LFxuXHRmb3JtYXRfZGF0ZTogZnVuY3Rpb24oZCkge1xuXHQgICAgLy8gbGV0IGRheSA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXREYXRlKCkpO1xuXHQgICAgLy8gbGV0IG1vbnRoID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1vbnRoKCkpO1xuXHQgICAgLy8gbGV0IGhvdXJzID0gdGhpcy5wYWQyX251bWJlcihkLmdldEhvdXJzKCkpO1xuXHQgICAgLy8gbGV0IG1pbnV0ZXMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TWludXRlcygpKTtcblx0ICAgIC8vIGxldCBzID0gYCR7ZGF5fS8ke21vbnRofS8ke2QuZ2V0RnVsbFllYXIoKX0gJHtob3Vyc306JHttaW51dGVzfWA7XG5cdCAgICBsZXQgZF9tcyA9IGQudmFsdWVPZigpO1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChkX21zKTtcblx0fSxcblx0YXBwbHk6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMuYnBmX2ZpbHRlciAhPSBudWxsICYmIHRoaXMuYnBmX2ZpbHRlciAhPSBcIlwiKSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGVjay9maWx0ZXIubHVhP3F1ZXJ5PSR7dGhpcy5icGZfZmlsdGVyfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdHRoaXMuaW52YWxpZF9icGYgPSAhcmVzLnJlc3BvbnNlO1xuXHRcdGlmICh0aGlzLmludmFsaWRfYnBmID09IHRydWUpIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cdFx0XG5cdCAgICB9XG5cdCAgICBsZXQgdXJsX3JlcXVlc3Rfb2JqID0ge1xuXHRcdGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcblx0XHRlcG9jaF9iZWdpbjogdGhpcy5lcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbixcblx0XHRlcG9jaF9lbmQ6IHRoaXMuZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kLFxuXHRcdGJwZl9maWx0ZXI6IHRoaXMuYnBmX2ZpbHRlcixcblx0ICAgIH07XG5cdCAgICBsZXQgdXJsX3JlcXVlc3RfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9yZXF1ZXN0X29iaik7XG5cdCAgICBpZiAodGhpcy5leHRyYWN0X25vdyA9PSB0cnVlKSB7XG5cdFx0XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9wY2FwL2xpdmVfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHR3aW5kb3cub3Blbih1cmxfcmVxdWVzdCwgJ19zZWxmJywgZmFsc2UpO1xuXHQgICAgfSBlbHNlIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3RyYWZmaWNfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdGxldCBqb2JfaWQgPSByZXNwLmlkO1xuXHRcdC8vbGV0IGpvYl9pZCA9IDI7XG5cdFx0bGV0IGFsZXJ0X3RleHRfaHRtbCA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rpb25fc2NoZWR1bGVkJyk7XG5cdFx0bGV0IHBhZ2VfbmFtZSA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnRyYWZmaWNfZXh0cmFjdGlvbl9qb2JzJyk7XG5cdFx0bGV0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIik7XG5cdFx0bGV0IGhyZWYgPSBgPGEgaHJlZj1cIi9sdWEvaWZfc3RhdHMubHVhP2lmaWQ9JHtpZmlkfSZwYWdlPXRyYWZmaWNfcmVjb3JkaW5nJnRhYj1qb2JzJmpvYl9pZD0ke2pvYl9pZH1cIj4ke3BhZ2VfbmFtZX08L2E+YDsgXG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYWxlcnRfdGV4dF9odG1sLnJlcGxhY2UoJyV7cGFnZX0nLCBocmVmKTtcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBgJHthbGVydF90ZXh0X2h0bWx9ICR7am9iX2lkfWA7XG5cdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBhbGVydF90ZXh0X2h0bWwsIHR5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiIH0pO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdHRoaXMuZGF0YV9hdmFpbGFibGUgPSAwO1xuXHQgICAgfSwgMTAwMCk7XG5cdH0sXG5cdHNob3c6IGFzeW5jIGZ1bmN0aW9uKGJwZl9maWx0ZXIsIGVwb2NoX2ludGVydmFsKSB7XHQgICAgXG5cdCAgICBpZiAoZXBvY2hfaW50ZXJ2YWwgPT0gbnVsbCkge1xuXHRcdGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdGlmIChzdGF0dXMuZXBvY2hfYmVnaW4gPT0gbnVsbCB8fCBzdGF0dXMuZXBvY2hfZW5kID09IG51bGwpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihcIm1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogZXBvY2hfYmVnaW4gYW5kIGVwb2NoX2VuZCB1bmRlZmluZWQgaW4gdXJsXCIpO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGVwb2NoX2ludGVydmFsID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcblx0ICAgIH1cblx0ICAgIHRoaXMuZXBvY2hfaW50ZXJ2YWwgPSBlcG9jaF9pbnRlcnZhbDtcblx0ICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGVwb2NoX2ludGVydmFsKTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvY2hlY2tfcmVjb3JkaW5nX2RhdGEubHVhPyR7dXJsX3BhcmFtc31gO1xuXHQgICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG5cdCAgICBpZiAocmVzLmF2YWlsYWJsZSA9PSBmYWxzZSkge1xuXHRcdHRoaXMuZGF0YV9hdmFpbGFibGUgPSAyO1xuXHRcdHRoaXMuZGVzY3JpcHRpb24gPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5ub19yZWNvcmRlZF9kYXRhJyk7XG5cdFx0dGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICB0aGlzLmRhdGFfYXZhaWxhYmxlID0gMTtcblx0ICAgIGxldCBleHRyYV9pbmZvID0gXCJcIjtcblx0ICAgIGlmIChyZXMuaW5mbyAhPSBudWxsKSB7XG5cdFx0ZXh0cmFfaW5mbyA9IHJlcy5pbmZvO1xuXHQgICAgfTtcblx0ICAgIGlmIChicGZfZmlsdGVyID09IG51bGwpIHtcblx0XHRsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHRcdGlmIChyZXMgPT0gbnVsbCB8fCByZXMuYnBmID09IG51bGwpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihgbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiAke3VybF9yZXF1ZXN0fSByZXR1cm4gbnVsbCB2YWx1ZWApO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgfVxuXHQgICAgdGhpcy5zZXRfZGVzY3JpcHRpb25zKGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLCBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsIGV4dHJhX2luZm8pO1xuXHQgICAgXG5cdCAgICAvLyBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHQgICAgLy8gbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdCAgICAvLyBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0ICAgIC8vIHRoaXMuYnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB0aGlzLmJwZl9maWx0ZXIgPSBicGZfZmlsdGVyO1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0fSxcblx0c2V0X2Rlc2NyaXB0aW9uczogZnVuY3Rpb24oZXBvY2hfYmVnaW4sIGVwb2NoX2VuZCwgaW5mbykge1xuXHQgICAgbGV0IGRhdGVfYmVnaW4gPSBuZXcgRGF0ZShlcG9jaF9iZWdpbiAqIDEwMDApO1xuXHQgICAgbGV0IGRhdGVfZW5kID0gbmV3IERhdGUoZXBvY2hfZW5kICogMTAwMCk7XG5cdCAgICBcblx0ICAgIGxldCBkZXNjID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuYWJvdXRfdG9fZG93bmxvYWRfZmxvdycpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2JlZ2lufScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9iZWdpbikpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2VuZH0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfZW5kKSk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2V4dHJhX2luZm99JywgaW5mbyk7XG5cdCAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzYztcblx0fSxcblx0c2hvd19oaWRlX21lbnU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X21lbnUgPSAhdGhpcy5zaG93X21lbnU7XG5cdH0sXG4gICAgfSxcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0IH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmlucHV0OmludmFsaWQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7e19pMThuKFwic25hcHNob3RzLm1hbmFnZVwiKX19XG4gICAgICA8YSB0YXJnZXQ9XCJfbmV3dGFiXCIgaHJlZj1cIiNcIiBzdHlsZT1cIlwiIGNsYXNzPVwibmF2LWl0ZW0gdGV4dC1tdXRlZFwiPjxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6MjhyZW07cGFkZGluZy10b3A6MC44cmVtO1wiPjwvaT48L2E+ICAgIFxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCI+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cImFjdGlvbj0nYWRkJ1wiPlxuXHQ8YSBjbGFzcz1cIm5hdi1saW5rXCIgOmNsYXNzPVwieydhY3RpdmUnOiBhY3Rpb24gPT0gJ2FkZCd9XCIgaHJlZj1cIiNcIj57e19pMThuKFwic25hcHNob3RzLmFkZFwiKX19PC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCIgQGNsaWNrPVwidXBkYXRlX2FjdGlvbignc2VsZWN0JylcIj5cblx0PGEgOmRpc2FibGVkPVwic25hcHNob3RzLmxlbmd0aCA9PSAwXCIgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdzZWxlY3QnLCAnbm90LWFsbG93ZWQnOiBzbmFwc2hvdHMubGVuZ3RoID09IDAgfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcInNuYXBzaG90cy5tYW5hZ2VcIil9fTwvYT5cbiAgICAgIDwvbGk+ICAgICAgXG4gICAgPC91bD5cbiAgICA8ZGl2IHYtaWY9XCJhY3Rpb24gPT0gJ2FkZCdcIiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj48Yj57e19pMThuKFwic25hcHNob3RzLm5hbWVcIil9fTo8L2I+PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG5cdCAgPGlucHV0IDpwYXR0ZXJuPVwicGF0dGVybl9zaW5nbGV3b3JkXCIgcGxhY2Vob2xkZXI9XCJcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNuYXBzaG90X25hbWVcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDwhLS0gPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+IC0tPlxuICAgICAgPCEtLSBcdDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tc3dpdGNoXCI+IC0tPlxuICAgICAgPCEtLSBcdCAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgdi1tb2RlbD1cInNhdmVfdGltZVwiPiAtLT5cblx0ICBcbiAgICAgIDwhLS0gXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPnt7c2F2ZV90aW1lX3RleHR9fTwvbGFiZWw+IC0tPlxuICAgICAgPCEtLSBcdDwvZGl2PiAtLT5cbiAgICAgIDwhLS0gPC9kaXY+ICAgICAgIC0tPlxuICAgIDwvZGl2PiA8IS0tIGFjdGlvbiBhZGQgLS0+XG4gICAgXG4gICAgPGRpdiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgc3R5bGU9XCJtaW4taGVpZ2h0OjguNXJlbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwic25hcHNob3RzLm9yZGVyX2J5XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiBAY2hhbmdlPVwic29ydF9zbmFwc2hvdHNfYnkoKVwiIHYtbW9kZWw9XCJvcmRlcl9ieVwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5hbWVcIj57e19pMThuKFwic25hcHNob3RzLm5hbWVcIil9fTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRhdGVcIj57e19pMThuKFwic25hcHNob3RzLmRhdGVcIil9fTwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwic25hcHNob3RzLnNlbGVjdFwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tc2VsZWN0XCIgdi1tb2RlbD1cInNuYXBzaG90X3NlbGVjdGVkXCI+XG4gICAgICAgICAgICA8b3B0aW9uIHYtZm9yPVwiaXRlbSBpbiBzbmFwc2hvdHNcIiA6dmFsdWU9XCJpdGVtXCI+e3sgZGlzcGxheV9uYW1lKGl0ZW0pIH19PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj5cblx0ICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiB2LW1vZGVsPVwiYXBwbHlfdGltZVwiPlxuXHQgIFxuXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPnt7YXBwbHlfdGltZV90ZXh0fX08L2xhYmVsPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PiA8IS0tIGFjdGlvbiBzZWxlY3QgLS0+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9zbmFwc2hvdFwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwic25hcHNob3RzLmFkZFwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgQGNsaWNrPVwiZGVsZXRlX3NuYXBzaG90KHRydWUpXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdDttYXJnaW4tbGVmdDogMHB4O1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgc3RhcnQtMCBwb3NpdGlvbi1hYnNvbHV0ZSBtcy0zXCI+e3tfaTE4bihcInNuYXBzaG90cy5kZWxldGVfYWxsXCIpfX08L2J1dHRvbj4gICAgXG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9zbmFwc2hvdFwiIDpkaXNhYmxlZD1cImRpc2FibGVfc2VsZWN0XCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuZGVsZXRlXCIpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuYXBwbHlcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFjdGlvbiA9IHJlZihcImFkZFwiKTsgLy8gYWRkIC8gc2VsZWN0XG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcbmNvbnN0IHNuYXBzaG90X3NlbGVjdGVkID0gcmVmKFwiXCIpO1xuY29uc3QgYXBwbHlfdGltZSA9IHJlZihmYWxzZSk7XG5jb25zdCBhcHBseV90aW1lX3RleHQgPSByZWYoXCJcIik7XG5jb25zdCBzYXZlX3RpbWUgPSByZWYodHJ1ZSk7XG5jb25zdCBzYXZlX3RpbWVfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IHNuYXBzaG90X25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBzbmFwc2hvdHMgPSByZWYoW10pO1xuY29uc3Qgb3JkZXJfYnkgPSByZWYoXCJkYXRlXCIpOyAvLyBuYW1lIC8gZGF0ZVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZGVkX3NuYXBzaG90JywgJ2RlbGV0ZWRfc25hcHNob3QnLCAnZGVsZXRlZF9hbGxfc25hcHNob3RzJ10pO1xuXG5sZXQgcGF0dGVybl9zaW5nbGV3b3JkID0gTnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZDtcblxuY29uc3QgZGlzYWJsZV9hZGQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJnID0gbmV3IFJlZ0V4cChwYXR0ZXJuX3NpbmdsZXdvcmQpO1xuICAgIHJldHVybiAhcmcudGVzdChzbmFwc2hvdF9uYW1lLnZhbHVlKTtcbn0pO1xuXG5jb25zdCBkaXNhYmxlX3NlbGVjdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gc25hcHNob3Rfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIjtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCB1cGRhdGVfYWN0aW9uID0gKGEpID0+IHtcbiAgICBpZiAoc25hcHNob3RzLnZhbHVlLmxlbmd0aCA9PSAwICYmIGEgPT0gXCJzZWxlY3RcIikgeyByZXR1cm47IH1cbiAgICBhY3Rpb24udmFsdWUgPSBhO1xufVxuXG5mdW5jdGlvbiBnZXRfcGFnZSgpIHtcbiAgICBpZiAocHJvcHMucGFnZSAhPSBudWxsKSB7XG5cdHJldHVybiBwcm9wcy5wYWdlO1xuICAgIH1cbiAgICBsZXQgaXNfYWxlcnRfc3RhdHNfdXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG4gICAgbGV0IHBhZ2UgPSBcImFsZXJ0c1wiO1xuICAgIGlmICghaXNfYWxlcnRfc3RhdHNfdXJsKSB7XG5cdHBhZ2UgPSBcImZsb3dzXCI7XG4gICAgfVxuICAgIHJldHVybiBwYWdlO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5X25hbWUoc25hcHNob3QpIHtcbiAgICBsZXQgdXRjX21zID0gc25hcHNob3QudXRjICogMTAwMDtcbiAgICBsZXQgZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdCh1dGNfbXMsIFwiREQvTU0vWVlZWVwiKTtcbiAgICByZXR1cm4gYCR7c25hcHNob3QubmFtZX0gKCR7ZGF0ZX0pYFxufVxuXG5sZXQgbGFzdF9vcmRlcl9ieSA9IG51bGw7XG5mdW5jdGlvbiBzb3J0X3NuYXBzaG90c19ieSgpIHtcbiAgICBpZiAobGFzdF9vcmRlcl9ieSA9PSBvcmRlcl9ieS52YWx1ZSkgeyByZXR1cm47IH1cbiAgICBcbiAgICBzbmFwc2hvdHMudmFsdWUuc29ydCgoYSwgYikgPT4ge1xuXHRpZiAob3JkZXJfYnkudmFsdWUgPT0gXCJuYW1lXCIpIHtcblx0ICAgIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xuXHR9XG5cdHJldHVybiBhLnV0YyAtIGIudXRjO1xuICAgIH0pO1xuICAgIGlmIChzbmFwc2hvdHMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZSA9IHNuYXBzaG90cy52YWx1ZVswXTtcbiAgICB9XG4gICAgbGFzdF9vcmRlcl9ieSA9IG9yZGVyX2J5LnZhbHVlOyAgICBcbn1cblxubGV0IGxvYWRfc25hcHNob3RzID0gdHJ1ZTtcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgYWN0aW9uLnZhbHVlID0gXCJhZGRcIjtcbiAgICBzbmFwc2hvdF9uYW1lLnZhbHVlID0gXCJcIjtcbiAgICBzYXZlX3RpbWUudmFsdWUgPSB0cnVlO1xuICAgIGFwcGx5X3RpbWUudmFsdWUgPSBmYWxzZTtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgc2F2ZV90aW1lX2ZpbHRlcl90ZXh0ID0gX2kxOG4oXCJzbmFwc2hvdHMuc2F2ZV90aW1lXCIpO1xuICAgIGxldCBiZWdpbl90aW1lID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDAsIFwiREQvTU0vWVlZWSBISDptbVwiKTtcbiAgICBsZXQgZW5kX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDAsIFwiREQvTU0vWVlZWSBISDptbVwiKTtcbiAgICBzYXZlX3RpbWVfZmlsdGVyX3RleHQgPSBzYXZlX3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlYmVnaW5fdGltZS8sIGJlZ2luX3RpbWUpO1xuICAgIHNhdmVfdGltZV9maWx0ZXJfdGV4dCA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCVlbmRfdGltZS8sIGVuZF90aW1lKTtcbiAgICBzYXZlX3RpbWVfdGV4dC52YWx1ZSA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dDtcbiAgICBsZXQgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IF9pMThuKFwic25hcHNob3RzLmFwcGx5X3RpbWVcIik7XG4gICAgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlYmVnaW5fdGltZS8sIGJlZ2luX3RpbWUpO1xuICAgIGFwcGx5X3RpbWVfZmlsdGVyX3RleHQgPSBhcHBseV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWVuZF90aW1lLywgZW5kX3RpbWUpO1xuICAgIGFwcGx5X3RpbWVfdGV4dC52YWx1ZSA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQ7XG4gICAgaWYgKGxvYWRfc25hcHNob3RzKSB7XG5cdGxvYWRfc25hcHNob3RzID0gZmFsc2U7XG5cdGxldCBwYWdlID0gZ2V0X3BhZ2UoKTtcblx0bGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ZpbHRlcnMvc25hcHNob3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuXHRsZXQgc25hcHNob3RzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHRzbmFwc2hvdHMudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoc25hcHNob3RzX29iaik7XG4gICAgfVxuICAgIHNvcnRfc25hcHNob3RzX2J5KCk7XG4gICAgaWYgKHNuYXBzaG90cy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlID0gc25hcHNob3RzLnZhbHVlWzBdO1xuICAgIH1cbn1cblxuY29uc3QgYWRkX3NuYXBzaG90ID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBmaWx0ZXJzO1xuICAgIGlmIChzYXZlX3RpbWUudmFsdWUpIHtcblx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIH0gZWxzZSB7XG5cdGxldCBwYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG5cdGRlbGV0ZSBwYXJhbXNfb2JqLmVwb2NoX2JlZ2luO1xuXHRkZWxldGUgcGFyYW1zX29iai5lcG9jaF9lbmQ7XG5cdGZpbHRlcnMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zX29iaik7XG4gICAgfVxuICAgIGxldCBwYWdlID0gZ2V0X3BhZ2UoKTtcbiAgICBsZXQgcGFyYW1zID0ge1xuXHRzbmFwc2hvdF9uYW1lOiBzbmFwc2hvdF9uYW1lLnZhbHVlLFxuXHRmaWx0ZXJzLFxuXHRwYWdlXG4gICAgfTtcbiAgICBcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2ZpbHRlcnMvc25hcHNob3QubHVhYDtcbiAgICB0cnkge1xuXHRsZXQgaGVhZGVycyA9IHtcblx0ICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0fTtcblx0YXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcblx0bG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuICAgIH0gY2F0Y2goZXJyKSB7XG5cdGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbiAgICBlbWl0KCdhZGRlZF9zbmFwc2hvdHMnLCBwYXJhbXMpO1xufVxuXG5jb25zdCBzZWxlY3Rfc25hcHNob3QgPSAoKSA9PiB7XG4gICAgY2xvc2UoKTsgICAgXG4gICAgbGV0IGZpbHRlcnMgPSBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZS5maWx0ZXJzO1xuICAgIGlmIChhcHBseV90aW1lLnZhbHVlID09IHRydWUpIHtcbiAgICBcdGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIFx0bGV0IHBhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoZmlsdGVycyk7XG4gICAgXHRwYXJhbXNfb2JqLmVwb2NoX2JlZ2luID0gc3RhdHVzLmVwb2NoX2JlZ2luO1xuICAgIFx0cGFyYW1zX29iai5lcG9jaF9lbmQgPSBzdGF0dXMuZXBvY2hfZW5kO1xuICAgIFx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlcGxhY2VfdXJsX2FuZF9yZWxvYWQoZmlsdGVycyk7XG59XG5cbmNvbnN0IGRlbGV0ZV9zbmFwc2hvdCA9IGFzeW5jIChkZWxldGVfYWxsKSA9PiB7XG4gICAgbGV0IG5hbWUgPSBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZS5uYW1lO1xuICAgIGlmIChkZWxldGVfYWxsID09IHRydWUpIHsgbmFtZSA9IFwiKlwiOyB9XG4gICAgbGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgXHRzbmFwc2hvdF9uYW1lOiBuYW1lLFxuXHRwYWdlLFxuICAgIH07XG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jc3JmO1xuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9maWx0ZXJzL3NuYXBzaG90Lmx1YWA7XG4gICAgdHJ5IHtcbiAgICBcdGxldCBoZWFkZXJzID0ge1xuICAgIFx0ICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICBcdH07XG4gICAgXHRhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgIFx0bG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgXHRjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIGlmIChkZWxldGVfYWxsID09IHRydWUpIHtcblx0ZW1pdCgnZGVsZXRlZF9hbGxfc25hcHNob3RzJywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuXHRlbWl0KCdkZWxldGVkX3NuYXBzaG90JywgcGFyYW1zKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgX2kxOG4oJ2V4Y2x1ZGVfY2hlY2snKSB9fTogPHNwYW4gdi1odG1sPVwiYWxlcnRfbmFtZVwiPjwvc3Bhbj48L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBcIj5cbiAgICAgIDxkaXY+XG5cdDxsYWJlbD57eyBfaTE4bignZXhjbHVkZV9jaGVjaycpIH19IFwiPGIgdi1odG1sPVwiYWxlcnRfbmFtZVwiPjwvYj5cIi4gPHNwYW4gY2xhc3M9XCJhbGVydF9sYWJlbFwiPnt7IF9pMThuKCdleGNsdWRlX2ZvcicpIH19Ojwvc3Bhbj4gPC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJhbnlcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICA8c3Bhbj4ge3sgX2kxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcl9kaXNhYmxlX2NoZWNrJykgfX0gPC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG5cdDwvZGl2PlxuXHQ8dGVtcGxhdGUgdi1pZj1cInBhZ2UgPT0gJ2hvc3QnXCI+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImhvc3RcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgICAgPHNwYW4+e3sgaG9zdF9hZGRyLmxhYmVsIH19PC9zcGFuPlxuICAgICAgXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cdFxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1pZj1cInBhZ2UgPT0gJ2Zsb3cnXCI+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImNsaWVudF9ob3N0XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICAgIDxzcGFuPnt7IF9pMThuKCdjbGllbnQnKSB9fToge3tmbG93X2FkZHIuY2xpX2xhYmVsfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJzZXJ2ZXJfaG9zdFwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgICA8c3Bhbj57eyBfaTE4bignc2VydmVyJykgfX06IHt7IGZsb3dfYWRkci5zcnZfbGFiZWwgfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQ8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtaWY9XCJkb21haW4gIT0gbnVsbCB8fCB0bHNfY2VydGlmaWNhdGUgIT0gbnVsbFwiIGNsYXNzPVwiZXhjbHVkZS1kb21haW4tY2VydGlmaWNhdGVcIj5cblx0PGxhYmVsPjxzcGFuIGNsYXNzPVwiYWxlcnRfbGFiZWxcIj57eyBfaTE4bignY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2NoZWNrc19mb3InKSB9fTo8L3NwYW4+IDwvbGFiZWw+XHRcblx0PGRpdiB2LWlmPVwiZG9tYWluICE9IG51bGxcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJkb21haW5cIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIHdoaXRlc3BhY2VcIj5cbiAgICAgIFx0ICAgIDxzcGFuPnt7X2kxOG4oXCJjaGVja19leGNsdXNpb24uZG9tYWluXCIpfX06PC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG4gICAgICBcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOnBhdHRlcm49XCJwYXR0ZXJuX2RvbWFpblwiIDpkaXNhYmxlZD1cInJhZGlvX3NlbGVjdGVkICE9ICdkb21haW4nXCIgcmVxdWlyZWQgdi1tb2RlbD1cImRvbWFpblwiIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBjdXN0b20td2lkdGhcIj5cblx0PC9kaXY+XG5cdDxkaXYgdi1pZj1cInRsc19jZXJ0aWZpY2F0ZSAhPSBudWxsXCIgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiY2VydGlmaWNhdGVcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIHdoaXRlc3BhY2VcIj5cbiAgICAgIFx0ICAgIDxzcGFuPnt7X2kxOG4oXCJjaGVja19leGNsdXNpb24udGxzX2NlcnRpZmljYXRlXCIpfX06PC9zcGFuPlxuICAgICAgXHQgIDwvbGFiZWw+XG4gICAgICBcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgOmRpc2FibGVkPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2NlcnRpZmljYXRlJ1wiIHYtbW9kZWw9XCJ0bHNfY2VydGlmaWNhdGVcIiA6cGF0dGVybj1cInBhdHRlcm5fY2VydGlmaWNhdGVcIiByZXF1aXJlZCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY3VzdG9tLXdpZHRoXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWlmPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2FueSdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7IF9pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKSB9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtMVwiPlxuICAgICAgICA8dGV4dGFyZWEgOnBsYWNlaG9sZGVyPWNvbW1lbnRfcGxhY2Vob2xkZXIgaWQ9XCJhbGVydC1sYWJlbFwiIG5hbWU9XCJsYWJlbFwiIHJvd3M9XCIzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjb21tZW50XCIgbWF4bGVuZ3RoPVwiNDUwXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICAgPGhyIHYtc2hvdz1cImRpc2FibGVfYWxlcnRzXCIgY2xhc3M9XCJzZXBhcmF0b3JcIiA+XG5cbiAgICA8dGVtcGxhdGUgdi1pZj1cInJhZGlvX3NlbGVjdGVkICE9ICdkb21haW4nICYmIHJhZGlvX3NlbGVjdGVkICE9ICdjZXJ0aWZpY2F0ZSdcIj5cblxuICAgICAgPGRpdiB2LXNob3c9XCJkaXNhYmxlX2FsZXJ0c1wiIGNsYXNzPVwibWVzc2FnZSBhbGVydCBhbGVydC1kYW5nZXJcIj5cblx0e3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2RlbGV0ZV9maWx0ZXJlZF9hbGVydHNcIikgfX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyIGNsYXNzPVwic2VwYXJhdG9yXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIFwiPlxuXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxuXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2VcIiAgdi1tb2RlbD1cImRpc2FibGVfYWxlcnRzXCI+XG5cdCAgXG5cdCAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIj57e19pMThuKFwiZGVsZXRlX2Rpc2FibGVkX2FsZXJ0c1wiKX19PC9sYWJlbD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDxkaXYgIGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZyBib3JkZXJcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgIHt7X2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2ZpbHRlcl9hbGVydFwiKX19XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZXhjbHVkZVwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIGNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nXCI+e3tfaTE4bihcImZpbHRlclwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgcmFkaW9fc2VsZWN0ZWQgPSByZWYoXCJhbnlcIik7XG5jb25zdCBkaXNhYmxlX2FsZXJ0cyA9IHJlZih0cnVlKTtcbmNvbnN0IGRvbWFpbiA9IHJlZihudWxsKTtcbmNvbnN0IHRsc19jZXJ0aWZpY2F0ZSA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnQgPSByZWYobnVsbCk7XG5jb25zdCBjb21tZW50X3BsYWNlaG9sZGVyID0gaTE4bihcImRldGFpbHMuY29tbWVudF9wbGFjZWhvbGRlclwiKTtcblxuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydleGNsdWRlJ10pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYWxlcnQ6IE9iamVjdCxcbiAgICBwYWdlOiBTdHJpbmcsXG59KTtcblxud2F0Y2goKCkgPT4gcHJvcHMuYWxlcnQsIChjdXJyZW50X3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBpZiAoY3VycmVudF92YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIHJhZGlvX3NlbGVjdGVkLnZhbHVlID0gXCJhbnlcIjtcbiAgICBkaXNhYmxlX2FsZXJ0cy52YWx1ZSA9IHRydWU7XG4gICAgZG9tYWluLnZhbHVlID0gY3VycmVudF92YWx1ZS5pbmZvPy52YWx1ZSA9PSBcIlwiID8gbnVsbCA6IGN1cnJlbnRfdmFsdWUuaW5mbz8udmFsdWU7XG4gICAgdGxzX2NlcnRpZmljYXRlLnZhbHVlID0gY3VycmVudF92YWx1ZS5pbmZvPy5pc3N1ZXJkbiA9PSBcIlwiID8gbnVsbCA6IGN1cnJlbnRfdmFsdWUuaW5mbz8uaXNzdWVyZG47XG59KTtcbi8vIGNvbnN0IGNsaWNrX2RlbGV0ZV9kaXNhYmxlX2FsZXJ0cyA9ICgpID0+IHtcbi8vIH07XG5cbmNvbnN0IGNoZWNrX2Rpc2FibGVfYXBwbHkgPSAoKSA9PiB7XG4gICAgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiZG9tYWluXCIpIHtcblx0bGV0IHJlZ2V4X2RvbWFpbiA9IG5ldyBSZWdFeHAocGF0dGVybl9kb21haW4pO1xuXHRyZXR1cm4gZG9tYWluLnZhbHVlID09IG51bGwgfHwgcmVnZXhfZG9tYWluLnRlc3QoZG9tYWluLnZhbHVlKSA9PSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRsZXQgcmVnZXhfY2VydGlmaWNhdGUgPSBuZXcgUmVnRXhwKHBhdHRlcm5fY2VydGlmaWNhdGUpO1xuXHRyZXR1cm4gdGxzX2NlcnRpZmljYXRlLnZhbHVlID09IG51bGwgfHwgcmVnZXhfY2VydGlmaWNhdGUudGVzdCh0bHNfY2VydGlmaWNhdGUudmFsdWUpID09IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5jb25zdCBhbGVydF9uYW1lID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuYWxlcnQ/LmFsZXJ0X25hbWUpO1xuXG5jb25zdCBob3N0X2FkZHIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJlcyA9IHsgdmFsdWU6IFwiXCIsIGxhYmVsOiBcIlwiIH07XG4gICAgaWYgKHByb3BzLnBhZ2UgIT0gXCJob3N0XCIgfHwgcHJvcHMuYWxlcnQgPT0gbnVsbCkgeyByZXR1cm4gcmVzOyB9XG4gICAgbGV0IGFsZXJ0ID0gcHJvcHMuYWxlcnQ7XG4gICAgcmVzLnZhbHVlID0gYWxlcnQuaXAudmFsdWU7XG4gICAgaWYgKGFsZXJ0LnZsYW4gIT0gbnVsbCAmJiBhbGVydC52bGFuLnZhbHVlICE9IG51bGwgJiYgYWxlcnQudmxhbi52YWx1ZSAhPSAwKSB7XG5cdHJlcy52YWx1ZSA9IHJlcy52YWx1ZSArICdAJyArIGFsZXJ0LnZsYW4udmFsdWU7XG4gICAgfVxuICAgIHJlcy5sYWJlbCA9IChhbGVydC5pcC5sYWJlbCkgPyBgJHthbGVydC5pcC5sYWJlbH0gKCR7YWxlcnQuaXAudmFsdWV9KWAgOiBhbGVydC5pcC52YWx1ZTtcbiAgICByZXR1cm4gcmVzO1xufSk7XG5cbmNvbnN0IGZsb3dfYWRkciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcmVzID0geyBjbGlfdmFsdWU6IFwiXCIsIGNsaV9sYWJlbDogXCJcIiwgc3J2X3ZhbHVlOiBcIlwiLCBzcnZfbGFiZWw6IFwiXCIgfTtcbiAgICBpZiAocHJvcHMucGFnZSAhPSBcImZsb3dcIiB8fCBwcm9wcy5hbGVydCA9PSBudWxsKSB7IHJldHVybiByZXM7IH1cbiAgICBsZXQgYWxlcnQgPSBwcm9wcy5hbGVydDtcbiAgICByZXMuY2xpX3ZhbHVlID0gYWxlcnQuZmxvdy5jbGlfaXAudmFsdWU7XG4gICAgcmVzLnNydl92YWx1ZSA9IGFsZXJ0LmZsb3cuc3J2X2lwLnZhbHVlO1xuICAgIGxldCBjbGlfbGFiZWwgPSBgJHthbGVydC5mbG93LmNsaV9pcC5sYWJlbCB8fCBhbGVydC5mbG93LmNsaV9pcC52YWx1ZX1gXG4gICAgbGV0IHNydl9sYWJlbCA9IGAke2FsZXJ0LmZsb3cuc3J2X2lwLmxhYmVsIHx8IGFsZXJ0LmZsb3cuc3J2X2lwLnZhbHVlfWBcblxuICAgIGlmKGFsZXJ0LmZsb3cudmxhbiAhPSBudWxsICYmIGFsZXJ0LmZsb3cudmxhbi52YWx1ZSAhPSBudWxsICYmIGFsZXJ0LmZsb3cudmxhbi52YWx1ZSAhPSAwKSB7XG4gICAgICBjbGlfbGFiZWwgPSBgJHtjbGlfbGFiZWx9QCR7YWxlcnQuZmxvdy52bGFuLmxhYmVsfWBcbiAgICAgIHNydl9sYWJlbCA9IGAke3Nydl9sYWJlbH1AJHthbGVydC5mbG93LnZsYW4ubGFiZWx9YFxuICAgICAgcmVzLmNsaV92YWx1ZSA9IHJlcy5jbGlfdmFsdWUgKyAnQCcgKyBhbGVydC5mbG93LnZsYW4udmFsdWVcbiAgICAgIHJlcy5zcnZfdmFsdWUgPSByZXMuc3J2X3ZhbHVlICsgJ0AnICsgYWxlcnQuZmxvdy52bGFuLnZhbHVlXG4gICAgfVxuXG4gICAgaWYoY2xpX2xhYmVsICE9PSByZXMuY2xpX3ZhbHVlKSB7XG4gICAgICBjbGlfbGFiZWwgPSBgJHtjbGlfbGFiZWx9ICgke3Jlcy5jbGlfdmFsdWV9KWBcbiAgICB9XG4gICAgaWYoc3J2X2xhYmVsICE9PSByZXMuc3J2X3ZhbHVlKSB7XG4gICAgICBzcnZfbGFiZWwgPSBgJHtzcnZfbGFiZWx9ICgke3Jlcy5zcnZfdmFsdWV9KWBcbiAgICB9XG4gICAgXG4gICAgcmVzLmNsaV9sYWJlbCA9IGNsaV9sYWJlbFxuICAgIHJlcy5zcnZfbGFiZWwgPSBzcnZfbGFiZWxcbiAgICByZXR1cm4gcmVzO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgY29tbWVudC52YWx1ZSA9IFwiXCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gZ2V0X3R5cGUoKSB7XG4gICAgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiZG9tYWluXCIgfHwgcmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHJldHVybiByYWRpb19zZWxlY3RlZC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFwiaG9zdFwiO1xufVxuXG5sZXQgcGF0dGVybl9kb21haW4gPSBOdG9wVXRpbHMuUkVHRVhFUy5kb21haW5fbmFtZV9ub3Rfc3RyaWN0O1xubGV0IHBhdHRlcm5fY2VydGlmaWNhdGUgPSBOdG9wVXRpbHMuUkVHRVhFUy50bHNfY2VydGlmaWNhdGU7XG5cbmNvbnN0IGV4Y2x1ZGUgPSAoKSA9PiB7XG4gICAgbGV0IHBhZ2UgPSBwcm9wcy5wYWdlO1xuICAgIGxldCB0eXBlID0gZ2V0X3R5cGUoKTtcbiAgICBsZXQgcGFyYW1zID0ge1xuICAgIFx0ZGVsZXRlX2FsZXJ0czogZGlzYWJsZV9hbGVydHMudmFsdWUsXG4gICAgICBsYWJlbDogY29tbWVudC52YWx1ZSxcblxuXHR0eXBlLFx0XG4gICAgfTtcbiAgICBsZXQgYWRkciA9IG51bGw7XG4gICAgaWYgKHR5cGUgPT0gXCJob3N0XCIpIHtcdFxuXHRpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJob3N0XCIpIHtcblx0ICAgIGFkZHIgPSBob3N0X2FkZHIudmFsdWUudmFsdWU7XG5cdH0gZWxzZSBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJzZXJ2ZXJfaG9zdFwiKSB7XG5cdCAgICBhZGRyID0gZmxvd19hZGRyLnZhbHVlLnNydl92YWx1ZTtcblx0fSBlbHNlIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImNsaWVudF9ob3N0XCIpIHtcblx0ICAgIGFkZHIgPSBmbG93X2FkZHIudmFsdWUuY2xpX3ZhbHVlO1xuXHR9XG5cdHBhcmFtcy5hbGVydF9hZGRyID0gYWRkcjtcblx0aWYgKHBhZ2UgPT0gXCJmbG93XCIpIHtcblx0ICAgIHBhcmFtcy5mbG93X2FsZXJ0X2tleSA9IHByb3BzLmFsZXJ0LmFsZXJ0X2lkLnZhbHVlO1xuXHR9IGVsc2UgaWYgKHBhZ2UgPT0gXCJob3N0XCIpIHtcblx0ICAgIHBhcmFtcy5ob3N0X2FsZXJ0X2tleSA9IHByb3BzLmFsZXJ0LmFsZXJ0X2lkLnZhbHVlO1xuXHR9XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiZG9tYWluXCIpIHtcblx0cGFyYW1zLmRlbGV0ZV9hbGVydHMgPSBmYWxzZTtcblx0cGFyYW1zLmFsZXJ0X2RvbWFpbiA9IGRvbWFpbi52YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHBhcmFtcy5kZWxldGVfYWxlcnRzID0gZmFsc2U7XG5cdHBhcmFtcy5hbGVydF9jZXJ0aWZpY2F0ZSA9IHRsc19jZXJ0aWZpY2F0ZS52YWx1ZTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbiAgICBlbWl0KCdleGNsdWRlJywgcGFyYW1zKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLndoaXRlc3BhY2Uge1xuICBtYXJnaW4tcmlnaHQ6IDAuMnJlbTtcbn1cbi5jdXN0b20td2lkdGgge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWluLXdpZHRoOiAxMDAlO1xufVxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5leGNsdWRlLWRvbWFpbi1jZXJ0aWZpY2F0ZSB7XG4gIG1hcmdpbi10b3A6IDAuNHJlbTtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3tfaTE4bihcInNob3dfYWxlcnRzLmFja25vd2xlZGdlX2FsZXJ0XCIpfX06IHt7dGl0bGVfZGVzY319XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3cgbWItMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tfaTE4bihcInNob3dfYWxlcnRzLmFkZF9hX2NvbW1lbnRcIil9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMVwiPlxuICAgICAgICA8aW5wdXQgdi1tb2RlbD1cImNvbW1lbnRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgIG1heGxlbmd0aD1cIjI1NVwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPEFsZXJ0SW5mbyA6bm9fY2xvc2VfYnV0dG9uPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhY2tub3dsZWRnZVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcImFja25vd2xlZGdlXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuY29uc3QgY29tbWVudCA9IHJlZihcIlwiKTtcbmNvbnN0IHRpdGxlX2Rlc2MgPSByZWYoXCJcIik7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJhY2tub3dsZWRnZVwiXSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbiAgICBwYWdlOiBTdHJpbmcsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBhY2tub3dsZWRnZSgpIHtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWNrbm93bGVkZ2UvJHtwcm9wcy5wYWdlfS9hbGVydHMubHVhYDtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG5cdGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcblx0aWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxuXHRsYWJlbDogY29tbWVudC52YWx1ZSxcblx0cm93X2lkOiBhbGVydC52YWx1ZS5yb3dfaWQsXG4gICAgfTtcbiAgICBsZXQgaGVhZGVycyA9IHtcblx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICBlbWl0KFwiYWNrbm93bGVkZ2VcIik7XG4gICAgY2xvc2UoKTtcbn1cblxuXG5jb25zdCBhbGVydCA9IHJlZih7fSk7XG5jb25zdCBzaG93ID0gKF9hbGVydCkgPT4ge1xuICAgIGFsZXJ0LnZhbHVlID0gX2FsZXJ0O1xuICAgIGNvbnN0ICR0eXBlID0gJChgPHNwYW4+JHtfYWxlcnQuYWxlcnRfaWQubGFiZWx9PC9zcGFuPmApO1xuICAgIHRpdGxlX2Rlc2MudmFsdWUgPSAkdHlwZS50ZXh0KCkudHJpbSgpO1xuICAgIGNvbW1lbnQudmFsdWUgPSBfYWxlcnQudXNlcl9sYWJlbDtcbiAgICBcbiAgICBsZXQgbWVzc2FnZV9ib2R5ID0gX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2Fja25vd2xlZGdlX2FsZXJ0XCIpO1xuICAgIGFsZXJ0X2luZm8udmFsdWUuc2hvdyhtZXNzYWdlX2JvZHksIFwiYWxlcnQtd2FybmluZ1wiKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJzaG93X2FsZXJ0cy5kZWxldGVfYWxlcnRcIil9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPEFsZXJ0SW5mbyA6bm9fY2xvc2VfYnV0dG9uPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfYWxlcnRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJkZWxldGVcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFsZXJ0X2luZm8gPSByZWYobnVsbCk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkZWxldGVfYWxlcnRcIl0pO1xuY29uc3QgYWxlcnQgPSByZWYoe30pO1xubGV0IHN0YXR1c192aWV3ID0gXCJoaXN0b3JpY2FsXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbiAgICBwYWdlOiBTdHJpbmcsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfYWxlcnQoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS8ke3Byb3BzLnBhZ2V9L2FsZXJ0cy5sdWFgO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcblx0Y3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuXHRpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG5cdHN0YXR1czogc3RhdHVzX3ZpZXcsXG5cdHJvd19pZDogYWxlcnQudmFsdWUucm93X2lkLFxuICAgIH07XG4gICAgbGV0IGhlYWRlcnMgPSB7XG5cdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgZW1pdChcImRlbGV0ZV9hbGVydFwiKTtcbiAgICBjbG9zZSgpO1xufVxuXG5cbmNvbnN0IHNob3cgPSAoX2FsZXJ0LCBfc3RhdHVzX3ZpZXcpID0+IHtcbiAgICBhbGVydC52YWx1ZSA9IF9hbGVydDtcbiAgICBzdGF0dXNfdmlldyA9IF9zdGF0dXNfdmlldztcbiAgICBsZXQgbWVzc2FnZV9ib2R5ID0gX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2xhYmVsX2FsZXJ0XCIpO1xuICAgIGFsZXJ0X2luZm8udmFsdWUuc2hvdyhtZXNzYWdlX2JvZHksIFwiYWxlcnQtZGFuZ2VyXCIpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3tfaTE4bihcImFja25vd2xlZGdlX2FsZXJ0c1wiKX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7X2kxOG4oXCJkYXRlX2Zyb21cIil9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJiZWdpbl90aW1lXCIgZGlzYWJsZWQ9XCJcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvdyBtYi0yXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e19pMThuKFwiZGF0ZV9mcm9tXCIpfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02IG10LTFcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJlbmRfdGltZVwiIGRpc2FibGVkPVwiXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBcbiAgICA8QWxlcnRJbmZvIDpub19jbG9zZV9idXR0b249XCJ0cnVlXCIgcmVmPVwiYWxlcnRfaW5mb1wiPjwvQWxlcnRJbmZvPiAgICBcbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWNrbm93bGVkZ2VfYWxlcnRzXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwiYWNrbm93bGVkZ2VcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfZXZlbnRzIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBwYWdlOiBTdHJpbmcsXG4gICAgY29udGV4dDogT2JqZWN0LCAgICBcbn0pO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImFja25vd2xlZGdlX2FsZXJ0c1wiXSk7XG5cbmNvbnN0IGlkID0gXCJtb2RhbC1hY2tub3dsZWRnZS1hbGVydHNcIjtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFsZXJ0X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBiZWdpbl90aW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZW5kX3RpbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWx0ZXJzID0gcmVmKFtdKTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBzaG93ID0gKHN0YXR1cykgPT4ge1xuICAgIGJlZ2luX3RpbWUudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCk7XG4gICAgZW5kX3RpbWUudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApO1xuICAgIGxldCBtZXNzYWdlX2JvZHkgPSBfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fYWNrbm93bGVkZ2VfYWxlcnRzXCIpO1xuICAgIGFsZXJ0X2luZm8udmFsdWUuc2hvdyhtZXNzYWdlX2JvZHksIFwiYWxlcnQtZGFuZ2VyXCIpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGFja25vd2xlZGdlX2FsZXJ0cygpIHtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWNrbm93bGVkZ2UvJHtwcm9wcy5wYWdlfS9hbGVydHMubHVhYDtcbiAgICBjb25zdCB1cmxfcGFyYW1zX29iaiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcblx0Y3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuXHQuLi51cmxfcGFyYW1zX29iaixcbiAgICB9O1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcGFyYW1zKTtcbiAgICBlbWl0KFwiYWNrbm93bGVkZ2VfYWxlcnRzXCIpO1xuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3tfaTE4bihcImRlbGV0ZV9hbGVydHNcIil9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e19pMThuKFwiZGF0ZV9mcm9tXCIpfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnZhbHVlPVwiYmVnaW5fdGltZVwiIGRpc2FibGVkPVwiXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7X2kxOG4oXCJkYXRlX2Zyb21cIil9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMVwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cImVuZF90aW1lXCIgZGlzYWJsZWQ9XCJcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGZpbHRlcnMtbGlzdCBtYi0yXCI+XG4gICAgICA8ZGl2IHYtZm9yPVwiaXRlbSBpbiBmaWx0ZXJzXCIgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7aXRlbS5sYWJlbH19PC9iPjwvbGFiZWw+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMVwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnZhbHVlPVwiaXRlbS52YWx1ZVwiIGRpc2FibGVkPVwiXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPEFsZXJ0SW5mbyA6bm9fY2xvc2VfYnV0dG9uPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz4gICAgXG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9hbGVydHNcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJkZWxldGVcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfZXZlbnRzIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBwYWdlOiBTdHJpbmcsXG4gICAgY29udGV4dDogT2JqZWN0LCAgICBcbn0pO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRlbGV0ZV9hbGVydHNcIl0pO1xuXG5jb25zdCBpZCA9IFwibW9kYWwtZGVsZXRlLWFsZXJ0c1wiO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGJlZ2luX3RpbWUgPSByZWYoXCJcIik7XG5jb25zdCBlbmRfdGltZSA9IHJlZihcIlwiKTtcbmNvbnN0IGZpbHRlcnMgPSByZWYoW10pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IHNob3cgPSAoc3RhdHVzKSA9PiB7XG4gICAgYmVnaW5fdGltZS52YWx1ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwKTtcbiAgICBlbmRfdGltZS52YWx1ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfZW5kICogMTAwMCk7XG4gICAgY29uc3QgdGFnX29wZXJhdG9yX2xhYmVsX2RpY3QgPSBmaWx0ZXJzTWFuYWdlci50YWdfb3BlcmF0b3JfbGFiZWxfZGljdDtcbiAgICBmaWx0ZXJzLnZhbHVlID0gc3RhdHVzLmZpbHRlcnMubWFwKChmKSA9PiB7XG5cdHJldHVybiB7XG5cdCAgICBsYWJlbDogZi5sYWJlbCxcblx0ICAgIHZhbHVlOiBgJHt0YWdfb3BlcmF0b3JfbGFiZWxfZGljdFtmLm9wZXJhdG9yXX0gJHtmLnZhbHVlX2xhYmVsfWAsXG5cdH07XG4gICAgfSk7XG4gICAgbGV0IG1lc3NhZ2VfYm9keSA9IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9kZWxldGVfYWxlcnRzXCIpO1xuICAgIGFsZXJ0X2luZm8udmFsdWUuc2hvdyhtZXNzYWdlX2JvZHksIFwiYWxlcnQtZGFuZ2VyXCIpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV9hbGVydHMoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS8ke3Byb3BzLnBhZ2V9L2FsZXJ0cy5sdWFgO1xuICAgIGNvbnN0IHVybF9wYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuXHRjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG5cdC4uLnVybF9wYXJhbXNfb2JqLFxuICAgIH07XG4gICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCBwYXJhbXMpO1xuICAgIGVtaXQoXCJkZWxldGVfYWxlcnRzXCIpO1xuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxOYXZiYXIgaWQ9XCJuYXZiYXJcIiA6bWFpbl90aXRsZT1cImNvbnRleHQubmF2YmFyLm1haW5fdGl0bGVcIiA6YmFzZV91cmw9XCJjb250ZXh0Lm5hdmJhci5iYXNlX3VybFwiXG4gICAgICAgIDpoZWxwX2xpbms9XCJjb250ZXh0Lm5hdmJhci5oZWxwX2xpbmtcIiA6aXRlbXNfdGFibGU9XCJjb250ZXh0Lm5hdmJhci5pdGVtc190YWJsZVwiIEBjbGlja19pdGVtPVwiY2xpY2tfbmF2YmFyX2l0ZW1cIj5cbiAgICA8L05hdmJhcj5cblxuICAgIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbC0xMic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItMlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEwMFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXM9XCJyYW5nZS1jb250YWluZXIgZC1mbGV4IGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlLXBpY2tlciBkLWZsZXggbS1hdXRvIGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydEluZm8gaWQ9XCJhbGVydF9pbmZvXCIgOmdsb2JhbD1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gaWQ9XCJtb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIiByZWY9XCJtb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L01vZGFsVHJhZmZpY0V4dHJhY3Rpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1vZGFsU25hcHNob3QgcmVmPVwibW9kYWxfc25hcHNob3RcIiA6Y3NyZj1cImNvbnRleHQuY3NyZlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTW9kYWxTbmFwc2hvdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmFuZ2VQaWNrZXIgdi1pZj1cIm1vdW50X3JhbmdlX3BpY2tlclwiIHJlZj1cInJhbmdlX3BpY2tlclwiIGlkPVwicmFuZ2VfcGlja2VyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJxdWVyeV9wcmVzZXRzLmxlbmd0aCA+IDBcIiBjbGFzcz1cIm1zLTEgbWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJtZS0yIGZvcm0tc2VsZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkX3F1ZXJ5X3ByZXNldFwiIEBjaGFuZ2U9XCJ1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1pZj1cIml0ZW0uYnVpbHRpbiA9PSB0cnVlXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0Z3JvdXAgdi1pZj1cInBhZ2UgIT0gJ2FuYWx5c2lzJ1wiIDpsYWJlbD1cIl9pMThuKCdxdWVyaWVzLnF1ZXJpZXMnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtaWY9XCIhaXRlbS5idWlsdGluXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX3JhbmdlX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfcGVybWFsaW5rXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJnZXRfcGVybWFuZW50X2xpbmtcIiA6dGl0bGU9XCJfaTE4bignZ3JhcGhzLmdldF9wZXJtYW5lbnRfbGluaycpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9XCJwZXJtYW5lbnRfbGlua19idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1saW5rXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cImNvbnRleHQuc2hvd19kb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIGlkPVwiZHQtYnRuLWRvd25sb2FkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZ3JhcGhzLmRvd25sb2FkX3JlY29yZHMnKVwiIDpocmVmPVwiaHJlZl9kb3dubG9hZF9yZWNvcmRzXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtZmlsZVwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfcGNhcF9kb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2Rvd25sb2FkJylcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1kb3dubG9hZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuaXNfbnRvcF9lbnRlcnByaXNlX21cIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNob3dfbW9kYWxfc25hcHNob3RcIiA6dGl0bGU9XCJfaTE4bignZGF0YXRhYmxlLm1hbmFnZV9zbmFwc2hvdHMnKVwiPjxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWNhbWVyYS1yZXRyb1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JhbmdlUGlja2VyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbC0xMic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJjb250ZXh0LnNob3dfY2hhcnRcIiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBtYi0yXCIgaWQ9XCJjaGFydC12dWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBoLTEwMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoYXJ0IHJlZj1cImNoYXJ0XCIgaWQ9XCJjaGFydF9hbGVydF9zdGF0c1wiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X2RhdGFfdXJsXCIgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cdFx0XHQ8ZGl2PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9hbGVydHNcIiA6dGFibGVfY29uZmlnX2lkPVwidGFibGVfY29uZmlnX2lkXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6Y3NyZj1cImNvbnRleHQuY3NyZlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIiA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc3BsYXlfbWVzc2FnZT1cImRpc3BsYXlfbWVzc2FnZVwiIDptZXNzYWdlX3RvX2Rpc3BsYXk9XCJtZXNzYWdlX3RvX2Rpc3BsYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIiBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCIgQHJvd3NfbG9hZGVkPVwicm93c19sb2FkZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiB0b3BfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfb25fb3Blbj1cImdldF9vcGVuX3RvcF90YWJsZV9kcm9wZG93bih0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiZWwgPT4geyB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCI+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgOnNob3c9XCJ0LnNob3dfc3Bpbm5lclwiIHNpemU9XCIxcmVtXCIgY2xhc3M9XCJtZS0xXCI+PC9TcGlubmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtZm9yPVwib3B0IGluIHQub3B0aW9uc1wiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7IGRpc3BsYXk6IGJsb2NrO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90b3BfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50KVwiIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXIgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+e3sgb3B0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gY3VzdG9tX2hlYWRlciAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGJvZHkgLS0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz1cInBhZ2UgIT0gJ2FsbCdcIiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuc2hvd19hY2tub3dsZWRnZV9hbGxcIiBAY2xpY2s9XCJzaG93X21vZGFsX2Fja25vd2xlZGdlX2FsZXJ0c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtZS0xXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYSBmYS11c2VyLWNoZWNrXCI+PC9pPiB7e19pMThuKFwiYWNrbm93bGVkZ2VfYWxlcnRzXCIpfX1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuc2hvd19kZWxldGVfYWxsXCIgQGNsaWNrPVwic2hvd19tb2RhbF9kZWxldGVfYWxlcnRzXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYSBmYS10cmFzaFwiPjwvaT4ge3tfaTE4bihcImRlbGV0ZV9hbGVydHNcIil9fVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGZvb3RlciAtLT5cbiAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQtc2hhZG93IC0tPlxuXG4gICAgICAgIDwvZGl2PiA8IS0tIGRpdiBjb2wgLS0+XG4gICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+PC9Ob3RlTGlzdD5cbiAgICA8L2Rpdj4gPCEtLSBkaXYgcm93IC0tPlxuXG4gICAgPE1vZGFsQWNrbm93bGVkZ2VBbGVydCByZWY9XCJtb2RhbF9hY2tub3dsZWRnZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIDpwYWdlPVwicGFnZVwiIEBhY2tub3dsZWRnZT1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+XG4gICAgPC9Nb2RhbEFja25vd2xlZGdlQWxlcnQ+XG5cbiAgICA8TW9kYWxEZWxldGVBbGVydCByZWY9XCJtb2RhbF9kZWxldGVcIiA6Y29udGV4dD1cImNvbnRleHRcIiA6cGFnZT1cInBhZ2VcIiBAZGVsZXRlX2FsZXJ0PVwicmVmcmVzaF9wYWdlX2NvbXBvbmVudHNcIj48L01vZGFsRGVsZXRlQWxlcnQ+XG5cbiAgICA8TW9kYWxBY2tub3dsZWRnZUFsZXJ0cyByZWY9XCJtb2RhbF9hY2tub3dsZWRnZV9hbGVydHNcIiA6Y29udGV4dD1cImNvbnRleHRcIiA6cGFnZT1cInBhZ2VcIiBAYWNrbm93bGVkZ2VfYWxlcnRzPVwicmVmcmVzaF9wYWdlX2NvbXBvbmVudHNcIj5cbiAgICA8L01vZGFsQWNrbm93bGVkZ2VBbGVydHM+ICAgIFxuXG4gICAgPE1vZGFsRGVsZXRlQWxlcnRzIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGVydHNcIiA6Y29udGV4dD1cImNvbnRleHRcIiA6cGFnZT1cInBhZ2VcIiBAZGVsZXRlX2FsZXJ0cz1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+XG4gICAgPC9Nb2RhbERlbGV0ZUFsZXJ0cz4gICAgXG5cbiAgICA8TW9kYWxBbGVydHNGaWx0ZXIgOmFsZXJ0PVwiY3VycmVudF9hbGVydFwiIDpwYWdlPVwicGFnZVwiIEBleGNsdWRlPVwiYWRkX2V4Y2x1ZGVcIiByZWY9XCJtb2RhbF9hbGVydHNfZmlsdGVyXCI+XG4gICAgPC9Nb2RhbEFsZXJ0c0ZpbHRlcj5cblxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsY29tcHV0ZWQsIG5leHRUaWNrIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLCBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3N5bmMgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IG50b3BDaGFydEFwZXggfSBmcm9tIFwiLi4vY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzXCI7XG5pbXBvcnQgeyBEYXRhVGFibGVSZW5kZXJzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlscy5qc1wiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZpbHRlcnNNYW5hZ2VyIGZyb20gXCIuLi91dGlsaXRpZXMvZmlsdGVycy1tYW5hZ2VyLmpzXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFJhbmdlUGlja2VyIH0gZnJvbSBcIi4vcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVdpdGhDb25maWcgfSBmcm9tIFwiLi90YWJsZS13aXRoLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRHJvcGRvd24gfSBmcm9tIFwiLi9kcm9wZG93bi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3Bpbm5lciB9IGZyb20gXCIuL3NwaW5uZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gfSBmcm9tIFwiLi9tb2RhbC10cmFmZmljLWV4dHJhY3Rpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsU25hcHNob3QgfSBmcm9tIFwiLi9tb2RhbC1zbmFwc2hvdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBbGVydHNGaWx0ZXIgfSBmcm9tIFwiLi9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFja25vd2xlZGdlQWxlcnQgfSBmcm9tIFwiLi9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVBbGVydCB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1hbGVydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBY2tub3dsZWRnZUFsZXJ0cyB9IGZyb20gXCIuL21vZGFsLWFja25vd2xlZGdlLWFsZXJ0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVBbGVydHMgfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtYWxlcnRzLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGVfYWxlcnRzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfc25hcHNob3QgPSByZWYobnVsbCk7XG5jb25zdCByYW5nZV9waWNrZXIgPSByZWYobnVsbCk7XG5jb25zdCBwZXJtYW5lbnRfbGlua19idXR0b24gPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hbGVydHNfZmlsdGVyID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWNrbm93bGVkZ2UgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9kZWxldGUgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hY2tub3dsZWRnZV9hbGVydHMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9kZWxldGVfYWxlcnRzID0gcmVmKG51bGwpO1xuY29uc3QgY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkID0gcmVmKDApO1xuY29uc3QgZGlzcGxheV9tZXNzYWdlID0gcmVmKGZhbHNlKTtcbmNvbnN0IG1lc3NhZ2VfdG9fZGlzcGxheSA9IHJlZignJyk7XG5cbmNvbnN0IGN1cnJlbnRfYWxlcnQgPSByZWYobnVsbCk7XG5jb25zdCBkZWZhdWx0X2lmaWQgPSBwcm9wcy5jb250ZXh0LmlmaWQ7XG5sZXQgcGFnZTtcbmNvbnN0IHRhYmxlX2NvbmZpZ19pZCA9IHJlZihcIlwiKTtcbmNvbnN0IHRhYmxlX2lkID0gcmVmKFwiXCIpO1xubGV0IGNoYXJ0X2RhdGFfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvdHMubHVhYDtcbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19DT0xVTU47XG5jb25zdCB0b3BfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IG5vdGVfbGlzdCA9IHJlZihbX2kxOG4oJ3Nob3dfYWxlcnRzLmFsZXJ0c19pbmZvJyldKTtcbmNvbnN0IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldCA9IHJlZih7fSk7XG5jb25zdCBxdWVyeV9wcmVzZXRzID0gcmVmKFtdKTtcbmNvbnN0IG1vdW50X3JhbmdlX3BpY2tlciA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IGhyZWZfZG93bmxvYWRfcmVjb3JkcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAoIXByb3BzLmNvbnRleHQuc2hvd19jaGFydCB8fCB0YWJsZV9hbGVydHMudmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYGA7XG4gICAgfVxuICAgIC8vIGFkZCBpbXBvc3NpYmxlIGlmIG9uIHJlZiB2YXJpYWJsZSB0byByZWxvYWQgdGhpcyBleHByZXNzaW9uIGV2ZXJ5IHRpbWUgY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlIGNoYW5nZVxuICAgIGlmIChjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQudmFsdWUgPCAwKSB7IHRocm93IFwibmV2ZXIgcnVuXCI7IH1cbiAgICBjb25zdCBkb3dubG9hZF9lbmRwb2ludCA9IHByb3BzLmNvbnRleHQuZG93bmxvYWQuZW5kcG9pbnQ7XG4gICAgbGV0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIGxldCBjb2x1bW5zID0gdGFibGVfYWxlcnRzLnZhbHVlLmdldF9jb2x1bW5zX2RlZnMoKTtcbiAgICBsZXQgdmlzaWJsZV9jb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGMpID0+IGMudmlzaWJsZSkubWFwKChjKSA9PiBjLmlkKS5qb2luKFwiLFwiKTtcbiAgICBwYXJhbXMuZm9ybWF0ID0gXCJ0eHRcIjtcbiAgICBwYXJhbXMudmlzaWJsZV9jb2x1bW5zID0gdmlzaWJsZV9jb2x1bW5zO1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICByZXR1cm4gYCR7bG9jYXRpb24ub3JpZ2lufS8ke2Rvd25sb2FkX2VuZHBvaW50fT8ke3VybF9wYXJhbXN9YDtcbn0pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBtZXNzYWdlX3RvX2Rpc3BsYXkudmFsdWUgPSBgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MgYWxlcnQtZGlzbWlzc2FibGVcIj48c3Bhbj4ke2kxOG4oJ25vX2FsZXJ0c19yZXF1aXJlX2F0dGVudGlvbicpfTwvc3Bhbj48L2Rpdj5gO1xuICAgIGlmIChwcm9wcy5jb250ZXh0LmlzX3ZhKSB7XG4gICAgICAgIG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKFwiZGF5XCIpO1xuICAgIH1cbiAgICBpbml0X3BhcmFtcygpO1xuICAgIGluaXRfdXJsX3BhcmFtcygpO1xuICAgIGF3YWl0IHNldF9xdWVyeV9wcmVzZXRzKCk7XG4gICAgbW91bnRfcmFuZ2VfcGlja2VyLnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xufSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgcmVnaXN0ZXJfY29tcG9uZW50c19vbl9zdGF0dXNfdXBkYXRlKCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdF9wYXJhbXMoKSB7XG4gICAgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBjb25zdCBzdGF0dXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7IHBhZ2UgPSBcImFsbFwiOyB9XG4gICAgaWYgKHN0YXR1cyA9PSAnZW5nYWdlZCcgJiYgcGFnZSA9PSBcImZsb3dcIikgeyBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJzdGF0dXNcIiwgXCJoaXN0b3JpY2FsXCIpOyB9XG4gICAgY2hhcnRfZGF0YV91cmwgPSAocGFnZSA9PSBcInNubXBfZGV2aWNlXCIpID8gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvYWxlcnQvdHMubHVhYCA6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvJHtwYWdlfS9hbGVydC90cy5sdWFgO1xuICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9IHtcbiAgICAgICAgdmFsdWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicXVlcnlfcHJlc2V0XCIpLFxuICAgICAgICBjb3VudDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJjb3VudFwiKSxcbiAgICB9O1xuICAgIGlmIChzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICB0YWJsZV9jb25maWdfaWQudmFsdWUgPSBgYWxlcnRfJHtwYWdlfWA7XG4gICAgdGFibGVfaWQudmFsdWUgPSBgJHt0YWJsZV9jb25maWdfaWQudmFsdWV9XyR7c2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlfWA7ICAgIFxufVxuXG5mdW5jdGlvbiBpbml0X3VybF9wYXJhbXMoKSB7XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImlmaWRcIiwgZGVmYXVsdF9pZmlkKTtcbiAgICB9XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIikgPT0gbnVsbFxuICAgICAgICB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIGxldCBkZWZhdWx0X2Vwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KChEYXRlLm5vdygpIC0gMTAwMCAqIDMwICogNjApIC8gMTAwMCk7XG4gICAgICAgIGxldCBkZWZhdWx0X2Vwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2JlZ2luXCIsIGRlZmF1bHRfZXBvY2hfYmVnaW4pO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9lbmRcIiwgZGVmYXVsdF9lcG9jaF9lbmQpO1xuICAgIH1cbiAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpID09IFwiZmxvd1wiXG4gICAgICAgICYmIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpID09IFwiZW5nYWdlZFwiKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBcImhpc3RvcmljYWxcIik7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfcXVlcnlfcHJlc2V0cygpIHtcbiAgICBpZiAoIXByb3BzLmNvbnRleHQuaXNfbnRvcF9lbnRlcnByaXNlX2wgfHwgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIikgPT0gXCJlbmdhZ2VkXCIpIHtcblx0bnRvcG5nX3N5bmMucmVhZHkoZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSk7XG5cdHJldHVybjtcbiAgICB9XG4gICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvYWxlcnQvcHJlc2V0L2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBpZiAocmVzID09IG51bGwgfHwgcmVzLmxlbmd0aCA9PSAwKSB7XG5cdHF1ZXJ5X3ByZXNldHMudmFsdWUgPSBbXTtcblx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIFwiXCIpO1xuXHRudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBcIlwiKTtcblx0bnRvcG5nX3N5bmMucmVhZHkoZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSk7XG5cdHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgcXVlcnlfcHJlc2V0cy52YWx1ZSA9IHJlc1swXS5saXN0Lm1hcCgoZWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbC5pZCxcbiAgICAgICAgICAgIG5hbWU6IGVsLm5hbWUsXG4gICAgICAgICAgICBjb3VudDogZWwuY291bnQsXG4gICAgICAgICAgICBidWlsdGluOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChyZXMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXNbMV0ubGlzdC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlbC5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBlbC5uYW1lLFxuICAgICAgICAgICAgICAgIGNvdW50OiBlbC5jb3VudCxcbiAgICAgICAgICAgICAgICBpc19wcmVzZXQ6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcXVlcnlfcHJlc2V0cy52YWx1ZS5wdXNoKHF1ZXJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPT0gbnVsbCB8fCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUgPT0gXCJcIikge1xuICAgICAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPSBxdWVyeV9wcmVzZXRzLnZhbHVlWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBxID0gcXVlcnlfcHJlc2V0cy52YWx1ZS5maW5kKChpKSA9PiBpLnZhbHVlID09IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSk7XG4gICAgICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9IHEgfHwgcXVlcnlfcHJlc2V0cy52YWx1ZVswXTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLmNvdW50KTtcbiAgICBudG9wbmdfc3luYy5yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcbn1cblxuY29uc3QgcGFnZV9pZCA9IFwicGFnZS1hbGVydC1zdGF0c1wiO1xuZnVuY3Rpb24gZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSB7XG4gICAgcmV0dXJuIGAke3BhZ2VfaWR9X3F1ZXJ5X3ByZXNldHNgO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldyhhY3Rpb24pIHtcbiAgICBpZiAocHJvcHMuY29udGV4dC5zaG93X2NhcmRzICE9IHRydWUgfHwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLmlzX3ByZXNldCA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgIHRvcF90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdG9wX3RhYmxlX2FycmF5KFwib3ZlcnZpZXdcIik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2RldGFpbHModG9wLCB0b3BfaW5kZXgpIHtcbiAgICB0b3Auc2hvd19zcGlubmVyID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGlmICh0b3AuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG5ld190b3BfYXJyYXkgPSBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheSh0b3AuaWQsIHRvcCk7XG4gICAgICAgIHRvcC5vcHRpb25zID0gbmV3X3RvcF9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IHRvcC5pZCkub3B0aW9ucztcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgbGV0IGRyb3Bkb3duID0gdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW3RvcF9pbmRleF07XG4gICAgICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICAgIH1cbiAgICB0b3Auc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2FycmF5KGFjdGlvbiwgdG9wKSB7XG4gICAgLy8gdG9wX3RhYmxlLnZhbHVlID0gW107XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0LyR7cGFnZX0vYWxlcnQvdG9wLmx1YT8ke3VybF9wYXJhbXN9JmFjdGlvbj0ke2FjdGlvbn1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIHNob3dfc3Bpbm5lcjogZmFsc2UsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl90b3BfdGFibGVfZHJvcGRvd24gPSAodG9wLCB0b3BfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKGQpID0+IHtcbiAgICAgICAgbG9hZF90b3BfdGFibGVfZGV0YWlscyh0b3AsIHRvcF9pbmRleCk7XG4gICAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpIHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShcInJhbmdlX3BpY2tlclwiKTtcbiAgICAvL2lmIChzaG93X2NoYXJ0KSB7ICAgICAgXG4gICAgY2hhcnQudmFsdWUucmVnaXN0ZXJfc3RhdHVzKCk7XG4gICAgLy99XG4gICAgLy91cGRhdGVEb3dubG9hZEJ1dHRvbigpO1xuICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHBhZ2UsIChuZXdfc3RhdHVzKSA9PiB7XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgIHRhYmxlX2FsZXJ0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG4gICAgICAgIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG4gICAgfSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gICAgcmVnaXN0ZXJfdGFibGVfYWxlcnRzX2V2ZW50cygpO1xufVxuXG5mdW5jdGlvbiByZWdpc3Rlcl90YWJsZV9hbGVydHNfZXZlbnRzKCkge1xuICAgIGxldCBqcXVlcnlfdGFibGVfYWxlcnRzID0gJChgIyR7dGFibGVfaWQudmFsdWV9YCk7XG4gICAganF1ZXJ5X3RhYmxlX2FsZXJ0cy5vbignY2xpY2snLCBgYS50YWctZmlsdGVyYCwgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYWRkX3RhYmxlX3Jvd19maWx0ZXIoZSwgJCh0aGlzKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cygpIHtcbiAgICBsZXQgdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLmNvdW50KTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJsN19wcm90b1wiOiAocHJvdG8sIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbmZpZGVuY2UgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKHByb3RvLmNvbmZpZGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gcHJvdG8uY29uZmlkZW5jZTtcbiAgICAgICAgICAgICAgICAodGl0bGUgPT0gXCJEUElcIikgPyBjb25maWRlbmNlID0gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHt0aXRsZX1cIj4ke3RpdGxlfTwvc3Bhbj5gIDogY29uZmlkZW5jZSA9IGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXdhcm5pbmdcIiB0aXRsZT1cIiR7dGl0bGV9XCI+JHt0aXRsZX08L3NwYW4+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdsN3Byb3RvJywgcHJvdG8udmFsdWUsIHByb3RvLmxhYmVsKSArIFwiIFwiICsgYCR7Y29uZmlkZW5jZX1gO1xuICAgICAgICB9LFxuICAgICAgICBcImluZm9cIjogKGluZm8sIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvcHlfYnV0dG9uID0gJydcbiAgICAgICAgICAgIGlmKGluZm8udmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb3B5X2J1dHRvbiA9IGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBidG4tc20gYm9yZGVyIG1zLTFcIiBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIG9uY2xpY2s9XCJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QXJlYS52YWx1ZSA9ICcke2luZm8udmFsdWV9JzsgICAgXG4gICAgICAgICAgICAgICAgICAgIHRleHRBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuc3R5bGUubGVmdCA9ICctOTk5OTk5cHgnOyAgICBcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRleHRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XCJcbiAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPVwiZmFzIGZhLWNvcHlcIj48L2k+PC9idXR0b24+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke2NvcHlfYnV0dG9ufSAke0RhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdpbmZvJywgaW5mby52YWx1ZSwgaW5mby5sYWJlbCl9YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGxldCBzZXRfcXVlcnlfcHJlc2V0X2NvbHVtbnMgPSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuaXNfcHJlc2V0ICYmIGNvbHVtbnMubGVuZ3RoID4gMDtcbiAgICBpZiAoc2V0X3F1ZXJ5X3ByZXNldF9jb2x1bW5zKSB7XG4gICAgICAgIC8vIGFkZCBhY3Rpb24gYnV0dG9uIHRoYXQgaXMgdGhlIGZpcnN0IGJ1dHRvblxuICAgICAgICBjb2x1bW5zID0gW2NvbHVtbnNbMF1dLmNvbmNhdChwcm9wcy5jb250ZXh0LmNvbHVtbnNfZGVmKTtcbiAgICB9XG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuXHRcbiAgICAgICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcblx0ICAgIGlmIChzZXRfcXVlcnlfcHJlc2V0X2NvbHVtbnMgPT0gdHJ1ZSkge1xuXHRcdGMuYnV0dG9uX2RlZl9hcnJheSA9IFtcblx0XHQgICAge1xuXHRcdFx0XCJpZFwiOiBcImV4cGFuZFwiLFxuXHRcdFx0XCJpY29uXCI6IFwiZmFzIGZhIGZhLXNlYXJjaC1wbHVzXCIsXG5cdFx0XHRcImNsYXNzXCI6W1wibGluay1idXR0b25cIl0sXG5cdFx0XHRcInRpdGxlX2kxOG5cIjogXCJkYl9zZWFyY2guZXhwYW5kX2J1dHRvblwiLFxuXHRcdFx0XCJldmVudF9pZFwiOiBcImNsaWNrX2J1dHRvbl9leHBhbmRcIlxuXHRcdCAgICB9LFxuXHRcdF07XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuICAgICAgICAgICAgY29uc3QgdmlzaWJsZV9kaWN0ID0ge1xuICAgICAgICAgICAgICAgIHNubXBfaW5mbzogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfc25tcF9pbmZvLFxuICAgICAgICAgICAgICAgIGluZm86IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2luZm8sXG4gICAgICAgICAgICAgICAgaGlzdG9yaWNhbF9kYXRhOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19oaXN0b3JpY2FsLFxuICAgICAgICAgICAgICAgIGFja25vd2xlZGdlOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19hY2tub3dsZWRnZSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19kaXNhYmxlLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19zZXR0aW5ncyxcbiAgICAgICAgICAgICAgICByZW1vdmU6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2RlbGV0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29sdW1ucztcbn07XG5cbmNvbnN0IGFkZF90YWJsZV9yb3dfZmlsdGVyID0gKGUsIGEpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgbGV0IGtleSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgZGlzcGxheVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCByZWFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9wZXJhdG9yID0gJ2VxJztcblxuICAgIC8vIFJlYWQgdGFnIGtleSBhbmQgdmFsdWUgZnJvbSB0aGUgPGE+IGl0c2VsZiBpZiBwcm92aWRlZFxuICAgIGlmIChhLmRhdGEoJ3RhZ0tleScpICE9IHVuZGVmaW5lZCkga2V5ID0gYS5kYXRhKCd0YWdLZXknKTtcbiAgICBpZiAoYS5kYXRhKCd0YWdSZWFsdmFsdWUnKSAhPSB1bmRlZmluZWQpIHJlYWxWYWx1ZSA9IGEuZGF0YSgndGFnUmVhbHZhbHVlJyk7XG4gICAgZWxzZSBpZiAoYS5kYXRhKCd0YWdWYWx1ZScpICE9IHVuZGVmaW5lZCkgcmVhbFZhbHVlID0gYS5kYXRhKCd0YWdWYWx1ZScpO1xuICAgIGlmIChhLmRhdGEoJ3RhZ09wZXJhdG9yJykgIT0gdW5kZWZpbmVkKSBvcGVyYXRvciA9IGEuZGF0YSgndGFnT3BlcmF0b3InKTtcblxuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIHZhbHVlOiByZWFsVmFsdWUsXG4gICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICB9O1xuICAgIGFkZF9maWx0ZXIoZmlsdGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBvcHQua2V5LFxuICAgICAgICB2YWx1ZTogb3B0LnZhbHVlLFxuICAgICAgICBvcGVyYXRvcjogb3B0Lm9wZXJhdG9yLFxuICAgIH07XG4gICAgYWRkX2ZpbHRlcihmaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRfZmlsdGVyKGZpbHRlcikge1xuICAgIGlmIChyYW5nZV9waWNrZXIudmFsdWUuaXNfZmlsdGVyX2RlZmluZWQoZmlsdGVyKSkge1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCBmaWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGBGaWx0ZXIgJHtmaWx0ZXIudmFsdWV9IG5vdCBkZWZpbmVkYDtcbiAgICB9XG59XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuZnVuY3Rpb24gY2xpY2tfbmF2YmFyX2l0ZW0oaXRlbSkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgncGFnZScsIGl0ZW0ucGFnZV9uYW1lKTtcbiAgICBsZXQgaXNfYWxlcnRfc3RhdHNfdXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG4gICAgaWYgKGlzX2FsZXJ0X3N0YXRzX3VybCkge1xuICAgICAgICByZW1vdmVfZmlsdGVyc19mcm9tX3VybCgpO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVfZmlsdGVyc19mcm9tX3VybCgpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoZmlsdGVycy5tYXAoKGYpID0+IGYuaWQpKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9hbGVydHNfZmlsdGVyKGFsZXJ0KSB7XG4gICAgY3VycmVudF9hbGVydC52YWx1ZSA9IGFsZXJ0O1xuICAgIG1vZGFsX2FsZXJ0c19maWx0ZXIudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBnZXRfcGVybWFuZW50X2xpbmsoKSB7XG4gICAgY29uc3QgJHRoaXMgPSAkKHBlcm1hbmVudF9saW5rX2J1dHRvbi52YWx1ZSk7XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHBsYWNlaG9sZGVyLnZhbHVlID0gbG9jYXRpb24uaHJlZjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICBwbGFjZWhvbGRlci5zZWxlY3QoKTtcblxuICAgIC8vIGNvcHkgdGhlIHVybCB0byB0aGUgY2xpcGJvYXJkIGZyb20gdGhlIHBsYWNlaG9sZGVyXG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgIFxuICAgICR0aGlzLmF0dHIoXCJ0aXRsZVwiLCBgJHtfaTE4bignY29waWVkJyl9IWApXG4gICAgICAgIC50b29sdGlwKFwiZGlzcG9zZVwiKVxuICAgICAgICAudG9vbHRpcCgpXG4gICAgICAgIC50b29sdGlwKFwic2hvd1wiKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb24oKSB7XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coKTtcblxufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3NuYXBzaG90KCkge1xuICAgIG1vZGFsX3NuYXBzaG90LnZhbHVlLnNob3coKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYWRkX2V4Y2x1ZGUocGFyYW1zKSB7XG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jb250ZXh0LmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2FsZXJ0L2V4Y2x1c2lvbi5sdWFgO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vdG9kbyByZWxvYWRUYWJsZSgkdGFibGUsIHVybF9wYXJhbXMpO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBfaTE4bignY2hlY2tfZXhjbHVzaW9uLmRpc2FibGVfd2FybicpLCB0eXBlOiBcImFsZXJ0LWluZm9cIiwgdGltZW91dDogMiB9KTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfcGFnZV9jb21wb25lbnRzKCkge1xuICAgIGxldCB0ID0gdGFibGVfYWxlcnRzLnZhbHVlO1xuICAgIGxldCBjID0gY2hhcnQudmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHQucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICBjLnVwZGF0ZV9jaGFydCgpO1xuICAgIH0sIDEgKiAxMDAwKTtcbn1cblxuLyogSW4gY2FzZSBubyByb3dzIGFyZSBwcmludGVkLCB0aGVuIHRoZSBtZXNzYWdlIGhhcyB0byBiZSBkaXNwbGF5ZWQgKi9cbmZ1bmN0aW9uIHJvd3NfbG9hZGVkKHJlcykge1xuICAgIGlmKHJlcz8ucm93cyAhPSBudWxsKSB7XG4gICAgICAgIGRpc3BsYXlfbWVzc2FnZS52YWx1ZSA9IChyZXMucm93cy5sZW5ndGggPT0gMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3NubXBfaW5mb1wiOiBjbGlja19idXR0b25fc25tcF9pbmZvLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9pbmZvXCI6IGNsaWNrX2J1dHRvbl9pbmZvLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZVwiOiBjbGlja19idXR0b25fYWNrbm93bGVkZ2UsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Rpc2FibGVcIjogY2xpY2tfYnV0dG9uX2Rpc2FibGUsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3NldHRpbmdzXCI6IGNsaWNrX2J1dHRvbl9zZXR0aW5ncyxcbiAgICAgICAgXCJjbGlja19idXR0b25fcmVtb3ZlXCI6IGNsaWNrX2J1dHRvbl9yZW1vdmUsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2V4cGFuZFwiOiBjbGlja19idXR0b25fZXhwYW5kLFxuICAgIH07XG4gICAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2V4cGFuZChldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBcIlwiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBcIlwiKTtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgIGxldCByb3dfZmlsdGVycyA9IGFsZXJ0Py5maWx0ZXI/LnRhZ19maWx0ZXJzO1xuICAgIGlmIChyb3dfZmlsdGVycz8ubGVuZ3RoID4gMCkge1xuXHRyb3dfZmlsdGVycyA9IHJvd19maWx0ZXJzLm1hcCgoZikgPT4ge1xuXHQgICAgcmV0dXJuIHtcblx0XHRpZDogZi5pZCxcblx0XHRvcGVyYXRvcjogZi5vcCxcblx0XHR2YWx1ZTogZi52YWx1ZSxcblx0ICAgIH07XG5cdH0pO1xuXHRmaWx0ZXJzID0gZmlsdGVycy5jb25jYXQocm93X2ZpbHRlcnMpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgZHVwbGljYXRlIGZpbHRlcnNcbiAgICBsZXQgZmlsdGVyc19kaWN0ID0ge307XG4gICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiBmaWx0ZXJzX2RpY3RbYCR7Zi5pZH1fJHtmLm9wZXJhdG9yfV8ke2YudmFsdWV9YF0gPSBmKTtcbiAgICBmaWx0ZXJzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KGZpbHRlcnNfZGljdCk7XG4gICAgXG4gICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0gZmlsdGVyc01hbmFnZXIuZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHMoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzLnZhbHVlLnNob3coc3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9kZWxldGVfYWxlcnRzKCkge1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIG1vZGFsX2RlbGV0ZV9hbGVydHMudmFsdWUuc2hvdyhzdGF0dXMpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fcmVtb3ZlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgbGV0IHN0YXR1c192aWV3ID0gZ2V0X3N0YXR1c192aWV3KCk7XG4gICAgbW9kYWxfZGVsZXRlLnZhbHVlLnNob3coYWxlcnQsIHN0YXR1c192aWV3KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3NldHRpbmdzKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgY29uc3QgY2hlY2tfc2V0dGluZ3NfaHJlZiA9ICQoYWxlcnQubXNnLmNvbmZpZ3NldF9yZWYpLmF0dHIoJ2hyZWYnKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNoZWNrX3NldHRpbmdzX2hyZWY7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kaXNhYmxlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgc2hvd19tb2RhbF9hbGVydHNfZmlsdGVyKGFsZXJ0KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2Fja25vd2xlZGdlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgbW9kYWxfYWNrbm93bGVkZ2UudmFsdWUuc2hvdyhhbGVydCwgcHJvcHMuY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgaWYgKGFsZXJ0LmxpbmtfdG9fcGFzdF9mbG93cykge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFsZXJ0LmxpbmtfdG9fcGFzdF9mbG93cztcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWFgO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3NubXBfaW5mbyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGxldCBocmVmID0gYGA7XG4gICAgaWYgKGFsZXJ0LnBvcnQudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBocmVmID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7YWxlcnQuaXB9JnNubXBfcG9ydF9pZHg9JHthbGVydC5wb3J0LnZhbHVlfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9kZXZpY2VfZGV0YWlscy5sdWE/aG9zdD0ke2FsZXJ0LmlwfWA7XG4gICAgfVxuICAgIHdpbmRvdy5vcGVuKGhyZWYsIFwiX2JsYW5rXCIpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25faW5mbyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGxldCBzdGF0dXNfdmlldyA9IGdldF9zdGF0dXNfdmlldygpO1xuICAgIGxldCBwYXJhbXNfb2JqID0ge1xuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICBzdGF0dXM6IHN0YXR1c192aWV3LFxuICAgICAgICByb3dfaWQ6IGFsZXJ0LnJvd19pZCxcbiAgICAgICAgdHN0YW1wOiBhbGVydC50c3RhbXAudmFsdWUsXG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICBjb25zdCBocmVmID0gYCR7cHJvcHMuY29udGV4dC5hbGVydF9kZXRhaWxzX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gICAgd2luZG93Lm9wZW4oaHJlZiwgXCJfYmxhbmtcIik7XG59XG5cbmZ1bmN0aW9uIGdldF9zdGF0dXNfdmlldygpIHtcbiAgICBsZXQgc3RhdHVzX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbiAgICBpZiAoc3RhdHVzX3ZpZXcgPT0gbnVsbCB8fCBzdGF0dXNfdmlldyA9PSBcIlwiKSB7XG4gICAgICAgIHN0YXR1c192aWV3ID0gXCJoaXN0b3JpY2FsXCI7XG4gICAgfVxuICAgIHJldHVybiBzdGF0dXNfdmlldztcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+PC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPE5hdmJhciBpZD1cIm5hdmJhclwiIDptYWluX3RpdGxlPVwiY29udGV4dC5uYXZiYXIubWFpbl90aXRsZVwiIDpiYXNlX3VybD1cImNvbnRleHQubmF2YmFyLmJhc2VfdXJsXCJcbiAgICAgICAgOmhlbHBfbGluaz1cImNvbnRleHQubmF2YmFyLmhlbHBfbGlua1wiIDppdGVtc190YWJsZT1cImNvbnRleHQubmF2YmFyLml0ZW1zX3RhYmxlXCIgQGNsaWNrX2l0ZW09XCJjbGlja19uYXZiYXJfaXRlbVwiPlxuICAgIDwvTmF2YmFyPlxuXG4gICAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29sLTEyJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0yXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMTAwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhcz1cInJhbmdlLWNvbnRhaW5lciBkLWZsZXggZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFuZ2UtcGlja2VyIGQtZmxleCBtLWF1dG8gZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZXJ0SW5mbyBpZD1cImFsZXJ0X2luZm9cIiA6Z2xvYmFsPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmFuZ2VQaWNrZXIgdi1pZj1cIm1vdW50X3JhbmdlX3BpY2tlclwiIHJlZj1cInJhbmdlX3BpY2tlclwiIGlkPVwicmFuZ2VfcGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIiA6cm91bmRfdGltZT1cInJvdW5kX3RpbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2ggdi1pZj1cInByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV94bFwiIHYtbW9kZWw6dmFsdWU9XCJmbG93c19hZ2dyZWdhdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1lLTIgbXQtMVwiIDpjaGFuZ2VfbGFiZWxfc2lkZT1cInRydWVcIiA6bGFiZWw9XCJmbG93X3R5cGVfbGFiZWxcIiBzdHlsZT1cIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZV92YWx1ZT1cImNoYW5nZV9mbG93X3R5cGVcIj48L1N3aXRjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtcy0xIG1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwibWUtMiBmb3JtLXNlbGVjdFwiIHN0eWxlPVwibWluLXdpZHRoOjhyZW07XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkX3F1ZXJ5X3ByZXNldFwiIEBjaGFuZ2U9XCJ1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1pZj1cIml0ZW0uYnVpbHRpbiA9PSB0cnVlXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0Z3JvdXAgdi1pZj1cInBhZ2UgIT0gJ2FuYWx5c2lzJ1wiIDpsYWJlbD1cIl9pMThuKCdxdWVyaWVzLnF1ZXJpZXMnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtaWY9XCIhaXRlbS5idWlsdGluXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX3JhbmdlX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfcGVybWFsaW5rXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJnZXRfcGVybWFuZW50X2xpbmtcIiA6dGl0bGU9XCJfaTE4bignZ3JhcGhzLmdldF9wZXJtYW5lbnRfbGluaycpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9XCJwZXJtYW5lbnRfbGlua19idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1saW5rXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cImNvbnRleHQuc2hvd19kb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ2dyYXBocy5kb3dubG9hZF9yZWNvcmRzJylcIiA6aHJlZj1cImhyZWZfZG93bmxvYWRfcmVjb3Jkc1wiPjxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWZpbGVcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X3BjYXBfZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9kb3dubG9hZCcpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmYXMgZmEtbGcgZmEtZG93bmxvYWRcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LmlzX250b3BfZW50ZXJwcmlzZV9tXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCIgOnRpdGxlPVwiX2kxOG4oJ2RhdGF0YWJsZS5tYW5hZ2Vfc25hcHNob3RzJylcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SYW5nZVBpY2tlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtMTInPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiY29udGV4dC5zaG93X2NoYXJ0XCIgY2xhc3M9XCJjb2wtMTIgbWItMlwiIGlkPVwiY2hhcnQtdnVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgaC0xMDAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hhcnQgcmVmPVwiY2hhcnRcIiBpZD1cImNoYXJ0XzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9kYXRhX3VybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1hcF9jaGFydF9vcHRpb25zPVwiZl9tYXBfY2hhcnRfb3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyb3VuZF90aW1lPVwicm91bmRfdGltZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2Zsb3dzXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6dGFibGVfY29uZmlnX2lkPVwidGFibGVfY29uZmlnX2lkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiIEBsb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiB0b3BfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfb25fb3Blbj1cImdldF9vcGVuX3RvcF90YWJsZV9kcm9wZG93bih0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiZWwgPT4geyB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCI+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgOnNob3c9XCJ0LnNob3dfc3Bpbm5lclwiIHNpemU9XCIxcmVtXCIgY2xhc3M9XCJtZS0xXCI+PC9TcGlubmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtZm9yPVwib3B0IGluIHQub3B0aW9uc1wiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7IGRpc3BsYXk6IGJsb2NrO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90b3BfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50KVwiIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXIgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+e3sgb3B0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gY3VzdG9tX2hlYWRlciAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGJvZHkgLS0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJwcm9wcy5jb250ZXh0LnNob3dfYWNrbm93bGVkZ2VfYWxsIHx8IHByb3BzLmNvbnRleHQuc2hvd19kZWxldGVfYWxsXCIgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJwcm9wcy5jb250ZXh0LnNob3dfYWNrbm93bGVkZ2VfYWxsXCIgaWQ9XCJkdC1idG4tYWNrbm93bGVkZ2VcIiA6ZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PVwiI2R0LWFja25vd2xlZGdlLW1vZGFsXCIgZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhIGZhLXVzZXItY2hlY2tcIj48L2k+IEFja25vd2xlZGdlIEFsZXJ0c1xuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwicHJvcHMuY29udGV4dC5zaG93X2RlbGV0ZV9hbGxcIiBpZD1cImR0LWJ0bi1kZWxldGVcIiA6ZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PVwiI2R0LWRlbGV0ZS1tb2RhbFwiIGRhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYSBmYS10cmFzaFwiPjwvaT4gRGVsZXRlIEFsZXJ0c1xuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGZvb3RlciAtLT5cbiAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQtc2hhZG93IC0tPlxuXG4gICAgICAgIDwvZGl2PiA8IS0tIGRpdiBjb2wgLS0+XG4gICAgPC9kaXY+IDwhLS0gZGl2IHJvdyAtLT5cblxuICAgIDxNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIGlkPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCIgcmVmPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCI+XG4gICAgPC9Nb2RhbFRyYWZmaWNFeHRyYWN0aW9uPlxuXG4gICAgPE1vZGFsU25hcHNob3QgcmVmPVwibW9kYWxfc25hcHNob3RcIiA6Y3NyZj1cImNvbnRleHQuY3NyZlwiPlxuICAgIDwvTW9kYWxTbmFwc2hvdD5cblxuICAgIDxNb2RhbEFja25vbGVkZ2VBbGVydCByZWY9XCJtb2RhbF9hY2tub3dsZWRnZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIEBhY2tub3dsZWRnZT1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+XG4gICAgPC9Nb2RhbEFja25vbGVkZ2VBbGVydD5cblxuICAgIDxNb2RhbERlbGV0ZUFsZXJ0IHJlZj1cIm1vZGFsX2RlbGV0ZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIEBkZWxldGVfYWxlcnQ9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPjwvTW9kYWxEZWxldGVBbGVydD5cblxuICAgIDxNb2RhbEFsZXJ0c0ZpbHRlciA6YWxlcnQ9XCJjdXJyZW50X2FsZXJ0XCIgOnBhZ2U9XCJwYWdlXCIgQGV4Y2x1ZGU9XCJhZGRfZXhjbHVkZVwiIHJlZj1cIm1vZGFsX2FsZXJ0c19maWx0ZXJcIj5cbiAgICA8L01vZGFsQWxlcnRzRmlsdGVyPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfc3RhdHVzX21hbmFnZXIsIG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfc3luYyB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgbnRvcENoYXJ0QXBleCB9IGZyb20gXCIuLi9jb21wb25lbnRzL250b3BDaGFydEFwZXguanNcIjtcbmltcG9ydCB7IERhdGFUYWJsZVJlbmRlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzXCI7XG5pbXBvcnQgRm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWxlcnRzRmlsdGVyIH0gZnJvbSBcIi4vbW9kYWwtYWxlcnRzLWZpbHRlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBY2tub2xlZGdlQWxlcnQgfSBmcm9tIFwiLi9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVBbGVydCB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1hbGVydC52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9zd2l0Y2gudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBwYWdlX2lkID0gXCJwYWdlLWZsb3ctaGlzdG9yaWNhbFwiO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGVfZmxvd3MgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF90cmFmZmljX2V4dHJhY3Rpb24gPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9zbmFwc2hvdCA9IHJlZihudWxsKTtcbmNvbnN0IHJhbmdlX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHBlcm1hbmVudF9saW5rX2J1dHRvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FsZXJ0c19maWx0ZXIgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hY2tub3dsZWRnZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZSA9IHJlZihudWxsKTtcblxuY29uc3QgY3VycmVudF9hbGVydCA9IHJlZihudWxsKTtcbmNvbnN0IGRlZmF1bHRfaWZpZCA9IHByb3BzLmNvbnRleHQuaWZpZDtcbmNvbnN0IHBhZ2UgPSByZWYoXCJcIik7XG5jb25zdCB0YWJsZV9jb25maWdfaWQgPSByZWYoXCJcIik7XG5jb25zdCB0YWJsZV9pZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlPy52YWx1ZSA9PSBudWxsKSB7IHJldHVybiB0YWJsZV9jb25maWdfaWQudmFsdWU7IH1cbiAgICBsZXQgaWQgPSBgJHt0YWJsZV9jb25maWdfaWQudmFsdWV9XyR7c2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlfWA7XG4gICAgcmV0dXJuIGlkO1xufSk7XG5cbmNvbnN0IGhyZWZfZG93bmxvYWRfcmVjb3JkcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvLyBhZGQgaW1wb3NzaWJsZSBpZiBvbiByZWYgdmFyaWFibGUgdG8gcmVsb2FkIHRoaXMgZXhwcmVzc2lvbiBldmVyeSB0aW1lIGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZC52YWx1ZSBjaGFuZ2VcbiAgICBpZiAoY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlIDwgMCkgeyB0aHJvdyBcIm5ldmVyIHJ1blwiOyB9XG4gICAgY29uc3QgZG93bmxvYWRfZW5kcG9pbnQgPSBwcm9wcy5jb250ZXh0LmRvd25sb2FkLmVuZHBvaW50O1xuICAgIGxldCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICBsZXQgY29sdW1ucyA9IHRhYmxlX2Zsb3dzLnZhbHVlLmdldF9jb2x1bW5zX2RlZnMoKTtcbiAgICBsZXQgdmlzaWJsZV9jb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGMpID0+IGMudmlzaWJsZSkubWFwKChjKSA9PiBjLmlkKS5qb2luKFwiLFwiKTtcbiAgICBwYXJhbXMuZm9ybWF0ID0gXCJ0eHRcIjtcbiAgICBwYXJhbXMudmlzaWJsZV9jb2x1bW5zID0gdmlzaWJsZV9jb2x1bW5zO1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICByZXR1cm4gYCR7bG9jYXRpb24ub3JpZ2lufS8ke2Rvd25sb2FkX2VuZHBvaW50fT8ke3VybF9wYXJhbXN9YDtcbn0pO1xuXG5sZXQgY2hhcnRfZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi90cy5sdWFgO1xuY29uc3QgY2hhcnRfdHlwZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvKiBDaGFydCB0eXBlIGRlZmluZWQgdGhlIGpzb24gdGVtcGxhdGUgKGRlZmF1bHRzIGluIGRiX3NlYXJjaC5sdWEpICovXG4gICAgaWYgKHByb3BzLmNvbnRleHQ/LmNoYXJ0X3R5cGUgPT0gXCJ0b3BrLXRpbWVzZXJpZXNcIikge1xuICAgICAgICByZXR1cm4gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuVFNfTElORTtcbiAgICB9XG4gICAgcmV0dXJuIG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX0NPTFVNTjtcbn0pO1xuXG5jb25zdCB0b3BfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKTtcblxuY29uc3Qgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0ID0gcmVmKHt9KTtcbmNvbnN0IHF1ZXJ5X3ByZXNldHMgPSByZWYoW10pO1xuY29uc3QgcXVlcnlfcHJlc2V0c19jb3B5ID0gcmVmKFtdKTtcbmNvbnN0IG1vdW50X3JhbmdlX3BpY2tlciA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IGZsb3dzX2FnZ3JlZ2F0ZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgZmxvd190eXBlX2xhYmVsID0gcmVmKF9pMThuKFwiZGF0YXRhYmxlLmFnZ3JlZ2F0ZWRcIikpO1xuY29uc3QgbWluX3RpbWVfaW50ZXJ2YWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCByb3VuZF90aW1lID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZCA9IHJlZigwKVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBpbml0X3BhcmFtcygpO1xuICAgIGluaXRfdXJsX3BhcmFtcygpO1xuICAgIGF3YWl0IHNldF9xdWVyeV9wcmVzZXRzKCk7XG4gICAgbW91bnRfcmFuZ2VfcGlja2VyLnZhbHVlID0gdHJ1ZTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpO1xuICAgIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG59KTtcblxuZnVuY3Rpb24gaW5pdF9wYXJhbXMoKSB7XG4gICAgcGFnZS52YWx1ZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZS52YWx1ZSA9PSBudWxsKSB7IHBhZ2UudmFsdWUgPSBcIm92ZXJ2aWV3XCI7IH1cbiAgICBjaGFydF9kYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3RzLmx1YWA7XG4gICAgXG4gICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0ge1xuICAgICAgICB2YWx1ZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIiksXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID0gXCJcIjtcbiAgICB9XG4gICAgdGFibGVfY29uZmlnX2lkLnZhbHVlID0gYGZsb3dfaGlzdG9yaWNhbGA7XG4gICAgY29uc3QgYWdncmVnYXRlZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKTtcbiAgICBpZiAoYWdncmVnYXRlZCA9PSBcInRydWVcIikge1xuICAgICAgICB0YWJsZV9jb25maWdfaWQudmFsdWUgPSBgZmxvd19oaXN0b3JpY2FsX2FnZ3JlZ2F0ZWRgO1xuICAgICAgICBmbG93c19hZ2dyZWdhdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQudmFsdWUgPSBcImhvdXJcIjtcbiAgICAgICAgcm91bmRfdGltZS52YWx1ZSA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0X3VybF9wYXJhbXMoKSB7XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImlmaWRcIiwgZGVmYXVsdF9pZmlkKTtcbiAgICB9XG4gICAgLy8gMzAgbWluIGRlZmF1bHRcbiAgICAvLyBjaGlhbWFyZSBzZXQgZGVmYXVsdF90aW1lIGludGVydmFsXG4gICAgaWYgKGZsb3dzX2FnZ3JlZ2F0ZWQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICAgICAgbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGZfY2hlY2tfbGFzdF9taW51dGVfZXBvY2hfZW5kID0gKGVwb2NoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbWluX3RpbWVfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBlcG9jaC5lcG9jaF9lbmQgLSBlcG9jaC5lcG9jaF9iZWdpbiA8IG1pbl90aW1lX2ludGVydmFsO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcG9jaF9pbnRlcnZhbCA9IG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlLCBmX2NoZWNrX2xhc3RfbWludXRlX2Vwb2NoX2VuZCk7XG4gICAgICAgIGlmIChlcG9jaF9pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiA9IG50b3BuZ191dGlsaXR5LnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLCBtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSk7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQgPSBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsIG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2JlZ2luXCIsIGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2VuZFwiLCBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIikgPT0gXCJmbG93XCJcbiAgICAgICAgJiYgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIikgPT0gXCJlbmdhZ2VkXCIpIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIFwiaGlzdG9yaWNhbFwiKTtcbiAgICB9XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0ZWRcIixcImZhbHNlXCIpO1xuICAgIH1cbiAgICBcbn1cblxuZnVuY3Rpb24gZ2V0X2NoYXJ0X2NvbmZpZ19mcm9tX3ByZXNldF9jb25zdChwcmVzZXRfY29uc3QpIHtcbiAgICBsZXQgY2hhcnQgPSBwcmVzZXRfY29uc3Q/LmNoYXJ0O1xuICAgIGlmIChjaGFydCAhPSBudWxsICYmIGNoYXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0WzBdO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9xdWVyeV9wcmVzZXRzKCkge1xuICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3ByZXNldC9jb25zdHMubHVhP3BhZ2U9JHtwYWdlLnZhbHVlfSZhZ2dyZWdhdGVkPSR7Zmxvd3NfYWdncmVnYXRlZC52YWx1ZX1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIFxuICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUgPSByZXNbMF0ubGlzdC5tYXAoKGVsKSA9PiB7XG4gICAgICAgIGxldCBjaGFydF9jb25maWcgPSBnZXRfY2hhcnRfY29uZmlnX2Zyb21fcHJlc2V0X2NvbnN0KGVsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbC5pZCwgLy89PSBudWxsID8gXCJmbG93XCIgOiBlbC5pZCxcbiAgICAgICAgICAgIG5hbWU6IGVsLm5hbWUsXG4gICAgICAgICAgICBjb3VudDogY2hhcnRfY29uZmlnPy5wYXJhbXM/LmNvdW50LFxuICAgICAgICAgICAgY2hhcnRfY29uZmlnOiBjaGFydF9jb25maWcsXG4gICAgICAgICAgICBidWlsdGluOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChyZXMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXNbMV0ubGlzdC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNoYXJ0X2NvbmZpZyA9IGdldF9jaGFydF9jb25maWdfZnJvbV9wcmVzZXRfY29uc3QoZWwpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlbC5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBlbC5uYW1lLFxuICAgICAgICAgICAgICAgIGNvdW50OiBjaGFydF9jb25maWc/LnBhcmFtcz8uY291bnQsXG4gICAgICAgICAgICAgICAgY2hhcnRfY29uZmlnOiBjaGFydF9jb25maWcsXG4gICAgICAgICAgICAgICAgaXNfcHJlc2V0OiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUucHVzaChxdWVyeSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID09IG51bGwgfHwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0gcXVlcnlfcHJlc2V0cy52YWx1ZVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcSA9IHF1ZXJ5X3ByZXNldHMudmFsdWUuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgICAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPSBxIHx8IHF1ZXJ5X3ByZXNldHMudmFsdWVbMF07XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3N5bmMucmVhZHkoZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSk7XG59XG5cbmNvbnN0IGZfbWFwX2NoYXJ0X29wdGlvbnMgPSBhc3luYyAoY2hhcnRfb3B0aW9ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBmb3JtYXR0ZXJfdHlwZSA9IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jaGFydF9jb25maWc/LnVuaXRfbWVhc3VyZTtcbiAgICBpZiAoZm9ybWF0dGVyX3R5cGUgPT0gbnVsbCkge1xuICAgICAgICBmb3JtYXR0ZXJfdHlwZSA9IFwibnVtYmVyXCI7XG4gICAgfVxuICAgIGNoYXJ0X29wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJfdHlwZSk7XG4gICAgcmV0dXJuIGNoYXJ0X29wdGlvbnM7XG59O1xuXG5mdW5jdGlvbiBjaGFuZ2VfZmxvd190eXBlKCkge1xuICAgIC8vIGlmIChmbG93c19hZ2dyZWdhdGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgLy8gXHRudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhbXCJhZ2dyZWdhdGVkXCJdKTtcdFxuICAgIC8vIFx0dGFibGVfY29uZmlnX2lkLnZhbHVlID0gXCJmbG93X2hpc3RvcmljYWxcIjtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vIFx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiYWdncmVnYXRlZFwiLCBcInRydWVcIik7XG4gICAgLy8gXHR0YWJsZV9jb25maWdfaWQudmFsdWUgPSBcImZsb3dfaGlzdG9yaWNhbF9hZ2dyZWdhdGVkXCI7XG4gICAgLy8gfVxuICAgIC8vIHJlZnJlc2hfcGFnZV9jb21wb25lbnRzKHRydWUpO1xuICAgIC8vIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG5cbiAgICAvLyBjdXJyZW50bHkgd2UgY2FuJ3QgcmVmcmVzaCBjb21wb25lbnQgd2l0aG91dCByZWxvYWQgdGhlIHBhZ2UgYmVjYXVzZSB3ZSBuZWVkIHJlZnJlc2ggcHJvcHMuY29udGV4dFxuICAgIGlmIChmbG93c19hZ2dyZWdhdGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKFtcImFnZ3JlZ2F0ZWRcIl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0ZWRcIiwgXCJ0cnVlXCIpO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKSB7XG4gICAgbGV0IHVybCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuc2hvd19jYXJkcyAhPSB0cnVlKSB7IHJldHVybjsgfVxuICAgIHRvcF90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdG9wX3RhYmxlX2FycmF5KFwib3ZlcnZpZXdcIik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2RldGFpbHModG9wLCB0b3BfaW5kZXgpIHtcbiAgICB0b3Auc2hvd19zcGlubmVyID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGlmICh0b3AuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG5ld190b3BfYXJyYXkgPSBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheSh0b3AuaWQsIHRvcCk7XG4gICAgICAgIHRvcC5vcHRpb25zID0gbmV3X3RvcF9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IHRvcC5pZCkub3B0aW9ucztcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgbGV0IGRyb3Bkb3duID0gdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW3RvcF9pbmRleF07XG4gICAgICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICAgIH1cbiAgICB0b3Auc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2FycmF5KGFjdGlvbiwgdG9wKSB7XG4gICAgLy8gdG9wX3RhYmxlLnZhbHVlID0gW107XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3cvdG9wLmx1YT8ke3VybF9wYXJhbXN9JmFjdGlvbj0ke2FjdGlvbn1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQuYWN0aW9uIHx8IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIHNob3dfc3Bpbm5lcjogZmFsc2UsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl90b3BfdGFibGVfZHJvcGRvd24gPSAodG9wLCB0b3BfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKGQpID0+IHtcbiAgICAgICAgbG9hZF90b3BfdGFibGVfZGV0YWlscyh0b3AsIHRvcF9pbmRleCk7XG4gICAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpIHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShcInJhbmdlX3BpY2tlclwiKTtcbiAgICBpZiAocHJvcHMuY29udGV4dC5zaG93X2NoYXJ0KSB7XG4gICAgICAgIGNoYXJ0LnZhbHVlLnJlZ2lzdGVyX3N0YXR1cygpO1xuICAgIH1cbiAgICAvL3VwZGF0ZURvd25sb2FkQnV0dG9uKCk7XG4gICAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UocGFnZS52YWx1ZSwgKG5ld19zdGF0dXMpID0+IHtcbiAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICAgICAgdGFibGVfZmxvd3MudmFsdWUucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xuXHRjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQudmFsdWUgKz0gMTtcbiAgICB9LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uX3RhYmxlX2xvYWRlZCgpIHtcbiAgICByZWdpc3Rlcl90YWJsZV9mbG93c19ldmVudHMoKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJfdGFibGVfZmxvd3NfZXZlbnRzKCkge1xuICAgIGxldCBqcXVlcnlfdGFibGVfZmxvd3MgPSAkKGAjJHt0YWJsZV9pZC52YWx1ZX1gKTtcbiAgICBqcXVlcnlfdGFibGVfZmxvd3Mub24oJ2NsaWNrJywgYGEudGFnLWZpbHRlcmAsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGFkZF90YWJsZV9yb3dfZmlsdGVyKGUsICQodGhpcykpO1xuICAgIH0pO1xufVxuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBodG1sX3JlZiA9ICcnO1xuICAgIGxldCBsb2NhdGlvbiA9ICcnO1xuICAgIGNvbnN0IGZfcHJpbnRfYXNuID0gKGtleSwgYXNuLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGFzbiAhPT0gdW5kZWZpbmVkICYmIGFzbi52YWx1ZSAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgZGF0YS10YWctdmFsdWU9JyR7YXNuLnZhbHVlfScgdGl0bGU9JyR7YXNuLnRpdGxlfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz4ke2Fzbi5sYWJlbH08L2E+YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuICAgIGNvbnN0IGZfcHJpbnRfbGF0ZW5jeSA9IChrZXksIGxhdGVuY3ksIHJvdykgPT4ge1xuICAgICAgICBpZiAobGF0ZW5jeSA9PSBudWxsIHx8IGxhdGVuY3kgPT0gMCkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgZGF0YS10YWctdmFsdWU9JyR7bGF0ZW5jeX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtOdG9wVXRpbHMubXNlY1RvVGltZShsYXRlbmN5KX08L2E+YDtcbiAgICB9O1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJmaXJzdF9zZWVuXCI6IChmaXJzdF9zZWVuLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChmaXJzdF9zZWVuICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0X3NlZW4udGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJsN3Byb3RvXCI6IChwcm90bywgcm93KSA9PiB7XG4gICAgICAgICAgICBsZXQgY29uZmlkZW5jZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAocHJvdG8uY29uZmlkZW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBwcm90by5jb25maWRlbmNlO1xuICAgICAgICAgICAgICAgICh0aXRsZSA9PSBcIkRQSVwiKSA/IGNvbmZpZGVuY2UgPSBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zdWNjZXNzXCIgdGl0bGU9XCIke3RpdGxlfVwiPiR7dGl0bGV9PC9zcGFuPmAgOiBjb25maWRlbmNlID0gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctd2FybmluZ1wiIHRpdGxlPVwiJHt0aXRsZX1cIj4ke3RpdGxlfTwvc3Bhbj5gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2w3cHJvdG8nLCBwcm90by52YWx1ZSwgcHJvdG8ubGFiZWwpICsgXCIgXCIgKyBgJHtjb25maWRlbmNlfWA7XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXNuXCI6ICAgICAoYXNuLCByb3cpICAgICA9PiBmX3ByaW50X2FzbihcImFzblwiLCAgICAgYXNuLCAgICAgcm93KSxcbiAgICAgICAgXCJjbGlfYXNuXCI6IChjbGlfYXNuLCByb3cpID0+IGZfcHJpbnRfYXNuKFwiY2xpX2FzblwiLCBjbGlfYXNuLCByb3cpLFxuICAgICAgICBcInNydl9hc25cIjogKHNydl9hc24sIHJvdykgPT4gZl9wcmludF9hc24oXCJzcnZfYXNuXCIsIHNydl9hc24sIHJvdyksXG4gICAgICAgIFwiZmxvd19yaXNrXCI6IChmbG93X3Jpc2tzLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChmbG93X3Jpc2tzID09IG51bGwpIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgICAgIGxldCByZXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbG93X3Jpc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvd19yaXNrID0gZmxvd19yaXNrc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbG93X3Jpc2tfbGFiZWwgPSAoZmxvd19yaXNrLmxhYmVsIHx8IGZsb3dfcmlzay52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvd19yaXNrX2hlbHAgPSAoZmxvd19yaXNrLmhlbHApO1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAke2Zsb3dfcmlza19sYWJlbH0gJHtmbG93X3Jpc2tfaGVscH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMuam9pbignLCAnKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGlfbndfbGF0ZW5jeVwiOiAoY2xpX253X2xhdGVuY3ksIHJvdykgPT4gZl9wcmludF9sYXRlbmN5KFwiY2xpX253X2xhdGVuY3lcIiwgY2xpX253X2xhdGVuY3ksIHJvdyksXG4gICAgICAgIFwic3J2X253X2xhdGVuY3lcIjogKHNydl9ud19sYXRlbmN5LCByb3cpID0+IGZfcHJpbnRfbGF0ZW5jeShcInNydl9ud19sYXRlbmN5XCIsIHNydl9ud19sYXRlbmN5LCByb3cpLFxuICAgICAgICBcImluZm9cIjogKGluZm8sIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKGluZm8gPT0gbnVsbCkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PSdpbmZvJyBkYXRhLXRhZy12YWx1ZT0nJHtpbmZvLnRpdGxlfScgdGl0bGU9JyR7aW5mby50aXRsZX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtpbmZvLmxhYmVsfTwvYT5gO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgY29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChjKSA9PiBwcm9wcy5jb250ZXh0Py52aXNpYmxlX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXSAhPSBmYWxzZSk7XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5pc19wcmVzZXQgJiYgY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGFkZCBhY3Rpb24gYnV0dG9uIHRoYXQgaXMgdGhlIGZpcnN0IGJ1dHRvblxuICAgICAgICBjb2x1bW5zID0gW2NvbHVtbnNbMF1dLmNvbmNhdChwcm9wcy5jb250ZXh0LmNvbHVtbnNfZGVmKTtcbiAgICB9XG5cbiAgICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICAgICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgICAgICAgICBpbmZvOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19pbmZvLFxuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfaGlzdG9yaWNhbCxcbiAgICAgICAgICAgICAgICBmbG93X2FsZXJ0czogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfYWxlcnRzLFxuICAgICAgICAgICAgICAgIHBjYXBfZG93bmxvYWQ6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X3BjYXBfZG93bmxvYWQsXG4gICAgICAgICAgICAgICAgcm93X2RhdGE6IHByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV94bCAmJiBmbG93c19hZ2dyZWdhdGVkLnZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXMgbm90IGRlZmluZWQgaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlX2RpY3RbYi5pZF0gIT0gbnVsbCAmJiB2aXNpYmxlX2RpY3RbYi5pZF0gPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jbGFzcy5wdXNoKFwibGluay1kaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbnMpO1xuICAgIHJldHVybiBjb2x1bW5zO1xufTtcblxuY29uc3QgYWRkX3RhYmxlX3Jvd19maWx0ZXIgPSAoZSwgYSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBsZXQga2V5ID0gdW5kZWZpbmVkO1xuICAgIGxldCBkaXNwbGF5VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJlYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3BlcmF0b3IgPSAnZXEnO1xuXG4gICAgLy8gUmVhZCB0YWcga2V5IGFuZCB2YWx1ZSBmcm9tIHRoZSA8YT4gaXRzZWxmIGlmIHByb3ZpZGVkXG4gICAgaWYgKGEuZGF0YSgndGFnS2V5JykgIT0gdW5kZWZpbmVkKSBrZXkgPSBhLmRhdGEoJ3RhZ0tleScpO1xuICAgIGlmIChhLmRhdGEoJ3RhZ1JlYWx2YWx1ZScpICE9IHVuZGVmaW5lZCkgcmVhbFZhbHVlID0gYS5kYXRhKCd0YWdSZWFsdmFsdWUnKTtcbiAgICBlbHNlIGlmIChhLmRhdGEoJ3RhZ1ZhbHVlJykgIT0gdW5kZWZpbmVkKSByZWFsVmFsdWUgPSBhLmRhdGEoJ3RhZ1ZhbHVlJyk7XG4gICAgaWYgKGEuZGF0YSgndGFnT3BlcmF0b3InKSAhPSB1bmRlZmluZWQpIG9wZXJhdG9yID0gYS5kYXRhKCd0YWdPcGVyYXRvcicpO1xuXG4gICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgdmFsdWU6IHJlYWxWYWx1ZSxcbiAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgIH07XG4gICAgYWRkX2ZpbHRlcihmaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRfdG9wX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgaWQ6IG9wdC5rZXksXG4gICAgICAgIHZhbHVlOiBvcHQudmFsdWUsXG4gICAgICAgIG9wZXJhdG9yOiBvcHQub3BlcmF0b3IsXG4gICAgfTtcbiAgICBhZGRfZmlsdGVyKGZpbHRlcik7XG59XG5cbmZ1bmN0aW9uIGFkZF9maWx0ZXIoZmlsdGVyKSB7XG4gICAgaWYgKHJhbmdlX3BpY2tlci52YWx1ZS5pc19maWx0ZXJfZGVmaW5lZChmaWx0ZXIpKSB7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIGZpbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIFwiXCIpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmlkLCBgJHtmaWx0ZXIudmFsdWV9OyR7ZmlsdGVyLm9wZXJhdG9yfWApO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuICAgIH1cbn1cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG5mdW5jdGlvbiBjbGlja19uYXZiYXJfaXRlbShpdGVtKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgaXRlbS5wYWdlX25hbWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlcihhbGVydCkge1xuICAgIGN1cnJlbnRfYWxlcnQudmFsdWUgPSBhbGVydDtcbiAgICBtb2RhbF9hbGVydHNfZmlsdGVyLnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3Blcm1hbmVudF9saW5rKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJChwZXJtYW5lbnRfbGlua19idXR0b24udmFsdWUpO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBwbGFjZWhvbGRlci52YWx1ZSA9IGxvY2F0aW9uLmhyZWY7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG4gICAgcGxhY2Vob2xkZXIuc2VsZWN0KCk7XG5cbiAgICAvLyBjb3B5IHRoZSB1cmwgdG8gdGhlIGNsaXBib2FyZCBmcm9tIHRoZSBwbGFjZWhvbGRlclxuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICAkdGhpcy5hdHRyKFwidGl0bGVcIiwgYCR7X2kxOG4oJ2NvcGllZCcpfSFgKVxuICAgICAgICAudG9vbHRpcChcImRpc3Bvc2VcIilcbiAgICAgICAgLnRvb2x0aXAoKVxuICAgICAgICAudG9vbHRpcChcInNob3dcIik7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfc25hcHNob3QoKSB7XG4gICAgbW9kYWxfc25hcHNob3QudmFsdWUuc2hvdygpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhZGRfZXhjbHVkZShwYXJhbXMpIHtcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNvbnRleHQuY3NyZjtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvYWxlcnQvZXhjbHVzaW9uLmx1YWA7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy90b2RvIHJlbG9hZFRhYmxlKCR0YWJsZSwgdXJsX3BhcmFtcyk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgeyB0ZXh0X2h0bWw6IF9pMThuKCdjaGVja19leGNsdXNpb24uZGlzYWJsZV93YXJuJyksIHR5cGU6IFwiYWxlcnQtaW5mb1wiLCB0aW1lb3V0OiAyIH0pO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVmcmVzaF9wYWdlX2NvbXBvbmVudHMobm90X3JlZnJlc2hfdGFibGUpIHtcbiAgICBsZXQgdCA9IHRhYmxlX2Zsb3dzLnZhbHVlO1xuICAgIGxldCBjID0gY2hhcnQudmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICghbm90X3JlZnJlc2hfdGFibGUpIHtcbiAgICAgICAgICAgIHQucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGMudXBkYXRlX2NoYXJ0KCk7XG4gICAgfSwgMSAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2luZm9cIjogY2xpY2tfYnV0dG9uX2luZm8sXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Zsb3dfYWxlcnRzXCI6IGNsaWNrX2J1dHRvbl9mbG93X2FsZXJ0cyxcbiAgICAgICAgXCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93c1wiOiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyxcbiAgICAgICAgXCJjbGlja19idXR0b25fcGNhcF9kb3dubG9hZFwiOiBjbGlja19idXR0b25fcGNhcF9kb3dubG9hZCxcbiAgICAgICAgXCJjbGlja19idXR0b25fZmxvd3NcIjogY2xpY2tfYnV0dG9uX2Zsb3dzLFxuICAgIH07XG4gICAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2luZm8oZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGNvbnN0IGhyZWYgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9mbG93X2RldGFpbHMubHVhP3Jvd19pZD0ke2Zsb3cucm93aWR9JnRzdGFtcD0ke2Zsb3cudHN0YW1wfSZpbnN0YW5jZV9uYW1lPSR7Zmxvdy5OVE9QTkdfSU5TVEFOQ0VfTkFNRX1gO1xuICAgIHdpbmRvdy5vcGVuKGhyZWYsIFwiX2JsYW5rXCIpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fcGNhcF9kb3dubG9hZChldmVudCkge1xuICAgIGNvbnN0IGZsb3cgPSBldmVudC5yb3c7XG4gICAgY29uc3QgZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBmbG93Py5maWx0ZXI/LmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGZsb3c/LmZpbHRlcj8uZXBvY2hfZW5kIH07XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coZmxvdz8uZmlsdGVyPy5icGYsIGVwb2NoX2ludGVydmFsKTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MoZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGxldCBmaWx0ZXJzX3BhcmFtc19vYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4gZmxvdykge1xuICAgICAgICBsZXQgZmlsdGVyX2tleSA9IGtleTtcbiAgICAgICAgaWYgKGZsb3dba2V5XS50YWdfa2V5ICE9IG51bGwgJiYgZmxvd1trZXldLnRhZ19rZXkgIT0gXCJcIikge1xuICAgICAgICAgICAgZmlsdGVyX2tleSA9IGZsb3dba2V5XS50YWdfa2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbG93W2tleV0udmFsdWUgPT0gbnVsbCAmJiBmbG93W2tleV0udmFsdWUgIT0gXCJcIikgeyBjb250aW51ZTsgfVxuICAgICAgICBsZXQgZmlsdGVyID0gYCR7Zmxvd1trZXldLnZhbHVlfTtlcWA7XG4gICAgICAgIGZpbHRlcnNfcGFyYW1zX29iamVjdFtmaWx0ZXJfa2V5XSA9IGZpbHRlcjtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIFwiXCIpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX3BhcmFtc19vYmplY3QpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9mbG93X2FsZXJ0cyhldmVudCkge1xuICAgIGNvbnN0IGZsb3cgPSBldmVudC5yb3c7XG4gICAgaWYgKGZsb3cuYWxlcnRzX3VybCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGZsb3cuYWxlcnRzX3VybCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZmxvd3MoZXZlbnQpIHtcbiAgICBjb25zdCByb3dfZGF0YSA9IGV2ZW50LnJvdztcbiAgICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvd19kYXRhLmZpbHRlci5lcG9jaF9iZWdpbjtcbiAgICBjb25zdCBlcG9jaF9lbmQgPSByb3dfZGF0YS5maWx0ZXIuZXBvY2hfZW5kO1xuICAgIGNvbnN0IGNsaV9pcCA9IHJvd19kYXRhLmZsb3cuY2xpX2lwLnZhbHVlO1xuICAgIGNvbnN0IHNydl9pcCA9IHJvd19kYXRhLmZsb3cuc3J2X2lwLnZhbHVlO1xuICAgIGNvbnN0IHNydl9wb3J0ID0gcm93X2RhdGEuZmxvdy5zcnZfcG9ydDtcbiAgICBjb25zdCBwcm9iZV9pcCA9IHJvd19kYXRhLnByb2JlX2lwLnZhbHVlO1xuICAgIGNvbnN0IGluc3RhbmNlX25hbWUgPSByb3dfZGF0YS5OVE9QTkdfSU5TVEFOQ0VfTkFNRTtcblxuICAgIGNvbnN0IHZsYW5faWQgPSByb3dfZGF0YS52bGFuX2lkLnZhbHVlO1xuICAgIGxldCBhc192bGFuID0gdmxhbl9pZCAhPSAwO1xuXG4gICAgY29uc3Qgb3V0cHV0X3NubXAgPSByb3dfZGF0YS5vdXRwdXRfc25tcC52YWx1ZTtcbiAgICBsZXQgYXNfb3V0cHV0X3NubXAgPSBvdXRwdXRfc25tcCAhPSAwO1xuICAgIGNvbnN0IGlucHV0X3NubXAgPSByb3dfZGF0YS5pbnB1dF9zbm1wLnZhbHVlO1xuICAgIGxldCBhc19pbnB1dF9zbm1wID0gaW5wdXRfc25tcCAhPSAwO1xuXG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/YWdncmVnYXRlZD1mYWxzZSZlcG9jaF9iZWdpbj0ke2Vwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtlcG9jaF9lbmR9JmNsaV9pcD0ke2NsaV9pcH07ZXEmc3J2X2lwPSR7c3J2X2lwfTtlcSZzcnZfcG9ydD0ke3Nydl9wb3J0fTtlcSZwcm9iZV9pcD0ke3Byb2JlX2lwfTtlcSZpbnN0YW5jZV9uYW1lPSR7aW5zdGFuY2VfbmFtZX1gO1xuICAgIGlmIChhc192bGFuKSB7XG4gICAgICAgIHVybCA9IHVybCArIGAmdmxhbl9pZD0ke3ZsYW5faWR9O2VxYDtcbiAgICB9XG5cbiAgICBpZiAoYXNfaW5wdXRfc25tcCkge1xuICAgICAgICB1cmwgPSB1cmwgKyBgJmlucHV0X3NubXA9JHtpbnB1dF9zbm1wfTtlcWA7XG4gICAgfVxuXG4gICAgaWYgKGFzX291dHB1dF9zbm1wKSB7XG4gICAgICAgIHVybCA9IHVybCArIGAmb3V0cHV0X3NubXA9JHtvdXRwdXRfc25tcH07ZXFgO1xuICAgIH1cblxuICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSB7XG4gICAgcmV0dXJuIGAke3BhZ2VfaWR9X3F1ZXJ5X3ByZXNldHNgO1xufVxuXG5mdW5jdGlvbiBnZXRfc3RhdHVzX3ZpZXcoKSB7XG4gICAgbGV0IHN0YXR1c192aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG4gICAgaWYgKHN0YXR1c192aWV3ID09IG51bGwgfHwgc3RhdHVzX3ZpZXcgPT0gXCJcIikge1xuICAgICAgICBzdGF0dXNfdmlldyA9IFwiaGlzdG9yaWNhbFwiO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHVzX3ZpZXc7XG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXHQ8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJSBoZWlnaHQ6MzgwcHg7XCIgY2xhc3M9XCJ0ZXh0LWVuZCBtYi0yXCI+XG5cdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBmb3JtLWNvbnRyb2wtc21cIiB2LWZvcj1cIihpdGVtLCBpKSBpbiAgdGltZXNlcmllc19saXN0IFwiPlxuXHRcdFx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBhbGlnbi1taWRkbGUgbXQtMFwiIEBjbGljaz1cImNoYW5nZV92aXNpYmlsaXR5KCFpdGVtLmNoZWNrZWQsIGkpXCJcblx0XHRcdFx0OmNoZWNrZWQ9XCJpdGVtLmNoZWNrZWRcIiBzdHlsZT1cImJvcmRlci1jb2xvcjogIzBkNmVmZDtcIiA6c3R5bGU9XCJ7IGJhY2tncm91bmRDb2xvcjogaXRlbS5jb2xvciB9XCI+XG5cdFx0XHR7eyBpdGVtLm5hbWUgfX1cblx0XHQ8L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwiZGlzYWJsZV9wb2ludGVyX2V2ZW50cyA9PSB0cnVlXCIgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7XCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cblx0PGRpdiB2LWVsc2UgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIHJlZj1cImNoYXJ0XCI+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXHRjb21wb25lbnRzOiB7XG5cdH0sXG5cdHByb3BzOiB7XG5cdFx0aWQ6IFN0cmluZyxcblx0XHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdFx0cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZTogQm9vbGVhbixcblx0XHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdFx0Z2V0X3BhcmFtc191cmxfcmVxdWVzdDogRnVuY3Rpb24sXG5cdFx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcblx0XHRkaXNhYmxlX3BvaW50ZXJfZXZlbnRzOiBCb29sZWFuLFxuXHR9LFxuXHRlbWl0czogW1wiYXBwbHlcIiwgXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjaGFydF9yZWxvYWRlZFwiLCBcInpvb21cIl0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cblx0Y3JlYXRlZCgpIHsgfSxcblx0YmVmb3JlVW5tb3VudCgpIHsgfSxcblx0ZGF0YSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhcnQ6IG51bGwsXG5cdFx0XHRjaGFydF9vcHRpb25zOiBudWxsLFxuXHRcdFx0ZnJvbV96b29tOiBmYWxzZSxcblx0XHRcdHRpbWVzZXJpZXNfdmlzaWJpbGl0eTogbnVsbCxcblx0XHRcdHRpbWVzZXJpZXNfbGlzdDogW10sXG5cdFx0XHQvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHRcdH07XG5cdH0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuXHRhc3luYyBtb3VudGVkKCkge1xuXHRcdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRcdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHR9LFxuXHRtZXRob2RzOiB7XG5cdFx0aW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0XHRsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0aWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyX3N0YXR1cyhzdGF0dXMpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5kcmF3X2NoYXJ0KHVybF9yZXF1ZXN0KTtcblx0XHR9LFxuXHRcdGdldF9pbWFnZTogZnVuY3Rpb24gKGltYWdlKSB7XG5cdFx0XHRyZXR1cm4gRHlncmFwaC5FeHBvcnQuYXNQTkcodGhpcy5jaGFydCwgaW1hZ2UsIHRoaXMuJHJlZnNbXCJjaGFydFwiXSk7XG5cdFx0fSxcblx0XHRjaGFuZ2VfdmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2libGUsIGlkKSB7XG5cdFx0XHRpZiAodGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdW1wiY2hlY2tlZFwiXSA9IHZpc2libGVcblx0XHRcdFx0dGhpcy5jaGFydC5zZXRWaXNpYmlsaXR5KGlkLCB2aXNpYmxlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlZ2lzdGVyX3N0YXR1czogZnVuY3Rpb24gKHN0YXR1cykge1xuXHRcdFx0bGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0dGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHRcdFx0XHQvL3JldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0XHRcdGlmIChuZXdfdXJsX3JlcXVlc3QgPT0gdXJsX3JlcXVlc3QpIHtcblx0XHRcdFx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0fSxcblx0XHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGxldCB1cmxfcGFyYW1zO1xuXHRcdFx0aWYgKHRoaXMuJHByb3BzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHRcdFx0XHRzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgJHt0aGlzLiRwcm9wcy5iYXNlX3VybF9yZXF1ZXN0IHx8ICcnfT8ke3VybF9wYXJhbXN9YDtcblx0XHR9LFxuXHRcdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gbnVsbDtcblx0XHRcdGNvbnN0IGRhdGVfZm9ybWF0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuZ2V0X2RhdGVfZm9ybWF0KGZhbHNlLCB0aGlzLiRwcm9wcy5jc3JmLCBodHRwX3ByZWZpeCk7XG5cblx0XHRcdC8qIFJldHJpZXZlIHRoZSBjaGFydCBvcHRpb25zICovXG5cdFx0XHRpZiAodGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdH1cblx0XHRcdC8qIFNldCB0aGUgZGF0ZSBkZXBlbmRpbmcgb24gdGhlIHNlcnZlciBkYXRlICovXG5cdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC5heGlzTGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRhdGUsIGRhdGVfZm9ybWF0KTtcblx0XHRcdH07XG5cdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZGF0ZSwgZGF0ZV9mb3JtYXQpO1xuXHRcdFx0fTtcblx0XHRcdGNoYXJ0X29wdGlvbnMuYXhlcy54LmF4aXNMYWJlbFdpZHRoID0gOTA7XG5cdFx0XHQvKiBFbWl0IHRoZSBjaGFydF9yZWxvYWRlZCBldmVudCAqL1xuXHRcdFx0dGhpcy4kZW1pdCgnY2hhcnRfcmVsb2FkZWQnLCBjaGFydF9vcHRpb25zKTtcblx0XHRcdHJldHVybiBjaGFydF9vcHRpb25zO1xuXHRcdH0sXG5cdFx0ZHJhd19jaGFydDogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGNoYXJ0X29wdGlvbnMuZGF0YSB8fCBbXTtcblx0XHRcdGNoYXJ0X29wdGlvbnMuZGF0YSA9IG51bGw7XG5cdFx0XHRjaGFydF9vcHRpb25zLnpvb21DYWxsYmFjayA9IHRoaXMub25fem9vbWVkO1xuXHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QgPSBbXTtcblx0XHRcdGxldCB2aXNpYmlsaXR5ID0gW107XG5cdFx0XHRsZXQgaWQgPSAwO1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gY2hhcnRfb3B0aW9ucy5zZXJpZXMpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QucHVzaCh7IG5hbWU6IGtleSwgY2hlY2tlZDogdHJ1ZSwgaWQ6IGlkLCBjb2xvcjogY2hhcnRfb3B0aW9ucy5jb2xvcnNbaWRdICsgXCIhaW1wb3J0YW50XCIgfSk7XG5cdFx0XHRcdGlkID0gaWQgKyAxO1xuXHRcdFx0XHR2aXNpYmlsaXR5LnB1c2godHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2hhcnQgPSBuZXcgRHlncmFwaCh0aGlzLiRyZWZzW1wiY2hhcnRcIl0sIGRhdGEsIGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0OiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X29wdGlvbnM6IGZ1bmN0aW9uIChjaGFydF9vcHRpb25zKSB7XG5cdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X3NlcmllczogZnVuY3Rpb24gKHNlcmllcykge1xuXHRcdFx0aWYgKHNlcmllcyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdFx0dGhpcy5jaGFydC51cGRhdGVPcHRpb25zKHsgJ2ZpbGUnOiBzZXJpZXMgfSk7XG5cdFx0fSxcblx0XHRvbl96b29tZWQ6IGZ1bmN0aW9uIChtaW5EYXRlLCBtYXhEYXRlKSB7XG5cdFx0XHR0aGlzLmZyb21fem9vbSA9IHRydWU7XG5cdFx0XHRjb25zdCBiZWdpbiA9IG1vbWVudChtaW5EYXRlKTtcblx0XHRcdGNvbnN0IGVuZCA9IG1vbWVudChtYXhEYXRlKTtcblx0XHRcdC8vIHRoZSB0aW1lc3RhbXBzIGFyZSBpbiBtaWxsaXNlY29uZHMsIGNvbnZlcnQgdGhlbSBpbnRvIHNlY29uZHNcblx0XHRcdGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdFx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgbmV3X2Vwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdFx0XHR0aGlzLiRlbWl0KCd6b29tJywgbmV3X2Vwb2NoX3N0YXR1cyk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXHQ8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJSBoZWlnaHQ6MzgwcHg7XCIgY2xhc3M9XCJ0ZXh0LWVuZCBtYi0yXCI+XG5cdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBmb3JtLWNvbnRyb2wtc21cIiB2LWZvcj1cIihpdGVtLCBpKSBpbiAgdGltZXNlcmllc19saXN0IFwiPlxuXHRcdFx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBhbGlnbi1taWRkbGUgbXQtMFwiIEBjbGljaz1cImNoYW5nZV92aXNpYmlsaXR5KCFpdGVtLmNoZWNrZWQsIGkpXCJcblx0XHRcdFx0OmNoZWNrZWQ9XCJpdGVtLmNoZWNrZWRcIiBzdHlsZT1cImJvcmRlci1jb2xvcjogIzBkNmVmZDtcIiA6c3R5bGU9XCJ7IGJhY2tncm91bmRDb2xvcjogaXRlbS5jb2xvciB9XCI+XG5cdFx0XHR7eyBpdGVtLm5hbWUgfX1cblx0XHQ8L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwiZGlzYWJsZV9wb2ludGVyX2V2ZW50cyA9PSB0cnVlXCIgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7XCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cblx0PGRpdiB2LWVsc2UgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIHJlZj1cImNoYXJ0XCI+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXHRjb21wb25lbnRzOiB7XG5cdH0sXG5cdHByb3BzOiB7XG5cdFx0aWQ6IFN0cmluZyxcblx0XHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdFx0cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZTogQm9vbGVhbixcblx0XHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdFx0Z2V0X3BhcmFtc191cmxfcmVxdWVzdDogRnVuY3Rpb24sXG5cdFx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcblx0XHRkaXNhYmxlX3BvaW50ZXJfZXZlbnRzOiBCb29sZWFuLFxuXHR9LFxuXHRlbWl0czogW1wiYXBwbHlcIiwgXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjaGFydF9yZWxvYWRlZFwiLCBcInpvb21cIl0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cblx0Y3JlYXRlZCgpIHsgfSxcblx0YmVmb3JlVW5tb3VudCgpIHsgfSxcblx0ZGF0YSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhcnQ6IG51bGwsXG5cdFx0XHRjaGFydF9vcHRpb25zOiBudWxsLFxuXHRcdFx0ZnJvbV96b29tOiBmYWxzZSxcblx0XHRcdHRpbWVzZXJpZXNfdmlzaWJpbGl0eTogbnVsbCxcblx0XHRcdHRpbWVzZXJpZXNfbGlzdDogW10sXG5cdFx0XHQvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHRcdH07XG5cdH0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuXHRhc3luYyBtb3VudGVkKCkge1xuXHRcdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRcdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHR9LFxuXHRtZXRob2RzOiB7XG5cdFx0aW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0XHRsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0aWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyX3N0YXR1cyhzdGF0dXMpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5kcmF3X2NoYXJ0KHVybF9yZXF1ZXN0KTtcblx0XHR9LFxuXHRcdGdldF9pbWFnZTogZnVuY3Rpb24gKGltYWdlKSB7XG5cdFx0XHRyZXR1cm4gRHlncmFwaC5FeHBvcnQuYXNQTkcodGhpcy5jaGFydCwgaW1hZ2UsIHRoaXMuJHJlZnNbXCJjaGFydFwiXSk7XG5cdFx0fSxcblx0XHRjaGFuZ2VfdmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2libGUsIGlkKSB7XG5cdFx0XHRpZiAodGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdW1wiY2hlY2tlZFwiXSA9IHZpc2libGVcblx0XHRcdFx0dGhpcy5jaGFydC5zZXRWaXNpYmlsaXR5KGlkLCB2aXNpYmxlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlZ2lzdGVyX3N0YXR1czogZnVuY3Rpb24gKHN0YXR1cykge1xuXHRcdFx0bGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0dGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHRcdFx0XHQvL3JldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0XHRcdGlmIChuZXdfdXJsX3JlcXVlc3QgPT0gdXJsX3JlcXVlc3QpIHtcblx0XHRcdFx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0fSxcblx0XHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGxldCB1cmxfcGFyYW1zO1xuXHRcdFx0aWYgKHRoaXMuJHByb3BzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHRcdFx0XHRzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgJHt0aGlzLiRwcm9wcy5iYXNlX3VybF9yZXF1ZXN0IHx8ICcnfT8ke3VybF9wYXJhbXN9YDtcblx0XHR9LFxuXHRcdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gbnVsbDtcblx0XHRcdGNvbnN0IGRhdGVfZm9ybWF0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuZ2V0X2RhdGVfZm9ybWF0KGZhbHNlLCB0aGlzLiRwcm9wcy5jc3JmLCBodHRwX3ByZWZpeCk7XG5cblx0XHRcdC8qIFJldHJpZXZlIHRoZSBjaGFydCBvcHRpb25zICovXG5cdFx0XHRpZiAodGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdH1cblx0XHRcdC8qIFNldCB0aGUgZGF0ZSBkZXBlbmRpbmcgb24gdGhlIHNlcnZlciBkYXRlICovXG5cdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC5heGlzTGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRhdGUsIGRhdGVfZm9ybWF0KTtcblx0XHRcdH07XG5cdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZGF0ZSwgZGF0ZV9mb3JtYXQpO1xuXHRcdFx0fTtcblx0XHRcdGNoYXJ0X29wdGlvbnMuYXhlcy54LmF4aXNMYWJlbFdpZHRoID0gOTA7XG5cdFx0XHQvKiBFbWl0IHRoZSBjaGFydF9yZWxvYWRlZCBldmVudCAqL1xuXHRcdFx0dGhpcy4kZW1pdCgnY2hhcnRfcmVsb2FkZWQnLCBjaGFydF9vcHRpb25zKTtcblx0XHRcdHJldHVybiBjaGFydF9vcHRpb25zO1xuXHRcdH0sXG5cdFx0ZHJhd19jaGFydDogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGNoYXJ0X29wdGlvbnMuZGF0YSB8fCBbXTtcblx0XHRcdGNoYXJ0X29wdGlvbnMuZGF0YSA9IG51bGw7XG5cdFx0XHRjaGFydF9vcHRpb25zLnpvb21DYWxsYmFjayA9IHRoaXMub25fem9vbWVkO1xuXHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QgPSBbXTtcblx0XHRcdGxldCB2aXNpYmlsaXR5ID0gW107XG5cdFx0XHRsZXQgaWQgPSAwO1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gY2hhcnRfb3B0aW9ucy5zZXJpZXMpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QucHVzaCh7IG5hbWU6IGtleSwgY2hlY2tlZDogdHJ1ZSwgaWQ6IGlkLCBjb2xvcjogY2hhcnRfb3B0aW9ucy5jb2xvcnNbaWRdICsgXCIhaW1wb3J0YW50XCIgfSk7XG5cdFx0XHRcdGlkID0gaWQgKyAxO1xuXHRcdFx0XHR2aXNpYmlsaXR5LnB1c2godHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2hhcnQgPSBuZXcgRHlncmFwaCh0aGlzLiRyZWZzW1wiY2hhcnRcIl0sIGRhdGEsIGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0OiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X29wdGlvbnM6IGZ1bmN0aW9uIChjaGFydF9vcHRpb25zKSB7XG5cdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X3NlcmllczogZnVuY3Rpb24gKHNlcmllcykge1xuXHRcdFx0aWYgKHNlcmllcyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdFx0dGhpcy5jaGFydC51cGRhdGVPcHRpb25zKHsgJ2ZpbGUnOiBzZXJpZXMgfSk7XG5cdFx0fSxcblx0XHRvbl96b29tZWQ6IGZ1bmN0aW9uIChtaW5EYXRlLCBtYXhEYXRlKSB7XG5cdFx0XHR0aGlzLmZyb21fem9vbSA9IHRydWU7XG5cdFx0XHRjb25zdCBiZWdpbiA9IG1vbWVudChtaW5EYXRlKTtcblx0XHRcdGNvbnN0IGVuZCA9IG1vbWVudChtYXhEYXRlKTtcblx0XHRcdC8vIHRoZSB0aW1lc3RhbXBzIGFyZSBpbiBtaWxsaXNlY29uZHMsIGNvbnZlcnQgdGhlbSBpbnRvIHNlY29uZHNcblx0XHRcdGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdFx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgbmV3X2Vwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdFx0XHR0aGlzLiRlbWl0KCd6b29tJywgbmV3X2Vwb2NoX3N0YXR1cyk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2PlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTExXCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiID5cblx0PGI+e3t0aXRsZX19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTFcIiB2LWlmPVwic2hvd19kZWxldGVfYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX3RzXCI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBib3JkZXJcIj5cblx0PHNwYW4+XG5cdCAgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+XG5cdDwvc3Bhbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gdGltZXNlcmllc1wiIGNsYXNzPVwicm93IGN1c3RvbS1tcyBtZS0yIG10LTFcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC01XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucmF3XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+e3tpdGVtLmxhYmVsfX08L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0yXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucGFzdFwiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPlBhc3QgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMlwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIEBjaGFuZ2U9XCJ1cGRhdGVfdGltZXNlcmllc1wiIHYtbW9kZWw9XCJpdGVtLmF2Z1wiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPkF2ZyA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0zXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0ucGVyY185NVwiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPjk1dGggUGVyYyA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLFxuICAgIHRpbWVzZXJpZXM6IEFycmF5LFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgc2hvd19kZWxldGVfYnV0dG9uOiBCb29sZWFuLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZV90cycsICd1cGRhdGU6dGltZXNlcmllcyddKVxuXG5mdW5jdGlvbiB1cGRhdGVfdGltZXNlcmllcygpIHtcbiAgICBlbWl0KCd1cGRhdGU6dGltZXNlcmllcycsIHByb3BzLnRpbWVzZXJpZXMpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVfdHMoKSB7XG4gICAgZW1pdCgnZGVsZXRlX3RzJywgcHJvcHMuaWQpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gIC5jdXN0b20tbXMge1xuICBtYXJnaW4tbGVmdDogMnJlbSAhaW1wb3J0YW50O1xuICB9XG4uaW5saW5lLWJsb2NrIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xufVxuLmJvcmRlciB7XG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZCAhaW1wb3J0YW50O1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCB7IERhdGFUYWJsZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgaGFuZGxlcklkQWRkTGluayA9IFwicGFnZS1zdGF0cy1hY3Rpb24tbGlua1wiO1xuY29uc3QgaGFuZGxlcklkSnVtcEhpc3RvcmljYWwgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWp1bXAtaGlzdG9yaWNhbFwiO1xuXG5jb25zdCB0b3BfYXBwbGljYXRpb24gPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9hcHBsaWNhdGlvbnMnKSxcbiAgICB2aWV3OiBcInRvcF9wcm90b2NvbHNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBsaWNhdGlvblwiKSwgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ3Byb3RvY29sJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHRcdGxldCBzY2hlbWEgPSBgdG9wOiR7c2VydmljZS50c19zY2hlbWF9YDtcblx0XHRcdGNvbnRleHQuYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEoc2NoZW1hLCBzZXJ2aWNlLnRzX3F1ZXJ5KVxuXHRcdCAgICB9LFxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgXHQvL3JldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIFx0cmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJywgb3JkZXJhYmxlOiBmYWxzZSxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgIH1cblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHQgICAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgbDdfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwibDdwcm90b1wiLCBgJHtzZXJ2aWNlLnByb3RvY29sLmlkfTtlcWApO1xuXHRcdFx0bGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9JiR7bDdfcHJvdG99YDtcblx0XHRcdGxldCBzb3VyY2VfdHlwZSA9IGNvbnRleHQuc291cmNlX3R5cGU7XG5cdFx0XHRsZXQgc291cmNlX2FycmF5ID0gY29udGV4dC5zb3VyY2VfYXJyYXk7XG5cdFx0XHRcblx0XHRcdGxldCBwYXJhbXMgPSBcIlwiO1xuXHRcdFx0bGV0IHBhcmFtc19hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdFx0XHQgICAgbGV0IHNvdXJjZSA9IHNvdXJjZV9hcnJheVtpXTtcblx0XHRcdCAgICBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImlmaWRcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlmaWRcIiwgc291cmNlLnZhbHVlKTtcblx0XHRcdCAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJob3N0XCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHtzb3VyY2UudmFsdWV9O2VxYCk7XG5cdFx0XHQgICAgfVxuXHRcdFx0fSk7XG5cdFx0XHRwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHRoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0d2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdCAgICB9XG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdFx0ICAgIHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9LFxuXHRcdF0pO1xuXHQgICAgfVxuXHR9LF0sXG59O1xuXG5jb25zdCB0b3BfY2F0ZWdvcmllcyA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX2NhdGVnb3JpZXMnKSxcbiAgICB2aWV3OiBcInRvcF9jYXRlZ29yaWVzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDIsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImNhdGVnb3J5XCIpLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0bGV0IGhhbmRsZXIgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdFx0bGV0IHNjaGVtYSA9IGB0b3A6JHtzZXJ2aWNlLnRzX3NjaGVtYX1gO1xuXHRcdFx0Y29udGV4dC5hZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYShzY2hlbWEsIHNlcnZpY2UudHNfcXVlcnkpXG5cdFx0ICAgIH0sXG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljXCIpLCBuYW1lOiAndHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICBcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0cmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgfVxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdCAgICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0Y29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdGxldCBjYXRlZ29yeSA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJsN2NhdFwiLCBgJHtzZXJ2aWNlLmNhdGVnb3J5LmlkfTtlcWApO1xuXHRcdFx0bGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9JiR7Y2F0ZWdvcnl9YDtcblx0XHRcdGxldCBzb3VyY2VfdHlwZSA9IGNvbnRleHQuc291cmNlX3R5cGU7XG5cdFx0XHRsZXQgc291cmNlX2FycmF5ID0gY29udGV4dC5zb3VyY2VfYXJyYXk7XG5cdFx0XHRcblx0XHRcdGxldCBwYXJhbXMgPSBcIlwiO1xuXHRcdFx0bGV0IHBhcmFtc19hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG5cdFx0XHQgICAgbGV0IHNvdXJjZSA9IHNvdXJjZV9hcnJheVtpXTtcblx0XHRcdCAgICBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImlmaWRcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlmaWRcIiwgc291cmNlLnZhbHVlKTtcblx0XHRcdCAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJob3N0XCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHtzb3VyY2UudmFsdWV9O2VxYCk7XG5cdFx0XHQgICAgfVxuXHRcdFx0fSk7XG5cdFx0XHRwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHRoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0d2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdCAgICB9XG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdFx0ICAgIHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9LFxuXHRcdF0pO1xuXHQgICAgfVxuXHR9LF0sXG59O1xuXG5jb25zdCB0b3Bfc2VuZGVycyA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX3NlbmRlcnMnKSxcbiAgICB2aWV3OiBcInRvcF9zZW5kZXJzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AuaG9zdF9uYW1lXCIpLCBuYW1lOiAnaG9zdF9uYW1lJywgZGF0YTogJ2hvc3QnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHQgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgbGV0IGxhYmVsID0gZGF0YS5sYWJlbDtcbiAgICAgIGxldCBob3N0X3JlZiA9ICcnO1xuXHQgICAgbGV0IGhhbmRsZXIgPSB7XG5cdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdG9uQ2xpY2s6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHQgICAgLy8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0ICAgIGxldCBzY2hlbWEgPSBgaG9zdDp0cmFmZmljYDtcblx0XHQgICAgY29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcImhvc3RcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdH0sXG5cdCAgICB9O1xuXHQgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBkYXRhLmlzX2xvY2FsKSB7XG4gICAgICAgIGxhYmVsID0gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH1cbiAgICAgIGlmIChkYXRhLmlzX2F2YWlsYWJsZSkge1xuICAgICAgICBob3N0X3JlZiA9IGAgPGEgaHJlZj1cIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pZH1cIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIlwiPjxpIGNsYXNzPVwiZmFzIGZhLWxhcHRvcFwiPjwvaT48L2E+YFxuICAgICAgfVxuICAgICAgXG5cdCAgICByZXR1cm4gYCR7bGFiZWx9JHtob3N0X3JlZn1gO1xuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnNlbnRcIiksIG5hbWU6ICdzZW50JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwgLy8ge1xuXHQgICAgICAvLyBcdGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHQgICAgICAvLyBcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgICAgLy8gXHQgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0ICAgICAgLy8gXHQgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgICAvLyBcdH1cblx0ICAgICAgLy8gfSxcblx0ICAgICAge1xuXHRcdCAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHRcdCAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0ICAgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgIGNvbnN0IGhvc3QgPSBzZXJ2aWNlLmhvc3QuaWQ7XG4gICAgICAgICAgY29uc3QgaG9zdF90c19hdmFpbGFibGU9IHNlcnZpY2UuaG9zdC5pc19sb2NhbDtcblx0XHQgICAgICBjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1zID0gXCJcIjtcdFx0XHQgICAgXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtc19hcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBzZXJ2aWNlLnRhZ3MpIHtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gc2VydmljZS50YWdzW2tleV07XG4gICAgICAgICAgICAgIGxldCBwX3VybCA9IFwiXCI7XG4gICAgICAgICAgICAgIGlmIChrZXkgPT0gXCJpZmlkXCIpIHtcbiAgICAgICAgICAgICAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gXCJob3N0XCIpIHtcbiAgICAgICAgICAgICAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlwXCIsIGAke3ZhbHVlfTtlcWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcmFtc19hcnJheS5wdXNoKHBfdXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aGlzdG9yaWNhbF9mbG93c191cmx9JiR7cGFyYW1zfWA7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBqdW1wX3RvX2hvc3QgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWZpZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2hvc3R9JnBhZ2U9aGlzdG9yaWNhbCZ0c19xdWVyeT1pZmlkOiR7aWZpZH0saG9zdDoke2hvc3R9JnRzX3NjaGVtYT1ob3N0OmRldGFpbHMmZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaG9zdF91cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBkcm9wZG93biA9IFt7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfV1cblx0ICAgICAgICBpZiAoY29udGV4dC5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbXCJob3N0XCJdICYmIGhvc3RfdHNfYXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBkcm9wZG93bi5wdXNoKHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaG9zdF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faG9zdCB9KVxuICAgICAgICAgIH1cblxuXHRcdCAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKGRyb3Bkb3duKTtcblx0XHQgIH1cblx0ICAgICAgfSxdLFxufTtcblxuY29uc3QgdG9wX3JlY2VpdmVycyA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX3JlY2VpdmVycycpLFxuICAgIHZpZXc6IFwidG9wX3JlY2VpdmVyc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAxLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLmhvc3RfbmFtZVwiKSwgbmFtZTogJ2hvc3RfbmFtZScsIGRhdGE6ICdob3N0JywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRyZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0ICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGxldCBsYWJlbCA9IGRhdGEubGFiZWw7XG4gICAgICBsZXQgaG9zdF9yZWYgPSAnJztcblx0ICAgIGxldCBoYW5kbGVyID0ge1xuXHRcdGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRvbkNsaWNrOiBhc3luYyBmdW5jdGlvbigpIHtcblx0XHQgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdCAgICBsZXQgc2NoZW1hID0gYGhvc3Q6dHJhZmZpY2A7XG5cdFx0ICAgIGNvbnRleHQuYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QoXCJob3N0XCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHR9LFxuXHQgICAgfTtcblx0ICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgZGF0YS5pc19sb2NhbCkge1xuICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9XG4gICAgICBpZiAoZGF0YS5pc19hdmFpbGFibGUpIHtcbiAgICAgICAgaG9zdF9yZWYgPSBgIDxhIGhyZWY9XCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaWR9XCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgdGl0bGU9XCJcIj48aSBjbGFzcz1cImZhcyBmYS1sYXB0b3BcIj48L2k+PC9hPmBcbiAgICAgIH1cbiAgICAgIFxuXHQgICAgcmV0dXJuIGAke2xhYmVsfSR7aG9zdF9yZWZ9YDtcblx0fSxcbiAgICB9LCB7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5yZWNlaXZlZFwiKSwgbmFtZTogJ3JlY2VpdmVkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgLy9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdH0sXG4gICAgfSwgLy8ge1xuXHQgICAgICAvLyBcdGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHQgICAgICAvLyBcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgICAgLy8gXHQgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0ICAgICAgLy8gXHQgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgICAvLyBcdH1cblx0ICAgICAgLy8gfSxcblx0ICAgICAge1xuXHRcdCAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHRcdCAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0ICAgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgIGNvbnN0IGhvc3QgPSBzZXJ2aWNlLmhvc3QuaWQ7XG4gICAgICAgICAgY29uc3QgaG9zdF90c19hdmFpbGFibGU9IHNlcnZpY2UuaG9zdC5pc19sb2NhbDtcblx0XHQgICAgICBjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG5cdFx0XHQgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0XHQgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ICAgICAgbGV0IGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcblx0XHRcdCAgICAgIFxuXHRcdFx0ICAgICAgbGV0IHBhcmFtcyA9IFwiXCI7XG5cdFx0XHQgICAgICBsZXQgcGFyYW1zX2FycmF5ID0gW107XG5cdFx0XHQgICAgICBmb3IgKGxldCBrZXkgaW4gc2VydmljZS50YWdzKSB7XG5cdFx0XHRcdCAgbGV0IHZhbHVlID0gc2VydmljZS50YWdzW2tleV07XG5cdFx0XHRcdCAgbGV0IHBfdXJsID0gXCJcIjtcblx0XHRcdFx0ICBpZiAoa2V5ID09IFwiaWZpZFwiKSB7XG5cdFx0XHRcdCAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShrZXksIHZhbHVlKTtcblx0XHRcdFx0ICB9IGVsc2UgaWYgKGtleSA9PSBcImhvc3RcIikge1xuXHRcdFx0XHQgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHt2YWx1ZX07ZXFgKTtcblx0XHRcdFx0ICB9XG5cdFx0XHRcdCAgcGFyYW1zX2FycmF5LnB1c2gocF91cmwpO1xuXHRcdFx0ICAgICAgfVxuXHRcdFx0ICAgICAgcGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0ICAgICAgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdCAgICAgIC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdCAgICAgIHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdCAgfVxuXHRcdCAgICAgIH07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGp1bXBfdG9faG9zdCA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7aG9zdH0mcGFnZT1oaXN0b3JpY2FsJnRzX3F1ZXJ5PWlmaWQ6JHtpZmlkfSxob3N0OiR7aG9zdH0mdHNfc2NoZW1hPWhvc3Q6ZGV0YWlscyZlcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbihob3N0X3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGRyb3Bkb3duID0gW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XVxuXHQgICAgICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgaG9zdF90c19hdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnB1c2goeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5ob3N0X2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19ob3N0IH0pXG4gICAgICAgICAgfVxuXG5cdFx0ICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoZHJvcGRvd24pO1xuXHRcdCAgfSxcblx0ICAgICAgfSxdLFxufTtcblxuY29uc3QgaW50ZXJmYWNlX3RvcF90YWJsZXMgPSBbdG9wX2FwcGxpY2F0aW9uLCB0b3BfY2F0ZWdvcmllcywgdG9wX3NlbmRlcnMsIHRvcF9yZWNlaXZlcnNdO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmZhY2VfdG9wX3RhYmxlcztcblxuIiwiaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IGludGVyZmFjZVRvcFRhYmxlcyBmcm9tIFwiLi9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qc1wiO1xuXG5sZXQgdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSA9IGludGVyZmFjZVRvcFRhYmxlcy5maW5kKCh0KSA9PiB0LnZpZXcgPT0gXCJ0b3BfcHJvdG9jb2xzXCIpO1xuaWYgKHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UgIT0gbnVsbCkge1xuICAgIHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlKTtcbiAgICB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlLnRhYmxlX3ZhbHVlID0gXCJob3N0XCI7XG59XG5cbmNvbnN0IHRvcF9hcHBsaWNhdGlvbiA9IHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2U7XG5cbmNvbnN0IGhvc3RfdG9wX3RhYmxlcyA9IFt0b3BfYXBwbGljYXRpb25dO1xuXG5leHBvcnQgZGVmYXVsdCBob3N0X3RvcF90YWJsZXM7XG4iLCJpbXBvcnQgeyBEYXRhVGFibGVVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuXG5jb25zdCBieXRlc1RvU2l6ZUZvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJVdGlscy50eXBlcy5ieXRlcy5pZCk7XG5jb25zdCBicHNGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnBzLmlkKTtcbmNvbnN0IGhhbmRsZXJJZEFkZExpbmsgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWxpbmtcIjtcblxuY29uc3QgdG9wX3NubXBfaW50ZXJmYWNlID0ge1xuXHR0YWJsZV92YWx1ZTogXCJzbm1wXCIsXG5cdHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdDogeyBpZmlkOiB0cnVlLCBkZXZpY2U6IHRydWUsIGlmX2luZGV4OiBmYWxzZSB9LFxuXHR0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKSxcblx0dmlldzogXCJ0b3Bfc25tcF9pZmFjZXNcIixcblx0ZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDQsXG5cdGNvbHVtbkRlZnM6IFtcblx0XHR7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcblx0XHR7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDIgfSxcblx0XHR7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcblx0XSxcblx0Zl9nZXRfbGFiZWw6ICh0c19ncm91cCkgPT4ge1xuXHRcdGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNfZ3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcblx0XHRsZXQgc291cmNlX2xhYmVsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdFx0aWYgKHNvdXJjZV9kZWZfYXJyYXlbaV0udmFsdWUgIT0gXCJkZXZpY2VcIikgeyBjb250aW51ZTsgfVxuXHRcdFx0c291cmNlX2xhYmVsID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W2ldLmxhYmVsO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiBgJHtpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfaW50ZXJmYWNlcycpfSAtIFNOTVAgJHtpMThuKCdwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlJyl9ICR7c291cmNlX2xhYmVsfWA7XG5cdH0sXG5cdGRlZmF1bHQ6IHRydWUsXG5cblx0Y29sdW1uczogW3tcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwiaW50ZXJmYWNlX25hbWVcIiksIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdFx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0XHRcdG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRsZXQgc2NoZW1hID0gYHNubXBfaWY6dHJhZmZpY2A7XG5cdFx0XHRcdFx0Y29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcInNubXBfaW50ZXJmYWNlXCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0XHRsZXQgbGFiZWxfdGV4dCA9IGAke2RhdGEubmFtZX1gO1xuXHRcdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGxhYmVsX3RleHQsIGhhbmRsZXIgfSk7XG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJpbnRlcmZhY2VfYWxpYXNcIiksIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdHJlbmRlcjogZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdGxldCBsYWJlbF90ZXh0ID0gYCR7ZGF0YS5hbGlhc31gO1xuXHRcdFx0cmV0dXJuIGxhYmVsX3RleHQ7XG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5zZW50XCIpLCBuYW1lOiAnc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3NlbnQnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHRcdFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5yZWNlaXZlZFwiKSwgbmFtZTogJ3JlY2VpdmVkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAncmN2ZCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0XHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndG90YWwnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHRcdFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBkYXRhOiAncGVyY2VudGFnZScsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0XHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0XHR9XG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AudGhyb3VnaHB1dFwiKSwgbmFtZTogJ3Rocm91Z2hwdXQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0aHJvdWdocHV0Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBicHNGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0XHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0XHR9LFxuXHR9LF0sXG59O1xuXG5jb25zdCBzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzID0gW3RvcF9zbm1wX2ludGVyZmFjZV07XG5cbmV4cG9ydCBkZWZhdWx0IHNubXBfaW50ZXJmYWNlX3RvcF90YWJsZXM7XG4iLCJpbXBvcnQgeyBEYXRhVGFibGVVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgYnBzRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJwcy5pZCk7XG5jb25zdCBoYW5kbGVySWRBZGRMaW5rID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1saW5rXCI7XG5cbmNvbnN0IHRvcF9mbG93X2ludGVyZmFjZSA9IHtcblx0dGFibGVfdmFsdWU6IFwiZmxvd2RldmljZVwiLFxuXHR0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Q6IHsgaWZpZDogdHJ1ZSwgZGV2aWNlOiB0cnVlLCBpZl9pbmRleDogZmFsc2UgfSxcblx0dGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyksXG5cdHZpZXc6IFwidG9wX2Zsb3dkZXZfaWZhY2VzXCIsXG5cdGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiA0LFxuXHRjb2x1bW5EZWZzOiBbXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG5cdF0sXG5cdGZfZ2V0X2xhYmVsOiAodHNfZ3JvdXApID0+IHtcblx0XHRsZXQgc291cmNlX2RlZl9hcnJheSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXk7XG5cdFx0bGV0IHNvdXJjZV9sYWJlbDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGlmIChzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlICE9IFwiZGV2aWNlXCIpIHsgY29udGludWU7IH1cblx0XHRcdHNvdXJjZV9sYWJlbCA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVtpXS5sYWJlbDtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gYCR7aTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKX0gLSBGbG93IEV4cG9ydGVyICR7c291cmNlX2xhYmVsfWA7XG5cdH0sXG5cdGRlZmF1bHQ6IHRydWUsXG5cblx0Y29sdW1uczogW3tcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwiaW50ZXJmYWNlX25hbWVcIiksIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdFx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0XHRcdG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRsZXQgc2NoZW1hID0gYGZsb3dkZXZfcG9ydDp0cmFmZmljYDtcblx0XHRcdFx0XHRjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwiZmxvd19pbnRlcmZhY2VcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHRcdGxldCBsYWJlbF90ZXh0ID0gYCR7ZGF0YS5sYWJlbH1gO1xuXHRcdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGxhYmVsX3RleHQsIGhhbmRsZXIgfSk7XG5cdFx0fSxcblx0fSwgIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3Auc2VudFwiKSwgbmFtZTogJ3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdzZW50Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnJlY2VpdmVkXCIpLCBuYW1lOiAncmVjZWl2ZWQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdyY3ZkJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndG90YWwnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdFx0fVxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnRocm91Z2hwdXRcIiksIG5hbWU6ICd0aHJvdWdocHV0JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndGhyb3VnaHB1dCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnBzRm9ybWF0dGVyKGRhdGEpO1xuXHRcdH0sXG5cdH0sXSxcbn07XG5cbmNvbnN0IGZsb3dfZGV2X3RvcF90YWJsZXMgPSBbdG9wX2Zsb3dfaW50ZXJmYWNlXTtcblxuZXhwb3J0IGRlZmF1bHQgZmxvd19kZXZfdG9wX3RhYmxlcztcbiIsImltcG9ydCBpbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBob3N0VG9wVGFibGVzIGZyb20gXCIuL2hvc3RfdG9wX3RhYmxlcy5qc1wiO1xuaW1wb3J0IHNubXBJbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qc1wiO1xuaW1wb3J0IGZsb3dEZXZpY2VUb3BUYWJsZXMgZnJvbSBcIi4vZmxvd19kZXZpY2VfdG9wX3RhYmxlcy5qc1wiO1xuXG5jb25zdCB1aV90eXBlcyA9IHtcblx0aGlkZTogXCJoaWRlXCIsXG5cdHNlbGVjdDogXCJzZWxlY3RcIixcblx0aW5wdXQ6IFwiaW5wdXRcIixcbn07XG5cbmNvbnN0IHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZSA9IHtcbiAgICBpZmlkOiAocykgPT4ge1xuXHRsZXQgbGFiZWwgPSBzLmlmbmFtZTtcblx0aWYgKHMubmFtZSAhPSBudWxsKSB7XG5cdCAgICBsYWJlbCA9IHMubmFtZTtcblx0fVxuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZTogcy5pZmlkLFxuXHR9O1xuICAgIH0sXG4gICAgcG9vbDogKHApID0+IHtcblx0bGV0IGxhYmVsID0gcC5wb29sX2lkO1xuXHRpZiAocC5uYW1lICE9IG51bGwpIHsgbGFiZWwgPSBwLm5hbWU7IH1cblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWU6IHAucG9vbF9pZCxcblx0fTtcbiAgICB9LFxuICAgIGFtX2hvc3Q6IChhbSkgPT4ge1xuXHRsZXQgbGFiZWwgPSBgJHthbS5sYWJlbH0gJHthbS5tZWFzdXJlbWVudH1gO1xuXHRsZXQgdmFsdWUgPSBgJHthbS5ob3N0fSxtZXRyaWM6JHthbS5tZWFzdXJlbWVudF9rZXl9YDtcblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWUsXG5cdH07XG4gICAgfSxcbiAgICBibGFja2xpc3Q6IChiKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbCA9IGAke2IuY29sdW1uX25hbWV9YDtcbiAgICAgICAgbGV0IHZhbHVlID0gbGFiZWw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZGV2aWNlOiAoZGV2aWNlKSA9PiB7XG5cdGxldCBsYWJlbCA9IGAke2RldmljZS5uYW1lfWA7XG5cdGxldCB2YWx1ZSA9IGAke2RldmljZS5pcH1gO1xuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZSxcblx0fTtcbiAgICB9LFxuICAgIGlmX2luZGV4OiAoaW5kZXgpID0+IHtcblx0cmV0dXJuICcnO1xuXHQvKlx0bGV0IGxhYmVsID0gYCR7aW5kZXgubmFtZX1gO1xuXHRcdGxldCB2YWx1ZSA9IGAke2luZGV4LmlwfWA7XG5cdFx0cmV0dXJuIHtcblx0XHRsYWJlbCxcblx0XHR2YWx1ZSxcblx0XHR9OyovXG4gICAgfVxufTtcblxuY29uc3Qgc291cmNlc190eXBlc190YWJsZXMgPSB7XG5cdGludGVyZmFjZTogaW50ZXJmYWNlVG9wVGFibGVzLFxuXHRob3N0OiBob3N0VG9wVGFibGVzLFxuXHRzbm1wX2ludGVyZmFjZTogc25tcEludGVyZmFjZVRvcFRhYmxlcyxcblx0c25tcF9kZXZpY2U6IHNubXBJbnRlcmZhY2VUb3BUYWJsZXMsXG5cdGZsb3dfZGV2aWNlOiBmbG93RGV2aWNlVG9wVGFibGVzLFxuXHRmbG93X2ludGVyZmFjZTogZmxvd0RldmljZVRvcFRhYmxlcyxcbn07XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBbXG5cdHtcblx0XHRpZDogXCJpbnRlcmZhY2VcIiwgLy91bmlxdWUgaWRcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9pZl9zdGF0c1wiLCAvLyByZWdleCB0byBtYXRjaCB1cmwgcGFnZVxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRxdWVyeTogXCJpZmFjZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBudWxsLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLCAvLyB1cmwgdG8gZ2V0IHNvdXJjZXMgbGlzdFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogbnVsbCwgLy8gY3VzdG9tIGZ1bmN0aW9uIHRoYXQgcmV0dXJuIHNvdXJjZXNfbGlzdCwgb3ZlcndyaXRlIHNvdXJjZXNfdXJsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsIC8vIHVzZWQgaW4gdHNRdWVyeSBwYXJhbWV0ZXIsIHRvIGdldCBpbml0IGFuZCBzZXQgdmFsdWUgaW4gdXJsXG5cdFx0XHR2YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSB0byBnZXQgYW5kIHNldCB2YWx1ZSBpbiB1cmxcblx0XHRcdHZhbHVlX21hcF9zb3VyY2VzX3JlczogbnVsbCxcblx0XHRcdGRpc2FibGVfdHNrZXk6IG51bGwsXG5cdFx0XHRmX2dldF92YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSBhbmQgdmFsdWVfdXJsIHRvIGdldCBzdGFydCB2YWx1ZSBmcm9tIHVybFxuXHRcdFx0Zl9zZXRfdmFsdWVfdXJsOiBudWxsLCAvLyBvdmVyd3JpdGUgdmFsdWUgYW5kIHZhbHVlX3VybCB0byBzZXQgc3RhcnQgdmFsdWUgaW4gdXJsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0ICAgIGlkOiBcImJsYWNrbGlzdFwiLCAvL3VuaXF1ZSBpZFxuXHQgICAgcmVnZXhfcGFnZV91cmw6IFwibHVhXFwvYmxhY2tsaXN0c19zdGF0c1wiLCAvLyByZWdleCB0byBtYXRjaCB1cmwgcGFnZVxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYmxhY2tsaXN0XCIpLFxuXHQgICAgcXVlcnk6IFwiYmxhY2tsaXN0XCIsXG4gICAgICAgICAgICAvLyBkaXNwbGF5X2Z1bGxfbmFtZTogdHJ1ZSxcblx0ICAgIHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlN5c3RlbVwiLCB2YWx1ZTogLTEgfV0gfSxcblx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0ICAgIH0sXVxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwidnVsbmVyYWJpbGl0eV9zY2FuXCIsIC8vdW5pcXVlIGlkXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvdnVsbmVyYWJpbGl0eV9zY2FuXCIsIC8vIHJlZ2V4IHRvIG1hdGNoIHVybCBwYWdlXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudnVsbl9zY2FuXCIpLFxuXHRcdHF1ZXJ5OiBcImFtX3Z1bG5fc2NhblwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dXG5cdFx0XG5cdH0sXG5cdHtcblx0XHRpZDogXCJob3N0XCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvaG9zdF9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0XHR0YWJsZV92YWx1ZTogXCJob3N0XCIsXG5cdFx0cXVlcnk6IFwiaG9zdFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHZhbHVlOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwibWFjXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbWFjX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5tYWNcIiksXG5cdFx0cXVlcnk6IFwibWFjXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5tYWNcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcIm1hY0FkZHJlc3NcIixcblx0XHRcdHZhbHVlOiBcIm1hY1wiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwibmV0d29ya1wiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL25ldHdvcmtfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm5ldHdvcmtcIiksXG5cdFx0cXVlcnk6IFwic3VibmV0XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZXR3b3JrXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJzdWJuZXRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiYXNcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9hc19kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYXNcIiksXG5cdFx0cXVlcnk6IFwiYXNuXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hc1wiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwiYXNuXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImNvdW50cnlcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9jb3VudHJ5X2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb3VudHJ5XCIpLFxuXHRcdHF1ZXJ5OiBcImNvdW50cnlcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmNvdW50cnlcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImNvdW50cnlcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwib3NcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9vc19kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub3NcIiksXG5cdFx0cXVlcnk6IFwib3NcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9zXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJvc1wiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJ2bGFuXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvdmxhbl9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudmxhblwiKSxcblx0XHRxdWVyeTogXCJ2bGFuXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi52bGFuXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJ2bGFuXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInBvb2xcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb29sX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb29sXCIpLFxuXHRcdHF1ZXJ5OiBcImhvc3RfcG9vbFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9vbFwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9ob3N0L3Bvb2xzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwicG9vbFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwic3lzdGVtXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvc3lzdGVtX3N0YXRzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc3lzdGVtXCIpLFxuXHRcdHF1ZXJ5OiBcInN5c3RlbVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwicHJvZmlsZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb2ZpbGVfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnByb2ZpbGVcIiksXG5cdFx0cXVlcnk6IFwicHJvZmlsZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucHJvZmlsZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwicHJvZmlsZVwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJyZWRpc1wiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9yZWRpc19tb25pdG9yLmx1YVwiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnJlZGlzXCIpLFxuXHRcdHF1ZXJ5OiBcInJlZGlzXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlJlZGlzXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImluZmx1eFwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9pbmZsdXhkYl9tb25pdG9yLmx1YVwiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmluZmx1eFwiKSxcblx0XHRxdWVyeTogXCJpbmZsdXhkYlwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJJbmZsdXhcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiYWN0aXZlX21vbml0b3JpbmdcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tb25pdG9yXFwvYWN0aXZlX21vbml0b3JpbmdfbW9uaXRvci5sdWFcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hY3RpdmVfbW9uaXRvcmluZ1wiKSxcblx0XHRxdWVyeTogXCJhbVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFjdGl2ZV9tb25pdG9yaW5nXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L2FtX2hvc3QvbGlzdC5sdWFcIixcblx0XHRcdHZhbHVlOiBcImhvc3RcIixcblx0XHRcdGRpc2FibGVfdHNrZXk6IHRydWUsXG5cdFx0XHR2YWx1ZV9tYXBfc291cmNlc19yZXM6IFwiYW1faG9zdFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwic25tcF9pbnRlcmZhY2VcIixcblx0XHRpZF9ncm91cDogXCJzbm1wXCIsXG5cdFx0Ly8gZGlzYWJsZV9zdGF0czogdHJ1ZSxcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc25tcF9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNubXBfaW50ZXJmYWNlXCIpLFxuXHRcdHF1ZXJ5OiBcInNubXBfaW50ZXJmYWNlXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlwiLCB2YWx1ZTogLTEgfV0gfSxcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdFx0fSwge1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJpcFwiLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9saXN0Lmx1YVwiLCAvLyB1cmwgdG8gZ2V0IHNvdXJjZXMgbGlzdFxuXHRcdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaG9zdFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9pbnRlcmZhY2VcIiksXG4vL1x0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwiaWZfaW5kZXhcIixcblx0XHRcdHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNubXBfZGV2aWNlXCIsXG5cdFx0aWRfZ3JvdXA6IFwic25tcFwiLFxuXHRcdC8vIGRpc2FibGVfc3RhdHM6IHRydWUsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NubXBfZGV2aWNlX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2RldmljZVwiKSxcblx0XHRxdWVyeTogXCJzbm1wX2RldmljZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvbGlzdC5sdWFcIiwgLy8gdXJsIHRvIGdldCBzb3VyY2VzIGxpc3Rcblx0XHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiZmxvd19kZXZpY2VcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvZmxvd2RldmljZXNfc3RhdHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5mbG93X2RldmljZVwiKSxcblx0XHRxdWVyeTogXCJmbG93ZGV2XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2VzL2xpc3QubHVhXCIsIC8vIHVybCB0byBnZXQgc291cmNlcyBsaXN0XG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJpcFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJ0b3BfZmxvd19kZXZcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5mbG93X2V4cG9ydGVyX3RyYWZmaWNcIiksXG5cdFx0cXVlcnk6IFwidG9wX2Zsb3dkZXZcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiZmxvd19pbnRlcmZhY2VcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmZsb3dfaW50ZXJmYWNlXCIpLFxuXHRcdHF1ZXJ5OiBcImZsb3dkZXZfcG9ydFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJpcFwiLFxuXHRcdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaXBcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvcnRcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInBvcnRcIixcblx0XHRcdHZhbHVlOiBcInBvcnRcIixcblx0XHRcdHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNmbG93X2RldmljZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zZmxvd2RldmljZXNfc3RhdHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zZmxvd19kZXZpY2VcIiksXG5cdFx0cXVlcnk6IFwic2Zsb3dkZXZcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImlwXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNmbG93X2ludGVyZmFjZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNmbG93X2ludGVyZmFjZVwiKSxcblx0XHRxdWVyeTogXCJzZmxvd2Rldl9wb3J0XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJpcFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9ydFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvb2JzZXJ2YXRpb25fcG9pbnRzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub2JzZXJ2YXRpb25fcG9pbnRcIiksXG5cdFx0cXVlcnk6IFwib2JzX3BvaW50XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vYnNlcnZhdGlvbl9wb2ludFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwib2JzX3BvaW50XCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0Ly90b2RvX3Rlc3Rcblx0XHRpZDogXCJwb2RcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb2RfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvZFwiKSxcblx0XHRxdWVyeTogXCJwb2RcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvZFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwicG9kXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSwge1xuXHRcdC8vdG9kb190ZXN0XG5cdFx0aWQ6IFwiY29udGFpbmVyXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvY29udGFpbmVyX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdFx0cXVlcnk6IFwiY29udGFpbmVyXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImNvbnRhaW5lclwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJuZWRnZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL25lZGdlXFwvaWZfc3RhdHMubHVhXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubmVkZ2VcIiksXG5cdFx0cXVlcnk6IFwibmVkZ2VcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaWZuYW1lXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0Ly8ge1xuXHQvLyBcdGlkOiBcIm5fZWRnZV9pbnRlcmZhY2VcIixcblx0Ly8gXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9uZWRnZVxcL2lmX3N0YXRzLmx1YVwiLFxuXHQvLyBcdGxhYmVsOiBcIlByb2ZpbGUgbkVkZ2VcIixcblx0Ly8gXHR2YWx1ZTogXCJpZmlkXCIsXG5cdC8vIFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdC8vIFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0X2FuZF9pbnB1dCxcblx0Ly8gXHRxdWVyeTogXCJpZmFjZTpuZWRnZVwiLFxuXHQvLyB9LFxuXTtcblxuY29uc3QgbWV0cmljc0NvbnN0cyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHtcblx0XHR1aV90eXBlcyxcblx0XHRzb3VyY2VzX3VybF9lbF90b19zb3VyY2UsXG5cdFx0c291cmNlc190eXBlcyxcblx0XHRzb3VyY2VzX3R5cGVzX3RhYmxlcyxcblx0fTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc0NvbnN0cztcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBtZXRyaWNzQ29uc3RzIGZyb20gXCIuLi9jb25zdGFudHMvbWV0cmljcy1jb25zdHMuanNcIlxuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi9udG9wLXV0aWxzLmpzXCI7XG5cbmNvbnN0IHNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwgPSAodGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBsZXQgcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzID0gW107XG4gICAgdGltZXNlcmllc19ncm91cHMuZm9yRWFjaCgodHNfZ3JvdXApID0+IHtcbiAgICAgICAgbGV0IHBhcmFtID0gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCk7XG4gICAgICAgIHBhcmFtc190aW1lc2VyaWVzX2dyb3Vwcy5wdXNoKHBhcmFtKTtcbiAgICB9KTtcbiAgICBsZXQgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzLmpvaW4oXCI7O1wiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiLCB1cmxfdGltZXNlcmllc19ncm91cHMpO1xufTtcblxuZnVuY3Rpb24gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCkge1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfZ3JvdXAudGltZXNlcmllcy5mb3JFYWNoKCh0cykgPT4ge1xuICAgICAgICB0aW1lc2VyaWVzLnB1c2goYCR7dHMuaWR9PSR7dHMucmF3fToke3RzLnBhc3R9OiR7dHMuYXZnfToke3RzLnBlcmNfOTV9YCk7XG4gICAgfSk7XG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnkgPSB0c19ncm91cC5tZXRyaWMuc2NoZW1hO1xuICAgIGlmICh0c19ncm91cC5tZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuICAgICAgICBtZXRyaWNfc2NoZW1hX3F1ZXJ5ID0gYCR7bWV0cmljX3NjaGVtYV9xdWVyeX0rJHt0c19ncm91cC5tZXRyaWMucXVlcnl9YDtcbiAgICB9XG4gICAgbGV0IHRpbWVzZXJpZXNfcGFyYW0gPSB0aW1lc2VyaWVzLmpvaW4oXCJ8XCIpO1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXkubWFwKChzb3VyY2UpID0+IHNvdXJjZS52YWx1ZSkuam9pbihcIitcIik7XG4gICAgbGV0IHBhcmFtID0gYCR7dHNfZ3JvdXAuc291cmNlX3R5cGUuaWR9OyR7c291cmNlX3ZhbHVlX2FycmF5X3F1ZXJ5fTske21ldHJpY19zY2hlbWFfcXVlcnl9OyR7dGltZXNlcmllc19wYXJhbX1gO1xuICAgIHJldHVybiBwYXJhbTtcbn1cblxuY29uc3QgZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsID0gYXN5bmMgKGh0dHBfcHJlZml4LCB1cmxfdGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBpZiAodXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiKTtcbiAgICB9XG4gICAgaWYgKHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsIHx8IHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgZ3JvdXBzID0gdXJsX3RpbWVzZXJpZXNfZ3JvdXBzLnNwbGl0KFwiOztcIik7XG4gICAgZ3JvdXBzLm1hcChhc3luYyAoZykgPT4ge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSBhd2FpdCBnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAoZyk7XG4gICAgICAgIHJldHVybiB0c19ncm91cDtcbiAgICB9KTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBQcm9taXNlLmFsbChncm91cHMubWFwKGFzeW5jIChnKSA9PiB7XG4gICAgICAgIGxldCB0c19ncm91cCA9IGF3YWl0IGdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cChnKTtcbiAgICAgICAgcmV0dXJuIHRzX2dyb3VwO1xuICAgIH0pKTtcbiAgICByZXR1cm4gdGltZXNlcmllc19ncm91cHM7XG59O1xuXG5jb25zdCBnZXRfdHNfZ3JvdXAgPSAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKSA9PiB7XG4gICAgbGV0IGlkID0gZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gbWV0cmljLnRpbWVzZXJpZXMpIHtcbiAgICAgICAgbGV0IHRzID0gbWV0cmljLnRpbWVzZXJpZXNba2V5XTtcbiAgICAgICAgdGltZXNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICBsYWJlbDogdHMubGFiZWwsXG4gICAgICAgICAgICByYXc6IHRydWUsXG4gICAgICAgICAgICBwYXN0OiBmYWxzZSxcbiAgICAgICAgICAgIGF2ZzogZmFsc2UsXG4gICAgICAgICAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGlkLCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMsIHRpbWVzZXJpZXMsXG4gICAgfTtcbn07XG5cbmNvbnN0IGdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzID0gYXN5bmMgKGh0dHBfcHJlZml4LCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpID0+IHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpO1xuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgZ2V0X21ldHJpY3MoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpO1xuICAgIGxldCBtZXRyaWMgPSBnZXRfZGVmYXVsdF9tZXRyaWMobWV0cmljcywgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KTtcbiAgICBsZXQgdHNfZ3JvdXAgPSBnZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICByZXR1cm4gW3RzX2dyb3VwXTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cCh0c19ncm91cF91cmxfcGFyYW0pIHtcbiAgICBsZXQgZyA9IHRzX2dyb3VwX3VybF9wYXJhbTtcbiAgICBsZXQgaW5mbyA9IGcuc3BsaXQoXCI7XCIpO1xuICAgIGxldCBzb3VyY2VfdHlwZV9pZCA9IGluZm9bMF07XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9xdWVyeSA9IGluZm9bMV07XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV92YWx1ZV9xdWVyeS5zcGxpdChcIitcIik7XG5cbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeSA9IGluZm9bMl07XG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkgPSBtZXRyaWNfc2NoZW1hX3F1ZXJ5LnNwbGl0KFwiK1wiKTtcbiAgICBpZiAobWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheS5sZW5ndGggPCAyKSB7XG4gICAgICAgIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkucHVzaChudWxsKTtcbiAgICB9XG5cbiAgICBsZXQgdGltZXNlcmllc191cmwgPSBpbmZvWzNdO1xuXG4gICAgbGV0IHNvdXJjZV90eXBlID0gZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQoc291cmNlX3R5cGVfaWQpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIGxldCBtZXRyaWMgPSBhd2FpdCBnZXRfbWV0cmljX2Zyb21fc2NoZW1hKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5WzBdLCBtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5WzFdKTtcbiAgICBsZXQgdGltZXNlcmllcyA9IGdldF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfdXJsLCBtZXRyaWMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBnZXRfdHNfZ3JvdXBfaWQoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKSxcbiAgICAgICAgc291cmNlX3R5cGUsXG4gICAgICAgIHNvdXJjZV9hcnJheSxcbiAgICAgICAgbWV0cmljLFxuICAgICAgICB0aW1lc2VyaWVzLFxuICAgIH07XG59XG5cbmNvbnN0IGdldF90c19ncm91cF9pZCA9IChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMsIGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHNldF9zb3VyY2VfdHlwZV9pZF9ncm91cCkgPT4ge1xuICAgIGxldCBtZXRyaWNfaWQgPSBcIlwiO1xuICAgIGlmIChtZXRyaWMgIT0gbnVsbCkge1xuICAgICAgICBtZXRyaWNfaWQgPSBtZXRyaWMuc2NoZW1hO1xuICAgICAgICBpZiAobWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1ldHJpY19pZCA9IGAke21ldHJpY19pZH0gLSAke21ldHJpYy5xdWVyeX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlLCBpKSA9PiB7XG4gICAgICAgIGxldCBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZTtcbiAgICAgICAgaWYgKGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgIT0gbnVsbCAmJiAhZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFtzb3VyY2VfZGVmX3ZhbHVlXSkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICByZXR1cm4gc291cmNlLnZhbHVlO1xuICAgIH0pLmZpbHRlcigocykgPT4gcyAhPSBudWxsKS5qb2luKFwiX1wiKTtcbiAgICBsZXQgc291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZDtcbiAgICBpZiAoc2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwICYmIHNvdXJjZV90eXBlLmlkX2dyb3VwICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZF9ncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX2lkfSAtICR7c291cmNlX3ZhbHVlX2FycmF5fSAtICR7bWV0cmljX2lkfWA7XG59O1xuXG5mdW5jdGlvbiBnZXRfdGltZXNlcmllcyh0aW1lc2VyaWVzX3VybCwgbWV0cmljKSB7XG4gICAgbGV0IHRzX3VybF9hcnJheSA9IHRpbWVzZXJpZXNfdXJsLnNwbGl0KFwifFwiKTtcbiAgICBsZXQgciA9IC8oLispPSguKyk6KC4rKTooLispOiguKykvO1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfdXJsX2FycmF5LmZvckVhY2goKHRzX3VybCkgPT4ge1xuICAgICAgICBsZXQgdmFsdWVzID0gci5leGVjKHRzX3VybCk7XG4gICAgICAgIGlmKHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSB2YWx1ZXNbMV07XG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBtZXRyaWMudGltZXNlcmllc1tpZF0ubGFiZWw7XG4gICAgICAgICAgICBsZXQgcmF3ID0gSlNPTi5wYXJzZSh2YWx1ZXNbMl0pO1xuICAgICAgICAgICAgbGV0IHBhc3QgPSBKU09OLnBhcnNlKHZhbHVlc1szXSk7XG4gICAgICAgICAgICBsZXQgYXZnID0gSlNPTi5wYXJzZSh2YWx1ZXNbNF0pO1xuICAgICAgICAgICAgbGV0IHBlcmNfOTUgPSBKU09OLnBhcnNlKHZhbHVlc1s1XSk7XG4gICAgICAgICAgICB0aW1lc2VyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkLCBsYWJlbCwgcmF3LCBwYXN0LCBhdmcsIHBlcmNfOTUsXG4gICAgICAgICAgICB9KTsgICAgXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGltZXNlcmllcztcbn1cblxuY29uc3QgdWlfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnVpX3R5cGVzO1xuXG4vLyBkaWN0aW9uYXJ5IG9mIGZ1bmN0aW9ucyB0byBjb252ZXJ0IGFuIGVsZW1lbnQgb2Ygc291cmNlX3VybCByZXN0IHJlc3VsdCB0byBhIHNvdXJjZSAoe2xhYmVsLCB2YWx1ZSB9KVxuY29uc3Qgc291cmNlc191cmxfZWxfdG9fc291cmNlID0gbWV0cmljc0NvbnN0cy5zb3VyY2VzX3VybF9lbF90b19zb3VyY2U7XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IG1ldHJpY3NDb25zdHMuc291cmNlc190eXBlc190YWJsZXM7XG5cbmNvbnN0IGdldF9zb3VyY2VfdHlwZV9mcm9tX2lkID0gKHNvdXJjZV90eXBlX2lkKSA9PiB7XG4gICAgcmV0dXJuIHNvdXJjZXNfdHlwZXMuZmluZCgoc3QpID0+IHN0LmlkID09IHNvdXJjZV90eXBlX2lkKTtcbn07XG5cbmNvbnN0IGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpID0+IHtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5KHNvdXJjZV90eXBlKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICByZXR1cm4gc291cmNlX2FycmF5O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfZGljdCkge1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX3ZhbHVlX2RpY3Rbc291cmNlX2RlZi52YWx1ZV0pO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59XG5cbmNvbnN0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSkgPT4ge1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBsZXQgc291cmNlX2FycmF5ID0gW107XG4gICAgbGV0IHNvdXJjZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV92YWx1ZV9hcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc291cmNlX3ZhbHVlID0gc291cmNlX3ZhbHVlX2FycmF5W2ldO1xuICAgICAgICBsZXQgc291cmNlX2RlZiA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG4gICAgICAgIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsIHx8IHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuICAgICAgICAgICAgbGV0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsKSB7XG4gICAgICAgICAgICAgICAgc291cmNlcyA9IGF3YWl0IGdldF9zb3VyY2VzKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZS5pZCwgc291cmNlX2RlZik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMgPSBhd2FpdCBzb3VyY2VfZGVmLnNvdXJjZXNfZnVuY3Rpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXMuZmluZCgocykgPT4gcy52YWx1ZSA9PSBzb3VyY2VfdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gc291cmNlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHsgbGFiZWw6IHNvdXJjZV92YWx1ZSwgdmFsdWU6IHNvdXJjZV92YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZV9hcnJheS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59O1xuXG5sZXQgY2FjaGVfc291cmNlcyA9IHt9O1xuXG5jb25zdCBnZXRfc291cmNlcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgaWQsIHNvdXJjZV9kZWYpID0+IHtcbiAgICBsZXQga2V5ID0gYCR7aWR9XyR7c291cmNlX2RlZi52YWx1ZX1gO1xuICAgIGlmIChjYWNoZV9zb3VyY2VzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBpZiAoc291cmNlX2RlZi5zb3VyY2VzX3VybCkge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS8ke3NvdXJjZV9kZWYuc291cmNlc191cmx9YDtcbiAgICAgICAgICAgIGNhY2hlX3NvdXJjZXNba2V5XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuICAgICAgICAgICAgY2FjaGVfc291cmNlc1trZXldID0gc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNvdXJjZXMgPSBhd2FpdCBjYWNoZV9zb3VyY2VzW2tleV07XG4gICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwpIHtcbiAgICAgICAgbGV0IGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVfbWFwX3NvdXJjZXNfcmVzXTtcbiAgICAgICAgaWYgKGZfbWFwX3NvdXJjZV9lbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmX21hcF9zb3VyY2VfZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBgOkVycm9yOiBtZXRyaWNzLW1hbmFnZXIuanMsIG1pc3Npbmcgc291cmNlc191cmxfdG9fc291cmNlICR7c291cmNlX2RlZi52YWx1ZX0ga2V5YDtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2VzID0gc291cmNlcy5tYXAoKHMpID0+IGZfbWFwX3NvdXJjZV9lbGVtZW50KHMpKVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcy5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpXG59O1xuXG5mdW5jdGlvbiBzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwoc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9vYmplY3QpIHtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNvdXJjZV9kZWYpID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZV92YWx1ZSA9IHNvdXJjZV92YWx1ZV9vYmplY3Rbc291cmNlX2RlZi52YWx1ZV07XG4gICAgICAgIGlmIChzb3VyY2VfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHNvdXJjZV9kZWYuZl9zZXRfdmFsdWVfdXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNvdXJjZV9kZWYuZl9zZXRfdmFsdWVfdXJsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlX2RlZi52YWx1ZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKHNvdXJjZV9kZWYudmFsdWVfdXJsLCBzb3VyY2VfdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKHNvdXJjZV9kZWYudmFsdWUsIHNvdXJjZV92YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5ID0gKHNvdXJjZV90eXBlKSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4ge1xuICAgICAgICBpZiAoc291cmNlX2RlZi5mX2dldF92YWx1ZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZV9kZWYuZl9nZXRfdmFsdWVfdXJsKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZV9kZWZfdmFsdWUgPSBzb3VyY2VfZGVmLnZhbHVlX3VybDtcbiAgICAgICAgaWYgKHNvdXJjZV9kZWZfdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlX2RlZl92YWx1ZSA9IHNvdXJjZV9kZWYudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZV92YWx1ZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KHNvdXJjZV9kZWZfdmFsdWUpO1xuICAgICAgICByZXR1cm4gc291cmNlX3ZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzb3VyY2VfdmFsdWVfYXJyYXk7XG59O1xuXG5mdW5jdGlvbiBnZXRfbWV0cmljc191cmwoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIGVwb2NoKSB7XG4gICAgbGV0IHBhcmFtcyA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfT0ke3NvdXJjZV9hcnJheVtpXS52YWx1ZX1gO1xuICAgIH0pLmpvaW4oXCImXCIpO1xuICAgIGxldCBlcG9jaF9zdHJpbmcgPSBgYDtcbiAgICBpZiAoZXBvY2ggIT0gbnVsbCkge1xuICAgICAgICBlcG9jaF9zdHJpbmcgPSBgZXBvY2hfZW5kPSR7ZXBvY2guZXBvY2hfZW5kfSZlcG9jaF9iZWdpbj0ke2Vwb2NoLmVwb2NoX2JlZ2lufWBcbiAgICB9XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90eXBlL2NvbnN0cy5sdWE/cXVlcnk9JHtzb3VyY2VfdHlwZS5xdWVyeX0mJHtwYXJhbXN9JiR7ZXBvY2hfc3RyaW5nfWA7XG4gICAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZ2V0X21ldHJpY19rZXkoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSkge1xuICAgIGxldCBzb3VyY2VfYXJyYXlfa2V5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlKSA9PiBzb3VyY2UudmFsdWUpLmpvaW4oXCJfXCIpO1xuICAgIGxldCBrZXkgPSBgJHtzb3VyY2VfdHlwZS5pZH1fJHtzb3VyY2VfYXJyYXlfa2V5fWA7XG4gICAgcmV0dXJuIGtleTtcbn1cblxubGV0IGNhY2hlX21ldHJpY3MgPSB7fTtcbmxldCBsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IG51bGw7XG5jb25zdCBnZXRfbWV0cmljcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgc3RhdHVzKSA9PiB7XG4gICAgbGV0IGVwb2NoX2JlZ2luID0gc3RhdHVzPy5lcG9jaF9iZWdpbiB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgIGxldCBlcG9jaF9lbmQgPSBzdGF0dXM/LmVwb2NoX2VuZCB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcbiAgICBsZXQgY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IGAke2Vwb2NoX2JlZ2lufV8ke2Vwb2NoX2VuZH1gO1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBpZiAoc291cmNlX2FycmF5ID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgfVxuICAgIC8vIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHlwZS9jb25zdHMubHVhP3F1ZXJ5PSR7c291cmNlX3R5cGUudmFsdWV9YDtcbiAgICBsZXQgdXJsID0gZ2V0X21ldHJpY3NfdXJsKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCB7IGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaF9lbmQgfSk7XG4gICAgbGV0IGtleSA9IGdldF9tZXRyaWNfa2V5KHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpO1xuICAgIGlmIChjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsICE9IGxhc3RfbWV0cmljc190aW1lX2ludGVydmFsKSB7XG4gICAgICAgIGNhY2hlX21ldHJpY3Nba2V5XSA9IG51bGw7XG4gICAgICAgIGxhc3RfbWV0cmljc190aW1lX2ludGVydmFsID0gY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbDtcbiAgICB9XG4gICAgaWYgKGNhY2hlX21ldHJpY3Nba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGNhY2hlX21ldHJpY3Nba2V5XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIH1cbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IGNhY2hlX21ldHJpY3Nba2V5XTtcbiAgICBpZiAobWV0cmljcyA9PSBudWxsIHx8IG1ldHJpY3MubGVuZ3RoID09IDApIHsgcmV0dXJuIFt7fV07IH1cbiAgICBpZiAobWV0cmljcy5zb21lKChtKSA9PiBtLmRlZmF1bHRfdmlzaWJsZSA9PSB0cnVlKSA9PSBmYWxzZSkge1xuICAgICAgICBtZXRyaWNzWzBdLmRlZmF1bHRfdmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5jbG9uZShtZXRyaWNzKTtcbn07XG5cbmNvbnN0IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUgPSAoKSA9PiB7XG4gICAgbGV0IHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlc190eXBlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgcmVnRXhwID0gbmV3IFJlZ0V4cChzb3VyY2VzX3R5cGVzW2ldLnJlZ2V4X3BhZ2VfdXJsKTtcbiAgICAgICAgaWYgKHJlZ0V4cC50ZXN0KHBhdGhuYW1lKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlc190eXBlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBgc291cmNlX3R5cGUgbm90IGZvdW5kIGZvciAke3BhdGhuYW1lfWA7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX2Zyb21fc2NoZW1hID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hLCBtZXRyaWNfcXVlcnksIHN0YXR1cykgPT4ge1xuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgZ2V0X21ldHJpY3MoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIHN0YXR1cyk7XG4gICAgcmV0dXJuIG1ldHJpY3MuZmluZCgobSkgPT4gbS5zY2hlbWEgPT0gbWV0cmljX3NjaGVtYSAmJiBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSk7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnkgPSAodHNfcXVlcnksIHNvdXJjZV90eXBlKSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2RpY3QgPSB7fTtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNfZGVmKSA9PiBzb3VyY2VfZGVmX2RpY3Rbc19kZWYudmFsdWVdID0gdHJ1ZSk7XG4gICAgbGV0IHRzX3F1ZXJ5X2FycmF5ID0gdHNfcXVlcnkuc3BsaXQoXCIsXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNfcXVlcnlfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHRzX3ZhbF9rZXkgPSB0c19xdWVyeV9hcnJheVtpXS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIGlmIChzb3VyY2VfZGVmX2RpY3RbdHNfdmFsX2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzX3F1ZXJ5X2FycmF5W2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfbWV0cmljID0gKG1ldHJpY3MsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBkZWZhdWx0X21ldHJpYztcbiAgICBpZiAobWV0cmljX3RzX3NjaGVtYSAhPSBudWxsKSB7XG4gICAgICAgIGRlZmF1bHRfbWV0cmljID0gbWV0cmljcy5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfdHNfc2NoZW1hICYmIChtZXRyaWNfcXVlcnkgPT0gbnVsbCB8fCBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSkpO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdF9tZXRyaWMgPT0gbnVsbCkge1xuICAgICAgICBkZWZhdWx0X21ldHJpYyA9IG1ldHJpY3MuZmluZCgobSkgPT4gbS5kZWZhdWx0X3Zpc2libGUgPT0gdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0X21ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0X21ldHJpYztcbiAgICB9XG4gICAgcmV0dXJuIG1ldHJpY3NbMF07XG59O1xuXG5jb25zdCBtZXRyaWNzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsLFxuICAgICAgICBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwsXG4gICAgICAgIGdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzLFxuICAgICAgICBnZXRfdHNfZ3JvdXAsXG4gICAgICAgIGdldF90c19ncm91cF9pZCxcblxuICAgICAgICBzb3VyY2VzX3R5cGVzLFxuICAgICAgICBzb3VyY2VzX3R5cGVzX3RhYmxlcyxcbiAgICAgICAgZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQsXG4gICAgICAgIGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUsXG5cbiAgICAgICAgZ2V0X3NvdXJjZXMsXG4gICAgICAgIGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSxcbiAgICAgICAgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QsXG4gICAgICAgIGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSxcbiAgICAgICAgZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5LFxuXG4gICAgICAgIGdldF9tZXRyaWNzLFxuICAgICAgICBnZXRfbWV0cmljX2Zyb21fc2NoZW1hLFxuICAgICAgICBnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnksXG4gICAgICAgIGdldF9kZWZhdWx0X21ldHJpYyxcblxuICAgICAgICBzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwsXG5cbiAgICAgICAgdWlfdHlwZXMsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc01hbmFnZXI7XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtQ29sb3JzKGNvbG9ycykge1xuICAgIGxldCBjb2xvcnNQb3NpdGlvbkRpY3QgPSB7fTtcbiAgICBjb2xvcnMuZm9yRWFjaCgoYywgaSkgPT4ge1xuXHRpZiAoY29sb3JzUG9zaXRpb25EaWN0W2NdID09IG51bGwpIHtcblx0ICAgIGNvbG9yc1Bvc2l0aW9uRGljdFtjXSA9IFtpXTtcblx0fSBlbHNlIHtcblx0ICAgIGNvbG9yc1Bvc2l0aW9uRGljdFtjXS5wdXNoKGkpO1xuXHR9XG4gICAgfSk7XG4gICAgLy8gY2xvbmUgY29sb3JzXG4gICAgbGV0IG5ld0NvbG9ycyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGNvbG9ycyk7XG4gICAgXG4gICAgZm9yIChsZXQgY29sb3IgaW4gY29sb3JzUG9zaXRpb25EaWN0KSB7XG5cdGxldCBjb2xvcnNQb3NpdGlvbiA9IGNvbG9yc1Bvc2l0aW9uRGljdFtjb2xvcl07XG5cdGxldCBuID0gY29sb3JzUG9zaXRpb24ubGVuZ3RoO1xuXHQvLyBjb2xvcnNHZW5lcmF0ZWQubGVuZ3RoID09IGNvbG9yc1Bvc2l0aW9uLmxlbmd0aCBhbHdheXMgdHJ1ZVxuXHRsZXQgY29sb3JzR2VuZXJhdGVkID0gZ2V0Q29sb3JzRnJvbUNvbG9yKGNvbG9yLCBuKTtcblx0Y29sb3JzR2VuZXJhdGVkLmZvckVhY2goKGMsIGkpID0+IHtcblx0ICAgIGxldCBjUG9zaXRpb24gPSBjb2xvcnNQb3NpdGlvbltpXTtcblx0ICAgIG5ld0NvbG9yc1tjUG9zaXRpb25dID0gYztcblx0fSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdDb2xvcnM7XG59XG5cbmZ1bmN0aW9uIGdldENvbG9yc0Zyb21Db2xvcihjb2xvciwgbikge1xuICAgIHJldHVybiBbLi4uQXJyYXkobikua2V5cygpXS5tYXAoKGMsIGkpID0+IHtcblx0cmV0dXJuIGdlbmVyYXRlQ29sb3IoY29sb3IsIGkgKyAxLCBuKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGNvbG9yIHRoYXQgcmVwcmVzZW50IHRoZSBpbmRleC10aCB0aW50IG9mIG4gb2YgYmFzZUNvbG9yLlxuICogQHBhcmFtIHtiYXNlQ29sb3J9IHN0cmluZyBjb2xvciBpbiBoZXggZm9ybWF0LlxuICogQHBhcmFtIHtpbmRleH0gaW50ZWdlciBpbiBpbnRlcnZhbCBbMSwgbl0uXG4gKiBAcGFyYW0ge259IHRvdGFsIG51bWJlciBvZiBjb2xvcnMgdG8gZ2VuZXJhdGVcbioqL1xuZnVuY3Rpb24gZ2VuZXJhdGVDb2xvcihiYXNlQ29sb3IsIGluZGV4LCBuKSB7XG4gICAgbGV0IHNvdXJjZUNvbG9yID0gYmFzZUNvbG9yLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xuXG4gICAgbGV0IHJlZFNvdXJjZSA9IHBhcnNlSW50KHNvdXJjZUNvbG9yLnN1YnN0cmluZygwLCAyKSwgMTYpO1xuICAgIGxldCBncmVlblNvdXJjZSA9IHBhcnNlSW50KHNvdXJjZUNvbG9yLnN1YnN0cmluZygyLCA0KSwgMTYpO1xuICAgIGxldCBibHVlU291cmNlID0gcGFyc2VJbnQoc291cmNlQ29sb3Iuc3Vic3RyaW5nKDQsIDYpLCAxNik7XG5cbiAgICBsZXQgY1JlZCA9IGdldENvbG9ySW50ZXJwb2xhdGlvbihyZWRTb3VyY2UsIGluZGV4LCBuKTtcbiAgICBsZXQgY0dyZWVuID0gZ2V0Q29sb3JJbnRlcnBvbGF0aW9uKGdyZWVuU291cmNlLCBpbmRleCwgbik7XG4gICAgbGV0IGNCbHVlID0gZ2V0Q29sb3JJbnRlcnBvbGF0aW9uKGJsdWVTb3VyY2UsIGluZGV4LCBuKTtcblxuICAgIHJldHVybiByZ2JUb0hleChjUmVkLCBjR3JlZW4sIGNCbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29sb3JJbnRlcnBvbGF0aW9uKGNvbG9yU291cmNlLCBpLCBuKSB7ICAgIFxuICAgIGlmIChuIDw9IDEpIHtcblx0cmV0dXJuIGNvbG9yU291cmNlO1xuICAgIH1cbiAgICBsZXQgY29sb3JTdGFydCA9IE1hdGgudHJ1bmMoY29sb3JTb3VyY2UgLyAyKTtcbiAgICBsZXQgY29sb3JFbmQgPSBNYXRoLnRydW5jKGNvbG9yU291cmNlICsgKCgyNTUgLSBjb2xvclNvdXJjZSkgLyAyKSk7XG4gICAgbGV0IGludGVydmFsID0gTWF0aC50cnVuYygoY29sb3JFbmQgLSBjb2xvclN0YXJ0KSAvIG4pO1xuXG4gICAgcmV0dXJuIGNvbG9yU3RhcnQgKyBpICogaW50ZXJ2YWw7XG4gICAgLy8gcmV0dXJuIGNvbG9yU3RhcnQgKyAobiAtIGkpICogaW50ZXJ2YWw7XG59XG5cbmZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBjb21wb25lbnRUb0hleChyKSArIGNvbXBvbmVudFRvSGV4KGcpICsgY29tcG9uZW50VG9IZXgoYik7XG59XG5cbmZ1bmN0aW9uIGNvbXBvbmVudFRvSGV4KGMpIHtcbiAgICBsZXQgaGV4ID0gYy50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggPT0gMSA/IFwiMFwiICsgaGV4IDogaGV4O1xufVxuXG5jb25zdCBjb2xvcnNJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcblx0dHJhbnNmb3JtQ29sb3JzLFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9yc0ludGVycG9sYXRpb247XG4iLCIvKipcblx0XHQoQykgMjAyMiAtIG50b3Aub3JnXG4qL1xuXG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4vZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgY29sb3JzSW50ZXJwb2xhdGlvbiBmcm9tIFwiLi9jb2xvcnMtaW50ZXJwb2xhdGlvblwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGNvbnN0YW50X3NlcmllX2NvbG9ycyA9IHtcblx0XCI5NV9wZXJjXCI6IFwiIzhFQTRFOFwiLFxuXHRcImF2Z1wiOiBcIiM4MzlCRTZcIixcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVJZChzZXJpZSkge1xuXHRyZXR1cm4gYCR7c2VyaWUuaWR9YDtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVOYW1lKG5hbWUsIGlkLCB0c0dyb3VwLCB1c2VGdWxsTmFtZSkge1xuXHRpZiAobmFtZSA9PSBudWxsKSB7XG5cdFx0bmFtZSA9IGlkO1xuXHR9XG5cdGxldCBuYW1lX21vcmVfc3BhY2UgPSBcIlwiO1xuXHRpZiAobmFtZSAhPSBudWxsKSB7XG5cdFx0bmFtZV9tb3JlX3NwYWNlID0gYCR7bmFtZX1gO1xuXHR9XG5cdGlmICh1c2VGdWxsTmFtZSA9PSBmYWxzZSkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdGxldCBzb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdGxldCBzb3VyY2UgPSB0c0dyb3VwLnNvdXJjZV9hcnJheVtzb3VyY2VfaW5kZXhdO1xuXHRsZXQgcHJlZml4ID0gYCR7c291cmNlLmxhYmVsfWA7XG5cdHJldHVybiBgJHtwcmVmaXh9IC0gJHtuYW1lX21vcmVfc3BhY2V9YDtcbn1cblxuZnVuY3Rpb24gZ2V0WWF4aXNJZChtZXRyaWMpIHtcblx0cmV0dXJuIGAke21ldHJpYy5tZWFzdXJlX3VuaXR9XyR7bWV0cmljLnNjYWxlfWA7XG59XG5cbmNvbnN0IGRlZmF1bHRDb2xvcnMgPSBbXG5cdFwiI0M2RDlGRFwiLFxuXHRcIiM5MEVFOTBcIixcblx0XCIjRUU4NDM0XCIsXG5cdFwiI0M5NUQ2M1wiLFxuXHRcIiNBRTg3OTlcIixcblx0XCIjNzE3RUMzXCIsXG5cdFwiIzQ5NkREQlwiLFxuXHRcIiM1QTdBREVcIixcblx0XCIjNjk4NkUxXCIsXG5cdFwiIzc3OTFFNFwiLFxuXHRcIiM4MzlCRTZcIixcblx0XCIjOEVBNEU4XCIsXG5dO1xuXG5mdW5jdGlvbiBzZXRTZXJpZXNDb2xvcnMocGFsZXR0ZV9saXN0KSB7XG5cdGxldCBjb2xvcnNfbGlzdCA9IHBhbGV0dGVfbGlzdDtcblx0bGV0IGNvdW50MCA9IDAsIGNvdW50MSA9IDA7XG5cdGxldCBjb2xvcnMwID0gZGVmYXVsdENvbG9ycztcblx0bGV0IGNvbG9yczEgPSBkM3Y3LnNjaGVtZUNhdGVnb3J5MTA7XG5cdGNvbG9yc19saXN0LmZvckVhY2goKHMsIGluZGV4KSA9PiB7XG5cdFx0aWYgKHMucGFsZXR0ZSA9PSAwKSB7XG5cdFx0XHRwYWxldHRlX2xpc3RbaW5kZXhdID0gY29sb3JzMFtjb3VudDAgJSBjb2xvcnMwLmxlbmd0aF07XG5cdFx0XHRjb3VudDAgKz0gMTtcblx0XHR9IGVsc2UgaWYgKHMucGFsZXR0ZSA9PSAxKSB7XG5cdFx0XHRwYWxldHRlX2xpc3RbaW5kZXhdID0gY29sb3JzMVtjb3VudDEgJSBjb2xvcnMxLmxlbmd0aF07XG5cdFx0XHRjb3VudDEgKz0gMTtcblx0XHR9XG5cdH0pO1xufVxuXG5jb25zdCBncm91cHNPcHRpb25zTW9kZXNFbnVtID0ge1xuXHQnMV9jaGFydF94X21ldHJpYyc6IHsgdmFsdWU6IFwiMV9jaGFydF94X21ldHJpY1wiLCBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5sYXlvdXRfMV9wZXJfMScpIH0sXG5cdCcxX2NoYXJ0X3hfeWF4aXMnOiB7IHZhbHVlOiBcIjFfY2hhcnRfeF95YXhpc1wiLCBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5sYXlvdXRfMV9wZXJfeScpIH0sXG59XG5cbmZ1bmN0aW9uIGdldEdyb3VwT3B0aW9uTW9kZShncm91cF9pZCkge1xuXHRyZXR1cm4gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtncm91cF9pZF0gfHwgbnVsbDtcbn07XG5cbi8qIFRoaXMgZnVuY3Rpb24gaXMgZ29pbmcgdG8gdHJhbnNsYXRlIHRoZSByZXNwb25zZSBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgZm9ybWF0dGVkIGRhdGEgbmVlZGVkIGZyb20gdGhlIGNoYXJ0IGxpYnJhcnkgKi9cbmZ1bmN0aW9uIHRzQXJyYXlUb09wdGlvbnNBcnJheSh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSkge1xuXHQvKiBPbmUgY2hhcnQgcGVyIG1ldHJpYyByZXF1ZXN0ZWQgKi9cblx0aWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfbWV0cmljXCJdLnZhbHVlKSB7XG5cdFx0cmV0dXJuIHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSk7XG5cdH1cblx0bGV0IHNwbGl0dGVkVHNBcnJheSA9IHNwbGl0VHNBcnJheVN0YWNrZWQodHNPcHRpb25zQXJyYXksIHRzR3JvdXBzQXJyYXkpO1xuXHRsZXQgRHlncmFwaE9wdGlvbnNTdGFja2VkID0gdHNBcnJheVRvT3B0aW9uc0FycmF5UmF3KHNwbGl0dGVkVHNBcnJheS5zdGFja2VkLnRzT3B0aW9uc0FycmF5LCBzcGxpdHRlZFRzQXJyYXkuc3RhY2tlZC50c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZXNFbnVtW1wiMV9jaGFydF94X21ldHJpY1wiXSwgdHNDb21wYXJlKTtcblx0bGV0IER5Z3JhcGhPcHRpb25zTm90U3RhY2tlZCA9IHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyhzcGxpdHRlZFRzQXJyYXkubm90X3N0YWNrZWQudHNPcHRpb25zQXJyYXksIHNwbGl0dGVkVHNBcnJheS5ub3Rfc3RhY2tlZC50c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKTtcblx0Ly9jb25zb2xlLmxvZyhbLi4uRHlncmFwaE9wdGlvbnNTdGFja2VkLCAuLi5EeWdyYXBoT3B0aW9uc05vdFN0YWNrZWRdKVxuXHRyZXR1cm4gWy4uLkR5Z3JhcGhPcHRpb25zU3RhY2tlZCwgLi4uRHlncmFwaE9wdGlvbnNOb3RTdGFja2VkXTtcbn1cblxuZnVuY3Rpb24gc3BsaXRUc0FycmF5U3RhY2tlZCh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSkge1xuXHRsZXQgdHNPcHRpb25zQXJyYXlTdGFja2VkID0gW107XG5cdGxldCB0c0dyb3Vwc0FycmF5U3RhY2tlZCA9IFtdO1xuXHRsZXQgdHNPcHRpb25zQXJyYXlOb3RTdGFja2VkID0gW107XG5cdGxldCB0c0dyb3Vwc0FycmF5Tm90U3RhY2tlZCA9IFtdO1xuXHR0c0dyb3Vwc0FycmF5LmZvckVhY2goKHRzR3JvdXAsIGkpID0+IHtcblx0XHRpZiAodHNHcm91cC5tZXRyaWMuZHJhd19zdGFja2VkID09IHRydWUpIHtcblx0XHRcdHRzT3B0aW9uc0FycmF5U3RhY2tlZC5wdXNoKHRzT3B0aW9uc0FycmF5W2ldKTtcblx0XHRcdHRzR3JvdXBzQXJyYXlTdGFja2VkLnB1c2godHNHcm91cCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRzT3B0aW9uc0FycmF5Tm90U3RhY2tlZC5wdXNoKHRzT3B0aW9uc0FycmF5W2ldKTtcblx0XHRcdHRzR3JvdXBzQXJyYXlOb3RTdGFja2VkLnB1c2godHNHcm91cCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHtcblx0XHRzdGFja2VkOiB7XG5cdFx0XHR0c09wdGlvbnNBcnJheTogdHNPcHRpb25zQXJyYXlTdGFja2VkLFxuXHRcdFx0dHNHcm91cHNBcnJheTogdHNHcm91cHNBcnJheVN0YWNrZWQsXG5cdFx0fSxcblx0XHRub3Rfc3RhY2tlZDoge1xuXHRcdFx0dHNPcHRpb25zQXJyYXk6IHRzT3B0aW9uc0FycmF5Tm90U3RhY2tlZCxcblx0XHRcdHRzR3JvdXBzQXJyYXk6IHRzR3JvdXBzQXJyYXlOb3RTdGFja2VkLFxuXHRcdH0sXG5cdH07XG59XG5cbmZ1bmN0aW9uIHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSkge1xuXHRsZXQgdXNlRnVsbE5hbWUgPSBmYWxzZTtcblx0aWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfeWF4aXNcIl0udmFsdWUpIHtcblx0XHRsZXQgdHNEaWN0ID0ge307XG5cdFx0dHNHcm91cHNBcnJheS5mb3JFYWNoKCh0c0dyb3VwLCBpKSA9PiB7XG5cdFx0XHRsZXQgeWF4aXNJZCA9IGdldFlheGlzSWQodHNHcm91cC5tZXRyaWMpO1xuXHRcdFx0bGV0IHRzRWwgPSB7IHRzR3JvdXAsIHRzT3B0aW9uczogdHNPcHRpb25zQXJyYXlbaV0gfTtcblx0XHRcdGlmICh0c0RpY3RbeWF4aXNJZF0gPT0gbnVsbCkge1xuXHRcdFx0XHR0c0RpY3RbeWF4aXNJZF0gPSBbdHNFbF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0c0RpY3RbeWF4aXNJZF0ucHVzaCh0c0VsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR1c2VGdWxsTmFtZSA9IHRzR3JvdXBzQXJyYXkubGVuZ3RoID4gMSB8fCAodHNHcm91cHNBcnJheS5sZW5ndGggPiAwXG5cdFx0XHQmJiB0c0dyb3Vwc0FycmF5WzBdLnNvdXJjZV90eXBlLmRpc3BsYXlfZnVsbF9uYW1lID09PSB0cnVlKTtcblx0XHRsZXQgRHlncmFwaE9wdGlvbnNBcnJheSA9IFtdO1xuXHRcdGZvciAobGV0IGtleSBpbiB0c0RpY3QpIHtcblx0XHRcdGxldCB0c0FycmF5ID0gdHNEaWN0W2tleV07XG5cdFx0XHRsZXQgdHNPcHRpb25zQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c09wdGlvbnMpO1xuXHRcdFx0bGV0IHRzR3JvdXBzQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c0dyb3VwKTtcblx0XHRcdGxldCBEeWdyYXBoT3B0aW9ucyA9IHRzQXJyYXlUb09wdGlvbnModHNPcHRpb25zQXJyYXkyLCB0c0dyb3Vwc0FycmF5MiwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSk7XG5cdFx0XHREeWdyYXBoT3B0aW9uc0FycmF5LnB1c2goRHlncmFwaE9wdGlvbnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gRHlncmFwaE9wdGlvbnNBcnJheTtcblx0fSBlbHNlIGlmIChncm91cHNPcHRpb25zTW9kZS52YWx1ZSA9PSBncm91cHNPcHRpb25zTW9kZXNFbnVtW1wiMV9jaGFydF94X21ldHJpY1wiXS52YWx1ZSkge1xuXHRcdHVzZUZ1bGxOYW1lID0gdHNPcHRpb25zQXJyYXkubGVuZ3RoID4gMSB8fCAodHNHcm91cHNBcnJheS5sZW5ndGggPiAwXG5cdFx0XHQmJiB0c0dyb3Vwc0FycmF5WzBdLnNvdXJjZV90eXBlLmRpc3BsYXlfZnVsbF9uYW1lID09PSB0cnVlKTtcblx0XHRsZXQgb3B0aW9uc0FycmF5ID0gW107XG5cdFx0dHNPcHRpb25zQXJyYXkuZm9yRWFjaCgodHNPcHRpb25zLCBpKSA9PiB7XG5cdFx0XHRsZXQgb3B0aW9ucyA9IHRzQXJyYXlUb09wdGlvbnMoW3RzT3B0aW9uc10sIFt0c0dyb3Vwc0FycmF5W2ldXSwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSk7XG5cdFx0XHRvcHRpb25zQXJyYXkucHVzaChvcHRpb25zKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gb3B0aW9uc0FycmF5O1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2VyaWVQcm9wZXJ0aWVzKHR5cGUpIHtcblx0aWYgKHR5cGUgPT0gXCJwb2ludFwiKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbGxHcmFwaDogZmFsc2UsXG5cdFx0XHRjdXN0b21CYXJzOiBmYWxzZSxcblx0XHRcdHN0cm9rZVdpZHRoOiAwLjAsXG5cdFx0XHRwb2ludFNpemU6IDIuMCxcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZSA9PSBcImxpbmVcIikge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmaWxsR3JhcGg6IGZhbHNlLFxuXHRcdFx0Y3VzdG9tQmFyczogZmFsc2UsXG5cdFx0XHRzdHJva2VXaWR0aDogMS41LFxuXHRcdFx0cG9pbnRTaXplOiAxLjUsXG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGUgPT0gXCJib3VuZHNcIikge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmaWxsR3JhcGg6IGZhbHNlLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IDEuMCxcblx0XHRcdHBvaW50U2l6ZTogMS41LFxuXHRcdFx0ZmlsbEFscGhhOiAwLjVcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbGxHcmFwaDogdHJ1ZSxcblx0XHRcdGN1c3RvbUJhcnM6IGZhbHNlLFxuXHRcdFx0c3Ryb2tlV2lkdGg6IDEuMCxcblx0XHRcdHBvaW50U2l6ZTogMS41LFxuXHRcdFx0ZmlsbEFscGhhOiAwLjVcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0Qm91bmRzU2VyaWUoc2VyaWVzLCBzZXJpZXNfaW5mbykge1xuXHRsZXQgZm9ybWF0dGVkX3NlcmllID0gW107XG5cdGxldCBjb2xvcl9wYWxldHRlID0ge307XG5cdGxldCBmb3JtYXR0ZXIgPSBudWxsO1xuXHRsZXQgc2VyaWVfbmFtZSA9IG51bGw7XG5cdGxldCBzZXJpZV9wcm9wZXJ0aWVzID0ge31cblx0c2VyaWVzLmZvckVhY2goKHRzX2luZm8sIGopID0+IHtcblx0XHRsZXQgc2NhbGFyID0gMTtcblx0XHRsZXQgdHNfaWQgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVJZCh0c19pbmZvKTtcblx0XHRjb25zdCBzZXJpZSA9IHRzX2luZm8uZGF0YSB8fCBbXTsgLyogU2FmZXR5IGNoZWNrICovXG5cdFx0bGV0IHNfbWV0YWRhdGEgPSBzZXJpZXNfaW5mby5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG5cblx0XHRpZiAoc19tZXRhZGF0YS5pbnZlcnRfZGlyZWN0aW9uID09IHRydWUpIHtcblx0XHRcdHNjYWxhciA9IC0xO1xuXHRcdH1cblxuXHRcdGlmIChzX21ldGFkYXRhLnR5cGUgPT0gXCJtZXRyaWNcIikge1xuXHRcdFx0bGV0IG5hbWUgPSBzX21ldGFkYXRhLmxhYmVsXG5cdFx0XHRzZXJpZV9uYW1lID0gZ2V0U2VyaWVOYW1lKG5hbWUsIHRzX2lkLCBzZXJpZXNfaW5mbywgdHJ1ZSlcblx0XHRcdHNlcmllX3Byb3BlcnRpZXMgPSBmb3JtYXRTZXJpZVByb3BlcnRpZXMoJ2JvdW5kcycpO1xuXG5cdFx0XHRjb2xvcl9wYWxldHRlID0geyBjb2xvcjogc19tZXRhZGF0YS5jb2xvciwgcGFsZXR0ZTogMCB9O1xuXHRcdFx0Zm9ybWF0dGVyID0gc2VyaWVzX2luZm8ubWV0cmljLm1lYXN1cmVfdW5pdDtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBwb2ludCA9IDA7IHBvaW50IDwgc2VyaWUubGVuZ3RoOyBwb2ludCsrKSB7XG5cdFx0XHRsZXQgc2VyaWVfcG9pbnQgPSBzZXJpZVtwb2ludF1cblx0XHRcdGlmIChzZXJpZV9wb2ludCA9PSBudWxsKVxuXHRcdFx0XHRzZXJpZV9wb2ludCA9IE5hTjtcblx0XHRcdGlmIChmb3JtYXR0ZWRfc2VyaWVbcG9pbnRdID09IG51bGwpIHtcblx0XHRcdFx0Zm9ybWF0dGVkX3NlcmllW3BvaW50XSA9IFswLCBOYU4sIDBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc19tZXRhZGF0YS50eXBlID09IFwibWV0cmljXCIpIHtcblx0XHRcdFx0Zm9ybWF0dGVkX3NlcmllW3BvaW50XVsxXSA9IHNlcmllX3BvaW50ICogc2NhbGFyO1xuXHRcdFx0fSBlbHNlIGlmIChzX21ldGFkYXRhLnR5cGUgPT0gXCJsb3dlcl9ib3VuZFwiKSB7XG5cdFx0XHRcdGZvcm1hdHRlZF9zZXJpZVtwb2ludF1bMF0gPSBzZXJpZV9wb2ludCAqIHNjYWxhcjtcblx0XHRcdH0gZWxzZSBpZiAoc19tZXRhZGF0YS50eXBlID09IFwidXBwZXJfYm91bmRcIikge1xuXHRcdFx0XHRmb3JtYXR0ZWRfc2VyaWVbcG9pbnRdWzJdID0gc2VyaWVfcG9pbnQgKiBzY2FsYXI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KVxuXG5cdHJldHVybiB7IHNlcmllOiBmb3JtYXR0ZWRfc2VyaWUsIGNvbG9yOiBjb2xvcl9wYWxldHRlLCBmb3JtYXR0ZXI6IGZvcm1hdHRlciwgc2VyaWVfbmFtZTogc2VyaWVfbmFtZSwgcHJvcGVydGllczogc2VyaWVfcHJvcGVydGllcyB9O1xufVxuXG4vKiBHaXZlbiBhbiBhcnJheSBvZiB0aW1lc2VyaWVzLCBpdCBjb21wYWN0cyB0aGVtIGludG8gYSBzaW5nbGUgYXJyYXkgKi9cbmZ1bmN0aW9uIHRzQXJyYXlUb09wdGlvbnModHNPcHRpb25zQXJyYXksIHRzR3JvdXBzQXJyYXksIHRzQ29tcGFyZSwgdXNlRnVsbE5hbWUpIHtcblx0aWYgKHRzT3B0aW9uc0FycmF5Lmxlbmd0aCAhPSB0c0dyb3Vwc0FycmF5Lmxlbmd0aCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIHRpbWVzZXJpZXMtdXRpbHM6dHNBcnJheVRvT3B0aW9uczogdHNPcHRpb25zQXJyYXkgJHt0c09wdGlvbnNBcnJheX0gZGlmZmVyZW50IGxlbmd0aCBmcm9tIHRzR3JvdXBzQXJyYXkgJHt0c0dyb3Vwc0FycmF5fWApO1xuXHRcdHJldHVybjtcblx0fVxuXHRsZXQgZm9ybWF0dGVkX3NlcmllID0gW107XG5cdGxldCBmb3JtYXR0ZXJzID0gW11cblx0bGV0IHNlcmllX2xhYmVscyA9IFtcIlRpbWVcIl07XG5cdGxldCBzdGFja2VkID0gZmFsc2U7XG5cdGxldCBjb2xvcnMgPSBbXTtcblx0bGV0IGNvbG9yc19wYWxldHRlID0gW107XG5cdGxldCBzZXJpZV9wcm9wZXJ0aWVzID0ge307XG5cdGxldCBjdXN0b21CYXJzID0gZmFsc2U7XG5cdGxldCB1c2VfZnVsbF9uYW1lID0gKHVzZUZ1bGxOYW1lICE9IG51bGwpID8gdXNlRnVsbE5hbWUgOiBmYWxzZTtcblxuXHQvKiBHbyB0aHJvdWdodCBlYWNoIHNlcmllICovXG5cdHRzT3B0aW9uc0FycmF5LmZvckVhY2goKHRzT3B0aW9ucywgaSkgPT4ge1xuXHRcdC8qIEZvcm1hdCB0aGUgZGF0YSAqL1xuXHRcdC8qIHRoZSBkYXRhIGluIER5Z3JhcGhzIHNob3VsZCBiZSBmb3JtYXR0ZWQgYXMgZm9sbG93OlxuXHRcdCAqIHsgWyB0aW1lXzEsIHNlcmllMV8xLCBzZXJpZTJfMSBdLCBbIHRpbWVfMiwgc2VyaWUxXzIsIHNlcmllMl8yIF0gfSBcblx0XHQgKi9cblxuXHRcdGNvbnN0IHNlcmllcyA9IHRzT3B0aW9ucy5zZXJpZXMgfHwgW107XG5cdFx0Y29uc3QgZXBvY2hfYmVnaW4gPSB0c09wdGlvbnMubWV0YWRhdGEuZXBvY2hfYmVnaW5cblx0XHRjb25zdCBzdGVwID0gdHNPcHRpb25zLm1ldGFkYXRhLmVwb2NoX3N0ZXBcblx0XHRjb25zdCBwYXN0X3NlcmllID0gdHNPcHRpb25zLmFkZGl0aW9uYWxfc2VyaWVzXG5cdFx0Y29uc3QgYm91bmRzID0gdHNHcm91cHNBcnJheVtpXS5tZXRyaWMuYm91bmRzIHx8IGZhbHNlO1xuXG5cdFx0LyogVGhlIHNlcmllIGNhbiBwb3NzaWJseSBoYXZlIG11bHRpcGxlIHRpbWVzZXJpZXMsIGxpa2UgZm9yIHRoZSBcblx0XHQgKiBieXRlcywgd2UgaGF2ZSBzZW50IGFuZCByY3ZkLCBzbyBjb21wYWN0IHRoZW0gXG5cdFx0ICovXG5cdFx0aWYgKGJvdW5kcyA9PSB0cnVlKSB7XG5cdFx0XHQvKiBUT0RPOiBhZGQgYXZnLCBwYXN0LCBlY2MuIHRpbWVzZXJpZXMgdG8gdGhlIGJvdW5kcyBvbmUgKi9cblx0XHRcdGN1c3RvbUJhcnMgPSB0cnVlO1xuXHRcdFx0bGV0IHRpbWUgPSBlcG9jaF9iZWdpbjtcblx0XHRcdGNvbnN0IHsgc2VyaWUsIGNvbG9yLCBmb3JtYXR0ZXIsIHNlcmllX25hbWUsIHByb3BlcnRpZXMgfSA9IGZvcm1hdEJvdW5kc1NlcmllKHNlcmllcywgdHNHcm91cHNBcnJheVtpXSwgdGltZSwgc3RlcCk7XG5cdFx0XHRjb2xvcnNfcGFsZXR0ZS5wdXNoKGNvbG9yKTtcblx0XHRcdGNvbnN0IGZvdW5kID0gZm9ybWF0dGVycy5maW5kKGVsID0+IGVsID09IGZvcm1hdHRlcik7XG5cdFx0XHRpZiAoZm91bmQgPT0gbnVsbClcblx0XHRcdFx0Zm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG5cdFx0XHRjb25zdCBmb3JtYXR0ZWRfbmFtZSA9IGAke3NlcmllX25hbWV9ICR7aTE4bignbG93ZXJfdmFsdWVfdXBwZXInKX1gXG5cdFx0XHRzZXJpZV9sYWJlbHMucHVzaChmb3JtYXR0ZWRfbmFtZSk7XG5cdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW2Zvcm1hdHRlZF9uYW1lXSA9IHt9XG5cdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW2Zvcm1hdHRlZF9uYW1lXSA9IHByb3BlcnRpZXM7XG5cdFx0XHRjb25zdCBzZXJpZV9rZXlzID0gT2JqZWN0LmtleXMoc2VyaWUpO1xuXHRcdFx0c2VyaWVfa2V5cy5mb3JFYWNoKChrZXksIGopID0+IHtcblx0XHRcdFx0Y29uc3QgdHNfaW5mbyA9IHNlcmllW2tleV07XG5cdFx0XHRcdGlmIChmb3JtYXR0ZWRfc2VyaWVbdGltZV0gPT0gbnVsbClcblx0XHRcdFx0XHRmb3JtYXR0ZWRfc2VyaWVbdGltZV0gPSBbXG5cdFx0XHRcdFx0XHR7IHZhbHVlOiBuZXcgRGF0ZSh0aW1lICogMTAwMCksIG5hbWU6IFwiVGltZVwiIH0sXG5cdFx0XHRcdFx0XHR7IHZhbHVlOiB0c19pbmZvLCBuYW1lOiBmb3JtYXR0ZWRfbmFtZSB9XG5cdFx0XHRcdFx0XVxuXG5cdFx0XHRcdHRpbWUgPSB0aW1lICsgc3RlcDtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZXJpZXMuZm9yRWFjaCgodHNfaW5mbywgaikgPT4ge1xuXHRcdFx0XHRjb25zdCBzZXJpZSA9IHRzX2luZm8uZGF0YSB8fCBbXTsgLyogU2FmZXR5IGNoZWNrICovXG5cdFx0XHRcdGxldCB0aW1lID0gZXBvY2hfYmVnaW47XG5cblx0XHRcdFx0bGV0IHRzX2lkID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllSWQodHNfaW5mbyk7XG5cdFx0XHRcdGxldCBzX21ldGFkYXRhID0gdHNHcm91cHNBcnJheVtpXS5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG5cdFx0XHRcdGxldCBleHRyYV90aW1lc2VyaWVzID0gdHNHcm91cHNBcnJheVtpXS50aW1lc2VyaWVzW2pdO1xuXHRcdFx0XHRsZXQgc2NhbGFyID0gMTtcblx0XHRcdFx0bGV0IG5hbWUgPSBzX21ldGFkYXRhLmxhYmVsXG5cblx0XHRcdFx0aWYgKHNfbWV0YWRhdGEuaGlkZGVuKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNfbWV0YWRhdGEudXNlX3NlcmllX25hbWUgPT0gdHJ1ZSkge1xuXHRcdFx0XHRcdG5hbWUgPSB0c19pbmZvLm5hbWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc3RhY2tlZCA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHN0YWNrZWQgPSB0c0dyb3Vwc0FycmF5W2ldLm1ldHJpYy5kcmF3X3N0YWNrZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc19tZXRhZGF0YS5pbnZlcnRfZGlyZWN0aW9uID09IHRydWUpIHtcblx0XHRcdFx0XHRzY2FsYXIgPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb2xvcnNfcGFsZXR0ZS5wdXNoKHsgY29sb3I6IHNfbWV0YWRhdGEuY29sb3IsIHBhbGV0dGU6IDAgfSk7XG5cdFx0XHRcdC8qIFNlYXJjaCBmb3IgdGhlIGZvcm1hdHRlciBpbiB0aGUgYXJyYXksIGlmIG5vdCBmb3VuZCwgYWRkIGl0LiAqL1xuXHRcdFx0XHRjb25zdCBmb3VuZCA9IGZvcm1hdHRlcnMuZmluZChlbCA9PiBlbCA9PSB0c0dyb3Vwc0FycmF5W2ldLm1ldHJpYy5tZWFzdXJlX3VuaXQpO1xuXHRcdFx0XHRpZiAoZm91bmQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGZvcm1hdHRlcnMucHVzaCh0c0dyb3Vwc0FycmF5W2ldLm1ldHJpYy5tZWFzdXJlX3VuaXQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRzX2luZm8uZXh0X2xhYmVsKSB7XG5cdFx0XHRcdFx0bmFtZSA9IHRzX2luZm8uZXh0X2xhYmVsXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cdFx0XHRcdGNvbnN0IHNlcmllX25hbWUgPSBnZXRTZXJpZU5hbWUobmFtZSwgdHNfaWQsIHRzR3JvdXBzQXJyYXlbaV0sIHVzZV9mdWxsX25hbWUpXG5cdFx0XHRcdGNvbnN0IGF2Z19sYWJlbCA9IGdldFNlcmllTmFtZShuYW1lICsgXCIgQXZnXCIsIHRzX2lkLCB0c0dyb3Vwc0FycmF5W2ldLCB1c2VfZnVsbF9uYW1lKVxuXHRcdFx0XHRjb25zdCBwZXJjX2xhYmVsID0gZ2V0U2VyaWVOYW1lKG5hbWUgKyBcIiA5NXRoIFBlcmNcIiwgdHNfaWQsIHRzR3JvdXBzQXJyYXlbaV0sIHVzZV9mdWxsX25hbWUpO1xuXHRcdFx0XHRjb25zdCBwYXN0X2xhYmVsID0gZ2V0U2VyaWVOYW1lKG5hbWUgKyBcIiBcIiArIHRzQ29tcGFyZSArIFwiIEFnb1wiLCB0c19pZCwgdHNHcm91cHNBcnJheVtpXSwgdXNlX2Z1bGxfbmFtZSk7XG5cdFx0XHRcdC8qIEFkZCB0aGUgc2VyaWUgbGFiZWwgdG8gdGhlIGFycmF5IG9mIHRoZSBsYWJlbHMgKi9cblx0XHRcdFx0c2VyaWVfbGFiZWxzLnB1c2goc2VyaWVfbmFtZSk7XG5cblx0XHRcdFx0c2VyaWVfcHJvcGVydGllc1tzZXJpZV9uYW1lXSA9IHt9XG5cdFx0XHRcdHNlcmllX3Byb3BlcnRpZXNbc2VyaWVfbmFtZV0gPSBmb3JtYXRTZXJpZVByb3BlcnRpZXModHNfaW5mby50eXBlIHx8ICdmaWxsZWQnKTtcblxuXHRcdFx0XHQvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cdFx0XHRcdC8qIEFkZGluZyB0aGUgZXh0cmEgdGltZXNlcmllcywgMzBtIGFnbywgYXZnIGFuZCA5NXRoICovXG5cdFx0XHRcdGlmIChleHRyYV90aW1lc2VyaWVzPy5hdmcgPT0gdHJ1ZSkge1xuXHRcdFx0XHRcdC8qIEFkZCB0aGUgc2VyaWUgbGFiZWwgdG8gdGhlIGFycmF5IG9mIHRoZSBsYWJlbHMgKi9cblx0XHRcdFx0XHRzZXJpZV9sYWJlbHMucHVzaChhdmdfbGFiZWwpO1xuXG5cdFx0XHRcdFx0c2VyaWVfcHJvcGVydGllc1thdmdfbGFiZWxdID0ge31cblx0XHRcdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW2F2Z19sYWJlbF0gPSBmb3JtYXRTZXJpZVByb3BlcnRpZXMoXCJwb2ludFwiKTtcblx0XHRcdFx0XHRjb2xvcnNfcGFsZXR0ZS5wdXNoKHsgY29sb3I6IGNvbnN0YW50X3NlcmllX2NvbG9yc1tcImF2Z1wiXSwgcGFsZXR0ZTogMSB9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChleHRyYV90aW1lc2VyaWVzPy5wZXJjXzk1ID09IHRydWUpIHtcblx0XHRcdFx0XHQvKiBBZGQgdGhlIHNlcmllIGxhYmVsIHRvIHRoZSBhcnJheSBvZiB0aGUgbGFiZWxzICovXG5cdFx0XHRcdFx0c2VyaWVfbGFiZWxzLnB1c2gocGVyY19sYWJlbCk7XG5cblx0XHRcdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW3BlcmNfbGFiZWxdID0ge31cblx0XHRcdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW3BlcmNfbGFiZWxdID0gZm9ybWF0U2VyaWVQcm9wZXJ0aWVzKFwicG9pbnRcIik7XG5cdFx0XHRcdFx0Y29sb3JzX3BhbGV0dGUucHVzaCh7IGNvbG9yOiBjb25zdGFudF9zZXJpZV9jb2xvcnNbXCJwZXJjXzk1XCJdLCBwYWxldHRlOiAxIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChleHRyYV90aW1lc2VyaWVzPy5wYXN0ID09IHRydWUpIHtcblx0XHRcdFx0XHQvKiBBZGQgdGhlIHNlcmllIGxhYmVsIHRvIHRoZSBhcnJheSBvZiB0aGUgbGFiZWxzICovXG5cdFx0XHRcdFx0c2VyaWVfbGFiZWxzLnB1c2gocGFzdF9sYWJlbCk7XG5cblx0XHRcdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW3Bhc3RfbGFiZWxdID0ge31cblx0XHRcdFx0XHRzZXJpZV9wcm9wZXJ0aWVzW3Bhc3RfbGFiZWxdID0gZm9ybWF0U2VyaWVQcm9wZXJ0aWVzKFwibGluZVwiKTtcblx0XHRcdFx0XHRjb2xvcnNfcGFsZXR0ZS5wdXNoKHsgY29sb3I6IGNvbnN0YW50X3NlcmllX2NvbG9yc1tcInBhc3RcIl0sIHBhbGV0dGU6IDEgfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cdFx0XHRcdGZvciAobGV0IHBvaW50ID0gMDsgcG9pbnQgPCBzZXJpZS5sZW5ndGg7IHBvaW50KyspIHtcblx0XHRcdFx0XHRjb25zdCBzZXJpZV9wb2ludCA9IHNlcmllW3BvaW50XTtcblx0XHRcdFx0XHQvKiBJZiB0aGUgcG9pbnQgaXMgaW5zZXJ0ZWQgZm9yIHRoZSBmaXJzdCB0aW1lLCBhZGQgdGhlIHRpbWUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSAqL1xuXHRcdFx0XHRcdGlmIChmb3JtYXR0ZWRfc2VyaWVbdGltZV0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0Zm9ybWF0dGVkX3NlcmllW3RpbWVdID0gW3sgdmFsdWU6IG5ldyBEYXRlKHRpbWUgKiAxMDAwKSwgbmFtZTogXCJUaW1lXCIgfV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8qIEFkZCB0aGUgcG9pbnQgdG8gdGhlIGFycmF5ICovXG5cdFx0XHRcdFx0aWYgKHNlcmllX3BvaW50ICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdGZvcm1hdHRlZF9zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IHNlcmllX3BvaW50ICogc2NhbGFyLCBuYW1lOiBzZXJpZV9uYW1lIH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmb3JtYXR0ZWRfc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBOYU4sIG5hbWU6IHNlcmllX25hbWUgfSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogQWRkIGV4dHJhIHNlcmllcywgYXZnLCA5NXRoIGFuZCBwYXN0IHRpbWVzZXJpZXMgKi9cblx0XHRcdFx0XHRpZiAoZXh0cmFfdGltZXNlcmllcz8uYXZnID09IHRydWUpIHtcblx0XHRcdFx0XHRcdGZvcm1hdHRlZF9zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IHRzX2luZm8uc3RhdGlzdGljc1tcImF2ZXJhZ2VcIl0gKiBzY2FsYXIsIG5hbWU6IGF2Z19sYWJlbCB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGV4dHJhX3RpbWVzZXJpZXM/LnBlcmNfOTUgPT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0Zm9ybWF0dGVkX3NlcmllW3RpbWVdLnB1c2goeyB2YWx1ZTogdHNfaW5mby5zdGF0aXN0aWNzW1wiOTV0aF9wZXJjZW50aWxlXCJdICogc2NhbGFyICogc2NhbGFyLCBuYW1lOiBwZXJjX2xhYmVsIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZXh0cmFfdGltZXNlcmllcz8ucGFzdCA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBwYXN0X3NlcmllKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwYXN0X3NlcmllW2tleV0/LnNlcmllc1tqXT8uZGF0YVtwb2ludF0pIHtcblx0XHRcdFx0XHRcdFx0XHRmb3JtYXR0ZWRfc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBwYXN0X3NlcmllW2tleV0/LnNlcmllc1tqXT8uZGF0YVtwb2ludF0gKiBzY2FsYXIsIG5hbWU6IHBhc3RfbGFiZWwgfSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9ybWF0dGVkX3NlcmllW3RpbWVdLnB1c2goeyB2YWx1ZTogTmFOLCBuYW1lOiBwYXN0X2xhYmVsIH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogSW5jcmVhc2UgdGhlIHRpbWUgdXNpbmcgdGhlIHN0ZXAgKi9cblx0XHRcdFx0XHR0aW1lID0gdGltZSArIHN0ZXA7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fVxuXHR9KTtcblx0LyogTmVlZCB0byBmaW5hbGx5IGZvcm1hdCB0aGUgc2VyaWUgYXMgcmVxdWVzdGVkIGJ5IER5Z3JhcGgsIHdpdGhcblx0XHQgTlVMTCBhcyB2YWx1ZSBpbiBjYXNlIHRoZSBzZXJpZSBoYXMgTk9UIFRIQVQgUE9JTlQgKGUuZy4gd2l0aCBhIDUgbWludXRlcyBmcmVxdWVuY3ksIHRoZSB1c2VyXG5cdFx0XHRpcyBjb25mcm9udGluZyBhIGNoYXJ0IHdpdGggMSBtaW51dGUgZnJlcXVlbmN5LCB0aGVyZSBhcmUgNCBtaW51dGVzIHdpdGggbm8gZXhpc3RpbmcgcG9pbnRzKVxuXHQgKi9cblx0bGV0IGZ1bGxfc2VyaWUgPSBbXTtcblx0Y29uc3Qgc2VyaWVfa2V5cyA9IE9iamVjdC5rZXlzKGZvcm1hdHRlZF9zZXJpZSk7XG5cdHNlcmllX2tleXMuZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4ge1xuXHRcdGZ1bGxfc2VyaWVbaW5kZXhdID0gW107XG5cdFx0LyogSXRlcmF0ZSB0aGUgc2VyaWUgYW5kIGZvciBlYWNoIGxhYmVsLCBnZXQgdGhlIHZhbHVlIGFuZCBzZXQgdG8gbnVsbCBpbiBjYXNlIGl0IGRvZXMgbm90IGV4aXN0cyAqL1xuXHRcdHNlcmllX2xhYmVscy5mb3JFYWNoKChsYWJlbCkgPT4ge1xuXHRcdFx0bGV0IGZvdW5kID0gZmFsc2U7XG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IGZvcm1hdHRlZF9zZXJpZVtrZXldLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGlmIChmb3JtYXR0ZWRfc2VyaWVba2V5XVtqXS5uYW1lID09IGxhYmVsKSB7XG5cdFx0XHRcdFx0ZnVsbF9zZXJpZVtpbmRleF0ucHVzaChmb3JtYXR0ZWRfc2VyaWVba2V5XVtqXS52YWx1ZSk7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZm91bmQgPT0gZmFsc2UpIHtcblx0XHRcdFx0ZnVsbF9zZXJpZVtpbmRleF0ucHVzaChudWxsKTtcblx0XHRcdH1cblx0XHR9KVxuXHR9KTtcblx0c2V0U2VyaWVzQ29sb3JzKGNvbG9yc19wYWxldHRlKVxuXG5cdGxldCBjaGFydE9wdGlvbnMgPSBidWlsZENoYXJ0T3B0aW9ucyhmdWxsX3NlcmllLCBzZXJpZV9sYWJlbHMsIHNlcmllX3Byb3BlcnRpZXMsIGZvcm1hdHRlcnMsIGNvbG9yc19wYWxldHRlLCBzdGFja2VkLCBjdXN0b21CYXJzKTtcblx0cmV0dXJuIGNoYXJ0T3B0aW9ucztcbn1cblxuZnVuY3Rpb24gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyKSB7XG5cdHJldHVybiB7XG5cdFx0YXhpc0xhYmVsRm9ybWF0dGVyOiBmb3JtYXR0ZXIsXG5cdFx0dmFsdWVGb3JtYXR0ZXI6IGZ1bmN0aW9uIChudW1fb3JfbWlsbGlzLCBvcHRzLCBzZXJpZXNOYW1lLCBkeWdyYXBoLCByb3csIGNvbCkge1xuXHRcdFx0Y29uc3Qgc2VyaWVfcG9pbnQgPSBkeWdyYXBoLnJhd0RhdGFfW3Jvd11bY29sXTtcblx0XHRcdGxldCBkYXRhID0gJyc7XG5cdFx0XHRpZiAodHlwZW9mIChzZXJpZV9wb2ludCkgPT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRzZXJpZV9wb2ludC5mb3JFYWNoKChlbCkgPT4ge1xuXHRcdFx0XHRcdGRhdGEgPSBgJHtkYXRhfSAvICR7Zm9ybWF0dGVyKGVsIHx8IDApfWA7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdGRhdGEgPSBkYXRhLnN1YnN0cmluZygzKTsgLyogUmVtb3ZlIHRoZSBmaXJzdCB0aHJlZSBjaGFyYWN0ZXJzICcgLyAnICovXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhID0gZm9ybWF0dGVyKG51bV9vcl9taWxsaXMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIChkYXRhKTtcblx0XHR9LFxuXHRcdGF4aXNMYWJlbFdpZHRoOiA4MCxcblx0fVxufVxuXG5mdW5jdGlvbiBidWlsZENoYXJ0T3B0aW9ucyhzZXJpZXMsIGxhYmVscywgc2VyaWVfcHJvcGVydGllcywgZm9ybWF0dGVycywgY29sb3JzLCBzdGFja2VkLCBjdXN0b21CYXJzKSB7XG5cdGNvbnN0IGludGVycG9sYXRlZF9jb2xvcnMgPSBjb2xvcnNJbnRlcnBvbGF0aW9uLnRyYW5zZm9ybUNvbG9ycyhjb2xvcnMpO1xuXHRsZXQgaXNfZGFya19tb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYm9keSBkYXJrJykubGVuZ3RoID4gMDtcblx0bGV0IGhpZ2hsaWdodF9jb2xvciA9ICdyZ2IoMjU1LCAyNTUsIDI1NSknO1xuXHRpZiAoaXNfZGFya19tb2RlKSB7XG5cdFx0aGlnaGxpZ2h0X2NvbG9yID0gJ3JnYigxMywgMTcsIDIzKSc7XG5cdH1cblxuXHRsZXQgY29uZmlnID0ge1xuXHRcdGN1c3RvbUJhcnM6IGN1c3RvbUJhcnMsXG5cdFx0bGFiZWxzOiBsYWJlbHMsXG5cdFx0c2VyaWVzOiBzZXJpZV9wcm9wZXJ0aWVzLFxuXHRcdGRhdGE6IHNlcmllcyxcblx0XHRsYWJlbHNTZXBhcmF0ZUxpbmVzOiB0cnVlLFxuXHRcdGxlZ2VuZDogXCJmb2xsb3dcIixcblx0XHRzdGFja2VkR3JhcGg6IHN0YWNrZWQsIC8qIFRPRE8uIGFkZCBzdGFja2VkIGhlcmUgKi9cblx0XHRjb25uZWN0U2VwYXJhdGVkUG9pbnRzOiB0cnVlLFxuXHRcdGluY2x1ZGVaZXJvOiB0cnVlLFxuXHRcdGRyYXdQb2ludHM6IHRydWUsXG5cdFx0aGlnaGxpZ2h0U2VyaWVzQmFja2dyb3VuZEFscGhhOiAwLjcsXG5cdFx0aGlnaGxpZ2h0U2VyaWVzQmFja2dyb3VuZENvbG9yOiBoaWdobGlnaHRfY29sb3IsXG5cdFx0aGlnaGxpZ2h0U2VyaWVzT3B0czoge1xuXHRcdFx0c3Ryb2tlV2lkdGg6IDIsXG5cdFx0XHRwb2ludFNpemU6IDMsXG5cdFx0XHRoaWdobGlnaHRDaXJjbGVTaXplOiA2LFxuXHRcdH0sXG5cdFx0YXhpc0xhYmVsRm9udFNpemU6IDEyLFxuXHRcdGF4ZXM6IHtcblx0XHRcdHg6IHt9XG5cdFx0fSxcblx0XHRjb2xvcnM6IGludGVycG9sYXRlZF9jb2xvcnMsXG5cdH07XG5cblx0aWYgKGZvcm1hdHRlcnMubGVuZ3RoID4gMSkge1xuXHRcdC8qIE11bHRpcGxlIGZvcm1hdHRlcnMgKi9cblx0XHQvKiBOT1RFOiBhdCBtb3N0IDIgZm9ybWF0dGVycyBjYW4gYmUgdXNlZCAqL1xuXHRcdGNvbmZpZy5heGVzLnkxID0gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlcnNbMF0pKTtcblx0XHRjb25maWcuYXhlcy55MiA9IGdldEF4aXNDb25maWd1cmF0aW9uKGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJzWzFdKSk7XG5cdH0gZWxzZSBpZiAoZm9ybWF0dGVycy5sZW5ndGggPT0gMSkge1xuXHRcdC8qIFNpbmdsZSBmb3JtYXR0ZXIgKi9cblx0XHRjb25maWcuYXhlcy55ID0gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlcnNbMF0pKTtcblx0fVxuXG5cdHJldHVybiBjb25maWc7XG59XG5cbmZ1bmN0aW9uIGdldFRzUXVlcnkodHNHcm91cCwgbm90X21ldHJpY19xdWVyeSwgZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCkge1xuXHRsZXQgdHNRdWVyeSA9IHRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcblx0XHRpZiAoZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCAhPSBudWxsICYmICFlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0W3NvdXJjZV9kZWYudmFsdWVdKSB7IHJldHVybiBudWxsOyB9XG5cdFx0bGV0IHNvdXJjZV92YWx1ZSA9IHRzR3JvdXAuc291cmNlX2FycmF5W2ldLnZhbHVlO1xuXHRcdHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfToke3NvdXJjZV92YWx1ZX1gO1xuXHR9KS5maWx0ZXIoKHMpID0+IHMgIT0gbnVsbCkuam9pbihcIixcIik7XG5cblx0aWYgKCFub3RfbWV0cmljX3F1ZXJ5ICYmIHRzR3JvdXAubWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcblx0XHR0c1F1ZXJ5ID0gYCR7dHNRdWVyeX0sJHt0c0dyb3VwLm1ldHJpYy5xdWVyeX1gXG5cdH1cblx0cmV0dXJuIHRzUXVlcnk7XG59XG5cbmZ1bmN0aW9uIGdldE1haW5Tb3VyY2VEZWZJbmRleCh0c0dyb3VwKSB7XG5cdGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRsZXQgc291cmNlX2RlZiA9IHNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdFx0aWYgKHNvdXJjZV9kZWYubWFpbl9zb3VyY2VfZGVmID09IHRydWUpIHsgcmV0dXJuIGk7IH1cblx0fVxuXHRyZXR1cm4gMDtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRUc0NoYXJ0c09wdGlvbnMoaHR0cFByZWZpeCwgZXBvY2hTdGF0dXMsIHRzQ29tcGFyZSwgdGltZXNlcmllc0dyb3VwcywgaXNQcm8pIHtcblx0bGV0IHBhcmFtc0Vwb2NoT2JqID0geyBlcG9jaF9iZWdpbjogZXBvY2hTdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hTdGF0dXMuZXBvY2hfZW5kIH07XG5cblx0bGV0IHRzQ2hhcnRzT3B0aW9ucztcblx0aWYgKCFpc1Bybykge1xuXHRcdGxldCB0c0RhdGFVcmwgPSBgJHtodHRwUHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90cy5sdWFgO1xuXHRcdGxldCBwYXJhbXNVcmxSZXF1ZXN0ID0gYHRzX2NvbXBhcmU9JHt0c0NvbXBhcmV9JnZlcnNpb249NCZ6b29tPSR7dHNDb21wYXJlfSZsaW1pdD0xODBgO1xuXHRcdGxldCB0c0dyb3VwID0gdGltZXNlcmllc0dyb3Vwc1swXTtcblx0XHRsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdFx0bGV0IHRzUXVlcnkgPSBnZXRUc1F1ZXJ5KHRzR3JvdXApO1xuXHRcdGxldCBwT2JqID0ge1xuXHRcdFx0Li4ucGFyYW1zRXBvY2hPYmosXG5cdFx0XHR0c19xdWVyeTogdHNRdWVyeSxcblx0XHRcdHRzX3NjaGVtYTogYCR7dHNHcm91cC5tZXRyaWMuc2NoZW1hfWAsXG5cdFx0fTtcblx0XHRpZiAoIXRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVttYWluX3NvdXJjZV9pbmRleF0uZGlzYWJsZV90c2tleSkge1xuXHRcdFx0cE9iai50c2tleSA9IHRzR3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XS52YWx1ZTtcblx0XHR9XG5cdFx0bGV0IHBVcmxSZXF1ZXN0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHBPYmosIHBhcmFtc1VybFJlcXVlc3QpO1xuXHRcdGxldCB1cmwgPSBgJHt0c0RhdGFVcmx9PyR7cFVybFJlcXVlc3R9YDtcblx0XHRsZXQgdHNDaGFydE9wdGlvbiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHRcdHRzQ2hhcnRzT3B0aW9ucyA9IFt0c0NoYXJ0T3B0aW9uXTtcblx0fSBlbHNlIHtcblx0XHRsZXQgcGFyYW1zQ2hhcnQgPSB7XG5cdFx0XHR6b29tOiB0c0NvbXBhcmUsXG5cdFx0XHRsaW1pdDogMTgwLFxuXHRcdFx0dmVyc2lvbjogNCxcblx0XHRcdHRzX2NvbXBhcmU6IHRzQ29tcGFyZSxcblx0XHR9O1xuXG5cdFx0bGV0IHRzUmVxdWVzdHMgPSB0aW1lc2VyaWVzR3JvdXBzLm1hcCgodHNHcm91cCkgPT4ge1xuXHRcdFx0bGV0IG1haW5fc291cmNlX2luZGV4ID0gZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzR3JvdXApO1xuXHRcdFx0bGV0IHRzUXVlcnkgPSBnZXRUc1F1ZXJ5KHRzR3JvdXApO1xuXHRcdFx0bGV0IHBPYmogPSB7XG5cdFx0XHRcdHRzX3F1ZXJ5OiB0c1F1ZXJ5LFxuXHRcdFx0XHR0c19zY2hlbWE6IGAke3RzR3JvdXAubWV0cmljLnNjaGVtYX1gLFxuXHRcdFx0fTtcblx0XHRcdGlmICghdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5W21haW5fc291cmNlX2luZGV4XS5kaXNhYmxlX3Rza2V5KSB7XG5cdFx0XHRcdHBPYmoudHNrZXkgPSB0c0dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF0udmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcE9iajtcblx0XHR9KTtcblx0XHRsZXQgdHNEYXRhVXJsTXVsdGkgPSBgJHtodHRwUHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHNfbXVsdGkubHVhYDtcblx0XHRsZXQgcmVxID0geyB0c19yZXF1ZXN0czogdHNSZXF1ZXN0cywgLi4ucGFyYW1zRXBvY2hPYmosIC4uLnBhcmFtc0NoYXJ0IH07XG5cdFx0bGV0IGhlYWRlcnMgPSB7XG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0fTtcblx0XHR0c0NoYXJ0c09wdGlvbnMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodHNEYXRhVXJsTXVsdGksIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSkgfSk7XG5cdH1cblx0cmV0dXJuIHRzQ2hhcnRzT3B0aW9ucztcbn1cblxuLyogT3ZlcnJpZGUgRHlncmFwaCBwbHVnaW5zIHRvIGhhdmUgYSBiZXR0ZXIgbGVnZW5kICovXG5EeWdyYXBoLlBsdWdpbnMuTGVnZW5kLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZSkge1xuXHR2YXIgeFZhbHVlID0gZS5zZWxlY3RlZFg7XG5cdHZhciBwb2ludHMgPSBlLnNlbGVjdGVkUG9pbnRzO1xuXHR2YXIgcm93ID0gZS5zZWxlY3RlZFJvdztcblxuXHR2YXIgbGVnZW5kTW9kZSA9IGUuZHlncmFwaC5nZXRPcHRpb24oJ2xlZ2VuZCcpO1xuXHRpZiAobGVnZW5kTW9kZSA9PT0gJ25ldmVyJykge1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgaHRtbCA9IER5Z3JhcGguUGx1Z2lucy5MZWdlbmQuZ2VuZXJhdGVMZWdlbmRIVE1MKGUuZHlncmFwaCwgeFZhbHVlLCBwb2ludHMsIHRoaXMub25lX2VtX3dpZHRoXywgcm93KTtcblx0aWYgKGh0bWwgaW5zdGFuY2VvZiBOb2RlICYmIGh0bWwubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uaW5uZXJIVE1MID0gJyc7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5hcHBlbmRDaGlsZChodG1sKTtcblx0fSBlbHNlXG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5pbm5lckhUTUwgPSBodG1sO1xuXHQvLyBtdXN0IGJlIGRvbmUgbm93IHNvIG9mZnNldFdpZHRoIGlzbuKAmXQgMOKAplxuXHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmRpc3BsYXkgPSAnJztcblxuXHRpZiAobGVnZW5kTW9kZSA9PT0gJ2ZvbGxvdycpIHtcblx0XHQvLyBjcmVhdGUgZmxvYXRpbmcgbGVnZW5kIGRpdlxuXHRcdHZhciBhcmVhID0gZS5keWdyYXBoLnBsb3R0ZXJfLmFyZWE7XG5cdFx0dmFyIGxhYmVsc0RpdldpZHRoID0gdGhpcy5sZWdlbmRfZGl2Xy5vZmZzZXRXaWR0aDtcblx0XHR2YXIgeUF4aXNMYWJlbFdpZHRoID0gZS5keWdyYXBoLmdldE9wdGlvbkZvckF4aXMoJ2F4aXNMYWJlbFdpZHRoJywgJ3knKTtcblx0XHQvLyBmaW5kIHRoZSBjbG9zZXN0IGRhdGEgcG9pbnQgYnkgY2hlY2tpbmcgdGhlIGN1cnJlbnRseSBoaWdobGlnaHRlZCBzZXJpZXMsXG5cdFx0Ly8gb3IgZmFsbCBiYWNrIHRvIHVzaW5nIHRoZSBmaXJzdCBkYXRhIHBvaW50IGF2YWlsYWJsZVxuXHRcdHZhciBoaWdobGlnaHRTZXJpZXMgPSBlLmR5Z3JhcGguZ2V0SGlnaGxpZ2h0U2VyaWVzKClcblx0XHR2YXIgcG9pbnQ7XG5cdFx0aWYgKGhpZ2hsaWdodFNlcmllcykge1xuXHRcdFx0cG9pbnQgPSBwb2ludHMuZmluZChwID0+IHAubmFtZSA9PT0gaGlnaGxpZ2h0U2VyaWVzKTtcblx0XHRcdGlmICghcG9pbnQpXG5cdFx0XHRcdHBvaW50ID0gcG9pbnRzWzBdO1xuXHRcdH0gZWxzZVxuXHRcdFx0cG9pbnQgPSBwb2ludHNbMF07XG5cblx0XHQvLyBkZXRlcm1pbmUgZmxvYXRpbmcgW2xlZnQsIHRvcF0gY29vcmRpbmF0ZXMgb2YgdGhlIGxlZ2VuZCBkaXZcblx0XHQvLyB3aXRoaW4gdGhlIHBsb3R0ZXJfIGFyZWFcblx0XHQvLyBvZmZzZXQgNTAgcHggdG8gdGhlIHJpZ2h0IGFuZCBkb3duIGZyb20gdGhlIGZpcnN0IHNlbGVjdGlvbiBwb2ludFxuXHRcdC8vIDUwIHB4IGlzIGd1ZXNzIGJhc2VkIG9uIG1vdXNlIGN1cnNvciBzaXplXG5cdFx0Y29uc3QgZm9sbG93T2Zmc2V0WCA9IGUuZHlncmFwaC5nZXROdW1lcmljT3B0aW9uKCdsZWdlbmRGb2xsb3dPZmZzZXRYJyk7XG5cdFx0dmFyIGxlZnRMZWdlbmQgPSBwb2ludC54ICogYXJlYS53ICsgZm9sbG93T2Zmc2V0WDtcblxuXHRcdC8vIGlmIGxlZ2VuZCBmbG9hdHMgdG8gZW5kIG9mIHRoZSBjaGFydCBhcmVhLCBpdCBmbGlwcyB0byB0aGUgb3RoZXJcblx0XHQvLyBzaWRlIG9mIHRoZSBzZWxlY3Rpb24gcG9pbnRcblx0XHRpZiAoKGxlZnRMZWdlbmQgKyBsYWJlbHNEaXZXaWR0aCArIDEpID4gYXJlYS53KSB7XG5cdFx0XHRsZWZ0TGVnZW5kID0gbGVmdExlZ2VuZCAtIDIgKiBmb2xsb3dPZmZzZXRYIC0gbGFiZWxzRGl2V2lkdGggLSAoeUF4aXNMYWJlbFdpZHRoIC0gYXJlYS54KTtcblx0XHR9XG5cblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmxlZnQgPSB5QXhpc0xhYmVsV2lkdGggKyBsZWZ0TGVnZW5kICsgXCJweFwiO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGUpID0+IHtcblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aW1lc2VyaWVzLW1vdXNlLXRvcC1wb3NpdGlvbicsIGUuY2xpZW50WSArIDUwICsgXCJweFwiKVxuXHRcdH0pO1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUudG9wID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RpbWVzZXJpZXMtbW91c2UtdG9wLXBvc2l0aW9uJyk7XG5cdH0gZWxzZSBpZiAobGVnZW5kTW9kZSA9PT0gJ29ubW91c2VvdmVyJyAmJiB0aGlzLmlzX2dlbmVyYXRlZF9kaXZfKSB7XG5cdFx0Ly8gc3luY2hyb25pc2UgdGhpcyB3aXRoIExlZ2VuZC5wcm90b3R5cGUucHJlZHJhdyBiZWxvd1xuXHRcdHZhciBhcmVhID0gZS5keWdyYXBoLnBsb3R0ZXJfLmFyZWE7XG5cdFx0dmFyIGxhYmVsc0RpdldpZHRoID0gdGhpcy5sZWdlbmRfZGl2Xy5vZmZzZXRXaWR0aDtcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmxlZnQgPSBhcmVhLnggKyBhcmVhLncgLSBsYWJlbHNEaXZXaWR0aCAtIDEgKyBcInB4XCI7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5zdHlsZS50b3AgPSBhcmVhLnkgKyBcInB4XCI7XG5cdH1cbn07XG5cbmNvbnN0IHRpbWVzZXJpZXNVdGlscyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHtcblx0XHRncm91cHNPcHRpb25zTW9kZXNFbnVtLFxuXHRcdHRzQXJyYXlUb09wdGlvbnMsXG5cdFx0dHNBcnJheVRvT3B0aW9uc0FycmF5LFxuXHRcdGdldEdyb3VwT3B0aW9uTW9kZSxcblx0XHRnZXRTZXJpZUlkLFxuXHRcdGdldFNlcmllTmFtZSxcblx0XHRnZXRUc0NoYXJ0c09wdGlvbnMsXG5cdFx0Z2V0VHNRdWVyeSxcblx0XHRnZXRNYWluU291cmNlRGVmSW5kZXgsXG5cdH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHRpbWVzZXJpZXNVdGlscztcbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e19pMThuKFwibW9kYWxfdGltZXNlcmllcy50aXRsZVwiKX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8dWwgY2xhc3M9XCJuYXYgbmF2LXRhYnNcIj5cbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCIgQGNsaWNrPVwiY2hhbmdlX2FjdGlvbignYWRkJylcIj5cbiAgICBcdDxhIGNsYXNzPVwibmF2LWxpbmtcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGlvbiA9PSAnYWRkJ31cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFkZF90aW1lc2VyaWVzXCIpfX1cblx0PC9hPlxuICAgICAgPC9saT5cbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCIgQGNsaWNrPVwiY2hhbmdlX2FjdGlvbignc2VsZWN0JylcIj5cbiAgICBcdDxhIGNsYXNzPVwibmF2LWxpbmtcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGlvbiA9PSAnc2VsZWN0JyB9XCIgaHJlZj1cIiNcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5tYW5hZ2VfdGltZXNlcmllc1wiKX19PC9hPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICAgIDwhLS0gYWN0aW9uIGFkZCAtLT5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImFjdGlvbiA9PSAnYWRkJ1wiPlxuICAgICAgPCEtLSBTb3VyY2VzIFR5cGVzIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuXHQgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMuc291cmNlX3R5cGVcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NvdXJjZV90eXBlXCJcblx0XHRcdCAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc291cmNlX3R5cGUoKVwiXG5cdFx0XHQgIDpvcHRpb25zPVwic291cmNlc190eXBlc1wiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gU291cmNlcyAtLT5cbiAgICAgIDxkaXYgdi1pZj1cIiFoaWRlX3NvdXJjZXNcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG1iLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IFwiPlxuXHQgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMuc291cmNlXCIpfX08L2I+XG5cdCAgPC9sYWJlbD5cblx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsXCIgOnRpdGxlPVwic2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbFwiIHN0eWxlPVwib3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO1wiIHR5cGU9XCJ0ZXh0XCIgZGlzYWJsZWQ+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuXHQ8dGVtcGxhdGUgdi1mb3I9XCIoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleCkgaW4gc2VsZWN0ZWRfc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVwiPlxuXHQgIDwhLS0gc2VsZWN0IC0tPlxuXHQgIDxkaXYgdi1pZj1cInNvdXJjZV9kZWYudWlfdHlwZSA9PSB1aV90eXBlcy5zZWxlY3RcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXQtMiByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgICA8Yj57e3NvdXJjZV9kZWYubGFiZWx9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NvdXJjZV9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiXG5cdFx0XHQgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc2VsZWN0ZWRfc291cmNlKClcIlxuXHRcdFx0ICAgIDpvcHRpb25zPVwic291cmNlc19hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiPlxuXHQgICAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICAgIDwvZGl2PlxuXHQgIDwvZGl2PiA8IS0tIGVuZCBzZWxlY3QgLS0+XG5cblx0ICA8IS0tIGlucHV0IHRleHQgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLmlucHV0XCIgY2xhc3M9XCJmb3JtLWdyb3VwIG10LTIgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgICAgPGI+e3tzb3VyY2VfZGVmLmxhYmVsfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIEBpbnB1dD1cImNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKVwiIHYtbW9kZWw9XCJzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIDpwYXR0ZXJuPVwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJcIj5cblx0ICAgIDwvZGl2PlxuXHQgIDwvZGl2PiA8IS0tIGlucHV0IHRleHQgLS0+XHQgIFxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0PGRpdiB2LXNob3c9XCJlbmFibGVfYXBwbHlfc291cmNlXCIgY2xhc3M9XCJmb3JtLWdyb3VwIHJvdyBtdC0yXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmVuZDtcIj5cblx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICBcdCAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseV9zb3VyY2VfYXJyYXlcIiA6ZGlzYWJsZWQ9XCJlbmFibGVfYXBwbHlfc291cmNlID09IGZhbHNlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hcHBseV9zb3VyY2VcIil9fTwvYnV0dG9uPlxuXHQgIDwvZGl2Plx0ICBcblx0PC9kaXY+XHRcbiAgICAgIDwvZGl2PiA8IS0tIGVuZCBTb3VyY2VzIC0tPlxuICAgICAgXG4gICAgICA8IS0tIE1ldHJpY3MgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5tZXRyaWNcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCByZWY9XCJzZWxlY3Rfc2VhcmNoX21ldHJpY3NcIlxuXHQgIFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKClcIlxuXHQgIFx0XHQgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCJcblx0ICBcdFx0ICA6b3B0aW9ucz1cIm1ldHJpY3NcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgICAgXG5cdCAgPC9kaXY+XHQgIFxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8TGlzdFRpbWVzZXJpZXNcblx0OnRpdGxlPVwiX2kxOG4oJ21vZGFsX3RpbWVzZXJpZXMudGltZXNlcmllc19saXN0JylcIlxuXHR2LW1vZGVsOnRpbWVzZXJpZXM9XCJ0aW1lc2VyaWVzX3RvX2FkZFwiPlxuICAgICAgPC9MaXN0VGltZXNlcmllcz4gICAgICBcbiAgICA8L3RlbXBsYXRlPjwhLS0gYWN0aW9uID09IGFkZCAtLT5cblxuICAgIDwhLS0gYWN0aW9uIHNlbGVjdC0tPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkXCI+XG5cdDxMaXN0VGltZXNlcmllc1xuXHQgIDppZD1cImdldF90aW1lc2VyaWVzX2dyb3VwX2lkKGl0ZW0pXCJcblx0ICA6dGl0bGU9XCJnZXRfdGltZXNlcmllc19ncm91cF9uYW1lKGl0ZW0pXCJcblx0ICB2LW1vZGVsOnRpbWVzZXJpZXM9XCJpdGVtLnRpbWVzZXJpZXNcIlxuXHQgIDpzaG93X2RlbGV0ZV9idXR0b249XCJ0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC5sZW5ndGggPiAxXCJcblx0ICBAZGVsZXRlX3RzPVwiZGVsZXRlX3RzXCI+XG5cdDwvTGlzdFRpbWVzZXJpZXM+ICAgICAgXG4gICAgICA8L3RlbXBsYXRlPjwhLS0gdi1mb3IgdGltZXNlcmllc19ncm91cHNfYWRkZWQgLS0+XG4gICAgPC90ZW1wbGF0ZT48IS0tIGFjdGlvbiA9PSBzZWxlY3QgLS0+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJhY3Rpb24gPT0gJ2FkZCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFkZFwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFwcGx5XCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTGlzdFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9saXN0LXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogT2JqZWN0LFxufSk7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0X3NlYXJjaF9tZXRyaWNzID0gcmVmKG51bGwpO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgYWN0aW9uID0gcmVmKFwic2VsZWN0XCIpOyAvLyBhZGQvc2VsZWN0IFxuXG5sZXQgY3VycmVudF9wYWdlX3NvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuXG5jb25zdCBzb3VyY2VzX3R5cGVzID0gbWV0cmljc01hbmFnZXIuc291cmNlc190eXBlcztcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV90eXBlID0gcmVmKGN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSk7XG5cbmNvbnN0IHVpX3R5cGVzID0gbWV0cmljc01hbmFnZXIudWlfdHlwZXM7XG5jb25zdCBzb3VyY2VzX2FycmF5ID0gcmVmKFtdKTsgLy8gYXJyYXkgb2Ygc291cmNlcywgZWFjaCBlbGVtZW50IGlzIHRoZSBzb3VyY2VzIGxpc3Qgb2Ygc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVtpXVxuY29uc3Qgc2VsZWN0ZWRfc291cmNlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5ID0gcmVmKFtdKTsgLy8gYXJyYXkgb2Ygc291cmNlX3ZhbHVlIGJpbmRpbmcgd2l0aCBpbnB1dCB0ZXh0XG4vLyBjb25zdCBzdWJfc291cmNlcyA9IHJlZihbXSk7XG4vLyBjb25zdCBzZWxlY3RlZF9zdWJfc291cmNlID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwgPSByZWYoXCJcIik7XG5jb25zdCBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5ID0gcmVmIChbXSk7XG5cbmNvbnN0IGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV9hcHBseV9zb3VyY2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID09IGZhbHNlKSB7XG5cdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5LnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCByZ190ZXh0ID0gc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZVtpXTtcblx0aWYgKHJnX3RleHQgPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXHRsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJnX3RleHQpO1xuXHRsZXQgc291cmNlX3RleHQgPSBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheS52YWx1ZVtpXTtcblx0aWYgKHJlZ2V4LnRlc3Qoc291cmNlX3RleHQpID09IGZhbHNlKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdH1cdFxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuY29uc3QgaGlkZV9zb3VyY2VzID0gcmVmKGZhbHNlKTtcblxuY29uc3QgbWV0cmljcyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9tZXRyaWMgPSByZWYoe30pO1xuXG5jb25zdCB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZCA9IHJlZihbXSk7XG5cbmNvbnN0IHRpbWVzZXJpZXNfdG9fYWRkID0gcmVmKFtdKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYXBwbHknXSk7XG5cbmxldCB3YWl0X2luaXQgPSBudWxsO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzb3VyY2VzX3R5cGVzLmZvckVhY2goKHNvdXJjZV90eXBlKSA9PiB7XG5cdGxldCBzb3VyY2VfdHlwZV9lbmFibGVkID0gcHJvcHMuc291cmNlc190eXBlc19lbmFibGVkW3NvdXJjZV90eXBlLmlkXTtcblx0aWYgKHNvdXJjZV90eXBlX2VuYWJsZWQgPT0gbnVsbCB8fCBzb3VyY2VfdHlwZV9lbmFibGVkID09IGZhbHNlKSB7XG5cdCAgICAvLyBzb3VyY2VfdHlwZS5kaXNhYmxlZCA9IHRydWU7XG5cdH1cbiAgICB9KTsgICAgXG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICB3YWl0X2luaXQgPSBpbml0KCk7XG59KTtcblxuY29uc3Qgc2hvdyA9IGFzeW5jICh0aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgYXdhaXQgd2FpdF9pbml0O1xuICAgIGFjdGlvbi52YWx1ZSA9IFwic2VsZWN0XCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gY2hhbmdlX2FjdGlvbihhKSB7XG4gICAgYWN0aW9uLnZhbHVlID0gYTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3NvdXJjZV90eXBlKCkge1xuICAgIGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID0gZmFsc2U7XG4gICAgc2V0X3JlZ2V4KCk7XG4gICAgc2V0X2hpZGVfc291cmNlcygpO1xuICAgIGF3YWl0IHNldF9zb3VyY2VzX2FycmF5KCk7XG4gICAgYXdhaXQgc2V0X21ldHJpY3MoKTtcbn1cblxuZnVuY3Rpb24gc2V0X2hpZGVfc291cmNlcygpIHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZTtcbiAgICBoaWRlX3NvdXJjZXMudmFsdWUgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc2QpID0+IHNkLnVpX3R5cGUgPT0gdWlfdHlwZXMuaGlkZSkuZXZlcnkoKGhpZGUpID0+IGhpZGUgPT0gdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5X3NvdXJjZV9hcnJheSgpIHtcbiAgICBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9IGZhbHNlO1xuICAgIHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5LnZhbHVlLmZvckVhY2goKHNvdXJjZV92YWx1ZSwgaSkgPT4ge1xuXHRsZXQgc291cmNlX2RlZiA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdGlmIChzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXQpIHtcblx0ICAgIGxldCBzb3VyY2UgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWVbaV07XG5cdCAgICBzb3VyY2UudmFsdWUgPSBzb3VyY2VfdmFsdWU7XG5cdCAgICBzb3VyY2UubGFiZWwgPSBzb3VyY2VfdmFsdWU7XG5cdH1cbiAgICB9KTsgICAgXG4gICAgYXdhaXQgY2hhbmdlX3NvdXJjZV9hcnJheSgpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfYXJyYXkoKSB7ICAgIFxuICAgIGF3YWl0IHNldF9tZXRyaWNzKCk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RlZF9zb3VyY2UoKSB7XG4gICAgaXNfc2VsZWN0ZWRfc291cmNlX2NoYW5nZWQudmFsdWUgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVnZXgoKSB7XG4gICAgbGV0IHJlZ2V4X3NvdXJjZV9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlPy5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX2RlZi5yZWdleF90eXBlKTtcbiAgICBpZiAocmVnZXhfc291cmNlX2FycmF5ID09IG51bGwpIHsgcmVnZXhfc291cmNlX2FycmF5ID0gW107IH1cbiAgICBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5LnZhbHVlID0gcmVnZXhfc291cmNlX2FycmF5Lm1hcCgocmVnZXhfc291cmNlKSA9PiB7XG5cdGlmIChyZWdleF9zb3VyY2UgPT0gbnVsbCkgeyByZXR1cm4gIG51bGw7IH1cblx0cmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHJlZ2V4X3NvdXJjZSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCkge1xuICAgIGxldCBzb3VyY2VfbGFiZWxfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUuZmlsdGVyKChzb3VyY2UpID0+IHNvdXJjZS5sYWJlbCAhPSBudWxsICYmIHNvdXJjZS5sYWJlbCAhPSBcIlwiKS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLmxhYmVsKTtcbiAgICBsZXQgbGFiZWwgPSBzb3VyY2VfbGFiZWxfYXJyYXkuam9pbihcIiAtIFwiKTtcbiAgICByZXR1cm4gYCR7bGFiZWx9YDtcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKSB7XG4gICAgc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbC52YWx1ZSA9IGdldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zb3VyY2VzX2FycmF5KCkge1xuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlc19hcnJheV90ZW1wID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBzb3VyY2VzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZXMoaHR0cF9wcmVmaXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLmlkLCBzb3VyY2VfZGVmX2FycmF5W2ldKTtcblx0c291cmNlc19hcnJheV90ZW1wLnB1c2goc291cmNlcyk7XG4gICAgfVxuICAgIGxldCBkZWZhdWx0X3NvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUpO1xuICAgIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSA9IGRlZmF1bHRfc291cmNlX2FycmF5O1xuICAgIHNvdXJjZXNfYXJyYXkudmFsdWUgPSBzb3VyY2VzX2FycmF5X3RlbXA7XG4gICAgc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWUgPSBkZWZhdWx0X3NvdXJjZV9hcnJheS5tYXAoKHMpID0+IHMudmFsdWUpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9tZXRyaWNzKCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSk7XG4gICAgbWV0cmljcy52YWx1ZS5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpO1xuICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlKTtcbiAgICB1cGRhdGVfdGltZXNlcmllc190b19hZGQoZmFsc2UpOyAgICBcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhd2FpdCBjaGFuZ2Vfc291cmNlX3R5cGUoKTtcbiAgICAvLyB0YWtlIGRlZmF1bHQgdmlzaWJsZVxuICAgIHVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZChmYWxzZSk7XG4gICAgLy9lbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKGRlZmF1bHRfY29uZmlnKSB7XG4gICAgdGltZXNlcmllc190b19hZGQudmFsdWUgPSBbXTtcbiAgICBsZXQgdGltZXNlcmllcyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS50aW1lc2VyaWVzO1xuICAgIGZvciAobGV0IHRzX2lkIGluIHRpbWVzZXJpZXMpIHtcbiAgICBcdHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlLnB1c2goe1xuICAgIFx0ICAgIGlkOiB0c19pZCxcbiAgICBcdCAgICBsYWJlbDogdGltZXNlcmllc1t0c19pZF0ubGFiZWwsXG4gICAgXHQgICAgcmF3OiB0cnVlLFxuXHQgICAgcGFzdDogZmFsc2UsXG4gICAgXHQgICAgYXZnOiBmYWxzZSxcbiAgICBcdCAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICBcdH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSh0c19ncm91cCkge1xuICAgIGxldCBzb3VyY2VfdHlwZV9uYW1lID0gdHNfZ3JvdXAuc291cmNlX3R5cGUubGFiZWw7XG4gICAgbGV0IHNvdXJjZV9kZWZfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdO1xuICAgIGxldCBzb3VyY2VfbmFtZSA9IHNvdXJjZS5sYWJlbDtcbiAgICBsZXQgbWV0cmljX25hbWUgPSB0c19ncm91cC5tZXRyaWMubGFiZWw7XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX25hbWV9IC0gJHtzb3VyY2VfbmFtZX0gLSAke21ldHJpY19uYW1lfWA7XG59XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYztcbiAgICBpZiAodHNfZ3JvdXAgPT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlO1xuXHRzb3VyY2VfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWU7XG5cdG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHRzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHRzb3VyY2VfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXk7XG5cdG1ldHJpYyA9IHRzX2dyb3VwLm1ldHJpYztcbiAgICB9XG4gICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgcmV0dXJuIGlkO1xufVxuXG5jb25zdCBkZWxldGVfdHMgPSAodHNfZ3JvdXBfaWQpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlLmZpbHRlcigodHNfZ3JvdXApID0+IGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSAhPSB0c19ncm91cF9pZCk7XG59O1xuXG5jb25zdCBzZXRfdGltZXNlcmllc19ncm91cHMgPSAodGltZXNlcmllc19ncm91cHMsIGVtaXRfYXBwbHkpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzO1xuICAgIGlmIChlbWl0X2FwcGx5KSB7XG5cdGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIH1cbn07XG5cbmNvbnN0IGFkZF90c19ncm91cCA9ICh0c19ncm91cF90b19hZGQsIGVtaXRfYXBwbHkpID0+IHtcbiAgICBsZXQgdHNfZ3JvdXBfaW5kZXggPSB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZS5maW5kSW5kZXgoKHRzX2dyb3VwKSA9PiB0c19ncm91cC5pZCA9PSB0c19ncm91cF90b19hZGQuaWQpO1xuICAgIGlmICh0c19ncm91cF9pbmRleCA8IDApIHtcblx0dGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUucHVzaCh0c19ncm91cF90b19hZGQpO1xuICAgIH0gZWxzZSB7XG5cdHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlW3RzX2dyb3VwX2luZGV4XSA9IHRzX2dyb3VwX3RvX2FkZDtcbiAgICB9XG5cbiAgICBpZiAoZW1pdF9hcHBseSkge1xuXHRlbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHBseSA9ICgpID0+IHtcbiAgICBpZiAoYWN0aW9uLnZhbHVlID09IFwiYWRkXCIpIHtcblx0bGV0IHRzX2dyb3VwX2lkID0gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQoKTtcblx0bGV0IHRzX2dyb3VwID0ge1xuXHQgICAgaWQ6IHRzX2dyb3VwX2lkLFxuXHQgICAgc291cmNlX3R5cGU6IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLFxuXHQgICAgc291cmNlX2FycmF5OiBudG9wbmdfdXRpbGl0eS5jbG9uZShzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUpLFxuXHQgICAgbWV0cmljOiBzZWxlY3RlZF9tZXRyaWMudmFsdWUsXG5cdCAgICB0aW1lc2VyaWVzOiBudG9wbmdfdXRpbGl0eS5jbG9uZSh0aW1lc2VyaWVzX3RvX2FkZC52YWx1ZSksXG5cdH07XG5cdGFkZF90c19ncm91cCh0c19ncm91cCk7XG4gICAgfVxuICAgIGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBhZGRfdHNfZ3JvdXAsIHNldF90aW1lc2VyaWVzX2dyb3VwcyB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuXG4uY3VzdG9tLW1hcmdpbiB7XG5tYXJnaW4tbGVmdDogLTAuNHJlbTtcbn1cbi53YXJuIHtcbmJvcmRlci1jb2xvcjogI2ZmZDUwMDtcbmJvcmRlci1zdHlsZTogc29saWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgIHt7IHByb3BzLnRpdGxlIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwibW9kYWxfZG93bmxvYWRfZmlsZS5maWxlbmFtZVwiKSB9fTo8L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwYXR0ZXJuPVwiZmlsZW5hbWVfdmFsaWRhdGlvblwiIHYtbW9kZWw9XCJmaWxlbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIC57eyBwcm9wcy5leHQgfX1cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZW5hYmxlX2Rvd25sb2FkID09IGZhbHNlXCI+e3tcbiAgICAgICAgX2kxOG4oXCJtb2RhbF9kb3dubG9hZF9maWxlLmRvd25sb2FkXCIpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGZpbGVuYW1lID0gcmVmKFwiXCIpO1xuXG4vL2NvbnN0IGZpbGVuYW1lX3ZhbGlkYXRpb24gPSBgW1xcYH4hQCMkJV4mKl98Ky09Pzs6J1wiLC48Pnt9W11cXFxcL11gO1xuY29uc3QgYmFja3RpY2sgPSAnYCc7XG5jb25zdCBmaWxlbmFtZV92YWxpZGF0aW9uID0gU3RyaW5nLnJhd2BeW2EtekEtWl9cXC0xLTldKiRgO1xuXG5jb25zdCBlbmFibGVfZG93bmxvYWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGxldCByZ190ZXh0ID0gZmlsZW5hbWVfdmFsaWRhdGlvbjtcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcbiAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZW5hbWUudmFsdWUpO1xufSk7XG5cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHRpdGxlOiBTdHJpbmcsXG4gIGV4dDogU3RyaW5nLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkb3dubG9hZFwiXSk7XG5cbmNvbnN0IHNob3cgPSAobmFtZSkgPT4ge1xuICBpZiAobmFtZSA9PSBudWxsKSB7IG5hbWUgPSBcIlwiOyB9XG4gIC8qIFJlcGxhY2UgYWxsIGNoYXJhY3RlcnMgd2l0aCBfIGZvciBFWENFUFQgbnVtYmVyIGFuZCBsZXR0ZXJzICovXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoL1teYS16QS1aMC05XS9nLCAnXycpO1xuICBmaWxlbmFtZS52YWx1ZSA9IG5hbWU7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBsZXQgbmFtZSA9IGAke2ZpbGVuYW1lLnZhbHVlfS4ke3Byb3BzLmV4dH1gO1xuICBlbWl0KCdkb3dubG9hZCcsIG5hbWUpO1xuICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cblxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiB2LWlmPVwidHJ1ZVwiPlxuICA8IS0tIDxzbG90IG5hbWU9XCJtZW51XCI+PC9zbG90PiAtLT5cbjwvZGl2PlxuPGRpdj5cbiAgPHRhYmxlIHJlZj1cInRhYmxlX2lkXCIgY2xhc3M9XCJ0YWJsZSB3LTEwMCB0YWJsZS1zdHJpcGVkIHRhYmxlLWhvdmVyIHRhYmxlLWJvcmRlcmVkXCI+XG4gIDx0aGVhZD5cbiAgICA8dHI+XG4gICAgICA8dGggY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHYtZm9yPVwiaXRlbSBpbiBjb2x1bW5zX2NvbmZpZ1wiPnt7IGl0ZW0uY29sdW1uTmFtZSB9fTwvdGg+XG4gICAgPC90cj5cbiAgPC90aGVhZD5cbiAgPHRib2R5PjwvdGJvZHk+XG48L3RhYmxlPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgdXNlU2xvdHMsIHJlbmRlciwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHJlbmRlcl9jb21wb25lbnQgfSBmcm9tIFwiLi9udG9wX3V0aWxzLmpzXCI7XG5cbmNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG5cbmNvbnN0IHNsb3RzID0gdXNlU2xvdHMoKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuXHRpZDogU3RyaW5nLFxuXHR0YWJsZV9idXR0b25zOiBBcnJheSxcblx0Y29sdW1uc19jb25maWc6IEFycmF5LFxuXHRkYXRhX3VybDogU3RyaW5nLFxuXHRlbmFibGVfc2VhcmNoOiBCb29sZWFuLFxuXHRmaWx0ZXJfYnV0dG9uczoge1xudHlwZTogQXJyYXksXG5yZXF1aXJlZDogZmFsc2UsXG5cdH0sXG5cdHRhYmxlX2NvbmZpZzoge1xudHlwZTogT2JqZWN0LFxucmVxdWlyZWQ6IGZhbHNlLFxuXHR9LFxuXHRiYXNlX3VybDogU3RyaW5nLFxuXHRiYXNlX3BhcmFtczogT2JqZWN0LCBcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydkcmF3ZWQnXSlcblxuLyogQWRkIGxhc3Qgc29ydGluZyBwcmVmZXJlbmNlcyB0byB0aGUgYnJvd3NlciBjYWNoZSBpbiBvcmRlciB0byByZWxvYWQgaXQgdGhlIG5leHQgdGltZSAqL1xuY29uc3Qgc2F2ZV9sYXN0X3NvcnQgPSAobGFzdF9zb3J0aW5nLCBpZCkgPT4ge1xuXHRpZihpZCB8fCBwcm9wcy5pZCkge1xuXHRcdC8qIERvIG5vdCBzYXZlIHRoZSBzb3J0aW5nIGlmIHRoZSBkaXJlY3Rpb24gaXMgdW5kZWZpbmVkICovXG5cdFx0aWYobGFzdF9zb3J0aW5nLmRpciAhPSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHNvcnRpbmdfcHJlZiA9IFtsYXN0X3NvcnRpbmcuY29sLCBsYXN0X3NvcnRpbmcuZGlyXTtcblx0XHRcdGNvbnN0IHNvcnRpbmdfa2V5ID0gYCR7aWQgfHwgcHJvcHMuaWR9X3NvcnRpbmdfcHJlZmVyZW5jZXNgXG5cdFx0XHRcblx0XHRcdC8qIFVzZSB0aGUgbG9jYWwgc3RvcmFnZSBmb3IgdGhlIHNvcnRpbmcgcHJlZmVyZW5jZXMgKi9cblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNvcnRpbmdfa2V5LCBzb3J0aW5nX3ByZWYpO1xuXHRcdH1cblx0fVxufVxuXG5jb25zdCBsb2FkX2xhc3Rfc29ydCA9IChpZCkgPT4ge1xuXHRsZXQgc29ydGluZ19wcmVmID0gbnVsbDtcblx0aWYoaWQgfHwgcHJvcHMuaWQpIHtcblx0XHRjb25zdCBzb3J0aW5nX2tleSA9IGAke2lkIHx8IHByb3BzLmlkfV9zb3J0aW5nX3ByZWZlcmVuY2VzYFxuXG5cdFx0LyogVXNlIHRoZSBsb2NhbCBzdG9yYWdlIGZvciB0aGUgc29ydGluZyBwcmVmZXJlbmNlcyAqL1xuXHRcdGNvbnN0IHVuZm9ybWF0dGVkX3ByZWYgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzb3J0aW5nX2tleSk7XG5cdFx0aWYodW5mb3JtYXR0ZWRfcHJlZikge1xuXHRcdFx0Y29uc3Qgc3BsaXR0ZWRfcHJlZiA9IHVuZm9ybWF0dGVkX3ByZWYuc3BsaXQoJywnKTtcblx0XHRcdGlmKHNwbGl0dGVkX3ByZWYubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0c29ydGluZ19wcmVmID0gWyBOdW1iZXIoc3BsaXR0ZWRfcHJlZlswXSksIHNwbGl0dGVkX3ByZWZbMV0gXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc29ydGluZ19wcmVmO1xufVxuXG5sZXQgbmV3X3BhcmFtcyA9IHByb3BzLmJhc2VfcGFyYW1zXG5jb25zdCB0YWJsZV9pZCA9IHJlZihudWxsKTtcbi8qIEluIGNhc2Ugbm8gc29ydGluZyBpcyBwcm92aWRlZCB1c2UgdGhlIGRlZmF1bHRfc29ydGluZyAqL1xuY29uc3QgbGFzdF9zb3J0aW5nID0gbG9hZF9sYXN0X3NvcnQoKSB8fCBbMCwgXCJhc2NcIl07XG5cbmZ1bmN0aW9uIGxvYWREYXRhdGFibGUoKSB7XG4gICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcbiAgICAvKiBDcmVhdGUgYSBkYXRhdGFibGUgd2l0aCB0aGUgYnV0dG9ucyAqL1xuICAgIGxldCBleHRlbmRfY29uZmlnID0ge1xuXHRzZXJ2ZXJTaWRlOiBmYWxzZSxcblx0c2Nyb2xsWDogZmFsc2UsXG5cdGRlc3Ryb3k6IHRydWUsXG5cdHNlYXJjaGluZzogcHJvcHMuZW5hYmxlX3NlYXJjaCxcblx0b3JkZXI6IFtsYXN0X3NvcnRpbmddLFxuXHRwYWdpbmdUeXBlOiAnZnVsbF9udW1iZXJzJyxcblx0Ly9jb2x1bW5EZWZzOiBwcm9wcy5jb2x1bW5zX2NvbmZpZyxcblx0Y29sdW1uczogcHJvcHMuY29sdW1uc19jb25maWcsXG5cdGF1dG9XaWR0aDogZmFsc2UsXG5cdHJlc3BvbnNpdmU6IHRydWUsXG5cdGFqYXg6IHtcblx0ICAgIG1ldGhvZDogJ2dldCcsXG5cdCAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuXHQgICAgZGF0YVNyYzogJ3JzcCcsXG5cdCAgICBkYXRhOiAoZGF0YSwgc2V0dGluZ3MpID0+IHtcblx0XHRpZihPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPT0gMCkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IHRhYmxlQXBpID0gc2V0dGluZ3Mub0luc3RhbmNlLmFwaSgpO1xuXHRcdGNvbnN0IG9yZGVyQ29sdW1uSW5kZXggPSBkYXRhLm9yZGVyWzBdLmNvbHVtbjtcblx0XHRjb25zdCBvcmRlckNvbHVtbk5hbWUgPSB0YWJsZUFwaS5jb2x1bW4ob3JkZXJDb2x1bW5JbmRleCkubmFtZSgpIHx8IHVuZGVmaW5lZDtcblx0XHRcblx0XHRpZiAoZGF0YS5vcmRlcikge1xuXHRcdCAgICBkYXRhLm9yZGVyID0gZGF0YS5vcmRlclswXS5kaXI7XG5cdFx0ICAgIGRhdGEuc29ydCA9IG9yZGVyQ29sdW1uTmFtZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKGRhdGEuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGRlbGV0ZSBkYXRhLmNvbHVtbnM7XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChkYXRhLnNlYXJjaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGRhdGEubWFwX3NlYXJjaCA9IGRhdGEuc2VhcmNoLnZhbHVlO1xuXHRcdCAgICBkZWxldGUgZGF0YS5zZWFyY2g7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHQgICAgfSxcblx0ICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcblx0ICAgIH0sXG5cdH0sXG5cdGRyYXdDYWxsYmFjazogZnVuY3Rpb24gKHNldHRpbmdzKSB7XG5cdCAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG5cdCAgICBlbWl0KCdkcmF3ZWQnKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVEKTtcdFx0IFxuXHRcdCBzYXZlX2xhc3Rfc29ydChzZXR0aW5ncy5hTGFzdFNvcnRbMF0pO1xuXHR9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLnRhYmxlX2NvbmZpZyB8fCB7fSkpIHtcblx0ZXh0ZW5kX2NvbmZpZ1tpdGVtXSA9IHByb3BzLnRhYmxlX2NvbmZpZ1tpdGVtXVxuICAgIH1cbiAgICBcbiAgICBsZXQgY29uZmlnID0gRGF0YVRhYmxlVXRpbHMuZ2V0U3RkRGF0YXRhYmxlQ29uZmlnKHByb3BzLnRhYmxlX2J1dHRvbnMpO1xuICAgIGNvbmZpZyA9IERhdGFUYWJsZVV0aWxzLmV4dGVuZENvbmZpZyhjb25maWcsIGV4dGVuZF9jb25maWcpO1xuICAgIHRhYmxlID0gJCh0YWJsZV9pZC52YWx1ZSkuRGF0YVRhYmxlKGNvbmZpZyk7XG5cdCBsb2FkX3RhYmxlX21lbnUoKTtcbiAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiAocHJvcHMuZmlsdGVyX2J1dHRvbnMgfHwgW10pKSB7XG5cdC8qIFNldCBmaWx0ZXJzIHRvIGFjdGl2ZSBpZiBhdmFpbGFibGUgaW4gdGhlIHVybCAqL1xuXHRjb25zdCBjdXJyX3ZhbHVlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyLmZpbHRlck1lbnVLZXkpXG5cdGlmKGN1cnJfdmFsdWUgJiYgY3Vycl92YWx1ZSAhPSAnJykge1xuXHQgICAgbGV0IG51bV9ub25fYWN0aXZlX2VudHJpZXMgPSAwXG5cdCAgICBmaWx0ZXIuZmlsdGVycy5mb3JFYWNoKChpKSA9PiB7XG5cdFx0aS5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2Vcblx0XHRudW1fbm9uX2FjdGl2ZV9lbnRyaWVzICs9IDFcblx0XHRpZihpLmlkID09IGN1cnJfdmFsdWUpIHtcblx0XHQgICAgaS5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZVxuXHRcdCAgICBudW1fbm9uX2FjdGl2ZV9lbnRyaWVzIC09IDFcblx0XHR9XG5cdCAgICB9KVxuXHQgICAgXG5cdCAgICBpZihudW1fbm9uX2FjdGl2ZV9lbnRyaWVzID09IGZpbHRlci5maWx0ZXJzLmxlbmd0aCkge1xuXHRcdG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgJycpO1xuXHRcdHVwZGF0ZWQgPSB0cnVlXG5cdCAgICB9XG5cdH1cblx0XG5cdG5ldyBEYXRhVGFibGVGaWx0ZXJzTWVudSh7XG5cdCAgICBmaWx0ZXJUaXRsZTogZmlsdGVyLmZpbHRlclRpdGxlLFxuXHQgICAgdGFibGVBUEk6IHRhYmxlLFxuXHQgICAgZmlsdGVyczogZmlsdGVyLmZpbHRlcnMsXG5cdCAgICBmaWx0ZXJNZW51S2V5OiBmaWx0ZXIuZmlsdGVyTWVudUtleSxcblx0ICAgIGNvbHVtbkluZGV4OiBmaWx0ZXIuY29sdW1uSW5kZXgsXG5cdCAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuXHQgICAgaWQ6IGZpbHRlci5pZCxcblx0ICAgIHJlbW92ZUFsbEVudHJ5OiBmaWx0ZXIucmVtb3ZlQWxsRW50cnksXG5cdCAgICBjYWxsYmFja0Z1bmN0aW9uOiBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvblxuXHR9KS5pbml0KCk7XG4gICAgfVxuICAgIFxuICAgIGlmKHVwZGF0ZWQgJiYgcHJvcHMuYmFzZV9wYXJhbXMpIHtcblx0Y29uc3QgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKVxuXHRmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIChlbnRyaWVzKSkge1xuXHQgICAgbmV3X3BhcmFtc1trZXldID0gdmFsdWVcblx0fVxuXHR0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIG5ld19wYXJhbXMpKVxuXHRyZWxvYWQoKVxuICAgIH1cbn1cblxubGV0IHRhYmxlID0gbnVsbDtcbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgbG9hZERhdGF0YWJsZSgpXG59KTtcblxuZnVuY3Rpb24gZ2V0X3RhYmxlX2RlZmF1bHRfbWVudSgpIHtcbiAgICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICByZXR1cm4gJCgkKFwiLnJvdyAudGV4dC1lbmRcIiwgdGFibGVfd3JhcHBlcikuY2hpbGRyZW4oKVswXSk7O1xufVxuXG5mdW5jdGlvbiBzZWFyY2hfdmFsdWUodmFsdWVfdG9fc2VhcmNoKSB7XG5cdGlmICh0YWJsZSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHR0YWJsZS5zZWFyY2godmFsdWVfdG9fc2VhcmNoKS5kcmF3KCk7XG59XG5cbmxldCB0YWJsZV9kZWZhdWx0X21lbnUgPSBudWxsO1xuZnVuY3Rpb24gbG9hZF90YWJsZV9tZW51KCkge1xuICAgIGlmICh0YWJsZV9kZWZhdWx0X21lbnUgPT0gbnVsbCkge1xuXHR0YWJsZV9kZWZhdWx0X21lbnUgPSBnZXRfdGFibGVfZGVmYXVsdF9tZW51KCk7XG4gICAgfVxuICAgIGlmIChzbG90cyA9PSBudWxsIHx8IHNsb3RzLm1lbnUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgbWVudV9hcnJheSA9IHNsb3RzLm1lbnUoKTtcbiAgICBpZiAobWVudV9hcnJheSA9PSBudWxsIHx8IG1lbnVfYXJyYXkubGVuZ3RoID09IDApIHsgcmV0dXJuOyB9XG4gICAgbGV0IG5vZGUgPSBzbG90cy5tZW51KClbMF07XG4gICAgbGV0IGVsZW1lbnQgPSAkKFwiPGRpdiBjbGFzcz0nZC1pbmxpbmUtYmxvY2snPjwvZGl2PlwiKVswXTtcbiAgICBjb25zdCB7IHZOb2RlLCBlbCB9ID0gcmVuZGVyX2NvbXBvbmVudChub2RlLCB7IGFwcDogIGluc3RhbmNlPy5hcHBDb250ZXh0Py5hcHAsIGVsZW1lbnQgfSk7XG4gICAgLy8gY29uc3QgeyB2Tm9kZSwgZWwgfSA9IHJlbmRlcl9jb21wb25lbnQoVGVzdCwgeyBhcHA6ICBpbnN0YW5jZS5hcHBDb250ZXh0LmFwcCB9KTtcbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAkKCQoXCIucm93IC50ZXh0LWVuZFwiLCB0YWJsZV93cmFwcGVyKS5jaGlsZHJlbigpWzBdKS5hcHBlbmQoZWwpO1xufVxuXG5jb25zdCByZWxvYWQgPSAoKSA9PiB7XG4gICAgaWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbn1cblxuY29uc3QgdXBkYXRlX3VybCA9IChuZXdfdXJsKSA9PiB7XG4gICAgaWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgdGFibGUuYWpheC51cmwobmV3X3VybCk7XG59XG5cbmNvbnN0IGRlbGV0ZV9idXR0b25faGFuZGxlcnMgPSAoaGFuZGxlcklkKSA9PiB7XG4gICAgRGF0YVRhYmxlVXRpbHMuZGVsZXRlQnV0dG9uSGFuZGxlcnMoaGFuZGxlcklkKTtcbn07XG5cbmxldCBpc19kZXN0cm95ZWQgPSBmYWxzZTtcblxuY29uc3QgZGVzdHJveV90YWJsZSA9ICgpID0+IHtcbiAgICB0YWJsZS5jbGVhcigpO1xuICAgIHRhYmxlLmRlc3Ryb3kodHJ1ZSk7XG4gICAgaXNfZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBwcm9wcy5jb2x1bW5zX2NvbmZpZy5maWx0ZXIoKGNvbmZpZykgPT4gY29uZmlnLmhhbmRsZXJJZCAhPSBudWxsKS5mb3JFYWNoKChjb25maWcpID0+IHtcblx0ZGVsZXRlX2J1dHRvbl9oYW5kbGVycyhjb25maWcuaGFuZGxlcklkKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IHJlZnJlc2hfbWVudSA9ICgpID0+IHtcbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAkKCQoXCIucm93IC50ZXh0LWVuZFwiLCB0YWJsZV93cmFwcGVyKS5jaGlsZHJlbigpWzBdKS5odG1sKFwiXCIpO1xuICAgIGxvYWRfdGFibGVfbWVudSgpO1xufTtcblxuY29uc3QgaXNfbGFzdF9zb3J0aW5nX2F2YWlsYWJsZSA9IChpZCkgPT4ge1xuXHRyZXR1cm4gbG9hZF9sYXN0X3NvcnQoaWQpICE9IG51bGw7XG59XG5cbmRlZmluZUV4cG9zZSh7IHJlbG9hZCwgZGVsZXRlX2J1dHRvbl9oYW5kbGVycywgZGVzdHJveV90YWJsZSwgdXBkYXRlX3VybCwgcmVmcmVzaF9tZW51LCBpc19sYXN0X3NvcnRpbmdfYXZhaWxhYmxlLCBsb2FkX2xhc3Rfc29ydCwgc2F2ZV9sYXN0X3NvcnQsIHNlYXJjaF92YWx1ZSB9KTtcblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBpZiAoaXNfZGVzdHJveWVkID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgZGVzdHJveV90YWJsZSgpO1xuICAgIC8vIHRhYmxlLmRlc3Ryb3kodHJ1ZSk7XG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBjcmVhdGVWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJfY29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50LCB7IHByb3BzLCBjaGlsZHJlbiwgZWxlbWVudCwgYXBwIH0gPSB7fSkge1xuICAgIGxldCBlbCA9IGVsZW1lbnRcbiAgICBsZXQgdk5vZGUgPSBjcmVhdGVWTm9kZShjb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbilcbiAgICBpZiAoYXBwICYmIGFwcC5fY29udGV4dCkgdk5vZGUuYXBwQ29udGV4dCA9IGFwcC5fY29udGV4dFxuICAgIGlmIChlbCkgcmVuZGVyKHZOb2RlLCBlbClcbiAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICkgcmVuZGVyKHZOb2RlLCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgIFxuICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG5cdGlmIChlbCkgcmVuZGVyKG51bGwsIGVsKVxuXHRlbCA9IG51bGxcblx0dk5vZGUgPSBudWxsXG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IHZOb2RlLCBkZXN0cm95LCBlbCB9XG59O1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTIgbXQtMlwiPlxuICAgICAgICA8QWxlcnRJbmZvPjwvQWxlcnRJbmZvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBoLTEwMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgIDxEYXRlVGltZVJhbmdlUGlja2VyIHN0eWxlPVwibWFyZ2luLXRvcDowLjVyZW07XCIgY2xhc3M9XCJtcy0xXCIgOmlkPVwiaWRfZGF0ZV90aW1lX3BpY2tlclwiIDplbmFibGVfcmVmcmVzaD1cInRydWVcIlxuICAgICAgICAgICAgICAgIHJlZj1cImRhdGVfdGltZV9waWNrZXJcIiBAZXBvY2hfY2hhbmdlPVwiZXBvY2hfY2hhbmdlXCIgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIlxuICAgICAgICAgICAgICAgIDpjdXN0b21fdGltZV9pbnRlcnZhbF9saXN0PVwidGltZV9wcmVzZXRfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImVuYWJsZV9zbmFwc2hvdHNcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdwYWdlX3N0YXRzLm1hbmFnZV9zbmFwc2hvdHNfYnRuJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInRyYWZmaWNfZXh0cmFjdGlvbl9wZXJtaXR0ZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIiA6dGl0bGU9XCJfaTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9kb3dubG9hZCcpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1kb3dubG9hZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX2Rvd25sb2FkX2ZpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMudGl0bGVfbW9kYWxfZG93bmxvYWRfZmlsZScpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1maWxlLWltYWdlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19oaXN0b3J5X2VuYWJsZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMuaGlzdG9yaWNhbF9mbG93cycpXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtdGFibGVcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvRGF0ZVRpbWVSYW5nZVBpY2tlcj5cbiAgICAgICAgICAgIDwhLS0gc2VsZWN0IG1ldHJpYyAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVwidHNfbWVudV9yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0xIG1lLTEgbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCIgOm9wdGlvbnM9XCJtZXRyaWNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwic2VsZWN0X21ldHJpY1wiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5saW5lIHNlbGVjdDItc2l6ZSBtZS0yIG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZVwiIDpvcHRpb25zPVwiZ3JvdXBzX29wdGlvbnNfbW9kZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZ3JvdXBzX29wdGlvbnNfbW9kZVwiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X21hbmFnZV90aW1lc2VyaWVzXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5IGlubGluZVwiXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogc3VwZXI7JyB2LWlmPVwiaXNfbnRvcF9wcm9cIj5cbiAgICAgICAgICAgICAgICAgICAgTWFuYWdlIFRpbWVzZXJpZXNcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpKSBpbiBjaGFydHNfb3B0aW9uc19pdGVtc1wiIDprZXk9XCJpdGVtLmtleVwiPlxuICAgICAgICAgICAgICAgIDxUaW1lc2VyaWVzQ2hhcnQgOmlkPVwiaWRfY2hhcnQgKyBpXCIgOnJlZj1cImVsID0+IHsgY2hhcnRzW2ldID0gZWwgfVwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIiA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKGkpXCJcbiAgICAgICAgICAgICAgICAgICAgQHpvb209XCJlcG9jaF9jaGFuZ2VcIiBAY2hhcnRfcmVsb2FkZWQ9XCJjaGFydF9yZWxvYWRlZFwiPlxuICAgICAgICAgICAgICAgIDwvVGltZXNlcmllc0NoYXJ0PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTQgY2FyZCBjYXJkLXNoYWRvd1wiIHYtaWY9XCJlbmFibGVfc3RhdHNfdGFibGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8Qm9vdHN0cmFwVGFibGUgaWQ9XCJwYWdlX3N0YXRzX2Jvb3RzdHJhcF90YWJsZVwiIDpjb2x1bW5zPVwic3RhdHNfY29sdW1uc1wiIDpyb3dzPVwic3RhdHNfcm93c1wiXG4gICAgICAgICAgICAgICAgICAgIDpwcmludF9odG1sX2NvbHVtbj1cIihjb2wpID0+IHByaW50X3N0YXRzX2NvbHVtbihjb2wpXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwiKGNvbCwgcm93KSA9PiBwcmludF9zdGF0c19yb3coY29sLCByb3cpXCI+XG4gICAgICAgICAgICAgICAgPC9Cb290c3RyYXBUYWJsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCIgdi1pZj1cImlzX250b3BfcHJvXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2VsZWN0ZWRfdG9wX3RhYmxlPy50YWJsZV9jb25maWdfZGVmXCIgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdG9wX3RhYmxlXCIgOm9wdGlvbnM9XCJ0b3BfdGFibGVfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8RGF0YXRhYmxlIHYtaWY9XCJzZWxlY3RlZF90b3BfdGFibGU/LnRhYmxlX2NvbmZpZ19kZWZcIiA6a2V5PVwic2VsZWN0ZWRfdG9wX3RhYmxlPy52YWx1ZVwiIHJlZj1cInRvcF90YWJsZV9yZWZcIlxuICAgICAgICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLnRhYmxlX2J1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgICAgICAgOmRhdGFfdXJsPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYuZGF0YV91cmxcIlxuICAgICAgICAgICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICA6dGFibGVfY29uZmlnPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8TW9kYWxTbmFwc2hvdCB2LWlmPVwiZW5hYmxlX3NuYXBzaG90c1wiIHJlZj1cIm1vZGFsX3NuYXBzaG90XCIgOmNzcmY9XCJjc3JmXCIgOnBhZ2U9XCJwYWdlX3NuYXBzaG90c1wiXG4gICAgICAgIEBhZGRlZF9zbmFwc2hvdD1cInJlZnJlc2hfc25hcHNob3RzXCIgQGRlbGV0ZWRfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIlxuICAgICAgICBAZGVsZXRlZF9hbGxfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIj5cbiAgICA8L01vZGFsU25hcHNob3Q+XG5cbiAgICA8TW9kYWxUaW1lc2VyaWVzIHYtaWY9XCJpc19udG9wX3Byb1wiIHJlZj1cIm1vZGFsX3RpbWVzZXJpZXNcIiA6c291cmNlc190eXBlc19lbmFibGVkPVwic291cmNlc190eXBlc19lbmFibGVkXCJcbiAgICAgICAgQGFwcGx5PVwiYXBwbHlfbW9kYWxfdGltZXNlcmllc1wiPlxuICAgIDwvTW9kYWxUaW1lc2VyaWVzPlxuXG4gICAgPE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gaWQ9XCJwYWdlX3N0YXRzX21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiIHJlZj1cIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiPlxuICAgIDwvTW9kYWxUcmFmZmljRXh0cmFjdGlvbj5cblxuICAgIDxNb2RhbERvd25sb2FkRmlsZSByZWY9XCJtb2RhbF9kb3dubG9hZF9maWxlXCIgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMudGl0bGVfbW9kYWxfZG93bmxvYWRfZmlsZScpXCIgZXh0PVwicG5nXCJcbiAgICAgICAgQGRvd25sb2FkPVwiZG93bmxvYWRfY2hhcnRfcG5nXCI+XG4gICAgPC9Nb2RhbERvd25sb2FkRmlsZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUaW1lc2VyaWVzQ2hhcnQgfSBmcm9tIFwiLi90aW1lc2VyaWVzLWNoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9tb2RhbC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERvd25sb2FkRmlsZSB9IGZyb20gXCIuL21vZGFsLWRvd25sb2FkLWZpbGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCb290c3RyYXBUYWJsZSB9IGZyb20gXCIuL2Jvb3RzdHJhcC10YWJsZS52dWVcIjtcblxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY3NyZjogU3RyaW5nLFxuICAgIGlzX250b3BfcHJvOiBCb29sZWFuLFxuICAgIHNvdXJjZV92YWx1ZV9vYmplY3Q6IE9iamVjdCxcbiAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IE9iamVjdCxcbiAgICBzb3VyY2VzX3R5cGVzX3RvcF9lbmFibGVkOiBPYmplY3QsXG4gICAgZW5hYmxlX3NuYXBzaG90czogQm9vbGVhbixcbiAgICBpc19oaXN0b3J5X2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHJhZmZpY19leHRyYWN0aW9uX3Blcm1pdHRlZDogQm9vbGVhbixcbiAgICBpc19kYXJrX21vZGU6IEJvb2xlYW4sXG59KTtcblxuLy9udG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCgpO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xubGV0IGlkX2NoYXJ0ID0gXCJjaGFydFwiO1xubGV0IGlkX2RhdGVfdGltZV9waWNrZXIgPSBcImRhdGVfdGltZV9waWNrZXJcIjtcbmxldCBjaGFydF90eXBlID0gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuVFNfTElORTtcbmNvbnN0IGNvbmZpZ19hcHBfdGFibGUgPSByZWYoe30pO1xuY29uc3QgaW5pdF9jb25maWdfdGFibGUgPSByZWYoZmFsc2UpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGRhdGVfdGltZV9waWNrZXIgPSByZWYobnVsbCk7XG5jb25zdCB0b3BfdGFibGVfcmVmID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfdGltZXNlcmllcyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3NuYXBzaG90ID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZG93bmxvYWRfZmlsZSA9IHJlZihudWxsKTtcblxuY29uc3QgbWluX3RpbWVfaW50ZXJ2YWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBtZXRyaWNzID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSk7XG5jb25zdCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcblxuY29uc3QgZW5hYmxlX3N0YXRzX3RhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV90b3BfdGFibGUgPSByZWYoZmFsc2UpO1xuXG4vKipcbiAqIHsga2V5OiBpZGVudGlmaWVyIG9mIENoYXJ0IGNvbXBvbmVudCwgaWYgY2hhbmdlIENoYXJ0IHdpbGwgYmUgZGVzdHJveWVkIGFuZCByZWNyZWF0ZWQsXG4gKiAgY2hhcnRfb3B0aW9uczogY2hhcnQgb3B0aW9ucyB9W11cbiAqKi9cbmNvbnN0IGNoYXJ0c19vcHRpb25zX2l0ZW1zID0gcmVmKFtdKTtcblxuLyoqXG4gKiBNb2RlcyB0aGF0IHJlcHJlc2VudCBob3cgaXQncyBwb3NzaWJsZSBkaXNwbGF5IHRpbWVzZXJpZXMuXG4gKi9cbmNvbnN0IGdyb3Vwc19vcHRpb25zX21vZGVzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHRpbWVzZXJpZXNVdGlscy5ncm91cHNPcHRpb25zTW9kZXNFbnVtKTtcbi8qKlxuICogQ3VycmVudCBkaXNwbGF5IHRpbWVzZXJpZXMgbW9kZS5cbiAqL1xuY29uc3QgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlID0gcmVmKGluaXRfZ3JvdXBzX29wdGlvbl9tb2RlKCkpO1xuXG5sZXQgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSBudWxsO1xuXG5jb25zdCBjdXN0b21fbWV0cmljID0geyBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5jdXN0b21fbWV0cmljcycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9O1xuXG5jb25zdCBwYWdlX3NuYXBzaG90cyA9IFwidGltZXNlcmllc1wiO1xuXG5jb25zdCB0c19tZW51X3JlYWR5ID0gcmVmKGZhbHNlKTtcbmNvbnN0IHRpbWVfcHJlc2V0X2xpc3QgPSBbXG4gICAgeyB2YWx1ZTogXCIxMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCIzMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMzBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IHRydWUgfSxcbiAgICB7IHZhbHVlOiBcImhvdXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuaG91cicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4yX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCI2X2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjZfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjEyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEyX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJkYXlcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuZGF5JyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJ3ZWVrXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLndlZWsnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIm1vbnRoXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLm1vbnRoJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJ5ZWFyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLnllYXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcImN1c3RvbVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5jdXN0b20nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UsIGRpc2FibGVkOiB0cnVlLCB9LFxuXTtcblxuZnVuY3Rpb24gaW5pdF9ncm91cHNfb3B0aW9uX21vZGUoKSB7XG4gICAgbGV0IGdyb3Vwc19tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIpO1xuICAgIGlmIChncm91cHNfbW9kZSAhPSBudWxsICYmIGdyb3Vwc19tb2RlICE9IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVzZXJpZXNVdGlscy5nZXRHcm91cE9wdGlvbk1vZGUoZ3JvdXBzX21vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzX29wdGlvbnNfbW9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCkge1xuICAgIGlmIChwcm9wcy5zb3VyY2VfdmFsdWVfb2JqZWN0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIG1ldHJpY3NNYW5hZ2VyLnNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybChzb3VyY2VfdHlwZSwgcHJvcHMuc291cmNlX3ZhbHVlX29iamVjdCk7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIFxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIikgPT0gXCJ2YV9oaXN0b3JpY2FsXCIpIHtcbiAgICAgICAgbGV0IGNvbHVtbnNfdG1wID0gW107XG4gICAgICAgIHN0YXRzX2NvbHVtbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udmEpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zX3RtcC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgc3RhdHNfY29sdW1ucyA9IGNvbHVtbnNfdG1wO1xuICAgIH1cbiAgICBcbiAgICBpZiAocHJvcHMuc291cmNlX3ZhbHVlX29iamVjdC5pc192YSkge1xuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSA9IFwiaG91clwiO1xuICAgICAgICBudG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbChcImRheVwiKTtcbiAgICB9O1xuICAgIFxuICAgIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpbml0KCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBudG9wbmdfc3luYy5vbl9yZWFkeShpZF9kYXRlX3RpbWVfcGlja2VyKSxcbiAgICBdKTtcbiAgICAvLyBjaGFydC52YWx1ZS5yZWdpc3Rlcl9zdGF0dXMoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHNcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gdHJ1ZTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwoaHR0cF9wcmVmaXgpO1xuICAgIGxldCBtZXRyaWNfdHNfc2NoZW1hO1xuICAgIGxldCBtZXRyaWNfcXVlcnk7XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgcHVzaF9jdXN0b21fbWV0cmljID0gZmFsc2U7XG4gICAgICAgIG1ldHJpY190c19zY2hlbWEgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRzX3NjaGVtYVwiKTtcbiAgICAgICAgbGV0IHRzX3F1ZXJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0c19xdWVyeVwiKTtcbiAgICAgICAgaWYgKHRzX3F1ZXJ5ICE9IG51bGwgJiYgdHNfcXVlcnkgIT0gXCJcIikge1xuICAgICAgICAgICAgbWV0cmljX3F1ZXJ5ID0gbWV0cmljc01hbmFnZXIuZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5KHRzX3F1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0cmljX3RzX3NjaGVtYSA9PSBcIlwiKSB7IG1ldHJpY190c19zY2hlbWEgPSBudWxsOyB9XG4gICAgICAgIHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMoaHR0cF9wcmVmaXgsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSk7XG4gICAgfVxuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMpO1xuICAgIFxuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMgPT0gdHJ1ZSkge1xuICAgICAgICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBjdXN0b21fbWV0cmljO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlLCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIH1cbiAgICB0c19tZW51X3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgdHJ1ZSk7XG59XG5cbmxldCBsYXN0X3B1c2hfY3VzdG9tX21ldHJpYyA9IG51bGw7XG5hc3luYyBmdW5jdGlvbiBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpIHtcbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNzKGh0dHBfcHJlZml4KTtcbiAgICBpZiAoIWZvcmNlX3JlZnJlc2ggJiYgbGFzdF9wdXNoX2N1c3RvbV9tZXRyaWMgPT0gcHVzaF9jdXN0b21fbWV0cmljKSB7IHJldHVybiBtZXRyaWNzLnZhbHVlOyB9XG4gICAgXG4gICAgaWYgKHB1c2hfY3VzdG9tX21ldHJpYykge1xuICAgICAgICBtZXRyaWNzLnB1c2goY3VzdG9tX21ldHJpYyk7XG4gICAgfVxuICAgIGlmIChjYWNoZV9zbmFwc2hvdHMgPT0gbnVsbCB8fCBmb3JjZV9yZWZyZXNoKSB7XG4gICAgICAgIGNhY2hlX3NuYXBzaG90cyA9IGF3YWl0IGdldF9zbmFwc2hvdHNfbWV0cmljcygpO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZW5hYmxlX3NuYXBzaG90cykge1xuICAgICAgICBsZXQgc25hcHNob3RzX21ldHJpY3MgPSBjYWNoZV9zbmFwc2hvdHM7XG4gICAgICAgIHNuYXBzaG90c19tZXRyaWNzLmZvckVhY2goKHNtKSA9PiBtZXRyaWNzLnB1c2goc20pKTtcbiAgICB9XG4gICAgLyogT3JkZXIgTWV0cmljcyAqL1xuICAgIGlmIChtZXRyaWNzLmxlbmd0aCA+IDApXG4gICAgICAgIG1ldHJpY3Muc29ydChOdG9wVXRpbHMuc29ydEFscGhhYmV0aWNhbGx5KTtcbiAgICBcbiAgICByZXR1cm4gbWV0cmljcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NuYXBzaG90c19tZXRyaWNzKCkge1xuICAgIGlmICghcHJvcHMuZW5hYmxlX3NuYXBzaG90cykgeyByZXR1cm47IH1cbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmlsdGVycy9zbmFwc2hvdHMubHVhP3BhZ2U9JHtwYWdlX3NuYXBzaG90c31gO1xuICAgIFxuICAgIGxldCBzbmFwc2hvdHNfb2JqID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgbGV0IHNuYXBzaG90cyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShzbmFwc2hvdHNfb2JqKTtcbiAgICBsZXQgbWV0cmljc19zbmFwc2hvdHMgPSBzbmFwc2hvdHMubWFwKChzKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zLFxuICAgICAgICAgICAgaXNfc25hcHNob3Q6IHRydWUsXG4gICAgICAgICAgICBsYWJlbDogYCR7cy5uYW1lfWAsXG4gICAgICAgICAgICBncm91cDogXCJTbmFwc2hvdHNcIixcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWV0cmljc19zbmFwc2hvdHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcygpIHtcbiAgICBsZXQgbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlO1xuICAgIHJldHVybiBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpYykge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgbGV0IHRzX2dyb3VwID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gW3RzX2dyb3VwXTtcbiAgICByZXR1cm4gdGltZXNlcmllc19ncm91cHM7XG59XG5cbmNvbnN0IGFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0ID0gYXN5bmMgKHNvdXJjZV90eXBlX2lkLCBzb3VyY2VfdmFsdWVfZGljdCwgbWV0cmljX3NjaGVtYSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VfdHlwZV9mcm9tX2lkKHNvdXJjZV90eXBlX2lkKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfZGljdCk7XG4gICAgbGV0IG1ldHJpYyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWEpO1xuICAgIGxldCB0c19ncm91cCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIGFkZF90c19ncm91cCh0c19ncm91cCk7XG59O1xuXG5jb25zdCBhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSA9IGFzeW5jIChtZXRyaWNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpID0+IHtcbiAgICBsZXQgbWV0cmljID0gbWV0cmljcy52YWx1ZS5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfc2NoZW1hICYmIG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KTtcbiAgICBpZiAobWV0cmljID09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgbWV0cmljID0gJHttZXRyaWNfc2NoZW1hfSwgcXVlcnkgPSAke21ldHJpY19xdWVyeX0gbm90IGZvdW5kLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWMpO1xuICAgIC8vIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbiAgICAvLyBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLmFkZF90c19ncm91cCh0aW1lc2VyaWVzX2dyb3Vwc1swXSwgdHJ1ZSk7XG4gICAgYWRkX3RzX2dyb3VwKHRpbWVzZXJpZXNfZ3JvdXBzWzBdKTtcbn07XG5cbmZ1bmN0aW9uIGFkZF90c19ncm91cCh0c19ncm91cCkge1xuICAgIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLmFkZF90c19ncm91cCh0c19ncm91cCwgdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbGVjdF9tZXRyaWMobWV0cmljKSB7XG4gICAgaWYgKG1ldHJpYy5pc19zbmFwc2hvdCA9PSB0cnVlKSB7XG4gICAgICAgIGxldCB1cmxfcGFyYW1ldGVycyA9IG1ldHJpYy5maWx0ZXJzO1xuICAgICAgICBsZXQgdGltZXNlcmllc191cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiLCB1cmxfcGFyYW1ldGVycyk7XG4gICAgICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybChodHRwX3ByZWZpeCwgdGltZXNlcmllc191cmxfcGFyYW1zKTtcbiAgICAgICAgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlLnZhbHVlID0gdGltZXNlcmllc1V0aWxzLmdldEdyb3VwT3B0aW9uTW9kZShudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIiwgdXJsX3BhcmFtZXRlcnMpKTtcbiAgICAgICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBsb2FkX3NlbGVjdGVkX21ldHJpY19wYWdlX3N0YXRzX2RhdGEoKTtcbiAgICAgICAgcmVmcmVzaF9tZXRyaWNzKGZhbHNlKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSgpIHtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBnZXRfc2VsZWN0ZWRfdGltZXNlcmllc19ncm91cHMoKTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBlcG9jaF9jaGFuZ2UobmV3X2Vwb2NoKSB7XG4gICAgbGV0IHB1c2hfY3VzdG9tX21ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5sYWJlbCA9PSBjdXN0b21fbWV0cmljLmxhYmVsO1xuICAgIGxvYWRfcGFnZV9zdGF0c19kYXRhKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkLCB0cnVlLCBmYWxzZSwgbmV3X2Vwb2NoLnJlZnJlc2hfZGF0YSk7XG4gICAgcmVmcmVzaF90b3BfdGFibGUoKTtcbiAgICByZWZyZXNoX21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hhcnRfcmVsb2FkZWQoY2hhcnRfb3B0aW9ucykge1xufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3NuYXBzaG90KCkge1xuICAgIG1vZGFsX3NuYXBzaG90LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tYW5hZ2VfdGltZXNlcmllcygpIHtcbiAgICBpZiAobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNob3cobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQpO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiBjYWxsZWQgYnkgQ2hhcnQgY29tcG9uZW50IHRvIGRyYXcgb3IgdXBkYXRlIHRoYXQgcmV0dXJuIGNoYXJ0IG9wdGlvbnMuXG4gKiovXG5mdW5jdGlvbiBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoY2hhcnRfaW5kZXgpIHtcbiAgICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWVbY2hhcnRfaW5kZXhdLmNoYXJ0X29wdGlvbnM7XG4gICAgfVxufVxuXG5sZXQgY2FjaGVfc25hcHNob3RzID0gbnVsbDtcbmZ1bmN0aW9uIHJlZnJlc2hfc25hcHNob3RzKCkge1xuICAgIGxldCBwdXNoX2N1c3RvbV9tZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUubGFiZWwgPT0gY3VzdG9tX21ldHJpYy5sYWJlbDtcbiAgICByZWZyZXNoX21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCB0cnVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgZm9yY2VfcmVmcmVzaCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpO1xuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMpIHtcbiAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gY3VzdG9tX21ldHJpYztcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5X21vZGFsX3RpbWVzZXJpZXModGltZXNlcmllc19ncm91cHMpIHtcbiAgICByZWZyZXNoX21ldHJpY3ModHJ1ZSk7XG4gICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VfZ3JvdXBzX29wdGlvbnNfbW9kZSgpIHtcbiAgICBsb2FkX3BhZ2Vfc3RhdHNfZGF0YShsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCwgZmFsc2UsIGZhbHNlKTtcbn1cblxubGV0IHRzX2NoYXJ0c19vcHRpb25zO1xuLyogVGhpcyBmdW5jdGlvbiBsb2FkIHRoZSBjaGFydCBkYXRhIGFuZCBvcHRpb25zLCBkb2luZyB0aGUgcmVxdWVzdCBhbmQgdGhlbiBzZXR0aW5nIHRoZSBvcHRpb25zICovXG5hc3luYyBmdW5jdGlvbiBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgcmVsb2FkX2NoYXJ0c19kYXRhLCByZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMsIHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG4gICAgLyogR2V0IHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnkgZm9yIHRoZSByZXF1ZXN0LCBsaWtlIGVwb2NoIGVjYy4gKi9cbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgdHNfY29tcGFyZSA9IGdldF90c19jb21wYXJlKHN0YXR1cyk7XG4gICAgaWYgKHJlbG9hZF9jaGFydHNfZGF0YSkge1xuICAgICAgICAvKiBEbyB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZDsgdGhlIGFuc3dlciBpcyBmb3JtYXR0ZWQgYXNcbiAgICAgICAgICogIFsgIFxuICAgICAgICAgKiAgICAgIHsgICBcbiAgICAgICAgICogICAgICAgICAgbWV0YWRhdGE6IHsgLi4uIH0gICAgICAgLy8gQ29udGFpbmluZyB2YXJpb3VzIGluZm8gcmVnYXJkaW5nIHRoZSBzZXJpZXMgcmV0dXJuZWRcbiAgICAgICAgICogICAgICAgICAgc2VyaWVzOiB7IC4uLiB9ICAgICAgICAgLy8gQ29udGFpbmluZyB0aGUgc2VyaWVzIHdpdGggdGhlIGRhdGEsIGxhYmVscyBhbmQgc3RhdGlzdGljc1xuICAgICAgICAgKiAgICAgIH1cbiAgICAgICAgICogIF1cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lc2VyaWVzX2dyb3VwcyA9IFtdO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRW1wdHkgdGltZXNlcmllc19ncm91cHMgcmVxdWVzdFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0c19jaGFydHNfb3B0aW9ucyA9IGF3YWl0IHRpbWVzZXJpZXNVdGlscy5nZXRUc0NoYXJ0c09wdGlvbnMoaHR0cF9wcmVmaXgsIHN0YXR1cywgdHNfY29tcGFyZSwgdGltZXNlcmllc19ncm91cHMsIHByb3BzLmlzX250b3BfcHJvKTtcbiAgICB9XG5cbiAgICAvKiBVcGRhdGUgdGltZXNlcmllcyBsYWJlbCB0byBkaXNwbGF5ICovXG4gICAgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX3NvdXJjZV9sYWJlbCh0aW1lc2VyaWVzX2dyb3VwcywgdHNfY2hhcnRzX29wdGlvbnMpO1xuXG4gICAgLyogRm9ybWF0IHRoZSBvcHRpb25zIGZvciB0aGUgdGltZXNlcmllcyBsaWJyYXJ5ICovXG4gICAgbGV0IGNoYXJ0c19vcHRpb25zID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb09wdGlvbnNBcnJheSh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZSwgdHNfY29tcGFyZSk7XG4gICAgaWYgKHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG4gICAgICAgIHVwZGF0ZV9jaGFydHMoY2hhcnRzX29wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9jaGFydHNfb3B0aW9uc19pdGVtcyhjaGFydHNfb3B0aW9ucyk7XG4gICAgfVxuICAgIHNldF9zdGF0c19yb3dzKHRzX2NoYXJ0c19vcHRpb25zLCB0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICBpZiAocmVsb2FkX3RvcF90YWJsZV9vcHRpb25zKSB7XG4gICAgICAgIHNldF90b3BfdGFibGVfb3B0aW9ucyh0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICB9XG4gICAgLy8gc2V0IGxhc3RfdGltZXNlcmllc19ncm91cGRfbG9hZGVkXG4gICAgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSB0aW1lc2VyaWVzX2dyb3VwcztcbiAgICAvLyB1cGRhdGUgdXJsIHBhcmFtc1xuICAgIHVwZGF0ZV91cmxfcGFyYW1zKCk7XG59XG5cbi8qIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBzZXQgdGhlIGxhYmVsIG9mIHRoZSB0aW1lc2VyaWVzOyBpZiBhdmFpbGFibGUgaXQgc2hvdWxkIGJlXG4gKiBmb3VuZCBpbiByZXNwb25zZS5tZXRhZGF0YS5sYWJlbCBmaWVsZFxuICovXG5mdW5jdGlvbiBzZXRfdGltZXNlcmllc19ncm91cHNfc291cmNlX2xhYmVsKHRpbWVzZXJpZXNfZ3JvdXBzLCB0c19jaGFydHNfb3B0aW9ucykge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzLmZvckVhY2goKHRzX2dyb3VwLCBpKSA9PiB7XG4gICAgICAgIGxldCB0c19vcHRpb25zID0gdHNfY2hhcnRzX29wdGlvbnNbaV07XG4gICAgICAgIGxldCBsYWJlbCA9IHRzX29wdGlvbnM/Lm1ldGFkYXRhPy5sYWJlbDtcbiAgICAgICAgaWYgKGxhYmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBzb3VyY2VfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2luZGV4XTtcbiAgICAgICAgICAgIHNvdXJjZS5sYWJlbCA9IGxhYmVsO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV91cmxfcGFyYW1zKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIiwgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlLnZhbHVlLnZhbHVlKTtcbiAgICBtZXRyaWNzTWFuYWdlci5zZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NoYXJ0cyhjaGFydHNfb3B0aW9ucykge1xuICAgIGNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbnMsIGkpID0+IHtcbiAgICAgICAgLy8gY2hhcnRzLnZhbHVlW2ldLnVwZGF0ZV9jaGFydF9vcHRpb25zKHsgeWF4aXM6IG9wdGlvbnMueWF4aXMgfSk7XG4gICAgICAgIGNoYXJ0cy52YWx1ZVtpXS51cGRhdGVfY2hhcnRfc2VyaWVzKG9wdGlvbnM/LnNlcmllcyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldF9jaGFydHNfb3B0aW9uc19pdGVtcyhjaGFydHNfb3B0aW9ucykge1xuICAgIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlID0gY2hhcnRzX29wdGlvbnMubWFwKChvcHRpb25zLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IG50b3BuZ191dGlsaXR5LmdldF9yYW5kb21fc3RyaW5nKCksXG4gICAgICAgICAgICBjaGFydF9vcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRfdHNfY29tcGFyZShzdGF0dXMpIHtcbiAgICAvLyA1bSwgMzBtLCAxaCwgMWQsIDF3LCAxTSwgMVlcbiAgICBsZXQgciA9IE51bWJlci5wYXJzZUludCgoc3RhdHVzLmVwb2NoX2VuZCAtIHN0YXR1cy5lcG9jaF9iZWdpbikgLyA2MCk7XG4gICAgaWYgKHIgPD0gNSkge1xuICAgICAgICByZXR1cm4gXCI1bVwiO1xuICAgIH0gZWxzZSBpZiAociA8PSAzMCkge1xuICAgICAgICByZXR1cm4gXCIzMG1cIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjApIHtcbiAgICAgICAgcmV0dXJuIFwiMWhcIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjAgKiAyNCkge1xuICAgICAgICByZXR1cm4gXCIxZFwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0ICogNykge1xuICAgICAgICByZXR1cm4gXCIxd1wiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0ICogMzApIHtcbiAgICAgICAgcmV0dXJuIFwiMU1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCIxWVwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RvcF90YWJsZV91cmwodHNfZ3JvdXAsIHRhYmxlX3ZhbHVlLCB0YWJsZV92aWV3LCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHN0YXR1cykge1xuICAgIGlmIChzdGF0dXMgPT0gbnVsbCkge1xuICAgICAgICBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIH1cbiAgICBsZXQgdHNfcXVlcnkgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0VHNRdWVyeSh0c19ncm91cCwgdHJ1ZSwgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICBsZXQgdiA9IHRhYmxlX3ZhbHVlO1xuICAgIGxldCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0LyR7dn0vdG9wL3RzX3N0YXRzLmx1YWA7XG4gICAgLy90b2RvOiBnZXQgdHNfcXVlcnlcbiAgICBsZXQgcF9vYmogPSB7XG4gICAgICAgIHpvb206ICc1bScsXG4gICAgICAgIHRzX3F1ZXJ5LFxuICAgICAgICAvLyB0c19xdWVyeTogYGlmaWQ6JHtudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpfWAsXG4gICAgICAgIGVwb2NoX2JlZ2luOiBgJHtzdGF0dXMuZXBvY2hfYmVnaW59YCxcbiAgICAgICAgZXBvY2hfZW5kOiBgJHtzdGF0dXMuZXBvY2hfZW5kfWAsXG4gICAgICAgIGRldGFpbF92aWV3OiBgJHt0YWJsZV92aWV3fWAsXG4gICAgICAgIG5ld19jaGFydHM6IGB0cnVlYFxuICAgIH07XG5cbiAgICBsZXQgcF91cmxfcmVxdWVzdCA9IG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChwX29iaiwgJycpO1xuICAgIHJldHVybiBgJHtkYXRhX3VybH0/JHtwX3VybF9yZXF1ZXN0fWA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdG9wX3RhYmxlKCkge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgbGV0IHRhYmxlX2NvbmZpZyA9IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZT8udGFibGVfY29uZmlnX2RlZjtcbiAgICBpZiAodGFibGVfY29uZmlnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgLy8gTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgIGxldCBkYXRhX3VybCA9IGdldF90b3BfdGFibGVfdXJsKHRhYmxlX2NvbmZpZy50c19ncm91cCwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi50YWJsZV92YWx1ZSwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi52aWV3LCB0YWJsZV9jb25maWcudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICB0b3BfdGFibGVfcmVmLnZhbHVlLnVwZGF0ZV91cmwoZGF0YV91cmwpO1xuICAgIHRvcF90YWJsZV9yZWYudmFsdWUucmVsb2FkKCk7XG4gICAgLy8gTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuXG59XG5cbmNvbnN0IHRvcF90YWJsZV9vcHRpb25zID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX3RvcF90YWJsZSA9IHJlZih7fSk7XG5mdW5jdGlvbiBzZXRfdG9wX3RhYmxlX29wdGlvbnModGltZXNlcmllc19ncm91cHMsIHN0YXR1cykge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgdGltZXNlcmllc19ncm91cHMgPSBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZDtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG4gICAgICAgIHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgfVxuXG4gICAgbGV0IHNvdXJjZXNfdHlwZXNfdGFibGVzID0gbWV0cmljc01hbmFnZXIuc291cmNlc190eXBlc190YWJsZXM7XG4gICAgbGV0IHRzX2dyb3VwX2RpY3QgPSB7fTsgLy8gZGljdGlvbmFyeSB3aXRoIDEgdHNfZ3JvdXAgZm9yIGVhY2ggKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpXG4gICAgdGltZXNlcmllc19ncm91cHMuZm9yRWFjaCgodHNfZ3JvdXApID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZV90eXBlID0gdHNfZ3JvdXAuc291cmNlX3R5cGU7XG4gICAgICAgIC8vIGxldCBzb3VyY2VfdHlwZV90YWJsZXMgPSBzb3VyY2VzX3R5cGVzX3RhYmxlc1tzb3VyY2VfdHlwZS5pZF07XG4gICAgICAgIC8vIGxldCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgPSBzb3VyY2VfdHlwZV90YWJsZXMudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0XG5cbiAgICAgICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHRzX2dyb3VwLnNvdXJjZV90eXBlLCB0c19ncm91cC5zb3VyY2VfYXJyYXkpO1xuICAgICAgICB0c19ncm91cF9kaWN0W2lkXSA9IHRzX2dyb3VwO1xuICAgIH0pO1xuICAgIGxldCB0b3BfdGFibGVfaWRfZGljdCA9IHt9O1xuICAgIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlID0gW107XG4gICAgZm9yIChsZXQgaWQgaW4gdHNfZ3JvdXBfZGljdCkge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSB0c19ncm91cF9kaWN0W2lkXTtcbiAgICAgICAgbGV0IG1haW5fc291cmNlX2luZGV4ID0gdGltZXNlcmllc1V0aWxzLmdldE1haW5Tb3VyY2VEZWZJbmRleCh0c19ncm91cCk7XG4gICAgICAgIGxldCBtYWluX3NvdXJjZSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF07XG4gICAgICAgIGxldCBzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuICAgICAgICBsZXQgc291cmNlX3R5cGVfdGFibGVzID0gc291cmNlc190eXBlc190YWJsZXNbc291cmNlX3R5cGUuaWRdO1xuICAgICAgICBpZiAoc291cmNlX3R5cGVfdGFibGVzID09IG51bGwpIHsgY29udGludWU7IH1cblxuICAgICAgICBzb3VyY2VfdHlwZV90YWJsZXMuZm9yRWFjaCgodGFibGVfZGVmKSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5hYmxlc190YWJsZV92YWx1ZSA9IHByb3BzLnNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWRbdGFibGVfZGVmLnRhYmxlX3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChlbmFibGVzX3RhYmxlX3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgZW5hYmxlX3RhYmxlX2RlZiA9IGVuYWJsZXNfdGFibGVfdmFsdWVbdGFibGVfZGVmLnZpZXddO1xuICAgICAgICAgICAgaWYgKCFlbmFibGVfdGFibGVfZGVmKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCA9IHRhYmxlX2RlZi50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3RcblxuICAgICAgICAgICAgbGV0IGRhdGFfdXJsID0gZ2V0X3RvcF90YWJsZV91cmwodHNfZ3JvdXAsIHRhYmxlX2RlZi50YWJsZV92YWx1ZSwgdGFibGVfZGVmLnZpZXcsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc3RhdHVzKTtcbiAgICAgICAgICAgIGxldCB0YWJsZV9pZCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cF9pZCh0c19ncm91cC5zb3VyY2VfdHlwZSwgdHNfZ3JvdXAuc291cmNlX2FycmF5LCBudWxsLCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHRydWUpO1xuICAgICAgICAgICAgdGFibGVfaWQgPSBgJHt0YWJsZV9pZH1fJHt0YWJsZV9kZWYudmlld31gO1xuICAgICAgICAgICAgaWYgKHRvcF90YWJsZV9pZF9kaWN0W3RhYmxlX2lkXSAhPSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdG9wX3RhYmxlX2lkX2RpY3RbdGFibGVfaWRdID0gdHJ1ZTtcblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gYCR7dGFibGVfZGVmLnRhYmxlX3ZhbHVlfV8ke3RhYmxlX2RlZi52aWV3fV8ke3RhYmxlX2lkfWA7XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgICAgICBpZiAodGFibGVfZGVmLmZfZ2V0X2xhYmVsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IGAke3RhYmxlX2RlZi50aXRsZX0gLSAke3NvdXJjZV90eXBlLmxhYmVsfSAke21haW5fc291cmNlLmxhYmVsfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gdGFibGVfZGVmLmZfZ2V0X2xhYmVsKHRzX2dyb3VwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFibGVfY29uZmlnX2RlZiA9IHtcbiAgICAgICAgICAgICAgICB0c19ncm91cCxcbiAgICAgICAgICAgICAgICB0YWJsZV9kZWYsXG4gICAgICAgICAgICAgICAgLy8gdGFibGVfdmFsdWU6IHRhYmxlX2RlZi50YWJsZV92YWx1ZSxcbiAgICAgICAgICAgICAgICAvLyB0YWJsZV92aWV3OiB0YWJsZV9kZWYudmlldyxcblxuICAgICAgICAgICAgICAgIHRhYmxlX2J1dHRvbnM6IFtdLFxuICAgICAgICAgICAgICAgIGRhdGFfdXJsLFxuICAgICAgICAgICAgICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFibGVfY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcjogW1t0YWJsZV9kZWYuZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJ11dLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5EZWZzOiB0YWJsZV9kZWYuY29sdW1uRGVmcyB8fCBbXSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gaXQgc2hvdWxkIGJlIGhlcmUgaW4gdGhpcyBpbnN0YW5jZSB0aGUgdnVldGlmeSBvYmplY3Qgd2l0aCBpdHMgcHJvcGVydGllc1xuICAgICAgICAgICAgdGFibGVfY29uZmlnX2RlZi5jb2x1bW5zX2NvbmZpZyA9IHRhYmxlX2RlZi5jb2x1bW5zLm1hcCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbmRlcl9pZl9jb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICBpc19oaXN0b3J5X2VuYWJsZWQ6IHByb3BzLmlzX2hpc3RvcnlfZW5hYmxlZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGV0IGMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICFjb2x1bW4ucmVuZGVyX2lmIHx8IGNvbHVtbi5yZW5kZXJfaWYocmVuZGVyX2lmX2NvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYy5jbGFzc05hbWUgPT0gbnVsbCkgeyBjLmNsYXNzTmFtZSA9IFwidGV4dC1ub3dyYXBcIjsgfVxuICAgICAgICAgICAgICAgIGlmIChjLnJlc3BvbnNpdmVQcmlvcml0eSA9PSBudWxsKSB7IGMucmVzcG9uc2l2ZVByaW9yaXR5ID0gMTsgfVxuICAgICAgICAgICAgICAgIGMucmVuZGVyID0gY29sdW1uLnJlbmRlci5iaW5kKHtcbiAgICAgICAgICAgICAgICAgICAgYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IHByb3BzLnNvdXJjZXNfdHlwZXNfZW5hYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5OiB0c19ncm91cC5zb3VyY2VfYXJyYXksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBvcHRpb24gPSB7IHZhbHVlLCBsYWJlbCwgdGFibGVfY29uZmlnX2RlZiB9O1xuICAgICAgICAgICAgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUucHVzaChvcHRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSAhPSBudWxsICYmIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZS52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSA9IHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnRhYmxlX2NvbmZpZ19kZWYuZGVmYXVsdCA9PSB0cnVlKTtcbiAgICBpZiAoc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID0gdG9wX3RhYmxlX29wdGlvbnMudmFsdWVbMF07XG4gICAgfVxufVxuXG5sZXQgc3RhdHNfY29sdW1ucyA9IFtcbiAgICB7IGlkOiBcIm1ldHJpY1wiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1ldHJpY1wiKSwgdmE6IHRydWV9LFxuICAgIHsgaWQ6IFwiYXZnXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMuYXZlcmFnZVwiKSwgY2xhc3M6IFwidGV4dC1lbmRcIiwgdmE6IHRydWUgfSxcbiAgICB7IGlkOiBcInBlcmNfOTVcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy45NV9wZXJjXCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogdHJ1ZSB9LFxuICAgIHsgaWQ6IFwibWF4XCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMubWF4XCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogdHJ1ZX0sXG4gICAgeyBpZDogXCJtaW5cIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5taW5cIiksIGNsYXNzOiBcInRleHQtZW5kXCIsIHZhOiB0cnVlIH0sXG4gICAgeyBpZDogXCJ0b3RhbFwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLnRvdGFsXCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogZmFsc2UgfSxcbl07XG5cbmNvbnN0IHN0YXRzX3Jvd3MgPSByZWYoW10pO1xuXG5mdW5jdGlvbiBzZXRfc3RhdHNfcm93cyh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIHN0YXR1cykge1xuICAgIGNvbnN0IGV4dGVuZF9zZXJpZV9uYW1lID0gdHNfY2hhcnRzX29wdGlvbnMubGVuZ3RoID4gMTtcbiAgICBlbmFibGVfc3RhdHNfdGFibGUudmFsdWUgPSB0aW1lc2VyaWVzX2dyb3Vwcy5tYXAoKHRzX2dyb3VwKSA9PiAhdHNfZ3JvdXAuc291cmNlX3R5cGUuZGlzYWJsZV9zdGF0cykucmVkdWNlKChyZXMsIGVsKSA9PiByZXMgfCBlbCwgZmFsc2UpO1xuICAgIGlmICghZW5hYmxlX3N0YXRzX3RhYmxlLnZhbHVlKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IGZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlID0gKHR5cGUpID0+IHtcbiAgICAgICAgbGV0IG1hcF90eXBlID0ge1xuICAgICAgICAgICAgXCJicHNcIjogXCJieXRlc1wiLFxuICAgICAgICAgICAgXCJmcHNcIjogXCJmbG93c1wiLFxuICAgICAgICAgICAgXCJhbGVydHBzXCI6IFwiYWxlcnRzXCIsXG4gICAgICAgICAgICBcImhpdHNzXCI6IFwiaGl0c1wiLFxuICAgICAgICAgICAgXCJwcHNcIjogXCJwYWNrZXRzXCIsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChtYXBfdHlwZVt0eXBlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwX3R5cGVbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfTtcbiAgICBzdGF0c19yb3dzLnZhbHVlID0gW107XG4gICAgdHNfY2hhcnRzX29wdGlvbnMuZm9yRWFjaCgob3B0aW9ucywgaSkgPT4ge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSB0aW1lc2VyaWVzX2dyb3Vwc1tpXTtcbiAgICAgICAgaWYgKHRzX2dyb3VwLnNvdXJjZV90eXBlLmRpc2FibGVfc3RhdHMgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICAgICAgb3B0aW9ucy5zZXJpZXM/LmZvckVhY2goKHMsIGopID0+IHtcbiAgICAgICAgICAgIGxldCB0c19pZCA9IHRpbWVzZXJpZXNVdGlscy5nZXRTZXJpZUlkKHMpO1xuICAgICAgICAgICAgbGV0IHNfbWV0YWRhdGEgPSB0c19ncm91cC5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKHRzX2dyb3VwLm1ldHJpYy5tZWFzdXJlX3VuaXQpO1xuICAgICAgICAgICAgbGV0IHRzX3N0YXRzO1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBzX21ldGFkYXRhLmxhYmVsO1xuICAgICAgICAgICAgaWYgKHNfbWV0YWRhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgLyogU2tpcCBpbiBjYXNlIGl0J3MgcmVxdWVzdGVkIHRvIGhpZGUgdGhlIFRpbWVzZXJpZSAqL1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzX21ldGFkYXRhLnVzZV9zZXJpZV9uYW1lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM/LmRhdGEubGVuZ3RoID4gaikge1xuICAgICAgICAgICAgICAgIHRzX3N0YXRzID0gcy5zdGF0aXN0aWNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRzX3N0YXRzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5leHRfbGFiZWwpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcy5leHRfbGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5hbWUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVOYW1lKG5hbWUsIHRzX2lkLCB0c19ncm91cCwgZXh0ZW5kX3NlcmllX25hbWUpO1xuICAgICAgICAgICAgbGV0IHRvdGFsX2Zvcm1hdHRlcl90eXBlID0gZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUodHNfZ3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCk7XG4gICAgICAgICAgICBsZXQgdG90YWxfZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKHRvdGFsX2Zvcm1hdHRlcl90eXBlKTtcbiAgICAgICAgICAgIGxldCByb3cgPSB7XG4gICAgICAgICAgICAgICAgbWV0cmljOiBuYW1lLFxuICAgICAgICAgICAgICAgIC8vIHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodG90YWwpLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodHNfc3RhdHMudG90YWwpLFxuICAgICAgICAgICAgICAgIHBlcmNfOTU6IGZvcm1hdHRlcih0c19zdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSksXG4gICAgICAgICAgICAgICAgYXZnOiBmb3JtYXR0ZXIodHNfc3RhdHMuYXZlcmFnZSksXG4gICAgICAgICAgICAgICAgbWF4OiBmb3JtYXR0ZXIodHNfc3RhdHMubWF4X3ZhbCksXG4gICAgICAgICAgICAgICAgbWluOiBmb3JtYXR0ZXIodHNfc3RhdHMubWluX3ZhbCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdHNfcm93cy52YWx1ZS5wdXNoKHJvdyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gICAgcmV0dXJuIGNvbC5sYWJlbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gcm93W2NvbC5pZF07XG4gICAgcmV0dXJuIGxhYmVsO1xufVxuXG5mdW5jdGlvbiBqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3MoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHBhcmFtcyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCBoaXN0b3JpY2FsX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChoaXN0b3JpY2FsX3VybCk7XG59XG5cbmNvbnN0IG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiA9IHJlZihudWxsKTtcbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfZG93bmxvYWRfZmlsZSgpIHtcbiAgICBpZiAoIXRzX2NoYXJ0c19vcHRpb25zPy5sZW5ndGgpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHRzX2dyb3VwID0gbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWRbMF07XG4gICAgbGV0IGZpbGVuYW1lID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllTmFtZShudWxsLCBudWxsLCB0c19ncm91cCk7XG4gICAgbW9kYWxfZG93bmxvYWRfZmlsZS52YWx1ZS5zaG93KGZpbGVuYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRfY2hhcnRfcG5nKGZpbGVuYW1lKSB7XG4gICAgbGV0IGNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UgPSBjaGFydHMudmFsdWUubWFwKGFzeW5jIChjaGFydCkgPT4ge1xuICAgICAgICBsZXQgY2FudmFzID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGNoYXJ0LmdldF9pbWFnZShjYW52YXMpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY2FudmFzLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNhbnZhcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcbiAgICBsZXQgY2hhcnRfaW1hZ2VfYXJyYXkgPSBhd2FpdCBQcm9taXNlLmFsbChjaGFydF9pbWFnZV9hcnJheV9wcm9taXNlKTtcbiAgICBjaGFydF9pbWFnZV9hcnJheS5mb3JFYWNoKChpbWFnZSkgPT4ge1xuICAgICAgICBoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pO1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBsZXQgY2FudmFzX2NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjYW52YXMud2lkdGggPSBjaGFydF9pbWFnZV9hcnJheVswXS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGhlaWdodCA9IDA7XG4gICAgY2hhcnRfaW1hZ2VfYXJyYXkuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICAgICAgY2FudmFzX2NvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCBoZWlnaHQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICAgICAgICBoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pO1xuICAgIG50b3BuZ191dGlsaXR5LmRvd25sb2FkX1VSSShjYW52YXMudG9EYXRhVVJMKCksIGZpbGVuYW1lKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmlubGluZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4uc2VsZWN0Mi1zaXplIHtcbiAgICBtaW4td2lkdGg6IDE4cmVtO1xufVxuPC9zdHlsZT5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbWItMlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBjYXJkLWhlYWRlci10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRhYiBpbiB0YWJfbGlzdFwiPlxuXHQgICAgICA8dGVtcGxhdGUgdi1pZj1cInRhYi5hY3RpdmVcIj5cblx0ICAgICAgICA8bGkgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogdGFiLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuICAgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG4gICAgICAgICAgPC9saT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cblx0ICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cblx0ICAgICAgICA8YSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuXHQgICAgICAgIDwvYT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGFiX2xpc3Q6IEFycmF5LFxuICB9LFxuICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBjcmVhdGVkKCkge1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRfdGFiOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHRtcCA9IG51bGw7XG4gICAgdGhpcy4kcHJvcHMudGFiX2xpc3QuZm9yRWFjaChmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKHRhYi5hY3RpdmUpIHtcbiAgICAgICAgdG1wID0gdGFiXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9sZF90YWIgPSB0bXAgfHwgdGhpcy4kcHJvcHMudGFiX2xpc3RbMF07XG5cbiAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoYW5nZV90YWI6IGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYoKHRhYi5pZCAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5pZCAhPSB0YWIuaWQpIHx8XG4gICAgICAgICAodGFiLm5hbWUgIT0gbnVsbCAmJiB0aGlzLm9sZF90YWIubmFtZSAhPSB0YWIubmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbGRfdGFiID0gdGFiXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCB0YWIpXG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG48L3NjcmlwdD5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbWItMlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBjYXJkLWhlYWRlci10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRhYiBpbiB0YWJfbGlzdFwiPlxuXHQgICAgICA8dGVtcGxhdGUgdi1pZj1cInRhYi5hY3RpdmVcIj5cblx0ICAgICAgICA8bGkgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogdGFiLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuICAgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG4gICAgICAgICAgPC9saT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cblx0ICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cblx0ICAgICAgICA8YSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuXHQgICAgICAgIDwvYT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGFiX2xpc3Q6IEFycmF5LFxuICB9LFxuICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBjcmVhdGVkKCkge1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRfdGFiOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHRtcCA9IG51bGw7XG4gICAgdGhpcy4kcHJvcHMudGFiX2xpc3QuZm9yRWFjaChmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKHRhYi5hY3RpdmUpIHtcbiAgICAgICAgdG1wID0gdGFiXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9sZF90YWIgPSB0bXAgfHwgdGhpcy4kcHJvcHMudGFiX2xpc3RbMF07XG5cbiAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoYW5nZV90YWI6IGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYoKHRhYi5pZCAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5pZCAhPSB0YWIuaWQpIHx8XG4gICAgICAgICAodGFiLm5hbWUgIT0gbnVsbCAmJiB0aGlzLm9sZF90YWIubmFtZSAhPSB0YWIubmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbGRfdGFiID0gdGFiXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCB0YWIpXG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGVfZGVsZXRlfX08L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgICB7e2JvZHlfZGVsZXRlfX1cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKCdkZWxldGUnKX19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICBcbiAgICA8c2NyaXB0IHNldHVwPlxuICAgIGltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG4gICAgaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuICAgIFxuICAgIGNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuICAgIGNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZScsJ2RlbGV0ZV9hbGwnXSk7XG4gICAgXG4gICAgY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG4gICAgbGV0IGJvZHlfZGVsZXRlID0gcmVmKFwiXCIpO1xuICAgIGxldCB0aXRsZV9kZWxldGUgPSByZWYoXCJcIik7XG4gICAgY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgICAgIGJvZHk6IFN0cmluZyxcbiAgICAgICAgdGl0bGU6IFN0cmluZyxcbiAgICB9KTtcbiAgICBjb25zdCBzaG93ID0gKGJvZHksIHRpdGxlKSA9PiB7XG5cbiAgICAgIGlmIChib2R5ICE9IG51bGwgJiYgdGl0bGUgIT0gbnVsbCkge1xuXG4gICAgICAgIGJvZHlfZGVsZXRlLnZhbHVlID0gYm9keTtcbiAgICAgICAgdGl0bGVfZGVsZXRlLnZhbHVlID0gdGl0bGU7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGJvZHlfZGVsZXRlLnZhbHVlID0gcHJvcHMuYm9keTtcbiAgICAgICAgdGl0bGVfZGVsZXRlLnZhbHVlID0gcHJvcHMudGl0bGU7XG4gICAgICB9XG4gICAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBkZWxldGVfID0gKCkgPT4ge1xuICAgICAgICBlbWl0KCdkZWxldGUnKTtcblxuICAgICAgICBjbG9zZSgpO1xuICAgIH07XG4gICAgXG4gICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICBkZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcbiAgICBcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG4gICAgXG4gICAgPC9zY3JpcHQ+XG4gICAgXG4gICAgPHN0eWxlIHNjb3BlZD5cbiAgICA8L3N0eWxlPlxuICAgICIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdhc3NldF9mYW1pbHknLCB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmFzc2V0X2ZhbWlseSk7XG4gICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdjZW50cmFsaXR5JztcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIGlmKHRoaXMuYXNzZXRfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfYXNzZXRfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiXCIsIGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0cycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgYXNzZXRfdGFibGVfdGFiOiBudWxsLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cblxuICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogaGlzdG9yaWNhbF9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpIH0sXG4gICAgXSk7XG4gICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93LmVwb2NoX2VuZDtcbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZXBvY2hfYmVnaW47XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcl9pcH07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50X2lwfTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpXG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YCk7XG5cbn1cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbmsoXywgdHlwZSxyb3dEYXRhKTtcbiAgICAgIH1cbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5jbGllbnRcIiksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zZXJ2ZXJcIiksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9mYW1pbHlcIiksIG5hbWU6ICdmYW1pbHknLCBkYXRhOiAnZmFtaWx5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyA0IC8qIExhc3QgU2VlbiAqLywgJ2Rlc2MnIF1dIH1cbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cblxuICAvKiBDZW50cmFsaXR5IHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2VudHJhbGl0eScgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKVxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaG9zdFwiKSwgbmFtZTogJ2hvc3QnLCBkYXRhOiAnaG9zdCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS5sYWJlbCB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF90b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG5cbiAgXG4gIFxuICBsZXQgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDEgLyogVG90YWwgRWRnZXMgKi8sICdkZXNjJyBdXSB9XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG5cbiAgY29uc29sZS5sb2coY29uZmlnRGV2aWNlcylcbiAgY29uc29sZS5sb2coY2VudHJhbGl0eUNvbmZpZ0RldmljZXMpXG4gIFxuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwiYXNzZXRfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXNzZXRfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9hc3NldF9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfYXNzZXRfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9hc3NldHNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYXNzZXRfZmFtaWx5JywgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5hc3NldF9mYW1pbHkpO1xuICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnY2VudHJhbGl0eSc7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLmFzc2V0X3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX2Fzc2V0X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYlwiLCBjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLmFzc2V0X3RhYmxlX3RhYiA9IHRhYjtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfYXNzZXRzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZCcpLFxuICAgICAgYm9keV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWRfbWVzc2FnZScpLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGFzc2V0X3RhYmxlX3RhYjogbnVsbCxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLnN0YW5kYXJkX3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdzdGFuZGFyZCcpLFxuICAgICAgICAgIGlkOiAnc3RhbmRhcmQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLmNlbnRyYWxpdHlfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ2NlbnRyYWxpdHknKSxcbiAgICAgICAgICBpZDogJ2NlbnRyYWxpdHknXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCwgaXRlbS5pZCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkgeyAgICAgIFxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9hc3NldF8ke3RoaXMuYXNzZXRfdGFibGVfdGFifWBdO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIiZcIilbMF07XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIiZcIilbMF07XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5lcG9jaF9lbmQ7XG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmVwb2NoX2JlZ2luO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJfaXB9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudF9pcH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKVxuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWApO1xuXG59XG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IERhdGF0YWJsZVZ1ZS5hc3NldF90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9XG4gICAgfSwgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfZmFtaWx5XCIpLCBuYW1lOiAnZmFtaWx5JywgZGF0YTogJ2ZhbWlseScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubGFzdF9zZWVuXCIpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgNCAvKiBMYXN0IFNlZW4gKi8sICdkZXNjJyBdXSB9XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEubGFiZWwgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfdG90YWxfZWRnZXNcIiksIG5hbWU6ICd0b3RhbF9lZGdlcycsIGRhdGE6ICd0b3RhbF9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfaW5fZWRnZXNcIiksIG5hbWU6ICdpbl9lZGdlcycsIGRhdGE6ICdpbl9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfb3V0X2VkZ2VzXCIpLCBuYW1lOiAnb3V0X2VkZ2VzJywgZGF0YTogJ291dF9lZGdlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuXG4gIFxuICBcbiAgbGV0IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyAxIC8qIFRvdGFsIEVkZ2VzICovLCAnZGVzYycgXV0gfVxuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuXG4gIGNvbnNvbGUubG9nKGNvbmZpZ0RldmljZXMpXG4gIGNvbnNvbGUubG9nKGNlbnRyYWxpdHlDb25maWdEZXZpY2VzKVxuICBcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkgPSBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwicGVyaW9kaWNpdHktdGFibGVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX3BlcmlvZGljaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCJcbiAgICAgICAgICAgIDpiYXNlX3VybD1cImJhc2VfdXJsXCJcbiAgICAgICAgICAgIDpiYXNlX3BhcmFtcz1cInVybF9wYXJhbXNcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19hZG1pblwiIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkgeyAgXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBiYXNlX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cbiAgICBsZXQgbGl2ZV9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwibGl2ZV9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgbGl2ZV9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBsaXZlX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignbGl2ZV9mbG93cycpIH0sXG5cbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9wZXJpb2RpY2l0eWBdO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3QgY2xpZW50ID0gY2xpZW50X2lwLnN1YnN0cmluZygwLCBjbGllbnRfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IHNlcnZlciA9IHNlcnZlcl9pcC5zdWJzdHJpbmcoMCwgc2VydmVyX2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBwb3J0ID0gcm93LnBvcnQ7XG5cbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZmlyc3Rfc2VlbjtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93Lmxhc3Rfc2Vlbi5lcG9jaF9lbmQ7XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcn07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50fTtlcWAsXG4gICAgc3J2X3BvcnQ6IGAke3BvcnR9O2VxYCxcbiAgfVxuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcblxufVxuXG5mdW5jdGlvbiBsaXZlX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHNlcnZlcjogYCR7c2VydmVyfWAsXG4gICAgY2xpZW50OiBgJHtjbGllbnR9YCxcbiAgICBwb3J0OiBgJHtwb3J0fWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHVybF9wYXJhbXMpXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IG51bGxcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5sYXN0X3NlZW4nKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5jbGllbnQnKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uuc2VydmVyJyksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnBvcnQnKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucHJvdG9jb2wnKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZmlyc3Rfc2VlbicpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignZHVyYXRpb24nKSwgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLCBvcmRlcmFibGU6IHRydWUsICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uub2JzZXJ2YXRpb25zJyksIG5hbWU6ICdvYnNlcnZhdGlvbnMnLCBkYXRhOiAnb2JzZXJ2YXRpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZyZXF1ZW5jeScpLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiB0cnVlLCByZXNwb25zaXZlUHJpb3JpdHk6IDQsIHJlbmRlcjogKCBkYXRhLCB0eXBlLCByb3cgKSA9PiB7XG4gICAgICAgIHJldHVybiAodHlwZSA9PSBcInNvcnRcIiB8fCB0eXBlID09ICd0eXBlJykgPyBkYXRhIDogZGF0YSArIFwiIHNlY1wiOyBcbiAgICAgIH1cbiAgICB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gOCAvKiBPYnNlcnZhdGlvbiBjb2x1bW4gKi9cblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInBlcmlvZGljaXR5LXRhYmxlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiXG4gICAgICAgICAgICA6YmFzZV91cmw9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6YmFzZV9wYXJhbXM9XCJ1cmxfcGFyYW1zXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfYWRtaW5cIiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHsgIFxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgIFxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYmFzZV91cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG4gICAgbGV0IGxpdmVfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImxpdmVfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGxpdmVfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogbGl2ZV9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2xpdmVfZmxvd3MnKSB9LFxuXG4gICAgXSk7XG4gICAgXG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfcGVyaW9kaWNpdHlgXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmZpcnN0X3NlZW47XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5sYXN0X3NlZW4uZXBvY2hfZW5kO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJ9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudH07ZXFgLFxuICAgIHNydl9wb3J0OiBgJHtwb3J0fTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG5cbn1cblxuZnVuY3Rpb24gbGl2ZV9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzZXJ2ZXI6IGAke3NlcnZlcn1gLFxuICAgIGNsaWVudDogYCR7Y2xpZW50fWAsXG4gICAgcG9ydDogYCR7cG9ydH1gLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh1cmxfcGFyYW1zKVxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSBudWxsXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgbmFtZTogJ2FjdGlvbnMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UubGFzdF9zZWVuJyksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuY2xpZW50JyksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnNlcnZlcicpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5wb3J0JyksIG5hbWU6ICdwb3J0JywgZGF0YTogJ3BvcnQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnByb3RvY29sJyksIG5hbWU6ICdsN3Byb3RvJywgZGF0YTogJ3Byb3RvY29sJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZpcnN0X3NlZW4nKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ2R1cmF0aW9uJyksIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgIHJlc3BvbnNpdmVQcmlvcml0eTogMywgb3JkZXJhYmxlOiB0cnVlLCAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLm9ic2VydmF0aW9ucycpLCBuYW1lOiAnb2JzZXJ2YXRpb25zJywgZGF0YTogJ29ic2VydmF0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5mcmVxdWVuY3knKSwgbmFtZTogJ2ZyZXF1ZW5jeScsIGRhdGE6ICdmcmVxdWVuY3knLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogdHJ1ZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiA0LCByZW5kZXI6ICggZGF0YSwgdHlwZSwgcm93ICkgPT4ge1xuICAgICAgICByZXR1cm4gKHR5cGUgPT0gXCJzb3J0XCIgfHwgdHlwZSA9PSAndHlwZScpID8gZGF0YSA6IGRhdGEgKyBcIiBzZWNcIjsgXG4gICAgICB9XG4gICAgfSxcbiAgXTtcblxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDggLyogT2JzZXJ2YXRpb24gY29sdW1uICovXG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHsgXG4gIGF1dG9SZXNpemU6IHRydWUsIC8qIEJ5IGRlZmF1bHQgYWxyZWFkeSB0cnVlICovXG4gIG5vZGVzOiB7IFxuICAgIHNoYXBlOiBcImRvdFwiLCBcbiAgICBzY2FsaW5nOiB7XG4gICAgICBtaW46IDEwLFxuICAgICAgbWF4OiAzMCxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIG1pbjogOCxcbiAgICAgICAgbWF4OiAzMCxcbiAgICAgICAgZHJhd1RocmVzaG9sZDogMTIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZm9udDoge1xuICAgICAgY29sb3I6IFwiIzIxMjUyOVwiXG4gICAgfSxcbiAgICBzaGFkb3c6IGZhbHNlLFxuICB9LFxuICBlZGdlczoge1xuICAgIHdpZHRoOiAwLjIsXG4gICAgY29sb3I6IHsgaW5oZXJpdDogXCJmcm9tXCIgfSxcbiAgICBzbW9vdGg6IHtcbiAgICAgICAgdHlwZTogXCJjb250aW51b3VzXCIsXG4gICAgICAgIHJvdW5kbmVzczogMFxuICAgIH0sXG4gICAgYXJyb3dzOiB7XG4gICAgICB0bzoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBzY2FsZUZhY3RvcjogMC4zLFxuICAgICAgfVxuICAgIH0sXG4gICAgYXJyb3dTdHJpa2V0aHJvdWdoOiBmYWxzZSxcbiAgICBzY2FsaW5nOiB7XG4gICAgICBtaW46IDEsXG4gICAgICBtYXg6IDUsXG4gICAgfVxuICB9LFxuICBsYXlvdXQ6IHtcbiAgICBpbXByb3ZlZExheW91dDogZmFsc2UsXG4gIH0sXG4gIGludGVyYWN0aW9uOiB7XG4gICAgaGlkZUVkZ2VzT25EcmFnOiBmYWxzZSxcbiAgICBoaWRlRWRnZXNPblpvb206IHRydWUsXG4gICAgaG92ZXI6IGZhbHNlLFxuICAgIHRvb2x0aXBEZWxheTogMCxcbiAgfSxcbiAgcGh5c2ljczoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgc29sdmVyOiBcImZvcmNlQXRsYXMyQmFzZWRcIixcbiAgICBzdGFiaWxpemF0aW9uOiB7XG4gICAgICBpdGVyYXRpb25zOiAzMDAsXG4gICAgICBlbmFibGVkOiB0cnVlIC8vIFRoaXMgaXMgaGVyZSBqdXN0IHRvIHNlZSB3aGF0J3MgZ29pbmcgb24gZnJvbSB0aGUgdmVyeSBiZWdpbm5pbmcuXG4gICAgfSxcbiAgICBmb3JjZUF0bGFzMkJhc2VkOiB7XG4gICAgICBjZW50cmFsR3Jhdml0eTogMC4wMSxcbiAgICAgIHNwcmluZ0xlbmd0aDogMTAwLFxuICAgIH1cbiAgfSxcbiAgZ3JvdXBzOiB7XG4gICAgICB1bmtub3duOiB7XG4gICAgICAgICAgc2hhcGU6IFwiZG90XCIsXG4gICAgICB9LFxuICAgICAgcHJpbnRlcjoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMDJmJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHZpZGVvOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYwM2QnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgd29ya3N0YXRpb246IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjEwOScsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBsYXB0b3A6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjEwOScsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB0YWJsZXQ6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjEwYScsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBwaG9uZToge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMTBiJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHR2OiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYyNmMnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgbmV0d29ya2luZzoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMGIyJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHdpZmk6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjFlYicsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBuYXM6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjFjMCcsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBtdWx0aW1lZGlhOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYwMDEnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgaW90OiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWUwMTInLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG50b3BuZ19tYXBfbWFuYWdlciA9IHtcbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgc3RhdHVzIG9mIGEgc2VydmljZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VfaWQgaWQgb2YgdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdfc3RhdGUgaWQgb2YgdGhlIG5ldyBzdGF0dXMgb2YgdGhlIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBzdWNjZXNzLlxuICAgKi9cbiAgdG9nZ2xlX3N0YXRlOiBmdW5jdGlvbihzZXJ2aWNlX2lkLCBuZXdfc3RhdGUsIGNhbGxiYWNrLCBjc3JmKSB7XG4gICAgY29uc3QgcmVxdWVzdCA9ICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3N3aXRjaF9zZXJ2aWNlX3N0YXRlLmx1YWAsIHsgXG4gICAgICBzZXJ2aWNlX2lkOiBzZXJ2aWNlX2lkLCBzZXJ2aWNlX3N0YXR1czogbmV3X3N0YXRlLCBjc3JmOiBjc3JmXG4gICAgfSk7XG4gICAgcmVxdWVzdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICBpZihkYXRhLnN1Y2Nlc3MgJiYgY2FsbGJhY2spIFxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9LFxuICBnZXRfZGVmYXVsdF9vcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG4gIH0sXG59XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX3NlcnZpY2Vfc3RhbmRhcmRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX2NlbnRyYWxpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuPCEtLVxuICAgICAgICB7JSBpZiBpc19hZG1pbiB0aGVuICV9XG4gICAgICAgICAgPGZvcm0gY2xhc3M9XCJkLWlubGluZVwiIGlkPSdzd2l0Y2gtc3RhdGUtZm9ybSc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGQtaW5saW5lXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD57KiBpMThuKFwibWFwX3BhZ2Uuc2V0X3N0YXRlXCIsIHtsYWJlbCA9IFwiPHNwYW4gY2xhc3M9J2NvdW50Jz48L3NwYW4+XCJ9KSAqfTwvbGFiZWw+XG4gICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cIm5ld19zdGF0ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgZC1pbmxpbmVcIiBzdHlsZT1cIndpZHRoOiAxNnJlbVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgIHslIGZvciBfLCBzdGF0dXMgaW4gcGFpcnNCeUZpZWxkKG1hcC5maWx0ZXJzLnNlcnZpY2Vfc3RhdHVzX2ZpbHRlcnMsIGxhYmVsLCBhc2NfaW5zZW5zaXRpdmUpIGRvICV9XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7IHN0YXR1cy5pZCB9fVwiPnsqIHN0YXR1cy5sYWJlbCAqfTwvb3B0aW9uPlxuICAgICAgICAgICAgICB7JSBlbmQgJX1cbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBkLWlubGluZVwiIGNsYXNzPVwiYnRuLXN3aXRjaC1zdGF0ZVwiIHt7IHRlcm5hcnkobWFwLnNlcnZpY2VzX251bSA9PSAwLCBcImRpc2FibGVkPSdkaXNhYmxlZCdcIiwgXCJcIikgfX0+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcmFuZG9tXCI+PC9pPiB7eyBpMThuKFwic2V0XCIpIH19XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICB7JSBlbmQgJX1cbiAgICAtLT4gXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwic2VydmljZV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmNvbnN0IGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdzdGFuZGFyZCc7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLnNlcnZpY2VfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBzZXJ2aWNlX3RhYmxlX3RhYjogbnVsbCxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLnN0YW5kYXJkX3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdzdGFuZGFyZCcpLFxuICAgICAgICAgIGlkOiAnc3RhbmRhcmQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLmNlbnRyYWxpdHlfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ2NlbnRyYWxpdHknKSxcbiAgICAgICAgICBpZDogJ2NlbnRyYWxpdHknXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsIGl0ZW0uaWQpO1xuICAgIH0sXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25zOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG4gICAgICBjb25zdCByZWxvYWQgPSB0aGlzLnJlbG9hZF90YWJsZVxuICAgICAgY29uc3QgY3NyZiA9IHRoaXMuJHByb3BzLnBhZ2VfY3NyZlxuICAgICAgY29uc3QgdG9nZ2xlX2FsbG93ZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzBdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0b2dnbGVfZGVuaWVkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gZGF0YTtcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSBzZXJ2aWNlLmFjY2VwdGFuY2VcbiAgICAgIGNvbnN0IGFsbG93ZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2FsbG93ZWRfc3RhdGUgfTtcbiAgICAgIGNvbnN0IGRlbmllZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzFdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfZGVuaWVkX3N0YXRlIH07XG4gICAgICBjb25zdCB1bmRlY2lkZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbSBkaXNhYmxlZCcsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsyXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSB9O1xuICAgICAgXG4gICAgICBzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgICAgY2FzZSAwOiAvKiBBbGxvd2VkICovICAgeyBhbGxvd2VkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAxOiAvKiBEZW5pZWQgKi8gICAgeyBkZW5pZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUnOyBicmVhazsgfVxuICAgICAgICBjYXNlIDI6IC8qIFVuZGVjaWRlZCAqLyB7IHVuZGVjaWRlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSBkaXNhYmxlZCc7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbdW5kZWNpZGVkQnV0dG9uLCBhbGxvd2VkQnV0dG9uLCBkZW5pZWRCdXR0b25dKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfc2VydmljZV8ke3RoaXMuc2VydmljZV90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fc3RhbmRhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHN3aXRjaF90b19jZW50cmFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnY2VudHJhbGl0eSdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmZpcnN0X3NlZW47XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5sYXN0X3NlZW4uZXBvY2hfZW5kO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJ9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudH07ZXFgLFxuICAgIHNydl9wb3J0OiBgJHtwb3J0fTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG5cbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IERhdGF0YWJsZVZ1ZS5zZXJ2aWNlX3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgZGF0YTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZVxuICAgIH0sIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucG9ydFwiKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnByb3RvY29sXCIpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuZmlyc3Rfc2VlblwiKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5udW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIHJlc3BvbnNpdmVQcmlvcml0eTogNSB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNyAvKiBOdW0gVXNlcyAqL1xuXG4gIGlmKERhdGF0YWJsZVZ1ZS5pc19hZG1pbikge1xuICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zdGF0dXNcIiksIG5hbWU6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBkYXRhOiAnc2VydmljZV9hY2NlcHRhbmNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbnMoZGF0YSwgdHlwZSwgc2VydmljZSk7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICB9XG4gIFxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnRvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnJhbmtcIiksIG5hbWU6ICdyYW5rJywgZGF0YTogJ3JhbmsnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLm91dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMiAvKiBSYW5rICovXG4gIHRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfc2VydmljZV9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbjwhLS1cbiAgICAgICAgeyUgaWYgaXNfYWRtaW4gdGhlbiAlfVxuICAgICAgICAgIDxmb3JtIGNsYXNzPVwiZC1pbmxpbmVcIiBpZD0nc3dpdGNoLXN0YXRlLWZvcm0nPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBkLWlubGluZVwiPlxuICAgICAgICAgICAgICA8bGFiZWw+eyogaTE4bihcIm1hcF9wYWdlLnNldF9zdGF0ZVwiLCB7bGFiZWwgPSBcIjxzcGFuIGNsYXNzPSdjb3VudCc+PC9zcGFuPlwifSkgKn08L2xhYmVsPlxuICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJuZXdfc3RhdGVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGQtaW5saW5lXCIgc3R5bGU9XCJ3aWR0aDogMTZyZW1cIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICB7JSBmb3IgXywgc3RhdHVzIGluIHBhaXJzQnlGaWVsZChtYXAuZmlsdGVycy5zZXJ2aWNlX3N0YXR1c19maWx0ZXJzLCBsYWJlbCwgYXNjX2luc2Vuc2l0aXZlKSBkbyAlfVxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ7eyBzdGF0dXMuaWQgfX1cIj57KiBzdGF0dXMubGFiZWwgKn08L29wdGlvbj5cbiAgICAgICAgICAgICAgeyUgZW5kICV9XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgZC1pbmxpbmVcIiBjbGFzcz1cImJ0bi1zd2l0Y2gtc3RhdGVcIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXJhbmRvbVwiPjwvaT4ge3sgaTE4bihcInNldFwiKSB9fVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgeyUgZW5kICV9XG4gICAgLS0+IFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgeyBudG9wbmdfbWFwX21hbmFnZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscyc7XG5jb25zdCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIHNlcnZpY2VfYWNjZXB0YW5jZTogQXJyYXksXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnc3RhbmRhcmQnO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgc2VydmljZV90YWJsZV90YWI6IG51bGwsXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uczogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuICAgICAgY29uc3QgcmVsb2FkID0gdGhpcy5yZWxvYWRfdGFibGVcbiAgICAgIGNvbnN0IGNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgIGNvbnN0IHRvZ2dsZV9hbGxvd2VkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX2RlbmllZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIGRhdGE7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gc2VydmljZS5hY2NlcHRhbmNlXG4gICAgICBjb25zdCBhbGxvd2VkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9hbGxvd2VkX3N0YXRlIH07XG4gICAgICBjb25zdCBkZW5pZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2RlbmllZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgdW5kZWNpZGVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0gZGlzYWJsZWQnLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgfTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICAgIGNhc2UgMDogLyogQWxsb3dlZCAqLyAgIHsgYWxsb3dlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMTogLyogRGVuaWVkICovICAgIHsgZGVuaWVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAyOiAvKiBVbmRlY2lkZWQgKi8geyB1bmRlY2lkZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUgZGlzYWJsZWQnOyBicmVhazsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3VuZGVjaWRlZEJ1dHRvbiwgYWxsb3dlZEJ1dHRvbiwgZGVuaWVkQnV0dG9uXSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rOiBmdW5jdGlvbihfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgbGV0IGhpc3RvcmljYWxfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImhpc3RvcmljYWxfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGhpc3RvcmljYWxfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3NlcnZpY2VfJHt0aGlzLnNlcnZpY2VfdGFibGVfdGFifWBdO1xuICAgIH0sXG4gICAgc3dpdGNoX3RvX3N0YW5kYXJkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fY2VudHJhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbmV3X3VybCA9IHRoaXMudXJsX3BhcmFtc1xuICAgICAgbmV3X3VybFsndmlldyddID0gJ2NlbnRyYWxpdHknXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gaGlzdG9yaWNhbF9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvdy5maXJzdF9zZWVuO1xuICBjb25zdCBlcG9jaF9lbmQgPSByb3cubGFzdF9zZWVuLmVwb2NoX2VuZDtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogZXBvY2hfZW5kLFxuICAgIHNydl9pcDogYCR7c2VydmVyfTtlcWAsXG4gICAgY2xpX2lwOiBgJHtjbGllbnR9O2VxYCxcbiAgICBzcnZfcG9ydDogYCR7cG9ydH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xuXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuc2VydmljZV90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsIGRhdGE6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfSwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGVcbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnBvcnRcIiksIG5hbWU6ICdwb3J0JywgZGF0YTogJ3BvcnQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5wcm90b2NvbFwiKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmZpcnN0X3NlZW5cIiksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluZm9cIiksIG5hbWU6ICdpbmZvJywgZGF0YTogJ2luZm8nLCByZXNwb25zaXZlUHJpb3JpdHk6IDUgfSxcbiAgXTtcblxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDcgLyogTnVtIFVzZXMgKi9cblxuICBpZihEYXRhdGFibGVWdWUuaXNfYWRtaW4pIHtcbiAgICBjb2x1bW5zLnB1c2goeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc3RhdHVzXCIpLCBuYW1lOiAnc2VydmljZV9hY2NlcHRhbmNlJywgZGF0YTogJ3NlcnZpY2VfYWNjZXB0YW5jZScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25zKGRhdGEsIHR5cGUsIHNlcnZpY2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgfVxuICBcbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS50b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5yYW5rXCIpLCBuYW1lOiAncmFuaycsIGRhdGE6ICdyYW5rJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDIgLyogUmFuayAqL1xuICB0YWJsZV9jb25maWcub3JkZXIgPSBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IHYtaWY9XCJlbXB0eV9tYXBcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAge3sgZW1wdHlfbWVzc2FnZSB9fVxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHJlc2l6YWJsZS15LWNvbnRhaW5lclwiIHN0eWxlPVwid2lkdGg6IDEwMCU7IGhlaWdodDogNjB2aDtcIiA6aWQ9bWFwX2lkPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBlbXB0eV9tZXNzYWdlOiBTdHJpbmcsXG4gIGV2ZW50X2xpc3RlbmVyczogT2JqZWN0LFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgdXJsOiBTdHJpbmcsXG4gIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgbWFwX2lkOiBTdHJpbmcsXG59KTtcblxuY29uc3QgZGF0YVJlcXVlc3QgPSB7IFxuICBpZmlkOiBwcm9wcy51cmxfcGFyYW1zLmlmaWQsIFxuICBhY3Rpb246ICdsb2FkX2dyYXBoJywgXG4gIG1hcDogcHJvcHMudXJsX3BhcmFtcy5tYXBfaWRcbn07XG5cbmxldCBub2Rlc19kYXRhc2V0ID0ge307XG5sZXQgZWRnZXNfZGF0YXNldCA9IHt9O1xubGV0IGhpZ2hsaWdodEFjdGl2ZSA9IGZhbHNlO1xubGV0IG5ldHdvcmsgPSBudWxsO1xuY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBlbXB0eV9tYXAgPSByZWYodHJ1ZSk7XG5jb25zdCBpc19kZXN0cm95ZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgdXJsX3BhcmFtcyA9IHJlZih7fSk7XG5jb25zdCBkYXRhc2V0cyA9IHJlZihudWxsKTtcbmNvbnN0IG9wdGlvbnMgPSByZWYobnVsbCk7XG5jb25zdCBhbGxfbm9kZXMgPSByZWYobnVsbCk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByb3BzLm1hcF9pZCk7XG4gIGxvYWRfc2NhbGUoKTtcbiAgYXdhaXQgcmVxdWVzdF9pbmZvKCk7XG4gIG9wdGlvbnMudmFsdWUgPSBudG9wbmdfbWFwX21hbmFnZXIuZ2V0X2RlZmF1bHRfb3B0aW9ucygpO1xuICBuZXR3b3JrID0gbmV3IHZpcy5OZXR3b3JrKGNvbnRhaW5lciwgZGF0YXNldHMudmFsdWUsIG9wdGlvbnMudmFsdWUpO1xuICBzZXRfZXZlbnRfbGlzdGVuZXIoKTtcbn0pXG5cbm9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gIGlmIChpc19kZXN0cm95ZWQudmFsdWUgPT0gdHJ1ZSkgeyBcbiAgICByZXR1cm47IFxuICB9XG4gIGRlc3Ryb3koKTtcbn0pO1xuXG5jb25zdCBnZW5lcmF0ZV9odG1sX3Rvb2x0aXAgPSAoeCkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAvKiBOZWNlc3NhcnksIG90aGVyd2lzZSBpdCB3aWxsIGdvIGluIGNvbmZsaWN0IHdpdGggb3RoZXIgY3NzICovXG4gIC8vY29udGFpbmVyLnN0eWxlLmNvbG9yID0gXCIjMTExMTExXCI7XG4gIGNvbnRhaW5lci5pbm5lckhUTUwgPSBgPGI+JHt4LmxhYmVsfTwvYj48YnI+PGJyPiR7aTE4bignZGJfZXhwbG9yZXIuaG9zdF9kYXRhJyl9OiAke3guaWR9YDtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHBlcmZvcm0gdGhlIHJlcXVlc3QgKi9cbmNvbnN0IHJlcXVlc3RfaW5mbyA9IGFzeW5jKCkgPT4ge1xuICAvKiBpZiBhbiBob3N0IGhhcyBiZWVuIGRlZmluZWQgaW5zaWRlIHRoZSBVUkwgcXVlcnkgdGhlbiBhZGQgaXQgdG8gdGhlIHJlcXVlc3QgKi9cbiAgdXJsX3BhcmFtcy52YWx1ZSA9IHByb3BzLnVybF9wYXJhbXM7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChwcm9wcy51cmwsIHVybF9wYXJhbXMudmFsdWUpOyBcbiAgYXdhaXQgJC5nZXQodXJsLCBkYXRhUmVxdWVzdCwgYXN5bmMgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBjb25zdCB7IG5vZGVzLCBlZGdlcywgbWF4X2VudHJ5X3JlYWNoZWQgfSA9IHJlc3BvbnNlLnJzcDtcbiAgICBtYXhfZW50cmllc19yZWFjaGVkLnZhbHVlID0gbWF4X2VudHJ5X3JlYWNoZWQ7XG4gICAgLyogQWRkaW5nIHRvb2x0aXAgdG8gZWFjaCBub2RlICovXG4gICAgbm9kZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChub2Rlcy5tYXAoKHgpID0+IHtcbiAgICAgIHgudGl0bGUgPSBnZW5lcmF0ZV9odG1sX3Rvb2x0aXAoeCk7XG4gICAgICByZXR1cm4geDtcbiAgICB9KSk7XG4gICAgZWRnZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChlZGdlcyk7XG4gICAgZGF0YXNldHMudmFsdWUgPSB7XG4gICAgICBub2Rlczogbm9kZXNfZGF0YXNldCwgXG4gICAgICBlZGdlczogZWRnZXNfZGF0YXNldFxuICAgIH07XG4gICAgYWxsX25vZGVzLnZhbHVlID0gbm9kZXNfZGF0YXNldC5nZXQoeyByZXR1cm5UeXBlOiBcIk9iamVjdFwiIH0pO1xuICAgIGVtcHR5X25ldHdvcmsoKTtcblx0fSk7XG59O1xuXG4vKiBBZGQgdGhlIGhvc3QgdG8gdGhlIHVybCBhbmQganVtcCB0byB0aGUgaG9zdCAqL1xuY29uc3QganVtcF90b19ob3N0ID0gYXN5bmMgKHBhcmFtcykgPT4ge1xuICBjb25zdCBob3N0X2luZm8gPSBwYXJhbXMuaWQuc3BsaXQoJ0AnKVxuICB1cmxfcGFyYW1zLnZhbHVlWydob3N0J10gPSBob3N0X2luZm9bMF07IC8qIEhvc3QgSVAgKi9cbiAgdXJsX3BhcmFtcy52YWx1ZVsndmxhbl9pZCddID0gaG9zdF9pbmZvWzFdOyAvKiBWTEFOIElEICovXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaG9zdCcsIHVybF9wYXJhbXMudmFsdWVbJ2hvc3QnXSk7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbl9pZCcsIHVybF9wYXJhbXMudmFsdWVbJ3ZsYW5faWQnXSk7XG4gIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgcGFyYW1zKVxuICBhd2FpdCByZWxvYWQoKTtcbn1cblxuLyogSW4gY2FzZSBvZiBlbXB0eSBuZXR3b3JrIGVuYWJsZSB0aGUgXCJFbXB0eSBOZXR3b3JrXCIgbWVzc2FnZSAqL1xuY29uc3QgZW1wdHlfbmV0d29yayA9ICgpID0+IHtcbiAgaWYoZGF0YXNldHMudmFsdWU/Lm5vZGVzLmxlbmd0aCA9PSAwIFxuICAgICYmIGRhdGFzZXRzLnZhbHVlPy5lZGdlcy5sZW5ndGggPT0gMCkge1xuICAgIGVtcHR5X21hcC52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZW1wdHlfbWFwLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuLyogRml4IHRoZSByZXNpemFibGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgKi9cbmNvbnN0IGxvYWRfc2NhbGUgPSAoKSA9PiB7XG4gIGNvbnN0IG9sZFNjYWxlID0gTnRvcFV0aWxzLmxvYWRFbGVtZW50U2NhbGUoJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApKVxuXG4gIGlmKG9sZFNjYWxlID09IG51bGwpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKG9sZFNjYWxlLndpZHRoKTtcbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodChvbGRTY2FsZS5oZWlnaHQpO1xuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkub24oJ21vdXNldXAnLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gIH0pO1xufSAgICBcblxuZnVuY3Rpb24gbmVpZ2hib3VyaG9vZEhpZ2hsaWdodChwYXJhbXMpIHtcbiAgLy8gaWYgc29tZXRoaW5nIGlzIHNlbGVjdGVkOlxuICBpZiAocGFyYW1zLm5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICBoaWdobGlnaHRBY3RpdmUgPSB0cnVlO1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBzZWxlY3RlZE5vZGUgPSBwYXJhbXMubm9kZXNbMF07XG4gICAgdmFyIGRlZ3JlZXMgPSAyO1xuXG4gICAgLy8gbWFyayBhbGwgbm9kZXMgYXMgaGFyZCB0byByZWFkLlxuICAgIGZvciAodmFyIG5vZGVJZCBpbiBhbGxfbm9kZXMudmFsdWUpIHtcbiAgICAgIGlmKCFhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfY29sb3IpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2NvbG9yID0gXG4gICAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uY29sb3I7XG4gICAgICB9XG4gICAgICBpZighYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2ljb25fY29sb3IpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2ljb25fY29sb3IgPSBcbiAgICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5pY29uO1xuICAgICAgfVxuICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uY29sb3IgPSBcIiNjOGM4YzhcIjtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmljb24gPSB7XG4gICAgICAgIGNvbG9yOiBcIiNjOGM4YzhcIlxuICAgICAgfTtcbiAgICAgIGlmIChhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5oaWRkZW5MYWJlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsID0gYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ubGFiZWw7XG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmxhYmVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY29ubmVjdGVkTm9kZXMgPSBuZXR3b3JrLmdldENvbm5lY3RlZE5vZGVzKHNlbGVjdGVkTm9kZSk7XG4gICAgdmFyIGFsbENvbm5lY3RlZE5vZGVzID0gW107XG5cbiAgICAvLyBnZXQgdGhlIHNlY29uZCBkZWdyZWUgbm9kZXNcbiAgICBmb3IgKGkgPSAxOyBpIDwgZGVncmVlczsgaSsrKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYWxsQ29ubmVjdGVkTm9kZXMgPSBhbGxDb25uZWN0ZWROb2Rlcy5jb25jYXQoXG4gICAgICAgICAgbmV0d29yay5nZXRDb25uZWN0ZWROb2Rlcyhjb25uZWN0ZWROb2Rlc1tqXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbGwgZmlyc3QgZGVncmVlIG5vZGVzIGdldCB0aGVpciBvd24gY29sb3IgYW5kIHRoZWlyIGxhYmVsIGJhY2tcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtjb25uZWN0ZWROb2Rlc1tpXV0uY29sb3IgPSBcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5vbGRfY29sb3I7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmljb24gPSBcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5vbGRfaWNvbl9jb2xvcjtcbiAgICAgIGlmIChhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmhpZGRlbkxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5sYWJlbCA9XG4gICAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5oaWRkZW5MYWJlbDtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5oaWRkZW5MYWJlbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGUgbWFpbiBub2RlIGdldHMgaXRzIG93biBjb2xvciBhbmQgaXRzIGxhYmVsIGJhY2suXG4gICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0uY29sb3IgPSBcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLm9sZF9jb2xvcjtcbiAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5pY29uID0gXG4gICAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5vbGRfaWNvbl9jb2xvcjtcbiAgICBpZiAoYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0uaGlkZGVuTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0ubGFiZWwgPSBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5oaWRkZW5MYWJlbDtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLmhpZGRlbkxhYmVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIGlmIChoaWdobGlnaHRBY3RpdmUgPT09IHRydWUpIHtcbiAgICAvLyByZXNldCBhbGwgbm9kZXNcbiAgICBmb3IgKHZhciBub2RlSWQgaW4gYWxsX25vZGVzLnZhbHVlKSB7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5jb2xvciA9IFxuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfY29sb3I7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5pY29uID0gXG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLm9sZF9pY29uX2NvbG9yO1xuICAgICAgaWYgKGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ubGFiZWwgPSBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5oaWRkZW5MYWJlbDtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uaGlkZGVuTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGhpZ2hsaWdodEFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgLy8gdHJhbnNmb3JtIHRoZSBvYmplY3QgaW50byBhbiBhcnJheVxuICB2YXIgdXBkYXRlQXJyYXkgPSBbXTtcbiAgZm9yIChub2RlSWQgaW4gYWxsX25vZGVzLnZhbHVlKSB7XG4gICAgaWYgKGFsbF9ub2Rlcy52YWx1ZS5oYXNPd25Qcm9wZXJ0eShub2RlSWQpKSB7XG4gICAgICB1cGRhdGVBcnJheS5wdXNoKGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdKTtcbiAgICB9XG4gIH1cbiAgbm9kZXNfZGF0YXNldC51cGRhdGUodXBkYXRlQXJyYXkpO1xufVxuXG5cbi8qIFNldCB0aGUgZXZlbnQgbGlzdGVyIHVzZWQgZm9yIGNhbGxiYWNrcyAqL1xuY29uc3Qgc2V0X2V2ZW50X2xpc3RlbmVyID0gKCkgPT4ge1xuICBuZXR3b3JrLm9uKFwic3RhYmlsaXphdGlvbkl0ZXJhdGlvbnNEb25lXCIsIGZ1bmN0aW9uKCkge1xuICAgIG5ldHdvcmsuc2V0T3B0aW9ucyggeyBwaHlzaWNzOiBmYWxzZSB9ICk7XG4gIH0pXG4gIG5ldHdvcmsub24oXCJjbGlja1wiLCBmdW5jdGlvbihub2RlKSB7XG4gICAgbmVpZ2hib3VyaG9vZEhpZ2hsaWdodChub2RlKTtcbiAgfSk7XG5cbiAgbmV0d29yay5vbihcImRvdWJsZUNsaWNrXCIsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBqdW1wX3RvX2hvc3Qobm9kZXNfZGF0YXNldC5nZXQocGFyYW1zLm5vZGVzWzBdKSk7XG4gIH0pO1xuXG4gIG5ldHdvcmsub24oXCJhZnRlckRyYXdpbmdcIiwgZnVuY3Rpb24oZSkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQpO1xuICB9KVxuXG4gIC8qIEdpdmVuIGV2ZW50IGxpc3RlbmVycyAqL1xuICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLmV2ZW50X2xpc3RlbmVycyB8fCB7fSkpIHtcbiAgICBuZXR3b3JrLm9uKGl0ZW0sIHByb3BzLmV2ZW50X2xpc3RlbmVyc1tpdGVtXSk7XG4gIH1cbn1cblxuLyogRnVuY3Rpb24gdXNlZCB0byBhdXRvbGF5b3V0L3N0YWJpbGl6ZSB0aGUgbmV0d29yayAqL1xuY29uc3QgYXV0b2xheW91dCA9ICgpID0+IHtcbiAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgbmV0d29yayBpcyB1bmRlZmluZWQhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKG5ldHdvcmsgaW5zdGFuY2VvZiB2aXMuTmV0d29yaykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTm90IGEgdmlzLk5ldHdvcmsgaW5zdGFuY2UhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5ldHdvcmsuc3RhYmlsaXplKCk7XG59XG5cbi8qIERlc3Ryb3kgdGhlIG5ldHdvcmsgaWYgaXQncyBub3QgbnVsbCAqL1xuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgaWYobmV0d29yayAhPSBudWxsKVxuICAgIG5ldHdvcmsuZGVzdHJveSh0cnVlKTtcblxuICBpc19kZXN0cm95ZWQudmFsdWUgPSB0cnVlXG59XG5cbi8qIFRoaXMgcmV0dXJuIHRydWUgaWYgdGhlIG1heGltdW0gbnVtYmVyIG9mIG5vZGVzL2VkZ2VzIGhhcyBiZWVuIHJlYWNoZWQgKi9cbmNvbnN0IGlzX21heF9lbnRyeV9yZWFjaGVkID0gKCkgPT4ge1xuICByZXR1cm4gbWF4X2VudHJpZXNfcmVhY2hlZC52YWx1ZTtcbn1cblxuLyogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHBhcmFtcyAqL1xuY29uc3QgdXBkYXRlX3VybF9wYXJhbXMgPSAobmV3X3VybF9wYXJhbXMpID0+IHtcbiAgdXJsX3BhcmFtcy52YWx1ZSA9IG5ld191cmxfcGFyYW1zO1xufVxuXG4vKiBGdW5jdGlvbiB1c2VkIHRvIHJlbG9hZCB0aGUgbWFwICovXG5jb25zdCByZWxvYWQgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHJlcXVlc3RfaW5mbygpO1xuICBpZihuZXR3b3JrICE9IG51bGwpIHtcbiAgICAvKiBSZWxvYWQgb2YgdGhlIHBoeXNpY3MgaXMgZG9uZSBkdWUgdG8gYSBwb3NzaWJsZSBidWcsXG4gICAgICogd2l0aCBtYW55IG5vZGVzLCB0aGUgcGh5c2ljcyBjb3VsZCBzdHVjayBpbmZpbml0ZWx5IFxuICAgICAqL1xuICAgIG5ldHdvcmsuc2V0T3B0aW9ucyh7IHBoeXNpY3M6IG9wdGlvbnMudmFsdWUucGh5c2ljcyB9KTtcbiAgICBuZXR3b3JrLnNldERhdGEoZGF0YXNldHMudmFsdWUpO1xuICB9XG59XG5cblxuZGVmaW5lRXhwb3NlKHsgcmVsb2FkLCBkZXN0cm95LCBpc19tYXhfZW50cnlfcmVhY2hlZCwgYXV0b2xheW91dCwgdXBkYXRlX3VybF9wYXJhbXMgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAge3tib2R5fX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXV0b2xheW91dF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2NvbmZpcm0nKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2F1dG9sYXlvdXQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGF1dG9sYXlvdXRfID0gKCkgPT4ge1xuICAgIGVtaXQoJ2F1dG9sYXlvdXQnKTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwic2VydmljZV9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvL3RoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHNlcnZpY2VfbWFwYF07XG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJzZXJ2aWNlX21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgc2VydmljZV9tYXBgXTtcbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX3BlcmlvZGljaXR5XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwicGVyaW9kaWNpdHlfbWFwXCIgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCIgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIiA6dXJsPVwiZ2V0X3VybFwiIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3tcbiAgICAgICAgICAgIGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLnVybF9wYXJhbXNcbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgdXBkYXRlZF91cmxfcGFyYW1zOiB7fSxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgcGVyaW9kaWNpdHlfbWFwYF1cbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUudXBkYXRlZF91cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFBlcmlvZGljaXR5IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCIgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cInBlcmlvZGljaXR5X21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy51cmxfcGFyYW1zXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9wZXJpb2RpY2l0eV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdC5mb3JFYWNoKChmaWx0ZXJfZWwsIGkpID0+IHtcbiAgICAgICAgaWYgKGZpbHRlcl9lbC5maWx0ZXJfbmFtZSA9PSBmaWx0ZXIuZmlsdGVyX25hbWUpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtpXSA9IGZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYgKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0pO1xuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIHVwZGF0ZWRfdXJsX3BhcmFtczoge30sXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHBlcmlvZGljaXR5X21hcGBdXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cGRhdGVkX3VybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBBc3NldCBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJhc3NldF9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG5cbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYGFzc2V0X21hcGBdO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYEFzc2V0IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9hc3NldFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCIgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cImFzc2V0X21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cblxuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgYXNzZXRfbWFwYF07XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3tib2R5fX08L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiaXRlbXMtbGlzdFwiIGlkPVwiaXRlbXNsaXN0LXRleHRhcmVhXCIgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2xcIiByb3dzPVwiNlwiIHYtbW9kZWw9XCJpbnB1dF9tYWNfbGlzdFwiPjwvdGV4dGFyZWE+XG4gICAgICAgICAgPHNtYWxsPnt7bGlzdF9ub3Rlc319PC9zbWFsbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2tcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNCBwdC0yXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKX19PC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBtcy0wXCIgdi1tb2RlbD1cImlucHV0X3RyaWdnZXJfYWxlcnRzXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnRfZGVzY3InKX19PC9zbWFsbD5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAge3tfaTE4bignaG9zdF9kZXRhaWxzLm5vdGVzJyl9fTpcbiAgICB7e2Zvb3Rlcn19XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignYWRkJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgaW5wdXRfbWFjX2xpc3QgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF90cmlnZ2VyX2FsZXJ0cyA9IHJlZihcIlwiKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmb290ZXI6IFN0cmluZyxcbiAgICBsaXN0X25vdGVzOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBpbnB1dF9tYWNfbGlzdC52YWx1ZSA9IFwiXCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgYWRkXyA9ICgpID0+IHtcbiAgICBlbWl0KCdhZGQnLCB7IG1hY19saXN0OiBpbnB1dF9tYWNfbGlzdC52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlIH0pO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJlZGl0X2FsbCA9PSBmYWxzZVwiPlxuICAgICAge3t0aXRsZX19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAge3sgdGl0bGVfZWRpdF9hbGwgfX1cbiAgICA8L3RlbXBsYXRlPlxuICAgIFxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImVkaXRfYWxsID09IGZhbHNlXCI+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX2FsaWFzJykgfX08L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwbGFjZWhvbGRlcj1cImN1c3RvbV9uYW1lX3BsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJpbnB1dF9tYWNfYWRkcmVzc19uYW1lXCI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX3N0YXR1cycpIH19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiaW5wdXRfZGV2aWNlX3N0YXR1c1wiIFxuICAgICAgICAgICAgOm9wdGlvbnM9XCJkZXZpY2Vfc3RhdHVzX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00IHB0LTJcIj57eyBfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKSB9fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IG1zLTBcIiB2LW1vZGVsPVwiaW5wdXRfdHJpZ2dlcl9hbGVydHNcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0X2Rlc2NyJykgfX08L3NtYWxsPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57eyBfaTE4bignZWRpdCcpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5cbmNvbnN0IGlucHV0X21hY19hZGRyZXNzX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF9kZXZpY2Vfc3RhdHVzID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IGN1c3RvbV9uYW1lX3BsYWNlaG9sZGVyID0gcmVmKGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5jdXN0b21fbmFtZScpKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZWRpdCddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4geyB9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHRpdGxlX2VkaXRfYWxsOiBTdHJpbmcsXG59KTtcblxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZGV2aWNlX3N0YXR1c19saXN0ID0gcmVmKFtcbiAge2lkOiBcImFsbG93ZWRcIiwgdmFsdWU6XCJhbGxvd2VkXCIsIGxhYmVsOl9pMThuKCdhbGxvd2VkJykgfSxcbiAge2lkOiBcImRlbmllZFwiLCB2YWx1ZTpcImRlbmllZFwiLCBsYWJlbDpfaTE4bignZGVuaWVkJykgfSxcbl0pXG5cbmNvbnN0IGVkaXRfYWxsID0gcmVmKGZhbHNlKTtcblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgICBpZihyb3cgIT0gbnVsbCkge1xuICAgICAgbGV0IHRtcF9kZXZpY2Vfc3RhdHVzID0gbnVsbDtcbiAgICAgIGRldmljZV9zdGF0dXNfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmKGl0ZW0uaWQgPT0gcm93LnN0YXR1cykge1xuICAgICAgICAgIHRtcF9kZXZpY2Vfc3RhdHVzID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlID0gdG1wX2RldmljZV9zdGF0dXM7XG4gICAgICBpbnB1dF9tYWNfYWRkcmVzc19uYW1lLnZhbHVlID0gcm93Lm1hY19hZGRyZXNzLm1hYztcbiAgICAgIGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlID0gcm93LnRyaWdnZXJfYWxlcnQgfHwgZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0X2RldmljZV9zdGF0dXMudmFsdWUgPSBkZXZpY2Vfc3RhdHVzX2xpc3QudmFsdWVbMF07XG4gICAgICBlZGl0X2FsbC52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIFxuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICAgIGlmKGVkaXRfYWxsLnZhbHVlID09IGZhbHNlKVxuICAgICAgZW1pdCgnZWRpdCcsIHsgbWFjX2FsaWFzOiBpbnB1dF9tYWNfYWRkcmVzc19uYW1lLnZhbHVlLCBtYWNfc3RhdHVzOiBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlLnZhbHVlLCB0cmlnZ2VyX2FsZXJ0czogaW5wdXRfdHJpZ2dlcl9hbGVydHMudmFsdWUgfSk7XG4gICAgZWxzZSBcbiAgICAgIGVtaXQoJ2VkaXQnLCB7IG1hY19zdGF0dXM6IGlucHV0X2RldmljZV9zdGF0dXMudmFsdWUudmFsdWUsIHRyaWdnZXJfYWxlcnRzOiBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSwgbWFjX2FsaWFzOiAnYWxsJywgfSk7XG5cbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIFxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgdi1pZj1cImlzX2xlYXJuaW5nX3N0YXR1c1wiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgICAgICAgIHt7IGxlYXJuaW5nX21lc3NhZ2UgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9kZXZpY2VzX3Z1ZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gICAgICAgICAgPG1vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uIHJlZj1cIm1vZGFsX2FkZF9kZXZpY2VcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfYWRkXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9hZGRcIlxuICAgICAgICAgICAgOmZvb3Rlcj1cImZvb3Rlcl9hZGRcIlxuICAgICAgICAgICAgOmxpc3Rfbm90ZXM9XCJsaXN0X25vdGVzX2FkZFwiXG4gICAgICAgICAgICBAYWRkPVwiYWRkX2RldmljZV9yZXN0XCI+XG4gICAgICAgICAgPC9tb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbj5cbiAgICAgICAgICA8bW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uIHJlZj1cIm1vZGFsX2VkaXRfZGV2aWNlXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2VkaXRcIlxuICAgICAgICAgICAgOnRpdGxlX2VkaXRfYWxsPVwidGl0bGVfZWRpdF9hbGxcIlxuICAgICAgICAgICAgQGVkaXQ9XCJlZGl0X3Jvd1wiPlxuICAgICAgICAgIDwvbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uPlxuICAgICAgICAgICAgXG4gICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9kZXZpY2VfZXhjbHVzaW9uc1wiXG5cdFx0XHRcdCAgICAgICAgOmNzcmY9XCJjc3JmXCJcblx0XHRcdFx0ICAgICAgICA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG4gICAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIlxuXHRcdFx0XHQgICAgICAgIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgICA6Zl9tYXBfY29uZmlnPVwibWFwX2NvbmZpZ1wiXG4gICAgICAgICAgICAgICAgOmZfc29ydF9yb3dzPVwiY29sdW1uc19zb3J0aW5nXCJcbiAgICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCI+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmtcIiB0eXBlPVwiYnV0dG9uXCIgcmVmPVwiYWRkX2RldmljZVwiIEBjbGljaz1cImFkZF9kZXZpY2VcIj48aVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz0nZmFzIGZhLXBsdXMnPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfYWxsX2NvbmZpcm1cIiAgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+XG4gICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBfaTE4bihcImVkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc1wiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9hbGxfZGV2aWNlc19jb25maXJtXCIgIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cbiAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLWVkaXQnPjwvaT4ge3sgX2kxOG4oXCJlZGl0X2NoZWNrLmVkaXRfYWxsX2RldmljZXNfc3RhdHVzXCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0ICBUYWJsZVdpdGhDb25maWcgIGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0ICBNb2RhbERlbGV0ZUNvbmZpcm0gIGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0ICBNb2RhbEFkZERldmljZUV4Y2x1c2lvbiAgZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiAgZnJvbSBcIi4vbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5cblxuY29uc3QgdGFibGVfZGV2aWNlX2V4Y2x1c2lvbnMgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGVfYWxsID0gcmVmKCk7XG5jb25zdCBtb2RhbF9hZGRfZGV2aWNlID0gcmVmKCk7XG5jb25zdCBtb2RhbF9lZGl0X2RldmljZSA9IHJlZigpO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignZGV2aWNlX2V4Y2x1c2lvbnMnKTtcblxuY29uc3QgYWRkX3VybCAgICAgICAgICAgICA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2RldmljZS9leGNsdXNpb24ubHVhYDtcbmNvbnN0IGRlbGV0ZV91cmwgICAgICAgICAgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG5jb25zdCBlZGl0X3VybCAgICAgICAgICAgID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9lZGl0L2RldmljZS9leGNsdXNpb24ubHVhYDtcbmNvbnN0IGxlYXJuaW5nX3N0YXR1c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kZXZpY2UvbGVhcm5pbmdfc3RhdHVzLmx1YWA7XG5jb25zdCBpc19sZWFybmluZ19zdGF0dXMgPSByZWYoZmFsc2UpO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxubGV0IHRpdGxlX2RlbGV0ZT0gJyc7XG5sZXQgYm9keV9kZWxldGU9ICcnO1xubGV0IHRpdGxlX2RlbGV0ZV9hbGw9IF9pMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnMnKTtcbmxldCBib2R5X2RlbGV0ZV9hbGw9ICBfaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zX21lc3NhZ2UnKTtcbmxldCB0aXRsZV9hZGQ9IF9pMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uJyk7XG5sZXQgYm9keV9hZGQ9IF9pMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX21lc3NhZ2UnKTtcbmxldCBmb290ZXJfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9ub3RlcycpO1xubGV0IGxpc3Rfbm90ZXNfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9saXN0X25vdGVzJyk7XG5sZXQgdGl0bGVfZWRpdD0gX2kxOG4oJ2VkaXRfY2hlY2suZWRpdF9kZXZpY2VfZXhjbHVzaW9uJyk7XG5sZXQgdGl0bGVfZWRpdF9hbGw9IF9pMThuKCdlZGl0X2NoZWNrLmVkaXRfYWxsX2RldmljZXNfc3RhdHVzJyk7XG5sZXQgbGVhcm5pbmdfbWVzc2FnZT0gX2kxOG4oJ2VkaXRfY2hlY2subGVhcm5pbmcnKTtcbmxldCByb3dfdG9fZGVsZXRlPSByZWYobnVsbCk7XG5sZXQgcm93X3RvX2VkaXQ9IHJlZihudWxsKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0XG59KTtcblxuXG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWRcbn07XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBhbGwgYnV0dG9ucyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gIFxuICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgXCJjbGlja19idXR0b25fZWRpdF9kZXZpY2VcIjogY2xpY2tfYnV0dG9uX2VkaXRfZGV2aWNlLFxuICAgIFwiY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3NcIjogY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MsXG4gICAgXCJjbGlja19idXR0b25fZGVsZXRlXCI6IGNsaWNrX2J1dHRvbl9kZWxldGUsXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGlja19idXR0b25fZGVsZXRlKGV2ZW50KSB7XG4gIGxldCBib2R5ID0gYCR7aTE4bignZWRpdF9jaGVjay5kZWxldGVfZGV2aWNlX2V4Y2x1c2lvbicpfSAke2V2ZW50LnJvdy5tYWNfYWRkcmVzcy5tYWN9YDtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IGV2ZW50LnJvdztcblxuICBib2R5X2RlbGV0ZSA9IGJvZHk7XG5cbiAgdGl0bGVfZGVsZXRlID0gaTE4bignZWRpdF9jaGVjay5kZXZpY2VfZXhjbHVzaW9uJyk7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coYm9keV9kZWxldGUsIHRpdGxlX2RlbGV0ZSk7ICAgIFxuICBcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2VkaXRfZGV2aWNlKGV2ZW50KSB7XG4gIHJvd190b19lZGl0LnZhbHVlID0gZXZlbnQucm93O1xuICBtb2RhbF9lZGl0X2RldmljZS52YWx1ZS5zaG93KHJvd190b19lZGl0LnZhbHVlKTsgIFxufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyhldmVudCkge1xuICBjb25zdCByb3dEYXRhID0gZXZlbnQucm93O1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7cm93RGF0YS5maXJzdF9zZWVuLnRpbWVzdGFtcH0mZXBvY2hfZW5kPSR7cm93RGF0YS5sYXN0X3NlZW4udGltZXN0YW1wfSZtYWM9JHtyb3dEYXRhLm1hY19hZGRyZXNzLm1hY307ZXEmYWdncmVnYXRlZD1mYWxzZWBcbiAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG59XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG5cbiAgYXdhaXQgbGVhcm5pbmdfc3RhdHVzKCk7XG5cbn0pXG5cbmNvbnN0IGNzcmYgPSBwcm9wcy5jcnNmO1xuXG4vKiBGdW5jdGlvbiB0byBkZWxldGUgZGV2aWNlICovXG5jb25zdCBkZWxldGVfcm93ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fZGVsZXRlLnZhbHVlO1xuXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChkZWxldGVfdXJsLCB7XG4gICAgZGV2aWNlOiByb3cubWFjX2FkZHJlc3MubWFjLFxuICB9KVxuXG4gIHJlc3RfcGFyYW1zLmRldmljZSA9IHtcbiAgICBtYWM6IHJvdy5tYWNfYWRkcmVzcy5tYWNcbiAgfTtcbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2goKTtcblxufVxuXG5jb25zdCBkZWxldGVfYWxsX2NvbmZpcm0gPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgbW9kYWxfZGVsZXRlX2FsbC52YWx1ZS5zaG93KCk7XG59XG5cbmNvbnN0IGVkaXRfYWxsX2RldmljZXNfY29uZmlybSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBtb2RhbF9lZGl0X2RldmljZS52YWx1ZS5zaG93KCk7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGRlbGV0ZSBhbGwgZGV2aWNlcyAqL1xuY29uc3QgZGVsZXRlX2FsbCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGRlbGV0ZV91cmwsIHtcbiAgICBkZXZpY2U6ICdhbGwnLFxuICB9KVxuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoKCk7XG5cbn07XG5cbmNvbnN0IGxlYXJuaW5nX3N0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgIFxuICBjb25zdCByc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QobGVhcm5pbmdfc3RhdHVzX3VybCk7XG4gIGlmKHJzcC5sZWFybmluZ19kb25lKSB7XG4gICAgaXNfbGVhcm5pbmdfc3RhdHVzLnZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgaXNfbGVhcm5pbmdfc3RhdHVzLnZhbHVlID0gdHJ1ZTtcbiAgfVxufVxuXG5jb25zdCByZWZyZXNoID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGF3YWl0IGxlYXJuaW5nX3N0YXR1cygpO1xuICB0YWJsZV9kZXZpY2VfZXhjbHVzaW9ucy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbmZ1bmN0aW9uIGFkZF9kZXZpY2UoKSB7XG4gIG1vZGFsX2FkZF9kZXZpY2UudmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBhZGRfZGV2aWNlX3Jlc3QgPSBhc3luYyBmdW5jdGlvbiAoc2V0X3BhcmFtc19pbl91cmwpIHtcbiAgbGV0IHBhcmFtcyA9IHNldF9wYXJhbXNfaW5fdXJsO1xuICBwYXJhbXMubWFjX2xpc3QgPSBwYXJhbXMubWFjX2xpc3QucmVwbGFjZSgvKD86XFx0fCApL2csJycpXG4gIHBhcmFtcy5tYWNfbGlzdCA9IHBhcmFtcy5tYWNfbGlzdC5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgJywnKTtcblxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYWRkX3VybCwge1xuICAgIC4uLnBhcmFtc1xuICB9KVxuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoKCk7XG4gICAgICAgICAgXG59O1xuXG5jb25zdCBlZGl0X3JvdyA9IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICBsZXQgcm93ID0gcm93X3RvX2VkaXQudmFsdWU7XG4gIGlmKHJvdyAhPSBudWxsKVxuICAgIHBhcmFtcy5tYWNfYWxpYXMgPSBwYXJhbXMubWFjX2FsaWFzLnJlcGxhY2UoLyg/OlxcdHwgKS9nLCcnKTsgICBcbiAgaWYocm93ICE9IG51bGwpXG4gICAgcGFyYW1zLm1hYyA9IHJvdy5tYWNfYWRkcmVzcy5tYWM7XG4gIHBhcmFtcy5jc3JmID0gcHJvcHMuY29udGV4dC5jc3JmO1xuXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChlZGl0X3VybCwge1xuICAgIC4uLnBhcmFtc1xuICB9KVxuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuXG4gIHJlZnJlc2goKTtcbn07XG5cblxuZnVuY3Rpb24gY29sdW1uc19zb3J0aW5nKGNvbCwgcjAsIHIxKSB7XG4gIGlmIChjb2wgIT0gbnVsbCkge1xuICAgIGxldCByMF9jb2wgPSByMFtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICBsZXQgcjFfY29sID0gcjFbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gICAgaWYoY29sLmlkID09IFwibGFzdF9pcFwiKSB7XG4gICAgICBpZiAocjBfY29sICE9ICcnKSB7XG4gICAgICAgIHIwX2NvbCA9IHRha2VfaXAocjBfY29sKTtcbiAgICAgICAgcjBfY29sID0gTnRvcFV0aWxzLmNvbnZlcnRJUEFkZHJlc3MocjBfY29sKTtcbiAgICAgIH0gXG4gICAgICBpZiAocjFfY29sICE9ICcnKSB7XG4gICAgICAgIHIxX2NvbCA9IHRha2VfaXAocjFfY29sKTtcbiAgICAgICAgcjFfY29sID0gTnRvcFV0aWxzLmNvbnZlcnRJUEFkZHJlc3MocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIGlmKGNvbC5pZCA9PSBcIm1hbnVmYWN0dXJlclwiICkge1xuICAgICAgaWYgKHIwX2NvbCA9PT0gdW5kZWZpbmVkKSByMF9jb2wgPSAnJztcbiAgICAgIGlmIChyMV9jb2wgPT09IHVuZGVmaW5lZCkgcjFfY29sID0gJyc7XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSBpZihjb2wuaWQgPT0gXCJtYWNfYWRkcmVzc1wiKSB7XG4gICAgICByMF9jb2wgPSByMF9jb2wubWFjO1xuICAgICAgcjFfY29sID0gcjFfY29sLm1hYztcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfWVsc2UgaWYoY29sLmlkID09IFwiZmlyc3Rfc2VlblwiKSB7XG4gICAgICByMF9jb2wgPSByMFtcImZpcnN0X3NlZW5cIl1bXCJ0aW1lc3RhbXBcIl0gPT0gMCA/ICcnIDogcjBbXCJmaXJzdF9zZWVuXCJdW1wiZGF0YVwiXTtcbiAgICAgIHIxX2NvbCA9IHIxW1wiZmlyc3Rfc2VlblwiXVtcInRpbWVzdGFtcFwiXSA9PSAwID8gJycgOiByMVtcImZpcnN0X3NlZW5cIl1bXCJkYXRhXCJdO1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2UgaWYoY29sLmlkID09IFwibGFzdF9zZWVuXCIpIHtcbiAgICAgIHIwX2NvbCA9IHIwW1wibGFzdF9zZWVuXCJdW1widGltZXN0YW1wXCJdID09IDAgPyAnJyA6IHIwW1wibGFzdF9zZWVuXCJdW1wiZGF0YVwiXTtcbiAgICAgIHIxX2NvbCA9IHIxW1wibGFzdF9zZWVuXCJdW1widGltZXN0YW1wXCJdID09IDAgPyAnJyA6IHIxW1wibGFzdF9zZWVuXCJdW1wiZGF0YVwiXTtcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJzdGF0dXNcIikge1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInRyaWdnZXJfYWxlcnRcIikge1xuICAgICAgcjBfY29sID0gZm9ybWF0X2Jvb2wocjBfY29sKTtcbiAgICAgIHIxX2NvbCA9IGZvcm1hdF9ib29sKHIxX2NvbCk7XG5cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfVxuICB9XG4gIFxufVxuXG5mdW5jdGlvbiB0YWtlX2lwKHJfY29sKSB7XG4gIGNvbnN0IGlwID0gcl9jb2wuc3BsaXQoJ2hvc3Q9JylbMV0uc3BsaXQoXCJcXCdcIilbMF07XG4gIHJldHVybiBpcDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X2Jvb2wocl9jb2wpIHtcbiAgaWYgKHJfY29sKSB7XG4gICAgcmV0dXJuICd0cnVlJztcbiAgfVxuXG4gIGlmICghcl9jb2wpIHtcbiAgICByZXR1cm4gJ2ZhbHNlJztcbiAgfVxuXG4gIGlmIChyX2NvbCA9PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gcl9jb2w7XG4gIH1cblxuICBpZiAocl9jb2wgPT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiByX2NvbDtcbiAgfVxufVxuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIFxuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJtYWNfYWRkcmVzc1wiOiAoZGF0YSwgcm93KSA9PiB7XG4gICAgICBsZXQgbGFiZWwgPSBkYXRhLm1hYztcbiAgICAgIGxldCBhbGlhcyA9IGRhdGEuYWxpYXM7XG5cbiAgICAgIGlmICgoZGF0YS5zeW1ib2xpY19tYWMpICYmIChkYXRhLnN5bWJvbGljX21hYyAhPSBsYWJlbCkpXG4gICAgICAgIGxhYmVsID0gZGF0YS5zeW1ib2xpY19tYWM7XG5cbiAgICAgIGlmICgoYWxpYXMgIT0gbnVsbCkgJiYgKGFsaWFzICE9IGxhYmVsKSlcbiAgICAgICAgbGFiZWwgPSBgJHtsYWJlbH0gKCR7YWxpYXN9KWA7XG5cbiAgICAgIGlmIChkYXRhLnVybCAhPSBudWxsKVxuICAgICAgICBsYWJlbCA9IGA8YSBocmVmPScke2RhdGEudXJsfScgdGl0bGU9JyR7ZGF0YS5tYWN9Jz4ke2xhYmVsfTwvYT5gO1xuXG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfSxcbiAgICBcImZpcnN0X3NlZW5cIjogKGZpcnN0X3NlZW4sIHJvdykgPT4ge1xuICAgICAgaWYgKGZpcnN0X3NlZW4udGltZXN0YW1wID09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0X3NlZW4uZGF0YTtcbiAgICAgIH1cbiAgICB9LCBcbiAgICBcImxhc3Rfc2VlblwiOiAobGFzdF9zZWVuLCByb3cpID0+IHtcbiAgICAgIGlmIChsYXN0X3NlZW4udGltZXN0YW1wID09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxhc3Rfc2Vlbi5kYXRhO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJzdGF0dXNcIjogKHN0YXR1cywgcm93KSA9PiB7XG4gICAgICAvLzxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5cbiAgICAgIC8vPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYW5nZXJcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+XG4gICAgICBjb25zdCBsYWJlbCA9IF9pMThuKHN0YXR1cyk7XG4gICAgICBpZiAoc3RhdHVzID09IFwiYWxsb3dlZFwiKSB7XG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zdWNjZXNzXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYW5nZXJcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YFxuICAgICAgfVxuXG4gICAgfSxcbiAgICBcInRyaWdnZXJfYWxlcnRcIjogKHRyaWdnZXJfYWxlcnQsIHJvdykgPT4ge1xuICAgICAgbGV0IGlzX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGlmICh0cmlnZ2VyX2FsZXJ0ID09IFwiZmFsc2VcIikgXG4gICAgICAgIGlzX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGVsc2VcbiAgICAgICAgaXNfZW5hYmxlZCA9IHRyaWdnZXJfYWxlcnQ7XG4gICAgICByZXR1cm4gaXNfZW5hYmxlZCA/IGA8aSBjbGFzcz1cImZhcyBmYS1jaGVjayB0ZXh0LXN1Y2Nlc3NcIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhcyBmYS10aW1lcyB0ZXh0LWRhbmdlclwiPjwvaT5gO1xuICAgIH1cbiAgfVxuICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcblxuICAgIC8qaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgICBcbiAgICAgICAgYi5mX21hcF9jbGFzcyA9IChjdXJyZW50X2NsYXNzLCByb3cpID0+IHsgXG4gICAgICAgICAgY3VycmVudF9jbGFzcyA9IGN1cnJlbnRfY2xhc3MuZmlsdGVyKChjbGFzc19pdGVtKSA9PiBjbGFzc19pdGVtICE9IFwibGluay1kaXNhYmxlZFwiKTtcbiAgICAgICAgICBpZigocm93LmlzX29rX2xhc3Rfc2NhbiA9PSA0IHx8IHJvdy5pc19va19sYXN0X3NjYW4gPT0gbnVsbCB8fCByb3cubnVtX29wZW5fcG9ydHMgPCAxKSAmJiB2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRfY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7IFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY3VycmVudF9jbGFzcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSovXG4gIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbnMpO1xuICByZXR1cm4gY29sdW1ucztcbn07XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIC8qbGV0IHBhcmFtcyA9IGdldF91cmxfcGFyYW1zKGFjdGl2ZV9wYWdlLCBwZXJfcGFnZSwgY29sdW1uc193cmFwLCBtYXBfc2VhcmNoLCBmaXJzdF9nZXRfcm93cyk7XG4gICAgc2V0X3BhcmFtc19pbl91cmwocGFyYW1zKTsqL1xuICAgIGxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcygpO1xuICAgIHJldHVybiBwYXJhbXM7XG59O1xuXG5mdW5jdGlvbiBnZXRfdXJsX3BhcmFtcygpIHtcbiAgICBsZXQgYWN0dWFsX3BhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICB9OyAgICBcblxuICAgIHJldHVybiBhY3R1YWxfcGFyYW1zO1xufVxuXG5jb25zdCBtYXBfY29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBjb25maWc7XG59O1xuXG48L3NjcmlwdD5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgVExTIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3Rsc1wiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZmluZ2VycHJpbnRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGI+e3sgaTE4bignZmluZ2VycHJpbnRfbm90ZScpIH19PC9iPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZmluZ2VycHJpbnRgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiamEzX2NsaWVudF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgVExTIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3Rsc1wiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZmluZ2VycHJpbnRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGI+e3sgaTE4bignZmluZ2VycHJpbnRfbm90ZScpIH19PC9iPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZmluZ2VycHJpbnRgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiamEzX2NsaWVudF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3NzaFwiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfaGFzc2hcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaGFzc2hgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaGFzc2hfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9O1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF9zc2hcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2hhc3NoXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hhc3NoYF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhhc3NoX2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb21wYXNzXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ2Fzc2V0X21hcCcpLCBsYWJlbDogaTE4bignYXNzZXQnKSArIFwiOiBcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgKGkuaWQgPT0gdGhpcy5hY3RpdmVfdGFiICYmIGkucGFnZSA9PSB0aGlzLnBhZ2UpID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgXG4gICAgICBjb25zdCBmb3JtYXRfbmF2YmFyID0gdGhpcy5mb3JtYXRfbmF2YmFyX3RpdGxlO1xuICAgICAgZm9ybWF0X25hdmJhcih0aGlzLiRwcm9wcy5uYXZiYXJfaW5mbyk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX25hdmJhclwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgICAgZm9ybWF0X25hdmJhcih7IHNlbGVjdGVkX2lmYWNlOiB0aGlzLiRwcm9wcy5uYXZiYXJfaW5mby5zZWxlY3RlZF9pZmFjZSwgc2VsZWN0ZWRfaG9zdDogbm9kZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9tYXBfZXZlbnQsICh0YWIpID0+IHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdtYXAnLCB0YWIuaWQpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCB0YWIucGFnZSk7XG4gICAgICAgIGlmKHRhYi5wYWdlID09ICd0YWJsZScpXG4gICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRhYi5pZFxuICAgICAgICB0aGlzLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVybF9wYXJhbXMubWFwID0gdGFiLmlkXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpXG4gICAgICAgIGZvcm1hdF9uYXZiYXIoKVxuICAgICB9KTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgIGFjdGl2ZV90YWI6IG51bGwsXG4gICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgIHVybF9wYXJhbXM6IHt9LFxuICAgICAgICB1cGRhdGVkX3ZpZXc6IG51bGwsXG4gICAgICAgIG5hdmJhcl9ub2RlOiB7fSxcbiAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcbiAgICAgICAgICBtYWluX3RpdGxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJyAnICsgaTE4bihcIm1hcHNcIiksXG4gICAgICAgICAgICBpY29uOiBcImZhcyBmYS1tYXBcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY29uZGFyeV90aXRsZV9saXN0OiBbXSxcbiAgICAgICAgICBpdGVtc190YWJsZTogW1xuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb25jaWVyZ2UtYmVsbFwiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdzZXJ2aWNlX21hcCcpLCBsYWJlbDogaTE4bignc2VydmljZScpICsgXCI6IFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy0nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGljb246IFwiZmFzIGZhLWxnIGZhLWNsb2NrXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ3BlcmlvZGljaXR5X21hcCcpLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHknKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczogeyBcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudF90YWIgPSB0aGlzLmdldF9hY3RpdmVfdGFiKCk7XG4gICAgICAgIGN1cnJlbnRfdGFiLmRlc3Ryb3koKVxuICAgICAgfSxcbiAgICAgIGZvcm1hdF9uYXZiYXJfdGl0bGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX25vZGUgPSBkYXRhIC8qIFVwZGF0ZSBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLm5hdmJhcl9ub2RlIC8qIFVzZSB0aGUgb2xkIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdCA9IFtcbiAgICAgICAgICB7IGxhYmVsOiBkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsLCB0aXRsZTogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsfWAsIDE2KSB9XG4gICAgICAgIF1cblxuICAgICAgICBpZihkYXRhLnNlbGVjdGVkX2hvc3QgJiYgZGF0YS5zZWxlY3RlZF9ob3N0LmlkICE9ICcnKSB7XG4gICAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsO1xuICAgICAgICAgIGNvbnN0IGlwID0gTnRvcFV0aWxzLnJlbW92ZVZsYW4oZGF0YS5zZWxlY3RlZF9ob3N0LmlkKTtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0WzBdWydocmVmJ10gPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWE/bWFwPSR7dGhpcy5hY3RpdmVfdGFifSZwYWdlPSR7dGhpcy5wYWdlfSZpZmlkPSR7dGhpcy4kcHJvcHMuaWZpZH1gXG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBgJHtOdG9wVXRpbHMuZm9ybWF0TmFtZVZhbHVlKGhvc3RfbmFtZSwgaXApfWAsIC8vIEFkZGluZyB0aGUgbGFwdG9wIGljb25cbiAgICAgICAgICAgIHRpdGxlOiBgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCxcbiAgICAgICAgICAgIGhyZWY6IGRhdGEuc2VsZWN0ZWRfaG9zdC5pc19hY3RpdmUgPyBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2lwfWAgOiBudWxsLFxuICAgICAgICAgICAgaWNvbjogXCJmYS1zb2xpZCBmYS1sYXB0b3BcIixcbiAgICAgICAgICAgIHRhcmdldF9ibGFuazogXCJ0cnVlXCIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSAgXG4gICAgICB9LFxuICAgICAgZ2V0X2FjdGl2ZV90YWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGl2ZV90YWIgKyBcIl9cIiArIHRoaXMucGFnZV07XG4gICAgICB9LFxuICAgICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYoaXRlbS5pZCAhPSB0aGlzLmFjdGl2ZV90YWIgfHwgaXRlbS5wYWdlICE9IHRoaXMucGFnZSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb21wYXNzXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ2Fzc2V0X21hcCcpLCBsYWJlbDogaTE4bignYXNzZXQnKSArIFwiOiBcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgKGkuaWQgPT0gdGhpcy5hY3RpdmVfdGFiICYmIGkucGFnZSA9PSB0aGlzLnBhZ2UpID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgXG4gICAgICBjb25zdCBmb3JtYXRfbmF2YmFyID0gdGhpcy5mb3JtYXRfbmF2YmFyX3RpdGxlO1xuICAgICAgZm9ybWF0X25hdmJhcih0aGlzLiRwcm9wcy5uYXZiYXJfaW5mbyk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX25hdmJhclwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgICAgZm9ybWF0X25hdmJhcih7IHNlbGVjdGVkX2lmYWNlOiB0aGlzLiRwcm9wcy5uYXZiYXJfaW5mby5zZWxlY3RlZF9pZmFjZSwgc2VsZWN0ZWRfaG9zdDogbm9kZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9tYXBfZXZlbnQsICh0YWIpID0+IHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdtYXAnLCB0YWIuaWQpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCB0YWIucGFnZSk7XG4gICAgICAgIGlmKHRhYi5wYWdlID09ICd0YWJsZScpXG4gICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRhYi5pZFxuICAgICAgICB0aGlzLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVybF9wYXJhbXMubWFwID0gdGFiLmlkXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpXG4gICAgICAgIGZvcm1hdF9uYXZiYXIoKVxuICAgICB9KTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgIGFjdGl2ZV90YWI6IG51bGwsXG4gICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgIHVybF9wYXJhbXM6IHt9LFxuICAgICAgICB1cGRhdGVkX3ZpZXc6IG51bGwsXG4gICAgICAgIG5hdmJhcl9ub2RlOiB7fSxcbiAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcbiAgICAgICAgICBtYWluX3RpdGxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJyAnICsgaTE4bihcIm1hcHNcIiksXG4gICAgICAgICAgICBpY29uOiBcImZhcyBmYS1tYXBcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY29uZGFyeV90aXRsZV9saXN0OiBbXSxcbiAgICAgICAgICBpdGVtc190YWJsZTogW1xuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb25jaWVyZ2UtYmVsbFwiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdzZXJ2aWNlX21hcCcpLCBsYWJlbDogaTE4bignc2VydmljZScpICsgXCI6IFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy0nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGljb246IFwiZmFzIGZhLWxnIGZhLWNsb2NrXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ3BlcmlvZGljaXR5X21hcCcpLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHknKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczogeyBcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudF90YWIgPSB0aGlzLmdldF9hY3RpdmVfdGFiKCk7XG4gICAgICAgIGN1cnJlbnRfdGFiLmRlc3Ryb3koKVxuICAgICAgfSxcbiAgICAgIGZvcm1hdF9uYXZiYXJfdGl0bGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX25vZGUgPSBkYXRhIC8qIFVwZGF0ZSBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLm5hdmJhcl9ub2RlIC8qIFVzZSB0aGUgb2xkIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdCA9IFtcbiAgICAgICAgICB7IGxhYmVsOiBkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsLCB0aXRsZTogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsfWAsIDE2KSB9XG4gICAgICAgIF1cblxuICAgICAgICBpZihkYXRhLnNlbGVjdGVkX2hvc3QgJiYgZGF0YS5zZWxlY3RlZF9ob3N0LmlkICE9ICcnKSB7XG4gICAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsO1xuICAgICAgICAgIGNvbnN0IGlwID0gTnRvcFV0aWxzLnJlbW92ZVZsYW4oZGF0YS5zZWxlY3RlZF9ob3N0LmlkKTtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0WzBdWydocmVmJ10gPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWE/bWFwPSR7dGhpcy5hY3RpdmVfdGFifSZwYWdlPSR7dGhpcy5wYWdlfSZpZmlkPSR7dGhpcy4kcHJvcHMuaWZpZH1gXG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBgJHtOdG9wVXRpbHMuZm9ybWF0TmFtZVZhbHVlKGhvc3RfbmFtZSwgaXApfWAsIC8vIEFkZGluZyB0aGUgbGFwdG9wIGljb25cbiAgICAgICAgICAgIHRpdGxlOiBgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCxcbiAgICAgICAgICAgIGhyZWY6IGRhdGEuc2VsZWN0ZWRfaG9zdC5pc19hY3RpdmUgPyBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2lwfWAgOiBudWxsLFxuICAgICAgICAgICAgaWNvbjogXCJmYS1zb2xpZCBmYS1sYXB0b3BcIixcbiAgICAgICAgICAgIHRhcmdldF9ibGFuazogXCJ0cnVlXCIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSAgXG4gICAgICB9LFxuICAgICAgZ2V0X2FjdGl2ZV90YWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGl2ZV90YWIgKyBcIl9cIiArIHRoaXMucGFnZV07XG4gICAgICB9LFxuICAgICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYoaXRlbS5pZCAhPSB0aGlzLmFjdGl2ZV90YWIgfHwgaXRlbS5wYWdlICE9IHRoaXMucGFnZSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXY+XG4gIDxzdmdcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRfcmVmXCJcbiAgICA6d2lkdGg9XCJzYW5rZXlfc2l6ZS53aWR0aFwiXG4gICAgOmhlaWdodD1cInNhbmtleV9zaXplLmhlaWdodFwiXG4gICAgc3R5bGU9XCJtYXJnaW46MTBweDtcIj5cbiAgICA8ZGVmcyAvPlxuICAgIDxnIGNsYXNzPVwibm9kZXNcIiBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjU7XCIvPlxuICAgIDxnIGNsYXNzPVwibGlua3NcIlxuICAgICAgIHN0eWxlPVwic3Ryb2tlOiAjMDAwO3N0cm9rZU9wYWNpdHk6IDAuMzsgZmlsbDogbm9uZTtcIi8+XG4gICAgPGcgY2xhc3M9XCJ0ZXh0c1wiIC8+XG4gIDwvc3ZnPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGQzID0gZDN2NztcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgd2lkdGg6IE51bWJlcixcbiAgICBoZWlnaHQ6IE51bWJlcixcbn0pO1xuXG5jb25zdCBzYW5rZXlfY2hhcnRfcmVmID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X3NpemUgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4geyAgICBcbiAgICBkcmF3X3NhbmtleSgpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRyYXdfc2Fua2V5KCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpO1xuICAgIGNvbnN0IHNpemUgPSBnZXRfc2l6ZSgpO1xuICAgIHNhbmtleV9zaXplLnZhbHVlID0gc2l6ZTtcbiAgICBjb25zdCB7IGxpbmtzLCBub2RlcyB9ID0gY2FsY3VsYXRlX3NhbmtleShkYXRhLCBzaXplLndpZHRoIC0gMTAsIHNpemUuaGVpZ2h0IC0gNSk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLm5vZGVzXCIpXG5cdC5zZWxlY3RBbGwoXCJyZWN0XCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJyZWN0XCIpO1xuXHRcdFxuXHRcdGUuYXR0cihcInhcIiwgKGQpID0+IGQueDApLmF0dHIoXCJ5XCIsIChkKSA9PiBkLnkwKTtcblx0XHRcblx0XHRlLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQgICAgLmRlbGF5KDEwMDApXG5cdFx0ICAgIC5kdXJhdGlvbig1MDApXG5cdFx0ICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnkxIC0gZC55MClcblx0XHQgICAgLmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdFx0ICAgIC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHRcdCAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0ZS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkLm5hbWV9XFxuJHtkLmhvdXJzfWApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJ4XCIsIChkKSA9PiBkLngwKVxuXHRcdC5hdHRyKFwieVwiLCAoZCkgPT4gZC55MClcblx0XHQuYXR0cihcImhlaWdodFwiLCAoZCkgPT4gZC55MSAtIGQueTApXG5cdFx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdFx0LmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIChkKSA9PiBjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpXG5cdFx0LnNlbGVjdChcInRpdGxlXCIpXG5cdFx0LnRleHQoKGQpID0+IGAke2QubmFtZX1cXG4ke2QuaG91cnN9YCksXG4gICAgICAgICAgICAoZXhpdCkgPT5cblx0XHRleGl0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcikuZHVyYXRpb24oNTAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMCkucmVtb3ZlKClcblx0KS5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgIC8vdG9kbyBwb3J0YXJlIGZ1b3JpXG5cdCAgICAvLyBkYXRhID0gZGF0YS5jdXJyZW50VGFyZ2V0Ll9fZGF0YV9fXG5cdCAgICAvLyBjb25zdCBzb3VyY2VMaW5rID0gZGF0YS5zb3VyY2VMaW5rcztcblx0ICAgIC8vIGNvbnN0IHRhcmdldExpbmsgPSBkYXRhLnRhcmdldExpbmtzO1xuXHQgICAgLy8gY29uc3QgbGluayA9IChzb3VyY2VMaW5rICYmIHNvdXJjZUxpbmtbMF0pID8gc291cmNlTGlua1swXSA6IHRhcmdldExpbmtbMF07XG5cdCAgICBcblx0ICAgIC8vIGlmKGxpbmspIHtcblx0ICAgIC8vICAgLyogR2V0IHRoZSBub2RlIGxpbmsgZnJvbSB0aGUgcmVzdCAqL1xuXHQgICAgLy8gICBpZihsaW5rLnNvdXJjZS5pZCA9PT0gZGF0YS5pZCkge1xuXHQgICAgLy8gICAgIGlmKGxpbmsuc291cmNlX2xpbmsgJiYgbGluay5zb3VyY2VfbGluayAhPT0gJycpXG5cdCAgICAvLyAgICAgICB3aW5kb3cub3BlbihsaW5rLnNvdXJjZV9saW5rLCAnX2JsYW5rJyk7XG5cdCAgICAvLyAgIH0gZWxzZSBpZihsaW5rLnRhcmdldC5pZCA9PT0gZGF0YS5pZCkge1xuXHQgICAgLy8gICAgIGlmKGxpbmsudGFyZ2V0X2xpbmsgJiYgbGluay50YXJnZXRfbGluayAhPT0gJycpXG5cdCAgICAvLyAgICAgICB3aW5kb3cub3BlbihsaW5rLnRhcmdldF9saW5rLCAnX2JsYW5rJyk7XG5cdCAgICAvLyAgIH0gXG5cdCAgICAvLyB9IFxuXHR9KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcudGV4dHNcIilcblx0LnNlbGVjdEFsbChcInRleHRcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgZSA9IGVudGVyLmFwcGVuZChcInRleHRcIik7XG5cdFx0XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcInhcIiwgKGQpID0+IChkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBkLngxICsgNiA6IGQueDAgLSA2KSlcblx0XHQgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiAoZC55MSArIGQueTApIC8gMilcblx0XHQgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiBkMy5yZ2IoY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKS5kYXJrZXIoKSlcblx0XHQgICAgLmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcblx0XHQgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cblx0XHRcdCAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuXHRcdFx0IClcblx0XHQgICAgLmF0dHIoXCJmb250LXNpemVcIiwgOSlcblx0XHQgICAgLnRleHQoKGQpID0+IGQubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHVwZGF0ZSkgPT5cblx0XHR1cGRhdGVcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdC5kZWxheSg1MDApXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cihcInhcIiwgKGQpID0+IChkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBkLngxICsgNiA6IGQueDAgLSA2KSlcblx0XHQuYXR0cihcInlcIiwgKGQpID0+IChkLnkxICsgZC55MCkgLyAyKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cblx0XHQgICAgICBkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBcInN0YXJ0XCIgOiBcImVuZFwiXG5cdFx0ICAgICApXG5cdFx0LmF0dHIoXCJmb250LXNpemVcIiwgOSlcblx0XHQudGV4dCgoZCkgPT4gZC5uYW1lKSxcbiAgICAgICAgICAgIChleGl0KSA9PlxuXHRcdGV4aXRcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgICAgICAgICAgLyogLmRlbGF5KDUwMCkgKi9cblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMClcblx0XHQucmVtb3ZlKClcblx0KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImRlZnNcIilcblx0LnNlbGVjdEFsbChcImxpbmVhckdyYWRpZW50XCIpXG5cdC5kYXRhKGxpbmtzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGxnID0gZW50ZXIuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIik7XG5cdFx0XG5cdFx0bGcuYXR0cihcImlkXCIsIChkKSA9PiBgZ3JhZGllbnQtJHtkLmluZGV4fWApXG5cdFx0ICAgIC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG5cdFx0ICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuc291cmNlLngxKVxuXHRcdCAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLnRhcmdldC54MCk7XG5cdFx0XG5cdFx0bGcuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC5zb3VyY2UuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcblx0XHRcblx0XHRsZy5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+IHtcblx0XHR1cGRhdGVcblx0XHQgICAgLmF0dHIoXCJpZFwiLCAoZCkgPT4gYGdyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKVxuXHRcdCAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcblx0XHQgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC50YXJnZXQueDApO1xuXHRcdHVwZGF0ZS5zZWxlY3RBbGwoXCJzdG9wXCIpLnJlbW92ZSgpO1xuXHRcdHVwZGF0ZVxuXHRcdCAgICAuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC5zb3VyY2UuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcblx0XHRcblx0XHR1cGRhdGVcblx0XHQgICAgLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQudGFyZ2V0LmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGV4aXQpID0+IGV4aXQucmVtb3ZlKClcblx0KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubGlua3NcIilcblx0LnNlbGVjdEFsbChcInBhdGhcIilcblx0LmRhdGEobGlua3MpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgZSA9IGVudGVyLmFwcGVuZChcInBhdGhcIik7XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSlcblx0XHQgICAgLmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4gZC53aWR0aCk7XG5cdFx0ZS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkLmhvdXJzfWApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG5cdFx0LmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBkLndpZHRoKVxuXHRcdC5zZWxlY3QoXCJ0aXRsZVwiKVxuXHRcdC50ZXh0KChkKSA9PiBgJHtkLmhvdXJzfWApLFxuICAgICAgICAgICAgKGV4aXQpID0+XG5cdFx0ZXhpdFxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgICAgICAgICAvKiAuZGVsYXkoMTAwMCkgKi9cblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMClcblx0XHQucmVtb3ZlKClcblx0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHJzcCA9IFtcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCJJR01QXCIsXG5cdCAgICBcImxpbmtcIjogXCJJR01QXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MjI0LjAuMC4yNTEmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiA2MFxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIklHTVBcIixcblx0ICAgIFwic291cmNlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwibGlua1wiOiBcIklHTVBcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1JR01QXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInRhcmdldF9jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAxMjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjJcIixcblx0ICAgIFwic291cmNlXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJsaW5rXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTIyNC4wLjAuMiZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiA2MFxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIk1ETlNcIixcblx0ICAgIFwic291cmNlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwibGlua1wiOiBcIk1ETlNcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1NRE5TXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwidGFyZ2V0X2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDM5NlxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1NRE5TXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIk1ETlNcIixcblx0ICAgIFwibGlua1wiOiBcIk1ETlNcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0yMjQuMC4wLjI1MSZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDM5NlxuXHR9XG4gICAgXTtcbiAgICBcbi8qXG4gICAgbGV0IGRhdGEgPSB7XG5cdC8vIG5vZGVzOiBbXG5cdC8vICAgICB7IGluZGV4OiAwLCBuYW1lOiBcIkxpaWtldmFpaHRvXCIsIHZhbHVlOiAxMDAsIGhvdXJzOiBcIjEwMCVcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogMSwgbmFtZTogXCJLaWludGXDpHQga3VsdXRcIiwgdmFsdWU6IDc1LCBob3VyczogXCI4NSVcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogMiwgbmFtZTogXCJNdXV0dHV2YXQga3VsdXRcIiwgdmFsdWU6IDEwLCBob3VyczogXCIzOjAwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDMsIG5hbWU6IFwiUGFsa2tha3VsdXRcIiwgdmFsdWU6IDY5LCBob3VyczogXCIxOjIwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDQsIG5hbWU6IFwiTXV1dCBraWludGVcIiwgdmFsdWU6IDYsIGhvdXJzOiBcIjE6NDBcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogNSwgbmFtZTogXCJLYXRlXCIsIHZhbHVlOiAxNSwgaG91cnM6IFwiMTo0MFwiIH1cblx0Ly8gXSxcblx0bm9kZXM6IFtcblx0ICAgIHsgaW5kZXg6IDAsIG5hbWU6IFwiTGlpa2V2YWlodG9cIiwgaG91cnM6IFwiMTAwJVwiIH0sXG5cdCAgICB7IGluZGV4OiAxLCBuYW1lOiBcIktpaW50ZcOkdCBrdWx1dFwiLCBob3VyczogXCI4NSVcIiB9LFxuXHQgICAgeyBpbmRleDogMiwgbmFtZTogXCJNdXV0dHV2YXQga3VsdXRcIiwgaG91cnM6IFwiMzowMFwiIH0sXG5cdCAgICB7IGluZGV4OiAzLCBuYW1lOiBcIlBhbGtrYWt1bHV0XCIsIGhvdXJzOiBcIjE6MjBcIiB9LFxuXHQgICAgeyBpbmRleDogNCwgbmFtZTogXCJNdXV0IGtpaW50ZVwiLCBob3VyczogXCIxOjQwXCIgfSxcblx0ICAgIHsgaW5kZXg6IDUsIG5hbWU6IFwiS2F0ZVwiLCBob3VyczogXCIxOjQwXCIgfVxuXHRdLFxuXHRsaW5rczogW1xuXHQgICAgeyBzb3VyY2U6IDAsIHRhcmdldDogMSwgdmFsdWU6IDc1LCBob3VyczogXCIrMTowMFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMCwgdGFyZ2V0OiAyLCB2YWx1ZTogMTAsIGhvdXJzOiBcIisyOjAwXCIgfSxcblx0ICAgIHsgc291cmNlOiAxLCB0YXJnZXQ6IDMsIHZhbHVlOiA2OSwgaG91cnM6IFwiKzE6MjBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDEsIHRhcmdldDogNCwgdmFsdWU6IDYsIGhvdXJzOiBcIisxOjQwXCIgfSxcblx0ICAgIHsgc291cmNlOiAwLCB0YXJnZXQ6IDUsIHZhbHVlOiAxNSwgaG91cnM6IFwiKzE6NDBcIiB9XG5cdF1cbiAgICB9O1xuKi9cbiAgICBkYXRhID0gd3JhcF9ncmFwaF9yc3AocnNwKTtcblxuICAgIC8vZGVidWdnZXI7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHdyYXBfZ3JhcGhfcnNwKHJzcCkge1xuICAgIGxldCBub2RlcyA9IFtdO1xuICAgIGxldCBsaW5rcyA9IFtdO1xuXG4gICAgbGV0IG5vZGVzX2FkZGVkX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua3NfYWRkZWRfZGljdCA9IHt9O1xuICAgIGNvbnN0IGZfYWRkX25vZGUgPSAobm9kZV9pZCwgaHJlZiwgY29sb3IpID0+IHtcblx0aWYgKG5vZGVzX2FkZGVkX2RpY3Rbbm9kZV9pZF0gIT0gbnVsbCkgeyByZXR1cm47IH1cblx0bGV0IGluZGV4ID0gbm9kZXMubGVuZ3RoO1xuXHRub2Rlc19hZGRlZF9kaWN0W25vZGVfaWRdID0gaW5kZXg7XG5cdGxldCBuZXdfbm9kZSA9IHsgaW5kZXgsIG5hbWU6IG5vZGVfaWQsIGhyZWYsIGNvbG9yIH07XG5cdG5vZGVzLnB1c2gobmV3X25vZGUpO1xuICAgIH07XG4gICAgY29uc3QgZl9hZGRfbGluayA9IChzb3VyY2UsIHRhcmdldCwgdmFsdWUsIGxhYmVsKSA9PiB7XG5cdGNvbnN0IHNvdXJjZV9pbmRleCA9IG5vZGVzX2FkZGVkX2RpY3Rbc291cmNlXTtcblx0Y29uc3QgdGFyZ2V0X2luZGV4ID0gbm9kZXNfYWRkZWRfZGljdFt0YXJnZXRdO1xuXHRsZXQgbmV3X2xpbmsgPSB7IHNvdXJjZTogc291cmNlX2luZGV4LCB0YXJnZXQ6IHRhcmdldF9pbmRleCwgdmFsdWUsIGxhYmVsIH07XG5cdGxpbmtzLnB1c2gobmV3X2xpbmspO1xuICAgIH07XG4gICAgcnNwLmZvckVhY2goKGVsKSA9PiB7XG5cdGZfYWRkX25vZGUoZWwuc291cmNlLCBlbC5zb3VyY2VfbGluaywgZWwuc291cmNlX2NvbG9yKTtcblx0Zl9hZGRfbm9kZShlbC50YXJnZXQsIGVsLnRhcmdldF9saW5rLCBlbC50YXJnZXRfY29sb3IpO1xuXHRmX2FkZF9saW5rKGVsLnNvdXJjZSwgZWwudGFyZ2V0LCBlbC52YWx1ZSwgZWwubGluayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9zaXplKCkge1xuICAgIGxldCB3aWR0aCA9IHByb3BzLndpZHRoO1xuICAgIGlmICh3aWR0aCA9PSBudWxsKSB7IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAyMDA7IH1cbiAgICBsZXQgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xuICAgIGlmIChoZWlnaHQgPT0gbnVsbCkgeyBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSA1MDsgfVxuXG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfc2Fua2V5KGRhdGEsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBzYW5rZXlpbXBsID0gZDMuc2Fua2V5KClcblx0ICAubm9kZUFsaWduKGQzLnNhbmtleUNlbnRlcilcblx0ICAubm9kZVdpZHRoKDEwKVxuXHQgIC5ub2RlUGFkZGluZygxMClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICBcbiAgICByZXR1cm4gc2Fua2V5aW1wbChkYXRhKTtcbn1cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5ub2RlIHJlY3Qge1xuICBmaWxsLW9wYWNpdHk6IDAuOTtcbiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzO1xufVxuXG4ubm9kZSB0ZXh0IHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmY7XG59XG5cbi5saW5rIHtcbiAgZmlsbDogbm9uZTtcbiAgc3Ryb2tlOiAjMDAwO1xuICBzdHJva2Utb3BhY2l0eTogMC4yO1xufVxuXG4ubGluazpob3ZlciB7XG4gIHN0cm9rZS1vcGFjaXR5OiAwLjU7XG59XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgIDxoMyB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCIgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPGNoYXJ0IHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIlxuICAgICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICA8L2NoYXJ0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnYXBwbGljYXRpb25zJ1wiIHJlZj1cInRhYmxlX2hvc3RfYXBwbGljYXRpb25zXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnY2F0ZWdvcmllcydcIiByZWY9XCJ0YWJsZV9ob3N0X2NhdGVnb3JpZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2NoYXJ0JzogQ2hhcnQsXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIGlzX2NoX2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgaXNfbG9jYWxlOiBTdHJpbmcsXG4gICAgdHNfbDdfZW5hYmxlZDogQm9vbGVhbixcbiAgICB0c19jYXRfZW5hYmxlZDogQm9vbGVhblxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8IHRoaXMuJHByb3BzLnZpZXdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9PSBpLmlkID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiLmlkKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IHRhYi5pZDtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYXBwbGljYXRpb25zX3RhYjogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9uczogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXM6IG51bGwsXG4gICAgICBjaGFydF9vcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX3Byb3RvY29scycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L3Byb3RvX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2FwcGxpY2F0aW9uc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfY2F0ZWdvcmllcycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2NhdF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfY2F0ZWdvcmllc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgICBpZDogJ2FwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmNhdGVnb3JpZXNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnY2F0ZWdvcmllcycpLFxuICAgICAgICAgIGlkOiAnY2F0ZWdvcmllcydcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkX2FjdGlvbl9jb2x1bW46IGZ1bmN0aW9uKGNvbHVtbnMsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBob3N0ID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fWBcbiAgICAgIGNvbnN0IHZsYW4gPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59YFxuICAgICAgY29uc3QgaWZpZCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaWZpZH1gXG4gICAgICBsZXQgaGFuZGxlcklkID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcbiAgICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICBoYW5kbGVySWQsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/aWZpZD0ke2lmaWR9JiR7bmFtZX09JHtzZXJ2aWNlW3ZhbHVlXS5pZH07ZXEmaXA9JHtob3N0fTtlcWBcbiAgICAgICAgICAgIGlmKHZsYW4gIT0gMClcbiAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfSZ2bGFuX2lkPSR7dmxhbn07ZXFgXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dKVxuICAgICAgfX0pXG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCBpdGVtKTtcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hvc3RfJHt0aGlzLmFwcGxpY2F0aW9uc190YWJ9YF07XG4gICAgfSxcbiAgICBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBQYWdlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdhcHBsaWNhdGlvbnMnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICBpZiAoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiICYmIFBhZ2VWdWUuJHByb3BzLnRzX2w3X2VuYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnBhZ2U9aGlzdG9yaWNhbCZpZmlkPSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfSZwcm90b2NvbD0ke2RhdGEubGFiZWx9JnRzX3NjaGVtYT1ob3N0Om5kcGlcIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnNlbnRcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMTAnLCBuYW1lOiAnc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnJjdmRcIiksIHRhcmdldHM6IDMsIHdpZHRoOiAnMTAnLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5icmVha2Rvd25cIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YTogJ2JyZWFrZG93bicsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhLCB0eXBlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9zZW50ID0gKHJvdy5ieXRlc19zZW50ICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlX3NlbnQsIHBlcmNlbnRhZ2VfcmN2ZCwgaTE4bignaG9zdF9kZXRhaWxzLnNlbnQnKSwgaTE4bignaG9zdF9kZXRhaWxzLnJjdmQnKSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMjAnLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMjAnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdwcm90bycsICdhcHBsaWNhdGlvbicpO1xuICBcbiAgbGV0IGFwcGxpY2F0aW9uc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBhcHBsaWNhdGlvbnNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyA9IGFwcGxpY2F0aW9uc0NvbmZpZztcblxuXG4gIC8qIENhdGVnb3JpZXMgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjYXRlZ29yaWVzJyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcylcblxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmNhdGVnb3J5XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgaWYgKFBhZ2VWdWUuJHByb3BzLmlzX2xvY2FsZSA9PSBcIjFcIiAmJiBQYWdlVnVlLiRwcm9wcy50c19jYXRfZW5hYmxlZCA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnRzX3NjaGVtYT1ob3N0Om5kcGlfY2F0ZWdvcmllcyZwYWdlPWhpc3RvcmljYWwmY2F0ZWdvcnk9JHtkYXRhLmxhYmVsfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdhcHBsaWNhdGlvbnMnLCBkYXRhOiAnYXBwbGljYXRpb25zJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgaWYoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiKVxuICAgICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsIHx8ICcnfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vJHtkYXRhLmhyZWZ9JHtkYXRhLmNhdGVnb3J5X2lkfVwiPiR7ZGF0YS5tb3JlX3Byb3RvcyB8fCAnJ308L2E+YFxuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9YDtcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3Y2F0JywgJ2NhdGVnb3J5Jyk7XG4gIFxuICBsZXQgY2F0ZWdvcmllc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjYXRlZ29yaWVzQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA0IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV1cbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMiB9LFxuICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICBdXG4gIFxuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPGgzIHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIiBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8Y2hhcnQgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiXG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvY2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdhcHBsaWNhdGlvbnMnXCIgcmVmPVwidGFibGVfaG9zdF9hcHBsaWNhdGlvbnNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdjYXRlZ29yaWVzJ1wiIHJlZj1cInRhYmxlX2hvc3RfY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnY2hhcnQnOiBDaGFydCxcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgaXNfY2hfZW5hYmxlZDogQm9vbGVhbixcbiAgICBpc19sb2NhbGU6IFN0cmluZyxcbiAgICB0c19sN19lbmFibGVkOiBCb29sZWFuLFxuICAgIHRzX2NhdF9lbmFibGVkOiBCb29sZWFuXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZpZXdcIikgfHwgdGhpcy4kcHJvcHMudmlld1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiLCBjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIuaWQpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gdGFiLmlkO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBhcHBsaWNhdGlvbnNfdGFiOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2F0ZWdvcmllczogbnVsbCxcbiAgICAgIGNoYXJ0X29wdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfcHJvdG9jb2xzJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvcHJvdG9fZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGFwcGxpY2F0aW9uc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYXBwbGljYXRpb25zYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvYnJlZWRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGFwcGxpY2F0aW9uc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYnJlZWRgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfMTBfbmRwaV9jYXRlZ29yaWVzJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvY2F0X2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9jYXRlZ29yaWVzYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvYnJlZWRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuYXBwbGljYXRpb25zX3RhYicpLFxuICAgICAgICAgIGFjdGl2ZTogKHRoaXMuJHByb3BzLnZpZXcgPT0gJ2FwcGxpY2F0aW9ucycpLFxuICAgICAgICAgIGlkOiAnYXBwbGljYXRpb25zJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuY2F0ZWdvcmllc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdjYXRlZ29yaWVzJyksXG4gICAgICAgICAgaWQ6ICdjYXRlZ29yaWVzJ1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRfYWN0aW9uX2NvbHVtbjogZnVuY3Rpb24oY29sdW1ucywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IGhvc3QgPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9YFxuICAgICAgY29uc3QgdmxhbiA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMudmxhbn1gXG4gICAgICBjb25zdCBpZmlkID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfWBcbiAgICAgIGxldCBoYW5kbGVySWQgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWp1bXAtaGlzdG9yaWNhbFwiO1xuICAgICAgY29sdW1ucy5wdXNoKHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuICAgICAgICAgIGhhbmRsZXJJZCxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9pZmlkPSR7aWZpZH0mJHtuYW1lfT0ke3NlcnZpY2VbdmFsdWVdLmlkfTtlcSZpcD0ke2hvc3R9O2VxYFxuICAgICAgICAgICAgaWYodmxhbiAhPSAwKVxuICAgICAgICAgICAgICB1cmwgPSBgJHt1cmx9JnZsYW5faWQ9JHt2bGFufTtlcWBcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybClcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFt7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfV0pXG4gICAgICB9fSlcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsIGl0ZW0pO1xuICAgIH0sIFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaG9zdF8ke3RoaXMuYXBwbGljYXRpb25zX3RhYn1gXTtcbiAgICB9LFxuICAgIGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICAgICAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIFBhZ2VWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2FwcGxpY2F0aW9ucydcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9kYXRhLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ2FwcGxpY2F0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIGlmIChQYWdlVnVlLiRwcm9wcy5pc19sb2NhbGUgPT0gXCIxXCIgJiYgUGFnZVZ1ZS4kcHJvcHMudHNfbDdfZW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mcGFnZT1oaXN0b3JpY2FsJmlmaWQ9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmlmaWR9JnByb3RvY29sPSR7ZGF0YS5sYWJlbH0mdHNfc2NoZW1hPWhvc3Q6bmRwaVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBlbHNlXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsfWA7XG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzEwJywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuc2VudFwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcxMCcsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMucmN2ZFwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcxMCcsIG5hbWU6ICdyY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3NlbnQgPSAocm93LmJ5dGVzX3NlbnQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9yY3ZkID0gKHJvdy5ieXRlc19yY3ZkICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCcsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN3Byb3RvJywgJ2FwcGxpY2F0aW9uJyk7XG4gIFxuICBsZXQgYXBwbGljYXRpb25zQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGFwcGxpY2F0aW9uc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zID0gYXBwbGljYXRpb25zQ29uZmlnO1xuXG5cbiAgLyogQ2F0ZWdvcmllcyB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NhdGVnb3JpZXMnICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKVxuXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuY2F0ZWdvcnlcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdjYXRlZ29yeScsIGRhdGE6ICdjYXRlZ29yeScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICBpZiAoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiICYmIFBhZ2VWdWUuJHByb3BzLnRzX2NhdF9lbmFibGVkID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mdHNfc2NoZW1hPWhvc3Q6bmRwaV9jYXRlZ29yaWVzJnBhZ2U9aGlzdG9yaWNhbCZjYXRlZ29yeT0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsfWA7XG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2FwcGxpY2F0aW9ucycsIGRhdGE6ICdhcHBsaWNhdGlvbnMnLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBpZihQYWdlVnVlLiRwcm9wcy5pc19sb2NhbGUgPT0gXCIxXCIpXG4gICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS8ke2RhdGEuaHJlZn0ke2RhdGEuY2F0ZWdvcnlfaWR9XCI+JHtkYXRhLm1vcmVfcHJvdG9zIHx8ICcnfTwvYT5gXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbCB8fCAnJ31gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAncGVyY2VudGFnZScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdjYXQnLCAnY2F0ZWdvcnknKTtcbiAgXG4gIGxldCBjYXRlZ29yaWVzQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNhdGVnb3JpZXNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIDQgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXVxuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5jb2x1bW5EZWZzID0gW1xuICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gIF1cbiAgXG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRyYWZmaWNfdGFibGVcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfdHJhZmZpY190YWJsZS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ190cmFmZmljX3RhYmxlLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ190cmFmZmljX3RhYmxlLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX3RyYWZmaWNfdGFibGUuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX3RyYWZmaWNfdGFibGUudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5jb25zdCB0cmFmZmljX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbmZpZ190cmFmZmljX3RhYmxlID0gcmVmKHt9KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbn0pXG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICB9XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5sNF9wcm90bycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w0L3Byb3RvX2RhdGEubHVhYCxcbiAgICBpZDogYHRyYWZmaWNfcHJvdG9zYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuY29udGFjdGVkX2hvc3RzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDQvY29udGFjdGVkX2hvc3RzX2RhdGEubHVhYCxcbiAgICBpZDogYGNvbnRhY3RlZF9ob3N0c2AsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRyYWZmaWMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC90cmFmZmljX2RhdGEubHVhYCxcbiAgICBpZDogYHRyYWZmaWNgLFxuICB9LFxuXVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gICAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwicHJvdG9jb2xcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwcm90b2NvbCcsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY2hhcnRcIiksIHRhcmdldHM6IDEsIG5hbWU6ICdoaXN0b3JpY2FsJywgZGF0YTogJ2hpc3RvcmljYWwnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJ5dGVzX3NlbnRcIiksIHRhcmdldHM6IDIsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy5ieXRlc19yY3ZkXCIpLCB0YXJnZXRzOiAzLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2Vfc2VudCA9IChyb3cuYnl0ZXNfc2VudCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfYnl0ZXNcIiksIHRhcmdldHM6IDUsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90YWxfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCUnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICd0b3RhbF9wZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGxldCB0cmFmZmljQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIHRyYWZmaWNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdfdHJhZmZpY190YWJsZS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTYgbWItNCBtdC00XCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIlxuICAgICAgICAgICAgICAgIEBjaGFydF9yZWxvYWRlZD1cImNoYXJ0X2RvbmVcIj5cbiAgICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmxfcGFyYW1zOiBPYmplY3QsXG59KVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY2hhcnRfb3B0aW9ucyA9IFtcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMucGFja2V0c19zZW50JyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9zZW50X2RhdGEubHVhYCxcbiAgICBpZDogYHBhY2tldHNfc2VudGAsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnBhY2tldHNfcmN2ZCcpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvcmN2ZF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBwYWNrZXRzX3JjdmRgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50Y3BfZmxhZ3MnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL3RjcF9mbGFnc19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0Y3BfZmxhZ3NgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5hcnBfZGlzdHJpYnV0aW9uJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9hcnBfZGF0YS5sdWFgLFxuICAgIGlkOiBgYXJwX3JlcXVlc3RzYCxcbiAgfSxcbl1cblxuZnVuY3Rpb24gY2hhcnRfZG9uZShkYXRhLCB0bXAsIHRtcDIpIHtcbiAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpXG59XG5cbm9uTW91bnRlZCgoKSA9PiB7fSlcblxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiB2LWlmPVwibm9fZGF0YVwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIGlkPVwiZW1wdHktbWVzc2FnZVwiPnt7IG5vX2RhdGFfbWVzc2FnZSB8fCBfaTE4bignZmxvd3NfcGFnZS5ub19kYXRhJykgfX08L2Rpdj5cbjxkaXY+XG4gIDxzdmdcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRfcmVmXCJcbiAgICA6d2lkdGg9XCJzYW5rZXlfc2l6ZS53aWR0aFwiXG4gICAgOmhlaWdodD1cInNhbmtleV9zaXplLmhlaWdodFwiXG4gICAgc3R5bGU9XCJtYXJnaW46MTBweDtcIj5cbiAgICA8ZyBjbGFzcz1cIm5vZGVzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC41O1wiLz5cbiAgICA8ZyBjbGFzcz1cImxpbmtzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC4zO2ZpbGw6bm9uZTtcIi8+XG4gIDwvc3ZnPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGQzID0gZDN2NztcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnbm9kZV9jbGljaycsICd1cGRhdGVfd2lkdGgnLCAndXBkYXRlX2hlaWdodCddKVxuXG5jb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAyLjUsXG4gICAgcmlnaHQ6IDUsXG4gICAgYm90dG9tOiAyLjUsXG4gICAgbGVmdDogNVxufTtcblxuY29uc3Qgbm9kZV93aWR0aCA9IDEwO1xuY29uc3Qgbm9fZGF0YSA9IHJlZihmYWxzZSlcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIG5vX2RhdGFfbWVzc2FnZTogU3RyaW5nLFxuICB3aWR0aDogTnVtYmVyLFxuICBoZWlnaHQ6IE51bWJlcixcbiAgc2Fua2V5X2RhdGE6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBzYW5rZXlfY2hhcnRfcmVmID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X3NpemUgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xuICAgIGF0dGFjaF9ldmVudHMoKTtcbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5zYW5rZXlfZGF0YSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgc2V0X3NhbmtleV9kYXRhKHRydWUpO1xufSk7XG5cbmZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YShyZXNldCkge1xuICAgIGlmIChyZXNldCkge1xuXHQkKFwiLm5vZGVzXCIsIHNhbmtleV9jaGFydF9yZWYudmFsdWUpLmVtcHR5KCk7XG5cdCQoXCIubGlua3NcIiwgc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSkuZW1wdHkoKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNhbmtleV9kYXRhLm5vZGVzID09IG51bGwgfHwgcHJvcHMuc2Fua2V5X2RhdGEubGlua3MgPT0gbnVsbFxuXHR8fCBwcm9wcy5zYW5rZXlfZGF0YS5sZW5ndGggPT0gMCB8fCBwcm9wcy5zYW5rZXlfZGF0YS5saW5rcy5sZW5ndGggPT0gMCkge1xuXHRyZXR1cm47XG4gICAgfVxuICAgIGRyYXdfc2Fua2V5KCk7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaF9ldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHNldF9zYW5rZXlfZGF0YSh0cnVlKSk7XG59XG5cbmxldCBzYW5rZXkgPSBudWxsO1xubGV0IHNhbmtleURhdGEgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gZHJhd19zYW5rZXkoKSB7XG4gICAgY29uc3QgY29sb3JzID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApO1xuICAgIGxldCBkYXRhID0gcHJvcHMuc2Fua2V5X2RhdGE7Ly9hd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBjb25zdCBzaXplID0gZ2V0X3NpemUoKTtcbiAgICBzYW5rZXlfc2l6ZS52YWx1ZSA9IHNpemU7XG4gICAgc2Fua2V5ID0gY3JlYXRlX3NhbmtleShzaXplLndpZHRoIC0gMTAsIHNpemUuaGVpZ2h0IC0gNSk7XG4gICAgc2Fua2V5RGF0YSA9IHNhbmtleShkYXRhKTtcbiAgICBjb25zdCB7IGxpbmtzLCBub2RlcyB9ID0gc2Fua2V5RGF0YTtcbiAgICBcbiAgICBsZXQgZDNfbm9kZXMgPSBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubm9kZXNcIilcblx0LnNlbGVjdEFsbChcImdcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcblx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IGB0cmFuc2xhdGUoJHtkLngwfSwgJHtkLnkwfSlgKVxuICAgIFxuICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcblx0ICAuc2NhbGVFeHRlbnQoWzEsIDQwXSlcblx0ICAub24oXCJ6b29tXCIsIHpvb21lZCk7XG4gICAgXG4gICAgZDNfbm9kZXMuYXBwZW5kKFwicmVjdFwiKVxuICAgIC8vIC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgLy8gLmRlbGF5KDEwMDApXG4gICAgLy8gLmR1cmF0aW9uKDUwMClcblx0LmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHQuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLngxIC0gZC54MClcblx0LmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LW5vZGVcIilcblx0LmF0dHIoXCJzdHlsZVwiLCBcImN1cnNvcjptb3ZlO1wiKTtcbiAgICBkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKGQpID0+IGAke2Q/LmxhYmVsfWApO1xuICAgIFxuICAgIC8vIFJlbGF0aXZlIHRvIGNvbnRhaW5lci8gbm9kZSByZWN0ICAgIFxuICAgIGQzX25vZGVzLmRhdGEobm9kZXMpXG5cdC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLy8gLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAvLyAuZGVsYXkoMTAwMClcbiAgICAvLyAuZHVyYXRpb24oNTAwKVxuICAgIFx0LmF0dHIoJ2NsYXNzJywgJ2xhYmVsJylcbiAgICBcdC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnYXV0bycpXG5cdC5hdHRyKFwic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIilcbiAgICBcdC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgZnVuY3Rpb24oZCkgeyByZXR1cm4gMTsgfSApXG4gICAgXHQuYXR0cihcImZpbGxcIiwgKGQpID0+IFwiIzAwMFwiKVxuICAgIC8vIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdC5hdHRyKFwieFwiLCAoZCkgPT4gKGQueDAgPCBzaXplLndpZHRoIC8gMiA/IDYgKyAoZC54MSAtIGQueDApIDogLTYpKVxuXHQuYXR0cihcInlcIiwgKGQpID0+IChkLnkxIC0gZC55MCkgLyAyKVxuICAgIFx0LmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcblx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cbiAgICAgICAgICAgICAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuICAgICAgICAgICAgIClcbiAgICBcdC5hdHRyKFwiZm9udC1zaXplXCIsIDEyKVxuICAgIFx0LnRleHQoKGQpID0+IGQubGFiZWwpXG5cdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhX29iail7IGVtaXQoJ25vZGVfY2xpY2snLCBkYXRhX29iai5kYXRhKTsgfSk7ICAgIFxuICAgIGQzX25vZGVzXG5cdC5jYWxsKGQzLmRyYWcoKS5zdWJqZWN0KGQgPT4gZCkub24oXCJzdGFydFwiLCBkcmFnU3RhcnQpLm9uKFwiZHJhZ1wiLCBkcmFnTW92ZSkpO1xuICAgIFxuICAgIGNvbnN0IGxpbmtzX2QzID0gZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdCAgLnNlbGVjdChcImcubGlua3NcIilcblx0ICAuc2VsZWN0QWxsKFwiZ1wiKVxuXHQgIC5kYXRhKGxpbmtzKVxuXHQgIC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcbiAgICBcbiAgICBsZXQgbGdfZDMgPSBsaW5rc19kMy5hcHBlbmQoXCJsaW5lYXJHcmFkaWVudFwiKTtcbiAgICBsZ19kMy5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcbiAgICBcdC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG4gICAgXHQuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcbiAgICBcdC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcbiAgICBcbiAgICBsZ19kMy5hcHBlbmQoXCJzdG9wXCIpXG4gICAgXHQuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcbiAgICBcdC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgXG4gICAgbGdfZDMuYXBwZW5kKFwic3RvcFwiKVxuICAgIFx0LmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG4gICAgXHQuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgIFxuICAgIGxpbmtzX2QzXG5cdC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgXHQuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LWxpbmtcIilcblx0LmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG4gICAgLy8gLmF0dHIoXCJzdHlsZVwiLCBgc3Ryb2tlLXdpZHRoOiAke2Qud2lkdGh9cHg7YClcblx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IHtcblx0ICAgIHJldHVybiBNYXRoLm1heCgxLCBkLndpZHRoKTtcblx0fSlcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApIFxuICAgIFx0LmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuICAgIC8vIFx0LmF0dHIoXCJzdHJva2VcIiwgYGJsYWNrYClcbiAgICBcbiAgICAvLyBcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBNYXRoLm1heCgxMDAsIGQud2lkdGgpKTtcbiAgICAgICAgXG4gICAgbGlua3NfZDNcbiAgICBcdC5hcHBlbmQoXCJ0aXRsZVwiKVxuICAgIFx0LnRleHQoKGQpID0+IGAke2QubGFiZWx9YCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdTdGFydChldmVudCwgZCkge1xuICAgIGQuX194ID0gZXZlbnQueDtcbiAgICBkLl9feSA9IGV2ZW50Lnk7XG4gICAgZC5fX3gwID0gZC54MDtcbiAgICBkLl9feTAgPSBkLnkwO1xuICAgIGQuX194MSA9IGQueDE7XG4gICAgZC5fX3kxID0gZC55MTtcbn0gLy9kcmFnU3RhcnRcblxuZnVuY3Rpb24gZHJhZ01vdmUoZXZlbnQsIGQpIHtcbiAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRjb25zdCBkeCA9IGV2ZW50LnggLSBkLl9feDtcblx0Y29uc3QgZHkgPSBldmVudC55IC0gZC5fX3k7XG5cdGNvbnN0IHdpZHRoID0gc2Fua2V5X3NpemUudmFsdWUud2lkdGg7XG5cdGNvbnN0IGhlaWdodCA9IHNhbmtleV9zaXplLnZhbHVlLndpZHRoO1xuXHRkLngwID0gZC5fX3gwICsgZHg7XG5cdGQueDEgPSBkLl9feDEgKyBkeDtcblx0ZC55MCA9IGQuX195MCArIGR5O1xuXHRkLnkxID0gZC5fX3kxICsgZHk7XG5cdFxuXHRpZiAoZC54MCA8IDApIHtcbiAgICAgICAgICAgIGQueDAgPSAwO1xuICAgICAgICAgICAgZC54MSA9IG5vZGVfd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLngxID4gd2lkdGgpIHtcbiAgICAgICAgICAgIGQueDAgPSB3aWR0aCAtIG5vZGVfd2lkdGg7XG4gICAgICAgICAgICBkLngxID0gd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLnkwIDwgMCkge1xuICAgICAgICAgICAgZC55MCA9IDA7XG4gICAgICAgICAgICBkLnkxID0gZC5fX3kxIC0gZC5fX3kwO1xuXHR9IC8vIGlmXG5cdFxuXHRpZiAoZC55MSA+IGhlaWdodCkge1xuICAgICAgICAgICAgZC55MCA9IGhlaWdodCAtIChkLl9feTEgLSBkLl9feTApO1xuICAgICAgICAgICAgZC55MSA9IGhlaWdodDtcblx0fSAvLyBpZlxuXHRzYW5rZXkudXBkYXRlKHNhbmtleURhdGEpO1xuXHRkMy5zZWxlY3RBbGwoXCIuc2Fua2V5LWxpbmtcIikuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSk7XG5cdHJldHVybiBgdHJhbnNsYXRlKCR7ZC54MH0sICR7ZC55MH0pYDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gem9vbWVkKHt0cmFuc2Zvcm19KSB7XG4gICAgZy5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG59XG5mdW5jdGlvbiBnZXRfc2l6ZSgpIHtcbiAgICBlbWl0KCd1cGRhdGVfd2lkdGgnKTtcbiAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICBpZiAod2lkdGggPT0gdW5kZWZpbmVkKSB7IHdpZHRoID0gJChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5wYXJlbnQoKS5wYXJlbnQoKS53aWR0aCgpIC0gMTAgfVxuXG4gICAgZW1pdCgndXBkYXRlX2hlaWdodCcpO1xuICAgIGxldCBoZWlnaHQgPSBwcm9wcy5oZWlnaHRcbiAgICBpZiAoaGVpZ2h0ID09IHVuZGVmaW5lZCkgeyBoZWlnaHQgPSAkKHNhbmtleV9jaGFydF9yZWYudmFsdWUpLnBhcmVudCgpLnBhcmVudCgpLmhlaWdodCgpIC0gODA7IH1cblxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX3NhbmtleSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgX3NhbmtleSA9IGQzLnNhbmtleSgpXG5cdCAgLm5vZGVBbGlnbihkMy5zYW5rZXlDZW50ZXIpXG5cdCAgLm5vZGVXaWR0aCgxMClcblx0ICAubm9kZVBhZGRpbmcobm9kZV93aWR0aClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICByZXR1cm4gX3NhbmtleTtcbn1cblxuLyogU2V0IHRvIHRydWUsIHRvIHNob3cgdGhlICdObyBEYXRhJyBtZXNzYWdlICovXG5mdW5jdGlvbiBzZXRfbm9fZGF0YV9mbGFnKHNldF9ub19kYXRhKSB7XG4gIG5vX2RhdGEudmFsdWUgPSBzZXRfbm9fZGF0YVxufVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuICAgIFxuZGVmaW5lRXhwb3NlKHsgZHJhd19zYW5rZXksIHNldF9ub19kYXRhX2ZsYWcgfSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiAubm9kZSByZWN0IHsgKi9cbi8qICAgZmlsbC1vcGFjaXR5OiAwLjk7ICovXG4vKiAgIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlczsgKi9cbi8qIH0gKi9cblxuLyogLm5vZGUgdGV4dCB7ICovXG4vKiAgIHBvaW50ZXItZXZlbnRzOiBub25lOyAqL1xuLyogICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmOyAqL1xuLyogfSAqL1xuXG4vKiBwYXRoLmxpbmsubGluazIgeyAqL1xuLyogICAgIGFsbDogaW5pdGlhbDsgKi9cbi8qICAgICBmaWxsOiB1bnNldDsgKi9cbi8qICAgICBzdHJva2U6IHVuc2V0OyAqL1xuLyogICAgIHN0cm9rZS1vcGFjaXR5OiB1bnNldDsgKi9cbi8qICAgICBzdHJva2Utd2lkdGg6IHVuc2V0OyAqL1xuLyogfSAqL1xuXG4vKiAubGluazpob3ZlciB7ICovXG4vKiAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7ICovXG4vKiB9ICovXG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgc3R5bGU9XCJoZWlnaHQ6IDcwdmg7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwIG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTZyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2hvc3RzJykgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIiBhY3RpdmVfaG9zdHNfdHlwZSBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIiBzYW5rZXlfZm9ybWF0X2xpc3QgXCIgQHNlbGVjdF9vcHRpb249XCIgdXBkYXRlX3NhbmtleSBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbS0xXCIgdGFiaW5kZXg9XCIwXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cIiByZWxvYWQgXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2Fua2V5IHJlZj1cInNhbmtleV9jaGFydFwiIEBub2RlX2NsaWNrPVwiIG9uX25vZGVfY2xpY2sgXCIgOnNhbmtleV9kYXRhPVwic2Fua2V5X2RhdGFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2Fua2V5PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNhbmtleSB9IGZyb20gXCIuL3NhbmtleS52dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaXNfbG9jYWw6IEJvb2xlYW5cbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaG9zdC9mbG93cy9kYXRhLmx1YWA7XG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbClcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBzYW5rZXlfZm9ybWF0X2xpc3QgPSBbXG4gICAgeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDMsIGlkOiAnbG9jYWxfb3JpZ2luX3JlbW90ZV90YXJnZXQnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfY2xpX3JlbW90ZV9zcnYnKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX2NsaV9yZW1vdGVfc3J2JyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9LFxuICAgIHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiA0LCBpZDogJ3JlbW90ZV9vcmlnaW5fbG9jYWxfdGFyZ2V0JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX3Nydl9yZW1vdGVfY2xpJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9zcnZfcmVtb3RlX2NsaScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSxcbiAgICB7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogNSwgaWQ6ICdhbGxfaG9zdHMnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UuYWxsX2Zsb3dzJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5hbGxfZmxvd3MnKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0sXG5dO1xuXG5pZiAocHJvcHMuaXNfbG9jYWwpIHtcbiAgICBzYW5rZXlfZm9ybWF0X2xpc3QudW5zaGlmdCh7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMSwgaWQ6ICdsb2NhbF9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0pXG59IGVsc2Uge1xuICAgIHNhbmtleV9mb3JtYXRfbGlzdC51bnNoaWZ0KHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiAyLCBpZDogJ3JlbW90ZV9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLnJlbW90ZV9vbmx5JyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5yZW1vdGVfb25seScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSlcbn1cblxuY29uc3QgYWN0aXZlX2hvc3RzX3R5cGUgPSByZWYoc2Fua2V5X2Zvcm1hdF9saXN0WzNdKTtcblxuY29uc3Qgc2Fua2V5X2RhdGEgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHsgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgdXBkYXRlX3NhbmtleSgpO1xufSk7XG5cbmZ1bmN0aW9uIG9uX25vZGVfY2xpY2sobm9kZSkge1xuICAgIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgIGxldCB1cmxfb2JqID0ge1xuICAgICAgICBob3N0OiBub2RlLmluZm8uaXAsXG4gICAgICAgIHZsYW46IG5vZGUuaW5mby52bGFuLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX29iaik7XG4gICAgY29uc3QgaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChob3N0X3VybCk7XG4gICAgLy9ob3N0PScgLi4gZmxvd1tcImNsaS5pcFwiXSAuLiAnJnZsYW49JyAuLiBmbG93W1widmxhblwiXVxufVxuXG5jb25zdCB1cGRhdGVfc2Fua2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBlbnRyeSA9IGFjdGl2ZV9ob3N0c190eXBlLnZhbHVlO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChlbnRyeS5maWx0ZXJfbmFtZSwgZW50cnkuaWQpO1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpO1xuICAgIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbiAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbi8qXG5mdW5jdGlvbiBhZGRfZmFrZV9jaXJjdWxhcl9saW5rKGdyYXBoKSB7XG4gICAgY29uc3Qgbm9kZV9pZF8wID0gXCJub2RlX2lkXzBcIiwgbm9kZV9pZF8xID0gXCJub2RlX2lkXzFcIjtcbiAgICBncmFwaC5ub2Rlcy5wdXNoKHsgbm9kZV9pZDogbm9kZV9pZF8wLCBsYWJlbDogbm9kZV9pZF8wIH0pO1xuICAgIGdyYXBoLm5vZGVzLnB1c2goeyBub2RlX2lkOiBub2RlX2lkXzEsIGxhYmVsOiBub2RlX2lkXzEgfSk7XG4gICAgZ3JhcGgubGlua3MucHVzaCh7IHNvdXJjZV9ub2RlX2lkOiBub2RlX2lkXzAsIHRhcmdldF9ub2RlX2lkOiBub2RlX2lkXzEsIHZhbHVlOiAxMCwgbGFiZWw6IGAke25vZGVfaWRfMH1fJHtub2RlX2lkXzF9YCB9KTtcbiAgICBncmFwaC5saW5rcy5wdXNoKHsgc291cmNlX25vZGVfaWQ6IG5vZGVfaWRfMSwgdGFyZ2V0X25vZGVfaWQ6IG5vZGVfaWRfMCwgdmFsdWU6IDEwLCBsYWJlbDogYCR7bm9kZV9pZF8xfV8ke25vZGVfaWRfMH1gIH0pO1xufVxuKi9cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybF9yZXF1ZXN0ID0gZ2V0X3NhbmtleV91cmwoKTtcbiAgICAvLyBsZXQgZ3JhcGggPSBhd2FpdCBzYW5rZXlVdGlscy5nZXRfZGF0YSgpO1xuICAgIGxldCBncmFwaCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgLy8gYWRkX2Zha2VfY2lyY3VsYXJfbGluayhncmFwaCk7XG4gICAgZ3JhcGggPSBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKTtcbiAgICBsZXQgbWFpbl9ub2RlX2lkID0gZ2V0X21haW5fbm9kZV9pZCgpO1xuICAgIGxldCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCwgbWFpbl9ub2RlX2lkKTtcbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/XG4gICAgICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKGZhbHNlKSA6XG4gICAgICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKHRydWUpO1xuICAgIC8vIHNhbmtleV9kYXRhID0gbWFrZV9kYWdfZ3JhcGgoc2Fua2V5X2RhdGEpO1xuICAgIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV91cmwoKSB7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaG9zdDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpLFxuICAgICAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIiksXG4gICAgICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcbiAgICAgICAgaG9zdHNfdHlwZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0c190eXBlXCIpLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHt1cmx9PyR7dXJsX3BhcmFtc31gO1xuICAgIHJldHVybiB1cmxfcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gZ2V0X21haW5fbm9kZV9pZCgpIHtcbiAgICByZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpO1xufVxuXG5mdW5jdGlvbiBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgsIG1haW5fbm9kZV9pZCkge1xuICAgIGlmIChncmFwaC5ub2Rlcy5sZW5ndGggPT0gMCAmJiBncmFwaC5saW5rcy5sZW5ndGggPT0gMCkgeyByZXR1cm4gZ3JhcGg7IH1cbiAgICBsZXQgbm9kZV9kaWN0ID0ge307XG4gICAgLy8gY3JlYXRlIGEgbm9kZSBkaWN0XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gbm9kZV9kaWN0W25vZGUubm9kZV9pZF0gPSBub2RlKTtcblxuICAgIC8vZ2V0IGxpbmsgZGlyZWN0aW9uIFxuICAgIGNvbnN0IGZfZ2V0X2xpbmtfZGlyZWN0aW9uID0gKGxpbmspID0+IHtcbiAgICAgICAgaWYgKGxpbmsuc291cmNlX25vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAobGluay50YXJnZXRfbm9kZV9pZCA9PSBtYWluX25vZGVfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGBXcm9uZyBkaXJlY3Rpb24gbGluayAke2xpbmsuc291cmNlX25vZGVfaWR9IC0+ICR7bGluay50YXJnZXRfbm9kZV9pZH1gO1xuICAgIH07XG5cbiAgICAvLyBnZXQgbm9kZSBpZCB3aXRoIGRpcmVjdGlvblxuICAgIGNvbnN0IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkID0gKG5vZGVfaWQsIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICBpZiAobm9kZV9pZCA9PSBtYWluX25vZGVfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlX2lkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtkaXJlY3Rpb259XyR7bm9kZV9pZH1gO1xuICAgIH07XG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgZ3JhcGggZHVwbGljYXRpbmcgYWxsIG5vZGVzIHdpdGggZGlmZmVyZW50IGRpcmVjdGlvblxuICAgIGxldCBncmFwaDJfbm9kZV9kaWN0ID0ge307XG4gICAgbGV0IGdyYXBoMiA9IHsgbm9kZXM6IFtdLCBsaW5rczogW10gfTtcbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgIGxldCBkaXJlY3Rpb24gPSBmX2dldF9saW5rX2RpcmVjdGlvbihsaW5rKTtcbiAgICAgICAgbGV0IG5ld19saW5rID0ge1xuICAgICAgICAgICAgc291cmNlX25vZGVfaWQ6IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkKGxpbmsuc291cmNlX25vZGVfaWQsIGRpcmVjdGlvbiksXG4gICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQobGluay50YXJnZXRfbm9kZV9pZCwgZGlyZWN0aW9uKSxcbiAgICAgICAgICAgIGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgICAgICAgICAgdmFsdWU6IGxpbmsudmFsdWUsXG4gICAgICAgICAgICBkYXRhOiBsaW5rLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgbmV3X25vZGU7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBuID0gbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdO1xuICAgICAgICAgICAgbmV3X25vZGUgPSB7IG5vZGVfaWQ6IG5ld19saW5rLnRhcmdldF9ub2RlX2lkLCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG4gPSBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgICAgICBuZXdfbm9kZSA9IHsgbm9kZV9pZDogbmV3X2xpbmsuc291cmNlX25vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuIH07XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGgyLmxpbmtzLnB1c2gobmV3X2xpbmspO1xuICAgICAgICBpZiAoZ3JhcGgyX25vZGVfZGljdFtuZXdfbm9kZS5ub2RlX2lkXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBncmFwaDJfbm9kZV9kaWN0W25ld19ub2RlLm5vZGVfaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGdyYXBoMi5ub2Rlcy5wdXNoKG5ld19ub2RlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBtYWluX25vZGUgPSBub2RlX2RpY3RbbWFpbl9ub2RlX2lkXTtcbiAgICBncmFwaDIubm9kZXMucHVzaCh7IG5vZGVfaWQ6IG1haW5fbm9kZS5ub2RlX2lkLCBsYWJlbDogbWFpbl9ub2RlLmxhYmVsLCBkYXRhOiBtYWluX25vZGUgfSk7XG5cbiAgICAvLyB1cGRhdGUgbm9kZSBkaWN0XG4gICAgZ3JhcGgyLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGVfZGljdFtub2RlLm5vZGVfaWRdID0gbm9kZSk7XG5cbiAgICAvLyByZXR1cm4gdGhlIGxpbmsgbm9kZV9pZCBcbiAgICBjb25zdCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuICAgICAgICBsZXQgZGlyZWN0aW9uID0gZl9nZXRfbGlua19kaXJlY3Rpb24obGluayk7XG4gICAgICAgIHJldHVybiBgJHtkaXJlY3Rpb259XyR7bGluay5sYWJlbH1gO1xuICAgICAgICAvLyByZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG5cbiAgICBsZXQgbGlua190b19ub2Rlc19kaWN0ID0ge307IC8vIGtleTogbGluayBub2RlIGlkLCB2YWx1ZTogbGlua3NcbiAgICAvLyBtZXJnZSBhbGwgbGlua3MgYnkgbGluayBub2RlX2lkXG4gICAgZ3JhcGgyLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgICAgbGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcbiAgICAgICAgbGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcbiAgICAgICAgaWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgbGlua190b19ub2RlcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogbGlua19ub2RlX2lkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgLi4ubGluaywgaXNfbGlua19ub2RlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgbm9kZV9saW5rczogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF0gPSBsaW5rX3RvX25vZGVzO1xuICAgICAgICB9XG4gICAgICAgIGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5wdXNoKHtcbiAgICAgICAgICAgIHNvdXJjZTogbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdLFxuICAgICAgICAgICAgdGFyZ2V0OiBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF0sXG4gICAgICAgICAgICB2YWx1ZTogZ2V0X2xpbmtfdmFsdWUobGluayksXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gY3JlYXRlIG5vZGVzIGFuZCBsaW5rcyBncmFwaCwgY3JlYXRpbmcgYSBuZXcgbm9kZSBmb3IgZWFjaCBsaW5rXG4gICAgbGV0IG5vZGVzID0gZ3JhcGgyLm5vZGVzLm1hcCgobikgPT4gbiksIGxpbmtzID0gW107XG4gICAgZm9yIChsZXQgbGlua19ub2RlX2lkIGluIGxpbmtfdG9fbm9kZXNfZGljdCkge1xuICAgICAgICBsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuICAgICAgICBsZXQgbGlua19ub2RlID0ge1xuICAgICAgICAgICAgbm9kZV9pZDogbGlua190b19ub2Rlcy5pZCxcbiAgICAgICAgICAgIGxhYmVsOiBsaW5rX3RvX25vZGVzLmxhYmVsLFxuICAgICAgICAgICAgZGF0YTogbGlua190b19ub2Rlcy5kYXRhLFxuICAgICAgICB9O1xuICAgICAgICBub2Rlcy5wdXNoKGxpbmtfbm9kZSk7XG4gICAgICAgIGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2Vfbm9kZV9pZDogbGluay5zb3VyY2Uubm9kZV9pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcbiAgICAgICAgICAgICAgICBsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGxpbmsudmFsdWUsXG4gICAgICAgICAgICAgICAgZGF0YTogbGluayxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgc2Fua2V5X25vZGVfZGljdCA9IHt9OyAvLyBrZXk6IG5vZGVfaWQsIHZhbHVlOiBzYW5rZXlfbm9kZVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBbXTtcbiAgICBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBzYW5rZXlfbm9kZSA9IHsgaW5kZXgsIG5vZGVfaWQ6IG4ubm9kZV9pZCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4uZGF0YSB9O1xuICAgICAgICBzYW5rZXlfbm9kZV9kaWN0W24ubm9kZV9pZF0gPSBzYW5rZXlfbm9kZTtcbiAgICAgICAgc2Fua2V5X25vZGVzLnB1c2goc2Fua2V5X25vZGUpO1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbGlua3MgPSBsaW5rcy5tYXAoKGwpID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZSA9IHNhbmtleV9ub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgIGxldCB0YXJnZXQgPSBzYW5rZXlfbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UuaW5kZXgsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldC5pbmRleCxcbiAgICAgICAgICAgIHNvdXJjZV9ub2RlX2lkOiBzb3VyY2UuaW5kZXgsXG4gICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogdGFyZ2V0LmluZGV4LFxuICAgICAgICAgICAgdmFsdWU6IGwudmFsdWUsXG4gICAgICAgICAgICBsYWJlbDogbC5sYWJlbCxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBub2Rlczogc2Fua2V5X25vZGVzLCBsaW5rczogc2Fua2V5X2xpbmtzIH07XG59XG5cbi8vIHJlbW92ZSBhbGwgbGlua3Mgd2l0aCBhIG5vdCBleGlzdGluZyBub2RlXG5mdW5jdGlvbiBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIG5vdCBleGlzdGluZyBzb3VyY2UvdGFyZ2V0IG5vZGVgKTtcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbi8vIHJlbWVvdmUgYWxsIGNpcmN1bGFyIGxpbmtzIGFuZCByZXR1cm4gYSBkYWcgZ3JhcGhcbmZ1bmN0aW9uIG1ha2VfZGFnX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IG5vZGVzX2Rlc3RfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHsgW25vZGVfc291cmNlX2lkXTogbm9kZXNfdGFyZ2V0W10gfVxuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcbiAgICAgICAgbGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgIGlmIChub2Rlc19kZXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGVzX2Rlc3QgPSBbXTtcbiAgICAgICAgICAgIG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IG5vZGVzX2Rlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZXNfZGVzdC5wdXNoKGwudGFyZ2V0X25vZGVfaWQpO1xuICAgIH0pO1xuICAgIGxldCBub2Rlc190b19jaGVjayA9IHt9OyAvLyB0ZW1wIGRpY3Rpb25hcnkgdXNlZCBmcm9tIGZfYWRkX2NpcmN1bGFyX2xpbmsgXG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICBub2Rlc190b19jaGVja1tuLm5vZGVfaWRdID0geyBjaGVja2VkOiBmYWxzZSwgdmlzaXRlZDogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIC8vIGNpcmN1bGFyIGxpbmtzIGRpY3QgKGtleTogYCR7c291cmNlX25vZGVfaWR9XyR7dGFyZ2V0X25vZGVfaWR9YClcbiAgICBsZXQgY2lyY3VsYXJfbGlua3MgPSB7fTtcbiAgICBsZXQgZl9nZXRfbGlua19rZXkgPSAoc291cmNlX2lkLCB0YXJnZXRfaWQpID0+IGAke3NvdXJjZV9pZH1fJHt0YXJnZXRfaWR9YDtcblxuICAgIC8vIGRlZXAgbmF2aWdhdGUgc3RhcnRpbmcgZnJvbSBub2RlX2lkIGFuZCBhZGQgY2lyY3VsYXJfbGlua3MgdmlzaXRlZCBpbiBjaXJjdWxhcl9saW5rcyBkaWN0IFxuICAgIGxldCBmX3NldF9jaXJjdWxhcl9saW5rcyA9IChub2RlX2lkLCBmcm9tX25vZGVfaWQpID0+IHtcbiAgICAgICAgbGV0IG5vZGVfdG9fY2hlY2sgPSBub2Rlc190b19jaGVja1tub2RlX2lkXTtcbiAgICAgICAgaWYgKG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgICAgICBlbHNlIGlmIChub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkoZnJvbV9ub2RlX2lkLCBub2RlX2lkKTtcbiAgICAgICAgICAgIGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBMaW5rIChzb3VyY2U6ICR7ZnJvbV9ub2RlX2lkfSwgdGFyZ2V0OiAke25vZGVfaWR9ICkgaXMgYSBjaXJjdWxhciBsaW5rYCk7XG4gICAgICAgICAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSB0cnVlO1xuICAgICAgICBsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtub2RlX2lkXTtcbiAgICAgICAgaWYgKG5vZGVzX2Rlc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc19kZXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldF9ub2RlX2lkID0gbm9kZXNfZGVzdFtpXTtcbiAgICAgICAgICAgICAgICBmX3NldF9jaXJjdWxhcl9saW5rcyh0YXJnZXRfbm9kZV9pZCwgbm9kZV9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG4gICAgICAgIG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvLyBzZXQgY2lyY3VsYXJfbGlua3MgZGljdGlvbmFyeVxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IGZfc2V0X2NpcmN1bGFyX2xpbmtzKG4ubm9kZV9pZCkpO1xuXG4gICAgLy8gcmVtb3ZlIG5vIGRhZyBub2Rlcy9saW5rc1xuICAgIGxldCBmX2ZpbHRlcl9saW5rID0gKGwpID0+IHtcbiAgICAgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkobC5zb3VyY2Vfbm9kZV9pZCwgbC50YXJnZXRfbm9kZV9pZCk7XG4gICAgICAgIGxldCB0YWtlX2xpbmsgPSBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPT0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRha2VfbGluaztcbiAgICB9O1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyX2xpbmssIGZfbG9nX2xpbmspO1xuXG4gICAgbGV0IGZfbG9nX25vZGUgPSAobikgPT4gY29uc29sZS5lcnJvcihgbm9kZSAke24ubm9kZV9pZH0gcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbm9kZXMgPSBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9LCBmX2xvZ19ub2RlKTtcblxuICAgIC8vIHJldHVybiBhIGRhZyBncmFwaFxuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBub2RlX2RpY3Rbbi5ub2RlX2lkXSA9IHRydWUpO1xuICAgIGxldCBmX2ZpbHRlciA9IChsKSA9PiBub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gIT0gbnVsbCAmJiBub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gIT0gbnVsbDtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuICAgICAgICBsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcbiAgICAgICAgbGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuICAgICAgICBpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZfbG9nKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rX3ZhbHVlKGxpbmspIHtcbiAgICByZXR1cm4gbGluay5kYXRhPy5pbmZvPy50cmFmZmljO1xufVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIi8qXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbiAqL1xuXG4vKlxuICBIZXJlIGEgbGlzdCBvZiBmdW5jdGlvbnMgdXNlZCB0byBjaGVjaywgZm9ybWF0IGRhdGE7XG4gIGUuZy4gZnVuY3Rpb25zIHRoYXQgY2hlY2sgaWYgYSBzdHJpbmcgaXMgbnVsbCBvciBlbXB0eVxuICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gY2hlY2sgaWYgdmFsdWUgaXMgbnVsbCwgZW1wdHkgb3IgMCAqL1xuY29uc3QgaXNFbXB0eU9yTnVsbCA9ICh2YWx1ZSkgPT4ge1xuICByZXR1cm4gISEodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSBcIlwiIHx8IHZhbHVlID09IDApO1xufVxuXG4vKiBUaGlzIGZ1bmN0aW9uIGNoZWNrIGlmIHZhbHVlIGlzIG51bGwsIG9yIGFuIGVtcHR5IGFycmF5ICovXG5jb25zdCBpc0VtcHR5QXJyYXlPck51bGwgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuICEhKHZhbHVlID09IG51bGwgfHwgdmFsdWUubGVuZ3RoID09PSAwKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZGF0YVV0aWxzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGlzRW1wdHlPck51bGwsXG4gICAgaXNFbXB0eUFycmF5T3JOdWxsLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhVXRpbHM7XG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG5cbiAgICA8ZGl2IHYtaWY9XCJpbnZhbGlkX2FkZFwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm8gbWUtMVwiPjwvc3Bhbj4gXG4gICAgICAgICAgICA8c3Bhbj4ge3sgX2kxOG4oJ3J1bGVfYWxyZWFkeV9wcmVzZW50JykgfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cbiAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5hZGRfcnVsZXNfdHlwZVwiKSB9fTwvYj5cbiAgPC9sYWJlbD5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG5cdCAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmNsYXNzPVwiW3J1bGVfdHlwZSA9PSAnSG9zdCc/J2J0bi1wcmltYXJ5IGFjdGl2ZSc6J2J0bi1zZWNvbmRhcnknXVwiPlxuXHQgICAgICA8aW5wdXQgIGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiaG9zdHNcIiBAY2xpY2s9XCJzZXRfcnVsZV90eXBlKCdIb3N0JylcIj4ge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfaG9zdFwiKSB9fVxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICdpbnRlcmZhY2UnPydidG4tcHJpbWFyeSBhY3RpdmUnOididG4tc2Vjb25kYXJ5J11cIj5cblx0ICAgICAgPGlucHV0IEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ2ludGVyZmFjZScpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiAgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiaW50ZXJmYWNlXCI+IHt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlX2ludGVyZmFjZVwiKSB9fVxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCB2LWlmPVwiZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUgPT0gdHJ1ZVwiIGNsYXNzPVwiYnRuIFwiIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJz8nYnRuLXByaW1hcnkgYWN0aXZlJzonYnRuLXNlY29uZGFyeSddXCI+XG5cdCAgICAgIDxpbnB1dCBAY2xpY2s9XCJzZXRfcnVsZV90eXBlKCdleHBvcnRlcicpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiAgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiZXhwb3J0ZXJcIj4ge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfZmxvd19leHBvcnRlclwiKSB9fVxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxsYWJlbCB2LWlmPVwiaGFzX2hvc3RfcG9vbHMgPT0gdHJ1ZVwiIGNsYXNzPVwiYnRuIFwiIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCc/J2J0bi1wcmltYXJ5IGFjdGl2ZSc6J2J0bi1zZWNvbmRhcnknXVwiPlxuXHQgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgnaG9zdF9wb29sJylcIiBjbGFzcz1cImJ0bi1jaGVja1wiICB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCIgdmFsdWU9XCJob3N0X3Bvb2xcIj4ge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfaG9zdF9wb29sXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPGxhYmVsIHYtaWY9XCJoYXNfY2lkciA9PSB0cnVlXCIgY2xhc3M9XCJidG4gXCIgOmNsYXNzPVwiW3J1bGVfdHlwZSA9PSAnQ0lEUic/J2J0bi1wcmltYXJ5IGFjdGl2ZSc6J2J0bi1zZWNvbmRhcnknXVwiPlxuXHQgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgnQ0lEUicpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiAgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiQ0lEUlwiPiB7eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5hZGRfcnVsZXNfdHlwZV9jaWRyXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ0hvc3QnXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiID5cblx0ICAgICAgPGlucHV0IHYtbW9kZWw9XCJob3N0XCIgIEBpbnB1dD1cImNoZWNrX2VtcHR5X2hvc3RcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnBsYWNlaG9sZGVyPVwiaG9zdF9wbGFjZWhvbGRlclwiIHJlcXVpcmVkPlxuXHQgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ0NJRFInXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCIgPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX25ldHdvcmtcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwibmV0d29ya19saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD4gXG4gICAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cblx0ICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIiA+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfaG9zdF9wb29sXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImhvc3RfcG9vbF9saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD4gXG4gICAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdpbnRlcmZhY2UnXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0X2ludGVyZmFjZVwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgXG4gICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9pZmlkXCJcbiAgICAgICAgICAgICAgOm9wdGlvbnM9XCJpZmlkX2xpc3RcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+IFxuICAgICAgPC9kaXY+IFxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdleHBvcnRlcicgJiYgZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUgPT0gdHJ1ZVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldF9leHBvcnRlcl9kZXZpY2VcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgIFxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlXCJcbiAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmbG93X2V4cG9ydGVyX2RldmljZXNcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+IFxuICAgICAgPC9kaXY+IFxuXG5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldF9leHBvcnRlcl9kZXZpY2VfaWZpZFwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgXG4gICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZFwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwiZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0XCI+XG4gICAgICAgIDwvU2VsZWN0U2VhcmNoPiBcbiAgICAgIDwvZGl2PiBcbiAgICA8L2Rpdj5cblxuXG4gICAgPCEtLSBNZXRyaWMgaW5mb3JtYXRpb24sIGhlcmUgYSBtZXRyaWMgaXMgc2VsZWN0ZWQgKGUuZy4gRE5TIHRyYWZmaWMpIC0tPlxuICAgIDxkaXYgdi1pZj1cIm1ldHJpY3NfcmVhZHkgJiYgcnVsZV90eXBlICE9ICdleHBvcnRlcidcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInJ1bGVfdHlwZSA9PSAnSG9zdCdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfdGhyZXNob2xkKClcIlxuICAgICAgICAgICAgOm9wdGlvbnM9XCJtZXRyaWNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwicnVsZV90eXBlID09ICdpbnRlcmZhY2UnXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpY1wiXG4gICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9pbnRlcmZhY2VfdGhyZXNob2xkKClcIlxuICAgICAgICAgICAgOm9wdGlvbnM9XCJpbnRlcmZhY2VfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cInJ1bGVfdHlwZSA9PSAnZXhwb3J0ZXInXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwiZmxvd19kZXZpY2VfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cInJ1bGVfdHlwZSA9PSAnaG9zdF9wb29sJ1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKVwiXG4gICAgICAgICAgICA6b3B0aW9ucz1cImhvc3RfcG9vbF9tZXRyaWNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJydWxlX3R5cGUgPT0gJ0NJRFInXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbmV0d29ya19tZXRyaWNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKVwiXG5cbiAgICAgICAgICAgIDpvcHRpb25zPVwibmV0d29ya19tZXRyaWNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIEZyZXF1ZW5jeSBpbmZvcm1hdGlvbiwgYSBmcmVxdWVuY3kgb2YgMSBkYXksIDUgbWludXRlIG9yIDEgaG91ciBmb3IgZXhhbXBsZSAtLT5cbiAgICA8ZGl2IHYtaWY9XCJtZXRyaWNzX3JlYWR5XCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcuZnJlcXVlbmN5XCIpfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZnJlcXVlbmN5XCJcbiAgICAgICAgICA6b3B0aW9ucz1cImZyZXF1ZW5jeV9saXN0XCI+XG5cdFx0XHQgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIFRocmVzaG9sZCBpbmZvcm1hdGlvbiwgbWF4aW11bSBhbW91bnQgb2YgYnl0ZXMgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCIgc3R5bGU9XCJtYXJnaW4tdG9wOjNweFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ2aXNpYmxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJtZXRyaWNfdHlwZVwiXG4gICAgICAgICAgICA6b3B0aW9ucz1cImFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+ICBcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtM1wiIDpjbGFzcz1cIlsgbWV0cmljX3R5cGUuaWQgPT0gJ3Rocm91Z2hwdXQnID8gJ3AtMCcgOiAnJ11cIiA+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCdcIiB2LWZvcj1cIm1lYXN1cmUgaW4gdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdFwiID5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIiB2LWZvcj1cIm1lYXN1cmUgaW4gcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdFwiPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd2b2x1bWUnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHZvbHVtZV90aHJlc2hvbGRfbGlzdFwiID5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJtZWFzdXJlIGluIHNpZ25fdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9zaWduXCIgbmFtZT1cInRocmVzaG9sZF9zaWduXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfc2lnbl9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8ZGl2IDpjbGFzcz1cIlt2aXNpYmxlID8gJ2NvbC1zbS0yJyA6ICdjb2wtc20tOCddXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCI+XG4gICAgICAgICAgPGlucHV0IHZhbHVlPVwiMVwiIHJlZj1cInRocmVzaG9sZFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidGhyZXNob2xkXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBtYXg9XCIxMDBcIiBtaW49XCIxXCIgcmVxdWlyZWQ+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+IFxuICAgICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAyM1wiIG1pbj1cIjFcIiByZXF1aXJlZD5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UgYWxlcnQgYWxlcnQtd2FybmluZyBtdC0zXCI+XG4gICAgICAgICAge3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5ob3N0X3J1bGVzX3BlcmNlbnRhZ2VcIikgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8Tm90ZUxpc3RcbiAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgPC9Ob3RlTGlzdD5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiICA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZCAmJiBydWxlX3R5cGUgPT0gJ0hvc3QnXCI+e3tfaTE4bignYWRkJyl9fTwvYnV0dG9uPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkICYmIHJ1bGVfdHlwZSA9PSAnSG9zdCdcIj57e19pMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgZGF0YVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YS11dGlsc1wiXG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cblxubGV0IGhhc19ob3N0X3Bvb2xzID0gcmVmKGZhbHNlKTtcbmxldCBoYXNfY2lkciA9IHJlZihmYWxzZSk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCcsJ2VkaXQnXSk7XG5sZXQgdGl0bGUgPSBpMThuKCdpZl9zdGF0c19jb25maWcuYWRkX2hvc3RfcnVsZXNfdGl0bGUnKTtcbmNvbnN0IGhvc3RfcGxhY2Vob2xkZXIgPSBpMThuKCdpZl9zdGF0c19jb25maWcuaG9zdF9wbGFjZWhvbGRlcicpXG5cbmNvbnN0IG1ldHJpY3NfcmVhZHkgPSByZWYoZmFsc2UpXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbWV0cmljX2xpc3QgPSByZWYoW10pXG5jb25zdCBpbml0X2Z1bmMgPSByZWYobnVsbCk7XG5jb25zdCBkZWxldGVfcm93ID0gcmVmKG51bGwpO1xuY29uc3QgaWZpZF9saXN0ID0gcmVmKFtdKVxuY29uc3QgZmxvd19leHBvcnRlcl9kZXZpY2VzID0gcmVmKFtdKVxuY29uc3QgZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0ID0gcmVmKFtdKVxuY29uc3QgaW50ZXJmYWNlX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgaG9zdF9wb29sX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgZmxvd19kZXZpY2VfbWV0cmljX2xpc3QgPSByZWYoW10pXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IHJlZihbXSlcbmNvbnN0IHRocmVzaG9sZF9tZWFzdXJlID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGRfc2lnbiA9IHJlZihudWxsKVxuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfZnJlcXVlbmN5ID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfaWZpZCA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZSA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBkaXNhYmxlX2FkZCA9IHJlZih0cnVlKVxuY29uc3QgbWV0cmljX3R5cGUgPSByZWYoe30pXG5jb25zdCB2aXNpYmxlID0gcmVmKHRydWUpXG5jb25zdCBydWxlX3R5cGUgPSByZWYoXCJob3N0c1wiKTtcbmNvbnN0IGZsb3dfZGV2aWNlX3RpbWVzZXJpZXNfYXZhaWxhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSlcbmNvbnN0IHBhZ2VfY3NyZl8gPSByZWYobnVsbCk7XG5jb25zdCByb3dfdG9fZWRpdF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGludmFsaWRfYWRkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGhvc3RfcG9vbF9saXN0ID0gcmVmKG51bGwpO1xuY29uc3QgbmV0d29ya19saXN0ID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfaG9zdF9wb29sID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX25ldHdvcmsgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMgPSByZWYoe30pO1xuY29uc3QgbmV0d29ya19tZXRyaWNfbGlzdCA9IHJlZihudWxsKTtcbmxldCBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXSk7XG5cblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMScpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMicpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMycpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNCcpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNScpXG5dXG5cbmNvbnN0IG1ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlIH0sXG5dKVxuXG5jb25zdCBwb29sX21ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlLCBtZWFzdXJlX3VuaXQ6ICdicHMnICB9LFxuICB7IHRpdGxlOiBfaTE4bigndGhyb3VnaHB1dCcpLCBsYWJlbDogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgaWQ6ICd0aHJvdWdocHV0JywgYWN0aXZlOiBmYWxzZSwgbWVhc3VyZV91bml0OiAnYnBzJyB9LFxuICB7IHRpdGxlOiBfaTE4bigncGVyY2VudGFnZScpLCBsYWJlbDogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgaWQ6ICdwZXJjZW50YWdlJywgYWN0aXZlOiBmYWxzZSwgbWVhc3VyZV91bml0OiAnbnVtYmVyJyB9LFxuICB7IHRpdGxlOiBfaTE4bigndmFsdWUnKSwgbGFiZWw6IF9pMThuKCd2YWx1ZScpLCBpZDogJ3ZhbHVlJywgYWN0aXZlOiBmYWxzZSwgbWVhc3VyZV91bml0OiAnbnVtYmVyJyB9XG5dKVxuXG5jb25zdCB2b2x1bWVfdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigna2InKSwgbGFiZWw6IF9pMThuKCdrYicpLCBpZDogJ2tiJywgdmFsdWU6IDEwMjQsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ21iJyksIGxhYmVsOiBfaTE4bignbWInKSwgaWQ6ICdtYicsIHZhbHVlOiAxMDQ4NTc2LCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdnYicpLCBsYWJlbDogX2kxOG4oJ2diJyksIGlkOiAnZ2InLCB2YWx1ZTogMTA3Mzc0MTgyNCwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZX0sXG5dKTtcblxuY29uc3QgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdrYnBzJyksIGxhYmVsOiBfaTE4bigna2JwcycpLCBpZDogJ2ticHMnLCB2YWx1ZTogMTAwMCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWJwcycpLCBsYWJlbDogX2kxOG4oJ21icHMnKSwgaWQ6ICdtYnBzJywgdmFsdWU6IDEwMDAwMDAsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2dicHMnKSwgbGFiZWw6IF9pMThuKCdnYnBzJyksIGlkOiAnZ2JwcycsIHZhbHVlOiAxMDAwMDAwMDAwLCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlfSxcbl0pO1xuXG5jb25zdCBzaWduX3RocmVzaG9sZF9saXN0ID0gcmVmKFtcbiAgeyB0aXRsZTogXCIrXCIsIGxhYmVsOiBcIj5cIiwgaWQ6ICdwbHVzJywgdmFsdWU6IDEsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogXCItXCIsIGxhYmVsOiBcIjxcIiwgaWQ6ICdtaW51cycsIHZhbHVlOiAtMSwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3QgPSBbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCIlXCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IHRydWUgfSxcbl1cblxuY29uc3QgaG9zdCA9IHJlZihudWxsKVxuY29uc3QgdGhyZXNob2xkID0gcmVmKG51bGwpXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgbWV0cmljX2xpc3Q6IEFycmF5LFxuICBpZmlkX2xpc3Q6IEFycmF5LFxuICBmbG93X2V4cG9ydGVyX2RldmljZXM6IEFycmF5LFxuICBpbnRlcmZhY2VfbWV0cmljX2xpc3Q6IEFycmF5LFxuICBmbG93X2RldmljZV9tZXRyaWNfbGlzdDogQXJyYXksXG4gIGZyZXF1ZW5jeV9saXN0OiBBcnJheSxcbiAgaW5pdF9mdW5jOiBGdW5jdGlvbixcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KTtcblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZlxufVxuXG5mdW5jdGlvbiByZXNldF9yYWRpb19zZWxlY3Rpb24ocmFkaW9fYXJyYXkpIHtcblxuICByYWRpb19hcnJheS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmFjdGl2ZSA9IGl0ZW0uZGVmYXVsdF9hY3RpdmUgPT0gdHJ1ZSApO1xufVxuXG4vKipcbiAqIFxuICogUmVzZXQgZmllbGRzIGluIG1vZGFsIGZvcm0gXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICBpbnZhbGlkX2FkZC52YWx1ZSA9IGZhbHNlO1xuICAgIGhvc3QudmFsdWUgPSBcIlwiO1xuICAgIHJ1bGVfdHlwZS52YWx1ZSA9IFwiSG9zdFwiO1xuICAgIHNlbGVjdGVkX2lmaWQudmFsdWUgPSBpZmlkX2xpc3QudmFsdWVbMF07XG4gICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljX2xpc3QudmFsdWVbMF07XG4gICAgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZSA9IGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgICBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWUgPSBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZVswXTtcblxuICAgIGlzX2VkaXRfcGFnZS52YWx1ZSA9IGZhbHNlO1xuICAgIHRpdGxlID0gaTE4bignaWZfc3RhdHNfY29uZmlnLmFkZF9ob3N0X3J1bGVzX3RpdGxlJyk7XG4gICAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5X2xpc3QudmFsdWVbMF07XG4gICAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuICAgIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZSA9IGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZVswXTtcbiAgICBpZiggc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJlc3RfcGFyYW1zLmNzcmYgPSBwYWdlX2NzcmZfLnZhbHVlO1xuICAgICAgY29uc3QgdXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2Uvc3RhdHMubHVhP2Arc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlLmRldGFpbHMuc3BsaXQoXCI/XCIpWzFdLCB7XG4gICAgICAgIC4uLnJlc3RfcGFyYW1zXG4gICAgICB9KVxuXG4gICAgICBsZXQgaWZpZHMgPSBbXVxuICAgICAgbGV0IGV4cG9ydGVyX2lmaWRzID0gW11cbiAgICAgIGF3YWl0ICQuZ2V0KHVybF9kZXZpY2VfZXhwb3J0ZXJfZGV0YWlscywgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgICAgICBpZmlkcyA9IHJzcC5yc3A7XG4gICAgICB9KTtcbiAgICAgIGV4cG9ydGVyX2lmaWRzLnB1c2goe2lkOiBcIipcIix2YWx1ZTpcIipcIiwgbGFiZWw6IFwiKlwiLCB0aW1lc2VyaWVzX2F2YWlsYWJsZTogaWZpZHNbMF0udGltZXNlcmllc19hdmFpbGFibGV9KVxuICAgICAgaWZpZHMuZm9yRWFjaCgocmVzcCkgPT4ge1xuICAgICAgICBleHBvcnRlcl9pZmlkcy5wdXNoKHtpZDogcmVzcC5pZmluZGV4LCBsYWJlbDogcmVzcC5uYW1lLCB0aW1lc2VyaWVzX2F2YWlsYWJsZTogcmVzcC50aW1lc2VyaWVzX2F2YWlsYWJsZX0pO1xuICAgICAgfSlcbiAgICAgIGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZSA9IGV4cG9ydGVyX2lmaWRzO1xuICAgICAgc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlX2lmaWQudmFsdWUgPSBmbG93X2V4cG9ydGVyX2RldmljZV9pZmlkX2xpc3QudmFsdWVbMV07XG5cbiAgICAgIGZsb3dfZGV2aWNlX3RpbWVzZXJpZXNfYXZhaWxhYmxlLnZhbHVlID0gZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0LnZhbHVlWzBdLnRpbWVzZXJpZXNfYXZhaWxhYmxlO1xuXG4gICAgfVxuICAgIFxuICAgIC8vIHJlc2V0IG1ldHJpY190eXBlX2xpc3RcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHQuYWN0aXZlID0gZmFsc2UpO1xuICAgIG1ldHJpY190eXBlX2xpc3QudmFsdWVbMF0uYWN0aXZlID0gdHJ1ZTtcblxuICAgIGlmIChob3N0X3Bvb2xfbGlzdC52YWx1ZSAhPSBudWxsKVxuICAgICAgc2VsZWN0ZWRfaG9zdF9wb29sLnZhbHVlID0gaG9zdF9wb29sX2xpc3QudmFsdWVbMF07XG4gICAgXG4gICAgc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZSA9IGhvc3RfcG9vbF9tZXRyaWNfbGlzdC52YWx1ZVswXTtcblxuICAgIGlmIChuZXR3b3JrX2xpc3QudmFsdWUgIT0gbnVsbClcbiAgICAgIHNlbGVjdGVkX25ldHdvcmsudmFsdWUgPSBuZXR3b3JrX2xpc3QudmFsdWVbMF07XG4gICAgaWYobmV0d29ya19tZXRyaWNfbGlzdC52YWx1ZSAhPSBudWxsKVxuICAgICAgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUgPSBuZXR3b3JrX21ldHJpY19saXN0LnZhbHVlWzBdO1xuXG5cbiAgICByZXNldF9yYWRpb19zZWxlY3Rpb24odm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlKTtcbiAgICByZXNldF9yYWRpb19zZWxlY3Rpb24odGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG4gICAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuXG4gICAgcnVsZV90eXBlLnZhbHVlID0gXCJIb3N0XCI7XG5cbiAgICBkaXNhYmxlX2FkZC52YWx1ZSA9IHRydWU7XG5cbiAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSAxO1xuXG4gICAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSBudWxsO1xuXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlO1xuXG4gICAgaWYgKHJ1bGVfdHlwZSA9PSAnSG9zdCcgfHwgcnVsZV90eXBlID09ICdpbnRlcmZhY2UnKSB7XG4gICAgICBtZXRyaWNfdHlwZS52YWxlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgICB9XG5cbn1cblxuY29uc3Qgc2V0X3J1bGVfdHlwZSA9ICh0eXBlKSA9PiB7XG4gICAgcnVsZV90eXBlLnZhbHVlID0gdHlwZTtcblxuICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZTtcblxuICAgIGlmKHR5cGUgPT0gXCJob3N0X3Bvb2xcIiB8fCB0eXBlID09IFwiQ0lEUlwiKSB7XG4gICAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKTsgICAgXG4gICAgICBcbiAgICAgIGlmICh0eXBlID09IFwiaG9zdF9wb29sXCIpXG4gICAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWVbMV07XG4gICAgICBlbHNlIFxuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuXG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuXG4gICAgfVxuXG4gICAgXG5cbn1cblxuXG5jb25zdCBjaGFuZ2VfbWV0cmljX3R5cGVfaHAgPSAoc2V0X2FjdGl2ZV9vbmUpID0+IHtcbiAgbGV0IHRtcF9tZXRyaWNfdHlwZV9saXN0ID0gW107XG4gIGlmKCAocnVsZV90eXBlLnZhbHVlID09IFwiaG9zdF9wb29sXCIgJiYgc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZS5tZWFzdXJlX3VuaXQgIT0gXCJicHNcIikgfHwgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcIkNJRFJcIiAmJiBzZWxlY3RlZF9uZXR3b3JrX21ldHJpYy52YWx1ZS5tZWFzdXJlX3VuaXQgIT0gXCJicHNcIikgKSB7XG5cbiAgICBwb29sX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbS5tZWFzdXJlX3VuaXQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgdG1wX21ldHJpY190eXBlX2xpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSB0bXBfbWV0cmljX3R5cGVfbGlzdDtcblxuICB9IGVsc2Uge1xuXG4gICAgcG9vbF9tZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0uaWQgIT0gJ3ZhbHVlJykge1xuICAgICAgICB0bXBfbWV0cmljX3R5cGVfbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSB0bXBfbWV0cmljX3R5cGVfbGlzdDtcblxuICB9XG4gIGlmKHNldF9hY3RpdmVfb25lID09IG51bGwgfHwgc2V0X2FjdGl2ZV9vbmUgPT0gZmFsc2UpIHtcbiAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuICB9XG5cbn1cblxuXG4vKipcbiAqIFxuICogU2V0IHJvdyB0byBlZGl0IFxuICovXG5jb25zdCBzZXRfcm93X3RvX2VkaXQgPSAocm93KSA9PiB7XG5cbiAgaWYocm93ICE9IG51bGwpIHtcbiAgICB0aXRsZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZWRpdF9ob3N0X3J1bGVzX3RpdGxlJyk7XG4gICAgaXNfZWRpdF9wYWdlLnZhbHVlID0gdHJ1ZTtcblxuICAgIHJvd190b19lZGl0X2lkLnZhbHVlID0gcm93LnJvd19pZDtcblxuICAgIGRpc2FibGVfYWRkLnZhbHVlID0gZmFsc2U7XG5cbiAgICAvLyBzZXQgdGhyZXNob2xkIHNpZ25cbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHQuYWN0aXZlID0gKHQudmFsdWUgPT0gcm93LnRocmVzaG9sZF9zaWduKVxuICAgIH0pXG5cbiAgICAvLyBzZXQgbWV0cmljX3R5cGVcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlO1xuXG4gICAgLy8gc2V0IHRocmVzaG9sZFxuICAgIGlmKHJvdy5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJylcbiAgICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICggKHJvdy50aHJlc2hvbGQgJSB0LnZhbHVlKSA9PSAwICkge1xuICAgICAgICAgIGxldCByb3dfdGhyZXNob2xkX3ZhbHVlID0gcm93LnRocmVzaG9sZCAvIHQudmFsdWU7XG4gICAgICAgICAgaWYoIHJvd190aHJlc2hvbGRfdmFsdWUgPCAxMDI0KSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3dfdGhyZXNob2xkX3ZhbHVlID09IDAgPyAxIDogcm93X3RocmVzaG9sZF92YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICBlbHNlXG4gICAgIGlmKHJvdy5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcbiAgICAgIC8vcm93LnRocmVzaG9sZCA9IHJvdy50aHJlc2hvbGQgKiA4O1xuICAgICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKCAocm93LnRocmVzaG9sZCAlIHQudmFsdWUpID09IDAgKSB7XG4gICAgICAgICAgICBsZXQgcm93X3RocmVzaG9sZF92YWx1ZSA9IHJvdy50aHJlc2hvbGQgLyB0LnZhbHVlO1xuICAgICAgICAgICAgaWYoIHJvd190aHJlc2hvbGRfdmFsdWUgPCAxMDAwKSB7XG4gICAgICAgICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93X3RocmVzaG9sZF92YWx1ZSA9PSAwID8gMSA6IHJvd190aHJlc2hvbGRfdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChyb3cubWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKXtcblxuICAgICAgLy9wZXJjZW50YWdlIGNhc2VcbiAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvdy50aHJlc2hvbGQ7XG4gICAgfSBlbHNlIGlmIChyb3cubWV0cmljX3R5cGUgPT0gJ3ZhbHVlJykge1xuICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93LnRocmVzaG9sZCAqIChyb3cudGhyZXNob2xkX3NpZ24pO1xuICAgIH1cblxuICAgIC8vIHNldCBydWxlX3R5cGVcbiAgICBydWxlX3R5cGUudmFsdWUgPSByb3cucnVsZV90eXBlO1xuICAgIFxuICAgIGlmKHJ1bGVfdHlwZS52YWx1ZSA9PSAnaW50ZXJmYWNlJykge1xuICAgICAgXG4gICAgICAvLyBzZXQgaWZpZFxuICAgICAgaWZpZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgaWYodC5pZCA9PSByb3cudGFyZ2V0KVxuICAgICAgICAgIHNlbGVjdGVkX2lmaWQudmFsdWUgPSB0O1xuICAgICAgfSlcbiAgICAgIFxuICAgICAgLy8gc2V0IG1ldHJpY1xuICAgICAgaWYocm93LmV4dHJhX21ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYodC5pZCA9PSByb3cubWV0cmljICYmIHQuZXh0cmFfbWV0cmljID09IHJvdy5leHRyYV9tZXRyaWMpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW50ZXJmYWNlX21ldHJpY19saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICBpZih0LmlkID09IHJvdy5tZXRyaWMpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnZXhwb3J0ZXInKXtcbiAgICAgIGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmKGl0ZW0uaWQgPT0gcm93LnRhcmdldClcbiAgICAgICAgICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgPSBpdGVtXG4gICAgICB9KVxuICAgICAgZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYoaXRlbS5pZCA9PSByb3cuZmxvd19leHBfaWZpZClcbiAgICAgICAgICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZC52YWx1ZSA9IGl0ZW1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ0hvc3QnKXtcblxuICAgICAgLy9zZXQgaG9zdFxuICAgICAgaG9zdC52YWx1ZSA9IHJvdy50YXJnZXQ7XG4gICAgICBcbiAgICAgIC8vc2V0IG1ldHJpY1xuICAgICAgaWYocm93LmV4dHJhX21ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIFxuICAgICAgICBtZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYocm93Lm1ldHJpYy5jb250YWlucyh0LmlkKSAmJiB0LmV4dHJhX21ldHJpYyA9PSByb3cuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gdDtcbiAgICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgIGlmKHQuaWQgPT0gcm93Lm1ldHJpYylcbiAgICAgICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IHQ7ICBcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYocnVsZV90eXBlLnZhbHVlID09ICdDSURSJykge1xuICAgICAgZGVidWdnZXI7XG4gICAgICBuZXR3b3JrX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cudGFyZ2V0KSB7XG4gICAgICAgICAgc2VsZWN0ZWRfbmV0d29yay52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIG5ldHdvcmtfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5sYWJlbCA9PSByb3cubWV0cmljX2xhYmVsKSB7XG4gICAgICAgICAgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgXG4gICAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAodHJ1ZSk7XG5cbiAgICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBcbiAgICB9IGVsc2UgaWYocnVsZV90eXBlLnZhbHVlID09ICdob3N0X3Bvb2wnKSB7XG4gICAgICBob3N0X3Bvb2xfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09IHJvdy50YXJnZXQpIHtcbiAgICAgICAgICBzZWxlY3RlZF9ob3N0X3Bvb2wudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBob3N0X3Bvb2xfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5sYWJlbCA9PSByb3cubWV0cmljX2xhYmVsKSB7XG4gICAgICAgICAgc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKTtcblxuICAgICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cubWV0cmljX3R5cGUpIHtcbiAgICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgaWYocm93ICE9IG51bGwpIHtcbiAgICBzZXRfcm93X3RvX2VkaXQocm93KTtcbiAgfSBlbHNlIHtcbiAgICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIH1cblxuICBcbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2hhbmdlX3RocmVzaG9sZCA9ICgpID0+IHtcbiAgKHNlbGVjdGVkX21ldHJpYy52YWx1ZS5zaG93X3ZvbHVtZSA9PSB0cnVlKSA/IHZpc2libGUudmFsdWUgPSB0cnVlIDogdmlzaWJsZS52YWx1ZSA9IGZhbHNlXG59XG5cbmNvbnN0IGNoYW5nZV9pbnRlcmZhY2VfdGhyZXNob2xkID0gKCkgPT4ge1xuICAoc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5zaG93X3ZvbHVtZSA9PSB0cnVlKSA/IHZpc2libGUudmFsdWUgPSB0cnVlIDogdmlzaWJsZS52YWx1ZSA9IGZhbHNlXG59XG5cbmNvbnN0IGNoZWNrX2VtcHR5X2hvc3QgPSAoKSA9PiB7XG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4oJ2lwJykpO1xuICBkaXNhYmxlX2FkZC52YWx1ZSA9ICEocmVnZXgudGVzdChob3N0LnZhbHVlKSB8fCBob3N0LnZhbHVlID09PSAnKicpO1xufVxuXG5jb25zdCBzZXRfYWN0aXZlX3NpZ25fcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG4gIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICB9KVxuXG59XG5cbi8qKlxuICogXG4gKiBTZXQgdGhlIG1ldHJpYyB0eXBlXG4gKi9cbmNvbnN0IHNldF9hY3RpdmVfcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG5cbiAgaWYobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd2b2x1bWUnKSB7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gZWxzZSBpZiAobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3BlcmNlbnRhZ2UnKXtcbiAgICBwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0LmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gXG4gIFxufVxuXG5cbi8qKlxuICogRnVuY3Rpb24gdG8gYWRkIHJ1bGUgdG8gcnVsZXMgbGlzdFxuICovXG5jb25zdCBhZGRfID0gKGlzX2VkaXQpID0+IHtcbiAgZGVidWdnZXI7XG4gIGxldCB0bXBfaG9zdCA9ICcnXG4gIGlmKHJ1bGVfdHlwZS52YWx1ZSAhPSAnaW50ZXJmYWNlJylcbiAgICB0bXBfaG9zdCA9IGhvc3QudmFsdWU7XG5cbiAgY29uc3QgdG1wX2ZyZXF1ZW5jeSA9IHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZS5pZDtcbiAgbGV0IHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUuaWQ7XG4gIGxldCB0bXBfbWV0cmljX2xhYmVsID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmxhYmVsIDtcblxuICBpZihydWxlX3R5cGUudmFsdWUgPT0gXCJpbnRlcmZhY2VcIikge1xuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmlkXG4gICAgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUubGFiZWw7XG4gIH0gZWxzZSBpZihydWxlX3R5cGUudmFsdWUgPT0gXCJob3N0X3Bvb2xcIikge1xuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljLnZhbHVlLnNjaGVtYTtcbiAgICB0bXBfbWV0cmljX2xhYmVsID0gc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZS5sYWJlbDtcbiAgfSBlbHNlIGlmKHJ1bGVfdHlwZS52YWx1ZSA9PSBcIkNJRFJcIikge1xuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9uZXR3b3JrX21ldHJpYy52YWx1ZS5zY2hlbWE7XG4gICAgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX25ldHdvcmtfbWV0cmljLnZhbHVlLmxhYmVsO1xuICB9XG4gIGNvbnN0IHRtcF9pbnRlcmZhY2VfbWV0cmljID0gc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5pZDtcbiAgY29uc3QgdG1wX3J1bGVfdHlwZSA9IHJ1bGVfdHlwZS52YWx1ZTtcbiAgY29uc3QgdG1wX2ludGVyZmFjZSA9IHNlbGVjdGVkX2lmaWQudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9pbnRlcmZhY2VfbmFtZSA9IHNlbGVjdGVkX2lmaWQudmFsdWUubGFiZWw7XG4gIGxldCB0bXBfbWV0cmljX3R5cGUgPSBtZXRyaWNfdHlwZS52YWx1ZS5pZDtcbiAgbGV0IHRtcF9leHRyYV9tZXRyaWMgPSAocnVsZV90eXBlLnZhbHVlID09ICdIb3N0Jyk/ICgoc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYykgPyBzZWxlY3RlZF9tZXRyaWMudmFsdWUuZXh0cmFfbWV0cmljIDogbnVsbCApIDogKChzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYykgPyBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYyA6IG51bGwgKVxuICBsZXQgYmFzaWNfdmFsdWU7XG4gIGxldCBiYXNpY19zaWduX3ZhbHVlO1xuICBsZXQgdG1wX3RocmVzaG9sZDtcbiAgbGV0IHRtcF9zaWduX3ZhbHVlO1xuXG4gIGxldCB0bXBfZWRpdF9yb3dfaWQgPSAoaXNfZWRpdCkgPyByb3dfdG9fZWRpdF9pZC52YWx1ZSA6IG51bGw7XG5cbiAgaWYodmlzaWJsZS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICB0bXBfbWV0cmljX3R5cGUgPSAnJ1xuICAgIHRtcF9leHRyYV9tZXRyaWMgPSAnJ1xuICAgIHRtcF90aHJlc2hvbGQgPSB0aHJlc2hvbGQudmFsdWUudmFsdWU7XG4gICAgZGVidWdnZXI7XG4gIH1cbiAgXG5cbiAgaWYodG1wX21ldHJpY190eXBlID09ICd0aHJvdWdocHV0Jykge1xuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpIDtcbiAgICAvKiBUaGUgdGhyb3VnaHB1dCBpcyBpbiBiaXQsIHRoZSB2b2x1bWUgaW4gQnl0ZXMhISAqL1xuICB9IGVsc2UgaWYodG1wX21ldHJpY190eXBlID09ICd2b2x1bWUnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3RocmVzaG9sZCA9IGJhc2ljX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfSBlbHNlIGlmKHRtcF9tZXRyaWNfdHlwZSA9PSAncGVyY2VudGFnZScpIHtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3NpZ25fdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF9zaWduX3ZhbHVlID0gcGFyc2VJbnQoYmFzaWNfc2lnbl92YWx1ZSk7XG4gICAgdG1wX3RocmVzaG9sZCA9IHRtcF9zaWduX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfSBlbHNlIGlmKHRtcF9tZXRyaWNfdHlwZSA9PSAndmFsdWUnKXtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3NpZ25fdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF9zaWduX3ZhbHVlID0gcGFyc2VJbnQoYmFzaWNfc2lnbl92YWx1ZSk7XG4gICAgdG1wX3RocmVzaG9sZCA9IHRtcF9zaWduX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfVxuICBsZXQgZW1pdF9uYW1lID0gJ2FkZCc7XG5cbiAgaWYoaXNfZWRpdCA9PSB0cnVlKSBcbiAgICBlbWl0X25hbWUgPSAnZWRpdCc7XG5cblxuICBpZiAocnVsZV90eXBlLnZhbHVlID09ICdIb3N0JylcbiAgICBlbWl0KGVtaXRfbmFtZSwgeyBcbiAgICAgIGhvc3Q6IHRtcF9ob3N0LCBcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSwgXG4gICAgICBtZXRyaWM6IHRtcF9tZXRyaWMsXG4gICAgICBtZXRyaWNfbGFiZWw6IHRtcF9tZXRyaWNfbGFiZWwsXG4gICAgICB0aHJlc2hvbGQ6IHRtcF90aHJlc2hvbGQsXG4gICAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgICAgZXh0cmFfbWV0cmljOiB0bXBfZXh0cmFfbWV0cmljLFxuICAgICAgcnVsZV90eXBlOiB0bXBfcnVsZV90eXBlLFxuICAgICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgICBydWxlX2lkOiB0bXBfZWRpdF9yb3dfaWRcblxuICAgIH0pO1xuICBlbHNlIGlmKHJ1bGVfdHlwZS52YWx1ZSA9PSAnaW50ZXJmYWNlJylcbiAgICBlbWl0KGVtaXRfbmFtZSwgeyBcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSwgXG4gICAgICBtZXRyaWM6IHRtcF9pbnRlcmZhY2VfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIGludGVyZmFjZTogdG1wX2ludGVyZmFjZSxcbiAgICAgIGlmbmFtZTogdG1wX2ludGVyZmFjZV9uYW1lLFxuICAgICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgICBydWxlX2lkOiB0bXBfZWRpdF9yb3dfaWRcblxuICAgIH0pO1xuICBlbHNlIGlmKHJ1bGVfdHlwZS52YWx1ZSA9PSBcImV4cG9ydGVyXCIpIHtcbiAgICBjb25zdCBmbG93X2RldmljZV9pZmluZGV4ID0gc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlX2lmaWQudmFsdWUuaWQ7XG4gICAgY29uc3QgZmxvd19kZXZpY2VfaWZpbmRleF9uYW1lID0gc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlX2lmaWQudmFsdWUubGFiZWw7XG4gICAgY29uc3QgZmxvd19kZXZpY2VfaXAgPSBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUuaWQ7XG4gICAgbGV0IG1ldHJpY19leHA7XG4gICAgaWYoZmxvd19kZXZpY2VfaWZpbmRleCAhPSBudWxsICYmIGZsb3dfZGV2aWNlX2lmaW5kZXggIT0gJyonKSB7XG4gICAgICBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmKGl0ZW0uaWQgPT0gXCJmbG93ZGV2X3BvcnQ6dHJhZmZpY1wiKVxuICAgICAgICAgIG1ldHJpY19leHAgPSBpdGVtO1xuICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgZWxzZSB7XG4gICAgICBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmKGl0ZW0uaWQgPT0gXCJmbG93ZGV2OnRyYWZmaWNcIilcbiAgICAgICAgICBtZXRyaWNfZXhwID0gaXRlbTtcbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGxldCBtZXRyaWNfZXhwX2xhYmVsID0gbWV0cmljX2V4cC5sYWJlbDtcbiAgICBcbiAgICBlbWl0KGVtaXRfbmFtZSwgeyBcbiAgICAgIGhvc3Q6IGZsb3dfZGV2aWNlX2lwLFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LCBcbiAgICAgIG1ldHJpYzogbWV0cmljX2V4cC5pZCxcbiAgICAgIG1ldHJpY19sYWJlbDogbWV0cmljX2V4cF9sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBpbnRlcmZhY2U6IGZsb3dfZGV2aWNlX2lmaW5kZXgsXG4gICAgICBpZm5hbWU6IGZsb3dfZGV2aWNlX2lmaW5kZXhfbmFtZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkXG5cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gXCJDSURSXCIpIHtcbiAgICB0bXBfaG9zdCA9IHNlbGVjdGVkX25ldHdvcmsudmFsdWUuaWQ7XG4gICAgY29uc3QgbmV0d29ya19pZCA9IHNlbGVjdGVkX25ldHdvcmsudmFsdWUubmV0d29ya19pZDtcbiAgICBlbWl0KGVtaXRfbmFtZSwgeyBcbiAgICAgIGhvc3Q6IHRtcF9ob3N0LCBcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSwgXG4gICAgICBtZXRyaWM6IHRtcF9tZXRyaWMsXG4gICAgICBtZXRyaWNfbGFiZWw6IHRtcF9tZXRyaWNfbGFiZWwsXG4gICAgICB0aHJlc2hvbGQ6IHRtcF90aHJlc2hvbGQsXG4gICAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgICAgZXh0cmFfbWV0cmljOiB0bXBfZXh0cmFfbWV0cmljLFxuICAgICAgcnVsZV90eXBlOiB0bXBfcnVsZV90eXBlLFxuICAgICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgICBydWxlX2lkOiB0bXBfZWRpdF9yb3dfaWQsXG4gICAgICBuZXR3b3JrOiBuZXR3b3JrX2lkXG5cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gXCJob3N0X3Bvb2xcIikge1xuICAgIGNvbnN0IHRtcF9ob3N0X3Bvb2xfaWQgPSBzZWxlY3RlZF9ob3N0X3Bvb2wudmFsdWUuaWQ7XG4gICAgY29uc3QgdG1wX2hvc3RfcG9vbF9sYWJlbCA9IHNlbGVjdGVkX2hvc3RfcG9vbC52YWx1ZS5sYWJlbDtcblxuICAgIGVtaXQoZW1pdF9uYW1lLCB7IFxuICAgICAgaG9zdF9wb29sX2lkOiB0bXBfaG9zdF9wb29sX2lkLFxuICAgICAgaG9zdF9wb29sX2xhYmVsOiB0bXBfaG9zdF9wb29sX2xhYmVsLFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LCBcbiAgICAgIG1ldHJpYzogdG1wX21ldHJpYyxcbiAgICAgIG1ldHJpY19sYWJlbDogdG1wX21ldHJpY19sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBleHRyYV9tZXRyaWM6IHRtcF9leHRyYV9tZXRyaWMsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICAgIHJ1bGVfaWQ6IHRtcF9lZGl0X3Jvd19pZFxuXG4gICAgfSk7XG4gICAgXG4gIH1cblxufTtcblxuXG5jb25zdCBlZGl0XyA9ICgpID0+IHtcbiAgYWRkXyh0cnVlKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIGlzX2VkaXRfcGFnZS52YWx1ZSA9IGZhbHNlO1xuICBpbnZhbGlkX2FkZC52YWx1ZSA9IGZhbHNlO1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgaW52YWxpZEFkZCA9ICgpID0+IHtcbiAgaW52YWxpZF9hZGQudmFsdWUgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBcbiAqIEZ1bmN0aW9uIHRvIGZvcm1hdCBpZmlkIGxpc3RcbiAqL1xuY29uc3QgZm9ybWF0X2lmaWRfbGlzdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgbGV0IF9pZmlkX2xpc3QgPSBbXVxuICBkYXRhLmZvckVhY2goKGlmaWQpID0+IHtcbiAgICBsZXQgaXRlbSA9IHtpZDogaWZpZC5pZmlkLCBsYWJlbDogaWZpZC5uYW1lfTtcbiAgICBfaWZpZF9saXN0LnB1c2goaXRlbSk7XG4gIH0pIFxuICByZXR1cm4gX2lmaWRfbGlzdFxufVxuXG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZm9ybWF0IGZsb3cgZXhwb3J0ZXIgZGV2aWNlIGxpc3QgXG4gKi9cbmNvbnN0IGZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0ID0gZnVuY3Rpb24oZGF0YSkge1xuICBsZXQgX2ZfZXhwX2Rldl9saXN0ID0gW107XG5cbiAgZGF0YS5mb3JFYWNoKChkZXYpID0+IHtcblxuICAgIGxldCBpcCA9IGRldi5jb2x1bW5faXAuc3BsaXQoXCI9XCIpWzJdLnNwbGl0KFwiJlwiKVswXTtcbiAgICBsZXQgZGV0YWlscyA9IGRldi5jb2x1bW5faXAuc3BsaXQoXCInXCIpWzFdO1xuICAgIGxldCBpdGVtID0ge2lkOiBpcCwgbGFiZWw6IGlwLCB2YWx1ZTogaXAsIGRldGFpbHM6IGRldGFpbHN9O1xuICAgIF9mX2V4cF9kZXZfbGlzdC5wdXNoKGl0ZW0pO1xuICB9KVxuICByZXR1cm4gX2ZfZXhwX2Rldl9saXN0O1xufVxuXG5jb25zdCBtZXRyaWNzTG9hZGVkID0gYXN5bmMgKF9tZXRyaWNfbGlzdCwgX2lmaWRfbGlzdCwgX2ludGVyZmFjZV9tZXRyaWNfbGlzdCwgX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlcywgX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19tZXRyaWNfbGlzdCwgcGFnZV9jc3JmLCBfaW5pdF9mdW5jLCBfZGVsZXRlX3JvdywgX2hvc3RfcG9vbF9saXN0LCBfbmV0d29ya19saXN0LCBfaG9zdF9wb29sX21ldHJpY19saXN0LCBfbmV0d29ya19tZXRyaWNfbGlzdCkgPT4ge1xuICBtZXRyaWNzX3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgbWV0cmljX2xpc3QudmFsdWUgPSBfbWV0cmljX2xpc3Q7XG4gIGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZSA9IF9pbnRlcmZhY2VfbWV0cmljX2xpc3Q7XG4gIGlmaWRfbGlzdC52YWx1ZSA9IGZvcm1hdF9pZmlkX2xpc3QoX2lmaWRfbGlzdCk7XG4gIFxuICBmcmVxdWVuY3lfbGlzdC52YWx1ZSA9IHByb3BzLmZyZXF1ZW5jeV9saXN0O1xuICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2lmaWQudmFsdWUgPSBpZmlkX2xpc3QudmFsdWVbMF07XG4gIHBhZ2VfY3NyZl8udmFsdWUgPSBwYWdlX2NzcmY7XG4gIGlmKF9pbml0X2Z1bmMpIHtcbiAgICBpbml0X2Z1bmMudmFsdWUgPSBfaW5pdF9mdW5jO1xuICB9XG5cbiAgaWYoX2RlbGV0ZV9yb3cpIHtcbiAgICBkZWxldGVfcm93LnZhbHVlID0gX2RlbGV0ZV9yb3c7XG4gIH1cbiAgXG4gIGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZSA9IGZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0KF9mbG93X2V4cG9ydGVyX2RldmljZXMpO1xuXG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlBcnJheU9yTnVsbChfaG9zdF9wb29sX2xpc3QpKSB7XG4gICAgaGFzX2hvc3RfcG9vbHMudmFsdWUgPSB0cnVlO1xuICB9XG4gIGhvc3RfcG9vbF9saXN0LnZhbHVlID0gX2hvc3RfcG9vbF9saXN0O1xuICBob3N0X3Bvb2xfbWV0cmljX2xpc3QudmFsdWUgPSBfaG9zdF9wb29sX21ldHJpY19saXN0O1xuXG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlBcnJheU9yTnVsbChfbmV0d29ya19saXN0KSkge1xuICAgIGhhc19jaWRyLnZhbHVlID0gdHJ1ZTtcbiAgfVxuICBuZXR3b3JrX2xpc3QudmFsdWUgPSBfbmV0d29ya19saXN0O1xuICBuZXR3b3JrX21ldHJpY19saXN0LnZhbHVlID0gX25ldHdvcmtfbWV0cmljX2xpc3Q7XG4gIGZsb3dfZGV2aWNlX21ldHJpY19saXN0LnZhbHVlID0gX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19tZXRyaWNfbGlzdDtcblxuICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgPSBmbG93X2V4cG9ydGVyX2RldmljZXMudmFsdWVbMF07XG4gIGlmKHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZSAhPSBudWxsKSB7XG4gICAgcmVzdF9wYXJhbXMuY3NyZiA9IHBhZ2VfY3NyZl8udmFsdWU7XG4gICAgY29uc3QgdXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2Uvc3RhdHMubHVhP2Arc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlLmRldGFpbHMuc3BsaXQoXCI/XCIpWzFdLCB7XG4gICAgICAuLi5yZXN0X3BhcmFtc1xuICAgIH0pXG5cbiAgICBsZXQgaWZpZHMgPSBbXVxuICAgIGxldCBleHBvcnRlcl9pZmlkcyA9IFtdXG4gICAgYXdhaXQgJC5nZXQodXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgICBpZmlkcyA9IHJzcC5yc3A7XG4gICAgfSk7XG4gICAgZXhwb3J0ZXJfaWZpZHMucHVzaCh7aWQ6IFwiKlwiLHZhbHVlOlwiKlwiLCBsYWJlbDogXCIqXCIsIHRpbWVzZXJpZXNfYXZhaWxhYmxlOiBpZmlkc1swXS50aW1lc2VyaWVzX2F2YWlsYWJsZX0pXG4gICAgaWZpZHMuZm9yRWFjaCgocmVzcCkgPT4ge1xuICAgICAgZXhwb3J0ZXJfaWZpZHMucHVzaCh7aWQ6IHJlc3AuaWZpbmRleCwgdmFsdWU6IHJlc3AuaWZpbmRleCwgbGFiZWw6IHJlc3AubmFtZSwgdGltZXNlcmllc19hdmFpbGFibGU6IHJlc3AudGltZXNlcmllc19hdmFpbGFibGV9KTtcbiAgICB9KVxuICAgIGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZSA9IGV4cG9ydGVyX2lmaWRzO1xuICAgIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlID0gZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0LnZhbHVlWzFdO1xuXG4gICAgZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUudmFsdWUgPSBmbG93X2V4cG9ydGVyX2RldmljZV9pZmlkX2xpc3QudmFsdWVbMF0udGltZXNlcmllc19hdmFpbGFibGU7XG5cbiAgfVxuICBcbiAgXG4gIFxufVxuXG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICBpZih0LmFjdGl2ZSkge1xuICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSB0O1xuICAgIH1cblxuICB9KVxuaW52YWxpZF9hZGQudmFsdWUgPSBmYWxzZTtcbn0pXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBtZXRyaWNzTG9hZGVkLCBpbnZhbGlkQWRkIH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTRcIj5cbiAgICAgICAgICA8aDQ+e3sgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy50cmFmZmljX3J1bGVzJykgfX08L2g0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfcnVsZXNcIj5cbiAgICAgICAgICA8TW9kYWxEZWxldGVDb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCI+XG4gICAgICAgICAgPC9Nb2RhbERlbGV0ZUNvbmZpcm0+XG4gICAgICAgICAgPE1vZGFsQWRkSG9zdFJ1bGVzIHJlZj1cIm1vZGFsX2FkZF9ob3N0X3J1bGVcIlxuICAgICAgICAgICAgOm1ldHJpY19saXN0PVwibWV0cmljX2xpc3RcIlxuICAgICAgICAgICAgOmludGVyZmFjZV9tZXRyaWNfbGlzdD1cImludGVyZmFjZV9tZXRyaWNfbGlzdFwiXG4gICAgICAgICAgICA6ZnJlcXVlbmN5X2xpc3Q9XCJmcmVxdWVuY3lfbGlzdFwiXG4gICAgICAgICAgICA6aW5pdF9mdW5jPVwiaW5pdF9lZGl0XCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfaG9zdF9ydWxlXCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdFwiPlxuICAgICAgICAgIDwvTW9kYWxBZGRIb3N0UnVsZXM+XG4gICAgICAgICAgXG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ob3N0X3J1bGVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxOb3RlTGlzdFxuICAgICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uVW5tb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRIb3N0UnVsZXMgfSBmcm9tIFwiLi9tb2RhbC1hZGQtaG9zdC1ydWxlcy52dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgaWZpZDogU3RyaW5nLFxufSlcblxuY29uc3QgdGFibGVfaG9zdF9ydWxlcyA9IHJlZihudWxsKVxuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYobnVsbClcbmNvbnN0IG1vZGFsX2FkZF9ob3N0X3J1bGUgPSByZWYobnVsbClcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCByb3dfdG9fZGVsZXRlID0gcmVmKHt9KVxuY29uc3Qgcm93X3RvX2VkaXQgPSByZWYoe30pXG5jb25zdCBpbnZhbGlkX2FkZCA9IHJlZihmYWxzZSk7XG5cblxuY29uc3QgbWV0cmljX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YT9ydWxlX3R5cGU9aG9zdGBcbmNvbnN0IG1ldHJpY19pZm5hbWVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19tZXRyaWMubHVhP3J1bGVfdHlwZT1pbnRlcmZhY2VgXG5cbmNvbnN0IG1ldHJpY19ob3N0X3Bvb2xfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19tZXRyaWMubHVhP3J1bGVfdHlwZT1ob3N0X3Bvb2xgXG5jb25zdCBtZXRyaWNfbmV0d29ya191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPUNJRFJgXG5cblxuY29uc3QgbWV0cmljX2Zsb3dfZXhwX2RldmljZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPWV4cG9ydGVyYFxuY29uc3QgZmxvd19kZXZpY2VzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2VzL3N0YXRzLmx1YWBcbmNvbnN0IGZsb3dfZGV2aWNlc19kZXRhaWxzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZmxvd2RldmljZV9kZXRhaWxzLmx1YWBcbmNvbnN0IGhvc3RfcG9vbF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9vbC9wb29scy5sdWFgXG5jb25zdCBuZXR3b3JrX2xpc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZXR3b3JrL25ldHdvcmtzLmx1YWBcbmNvbnN0IGlmaWRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFgXG5jb25zdCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfZGF0YS5sdWFgXG5jb25zdCBhZGRfcnVsZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9hZGRfaG9zdF9ydWxlLmx1YWBcbmNvbnN0IHJlbW92ZV9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2ludGVyZmFjZS9ob3N0X3J1bGVzL2RlbGV0ZV9ob3N0X3J1bGUubHVhYFxuICBcbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzEnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzInKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzMnKSxcbl1cblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGlmaWQ6IHByb3BzLmlmaWQsXG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZixcbiAgZ3VpOiB0cnVlIC8vIFNvbWUgQVBJIHJlcXVpcmVzIHRoaXMgdG8gcmV0dXJuIGh0bWwgY29udGVudCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxufVxuXG5sZXQgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSB7fVxubGV0IHRpdGxlX2RlbGV0ZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZGVsZXRlX2hvc3RfcnVsZXNfdGl0bGUnKVxubGV0IHRpdGxlX2VkaXQgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmVkaXRfbG9jYWxfbmV0d29ya19ydWxlcycpXG5sZXQgYm9keV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX2Rlc2NyaXB0aW9uJylcbmxldCBtZXRyaWNfbGlzdCA9IFtdXG5sZXQgaW50ZXJmYWNlX21ldHJpY19saXN0ID0gW11cbmxldCBob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBbXVxubGV0IGlmaWRfbGlzdCA9IFtdXG5sZXQgZmxvd19leHBvcnRlcl9saXN0ID0gW11cbmxldCBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0ID0gW11cbmxldCBob3N0X3Bvb2xfbGlzdCA9IFtdXG5sZXQgbmV0d29ya19saXN0ID0gW11cbmxldCBuZXR3b3JrX21ldHJpY19saXN0ID0gW11cblxuXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IFtcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLjVfbWluJyksIGlkOiAnNW1pbicsIHZhbHVlOiAnNW1pbicgfSxcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuaG91cmx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgaWQ6ICdob3VyJywgdmFsdWU6ICdob3VyJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuZGFpbHknKSwgaWQ6ICdkYXknLCB2YWx1ZTogJ2RheScgfVxuXVxuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbihyb3cpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBsb2FkX3NlbGVjdGVkX2ZpZWxkID0gZnVuY3Rpb24ocm93KSB7XG4gIHJvd190b19lZGl0LnZhbHVlID0gcm93O1xuICBcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcblxuICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLnNob3cocm93KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBlZGl0KHBhcmFtcykge1xuICAvL2F3YWl0IGRlbGV0ZV9yb3coKTtcblxuICBhd2FpdCBhZGRfaG9zdF9ydWxlKHBhcmFtcyk7XG59XG5cbmNvbnN0IGluaXRfZWRpdCA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fZWRpdC52YWx1ZTtcbiAgcm93X3RvX2VkaXQudmFsdWUgPSBudWxsO1xuICByZXR1cm4gcm93O1xufVxuXG5jb25zdCBkZXN0cm95X3RhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRhYmxlX2hvc3RfcnVsZXMudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbn1cblxuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fZGVsZXRlLnZhbHVlO1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocmVtb3ZlX3J1bGVfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXMsXG4gICAgLi4ue1xuICAgICAgcnVsZV9pZDogcm93LmlkLFxuICAgICAgcnVsZV90eXBlOiByb3cucnVsZV90eXBlXG4gICAgfVxuICB9KVxuICBcbiAgYXdhaXQgJC5wb3N0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9KTtcbn1cblxuY29uc3QgYWRkX2hvc3RfcnVsZSA9IGFzeW5jIGZ1bmN0aW9uKHBhcmFtcykge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYWRkX3J1bGVfdXJsLCB7XG4gICAgLi4ucGFyYW1zXG4gIH0pXG4gIFxuICBjb25zdCByc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcblxuICBpbnZhbGlkX2FkZC52YWx1ZSA9IHJzcC5yc3A7XG5cbiAgaWYoaW52YWxpZF9hZGQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLmNsb3NlKCk7XG4gICAgcmVsb2FkX3RhYmxlKCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5pbnZhbGlkQWRkKCk7XG4gIH1cbiAgXG59XG5cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdCAgaGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHQgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNob3dfZGVsZXRlX2RpYWxvZyhyb3dEYXRhKTtcblx0ICB9LFxuXHR9O1xuXG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIGxvYWRfc2VsZWN0ZWRfZmllbGQocm93RGF0YSk7XG4gICAgfSxcbiAgfVxuICBcbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcblx0ICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcblx0XSk7XG59XG5cbmNvbnN0IGZvcm1hdF9tZXRyaWMgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBtZXRyaWNfbGFiZWwgPSBkYXRhICBcblxuICBpZiAocm93RGF0YS5tZXRyaWNfbGFiZWwpIHtcbiAgICBtZXRyaWNfbGFiZWwgPSByb3dEYXRhLm1ldHJpY19sYWJlbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAocm93RGF0YS5ydWxlX3R5cGUgIT0gJ2ludGVyZmFjZScpIHtcbiAgICAgIG1ldHJpY19saXN0LmZvckVhY2goKG1ldHJpYykgPT4ge1xuICAgICAgaWYobWV0cmljLmlkID09IGRhdGEpIHtcbiAgICAgICAgaWYocm93RGF0YS5leHRyYV9tZXRyaWMpIHtcbiAgICAgICAgICBpZihyb3dEYXRhLmV4dHJhX21ldHJpYyA9PSBtZXRyaWMuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJmYWNlX21ldHJpY19saXN0LmZvckVhY2goKG1ldHJpYykgPT4ge1xuICAgICAgaWYobWV0cmljLmlkID09IGRhdGEpIHtcbiAgICAgICAgaWYocm93RGF0YS5leHRyYV9tZXRyaWMpIHtcbiAgICAgICAgICBpZihyb3dEYXRhLmV4dHJhX21ldHJpYyA9PSBtZXRyaWMuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbiAgXG4gIFxuICByZXR1cm4gbWV0cmljX2xhYmVsXG59XG5cbmNvbnN0IGZvcm1hdF9mcmVxdWVuY3kgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGxldCBmcmVxdWVuY3lfdGl0bGUgPSAnJ1xuICBmcmVxdWVuY3lfbGlzdC5mb3JFYWNoKChmcmVxdWVuY3kpID0+IHtcbiAgICBpZihkYXRhID09IGZyZXF1ZW5jeS5pZClcbiAgICAgIGZyZXF1ZW5jeV90aXRsZSA9IGZyZXF1ZW5jeS50aXRsZTtcbiAgfSlcblxuICByZXR1cm4gZnJlcXVlbmN5X3RpdGxlXG59XG5cbmNvbnN0IGZvcm1hdF90aHJlc2hvbGQgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9IHBhcnNlSW50KGRhdGEpO1xuICBsZXQgdGhyZXNob2xkX3NpZ24gPSBcIj4gXCI7XG5cbiAgaWYoKHJvd0RhdGEudGhyZXNob2xkX3NpZ24pICYmIChyb3dEYXRhLnRocmVzaG9sZF9zaWduID09ICctMScpKVxuICAgIHRocmVzaG9sZF9zaWduID0gXCI8IFwiXG5cbiAgaWYoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICd0aHJvdWdocHV0JykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmJpdHNUb1NpemUoZGF0YSApXG4gIH0gZWxzZSBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSB0aHJlc2hvbGRfc2lnbiArIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgfSBlbHNlIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAncGVyY2VudGFnZScpKXtcbiAgICBpZiAoZGF0YSA8IDApIHtcbiAgICAgIGRhdGEgPSBkYXRhICogKC0xKTtcbiAgICB9XG4gICAgZm9ybWF0dGVkX2RhdGEgPSB0aHJlc2hvbGRfc2lnbiArIE50b3BVdGlscy5mcGVyY2VudChkYXRhKTtcbiAgfSBlbHNlIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndmFsdWUnKSl7XG4gICAgaWYgKGRhdGEgPCAwKSB7XG4gICAgICBkYXRhID0gZGF0YSAqICgtMSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5cbmNvbnN0IGZvcm1hdF9sYXN0X21lYXN1cmVtZW50ID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICBsZXQgZm9ybWF0dGVkX2RhdGEgPSBwYXJzZUludChkYXRhKTtcbiAgaWYocm93RGF0YS50YXJnZXQgPT0gXCIqXCIpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gTnRvcFV0aWxzLmJpdHNUb1NpemUoZGF0YSAqIDgpXG4gIH0gZWxzZSBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gIH0gZWxzZSBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKSl7XG4gICAgaWYgKGRhdGEgPCAwKSB7XG4gICAgICBkYXRhID0gZGF0YSAqICgtMSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZF9kYXRhID0gTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5jb25zdCBmb3JtYXRfcnVsZV90eXBlID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICBsZXQgZm9ybWF0dGVkX2RhdGEgPSAnJztcbiAgaWYgKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgKHJvd0RhdGEucnVsZV90eXBlID09ICdpbnRlcmZhY2UnKSApIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIrX2kxOG4oXCJpbnRlcmZhY2VcIikrXCIgPGkgY2xhc3M9J2ZhcyBmYS1ldGhlcm5ldCc+PC9pPjwvc3Bhbj5cIlxuICB9IGVsc2UgaWYgKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgKHJvd0RhdGEucnVsZV90eXBlID09ICdIb3N0JyApICkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIitfaTE4bihcImFib3V0Lmhvc3RfY2hlY2tzX2RpcmVjdG9yeVwiKStcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuICB9IGVsc2UgaWYgKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgcm93RGF0YS5ydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCcpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIrX2kxOG4oXCJhbGVydF9lbnRpdGllcy5ob3N0X3Bvb2xcIikrXCIgPGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L3NwYW4+XCJcblxuICB9IGVsc2UgaWYgKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgcm93RGF0YS5ydWxlX3R5cGUgPT0gJ0NJRFInKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBcIjxzcGFuIGNsYXNzPSdiYWRnZSBiZy1zZWNvbmRhcnknPlwiK19pMThuKFwibmV0d29ya1wiKStcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJykgJiYgcm93RGF0YS5tZXRyaWMgPT0gXCJmbG93ZGV2OnRyYWZmaWNcIikge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIitfaTE4bihcImZsb3dfZXhwb3J0ZXJfZGV2aWNlXCIpK1wiIDxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9zcGFuPlwiXG5cbiAgfSBlbHNlIGlmKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgKHJvd0RhdGEucnVsZV90eXBlID09ICdleHBvcnRlcicpICYmIHJvd0RhdGEubWV0cmljID09IFwiZmxvd2Rldl9wb3J0OnRyYWZmaWNcIilcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIrX2kxOG4oXCJpbnRlcmZhY2VfZmxvd19leHBvcnRlcl9kZXZpY2VcIikrXCIgPGkgY2xhc3M9J2ZhcyBmYS1ldGhlcm5ldCc+PC9pPjwvc3Bhbj5cIlxuXG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YTtcbn1cblxuY29uc3QgZm9ybWF0X3RhcmdldCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gJyc7XG4gIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnaW50ZXJmYWNlJykgKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnNlbGVjdGVkX2lmYWNlO1xuICB9IGVsc2UgaWYocm93RGF0YS5ydWxlX3R5cGUgJiYgKHJvd0RhdGEucnVsZV90eXBlID09ICdIb3N0JyB8fCByb3dEYXRhLnJ1bGVfdHlwZSA9PSAnQ0lEUicpICl7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnRhcmdldDtcbiAgfSBlbHNlIGlmKHJvd0RhdGEucnVsZV90eXBlID09ICdob3N0X3Bvb2wnKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLmhvc3RfcG9vbF9sYWJlbDtcbiAgfSBlbHNlIGlmIChyb3dEYXRhLnJ1bGVfdHlwZSAmJiByb3dEYXRhLnJ1bGVfdHlwZSA9PSAnZXhwb3J0ZXInICYmIHJvd0RhdGEubWV0cmljID09XCJmbG93ZGV2OnRyYWZmaWNcIikge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS50YXJnZXQ7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnRhcmdldCArIFwiIFwiK19pMThuKFwib25faW50ZXJmYWNlXCIpK1wiOiBcIiArIHJvd0RhdGEuZmxvd19leHBfaWZpZF9uYW1lO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YTtcbn1cblxuY29uc3QgZ2V0X21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfdXJsLCByZXN0X3BhcmFtcylcblxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBtZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xufVxuXG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoaG9zdF9wb29sX3VybCwgcmVzdF9wYXJhbXMpXG4gIGxldCB0bXBfaG9zdF9wb29sX2xpc3Q7XG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHRtcF9ob3N0X3Bvb2xfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9ob3N0X3Bvb2xfbGlzdC5zb3J0KChhLGIpID0+IChhLmxhYmVsID4gYi5sYWJlbCkgPyAxIDogKChiLmxhYmVsID4gYS5sYWJlbCkgPyAtMSA6IDApKTtcbiAgaG9zdF9wb29sX2xpc3QgPSB0bXBfaG9zdF9wb29sX2xpc3Q7XG59XG5cbmNvbnN0IGdldF9uZXR3b3JrX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG5ldHdvcmtfbGlzdF91cmwsIHJlc3RfcGFyYW1zKVxuICBcbiAgbGV0IHRtcF9uZXR3b3JrX2xpc3RcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgdG1wX25ldHdvcmtfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9uZXR3b3JrX2xpc3Quc29ydCgoYSxiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIG5ldHdvcmtfbGlzdCA9IHRtcF9uZXR3b3JrX2xpc3Q7XG5cbn1cblxuY29uc3QgZ2V0X2ludGVyZmFjZV9tZXRyaWNfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX2lmbmFtZV91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGludGVyZmFjZV9tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG59XG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG1ldHJpY19ob3N0X3Bvb2xfdXJsLCByZXN0X3BhcmFtcylcblxuICBsZXQgdG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdFxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICB0bXBfaG9zdF9wb29sX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbiAgdG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdC5zb3J0KChhLGIpID0+IChhLmxhYmVsID4gYi5sYWJlbCkgPyAxIDogKChiLmxhYmVsID4gYS5sYWJlbCkgPyAtMSA6IDApKTtcbiAgaG9zdF9wb29sX21ldHJpY19saXN0ID0gdG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdDtcbn1cblxuXG5jb25zdCBnZXRfbmV0d29ya19tZXRyaWNfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX25ldHdvcmtfdXJsLCByZXN0X3BhcmFtcylcblxuICBsZXQgdG1wX25ldHdvcmtfbWV0cmljX2xpc3Q7XG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHRtcF9uZXR3b3JrX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbiAgdG1wX25ldHdvcmtfbWV0cmljX2xpc3Quc29ydCgoYSxiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIG5ldHdvcmtfbWV0cmljX2xpc3QgPSB0bXBfbmV0d29ya19tZXRyaWNfbGlzdDtcblxufVxuXG5jb25zdCBnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfZmxvd19leHBfZGV2aWNlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgZmxvd19leHBvcnRlcl9tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pOyBcblxufVxuXG5jb25zdCBnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGZsb3dfZGV2aWNlc191cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtc1xuICB9KVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGZsb3dfZXhwb3J0ZXJfbGlzdCA9IHJzcC5yc3A7XG4gIH0pOyBcblxufVxuXG5jb25zdCBnZXRfaWZpZF9saXN0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChpZmlkX3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgaWZpZF9saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59XG5cbmNvbnN0IHN0YXJ0X2RhdGF0YWJsZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9LCB7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLnNob3coKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgY29uc3QgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWRcIiksIHZpc2libGU6IGZhbHNlLCB0YXJnZXRzOiAwLCBuYW1lOiAnaWQnLCBkYXRhOiAnaWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzIwJywgbmFtZTogJ3RhcmdldCcsIGRhdGE6ICd0YXJnZXQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7cmV0dXJuIGZvcm1hdF90YXJnZXQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcucnVsZV90eXBlXCIpLCB0YXJnZXRzOiAyLCB3aWR0aDogJzIwJywgbmFtZTogJ3J1bGVfdHlwZScsIGRhdGE6ICdydWxlX3R5cGUnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7cmV0dXJuIGZvcm1hdF9ydWxlX3R5cGUoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzEwJywgbmFtZTogJ21ldHJpYycsIGRhdGE6ICdtZXRyaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfbWV0cmljKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSkgeyByZXR1cm4gZm9ybWF0X2ZyZXF1ZW5jeShkYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5sYXN0X21lYXN1cmVtZW50XCIpLCB0YXJnZXRzOiA1LCB3aWR0aDogJzEwJywgbmFtZTogJ2xhc3RfbWVhc3VyZW1lbnQnLCBkYXRhOiAnbGFzdF9tZWFzdXJlbWVudCcsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF9sYXN0X21lYXN1cmVtZW50KGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRocmVzaG9sZFwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcxMCcsIG5hbWU6ICd0aHJlc2hvbGQnLCBkYXRhOiAndGhyZXNob2xkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X3RocmVzaG9sZChkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcIm1ldHJpY190eXBlXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czogNywgbmFtZTogJ21ldHJpY190eXBlJywgZGF0YTogJ21ldHJpY190eXBlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfVxuICBdO1xuXG4gIGNvbnN0IGhvc3RSdWxlc1RhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGRhdGFfdXJsLCByZXN0X3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBjb2x1bW5zX2NvbmZpZzogY29sdW1ucyxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAxIC8qIHRhcmdldCAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogY29sdW1uc1xuICAgIH1cbiAgfTtcbiAgXG4gIGhvc3RfcnVsZXNfdGFibGVfY29uZmlnID0gaG9zdFJ1bGVzVGFibGVDb25maWc7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBzdGFydF9kYXRhdGFibGUoKTtcbiAgYXdhaXQgZ2V0X21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9pZmlkX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2ludGVyZmFjZV9tZXRyaWNfbGlzdCgpO1xuICBhd2FpdCBnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbGlzdCgpO1xuICBhd2FpdCBnZXRfaG9zdF9wb29sX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2hvc3RfcG9vbF9tZXRyaWNfbGlzdCgpO1xuICBhd2FpdCBnZXRfbmV0d29ya19saXN0KCk7XG4gIGF3YWl0IGdldF9uZXR3b3JrX21ldHJpY19saXN0KCk7XG4gIG1vZGFsX2FkZF9ob3N0X3J1bGUudmFsdWUubWV0cmljc0xvYWRlZChtZXRyaWNfbGlzdCwgaWZpZF9saXN0LCBpbnRlcmZhY2VfbWV0cmljX2xpc3QsIGZsb3dfZXhwb3J0ZXJfbGlzdCwgZmxvd19leHBvcnRlcl9tZXRyaWNfbGlzdCwgcHJvcHMucGFnZV9jc3JmLCBudWxsLCBudWxsLCBob3N0X3Bvb2xfbGlzdCwgbmV0d29ya19saXN0LCBob3N0X3Bvb2xfbWV0cmljX2xpc3QsIG5ldHdvcmtfbWV0cmljX2xpc3QpO1xufSlcblxub25Vbm1vdW50ZWQoKCkgPT4ge1xuICBkZXN0cm95X3RhYmxlKCk7XG59KVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFibGVfb3B0aW9uIGluIHRhYmxlX29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgICAgICAgICAgIDxCb290c3RyYXBUYWJsZVxuICAgICAgICAgICAgICAgICAgICA6aWQ9XCJ0YWJsZV9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgICA6Y29sdW1ucz1cInRhYmxlX29wdGlvbi5jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgOnJvd3M9XCJ0YWJsZV9vcHRpb24uc3RhdHNfcm93c1wiXG4gICAgICAgICAgICAgICAgICAgIDpwcmludF9odG1sX2NvbHVtbj1cIihjb2wpID0+IHByaW50X3N0YXRzX2NvbHVtbihjb2wpXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwiKGNvbCwgcm93KSA9PiBwcmludF9zdGF0c19yb3coY29sLCByb3cpXCI+XG4gICAgICAgICAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwb3J0c190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0cyA9IHJlZihbXSk7XG5jb25zdCBjb25maWdfdHJhZmZpY190YWJsZSA9IHJlZih7fSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gIHJldHVybiBjb2wubGFiZWw7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdykge1xuICAvLyBkZWJ1Z2dlcjtcbiAgbGV0IGxhYmVsID0gcm93LmxhYmVsO1xuICByZXR1cm4gbGFiZWw7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xufSlcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5jbGlfcG9ydHMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L2NsaV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuc3J2X3BvcnRzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC9zcnZfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBzcnZfcG9ydF9mbG93c2AsXG4gIH0sXG5dXG5cbmNvbnN0IHRhYmxlX29wdGlvbnMgPSBbXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndGNwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3RjcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndWRwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3VkcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3RjcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3VkcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG5dXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcbiAgICBcbiAgdGFibGVfb3B0aW9ucy5mb3JFYWNoKCh0YWJsZSkgPT4ge1xuICAgIGxldCB0bXBfcGFyYW1zID0ge1xuICAgICAgLi4udGFibGUuZXh0cmFfcGFyYW1zLFxuICAgICAgLi4udXJsX3BhcmFtcyxcbiAgICB9XG5cbiAgICAkLmdldChOdG9wVXRpbHMuYnVpbGRVUkwodGFibGUudXJsLCB0bXBfcGFyYW1zKSwgYXN5bmMgZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXtcbiAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgbGV0IHJvd3MgPSBbXVxuICAgICAgZGF0YS5yc3AuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwb3J0ID0gZGF0YS5wb3J0X2luZm8ucG9ydFxuICAgICAgICBjb25zdCBwcm90byA9IGRhdGEucG9ydF9pbmZvLmw3X3Byb3RvXG4gICAgICAgIHJvd3MucHVzaCh7IGxhYmVsOiBgJHtwb3J0fSAoJHtwcm90b30pYCB9KVxuICAgICAgfSlcbiAgICAgIHRhYmxlLnN0YXRzX3Jvd3MgPSByb3dzO1xuICAgIH0pO1xuICB9KVxufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0zJyBzdHlsZT0naGVpZ2h0OiA3MHZoOyc+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBtLTFcIiB0YWJpbmRleD1cIjBcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVsb2FkXCI+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIih2YWx1ZSwga2V5LCBpbmRleCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtaWY9XCJ2YWx1ZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTRyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignYnViYmxlX21hcC4nICsga2V5KSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3Rba2V5XVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgPGRpdiA6aWQ9XCJ3aWRnZXRfbmFtZVwiIHN0eWxlPVwiaGVpZ2h0OiA5MCU7XCIgOmNsYXNzPVwiWyBsb2FkaW5nID8gJ250b3BuZy1ncmF5LW91dCcgOiAnJyBdXCI+XG4gICAgICAgICAgICA8Q2hhcnRcbiAgICAgICAgICAgICAgcmVmPVwiYnViYmxlX2NoYXJ0XCJcbiAgICAgICAgICAgICAgOmlkPVwid2lkZ2V0X25hbWVcIlxuICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIlxuICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cInJlc3RfdXJsXCJcbiAgICAgICAgICAgICAgOmdldF9wYXJhbXNfdXJsX3JlcXVlc3Q9XCJmb3JtYXRfcmVxdWVzdFwiXG4gICAgICAgICAgICAgIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKVwiXG4gICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBTdHJpbmcsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBjaGFydHNfb3B0aW9uczogQXJyYXksXG4gIGF2YWlsYWJsZV9maWx0ZXJzOiBPYmplY3QsXG59KVxuXG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGFydHMvYWxlcnQvYW5hbHlzaXMubHVhYFxuY29uc3Qgd2lkZ2V0X25hbWUgPSAnYWxlcnRzLW1hcCc7XG5jb25zdCBhY3RpdmVfZmlsdGVyX2xpc3QgPSB7fVxuY29uc3QgYnViYmxlX2NoYXJ0ID0gcmVmKG51bGwpXG5cbmNvbnN0IGZvcm1hdF9yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBwYXJhbXNfc3RyaW5nID0gJydcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGJ1YmJsZV9tb2RlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKSxcbiAgICB0aW1lZnJhbWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKSxcbiAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmxhbicpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgcmVsb2FkID0gZnVuY3Rpb24oKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5jb25zdCBmb3JtYXRfb3B0aW9ucyA9IGZ1bmN0aW9uKG1vZGVfaWQpIHtcbiAgbGV0IG9wdGlvbnMgPSB7fVxuXG4gIHByb3BzLmNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbl9saXN0KSA9PiB7XG4gICAgaWYob3B0aW9uX2xpc3QubW9kZV9pZCA9PSBtb2RlX2lkKVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbl9saXN0O1xuICB9KVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBldmVudCBmdW5jdGlvbnMgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLmNoYXJ0ICYmIG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpIHtcbiAgICBvcHRpb25zLmNoYXJ0LmV2ZW50cyA9IG9wdGlvbnMuY2hhcnQuZXZlbnRzIHx8IHt9XG4gICAgZm9yKGNvbnN0IFtldmVudCwgZnVuXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSkge1xuICAgICAgaWYoZnVuID09IHVuZGVmaW5lZCkgXG4gICAgICAgIGNvbnRpbnVlXG5cbiAgICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzW2V2ZW50XSA9IE50b3BVdGlsc1tmdW5dIHx8IE50b3BVdGlscy5mbm9uZVxuICAgIH1cbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy54YXhpcyAmJiBvcHRpb25zLnhheGlzLmxhYmVscyAmJiBvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueWF4aXMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnRvb2x0aXAgJiYgb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyKVxuICAgIG9wdGlvbnMudG9vbHRpcC5jdXN0b20gPSBOdG9wVXRpbHNbb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyXVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBcbiAgLyogUmV0dXJuIHRoZSBsaXN0IG9mIGZvcm1hdHRlZCBvcHRpb25zIG9mIHRoZSBjaGFydCAqL1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIGxldCBvcHRpb25zID0gZm9ybWF0X29wdGlvbnMoTnVtYmVyKGFjdGl2ZV9maWx0ZXJfbGlzdFsnYnViYmxlX21vZGUnXS5pZCkpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIG9wdGlvbnMuc2VyaWVzID0gZGF0YS5zZXJpZXMgfHwge31cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn1cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGJ1YmJsZV9tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyk7XG4gIFxuICBpZighYnViYmxlX21vZGUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYnViYmxlX21vZGUnLCAwKSAvKiBGaXJzdCBFbnRyeSAqL1xuICBpZighdGltZWZyYW1lKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3RpbWVmcmFtZScsIDMwMCkgLyogRGVmYXVsdCA1IG1pbiAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuJywgJycpIC8qIERlZmF1bHQgbm8gdmxhbiAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59KVxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0zJyBzdHlsZT0naGVpZ2h0OiA3MHZoOyc+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIodmFsdWUsIGtleSwgaW5kZXgpIGluIGF2YWlsYWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidmFsdWUubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE4cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2J1YmJsZV9tYXAuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgOmlkPVwid2lkZ2V0X25hbWVcIiBzdHlsZT1cImhlaWdodDogOTAlO1wiPlxuICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgIHJlZj1cImJ1YmJsZV9jaGFydFwiXG4gICAgICAgICAgICAgIDppZD1cIndpZGdldF9uYW1lXCJcbiAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJyZXN0X3VybFwiXG4gICAgICAgICAgICAgIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZm9ybWF0X3JlcXVlc3RcIlxuICAgICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKClcIlxuICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgY2hhcnRzX29wdGlvbnM6IEFycmF5LFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSlcblxuLyogQnkgZGVmYXVsdCB1c2UgdGhlIGZpcnN0IGVudHJ5ICovXG5jb25zdCBjdXJyZW50bHlfc2VsZWN0ZWRfY2hhcnQgPSAwXG5cbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2NoYXJ0cy9ob3N0L21hcC5sdWFgXG5jb25zdCB3aWRnZXRfbmFtZSA9ICdhbGVydHMtbWFwJztcbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBidWJibGVfY2hhcnQgPSByZWYobnVsbClcblxuY29uc3QgZm9ybWF0X3JlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHBhcmFtc19zdHJpbmcgPSAnJ1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgYnViYmxlX21vZGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgZm9ybWF0X29wdGlvbnMgPSBmdW5jdGlvbihtb2RlX2lkKSB7XG4gIGxldCBvcHRpb25zID0ge31cblxuICBwcm9wcy5jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25fbGlzdCkgPT4ge1xuICAgIGlmKG9wdGlvbl9saXN0Lm1vZGVfaWQgPT0gbW9kZV9pZClcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25fbGlzdDtcbiAgfSlcblxuICAvKiBBZGQgdGhlIGNvcnJhY3QgZXZlbnQgZnVuY3Rpb25zICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5jaGFydCAmJiBvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSB7XG4gICAgb3B0aW9ucy5jaGFydC5ldmVudHMgPSBvcHRpb25zLmNoYXJ0LmV2ZW50cyB8fCB7fVxuICAgIGZvcihjb25zdCBbZXZlbnQsIGZ1bl0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykpIHtcbiAgICAgIGlmKGZ1biA9PSB1bmRlZmluZWQpIFxuICAgICAgICBjb250aW51ZVxuXG4gICAgICBvcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudF0gPSBOdG9wVXRpbHNbZnVuXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgICB9XG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueGF4aXMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnlheGlzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy50b29sdGlwICYmIG9wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcilcbiAgICBvcHRpb25zLnRvb2x0aXAuY3VzdG9tID0gTnRvcFV0aWxzW29wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcl1cblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgXG4gIC8qIFJldHVybiB0aGUgbGlzdCBvZiBmb3JtYXR0ZWQgb3B0aW9ucyBvZiB0aGUgY2hhcnQgKi9cbiAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICBsZXQgb3B0aW9ucyA9IGZvcm1hdF9vcHRpb25zKE51bWJlcihhY3RpdmVfZmlsdGVyX2xpc3RbJ2J1YmJsZV9tb2RlJ10uaWQpKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBvcHRpb25zLnNlcmllcyA9IGRhdGEuc2VyaWVzIHx8IHt9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxufVxuXG5jb25zdCBjbGlja19pdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG59XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAvKiBCZWZvcmUgbW91bnRpbmcgdGhlIHZhcmlvdXMgd2lkZ2V0cywgdXBkYXRlIHRoZSB1cmwgdG8gdGhlIGNvcnJlY3Qgb25lLCBieSBhZGRpbmcgaWZpZCwgZWNjLiAqL1xuICBjb25zdCBidWJibGVfbW9kZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpO1xuICBcbiAgaWYoIWJ1YmJsZV9tb2RlKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2J1YmJsZV9tb2RlJywgMCkgLyogRmlyc3QgRW50cnkgKi9cbiAgXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaWZpZCcsIHByb3BzLmlmaWQpIC8qIEN1cnJlbnQgaW50ZXJmYWNlICovXG5cbiAgZm9yKGNvbnN0IFtuYW1lLCBmaWx0ZXJzXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcy5hdmFpbGFibGVfZmlsdGVycykpIHtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgZmlsdGVyLmZpbHRlcl9uYW1lID0gbmFtZVxuICAgICAgaWYoZmlsdGVyLmN1cnJlbnRseV9hY3RpdmUpXG4gICAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdFtuYW1lXSA9IGZpbHRlcjtcbiAgICB9KVxuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIiA6Y2xhc3M9XCJbbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgc3R5bGU9XCJoZWlnaHQ6IDcwdmg7XCIgcmVmPVwiYm9keV9kaXZcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXJvdy1yZXZlcnNlIG1iLTJcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBtLTFcIiB0YWJpbmRleD1cIjBcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVsb2FkXCI+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIih2YWx1ZSwga2V5LCBpbmRleCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtaWY9XCJ2YWx1ZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTRyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bigncG9ydHNfYW5hbHlzaXMuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtYXhfZW50cmllc19yZWFjaGVkID09IHRydWVcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LWF1dG8gbS0xXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBzdHlsZT1cImN1cnNvcjogaGVscDtcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPFNhbmtleVxuICAgICAgICAgIHJlZj1cInNhbmtleV9jaGFydFwiXG4gICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgICAgIDpub19kYXRhX21lc3NhZ2U9XCJub19kYXRhX21lc3NhZ2VcIlxuICAgICAgICAgIDpzYW5rZXlfZGF0YT1cInNhbmtleV9kYXRhXCJcbiAgICAgICAgICBAdXBkYXRlX3dpZHRoPVwidXBkYXRlX3dpZHRoXCJcbiAgICAgICAgICBAdXBkYXRlX2hlaWdodD1cInVwZGF0ZV9oZWlnaHRcIlxuICAgICAgICAgIEBub2RlX2NsaWNrPVwib25fbm9kZV9jbGlja1wiPlxuICAgICAgICAgIDwvU2Fua2V5PiAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5cbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gcmVmKGZhbHNlKVxuY29uc3QgbWF4X2VudHJ5X3RpdGxlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm1heF9lbnRyaWVzJylcbmNvbnN0IG5vX2RhdGFfbWVzc2FnZSA9IF9pMThuKCdwb3J0c19hbmFseXNpcy5ub19kYXRhJylcbmNvbnN0IHNhbmtleV9jaGFydCA9IHJlZihudWxsKVxuY29uc3QgYm9keV9kaXYgPSByZWYobnVsbCk7XG5jb25zdCB3aWR0aCA9IHJlZihudWxsKTtcbmNvbnN0IGhlaWdodCA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9kYXRhID0gcmVmKHt9KTtcbmNvbnN0IGxpdmVfcmVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3ZsYW4vbGl2ZV9wb3J0cy5sdWFgXG5jb25zdCBoaXN0b3JpY2FsX3Jlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC92bGFuL2hpc3RvcmljYWxfcG9ydHMubHVhYFxuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSlcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGw0X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2w0cHJvdG8nKTtcbiAgXG4gIGlmKCF0aW1lZnJhbWUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndGltZWZyYW1lJywgJ25vbmUnKSAvKiBEZWZhdWx0IGxpdmUgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbicsICdub25lJykgLyogRGVmYXVsdCBhbGwgVkxBTnMgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbDRwcm90bycsICdub25lJykgLyogRGVmYXVsdCBubyBwcm90b2NvbCAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICB1cGRhdGVfaGVpZ2h0KCk7XG4gIHVwZGF0ZV93aWR0aCgpO1xuICB1cGRhdGVfc2Fua2V5KCk7XG59KTtcblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICBpZiAobm9kZS5saW5rKSB7IG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwobm9kZS5saW5rKTsgfVxufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICB1cGRhdGVfc2Fua2V5KCk7XG59XG5cbmNvbnN0IHVwZGF0ZV9zYW5rZXkgPSBmdW5jdGlvbigpIHtcbiAgc2V0X3NhbmtleV9kYXRhKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrX21heF9lbnRyaWVzKGRhdGEpIHtcbiAgbWF4X2VudHJpZXNfcmVhY2hlZC52YWx1ZSA9IGRhdGEubWF4X2VudHJpZXNfcmVhY2hlZFxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEoKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpOyAgICBcbiAgc2Fua2V5X2RhdGEudmFsdWUgPSBkYXRhO1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgY29uc3QgdXJsX3JlcXVlc3QgPSBnZXRfc2Fua2V5X3VybCgpO1xuICBsZXQgZ3JhcGggPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICBjaGVja19tYXhfZW50cmllcyhncmFwaCk7XG4gIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG4gIGNvbnN0IHNhbmtleV9kYXRhID0gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKGdyYXBoKTtcbiAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgKHNhbmtleV9kYXRhLmxpbmtzLmxlbmd0aCA+IDAgJiYgc2Fua2V5X2RhdGEubm9kZXMubGVuZ3RoID4gMCkgPyBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyh0cnVlKTtcbiAgXG4gIFxuICByZXR1cm4gc2Fua2V5X2RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfdXJsKCkge1xuICBsZXQgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKTtcbiAgbGV0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZWZyYW1lXCIpO1xuICBsZXQgbDRwcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwibDRwcm90b1wiKTtcbiAgaWYodmxhbiA9PSAnbm9uZScpIHsgdmxhbiA9ICcnOyB9XG4gIGlmKHRpbWVmcmFtZSA9PSAnbm9uZScpIHsgdGltZWZyYW1lID0gJyc7IH1cbiAgaWYobDRwcm90byA9PSAnbm9uZScpIHsgbDRwcm90byA9ICcnOyB9XG4gIFxuICBsZXQgdXJsX3JlcXVlc3QgPSAnJztcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG4gICAgdmxhbjogdmxhbixcbiAgICB0aW1lZnJhbWU6IHRpbWVmcmFtZSxcbiAgICBsNHByb3RvOiBsNHByb3RvXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgaWYodGltZWZyYW1lID09ICcnKSB7IHVybF9yZXF1ZXN0ID0gYCR7bGl2ZV9yZXN0fT8ke3VybF9wYXJhbXN9YDsgfVxuICBlbHNlIHsgdXJsX3JlcXVlc3QgPSBgJHtoaXN0b3JpY2FsX3Jlc3R9PyR7dXJsX3BhcmFtc31gOyB9XG5cbiAgcmV0dXJuIHVybF9yZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEocmVzKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9LCBsaW5rX3RvX25vZGVzX2RpY3QgPSB7fTtcbiAgICAvLyBjcmVhdGUgYSBub2RlIGRpY3RcbiAgICByZXMubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gbm9kZV9kaWN0W25vZGUubm9kZV9pZF0gPSBub2RlKTtcbiAgICBcbiAgICBsZXQgZl9nZXRfbGlua19ub2RlX2lkID0gKGxpbmspID0+IHtcblx0cmV0dXJuIGAke2xpbmsuc291cmNlX25vZGVfaWR9XyR7bGluay5sYWJlbH1gOyBcbiAgICB9O1xuICAgIC8vIG1lcmdlIGFsbCBsaW5rcyBieSBsYWJlbFxuICAgIHJlcy5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdGxldCBsaW5rX25vZGVfaWQgPSBmX2dldF9saW5rX25vZGVfaWQobGluayk7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGlmIChsaW5rX3RvX25vZGVzID09IG51bGwpIHtcblx0ICAgIGxpbmtfdG9fbm9kZXMgPSB7XG5cdFx0aWQ6IGxpbmtfbm9kZV9pZCxcblx0XHRsYWJlbDogbGluay5sYWJlbCxcbiAgICBsaW5rOiBsaW5rLm9wdGlvbmFsX2luZm8ubGluayxcblx0XHRub2RlX2xpbmtzOiBbXSxcdFx0XG5cdCAgICB9O1xuXHQgICAgbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF0gPSBsaW5rX3RvX25vZGVzO1xuXHR9XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5wdXNoKHtcblx0ICAgIHNvdXJjZTogbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdLFxuXHQgICAgdGFyZ2V0OiBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF0sXG5cdCAgICB2YWx1ZTogbGluay52YWx1ZSxcblx0fSk7XHRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBjcmVhdGUgbm9kZXMgYW5kIGxpbmtzXG4gICAgbGV0IG5vZGVzID0gcmVzLm5vZGVzLm1hcCgobikgPT4gbiksIGxpbmtzID0gW107XG4gICAgZm9yIChsZXQgbGlua19ub2RlX2lkIGluIGxpbmtfdG9fbm9kZXNfZGljdCkge1xuXHRsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuXHRsZXQgbGlua19ub2RlID0ge1xuXHQgICAgbm9kZV9pZDogbGlua190b19ub2Rlcy5pZCxcblx0ICAgIGxhYmVsOiBsaW5rX3RvX25vZGVzLmxhYmVsLFxuICAgICAgbGluazogbGlua190b19ub2Rlcy5saW5rLFxuXHR9O1xuXHRub2Rlcy5wdXNoKGxpbmtfbm9kZSk7XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGluay5zb3VyY2Uubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHQgICAgfSk7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0dGFyZ2V0X25vZGVfaWQ6IGxpbmsudGFyZ2V0Lm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHQgICAgfSk7XG5cdH0pO1xuICAgIH1cbiAgICBsZXQgc2Fua2V5X25vZGVzID0gbm9kZXMubWFwKChuLCBpbmRleCkgPT4ge1xuXHRyZXR1cm4geyBpbmRleCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4gfTtcbiAgICB9KTtcbiAgICBsZXQgc2Fua2V5X25vZGVfZGljdCA9IHt9OyAgICBcbiAgICBzYW5rZXlfbm9kZXMuZm9yRWFjaCgoc24sIGluZGV4KSA9PiBzYW5rZXlfbm9kZV9kaWN0W3NuLmRhdGEubm9kZV9pZF0gPSBzbik7XG4gICAgbGV0IHNhbmtleV9saW5rcyA9IGxpbmtzLm1hcCgobCkgPT4ge1xuXHRsZXQgc291cmNlX2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXS5pbmRleDtcblx0bGV0IHRhcmdldF9pbmRleCA9IHNhbmtleV9ub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0uaW5kZXg7XG5cdHJldHVybiB7XG5cdCAgICBzb3VyY2U6IHNvdXJjZV9pbmRleCxcblx0ICAgIHRhcmdldDogdGFyZ2V0X2luZGV4LFxuXHQgICAgdmFsdWU6IGwudmFsdWUsXG5cdCAgICBsYWJlbDogbC5sYWJlbCxcblx0fTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBub2Rlczogc2Fua2V5X25vZGVzLCBsaW5rczogc2Fua2V5X2xpbmtzIH07XG59XG5cbi8vIHJlbW92ZSBhbGwgbGlua3Mgd2l0aCBhIG5vdCBleGlzdGluZyBub2RlXG5mdW5jdGlvbiBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIG5vdCBleGlzdGluZyBzb3VyY2UvdGFyZ2V0IG5vZGVgKTsgICAgXG4gICAgbGV0IGxpbmtzID0gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2dfbGluayk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9O1xufVxuXG4vLyByZW1lb3ZlIGFsbCBjaXJjdWxhciBsaW5rcyBhbmQgcmV0dXJuIGEgZGFnIGdyYXBoXG5mdW5jdGlvbiBtYWtlX2RhZ19ncmFwaChncmFwaCkgeyAgICBcbiAgICBsZXQgbm9kZXNfZGVzdF9kaWN0ID0ge307IC8vIGRpY3Rpb25hcnkgeyBbbm9kZV9zb3VyY2VfaWRdOiBub2Rlc190YXJnZXRbXSB9XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgPT0gbnVsbCkge1xuXHQgICAgbm9kZXNfZGVzdCA9IFtdO1xuXHQgICAgbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gbm9kZXNfZGVzdDtcblx0fVxuXHRub2Rlc19kZXN0LnB1c2gobC50YXJnZXRfbm9kZV9pZCk7XG4gICAgfSk7XG4gICAgbGV0IG5vZGVzX3RvX2NoZWNrID0ge307IC8vIHRlbXAgZGljdGlvbmFyeSB1c2VkIGZyb20gZl9hZGRfY2lyY3VsYXJfbGluayBcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiB7XG5cdG5vZGVzX3RvX2NoZWNrW24ubm9kZV9pZF0gPSB7IGNoZWNrZWQ6IGZhbHNlLCB2aXNpdGVkOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgLy8gY2lyY3VsYXIgbGlua3MgZGljdCAoa2V5OiBgJHtzb3VyY2Vfbm9kZV9pZH1fJHt0YXJnZXRfbm9kZV9pZH1gKVxuICAgIGxldCBjaXJjdWxhcl9saW5rcyA9IHt9O1xuICAgIGxldCBmX2dldF9saW5rX2tleSA9IChzb3VyY2VfaWQsIHRhcmdldF9pZCkgPT4gYCR7c291cmNlX2lkfV8ke3RhcmdldF9pZH1gO1xuICAgIFxuICAgIC8vIGRlZXAgbmF2aWdhdGUgc3RhcnRpbmcgZnJvbSBub2RlX2lkIGFuZCBhZGQgY2lyY3VsYXJfbGlua3MgdmlzaXRlZCBpbiBjaXJjdWxhcl9saW5rcyBkaWN0IFxuICAgIGxldCBmX3NldF9jaXJjdWxhcl9saW5rcyA9IChub2RlX2lkLCBmcm9tX25vZGVfaWQpID0+IHtcblx0bGV0IG5vZGVfdG9fY2hlY2sgPSBub2Rlc190b19jaGVja1tub2RlX2lkXTtcblx0aWYgKG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRlbHNlIGlmIChub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPT0gdHJ1ZSkge1xuXHQgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkoZnJvbV9ub2RlX2lkLCBub2RlX2lkKTtcblx0ICAgIGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9IHRydWU7XG5cdCAgICBjb25zb2xlLmVycm9yKGBMaW5rIChzb3VyY2U6ICR7ZnJvbV9ub2RlX2lkfSwgdGFyZ2V0OiAke25vZGVfaWR9ICkgaXMgYSBjaXJjdWxhciBsaW5rYCk7XG5cdCAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcblx0ICAgIHJldHVybjtcblx0fVxuXHRub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSB0cnVlO1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgIT0gbnVsbCkge1xuXHQgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc19kZXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0bGV0IHRhcmdldF9ub2RlX2lkID0gbm9kZXNfZGVzdFtpXTtcblx0XHRmX3NldF9jaXJjdWxhcl9saW5rcyh0YXJnZXRfbm9kZV9pZCwgbm9kZV9pZCk7XHQgICAgXG5cdCAgICB9XG5cdH1cblx0bm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG5cdG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvLyBzZXQgY2lyY3VsYXJfbGlua3MgZGljdGlvbmFyeVxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IGZfc2V0X2NpcmN1bGFyX2xpbmtzKG4ubm9kZV9pZCkpO1xuICAgIFxuICAgIC8vIHJlbW92ZSBubyBkYWcgbm9kZXMvbGlua3NcbiAgICBsZXQgZl9maWx0ZXJfbGluayA9IChsKSA9PiB7XG5cdGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGwuc291cmNlX25vZGVfaWQsIGwudGFyZ2V0X25vZGVfaWQpO1xuXHRsZXQgdGFrZV9saW5rID0gY2lyY3VsYXJfbGlua3NbbGlua19rZXldID09IG51bGw7XG5cdHJldHVybiB0YWtlX2xpbms7XG4gICAgfTtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlcl9saW5rLCBmX2xvZ19saW5rKTtcbiAgICBcbiAgICBsZXQgZl9sb2dfbm9kZSA9IChuKSA9PiBjb25zb2xlLmVycm9yKGBub2RlICR7bi5ub2RlX2lkfSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBub2RlcyA9IGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoe25vZGVzOiBncmFwaC5ub2RlcywgbGlua3N9LCBmX2xvZ19ub2RlKTtcblxuICAgIC8vIHJldHVybiBhIGRhZyBncmFwaFxuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBub2RlX2RpY3Rbbi5ub2RlX2lkXSA9IHRydWUpO1xuICAgIGxldCBmX2ZpbHRlciA9IChsKSA9PiBub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gIT0gbnVsbCAmJiBub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gIT0gbnVsbDsgICAgXG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmZ1bmN0aW9uIGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IGxpbmtfc291cmNlX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua190YXJnZXRfZGljdCA9IHt9O1xuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcblx0bGlua19zb3VyY2VfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IHRydWU7XG5cdGxpbmtfdGFyZ2V0X2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIGxldCBmX2ZpbHRlciA9IChuKSA9PiBsaW5rX3NvdXJjZV9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZSB8fCBsaW5rX3RhcmdldF9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZTtcbiAgICBsZXQgbm9kZXMgPSBmaWx0ZXJfbG9nKGdyYXBoLm5vZGVzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBub2Rlcztcbn1cblxuLy8gbG9nIGVsZW1lbnRzIGRlbGV0ZWQgaWYgZl9sb2cgIT0gbnVsbFxuZnVuY3Rpb24gZmlsdGVyX2xvZyhlbGVtZW50cywgZl9maWx0ZXIsIGZfbG9nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZSkgPT4ge1xuXHRjb25zdCB0YWtlX2VsZW1lbnQgPSBmX2ZpbHRlcihlKTtcblx0aWYgKHRha2VfZWxlbWVudCA9PSBmYWxzZSAmJiBmX2xvZyAhPSBudWxsKSB7XG5cdCAgICBmX2xvZyhlKTtcblx0fVxuXHRyZXR1cm4gdGFrZV9lbGVtZW50O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfaGVpZ2h0KCkge1xuICBoZWlnaHQudmFsdWUgPSAkKGJvZHlfZGl2LnZhbHVlKS5oZWlnaHQoKSAtIDEwMDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3dpZHRoKCkge1xuICB3aWR0aC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLndpZHRoKCkgLSAxMDtcbn1cblxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG5vLXdyYXBcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDttYXJnaW4tcmlnaHQ6MXJlbTttaW4td2lkdGg6MjVyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2NyaXRlcmlhX2ZpbHRlcicpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9jcml0ZXJpYVwiIDpvcHRpb25zPVwiY3JpdGVyaWFfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX2NyaXRlcmlhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiXG5cdFx0XHRcdCAgICAgICA6Y3NyZj1cImNzcmZcIlxuXHRcdFx0XHQgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuXHRcdFx0XHQgICAgICAgOnRhYmxlX2NvbmZpZ19pZD1cInRhYmxlX2NvbmZpZ19pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG5cdFx0XHRcdCAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29uZmlnPVwibWFwX2NvbmZpZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiBmaWx0ZXJfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm9wdC5jb3VudCA9PSBudWxsXCI+e3sgb3B0LmxhYmVsIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPnt7IG9wdC5sYWJlbCArIFwiIChcIiArIG9wdC5jb3VudCArIFwiKVwiIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3Rcbn0pO1xuXG5jb25zdCBjc3JmID0gcmVmKHByb3BzLmNvbnRleHQuY3NyZik7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBjcml0ZXJpYV9saXN0X2RlZiA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcImFwcGxpY2F0aW9uX3Byb3RvXCIpLCB2YWx1ZTogMSwgcGFyYW06IFwiYXBwbGljYXRpb25fcHJvdG9jb2xcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9hcHBfcHJvdG9cIiwgZW50ZXJwcmlzZV9tOiBmYWxzZSwgc2VhcmNoX2VuYWJsZWQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcImNsaWVudFwiKSwgdmFsdWU6IDIsIHBhcmFtOiBcImNsaWVudFwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2NsaWVudFwiLCBlbnRlcnByaXNlX206IGZhbHNlLCBzZWFyY2hfZW5hYmxlZDogZmFsc2UgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcImNsaWVudF9zZXJ2ZXJcIiksIHZhbHVlOiA0LCBwYXJhbTogXCJjbGllbnRfc2VydmVyXCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfY2xpZW50X3NlcnZlclwiLCBlbnRlcnByaXNlX206IHRydWUsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlcl9hcHBsaWNhdGlvbl9wcm90b1wiKSwgdmFsdWU6IDUsIHBhcmFtOiBcImFwcF9jbGllbnRfc2VydmVyXCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfYXBwX2NsaWVudF9zZXJ2ZXJcIiwgZW50ZXJwcmlzZV9tOiB0cnVlLCBzZWFyY2hfZW5hYmxlZDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlcl9zcnZfcG9ydFwiKSwgdmFsdWU6IDcsIHBhcmFtOiBcImNsaWVudF9zZXJ2ZXJfc3J2X3BvcnRcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9jbGllbnRfc2VydmVyX3Nydl9wb3J0XCIsIGVudGVycHJpc2VfbTogZmFsc2UsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiaW5mb1wiKSwgdmFsdWU6IDYsIHBhcmFtOiBcImluZm9cIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9pbmZvXCIsIGVudGVycHJpc2VfbTogdHJ1ZSwgc2VhcmNoX2VuYWJsZWQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcInNlcnZlclwiKSwgdmFsdWU6IDMsIHBhcmFtOiBcInNlcnZlclwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX3NlcnZlclwiLCBlbnRlcnByaXNlX206IGZhbHNlLCBzZWFyY2hfZW5hYmxlZDogZmFsc2UgfSxcbl07XG5cbmNvbnN0IGxvYWRpbmcgPSByZWYobnVsbClcbmNvbnN0IHRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cyA9IHJlZigpO1xuY29uc3QgZmlsdGVyX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSlcblxuY29uc3QgdGFibGVfY29uZmlnX2lkID0gcmVmKCdhZ2dyZWdhdGVkX2xpdmVfZmxvd3MnKTtcbmNvbnN0IHRhYmxlX2lkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZT8udmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gdGFibGVfY29uZmlnX2lkLnZhbHVlOyB9XG4gICAgbGV0IGlkID0gYCR7dGFibGVfY29uZmlnX2lkLnZhbHVlfV8ke3NlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlfWA7XG4gICAgcmV0dXJuIGlkO1xufSk7XG5jb25zdCBzZWxlY3RlZF9jcml0ZXJpYSA9IHJlZihjcml0ZXJpYV9saXN0X2RlZlswXSk7XG5sZXQgZGVmYXVsdF91cmxfcGFyYW1zID0ge307XG5cbmNvbnN0IGNyaXRlcmlhX2xpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuaXNfbnRvcF9lbnRlcnByaXNlX20pIHtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJpYV9saXN0X2RlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgY3JpdGVyYV9saXN0X2RlZl9jb20gPSBbXTtcbiAgICAgICAgY3JpdGVyaWFfbGlzdF9kZWYuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjLmVudGVycHJpc2VfbSlcbiAgICAgICAgICAgICAgICBjcml0ZXJhX2xpc3RfZGVmX2NvbS5wdXNoKGMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJhX2xpc3RfZGVmX2NvbSk7XG4gICAgfVxufSgpO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBpbml0X3NlbGVjdGVkX2NyaXRlcmlhKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoKTtcbiAgICBcbn0pO1xuXG5mdW5jdGlvbiBpbml0X3NlbGVjdGVkX2NyaXRlcmlhKCkge1xuICAgIGxldCBhZ2dyZWdhdGlvbl9jcml0ZXJpYSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRpb25fY3JpdGVyaWFcIik7XG4gICAgaWYgKGFnZ3JlZ2F0aW9uX2NyaXRlcmlhID09IG51bGwgfHwgYWdncmVnYXRpb25fY3JpdGVyaWEgPT0gXCJcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlID0gY3JpdGVyaWFfbGlzdF9kZWYuZmluZCgoYykgPT4gYy5wYXJhbSA9PSBhZ2dyZWdhdGlvbl9jcml0ZXJpYSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9jcml0ZXJpYSgpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJhZ2dyZWdhdGlvbl9jcml0ZXJpYVwiLCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS5wYXJhbSk7XG59O1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICAvKmxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcyhhY3RpdmVfcGFnZSwgcGVyX3BhZ2UsIGNvbHVtbnNfd3JhcCwgbWFwX3NlYXJjaCwgZmlyc3RfZ2V0X3Jvd3MpO1xuICAgICAgc2V0X3BhcmFtc19pbl91cmwocGFyYW1zKTsqL1xuICAgIGxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcygpO1xuICAgIHJldHVybiBwYXJhbXM7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVlID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KFwib3ZlcnZpZXdcIik7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xufVxuZnVuY3Rpb24gc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpIHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChlbC5iYXNpY19sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5iYXNpY19sYWJlbCA9IGVsLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cmxfZW50cnkgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShlbC5pZClcbiAgICAgICAgaWYgKHVybF9lbnRyeSAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbC5vcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24udmFsdWUudG9TdHJpbmcoKSA9PT0gdXJsX2VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmxhYmVsID0gYCR7ZWwuYmFzaWNfbGFiZWx9OiAke29wdGlvbi5sYWJlbCB8fCBvcHRpb24udmFsdWV9YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuY29uc3QgZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duID0gKGZpbHRlciwgZmlsdGVyX2luZGV4KSA9PiB7XG4gICAgcmV0dXJuIChfKSA9PiB7XG4gICAgICAgIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCk7XG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIGFkZF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChvcHQua2V5LCBgJHtvcHQudmFsdWV9YCk7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICAgIHRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCkge1xuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSB0cnVlO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgaWYgKGZpbHRlci5kYXRhX2xvYWRlZCA9PSBmYWxzZSkge1xuICAgICAgICBsZXQgbmV3X2ZpbHRlcl9hcnJheSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShmaWx0ZXIuaWQsIGZpbHRlcik7XG4gICAgICAgIGZpbHRlci5vcHRpb25zID0gbmV3X2ZpbHRlcl9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IGZpbHRlci5pZCkub3B0aW9ucztcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgbGV0IGRyb3Bkb3duID0gZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW2ZpbHRlcl9pbmRleF07XG4gICAgICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICAgIH1cbiAgICBmaWx0ZXIuc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGxvYWQgZmlsdGVycyAoSnVzdCBWTEFOcykgKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShhY3Rpb24sIGZpbHRlcikge1xuICAgIGxldCBpZmlkX3BhcmFtID0ge1xuICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuY29udGV4dC5pZmlkXG4gICAgfTtcbiAgICBsZXQgaWZpZF9wYXJhbV9mb3JfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGlmaWRfcGFyYW0pO1xuICAgIFxuICAgIFxuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9mbG93L2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93c19maWx0ZXJzLmx1YT9hY3Rpb249JHthY3Rpb259JiR7dXJsX3BhcmFtc30mJHtpZmlkX3BhcmFtX2Zvcl91cmx9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIHJlcy5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0LmFjdGlvbiB8fCB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICAgICAgaGlkZGVuOiAodC52YWx1ZS5sZW5ndGggPT0gMSlcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldF91cmxfcGFyYW1zKCkge1xuICAgIGxldCBhY3R1YWxfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuY29udGV4dC5pZmlkLFxuICAgICAgICB2bGFuX2lkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5faWRcIikgIC8qIE5vIGZpbHRlciBieSBkZWZhdWx0ICovLFxuICAgICAgICBkZXZpY2VJUDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJkZXZpY2VJUFwiKSxcbiAgICAgICAgYWdncmVnYXRpb25fY3JpdGVyaWE6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRpb25fY3JpdGVyaWFcIikgfHwgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUucGFyYW0sXG4gICAgICAgIGhvc3Q6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKSB8fCBwcm9wcy5jb250ZXh0Lmhvc3QsXG4gICAgfTsgICAgXG4gICAgXG4gICAgcmV0dXJuIGFjdHVhbF9wYXJhbXM7XG59XG5cblxuY29uc3QgbWFwX2NvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25maWcuZW5hYmxlX3NlYXJjaCA9IHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnNlYXJjaF9lbmFibGVkID09IHRydWU7XG4gICAgcmV0dXJuIGNvbmZpZztcbn07XG5cbi8vLyBtZXRob2RzIHRvIGdldCBjb2x1bW5zIGNvbmZpZ1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBjb2x1bW5zID0gW107ICAgIFxuICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAge1xuICAgICAgICAgICAgc29ydGFibGU6IGZhbHNlLCB0aXRsZV9pMThuOidmbG93c19wYWdlLmxpdmVfZmxvd3MnICxuYW1lOiAnZmxvd3NfaWNvbicsIGRhdGFfZmllbGQ6ICdsaXZlX2Zsb3dzJywgY2xhc3M6IFsndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2Zsb3dzX2ljb24oZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMSkge1xuXG4gICAgICAgIC8vIGFwcGxpY2F0aW9uIHByb3RvY29sIGNhc2VcbiAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9cIiwgc29ydGFibGU6IHRydWUsICBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhX2ZpZWxkOiAnYXBwbGljYXRpb24nLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gYCR7ZGF0YV9maWVsZC5sYWJlbF93aXRoX2ljb25zfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qe1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZFwiLHNvcnRhYmxlOiBmYWxzZSwgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YV9maWVsZDogJ2lzX25vdF9ndWVzc2VkJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9hcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSovXG4gICAgICAgICk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDIpIHtcbiAgICAgICAgLy8gY2xpZW50IGNhc2VcbiAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ2NsaWVudCcsIGRhdGFfZmllbGQ6ICdjbGllbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfY2xpZW50X25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMykge1xuICAgICAgICAvLyBzZXJ2ZXIgY2FzZVxuICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnY2xpZW50JywgZGF0YV9maWVsZDogJ2NsaWVudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2NsaWVudF9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3BzLmNvbnRleHQuaXNfbnRvcF9lbnRlcnByaXNlX20pIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDQgfHwgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNyApIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnY2xpZW50JywgZGF0YV9maWVsZDogJ2NsaWVudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2NsaWVudF9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNSkge1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKFxuXHRcdHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJjbGllbnRcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdjbGllbnQnLCBkYXRhX2ZpZWxkOiAnY2xpZW50JywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcblx0XHRcdHJldHVybiBmb3JtYXRfY2xpZW50X25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSk7ICAgICAgICAgICAgICAgIFxuXHRcdCAgICB9XG5cdFx0fSxcblx0XHR7XG5cdFx0ICAgIHRpdGxlX2kxOG46IFwibGFzdF9zZXJ2ZXJcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdzZXJ2ZXInLCBkYXRhX2ZpZWxkOiAnc2VydmVyJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcblx0XHRcdHJldHVybiBmb3JtYXRfc2VydmVyX25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSk7XG5cdFx0ICAgIH1cblx0XHR9LFxuXHRcdHtcblx0XHQgICAgdGl0bGVfaTE4bjogXCJhcHBsaWNhdGlvbl9wcm90b1wiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YV9maWVsZDogJ2FwcGxpY2F0aW9uJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQoZGF0YV9maWVsZCwgcm93RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIGAke2RhdGFfZmllbGQubGFiZWxfd2l0aF9pY29uc31gXG5cdFx0ICAgIH1cblx0XHR9KTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA2KSB7XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImluZm9cIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdpbmZvJywgZGF0YV9maWVsZDogJ2luZm8nLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7ZGF0YV9maWVsZC5sYWJlbH1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5jb250ZXh0LnZsYW5zLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlX2kxOG46IFwidmxhblwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3ZsYW5faWQnLCBkYXRhX2ZpZWxkOiAndmxhbl9pZCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwICcsJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFfZmllbGQuaWQgPT09IDAgfHwgZGF0YV9maWVsZC5pZCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBpMThuKCdub192bGFuJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT92bGFuPTBcIj4ke2xhYmVsfTwvYT5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/dmxhbj0ke2RhdGFfZmllbGQuaWR9XCI+JHtkYXRhX2ZpZWxkLmxhYmVsfTwvYT5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29sdW1ucy5wdXNoKHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJmbG93c1wiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2Zsb3dzJywgZGF0YV9maWVsZDogJ2Zsb3dzJywgY2xhc3M6IFsndGV4dC1ub3dyYXAgJywndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gICAgfSwge1xuICAgICAgICB0aXRsZV9pMThuOiBcInRvdGFsX3Njb3JlXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnc2NvcmUnLCBkYXRhX2ZpZWxkOiAndG90X3Njb3JlJywgY2xhc3M6IFsndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG4gICAgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gMiAmJiBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSA0ICYmIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDcpXG4gICAgICAgIGNvbHVtbnMucHVzaCh7IHRpdGxlX2kxOG46IFwiY2xpZW50c1wiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ251bV9jbGllbnRzJywgZGF0YV9maWVsZDogJ251bV9jbGllbnRzJywgY2xhc3M6IFsndGV4dC1ub3dyYXAgJywndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0pO1xuXG4gICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDMgJiYgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gNCAmJiBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSA3KVxuICAgICAgICBjb2x1bW5zLnB1c2goeyB0aXRsZV9pMThuOiBcInNlcnZlcnNcIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdudW1fc2VydmVycycsIGRhdGFfZmllbGQ6ICdudW1fc2VydmVycycsIGNsYXNzOiBbJ3RleHQtbm93cmFwICcsJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9KTtcblxuICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgIHRpdGxlX2kxOG46IFwiYnJlYWtkb3duXCIsICBzb3J0YWJsZTogZmFsc2UsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhX2ZpZWxkOiAnYnJlYWtkb3duJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnLCd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVCcmVha2Rvd24oZGF0YV9maWVsZC5wZXJjZW50YWdlX2J5dGVzX3NlbnQsIGRhdGFfZmllbGQucGVyY2VudGFnZV9ieXRlc19yY3ZkLCBpMThuKCdzZW50JyksIGkxOG4oJ3JjdmQnKSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIHRpdGxlX2kxOG46IFwidHJhZmZpY19zZW50XCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAnYnl0ZXNfc2VudCcsIGRhdGFfZmllbGQ6ICdieXRlc19zZW50JywgY2xhc3M6IFsndGV4dC1ub3dyYXAnLCd0ZXh0LWVuZCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhX2ZpZWxkKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJ0cmFmZmljX3JjdmRcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdieXRlc19yY3ZkJywgZGF0YV9maWVsZDogJ2J5dGVzX3JjdmQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCcsJ3RleHQtZW5kJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGFfZmllbGQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICB0aXRsZV9pMThuOiBcInRvdGFsX3RyYWZmaWNcIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICd0b3RfdHJhZmZpYycsIGRhdGFfZmllbGQ6ICd0b3RfdHJhZmZpYycsIGNsYXNzOiBbJ3RleHQtbm93cmFwJywndGV4dC1lbmQnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YV9maWVsZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29sdW1ucztcbn1cblxuY29uc3QgZm9ybWF0X2NsaWVudF9uYW1lID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBsZXQgYWxlcnRfbGFiZWwgPSAnJ1xuICAgIGlmIChkYXRhLmlzX2FsZXJ0ZWQpIHtcbiAgICAgICAgYWxlcnRfbGFiZWwgPSBgPGkgY2xhc3M9J2ZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZScgc3R5bGU9J2NvbG9yOiAjQjk0QTQ4Oyc+PC9pPmA7XG4gICAgfVxuXG4gICAgaWYgKCFkYXRhLmluX21lbW9yeSkge1xuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH0gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc31gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/Y2xpZW50PSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIj4ke2RhdGEubGFiZWx9PC9hPiAke2FsZXJ0X2xhYmVsfSAke2RhdGEuZXh0cmFfbGFiZWxzfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaXB9JnZsYW49JHtkYXRhLnZsYW5faWR9XCIgZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnIHRpdGxlPScnPjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9hPmA7XG4gICAgfVxufVxuXG5jb25zdCBmb3JtYXRfc2VydmVyX25hbWUgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGxldCBhbGVydF9sYWJlbCA9ICcnXG4gICAgaWYgKGRhdGEuaXNfYWxlcnRlZCkge1xuICAgICAgICBhbGVydF9sYWJlbCA9IGA8aSBjbGFzcz0nZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlJyBzdHlsZT0nY29sb3I6ICNCOTRBNDg7Jz48L2k+YDtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGEuaW5fbWVtb3J5KSB7XG4gICAgICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA3ICYmIHJvd0RhdGEuc3J2X3BvcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWx9ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9OiR7cm93RGF0YS5zcnZfcG9ydC5sYWJlbH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWx9ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9YDtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcgJiYgIHJvd0RhdGEuc3J2X3BvcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9zZXJ2ZXI9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7ZGF0YS5sYWJlbH08L2E+ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIiBkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+OjxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3BvcnQ9JHtyb3dEYXRhLnNydl9wb3J0LmlkfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7cm93RGF0YS5zcnZfcG9ydC5sYWJlbH08L2E+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/c2VydmVyPSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIj4ke2RhdGEubGFiZWx9PC9hPiAke2FsZXJ0X2xhYmVsfSAke2RhdGEuZXh0cmFfbGFiZWxzfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaXB9JnZsYW49JHtkYXRhLnZsYW5faWR9XCIgZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnIHRpdGxlPScnPjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9hPmA7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgZm9ybWF0X2Zsb3dzX2ljb24gPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGxldCB1cmwgPSBgYDtcbiAgICBsZXQgYWRkX2hvc3QgPSBmYWxzZTtcbiAgICBpZihwcm9wcy5jb250ZXh0Lmhvc3QgIT0gbnVsbCAmJiBwcm9wcy5jb250ZXh0Lmhvc3QgIT0gXCJcIiApXG4gICAgICAgIGFkZF9ob3N0ID0gdHJ1ZTtcbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMSkge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9hcHBsaWNhdGlvbj0ke3Jvd0RhdGEuYXBwbGljYXRpb24uaWR9YDtcbiAgICAgICAgaWYgKGFkZF9ob3N0KSB1cmwgPSB1cmwgKyBgJmhvc3Q9YCtwcm9wcy5jb250ZXh0Lmhvc3Q7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDIpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2NsaWVudD0ke3Jvd0RhdGEuY2xpZW50LmlwfSZ2bGFuPSR7cm93RGF0YS5jbGllbnQudmxhbl9pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDMpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3NlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS5zZXJ2ZXIudmxhbl9pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDQpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2NsaWVudD0ke3Jvd0RhdGEuY2xpZW50LmlwfSZzZXJ2ZXI9JHtyb3dEYXRhLnNlcnZlci5pcH0mdmxhbj0ke3Jvd0RhdGEudmxhbl9pZC5pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDUpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2FwcGxpY2F0aW9uPSR7cm93RGF0YS5hcHBsaWNhdGlvbi5pZH0mY2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnNlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkLmlkfWA7XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNikge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9mbG93X2luZm89JHtyb3dEYXRhLmluZm8uaWR9YDtcbiAgICAgICAgaWYgKGFkZF9ob3N0KSB1cmwgPSB1cmwgKyBgJmhvc3Q9YCtwcm9wcy5jb250ZXh0Lmhvc3Q7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcpIHtcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/Y2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnNlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkLmlkfSZzcnZfcG9ydD0ke3Jvd0RhdGEuc3J2X3BvcnQuaWR9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gYDxhIGhyZWY9JHt1cmx9IGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4taW5mb1wiID48aSBjbGFzcz0gJ2ZhcyBmYS1zdHJlYW0nPjwvaT48L2E+YFxufVxuXG5jb25zdCBmb3JtYXRfYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgaWYocm93RGF0YS5jb25maWRlbmNlID09IDAgKVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbF93aXRoX2ljb25zfSA8c3BhbiBjbGFzcz1cXFwiYmFkZ2UgYmctd2FybmluZ1xcXCIgdGl0bGU9XFxcIiBgKyByb3dEYXRhLmNvbmZpZGVuY2VfbmFtZSArIGBcXFwiPmArIHJvd0RhdGEuY29uZmlkZW5jZV9uYW1lICsgYCA8L3NwYW4+YFxuICAgIGVsc2UgaWYgKHJvd0RhdGEuY29uZmlkZW5jZSlcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWxfd2l0aF9pY29uc30gPHNwYW4gY2xhc3M9XFxcImJhZGdlIGJnLXN1Y2Nlc3NcXFwiIHRpdGxlPVxcXCJgKyByb3dEYXRhLmNvbmZpZGVuY2VfbmFtZSArIGAgXFxcIj4gYCsgcm93RGF0YS5jb25maWRlbmNlX25hbWUgKyBgPC9zcGFuPmBcbiAgICBcbiAgICAgICAgXG59XG5cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwiYWdncmVnYXRlZF9saXZlX2Zsb3dzXCI+ICAgICAgICAgIFxuICAgIDxEYXRhdGFibGUgcmVmPVwidGFibGVfdGVzdFwiXG5cdCAgICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcblx0ICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cInRhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG5cdCAgICAgICA6ZGF0YV91cmw9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuXHQgICAgICAgOmZpbHRlcl9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2ZpbHRlcnNcIlxuXHQgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJ0YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG5cdCAgICAgICA6dGFibGVfY29uZmlnPVwidGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgIDwvRGF0YXRhYmxlPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdXJsOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIGNvbHVtbnNfY29uZmlnOiBBcnJheVxufSk7XG5cbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSlcbmNvbnN0IHRhYmxlX3Rlc3QgPSByZWYobnVsbCk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIHNldF9kYXRhdGFibGVfY29uZmlnKCk7XG59KTtcblxuZnVuY3Rpb24gc2V0X2RhdGF0YWJsZV9jb25maWcoKSB7XG4gICAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gICAgXG4gICAgbGV0IHBhcmFtcyA9IHsgXG5cdGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5pZmlkLFx0XG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIFxuICAgIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcblx0dGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+Jyxcblx0Y2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuXHRhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICAgICAgICB0YWJsZV90ZXN0LnZhbHVlLnJlbG9hZCgpO1xuXHR9XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG5cdHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcblx0ZGF0YV91cmw6IGAke3Byb3BzLnVybH0/JHt1cmxfcGFyYW1zfWAsXG5cdGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgfTtcbiAgICBcbiAgICBsZXQgY29sdW1ucyA9IFtdO1xuICAgIFxuICAgIGRlZmF1bHREYXRhdGFibGVDb25maWcuY29sdW1uc19jb25maWcgPSBwcm9wcy5jb2x1bW5zX2NvbmZpZztcbiAgICB0YWJsZV9jb25maWcudmFsdWUgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnO1xufVxuICAgIFxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cblxuICAgICAgPCEtLSBSdWxlIElEIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIiB2LXNob3c9XCIhaXNfb3Blbl9pbl9hZGRcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtMTJcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnJ1bGVfaWRcIil9fTwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJuZXdfcnVsZV9pZFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJydWxlX2lkXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDwhLS0gU291cmNlIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcuc291cmNlX3R5cGVcIil9fTwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zb3VyY2VfdHlwZSgpXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJ0eXBlX2FycmF5XCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnNvdXJjZVwiKX19PC9sYWJlbD5cblx0ICA8ZGl2IHYtaWY9XCJzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZSA9PSAnaW50ZXJmYWNlJ1wiPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2VcIlxuXHRcdFx0ICA6b3B0aW9ucz1cImludGVyZmFjZV9hcnJheVwiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgPC9kaXY+XG5cdCAgPGRpdiB2LWVsc2U+XHQgICAgXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwYXR0ZXJuPVwic291cmNlX3JlZ2V4XCIgIHYtbW9kZWw9XCJzb3VyY2VcIj5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBEZXN0IC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcuZGVzdF90eXBlXCIpfX08L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2Rlc3RfdHlwZVwiXG5cdFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2Rlc3RfdHlwZSgpXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJ0eXBlX2FycmF5XCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlc3RcIil9fTwvbGFiZWw+XG5cdCAgPGRpdiB2LWlmPVwic2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlID09ICdpbnRlcmZhY2UnXCI+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2VcIlxuXHRcdFx0ICA6b3B0aW9ucz1cImludGVyZmFjZV9hcnJheVwiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgPC9kaXY+XG5cdCAgPGRpdiB2LWVsc2U+XHQgICAgXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwYXR0ZXJuPVwiZGVzdF9yZWdleFwiIHYtbW9kZWw9XCJkZXN0XCI+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gRGlyZWN0aW9uIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtMTJcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRpcmVjdGlvblwiKX19PC9sYWJlbD5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9kaXJlY3Rpb25cIlxuXHRcdFx0ICA6b3B0aW9ucz1cImRpcmVjdGlvbnNcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8IS0tIEFjdGlvbiAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTEyXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY3Rpb25cIil9fTwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfYWN0aW9uXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJhY3Rpb25zXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCIhaXNfdmFsaWRfc291cmNlIHx8ICFpc192YWxpZF9kZXN0XCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7YnV0dG9uX3RleHR9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydlZGl0JywgJ2FkZCddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xufSk7XG5cbmNvbnN0IHRpdGxlID0gcmVmKFwiXCIpO1xuXG5jb25zdCB0eXBlX2FycmF5ID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcuaXBcIiksIHZhbHVlOiBcImlwXCIsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLmNpZHJcIiksIHZhbHVlOiBcImNpZHJcIiB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiaW50ZXJmYWNlXCIpLCB2YWx1ZTogXCJpbnRlcmZhY2VcIiB9LFxuXTtcblxubGV0IGRlZmF1bHRfZGlyZWN0aW9uX3ZhbHVlID0gXCJzb3VyY2VfdG9fZGVzdFwiO1xuY29uc3QgZGlyZWN0aW9ucyA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmJpZGlyZWN0aW9uYWxcIiksIHZhbHVlOiBcImJpZGlyZWN0aW9uYWxcIiwgYmlkaXJlY3Rpb25hbDogdHJ1ZSwgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnNvdXJjZV90b19kZXN0XCIpLCB2YWx1ZTogXCJzb3VyY2VfdG9fZGVzdFwiLCBiaWRpcmVjdGlvbmFsOiBmYWxzZSwgfSxcbl07XG5jb25zdCBzZWxlY3RlZF9kaXJlY3Rpb24gPSByZWYoe30pO1xuXG5sZXQgZGVmYXVsdF9hY3Rpb25fdmFsdWUgPSBcImFjY2VwdFwiO1xuY29uc3QgYWN0aW9ucyA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjY2VwdFwiKSwgdmFsdWU6IFwiYWNjZXB0XCIgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlbnlcIiksIHZhbHVlOiBcImRlbnlcIiB9LFxuXTtcbmNvbnN0IHNlbGVjdGVkX2FjdGlvbiA9IHJlZih7fSk7XG5cbmNvbnN0IHJ1bGVfaWQgPSByZWYoMCk7XG5jb25zdCBuZXdfcnVsZV9pZCA9IHJlZigwKTtcblxuY29uc3Qgc2VsZWN0ZWRfc291cmNlX3R5cGUgPSByZWYoe30pO1xuY29uc3Qgc291cmNlX3JlZ2V4ID0gcmVmKFwiXCIpO1xuY29uc3Qgc291cmNlID0gcmVmKFwiXCIpO1xuXG5jb25zdCBzZWxlY3RlZF9kZXN0X3R5cGUgPSByZWYoe30pO1xuY29uc3QgZGVzdF9yZWdleCA9IHJlZihcIlwiKTtcbmNvbnN0IGRlc3QgPSByZWYoXCJcIik7XG5cbmNvbnN0IGludGVyZmFjZV9saXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmVkZ2UvaW50ZXJmYWNlcy5sdWFgO1xubGV0IGludGVyZmFjZV9saXN0O1xuY29uc3QgaW50ZXJmYWNlX2FycmF5ID0gcmVmKFtdKTtcblxuY29uc3Qgc2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZSA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZSA9IHJlZih7fSk7XG5cbmNvbnN0IGJ1dHRvbl90ZXh0ID0gcmVmKFwiXCIpO1xuXG5jb25zdCBpc192YWxpZF9zb3VyY2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGlzX3ZhbGlkKHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLCBzb3VyY2UudmFsdWUsIHNvdXJjZV9yZWdleC52YWx1ZSk7XG59KTtcblxuY29uc3QgaXNfdmFsaWRfZGVzdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gaXNfdmFsaWQoc2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlLCBkZXN0LnZhbHVlLCBkZXN0X3JlZ2V4LnZhbHVlKTtcbn0pO1xuXG5jb25zdCBzaG93ID0gKHJvdywgZGVmYXVsdF9hY3Rpb24pID0+IHtcbiAgICBpbml0KHJvdywgZGVmYXVsdF9hY3Rpb24pO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGlzX29wZW5faW5fYWRkID0gcmVmKHRydWUpO1xuXG5mdW5jdGlvbiBpbml0KHJvdywgZGVmYXVsdF9hY3Rpb24pIHtcbiAgICBpc19vcGVuX2luX2FkZC52YWx1ZSA9IHJvdyA9PSBudWxsO1xuICAgIGlmIChkZWZhdWx0X2FjdGlvbiAhPSBudWxsKSB7XG5cdGRlZmF1bHRfYWN0aW9uX3ZhbHVlID0gZGVmYXVsdF9hY3Rpb24udmFsdWU7XG4gICAgfVxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgb3BlbiBpbiBlZGl0XG4gICAgaWYgKGlzX29wZW5faW5fYWRkLnZhbHVlID09IGZhbHNlKSB7XG5cdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9lZGl0XCIpO1xuXHRidXR0b25fdGV4dC52YWx1ZSA9IF9pMThuKFwiZWRpdFwiKTtcblx0c2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUgPSB0eXBlX2FycmF5LmZpbmQoKHMpID0+IHMudmFsdWUgPT0gcm93LnNvdXJjZS50eXBlKTtcblx0c2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlID0gdHlwZV9hcnJheS5maW5kKChzKSA9PiBzLnZhbHVlID09IHJvdy5kZXN0aW5hdGlvbi50eXBlKTtcblx0c2VsZWN0ZWRfZGlyZWN0aW9uLnZhbHVlID0gZGlyZWN0aW9ucy5maW5kKChkKSA9PiBkLmJpZGlyZWN0aW9uYWwgPT0gcm93LmJpZGlyZWN0aW9uYWwpO1xuXHRzZWxlY3RlZF9hY3Rpb24udmFsdWUgPSBhY3Rpb25zLmZpbmQoKGEpID0+IGEudmFsdWUgPT0gcm93LmFjdGlvbik7XG5cdHJ1bGVfaWQudmFsdWUgPSByb3cucnVsZV9pZDtcbiAgICAgICAgbmV3X3J1bGVfaWQudmFsdWUgPSByb3cucnVsZV9pZDtcbiAgICB9IGVsc2Uge1xuXHR0aXRsZS52YWx1ZSA9IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcudGl0bGVfYWRkXCIpO1xuXHRidXR0b25fdGV4dC52YWx1ZSA9IF9pMThuKFwiYWRkXCIpO1xuXHRsZXQgZGVmYXVsdF90eXBlID0gdHlwZV9hcnJheS5maW5kKChzKSA9PiBzLmRlZmF1bHQgPT0gdHJ1ZSk7XG5cdHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlID0gZGVmYXVsdF90eXBlO1xuXHRzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUgPSBkZWZhdWx0X3R5cGU7XG5cdHNlbGVjdGVkX2RpcmVjdGlvbi52YWx1ZSA9IGRpcmVjdGlvbnMuZmluZCgoZCkgPT4gZC52YWx1ZSA9PSBkZWZhdWx0X2RpcmVjdGlvbl92YWx1ZSk7XG5cdHNlbGVjdGVkX2FjdGlvbi52YWx1ZSA9IGFjdGlvbnMuZmluZCgoYSkgPT4gYS52YWx1ZSAhPSBkZWZhdWx0X2FjdGlvbl92YWx1ZSk7XG4gICAgfVxuICAgIGNoYW5nZV9zb3VyY2VfdHlwZShyb3cpO1xuICAgIGNoYW5nZV9kZXN0X3R5cGUocm93KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3NvdXJjZV90eXBlKHJvdykge1xuICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgaWYgKHJvdyAhPSBudWxsKSB7XG5cdHZhbHVlID0gcm93LnNvdXJjZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnZhbHVlID09IFwiaW50ZXJmYWNlXCIpIHtcblx0YXdhaXQgc2V0X2ludGVyZmFjZV9hcnJheSgpO1xuXHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHQgICAgc2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZS52YWx1ZSA9IGludGVyZmFjZV9hcnJheS52YWx1ZS5maW5kKChpKSA9PiBpLnZhbHVlID09IHZhbHVlKTtcblx0fSBlbHNlIHtcblx0ICAgIHNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2UudmFsdWUgPSBpbnRlcmZhY2VfYXJyYXkudmFsdWVbMF07XG5cdH1cbiAgICB9IGVsc2Uge1xuXHRpZiAocm93ICE9IG51bGwpIHtcblx0ICAgIHNvdXJjZS52YWx1ZSA9IHJvdy5zb3VyY2UudmFsdWU7XG5cdH0gZWxzZSB7XG5cdCAgICBzb3VyY2UudmFsdWUgPSBcIlwiO1xuXHR9XG5cdHNldF9yZWdleChzb3VyY2VfcmVnZXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnZhbHVlKTtcbiAgICB9ICAgIFxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2VfZGVzdF90eXBlKHJvdykge1xuICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgaWYgKHJvdyAhPSBudWxsKSB7XG5cdHZhbHVlID0gcm93LmRlc3RpbmF0aW9uLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlLnZhbHVlID09IFwiaW50ZXJmYWNlXCIpIHtcblx0YXdhaXQgc2V0X2ludGVyZmFjZV9hcnJheSgpO1xuXHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHQgICAgc2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UudmFsdWUgPSBpbnRlcmZhY2VfYXJyYXkudmFsdWUuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSB2YWx1ZSk7XG5cdH0gZWxzZSB7XG5cdCAgICBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZSA9IGludGVyZmFjZV9hcnJheS52YWx1ZVswXTtcblx0fVxuICAgIH0gZWxzZSB7XG5cdGlmIChyb3cgIT0gbnVsbCkge1xuXHQgICAgZGVzdC52YWx1ZSA9IHJvdy5kZXN0aW5hdGlvbi52YWx1ZTtcblx0fSBlbHNlIHtcblx0ICAgIGRlc3QudmFsdWUgPSBcIlwiO1xuXHR9XG5cdHNldF9yZWdleChkZXN0X3JlZ2V4LCBzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUudmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNfdmFsaWQoc2VsZWN0ZWRfdHlwZSwgdGV4dCwgcmdfdGV4dCkge1xuICAgIGlmIChzZWxlY3RlZF90eXBlLnZhbHVlID09IFwiaW50ZXJmYWNlXCIpIHtcblx0cmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmdfdGV4dCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QodGV4dCk7XG59XG5cbmxldCBpc19zZXRfaW50ZXJmYWNlX2FycmF5ID0gZmFsc2U7XG5hc3luYyBmdW5jdGlvbiBzZXRfaW50ZXJmYWNlX2FycmF5KCkge1xuICAgIGlmIChpc19zZXRfaW50ZXJmYWNlX2FycmF5ID09IHRydWUpIHsgcmV0dXJuOyB9XG5cdGlmIChpbnRlcmZhY2VfbGlzdCA9PSBudWxsKSB7XG5cdCAgICBpbnRlcmZhY2VfbGlzdCA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChpbnRlcmZhY2VfbGlzdF91cmwpO1xuXHR9XG5cdGxldCByZXNfaW50ZXJmYWNlX2xpc3QgPSBhd2FpdCBpbnRlcmZhY2VfbGlzdDtcblx0aW50ZXJmYWNlX2FycmF5LnZhbHVlID0gcmVzX2ludGVyZmFjZV9saXN0LmZpbHRlcigoaSkgPT4gaS5yb2xlID09IFwibGFuXCIpLm1hcCgoaSkgPT4ge1xuXHQgICAgcmV0dXJuIHtcblx0XHRsYWJlbDogaS5sYWJlbCxcblx0XHR2YWx1ZTogaS5pZm5hbWUsXG5cdCAgICB9O1xuXHR9KTtcbiAgICBpc19zZXRfaW50ZXJmYWNlX2FycmF5ID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0X3JlZ2V4KHJnLCB0eXBlKSB7XG4gICAgcmcudmFsdWUgPSByZWdleFZhbGlkYXRpb24uZ2V0X2RhdGFfcGF0dGVybih0eXBlKTtcbn1cblxuY29uc3QgYXBwbHkgPSAoKSA9PiB7XG4gICAgbGV0IHNyY190eXBlID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUudmFsdWU7ICAgIFxuICAgIGxldCBzcmNfdmFsdWUgPSBzb3VyY2UudmFsdWU7XG4gICAgaWYgKHNyY190eXBlID09IFwiaW50ZXJmYWNlXCIpIHtcblx0c3JjX3ZhbHVlID0gc2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZS52YWx1ZS52YWx1ZTtcbiAgICB9XG4gICAgbGV0IGRzdF90eXBlID0gc2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlLnZhbHVlOyAgICBcbiAgICBsZXQgZHN0X3ZhbHVlID0gZGVzdC52YWx1ZTtcbiAgICBpZiAoZHN0X3R5cGUgPT0gXCJpbnRlcmZhY2VcIikge1xuXHRkc3RfdmFsdWUgPSBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZS52YWx1ZTtcbiAgICB9XG4gICAgbGV0IHBvbGljeSA9IHNlbGVjdGVkX2FjdGlvbi52YWx1ZS52YWx1ZTtcbiAgICBsZXQgYmlkaXJlY3Rpb25hbCA9IHNlbGVjdGVkX2RpcmVjdGlvbi52YWx1ZS52YWx1ZSA9PSBcImJpZGlyZWN0aW9uYWxcIjtcbiAgICBsZXQgb2JqID0ge1xuXHRzcmNfdHlwZSxcblx0c3JjX3ZhbHVlLFxuXHRkc3RfdHlwZSxcblx0ZHN0X3ZhbHVlLFxuXHRwb2xpY3ksXG5cdGJpZGlyZWN0aW9uYWwsXG4gICAgfTtcbiAgICBsZXQgZXZlbnQgPSBcImFkZFwiO1xuICAgIGlmIChpc19vcGVuX2luX2FkZC52YWx1ZSA9PSBmYWxzZSkge1xuXHRvYmoucnVsZV9pZCA9IHJ1bGVfaWQudmFsdWU7XG5cdG9iai5uZXdfcnVsZV9pZCA9IG5ld19ydWxlX2lkLnZhbHVlO1xuXHRldmVudCA9IFwiZWRpdFwiO1xuICAgIH1cbiAgICBcbiAgICBlbWl0KGV2ZW50LCBvYmopO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cbiAgICAgIDwhLS0gRGVmYXVsdCBQb2xpY3kgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVmYXVsdCBwb2xpY3lcIil9fTwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfYWN0aW9uXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJhY3Rpb25zXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FwcGx5J10pO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgdGl0bGUgPSBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX2NoYW5nZV9kZWZhdWx0X3BvbGljeS50aXRsZVwiKTtcblxubGV0IGRlZmF1bHRfYWN0aW9uX3ZhbHVlID0gXCJhY2NlcHRcIjtcbmNvbnN0IGFjdGlvbnMgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY2NlcHRcIiksIHZhbHVlOiBcImFjY2VwdFwiIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZW55XCIpLCB2YWx1ZTogXCJkZW55XCIgfSxcbl07XG5jb25zdCBzZWxlY3RlZF9hY3Rpb24gPSByZWYoe30pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7XG59O1xuXG5jb25zdCBzaG93ID0gKHBvbGljeSkgPT4ge1xuICAgIHNlbGVjdGVkX2FjdGlvbi52YWx1ZSA9IGFjdGlvbnMuZmluZCgoYSkgPT4gYS52YWx1ZSA9PSBwb2xpY3kudmFsdWUpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5mdW5jdGlvbiBhcHBseSgpIHtcbiAgICBlbWl0KCdhcHBseScsIHNlbGVjdGVkX2FjdGlvbi52YWx1ZS52YWx1ZSk7XG4gICAgY2xvc2UoKTtcbn1cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4gIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwibWItMlwiPlxuICBcbiAgPGgyPnt7IF9pMThuKFwibmVkZ2UucnVsZXNfY29uZmlnX3RpdGxlXCIpIH19PC9oMj5cbiAgPGJyIC8+XG4gIDxoNSBjbGFzcz1cImQtaW5saW5lLWJsb2NrXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlZmF1bHQgcG9saWN5XCIpfX1cbiAgICA8c3BhbiB2LWlmPVwiZGVmYXVsdF9wb2xpY3k/LnZhbHVlID09ICdhY2NlcHQnXCIgc3R5bGU9XCJjb2xvcjpncmVlbjtcIj5cbiAgICAgIHt7IGRlZmF1bHRfcG9saWN5Py5sYWJlbCB9fVxuICAgIDwvc3Bhbj5cbiAgICA8c3BhbiB2LWlmPVwiZGVmYXVsdF9wb2xpY3k/LnZhbHVlID09ICdkZW55J1wiIHN0eWxlPVwiY29sb3I6cmVkO1wiPlxuICAgICAge3sgZGVmYXVsdF9wb2xpY3k/LmxhYmVsIH19XG4gICAgPC9zcGFuPlxuXG4gICAgPHNtYWxsPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAwLjVyZW07XCIgQGNsaWNrPVwic2hvd19tb2RhbF9jaGFuZ2VfcG9saWN5XCI+PGkgY2xhc3M9XCJmYXMgZmEtY29nXCI+PC9pPjwvYT48L3NtYWxsPlxuICA8L2g1PlxuPC9kaXY+XG5cbjxkaXYgaWQ9XCJhZ2dyZWdhdGVkX2xpdmVfZmxvd3NcIj5cbiAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ydWxlc1wiXG5cdCAgICAgOnRhYmxlX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG5cdCAgICAgOmNvbHVtbnNfY29uZmlnPVwidGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcblx0ICAgICA6ZGF0YV91cmw9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuXHQgICAgIDpmaWx0ZXJfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9maWx0ZXJzXCJcblx0ICAgICA6ZW5hYmxlX3NlYXJjaD1cInRhYmxlX2NvbmZpZy5lbmFibGVfc2VhcmNoXCJcblx0ICAgICA6dGFibGVfY29uZmlnPVwidGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICA8L0RhdGF0YWJsZT5cbjwvZGl2PlxuPE1vZGFsQWRkUnVsZUNvbmZpZyByZWY9XCJtb2RhbF9hZGRfcnVsZV9jb25maWdcIiBAYWRkPVwiYWRkX3J1bGVcIiBAZWRpdD1cImVkaXRfcnVsZVwiPjwvTW9kYWxBZGRSdWxlQ29uZmlnPlxuPE1vZGFsQ2hhbmdlRGVmYXVsdFBvbGljeSByZWY9XCJtb2RhbF9jaGFuZ2VfZGVmYXVsdF9wb2xpY3lcIiBAYXBwbHk9XCJzZXRfZGVmYXVsdF9wb2xpY3lcIiA+PC9Nb2RhbENoYW5nZURlZmF1bHRQb2xpY3k+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkUnVsZUNvbmZpZyB9IGZyb20gXCIuL21vZGFsLW5lZGdlLWFkZC1ydWxlLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxDaGFuZ2VEZWZhdWx0UG9saWN5IH0gZnJvbSBcIi4vbW9kYWwtbmVkZ2UtY2hhbmdlLWRlZmF1bHQtcG9saWN5LnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgdGltZW91dF9kZWxldGUgPSAxICogNTAwO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB1cmw6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgY3NyZjogU3RyaW5nLFxuICAgIGNvbHVtbnNfY29uZmlnOiBBcnJheVxufSk7XG5cbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSk7XG5jb25zdCB0YWJsZV9ydWxlcyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FkZF9ydWxlX2NvbmZpZyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2NoYW5nZV9kZWZhdWx0X3BvbGljeSA9IHJlZihudWxsKTtcbmNvbnN0IGRlZmF1bHRfcG9saWN5ID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0X2RhdGF0YWJsZV9jb25maWcoKTtcbiAgICBsb2FkX2RlZmF1bHRfcG9saWN5KCk7XG59KTtcblxuZnVuY3Rpb24gZWRpdF9ydWxlKHJ1bGUpIHsgICAgXG4gICAgY29uc3QgZWRpdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZWRpdC9uZWRnZS9wb2xpY3kvcnVsZS5sdWFgO1xuICAgIHNldF9ydWxlKHJ1bGUsIGVkaXRfdXJsKTtcbn1cblxuZnVuY3Rpb24gYWRkX3J1bGUocnVsZSkge1xuICAgIGNvbnN0IGFkZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWRkL25lZGdlL3BvbGljeS9ydWxlLmx1YWA7XG4gICAgc2V0X3J1bGUocnVsZSwgYWRkX3VybCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfZGVmYXVsdF9wb2xpY3kocG9saWN5KSB7XG4gICAgaWYgKHBvbGljeSA9PSBudWxsKSB7XG5cdGNvbnN0IGdldF9wb2xpY3lfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZWRnZS9wb2xpY3kvZGVmYXVsdC5sdWFgO1xuXHRsZXQgcG9saWN5X3JlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChnZXRfcG9saWN5X3VybCk7XG5cdHBvbGljeSA9IHBvbGljeV9yZXMuZGVmYXVsdF9wb2xpY3k7XG4gICAgfVxuICAgIGlmIChwb2xpY3kgPT0gXCJhY2NlcHRcIikge1xuXHRkZWZhdWx0X3BvbGljeS52YWx1ZSA9IHtcblx0ICAgIHZhbHVlOiBwb2xpY3ksXG5cdCAgICBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY2NlcHRcIiksXG5cdH07XG4gICAgfSBlbHNlIHtcblx0ZGVmYXVsdF9wb2xpY3kudmFsdWUgPSB7XG5cdCAgICB2YWx1ZTogcG9saWN5LFxuXHQgICAgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVueVwiKSxcblx0fTsgICAgXG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfZGVmYXVsdF9wb2xpY3kocG9saWN5KSB7XG4gICAgY29uc3Qgc2V0X3BvbGljeV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvc2V0L25lZGdlL3BvbGljeS9kZWZhdWx0Lmx1YWA7XG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBkZWZhdWx0X3BvbGljeTogcG9saWN5LCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChzZXRfcG9saWN5X3VybCwgeyBtZXRob2Q6IFwicG9zdFwiLCBoZWFkZXJzLCBib2R5fSk7XG4gICAgbG9hZF9kZWZhdWx0X3BvbGljeShwb2xpY3kpO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cbmZ1bmN0aW9uIHNldF9ydWxlKHJ1bGUsIHVybCkge1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgLi4ucnVsZSwgY3NyZjogcHJvcHMuY3NyZn0pO1xuICAgIFxuICAgIG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfY2hhbmdlX3BvbGljeSgpIHsgICAgXG4gICAgbW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5LnZhbHVlLnNob3coZGVmYXVsdF9wb2xpY3kudmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRfZGF0YXRhYmxlX2NvbmZpZygpIHtcbiAgICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgICBcbiAgICBsZXQgcGFyYW1zID0geyBcblx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQsXHRcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcblx0ICAgIHJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgICAgIC8vIHRhYmxlX3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xuXHR9XG4gICAgfSwge1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKCkge1xuXHQgICAgbW9kYWxfYWRkX3J1bGVfY29uZmlnLnZhbHVlLnNob3cobnVsbCwgZGVmYXVsdF9wb2xpY3kudmFsdWUpO1xuXHR9XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG5cdHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcblx0ZGF0YV91cmw6IGAke3Byb3BzLnVybH0/JHt1cmxfcGFyYW1zfWAsXG5cdGVuYWJsZV9zZWFyY2g6IGZhbHNlLFxuICAgIH07XG4gICAgXG4gICAgbGV0IGNvbHVtbnMgPSBbXG5cdHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnJ1bGVfaWRcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdydWxlX2lkJywgZGF0YTogJ3J1bGVfaWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuXHR9LCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5zb3VyY2VcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdzb3VyY2UnLCBkYXRhOiAnc291cmNlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24odmFsdWUsIHR5cGUsIHJvd0RhdGEpIHtcblx0XHRpZiAodmFsdWUubGFiZWwgIT0gbnVsbCAmJiB2YWx1ZS5sYWJlbCAhPSBcIlwiKSB7XG5cdFx0ICAgIHJldHVybiB2YWx1ZS5sYWJlbDtcblx0XHR9IFxuXHRcdHJldHVybiB2YWx1ZS52YWx1ZTtcblx0ICAgIH1cblx0fSwgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVzdFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2Rlc3QnLCBkYXRhOiAnZGVzdGluYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgcm93RGF0YSkge1xuXHRcdGlmICh2YWx1ZS5sYWJlbCAhPSBudWxsICYmIHZhbHVlLmxhYmVsICE9IFwiXCIpIHtcblx0XHQgICAgcmV0dXJuIHZhbHVlLmxhYmVsO1xuXHRcdH0gXG5cdFx0cmV0dXJuIHZhbHVlLnZhbHVlO1xuXHQgICAgfVxuXHR9LCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kaXJlY3Rpb25cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdiaWRpcmVjdGlvbmFsJywgZGF0YTogJ2JpZGlyZWN0aW9uYWwnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgcm93RGF0YSkge1xuXHRcdGlmICh2YWx1ZSA9PSB0cnVlKSB7XG5cdFx0ICAgIHJldHVybiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmJpZGlyZWN0aW9uYWxcIik7XG5cdFx0fSBcblx0XHRyZXR1cm4gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5zb3VyY2VfdG9fZGVzdFwiKTtcblx0ICAgIH1cblx0fSwgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWN0aW9uXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnYWN0aW9uJywgZGF0YTogJ2FjdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCByb3dEYXRhKSB7XG5cdFx0bGV0IGNvbG9yID0gXCJyZWRcIjtcblx0XHRsZXQgbmFtZSA9IF9pMThuKGBuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZW55YCk7XG5cdFx0aWYgKHZhbHVlID09IFwiYWNjZXB0XCIpIHtcblx0XHQgICAgY29sb3IgPSBcImdyZWVuXCI7XG5cdFx0ICAgIG5hbWUgPSAgX2kxOG4oYG5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjY2VwdGApO1xuXHRcdH1cblx0XHRyZXR1cm4gYDxzcGFuIHN0eWxlPVwiY29sb3I6JHtjb2xvcn07XCI+JHtuYW1lfTwvc3Bhbj5gO1xuXHQgICAgfVxuXHR9XG4gICAgXTtcbiAgICBsZXQgd3JhcF9jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnMubWFwKChjKSA9PiBjKTtcbiAgICAvLyBsZXQgd3JhcF9jb2x1bW5zX2NvbmZpZyA9IHByb3BzLmNvbHVtbnNfY29uZmlnLm1hcCgoYykgPT4gYyk7XG4gICAgd3JhcF9jb2x1bW5zX2NvbmZpZy5wdXNoKHsgY29sdW1uTmFtZTogX2kxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gYWRkX2FjdGlvbl9jb2x1bW4ocm93RGF0YSkgfSB9KTtcbiAgICBcbiAgICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gd3JhcF9jb2x1bW5zX2NvbmZpZztcbiAgICB0YWJsZV9jb25maWcudmFsdWUgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnO1xufVxuXG5jb25zdCBhZGRfYWN0aW9uX2NvbHVtbiA9IGZ1bmN0aW9uIChyb3dEYXRhKSB7XG4gICAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuXHRoYW5kbGVySWQ6IFwiZGVsZXRlX2hvc3RcIixcdCAgXG5cdG9uQ2xpY2s6ICgpID0+IHtcblx0ICAgIGRlbGV0ZV9ydWxlKHJvd0RhdGEpO1xuXHR9LFxuICAgIH07XG4gICAgXG4gICAgbGV0IGVkaXRfaGFuZGxlciA9IHtcblx0aGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuXHRvbkNsaWNrOiAoKSA9PiB7XG5cdCAgICBtb2RhbF9hZGRfcnVsZV9jb25maWcudmFsdWUuc2hvdyhyb3dEYXRhKTtcblx0fSxcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHR7IGNsYXNzOiBgYnRuLXNlY29uZGFyeWAsIGhhbmRsZXI6IGVkaXRfaGFuZGxlciwgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcblx0eyBjbGFzczogYGJ0bi1kYW5nZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaGFuZGxlcklkOiBcImRlbGV0ZV9ydWxlXCIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSB9LFxuICAgIF0pO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlX3J1bGUocnVsZSkge1xuICAgIGNvbnN0IGFkZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL25lZGdlL3BvbGljeS9ydWxlLmx1YWA7XG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBydWxlX2lkOiBydWxlLnJ1bGVfaWQsIGNzcmY6IHByb3BzLmNzcmZ9KTtcbiAgICBcbiAgICBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYWRkX3VybCwgeyBtZXRob2Q6IFwicG9zdFwiLCBoZWFkZXJzLCBib2R5fSk7XG4gICAgcmVmcmVzaF90YWJsZSgpOyAgICBcbn1cblxuZnVuY3Rpb24gcmVmcmVzaF90YWJsZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcblx0bnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbiBcdC8vIHRhYmxlX3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xuICAgIH0sIHRpbWVvdXRfZGVsZXRlKTtcbn1cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyB0aXRsZSB9fTwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiYXBwbGljYXRpb25faWRcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIiBoaWRkZW4+XG5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZWRpdF9wYWdlID09IGZhbHNlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImFwcF9uYW1lXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC04XCI+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJhcHBsaWNhdGlvbl9uYW1lXCIgQGlucHV0PVwiY2hlY2tfdmFsaWRhdGlvblwiXG4gICAgICAgICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjYXRlZ29yeVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2NhdGVnb3J5XCIgOm9wdGlvbnM9XCJjYXRlZ29yeV9saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImNhdGVnb3J5X2N1c3RvbV9ydWxlXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBAaW5wdXQ9XCJjaGVja192YWxpZGF0aW9uXCIgOnBsYWNlaG9sZGVyPVwiY29tbWVudFwiIHJvd3M9XCI2XCIgdi1tb2RlbD1cImN1c3RvbV9ydWxlc1wiXG4gICAgICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIj48L3RleHRhcmVhPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPlxuICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZWRpdF9wYWdlID09IGZhbHNlXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkXCI+e3sgX2kxOG4oJ2FkZCcpIH19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGRcIj57eyBfaTE4bignYXBwbHknKSB9fTwvYnV0dG9uPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnXSk7XG5jb25zdCBpc19lZGl0X3BhZ2UgPSByZWYoZmFsc2UpXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSlcbmxldCB0aXRsZSA9IHJlZihpMThuKCdhZGRfYXBwbGljYXRpb24nKSk7XG5jb25zdCBjb21tZW50ID0gcmVmKGkxOG4oJ2RldGFpbHMuY3VzdG9tX3J1bGVzX3BsYWNlaG9sZGVyJykpO1xuY29uc3Qgc2VsZWN0ZWRfY2F0ZWdvcnkgPSByZWYoe30pO1xuY29uc3QgY2F0ZWdvcnlfbGlzdCA9IHJlZihbXSk7XG5jb25zdCBjdXN0b21fcnVsZXMgPSByZWYoJycpXG5jb25zdCBhcHBsaWNhdGlvbl9uYW1lID0gcmVmKCcnKVxuY29uc3QgYXBwbGljYXRpb25faWQgPSByZWYobnVsbClcblxuY29uc3QgbGFzdF9hcHBsaWNhdGlvbiA9IHJlZih7fSlcblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLmVhY2hfaG9zdF9zZXBhcmF0ZV9saW5lXCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLmFsbG93ZWRfcnVsZXNcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuaXBfYWRkcmVzc1wiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5pcF9hZGRyZXNzX3BvcnRcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMucG9ydFwiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5wb3J0X3JhbmdlXCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLmhvc3RfZG9tYWluXCIpXG5dXG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHsgfTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBpZmlkOiBTdHJpbmcsXG59KTtcblxuZnVuY3Rpb24gcmVzZXRfbW9kYWxfZm9ybSgpIHtcbiAgYXBwbGljYXRpb25fbmFtZS52YWx1ZSA9ICcnO1xuICBzZWxlY3RlZF9jYXRlZ29yeS52YWx1ZSA9IGNhdGVnb3J5X2xpc3QudmFsdWVbMF07XG4gIGN1c3RvbV9ydWxlcy52YWx1ZSA9ICcnO1xufVxuXG5jb25zdCBjaGVja192YWxpZGF0aW9uID0gKCkgPT4ge1xuICBpZiAoY2hlY2tfYXBwbGljYXRpb25fbmFtZSgpID09IHRydWUgJiYgY2hlY2tfY3VzdG9tX3J1bGVzKCkgPT0gdHJ1ZSlcbiAgICBkaXNhYmxlX2FkZC52YWx1ZSA9IGZhbHNlXG4gIGVsc2VcbiAgICBkaXNhYmxlX2FkZC52YWx1ZSA9IHRydWVcbn1cblxuY29uc3QgY2hlY2tfYXBwbGljYXRpb25fbmFtZSA9ICgpID0+IHtcbiAgcmV0dXJuICgvXltBLVphLXowLTldKiQvLnRlc3QoYXBwbGljYXRpb25fbmFtZS52YWx1ZSkpO1xufVxuXG5jb25zdCBjaGVja19jdXN0b21fcnVsZXMgPSAoKSA9PiB7XG4gIGxldCBjaGVjayA9IHRydWVcblxuICBsZXQgcnVsZXMgPSBjdXN0b21fcnVsZXMudmFsdWUuc3BsaXQoXCJcXG5cIik7XG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjaGVjayA9IGNoZWNrICYmICgvKiB0Y3A6MTEwMCAqLygvXigodGNwfHVkcCk6KDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSkpJC8udGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiB0Y3A6MTAwMC0xMDAyKi8oL14oKHRjcHx1ZHApOig2NTUzWzAtNV18NjU1WzAtMl1bMC05XVxcZHw2NVswLTRdKFxcZCl7Mn18NlswLTRdKFxcZCl7M318WzEtNV0oXFxkKXs0fXxbMS05XShcXGQpezAsM30pLSg2NTUzWzAtNV18NjU1WzAtMl1bMC05XVxcZHw2NVswLTRdKFxcZCl7Mn18NlswLTRdKFxcZCl7M318WzEtNV0oXFxkKXs0fXxbMS05XShcXGQpezAsM30pKSQvLnRlc3QocnVsZSkpIHx8XG4vLyAgICAgICAgICAgICAgICAgICAgICAoL14oKD8hLiogKS4qKSQvLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogaXA6MS4xLjEuMSAqLygvXihpcCk6KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIGlwOjEuMS4xLjE6MTAxMCAqLygvXihpcCk6KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPyk6KDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSkkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIGhvc3Q6Z29vZ2xlICovKC9eKChob3N0KTpbYS16QS1aMC05XSspJC8udGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBob3N0Omdvb2dsZS5jb20gKi8oLyhob3N0KTpbYS16QS1aMC05XS5bYS16QS1aXS9nLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogRW1wdHkgc3RyaW5nICovcnVsZSA9PT0gJycpO1xuICB9KVxuXG4gIHJldHVybiBjaGVja1xufVxuXG5jb25zdCBwb3B1bGF0ZV9tb2RhbF9mb3JtID0gKHJvdykgPT4ge1xuICBsZXQgZWRpdF9yb3dfY2F0ZWdvcnkgPSBudWxsO1xuICBjYXRlZ29yeV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZihpdGVtLmlkID09IHJvdy5jYXRlZ29yeV9pZCkge1xuICAgICAgZWRpdF9yb3dfY2F0ZWdvcnkgPSBpdGVtO1xuICAgIH1cbiAgfSk7XG5cbiAgc2VsZWN0ZWRfY2F0ZWdvcnkudmFsdWUgPSBlZGl0X3Jvd19jYXRlZ29yeTtcbiAgY3VzdG9tX3J1bGVzLnZhbHVlID0gcm93LmN1c3RvbV9ydWxlcztcbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgdGl0bGUudmFsdWUgPSBpMThuKCdhZGRfYXBwbGljYXRpb24nKTtcblxuICBpZiAocm93ICE9IG51bGwpIHtcbiAgICBhcHBsaWNhdGlvbl9pZC52YWx1ZSA9IHJvdy5hcHBsaWNhdGlvbl9pZDtcbiAgICBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlID0gcm93LmFwcGxpY2F0aW9uO1xuICAgIGlzX2VkaXRfcGFnZS52YWx1ZSA9IHRydWU7XG4gICAgdGl0bGUudmFsdWUgPSBgJHtpMThuKCdlZGl0X2FwcGxpY2F0aW9uJyl9OiAke2FwcGxpY2F0aW9uX25hbWUudmFsdWV9YDtcbiAgICBwb3B1bGF0ZV9tb2RhbF9mb3JtKHJvdyk7XG4gIH1cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xuICBjaGVja192YWxpZGF0aW9uKCk7XG59O1xuXG5jb25zdCBhZGRfID0gKCkgPT4ge1xuICBlbWl0KCdhZGQnLCB7XG4gICAgbDdfcHJvdG9faWQ6IGFwcGxpY2F0aW9uX2lkLnZhbHVlLFxuICAgIHByb3RvY29sX2FsaWFzOiBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlLFxuICAgIGNhdGVnb3J5OiBzZWxlY3RlZF9jYXRlZ29yeS52YWx1ZS5pZCxcbiAgICBjdXN0b21fcnVsZXM6IGN1c3RvbV9ydWxlcy52YWx1ZSxcbiAgICBpc19lZGl0X3BhZ2U6IGlzX2VkaXRfcGFnZS52YWx1ZSxcbiAgfSk7XG5cbiAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgZm9ybWF0X2NhdGVnb3J5X2xpc3QgPSAobGlzdCkgPT4ge1xuICBsZXQgZm9ybWF0dGVkX2xpc3QgPSBbXTtcbiAgbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgZm9ybWF0dGVkX2xpc3QucHVzaCh7XG4gICAgICBpZDogaXRlbS5jYXRfaWQsXG4gICAgICBsYWJlbDogaXRlbS5uYW1lLFxuICAgICAgYXBwX2xpc3Q6IGl0ZW0uYXBwX2xpc3RcblxuICAgIH0pXG4gIH0pXG5cbiAgLy8gc29ydCBmb3JtYXR0ZWQgY2F0ZWdvcmllcztcbiAgZm9ybWF0dGVkX2xpc3QgPSBmb3JtYXR0ZWRfbGlzdC5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9saXN0O1xufVxuXG5jb25zdCBsb2FkQ2F0ZWdvcnlMaXN0ID0gKGxpc3QpID0+IHtcbiAgY2F0ZWdvcnlfbGlzdC52YWx1ZSA9IGZvcm1hdF9jYXRlZ29yeV9saXN0KGxpc3QpO1xufTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7IH0pXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBsb2FkQ2F0ZWdvcnlMaXN0IH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImFwcGxpY2F0aW9uX25hbWVcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIiBoaWRkZW4+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+e3sgYm9keSB9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cIl9yZW1vdmVcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2RlbGV0ZScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ3JlbW92ZSddKTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBhcHBsaWNhdGlvbl9uYW1lID0gcmVmKG51bGwpXG5cbmxldCB0aXRsZSA9IHJlZihpMThuKCdjdXN0b21fY2F0ZWdvcmllcy5kZWxldGVfYXBwJykpO1xuY29uc3QgYm9keSA9IGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLmRlbGV0ZV9hcHBfY29uZmlybScpXG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIGlmKHJvdyAhPSBudWxsKSB7XG4gICAgYXBwbGljYXRpb25fbmFtZS52YWx1ZSA9IHJvdy5hcHBsaWNhdGlvbjtcbiAgICB0aXRsZS52YWx1ZSA9IGAke2kxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLmRlbGV0ZV9hcHAnKX06ICR7YXBwbGljYXRpb25fbmFtZS52YWx1ZX1gO1xuICB9XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IF9yZW1vdmUgPSAoKSA9PiB7XG4gIGVtaXQoJ3JlbW92ZScsIHsgXG4gICAgcHJvdG9jb2xfYWxpYXM6IGFwcGxpY2F0aW9uX25hbWUudmFsdWUsXG4gIH0pO1xuICAgIFxuICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+ICAgIFxuICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXYgdi1zaG93PVwiIWhpZGRlblwiIHJlZj1cInVwZGF0ZV9tZXNzYWdlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+e3sgbWVzc2FnZSB9fTwvZGl2PlxuXG4gIDxNb2RhbEFkZEFwcGxpY2F0aW9uIHJlZj1cIm1vZGFsX2FkZF9hcHBsaWNhdGlvblwiXG4gICAgOmNhdGVnb3J5X2xpc3Q9XCJjYXRlZ29yeV9saXN0XCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6aWZpZD1cImlmaWRcIlxuICAgIEBhZGQ9XCJfYWRkXCI+XG4gIDwvTW9kYWxBZGRBcHBsaWNhdGlvbj5cbiAgPE1vZGFsRGVsZXRlQXBwbGljYXRpb24gcmVmPVwibW9kYWxfZGVsZXRlX2FwcGxpY2F0aW9uXCJcbiAgICBAcmVtb3ZlPVwiX3JlbW92ZVwiPlxuICA8L01vZGFsRGVsZXRlQXBwbGljYXRpb24+XG5cbiAgPERhdGF0YWJsZSByZWY9XCJhcHBsaWNhdGlvbnNfdGFibGVcIlxuICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS50YWJsZV9idXR0b25zXCJcbiAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLmNvbHVtbnNfY29uZmlnXCJcbiAgICA6ZGF0YV91cmw9XCJjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLmRhdGFfdXJsXCJcbiAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUuZW5hYmxlX3NlYXJjaFwiXG4gICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUudGFibGVfY29uZmlnXCI+XG4gIDwvRGF0YXRhYmxlPlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtYXBwbGljYXRpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtYXBwbGljYXRpb24udnVlXCI7XG5cbmNvbnN0IGFwcGxpY2F0aW9uc190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FkZF9hcHBsaWNhdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IGNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUgPSByZWYoe30pO1xuY29uc3QgY2F0ZWdvcnlfbGlzdCA9IHJlZihbXSk7XG5jb25zdCB1cGRhdGVfbWVzc2FnZSA9IHJlZihudWxsKTtcbmNvbnN0IGhpZGRlbiA9IHJlZih0cnVlKTtcbmxldCBtZXNzYWdlID0gJydcblxuY29uc3QgY2F0ZWdvcnlfbGlzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2w3L2NhdGVnb3J5L2NvbnN0cy5sdWFgXG5jb25zdCBhZGRfYXBwbGljYXRpb25fdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2VkaXQvYXBwbGljYXRpb24vYXBwbGljYXRpb24ubHVhYFxuY29uc3QgZGVsZXRlX2FwcGxpY2F0aW9uX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvYXBwbGljYXRpb24vYXBwbGljYXRpb24ubHVhYFxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBpZmlkOiBTdHJpbmcsXG4gIGhhc19wcm90b3NfZmlsZTogQm9vbGVhbixcbn0pXG5cbmNvbnN0IF9yZW1vdmUgPSBhc3luYyAocGFyYW1zKSA9PiB7ICBcbiAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5wYWdlX2NzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZFxuICB9XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGRlbGV0ZV9hcHBsaWNhdGlvbl91cmwsIHtcbiAgICAuLi51cmxfcGFyYW1zLFxuICAgIC4uLnBhcmFtc1xuICB9KVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHNob3dfbWVzc2FnZShpMThuKCdjdXN0b21fY2F0ZWdvcmllcy5zdWNjZXNmdWxseV9yZW1vdmVkJykpO1xuICB9KTtcblxuICByZWxvYWRfdGFibGUoKTtcbn1cblxuY29uc3Qgb3Blbl9kZWxldGVfbW9kYWwgPSAocm93KSA9PiB7XG4gIG1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbi52YWx1ZS5zaG93KHJvdyk7XG59XG5cbmNvbnN0IF9hZGQgPSBhc3luYyAocGFyYW1zKSA9PiB7XG4gIGNvbnN0IGlzX2VkaXRfcGFnZSA9IHBhcmFtcy5pc19lZGl0X3BhZ2U7XG4gIHBhcmFtcy5pc19lZGl0X3BhZ2UgPSBudWxsO1xuXG4gIGNvbnN0IHVybF9wYXJhbXMgPSB7XG4gICAgY3NyZjogcHJvcHMucGFnZV9jc3JmLFxuICAgIGlmaWQ6IHByb3BzLmlmaWRcbiAgfVxuXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfYXBwbGljYXRpb25fdXJsLCB7XG4gICAgLi4udXJsX3BhcmFtcyxcbiAgICAuLi5wYXJhbXNcbiAgfSlcbiAgXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGlmKHN0YXR1cyA9PSAnc3VjY2VzcycpIHtcbiAgICAgIGlmKGlzX2VkaXRfcGFnZSlcbiAgICAgICAgc2hvd19tZXNzYWdlKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLnN1Y2Nlc2Z1bGx5X2VkaXRlZCcpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc2hvd19tZXNzYWdlKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLnN1Y2Nlc2Z1bGx5X2FkZGVkJykpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVsb2FkX3RhYmxlKCk7XG59XG5cbmNvbnN0IG9wZW5fYWRkX21vZGFsID0gKHJvdykgPT4ge1xuICBtb2RhbF9hZGRfYXBwbGljYXRpb24udmFsdWUuc2hvdyhyb3cpO1xufVxuXG5jb25zdCBzaG93X21lc3NhZ2UgPSAoX21lc3NhZ2UpID0+IHtcbiAgbWVzc2FnZSA9IF9tZXNzYWdlO1xuICBoaWRkZW4udmFsdWUgPSBmYWxzZTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaGlkZGVuLnZhbHVlID0gdHJ1ZTtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSwgNDAwMCk7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIGFwcGxpY2F0aW9uc190YWJsZS52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlLnJlbG9hZCgpO1xufVxuXG5jb25zdCBsb2FkX2NhdGVnb3JpZXMgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0ICQuZ2V0KGNhdGVnb3J5X2xpc3RfdXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgY2F0ZWdvcnlfbGlzdC52YWx1ZSA9IHJzcC5yc3A7XG4gIH0pO1xuICBtb2RhbF9hZGRfYXBwbGljYXRpb24udmFsdWUubG9hZENhdGVnb3J5TGlzdChjYXRlZ29yeV9saXN0LnZhbHVlKTtcbn1cblxuY29uc3Qgc2VhcmNoID0gKGZpbHRlcl9hcHApID0+IHtcbiAgYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlLnNlYXJjaF92YWx1ZShmaWx0ZXJfYXBwKTtcbn1cbiAgICBcbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBzdGFydF9kYXRhdGFibGUoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBsb2FkX2NhdGVnb3JpZXMoKTtcbiAgY29uc3QgZmlsdGVyX2FwcCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYXBwbGljYXRpb25cIik7XG4gIGlmKGZpbHRlcl9hcHApIHtcbiAgICBzZWFyY2goZmlsdGVyX2FwcCk7XG4gIH1cbn0pXG5cbm9uVW5tb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZGVzdHJveSgpXG59KTtcblxuXG5jb25zdCBhZGRfYWN0aW9uX2NvbHVtbiA9IGZ1bmN0aW9uIChyb3dEYXRhKSB7XG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIG9wZW5fYWRkX21vZGFsKHJvd0RhdGEpO1xuICAgIH0sXG4gIH1cblxuICBjb25zdCBhY3Rpb25zID0gW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcbiAgXVxuXG4gIGlmKHJvd0RhdGEuaXNfY3VzdG9tKSB7XG4gICAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuICAgICAgaGFuZGxlcklkOiBcImRlbGV0ZV9ydWxlXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIG9wZW5fZGVsZXRlX21vZGFsKHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG4gIFxuICAgIGFjdGlvbnMucHVzaCggICAgXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcbiAgICApXG4gIH1cbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoYWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgaWYocHJvcHMuaGFzX3Byb3Rvc19maWxlKSB7XG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBvcGVuX2FkZF9tb2RhbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9udG9wbmcvYXBwbGljYXRpb25zLmx1YWAsIHsgaWZpZDogcHJvcHMuaWZpZCB9KSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAwIC8qIGFwcGxpY2F0aW9uIGNvbHVtbiAqLywgJ2FzYycgXV0sXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcGxpY2F0aW9uXCIpLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhOiAnYXBwbGljYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImNhdGVnb3J5XCIpLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gZGF0YSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuY3VzdG9tX2hvc3RzXCIpLCBuYW1lOiAnY3VzdG9tX3J1bGVzJywgZGF0YTogJ2N1c3RvbV9ydWxlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyB2aXNpYmxlOiBmYWxzZSwgbmFtZTogJ2FwcGxpY2F0aW9uX2hvc3RzJywgZGF0YTogJ2FwcGxpY2F0aW9uX2hvc3RzJyB9LFxuICAgIHsgdmlzaWJsZTogZmFsc2UsIG5hbWU6ICdhcHBsaWNhdGlvbl9pZCcsIGRhdGE6ICdhcHBsaWNhdGlvbl9pZCcgfSxcbiAgICB7IHZpc2libGU6IGZhbHNlLCBuYW1lOiAnY2F0ZWdvcnlfaWQnLCBkYXRhOiAnY2F0ZWdvcnlfaWQnIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH1cbiAgXTtcblxuICBsZXQgdHJhZmZpY0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICB0cmFmZmljQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT4gICAgXG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZXJyb3JcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIiBpZD0nZXJyb3ItYWxlcnQnPlxuICAgICAgICAgICAgICB7eyBlcnJvcl9tZXNzYWdlIH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiIWRpc2NvdmVyeV9yZXF1ZXN0ZWRcIj5cbiAgICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwibmV0d29ya19kaXNjb3ZlcnlfdGFibGVcIlxuICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtIHRleHQtaW5mb1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7eyBkaXNjb3ZlcnlfcmVxdWVzdGVkX21lc3NhZ2UgfX1cbiAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPVwicHJvZ3Jlc3NfbWVzc2FnZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPE5vdGVMaXN0XG4gICAgICAgICAgICB2LWJpbmQ6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgICAgICA8IS0tIEFkZGluZyBFeHRyYSBNZXNzYWdlIC0tPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLTFcIiB2LWh0bWw9XCJsYXN0X25ldHdvcmtfZGlzY292ZXJ5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Vbm1vdW50ZWQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmNvbnN0IGVycm9yID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVycm9yX21lc3NhZ2UgPSBpMThuKFwibWFwX3BhZ2UuZmV0Y2hfZXJyb3JcIik7XG5jb25zdCBkaXNjb3ZlcnlfcmVxdWVzdGVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IG5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5ID0gcmVmKHt9KTtcbmNvbnN0IHByb2dyZXNzX21lc3NhZ2UgPSByZWYobnVsbCk7XG5jb25zdCBsYXN0X25ldHdvcmtfZGlzY292ZXJ5ID0gcmVmKCcnKVxuY29uc3QgZGlzY292ZXJ5X3JlcXVlc3RlZF9tZXNzYWdlID0gaTE4bignZGlzY292ZXIubmV0d29ya19kaXNjb3Zlcnlfbm90X2VuYWJsZWQnKVxuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxufSlcblxuY29uc3QgZ2hvc3RfbWVzc2FnZSA9IGkxOG4oXCJkaXNjb3Zlci5naG9zdF9pY29uX2Rlc2NyXCIpO1xuY29uc3QgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID0gaTE4bihcImRpc2NvdmVyLnRvb19tYW55X2RldmljZXNfZGVzY3JcIik7XG5jb25zdCBnaG9zdF9tZXNzYWdlX2FkZGVkID0gcmVmKGZhbHNlKTtcblxubGV0IHRpbWVvdXRfaWQ7XG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgaTE4bihcImRpc2NvdmVyLmRpc2NvdmVyeV9ydW5uaW5nXCIpLFxuICBpMThuKFwiZGlzY292ZXIucHJvdG9jb2xzX25vdGVcIilcbl1cblxuY29uc3QgZGlzY292ZXJ5X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZ2V0X2Rpc2NvdmVyX3Byb2dyZXNzLmx1YWBcbmNvbnN0IG5ldHdvcmtfZGlzY292ZXJ5X2RhdGEgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L25ldHdvcmsvZGlzY292ZXJ5L2Rpc2NvdmVyLmx1YWBcbmNvbnN0IHJ1bl9uZXR3b3JrX2Rpc2NvdmVyeSA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmV0d29yay9kaXNjb3ZlcnkvcnVuX2Rpc2NvdmVyeS5sdWFgXG5cbi8qICBUaGlzIGZ1bmN0aW9uIGFkZCBub3RlcyB0byB0aGUgcGFnZXMsIGxpa2UgYWRkaW5nIG5vdGVzIFxuICogIHRvIG5vdGVfbGlzdCBvciBsYXN0IG5ldHdvcmsgZGlzY292ZXJ5IG5vdGUgXG4gKi9cbmNvbnN0IGFkZF9ub3RlcyA9IChyc3ApID0+IHtcbiAgaWYocnNwLmdob3N0X2ZvdW5kID09IHRydWVcbiAgICAgICYmIGdob3N0X21lc3NhZ2VfYWRkZWQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICBub3RlX2xpc3QudW5zaGlmdChnaG9zdF9tZXNzYWdlKTtcbiAgICBnaG9zdF9tZXNzYWdlX2FkZGVkLnZhbHVlID0gdHJ1ZTtcbiAgfVxuICBpZihyc3AudG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID09IHRydWVcbiAgICAgICYmIHRvb19tYW55X2RldmljZXNfbWVzc2FnZS52YWx1ZSA9PSBmYWxzZSkge1xuICAgIG5vdGVfbGlzdC51bnNoaWZ0KHRvb19tYW55X2RldmljZXNfbWVzc2FnZSk7XG4gICAgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlLnZhbHVlID0gdHJ1ZVxuICB9XG4gIGlmKHJzcC5naG9zdF9mb3VuZCA9PSBmYWxzZVxuICAgICAgJiYgZ2hvc3RfbWVzc2FnZV9hZGRlZC52YWx1ZSA9PSBmYWxzZSkge1xuICAgIG5vdGVfbGlzdC5zaGlmdCgpO1xuICAgIGdob3N0X21lc3NhZ2VfYWRkZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxuICBpZihyc3AudG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID09IGZhbHNlXG4gICAgICAmJiB0b29fbWFueV9kZXZpY2VzX21lc3NhZ2UudmFsdWUgPT0gdHJ1ZSkge1xuICAgIG5vdGVfbGlzdC5zaGlmdCgpO1xuICAgIHRvb19tYW55X2RldmljZXNfbWVzc2FnZS52YWx1ZSA9IGZhbHNlXG4gIH1cblxuICBsYXN0X25ldHdvcmtfZGlzY292ZXJ5LnZhbHVlID0gcnNwLmxhc3RfbmV0d29ya19kaXNjb3Zlcnk7XG59XG5cbi8qICBUaGlzIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZGlzY292ZXJ5LCBhc2tpbmcgdGhlIGJhY2tlbmQgaWYgIFxuICogIGEgbmV3IGRpc2NvdmVyeSB3YXMgcmVxdWVzdGVkIG9yIG5vdCBhbmQgaW4gY2FzZSB1cGRhdGVzIHRoZSBub3Rlc1xuICogIGFuZCB0aGUgdmFyaW91cyBtZXNzYWdlc1xuICovXG5jb25zdCBjaGVja0Rpc2NvdmVyeSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG4gIGF3YWl0ICQuZ2V0KE50b3BVdGlscy5idWlsZFVSTChkaXNjb3ZlcnlfdXJsLCB7IGlmaWQ6IHByb3BzLmlmaWQgfSksIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBpZihyc3AucnNwLmRpc2NvdmVyeV9yZXF1ZXN0ZWQgPT0gdHJ1ZSkge1xuICAgICAgZGlzY292ZXJ5X3JlcXVlc3RlZC52YWx1ZSA9IHRydWU7XG4gICAgICBpZihyc3AucnNwLnByb2dyZXNzICE9IFwiXCIpIHtcbiAgICAgICAgcHJvZ3Jlc3NfbWVzc2FnZS52YWx1ZSA9IHJzcC5yc3AucHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2NvdmVyeV9yZXF1ZXN0ZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgIHByb2dyZXNzX21lc3NhZ2UudmFsdWUgPSAnJztcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZW91dF9pZCk7XG4gICAgfVxuICAgIGFkZF9ub3Rlcyhyc3AucnNwKTtcbiAgfSk7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIG5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICBuZXR3b3JrX2Rpc2NvdmVyeV90YWJsZS52YWx1ZS5yZWxvYWQoKTtcbn1cblxub25Nb3VudGVkKCgpID0+IHtcbiAgdGltZW91dF9pZCA9IHNldEludGVydmFsKGNoZWNrRGlzY292ZXJ5LCAzMDAwKTtcbn0pLFxuICAgIFxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xufSk7XG5cbm9uVW5tb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZGVzdHJveSgpXG59KTtcblxuLyogIEluaXRpYWxpemUgdGhlIGRhdGF0YWJsZSwgYWRkaW5nIHRoZSBhY3Rpb24gYnV0dG9ucyAobmV4dCB0byB0aGUgc2VhcmNoKSxcbiAqICB0aGUgdmFyaW91cyBjb2x1bW5zLCBuYW1lcyBhbmQgZGF0YSBhbmQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRhdGF0YWJsZVxuICovXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFt7XG4gICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHRleHQ6IGkxOG4oXCJkaXNjb3Zlci5zdGFydF9kaXNjb3ZlcnlcIikgKyAnIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtcGxheVwiPjwvaT4nLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAkLmdldChOdG9wVXRpbHMuYnVpbGRVUkwocnVuX25ldHdvcmtfZGlzY292ZXJ5LCB7IGlmaWQ6IHByb3BzLmlmaWQgfSksIGZ1bmN0aW9uKF8pIHt9KVxuICAgICAgICAvKiBTZXQgdGhlIGRlc2NvdmVyeSByZXF1ZXN0ZWQgdG8gdHJ1ZSAqL1xuICAgICAgICB0aW1lb3V0X2lkID0gc2V0SW50ZXJ2YWwoY2hlY2tEaXNjb3ZlcnksIDEwMDApO1xuICAgICAgfVxuICAgIH1cbiAgXTtcbiAgICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwobmV0d29ya19kaXNjb3ZlcnlfZGF0YSwgeyBpZmlkOiBwcm9wcy5pZmlkIH0pLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDAgLyogYXBwbGljYXRpb24gY29sdW1uICovLCAnYXNjJyBdXSxcbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaXBfYWRkcmVzc1wiKSwgbmFtZTogJ2lwJywgZGF0YTogJ2lwJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJuYW1lXCIpLCBuYW1lOiAnbmFtZScsIGRhdGE6ICduYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYWNfc3RhdHMubWFudWZhY3R1cmVyXCIpLCBuYW1lOiAnbWFudWZhY3R1cmVyJywgZGF0YTogJ21hbnVmYWN0dXJlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFjX2FkZHJlc3NcIiksIG5hbWU6ICdtYWNfYWRkcmVzcycsIGRhdGE6ICdtYWNfYWRkcmVzcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwib3NcIiksIG5hbWU6ICdvcycsIGRhdGE6ICdvcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiZGV2aWNlXCIpLCBuYW1lOiAnZGV2aWNlJywgZGF0YTogJ2RldmljZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG5cbiAgbGV0IHRyYWZmaWNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgdHJhZmZpY0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkICBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgPGRpdiBpZD1cIm1hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXBcIiA6Y2xhc3M9XCJbIGxvYWRpbmcgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnIF1cIj5cbiAgICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwidGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cFwiIDppZD1cInRhYmxlX2NvbmZpZy5pZFwiIDprZXk9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCIgOmNvbHVtbnNfY29uZmlnPVwidGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCIgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cblxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHRhYmxlX21hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXAgPSByZWYobnVsbCk7XG5jb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3N5c3RlbS9jb25maWd1cmF0aW9ucy9saXN0X2F2YWlsYWJsZV9iYWNrdXBzLmx1YWBcbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSlcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgZGF0ZV9mb3JtYXQ6IFN0cmluZyxcbn0pO1xuXG5cbmNvbnN0IGZvcm1hdF9mbG93c19pY29uID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgY29uc3QgbXNfZGF0YSA9IGRhdGEgKiAxMDAwO1xuICBsZXQgZGF0ZV9mb3JtYXQgPSBcIkhIOk1NOlNTXCI7XG4gIGlmIChwcm9wcy5kYXRlX2Zvcm1hdCA9PSBcImxpdHRsZV9lbmRpYW5cIikge1xuICAgIGRhdGVfZm9ybWF0ID0gXCJERC9NTS9ZWVlZIFwiICsgZGF0ZV9mb3JtYXQ7XG4gIH0gZWxzZSBpZiAocHJvcHMuZGF0ZV9mb3JtYXQgPT0gXCJtaWRkbGVfZW5kaWFuXCIpIHtcbiAgICBkYXRlX2Zvcm1hdCA9IFwiTU0vREQvWVlZWSBcIiArIGRhdGVfZm9ybWF0O1xuICB9IGVsc2Uge1xuICAgIGRhdGVfZm9ybWF0ID0gXCJZWVlZL01NL0REIFwiICsgZGF0ZV9mb3JtYXQ7XG4gIH1cbiAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChtc19kYXRhLCBkYXRlX2Zvcm1hdCk7XG59XG5cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgdGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cC52YWx1ZS5yZWxvYWQoKTtcbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc2V0X2RhdGF0YWJsZV9jb25maWcoKTtcbn0pO1xuXG5jb25zdCB0cmlnZ2VyX2Rvd25sb2FkID0gZnVuY3Rpb24gKHJvdykge1xuICB3aW5kb3cub3BlbihgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3N5c3RlbS9jb25maWd1cmF0aW9ucy9kb3dubG9hZF9iYWNrdXAubHVhP2Vwb2NoPSR7cm93LmVwb2NofSZkb3dubG9hZD10cnVlYCk7XG59XG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcblxuICBsZXQgZG93bmxvYWRfYmFja3VwX2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImRvd25sb2FkX2JhY2t1cF9oYW5kbGVyXCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgdHJpZ2dlcl9kb3dubG9hZChyb3dEYXRhKTtcbiAgICB9LFxuICB9XG5cbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZG93bmxvYWRfYmFja3VwX2hhbmRsZXIsIGljb246ICdmYXMgZmEtZG93bmxvYWQgZmEtbGcnLCB0aXRsZTogaTE4bignZG93bmxvYWQnKSB9LFxuICBdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2RhdGF0YWJsZV9jb25maWcoKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcblxuXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogYCR7dXJsfWAsXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBpZDogXCJtYW5hZ2VfY29uZmlndXJhdGlvbnNfYmFja3VwXCIsXG4gICAgdGFibGVfY29uZmlnOiB7XG4gICAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBzY3JvbGxYOiB0cnVlLFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDAgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgbGV0IGNvbHVtbnMgPSBbXTtcblxuICBjb2x1bW5zLnB1c2goXG4gICAge1xuICAgICAgY29sdW1uTmFtZTogX2kxOG4oXCJiYWNrdXBfZGF0ZVwiKSwgb3JkZXJhYmxlOiB0cnVlLCB0YXJnZXRzOiAwLCBuYW1lOiAnZXBvY2gnLCBkYXRhOiAnZXBvY2gnLCBjbGFzc05hbWU6ICd0ZXh0LWxlZnQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIF8sIHJvd0RhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdF9mbG93c19pY29uKGRhdGEsIHJvd0RhdGEpXG4gICAgICB9XG4gICAgfSwge1xuICAgIGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgb3JkZXJhYmxlOiBmYWxzZSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH1cbiAgfVxuICAgICxcbiAgKTtcblxuXG5cbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIHRhYmxlX2NvbmZpZy52YWx1ZSA9IGRlZmF1bHREYXRhdGFibGVDb25maWc7XG59XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXG4gIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVcIikgfX08L2I+XG4gIDwvbGFiZWw+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuXHQgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ3NubXAnPydidG4tcHJpbWFyeSBhY3RpdmUnOididG4tc2Vjb25kYXJ5J11cIj5cblx0ICAgICAgPGlucHV0ICBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJydWxlX3R5cGVcIiB2YWx1ZT1cInNubXBcIiBAY2xpY2s9XCJzZXRfcnVsZV90eXBlKCdzbm1wJylcIj4ge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfc25tcFwiKSB9fVxuXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5zbm1wX2RldmljZVwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NubXBfZGV2aWNlXCJcbiAgICAgIFx0XHRcdCAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfaW50ZXJmYWNlcygpXCJcbiAgICAgICAgICAgICAgOm9wdGlvbnM9XCJzbm1wX2RldmljZXNfbGlzdFwiPlxuICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgXG4gICAgPHRlbXBsYXRlIHYtaWY9XCJlbmFibGVfaW50ZXJmYWNlcyA9PSB0cnVlXCI+XG4gICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcuc25tcF9pbnRlcmZhY2VcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zbm1wX2ludGVyZmFjZVwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwic25tcF9pbnRlcmZhY2VzX2xpc3RcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuXG4gICAgPGRpdiAgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpY1wiXG4gICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9hY3RpdmVfdGhyZXNob2xkKClcIlxuXG4gICAgICAgICAgICA6b3B0aW9ucz1cInNubXBfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIEZyZXF1ZW5jeSBpbmZvcm1hdGlvbiwgYSBmcmVxdWVuY3kgb2YgMSBkYXksIDUgbWludXRlIG9yIDEgaG91ciBmb3IgZXhhbXBsZSAtLT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKX19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2ZyZXF1ZW5jeVwiXG4gICAgICAgICAgOm9wdGlvbnM9XCJmcmVxdWVuY3lfbGlzdFwiPlxuXHRcdFx0ICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBUaHJlc2hvbGQgaW5mb3JtYXRpb24sIG1heGltdW0gYW1vdW50IG9mIGJ5dGVzIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiIHN0eWxlPVwibWFyZ2luLXRvcDozcHhcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRocmVzaG9sZFwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidmlzaWJsZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwibWV0cmljX3R5cGVcIlxuICAgICAgICAgICAgOm9wdGlvbnM9XCJtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPiAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIiA6Y2xhc3M9XCJbIG1ldHJpY190eXBlLmlkID09ICd0aHJvdWdocHV0JyA/ICdwLTAnIDogJyddXCIgPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3Rocm91Z2hwdXQnICYmIG1ldHJpY190eXBlLmlkICE9ICdwYWNrZXRzJ1wiIHYtZm9yPVwibWVhc3VyZSBpbiB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0XCIgPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICdwZXJjZW50YWdlJyAmJiBtZXRyaWNfdHlwZS5pZCAhPSAncGFja2V0cydcIiB2LWZvcj1cIm1lYXN1cmUgaW4gcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdFwiPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd2b2x1bWUnICYmIG1ldHJpY190eXBlLmlkICE9ICdwYWNrZXRzJ1wiIHYtZm9yPVwibWVhc3VyZSBpbiB2b2x1bWVfdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgIT0gJ3BhY2tldHMnXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIGJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIm1lYXN1cmUgaW4gc2lnbl90aHJlc2hvbGRfbGlzdFwiID5cbiAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX3NpZ25cIiBuYW1lPVwidGhyZXNob2xkX3NpZ25cIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9zaWduX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIGJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIm1lYXN1cmUgaW4gc2lnbl9hYnNvbHV0ZV92YWx1ZVwiID5cbiAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX3NpZ25cIiBuYW1lPVwidGhyZXNob2xkX3NpZ25cIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFic29sdXRlX3ZhbHVlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgPGRpdiA6Y2xhc3M9XCJbdmlzaWJsZSA/ICdjb2wtc20tMicgOiAnY29sLXNtLTgnXVwiPlxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICdwZXJjZW50YWdlJ1wiPlxuICAgICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAwXCIgbWluPVwiMVwiIHJlcXVpcmVkPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPiBcbiAgICAgICAgICA8aW5wdXQgdmFsdWU9XCIxXCIgcmVmPVwidGhyZXNob2xkXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ0aHJlc2hvbGRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG1heD1cIjEwMjNcIiBtaW49XCIxXCIgcmVxdWlyZWQ+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlIGFsZXJ0IGFsZXJ0LXdhcm5pbmcgbXQtM1wiPlxuICAgICAgICAgIHt7IF9pMThuKFwic2hvd19hbGVydHMuaG9zdF9ydWxlc19wZXJjZW50YWdlXCIpIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPE5vdGVMaXN0XG4gICAgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPlxuICAgIDwvTm90ZUxpc3Q+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJpc19lZGl0X3BhZ2UgPT0gZmFsc2VcIj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiAgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGQgJiYgcnVsZV90eXBlID09ICdIb3N0J1wiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiICA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZCAmJiBydWxlX3R5cGUgPT0gJ0hvc3QnXCI+e3tfaTE4bignYXBwbHknKX19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBpbnB1dF9tYWNfbGlzdCA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3RyaWdnZXJfYWxlcnRzID0gcmVmKFwiXCIpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCcsJ2VkaXQnXSk7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgaW5pdF9mdW5jID0gcmVmKG51bGwpO1xuY29uc3QgZGVsZXRlX3JvdyA9IHJlZihudWxsKTtcbmNvbnN0IHNubXBfbWV0cmljX2xpc3QgPSByZWYoW10pXG5jb25zdCBzbm1wX2RldmljZXNfbGlzdCA9IHJlZihbXSlcbmxldCBzbm1wX2ludGVyZmFjZXNfbGlzdCA9IHJlZihbXSlcbmxldCBlbmFibGVfaW50ZXJmYWNlcyA9IHJlZih0cnVlKTtcbmNvbnN0IHNubXBfaW50ZXJmYWNlc191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9hdmFpbGFibGVfaW50ZXJmYWNlcy5sdWFgXG5cbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gcmVmKFtdKVxuY29uc3QgdGhyZXNob2xkX21lYXN1cmUgPSByZWYobnVsbClcbmNvbnN0IHRocmVzaG9sZF9zaWduID0gcmVmKG51bGwpXG5jb25zdCBzZWxlY3RlZF9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9zbm1wX2RldmljZSA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlID0gcmVmKHt9KVxuXG5jb25zdCBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9mcmVxdWVuY3kgPSByZWYoe30pXG5jb25zdCBkaXNhYmxlX2FkZCA9IHJlZih0cnVlKVxuY29uc3QgbWV0cmljX3R5cGUgPSByZWYoe30pXG5jb25zdCB2aXNpYmxlID0gcmVmKHRydWUpXG5jb25zdCBydWxlX3R5cGUgPSByZWYoXCJzbm1wXCIpO1xuY29uc3QgaXNfZWRpdF9wYWdlID0gcmVmKGZhbHNlKVxuY29uc3QgcGFnZV9jc3JmXyA9IHJlZihudWxsKTtcbmxldCBtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdCA9IHJlZihbXSk7XG5cbmxldCB0aXRsZSA9ICBfaTE4bignaWZfc3RhdHNfY29uZmlnLmFkZF9ob3N0X3J1bGVzX3RpdGxlJyk7XG5cblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfc25tcF9kZXZpY2VfcnVsZXMubm90ZV8xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV9zbm1wX2RldmljZV9ydWxlcy5ub3RlXzInKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlX3NubXBfZGV2aWNlX3J1bGVzLm5vdGVfMycpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMycpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNCcpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNScpXG5dXG5cbmNvbnN0IG1ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwYWNrZXRzJyksIGxhYmVsOiBfaTE4bigncGFja2V0cycpLCBpZDogJ3BhY2tldHMnLCBhY3RpdmU6IGZhbHNlIH1cbl0pXG5cbmNvbnN0IHZvbHVtZV90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdrYicpLCBsYWJlbDogX2kxOG4oJ2tiJyksIGlkOiAna2InLCB2YWx1ZTogMTAyNCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWInKSwgbGFiZWw6IF9pMThuKCdtYicpLCBpZDogJ21iJywgdmFsdWU6IDEwNDg1NzYsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2diJyksIGxhYmVsOiBfaTE4bignZ2InKSwgaWQ6ICdnYicsIHZhbHVlOiAxMDczNzQxODI0LCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlfSxcbl0pO1xuXG5jb25zdCB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0ID0gcmVmKFtcbiAgeyB0aXRsZTogX2kxOG4oJ2ticHMnKSwgbGFiZWw6IF9pMThuKCdrYnBzJyksIGlkOiAna2JwcycsIHZhbHVlOiAxMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdtYnBzJyksIGxhYmVsOiBfaTE4bignbWJwcycpLCBpZDogJ21icHMnLCB2YWx1ZTogMTAwMDAwMCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignZ2JwcycpLCBsYWJlbDogX2kxOG4oJ2dicHMnKSwgaWQ6ICdnYnBzJywgdmFsdWU6IDEwMDAwMDAwMDAsIGFjdGl2ZTogdHJ1ZSwgZGVmYXVsdF9hY3RpdmU6IHRydWV9LFxuXSk7XG5cbmNvbnN0IHNpZ25fdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiPlwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiBmYWxzZSwgYWJzb2x1dGVfdmFsdWU6IHRydWUgfSxcbiAgeyB0aXRsZTogXCItXCIsIGxhYmVsOiBcIjxcIiwgaWQ6ICdtaW51cycsIHZhbHVlOiAtMSwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHNpZ25fYWJzb2x1dGVfdmFsdWUgPSByZWYoW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiPlwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiB0cnVlLCBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3QgPSBbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCIlXCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IHRydWUgfSxcbl1cblxuXG5jb25zdCBob3N0ID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGQgPSByZWYobnVsbClcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkX2xpc3Q6IEFycmF5LFxuICBzbm1wX2RldmljZXNfbGlzdDogQXJyYXksXG4gIHNubXBfbWV0cmljX2xpc3Q6IEFycmF5LFxuICBmcmVxdWVuY3lfbGlzdDogQXJyYXksXG4gIGluaXRfZnVuYzogRnVuY3Rpb24sXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxuZnVuY3Rpb24gcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHJhZGlvX2FycmF5KSB7XG5cbiAgcmFkaW9fYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5hY3RpdmUgPSBpdGVtLmRlZmF1bHRfYWN0aXZlID09IHRydWUgKTtcbn1cblxuLyoqXG4gKiBcbiAqIFJlc2V0IGZpZWxkcyBpbiBtb2RhbCBmb3JtIFxuICovXG5jb25zdCByZXNldF9tb2RhbF9mb3JtID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGlmICghaXNfZWRpdF9wYWdlLnZhbHVlKSB7XG5cbiAgICBob3N0LnZhbHVlID0gXCJcIjtcbiAgICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBzbm1wX21ldHJpY19saXN0LnZhbHVlWzBdO1xuICAgIHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlID0gbnVsbDtcbiAgICBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZSA9IHNubXBfZGV2aWNlc19saXN0LnZhbHVlWzBdO1xuICAgIGNoYW5nZV9pbnRlcmZhY2VzKCk7XG5cbiAgICBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUgPSBzbm1wX21ldHJpY19saXN0LnZhbHVlWzBdO1xuICAgIGNoYW5nZV9hY3RpdmVfdGhyZXNob2xkKClcbiAgICBcbiAgICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG5cbiAgICAvLyByZXNldCBtZXRyaWNfdHlwZV9saXN0XG4gICAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB0LmFjdGl2ZSA9IGZhbHNlKTtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdLmFjdGl2ZSA9IHRydWU7XG4gICAgXG4gICAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG4gICAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuICAgIHJlc2V0X3JhZGlvX3NlbGVjdGlvbihzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlKTtcblxuICAgIHJ1bGVfdHlwZS52YWx1ZSA9IFwic25tcFwiO1xuXG4gICAgZGlzYWJsZV9hZGQudmFsdWUgPSB0cnVlO1xuICAgIGVuYWJsZV9pbnRlcmZhY2VzLnZhbHVlID0gZmFsc2U7XG5cbiAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSAxO1xuICB9XG59XG5cbmNvbnN0IHNldF9ydWxlX3R5cGUgPSAodHlwZSkgPT4ge1xuICAgIHJ1bGVfdHlwZS52YWx1ZSA9IHR5cGU7XG59XG5cblxuXG4vKipcbiAqIFxuICogU2V0IHJvdyB0byBlZGl0IFxuICovXG5jb25zdCBzZXRfcm93X3RvX2VkaXQgPSAocm93KSA9PiB7XG5cbiAgaWYocm93ICE9IG51bGwpIHtcbiAgICBpc19lZGl0X3BhZ2UudmFsdWUgPSB0cnVlO1xuICAgIHRpdGxlID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5lZGl0X2hvc3RfcnVsZXNfdGl0bGUnKTtcblxuICAgIGRpc2FibGVfYWRkLnZhbHVlID0gZmFsc2U7XG5cbiAgICBzbm1wX2RldmljZXNfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihpdGVtLmxhYmVsX3RvX2luc2VydCA9PSByb3cuZGV2aWNlKVxuICAgICAgICBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZSA9IGl0ZW07XG4gICAgfSApXG5cbiAgICAvLyBzZXQgdGhyZXNob2xkIHNpZ25cbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHQuYWN0aXZlID0gKHQudmFsdWUgPT0gcm93LnRocmVzaG9sZF9zaWduKVxuICAgIH0pXG5cbiAgICBzbm1wX21ldHJpY19saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gcm93Lm1ldHJpYylcbiAgICAgICAgc2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljLnZhbHVlID0gdDtcbiAgICB9KVxuXG4gICAgLy8gc2V0IHRocmVzaG9sZFxuICAgIGlmKHJvdy5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJylcbiAgICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICggKHJvdy50aHJlc2hvbGQgJSB0LnZhbHVlKSA9PSAwICkge1xuICAgICAgICAgIGxldCByb3dfdGhyZXNob2xkX3ZhbHVlID0gcm93LnRocmVzaG9sZCAvIHQudmFsdWU7XG4gICAgICAgICAgaWYoIHJvd190aHJlc2hvbGRfdmFsdWUgPCAxMDI0KSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3dfdGhyZXNob2xkX3ZhbHVlID09IDAgPyAxIDogcm93X3RocmVzaG9sZF92YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICBlbHNlIGlmKHJvdy5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcbiAgICAgIHJvdy50aHJlc2hvbGQgPSByb3cudGhyZXNob2xkICogODtcbiAgICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgIGlmICggKHJvdy50aHJlc2hvbGQgJSB0LnZhbHVlKSA9PSAwICkge1xuICAgICAgICAgICAgbGV0IHJvd190aHJlc2hvbGRfdmFsdWUgPSByb3cudGhyZXNob2xkIC8gdC52YWx1ZTtcbiAgICAgICAgICAgIGlmKCByb3dfdGhyZXNob2xkX3ZhbHVlIDwgMTAwMCkge1xuICAgICAgICAgICAgICB0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvd190aHJlc2hvbGRfdmFsdWUgPT0gMCA/IDEgOiByb3dfdGhyZXNob2xkX3ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vcGVyY2VudGFnZSBjYXNlXG4gICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3cudGhyZXNob2xkO1xuICAgIH1cbiAgICBjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCgpO1xuICAgIG1ldHJpY190eXBlX2FjdGl2ZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0uaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gaXRlbTtcbiAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgfSBlbHNlIFxuICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG5cbiAgICAvLyBzZXQgcnVsZV90eXBlXG4gICAgcnVsZV90eXBlLnZhbHVlID0gcm93LnJ1bGVfdHlwZTtcbiAgICBzbm1wX2RldmljZXNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZih0LmxhYmVsID09IHJvdy5kZXZpY2UpXG4gICAgICAgIHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlID0gdDtcbiAgICB9KVxuXG4gICAgZnJlcXVlbmN5X2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbS5pZCA9PSByb3cuZnJlcXVlbmN5KVxuICAgICAgICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBpdGVtO1xuICAgIH0pO1xuXG4gICAgY2hhbmdlX2ludGVyZmFjZXMocm93LmRldmljZV9wb3J0KTtcbiAgXG4gICAgXG4gIH1cbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgaWYocm93ICE9IG51bGwpXG4gICAgc2V0X3Jvd190b19lZGl0KHJvdyk7XG4gIGVsc2VcbiAgICByZXNldF9tb2RhbF9mb3JtKCk7XG5cbiAgXG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cblxuY29uc3Qgc2V0X2FjdGl2ZV9zaWduX3JhZGlvID0gKHNlbGVjdGVkX3JhZGlvKSA9PiB7XG4gIGNvbnN0IGlkID0gc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LmlkO1xuICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgfSlcblxufVxuXG4vKipcbiAqIFxuICogU2V0IHRoZSBtZXRyaWMgdHlwZVxuICovXG5jb25zdCBzZXRfYWN0aXZlX3JhZGlvID0gKHNlbGVjdGVkX3JhZGlvKSA9PiB7XG4gIGNvbnN0IGlkID0gc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LmlkO1xuXG4gIGlmKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd0aHJvdWdocHV0Jykge1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfSBlbHNlIGlmIChtZXRyaWNfdHlwZS52YWx1ZS5pZCA9PSAndm9sdW1lJykge1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICdwZXJjZW50YWdlJyl7XG4gICAgcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICdwYWNrZXRzJyl7XG4gICAgXG4gIH0gXG4gIFxufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9pbnRlcmZhY2VzKGludGVyZmFjZV9pZCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc25tcF9pbnRlcmZhY2VzX3VybCtcIj9ob3N0PVwiK3NlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsX3RvX2luc2VydCwgcmVzdF9wYXJhbXMpXG4gIGxldCBpbnRlcmZhY2VzX2xpc3QgPSBbXVxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBpbnRlcmZhY2VzX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbiAgbGV0IHJlc3VsdF9pbnRlcmZhY2VzID0gW11cblxuICBpbnRlcmZhY2VzX2xpc3QuZm9yRWFjaChpZmFjZSA9PiB7XG4gICAgaWYoaWZhY2UubmFtZSAhPSBudWxsICYmIGlmYWNlLm5hbWUgIT0gXCJcIiAmJiBpZmFjZS5uYW1lICE9IGlmYWNlLmlkKVxuICAgICAgcmVzdWx0X2ludGVyZmFjZXMucHVzaCh7bGFiZWw6IGlmYWNlLm5hbWUgKyBcIiAoXCIraWZhY2UuaWQrXCIpXCIsIGlkOiBpZmFjZS5pZCwgbmFtZTogaWZhY2UubmFtZSB9KVxuICAgIGVsc2VcbiAgICAgIHJlc3VsdF9pbnRlcmZhY2VzLnB1c2goe2xhYmVsOiBpZmFjZS5pZCwgaWQ6IGlmYWNlLmlkLCAgbmFtZTogaWZhY2UuaWR9KVxuICB9KVxuICByZXN1bHRfaW50ZXJmYWNlcy5wdXNoKHtsYWJlbDogXCIqXCIsIGlkOlwiKlwiLCBuYW1lOlwiKlwifSlcbiAgcmVzdWx0X2ludGVyZmFjZXMuc29ydChmdW5jdGlvbihhLGIpIHtyZXR1cm4gKGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpIDwgYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSA/IC0xIDogMCk7fSk7XG5cbiAgaWYgKGludGVyZmFjZV9pZCAhPSBudWxsKVxuICAgIHJlc3VsdF9pbnRlcmZhY2VzLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gaW50ZXJmYWNlX2lkKVxuICAgICAgICBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSA9IHQ7XG4gICAgfSlcbiAgc25tcF9pbnRlcmZhY2VzX2xpc3QudmFsdWUgPSByZXN1bHRfaW50ZXJmYWNlcztcbiAgLy8gZGVidWdnZXI7XG4gIGlmKHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsX3RvX2luc2VydCA9PSBcImFsbFwiKVxuICAgIGVuYWJsZV9pbnRlcmZhY2VzLnZhbHVlID0gZmFsc2U7XG4gIGVsc2VcbiAgICBlbmFibGVfaW50ZXJmYWNlcy52YWx1ZSA9IHRydWU7XG5cbn1cblxuZnVuY3Rpb24gY2hhbmdlX2FjdGl2ZV90aHJlc2hvbGQoKSB7XG4gIGxldCBsaXN0X21ldHJpY3NfYWN0aXZlID0gW107XG4gIGxldCBsaXN0X3NpZ25fYWN0aXZlID0gW11cbiAgaWYoc2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljLnZhbHVlLmlkID09ICdwYWNrZXRzJyApIHtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgIT0gJ3BlcmNlbnRhZ2UnKVxuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbGlzdF9tZXRyaWNzX2FjdGl2ZS5wdXNoKHQpO1xuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgICB9XG4gICAgfSlcbiAgfSBlbHNlIGlmIChzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQgPT0gJ2Vycm9ycycgKSB7XG4gICAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZih0LmlkICE9ICdwYWNrZXRzJylcbiAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGxpc3RfbWV0cmljc19hY3RpdmUucHVzaCh0KTtcbiAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSB0O1xuICAgICAgfVxuICAgIH0pXG5cbiAgfSBlbHNlIHtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gJ3BhY2tldHMnKVxuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGxpc3RfbWV0cmljc19hY3RpdmUucHVzaCh0KTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cblxuICBtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdC52YWx1ZSA9IGxpc3RfbWV0cmljc19hY3RpdmU7XG59XG5cblxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGFkZCBydWxlIHRvIHJ1bGVzIGxpc3RcbiAqL1xuY29uc3QgYWRkXyA9IChpc19lZGl0KSA9PiB7XG4gIGxldCB0bXBfaG9zdCA9ICcnXG4gIGlmKHJ1bGVfdHlwZS52YWx1ZSA9PSAnc25tcCcpXG4gICAgdG1wX2hvc3QgPSBob3N0LnZhbHVlO1xuXG4gIGNvbnN0IHRtcF9mcmVxdWVuY3kgPSBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9tZXRyaWNfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUubGFiZWw7XG4gIGNvbnN0IHRtcF9kZXZpY2UgPSBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZS5sYWJlbF90b19pbnNlcnQ7XG4gIGNvbnN0IHRtcF9kZXZpY2VfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZS5sYWJlbDtcbiAgY29uc3QgdG1wX2RldmljZV9pZmlkID0gc2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UudmFsdWUgPT0gbnVsbCB8fCBPYmplY3QuZW50cmllcyhzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSkubGVuZ3RoID09PSAwID8gXCIqXCI6IHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlLmlkO1xuICBjb25zdCB0bXBfZGV2aWNlX2lmaWRfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5lbnRyaWVzKHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlKS5sZW5ndGggPT09IDAgPyBcIipcIjpzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZS5sYWJlbDtcbiAgLy8gZGVidWdnZXI7XG4gIC8vIGNvbnNvbGUubG9nKHRocmVzaG9sZClcbiAgbGV0IHRtcF9tZXRyaWNfdHlwZSA9IG1ldHJpY190eXBlLnZhbHVlLmlkO1xuICBsZXQgYmFzaWNfdmFsdWU7XG4gIGxldCBtZWFzdXJlX3VuaXRfbGFiZWw7XG4gIGxldCBiYXNpY19zaWduX3ZhbHVlO1xuICBsZXQgdG1wX3RocmVzaG9sZDtcbiAgbGV0IHRtcF9zaWduX3ZhbHVlO1xuXG4gIGlmKHZpc2libGUudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgdG1wX21ldHJpY190eXBlID0gJydcbiAgICB0bXBfZXh0cmFfbWV0cmljID0gJydcbiAgICB0bXBfdGhyZXNob2xkID0gdGhyZXNob2xkLnZhbHVlLnZhbHVlO1xuICB9XG4gIGlmKHRtcF9tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcblxuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIHsgYmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyBtZWFzdXJlX3VuaXRfbGFiZWwgPSBtZWFzdXJlLmxhYmVsOyB9fSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpIC8gODtcbiAgICAvKiBUaGUgdGhyb3VnaHB1dCBpcyBpbiBiaXQsIHRoZSB2b2x1bWUgaW4gQnl0ZXMhISAqL1xuICB9IGVsc2UgaWYodG1wX21ldHJpY190eXBlID09ICd2b2x1bWUnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSB7YmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyBtZWFzdXJlX3VuaXRfbGFiZWwgPSBtZWFzdXJlLmxhYmVsO30gfSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9IGVsc2UgaWYodG1wX21ldHJpY190eXBlID09ICdwZXJjZW50YWdlJykge1xuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0bXBfdGhyZXNob2xkID0gdG1wX3NpZ25fdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICAgIG1lYXN1cmVfdW5pdF9sYWJlbCA9IFwiJVwiO1xuICB9IGVsc2Uge1xuICAgIHRtcF9zaWduX3ZhbHVlID0gMTtcbiAgICB0bXBfdGhyZXNob2xkID0gcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfVxuICBsZXQgZW1pdF9uYW1lID0gJ2FkZCc7XG5cbiAgaWYoaXNfZWRpdCA9PSB0cnVlKSBcbiAgICBlbWl0X25hbWUgPSAnZWRpdCc7XG5cbiAgZW1pdChlbWl0X25hbWUsIHsgXG4gICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LCBcbiAgICBtZXRyaWM6IHRtcF9tZXRyaWMsXG4gICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgIHNubXBfZGV2aWNlOiB0bXBfZGV2aWNlLFxuICAgIHNubXBfZGV2aWNlX2xhYmVsOiB0bXBfZGV2aWNlX2xhYmVsLFxuICAgIHNubXBfZGV2aWNlX3BvcnQ6IHRtcF9kZXZpY2VfaWZpZCxcbiAgICBzbm1wX2RldmljZV9wb3J0X2xhYmVsOiB0bXBfZGV2aWNlX2lmaWRfbGFiZWwsXG4gICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgc25tcF90aHJlc2hvbGRfdmFsdWU6IHRocmVzaG9sZC52YWx1ZS52YWx1ZSxcbiAgICBzbm1wX3RocmVzaG9sZF91bml0OiBtZWFzdXJlX3VuaXRfbGFiZWwsXG4gICAgc25tcF9tZXRyaWNfdHlwZV9sYWJlbDogbWV0cmljX3R5cGUudmFsdWUudGl0bGVcbiAgfSk7XG4gIFxuICAgIFxuXG4gIGNsb3NlKCk7XG59O1xuXG5cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICBhZGRfKHRydWUpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmNvbnN0IGZvcm1hdF9zbm1wX2RldmljZXNfbGlzdCA9IGZ1bmN0aW9uKF9zbm1wX2RldmljZXNfbGlzdCkge1xuICBsZXQgZGV2aWNlc19saXN0ID0gW107XG4gIF9zbm1wX2RldmljZXNfbGlzdC5kYXRhLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYoaXRlbS5jb2x1bW5fbmFtZSAhPSBudWxsICYmIGl0ZW0uY29sdW1uX25hbWUgIT0gXCJcIiAmJiBpdGVtLmNvbHVtbl9uYW1lICE9IFwiYWxsXCIpXG4gICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9uYW1lICsgXCIgKFwiK2l0ZW0uY29sdW1uX2tleStcIilcIiAsIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fa2V5fSk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoaXRlbS5jb2x1bW5fbmFtZSA9PSBcImFsbFwiKVxuICAgICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9rZXksIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fbmFtZX0pO1xuICAgICAgZWxzZVxuICAgICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9rZXksIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fa2V5fSk7XG4gICAgfVxuXG4gIH0pXG4gIGNvbnN0IGlwMmludCA9IHN0ciA9PiBzdHJcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5yZWR1Y2UoKGFjYywgYnl0ZSkgPT4gYWNjICsgYnl0ZS5wYWRTdGFydCgzLCAwKSwgJycpO1xuXG4gIGRldmljZXNfbGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtyZXR1cm4gKGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpIDwgYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSA/IC0xIDogMCk7fSk7XG4gIHJldHVybiBkZXZpY2VzX2xpc3Q7XG59XG5cbmNvbnN0IG1ldHJpY3NMb2FkZWQgPShfc25tcF9kZXZpY2VzX2xpc3QsIF9zbm1wX21ldHJpY19saXN0LCBwYWdlX2NzcmYpID0+IHtcblxuICBzbm1wX2RldmljZXNfbGlzdC52YWx1ZSA9IGZvcm1hdF9zbm1wX2RldmljZXNfbGlzdChfc25tcF9kZXZpY2VzX2xpc3QpO1xuICBzbm1wX21ldHJpY19saXN0LnZhbHVlID0gX3NubXBfbWV0cmljX2xpc3Q7XG4gIGZyZXF1ZW5jeV9saXN0LnZhbHVlID0gcHJvcHMuZnJlcXVlbmN5X2xpc3Q7XG4gIHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeV9saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBzbm1wX21ldHJpY19saXN0LnZhbHVlWzBdO1xuICBwYWdlX2NzcmZfLnZhbHVlID0gcGFnZV9jc3JmO1xuICBcbiAgXG59XG5cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIG1ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgIGlmKHQuYWN0aXZlKSB7XG4gICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgfVxuXG4gIH0pXG59KVxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSwgbWV0cmljc0xvYWRlZCB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi00XCI+XG4gICAgICAgICAgPGg0Pnt7IF9pMThuKCdpZl9zdGF0c19jb25maWcuc25tcF9ydWxlcycpIH19PC9oND5cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X3J1bGVzXCI+XG4gICAgICAgICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvTW9kYWxEZWxldGVDb25maXJtPlxuICAgICAgICAgIDxNb2RhbEFkZFNOTVBSdWxlcyByZWY9XCJtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZVwiXG4gICAgICAgICAgICA6ZnJlcXVlbmN5X2xpc3Q9XCJmcmVxdWVuY3lfbGlzdFwiXG4gICAgICAgICAgICA6aW5pdF9mdW5jPVwiaW5pdF9lZGl0XCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfaG9zdF9ydWxlXCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdFwiPlxuICAgICAgICAgIDwvTW9kYWxBZGRTTk1QUnVsZXM+XG4gICAgICAgICAgXG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ob3N0X3J1bGVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxOb3RlTGlzdFxuICAgICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uVW5tb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRTTk1QUnVsZXMgfSBmcm9tIFwiLi9tb2RhbC1hZGQtc25tcC1kZXZpY2UtcnVsZXMudnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGlmaWQ6IFN0cmluZyxcbn0pXG5cbmNvbnN0IHRhYmxlX2hvc3RfcnVsZXMgPSByZWYobnVsbClcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKG51bGwpXG5jb25zdCBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZSA9IHJlZihudWxsKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pXG5jb25zdCByb3dfdG9fZWRpdCA9IHJlZih7fSlcblxuXG5jb25zdCBzbm1wX21ldHJpY191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL21ldHJpYy9ydWxlX21ldHJpY3MubHVhYFxuY29uc3Qgc25tcF9kZXZpY2VzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X3NubXBfZGV2aWNlc19saXN0Lmx1YWBcblxuY29uc3QgZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9ydWxlcy5sdWFgXG5jb25zdCBhZGRfcnVsZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9zbm1wL2RldmljZS9ydWxlLmx1YWBcbmNvbnN0IHJlbW92ZV9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL3NubXAvZGV2aWNlL3J1bGUubHVhYFxuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18zJyksXG5dXG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBpZmlkOiBwcm9wcy5pZmlkLFxuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxubGV0IGhvc3RfcnVsZXNfdGFibGVfY29uZmlnID0ge31cbmxldCB0aXRsZV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX3RpdGxlJylcbmxldCB0aXRsZV9lZGl0ID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5lZGl0X2xvY2FsX25ldHdvcmtfcnVsZXMnKVxubGV0IGJvZHlfZGVsZXRlID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5kZWxldGVfaG9zdF9ydWxlc19kZXNjcmlwdGlvbicpXG5sZXQgc25tcF9tZXRyaWNfbGlzdCA9IFtdXG5sZXQgc25tcF9pbnRlcmZhY2VzX2xpc3QgPSBbXVxubGV0IHNubXBfZGV2aWNlc19saXN0ID0gW11cbmxldCBpbnRlcmZhY2VfbWV0cmljX2xpc3QgPSBbXVxuXG5cbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gW1xuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy41X21pbicpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgaWQ6ICc1bWluJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLmhvdXJseScpLCBpZDogJ2hvdXInIH0sXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLmRhaWx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBpZDogJ2RheScgfVxuXVxuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbihyb3cpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBsb2FkX3NlbGVjdGVkX2ZpZWxkID0gZnVuY3Rpb24ocm93KSB7XG4gIHJvd190b19lZGl0LnZhbHVlID0gcm93O1xuICBcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcblxuICBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZS52YWx1ZS5zaG93KHJvdyk7XG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gZWRpdChwYXJhbXMpIHtcbiAgYXdhaXQgZGVsZXRlX3JvdygpO1xuXG4gIGF3YWl0IGFkZF9ob3N0X3J1bGUocGFyYW1zKTtcbn1cblxuY29uc3QgaW5pdF9lZGl0ID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19lZGl0LnZhbHVlO1xuICByb3dfdG9fZWRpdC52YWx1ZSA9IG51bGw7XG4gIHJldHVybiByb3c7XG59XG5cbmNvbnN0IGRlc3Ryb3lfdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0YWJsZV9ob3N0X3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xufVxuXG5jb25zdCBkZWxldGVfcm93ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19kZWxldGUudmFsdWU7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZW1vdmVfcnVsZV91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgICAuLi57XG4gICAgICBydWxlX2lkOiByb3cuaWQsXG4gICAgICBydWxlX3R5cGU6IHJvdy5ydWxlX3R5cGVcbiAgICB9XG4gIH0pXG4gIFxuICBhd2FpdCAkLnBvc3QodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgcmVsb2FkX3RhYmxlKCk7XG4gIH0pO1xufVxuXG5jb25zdCBhZGRfaG9zdF9ydWxlID0gYXN5bmMgZnVuY3Rpb24ocGFyYW1zKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfcnVsZV91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgICAuLi5wYXJhbXNcbiAgfSlcbiAgXG4gIGF3YWl0ICQucG9zdCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59XG5cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdCAgaGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHQgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNob3dfZGVsZXRlX2RpYWxvZyhyb3dEYXRhKTtcblx0ICB9LFxuXHR9O1xuXG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIGxvYWRfc2VsZWN0ZWRfZmllbGQocm93RGF0YSk7XG4gICAgfSxcbiAgfVxuICBcbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcblx0ICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcblx0XSk7XG59XG5cbmNvbnN0IGZvcm1hdF9tZXRyaWMgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBtZXRyaWNfbGFiZWwgPSBkYXRhICBcbiAgaWYgKHJvd0RhdGEubWV0cmljX2xhYmVsICYmIHJvd0RhdGEubWV0cmljX2xhYmVsICE9IGRhdGEgJiYgcm93RGF0YS5tZXRyaWNfbGFiZWwgIT0gXCJcIikge1xuICAgIG1ldHJpY19sYWJlbCA9IHJvd0RhdGEubWV0cmljX2xhYmVsO1xuICB9IFxuICBcbiAgXG4gIHJldHVybiBtZXRyaWNfbGFiZWxcbn1cblxuY29uc3QgZm9ybWF0X2ZyZXF1ZW5jeSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgbGV0IGZyZXF1ZW5jeV90aXRsZSA9ICcnXG4gIGZyZXF1ZW5jeV9saXN0LmZvckVhY2goKGZyZXF1ZW5jeSkgPT4ge1xuICAgIGlmKGRhdGEgPT0gZnJlcXVlbmN5LmlkKVxuICAgICAgZnJlcXVlbmN5X3RpdGxlID0gZnJlcXVlbmN5LnRpdGxlO1xuICB9KVxuXG4gIHJldHVybiBmcmVxdWVuY3lfdGl0bGVcbn1cblxuY29uc3QgZm9ybWF0X3RocmVzaG9sZCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gcGFyc2VJbnQoZGF0YSk7XG4gIGxldCB0aHJlc2hvbGRfc2lnbiA9IFwiPiBcIjtcblxuICBpZigocm93RGF0YS50aHJlc2hvbGRfc2lnbikgJiYgKHJvd0RhdGEudGhyZXNob2xkX3NpZ24gPT0gJy0xJykpXG4gICAgdGhyZXNob2xkX3NpZ24gPSBcIjwgXCJcblxuICBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuYml0c1RvU2l6ZV9ub19jb21tYShkYXRhICogOClcbiAgfSBlbHNlIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICB9IGVsc2UgaWYoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICdwZXJjZW50YWdlJykpe1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5cblxuY29uc3QgZm9ybWF0X3RhcmdldCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgcmV0dXJuIHJvd0RhdGEuZGV2aWNlX2xhYmVsO1xufVxuXG5jb25zdCBmb3JtYXRfaW50ZXJmYWNlID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICByZXR1cm4gcm93RGF0YS5kZXZpY2VfcG9ydF9sYWJlbDtcbn1cblxuY29uc3QgZ2V0X3NubXBfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNubXBfbWV0cmljX3VybCwgcmVzdF9wYXJhbXMpXG4gIFxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBzbm1wX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59XG5cblxuY29uc3QgZ2V0X3NubXBfZGV2aWNlc19saXN0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIHJlc3RfcGFyYW1zLnZlcmJvc2UgPSB0cnVlXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzbm1wX2RldmljZXNfdXJsLCByZXN0X3BhcmFtcylcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgc25tcF9kZXZpY2VzX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbiAgc25tcF9kZXZpY2VzX2xpc3QuZGF0YS5wdXNoKHtjb2x1bW5fa2V5OiBcIipcIixjb2x1bW5fbmFtZTogXCJhbGxcIiB9KVxufVxuXG5jb25zdCBzdGFydF9kYXRhdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgbW9kYWxfYWRkX3NubXBfZGV2aWNlX3J1bGUudmFsdWUuc2hvdygpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBjb25zdCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJhY3Rpb25zXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gYWRkX2FjdGlvbl9jb2x1bW4ocm93RGF0YSkgfSB9LFxuXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlkXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czoxLCBuYW1lOiAnaWQnLCBkYXRhOiAnaWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcuc25tcF9kZXZpY2VcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMjAnLCBuYW1lOiAnZGV2aWNlJywgZGF0YTogJ2RldmljZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHtyZXR1cm4gZm9ybWF0X3RhcmdldChkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5zbm1wX2ludGVyZmFjZVwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcyMCcsIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkge3JldHVybiBmb3JtYXRfaW50ZXJmYWNlKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLm1ldHJpY1wiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdtZXRyaWMnLCBkYXRhOiAnbWV0cmljJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X21ldHJpYyhkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMTAnLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIGZvcm1hdF9mcmVxdWVuY3koZGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpLCB0YXJnZXRzOiA2LCB3aWR0aDogJzEwJywgbmFtZTogJ3RocmVzaG9sZCcsIGRhdGE6ICd0aHJlc2hvbGQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfdGhyZXNob2xkKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwibWV0cmljX3R5cGVcIiksIHZpc2libGU6IGZhbHNlLCB0YXJnZXRzOiA3LCBuYW1lOiAnbWV0cmljX3R5cGUnLCBkYXRhOiAnbWV0cmljX3R5cGUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICBdO1xuXG4gIGNvbnN0IGhvc3RSdWxlc1RhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGRhdGFfdXJsLCByZXN0X3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBjb2x1bW5zX2NvbmZpZzogY29sdW1ucyxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAxIC8qIHRhcmdldCAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogY29sdW1uc1xuICAgIH1cbiAgfTtcbiAgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSBob3N0UnVsZXNUYWJsZUNvbmZpZztcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xuICBhd2FpdCBnZXRfc25tcF9tZXRyaWNfbGlzdCgpO1xuICBhd2FpdCBnZXRfc25tcF9kZXZpY2VzX2xpc3QoKTtcbiAgbW9kYWxfYWRkX3NubXBfZGV2aWNlX3J1bGUudmFsdWUubWV0cmljc0xvYWRlZChzbm1wX2RldmljZXNfbGlzdCwgc25tcF9tZXRyaWNfbGlzdCwgcHJvcHMucGFnZV9jc3JmKTtcbn0pXG5cbm9uVW5tb3VudGVkKCgpID0+IHtcbiAgZGVzdHJveV90YWJsZSgpO1xufSlcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPHRlbXBsYXRlPlxuQ2lhbyBNb25kb1xuPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPjwvTm90ZUxpc3Q+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RhYmxlLXV0aWxzXCI7XG4vL2ltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IG5vdGVzID0gW19pMThuKFwic25tcC5zbm1wX3NpbWlsYXJpdHlfbm90ZVwiKSwgX2kxOG4oXCJzbm1wLnNubXBfc2ltaWxhcml0eV90aW1lX25vdGVcIildO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuY29uc3QgdGFibGVfaWQgPSBcInNubXBfc2ltaWxhcml0eV9kYXRhXCI7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgVGFibGVVdGlscy5idWlsZF90YWJsZShodHRwX3ByZWZpeCwgdGFibGVfaWQpO1xufSk7XG5cblxuY29uc29sZS5sb2cocHJvcHMuY29udGV4dCk7XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1iLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1sLTIgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbm8td3JhcFwiIHN0eWxlPVwidGV4dC1hbGlnbjpsZWZ0O21hcmdpbi1yaWdodDoxcmVtO21pbi13aWR0aDoyNXJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ3Byb3RvY29sJykgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9jcml0ZXJpYVwiIDpvcHRpb25zPVwiY3JpdGVyaWFfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9jcml0ZXJpYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLXJpZ2h0OjFyZW07bWluLXdpZHRoOjI1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignYXBwbGljYXRpb24nKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2FwcGxpY2F0aW9uXCIgOm9wdGlvbnM9XCJhcHBsaWNhdGlvbl9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX3BvcnRfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLXJpZ2h0OjFyZW07bWluLXdpZHRoOjI1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignZGJfc2VhcmNoLnRhZ3Muc3J2X3BvcnQnKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3BvcnRcIiA6b3B0aW9ucz1cInBvcnRfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9wb3J0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9zZXJ2ZXJfcG9ydHNfYW5hbHlzaXNcIiA6Y3NyZj1cImNzcmZcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIiA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gdi1mb3I9XCIodCwgdF9pbmRleCkgaW4gZmlsdGVyX3RhYmxlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGVcIiA6dGl0bGU9XCJ0LnRpdGxlXCI+e3sgdC5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX3RhYmxlX2ZpbHRlcihvcHQsICRldmVudClcIiBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZSB0YWctZmlsdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJvcHQuY291bnQgPT0gbnVsbFwiPnt7IG9wdC5sYWJlbCB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgb3B0LmxhYmVsICsgXCIgKFwiICsgb3B0LmNvdW50ICsgXCIpXCIgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gRHJvcGRvd24gZmlsdGVycyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5jb25zdCBmaWx0ZXJfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpc19udG9wX2VudGVycHJpc2VfbTogQm9vbGVhbixcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdmxhbnM6IEFycmF5LFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICBhZ2dyZWdhdGlvbl9jcml0ZXJpYTogU3RyaW5nLFxuICAgIHBhZ2U6IE51bWJlcixcbiAgICBzb3J0OiBTdHJpbmcsXG4gICAgb3JkZXI6IFN0cmluZyxcbiAgICBzdGFydDogTnVtYmVyLFxuICAgIGxlbmd0aDogTnVtYmVyLFxuICAgIGhvc3Q6IFN0cmluZyxcbn0pO1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gICAgY3NyZjogcHJvcHMuY3NyZixcbiAgICBpZmlkOiBwcm9wcy5pZmlkXG59KVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuLyogTDQgUHJvdG9jb2wgTGlzdCAqL1xuY29uc3QgY3JpdGVyaWFfbGlzdF9kZWYgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJ1ZHBcIiksIHZhbHVlOiAxNywgcGFyYW06IFwidWRwXCIsIHRhYmxlX2lkOiBcInVkcF9wb3J0c19hbmFseXNpc1wiLCBlbnRlcnByaXNlX206IGZhbHNlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJ0Y3BcIiksIHZhbHVlOiA2LCBwYXJhbTogXCJjbGllbnRcIiwgdGFibGVfaWQ6IFwidGNwX3BvcnRzX2FuYWx5c2lzXCIsIGVudGVycHJpc2VfbTogZmFsc2UgfSxcbl07XG5cblxuLyogQ29uc3RzICovXG5jb25zdCBzZWxlY3RlZF9jcml0ZXJpYSA9IHJlZihjcml0ZXJpYV9saXN0X2RlZlswXSk7XG5jb25zdCB0YWJsZV9pZCA9IHJlZignc2VydmVyX3BvcnRzX2FuYWx5c2lzJyk7XG5jb25zdCBzZWxlY3RlZF9wb3J0ID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX2FwcGxpY2F0aW9uID0gcmVmKHt9KTtcbmNvbnN0IHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcyA9IHJlZigpO1xuXG5sZXQgcG9ydF9saXN0ID0gcmVmKFtdKTtcbmxldCBhcHBsaWNhdGlvbl9saXN0ID0gcmVmKFtdKTtcblxuY29uc3QgY3JpdGVyaWFfbGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvcHMuaXNfbnRvcF9lbnRlcnByaXNlX20pIHtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJpYV9saXN0X2RlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgY3JpdGVyYV9saXN0X2RlZl9jb20gPSBbXTtcbiAgICAgICAgY3JpdGVyaWFfbGlzdF9kZWYuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjLmVudGVycHJpc2VfbSlcbiAgICAgICAgICAgICAgICBjcml0ZXJhX2xpc3RfZGVmX2NvbS5wdXNoKGMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJhX2xpc3RfZGVmX2NvbSk7XG4gICAgfVxufSgpO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldygpO1xuICAgIGxldCBwb3J0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3BvcnQnKTtcbiAgICBsZXQgbDRfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgncHJvdG9jb2wnKTtcbiAgICBjb25zdCBhcHAgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYXBwbGljYXRpb24nKTtcblxuICAgIGlmIChwb3J0ICE9IG51bGwgJiYgcG9ydC5sb2NhbGVDb21wYXJlKFwiXCIpICE9IDAgJiZcbiAgICAgICAgbDRfcHJvdG8gIT0gbnVsbCAmJiBsNF9wcm90by5sb2NhbGVDb21wYXJlKFwiXCIpICE9IDAgJiZcbiAgICAgICAgYXBwICE9IG51bGwgJiYgYXBwLmxvY2FsZUNvbXBhcmUoXCJcIikgIT0gMCkge1xuXG4gICAgICAgIHBvcnQgPSBOdW1iZXIocG9ydCk7XG4gICAgICAgIGw0X3Byb3RvID0gTnVtYmVyKGw0X3Byb3RvKTtcbiAgICAgICAgY3JpdGVyaWFfbGlzdF9kZWYuZm9yRWFjaCgocHJvdG8pID0+IHtcbiAgICAgICAgICAgIGlmIChwcm90by52YWx1ZSA9PSBsNF9wcm90bykge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlID0gcHJvdG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgYXdhaXQgdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGZhbHNlLCBhcHAsIHBvcnQpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUgPSBjcml0ZXJpYV9saXN0X2RlZlswXTtcbiAgICAgICAgYXdhaXQgdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGZhbHNlKTtcbiAgICAgICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcblxuICAgIH1cblxufSk7XG5cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiBGdW5jdGlvbiB0byB1cGRhdGUgTDQgUHJvdG9jb2wgKi9cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9jcml0ZXJpYSgpIHtcbiAgICBhd2FpdCB1cGRhdGVfZHJvcGRvd25fbWVudXMoZmFsc2UpO1xuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG5cbn07XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBBcHBsaWNhdGlvbiAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX3BvcnRfbGlzdCgpIHtcbiAgICBhd2FpdCB1cGRhdGVfZHJvcGRvd25fbWVudXModHJ1ZSlcbiAgICB0YWJsZV9zZXJ2ZXJfcG9ydHNfYW5hbHlzaXMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xufVxuXG4vKiBGdW5jdGlvbiB0byB1cGRhdGUgcG9ydCAqL1xuZnVuY3Rpb24gdXBkYXRlX3BvcnQoKSB7XG4gICAgc2V0X3BvcnRfaW5fdXJsKCk7XG4gICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuZnVuY3Rpb24gc2V0X3BvcnRfaW5fdXJsKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInBvcnRcIiwgc2VsZWN0ZWRfcG9ydC52YWx1ZS5pZCk7XG59XG5cblxuLyogRnVuY3Rpb24gdG8gbG9hZCBmaWx0ZXJzIChKdXN0IFZMQU5zKSAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGFjdGlvbiwgZmlsdGVyKSB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IGdldF9leHRyYV9wYXJhbXNfb2JqKCk7XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMoZXh0cmFfcGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9ob3N0L2hvc3RzX2RldGFpbHNfYnlfcG9ydF9maWx0ZXJzLmx1YT9hY3Rpb249JHthY3Rpb259JiR7dXJsX3BhcmFtc31gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQuYWN0aW9uIHx8IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIGRhdGFfbG9hZGVkOiBhY3Rpb24gIT0gJ292ZXJ2aWV3JyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHQudmFsdWUsXG4gICAgICAgICAgICBoaWRkZW46ICh0LnZhbHVlLmxlbmd0aCA9PSAxKVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24gPSAoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKF8pID0+IHtcbiAgICAgICAgbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KTtcbiAgICB9O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KSB7XG4gICAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBpZiAoZmlsdGVyLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBuZXdfZmlsdGVyX2FycmF5ID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGZpbHRlci5pZCwgZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyLm9wdGlvbnMgPSBuZXdfZmlsdGVyX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gZmlsdGVyLmlkKS5vcHRpb25zO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICBsZXQgZHJvcGRvd24gPSBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkudmFsdWVbZmlsdGVyX2luZGV4XTtcbiAgICAgICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gICAgfVxuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSBmYWxzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KGFjdGlvbikge1xuICAgIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShcIm92ZXJ2aWV3XCIpO1xuICAgIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKTtcbn1cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFjdGlvbnMgZW50cmllcyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgICAgICBcImNsaWNrX2J1dHRvbl9mbG93c1wiOiBjbGlja19idXR0b25fZmxvd3MsXG4gICAgfTtcbiAgICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZmxvd3MoZXZlbnQpIHtcbiAgICBsaXZlX2Zsb3dzKGV2ZW50LnJvdy5pcCk7XG59XG5cbmNvbnN0IGxpdmVfZmxvd3MgPSBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgbDRwcm90bzogc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUsXG4gICAgICAgIHNlcnZlcjogZGF0YSxcbiAgICAgICAgcG9ydDogc2VsZWN0ZWRfcG9ydC52YWx1ZS5pZFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGAke3VybH1gKTtcbn07XG5cbmZ1bmN0aW9uIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKSB7XG4gICAgZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVlLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZWwuYmFzaWNfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZWwuYmFzaWNfbGFiZWwgPSBlbC5sYWJlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVybF9lbnRyeSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGVsLmlkKVxuICAgICAgICBpZiAodXJsX2VudHJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi52YWx1ZS50b1N0cmluZygpID09PSB1cmxfZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwubGFiZWwgPSBgJHtlbC5iYXNpY19sYWJlbH06ICR7b3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZX1gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGFkZF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChvcHQua2V5LCBgJHtvcHQudmFsdWV9YCk7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBkcm9wZG93biBtZW51cyAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGlzX2FwcGxpY2F0aW9uX3NlbGVjdGVkLCBhcHAsIHBvcnQpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJwcm90b2NvbFwiLCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaG9zdC9zZXJ2ZXJfcG9ydHMubHVhP3Byb3RvY29sPWAgKyBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZTtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgbGV0IHBvcnRzID0gW107XG4gICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZSA9IFtdO1xuICAgIHBvcnRfbGlzdC52YWx1ZSA9IFtdO1xuXG4gICAgcmVzLnJzcC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gaXRlbS5sN19wcm90b19uYW1lLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgcG9ydHMucHVzaCh7IGxhYmVsOiBpdGVtLnNydl9wb3J0ICsgXCIvXCIgKyBuYW1lICsgXCIgKFwiICsgaXRlbS5uX2hvc3RzICsgXCIpXCIsIGlkOiBpdGVtLnNydl9wb3J0LCBhcHBsaWNhdGlvbjogbmFtZSwgbnVtX2hvc3RzOiBpdGVtLm5faG9zdHMsIHZsYW5faWQ6aXRlbS52bGFuX2lkIH0pXG4gICAgfSlcblxuICAgIHBvcnRzLmZvckVhY2goKHBvcnQpID0+IHtcbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uX2xpc3QudmFsdWUuZmluZChpdGVtID0+IGl0ZW0uaWQubG9jYWxlQ29tcGFyZShwb3J0LmFwcGxpY2F0aW9uKSA9PSAwKSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uX2xpc3QudmFsdWUucHVzaCh7IGxhYmVsOiBwb3J0LmFwcGxpY2F0aW9uLCBpZDogcG9ydC5hcHBsaWNhdGlvbiwgdmFsdWU6IHBvcnQuYXBwbGljYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGxldCB4ID0gYS5sYWJlbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsZXQgeSA9IGIubGFiZWwudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoeCA8IHkpIHsgcmV0dXJuIC0xOyB9XG4gICAgICAgIGlmICh4ID4geSkgeyByZXR1cm4gMTsgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KVxuXG4gICAgaWYgKCFpc19hcHBsaWNhdGlvbl9zZWxlY3RlZCAmJiBhcHAgPT0gbnVsbClcbiAgICAgICAgc2VsZWN0ZWRfYXBwbGljYXRpb24udmFsdWUgPSBhcHBsaWNhdGlvbl9saXN0LnZhbHVlWzBdO1xuXG4gICAgaWYgKCFpc19hcHBsaWNhdGlvbl9zZWxlY3RlZCAmJiBhcHAgIT0gbnVsbCkge1xuICAgICAgICBhcHBsaWNhdGlvbl9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLmxhYmVsID09IGFwcCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX2FwcGxpY2F0aW9uLnZhbHVlID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJhcHBsaWNhdGlvblwiLCBzZWxlY3RlZF9hcHBsaWNhdGlvbi52YWx1ZS5pZCk7XG4gICAgcG9ydHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5hcHBsaWNhdGlvbiA9PSBzZWxlY3RlZF9hcHBsaWNhdGlvbi52YWx1ZS5sYWJlbClcbiAgICAgICAgICAgIHBvcnRfbGlzdC52YWx1ZS5wdXNoKHsgbGFiZWw6IGl0ZW0uaWQgKyBcIiAoXCIgKyBpdGVtLm51bV9ob3N0cyArIFwiKVwiLCBpZDogaXRlbS5pZCwgdmFsdWU6IGl0ZW0uaWQsIHZsYW5faWQ6IGl0ZW0udmxhbl9pZCwgbl9ob3N0czogaXRlbS5udW1faG9zdHMgfSk7XG4gICAgfSlcblxuICAgIGlmIChwb3J0ICE9IG51bGwpIHtcbiAgICAgICAgcG9ydF9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLmlkID09IHBvcnQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF9wb3J0LnZhbHVlID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZF9wb3J0LnZhbHVlID0gcG9ydF9saXN0LnZhbHVlWzBdO1xuICAgIH1cblxuICAgIHNldF9wb3J0X2luX3VybCgpO1xufVxuXG5mdW5jdGlvbiBnZXRfY291bnRfdmxhbl9ob3N0cyh2bGFuX2lkKSB7XG4gICAgbGV0IGNvdW50X3ZsYW5faG9zdCA9IDA7XG4gICAgcG9ydF9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udmxhbl9pZCA9PSB2bGFuX2lkKSB7XG4gICAgICAgICAgICBjb3VudF92bGFuX2hvc3QgPSBjb3VudF92bGFuX2hvc3QgKyBpdGVtLm5faG9zdHNcbiAgICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGNvdW50X3ZsYW5faG9zdDtcbn1cblxuLyogRnVuY3Rpb24gdG8gZm9ybWF0IGRhdGEgKi9cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IGFzeW5jIChjb2x1bW5zKSA9PiB7XG4gICAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgICAgICBcImlwXCI6IChpcCwgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfaXAoaXAsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiAobmFtZSwgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9ob3N0X25hbWUobmFtZSwgcm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtYWNcIjogKG1hYywgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAobWFjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X21hYyhtYWMsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG90X3RyYWZmaWNcIjogKHRvdF90cmFmZmljLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmICh0b3RfdHJhZmZpYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZSh0b3RfdHJhZmZpYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG4gICAgfSk7XG4gICAgLy8gY29uc29sZS5sb2coY29sdW1ucyk7XG4gICAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG4vKiBGdW5jdGlvbiB0byBmb3JtYXQgSVAgbGFiZWwgKi9cbmNvbnN0IGZvcm1hdF9pcCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICBpZiAocm93RGF0YS52bGFuX2lkICE9IDApXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3NlcnZlcj0ke2RhdGF9JnZsYW49JHtyb3dEYXRhLnZsYW5faWR9JnBvcnQ9JHtzZWxlY3RlZF9wb3J0LnZhbHVlLmlkfVwiPiR7ZGF0YX1AJHtyb3dEYXRhLnZsYW5faWR9PC9hPmA7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/c2VydmVyPSR7ZGF0YX0mcG9ydD0ke3NlbGVjdGVkX3BvcnQudmFsdWUuaWR9XCI+JHtkYXRhfTwvYT5gO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcblxufVxuXG4vKiBGdW5jdGlvbiB0byBmb3JtYXQgTUFDIEFkZHJlc3MgbGFiZWwgKi9cbmNvbnN0IGZvcm1hdF9tYWMgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGlmIChkYXRhICE9IG51bGwpXG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9tYWNfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGF9XCI+JHtkYXRhfTwvYT5gO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG4vKiBGdW5jdGlvbiB0byBmb3JtYXQgSG9zdCBOYW1lIGxhYmVsICovXG5jb25zdCBmb3JtYXRfaG9zdF9uYW1lID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChyb3dEYXRhLnZsYW5faWQgIT0gMClcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtyb3dEYXRhLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkfVwiPiR7ZGF0YX08L2E+YFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7cm93RGF0YS5pcH1cIj4ke2RhdGF9PC9hPmBcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cbiAgICAgIDwhLS0gUmVwZWF0ZXIgVHlwZSAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+XG5cdFx0XHRcdFx0XHQ8Yj57e19pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcubW9kYWxfcmVwZWF0ZXJfY29uZmlnLnJlcGVhdGVyX3R5cGVcIil9fTwvYj5cblx0XHRcdFx0XHQ8L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3JlcGVhdGVyX3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9yZXBlYXRlcl90eXBlKClcIlxuXHRcdFx0ICA6b3B0aW9ucz1cInJlcGVhdGVyX3R5cGVfYXJyYXlcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8IS0tIElQIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cblxuXHRcdDxkaXYgdi1pZj1cInNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUgPT0gJ2N1c3RvbSdcIiA+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMTBcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pcFwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgICAgPGlucHV0IHYtbW9kZWw9XCJpcFwiICBAaW5wdXQ9XCJjaGVja19lbXB0eV9ob3N0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDpwbGFjZWhvbGRlcj1cImhvc3RfcGxhY2Vob2xkZXJcIiByZXF1aXJlZD5cbiAgICA8L2Rpdj5cbiAgICBcblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuXHRcdFx0XHRcdFx0XG5cdFx0XHQ8IS0tIFBvcnQgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHRcblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuXG5cdFx0PGRpdiB2LWlmPVwic2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9PSAnY3VzdG9tJ1wiID5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0xMFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLnBvcnRcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICAgIDxpbnB1dCB2LW1vZGVsPVwicG9ydFwiICBAaW5wdXQ9XCJjaGVja19lbXB0eV9wb3J0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDpwbGFjZWhvbGRlcj1cInBvcnRfcGxhY2Vob2xkZXJcIiByZXF1aXJlZD5cbiAgICBcbiAgICA8L2Rpdj5cblx0XHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cblx0XHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMTBcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pbnRlcmZhY2VzXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHRcdFx0XHQ8U2VsZWN0U2VhcmNoIHJlZj1cImludGVyZmFjZXNfc2VhcmNoXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Om9wdGlvbnM9XCJpbnRlcmZhY2VfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6bXVsdGlwbGU9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfaW50ZXJmYWNlc19zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEB1bnNlbGVjdF9vcHRpb249XCJyZW1vdmVfaW50ZXJmYWNlc19zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2Vfc2VsZWN0ZWRfb3B0aW9ucz1cImFsbF9jcml0ZXJpYVwiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG5cdFxuXG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cblxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJpbnZhbGlkX2lmYWNlX251bWJlciB8fCBkaXNhYmxlX2FkZCAmJiByZXBlYXRlcl90eXBlID09ICdjdXN0b20nXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7YnV0dG9uX3RleHR9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGhvc3RfcGxhY2Vob2xkZXIgPSBpMThuKCdpZl9zdGF0c19jb25maWcubXVsdGljYXN0X2lwX3BsYWNlaG9sZGVyJylcbmNvbnN0IHBvcnRfcGxhY2Vob2xkZXIgPSBpMThuKCdpZl9zdGF0c19jb25maWcucG9ydF9wbGFjZWhvbGRlcicpXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGlwID0gcmVmKG51bGwpO1xuY29uc3QgcG9ydCA9IHJlZihudWxsKTtcbmNvbnN0IHJlcGVhdGVyX3R5cGUgPSByZWYoe3ZhbHVlOiBcIm1kbnNcIiwgbGFiZWw6IFwiTUROU1wiIH0pO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZWRpdCcsICdhZGQnXSlcbmNvbnN0IGludGVyZmFjZXNfc2VhcmNoID0gcmVmKG51bGwpO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7fSk7XG5cbmNvbnN0IGNoZWNrX2VtcHR5X2hvc3QgPSAoKSA9PiB7XG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4oJ2lwJykpO1xuICBkaXNhYmxlX2FkZC52YWx1ZSA9ICEocmVnZXgudGVzdChpcC52YWx1ZSkgfHwgaXAudmFsdWUgPT09ICcqJyk7XG59XG5cblxuXG5jb25zdCBjaGVja19lbXB0eV9wb3J0ID0gKCkgPT4ge1xuXHRkaXNhYmxlX2FkZC52YWx1ZSA9IChwb3J0IDwgMSB8fCBwb3J0ID4gNjU1MzUpO1xufVxuXG5cblxuY29uc3QgdGl0bGUgPSByZWYoXCJcIik7XG5cbmNvbnN0IHJlcGVhdGVyX3R5cGVfYXJyYXkgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5tb2RhbF9yZXBlYXRlcl9jb25maWcubWRuc1wiKSwgdmFsdWU6IFwibWRuc1wiLCBkZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5tb2RhbF9yZXBlYXRlcl9jb25maWcuY3VzdG9tXCIpLCB2YWx1ZTogXCJjdXN0b21cIiB9LFxuXTtcblxuY29uc3QgcmVwZWF0ZXJfaWQgPSByZWYoMCk7XG5jb25zdCBkaXNhYmxlX2FkZCA9IHJlZih0cnVlKVxuY29uc3QgaW52YWxpZF9pZmFjZV9udW1iZXIgPSByZWYodHJ1ZSlcblxuY29uc3Qgc2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZSA9IHJlZih7fSk7XG5cblxuY29uc3QgaW50ZXJmYWNlX2xpc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZWRnZS9pbnRlcmZhY2VzLmx1YWA7XG5sZXQgaW50ZXJmYWNlX2xpc3Q7XG5jb25zdCBpbnRlcmZhY2VfYXJyYXkgPSByZWYoW10pO1xuXG5jb25zdCBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZSA9IHJlZihbXSk7XG5cbmNvbnN0IGJ1dHRvbl90ZXh0ID0gcmVmKFwiXCIpO1xuXG5jb25zdCBhbGxfY3JpdGVyaWEgPSAoaXRlbSkgPT4ge1xuXHRzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZSA9IGl0ZW07XG5cdGludmFsaWRfaWZhY2VfbnVtYmVyLnZhbHVlID0gaXRlbS5sZW5ndGggPCAyO1xufVxuXG5jb25zdCB1cGRhdGVfaW50ZXJmYWNlc19zZWxlY3RlZCA9IChpdGVtKSA9PiB7XG5cbn1cblxuY29uc3QgcmVtb3ZlX2ludGVyZmFjZXNfc2VsZWN0ZWQgPSAoaXRlbSkgPT4ge1xuXG59XG5cbmNvbnN0IHNob3cgPSAocm93ICkgPT4ge1xuICAgIGluaXQocm93KTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBpc19vcGVuX2luX2FkZCA9IHJlZih0cnVlKTtcblxuZnVuY3Rpb24gaW5pdChyb3cpIHtcbiAgICBpc19vcGVuX2luX2FkZC52YWx1ZSA9IHJvdyA9PSBudWxsO1xuXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCBvcGVuIGluIGVkaXRcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0XHRcdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9lZGl0XCIpO1xuXHRcdFx0YnV0dG9uX3RleHQudmFsdWUgPSBfaTE4bihcImVkaXRcIik7XG5cdFx0XHRyZXBlYXRlcl9pZC52YWx1ZSA9IHJvdy5yZXBlYXRlcl9pZDtcblx0XHRcdHJlcGVhdGVyX3R5cGVfYXJyYXkuZm9yRWFjaCgocykgPT4ge1xuXHRcdFx0XHRpZihzLmxhYmVsID09IHJvdy50eXBlKVxuXHRcdFx0XHRcdHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUgPSBzO1xuXHRcdFx0fSlcblxuXHRcdFx0aWYgKHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUudmFsdWUgPT0gJ2N1c3RvbScpIHtcblx0XHRcdFx0aXAudmFsdWUgPSByb3cuaXA7XG5cdFx0XHRcdHBvcnQudmFsdWUgPSByb3cucG9ydDtcblx0XHRcdH1cblxuXHRcdFx0Y2hhbmdlX3JlcGVhdGVyX3R5cGUocm93KVxuXG4gICAgfSBlbHNlIHtcblx0XHRcdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9hZGRcIik7XG5cdFx0XHRidXR0b25fdGV4dC52YWx1ZSA9IF9pMThuKFwiYWRkXCIpO1xuXHRcdFx0bGV0IGRlZmF1bHRfdHlwZSA9IHJlcGVhdGVyX3R5cGVfYXJyYXkuZmluZCgocykgPT4gcy5kZWZhdWx0ID09IHRydWUpO1xuICAgIH1cblx0XHRcblx0XHRpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0XHRcdGNvbnN0IHJvd19pbnRlcmZhY2VzID0gcm93LmludGVyZmFjZXMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0bGV0IHNlbGVjdGVkX2ludGVyZmFjZXMgPSBbXSBcblx0XHRcdGludGVyZmFjZV9hcnJheS52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHRcdGVsLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHJvd19pbnRlcmZhY2VzLmZpbmQoZWxlbWVudCA9PiBlbGVtZW50ID09IGVsLnZhbHVlKSkge1xuXHRcdFx0XHRcdGVsLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0c2VsZWN0ZWRfaW50ZXJmYWNlcy5wdXNoKGVsKTtcblx0XHRcdH0pXG5cdFx0XHRpbnRlcmZhY2VzX3NlYXJjaC52YWx1ZS51cGRhdGVfbXVsdGlwbGVfdmFsdWVzKHNlbGVjdGVkX2ludGVyZmFjZXMpO1xuXHRcdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3JlcGVhdGVyX3R5cGUodHlwZSkge1xuXHRcdHJlcGVhdGVyX3R5cGUudmFsdWUgPSBzZWxlY3RlZF9yZXBlYXRlcl90eXBlLnZhbHVlO1xuICAgIGlmIChyZXBlYXRlcl90eXBlLnZhbHVlLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcblx0XHRcdGF3YWl0IHNldF9pbnRlcmZhY2VfYXJyYXkoKTtcblx0XHR9XG59XG5cblxuXG5sZXQgaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9IGZhbHNlO1xuYXN5bmMgZnVuY3Rpb24gc2V0X2ludGVyZmFjZV9hcnJheSgpIHtcbiAgICBpZiAoaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRpZiAoaW50ZXJmYWNlX2xpc3QgPT0gbnVsbCkge1xuXHQgICAgaW50ZXJmYWNlX2xpc3QgPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoaW50ZXJmYWNlX2xpc3RfdXJsKTtcblx0fVxuXHRsZXQgcmVzX2ludGVyZmFjZV9saXN0ID0gYXdhaXQgaW50ZXJmYWNlX2xpc3Q7XG5cdGludGVyZmFjZV9hcnJheS52YWx1ZSA9IHJlc19pbnRlcmZhY2VfbGlzdC5maWx0ZXIoaSA9PiBpLnJvbGUgPT0gXCJsYW5cIikubWFwKChpKSA9PiB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdGxhYmVsOiBpLmxhYmVsLFxuXHRcdHZhbHVlOiBpLmlmbmFtZSxcblx0XHRcdH07XG5cdH0pO1xuICAgIGlzX3NldF9pbnRlcmZhY2VfYXJyYXkgPSB0cnVlO1xufVxuXG5cbmNvbnN0IGFwcGx5ID0gKCkgPT4ge1xuICAgIGxldCByZXBlYXRlcl90ID0gcmVwZWF0ZXJfdHlwZS52YWx1ZS5sYWJlbDtcblx0XHRcbiAgICBsZXQgb2JqID0ge1xuXHRcdFx0cmVwZWF0ZXJfdHlwZTogcmVwZWF0ZXJfdCxcbiAgICB9O1xuXHRcdGlmIChyZXBlYXRlcl90eXBlLnZhbHVlLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcblx0XHRcdGxldCBpcF90ID0gaXAudmFsdWU7XG5cdFx0XHRsZXQgcG9ydF90ID0gcG9ydC52YWx1ZTtcblx0XHRcdG9iaiA9IHtcblx0XHRcdFx0cmVwZWF0ZXJfdHlwZTogcmVwZWF0ZXJfdCxcblx0XHRcdFx0aXA6IGlwX3QsXG5cdFx0XHRcdHBvcnQ6IHBvcnRfdFxuICAgIFx0fTtcblx0XHR9XG4gICAgbGV0IGV2ZW50ID0gXCJhZGRcIjtcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0b2JqLnJlcGVhdGVyX2lkID0gcmVwZWF0ZXJfaWQudmFsdWU7XG5cdGV2ZW50ID0gXCJlZGl0XCI7XG4gICAgfVxuXG5cdFx0bGV0IGludGVyZmFjZXMgPSBcIlwiO1xuXHRcdGxldCBkZXRhaWxzID0gXCJcIjtcblx0XHRcblx0XHRzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZS5mb3JFYWNoKChpKSA9PiB7XG5cdFx0XHRpbnRlcmZhY2VzICs9aS52YWx1ZStcIixcIjtcblx0XHRcdFxuXHRcdFx0aWYoaS52YWx1ZSAhPSBpLmxhYmVsICYmICFpLmxhYmVsLmluY2x1ZGVzKGkudmFsdWUpKSBcblx0XHRcdFx0ZGV0YWlscyArPSBpLmxhYmVsK1wiIChcIitpLnZhbHVlK1wiKVwiK1wiLFwiO1xuXHRcdFx0ZWxzZSBcblx0XHRcdFx0ZGV0YWlscyArPSBpLmxhYmVsK1wiLFwiO1xuXHRcdH0pO1xuXHRcdG9iai5pbnRlcmZhY2VzID0gaW50ZXJmYWNlcztcblx0XHRvYmouaW50ZXJmYWNlX2RldGFpbHMgPSBkZXRhaWxzO1xuICAgIGVtaXQoZXZlbnQsIG9iaik7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuXHRhd2FpdCBzZXRfaW50ZXJmYWNlX2FycmF5KCk7XG5cbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4gIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwibWItMlwiPlxuICBcbiAgPGgyPnt7IF9pMThuKFwibmVkZ2UucmVwZWF0ZXJzX2NvbmZpZ190aXRsZVwiKSB9fTwvaDI+XG4gIDxiciAvPlxuICBcbjwvZGl2PlxuXG48ZGl2IGlkPVwiYWdncmVnYXRlZF9saXZlX2Zsb3dzXCI+XG4gIDxEYXRhdGFibGUgcmVmPVwidGFibGVfcnVsZXNcIlxuXHQgICAgIDp0YWJsZV9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2J1dHRvbnNcIlxuXHQgICAgIDpjb2x1bW5zX2NvbmZpZz1cInRhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG5cdCAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCJcblx0ICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfZmlsdGVyc1wiXG5cdCAgICAgOmVuYWJsZV9zZWFyY2g9XCJ0YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG5cdCAgICAgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cbiAgPC9EYXRhdGFibGU+XG48L2Rpdj5cbjxNb2RhbEFkZFJlcGVhdGVyQ29uZmlnIHJlZj1cIm1vZGFsX2FkZF9yZXBlYXRlcl9jb25maWdcIiBAYWRkPVwiYWRkX3JlcGVhdGVyXCIgQGVkaXQ9XCJlZGl0X3JlcGVhdGVyXCI+PC9Nb2RhbEFkZFJlcGVhdGVyQ29uZmlnPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZFJlcGVhdGVyQ29uZmlnIH0gZnJvbSBcIi4vbW9kYWwtbmVkZ2UtYWRkLXJlcGVhdGVyLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHRpbWVvdXRfZGVsZXRlID0gMSAqIDUwMDtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdXJsOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIGNzcmY6IFN0cmluZyxcbiAgICBjb2x1bW5zX2NvbmZpZzogQXJyYXlcbn0pO1xuXG5jb25zdCB0YWJsZV9jb25maWcgPSByZWYoe30pO1xuY29uc3QgdGFibGVfcnVsZXMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hZGRfcmVwZWF0ZXJfY29uZmlnID0gcmVmKG51bGwpO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBzZXRfZGF0YXRhYmxlX2NvbmZpZygpO1xufSk7XG5cbmZ1bmN0aW9uIGVkaXRfcmVwZWF0ZXIocmVwZWF0ZXIpIHsgICAgXG4gICAgY29uc3QgZWRpdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZWRpdC9uZWRnZS9mb3J3YXJkZXIubHVhYDtcbiAgICBzZXRfcnVsZShyZXBlYXRlciwgZWRpdF91cmwpO1xufVxuXG5mdW5jdGlvbiBhZGRfcmVwZWF0ZXIocmVwZWF0ZXIpIHtcbiAgICBjb25zdCBhZGRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2FkZC9uZWRnZS9mb3J3YXJkZXIubHVhYDtcbiAgICBzZXRfcnVsZShyZXBlYXRlciwgYWRkX3VybCk7XG59XG5cblxuZnVuY3Rpb24gc2V0X3J1bGUocnVsZSwgdXJsKSB7XG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAuLi5ydWxlLCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgXG4gICAgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6IFwicG9zdFwiLCBoZWFkZXJzLCBib2R5fSk7XG4gICAgcmVmcmVzaF90YWJsZSgpOyAgICBcbn1cblxuXG5cbmNvbnN0IGZvcm1hdF9pbnRlcmZhY2VzID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkgeyBcbiAgICBpZihkYXRhKSB7XG4gICAgICAgIGxldCBzdHJpbmdfd2l0aG91dF9lbmQgPSBkYXRhLnJlcGxhY2UoLy4kLywgJycpOyBcbiAgICAgICAgcmV0dXJuIHN0cmluZ193aXRob3V0X2VuZDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfZGF0YXRhYmxlX2NvbmZpZygpIHtcbiAgICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgICBcbiAgICBsZXQgcGFyYW1zID0geyBcblx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQsXHRcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcblx0ICAgIHJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgICAgIC8vIHRhYmxlX3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xuXHR9XG4gICAgfSwge1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKCkge1xuXHQgICAgbW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZy52YWx1ZS5zaG93KG51bGwpO1xuXHR9XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG5cdHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcblx0ZGF0YV91cmw6IGAke3Byb3BzLnVybH0/JHt1cmxfcGFyYW1zfWAsXG5cdGVuYWJsZV9zZWFyY2g6IGZhbHNlLFxuICAgIH07XG4gICAgXG4gICAgbGV0IGNvbHVtbnMgPSBbXG5cdCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy50eXBlXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAndHlwZScsIGRhdGE6ICd0eXBlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1sZWZ0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG5cdH0sXG4gICAgIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLmlwXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnaXAnLCBkYXRhOiAnaXAnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWxlZnQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcblx0fSxcbiAgICAgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcucG9ydFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtbGVmdCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuXHR9LFxuICAgICB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pbnRlcmZhY2VzXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnaW50ZXJmYWNlcycsIGRhdGE6ICdkZXRhaWxzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1sZWZ0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhLF8scm93RGF0YSkgIHtcblx0XHQgICAgXG5cdFx0ICAgIHJldHVybiBmb3JtYXRfaW50ZXJmYWNlcyhkYXRhLCByb3dEYXRhKX1cblx0ICAgIFxuXHR9LFxuICAgIF07XG4gICAgbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBjb2x1bW5zLm1hcCgoYykgPT4gYyk7XG4gICAgLy8gbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBwcm9wcy5jb2x1bW5zX2NvbmZpZy5tYXAoKGMpID0+IGMpO1xuICAgIHdyYXBfY29sdW1uc19jb25maWcucHVzaCh7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfSk7XG4gICAgXG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IHdyYXBfY29sdW1uc19jb25maWc7XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICAgIGxldCBkZWxldGVfaGFuZGxlciA9IHtcblx0aGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHRvbkNsaWNrOiAoKSA9PiB7XG5cdCAgICBkZWxldGVfcnVsZShyb3dEYXRhKTtcblx0fSxcbiAgICB9O1xuICAgIFxuICAgIGxldCBlZGl0X2hhbmRsZXIgPSB7XG5cdGhhbmRsZXJJZDogXCJlZGl0X3J1bGVcIixcblx0b25DbGljazogKCkgPT4ge1xuXHQgICAgbW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZy52YWx1ZS5zaG93KHJvd0RhdGEpO1xuXHR9LFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSB9LFxuXHR7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZGVsZXRlX3J1bGVcIiwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpIH0sXG4gICAgXSk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfcnVsZShyZXBlYXRlcikge1xuICAgIGNvbnN0IGFkZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL25lZGdlL2ZvcndhcmRlci5sdWFgO1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgcmVwZWF0ZXJfaWQ6IHJlcGVhdGVyLnJlcGVhdGVyX2lkLCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgXG4gICAgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGFkZF91cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG5cdG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG4gXHQvLyB0YWJsZV9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbiAgICB9LCB0aW1lb3V0X2RlbGV0ZSk7XG59XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRlbGV0ZV9pbmFjdGl2ZV9ob3N0X3RpdGxlXCIpIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICB7eyBtZXNzYWdlIH19XG4gICAgICA8ZGl2IHYtaWY9XCJzaG93X3JldHVybl9tc2dcIiBjbGFzcz1cInRleHQtbGVmdFwiPlxuICAgICAgICA8cCBjbGFzcz1cInRleHQtc20tc3RhcnQgZnMtNiBmdy1tZWRpdW0gcHQtMyBtLTBcIiA6Y2xhc3M9XCIoZXJyKSA/ICd0ZXh0LWRhbmdlcicgOiAndGV4dC1zdWNjZXNzJ1wiPjxzbWFsbD57eyByZXR1cm5fbWVzc2FnZSB9fTwvc21hbGw+PC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfaG9zdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3sgX2kxOG4oXCJkZWxldGVcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBtZXNzYWdlID0gcmVmKCcnKVxuY29uc3QgcmV0dXJuX21lc3NhZ2UgPSByZWYoJycpXG5jb25zdCBzaG93X3JldHVybl9tc2cgPSByZWYoZmFsc2UpXG5jb25zdCBlcnIgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZGVsZXRlX2hvc3RcIl0pO1xuY29uc3Qgcm93X2lkID0gcmVmKHt9KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge30pO1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfaG9zdCgpIHtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9ob3N0L2luYWN0aXZlX2hvc3QubHVhYDtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgc2VyaWFsX2tleTogcm93X2lkLnZhbHVlLFxuICB9O1xuXG4gIGxldCBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfTtcbiAgY29uc3QgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTsgXG4gIGlmKHJlcykge1xuICAgIGVyci52YWx1ZSA9IGZhbHNlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IG51bV9ob3N0c19tc2cgPSAnJ1xuICAgIGlmKHJlcy5kZWxldGVkX2hvc3RzID4gMSkge1xuICAgICAgbnVtX2hvc3RzX21zZyA9ICcuIE51bWJlciBob3N0cyBkZWxldGVkOiAnICsgcmVzLmRlbGV0ZWRfaG9zdHNcbiAgICB9XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdzdWNjX2RlbF9pbmFjdGl2ZV9ob3N0cycpICsgbnVtX2hvc3RzX21zZ1xuICAgIGVtaXQoXCJkZWxldGVfaG9zdFwiKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGVyci52YWx1ZSA9IHRydWU7XG4gICAgc2hvd19yZXR1cm5fbXNnLnZhbHVlID0gdHJ1ZTtcbiAgICByZXR1cm5fbWVzc2FnZS52YWx1ZSA9IGkxOG4oJ2Vycl9kZWxfaW5hY3RpdmVfaG9zdHMnKVxuICB9XG59XG5cblxuY29uc3Qgc2hvdyA9IChfcm93X2lkLCBfbWVzc2FnZSkgPT4ge1xuICByb3dfaWQudmFsdWUgPSBfcm93X2lkO1xuICBtZXNzYWdlLnZhbHVlID0gX21lc3NhZ2U7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xuICB9LCAzMDAwIC8qIDMgc2Vjb25kcyAqLylcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRlbGV0ZVwiKSB9fVxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAge3sgX2kxOG4oXCJkZWxldGVfc2luY2VcIikgfX1cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC0zXCIgc3R5bGU9XCJtYXgtd2lkdGg6IDhyZW07XCI+XG4gICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9lcG9jaFwiIDpvcHRpb25zPVwiZXBvY2hfbGlzdFwiIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX29wdGlvblwiPlxuICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWlmPVwic2hvd19yZXR1cm5fbXNnXCIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj5cbiAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LXNtLXN0YXJ0IGZzLTYgZnctbWVkaXVtIHB0LTMgbS0wXCIgOmNsYXNzPVwiKGVycikgPyAndGV4dC1kYW5nZXInIDogJ3RleHQtc3VjY2VzcydcIj48c21hbGw+e3sgcmV0dXJuX21lc3NhZ2UgfX08L3NtYWxsPjwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfaG9zdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3sgX2kxOG4oXCJkZWxldGVcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZm9ybWF0ID0gcmVmKCdjc3YnKTtcbmNvbnN0IHNlbGVjdGVkX2Vwb2NoID0gcmVmKCk7XG5jb25zdCByZXR1cm5fbWVzc2FnZSA9IHJlZignJylcbmNvbnN0IHNob3dfcmV0dXJuX21zZyA9IHJlZihmYWxzZSlcbmNvbnN0IGVyciA9IHJlZihmYWxzZSk7XG5jb25zdCBlcG9jaF9saXN0ID0gW1xuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuNV9taW5cIiksIHZhbHVlOiAzMDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pblwiKSwgdmFsdWU6IDE4MDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXJcIiksIHZhbHVlOiAzNjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy4yX2hvdXJzXCIpLCB2YWx1ZTogNzIwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuNl9ob3Vyc1wiKSwgdmFsdWU6IDIxNjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3Vyc1wiKSwgdmFsdWU6IDQzMjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy5kYXlcIiksIHZhbHVlOiA4NjQwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMud2Vla1wiKSwgdmFsdWU6IDYwNDgwMCB9LFxuXTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRlbGV0ZV9ob3N0XCJdKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHsgXG4gIHNlbGVjdGVkX2Vwb2NoLnZhbHVlID0gZXBvY2hfbGlzdFswXTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVfb3B0aW9uKHNlbGVjdGVkX3ZhbHVlKSB7XG4gIHNlbGVjdGVkX2Vwb2NoLnZhbHVlID0gc2VsZWN0ZWRfdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV9ob3N0KCkge1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL2hvc3QvaW5hY3RpdmVfaG9zdC5sdWFgO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICBzZXJpYWxfa2V5OiBzZWxlY3RlZF9lcG9jaC52YWx1ZS52YWx1ZSxcbiAgfTtcblxuICBsZXQgaGVhZGVycyA9IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH07XG4gIGNvbnN0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gIGlmKHJlcykge1xuICAgIGVyci52YWx1ZSA9IGZhbHNlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IG51bV9ob3N0c19tc2cgPSAnJ1xuICAgIGlmKHJlcy5kZWxldGVkX2hvc3RzID4gMSkge1xuICAgICAgbnVtX2hvc3RzX21zZyA9ICcuIE51bWJlciBob3N0cyBkZWxldGVkOiAnICsgcmVzLmRlbGV0ZWRfaG9zdHNcbiAgICB9XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdzdWNjX2RlbF9pbmFjdGl2ZV9ob3N0cycpICsgbnVtX2hvc3RzX21zZ1xuICAgIGVtaXQoXCJkZWxldGVfaG9zdFwiKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGVyci52YWx1ZSA9IHRydWU7XG4gICAgc2hvd19yZXR1cm5fbXNnLnZhbHVlID0gdHJ1ZTtcbiAgICByZXR1cm5fbWVzc2FnZS52YWx1ZSA9IGkxOG4oJ2Vycl9kZWxfaW5hY3RpdmVfaG9zdHMnKVxuICB9XG59XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xuICB9LCAzMDAwIC8qIDMgc2Vjb25kcyAqLylcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRvd25sb2FkXCIpIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICB7eyBfaTE4bihcImRvd25sb2FkX2Zvcm1hdFwiKSB9fVxuICAgICAgPGRpdiBjbGFzcz1cIm10LTNcIiBzdHlsZT1cIm1heC13aWR0aDogOHJlbTtcIj5cbiAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9mb3JtYXRcIiA6b3B0aW9ucz1cImZvcm1hdF9saXN0XCIgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfb3B0aW9uXCI+XG4gICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cblxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7IF9pMThuKFwiZG93bmxvYWRcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZm9ybWF0ID0gcmVmKCdjc3YnKTtcbmNvbnN0IHNlbGVjdGVkX2Zvcm1hdCA9IHJlZigpO1xuY29uc3QgZm9ybWF0X2xpc3QgPSBbXG4gIHsgbGFiZWw6IF9pMThuKFwiY3N2XCIpLCB2YWx1ZTogXCJjc3ZcIiwgcGFyYW06IFwiY3N2XCIgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJqc29uXCIpLCB2YWx1ZTogXCJqc29uXCIsIHBhcmFtOiBcImpzb25cIiB9LFxuXTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRvd25sb2FkXCJdKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHsgXG4gIHNlbGVjdGVkX2Zvcm1hdC52YWx1ZSA9IGZvcm1hdF9saXN0WzBdO1xufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZV9vcHRpb24oc2VsZWN0ZWRfdmFsdWUpIHtcbiAgc2VsZWN0ZWRfZm9ybWF0LnZhbHVlID0gc2VsZWN0ZWRfdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBsZXQgcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICBwYXJhbXMuZG93bmxvYWQgPSB0cnVlO1xuICBwYXJhbXMuZm9ybWF0ID0gc2VsZWN0ZWRfZm9ybWF0LnZhbHVlLnZhbHVlO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvaW5hY3RpdmVfbGlzdC5sdWE/YCArIG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBudG9wbmdfdXRpbGl0eS5kb3dubG9hZF9VUkkodXJsLCBcImluYWN0aXZlX2hvc3RzLlwiICsgc2VsZWN0ZWRfZm9ybWF0LnZhbHVlLnZhbHVlKTtcbiAgZW1pdChcImRvd25sb2FkXCIpO1xuICBjbG9zZSgpO1xufVxuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxUYWJMaXN0IHJlZj1cImluYWN0aXZlX2hvc3RzX3RhYl9saXN0XCIgaWQ9XCJpbmFjdGl2ZV9ob3N0c190YWJfbGlzdFwiIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2hhbmdlX3Nob3dfY2hhcnRzXCI+XG4gICAgICAgICAgPC9UYWJMaXN0PlxuICAgICAgICAgIDwhLS1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keSBwLTFcIj5cbiAgICAgICAgICAgICAgPHRyYW5zaXRpb24gbmFtZT1cImNvbXBvbmVudC1mYWRlXCIgbW9kZT1cIm91dC1pblwiPlxuICAgICAgICAgICAgICAgIDxkaXYga2V5PVwiMVwiIHYtaWY9XCJzaG93X2NoYXJ0cyA9PSB0cnVlXCIgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfdHJhZmZpY1wiPlxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdHJhbnNpdGlvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIEBjbGljaz1cImNoYW5nZV9zaG93X2NoYXJ0c1wiPlxuICAgICAgICAgICAgPGkgdi1pZj1cInNob3dfY2hhcnRzID09IGZhbHNlXCIgY2xhc3M9XCJmYS1zb2xpZCBmYS1hbmdsZXMtZG93blwiPjwvaT5cbiAgICAgICAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhLXNvbGlkIGZhLWFuZ2xlcy11cFwiPjwvaT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAtLT5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBrZXk9XCIxXCIgdi1pZj1cInNob3dfY2hhcnRzID09IHRydWVcIiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2hvd19jaGFydHMgPT0gdHJ1ZVwiIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICAgIDxDaGFydCA6cmVmPVwiY2hhcnRfb3B0aW9uLnJlZlwiIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cInRydWVcIj5cbiAgICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyB2LWVsc2UgcmVmPVwidGFibGVfaW5hY3RpdmVfaG9zdHNcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDpjc3JmPVwiY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCIgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24gdi1mb3I9XCIodCwgdF9pbmRleCkgaW4gZmlsdGVyX3RhYmxlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIiBAY2xpY2s9XCJhZGRfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50LCB0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlclwiIDp0aXRsZT1cIm9wdC52YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwib3B0LmNvdW50ID09IG51bGxcIj57eyBvcHQubGFiZWwgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgb3B0LmxhYmVsICsgXCIgKFwiICsgb3B0LmNvdW50ICsgXCIpXCIgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+IDwhLS0gRHJvcGRvd24gZmlsdGVycyAtLT5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlciBtdC0zXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiByZWY9XCJkZWxldGVfYWxsXCIgQGNsaWNrPVwiZGVsZXRlX2FsbF9lbnRyaWVzXCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGlcbiAgICAgICAgICAgICAgICBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IF9pMThuKFwiZGVsZXRlX2FsbF9lbnRyaWVzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiByZWY9XCJkZWxldGVfb2xkZXJcIiBAY2xpY2s9XCJkZWxldGVfZW50cmllc19zaW5jZVwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpXG4gICAgICAgICAgICAgICAgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBfaTE4bihcImRlbGV0ZV9vbGRlclwiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcmVmPVwiZG93bmxvYWRcIiBAY2xpY2s9XCJkb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIj48aVxuICAgICAgICAgICAgICAgIGNsYXNzPSdmYXMgZmEtZG93bmxvYWQnPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxNb2RhbERlbGV0ZUluYWN0aXZlSG9zdCByZWY9XCJtb2RhbF9kZWxldGVcIiA6Y29udGV4dD1cImNvbnRleHRcIiBAZGVsZXRlX2hvc3Q9XCJyZWZyZXNoX3RhYmxlXCI+PC9Nb2RhbERlbGV0ZUluYWN0aXZlSG9zdD5cbiAgPE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2ggcmVmPVwibW9kYWxfZGVsZXRlX29sZGVyXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgQGRlbGV0ZV9ob3N0PVwicmVmcmVzaF90YWJsZVwiPlxuICA8L01vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2g+XG4gIDxNb2RhbERvd25sb2FkSW5hY3RpdmVIb3N0IHJlZj1cIm1vZGFsX2Rvd25sb2FkXCIgOmNvbnRleHQ9XCJjb250ZXh0XCI+PC9Nb2RhbERvd25sb2FkSW5hY3RpdmVIb3N0PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgbmV4dFRpY2ssIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0IH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2ggfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtaW5hY3RpdmUtaG9zdC1lcG9jaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEb3dubG9hZEluYWN0aXZlSG9zdCB9IGZyb20gXCIuL21vZGFsLWRvd25sb2FkLWluYWN0aXZlLWhvc3QudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignaW5hY3RpdmVfaG9zdHMnKTtcbmNvbnN0IHRpdGxlID0gcmVmKF9pMThuKCdsb2NhbF9ob3N0c19vbmx5JykpO1xuY29uc3QgZmlsdGVyX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSk7XG5jb25zdCB0YWJsZV9pbmFjdGl2ZV9ob3N0cyA9IHJlZigpO1xuY29uc3QgbW9kYWxfZG93bmxvYWQgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZSA9IHJlZigpO1xuY29uc3QgbW9kYWxfZGVsZXRlX29sZGVyID0gcmVmKCk7XG5jb25zdCBjaGFydF8xID0gcmVmKCk7XG5jb25zdCBjaGFydF8yID0gcmVmKCk7XG5jb25zdCBjaGFydF8zID0gcmVmKCk7XG5jb25zdCBzaG93X2NoYXJ0cyA9IHJlZihmYWxzZSk7XG5jb25zdCBpbmFjdGl2ZV9ob3N0c190YWJfbGlzdCA9IHJlZigpO1xuY29uc3QgYXBwbGljYXRpb25zX3RhYiA9IHJlZigpO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG4gIHNob3dfaGlzdG9yaWNhbDogQm9vbGVhbixcbn0pO1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNzcmYsXG4gIGlmaWQ6IHByb3BzLmlmaWRcbn0pXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgcmVmOiBjaGFydF8xLFxuICAgIHRpdGxlOiBpMThuKCdhY3RpdmVfaW5hY3RpdmUnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9pbmFjdGl2ZS9hY3RpdmVfaW5hY3RpdmUubHVhYCxcbiAgICBpZDogYGFjdGl2ZV9pbmFjdGl2ZV9kaXN0cm9gLFxuICB9LFxuICB7XG4gICAgcmVmOiBjaGFydF8yLFxuICAgIHRpdGxlOiBpMThuKCdpbmFjdGl2aXR5X3BlcmlvZCcpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlL2luYWN0aXZpdHlfcGVyaW9kLmx1YWAsXG4gICAgaWQ6IGBpbmFjdGl2aXR5X3BlcmlvZGAsXG4gIH0sXG4gIHtcbiAgICByZWY6IGNoYXJ0XzMsXG4gICAgdGl0bGU6IGkxOG4oJ21hbnVmYWN0dXJlcicpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlL2luYWN0aXZlX21hbnVmYWN0dXJlci5sdWFgLFxuICAgIGlkOiBgaW5hY3RpdmVfbWFudWZhY3R1cmVyYCxcbiAgfSxcbl1cblxuY29uc3QgdGFiX2xpc3QgPSByZWYoW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ3RhYmxlX3ZpZXcnKSxcbiAgICBhY3RpdmU6IChzaG93X2NoYXJ0cy52YWx1ZSA9PSBmYWxzZSksXG4gICAgaWQ6IFwidGFibGVcIlxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2NoYXJ0X3ZpZXcnKSxcbiAgICBhY3RpdmU6IChzaG93X2NoYXJ0cy52YWx1ZSA9PSB0cnVlKSxcbiAgICBpZDogXCJjaGFydFwiXG4gIH0sXG5dKVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIuaWQpO1xuICB9KTtcbiAgbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duID0gKGZpbHRlciwgZmlsdGVyX2luZGV4KSA9PiB7XG4gIHJldHVybiAoXykgPT4ge1xuICAgIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCk7XG4gIH07XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShcIm92ZXJ2aWV3XCIpO1xuICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKSB7XG4gIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZS5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBpZiAoZWwuYmFzaWNfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgZWwuYmFzaWNfbGFiZWwgPSBlbC5sYWJlbDtcbiAgICB9XG5cbiAgICBjb25zdCB1cmxfZW50cnkgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShlbC5pZClcbiAgICBpZiAodXJsX2VudHJ5ICE9IG51bGwpIHtcbiAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb24udmFsdWUudG9TdHJpbmcoKSA9PT0gdXJsX2VudHJ5KSB7XG4gICAgICAgICAgZWwubGFiZWwgPSBgJHtlbC5iYXNpY19sYWJlbH06ICR7b3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZX1gXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmxhYmVsID0gYCR7ZWwuYmFzaWNfbGFiZWx9OiAke2VsLm9wdGlvbnNbMF0ubGFiZWwgfHwgZWwub3B0aW9uc1swXS52YWx1ZX1gXG4gICAgfVxuICB9KVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpIHtcbiAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gIGF3YWl0IG5leHRUaWNrKCk7XG4gIGlmIChmaWx0ZXIuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICBsZXQgbmV3X2ZpbHRlcl9hcnJheSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShmaWx0ZXIuaWQsIGZpbHRlcik7XG4gICAgZmlsdGVyLm9wdGlvbnMgPSBuZXdfZmlsdGVyX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gZmlsdGVyLmlkKS5vcHRpb25zO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgbGV0IGRyb3Bkb3duID0gZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW2ZpbHRlcl9pbmRleF07XG4gICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gIH1cbiAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IGZhbHNlO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoYWN0aW9uKSB7XG4gIGNvbnN0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvaW5hY3RpdmVfZmlsdGVycy5sdWE/YWN0aW9uPSR7YWN0aW9ufSYke3BhcmFtc31gO1xuICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gIHJldHVybiByZXMubWFwKCh0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0LmFjdGlvbiB8fCB0Lm5hbWUsXG4gICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgaGlkZGVuOiAodC52YWx1ZS5sZW5ndGggPT0gMSlcbiAgICB9O1xuICB9KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gYWRkX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50LCBmaWx0ZXIsIGZpbHRlcl9pbmRleCkge1xuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKG9wdC5rZXksIGAke29wdC52YWx1ZX1gKTtcbiAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICB0YWJsZV9pbmFjdGl2ZV9ob3N0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG4gIGlmIChzaG93X2NoYXJ0cy52YWx1ZSA9PSB0cnVlKSB7XG4gICAgY2hhcnRfb3B0aW9ucy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgZWwucmVmLnZhbHVlWzBdLnVwZGF0ZV9jaGFydCgpXG4gICAgfSlcbiAgfVxuICBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIHRhYmxlX2luYWN0aXZlX2hvc3RzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY2hhbmdlX3Nob3dfY2hhcnRzKGl0ZW0pIHtcbiAgc2hvd19jaGFydHMudmFsdWUgPSAhc2hvd19jaGFydHMudmFsdWU7XG4gIHRhYl9saXN0LnZhbHVlLmZvckVhY2goKGkpID0+IHtcbiAgICBpLmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmKGkuaWQgPT0gXCJ0YWJsZVwiICYmIHNob3dfY2hhcnRzLnZhbHVlID09IGZhbHNlKVxuICAgICAgaS5hY3RpdmUgPSB0cnVlO1xuICAgIGVsc2UgaWYoaS5pZCA9PSBcImNoYXJ0XCIgJiYgc2hvd19jaGFydHMudmFsdWUgPT0gdHJ1ZSlcbiAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgfSk7XG4gIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgaXRlbSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIFwiY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3NcIjogY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MsXG4gICAgXCJjbGlja19idXR0b25fZGVsZXRlXCI6IGNsaWNrX2J1dHRvbl9kZWxldGUsXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZGVsZXRlKGV2ZW50KSB7XG4gIGNvbnN0IHJvdyA9IGV2ZW50LnJvdy5zZXJpYWxfa2V5O1xuICBtb2RhbF9kZWxldGUudmFsdWUuc2hvdyhyb3csIGkxOG4oJ2RlbGV0ZV9pbmFjdGl2ZV9ob3N0JywgeyBob3N0OiBldmVudC5yb3cuaG9zdC5pcF9hZGRyZXNzLnZhbHVlIH0pKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZGVsZXRlX2FsbF9lbnRyaWVzKCkge1xuICBtb2RhbF9kZWxldGUudmFsdWUuc2hvdygnYWxsJywgaTE4bignZGVsZXRlX2FsbF9pbmFjdGl2ZV9ob3N0cycpKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZGVsZXRlX2VudHJpZXNfc2luY2UoKSB7XG4gIG1vZGFsX2RlbGV0ZV9vbGRlci52YWx1ZS5zaG93KCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBtb2RhbF9kb3dubG9hZC52YWx1ZS5zaG93KCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gIGNvbnN0IHJvdyA9IGV2ZW50LnJvdztcbiAgbGV0IHZsYW4gPSAnJ1xuICBpZihyb3cudmxhbiAhPSAwKVxuICAgIHZsYW4gPSBgQCR7cm93LnZsYW59YFxuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtyb3cuZXBvY2hfYmVnaW4gLSAxMDB9JmVwb2NoX2VuZD0ke3Jvdy5lcG9jaF9lbmQgKyAxMDB9JmlwPSR7cm93LmlwX2FkZHJlc3MudmFsdWUgfHwgcm93LmlwX2FkZHJlc3N9JHt2bGFufTtlcSZtYWM9JHtyb3cubWFjX2FkZHJlc3MudmFsdWUgfHwgcm93Lm1hY19hZGRyZXNzfTtlcWA7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcIm1hY19hZGRyZXNzXCI6IChtYWMsIHJvdykgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IG1hYztcbiAgICAgIGlmIChtYWMgIT0gbnVsbCAmJlxuICAgICAgICBtYWMudXJsICE9IG51bGwgJiZcbiAgICAgICAgbWFjLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgICBtYWMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQgPSBgPGEgaHJlZj0nJHtodHRwX3ByZWZpeH0ke21hYy51cmx9JyB0aXRsZT0nJHttYWMudmFsdWV9Jz4ke21hYy5uYW1lfTwvYT5gXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBcIm5ldHdvcmtcIjogKG5ldHdvcmssIHJvdykgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IG5ldHdvcms7XG4gICAgICBpZiAobmV0d29yay51cmwgIT0gbnVsbCAmJlxuICAgICAgICBuZXR3b3JrLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgICBuZXR3b3JrLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0ID0gYDxhIGhyZWY9JyR7aHR0cF9wcmVmaXh9JHtuZXR3b3JrLnVybH0nIHRpdGxlPScke25ldHdvcmsudmFsdWV9Jz4ke25ldHdvcmsubmFtZX08L2E+YFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXCJob3N0XCI6IChob3N0LCByb3cpID0+IHtcbiAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgIGNvbnN0IGlwX2FkZHJlc3MgPSBob3N0LmlwX2FkZHJlc3M7XG4gICAgICByZXN1bHQgPSBgPGEgaHJlZj0nJHtodHRwX3ByZWZpeH0ke2lwX2FkZHJlc3MudXJsfScgdGl0bGU9JyR7aXBfYWRkcmVzcy52YWx1ZX0nPiR7aXBfYWRkcmVzcy5uYW1lfTwvYT5gXG5cbiAgICAgIGlmIChob3N0LnZsYW4gIT0gbnVsbCAmJiBob3N0LnZsYW4ubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHZsYW4gPSBob3N0LnZsYW47XG4gICAgICAgIGlmICh2bGFuLnVybCAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fUA8YSBocmVmPScke2h0dHBfcHJlZml4fSR7dmxhbi51cmwgfHwgJyMnfScgdGl0bGU9JyR7dmxhbi52YWx1ZX0nPiR7dmxhbi5uYW1lfTwvYT5gXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fUAke3ZsYW4ubmFtZX1gXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHtyZXN1bHR9ICR7aG9zdC5kZXZpY2VfdHlwZX1gO1xuICAgIH0sXG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG4gICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgaGlzdG9yaWNhbF9kYXRhOiBwcm9wcy5zaG93X2hpc3RvcmljYWwsXG4gICAgICB9O1xuICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgaWYgKCF2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICBiLmNsYXNzLnB1c2goXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC00IGNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxCb290c3RyYXBUYWJsZSA6aG9yaXpvbnRhbD1cInRydWVcIiA6aWQ9XCJ0YWJsZV9pZFwiIDpyb3dzPVwic3RhdHNfcm93c1wiIDpwcmludF9odG1sX3RpdGxlPVwicHJpbnRfaHRtbF90aXRsZVwiXG4gICAgICAgICAgICA6cHJpbnRfaHRtbF9yb3c9XCJwcmludF9zdGF0c19yb3dcIj5cbiAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHVybCA9IFwiL2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlX2hvc3QubHVhXCI7XG5jb25zdCB0YWJsZV9pZCA9IHJlZignaW5hY3RpdmVfaG9zdF9kZXRhaWxzJyk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc3RhdHNfcm93cyA9IHJlZihbXSk7XG5cbmNvbnN0IHByaW50X2h0bWxfdGl0bGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gKG5hbWUgfHwgXCJcIik7XG59XG5cbmNvbnN0IHByaW50X3N0YXRzX3JvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBsZXQgbGFiZWwgPSB2YWx1ZS5uYW1lIHx8ICcnO1xuICBpZiAodmFsdWUudXJsICYmIHZhbHVlLnVybCAhPSAnJylcbiAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0ke3ZhbHVlLnVybH1cIj4ke2xhYmVsfTwvPmBcblxuICByZXR1cm4gbGFiZWw7XG59XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGV4dHJhX3BhcmFtcyk7XG4gIGNvbnN0IGhvc3Rfc3RhdHMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9JHt1cmx9PyR7dXJsX3BhcmFtc31gKTtcbiAgc3RhdHNfcm93cy52YWx1ZSA9IGhvc3Rfc3RhdHMuaG9zdF9pbmZvXG4gICQoJyNuYXZiYXJfdGl0bGUnKS5odG1sKFwiPGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT4gXCIgKyBfaTE4bignaG9zdF9kZXRhaWxzLmhvc3QnKSArIFwiOiBcIiArIGhvc3Rfc3RhdHMuaG9zdF9uYW1lKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjItMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLXN0cmlwZWRcIj5cbiAgICA8dHI+XG4gICAgPHRoPiB7eyBfaTE4bihcImZsb3dkZXZfYWxpYXNcIikgfX0gPC90aD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIEBpbnB1dD1cImNoZWNrRGlzYWJsZWRcIj5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgPC90YWJsZT5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpjbGFzcz1cIltkaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiAnJ11cIiBAY2xpY2s9XCJ1cGRhdGVGbG93RGV2QWxpYXNcIiBpZD1cInNhdmVcIj4ge3sgX2kxOG4oXCJzYXZlX3NldHRpbmdzXCIpIH19IDwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY3VzdG9tX25hbWUgPSByZWYobnVsbCk7XG5jb25zdCBwcmV2X25hbWUgPSByZWYoJycpO1xuY29uc3QgZGlzYWJsZWQgPSByZWYodHJ1ZSk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG4gIGZsb3dkZXZfaXA6IFN0cmluZyxcbn0pO1xuY29uc3QgZ2V0X2Zsb3dkZXZfYWxpYXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZS9hbGlhcy5sdWE/Zmxvd2Rldl9pcD0ke3Byb3BzLmZsb3dkZXZfaXB9JmlmaWQ9JHtwcm9wcy5pZmlkfWBcbmNvbnN0IHVwZGF0ZV9mbG93ZGV2X2FsaWFzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvc2V0L2Zsb3dkZXZpY2UvYWxpYXMubHVhYFxuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBnZXRGbG93RGV2QWxpYXMoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRGbG93RGV2QWxpYXMoKSB7XG4gIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtnZXRfZmxvd2Rldl9hbGlhc191cmx9YCwgeyBtZXRob2Q6ICdnZXQnIH0pO1xuICBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZSA9IHJzcCB8fCBwcm9wcy5mbG93ZGV2X2lwO1xuICBwcmV2X25hbWUudmFsdWUgPSBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZTtcbn1cblxuY29uc3QgdXBkYXRlRmxvd0RldkFsaWFzID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5jc3JmLFxuICAgIGZsb3dkZXZfaXA6IHByb3BzLmZsb3dkZXZfaXAsXG4gICAgYWxpYXM6IGN1c3RvbV9uYW1lLnZhbHVlLnZhbHVlLFxuICAgIGlmaWQ6IHByb3BzLmlmaWRcbiAgfTtcbiAgbGV0IGhlYWRlcnMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9O1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXBkYXRlX2Zsb3dkZXZfYWxpYXNfdXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICBnZXRGbG93RGV2QWxpYXMoKTtcbiAgZGlzYWJsZWQudmFsdWUgPSB0cnVlO1xufVxuXG5jb25zdCBjaGVja0Rpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcmV2X25hbWUudmFsdWUgPT0gY3VzdG9tX25hbWUudmFsdWUudmFsdWUpIHtcbiAgICBkaXNhYmxlZC52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZGlzYWJsZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuPC9zY3JpcHQ+IiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICB7eyBib2R5IH19XG4gICAgPE5vdGVMaXN0IHYtaWY9XCJzaG93X25vdGVfbGlzdFwiXG4gICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgPC9Ob3RlTGlzdD5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJkZWxldGVfdHlwZSA9PSAnZGVsZXRlX2FsbCcgfHwgZGVsZXRlX3R5cGUgPT0gJ2RlbGV0ZV9zaW5nbGVfcm93J1wiPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKCdkZWxldGUnKX19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlX3NjYW4nKX19PC9idXR0b24+XG5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydkZWxldGUnLCdkZWxldGVfYWxsJ10pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcbmNvbnN0IGJvZHkgPSByZWYoJycpO1xuY29uc3QgdGl0bGUgPSByZWYoJycpO1xuY29uc3QgZGVsZXRlX3R5cGUgPSByZWYoJycpO1xuY29uc3Qgc2hvd19ub3RlX2xpc3QgPSByZWYodHJ1ZSk7XG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIGkxOG4oJ25vdGVfc2Nhbl9ob3N0Jylcbl07XG5cbmNvbnN0IHNob3cgPSAodHlwZSwgdmFsdWUpID0+IHtcbiAgc2hvd19ub3RlX2xpc3QudmFsdWUgPSBmYWxzZTtcbiAgZGVsZXRlX3R5cGUudmFsdWUgPSB0eXBlXG5cbiAgICBpZih0eXBlID09IFwiZGVsZXRlX2FsbFwiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJkZWxldGVfYWxsX2VudHJpZXNcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmKHR5cGUgPT0gXCJkZWxldGVfc2luZ2xlX3Jvd1wiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJkZWxldGVfdnNfaG9zdF90aXRsZVwiKTtcbiAgICAgIGJvZHkudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYodHlwZSA9PSBcInNjYW5fYWxsX3Jvd3NcIikge1xuICAgICAgdGl0bGUudmFsdWUgPSBpMThuKFwic2Nhbl9hbGxfaG9zdHNfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmKHR5cGUgPT0gXCJzY2FuX3Jvd1wiKSB7XG4gICAgICBzaG93X25vdGVfbGlzdC52YWx1ZSA9IHRydWU7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiZGVsZXRlX3NpbmdsZV9yZXBvcnRcIikge1xuICAgICAgdGl0bGUudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5kZWxldGVfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2UuZGVsZXRlX2Rlc2NyaXB0aW9uXCIpO1xuICAgIH1cbiAgICBcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBkZWxldGVfID0gKCkgPT4ge1xuICAgIGlmIChkZWxldGVfdHlwZS52YWx1ZSA9PSBcImRlbGV0ZV9hbGxcIikge1xuICAgICAgZW1pdCgnZGVsZXRlX2FsbCcpO1xuICAgIH0gZWxzZSBpZiAoIGRlbGV0ZV90eXBlLnZhbHVlID09IFwiZGVsZXRlX3NpbmdsZV9yb3dcIikge1xuICAgICAgZW1pdCgnZGVsZXRlJyk7XG4gICAgfSBlbHNlIGlmIChkZWxldGVfdHlwZS52YWx1ZSA9PSBcInNjYW5fYWxsX3Jvd3NcIikge1xuICAgICAgZW1pdCgnc2Nhbl9hbGxfcm93cycpO1xuICAgIH0gZWxzZSBpZiAoZGVsZXRlX3R5cGUudmFsdWUgPT0gXCJzY2FuX3Jvd1wiKSB7XG4gICAgICBlbWl0KCdzY2FuX3JvdycpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3tfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5hdXRvbWF0aWNfc2NhblwiKX19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3lcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiYXV0b21hdGljX3NjYW5fZnJlcXVlbmNpZXNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPiBcbiAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInVwZGF0ZV9cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IG1lLTRcIj57e19pMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudXBkYXRlX2FsbCcpfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9tb2RhbD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIFxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGUnLF0pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICAgICAgdGl0bGU6IFN0cmluZyxcbiAgICB9KTtcbmNvbnN0IGF1dG9tYXRpY19zY2FuX2ZyZXF1ZW5jaWVzX2xpc3QgPSByZWYoW1xuICB7IGlkOiBcImRpc2FibGVkXCIsIGxhYmVsOmkxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kaXNhYmxlZCcpfSxcbiAgeyBpZDogXCIxZGF5XCIsIGxhYmVsOmkxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ldmVyeV9uaWdodCcpfSxcbiAgeyBpZDogXCIxd2Vla1wiLCBsYWJlbDppMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXZlcnlfd2VlaycpfSxcbl0pO1xuXG5sZXQgc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kgPSByZWYoYXV0b21hdGljX3NjYW5fZnJlcXVlbmNpZXNfbGlzdC52YWx1ZVswXSk7XG4gICAgXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuLy8gIGNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGVsZXRlX2hvc3RfdGl0bGVcIikpXG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IHVwZGF0ZV8gPSAoKSA9PiB7XG4gICAgZW1pdCgndXBkYXRlJywge3NjYW5fZnJlcXVlbmN5OiBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeS52YWx1ZS5pZH0pO1xuXG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3RcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaG9zdFwiIEBpbnB1dD1cImNoZWNrX2hvc3RfcmVnZXhcIiA6ZGlzYWJsZWQ9XCJpc19lZGl0X3BhZ2VcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cImhvc3RfcGxhY2Vob2xkZXJcIiByZXF1aXJlZCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2NpZHJcIiA6ZGlzYWJsZWQ9XCJpc19lZGl0X3BhZ2VcIiA6b3B0aW9ucz1cImNpZHJfb3B0aW9uc19saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnBvcnRzXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJwb3J0c1wiIEBmb2N1c291dD1cImNoZWNrX3BvcnRzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiA6Y2xhc3M9XCJoaWRlX3BvcnRzX3BsYWNlaG9sZGVyID09PSB0cnVlID8gJ250b3BuZy1oaWRlLXBsYWNlaG9sZGVyJyA6ICcnXG4gICAgICAgICAgICBcIiB0eXBlPVwidGV4dFwiIDpwbGFjZWhvbGRlcj1cInBvcnRzX3BsYWNlaG9sZGVyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjYW5fdHlwZVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zY2FuX3R5cGVcIiA6b3B0aW9ucz1cInNjYW5fdHlwZV9saXN0XCIgOmRpc2FibGVkPVwiaXNfZWRpdF9wYWdlXCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZW50ZXJwcmlzZV9sID09IHRydWVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnBlcmlvZGljaXR5XCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5XCIgOm9wdGlvbnM9XCJzY2FuX2ZyZXF1ZW5jaWVzX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC00XCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZW50ZXJwcmlzZV9sID09IGZhbHNlXCI+XG4gICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cImVudGVycHJpc2Vfbm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8ZGl2IHYtaWY9XCJpc19kYXRhX25vdF9va1wiIGNsYXNzPVwibWUtYXV0byB0ZXh0LWRhbmdlciBkLWlubGluZVwiPlxuICAgICAgICB7eyBub19ob3N0X2ZlZWRiYWNrIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxTcGlubmVyIDpzaG93PVwiYWN0aXZhdGVfYWRkX3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMlwiPjwvU3Bpbm5lcj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfZWRpdF9wYWdlID09IGZhbHNlXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgOmRpc2FibGVkPVwiIShpc19jaWRyX2NvcnJlY3QgJiYgaXNfaG9zdF9jb3JyZWN0ICYmIGlzX3BvcnRfY29ycmVjdClcIj5cbiAgICAgICAgICB7eyBfaTE4bihcImFkZFwiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB2LWVsc2UgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgIDpkaXNhYmxlZD1cIiEoaXNfY2lkcl9jb3JyZWN0ICYmIGlzX2hvc3RfY29ycmVjdCAmJiBpc19wb3J0X2NvcnJlY3QpXCI+XG4gICAgICAgICAge3sgX2kxOG4oXCJhcHBseVwiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuLyogSW1wb3J0cyAqL1xuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3Bpbm5lciB9IGZyb20gXCIuL3NwaW5uZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRhdGFVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YS11dGlsc1wiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImFkZFwiLCBcImVkaXRcIl0pO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuYWRkX2hvc3RcIikpO1xuY29uc3Qgbm9faG9zdF9mZWVkYmFjayA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3Rfbm90X3Jlc29sdmVkXCIpKTtcbmNvbnN0IGhvc3RfcGxhY2Vob2xkZXIgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3RfcGxhY2Vob2xkZXJcIik7XG5jb25zdCBwb3J0c19wbGFjZWhvbGRlciA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucG9ydHNfcGxhY2Vob2xkZXJcIik7XG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMVwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8yXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNcIiksXG5dO1xuY29uc3QgZW50ZXJwcmlzZV9ub3RlX2xpc3QgPSBbXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMVwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8yXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfNFwiKSxcbl07XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfc2Nhbl90eXBlID0gcmVmKHt9KTtcbmNvbnN0IGhpZGVfcG9ydHNfcGxhY2Vob2xkZXIgPSByZWYoXCJcIik7XG5jb25zdCByb3dfdG9fZWRpdF9pZCA9IHJlZihcIlwiKTtcbmNvbnN0IGFjdGl2YXRlX2FkZF9zcGlubmVyID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSk7XG5jb25zdCBzY2FuX3R5cGVfbGlzdCA9IHJlZihbXSk7XG5jb25zdCBpZmlkID0gcmVmKG51bGwpO1xuY29uc3QgaG9zdCA9IHJlZihudWxsKTtcbmNvbnN0IHBvcnRzID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd19wb3J0X2ZlZWRiYWNrID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2VudGVycHJpc2VfbCA9IHJlZihudWxsKTtcbmNvbnN0IGlzX3BvcnRfY29ycmVjdCA9IHJlZih0cnVlKTtcbmNvbnN0IGlzX2NpZHJfY29ycmVjdCA9IHJlZih0cnVlKTtcbmNvbnN0IGlzX2hvc3RfY29ycmVjdCA9IHJlZihmYWxzZSk7XG5jb25zdCBzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QgPSByZWYoW1xuICB7IGlkOiBcImRpc2FibGVkXCIsIGxhYmVsOiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRpc2FibGVkXCIpIH0sXG4gIHsgaWQ6IFwiMWRheVwiLCBsYWJlbDogaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ldmVyeV9uaWdodFwiKSB9LFxuICB7IGlkOiBcIjF3ZWVrXCIsIGxhYmVsOiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmV2ZXJ5X3dlZWtcIikgfSxcbl0pO1xuY29uc3QgQ0lEUl8yNCA9IFwiMjRcIjtcbmNvbnN0IENJRFJfMzIgPSBcIjMyXCI7XG5jb25zdCBDSURSXzEyOCA9IFwiMTI4XCI7XG5jb25zdCBjaWRyX29wdGlvbnNfbGlzdCA9IHJlZihbXG4gIHsgaWQ6IFwiMjRcIiwgbGFiZWw6IFwiLzI0XCIgfSxcbiAgeyBpZDogXCIzMlwiLCBsYWJlbDogXCIvMzJcIiB9LFxuICB7IGlkOiBcIjEyOFwiLCBsYWJlbDogXCIvMTI4XCIgfSxcbl0pO1xuY29uc3Qgc2VsZWN0ZWRfY2lkciA9IHJlZihjaWRyX29wdGlvbnNfbGlzdC52YWx1ZVsxXSk7XG5jb25zdCBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeSA9IHJlZihzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QudmFsdWVbMF0pO1xuY29uc3QgaXNfZGF0YV9ub3Rfb2sgPSByZWYoZmFsc2UpO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLypcbiAqIFJlc2V0IGZpZWxkcyBpbiBtb2RhbCBmb3JtXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIGhvc3QudmFsdWUgPSBcIlwiO1xuICBwb3J0cy52YWx1ZSA9IFwiXCI7XG4gIGlzX3BvcnRfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIGlzX2NpZHJfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZV9hZGRfc3Bpbm5lci52YWx1ZSA9IGZhbHNlO1xuICBzaG93X3BvcnRfZmVlZGJhY2sudmFsdWUgPSBmYWxzZTtcbiAgc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlID0gc2Nhbl90eXBlX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZVsxXTtcbiAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSBudWxsO1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgaXNfZGF0YV9ub3Rfb2sudmFsdWUgPSBmYWxzZTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKlxuICogU2V0IHJvdyB0byBlZGl0XG4gKi9cbmNvbnN0IHNldF9yb3dfdG9fZWRpdCA9IChyb3cpID0+IHtcbiAgaXNfZWRpdF9wYWdlLnZhbHVlID0gdHJ1ZTtcblxuICAvKiBTZXQgaG9zdCB2YWx1ZXMgKi9cbiAgaG9zdC52YWx1ZSA9IHJvdy5ob3N0O1xuICBwb3J0cy52YWx1ZSA9IHJvdy5wb3J0cztcbiAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgaXNfcG9ydF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSByb3cuaWQ7XG5cbiAgLyogU2V0IHRoZSBjb3JyZWN0IHZhbHVlcyBpZiBhdmFpbGFibGUgKi9cbiAgLyogU2NhbiBUeXBlICovXG4gIHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZSA9IHNjYW5fdHlwZV9saXN0LnZhbHVlLmZpbmQoXG4gICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gcm93LnNjYW5fdHlwZVxuICApO1xuXG4gIC8qIENJRFIgKi9cbiAgaWYgKHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUlQdjQocm93Lmhvc3QpKSB7XG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzMyXG4gICAgKTsgLyogSVB2NCAqL1xuICB9IGVsc2Uge1xuICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8xMjhcbiAgICApOyAvKiBJUHY2ICovXG4gIH1cbiAgaXNfY2lkcl9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcblxuICAvKiBTY2FuIEZyZXF1ZW5jeSAqL1xuICBpZiAoaXNfZW50ZXJwcmlzZV9sKSB7XG4gICAgc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kudmFsdWUgPSBzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QudmFsdWUuZmluZChcbiAgICAgIChpdGVtKSA9PiBpdGVtLmlkID09IHJvdy5zY2FuX2ZyZXF1ZW5jeVxuICAgICk7XG4gIH1cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbmV2ZXIgdGhlIG1vZGFsIGlzIG9wZW5lZCAqL1xuY29uc3Qgc2hvdyA9IChyb3csIF9ob3N0KSA9PiB7XG4gIC8qIEZpcnN0IG9mIGFsbCByZXNldCBhbGwgdGhlIGRhdGEgKi9cbiAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuYWRkX2hvc3RcIik7XG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlPck51bGwocm93KSkge1xuICAgIC8qIEluIGNhc2Ugcm93IGlzIG5vdCBudWxsIHRoZW4gYW4gZWRpdCBpcyByZXF1ZXN0ZWQgKi9cbiAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZWRpdF9ob3N0X3RpdGxlXCIpO1xuICAgIHNldF9yb3dfdG9fZWRpdChyb3cpO1xuICB9XG5cbiAgaWYgKCFkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChfaG9zdCkpIHtcbiAgICBob3N0LnZhbHVlID0gX2hvc3Q7XG4gICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgfVxuXG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBSZWdleCB0byBjaGVjayBpZiB0aGUgaG9zdCBpcyBjb3JyZWN0IG9yIG5vdCAqL1xuY29uc3QgY2hlY2tfaG9zdF9yZWdleCA9ICgpID0+IHtcbiAgY29uc3QgaXNfaXB2NCA9IHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUlQdjQoaG9zdC52YWx1ZSk7XG4gIGNvbnN0IGlzX2lwdjYgPSByZWdleFZhbGlkYXRpb24udmFsaWRhdGVJUHY2KGhvc3QudmFsdWUpO1xuICBjb25zdCBpc19ob3N0X25hbWUgPSByZWdleFZhbGlkYXRpb24udmFsaWRhdGVIb3N0TmFtZShob3N0LnZhbHVlKTtcbiAgaWYgKGlzX2lwdjQpIHtcbiAgICAvKiBJUHY0ICovXG4gICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgICBpZiAoIWhvc3QudmFsdWUuZW5kc1dpdGgoMCkpIHtcbiAgICAgIC8qIEluIGNhc2UgdGhlIENJRFIgaXMgd3JvbmcgKi9cbiAgICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzMyXG4gICAgICApOyAvKiBJUHY0ICovXG4gICAgfVxuICB9IGVsc2UgaWYgKGlzX2lwdjYpIHtcbiAgICAvKiBJUHY2ICovXG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlWzJdO1xuICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gICAgLyogSW4gY2FzZSB0aGUgQ0lEUiBpcyB3cm9uZyAqL1xuICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8xMjhcbiAgICApOyAvKiBJUHY2ICovXG4gIH0gZWxzZSBpZiAoaXNfaG9zdF9uYW1lKSB7XG4gICAgLyogSG9zdCBOYW1lICovXG4gICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgICAvKiBJbiBjYXNlIHRoZSBDSURSIGlzIHdyb25nICovXG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzMyXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlZ2V4IHRvIGNoZWNrIGlmIHBvcnRzIGxpc3QgaXMgY29ycmVjdCBvciBub3QgKi9cbmNvbnN0IGNoZWNrX3BvcnRzID0gKCkgPT4ge1xuICBpZiAoXG4gICAgIXJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZVBvcnRSYW5nZShwb3J0cy52YWx1ZSkgJiZcbiAgICAhcmVnZXhWYWxpZGF0aW9uLnZhbGlkYXRlQ29tbWFTZXBhcmF0ZWRQb3J0TGlzdChwb3J0cy52YWx1ZSkgJiZcbiAgICAhZGF0YVV0aWxzLmlzRW1wdHlPck51bGwocG9ydHMudmFsdWUpXG4gICkge1xuICAgIGlzX3BvcnRfY29ycmVjdC52YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIC8qIEVtcHR5IHBvcnQgaXMgYWxyaWdodCEgKi9cbiAgICBpc19wb3J0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICB9XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUmVzb2x2ZSBob3N0bmFtZSAqL1xuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZV9ob3N0X25hbWUoaG9zdCkge1xuICBjb25zdCByZXNvbHZlX2hvc3RfbmFtZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcmVzb2x2ZV9ob3N0X25hbWUubHVhYDtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlc29sdmVfaG9zdF9uYW1lX3VybCwge1xuICAgIGhvc3Q6IGhvc3QsXG4gIH0pO1xuXG4gIHJldHVybiBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBlZGl0IGJ1dHRvbiBpcyBjbGlja2VkICovXG5jb25zdCBlZGl0XyA9ICgpID0+IHtcbiAgYWRkXyh0cnVlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgbW9kYWwgaXMgY2xvc2VkICovXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBhZGQgaG9zdCB0byBzY2FuICovXG5jb25zdCBhZGRfID0gYXN5bmMgKGlzX2VkaXQpID0+IHtcbiAgY29uc3QgaG9zdF9wb3J0cyA9IHBvcnRzLnZhbHVlO1xuICBjb25zdCBob3N0X3NjYW5fdHlwZSA9IHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZS5pZDtcbiAgY29uc3QgZW1pdF9ldmVudCA9IChpc19lZGl0ID09PSB0cnVlKSA/IFwiZWRpdFwiIDogXCJhZGRcIjtcbiAgY29uc3Qgcm93X2lkID0gKGlzX2VkaXQgPT09IHRydWUpID8gcm93X3RvX2VkaXRfaWQudmFsdWUgOiBudWxsO1xuICBsZXQgbmV3X2hvc3QgPSBob3N0LnZhbHVlO1xuICBsZXQgbmV3X2hvc3RfbmFtZV9yZXNvbHZlZCA9IHRydWU7XG5cbiAgLyogQWN0aXZhdGUgdGhlIHNwaW5uZXIgdG8gZ2l2ZSB0aGUgdXNlciBhIGZlZWRiYWNrICovXG4gIGFjdGl2YXRlX2FkZF9zcGlubmVyLnZhbHVlID0gdHJ1ZTtcblxuICAvKiBDaGVjayBpZiBpdCdzIGFuIElQIG9yIG5vdCwgaWYgbm90IGl0IG1lYW5zIGl0J3MgYW4gaG9zdG5hbWUgKi9cbiAgaWYgKCFyZWdleFZhbGlkYXRpb24udmFsaWRhdGVJUChob3N0LnZhbHVlKSkge1xuICAgIC8qIER1cmluZyB0aGUgdmFsaWRhdGlvbiBkaXNhYmxlIHRoZSBhZGQgYnV0dG9uICovXG4gICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gZmFsc2U7XG4gICAgbmV3X2hvc3QgPSBhd2FpdCByZXNvbHZlX2hvc3RfbmFtZShob3N0LnZhbHVlKTtcbiAgICBpZiAobmV3X2hvc3QgPT09IFwibm9fc3VjY2Vzc1wiKSB7XG4gICAgICAvKiBUaGUgcmVzb2x1dGlvbiBmYWlsZWQhICovXG4gICAgICBuZXdfaG9zdF9uYW1lX3Jlc29sdmVkID0gZmFsc2U7XG4gICAgICBub19ob3N0X2ZlZWRiYWNrLnZhbHVlID0gaG9zdC52YWx1ZSArIFwiIFwiICsgaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X25vdF9yZXNvbHZlZFwiKTtcbiAgICAgIGlzX2RhdGFfbm90X29rLnZhbHVlID0gdHJ1ZTtcbiAgICAgIC8qIEhpZGUgdGhlIG1lc3NhZ2UgYWZ0ZXIgMyBzZWNvbmRzICovXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNfZGF0YV9ub3Rfb2sudmFsdWUgPSBmYWxzZVxuICAgICAgfSwgNDAwMClcbiAgICB9XG4gICAgLyogVmFsaWRhdGlvbiBlbmRlZCwgcmUtZW5hYmxlIHRoZSBidXR0b24gKi9cbiAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgLyogSWYgdGhlIHJlc29sdXRpb24gd2FzIG9rIG9yIG5vIHJlc29sdXRpb24gYXQgYWxsIHdhcyBkb25lIGVtaXQgdGhlIGV2ZW50ICovXG4gIGFjdGl2YXRlX2FkZF9zcGlubmVyLnZhbHVlID0gbmV3X2hvc3RfbmFtZV9yZXNvbHZlZDtcblxuICBpZiAobmV3X2hvc3RfbmFtZV9yZXNvbHZlZCkge1xuICAgIC8qIEVtaXQgdGhlIGV2ZW50LCBvbmx5IGlmIHRoZSByZXNvbHV0aW9uIFxuICAgIHdhcyBvayBvciBubyByZXNvbHV0aW9uIGF0IGFsbCB3YXMgbmVlZGVkICovXG4gICAgZW1pdChlbWl0X2V2ZW50LCB7XG4gICAgICBob3N0OiBuZXdfaG9zdCxcbiAgICAgIHNjYW5fdHlwZTogaG9zdF9zY2FuX3R5cGUsXG4gICAgICBzY2FuX3BvcnRzOiBob3N0X3BvcnRzLFxuICAgICAgY2lkcjogc2VsZWN0ZWRfY2lkci52YWx1ZS5pZCxcbiAgICAgIHNjYW5fZnJlcXVlbmN5OiBpc19lbnRlcnByaXNlX2wgPyBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeS52YWx1ZS5pZCA6IG51bGwsXG4gICAgICBzY2FuX2lkOiByb3dfaWQsXG4gICAgfSk7XG4gIH1cblxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIExvYWQgdGhlIGF2YWlsYWJsZSBtZXRyaWNzICovXG5jb25zdCBtZXRyaWNzTG9hZGVkID0gYXN5bmMgKF9zY2FuX3R5cGVfbGlzdCwgX2lmaWQsIF9pc19lbnRlcnByaXNlX2wpID0+IHtcbiAgY29uc3Qgc2Nhbl90eXBlcyA9IF9zY2FuX3R5cGVfbGlzdC5zb3J0KChhLCBiKSA9PlxuICAgIGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKVxuICApO1xuICBpZmlkLnZhbHVlID0gX2lmaWQ7XG4gIHNjYW5fdHlwZV9saXN0LnZhbHVlID0gc2Nhbl90eXBlcztcbiAgaXNfZW50ZXJwcmlzZV9sLnZhbHVlID0gX2lzX2VudGVycHJpc2VfbDtcbiAgc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlID0gc2Nhbl90eXBlX2xpc3QudmFsdWVbMF07XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiBjYWxsZWQgd2hlbmV2ZXIgdGhlIENJRFIgY2hhbmdlcyxcbiAqIGluIGNhc2Ugb2YgYSBuZXR3b3JrIHRoZSBwb3J0IGlzIG5vdCBuZWVkZWRcbiAqL1xuLyogXG5cbjxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLTJcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImNvbC0xMCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgPCEtLVxuICAgICAgSElEREVOIEJVVFRPTiBGT1IgTk9XXG4gICAgICA8YnV0dG9uXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIEBjbGljaz1cImxvYWRfcG9ydHNcIlxuICAgICAgOmRpc2FibGVkPVwiIWlzX2hvc3RfY29ycmVjdCB8fCBkaXNhYmxlX2xvYWRfcG9ydHNcIlxuICAgICAgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgID5cbiAgICAgIHt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmxvYWRfcG9ydHNcIikgfX1cbiAgICA8L2J1dHRvbj5cbiAgICAtLT5cbiAgICA8ZGQgdi1pZj1cInNob3dfcG9ydF9mZWVkYmFja1wiIGNsYXNzPVwibXMtMiBtYi0wIHRleHQtZGFuZ2VyXCI+XG4gICAgICB7eyBwb3J0X2ZlZWRiYWNrIH19XG4gICAgPC9kZD5cbiAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiPjwvYT5cbiAgPC9kaXY+XG48L2Rpdj5cblxuIC0tIEhpZGRlbiBmdW5jdGlvbiBmb3Igbm93LCBpdCdzIG5vdCBuZWVkZWQgLS1cblxuY29uc3QgcG9ydF9mZWVkYmFjayA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm9fcG9ydHNfZGV0ZWN0ZWRcIik7XG5jb25zdCBzZXJ2ZXJfcG9ydHMgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3Qvb3Blbl9wb3J0cy5sdWFgO1xuY29uc3QgZGlzYWJsZV9sb2FkX3BvcnRzID0gcmVmKGZhbHNlKTtcblxuZnVuY3Rpb24gZGlzYWJsZV9wb3J0cygpIHtcbiAgaWYgKHNlbGVjdGVkX2NpZHIudmFsdWUuaWQgIT0gY2lkcl8yNCkge1xuICAgIGRpc2FibGVfbG9hZF9wb3J0cy52YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIGRpc2FibGVfbG9hZF9wb3J0cy52YWx1ZSA9IHRydWU7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9wb3J0cygpIHtcbiAgYWN0aXZhdGVfc3Bpbm5lci52YWx1ZSA9IHRydWU7XG4gIC8qIEluIGNhc2UgdGhlIGhvc3QgaXMgbm90IGVtcHR5LCBoaWRlIHRoZSBwbGFjZWhvbGRlciAqL1xuLyogIGlmIChkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChob3N0LnZhbHVlKSkge1xuICAgIGhpZGVfcG9ydHNfcGxhY2Vob2xkZXIudmFsdWUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGhpZGVfcG9ydHNfcGxhY2Vob2xkZXIudmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qIFJlcXVlc3QgZm9yIHRoZSBhdmFpbGFibGUgcG9ydHMgKi9cbi8qICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc2VydmVyX3BvcnRzLCB7XG4gICAgaG9zdDogaG9zdC52YWx1ZSxcbiAgICBpZmlkOiBpZmlkLnZhbHVlLFxuICAgIGNsaXNydjogXCJzZXJ2ZXJcIixcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG5cbiAgLyogU2hvdyB0aGUgcmVzdWx0cyBvciBlbXB0eSBpZiBubyBkYXRhIHdhcyBmb3VuZCAqL1xuLyogIGlmICghZGF0YVV0aWxzLmlzRW1wdHlPck51bGwocmVzdWx0KSkge1xuICAgIHBvcnRzLnZhbHVlID0gcmVzdWx0Lm1hcCgoeCkgPT4geC5rZXkpLmpvaW4oXCIsXCIpO1xuICAgIHNob3dfcG9ydF9mZWVkYmFjay52YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHNob3dfcG9ydF9mZWVkYmFjay52YWx1ZSA9IHRydWU7XG4gICAgcG9ydHMudmFsdWUgPSBcIlwiO1xuICAgIC8qIFJlbW92ZSB0aGUgbWVzc2FnZSBhZnRlciA1IHNlY29uZHMhICovXG4vKiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNob3dfcG9ydF9mZWVkYmFjay52YWx1ZSA9IGZhbHNlO1xuICAgIH0sIDUwMDApO1xuICB9XG4gIGFjdGl2YXRlX3NwaW5uZXIudmFsdWUgPSBmYWxzZTtcbn1cbiovXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBtZXRyaWNzTG9hZGVkIH0pO1xuPC9zY3JpcHQ+XG4iLCJcbmV4cG9ydCBjb25zdCBjb2x1bW5zX2Zvcm1hdHRlciA9IChjb2x1bW5zLCBzY2FuX3R5cGVfbGlzdCwgaXNfcmVwb3J0LCBpZmlkKSA9PiB7XG4gIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgZG93bmxvYWQ6IHRydWUsXG4gICAgICAgIHNob3dfcmVzdWx0OiB0cnVlXG4gICAgICB9O1xuXG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcImhvc3RcIjogKGhvc3QsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIGhvc3RfZihob3N0LHJvdyxpZmlkKTtcbiAgICB9LFxuICAgIFwic2Nhbl90eXBlXCI6IChzY2FuX3R5cGUsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIHNjYW5fdHlwZV9mKHNjYW5fdHlwZSwgcm93LCBzY2FuX3R5cGVfbGlzdCk7XG4gICAgfSxcbiAgICBcImxhc3Rfc2NhblwiOiAobGFzdF9zY2FuLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBsYXN0X3NjYW5fZihsYXN0X3NjYW4sIHJvdyk7XG4gICAgfSxcblxuICAgIFwiZHVyYXRpb25cIjogKGxhc3Rfc2Nhbiwgcm93KSA9PiB7XG4gICAgICByZXR1cm4gZHVyYXRpb25fZihsYXN0X3NjYW4sIHJvdyk7XG4gICAgfSxcbiAgICBcInNjYW5fZnJlcXVlbmN5XCIgOiAoc2Nhbl9mcmVxdWVuY3kpID0+IHtcbiAgICAgIHJldHVybiBzY2FuX2ZyZXF1ZW5jeV9mKHNjYW5fZnJlcXVlbmN5KTtcbiAgICB9LCBcbiAgICBcImlzX29rX2xhc3Rfc2NhblwiOiAoaXNfb2tfbGFzdF9zY2FuKSA9PiB7XG4gICAgICByZXR1cm4gaXNfb2tfbGFzdF9zY2FuX2YoaXNfb2tfbGFzdF9zY2FuKTtcbiAgICAgIFxuICAgIH0sXG4gICAgXCJtYXhfc2NvcmVfY3ZlXCI6IChtYXhfc2NvcmVfY3ZlLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBtYXhfc2NvcmVfY3ZlX2YobWF4X3Njb3JlX2N2ZSwgcm93KTtcbiAgICB9LFxuICAgIFwidGNwX3BvcnRzXCI6ICh0Y3BfcG9ydHMsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0c19mKHRjcF9wb3J0cywgcm93KTtcbiAgICAgIFxuICAgIH0sXG4gICAgXCJ1ZHBfcG9ydHNcIjogKHVkcF9wb3J0cywgcm93KSA9PiB7XG4gICAgICByZXR1cm4gdWRwX3BvcnRzX2YodWRwX3BvcnRzLCByb3cpO1xuICAgIH0sXG4gICAgXCJudW1fdnVsbmVyYWJpbGl0aWVzX2ZvdW5kXCI6IChudW1fdnMsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIG51bV92dWxuX2ZvdW5kX2YobnVtX3ZzLHJvdyk7XG5cbiAgICB9XG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICBpZiAoYy5pZCA9PSBcImFjdGlvbnNcIikge1xuICAgICAgICAgICAgXG4gICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgIFxuICAgICAgICBiLmZfbWFwX2NsYXNzID0gKGN1cnJlbnRfY2xhc3MsIHJvdykgPT4geyBcbiAgICAgICAgICBjdXJyZW50X2NsYXNzID0gY3VycmVudF9jbGFzcy5maWx0ZXIoKGNsYXNzX2l0ZW0pID0+IGNsYXNzX2l0ZW0gIT0gXCJsaW5rLWRpc2FibGVkXCIpO1xuICAgICAgICAgIC8vIEZJWCBNRSB3aXRoIFVEUCBwb3J0cyBjaGVja1xuICAgICAgICAgIGlmKChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDMgfHwgcm93LmlzX29rX2xhc3Rfc2NhbiA9PSBudWxsIHx8IChyb3cubGFzdF9zY2FuID09IG51bGwgfHwgKChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lID09IG51bGwpKSkgKSAmJiB2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRfY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7IFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY3VycmVudF9jbGFzcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBjb2x1bW5zO1xufTtcblxuZXhwb3J0IGNvbnN0IG51bV92dWxuX2ZvdW5kX2YgPSAobnVtX3Z1bG5fZm91bmQsIHJvdykgPT4ge1xuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gICAgcmV0dXJuIG51bV92dWxuX2ZvdW5kO1xuICB9XG4gIHJldHVybiBcIlwiO1xuXG59XG5leHBvcnQgY29uc3QgbWF4X3Njb3JlX2N2ZV9mID0gKG1heF9zY29yZV9jdmUsIHJvdykgPT4ge1xuICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gICAgY29uc3Qgc2NvcmUgPSBOdW1iZXIobWF4X3Njb3JlX2N2ZSk7XG4gICAgbGV0IGZvbnRfY29sb3IgPSBcIlwiO1xuICBcbiAgICBpZiAobWF4X3Njb3JlX2N2ZSAhPSBudWxsKSB7XG4gIFxuICAgICAgaWYgKHNjb3JlID09IDApIHtcbiAgICAgICAgZm9udF9jb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgIH0gZWxzZSBpZihzY29yZSA8IDMuOSkge1xuICAgICAgICBmb250X2NvbG9yID0gXCJncmV5XCI7XG4gICAgICB9IGVsc2UgaWYoc2NvcmUgPCA3KSB7XG4gICAgICAgIGZvbnRfY29sb3IgPSBcInllbGxvd1wiO1xuICAgICAgfSBlbHNlICB7XG4gICAgICAgIGZvbnRfY29sb3IgPSBcInJlZFwiO1xuICAgICAgfSBcbiAgXG4gICAgICBpZiAoc2NvcmUgIT0gMCkge1xuICAgICAgICBsYWJlbCA9IGA8Rk9OVCBDT0xPUj0ke2ZvbnRfY29sb3J9PiR7bWF4X3Njb3JlX2N2ZX1gO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIFxuXG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5cbmV4cG9ydCBjb25zdCBzY2FuX3R5cGVfZiA9IChzY2FuX3R5cGUsIHJvdywgc2Nhbl90eXBlX2xpc3QpID0+IHtcbiAgaWYgKHNjYW5fdHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IGxhYmVsID0gc2Nhbl90eXBlXG4gICAgY29uc3QgaTE4bl9uYW1lID0gXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2Nhbl90eXBlX2xpc3QuXCIrc2Nhbl90eXBlO1xuICAgIGxhYmVsID0gaTE4bihpMThuX25hbWUpO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbGFzdF9zY2FuX2YgPSAobGFzdF9zY2FuLCByb3cpID0+IHtcbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMykge1xuICAgIHJldHVybiBgYDtcbiAgfVxuICBpZiAobGFzdF9zY2FuICE9PSB1bmRlZmluZWQgJiYgbGFzdF9zY2FuLnRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsYXN0X3NjYW4udGltZTtcbiAgfSBlbHNlIGlmIChsYXN0X3NjYW4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsYXN0X3NjYW47XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90X3lldFwiKTtcbiAgfVxufSBcblxuZXhwb3J0IGNvbnN0IGR1cmF0aW9uX2YgPSAobGFzdF9zY2FuLCByb3cpID0+IHtcbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMyApIHtcbiAgICByZXR1cm4gYGA7XG4gIH1cbiAgaWYgKHJvdy5sYXN0X3NjYW4gIT09IHVuZGVmaW5lZCAmJiByb3cubGFzdF9zY2FuLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcm93Lmxhc3Rfc2Nhbi5kdXJhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3RfeWV0XCIpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzY2FuX2ZyZXF1ZW5jeV9mID0gKHNjYW5fZnJlcXVlbmN5KSA9PiB7XG4gIGxldCBsYWJlbCA9IFwiXCI7XG4gIGlmIChzY2FuX2ZyZXF1ZW5jeSA9PSBudWxsIHx8IHNjYW5fZnJlcXVlbmN5ID09IFwiZGlzYWJsZWRcIikge1xuICAgIHJldHVybiBcIlwiO1xuICB9IGVsc2UgaWYgKHNjYW5fZnJlcXVlbmN5ID09IFwiMWRheVwiKSB7XG4gICAgbGFiZWwgPSAgaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kYWlseVwiKTtcbiAgfSBlbHNlIHtcbiAgICBsYWJlbCA9ICBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLndlZWtseVwiKTtcbiAgfVxuICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG59XG5cbmV4cG9ydCBjb25zdCBpc19va19sYXN0X3NjYW5fZiA9IChpc19va19sYXN0X3NjYW4pID0+IHtcbiAgbGV0IGxhYmVsID0gXCJcIlxuICBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDIpIHtcbiAgICAvLyBzY2hlZHVsZWRcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2NoZWR1bGVkXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYXJrXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDQpIHtcbiAgICAvLyBub3Qgc2Nhbm5lZFxuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2FubmluZ1wiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctaW5mb1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gOyBcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gMyB8fCBpc19va19sYXN0X3NjYW4gPT0gbnVsbCkge1xuICAgIC8vIG5vdCBzY2FubmVkXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdF9zY2FubmVkXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1wcmltYXJ5XCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDEpIHtcbiAgICAvLyBzdWNjZXNzXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnN1Y2Nlc3NcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXN1Y2Nlc3NcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gMCkge1xuICAgIC8vIGVycm9yXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmVycm9yXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYW5nZXJcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gNSkge1xuICAgIC8vIHdhcm5pbmcgLT4gZmFpbGVkXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmZhaWxlZFwiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctd2FybmluZ1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xuICB9IFxufVxuXG5jb25zdCBwb3J0c19saXN0X3N0cmluZyA9IChwb3J0X2xpc3QpID0+IHtcbiAgbGV0IHBvcnRzX3N0cmluZyA9IFwiXCI7XG4gIGlmIChwb3J0X2xpc3QgIT0gbnVsbCkge1xuICAgIHBvcnRfbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihwb3J0c19zdHJpbmcgPT0gXCJcIikge1xuICAgICAgICBwb3J0c19zdHJpbmcgPSBpdGVtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9ydHNfc3RyaW5nICs9IGAsICR7aXRlbX1gO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBvcnRzX3N0cmluZztcbn1cblxuY29uc3QgZ2V0X251bV9vcGVuX3BvcnRzX2ljb24gPSAoZGlmZl9jYXNlLCB1bnVzZWRfcG9ydF9saXN0LCBmaWx0ZXJlZF9wb3J0X2xpc3QpID0+IHtcblxuICBsZXQgbGFiZWwgPSBudWxsO1xuICBzd2l0Y2goZGlmZl9jYXNlKSB7XG4gICAgY2FzZSA0OiB7XG4gICAgICBsZXQgdW51c2VkX3BvcnRfbGlzdF9zdHJpbmcgPSBwb3J0c19saXN0X3N0cmluZyh1bnVzZWRfcG9ydF9saXN0KTtcbiAgICAgIGxhYmVsID0gYCA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZ2hvc3RcIiB0aXRsZT0nJHt1bnVzZWRfcG9ydF9saXN0X3N0cmluZ30nPjwvaT48L3NwYW4+PC9kaXY+YDtcbiAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6IHtcbiAgICAgIGxldCBmaWx0ZXJlZF9wb3J0c19saXN0X3N0cmluZyA9IHBvcnRzX2xpc3Rfc3RyaW5nKGZpbHRlcmVkX3BvcnRfbGlzdCk7XG4gICAgICBsYWJlbCA9IGAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbHRlclwiIHRpdGxlPScke2ZpbHRlcmVkX3BvcnRzX2xpc3Rfc3RyaW5nfSc+PC9pPjwvc3Bhbj5gO1xuICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn1cblxuZXhwb3J0IGNvbnN0IHVkcF9wb3J0c19mID0gKHVkcF9wb3J0cywgcm93KSA9PiB7XG4gIGlmICh1ZHBfcG9ydHMgPT0gMCAmJiByb3cudWRwX3BvcnRzID09IDAgJiYgcm93LnNjYW5fdHlwZS5jb250YWlucyhcInVkcFwiKSkge1xuICAgIHVkcF9wb3J0cyA9IHJvdy5udW1fb3Blbl9wb3J0cztcbiAgfVxuICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gIGlmICh1ZHBfcG9ydHMgPT0gbnVsbCB8fCB1ZHBfcG9ydHMgPD0gMCkge1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkpIHtcbiAgXG4gICAgbGFiZWwgPSBgJHt1ZHBfcG9ydHN9YDtcblxuICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcblxuICAgICAgY29uc3QgbnVtX3BvcnRzX2ljb24gPSBnZXRfbnVtX29wZW5fcG9ydHNfaWNvbihyb3cudWRwX3BvcnRzX2Nhc2Uscm93LnVkcF9wb3J0c191bnVzZWQsIHJvdy51ZHBfZmlsdGVyZWRfcG9ydHMpO1xuICAgICAgaWYobnVtX3BvcnRzX2ljb24gIT0gbnVsbCkge1xuICAgICAgICBsYWJlbCArPSBudW1fcG9ydHNfaWNvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59XG5cblxuZXhwb3J0IGNvbnN0IHRjcF9wb3J0c19mID0gKHRjcF9wb3J0cywgcm93KSA9PiB7XG4gIGlmICh0Y3BfcG9ydHMgPT0gMCAmJiByb3cudGNwX3BvcnRzID09IDAgJiYgcm93LnNjYW5fdHlwZS5jb250YWlucyhcInRjcFwiKSkge1xuICAgIHRjcF9wb3J0cyA9IHJvdy5udW1fb3Blbl9wb3J0cztcbiAgfVxuICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gIGlmICh0Y3BfcG9ydHMgPT0gbnVsbCB8fCB0Y3BfcG9ydHMgPD0gMCkge1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkpIHtcblxuICBcbiAgICBsYWJlbCA9IGAke3RjcF9wb3J0c31gO1xuXG4gICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuXG4gICAgICBjb25zdCBudW1fcG9ydHNfaWNvbiA9IGdldF9udW1fb3Blbl9wb3J0c19pY29uKHJvdy50Y3BfcG9ydHNfY2FzZSxyb3cudGNwX3BvcnRzX3VudXNlZCwgcm93LnRjcF9wb3J0c19maWx0ZXJlZCk7XG4gICAgICBpZihudW1fcG9ydHNfaWNvbiAhPSBudWxsKSB7XG4gICAgICAgIGxhYmVsICs9IG51bV9wb3J0c19pY29uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn1cblxuZXhwb3J0IGNvbnN0IHRjcF9wb3J0X2YgPSAocG9ydCwgcm93KSA9PiB7XG4gIGxldCByc3AgPSBwb3J0O1xuICBpZiAocm93LnBvcnRfbGFiZWwgIT0gbnVsbCAmJiByb3cucG9ydF9sYWJlbCAhPSBwb3J0KSB7XG4gICAgcnNwICs9IGAgKCR7cm93LnBvcnRfbGFiZWx9KWBcbiAgfVxuICByZXR1cm4gcnNwO1xufVxuY29uc3QgZmluZF9iYWRnZSA9IChwb3J0LCByb3csIHBvcnRzX3VudXNlZCwgcG9ydHNfZmlsdGVyZWQpID0+IHtcbiAgbGV0IHJlc3VsdCA9ICcnXG4gIGlmIChwb3J0c191bnVzZWQgIT0gbnVsbCkge1xuICAgIHBvcnRzX3VudXNlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihwb3J0ID09IE51bWJlcihpdGVtKSApIHtcbiAgICAgICAgcmVzdWx0ID0gXCJ1bnVzZWRcIjtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaWYocmVzdWx0ICE9ICcnKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChwb3J0c19maWx0ZXJlZCAhPSBudWxsKSB7XG4gICAgcG9ydHNfZmlsdGVyZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYocG9ydCA9PSBOdW1iZXIoaXRlbSkpIHtcbiAgICAgICAgcmVzdWx0ID0gXCJmaWx0ZXJlZFwiO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBnZXRfaWNvbl9jb21wb25lbnQgPSAoaXRlbSwgcm93LCBwb3J0c191bnVzZWQsIHBvcnRzX2ZpdGVyZWQpID0+IHtcbiAgbGV0IHBvcnQgPSBpdGVtLnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi9cIilbMF07XG4gIGxldCBwb3J0X2JhZGdlID0gZmluZF9iYWRnZShOdW1iZXIocG9ydCksIHJvdywgcG9ydHNfdW51c2VkLCBwb3J0c19maXRlcmVkKTtcbiAgbGV0IGljb25fY29tcCA9IG51bGw7XG4gIHN3aXRjaCAocG9ydF9iYWRnZSkge1xuICAgIGNhc2UgJ3VudXNlZCc6IFxuICAgICAgICBpY29uX2NvbXAgPSBgICZuYnNwOzxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCIgdGl0bGU9JyR7aTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnVudXNlZF9wb3J0Jyl9Jz48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWdob3N0XCI+PC9pPjwvc3Bhbj5gO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmlsdGVyZWQnOlxuICAgICAgICBpY29uX2NvbXAgPSBgICZuYnNwOzxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctcHJpbWFyeVwiIHRpdGxlPScke2kxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5maWx0ZXJlZF9wb3J0Jyl9Jz48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbHRlclwiPjwvaT48L3NwYW4+YDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6IFxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gaWNvbl9jb21wO1xufVxuXG5leHBvcnQgY29uc3QgdGNwX3VkcF9wb3J0c19saXN0X2YgPSAodGNwX3BvcnRzX2xpc3QsdWRwX3BvcnRzX2xpc3QsIHJvdykgPT4ge1xuICBsZXQgcG9ydHNfbWFwID0gbmV3IE1hcCgpO1xuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkgJiYgdGNwX3BvcnRzX2xpc3QgIT0gbnVsbCApIHtcbiAgICBjb25zdCBwb3J0cyA9IHRjcF9wb3J0c19saXN0LnNwbGl0KFwiLFwiKTtcbiAgICBsZXQgbGFiZWwgPSBcIlwiO1xuICAgIGxldCBwb3J0X2lkID0gXCJcIjtcbiAgICBwb3J0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihpdGVtICE9IG51bGwgJiYgaXRlbSAhPSAnJykge1xuXG4gICAgICAgIGxhYmVsID0gaXRlbTtcbiAgICAgICAgcG9ydF9pZCA9IGl0ZW07XG4gICAgICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcbiAgICAgICAgICBjb25zdCBpY29uX2NvbXAgPSBnZXRfaWNvbl9jb21wb25lbnQoaXRlbSwgcm93LCByb3cudGNwX3BvcnRzX3VudXNlZCwgcm93LnRjcF9wb3J0c19maWx0ZXJlZCk7XG4gICAgICAgICAgaWYoaWNvbl9jb21wICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IGljb25fY29tcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxhYmVsID0gYDxsaT4ke2xhYmVsfTwvbGk+YDtcblxuICAgICAgICBwb3J0c19tYXAuc2V0KGl0ZW0sICB7cG9ydF9sYWJlbCA6bGFiZWwsIHBvcnRfaWQ6IE51bWJlcihwb3J0X2lkLnNwbGl0KFwiL1wiKVswXSl9KVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHJvdy50Y3BfcG9ydHNfZmlsdGVyZWQgIT0gbnVsbCkge1xuICAgICAgcm93LnRjcF9wb3J0c19maWx0ZXJlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG5cbiAgICAgICAgaXRlbSArPSBgL3RjcGA7XG4gICAgICAgIGxhYmVsID0gaXRlbTtcbiAgICAgICAgcG9ydF9pZCA9IGl0ZW07XG4gICAgICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcbiAgICAgICAgICBsYWJlbCArPSBgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctcHJpbWFyeVwiIHRpdGxlPScke2kxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5maWx0ZXJlZF9wb3J0Jyl9Jz48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbHRlclwiPjwvaT48L3NwYW4+YDtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCA9IGA8bGk+JHtsYWJlbH08L2xpPmA7XG4gICAgICAgIHBvcnRzX21hcC5zZXQoaXRlbSwgIHtwb3J0X2xhYmVsIDpsYWJlbCwgcG9ydF9pZDogTnVtYmVyKHBvcnRfaWQuc3BsaXQoXCIvXCIpWzBdKX0pO1xuXG5cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgfSBcblxuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkgJiYgdWRwX3BvcnRzX2xpc3QgIT0gbnVsbCkge1xuICAgIGNvbnN0IHBvcnRzID0gdWRwX3BvcnRzX2xpc3Quc3BsaXQoXCIsXCIpO1xuXG4gICAgbGV0IGxhYmVsID0gXCJcIjtcbiAgICBsZXQgcG9ydF9pZCA9IFwiXCI7XG4gICAgcG9ydHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbSAhPSBudWxsICYmIGl0ZW0gIT0gJycpIHtcblxuICAgICAgICBsYWJlbCA9IGl0ZW07XG4gICAgICAgIHBvcnRfaWQgPSBpdGVtO1xuICAgICAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG4gICAgICAgICAgY29uc3QgaWNvbl9jb21wID0gZ2V0X2ljb25fY29tcG9uZW50KGl0ZW0sIHJvdywgcm93LnVkcF9wb3J0c191bnVzZWQsIHJvdy51ZHBfcG9ydHNfZmlsdGVyZWQpO1xuICAgICAgICAgIGlmKGljb25fY29tcCAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSBpY29uX2NvbXA7XG4gICAgICAgICAgfSAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwgPSBgPGxpPiR7bGFiZWx9PC9saT5gO1xuXG4gICAgICAgIHBvcnRzX21hcC5zZXQoaXRlbSwge3BvcnRfbGFiZWwgOmxhYmVsLCBwb3J0X2lkOiBOdW1iZXIocG9ydF9pZC5zcGxpdChcIi9cIilbMF0pfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocm93LnVkcF9maWx0ZXJlZF9wb3J0cyAhPSBudWxsKSB7XG4gICAgICByb3cudWRwX3BvcnRzX2ZpbHRlcmVkLmZvckVhY2goKGl0ZW0pID0+IHtcblxuICAgICAgICBpdGVtICs9IGAvdWRwYDtcbiAgICAgICAgbGFiZWwgPSBpdGVtO1xuICAgICAgICBwb3J0X2lkID0gaXRlbTtcbiAgICAgICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuICAgICAgICAgIGxhYmVsICs9IGAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1wcmltYXJ5XCIgdGl0bGU9JyR7aTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmZpbHRlcmVkX3BvcnQnKX0nPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsdGVyXCI+PC9pPjwvc3Bhbj5gO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsID0gYDxsaT4ke2l0ZW19PC9saT5gO1xuICAgICAgICBwb3J0c19tYXAuc2V0KGl0ZW0sIHtwb3J0X2xhYmVsOiBsYWJlbCwgcG9ydF9pZCA6IE51bWJlcihwb3J0X2lkLnNwbGl0KFwiL1wiKVswXSl9KVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGNvbnRlbnRfbGFiZWwgPSBcIlwiXG4gIHBvcnRzX21hcCA9IG5ldyBNYXAoWy4uLnBvcnRzX21hcC5lbnRyaWVzKCldLnNvcnQoKGEsYikgPT4gYVsxXS5wb3J0X2lkLWJbMV0ucG9ydF9pZCkpO1xuXG4gIHBvcnRzX21hcC5mb3JFYWNoKCh2YWx1ZXMsIGtleXMpID0+IHtcbiAgICBjb250ZW50X2xhYmVsICs9IGAke3ZhbHVlcy5wb3J0X2xhYmVsfWA7XG4gIH0pXG5cblxuICByZXR1cm4gY29udGVudF9sYWJlbDtcbn1cblxuXG5leHBvcnQgY29uc3QgaG9zdHNfZiA9IChob3N0cywgcm93KSA9PiB7XG5cbiAgY29uc3QgaG9zdHNfbGlzdCA9IGhvc3RzLnNwbGl0KFwiLCBcIik7XG4gIGxldCBsYWJlbCA9IFwiXCI7XG4gIGxldCBob3N0c19tYXAgPSBuZXcgTWFwKCk7XG4gIGhvc3RzX2xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGxldCBob3N0X2luZm8gPSBpdGVtLnNwbGl0KFwifFwiKTtcblxuICAgIGhvc3RzX21hcC5zZXQoXG4gICAgICBob3N0X2luZm8ubGVuZ3RoID4gNSAmJiBob3N0X2luZm9bNV0gIT0gbnVsbCAmJiBob3N0X2luZm9bNV0gIT0gXCJcIiA/IGhvc3RfaW5mb1s1XSA6IGhvc3RfaW5mb1swXSwgXG4gICAgICB7XG4gICAgICAgIHNjYW5fdHlwZTogaG9zdF9pbmZvWzFdLFxuICAgICAgICBpcDogaG9zdF9pbmZvWzBdLFxuICAgICAgICBkYXRlOiBob3N0X2luZm9bMl0ucmVwbGFjZShcIiBcIixcIl9cIiksXG4gICAgICAgIGlzX2lwdjQ6IGhvc3RfaW5mb1szXSA9PSAndHJ1ZScsXG4gICAgICAgIGVwb2NoOiBob3N0X2luZm9bNF1cbiAgICAgIH0pXG4gIH0pO1xuXG4gIGhvc3RzX21hcCA9IG5ldyBNYXAoWy4uLmhvc3RzX21hcC5lbnRyaWVzKCldLnNvcnQoKSk7XG5cblxuICBob3N0c19tYXAuZm9yRWFjaCgodmFsdWVzLCBrZXlzKSA9PiB7XG4gICAgbGV0IHVybCA9IGJ1aWxkX2hvc3RfdG9fc2Nhbl9yZXBvcnRfdXJsKHZhbHVlcy5pcCwgdmFsdWVzLnNjYW5fdHlwZSwgdmFsdWVzLmRhdGUsIHZhbHVlcy5lcG9jaCk7XG5cbiAgICBpZiAodmFsdWVzLmlzX2lwdjQpIHtcbiAgICAgIGxhYmVsICs9IGA8bGk+IDxhIGhyZWY9XCIke3VybH1cIj4ke2tleXN9PC9hPjwvbGk+YCA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhYmVsICs9IGA8bGk+IDxhIGhyZWY9XCIke3VybH1cIj4ke2tleXN9IDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCI+JHtpMThuKCdpcHY2Jyl9PC9zcGFuPjwvYT48L2xpPmAgO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5jb25zdCBidWlsZF9ob3N0X3RvX3NjYW5fcmVwb3J0X3VybCA9IChob3N0LCBzY2FuX3R5cGUsIGRhdGUsIGVwb2NoKSA9PiB7XG4gIGNvbnN0IGFjdGl2ZV9tb25pdG9yaW5nX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdnVsbmVyYWJpbGl0eV9zY2FuLmx1YWA7XG5cbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBob3N0LFxuICAgIHNjYW5fdHlwZTogc2Nhbl90eXBlLFxuICAgIHNjYW5fcmV0dXJuX3Jlc3VsdDogdHJ1ZSxcbiAgICBwYWdlOiBcInNob3dfcmVzdWx0XCIsXG4gICAgc2Nhbl9kYXRlOiBkYXRlLFxuICAgIGVwb2NoOiBlcG9jaFxuXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgcmV0dXJuIGAke2FjdGl2ZV9tb25pdG9yaW5nX3VybH0/JHt1cmxfcGFyYW1zfWA7XG59XG5cbmV4cG9ydCBjb25zdCBob3N0X2YgPSAoaG9zdCwgcm93LCBpZmlkKSA9PiB7XG4gIGxldCBsYWJlbCA9IGhvc3Q7XG4gIGxldCBob3N0X25vdF9yZWFjaGFibGUgPSByb3cuaXNfb2tfbGFzdF9zY2FuID09IDUgJiYgcm93LmlzX2Rvd24gIT0gbnVsbCAmJiByb3cuaXNfZG93biA9PSB0cnVlO1xuICBpZiAoKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSB8fCBob3N0X25vdF9yZWFjaGFibGUpICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gICAgbGV0IHVybCA9IGJ1aWxkX2hvc3RfdG9fc2Nhbl9yZXBvcnRfdXJsKGhvc3QsIHJvdy5zY2FuX3R5cGUsIHJvdy5sYXN0X3NjYW4udGltZS5yZXBsYWNlKFwiIFwiLFwiX1wiKSwgcm93Lmxhc3Rfc2Nhbi5lcG9jaCk7XG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7aG9zdH08L2E+YDtcbiAgICBpZiAoaG9zdF9ub3RfcmVhY2hhYmxlKSB7XG4gICAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtob3N0fSA8aSBjbGFzcz1cXFwiZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXFxcIiBzdHlsZT0nY29sb3I6ICNCOTRBNDg7Jz48L2k+IDwvYT5gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGFiZWw7XG59XG5cbmV4cG9ydCBjb25zdCBjdmVzX2YgPSAoY3Zlcywgcm93KSA9PiB7XG4gIGxldCBsYWJlbCA9IFwiXCI7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkgJiYgY3ZlcyAhPSBudWxsKSB7XG5cbiAgICBsZXQgY3Zlc19tYXAgPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBtYXAgdG8gc29ydCBjdmVzIG9uIHNjb3JlXG4gICAgY3Zlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBsZXQgY3ZlX2RldGFpbHMgPSBpdGVtLnNwbGl0KFwifFwiKTtcbiAgICAgIGxldCBhY3R1YWxfc2NvcmUgPSAwO1xuICAgICAgaWYgKGN2ZV9kZXRhaWxzLmxlbmd0aD4gMSkge1xuICAgICAgICBhY3R1YWxfc2NvcmUgPSBOdW1iZXIoY3ZlX2RldGFpbHNbMV0pO1xuICAgICAgfVxuICBcbiAgICAgIGN2ZXNfbWFwLnNldChcbiAgICAgICAgY3ZlX2RldGFpbHNbMF0sIFxuICAgICAgICBhY3R1YWxfc2NvcmUpXG4gICAgfSk7XG4gIFxuICAgIGN2ZXNfbWFwID0gbmV3IE1hcChbLi4uY3Zlc19tYXAuZW50cmllcygpXS5zb3J0KChhLGIpID0+IGJbMV0gLSBhWzFdKSk7XG5cbiAgICAvLyByZXR1cm4gZmlyc3QgMTAwXG4gICAgY3Zlc19tYXAuZm9yRWFjaCgoc2NvcmUsIGtleSkgPT4ge1xuICAgICAgaWYgKGluZGV4IDwgMTAwKSB7XG5cbiAgICAgICAgICBsZXQgYmFkZ2VfdHlwZSA9IFwiXCI7XG4gICAgICAgICAgaWYgKHNjb3JlID09IDApIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXN1Y2Nlc3NcIjtcbiAgICAgICAgICB9IGVsc2UgaWYoc2NvcmUgPCAzLjkpIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXNlY29uZGFyeVwiO1xuICAgICAgICAgIH0gZWxzZSBpZihzY29yZSA8IDcpIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXdhcm5pbmdcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFkZ2VfdHlwZSA9IFwiYmctZGFuZ2VyXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHVybCA9IG50b3BuZ191dGlsaXR5LmdldF9jdmVfZGV0YWlsc191cmwoa2V5LCByb3cuc2Nhbl90eXBlKTtcbiAgICAgICAgICBsYWJlbCArPSBgPGxpICB0aXRsZT0nJHtpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydC5jdmVzX3RpdGxlXCIpfSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJHt1cmx9XCI+PHNwYW4gY2xhc3M9XCJiYWRnZSAke2JhZGdlX3R5cGV9XCI+JHtrZXl9IDwvc3Bhbj48L2E+IFxuICAgICAgICAgICAgICAgICAgICAgICAgKCR7c2NvcmV9KVxuICAgICAgICAgICAgICAgICAgICA8L2xpPmA7XG5cbiAgICAgICAgXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG4iLCIvKlxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4gKi9cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbmZ1bmN0aW9uIGZvcm1hdF9udW1fZm9yX3NvcnQobnVtKSB7XG4gIGlmKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAvKiBDaGVjayBpZiBpdCdzIGEgbnVtYmVyICovXG4gICAgcmV0dXJuIG51bTtcbiAgfSBlbHNlIGlmKHR5cGVvZiBudW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZihudW0gPT0gXCJcIikge1xuICAgICAgLyogU2FmZXR5IGNoZWNrICovXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgLyogSWYgaXQncyBhIHN0cmluZyBjb252ZXJ0IGl0IGludG8gYSBudW1iZXIgKi9cbiAgICBudW0gPSBudW0uc3BsaXQoJywnKS5qb2luKFwiXCIpO1xuICAgIG51bSA9IHBhcnNlSW50KG51bSk7XG4gIH0gZWxzZSB7XG4gICAgLyogSW4gY2FzZSBib3RoIGZhaWxlZCwgY29udmVydCBudW0gdG8gMCAqL1xuICAgIG51bSA9IDA7XG4gIH1cblxuICByZXR1cm4gbnVtO1xufVxuXG4vLyBtYXggbnVtYmVyIHZhbHVlIGZvciBzb3J0IG51bWJlciB3aXRoIG5vcm1hbGl6ZSBvcHRpb24gXG4vLyBmb3IgY2FzZXM6IGxhc3Qgc2NhbiBhbmQgbGFzdCBkdXJhdGlvbiBjb2x1bW4gdG8gaGFuZGxlIGVtcHR5IHZhbHVlc1xuY29uc3QgTUFYX05VTUJFUl9WQUxVRSA9IDk5OTk5OTk5OTk5O1xuXG5jb25zdCBub3JtYWxpemVfbnVtYmVyX3ZhbHVlID0gZnVuY3Rpb24obG93ZXJfdmFsdWUsIHZhbCwgc29ydCkge1xuICBpZiAodmFsID09IGxvd2VyX3ZhbHVlKSB7XG4gICAgaWYgKHNvcnQgPT0gMSkge1xuICAgICAgdmFsID0gTUFYX05VTUJFUl9WQUxVRTtcbiAgICB9XG4gIH0gICAgXG4gIHJldHVybiB2YWw7IFxufVxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIFNvcnQgYnkgTmFtZSAqL1xuY29uc3Qgc29ydEJ5TmFtZSA9IGZ1bmN0aW9uKHZhbF8xLCB2YWxfMiwgc29ydCkge1xuICBpZiAoc29ydCA9PSAxKSB7XG4gICAgcmV0dXJuIHZhbF8xPy5sb2NhbGVDb21wYXJlKHZhbF8yKTtcbiAgfVxuICByZXR1cm4gdmFsXzI/LmxvY2FsZUNvbXBhcmUodmFsXzEpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogU29ydCBieSBJUCBBZGRyZXNzZXMgKi9cbmNvbnN0IHNvcnRCeUlQID0gZnVuY3Rpb24odmFsXzEsIHZhbF8yLCBzb3J0KSB7XG4gIHZhbF8xID0gTnRvcFV0aWxzLmNvbnZlcnRJUEFkZHJlc3ModmFsXzEpO1xuICB2YWxfMiA9IE50b3BVdGlscy5jb252ZXJ0SVBBZGRyZXNzKHZhbF8yKTtcbiAgaWYgKHNvcnQgPT0gMSkge1xuICAgIHJldHVybiB2YWxfMS5sb2NhbGVDb21wYXJlKHZhbF8yKTtcbiAgfVxuICByZXR1cm4gdmFsXzIubG9jYWxlQ29tcGFyZSh2YWxfMSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBTb3J0IGJ5IE51bWJlciAqL1xuY29uc3Qgc29ydEJ5TnVtYmVyID0gZnVuY3Rpb24odmFsXzEsIHZhbF8yLCBzb3J0KSB7XG4gIC8qIEl0J3MgYW4gYXJyYXkgKi9cbiAgdmFsXzEgPSBmb3JtYXRfbnVtX2Zvcl9zb3J0KHZhbF8xKTtcbiAgdmFsXzIgPSBmb3JtYXRfbnVtX2Zvcl9zb3J0KHZhbF8yKTtcblxuICBpZiAoc29ydCA9PSAxKSB7XG4gICAgcmV0dXJuIHZhbF8xIC0gdmFsXzI7XG4gIH1cbiAgcmV0dXJuIHZhbF8yIC0gdmFsXzE7IFxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogU29ydCBieSBOdW1iZXIgYWZ0ZXIgdmFsdWVzIG5vcm1hbGl6YXRpb24gKi9cbmNvbnN0IHNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUgPSBmdW5jdGlvbih2YWxfMSwgdmFsXzIsIHNvcnQsIGxvd2VyX3ZhbHVlKSB7XG4gIHZhbF8xID0gbm9ybWFsaXplX251bWJlcl92YWx1ZShsb3dlcl92YWx1ZSwgdmFsXzEsIHNvcnQpO1xuICB2YWxfMiA9IG5vcm1hbGl6ZV9udW1iZXJfdmFsdWUobG93ZXJfdmFsdWUsIHZhbF8yLCBzb3J0KTtcblxuICByZXR1cm4gc29ydEJ5TnVtYmVyKHZhbF8xLHZhbF8yLHNvcnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuY29uc3Qgc29ydGluZ0Z1bmN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzb3J0QnlJUCxcbiAgICBzb3J0QnlOYW1lLFxuICAgIHNvcnRCeU51bWJlcixcbiAgICBzb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBzb3J0aW5nRnVuY3Rpb25zOyIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IHYtaWY9XCJjbGlja2hvdXNlX2Rpc2FibGVkXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIGFsZXJ0LWRpc21pc3NhYmxlXCI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxzcGFuPiB7eyBlbmFibGVfY2xpY2tob3VzZV90ZXh0IH19PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgdi1pZj1cImF1dG9yZWZyZXNoXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIGFsZXJ0LWRpc21pc3NhYmxlXCI+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtIHRleHQtaW5mbyBtZS0xXCJcbiAgICAgICAgICAgID48L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj4ge3sgaW5fcHJvZ3Jlc3Nfc2Nhbl90ZXh0IH19PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHYtaWY9XCJpbnNlcnRfd2l0aF9zdWNjZXNzXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2VzcyBhbGVydC1kaXNtaXNzYWJsZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXN1Y2Nlc3MgbWUtMVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPiB7eyBpbnNlcnRfdGV4dCB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWlmPVwiYWxyZWFkeV9pbnNlcnRlZFwiXG4gICAgICAgICAgICBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBhbGVydC1kaXNtaXNzYWJsZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWRhbmdlciBtZS0xXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+IHt7IGFscmVhZHlfaW5zZXJ0X3RleHQgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGlkPVwiaG9zdHNfdG9fc2NhblwiPlxuICAgICAgICAgICAgPE1vZGFsRGVsZXRlU2NhbkNvbmZpcm1cbiAgICAgICAgICAgICAgcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIlxuICAgICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIlxuICAgICAgICAgICAgICBAZGVsZXRlX2FsbD1cImRlbGV0ZV9hbGxfcm93c1wiXG4gICAgICAgICAgICAgIEBzY2FuX3Jvdz1cInNjYW5fcm93XCJcbiAgICAgICAgICAgICAgQHNjYW5fYWxsX3Jvd3M9XCJzY2FuX2FsbF9lbnRyaWVzXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvTW9kYWxEZWxldGVTY2FuQ29uZmlybT5cbiAgICAgICAgICAgIDxNb2RhbFVwZGF0ZVBlcmlvZGljaXR5U2NhblxuICAgICAgICAgICAgICByZWY9XCJtb2RhbF91cGRhdGVfcGVyaW9kaXRpY3lfc2NhblwiXG4gICAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX3VwZGF0ZV9wZXJpb2RpY2l0eV9zY2FuXCJcbiAgICAgICAgICAgICAgQHVwZGF0ZT1cInVwZGF0ZV9hbGxfc2Nhbl9mcmVxdWVuY2llc1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L01vZGFsVXBkYXRlUGVyaW9kaWNpdHlTY2FuPlxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZ1xuICAgICAgICAgICAgICByZWY9XCJ0YWJsZV9ob3N0c190b19zY2FuXCJcbiAgICAgICAgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIlxuICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCJcbiAgICAgICAgICAgICAgQHJvd3NfbG9hZGVkPVwib25fdGFibGVfbG9hZGVkXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgcmVmPVwiYWRkX2hvc3RcIlxuICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX2hvc3RcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlciBtdC0zXCI+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICByZWY9XCJkZWxldGVfYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cImRlbGV0ZV9hbGxfZW50cmllc1wiXG4gICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyBkaXNhYmxlZDogdG90YWxfcm93cyA9PSAwIH1cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoXCI+PC9pPlxuICAgICAgICAgICAge3sgX2kxOG4oXCJkZWxldGVfYWxsX2VudHJpZXNcIikgfX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHJlZj1cInNjYW5fYWxsXCJcbiAgICAgICAgICAgIEBjbGljaz1cImNvbmZpcm1fc2Nhbl9hbGxfZW50cmllc1wiXG4gICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtZS0xXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgZGlzYWJsZWQ6IHRvdGFsX3Jvd3MgPT0gMCB9XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1jbG9jay1yb3RhdGUtbGVmdFwiPjwvaT5cbiAgICAgICAgICAgIHt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlX2FsbF9zY2FuXCIpIH19XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfbFwiPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgcmVmPVwidXBkYXRlX2FsbFwiXG4gICAgICAgICAgICAgIEBjbGljaz1cInVwZGF0ZV9hbGxfcGVyaW9kaWNpdHlcIlxuICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IG1lLTFcIlxuICAgICAgICAgICAgICA6Y2xhc3M9XCJ7IGRpc2FibGVkOiB0b3RhbF9yb3dzID09IDAgfVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7XG4gICAgICAgICAgICAgICAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudXBkYXRlX3BlcmlvZGljaXR5X3RpdGxlXCIpXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPiA8L05vdGVMaXN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPE1vZGFsQWRkSG9zdFxuICAgIHJlZj1cIm1vZGFsX2FkZFwiXG4gICAgOmNvbnRleHQ9XCJjb250ZXh0XCJcbiAgICBAYWRkPVwiYWRkX2hvc3RfcmVzdFwiXG4gICAgQGVkaXQ9XCJlZGl0XCJcbiAgICBAY2xvc2VNb2RhbD1cInVwZGF0ZV9tb2RhbF9zdGF0dXMoZmFsc2UpXCJcbiAgICBAb3Blbk1vZGFsPVwidXBkYXRlX21vZGFsX3N0YXR1cyh0cnVlKVwiXG4gICAgQGhpZGRlbj1cInVwZGF0ZV9tb2RhbF9zdGF0dXMoZmFsc2UpXCJcbiAgPlxuICA8L01vZGFsQWRkSG9zdD5cbjwvdGVtcGxhdGU+XG4gIFxuPHNjcmlwdCBzZXR1cD5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZVNjYW5Db25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLXNjYW4tY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxVcGRhdGVQZXJpb2RpY2l0eVNjYW4gfSBmcm9tIFwiLi9tb2RhbC11cGRhdGUtcGVyaW9kaWNpdHktc2Nhbi52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRIb3N0IH0gZnJvbSBcIi4vbW9kYWwtYWRkLXZzLWhvc3QudnVlXCI7XG5pbXBvcnQgeyBjb2x1bW5zX2Zvcm1hdHRlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvdnNfcmVwb3J0X2Zvcm1hdHRlci5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBzb3J0aW5nRnVuY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zb3J0aW5nLXV0aWxzLmpzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIENvbnN0cyAqL1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3Qgbm90ZSA9IGkxOG4oXG4gIFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLmdlbmVyaWNfbm90ZXNfMVwiXG4pLnJlcGxhY2VBbGwoXCIke2h0dHBfcHJlZml4fVwiLCBgJHtodHRwX3ByZWZpeH1gKTtcbmNvbnN0IG5vdGVfbGlzdCA9IFtub3RlXTtcblxuY29uc3QgaW5zZXJ0X3RleHQgPSByZWYoaTE4bihcInNjYW5faG9zdF9pbnNlcnRlZFwiKSk7XG5jb25zdCBhbHJlYWR5X2luc2VydF90ZXh0ID0gcmVmKGkxOG4oXCJzY2FuX2hvc3RfYWxyZWFkeV9pbnNlcnRlZFwiKSk7XG5jb25zdCBpbl9wcm9ncmVzc19zY2FuX3RleHQgPSByZWYoXCJcIik7XG5jb25zdCBlbmFibGVfY2xpY2tob3VzZV90ZXh0ID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZW5hYmxlX2NsaWNraG91c2VcIikpO1xuY29uc3QgdGl0bGVfZGVsZXRlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kZWxldGVfaG9zdF90aXRsZVwiKTtcbmNvbnN0IGJvZHlfZGVsZXRlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kZWxldGVfaG9zdF9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IHRpdGxlX3VwZGF0ZV9wZXJpb2RpY2l0eV9zY2FuID0gaTE4bihcbiAgXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudXBkYXRlX3BlcmlvZGljaXR5X3RpdGxlXCJcbik7XG5cbmNvbnN0IGFkZF9ob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9hZGQvaG9zdC90b19zY2FuLmx1YWA7XG5jb25zdCBlZGl0X2hvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2VkaXQvaG9zdC91cGRhdGVfdmFfc2Nhbl9wZXJpb2QubHVhYDtcbmNvbnN0IHJlbW92ZV9ob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvaG9zdC9kZWxldGVfaG9zdF90b19zY2FuLmx1YWA7XG5jb25zdCBzY2FuX2hvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2V4ZWMvaG9zdC9zY2hlZHVsZV92dWxuZXJhYmlsaXR5X3NjYW4ubHVhYDtcbmNvbnN0IHNjYW5fdHlwZV9saXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC92dWxuZXJhYmlsaXR5X3NjYW5fdHlwZV9saXN0Lmx1YWA7XG5jb25zdCBhY3RpdmVfbW9uaXRvcmluZ191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Z1bG5lcmFiaWxpdHlfc2Nhbi5sdWFgO1xuY29uc3Qgc2Nhbl9yZXN1bHRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3Z1bG5lcmFiaWxpdHlfc2Nhbl9yZXN1bHQubHVhYDtcbmNvbnN0IGNoZWNrX3N0YXR1c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvdnVsbmVyYWJpbGl0eV9zY2FuX3N0YXR1cy5sdWFgO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZihcImhvc3RzX3RvX3NjYW5cIik7XG5jb25zdCB0YWJsZV9ob3N0c190b19zY2FuID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZigpO1xuY29uc3QgbW9kYWxfYWRkID0gcmVmKCk7XG5jb25zdCBtb2RhbF91cGRhdGVfcGVyaW9kaXRpY3lfc2NhbiA9IHJlZigpO1xuY29uc3QgdG90YWxfcm93cyA9IHJlZigwKTtcbmNvbnN0IGluX3Byb2dyZXNzX251bWJlciA9IHJlZihudWxsKTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pO1xuY29uc3Qgcm93X3RvX3NjYW4gPSByZWYoe30pO1xuY29uc3QgYXV0b3JlZnJlc2ggPSByZWYoZmFsc2UpO1xuY29uc3QgbW9kYWxfb3BlbmVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNsaWNraG91c2VfZGlzYWJsZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgaW5zZXJ0X3dpdGhfc3VjY2VzcyA9IHJlZihmYWxzZSk7XG5jb25zdCBhbHJlYWR5X2luc2VydGVkID0gcmVmKGZhbHNlKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbn07XG5jb25zdCBjb250ZXh0ID0gcmVmKHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gIGlzX2VudGVycHJpc2VfbDogcHJvcHMuY29udGV4dC5pc19lbnRlcnByaXNlX2wsXG59KTtcblxubGV0IHNjYW5fdHlwZV9saXN0ID0gW107XG5sZXQgZ2V0X3NjYW5fdHlwZV9saXN0X3YgPSBudWxsO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgZ2V0X3NjYW5fdHlwZV9saXN0X3YgPSBQcm9taXNlLmFsbChbXG4gICAgZ2V0X3NjYW5fdHlwZV9saXN0KCksXG4gICAgY2hlY2tfaW5fcHJvZ3Jlc3Nfc3RhdHVzKCksXG4gIF0pO1xufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGdldF9zY2FuX3R5cGVfbGlzdF92O1xuICBhd2FpdCBtb2RhbF9hZGQudmFsdWUubWV0cmljc0xvYWRlZChcbiAgICBzY2FuX3R5cGVfbGlzdCxcbiAgICBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgcHJvcHMuY29udGV4dC5pc19lbnRlcnByaXNlX2xcbiAgKTtcbiAgaWYgKHByb3BzLmNvbnRleHQuaG9zdCAhPSBudWxsKSB7XG4gICAgbW9kYWxfYWRkLnZhbHVlLnNob3cobnVsbCwgcHJvcHMuY29udGV4dC5ob3N0KTtcbiAgfVxuXG4gIGNsaWNraG91c2VfZGlzYWJsZWQudmFsdWUgPSAhKHByb3BzLmNvbnRleHQuaXNfY2xpY2tob3VzZV9lbmFibGVkKTtcblxuICAvKiBDaGVjayB0aGUgc3RhdHVzIHBlcmlvZGljYWxseSBldmVyeSAxMCBzZWNvbmRzICovXG4gIHNldEludGVydmFsKGNoZWNrX2F1dG9yZWZyZXNoLCAxMDAwMCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gYWRkIGEgbmV3IGhvc3QgdG8gc2NhbiAqL1xuZnVuY3Rpb24gYWRkX2hvc3QoKSB7XG4gIGlmIChwcm9wcy5jb250ZXh0Lmhvc3QgIT0gbnVsbCAmJiBwcm9wcy5jb250ZXh0Lmhvc3QgIT0gXCJcIilcbiAgICBtb2RhbF9hZGQudmFsdWUuc2hvdyhudWxsLCBwcm9wcy5jb250ZXh0Lmhvc3QpO1xuICBlbHNlIG1vZGFsX2FkZC52YWx1ZS5zaG93KCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHJlZnJlc2ggdGFibGUgKi9cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKSB7XG4gIC8qIEl0J3MgaW1wb3J0YW50IHRvIHNldCBhdXRvcmVmcmVzaCB0byBmYWxzZSwgaW4gdGhpcyB3YXkgd2hlbiByZWZyZXNoZWQgXG4gICAgIGFsbCB0aGUgZW50cmllcyBhcmUgZ29pbmcgdG8gYmUgY2hlY2tlZCBhbmQgaWYgYWxsIG9mIHRoZW0gYXJlIG5vdCBzY2FubmluZyBpdCBzdGF5cyBmYWxzZVxuICAgKi9cbiAgaWYgKGRpc2FibGVfbG9hZGluZyAhPSBudWxsKVxuICAgIHRhYmxlX2hvc3RzX3RvX3NjYW4udmFsdWUucmVmcmVzaF90YWJsZShkaXNhYmxlX2xvYWRpbmcpO1xuICBlbHNlIHRhYmxlX2hvc3RzX3RvX3NjYW4udmFsdWUucmVmcmVzaF90YWJsZSh0cnVlKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBhbGwgYnV0dG9ucyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICBjbGlja19idXR0b25fZWRpdF9ob3N0OiBjbGlja19idXR0b25fZWRpdF9ob3N0LFxuICAgIGNsaWNrX2J1dHRvbl9kZWxldGU6IGNsaWNrX2J1dHRvbl9kZWxldGUsXG4gICAgY2xpY2tfYnV0dG9uX3NjYW46IGNsaWNrX2J1dHRvbl9zY2FuLFxuICAgIGNsaWNrX2J1dHRvbl9kb3dubG9hZDogY2xpY2tfYnV0dG9uX2Rvd25sb2FkLFxuICAgIGNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdDogY2xpY2tfYnV0dG9uX3Nob3dfcmVzdWx0LFxuICB9O1xuICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRGVmYXVsdCBzb3J0aW5nLCBieSBkZWZhdWx0IGRlZmF1bHQgYnkgSVAgaW4gQXNjIG9yZGVyICovXG5mdW5jdGlvbiBjb21wYXJlX2J5X2hvc3RfaXAocjAsIHIxKSB7XG4gIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKFxuICAgIHIwW1wiaG9zdFwiXSxcbiAgICByMVtcImhvc3RcIl0sXG4gICAgMSAvKiBieSBkZWZhdWx0IGFzYyAqL1xuICApO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHNpbXBseSByZXR1cm4gdGhlIGRhdGEgb2YgdGhlIGV4YWN0IGNvbHVtbiBhbmQgcm93IHJlcXVlc3RlZCAqL1xuZnVuY3Rpb24gY29sdW1uX2RhdGEoY29sLCByb3cpIHtcbiAgbGV0IGRhdGEgPSByb3dbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gIGlmIChjb2wuaWQgPT0gXCJkdXJhdGlvblwiKSB7XG4gICAgZGF0YSA9XG4gICAgICByb3dbXCJsYXN0X3NjYW5cIl0gPT09IHVuZGVmaW5lZCB8fCByb3dbXCJpc19va19sYXN0X3NjYW5cIl0gIT0gMVxuICAgICAgICA/IC0xXG4gICAgICAgIDogcm93W1wibGFzdF9zY2FuXCJdW1wiZHVyYXRpb25fZXBvY2hcIl07XG4gIH0gZWxzZSBpZiAoY29sLmlkID09IFwibGFzdF9zY2FuXCIpIHtcbiAgICBkYXRhID1cbiAgICAgIHJvd1tcImxhc3Rfc2NhblwiXSA9PT0gdW5kZWZpbmVkIHx8IHJvd1tcImlzX29rX2xhc3Rfc2NhblwiXSAhPSAxXG4gICAgICAgID8gMFxuICAgICAgICA6IHJvd1tcImxhc3Rfc2NhblwiXVtcImVwb2NoXCJdO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImlzX29rX2xhc3Rfc2NhblwiKSB7XG4gICAgZGF0YSA9IGdldF9zY2FuX3N0YXR1c192YWx1ZShkYXRhLCByb3cpO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInNjYW5fZnJlcXVlbmN5XCIpIHtcbiAgICBkYXRhID0gZ2V0X3NjYW5fZnJlcXVlbmN5KGRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHVzZWQgdG8gc29ydCB0aGUgY29sdW1ucyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gY29sdW1uX2RhdGEoY29sLCByMCk7XG4gICAgbGV0IHIxX2NvbCA9IGNvbHVtbl9kYXRhKGNvbCwgcjEpO1xuXG4gICAgLyogSW4gY2FzZSB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc29ydCBieSBJUCAqL1xuICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICByZXR1cm4gY29tcGFyZV9ieV9ob3N0X2lwKHIwLCByMSk7XG4gICAgfVxuICAgIGlmIChjb2wuaWQgPT0gXCJob3N0XCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJob3N0X25hbWVcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZFwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInRjcF9wb3J0c1wiIHx8IGNvbC5pZCA9PSBcInVkcF9wb3J0c1wiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImR1cmF0aW9uXCIpIHtcbiAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibGFzdF9zY2FuXCIpIHtcbiAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gMDtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJpc19va19sYXN0X3NjYW5cIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibWF4X3Njb3JlX2N2ZVwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInNjYW5fZnJlcXVlbmN5XCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21wYXJlX2J5X2hvc3RfaXAocjAsIHIxKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZ2V0X3NjYW5fZnJlcXVlbmN5KHNjYW5fZnJlcXVlbmN5KSB7XG4gIGlmIChzY2FuX2ZyZXF1ZW5jeSA9PSBcIjFkYXlcIikge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRhaWx5XCIpO1xuICB9IGVsc2UgaWYgKHNjYW5fZnJlcXVlbmN5ID09IFwiMXdlZWtcIikge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLndlZWtseVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRfc2Nhbl9zdGF0dXNfdmFsdWUoaXNfb2tfbGFzdF9zY2FuLCByKSB7XG4gIGxldCBzdGF0dXMgPSBcIlwiO1xuICBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDIpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlZFwiKTtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gNCkge1xuICAgIHN0YXR1cyA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2Nhbm5pbmdcIik7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDMgfHwgaXNfb2tfbGFzdF9zY2FuID09IG51bGwpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdF9zY2FubmVkXCIpO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAxKSB7XG4gICAgc3RhdHVzID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zdWNjZXNzXCIpO1xuICB9IGVsc2Uge1xuICAgIHN0YXR1cyA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXJyb3JcIik7XG4gIH1cbiAgcmV0dXJuIHN0YXR1cyArIHIuaWQ7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBkZWxldGUgYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZGVsZXRlKGV2ZW50KSB7XG4gIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzKCk7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSBldmVudC5yb3c7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coXCJkZWxldGVfc2luZ2xlX3Jvd1wiLCBpMThuKFwiZGVsZXRlX3ZzX2hvc3RcIikpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgc2NhbiBidXR0b24gKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zY2FuKGV2ZW50KSB7XG4gIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzKCk7XG4gIHJvd190b19zY2FuLnZhbHVlID0gZXZlbnQucm93O1xuICBjb25zdCBzY2FuX2hvc3RfbXNnID0gYCR7aTE4bihcInNjYW5faG9zdFwiKX1gO1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KFwic2Nhbl9yb3dcIiwgc2Nhbl9ob3N0X21zZyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBlZGl0IGJ1dHRvbiAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2VkaXRfaG9zdChldmVudCkge1xuICBtb2RhbF9hZGQudmFsdWUuc2hvdyhldmVudC5yb3cpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBkZWxldGUgYWxsIGVudHJpZXMgKi9cbmZ1bmN0aW9uIGRlbGV0ZV9hbGxfZW50cmllcygpIHtcbiAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMoKTtcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcImRlbGV0ZV9hbGxcIiwgaTE4bihcImRlbGV0ZV9hbGxfdnNfaG9zdHNcIikpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBlZGl0IGhvc3QgdG8gc2NhbiAqL1xuYXN5bmMgZnVuY3Rpb24gZWRpdChwYXJhbXMpIHtcbiAgcGFyYW1zLmlzX2VkaXQgPSB0cnVlO1xuICBhd2FpdCBhZGRfaG9zdF9yZXN0KHBhcmFtcyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEV2ZXJ5IDEwIHNlY29uZCBjaGVjayB0byBkaXNhYmxlIGZlZWRiYWNrcyAqL1xuZnVuY3Rpb24gc2V0X2FscmVhZHlfaW5zZXJ0X29yX2luc2VydF93aXRoX3N1Y2Nlc3MoKSB7XG4gIGlmIChpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID09PSB0cnVlKSB7XG4gICAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPT09IHRydWUpIHtcbiAgICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRXZlcnkgMTAgc2Vjb25kIGNoZWNrIHRvIGRpc2FibGUgYXV0b3JlZnJlc2ggKi9cbmZ1bmN0aW9uIGNoZWNrX2F1dG9yZWZyZXNoKCkge1xuICBjaGVja19pbl9wcm9ncmVzc19zdGF0dXMoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogR2V0IHRoZSBudW1iZXIgb2Ygcm93cyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2xvYWRlZCgpIHtcbiAgdG90YWxfcm93cy52YWx1ZSA9IHRhYmxlX2hvc3RzX3RvX3NjYW4udmFsdWUuZ2V0X3Jvd3NfbnVtKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIG1hcCBjb2x1bW5zIGRhdGEgKi9cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gIHJldHVybiBjb2x1bW5zX2Zvcm1hdHRlcihjb2x1bW5zLCBzY2FuX3R5cGVfbGlzdCwgZmFsc2UsIHByb3BzLmNvbnRleHQuaWZpZCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKiBSRVNUIEZ1bmN0aW9ucyAqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBhZGQgYSBuZXcgaG9zdCBkdXJpbmcgZWRpdCAqL1xuY29uc3QgYWRkX2hvc3RfcmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGFkZF9ob3N0X3VybCwge1xuICAgIC4uLnBhcmFtcyxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIG1vZGFsX2FkZC52YWx1ZS5jbG9zZSgpO1xuICBpZiAocmVzdWx0LnJzcCA9PT0gdHJ1ZSkge1xuICAgIHBhcmFtcy5jaWRyICE9IG51bGxcbiAgICAgID8gKGluc2VydF90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faG9zdF91cGRhdGVkXCIpLnJlcGxhY2UoXG4gICAgICAgICAgXCIle2hvc3R9XCIsXG4gICAgICAgICAgYCR7cGFyYW1zLmhvc3R9LyR7cGFyYW1zLmNpZHJ9YFxuICAgICAgICApKVxuICAgICAgOiAoaW5zZXJ0X3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9ob3N0X3VwZGF0ZWRcIikucmVwbGFjZShcbiAgICAgICAgICBcIiV7aG9zdH1cIixcbiAgICAgICAgICBgJHtwYXJhbXMuaG9zdH1gXG4gICAgICAgICkpO1xuXG4gICAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IHRydWU7XG4gICAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICAgIHNldFRpbWVvdXQoc2V0X2FscmVhZHlfaW5zZXJ0X29yX2luc2VydF93aXRoX3N1Y2Nlc3MsIDEwMDAwKTtcbiAgICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJhbXMuY2lkciAhPSBudWxsXG4gICAgICA/IChhbHJlYWR5X2luc2VydF90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faG9zdF9hbHJlYWR5X2luc2VydGVkXCIpLnJlcGxhY2UoXG4gICAgICAgICAgXCIle2hvc3R9XCIsXG4gICAgICAgICAgYCR7cGFyYW1zLmhvc3R9LyR7cGFyYW1zLmNpZHJ9YFxuICAgICAgICApKVxuICAgICAgOiAoYWxyZWFkeV9pbnNlcnRfdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfYWxyZWFkeV9pbnNlcnRlZFwiKS5yZXBsYWNlKFxuICAgICAgICAgIFwiJXtob3N0fVwiLFxuICAgICAgICAgIGAke3BhcmFtcy5ob3N0fWBcbiAgICAgICAgKSk7XG5cbiAgICBsZXQgc2Nhbl90eXBlX2xhYmVsID0gXCJcIjtcblxuICAgIHNjYW5fdHlwZV9saXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLmlkID09IHBhcmFtcy5zY2FuX3R5cGUpIHtcbiAgICAgICAgc2Nhbl90eXBlX2xhYmVsID0gaXRlbS5sYWJlbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFscmVhZHlfaW5zZXJ0X3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9ob3N0X2FscmVhZHlfaW5zZXJ0ZWRcIikucmVwbGFjZShcbiAgICAgIFwiJXtzY2FuX3R5cGV9XCIsXG4gICAgICBgJHtzY2FuX3R5cGVfbGFiZWx9YFxuICAgICk7XG4gICAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IHRydWU7XG4gICAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICAgIHNldFRpbWVvdXQoc2V0X2FscmVhZHlfaW5zZXJ0X29yX2luc2VydF93aXRoX3N1Y2Nlc3MsIDEwMDAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuaXNfZWRpdCAhPT0gdHJ1ZSkge1xuICAgIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xuICB9XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGFkZHMgYSBmZWVkYmFjayBtZXNzYWdlIG9uIHRoZSBwYWdlICovXG5jb25zdCByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzID0gZnVuY3Rpb24gKGluX3Byb2dyZXNzKSB7XG4gIC8qIEluIGNhc2UgYSBpbl9wcm9ncmVzcyBpcyBhIG51bWJlciwgY3VzdG9taXplIHRoZSBmZWVkYmFjayBtZXNzYWdlICovXG4gIGlmIChpbl9wcm9ncmVzcyAhPSBudWxsICYmIGluX3Byb2dyZXNzICE9IDApIHtcbiAgICBpbl9wcm9ncmVzc19zY2FuX3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9pbl9wcm9ncmVzc1wiKS5yZXBsYWNlKFxuICAgICAgXCJ0b3RhbFwiLFxuICAgICAgYCR7aW5fcHJvZ3Jlc3N9YFxuICAgICk7XG4gIH1cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHVwZGF0ZV9hbGxfc2Nhbl9mcmVxdWVuY2llcyA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGVkaXRfaG9zdF91cmwsIHtcbiAgICAuLi5wYXJhbXMsXG4gIH0pO1xuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuXG4gIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzKCk7XG4gIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gcmV0cmlldmUgc2NhbiB0eXBlcyBsaXN0ICovXG5jb25zdCBnZXRfc2Nhbl90eXBlX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzY2FuX3R5cGVfbGlzdF91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gIHNjYW5fdHlwZV9saXN0ID0gcmVzdWx0LnJzcDtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgc2NhbiBpbiBwcm9ncmVzcyAqL1xuY29uc3QgY2hlY2tfaW5fcHJvZ3Jlc3Nfc3RhdHVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoY2hlY2tfc3RhdHVzX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMocmVzdWx0LnJzcC50b3RhbF9pbl9wcm9ncmVzcyk7XG5cbiAgLyogR2V0IHRoZSBudW1iZXIgb2Ygc2NhbnMgY3VycmVudGx5IGluIHByb2dyZXNzICovXG4gIC8qIEluIGNhc2UgdGhlIG51bWJlciBjaGFuZ2VkLCByZWZyZXNoIHRoZSB0YWJsZSAqL1xuICBpZiAoaW5fcHJvZ3Jlc3NfbnVtYmVyLnZhbHVlID09IG51bGwpIHtcbiAgICAvKiBGaXJzdCB0aW1lIGNoZWNraW5nIHRoZSBudW1iZXIgb2Ygc2NhbnMsIGRvbid0IHJlZnJlc2ggdGhlIHRhYmxlICovXG4gICAgaW5fcHJvZ3Jlc3NfbnVtYmVyLnZhbHVlID0gcmVzdWx0LnJzcC50b3RhbF9pbl9wcm9ncmVzcztcbiAgfVxuXG4gIGNvbnN0IHNjYW5zX2VuZGVkID1cbiAgICByZXN1bHQucnNwLnRvdGFsX2luX3Byb2dyZXNzID09IDAgJiYgaW5fcHJvZ3Jlc3NfbnVtYmVyLnZhbHVlID4gMDtcbiAgaW5fcHJvZ3Jlc3NfbnVtYmVyLnZhbHVlID0gcmVzdWx0LnJzcC50b3RhbF9pbl9wcm9ncmVzcztcbiAgYXV0b3JlZnJlc2gudmFsdWUgPVxuICAgIGluX3Byb2dyZXNzX251bWJlci52YWx1ZSA+IDAgJiYgbW9kYWxfb3BlbmVkLnZhbHVlID09PSBmYWxzZTtcblxuICBpZiAoYXV0b3JlZnJlc2gudmFsdWUgPT09IHRydWUpIHtcbiAgICAvKiBSZWZyZXNoIHRoZSBkYXRhLCBwZXJpb2RpYyB1cGRhdGUgKi9cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlZnJlc2hfdGFibGUodHJ1ZSk7XG4gICAgfSwgMjAwMCk7XG4gIH0gZWxzZSBpZiAoc2NhbnNfZW5kZWQpIHtcbiAgICAvKiBSZWZyZXNoIHRoZSBkYXRhLCBhbGwgc2NhbnMgZW5kZWQgKi9cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlZnJlc2hfdGFibGUodHJ1ZSk7XG4gICAgfSwgNTAwMCk7XG4gIH1cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGNvbmZpcm0gdG8gc3RhcnQgYWxsIHNjYW4gKi9cbmNvbnN0IGNvbmZpcm1fc2Nhbl9hbGxfZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcInNjYW5fYWxsX3Jvd3NcIiwgaTE4bihcInNjYW5fYWxsX2hvc3RzXCIpKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byB1cGRhdGUgYWxsIHNjYW4gIGZyZXF1ZW5jaWVzKi9cbmNvbnN0IHVwZGF0ZV9hbGxfcGVyaW9kaWNpdHkgPSBmdW5jdGlvbiAoKSB7XG4gIG1vZGFsX3VwZGF0ZV9wZXJpb2RpdGljeV9zY2FuLnZhbHVlLnNob3coKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGV4ZWMgdGhlIHZ1bG5lcmFiaWxpdHkgc2NhbiBvZiBhIHNpbmdsZSBob3N0ICovXG5jb25zdCBzY2FuX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX3NjYW4udmFsdWU7XG4gIGF3YWl0IHNjYW5fcm93X3Jlc3Qocm93Lmhvc3QsIHJvdy5zY2FuX3R5cGUsIHJvdy5wb3J0cywgcm93LmlkKTtcbiAgcmVmcmVzaF90YWJsZSh0cnVlIC8qIERpc2FibGUgbG9hZGluZywgYW5ub3lpbmcgd2hlbiBlbmFibGluZyBhIHNjYW4gKi8pO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3Qgc2Nhbl9yb3dfcmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChob3N0LCBzY2FuX3R5cGUsIHBvcnRzLCBpZCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc2Nhbl9ob3N0X3VybCwge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgc2Nhbl90eXBlOiBzY2FuX3R5cGUsXG4gICAgc2Nhbl9zaW5nbGVfaG9zdDogdHJ1ZSxcbiAgICBzY2FuX3BvcnRzOiBwb3J0cyxcbiAgICBzY2FuX2lkOiBpZCxcbiAgfSk7XG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZXhlYyBhIHZ1bG5lcmFiaWxpdHkgc2NhbiB0byBhbGwgaG9zdHMgc2V0ICovXG5hc3luYyBmdW5jdGlvbiBzY2FuX2FsbF9lbnRyaWVzKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc2Nhbl9ob3N0X3VybCwge1xuICAgIHNjYW5fc2luZ2xlX2hvc3Q6IGZhbHNlLFxuICB9KTtcbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBkZWxldGUgaG9zdCB0byBzY2FuICovXG5jb25zdCBkZWxldGVfcm93ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fZGVsZXRlLnZhbHVlO1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocmVtb3ZlX2hvc3RfdXJsLCB7XG4gICAgaG9zdDogcm93Lmhvc3QsXG4gICAgc2Nhbl90eXBlOiByb3cuc2Nhbl90eXBlLFxuICAgIGRlbGV0ZV9hbGxfc2Nhbl9ob3N0czogZmFsc2UsXG4gICAgc2Nhbl9pZDogcm93LmlkLFxuICB9KTtcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGRlbGV0ZXMgYWxsIHRoZSByb3dzICovXG5jb25zdCBkZWxldGVfYWxsX3Jvd3MgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZW1vdmVfaG9zdF91cmwsIHtcbiAgICBkZWxldGVfYWxsX3NjYW5faG9zdHM6IHRydWUsXG4gIH0pO1xuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGRvd25sb2FkIGxhc3QgdnVsbmVyYWJpbGl0eSBzY2FuIHJlc3VsdCAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2Rvd25sb2FkKGV2ZW50KSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBldmVudC5yb3cuaG9zdCxcbiAgICBzY2FuX3R5cGU6IGV2ZW50LnJvdy5zY2FuX3R5cGUsXG4gICAgZXBvY2g6IGV2ZW50LnJvdy5sYXN0X3NjYW4uZXBvY2hcbiAgfTtcbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGNvbnN0IHVybCA9IGAke3NjYW5fcmVzdWx0X3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191dGlsaXR5LmRvd25sb2FkX1VSSSh1cmwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBzaG93IGxhc3QgdnVsbmVyYWJpbGl0eSBzY2FuIHJlc3VsdCAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3Nob3dfcmVzdWx0KGV2ZW50KSB7XG4gIGNvbnN0IGhvc3QgPSBldmVudC5yb3cuaG9zdDtcbiAgY29uc3QgZGF0ZSA9IGV2ZW50LnJvdy5sYXN0X3NjYW4udGltZS5yZXBsYWNlKFwiIFwiLCBcIl9cIik7XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgc2Nhbl90eXBlOiBldmVudC5yb3cuc2Nhbl90eXBlLFxuICAgIHNjYW5fcmV0dXJuX3Jlc3VsdDogdHJ1ZSxcbiAgICBwYWdlOiBcInNob3dfcmVzdWx0XCIsXG4gICAgZXBvY2g6IGV2ZW50LnJvdy5sYXN0X3NjYW4uZXBvY2gsXG4gICAgc2Nhbl9kYXRlOiBkYXRlLFxuICB9O1xuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgY29uc3QgdXJsID0gYCR7YWN0aXZlX21vbml0b3JpbmdfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiB1cGRhdGVfbW9kYWxfc3RhdHVzKHZhbHVlKSB7XG4gIC8qIHVwZGF0ZSB0aGUgbW9kYWxfb3BlbmVkIHZhciB1c2VkIGZvciBkaXNhYmxlL2VuYWJsZSBcbiAgICAgYXV0b3JlZnJlc2ggd2hlbiBtb2RhbCBpcyBvcGVuL2Nsb3NlZCAqL1xuICBtb2RhbF9vcGVuZWQudmFsdWUgPSB2YWx1ZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbjwvc2NyaXB0PlxuICAiLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxoMyBjbGFzcz1cImQtaW5saW5lLWJsb2NrIHB0LTMgcHMtM1wiIHYtaHRtbD1cInRpdGxlX2h0bWxcIj48L2gzPlxuICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiIDpjbGFzcz1cIltsb2FkaW5nID8gJ250b3BuZy1ncmF5LW91dCcgOiAnJ11cIiB2LWh0bWw9XCJtZXNzYWdlX2h0bWxcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IHNjYW5fcmVzdWx0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC92dWxuZXJhYmlsaXR5X3NjYW5fcmVzdWx0Lmx1YWA7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSk7XG5cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pOyBcbmNvbnN0IG1lc3NhZ2UgPSByZWYoJycpO1xuY29uc3QgbWVzc2FnZV9odG1sID0gcmVmKCcnKTtcbmNvbnN0IHRpdGxlX2h0bWwgPSByZWYoJycpO1xuXG5jb25zdCB0aXRsZSA9IHJlZignJyk7XG5jb25zdCBteV9hcnJheSA9IHJlZihbXSk7XG5cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3Jlc3VsdChob3N0LCBzY2FuX3R5cGUsIGRhdGUsIGVwb2NoKSB7XG4gIFxuICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBob3N0LFxuICAgIHNjYW5fdHlwZTogc2Nhbl90eXBlLFxuICAgIHNjYW5fcmV0dXJuX3Jlc3VsdDogdHJ1ZSxcbiAgICBlcG9jaDogZXBvY2hcblxuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBsZXQgdXJsID0gYCR7c2Nhbl9yZXN1bHRfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICBtZXNzYWdlLnZhbHVlID0gcmVzdWx0LnJzcDtcbiAgbWVzc2FnZV9odG1sLnZhbHVlID0gYDxwcmU+JHttZXNzYWdlLnZhbHVlfTwvcHJlPmA7XG5cblxuICBjb25zdCBob3N0X2hyZWYgPSBwcm9wcy5jb250ZXh0LmlzX2luX21lbSA9PT0gJ3RydWUnIHx8IHByb3BzLmNvbnRleHQuaXNfaW5fbWVtID09IHRydWUgPyBgJHtob3N0fSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2hvc3R9XCI+PGkgY2xhc3MgPSBcImZhcyBmYS1sYXB0b3BcIj48L2k+PC9hPmA6IGhvc3Q7XG4gIFxuICBcbiAgdGl0bGUudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnZzX3Jlc3VsdFwiKS5yZXBsYWNlKFwiJXtob3N0fVwiLCBob3N0X2hyZWYpO1xuICBpZiAoZGF0ZSAhPSBudWxsKVxuICAgIGRhdGUgPSBkYXRlLnJlcGxhY2VBbGwoXCJfXCIsXCIgXCIpO1xuXG4gIFxuICB0aXRsZS52YWx1ZSA9IHRpdGxlLnZhbHVlLnJlcGxhY2UoXCIle2RhdGV9XCIsZGF0ZSk7XG4gIHRpdGxlX2h0bWwudmFsdWUgPSB0aXRsZS52YWx1ZTtcblxuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGdldF9yZXN1bHQocHJvcHMuY29udGV4dC5ob3N0LCBwcm9wcy5jb250ZXh0LnNjYW5fdHlwZSwgcHJvcHMuY29udGV4dC5kYXRlLCBwcm9wcy5jb250ZXh0LmVwb2NoKTtcbn0pXG5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkICBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBpZD1cIm9wZW5fcG9ydHNcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9vcGVuX3BvcnRzXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6Y3NyZj1cImNvbnRleHQuY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCIgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIiA6Zl9tYXBfY29uZmlnPVwibWFwX2NvbmZpZ1wiIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIj5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cblxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG5cbiAgICAgICAgXG5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG4gIFxuPHNjcmlwdCBzZXR1cD5cblxuLyogSW1wb3J0cyAqLyBcbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVdpdGhDb25maWcgfSBmcm9tIFwiLi90YWJsZS13aXRoLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogQ29uc3RzICovIFxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuXG5cbmNvbnN0IGFjdGl2ZV9tb25pdG9yaW5nX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdnVsbmVyYWJpbGl0eV9zY2FuLmx1YWA7XG4gXG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKCdvcGVuX3BvcnRzJyk7XG5jb25zdCBtYXBfY29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBjb25maWc7XG59O1xuXG5jb25zdCB0YWJsZV9vcGVuX3BvcnRzID0gcmVmKCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmZcbn07XG5jb25zdCBjb250ZXh0ID0gcmVmKHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gIGlzX2VudGVycHJpc2VfbDogcHJvcHMuY29udGV4dC5pc19lbnRlcnByaXNlX2xcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBhbGwgYnV0dG9ucyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gIFxuICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgXCJjbGlja19idXR0b25fc2hvd19ob3N0c1wiOiBjbGlja19idXR0b25fc2hvd19ob3N0c1xuICB9O1xuICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuXG5mdW5jdGlvbiBjb21wYXJlX2J5X3BvcnQocjAscjEpIHtcblxuICBsZXQgY29sID0ge1xuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICBcInRpdGxlX2kxOG5cIjogXCJwb3J0XCIsXG4gICAgICAgICAgXCJkYXRhX2ZpZWxkXCI6IFwicG9ydFwiLFxuICAgICAgICAgIFwic29ydGFibGVcIjogdHJ1ZSxcbiAgICAgICAgICBcImNsYXNzXCI6IFtcbiAgICAgICAgICAgICAgXCJ0ZXh0LW5vd3JhcFwiLFxuICAgICAgICAgICAgICBcInRleHQtZW5kXCJcbiAgICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcbiAgbGV0IHIwX2NvbCA9IHIwW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICBsZXQgcjFfY29sID0gcjFbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gICAgXG4gIHIwX2NvbCA9IGZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQocjBfY29sKTtcbiAgcjFfY29sID0gZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydChyMV9jb2wpO1xuICByZXR1cm4gcjBfY29sIC0gcjFfY29sO1xufVxuXG5mdW5jdGlvbiBjb2x1bW5zX3NvcnRpbmcoY29sLCByMCwgcjEpIHtcblxuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gcjBbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gICAgbGV0IHIxX2NvbCA9IHIxW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgIGlmKGNvbC5pZCA9PSBcInBvcnRcIikge1xuXG4gICAgICByMF9jb2wgPSBmb3JtYXRfbnVtX3BvcnRzX2Zvcl9zb3J0KHIwX2NvbCk7XG4gICAgICByMV9jb2wgPSBmb3JtYXRfbnVtX3BvcnRzX2Zvcl9zb3J0KHIxX2NvbCk7XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sIC0gcjFfY29sO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbCAtIHIwX2NvbDtcbiAgICB9IGVsc2UgaWYoY29sLmlkID09IFwiY291bnRfaG9zdFwiKSB7XG4gICAgICByMF9jb2wgPSBmb3JtYXRfY3ZlX251bShyMF9jb2wpO1xuICAgICAgcjFfY29sID0gZm9ybWF0X2N2ZV9udW0ocjFfY29sKTtcblxuICAgICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVfYnlfcG9ydChyMCxyMSk7XG4gICAgICB9XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sIC0gcjFfY29sO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbCAtIHIwX2NvbDtcbiAgICB9XG4gICAgZWxzZSBpZihjb2wuaWQgPT0gXCJjdmVzXCIpIHtcbiAgICAgIHIwX2NvbCA9IGZvcm1hdF9jdmVfbnVtKHIwX2NvbCk7XG4gICAgICByMV9jb2wgPSBmb3JtYXRfY3ZlX251bShyMV9jb2wpO1xuXG4gICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICByZXR1cm4gY29tcGFyZV9ieV9wb3J0KHIwLHIxKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wgLSByMV9jb2w7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sIC0gcjBfY29sO1xuICAgIH1cbiAgICBlbHNlIGlmKGNvbC5pZCA9PSBcImhvc3RzXCIpIHtcbiAgICAgIC8qIEl0J3MgYW4gYXJyYXkgKi9cblxuICAgICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVfYnlfcG9ydChyMCxyMSk7XG4gICAgICB9XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmIChyMF9jb2wgIT0gbnVsbCkge1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByMF9jb2wgPSBcIlwiO1xuICAgICAgfVxuXG4gICAgICBpZiAocjFfY29sICE9IG51bGwpIHtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcjFfY29sID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlX2J5X3BvcnQocjAscjEpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9XG4gICBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29tcGFyZV9ieV9wb3J0KHIwLHIxKTtcbiAgfVxuICBcbn1cblxuXG5cblxuZnVuY3Rpb24gZm9ybWF0X2N2ZV9udW0obnVtKSB7XG4gIGxldCB2YWx1ZSA9IDA7XG4gIGlmIChudW0gPT09IFwiXCIgfHwgbnVtID09PSBudWxsIHx8IG51bSA9PT0gTmFOIHx8IG51bSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSAwO1xuICB9IGVsc2Uge1xuICAgIG51bSA9IG51bS5zcGxpdCgnLCcpLmpvaW4oXCJcIik7XG4gICAgdmFsdWUgPSBwYXJzZUludChudW0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRfbnVtX2Zvcl9zb3J0KG51bSkge1xuICBpZiAobnVtID09PSBcIlwiIHx8IG51bSA9PT0gbnVsbCB8fCBudW0gPT09IE5hTiB8fCBudW0gPT09IHVuZGVmaW5lZCkge1xuICAgIG51bSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbnVtID0gbnVtLnNwbGl0KCcsJykuam9pbihcIlwiKVxuICAgIG51bSA9IHBhcnNlSW50KG51bSk7XG4gIH1cblxuICByZXR1cm4gbnVtO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRfbnVtX3BvcnRzX2Zvcl9zb3J0KG51bSkge1xuICBpZiAobnVtID09IFwiXCIgfHwgbnVtID09IG51bGwgfHwgbnVtID09IE5hTiB8fCBudW0gPT0gdW5kZWZpbmVkKSBcbiAgICBudW0gPSAwO1xuXG4gIG51bSA9IHBhcnNlSW50KG51bSk7O1xuICByZXR1cm4gbnVtO1xufVxuXG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuXG4vKiBGdW5jdGlvbiB0byBtYXAgY29sdW1ucyBkYXRhICovXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSAoY29sdW1ucykgPT4ge1xuICBjb25zdCB2aXNpYmxlX2RpY3QgPSB7XG4gICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICBzaG93X3Jlc3VsdDogdHJ1ZVxuICAgICAgfTtcbiAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgIFwiaG9zdHNcIjogKGhvc3RzLCByb3cpID0+IHtcbiAgICAgIGxldCBsYWJlbCA9IGBgO1xuICAgICAgY29uc3QgaG9zdHNfc3BsaXRlZCA9IGhvc3RzLnNwbGl0KFwiLCBcIik7XG4gICAgICBjb25zdCBsZW5ndGggPSBob3N0c19zcGxpdGVkLmxlbmd0aDtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlICggaSA8IDUgJiYgaSA8IGxlbmd0aCkge1xuICAgICAgICBjb25zdCBob3N0X3NwbGl0dGVkID0gaG9zdHNfc3BsaXRlZFtpXS5zcGxpdChcInxcIik7XG4gICAgICAgIGNvbnN0IGhvc3QgPSBob3N0X3NwbGl0dGVkWzBdO1xuICAgICAgICBjb25zdCBzY2FuX3R5cGUgPSBob3N0X3NwbGl0dGVkWzFdO1xuICAgICAgICBjb25zdCBkYXRlID0gaG9zdF9zcGxpdHRlZFsyXS5yZXBsYWNlKFwiIFwiLFwiX1wiKTtcbiAgICAgICAgY29uc3QgaXNfaXB2NCA9IGhvc3Rfc3BsaXR0ZWRbM10gPT09ICd0cnVlJztcbiAgICAgICAgY29uc3QgZXBvY2ggPSBob3N0X3NwbGl0dGVkWzRdO1xuXG4gICAgICAgIGxldCBob3N0X25hbWUgPSAnJztcbiAgICAgICAgaWYgKGhvc3Rfc3BsaXR0ZWQubGVuZ3RoID4gNSkge1xuICAgICAgICAgIGhvc3RfbmFtZSA9IGhvc3Rfc3BsaXR0ZWRbNV07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICAgIGhvc3Q6IGhvc3QsXG4gICAgICAgICAgc2Nhbl90eXBlOiBzY2FuX3R5cGUsXG4gICAgICAgICAgc2Nhbl9yZXR1cm5fcmVzdWx0OiB0cnVlLFxuICAgICAgICAgIHBhZ2U6IFwic2hvd19yZXN1bHRcIixcbiAgICAgICAgICBlcG9jaDogZXBvY2gsXG4gICAgICAgICAgc2Nhbl9kYXRlOiBkYXRlXG5cbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICAgICAgICBsZXQgdXJsID0gYCR7YWN0aXZlX21vbml0b3JpbmdfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhvc3RfbGFiZWwgPSBob3N0X25hbWUgIT0gJyc/IChpc19pcHY0ID09IGZhbHNlID8gYCR7aG9zdF9uYW1lfSAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIj4ke2kxOG4oJ2lwdjYnKX08L3NwYW4+YCA6IGhvc3RfbmFtZSkgOiBob3N0O1xuICAgICAgICBcbiAgICAgICAgaWYgKGxhYmVsID09IGBgKVxuICAgICAgICAgIGxhYmVsICs9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtob3N0X2xhYmVsfTwvYT5gOyAgXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBsYWJlbCArPSBgLCA8YSBocmVmPVwiJHt1cmx9XCI+JHtob3N0X2xhYmVsfTwvYT5gOyAgXG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAobGVuZ3RoID4gNSkge1xuICAgICAgICBsYWJlbCArPSBgLi4uYDtcbiAgICAgIH0gXG5cbiAgICAgIHJldHVybiBsYWJlbDtcblxuICAgIH1cbiAgfVxuICAgIFxuXG4gIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuICB9KTtcbiAgXG4gIHJldHVybiBjb2x1bW5zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cblxuXG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKiBSRVNUIEZ1bmN0aW9ucyAqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBzaG93IGFsbCBob3N0cyBkdXJpbmcgZWRpdCAqL1xuXG5hc3luYyBmdW5jdGlvbiBjbGlja19idXR0b25fc2hvd19ob3N0cyhldmVudCkge1xuICBsZXQgcG9ydCA9IGV2ZW50LnJvdy5wb3J0X251bWJlcjtcblxuICBsZXQgcGFyYW1zID0ge1xuICAgIHBvcnQ6IHBvcnQsXG4gIH07XG5cbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBsZXQgdXJsID0gYCR7YWN0aXZlX21vbml0b3JpbmdfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG5cbi8qIEZ1bmN0aW9uIHRvIGRvd25sb2FkIGxhc3QgdnVsbmVyYWJpbGl0eSBzY2FuIHJlc3VsdCAqL1xuYXN5bmMgZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2Rvd25sb2FkKGV2ZW50KSB7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgaG9zdDogZXZlbnQucm93Lmhvc3QsXG4gICAgc2Nhbl90eXBlOiBldmVudC5yb3cuc2Nhbl90eXBlXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgbGV0IHVybCA9IGAke3NjYW5fcmVzdWx0X3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191dGlsaXR5LmRvd25sb2FkX1VSSSh1cmwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogRnVuY3Rpb24gdG8gc2hvdyBsYXN0IHZ1bG5lcmFiaWxpdHkgc2NhbiByZXN1bHQgKi9cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdChldmVudCkge1xuICBsZXQgaG9zdCA9IGV2ZW50LnJvdy5ob3N0O1xuICBsZXQgZGF0ZSA9IGV2ZW50LnJvdy5sYXN0X3NjYW4udGltZTtcblxuICBsZXQgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgc2Nhbl90eXBlOiBldmVudC5yb3cuc2Nhbl90eXBlLFxuICAgIHNjYW5fcmV0dXJuX3Jlc3VsdDogdHJ1ZSxcbiAgICBwYWdlOiBcInNob3dfcmVzdWx0XCIsXG4gICAgc2Nhbl9kYXRlOiBkYXRlXG5cbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBsZXQgdXJsID0gYCR7YWN0aXZlX21vbml0b3JpbmdfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG48L3NjcmlwdD5cbiAgIiwiPCEtLSAoQykgMjAyMyAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyB0aXRsZSB9fTwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgPCEtLSBUYXJnZXQgaW5mb3JtYXRpb24sIGhlcmUgYW4gSVAgaXMgcHV0IC0tPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0c19wYWdlLmRhdGVcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cInJlcG9ydF9kYXRlXCIgOmRpc2FibGVkPVwidHJ1ZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2UubmFtZVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwicmVwb3J0X25hbWVcIiAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIEBpbnB1dD1cImNoZWNrX3RpdGxlXCIgIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcblxuICAgICAgPGRpdiBjbGFzcz1cIm10LTRcIj5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPiA8L05vdGVMaXN0PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgXG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIDpkaXNhYmxlZD1cIiEoaXNfcmVwb3J0X25hbWVfY29ycmVjdClcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlxuICAgICAgICAgIHt7IF9pMThuKFwiYXBwbHlcIikgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImFkZFwiLCBcImVkaXRcIl0pO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0c19wYWdlLmVkaXRfcmVwb3J0XCIpKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCByZXBvcnRfZGF0ZSA9IHJlZihudWxsKTtcbmNvbnN0IHJlcG9ydF9uYW1lID0gcmVmKG51bGwpO1xuY29uc3Qgcm93X3RvX2VkaXQgPSByZWYobnVsbCk7XG5cbmNvbnN0IGlzX3JlcG9ydF9uYW1lX2NvcnJlY3QgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMVwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8yXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNcIiksXG5dO1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qXG4gKiBSZXNldCBmaWVsZHMgaW4gbW9kYWwgZm9ybVxuICovXG5jb25zdCByZXNldF9tb2RhbF9mb3JtID0gZnVuY3Rpb24gKCkge1xuICByZXBvcnRfZGF0ZS52YWx1ZSA9IFwiXCI7XG4gIHJlcG9ydF9uYW1lLnZhbHVlID0gXCJcIjtcbiAgcm93X3RvX2VkaXQudmFsdWUgPSBudWxsO1xuICBcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKlxuICogU2V0IHJvdyB0byBlZGl0XG4gKi9cbmNvbnN0IHNldF9yb3dfdG9fZWRpdCA9IChyb3cpID0+IHtcblxuICByb3dfdG9fZWRpdC52YWx1ZSA9IHJvdztcbiAgLyogU2V0IGhvc3QgdmFsdWVzICovXG4gIHJlcG9ydF9kYXRlLnZhbHVlID0gcm93LnJlcG9ydF9kYXRlO1xuICByZXBvcnRfbmFtZS52YWx1ZSA9IHJvdy5uYW1lO1xuXG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSBtb2RhbCBpcyBvcGVuZWQgKi9cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIC8qIEZpcnN0IG9mIGFsbCByZXNldCBhbGwgdGhlIGRhdGEgKi9cbiAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICBzZXRfcm93X3RvX2VkaXQocm93KVxuXG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgZWRpdCBidXR0b24gaXMgY2xpY2tlZCAqL1xuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gIGNvbnN0IHRtcF9yZXBvcnRfZGF0ZSA9IHJvd190b19lZGl0LnZhbHVlLmVwb2NoO1xuICBjb25zdCB0bXBfbmFtZSA9IHJlcG9ydF9uYW1lLnZhbHVlO1xuXG4gIGVtaXQoXCJlZGl0XCIsIHtcbiAgICAgIHJlcG9ydF90aXRsZTogdG1wX25hbWUsXG4gICAgICBlcG9jaF9lbmQ6IHRtcF9yZXBvcnRfZGF0ZVxuICAgIH0pO1xuICBcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQgKi9cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgY2hlY2tfdGl0bGUgPSAoKSA9PiB7XG4gIGNvbnN0IGlzU2luZ2xlVmFsaWRXb3JsZCA9IHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZVNpbmdsZVdvcmQocmVwb3J0X25hbWUudmFsdWUpO1xuICBpc19yZXBvcnRfbmFtZV9jb3JyZWN0LnZhbHVlID0gaXNTaW5nbGVWYWxpZFdvcmxkO1xufTtcblxuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgaWQ9XCJ2c19yZXBvcnRzXCI+XG4gICAgICAgICAgICA8TW9kYWxEZWxldGVSZXBvcnRDb25maXJtXG4gICAgICAgICAgICAgIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvTW9kYWxEZWxldGVSZXBvcnRDb25maXJtPlxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZ1xuICAgICAgICAgICAgICByZWY9XCJ0YWJsZV92c19yZXBvcnRzXCJcbiAgICAgICAgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIlxuICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCJcbiAgICAgICAgICAgICAgQHJvd3NfbG9hZGVkPVwib25fdGFibGVfbG9hZGVkXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICBcbiAgICAgICAgXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxNb2RhbEVkaXRSZXBvcnRcbiAgICByZWY9XCJtb2RhbF9lZGl0XCJcbiAgICA6Y29udGV4dD1cImNvbnRleHRcIlxuICAgIEBlZGl0PVwiZWRpdFwiXG4gID5cbiAgPC9Nb2RhbEVkaXRSZXBvcnQ+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG4vKiBJbXBvcnRzICovXG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxFZGl0UmVwb3J0IH0gZnJvbSBcIi4vbW9kYWwtZWRpdC12cy1yZXBvcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlUmVwb3J0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1zY2FuLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IG5vdGUgPSBpMThuKFxuICBcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5nZW5lcmljX25vdGVzXzFcIlxuKS5yZXBsYWNlQWxsKFwiJHtodHRwX3ByZWZpeH1cIiwgYCR7aHR0cF9wcmVmaXh9YCk7XG5jb25zdCBub3RlX2xpc3QgPSBbbm90ZV07XG5cbmNvbnN0IHRpdGxlX2RlbGV0ZSA9IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydF9wYWdlLmRlbGV0ZV90aXRsZVwiKTtcbmNvbnN0IGJvZHlfZGVsZXRlID0gX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0X3BhZ2UuZGVsZXRlX2Rlc2NyaXB0aW9uXCIpO1xuXG5cbmNvbnN0IG9wZW5fcmVwb3J0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZW50ZXJwcmlzZS92dWxuZXJhYmlsaXR5X3NjYW5fcmVwb3J0Lmx1YWA7XG5jb25zdCByZW1vdmVfcmVwb3J0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL3ZzL3JlcG9ydC5sdWFgO1xuY29uc3QgZWRpdF9yZXBvcnRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9lZGl0L3ZzL3JlcG9ydC5sdWFgO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZihcInZzX3JlcG9ydHNcIik7XG5jb25zdCB0YWJsZV92c19yZXBvcnRzID0gcmVmKCk7XG5jb25zdCBtb2RhbF9lZGl0ID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZigpO1xuY29uc3QgdG90YWxfcm93cyA9IHJlZigwKTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxufTtcbmNvbnN0IGNvbnRleHQgPSByZWYoe1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbn0pO1xuXG5sZXQgc2Nhbl90eXBlX2xpc3QgPSBbXTtcbmxldCBnZXRfc2Nhbl90eXBlX2xpc3RfdiA9IG51bGw7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHJlZnJlc2ggdGFibGUgKi9cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIHRhYmxlX3ZzX3JlcG9ydHMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFsbCBidXR0b25zICovXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIGNsaWNrX2J1dHRvbl9lZGl0OiBjbGlja19idXR0b25fZWRpdCxcbiAgICBjbGlja19idXR0b25fZGVsZXRlOiBjbGlja19idXR0b25fZGVsZXRlLFxuICB9O1xuICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBzaW1wbHkgcmV0dXJuIHRoZSBkYXRhIG9mIHRoZSBleGFjdCBjb2x1bW4gYW5kIHJvdyByZXF1ZXN0ZWQgKi9cbmZ1bmN0aW9uIGNvbHVtbl9kYXRhKGNvbCwgcm93KSB7XG4gIGxldCBkYXRhID0gcm93W2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBEZWZhdWx0IHNvcnRpbmcsIGJ5IGRhdGUgaW4gREVTQyBvcmRlciAqL1xuZnVuY3Rpb24gY29tcGFyZV9ieV9yZXBvcnRfZGF0ZShyMCwgcjEpIHtcbiAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShcbiAgICByMFtcInJlcG9ydF9kYXRlXCJdLFxuICAgIHIxW1wicmVwb3J0X2RhdGVcIl0sXG4gICAgMCAvKiBieSBkZWZhdWx0IGFzYyAqL1xuICApO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB1c2VkIHRvIHNvcnQgdGhlIGNvbHVtbnMgb2YgdGhlIHRhYmxlICovXG5mdW5jdGlvbiBjb2x1bW5zX3NvcnRpbmcoY29sLCByMCwgcjEpIHtcbiAgaWYgKGNvbCAhPSBudWxsKSB7XG4gICAgbGV0IHIwX2NvbCA9IGNvbHVtbl9kYXRhKGNvbCwgcjApO1xuICAgIGxldCByMV9jb2wgPSBjb2x1bW5fZGF0YShjb2wsIHIxKTtcblxuICAgIC8qIEluIGNhc2UgdGhlIHZhbHVlcyBhcmUgdGhlIHNhbWUsIHNvcnQgYnkgSVAgKi9cbiAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgcmV0dXJuIGNvbXBhcmVfYnlfcmVwb3J0X2RhdGUocjAsIHIxKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGNvbC5pZCA9PSBcInJlcG9ydF9kYXRlXCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInRjcF9wb3J0c1wiIHx8IGNvbC5pZCA9PSBcInVkcF9wb3J0c1wiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImN2ZXNcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJuYW1lXCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcIm51bV9ob3N0c1wiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21wYXJlX2J5X3JlcG9ydF9kYXRlKHIwLCByMSk7XG59XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGRlbGV0ZSBidXR0b24gKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kZWxldGUoZXZlbnQpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IGV2ZW50LnJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcImRlbGV0ZV9zaW5nbGVfcmVwb3J0XCIpO1xufVxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGVkaXQgYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZWRpdChldmVudCkge1xuICBtb2RhbF9lZGl0LnZhbHVlLnNob3coZXZlbnQucm93KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZWRpdCByZXBvcnQgKi9cbmFzeW5jIGZ1bmN0aW9uIGVkaXQocGFyYW1zKSB7XG4gIGF3YWl0IGVkaXRfcmVwb3J0X3Jlc3QocGFyYW1zKTtcbn1cblxuY29uc3QgZWRpdF9yZXBvcnRfcmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGVkaXRfcmVwb3J0X3VybCwge1xuICAgIC4uLnBhcmFtcyxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG5cbiAgcmVmcmVzaF90YWJsZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogR2V0IHRoZSBudW1iZXIgb2Ygcm93cyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2xvYWRlZCgpIHtcbiAgdG90YWxfcm93cy52YWx1ZSA9IHRhYmxlX3ZzX3JlcG9ydHMudmFsdWUuZ2V0X3Jvd3NfbnVtKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIG1hcCBjb2x1bW5zIGRhdGEgKi9cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG5cblxuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJyZXBvcnRfZGF0ZVwiOiAocmVwb3J0X2RhdGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwob3Blbl9yZXBvcnRfdXJsLCB7XG4gICAgICAgIHByaW50YWJsZTogZmFsc2UsXG4gICAgICAgIGVwb2NoX2VuZDogcm93LmVwb2NoLFxuICAgICAgICBlcG9jaF9iZWdpbjogcm93LmVwb2NoXG4gICAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIj4ke3JlcG9ydF9kYXRlfTwvYT5gO1xuICAgIH0sXG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICBcbiAgfSk7XG4gIFxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqIFJFU1QgRnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIHJlcG9ydCAqL1xuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9yZXBvcnRfdXJsLCB7XG4gICAgZXBvY2g6IHJvdy5lcG9jaFxuICB9KTtcbiAgZGVidWdnZXI7XG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG48L3NjcmlwdD5cbiAgIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyB0aXRsZSB9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj48Yj57e19pMThuKFwibmFtZVwiKX19OjwvYj48L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuX3NpbmdsZXdvcmRcIiBwbGFjZWhvbGRlcj1cIlwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiZmlsZV9uYW1lXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic3RvcmVfZmlsZVwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwic2F2ZVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBmaWxlX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lOiBGdW5jdGlvbixcbiAgICBzdG9yZV9maWxlOiBGdW5jdGlvbixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydmaWxlX3N0b3JlZCddKTtcblxubGV0IHBhdHRlcm5fc2luZ2xld29yZCA9IE50b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmQ7XG5cbmNvbnN0IGRpc2FibGVfYWRkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZyA9IG5ldyBSZWdFeHAocGF0dGVybl9zaW5nbGV3b3JkKTtcbiAgICByZXR1cm4gIXJnLnRlc3QoZmlsZV9uYW1lLnZhbHVlKTtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IHByb3BzLmdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lKCk7XG59XG5cbmNvbnN0IHN0b3JlX2ZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgcHJvcHMuc3RvcmVfZmlsZShmaWxlX25hbWUudmFsdWUpXG4gICAgZW1pdCgnZmlsZV9zdG9yZWQnLCBmaWxlX25hbWUudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgbnRvcCAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7IHRpdGxlIH19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICA8Yj57eyBfaTE4bihcIm9yZGVyX2J5XCIpIH19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiBAY2hhbmdlPVwic29ydF9maWxlc19ieSgpXCIgdi1tb2RlbD1cIm9yZGVyX2J5XCI+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5hbWVcIj57e19pMThuKFwibmFtZVwiKX19PC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRhdGVcIj57e19pMThuKFwiZGF0ZVwiKX19PC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgPGI+e3sgZmlsZV90aXRsZSB9fTwvYj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImZpbGVfc2VsZWN0ZWRcIiA6b3B0aW9ucz1cImZpbGVzXCI+XG4gICAgICAgIDwvU2VsZWN0U2VhcmNoPiAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiBAY2xpY2s9XCJkZWxldGVfZmlsZSh0cnVlKVwiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnQ7bWFyZ2luLWxlZnQ6IDBweDtcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIHN0YXJ0LTAgcG9zaXRpb24tYWJzb2x1dGUgbXMtM1wiPnt7X2kxOG4oXCJkZWxldGVfYWxsX2VudHJpZXNcIil9fTwvYnV0dG9uPiAgICBcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfZmlsZVwiIDpkaXNhYmxlZD1cImRpc2FibGVfc2VsZWN0XCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPnt7X2kxOG4oXCJkZWxldGVcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNlbGVjdF9maWxlXCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJvcGVuXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcbmNvbnN0IGZpbGVfc2VsZWN0ZWQgPSByZWYoe30pO1xuY29uc3QgZmlsZV9uYW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZmlsZXMgPSByZWYoW10pO1xuY29uc3Qgb3JkZXJfYnkgPSByZWYoXCJkYXRlXCIpOyAvLyBuYW1lIC8gZGF0ZVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmaWxlX3RpdGxlOiBTdHJpbmcsXG4gICAgbGlzdF9maWxlczogRnVuY3Rpb24sXG4gICAgb3Blbl9maWxlOiBGdW5jdGlvbixcbiAgICBkZWxldGVfZmlsZTogRnVuY3Rpb24sXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZmlsZV9kZWxldGVkJ10pO1xuXG5sZXQgcGF0dGVybl9zaW5nbGV3b3JkID0gTnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZDtcblxuY29uc3QgZGlzYWJsZV9zZWxlY3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGZpbGVfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIjtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5mdW5jdGlvbiBkaXNwbGF5X25hbWUoZmlsZSkge1xuICAgIGxldCB1dGNfbXMgPSBmaWxlLmVwb2NoICogMTAwMDtcbiAgICBsZXQgZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdCh1dGNfbXMsIFwiREQvTU0vWVlZWVwiKTtcbiAgICByZXR1cm4gYCR7ZmlsZS5uYW1lfSAoJHtkYXRlfSlgXG59XG5cbmZ1bmN0aW9uIHNvcnRfZmlsZXNfYnkoKSB7XG4gICAgZmlsZXMudmFsdWUgPSBmaWxlcy52YWx1ZS5zb3J0KChhLCBiKSA9PiB7XG5cdGlmIChvcmRlcl9ieS52YWx1ZSA9PSBcIm5hbWVcIikge1xuICAgICAgICAgICAgLyogTmFtZSBhc2MgKi9cblx0ICAgIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xuXHR9IGVsc2Uge1xuICAgICAgICAgICAgLyogRGF0ZSBkZXNjIChsYXN0IGZpcnN0KSAqL1xuXHQgICAgcmV0dXJuIGIuZXBvY2ggLSBhLmVwb2NoO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZpbGVzLnZhbHVlLmxlbmd0aCA+IDApIHtcblx0ZmlsZV9zZWxlY3RlZC52YWx1ZSA9IGZpbGVzLnZhbHVlWzBdO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBmaWxlX25hbWUudmFsdWUgPSBcIlwiO1xuICAgIGZpbGVzLnZhbHVlID0gYXdhaXQgcHJvcHMubGlzdF9maWxlcygpO1xuICAgIGZpbGVzLnZhbHVlLmZvckVhY2goKGYpID0+IGYubGFiZWwgPSBkaXNwbGF5X25hbWUoZikpO1xuICAgIHNvcnRfZmlsZXNfYnkoKTtcbiAgICBpZiAoZmlsZXMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRmaWxlX3NlbGVjdGVkLnZhbHVlID0gZmlsZXMudmFsdWVbMF07XG4gICAgfVxufVxuXG5jb25zdCBzZWxlY3RfZmlsZSA9ICgpID0+IHtcbiAgICBjbG9zZSgpO1xuICAgIHByb3BzLm9wZW5fZmlsZShmaWxlX3NlbGVjdGVkLnZhbHVlLm5hbWUpO1xufVxuXG5jb25zdCBkZWxldGVfZmlsZSA9IGFzeW5jIChkZWxldGVfYWxsKSA9PiB7XG4gICAgbGV0IG5hbWUgPSBmaWxlX3NlbGVjdGVkLnZhbHVlLm5hbWU7XG4gICAgaWYgKGRlbGV0ZV9hbGwgPT0gdHJ1ZSkgeyBuYW1lID0gXCIqXCI7IH1cbiAgICBpZiAocHJvcHMuZGVsZXRlX2ZpbGUobmFtZSkpIHtcbiAgICAgICAgZW1pdCgnZmlsZV9kZWxldGVkJywgbmFtZSk7XG4gICAgfVxuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgbnRvcCAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3sgdGl0bGUgfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgZmlsZV90aXRsZSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwib25fcGlja19maWxlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwidXBsb2FkXCIpfX08L2J1dHRvbj5cbiAgICAgICAgICA8c3Bhbj4mbmJzcDs8L3NwYW4+XG4gICAgICAgICAgPHNtYWxsIHYtc2hvdz1cIiFmaWxlX2NvbnRlbnRcIj5ObyBmaWxlIHNlbGVjdGVkPC9zbWFsbD5cbiAgICAgICAgICA8c21hbGwgdi1zaG93PVwiZmlsZV9uYW1lXCI+e3sgZmlsZV9uYW1lIH19PC9zbWFsbD5cbiAgICAgICAgICA8aW5wdXQgcmVmPVwiZmlsZV9pbnB1dFwiIHR5cGU9J2ZpbGUnIGFjY2VwdD1cImFwcGxpY2F0aW9uL0pTT05cIiBAY2hhbmdlPVwib25fZmlsZV9waWNrZWRcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmVcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNlbGVjdF9maWxlXCIgOmRpc2FibGVkPVwiIWZpbGVfY29udGVudFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcIm9wZW5cIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3QgZmlsZV9jb250ZW50ID0gcmVmKFwiXCIpO1xuY29uc3QgZmlsZV9uYW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZmlsZV9pbnB1dCA9IHJlZihudWxsKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY3NyZjogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgZmlsZV90aXRsZTogU3RyaW5nLFxuICAgIHVwbG9hZF9maWxlOiBGdW5jdGlvbixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydmaWxlX3VwbG9hZGVkJ10pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IFwiXCI7XG4gICAgZmlsZV9jb250ZW50LnZhbHVlID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gb25fcGlja19maWxlICgpIHtcbiAgICBmaWxlX2lucHV0LnZhbHVlLmNsaWNrKClcbn1cblxuZnVuY3Rpb24gb25fZmlsZV9waWNrZWQgKGV2ZW50KSB7XG4gICAgY29uc3QgZmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXM7XG5cbiAgICBmaWxlX25hbWUudmFsdWUgPSBmaWxlc1swXS5uYW1lO1xuXG4gICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBmaWxlX2NvbnRlbnQudmFsdWUgPSBmaWxlUmVhZGVyLnJlc3VsdDtcbiAgICB9KVxuICAgIGZpbGVSZWFkZXIucmVhZEFzVGV4dChmaWxlc1swXSk7XG5cbiAgICBlbWl0KCdmaWxlX3VwbG9hZGVkJywgZmlsZV9uYW1lLnZhbHVlKTtcbn1cblxuY29uc3Qgc2VsZWN0X2ZpbGUgPSAoKSA9PiB7XG4gICAgY2xvc2UoKTtcbiAgICBwcm9wcy51cGxvYWRfZmlsZShmaWxlX2NvbnRlbnQudmFsdWUpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbm50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9iZWdpbiAqIDEwMDAsICdERC9NTS9ZWVlZIEhIOm1tJykgKyAnIC0gJyArIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9lbmQgKiAxMDAwLCAnREQvTU0vWVlZWSBISDptbScpXG4tLT5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiA6Y2xhc3M9XCJ3aWR0aF9jbGFzc1wiIGNsYXNzPVwid2lkZ2V0LWJveC1tYWluLWRhc2hib2FyZFwiPlxuICAgIDxkaXYgOmNsYXNzPVwiaGVpZ2h0X2NsYXNzXCIgY2xhc3M9XCJ3aWRnZXQtYm94XCIgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIj5cbiAgICAgIDwhLS0gdGl0bGUgLS0+XG4gICAgICA8c2xvdCBuYW1lPVwiYm94X3RpdGxlXCI+PC9zbG90PlxuXG4gICAgICA8IS0tIGNvbnRlbnQgLS0+XG4gICAgICA8c2xvdCBuYW1lPVwiYm94X2NvbnRlbnRcIj48L3Nsb3Q+XG5cbiAgICAgIDwhLS0gZm9vdGVyIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTEgbWUtM1wiIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjBweDtyaWdodDowcHg7XCI+XG4gICAgICAgIDxzbG90IG5hbWU9XCJib3hfZm9vdGVyXCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgY29tcHV0ZWQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb2xvcjogU3RyaW5nLFxuICB3aWR0aDogTnVtYmVyLFxuICBoZWlnaHQ6IE51bWJlcixcbn0pO1xuXG5jb25zdCB3aWR0aF9jbGFzcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIGBjb2wtJHtwcm9wcy53aWR0aCB8fCA0fWA7XG59KTtcblxuY29uc3QgaGVpZ2h0X2NsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICBsZXQgY29sb3JfY2xhc3MgPSBgYDtcblxuICBpZiAocHJvcHMuY29sb3IpIHtcbiAgICAvKiBBY2NlcHRlZCBjb2xvcnM6IHByaW1hcnksIHNlY29uZGFyeSwgc3VjY2VzcywgZGFuZ2VyLCB3YXJuaW5nLCBpbmZvLCBsaWdodCwgZGFyaywgd2hpdGUgKi9cbiAgICBjb2xvcl9jbGFzcyA9IGBiZy0ke3Byb3BzLmNvbG9yfWA7XG4gIH1cblxuICByZXR1cm4gYHJvdy0ke3Byb3BzLmhlaWdodCB8fCA0fSAke2NvbG9yX2NsYXNzfWA7XG59KTtcbjwvc2NyaXB0PlxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2PjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBjb21wb25lbnRfaWQgPSByZWYoJ2VtcHR5X2NvbXBvbmVudCcpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBOdW1iZXIsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICByZWZyZXNoX2NvbXBvbmVudCgpO1xufSwgeyBmbHVzaDogJ3ByZScsIGRlZXA6IHRydWUgfSk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGluaXQoKTtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgcmVmcmVzaF9jb21wb25lbnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF9jb21wb25lbnQoKSB7XG4gICAgLyogUmVmcmVzaCBjb21wb25lbnQgKi9cbn1cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0Oi0xcmVtO21hcmdpbi1yaWdodDotMXJlbTtcIj5cbiAgPEJvb3RzdHJhcFRhYmxlXG4gICAgOmlkPVwidGFibGVfaWRcIiBcbiAgICA6Y29sdW1ucz1cImNvbHVtbnNcIlxuICAgIDpyb3dzPVwidGFibGVfcm93c1wiXG4gICAgOnByaW50X2h0bWxfY29sdW1uPVwicmVuZGVyX2NvbHVtblwiXG4gICAgOnByaW50X2h0bWxfcm93PVwicmVuZGVyX3Jvd1wiXG4gICAgOndyYXBfY29sdW1ucz1cInRydWVcIj5cbiAgPC9Cb290c3RyYXBUYWJsZT5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCwgY29tcHV0ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBzY2FuX3R5cGVfZixsYXN0X3NjYW5fZiwgZHVyYXRpb25fZiwgc2Nhbl9mcmVxdWVuY3lfZiwgaXNfb2tfbGFzdF9zY2FuX2YsIHRjcF9wb3J0c19mLCB0Y3BfcG9ydF9mLCBob3N0c19mLCBob3N0X2YsIGN2ZXNfZiwgbWF4X3Njb3JlX2N2ZV9mLCB1ZHBfcG9ydHNfZiwgbnVtX3Z1bG5fZm91bmRfZiwgdGNwX3VkcF9wb3J0c19saXN0X2YgIH0gZnJvbSBcIi4uL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzXCI7IFxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignc2ltcGxlX3RhYmxlJyk7XG5jb25zdCB0YWJsZV9yb3dzID0gcmVmKFtdKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZywgICAgICAgICAgLyogQ29tcG9uZW50IElEICovXG4gICAgaTE4bl90aXRsZTogU3RyaW5nLCAgLyogVGl0bGUgKGkxOG4pICovXG4gICAgaWZpZDogTnVtYmVyLCAgICAgICAgLyogSW50ZXJmYWNlIElEICovXG4gICAgZXBvY2hfYmVnaW46IE51bWJlciwgLyogVGltZSBpbnRlcnZhbCBiZWdpbiAqL1xuICAgIGVwb2NoX2VuZDogTnVtYmVyLCAgIC8qIFRpbWUgaW50ZXJ2YWwgZW5kICovXG4gICAgbWF4X3dpZHRoOiBOdW1iZXIsICAgLyogQ29tcG9uZW50IFdpZHRoICg0LCA4LCAxMikgKi9cbiAgICBtYXhfaGVpZ2h0OiBOdW1iZXIsICAvKiBDb21wb25lbnQgSGVoZ2h0ICg0LCA4LCAxMikqL1xuICAgIHBhcmFtczogT2JqZWN0LCAgICAgIC8qIENvbXBvbmVudC1zcGVjaWZpYyBwYXJhbWV0ZXJzIGZyb20gdGhlIEpTT04gdGVtcGxhdGUgZGVmaW5pdGlvbiAqL1xuICAgIGdldF9jb21wb25lbnRfZGF0YTogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHJlcXVlc3QgZGF0YSAoUkVTVCkgKi9cbiAgICBmaWx0ZXJzOiBPYmplY3Rcbn0pO1xuXG5jb25zdCBjb2x1bW5zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCBjb2x1bW5zID0gcHJvcHMucGFyYW1zLmNvbHVtbnMubWFwKChjKSA9PiB7XG4gICAgICAgIGlmICghYy5zdHlsZSAmJiBjLmRhdGFfdHlwZSkge1xuICAgICAgICAgICAgaWYgKGMuZGF0YV90eXBlID09IFwiYnl0ZXNcIiB8fCBjLmRhdGFfdHlwZSA9PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIGMuc3R5bGUgPSBcInRleHQtYWxpZ246IHJpZ2h0XCI7XG4gICAgICAgICAgICB9IGVsc2UgIGlmIChjLmRhdGFfdHlwZSA9PSBcImNvdW50X3Njb3JlXCIpIHtcbiAgICAgICAgICAgICAgICBjLnN0eWxlID0gXCJ0ZXh0LWFsaWduOiBjZW50ZXJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblx0cmV0dXJuIHtcblx0ICAgIC4uLmMsXG5cdH07XG4gICAgfSk7XG5cbiAgICBjb2x1bW5zWzBdLmNsYXNzID0gKGNvbHVtbnNbMF0uY2xhc3MgPyAoY29sdW1uc1swXS5jbGFzcyArIFwiIFwiKSA6IFwiXCIpIFxuICAgICAgKyBcImZpcnN0LWNvbC13aWR0aFwiO1xuXG4gICAgcmV0dXJuIGNvbHVtbnM7XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHJlZnJlc2hfdGFibGUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBpbml0KCk7XG59KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHJlZnJlc2hfdGFibGUoKTtcbn1cblxuY29uc3QgcmVuZGVyX2NvbHVtbiA9IGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgaWYgKGNvbHVtbi5pMThuX25hbWUpIHsgcmV0dXJuIF9pMThuKGNvbHVtbi5pMThuX25hbWUpOyB9XG4gIHJldHVybiBcIlwiO1xufVxuXG5jb25zdCByb3dfcmVuZGVyX2Z1bmN0aW9ucyA9IHtcbiAgLyogUmVuZGVyIGZ1bmN0aW9uIGZvciAndGhyb3VnaHB1dCcgdGFibGUgdHlwZSAqL1xuICB0aHJvdWdocHV0OiBmdW5jdGlvbiAoY29sdW1uLCByb3cpIHtcbiAgICBpZiAoY29sdW1uLmlkID09ICduYW1lJykge1xuICAgICAgaWYgKHJvd1sndXJsJ10pXG4gICAgICAgIHJldHVybiBgPGEgaHJlZj0nJHtyb3cudXJsfSc+JHtyb3cubmFtZX08L2E+YDtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIHJvdy5uYW1lO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09ICd0aHJvdWdocHV0Jykge1xuICAgICAgaWYgKHJvd1sndGhyb3VnaHB1dF90eXBlJ10gJiYgcm93Wyd0aHJvdWdocHV0X3R5cGUnXSA9PSAncHBzJykge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmZwYWNrZXRzKHJvd1tjb2x1bW4uaWRdKTtcbiAgICAgIH0gZWxzZSBpZiAocm93Wyd0aHJvdWdocHV0X3R5cGUnXSAmJiByb3dbJ3Rocm91Z2hwdXRfdHlwZSddID09ICdicHMnKSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYml0c1RvU2l6ZShyb3dbY29sdW1uLmlkXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcm93Wyd0aHJvdWdocHV0J107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgfSxcblxuICAvKiBSZW5kZXIgZnVuY3Rpb24gZm9yICdkYl9zZWFyY2gnIHRhYmxlIHR5cGUgKi9cbiAgZGJfc2VhcmNoOiBmdW5jdGlvbiAoY29sdW1uLCByb3cpIHtcbiAgICBpZiAoY29sdW1uLmRhdGFfdHlwZSA9PSAnaG9zdCcpIHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0SG9zdChyb3dbY29sdW1uLmlkXSwgcm93LCAoY29sdW1uLmlkID09ICdjbGlfaXAnKSk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICduZXR3b3JrJykge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXROZXR3b3JrKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmRhdGFfdHlwZSA9PSAnYXNuJykge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRBU04ocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICdjb3VudHJ5Jykge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRDb3VudHJ5KHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVyVXRpbHMudHlwZXNbY29sdW1uLmRhdGFfdHlwZV0pIHtcbiAgICAgIC8vICdieXRlcycsICdicHMnLCAncHBzJywgLi4uXG4gICAgICBsZXQgZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGNvbHVtbi5kYXRhX3R5cGUpO1xuICAgICAgcmV0dXJuIGZvcm1hdHRlcihyb3dbY29sdW1uLmlkXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygcm93W2NvbHVtbi5pZF0gPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdEdlbmVyaWNPYmoocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByb3dbY29sdW1uLmlkXTtcbiAgICB9XG4gIH0sXG5cbiAgdnNfc2Nhbl9yZXN1bHQ6IGZ1bmN0aW9uKGNvbHVtbiwgcm93KSB7XG4gICAgaWYoY29sdW1uLmlkID09IFwiaG9zdFwiKSB7XG4gICAgICByZXR1cm4gaG9zdF9mKHJvd1tjb2x1bW4uaWRdLCByb3csIHByb3BzLmlmaWQpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJsYXN0X3NjYW5cIikge1xuICAgICAgcmV0dXJuIGxhc3Rfc2Nhbl9mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICByZXR1cm4gZHVyYXRpb25fZihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYoY29sdW1uLmlkID09IFwic2Nhbl9mcmVxdWVuY3lcIikge1xuICAgICAgcmV0dXJuIHNjYW5fZnJlcXVlbmN5X2Yocm93W2NvbHVtbi5pZF0pO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJpc19va19sYXN0X3NjYW5cIikge1xuICAgICAgcmV0dXJuIGlzX29rX2xhc3Rfc2Nhbl9mKHJvd1tjb2x1bW4uaWRdKTtcbiAgICB9IGVsc2UgaWYoY29sdW1uLmlkID09IFwidGNwX3BvcnRzXCIpIHtcbiAgICAgIHJldHVybiB0Y3BfcG9ydHNfZihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYoY29sdW1uLmlkID09IFwidWRwX3BvcnRzXCIpIHtcbiAgICAgIHJldHVybiB1ZHBfcG9ydHNfZihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9ICBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcInNjYW5fdHlwZVwiKSB7XG4gICAgICByZXR1cm4gc2Nhbl90eXBlX2Yocm93W2NvbHVtbi5pZF0pO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwiaG9zdHNcIikge1xuICAgICAgcmV0dXJuIGhvc3RzX2Yocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gXCJjdmVcIiB8fCBjb2x1bW4uaWQgPT0gXCJjdmVfbGlzdFwiKSB7XG4gICAgICByZXR1cm4gY3Zlc19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwicG9ydFwiKSB7XG4gICAgICByZXR1cm4gdGNwX3BvcnRfZihyb3dbY29sdW1uLmlkXSxyb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwibWF4X3Njb3JlX2N2ZVwiKSB7XG4gICAgICByZXR1cm4gbWF4X3Njb3JlX2N2ZV9mKHJvd1tjb2x1bW4uaWRdLHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gXCJudW1fdnVsbmVyYWJpbGl0aWVzX2ZvdW5kXCIpIHtcbiAgICAgIHJldHVybiBudW1fdnVsbl9mb3VuZF9mKHJvd1tjb2x1bW4uaWRdLHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gXCJ0Y3BfdWRwX3BvcnRzX2xpc3RcIikge1xuICAgICAgcmV0dXJuIHRjcF91ZHBfcG9ydHNfbGlzdF9mKHJvd1tcInRjcF9wb3J0c19saXN0XCJdLCByb3dbXCJ1ZHBfcG9ydHNfbGlzdFwiXSwgcm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVuZGVyX3JvdyA9IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICBpZiAocHJvcHMucGFyYW1zICYmIFxuICAgICAgcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgJiYgXG4gICAgICByb3dfcmVuZGVyX2Z1bmN0aW9uc1twcm9wcy5wYXJhbXMudGFibGVfdHlwZV0pIHtcbiAgICBjb25zdCByZW5kZXJfZnVuYyA9IHJvd19yZW5kZXJfZnVuY3Rpb25zW3Byb3BzLnBhcmFtcy50YWJsZV90eXBlXTtcbiAgICByZXR1cm4gcmVuZGVyX2Z1bmMoY29sdW1uLCByb3cpO1xuICB9IGVsc2UgaWYgKHJvd1tjb2x1bW4uaWRdKSB7XG4gICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIGNvbnN0IHVybF9wYXJhbXMgPSB7XG4gICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gIH1cbiAgY29uc3QgcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXMpO1xuIFxuICAvL2xldCBkYXRhID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH0/JHtxdWVyeV9wYXJhbXN9YCk7XG4gIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gIGxldCByb3dzID0gW107XG4gIGlmIChwcm9wcy5wYXJhbXMudGFibGVfdHlwZSA9PSAnZGJfc2VhcmNoJykge1xuICAgIHJvd3MgPSBkYXRhLnJlY29yZHM7IC8qIGRiX3NlYXJjaDogcmVhZCBkYXRhIGZyb20gZGF0YS5yZWNvcmRzICovXG4gIH0gZWxzZSB7XG4gICAgcm93cyA9IGRhdGE7IC8qIGRlZmF1bHQ6IGRhdGEgaXMgdGhlIGFycmF5IG9mIHJlY29yZHMgKi9cbiAgfVxuXG4gIGlmICggcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgIT0gJ3ZzX3NjYW5fcmVzdWx0Jykge1xuICAgIGNvbnN0IG1heF9yb3dzID0gcHJvcHMubWF4X2hlaWdodCA/ICgocHJvcHMubWF4X2hlaWdodC80KSAqIDYpIDogNjtcbiAgICByb3dzID0gcm93cy5zbGljZSgwLCBtYXhfcm93cyk7XG4gIH0gXG5cbiAgdGFibGVfcm93cy52YWx1ZSA9IHJvd3M7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmZpcnN0LWNvbC13aWR0aCB7XG4gICAgLyogbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7ICovXG59XG5cbkBtZWRpYSBwcmludCBhbmQgKG1heC13aWR0aDogMjEwbW0pIHtcbiAgICB0ZC5maXJzdC1jb2wtd2lkdGgge1xuXHRtYXgtd2lkdGg6IDU1bW0gIWltcG9ydGFudDtcbiAgICB9XG59XG5AbWVkaWEgcHJpbnQgYW5kIChtaW4td2lkdGg6IDIxMW1tKSB7XG4gICAgdGQuZmlyc3QtY29sLXdpZHRoIHtcblx0bWF4LXdpZHRoOiA5NW1tICFpbXBvcnRhbnQ7XG4gICAgfVxufVxuXG4vKiBAbWVkaWEgcHJpbnQgYW5kIChtYXgtd2lkdGg6IDE0OG1tKXsgKi9cbi8qIH0gKi9cblxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGEgOmhyZWY9XCJsaW5rX3VybFwiPlxuICAgICAgICAgICAgPGg0IGNsYXNzPVwiZnctbm9ybWFsIHRleHQtd2hpdGVcIj57eyBjb3VudGVyIH19PC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwic3VidGl0bGUgdGV4dC13aGl0ZSB0ZXh0LXNtIHRleHQgbWItMCBoNVwiPnt7IG5hbWUgfX08L3A+XG4gICAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1zaHJpbmstMCBtcy0zXCI+XG4gICAgICAgIDxpIGNsYXNzPVwidGV4dC13aGl0ZVwiIDpjbGFzcz1cImljb25cIj48L2k+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgY29tcG9uZW50X2lkID0gcmVmKCdlbXB0eV9jb21wb25lbnQnKTtcblxuY29uc3QgY291bnRlciA9IHJlZignJylcbmNvbnN0IG5hbWUgPSByZWYoJycpXG5jb25zdCBpY29uID0gcmVmKCcnKVxuY29uc3QgbGlua191cmwgPSByZWYoJyMnKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBOdW1iZXIsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgcmVmcmVzaF9jb21wb25lbnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgaWYgKHByb3BzLnBhcmFtcy5pMThuX25hbWUpIHtcbiAgICBuYW1lLnZhbHVlID0gX2kxOG4ocHJvcHMucGFyYW1zLmkxOG5fbmFtZSk7XG4gIH1cblxuICBpZiAocHJvcHMucGFyYW1zLmljb24pIHtcbiAgICBpY29uLnZhbHVlID0gcHJvcHMucGFyYW1zLmljb24gKyAnIGZhLTJ4bCc7XG4gIH1cblxuICByZWZyZXNoX2NvbXBvbmVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX2NvbXBvbmVudCgpIHtcbiAgLyogUmVmcmVzaCBjb21wb25lbnQgKi9cblxuICBpZiAocHJvcHMucGFyYW1zLnVybCkge1xuXG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgLi4ucHJvcHMuZmlsdGVyc1xuICAgIH1cbiAgICBjb25zdCBxdWVyeV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtcyk7XG5cbiAgICAvLyBsZXQgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtodHRwX3ByZWZpeH0ke3Byb3BzLnBhcmFtcy51cmx9PyR7cXVlcnlfcGFyYW1zfWApO1xuICAgIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gICAgLyogVE9ETyBoYW5kbGUgZG90LXNlcGFyYXRlZCBwYXRoIGZvciBub24tZmxhdCBqc29uICovXG4gICAgbGV0IGNvdW50ZXJfdmFsdWUgPSBkYXRhW3Byb3BzLnBhcmFtcy5jb3VudGVyX3BhdGhdO1xuXG4gICAgbGV0IGNvdW50ZXJfZm9ybWF0dGVyID0gZGF0YVtwcm9wcy5wYXJhbXMuY291bnRlcl9mb3JtYXR0ZXJdO1xuICAgIGlmICghY291bnRlcl9mb3JtYXR0ZXIpIHtcbiAgICAgIGNvdW50ZXJfZm9ybWF0dGVyID0gXCJudW1iZXJcIjtcbiAgICB9XG5cbiAgICBsZXQgZm9ybWF0Q291bnRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihjb3VudGVyX2Zvcm1hdHRlcik7XG4gICAgY291bnRlci52YWx1ZSA9IGZvcm1hdENvdW50ZXIoY291bnRlcl92YWx1ZSlcblxuICAgIGlmIChwcm9wcy5wYXJhbXMubGluaykge1xuICAgICAgY29uc3QgbGlua191cmxfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICAgIGVwb2NoX2VuZDogcHJvcHMuZXBvY2hfZW5kLFxuICAgICAgICAuLi5wcm9wcy5wYXJhbXMubGluay51cmxfcGFyYW1zXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxpbmtfcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGxpbmtfdXJsX3BhcmFtcyk7XG4gICAgICBsaW5rX3VybC52YWx1ZSA9IGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLmxpbmsudXJsfT8ke2xpbmtfcXVlcnlfcGFyYW1zfWA7XG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8Q2hhcnQgcmVmPVwiY2hhcnRcIiA6aWQ9XCJpZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiIDpiYXNlX3VybF9yZXF1ZXN0PVwiYmFzZV91cmxcIlxuICAgICAgICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9jaGFydF9vcHRpb25zXCIgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICA8L0NoYXJ0PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCwgY29tcHV0ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgY2hhcnRfdHlwZSA9IHJlZihudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCk7XG5jb25zdCBjaGFydCA9IHJlZihudWxsKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZywgICAgICAgICAgLyogQ29tcG9uZW50IElEICovXG4gICAgaTE4bl90aXRsZTogU3RyaW5nLCAgLyogVGl0bGUgKGkxOG4pICovXG4gICAgaWZpZDogTnVtYmVyLCAgICAgICAgLyogSW50ZXJmYWNlIElEICovXG4gICAgZXBvY2hfYmVnaW46IE51bWJlciwgLyogVGltZSBpbnRlcnZhbCBiZWdpbiAqL1xuICAgIGVwb2NoX2VuZDogTnVtYmVyLCAgIC8qIFRpbWUgaW50ZXJ2YWwgZW5kICovXG4gICAgbWF4X3dpZHRoOiBOdW1iZXIsICAgLyogQ29tcG9uZW50IFdpZHRoICg0LCA4LCAxMikgKi9cbiAgICBtYXhfaGVpZ2h0OiBOdW1iZXIsICAvKiBDb21wb25lbnQgSGVoZ2h0ICg0LCA4LCAxMikqL1xuICAgIHBhcmFtczogT2JqZWN0LCAgICAgIC8qIENvbXBvbmVudC1zcGVjaWZpYyBwYXJhbWV0ZXJzIGZyb20gdGhlIEpTT04gdGVtcGxhdGUgZGVmaW5pdGlvbiAqL1xuICAgIGdldF9jb21wb25lbnRfZGF0YTogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHJlcXVlc3QgZGF0YSAoUkVTVCkgKi9cbiAgICBmaWx0ZXJzOiBPYmplY3Rcbn0pO1xuXG5jb25zdCBiYXNlX3VybCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gYCR7aHR0cF9wcmVmaXh9JHtwcm9wcy5wYXJhbXMudXJsfWA7XG59KTtcblxuY29uc3QgZ2V0X3VybF9wYXJhbXMgPSAoKSA9PiB7XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogcHJvcHMuaWZpZCxcbiAgICAgICAgZXBvY2hfYmVnaW46IHByb3BzLmVwb2NoX2JlZ2luLFxuICAgICAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgICAgICAgbmV3X2NoYXJ0czogdHJ1ZSxcbiAgICAgICAgLi4ucHJvcHMucGFyYW1zLnVybF9wYXJhbXMsXG4gICAgICAgIC4uLnByb3BzLmZpbHRlcnNcbiAgICB9XG4gICAgbGV0IHF1ZXJ5X3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcGFyYW1zKTtcblxuICAgIC8qIFB1c2ggaWZpZCB0byB0aGUgcGFyYW1ldGVycyAoZS5nLiBcInRzX3F1ZXJ5PWlmaWQ6JElGSUQkXCIgKi9cbiAgICBxdWVyeV9wYXJhbXMgPSBxdWVyeV9wYXJhbXMucmVwbGFjZUFsbChcIiUyNElGSUQlMjRcIiAvKiAkSUZJRCQgKi8sIHByb3BzLmlmaWQpO1xuXG4gICAgcmV0dXJuIHF1ZXJ5X3BhcmFtcztcbn1cblxuZnVuY3Rpb24gZ2V0X2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgY29uc3QgdXJsID0gYmFzZV91cmwudmFsdWU7XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IGdldF91cmxfcGFyYW1zKCk7XG4gICAgcmV0dXJuIHByb3BzLmdldF9jb21wb25lbnRfZGF0YSh1cmwsIHVybF9wYXJhbXMpO1xufVxuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgcmVmcmVzaF9jaGFydCgpO1xufSwgeyBmbHVzaDogJ3ByZScsIGRlZXA6IHRydWUgfSk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGluaXQoKTtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy9yZWZyZXNoX2NoYXJ0KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfY2hhcnQoKSB7XG4gICAgY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KCk7XG59XG48L3NjcmlwdD4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuICAgICAgPCEtLSA6Z2V0X3BhcmFtc191cmxfcmVxdWVzdD1cImdldF91cmxfcGFyYW1zXCIgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8VGltZXNlcmllc0NoYXJ0IHJlZj1cImNoYXJ0XCIgOmlkPVwiaWRcIiA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIiA6YmFzZV91cmxfcmVxdWVzdD1cImJhc2VfdXJsXCJcbiAgICAgIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfY2hhcnRfb3B0aW9uc1wiIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIiA6ZGlzYWJsZV9wb2ludGVyX2V2ZW50cz1cInRydWVcIj5cbiAgICA8L1RpbWVzZXJpZXNDaGFydD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUaW1lc2VyaWVzQ2hhcnQgfSBmcm9tIFwiLi90aW1lc2VyaWVzLWNoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGhlaWdodF9wZXJfcm93ID0gNjIuNSAvKiBweCAqL1xuY29uc3QgY2hhcnRfdHlwZSA9IHJlZihudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGltZXNlcmllc19ncm91cHMgPSByZWYoW10pO1xuY29uc3QgZ3JvdXBfb3B0aW9uX21vZGUgPSByZWYobnVsbCk7XG5jb25zdCBoZWlnaHQgPSByZWYobnVsbCk7XG5jb25zdCB0c19yZXF1ZXN0ID0gcmVmKFtdKTtcbmNvbnN0IHNvdXJjZV9kZWZfYXJyYXkgPSByZWYoW10pXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWQ6IFN0cmluZywgICAgICAgICAgLyogQ29tcG9uZW50IElEICovXG4gIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICBpZmlkOiBOdW1iZXIsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgZXBvY2hfYmVnaW46IE51bWJlciwgLyogVGltZSBpbnRlcnZhbCBiZWdpbiAqL1xuICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICBtYXhfaGVpZ2h0OiBOdW1iZXIsICAvKiBDb21wb25lbnQgSGVoZ2h0ICg0LCA4LCAxMikqL1xuICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICBjc3JmOiBTdHJpbmcsXG4gIGZpbHRlcnM6IE9iamVjdCxcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUmV0dXJuIHRoZSBiYXNlIHVybCBvZiB0aGUgUkVTVCBBUEkgKi9cbmNvbnN0IGJhc2VfdXJsID0gY29tcHV0ZWQoKCkgPT4ge1xuICByZXR1cm4gYCR7aHR0cF9wcmVmaXh9JHtwcm9wcy5wYXJhbXMudXJsfWA7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHN1YnN0aXR1dGVfaWZpZChwYXJhbXNfdG9fZm9ybWF0LCBjdXJyZW50X2lmaWQpIHtcbiAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0ge307XG4gIGZvciAoY29uc3QgcGFyYW0gaW4gKHBhcmFtc190b19mb3JtYXQpKSB7XG4gICAgaWYgKHBhcmFtc190b19mb3JtYXRbcGFyYW1dLmNvbnRhaW5zKCckSUZJRCQnKSkge1xuICAgICAgLyogQ29udGFpbnMgJElGSUQkLCBzdWJzdGl0dXRlIHdpdGggdGhlIGludGVyZmFjZSBpZCAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV0ucmVwbGFjZSgnJElGSUQkJywgY3VycmVudF9pZmlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZG9lcyBOT1QgQ29udGFpbnMgJElGSUQkLCBhZGQgdGhlIHBsYWluIHBhcmFtICovXG4gICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtc1twYXJhbV0gPSBwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3X2Zvcm1hdHRlZF9wYXJhbXM7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzdWJzdGl0dXRlX2V4cG9ydGVyKHBhcmFtc190b19mb3JtYXQsIGN1cnJlbnRfZXhwb3J0ZXIpIHtcbiAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0ge307XG4gIGZvciAoY29uc3QgcGFyYW0gaW4gKHBhcmFtc190b19mb3JtYXQpKSB7XG4gICAgaWYgKHBhcmFtc190b19mb3JtYXRbcGFyYW1dLmNvbnRhaW5zKCckRVhQT1JURVIkJykpIHtcbiAgICAgIC8qIENvbnRhaW5zICRFWFBPUlRFUiQsIHN1YnN0aXR1dGUgd2l0aCB0aGUgaW50ZXJmYWNlIGlkICovXG4gICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtc1twYXJhbV0gPSBwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5yZXBsYWNlKCckRVhQT1JURVIkJywgY3VycmVudF9leHBvcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGRvZXMgTk9UIENvbnRhaW5zICRFWFBPUlRFUiQsIGFkZCB0aGUgcGxhaW4gcGFyYW0gKi9cbiAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zW3BhcmFtXSA9IHBhcmFtc190b19mb3JtYXRbcGFyYW1dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdfZm9ybWF0dGVkX3BhcmFtcztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHN1YnN0aXR1dGVfbmV0d29yayhwYXJhbXNfdG9fZm9ybWF0LCBjdXJyZW50X25ldHdvcmspIHtcbiAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0ge307XG4gIGZvciAoY29uc3QgcGFyYW0gaW4gKHBhcmFtc190b19mb3JtYXQpKSB7XG4gICAgaWYgKHBhcmFtc190b19mb3JtYXRbcGFyYW1dLmNvbnRhaW5zKCckTkVUV09SSyQnKSkge1xuICAgICAgLyogQ29udGFpbnMgJE5FVFdPUkskLCBzdWJzdGl0dXRlIHdpdGggdGhlIGludGVyZmFjZSBpZCAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV0ucmVwbGFjZSgnJE5FVFdPUkskJywgY3VycmVudF9uZXR3b3JrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZG9lcyBOT1QgQ29udGFpbnMgJE5FVFdPUkskLCBhZGQgdGhlIHBsYWluIHBhcmFtICovXG4gICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtc1twYXJhbV0gPSBwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3X2Zvcm1hdHRlZF9wYXJhbXM7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3Vic3RpdHV0ZSB0byB0aGUgJElGSUQkIGZvdW5kIGluIHRoZVxuICogY29uZmlndXJhdGlvbiB0aGUgY29ycmVjdCBpbnRlcmZhY2UgaWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0X2lmaWRzKHBhcmFtc190b19mb3JtYXQpIHtcbiAgaWYgKHRzX3JlcXVlc3QudmFsdWUubGVuZ3RoID4gMCkge1xuICAgIC8qIEFscmVhZHkgcG9wdWxhdGVkLCByZXR1cm4gKi9cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgaWZpZF91cmwgPSBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIlxuICBjb25zdCBpZmlkX2xpc3QgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9LyR7aWZpZF91cmx9YCkgfHwgW107XG4gIGlmaWRfbGlzdC5mb3JFYWNoKChpZmFjZSkgPT4ge1xuICAgIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHN1YnN0aXR1dGVfaWZpZChwYXJhbXNfdG9fZm9ybWF0LCBpZmFjZS5pZmlkKTtcbiAgICBuZXdfZm9ybWF0dGVkX3BhcmFtcy5zb3VyY2VfZGVmID0gW2lmYWNlLmlmaWRdXG4gICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3Vic3RpdHV0ZSB0byB0aGUgJEVYUE9SVEVSJCBmb3VuZCBpbiB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gdGhlIGNvcnJlY3QgZmxvdyBleHBvcnRlclxuICovXG5hc3luYyBmdW5jdGlvbiBmb3JtYXRfZXhwb3J0ZXJzKHBhcmFtc190b19mb3JtYXQpIHtcbiAgaWYgKHRzX3JlcXVlc3QudmFsdWUubGVuZ3RoID4gMCkge1xuICAgIC8qIEFscmVhZHkgcG9wdWxhdGVkLCByZXR1cm4gKi9cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZXhwb3J0ZXJzX3VybCA9IFwibHVhL3Byby9yZXN0L3YyL2dldC9mbG93ZGV2aWNlcy9zdGF0cy5sdWFcIlxuICBjb25zdCBleHBvcnRlcnNfbGlzdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtodHRwX3ByZWZpeH0vJHtleHBvcnRlcnNfdXJsfT9pZmlkPSR7cHJvcHMuaWZpZH0mZ3VpPXRydWVgKSB8fCBbXTtcbiAgaWYgKGV4cG9ydGVyc19saXN0KSB7XG4gICAgZXhwb3J0ZXJzX2xpc3QuZm9yRWFjaCgoZXhwb3J0ZXIpID0+IHtcbiAgICAgIGlmIChleHBvcnRlcikge1xuICAgICAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2V4cG9ydGVyKHBhcmFtc190b19mb3JtYXQsIGV4cG9ydGVyLnByb2JlX2lwKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2lmaWQobmV3X2Zvcm1hdHRlZF9wYXJhbXMsIGV4cG9ydGVyLmlmaWQpO1xuICAgICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtcy5zb3VyY2VfZGVmID0gW2V4cG9ydGVyLnByb2JlX2lwXVxuICAgICAgICB0c19yZXF1ZXN0LnZhbHVlLnB1c2gobmV3X2Zvcm1hdHRlZF9wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3Vic3RpdHV0ZSB0byB0aGUgJE5FVFdPUkskIGZvdW5kIGluIHRoZVxuICogY29uZmlndXJhdGlvbiBpbiB0aGUgY29ycmVjdCBuZXR3b3Jrc1xuICovXG5hc3luYyBmdW5jdGlvbiBmb3JtYXRfbmV0d29ya3MocGFyYW1zX3RvX2Zvcm1hdCkge1xuICBpZiAodHNfcmVxdWVzdC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgLyogQWxyZWFkeSBwb3B1bGF0ZWQsIHJldHVybiAqL1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBuZXR3b3Jrc191cmwgPSBcImx1YS9yZXN0L3YyL2dldC9uZXR3b3JrL25ldHdvcmtzLmx1YVwiXG4gIGNvbnN0IG5ldHdvcmtzX2xpc3QgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9LyR7bmV0d29ya3NfdXJsfT9pZmlkPSR7cHJvcHMuaWZpZH1gKSB8fCBbXTtcbiAgaWYgKG5ldHdvcmtzX2xpc3QpIHtcbiAgICBuZXR3b3Jrc19saXN0LmZvckVhY2goKG5ldHdvcmspID0+IHtcbiAgICAgIGlmIChuZXR3b3JrKSB7XG4gICAgICAgIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHN1YnN0aXR1dGVfbmV0d29yayhwYXJhbXNfdG9fZm9ybWF0LCBuZXR3b3JrLmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2lmaWQobmV3X2Zvcm1hdHRlZF9wYXJhbXMsIHByb3BzLmlmaWQpO1xuICAgICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtcy5zb3VyY2VfZGVmID0gW3Byb3BzLmlmaWQsIG5ldHdvcmsuaWRdO1xuICAgICAgICB0c19yZXF1ZXN0LnZhbHVlLnB1c2gobmV3X2Zvcm1hdHRlZF9wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhbnNmb3JtIHRoZSAkQU5ZJCBwYXJhbXMgaW4gdGhlIFxuICogY29ycmVjdCB2YWx1ZSAoZS5nLiAkQU5ZX0lGSUQkIC0+IGxpc3Qgb2YgYWxsIGlmaWQpXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVfYW55X3BhcmFtcygpIHtcbiAgLyogSGVyZSBwb3NzaWJsZSBBTlksIGNhbiBiZSBmb3VuZCBpbiB0aGUgcG9zdF9wYXJhbXMgKi9cbiAgY29uc3QgcGFyYW1zID0gcHJvcHMucGFyYW1zLnBvc3RfcGFyYW1zPy50c19yZXF1ZXN0cztcbiAgZm9yIChjb25zdCBhbnlfcGFyYW0gaW4gKHBhcmFtcyB8fCB7fSkpIHtcbiAgICBzd2l0Y2ggKGFueV9wYXJhbSkge1xuICAgICAgY2FzZSAnJEFOWV9JRklEJCc6XG4gICAgICAgIGF3YWl0IGZvcm1hdF9pZmlkcyhwYXJhbXNbYW55X3BhcmFtXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJEFOWV9FWFBPUlRFUiQnOlxuICAgICAgICBhd2FpdCBmb3JtYXRfZXhwb3J0ZXJzKHBhcmFtc1thbnlfcGFyYW1dKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICckQU5ZX05FVFdPUkskJzpcbiAgICAgICAgYXdhaXQgZm9ybWF0X25ldHdvcmtzKHBhcmFtc1thbnlfcGFyYW1dKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2lmaWQocGFyYW1zW2FueV9wYXJhbV0sIHByb3BzLmlmaWQpO1xuICAgICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtcy5zb3VyY2VfZGVmID0gW3Byb3BzLmlmaWRdO1xuICAgICAgICB0c19yZXF1ZXN0LnZhbHVlLnB1c2gobmV3X2Zvcm1hdHRlZF9wYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoZSBzb3VyY2VfdHlwZSBjYW4gYmUgZm91bmQgb24gdGhlIGpzb24gYW5kIHRoZSBzb3VyY2VfYXJyYXkgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWRcbiAqIGJ5IHVzaW5nIHRoZSBzb3VyY2VfdHlwZVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljX3NjaGVtYSwgc291cmNlX2RlZikge1xuICBjb25zdCBzdGF0dXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IHByb3BzLmVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogcHJvcHMuZXBvY2hfZW5kLFxuICB9O1xuICBjb25zdCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VfdHlwZV9mcm9tX2lkKHByb3BzLnBhcmFtcz8uc291cmNlX3R5cGUpO1xuICBjb25zdCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfZGVmKTtcbiAgY29uc3QgbWV0cmljID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X21ldHJpY19mcm9tX3NjaGVtYShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljX3NjaGVtYSwgbnVsbCwgc3RhdHVzKTtcbiAgY29uc3QgdHNfZ3JvdXAgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgcmV0dXJuIHRzX2dyb3VwO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuYXN5bmMgZnVuY3Rpb24gcmV0cmlldmVfYmFzaWNfaW5mbygpIHtcbiAgLyogUmV0dXJuIHRoZSB0aW1lc2VyaWVzIGdyb3VwLCBpbmZvIGZvdW5kIGluIHRoZSBqc29uICovXG4gIGlmICh0aW1lc2VyaWVzX2dyb3Vwcy52YWx1ZS5sZW5ndGggPT0gMCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdHNfcmVxdWVzdC52YWx1ZSkge1xuICAgICAgY29uc3QgbWV0cmljX3NjaGVtYSA9IHZhbHVlPy50c19zY2hlbWE7XG4gICAgICBjb25zdCBzb3VyY2VfZGVmID0gdmFsdWUuc291cmNlX2RlZjtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5zb3VyY2VfZGVmIC8qIFJlbW92ZSB0aGUgcHJvcGVydHkgb3RoZXJ3aXNlIGl0J3MgZ29pbmcgdG8gYmUgYWRkZWQgdG8gdGhlIFJFU1QgKi9cbiAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpY19zY2hlbWEsIHNvdXJjZV9kZWYpO1xuICAgICAgdGltZXNlcmllc19ncm91cHMudmFsdWUucHVzaChncm91cCk7XG4gICAgfVxuICB9XG4gIC8qIE5PVEU6IGN1cnJlbnRseSBvbmx5IGFjY2VwdGVkIHRoZSAxX2NoYXJ0X3hfeWF4aXMgbW9kZSAqL1xuICBpZiAoZ3JvdXBfb3B0aW9uX21vZGUudmFsdWUgPT0gbnVsbCkge1xuICAgIGdyb3VwX29wdGlvbl9tb2RlLnZhbHVlID0gdGltZXNlcmllc1V0aWxzLmdldEdyb3VwT3B0aW9uTW9kZSgnMV9jaGFydF94X3lheGlzJyk7XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gcnVuIHRoZSBSRVNUIEFQSSB3aXRoIHRoZSBkYXRhICovXG5hc3luYyBmdW5jdGlvbiBnZXRfY2hhcnRfb3B0aW9ucygpIHtcbiAgYXdhaXQgcmVzb2x2ZV9hbnlfcGFyYW1zKCk7XG4gIGF3YWl0IHJldHJpZXZlX2Jhc2ljX2luZm8oKTtcbiAgY29uc3QgdXJsID0gYmFzZV91cmwudmFsdWU7XG4gIGNvbnN0IHBvc3RfcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZCxcbiAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgLi4ucHJvcHMucGFyYW1zLnBvc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHRzX3JlcXVlc3RzOiB0c19yZXF1ZXN0LnZhbHVlXG4gICAgfVxuICB9XG4gIC8qIEhhdmUgdG8gYmUgdXNlZCB0aGlzIGdldF9jb21wb25lbnRfZGF0YSwgaW4gb3JkZXIgdG8gY3JlYXRlIHJlcG9ydCB0b28gKi9cbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHByb3BzLmdldF9jb21wb25lbnRfZGF0YSh1cmwsICcnLCBwb3N0X3BhcmFtcyk7XG4gIC8qIEZvcm1hdCB0aGUgcmVzdWx0IGluIHRoZSBmb3JtYXQgbmVlZGVkIGJ5IER5Z3JhcGggKi9cbiAgcmVzdWx0ID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb09wdGlvbnNBcnJheShyZXN1bHQsIHRpbWVzZXJpZXNfZ3JvdXBzLnZhbHVlLCBncm91cF9vcHRpb25fbW9kZS52YWx1ZSwgJycpO1xuICBpZiAocmVzdWx0WzBdKSB7XG4gICAgcmVzdWx0WzBdLmhlaWdodCA9IGhlaWdodC52YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0Py5bMF07XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gIHJlZnJlc2hfY2hhcnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUnVuIHRoZSBpbml0IGhlcmUgKi9cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBpbml0KCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7IH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRGVmaW5pbmcgdGhlIG5lZWRlZCBpbmZvIGJ5IHRoZSBnZXRfY2hhcnRfb3B0aW9ucyBmdW5jdGlvbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgaGVpZ2h0LnZhbHVlID0gKHByb3BzLm1heF9oZWlnaHQgfHwgNCkgKiBoZWlnaHRfcGVyX3Jvdztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlZnJlc2ggZnVuY3Rpb24gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfY2hhcnQoKSB7XG4gIGlmIChjaGFydC52YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldF9jaGFydF9vcHRpb25zKCk7XG4gICAgY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0X3NlcmllcyhyZXN1bHQuZGF0YSk7XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG4iLCI8IS0tXG4gIChDKSAyMDIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IHJlZj1cImJvZHlfZGl2XCI+XG4gIDxTYW5rZXlcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRcIlxuICAgIDp3aWR0aD1cIndpZHRoXCJcbiAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICA6bm9fZGF0YV9tZXNzYWdlPVwibm9fZGF0YV9tZXNzYWdlXCJcbiAgICA6c2Fua2V5X2RhdGE9XCJzYW5rZXlfZGF0YVwiXG4gICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCI+XG4gIDwvU2Fua2V5PiBcbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5IH0gZnJvbSBcIi4vc2Fua2V5LnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3Qgbm9fZGF0YV9tZXNzYWdlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm5vX2RhdGEnKVxuXG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCBzYW5rZXlfZGF0YSA9IHJlZih7fSk7XG5jb25zdCBib2R5X2RpdiA9IHJlZihudWxsKTtcbmNvbnN0IHdpZHRoID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0ID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0X3Blcl9yb3cgPSA2Mi41IC8qIHB4ICovXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICAgIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICAgIGlmaWQ6IE51bWJlciwgICAgICAgIC8qIEludGVyZmFjZSBJRCAqL1xuICAgIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICAgIG1heF93aWR0aDogTnVtYmVyLCAgIC8qIENvbXBvbmVudCBXaWR0aCAoNCwgOCwgMTIpICovXG4gICAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgICBnZXRfY29tcG9uZW50X2RhdGE6IEZ1bmN0aW9uLCAvKiBDYWxsYmFjayB0byByZXF1ZXN0IGRhdGEgKFJFU1QpICovXG4gICAgZmlsdGVyczogT2JqZWN0XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIHVwZGF0ZV9oZWlnaHQoKTtcbiAgICB1cGRhdGVfd2lkdGgoKTtcblxuICAgIGluaXQoKTtcbn0pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7ICAgIFxuICAgIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gO1xuXG4gICAgY29uc3QgcXVlcnlfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICAgZXBvY2hfYmVnaW46IHByb3BzLmVwb2NoX2JlZ2luLFxuICAgICAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgICAgICBzYW5rZXlfdmVyc2lvbjogMyxcbiAgICAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gICAgfVxuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHF1ZXJ5X3BhcmFtcyk7XG5cbiAgICBsZXQgZ3JhcGggPSBhd2FpdCBwcm9wcy5nZXRfY29tcG9uZW50X2RhdGEodXJsLCB1cmxfcGFyYW1zKTtcblxuICAgIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG5cbiAgICBjb25zdCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCk7XG4gICAgXG4gICAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICAgICAgc2Fua2V5X2NoYXJ0LnZhbHVlLnNldF9ub19kYXRhX2ZsYWcodHJ1ZSk7XG4gIFxuICAgIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuLy8gcmVtb3ZlIGFsbCBsaW5rcyB3aXRoIGEgbm90IGV4aXN0aW5nIG5vZGVcbmZ1bmN0aW9uIG1ha2VfY29tcGxldGVfZ3JhcGgoZ3JhcGgpIHtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3Igbm90IGV4aXN0aW5nIHNvdXJjZS90YXJnZXQgbm9kZWApOyAgICBcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IG5vZGVfZGljdFtuLm5vZGVfaWRdID0gdHJ1ZSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKGwpID0+IG5vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSAhPSBudWxsICYmIG5vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXSAhPSBudWxsOyAgICBcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcblx0bGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG5cdGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuXHRpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcblx0ICAgIGZfbG9nKGUpO1xuXHR9XG5cdHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShyZXMpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge30sIGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIHJlcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIGxldCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRyZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxhYmVsXG4gICAgcmVzLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgIGxpbms6IGxpbmsub3B0aW9uYWxfaW5mby5saW5rLFxuXHRcdG5vZGVfbGlua3M6IFtdLFx0XHRcblx0ICAgIH07XG5cdCAgICBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXSA9IGxpbmtfdG9fbm9kZXM7XG5cdH1cblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLnB1c2goe1xuXHQgICAgc291cmNlOiBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF0sXG5cdCAgICB0YXJnZXQ6IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXSxcblx0ICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuXHR9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3NcbiAgICBsZXQgbm9kZXMgPSByZXMubm9kZXMubWFwKChuKSA9PiBuKSwgbGlua3MgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5rX25vZGVfaWQgaW4gbGlua190b19ub2Rlc19kaWN0KSB7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGxldCBsaW5rX25vZGUgPSB7XG5cdCAgICBub2RlX2lkOiBsaW5rX3RvX25vZGVzLmlkLFxuXHQgICAgbGFiZWw6IGxpbmtfdG9fbm9kZXMubGFiZWwsXG4gICAgICBsaW5rOiBsaW5rX3RvX25vZGVzLmxpbmssXG5cdH07XG5cdG5vZGVzLnB1c2gobGlua19ub2RlKTtcblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rLnNvdXJjZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdHJldHVybiB7IGluZGV4LCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbm9kZV9kaWN0ID0ge307ICAgIFxuICAgIHNhbmtleV9ub2Rlcy5mb3JFYWNoKChzbiwgaW5kZXgpID0+IHNhbmtleV9ub2RlX2RpY3Rbc24uZGF0YS5ub2RlX2lkXSA9IHNuKTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2VfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdLmluZGV4O1xuXHRsZXQgdGFyZ2V0X2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXS5pbmRleDtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlX2luZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsXG5cdCAgICB2YWx1ZTogbC52YWx1ZSxcblx0ICAgIGxhYmVsOiBsLmxhYmVsLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzOiBzYW5rZXlfbm9kZXMsIGxpbmtzOiBzYW5rZXlfbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gICAgaWYgKG5vZGUuaXNfbGlua19ub2RlID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgaWYgKG5vZGUubGluaykgeyBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKG5vZGUubGluayk7IH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlX2hlaWdodCgpIHtcbiAgICBoZWlnaHQudmFsdWUgPSBoZWlnaHRfcGVyX3JvdyAqIHByb3BzLm1heF9oZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV93aWR0aCgpIHtcbiAgICB3aWR0aC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLndpZHRoKCk7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgICAgICA8IS0tIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiB0b3BfdGFibGVfYXJyYXlcIiAtLT5cbiAgICAgICAgPCEtLSAgICAgICAgICAgOnJlZj1cImVsID0+IHsgdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiPiAtLT5cbiAgICAgICAgPCEtLSAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+IC0tPlxuICAgICAgICA8IS0tICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+IC0tPlxuICAgICAgICA8IS0tICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPiAtLT5cbiAgICAgICAgPCEtLSAgIDwvdGVtcGxhdGU+IC0tPlxuICAgICAgICA8IS0tICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PiAtLT5cbiAgICAgICAgPCEtLSAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCIgLS0+XG4gICAgICAgIDwhLS0gICAgICAgIEBjbGljaz1cImFkZF90b3BfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50KVwiIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXIgXCIgLS0+XG4gICAgICAgIDwhLS0gICAgICAgIDp0aXRsZT1cIm9wdC52YWx1ZVwiPnt7IG9wdC5sYWJlbCB9fTwvYT4gLS0+XG4gICAgICAgIDwhLS0gICA8L3RlbXBsYXRlPiAgICAgLS0+XG4gICAgICAgIDwhLS0gPC9Ecm9wZG93bj4gLS0+XG5cbiAgICAgICAgPERhdGVUaW1lUmFuZ2VQaWNrZXIgdi1pZj1cImVuYWJsZV9kYXRlX3RpbWVfcmFuZ2VfcGlja2VyXCIgY2xhc3M9XCJkb250cHJpbnRcIlxuICAgICAgICAgICAgOmRpc2FibGVkX2RhdGVfcGlja2VyPVwiZGlzYWJsZV9kYXRlX3RpbWVfcGlja2VyXCIgaWQ9XCJkYXNoYm9hcmQtZGF0ZS10aW1lLXBpY2tlclwiIDpyb3VuZF90aW1lPVwidHJ1ZVwiXG4gICAgICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZD1cIm1pblwiIEBlcG9jaF9jaGFuZ2U9XCJzZXRfY29tcG9uZW50c19lcG9jaF9pbnRlcnZhbFwiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlXCIgOm9wdGlvbnM9XCJyZXBvcnRzX3RlbXBsYXRlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInNlbGVjdF9yZXBvcnRfdGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoZmlsdGVyX29wdGlvbnMsIGZpbHRlcl9pZCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9maWx0ZXJzW2ZpbHRlcl9pZF1cIiA6b3B0aW9ucz1cImZpbHRlcl9vcHRpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInNlbGVjdF9maWx0ZXIoc2VsZWN0ZWRfZmlsdGVyc1tmaWx0ZXJfaWRdLCBmaWx0ZXJfaWQpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19zdG9yZV9yZXBvcnRfbW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLnN0b3JlJylcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mbG9wcHktZGlza1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X29wZW5fcmVwb3J0X21vZGFsXCJcbiAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ2Rhc2hib2FyZC5vcGVuJylcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mb2xkZXItb3BlblwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZF9yZXBvcnRcIiA6dGl0bGU9XCJfaTE4bignZG93bmxvYWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbGUtYXJyb3ctZG93blwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X3VwbG9hZF9yZXBvcnRfbW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigndXBsb2FkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWxlLWFycm93LXVwXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInByaW50X3JlcG9ydFwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQucHJpbnQnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1wcmludFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvRGF0ZVRpbWVSYW5nZVBpY2tlcj5cblxuICAgICAgICA8ZGl2IHYtaWY9XCJlbmFibGVfcmVwb3J0X3RpdGxlXCIgY2xhc3M9XCJtdC0zXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOi0wLjVyZW07IGRpc3BsYXk6IGlubGluZVwiPlxuICAgICAgICAgICAgPGgzIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCI+e3sgcmVwb3J0X3RpdGxlIH19XG4gICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImVuYWJsZV9zbWFsbF9waWNrZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJlbmFibGVfc21hbGxfcGlja2VyX2FjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkX3JlcG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ2Rvd25sb2FkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbGUtYXJyb3ctZG93blwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd191cGxvYWRfcmVwb3J0X21vZGFsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigndXBsb2FkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbGUtYXJyb3ctdXBcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicHJpbnRfcmVwb3J0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQucHJpbnQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcHJpbnRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgcmVmPVwicmVwb3J0X2JveFwiIGNsYXNzPVwicm93XCIgOmtleT1cImNvbXBvbmVudHNcIj5cblxuICAgICAgICAgICAgPGRpdiB2LWlmPVwid2FybmluZ19tZXNzYWdlXCIgY2xhc3M9XCJjb2wtc20gbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IHdhcm5pbmdfbWVzc2FnZSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImMgaW4gY29tcG9uZW50c1wiPlxuICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9XCJtaW4td2lkdGg6MjByZW07XCIgOmNvbG9yPVwiYy5jb2xvclwiIDp3aWR0aD1cImMud2lkdGhcIiA6aGVpZ2h0PVwiYy5oZWlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib3hfdGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJjLmkxOG5fbmFtZVwiIGNsYXNzPVwiZGFzaGJvYXJkLWNvbXBvbmVudC10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgX2kxOG4oYy5pMThuX25hbWUpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiY29sb3I6IGdyYXlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGMudGltZV9vZmZzZXQgPyBfaTE4bignZGFzaGJvYXJkLnRpbWVfYWdvLicgKyBjLnRpbWVfb2Zmc2V0KSA6ICcnIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym94X2NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZyAmJiBzaG93X2xvYWRpbmdcIiA6c3R5bGVzPVwiJ21hcmdpbi10b3A6IDJyZW0gIWltcG9ydGFudDsnXCI+PC9Mb2FkaW5nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJbKGxvYWRpbmcgJiYgc2hvd19sb2FkaW5nKSA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJjb21wb25lbnRzX2RpY3RbYy5jb21wb25lbnRdXCIgOmlkPVwiYy5jb21wb25lbnRfaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJjb21wb25lbnRfY3VzdG9tX3N0eWxlKGMpXCIgOmVwb2NoX2JlZ2luPVwiYy5lcG9jaF9iZWdpblwiIDplcG9jaF9lbmQ9XCJjLmVwb2NoX2VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppMThuX3RpdGxlPVwiYy5pMThuX25hbWVcIiA6aWZpZD1cImMuaWZpZCA/IGMuaWZpZCA6IGNvbnRleHQuaWZpZFwiIDptYXhfd2lkdGg9XCJjLndpZHRoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1heF9oZWlnaHQ9XCJjLmhlaWdodFwiIDpwYXJhbXM9XCJjLnBhcmFtc1wiIDpnZXRfY29tcG9uZW50X2RhdGE9XCJnZXRfY29tcG9uZW50X2RhdGFfZnVuYyhjKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjc3JmPVwiY29udGV4dC5jc3JmXCIgOmZpbHRlcnM9XCJjLmZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJveF9mb290ZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiYy5jb21wb25lbnQgIT0gJ2VtcHR5JyAmJiBjLmkxOG5fbmFtZSAmJiAhZGlzYWJsZV9kYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImNvbG9yOiBsaWdodGdyYXk7Zm9udC1zaXplOjEycHg7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29tcG9uZW50X2ludGVydmFsKGMpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj4gPCEtLSBkaXYgcm93IC0tPlxuICAgIDxNb2RhbFNhdmUgcmVmPVwibW9kYWxfc3RvcmVfcmVwb3J0XCIgOmdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lPVwiZ2V0X3N1Z2dlc3RlZF9yZXBvcnRfbmFtZVwiIDpzdG9yZV9maWxlPVwic3RvcmVfcmVwb3J0XCJcbiAgICAgICAgOmNzcmY9XCJjb250ZXh0LmNzcmZcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLnN0b3JlJylcIj5cbiAgICA8L01vZGFsU2F2ZT5cbiAgICA8TW9kYWxPcGVuIHJlZj1cIm1vZGFsX29wZW5fcmVwb3J0XCIgOmxpc3RfZmlsZXM9XCJsaXN0X3JlcG9ydHNcIiA6b3Blbl9maWxlPVwib3Blbl9yZXBvcnRcIiA6ZGVsZXRlX2ZpbGU9XCJkZWxldGVfcmVwb3J0XCJcbiAgICAgICAgOmNzcmY9XCJjb250ZXh0LmNzcmZcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLm9wZW4nKVwiIDpmaWxlX3RpdGxlPVwiX2kxOG4oJ3JlcG9ydC5yZXBvcnRfbmFtZScpXCI+XG4gICAgPC9Nb2RhbE9wZW4+XG4gICAgPE1vZGFsVXBsb2FkIHJlZj1cIm1vZGFsX3VwbG9hZF9yZXBvcnRcIiA6dXBsb2FkX2ZpbGU9XCJ1cGxvYWRfcmVwb3J0XCIgOnRpdGxlPVwiX2kxOG4oJ3VwbG9hZCcpXCJcbiAgICAgICAgOmZpbGVfdGl0bGU9XCJfaTE4bigncmVwb3J0LmZpbGUnKVwiPlxuICAgIDwvTW9kYWxVcGxvYWQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19zdGF0dXNfbWFuYWdlciwgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHksIG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3N5bmMgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsU2F2ZSB9IGZyb20gXCIuL21vZGFsLWZpbGUtc2F2ZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxPcGVuIH0gZnJvbSBcIi4vbW9kYWwtZmlsZS1vcGVuLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFVwbG9hZCB9IGZyb20gXCIuL21vZGFsLWZpbGUtdXBsb2FkLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBCb3ggfSBmcm9tIFwiLi9kYXNoYm9hcmQtYm94LnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEVtcHR5Q29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLWVtcHR5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQmFkZ2VDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtYmFkZ2UudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBpZUNvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC1waWUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRpbWVzZXJpZXNDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtdGltZXNlcmllcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5Q29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgZGF0YVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBjb21wb25lbnRzX2RpY3QgPSB7XG4gICAgXCJiYWRnZVwiOiBCYWRnZUNvbXBvbmVudCxcbiAgICBcImVtcHR5XCI6IEVtcHR5Q29tcG9uZW50LFxuICAgIFwicGllXCI6IFBpZUNvbXBvbmVudCxcbiAgICBcInRpbWVzZXJpZXNcIjogVGltZXNlcmllc0NvbXBvbmVudCxcbiAgICBcInRhYmxlXCI6IFRhYmxlQ29tcG9uZW50LFxuICAgIFwic2Fua2V5XCI6IFNhbmtleUNvbXBvbmVudCxcbn1cblxuY29uc3QgbG9hZGluZyA9IHJlZih0cnVlKTtcbmNvbnN0IHBhZ2VfaWQgPSBcInBhZ2UtZGFzaGJvYXJkXCI7XG5jb25zdCBzaG93X2xvYWRpbmcgPSBwcm9wcy5jb250ZXh0LnNob3dfbG9hZGluZyB8fCBmYWxzZTtcbmNvbnN0IHJlcG9ydF9ib3ggPSByZWYobnVsbCk7XG5cbmNvbnN0IG1vZGFsX3N0b3JlX3JlcG9ydCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX29wZW5fcmVwb3J0ID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfdXBsb2FkX3JlcG9ydCA9IHJlZihudWxsKTtcblxuY29uc3QgbWFpbl9lcG9jaF9pbnRlcnZhbCA9IHJlZihudWxsKTtcblxuY29uc3QgY29tcG9uZW50cyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9maWx0ZXJzID0gcmVmKHt9KTtcbmNvbnN0IGF2YWlsYWJsZV9maWx0ZXJzID0gcmVmKHt9KTtcblxuY29uc3QgcmVwb3J0c190ZW1wbGF0ZXMgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlID0gcmVmKHt9KTtcblxuY29uc3Qgd2FybmluZ19tZXNzYWdlID0gcmVmKFwiXCIpO1xuXG5sZXQgY29tcG9uZW50c19pbmZvID0ge307XG5sZXQgZGF0YV9mcm9tX2JhY2t1cCA9IGZhbHNlO1xubGV0IHByaW50YWJsZSA9IGZhbHNlO1xuXG5jb25zdCBlbmFibGVfZGF0ZV90aW1lX3JhbmdlX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCJcbiAgICAgICAgJiYgIXByaW50YWJsZTtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyX2FjdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHRydWU7IC8vIFNldCB0byBmYWxzZSBmb3IgaGlkaW5nIG9wZW4vc2F2ZSBhY3Rpb25zIGluIHRoZSBzbWFsbCBwaWNrZXJcbn0pO1xuXG5jb25zdCBkaXNhYmxlX2RhdGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZT8udG9vbGJveD8udGltZT8uaGlkZSA9PSB0cnVlO1xufSk7XG5cbmNvbnN0IGRpc2FibGVfZGF0ZV90aW1lX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCA9PSB0cnVlXG4gICAgICAgIHx8IGRpc2FibGVfZGF0ZS52YWx1ZTtcbiAgICByZXR1cm4gZGlzYWJsZWQ7XG59KTtcblxuY29uc3QgZW5hYmxlX3JlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBlbmFibGUgPSBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuaXNfb3Blbl9yZXBvcnQgPT0gdHJ1ZVxuICAgICAgICB8fCBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbiAgICByZXR1cm4gZW5hYmxlO1xufSk7XG5cbmNvbnN0IHJlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBcIlwiO1xuXG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCkge1xuICAgICAgICB0aXRsZSA9IGBSZXBvcnQ6ICR7c2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlfWA7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5jb250ZXh0LnRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gcHJvcHMuY29udGV4dC50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGU7XG59KTtcblxuY29uc3QgY29tcG9uZW50X2N1c3RvbV9zdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gKGMpID0+IHtcbiAgICAgICAgaWYgKGMucGFyYW1zLmN1c3RvbV9zdHlsZSAhPSBudWxsICYmICghcHJpbnRhYmxlIHx8IGMucGFyYW1zLmN1c3RvbV9wcmludF9zdHlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjLnBhcmFtcy5jdXN0b21fc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlICYmIHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH07XG59KTtcblxuY29uc3QgY29tcG9uZW50X2ludGVydmFsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiAoYykgPT4ge1xuICAgICAgICBjb25zdCB0aW1lX2ludGVydmFsX3N0cmluZyA9IGdldF90aW1lX2ludGVydmFsX3N0cmluZyhjLmVwb2NoX2JlZ2luLCBjLmVwb2NoX2VuZCk7XG4gICAgICAgIHJldHVybiB0aW1lX2ludGVydmFsX3N0cmluZztcbiAgICB9O1xufSk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlcG9jaF9pbnRlcnZhbCA9IG51bGw7XG4gICAgcHJpbnRhYmxlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwcmludGFibGVcIikgPT0gXCJ0cnVlXCI7XG5cbiAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCIgfHwgcHJvcHMuY29udGV4dC5wYWdlID09IFwidnMtcmVwb3J0XCIpIHtcbiAgICAgICAgaWYgKHByb3BzLmNvbnRleHQucGFnZSA9PSBcInJlcG9ydFwiKSB7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbCA9IG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlLCBcIm1pblwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIikge1xuICAgICAgICAgICAgZXBvY2hfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZSA9IGVwb2NoX2ludGVydmFsO1xuICAgIH1cblxuICAgIGF3YWl0IHNldF90ZW1wbGF0ZXNfbGlzdCgpO1xuICAgIGxldCByZXBvcnRfbmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicmVwb3J0X25hbWVcIik7XG4gICAgaWYgKHJlcG9ydF9uYW1lICE9IG51bGwgJiYgcmVwb3J0X25hbWUgIT0gXCJcIikge1xuICAgICAgICAvKiBSZXBvcnQgbmFtZSBwcm92aWRlZCAtIG9wZW4gYSByZXBvcnQgYmFja3VwICovXG4gICAgICAgIGF3YWl0IG9wZW5fcmVwb3J0KHJlcG9ydF9uYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvKiBMb2FkIGEgdGVtcGxhdGUgYW5kIGJ1aWxkIGEgbmV3IHJlcG9ydCAqL1xuICAgICAgICBhd2FpdCBsb2FkX2NvbXBvbmVudHMoZXBvY2hfaW50ZXJ2YWwsIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSk7XG4gICAgfVxuICAgIGlmIChwcmludGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICBzZXRfcmVwb3J0X3RpdGxlKCk7XG4gICAgICAgIC8vIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIC8vIG50b3BuZ19zeW5jLnJlYWR5KFwicHJpbnRfcmVwb3J0XCIpO1xuICAgIH1cbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJkYXNoYm9hcmRcIikge1xuICAgICAgICBzdGFydF9kYXNoYm9hcmRfcmVmcmVzaF9sb29wKCk7XG4gICAgfVxuICAgIC8vIGlmIChwcmludGFibGUgPT0gdHJ1ZSkge1xuICAgIC8vICAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShcInByaW50X3JlcG9ydFwiKTtcbiAgICAvLyB9XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gc2V0X3RlbXBsYXRlc19saXN0KCkge1xuICAgIGNvbnN0IHVybF9yZXF1ZXN0ID0gcHJvcHMuY29udGV4dC50ZW1wbGF0ZV9saXN0X2VuZHBvaW50O1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIGlmIChyZXM/Lmxpc3QgPT0gbnVsbCkgeyByZXR1cm47IH1cblxuICAgIHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlID0gcmVzLmxpc3QubWFwKCh0KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogdC5uYW1lLFxuICAgICAgICAgICAgbGFiZWw6IHQubGFiZWwsXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgICB0b29sYm94OiB0LnRvb2xib3gsXG4gICAgICAgICAgICBpc19vcGVuX3JlcG9ydDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgcmVwb3J0X3RlbXBsYXRlX3ZhbHVlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJyZXBvcnRfdGVtcGxhdGVcIikgfHwgcHJvcHMuY29udGV4dC50ZW1wbGF0ZTtcbiAgICBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUgPSByZXBvcnRzX3RlbXBsYXRlcy52YWx1ZS5maW5kKCh0KSA9PiB0LnZhbHVlID09IHJlcG9ydF90ZW1wbGF0ZV92YWx1ZSk7XG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9IHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlWzBdO1xuICAgIH1cbn1cblxubGV0IGRhc2JvYXJkX2xvb3BfaW50ZXJ2YWw7XG5cbi8qIERhc2hib2FyZCB1cGRhdGUgaW50ZXJ2YWwvZnJlcXVlbmN5ICovXG5jb25zdCBsb29wX2ludGVydmFsID0gMTAgKiAxMDAwO1xuXG5mdW5jdGlvbiBzdGFydF9kYXNoYm9hcmRfcmVmcmVzaF9sb29wKCkge1xuICAgIGRhc2JvYXJkX2xvb3BfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsKCk7XG4gICAgfSwgbG9vcF9pbnRlcnZhbCk7XG59XG5cbmZ1bmN0aW9uIHNldF9jb21wb25lbnRzX2ZpbHRlcihmaWx0ZXJfaWQsIGZpbHRlcl92YWx1ZSkge1xuICAgIGlmIChmaWx0ZXJfdmFsdWUpIHsgZmlsdGVyX3ZhbHVlID0gZmlsdGVyX3ZhbHVlICsgXCI7ZXFcIjsgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXJfaWQsIGZpbHRlcl92YWx1ZSk7XG4gICAgY29tcG9uZW50cy52YWx1ZS5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICAgIHVwZGF0ZV9jb21wb25lbnRfZmlsdGVycyhjLCBmaWx0ZXJfaWQsIGZpbHRlcl92YWx1ZSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsKGVwb2NoX2ludGVydmFsKSB7XG4gICAgaWYgKGVwb2NoX2ludGVydmFsKSB7XG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUgPSBlcG9jaF9pbnRlcnZhbDtcbiAgICB9XG5cbiAgICBjb21wb25lbnRzLnZhbHVlLmZvckVhY2goKGMsIGkpID0+IHtcbiAgICAgICAgdXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbChjLCBlcG9jaF9pbnRlcnZhbCk7XG4gICAgfSk7XG59XG5cbi8qIFRoaXMgZnVuY3Rpb24gbG9hZHMgdGhlIGZpbHRlcnMgKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfZmlsdGVycyhmaWx0ZXJzX2F2YWlsYWJsZSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9maWx0ZXJzX2VuZHBvaW50fWApO1xuICAgIGZpbHRlcnNfYXZhaWxhYmxlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBlbGVtZW50Py5uYW1lIHx8IFwiXCI7XG4gICAgICAgIGNvbnN0IGZpbHRlcl9vcHRpb25zID0gcmVzLmZpbmQoKGVsKSA9PiBlbC5pZCA9PSBpZCk/Lm9wdGlvbnM7XG4gICAgICAgIC8qIENoZWNrIHRoZSBmaWx0ZXJzIGF2YWlsYWJsZSwgaWYgbm8gZmlsdGVyIG9yIG9ubHkgMSBmaWx0ZXIgaXMgcHJvdmlkZWQsIGhpZGUgdGhlIGRyb3Bkb3duICovXG4gICAgICAgIGlmIChmaWx0ZXJfb3B0aW9ucyAmJiBmaWx0ZXJfb3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgYWxsX2xhYmVsID0gaTE4bignZGJfc2VhcmNoLmFsbC4nICsgaWQpXG4gICAgICAgICAgICBpZihkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChhbGxfbGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgYWxsX2xhYmVsID0gaTE4bignYWxsJykgKyBcIiBcIiArIGkxOG4oJ2RiX3NlYXJjaC4nICsgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogQWRkIHRoZSAnQWxsJyBmaWx0ZXIgKi9cbiAgICAgICAgICAgIGZpbHRlcl9vcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBhbGxfbGFiZWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLyogVG8gYmUgc2FmZSwgYWRkIGEgZGVmYXVsdCBuYW1lICovXG4gICAgICAgICAgICBhdmFpbGFibGVfZmlsdGVycy52YWx1ZVtpZF0gPSBmaWx0ZXJfb3B0aW9ucztcbiAgICAgICAgICAgIHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbaWRdID0gZmlsdGVyX29wdGlvbnNbMF07XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9jb21wb25lbnRzKGVwb2NoX2ludGVydmFsLCB0ZW1wbGF0ZV9uYW1lKSB7XG4gICAgLyogRW5hYmxlIFJFU1QgY2FsbHMgKi9cbiAgICBkYXRhX2Zyb21fYmFja3VwID0gZmFsc2U7XG5cbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2VuZHBvaW50fT90ZW1wbGF0ZT0ke3RlbXBsYXRlX25hbWV9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBjb21wb25lbnRzLnZhbHVlID0gcmVzLmxpc3QuZmlsdGVyKChjKSA9PiBjb21wb25lbnRzX2RpY3RbYy5jb21wb25lbnRdICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGMsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgY19leHQgPSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50X2lkOiBnZXRfY29tcG9uZW50X2lkKGMuaWQsIGluZGV4KSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJzOiB7fSxcbiAgICAgICAgICAgICAgICAuLi5jXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbChjX2V4dCwgZXBvY2hfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgcmV0dXJuIGNfZXh0O1xuICAgICAgICB9KTtcbiAgICBsb2FkX2ZpbHRlcnMocmVzLmZpbHRlcnMpXG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbChjLCBlcG9jaF9pbnRlcnZhbCkge1xuICAgIGNvbnN0IGludGVydmFsX3NlY29uZHMgPSB0aW1lZnJhbWVzX2RpY3RbYy50aW1lX3dpbmRvdyB8fCBcIjVfbWluXCJdO1xuICAgIGlmIChlcG9jaF9pbnRlcnZhbCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVwb2NoX2VuZCA9IG50b3BuZ191dGlsaXR5LmdldF91dGNfc2Vjb25kcygpO1xuICAgICAgICBlcG9jaF9pbnRlcnZhbCA9IHsgZXBvY2hfYmVnaW46IGVwb2NoX2VuZCAtIGludGVydmFsX3NlY29uZHMsIGVwb2NoX2VuZDogZXBvY2hfZW5kIH07XG4gICAgfVxuICAgIGNvbnN0IHV0Y19vZmZzZXQgPSB0aW1lZnJhbWVzX2RpY3RbYy50aW1lX29mZnNldF0gfHwgMDtcbiAgICBjLmVwb2NoX2JlZ2luID0gZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4gLSB1dGNfb2Zmc2V0O1xuICAgIGMuZXBvY2hfZW5kID0gZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kIC0gdXRjX29mZnNldDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NvbXBvbmVudF9maWx0ZXJzKGMsIGZpbHRlcl9pZCwgZmlsdGVyX3ZhbHVlKSB7XG4gICAgYy5maWx0ZXJzW2ZpbHRlcl9pZF0gPSBmaWx0ZXJfdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdF9maWx0ZXIob3B0aW9uLCBmaWx0ZXJfaWQpIHtcbiAgICBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyX2lkLCBvcHRpb24udmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RfcmVwb3J0X3RlbXBsYXRlKCkge1xuICAgIGlmIChwcmludGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICBzZXRfcmVwb3J0X3RpdGxlKCk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuaXNfb3Blbl9yZXBvcnQgPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBvbmVudHNfaW5mbyA9IHt9O1xuICAgIHVwZGF0ZV90ZW1wbGF0ZXNfbGlzdCgpO1xuICAgIGNvbnN0IGdsb2JhbF9zdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cyh0cnVlKTtcbiAgICBsZXQgZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBnbG9iYWxfc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGdsb2JhbF9zdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgaWYgKGRhdGFfZnJvbV9iYWNrdXAgPT0gdHJ1ZSkgeyAvLyBsYXN0IHJlcG9ydCBzZWxlY3RlZCBpdCB3YXMgYSBzYXZlZCByZXBvcnQgYW5kIHRoZW4gd2UgbXVzdCB0byByZXN0b3JlIGRlZmF1bHQgdGltZXN0YW1wXG4gICAgICAgIGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCh1bmRlZmluZWQsIFwibWluXCIpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgZXBvY2hfaW50ZXJ2YWwsIHByb3BzLmNvbnRleHQucGFnZSk7XG4gICAgfVxuICAgIGxvYWRfY29tcG9uZW50cyhlcG9jaF9pbnRlcnZhbCwgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbXBvbmVudF9pZChpZCwgaW5kZXgpIHtcbiAgICByZXR1cm4gYCR7cGFnZV9pZH1fJHtpZH1fJHtpbmRleH1gO1xufVxuXG5mdW5jdGlvbiBzaG93X3N0b3JlX3JlcG9ydF9tb2RhbCgpIHtcbiAgICBtb2RhbF9zdG9yZV9yZXBvcnQudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzaG93X29wZW5fcmVwb3J0X21vZGFsKCkge1xuICAgIG1vZGFsX29wZW5fcmVwb3J0LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd191cGxvYWRfcmVwb3J0X21vZGFsKCkge1xuICAgIG1vZGFsX3VwbG9hZF9yZXBvcnQudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBnZXRfc3VnZ2VzdGVkX3JlcG9ydF9uYW1lKCkge1xuICAgIGxldCBuYW1lID0gXCJyZXBvcnRcIjtcbiAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwidnMtcmVwb3J0XCIpIHtcbiAgICAgICAgbmFtZSA9IHByb3BzLmNvbnRleHQudGl0bGU7XG4gICAgfSBlbHNlIGlmIChtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlICYmXG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kKSB7XG4gICAgICAgIG5hbWUgKz0gXCItXCIgKyBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQobWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZS5lcG9jaF9lbmQgKiAxMDAwLCAnREQtTU0tWVlZWScpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cblxuY29uc3QgdXBsb2FkX3JlcG9ydCA9IGFzeW5jIChjb250ZW50X3N0cmluZykgPT4ge1xuICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShjb250ZW50X3N0cmluZyk7XG4gICAgc2V0X3JlcG9ydChjb250ZW50LCBjb250ZW50Lm5hbWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfa2V5X2Zyb21fdXJsKFwicmVwb3J0X25hbWVcIik7XG59XG5cbmZ1bmN0aW9uIHNldF9yZXBvcnQoY29udGVudCwgbmFtZSkge1xuICAgIHVwZGF0ZV90ZW1wbGF0ZXNfbGlzdChuYW1lKTtcbiAgICBjb25zdCBlcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBjb250ZW50LmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGNvbnRlbnQuZXBvY2hfZW5kIH07XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgcHJvcHMuY29udGV4dC5wYWdlKTtcbiAgICBsb2FkX3JlcG9ydChjb250ZW50KTtcbn1cblxuY29uc3QgbGlzdF9yZXBvcnRzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9saXN0X2VuZHBvaW50fT9pZmlkPSR7cHJvcHMuY29udGV4dC5pZmlkfWA7XG4gICAgbGV0IGZpbGVzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIGxldCBmaWxlcyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShmaWxlc19vYmopO1xuXG4gICAgLyogUmV0dXJuIGFycmF5IG9mIFt7IG5hbWU6IFN0cmluZywgZXBvY2g6IE51bWJlciB9LCAuLi5dICovXG5cbiAgICByZXR1cm4gZmlsZXM7XG59XG5cbmNvbnN0IGxvYWRfcmVwb3J0ID0gYXN5bmMgKGNvbnRlbnQpID0+IHtcbiAgICBsZXQgdG1wX25hbWUgPSBjb250ZW50Lm5hbWU7XG4gICAgbGV0IHRtcF9lcG9jaF9pbnRlcnZhbCA9IHtcbiAgICAgICAgZXBvY2hfYmVnaW46IGNvbnRlbnQuZXBvY2hfYmVnaW4sXG4gICAgICAgIGVwb2NoX2VuZDogY29udGVudC5lcG9jaF9lbmRcbiAgICB9O1xuICAgIGxldCB0bXBfdGVtcGxhdGUgPSBjb250ZW50LnRlbXBsYXRlO1xuICAgIGxldCB0bXBfY29tcG9uZW50c19kYXRhID0gY29udGVudC5kYXRhO1xuXG4gICAgbGV0IHRtcF9jb21wb25lbnRzX2luZm8gPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4gdG1wX2NvbXBvbmVudHNfZGF0YSkge1xuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIGRhdGE6IHRtcF9jb21wb25lbnRzX2RhdGFba2V5XSxcbiAgICAgICAgfTtcbiAgICAgICAgdG1wX2NvbXBvbmVudHNfaW5mb1trZXldID0gaW5mbztcbiAgICB9XG5cbiAgICAvKiBEaXNhYmxlIFJFU1QgY2FsbHMgKi9cbiAgICBkYXRhX2Zyb21fYmFja3VwID0gdHJ1ZTtcblxuICAgIC8qIFNldCB0aGUgY2FjaGVkIGRhdGEgZnJvbSB0aGUgYmFja3VwICovXG4gICAgY29tcG9uZW50c19pbmZvID0gdG1wX2NvbXBvbmVudHNfaW5mbztcblxuICAgIC8qIENoYW5nZSB0aGUgY29tcG9uZW50cyAodGVtcGxhdGUpIGZyb20gdGhlIGJhY2t1cCAqL1xuICAgIGNvbXBvbmVudHMudmFsdWUgPSB0bXBfdGVtcGxhdGU7XG5cbiAgICAvKiBDaGFuZ2UgdGhlIHRpbWUgaW50ZXJ2YWwgb24gY29tcG9uZW50cyAqL1xuICAgIHNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsKHRtcF9lcG9jaF9pbnRlcnZhbCk7XG59XG5cbmNvbnN0IG9wZW5fcmVwb3J0ID0gYXN5bmMgKGZpbGVfbmFtZSkgPT4ge1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9vcGVuX2VuZHBvaW50fT9pZmlkPSR7cHJvcHMuY29udGV4dC5pZmlkfSZyZXBvcnRfbmFtZT0ke2ZpbGVfbmFtZX1gO1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgc2V0X3JlcG9ydChjb250ZW50LCBmaWxlX25hbWUpO1xuICAgICAgICB3YXJuaW5nX21lc3NhZ2UudmFsdWUgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IF9pMThuKFwicmVwb3J0LnVuYWJsZV90b19vcGVuXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RlbXBsYXRlc19saXN0KHJlcG9ydF9uYW1lX3RvX29wZW4pIHtcbiAgICByZXBvcnRzX3RlbXBsYXRlcy52YWx1ZSA9IHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlLmZpbHRlcigodCkgPT4gdC5pc19vcGVuX3JlcG9ydCA9PSBmYWxzZSk7XG4gICAgaWYgKHJlcG9ydF9uYW1lX3RvX29wZW4gPT0gbnVsbCkgeyAvLyBpbiB0aGlzIGNhc2UgaXMgc2VsZWN0ZWQgYSByZXBvcnRfdGVtcGxhdGVcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicmVwb3J0X3RlbXBsYXRlXCIsIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSk7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfa2V5X2Zyb21fdXJsKFwicmVwb3J0X25hbWVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdF9lbnRyeSA9IHtcbiAgICAgICAgdmFsdWU6IHJlcG9ydF9uYW1lX3RvX29wZW4sXG4gICAgICAgIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC5jdXN0b21cIiksXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgdG9vbGJveDogbnVsbCxcbiAgICAgICAgaXNfb3Blbl9yZXBvcnQ6IHRydWUsXG4gICAgfTtcbiAgICByZXBvcnRzX3RlbXBsYXRlcy52YWx1ZS5wdXNoKHRfZW50cnkpO1xuICAgIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9IHRfZW50cnk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicmVwb3J0X25hbWVcIiwgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX2tleV9mcm9tX3VybChcInJlcG9ydF90ZW1wbGF0ZVwiKTtcbn1cblxuY29uc3QgZGVsZXRlX3JlcG9ydCA9IGFzeW5jIChmaWxlX25hbWUpID0+IHtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgICAgIHJlcG9ydF9uYW1lOiBmaWxlX25hbWVcbiAgICB9O1xuXG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQucmVwb3J0X2RlbGV0ZV9lbmRwb2ludH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzO1xufVxuXG4vKiBEdW1wIHJlcG9ydCBjb250ZW50IC0ga2VlcCBpbiBzeW5jIHdpdGggZGFzaGJvYXJkX3V0aWxzLmJ1aWxkX3JlcG9ydCAobHVhKSAqL1xuY29uc3Qgc2VyaWFsaXplX3JlcG9ydCA9IGFzeW5jIChuYW1lKSA9PiB7XG5cbiAgICBsZXQgY29tcG9uZW50c19kYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGNvbXBvbmVudHNfaW5mbykge1xuICAgICAgICBjb21wb25lbnRzX2RhdGFba2V5XSA9IGF3YWl0IGNvbXBvbmVudHNfaW5mb1trZXldLmRhdGE7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB7XG4gICAgICAgIHZlcnNpb246IFwiMS4wXCIsIC8vIFJlcG9ydCBkdW1wIHZlcnNpb25cbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdGVtcGxhdGU6IGNvbXBvbmVudHMudmFsdWUsXG4gICAgICAgIGRhdGE6IGNvbXBvbmVudHNfZGF0YVxuICAgIH07XG5cbiAgICBpZiAobWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZSAmJlxuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlLmVwb2NoX2JlZ2luICYmXG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kKSB7XG4gICAgICAgIGNvbnRlbnQuZXBvY2hfYmVnaW4gPSBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlLmVwb2NoX2JlZ2luO1xuICAgICAgICBjb250ZW50LmVwb2NoX2VuZCA9IG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb250ZW50KTtcbn1cblxuY29uc3Qgc3RvcmVfcmVwb3J0ID0gYXN5bmMgKGZpbGVfbmFtZSkgPT4ge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgICAgIHJlcG9ydF9uYW1lOiBmaWxlX25hbWUsXG4gICAgICAgIGNvbnRlbnQ6IGF3YWl0IHNlcmlhbGl6ZV9yZXBvcnQoZmlsZV9uYW1lKVxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC5yZXBvcnRfc3RvcmVfZW5kcG9pbnR9YDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSk7XG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkX3JlcG9ydCgpIHtcbiAgICB2YXIgbmFtZSA9IGdldF9zdWdnZXN0ZWRfcmVwb3J0X25hbWUoKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBuYW1lICsgJy5qc29uJztcbiAgICB2YXIgY29udGVudCA9IGF3YWl0IHNlcmlhbGl6ZV9yZXBvcnQobmFtZSk7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuY2xpY2soKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBwcmludF9yZXBvcnQoKSB7XG4gICAgaWYgKHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgIHdpbmRvdy5wcmludCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHVybF9wYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgdXJsX3BhcmFtc19vYmoucHJpbnRhYmxlID0gdHJ1ZTtcbiAgICBjb25zdCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtc19vYmopO1xuXG4gICAgbGV0IHVybCA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59JHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9PyR7cGFyYW1zfWA7XG5cbiAgICAvL2NvbnN0IHByaW50X2tleSA9IFwicHJpbnRhYmxlXCI7XG4gICAgLy9udG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwocHJpbnRfa2V5LCB0cnVlKTtcblxuICAgIG50b3BuZ191cmxfbWFuYWdlci5vcGVuX25ld193aW5kb3codXJsKTtcblxuICAgIC8vbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9rZXlfZnJvbV91cmwocHJpbnRfa2V5KTtcbiAgICAvLyAkKHJlcG9ydF9ib3gudmFsdWUpLnByaW50KHttZWRpYVByaW50OiB0cnVlLCB0aW1lb3V0OiAxMDAwfSk7IFxuICAgIC8vICQocmVwb3J0X2JveC52YWx1ZSkucHJpbnQoKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVfaW50ZXJ2YWxfc3RyaW5nKGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQpIHtcbiAgICBpZiAoZGlzYWJsZV9kYXRlLnZhbHVlID09IHRydWUpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIGNvbnN0IGVwb2NoX2JlZ2luX21zZWMgPSBlcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgY29uc3QgZXBvY2hfZW5kX21zZWMgPSBlcG9jaF9lbmQgKiAxMDAwO1xuXG4gICAgY29uc3QgYmVnaW5fZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9iZWdpbl9tc2VjLCAnREQvTU0vWVlZWScpO1xuICAgIGNvbnN0IGJlZ2luX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZXBvY2hfYmVnaW5fbXNlYywgJ0hIOm1tOnNzJyk7XG5cbiAgICBjb25zdCBlbmRfZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9lbmRfbXNlYywgJ0REL01NL1lZWVknKTtcbiAgICBjb25zdCBlbmRfdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9lbmRfbXNlYywgJ0hIOm1tOnNzJyk7XG5cbiAgICBjb25zdCBiZWdpbiA9IGAke2JlZ2luX2RhdGV9ICR7YmVnaW5fdGltZX1gO1xuICAgIGNvbnN0IGVuZCA9IChiZWdpbl9kYXRlID09IGVuZF9kYXRlKSA/IGAke2VuZF90aW1lfWAgOiBgJHtlbmRfZGF0ZX0gJHtlbmRfdGltZX1gO1xuICAgIHJldHVybiBgJHtiZWdpbn0gLSAke2VuZH1gO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVwb3J0X3RpdGxlKCkge1xuICAgIGNvbnN0IGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXModHJ1ZSk7XG4gICAgY29uc3QgdGltZV9pbnRlcnZhbF9zdHJpbmcgPSBnZXRfdGltZV9pbnRlcnZhbF9zdHJpbmcoZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sIGVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCk7XG4gICAgbGV0IHRpdGxlID0gYG50b3BuZyAtIFJlcG9ydCAke3NlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5sYWJlbH0gJHt0aW1lX2ludGVydmFsX3N0cmluZ31gO1xuICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XG59XG5cbi8qIENhbGxiYWNrIHRvIHJlcXVlc3QgUkVTVCBkYXRhIGZyb20gY29tcG9uZW50cyAqL1xuZnVuY3Rpb24gZ2V0X2NvbXBvbmVudF9kYXRhX2Z1bmMoY29tcG9uZW50KSB7XG4gICAgY29uc3QgZ2V0X2NvbXBvbmVudF9kYXRhID0gYXN5bmMgKHVybCwgdXJsX3BhcmFtcywgcG9zdF9wYXJhbXMpID0+IHtcbiAgICAgICAgbGV0IGluZm8gPSB7fTtcbiAgICAgICAgaWYgKGRhdGFfZnJvbV9iYWNrdXApIHtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5jb21wb25lbnRfaWRdKSB7IC8qIFNhZmV0eSBjaGVjayAqL1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBkYXRhIGZvciBcIiArIGNvbXBvbmVudC5jb21wb25lbnRfaWQpO1xuICAgICAgICAgICAgICAgIGluZm8uZGF0YSA9IHt9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvID0gY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5jb21wb25lbnRfaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvKiBDaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgcHJvbWlzZSBmb3IgdGhlIHNhbWUgcmVxdWVzdCAqL1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudHNfaW5mb1tjb21wb25lbnQuY29tcG9uZW50X2lkXSkge1xuICAgICAgICAgICAgICAgIGluZm8gPSBjb21wb25lbnRzX2luZm9bY29tcG9uZW50LmNvbXBvbmVudF9pZF07XG4gICAgICAgICAgICAgICAgaWYgKGluZm8uZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBpbmZvLmRhdGE7IC8qIHdhaXQgaW4gY2FzZSBvZiBwcmV2aW91cyBwZW5kaW5nIHJlcXVlc3RzICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhX3VybCA9IGAke3VybH0/JHt1cmxfcGFyYW1zfWA7XG5cbiAgICAgICAgICAgIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHBvc3RfcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaW5mby5kYXRhID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QoZGF0YV91cmwsIHBvc3RfcGFyYW1zKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmRhdGEgPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoZGF0YV91cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5mby5kYXRhLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb21wb25lbnRzX2luZm9bY29tcG9uZW50LmNvbXBvbmVudF9pZF0gPSBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmZvLmRhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0X2NvbXBvbmVudF9kYXRhXG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuQG1lZGlhIHByaW50IHtcbiAgICAuZG9udHByaW50IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAucGFnZWJyZWFrLWJlZ2luIHtcbiAgICAgICAgcGFnZS1icmVhay1iZWZvcmU6IGFsd2F5cztcbiAgICB9XG5cbiAgICAucGFnZWJyZWFrLWVuZCB7XG4gICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGFsd2F5cyAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5wcmludC1lbGVtZW50LWNsYXNzIHtcbiAgICAgICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkICFpbXBvcnRhbnQ7XG4gICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGF1dG9cbiAgICB9XG59XG5cbi8qIEBtZWRpYSBwcmludCBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgYW5kIChtYXgtd2lkdGg6IDI5N21tKXsgKi9cbi8qICAgICAuY29sLTQgeyAqL1xuLyogICAgICAgICB3aWR0aDogNTAlICFpbXBvcnRhbnQ7ICovXG4vKiAgICAgICAgIGZsZXg6IDAgMCBhdXRvOyAqL1xuLyogICAgIH0gKi9cbi8qIH0gKi9cbkBwYWdlIHtcbiAgICAvKiBzaXplOiBBMyBsYW5kc2NhcGU7ICovXG4gICAgLyogcG9zaXRpb246YWJzb2x1dGU7IHdpZHRoOjEwMCU7IHRvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowOyBwYWRkaW5nOjA7IG1hcmdpbjotMXB4OyAqL1xufVxuXG4vKiBQcmludCBvbiBBNCAqL1xuQG1lZGlhIHByaW50IGFuZCAobWF4LXdpZHRoOiAyOTdtbSkgYW5kIChtaW4td2lkdGg6IDIxMG1tKSB7XG5cbiAgICAvKiAucm93IHsgKi9cbiAgICAvKiAgICAgICAgIHBhZGRpbmctbGVmdDogMDsgKi9cbiAgICAvKiAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7ICovXG4gICAgLyogICAgICAgICBtYXJnaW4tbGVmdDogLTEwcmVtOyAqL1xuICAgIC8qICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwOyAqL1xuICAgIC8qIH0gKi9cbiAgICAuY29sLTQge1xuICAgICAgICB3aWR0aDogNTAlICFpbXBvcnRhbnQ7XG4gICAgICAgIGZsZXg6IDAgMCBhdXRvO1xuICAgIH1cbn1cblxuLyogUHJpbnQgb24gQTUgKGNvbW1lbnRlZCBvdXQgYXMgdGhpcyBpcyBub3Qgd29ya2luZyBvbiBDaHJvbWUvU2FmYXJpKSAqL1xuXG4vKiBAbWVkaWEgcHJpbnQgYW5kIChtYXgtd2lkdGg6IDE0OG1tKXsgKi9cbi8qICAgICAuY29sLTQgeyAqL1xuLyogICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50OyAqL1xuLyogICAgICAgICBmbGV4OiAwIDAgYXV0bzsgKi9cbi8qICAgICB9ICovXG4vKiAgICAgLmNvbC02IHsgKi9cbi8qICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgKi9cbi8qICAgICAgICAgZmxleDogMCAwIGF1dG87ICovXG4vKiAgICAgfSAqL1xuLyogfSAqL1xuXG4uYWxpZ24tY2VudGVyIHt9XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmFkZF9leGNsdXNpb25cIikgfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+ICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdob3N0cydcIj4gPCEtLSBtb2RhbCBob3N0cyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cblx0ICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5tZW1iZXJfdHlwZVwiKSB9fTwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG5cdCAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG5cdCAgICA8bGFiZWwgOmNsYXNzPVwieydhY3RpdmUnOiBleGNsdWRlX3R5cGUgPT0gJ2lwJ31cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+XG5cdCAgICAgIDxpbnB1dCAgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwibWVtYmVyX3R5cGVcIiB2YWx1ZT1cImlwXCIgQGNsaWNrPVwic2V0X2V4Y2x1ZGVfdHlwZSgnaXAnKVwiPiB7eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5pcF9hZGRyZXNzXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGxhYmVsIDpjbGFzcz1cInsnYWN0aXZlJzogZXhjbHVkZV90eXBlID09ICduZXR3b3JrJ31cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+XG5cdCAgICAgIDxpbnB1dCBAY2xpY2s9XCJzZXRfZXhjbHVkZV90eXBlKCduZXR3b3JrJylcIiBjbGFzcz1cImJ0bi1jaGVja1wiICB0eXBlPVwicmFkaW9cIiBuYW1lPVwibWVtYmVyX3R5cGVcIiB2YWx1ZT1cIm5ldHdvcmtcIj4ge3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubmV0d29ya1wiKSB9fVxuXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cImhvc3QtYWxlcnQtZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgIFx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICBcdCAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5ob3N0X2FsZXJ0X3R5cGVcIikgfX08L2I+XG4gICAgXHQgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJ2YWx1ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgYWxlcnQtc2VsZWN0XCIgdi1tb2RlbD1cImhvc3Rfc2VsZWN0ZWRcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm5vbmVcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5leGNsdWRlX2FsbF9hbGVydHNcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiBkaXNhYmxlZD57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5zcGFjaW5nX2JhclwiKSB9fTwvb3B0aW9uPlxuXHQgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGhvc3RfYWxlcnRfdHlwZXNcIj5cblx0XHQ8b3B0aW9uIHYtaWY9XCJpdGVtICE9IG51bGxcIiA6dmFsdWU9XCJpdGVtLmFsZXJ0X2lkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3M9XCJmbG93LWFsZXJ0LWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmZsb3dfYWxlcnRfdHlwZVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgPHNlbGVjdCBpZD1cImZsb3ctYWxlcnQtc2VsZWN0XCIgbmFtZT1cInZhbHVlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBhbGVydC1zZWxlY3RcIiB2LW1vZGVsPVwiZmxvd19zZWxlY3RlZFwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubm9uZVwiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2FsZXJ0c1wiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnNwYWNpbmdfYmFyXCIpIH19PC9vcHRpb24+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gZmxvd19hbGVydF90eXBlc1wiPlxuXHRcdDxvcHRpb24gIHYtaWY9XCJpdGVtICE9IG51bGxcIiA6dmFsdWU9XCJpdGVtLmFsZXJ0X2lkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgdi1pZj1cImV4Y2x1ZGVfdHlwZSA9PSAnaXAnXCIgY2xhc3M9XCJpcC1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5pcF9hZGRyZXNzXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuX2lwXCIgcGxhY2Vob2xkZXI9XCIxOTIuMTY4LjEuMVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF9pcFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgdi1pZj1cImV4Y2x1ZGVfdHlwZSA9PSAnbmV0d29yaydcIiBjbGFzcz1cIm5ldHdvcmstZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubmV0d29ya1wiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNCBwci0wXCI+XG4gICAgICAgICAgICA8aW5wdXQgcmVxdWlyZWQgc3R5bGU9XCJ3aWR0aDogY2FsYygxMDAlIC0gMTBweCk7XCIgbmFtZT1cIm5ldHdvcmtcIiBjbGFzcz1cImZvcm0tY29udHJvbCBkLWlubGluZVwiIHBsYWNlaG9sZGVyPVwiMTcyLjE2LjAuMFwiIDpwYXR0ZXJuPVwicGF0dGVybl9pcFwiIHYtbW9kZWw9XCJpbnB1dF9uZXR3b3JrXCIvPlxuICAgIFx0ICA8L2Rpdj5cbiAgICBcdCAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIHBzLTQgcGUtMFwiPlxuICAgIFx0ICAgIDxzcGFuIGNsYXNzPVwibWUtMlwiPi88L3NwYW4+XG4gICAgXHQgICAgPGlucHV0IHBsYWNlaG9sZGVyPScyNCcgcmVxdWlyZWQgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZC1pbmxpbmUgdy03NVwiIG1pbj1cIjFcIiBtYXg9XCIxMjdcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImNpZHJcIiB2LW1vZGVsPVwibmV0bWFza1wiPlxuICAgIFx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7IF9pMThuKCd2bGFuJykgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj1cIjBcIiBtaW49XCIwXCIgdHlwZT1cIm51bWJlclwiIHYtbW9kZWw9XCJpbnB1dF92bGFuXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+ICAgICAgXG4gICAgPC90ZW1wbGF0ZT4gPCEtLSBtZG9hbCBob3N0cyAtLT5cbiAgICBcbiAgICA8dGVtcGxhdGUgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSAhPSAnaG9zdHMnXCI+IDwhLS0gbW9kYWwgZG9tYWluX25hbWVzLS0+XG4gICAgICA8ZGl2PlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2RvbWFpbl9uYW1lcydcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5kb21haW5cIikgfX08L2I+XG4gICAgICAgICAgICA8YiB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICd0bHNfY2VydGlmaWNhdGUnXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24udGxzX2NlcnRpZmljYXRlXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8aW5wdXQgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnZG9tYWluX25hbWVzJ1wiIHBsYWNlaG9sZGVyPVwiXCIgOnBhdHRlcm49XCJwYXR0ZXJuX3RleHRcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpcF9hZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaW5wdXRfdGV4dFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJ1wiIHBsYWNlaG9sZGVyPVwiQ049ODEzODQ1NjU3MDAzMzM5ODM4LCBPPUNvZGU0MiwgT1U9VEVTVCwgU1Q9TU4sIEM9VVwiIDpwYXR0ZXJuPVwicGF0dGVybl9jZXJ0aWZpY2F0ZVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF90ZXh0XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICA8L3RlbXBsYXRlPiA8IS0tIG1vZGFsIGNvbW1lbnQtLT5cbiAgICA8aHIgY2xhc3M9XCJzZXBhcmF0b3IgbXQtNVwiID5cbiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7IF9pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKSB9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtMVwiPlxuICAgICAgICA8dGV4dGFyZWEgOnBsYWNlaG9sZGVyPWNvbW1lbnRfcGxhY2Vob2xkZXIgaWQ9XCJhbGVydC1sYWJlbFwiIG5hbWU9XCJsYWJlbFwiIHJvd3M9XCIzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjb21tZW50XCIgbWF4bGVuZ3RoPVwiNDUwXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBAY2xpY2s9XCJhZGRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYobnVsbCk7XG5jb25zdCBleGNsdWRlX3R5cGUgPSByZWYoXCJpcFwiKTtcbmNvbnN0IGlucHV0X2lwID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfbmV0d29yayA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3ZsYW4gPSByZWYoMCk7XG5jb25zdCBpbnB1dF90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3QgaG9zdF9zZWxlY3RlZCA9IHJlZihcIlwiKTtcbmNvbnN0IGZsb3dfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBuZXRtYXNrID0gcmVmKFwiXCIpO1xuY29uc3QgY29tbWVudCA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnRfcGxhY2Vob2xkZXIgPSBpMThuKFwiZGV0YWlscy5jb21tZW50X3BsYWNlaG9sZGVyXCIpO1xuY29uc3QgaXNfZWRpdCA9IHJlZihudWxsKTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYobnVsbCk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCddKTtcbi8vcy5zcGxpdChcIixcIikuZXZlcnkoKGEpID0+IHtyZXR1cm4gLy4rPS4rLy50ZXN0KGEpfSlcbmZ1bmN0aW9uIGdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSkge1xuICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy5ub25fcXVvdGVkX3RleHQ7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaG9zdG5hbWVcIikge1xuXHRyZXR1cm4gYCR7TnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZH18W2EtekEtWjAtOS5fLV17MywyNTB9QFswLTldezAsNX0kYDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy50bHNfY2VydGlmaWNhdGU7XG4gICAgfVxuICAgIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcbn1cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYWxlcnRfZXhjbHVzaW9uc19wYWdlOiBTdHJpbmcsXG4gICAgaG9zdF9hbGVydF90eXBlczogQXJyYXksXG4gICAgZmxvd19hbGVydF90eXBlczogQXJyYXksICAgIFxufSk7XG5cbmxldCBwYXR0ZXJuX2lwID0gZ2V0X2RhdGFfcGF0dGVybihcImlwXCIpO1xubGV0IHBhdHRlcm5fdGV4dCA9IGdldF9kYXRhX3BhdHRlcm4oXCJ0ZXh0XCIpO1xubGV0IHBhdHRlcm5fY2VydGlmaWNhdGUgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiY2VydGlmaWNhdGVcIik7XG5cbmNvbnN0IHNldF9leGNsdWRlX3R5cGUgPSAodHlwZSkgPT4ge1xuICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IHR5cGU7XG59O1xuXG5jb25zdCBjaGVja19kaXNhYmxlX2FwcGx5ID0gKCkgPT4ge1xuICAgIGxldCByZWdleCA9IG51bGw7XG4gICAgbGV0IGRpc2FibGVfYXBwbHkgPSB0cnVlO1xuICAgIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2hvc3RzJykge1xuXHRyZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybl9pcCk7XG5cdGlmIChleGNsdWRlX3R5cGUudmFsdWUgPT0gXCJpcFwiKSB7XG5cdCAgICBkaXNhYmxlX2FwcGx5ID0gKGlucHV0X2lwLnZhbHVlID09IG51bGwgfHwgaW5wdXRfaXAudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfaXAudmFsdWUpID09IGZhbHNlKSB8fCAoaG9zdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiICYmIGZsb3dfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIik7XG5cdH0gZWxzZSB7XG5cdCAgICBkaXNhYmxlX2FwcGx5ID0gKGlucHV0X25ldHdvcmsudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF9uZXR3b3JrLnZhbHVlID09IFwiXCIpXG5cdFx0fHwgKHJlZ2V4LnRlc3QoaW5wdXRfbmV0d29yay52YWx1ZSkgPT0gZmFsc2UpXG5cdFx0fHwgKGhvc3Rfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIiAmJiBmbG93X3NlbGVjdGVkLnZhbHVlID09IFwiXCIpXG5cdFx0fHwgKG5ldG1hc2sudmFsdWUgPT0gbnVsbCB8fCBuZXRtYXNrLnZhbHVlID09IFwiXCIgfHwgcGFyc2VJbnQobmV0bWFzay52YWx1ZSkgPCAxIHx8IHBhcnNlSW50KG5ldG1hc2sudmFsdWUpID4gMTI3KTtcblx0fVxuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdkb21haW5fbmFtZXMnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX3RleHQpO1xuXHRkaXNhYmxlX2FwcGx5ID0gKGlucHV0X3RleHQudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF90ZXh0LnZhbHVlID09IFwiXCIpIHx8IChyZWdleC50ZXN0KGlucHV0X3RleHQudmFsdWUpID09IGZhbHNlKTtcblx0XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ3Rsc19jZXJ0aWZpY2F0ZScpIHtcblx0cmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5fY2VydGlmaWNhdGUpO1xuXHRkaXNhYmxlX2FwcGx5ID0gKGlucHV0X3RleHQudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF90ZXh0LnZhbHVlID09IFwiXCIpIHx8IChyZWdleC50ZXN0KGlucHV0X3RleHQudmFsdWUpID09IGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpc2FibGVfYXBwbHk7XG59O1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgICAvL2RlYnVnZ2VyO1xuICAgIGlmKHJvdykge1xuICAgICAgaXNfZWRpdC52YWx1ZSA9IHRydWU7XG4gICAgICByb3dfdG9fZGVsZXRlLnZhbHVlID0gcm93O1xuXG4gICAgICBjb21tZW50LnZhbHVlID0gcm93LmxhYmVsO1xuICAgICAgXG4gICAgICBpZihyb3cudHlwZSA9PSAnaG9zdCcpIHtcbiAgICAgICAgbGV0IG5ldHdvcmtfZGV0YWlscyA9IHJvdy5hbGVydF9hZGRyLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgbGV0IHZsYW5fc3BsaXQgPSByb3cuYWxlcnRfYWRkci5zcGxpdChcIkBcIik7XG5cbiAgICAgICAgaWYobmV0d29ya19kZXRhaWxzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBleGNsdWRlX3R5cGUudmFsdWUgPSBcIm5ldHdvcmtcIjtcbiAgICAgICAgICBpbnB1dF9uZXR3b3JrLnZhbHVlID0gbmV0d29ya19kZXRhaWxzWzBdO1xuICAgICAgICAgIG5ldG1hc2sudmFsdWUgPSBuZXR3b3JrX2RldGFpbHNbMV07XG4gICAgICAgICAgaW5wdXRfaXAudmFsdWUgPSBcIlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IFwiaXBcIjtcbiAgICAgICAgICBpbnB1dF9pcC52YWx1ZSA9IHZsYW5fc3BsaXRbMF07XG4gICAgICAgICAgaW5wdXRfbmV0d29yay52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgbmV0bWFzay52YWx1ZSA9IFwiXCI7XG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYodmxhbl9zcGxpdC5sZW5ndGggPiAxICkge1xuICAgICAgICAgIGlucHV0X3ZsYW4udmFsdWUgPSB2bGFuX3NwbGl0WzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlucHV0X3ZsYW4udmFsdWUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocm93Lmhvc3RfYWxlcnRfa2V5ICE9IG51bGwpIFxuICAgICAgICAgIGhvc3Rfc2VsZWN0ZWQudmFsdWUgPSAnJytyb3cuaG9zdF9hbGVydF9rZXk7XG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgaG9zdF9zZWxlY3RlZC52YWx1ZSA9IFwiXCI7XG4gICAgICBcbiAgICAgICAgaWYocm93LmZsb3dfYWxlcnRfa2V5ICE9IG51bGwpIFxuICAgICAgICAgIGZsb3dfc2VsZWN0ZWQudmFsdWUgPSAnJytyb3cuZmxvd19hbGVydF9rZXk7XG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgZmxvd19zZWxlY3RlZC52YWx1ZSA9IFwiXCI7XG5cbiAgICAgIH0gZWxzZSBpZihyb3cudHlwZSA9PSAnZG9tYWluJykge1xuICAgICAgICBpbnB1dF90ZXh0LnZhbHVlID0gcm93LmFsZXJ0X2RvbWFpbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0X3RleHQudmFsdWUgPSByb3cuYWxlcnRfY2VydGlmaWNhdGU7XG4gICAgICB9XG4gICAgICAgICAgICBcbiAgICB9IGVsc2Uge1xuXG4gICAgICBleGNsdWRlX3R5cGUudmFsdWUgPSBcImlwXCI7XG4gICAgICBpbnB1dF9pcC52YWx1ZSA9IFwiXCI7XG4gICAgICBpbnB1dF9uZXR3b3JrLnZhbHVlID0gXCJcIjtcbiAgICAgIGlucHV0X3ZsYW4udmFsdWUgPSAwO1xuICAgICAgaG9zdF9zZWxlY3RlZC52YWx1ZSA9IFwiXCI7XG4gICAgICBmbG93X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcbiAgICAgIG5ldG1hc2sudmFsdWUgPSBcIlwiO1xuICAgICAgaW5wdXRfdGV4dC52YWx1ZSA9IFwiXCI7XG4gICAgICBjb21tZW50LnZhbHVlID0gXCJcIjtcbiAgICB9XG5cbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgYWRkID0gKCkgPT4ge1xuICAgIGxldCBwYXJhbXM7XG4gICAgbGV0IGFsZXJ0X2FkZHIgPSBpbnB1dF9pcC52YWx1ZTtcbiAgICBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09IFwiaG9zdHNcIikge1xuXHRpZiAoZXhjbHVkZV90eXBlLnZhbHVlID09IFwibmV0d29ya1wiKSB7XG5cdCAgICBhbGVydF9hZGRyID0gYCR7aW5wdXRfbmV0d29yay52YWx1ZX0vJHtuZXRtYXNrLnZhbHVlfWA7XG5cdH1cbiAgICAgICAgaWYgKGlucHV0X3ZsYW4udmFsdWUgIT0gbnVsbCAmJiBpbnB1dF92bGFuLnZhbHVlICE9IDApIHtcblx0ICAgIGFsZXJ0X2FkZHIgPSBgJHthbGVydF9hZGRyfUAke2lucHV0X3ZsYW4udmFsdWV9YDtcbiAgICAgICAgfVxuXHRwYXJhbXMgPSB7IGFsZXJ0X2FkZHIsIGhvc3RfYWxlcnRfa2V5OiBob3N0X3NlbGVjdGVkLnZhbHVlLCBmbG93X2FsZXJ0X2tleTogZmxvd19zZWxlY3RlZC52YWx1ZSB9O1xuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09IFwiZG9tYWluX25hbWVzXCIpIHtcblx0cGFyYW1zID0geyBhbGVydF9kb21haW46IGlucHV0X3RleHQudmFsdWUgfTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcInRsc19jZXJ0aWZpY2F0ZVwiKSB7XG5cdHBhcmFtcyA9IHsgYWxlcnRfY2VydGlmaWNhdGU6IGlucHV0X3RleHQudmFsdWUgfTtcbiAgICB9XG4gICAgcGFyYW1zLmxhYmVsID0gY29tbWVudC52YWx1ZTtcbiAgICBpZihpc19lZGl0LnZhbHVlKSB7XG4gICAgICBwYXJhbXMub2xkX3R5cGUgPSByb3dfdG9fZGVsZXRlLnZhbHVlLnR5cGU7XG4gICAgICBwYXJhbXMub2xkX3N1YmRpciA9IHJvd190b19kZWxldGUudmFsdWUuc3ViZGlyO1xuICAgICAgcGFyYW1zLm9sZF9hbGVydF9kb21haW4gPSByb3dfdG9fZGVsZXRlLnZhbHVlLmFsZXJ0X2RvbWFpbjtcbiAgICAgIHBhcmFtcy5vbGRfYWxlcnRfY2VydGlmaWNhdGUgPSByb3dfdG9fZGVsZXRlLnZhbHVlLmFsZXJ0X2NlcnRpZmljYXRlO1xuICAgICAgcGFyYW1zLm9sZF9hbGVydF9hZGRyID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5hbGVydF9hZGRyO1xuICAgICAgcGFyYW1zLm9sZF9mbG93X2FsZXJ0X2tleSA9IHJvd190b19kZWxldGUudmFsdWUuZmxvd19hbGVydF9rZXk7XG4gICAgICBwYXJhbXMub2xkX2hvc3RfYWxlcnRfa2V5ID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5ob3N0X2FsZXJ0X2tleTtcbiAgICB9XG4gICAgZW1pdCgnYWRkJywgcGFyYW1zKTtcbiAgICBjbG9zZSgpO1xuIFxufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufSAgXG48L3N0eWxlPlxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbmltcG9ydCAqIGFzIFZ1ZSBmcm9tIFwidnVlXCI7XG4vLyB3aW5kb3cuVnVlID0gVnVlO1xuXG4vLyBwYWdlc1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQWxlcnRTdGF0cyB9IGZyb20gXCIuL3BhZ2UtYWxlcnQtc3RhdHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VGbG93SGlzdG9yaWNhbCB9IGZyb20gXCIuL3BhZ2UtZmxvdy1oaXN0b3JpY2FsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU3RhdHMgfSBmcm9tIFwiLi9wYWdlLXN0YXRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VNYXAgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VEZXZpY2VFeGNsdXNpb25zIH0gZnJvbSBcIi4vcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RUTFMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtdGxzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFNTSCB9IGZyb20gXCIuL3BhZ2UtaG9zdC1zc2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb21lTWFwIH0gZnJvbSBcIi4vcGFnZS1ob21lLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNhbmtleSB9IGZyb20gXCIuL3BhZ2Utc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1hcHBsaWNhdGlvbnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc1RyYWZmaWMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy10cmFmZmljLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNQYWNrZXRzIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtcGFja2V0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleSB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLWZsb3ctc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFJ1bGVzIH0gZnJvbSBcIi4vcGFnZS1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNQb3J0cyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLXBvcnRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQWxlcnRBbmFseXNpcyB9IGZyb20gXCIuL3BhZ2UtYWxlcnQtYW5hbHlzaXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0TWFwIH0gZnJvbSBcIi4vcGFnZS1ob3N0LW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVZMQU5Qb3J0c1NhbmtleSB9IGZyb20gXCIuL3BhZ2Utdmxhbi1wb3J0cy1zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzIH0gZnJvbSBcIi4vcGFnZS1hZ2dyZWdhdGVkLWxpdmUtZmxvd3MudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VUZXN0VGFibGUgfSBmcm9tIFwiLi9wYWdlLXRlc3QtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5lZGdlUnVsZXNDb25maWcgfSBmcm9tIFwiLi9wYWdlLW5lZGdlLXJ1bGVzLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUVkaXRBcHBsaWNhdGlvbnMgfSBmcm9tIFwiLi9wYWdlLWVkaXQtYXBwbGljYXRpb25zLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmV0d29ya0Rpc2NvdmVyeSB9IGZyb20gXCIuL3BhZ2UtbmV0d29yay1kaXNjb3ZlcnkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VNYW5hZ2VDb25maWd1cmF0aW9uQmFja3VwIH0gZnJvbSBcIi4vcGFnZS1tYW5hZ2UtY29uZmlndXJhdGlvbnMtYmFja3VwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU05NUERldmljZVJ1bGVzIH0gZnJvbSBcIi4vcGFnZS1zbm1wLWRldmljZS1ydWxlcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNubXBEZXZpY2VzSW50ZXJmYWNlc1NpbWlsYXJpdHkgfSBmcm9tIFwiLi9wYWdlLXNubXAtZGV2aWNlcy1pbnRlcmZhY2VzLXNpbWlsYXJpdHkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0c1BvcnRzQW5hbHlzaXMgfSBmcm9tIFwiLi9wYWdlLWhvc3RzLXBvcnRzLWFuYWx5c2lzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZWRnZVJlcGVhdGVyc0NvbmZpZyB9IGZyb20gXCIuL3BhZ2UtbmVkZ2UtcmVwZWF0ZXJzLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUluYWN0aXZlSG9zdHMgfSBmcm9tIFwiLi9wYWdlLWluYWN0aXZlLWhvc3RzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSW5hY3RpdmVIb3N0RGV0YWlscyB9IGZyb20gXCIuL3BhZ2UtaW5hY3RpdmUtaG9zdC1kZXRhaWxzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlRmxvd0RldmljZURldGFpbHMgfSBmcm9tIFwiLi9wYWdlLWZsb3dkZXZpY2UtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlVnVsbmVyYWJpbGl0eVNjYW4gfSBmcm9tIFwiLi9wYWdlLXZ1bG5lcmFiaWxpdHktc2Nhbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RWc1Jlc3VsdCB9IGZyb20gXCIuL3BhZ2UtaG9zdC12cy1yZXN1bHQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VPcGVuUG9ydHMgfSBmcm9tIFwiLi9wYWdlLW9wZW4tcG9ydHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCB9IGZyb20gXCIuL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLXJlcG9ydC52dWVcIlxuXG4vLyBjb21wb25lbnRzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRpbWVzZXJpZXNDaGFydCB9IGZyb20gXCIuL3RpbWVzZXJpZXMtY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBSYW5nZVBpY2tlciB9IGZyb20gXCIuL3JhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcblxuLy8gZGFzaGJvYXJkXG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZCB9IGZyb20gXCIuL2Rhc2hib2FyZC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkQm94IH0gZnJvbSBcIi4vZGFzaGJvYXJkLWJveC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkRW1wdHkgfSBmcm9tIFwiLi9kYXNoYm9hcmQtZW1wdHkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZFRhYmxlIH0gZnJvbSBcIi4vZGFzaGJvYXJkLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRCYWRnZSB9IGZyb20gXCIuL2Rhc2hib2FyZC1iYWRnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkUGllIH0gZnJvbSBcIi4vZGFzaGJvYXJkLXBpZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkVGltZXNlcmllcyB9IGZyb20gXCIuL2Rhc2hib2FyZC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRTYW5rZXkgfSBmcm9tIFwiLi9kYXNoYm9hcmQtc2Fua2V5LnZ1ZVwiO1xuXG4vLyBsaXN0XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExpc3RUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbGlzdC10aW1lc2VyaWVzLnZ1ZVwiO1xuXG4vLyBtb2RhbHNcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkQ2hlY2tFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtY2hlY2stZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWxlcnRzRmlsdGVyIH0gZnJvbSBcIi4vbW9kYWwtYWxlcnRzLWZpbHRlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbW9kYWwtdGltZXNlcmllcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxUcmFmZmljRXh0cmFjdGlvbiB9IGZyb20gXCIuL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEhvc3RSdWxlcyB9IGZyb20gXCIuL21vZGFsLWFkZC1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWFwcGxpY2F0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWFwcGxpY2F0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXRSZXBvcnQgfSBmcm9tIFwiLi9tb2RhbC1lZGl0LXZzLXJlcG9ydC52dWVcIjtcblxubGV0IG50b3BWdWUgPSB7XG4gICAgLy8gcGFnZXNcbiAgICBQYWdlQWxlcnRTdGF0czogUGFnZUFsZXJ0U3RhdHMsXG4gICAgUGFnZUZsb3dIaXN0b3JpY2FsOiBQYWdlRmxvd0hpc3RvcmljYWwsXG4gICAgUGFnZVN0YXRzOiBQYWdlU3RhdHMsXG4gICAgUGFnZUFzc2V0VGFibGU6IFBhZ2VBc3NldFRhYmxlLFxuICAgIFBhZ2VQZXJpb2RpY2l0eVRhYmxlOiBQYWdlUGVyaW9kaWNpdHlUYWJsZSxcbiAgICBQYWdlU2VydmljZVRhYmxlOiBQYWdlU2VydmljZVRhYmxlLFxuICAgIFBhZ2VTZXJ2aWNlTWFwOiBQYWdlU2VydmljZU1hcCxcbiAgICBQYWdlUGVyaW9kaWNpdHlNYXA6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICBQYWdlQXNzZXRNYXA6IFBhZ2VBc3NldE1hcCxcbiAgICBQYWdlRGV2aWNlRXhjbHVzaW9uczogUGFnZURldmljZUV4Y2x1c2lvbnMsXG4gICAgUGFnZUhvc3RUTFM6IFBhZ2VIb3N0VExTLFxuICAgIFBhZ2VIb3N0U1NIOiBQYWdlSG9zdFNTSCxcbiAgICBQYWdlSG9tZU1hcDogUGFnZUhvbWVNYXAsXG4gICAgUGFnZVNhbmtleTogUGFnZVNhbmtleSxcbiAgICBQYWdlSG9zdFJ1bGVzOiBQYWdlSG9zdFJ1bGVzLFxuICAgIFBhZ2VBbGVydEFuYWx5c2lzOiBQYWdlQWxlcnRBbmFseXNpcyxcbiAgICBQYWdlSG9zdE1hcDogUGFnZUhvc3RNYXAsXG4gICAgUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXA6IFBhZ2VNYW5hZ2VDb25maWd1cmF0aW9uQmFja3VwLFxuICAgIFBhZ2VTTk1QRGV2aWNlUnVsZXM6IFBhZ2VTTk1QRGV2aWNlUnVsZXMsXG4gICAgUGFnZUhvc3RzUG9ydHNBbmFseXNpczogUGFnZUhvc3RzUG9ydHNBbmFseXNpcyxcbiAgICBQYWdlSW5hY3RpdmVIb3N0czogUGFnZUluYWN0aXZlSG9zdHMsXG4gICAgUGFnZUluYWN0aXZlSG9zdERldGFpbHM6IFBhZ2VJbmFjdGl2ZUhvc3REZXRhaWxzLFxuICAgIFBhZ2VWdWxuZXJhYmlsaXR5U2NhbjogUGFnZVZ1bG5lcmFiaWxpdHlTY2FuLFxuICAgIFBhZ2VIb3N0VnNSZXN1bHQ6IFBhZ2VIb3N0VnNSZXN1bHQsXG4gICAgUGFnZU9wZW5Qb3J0czogUGFnZU9wZW5Qb3J0cyxcbiAgICBQYWdlVnVsbmVyYWJpbGl0eVNjYW5SZXBvcnQ6IFBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCxcbiAgICBcbiAgICBQYWdlRWRpdEFwcGxpY2F0aW9uczogUGFnZUVkaXRBcHBsaWNhdGlvbnMsXG5cbiAgICBQYWdlVkxBTlBvcnRzRmxvd1NhbmtleTogUGFnZVZMQU5Qb3J0c1NhbmtleSxcbiAgICBQYWdlVGVzdFRhYmxlOiBQYWdlVGVzdFRhYmxlLFxuICAgIFBhZ2VTbm1wRGV2aWNlc0ludGVyZmFjZXNTaW1pbGFyaXR5OiBQYWdlU25tcERldmljZXNJbnRlcmZhY2VzU2ltaWxhcml0eSxcblxuICAgIE5lZGdlUnVsZXNDb25maWc6IE5lZGdlUnVsZXNDb25maWcsXG4gICAgTmVkZ2VSZXBlYXRlcnNDb25maWc6IE5lZGdlUmVwZWF0ZXJzQ29uZmlnLFxuXG5cbiAgICAvLyBIb3N0IGRldGFpbHMgcGFnZXNcbiAgICBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnM6IFBhZ2VIb3N0RGV0YWlsc0FwcGxpY2F0aW9ucyxcbiAgICBQYWdlSG9zdERldGFpbHNUcmFmZmljOiBQYWdlSG9zdERldGFpbHNUcmFmZmljLFxuICAgIFBhZ2VIb3N0RGV0YWlsc1BhY2tldHM6IFBhZ2VIb3N0RGV0YWlsc1BhY2tldHMsXG4gICAgUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleTogUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleSxcbiAgICBQYWdlSG9zdERldGFpbHNQb3J0czogUGFnZUhvc3REZXRhaWxzUG9ydHMsXG5cbiAgICBQYWdlQWdncmVnYXRlZExpdmVGbG93czogUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3MsXG5cbiAgICBQYWdlTmV0d29ya0Rpc2NvdmVyeTogUGFnZU5ldHdvcmtEaXNjb3ZlcnksXG5cbiAgICBQYWdlRmxvd0RldmljZURldGFpbHM6IFBhZ2VGbG93RGV2aWNlRGV0YWlscyxcblxuICAgIC8vIGNvbXBvbmVudHNcbiAgICBBbGVydEluZm86IEFsZXJ0SW5mbyxcbiAgICBDaGFydDogQ2hhcnQsXG4gICAgVGltZXNlcmllc0NoYXJ0OiBUaW1lc2VyaWVzQ2hhcnQsXG4gICAgRGF0YXRhYmxlOiBEYXRhdGFibGUsXG4gICAgRGF0ZVRpbWVSYW5nZVBpY2tlcjogRGF0ZVRpbWVSYW5nZVBpY2tlcixcbiAgICBOZXR3b3JrTWFwOiBOZXR3b3JrTWFwLFxuICAgIFJhbmdlUGlja2VyOiBSYW5nZVBpY2tlcixcbiAgICBQYWdlTmF2YmFyOiBQYWdlTmF2YmFyLFxuICAgIFNlbGVjdFNlYXJjaDogU2VsZWN0U2VhcmNoLFxuICAgIFRhYkxpc3Q6IFRhYkxpc3QsXG4gICAgU2Fua2V5OiBTYW5rZXksXG4gICAgTm90ZUxpc3Q6IE5vdGVMaXN0LFxuICAgIExvYWRpbmc6IExvYWRpbmcsXG5cbiAgICAvLyBkYXNoYm9hcmRcbiAgICBEYXNoYm9hcmQ6IERhc2hib2FyZCxcbiAgICBEYXNoYm9hcmRCb3g6IERhc2hib2FyZEJveCxcbiAgICBEYXNoYm9hcmRFbXB0eTogRGFzaGJvYXJkRW1wdHksXG4gICAgRGFzaGJvYXJkVGFibGU6IERhc2hib2FyZFRhYmxlLFxuICAgIERhc2hib2FyZEJhZGdlOiBEYXNoYm9hcmRCYWRnZSxcbiAgICBEYXNoYm9hcmRQaWU6IERhc2hib2FyZFBpZSxcbiAgICBEYXNoYm9hcmRUaW1lc2VyaWVzOiBEYXNoYm9hcmRUaW1lc2VyaWVzLFxuICAgIERhc2hib2FyZFNhbmtleTogRGFzaGJvYXJkU2Fua2V5LFxuXG4gICAgLy8gbGlzdFxuICAgIExpc3RUaW1lc2VyaWVzOiBMaXN0VGltZXNlcmllcyxcblxuICAgIC8vIG1vZGFsc1xuICAgIE1vZGFsOiBNb2RhbCxcbiAgICBNb2RhbEFkZENoZWNrRXhjbHVzaW9uOiBNb2RhbEFkZENoZWNrRXhjbHVzaW9uLFxuICAgIE1vZGFsQWxlcnRzRmlsdGVyOiBNb2RhbEFsZXJ0c0ZpbHRlcixcbiAgICBNb2RhbEZpbHRlcnM6IE1vZGFsRmlsdGVycyxcbiAgICBNb2RhbFRpbWVzZXJpZXM6IE1vZGFsVGltZXNlcmllcyxcbiAgICBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uOiBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uLFxuICAgIE1vZGFsRGVsZXRlQ29uZmlybTogTW9kYWxEZWxldGVDb25maXJtLFxuICAgIE1vZGFsU25hcHNob3Q6IE1vZGFsU25hcHNob3QsXG4gICAgTW9kYWxBZGREZXZpY2VFeGNsdXNpb246IE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uLFxuICAgIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbjogTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uLFxuICAgIE1vZGFsQWRkSG9zdFJ1bGVzOiBNb2RhbEFkZEhvc3RSdWxlcyxcbiAgICBNb2RhbEFkZEFwcGxpY2F0aW9uOiBNb2RhbEFkZEFwcGxpY2F0aW9uLFxuICAgIE1vZGFsRGVsZXRlQXBwbGljYXRpb246IE1vZGFsRGVsZXRlQXBwbGljYXRpb24sXG4gICAgTW9kYWxFZGl0UmVwb3J0OiBNb2RhbEVkaXRSZXBvcnQsXG5cbiAgICBWdWU6IFZ1ZSxcbn07XG53aW5kb3cubnRvcFZ1ZSA9IG50b3BWdWU7XG4iLCJ2YXIgXzB4NGFlNT1bXCJcXHg2OFxceDc0XFx4NkRcXHg2Q1wiLFwiXFx4NjNcXHg2Q1xceDZGXFx4NkVcXHg2NVwiLFwiXFx4NjFcXHg3MFxceDcwXFx4NjVcXHg2RVxceDY0XCIsXCJcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4MkZcXHgzRVwiLFwiXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjhcXHg3MlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDczXFx4NzRcXHg3OVxceDZDXFx4NjVcXHgzRFxceDIyXFx4NkRcXHg2MVxceDcyXFx4NjdcXHg2OVxceDZFXFx4MkRcXHg2Q1xceDY1XFx4NjZcXHg3NFxceDNBXFx4MjBcXHg2MVxceDc1XFx4NzRcXHg2RlxceDNCXFx4NkRcXHg2MVxceDcyXFx4NjdcXHg2OVxceDZFXFx4MkRcXHg3MlxceDY5XFx4NjdcXHg2OFxceDc0XFx4M0FcXHgyMFxceDYxXFx4NzVcXHg3NFxceDZGXFx4M0JcXHg3MFxceDYxXFx4NjRcXHg2NFxceDY5XFx4NkVcXHg2N1xceDJEXFx4NkNcXHg2NVxceDY2XFx4NzRcXHgzQVxceDIwXFx4NzZcXHg2MVxceDcyXFx4MjhcXHgyRFxceDJEXFx4NjJcXHg3M1xceDJEXFx4NjdcXHg3NVxceDc0XFx4NzRcXHg2NVxceDcyXFx4MkRcXHg3OFxceDJDXFx4MkVcXHgzN1xceDM1XFx4NzJcXHg2NVxceDZEXFx4MjlcXHgzQlxceDcwXFx4NjFcXHg2NFxceDY0XFx4NjlcXHg2RVxceDY3XFx4MkRcXHg3MlxceDY5XFx4NjdcXHg2OFxceDc0XFx4M0FcXHgyMFxceDc2XFx4NjFcXHg3MlxceDI4XFx4MkRcXHgyRFxceDYyXFx4NzNcXHgyRFxceDY3XFx4NzVcXHg3NFxceDc0XFx4NjVcXHg3MlxceDJEXFx4NzhcXHgyQ1xceDJFXFx4MzdcXHgzNVxceDcyXFx4NjVcXHg2RFxceDI5XFx4M0JcXHg3N1xceDY5XFx4NjRcXHg3NFxceDY4XFx4M0FcXHgyMFxceDMxXFx4MzBcXHgzMFxceDI1XFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NzJcXHg2RlxceDc3XFx4MjBcXHg2RFxceDc0XFx4MkRcXHgzMlxceDIyXFx4M0VcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2M1xceDZGXFx4NkNcXHgyRFxceDMxXFx4MzJcXHgyMFxceDYzXFx4NkZcXHg2Q1xceDJEXFx4NkRcXHg2NFxceDJEXFx4MzRcXHgyMFxceDcwXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDMwXFx4MjBcXHg3NFxceDY1XFx4NzhcXHg3NFxceDJEXFx4NjNcXHg2NVxceDZFXFx4NzRcXHg2NVxceDcyXFx4MjBcXHg3NFxceDY1XFx4NzhcXHg3NFxceDJEXFx4NkRcXHg2NFxceDJEXFx4NzNcXHg3NFxceDYxXFx4NzJcXHg3NFxceDIyXFx4M0VcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RVxceDc0XFx4MkRcXHg3M1xceDY5XFx4N0FcXHg2NVxceDNBXFx4MjBcXHgyRVxceDM4XFx4MzdcXHgzNVxceDY1XFx4NkRcXHgzQlxceDIyXFx4M0VcXHgzQ1xceDYxXFx4MjBcXHg2OFxceDcyXFx4NjVcXHg2NlxceDNEXFx4MjJcXHg2OFxceDc0XFx4NzRcXHg3MFxceDczXFx4M0FcXHgyRlxceDJGXFx4NzdcXHg3N1xceDc3XFx4MkVcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJFXFx4NkZcXHg3MlxceDY3XFx4MkZcXHg3MFxceDcyXFx4NkZcXHg2NFxceDc1XFx4NjNcXHg3NFxceDczXFx4MkZcXHg3NFxceDcyXFx4NjFcXHg2NlxceDY2XFx4NjlcXHg2M1xceDJEXFx4NjFcXHg2RVxceDYxXFx4NkNcXHg3OVxceDczXFx4NjlcXHg3M1xceDJGXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRlxceDIyXFx4MjBcXHg3NFxceDYxXFx4NzJcXHg2N1xceDY1XFx4NzRcXHgzRFxceDIyXFx4NUZcXHg2MlxceDZDXFx4NjFcXHg2RVxceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NzZcXHg2NVxceDcyXFx4NzNcXHg2OVxceDZGXFx4NkVcXHgyMlxceDNFXFx4M0NcXHgyRlxceDYxXFx4M0VcXHgyMFxceDdDXFx4MjBcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDY3XFx4NjlcXHg3NFxceDY4XFx4NzVcXHg2MlxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjNcXHg2RlxceDZDXFx4MkRcXHgzMVxceDMyXFx4MjBcXHg2M1xceDZGXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDM0XFx4MjBcXHg3NFxceDY1XFx4NzhcXHg3NFxceDJEXFx4NjNcXHg2NVxceDZFXFx4NzRcXHg2NVxceDcyXFx4MjJcXHgzRVxceDNDXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgyMFxceDczXFx4NzRcXHg3OVxceDZDXFx4NjVcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZFXFx4NzRcXHgyRFxceDczXFx4NjlcXHg3QVxceDY1XFx4M0FcXHgyMFxceDJFXFx4MzhcXHgzN1xceDM1XFx4NjVcXHg2RFxceDNCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjFcXHg2N1xceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjNcXHg2RlxceDZDXFx4MkRcXHgzMVxceDMyXFx4MjBcXHg2M1xceDZGXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDM0XFx4MjBcXHg3NFxceDY1XFx4NzhcXHg3NFxceDJEXFx4NjNcXHg2NVxceDZFXFx4NzRcXHg2NVxceDcyXFx4MjBcXHg3NFxceDY1XFx4NzhcXHg3NFxceDJEXFx4NkRcXHg2NFxceDJEXFx4NjVcXHg2RVxceDY0XFx4MjBcXHg3MFxceDcyXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzMFxceDIyXFx4M0VcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RVxceDc0XFx4MkRcXHg3M1xceDY5XFx4N0FcXHg2NVxceDNBXFx4MjBcXHgyRVxceDM4XFx4MzdcXHgzNVxceDY1XFx4NkRcXHgzQlxceDIyXFx4M0VcXHgzQ1xceDY5XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDY2XFx4NjFcXHg3M1xceDIwXFx4NjZcXHg2MVxceDJEXFx4NjNcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4MjBcXHg3NFxceDY5XFx4NzRcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDUzXFx4NjVcXHg3MlxceDc2XFx4NjVcXHg3MlxceDIwXFx4NTRcXHg2OVxceDZEXFx4NjVcXHgyMlxceDNFXFx4M0NcXHgyRlxceDY5XFx4M0VcXHgyMFxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDY0XFx4MkRcXHg2OVxceDZFXFx4NkNcXHg2OVxceDZFXFx4NjVcXHgyRFxceDYyXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg2M1xceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDIwXFx4NTVcXHg1NFxceDQzXFx4MjBcXHg3Q1xceDIwXFx4NTVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XFx4M0FcXHgyMFxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDY0XFx4MkRcXHg2OVxceDZFXFx4NkNcXHg2OVxceDZFXFx4NjVcXHgyRFxceDYyXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcXHgyMlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcIixcIlxceDZFXFx4NzRcXHg2RlxceDcwXFx4NkVcXHg2N1xceDVGXFx4NzJcXHg2NVxceDZDXFx4NjVcXHg2MVxceDczXFx4NjVcXHg1RlxceDY5XFx4NkVcXHg2NlxceDZGXCIsXCJcXHg3Q1wiLFwiXFx4NzNcXHg3MFxceDZDXFx4NjlcXHg3NFwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg3NlxceDY1XFx4NzJcXHg3M1xceDY5XFx4NkZcXHg2RVwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2N1xceDY5XFx4NzRcXHg2OFxceDc1XFx4NjJcIixcIlxceEE5XFx4MjBcXHgzMVxceDM5XFx4MzlcXHgzOFxceDJEXCIsXCJcXHg2RVxceDc0XFx4NkZcXHg3MFxceDVGXFx4NjFcXHg2N1xceDY1XFx4NUZcXHg3NFxceDZGXCIsXCJcXHgyMFxceDJEXFx4MjBcXHg2RVxceDc0XFx4NkZcXHg3MFwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2MVxceDY3XFx4NjVcIixcIlxceDYyXFx4NkZcXHg2NFxceDc5XFx4MjBcXHg2NFxceDY5XFx4NzZcXHgyMFxceDZEXFx4NjFcXHg2OVxceDZFXCIsXCJcXHg3MFxceDYxXFx4NzJcXHg2NVxceDZFXFx4NzRcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NjNcXHg2Q1xceDZGXFx4NjNcXHg2QlwiLFwiXCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDc1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVwiLFwiXFx4NzJcXHg2NVxceDZEXFx4NkZcXHg3NlxceDY1XCIsXCJcXHg2Q1xceDZGXFx4NjNcXHg2MVxceDZDXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDc1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVwiLFwiXFx4NjNcXHg2OFxceDYxXFx4NzJcXHg3NFxceDVGXFx4NjNcXHg2RlxceDZDXFx4NkZcXHg3MlxceDczXCIsXCJcXHg2RlxceDZFXFx4NUZcXHg2M1xceDc1XFx4NzNcXHg3NFxceDZGXFx4NkRcXHg1RlxceDY1XFx4NzZcXHg2NVxceDZFXFx4NzRcIixcIlxceDcyXFx4NjVcXHg2MVxceDY0XFx4NzlcIl07ZnVuY3Rpb24gaSgpe2NvbnN0IF8weDY0OGN4Mj0oXzB4NjQ4Y3gzKT0+e3JldHVybiAkKF8weDRhZTVbM10pW18weDRhZTVbMl1dKCQoXzB4NjQ4Y3gzKVtfMHg0YWU1WzFdXSgpKVtfMHg0YWU1WzBdXSgpfTtsZXQgXzB4NjQ4Y3g0PV8weDRhZTVbNF07Y29uc3QgXzB4NjQ4Y3g1PSgpPT57bGV0IF8weDY0OGN4Nj0kKF8weDY0OGN4NCk7bGV0IF8weDY0OGN4Nz1pMThuKF8weDRhZTVbNV0pO2xldCBfMHg2NDhjeDg9XzB4NjQ4Y3g3W18weDRhZTVbN11dKF8weDRhZTVbNl0pOyQoXzB4NGFlNVs4XSxfMHg2NDhjeDYpW18weDRhZTVbMF1dKF8weDY0OGN4OFswXSk7JChfMHg0YWU1WzldLF8weDY0OGN4NilbXzB4NGFlNVswXV0oXzB4NjQ4Y3g4WzFdKTtsZXQgXzB4NjQ4Y3g5PWAke18weDRhZTVbMTBdfSR7aTE4bihfMHg0YWU1WzExXSl9JHtfMHg0YWU1WzEyXX1gOyQoXzB4NGFlNVsxM10sXzB4NjQ4Y3g2KVtfMHg0YWU1WzBdXShfMHg2NDhjeDkpO3JldHVybiBfMHg2NDhjeDIoXzB4NjQ4Y3g2KX07Y29uc3QgXzB4NjQ4Y3hhPV8weDY0OGN4NSgpO2NvbnN0IF8weDY0OGN4Yj0oKT0+eyQoXzB4NGFlNVsxNF0pW18weDRhZTVbMl1dKF8weDY0OGN4YSl9O18weDY0OGN4YigpO2NvbnN0IF8weDY0OGN4Yz0oKT0+e3JldHVybiAkKF8weDRhZTVbMTZdKVtfMHg0YWU1WzE1XV0oKVtfMHg0YWU1WzE1XV0oKVtfMHg0YWU1WzE1XV0oKVtfMHg0YWU1WzE1XV0oKVtfMHg0YWU1WzE1XV0oKX07Y29uc3QgXzB4NjQ4Y3hkPSgpPT57bGV0IF8weDY0OGN4ZT1fMHg2NDhjeGMoKTtpZihfMHg2NDhjeGU9PSBudWxsKXtyZXR1cm4gZmFsc2V9O2xldCBfMHg2NDhjeGY9XzB4NjQ4Y3hlW18weDRhZTVbMV1dKCk7JChfMHg0YWU1WzE2XSxfMHg2NDhjeGYpW18weDRhZTVbMF1dKF8weDRhZTVbMTddKTskKF8weDRhZTVbMThdLF8weDY0OGN4ZilbXzB4NGFlNVswXV0oXzB4NGFlNVsxN10pO2NvbnN0IF8weDY0OGN4MTA9XzB4NjQ4Y3gyKF8weDY0OGN4Zik7aWYoXzB4NjQ4Y3hhIT09IF8weDY0OGN4MTApe3JldHVybiBmYWxzZX07cmV0dXJuIHRydWV9O2NvbnN0IF8weDY0OGN4MTE9KCk9PntsZXQgXzB4NjQ4Y3hlPV8weDY0OGN4YygpO2lmKF8weDY0OGN4ZSE9IG51bGwpe18weDY0OGN4ZVtfMHg0YWU1WzE5XV0oKX19O2NvbnN0IF8weDY0OGN4MTI9KF8weDY0OGN4MTMpPT57JChfMHg0YWU1WzE2XSlbXzB4NGFlNVswXV0oXzB4NjQ4Y3gxM1tfMHg0YWU1WzIwXV0pOyQoXzB4NGFlNVsxOF0pW18weDRhZTVbMF1dKF8weDY0OGN4MTNbXzB4NGFlNVsyMV1dKX07bnRvcG5nX2V2ZW50c19tYW5hZ2VyW18weDRhZTVbMjNdXShfMHg0YWU1WzIyXSxudG9wbmdfY3VzdG9tX2V2ZW50cy5HRVRfSU5URVJGQUNFX0RBVEEsKF8weDY0OGN4MTMpPT57aWYoXzB4NjQ4Y3hkKCk9PSBmYWxzZSl7XzB4NjQ4Y3gxMSgpO18weDY0OGN4YigpfTtfMHg2NDhjeDEyKF8weDY0OGN4MTMpfSk7fSQoZG9jdW1lbnQpW18weDRhZTVbMjRdXSgoKT0+e3JldHVybiBpKCl9KTtcbiJdLCJuYW1lcyI6WyJEYXRlIiwicHJvdG90eXBlIiwiZm9ybWF0IiwibyIsInRoaXMiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiTWF0aCIsImZsb29yIiwiUyIsImdldE1pbGxpc2Vjb25kcyIsImsiLCJ0ZXN0IiwicmVwbGFjZSIsIlJlZ0V4cCIsIiQxIiwiZ2V0RnVsbFllYXIiLCJzdWJzdHIiLCJsZW5ndGgiLCJqUXVlcnkiLCJmbiIsImV4dGVuZCIsImRpc2FibGUiLCJzdGF0ZSIsImVhY2giLCIkdGhpcyIsIiQiLCJpcyIsImRpc2FibGVkIiwidG9nZ2xlQ2xhc3MiLCJOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSIsIlJFR0VYRVMiLCJpcHY0IiwiU3RyaW5nIiwicmF3IiwiaXB2NiIsImRvbWFpbk5hbWUiLCJwb3J0IiwibGF0ZW5jeSIsInVybCIsImVtYWlsVXJsIiwibWFjQWRkcmVzcyIsImhvc3RuYW1lIiwidXNlcm5hbWUiLCJzaW5nbGV3b3JkIiwiZW1haWwiLCJlbWFpbENvbW1hTGlzdCIsImh0dHBzIiwidG9rZW4iLCJzY29yZSIsInRlbGVncmFtX2NoYW5uZWwiLCJwYXNzd29yZCIsInRsc19jZXJ0aWZpY2F0ZSIsImRvbWFpbl9uYW1lX25vdF9zdHJpY3QiLCJub25fcXVvdGVkX3RleHQiLCJOdG9wVXRpbHMiLCJzdGF0aWMiLCJ0aW1lIiwidG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsInN1YnN0cmluZyIsInJlcXVlc3QiLCJmZXRjaCIsImh0dHBfcHJlZml4IiwianNvbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInJjIiwicmNfc3RyIiwiZGF0YVBhdHRlcm4iLCJkYXRhIiwid2FybiIsInBhdHRlcm4iLCJzcGxpdCIsIm1hcCIsInAiLCJ0b1N0cmluZyIsImpvaW4iLCJhdHRyIiwicmVtb3ZlQXR0ciIsIm1hYyIsInZhbHVlIiwid2hhdCIsIm9wdGlvbmFsX21hc2siLCJpcF9hZGRyIiwiZWxlbXMiLCJtYXNrIiwiaXNOdW1lcmljIiwicGFyc2VJbnQiLCJpc19nb29kX2lwdjQiLCJ0eXBlIiwiYWRkcmVzcyIsImlzX2dvb2RfaXB2NiIsImJpdHMiLCJzaXplcyIsImJpdHNfbG9nMTAwMCIsImxvZyIsImkiLCJpc05hTiIsInJvdW5kIiwicG93IiwicmV0IiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJlcHMiLCJyZXMiLCJzY2FsZVZhbHVlIiwiZXhwb3J0cyIsImV4cG9ydHNfbGFiZWwiLCJpMThuX2V4dCIsInRvTG93ZXJDYXNlIiwiYnl0ZXMiLCJmYml0cyIsInBwcyIsImZwcyIsIm1wcyIsIm1zIiwidW5kZWZpbmVkIiwidmFsIiwiYXBzIiwidG90YWwiLCJwY3RnIiwid2hlbiIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJhY3R1YWwiLCJiZWZvcmUiLCJzdHIiLCJsZW4iLCJudW0iLCJraWxvYnl0ZSIsIm1lZ2FieXRlIiwiZ2lnYWJ5dGUiLCJ0ZXJhYnl0ZSIsImN1cnJlbnQiLCJsYXN0Iiwid2l0aENvbG9yIiwiZW5hYmxlZCIsImZpbmQiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwicHJvcCIsInRvZ2dsZUFsbFRhYnMiLCJzIiwiblN0ciIsIngiLCJ4MSIsIngyIiwicmd4Iiwic2NhbGUiLCJkZWNpbWFscyIsImZhY3RvciIsIm4iLCJhZGRDb21tYXMiLCJzZWNvbmRzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlYyIsIm1zZyIsIm1zZ19hcnJheSIsInllYXJzIiwicHVzaCIsIm1zZWMiLCJzZWNvbmRzVG9UaW1lIiwiZXBvY2giLCJkIiwidGRpZmYiLCJnZXRUaW1lIiwiZGlmZl9lcG9jaCIsImRlZmF1bHRzIiwib3ZlcnJpZGUiLCJmb3JtIiwicGFyYW1zIiwiaGFzT3duUHJvcGVydHkiLCJhcHBlbmRUbyIsImhvc3Rfa2V5IiwibmF2X29iamVjdCIsImRlZmF1bHRfdGFiIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJvbiIsImlkIiwidGFyZ2V0IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaGFzaCIsInRhYiIsIm5hbWUiLCJjb250ZXh0IiwiX2FkZF9maW5kX2hvc3RfbGluayIsImlwIiwiY29tbXVuaXR5X2lkIiwiamEzX2NsaWVudCIsImphM19zZXJ2ZXIiLCJuZXR3b3JrIiwic25tcF9wb3J0X2lkeCIsImFzbiIsImh0bWxfdGFnIiwidGltZXN0YW1wIiwiaHRtbCIsImxvY2FsaXplZCIsImQzIiwiaG9zdCIsInF1ZXJ5U3RyaW5nIiwicXVlcnkiLCJwYWlycyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjdXJfcGFyYW1zIiwicGFyc2VRdWVyeSIsInNlYXJjaCIsIm5ld19wYXJhbXMiLCJuZXdfcXVlcnkiLCJwYXJhbSIsInByb3RvY29sIiwicGF0aG5hbWUiLCJzdGF0dXNfY29kZSIsInN0YXR1c190ZXh0IiwiJGVycm9yX2xhYmVsIiwiaXNfZGlmZmVyZW50IiwibWVzc2FnZSIsInJlcXVlc3RfZmFpbGVkX21lc3NhZ2UiLCJ0ZXh0Iiwic2hvdyIsImFsZXJ0IiwibG9hZENvbmZpZ1hIUiIsImhpZGUiLCIkYnV0dG9uIiwiZmlsZSIsImZpbGVzIiwibm9fZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNUZXh0Iiwib25sb2FkIiwianNvbkNvbmZpZ3VyYXRpb24iLCJKU09OIiwicGFyc2UiLCJyZXN1bHQiLCJyZXN0X2NvbnN0cyIsInJlc3BvbnNlSlNPTiIsImRvbmUiLCJyZXNwb25zZSIsInN0YXR1cyIsInhociIsInN1Y2Nlc3NDYWxsYmFjayIsImJvZHkiLCJpMThuIiwiVG9hc3RVdGlscyIsInNob3dUb2FzdCIsImxldmVsIiwidGl0bGUiLCJkZWxheSIsIm1vZGFsIiwiZmFpbCIsImZhaWx1cmVDYWxsYmFjayIsIkZBSUxFRF9IVFRQX1JFUVVFU1QiLCJhbHdheXMiLCJzZXJpYWxpemVkQXJyYXkiLCJzZXJpYWxpemVkIiwiZm9yRWFjaCIsIm9iaiIsImluY2x1ZGVzIiwidHJpbSIsImZvcm1TZWxlY3RvciIsImlucHV0IiwicmVzZXQiLCJ1cmkiLCJvcHRpb25zIiwiY29uZmlnIiwic2lnbmFsIiwiQWJvcnRDb250cm9sbGVyIiwidGhlbiIsIm9rIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiY2F0Y2giLCJhY3Rpb24iLCJjc3JmIiwic3VjY2VzcyIsImZhaWx1cmUiLCJlbXB0eSIsInBvc3QiLCJhcnJheSIsImxpbWl0IiwiYW5kX3hfbW9yZSIsImhhc1JlZmVyZXIiLCJyZWZlcmVyUGFyYW1zIiwiVVJMIiwiT2JqZWN0IiwiZW50cmllcyIsInNlYXJjaFBhcmFtcyIsInNldCIsInJlZlVybCIsImhyZWYiLCJwb29sSWQiLCJwb29sVHlwZSIsImdldFBvb2xMaW5rIiwicG9vbCIsInJzcCIsIiRlbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJrZXkiLCJnZW5lcmF0ZVNjYWxlRWxlbWVudEtleSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJpZGVudGlmaWNhdG9yIiwicGFnZSIsImVsZW1lbnRJZCIsImN1cnJlbnRWYWx1ZSIsImdldEl0ZW0iLCIkZmllbGQiLCJpdGVtIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsImFwcGVuZENoaWxkIiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDaGlsZCIsInRvb2x0aXAiLCJ0IiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJpbm5lclRleHQiLCJsYWJlbCIsImxhc3RfY2hhciIsInNob3J0ZW5lZF9sYWJlbCIsImxhc3RfaW5kZXgiLCJsYXN0SW5kZXhPZiIsInJlcXVlc3RlZF9sYWJlbCIsImEiLCJiIiwibmFtZUEiLCJuYW1lQiIsIm1heF9uYW1lX2xlbiIsInNob3J0ZW5MYWJlbCIsInZsYW5faW5kZXgiLCJyb3ciLCJjb3VudHJ5X2NvZGUiLCJpc19jbGllbnQiLCJ2bGFuX2lkIiwiYnVpbGRVUkwiLCJjb3VudHJ5X29iaiIsImNsaV9jb3VudHJ5Iiwic3J2X2NvdW50cnkiLCJjb3VudHJ5IiwibmV0d29ya19rZXkiLCJtIiwieGEiLCJjb3VudCIsInBhZGREb25lIiwicGFkZGluZyIsImFzbl9rZXkiLCJwZXJjZW50YWdlIiwicGVyY2VudGFnZV8xIiwicGVyY2VudGFnZV8yIiwibGFiZWxfMSIsImxhYmVsXzIiLCJzZXJpZXMiLCJzZXJpZXNJbmRleCIsImRhdGFQb2ludEluZGV4IiwidyIsInNlcmllIiwieV92YWx1ZSIsInhheGlzIiwieWF4aXMiLCJldmVudCIsImNoYXJ0Q29udGV4dCIsImJhc2VfdXJsIiwiZGVmYXVsdF91cmwiLCJzdGFydF91cmwiLCJtZXRhIiwidXJsX3F1ZXJ5IiwibnRvcG5nX3VybF9tYW5hZ2VyIiwiZ29fdG9fdXJsIiwieF92YWx1ZSIsImRhdGF0YWJsZUFkZEVtcHR5Um93IiwidGFibGUiLCJlbXB0eV9zdHIiLCJjb2x1bW5zIiwiZmlsdGVyIiwiY3NzIiwiZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMiLCJkYXRhdGFibGVJc0VtcHR5IiwiZGF0YXRhYmxlR2V0QnlGb3JtIiwicGFyZW50IiwiZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2siLCJ0ZF9pZHgiLCJic19jbGFzcyIsImNhbGxiYWNrX3N0ciIsImxpbmsiLCJ2aXNpYmxlIiwiYXBwZW5kIiwiZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXgiLCJjb2x1bW5fa2V5IiwiZmluZEluZGV4IiwiZmllbGQiLCJpbml0RGF0YVBhdHRlcm5zIiwiZ3JhcGhfZGl2X2lkIiwibGlua3MiLCJub2RlcyIsIl9saW5rIiwic291cmNlX3BpZCIsInNvdXJjZSIsInNvdXJjZV9uYW1lIiwic291cmNlX3R5cGUiLCJwaWQiLCJ0YXJnZXRfcGlkIiwidGFyZ2V0X25hbWUiLCJ0YXJnZXRfdHlwZSIsImNvbG9yIiwiY2F0ZWdvcnkxMCIsImZvcmNlIiwibGF5b3V0IiwidmFsdWVzIiwic2l6ZSIsImxpbmtEaXN0YW5jZSIsImNoYXJnZSIsInBhdGgiLCJsaW5rQXJjIiwiY2lyY2xlIiwidHJhbnNmb3JtIiwic3RhcnQiLCJzdmciLCJzZWxlY3RBbGwiLCJlbnRlciIsImNhbGwiLCJkcmFnIiwiZHgiLCJkeSIsInkiLCJkciIsInNxcnQiLCJNb2RhbEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJkaWFsb2ciLCJjbG9zZXN0IiwiZG9udERpc2FibGVTdWJtaXQiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJsaXN0IiwiYmluZEZvcm1WYWxpZGF0aW9uIiwidG9nZ2xlRm9ybVN1Ym1pc3Npb24iLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImluaXRpYWxTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImZpcnN0Q2xvc2VBdHRlbXB0IiwiaXNTdWJtaXR0aW5nIiwiY3JlYXRlRm9ybVNuYXBzaG90Iiwic25hcHNob3QiLCJpbnB1dHMiLCJoaWRkZW4iLCJjb21wYXJlRm9ybVNuYXBoc290IiwiczEiLCJzMiIsImRlbGVnYXRlTW9kYWxDbG9zaW5nIiwic2VsZiIsIm9mZiIsInJlcG9ydFZhbGlkaXR5Iiwic2VsZWN0b3IiLCIkaGlkZGVuIiwiY2xlYW5Gb3JtIiwiZmlsbEZvcm1Nb2RhbCIsImxvYWRGb3JtRGF0YSIsImludm9rZU1vZGFsSW5pdCIsIm9uTW9kYWxJbml0IiwicGFyZW50cyIsIm9uTW9kYWxTaG93IiwiZGVsZWdhdGVSZXNldEJ1dHRvbiIsImRlbGVnYXRlU3VibWl0Iiwic3VibWl0SGFuZGxlciIsImlzU3luY1JlcXVlc3QiLCJzdG9wUHJvcGFnYXRpb24iLCJtYWtlUmVxdWVzdCIsImFzeW5jIiwiJGlucHV0IiwidGltZW91dElkIiwidmFsaWRJbnB1dCIsInZhbGlkYXRpb24iLCJyZXNvbHZlRE5TIiwibWF0Y2giLCIkc3Bpbm5lciIsInNldEN1c3RvbVZhbGlkaXR5IiwicmNfc3RyX2hyIiwidmFsaWRIb3N0bmFtZSIsImNhbm5vdEJlRW1wdHkiLCJpc0lucHV0RW1wdHkiLCJ2YWxpZGF0aW9uRW1wdHlNZXNzYWdlIiwibWlzc2luZ19maWVsZCIsInZhbGlkaXR5IiwicGF0dGVybk1pc21hdGNoIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJpbnZhbGlkX2ZpZWxkIiwicmFuZ2VPdmVyZmxvdyIsInJhbmdlT3ZlcmZsb3dNZXNzYWdlIiwicmFuZ2VVbmRlcmZsb3ciLCJyYW5nZVVuZGVyZmxvd01lc3NhZ2UiLCJjaGVja1ZhbGlkYXRpb24iLCJpc1ZhbGlkIiwibWVzc2FnZVRvU2hvdyIsIiRlcnJvciIsInJlbW92ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJnZXRNb2RhbElEIiwiaWR4IiwidmFsaWQiLCIkZmVlZGJhY2tMYWJlbCIsInN1Ym1pdEJ1dHRvbiIsImRhdGFUb1NlbmQiLCJiZWZvcmVTdW1iaXQiLCJzdWJtaXRPcHRpb25zIiwiZW5kcG9pbnQiLCJtZXRob2QiLCJhamF4IiwiZGF0YVR5cGUiLCJjb250ZW50VHlwZSIsImdldCIsInRleHRTdGF0dXMiLCJyZXNldEFmdGVyU3VibWl0Iiwib25TdWJtaXRTdWNjZXNzIiwianF4aHIiLCJlcnJvclRocm93biIsIm9uU3VibWl0RXJyb3IiLCJyZXNldEJ1dHRvbiIsImRlZmF1bHRWYWx1ZXMiLCJzZXJpYWxpemVGb3JtQXJyYXkiLCJzZXJpYWxpemVBcnJheSIsInR5cGVzIiwibm9fZm9ybWF0dGluZyIsInVtIiwic3RlcCIsImRlY2ltYWwiLCJzY2FsZV92YWx1ZXMiLCJudW1iZXIiLCJmdWxsX251bWJlciIsInRob3VzYW5kc19zZXAiLCJhYnNvbHV0ZV92YWx1ZSIsImJwcyIsImZsb3dzIiwiYWxlcnRzIiwiYWxlcnRwcyIsImhpdHMiLCJoaXRzcyIsInBhY2tldHMiLCJtYXhfdmFsdWUiLCJnZXRVbml0TWVhc3VyZUxlbiIsInNwYWNlVmFsdWUiLCJzcGFjZVVtIiwibWF4IiwiZ2V0U2NhbGVGYWN0b3JJbmRleCIsInR5cGVPcHRpb25zIiwibWVhc3VyZXMiLCJnZXRGb3JtYXR0ZXIiLCJhYnNvbHV0ZVZhbHVlIiwic2NhbGVGYWN0b3JJbmRleCIsIm5lZ2F0aXZlVmFsdWUiLCJmb3JtYXR0ZXJVdGlscyIsImRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyIsImNvbHVtbl9pZCIsInJlZnJlc2hfaW50ZXJ2YWwiLCJ0cmVuZF9jb2x1bW5zIiwiJGR0Iiwicm93cyIsInJlc3VsdHNldCIsIm9sZF90aW1lciIsIm9sZF9yZXEiLCJjbGVhckludGVydmFsIiwicmVtb3ZlRGF0YSIsImFib3J0IiwiaWRzIiwiaWRfdG9fcm93IiwiZGF0YV9pZCIsImN1c3RvbV9ob3N0cyIsImZpcnN0X2xvYWQiLCJfcHJvY2Vzc19yZXN1bHQiLCJyb3dfaWR4Iiwicm93X2h0bWwiLCJyb3dfdGRzIiwiY2VsbCIsIiRjZWxsIiwib2xkX3ZhbCIsInRyZW5kX3ZhbHVlX2Zvcm1hdHRlciIsIm5ld192YWwiLCJhcnJvd3MiLCJkcmF3VHJlbmQiLCJzZXRJbnRlcnZhbCIsImNhY2hlIiwiZGF0YXRhYmxlRm9yRWFjaFJvdyIsImNhbGxiYWNrcyIsInJvd19pIiwiYmluZCIsImRhdGF0YWJsZVJlbW92ZUVtcHR5Um93IiwiZGF0YXRhYmxlVW5kb0FkZFJvdyIsIm5ld19yb3ciLCJidF90b19lbmFibGUiLCJheXNVcGRhdGVGb3JtIiwiZHQiLCJkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrIiwiZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlIiwidHJfb2JqIiwiYWRkZWRfcm93c19wcmVmaXgiLCJkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuIiwidGhpc19zZWxlY3QiLCJzZWxlY3Rvcl9mbiIsImNhbGxiYWNrIiwib3RoZXIiLCJkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMiLCJvcHRpb25fb2JqIiwiZW5hYmxlIiwic2VsZWN0X29iaiIsInNob3VsZF9yZXNldCIsImZpcnN0IiwiZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZSIsImNoYW5nZV9jYWxsYmFjayIsIm9sZF92YWx1ZSIsIm5ld192YWx1ZSIsIm90aGVycyIsInBhcmFtc0V4dGVuZCIsIm9uX2NoYW5nZSIsIm5vb3AiLCJ0cmlnZ2VyIiwiZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeSIsImRhdGF0YWJsZUlzTGFzdFBhZ2UiLCJsYXN0cGFnZSIsImhhc0NsYXNzIiwiZGF0YXRhYmxlR2V0Q29sdW1uIiwiaWRfa2V5IiwiaWRfdmFsdWUiLCJtb2RhbEhhbmRsZXIiLCJhcmdzIiwibG9hZGVkRGF0YSIsInNlbnQiLCJvbk1vZGFsUmVzZXQiLCJkZWZhdWx0RGF0YSIsIm1oIiwiZWJwZlV0aWxzIiwibnRvcEZvcm1hdHRlclV0aWxzIiwiZmlsdGVyc190b192YWxpZGF0ZSIsIm1ha2VVbmlxdWVWYWxpZGF0b3IiLCJpdGVtc19mdW5jdGlvbiIsImNtcF9uYW1lIiwibWVtYmVyVmFsdWVWYWxpZGF0b3IiLCJtZW1iZXIiLCJpc19tYWNfYWRkcmVzcyIsImlzX25ldHdvcmtfbWFzayIsIm1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IiLCJwYXNzd29yZE1hdGNoVmFsaWRhdG9yIiwib3RoZXJfaW5wdXQiLCJub3QiLCJwb29sbmFtZVZhbGlkYXRvciIsInBhc3N3b3JkTWF0Y2hSZWNoZWNrIiwiaXRlbXMiLCJub3RfZW1wdHkiLCJob3N0T3JNYWNWYWxpZGF0b3IiLCJpcEFkZHJlc3NWYWxpZGF0b3IiLCJicGZWYWxpZGF0b3IiLCJmaWx0ZXJfZmllbGQiLCJzeW5jIiwiYWpheF9vYmoiLCJ0aW1lciIsInN1Ym1pdF9yZW1pbmQiLCJsYXN0X3ZhbCIsInNlbmRBamF4IiwiZmluYWxseV9jaGVjayIsIm50b3BuZ19zeW5jIiwiY29tcG9uZW50c19yZWFkeSIsInN1YnNjcmliZXJzIiwicmVhZHkiLCJjb21wb25lbnRfbmFtZSIsInJlc29sdmUiLCJvbl9yZWFkeSIsIlByb21pc2UiLCJyZWpldnQiLCJjb21wbGV0ZWQiLCJudG9wbmdfdXRpbGl0eSIsImdsb2JhbF9odHRwX2hlYWRlcnMiLCJpc19hcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImlzX29iamVjdCIsImNsb25lIiwib2JqZWN0X3RvX2FycmF5IiwiZ2V0X3V0Y19zZWNvbmRzIiwidXRjX21zIiwibm93IiwiTnVtYmVyIiwiZ2V0X3RpbWVmcmFtZXNfZGljdCIsIm1pbiIsInRfZGF5IiwidF93ZWVrIiwidF9tb250aCIsInRfeWVhciIsImhvdXIiLCJkYXkiLCJzZXREYXRlIiwid2VlayIsIm1vbnRoIiwic2V0TW9udGgiLCJ5ZWFyIiwiZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCIsInRpbWVmcmFtZV9pZCIsInRpbWVmcmFtZXNfZGljdCIsImtleXMiLCJyb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZCIsInRzIiwic2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCIsInRpbWVfaW50ZXJ2YWxfaWQiLCJyb3VuZF90aW1lZnJhbWVfaWQiLCJlcG9jaF9iZWdpbiIsImdldF91cmxfZW50cnkiLCJlcG9jaF9lbmQiLCJub3dfcyIsInNlY29uZHNfaW5faW50ZXJ2YWwiLCJzZXRfa2V5X3RvX3VybCIsImNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsIiwiZl9jb25kaXRpb24iLCJnZXRfZXBvY2giLCJnZXRfdXJsX2Vwb2NoX2ludGVydmFsIiwiZnJvbV91dGNfc190b19zZXJ2ZXJfZGF0ZSIsInV0Y19zZWNvbmRzIiwidXRjIiwibG9jYWxfb2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXJ2ZXJfb2Zmc2V0IiwibW9tZW50IiwidHoiLCJudG9wX3pvbmVpbmZvIiwiX29mZnNldCIsImdldF9kYXRlX2Zvcm1hdCIsImlzX3JhbmdlX3BpY2tlciIsInJlc3RfcGFyYW1zIiwiZGF0ZV9mb3JtYXRfdXJsIiwiaHR0cF9yZXF1ZXN0IiwiZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0IiwiY29weV9vYmplY3Rfa2V5cyIsInNvdXJjZV9vYmoiLCJkZXN0X29iaiIsInJlY3Vyc2l2ZV9vYmplY3QiLCJnZXRfY3ZlX2RldGFpbHNfdXJsIiwiY3ZlX2lkIiwic2Nhbl90eXBlIiwic2V0X2h0dHBfZ2xvYmFsc19oZWFkZXJzIiwiaGVhZGVycyIsImh0dHBfcG9zdF9yZXF1ZXN0IiwidGhyb3dfZXhjZXB0aW9uIiwibm90X3Vud3JhcCIsImpzb25fcmVzIiwiZG93bmxvYWRfVVJJIiwiZG93bmxvYWQiLCJnZXRfcmFuZG9tX3N0cmluZyIsInJhbmRvbSIsInN0cmluZ19oYXNoX2NvZGUiLCJjaHIiLCJjaGFyQ29kZUF0IiwibW9kIiwibnRvcG5nX3N0YXR1c19tYW5hZ2VyIiwiZ2xvYmFsX3N0YXR1cyIsIm5vdGlmeV9zdWJzY3JpYmVycyIsInNraXBfaWQiLCJmX29uX2NoYW5nZSIsImdldF9zdGF0dXMiLCJub3RfY2xvbmUiLCJ1cGRhdGVfc3Vic2NyaWJlcnMiLCJvbl9zdGF0dXNfY2hhbmdlIiwiZ2V0X2luaXRfbm90aWZ5IiwicmVwbGFjZV9zdGF0dXMiLCJyZWxwbGFjZV9nbG9iYWxfc3RhdHVzIiwiYWRkX29ial90b19zdGF0dXMiLCJuZXdfc3RhdHVzIiwiYWRkX3ZhbHVlX3RvX3N0YXR1cyIsIm50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIiLCJjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIiLCJnZXRfdXJsX3BhcmFtcyIsImdldF91cmxfc2VhcmNoX3BhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImdldF91cmxfZW50cmllcyIsInBhcmFtX25hbWUiLCJnZXRfdXJsX29iamVjdCIsIm9wZW5fbmV3X3dpbmRvdyIsIm9wZW4iLCJyZWxvYWRfdXJsIiwicmVsb2FkIiwicHVzaFN0YXRlIiwicmVwbGFjZV91cmwiLCJ1cmxfcGFyYW1zIiwicmVwbGFjZV91cmxfYW5kX3JlbG9hZCIsInNlcmlhbGl6ZV9wYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNldF9jdXN0b21fa2V5X3NlcmlhbGl6ZXIiLCJmX2dldF91cmxfcGFyYW0iLCJvYmpfdG9fdXJsX3BhcmFtcyIsImRlZmF1bHRfc2VyaWFsaXplciIsInNlcmlhbGl6ZXIiLCJkZWxldGVfcGFyYW1zIiwicGFyYW1zX2tleSIsInNlYXJjaF9wYXJhbXMiLCJkZWxldGUiLCJkZWxldGVfa2V5X2Zyb21fdXJsIiwiYWRkX29ial90b191cmwiLCJ1cmxfcGFyYW1zX29iaiIsIm5ld191cmxfcGFyYW1zIiwibmV3X2VudHJpZXMiLCJuZXdfdXJsIiwibnRvcG5nX2V2ZW50cyIsIkVQT0NIX0NIQU5HRSIsIkZJTFRFUlNfQ0hBTkdFIiwibnRvcG5nX2V2ZW50c19jb21wYXJlIiwib2xkX3N0YXR1cyIsImZpbHRlcnMiLCJzb21lIiwiZl9uZXciLCJmX29sZCIsIm50b3BuZ19jdXN0b21fZXZlbnRzIiwiU0hPV19NT0RBTF9GSUxURVJTIiwiTU9EQUxfRklMVEVSU19BUFBMWSIsIlNIT1dfR0xPQkFMX0FMRVJUX0lORk8iLCJWSVNfREFUQV9MT0FERUQiLCJDSEFOR0VfUEFHRV9USVRMRSIsIkRBVEFUQUJMRV9MT0FERUQiLCJHRVRfSU5URVJGQUNFX0ZBVEEiLCJDT01QT05FTlRfRVBPQ0hfSU5URVJWQUxfQ0hBTkdFIiwibnRvcG5nX2V2ZW50c19tYW5hZ2VyIiwiZXZlbnRzX21hbmFnZXJfaWQiLCJldmVudHNfc3Vic2NyaWJlcnMiLCJnZXRfZXZlbnRfZm9yX3NpbmdsZV9kZXN0IiwiZGVzdF9pZCIsImV2ZW50X25hbWUiLCJmX2NvbXBhcmUiLCJlbWl0Iiwib25fZXZlbnQiLCJmX29uX2V2ZW50IiwiaXNfc2luZ2xlX2Rlc3RfZXZlbnQiLCJlbWl0X2N1c3RvbV9ldmVudCIsIm9uX2N1c3RvbV9ldmVudCIsImVtaXRfZXZlbnQiLCJvbl9ldmVudF9jaGFuZ2UiLCJQaWVDaGFydCIsInVwZGF0ZV91cmwiLCJ1bml0cyIsInJlZnJlc2giLCJzdHJlYWtlckRhdGFBZGRlZCIsInBhdGhzIiwibGluZXMiLCJ2YWx1ZUxhYmVscyIsIm5hbWVMYWJlbHMiLCJwaWVEYXRhIiwib2xkUGllRGF0YSIsImZpbHRlcmVkUGllRGF0YSIsImgiLCJpciIsInRleHRPZmZzZXQiLCJ0d2VlbkR1cmF0aW9uIiwiciIsImRvbnV0IiwicGllIiwiY2F0ZWdvcnkyMCIsImFyYyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJ2aXMiLCJhcmNfZ3JvdXAiLCJsYWJlbF9ncm91cCIsImNlbnRlcl9ncm91cCIsInRvdGFsVW5pdHMiLCJ0b3RhbFZhbHVlIiwiY3JlYXRlX3BpZV9jaGFydCIsImNvbXBhcmVfYnlfbGFiZWwiLCJwaWVUd2VlbiIsInMwIiwiZTAiLCJpbnRlcnBvbGF0ZSIsInJlbW92ZVBpZVR3ZWVuIiwiUEkiLCJ0ZXh0VHdlZW4iLCJpbnRlcnBvbGF0ZU51bWJlciIsImNvcyIsInNpbiIsInVwZGF0ZSIsImNvbnRlbnQiLCJwYXJzZWRfY29udGVudCIsInBhcnNlSlNPTiIsInNvcnQiLCJ0b3RhbE9jdGV0cyIsImZpbHRlckRhdGEiLCJpbmRleCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImF0dHJUd2VlbiIsImV4aXQiLCJ1cGRhdGVfcGllX2NoYXJ0Iiwic2V0VXJsUGFyYW1zIiwiZm9yY2VVcGRhdGUiLCJzdG9wSW50ZXJ2YWwiLCJzdGFydEludGVydmFsIiwicF9waWVJbnRlcnZhbCIsInBpZUludGVydmFsIiwiREVGSU5FRF9XSURHRVRTIiwiREVGSU5FRF9FVkVOVFMiLCJkYl9hbmFseXplIiwiZmlsdGVyaW5nX2xhYmVscyIsIm9wZXJhdG9yIiwibm9uZSIsInN0YW5kYXJkIiwiREVGSU5FRF9UT09MVElQIiwiZm9ybWF0X2J5dGVzIiwiYnl0ZXNUb1NpemUiLCJmb3JtYXRfcGt0cyIsImZvcm1hdFBhY2tldHMiLCJmb3JtYXRfdmFsdWUiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdF9tdWx0aXBsZV9kYXRlIiwiZm9ybWF0X2xhYmVsX2Zyb21feHkiLCJmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSIsIkRFRkFVTFRfRk9STUFUVEVSIiwiV2lkZ2V0VXRpbHMiLCJ3aWRnZXQiLCJ3aWRnZXROYW1lIiwiV2lkZ2V0IiwiZGF0YXNvdXJjZSIsInVwZGF0ZVRpbWUiLCJhZGRpdGlvbmFsUGFyYW1zIiwiX2ZldGNoZWREYXRhIiwiX3VwZGF0ZVRpbWUiLCJfZGF0YXNvdXJjZSIsIl9hZGRpdGlvbmFsUGFyYW1zIiwicmVnaXN0ZXJXaWRnZXQiLCJfZmV0Y2hEYXRhIiwiZGF0YXNvdXJjZVBhcmFtcyIsImRlc3Ryb3kiLCJ1Iiwib3JpZ2luIiwicmVxIiwiZml4U3ViTWVudVBvc2l0aW9uIiwiJHN1Ym1lbnUiLCIkaG92ZXJCdXR0b24iLCJkaXN0RnJvbUFib3ZlIiwidG9wIiwic3VibWVudUhlaWdodCIsImRvY3VtZW50SGVpZ2h0IiwiY3VycmVudFN1Ym1lbnVIZWlnaHQiLCJvdXRlckhlaWdodCIsInNjcm9sbFRvcCIsInRvZ2dsZVNpZGViYXIiLCIkbGF5ZXIiLCJtb3VzZWVudGVyIiwic3VibWVudSIsIm1vdXNlbGVhdmUiLCIkY3VycmVudFN1Ym1lbnUiLCJudG9wQ2hhcnRBcGV4IiwiX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMiLCJjaGFydCIsInRvb2xiYXIiLCJ0b29scyIsInpvb21vdXQiLCJ6b29taW4iLCJ6b29tIiwic2VsZWN0aW9uIiwicGFuIiwiZXZlbnRzIiwibGFiZWxzIiwiY29sb3JzIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY3NzQ2xhc3MiLCJyb3RhdGUiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImdyaWQiLCJsZWdlbmQiLCJfc2V0WFRpbWVGb3JtYXR0ZXIiLCJjaGFydE9wdGlvbnMiLCJmb3JtYXR0ZXIiLCJfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zIiwic3RhY2tlZCIsImRhdGV0aW1lVVRDIiwiYXhpc1RpY2tzIiwiYXhpc0JvcmRlciIsImNvbnZlcnRlZENhdFRvTnVtZXJpYyIsImRhdGFMYWJlbHMiLCJzdHJva2UiLCJjdXJ2ZSIsImZpbGwiLCJfZGVmYXVsdF9UU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyIsIl9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyIsIlRTX1NUQUNLRURfQ2hhcnRPcHRpb25zIiwib3B0cyIsIl9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyIsIkZvcm1hdHRlclV0aWxzIiwibm9EYXRhIiwiZm9udEZhbWlseSIsIl9kZWZhdWx0X1RTX1JBRElBTEJBUl9DaGFydE9wdGlvbnMiLCJwbG90T3B0aW9ucyIsInJhZGlhbEJhciIsImhvbGxvdyIsIm1hcmdpbiIsImJhY2tncm91bmQiLCJpbWFnZSIsImZsb2F0aW5nIiwidXNlU2VyaWVzQ29sb3JzIiwibWFya2VycyIsInNlcmllc05hbWUiLCJnbG9iYWxzIiwiaXRlbU1hcmdpbiIsInZlcnRpY2FsIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zIiwiX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMiLCJzaGFyZWQiLCJfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zIiwiVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyIsImF1dG9TY2FsZVlheGlzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwiZm9yY2VOaWNlU2NhbGUiLCJjdXN0b20iLCJ0eXBlQ2hhcnQiLCJUU19MSU5FIiwiVFNfU1RBQ0tFRCIsIlRTX0NPTFVNTiIsIlBJRSIsIkRPTlVUIiwiUkFESUFMQkFSIiwiUkFEQVIiLCJCVUJCTEUiLCJCQVNFIiwibmV3Q2hhcnQiLCJfY2hhcnQiLCJfY2hhcnRPcHRpb25zIiwiUE9MQVIiLCJzZXRZYXhpc0Zvcm1hdHRlciIsImNoYXJ0Rm9ybWF0dGVyIiwiZHJhd0NoYXJ0IiwiaHRtbEVsZW1lbnQiLCJBcGV4Q2hhcnRzIiwicmVuZGVyIiwidG9fZGF0YV91cmkiLCJkYXRhVVJJIiwiaW1nVVJJIiwiZGVzdHJveUNoYXJ0IiwidXBkYXRlQ2hhcnQiLCJ1cGRhdGVPcHRpb25zIiwidXBkYXRlU2VyaWVzIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50TmFtZSIsIkRhdGFUYWJsZUhhbmRsZXJzIiwiaGFuZGxlcnNJZERpY3QiLCJhZGRIYW5kbGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVySWQiLCJvbkNsaWNrIiwiZ2V0SGFuZGxlciIsInJvd0lkIiwiZGVsZXRlSGFuZGxlcnNCeUlkIiwiRGF0YVRhYmxlVXRpbHMiLCJkdEJ1dHRvbnMiLCJkb20iLCJwYWdpbmdUeXBlIiwibGVuZ3RoTWVudSIsImxhbmd1YWdlIiwic2NyaXB0X3NlYXJjaCIsInBhZ2luYXRlIiwicHJldmlvdXMiLCJuZXh0Iiwic2F2ZVN0YXRlIiwiYnV0dG9ucyIsImJ1dHRvbiIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImhhbmRsZXIiLCJhY3Rpb25zIiwib25jbGljayIsImNsYXNzIiwiZXh0ZXJuYWwiLCJpY29uIiwiZGF0YVNyYyIsImV4dGVuc2lvbiIsImhhc0ZpbHRlcnMiLCJzdGF0ZVNhdmVDYWxsYmFjayIsInNldHRpbmdzIiwic0luc3RhbmNlIiwic3RhdGVMb2FkQ2FsbGJhY2siLCJzdGF0ZVNhdmVQYXJhbXMiLCJhY3RpdmVGaWx0ZXIiLCJwYWRaZXJvZXMiLCJwYWRTdGFydCIsIm1pbnMiLCJ1cmxQYXJhbXMiLCJoYXMiLCJwYXJhbU5hbWUiLCJkYXRhSUQiLCJkYXRhdGFibGVJbnN0YW5jZSIsInRvQXJyYXkiLCJjYW5jZWxJZiIsIiRtb2RhbCIsInJlZmVyZXIiLCJ0YWJsZUFQSSIsInRvZ2dsZUNhbGxiYWNrIiwiY29sIiwidGFibGVJRCIsIm5vZGUiLCJfbG9hZENvbHVtbnNWaXNpYmlsaXR5IiwiZmV0Y2hlZERhdGEiLCJzYXZlZENvbHVtbnMiLCJpZ25vcmVkQ29sdW1ucyIsIiRkYXRhdGFibGVXcmFwcGVyIiwiblRhYmxlV3JhcHBlciIsImV2ZXJ5IiwiY29sdW1uIiwiaGVhZGVyIiwiJGJ0bkdyb3VwIiwiJGRyb3Bkb3duTWVudSIsIiRjaGVja2JveGVzIiwidG9nZ2xlZCIsImluZGV4T2YiLCIkY2hlY2tib3giLCIkd3JhcHBlciIsImhpZGRlbkNvbHVtbnMiLCJfX0NTUkZfREFUQVRBQkxFX18iLCJwcmVwZW5kIiwiRGF0YVRhYmxlUmVuZGVycyIsInNldmVyaXR5IiwiZm9ybWF0VmFsdWVMYWJlbCIsImFsZXJ0X2lkIiwiemVyb19pc19udWxsIiwic3BhbiIsImZpbnQiLCJ0YWdfbGFiZWwiLCJpc19zbm1wX2lwIiwiZGVzY3IiLCJzaG9ydGVuX2Rlc2NyIiwidG90YWxfYnl0ZXMiLCJ0b3RhbF9wYWNrZXRzIiwiYnl0ZXNUb1ZvbHVtZSIsImZpbHRlcml6ZSIsImh0bWxfcmVmIiwicmVmZXJlbmNlIiwiZmlsdGVyaXplXzIiLCJsYWJlbF9sb25nIiwiaG9zdEtleSIsImhvc3RWYWx1ZSIsInJvbGUiLCJyb2xlX2NsaV9zcnYiLCJmbG93IiwidmFsdWVWbGFuIiwibGFiZWxWbGFuIiwidGl0bGVWbGFuIiwidmxhbiIsImFjdGl2ZV9yZWYiLCJhY3RpdmVfdXJsIiwiY2xpTGFiZWwiLCJjbGlfaXAiLCJmaWx0ZXJpemVWbGFuIiwiY2xpRmxhZ0xhYmVsIiwiY2xpUG9ydExhYmVsIiwiY2xpX3BvcnQiLCJjbGlCbGFja2xpc3RlZCIsImJsYWNrbGlzdGVkIiwic3J2TGFiZWwiLCJzcnZfaXAiLCJzcnZQb3J0TGFiZWwiLCJzcnZfcG9ydCIsInNydkZsYWdMYWJlbCIsInNydkJsYWNrbGlzdGVkIiwiY2xpSWNvbnMiLCJzcnZJY29ucyIsImNsaV9yb2xlIiwic3J2X3JvbGUiLCJmdWxsbmFtZSIsImNlbGxEYXRhIiwicm93RGF0YSIsInJvd0luZGV4IiwiY29sSW5kZXgiLCJoaWdobGlnaHQiLCJjcmVhdGUiLCJkb19waWUiLCJEYXRhVGFibGVGaWx0ZXJzTWVudSIsImZpbHRlck1lbnVLZXkiLCJmaWx0ZXJUaXRsZSIsImNvbHVtbkluZGV4IiwiZXh0cmFBdHRyaWJ1dGVzIiwicmVtb3ZlQWxsRW50cnkiLCJjYWxsYmFja0Z1bmN0aW9uIiwicmF3RmlsdGVycyIsInByZXZlbnRVcGRhdGUiLCJjdXJyZW50RmlsdGVyU2VsZWN0ZWQiLCJzZWxlY3RlZEZpbHRlciIsImluaXQiLCJfcmVuZGVyIiwiX3VwZGF0ZSIsIl9jb3VudEVudHJpZXMiLCJyZWdleCIsInJlZyIsImNlbGxWYWx1ZSIsIl9jcmVhdGVNZW51RW50cnkiLCIkZW50cnkiLCJjdXJyZW50bHlfYWN0aXZlIiwiJGRyb3Bkb3duIiwibmV3Q29udGVudCIsImNvdW50YWJsZSIsIiRjb3VudGVyIiwibmV3VXJsUGFyYW1zIiwiZHJhdyIsIl9jcmVhdGVGaWx0ZXJzIiwiZmlsdGVyc0NyZWF0ZWQiLCIkZmlsdGVyIiwiJG5vZGUiLCJpbnNlcnRCZWZvcmUiLCIkZHJvcGRvd25Db250YWluZXIiLCIkZHJvcGRvd25CdXR0b24iLCIkZHJvcGRvd25UaXRsZSIsIiRtZW51Q29udGFpbmVyIiwiXyIsImFsbEZpbHRlciIsIl9nZW5lcmF0ZUFsbEZpbHRlciIsIl9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUiLCJmaWx0ZXJLZXkiLCJsb2FkZWQiLCJzYXZlIiwiYWxsIiwiQ2hhcnRXaWRnZXQiLCJzdXBlciIsIl9jaGFydFR5cGUiLCJfJGh0bWxDaGFydCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRXaWRnZXRCeU5hbWUiLCJ1cGRhdGVkT3B0aW9ucyIsIl9nZW5lcmF0ZUNvbmZpZyIsImVuYWJsZWRPblNlcmllcyIsInoiLCJ6YXhpcyIsIm9uSXRlbUNsaWNrIiwidG9nZ2xlRGF0YVNlcmllcyIsImJhciIsImJvcmRlclJhZGl1cyIsImhvcml6b250YWwiLCJhbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJhcGV4IiwiYXNzaWduIiwiX2J1aWxkVG9vbHRpcCIsImF4aXMiLCJfYnVpbGRBeGlzRm9ybWF0dGVyIiwiYXhpc05hbWUiLCJudG9wX3V0aWxzX2Zvcm1hdHRlciIsInNlbGVjdGVkRm9ybWF0dGVyIiwiX2J1aWxkRGF0YUxhYmVscyIsImRhdGFMYWJlbHNPcHRzIiwiX2J1aWxkQ29uZmlnIiwiYWRkaXRpb25hbHMiLCJhZGRpdGlvbmFsIiwiX2luaXRpYWxpemVDaGFydCIsIl9jaGFydENvbmZpZyIsInVwZGF0ZUJ5VXJsIiwiY2F0ZWdvcmllcyIsImRlc3Ryb3lBbmRVcGRhdGUiLCJibG9nTm90aWZjYXRpb25DbGljayIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwid2hpY2giLCJibG9nX25vdGlmaWNhdGlvbl9pZCIsIl9fQkxPR19OT1RJRklDQVRJT05fQ1NSRl9fIiwiRSIsIlAiLCJsIiwiTSIsImMiLCJmIiwiUiIsIkEiLCJJIiwiRiIsImciLCJfX3ZfaXNSZWYiLCJyZWR1Y2UiLCJPIiwiTCIsInYiLCJDIiwic3RhcnRzV2l0aCIsInNwbGljZSIsIlQiLCJOIiwiQiIsIlYiLCJqIiwiVSIsIkQiLCJIIiwiVyIsIksiLCJHIiwicSIsIkoiLCJZIiwiWiIsIlEiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJYIiwiZWUiLCJ0ZSIsIm5lIiwiYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwic2NvcGVzIiwicnVuIiwic3RvcCIsInBvcCIsIm9lIiwicmUiLCJzZSIsImllIiwibGUiLCJTZXQiLCJjZSIsImZlIiwiYWUiLCJ1ZSIsIldlYWtNYXAiLCJkZSIsInBlIiwiaGUiLCJTeW1ib2wiLCJtZSIsImdlIiwic2NoZWR1bGVyIiwiZGVwcyIsImJlIiwidmUiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJ5ZSIsImVmZmVjdCIsInNjb3BlIiwibGF6eSIsIl9lIiwiU2UiLCJ4ZSIsIkNlIiwid2UiLCJNYXAiLCJrZSIsImFkZCIsIlRlIiwiTmUiLCJjb21wdXRlZCIsIkVlIiwiYWxsb3dSZWN1cnNlIiwiJGUiLCJPZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJSZSIsIkllIiwiRmUiLCJQZSIsIkFlIiwiTWUiLCJrdCIsImFwcGx5IiwiVmUiLCJodCIsImZ0IiwicHQiLCJSZWZsZWN0IiwiUnQiLCJ5dCIsImd0IiwiQmUiLCJ4dCIsIkN0IiwiTGUiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJqZSIsIlVlIiwiRGUiLCJIZSIsIldlIiwiZ2V0UHJvdG90eXBlT2YiLCJ6ZSIsIl9fdl9yYXciLCJFdCIsIk50IiwiS2UiLCJHZSIsInFlIiwiSmUiLCJZZSIsIlplIiwiY2xlYXIiLCJRZSIsIlhlIiwiaXRlcmF0b3IiLCJldCIsIm50Iiwib3QiLCJydCIsInN0IiwidHQiLCJpdCIsImx0IiwiY3QiLCJhdCIsInV0IiwiYnQiLCJ2dCIsIl90IiwiX192X2lzUmVhY3RpdmUiLCJfX3Zfc2tpcCIsImlzRXh0ZW5zaWJsZSIsIm10IiwiUHJveHkiLCJTdCIsIl9fdl9pc1JlYWRvbmx5IiwiX192X2lzU2hhbGxvdyIsInd0IiwiVHQiLCIkdCIsImRlcCIsIk90IiwiRnQiLCJBdCIsIlB0IiwiTXQiLCJfcmF3VmFsdWUiLCJfdmFsdWUiLCJWdCIsIkl0IiwiQnQiLCJMdCIsImp0IiwiX2dldCIsIl9zZXQiLCJVdCIsIkR0IiwiV3QiLCJIdCIsIl9vYmplY3QiLCJfa2V5IiwiX2RlZmF1bHRWYWx1ZSIsInp0IiwiX3NldHRlciIsIl9kaXJ0eSIsIl9jYWNoZWFibGUiLCJLdCIsIkd0IiwiY29tcG9uZW50IiwiYXBwQ29udGV4dCIsIndhcm5IYW5kbGVyIiwidm5vZGUiLCJyZWN1cnNlQ291bnQiLCJZdCIsInByb3h5IiwiTHMiLCJwcm9wcyIsInF0IiwiSnQiLCJRdCIsIlp0IiwiZWMiLCJlcnJvckhhbmRsZXIiLCJYdCIsImVuIiwidG4iLCJubiIsInJuIiwic24iLCJsbiIsImNuIiwiYW4iLCJ1biIsInBuIiwiZG4iLCJobiIsImJuIiwibW4iLCJTbiIsImduIiwidm4iLCJ5biIsIl9uIiwieG4iLCJDbiIsInduIiwiSFRNTEVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwia24iLCJpc1VubW91bnRlZCIsImVtaXR0ZWQiLCJUbiIsImVtaXRzQ2FjaGUiLCJlbWl0cyIsIm1peGlucyIsImV4dGVuZHMiLCJObiIsIkVuIiwiJG4iLCJPbiIsIl9fc2NvcGVJZCIsIlJuIiwiRm4iLCJQbiIsIkFuIiwiX2QiLCJYciIsIl9jIiwiTW4iLCJ3aXRoUHJveHkiLCJwcm9wc09wdGlvbnMiLCJzbG90cyIsImF0dHJzIiwicmVuZGVyQ2FjaGUiLCJzZXR1cFN0YXRlIiwiY3R4IiwiaW5oZXJpdEF0dHJzIiwic2hhcGVGbGFnIiwiZ3MiLCJWbiIsInFyIiwidXMiLCJLciIsIkluIiwiZnMiLCJkaXJzIiwiY29uY2F0IiwiQm4iLCJMbiIsInN1YlRyZWUiLCJqbiIsIl9faXNTdXNwZW5zZSIsIlVuIiwicHJvY2VzcyIsInN1c3BlbnNlIiwiSG4iLCJwZW5kaW5nQnJhbmNoIiwic3NDb250ZW50IiwiRG4iLCJzc0ZhbGxiYWNrIiwiS24iLCJhY3RpdmVCcmFuY2giLCJpc0luRmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsInJzIiwiaGlkZGVuQ29udGFpbmVyIiwicGVuZGluZ0lkIiwidGltZW91dCIsImZhbGxiYWNrIiwiaHlkcmF0ZSIsInBhcmVudE5vZGUiLCJub3JtYWxpemUiLCJjaGlsZHJlbiIsIlduIiwiZGVmYXVsdCIsInBhcmVudENvbXBvbmVudCIsImlzU1ZHIiwiYW5jaG9yIiwibW9kZSIsImFmdGVyTGVhdmUiLCJtb3ZlIiwicmVnaXN0ZXJEZXAiLCJhc3luY0RlcCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiUnMiLCJ1bm1vdW50IiwiUXIiLCJZciIsIkpyIiwiWnIiLCJvcyIsImR5bmFtaWNDaGlsZHJlbiIsInpuIiwiR24iLCJDcyIsInByb3ZpZGVzIiwicW4iLCJhcmd1bWVudHMiLCJKbiIsImVvIiwiWW4iLCJmbHVzaCIsIlpuIiwiUW4iLCJYbiIsImltbWVkaWF0ZSIsImRlZXAiLCJvbyIsIlByIiwidG8iLCJubyIsImtzIiwiVHMiLCJybyIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJPbyIsIlBvIiwic28iLCJGdW5jdGlvbiIsImlvIiwiYXBwZWFyIiwiQm9vbGVhbiIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJzZXR1cCIsIndzIiwiZm8iLCJhbyIsInVvIiwiY28iLCJwbyIsImdldFRyYW5zaXRpb25LZXkiLCJkZWxheUxlYXZlIiwibG8iLCJfbGVhdmVDYiIsImRlbGF5ZWRMZWF2ZSIsImJlZm9yZUVudGVyIiwiX2VudGVyQ2IiLCJsZWF2ZSIsInlvIiwiV3IiLCJwYXRjaEZsYWciLCJobyIsIm1vIiwiX19hc3luY0xvYWRlciIsImdvIiwibG9hZGVyIiwibG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiX19hc3luY1Jlc29sdmVkIiwidm8iLCJyZWYiLCJfX2lzS2VlcEFsaXZlIiwiX28iLCJpbmNsdWRlIiwiZXhjbHVkZSIsInJlbmRlcmVyIiwia28iLCJCcyIsImFjdGl2YXRlIiwic2xvdFNjb3BlSWRzIiwiaXNEZWFjdGl2YXRlZCIsIm9uVm5vZGVNb3VudGVkIiwiYnMiLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwiYm8iLCJUbyIsIkZvIiwiU28iLCJDbyIsInhvIiwiX193ZGMiLCJObyIsIndvIiwiQW8iLCJfX3dlaCIsInVuc2hpZnQiLCJFbyIsIk9zIiwiJG8iLCJSbyIsIk1vIiwiVm8iLCJJbyIsIkJvIiwiTG8iLCJWcyIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiZGlyIiwiaW5zdGFuY2UiLCJvbGRWYWx1ZSIsImFyZyIsIm1vZGlmaWVycyIsImpvIiwiVW8iLCJ6byIsIkRvIiwiSG8iLCJXbyIsIktvIiwiR28iLCJmcm9tIiwicW8iLCJKbyIsImlzQ0UiLCJZbyIsIm5zIiwic2NvcGVJZCIsIlpvIiwiUW8iLCJOcyIsIlhvIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsInJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCJyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsImVyIiwiYWNjZXNzQ2FjaGUiLCJuciIsIl9fY3NzTW9kdWxlcyIsImdsb2JhbFByb3BlcnRpZXMiLCJ0ciIsInVuc2NvcGFibGVzIiwicnIiLCJzciIsIm9wdGlvbnNDYWNoZSIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImxyIiwiY3IiLCJhciIsImZyIiwibWV0aG9kcyIsImJlZm9yZUNyZWF0ZSIsInByIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYmVmb3JlRGVzdHJveSIsImJlZm9yZVVubW91bnQiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCIsImNvbXBvbmVudHMiLCJkaXJlY3RpdmVzIiwid2F0Y2giLCJwcm92aWRlIiwiaW5qZWN0IiwidXIiLCJlbWl0c09wdGlvbnMiLCJociIsInByb3BzRGVmYXVsdHMiLCJtciIsInByb3BzQ2FjaGUiLCJnciIsIl9yIiwidnIiLCJ5ciIsImJyIiwiU3IiLCJ4ciIsIkNyIiwiX2N0eCIsIndyIiwia3IiLCJhcHAiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiY29tcGlsZXJPcHRpb25zIiwiVHIiLCJOciIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwidmVyc2lvbiIsIm9pIiwidXNlIiwiaW5zdGFsbCIsIm1peGluIiwiZGlyZWN0aXZlIiwibW91bnQiLCJfX3Z1ZV9hcHBfXyIsIkVyIiwiJHIiLCJPciIsIm5hbWVzcGFjZVVSSSIsInRhZ05hbWUiLCJSciIsIm5vZGVUeXBlIiwiRnIiLCJwYXRjaFByb3AiLCJjcmVhdGVUZXh0IiwibmV4dFNpYmxpbmciLCJpbnNlcnQiLCJjcmVhdGVDb21tZW50IiwienIiLCJHciIsInN0YXRpY0NvdW50Iiwib3V0ZXJIVE1MIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiZHMiLCJlbmRzV2l0aCIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImZpcnN0Q2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwiX3Zub2RlIiwiQXIiLCJWciIsIk1yIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsIl9fVlVFX18iLCJzZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJzZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsInZzIiwiSXIiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiZHluYW1pY1Byb3BzIiwib25Wbm9kZVVwZGF0ZWQiLCJCciIsIlNzIiwidWlkIiwieHMiLCJleHBvc2VkIiwiZXhwb3NlUHJveHkiLCJzZXR1cENvbnRleHQiLCJiYyIsImJtIiwiYnUiLCJidW0iLCJydGciLCJydGMiLCJzcCIsIk1zIiwiQXMiLCIkc3RhYmxlIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJtYyIsInBjIiwicGJjIiwiY3JlYXRlQXBwIiwiTHIiLCJqciIsIlNWR0VsZW1lbnQiLCJVciIsIkRyIiwidGFyZ2V0QW5jaG9yIiwiSHIiLCJfX2lzVGVsZXBvcnQiLCJfbHBhIiwiZXMiLCJhcyIsIl9fdl9pc1ZOb2RlIiwic3MiLCJscyIsImNzIiwicmVmX2tleSIsInJlZl9mb3IiLCJ5cyIsIl9fdmNjT3B0cyIsInBzIiwiX3MiLCJocyIsIm1lbW8iLCJFcyIsIiRzIiwiRnMiLCJfcmMiLCJQcyIsInRlbXBsYXRlIiwiaXNDdXN0b21FbGVtZW50IiwiZGVsaW1pdGVycyIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJleHBvc2UiLCJ1bndyYXBJbmplY3RlZFJlZiIsImpzIiwib3IiLCJJcyIsImRpc3BsYXlOYW1lIiwiX19uYW1lIiwiX19maWxlIiwiVXMiLCJEcyIsIkhzIiwiV3MiLCJ6cyIsIkdzIiwiS3MiLCJxcyIsIkpzIiwiWXMiLCJacyIsIlFzIiwiWHMiLCJlaSIsInRpIiwibmkiLCJsaSIsImNpIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwidWkiLCJwaSIsInNldFByb3BlcnR5IiwiZGkiLCJmaSIsImhpIiwibWkiLCJnaSIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwidmkiLCJ5aSIsIl9pIiwiYmkiLCJhZGRFdmVudExpc3RlbmVyIiwieGkiLCJDaSIsIndpIiwiTmkiLCJkZWYiLCJraSIsIlRsIiwiVGkiLCJfZGVmIiwiX2Nvbm5lY3RlZCIsIl9yZXNvbHZlZCIsIl9udW1iZXJQcm9wcyIsInNoYWRvd1Jvb3QiLCJfY3JlYXRlVk5vZGUiLCJhdHRhY2hTaGFkb3ciLCJjb25uZWN0ZWRDYWxsYmFjayIsIl9yZXNvbHZlRGVmIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJrbCIsImF0dHJpYnV0ZXMiLCJfc2V0QXR0ciIsImF0dHJpYnV0ZU5hbWUiLCJzdHlsZXMiLCJfc2V0UHJvcCIsIl9nZXRQcm9wIiwiX2FwcGx5U3R5bGVzIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiRWkiLCIkaSIsIk9pIiwiZGlzY29ubmVjdCIsIlJpIiwiRmkiLCJJaSIsIlBpIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiQWkiLCJNaSIsIlZpIiwiQmkiLCJqaSIsIl9pc0xlYXZpbmciLCJVaSIsIkxpIiwiSGkiLCJHaSIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJEaSIsIl9lbmRJZCIsInByb3BDb3VudCIsIldpIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJ6aSIsImhhc1RyYW5zZm9ybSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIktpIiwib2Zmc2V0SGVpZ2h0IiwicWkiLCJKaSIsIllpIiwidGFnIiwibW92ZUNsYXNzIiwiZGlzcGxheSIsIlppIiwiUWkiLCJYaSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0bCIsImNvbXBvc2luZyIsIm5sIiwiRXZlbnQiLCJvbCIsIl9hc3NpZ24iLCJhY3RpdmVFbGVtZW50IiwicmwiLCJfbW9kZWxWYWx1ZSIsImFsIiwiY2hlY2tlZCIsInVsIiwic2wiLCJpbCIsImxsIiwic2VsZWN0ZWQiLCJjbCIsInNlbGVjdGVkSW5kZXgiLCJwbCIsImZsIiwiZGwiLCJobCIsInByZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiY3RybCIsInNoaWZ0Iiwic2hpZnRLZXkiLCJhbHQiLCJhbHRLZXkiLCJtaWRkbGUiLCJyaWdodCIsImV4YWN0IiwibWwiLCJnbCIsImVzYyIsInNwYWNlIiwidXAiLCJkb3duIiwidmwiLCJ5bCIsIl92b2QiLCJfbCIsImJsIiwiY3NzVGV4dCIsIl92ZWkiLCJhdHRhY2hlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIl9zdG9wcGVkIiwiU2kiLCJfdHJ1ZVZhbHVlIiwiX2ZhbHNlVmFsdWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiU2wiLCJ4bCIsIkNsIiwid2wiLCJObCIsIiRsIiwiRWxlbWVudCIsIkVsIiwiT2wiLCJSbCIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsImNyZWF0ZVNTUkFwcCIsImluaXREaXJlY3RpdmVzRm9yU1NSIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsImRlZmluZVNTUkN1c3RvbUVsZW1lbnQiLCJWdWVFbGVtZW50IiwidXNlQ3NzTW9kdWxlIiwidXNlQ3NzVmFycyIsIlRyYW5zaXRpb24iLCJUcmFuc2l0aW9uR3JvdXAiLCJ2TW9kZWxUZXh0Iiwidk1vZGVsQ2hlY2tib3giLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsInZNb2RlbER5bmFtaWMiLCJ3aXRoTW9kaWZpZXJzIiwid2l0aEtleXMiLCJ2U2hvdyIsInJlYWN0aXZlIiwicmVhZG9ubHkiLCJ1bnJlZiIsInByb3h5UmVmcyIsImlzUmVmIiwidG9SZWYiLCJ0b1JlZnMiLCJpc1Byb3h5IiwiaXNSZWFjdGl2ZSIsImlzUmVhZG9ubHkiLCJpc1NoYWxsb3ciLCJjdXN0b21SZWYiLCJ0cmlnZ2VyUmVmIiwic2hhbGxvd1JlZiIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsIm1hcmtSYXciLCJ0b1JhdyIsIlJlYWN0aXZlRWZmZWN0IiwiZWZmZWN0U2NvcGUiLCJFZmZlY3RTY29wZSIsImdldEN1cnJlbnRTY29wZSIsIm9uU2NvcGVEaXNwb3NlIiwid2F0Y2hFZmZlY3QiLCJ3YXRjaFBvc3RFZmZlY3QiLCJ3YXRjaFN5bmNFZmZlY3QiLCJvbkJlZm9yZU1vdW50Iiwib25Nb3VudGVkIiwib25CZWZvcmVVcGRhdGUiLCJvblVwZGF0ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJvblVubW91bnRlZCIsIm9uQWN0aXZhdGVkIiwib25EZWFjdGl2YXRlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uUmVuZGVyVHJpZ2dlcmVkIiwib25FcnJvckNhcHR1cmVkIiwib25TZXJ2ZXJQcmVmZXRjaCIsIm5leHRUaWNrIiwiZGVmaW5lQ29tcG9uZW50IiwiZGVmaW5lQXN5bmNDb21wb25lbnQiLCJ1c2VBdHRycyIsInVzZVNsb3RzIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsIndpdGhEZWZhdWx0cyIsIm1lcmdlRGVmYXVsdHMiLCJjcmVhdGVQcm9wc1Jlc3RQcm94eSIsIndpdGhBc3luY0NvbnRleHQiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVWTm9kZSIsImNsb25lVk5vZGUiLCJtZXJnZVByb3BzIiwiaXNWTm9kZSIsIkZyYWdtZW50IiwiVGV4dCIsIkNvbW1lbnQiLCJTdGF0aWMiLCJUZWxlcG9ydCIsIlN1c3BlbnNlIiwiS2VlcEFsaXZlIiwiQmFzZVRyYW5zaXRpb24iLCJ3aXRoRGlyZWN0aXZlcyIsInVzZVNTUkNvbnRleHQiLCJzc3JDb250ZXh0S2V5IiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsInF1ZXVlUG9zdEZsdXNoQ2IiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwicmVzb2x2ZUNvbXBvbmVudCIsInJlc29sdmVEaXJlY3RpdmUiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiaXNSdW50aW1lT25seSIsInVzZVRyYW5zaXRpb25TdGF0ZSIsInJlc29sdmVUcmFuc2l0aW9uSG9va3MiLCJzZXRUcmFuc2l0aW9uSG9va3MiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJpbml0Q3VzdG9tRm9ybWF0dGVyIiwiZGV2dG9vbHMiLCJzZXREZXZ0b29sc0hvb2siLCJ3aXRoQ3R4IiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJyZW5kZXJMaXN0IiwidG9IYW5kbGVycyIsInJlbmRlclNsb3QiLCJjcmVhdGVTbG90cyIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwic2V0QmxvY2tUcmFja2luZyIsImNyZWF0ZVRleHRWTm9kZSIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImNyZWF0ZVN0YXRpY1ZOb2RlIiwiY3JlYXRlRWxlbWVudFZOb2RlIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwidG9EaXNwbGF5U3RyaW5nIiwiY2FtZWxpemUiLCJjYXBpdGFsaXplIiwidG9IYW5kbGVyS2V5Iiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVDbGFzcyIsIm5vcm1hbGl6ZVN0eWxlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwic3NyVXRpbHMiLCJyZXNvbHZlRmlsdGVyIiwiY29tcGF0VXRpbHMiLCJGbCIsIlBsIiwiQWwiLCJTeW50YXhFcnJvciIsImNvZGUiLCJsb2MiLCJNbCIsIlZsIiwiSWwiLCJCbCIsIkxsIiwiamwiLCJVbCIsIkRsIiwiSGwiLCJXbCIsInpsIiwiS2wiLCJHbCIsInFsIiwiSmwiLCJZbCIsIlpsIiwiUWwiLCJYbCIsInRjIiwibmMiLCJvYyIsInNjIiwiaWMiLCJsYyIsImNjIiwiYWMiLCJ1YyIsImZjIiwiZGMiLCJoYyIsImdjIiwidmMiLCJ5YyIsIlNjIiwibGluZSIsIm9mZnNldCIsImVuZCIsInhjIiwiaGVscGVyIiwiWmMiLCJpblNTUiIsIlljIiwiaXNCbG9jayIsImRpc2FibGVUcmFja2luZyIsImlzQ29tcG9uZW50IiwiQ2MiLCJlbGVtZW50cyIsIndjIiwicHJvcGVydGllcyIsImtjIiwiVGMiLCJpc1N0YXRpYyIsImNvbnN0VHlwZSIsIk5jIiwiRWMiLCJjYWxsZWUiLCIkYyIsInJldHVybnMiLCJuZXdsaW5lIiwiaXNTbG90IiwiT2MiLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIiwiUmMiLCJGYyIsIlBjIiwiQWMiLCJNYyIsIlZjIiwiSWMiLCJCYyIsIkxjIiwiamMiLCJVYyIsIkRjIiwiSGMiLCJleHAiLCJXYyIsInpjIiwiS2MiLCJHYyIsInFjIiwidGFnVHlwZSIsIkpjIiwiUWMiLCJYYyIsImVhIiwidGEiLCJuYSIsInJlbW92ZUhlbHBlciIsIm9hIiwicmEiLCJhbXAiLCJhcG9zIiwicXVvdCIsInNhIiwiZ2V0TmFtZXNwYWNlIiwiZ2V0VGV4dE1vZGUiLCJpc1ZvaWRUYWciLCJpc1ByZVRhZyIsImRlY29kZUVudGl0aWVzIiwib25XYXJuIiwiY29tbWVudHMiLCJsYSIsIk5hIiwiaW5WUHJlIiwiQ2EiLCJ2YSIsInVhIiwicGEiLCJhYSIsIndhIiwiaGEiLCJmYSIsInlhIiwiY2EiLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJiYSIsImV4ZWMiLCJTYSIsImlzU2VsZkNsb3NpbmciLCJFYSIsImthIiwibWEiLCJpc0J1aWx0SW5Db21wb25lbnQiLCJjb2RlZ2VuTm9kZSIsImdhIiwiX2EiLCJpc1F1b3RlZCIsIlRhIiwib3JpZ2luYWxTb3VyY2UiLCIkYSIsIlJhIiwiT2EiLCJGYSIsImhvaXN0IiwiSWEiLCJNYSIsIlZhIiwidlNsb3QiLCJicmFuY2hlcyIsInRyYW5zZm9ybUhvaXN0IiwiY29uc3RhbnRDYWNoZSIsIlBhIiwiQWEiLCJMYSIsImZpbGVuYW1lIiwicHJlZml4SWRlbnRpZmllcnMiLCJob2lzdFN0YXRpYyIsImNhY2hlSGFuZGxlcnMiLCJub2RlVHJhbnNmb3JtcyIsImRpcmVjdGl2ZVRyYW5zZm9ybXMiLCJleHByZXNzaW9uUGx1Z2lucyIsInNsb3R0ZWQiLCJzc3IiLCJzc3JDc3NWYXJzIiwiYmluZGluZ01ldGFkYXRhIiwiaW5saW5lIiwiaXNUUyIsImNvbXBhdENvbmZpZyIsInNlbGZOYW1lIiwiaGVscGVycyIsImhvaXN0cyIsImltcG9ydHMiLCJ0ZW1wcyIsImNhY2hlZCIsImlkZW50aWZpZXJzIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImN1cnJlbnROb2RlIiwiY2hpbGRJbmRleCIsImluVk9uY2UiLCJoZWxwZXJTdHJpbmciLCJyZXBsYWNlTm9kZSIsInJlbW92ZU5vZGUiLCJvbk5vZGVSZW1vdmVkIiwiYWRkSWRlbnRpZmllcnMiLCJyZW1vdmVJZGVudGlmaWVycyIsImhvaXN0ZWQiLCJCYSIsImphIiwiVWEiLCJEYSIsIldhIiwiemEiLCJpbmRlbnQiLCJLYSIsImRlaW5kZW50IiwiR2EiLCJxYSIsInB1cmUiLCJKYSIsIllhIiwiaW5kZW50TGV2ZWwiLCJaYSIsIlFhIiwiWGEiLCJjb25kaXRpb24iLCJ1c2VyS2V5IiwiaXNUZW1wbGF0ZUlmIiwiZXUiLCJ0dSIsInN1IiwidmFsdWVBbGlhcyIsImtleUFsaWFzIiwib2JqZWN0SW5kZXhBbGlhcyIsInBhcnNlUmVzdWx0IiwibHUiLCJudSIsIm91IiwicnUiLCJpdSIsInJlcGVhdCIsImN1IiwiYXUiLCJ1dSIsInB1IiwiZnUiLCJodSIsImR1IiwiaGFzRHluYW1pY1Nsb3RzIiwibXUiLCJndSIsInZ1IiwiZHluYW1pY1Byb3BOYW1lcyIsInNob3VsZFVzZUJsb2NrIiwieXUiLCJuZWVkUnVudGltZSIsImlzSGFuZGxlcktleSIsIl91IiwiU3UiLCJzbG90TmFtZSIsInNsb3RQcm9wcyIsInh1IiwiQ3UiLCJ3dSIsImt1IiwiVHUiLCJOdSIsIldlYWtTZXQiLCJFdSIsIiR1IiwiT3UiLCJSdSIsIkZ1IiwiUHUiLCJpYSIsIm1vZGVsIiwic291cmNlTWFwIiwib3B0aW1pemVJbXBvcnRzIiwicnVudGltZUdsb2JhbE5hbWUiLCJydW50aW1lTW9kdWxlTmFtZSIsInNzclJ1bnRpbWVNb2R1bGVOYW1lIiwib25Db250ZXh0Q3JlYXRlZCIsImFzdCIsInByZWFtYmxlIiwidG9KU09OIiwiSGEiLCJBdSIsIk11IiwiVnUiLCJJdSIsIkJ1IiwiTHUiLCJqdSIsIlV1IiwiRHUiLCJIdSIsIld1IiwienUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJLdSIsIkd1IiwicXUiLCJKdSIsIll1IiwiWnUiLCJRdSIsIlh1IiwiZXAiLCJ0cCIsIm5wIiwiY2xvYWsiLCJrZXlNb2RpZmllcnMiLCJub25LZXlNb2RpZmllcnMiLCJldmVudE9wdGlvbk1vZGlmaWVycyIsIm9wIiwicnAiLCJzY3JpcHQkMUMiLCJvbGRWYWwiLCJtZW51X29wdGlvbnMiLCJkcm9wZG93biIsImRyb3Bkb3duX2J1dHRvbiIsImRlZmF1bHRfb3ZlcmZsb3ciLCJhdXRvX2xvYWQiLCJsb2FkX21lbnUiLCJmX29uX29wZW4iLCJmX29uX2Nsb3NlIiwiYnV0dG9uX2NsYXNzXzIiLCJidXR0b25fY2xhc3MiLCJtZW51IiwibV9vcHRpb25zIiwib3B0X3Nsb3QiLCJfaTE4biIsImdldF9mX3ByaW50X3Z1ZV9ub2RlX3JvdyIsInRhYmxlX2RlZiIsImF2YWlsYWJsZV90eXBlcyIsImJ1dHRvbl9saXN0IiwiZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnMiLCJidXR0b25fYXJyYXkiLCJ2dWVfb2JqIiwicmV0dXJuX3RydWVfaWZfZGVmIiwicmVuZGVyX3Zfbm9kZV90eXBlIiwicmVuZGVyX3ZfZnVuYyIsInByaW50X3Zfbm9kZV9idXR0b25zIiwiZ2V0X2ZfcHJpbnRfaHRtbF9yb3ciLCJkYXRhX2ZpZWxkIiwicmVuZGVyX2dlbmVyaWMiLCJnZXRGb3JtYXRHZW5lcmljRmllbGQiLCJyZW5kZXJfZnVuYyIsInJlbmRlcl90eXBlIiwibGlzdF9vcl9hcnJheSIsIm9uX2NsaWNrIiwiZXZlbnRfaWQiLCJ2X25vZGVzIiwiYnV0dG9uX2RlZl9hcnJheSIsImJfZGVmIiwiY2xhc3NfYXJyYXkiLCJmX21hcF9jbGFzcyIsIl9jbGFzcyIsInRpdGxlX2kxOG4iLCJ2X3RpdGxlIiwiRHJvcGRvd24iLCJidXR0b25fc3R5bGUiLCJnZXRfcm93c19mdW5jIiwiZl9nZXRfZXh0cmFfcGFyYW1zX29iaiIsImZfb25fZ2V0X3Jvd3MiLCJmX2dldF9jb2x1bW5faWQiLCJnZXRfY29sdW1uX2lkX2Z1bmMiLCJhY3RpdmVfcGFnZSIsInBlcl9wYWdlIiwiY29sdW1uc193cmFwIiwibWFwX3NlYXJjaCIsImZpcnN0X2dldF9yb3dzIiwic29ydF9jb2x1bW4iLCJ2aXNpYmxlX2NvbHVtbnMiLCJvcmRlciIsImV4dHJhX3BhcmFtcyIsImRhdGFfdXJsIiwicnNwX3JlY29yZHNfZmllbGQiLCJxdWVyeV9pbmZvIiwicnNwX3F1ZXJ5X2luZm9fZmllbGQiLCJyZWNvcmRzRmlsdGVyZWQiLCJyZWNvcmRzVG90YWwiLCJ0b3RhbF9yb3dzIiwiZ2V0X2ZfcHJpbnRfY29sdW1uX25hbWUiLCJ0YWJsZV91dGlscyIsImdldF9jb2x1bW5zX2Zyb21fZGF0YXRhYmxlX2NvbHVtbnMiLCJkYXRhdGFibGVfY29sdW1uc190aXRsZSIsImRhdGF0YWJsZV9jb2x1bW5zX2pzIiwidGFibGVfY29sdW1uc19jb25maWciLCJvcmRlcmFibGUiLCJidWlsZF90YWJsZSIsInRhYmxlX2lkIiwiZl9tYXBfY29sdW1ucyIsInRhYmxlX2RlZl91cmwiLCJnZXRfcm93cyIsImdldF9jb2x1bW5faWQiLCJwcmludF9jb2x1bW5fbmFtZSIsInByaW50X2h0bWxfcm93IiwicHJpbnRfdnVlX25vZGVfcm93IiwiZl9pc19jb2x1bW5fc29ydGFibGUiLCJzb3J0YWJsZSIsImZfZ2V0X2NvbHVtbl9jbGFzc2VzIiwiY2xhc3NlcyIsImZfZ2V0X2NvbHVtbl9zdHlsZSIsImRpc3BsYXlfZW1wdHlfcm93cyIsImVuYWJsZV9zZWFyY2giLCJkZWZhdWx0X3NvcnQiLCJzaG93X2F1dG9yZWZyZXNoIiwicGFnaW5nIiwiZmlsdGVyc19jb25zdF9kaWN0IiwiZ2V0X2ZpbHRlcl9jb25zdCIsInVybF9yZXF1ZXN0IiwibG9hZF9maWx0ZXJzX2RhdGEiLCJmaWx0ZXJzX2NvbnN0IiwibG9jYWxlQ29tcGFyZSIsInRhZ3MiLCJUQUdfT1BFUkFUT1JTIiwiREVGSU5FRF9UQUdTIiwiZl9kZWYiLCJvcGVyYXRvcnMiLCJmaWx0ZXJfZGVmIiwiRklMVEVSU19DT05TVCIsIm9wdF9zdGlybmciLCJvcHQiLCJ2YWx1ZV9sYWJlbCIsInZhbHVlX3R5cGUiLCJnZXRfZmlsdGVyc19vYmplY3QiLCJmaWx0ZXJzX2dyb3VwcyIsImdyb3VwIiwiZmlsdGVyc19vYmplY3QiLCJmX2lkIiwiZmlsdGVyX3ZhbHVlcyIsImZpbHRlcnNNYW5hZ2VyIiwidGFnX29wZXJhdG9yX2xhYmVsX2RpY3QiLCJlcSIsIm5lcSIsImd0ZSIsImx0ZSIsImluIiwibmluIiwic2VsZWN0MiIsIm9wdGlvbnNfMiIsImdyb3Vwc19vcHRpb25zXzIiLCJzZWxlY3RlZF9vcHRpb25fMiIsInNlbGVjdGVkX3ZhbHVlcyIsInJlZnJlc2hfb3B0aW9ucyIsImZpcnN0X3RpbWVfcmVuZGVyIiwic2V0X2lucHV0IiwiZ3JvdXBzX2RpY3QiLCJvcHRpb24iLCJvcHRfMiIsInNldF9vcHRpb25zIiwic2V0X3NlbGVjdGVkX29wdGlvbiIsImRpc2FibGVfY2hhbmdlIiwic2VsZWN0ZWRfb3B0aW9uIiwiY3VyX3ZhbHVlIiwiY2hhbmdlX3NlbGVjdF8yX3NlbGVjdGVkX3ZhbHVlIiwiY3VycmVudF92YWx1ZSIsInNlbGVjdDJEaXYiLCJ0aGVtZSIsImRyb3Bkb3duUGFyZW50IiwiZHJvcGRvd25BdXRvV2lkdGgiLCJhZGRfdGFnIiwiZmluZF9vcHRpb25fZnJvbV92YWx1ZSIsImZpbmRfb3B0aW9uc19mcm9tX3ZhbHVlcyIsImdldF92YWx1ZV9mcm9tX3NlbGVjdGVkX29wdGlvbiIsImlzX3NlbGVjdGVkIiwiaXNfemVyb192YWx1ZSIsImdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24iLCJvcHRpb25fMiIsImZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSIsInNjcmlwdCQxeiIsIm1haW5fdGl0bGUiLCJzZWNvbmRhcnlfdGl0bGVfbGlzdCIsImhlbHBfbGluayIsIml0ZW1zX3RhYmxlIiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzciLCJfY3JlYXRlRWxlbWVudFZOb2RlIiwiX2hvaXN0ZWRfMTAiLCJmbG9hdCIsIl9ob2lzdGVkXzE3IiwiX29wZW5CbG9jayIsIl9jcmVhdGVFbGVtZW50QmxvY2siLCJfaG9pc3RlZF8yIiwiX25vcm1hbGl6ZUNsYXNzIiwiX3RvRGlzcGxheVN0cmluZyIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwiX0ZyYWdtZW50IiwiX3JlbmRlckxpc3QiLCJfaG9pc3RlZF82IiwiX2hvaXN0ZWRfOCIsIl9ob2lzdGVkXzkiLCIkZXZlbnQiLCJiYWRnZV9udW0iLCJfaG9pc3RlZF8xMiIsIl9ob2lzdGVkXzE0IiwiX2hvaXN0ZWRfMTYiLCJfaG9pc3RlZF8xOCIsInNjcmlwdCQxeSIsIm5vX2Nsb3NlX2J1dHRvbiIsInNob3dfYWxlcnQiLCJhbGVydF90eXBlIiwiaW5mbyIsImNsb3NlIiwidGV4dF9odG1sIiwic2NyaXB0JDF4IiwiY2hhcnRfdHlwZSIsInJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2UiLCJub3RfZW1pdF9nbG9iYWxfc3RhdHVzX3VwZGF0ZSIsImJhc2VfdXJsX3JlcXVlc3QiLCJnZXRfcGFyYW1zX3VybF9yZXF1ZXN0IiwiZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zIiwibWFwX2NoYXJ0X29wdGlvbnMiLCJtaW5fdGltZV9pbnRlcnZhbF9pZCIsInJvdW5kX3RpbWUiLCJjaGFydF9vcHRpb25zIiwiZnJvbV96b29tIiwiZ2V0X3VybF9yZXF1ZXN0IiwicmVnaXN0ZXJfc3RhdHVzIiwiZHJhd19jaGFydCIsImdldF9kYXRhX3VyaSIsImRvd25sb2FkX2NoYXJ0X3BuZyIsImZpbGVfbmFtZSIsImRhdGFfdXJpIiwiZG93bmxvYWRVUkkiLCJuZXdfdXJsX3JlcXVlc3QiLCJ1cGRhdGVfY2hhcnQiLCJjaGFydEFwZXgiLCJjaGFydF9jb250ZXh0Iiwib25fYmVmb3JlX3pvb20iLCJvbl96b29tZWQiLCJnZXRfY2hhcnRfb3B0aW9ucyIsInVwZGF0ZV9jaGFydF9vcHRpb25zIiwidXBkYXRlX2NoYXJ0X3NlcmllcyIsIm5ld19lcG9jaF9zdGF0dXMiLCJnZXRfZXBvY2hfZnJvbV94YXhpc19ldmVudCIsIm1pbl90aW1lX2ludGVydmFsIiwiYmVnaW4iLCJ1bml4Iiwic2NyaXB0JDF3IiwiU2VsZWN0U2VhcmNoIiwiZW5hYmxlX3JlZnJlc2giLCJkaXNhYmxlZF9kYXRlX3BpY2tlciIsImN1c3RvbV90aW1lX2ludGVydmFsX2xpc3QiLCJpbnZhbGlkX2RhdGVfbWVzc2FnZSIsIndyb25nX2RhdGUiLCJ3cm9uZ19taW5faW50ZXJ2YWwiLCJzdGFydF9yZWZyZXNoIiwidGltZV9wcmVzZXRfbGlzdCIsInRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQiLCJnZXRfdGltZWZyYW1lc19hdmFpbGFibGUiLCJlbGVtIiwiZW1pdF9lcG9jaF9jaGFuZ2UiLCJmX3NldF9waWNrZXIiLCJwaWNrZXIiLCJ2YXJfbmFtZSIsImZsYXRwaWNrciIsImVuYWJsZVRpbWUiLCJkYXRlRm9ybWF0IiwidGltZV8yNGhyIiwiY2xpY2tPcGVucyIsIm9uQ2hhbmdlIiwic2VsZWN0ZWREYXRlcyIsImRhdGVTdHIiLCJlbmFibGVfYXBwbHkiLCJmbGF0X2JlZ2luX2RhdGUiLCJmbGF0X2VuZF9kYXRlIiwib25fc3RhdHVzX3VwZGF0ZWQiLCJzZWxlY3RlZF90aW1lX29wdGlvbiIsInVwZGF0ZV9mcm9tX2ludGVydmFsIiwiY2hhbmdlX3NlbGVjdF90aW1lIiwicmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzIiwidXRjX3NfdG9fc2VydmVyX2RhdGUiLCJzZXJ2ZXJfZGF0ZV90b19kYXRlIiwiZGF0ZSIsImVuZF9kYXRlX3RpbWVfdXRjIiwiYmVnaW5fZGF0ZV90aW1lX3V0YyIsInNldF9zZWxlY3RfdGltZV92YWx1ZSIsImVwb2NoX3N0YXR1cyIsImFkZF9zdGF0dXNfaW5faGlzdG9yeSIsImJlZ2luX3V0YyIsImVuZF91dGMiLCJyb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbCIsImVuZF91dGNfcyIsImJlZ2luX3V0Y19zIiwiaXNfYmV0d2VlbiIsInNlbGVjdF90aW1lX3ZhbHVlIiwidGltZV9pZCIsImJlZ2luX2RhdGUiLCJlbmRfZGF0ZSIsInJlZnJlc2hfZGF0YSIsImludGVydmFsX3MiLCJ0aW1lZnJhbWVzX2lkcyIsInRpbWVmcmFtZXNfYXZhaWxhYmxlIiwidGZfaWQiLCJ0b2xlcmFuY2UiLCJpbnRlcnZhbCIsImNlbnRlciIsImp1bXBfdGltZV9iYWNrIiwianVtcF90aW1lX2FoZWFkIiwicHJldmlvdXNfZW5kIiwiZW1pdF9vbmx5X2dsb2JhbF9ldmVudCIsImhpc3RvcnlfbGFzdF9zdGF0dXMiLCJhcHBseV9zdGF0dXNfYnlfaGlzdG9yeSIsIl9ob2lzdGVkXzUiLCJfaG9pc3RlZF8xMyIsIl9ob2lzdGVkXzE1Iiwic3R5bGVJbmplY3QiLCJpbnNlcnRBdCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlU2hlZXQiLCJfcmVuZGVyU2xvdCIsIl9jb21wb25lbnRfc2VsZWN0X3NlYXJjaCIsIm9uU2VsZWN0X29wdGlvbiIsInBsYWNlaG9sZGVyIiwiX2NyZWF0ZUNvbW1lbnRWTm9kZSIsIl92U2hvdyIsInNjcmlwdCQxdiIsInByZXZlbnRFbnRlciIsIm9uU3VibWl0IiwidGFiaW5kZXgiLCJyZWdleGVzIiwibWFjX2FkZHJlc3MiLCJjb21tYV9zZXBhcnRlZF9wb3J0X3JlZ2V4IiwicG9ydF9yYW5nZV9yZWdleCIsImhvc3RfbmFtZSIsInZhbGlkYXRlSVAiLCJ2YWxpZGF0ZUlQdjQiLCJ2YWxpZGF0ZUlQdjYiLCJVdGlscyIsImdldF9kYXRhX3BhdHRlcm4iLCJyX2lwdjQiLCJyX2lwdjRfdmxhbiIsInJlcGxhY2VBbGwiLCJyX2lwdjYiLCJyX2lwdjZfdmxhbiIsIm5ldHdvcmtfaXB2NCIsImlwdjRfY2lkciIsImlwdjRfY2lkcl92bGFuIiwibmV0d29ya19pcHY2IiwicmVnZXhWYWxpZGF0aW9uIiwidmFsaWRhdGVIb3N0TmFtZSIsInZhbGlkYXRlQ29tbWFTZXBhcmF0ZWRQb3J0TGlzdCIsInBvcnRzIiwidmFsaWRhdGVQb3J0UmFuZ2UiLCJwb3J0X2FycmF5IiwibG93IiwiaGlnaCIsInZhbGlkYXRlU2luZ2xlV29yZCIsIndvcmQiLCJzY3JpcHQkMXUiLCJNb2RhbCIsImZpbHRlcnNfb3B0aW9ucyIsImlkX21vZGFsIiwiZmlsdGVyX3R5cGVfc2VsZWN0ZWQiLCJmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCIsIm9wZXJhdG9yX3NlbGVjdGVkIiwib3B0aW9uX3NlbGVjdGVkIiwiaW5wdXRfdmFsdWUiLCJpbnB1dF90eXBlIiwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkIiwiaW5wdXRfcmVxdWlyZWQiLCJvcHRpb25zX3RvX3Nob3ciLCJvcGVyYXRvcnNfdG9fc2hvdyIsImNoYW5nZV9maWx0ZXIiLCJwb3N0X2NoYW5nZSIsImNoYW5nZV9vcGVyYXRvcl90eXBlIiwic2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSIsImNoYW5nZV9kYXRhX2ZpbHRlciIsInNlbGVjdGVkX2ZpbHRlciIsImNoYW5nZV9pbnB1dF92YWx1ZSIsImNoZWNrX2Rpc2FibGVfYXBwbHkiLCJhdXRvY29tcGxldGUiLCJmb3IiLCJfY3JlYXRlQmxvY2siLCJyZXF1aXJlZCIsImZvb3RlciIsImluaXRpYWxUYWdzIiwiVEFHSUZZIiwiSVNfQUxFUlRfU1RBVFNfVVJMIiwiU1RBVFVTX1ZJRVciLCJQQUdFIiwiYWxlcnRfc3RhdHNfcGFnZSIsImdldF9wYWdlIiwiaXNfYWxlcnRfc3RhdHNfdXJsIiwicXVlcnlfcHJlc2V0IiwiYWdncmVnYXRlZCIsInNjcmlwdCQxdCIsIkRhdGVUaW1lUmFuZ2VQaWNrZXIiLCJNb2RhbEZpbHRlcnMiLCJkdF9yYW5nZV9waWNrZXJfbW91bnRlZCIsImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXIiLCJpZF9tb2RhbF9maWx0ZXJzIiwicmFuZ2VfcGlja2VyX3Z1ZSIsInRhZ2lmeSIsIlRhZ2lmeSIsImR1cGxpY2F0ZXMiLCJjbGFzc25hbWUiLCJhdXRvQ29tcGxldGUiLCJ0ZW1wbGF0ZXMiLCJ0YWdEYXRhIiwic2VsZWN0ZWRPcGVyYXRvciIsInZhbGlkYXRlIiwiYWRkVGFncyIsImFkZEZpbHRlclRhZyIsInJlYWxWYWx1ZSIsImV4aXN0aW5nVGFnRWxlbWVudCIsImdldFRhZ0VsbXMiLCJodG1sVGFnIiwicmVtb3ZlVGFncyIsImVkaXRfdGFnIiwiY3JlYXRlX3RhZ2lmeSIsInJlbG9hZF9zdGF0dXMiLCJtb2RhbF9kYXRhIiwic2hvd19maWx0ZXJzIiwic3RhdHVzX3ZpZXciLCJsYXN0X2ZpbHRlcnMiLCJpc19maWx0ZXJfZGVmaW5lZCIsInVwZGF0ZV9zdGF0dXNfdmlldyIsInNob3dfbW9kYWxfZmlsdGVycyIsInJlbW92ZV9maWx0ZXJzIiwicmVtb3ZlQWxsVGFncyIsImZfY29uc3QiLCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyIiwiYXBwbHlfbW9kYWwiLCJfY29tcG9uZW50X21vZGFsX2ZpbHRlcnMiLCJvbkFwcGx5IiwiX2NvbXBvbmVudF9kYXRlX3RpbWVfcmFuZ2VfcGlja2VyIiwiZXh0cmFfYnV0dG9ucyIsIl9ob2lzdGVkXzExIiwibWF4X3BhZ2VfYnV0dG9ucyIsInN0YXJ0X3BhZ2VfYnV0dG9uIiwibnVtX3BhZ2VfYnV0dG9ucyIsInRvdGFsX3BhZ2VzIiwidGV4dF90ZW1wbGF0ZSIsImNhbGN1bGF0ZV9wYWdlcyIsImNoYW5nZV9hY3RpdmVfcGFnZSIsInNldF90ZXh0IiwiZW5hYmxlX2ZpcnN0X3BhZ2UiLCJlbmFibGVfbGFzdF9wYWdlIiwibmV3X2FjdGl2ZV9wYWdlIiwibmV3X3N0YXJ0X3BhZ2VfYnV0dG9uIiwiZW5kX3BhZ2VfYnV0dG9uIiwiZm9ybWF0X251bWJlciIsImxvYWRpbmciLCJvdmVybGF5IiwiaGlkZV9sb2FkaW5nIiwic2hvd19sb2FkaW5nIiwidmFsdWVfMiIsInRhYmxlX2NvbnRhaW5lciIsImFjdGl2ZV9yb3dzIiwicGVyX3BhZ2Vfb3B0aW9ucyIsInN0b3JlIiwic2VsZWN0X3RhYmxlX3BhZ2UiLCJxdWVyeV9pbmZvX3NxbF9idXR0b24iLCJjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSIsImNoYW5naW5nX3Jvd3MiLCJlbmFibGVfYXV0b3JlZnJlc2giLCJsb2FkX3RhYmxlIiwiYXV0b3JlZnJlc2hfdGl0bGUiLCJnZXRfY29sX2lkIiwiY29sc192aXNpYmlsaXR5X2RpY3QiLCJjb2x1bW5zX3Zpc2libGUiLCJjb2x1bW5zX3Zpc2libGVfZGljdCIsImdldF9jb2x1bW5zX3Zpc2liaWxpdHlfZGljdCIsImlzX3RhYmxlX25vdF9zb3J0ZWQiLCJjb2xfb3B0IiwiaXNfY29sdW1uX3NvcnRhYmxlIiwic2V0X2NvbHVtbnNfdmlzaWJpbGl0eSIsInNldF9jb2x1bW5zX3dyYXAiLCJzZXRfcm93cyIsInNldF9jb2x1bW5zX3Jlc2l6YWJsZSIsImF1dG9yZWZyZXNoX2ludGVydmFsIiwidXBkYXRlX2F1dG9yZWZyZXNoIiwicmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSIsInRhYmxlX2tleSIsInJlZHJhd190YWJsZSIsIm1pbldpZHRoIiwicmVzaXphYmxlQ29sdW1ucyIsInZpc2libGVfY29sdW1uc19pZHMiLCJyZXNldF9jb2x1bW5fc2l6ZSIsImNoYW5nZV9wZXJfcGFnZSIsInNlbGVjdF9wYWdlc19rZXkiLCJ0YWJsZV9jb250ZW50X2lkIiwiZm9yY2VfcmVmcmVzaCIsInNldF9hY3RpdmVfcm93cyIsImZvcmNlX2Rpc2FibGVfbG9hZGluZyIsInJlZnJlc2hfdGFibGUiLCJkaXNhYmxlX2xvYWRpbmciLCJtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0Iiwic3RhcnRfcm93X2luZGV4IiwiZl9zb3J0IiwiZl9zb3J0X3Jvd3MiLCJyMCIsInIxIiwicjBfY29sIiwicjFfY29sIiwiY29sX3RvX3NvcnQiLCJnZXRfY29sdW1uX3RvX3NvcnQiLCJvbl9jaGFuZ2VfbWFwX3NlYXJjaCIsImNvcHlfcXVlcnlfaW50b19jbGlwYm9hcmQiLCJjb3B5VG9DbGlwYm9hcmQiLCJnZXRfY29sdW1uc19kZWZzIiwiZ2V0X3Jvd3NfbnVtIiwiY29sX2luZGV4IiwidGFibGVfY29uZmlnIiwibW91bnRfdGFibGUiLCJ0YWJsZV9jb25maWdfaWQiLCJ0YWJsZV9pZF8yIiwidGFibGVfY29uZmlnX2lkXzIiLCJUYWJsZVV0aWxzIiwiZ2V0X2V4dHJhX3BhcmFtc19vYmoiLCJmX21hcF9jb25maWciLCJvbl9sb2FkZWQiLCJyb3dzX2xvYWRlZCIsInNjcmlwdCQxbCIsImRlc2NyaXB0aW9uIiwiaW52YWxpZF9icGYiLCJicGZfZmlsdGVyIiwiZXh0cmFjdF9ub3ciLCJzaG93X21lbnUiLCJkYXRhX2F2YWlsYWJsZSIsImVwb2NoX2ludGVydmFsIiwicGFkMl9udW1iZXIiLCJmb3JtYXRfZGF0ZSIsImRfbXMiLCJ2YWx1ZU9mIiwidXJsX3JlcXVlc3Rfb2JqIiwiaWZpZCIsInVybF9yZXF1ZXN0X3BhcmFtcyIsImpvYl9pZCIsImFsZXJ0X3RleHRfaHRtbCIsInBhZ2VfbmFtZSIsImF2YWlsYWJsZSIsImV4dHJhX2luZm8iLCJicGYiLCJzZXRfZGVzY3JpcHRpb25zIiwiZGF0ZV9iZWdpbiIsImRhdGVfZW5kIiwiZGVzYyIsInNob3dfaGlkZV9tZW51IiwiX2NvbXBvbmVudF9tb2RhbCIsIl9jcmVhdGVUZXh0Vk5vZGUiLCJfd2l0aERpcmVjdGl2ZXMiLCJzcGVsbGNoZWNrIiwiX2hvaXN0ZWRfMTkiLCJtb2RhbF9pZCIsInNuYXBzaG90X3NlbGVjdGVkIiwiYXBwbHlfdGltZSIsImFwcGx5X3RpbWVfdGV4dCIsInNhdmVfdGltZSIsInNhdmVfdGltZV90ZXh0Iiwic25hcHNob3RfbmFtZSIsInNuYXBzaG90cyIsIm9yZGVyX2J5IiwicGF0dGVybl9zaW5nbGV3b3JkIiwiZGlzYWJsZV9hZGQiLCJkaXNhYmxlX3NlbGVjdCIsImxhc3Rfb3JkZXJfYnkiLCJzb3J0X3NuYXBzaG90c19ieSIsImxvYWRfc25hcHNob3RzIiwiYWRkX3NuYXBzaG90IiwicGFyYW1zX29iaiIsInNlbGVjdF9zbmFwc2hvdCIsImRlbGV0ZV9zbmFwc2hvdCIsImRlbGV0ZV9hbGwiLCJzYXZlX3RpbWVfZmlsdGVyX3RleHQiLCJiZWdpbl90aW1lIiwiZW5kX3RpbWUiLCJhcHBseV90aW1lX2ZpbHRlcl90ZXh0Iiwic25hcHNob3RzX29iaiIsInJhZGlvX3NlbGVjdGVkIiwiZGlzYWJsZV9hbGVydHMiLCJkb21haW4iLCJjb21tZW50IiwiY29tbWVudF9wbGFjZWhvbGRlciIsImlzc3VlcmRuIiwicmVnZXhfZG9tYWluIiwicGF0dGVybl9kb21haW4iLCJyZWdleF9jZXJ0aWZpY2F0ZSIsInBhdHRlcm5fY2VydGlmaWNhdGUiLCJhbGVydF9uYW1lIiwiaG9zdF9hZGRyIiwiZmxvd19hZGRyIiwiY2xpX3ZhbHVlIiwiY2xpX2xhYmVsIiwic3J2X3ZhbHVlIiwic3J2X2xhYmVsIiwiZGVsZXRlX2FsZXJ0cyIsImFkZHIiLCJhbGVydF9hZGRyIiwiZmxvd19hbGVydF9rZXkiLCJob3N0X2FsZXJ0X2tleSIsImFsZXJ0X2RvbWFpbiIsImFsZXJ0X2NlcnRpZmljYXRlIiwiYWxlcnRfaW5mbyIsInRpdGxlX2Rlc2MiLCJhY2tub3dsZWRnZSIsInJvd19pZCIsIl9hbGVydCIsIiR0eXBlIiwidXNlcl9sYWJlbCIsIm1lc3NhZ2VfYm9keSIsImRlbGV0ZV9hbGVydCIsIl9zdGF0dXNfdmlldyIsImFja25vd2xlZGdlX2FsZXJ0cyIsInRhYmxlX2FsZXJ0cyIsIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsIm1vZGFsX3NuYXBzaG90IiwicmFuZ2VfcGlja2VyIiwicGVybWFuZW50X2xpbmtfYnV0dG9uIiwibW9kYWxfYWxlcnRzX2ZpbHRlciIsIm1vZGFsX2Fja25vd2xlZGdlIiwibW9kYWxfZGVsZXRlIiwibW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzIiwibW9kYWxfZGVsZXRlX2FsZXJ0cyIsImNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZCIsImRpc3BsYXlfbWVzc2FnZSIsIm1lc3NhZ2VfdG9fZGlzcGxheSIsImN1cnJlbnRfYWxlcnQiLCJkZWZhdWx0X2lmaWQiLCJjaGFydF9kYXRhX3VybCIsInRvcF90YWJsZV9hcnJheSIsInRvcF90YWJsZV9kcm9wZG93bl9hcnJheSIsIm5vdGVfbGlzdCIsInNlbGVjdGVkX3F1ZXJ5X3ByZXNldCIsInF1ZXJ5X3ByZXNldHMiLCJtb3VudF9yYW5nZV9waWNrZXIiLCJocmVmX2Rvd25sb2FkX3JlY29yZHMiLCJzaG93X2NoYXJ0IiwiZG93bmxvYWRfZW5kcG9pbnQiLCJpc192YSIsImluaXRfcGFyYW1zIiwiZGVmYXVsdF9lcG9jaF9iZWdpbiIsImRlZmF1bHRfZXBvY2hfZW5kIiwiaW5pdF91cmxfcGFyYW1zIiwiaXNfbnRvcF9lbnRlcnByaXNlX2wiLCJnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSIsImJ1aWx0aW4iLCJpc19wcmVzZXQiLCJzZXRfcXVlcnlfcHJlc2V0cyIsImxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3IiwicmVnaXN0ZXJfY29tcG9uZW50c19vbl9zdGF0dXNfdXBkYXRlIiwicGFnZV9pZCIsInNob3dfY2FyZHMiLCJsb2FkX3RvcF90YWJsZV9hcnJheSIsInNob3dfc3Bpbm5lciIsImRhdGFfbG9hZGVkIiwiZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duIiwidG9wX2luZGV4IiwibmV3X3RvcF9hcnJheSIsImxvYWRfdG9wX3RhYmxlX2RldGFpbHMiLCJvbl90YWJsZV9sb2FkZWQiLCJhZGRfdGFibGVfcm93X2ZpbHRlciIsIm1hcF90YWJsZV9kZWZfY29sdW1ucyIsIm1hcF9jb2x1bW5zIiwibDdfcHJvdG8iLCJwcm90byIsImNvbmZpZGVuY2UiLCJjb3B5X2J1dHRvbiIsInNldF9xdWVyeV9wcmVzZXRfY29sdW1ucyIsImNvbHVtbnNfZGVmIiwidmlzaWJsZV9kaWN0Iiwic25tcF9pbmZvIiwic2hvd19zbm1wX2luZm8iLCJzaG93X2luZm8iLCJoaXN0b3JpY2FsX2RhdGEiLCJzaG93X2hpc3RvcmljYWwiLCJzaG93X2Fja25vd2xlZGdlIiwic2hvd19kaXNhYmxlIiwic2hvd19zZXR0aW5ncyIsInNob3dfZGVsZXRlIiwiYWRkX2ZpbHRlciIsImNsaWNrX25hdmJhcl9pdGVtIiwicmVtb3ZlX2ZpbHRlcnNfZnJvbV91cmwiLCJnZXRfcGVybWFuZW50X2xpbmsiLCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsInNob3dfbW9kYWxfc25hcHNob3QiLCJhZGRfZXhjbHVkZSIsInJlZnJlc2hfcGFnZV9jb21wb25lbnRzIiwib25fdGFibGVfY3VzdG9tX2V2ZW50IiwiZXZlbnRzX21hbmFnZWQiLCJjbGlja19idXR0b25fc25tcF9pbmZvIiwiY2xpY2tfYnV0dG9uX2luZm8iLCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyIsImNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZSIsImNsaWNrX2J1dHRvbl9kaXNhYmxlIiwiY2xpY2tfYnV0dG9uX3NldHRpbmdzIiwiY2xpY2tfYnV0dG9uX3JlbW92ZSIsImNsaWNrX2J1dHRvbl9leHBhbmQiLCJyb3dfZmlsdGVycyIsInRhZ19maWx0ZXJzIiwiZmlsdGVyc19kaWN0Iiwic2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHMiLCJzaG93X21vZGFsX2RlbGV0ZV9hbGVydHMiLCJnZXRfc3RhdHVzX3ZpZXciLCJjaGVja19zZXR0aW5nc19ocmVmIiwiY29uZmlnc2V0X3JlZiIsInNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlciIsImxpbmtfdG9fcGFzdF9mbG93cyIsInRzdGFtcCIsImFsZXJ0X2RldGFpbHNfdXJsIiwidGFibGVfZmxvd3MiLCJmbG93c19hZ2dyZWdhdGVkIiwiZmxvd190eXBlX2xhYmVsIiwiZ2V0X2NoYXJ0X2NvbmZpZ19mcm9tX3ByZXNldF9jb25zdCIsInByZXNldF9jb25zdCIsImZfY2hlY2tfbGFzdF9taW51dGVfZXBvY2hfZW5kIiwiY2hhcnRfY29uZmlnIiwiZl9tYXBfY2hhcnRfb3B0aW9ucyIsImZvcm1hdHRlcl90eXBlIiwidW5pdF9tZWFzdXJlIiwiY2hhbmdlX2Zsb3dfdHlwZSIsImZfcHJpbnRfYXNuIiwiZl9wcmludF9sYXRlbmN5IiwibXNlY1RvVGltZSIsImZpcnN0X3NlZW4iLCJsN3Byb3RvIiwiY2xpX2FzbiIsInNydl9hc24iLCJmbG93X3Jpc2siLCJmbG93X3Jpc2tzIiwiZmxvd19yaXNrX2xhYmVsIiwiZmxvd19yaXNrX2hlbHAiLCJoZWxwIiwiY2xpX253X2xhdGVuY3kiLCJzcnZfbndfbGF0ZW5jeSIsImZsb3dfYWxlcnRzIiwic2hvd19hbGVydHMiLCJwY2FwX2Rvd25sb2FkIiwic2hvd19wY2FwX2Rvd25sb2FkIiwicm93X2RhdGEiLCJpc19lbnRlcnByaXNlX3hsIiwibm90X3JlZnJlc2hfdGFibGUiLCJjbGlja19idXR0b25fZmxvd19hbGVydHMiLCJjbGlja19idXR0b25fcGNhcF9kb3dubG9hZCIsImNsaWNrX2J1dHRvbl9mbG93cyIsInJvd2lkIiwiTlRPUE5HX0lOU1RBTkNFX05BTUUiLCJmaWx0ZXJzX3BhcmFtc19vYmplY3QiLCJmaWx0ZXJfa2V5IiwidGFnX2tleSIsImFsZXJ0c191cmwiLCJwcm9iZV9pcCIsImluc3RhbmNlX25hbWUiLCJhc192bGFuIiwib3V0cHV0X3NubXAiLCJhc19vdXRwdXRfc25tcCIsImlucHV0X3NubXAiLCJzY3JpcHQkMWMiLCJkaXNhYmxlX3BvaW50ZXJfZXZlbnRzIiwidGltZXNlcmllc192aXNpYmlsaXR5IiwidGltZXNlcmllc19saXN0IiwiZ2V0X2ltYWdlIiwiRHlncmFwaCIsIkV4cG9ydCIsImFzUE5HIiwiY2hhbmdlX3Zpc2liaWxpdHkiLCJzZXRWaXNpYmlsaXR5IiwiZGF0ZV9mb3JtYXQiLCJheGVzIiwiYXhpc0xhYmVsRm9ybWF0dGVyIiwidmFsdWVGb3JtYXR0ZXIiLCJheGlzTGFiZWxXaWR0aCIsInpvb21DYWxsYmFjayIsIm1pbkRhdGUiLCJtYXhEYXRlIiwiX25vcm1hbGl6ZVN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidXBkYXRlX3RpbWVzZXJpZXMiLCJ0aW1lc2VyaWVzIiwiZGVsZXRlX3RzIiwiYnl0ZXNUb1NpemVGb3JtYXR0ZXIiLCJoYW5kbGVySWRBZGRMaW5rIiwiaGFuZGxlcklkSnVtcEhpc3RvcmljYWwiLCJ0b3BfYXBwbGljYXRpb24iLCJ0YWJsZV92YWx1ZSIsInZpZXciLCJkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyIsImNvbHVtbkRlZnMiLCJ0YXJnZXRzIiwiY29sdW1uTmFtZSIsInNlcnZpY2UiLCJzY2hlbWEiLCJ0c19zY2hlbWEiLCJhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSIsInRzX3F1ZXJ5IiwiY3JlYXRlTGlua0NhbGxiYWNrIiwiY3JlYXRlUHJvZ3Jlc3NCYXIiLCJyZXNwb25zaXZlUHJpb3JpdHkiLCJyZW5kZXJfaWYiLCJpc19oaXN0b3J5X2VuYWJsZWQiLCJqdW1wX3RvX2hpc3RvcmljYWwiLCJoaXN0b3JpY2FsX2Zsb3dzX3VybCIsInNvdXJjZV9hcnJheSIsInBhcmFtc19hcnJheSIsInNvdXJjZV9kZWZfYXJyYXkiLCJzb3VyY2VfZGVmIiwiY3JlYXRlQWN0aW9uQnV0dG9ucyIsInRvcF9jYXRlZ29yaWVzIiwiY2F0ZWdvcnkiLCJpbnRlcmZhY2VfdG9wX3RhYmxlcyIsImhvc3RfcmVmIiwiYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QiLCJzb3VyY2VzX3R5cGVzX2VuYWJsZWQiLCJpc19sb2NhbCIsImlzX2F2YWlsYWJsZSIsImhvc3RfdHNfYXZhaWxhYmxlIiwicF91cmwiLCJqdW1wX3RvX2hvc3QiLCJob3N0X3VybCIsInRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UiLCJpbnRlcmZhY2VUb3BUYWJsZXMiLCJob3N0X3RvcF90YWJsZXMiLCJicHNGb3JtYXR0ZXIiLCJ0b3Bfc25tcF9pbnRlcmZhY2UiLCJ0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QiLCJkZXZpY2UiLCJpZl9pbmRleCIsImZfZ2V0X2xhYmVsIiwidHNfZ3JvdXAiLCJzb3VyY2VfbGFiZWwiLCJsYWJlbF90ZXh0IiwiYWxpYXMiLCJzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzIiwidG9wX2Zsb3dfaW50ZXJmYWNlIiwiZmxvd19kZXZfdG9wX3RhYmxlcyIsInVpX3R5cGVzIiwic291cmNlc191cmxfZWxfdG9fc291cmNlIiwiaWZuYW1lIiwicG9vbF9pZCIsImFtX2hvc3QiLCJhbSIsIm1lYXN1cmVtZW50IiwibWVhc3VyZW1lbnRfa2V5IiwiYmxhY2tsaXN0IiwiY29sdW1uX25hbWUiLCJzb3VyY2VzX3R5cGVzX3RhYmxlcyIsImludGVyZmFjZSIsImhvc3RUb3BUYWJsZXMiLCJzbm1wX2ludGVyZmFjZSIsInNubXBJbnRlcmZhY2VUb3BUYWJsZXMiLCJzbm1wX2RldmljZSIsImZsb3dfZGV2aWNlIiwiZmxvd0RldmljZVRvcFRhYmxlcyIsImZsb3dfaW50ZXJmYWNlIiwic291cmNlc190eXBlcyIsInJlZ2V4X3BhZ2VfdXJsIiwibWFpbl9zb3VyY2VfZGVmIiwicmVnZXhfdHlwZSIsInNvdXJjZXNfdXJsIiwic291cmNlc19mdW5jdGlvbiIsInZhbHVlX3VybCIsInZhbHVlX21hcF9zb3VyY2VzX3JlcyIsImRpc2FibGVfdHNrZXkiLCJmX2dldF92YWx1ZV91cmwiLCJmX3NldF92YWx1ZV91cmwiLCJ1aV90eXBlIiwiaWRfZ3JvdXAiLCJtZXRyaWNzQ29uc3RzIiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybCIsInRpbWVzZXJpZXNfZ3JvdXBzIiwicGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzIiwicGFzdCIsImF2ZyIsInBlcmNfOTUiLCJtZXRyaWNfc2NoZW1hX3F1ZXJ5IiwibWV0cmljIiwidGltZXNlcmllc19wYXJhbSIsInNvdXJjZV92YWx1ZV9hcnJheV9xdWVyeSIsImdldF90c19ncm91cF91cmxfcGFyYW0iLCJ1cmxfdGltZXNlcmllc19ncm91cHMiLCJnZXRfdHNfZ3JvdXAiLCJnZXRfdHNfZ3JvdXBfaWQiLCJnZXRfZGVmYXVsdF90aW1lc2VyaWVzX2dyb3VwcyIsIm1ldHJpY190c19zY2hlbWEiLCJtZXRyaWNfcXVlcnkiLCJnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlIiwiZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5IiwibWV0cmljcyIsImdldF9tZXRyaWNzIiwiZ2V0X2RlZmF1bHRfbWV0cmljIiwiZ2V0X3VybF9wYXJhbV9mcm9tX3RzX2dyb3VwIiwidHNfZ3JvdXBfdXJsX3BhcmFtIiwic291cmNlX3R5cGVfaWQiLCJzb3VyY2VfdmFsdWVfYXJyYXkiLCJtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5IiwidGltZXNlcmllc191cmwiLCJnZXRfc291cmNlX3R5cGVfZnJvbV9pZCIsImdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSIsImdldF9tZXRyaWNfZnJvbV9zY2hlbWEiLCJ0c191cmxfYXJyYXkiLCJ0c191cmwiLCJnZXRfdGltZXNlcmllcyIsImVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QiLCJzZXRfc291cmNlX3R5cGVfaWRfZ3JvdXAiLCJtZXRyaWNfaWQiLCJzb3VyY2VfZGVmX3ZhbHVlIiwiZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5IiwiZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QiLCJzb3VyY2VfdmFsdWVfZGljdCIsInNvdXJjZV92YWx1ZSIsInNvdXJjZXMiLCJnZXRfc291cmNlcyIsImNhY2hlX3NvdXJjZXMiLCJmX21hcF9zb3VyY2VfZWxlbWVudCIsInNvcnRBbHBoYWJldGljYWxseSIsInNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybCIsInNvdXJjZV92YWx1ZV9vYmplY3QiLCJjYWNoZV9tZXRyaWNzIiwibGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwiLCJjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsIiwiZXBvY2hfc3RyaW5nIiwiZ2V0X21ldHJpY3NfdXJsIiwic291cmNlX2FycmF5X2tleSIsImdldF9tZXRyaWNfa2V5IiwiZGVmYXVsdF92aXNpYmxlIiwibWV0cmljX3NjaGVtYSIsImdldF9tZXRyaWNfcXVlcnlfZnJvbV90c19xdWVyeSIsInNvdXJjZV9kZWZfZGljdCIsInNfZGVmIiwidHNfcXVlcnlfYXJyYXkiLCJ0c192YWxfa2V5IiwiZGVmYXVsdF9tZXRyaWMiLCJtZXRyaWNzTWFuYWdlciIsImdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybCIsImdyb3VwcyIsInRyYW5zZm9ybUNvbG9ycyIsImNvbG9yc1Bvc2l0aW9uRGljdCIsIm5ld0NvbG9ycyIsImNvbG9yc1Bvc2l0aW9uIiwiZ2V0Q29sb3JzRnJvbUNvbG9yIiwiY1Bvc2l0aW9uIiwiYmFzZUNvbG9yIiwic291cmNlQ29sb3IiLCJyZWRTb3VyY2UiLCJncmVlblNvdXJjZSIsImJsdWVTb3VyY2UiLCJjUmVkIiwiZ2V0Q29sb3JJbnRlcnBvbGF0aW9uIiwiY0dyZWVuIiwiY0JsdWUiLCJjb21wb25lbnRUb0hleCIsInJnYlRvSGV4IiwiZ2VuZXJhdGVDb2xvciIsImNvbG9yU291cmNlIiwiY29sb3JTdGFydCIsInRydW5jIiwiY29sb3JFbmQiLCJoZXgiLCJjb2xvcnNJbnRlcnBvbGF0aW9uIiwiY29uc3RhbnRfc2VyaWVfY29sb3JzIiwiZ2V0U2VyaWVJZCIsImdldFNlcmllTmFtZSIsInRzR3JvdXAiLCJ1c2VGdWxsTmFtZSIsIm5hbWVfbW9yZV9zcGFjZSIsInNvdXJjZV9pbmRleCIsImdldE1haW5Tb3VyY2VEZWZJbmRleCIsImRlZmF1bHRDb2xvcnMiLCJncm91cHNPcHRpb25zTW9kZXNFbnVtIiwiZ2V0R3JvdXBPcHRpb25Nb2RlIiwiZ3JvdXBfaWQiLCJ0c0FycmF5VG9PcHRpb25zQXJyYXkiLCJ0c09wdGlvbnNBcnJheSIsInRzR3JvdXBzQXJyYXkiLCJncm91cHNPcHRpb25zTW9kZSIsInRzQ29tcGFyZSIsInRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyIsInNwbGl0dGVkVHNBcnJheSIsInRzT3B0aW9uc0FycmF5U3RhY2tlZCIsInRzR3JvdXBzQXJyYXlTdGFja2VkIiwidHNPcHRpb25zQXJyYXlOb3RTdGFja2VkIiwidHNHcm91cHNBcnJheU5vdFN0YWNrZWQiLCJkcmF3X3N0YWNrZWQiLCJub3Rfc3RhY2tlZCIsInNwbGl0VHNBcnJheVN0YWNrZWQiLCJ0c0RpY3QiLCJ5YXhpc0lkIiwibWVhc3VyZV91bml0IiwidHNFbCIsInRzT3B0aW9ucyIsImRpc3BsYXlfZnVsbF9uYW1lIiwiRHlncmFwaE9wdGlvbnNBcnJheSIsInRzQXJyYXkiLCJ0c09wdGlvbnNBcnJheTIiLCJ0c0dyb3Vwc0FycmF5MiIsIkR5Z3JhcGhPcHRpb25zIiwidHNBcnJheVRvT3B0aW9ucyIsIm9wdGlvbnNBcnJheSIsImZvcm1hdFNlcmllUHJvcGVydGllcyIsImZpbGxHcmFwaCIsImN1c3RvbUJhcnMiLCJzdHJva2VXaWR0aCIsInBvaW50U2l6ZSIsImZpbGxBbHBoYSIsImZvcm1hdHRlZF9zZXJpZSIsImZvcm1hdHRlcnMiLCJzZXJpZV9sYWJlbHMiLCJjb2xvcnNfcGFsZXR0ZSIsInNlcmllX3Byb3BlcnRpZXMiLCJ1c2VfZnVsbF9uYW1lIiwibWV0YWRhdGEiLCJlcG9jaF9zdGVwIiwicGFzdF9zZXJpZSIsImFkZGl0aW9uYWxfc2VyaWVzIiwiYm91bmRzIiwic2VyaWVfbmFtZSIsInNlcmllc19pbmZvIiwiY29sb3JfcGFsZXR0ZSIsInRzX2luZm8iLCJzY2FsYXIiLCJ0c19pZCIsInRpbWVzZXJpZXNVdGlscyIsInNfbWV0YWRhdGEiLCJpbnZlcnRfZGlyZWN0aW9uIiwicGFsZXR0ZSIsInBvaW50Iiwic2VyaWVfcG9pbnQiLCJOYU4iLCJmb3JtYXRCb3VuZHNTZXJpZSIsImZvdW5kIiwiZm9ybWF0dGVkX25hbWUiLCJleHRyYV90aW1lc2VyaWVzIiwidXNlX3NlcmllX25hbWUiLCJleHRfbGFiZWwiLCJhdmdfbGFiZWwiLCJwZXJjX2xhYmVsIiwicGFzdF9sYWJlbCIsInN0YXRpc3RpY3MiLCJmdWxsX3NlcmllIiwicGFsZXR0ZV9saXN0IiwiY29sb3JzX2xpc3QiLCJjb3VudDAiLCJjb3VudDEiLCJjb2xvcnMwIiwiY29sb3JzMSIsImQzdjciLCJzY2hlbWVDYXRlZ29yeTEwIiwic2V0U2VyaWVzQ29sb3JzIiwiaW50ZXJwb2xhdGVkX2NvbG9ycyIsImlzX2RhcmtfbW9kZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJoaWdobGlnaHRfY29sb3IiLCJsYWJlbHNTZXBhcmF0ZUxpbmVzIiwic3RhY2tlZEdyYXBoIiwiY29ubmVjdFNlcGFyYXRlZFBvaW50cyIsImluY2x1ZGVaZXJvIiwiZHJhd1BvaW50cyIsImhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRBbHBoYSIsImhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRDb2xvciIsImhpZ2hsaWdodFNlcmllc09wdHMiLCJoaWdobGlnaHRDaXJjbGVTaXplIiwiYXhpc0xhYmVsRm9udFNpemUiLCJ5MSIsImdldEF4aXNDb25maWd1cmF0aW9uIiwieTIiLCJidWlsZENoYXJ0T3B0aW9ucyIsIm51bV9vcl9taWxsaXMiLCJkeWdyYXBoIiwicmF3RGF0YV8iLCJnZXRUc1F1ZXJ5Iiwibm90X21ldHJpY19xdWVyeSIsInRzUXVlcnkiLCJnZXRUc0NoYXJ0c09wdGlvbnMiLCJodHRwUHJlZml4IiwiZXBvY2hTdGF0dXMiLCJ0aW1lc2VyaWVzR3JvdXBzIiwiaXNQcm8iLCJ0c0NoYXJ0c09wdGlvbnMiLCJwYXJhbXNFcG9jaE9iaiIsInBhcmFtc0NoYXJ0IiwidHNfY29tcGFyZSIsInRzRGF0YVVybE11bHRpIiwidHNfcmVxdWVzdHMiLCJtYWluX3NvdXJjZV9pbmRleCIsInBPYmoiLCJ0c2tleSIsInRzRGF0YVVybCIsInBhcmFtc1VybFJlcXVlc3QiLCJQbHVnaW5zIiwiTGVnZW5kIiwieFZhbHVlIiwic2VsZWN0ZWRYIiwicG9pbnRzIiwic2VsZWN0ZWRQb2ludHMiLCJzZWxlY3RlZFJvdyIsImxlZ2VuZE1vZGUiLCJnZXRPcHRpb24iLCJnZW5lcmF0ZUxlZ2VuZEhUTUwiLCJvbmVfZW1fd2lkdGhfIiwiTm9kZSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJsZWdlbmRfZGl2XyIsImFyZWEiLCJwbG90dGVyXyIsImxhYmVsc0RpdldpZHRoIiwib2Zmc2V0V2lkdGgiLCJ5QXhpc0xhYmVsV2lkdGgiLCJnZXRPcHRpb25Gb3JBeGlzIiwiaGlnaGxpZ2h0U2VyaWVzIiwiZ2V0SGlnaGxpZ2h0U2VyaWVzIiwiZm9sbG93T2Zmc2V0WCIsImdldE51bWVyaWNPcHRpb24iLCJsZWZ0TGVnZW5kIiwiY2xpZW50WSIsImlzX2dlbmVyYXRlZF9kaXZfIiwic2VsZWN0X3NlYXJjaF9tZXRyaWNzIiwiY3VycmVudF9wYWdlX3NvdXJjZV90eXBlIiwic2VsZWN0ZWRfc291cmNlX3R5cGUiLCJzb3VyY2VzX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkiLCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSIsImlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkIiwiZW5hYmxlX2FwcGx5X3NvdXJjZSIsInJnX3RleHQiLCJzb3VyY2VfdGV4dCIsImhpZGVfc291cmNlcyIsInNlbGVjdGVkX21ldHJpYyIsInRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIiwidGltZXNlcmllc190b19hZGQiLCJ3YWl0X2luaXQiLCJjaGFuZ2Vfc291cmNlX3R5cGUiLCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQiLCJjaGFuZ2VfYWN0aW9uIiwicmVnZXhfc291cmNlX2FycmF5IiwicmVnZXhfc291cmNlIiwic2V0X3JlZ2V4Iiwic2QiLCJzZXRfaGlkZV9zb3VyY2VzIiwic291cmNlc19hcnJheV90ZW1wIiwiZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJzZXRfc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCIsInNldF9zb3VyY2VzX2FycmF5Iiwic2V0X21ldHJpY3MiLCJhcHBseV9zb3VyY2VfYXJyYXkiLCJjaGFuZ2Vfc291cmNlX2FycmF5IiwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSIsImRlZmF1bHRfY29uZmlnIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSIsInNvdXJjZV90eXBlX25hbWUiLCJzb3VyY2VfZGVmX2luZGV4IiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQiLCJ0c19ncm91cF9pZCIsImFkZF90c19ncm91cCIsInRzX2dyb3VwX3RvX2FkZCIsImVtaXRfYXBwbHkiLCJ0c19ncm91cF9pbmRleCIsInNldF90aW1lc2VyaWVzX2dyb3VwcyIsImZpbGVuYW1lX3ZhbGlkYXRpb24iLCJlbmFibGVfZG93bmxvYWQiLCJleHQiLCJzYXZlX2xhc3Rfc29ydCIsImxhc3Rfc29ydGluZyIsInNvcnRpbmdfcHJlZiIsInNvcnRpbmdfa2V5IiwibG9hZF9sYXN0X3NvcnQiLCJ1bmZvcm1hdHRlZF9wcmVmIiwic3BsaXR0ZWRfcHJlZiIsImJhc2VfcGFyYW1zIiwiZXh0ZW5kX2NvbmZpZyIsInNlcnZlclNpZGUiLCJzY3JvbGxYIiwic2VhcmNoaW5nIiwiY29sdW1uc19jb25maWciLCJhdXRvV2lkdGgiLCJ0YWJsZUFwaSIsIm9JbnN0YW5jZSIsImFwaSIsIm9yZGVyQ29sdW1uSW5kZXgiLCJvcmRlckNvbHVtbk5hbWUiLCJiZWZvcmVTZW5kIiwic2hvd092ZXJsYXlzIiwiZHJhd0NhbGxiYWNrIiwiaGlkZU92ZXJsYXlzIiwiYUxhc3RTb3J0IiwiZ2V0U3RkRGF0YXRhYmxlQ29uZmlnIiwidGFibGVfYnV0dG9ucyIsImV4dGVuZENvbmZpZyIsIkRhdGFUYWJsZSIsImxvYWRfdGFibGVfbWVudSIsImZpbHRlcl9idXR0b25zIiwiY3Vycl92YWx1ZSIsIm51bV9ub25fYWN0aXZlX2VudHJpZXMiLCJsb2FkRGF0YXRhYmxlIiwidGFibGVfZGVmYXVsdF9tZW51IiwidGFibGVfd3JhcHBlciIsImdldF90YWJsZV9kZWZhdWx0X21lbnUiLCJtZW51X2FycmF5Iiwidk5vZGUiLCJyZW5kZXJfY29tcG9uZW50IiwiZGVsZXRlX2J1dHRvbl9oYW5kbGVycyIsImRlbGV0ZUJ1dHRvbkhhbmRsZXJzIiwiaXNfZGVzdHJveWVkIiwiZGVzdHJveV90YWJsZSIsInJlZnJlc2hfbWVudSIsImlzX2xhc3Rfc29ydGluZ19hdmFpbGFibGUiLCJzZWFyY2hfdmFsdWUiLCJ2YWx1ZV90b19zZWFyY2giLCJpZF9kYXRlX3RpbWVfcGlja2VyIiwiY2hhcnRzIiwiZGF0ZV90aW1lX3BpY2tlciIsInRvcF90YWJsZV9yZWYiLCJtb2RhbF90aW1lc2VyaWVzIiwibW9kYWxfZG93bmxvYWRfZmlsZSIsImVuYWJsZV9zdGF0c190YWJsZSIsImNoYXJ0c19vcHRpb25zX2l0ZW1zIiwiZ3JvdXBzX29wdGlvbnNfbW9kZXMiLCJjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGUiLCJncm91cHNfbW9kZSIsImluaXRfZ3JvdXBzX29wdGlvbl9tb2RlIiwibGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQiLCJjdXN0b21fbWV0cmljIiwicGFnZV9zbmFwc2hvdHMiLCJ0c19tZW51X3JlYWR5IiwiY29sdW1uc190bXAiLCJzdGF0c19jb2x1bW5zIiwic2V0X2RlZmF1bHRfc291cmNlX29iamVjdF9pbl91cmwiLCJwdXNoX2N1c3RvbV9tZXRyaWMiLCJsb2FkX3BhZ2Vfc3RhdHNfZGF0YSIsImxhc3RfcHVzaF9jdXN0b21fbWV0cmljIiwiY2FjaGVfc25hcHNob3RzIiwiZW5hYmxlX3NuYXBzaG90cyIsIm1ldHJpY3Nfc25hcHNob3RzIiwiaXNfc25hcHNob3QiLCJnZXRfc25hcHNob3RzX21ldHJpY3MiLCJzbSIsImdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyIsInNlbGVjdF9tZXRyaWMiLCJ1cmxfcGFyYW1ldGVycyIsInRpbWVzZXJpZXNfdXJsX3BhcmFtcyIsImdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcyIsImxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSIsInJlZnJlc2hfbWV0cmljcyIsImVwb2NoX2NoYW5nZSIsIm5ld19lcG9jaCIsImlzX250b3BfcHJvIiwic2VsZWN0ZWRfdG9wX3RhYmxlIiwidGFibGVfY29uZmlnX2RlZiIsImdldF90b3BfdGFibGVfdXJsIiwicmVmcmVzaF90b3BfdGFibGUiLCJjaGFydF9yZWxvYWRlZCIsInNob3dfbWFuYWdlX3RpbWVzZXJpZXMiLCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJjaGFydF9pbmRleCIsInRzX2NoYXJ0c19vcHRpb25zIiwicmVmcmVzaF9zbmFwc2hvdHMiLCJhcHBseV9tb2RhbF90aW1lc2VyaWVzIiwiY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGUiLCJyZWxvYWRfY2hhcnRzX2RhdGEiLCJyZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMiLCJyZWZyZXNoZWRfdGltZV9pbnRlcnZhbCIsImdldF90c19jb21wYXJlIiwidHNfb3B0aW9ucyIsInNldF90aW1lc2VyaWVzX2dyb3Vwc19zb3VyY2VfbGFiZWwiLCJjaGFydHNfb3B0aW9ucyIsInVwZGF0ZV9jaGFydHMiLCJzZXRfY2hhcnRzX29wdGlvbnNfaXRlbXMiLCJleHRlbmRfc2VyaWVfbmFtZSIsImRpc2FibGVfc3RhdHMiLCJmX2dldF90b3RhbF9mb3JtYXR0ZXJfdHlwZSIsIm1hcF90eXBlIiwic3RhdHNfcm93cyIsInRzX3N0YXRzIiwidG90YWxfZm9ybWF0dGVyX3R5cGUiLCJ0b3RhbF9mb3JtYXR0ZXIiLCJhdmVyYWdlIiwibWF4X3ZhbCIsIm1pbl92YWwiLCJzZXRfc3RhdHNfcm93cyIsInRzX2dyb3VwX2RpY3QiLCJ0b3BfdGFibGVfaWRfZGljdCIsInRvcF90YWJsZV9vcHRpb25zIiwibWFpbl9zb3VyY2UiLCJzb3VyY2VfdHlwZV90YWJsZXMiLCJlbmFibGVzX3RhYmxlX3ZhbHVlIiwic291cmNlc190eXBlc190b3BfZW5hYmxlZCIsInJlbmRlcl9pZl9jb250ZXh0Iiwic2V0X3RvcF90YWJsZV9vcHRpb25zIiwidGFibGVfdmlldyIsInBfb2JqIiwiZGV0YWlsX3ZpZXciLCJuZXdfY2hhcnRzIiwianVtcF90b19oaXN0b3JpY2FsX2Zsb3dzIiwiaGlzdG9yaWNhbF91cmwiLCJzaG93X21vZGFsX2Rvd25sb2FkX2ZpbGUiLCJjaGFydF9pbWFnZV9hcnJheV9wcm9taXNlIiwiY2FudmFzIiwiSW1hZ2UiLCJyZWplY3QiLCJjaGFydF9pbWFnZV9hcnJheSIsImNhbnZhc19jb250ZXh0IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInNjcmlwdCQxNSIsInRhYl9saXN0Iiwib2xkX3RhYiIsInRtcCIsImNoYW5nZV90YWIiLCJib2R5X2RlbGV0ZSIsInRpdGxlX2RlbGV0ZSIsImRlbGV0ZV8iLCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50Iiwic2NyaXB0JDEzIiwiZGF0YXRhYmxlIiwiRGF0YXRhYmxlIiwiTW9kYWxEZWxldGVDb25maXJtIiwiVGFiTGlzdCIsInBhZ2VfY3NyZiIsInRhYmxlX2ZpbHRlcnMiLCJhc3NldF9mYW1pbHkiLCJhc3NldF90YWJsZV90YWIiLCJzZXJ2aWNlX3RhYmxlX3RhYiIsIkRhdGF0YWJsZVZ1ZSIsImRhdGF0YWJsZUJ1dHRvbiIsImdldF91cmwiLCJyZWxvYWRfdGFibGUiLCJ0bXBfcGFyYW1zIiwiZGVmYXVsdERhdGF0YWJsZUNvbmZpZyIsImNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rIiwiY29uZmlnRGV2aWNlcyIsImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkIiwiY2VudHJhbGl0eUNvbmZpZ0RldmljZXMiLCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5Iiwic3RhcnRfZGF0YXRhYmxlIiwiaGlkZV9kcm9wZG93bnMiLCJnZXRfYWN0aXZlX3RhYmxlIiwic2hvd19kZWxldGVfYWxsX2RpYWxvZyIsInRpdGxlX2Rvd25sb2FkIiwiYm9keV9kb3dubG9hZCIsImNsaWNrX2l0ZW0iLCJoaXN0b3JpY2FsX2Zsb3dfbGluayIsImNsaWVudF9pcCIsImNsaWVudCIsInNlcnZlcl9pcCIsInNlcnZlciIsImhpc3RvcmljYWxfZmxvdyIsIl9jb21wb25lbnRfbW9kYWxfZGVsZXRlX2NvbmZpcm0iLCJvbkRlbGV0ZSIsIl9jb21wb25lbnRfdGFiX2xpc3QiLCJvbkNsaWNrX2l0ZW0iLCJfY29tcG9uZW50X2RhdGF0YWJsZSIsInNjcmlwdCQxMiIsImlzX2FkbWluIiwibGFzdF9zZWVuIiwibGl2ZV9mbG93X2xpbmsiLCJsaXZlX2Zsb3ciLCJkZWZhdWx0T3B0aW9ucyIsImF1dG9SZXNpemUiLCJzaGFwZSIsInNjYWxpbmciLCJkcmF3VGhyZXNob2xkIiwiZm9udCIsInNoYWRvdyIsImVkZ2VzIiwiaW5oZXJpdCIsInNtb290aCIsInJvdW5kbmVzcyIsInNjYWxlRmFjdG9yIiwiYXJyb3dTdHJpa2V0aHJvdWdoIiwiaW1wcm92ZWRMYXlvdXQiLCJpbnRlcmFjdGlvbiIsImhpZGVFZGdlc09uRHJhZyIsImhpZGVFZGdlc09uWm9vbSIsImhvdmVyIiwidG9vbHRpcERlbGF5IiwicGh5c2ljcyIsInNvbHZlciIsInN0YWJpbGl6YXRpb24iLCJpdGVyYXRpb25zIiwiZm9yY2VBdGxhczJCYXNlZCIsImNlbnRyYWxHcmF2aXR5Iiwic3ByaW5nTGVuZ3RoIiwidW5rbm93biIsInByaW50ZXIiLCJmYWNlIiwid2VpZ2h0IiwidmlkZW8iLCJ3b3Jrc3RhdGlvbiIsImxhcHRvcCIsInRhYmxldCIsInBob25lIiwidHYiLCJuZXR3b3JraW5nIiwid2lmaSIsIm5hcyIsIm11bHRpbWVkaWEiLCJpb3QiLCJudG9wbmdfbWFwX21hbmFnZXIiLCJzZXJ2aWNlX2lkIiwibmV3X3N0YXRlIiwic2VydmljZV9zdGF0dXMiLCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQiLCJzY3JpcHQkMTEiLCJzZXJ2aWNlX2FjY2VwdGFuY2UiLCJjcmVhdGVkQ2VsbCIsImFwcGx5Q2VsbFN0eWxlIiwiY3JlYXRlX2FjdGlvbl9idXR0b25zIiwidG9nZ2xlX2FsbG93ZWRfc3RhdGUiLCJoYXNoX2lkIiwidG9nZ2xlX2RlbmllZF9zdGF0ZSIsInRvZ2dsZV91bmRlY2lkZWRfc3RhdGUiLCJjdXJyZW50U3RhdHVzIiwiYWNjZXB0YW5jZSIsImFsbG93ZWRCdXR0b24iLCJkZW5pZWRCdXR0b24iLCJ1bmRlY2lkZWRCdXR0b24iLCJzd2l0Y2hfdG9fc3RhbmRhcmQiLCJzd2l0Y2hfdG9fY2VudHJhbGl0eSIsImRhdGFSZXF1ZXN0IiwibWFwX2lkIiwibm9kZXNfZGF0YXNldCIsImVkZ2VzX2RhdGFzZXQiLCJoaWdobGlnaHRBY3RpdmUiLCJtYXhfZW50cmllc19yZWFjaGVkIiwiZW1wdHlfbWFwIiwiZGF0YXNldHMiLCJhbGxfbm9kZXMiLCJnZXRFbGVtZW50QnlJZCIsImxvYWRfc2NhbGUiLCJyZXF1ZXN0X2luZm8iLCJOZXR3b3JrIiwic2V0X2V2ZW50X2xpc3RlbmVyIiwibWF4X2VudHJ5X3JlYWNoZWQiLCJEYXRhU2V0IiwiZ2VuZXJhdGVfaHRtbF90b29sdGlwIiwicmV0dXJuVHlwZSIsImVtcHR5X25ldHdvcmsiLCJvbGRTY2FsZSIsImxvYWRFbGVtZW50U2NhbGUiLCJzYXZlRWxlbWVudFNjYWxlIiwic2V0T3B0aW9ucyIsInNlbGVjdGVkTm9kZSIsIm5vZGVJZCIsIm9sZF9jb2xvciIsIm9sZF9pY29uX2NvbG9yIiwiaGlkZGVuTGFiZWwiLCJjb25uZWN0ZWROb2RlcyIsImdldENvbm5lY3RlZE5vZGVzIiwiYWxsQ29ubmVjdGVkTm9kZXMiLCJ1cGRhdGVBcnJheSIsIm5laWdoYm91cmhvb2RIaWdobGlnaHQiLCJob3N0X2luZm8iLCJldmVudF9saXN0ZW5lcnMiLCJzZXREYXRhIiwiaXNfbWF4X2VudHJ5X3JlYWNoZWQiLCJhdXRvbGF5b3V0Iiwic3RhYmlsaXplIiwidXBkYXRlX3VybF9wYXJhbXMiLCJhdXRvbGF5b3V0XyIsImNoYW5nZV9maWx0ZXJfZXZlbnQiLCJzY3JpcHQkXyIsIk5ldHdvcmtNYXAiLCJNb2RhbEF1dG9sYXlvdXRDb25maXJtIiwiYWxsX2ZpbHRlcl9saXN0IiwiTmV0d29ya01hcFZ1ZSIsImZpbHRlcl9uYW1lIiwiZmlsdGVyX2xpc3QiLCJhY3RpdmVfZmlsdGVyIiwiYWN0aXZlX2ZpbHRlcl9saXN0IiwiZG93bmxvYWRfdXJsIiwic3RhcnRfdmlzX25ldHdvcmtfbWFwIiwicmVsb2FkX21hcCIsImZpbHRlcl9lbCIsInVwZGF0ZV9hbmRfcmVsb2FkX21hcCIsImdldF9tYXAiLCJzaG93X2F1dG9sYXlvdXRfZGlhbG9nIiwidXBkYXRlX3ZpZXdfc3RhdGVfaWQiLCJ0aXRsZV9hdXRvbGF5b3V0IiwiYm9keV9hdXRvbGF5b3V0Iiwibm9fc2VydmljZXNfbWVzc2FnZSIsIm1heF9lbnRyeV90aXRsZSIsIl9jb21wb25lbnRfbW9kYWxfYXV0b2xheW91dF9jb25maXJtIiwib25BdXRvbGF5b3V0IiwiX2NvbXBvbmVudF9uZXR3b3JrX21hcCIsImVtcHR5X21lc3NhZ2UiLCJzY3JpcHQkWiIsInVwZGF0ZWRfdXJsX3BhcmFtcyIsInNjcmlwdCRZIiwiaW5wdXRfbWFjX2xpc3QiLCJpbnB1dF90cmlnZ2VyX2FsZXJ0cyIsImFkZF8iLCJtYWNfbGlzdCIsInRyaWdnZXJfYWxlcnRzIiwiaW5wdXRfbWFjX2FkZHJlc3NfbmFtZSIsImlucHV0X2RldmljZV9zdGF0dXMiLCJjdXN0b21fbmFtZV9wbGFjZWhvbGRlciIsImRldmljZV9zdGF0dXNfbGlzdCIsImVkaXRfYWxsIiwiZWRpdF8iLCJtYWNfYWxpYXMiLCJtYWNfc3RhdHVzIiwidG1wX2RldmljZV9zdGF0dXMiLCJ0cmlnZ2VyX2FsZXJ0IiwidGFibGVfZGV2aWNlX2V4Y2x1c2lvbnMiLCJtb2RhbF9kZWxldGVfY29uZmlybSIsIm1vZGFsX2RlbGV0ZV9hbGwiLCJtb2RhbF9hZGRfZGV2aWNlIiwibW9kYWxfZWRpdF9kZXZpY2UiLCJhZGRfdXJsIiwiZGVsZXRlX3VybCIsImVkaXRfdXJsIiwibGVhcm5pbmdfc3RhdHVzX3VybCIsImlzX2xlYXJuaW5nX3N0YXR1cyIsInRpdGxlX2RlbGV0ZV9hbGwiLCJib2R5X2RlbGV0ZV9hbGwiLCJ0aXRsZV9hZGQiLCJib2R5X2FkZCIsImZvb3Rlcl9hZGQiLCJsaXN0X25vdGVzX2FkZCIsInRpdGxlX2VkaXQiLCJ0aXRsZV9lZGl0X2FsbCIsImxlYXJuaW5nX21lc3NhZ2UiLCJyb3dfdG9fZGVsZXRlIiwicm93X3RvX2VkaXQiLCJjbGlja19idXR0b25fZWRpdF9kZXZpY2UiLCJjbGlja19idXR0b25fZGVsZXRlIiwibGVhcm5pbmdfc3RhdHVzIiwiY3JzZiIsImRlbGV0ZV9yb3ciLCJkZWxldGVfYWxsX2NvbmZpcm0iLCJlZGl0X2FsbF9kZXZpY2VzX2NvbmZpcm0iLCJsZWFybmluZ19kb25lIiwiYWRkX2RldmljZSIsImFkZF9kZXZpY2VfcmVzdCIsInNldF9wYXJhbXNfaW5fdXJsIiwiZWRpdF9yb3ciLCJjb2x1bW5zX3NvcnRpbmciLCJ0YWtlX2lwIiwiY29udmVydElQQWRkcmVzcyIsImZvcm1hdF9ib29sIiwicl9jb2wiLCJzeW1ib2xpY19tYWMiLCJpc19lbmFibGVkIiwibWFwX2NvbmZpZyIsInNjcmlwdCRVIiwic2NyaXB0JFQiLCJjaGFuZ2VfbWFwX2V2ZW50Iiwic2NyaXB0JFMiLCJQYWdlUGVyaW9kaWNpdHlNYXAiLCJQYWdlUGVyaW9kaWNpdHlUYWJsZSIsIlBhZ2VBc3NldE1hcCIsIlBhZ2VBc3NldFRhYmxlIiwiUGFnZVNlcnZpY2VNYXAiLCJQYWdlU2VydmljZVRhYmxlIiwiUGFnZU5hdmJhciIsImJhc2VfdXJsX3BhcmFtcyIsIm5hdmJhcl9pbmZvIiwic2VydmljZV9tYXBfZmlsdGVyX2xpc3QiLCJzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0IiwicGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0IiwicGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3QiLCJhc3NldF9tYXBfZmlsdGVyX2xpc3QiLCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdCIsImFjdGl2ZV90YWIiLCJ1cGRhdGVkX3ZpZXciLCJuYXZiYXJfY29udGV4dCIsImZvcm1hdF9uYXZiYXIiLCJmb3JtYXRfbmF2YmFyX3RpdGxlIiwic2VsZWN0ZWRfaWZhY2UiLCJzZWxlY3RlZF9ob3N0IiwibmF2YmFyX25vZGUiLCJnZXRfYWN0aXZlX3RhYiIsInJlbW92ZVZsYW4iLCJmb3JtYXROYW1lVmFsdWUiLCJpc19hY3RpdmUiLCJ0YXJnZXRfYmxhbmsiLCJfY29tcG9uZW50X3BhZ2VfbmF2YmFyIiwiX2NvbXBvbmVudF9wYWdlX3NlcnZpY2VfbWFwIiwiX2NvbXBvbmVudF9wYWdlX3NlcnZpY2VfdGFibGUiLCJfY29tcG9uZW50X3BhZ2VfcGVyaW9kaWNpdHlfbWFwIiwiX2NvbXBvbmVudF9wYWdlX3BlcmlvZGljaXR5X3RhYmxlIiwiX2NvbXBvbmVudF9wYWdlX2Fzc2V0X21hcCIsInNhbmtleV9jaGFydF9yZWYiLCJzYW5rZXlfc2l6ZSIsImdldF9zYW5rZXlfZGF0YSIsIm5vZGVzX2FkZGVkX2RpY3QiLCJmX2FkZF9ub2RlIiwibm9kZV9pZCIsIm5ld19ub2RlIiwiZl9hZGRfbGluayIsIm5ld19saW5rIiwic291cmNlX2xpbmsiLCJzb3VyY2VfY29sb3IiLCJ0YXJnZXRfbGluayIsInRhcmdldF9jb2xvciIsIndyYXBfZ3JhcGhfcnNwIiwibGlua19jb2xvciIsInRhcmdldF9ub2RlIiwic291cmNlX25vZGUiLCJzY2FsZU9yZGluYWwiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRfc2l6ZSIsInNhbmtleSIsIm5vZGVBbGlnbiIsInNhbmtleUNlbnRlciIsIm5vZGVXaWR0aCIsIm5vZGVQYWRkaW5nIiwiZXh0ZW50Iiwic2Fua2V5aW1wbCIsImNhbGN1bGF0ZV9zYW5rZXkiLCJ4MCIsInkwIiwiZWFzZUxpbmVhciIsInJnYiIsImRhcmtlciIsImxnIiwic2Fua2V5TGlua0hvcml6b250YWwiLCJkcmF3X3NhbmtleSIsImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50Iiwic2NyaXB0JFEiLCJDaGFydCIsImlzX2NoX2VuYWJsZWQiLCJpc19sb2NhbGUiLCJ0c19sN19lbmFibGVkIiwidHNfY2F0X2VuYWJsZWQiLCJhcHBsaWNhdGlvbnNfdGFiIiwiUGFnZVZ1ZSIsInBlcmNlbnRhZ2Vfc2VudCIsImJ5dGVzX3NlbnQiLCJ0b3RfYnl0ZXMiLCJwZXJjZW50YWdlX3JjdmQiLCJieXRlc19yY3ZkIiwiY3JlYXRlQnJlYWtkb3duIiwiYWRkX2FjdGlvbl9jb2x1bW4iLCJhcHBsaWNhdGlvbnNDb25maWciLCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMiLCJjYXRlZ29yeV9pZCIsIm1vcmVfcHJvdG9zIiwiY2F0ZWdvcmllc0NvbmZpZyIsImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMiLCJjaGFydF9vcHRpb24iLCJ0cmFmZmljX3RhYmxlIiwiY29uZmlnX3RyYWZmaWNfdGFibGUiLCJ0cmFmZmljQ29uZmlnIiwiY2hhcnRfZG9uZSIsInRtcDIiLCJub2RlX3dpZHRoIiwibm9fZGF0YSIsInNldF9zYW5rZXlfZGF0YSIsInNhbmtleV9kYXRhIiwic2Fua2V5RGF0YSIsImQzX25vZGVzIiwic2NhbGVFeHRlbnQiLCJ6b29tZWQiLCJkYXRhX29iaiIsInN1YmplY3QiLCJkcmFnU3RhcnQiLCJkcmFnTW92ZSIsImxpbmtzX2QzIiwibGdfZDMiLCJfX3giLCJfX3kiLCJfX3gwIiwiX195MCIsIl9feDEiLCJfX3kxIiwic2V0X25vX2RhdGFfZmxhZyIsInNldF9ub19kYXRhIiwic2Fua2V5X2NoYXJ0Iiwic2Fua2V5X2Zvcm1hdF9saXN0IiwiZmlsdGVyX2ljb24iLCJhY3RpdmVfaG9zdHNfdHlwZSIsIm9uX25vZGVfY2xpY2siLCJpc19saW5rX25vZGUiLCJ1cmxfb2JqIiwidXBkYXRlX3NhbmtleSIsImVudHJ5IiwiaG9zdHNfdHlwZSIsImdldF9zYW5rZXlfdXJsIiwiZ3JhcGgiLCJmX2xvZ19saW5rIiwic291cmNlX25vZGVfaWQiLCJ0YXJnZXRfbm9kZV9pZCIsImZfbG9nIiwibm9kZV9kaWN0IiwiZl9maWx0ZXIiLCJ0YWtlX2VsZW1lbnQiLCJmaWx0ZXJfbG9nIiwiZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZSIsIm1ha2VfY29tcGxldGVfZ3JhcGgiLCJtYWluX25vZGVfaWQiLCJmX2dldF9saW5rX2RpcmVjdGlvbiIsImZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkIiwiZGlyZWN0aW9uIiwiZ3JhcGgyX25vZGVfZGljdCIsImdyYXBoMiIsIm1haW5fbm9kZSIsImZfZ2V0X2xpbmtfbm9kZV9pZCIsImxpbmtfdG9fbm9kZXNfZGljdCIsImxpbmtfbm9kZV9pZCIsImxpbmtfdG9fbm9kZXMiLCJub2RlX2xpbmtzIiwiZ2V0X2xpbmtfdmFsdWUiLCJsaW5rX25vZGUiLCJzYW5rZXlfbm9kZV9kaWN0Iiwic2Fua2V5X25vZGVzIiwic2Fua2V5X25vZGUiLCJzYW5rZXlfbGlua3MiLCJnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEiLCJ0cmFmZmljIiwiZGF0YVV0aWxzIiwiaXNFbXB0eU9yTnVsbCIsImlzRW1wdHlBcnJheU9yTnVsbCIsImhhc19ob3N0X3Bvb2xzIiwiaGFzX2NpZHIiLCJob3N0X3BsYWNlaG9sZGVyIiwibWV0cmljc19yZWFkeSIsIm1ldHJpY19saXN0IiwiaW5pdF9mdW5jIiwiaWZpZF9saXN0IiwiZmxvd19leHBvcnRlcl9kZXZpY2VzIiwiZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0IiwiaW50ZXJmYWNlX21ldHJpY19saXN0IiwiaG9zdF9wb29sX21ldHJpY19saXN0IiwiZmxvd19kZXZpY2VfbWV0cmljX2xpc3QiLCJmcmVxdWVuY3lfbGlzdCIsInRocmVzaG9sZF9tZWFzdXJlIiwidGhyZXNob2xkX3NpZ24iLCJzZWxlY3RlZF9mcmVxdWVuY3kiLCJzZWxlY3RlZF9pZmlkIiwic2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlIiwic2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlX2lmaWQiLCJzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljIiwic2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYyIsInNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYyIsIm1ldHJpY190eXBlIiwicnVsZV90eXBlIiwiZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUiLCJpc19lZGl0X3BhZ2UiLCJwYWdlX2NzcmZfIiwicm93X3RvX2VkaXRfaWQiLCJpbnZhbGlkX2FkZCIsImhvc3RfcG9vbF9saXN0IiwibmV0d29ya19saXN0Iiwic2VsZWN0ZWRfaG9zdF9wb29sIiwic2VsZWN0ZWRfbmV0d29yayIsInNlbGVjdGVkX25ldHdvcmtfbWV0cmljIiwibmV0d29ya19tZXRyaWNfbGlzdCIsImFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0IiwibWV0cmljX3R5cGVfbGlzdCIsInBvb2xfbWV0cmljX3R5cGVfbGlzdCIsInZvbHVtZV90aHJlc2hvbGRfbGlzdCIsImRlZmF1bHRfYWN0aXZlIiwidGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCIsInNpZ25fdGhyZXNob2xkX2xpc3QiLCJwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0IiwidGhyZXNob2xkIiwicmVzZXRfcmFkaW9fc2VsZWN0aW9uIiwicmFkaW9fYXJyYXkiLCJzZXRfcnVsZV90eXBlIiwiY2hhbmdlX21ldHJpY190eXBlX2hwIiwic2V0X2FjdGl2ZV9vbmUiLCJ0bXBfbWV0cmljX3R5cGVfbGlzdCIsImNoZWNrX2VtcHR5X2hvc3QiLCJzZXRfYWN0aXZlX3NpZ25fcmFkaW8iLCJzZWxlY3RlZF9yYWRpbyIsIm1lYXN1cmUiLCJzZXRfYWN0aXZlX3JhZGlvIiwiaXNfZWRpdCIsInRtcF9ob3N0IiwidG1wX2ZyZXF1ZW5jeSIsInRtcF9tZXRyaWMiLCJ0bXBfbWV0cmljX2xhYmVsIiwidG1wX2ludGVyZmFjZV9tZXRyaWMiLCJ0bXBfcnVsZV90eXBlIiwidG1wX2ludGVyZmFjZSIsInRtcF9pbnRlcmZhY2VfbmFtZSIsImJhc2ljX3ZhbHVlIiwiYmFzaWNfc2lnbl92YWx1ZSIsInRtcF90aHJlc2hvbGQiLCJ0bXBfc2lnbl92YWx1ZSIsInRtcF9tZXRyaWNfdHlwZSIsInRtcF9leHRyYV9tZXRyaWMiLCJleHRyYV9tZXRyaWMiLCJ0bXBfZWRpdF9yb3dfaWQiLCJlbWl0X25hbWUiLCJmcmVxdWVuY3kiLCJtZXRyaWNfbGFiZWwiLCJydWxlX3RocmVzaG9sZF9zaWduIiwicnVsZV9pZCIsImZsb3dfZGV2aWNlX2lmaW5kZXgiLCJmbG93X2RldmljZV9pZmluZGV4X25hbWUiLCJmbG93X2RldmljZV9pcCIsIm1ldHJpY19leHAiLCJtZXRyaWNfZXhwX2xhYmVsIiwibmV0d29ya19pZCIsInRtcF9ob3N0X3Bvb2xfaWQiLCJ0bXBfaG9zdF9wb29sX2xhYmVsIiwiaG9zdF9wb29sX2lkIiwiaG9zdF9wb29sX2xhYmVsIiwicm93X3RocmVzaG9sZF92YWx1ZSIsImZsb3dfZXhwX2lmaWQiLCJjb250YWlucyIsInNldF9yb3dfdG9fZWRpdCIsInVybF9kZXZpY2VfZXhwb3J0ZXJfZGV0YWlscyIsImRldGFpbHMiLCJpZmlkcyIsImV4cG9ydGVyX2lmaWRzIiwidGltZXNlcmllc19hdmFpbGFibGUiLCJyZXNwIiwiaWZpbmRleCIsInZhbGUiLCJyZXNldF9tb2RhbF9mb3JtIiwibWV0cmljc0xvYWRlZCIsIl9tZXRyaWNfbGlzdCIsIl9pZmlkX2xpc3QiLCJfaW50ZXJmYWNlX21ldHJpY19saXN0IiwiX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlcyIsIl9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QiLCJfaW5pdF9mdW5jIiwiX2RlbGV0ZV9yb3ciLCJfaG9zdF9wb29sX2xpc3QiLCJfbmV0d29ya19saXN0IiwiX2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsIl9uZXR3b3JrX21ldHJpY19saXN0IiwiZm9ybWF0X2lmaWRfbGlzdCIsIl9mX2V4cF9kZXZfbGlzdCIsImRldiIsImNvbHVtbl9pcCIsImZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0IiwiaW52YWxpZEFkZCIsInNob3dfdm9sdW1lIiwidGFibGVfaG9zdF9ydWxlcyIsIm1vZGFsX2FkZF9ob3N0X3J1bGUiLCJtZXRyaWNfdXJsIiwibWV0cmljX2lmbmFtZV91cmwiLCJtZXRyaWNfaG9zdF9wb29sX3VybCIsIm1ldHJpY19uZXR3b3JrX3VybCIsIm1ldHJpY19mbG93X2V4cF9kZXZpY2VfdXJsIiwiZmxvd19kZXZpY2VzX3VybCIsImhvc3RfcG9vbF91cmwiLCJuZXR3b3JrX2xpc3RfdXJsIiwiaWZpZF91cmwiLCJhZGRfcnVsZV91cmwiLCJyZW1vdmVfcnVsZV91cmwiLCJndWkiLCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyIsImZsb3dfZXhwb3J0ZXJfbGlzdCIsImZsb3dfZXhwb3J0ZXJfbWV0cmljX2xpc3QiLCJlZGl0IiwiYWRkX2hvc3RfcnVsZSIsImluaXRfZWRpdCIsImRlbGV0ZV9oYW5kbGVyIiwiZWRpdF9oYW5kbGVyIiwiZm9ybWF0dGVkX2RhdGEiLCJmbG93X2V4cF9pZmlkX25hbWUiLCJmb3JtYXRfdGFyZ2V0IiwiZm9ybWF0X3J1bGVfdHlwZSIsImZvcm1hdF9tZXRyaWMiLCJmcmVxdWVuY3lfdGl0bGUiLCJmb3JtYXRfZnJlcXVlbmN5IiwiYml0c1RvU2l6ZSIsImZwZXJjZW50IiwiZm9ybWF0X2xhc3RfbWVhc3VyZW1lbnQiLCJmb3JtYXRfdGhyZXNob2xkIiwiaG9zdFJ1bGVzVGFibGVDb25maWciLCJnZXRfbWV0cmljX2xpc3QiLCJnZXRfaWZpZF9saXN0IiwiZ2V0X2ludGVyZmFjZV9tZXRyaWNfbGlzdCIsImdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QiLCJnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX2xpc3QiLCJ0bXBfaG9zdF9wb29sX2xpc3QiLCJnZXRfaG9zdF9wb29sX2xpc3QiLCJ0bXBfaG9zdF9wb29sX21ldHJpY19saXN0IiwiZ2V0X2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsInRtcF9uZXR3b3JrX2xpc3QiLCJnZXRfbmV0d29ya19saXN0IiwidG1wX25ldHdvcmtfbWV0cmljX2xpc3QiLCJnZXRfbmV0d29ya19tZXRyaWNfbGlzdCIsInRhYmxlX29wdGlvbnMiLCJwb3J0X2luZm8iLCJyZXN0X3VybCIsIndpZGdldF9uYW1lIiwiYnViYmxlX2NoYXJ0IiwiZm9ybWF0X3JlcXVlc3QiLCJwYXJhbXNfc3RyaW5nIiwiYnViYmxlX21vZGUiLCJ0aW1lZnJhbWUiLCJtb2RlX2lkIiwib3B0aW9uX2xpc3QiLCJudG9wX2V2ZW50cyIsImZ1biIsImZub25lIiwiZm9ybWF0X29wdGlvbnMiLCJhdmFpbGFibGVfZmlsdGVycyIsIm5vX2RhdGFfbWVzc2FnZSIsImJvZHlfZGl2IiwibGl2ZV9yZXN0IiwiaGlzdG9yaWNhbF9yZXN0IiwidXBkYXRlX2hlaWdodCIsInVwZGF0ZV93aWR0aCIsImw0cHJvdG8iLCJjaGVja19tYXhfZW50cmllcyIsIm9wdGlvbmFsX2luZm8iLCJjcml0ZXJpYV9saXN0X2RlZiIsImVudGVycHJpc2VfbSIsInNlYXJjaF9lbmFibGVkIiwidGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzIiwiZmlsdGVyX3RhYmxlX2FycmF5IiwiZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5Iiwic2VsZWN0ZWRfY3JpdGVyaWEiLCJjcml0ZXJpYV9saXN0IiwiaXNfbnRvcF9lbnRlcnByaXNlX20iLCJjcml0ZXJhX2xpc3RfZGVmX2NvbSIsInVwZGF0ZV9jcml0ZXJpYSIsImFnZ3JlZ2F0aW9uX2NyaXRlcmlhIiwiaW5pdF9zZWxlY3RlZF9jcml0ZXJpYSIsImxvYWRfdGFibGVfZmlsdGVyc19hcnJheSIsInNldF9maWx0ZXJfYXJyYXlfbGFiZWwiLCJsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXciLCJkZXZpY2VJUCIsImJhc2ljX2xhYmVsIiwidXJsX2VudHJ5IiwiZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duIiwiZmlsdGVyX2luZGV4IiwibmV3X2ZpbHRlcl9hcnJheSIsImxvYWRfdGFibGVfZmlsdGVycyIsImlmaWRfcGFyYW0iLCJpZmlkX3BhcmFtX2Zvcl91cmwiLCJmb3JtYXRfZmxvd3NfaWNvbiIsImZvcm1hdF9hcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkIiwiZm9ybWF0X2NsaWVudF9uYW1lIiwiZm9ybWF0X3NlcnZlcl9uYW1lIiwidmxhbnMiLCJwZXJjZW50YWdlX2J5dGVzX3NlbnQiLCJwZXJjZW50YWdlX2J5dGVzX3JjdmQiLCJhbGVydF9sYWJlbCIsImlzX2FsZXJ0ZWQiLCJpbl9tZW1vcnkiLCJleHRyYV9sYWJlbHMiLCJhZGRfaG9zdCIsImFwcGxpY2F0aW9uIiwibGFiZWxfd2l0aF9pY29ucyIsImNvbmZpZGVuY2VfbmFtZSIsInRhYmxlX3Rlc3QiLCJzZXRfZGF0YXRhYmxlX2NvbmZpZyIsInR5cGVfYXJyYXkiLCJkZWZhdWx0X2RpcmVjdGlvbl92YWx1ZSIsImRpcmVjdGlvbnMiLCJiaWRpcmVjdGlvbmFsIiwic2VsZWN0ZWRfZGlyZWN0aW9uIiwiZGVmYXVsdF9hY3Rpb25fdmFsdWUiLCJzZWxlY3RlZF9hY3Rpb24iLCJuZXdfcnVsZV9pZCIsInNvdXJjZV9yZWdleCIsInNlbGVjdGVkX2Rlc3RfdHlwZSIsImRlc3RfcmVnZXgiLCJkZXN0IiwiaW50ZXJmYWNlX2xpc3RfdXJsIiwiaW50ZXJmYWNlX2xpc3QiLCJpbnRlcmZhY2VfYXJyYXkiLCJzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlIiwic2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UiLCJidXR0b25fdGV4dCIsImlzX3ZhbGlkX3NvdXJjZSIsImlzX3ZhbGlkIiwiaXNfdmFsaWRfZGVzdCIsImlzX29wZW5faW5fYWRkIiwic2V0X2ludGVyZmFjZV9hcnJheSIsImNoYW5nZV9kZXN0X3R5cGUiLCJkZXN0aW5hdGlvbiIsInNlbGVjdGVkX3R5cGUiLCJpc19zZXRfaW50ZXJmYWNlX2FycmF5IiwicmVzX2ludGVyZmFjZV9saXN0IiwicmciLCJzcmNfdHlwZSIsInNyY192YWx1ZSIsImRzdF90eXBlIiwiZHN0X3ZhbHVlIiwicG9saWN5IiwiZGVmYXVsdF9hY3Rpb24iLCJkZWZhdWx0X3R5cGUiLCJ0aW1lb3V0X2RlbGV0ZSIsInRhYmxlX3J1bGVzIiwibW9kYWxfYWRkX3J1bGVfY29uZmlnIiwibW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5IiwiZGVmYXVsdF9wb2xpY3kiLCJlZGl0X3J1bGUiLCJydWxlIiwic2V0X3J1bGUiLCJhZGRfcnVsZSIsImxvYWRfZGVmYXVsdF9wb2xpY3kiLCJnZXRfcG9saWN5X3VybCIsInNldF9kZWZhdWx0X3BvbGljeSIsInNldF9wb2xpY3lfdXJsIiwic2hvd19tb2RhbF9jaGFuZ2VfcG9saWN5Iiwid3JhcF9jb2x1bW5zX2NvbmZpZyIsImRlbGV0ZV9ydWxlIiwic2VsZWN0ZWRfY2F0ZWdvcnkiLCJjYXRlZ29yeV9saXN0IiwiY3VzdG9tX3J1bGVzIiwiYXBwbGljYXRpb25fbmFtZSIsImFwcGxpY2F0aW9uX2lkIiwiY2hlY2tfdmFsaWRhdGlvbiIsImNoZWNrX2FwcGxpY2F0aW9uX25hbWUiLCJjaGVja19jdXN0b21fcnVsZXMiLCJjaGVjayIsImw3X3Byb3RvX2lkIiwicHJvdG9jb2xfYWxpYXMiLCJlZGl0X3Jvd19jYXRlZ29yeSIsInBvcHVsYXRlX21vZGFsX2Zvcm0iLCJsb2FkQ2F0ZWdvcnlMaXN0IiwiZm9ybWF0dGVkX2xpc3QiLCJjYXRfaWQiLCJhcHBfbGlzdCIsImZvcm1hdF9jYXRlZ29yeV9saXN0IiwiX3JlbW92ZSIsImFwcGxpY2F0aW9uc190YWJsZSIsIm1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbiIsIm1vZGFsX2FkZF9hcHBsaWNhdGlvbiIsImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUiLCJ1cGRhdGVfbWVzc2FnZSIsImNhdGVnb3J5X2xpc3RfdXJsIiwiYWRkX2FwcGxpY2F0aW9uX3VybCIsImRlbGV0ZV9hcHBsaWNhdGlvbl91cmwiLCJzaG93X21lc3NhZ2UiLCJfYWRkIiwib3Blbl9hZGRfbW9kYWwiLCJfbWVzc2FnZSIsImhhc19wcm90b3NfZmlsZSIsImxvYWRfY2F0ZWdvcmllcyIsImZpbHRlcl9hcHAiLCJpc19jdXN0b20iLCJlcnJvcl9tZXNzYWdlIiwiZGlzY292ZXJ5X3JlcXVlc3RlZCIsIm5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlIiwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5IiwicHJvZ3Jlc3NfbWVzc2FnZSIsImxhc3RfbmV0d29ya19kaXNjb3ZlcnkiLCJkaXNjb3ZlcnlfcmVxdWVzdGVkX21lc3NhZ2UiLCJnaG9zdF9tZXNzYWdlIiwidG9vX21hbnlfZGV2aWNlc19tZXNzYWdlIiwiZ2hvc3RfbWVzc2FnZV9hZGRlZCIsInRpbWVvdXRfaWQiLCJkaXNjb3ZlcnlfdXJsIiwibmV0d29ya19kaXNjb3ZlcnlfZGF0YSIsInJ1bl9uZXR3b3JrX2Rpc2NvdmVyeSIsImNoZWNrRGlzY292ZXJ5IiwicHJvZ3Jlc3MiLCJnaG9zdF9mb3VuZCIsImFkZF9ub3RlcyIsInRhYmxlX21hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXAiLCJtc19kYXRhIiwiZG93bmxvYWRfYmFja3VwX2hhbmRsZXIiLCJzbm1wX21ldHJpY19saXN0Iiwic25tcF9kZXZpY2VzX2xpc3QiLCJzbm1wX2ludGVyZmFjZXNfbGlzdCIsImVuYWJsZV9pbnRlcmZhY2VzIiwic25tcF9pbnRlcmZhY2VzX3VybCIsInNlbGVjdGVkX3NubXBfZGV2aWNlIiwic2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UiLCJzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMiLCJtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdCIsInNpZ25fYWJzb2x1dGVfdmFsdWUiLCJjaGFuZ2VfaW50ZXJmYWNlcyIsImludGVyZmFjZV9pZCIsImxhYmVsX3RvX2luc2VydCIsImludGVyZmFjZXNfbGlzdCIsInJlc3VsdF9pbnRlcmZhY2VzIiwiaWZhY2UiLCJjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCIsImxpc3RfbWV0cmljc19hY3RpdmUiLCJ0bXBfZGV2aWNlIiwidG1wX2RldmljZV9sYWJlbCIsInRtcF9kZXZpY2VfaWZpZCIsInRtcF9kZXZpY2VfaWZpZF9sYWJlbCIsIm1lYXN1cmVfdW5pdF9sYWJlbCIsInNubXBfZGV2aWNlX2xhYmVsIiwic25tcF9kZXZpY2VfcG9ydCIsInNubXBfZGV2aWNlX3BvcnRfbGFiZWwiLCJzbm1wX3RocmVzaG9sZF92YWx1ZSIsInNubXBfdGhyZXNob2xkX3VuaXQiLCJzbm1wX21ldHJpY190eXBlX2xhYmVsIiwiZGV2aWNlX3BvcnQiLCJfc25tcF9kZXZpY2VzX2xpc3QiLCJfc25tcF9tZXRyaWNfbGlzdCIsImRldmljZXNfbGlzdCIsImZvcm1hdF9zbm1wX2RldmljZXNfbGlzdCIsIm1vZGFsX2FkZF9zbm1wX2RldmljZV9ydWxlIiwic25tcF9tZXRyaWNfdXJsIiwic25tcF9kZXZpY2VzX3VybCIsImRldmljZV9sYWJlbCIsImRldmljZV9wb3J0X2xhYmVsIiwiZm9ybWF0X2ludGVyZmFjZSIsImJpdHNUb1NpemVfbm9fY29tbWEiLCJnZXRfc25tcF9tZXRyaWNfbGlzdCIsInZlcmJvc2UiLCJnZXRfc25tcF9kZXZpY2VzX2xpc3QiLCJub3RlcyIsInNlbGVjdGVkX3BvcnQiLCJzZWxlY3RlZF9hcHBsaWNhdGlvbiIsInRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcyIsInBvcnRfbGlzdCIsImFwcGxpY2F0aW9uX2xpc3QiLCJsNF9wcm90byIsInVwZGF0ZV9kcm9wZG93bl9tZW51cyIsInVwZGF0ZV9wb3J0X2xpc3QiLCJ1cGRhdGVfcG9ydCIsInNldF9wb3J0X2luX3VybCIsImxpdmVfZmxvd3MiLCJpc19hcHBsaWNhdGlvbl9zZWxlY3RlZCIsImw3X3Byb3RvX25hbWUiLCJuX2hvc3RzIiwibnVtX2hvc3RzIiwiZm9ybWF0X2lwIiwiZm9ybWF0X2hvc3RfbmFtZSIsImZvcm1hdF9tYWMiLCJ0b3RfdHJhZmZpYyIsInBvcnRfcGxhY2Vob2xkZXIiLCJyZXBlYXRlcl90eXBlIiwiaW50ZXJmYWNlc19zZWFyY2giLCJjaGVja19lbXB0eV9wb3J0IiwicmVwZWF0ZXJfdHlwZV9hcnJheSIsInJlcGVhdGVyX2lkIiwiaW52YWxpZF9pZmFjZV9udW1iZXIiLCJzZWxlY3RlZF9yZXBlYXRlcl90eXBlIiwiYWxsX2NyaXRlcmlhIiwidXBkYXRlX2ludGVyZmFjZXNfc2VsZWN0ZWQiLCJyZW1vdmVfaW50ZXJmYWNlc19zZWxlY3RlZCIsImNoYW5nZV9yZXBlYXRlcl90eXBlIiwicmVwZWF0ZXJfdCIsImludGVyZmFjZXMiLCJpbnRlcmZhY2VfZGV0YWlscyIsInJvd19pbnRlcmZhY2VzIiwic2VsZWN0ZWRfaW50ZXJmYWNlcyIsInVwZGF0ZV9tdWx0aXBsZV92YWx1ZXMiLCJtb2RhbF9hZGRfcmVwZWF0ZXJfY29uZmlnIiwiZWRpdF9yZXBlYXRlciIsInJlcGVhdGVyIiwiYWRkX3JlcGVhdGVyIiwiZm9ybWF0X2ludGVyZmFjZXMiLCJyZXR1cm5fbWVzc2FnZSIsInNob3dfcmV0dXJuX21zZyIsImRlbGV0ZV9ob3N0Iiwic2VyaWFsX2tleSIsIm51bV9ob3N0c19tc2ciLCJkZWxldGVkX2hvc3RzIiwiX3Jvd19pZCIsInNlbGVjdGVkX2Vwb2NoIiwiZXBvY2hfbGlzdCIsInVwZGF0ZV9vcHRpb24iLCJzZWxlY3RlZF92YWx1ZSIsInNlbGVjdGVkX2Zvcm1hdCIsImZvcm1hdF9saXN0IiwidGFibGVfaW5hY3RpdmVfaG9zdHMiLCJtb2RhbF9kb3dubG9hZCIsIm1vZGFsX2RlbGV0ZV9vbGRlciIsImNoYXJ0XzEiLCJjaGFydF8yIiwiY2hhcnRfMyIsInNob3dfY2hhcnRzIiwiaW5hY3RpdmVfaG9zdHNfdGFiX2xpc3QiLCJjaGFuZ2Vfc2hvd19jaGFydHMiLCJpcF9hZGRyZXNzIiwiZGVsZXRlX2FsbF9lbnRyaWVzIiwiZGVsZXRlX2VudHJpZXNfc2luY2UiLCJkZXZpY2VfdHlwZSIsInByaW50X2h0bWxfdGl0bGUiLCJwcmludF9zdGF0c19yb3ciLCJob3N0X3N0YXRzIiwiY3VzdG9tX25hbWUiLCJwcmV2X25hbWUiLCJnZXRfZmxvd2Rldl9hbGlhc191cmwiLCJmbG93ZGV2X2lwIiwidXBkYXRlX2Zsb3dkZXZfYWxpYXNfdXJsIiwiZ2V0Rmxvd0RldkFsaWFzIiwidXBkYXRlRmxvd0RldkFsaWFzIiwiY2hlY2tEaXNhYmxlZCIsImRlbGV0ZV90eXBlIiwic2hvd19ub3RlX2xpc3QiLCJhdXRvbWF0aWNfc2Nhbl9mcmVxdWVuY2llc19saXN0Iiwic2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kiLCJ1cGRhdGVfIiwic2Nhbl9mcmVxdWVuY3kiLCJub19ob3N0X2ZlZWRiYWNrIiwicG9ydHNfcGxhY2Vob2xkZXIiLCJlbnRlcnByaXNlX25vdGVfbGlzdCIsInNlbGVjdGVkX3NjYW5fdHlwZSIsImhpZGVfcG9ydHNfcGxhY2Vob2xkZXIiLCJhY3RpdmF0ZV9hZGRfc3Bpbm5lciIsInNjYW5fdHlwZV9saXN0Iiwic2hvd19wb3J0X2ZlZWRiYWNrIiwiaXNfZW50ZXJwcmlzZV9sIiwiaXNfcG9ydF9jb3JyZWN0IiwiaXNfY2lkcl9jb3JyZWN0IiwiaXNfaG9zdF9jb3JyZWN0Iiwic2Nhbl9mcmVxdWVuY2llc19saXN0IiwiQ0lEUl8zMiIsImNpZHJfb3B0aW9uc19saXN0Iiwic2VsZWN0ZWRfY2lkciIsImlzX2RhdGFfbm90X29rIiwiY2hlY2tfaG9zdF9yZWdleCIsImlzX2lwdjQiLCJpc19pcHY2IiwiaXNfaG9zdF9uYW1lIiwiY2hlY2tfcG9ydHMiLCJob3N0X3BvcnRzIiwiaG9zdF9zY2FuX3R5cGUiLCJuZXdfaG9zdCIsIm5ld19ob3N0X25hbWVfcmVzb2x2ZWQiLCJyZXNvbHZlX2hvc3RfbmFtZV91cmwiLCJyZXNvbHZlX2hvc3RfbmFtZSIsInNjYW5fcG9ydHMiLCJjaWRyIiwic2Nhbl9pZCIsIl9ob3N0IiwiX3NjYW5fdHlwZV9saXN0IiwiX2lmaWQiLCJfaXNfZW50ZXJwcmlzZV9sIiwic2Nhbl90eXBlcyIsIm51bV92dWxuX2ZvdW5kX2YiLCJudW1fdnVsbl9mb3VuZCIsImlzX29rX2xhc3Rfc2NhbiIsImxhc3Rfc2NhbiIsIm1heF9zY29yZV9jdmVfZiIsIm1heF9zY29yZV9jdmUiLCJmb250X2NvbG9yIiwic2Nhbl90eXBlX2YiLCJsYXN0X3NjYW5fZiIsImR1cmF0aW9uX2YiLCJzY2FuX2ZyZXF1ZW5jeV9mIiwiaXNfb2tfbGFzdF9zY2FuX2YiLCJwb3J0c19saXN0X3N0cmluZyIsInBvcnRzX3N0cmluZyIsImdldF9udW1fb3Blbl9wb3J0c19pY29uIiwiZGlmZl9jYXNlIiwidW51c2VkX3BvcnRfbGlzdCIsImZpbHRlcmVkX3BvcnRfbGlzdCIsInVkcF9wb3J0c19mIiwidWRwX3BvcnRzIiwibnVtX29wZW5fcG9ydHMiLCJob3N0X2luX21lbSIsIm51bV9wb3J0c19pY29uIiwidWRwX3BvcnRzX2Nhc2UiLCJ1ZHBfcG9ydHNfdW51c2VkIiwidWRwX2ZpbHRlcmVkX3BvcnRzIiwidGNwX3BvcnRzX2YiLCJ0Y3BfcG9ydHMiLCJ0Y3BfcG9ydHNfY2FzZSIsInRjcF9wb3J0c191bnVzZWQiLCJ0Y3BfcG9ydHNfZmlsdGVyZWQiLCJnZXRfaWNvbl9jb21wb25lbnQiLCJwb3J0c191bnVzZWQiLCJwb3J0c19maXRlcmVkIiwicG9ydF9iYWRnZSIsImZpbmRfYmFkZ2UiLCJwb3J0c19maWx0ZXJlZCIsImljb25fY29tcCIsImJ1aWxkX2hvc3RfdG9fc2Nhbl9yZXBvcnRfdXJsIiwic2Nhbl9yZXR1cm5fcmVzdWx0Iiwic2Nhbl9kYXRlIiwiaG9zdF9mIiwiaG9zdF9ub3RfcmVhY2hhYmxlIiwiaXNfZG93biIsImZvcm1hdF9udW1fZm9yX3NvcnQiLCJub3JtYWxpemVfbnVtYmVyX3ZhbHVlIiwibG93ZXJfdmFsdWUiLCJzb3J0QnlOdW1iZXIiLCJ2YWxfMSIsInZhbF8yIiwic29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZSIsInNvcnRpbmdGdW5jdGlvbnMiLCJzb3J0QnlJUCIsInNvcnRCeU5hbWUiLCJpbnNlcnRfdGV4dCIsImFscmVhZHlfaW5zZXJ0X3RleHQiLCJpbl9wcm9ncmVzc19zY2FuX3RleHQiLCJlbmFibGVfY2xpY2tob3VzZV90ZXh0IiwidGl0bGVfdXBkYXRlX3BlcmlvZGljaXR5X3NjYW4iLCJhZGRfaG9zdF91cmwiLCJlZGl0X2hvc3RfdXJsIiwicmVtb3ZlX2hvc3RfdXJsIiwic2Nhbl9ob3N0X3VybCIsInNjYW5fdHlwZV9saXN0X3VybCIsImFjdGl2ZV9tb25pdG9yaW5nX3VybCIsInNjYW5fcmVzdWx0X3VybCIsImNoZWNrX3N0YXR1c191cmwiLCJ0YWJsZV9ob3N0c190b19zY2FuIiwibW9kYWxfYWRkIiwibW9kYWxfdXBkYXRlX3BlcmlvZGl0aWN5X3NjYW4iLCJpbl9wcm9ncmVzc19udW1iZXIiLCJyb3dfdG9fc2NhbiIsImF1dG9yZWZyZXNoIiwibW9kYWxfb3BlbmVkIiwiY2xpY2tob3VzZV9kaXNhYmxlZCIsImluc2VydF93aXRoX3N1Y2Nlc3MiLCJhbHJlYWR5X2luc2VydGVkIiwiZ2V0X3NjYW5fdHlwZV9saXN0X3YiLCJnZXRfc2Nhbl90eXBlX2xpc3QiLCJjaGVja19pbl9wcm9ncmVzc19zdGF0dXMiLCJpc19jbGlja2hvdXNlX2VuYWJsZWQiLCJjaGVja19hdXRvcmVmcmVzaCIsImNsaWNrX2J1dHRvbl9lZGl0X2hvc3QiLCJjbGlja19idXR0b25fc2NhbiIsImNsaWNrX2J1dHRvbl9kb3dubG9hZCIsImNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdCIsImNvbXBhcmVfYnlfaG9zdF9pcCIsImNvbHVtbl9kYXRhIiwiZ2V0X3NjYW5fc3RhdHVzX3ZhbHVlIiwicmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcyIsInNjYW5faG9zdF9tc2ciLCJhZGRfaG9zdF9yZXN0Iiwic2V0X2FscmVhZHlfaW5zZXJ0X29yX2luc2VydF93aXRoX3N1Y2Nlc3MiLCJjb2x1bW5zX2Zvcm1hdHRlciIsImlzX3JlcG9ydCIsInNob3dfcmVzdWx0IiwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZCIsIm51bV92cyIsImN1cnJlbnRfY2xhc3MiLCJjbGFzc19pdGVtIiwic2Nhbl90eXBlX2xhYmVsIiwiaW5fcHJvZ3Jlc3MiLCJ1cGRhdGVfYWxsX3NjYW5fZnJlcXVlbmNpZXMiLCJ0b3RhbF9pbl9wcm9ncmVzcyIsInNjYW5zX2VuZGVkIiwiY29uZmlybV9zY2FuX2FsbF9lbnRyaWVzIiwidXBkYXRlX2FsbF9wZXJpb2RpY2l0eSIsInNjYW5fcm93Iiwic2Nhbl9yb3dfcmVzdCIsInNjYW5fc2luZ2xlX2hvc3QiLCJzY2FuX2FsbF9lbnRyaWVzIiwiZGVsZXRlX2FsbF9zY2FuX2hvc3RzIiwiZGVsZXRlX2FsbF9yb3dzIiwidXBkYXRlX21vZGFsX3N0YXR1cyIsIm1lc3NhZ2VfaHRtbCIsInRpdGxlX2h0bWwiLCJob3N0X2hyZWYiLCJpc19pbl9tZW0iLCJnZXRfcmVzdWx0IiwidGFibGVfb3Blbl9wb3J0cyIsImNsaWNrX2J1dHRvbl9zaG93X2hvc3RzIiwiY29tcGFyZV9ieV9wb3J0IiwiZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydCIsImZvcm1hdF9jdmVfbnVtIiwiaG9zdHMiLCJob3N0c19zcGxpdGVkIiwiaG9zdF9zcGxpdHRlZCIsImhvc3RfbGFiZWwiLCJwb3J0X251bWJlciIsInJlcG9ydF9kYXRlIiwicmVwb3J0X25hbWUiLCJpc19yZXBvcnRfbmFtZV9jb3JyZWN0IiwidG1wX3JlcG9ydF9kYXRlIiwidG1wX25hbWUiLCJyZXBvcnRfdGl0bGUiLCJjaGVja190aXRsZSIsImlzU2luZ2xlVmFsaWRXb3JsZCIsIm9wZW5fcmVwb3J0X3VybCIsInJlbW92ZV9yZXBvcnRfdXJsIiwiZWRpdF9yZXBvcnRfdXJsIiwidGFibGVfdnNfcmVwb3J0cyIsIm1vZGFsX2VkaXQiLCJjbGlja19idXR0b25fZWRpdCIsImNvbXBhcmVfYnlfcmVwb3J0X2RhdGUiLCJlZGl0X3JlcG9ydF9yZXN0IiwicHJpbnRhYmxlIiwic3RvcmVfZmlsZSIsImdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lIiwiZmlsZV9zZWxlY3RlZCIsInNvcnRfZmlsZXNfYnkiLCJzZWxlY3RfZmlsZSIsIm9wZW5fZmlsZSIsImRlbGV0ZV9maWxlIiwibGlzdF9maWxlcyIsImRpc3BsYXlfbmFtZSIsImZpbGVfY29udGVudCIsImZpbGVfaW5wdXQiLCJvbl9waWNrX2ZpbGUiLCJvbl9maWxlX3BpY2tlZCIsImZpbGVSZWFkZXIiLCJ1cGxvYWRfZmlsZSIsIndpZHRoX2NsYXNzIiwiaGVpZ2h0X2NsYXNzIiwiY29sb3JfY2xhc3MiLCJyZWZyZXNoX2NvbXBvbmVudCIsInRhYmxlX3Jvd3MiLCJkYXRhX3R5cGUiLCJyZW5kZXJfY29sdW1uIiwiaTE4bl9uYW1lIiwicm93X3JlbmRlcl9mdW5jdGlvbnMiLCJ0aHJvdWdocHV0IiwiZnBhY2tldHMiLCJkYl9zZWFyY2giLCJmb3JtYXRIb3N0IiwiZm9ybWF0TmV0d29yayIsImZvcm1hdEFTTiIsImZvcm1hdENvdW50cnkiLCJmb3JtYXRHZW5lcmljT2JqIiwidnNfc2Nhbl9yZXN1bHQiLCJob3N0c19mIiwiaG9zdHNfbGlzdCIsImhvc3RzX21hcCIsImN2ZXNfZiIsImN2ZXMiLCJjdmVzX21hcCIsImN2ZV9kZXRhaWxzIiwiYWN0dWFsX3Njb3JlIiwiYmFkZ2VfdHlwZSIsInRjcF9wb3J0X2YiLCJwb3J0X2xhYmVsIiwidGNwX3VkcF9wb3J0c19saXN0X2YiLCJ0Y3BfcG9ydHNfbGlzdCIsInVkcF9wb3J0c19saXN0IiwicG9ydHNfbWFwIiwicG9ydF9pZCIsInVkcF9wb3J0c19maWx0ZXJlZCIsImNvbnRlbnRfbGFiZWwiLCJyZW5kZXJfcm93IiwidGFibGVfdHlwZSIsInF1ZXJ5X3BhcmFtcyIsImdldF9jb21wb25lbnRfZGF0YSIsInJlY29yZHMiLCJtYXhfcm93cyIsIm1heF9oZWlnaHQiLCJjb3VudGVyIiwibGlua191cmwiLCJjb3VudGVyX3ZhbHVlIiwiY291bnRlcl9wYXRoIiwiY291bnRlcl9mb3JtYXR0ZXIiLCJmb3JtYXRDb3VudGVyIiwibGlua191cmxfcGFyYW1zIiwibGlua19xdWVyeV9wYXJhbXMiLCJyZWZyZXNoX2NoYXJ0IiwiaGVpZ2h0X3Blcl9yb3ciLCJncm91cF9vcHRpb25fbW9kZSIsInRzX3JlcXVlc3QiLCJzdWJzdGl0dXRlX2lmaWQiLCJwYXJhbXNfdG9fZm9ybWF0IiwiY3VycmVudF9pZmlkIiwibmV3X2Zvcm1hdHRlZF9wYXJhbXMiLCJmb3JtYXRfaWZpZHMiLCJmb3JtYXRfZXhwb3J0ZXJzIiwiZXhwb3J0ZXJzX2xpc3QiLCJleHBvcnRlciIsImN1cnJlbnRfZXhwb3J0ZXIiLCJzdWJzdGl0dXRlX2V4cG9ydGVyIiwiZm9ybWF0X25ldHdvcmtzIiwibmV0d29ya3NfbGlzdCIsImN1cnJlbnRfbmV0d29yayIsInN1YnN0aXR1dGVfbmV0d29yayIsInBvc3RfcGFyYW1zIiwiYW55X3BhcmFtIiwicmVzb2x2ZV9hbnlfcGFyYW1zIiwicmV0cmlldmVfYmFzaWNfaW5mbyIsInNhbmtleV92ZXJzaW9uIiwiY29tcG9uZW50c19kaWN0IiwiYmFkZ2UiLCJCYWRnZUNvbXBvbmVudCIsIkVtcHR5Q29tcG9uZW50IiwiUGllQ29tcG9uZW50IiwiVGltZXNlcmllc0NvbXBvbmVudCIsIlRhYmxlQ29tcG9uZW50IiwiU2Fua2V5Q29tcG9uZW50IiwicmVwb3J0X2JveCIsIm1vZGFsX3N0b3JlX3JlcG9ydCIsIm1vZGFsX29wZW5fcmVwb3J0IiwibW9kYWxfdXBsb2FkX3JlcG9ydCIsIm1haW5fZXBvY2hfaW50ZXJ2YWwiLCJzZWxlY3RlZF9maWx0ZXJzIiwicmVwb3J0c190ZW1wbGF0ZXMiLCJzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUiLCJ3YXJuaW5nX21lc3NhZ2UiLCJjb21wb25lbnRzX2luZm8iLCJkYXRhX2Zyb21fYmFja3VwIiwiZW5hYmxlX2RhdGVfdGltZV9yYW5nZV9waWNrZXIiLCJlbmFibGVfc21hbGxfcGlja2VyIiwiZW5hYmxlX3NtYWxsX3BpY2tlcl9hY3Rpb25zIiwiZGlzYWJsZV9kYXRlIiwidG9vbGJveCIsImRpc2FibGVfZGF0ZV90aW1lX3BpY2tlciIsImlzX29wZW5fcmVwb3J0IiwiZW5hYmxlX3JlcG9ydF90aXRsZSIsImNvbXBvbmVudF9jdXN0b21fc3R5bGUiLCJjdXN0b21fc3R5bGUiLCJjdXN0b21fcHJpbnRfc3R5bGUiLCJjb21wb25lbnRfaW50ZXJ2YWwiLCJnZXRfdGltZV9pbnRlcnZhbF9zdHJpbmciLCJ0ZW1wbGF0ZV9saXN0X2VuZHBvaW50IiwicmVwb3J0X3RlbXBsYXRlX3ZhbHVlIiwic2V0X3RlbXBsYXRlc19saXN0Iiwib3Blbl9yZXBvcnQiLCJsb2FkX2NvbXBvbmVudHMiLCJzZXRfcmVwb3J0X3RpdGxlIiwic2V0X2NvbXBvbmVudHNfZXBvY2hfaW50ZXJ2YWwiLCJsb29wX2ludGVydmFsIiwidXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbCIsInRlbXBsYXRlX25hbWUiLCJ0ZW1wbGF0ZV9lbmRwb2ludCIsImNfZXh0IiwiY29tcG9uZW50X2lkIiwiZ2V0X2NvbXBvbmVudF9pZCIsImZpbHRlcnNfYXZhaWxhYmxlIiwicmVwb3J0X2ZpbHRlcnNfZW5kcG9pbnQiLCJmaWx0ZXJfb3B0aW9ucyIsImFsbF9sYWJlbCIsImxvYWRfZmlsdGVycyIsImludGVydmFsX3NlY29uZHMiLCJ0aW1lX3dpbmRvdyIsInV0Y19vZmZzZXQiLCJ0aW1lX29mZnNldCIsInNlbGVjdF9maWx0ZXIiLCJmaWx0ZXJfaWQiLCJmaWx0ZXJfdmFsdWUiLCJ1cGRhdGVfY29tcG9uZW50X2ZpbHRlcnMiLCJzZXRfY29tcG9uZW50c19maWx0ZXIiLCJzZWxlY3RfcmVwb3J0X3RlbXBsYXRlIiwidXBkYXRlX3RlbXBsYXRlc19saXN0Iiwic2hvd19zdG9yZV9yZXBvcnRfbW9kYWwiLCJzaG93X29wZW5fcmVwb3J0X21vZGFsIiwic2hvd191cGxvYWRfcmVwb3J0X21vZGFsIiwiZ2V0X3N1Z2dlc3RlZF9yZXBvcnRfbmFtZSIsInVwbG9hZF9yZXBvcnQiLCJjb250ZW50X3N0cmluZyIsInNldF9yZXBvcnQiLCJsb2FkX3JlcG9ydCIsImxpc3RfcmVwb3J0cyIsInJlcG9ydF9saXN0X2VuZHBvaW50IiwiZmlsZXNfb2JqIiwidG1wX2Vwb2NoX2ludGVydmFsIiwidG1wX3RlbXBsYXRlIiwidG1wX2NvbXBvbmVudHNfZGF0YSIsInRtcF9jb21wb25lbnRzX2luZm8iLCJyZXBvcnRfb3Blbl9lbmRwb2ludCIsInJlcG9ydF9uYW1lX3RvX29wZW4iLCJ0X2VudHJ5IiwiZGVsZXRlX3JlcG9ydCIsInJlcG9ydF9kZWxldGVfZW5kcG9pbnQiLCJzZXJpYWxpemVfcmVwb3J0IiwiY29tcG9uZW50c19kYXRhIiwic3RvcmVfcmVwb3J0IiwicmVwb3J0X3N0b3JlX2VuZHBvaW50IiwiZG93bmxvYWRfcmVwb3J0IiwicHJpbnRfcmVwb3J0IiwicHJpbnQiLCJlcG9jaF9iZWdpbl9tc2VjIiwiZXBvY2hfZW5kX21zZWMiLCJ0aW1lX2ludGVydmFsX3N0cmluZyIsImV4Y2x1ZGVfdHlwZSIsImlucHV0X2lwIiwiaW5wdXRfbmV0d29yayIsImlucHV0X3ZsYW4iLCJpbnB1dF90ZXh0IiwiaG9zdF9zZWxlY3RlZCIsImZsb3dfc2VsZWN0ZWQiLCJuZXRtYXNrIiwicGF0dGVybl9pcCIsInBhdHRlcm5fdGV4dCIsInNldF9leGNsdWRlX3R5cGUiLCJkaXNhYmxlX2FwcGx5IiwiYWxlcnRfZXhjbHVzaW9uc19wYWdlIiwib2xkX3R5cGUiLCJvbGRfc3ViZGlyIiwic3ViZGlyIiwib2xkX2FsZXJ0X2RvbWFpbiIsIm9sZF9hbGVydF9jZXJ0aWZpY2F0ZSIsIm9sZF9hbGVydF9hZGRyIiwib2xkX2Zsb3dfYWxlcnRfa2V5Iiwib2xkX2hvc3RfYWxlcnRfa2V5IiwibmV0d29ya19kZXRhaWxzIiwidmxhbl9zcGxpdCIsIm50b3BWdWUiLCJQYWdlQWxlcnRTdGF0cyIsIlBhZ2VGbG93SGlzdG9yaWNhbCIsIlBhZ2VTdGF0cyIsIlBhZ2VEZXZpY2VFeGNsdXNpb25zIiwiUGFnZUhvc3RUTFMiLCJQYWdlSG9zdFNTSCIsIlBhZ2VIb21lTWFwIiwiUGFnZVNhbmtleSIsIlBhZ2VIb3N0UnVsZXMiLCJQYWdlQWxlcnRBbmFseXNpcyIsIlBhZ2VIb3N0TWFwIiwiUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXAiLCJQYWdlU05NUERldmljZVJ1bGVzIiwiUGFnZUhvc3RzUG9ydHNBbmFseXNpcyIsIlBhZ2VJbmFjdGl2ZUhvc3RzIiwiUGFnZUluYWN0aXZlSG9zdERldGFpbHMiLCJQYWdlVnVsbmVyYWJpbGl0eVNjYW4iLCJQYWdlSG9zdFZzUmVzdWx0IiwiUGFnZU9wZW5Qb3J0cyIsIlBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCIsIlBhZ2VFZGl0QXBwbGljYXRpb25zIiwiUGFnZVZMQU5Qb3J0c0Zsb3dTYW5rZXkiLCJQYWdlVkxBTlBvcnRzU2Fua2V5IiwiUGFnZVRlc3RUYWJsZSIsIlBhZ2VTbm1wRGV2aWNlc0ludGVyZmFjZXNTaW1pbGFyaXR5IiwiTmVkZ2VSdWxlc0NvbmZpZyIsIk5lZGdlUmVwZWF0ZXJzQ29uZmlnIiwiUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zIiwiUGFnZUhvc3REZXRhaWxzVHJhZmZpYyIsIlBhZ2VIb3N0RGV0YWlsc1BhY2tldHMiLCJQYWdlSG9zdERldGFpbHNGbG93U2Fua2V5IiwiUGFnZUhvc3REZXRhaWxzUG9ydHMiLCJQYWdlQWdncmVnYXRlZExpdmVGbG93cyIsIlBhZ2VOZXR3b3JrRGlzY292ZXJ5IiwiUGFnZUZsb3dEZXZpY2VEZXRhaWxzIiwiQWxlcnRJbmZvIiwiVGltZXNlcmllc0NoYXJ0IiwiUmFuZ2VQaWNrZXIiLCJTYW5rZXkiLCJOb3RlTGlzdCIsIkxvYWRpbmciLCJEYXNoYm9hcmQiLCJEYXNoYm9hcmRCb3giLCJEYXNoYm9hcmRFbXB0eSIsIkRhc2hib2FyZFRhYmxlIiwiRGFzaGJvYXJkQmFkZ2UiLCJEYXNoYm9hcmRQaWUiLCJEYXNoYm9hcmRUaW1lc2VyaWVzIiwiRGFzaGJvYXJkU2Fua2V5IiwiTGlzdFRpbWVzZXJpZXMiLCJNb2RhbEFkZENoZWNrRXhjbHVzaW9uIiwiTW9kYWxBbGVydHNGaWx0ZXIiLCJNb2RhbFRpbWVzZXJpZXMiLCJNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIiwiTW9kYWxTbmFwc2hvdCIsIk1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIiwiTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uIiwiTW9kYWxBZGRIb3N0UnVsZXMiLCJNb2RhbEFkZEFwcGxpY2F0aW9uIiwiTW9kYWxEZWxldGVBcHBsaWNhdGlvbiIsIk1vZGFsRWRpdFJlcG9ydCIsIlZ1ZSIsIl8weDRhZTUiLCJfMHg2NDhjeDIiLCJfMHg2NDhjeDMiLCJfMHg2NDhjeDQiLCJfMHg2NDhjeGEiLCJfMHg2NDhjeDUiLCJfMHg2NDhjeDYiLCJfMHg2NDhjeDgiLCJfMHg2NDhjeDkiLCJfMHg2NDhjeGIiLCJfMHg2NDhjeGMiLCJHRVRfSU5URVJGQUNFX0RBVEEiLCJfMHg2NDhjeDEzIiwiXzB4NjQ4Y3hkIiwiXzB4NjQ4Y3hlIiwiXzB4NjQ4Y3hmIiwiXzB4NjQ4Y3gxMCIsIl8weDY0OGN4MTEiLCJfMHg2NDhjeDEyIl0sIm1hcHBpbmdzIjoieUJBQ0FBLEtBQUtDLFVBQVVDLE9BQVMsU0FBVUEsR0FDMUIsSUFBSUMsRUFBSSxDQUNBLEtBQU1DLEtBQUtDLFdBQWEsRUFDeEIsS0FBTUQsS0FBS0UsVUFDWCxLQUFNRixLQUFLRyxXQUNYLEtBQU1ILEtBQUtJLGFBQ1gsS0FBTUosS0FBS0ssYUFDWCxLQUFNQyxLQUFLQyxPQUFPUCxLQUFLQyxXQUFhLEdBQUssR0FDekNPLEVBQUtSLEtBQUtTLG1CQUtsQixJQUFLLElBQUlDLElBRkwsT0FBT0MsS0FBS2IsS0FBU0EsRUFBU0EsRUFBT2MsUUFBUUMsT0FBT0MsSUFDL0NkLEtBQUtl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
