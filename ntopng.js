!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url;if(null!=i){const e=`${i}?${o.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",v),p.attr("transform",v)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function v(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},speed:{id:"speed",um:["bit","Kbit","Mbit","Gbit","Tbit","Pbit"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const v={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},v=n.options.url,m=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],v=$(f),h=v.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),v.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:v,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=v;var m={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");m[l]||(m[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=m[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},N=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var v=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),v=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,m,v,c,o,u,p,f,i,s]}(e,l),f=p[0],v=p[1],m=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function N(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=v(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",C).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=N,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=C,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},I=P.format_value;class U{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){U.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const M=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");M(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");M(e,t)}}));const j=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:v.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=v.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=v.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=v.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class R{static alertSeverityAndType(e,t,a){return`${R.formatValueLabel(e,t,a)} ${R.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return R.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),R.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=R.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:R.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:R.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return R.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=R.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=R.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=R.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=R.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),R.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=R.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=R.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=R.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+R.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=R.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=R.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+R.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=R.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return R.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return R.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=R,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=U.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:I}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=U,window.ntopChartApex=j,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),q=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):ve(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:me(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},oe=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,ve=e=>"[object Map]"===$e(e),me=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ce=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ne=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ee=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Pe=Ee((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Ie=/\B([A-Z])/g,Ue=Ee((e=>e.replace(Ie,"-$1").toLowerCase())),Oe=Ee((e=>e.charAt(0).toUpperCase()+e.slice(1))),Me=Ee((e=>e?`on${Oe(e)}`:"")),je=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,ze;class qe{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new qe(e)}function Ve(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=ot;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,ot=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,ot=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let ot=!0;const it=[];function rt(){it.push(ot),ot=!1}function ct(){const e=it.pop();ot=void 0===e||e}function ut(e,t,a){if(ot&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const o=Ye.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&fe(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":fe(e)?Ce(a)&&i.push(o.get("length")):(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"delete":fe(e)||(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"set":ve(e)&&i.push(o.get(et))}if(1===i.length)i[0]&&pt(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const vt=D("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const o=Reflect.get(a,l,n);return(ye(l)?mt.has(l):vt(l))?o:(e||ut(a,0,l),t?o:fa(o)?s&&Ce(l)?o:o.value:we(o)?e?ta(o):Qt(o):o)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(oa(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const o=fe(t)&&Ce(a)?Number(a)<t.length:pe(t,a),i=Reflect.set(t,a,l,n);return t===ra(n)&&(o?je(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),i}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&mt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Ct=ue({},$t,{get:gt,set:kt(!0)}),Nt=ue({},St,{get:yt}),At=e=>e,Et=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:o}=Et(n),i=l?At:a?da:ua;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function It(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function Ut(e){e=ra(e);const t=ra(this);return Et(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ot(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=Et(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?je(t,o)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function Mt(e){const t=ra(this),{has:a,get:l}=Et(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function jt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ra(s),i=t?At:e?da:ua;return!e&&ut(o,0,et),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Ft(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),o=ve(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?At:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Rt(e){return function(...t){return"delete"!==e&&this}}const[Dt,zt,qt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return It(this)},has:Pt,add:Ut,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return It(this)},has:Pt,add:Ut,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return It(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return It(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Ft(n,!1,!1),a[n]=Ft(n,!0,!1),t[n]=Ft(n,!1,!0),l[n]=Ft(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:qt:e?zt:Dt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Ct,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Nt,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function oa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Fe(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){ot&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function va(e){return ha(e,!1)}function ma(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),je(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Na(e,a);return t}class Ca{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Na(e,t,a){const l=e[t];return fa(l)?l:new Ca(e,t,a)}class Aa{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ea=[];function Ta(e,...t){rt();const a=Ea.length?Ea[Ea.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ea[Ea.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ua(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${wo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${wo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Pa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ia(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ia(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ia(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ua(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){Ma(e,t,a)}return n}function Oa(e,t,a,l){if(ge(e)){const n=Ua(e,t,a,l);return n&&xe(n)&&n.catch((e=>{Ma(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Oa(e[s],t,a,l));return n}function Ma(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Ua(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let ja=!1,La=!1;const Fa=[];let Ra=0;const Da=[];let za=null,qa=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Fa.length&&Fa.includes(e,ja&&e.allowRecurse?Ra+1:Ra)||e===Ka||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Ra+1,a=Fa.length;for(;t<a;){const l=t+a>>>1;al(Fa[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){ja||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Da.length){for(Ka=t,za=[...new Set(Da)],Da.length=0,qa=0;qa<za.length;qa++)za[qa]();za=null,qa=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,ja=!0,el(e),Fa.sort(((e,t)=>al(e)-al(t)));try{for(Ra=0;Ra<Fa.length;Ra++){const e=Fa[Ra];e&&!1!==e.active&&Ua(e,null,14)}}finally{Ra=0,Fa.length=0,tl(),ja=!1,Wa=null,(Fa.length||Da.length||Ba.length)&&ll(e)}}let nl,sl=[];function ol(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ol(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function il(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Re))}let i,r=l[i=Me(t)]||l[i=Me(Pe(t))];!r&&s&&(r=l[i=Me(Ue(t))]),r&&Oa(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Oa(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(i=!0,ue(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(fe(s)?s.forEach((e=>o[e]=null)):ue(o,s),l.set(e,o),o):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ue(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const vl=e=>ml;function ml(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Os(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Os(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:v}=e;let m,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;m=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{m=Zs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){Es.length=0,Ma(t,e,1),m=Hs(Ns)}let b=m;if(h&&!1!==v){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ce)&&(h=bl(h,o)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),m=b,_l(g),m}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),Al(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:v,isInFallback:m,isHydrating:h}=d;if(v)d.pendingBranch=_,Rs(_,v)?(r(v,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():m&&(r(f,p,a,l,n,null,s,o,i),Al(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=v):c(v,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),Al(d,p))):f&&Rs(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Rs(_,f))r(f,_,a,l,n,d,s,o,i),Al(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Cl(l?a.default:a),e.ssFallback=l?Cl(a.fallback):Hs(Ns)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:v,remove:m}}=c,h=Re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}Al(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),Al(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{Ma(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;po(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,v(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&m(i),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Cl(e){let t;if(ge(e)){const a=Us&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Ts,Is())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Fs(l))return;if(l.type!==Ns||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Nl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Al(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function El(e,t){if(no){let a=no.provides;const l=no.parent&&no.parent.provides;l===a&&(a=no.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=no||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Pl(e,t){return jl(e,null,t)}function Il(e,t){return jl(e,null,{flush:"post"})}function Ul(e,t){return jl(e,null,{flush:"sync"})}const Ol={};function Ml(e,t,a){return jl(e,t,a)}function jl(e,t,{immediate:a,deep:l,flush:n}=le){const s=no;let o,i,r=!1,c=!1;if(fa(e)?(o=()=>e.value,r=oa(e)):na(e)?(o=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||oa(e))),o=()=>e.map((e=>fa(e)?e.value:na(e)?Rl(e):ge(e)?Ua(e,s,2):void 0))):o=ge(e)?t?()=>Ua(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Oa(e,s,3,[u])}:se,t&&l){const e=o;o=()=>Rl(e())}let u=e=>{i=f.onStop=()=>{Ua(e,s,4)}},d=c?[]:Ol;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>je(e,d[t]))):je(e,d)))&&(i&&i(),Oa(t,s,3,[e,d===Ol?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,za,Da,qa)}(_);const f=new at(o,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Fl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const o=no;oo(this);const i=jl(n,s.bind(l),a);return o?oo(o):io(),i}function Fl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rl(e[a],t);else if(me(e)||ve(e))e.forEach((e=>{Rl(e,t)}));else if(Se(e))for(const a in e)Rl(e[a],t);return e}function Dl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),vn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],ql={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=so(),l=Dl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==Ns){o=e;break}const i=ra(e),{mode:r}=i;if(l.isLeaving)return Hl(o);const c=Gl(o);if(!c)return Hl(o);const u=Vl(c,i,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Ns&&(!Rs(c,_)||p)){const e=Vl(_,i,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(o);"in-out"===r&&c.type!==Ns&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:v,onAppear:m,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Oa(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Rs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=m||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Ss?(128&o.patchFlag&&n++,l=l.concat(Kl(o.children,t,i))):(t||o.type!==Ns)&&l.push(null!=i?Ws(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=no;if(r)return()=>Xl(r,e);const t=t=>{c=null,Ma(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const i=va(!1),u=va(),_=va(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=so(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=yo(t.type);!l||e&&e(l)||v(a)}))}function v(e){const t=n.get(e);o&&t.type===o.type?o&&on(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&to(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&to(a,t.parent,e),t.isDeactivated=!0}),i)},Ml((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let m=null;const h=()=>{null!=m&&n.set(m,rn(a.subTree))};return _n(h),fn(h),vn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(m=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Fs(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=rn(l);const r=i.type,c=yo(Yl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ws(i),128&l.shapeFlag&&(l.ssContent=i)),m=p,f?(i.el=f.el,i.component=f.component,i.transition&&Wl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&v(s.values().next().value)),i.shapeFlag|=256,o=i,xl(l.type)?l:i}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=no){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);mn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=no,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),oo(a);const n=Oa(t,a,e,l);return io(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=no)=>(!_o||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),vn=un("bum"),mn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=no){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=go(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(rt(),Oa(r,a,8,[e.el,i,e,t]),ct())}}function kn(e,t){return Nn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Nn("components",e,!1)||e:e||$n}function Cn(e){return Nn("directives",e)}function Nn(e,t,a=!0,l=!1){const n=ul||no;if(n){const a=n.type;if("components"===e){const e=yo(a,!1);if(e&&(e===t||e===Pe(t)||e===Oe(Pe(t))))return a}const s=An(n[e]||a[e],t)||An(n.appContext[e],t);return!s&&l?a:s}}function An(e,t){return e&&(e[t]||e[Pe(t)]||e[Oe(Pe(t))])}function En(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Pn(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Ps();const o=s&&In(s(a)),i=Ls(Ss,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function In(e){return e.some((e=>!Fs(e)||e.type!==Ns&&!(e.type===Ss&&!In(e.children))))?e:null}function Un(e){const t={};for(const a in e)t[Me(a)]=e[a];return t}const On=e=>e?ro(e)?go(e)||e.proxy:On(e.parent):null,Mn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>On(e.parent),$root:e=>On(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Ll.bind(e)}),jn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return o[t]=1,l[t];if(n!==le&&pe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return o[t]=3,s[t];if(a!==le&&pe(a,t))return o[t]=4,a[t];Fn&&(o[t]=0)}}const u=Mn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==le&&pe(e,o)||t!==le&&pe(t,o)||(i=s[0])&&pe(i,o)||pe(l,o)||pe(Mn,o)||pe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},jn,{get(e,t){if(t!==Symbol.unscopables)return jn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Fn=!0;function Rn(e,t,a){Oa(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Dn(e,t,a,l){const n=l.includes(".")?Fl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&Ml(n,a)}else if(ge(e))Ml(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Dn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&Ml(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>qn(r,e,o,!0))),qn(r,t,o)):r=t,s.set(t,r),r}function qn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&qn(e,s,a,!0),n&&n.forEach((t=>qn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ne(r))continue;const c=t[r];let u;n&&pe(n,u=Pe(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ra(a),l=o||le;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Jn(n,t,i,l[i],e,!pe(l,i))}}return i}function Jn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=pe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(oo(n),l=s[a]=e.call(null,t),io())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Ue(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zn(t)&&(o[t]=le)}else if(s)for(const e in s){const t=Pe(e);if(Zn(t)){const a=s[e],l=o[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=ml(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function os(){return{app:null,config:{isNativeTag:oe,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=os(),s=new Set;let o=!1;const i=n.app={_uid:is++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Ro,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(i,...t)):ge(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,go(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?go(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===le?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ua(r,i,12,[o,u]);else{const t=be(r),l=fa(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,pe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,fs(i,a)):i()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,m,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,i,c,m,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Cs:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Ns:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,i,c,m,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,m,h);else if(6&x){l.slotScopeIds=m;const e=o(a);if(t(l,e,null,i,c,ds(e),h),S=g?v(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,m,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,ds(o(a)),m,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ne(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&to(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Nl((()=>{r&&to(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){us=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Cs&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=v(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,ds(d),r),u},v=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Nl;function vs(e){return hs(e)}function ms(e){return hs(e,ps)}function hs(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,v=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Rs(e,t)&&(l=z(e),j(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Cs:m(e,t,a,l);break;case Ns:h(e,t,a,l);break;case As:null==e&&g(t,a,l,o);break;case Ss:C(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?N(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},m=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:v,props:m,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,m&&m.is,m),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==v,u,d),y&&xn(e,null,o,"created"),m){for(const t in m)"value"===t||Ne(t)||n(_,t,null,m[t],r,e.children,o,i,D);"value"in m&&n(_,"value",null,m.value),(f=m.onVnodeBeforeMount)&&to(f,o,e)}w(_,e,e.scopeId,u,o)}y&&xn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=m&&m.onVnodeMounted)||k||y)&&fs((()=>{f&&to(f,o,e),k&&g.enter(_),y&&xn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Xs(e[c]):Zs(e[c]);v(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let v;a&&gs(a,!1),(v=f.onVnodeBeforeUpdate)&&to(v,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,m,o):i||I(e,t,r,null,a,l,m,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((v=f.onVnodeUpdated)||_)&&fs((()=>{v&&to(v,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Ss||!Rs(r,c)||70&r.shapeFlag)?u(r.el):a;v(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ne(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,D)}if(a!==le)for(const r in a)Ne(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,D);"value"in l&&n(e,"value",a.value,l.value)}},C=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):I(e,t,l,_,s,i,r,c,u)},N=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ao,s={uid:lo++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new qe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=il.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(i.ctx.renderer=B),function(e,t=!1){_o=t;const{props:a,children:l}=e.vnode,n=ro(e);(function(e,t,a,l=!1){const n={},s={};Fe(s,zs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Fe(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Fe(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,jn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?ho(e):null;oo(e),rt();const n=Ua(l,e,0,[e.props,a]);if(ct(),io(),xe(n)){if(n.then(io,io),t)return n.then((a=>{po(e,a,t)})).catch((t=>{Ma(t,e,0)}));e.asyncDep=n}else po(e,n,t)}else mo(e,t)}(e,t),_o=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Hs(Ns);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||yl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?yl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Fa.indexOf(e);t>Ra&&Fa.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&to(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,v(p,_,u(p.el),z(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),i&&fs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>to(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Le(c),!_&&(o=r&&r.onVnodeBeforeMount)&&to(o,d,t),gs(e,!0),i&&H){const a=()=>{e.subTree=hl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=hl(e);v(null,o,a,l,e,n,s),t.el=o.el}if(u&&fs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;fs((()=>to(o,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Kn(e,t,n,s)&&(c=!0);for(const s in i)t&&(pe(t,s)||(l=Ue(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(cl(e.emitsOptions,o))continue;const u=t[o];if(r)if(pe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Pe(o);n[t]=Jn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),o=t}else t&&(ss(e,t),o={default:1});if(s)for(const e in n)ts(e)||e in o||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},I=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void U(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&D(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):D(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},U=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);v(e[_],l,a,null,n,s,o,i,r)}c>u?D(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Rs(l,u))break;v(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Rs(l,c))break;v(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)v(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)j(e[c],n,s,!0),c++;else{const p=c,f=c,m=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&m.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){j(l,n,s,!0);continue}let u;if(null!=l.key)u=m.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Rs(l,t[h])){u=h;break}void 0===u?j(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,v(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?v(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?M(d,a,_,2):h--)}}},M=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)M(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Ss)if(i!==As)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),fs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)M(c[e],t,l,n);a(e.anchor,t,l)}},j=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&cs(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let v;if(f&&(v=o&&o.onVnodeBeforeUnmount)&&to(v,t,e),6&u)R(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?D(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&D(r,t,a),l&&L(e)}(f&&(v=o&&o.onVnodeUnmounted)||p)&&fs((()=>{v&&to(v,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void F(a,n);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},F=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},R=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Le(l),n.stop(),s&&(s.active=!1,j(o,e,t,a)),i&&fs(i,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)j(e[o],t,a,l,n)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),q=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:v,um:j,m:M,r:L,mt:A,mc:x,pc:I,pbc:$,n:z,o:e};let V,H;return t&&([V,H]=t(B)),{render:q,hydrate:V,createApp:rs(q,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:v}}=c,m=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),c=t.anchor=v("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=v("");d&&(p(_,d),o=o||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};m?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,v=ys(e.props),h=v?a:u,g=v?l:p;if(o=o||ws(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),bs(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),m)v||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else v&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ys(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Ss=Symbol(void 0),Cs=Symbol(void 0),Ns=Symbol(void 0),As=Symbol(void 0),Es=[];let Ts=null;function Ps(e=!1){Es.push(Ts=e?null:[])}function Is(){Es.pop(),Ts=Es[Es.length-1]||null}let Us=1;function Os(e){Us+=e}function Ms(e){return e.dynamicChildren=Us>0?Ts||ne:null,Is(),Us>0&&Ts&&Ts.push(e),e}function js(e,t,a,l,n,s){return Ms(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return Ms(Hs(e,t,a,l,n,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Rs(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const zs="__vInternal",qs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Us>0&&!o&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Ns),Fs(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Us>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var o;if(ge(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ia(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ia(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?eo(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&qs(i),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Cs,null,e,t)}function Js(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Ps(),Ls(Ns,null,e)):Hs(Ns,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Ns):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Cs,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function eo(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function to(e,t,a,l=null){Oa(e,t,7,[a,l])}const ao=os();let lo=0,no=null;const so=()=>no||ul,oo=e=>{no=e,e.scope.on()},io=()=>{no&&no.scope.off(),no=null};function ro(e){return 4&e.vnode.shapeFlag}let co,uo,_o=!1;function po(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mo(e,a)}function fo(e){co=e,uo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const vo=()=>!co;function mo(e,t,a){const l=e.type;if(!e.render){if(!t&&co&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=ue(ue({isCustomElement:a,delimiters:s},n),o);l.render=co(t,i)}}e.render=l.render||se,uo&&uo(e)}oo(e),rt(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Fn=!1,t.beforeCreate&&Rn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:v,deactivated:m,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Fn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,o=!ge(t)&&ge(t.set)?t.set.bind(a):se,i=xo({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)Dn(i[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{El(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Rn(u,e,"c"),A(dn,d),A(_n,_),A(pn,p),A(fn,f),A(an,v),A(ln,m),A(yn,x),A(bn,y),A(gn,w),A(vn,h),A(mn,g),A(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),ct(),io()}function ho(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function go(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Mn?Mn[a](e):void 0}))}const bo=/(?:^|[-_])(\w)/g;function yo(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function wo(e,t,a=!1){let l=yo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(bo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const xo=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Aa(l,n,s||!n,a)}(e,0,_o);function ko(){return null}function $o(){return null}function So(e){}function Co(e,t){return null}function No(){return Eo().slots}function Ao(){return Eo().attrs}function Eo(){const e=so();return e.setupContext||(e.setupContext=ho(e))}function To(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Po(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Io(e){const t=so();let a=e();return io(),xe(a)&&(a=a.catch((e=>{throw oo(t),e}))),[a,()=>oo(t)]}function Uo(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Fs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Fs(a)&&(a=[a]),Hs(e,t,a))}const Oo=Symbol(""),Mo=()=>{{const e=Tl(Oo);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function jo(){}function Lo(e,t,a,l){const n=a[l];if(n&&Fo(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Fo(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(je(a[e],t[e]))return!1;return Us>0&&Ts&&Ts.push(e),!0}const Ro="3.2.37",Do="undefined"!=typeof document?document:null,zo=Do&&Do.createElement("template"),qo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Do.createElementNS("http://www.w3.org/2000/svg",e):Do.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Do.createTextNode(e),createComment:e=>Do.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Do.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{zo.innerHTML=l?`<svg>${e}</svg>`:e;const n=zo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bo=/\s*!important$/;function Vo(e,t,a){if(fe(a))a.forEach((a=>Vo(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Go[t];if(a)return a;let l=Pe(t);if("filter"!==l&&l in e)return Go[t]=l;l=Oe(l);for(let a=0;a<Ho.length;a++){const n=Ho[a]+l;if(n in e)return Go[t]=n}return t}(e,t);Bo.test(a)?e.setProperty(Ue(l),a.replace(Bo,""),"important"):e[l]=a}}const Ho=["Webkit","Moz","ms"],Go={},Wo="http://www.w3.org/1999/xlink",[Ko,Jo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Yo=0;const Zo=Promise.resolve(),Xo=()=>{Yo=0};function Qo(e,t,a,l){e.addEventListener(t,a,l)}const ei=/(?:Once|Passive|Capture)$/,ti=/^on[a-z]/;function ai(e,t){const a=Jl(e);class l extends si{constructor(e){super(a,e,t)}}return l.def=a,l}const li=e=>ai(e,nr),ni="undefined"!=typeof HTMLElement?HTMLElement:class{};class si extends ni{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Re(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Re(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ue(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ue(e),t+""):t||this.removeAttribute(Ue(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof si){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function oi(e="$style"){{const t=so();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function ii(e){const t=so();if(!t)return;const a=()=>ri(t.subTree,e(t.proxy));Il(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),mn((()=>e.disconnect()))}))}function ri(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ri(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ci(e.el,t);else if(e.type===Ss)e.children.forEach((e=>ri(e,t)));else if(e.type===As){let{el:a,anchor:l}=e;for(;a&&(ci(a,t),a!==l);)a=a.nextSibling}}function ci(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ui=(e,{slots:t})=>Uo(ql,vi(e),t);ui.displayName="Transition";const di={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_i=ui.props=ue({},ql.props,di),pi=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fi=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function vi(e){const t={};for(const a in e)a in di||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[mi(e.enter),mi(e.leave)];{const t=mi(e);return[t,t]}}(n),v=f&&f[0],m=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{gi(e,t?u:i),gi(e,t?c:o),a&&a()},C=(e,t)=>{e._isLeaving=!1,gi(e,d),gi(e,p),gi(e,_),t&&t()},N=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);pi(n,[t,o]),bi((()=>{gi(t,e?r:s),hi(t,e?u:i),fi(n)||wi(t,l,v,o)}))};return ue(t,{onBeforeEnter(e){pi(h,[e]),hi(e,s),hi(e,o)},onBeforeAppear(e){pi(x,[e]),hi(e,r),hi(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>C(e,t);hi(e,d),Si(),hi(e,_),bi((()=>{e._isLeaving&&(gi(e,d),hi(e,p),fi(y)||wi(e,l,m,a))})),pi(y,[e,a])},onEnterCancelled(e){S(e,!1),pi(b,[e])},onAppearCancelled(e){S(e,!0),pi($,[e])},onLeaveCancelled(e){C(e),pi(w,[e])}})}function mi(e){return Re(e)}function hi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yi=0;function wi(e,t,a,l){const n=e._endId=++yi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=xi(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function xi(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=ki(n,s),i=l("animationDelay"),r=l("animationDuration"),c=ki(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ki(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$i(t)+$i(e[a]))))}function $i(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(){return document.body.offsetHeight}const Ci=new WeakMap,Ni=new WeakMap,Ai={name:"TransitionGroup",props:ue({},_i,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=so(),l=Dl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xi(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ei),n.forEach(Ti);const l=n.filter(Pi);Si(),l.forEach((e=>{const a=e.el,l=a.style;hi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,gi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ra(e),i=vi(o);let r=o.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,i,l,a)),Ci.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ei(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ti(e){Ni.set(e,e.el.getBoundingClientRect())}function Pi(e){const t=Ci.get(e),a=Ni.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ii=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ui(e){e.target.composing=!0}function Oi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mi={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ii(n);const s=l||n.props&&"number"===n.props.type;Qo(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Re(l)),e._assign(l)})),a&&Qo(e,"change",(()=>{e.value=e.value.trim()})),t||(Qo(e,"compositionstart",Ui),Qo(e,"compositionend",Oi),Qo(e,"change",Oi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ii(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Re(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},ji={deep:!0,created(e,t,a){e._assign=Ii(a),Qo(e,"change",(()=>{const t=e._modelValue,a=zi(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(me(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(qi(e,l))}))},mounted:Li,beforeUpdate(e,t,a){e._assign=Ii(a),Li(e,t,a)}};function Li(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:me(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,qi(e,!0)))}const Fi={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Ii(a),Qo(e,"change",(()=>{e._assign(zi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ii(l),t!==a&&(e.checked=Q(t,l.props.value))}},Ri={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=me(t);Qo(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Re(zi(e)):zi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ii(l)},mounted(e,{value:t}){Di(e,t)},beforeUpdate(e,t,a){e._assign=Ii(a)},updated(e,{value:t}){Di(e,t)}};function Di(e,t){const a=e.multiple;if(!a||fe(t)||me(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zi(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(zi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zi(e){return"_value"in e?e._value:e.value}function qi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bi={created(e,t,a){Vi(e,t,a,null,"created")},mounted(e,t,a){Vi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vi(e,t,a,l,"updated")}};function Vi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Ri;case"TEXTAREA":return Mi;default:switch(t){case"checkbox":return ji;case"radio":return Fi;default:return Mi}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Hi=["ctrl","shift","alt","meta"],Gi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Hi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wi=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Gi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ki={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ji=(e,t)=>a=>{if(!("key"in a))return;const l=Ue(a.key);return t.some((e=>e===l||Ki[e]===l))?e(a):void 0},Yi={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zi(e,!0),l.enter(e)):l.leave(e,(()=>{Zi(e,!1)})):Zi(e,t))},beforeUnmount(e,{value:t}){Zi(e,t)}};function Zi(e,t){e.style.display=t?e._vod:"none"}const Xi=ue({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Vo(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vo(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ei.test(e)){let a;for(t={};a=e.match(ei);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ue(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Ko();(Jo||l>=a.attached-1)&&Oa(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Yo||(Zo.then(Xo),Yo=Ko()),a}(l,n);Qo(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ti.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ti.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Wo,t.slice(6,t.length)):e.setAttributeNS(Wo,t,a);else{const l=q(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},qo);let Qi,er=!1;function tr(){return Qi||(Qi=vs(Xi))}function ar(){return Qi=er?Qi:ms(Xi),er=!0,Qi}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=ir(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:or,initDirectivesForSSR:rr,defineCustomElement:ai,defineSSRCustomElement:li,VueElement:si,useCssModule:oi,useCssVars:ii,Transition:ui,TransitionGroup:Ai,vModelText:Mi,vModelCheckbox:ji,vModelRadio:Fi,vModelSelect:Ri,vModelDynamic:Bi,withModifiers:Wi,withKeys:Ji,vShow:Yi,reactive:Qt,ref:va,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Na,toRefs:Sa,isProxy:ia,isReactive:na,isReadonly:sa,isShallow:oa,customRef:$a,triggerRef:ba,shallowRef:ma,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:qe,getCurrentScope:He,onScopeDispose:Ge,computed:xo,watch:Ml,watchEffect:Pl,watchPostEffect:Il,watchSyncEffect:Ul,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:vn,onUnmounted:mn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:El,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ao,useSlots:No,defineProps:ko,defineEmits:$o,defineExpose:So,withDefaults:Co,mergeDefaults:To,createPropsRestProxy:Po,withAsyncContext:Io,getCurrentInstance:so,h:Uo,createVNode:Hs,cloneVNode:Ws,mergeProps:eo,isVNode:Fs,Fragment:Ss,Text:Cs,Comment:Ns,Static:As,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:ql,withDirectives:wn,useSSRContext:Mo,ssrContextKey:Oo,createRenderer:vs,createHydrationRenderer:ms,queuePostFlushCb:Qa,warn:Ta,handleError:Ma,callWithErrorHandling:Ua,callWithAsyncErrorHandling:Oa,resolveComponent:kn,resolveDirective:Cn,resolveDynamicComponent:Sn,registerRuntimeCompiler:fo,isRuntimeOnly:vo,useTransitionState:Dl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:jo,get devtools(){return nl},setDevtoolsHook:ol,withCtx:ml,pushScopeId:pl,popScopeId:fl,withScopeId:vl,renderList:En,toHandlers:Un,renderSlot:Pn,createSlots:Tn,withMemo:Lo,isMemoSame:Fo,openBlock:Ps,createBlock:Ls,setBlockTracking:Os,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:js,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Oe,toHandlerKey:Me,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Ds,version:Ro,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),vr=Symbol(""),mr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ir=Symbol(""),Ur=Symbol(""),Or=Symbol(""),Mr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),qr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[vr]:"Suspense",[mr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Cr]:"resolveComponent",[Nr]:"resolveDynamicComponent",[Ar]:"resolveDirective",[Er]:"resolveFilter",[Tr]:"withDirectives",[Pr]:"renderList",[Ir]:"renderSlot",[Ur]:"createSlots",[Or]:"toDisplayString",[Mr]:"mergeProps",[jr]:"normalizeClass",[Lr]:"normalizeStyle",[Fr]:"normalizeProps",[Rr]:"guardReactiveProps",[Dr]:"toHandlers",[zr]:"camelize",[qr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=Qr){return e&&(i?(e.helper(gr),e.helper(Ec(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),o&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function oc(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ue(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?vr:uc(e,"KeepAlive")?mr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,vc=/[\.\?\w$\xA0-\uFFFF]/,mc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(mc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?fc:vc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Cc(e){return 1===e.type&&3===e.tagType}function Nc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wr:xr}function Ec(e,t){return e||t?br:yr}const Tc=new Set([Fr,Rr]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Ic(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Dr?l=oc(a.helper(Mr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=oc(a.helper(Mr),[ac([t]),s]),n&&n.callee===Rr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Uc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Oc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ac(l,e.isComponent)),t(gr),t(Ec(l,e.isComponent)))}const Mc=/&(gt|lt|amp|apos|quot);/g,jc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:oe,isPreTag:oe,isCustomElement:oe,decodeEntities:e=>e.replace(Mc,((e,t)=>jc[t])),onError:ur,onWarn:dr,comments:!1};function Fc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&eu(o,e.options.delimiters[0]))i=Kc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=eu(o,"\x3c!--")?zc(e):eu(o,"<!DOCTYPE")?qc(e):eu(o,"<![CDATA[")&&0!==n?Dc(e,a):qc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){tu(e,3);continue}if(/[a-z]/i.test(o[2])){Hc(e,1,l);continue}i=qc(e)}else/[a-z]/i.test(o[1])?i=Bc(e,a):"?"===o[1]&&(i=qc(e));if(i||(i=Jc(e,t)),fe(i))for(let e=0;e<i.length;e++)Rc(s,i[e]);else Rc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Rc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){tu(e,9);const a=Fc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function qc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Fc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const i=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,i),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=eu(l,"."),r=t[1]||(i||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const o=Zc(e),i=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(o,c,_),yc(i,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,o,i)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function ou(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Nc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ec(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ac(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([jr,Lr,Fr,Rr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=cu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function vu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:v="",bindingMetadata:m=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Pe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:v,bindingMetadata:m,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);mu(e,a),t.hoistStatic&&ou(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(iu(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Oc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function mu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let a=0;a<e.branches.length;a++)mu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,mu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Cr:Ar);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Uc(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];be(i)?n(i):fe(i)?yu(i,t):xu(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Or)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ec(t.inSSR,p):Ac(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Su(l,t),a(": "),xu(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),fe(o)?yu(o,t):xu(o,t)):i&&xu(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&o("("),ku(a,t),e&&o(")")}else o("("),xu(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),xu(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),o()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Vr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Cu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Nu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Nu(e,t);o.branches.push(n);const s=l&&l(o,n,!1);mu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Au(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Au(t,o+e.branches.length-1,a)}}}))));function Nu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?rc(e.condition,Eu(e,t,a),oc(a.helper(kr),['""',"true"])):Eu(e,t,a)}function Eu(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Ic(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Yr?i.arguments[1].returns:i;return 13===t.type&&Oc(t,a),Ic(t,n,a),e}var i}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Ou(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Cc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=oc(l(Pr),[t.source]),o=Cc(e),i=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Nc(e)?e:o&&1===e.children.length&&Nc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Ic(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Ic(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ec(a.inSSR,r.isComponent))):n(Ac(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ec(a.inSSR,r.isComponent))):l(Ac(a.inSSR,r.isComponent))),i){const e=ic(ju(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",i.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(ju(t.parseResult),r,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Iu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Uu=/^\(|\)$/g;function Ou(e,t){const a=e.loc,l=e.content,n=l.match(Pu);if(!n)return;const[,s,o]=n,i={source:Mu(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Uu,"").trim();const c=s.indexOf(r),u=r.match(Iu);if(u){r=r.replace(Iu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=Mu(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=Mu(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=Mu(a,r,c)),i}function Mu(e,t,a){return nc(t,!1,gc(e,a,t.length))}function ju({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Ru=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Du(e,t,a=Ru){t.helper(Wr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(i=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Cc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:v}=n,{arg:m=nc("default",!0),exp:h}=p;let g;cc(m)?g=m?m.content:"default":i=!0;const b=a(h,f,v);let y,w,x;if(y=wc(n,"if"))i=!0,o.push(rc(y.exp,zu(m,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Cc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,zu(m,b),Lu):zu(m,b)}}else if(x=wc(n,"for")){i=!0;const e=x.parseResult||Ou(x.exp);e&&o.push(oc(t.helper(Pr),[e.source,ic(ju(e),zu(m,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(m,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:qu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return o.length&&(f=oc(t.helper(Ur),[f,tc(o)])),{slots:f,hasDynamicSlots:i}}function zu(e,t){return ac([lc("name",e),lc("fn",t)])}function qu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||qu(a.children))return!0;break;case 9:if(qu(a.branches))return!0;break;case 10:case 11:if(qu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return oc(t.helper(Nr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&wc(e,"is");if(o&&o.exp)return oc(t.helper(Nr),[o.exp]);const i=dc(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Cr),t.components.add(l),Uc(l,"component"))}(e,t):`"${a}"`;const o=we(s)&&s.callee===Nr;let i,r,c,u,d,_,p=0,f=o||s===fr||s===vr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Ar),t.directives.add(e.name),a.push(Uc(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===mr&&(f=!0,p|=1024),n&&s!==fr&&s!==mr){const{slots:a,hasDynamicSlots:l}=Du(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,v=!1,m=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,o=re(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ne(s)||(g=!0),o&&Ne(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?v=!0:"class"===s?m=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(v=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(o)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,v="bind"===a,m="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||v&&kc(l,"is")&&Ju(o))continue;if(m&&s)continue;if((v&&kc(l,"key")||m&&_&&kc(l,"vue:before-update"))&&(p=!0),v&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(v||m)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),i)),c=[]),u.push(v?r:{type:14,loc:f,callee:t.helper(Dr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ae(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),i)),k=u.length>1?oc(t.helper(Mr),u,i):u[0]):c.length&&(k=ac(Wu(c),i)),b?f|=16:(m&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(v||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=oc(t.helper(Fr),[k]):(n&&!cc(n.value)&&(n.value=oc(t.helper(jr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=oc(t.helper(Lr),[s.value])));break;case 14:break;default:k=oc(t.helper(Fr),[oc(t.helper(Rr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||re(s))&&Ku(o,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Nc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Pe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=ic([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=oc(t.helper(Ir),o,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=nc(Me(Pe(e)),!0,o.loc)}else i=sc([`${a.helperString(Br)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Br)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(i,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Pe(o.content):`${a.helperString(zr)}(${o.content})`:(o.children.unshift(`${a.helperString(zr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(o,"."),n.includes("attr")&&ed(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(o,nc("",!0,s))]}:{props:[lc(o,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:oc(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!hc(o))return sd();const i=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(i,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const od=new WeakSet,id=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||od.has(e))return;return od.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Oc(l,t),e.codegenNode=oc(t.helper(Yr),[a.exp,ic(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Xc(a,l))}(e,t):e,[s,o]=[[ld,Cu,id,Tu,Yu,Hu,Fu,td],{on:Xu,bind:Qu,model:nd}];return vu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),vd=Symbol(""),md=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[vd]:"withKeys",[md]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=D("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=D("passive,once,capture"),Sd=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Cd=D("left,right"),Nd=D("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ed=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:oc(a.helperString(Or),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,o=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?o.push(l):Cd(l)?cc(e)?Nd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ad(n,"onContextmenu")),i.includes("middle")&&(n=Ad(n,"onMouseup")),i.length&&(s=oc(a.helper(fd),[s,JSON.stringify(i)])),!o.length||cc(n)&&!Nd(n.content)||(s=oc(a.helper(vd),[s,JSON.stringify(o)])),r.length){const e=r.map(Oe).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(md)})},Id=Object.create(null);function Ud(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Id[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ed,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Id[a]=s}fo(Ud);var Od=Object.freeze({__proto__:null,BaseTransition:ql,Comment:Ns,EffectScope:qe,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:As,Suspense:kl,Teleport:$s,Text:Cs,Transition:ui,TransitionGroup:Ai,VueElement:si,callWithAsyncErrorHandling:Oa,callWithErrorHandling:Ua,camelize:Pe,capitalize:Oe,cloneVNode:Ws,compatUtils:null,compile:Ud,computed:xo,createApp:sr,createBlock:Ls,createCommentVNode:Ys,createElementBlock:js,createElementVNode:Vs,createHydrationRenderer:ms,createPropsRestProxy:Po,createRenderer:vs,createSSRApp:or,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:ai,defineEmits:$o,defineExpose:So,defineProps:ko,defineSSRCustomElement:li,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:so,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Uo,handleError:Ma,hydrate:nr,initCustomFormatter:jo,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Fo,isProxy:ia,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:vo,isShallow:oa,isVNode:Fs,markRaw:ca,mergeDefaults:To,mergeProps:eo,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:vn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:mn,onUpdated:fn,openBlock:Ps,popScopeId:fl,provide:El,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:va,registerRuntimeCompiler:fo,render:lr,renderList:En,renderSlot:Pn,resolveComponent:kn,resolveDirective:Cn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Os,setDevtoolsHook:ol,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:ma,ssrContextKey:Oo,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:Me,toHandlers:Un,toRaw:ra,toRef:Na,toRefs:Sa,transformVNodeArgs:Ds,triggerRef:ba,unref:ya,useAttrs:Ao,useCssModule:oi,useCssVars:ii,useSSRContext:Mo,useSlots:No,useTransitionState:Dl,vModelCheckbox:ji,vModelDynamic:Bi,vModelRadio:Fi,vModelSelect:Ri,vModelText:Mi,vShow:Yi,version:Ro,warn:Ta,watch:Ml,watchEffect:Pl,watchPostEffect:Il,watchSyncEffect:Ul,withAsyncContext:Io,withCtx:ml,withDefaults:Co,withDirectives:wn,withKeys:Ji,withMemo:Lo,withModifiers:Wi,withScopeId:vl});var Md={props:["content"],watch:{content:function(e,t){}},render(){return Uo(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const jd=["id"],Ld=["aria-labelledby"],Fd={class:"dropdown-item"};var Rd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=No(),n=va([]);va([]);const s=va([]),o=va(null),i=va(null),r=e;let c=null;_n((()=>{c=$(o.value).parent().closest("div").css("overflow"),1==r.auto_load&&d();let e={dropdown:o.value,dropdown_button:i.value};$(o.value).on("show.bs.dropdown",(function(){$(o.value).parent().closest("div").css("overflow","visible"),null!=r.f_on_open&&r.f_on_open(e)})),$(o.value).on("hide.bs.dropdown",(function(){$(o.value).parent().closest("div").css("overflow",c),null!=r.f_on_close&&r.f_on_close(e)}))}));const u=xo((()=>null!=r.button_class?r.button_class:"btn-link"));async function d(){if(n.value=[],null==l||null==l.menu)return;let e=l.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),s.value=[],e.forEach((e=>{let t=e;s.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Ps(),js("div",{class:"dropdown",ref_key:"dropdown",ref:o,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",u.value]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:i,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Pn(t.$slots,"title")],14,jd),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),js("li",Fd,[Hs(Md,{content:e},null,8,["content"])])))),256))],8,Ld)],512))},__file:"http_src/vue/dropdown.vue"};const Dd=e=>i18n(e);function zd(e){const t={button_list:Bd(!0),button_array:Bd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function qd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return R.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=v.types[e.render_type])return e.render_func=v.getFormatter(e.render_type),e.render_func(l);if(null!=R[e.render_type])return R[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Bd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:Dd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),Dd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Rd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Vd(e,t,a){let l=Gd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let v=f.rsp;null!=e.rsp_records_field&&(v=f.rsp[e.rsp_records_field]);let m=f.query_info;return null!=e.rsp_query_info_field&&(m=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:v,query_info:m}}}function Hd(e){return e=>null!=e.title_i18n?Dd(e.title_i18n):null!=e.title?e.title:""}function Gd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Wd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Vd(o,l,n),get_column_id:Gd(o),print_column_name:Hd(),print_html_row:qd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Kd={};async function Jd(e){return null==Kd[e]&&(Kd[e]=ntopng_utility.http_request(e)),await Kd[e]}const Yd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Zd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Xd={get_filter_const:Jd,get_filters_object:Zd,load_filters_data:Yd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},Qd=["multiple"],e_=["selected","value","disabled"],t_=["label"],a_=["selected","value","disabled"];var l_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=va([]),o=va([]),i=va({}),r=va([]),c=va(0),u=e;let d=!0;function _(){!function(){if(s.value=[],o.value=[],null==u.options)return;let e={};u.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),h(),m()}_n((()=>{u.options&&(u.disable_change&&d||_())})),Ml((()=>u.selected_option),((e,t)=>{h(e),f()}),{flush:"pre"}),Ml((()=>u.selected_options),((e,t)=>{m(),f()}),{flush:"pre"}),Ml([c],((e,t)=>{p()}),{flush:"post"}),Ml((()=>u.options),((e,t)=>{1!=u.disable_change&&null!=e&&_()}),{flush:"pre"});const p=()=>{let e=l.value;0==d&&x(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:u.add_tag&&!u.multiple}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null==t.element){let e={label:t.text,value:t.id};return n("update:selected_option",e),void n("select_option",e)}let a=t.element._value,l=w(a);if(a!=u.selected_option&&(n("update:selected_option",l),n("select_option",l)),!u.multiple)return;r.value=r.value.filter((e=>e!=a)),r.value.push(a);let s=y(r.value);n("update:selected_options",s),n("change_selected_options",s)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!u.multiple)return;r.value=r.value.filter((e=>e!=t));let a=w(t),l=y(r.value);n("unselect_option",a),n("update:selected_options",l),n("change_selected_options",l)}))),d=!1,f()};function f(){let e=l.value;if(u.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=b(u.selected_option);$(e).val(t),$(e).trigger("change")}}function v(e){if(!u.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function m(){null!=u.selected_options&&u.multiple&&(r.value=[],u.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function h(e){null!=e||u.multiple||(e=g()),i.value=e}function g(){return null==u.selected_option?u.options[0]:u.selected_option}function b(e){let t;return null==e&&(e=g()),t=null!=e.value?e.value:e.label,t}function y(e){let t=e.map((e=>w(e)));return t}function w(e){let t=function(e){null==e&&(e=b());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=u.options.find((e=>e.label==t.label));return a}function x(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:p}),vn((()=>{x()})),(t,a)=>(Ps(),js("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type",multiple:e.multiple},[(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),js("option",{class:"ntopng-dropdown-min-width no-wrap",selected:v(e),value:e.value,disabled:e.disabled},te(e.label),9,e_)))),256)),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("optgroup",{label:e.group},[(Ps(!0),js(Ss,null,En(e.options,((e,t)=>(Ps(),js("option",{selected:v(e),value:e.value,disabled:e.disabled},te(e.label),9,a_)))),256))],8,t_)))),256))],8,Qd))},__file:"http_src/vue/select-search.vue"},n_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const s_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},o_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},i_=["href","title"],r_=["title"],c_=["href","title"],u_=["title"],d_=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),__=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),p_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},f_={class:"navbar-nav"},v_=["onClick"],m_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},h_=["onClick"],g_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},b_=["onClick"],y_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},w_={class:"navbar-nav ms-auto"},x_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),k_=["href"],$_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];n_.render=function(e,t,a,l,n,s){return Ps(),js("nav",s_,[Vs("span",o_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),js("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,i_)):(Ps(),js("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,r_)),(Ps(!0),js(Ss,null,En(e.secondary_title_list,(e=>(Ps(),js(Ss,null,[Ks(" / "),e.href?(Ps(),js("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),js("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],10,c_)):(Ps(),js("span",{key:1,title:e.title},te(e.label),9,u_))],64)))),256))]),d_,__,Vs("div",p_,[Vs("ul",f_,[(Ps(!0),js(Ss,null,En(e.items_table,(e=>(Ps(),js(Ss,null,[e.active?(Ps(),js(Ss,{key:0},[e.active?(Ps(),js("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Ps(),js("span",m_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,v_)):(Ps(),js("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",g_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,h_))],64)):(Ps(),js("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",y_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,b_))],64)))),256))]),Vs("ul",w_,[x_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},[...$_],8,k_)])])])},n_.__file="http_src/vue/page-navbar.vue";var S_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const C_=["innerHTML"];S_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Ps(),js("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,C_),e.no_close_button?Ys("v-if",!0):(Ps(),js("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},S_.__file="http_src/vue/alert-info.vue";var N_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||N.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const A_={style:{width:"100%"},ref:"chart"};N_.render=function(e,t,a,l,n,s){return Ps(),js("div",A_,null,512)},N_.__file="http_src/vue/chart.vue";var E_={components:{"select-search":l_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),N.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),N.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const T_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),P_={class:"input-group"},I_={class:"form-group"},U_={class:"controls"},O_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},M_={class:"btn-group ms-2"},j_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),L_=["disabled"],F_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),R_=["disabled"],D_=["title"],z_=[T_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],q_={class:"d-flex align-items-center ms-2"},B_=["disabled"],V_={class:"btn-group"},H_=["disabled","title"],G_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],W_=["disabled","title"],K_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],J_=["disabled","title"],Y_=[T_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Z_=["disabled","title"],X_=[T_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],Q_=["disabled","title"],ep=[T_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],tp=["disabled","title"],ap=[T_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function lp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}lp("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),E_.render=function(e,t,a,l,n,s){const o=kn("select-search");return Ps(),js("div",P_,[Vs("div",I_,[Vs("div",U_,[Vs("div",O_,[Pn(e.$slots,"begin"),Vs("div",null,[Hs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",M_,[j_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,L_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),F_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,R_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},[...z_],8,D_),[[Yi,n.wrong_date||n.wrong_min_interval]])]),Vs("div",q_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,B_),Vs("div",V_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},[...G_],8,H_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},[...K_],8,W_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},[...Y_],8,J_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},[...X_],8,Z_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},[...ep],8,Q_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},[...ap],8,tp),Pn(e.$slots,"extra_buttons")])])])])])])},E_.__scopeId="data-v-6ae24a28",E_.__file="http_src/vue/date-time-range-picker.vue";var np=Jl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const sp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},op={class:"modal-content"},ip={class:"modal-header"},rp={class:"modal-title"},cp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),up={class:"modal-body"},dp={class:"modal-footer"},_p=Vs("div",{class:"mr-auto"},null,-1),pp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);np.render=function(e,t,a,l,n,s){return Ps(),js("div",{onSubmit:t[0]||(t[0]=Wi(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",sp,[Vs("div",op,[Vs("div",ip,[Vs("h5",rp,[Pn(e.$slots,"title")]),cp]),Vs("div",up,[Pn(e.$slots,"body")]),Vs("div",dp,[_p,Pn(e.$slots,"footer"),pp])])])],544)},np.__file="http_src/vue/modal.vue";const fp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},vp=e=>mp(e)||hp(e),mp=e=>new RegExp(fp.ipv4).test(e),hp=e=>new RegExp(fp.ipv6).test(e),gp=a;function bp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=bp("vlan"),a=gp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=gp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return gp.REGEXES.macAddress;if("ip,cidr"==e){return`(${bp("ip")})|(${bp("cidr")})`}return gp.REGEXES[e]}const yp={get_data_pattern:bp,validateIP:vp,validateIPv4:mp,validateIPv6:hp,validateHostName:e=>new RegExp(fp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(fp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(fp.singleword).test(e)};var wp={components:{modal:np,"select-search":l_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):yp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const xp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),kp={autocomplete:"off"},$p={class:"form-group row"},Sp=xp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Cp={class:"col-sm-8"},Np=xp((()=>Vs("hr",null,null,-1))),Ap={class:"dt-filter-template-container form-group row"},Ep={class:"col-form-label col-sm-3"},Tp={class:"col-sm-8"},Pp={class:"input-group mb-3"},Ip={class:"input-group-prepend col-sm-3"},Up={key:0,class:"col-sm-9"},Op={key:1,class:"col-sm-9"},Mp=["pattern","required"],jp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Lp=["disabled"];lp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),wp.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal");return Ps(),Ls(i,{id:n.id_modal,ref:"modal"},{title:ml((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:ml((()=>[Vs("form",kp,[Vs("div",$p,[Sp,Vs("div",Cp,[Hs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Np,Vs("div",Ap,[Vs("label",Ep,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Tp,[Vs("div",Pp,[Vs("div",Ip,[Hs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Ps(),js("div",Up,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Ps(),js("div",Op,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Ps(),js(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,Mp),[[Mi,n.input_value]]),Vs("span",jp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Lp)])),_:1},8,["id"])},wp.__scopeId="data-v-3119c83e",wp.__file="http_src/vue/modal-filters.vue";let Fp,Rp,Dp,zp,qp=[],Bp=null!=window.location.toString().match(/alert_stats.lua/),Vp=ntopng_url_manager.get_url_entry("status");null!=Vp&&""!=Vp||(Vp="historical");let Hp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Bp);const Gp=async function(){qp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Bp,Hp),qp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),qp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Fp={},Rp={},qp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Fp[e.id]=e.label)),Rp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=qp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Wp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":E_,"modal-filters":wp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Gp();zp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Fp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Dp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Rp[e.key]&&!Array.isArray(Rp[e.key])&&(e.operators=Rp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=qp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Bp,status_view:Vp,page:Hp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Rp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(qp.map((e=>e.id))),zp.tagify.removeAllTags();let a=Xd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=qp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&zp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Kp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Jp={style:{width:"100%"}},Yp={class:"mb-1"},Zp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Xp={class:"btn-group",id:"statusSwitch",role:"group"},Qp=[Kp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],ef=[Kp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],tf=[Kp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],af={key:0,class:"d-flex mt-1",style:{width:"100%"}},lf=["placeholder"],nf=[Kp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],sf=[Kp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];lp("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Wp.render=function(e,t,a,l,n,s){const o=kn("modal-filters"),i=kn("date-time-range-picker");return Ps(),js("div",Jp,[Vs("div",Yp,[Hs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:ml((()=>[n.is_alert_stats_url?(Ps(),js("div",Zp,[Vs("div",Xp,["flow"!=n.page?(Ps(),js("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},[...Qp],2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},[...ef],2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},[...tf],2)])])):Ys("v-if",!0),Pn(e.$slots,"begin")])),extra_buttons:ml((()=>[Pn(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Ps(),js("div",af,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,lf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},[...nf],512),[[Yi,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},[...sf],512),[[Yi,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},Wp.__scopeId="data-v-aaee59ea",Wp.__file="http_src/vue/range-picker.vue";const of={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},rf={class:"col-sm-12 col-md-5"},cf={class:"dataTables_info",role:"status","aria-live":"polite"},uf={class:"col-sm-12 col-md-7"},df={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},_f={class:"pagination"},pf={class:"paginate_button page-item previous"},ff=["onClick"],vf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},mf={class:"paginate_button page-item previous"};var hf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=va(0),o=va(0),i=va(0),r=va(0),c=va("");function u(){if(null==l.total_rows)return;let e=l.per_page;i.value=Number.parseInt((l.total_rows+e-1)/e),o.value=6,i.value<o.value&&(o.value=i.value),r.value>=i.value&&i.value>0&&(r.value=i.value-1,s.value=i.value-o.value,p(r.value)),f()}_n((()=>{u()})),Ml((()=>[l.total_rows,l.per_page]),((e,t)=>{u()}),{flush:"pre",immediate:!0});const d=xo((()=>!(i.value<6)&&r.value>=o.value-1)),_=xo((()=>!(i.value<6)&&r.value<i.value-o.value+1));function p(e,t){null!=e&&(r.value=e),null!=t&&(s.value=t),r.value==s.value&&s.value>0&&(s.value-=1);const a=s.value+o.value-1;r.value==a&&i.value-1>a&&(s.value+=1),r.value>i.value-1&&0!=i.value&&(r.value=i.value-1,s.value=r.value),f(),n("change_active_page",r.value)}function f(){c.value="Showing page %active_page of %total_pages: total %total_rows rows".replace("%active_page",v(`${r.value+1}`)).replace("%total_pages",v(`${i.value}`)).replace("%total_rows",v(`${l.total_rows}`)).replace("%per_page",v(`${l.per_page}`))}function v(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:p}),(e,t)=>(Ps(),js(Ss,null,[Ys(" PerPage "),Vs("div",of,[Ys(" div col-md-5 "),Vs("div",rf,[Vs("div",cf,te(c.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",uf,[Vs("div",df,[Vs("ul",_f,[wn(Vs("li",pf,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>p(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yi,d.value]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{p(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),js(Ss,null,En(o.value,(e=>(Ps(),js("li",{onClick:t=>p(s.value+e-1),class:K([{active:r.value==s.value+e-1},"paginate_button page-item"])},[Vs("a",vf,te(s.value+e),1),Ys('  :key="total_rows"')],10,ff)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:r.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{p(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",mf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>p(i.value-1,i.value-o.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yi,_.value]])])])],512),[[Yi,i.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const gf={class:"text-center"},bf={class:"sr-only position-absolute"};var yf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=va(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Ps(),js("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",gf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",bf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const wf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},xf=["checked","title"],kf=["innerHTML"];var $f={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=t,l=e,n=va(!1);return _n((()=>{n.value=l.value})),Ml((()=>l.value),((e,t)=>{n.value=l.value}),{flush:"pre"}),(t,l)=>(Ps(),js("div",wf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==n.value,onClick:l[0]||(l[0]=e=>(a("update:value",!n.value),void a("change_value",!n.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,xf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,kf)]))},__file:"http_src/vue/switch.vue"};const Sf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Cf=["id"],Nf={class:"button-group mb-2"},Af={style:{float:"left","margin-top":"0.5rem"}},Ef=["value"],Tf=Sf((()=>Vs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Pf={style:{"text-align":"right"},class:"form-group"},If={key:0,class:"d-inline"},Uf=[Sf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],Of=[Sf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},jf=Sf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Lf={class:"form-check form-switch ms-1"},Ff=["checked","onClick","id"],Rf=["for","innerHTML"],Df={key:0,class:"centered-message"},zf=["innerHTML"],qf=["data-resizable-columns-id"],Bf=["onClick","data-resizable-column-id"],Vf={style:{display:"flex"}},Hf=["innerHTML"],Gf={class:"fa fa-fw fa-sort-up"},Wf={class:"fa fa-fw fa-sort-down"},Kf={key:0,scope:"col",class:""},Jf=["innerHTML"],Yf={key:0,style:{},class:"",scope:"col"},Zf=[Sf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Xf={key:1,class:"mt-2"},Qf={class:"text-end"},ev={style:{},class:"query text-end"},tv={class:"records"},av={class:"text-start"},lv={id:"historical_flows_table-query-time",style:{},class:"query"},nv={class:"seconds"},sv=["title"];var ov={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=a,n={emit:l,h:Uo,nextTick:Ja},s=e,o=e=>i18n(e);va(!0);const i=va(null),r=va(null),c=va(null);va([]);let u=0,d=[];const _=va([]),p=va([]),f=va(0),v=[10,20,40,50,80,100],m=va(10),h=window.store,g=va(""),y=va(null),w=va(!1),k=va(null),S=va(null),C=va(!1),N=va(!1),A=va(!1);_n((async()=>{null!=s.columns&&P()}));const E=xo((()=>{if(null==s.show_autorefresh||s.show_autorefresh<=0)return"";return o("table.autorefresh").replace("%time",s.show_autorefresh)}));function T(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function P(){await async function(){let e=await async function(){if(null==s.csrf)return{};const e={table_id:s.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let l=await b.http_request(a),n={};return l.forEach((e=>{n[e.id]=e})),n}(),t=!0;for(let a in e)t&=e[a]?.sort;_.value=s.columns.map(((a,l)=>{let n=[],o="";null!=s.f_get_column_classes&&(n=s.f_get_column_classes(a)),null!=s.f_get_column_style&&(o=s.f_get_column_style(a));let i=s.get_column_id(a),r=e[i],c=r?.sort;return c=1==t&&null==c&&null!=s.default_sort&&i==s.default_sort.column_id?s.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Z(a),order:r?.order||l,classes:n,style:o,data:a}})),await L()}(),await Y(),j(),await Ja(),c.value.load_menu(),l("loaded")}let I;function U(){0!=A.value?I=setInterval((()=>{q()}),1e3*s.show_autorefresh):clearInterval(I)}async function O(){await async function(){M.value+=1,await Ja()}(),j()}Ml((()=>[s.id,s.columns]),((e,t)=>{P()}),{flush:"pre"});const M=va(0);function j(){let e={store:h,minWidth:32};$(r.value).resizableColumns(e)}async function L(){if(null==s.csrf)return;let e={table_id:s.id,visible_columns_ids:[],csrf:s.csrf};e.visible_columns_ids=_.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function F(){s.columns.forEach((e=>{let t=`${s.id}-${s.get_column_id(e)}`;h.remove(t)})),await O()}function R(){D.value+=1,q(0)}const D=va(0);const z=va(0);async function q(e){null!=e&&(u=e),null==u&&(u=0),1==s.paging||B?await Y():X(),z.value+=1}let B=!1,H=!1;async function G(e){B=!0,H=e||!1,H?y.value.change_active_page():y.value.change_active_page(0,0),await Ja(),B=!1,H=!1}let W,J=!0;async function Y(){w.value=!H;let e=await s.get_rows(u,m.value,_.value,g.value,J);k.value=null,null!=e.query_info&&(k.value=e.query_info),J=!1,f.value=e.rows.length,1==s.paging&&(f.value=e.total_rows),d=e.rows,X(),w.value=!1,l("rows_loaded",e)}function Z(e){return null==s.f_is_column_sortable||s.f_is_column_sortable(e)}function X(){let e=0;if(0==s.paging&&(e=u*m.value),0==s.paging){let e=null!=s.f_sort_rows?s.f_sort_rows:(e,t,a)=>{let l=s.print_html_row(e.data,t),n=s.print_html_row(e.data,a);return 1==e.sort?l.localeCompare(n):n.localeCompare(l)},t=function(){let e=_.value.find((e=>0!=e.sort));return e}();d=d.sort(((a,l)=>e(t,a,l)))}p.value=d.slice(e,e+m.value)}async function Q(){let e=1e3;null!=W?clearTimeout(W):e=0,W=setTimeout((async()=>{await Y(),W=null}),e)}function ee(e){NtopUtils.copyToClipboard(k.value.query,S.value)}return t({load_table:P,refresh_table:G,get_columns_defs:function(){return _.value},get_rows_num:function(){return f.value},search_value:function(e){g.value=e,Q()}}),(t,a)=>(Ps(),js(Ss,null,[Pn(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:i,id:e.id},[w.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",Nf,[Ys(" TableHeader "),Vs("div",Af,[Vs("label",null,[Ks(" Show "),wn(Vs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>m.value=e),onChange:R},[(Ps(),js(Ss,null,En(v,(e=>Vs("option",{value:e},te(e),9,Ef))),64))],544),[[Ri,m.value]]),Ks(" Entries ")])]),Tf,Vs("div",Pf,[Pn(t.$slots,"custom_header"),e.enable_search?(Ps(),js("div",If,[Vs("label",null,[Ks(te(o("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>g.value=e),onInput:Q,class:""},null,544),[[Mi,g.value]])])])):Ys("v-if",!0),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:F},[...Uf]),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>G())},[...Of]),e.show_autorefresh>0?(Ps(),js("div",Mf,[Hs($f,{value:A.value,"onUpdate:value":a[3]||(a[3]=e=>A.value=e),class:"me-2 mt-1",title:E.value,style:{},onChange_value:U},null,8,["value","title"])])):Ys("v-if",!0),Hs(Rd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:c},{title:ml((()=>[jf])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(_.value,(t=>(Ps(),js("div",Lf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){C.value=!0,e.visible=!e.visible,s.paging&&await Y(),await O(),await L(),C.value=!1}(t),type:"checkbox",id:T(t)},null,8,Ff),Vs("label",{class:"form-check-label",for:T(t),innerHTML:e.print_column_name(t.data)},null,8,Rf)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])]),Ys(" TableHeader "),(Ps(),js("div",{key:M.value,style:{overflow:"auto",width:"100%"}},[Ys(" Table "),1==e.display_message?(Ps(),js("div",Df,[Vs("span",{innerHTML:e.message_to_display},null,8,zf)])):Ys("v-if",!0),Vs("table",{ref_key:"table",ref:r,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||w.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(_.value,((t,a)=>(Ps(),js(Ss,null,[t.visible?(Ps(),js("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,_.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(s.paging?await Y():X(),await L()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Vf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Hf),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Gf,null,512),[[Yi,1==t.sort&&t.sortable]]),wn(Vs("i",Wf,null,512),[[Yi,2==t.sort&&t.sortable]])])],10,Bf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[C.value||N.value?Ys("v-if",!0):(Ps(!0),js(Ss,{key:0},En(p.value,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(_.value,((a,l)=>(Ps(),js(Ss,null,[a.visible?(Ps(),js("td",Kf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Ps(),js("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Jf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Ps(),Ls(Md,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&p.value.length<m.value?(Ps(!0),js(Ss,{key:1},En(m.value-p.value.length,(e=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(_.value,((e,t)=>(Ps(),js(Ss,null,[e.visible?(Ps(),js("td",Yf,[...Zf])):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],10,qf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Ps(),Ls(hf,{ref_key:"select_table_page",ref:y,key:D.value,total_rows:f.value,per_page:m.value,onChange_active_page:q},null,8,["total_rows","per_page"]))]),null!=k.value?(Ps(),js("div",Xf,[Vs("div",Qf,[Vs("small",ev,[Vs("span",tv,te(k.value.num_records_processed),1),Ks(".")])]),Vs("div",av,[Vs("small",lv,[Ks("Query performed in "),Vs("span",nv,te((k.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:k.value.query,onClick:ee,ref_key:"query_info_sql_button",ref:S},"SQL",8,sv)])])])):Ys("v-if",!0)],8,Cf)],64))}};lp("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),ov.__scopeId="data-v-61956e9e",ov.__file="http_src/vue/table.vue";var iv={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=a,n=e,s=va({}),o=va(null),i=va(!1);_n((async()=>{null==n.table_id&&null==n.table_config_id||c()})),Ml((()=>[n.table_id,n.table_config_id]),((e,t)=>{c()}),{flush:"pre"});const r=xo((()=>null!=n.table_id?n.table_id:n.table_config_id));async function c(){i.value=!1,await Ja();let e=n.table_config_id;null==e&&(e=n.table_id),s.value=await Wd.build_table(http_prefix,e,n.f_map_columns,n.get_extra_params_obj),null!=n.f_map_config&&(s.value=n.f_map_config(s.value)),i.value=!0,await Ja()}function u(){l("loaded")}function d(e){l("custom_event",e)}function _(e){l("rows_loaded",e)}return t({refresh_table:e=>{o.value.refresh_table(e)},get_columns_defs:()=>null==o.value?[]:o.value.get_columns_defs(),get_rows_num:()=>o.value.get_rows_num(),search_value:e=>{o.value.search_value(e)}}),(t,a)=>i.value?(Ps(),Ls(ov,{key:0,ref_key:"table",ref:o,id:r.value,columns:s.value.columns,get_rows:s.value.get_rows,get_column_id:s.value.get_column_id,print_column_name:s.value.print_column_name,print_html_row:s.value.print_html_row,print_vue_node_row:s.value.print_vue_node_row,f_is_column_sortable:s.value.f_is_column_sortable,f_get_column_classes:s.value.f_get_column_classes,f_get_column_style:s.value.f_get_column_style,display_empty_rows:s.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:s.value.enable_search,default_sort:s.value.default_sort,show_autorefresh:s.value.show_autorefresh,paging:s.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:u,onRows_loaded:_,onCustom_event:d},{custom_header:ml((()=>[Pn(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},rv={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Ps(),js("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const cv={id:"script-description",class:"notes bg-light border",role:"alert"},uv=["innerHTML"],dv={key:0},_v=["innerHTML"];var pv={__name:"note-list",props:{note_list:Array,sub_note_list:Array,add_sub_notes:Boolean},setup(e){const t=e=>i18n(e),a=e;return(e,l)=>(Ps(),js("div",cv,[Vs("b",null,te(t("notes")),1),Vs("ul",null,[(Ps(!0),js(Ss,null,En(a.note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,uv)))),256)),a.add_sub_notes?(Ps(),js("ul",dv,[(Ps(!0),js(Ss,null,En(a.sub_note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,_v)))),256))])):Ys("v-if",!0)])]))},__file:"http_src/vue/note-list.vue"},fv=Jl({components:{modal:np},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const vv=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),mv=["innerHTML"],hv={key:0,style:{height:"95%"}},gv={class:"tab-content",style:{height:"100%"}},bv={class:"row"},yv={class:"form-group mb-3 col-md-3 has-feedback"},wv={class:"form-group mb-3 col-md-9 text-right asd"},xv={class:"radio-inline",style:{"margin-left":"1rem"}},kv={class:"radio-inline"},$v={class:"row",id:"pcapDownloadModal_advanced",style:{}},Sv={class:"form-group mb-3 col-md-12 has-feedback"},Cv=vv((()=>Vs("br",null,null,-1))),Nv={class:"form-label"},Av=vv((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Ev={class:"input-group"},Tv=vv((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Pv=vv((()=>Vs("br",null,null,-1))),Iv={class:"form-label"},Uv=vv((()=>Vs("br",null,null,-1))),Ov=vv((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));lp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),fv.render=function(e,t,a,l,n,s){const o=kn("modal");return Ps(),Ls(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ml((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:ml((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,mv),1==e.data_available?(Ps(),js("form",hv,[Vs("div",gv,[Vs("div",bv,[Vs("div",yv,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",wv,[Vs("label",xv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",kv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",$v,[Vs("div",Sv,[Cv,Vs("label",Nv,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Av]),Vs("div",Ev,[Tv,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Mi,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yi,e.invalid_bpf]])]),Pv,Vs("label",Iv,te(e.i18n("traffic_recording.filter_examples"))+":",1),Uv,Ov])],512),[[Yi,e.show_menu]])])])):Ys("v-if",!0)])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yi,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yi,2==e.data_available]])])),_:1},8,["id","onApply"])},fv.__scopeId="data-v-0be978c4",fv.__file="http_src/vue/modal-traffic-extraction.vue";const Mv=e=>(pl("data-v-089b0491"),e=e(),fl(),e),jv=Mv((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Lv={class:"nav nav-tabs"},Fv=["disabled"],Rv={key:0,style:{"min-height":"8.5rem"}},Dv={class:"form-group ms-2 me-2 mt-3 row"},zv={class:"col-form-label col-sm-4"},qv={class:"col-sm-6"},Bv=["pattern"],Vv={key:1,style:{"min-height":"8.5rem"}},Hv={class:"form-group ms-2 me-2 mt-3 row"},Gv={class:"col-form-label col-sm-4"},Wv={class:"col-sm-8"},Kv={value:"name"},Jv={value:"date"},Yv={class:"form-group ms-2 me-2 mt-3 row"},Zv={class:"col-form-label col-sm-4"},Xv={class:"col-sm-8"},Qv=["value"],em={class:"form-group ms-2 me-2 mt-3 row"},tm={class:"custom-control custom-switch"},am={class:"custom-control-label ms-1 form-check-label"},lm=["disabled"],nm=["disabled"],sm=["disabled"];var om={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=va(null),n=va("add"),s=va(""),o=va(!1),i=va(""),r=va(!0),c=va(""),u=va(""),d=va([]),_=va("date"),p=e,f=a;let v=NtopUtils.REGEXES.singleword;const m=xo((()=>!new RegExp(v).test(u.value))),h=xo((()=>""==s.value));function g(){if(null!=p.page)return p.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let b=null;function y(){b!=_.value&&(d.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),d.value.length>0&&(s.value=d.value[0]),b=_.value)}let w=!0;const x=async()=>{let e;if(r.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),a={snapshot_name:u.value,filters:e,page:t};a.csrf=p.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(a)}),w=!0}catch(e){console.error(e)}S(),f("added_snapshots",a)},k=()=>{S();let e=s.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},$=async e=>{let t=s.value.name;1==e&&(t="*");let a={snapshot_name:t,page:g()};a.csrf=p.csrf;let l=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(a)}),w=!0}catch(e){console.error(e)}f(1==e?"deleted_all_snapshots":"deleted_snapshot",a),S()},S=()=>{l.value.close()};t({show:()=>{!async function(){n.value="add",u.value="",r.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=C("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),c.value=t;let _=C("snapshots.apply_time");if(_=_.replace(/\%begin_time/,a),_=_.replace(/\%end_time/,l),i.value=_,w){w=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);d.value=ntopng_utility.object_to_array(a)}y(),d.value.length>0&&(s.value=d.value[0])}(),l.value.show()},close:S}),_n((()=>{}));const C=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(C("snapshots.manage"))+" ",1),jv])),body:ml((()=>[Vs("ul",Lv,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>n.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==n.value}]),href:"#"},te(C("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==d.value.length&&"select"==e||(n.value=e)})("select"))},[Vs("a",{disabled:0==d.value.length,class:K(["nav-link",{active:"select"==n.value,"not-allowed":0==d.value.length}]),href:"#"},te(C("snapshots.manage")),11,Fv)])]),"add"==n.value?(Ps(),js("div",Rv,[Vs("div",Dv,[Vs("label",zv,[Vs("b",null,te(C("snapshots.name"))+":",1)]),Vs("div",qv,[wn(Vs("input",{pattern:ya(v),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>u.value=e)},null,8,Bv),[[Mi,u.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==n.value?(Ps(),js("div",Vv,[Vs("div",Hv,[Vs("label",Gv,[Vs("b",null,te(C("snapshots.order_by")),1)]),Vs("div",Wv,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>y()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Vs("option",Kv,te(C("snapshots.name")),1),Vs("option",Jv,te(C("snapshots.date")),1)],544),[[Ri,_.value]])])]),Vs("div",Yv,[Vs("label",Zv,[Vs("b",null,te(C("snapshots.select")),1)]),Vs("div",Xv,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>s.value=e)},[(Ps(!0),js(Ss,null,En(d.value,(e=>(Ps(),js("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Qv)))),256))],512),[[Ri,s.value]])])]),Vs("div",em,[Vs("div",tm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[ji,o.value]]),Vs("label",am,te(i.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:ml((()=>["add"==n.value?(Ps(),js("button",{key:0,type:"button",onClick:x,disabled:m.value,class:"btn btn-primary"},te(C("snapshots.add")),9,lm)):Ys("v-if",!0),"select"==n.value?(Ps(),js("button",{key:1,onClick:t[7]||(t[7]=e=>$(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(C("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==n.value?(Ps(),js("button",{key:2,type:"button",onClick:$,disabled:h.value,class:"btn btn-danger"},te(C("snapshots.delete")),9,nm)):Ys("v-if",!0),"select"==n.value?(Ps(),js("button",{key:3,type:"button",onClick:k,disabled:h.value,class:"btn btn-primary"},te(C("snapshots.apply")),9,sm)):Ys("v-if",!0)])),_:1},512))}};lp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),om.__scopeId="data-v-089b0491",om.__file="http_src/vue/modal-snapshot.vue";const im=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),rm=["innerHTML"],cm={class:"form-group mb-3"},um=["innerHTML"],dm={class:"alert_label"},_m={class:"form-check"},pm={class:"form-check-label"},fm={key:0,class:"form-check"},vm={class:"form-check-label"},mm={class:"form-check"},hm={class:"form-check-label"},gm={class:"form-check"},bm={class:"form-check-label"},ym={key:0,class:"exclude-domain-certificate"},wm={class:"alert_label"},xm={key:0,class:"form-check"},km={class:"form-check-label whitespace"},$m=["pattern","disabled"],Sm={key:1,class:"form-check"},Cm={class:"form-check-label whitespace"},Nm=["disabled","pattern"],Am={key:0,class:"form-group row"},Em={class:"col-form-label"},Tm={class:"mt-1"},Pm=["placeholder"],Im={class:"separator"},Um=im((()=>Vs("hr",{class:"separator"},null,-1))),Om={class:"form-group mb-3"},Mm={class:"custom-control custom-switch"},jm={class:"custom-control-label"},Lm={class:"alert alert-warning border",role:"alert"},Fm=["disabled"];var Rm={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=va(null),n=va("any"),s=va(!0),o=va(null),i=va(null),r=va(null),c=i18n("details.comment_placeholder"),u=a,d=e;Ml((()=>d.alert),((e,t)=>{null!=e&&(n.value="any",s.value=!0,o.value=""==e.info?.value?null:_(e.info?.value),i.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const _=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},p=()=>{if("domain"==n.value){let e=new RegExp(h);return null==o.value||0==e.test(o.value)}if("certificate"==n.value){let e=new RegExp(g);return null==i.value||0==e.test(i.value)}return!1},f=xo((()=>d.alert?.alert_name)),v=xo((()=>{let e={value:"",label:""};if("host"!=d.page||null==d.alert)return e;let t=d.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),m=xo((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=d.page||null==d.alert)return e;let t=d.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=a,e.srv_label=l,e}));let h=NtopUtils.REGEXES.domain_name_not_strict,g=NtopUtils.REGEXES.tls_certificate;const b=()=>{let e=d.page,t="domain"==n.value||"certificate"==n.value?n.value:"host",a={delete_alerts:s.value,label:r.value,type:t},l=null;"host"==t?("host"==n.value?l=v.value.value:"server_host"==n.value?l=m.value.srv_value:"client_host"==n.value&&(l=m.value.cli_value),a.alert_addr=l,"flow"==e?a.flow_alert_key=d.alert.alert_id.value:"host"==e&&(a.host_alert_key=d.alert.alert_id.value)):"domain"==t?(a.delete_alerts=!1,a.alert_domain=o.value):"certificate"==t&&(a.delete_alerts=!1,a.alert_certificate=i.value),y(),u("exclude",a)},y=()=>{l.value.close()};t({show:()=>{r.value="",l.value.show()},close:y}),_n((()=>{}));const w=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(w("exclude_check"))+": ",1),Vs("span",{innerHTML:f.value},null,8,rm)])),body:ml((()=>[Vs("div",cm,[Vs("div",null,[Vs("label",null,[Ks(te(w("exclude_check"))+' "',1),Vs("b",{innerHTML:f.value},null,8,um),Ks('". '),Vs("span",dm,te(w("exclude_for"))+":",1)]),Vs("div",_m,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",pm,[Vs("span",null,te(w("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),js("div",fm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",vm,[Vs("span",null,te(v.value.label),1)])])):Ys("v-if",!0),"flow"==e.page?(Ps(),js(Ss,{key:1},[Vs("div",mm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",hm,[Vs("span",null,te(w("client"))+": "+te(m.value.cli_label),1)])]),Vs("div",gm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",bm,[Vs("span",null,te(w("server"))+": "+te(m.value.srv_label),1)])])],64)):Ys("v-if",!0)]),null!=o.value||null!=i.value?(Ps(),js("div",ym,[Vs("label",null,[Vs("span",wm,te(w("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Ps(),js("div",xm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",km,[Vs("span",null,te(w("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(h),disabled:"domain"!=n.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,$m),[[Mi,o.value]])])):Ys("v-if",!0),null!=i.value?(Ps(),js("div",Sm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>n.value=e)},null,512),[[Fi,n.value]]),Vs("label",Cm,[Vs("span",null,te(w("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=n.value,"onUpdate:modelValue":a[7]||(a[7]=e=>i.value=e),pattern:ya(g),required:"",class:"form-check-label custom-width"},null,8,Nm),[[Mi,i.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=n.value?(Ps(),js("div",Am,[Vs("div",null,[Vs("label",Em,[Vs("b",null,te(w("show_alerts.add_a_comment")),1)])]),Vs("div",Tm,[wn(Vs("textarea",{placeholder:ya(c),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>r.value=e),maxlength:"450"},null,8,Pm),[[Mi,r.value]])])])):Ys("v-if",!0),wn(Vs("hr",Im,null,512),[[Yi,s.value]]),"domain"!=n.value&&"certificate"!=n.value?(Ps(),js(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(w("show_alerts.confirm_delete_filtered_alerts")),513),[[Yi,s.value]]),Um,Vs("div",Om,[Vs("div",Mm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>s.value=e)},null,512),[[ji,s.value]]),Vs("label",jm,te(w("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Lm,te(w("show_alerts.confirm_filter_alert")),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:b,disabled:p(),class:"btn btn-warning"},te(w("filter")),9,Fm)])),_:1},512))}};lp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Rm.__scopeId="data-v-19c5b1f1",Rm.__file="http_src/vue/modal-alerts-filter.vue";const Dm={class:"form-group row mb-2"},zm={class:"col-sm-6"},qm={class:"col-form-label"},Bm={class:"col-sm-6 mt-1"};var Vm={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(null),o=va(""),i=va(""),r=a,c=e;async function u(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${c.page}/alerts.lua`,t={csrf:c.context.csrf,ifid:c.context.ifid,label:o.value,row_id:d.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),r("acknowledge"),_()}_n((()=>{}));const d=va({}),_=()=>{n.value.close()};return t({show:e=>{d.value=e;const t=$(`<span>${e.alert_id.label}</span>`);i.value=t.text().trim(),o.value=e.user_label;let a=l("show_alerts.confirm_acknowledge_alert");s.value.show(a,"alert-warning"),n.value.show()},close:_}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l("show_alerts.acknowledge_alert"))+": "+te(i.value),1)])),body:ml((()=>[Vs("div",Dm,[Vs("div",zm,[Vs("label",qm,[Vs("b",null,te(l("show_alerts.add_a_comment")),1)])]),Vs("div",Bm,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[Mi,o.value]])])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:s},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(l("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Hm={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(null),o=a,i=va({});let r="historical";const c=e;async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${c.page}/alerts.lua`,t={csrf:c.context.csrf,ifid:c.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),o("delete_alert"),d()}_n((()=>{}));const d=()=>{n.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=l("show_alerts.confirm_label_alert");s.value.show(a,"alert-danger"),n.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l("show_alerts.delete_alert")),1)])),body:ml((()=>[Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:s},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Gm={class:"form-group row"},Wm={class:"col-sm-6"},Km={class:"col-form-label"},Jm={class:"col-sm-6"},Ym=["value"],Zm={class:"form-group row mb-2"},Xm={class:"col-sm-6"},Qm={class:"col-form-label"},eh={class:"col-sm-6 mt-1"},th=["value"];var ah={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=e=>i18n(e),o=va(null),i=va(null),r=va(""),c=va("");va([]),_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),a={csrf:l.context.csrf,...t};await b.http_post_request(e,a),n("acknowledge_alerts"),d()}const d=()=>{o.value.close()};return t({show:e=>{r.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),c.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=s("show_alerts.confirm_acknowledge_alerts");i.value.show(t,"alert-danger"),o.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(s("acknowledge_alerts")),1)])),body:ml((()=>[Vs("div",Gm,[Vs("div",Wm,[Vs("label",Km,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",Jm,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,Ym)])]),Vs("div",Zm,[Vs("div",Xm,[Vs("label",Qm,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",eh,[Vs("input",{class:"form-control",type:"text",value:c.value,disabled:""},null,8,th)])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(s("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const lh={class:"form-group row"},nh={class:"col-sm-6"},sh={class:"col-form-label"},oh={class:"col-sm-6"},ih=["value"],rh={class:"form-group row"},ch={class:"col-sm-6"},uh={class:"col-form-label"},dh={class:"col-sm-6 mt-1"},_h=["value"],ph={class:"form-group filters-list mb-2"},fh={class:"form-group row"},vh={class:"col-sm-6"},mh={class:"col-form-label"},hh={class:"col-sm-6 mt-1"},gh=["value"];var bh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=e=>i18n(e),o=va(null),i=va(null),r=va(""),c=va(""),u=va([]);_n((()=>{}));async function d(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),a={csrf:l.context.csrf,...t};await b.http_post_request(e,a),n("delete_alerts"),_()}const _=()=>{o.value.close()};return t({show:e=>{r.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),c.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Xd.tag_operator_label_dict;u.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=s("show_alerts.confirm_delete_alerts");i.value.show(a,"alert-danger"),o.value.show()},close:_}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(s("delete_alerts")),1)])),body:ml((()=>[Vs("div",lh,[Vs("div",nh,[Vs("label",sh,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",oh,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,ih)])]),Vs("div",rh,[Vs("div",ch,[Vs("label",uh,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",dh,[Vs("input",{class:"form-control",type:"text",value:c.value,disabled:""},null,8,_h)])]),Vs("div",ph,[(Ps(!0),js(Ss,null,En(u.value,(e=>(Ps(),js("div",fh,[Vs("div",vh,[Vs("label",mh,[Vs("b",null,te(e.label),1)])]),Vs("div",hh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,gh)])])))),256))]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(s("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const yh={class:"row"},wh={class:"col-12"},xh={class:"mb-2"},kh={class:"w-100"},$h={clas:"range-container d-flex flex-wrap"},Sh={class:"range-picker d-flex m-auto flex-wrap"},Ch={key:0,class:"ms-1 me-2"},Nh=["value"],Ah=["label"],Eh=["value"],Th=["title"],Ph=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Ih=["title","href"],Uh=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],Oh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],jh=["title"],Lh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Fh={class:"col-12"},Rh={class:"card card-shadow"},Dh={class:"card-body"},zh={key:0,class:"row"},qh={class:"col-12 mb-2",id:"chart-vue"},Bh={class:"card h-100 overflow-hidden"},Vh=Vs("div",null,null,-1),Hh=["title"],Gh=["onClick","title"],Wh={class:"card-footer"},Kh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Jh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Yh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e=>i18n(e),a=e,l=va(null),n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(0),m=va(!1),g=va(""),w=va(null),k=a.context.ifid;let S;const N=va(""),A=va("");let E=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=j.typeChart.TS_COLUMN,P=va([]),I=va([]),U=va([t("show_alerts.alerts_info")]),O=va({}),M=va([]),L=va(!1),F=xo((()=>{if(!a.context.show_chart||null==s.value)return"";if(v.value<0)throw"never run";const e=a.context.download.endpoint;let t=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");t.format="txt",t.visible_columns=l;const n=x.obj_to_url_params(t);return`${location.origin}/${e}?${n}`}));function D(){return"page-alert-stats_query_presets"}async function z(e){1==a.context.show_cards&&1!=O.value.is_preset&&(P.value=await q("overview"))}async function q(e,t){const l=x.get_url_params(),n=`${a.context.endpoint_cards}?${l}&action=${e}`;return(await b.http_request(n)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,a.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");E="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,O.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==O.value.value&&(O.value.value="");N.value=`alert_${S}`,A.value=`${N.value}_${O.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!a.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,t=await b.http_request(e);if(null==t||0==t.length)return M.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());M.value=t[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),t.length>1&&t[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};M.value.push(t)}));if(null==O.value||""==O.value.value)O.value=M.value[0];else{let e=M.value.find((e=>e.value==O.value.value));O.value=e||M.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(D())}(),L.value=!0,await z()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),z()}),!1)}()}));const B=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await q(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),I.value[t].load_menu()}e.show_spinner=!1}(e,t)};function V(){$(`#${A.value}`).on("click","a.tag-filter",(async function(e){G(e,$(this))}))}const H=async e=>{await h.on_ready("page-alert-stats_query_presets");let t={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${R.filterize("info",e.value,e.label)}`}},l=O.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(a.context.columns_def)),e.forEach((e=>{if(e.render_func=t[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const t={snmp_info:a.context.actions.show_snmp_info,info:a.context.actions.show_info,historical_data:a.context.actions.show_historical,acknowledge:a.context.actions.show_acknowledge,disable:a.context.actions.show_disable,settings:a.context.actions.show_settings,remove:a.context.actions.show_delete};e.button_def_array.forEach((e=>{t[e.id]||e.class.push("link-disabled")}))}})),e},G=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),W({id:a,value:l,operator:n})};function W(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e)}const K=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Y(){const e=$(c.value),a=document.createElement("input");a.value=location.href,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),e.attr("title",`${t("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Z(){o.value.show()}function X(){i.value.show()}async function Q(e){e.csrf=a.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let a={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:a,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:t("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ee(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function ae(e){null!=e?.rows&&(m.value=0==e.rows.length)}function le(e){let t={click_button_snmp_info:_e,click_button_info:pe,click_button_historical_flows:de,click_button_acknowledge:ue,click_button_disable:ce,click_button_settings:re,click_button_remove:ie,click_button_expand:ne};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Xd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function se(){let e=y.get_status();p.value.show(e)}function oe(){let e=y.get_status();f.value.show(e)}function ie(e){const t=e.row;let a=fe();_.value.show(t,a)}function re(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ce(e){!function(e){w.value=e,u.value.show()}(e.row)}function ue(e){const t=e.row;d.value.show(t,a.context)}function de(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function _e(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function pe(e){const t=e.row;let l=fe(),n={page:S,status:l,row_id:t.row_id,tstamp:t.tstamp.value},s=x.obj_to_url_params(n);const o=`${a.context.alert_details_url}?${s}`;window.open(o,"_blank")}function fe(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(a,v)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",yh,[Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Vs("div",$h,[Vs("div",Sh,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(fv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(om,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),L.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:ml((()=>[M.value.length>0?(Ps(),js("div",Ch,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":v[0]||(v[0]=e=>O.value=e),onChange:v[1]||(v[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,Nh)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Ps(),js("optgroup",{key:0,label:t("queries.queries")},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,Eh))],64)))),256))],8,Ah)):Ys("v-if",!0)],544),[[Ri,O.value]])])):Ys("v-if",!0)])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:Y,title:t("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},[...Ph],8,Th)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:t("graphs.download_records"),href:F.value},[...Uh],8,Ih)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:t("traffic_recording.pcap_download")},[...Mh],8,Oh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:X,title:t("datatable.manage_snapshots")},[...Lh],8,jh)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Fh,[Vs("div",Rh,[Vs("div",Dh,[e.context.show_chart?(Ps(),js("div",zh,[Vs("div",qh,[Vs("div",Bh,[Hs(N_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(E),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Vh,Hs(iv,{ref_key:"table_alerts",ref:s,table_config_id:N.value,table_id:A.value,csrf:e.context.csrf,f_map_columns:H,get_extra_params_obj:K,display_message:m.value,message_to_display:g.value,onLoaded:V,onCustom_event:le,onRows_loaded:ae},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(P.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:B(e,t),ref_for:!0,ref:e=>{I.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Hh)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),W({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Gh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Wh,[e.context.show_acknowledge_all?(Ps(),js("button",{key:0,onClick:se,class:"btn btn-primary me-1"},[Kh,Ks(" "+te(t("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Ps(),js("button",{key:1,onClick:oe,class:"btn btn-danger"},[Jh,Ks(" "+te(t("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yi,"all"!=ya(S)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(pv,{note_list:U.value},null,8,["note_list"])]),Ys(" div row "),Hs(Vm,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ee},null,8,["context","page"]),Hs(Hm,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ee},null,8,["context","page"]),Hs(ah,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ee},null,8,["context","page"]),Hs(bh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ee},null,8,["context","page"]),Hs(Rm,{alert:w.value,page:ya(S),onExclude:Q,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Zh={class:"row"},Xh={class:"col-12"},Qh={class:"mb-2"},eg={class:"w-100"},tg={clas:"range-container d-flex flex-wrap"},ag={class:"range-picker d-flex m-auto flex-wrap"},lg={class:"ms-1 me-2"},ng=["value"],sg=["label"],og=["value"],ig=["title"],rg=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],cg=["title","href"],ug=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],dg=["title"],_g=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],pg=["title"],fg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],vg={class:"col-12"},mg={class:"card card-shadow"},hg={class:"card-body"},gg={class:"row"},bg={key:0,class:"col-12 mb-2",id:"chart-vue"},yg=["title"],wg=["onClick","title"],xg={key:0,class:"card-footer"},kg={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},$g=Vs("i",{class:"fas fa fa-user-check"},null,-1),Sg={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Cg=Vs("i",{class:"fas fa fa-trash"},null,-1);var Ng={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e=>i18n(e),l=e,n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),m=l.context.ifid,g=va(""),w=va(""),k=xo((()=>{if(null==I.value?.value)return w.value;return`${w.value}_${I.value.value}`})),S=xo((()=>{if(z.value<0)throw"never run";const e=l.context.download.endpoint;let t=x.get_url_object(),a=o.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");t.format="txt",t.visible_columns=a;const n=x.obj_to_url_params(t);return`${location.origin}/${e}?${n}`}));let N=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const A=xo((()=>"topk-timeseries"==l.context?.chart_type?"height:450px!important":"height:300px!important")),E=xo((()=>"topk-timeseries"==l.context?.chart_type?j.typeChart.TS_STACKED:j.typeChart.TS_COLUMN)),T=va([]),P=va([]),I=va({}),U=va([]);va([]);const O=va(!1),M=va(!1),L=va(t("datatable.aggregated")),F=va(null),D=va(!1),z=va(0);function q(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");N=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,I.value={value:x.get_url_entry("query_preset")},null==I.value.value&&(I.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",M.value=!0,F.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",m);if(0==M.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(F.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(F.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,F.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,F.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${M.value}`,t=await b.http_request(e);U.value=t[0].list.map((e=>{let t=q(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=q(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};U.value.push(a)}));if(null==I.value||""==I.value.value)I.value=U.value[0];else{let e=U.value.find((e=>e.value==I.value.value));I.value=e||U.value[0]}x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),h.ready(pe())}(),O.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),l.context.show_chart&&s.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),o.value.refresh_table(),G(),z.value+=1}),!1)}(),G()}));const B=async e=>{await h.on_ready(pe());let t=I.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=v.getFormatter(t),e};function H(){0==M.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function G(e){1==l.context.show_cards&&(T.value=await W("overview"))}async function W(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const K=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await W(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),P.value[t].load_menu()}e.show_spinner=!1}(e,t)};function J(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){Z(e,$(this))}))}const Y=async e=>{await h.on_ready(pe());const t=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`;let s={first_seen:(e,t)=>{if(void 0!==e)return e.time},l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,a)=>t("asn",e),cli_asn:(e,a)=>t("cli_asn",e),srv_asn:(e,a)=>t("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=l.context?.visible_columns[e.data_field])),I.value.is_preset&&e.length>0&&(e=[e[0]].concat(l.context.columns_def)),e.forEach((e=>{if(e.render_func=s[e.data_field],"actions"==e.id){const t={info:l.context.actions.show_info,historical_data:l.context.actions.show_historical,flow_alerts:l.context.actions.show_alerts,pcap_download:l.context.actions.show_pcap_download,row_data:l.context.is_enterprise_xl&&M.value};e.button_def_array.forEach((e=>{null!=t[e.id]&&0==t[e.id]&&e.class.push("link-disabled")}))}})),e},Z=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),X({id:a,value:l,operator:n})};function X(e){c.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const Q=()=>x.get_url_object();function ee(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function ae(){const e=$(u.value),a=document.createElement("input");a.value=location.href,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),e.attr("title",`${t("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function le(){i.value.show()}function ne(){r.value.show()}async function se(e){e.csrf=l.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let l={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:l,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:t("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function oe(e){let t=o.value,a=s.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function ie(e){let t={click_button_info:re,click_button_flow_alerts:de,click_button_historical_flows:ue,click_button_pcap_download:ce,click_button_flows:_e};null!=t[e.event_id]&&t[e.event_id](e)}function re(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ce(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};i.value.show(t?.filter?.bpf,a)}function ue(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function de(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function _e(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function pe(){return"page-flow-historical_query_presets"}return(a,v)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ee},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Zh,[Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Vs("div",tg,[Vs("div",ag,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:n},null,512),O.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:c,id:"range_picker",min_time_interval_id:F.value,round_time:D.value},{begin:ml((()=>[l.context.is_enterprise_xl?(Ps(),Ls($f,{key:0,value:M.value,"onUpdate:value":v[0]||(v[0]=e=>M.value=e),class:"me-2 mt-1",change_label_side:!0,label:L.value,style:{},onChange_value:H},null,8,["value","label"])):Ys("v-if",!0),Vs("div",lg,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":v[1]||(v[1]=e=>I.value=e),onChange:v[2]||(v[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(U.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,ng)):Ys("v-if",!0)],64)))),256)),"analysis"!=g.value?(Ps(),js("optgroup",{key:0,label:t("queries.queries")},[(Ps(!0),js(Ss,null,En(U.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,og))],64)))),256))],8,sg)):Ys("v-if",!0)],544),[[Ri,I.value]])])])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:ae,title:t("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:u},[...rg],8,ig)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",title:t("graphs.download_records"),href:S.value},[...ug],8,cg)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:le,title:t("traffic_recording.pcap_download")},[..._g],8,dg)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:ne,title:t("datatable.manage_snapshots")},[...fg],8,pg)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",vg,[Vs("div",mg,[Vs("div",hg,[Vs("div",gg,[e.context.show_chart?(Ps(),js("div",bg,[Vs("div",{class:"card overflow-hidden",style:V(A.value)},[Ys(' <div class="card h-300 overflow-hidden"> '),Hs(N_,{ref_key:"chart",ref:s,id:"chart_0",chart_type:E.value,base_url_request:ya(N),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:F.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Ys("v-if",!0),Hs(iv,{ref_key:"table_flows",ref:o,table_id:k.value,table_config_id:w.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:Q,onLoaded:J,onCustom_event:ie},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(T.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:K(e,t),ref_for:!0,ref:e=>{P.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,yg)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),X({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,wg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),l.context.show_acknowledge_all||l.context.show_delete_all?(Ps(),js("div",xg,[l.context.show_acknowledge_all?(Ps(),js("button",kg,[$g,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),l.context.show_delete_all?(Ps(),js("button",Sg,[Cg,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(fv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:i},null,512),Hs(om,{ref_key:"modal_snapshot",ref:r,csrf:e.context.csrf},null,8,["csrf"]),Hs(Vm,{ref_key:"modal_acknowledge",ref:_,context:e.context,onAcknowledge:oe},null,8,["context"]),Hs(Hm,{ref_key:"modal_delete",ref:p,context:e.context,onDelete_alert:oe},null,8,["context"]),Hs(Rm,{alert:f.value,page:g.value,onExclude:se,ref_key:"modal_alerts_filter",ref:d},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ag={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t?.axes?.x?.axisLabelFormatter||(t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),t?.axes.x?.valueFormatter||(t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;if(!t.disableTsList)for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Eg={style:{width:"100% height:380px"},class:"text-end mb-2"},Tg={class:"form-check-label form-control-sm"},Pg=["onClick","checked"],Ig={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ug={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};lp("\n.dygraph-legend {\n  color: #111111;\n  background-color: #FFFFFF !important;\n  border-color: #a7a6a6;\n  border-style: solid;\n  border-width: thin;\n  z-index: 80 !important;\n  box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);\n  border-radius: 0.375rem;\n  position: fixed;\n  width: auto;\n  word-wrap: break-word;\n  padding: 8px !important;\n}\n.dygraph-legend>span {\n  color: #111111;\n  padding-left: 5px;\n  padding-right: 2px;\n  margin-left: -5px;\n  background-color: #FFFFFF !important;\n}\n.dygraph-legend>span:first-child {\n  margin-top: 2px;\n}\n"),Ag.render=function(e,t,a,l,n,s){return Ps(),js(Ss,null,[Vs("div",Eg,[(Ps(!0),js(Ss,null,En(n.timeseries_list,((e,t)=>(Ps(),js("label",Tg,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Pg),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Ps(),js("div",Ig,null,512)):(Ps(),js("div",Ug,null,512))],64)},Ag.__file="http_src/vue/timeseries-chart.vue";const Og=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Mg={class:"form-group ms-2 me-2 mt-3 row"},jg={class:"col-11"},Lg={class:"col-form-label"},Fg=[Og((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Rg={class:"container"},Dg={class:"row custom-ms me-2 mt-1"},zg={class:"col-5"},qg=["onUpdate:modelValue"],Bg={class:"custom-control-label ms-1 form-check-label"},Vg={class:"col-2"},Hg=["onUpdate:modelValue"],Gg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Wg={class:"col-2"},Kg=["onUpdate:modelValue"],Jg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Yg={class:"col-3"},Zg=["onUpdate:modelValue"],Xg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var Qg={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e,l=t;function n(){l("update:timeseries",a.timeseries)}function s(){l("delete_ts",a.id)}return(t,a)=>(Ps(),js("div",null,[Vs("div",Mg,[Vs("div",jg,[Vs("label",Lg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),js("div",{key:0,class:"col-1",onClick:s},[...Fg])):Ys("v-if",!0)]),Vs("div",Rg,[(Ps(!0),js(Ss,null,En(e.timeseries,(e=>(Ps(),js("div",Dg,[Vs("div",zg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.raw=t},null,40,qg),[[ji,e.raw]]),Vs("label",Bg,te(e.label),1)]),Vs("div",Vg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.past=t},null,40,Hg),[[ji,e.past]]),Gg]),Vs("div",Wg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.avg=t},null,40,Kg),[[ji,e.avg]]),Jg]),Vs("div",Yg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Zg),[[ji,e.perc_95]]),Xg])])))),256))])]))}};lp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),Qg.__scopeId="data-v-185590b6",Qg.__file="http_src/vue/list-timeseries.vue";const eb=v.getFormatter(v.types.bytes.id),tb="page-stats-action-link",ab="page-stats-action-jump-historical",lb={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:tb,render:function(e,t,a){let l=this,n={handlerId:tb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:ab,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},nb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:tb,render:function(e,t,a){let l=this,n={handlerId:tb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:ab,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},sb=[lb,nb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:tb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:tb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:ab,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:ab,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:tb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:tb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:ab,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:ab,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]}];let ob=sb.find((e=>"top_protocols"==e.view));null!=ob&&(ob=b.clone(ob),ob.table_value="host");const ib=[ob],rb=v.getFormatter(v.types.bytes.id),cb=v.getFormatter(v.types.bps.id),ub="page-stats-action-link",db={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:ub,render:function(e,t,a){let l=this,n={handlerId:ub,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:ub,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>rb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>rb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>rb(e)},{columnName:i18n("last_downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("last_uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>cb(e)}]},_b=[db],pb=v.getFormatter(v.types.bytes.id),fb=v.getFormatter(v.types.bps.id),vb="page-stats-action-link",mb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:vb,render:function(e,t,a){let l=this,n={handlerId:vb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>pb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>pb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>pb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>fb(e)}]},hb=[mb],gb=async e=>{const t={host:e},a=x.obj_to_url_params(t),l=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua?${a}`;return await b.http_request(l)},bb=async e=>(await gb(e)).map((e=>null!=e.name&&""!=e.name&&e.name!=e.id?{label:`${e.name} (${e.id})`,id:e.id,name:e.name}:{label:e.id,id:e.id,name:e.id})).sort(a.sortAlphabetically),yb={available_interfaces:gb,snmp_device_ports:bb},wb={hide:"hide",select:"select",input:"input",input:"input_confirm"},xb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},kb={interface:sb,host:ib,snmp_interface:_b,snmp_device:_b,flow_device:hb,flow_interface:hb},$b=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,refresh_on_sources_change:!1,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:wb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:wb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:wb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:wb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:wb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:wb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:wb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:wb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:wb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:wb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:wb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",f_map_ts_options:(e,t)=>e,source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",refresh_on_sources_change:!0,sources_function:async e=>{const t=e[1];return(await yb.available_interfaces(t)).map((e=>({label:e.name,value:e.id})))},value:"if_index",value_url:"snmp_port_idx",ui_type:wb.select}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:wb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:wb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:wb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:wb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:wb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:wb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:wb.input}]}],Sb={ui_types:wb,sources_url_el_to_source:xb,sources_types:$b,sources_types_tables:kb},Cb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const Nb=(e,t,a)=>{let l=Tb(e,t,a),n=[];for(let e in a.timeseries){let t=a.timeseries[e];n.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:l,source_type:e,source_array:t,metric:a,timeseries:n}},Ab=async(e,t,a)=>{let l=Vb(),n=await Ob(e,l),s=await Bb(e,l,n),o=Wb(s,t,a);return[Nb(l,n,o)]};async function Eb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=Ub(a),i=await jb(http_prefix,o,l),r=await Hb(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),o=JSON.parse(a[3]),i=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:o,avg:i,perc_95:r})}})),n}(s,r);return{id:Tb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const Tb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const Pb=Sb.sources_url_el_to_source,Ib=Sb.sources_types,Ub=e=>Ib.find((t=>t.id==e)),Ob=async(e,t)=>{let a=Db(t);return await jb(e,t,a)};async function Mb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await jb(e,t,l)}const jb=async(e,t,a)=>{null==t&&(t=Vb());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let n=[];n=await Fb(e,t.id,i,a),l=n.find((e=>e.value==o)),null==l&&(l=n[0])}else l={label:o,value:o};n.push(l)}return n};let Lb={};const Fb=async(e,t,l,n)=>{let s=function(e,t,a){let l=`${e}_${t.value}`;return t.refresh_on_sources_change?(l=`${l}_${a.join("_")}`,l):l}(t,l,n);if(null==Lb[s])if(l.sources_url){let t=`${e}/${l.sources_url}`;Lb[s]=b.http_request(t)}else{if(!l.sources_function)return[];Lb[s]=l.sources_function(n)}let o=await Lb[s];if(l.sources_url){let e=Pb[l.value_map_sources_res];if(null==e&&(e=Pb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;o=o.map((t=>e(t)))}return o.sort(a.sortAlphabetically)};function Rb(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const Db=e=>(null==e&&(e=Vb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let zb={},qb=null;const Bb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Vb()),null==a&&(a=await Ob(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=qb&&(zb[r]=null,qb=o),null==zb[r]&&(zb[r]=b.http_request(i));let c=await zb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Vb=()=>{let e=window.location.pathname;for(let t=0;t<Ib.length;t+=1){if(1==new RegExp(Ib[t].regex_page_url).test(e))return Ib[t]}throw`source_type not found for ${e}`},Hb=async(e,t,a,l,n,s)=>(await Bb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Gb=(e,t)=>{null==t&&(t=Vb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Wb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Kb={set_timeseries_groups_in_url:Cb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Eb(e))),Promise.all(a.map((async e=>await Eb(e))))},get_default_timeseries_groups:Ab,get_ts_group:Nb,get_ts_group_id:Tb,sources_types:Ib,sources_types_tables:Sb.sources_types_tables,get_source_type_from_id:Ub,get_current_page_source_type:Vb,get_sources:Fb,get_default_source_array:Ob,get_source_array_from_value_dict:Mb,get_source_array_from_value_array:jb,get_default_source_value_array:Db,get_metrics:Bb,get_metric_from_schema:Hb,get_metric_query_from_ts_query:Gb,get_default_metric:Wb,set_source_value_object_in_url:Rb,ui_types:Sb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(null!=o?.x?o.x:1)*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const Jb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Yb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);e>t&&(e=t);const l=t/Jb.length;for(let t=1;t<Jb.length+1;t++)if(e<=l*t)return Jb[t-1]}function Zb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let o=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<o&&(o=t)}const i=Math.floor(.95*o);for(var r=0;r<a.length;r++){const e=a[r],o=e.canvasx,c=e.yval;t.fillStyle=Yb(Math.abs(c),Math.abs(n),s),t.fillRect(o-i/2,e.canvasy,i,l-e.canvasy),t.strokeRect(o-i/2,e.canvasy,i,l-e.canvasy)}}const Xb={barChartPlotter:Zb};function Qb(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];ey(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function ey(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=ty(n,t,a),r=ty(s,t,a),c=ty(o,t,a);return function(e,t,a){return"#"+ay(e)+ay(t)+ay(a)}(i,r,c)}(e,l+1,t)))}function ty(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function ay(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const ly={transformColors:Qb};function ny(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n.rawData_[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function sy(e){const t=ly.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{axisLabelWidth:90}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,l.disableTsList=e.disable_ts_list,l.yRangePad=e.yRangePad||1,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=ny(v.getFormatter(t.formatters[0])),e.axes.y2=ny(v.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=ny(v.getFormatter(t.formatters[0])))}(l,e),l}function oy(e){switch(e){case"dash":return{fillGraph:!1,customBars:!1,strokePattern:Dygraph.DASHED_LINE};case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const iy={buildChartOptions:sy,formatSerieProperties:oy},ry=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],cy={default_color:"#C6D9FD","95_perc":"#8EA4E8",avg:"#839BE6"};function uy(e){return`${e.id}`}function dy(e){let t=e,a=0,l=0,n=ry,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==o))?e[o]=n[a%n.length]:e[o]=t.color,a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}function _y(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,o=a.source_type.source_def_array;for(let e=0;e<o.length;e+=1){if(1==o[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function py(e){if("bar"===e)return Xb.barChartPlotter}function fy(e,t,a,l){l.labels.push(e),l.properties[e]={},l.properties[e]=iy.formatSerieProperties(t),l.colors.push(a)}function vy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,o=t.metadata.epoch_step,{serie:i,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={};return e.forEach(((e,o)=>{const i=uy(e),r=e.data||[],c=t.metric.timeseries[i],u=!0===c?.invert_direction?1:-1;"metric"==c.type&&(n=_y(c.label,i,t,!0),s=iy.formatSerieProperties("bounds"),a={color:c.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<r.length;e++){let t=null===t?NaN:r[e];null==r[e]&&(r[e]=[0,NaN,0]),"lower_bound"==c.type?r[e][0]=t*u:"metric"==c.type?r[e][1]=t*u:"upper_bound"==c.type&&(r[e][2]=t*u)}})),{serie:[],color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=py(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(i).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:i[e],name:p}]),_+=o}))}function my(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",o=t.metadata.epoch_begin,i=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null,d=t.additional_series;a.value_range=[u,c],a.plotter=py(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[0],_=uy(t),p=e.metric.timeseries[_],f=!0===p.invert_direction?-1:1,v=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,p),m=_y(v,_,e,a.use_full_name),h=_y(v+" Avg",_,e,a.use_full_name),g=_y(v+" 95th Perc",_,e,a.use_full_name),b=_y(v+" "+l+" Ago",_,e,a.use_full_name),y=d?d[`${l}_ago`]?.series[n]?.data:null;if(p.hidden)return;const w=a.formatters.find((e=>e==r));w||a.formatters.push(r),fy(m,s,{color:p.color,palette:0},a),1==u?.avg&&fy(h,"point",{color:cy.avg,palette:1},a),1==u?.perc_95&&fy(g,"point",{color:cy.perc_95,palette:1},a),1==u?.past&&fy(b,"dash",{color:cy.past,palette:1},a),function(e,t,a,l,n,s,o,i,r){const c=t.statistics.average,u=t.statistics["95th_percentile"];let d=i;for(let t=0;t<l.length;t++){const i=l[t];if(e.serie[d]||(e.serie[d]=[{value:new Date(1e3*d),name:"Time"}]),null!==i?e.serie[d].push({value:i*s,name:r.serie_name}):e.serie[d].push({value:NaN,name:r.serie_name}),1==a?.avg&&e.serie[d].push({value:c*s,name:r.avg_name}),1==a?.perc_95&&e.serie[d].push({value:u*s,name:r.perc_name}),1==a?.past){const a=n?n[t]:null;a?e.serie[d].push({value:a*s,name:r.past_name}):e.serie[d].push({value:NaN,name:r.past_label})}d+=o}}(a,t,u,c,y,f,i,o,{serie_name:m,avg_name:h,perc_name:g,past_name:b})}))}function hy(e,t,a,l,n){let s=1;const o=[];e.serie.forEach((e=>{o.push([s,e]),s++})),0==o.length&&o.push([1,null]);const i={serie:o,formatters:l,labels:["index"],colors:[],properties:iy.formatSerieProperties(a),stacked:!1,customBars:!1,use_full_name:!1,plotter:py(a),value_range:n,disable_ts_list:!0};return fy(t,a,{color:cy.default_color,palette:0},i),dy(i.colors),iy.buildChartOptions(i)}function gy(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{!function(e,t,a,l){null!=e.source_type.f_map_ts_options&&(t=(0,e.source_type.f_map_ts_options)(t,e));1==(e.metric.bounds||!1)?vy(e,t,l):my(e,t,l,a)}(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let o=0;o<e.serie[a].length;o++)if(e.serie[a][o].name==n){t[l].push(e.serie[a][o].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),dy(n.colors),iy.buildChartOptions(n)}const by={formatSerie:gy,formatSimpleSerie:hy,getSerieId:uy,getSerieName:_y};function yy(e){return by.getSerieId(e)}function wy(e,t,a,l){return by.getSerieName(e,t,a,l)}const xy={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function ky(e){return xy[e]||null}function $y(e,t,a,l){if(a.value==xy["1_chart_x_metric"].value)return Sy(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...Sy(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...Sy(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function Sy(e,t,a,l){let n=!1;if(a.value==xy["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=Ny(o,i,l,n);s.push(r)}return s}if(a.value==xy["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let o=Ny([e],[t[s]],l,n);a.push(o)})),a}return[]}function Cy(e,t,a,l,n){return by.formatSimpleSerie(e,t,a,l,n)}function Ny(e,t,a,l){return by.formatSerie(e,t,a,l)}function Ay(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function Ey(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function Ty(e,t,a,l,n){let s,o={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i={ts_requests:l.map((e=>{let t=Ey(e),a={ts_query:Ay(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...o,...t},r={"Content-Type":"application/json"};s=await b.http_request(n,{method:"post",headers:r,body:JSON.stringify(i)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=Ey(i),c=Ay(i),u={...o,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,n)}`;s=[await b.http_request(d)]}return s}const Py={groupsOptionsModesEnum:xy,tsArrayToOptions:Ny,formatSimpleSerie:Cy,tsArrayToOptionsArray:$y,getGroupOptionMode:ky,getSerieId:yy,getSerieName:wy,getTsChartsOptions:Ty,getTsQuery:Ay,getMainSourceDefIndex:Ey},Iy=e=>(pl("data-v-103cd911"),e=e(),fl(),e),Uy={class:"nav nav-tabs"},Oy={class:"form-group ms-2 me-2 mt-3 row"},My={class:"form-group row"},jy={class:"col-form-label col-sm-4"},Ly={class:"col-sm-8"},Fy={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Ry={class:"form-group row"},Dy={class:"col-form-label col-sm-4"},zy={class:"col-sm-8"},qy=["title"],By={key:0,class:"form-group mt-2 row"},Vy={class:"col-form-label col-sm-4"},Hy={class:"col-sm-8"},Gy={key:1,class:"form-group mt-2 row"},Wy={class:"col-form-label col-sm-4"},Ky={class:"col-sm-8"},Jy=["onInput","onUpdate:modelValue","pattern"],Yy={key:2,class:"form-group mt-2 row"},Zy={class:"col-form-label col-sm-4"},Xy={class:"col-sm-7"},Qy=["onInput","onUpdate:modelValue","pattern"],ew={class:"col-sm-1"},tw=["onClick","title","disabled"],aw=[Iy((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],lw={class:"form-group row mt-2",style:{"text-align":"end"}},nw={class:"col-sm-12"},sw=["disabled"],ow={class:"form-group ms-2 me-2 mt-3 row"},iw={class:"form-group row"},rw={class:"col-form-label col-sm-4"},cw={class:"col-sm-8"},uw=["disabled"];var dw={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(null),o=va("select");let i=Kb.get_current_page_source_type();const r=Kb.sources_types,c=va(i),u=Kb.ui_types,d=va([]),_=va([]),p=va([]),f=va(""),v=va([]),m=va(!1),h=xo((()=>{if(0==m.value)return!1;for(let e=0;e<v.value.length;e+=1){let t=v.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=va(!1),y=va([]),w=va({}),x=va([]),k=va([]),$=a;let S=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{S=async function(){await N(),O()}()}));function C(e){o.value=e}async function N(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);v.value=e.map((e=>null==e?null:yp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[],a=await Kb.get_default_source_array(http_prefix,c.value),l=a.map((e=>e.value));for(let a=0;a<e.length;a+=1){let n=await Kb.get_sources(http_prefix,c.value.id,e[a],l);t.push(n)}_.value=a,d.value=t,p.value=l,I()}(),await U()}async function A(){m.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){E(_.value[t],e)}})),await async function(){await U()}(),I()}function E(e,t){e.value=t,e.label=t}function T(e,t,a){m.value=!0,1==a&&P(e,t)}async function P(e,t){e.ui_type==u.input_confirm&&E(_.value[t],p.value[t]);let a=c.value.source_def_array,l=_.value.map((e=>e.value));for(let e=t+1;e<a.length;e+=1){const t=a[e];if(!t.refresh_on_sources_change)continue;let n=await Kb.get_sources(http_prefix,c.value.id,t,l);d.value[e]=n,n.length>0?_.value[e]=n[0]:(_.value[e]={label:"",value:""},console.warn(`No sources availables to select for ${c.value.id} sorce_def`))}}function I(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function U(){y.value=await Kb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Kb.get_default_metric(y.value),O()}function O(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function M(e){let t=e.source_type.label,a=Py.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function j(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Kb.get_ts_group_id(t,a,l)}const L=e=>{x.value=x.value.filter((t=>j(t)!=e))},F=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&$("apply",x.value)},R=()=>{if("add"==o.value){let e={id:j(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};F(e)}$("apply",x.value),D()},D=()=>{n.value.close()},z=e=>i18n(e);return t({show:async e=>{x.value=e,await S,o.value="select",n.value.show()},close:D,add_ts_group:F,set_timeseries_groups:(e,t)=>{x.value=e,t&&$("apply",x.value)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(z("modal_timeseries.title")),1)])),body:ml((()=>[Vs("ul",Uy,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>C("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==o.value}]),href:"#"},te(z("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>C("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==o.value}]),href:"#"},te(z("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==o.value?(Ps(),js(Ss,{key:0},[Ys(" Sources Types "),Vs("div",Oy,[Vs("div",My,[Vs("label",jy,[Vs("b",null,te(z("modal_timeseries.source_type")),1)]),Vs("div",Ly,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Ps(),js("div",Fy,[Vs("div",Ry,[Vs("label",Dy,[Vs("b",null,te(z("modal_timeseries.source")),1)]),Vs("div",zy,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,qy),[[Mi,f.value]])])]),(Ps(!0),js(Ss,null,En(c.value.source_def_array,((e,t)=>(Ps(),js(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Ps(),js("div",By,[Vs("label",Vy,[Vs("b",null,te(e.label),1)]),Vs("div",Hy,[Hs(l_,{selected_option:_.value[t],"onUpdate:selected_option":e=>_.value[t]=e,onSelect_option:a=>T(e,t,!0),options:d.value[t]},null,8,["selected_option","onUpdate:selected_option","onSelect_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Ps(),js("div",Gy,[Vs("label",Wy,[Vs("b",null,te(e.label),1)]),Vs("div",Ky,[wn(Vs("input",{class:"form-control",onInput:a=>T(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,Jy),[[Mi,p.value[t]]])])])):Ys("v-if",!0),Ys(" input text "),Ys(" input confirm text "),e.ui_type==ya(u).input_confirm?(Ps(),js("div",Yy,[Vs("label",Zy,[Vs("b",null,te(e.label),1)]),Vs("div",Xy,[wn(Vs("input",{class:"form-control",onInput:a=>T(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,Qy),[[Mi,p.value[t]]])]),Vs("div",ew,[Vs("button",{type:"button",class:"btn btn-link btn-sm",onClick:a=>P(e,t),title:z(e.refresh_i18n),disabled:!h.value},[...aw],8,tw)])])):Ys("v-if",!0),Ys(" input confirm text ")],64)))),256)),wn(Vs("div",lw,[Vs("div",nw,[Vs("button",{type:"button",onClick:A,disabled:0==h.value,class:"btn btn-primary"},te(z("modal_timeseries.apply_source")),9,sw)])],512),[[Yi,h.value]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",ow,[Vs("div",iw,[Vs("label",rw,[Vs("b",null,te(z("modal_timeseries.metric")),1)]),Vs("div",cw,[Hs(l_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[5]||(t[5]=e=>O()),selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(Qg,{title:z("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[7]||(t[7]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==o.value?(Ps(),js(Ss,{key:1},[(Ps(!0),js(Ss,null,En(x.value,(e=>(Ps(),Ls(Qg,{id:j(e),title:M(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:L},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:R,disabled:h.value,class:"btn btn-primary"},te(z("modal_timeseries.add")),9,uw),[[Yi,"add"==o.value]]),wn(Vs("button",{type:"button",onClick:R,class:"btn btn-primary"},te(z("modal_timeseries.apply")),513),[[Yi,"select"==o.value]])])),_:1},512))}};lp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),dw.__scopeId="data-v-103cd911",dw.__file="http_src/vue/modal-timeseries.vue";const _w={class:"form-group mt-2 row"},pw={class:"col-form-label col-sm-4"},fw={class:"col-sm-6"},vw={class:"col-form-label col-sm-2"},mw=["disabled"];var hw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(""),s=String.raw`^[a-zA-Z_\-1-9]*$`,o=xo((()=>new RegExp(s).test(n.value))),i=e,r=a;function c(){let e=`${n.value}.${i.ext}`;r("download",e),u()}const u=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),n.value=e,l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(i.title),1)])),body:ml((()=>[Vs("div",_w,[Vs("label",pw,[Vs("b",null,te(d("modal_download_file.filename"))+":",1)]),Vs("div",fw,[wn(Vs("input",{class:"form-control",pattern:s,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),type:"text",required:""},null,512),[[Mi,n.value]])]),Vs("label",vw," ."+te(i.ext),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary",disabled:0==o.value},te(d("modal_download_file.download")),9,mw)])),_:1},512))}};lp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),hw.__scopeId="data-v-59120eb8",hw.__file="http_src/vue/modal-download-file.vue";const gw={key:0},bw={class:"text-center"},yw=Vs("tbody",null,null,-1);var ww={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=so(),n=No(),s=e,o=a,i=(e,t)=>{if((t||s.id)&&null!=e.dir){const a=[e.col,e.dir],l=`${t||s.id}_sorting_preferences`;localStorage.setItem(l,a)}},r=e=>{let t=null;if(e||s.id){const a=`${e||s.id}_sorting_preferences`,l=localStorage.getItem(a);if(l){const e=l.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let c=s.base_params;const u=va(null),d=r()||[0,"asc"];let _=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:s.enable_search,order:[d],pagingType:"full_numbers",columns:s.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:s.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),o("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),i(e.aLastSort[0])}};for(const e in s.table_config||{})t[e]=s.table_config[e];let a=DataTableUtils.getStdDatatableConfig(s.table_buttons);a=DataTableUtils.extendConfig(a,t),_=$(u.value).DataTable(a),f();for(const t of s.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:_,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:s.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&s.base_params){const e=x.get_url_entries();for(const[t,a]of e)c[t]=a;_.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,c)),v()}}()}));let p=null;function f(){if(null==p&&(p=function(){if(null==_)return;let e=$(_.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==n||null==n.menu)return;let e=n.menu();if(null==e||0==e.length)return;let t=n.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:s,el:o}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Hs(e,t,a);return n&&n._context&&(o.appContext=n._context),s?lr(o,s):"undefined"!=typeof document&&lr(o,s=document.createElement("div")),{vNode:o,destroy:()=>{s&&lr(null,s),s=null,o=null},el:s}}(t,{app:l?.appContext?.app,element:a});let i=$(_.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const v=()=>{null!=_&&_.ajax.reload()},m=e=>{DataTableUtils.deleteButtonHandlers(e)};let h=!1;const g=()=>{_.clear(),_.destroy(!0),h=!0,s.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{m(e.handlerId)}))};return t({reload:v,delete_button_handlers:m,destroy_table:g,update_url:e=>{null!=_&&_.ajax.url(e)},refresh_menu:()=>{let e=$(_.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),f()},is_last_sorting_available:e=>null!=r(e),load_last_sort:r,save_last_sort:i,search_value:function(e){null!=_&&_.search(e).draw()}}),vn((()=>{1!=h&&g()})),(t,a)=>(Ps(),js(Ss,null,[(Ps(),js("div",gw,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:u,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns_config,(e=>(Ps(),js("th",bw,te(e.columnName),1)))),256))])]),yw],512)])],64))},__file:"http_src/vue/datatable.vue"};const xw={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},kw=["innerHTML"],$w={class:""},Sw=["innerHTML"],Cw=["innerHTML"],Nw={class:"table table-striped table-bordered"},Aw=["innerHTML"],Ew=["colspan","innerHTML"];var Tw={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Ps(),js(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Ps(),js(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",Nw,[Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Aw),(Ps(!0),js(Ss,null,En(t.values,(a=>(Ps(),js("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Ew)))),256))])))),256))])])],2112)):(Ps(),js("table",xw,[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns,(t=>(Ps(),js("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,kw)))),256))])]),Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",$w,[1==e.wrap_columns?(Ps(!0),js(Ss,{key:0},En(e.columns,(a=>(Ps(),js("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Sw)],2)))),256)):(Ps(!0),js(Ss,{key:1},En(e.columns,(a=>(Ps(),js("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Cw)))),256))])))),256))])]))],2112))};lp("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Tw.__scopeId="data-v-0533335c",Tw.__file="http_src/vue/bootstrap-table.vue";const Pw=e=>(pl("data-v-937058e4"),e=e(),fl(),e),Iw={class:"col-12 mb-2 mt-2"},Uw={class:"card h-100 overflow-hidden"},Ow=["title"],Mw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],jw=["title"],Lw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],Fw=["disabled","title"],Rw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Dw=["title"],zw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],qw={class:"form-group ms-1 me-1 mt-1"},Bw={class:"inline select2-size me-2 mt-2"},Vw={class:"inline select2-size me-2 mt-2"},Hw={key:0,class:"mt-4 card card-shadow"},Gw={class:"card-body"},Ww={key:1,class:"mt-4 card card-shadow"},Kw={class:"card-body"},Jw={key:0,class:"inline select2-size me-2 mt-2"},Yw="timeseries";var Zw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;va({}),va(!1);const o=va([]),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=va(null),m=va([]),h=va({});Kb.get_current_page_source_type();const g=va(!1);va(!1);const w=va([]),k=b.object_to_array(Py.groupsOptionsModesEnum),$=va(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Py.getGroupOptionMode(e);return k[0]}());let S=null;const C={label:i18n("page_stats.custom_metrics"),currently_active:!1},N=va(!1),A=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];Y.forEach((t=>{t.va&&e.push(t)})),Y=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Kb.get_current_page_source_type();Kb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Kb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Kb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Kb.get_default_timeseries_groups(http_prefix,e,t)}m.value=await E(a),h.value=1==a?C:Kb.get_default_metric(m.value,e,t);N.value=!0,await G(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));async function E(e,l){let n=await Kb.get_metrics(http_prefix);if(!l&&null==e)return n.value;if(e&&n.push(C),(null==z||l)&&(z=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${Yw}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){z.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function T(e){let t=Kb.get_current_page_source_type(),a=await Kb.get_default_source_array(http_prefix,t);return[Kb.get_ts_group(t,a,e)]}const P=async(e,t,a)=>{let l=Kb.get_source_type_from_id(e),n=await Kb.get_source_array_from_value_dict(http_prefix,l,t),s=await Kb.get_metric_from_schema(http_prefix,l,n,a);U(Kb.get_ts_group(l,n,s))},I=async(e,t)=>{let a=m.value.find((a=>a.schema==e&&a.query==t));null!=a?U((await T(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function U(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function O(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Kb.get_timeseries_groups_from_url(http_prefix,a);$.value=Py.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await G(l,!0,!1)}else await async function(){let e=await async function(){return T(h.value)}();await G(e,!0,!1)}(),B(!1)}function M(e){let a=h.value.label==C.label;G(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=J.value?.table_config_def;if(null==e)return;let a=W(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),B(a,!0)}function j(e){}function L(){u.value.show()}function F(){null!=S&&c.value.show(S)}function R(e){return async t=>w.value[e].chart_options}let D,z=null;function q(){B(h.value.label==C.label,!0)}async function B(e,t){m.value=await E(e,t),e&&(h.value=C)}async function V(e){B(!0),await G(e,!0,!0)}function H(){G(S,!1,!1)}async function G(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");D=await Py.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Py.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,D);let r=Py.tsArrayToOptionsArray(D,e,$.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};Z.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=Py.getSerieId(e),i=s.metric.timeseries[o],r=v.getFormatter(s.metric.measure_unit),c=i.label;if(i.hidden)return;if(1==i.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Py.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:v.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Z.value.push(d)}))}))}(D,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Kb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Kb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};K.value=[];for(let e in n){let o=n[e],i=Py.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=W(o,e.table_value,e.view,n,a),u=Kb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:I,add_ts_group_from_source_value_dict:P,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};K.value.push(f)}))}if(null!=J.value&&K.value.find((e=>e.value==J.value.value)))return;J.value=K.value.find((e=>1==e.table_config_def.default)),null==J.value&&(J.value=K.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Kb.set_timeseries_groups_in_url(S)}function W(e,t,a,l,n){null==n&&(n=y.get_status());let s=Py.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const K=va([]),J=va({});let Y=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const Z=va([]);function X(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const Q=va(null);function ee(){Q.value.show()}function te(){if(!D?.length)return;let e=S[0],t=Py.getSerieName(null,null,e);d.value.show(t)}async function ae(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Ps(),js(Ss,null,[Vs("div",Iw,[Hs(S_),Vs("div",Uw,[Hs(E_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:M,min_time_interval_id:f.value,custom_time_interval_list:A},{begin:ml((()=>[])),extra_buttons:ml((()=>[e.enable_snapshots?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:L,title:l("page_stats.manage_snapshots_btn")},[...Mw],8,Ow)):Ys("v-if",!0),e.traffic_extraction_permitted?(Ps(),js("button",{key:1,class:"btn btn-link btn-sm",onClick:ee,title:l("traffic_recording.pcap_download")},[...Lw],8,jw)):Ys("v-if",!0),Vs("button",{disabled:ya(_),class:"btn btn-link btn-sm",onClick:te,title:ya(p)},[...Rw],8,Fw),e.is_history_enabled?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:l("page_stats.historical_flows")},[...zw],8,Dw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",qw,[Vs("div",Bw,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:m.value,onSelect_option:O},null,8,["selected_option","options"])]),Vs("div",Vw,[Hs(l_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:ya(k),onSelect_option:H},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),js("button",{key:0,type:"button",onClick:F,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yi,N.value]]),(Ps(!0),js(Ss,null,En(w.value,((e,t)=>(Ps(),Ls(Ag,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:R(t),onZoom:M,onChart_reloaded:j},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Ps(),js("div",Hw,[Vs("div",Gw,[Hs(Tw,{id:"page_stats_bootstrap_table",columns:ya(Y),rows:Z.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),js("div",Ww,[Vs("div",Kw,[J.value?.table_config_def?(Ps(),js("div",Jw,[Hs(l_,{selected_option:J.value,"onUpdate:selected_option":a[2]||(a[2]=e=>J.value=e),options:K.value},null,8,["selected_option","options"])])):Ys("v-if",!0),J.value?.table_config_def?(Ps(),Ls(ww,{key:J.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:J.value.table_config_def.table_button,columns_config:J.value.table_config_def.columns_config,data_url:J.value.table_config_def.data_url,enable_search:J.value.table_config_def.enable_search,table_config:J.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(om,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:Yw,onAdded_snapshot:q,onDeleted_snapshots:q,onDeleted_all_snapshots:q},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ls(dw,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:V},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(fv,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Q},null,512),Hs(hw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:ae},null,8,["title"])],64))}};lp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Zw.__scopeId="data-v-937058e4",Zw.__file="http_src/vue/page-stats.vue";var Xw=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const Qw={class:"card-header mb-2"},ex={class:"nav nav-tabs card-header-tabs",role:"tablist"},tx=["onClick"],ax=["onClick"];Xw.render=function(e,t,a,l,n,s){return Ps(),js("div",Qw,[Vs("ul",ex,[(Ps(!0),js(Ss,null,En(e.tab_list,(t=>(Ps(),js(Ss,null,[t.active?(Ps(),js("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,tx)):(Ps(),js("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,ax))],64)))),256))])])},Xw.__file="http_src/vue/tab-list.vue";var lx={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=va(null),n=a;let s=va(""),o=va("");const i=e,r=()=>{n("delete"),c()},c=()=>{l.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,o.value=t):(s.value=i.body,o.value=i.title),l.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(s)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-danger"},te(u("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const nx="change_asset_table_tab_event";var sx={components:{datatable:ww,"modal-delete-confirm":lx,"tab-list":Xw,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[4,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){N.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_asset_table_tab",nx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,notes:[i18n("map_page.table_note_asset_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(nx,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ox={class:"row"},ix={class:"col-md-12 col-lg-12"},rx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),cx={class:"card"},ux=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dx={class:"card-body"},_x={id:"table_asset"},px={class:"card-footer"},fx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vx=Vs("i",{class:"fas fa-trash"},null,-1),mx=["href"],hx=[Vs("i",{class:"fas fa-download"},null,-1)];sx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),js("div",ox,[Vs("div",ix,[rx,Vs("div",cx,[ux,Vs("div",dx,[Vs("div",_x,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Ps(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Ps(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",px,[Vs("button",fx,[vx,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},[...hx],8,mx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},sx.__file="http_src/vue/page-asset-table.vue";var gx={components:{datatable:ww,"modal-delete-confirm":lx,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),notes:[i18n("map_page.table_note_periodicity_map")],get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o={server:`${n}`,client:`${a}`,port:`${s}`},i=x.obj_to_url_params(o),r=`${http_prefix}/lua/flows_stats.lua?${i}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const bx={class:"row"},yx={class:"col-md-12 col-lg-12"},wx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),xx={class:"card"},kx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),$x={class:"card-body"},Sx={id:"periodicity-table"},Cx={class:"card-footer"},Nx={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Ax=Vs("i",{class:"fas fa-trash"},null,-1),Ex=["href"],Tx=[Vs("i",{class:"fas fa-download"},null,-1)];gx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("datatable"),r=kn("NoteList");return Ps(),js("div",bx,[Vs("div",yx,[wx,Vs("div",xx,[kx,Vs("div",$x,[Vs("div",Sx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Cx,[a.is_admin?(Ps(),js("button",Nx,[Ax,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},[...Tx],8,Ex)])]),Hs(r,{note_list:n.notes},null,8,["note_list"])])])},gx.__file="http_src/vue/page-periodicity-table.vue";const Px={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ix=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},Ux=function(){return Px},Ox="change_service_table_tab_event";var Mx={components:{datatable:ww,"modal-delete-confirm":lx,"tab-list":Xw,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){N.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_service_table_tab",Ox,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,notes:[i18n("map_page.table_note_service_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(Ox,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ix(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{Ix(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{Ix(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const jx={class:"row"},Lx={class:"col-md-12 col-lg-12"},Fx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Rx={class:"card"},Dx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),zx={class:"card-body"},qx={id:"table_service"},Bx={class:"card-footer"},Vx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Hx=Vs("i",{class:"fas fa-trash"},null,-1),Gx=["href"],Wx=[Vs("i",{class:"fas fa-download"},null,-1)];Mx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),js("div",jx,[Vs("div",Lx,[Fx,Vs("div",Rx,[Dx,Vs("div",zx,[Vs("div",qx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Ps(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Ps(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",Bx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Vx,[Hx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},[...Wx],8,Gx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},Mx.__file="http_src/vue/page-service-table.vue";const Kx={key:0,class:"alert alert-info"},Jx=["id"];var Yx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},o=!1,i=null;const r=va(!1),c=va(!0),u=va(!1),d=va({}),_=va(null),p=va(null),f=va(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await v(),p.value=Ux(),i=new vis.Network(e,_.value,p.value),g()})),vn((()=>{1!=u.value&&b()}));const v=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),m()}))},m=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{i.on("stabilizationIterationsDone",(function(){i.setOptions({physics:!1})})),i.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;o=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=i.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(i.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===o){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);o=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),i.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),N.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),i.on("afterDrawing",(function(e){N.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})i.on(e,a.event_listeners[e])},b=()=>{null!=i&&i.destroy(!0),u.value=!0},y=async()=>{await v(),null!=i&&(i.setOptions({physics:p.value.physics}),i.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=i?i instanceof vis.Network?i.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Ps(),js(Ss,null,[c.value?(Ps(),js("div",Kx,te(e.empty_message),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Jx)],64))},__file:"http_src/vue/network-map.vue"},Zx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=()=>{n("autolayout"),o()},o=()=>{l.value.close()};t({show:()=>{l.value.show()},close:o}),_n((()=>{}));const i=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Ks(te(e.body),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:s,class:"btn btn-primary"},te(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Xx="change_filter_event";var Qx={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",Xx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_service_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(Xx,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const ek={class:"row"},tk={class:"col-md-12 col-lg-12"},ak={class:"card card-shadow"},lk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),nk={class:"card-body"},sk={id:"table_service"},ok={class:"d-flex align-items-center justify-content-end mb-2"},ik=["title"],rk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],ck={class:"d-flex ms-auto"},uk={class:"m-1"},dk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),_k=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),pk={class:"card-footer"},fk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vk=Vs("i",{class:"fas fa-trash"},null,-1),mk=["href"],hk=[Vs("i",{class:"fas fa-download"},null,-1)];Qx.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",ek,[Vs("div",tk,[Vs("div",ak,[lk,Vs("div",nk,[Vs("div",sk,[Vs("div",ok,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...rk],8,ik),Vs("div",ck,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",uk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),dk,_k]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",pk,[Vs("button",fk,[vk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},[...hk],8,mk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},Qx.__file="http_src/vue/page-service-map.vue";const gk="change_filter_event";var bk={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",gk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_periodicity_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(gk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const yk={class:"row"},wk={class:"col-md-12 col-lg-12"},xk={class:"card card-shadow"},kk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),$k={class:"card-body"},Sk={id:"table_periodicity"},Ck={class:"d-flex align-items-center justify-content-end mb-2"},Nk=["title"],Ak=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ek={class:"d-flex ms-auto"},Tk={class:"m-1"},Pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Ik=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Uk={class:"card-footer"},Ok={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Mk=Vs("i",{class:"fas fa-trash"},null,-1),jk=["href"],Lk=[Vs("i",{class:"fas fa-download"},null,-1)];bk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",yk,[Vs("div",wk,[Vs("div",xk,[kk,Vs("div",$k,[Vs("div",Sk,[Vs("div",Ck,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...Ak],8,Nk),Vs("div",Ek,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Tk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Pk,Ik]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Uk,[Vs("button",Ok,[Mk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},[...Lk],8,jk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},bk.__file="http_src/vue/page-periodicity-map.vue";const Fk="change_filter_event";var Rk={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",Fk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_asset_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(Fk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const Dk={class:"row"},zk={class:"col-md-12 col-lg-12"},qk={class:"card card-shadow"},Bk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Vk={class:"card-body"},Hk={id:"table_asset"},Gk={class:"d-flex align-items-center justify-content-end mb-2"},Wk=["title"],Kk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Jk={class:"d-flex ms-auto"},Yk={class:"m-1"},Zk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Xk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Qk={class:"card-footer"},e$={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},t$=Vs("i",{class:"fas fa-trash"},null,-1),a$=["href"],l$=[Vs("i",{class:"fas fa-download"},null,-1)];Rk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",Dk,[Vs("div",zk,[Vs("div",qk,[Bk,Vs("div",Vk,[Vs("div",Hk,[Vs("div",Gk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...Kk],8,Wk),Vs("div",Jk,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Yk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Zk,Xk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Qk,[Vs("button",e$,[t$,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},[...l$],8,a$)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},Rk.__file="http_src/vue/page-asset-map.vue";const n$={class:"form-group mb-3 row"},s$={class:"col-form-label col-sm-4"},o$={class:"col-sm-7"},i$=Vs("div",{class:"invalid-feedback"},null,-1),r$={class:"form-group mb-3 row"},c$={class:"col-form-label col-sm-4 pt-2"},u$={class:"form-switch col-sm-7 pt-2 ps-3"},d$={class:"col-form-label"};var _$={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(null),o=a,i=()=>{o("add",{mac_list:l.value,trigger_alerts:n.value}),r()},r=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",n$,[Vs("label",s$,te(e.body),1),Vs("div",o$,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[Mi,l.value]]),Vs("small",null,te(e.list_notes),1),i$])]),Vs("div",r$,[Vs("label",c$,te(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",u$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[ji,n.value]])]),Vs("small",d$,te(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Ks(te(c("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:i,class:"btn btn-primary"},te(c("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const p$={key:0,class:"form-group mb-3 row"},f$={class:"col-form-label col-sm-4"},v$={class:"col-sm-7"},m$=["placeholder"],h$={class:"form-group mb-3 row"},g$={class:"col-form-label col-sm-4"},b$={class:"col-sm-7"},y$={class:"form-group mb-3 row"},w$={class:"col-form-label col-sm-4 pt-2"},x$={class:"form-switch col-sm-7 pt-2 ps-3"},k$={class:"col-form-label"};var $$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(""),o=va(i18n("if_stats_config.custom_name")),i=va(null),r=a,c=e=>i18n(e),u=va([{id:"allowed",value:"allowed",label:c("edit_check.authorized")},{id:"denied",value:"denied",label:c("edit_check.unauthorized")}]),d=va(!1),_=()=>{0==d.value?r("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):r("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),p()},p=()=>{i.value.close()};return t({show:e=>{if(null!=e){let t=null;u.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=u.value[0],d.value=!0;i.value.show()},close:p}),_n((()=>{})),(t,a)=>(Ps(),Ls(np,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[0==d.value?(Ps(),js(Ss,{key:0},[Ks(te(e.title),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:ml((()=>[0==d.value?(Ps(),js("div",p$,[Vs("label",f$,te(c("edit_check.device_alias")),1),Vs("div",v$,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,m$),[[Mi,l.value]])])])):Ys("v-if",!0),Vs("div",h$,[Vs("label",g$,te(c("edit_check.device_status")),1),Vs("div",b$,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:u.value},null,8,["selected_option","options"])])]),Vs("div",y$,[Vs("label",w$,te(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",x$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[ji,s.value]])]),Vs("small",k$,te(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const S$={class:"row"},C$={class:"col-md-12 col-lg-12"},N$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),A$={class:"card"},E$={class:"card-body"},T$={key:0,class:"alert alert-info"},P$={id:"table_devices_vue"},I$=[Vs("i",{class:"fas fa-plus"},null,-1)],U$={class:"card-footer mt-3"},O$=Vs("i",{class:"fas fa-trash"},null,-1),M$=Vs("i",{class:"fas fa-edit"},null,-1);var j$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=va(),a=va(),l=va(),n=va(),s=va(),o=va("device_exclusions"),i=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,r=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,d=va(!1),_=e=>i18n(e);let p="",f="",v=_("edit_check.delete_all_device_exclusions"),m=_("edit_check.delete_all_device_exclusions_message"),h=_("edit_check.add_device_exclusion"),g=_("edit_check.add_device_exclusion_message"),b=_("edit_check.add_device_exclusion_notes"),y=_("edit_check.add_device_exclusion_list_notes"),w=_("edit_check.edit_device_exclusion"),x=_("edit_check.edit_all_devices_status"),k=_("edit_check.learning"),$=va(null),S=va(null);const C=e,N={csrf:C.context.csrf,ifid:C.context.ifid},A=[_("edit_check.device_exclusion_page_notes.note_1")],E=[_("edit_check.device_exclusion_page_notes.sub_note_1"),_("edit_check.device_exclusion_page_notes.sub_note_2")];function T(e){let t={click_button_edit_device:I,click_button_historical_flows:U,click_button_delete:P};null!=t[e.event_id]&&t[e.event_id](e)}async function P(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;$.value=e.row,f=t,p=i18n("edit_check.device_exclusion"),a.value.show(f,p)}async function I(e){S.value=e.row,s.value.show(S.value)}function U(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await R()}));const O=C.crsf,M=async function(){const e=$.value,t=NtopUtils.buildURL(r,{device:e.mac_address.mac});N.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,N),D()},j=async function(){l.value.show()},L=async function(){s.value.show()},F=async function(){const e=NtopUtils.buildURL(r,{device:"all"});await ntopng_utility.http_post_request(e,N),D()},R=async function(){(await ntopng_utility.http_request(u)).learning_done?d.value=!1:d.value=!0},D=async function(){await R(),t.value.refresh_table()};function z(){n.value.show()}const q=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(i,{...t});await ntopng_utility.http_post_request(a,N),D()},B=async function(e){let t=S.value;null!=t&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=t&&(e.mac=t.mac_address.mac),e.csrf=C.context.csrf;const a=NtopUtils.buildURL(c,{...e});await ntopng_utility.http_post_request(a,N),D()};function V(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=H(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=H(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=G(l),n=G(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function H(e){return e.split("host=")[1].split("'")[0]}function G(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const W=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{let a="";return"allowed"==e?(a=_("edit_check.authorized"),`<span class="badge bg-success" title="${a}">${a}</span>`):(a=_("edit_check.unauthorized"),`<span class="badge bg-danger" title="${a}">${a}</span>`)},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},K=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||C.context.ifid});const J=e=>e;return(e,i)=>(Ps(),js("div",S$,[Vs("div",C$,[N$,Vs("div",A$,[Vs("div",E$,[d.value?(Ps(),js("div",T$,te(ya(k)),1)):Ys("v-if",!0),Vs("div",P$,[Hs(lx,{ref_key:"modal_delete_confirm",ref:a,title:ya(p),body:ya(f),onDelete:M},null,8,["title","body"]),Hs(lx,{ref_key:"modal_delete_all",ref:l,title:ya(v),body:ya(m),onDelete:F},null,8,["title","body"]),Hs(_$,{ref_key:"modal_add_device",ref:n,title:ya(h),body:ya(g),footer:ya(b),list_notes:ya(y),onAdd:q},null,8,["title","body","footer","list_notes"]),Hs($$,{ref_key:"modal_edit_device",ref:s,title:ya(w),title_edit_all:ya(x),onEdit:B},null,8,["title","title_edit_all"]),Hs(iv,{ref_key:"table_device_exclusions",ref:t,csrf:ya(O),table_id:o.value,f_map_columns:W,get_extra_params_obj:K,f_map_config:J,f_sort_rows:V,onCustom_event:T},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:z},[...I$],512)])),_:1},8,["csrf","table_id"])])]),Vs("div",U$,[Vs("button",{type:"button",onClick:j,class:"btn btn-danger me-1"},[O$,Ks(" "+te(_("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:L,class:"btn btn-secondary"},[M$,Ks(" "+te(_("edit_check.edit_all_devices_status")),1)])])]),Hs(pv,{note_list:A,add_sub_notes:"true",sub_note_list:E})])]))},__file:"http_src/vue/page-device-exclusions.vue"},L$={components:{datatable:ww},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const F$={class:"row"},R$={class:"col-md-12 col-lg-12"},D$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),z$={class:"card"},q$={class:"card-body"},B$={id:"table_host_tls"},V$={class:"card-footer"};L$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",F$,[Vs("div",R$,[D$,Vs("div",z$,[Vs("div",q$,[Vs("div",B$,[Hs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",V$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},L$.__file="http_src/vue/page-host-tls.vue";var H$={components:{datatable:ww},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const G$={class:"row"},W$={class:"col-md-12 col-lg-12"},K$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),J$={class:"card"},Y$={class:"card-body"},Z$={id:"table_host_ssh"};H$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",G$,[Vs("div",W$,[K$,Vs("div",J$,[Vs("div",Y$,[Vs("div",Z$,[Hs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},H$.__file="http_src/vue/page-host-ssh.vue";const X$="change_map_event";var Q$={components:{"page-periodicity-map":bk,"page-periodicity-table":gx,"page-asset-map":Rk,"page-asset-table":sx,"page-service-map":Qx,"page-service-table":Mx,"page-navbar":n_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",X$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(X$,e))}}};Q$.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Ps(),js(Ss,null,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),js(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},Q$.__file="http_src/vue/page-home-map.vue";const eS=["width","height"],tS=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var aS={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=d3v7,a=e,l=va(null),n=va({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=t.scaleOrdinal(t.schemeCategory10);let o=await s();const i=function(){let e=a.width;null==e&&(e=window.innerWidth-200);let t=a.height;null==t&&(t=window.innerHeight-50);return{width:e,height:t}}();n.value=i;const{links:r,nodes:c}=function(e,a,l){return t.sankey().nodeAlign(t.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[a,l]])(e)}(o,i.width-10,i.height-5);t.select(l.value).select("g.nodes").selectAll("rect").data(c).join((a=>{const l=a.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(t.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(a=>a.transition(t.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),t.select(l.value).select("g.texts").selectAll("text").data(c).join((a=>{a.append("text").transition(t.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(a=>t.rgb(e(a.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(a=>a.transition(t.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(a=>t.rgb(e(a.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove())),t.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),t.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const a=e.append("path");a.transition(t.easeLinear).delay(1e3).duration(500).attr("d",t.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),a.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(t.easeLinear).delay(500).duration(500).attr("d",t.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),js("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},[...tS],8,eS))]))}};lp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),aS.__file="http_src/vue/page-sankey.vue";const lS="change_applications_tab_event";var nS={components:{chart:N_,datatable:ww,"modal-delete-confirm":lx,"tab-list":Xw},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){N.on_custom_event("change_applications_tab_event",lS,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(lS,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const sS={class:"row"},oS={class:"col-md-12 col-lg-12"},iS={class:"card"},rS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),cS={class:"card-body"},uS={id:"host_details_applications"},dS={class:"row mb-4 mt-4",id:"host_details_applications"},_S={class:"col-6"},pS={key:0,class:"widget-name"};nS.render=function(e,t,a,l,n,s){const o=kn("tab-list"),i=kn("chart"),r=kn("datatable");return Ps(),js("div",sS,[Vs("div",oS,[Vs("div",iS,[rS,Vs("div",cS,[Vs("div",uS,[Hs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",dS,[(Ps(!0),js(Ss,null,En(n.chart_options,(e=>(Ps(),js("div",_S,[e.tab==n.applications_tab?(Ps(),js("h3",pS,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Ps(),Ls(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Ps(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Ps(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},nS.__file="http_src/vue/page-host-details-applications.vue";const fS={class:"row"},vS={class:"col-md-12 col-lg-12"},mS={class:"card"},hS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),gS={class:"card-body"},bS={id:"host_details_traffic"},yS={class:"row mb-4 mt-4",id:"host_details_traffic"},wS={class:"col-4"},xS={class:"widget-name"};var kS={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=va(null);va([]);const a=va({});dn((async()=>{!function(e){const l=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,a,l,n){t.value.reload()}});let s={table_buttons:l,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),mn((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Ps(),js("div",fS,[Vs("div",vS,[Vs("div",mS,[hS,Vs("div",gS,[Vs("div",bS,[Vs("div",yS,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",wS,[Vs("h3",xS,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(ww,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const $S={class:"row"},SS={class:"col-md-12 col-lg-12"},CS={class:"card"},NS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),AS={class:"card-body"},ES={class:"row"},TS={class:"col-6 mb-4 mt-4"},PS={class:"widget-name"};var IS={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Ps(),js("div",$S,[Vs("div",SS,[Vs("div",CS,[NS,Vs("div",AS,[Vs("div",ES,[(Ps(),js(Ss,null,En(t,(e=>Vs("div",TS,[Vs("h3",PS,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const US={key:0,class:"alert alert-info",id:"empty-message"},OS=["width","height"],MS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var jS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=d3v7,n=a,s=va(!1),o=e,i=va(null),r=va({});function c(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=o.sankey_data.nodes&&null!=o.sankey_data.links&&0!=o.sankey_data.length&&0!=o.sankey_data.links.length&&_()}dn((async()=>{})),_n((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),Ml((()=>o.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function _(){const e=l.scaleOrdinal(l.schemeCategory10);let t=o.sankey_data;const a=function(){n("update_width");let e=o.width;null==e&&(e=$(i.value).parent().parent().width()-10);n("update_height");let t=o.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var s,c;r.value=a,s=a.width-10,c=a.height-5,u=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[s,c]]),d=u(t);const{links:_,nodes:m}=d;let h=l.select(i.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",v),h.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e?.label}`)),h.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<a.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<a.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){n("node_click",t.data)})),h.call(l.drag().subject((e=>e)).on("start",p).on("drag",f));const g=l.select(i.value).select("g.links").selectAll("g").data(_).join((e=>e.append("g")));let b=g.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),g.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),g.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){l.select(this).attr("transform",(function(t){const a=e.x-t.__x,n=e.y-t.__y,s=r.value.width,o=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+n,t.y1=t.__y1+n,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>o&&(t.y0=o-(t.__y1-t.__y0),t.y1=o),u.update(d),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function v({transform:e}){g.attr("transform",e)}const m=e=>i18n(e);return t({draw_sankey:_,set_no_data_flag:function(e){s.value=e}}),(t,a)=>(Ps(),js(Ss,null,[s.value?(Ps(),js("div",US,te(e.no_data_message||m("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:i,width:r.value.width,height:r.value.height,style:{margin:"10px"}},[...MS],8,OS))])],64))}};lp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),jS.__file="http_src/vue/sankey.vue";const LS={class:"row"},FS={class:"col-md-12 col-lg-12"},RS={class:"card card-shadow"},DS={class:"card-body"},zS={class:"d-flex align-items-center mb-2"},qS={class:"d-flex no-wrap ms-auto"},BS={class:"m-1"},VS={style:{"min-width":"16rem"}},HS={class:"my-auto me-1"},GS=Vs("label",{class:"my-auto me-1"},null,-1),WS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var KS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=va(null),s=va(!1),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=va(o[3]),r=va({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let v=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:v}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),js("div",LS,[Vs("div",FS,[Vs("div",RS,[s.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",DS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",zS,[Vs("div",qS,[Vs("div",BS,[Vs("div",VS,[Vs("label",HS,te(a("hosts"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[GS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},[...WS])])])])]),Hs(jS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const JS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)};function YS(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const ZS=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},XS=function(e,t,a){return e=YS(e),t=YS(t),1==a?e-t:t-e},QS=function(e,t,a,l){return e=ZS(l,e,a),t=ZS(l,t,a),XS(e,t,a)},eC={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:XS,sortByNumberWithNormalizationValue:QS},tC={key:0,class:"alert alert-info alert-dismissable"},aC=Vs("span",{class:"text-info me-1"},null,-1),lC={class:"form-group ms-2 me-2 mt-3 row"},nC={class:"col-form-label col-sm-2"},sC={class:"col-sm-10"},oC={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},iC={key:1,class:"form-group ms-2 me-2 mt-3 row"},rC={class:"col-form-label col-sm-2"},cC={class:"col-sm-10"},uC=["placeholder"],dC={key:2,class:"form-group ms-2 me-2 mt-3 row"},_C={class:"col-form-label col-sm-2"},pC={class:"col-sm-10"},fC={key:3,class:"form-group ms-2 me-2 mt-3 row"},vC={class:"col-form-label col-sm-2"},mC={class:"col-sm-10"},hC={key:4,class:"form-group ms-2 me-2 mt-3 row"},gC={class:"col-form-label col-sm-2"},bC={class:"col-10"},yC={key:5,class:"form-group ms-2 me-2 mt-3 row"},wC={class:"col-form-label col-sm-2"},xC={class:"col-10"},kC={class:"col-form-label col-sm-2"},$C={class:"col-10"},SC={key:6,class:"form-group ms-2 me-2 mt-3 row"},CC={class:"col-form-label col-sm-2"},NC={key:0,class:"col-10"},AC={key:1,class:"col-10"},EC={key:2,class:"col-10"},TC={key:3,class:"col-10"},PC={key:4,class:"col-10"},IC={key:7,class:"form-group ms-2 me-2 mt-3 row"},UC={class:"col-form-label col-sm-2"},OC={class:"col-10"},MC={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},jC={class:"col-form-label col-sm-2"},LC={class:"col-sm-3"},FC={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},RC=["value","id"],DC=["id","for"],zC=["value","id"],qC=["id","for"],BC=["value","id"],VC=["id","for"],HC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},GC=["value","id"],WC=["id","for"],KC={key:8,class:"message alert alert-warning mt-3"},JC=["disabled"],YC=["disabled"];var ZC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){va(""),va("");let n=va(!1),s=va(!1);const o=va(null),i=l;let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=va(!1),d=e=>i18n(e),_=va([]),p=va(null),f=va(null),v=va([]),m=va([]),h=va([]),g=va([]),b=va([]),y=va([]),w=va([]),x=va(null),k=va(null),S=va({}),C=va({}),N=va({}),A=va({}),E=va({}),T=va({}),P=va({}),I=va({}),U=va(!0),O=va({}),M=va(!0),j=va("hosts"),L=va(!1),F=va(!1),R=va(null),D=va(null),z=va(!1),q=va(null),B=va(null),V=va({}),H=va({}),G=va({}),W=va(null);let J=va([]);const Y=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4")],Z=[d("if_stats_config.note_5")],X=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),Q=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),ee=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),ae=va([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),le=va([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),ne=va([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),se=va([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),oe=[{title:"+",label:"%",id:"plus",value:1,active:!0}],ie=va(null),re=va(null),ce=e;function ue(e){e.forEach((e=>e.active=1==e.default_active))}ce.page_csrf;const de=e=>{j.value=e,J.value=X.value,"host_pool"==e||"CIDR"==e?(pe(),O.value="host_pool"==e?J.value[1]:J.value[0]):O.value=X.value[0]},_e=()=>{let e=[];"flowdev_port:usage"==I.value.id?(ae.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),J.value=e):(Q.value.forEach((t=>{"value"!=t.id&&e.push(t)})),J.value=e),O.value=J.value[0]},pe=e=>{let t=[];"host_pool"==j.value&&"bps"!=P.value.measure_unit||"CIDR"==j.value&&"bps"!=G.value.measure_unit?(ee.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),J.value=t):(ee.value.forEach((e=>{"value"!=e.id&&t.push(e)})),J.value=t),null!=e&&0!=e||(O.value=J.value[0])},fe=()=>{let e=new RegExp(yp.get_data_pattern("ip"));U.value=!(e.test(ie.value)||"*"===ie.value)},ve=e=>{const t=e.target.id;se.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},me=e=>{const t=e.target.id;"throughput"==O.value.id?ne.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==O.value.id?le.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==O.value.id&&oe.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},he=e=>{let t="";"interface"!=j.value&&(t=ie.value);const a=C.value.id;let l=S.value.id,n=S.value.label;"interface"==j.value?(l=T.value.id,n=T.value.label):"host_pool"==j.value?(l=P.value.schema,n=P.value.label):"CIDR"==j.value&&(l=G.value.schema,n=G.value.label);const s=T.value.id,o=j.value,r=N.value.id;N.value.label;let c,u,d,_,p=O.value.id,f="Host"==j.value?S.value.extra_metric?S.value.extra_metric:null:T.value.extra_metric?T.value.extra_metric:null,v=e?D.value:null;!1===M.value&&(p="",f="",d=re.value.value),"throughput"==p?(se.value.forEach((e=>{e.active&&(u=e.value)})),_=parseInt(u),ne.value.forEach((e=>{e.active&&(c=e.value)})),d=c*parseInt(re.value.value)):"volume"==p?(se.value.forEach((e=>{e.active&&(u=e.value)})),_=parseInt(u),le.value.forEach((e=>{e.active&&(c=e.value)})),d=c*parseInt(re.value.value)):"percentage"==p?(se.value.forEach((e=>{e.active&&(u=e.value)})),_=parseInt(u),d=parseInt(re.value.value)):"value"!=p&&"absolute_percentage"!=p||(se.value.forEach((e=>{e.active&&(u=e.value)})),_=parseInt(u),d=_*parseInt(re.value.value));let m="add";if(1==e&&(m="edit"),"Host"==j.value)i(m,{host:t,frequency:a,metric:l,metric_label:n,threshold:d,metric_type:p,extra_metric:f,rule_type:o,rule_threshold_sign:_,rule_id:v});else if("interface"==j.value)i(m,{frequency:a,metric:s,metric_label:n,threshold:d,metric_type:p,extra_metric:f,rule_type:o,interface:r,rule_threshold_sign:_,rule_id:v});else if("exporter"==j.value){let e=E.value.id;E.value.label;const t=A.value.id;"*"==t&&(e="*");const l=A.value.ifid;let n;I.value.id?n=y.value.find((e=>e.id==I.value.id)):(n=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(n=I.value,n.id="flowdev_port:traffic"):(n=I.value,n.id="flowdev:traffic"));let s=n.label;i(m,{host:t,frequency:a,metric:n.id,metric_label:s,threshold:d,metric_type:p,rule_type:o,interface:e,rule_ifid:l,rule_threshold_sign:_,rule_id:v})}else if("CIDR"==j.value){t=H.value.id;const e=H.value.network_id;i(m,{host:t,frequency:a,metric:l,metric_label:n,threshold:d,metric_type:p,extra_metric:f,rule_type:o,rule_threshold_sign:_,rule_id:v,network:e})}else if("host_pool"==j.value){const e=V.value.id,t=V.value.label;i(m,{host_pool_id:e,host_pool_label:t,frequency:a,metric:l,metric_label:n,threshold:d,metric_type:p,extra_metric:f,rule_type:o,rule_threshold_sign:_,rule_id:v})}},ge=()=>{he(!0)};async function be(){let e=[];if("*"==A.value.id)return;const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${A.value.id}&ifid=${A.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0]?.timeseries_available}const ye=function(e){const t=[{id:"*",value:"*",label:"*"}];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t.sort(((e,t)=>eC.sortByIP(e.label,t.label,1))),t},we=function(){be()};return dn((()=>{X.value.forEach((e=>{e.active&&(O.value=e)})),z.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),F.value=!0,D.value=e.row_id,U.value=!1,se.value.forEach((t=>{t.active=t.value==e.threshold_sign})),X.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,O.value=t):t.active=!1})),J.value=X.value,"volume"==e.metric_type?le.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,re.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?ne.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,re.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?re.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(re.value.value=e.threshold*e.threshold_sign),j.value=e.rule_type,"interface"==j.value?(v.value.forEach((t=>{t.id==e.target&&(N.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==j.value?(m.value.forEach((t=>{t.id==e.target&&(A.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(E.value=t)}))):"Host"==j.value?(ie.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==j.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),pe(!0),J.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"host_pool"==j.value&&(q.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(P.value=t)})),pe(),J.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))))})(e):async function(){z.value=!1,ie.value="",j.value="Host",N.value=v.value[0],S.value=_.value[0],T.value=g.value[0],I.value=y.value[0],F.value=!1,r=i18n("if_stats_config.add_host_rules_title"),C.value=w.value[0],O.value=X.value[0],A.value=m.value[1],null!=A.value&&be(),X.value.forEach((e=>e.active=!1)),X.value[0].active=!0,null!=q.value&&(V.value=q.value[0]),P.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),ue(le.value),ue(ne.value),ue(se.value),j.value="Host",U.value=!0,re.value.value=1,D.value=null,J.value=X.value,"Host"==j||"interface"==j?O.vale=X.value[0]:O.value=J.value[0]}(),o.value.show()},close:()=>{F.value=!1,z.value=!1,o.value.close()},metricsLoaded:async(e,t,a,l,o,i,r,c,d,h,x,k)=>{u.value=!0,_.value=e,g.value=a,v.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t.sort(((e,t)=>function(e,t){let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0}(e,t))),t}(t),w.value=ce.frequency_list,C.value=w.value[0],S.value=_.value[0],N.value=v.value[0],R.value=i,r&&(p.value=r),c&&(f.value=c),m.value=ye(l),JS.isEmptyArrayOrNull(d)||(n.value=!0),q.value=d,b.value=x,JS.isEmptyArrayOrNull(h)||(s.value=!0),B.value=h,W.value=k,y.value=o,A.value=m.value[1],null!=A.value&&be()},invalidAdd:()=>{z.value=!0}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[22]||(t[22]=e=>{}),ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(ya(r)),1)])),body:ml((()=>[z.value?(Ps(),js("div",tC,[aC,Vs("span",null,te(d("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",lC,[Vs("label",nC,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",sC,[Vs("div",oC,[Vs("label",{class:K(["btn",["Host"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>de("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>de("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Ps(),js("label",{key:0,class:K(["btn",["exporter"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>de("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),1==ya(n)?(Ps(),js("label",{key:1,class:K(["btn",["host_pool"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>de("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Ys("v-if",!0),1==ya(s)?(Ps(),js("label",{key:2,class:K(["btn",["CIDR"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>de("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Ys("v-if",!0)])])]),"Host"==j.value?(Ps(),js("div",iC,[Vs("label",rC,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",cC,[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>ie.value=e),onInput:fe,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,uC),[[Mi,ie.value]])])])):Ys("v-if",!0),"CIDR"==j.value?(Ps(),js("div",dC,[Vs("label",_C,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",pC,[Hs(l_,{selected_option:H.value,"onUpdate:selected_option":t[6]||(t[6]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==j.value?(Ps(),js("div",fC,[Vs("label",vC,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",mC,[Hs(l_,{selected_option:V.value,"onUpdate:selected_option":t[7]||(t[7]=e=>V.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==j.value?(Ps(),js("div",hC,[Vs("label",gC,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",bC,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:v.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==j.value&&1==L.value?(Ps(),js("div",yC,[Vs("label",wC,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",xC,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":t[9]||(t[9]=e=>A.value=e),options:m.value,onSelect_option:we},null,8,["selected_option","options"])]),"*"!=A.value.id?(Ps(),js(Ss,{key:0},[Vs("label",kC,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",$C,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[10]||(t[10]=e=>E.value=e),options:h.value},null,8,["selected_option","options"])])],64)):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Ps(),js("div",SC,[Vs("label",CC,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==j.value?(Ps(),js("div",NC,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[11]||(t[11]=e=>S.value=e),onSelect_option:t[12]||(t[12]=e=>{1==S.value.show_volume?M.value=!0:M.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==j.value?(Ps(),js("div",AC,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[13]||(t[13]=e=>T.value=e),onSelect_option:t[14]||(t[14]=e=>{1==T.value.show_volume?M.value=!0:M.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==j.value?(Ps(),js("div",EC,[Hs(l_,{selected_option:I.value,"onUpdate:selected_option":t[15]||(t[15]=e=>I.value=e),onSelect_option:_e,options:y.value},null,8,["selected_option","options"])])):"host_pool"==j.value?(Ps(),js("div",TC,[Hs(l_,{selected_option:P.value,"onUpdate:selected_option":t[16]||(t[16]=e=>P.value=e),onSelect_option:t[17]||(t[17]=e=>pe()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==j.value?(Ps(),js("div",PC,[Hs(l_,{selected_option:G.value,"onUpdate:selected_option":t[18]||(t[18]=e=>G.value=e),onSelect_option:t[19]||(t[19]=e=>pe()),options:W.value},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Ps(),js("div",IC,[Vs("label",UC,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",OC,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[20]||(t[20]=e=>C.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",MC,[Vs("label",jC,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),M.value?(Ps(),js(Ss,{key:0},[Vs("div",LC,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[21]||(t[21]=e=>O.value=e),options:ya(J)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==O.value.id?"p-0":""]])},[Vs("div",FC,["throughput"==O.value.id?(Ps(!0),js(Ss,{key:0},En(ne.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,RC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:me,for:e.id},te(e.label),11,DC)],64)))),256)):Ys("v-if",!0),"percentage"==O.value.id?(Ps(),js(Ss,{key:1},En(oe,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,zC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:me,for:e.id},te(e.label),11,qC)],64)))),64)):Ys("v-if",!0),"volume"==O.value.id?(Ps(!0),js(Ss,{key:2},En(le.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,BC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:me,for:e.id},te(e.label),11,VC)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",HC,[(Ps(!0),js(Ss,null,En(se.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,GC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ve,for:e.id},te(e.label),11,WC)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([M.value?"col-sm-2":"col-sm-8"])},["percentage"==O.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:re,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:re,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==O.value.id?(Ps(),js("div",KC,te(d("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(pv,{note_list:Y,add_sub_notes:!0,sub_note_list:Z}),0==F.value?(Ps(),js("button",{key:0,type:"button",onClick:he,class:"btn btn-primary",disabled:U.value&&"Host"==j.value},te(d("add")),9,JC)):(Ps(),js("button",{key:1,type:"button",onClick:ge,class:"btn btn-primary",disabled:U.value&&"Host"==j.value},te(d("apply")),9,YC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const XC={class:"row"},QC={class:"col-md-12 col-lg-12"},eN={class:"card"},tN=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),aN={class:"card-body"},lN={class:"mb-4"},nN={id:"host_rules"},sN={class:"card-footer"};var oN={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=va(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,v=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const m=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,h=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,g=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,b=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,y=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,w=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,x=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],k={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let S={},C=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let N=o("if_stats_config.delete_host_rules_description"),A=[],E=[],T=[],P=[],I=[],U=[],O=[],M=[],j=[];const L=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function F(e){await q(e)}const R=function(){const e=r.value;return r.value=null,e},D=function(){l.value.reload()},z=async function(){const e=i.value,t=a.buildURL(w,{...k,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){D()}))},q=async function(e){e.csrf=t.page_csrf,e.ifid=t.ifid;const a=await ntopng_utility.http_post_request(y,e);c.value=a.rsp,0==c.value?(s.value.close(),D()):s.value.invalidAdd()},B=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},V=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){D()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),width:"5%",targets:0,name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return B(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:2,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name&&null!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+o("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:o("if_stats_config.rule_type"),targets:3,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&t.metric.includes("flowdev_port")&&(a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?A.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):E.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return L.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:6,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);if("*"==t.target)return"";if(null==e)return"";if(t.metric_type&&"throughput"==t.metric_type)l=a.bitsToSize(e);else if(t.metric_type&&"volume"==t.metric_type)l=a.bytesToSize(e);else if(t.metric_type&&t.metric_type.includes("percentage")){const t=e<0?-1:1,n=a.fpercent(e*t);l=-1==t?`<label title='${i18n("percentage_decrease")}'> (-) ${n} </label>`:`<label title='${i18n("percentage_increase")}'>${n}</label>`}return l}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:7,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&t.metric_type.contains("percentage")?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:8,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(b,k),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};S=l};return dn((async()=>{V(),await async function(){const e=a.buildURL(u,k);await $.get(e,(function(e,t){A=e.rsp}))}(),await async function(){const e=a.buildURL(g,k);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(d,k);await $.get(e,(function(e,t){E=e.rsp}))}(),await async function(){const e=a.buildURL(f,{...k});await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...k});await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(m,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),O=t}(),await async function(){const e=a.buildURL(_,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),T=t}(),await async function(){const e=a.buildURL(h,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),M=t}(),await async function(){const e=a.buildURL(p,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),j=t}(),s.value.metricsLoaded(A,P,E,I,U,t.page_csrf,null,null,O,M,T,j)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",XC,[Vs("div",QC,[Vs("div",eN,[tN,Vs("div",aN,[Vs("div",lN,[Vs("h4",null,te(o("if_stats_config.traffic_rules")),1)]),Vs("div",nN,[Hs(lx,{ref_key:"modal_delete_confirm",ref:n,title:ya(C),body:ya(N),onDelete:z},null,8,["title","body"]),Hs(ZC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(A),interface_metric_list:ya(E),frequency_list:L,init_func:R,onAdd:q,onEdit:F},null,8,["metric_list","interface_metric_list"]),Hs(ww,{ref_key:"table_host_rules",ref:l,table_buttons:ya(S).table_buttons,columns_config:ya(S).columns_config,data_url:ya(S).data_url,enable_search:ya(S).enable_search,table_config:ya(S).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",sN,[Hs(pv,{note_list:x})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const iN={class:"row"},rN={class:"col-md-12 col-lg-12"},cN={class:"card"},uN=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dN={class:"card-body"},_N={id:"host_details_ports"},pN={class:"row mb-4 mt-4",id:"host_details_ports"},fN={class:"col-6"};var vN={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){va(null),va([]),va({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),mn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),js("div",iN,[Vs("div",rN,[Vs("div",cN,[uN,Vs("div",dN,[Vs("div",_N,[Vs("div",pN,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",fN,[Hs(Tw,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const mN={class:"row"},hN={class:"col-12"},gN={class:"card"},bN={class:"card-body"},yN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},wN={class:"d-flex ms-auto flex-row-reverse"},xN=Vs("label",{class:"my-auto me-1"},null,-1),kN=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],$N={key:0,class:"m-1"},SN={style:{"min-width":"14rem"}},CN={class:"my-auto me-1"},NN="alerts-map";var AN={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e=>i18n(e),l=e,n=va(!1),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i={},r=va(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){n.value=!0,r.value.update_chart(`${o}?${c()}`),n.value=!1},d=function(){return async e=>{let t=function(e){let t={};if(l.charts_options.forEach((a=>{a.mode_id==e&&(t=a)})),t&&t.chart&&t.chart.ntop_events){t.chart.events=t.chart.events||{};for(const[e,l]of Object.entries(t.chart.ntop_events))null!=l&&(t.chart.events[e]=a[l]||a.fnone)}return t&&t.xaxis&&t.xaxis.labels&&t.xaxis.labels.ntop_utils_formatter&&(t.xaxis.labels.formatter=a[t.xaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.yaxis&&t.yaxis.labels&&t.yaxis.labels.ntop_utils_formatter&&(t.yaxis.labels.formatter=a[t.yaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.tooltip&&t.tooltip.ntop_utils_formatter&&(t.tooltip.custom=a[t.tooltip.ntop_utils_formatter]),t}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return t.series=n.series||{},t}},_=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${o}?${c()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),t=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),t||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",l.ifid);for(const[e,t]of Object.entries(l.available_filters))t.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),_n((()=>{n.value=!1})),(a,l)=>(Ps(),js("div",mN,[Vs("div",hN,[Vs("div",gN,[Vs("div",bN,[Vs("div",yN,[Vs("div",wN,[Vs("div",null,[xN,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:u},[...kN])])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,a,l)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",$N,[Vs("div",SN,[Vs("label",CN,te(t("bubble_map."+a))+": ",1),Hs(l_,{selected_option:i[a],"onUpdate:selected_option":e=>i[a]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),n.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:NN,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(N_,{ref_key:"bubble_chart",ref:r,id:NN,chart_type:ya(s),base_url_request:o,get_params_url_request:c,get_custom_chart_options:d(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const EN={class:"row"},TN={class:"col-12"},PN={class:"card"},IN={class:"card-body"},UN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},ON={class:"d-flex ms-auto flex-row-reverse"},MN=Vs("label",{class:"my-auto me-1"},null,-1),jN={class:"m-1"},LN={key:0,style:{"min-width":"18rem"}},FN={class:"my-auto me-1"},RN="alerts-map";var DN={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e=>i18n(e),l=e,n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o={},i=va(null),r=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},c=function(){return async e=>{let t=function(e){let t={};if(l.charts_options.forEach((a=>{a.mode_id==e&&(t=a)})),t&&t.chart&&t.chart.ntop_events){t.chart.events=t.chart.events||{};for(const[e,l]of Object.entries(t.chart.ntop_events))null!=l&&(t.chart.events[e]=a[l]||a.fnone)}return t&&t.xaxis&&t.xaxis.labels&&t.xaxis.labels.ntop_utils_formatter&&(t.xaxis.labels.formatter=a[t.xaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.yaxis&&t.yaxis.labels&&t.yaxis.labels.ntop_utils_formatter&&(t.yaxis.labels.formatter=a[t.yaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.tooltip&&t.tooltip.ntop_utils_formatter&&(t.tooltip.custom=a[t.tooltip.ntop_utils_formatter]),t}(Number(o.bubble_mode.id));const n=await ntopng_utility.http_request(e);return t.series=n.series||{},t}},u=function(e){x.set_key_to_url(e.filter_name,e.id),i.value.update_chart(`${s}?${r()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",l.ifid);for(const[e,t]of Object.entries(l.available_filters))t.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(a,l)=>(Ps(),js("div",EN,[Vs("div",TN,[Vs("div",PN,[Vs("div",IN,[Vs("div",UN,[Vs("div",ON,[MN,(Ps(!0),js(Ss,null,En(e.available_filters,((e,a,l)=>(Ps(),js("div",jN,[e.length>0?(Ps(),js("div",LN,[Vs("label",FN,te(t("bubble_map."+a))+": ",1),Hs(l_,{selected_option:o[a],"onUpdate:selected_option":e=>o[a]=e,options:e,onSelect_option:u},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:RN,style:{height:"90%"}},[Hs(N_,{ref_key:"bubble_chart",ref:i,id:RN,chart_type:ya(n),base_url_request:s,get_params_url_request:r,get_custom_chart_options:c(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const zN={class:"row"},qN={class:"col-md-12 col-lg-12"},BN={class:"card card-shadow"},VN={class:"card-body"},HN={class:"d-flex align-items-center flex-row-reverse mb-2"},GN=Vs("label",{class:"my-auto me-1"},null,-1),WN=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],KN={key:0,class:"m-1"},JN={style:{"min-width":"14rem"}},YN={class:"my-auto me-1"},ZN=["title"],XN=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var QN={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t={},a=e,l=e=>i18n(e),n=va(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=va(null),r=va(null),c=va(null),u=va(null),d=va({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=va(!1);function v(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",a.ifid);for(const[e,l]of Object.entries(a.available_filters))l.forEach((a=>{a.filter_name=e,a.currently_active&&(t[e]=a)}))})),_n((()=>{y(),w(),g()}));const m=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(a,_)=>(Ps(),js("div",zN,[Vs("div",qN,[Vs("div",BN,[f.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",VN,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",HN,[Vs("div",null,[GN,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},[...WN])])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,a,n)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",KN,[Vs("div",JN,[Vs("label",YN,te(l("ports_analysis."+a))+": ",1),Hs(l_,{selected_option:t[a],"onUpdate:selected_option":e=>t[a]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Ps(),js("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},[...XN],8,ZN)):Ys("v-if",!0)]),Hs(jS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:ya(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:v},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const eA={class:"row"},tA={class:"col-md-12 col-lg-12"},aA={class:"card card-shadow"},lA={class:"card-body"},nA={class:"d-flex align-items-center mb-2"},sA={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},oA={class:"my-auto me-1"},iA=["title"],rA=["onClick","title"];var cA={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=va(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];va(null);const o=va(),i=va([]),r=va([]),c=va("aggregated_live_flows"),u=xo((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=va(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return va(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){i.value=await h("overview"),v()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function v(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const m=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7==d.value.value&&null!=t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:7==d.value.value&&null!=t.srv_port?`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`:`${e.label} ${a} ${e.extra_labels}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Ps(),js("div",eA,[Vs("div",tA,[Vs("div",aA,[Vs("div",lA,[Vs("div",nA,[Vs("div",sA,[Vs("label",oA,te(n("criteria_filter"))+": ",1),Hs(l_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(iv,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:u.value,table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(i.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:m(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,iA)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),v(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,rA)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const uA={id:"aggregated_live_flows"};var dA={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=va({}),l=va(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Ps(),js("div",uA,[Hs(ww,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const _A={class:"container-fluid"},pA={class:"row form-group mb-3"},fA={class:"col col-md-12"},vA={class:"form-label"},mA={class:"row form-group mb-3"},hA={class:"col col-md-6"},gA={class:"form-label"},bA={class:"col col-md-6"},yA={class:"form-label"},wA={key:0},xA={key:1},kA=["pattern"],$A={class:"row form-group mb-3"},SA={class:"col col-md-6"},CA={class:"form-label"},NA={class:"col col-md-6"},AA={class:"form-label"},EA={key:0},TA={key:1},PA=["pattern"],IA={class:"row form-group mb-3"},UA={class:"col col-md-12"},OA={class:"form-label"},MA={class:"row form-group mb-3"},jA={class:"col col-md-12"},LA={class:"form-label"},FA=["disabled"];var RA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=a,o=va(""),i=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let r="source_to_dest";const c=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],u=va({});let d="accept";const _=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],p=va({}),f=va(0),v=va(0),m=va({}),h=va(""),g=va(""),y=va({}),w=va(""),x=va(""),k=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let $;const S=va([]),C=va({}),N=va({}),A=va(""),E=xo((()=>O(m.value,g.value,h.value))),T=xo((()=>O(y.value,x.value,w.value))),P=va(!0);async function I(e){let t=null;null!=e&&(t=e.source.value),"interface"==m.value.value?(await j(),C.value=null!=t?S.value.find((e=>e.value==t)):S.value[0]):(g.value=null!=e?e.source.value:"",L(h,m.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==y.value.value?(await j(),N.value=null!=t?S.value.find((e=>e.value==t)):S.value[0]):(x.value=null!=e?e.destination.value:"",L(w,y.value.value))}function O(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let M=!1;async function j(){if(1==M)return;null==$&&($=b.http_request(k));let e=await $;S.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),M=!0}function L(e,t){e.value=yp.get_data_pattern(t)}const F=()=>{let e=m.value.value,t=g.value;"interface"==e&&(t=C.value.value);let a=y.value.value,l=x.value;"interface"==a&&(l=N.value.value);let n={src_type:e,src_value:t,dst_type:a,dst_value:l,policy:p.value.value,bidirectional:"bidirectional"==u.value.value},o="add";0==P.value&&(n.rule_id=f.value,n.new_rule_id=v.value,o="edit"),s(o,n),R()},R=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){P.value=null==e,null!=t&&(d=t.value);if(0==P.value)o.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),A.value=l("edit"),m.value=i.find((t=>t.value==e.source.type)),y.value=i.find((t=>t.value==e.destination.type)),u.value=c.find((t=>t.bidirectional==e.bidirectional)),p.value=_.find((t=>t.value==e.action)),f.value=e.rule_id,v.value=e.rule_id;else{o.value=l("nedge.page_rules_config.modal_rule_config.title_add"),A.value=l("add");let e=i.find((e=>1==e.default));m.value=e,y.value=e,u.value=c.find((e=>e.value==r)),p.value=_.find((e=>e.value!=d))}I(e),U(e)}(e,t),n.value.show()},close:R}),_n((()=>{})),(e,t)=>(Ps(),Ls(np,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(o.value),1)])),body:ml((()=>[Vs("div",_A,[Ys(" Rule ID "),wn(Vs("div",pA,[Vs("div",fA,[Vs("label",vA,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>v.value=e)},null,512),[[Mi,v.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>f.value=e)},null,512),[[Mi,f.value]])])],512),[[Yi,!P.value]]),Ys(" Source "),Vs("div",mA,[Vs("div",hA,[Vs("label",gA,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[2]||(t[2]=e=>m.value=e),onSelect_option:t[3]||(t[3]=e=>I()),options:i},null,8,["selected_option"])]),Vs("div",bA,[Vs("label",yA,te(l("nedge.page_rules_config.source")),1),"interface"==m.value.value?(Ps(),js("div",wA,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[4]||(t[4]=e=>C.value=e),options:S.value},null,8,["selected_option","options"])])):(Ps(),js("div",xA,[wn(Vs("input",{type:"text",class:"form-control",pattern:h.value,"onUpdate:modelValue":t[5]||(t[5]=e=>g.value=e)},null,8,kA),[[Mi,g.value]])]))])]),Ys(" Dest "),Vs("div",$A,[Vs("div",SA,[Vs("label",CA,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(l_,{selected_option:y.value,"onUpdate:selected_option":t[6]||(t[6]=e=>y.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:i},null,8,["selected_option"])]),Vs("div",NA,[Vs("label",AA,te(l("nedge.page_rules_config.dest")),1),"interface"==y.value.value?(Ps(),js("div",EA,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:S.value},null,8,["selected_option","options"])])):(Ps(),js("div",TA,[wn(Vs("input",{type:"text",class:"form-control",pattern:w.value,"onUpdate:modelValue":t[9]||(t[9]=e=>x.value=e)},null,8,PA),[[Mi,x.value]])]))])]),Ys(" Direction "),Vs("div",IA,[Vs("div",UA,[Vs("label",OA,te(l("nedge.page_rules_config.direction")),1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":t[10]||(t[10]=e=>u.value=e),options:c},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",MA,[Vs("div",jA,[Vs("label",LA,te(l("nedge.page_rules_config.action")),1),Hs(l_,{selected_option:p.value,"onUpdate:selected_option":t[11]||(t[11]=e=>p.value=e),options:_},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:!E.value||!T.value,onClick:F,class:"btn btn-primary"},te(A.value),9,FA)])),_:1},512))}};lp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),RA.__scopeId="data-v-50692d68",RA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const DA={class:"container-fluid"},zA={class:"row form-group mb-3"},qA={class:"col col-md-12"},BA={class:"form-label"};var VA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=a,n=va(null),s=e=>i18n(e),o=s("nedge.page_rules_config.modal_change_default_policy.title"),i=[{label:s("nedge.page_rules_config.accept"),value:"accept"},{label:s("nedge.page_rules_config.deny"),value:"deny"}],r=va({}),c=()=>{n.value.close()};function u(){l("apply",r.value.value),c()}return t({show:e=>{r.value=i.find((t=>t.value==e.value)),n.value.show()},close:c}),(e,t)=>(Ps(),Ls(np,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Vs("div",DA,[Ys(" Default Policy "),Vs("div",zA,[Vs("div",qA,[Vs("label",BA,te(s("nedge.page_rules_config.default policy")),1),Hs(l_,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:i},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(s("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const HA={class:"mb-2"},GA=Vs("br",null,null,-1),WA={class:"d-inline-block"},KA={key:0,style:{color:"green"}},JA={key:1,style:{color:"red"}},YA=[Vs("i",{class:"fas fa-cog"},null,-1)],ZA={id:"aggregated_live_flows"};var XA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e=>i18n(e),a=e,l=va({}),n=va(null),s=va(null),o=va(null),i=va({});function r(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function c(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function u(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}i.value="accept"==e?{value:e,label:t("nedge.page_rules_config.accept")}:{value:e,label:t("nedge.page_rules_config.deny")}}async function d(e){const t=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:a.csrf});await b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u(e),v()}function _(e,t){let l=JSON.stringify({...e,csrf:a.csrf});b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),v()}function p(){o.value.show(i.value)}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||a.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){v()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null,i.value)}});let r={table_buttons:e,data_url:`${a.url}?${o}`,enable_search:!1},c=[{columnName:t("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:t("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:t("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:t("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,a,l){return t(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:t("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,a,l){let n="red",s=t("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=t("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:t("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return f(a)}}),r.columns_config=c,l.value=r}(),u()}));const f=function(e){let t={handlerId:"delete_host",onClick:()=>{!async function(e){const t=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:a.csrf});b.http_request(t,{method:"post",headers:l,body:n}),v()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:t,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function v(){setTimeout((()=>{x.reload_url()}),500)}return(e,a)=>(Ps(),js(Ss,null,[Vs("div",HA,[Vs("h2",null,te(t("nedge.rules_config_title")),1),GA,Vs("h5",WA,[Ks(te(t("nedge.page_rules_config.default policy"))+" ",1),"accept"==i.value?.value?(Ps(),js("span",KA,te(i.value?.label),1)):Ys("v-if",!0),"deny"==i.value?.value?(Ps(),js("span",JA,te(i.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:p},[...YA])])])]),Vs("div",ZA,[Hs(ww,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(RA,{ref_key:"modal_add_rule_config",ref:s,onAdd:c,onEdit:r},null,512),Hs(VA,{ref_key:"modal_change_default_policy",ref:o,onApply:d},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const QA={key:0,class:"form-group ms-2 me-2 mt-3 row"},eE={class:"col-form-label col-sm-4"},tE={class:"col-8"},aE={key:1,class:"form-group ms-2 me-2 mt-3 row"},lE={class:"col-form-label col-sm-4"},nE={class:"col-8"},sE={class:"form-group ms-2 me-2 mt-3 row"},oE={class:"col-form-label col-sm-4"},iE={class:"col-8"},rE=["placeholder"],cE=["disabled"],uE=["disabled"];var dE={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=va(!1),o=e=>i18n(e),i=va(!0);let r=va(i18n("add_application"));const c=va(i18n("details.custom_rules_placeholder")),u=va({}),d=va([]),_=va(""),p=va(""),f=va(null);va({});const v=[o("custom_categories.each_host_separate_line"),o("custom_categories.allowed_rules"),o("custom_categories.ip_address"),o("custom_categories.ip_address_port"),o("custom_categories.port"),o("custom_categories.port_range"),o("custom_categories.host_domain")];const m=()=>{1==h()&&1==g()?i.value=!1:i.value=!0},h=()=>/^[A-Za-z0-9]*$/.test(p.value),g=()=>{let e=!0;return _.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},b=()=>{n("add",{l7_proto_id:f.value,protocol_alias:p.value,category:u.value.id,custom_rules:_.value,is_edit_page:s.value}),y()},y=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{p.value="",u.value=d.value[0],_.value="",s.value=!1,r.value=i18n("add_application"),null!=e&&(f.value=e.application_id,p.value=e.application,s.value=!0,r.value=`${i18n("edit_application")}: ${p.value}`,(e=>{let t=null;d.value.forEach((a=>{a.id==e.category_id&&(t=a)})),u.value=t,_.value=e.custom_rules?.replace(",","\n")})(e)),l.value.show(),m()},close:y,loadCategoryList:e=>{d.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(r)),1)])),body:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,f.value]]),0==s.value?(Ps(),js("div",QA,[Vs("label",eE,[Vs("b",null,te(o("app_name")),1)]),Vs("div",tE,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e),onInput:m,spellcheck:"false"},null,544),[[Mi,p.value]])])])):(Ps(),js("div",aE,[Vs("label",lE,[Vs("b",null,te(o("category")),1)]),Vs("div",nE,[Hs(l_,{selected_option:u.value,"onUpdate:selected_option":t[2]||(t[2]=e=>u.value=e),options:d.value},null,8,["selected_option","options"])])])),Vs("div",sE,[Vs("label",oE,[Vs("b",null,te(o("category_custom_rule")),1)]),Vs("div",iE,[wn(Vs("textarea",{class:"form-control",onInput:m,placeholder:c.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>_.value=e),spellcheck:"false"},null,40,rE),[[Mi,_.value]])])])])),footer:ml((()=>[Hs(pv,{note_list:v}),0==s.value?(Ps(),js("button",{key:0,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},te(o("add")),9,cE)):(Ps(),js("button",{key:1,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},te(o("apply")),9,uE))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},_E={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=e=>i18n(e),o=va(null);let i=va(i18n("custom_categories.delete_app"));const r=i18n("custom_categories.delete_app_confirm"),c=()=>{n("remove",{protocol_alias:o.value}),u()},u=()=>{l.value.close()};return t({show:e=>{null!=e&&(o.value=e.application,i.value=`${i18n("custom_categories.delete_app")}: ${o.value}`),l.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(i)),1)])),body:ml((()=>[Ks(te(ya(r)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(s("delete")),1)])),default:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,o.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const pE=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var fE={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=va(null),a=va(null),l=va(null),n=va({}),s=va([]),o=va(null),i=va(!0);let r="";const c=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,u=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,d=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,_=e=>i18n(e),p=e,f=async e=>{const t={csrf:p.page_csrf,ifid:p.ifid},a=NtopUtils.buildURL(d,{...t,...e});await $.get(a,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},v=async e=>{const t=e.is_edit_page;e.is_edit_page=null;const a={csrf:p.page_csrf,ifid:p.ifid},l=NtopUtils.buildURL(u,{...a,...e});await $.get(l,(function(e,a){"success"==a&&h(t?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},m=e=>{l.value.show(e)},h=e=>{r=e,i.value=!1,setTimeout((()=>{i.value=!0,g()}),4e3)},g=()=>{t.value.reload()};dn((async()=>{!function(){const e=[];p.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){m()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let t={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:p.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},l=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:_("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,l){return function(e){let t={handlerId:"edit_rule",onClick:()=>{m(e)}};const l=[{class:"pointer",handler:t,icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let t={handlerId:"delete_rule",onClick:()=>{var t;t=e,a.value.show(t)}};l.push({class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(l)}(l)}}],s=ntopng_utility.clone(t);s.columns_config=l,n.value=s}()})),_n((async()=>{await(async()=>{await $.get(c,(function(e,t){s.value=e.rsp})),l.value.loadCategoryList(s.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{t.value.search_value(e)})(e)})),mn((async()=>{t.value.destroy_table()}));return(c,u)=>(Ps(),js(Ss,null,[pE,wn(Vs("div",{ref_key:"update_message",ref:o,class:"alert alert-info"},te(ya(r)),513),[[Yi,!i.value]]),Hs(dE,{ref_key:"modal_add_application",ref:l,category_list:s.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:v},null,8,["category_list","page_csrf","ifid"]),Hs(_E,{ref_key:"modal_delete_application",ref:a,onRemove:f},null,512),Hs(ww,{ref_key:"applications_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const vE={class:"row"},mE={class:"col-12"},hE={class:"card card-shadow"},gE={class:"card-body"},bE={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},yE={key:2,class:"alert alert-info alert-dismissable"},wE=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),xE=["innerHTML"],kE=["innerHTML"];var $E={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=va(!1),a=i18n("map_page.fetch_error"),l=va(!1),n=va(null),s=va({}),o=va(null),i=va(""),r=i18n("discover.network_discovery_not_enabled"),c=va(!1),u=e,d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=va(!1);let f;const v=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],m=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){c.value=!1,await $.get(NtopUtils.buildURL(m,{ifid:u.ifid}),(function(e,t){1==e.rsp.discovery_requested?(l.value=!0,""!=e.rsp.progress&&(o.value=e.rsp.progress)):(l.value=!1,o.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(v.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(v.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(v.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(v.shift(),_.value=!1),i.value=e.last_network_discovery})(e.rsp)}))};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){n.value.reload()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){c.value=!1,$.get(NtopUtils.buildURL(g,{ifid:u.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:u.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},t=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],a=ntopng_utility.clone(e);a.columns_config=t,s.value=a}()})),mn((async()=>{n.value.destroy_table()})),(e,u)=>(Ps(),js("div",vE,[Vs("div",mE,[Vs("div",hE,[c.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",gE,[t.value?(Ps(),js("div",bE,te(ya(a)),1)):Ys("v-if",!0),l.value?(Ps(),js("div",yE,[wE,Ks(" "+te(ya(r))+" ",1),Vs("span",{innerHTML:o.value},null,8,xE)])):(Ps(),Ls(ww,{key:1,ref_key:"network_discovery_table",ref:n,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(pv,{note_list:v}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:i.value},null,8,kE)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const SE={class:"row"},CE={class:"col-md-12 col-lg-12"},NE={class:"card card-shadow"},AE={class:"card-body"},EE=Vs("div",{class:"d-flex align-items-center"},null,-1);var TE={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e=>i18n(e),a=va(null),l=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,n=va({}),s=va(!1),o=e;dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,l,n){s.value=!0,a.value.reload(),s.value=!1}});let i={table_buttons:e,data_url:`${l}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},r=[];r.push({columnName:t("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>function(e,t){const a=1e3*e;let l="HH:MM:SS";return l="little_endian"==o.date_format?"DD/MM/YYYY "+l:"middle_endian"==o.date_format?"MM/DD/YYYY "+l:"YYYY/MM/DD "+l,ntopng_utility.from_utc_to_server_date_format(a,l)}(e)},{columnName:t("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])}(a)}}),i.columns_config=r,n.value=i}()}));return(e,t)=>(Ps(),js("div",SE,[Vs("div",CE,[Vs("div",NE,[Vs("div",AE,[s.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([s.value?"ntopng-gray-out":""])},[(Ps(),Ls(ww,{ref_key:"table_manage_configurations_backup",ref:a,id:n.value.id,key:n.value.data_url,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,table_config:n.value.table_config},{menu:ml((()=>[EE])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const PE={class:"form-group ms-2 me-2 mt-3 row"},IE={class:"col-form-label col-sm-2"},UE={class:"col-10"},OE={key:0,class:"form-group ms-2 me-2 mt-3 row"},ME={class:"col-form-label col-sm-2"},jE={class:"col-10"},LE={class:"form-group ms-2 me-2 mt-3 row"},FE={class:"col-form-label col-sm-2"},RE={class:"col-10"},DE={class:"form-group ms-2 me-2 mt-3 row"},zE={class:"col-form-label col-sm-2"},qE={class:"col-10"},BE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},VE={class:"col-form-label col-sm-2"},HE={class:"col-sm-3"},GE={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},WE=["value","id"],KE=["id","for"],JE=["value","id"],YE=["id","for"],ZE=["value","id"],XE=["id","for"],QE={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},eT=["value","id"],tT=["id","for"],aT={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},lT=["value","id"],nT=["id","for"],sT={key:1,class:"message alert alert-warning mt-3"};var oT={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){va(""),va("");const n=va(null),s=l,o=e=>i18n(e);va(null),va(null);const i=va([]),r=va([]);let c=va([]),u=va(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=va([]),p=va(null),f=va(null),v=va({}),m=va({}),h=va({}),g=va({}),b=va({}),y=va(!0),w=va({}),x=va(!0),k=va("snmp"),S=va(!1),C=va(null);let N=va([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],T=[o("if_stats_config.note_5")],P=va([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),I=va([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),U=va([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),O=va([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),M=va([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),j=[{title:"+",label:"%",id:"plus",value:1,active:!0}],L=va(null),F=va(null),R=e,D={csrf:R.page_csrf};function z(e){e.forEach((e=>e.active=1==e.default_active))}const q=e=>{const t=e.target.id;O.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},B=e=>{const t=e.target.id;"throughput"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?j.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function V(e){const t=a.buildURL(d+"?host="+m.value.label_to_insert,D);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==m.value.label_to_insert?u.value=!1:u.value=!0}function H(){let e=[];"packets"==g.value.id||"usage"==g.value.id?P.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?P.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):P.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),N.value=e}const G=e=>{k.value="snmp",L.value;const t=b.value.id,a=g.value.id,l=g.value.label,n=m.value.label_to_insert,o=m.value.label,i=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=F.value.value),"throughput"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)/8):"volume"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),I.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)):"percentage"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(F.value.value),u="%"):(p=1,_=parseInt(F.value.value));let v="add";1==e&&(v="edit"),s(v,{frequency:t,metric:a,metric_label:l,threshold:_,metric_type:f,snmp_device:n,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:F.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),J()},W=()=>{G(!0)},J=()=>{n.value.close()};return dn((()=>{P.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(m.value=t)})),O.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?I.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):F.value.value=e.threshold*e.threshold_sign,H(),N.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(m.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),V(e.device_port))})(e):async function(){L.value="",v.value=i.value[0],m.value=null,m.value=r.value[0],V(),g.value=i.value[0],H(),b.value=_.value[0],w.value=P.value[0],P.value.forEach((e=>e.active=!1)),P.value[0].active=!0,z(I.value),z(U.value),z(O.value),k.value="snmp",y.value=!0,u.value=!1,F.value.value=1,S.value=!1,A=o("if_stats_config.add_host_rules_title")}(),n.value.show()},close:J,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=R.frequency_list,b.value=_.value[0],v.value=i.value[0],C.value=a}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[7]||(t[7]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(ya(A)),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",PE,[Vs("label",IE,[Vs("b",null,te(o("if_stats_config.snmp_device")),1)]),Vs("div",UE,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[0]||(t[0]=e=>m.value=e),onSelect_option:t[1]||(t[1]=e=>V()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Ps(),js("div",OE,[Vs("label",ME,[Vs("b",null,te(o("if_stats_config.snmp_interface")),1)]),Vs("div",jE,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":t[2]||(t[2]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",LE,[Vs("label",FE,[Vs("b",null,te(o("if_stats_config.metric")),1)]),Vs("div",RE,[Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[3]||(t[3]=e=>g.value=e),onSelect_option:t[4]||(t[4]=e=>H()),options:i.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",DE,[Vs("label",zE,[Vs("b",null,te(o("if_stats_config.frequency")),1)]),Vs("div",qE,[Hs(l_,{selected_option:b.value,"onUpdate:selected_option":t[5]||(t[5]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",BE,[Vs("label",VE,[Vs("b",null,te(o("if_stats_config.threshold")),1)]),x.value?(Ps(),js(Ss,{key:0},[Vs("div",HE,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:ya(N)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",GE,["throughput"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:0},En(U.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,WE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,KE)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Ps(),js(Ss,{key:1},En(j,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,JE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,YE)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:2},En(I.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,ZE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,XE)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Ps(),js("div",QE,[(Ps(!0),js(Ss,null,En(O.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,eT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,tT)],64)))),256))])):(Ps(),js("div",aT,[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,lT),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,nT)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"usage"!=g.value.id&&"percentage"==w.value.id?(Ps(),js("div",sT,te(o("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(pv,{note_list:E,add_sub_notes:!0,sub_note_list:T}),0==S.value?(Ps(),js("button",{key:0,type:"button",onClick:G,class:"btn btn-primary"},te(o("add")),1)):(Ps(),js("button",{key:1,type:"button",onClick:W,class:"btn btn-primary"},te(o("apply")),1))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const iT={class:"row"},rT={class:"col-md-12 col-lg-12"},cT={class:"card"},uT=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dT={class:"card-body"},_T={class:"mb-4"},pT={id:"host_rules"},fT={class:"card-footer"};var vT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],v={ifid:t.ifid,csrf:t.page_csrf};let m={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await C(),await N(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},C=async function(){const e=i.value,t=a.buildURL(p,{...v,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},N=async function(e){const t=a.buildURL(_,{...v,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,v),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};m=l};return dn((async()=>{E(),await async function(){const e=a.buildURL(c,v);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){v.verbose=!0;const e=a.buildURL(u,v);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",iT,[Vs("div",rT,[Vs("div",cT,[uT,Vs("div",dT,[Vs("div",_T,[Vs("h4",null,te(o("if_stats_config.snmp_rules")),1)]),Vs("div",pT,[Hs(lx,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:C},null,8,["title","body"]),Hs(oT,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:N,onEdit:x},null,512),Hs(ww,{ref_key:"table_host_rules",ref:l,table_buttons:ya(m).table_buttons,columns_config:ya(m).columns_config,data_url:ya(m).data_url,enable_search:ya(m).enable_search,table_config:ya(m).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",fT,[Hs(pv,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"};var mT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e=>i18n(e),a=[t("snmp.snmp_similarity_note"),t("snmp.snmp_similarity_time_note")],l=e;return _n((async()=>{Wd.build_table(http_prefix,"snmp_similarity_data")})),console.log(l.context),(e,t)=>(Ps(),js(Ss,null,[Ks(" Ciao Mondo "),Hs(pv,{note_list:a})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const hT={class:"row"},gT={class:"col-md-12 col-lg-12"},bT={class:"card card-shadow"},yT={class:"card-body"},wT={class:"d-flex mb-3"},xT={class:"d-flex align-items-center ml-2 mb-2"},kT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},$T={class:"my-auto me-1"},ST={class:"d-flex align-items-center mb-2"},CT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},NT={class:"my-auto me-1"},AT={class:"d-flex align-items-center mb-2"},ET={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},TT={class:"my-auto me-1"},PT=["title"],IT=["onClick","title"];var UT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=va([]),l=va([]),n=e;va({csrf:n.csrf,ifid:n.ifid});const s=e=>i18n(e),o=[{label:s("tcp"),value:6,param:"tcp",table_id:"tcp_ports_analysis",enterprise_m:!1},{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1}],i=va(o[0]),r=va("server_ports_analysis"),c=va({}),u=va({}),d=va();let _=va([]),p=va([]);const f=function(){if(n.is_ntop_enterprise_m)return va(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();_n((async()=>{let e=x.get_url_entry("port"),a=x.get_url_entry("protocol");const l=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=a&&0!=a.localeCompare("")&&null!=l&&0!=l.localeCompare("")?(e=Number(e),a=Number(a),o.forEach((e=>{e.value==a&&(i.value=e)})),await A(!1,l,e)):(i.value=o[0],await A(!1)),async function(e){t.value=await w("overview"),N()}(),d.value.refresh_table()}));const v=()=>x.get_url_object();async function m(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=v(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),l.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){C(e.row.ip)}const C=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id,vlan:x.get_url_entry("vlan_id")},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function N(){t.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name;s.push({label:`${e.srv_port}/${t} (${e.n_hosts})`,id:e.srv_port,application:t,application_id:e.proto_id,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{let t=Number(e.application_id.split(".")[0]);p.value.find((e=>e.id==t))||p.value.push({label:e.application,id:e.application_id,value:t})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||(u.value=null==t?p.value[0]:p.value.find((e=>e.id==t))),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),_.value.sort(((e,t)=>{let a=e.id,l=t.id;return a<l?-1:a>l?1:0})),null!=a?_.value.forEach((e=>{e.id==a&&(c.value=e)})):c.value=_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return I(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},I=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(a,n)=>(Ps(),js("div",hT,[Vs("div",gT,[Vs("div",bT,[Vs("div",yT,[Vs("div",wT,[Vs("div",xT,[Vs("div",kT,[Vs("label",$T,te(s("protocol"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":n[0]||(n[0]=e=>i.value=e),options:ya(f),onSelect_option:m},null,8,["selected_option","options"])])]),Vs("div",ST,[Vs("div",CT,[Vs("label",NT,te(s("application"))+": ",1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":n[1]||(n[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",AT,[Vs("div",ET,[Vs("label",TT,te(s("db_search.tags.srv_port"))+": ",1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":n[2]||(n[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(iv,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:v,onCustom_event:$},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(t.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{l.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,PT)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),N(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,IT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const OT={class:"container-fluid"},MT={class:"row form-group mb-3"},jT={class:"col col-md-6"},LT={class:"form-label"},FT={class:"row form-group mb-3"},RT={class:"col col-md-6"},DT={key:0},zT={class:"col-form-label col-sm-10"},qT=["placeholder"],BT={class:"row form-group mb-3"},VT={class:"col col-md-6"},HT={key:0},GT={class:"col-form-label col-sm-10"},WT=["placeholder"],KT={class:"row form-group mb-3"},JT={class:"col col-md-6"},YT={class:"col-form-label col-sm-10"},ZT=["disabled"];var XT={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=va(null),i=va([]),r=va(null),c=va(null),u=va({value:"mdns",label:"MDNS"}),d=a,_=va(null),p=()=>{let e=new RegExp(yp.get_data_pattern("ip"));g.value=!(e.test(r.value)||"*"===r.value)},f=()=>{g.value=c<1||c>65535},v=va(""),m=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],h=va(0),g=va(!0),y=va(!0),w=va({}),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=va([]),S=va([]),C=va(""),N=e=>{S.value=e,y.value=e.length<2},A=e=>{i.value=e},E=e=>{i.value=i.value.filter((t=>t.label!=e.label))},T=va(!0);async function P(e){u.value=w.value,"custom"==u.value.value&&await U()}let I=!1;async function U(){if(1==I)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),I=!0}const O=()=>{let e=u.value.label,t={repeater_type:e};if("custom"==u.value.value){t={repeater_type:e,ip:r.value,port:c.value}}let a="add";0==T.value&&(t.repeater_id=h.value,a="edit");let l=[],n=[];S.value.forEach((e=>{l.push(e.value),e.value==e.label||e.label.includes(e.value)?n.push(e.label):n.push(e.label+" ("+e.value+")")}));const s=l.join(","),o=n.join(",");t.interfaces=s,t.interface_details=o,d(a,t),M()},M=()=>{o.value.close()};return t({show:e=>{w.value={},r.value="",c.value="",i.value=[],function(e){T.value=null==e,0==T.value?(v.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=l("edit"),h.value=e.repeater_id,m.forEach((t=>{t.label==e.type&&(w.value=t)})),"custom"==w.value.value&&(r.value=e.ip,c.value=e.port),P()):(v.value=l("nedge.page_rules_config.modal_rule_config.title_add"),C.value=l("add"),m.find((e=>1==e.default)));if(0==T.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push($.value.find((t=>t.value==e)))})),i.value=a}}(e),o.value.show()},close:M}),_n((async()=>{await U()})),(e,t)=>(Ps(),Ls(np,{onShowed:t[5]||(t[5]=e=>{}),ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(v.value),1)])),body:ml((()=>[Vs("div",OT,[Ys(" Repeater Type "),Vs("div",MT,[Vs("div",jT,[Vs("label",LT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[0]||(t[0]=e=>w.value=e),onSelect_option:t[1]||(t[1]=e=>P()),options:m},null,8,["selected_option"])])]),Ys(" IP "),Vs("div",FT,[Vs("div",RT,["custom"==w.value.value?(Ps(),js("div",DT,[Vs("label",zT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>r.value=e),onInput:p,class:"form-control",type:"text",placeholder:ya(n),required:""},null,40,qT),[[Mi,r.value]])])):Ys("v-if",!0)])]),Ys(" Port "),Vs("div",BT,[Vs("div",VT,["custom"==w.value.value?(Ps(),js("div",HT,[Vs("label",GT,[Vs("b",null,te(l("nedge.page_repeater_config.port")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>c.value=e),onInput:f,class:"form-control",type:"text",placeholder:ya(s),required:""},null,40,WT),[[Mi,c.value]])])):Ys("v-if",!0)])]),Vs("div",KT,[Vs("div",JT,[Vs("label",YT,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Hs(l_,{ref_key:"interfaces_search",ref:_,selected_options:i.value,"onUpdate:selected_options":t[4]||(t[4]=e=>i.value=e),options:$.value,multiple:!0,onSelect_option:A,onUnselect_option:E,onChange_selected_options:N},null,8,["selected_options","options"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:y.value||g.value&&"custom"==u.value,onClick:O,class:"btn btn-primary"},te(C.value),9,ZT)])),_:1},512))}};lp("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),XT.__scopeId="data-v-5b3dc248",XT.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const QT={class:"mb-2"},eP=Vs("br",null,null,-1),tP={id:"aggregated_live_flows"};var aP={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e=>i18n(e),a=e,l=va({}),n=va(null),s=va(null);function o(e){r(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function i(e){r(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function r(e,t){let l=JSON.stringify({...e,csrf:a.csrf});b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u()}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||a.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){u()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null)}});let i={table_buttons:e,data_url:`${a.url}?${o}`,enable_search:!1},r=[{columnName:t("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:t("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:t("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:t("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return function(e,t){return e.split(",").join(", ")}(e)}}].map((e=>e));r.push({columnName:t("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),i.columns_config=r,l.value=i}()}));const c=function(e){let t={handlerId:"delete_host",onClick:()=>{!function(e){const t=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:a.csrf});b.http_request(t,{method:"post",headers:l,body:n}),u()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function u(){setTimeout((()=>{x.reload_url()}),500)}return(e,a)=>(Ps(),js(Ss,null,[Vs("div",QT,[Vs("h2",null,te(t("nedge.repeaters_config_title")),1),eP]),Vs("div",tP,[Hs(ww,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(XT,{ref_key:"modal_add_repeater_config",ref:s,onAdd:i,onEdit:o},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const lP={key:0,class:"text-left"};var nP={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(""),o=va(""),i=va(!1),r=va(!1),c=a,u=va({}),d=e;async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:d.context.csrf,ifid:d.context.ifid,serial_key:u.value};const a=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(a){r.value=!1,i.value=!0;let e="";a.deleted_hosts>1&&(e=". Number hosts deleted: "+a.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,c("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const p=()=>{setTimeout((()=>{n.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,s.value=t,n.value.show()},close:p}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l("delete_inactive_host_title")),1)])),body:ml((()=>[Ks(te(s.value)+" ",1),i.value?(Ps(),js("div",lP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const sP={class:"mt-3",style:{"max-width":"8rem"}},oP={key:0,class:"text-left"};var iP={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);va("csv");const n=va(),s=va(""),o=va(!1),i=va(!1),r=[{label:l("show_alerts.presets.5_min"),value:300},{label:l("show_alerts.presets.30_min"),value:1800},{label:l("show_alerts.presets.hour"),value:3600},{label:l("show_alerts.presets.2_hours"),value:7200},{label:l("show_alerts.presets.6_hours"),value:21600},{label:l("show_alerts.presets.12_hours"),value:43200},{label:l("show_alerts.presets.day"),value:86400},{label:l("show_alerts.presets.week"),value:604800}],c=a,u=va(),d=e;function _(e){n.value=e}async function p(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:d.context.csrf,ifid:d.context.ifid,serial_key:n.value.value};const a=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(a){i.value=!1,o.value=!0;let e="";a.deleted_hosts>1&&(e=". Number hosts deleted: "+a.deleted_hosts),s.value=i18n("succ_del_inactive_hosts")+e,c("delete_host"),f()}else i.value=!0,o.value=!0,s.value=i18n("err_del_inactive_hosts")}_n((()=>{n.value=r[0]}));const f=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:f}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:u},{title:ml((()=>[Ks(te(l("delete")),1)])),body:ml((()=>[Ks(te(l("delete_since"))+" ",1),Vs("div",sP,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:r,onSelect_option:_},null,8,["selected_option"])]),o.value?(Ps(),js("div",oP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",i.value?"text-danger":"text-success"])},[Vs("small",null,te(s.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:p,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const rP={class:"mt-3",style:{"max-width":"8rem"}};var cP={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);va("csv");const n=va(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=a,i=va();function r(e){n.value=e}async function c(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),o("download"),u()}_n((()=>{n.value=s[0]}));const u=()=>{i.value.close()};return t({show:()=>{i.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:i},{title:ml((()=>[Ks(te(l("download")),1)])),body:ml((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",rP,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:r},null,8,["selected_option"])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const uP={class:"row"},dP={class:"col-md-12 col-lg-12"},_P={class:"card card-shadow"},pP={class:"card-body"},fP={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},vP={class:"col-4"},mP={class:"widget-name"},hP=["title"],gP=["onClick","title"],bP={class:"card-footer mt-3"},yP=Vs("i",{class:"fas fa-trash"},null,-1),wP=Vs("i",{class:"fas fa-trash"},null,-1),xP=[Vs("i",{class:"fas fa-download"},null,-1)],kP="change_applications_tab_event";var $P={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e=>i18n(e),a=va("inactive_hosts");va(t("local_hosts_only"));const l=va([]),n=va([]),s=va(),o=va(),i=va(),r=va(),c=va(),u=va(),d=va(),_=va(!1),p=va();va();const f=e,v=va({csrf:f.csrf,ifid:f.ifid}),m=[{ref:c,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:u,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:d,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],h=va([{title:i18n("table_view"),active:0==_.value,id:"table"},{title:i18n("chart_view"),active:1==_.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",kP,(e=>{x.set_key_to_url("view",e.id)})),async function(e){l.value=await y("overview"),g()}()}));function g(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function b(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await y(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}async function y(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function w(){s.value.refresh_table()}function k(e){_.value=!_.value,h.value.forEach((e=>{e.active=!1,("table"==e.id&&0==_.value||"chart"==e.id&&1==_.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(kP,e)}const $=()=>x.get_url_object();function S(e){let t={click_button_historical_flows:T,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;i.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function N(){i.value.show("all",i18n("delete_all_inactive_hosts"))}function A(){r.value.show()}function E(){o.value.show()}function T(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const P=e=>{let t={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=t[e.data_field],"actions"==e.id){const t={historical_data:f.show_historical};e.button_def_array.forEach((e=>{t[e.id]||e.class.push("disabled")}))}})),e};return(c,u)=>(Ps(),js(Ss,null,[Vs("div",uP,[Vs("div",dP,[Vs("div",_P,[Vs("div",pP,[Hs(Xw,{ref_key:"inactive_hosts_tab_list",ref:p,id:"inactive_hosts_tab_list",tab_list:h.value,onClick_item:k},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==_.value?(Ps(),js("div",fP,[1==_.value?(Ps(),js(Ss,{key:0},En(m,(e=>Vs("div",vP,[Vs("h3",mP,te(e.title),1),Hs(N_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Ps(),Ls(iv,{key:1,ref_key:"table_inactive_hosts",ref:s,table_id:a.value,csrf:e.csrf,f_map_columns:P,get_extra_params_obj:$,onCustom_event:S},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(l.value,((e,t)=>{return Ps(),Ls(Rd,{f_on_open:(a=e,l=t,e=>{b(a,l)}),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,hP)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(a=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),g(),s.value.refresh_table(),1==_.value&&m.forEach((e=>{e.ref.value[0].update_chart()})),b(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Ps(),js(Ss,{key:0},[Ks(te(a.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,gP)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",bP,[Vs("button",{type:"button",ref:"delete_all",onClick:N,class:"btn btn-danger me-1"},[yP,Ks(" "+te(t("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:A,class:"btn btn-danger me-1"},[wP,Ks(" "+te(t("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:E,class:"btn btn-primary me-1"},[...xP],512)])])])])]),Hs(nP,{ref_key:"modal_delete",ref:i,context:v.value,onDelete_host:w},null,8,["context"]),Hs(iP,{ref_key:"modal_delete_older",ref:r,context:v.value,onDelete_host:w},null,8,["context"]),Hs(cP,{ref_key:"modal_download",ref:o,context:v.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const SP={class:"row"},CP={class:"col-md-12 col-lg-12"},NP={class:"mt-4 card card-shadow"},AP={class:"card-body"};var EP={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=va("inactive_host_details"),a=va([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Ps(),js("div",SP,[Vs("div",CP,[Vs("div",NP,[Vs("div",AP,[Hs(Tw,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const TP={class:"table table-bordered table-striped"};var PP={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e=>i18n(e),a=va(null),l=va(""),n=va(!0),s=e,o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${s.flowdev_ip}&ifid=${s.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});a.value.value=e||s.flowdev_ip,l.value=a.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:s.csrf,flowdev_ip:s.flowdev_ip,alias:a.value.value,ifid:s.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),n.value=!0},u=function(){l.value==a.value.value?n.value=!0:n.value=!1};return(e,l)=>(Ps(),js(Ss,null,[Vs("table",TP,[Vs("tr",null,[Vs("th",null,te(t("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:a,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[n.value?"disabled":""]]),onClick:c,id:"save"},te(t("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const IP={class:"table table-striped table-bordered col-sm-12"},UP={class:"col-3"},OP={class:"col-9"},MP={class:"d-flex ps-0"},jP={class:"col-3"},LP={class:"col-9"},FP={class:"d-flex ps-0"},RP={class:"d-flex align-items-center me-2"},DP={class:"col-3"},zP={class:"col-9"},qP={class:"d-flex ps-0"},BP={class:"d-flex align-items-center me-2"},VP=1e9;var HP={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e=>i18n(e),a=va(null),l=va(""),n=va(null),s=va(""),o=va(null),i=va(""),r=va(!0),c=e,u=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${c.device_ip}&port_index=${c.port_index}&ifid=${c.ifid}`,d=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function _(){const e=await ntopng_utility.http_request(`${u}`,{method:"get"});a.value.value=e.alias,l.value=a.value.value,n.value.value=e.uplink_speed/VP,s.value=n.value.value,o.value.value=e.downlink_speed/VP,i.value=o.value.value}_n((async()=>{_()}));const p=async function(){const e={ifid:c.ifid,csrf:c.csrf,device_ip:c.device_ip,port_index:c.port_index,alias:a.value.value,uplink_speed:Number(n.value.value)*VP,downlink_speed:Number(o.value.value)*VP};await ntopng_utility.http_request(d,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),_(),r.value=!0},f=function(){l.value==a.value.value&&s.value==n.value.value&&i.value==o.value.value?r.value=!0:r.value=!1};return(e,l)=>(Ps(),js(Ss,null,[Vs("table",IP,[Vs("tbody",null,[Vs("tr",null,[Vs("th",UP,te(t("interface_alias")),1),Vs("td",OP,[Vs("div",MP,[Vs("input",{type:"text",ref_key:"custom_name",ref:a,class:"form-control",style:{width:"16rem"},onInput:f},null,544)])])]),Vs("tr",null,[Vs("th",jP,te(t("interface_uplink_speed")),1),Vs("td",LP,[Vs("div",FP,[Vs("label",RP,te(t("gbit")),1),Vs("input",{ref_key:"uplink_speed",ref:n,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:f},null,544)])])]),Vs("tr",null,[Vs("th",DP,te(t("interface_downlink_speed")),1),Vs("td",zP,[Vs("div",qP,[Vs("label",BP,te(t("gbit")),1),Vs("input",{ref_key:"downlink_speed",ref:o,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:f},null,544)])])])])]),Vs("button",{class:K(["btn btn-primary d-flex ms-auto",[r.value?"disabled":""]]),onClick:p,id:"save"},te(t("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},GP={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=va(""),o=va(""),i=va(""),r=va(!0),c=[i18n("note_scan_host")],u=()=>{"delete_all"==i.value?n("delete_all"):"delete_single_row"==i.value||"delete_single_report"==i.value?n("delete"):"scan_all_rows"==i.value?n("scan_all_rows"):"scan_row"==i.value&&n("scan_row"),d()},d=()=>{l.value.close()};t({show:(e,t)=>{r.value=!1,i.value=e,"delete_all"==e?(o.value=i18n("delete_all_entries"),s.value=t):"delete_single_row"==e?(o.value=i18n("delete_vs_host_title"),s.value=t):"scan_all_rows"==e?(o.value=i18n("scan_all_hosts_title"),s.value=t):"scan_row"==e?(r.value=!0,o.value=i18n("scan_host_title"),s.value=t):"delete_single_report"==e&&(o.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(o.value),1)])),body:ml((()=>[Ks(te(s.value)+" ",1),r.value?(Ps(),Ls(pv,{key:0,note_list:c})):Ys("v-if",!0)])),footer:ml((()=>["delete_all"==i.value||"delete_single_row"==i.value||"delete_single_report"==i.value?(Ps(),js("button",{key:0,type:"button",onClick:u,class:"btn btn-danger"},te(_("delete")),1)):(Ps(),js("button",{key:1,type:"button",onClick:u,class:"btn btn-primary"},te(_("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const WP={class:"form-group ms-2 me-2 mt-3 row"},KP={class:"col-form-label col-sm-4"},JP={class:"col-8"};var YP={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=va(null),n=a,s=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let o=va(s.value[0]);const i=()=>{n("update",{scan_frequency:o.value.id}),r()},r=()=>{l.value.close()};t({show:e=>{l.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",WP,[Vs("label",KP,[Vs("b",null,te(c("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",JP,[Hs(l_,{selected_option:ya(o),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(o)?o.value=e:o=e),options:s.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:i,class:"btn btn-secondary me-4"},te(c("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const ZP={class:"form-group ms-2 me-2 mt-3 row"},XP={class:"col-form-label col-sm-2"},QP={class:"col-sm-8"},eI=["disabled","placeholder"],tI={class:"col-sm-2"},aI={class:"form-group ms-2 me-2 mt-3 row"},lI={class:"col-form-label col-sm-2"},nI={class:"col-sm-10"},sI=["placeholder"],oI={class:"form-group ms-2 me-2 mt-3 row"},iI={class:"col-form-label col-sm-2"},rI={class:"col-10"},cI={key:0,class:"form-group ms-2 me-2 mt-3 row"},uI={class:"col-form-label col-sm-2"},dI={class:"col-10"},_I={key:1,class:"form-group ms-2 me-2 mt-3 row"},pI={class:"col-form-label col-sm-2"},fI={class:"col-10"},vI={class:"mt-4"},mI={key:0,class:"me-auto text-danger d-inline"},hI=["disabled"],gI=["disabled"],bI="32";var yI={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=l,o=va(i18n("hosts_stats.page_scan_hosts.add_host")),i=va(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),r=i18n("hosts_stats.page_scan_hosts.host_placeholder"),c=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],d=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],_=va(null),p=va({}),f=va([]),v=va(""),m=va(""),h=va(!1),g=va(!1),b=va([]),y=va([]),w=va(null),x=va(null),k=va(null),$=va(!1),S=va(null),C=va(!0),N=va(!0),A=va(!0),E=va(!1),T=va(!1),P=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),I=va([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),U=va(I.value[1]),O=va(P.value[0]),M=va(!1),j=va(!1),L=e=>{f.value=e,A.value=f.value.length>0},F=e=>{f.value=f.value.filter((t=>t.id!=e.id)),A.value=f.value.length>0},R=()=>{const e=yp.validateIPv4(x.value),t=yp.validateIPv6(x.value),a=yp.validateHostName(x.value);"ipv4_netscan"==p.value.id?(e&&(E.value=!0,A.value=f.value&&f.value.length>0),A.value=!0):e?(E.value=!0,x.value.endsWith(0)||(U.value=I.value.find((e=>e.id==bI)))):t?(U.value=I.value[2],E.value=!0,U.value=I.value.find((e=>"128"==e.id))):a?(E.value=!0,U.value=I.value.find((e=>e.id==bI))):E.value=!1},D=()=>{yp.validatePortRange(k.value)||yp.validateCommaSeparatedPortList(k.value)||JS.isEmptyOrNull(k.value)?C.value=!0:C.value=!1};const z=()=>{q(!0)},q=async e=>{const t=k.value,l=p.value.id,n=!0===e?"edit":"add",o=!0===e?m.value:null;let r=x.value,c=!0;h.value=!0,yp.validateIP(x.value)||(E.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(x.value),"no_success"===r&&(c=!1,i.value=x.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),M.value=!0,setTimeout((()=>{M.value=!1}),4e3)),E.value=!0);let u=[];f.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");h.value=c,c&&s(n,{host:r,scan_type:l,scan_ports:t,cidr:U.value.id,scan_frequency:S?O.value.id:null,scan_id:o,discovered_host_scan_type:d})};return t({show:(e,t)=>{x.value="",k.value="",C.value=!0,N.value=!0,E.value=!1,h.value=!1,$.value=!1,p.value=b.value[0],f.value=[],U.value=I.value[1],m.value=null,g.value=!1,M.value=!1,T.value=!1,A.value=!T.value,o.value=i18n("hosts_stats.page_scan_hosts.add_host"),JS.isEmptyOrNull(e)||(o.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(g.value=!0,x.value=e.host,k.value=e.ports,E.value=!0,C.value=!0,m.value=e.id,p.value=b.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=y.value.find((t=>t.id==e)),l.push(a)})),f.value=l}"ipv4_netscan"==p.value.id?U.value=I.value.find((e=>"24"==e.id)):yp.validateIPv4(e.host)?U.value=I.value.find((e=>e.id==bI)):U.value=I.value.find((e=>"128"==e.id)),N.value=!0,S&&(O.value=P.value.find((t=>t.id==e.scan_frequency)))})(e)),JS.isEmptyOrNull(t)||(x.value=t,E.value=!0),_.value.show()},close:()=>{j.value=!1,_.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));w.value=t,b.value=l,y.value=l.filter((e=>"ipv4_netscan"!=e.id)),S.value=a,p.value=b.value[0]}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:_},{title:ml((()=>[Ks(te(o.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",ZP,[Vs("label",XP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Vs("div",QP,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>x.value=e),onInput:R,disabled:g.value,class:"form-control",type:"text",placeholder:ya(r),required:""},null,40,eI),[[Mi,x.value]])]),Vs("div",tI,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[1]||(t[1]=e=>U.value=e),disabled:g.value||T.value,options:I.value},null,8,["selected_option","disabled","options"])])]),Vs("div",aI,[Vs("label",lI,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",nI,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>k.value=e),onFocusout:D,class:K(["form-control",!0===v.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(c),required:""},null,42,sI),[[Mi,k.value]])])]),Vs("div",oI,[Vs("label",iI,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",rI,[Hs(l_,{selected_option:p.value,"onUpdate:selected_option":t[3]||(t[3]=e=>p.value=e),options:b.value,disabled:g.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==p.value.id?(U.value=I.value.find((e=>"24"==e.id)),T.value=!0,A.value=!1):(T.value=!1,A.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==p.value.id?(Ps(),js("div",cI,[Vs("label",uI,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Vs("div",dI,[Hs(l_,{selected_options:f.value,"onUpdate:selected_options":t[5]||(t[5]=e=>f.value=e),onChange_selected_options:L,onUnselect_option:F,options:y.value,multiple:!0},null,8,["selected_options","options"])])])):Ys("v-if",!0),1==S.value?(Ps(),js("div",_I,[Vs("label",pI,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",fI,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[6]||(t[6]=e=>O.value=e),options:P.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",vI,[0==S.value?(Ps(),Ls(pv,{key:0,note_list:u})):(Ps(),Ls(pv,{key:1,note_list:d}))])])),footer:ml((()=>[M.value?(Ps(),js("div",mI,te(i.value),1)):Ys("v-if",!0),Vs("div",null,[Hs(rv,{show:h.value,size:"1rem",class:"me-2"},null,8,["show"]),0==g.value?(Ps(),js("button",{key:0,type:"button",onClick:q,class:"btn btn-primary",disabled:!(N.value&&E.value&&C.value&&A.value)},te(n("add")),9,hI)):(Ps(),js("button",{key:1,type:"button",onClick:z,class:"btn btn-primary",disabled:!(N.value&&E.value&&C.value&&A.value)},te(n("apply")),9,gI))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const wI=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",xI=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},kI=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},$I=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),SI=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),CI=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},NI=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},AI=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},EI=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${AI(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${AI(a)}'></i></span>`}return l},TI=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=EI(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},PI=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=EI(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},II=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),o=null;switch(s){case"unused":o=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":o=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return o},UI=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},OI=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=UI(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);"ipv4_netscan"==t.scan_type&&(e+="/24"),l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l},MI={class:"row"},jI={class:"col-md-12 col-lg-12"},LI={key:0,class:"alert alert-info alert-dismissable"},FI={class:"card card-shadow"},RI={class:"card-body"},DI={key:0,class:"alert alert-info alert-dismissable"},zI=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),qI={key:1,class:"alert alert-success alert-dismissable"},BI=Vs("span",{class:"text-success me-1"},null,-1),VI={key:2,class:"alert alert-danger alert-dismissable"},HI=Vs("span",{class:"text-danger me-1"},null,-1),GI={id:"hosts_to_scan"},WI=[Vs("i",{class:"fas fa-plus"},null,-1)],KI={class:"card-footer mt-3"},JI=Vs("i",{class:"fas fa-trash"},null,-1),YI=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),ZI={class:"card-footer"};var XI={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e=>i18n(e),a=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],l=va(i18n("scan_host_inserted")),n=va(i18n("scan_host_already_inserted")),s=va(""),o=va(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),i=i18n("hosts_stats.page_scan_hosts.delete_host_title"),r=i18n("hosts_stats.page_scan_hosts.delete_host_description"),c=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),u=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,d=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,_=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,p=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,f=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,v=`${http_prefix}/lua/vulnerability_scan.lua`,m=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,g=va("hosts_to_scan"),y=va(),w=va(),k=va(),$=va(),S=va(0),C=va(null),N=va({}),A=va({}),E=va(!1),T=va(!1),P=va(!1),I=va(!1),U=va(!1),O=e,M={csrf:O.context.csrf},j=va({csrf:O.context.csrf,ifid:O.context.ifid,is_enterprise_l:O.context.is_enterprise_l});let L=[],F=null;function R(){null!=O.context.host&&""!=O.context.host?k.value.show(null,O.context.host):k.value.show()}function D(e){null!=e?y.value.refresh_table(e):y.value.refresh_table(!0)}dn((()=>{F=Promise.all([oe(),ie()])})),_n((async()=>{await F,await k.value.metricsLoaded(L,O.context.ifid,O.context.is_enterprise_l),null!=O.context.host&&k.value.show(null,O.context.host),P.value=!O.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const z=()=>x.get_url_object();function q(e){let t={click_button_edit_host:J,click_button_delete:G,click_button_scan:W,click_button_download:ve,click_button_show_result:me};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return eC.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return eC.sortByIP(l,n,e.sort);if("host_name"==e.id)return eC.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return eC.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,eC.sortByName(l,n,e.sort)}return B(t,a)}function G(e){I.value=!1,U.value=!1,ne(),N.value=e.row,w.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){I.value=!1,U.value=!1,ne(),A.value=e.row;const t=`${i18n("scan_host")}`;w.value.show("scan_row",t)}function J(e){k.value.show(e.row)}function Y(){I.value=!1,U.value=!1,ne(),w.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===I.value&&(I.value=!1),!0===U.value&&(U.value=!1)}function Q(){ie()}function ee(){S.value=y.value.get_rows_num()}const ae=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>OI(e,t),scan_type:(e,a)=>kI(e,a,t),last_scan:(e,t)=>$I(e,t),duration:(e,t)=>SI(e,t),scan_frequency:e=>CI(e),is_ok_last_scan:e=>NI(e),max_score_cve:(e,t)=>xI(e,t),tcp_ports:(e,t)=>PI(e,t),udp_ports:(e,t)=>TI(e,t),num_vulnerabilities_found:(e,t)=>wI(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,L,0,O.context.ifid),le=async function(e){const t=NtopUtils.buildURL(u,{...e}),a=await b.http_post_request(t,M);if(k.value.close(),!0===a.rsp)null!=e.cidr?l.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):l.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),I.value=!0,U.value=!1,setTimeout(X,1e4),D(!1);else{null!=e.cidr?n.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),n.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),U.value=!0,I.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&D(!1)},ne=function(e){null!=e&&0!=e&&(s.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(d,{...e});await b.http_post_request(t,M),I.value=!1,U.value=!1,ne(),D(!1)},oe=async function(){const e=NtopUtils.buildURL(f,{...M}),t=await b.http_request(e);L=t.rsp},ie=async function(){const e=NtopUtils.buildURL(h,{...M}),t=await b.http_request(e);I.value=!1,U.value=!1,ne(t.rsp.total_in_progress),null==C.value&&(C.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&C.value>0;C.value=t.rsp.total_in_progress,E.value=C.value>0&&!1===T.value,!0===E.value?setTimeout((function(){D(!0)}),2e3):a&&setTimeout((function(){D(!0)}),5e3)},re=function(){w.value.show("scan_all_rows",i18n("scan_all_hosts")),D(!1)},ce=function(){$.value.show()},ue=async function(){const e=A.value;await de(e.host,e.scan_type,e.ports,e.id),D(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(p,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,M)};async function _e(){const e=NtopUtils.buildURL(p,{scan_single_host:!1});await b.http_post_request(e,M),D(!1)}const pe=async function(){const e=N.value,t=NtopUtils.buildURL(_,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,M),D(!1)},fe=async function(){const e=NtopUtils.buildURL(_,{delete_all_scan_hosts:!0});await b.http_post_request(e,M),D(!1)};function ve(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${m}?${a}`;b.download_URI(l)}function me(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${v}?${n}`;x.go_to_url(s)}function he(e){T.value=e}return(e,u)=>(Ps(),js(Ss,null,[Vs("div",MI,[Vs("div",jI,[P.value?(Ps(),js("div",LI,[Vs("span",null,te(o.value),1)])):Ys("v-if",!0),Vs("div",FI,[Vs("div",RI,[E.value?(Ps(),js("div",DI,[zI,Vs("span",null,te(s.value),1)])):Ys("v-if",!0),I.value?(Ps(),js("div",qI,[BI,Vs("span",null,te(l.value),1)])):Ys("v-if",!0),U.value?(Ps(),js("div",VI,[HI,Vs("span",null,te(n.value),1)])):Ys("v-if",!0),Vs("div",GI,[Hs(GP,{ref_key:"modal_delete_confirm",ref:w,title:ya(i),body:ya(r),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Hs(YP,{ref_key:"modal_update_perioditicy_scan",ref:$,title:ya(c),onUpdate:se},null,8,["title"]),Hs(iv,{ref_key:"table_hosts_to_scan",ref:y,table_id:g.value,csrf:j.value.csrf,f_map_columns:ae,get_extra_params_obj:z,f_sort_rows:H,onCustom_event:q,onRows_loaded:ee},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:R},[...WI],512)])),_:1},8,["table_id","csrf"])])]),Vs("div",KI,[Vs("button",{type:"button",ref:"delete_all",onClick:Y,class:K(["btn btn-danger me-1",{disabled:0==S.value}])},[JI,Ks(" "+te(t("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:re,class:K(["btn btn-primary me-1",{disabled:0==S.value}])},[YI,Ks(" "+te(t("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),O.context.is_enterprise_l?(Ps(),js("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:K(["btn btn-secondary me-1",{disabled:0==S.value}])},te(t("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Ys("v-if",!0)]),Vs("div",ZI,[Hs(pv,{note_list:a})])])])]),Hs(yI,{ref_key:"modal_add",ref:k,context:j.value,onAdd:le,onEdit:Z,onCloseModal:u[0]||(u[0]=e=>he(!1)),onOpenModal:u[1]||(u[1]=e=>he(!0)),onHidden:u[2]||(u[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const QI={class:"row"},eU={class:"col-md-12 col-lg-12"},tU={class:"card card-shadow"},aU=["innerHTML"],lU=["innerHTML"];var nU={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;va(null);const a=va(!1),l=e,n=va(""),s=va(""),o=va(""),i=va("");return va([]),dn((async()=>{await async function(e,r,c,u){a.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${t}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const v="true"===l.context.is_in_mem||1==l.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;i.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),null!=c&&(c=c.replaceAll("_"," ")),i.value=i.value.replace("%{date}",c),o.value=i.value,a.value=!1}(l.context.host,l.context.scan_type,l.context.date,l.context.epoch)})),(e,t)=>(Ps(),js("div",QI,[Vs("div",eU,[Vs("div",tU,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:o.value},null,8,aU),a.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{class:K(["card-body",[a.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,lU)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const sU={class:"row"},oU={class:"col-md-12 col-lg-12"},iU={class:"card card-shadow"},rU={class:"card-body"},cU={id:"open_ports"};var uU={__name:"page-open-ports",props:{context:Object},setup(e){const t=`${http_prefix}/lua/vulnerability_scan.lua`,a=va("open_ports"),l=e=>e,n=va(),s=e;s.context.csrf;const o=va({csrf:s.context.csrf,ifid:s.context.ifid,is_enterprise_l:s.context.is_enterprise_l}),i=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let a={hosts:(e,a)=>{let l="";const n=e.split(", "),s=n.length;let o=0;for(;o<5&&o<s;){const e=n[o].split("|"),a=e[0],s=e[1],i=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:a,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:i},_=x.obj_to_url_params(d),p=`${t}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:a;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,o++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=a[e.data_field]})),e};async function f(e){let a={port:e.row.port_number},l=x.obj_to_url_params(a),n=`${t}?${l}`;x.go_to_url(n)}return(e,t)=>(Ps(),js("div",sU,[Vs("div",oU,[Vs("div",iU,[Vs("div",rU,[Vs("div",cU,[Hs(iv,{ref_key:"table_open_ports",ref:n,table_id:a.value,csrf:o.value.csrf,f_map_columns:p,get_extra_params_obj:i,f_sort_rows:u,f_map_config:l,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const dU={class:"form-group ms-2 me-2 mt-3 row"},_U={class:"col-form-label col-sm-2"},pU={class:"col-sm-10"},fU={class:"form-group ms-2 me-2 mt-3 row"},vU={class:"col-form-label col-sm-2"},mU={class:"col-sm-10"},hU={class:"mt-4"},gU=["disabled"];var bU={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=a,s=va(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),o=va(null),i=va(null),r=va(null),c=va(null),u=va(!1),d=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],_=()=>{const e=c.value.epoch,t=r.value.replaceAll(" ","_");n("edit",{report_title:t,epoch_end:e}),o.value.close()},p=()=>{const e=r.value.split(" ").every((e=>yp.validateSingleWord(e)));u.value=e};return t({show:e=>{i.value="",r.value="",c.value=null,(e=>{c.value=e,i.value=e.report_date,r.value=e.name})(e),o.value.show()},close:()=>{o.value.close()}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",dU,[Vs("label",_U,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",pU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[Mi,i.value]])])]),Vs("div",fU,[Vs("label",vU,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",mU,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>r.value=e),class:"form-control",type:"text",onInput:p,required:""},null,544),[[Mi,r.value]])])]),Vs("div",hU,[Hs(pv,{note_list:d})])])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:_,disabled:!u.value,class:"btn btn-primary"},te(l("apply")),9,gU)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const yU={class:"row"},wU={class:"col-md-12 col-lg-12"},xU={class:"card card-shadow"},kU={class:"card-body"},$U={id:"vs_reports"};var SU={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const a=t("hosts_stats.page_scan_hosts.report_page.delete_title"),l=t("hosts_stats.page_scan_hosts.report_page.delete_description"),n=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,s=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,o=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,i=va("vs_reports"),r=va(),c=va(),u=va(),d=va(0),_=va({}),p=e,f={csrf:p.context.csrf},v=va({csrf:p.context.csrf,ifid:p.context.ifid});function m(){r.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return eC.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?eC.sortByNumber(l,n,e.sort):"name"==e.id?eC.sortByName(l,n,e.sort):"num_hosts"==e.id?eC.sortByNumber(l,n,e.sort):eC.sortByName(l,n,e.sort)}return w(t,a)}function $(e){_.value=e.row,u.value.show("delete_single_report")}function S(e){c.value.show(e.row)}async function C(e){await N(e)}const N=async function(e){const t=NtopUtils.buildURL(o,{...e});await b.http_post_request(t,f),m()};function A(){d.value=r.value.get_rows_num()}const E=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(n,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=_.value,t=NtopUtils.buildURL(s,{epoch:e.epoch});await b.http_post_request(t,f),m()};return(e,t)=>(Ps(),js(Ss,null,[Vs("div",yU,[Vs("div",wU,[Vs("div",xU,[Vs("div",kU,[Vs("div",$U,[Hs(GP,{ref_key:"modal_delete_confirm",ref:u,title:ya(a),body:ya(l),onDelete:T},null,8,["title","body"]),Hs(iv,{ref_key:"table_vs_reports",ref:r,table_id:i.value,csrf:v.value.csrf,f_map_columns:E,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:A},null,8,["table_id","csrf"])])])])])]),Hs(bU,{ref_key:"modal_edit",ref:c,context:v.value,onEdit:C},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const CU={class:"card h-100 overflow-hidden"},NU={class:"m-2 mt-0",style:{"margin-bottom":""}},AU={class:"m-2 mb-3"},EU={class:"card-footer"},TU="Congestion";var PU={__name:"page-snmp-usage",props:{context:Object},setup(e){const t=e,a=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],l=va(null),n=va(null),s=va("snmp_usage"),o=va("snmp_usage_chart"),i=t.context.csrf,r=va(null),c=va(ntopChartApex.typeChart.TS_LINE),u=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/usage_chart.lua`;let d="date_time_picker";const _=[i18n("snmp.chart_congestion_rate_note"),i18n("snmp.chart_congestion_link"),i18n("snmp.chart_congestion_configuration"),i18n("snmp.chart_congestion_rate_color")],p=e=>{const a=v.getFormatter("percentage");let l={ip:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${e}`}>${e}</a>`,interface:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}`}>${e}</a>`,type:(e,t)=>"uplink"==e?`${i18n("uplink_usage")} <i class="fa-solid fa-circle-arrow-up" style="color: #C6D9FD"></i>`:`${i18n("downlink_usage")} <i class="fa-solid fa-circle-arrow-down" style="color: #90EE90"></i>`,speed:(e,t)=>v.getFormatter("speed")(e),min:(e,t)=>a(e),max:(e,t)=>a(e),average:(e,t)=>a(e),last_value:(e,t)=>a(e),congestion_rate:(e,t)=>a(e)};return e.forEach((e=>{if(e.render_func=l[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function f(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return eC.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return eC.sortByName(l,n,e.sort);if("ip"==e.id)return eC.sortByIP(l,n,e.sort);if("interface"==e.id)return eC.sortByName(l,n,e.sort);if("type"==e.id)return eC.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return eC.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return eC.sortByName(t.device,a.device,e?e.sort:null)}async function m(){if(l.value&&l.value.refresh_table(!1),r.value){const e=await w();r.value.update_chart_series(e?.data)}}const h=()=>ntopng_url_manager.get_url_object();function g(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function b(e){const t=e.row;window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=config`)}function y(e){let t={click_button_timeseries:g,click_button_configuration:b};null!=t[e.event_id]&&t[e.event_id](e)}async function w(){let e=null;const t={csrf:i,ifid:-1,epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),host:ntopng_url_manager.get_url_entry("host")};e=await ntopng_utility.http_post_request(u,t);const a=Py.formatSimpleSerie(e,TU,"bar",["percentage"],[0,100]);return a.title='<div style="font-size:18px;">'+i18n("snmp.top_congested_devices")+"</div>",a.titleHeight=48,a.axes.y.axisLabelWidth=40,a.xAxisHeight=6,a.axes.x.axisLabelWidth=120,a.axes.x.pixelsPerLabel=20,a.xRangePad=50,localStorage.setItem(`${TU}_x_axis_label`,JSON.stringify(e.labels)),localStorage.setItem(`${TU}_metadata`,JSON.stringify(e.metadata)),a.axes.x.axisLabelFormatter=function(e,t,a,l){return""},a.axes.x.valueFormatter=function(e,t,a,l){if(null!=e){const t=Number(e.toFixed(4)),a=localStorage.getItem(`${TU}_x_axis_label`),l=JSON.parse(a)[t-1];return l?`<span style="white-space: pre-wrap">${l}</span>`:""}},a.clickCallback=function(e,t,a){const l=Number(t.toFixed(4)),n=localStorage.getItem(`${TU}_metadata`),s=JSON.parse(n)[l-1];s&&g({row:s})},a}return _n((async()=>{await Promise.all([ntopng_sync.on_ready(d)])})),(e,t)=>(Ps(),js("div",CU,[Hs(E_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(d),enable_refresh:!1,ref_key:"date_time_picker",ref:n,onEpoch_change:m,custom_time_interval_list:a},null,8,["id"]),Vs("div",NU,[Hs(Ag,{ref_key:"chart",ref:r,id:o.value,chart_type:c.value,base_url_request:u,get_custom_chart_options:w,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"])]),Vs("div",AU,[Hs(iv,{ref_key:"table_snmp_usage",ref:l,table_id:s.value,csrf:ya(i),f_map_columns:p,get_extra_params_obj:h,f_sort_rows:f,onCustom_event:y},null,8,["table_id","csrf"])]),Vs("div",EU,[Hs(pv,{note_list:_})])]))}};lp("\n.dygraph-axis-label.dygraph-axis-label-x[data-v-da0f3f1a] {\n    font-size: 12px;\n    transform: rotate(-90deg) translate(-20px, 0);\n}\n"),PU.__scopeId="data-v-da0f3f1a",PU.__file="http_src/vue/page-snmp-usage.vue";const IU={style:{"min-height":"8.5rem"}},UU={class:"form-group ms-2 me-2 mt-3 row"},OU={class:"col-form-label col-sm-4"},MU={class:"col-sm-6"},jU=["pattern"],LU=["disabled"];var FU={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=va(null),n=va("");va("date");const s=e,o=a;let i=NtopUtils.REGEXES.singleword;const r=xo((()=>!new RegExp(i).test(n.value)));const c=async()=>{s.store_file(n.value),o("file_stored",n.value),u()},u=()=>{l.value.close()};t({show:()=>{!async function(){n.value=s.get_suggested_file_name()}(),l.value.show()},close:u}),_n((()=>{i=s.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const d=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",IU,[Vs("div",UU,[Vs("label",OU,[Vs("b",null,te(d("name"))+":",1)]),Vs("div",MU,[wn(Vs("input",{pattern:ya(i),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,8,jU),[[Mi,n.value]])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,disabled:r.value,class:"btn btn-primary"},te(d("save")),9,LU)])),_:1},512))}};lp("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),FU.__scopeId="data-v-87fda19e",FU.__file="http_src/vue/modal-file-save.vue";const RU={class:"form-group ms-2 me-2 mt-3 row"},DU={class:"col-form-label col-sm-4"},zU={class:"col-sm-8"},qU={value:"name"},BU={value:"date"},VU={class:"form-group ms-2 me-2 mt-3 row"},HU={class:"col-form-label col-sm-4"},GU={class:"col-sm-8"},WU=["disabled"],KU=["disabled"];var JU={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=va(null),n=va({}),s=va(""),o=va([]),i=va("date"),r=e,c=a;NtopUtils.REGEXES.singleword;const u=xo((()=>""==n.value));function d(){o.value=o.value.sort(((e,t)=>"name"==i.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),o.value.length>0&&(n.value=o.value[0])}const _=()=>{f(),r.open_file(n.value.name)},p=async e=>{let t=n.value.name;1==e&&(t="*"),r.delete_file(t)&&c("file_deleted",t),f()},f=()=>{l.value.close()};t({show:()=>{!async function(){s.value="",o.value=await r.list_files(),o.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),d(),o.value.length>0&&(n.value=o.value[0])}(),l.value.show()},close:f}),_n((()=>{}));const v=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",RU,[Vs("label",DU,[Vs("b",null,te(v("order_by")),1)]),Vs("div",zU,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>d()),"onUpdate:modelValue":a[1]||(a[1]=e=>i.value=e)},[Vs("option",qU,te(v("name")),1),Vs("option",BU,te(v("date")),1)],544),[[Ri,i.value]])])]),Vs("div",VU,[Vs("label",HU,[Vs("b",null,te(e.file_title),1)]),Vs("div",GU,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[2]||(a[2]=e=>n.value=e),options:o.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>p(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(v("delete_all_entries")),1),Vs("button",{type:"button",onClick:p,disabled:u.value,class:"btn btn-danger"},te(v("delete")),9,WU),Vs("button",{type:"button",onClick:_,disabled:u.value,class:"btn btn-primary"},te(v("open")),9,KU)])),_:1},512))}};lp("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),JU.__scopeId="data-v-1976657e",JU.__file="http_src/vue/modal-file-open.vue";const YU=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),ZU={class:"form-group ms-2 me-2 mt-3 row"},XU={class:"col-form-label col-sm-4"},QU={class:"col-sm-8"},eO=YU((()=>Vs("span",null," ",-1))),tO=["disabled"];var aO={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(""),s=va(""),o=va(null),i=e,r=a;function c(){o.value.click()}function u(e){const t=e.target.files;s.value=t[0].name;const a=new FileReader;a.addEventListener("load",(()=>{n.value=a.result})),a.readAsText(t[0]),r("file_uploaded",s.value)}const d=()=>{_(),i.upload_file(n.value)},_=()=>{l.value.close()};t({show:()=>{!async function(){s.value="",n.value=""}(),l.value.show()},close:_}),_n((()=>{}));const p=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",ZU,[Vs("label",XU,[Vs("b",null,te(e.file_title),1)]),Vs("div",QU,[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(p("upload")),1),eO,wn(Vs("small",null,"No file selected",512),[[Yi,!n.value]]),wn(Vs("small",null,te(s.value),513),[[Yi,s.value]]),Vs("input",{ref_key:"file_input",ref:o,type:"file",accept:"application/JSON",onChange:u,style:{display:"none"}},null,544)])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,disabled:!n.value,class:"btn btn-primary"},te(p("open")),9,tO)])),_:1},512))}};lp("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),aO.__scopeId="data-v-9db8ba96",aO.__file="http_src/vue/modal-file-upload.vue";const lO={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},nO=["onClick"],sO={class:"card-body"},oO={class:"form-group wizard-form-group"},iO={class:"form-text text-muted"};var rO={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=va(null),n=va({}),s=va([]);va("date");const o=e;function i(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{l.value.close()};t({show:()=>{!async function(){s.value=await o.list_components(),s.value.length>0&&(n.value=s.value[0])}(),l.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",lO,[(Ps(!0),js(Ss,null,En(s.value,(e=>(Ps(),js("div",{class:K(["card w-100 wizard-card",{"wizard-selected":n.value==e}])},[Vs("a",{class:"wizard-link",href:"#",onClick:t=>{n.value=e,r(),o.add_component(n.value)}},[Vs("div",sO,[Vs("div",oO,[Vs("h5",null,[Vs("i",{class:K(i(e.component))},null,2),Ks(" "+te(c(e.i18n_name)),1)]),Vs("small",iO,te(c(e.i18n_descr)),1)])])],8,nO)],2)))),256))])])),footer:ml((()=>[])),_:1},512))}};lp("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),rO.__scopeId="data-v-16713f39",rO.__file="http_src/vue/modal-select-component.vue";const cO={class:"form-group ms-2 me-2 mt-3 row"},uO={class:"col-sm-2 mt-2"},dO={class:"col-sm-10"},_O={class:"form-group ms-2 me-2 mt-4 row"},pO={class:"col-sm-2 mt-3"},fO={class:"col-sm-6 mt-2"},vO={class:"range"},mO={class:"sliderticks"},hO={class:"form-group ms-2 me-2 mt-3 row"},gO={class:"col-sm-2 mt-2"},bO={class:"col-sm-9 mt-2"},yO={class:"range"},wO={class:"sliderticks"},xO={key:0,class:"form-group ms-2 me-2 mt-3 row"},kO={class:"col-sm-2 mt-2"},$O={class:"col-sm-5"},SO={class:"form-group ms-2 me-2 mt-3 row"},CO={class:"col-sm-2 mt-2"},NO={class:"col-sm-5"},AO={class:"ms-2 mb-3 mt-4 row"},EO={class:"col-form-label col-sm-3 pe-0",id:"advanced-view"},TO={class:"col-sm-2 ps-0"},PO={class:"form-check form-switch mt-2",id:"advanced-view"},IO={key:1,class:"form-group ms-2 me-2 mt-3 row"},UO={class:"col-sm-12"},OO={key:0,style:{color:"rgba(255, 0, 0, 0.797)"}},MO=["disabled"];var jO={__name:"modal-edit-component",props:{csrf:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=a,s=va(i18n("dashboard.edit_component")),o=va(null),i=[{id:1,size_component_value:4},{id:2,size_component_value:6},{id:3,size_component_value:12},{id:4,size_component_value:-1}],r=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"5_min",label:l("dashboard.time_window_list.5_min")},{value:"30_min",label:l("dashboard.time_window_list.30_min")},{value:"hour",label:l("dashboard.time_window_list.hour")},{value:"2_hours",label:l("dashboard.time_window_list.2_hours")},{value:"12_hours",label:l("dashboard.time_window_list.12_hours")},{value:"day",label:l("dashboard.time_window_list.day")},{value:"week",label:l("dashboard.time_window_list.week")},{value:"month",label:l("dashboard.time_window_list.month")},{value:"year",label:l("dashboard.time_window_list.year")}]),c=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"hour",label:l("dashboard.time_offset_list.hour")},{value:"day",label:l("dashboard.time_offset_list.day")},{value:"week",label:l("dashboard.time_offset_list.week")},{value:"month",label:l("dashboard.time_offset_list.month")},{value:"year",label:l("dashboard.time_offset_list.year")}]),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va(null),h=va(!1),g=va(!1),b=va(!1),y=function(){h.value=!h.value},w=function(){g.value=!1;try{f.value=JSON.stringify(JSON.parse(f.value),null,2)}catch(e){g.value=!0}return f.value},x=function(e,t){return JS.isEmptyOrNull(e)?t.find((e=>e.default)):t.find((t=>t.value==e))},k=function(e){u.value=null,g.value=!1,b.value=e,d.value="",p.value=1,_.value=1},$=e=>{u.value=e,d.value=e.custom_name,_.value=C(e.width),p.value=C(e.height),v.value=x(e.time_window,r.value),m.value=x(e.time_offset,c.value),f.value=JSON.stringify(e.params,null,2)},S=e=>i.find((t=>t.id==Number(e))).size_component_value,C=e=>i.find((t=>t.size_component_value==Number(e))).id,N=()=>{const e=S(_.value),t=S(p.value),a=`${f.value}`;n("edit",{id:u.value.id,title:d.value,height:t,width:e,time_offset:m.value.value,time_window:v.value.value,rest_params:a}),o.value.close()};return t({show:(e,t)=>{k(t),$(e),o.value.show()}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ys(" Title "),Vs("div",cO,[Vs("label",uO,[Vs("b",null,te(l("dashboard.component_title")),1)]),Vs("div",dO,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>d.value=e),class:"form-control",type:"text",required:""},null,512),[[Mi,d.value]])])]),Ys(" Width "),Vs("div",_O,[Vs("label",pO,[Vs("b",null,te(l("dashboard.component_width")),1)]),Vs("div",fO,[Vs("div",vO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),style:{width:"100%"},min:"1",max:"3",step:"1"},null,512),[[Mi,_.value]]),Vs("div",mO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1)])])])]),Ys(" Height "),Vs("div",hO,[Vs("label",gO,[Vs("b",null,te(l("dashboard.component_height")),1)]),Vs("div",bO,[Vs("div",yO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[2]||(t[2]=e=>p.value=e),style:{width:"100%"},min:"1",max:"4",step:"1"},null,512),[[Mi,p.value]]),Vs("div",wO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1),Vs("p",null,te(l("dashboard.component_sizes.auto")),1)])])])]),Ys(" Time Window "),b.value?Ys("v-if",!0):(Ps(),js("div",xO,[Vs("label",kO,[Vs("b",null,te(l("dashboard.time_window")),1)]),Vs("div",$O,[Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[3]||(t[3]=e=>v.value=e),options:r.value},null,8,["selected_option","options"])])])),Ys(" Time Offset "),Vs("div",SO,[Vs("label",CO,[Vs("b",null,te(l("dashboard.time_offset")),1)]),Vs("div",NO,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[4]||(t[4]=e=>m.value=e),options:c.value},null,8,["selected_option","options"])])]),Ys(" Advanced Settings "),Vs("div",AO,[Vs("label",EO,[Vs("b",null,te(l("dashboard.advanced_settings")),1)]),Vs("div",TO,[Vs("div",PO,[Vs("input",{name:"show_advanced_settings",class:"form-check-input",type:"checkbox",onInput:y,role:"switch"},null,32)])])]),Ys(" REST Params "),h.value?(Ps(),js("div",IO,[Vs("div",UO,[g.value?(Ps(),js("p",OO,te(l("dashboard.component_json_error")),1)):Ys("v-if",!0),wn(Vs("textarea",{class:"highlighted-json","onUpdate:modelValue":t[5]||(t[5]=e=>f.value=e),onFocusout:w,style:{width:"100%",height:"100%"},rows:"16",cols:"10"},null,544),[[Mi,f.value]])])])):Ys("v-if",!0)])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:N,disabled:g.value,class:"btn btn-primary"},te(l("apply")),9,MO)])])),_:1},512))},__file:"http_src/vue/modal-edit-component.vue"};const LO={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var FO={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=xo((()=>`col-${t.width||4}`)),l=xo((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Ps(),js("div",{class:K([a.value,"widget-box-main-dashboard"])},[Vs("div",{class:K([l.value,"widget-box"]),style:{position:"relative"}},[Ys(" title "),Pn(e.$slots,"box_title"),Ys(" content "),Pn(e.$slots,"box_content"),Ys(" footer "),Vs("div",LO,[Pn(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},RO={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Ps(),js("div"))},__file:"http_src/vue/dashboard-empty.vue"};const DO={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var zO={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=va("simple_table"),l=va([]),n=e,s=xo((()=>{let e=n.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));Ml((()=>[n.epoch_begin,n.epoch_end,n.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(v.types[e.data_type]){return v.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,t){return"host"==e.id?OI(t[e.id],t,n.ifid):"last_scan"==e.id?$I(t[e.id],t):"duration"==e.id?SI(t[e.id],t):"scan_frequency"==e.id?CI(t[e.id]):"is_ok_last_scan"==e.id?NI(t[e.id]):"tcp_ports"==e.id?PI(t[e.id],t):"udp_ports"==e.id?TI(t[e.id],t):"scan_type"==e.id?kI(t[e.id],!0,t):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=UI(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(t[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const o=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${o}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(t[e.id],t):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(t[e.id],t):"max_score_cve"==e.id?xI(t[e.id],t):"num_vulnerabilities_found"==e.id?wI(t[e.id],t):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=II(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=II(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(t.tcp_ports_list,t.udp_ports_list,t):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(t[e.id]):t[e.id]}},r=function(e,t){if(n.params&&n.params.table_type&&i[n.params.table_type]){return(0,i[n.params.table_type])(e,t)}return t[e.id]?t[e.id]:""};async function c(){const e={ifid:n.ifid,epoch_begin:n.epoch_begin,epoch_end:n.epoch_end,...n.params.url_params,...n.filters},t=ntopng_url_manager.obj_to_url_params(e);let a=await n.get_component_data(`${http_prefix}${n.params.url}`,t),s=[];if(s="db_search"==n.params.table_type?a.records:a,"vs_scan_result"!=n.params.table_type){const e=n.max_height?n.max_height/4*6:6;s=s.slice(0,e)}l.value=s}return(e,a)=>(Ps(),js("div",DO,[Hs(Tw,{id:t.value,columns:s.value,rows:l.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};lp("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),zO.__file="http_src/vue/dashboard-table.vue";const qO={class:"d-flex align-items-center justify-content-between"},BO=["href"],VO={class:"fw-normal text-white"},HO={class:"subtitle text-white text-sm text mb-0 h5"},GO={class:"flex-shrink-0 ms-3"};var WO={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=va(""),a=va(""),l=va(""),n=va("#"),s=e;async function o(){if(s.params.url){const e={ifid:s.ifid,epoch_begin:s.epoch_begin,epoch_end:s.epoch_end,...s.params.url_params,...s.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await s.get_component_data(`${http_prefix}${s.params.url}`,a),o=l[s.params.counter_path],i=l[s.params.counter_formatter];i||(i="number");let r=v.getFormatter(i);if(t.value=r(o),o&&s.set_component_attr("active",!0),s.params.link){const e={ifid:s.ifid,epoch_begin:s.epoch_begin,epoch_end:s.epoch_end,...s.params.link.url_params},t=ntopng_url_manager.obj_to_url_params(e);n.value=`${http_prefix}${s.params.link.url}?${t}`}}}return Ml((()=>[s.epoch_begin,s.epoch_end,s.filters]),((e,t)=>{o()}),{flush:"pre",deep:!0}),dn((()=>{!function(){s.params.i18n_name&&(a.value=(e=>i18n(e))(s.params.i18n_name));s.params.icon&&(l.value=s.params.icon+" fa-2xl");o()}()})),_n((()=>{})),(e,s)=>(Ps(),js("div",qO,[Vs("div",null,[Vs("a",{href:n.value},[Vs("h4",VO,te(t.value),1),Vs("p",HO,te(a.value),1)],8,BO)]),Vs("div",GO,[Vs("i",{class:K(["text-white",l.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},KO={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=va(ntopChartApex.typeChart.DONUT),a=va(null),l=e,n=xo((()=>`${http_prefix}${l.params.url}`));function s(){const e=n.value,t=(()=>{const e={ifid:l.ifid,epoch_begin:l.epoch_begin,epoch_end:l.epoch_end,new_charts:!0,...l.params.url_params,...l.filters};let t=ntopng_url_manager.obj_to_url_params(e);return t=t.replaceAll("%24IFID%24",l.ifid),t})();return l.get_component_data(e,t)}return Ml((()=>[l.epoch_begin,l.epoch_end,l.filters]),((e,t)=>{!async function(){a.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(l,o)=>(Ps(),js("div",null,[Hs(N_,{ref_key:"chart",ref:a,id:e.id,chart_type:t.value,base_url_request:n.value,get_custom_chart_options:s,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"};var JO={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=va(ntopChartApex.typeChart.TS_LINE),a=va(null),l=va([]),n=Py.getGroupOptionMode("1_chart_x_yaxis"),s=va(null),o=va([]),i=e,r=xo((()=>`${http_prefix}${i.params.url}`));function c(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function u(e){if(o.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=c(e,t.ifid);a.source_def=[t.ifid],o.value.push(a)}))}async function d(e){if(o.value.length>0)return;const t=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${i.ifid}&gui=true`)||[];t&&t.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=c(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],o.value.push(a)}}))}async function _(e){if(o.value.length>0)return;const t=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${i.ifid}`)||[];t&&t.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,t.id);a=c(a,i.ifid),a.source_def=[i.ifid,t.id],o.value.push(a)}}))}async function p(e,t){const a={epoch_begin:i.epoch_begin,epoch_end:i.epoch_end},l=Kb.get_source_type_from_id(i.params?.source_type),n=await Kb.get_source_array_from_value_array(http_prefix,l,t),s=await Kb.get_metric_from_schema(http_prefix,l,n,e,null,a);return Kb.get_ts_group(l,n,s)}async function f(){await async function(){o.value=[];const e=i.params.post_params?.ts_requests;for(const t in e||{})switch(t){case"$ANY_IFID$":await u(e[t]);break;case"$ANY_EXPORTER$":await d(e[t]);break;case"$ANY_NETWORK$":await _(e[t]);break;default:let a=c(e[t],i.ifid);a.source_def=[i.ifid],o.value.push(a)}}(),await async function(){if(0==l.value.length)for(const e of o.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const n=await p(t,a);l.value.push(n)}}(),function(){for(const e of o.value)e.source_def&&delete e.source_def}();const e=r.value,t={csrf:i.csrf,ifid:i.ifid,epoch_begin:i.epoch_begin,epoch_end:i.epoch_end,...i.params.post_params,ts_requests:o.value};let a=await i.get_component_data(e,"",t);return a=Py.tsArrayToOptionsArray(a,l.value,n,""),a[0]&&(a[0].height=s.value),a?.[0]}return Ml((()=>[i.epoch_begin,i.epoch_end,i.filters]),((e,t)=>{!async function(){if(a.value){const e=await f();a.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){s.value=62.5*(i.max_height||4)}()})),_n((async()=>{})),(l,n)=>(Ps(),js("div",null,[Hs(Ag,{ref_key:"chart",ref:a,id:e.id,chart_type:t.value,base_url_request:r.value,get_custom_chart_options:f,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"};var YO={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=(e=>i18n(e))("ports_analysis.no_data"),a=va(null),l=va({}),n=va(null),s=va(null),o=va(null),i=e;Ml((()=>[i.epoch_begin,i.epoch_end,i.filters]),((e,t)=>{r()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{o.value=62.5*i.max_height,s.value=$(n.value).width(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${i.params.url}`,t={ifid:i.ifid,epoch_begin:i.epoch_begin,epoch_end:i.epoch_end,sankey_version:3,...i.params.url_params,...i.filters};let l=ntopng_url_manager.obj_to_url_params(t),n=await i.get_component_data(e,l);n=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(n);const s=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(n);return s.links.length>0&&s.nodes.length>0?a.value.set_no_data_flag(!1):a.value.set_no_data_flag(!0),s}();l.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,i)=>(Ps(),js("div",{ref_key:"body_div",ref:n},[Hs(jS,{ref_key:"sankey_chart",ref:a,width:s.value,height:o.value,no_data_message:ya(t),sankey_data:l.value,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const ZO=e=>(pl("data-v-c360f212"),e=e(),fl(),e),XO={class:"row"},QO={class:"me-2"},eM=["title"],tM=[ZO((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],aM=["title"],lM=[ZO((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],nM=["title"],sM=[ZO((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],oM=["title"],iM=[ZO((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],rM=["title"],cM=[ZO((()=>Vs("i",{class:"fas fa-print"},null,-1)))],uM=["title"],dM=[ZO((()=>Vs("i",{class:"fas fa-folder-plus"},null,-1)))],_M=["title"],pM=[ZO((()=>Vs("i",{class:"fas fa-pen-to-square"},null,-1)))],fM={class:"btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex"},vM={class:"me-2"},mM={class:"ms-1 my-auto me-2 filters-label"},hM={key:0,class:"d-flex align-items-center ms-2"},gM={class:"me-2"},bM=ZO((()=>Vs("div",null,[Vs("label",{class:"my-auto me-2"})],-1))),yM={key:1,class:"me-auto mt-2 flex-wrap d-flex"},wM=["title"],xM=[ZO((()=>Vs("i",{class:"fas fa-square-plus"},null,-1)))],kM=["title"],$M=[ZO((()=>Vs("i",{class:"fas fa-trash-can"},null,-1)))],SM={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},CM={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},NM={style:{"text-align":"center"}},AM={key:0},EM=["title"],TM=[ZO((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],PM=["title"],IM=[ZO((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],UM=["title"],OM=[ZO((()=>Vs("i",{class:"fas fa-print"},null,-1)))],MM={key:0,class:"col-sm mt-1"},jM={class:"alert alert-warning"},LM={key:1,class:"col-sm mt-1"},FM={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},RM={class:"alert-heading"},DM={class:"mb-0"},zM={key:0,class:"dashboard-component-title modal-header"},qM={class:"modal-title"},BM={style:{color:"gray"}},VM={key:0,class:"modal-close"},HM={class:"btn-group"},GM=["data-component-id"],WM=["data-component-id"],KM={key:0,style:{color:"lightgray","font-size":"12px"}};var JM={__name:"dashboard",props:{context:Object},setup(e){const t=e=>i18n(e),a=b.get_timeframes_dict(),l=e,n={badge:WO,empty:RO,pie:KO,timeseries:JO,table:zO,sankey:YO},s=va(!0),o=l.context.show_loading||!1,i=l.context.allow_edit||!1,r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va([]),h=va(!1),g=va({}),w=va({}),k=va({}),$=va([]),S=va([]),C=va([]),A=va({}),E=va("");let T={},P=!1,I=!1;const U=va(!1);let O=null;const M=va(null),j=xo((()=>"report"!=l.context.page&&"vs-report"!=l.context.page)),L=xo((()=>"report"==l.context.page&&!I)),F=xo((()=>"vs-report"==l.context.page)),R=xo((()=>!0)),D=xo((()=>1==A.value?.toolbox?.time?.hide)),z=xo((()=>1==A.value.is_open_report||D.value)),q=xo((()=>1==A.value.is_open_report||"vs-report"==l.context.page)),B=xo((()=>{let e="";return A.value.is_open_report?e=`Report: ${A.value.value}`:l.context.title&&(e=l.context.title),e})),H=xo((()=>e=>null==e.params.custom_style||I&&!e.params.custom_print_style?e.params.custom_print_style&&1==I?e.params.custom_print_style:"":e.params.custom_style)),G=xo((()=>e=>ye(e.epoch_begin,e.epoch_end)));async function W(e){let t=null;I="true"==x.get_url_entry("printable"),"report"!=l.context.page&&"vs-report"!=l.context.page||("report"==l.context.page?t=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==l.context.page&&(t=b.check_and_set_default_time_interval(void 0,void 0,!0)),v.value=t),await async function(e){const t=l.context.template_list_endpoint;let a=await b.http_request(t);if(null==a?.list)return;let n=a.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),C.value=n;const s=e||x.get_url_entry("report_template")||l.context.template;l.context.template=s,A.value=C.value.find((e=>e.value==s)),null==A.value&&(A.value=C.value[0]);!A.value.allow_edit&&U.value&&Te()}(e);let a=x.get_url_entry("report_name");null!=a&&""!=a?await pe(a):await Q(t,A.value.value),1==I&&we(),h.value=!0}function J(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),m.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function Y(e){e&&(v.value=e),m.value.forEach(((t,a)=>{ee(t,e)}))}function Z(){for(const[e,t]of Object.entries(w.value))J(e,t[0].value),g.value[e]=t[0],ae(e)}async function X(e,t){const a=[];return t||(t=await b.http_request(`${l.context.report_filters_endpoint}`)),e.forEach((async e=>{const l=e?.name||"",n=t.find((e=>e.id==l))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+l);JS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+l)),n.unshift({value:null,label:s}),w.value[l]=n,g.value[l]=n[0],k.value[l]=n,a.push(l);const o=e?.nested||[];o.length>0&&(S.value[l]=await X(o,t))}})),a}async function Q(e,t){P=!1;let a=`${l.context.template_endpoint}?template=${t}`,s=await b.http_request(a);m.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},...t};return ee(l,e),l})),Z(),$.value=await X(s.filters),await Ja()}function ee(e,t){const l=a[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-l,epoch_end:e}}const n=a[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function ae(e){const t=S.value[e];t?.forEach((e=>{if($.value.includes(e)){$.value=$.value.filter((t=>t!=e));const t=w.value[e][0];g.value[e]=t,J(e,t.value)}}))}function le(e,t){const a=S.value[e];a?.forEach((a=>{const l=w.value[a],n=[];if(t==e){const e=w.value[a][0];g.value[a]=e,J(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==g.value[e].value&&null!=t.value||n.push(t)})),!$.value.includes(a)){const t=$.value.indexOf(e);$.value.splice(t+1,0,a)}n.length>0?k.value[a]=n:delete k.value[a]}))}function ne(){if(!A.value.allow_edit&&U.value&&Te(),1==I&&we(),1==A.value.is_open_report)return;T={},fe();const e=y.get_status(!0);let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==P&&(t=b.set_default_time_interval(void 0,"min"),N.emit_event(ntopng_events.EPOCH_CHANGE,t,l.context.page)),Q(t,A.value.value)}function se(){c.value.show()}function oe(){u.value.show()}function ie(){d.value.show()}function re(){let e="report";return"vs-report"==l.context.page?e=l.context.title:v.value&&v.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*v.value.epoch_end,"DD-MM-YYYY")),e}dn((async()=>{W()})),_n((async()=>{"dashboard"==l.context.page&&setInterval((()=>{Y()}),1e4)}));const ce=async e=>{let t=JSON.parse(e);ue(t,t.name),x.delete_key_from_url("report_name")};function ue(e,t){fe(t);const a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};N.emit_event(ntopng_events.EPOCH_CHANGE,a,l.context.page),_e(e)}const de=async()=>{let e=`${l.context.report_list_endpoint}?ifid=${l.context.ifid}`,t=await b.http_request(e);return b.object_to_array(t)},_e=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}P=!0,T=n,m.value=a,Y(t)},pe=async e=>{let a=`${l.context.report_open_endpoint}?ifid=${l.context.ifid}&report_name=${e}`,n=await b.http_request(a);n?(ue(n,e),E.value=""):E.value=t("report.unable_to_open")};function fe(e){if(C.value=C.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",A.value.value),l.context.template=A.value.value,void x.delete_key_from_url("report_name");let a={value:e,label:t("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};C.value.push(a),A.value=a,l.context.template=e,x.set_key_to_url("report_name",A.value.value),x.delete_key_from_url("report_template")}const ve=async e=>{let t=!1,a={csrf:l.context.csrf,ifid:l.context.ifid,report_name:e},n=`${l.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)}),t=!0}catch(e){console.error(e)}return t},me=async e=>{let t={};for(var a in T)t[a]=await T[a].data;let l={version:"1.0",name:e,template:m.value,data:t};return v.value&&v.value.epoch_begin&&v.value.epoch_end&&(l.epoch_begin=v.value.epoch_begin,l.epoch_end=v.value.epoch_end),JSON.stringify(l)},he=async e=>{let t=!1,a={csrf:l.context.csrf,ifid:l.context.ifid,report_name:e,content:await me(e)},n=`${l.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)}),t=!0}catch(e){console.error(e)}return t};async function ge(){var e=re(),t=e+".json",a=await me(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function be(){if(1==I)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function ye(e,t){if(1==D.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),o=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),i=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==o?`${i}`:`${o} ${i}`}`}function we(){const e=y.get_status(!0),t=ye(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${A.value.label} ${t}`;document.title=a}function xe(e){return async(t,a)=>{e[t]=a}}function ke(){M.value.show()}function $e(){return"New Template"}const Se=async e=>{let t=!1,a={csrf:l.context.csrf,template_name:e},n=`${l.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},l=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)});l&&l.template_id&&await W(l.template_id),t=!0}catch(e){console.error(e)}return t};async function Ce(e){let t=m.value.map((e=>e.id)),a={csrf:l.context.csrf,template:A.value.value,components:t.toString()},n=!1,s=`${l.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(a)});n=!0}catch(e){console.error(e)}return n}async function Ne(e){let t=O.toArray().map((e=>m.value.find((t=>t.id==e))));Ee(),m.value=t,await Ja(),Ae(),Ce()}function Ae(){if(!O){var e=document.getElementById("drag-zone");O=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Ne})}}function Ee(){O&&(O.destroy(),O=null)}function Te(){U.value=!U.value,U.value?Ae():Ee()}const Pe=async()=>{let e=`${l.context.template_list_widgets_endpoint}`,a=await b.http_request(e);if(null==a?.list)return{};let n=a.list;return n.sort(((e,a)=>t(e.i18n_name).toUpperCase().localeCompare(t(a.i18n_name).toUpperCase()))),n};function Ie(){_.value.show()}function Ue(){f.value.show()}const Oe=async e=>{Ee();let a=`${l.context.template_component_add_endpoint}`,n={csrf:l.context.csrf,template:l.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(a,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=t("report.unable_to_open")}await Ja(),Ae()};async function Me(e){Ee();const t=e.target.dataset.componentId;m.value=m.value.filter((e=>e.id!==t)),await Ja(),Ae(),Ce()}function je(e){const t=e.target.dataset.componentId,a=m.value.find((e=>e.id===t)),n="report"==l.context.page;p.value.show(a,n)}async function Le(e){Ee();let a=`${l.context.template_component_edit_endpoint}`,n={csrf:l.context.csrf,template:l.context.template,component:e.id,component_title:e.title,component_height:e.height,component_width:e.width,component_time_offset:e.time_offset,component_time_window:e.time_window,component_params:e.rest_params},s={"Content-Type":"application/json"};try{await b.http_request(a,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=t("report.unable_to_open")}await Ja(),Ae()}async function Fe(){let e=!1,t={csrf:l.context.csrf,template:A.value.value},a=`${l.context.template_delete_endpoint}`;try{let l={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:l,body:JSON.stringify(t)});await W(),e=!0}catch(e){console.error(e)}return e}return(a,l)=>(Ps(),js(Ss,null,[Vs("div",XO,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),L.value?(Ps(),Ls(E_,{key:0,class:"dontprint",disabled_date_picker:z.value,id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:Y},{begin:ml((()=>[Vs("div",QO,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":l[0]||(l[0]=e=>A.value=e),options:C.value,onSelect_option:ne},null,8,["selected_option","options"])])])),extra_buttons:ml((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:t("dashboard.store")},[...tM],8,eM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:t("dashboard.open")},[...lM],8,aM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:t("download")},[...sM],8,nM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:t("upload")},[...iM],8,oM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:t("dashboard.print")},[...cM],8,rM),ya(i)?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:ke,title:t("dashboard.new_template")},[...dM],8,uM)):Ys("v-if",!0),ya(i)&&A.value.allow_edit?(Ps(),js("button",{key:1,class:K(["btn btn-link btn-sm",U.value?"text-warning":""]),type:"button",onClick:Te,title:t("dashboard.edit_mode")},[...pM],10,_M)):Ys("v-if",!0)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),Ys(" Filters "),Vs("div",fM,[(Ps(!0),js(Ss,null,En($.value,(e=>(Ps(),js("div",vM,[Vs("label",mM,[Vs("b",null,te(t("db_search."+e)),1)]),Hs(l_,{selected_option:g.value[e],"onUpdate:selected_option":t=>g.value[e]=t,options:k.value[e],style:"width: 50%;",onSelect_option:t=>function(e,t){J(t,e.value);for(const[e,a]of Object.entries(w.value)){const a=g.value[e];a?.value?le(e,t):ae(e)}}(g.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys($.value).length>0?(Ps(),js("div",hM,[Vs("div",gM,[bM,Vs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:Z},te(t("reset")),1)])])):Ys("v-if",!0)]),Ys(" Template Editor Toolbox "),U.value?(Ps(),js("div",yM,[Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ie,title:t("dashboard.add_component")},[...xM],8,wM),Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ue,title:t("dashboard.del_template")},[...$M],8,kM),Vs("h2",SM,te(t("dashboard.edit_mode")),1),Ys('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Ys("v-if",!0),Ys(" Report Title and small buttons "),q.value?(Ps(),js("div",CM,[Vs("h3",NM,[Ks(te(B.value)+" ",1),F.value?(Ps(),js("span",AM,[R.value?(Ps(),js(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:t("download")},[...TM],8,EM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:t("upload")},[...IM],8,PM)],64)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:t("dashboard.print")},[...OM],8,UM)])):Ys("v-if",!0)])])):Ys("v-if",!0),Ys(" Report/Dashboard Content "),(Ps(),js("div",{ref_key:"report_box",ref:r,id:"drag-zone",class:"row",key:m.value},[Ys(" Warning Message "),E.value?(Ps(),js("div",MM,[Vs("div",jM,te(E.value),1)])):Ys("v-if",!0),Ys(" Empty template message "),!h.value||m.value.length||U.value?Ys("v-if",!0):(Ps(),js("div",LM,[Vs("div",FM,[Vs("h4",RM,te(t("dashboard.empty_template")),1),Vs("p",DM,te(t("dashboard.empty_template_note")),1)])])),Ys(" Rendered Components "),(Ps(!0),js(Ss,null,En(m.value,(a=>(Ps(),Ls(FO,{style:{"min-width":"20rem"},color:a.active&&a.color||a.inactive_color,width:a.width,height:a.height,id:a.id,class:"drag-item"},{box_title:ml((()=>[a.i18n_name?(Ps(),js("div",zM,[Vs("h4",qM,[Ks(te(a.custom_name?a.custom_name:t(a.i18n_name))+" ",1),Vs("span",BM,te(a.time_offset?t("dashboard."+(j.value?"time_ago":"time_offset_list")+"."+a.time_offset):""),1)]),U.value?(Ps(),js("div",VM,[Vs("div",HM,[Vs("button",{type:"button",class:"btn-close btn-edit me-1","data-component-id":a.id,onClick:je},null,8,GM),Vs("button",{type:"button",class:"btn-close","data-component-id":a.id,onClick:Me},null,8,WM)])])):Ys("v-if",!0)])):Ys("v-if",!0)])),box_content:ml((()=>{return[s.value&&ya(o)?(Ps(),Ls(yf,{key:0,styles:"margin-top: 2rem !important;"})):Ys("v-if",!0),Vs("div",{class:K([s.value&&ya(o)?"ntopng-gray-out":""])},[(Ps(),Ls(Sn(n[a.component]),{id:a.id,style:V(H.value(a)),epoch_begin:a.epoch_begin,epoch_end:a.epoch_end,i18n_title:a.i18n_name,ifid:a.ifid?a.ifid.toString():e.context.ifid.toString(),max_width:a.width,max_height:a.height,params:a.params,get_component_data:(t=a,async(e,a,l)=>{let n={};if(P)T[t.id]?n=T[t.id]:(console.error("No data for "+t.id),n.data={});else{T[t.id]&&(n=T[t.id],n.data&&await n.data);const o=`${e}?${a}`;s.value=!0,n.data=l?b.http_post_request(o,l):b.http_request(o),n.data.then((()=>{s.value=!1})),T[t.id]=n}return n.data}),set_component_attr:xe(a),csrf:e.context.csrf,filters:a.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var t})),box_footer:ml((()=>["empty"!=a.component&&a.i18n_name&&!D.value?(Ps(),js("span",KM,te(G.value(a)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Ys(" div row "),Hs(FU,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:re,store_file:he,csrf:e.context.csrf,title:t("dashboard.store")},null,8,["csrf","title"]),Hs(JU,{ref_key:"modal_open_report",ref:u,list_files:de,open_file:pe,delete_file:ve,csrf:e.context.csrf,title:t("dashboard.open"),file_title:t("report.report_name")},null,8,["csrf","title","file_title"]),Hs(aO,{ref_key:"modal_upload_report",ref:d,upload_file:ce,title:t("upload"),file_title:t("report.file")},null,8,["title","file_title"]),Hs(FU,{ref_key:"modal_new_template",ref:M,get_suggested_file_name:$e,store_file:Se,allow_spaces:!0,csrf:e.context.csrf,title:t("dashboard.new_template")},null,8,["csrf","title"]),Hs(rO,{ref_key:"modal_add_template_component",ref:_,list_components:Pe,add_component:Oe,csrf:e.context.csrf,title:t("dashboard.add_component")},null,8,["csrf","title"]),Hs(jO,{ref_key:"modal_edit_template_component",ref:p,csrf:e.context.csrf,onEdit:Le},null,8,["csrf"]),Hs(lx,{ref_key:"modal_delete_template",ref:f,title:t("dashboard.del_template"),body:t("dashboard.del_template_confirm"),onDelete:Fe},null,8,["title","body"])],64))}};lp("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),JM.__scopeId="data-v-c360f212",JM.__file="http_src/vue/dashboard.vue";const YM=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),ZM={class:"mb-3 row"},XM={class:"col-form-label col-sm-4"},QM={class:"col-sm-6"},ej={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},tj=YM((()=>Vs("hr",null,null,-1))),aj={class:"host-alert-fields"},lj={class:"mb-3 row"},nj={class:"col-form-label col-sm-4"},sj={class:"col-sm-6"},oj={value:""},ij={value:"0"},rj={disabled:""},cj=["value"],uj={class:"flow-alert-fields"},dj={class:"mb-3 row"},_j={class:"col-form-label col-sm-4"},pj={class:"col-sm-6"},fj={value:""},vj={value:"0"},mj={disabled:""},hj=["value"],gj={key:0,class:"ip-fields"},bj={class:"mb-3 row"},yj={class:"col-form-label col-sm-4"},wj={class:"col-sm-6"},xj=["pattern"],kj={key:1,class:"network-fields"},$j={class:"mb-3 row"},Sj={class:"col-form-label col-sm-4"},Cj={class:"col-sm-4 pr-0"},Nj=["pattern"],Aj={class:"col-sm-2 ps-4 pe-0"},Ej=YM((()=>Vs("span",{class:"me-2"},"/",-1))),Tj={class:"mb-3 row"},Pj={class:"col-form-label col-sm-4"},Ij={class:"col-sm-6"},Uj={class:"mb-3 row"},Oj={class:"col-form-label col-sm-4"},Mj={key:0},jj={key:1},Lj={class:"col-sm-6"},Fj=["pattern"],Rj=["pattern"],Dj=YM((()=>Vs("hr",{class:"separator mt-5"},null,-1))),zj={class:"form-group row"},qj={class:"col-form-label"},Bj={class:"mt-1"},Vj=["placeholder"],Hj=["disabled"];var Gj={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(null);va(null);const n=va("ip"),s=va(""),o=va(""),i=va(0),r=va(""),c=va(""),u=va(""),d=va(""),_=va(null),p=i18n("details.comment_placeholder"),f=va(null),v=va(null),m=a;function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}const g=e;let b=h("ip");h("text");let y=h("certificate"),w=h("domain_name_not_strict");const x=e=>{n.value=e},k=()=>{let e=null,t=!0;return"hosts"==g.alert_exclusions_page?(e=new RegExp(b),t="ip"==n.value?null==s.value||""==s.value||0==e.test(s.value)||""==c.value&&""==u.value:null==o.value||""==o.value||0==e.test(o.value)||""==c.value&&""==u.value||null==d.value||""==d.value||parseInt(d.value)<1||parseInt(d.value)>127):"domain_names"==g.alert_exclusions_page?(e=new RegExp(w),t=null==r.value||""==r.value||0==e.test(r.value)):"tls_certificate"==g.alert_exclusions_page&&(e=new RegExp(y),t=null==r.value||""==r.value||0==e.test(r.value)),t},$=()=>{l.value.close()},S=e=>""==e?-1:e,C=()=>{let e,t=s.value;"hosts"==g.alert_exclusions_page?("network"==n.value&&(t=`${o.value}/${d.value}`),null!=i.value&&0!=i.value&&(t=`${t}@${i.value}`),e={alert_addr:t,host_alert_key:S(c.value),flow_alert_key:S(u.value)}):"domain_names"==g.alert_exclusions_page?e={alert_domain:r.value}:"tls_certificate"==g.alert_exclusions_page&&(e={alert_certificate:r.value}),e.label=_.value,f.value&&(e.old_type=v.value.type,e.old_subdir=v.value.subdir,e.old_alert_domain=v.value.alert_domain,e.old_alert_certificate=v.value.alert_certificate,e.old_alert_addr=v.value.alert_addr,e.old_flow_alert_key=v.value.flow_alert_key,e.old_host_alert_key=v.value.host_alert_key),m("add",e),$()};t({show:e=>{if(e)if(f.value=!0,v.value=e,_.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(n.value="network",o.value=t[0],d.value=t[1],s.value=""):(n.value="ip",s.value=a[0],o.value="",d.value=""),a.length>1?i.value=a[1]:i.value=0,null!=e.host_alert_key?c.value=""+e.host_alert_key:c.value="",null!=e.flow_alert_key?u.value=""+e.flow_alert_key:u.value=""}else"domain"==e.type?r.value=e.alert_domain:r.value=e.alert_certificate;else n.value="ip",s.value="",o.value="",i.value=0,c.value="0",u.value="",d.value="",r.value="",_.value="";l.value.show()},close:$}),_n((()=>{}));const N=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(N("check_exclusion.add_exclusion")),1)])),body:ml((()=>["hosts"==e.alert_exclusions_page?(Ps(),js(Ss,{key:0},[Ys(" modal hosts "),Vs("div",ZM,[Vs("label",XM,[Vs("b",null,te(N("check_exclusion.member_type")),1)]),Vs("div",QM,[Vs("div",ej,[Vs("label",{class:K([{active:"ip"==n.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>x("ip"))}),Ks(" "+te(N("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==n.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>x("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(N("check_exclusion.network")),1)],2)])])]),tj,Vs("div",aj,[Vs("div",lj,[Vs("label",nj,[Vs("b",null,te(N("check_exclusion.host_alert_type")),1)]),Vs("div",sj,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>c.value=e)},[Vs("option",oj,te(N("check_exclusion.none")),1),Vs("option",ij,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",rj,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.host_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,cj)):Ys("v-if",!0)],64)))),256))],512),[[Ri,c.value]])])])]),Vs("div",uj,[Vs("div",dj,[Vs("label",_j,[Vs("b",null,te(N("check_exclusion.flow_alert_type")),1)]),Vs("div",pj,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>u.value=e)},[Vs("option",fj,te(N("check_exclusion.none")),1),Vs("option",vj,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",mj,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.flow_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,hj)):Ys("v-if",!0)],64)))),256))],512),[[Ri,u.value]])])])]),"ip"==n.value?(Ps(),js("div",gj,[Vs("div",bj,[Vs("label",yj,[Vs("b",null,te(N("check_exclusion.ip_address")),1)]),Vs("div",wj,[wn(Vs("input",{pattern:ya(b),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,8,xj),[[Mi,s.value]])])])])):Ys("v-if",!0),"network"==n.value?(Ps(),js("div",kj,[Vs("div",$j,[Vs("label",Sj,[Vs("b",null,te(N("check_exclusion.network")),1)]),Vs("div",Cj,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(b),"onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e)},null,8,Nj),[[Mi,o.value]])]),Vs("div",Aj,[Ej,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>d.value=e)},null,512),[[Mi,d.value]])])])])):Ys("v-if",!0),Vs("div",Tj,[Vs("label",Pj,[Vs("b",null,te(N("vlan")),1)]),Vs("div",Ij,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>i.value=e),class:"form-control"},null,512),[[Mi,i.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),js(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",Uj,[Vs("label",Oj,["domain_names"==e.alert_exclusions_page?(Ps(),js("b",Mj,te(N("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),js("b",jj,te(N("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",Lj,["domain_names"==e.alert_exclusions_page?wn((Ps(),js("input",{key:0,placeholder:"",pattern:ya(w),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>r.value=e)},null,8,Fj)),[[Mi,r.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Ps(),js("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>r.value=e)},null,8,Rj)),[[Mi,r.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),Dj,Vs("div",zj,[Vs("div",null,[Vs("label",qj,[Vs("b",null,te(N("show_alerts.add_a_comment")),1)])]),Vs("div",Bj,[wn(Vs("textarea",{placeholder:ya(p),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>_.value=e),maxlength:"450"},null,8,Vj),[[Mi,_.value]])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:k(),onClick:C,class:"btn btn-primary"},te(N("add")),9,Hj)])),_:1},512))}};lp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),Gj.__scopeId="data-v-7e5acce0",Gj.__file="http_src/vue/modal-add-check-exclusion.vue";let Wj={PageAlertStats:Yh,PageFlowHistorical:Ng,PageStats:Zw,PageAssetTable:sx,PagePeriodicityTable:gx,PageServiceTable:Mx,PageServiceMap:Qx,PagePeriodicityMap:bk,PageAssetMap:Rk,PageDeviceExclusions:j$,PageHostTLS:L$,PageHostSSH:H$,PageHomeMap:Q$,PageSankey:aS,PageHostRules:oN,PageAlertAnalysis:AN,PageHostMap:DN,PageManageConfigurationBackup:TE,PageSNMPDeviceRules:vT,PageHostsPortsAnalysis:UT,PageInactiveHosts:$P,PageInactiveHostDetails:EP,PageVulnerabilityScan:XI,PageHostVsResult:nU,PageOpenPorts:uU,PageVulnerabilityScanReport:SU,PageSNMPUsage:PU,PageEditApplications:fE,PageVLANPortsFlowSankey:QN,PageTestTable:dA,PageSnmpDevicesInterfacesSimilarity:mT,NedgeRulesConfig:XA,NedgeRepeatersConfig:aP,PageHostDetailsApplications:nS,PageHostDetailsTraffic:kS,PageHostDetailsPackets:IS,PageHostDetailsFlowSankey:KS,PageHostDetailsPorts:vN,PageAggregatedLiveFlows:cA,PageNetworkDiscovery:$E,PageFlowDeviceDetails:PP,PageFlowDeviceInterfaceDetails:HP,AlertInfo:S_,Chart:N_,TimeseriesChart:Ag,Datatable:ww,DateTimeRangePicker:E_,NetworkMap:Yx,RangePicker:Wp,PageNavbar:n_,SelectSearch:l_,TabList:Xw,Sankey:jS,NoteList:pv,Loading:yf,Dashboard:JM,DashboardBox:FO,DashboardEmpty:RO,DashboardTable:zO,DashboardBadge:WO,DashboardPie:KO,DashboardTimeseries:JO,DashboardSankey:YO,ListTimeseries:Qg,Modal:np,ModalAddCheckExclusion:Gj,ModalAlertsFilter:Rm,ModalFilters:wp,ModalTimeseries:dw,ModalTrafficExtraction:fv,ModalDeleteConfirm:lx,ModalSnapshot:om,ModalAddDeviceExclusion:_$,ModalEditDeviceExclusion:$$,ModalAddHostRules:ZC,ModalAddApplication:dE,ModalDeleteApplication:_E,ModalEditReport:bU,Vue:Od};window.ntopVue=Wj;var Kj=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function Jj(){const e=e=>$(Kj[3])[Kj[2]]($(e)[Kj[1]]())[Kj[0]]();let t=Kj[4];const a=(()=>{let a=$(t),l=i18n(Kj[5])[Kj[7]](Kj[6]);$(Kj[8],a)[Kj[0]](l[0]),$(Kj[9],a)[Kj[0]](l[1]);let n=`${Kj[10]}${i18n(Kj[11])}${Kj[12]}`;return $(Kj[13],a)[Kj[0]](n),e(a)})(),l=()=>{$(Kj[14])[Kj[2]](a)};l();const n=()=>$(Kj[16])[Kj[15]]()[Kj[15]]()[Kj[15]]()[Kj[15]]()[Kj[15]]();ntopng_events_manager[Kj[23]](Kj[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[Kj[1]]();$(Kj[16],l)[Kj[0]](Kj[17]),$(Kj[18],l)[Kj[0]](Kj[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[Kj[19]]()})(),l()),(e=>{$(Kj[16])[Kj[0]](e[Kj[20]]),$(Kj[18])[Kj[0]](e[Kj[21]])})(t)}))}$(document)[Kj[24]]((()=>Jj()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnRvcG5nLmpzIiwic291cmNlcyI6WyIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbnRvcC11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9lYnBmLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21vZGFsL21vZGFsLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy91dGlsaXRpZXMuanMiLCIuLi8uLi9odHRwX3NyYy92YWxpZGF0b3JzL250b3BuZy12YWxpZGF0b3JzLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmFsaWRhdG9ycy92YWxpZGF0b3JzLmpzIiwiLi4vLi4vaHR0cF9zcmMvc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvY2hhcnRzL3BpZS1jaGFydC5qcyIsIi4uLy4uL2h0dHBfc3JjL3NlcnZpY2VzL3NlcnZpY2VzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5wcm9kLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmlld3MvcHVibGljL2Jsb2cvYmxvZy1ub3RpZmljYXRpb24tdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvdnVlX25vZGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Ryb3Bkb3duLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy90YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0LXNlYXJjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uYXZiYXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmF2YmFyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMzQ0MDQ5ZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRlOTgxMWE4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvY2hhcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZhZTI0YTI4JmxhbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFkZWZmZTAmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMxMTljODNlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcmFuZ2UtcGlja2VyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFhZWU1OWVhJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0X3RhYmxlX3BhZ2UudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xvYWRpbmcudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3N3aXRjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9zcGlubmVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9ub3RlLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYmU5NzhjNCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXNuYXBzaG90LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWFsZXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtc3RhdHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtZmxvdy1oaXN0b3JpY2FsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMTRhZGU0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xpc3QtdGltZXNlcmllcy52dWUiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaG9zdF90b3BfdGFibGVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29uc3RhbnRzL3NubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvZmxvd19kZXZpY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Byb3hpZXMvc25tcC5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1leHRlbnNpb24uanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1wbG90dGVycy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9jb2xvcnMvY29sb3JzLWludGVycG9sYXRpb24uanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1jb25maWcuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1mb3JtYXQuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kb3dubG9hZC1maWxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXRhdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL250b3BfdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zdGF0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFiLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYi1saXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lMDVhMzM3YSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01N2NlN2Y2MCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNkZWJjN2EzJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjFiNWRmMjUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9uZXR3b3JrLW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02ZjA4YjU3MyZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODAwYWI1MWUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hc3NldC1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY5YjIyODZlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWViMjQ3YjcmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNWJhMTM3OCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJmYmJlYmNmJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLWFwcGxpY2F0aW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wN2JlZTE0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXRyYWZmaWMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXBhY2tldHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGEtdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvc29ydGluZy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtaG9zdC1ydWxlcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXJ1bGVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtZGV0YWlscy1wb3J0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hbGVydC1hbmFseXNpcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS12bGFuLXBvcnRzLXNhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hZ2dyZWdhdGVkLWxpdmUtZmxvd3MudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdGVzdC10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtbmVkZ2UtYWRkLXJ1bGUtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1uZWRnZS1jaGFuZ2UtZGVmYXVsdC1wb2xpY3kudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmVkZ2UtcnVsZXMtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtYXBwbGljYXRpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1hcHBsaWNhdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1lZGl0LWFwcGxpY2F0aW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uZXR3b3JrLWRpc2NvdmVyeS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1tYW5hZ2UtY29uZmlndXJhdGlvbnMtYmFja3VwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtc25tcC1kZXZpY2UtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC1kZXZpY2UtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC1kZXZpY2VzLWludGVyZmFjZXMtc2ltaWxhcml0eS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0cy1wb3J0cy1hbmFseXNpcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtbmVkZ2UtYWRkLXJlcGVhdGVyLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uZWRnZS1yZXBlYXRlcnMtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kZWxldGUtaW5hY3RpdmUtaG9zdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QtZXBvY2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRvd25sb2FkLWluYWN0aXZlLWhvc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaW5hY3RpdmUtaG9zdHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaW5hY3RpdmUtaG9zdC1kZXRhaWxzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWZsb3dkZXZpY2UtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWZsb3dkZXZpY2UtaW50ZXJmYWNlLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLXNjYW4tY29uZmlybS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdXBkYXRlLXBlcmlvZGljaXR5LXNjYW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWFkZC12cy1ob3N0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdnMtcmVzdWx0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLW9wZW4tcG9ydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtdnMtcmVwb3J0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXZ1bG5lcmFiaWxpdHktc2Nhbi1yZXBvcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC11c2FnZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZmlsZS1zYXZlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWxlLW9wZW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbGUtdXBsb2FkLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1zZWxlY3QtY29tcG9uZW50LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1lZGl0LWNvbXBvbmVudC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLWJveC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLWVtcHR5LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC1iYWRnZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLXBpZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLXRpbWVzZXJpZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWNoZWNrLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbnRvcF92dWUuanMiLCIuLi8uLi9odHRwX3NyYy9leHRlbnNpb25zL2NoYXJ0X2NvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMDE0LTIwIC0gbnRvcC5vcmdcbkRhdGUucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHsgLy9hdXRob3I6IG1laXp6XG4gICAgICAgIHZhciBvID0ge1xuICAgICAgICAgICAgICAgIFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSwgLy9tb250aFxuICAgICAgICAgICAgICAgIFwiZCtcIjogdGhpcy5nZXREYXRlKCksICAgIC8vZGF5XG4gICAgICAgICAgICAgICAgXCJoK1wiOiB0aGlzLmdldEhvdXJzKCksICAgLy9ob3VyXG4gICAgICAgICAgICAgICAgXCJtK1wiOiB0aGlzLmdldE1pbnV0ZXMoKSwgLy9taW51dGVcbiAgICAgICAgICAgICAgICBcInMrXCI6IHRoaXMuZ2V0U2Vjb25kcygpLCAvL3NlY29uZFxuICAgICAgICAgICAgICAgIFwicStcIjogTWF0aC5mbG9vcigodGhpcy5nZXRNb250aCgpICsgMykgLyAzKSwgIC8vcXVhcnRlclxuICAgICAgICAgICAgICAgIFwiU1wiOiB0aGlzLmdldE1pbGxpc2Vjb25kcygpIC8vbWlsbGlzZWNvbmRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvKHkrKS8udGVzdChmb3JtYXQpKSBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShSZWdFeHAuJDEsXG4gICAgICAgICAgICAgICAgKHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xuICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS50ZXN0KGZvcm1hdCkpXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoUmVnRXhwLiQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgUmVnRXhwLiQxLmxlbmd0aCA9PSAxID8gb1trXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChcIjAwXCIgKyBvW2tdKS5zdWJzdHIoKFwiXCIgKyBvW2tdKS5sZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbn1cblxuLy8gRXh0ZW5kZWQgZGlzYWJsZSBmdW5jdGlvbiBcbmpRdWVyeS5mbi5leHRlbmQoe1xuICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRoaXMuaXMoJ2lucHV0LCBidXR0b24sIHRleHRhcmVhLCBzZWxlY3QnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbn0pO1xuXG5jb25zdCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSA9IDAuMDA1O1xuXG5jb25zdCBSRUdFWEVTID0ge1xuICAgICAgICBpcHY0OiBTdHJpbmcucmF3YF4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSRgLFxuICAgICAgICBpcHY2OiBTdHJpbmcucmF3YF4oKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKTopezN9KFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pJHxeXFxzKigoKFswLTlBLUZhLWZdezEsNH06KXs3fShbMC05QS1GYS1mXXsxLDR9fDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs2fSg6WzAtOUEtRmEtZl17MSw0fXwoKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezV9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsMn0pfDooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezR9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsM30pfCgoOlswLTlBLUZhLWZdezEsNH0pPzooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXszfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDR9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDJ9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezJ9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNX0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsM306KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MX0oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw2fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw0fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoOigoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDd9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDV9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpKSglLispP1xccyopJGAsXG4gICAgICAgIGRvbWFpbk5hbWU6IFN0cmluZy5yYXdgXihbYS16QS1aXShbYS16QS1aXXxbMC05XSk/XFwuW2EtekEtWl17MiwxM318W2EtekEtWjAtOV0oW1xcLV8uYS16QS1aMC05XXsxLDYxfVthLXpBLVowLTldKT9cXC5bYS16QS1aXXsyLDEzfXxbYS16QS1aMC05XShbXFwtXy5hLXpBLVowLTldezEsNjF9W2EtekEtWjAtOV0pP1xcLlthLXpBLVpdezIsMzB9XFwuW2EtekEtWl17MiwzfSkkYCxcbiAgICAgICAgcG9ydDogU3RyaW5nLnJhd2BeKFswLTldezEsNH18WzEtNV1bMC05XXs0fXw2WzAtNF1bMC05XXszfXw2NVswLTRdWzAtOV17Mn18NjU1WzAtMl1bMC05XXw2NTUzWzAtNV0pJGAsXG4gICAgICAgIGxhdGVuY3k6IFN0cmluZy5yYXdgXihbMC05XSpbLl0pP1swLTldKyRgLFxuICAgICAgICB1cmw6IFN0cmluZy5yYXdgXihodHRwcz9cXDpcXC9cXC9bXlxcL1xcc10rKFxcLy4qKT8pJGAsXG4gICAgICAgIGVtYWlsVXJsOiBTdHJpbmcucmF3YF5zbXRwcz86XFwvXFwvW1xcLWEtekEtWjAtOTouXXsxLDI1Nn0kYCxcbiAgICAgICAgbWFjQWRkcmVzczogU3RyaW5nLnJhd2BeKFswLTlBLUZhLWZdezJ9Oil7NX0oWzAtOUEtRmEtZl17Mn0pJGAsXG4gICAgICAgIGhvc3RuYW1lOiBTdHJpbmcucmF3YF4oPyFcXHMqJClbYS16QS1aMC05Ll86IFxcLVxcL117MSwyNTB9fF5bYS16QS1aMC05Ll86IFxcLVxcL117MSwyNTB9QFswLTldezAsNX1gLFxuICAgICAgICB1c2VybmFtZTogU3RyaW5nLnJhd2BeW2EtekEtWjAtOS5fQCEtP117MywzMH0kYCxcbiAgICAgICAgc2luZ2xld29yZDogU3RyaW5nLnJhd2BeKD89W2EtekEtWjAtOS5fOlxcLV17MywyNTN9JCkoPyEuKltfLjpcXC1dezJ9KVteXy46XFwtXS4qW15fLjpcXC1dJGAsXG4gICAgICAgIG11bHRpd29yZDogU3RyaW5nLnJhd2BeKFthLXpBLVowLTkuXzpcXC1cXHNdezMsMjUzfSkkYCxcbiAgICAgICAgZW1haWw6IFN0cmluZy5yYXdgXihbYS16QS1aMC05LiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dK0BbYS16QS1aMC05XFwtXSsoPzpcXC5bYS16QS1aMC05XFwtXSspKikkfF5bYS16QS1aXFxkLiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dezEsMTI4fSRgLFxuICAgICAgICBlbWFpbENvbW1hTGlzdDogU3RyaW5nLnJhd2BeKCg/OlthLXpBLVowLTkuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl0rQFthLXpBLVowLTlcXC1dKyg/OlxcLlthLXpBLVowLTlcXC1dKykqKXwoW2EtekEtWlxcZC4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XXsxLDEyOH0pKSg/OiwoKD86W2EtekEtWjAtOS4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XStAW2EtekEtWjAtOVxcLV0rKD86XFwuW2EtekEtWjAtOVxcLV0rKSopfChbYS16QS1aXFxkLiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dezEsMTI4fSkpKSokYCxcbiAgICAgICAgaHR0cHM6IFN0cmluZy5yYXdgXmh0dHBzPzpcXC9cXC8uKyRgLFxuICAgICAgICB0b2tlbjogU3RyaW5nLnJhd2BeWzAtOWEtZl17MzJ9YCxcbiAgICAgICAgc2NvcmU6IFN0cmluZy5yYXdgXlswLTldezEsNX1gLFxuICAgICAgICB0ZWxlZ3JhbV9jaGFubmVsOiBTdHJpbmcucmF3YF5bMC05XFwtXXsxLDE1fWAsXG4gICAgICAgIHBhc3N3b3JkOiBTdHJpbmcucmF3YF5bXFx3XFwvJCFcXC8oKT0/XipAXy1dezUsMzF9JGAsXG4gICAgICAgIHRsc19jZXJ0aWZpY2F0ZTogU3RyaW5nLnJhd2BeW149LF0rPVtePSxdKygsXFxzW149LF0rPVtePSxdKykqJGAsXG4gICAgICAgIGRvbWFpbl9uYW1lX25vdF9zdHJpY3Q6IFN0cmluZy5yYXdgXlthLXpBLVowLTlcXC1ffl0rKChcXC5bYS16QS1aMC05XFwtX35dKykrKSRgLFxuICAgICAgICBub25fcXVvdGVkX3RleHQ6IFN0cmluZy5yYXdgXlthLXpBLVowLTkuLV9dKyRgLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnRvcFV0aWxzIHtcblxuICAvKiBTaG93IGFuIG92ZXJsYXkgdG8gaGlkZSBsb2FkaW5nICovXG4gIHN0YXRpYyB0b2dnbGVPdmVybGF5cyh0aW1lID0gNTAwKSB7XG4gICAgJChgLm92ZXJsYXlgKS50b2dnbGUodGltZSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBzaG93T3ZlcmxheXModGltZSA9IDUwMCkge1xuICAgICQoYC5vdmVybGF5YCkuZmFkZUluKHRpbWUpO1xuICB9XG4gIFxuICBzdGF0aWMgaGlkZU92ZXJsYXlzKHRpbWUgPSA1MDApIHtcbiAgICAkKGAub3ZlcmxheWApLmZhZGVPdXQodGltZSk7XG4gIH1cblxuICAgICAgICBzdGF0aWMgZ2V0IFJFR0VYRVMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJFR0VYRVM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0SVB2NFJlZ2V4V2l0aENJRFIoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gUkVHRVhFUy5pcHY0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7UkVHRVhFUy5pcHY0LnN1YnN0cmluZygwLCBsZW5ndGggLSAxKX0oXFxcXC8/KShcXFxcYihbMC05XXxbMTJdWzAtOV18M1swLTJdKT9cXFxcYikkYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRJUHY2UmVnZXhXaXRoQ0lEUigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBSRUdFWEVTLmlwdjYubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtSRUdFWEVTLmlwdjYuc3Vic3RyaW5nKDAsIGxlbmd0aCAtIDEpfShcXFxcLz8pXFxcXGIoWzAtOV18WzEtOV1bMC05XXwxWzAxXVswLTldfDEyWzAtOF0pP1xcXFxiJGA7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzb2x2ZSBhIGhvc3RuYW1lIGJ5IGRvaW5nIGEgRE5TIFJlc29sdmUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSBUaGUgaG9zdG5hbWUgdG8gcmVzb2x2ZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGFzeW5jIHJlc29sdmVETlMoaG9zdG5hbWUgPSBcIm50b3Aub3JnXCIpIHtcblxuICAgICAgICAgICAgICAgIC8vIHJlc29sdmUgdGhlIGhvc3RuYW1lIGJ5IGRvaW5nIGEgZmV0Y2ggcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2goYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9kbnMvcmVzb2x2ZS5sdWE/aG9zdG5hbWU9JHtob3N0bmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW50cyBvdXQgdGhlIGVycm9yIGlmIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBTb21ldGhpbmcgd2VudCB3cm9uZyB3aGVuIHJlc29sdmluZyBob3N0bmFtZTogJHtlcnJ9YClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcmVxdWVzdCBoYXMgZmFpbGVkIHJldHVybiBhIHBsYWNlaG9sZGVyIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgLy8gaW5kaWNhdGluZyB0aGUgZmFpbHVyZVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHJjOiAtMSwgcmNfc3RyOiBcIkZBSUxFRF9IVFRQX1JFUVVFU1RcIiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcGxhY2UgdGhlIGlucHV0cyB3aGljaCBjb250YWluIHRoZSBbZGF0YS1wYXR0ZXJuXSBhdHRyaWJ1dGVcbiAgICAgICAgICogd2l0aCB0aGUgW3BhdHRlcm5dIGF0dHJpYnV0ZS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBpbml0RGF0YVBhdHRlcm5zKCkge1xuICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIGlucHV0IHdpdGggdGhlIGRhdGEtcGF0dGVybiBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAvLyBzdWJzdGl0dXRlIHRoZSBkYXRhLXBhdHRlcm4gd2l0aCB0aGUgcmlnaHQgcmVnZXhlc1xuICAgICAgICAgICAgICAgICQoYGlucHV0W2RhdGEtcGF0dGVybl1gKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBhdHRlcm4gaXMgZW1wdHkgdGhlbiBwcmludCBhIHdhcm4gaW5zaWRlIHRoZSBjb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhUGF0dGVybiA9ICQodGhpcykuZGF0YSgncGF0dGVybicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhUGF0dGVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEFuIGVtcHR5IGRhdGEtcGF0dGVybiBvbiBhbiBpbnB1dCB3YXMgZm91bmQhYCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnVpbGQgdGhlIHJlZ2V4cCBwYXR0ZXJuIGZvciB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBkYXRhUGF0dGVybi5zcGxpdCgnfCcpLm1hcChwID0+IFJFR0VYRVNbcF0udG9TdHJpbmcoKSkuam9pbignfCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9hZCB0aGUgcGF0dGVyblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdwYXR0ZXJuJywgcGF0dGVybik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGRhdGEtcGF0dGVybiBmcm9tIHRoZSBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVBdHRyKCdkYXRhLXBhdHRlcm4nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBpc19nb29kX2lwdjQoaXB2NCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFJFR0VYRVMuaXB2NCkudGVzdChpcHY0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBpc19nb29kX2lwdjYoaXB2Nikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFJFR0VYRVMuaXB2NikudGVzdChpcHY2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBpc19tYWNfYWRkcmVzcyhtYWMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChSRUdFWEVTLm1hY0FkZHJlc3MpLnRlc3QobWFjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBpc051bWVyaWModmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gL15cXGQrJC8udGVzdCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaXNfbmV0d29ya19tYXNrKHdoYXQsIG9wdGlvbmFsX21hc2spIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSB3aGF0LnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgbWFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGlwX2FkZHI7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbXMubGVuZ3RoICE9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9uYWxfbWFzaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwX2FkZHIgPSB3aGF0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpcF9hZGRyID0gZWxlbXNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTnRvcFV0aWxzLmlzTnVtZXJpYyhlbGVtc1sxXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrID0gcGFyc2VJbnQoZWxlbXNbMV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzayA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChOdG9wVXRpbHMuaXNfZ29vZF9pcHY0KGlwX2FkZHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzayA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA9IDMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWFzayA+IDMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpcHY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGlwX2FkZHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2tcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChOdG9wVXRpbHMuaXNfZ29vZF9pcHY2KGVsZW1zWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2sgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSAxMjg7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXNrID4gMTI4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpcHY2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGlwX2FkZHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2s6IG1hc2tcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmJpdHMoYml0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemVzID0gWydicHMnLCAnS2JwcycsICdNYnBzJywgJ0dicHMnLCAnVGJwcyddO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoYml0cykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYml0cyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgoYml0cyA+IDApICYmIChiaXRzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgYnBzJyk7XG4gICAgICAgICAgICAgICAgdmFyIGJpdHNfbG9nMTAwMCA9IE1hdGgubG9nKGJpdHMpIC8gTWF0aC5sb2coMTAwMClcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KE1hdGguZmxvb3IoYml0c19sb2cxMDAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPCAwIHx8IGlzTmFOKGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPj0gc2l6ZXMubGVuZ3RoKSB7IC8vIHByZXZlbnRzIG92ZXJmbG93c1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiPiBcIiArIHNpemVzW3NpemVzLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGkgPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYml0cyAvIE1hdGgucG93KDEwMDAsIGkpICogMTAwKSAvIDEwMCArICcgJyArIHNpemVzW2ldXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSBwYXJzZUZsb2F0KGJpdHMgLyBNYXRoLnBvdygxMDAwLCBpKSkudG9GaXhlZCgyKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCAlIDEgPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gTWF0aC5yb3VuZChyZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0ICsgJyAnICsgc2l6ZXNbaV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZXhwb3J0X3JhdGUoZXBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZXBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnZXhwL3MnLCAnS2V4cC9zJ107XG4gICAgICAgICAgICAgICAgaWYgKGVwcyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgoZXBzID4gMCkgJiYgKGVwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGV4cHMvcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShlcHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZXhwb3J0c19mb3JtYXQoZXhwb3J0cykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGV4cG9ydHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9ydHNfbGFiZWwgPSBpMThuX2V4dC5leHBvcnRzLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbZXhwb3J0c19sYWJlbCwgJ0sgJyArIGV4cG9ydHNfbGFiZWxdO1xuICAgICAgICAgICAgICAgIGlmIChleHBvcnRzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChleHBvcnRzID4gMCkgJiYgKGV4cG9ydHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBleHBzL3MnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoZXhwb3J0cywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmYml0c19mcm9tX2J5dGVzKGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoYnl0ZXMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiAoTnRvcFV0aWxzLmZiaXRzKGJ5dGVzICogOCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZwYWNrZXRzKHBwcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHBwcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ3BwcycsICdLcHBzJywgJ01wcHMnLCAnR3BwcycsICdUcHBzJ107XG4gICAgICAgICAgICAgICAgaWYgKHBwcyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgocHBzID4gMCkgJiYgKHBwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIHBwcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShwcHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZnBvaW50cyhwcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChwcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydwdC9zJywgJ0twdC9zJywgJ01wdC9zJywgJ0dwdC9zJywgJ1RwdC9zJ107XG4gICAgICAgICAgICAgICAgaWYgKHBwcyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgocHBzID4gMCkgJiYgKHBwcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIHB0L3MnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUocHBzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZmbG93cyhmcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChmcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydmcHMnLCAnS2ZwcycsICdNZnBzJywgJ0dmcHMnLCAnVGZwcyddO1xuICAgICAgICAgICAgICAgIGlmIChmcHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKGZwcyA+IDApICYmIChmcHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBmcHMnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoZnBzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZtc2dzKG1wcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKG1wcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ21zZy9zJywgJ0ttc2cvcycsICdNc2cvcycsICdHbXNnL3MnLCAnVG1zZy9zJ107XG4gICAgICAgICAgICAgICAgaWYgKG1wcyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgobXBzID4gMCkgJiYgKG1wcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIG1wcycpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShtcHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZm1pbGxpcyhtcykge1xuXG4gICAgICAgICAgICAgICAgaWYgKG1zID09PSB1bmRlZmluZWQpIHJldHVybiAnLSc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZXMgPSBbJ21zJ107XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUobXMsIHNpemVzLCAxMDAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZub25lKHZhbCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJy0nO1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbCAqIDEwMCkgLyAxMDA7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmFsZXJ0cyhhcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChhcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYXBzICogMTAwKSAvIDEwMCArICcgYWxlcnRzL3MnO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZpbnQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZmbG9hdCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciB4ID0gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCkgLyAxMDAuO1xuICAgICAgICAgICAgICAgIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZwZXJjZW50KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwICsgXCIgJVwiO1xuICAgICAgICB9XG5cbiAgICBzdGF0aWMgcGVyY2VudGFnZSh2YWx1ZSwgdG90YWwpIHtcbiAgICAgICAgaWYodG90YWwgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcGN0ZyA9IE1hdGgucm91bmQoKHZhbHVlICogMTAwMDApIC8gdG90YWwpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHBjdGcgPiAwKSB7XG4gICAgICAgICAgICAgICAgLyogVHdvIGRlY2ltYWxzICovXG4gICAgICAgICAgICAgICAgcmV0dXJuKFwiIFsgXCIgKyAocGN0Zy8xMDApICsgXCIgJSBdIFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4oXCJcIikgXG4gICAgfVxuXG4gICAgICAgIHN0YXRpYyBmZGF0ZSh3aGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVwb2NoID0gd2hlbiAqIDEwMDA7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShlcG9jaCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNhcGl0YWxpc2VGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldF90cmVuZChhY3R1YWwsIGJlZm9yZSkge1xuICAgICAgICAgICAgICAgIGlmICgoYWN0dWFsID09PSB1bmRlZmluZWQpIHx8IChiZWZvcmUgPT09IHVuZGVmaW5lZCkgfHwgKGFjdHVhbCA9PSBiZWZvcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1taW51c1xcXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdHVhbCA+IGJlZm9yZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LWRvd25cXFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGFiYnJldmlhdGVTdHJpbmcoc3RyLCBsZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoIDwgbGVuKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBsZW4pICsgXCIuLi5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyB0b0ZpeGVkMihudW0pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW51bSkgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bS50b0ZpeGVkKDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBieXRlcyB0byBodW1hbiByZWFkYWJsZSBmb3JtYXRcbiAgICAgICAgc3RhdGljIGJ5dGVzVG9TaXplKGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoYnl0ZXMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByZWNpc2lvbiA9IDI7XG4gICAgICAgICAgICAgICAgdmFyIGtpbG9ieXRlID0gMTAyNDtcbiAgICAgICAgICAgICAgICB2YXIgbWVnYWJ5dGUgPSBraWxvYnl0ZSAqIDEwMjQ7XG4gICAgICAgICAgICAgICAgdmFyIGdpZ2FieXRlID0gbWVnYWJ5dGUgKiAxMDI0O1xuICAgICAgICAgICAgICAgIHZhciB0ZXJhYnl0ZSA9IGdpZ2FieXRlICogMTAyNDtcblxuICAgICAgICAgICAgICAgIGlmICgoYnl0ZXMgPj0gMCkgJiYgKGJ5dGVzIDwga2lsb2J5dGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnl0ZXMgIT0gMCkgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChieXRlcy50b0ZpeGVkKHByZWNpc2lvbikpICsgXCIgQnl0ZXNcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYnl0ZXMpICsgXCIgQnl0ZXNcIjtcbiAgXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGJ5dGVzID49IGtpbG9ieXRlKSAmJiAoYnl0ZXMgPCBtZWdhYnl0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBraWxvYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgS0InO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChieXRlcyA+PSBtZWdhYnl0ZSkgJiYgKGJ5dGVzIDwgZ2lnYWJ5dGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gbWVnYWJ5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIE1CJztcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYnl0ZXMgPj0gZ2lnYWJ5dGUpICYmIChieXRlcyA8IHRlcmFieXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIGdpZ2FieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBHQic7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnl0ZXMgPj0gdGVyYWJ5dGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyB0ZXJhYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgVEInO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGJ5dGVzLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIEJ5dGVzJztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBkcmF3VHJlbmQoY3VycmVudCwgbGFzdCwgd2l0aENvbG9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtbWludXNcXFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50ID4gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctdXBcXFwiXCIgKyB3aXRoQ29sb3IgKyBcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy1kb3duXFxcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyB0b2dnbGVBbGxUYWJzKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaGlzdG9yaWNhbC10YWJzLWNvbnRhaW5lclwiKS5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKS5maW5kKFwiYVwiKS5hdHRyKFwiZGF0YS10b2dnbGVcIiwgXCJ0YWJcIik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNoaXN0b3JpY2FsLXRhYnMtY29udGFpbmVyXCIpLmZpbmQoXCJsaVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLmZpbmQoXCJhXCIpLnJlbW92ZUF0dHIoXCJkYXRhLXRvZ2dsZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBkaXNhYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcbiAgICAgICAgICAgICAgICAkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgTnRvcFV0aWxzLnRvZ2dsZUFsbFRhYnMoZmFsc2UpXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZW5hYmxlQWxsRHJvcGRvd25zQW5kVGFicygpIHtcbiAgICAgICAgICAgICAgICAkKFwic2VsZWN0XCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE50b3BVdGlscy50b2dnbGVBbGxUYWJzKHRydWUpXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgY2FwaXRhbGl6ZShzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMgJiYgc1swXS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBhZGRDb21tYXMoblN0cikge1xuICAgICAgICAgICAgICAgIG5TdHIgKz0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBuU3RyLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgdmFyIHgxID0geFswXTtcbiAgICAgICAgICAgICAgICB2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XG4gICAgICAgICAgICAgICAgdmFyIHJneCA9IC8oXFxkKykoXFxkezN9KS87XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJneC50ZXN0KHgxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geDEgKyB4MjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBzY2FsZVZhbHVlKHZhbCwgc2l6ZXMsIHNjYWxlLCBkZWNpbWFscykge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gMCkgcmV0dXJuIFswLCBzaXplc1swXV07XG4gICAgICAgICAgICAgICAgbGV0IGZhY3RvciA9IGRlY2ltYWxzID8gKDEwICogZGVjaW1hbHMpIDogMTA7XG5cbiAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKHNjYWxlKSkpO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgMCB8fCBpc05hTihpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID49IHNpemVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHNpemVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtNYXRoLnJvdW5kKCh2YWwgLyBNYXRoLnBvdyhzY2FsZSwgaSkpICogZmFjdG9yKSAvIGZhY3Rvciwgc2l6ZXNbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZvcm1hdFZhbHVlKHZhbCwgZGVjaW1hbHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJycsICdLJywgJ00nLCAnRycsICdUJ107XG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgodmFsID4gMCkgJiYgKHZhbCA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpO1xuICAgICAgICAgICAgICAgIGlmIChkZWNpbWFscyA9PSB1bmRlZmluZWQpIGRlY2ltYWxzID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUodmFsLCBzaXplcywgMTAwMCwgZGVjaW1hbHMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1swXSArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmb3JtYXRQYWNrZXRzKG4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKE50b3BVdGlscy5hZGRDb21tYXMobi50b0ZpeGVkKDApKSArIFwiIFBrdHNcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgYnl0ZXNUb1ZvbHVtZShieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXMgPT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcbiAgICAgICAgICAgICAgICBpZiAoKGJ5dGVzID4gMCkgJiYgKGJ5dGVzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArIFwiIEJ5dGVzXCIpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShieXRlcywgc2l6ZXMsIDEwMjQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocmVzWzBdKSArIFwiIFwiICsgcmVzWzFdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHN0YXRpYyBieXRlc1RvVm9sdW1lQW5kTGFiZWwoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ107XG4gICAgICAgICAgICAgICAgaWYgKGJ5dGVzID09IDApIHJldHVybiAnMCBCeXRlcyc7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKDEwMjQpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsoYnl0ZXMgLyBNYXRoLnBvdygxMDI0LCBpKSkudG9GaXhlZCgyKSwgc2l6ZXNbaV1dO1xuICAgICAgICB9O1xuXG4gICAgICAgIHN0YXRpYyBiaXRzVG9TaXplKGJpdHMsIGZhY3Rvcikge1xuICAgICAgICAgICAgICAgIGZhY3RvciA9IGZhY3RvciB8fCAxMDAwO1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnYnBzJywgJ0ticHMnLCAnTWJwcycsICdHYnBzJywgJ1RicHMnXTtcbiAgICAgICAgICAgICAgICBpZiAoYml0cyA9PSAwKSByZXR1cm4gJzAgYnBzJztcbiAgICAgICAgICAgICAgICBpZiAoKGJpdHMgPiAwKSAmJiAoYml0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyBcIiBicHNcIik7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGJpdHMsIHNpemVzLCBmYWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1swXS50b0ZpeGVkKDIpICsgXCIgXCIgKyByZXNbMV07XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGljIGJpdHNUb1NpemVfbm9fY29tbWEoYml0cywgZmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yID0gZmFjdG9yIHx8IDEwMDA7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydicHMnLCAnS2JwcycsICdNYnBzJywgJ0dicHMnLCAnVGJwcyddO1xuICAgICAgICAgICAgICAgIGlmIChiaXRzID09IDApIHJldHVybiAnMCBicHMnO1xuICAgICAgICAgICAgICAgIGlmICgoYml0cyA+IDApICYmIChiaXRzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArIFwiIGJwc1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoYml0cywgc2l6ZXMsIGZhY3Rvcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzWzBdKyBcIiBcIiArIHJlc1sxXTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0aWMgc2Vjb25kc1RvVGltZShzZWNvbmRzKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kcyA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8IDEgc2VjXCIpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGRheXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA4NjQwMClcbiAgICAgICAgICAgICAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKChzZWNvbmRzIC8gMzYwMCkgLSAoZGF5cyAqIDI0KSlcbiAgICAgICAgICAgICAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoKHNlY29uZHMgLyA2MCkgLSAoZGF5cyAqIDE0NDApIC0gKGhvdXJzICogNjApKVxuICAgICAgICAgICAgICAgIGxldCBzZWMgPSBzZWNvbmRzICUgNjBcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gXCJcIiwgbXNnX2FycmF5ID0gW11cblxuICAgICAgICAgICAgICAgIGlmIChkYXlzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHllYXJzID0gTWF0aC5mbG9vcihkYXlzIC8gMzY1KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhcnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheXMgPSBkYXlzICUgMzY1XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0geWVhcnMgKyBcIiB5ZWFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJzID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZyArPSBcInNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnX2FycmF5LnB1c2gobXNnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBkYXlzICsgXCIgZGF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlzID4gMSkgeyBtc2cgKz0gXCJzXCIgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnX2FycmF5LnB1c2gobXNnKVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gXCJcIlxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChob3VycyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3VycyA8IDEwKSB7IG1zZyA9IFwiMFwiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyArPSBob3VycyArIFwiOlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtaW51dGVzIDwgMTApIHsgbXNnICs9IFwiMFwiIH1cbiAgICAgICAgICAgICAgICBtc2cgKz0gbWludXRlcyArIFwiOlwiO1xuICAgICAgICAgICAgICAgIGlmIChzZWMgPCAxMCkgeyBtc2cgKz0gXCIwXCIgfVxuICAgICAgICAgICAgICAgIG1zZyArPSBzZWM7XG4gICAgICAgICAgICAgICAgbXNnX2FycmF5LnB1c2gobXNnKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zZ19hcnJheS5qb2luKFwiLCBcIilcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBtc2VjVG9UaW1lKG1zZWMpIHtcbiAgICAgICAgICAgICAgICBpZiAobXNlYyA+PSAxMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUobXNlYy8xMDAwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBNYXRoLnJvdW5kKG1zZWMgKiAxMDAwKSAvIDEwMDAuO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIixcIikgKyBcIiBtc1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBlcG9jaDJTZWVuKGVwb2NoKSB7XG4gICAgICAgICAgICAgICAgLyogMDgvMDEvMTMgMTU6MTI6MzcgWzE4IG1pbiwgMTMgc2VjIGFnb10gKi9cbiAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGVwb2NoICogMTAwMCk7XG4gICAgICAgICAgICAgICAgdmFyIHRkaWZmID0gTWF0aC5mbG9vcigoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApIC0gZXBvY2gpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkLmZvcm1hdChcImRkL01NL3l5eXkgaGg6bW06c3NcIikgKyBcIiBbXCIgKyBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZSh0ZGlmZikgKyBcIiBhZ29dXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogdGlja3MgZm9yIGdyYXBoIHggYXhpcyAqL1xuICAgICAgICBzdGF0aWMgZ3JhcGhHZXRYQXhpc1RpY2tzRm9ybWF0KGRpZmZfZXBvY2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGlja0Zvcm1hdDtcblxuICAgICAgICAgICAgICAgIGlmIChkaWZmX2Vwb2NoIDw9IDg2NDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrRm9ybWF0ID0gXCIlSDolTTolU1wiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlmZl9lcG9jaCA8PSAyICogODY0MDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tGb3JtYXQgPSBcIiViICVlLCAlSDolTTolU1wiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrRm9ybWF0ID0gXCIlYiAlZVwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAodGlja0Zvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgcGFyYW1zRXh0ZW5kKGRlZmF1bHRzLCBvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG92ZXJyaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBwYXJhbXNUb0Zvcm0oZm9ybSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgZm9ybSA9ICQoZm9ybSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAkKCc8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCInICsgayArICdcIiB2YWx1ZT1cIicgKyBwYXJhbXNba10gKyAnXCI+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZFRvKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtO1xuICAgICAgICB9XG5cbiAgICAgICAgLypcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgamF2YXNjcmlwdCBvYmplY3Qgd2hlcmUgZWFjaCBrLT52IHBhaXIgb2YgdGhlIGlucHV0IG9iamVjdFxuICAgICAgICAgKiB0cmFuc2xhdGVzIGludG8gdHdvIHBhaXJzIGluIHRoZSBvdXRwdXQgb2JqZWN0OiBhIGtleV9baV0tPmsgYW5kIGEgdmFsX1tpXS0+diwgd2hlcmVcbiAgICAgICAgICogaSBpcyBhbiBpbmNyZW1lbnRhbCBpbmRleC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIG91dHB1dCBvYmplY3QgY2FuIHRoZW4gYmUgc2VyaWFsaXplZCB0byBhbiBVUkwuIFRoaXMgY29udmVyc2lvbiBpcyByZXF1aXJlZCBmb3JcbiAgICAgICAgICogaGFuZGxpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzOiBzaW5jZSBudG9wbmcgc3RyaXBzIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBfR0VUIGtleXMsXG4gICAgICAgICAqIF9HRVQgdmFsdWVzIG11c3QgYmUgdXNlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBwZXJmb3JtcyB0aGUgaW52ZXJzZSBjb252ZXJzaW9uIG9mIGx1YSBwYXJhbXNQYWlyc0RlY29kZS5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBwYXJhbXNQYWlyc0VuY29kZShwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tcImtleV9cIiArIGldID0gaztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1tcInZhbF9cIiArIGldID0gcGFyYW1zW2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaG9zdGtleTJob3N0SW5mbyhob3N0X2tleSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmZvO1xuXG4gICAgICAgICAgICAgICAgaG9zdF9rZXkgPSBob3N0X2tleS5yZXBsYWNlKC9fX19fL2csIFwiOlwiKTtcbiAgICAgICAgICAgICAgICBob3N0X2tleSA9IGhvc3Rfa2V5LnJlcGxhY2UoL19fXy9nLCBcIi9cIik7XG4gICAgICAgICAgICAgICAgaG9zdF9rZXkgPSBob3N0X2tleS5yZXBsYWNlKC9fXy9nLCBcIi5cIik7XG5cbiAgICAgICAgICAgICAgICBpbmZvID0gaG9zdF9rZXkuc3BsaXQoXCJAXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoaW5mbyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaGFuZGxlX3RhYl9zdGF0ZShuYXZfb2JqZWN0LCBkZWZhdWx0X3RhYikge1xuICAgICAgICAgICAgICAgICQoJ2EnLCBuYXZfb2JqZWN0KS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWIgaW4gdGhlIGhhc2ggdmFsdWVcbiAgICAgICAgICAgICAgICAkKFwiID4gbGkgPiBhXCIsIG5hdl9vYmplY3QpLm9uKFwic2hvd24uYnMudGFiXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSAkKGUudGFyZ2V0KS5hdHRyKFwiaHJlZlwiKS5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHByZXZlbnQgdGhlICdqdW1wJyB0byB0aGUgaGFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBcIiNcIiArIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBvbiBsb2FkIG9mIHRoZSBwYWdlOiBzd2l0Y2ggdG8gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWJcbiAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAgICAgICAgIGlmICghaGFzaCkgaGFzaCA9IFwiI1wiICsgZGVmYXVsdF90YWI7XG4gICAgICAgICAgICAgICAgJCgnYVtocmVmPVwiJyArIGhhc2ggKyAnXCJdJywgbmF2X29iamVjdCkudGFiKCdzaG93Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBuYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgJCgnPGlucHV0PicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICB9KS5hcHBlbmRUbyhmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFVzZWQgd2hpbGUgc2VhcmNoaW5nIGhvc3RzIGEgYW5kIG1hY3Mgd2l0aCB0eXBlYWhlYWQgKi9cbiAgICAgICAgc3RhdGljIG1ha2VGaW5kSG9zdEJlZm9yZVN1Ym1pdENhbGxiYWNrKGh0dHBfcHJlZml4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmb3JtLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb250ZXh0ICYmIGRhdGEuY29udGV4dCA9PSBcImhpc3RvcmljYWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvL2RiX3NlYXJjaC5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT0gXCJpcFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJpcFwiLCBkYXRhLmlwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJtYWNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibWFjXCIsIGRhdGEubWFjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJjb21tdW5pdHlfaWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiY29tbXVuaXR5X2lkXCIsIGRhdGEuY29tbXVuaXR5X2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJqYTNfY2xpZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcImphM19jbGllbnRcIiwgZGF0YS5qYTNfY2xpZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJqYTNfc2VydmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcImphM19zZXJ2ZXJcIiwgZGF0YS5qYTNfc2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIFwiaG9zdG5hbWVcIiAqLyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJuYW1lXCIsIGRhdGEuaG9zdG5hbWUgPyBkYXRhLmhvc3RuYW1lIDogZGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PSBcIm1hY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL21hY19kZXRhaWxzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJuZXR3b3JrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdHNfc3RhdHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibmV0d29ya1wiLCBkYXRhLm5ldHdvcmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcInNubXBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcInNubXBfcG9ydF9pZHhcIiwgZGF0YS5zbm1wX3BvcnRfaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJzbm1wX2RldmljZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byby9lbnRlcnByaXNlL3NubXBfZGV2aWNlX2RldGFpbHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSBcImFzblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RzX3N0YXRzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcImFzblwiLCBkYXRhLmFzbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RfZGV0YWlscy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJtb2RlXCIsIFwicmVzdG9yZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdHN0YW1wVG9EYXRlU3RyaW5nKGh0bWxfdGFnLCBmb3JtYXQsIHRkaWZmKSB7XG4gICAgICAgICAgICAgICAgdGRpZmYgPSB0ZGlmZiB8fCAwO1xuICAgICAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBwYXJzZUludChodG1sX3RhZy5odG1sKCkpICsgdGRpZmY7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsaXplZCA9IGQzLnRpbWUuZm9ybWF0KGZvcm1hdCkobmV3IERhdGUodGltZXN0YW1wICogMTAwMCkpO1xuICAgICAgICAgICAgICAgIGh0bWxfdGFnLmh0bWwobG9jYWxpemVkKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxpemVkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIG5vSHRtbChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvPFtePl0rPi9nLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgY2xlYW5DdXN0b21Ib3N0VXJsKGhvc3QpIHtcbiAgICAgICAgICAgICAgICAvKiBSZW1vdmUgc3RhcnRpbmcgaHR0cChzKS4gKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gaG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL15odHRwOlxcL1xcLy9naSwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXmh0dHBzOlxcL1xcLy9naSwgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBSZW1vdmUgc3RhcnRpbmcgd3d3LiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL153d3dcXC4vZ2ksICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVtb3ZlIG5vbi1hbGxvd2VkIGNoYXJhY3RlcnMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXjAtOWEtekEtWlxcLjpcXC9fLV0vZ2ksICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIwOTA1NTEvcGFyc2UtcXVlcnktc3RyaW5nLWluLWphdmFzY3JpcHQgKi9cbiAgICAgICAgc3RhdGljIHBhcnNlUXVlcnkocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgcGFpcnMgPSAocXVlcnlTdHJpbmdbMF0gPT09ICc/JyA/IHF1ZXJ5U3RyaW5nLnN1YnN0cigxKSA6IHF1ZXJ5U3RyaW5nKS5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSB8fCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRIaXN0b3J5UGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VyX3BhcmFtcyA9IE50b3BVdGlscy5wYXJzZVF1ZXJ5KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAgICAgICAgIHZhciBuZXdfcGFyYW1zID0gJC5leHRlbmQoY3VyX3BhcmFtcywgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X3F1ZXJ5ID0gXCI/XCIgKyAkLnBhcmFtKG5ld19wYXJhbXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBiYXNlVXJsID0gW2xvY2F0aW9uLnByb3RvY29sLCAnLy8nLCBsb2NhdGlvbi5ob3N0LCBsb2NhdGlvbi5wYXRobmFtZV0uam9pbignJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZVVybCArIG5ld19xdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiB0cnVlIGlmIHRoZSBzdGF0dXMgY29kZSBpcyBkaWZmZXJlbnQgZnJvbSAyMDBcbiAgICAgICAgc3RhdGljIGNoZWNrX3N0YXR1c19jb2RlKHN0YXR1c19jb2RlLCBzdGF0dXNfdGV4dCwgJGVycm9yX2xhYmVsKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc19kaWZmZXJlbnQgPSBzdGF0dXNfY29kZSAhPSAyMDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNfZGlmZmVyZW50ICYmICRlcnJvcl9sYWJlbCAhPSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gaTE4bl9leHQucmVxdWVzdF9mYWlsZWRfbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNfY29kZSAmJiBzdGF0dXNfdGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGA6ICR7c3RhdHVzX2NvZGV9IC0gJHtzdGF0dXNfdGV4dH1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAkZXJyb3JfbGFiZWwudGV4dChtZXNzYWdlKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzX2RpZmZlcmVudCAmJiAkZXJyb3JfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoYCR7aTE4bl9leHQucmVxdWVzdF9mYWlsZWRfbWVzc2FnZX06ICR7c3RhdHVzX2NvZGV9IC0gJHtzdGF0dXNfdGV4dH1gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNfZGlmZmVyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGh0dHBkb2NzL3RlbXBsYXRlcy9jb25maWdfbGlzdF9jb21wb25lbnRzL2ltcG9ydF9tb2RhbC5odG1sXG4gICAgICAgIHN0YXRpYyBpbXBvcnRNb2RhbEhlbHBlcihwYXJhbXMpIHtcblxuICAgICAgICAgICAgICAgIGlmICghcGFyYW1zLmxvYWRDb25maWdYSFIpIHsgdGhyb3cgKFwiaW1wb3J0TW9kYWxIZWxwZXI6OiBNaXNzaW5nICdsb2FkQ29uZmlnWEhSJyBwYXJhbVwiKTsgfVxuXG4gICAgICAgICAgICAgICAgJChgaW5wdXQjaW1wb3J0LWlucHV0YCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoYCNidG4tY29uZmlybS1pbXBvcnRgKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKGAjaW1wb3J0LW1vZGFsYCkub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoYCNpbXBvcnQtaW5wdXRgKS52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtZXJyb3JcIikuaGlkZSgpLnJlbW92ZUNsYXNzKCd0ZXh0LXdhcm5pbmcnKS5hZGRDbGFzcygnaW52YWxpZC1mZWVkYmFjaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChgI2J0bi1jb25maXJtLWltcG9ydGApLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtbW9kYWxcIikub24oXCJzdWJtaXRcIiwgXCJmb3JtXCIsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgJGJ1dHRvbiA9ICQoJyNidG4tY29uZmlybS1pbXBvcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRidXR0b24uYXR0cihcImRpc2FibGVkXCIsIFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWFkIGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9ICQoJyNpbXBvcnQtaW5wdXQnKVswXS5maWxlc1swXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQoYCR7aTE4bl9leHQubm9fZmlsZX1gKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlLCBcIlVURi04XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGllbnQtc2lkZSBjb25maWd1cmF0aW9uIGZpbGUgZm9ybWF0IGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uQ29uZmlndXJhdGlvbiA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsganNvbkNvbmZpZ3VyYXRpb24gPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpOyB9IGNhdGNoIChlKSB7IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWpzb25Db25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChpMThuX2V4dC5yZXN0X2NvbnN0c1tyZXNwb25zZUpTT04ucmNfc3RyXSB8fCAnTm90IEltcGxlbWVudGVkIFlldCcpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJtaXQgY29uZmlndXJhdGlvbiBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5sb2FkQ29uZmlnWEhSKHJlYWRlci5yZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRvbmUoKHJlc3BvbnNlLCBzdGF0dXMsIHhocikgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQocmVzcG9uc2UucmNfc3RyKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bCBjYWxsIHRoZSBzdWNjZXNzQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5zdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSAkKGBpbnB1dFtuYW1lPSdjb25maWd1cmF0aW9uJ106Y2hlY2tlZGApLnZhbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gKGtleSA9PSAnYWxsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpMThuKFwibWFuYWdlX2NvbmZpZ3VyYXRpb25zLm1lc3NhZ2VzLmltcG9ydF9hbGxfc3VjY2Vzc1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGkxOG4oXCJtYW5hZ2VfY29uZmlndXJhdGlvbnMubWVzc2FnZXMuaW1wb3J0X3N1Y2Nlc3NcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNob3cgYSBzdWNjZXNzIGFsZXJ0IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvYXN0VXRpbHMuc2hvd1RvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdpbXBvcnQtY29uZmlndXJhdGlvbi1hbGVydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuKFwic3VjY2Vzc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1tb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmFpbCgoeyByZXNwb25zZUpTT04gfSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBQQVJUSUFMX0lNUE9SVF9SQyA9IC0yODtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5mYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZhaWx1cmVDYWxsYmFjayhyZXNwb25zZUpTT04pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VKU09OICYmIHJlc3BvbnNlSlNPTi5yYyA+IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUpTT04ucmMgPT0gUEFSVElBTF9JTVBPUlRfUkMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYCNpbXBvcnQtZXJyb3JgKS5yZW1vdmVDbGFzcygnaW52YWxpZC1mZWVkYmFjaycpLmFkZENsYXNzKCd0ZXh0LXdhcm5pbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtZXJyb3JcIikudGV4dChpMThuX2V4dC5yZXN0X2NvbnN0c1tyZXNwb25zZUpTT04ucmNfc3RyXSB8fCBpMThuX2V4dC5GQUlMRURfSFRUUF9SRVFVRVNUKS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbHdheXMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHNlcmlhbGl6ZUZvcm1BcnJheShzZXJpYWxpemVkQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkID0ge307XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZEFycmF5LmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogaWYgdGhlIG9iamVjdCBpcyBhbiBhcnJheSAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoubmFtZS5pbmNsdWRlcygnW10nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB0aGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqLnZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnZhbHVlID0gb2JqLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkW29iai5uYW1lXSA9IG9iai52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjbGVhbkZvcm0oZm9ybVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgLyogcmVtb3ZlIHZhbGlkYXRpb24gZmllbGRzIGFuZCB0cmFja3MgKi9cbiAgICAgICAgICAgICAgICAkKGZvcm1TZWxlY3RvcikuZmluZCgnaW5wdXQsc2VsZWN0LHRleHRhcmVhJykuZWFjaChmdW5jdGlvbiAoaSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoYGlzLXZhbGlkYCkucmVtb3ZlQ2xhc3MoYGlzLWludmFsaWRgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgICAgICAgICAgICAgICQoZm9ybVNlbGVjdG9yKVswXS5yZXNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2UgYSBmZXRjaCBjYWxsIHdpdGggYSB0aW1lb3V0IG9wdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGZldGNoV2l0aFRpbWVvdXQodXJpLCBvcHRpb25zID0ge30sIHRpbWUgPSA1MDAwKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0geyAuLi5vcHRpb25zLCBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh1cmksIGNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVzcG9uc2UgdGltZWQgb3V0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBzZXRQcmVmKGFjdGlvbiwgY3NyZiwgc3VjY2VzcywgZmFpbHVyZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkFuIGFjdGlvbiBrZXkgbXVzdCBiZSBkZWZpbmVkIHRvIHNldCBhIHByZWZlcmVuY2UhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5ID0gKCkgPT4geyB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSAkLnBvc3QoYCR7aHR0cF9wcmVmaXh9L2x1YS91cGRhdGVfcHJlZnMubHVhYCwgeyBhY3Rpb246IGFjdGlvbiwgY3NyZjogY3NyZiB9KTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmRvbmUoc3VjY2VzcyB8fCBlbXB0eSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5mYWlsKGZhaWx1cmUgfHwgZW1wdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsdWUgc3RyaW5ncyBjb250YWluZWQgaW4gYXJyYXkgc2VwYXJhdGVkIGJ5IGEgY29tbWEuXG4gICAgICAgICAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBzdHJpbmdzLiBJLmUuIFtcIkhlbGxvXCIsIFwiV29ybGRcIl1cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IEhvdyBtYW55IHdvcmRzIHRoZSBzdHJpbmcgY29udGFpbnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyBidWlsdCBieSBhcnJheSdzIGVsZW1lbnRzLiBpLmU6IFwiSGVsbG8sIFdvcmxkXCJcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhcnJheVRvTGlzdFN0cmluZyhhcnJheSwgbGltaXQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChhcnJheSA9PSB1bmRlZmluZWQpIHJldHVybiBcIlwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCA+IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgbGltaXQpLmpvaW4oXCIsIFwiKSArIGAgJHtpMThuX2V4dC5hbmRfeF9tb3JlLnJlcGxhY2UoJyRudW0nLCBhcnJheS5sZW5ndGggLSBsaW1pdCl9YDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoMCwgbGltaXQpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBidWlsZFVSTChsb2NhdGlvbiwgcGFyYW1zID0ge30sIGhhc1JlZmVyZXIgPSBmYWxzZSwgcmVmZXJlclBhcmFtcyA9IHt9KSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLCB3aW5kb3cubG9jYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoYXNSZWZlcmVyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZlVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJlZmVyZXJQYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZVcmwuc2VhcmNoUGFyYW1zLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdyZWZlcmVyJywgcmVmVXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRFZGl0UG9vbExpbmsoaHJlZiwgcG9vbElkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChocmVmLCB3aW5kb3cubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdwb29sX2lkJywgcG9vbElkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0UG9vbExpbmsocG9vbFR5cGUsIHBvb2xJZCA9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC8ke3Bvb2xUeXBlfS9wb29scy5sdWE/cG9vbD0ke3Bvb2xJZH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGFzeW5jIGdldFBvb2wocG9vbFR5cGUsIGlkID0gMCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvb2xUeXBlID09PSBudWxsKSB0aHJvdyAnQSBwb29sIHR5cGUgbXVzdCBiZSBkZWZpbmVkISc7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2goTnRvcFV0aWxzLmdldFBvb2xMaW5rKHBvb2xUeXBlLCBpZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9vbCA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9vbC5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwge31dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIHBvb2wucnNwWzBdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwge31dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYXZlIHRoZSBzY2FsZSBvZiBlbGVtZW50IGluc2lkZSB0aGUgbG9jYWwgc3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gJGVsZW1lbnQgXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzY2FsZVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIHNhdmVFbGVtZW50U2NhbGUoJGVsZW1lbnQsIHNjYWxlID0ge3dpZHRoOiAwLCBoZWlnaHQ6IDB9KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gTnRvcFV0aWxzLmdlbmVyYXRlU2NhbGVFbGVtZW50S2V5KCRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHNjYWxlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2VuZXJhdGVTY2FsZUVsZW1lbnRLZXkoJGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgaWRlbnRpZmljYXRvcjtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudElkID0gJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50SWQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpY2F0b3IgPSBlbGVtZW50SWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gJGVsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpY2F0b3IgPSBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYCR7aWRlbnRpZmljYXRvcn0tJHtwYWdlfS1zY2FsZWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkIHRoZSBvbGQgc2NhbGUgdmFsdWUgb2Z4IGVsZW1lbnQgZnJvbSB0aGUgbG9jYWwgc3RvcmFnZVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gJGVsZW1lbnQgXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgbG9hZEVsZW1lbnRTY2FsZSgkZWxlbWVudCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gTnRvcFV0aWxzLmdlbmVyYXRlU2NhbGVFbGVtZW50S2V5KCRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmlsbEZpZWxkSWZWYWxpZCgkZmllbGQsIHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGZpZWxkLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGZpZWxkLnZhbCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgY29weVRvQ2xpcGJvYXJkKHRleHQsIGl0ZW0pIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgZWwudmFsdWUgPSB0ZXh0O1xuICAgIGVsLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgZWwuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGVsLnN0eWxlLmxlZnQgPSAnLTk5OTlweCc7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gICAgZWwuc2VsZWN0KCk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAkKGl0ZW0pLmF0dHIoXCJ0aXRsZVwiLCBcIkNvcGllZCFcIikudG9vbHRpcChcImRpc3Bvc2VcIikudG9vbHRpcCgpLnRvb2x0aXAoXCJzaG93XCIpO1xuICAgICQoaXRlbSkucmVtb3ZlQXR0cihcImRhdGEtYnMtb3JpZ2luYWwtdGl0bGVcIilcbiAgICAkKGl0ZW0pLmF0dHIoXCJ0aXRsZVwiLCB0ZXh0KVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHN0cmlwVGFncyhodG1sKSB7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdC50ZXh0Q29udGVudCB8fCB0LmlubmVyVGV4dCB8fCBcIlwiO1xuICAgICAgICB9XG5cbiAgc3RhdGljIHNob3J0ZW5MYWJlbChsYWJlbCwgbGVuLCBsYXN0X2NoYXIpIHtcbiAgICBsZXQgc2hvcnRlbmVkX2xhYmVsID0gbGFiZWxcbiAgICBpZihsYWJlbC5sZW5ndGggPiBsZW4gKyA1KSB7XG4gICAgICBpZihsYXN0X2NoYXIpIHtcbiAgICAgICAgbGV0IGxhc3RfaW5kZXggPSBsYWJlbC5sYXN0SW5kZXhPZihsYXN0X2NoYXIpXG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZF9sYWJlbCA9IGxhYmVsLnNsaWNlKGxhc3RfaW5kZXgpXG4gICAgICAgIGlmKGxlbiA+IGxhc3RfaW5kZXgpIFxuICAgICAgICAgIGxlbiA9IGxhc3RfaW5kZXhcbiAgICAgICAgc2hvcnRlbmVkX2xhYmVsID0gbGFiZWwuc2xpY2UoMCwgbGVuKSArIFwiLi4uIFwiICsgcmVxdWVzdGVkX2xhYmVsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaG9ydGVuZWRfbGFiZWwgPSBsYWJlbC5zbGljZSgwLCBsZW4pICsgXCIuLi5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hvcnRlbmVkX2xhYmVsXG4gIH1cbiAgICAgICAgXG4gIHN0YXRpYyBzb3J0QWxwaGFiZXRpY2FsbHkoYSwgYikge1xuICAgIGNvbnN0IG5hbWVBID0gYS5sYWJlbD8udG9VcHBlckNhc2UoKTsgLy8gaWdub3JlIHVwcGVyIGFuZCBsb3dlcmNhc2VcbiAgICBjb25zdCBuYW1lQiA9IGIubGFiZWw/LnRvVXBwZXJDYXNlKCk7IC8vIGlnbm9yZSB1cHBlciBhbmQgbG93ZXJjYXNlXG4gICAgaWYgKG5hbWVBIDwgbmFtZUIpIHsgcmV0dXJuIC0xOyB9XG4gICAgaWYgKG5hbWVBID4gbmFtZUIpIHsgcmV0dXJuIDE7IH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qIFRoaXMgZnVuY3Rpb24sIGdpdmVuIGEgbmFtZSBhbmQgYSB2YWx1ZSwgcmV0dXJuIGEgc3RyaW5nXG4gICAqIGZvcm1hdHRlZCBpbiB0aGUgZm9sbG93aW5nIHdheTpcbiAgICogbmFtZSBbdmFsdWVdXG4gICAgICAgICogSWYgbWF4X25hbWVfbGVuIGlzIGRpZmZlcmVudCBmcm9tIDAsIHRoZW4gaXQncyBnb2luZyB0byBjdXQgdGhlIG5hbWUgc3RyaW5nXG4gICAgICAgICogdG8gbWF4X25hbWVfbGVuXG4gICAqL1xuICBzdGF0aWMgZm9ybWF0TmFtZVZhbHVlKG5hbWUsIHZhbHVlLCBtYXhfbmFtZV9sZW4pIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSBuYW1lO1xuICAgICAgICAgICAgICAgIGlmKG5hbWUgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1heF9uYW1lX2xlbiAmJiB0eXBlb2YobWF4X25hbWVfbGVuKSA9PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLnNob3J0ZW5MYWJlbChsYWJlbCwgbWF4X25hbWVfbGVuLCAnLicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGAke2xhYmVsfSBbJHt2YWx1ZX1dYCBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsXG4gIH1cblxuICAvKiBUaGlzIGZ1bmN0aW9uLCByZW1vdmUgZnJvbSBhIHN0cmluZyB0aGUgVkxBTiAwXG4gICAqIG5hbWVAMCAtPiBuYW1lXG4gICAqL1xuICBzdGF0aWMgcmVtb3ZlVmxhbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gbmFtZVxuICAgICAgICAgICAgICAgIGNvbnN0IHZsYW5faW5kZXggPSBsYWJlbC5sYXN0SW5kZXhPZignQCcpO1xuICAgICAgICAgICAgICAgIGlmKHZsYW5faW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZsYW4gPSAgbGFiZWwuc2xpY2Uodmxhbl9pbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmxhbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gbGFiZWwuc2xpY2UoMCwgdmxhbl9pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsXG4gIH1cblxuICAvKiBGb3JtYXQgYW4gb2JqZWN0IHdpdGggbGFiZWwgYW5kIHZhbHVlIGZyb20gYSBjb2x1bW4gcm93ICovXG4gIHN0YXRpYyBmb3JtYXRHZW5lcmljT2JqKG9iaiwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gb2JqLmxhYmVsID8gb2JqLmxhYmVsIDogb2JqLnZhbHVlO1xuICAgIGxldCBrZXkgPSBvYmoudmFsdWU7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgLyogRm9ybWF0IGEgY291bnRyeSBmcm9tIGEgY29sdW1uIG9iamVjdCAqL1xuICBzdGF0aWMgZm9ybWF0Q291bnRyeShvYmosIHJvdykge1xuICAgIGxldCBjb3VudHJ5X2NvZGUgPSBvYmoudmFsdWU7XG4gICAgbGV0IGxhYmVsID0gb2JqLmxhYmVsID8gb2JqLmxhYmVsIDogb2JqLnZhbHVlO1xuICAgIHJldHVybiBgJHtsYWJlbH0gPGltZyBzcmM9XCIvZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJHtjb3VudHJ5X2NvZGUudG9Mb3dlckNhc2UoKX1cIj5gO1xuICB9XG5cbiAgLyogRm9ybWF0IGFuIGhvc3QgZnJvbSBhIGNvbHVtbiBvYmplY3QgKi9cbiAgc3RhdGljIGZvcm1hdEhvc3Qob2JqLCByb3csIGlzX2NsaWVudCkge1xuICAgIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH1cblxuICAgIC8qIExpbmsgKi9cbiAgICBsZXQgaG9zdF9rZXkgPSBvYmouaXA7XG4gICAgaWYgKHJvdy52bGFuX2lkICYmIHJvdy52bGFuX2lkLnZhbHVlKVxuICAgICAgaG9zdF9rZXkgPSBob3N0X2tleSArICdAJyArIHJvdy52bGFuX2lkLnZhbHVlO1xuXG4gICAgLyogTGFiZWwgKi9cbiAgICBsYWJlbCA9IG9iai5sYWJlbCA/IG9iai5sYWJlbCA6IG9iai52YWx1ZTtcbiAgICBpZiAocm93LnZsYW5faWQgJiYgcm93LnZsYW5faWQubGFiZWwpXG4gICAgICBsYWJlbCArPSBgQCR7cm93LnZsYW5faWQubGFiZWx9YDtcblxuICAgIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWFgLCB7IGhvc3Q6IGhvc3Rfa2V5fSk7XG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7bGFiZWx9PC9hPmA7XG5cbiAgICAvKiBDb3VudHJ5ICovXG4gICAgbGV0IGNvdW50cnlfb2JqID0gaXNfY2xpZW50ID8gcm93LmNsaV9jb3VudHJ5IDogcm93LnNydl9jb3VudHJ5O1xuICAgIGlmICghY291bnRyeV9vYmogJiYgcm93LmNvdW50cnkpIGNvdW50cnlfb2JqID0gcm93LmNvdW50cnk7XG4gICAgaWYgKGNvdW50cnlfb2JqICYmIGNvdW50cnlfb2JqLnZhbHVlKVxuICAgICAgbGFiZWwgKz0gYCA8aW1nIHNyYz1cIiR7aHR0cF9wcmVmaXh9L2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLSR7Y291bnRyeV9vYmoudmFsdWUudG9Mb3dlckNhc2UoKX1cIiB0aXRsZT1cIiR7Y291bnRyeV9vYmoudGl0bGV9XCI+PC9hPmA7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvKiBGb3JtYXQgYSBuZXR3b3JrIGZyb20gYSBjb2x1bW4gb2JqZWN0ICovXG4gIHN0YXRpYyBmb3JtYXROZXR3b3JrKG9iaiwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gXCJcIjtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG4gICAgLyogTGluayAqL1xuICAgIGxldCBuZXR3b3JrX2tleSA9IG9iai52YWx1ZTtcblxuICAgIC8qIExhYmVsICovXG4gICAgbGFiZWwgPSBvYmoubGFiZWwgPyBvYmoubGFiZWwgOiBvYmoudmFsdWU7XG4gICAgaWYgKHJvdy52bGFuX2lkICYmIHJvdy52bGFuX2lkLmxhYmVsKVxuICAgICAgbGFiZWwgKz0gYEAke3Jvdy52bGFuX2lkLmxhYmVsfWA7XG5cbiAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0c19zdGF0cy5sdWFgLCB7IG5ldHdvcms6IG5ldHdvcmtfa2V5fSk7XG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7bGFiZWx9PC9hPmA7XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICAvKiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGFuIGlwIHRvIGEgbnVtYmVyIGVxdWFsZSB0byB0aGUgaXAgYnV0IHdpdGhvdXQgLiBvciA6OiBpbiBjYXNlIG9mIGlwdjZcbiAgICogdGhpcyBpcyBuZWVkZWQgaW4gY2FzZSBvZiBvcmRlcmluZ1xuICAgKi9cbiAgc3RhdGljIGNvbnZlcnRJUEFkZHJlc3MoYSkge1xuICAgICAgICB2YXIgaSwgaXRlbTtcbiAgICAgICAgdmFyIG0sIG4sIHQ7XG4gICAgICAgIHZhciB4LCB4YTtcblxuICAgICAgICBpZiAoIWEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGEgPSBhLnJlcGxhY2UoLzxbXFxzXFxTXSo/Pi9nLCBcIlwiKTtcbiAgICAgICAgLy9JUHY0OlBvcnRcbiAgICAgICAgICAgICAgICB0ID0gYS5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoID09IDIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IHRbMF0uc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBhLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIG4gPSBhLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgeCA9IFwiXCI7XG4gICAgICAgIHhhID0gXCJcIjtcblxuICAgICAgICBpZiAobS5sZW5ndGggPT0gNCkge1xuICAgICAgICAgICAgICAgIC8vIElQVjRcbiAgICAgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IG1baV07XG5cbiAgICAgICAgICAgICAgICBpZihpdGVtLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IFwiMDBcIiArIGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBcIjBcIiArIGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSVBWNlxuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBuW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YSArPSBcIjpcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihpdGVtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpdGVtLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YSArPSBcIjAwMFwiICsgaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGEgKz0gXCIwMFwiICsgaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGEgKz0gXCIwXCIgKyBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4YSArPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUGFkZGluZyB0aGUgOjpcbiAgICAgICAgICAgICAgICBuID0geGEuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgIHZhciBwYWRkRG9uZSA9IDA7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBuW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoID09PSAwICYmIHBhZGREb25lID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwYWRkaW5nID0gMCA7IHBhZGRpbmcgPCAoMzItY291bnQpIDsgcGFkZGluZysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZERvbmUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHg7XG4gIH1cblxuICAvKiBGb3JtYXQgYW4gQVMgZnJvbSBhIGNvbHVtbiBvYmplY3QgKi9cbiAgc3RhdGljIGZvcm1hdEFTTihvYmosIHJvdykge1xuICAgIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH1cblxuICAgIC8qIExpbmsgKi9cbiAgICBsZXQgYXNuX2tleSA9IG9iai52YWx1ZTtcblxuICAgIC8qIExhYmVsICovXG4gICAgbGFiZWwgPSBvYmoubGFiZWwgPyBvYmoubGFiZWwgOiBvYmoudmFsdWU7XG5cbiAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0c19zdGF0cy5sdWFgLCB7IGFzbjogYXNuX2tleX0pO1xuICAgIGxhYmVsID0gYDxhIGhyZWY9XCIke3VybH1cIj4ke2xhYmVsfTwvYT5gO1xuXG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1yb3cgYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOSBwcm9ncmVzc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctd2FybmluZ1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2V9XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwiMTAwXCIgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50YWdlfSU7XCI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sXCI+ICR7cGVyY2VudGFnZX0gJTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YFxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlXzEsIHBlcmNlbnRhZ2VfMiwgbGFiZWxfMSwgbGFiZWxfMikge1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LXJvd1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIHByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhciBiZy13YXJuaW5nXCIgYXJpYS12YWx1ZW5vdz1cIiR7cGVyY2VudGFnZV8xfVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6ICR7cGVyY2VudGFnZV8xfSU7XCI+JHtsYWJlbF8xfTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctc3VjY2Vzc1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2VfMn1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAke3BlcmNlbnRhZ2VfMn0lO1wiPiR7bGFiZWxfMn08L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gXG4gIH1cblxuICAvKiBSZXR1cm4gdGhlIG51bWJlciBvZiByb3dzIGF2YWlsYWJsZSBpbiBhIHRhYmxlICovXG4gIHN0YXRpYyBnZXROdW1UYWJsZVJvd3MoKSB7XG4gICAgcmV0dXJuIFsxMCwgMjAsIDUwLCAxMDBdO1xuICB9XG5cbiAgc3RhdGljIGZvcm1hdEFwZXhDaGFydExhYmVsRnJvbVhhbmROYW1lKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICBjb25zdCBuYW1lID0gc2VyaWVbXCJuYW1lXCJdXG4gICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgIHJldHVybiAoYFxuICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke25hbWV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIGApXG4gIH1cblxuICBzdGF0aWMgYXBleENoYXJ0SnVtcFRvQWxlcnRzKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgY29uc3QgeyBzZXJpZXMgfSA9IGNvbmZpZy5jb25maWc7XG4gICAgaWYgKHNlcmllc0luZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuICAgIGNvbnN0IGJhc2VfdXJsID0gc2VyaWUuYmFzZV91cmwgfHwgc2VyaWVzWzBdWydiYXNlX3VybCddXG4gICAgY29uc3QgZGVmYXVsdF91cmwgPSBzZXJpZS5zdGFydF91cmwgfHwgc2VyaWVzWzBdWydzdGFydF91cmwnXVxuICAgIGlmIChiYXNlX3VybCAhPSBudWxsICYmIGRlZmF1bHRfdXJsICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHNlYXJjaCA9IHNlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5O1xuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke2Jhc2VfdXJsfT8ke2RlZmF1bHRfdXJsfSR7c2VhcmNofWA7XG4gICAgfVxuICB9XG5cblxuICBzdGF0aWMgYXBleENoYXJ0SnVtcFRvSG9zdERldGFpbHMoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgY29uc3QgeyBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSA9IGNvbmZpZztcbiAgICBjb25zdCB7IHNlcmllcyB9ID0gY29uZmlnLmNvbmZpZztcbiAgICBpZiAoc2VyaWVzSW5kZXggPT09IC0xKSByZXR1cm47XG4gICAgaWYgKHNlcmllcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBjb25zdCBzZXJpZSA9IHNlcmllc1tzZXJpZXNJbmRleF07XG5cbiAgICBjb25zdCBiYXNlX3VybCA9IHNlcmllLmJhc2VfdXJsIHx8IHNlcmllc1swXVsnYmFzZV91cmwnXVxuICAgIFxuICAgIGlmIChiYXNlX3VybCAhPSBudWxsICkge1xuICAgICAgY29uc3QgdXJsID0gYCR7YmFzZV91cmx9PyR7c2VyaWUuZGF0YVtkYXRhUG9pbnRJbmRleF0ubWV0YS51cmxfcXVlcnl9YDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbiAgICB9XG4gIH1cblxuICBcbiAgc3RhdGljIGZvcm1hdEFwZXhDaGFydExhYmVsRnJvbVhhbmRZKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICBcbiAgICBjb25zdCB4X3ZhbHVlID0gc2VyaWVbXCJ4XCJdO1xuICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICByZXR1cm4gKGBcbiAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke3hfdmFsdWV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGApXG4gIH1cbn1cblxuJChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBpbnB1dHMgd2l0aCAncGF0dGVybicgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgLy8gdGhlbiBpbml0aWFsaXplIHRoZW1cbiAgICAgICAgTnRvcFV0aWxzLmluaXREYXRhUGF0dGVybnMoKTtcbn0pO1xuXG4iLCIvLyAyMDE2LTE5IC0gbnRvcC5vcmdcblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZVJlbW92ZUVtcHR5Um93KHRhYmxlKSB7XG4gICQoXCJ0Ym9keSB0ci5lbXB0eVJvd1wiLCAkKHRhYmxlKSkucmVtb3ZlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGRFbXB0eVJvdyh0YWJsZSwgZW1wdHlfc3RyKSB7XG4gIHZhciBjb2x1bW5zID0gJChcInRoZWFkIHRoXCIsICQodGFibGUpKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICByZXR1cm4gJCh0aGlzKS5jc3MoJ2Rpc3BsYXknKSAhPSAnbm9uZSc7XG4gIH0pLmxlbmd0aDtcbiAgJChcInRib2R5XCIsICQodGFibGUpKS5odG1sKCc8dHIgY2xhc3M9XCJlbXB0eVJvd1wiPjx0ZCBjb2xzcGFuPVwiJyArIGNvbHVtbnMgKyAnXCI+PGk+JyArIGVtcHR5X3N0ciArICc8L2k+PC90ZD48L3RyPicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXModGFibGUpIHtcbiAgIHJldHVybiAkKFwidHI6bm90KC5lbXB0eVJvdylcIiwgJCh0YWJsZSkpLmxlbmd0aCAtIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVJc0VtcHR5KHRhYmxlKSB7XG4gIHJldHVybiBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyh0YWJsZSkgPT0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUdldEJ5Rm9ybShmb3JtKSB7XG4gIHJldHVybiAkKFwidGFibGVcIiwgJChcIiNkdC10b3AtZGV0YWlsc1wiLCAkKGZvcm0pKS5wYXJlbnQoKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZVVuZG9BZGRSb3cobmV3X3JvdywgZW1wdHlfc3RyLCBidF90b19lbmFibGUsIGNhbGxiYWNrX3N0cikge1xuICBpZiAoYnRfdG9fZW5hYmxlKVxuICAgICAkKGJ0X3RvX2VuYWJsZSkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIik7XG5cbiAgdmFyIGZvcm0gPSAkKG5ld19yb3cpLmNsb3Nlc3QoXCJmb3JtXCIpO1xuICAkKG5ld19yb3cpLnJlbW92ZSgpO1xuICBheXNVcGRhdGVGb3JtKGZvcm0pO1xuICB2YXIgZHQgPSBkYXRhdGFibGVHZXRCeUZvcm0oZm9ybSk7XG5cbiAgaWYgKGRhdGF0YWJsZUlzRW1wdHkoZHQpKVxuICAgICBkYXRhdGFibGVBZGRFbXB0eVJvdyhkdCwgZW1wdHlfc3RyKTtcblxuICAgaWYgKGNhbGxiYWNrX3N0cilcbiAgICAgIC8vIGludm9rZVxuICAgICAgd2luZG93W2NhbGxiYWNrX3N0cl0obmV3X3Jvdyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVGb3JFYWNoUm93KHRhYmxlLCBjYWxsYmFja3MpIHtcbiAgICQoXCJ0cjpub3QoOmZpcnN0KVwiLCB0YWJsZSkuZWFjaChmdW5jdGlvbihyb3dfaSkge1xuICAgICAgaWYodHlwZW9mIGNhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgY2FsbGJhY2tzLmJpbmQodGhpcykocm93X2kpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHZhciBpO1xuICAgICAgICAgZm9yIChpPTA7IGk8Y2FsbGJhY2tzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmJpbmQodGhpcykocm93X2kpO1xuICAgICAgfVxuICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGxhYmVsLCBic19jbGFzcywgY2FsbGJhY2tfc3RyLCBsaW5rLCB2aXNpYmxlID0gdHJ1ZSwgdGl0bGUgPSAnJykge1xuICAgaWYgKCQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5maW5kKCdkaXYuZC1mbGV4JykubGVuZ3RoID09IDApIHtcbiAgICAgICQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5lbXB0eSgpO1xuICAgICAgJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmFwcGVuZCgkKFwiPGRpdiBjbGFzcz0nZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXInPjwvZGl2PlwiKSk7XG4gICB9XG4gICAkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuZmluZCgnLmQtZmxleCcpLmFwcGVuZCgnPGEgaHJlZj1cIicgKyBsaW5rICsgYFwiIHRpdGxlPScke3RpdGxlfScgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIiBjbGFzcz1cImJ0biBidG4tc20gbXgtMSAke2JzX2NsYXNzfSAkeyF2aXNpYmxlID8gJ2Rpc2FibGVkJyA6ICcnfVwiIG9uY2xpY2s9XCJgICsgY2FsbGJhY2tfc3RyICsgJ1wiIHJvbGU9XCJidXR0b25cIj4nICsgbGFiZWwgKyAnPC9hPicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBjYWxsYmFja19zdHIsIGxhYmVsKSB7XG4gICAgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2suYmluZCh0aGlzKSh0ZF9pZHgsIGxhYmVsLCBcImJ0bi1kYW5nZXJcIiwgY2FsbGJhY2tfc3RyLCBcImphdmFzY3JpcHQ6dm9pZCgwKVwiLCB0cnVlLCAnRGVsZXRlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFjayh0ZF9pZHgsIGNhbGxiYWNrX3N0ciwgbGFiZWwsIHZpc2libGUgPSB0cnVlLCB0aXRsZSA9ICcnKSB7XG4gICAgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2suYmluZCh0aGlzKSh0ZF9pZHgsIGxhYmVsLCBcImJ0bi1pbmZvXCIsIGNhbGxiYWNrX3N0ciwgXCJqYXZhc2NyaXB0OnZvaWQoMClcIiwgdmlzaWJsZSwgdGl0bGUpO1xufVxuICAgIFxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgY2FsbGJhY2tfc3RyLCBsYWJlbCwgdGl0bGUgPSAnJywgdmlzaWJsZSA9IHRydWUpIHtcbiAgICBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjay5iaW5kKHRoaXMpKHRkX2lkeCwgbGFiZWwsIFwiYnRuLXdhcm5pbmdcIiwgY2FsbGJhY2tfc3RyLCBcImphdmFzY3JpcHQ6dm9pZCgwKVwiLCB2aXNpYmxlLCB0aXRsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBsaW5rLCBsYWJlbCwgdGl0bGUgPSAnJykge1xuICAgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2suYmluZCh0aGlzKSh0ZF9pZHgsIGxhYmVsLCBcImJ0bi1pbmZvXCIsIFwiXCIsIGxpbmssIHRydWUsIHRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWUodHJfb2JqLCBhZGRlZF9yb3dzX3ByZWZpeCwgb3B0aW9ucykge1xuICAgb3B0aW9ucyA9IE50b3BVdGlscy5wYXJhbXNFeHRlbmQoe1xuICAgICAgb25fY2hhbmdlOiAkLm5vb3AsICAgICAgICAgICAgICAgICAgICAgLyogQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgc2VsZWN0IGlucHV0IGNoYW5nZXMgKi9cbiAgICAgIHNlbGVjdG9yX2ZuOiBmdW5jdGlvbihvYmopIHsgICAgICAgICAgIC8qIEEgY2FsbGJhY2sgd2hpY2ggcmVjZWl2ZXMgYSB0ciBvYmplY3QgYW5kIHJldHVybnMgYSBzaW5nbGUgc2VsZWN0IGlucHV0ICovXG4gICAgICAgICByZXR1cm4gb2JqLmZpbmQoXCJzZWxlY3RcIikuZmlyc3QoKTtcbiAgICAgIH0sXG4gICB9LCBvcHRpb25zKTtcblxuICAgZnVuY3Rpb24gZGF0YXRhYmxlRm9yZWFjaFNlbGVjdE90aGVyVGhhbih0aGlzX3NlbGVjdCwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBjYWxsYmFjaykge1xuICAgICAgJChcIltpZF49XCIgKyBhZGRlZF9yb3dzX3ByZWZpeCArIFwiXVwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICB2YXIgb3RoZXIgPSBzZWxlY3Rvcl9mbigkKHRoaXMpKTtcbiAgICAgICAgIGlmIChvdGhlclswXSAhPSB0aGlzX3NlbGVjdFswXSlcbiAgICAgICAgICAgIGNhbGxiYWNrKG90aGVyKTtcbiAgICAgIH0pO1xuICAgfVxuXG4gICBmdW5jdGlvbiBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMob3B0aW9uX29iaiwgZW5hYmxlKSB7XG4gICAgICBpZiAoZW5hYmxlKSB7XG4gICAgICAgICBvcHRpb25fb2JqLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICB2YXIgc2VsZWN0X29iaiA9IG9wdGlvbl9vYmouY2xvc2VzdChcInNlbGVjdFwiKTtcbiAgICAgICAgIHZhciBzaG91bGRfcmVzZXQgPSAoc2VsZWN0X29iai52YWwoKSA9PSBvcHRpb25fb2JqLnZhbCgpKTtcbiAgICAgICAgIG9wdGlvbl9vYmouYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cbiAgICAgICAgIGlmKHNob3VsZF9yZXNldCkge1xuICAgICAgICAgICAgdmFyIG5ld192YWwgPSBzZWxlY3Rfb2JqLmZpbmQoXCJvcHRpb246bm90KFtkaXNhYmxlZF0pXCIpLmZpcnN0KCkudmFsKCk7XG4gICAgICAgICAgICBzZWxlY3Rfb2JqLnZhbChuZXdfdmFsKTtcbiAgICAgICAgICAgIHNlbGVjdF9vYmouYXR0cihcImRhdGEtb2xkLXZhbFwiLCBuZXdfdmFsKTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cblxuICAgZnVuY3Rpb24gZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZShhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGNoYW5nZV9jYWxsYmFjaykge1xuICAgICAgdmFyIG9sZF92YWx1ZSA9ICQodGhpcykuYXR0cihcImRhdGEtb2xkLXZhbFwiKSB8fCBcIlwiO1xuICAgICAgdmFyIG5ld192YWx1ZSA9ICQodGhpcykudmFsKCkgfHwgXCJcIjtcbiAgICAgIHZhciBvdGhlcnMgPSBbXTtcblxuICAgICAgaWYgKG9sZF92YWx1ZSA9PSBuZXdfdmFsdWUpXG4gICAgICAgICBvbGRfdmFsdWUgPSBcIlwiO1xuXG4gICAgICBkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuKCQodGhpcyksIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgICAgIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhvdGhlci5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIG9sZF92YWx1ZSArIFwiJ11cIiksIHRydWUpO1xuICAgICAgICAgZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKG90aGVyLmZpbmQoXCJvcHRpb25bdmFsdWU9J1wiICsgbmV3X3ZhbHVlICsgXCInXVwiKSwgZmFsc2UpO1xuICAgICAgICAgb3RoZXJzLnB1c2gob3RoZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIGNoYW5nZV9jYWxsYmFjaygkKHRoaXMpLCBvbGRfdmFsdWUsIG5ld192YWx1ZSwgb3RoZXJzLCBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMpO1xuXG4gICAgICAkKHRoaXMpLmF0dHIoXCJkYXRhLW9sZC12YWxcIiwgbmV3X3ZhbHVlKTtcbiAgIH1cblxuICAgZnVuY3Rpb24gZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeShzZWxlY3Rfb2JqLCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4pIHtcbiAgICAgIHNlbGVjdF9vYmoudmFsKFwiXCIpO1xuXG4gICAgICAvLyBUcmlnZ2VyIGFuIHVwZGF0ZSBvbiBvdGhlciBpbnB1dHMgaW4gb3JkZXIgdG8gZGlzYWJsZSBlbnRyaWVzIG9uIHRoZSBzZWxlY3Rfb2JqXG4gICAgICBkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuKHNlbGVjdF9vYmosIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgICAgIC8vZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKHNlbGVjdF9vYmouZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBvdGhlci52YWwoKSArIFwiJ11cIiksIGZhbHNlKTtcbiAgICAgICAgIG90aGVyLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgICB9KTtcblxuICAgICAgLy8gc2VsZWN0IGZpcnN0IGF2YWlsYWJsZSBlbnRyeVxuICAgICAgdmFyIG5ld19zZWwgPSBzZWxlY3Rfb2JqLmZpbmQoXCJvcHRpb246bm90KFtkaXNhYmxlZF0pXCIpLmZpcnN0KCk7XG4gICAgICB2YXIgbmV3X3ZhbCA9IG5ld19zZWwudmFsKCk7XG5cbiAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSBvdGhlciBlbnRyaWVzXG4gICAgICBzZWxlY3Rfb2JqLnZhbChuZXdfdmFsKTtcbiAgICAgIHNlbGVjdF9vYmoudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgIH1cblxuICAgdmFyIHNlbGVjdCA9IG9wdGlvbnMuc2VsZWN0b3JfZm4odHJfb2JqKTtcbiAgIHNlbGVjdC5vbihcImNoYW5nZVwiLCBmdW5jdGlvbigpIHsgZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZS5iaW5kKHRoaXMpKGFkZGVkX3Jvd3NfcHJlZml4LCBvcHRpb25zLnNlbGVjdG9yX2ZuLCBvcHRpb25zLm9uX2NoYW5nZSk7IH0pO1xuICAgc2VsZWN0Lm9uKFwicmVtb3ZlXCIsIGZ1bmN0aW9uKCkgeyQodGhpcykudmFsKFwiXCIpLnRyaWdnZXIoXCJjaGFuZ2VcIil9KTtcbiAgIGRhdGF0YWJsZU9uQWRkU2VsZWN0RW50cnkoc2VsZWN0LCBhZGRlZF9yb3dzX3ByZWZpeCwgb3B0aW9ucy5zZWxlY3Rvcl9mbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVJc0xhc3RQYWdlKHRhYmxlKSB7XG4gICB2YXIgbGFzdHBhZ2UgPSAkKFwiI2R0LWJvdHRvbS1kZXRhaWxzIC5wYWdpbmF0aW9uIGxpOm50aC1sYXN0LWNoaWxkKDMpXCIsICQodGFibGUpKTtcbiAgIHJldHVybiAhKChsYXN0cGFnZS5sZW5ndGggPT0gMSkgJiYgKGxhc3RwYWdlLmhhc0NsYXNzKFwiYWN0aXZlXCIpID09IGZhbHNlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW4odGFibGUsIGlkX2tleSwgaWRfdmFsdWUpIHtcbiAgIHZhciByZXMgPSB0YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpLnJlc3VsdHNldC5kYXRhLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbVtpZF9rZXldID09PSBpZF92YWx1ZTtcbiAgIH0pO1xuXG4gICBpZihyZXMpIHJldHVybiByZXNbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCh0YWJsZSwgY29sdW1uX2tleSkge1xuICAgdmFyIGluZGV4ID0gdGFibGUuZGF0YShcImRhdGF0YWJsZVwiKS5vcHRpb25zLmNvbHVtbnMuZmluZEluZGV4KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmZpZWxkID09PSBjb2x1bW5fa2V5O1xuICAgfSk7XG5cbiAgIHJldHVybihpbmRleCk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gYWRkIHJlZnJlc2hhYmxlIGRhdGF0YWJsZXMgcm93cy5cbiAqXG4gKiB0YWJsZTogdGhlIGRhdGF0YWJsZSBkaXYganF1ZXJ5IG9iamVjdFxuICogY29sdW1uX2lkOiB0aGUgZmllbGQga2V5IHVzZWQgdG8gaW5kZW50aWZ5IHRoZSByb3dzXG4gKiByZWZyZXNoX2ludGVydmFsOiBtaWxsaXNlY29uZHMgcmVmcmVzaCBpbnRlcnZhbCBmb3IgdGhpcyB0YWJsZVxuICogdHJlbmRfY29sdW1uczogKG9wdGlvbmFsKSBhIG1hcCA8ZmllbGQgLT4gZm9ybWF0dGVyX2ZuPiB3aGljaCBpbmRpY2F0ZXMgdGhlIG51bWVyaWMgY29sdW1uc1xuICogd2hpY2ggc2hvdWxkIGJlIHNob3duIHdpdGggdXAvZG93biBhcnJvd3MgdXBvbiByZWZyZXNoLlxuICpcbiAqIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgJChcIiN0YWJsZS1yZWRpcy1zdGF0c1wiKS5kYXRhdGFibGUoe1xuICogICAgIC4uLlxuICogICAgIHRhYmxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgLy8gVGhlIHRhYmxlIHJvd3Mgd2lsbCBiZSBpZGVudGlmaWVkIGJ5IHRoZSBcImNvbHVtbl9rZXlcIixcbiAqICAgICAgIC8vIHJlZnJlc2hlZCBldmVyeSA1IHNlY29uZHMsIHdpdGggdXAvZG93biBhcnJvd3Mgb24gdGhlIFwiY29sdW1uX2hpdHNcIlxuICogICAgICAgZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKCQoXCIjdGFibGUtcmVkaXMtc3RhdHNcIiksIFwiY29sdW1uX2tleVwiLCA1MDAwLCB7XCJjb2x1bW5faGl0c1wiOiBhZGRDb21tYXN9KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzKHRhYmxlLCBjb2x1bW5faWQsIHJlZnJlc2hfaW50ZXJ2YWwsIHRyZW5kX2NvbHVtbnMpIHtcbiAgdmFyICRkdCA9IHRhYmxlLmRhdGEoXCJkYXRhdGFibGVcIik7XG4gIHZhciByb3dzID0gJGR0LnJlc3VsdHNldC5kYXRhO1xuICB2YXIgb2xkX3RpbWVyID0gdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIpO1xuICB2YXIgb2xkX3JlcSA9IHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIpO1xuICB0cmVuZF9jb2x1bW5zID0gdHJlbmRfY29sdW1ucyB8fCB7fTtcblxuICBpZihvbGRfdGltZXIpIHtcbiAgICAvLyBSZW1vdmUgdGhlIHByZXZpb3VzbHkgc2V0IHRpbWVyIHRvIGF2b2lkIGRvdWJsZSBzY2hlZHVsaW5nXG4gICAgY2xlYXJJbnRlcnZhbChvbGRfdGltZXIpO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci10aW1lclwiKTtcbiAgfVxuXG4gIGlmKG9sZF9yZXEpIHtcbiAgICAvLyBBYm9ydCB0aGUgcHJldmlvdXMgcmVxdWVzdCBpZiBhbnlcbiAgICBvbGRfcmVxLmFib3J0KCk7XG4gICAgdGFibGUucmVtb3ZlRGF0YShcImR0LXJyLWFqYXhcIik7XG4gIH1cblxuICB2YXIgaWRzID0gW107XG4gIHZhciBpZF90b19yb3cgPSB7fTtcblxuICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgdmFyIGRhdGEgPSByb3dzW3Jvd107XG5cbiAgICBpZihkYXRhW2NvbHVtbl9pZF0pIHtcbiAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuICAgICAgaWRfdG9fcm93W2RhdGFfaWRdID0gcm93O1xuICAgICAgaWRzLnB1c2goZGF0YV9pZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhlc2UgcGFyYW1ldGVycyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgcmVmcmVzaCBlbmRwb2ludFxuICAvLyB0aGUgY3VzdG9tX2hvc3RzIHBhcmFtZXRlciB3aWxsIGJlIHBhc3NlZCBpbiB0aGUgQUpBWCByZXF1ZXN0IGFuZFxuICAvLyB3aWxsIGNvbnRhaW4gdGhlIElEcyB0byByZWZyZXNoLiBJdCBzaG91bGQgYmUgdXNlZCBieSB0aGUgcmVjZWl2aW5nXG4gIC8vIEx1YSBzY3JpcHQgYXMgYSBmaWx0ZXJcbiAgdmFyIHBhcmFtcyA9IHtcbiAgICBcImN1c3RvbV9ob3N0c1wiOiBpZHMuam9pbihcIixcIilcbiAgfTtcbiAgdmFyIHVybCA9ICRkdC5vcHRpb25zLnVybDtcbiAgdmFyIGZpcnN0X2xvYWQgPSB0cnVlO1xuXG4gIHZhciBfcHJvY2Vzc19yZXN1bHQgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICBpZih0eXBlb2YocmVzdWx0KSA9PT0gXCJzdHJpbmdcIilcbiAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcblxuICAgIGlmKCFyZXN1bHQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJCYWQgSlNPTiByZXN1bHRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yKHZhciByb3cgaW4gcmVzdWx0LmRhdGEpIHtcbiAgICAgICB2YXIgZGF0YSA9IHJlc3VsdC5kYXRhW3Jvd107XG4gICAgICAgdmFyIGRhdGFfaWQgPSBkYXRhW2NvbHVtbl9pZF07XG5cbiAgICAgICBpZihkYXRhX2lkICYmIGlkX3RvX3Jvd1tkYXRhX2lkXSkge1xuICAgICAgICAgIHZhciByb3dfaWR4ID0gaWRfdG9fcm93W2RhdGFfaWRdO1xuICAgICAgICAgIHZhciByb3dfaHRtbCA9ICRkdC5yb3dzW3Jvd19pZHhdO1xuICAgICAgICAgIHZhciByb3dfdGRzID0gJChcInRkXCIsIHJvd19odG1sKTtcblxuICAgICAgICAgIC8qIFRyeSB0byB1cGRhdGUgYWxsIHRoZSBmaWVsZHMgZm9yIHRoZSBjdXJyZW50IHJvdyAocm93X2h0bWwpICovXG4gICAgICAgICAgZm9yKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgIHZhciBjb2xfaWR4ID0gZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXgodGFibGUsIGtleSk7XG4gICAgICAgICAgICAgdmFyIGNlbGwgPSByb3dfdGRzW2NvbF9pZHhdO1xuICAgICAgICAgICAgIHZhciAkY2VsbCA9ICQoY2VsbCk7XG5cbiAgICAgICAgICAgICB2YXIgb2xkX3ZhbCA9ICRjZWxsLmRhdGEoXCJkdC1yci1jdXItdmFsXCIpIHx8ICQoY2VsbCkuaHRtbCgpO1xuICAgICAgICAgICAgIHZhciB0cmVuZF92YWx1ZV9mb3JtYXR0ZXIgPSB0cmVuZF9jb2x1bW5zW2tleV07XG4gICAgICAgICAgICAgdmFyIG5ld192YWwgPSBkYXRhW2tleV07XG4gICAgICAgICAgICAgdmFyIGFycm93cyA9IFwiXCI7XG5cbiAgICAgICAgICAgICBpZih0cmVuZF92YWx1ZV9mb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgaWYocGFyc2VGbG9hdChuZXdfdmFsKSAhPSBuZXdfdmFsKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgbnVtYmVyOiBcIiArIG5ld192YWwpO1xuXG4gICAgICAgICAgICAgIGlmKCFmaXJzdF9sb2FkKVxuICAgICAgICAgICAgICAgIGFycm93cyA9IFwiIFwiICsgTnRvcFV0aWxzLmRyYXdUcmVuZChwYXJzZUZsb2F0KG5ld192YWwpLCBwYXJzZUZsb2F0KG9sZF92YWwpKTtcblxuICAgICAgICAgICAgICAvLyBUaGlzIHZhbHVlIHdpbGwgYmUgbmVlZGUgaW4gdGhlIG5leHQgcmVmcmVzaFxuICAgICAgICAgICAgICAkY2VsbC5kYXRhKFwiZHQtcnItY3VyLXZhbFwiLCBuZXdfdmFsKTtcblxuICAgICAgICAgICAgICBuZXdfdmFsID0gdHJlbmRfdmFsdWVfZm9ybWF0dGVyKG5ld192YWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgJChjZWxsKS5odG1sKChuZXdfdmFsICE9IDApID8gKG5ld192YWwgKyBhcnJvd3MpIDogXCJcIik7XG4gICAgICAgICAgfVxuICAgICAgIH1cbiAgICB9XG5cbiAgICBmaXJzdF9sb2FkID0gZmFsc2U7XG4gICAgdGFibGUucmVtb3ZlRGF0YShcImR0LXJyLWFqYXhcIik7XG4gfTtcblxuICAvLyBTYXZlIHRoZSB0aW1lciBpbnRvIFwiZHQtcnItdGltZXJcIiB0byBiZSBhYmxlIHRvIHN0b3AgaXQgaWZcbiAgLy8gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzIGlzIGNhbGxlZCBhZ2FpblxuICB0YWJsZS5kYXRhKFwiZHQtcnItdGltZXJcIiwgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgLy8gRG91YmxlIGNoZWNrIHRoYXQgYSByZXF1ZXN0IGlzIG5vdCBwZW5kaW5nXG4gICAgdmFyIG9sZF9yZXEgPSB0YWJsZS5kYXRhKFwiZHQtcnItYWpheFwiKTtcblxuICAgIGlmKG9sZF9yZXEpXG4gICAgICByZXR1cm47XG5cbiAgICAvLyBTYXZlIHRoZSBhamF4IHJlcXVlc3QgdG8gcG9zc2libHkgYWJvcnQgaXQgaWZcbiAgICAvLyBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MgaXMgY2FsbGVkIGFnYWluXG4gICAgdGFibGUuZGF0YShcImR0LXJyLWFqYXhcIiwgJC5hamF4KHtcbiAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICB1cmw6IHVybCxcbiAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgIHN1Y2Nlc3M6IF9wcm9jZXNzX3Jlc3VsdCxcbiAgICB9KSk7XG4gIH0sIHJlZnJlc2hfaW50ZXJ2YWwpKTtcblxuICAvLyBGaXJzdCB1cGRhdGVcbiAgX3Byb2Nlc3NfcmVzdWx0KCRkdC5yZXN1bHRzZXQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRyYXdfcHJvY2Vzc2VzX2dyYXBoKGh0dHBfcHJlZml4LCBncmFwaF9kaXZfaWQsIGhvc3QpIHtcbiAgICB2YXIgbGlua3M7XG4gICAgdmFyIG5vZGVzID0ge307XG5cbiAgICB2YXIgdXJsID0gaHR0cF9wcmVmaXggKyAnL2x1YS9nZXRfcHJvY2Vzc2VzX2dyYXBoX2RhdGEubHVhP2hvc3Q9JyArIGhvc3Q7XG5cbiAgICBkMy5qc29uKHVybCwgZnVuY3Rpb24oZXJyb3IsIGpzb24pIHtcblx0aWYoZXJyb3IpXG5cdCAgICByZXR1cm4gY29uc29sZS53YXJuKGVycm9yKTtcblxuXHRsaW5rcyA9IGpzb247XG5cdHZhciBfbGluaztcblxuXHQvLyBDb21wdXRlIHRoZSBkaXN0aW5jdCBub2RlcyBmcm9tIHRoZSBsaW5rcy5cblx0bGlua3MuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7XG5cdCAgICBpZihsaW5rLnNvdXJjZV9waWQgPT0gLTEpIHtcblx0XHQvKiBJUCBBZGRyZXNzIC0+IFBJRCAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PVwiICsgbGluay5zb3VyY2U7XG5cdCAgICB9IGVsc2Uge1xuXHRcdC8qIFBJRCAtPiBJUCBBZGRyZXNzICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm9jZXNzX2RldGFpbHMubHVhP3BpZD1cIiArIGxpbmsuc291cmNlX3BpZCArIFwiJnBpZF9uYW1lPVwiICsgbGluay5zb3VyY2VfbmFtZSArIFwiJmhvc3Q9XCIgKyBob3N0ICsgXCImcGFnZT1mbG93c1wiO1xuXHQgICAgfVxuXG5cdCAgICBsaW5rLnNvdXJjZSA9IG5vZGVzW2xpbmsuc291cmNlXVxuXHRcdHx8IChub2Rlc1tsaW5rLnNvdXJjZV0gPSB7XG5cdFx0ICAgIG5hbWU6IGxpbmsuc291cmNlX25hbWUsIG51bTpsaW5rLnNvdXJjZSxcblx0XHQgICAgbGluazogX2xpbmssIHR5cGU6IGxpbmsuc291cmNlX3R5cGUsIHBpZDogbGluay5zb3VyY2VfcGlkXG5cdFx0fSk7XG5cblx0ICAgIGlmKGxpbmsudGFyZ2V0X3BpZCA9PSAtMSkge1xuXHRcdC8qIElQIEFkZHJlc3MgLT4gUElEICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9XCIgKyBsaW5rLnRhcmdldDtcblx0ICAgIH0gZWxzZSB7XG5cdFx0LyogUElEIC0+IElQIEFkZHJlc3MgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byb2Nlc3NfZGV0YWlscy5sdWE/cGlkPVwiICsgbGluay50YXJnZXRfcGlkICsgXCImcGlkX25hbWU9XCIgKyBsaW5rLnRhcmdldF9uYW1lICsgXCImaG9zdD1cIiArIGhvc3QgKyBcIiZwYWdlPWZsb3dzXCI7XG5cdCAgICB9XG5cblx0ICAgIGxpbmsudGFyZ2V0ID0gbm9kZXNbbGluay50YXJnZXRdXG5cdFx0fHwgKG5vZGVzW2xpbmsudGFyZ2V0XSA9IHtcblx0XHQgICAgbmFtZTogbGluay50YXJnZXRfbmFtZSwgbnVtOiBsaW5rLnRhcmdldCxcblx0XHQgICAgbGluazogX2xpbmssIHR5cGU6IGxpbmsudGFyZ2V0X3R5cGUsIHBpZDogbGluay50YXJnZXRfcGlkXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHZhciB3aWR0aCA9IDk2MCwgaGVpZ2h0ID0gNTAwLCBhcnJvd19zaXplID0gNjtcblx0dmFyIGNvbG9yID0gZDMuc2NhbGUuY2F0ZWdvcnkxMCgpO1xuXG5cdC8qIFNhbWUgY29sb3JzIGFzIHRob3NlIHVzZWQgaW4gdGhlIGZsb3dfZGV0YWlscy5sdWEgcGFnZSB0byByZXByZXNlbnQgaG9zdHMgYW5kIHByb2Nlc3NlcyAqL1xuXHRjb2xvcltcInByb2NcIl0gPSBcInJlZFwiO1xuXHRjb2xvcltcImhvc3RcIl0gPSBcImxpZ2h0c3RlZWxibHVlXCI7XG5cblx0dmFyIGZvcmNlID0gZDMubGF5b3V0LmZvcmNlKClcblx0ICAgIC5ub2RlcyhkMy52YWx1ZXMobm9kZXMpKVxuXHQgICAgLmxpbmtzKGxpbmtzKVxuXHQgICAgLnNpemUoW3dpZHRoLCBoZWlnaHRdKVxuXHQgICAgLmxpbmtEaXN0YW5jZSgxMjApIC8vIEFyYyBsZW5ndGhcblx0ICAgIC5jaGFyZ2UoLTQwMClcblx0ICAgIC5vbihcInRpY2tcIiwgdGljaylcblx0ICAgIC5zdGFydCgpO1xuXG5cdHZhciBzdmcgPSBkMy5zZWxlY3QoXCIjXCIgKyBncmFwaF9kaXZfaWQpLmFwcGVuZChcInN2Z1wiKVxuXHQgICAgLmF0dHIoXCJpZFwiLCBcImVicGZfZ3JhcGhcIilcblx0ICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG5cdCAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXG5cdC8vIFBlci10eXBlIG1hcmtlcnMsIGFzIHRoZXkgZG9uJ3QgaW5oZXJpdCBzdHlsZXMuXG5cdHN2Zy5hcHBlbmQoXCJkZWZzXCIpLnNlbGVjdEFsbChcIm1hcmtlclwiKVxuXHQgICAgLmRhdGEoW1wicHJvYzJwcm9jXCIsIFwicHJvYzJob3N0XCIsIFwiaG9zdDJwcm9jXCIsIFwiaG9zdDJob3N0XCJdKVxuXHQgICAgLmVudGVyKCkuYXBwZW5kKFwibWFya2VyXCIpXG5cdCAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQ7IH0pXG5cdCAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDIwIDIwXCIpXG5cdCAgICAuYXR0cihcInJlZlhcIiwgMTUpXG5cdCAgICAuYXR0cihcInJlZllcIiwgLTEuNSlcblx0ICAgIC5hdHRyKFwibWFya2VyV2lkdGhcIiwgYXJyb3dfc2l6ZSkuYXR0cihcIm1hcmtlckhlaWdodFwiLCBhcnJvd19zaXplKVxuXHQgICAgLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpXG5cdCAgICAuYXBwZW5kKFwicGF0aFwiKVxuXHQgICAgLmF0dHIoXCJkXCIsIFwiTTAsLTVMMTAsMEwwLDVcIik7XG5cblx0dmFyIHBhdGggPSBzdmcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJwYXRoXCIpXG5cdCAgICAuZGF0YShmb3JjZS5saW5rcygpKVxuXHQgICAgLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxuXHQgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImxpbmsgXCIgKyBkLnR5cGU7IH0pXG5cdCAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ1cmwoI1wiICsgZC50eXBlICsgXCIpXCI7IH0pO1xuXG5cblx0dmFyIGNpcmNsZSA9IHN2Zy5hcHBlbmQoXCJnXCIpLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuXHQgICAgLmRhdGEoZm9yY2Uubm9kZXMoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxuXHQgICAgLmF0dHIoXCJjbGFzc1wiLCBcImVicGZfY2lyY2xlXCIpXG5cdCAgICAuYXR0cihcInJcIiwgMTUpIC8qIFJhZGl1cyAqL1xuXHQgICAgLnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb2xvcltkLnR5cGVdOyB9KVxuXHQgICAgLmNhbGwoZm9yY2UuZHJhZylcblx0ICAgIC5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGQpIHtcblx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IGQubGluaztcblx0ICAgIH0gKTtcblxuXHQvLyBDaXJjbGUgbGFiZWxcblx0dmFyIHRleHQgPSBzdmcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG5cdCAgICAuZGF0YShmb3JjZS5ub2RlcygpKVxuXHQgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuXHQgICAgLmF0dHIoXCJjbGFzc1wiLCBcImVicGZfdGV4dFwiKVxuXHQgICAgLmF0dHIoXCJ4XCIsIDEyKVxuXHQgICAgLmF0dHIoXCJ5XCIsIFwiMC41cmVtXCIpXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxcmVtXCIpXG5cdCAgICAudGV4dChmdW5jdGlvbihkKSB7XG5cdFx0aWYoZC5waWQgPj0gMCkgLy8gUHJvY2Vzc1xuXHRcdCAgICByZXR1cm4oZC5uYW1lICsgXCIgW3BpZDogXCIrZC5waWQrXCJdXCIpO1xuXHRcdGVsc2UgeyAvLyBIb3N0XG5cdFx0ICAgIHJldHVybihkLm5hbWUpO1xuXHRcdH1cblx0ICAgIH0pO1xuXG5cdC8vIFVzZSBlbGxpcHRpY2FsIGFyYyBwYXRoIHNlZ21lbnRzIHRvIGRvdWJseS1lbmNvZGUgZGlyZWN0aW9uYWxpdHkuXG5cdGZ1bmN0aW9uIHRpY2soKSB7XG5cdCAgICBwYXRoLmF0dHIoXCJkXCIsIGxpbmtBcmMpO1xuXHQgICAgY2lyY2xlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcblx0ICAgIHRleHQuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gbGlua0FyYyhkKSB7XG5cdCAgICB2YXIgZHggPSBkLnRhcmdldC54IC0gZC5zb3VyY2UueCxcblx0XHRkeSA9IGQudGFyZ2V0LnkgLSBkLnNvdXJjZS55LFxuXHRcdGRyID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0ICAgIHJldHVybiBcIk1cIiArIGQuc291cmNlLnggKyBcIixcIiArIGQuc291cmNlLnkgKyBcIkFcIiArIGRyICsgXCIsXCIgKyBkciArIFwiIDAgMCwxIFwiICsgZC50YXJnZXQueCArIFwiLFwiICsgZC50YXJnZXQueTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybShkKSB7XG5cdCAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnggKyBcIixcIiArIGQueSArIFwiKVwiO1xuXHR9XG4gICAgfSk7XG59XG4iLCIvKiBVc2Ugd2l0aDpcbiAgKlxuICAqICQoJyNlZGl0LXJlY2lwaWVudC1tb2RhbCBmb3JtJykubW9kYWxIYW5kbGVyKHsgLi4uIH0pXG4gICovXG5jbGFzcyBNb2RhbEhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoZm9ybSwgb3B0aW9ucykge1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jc3JmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbEhhbmRsZXI6Ok1pc3NpbmcgQ1NSRiB0b2tlbiFcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBmb3JtO1xuICAgICAgICB0aGlzLmRpYWxvZyA9ICQoZm9ybSkuY2xvc2VzdChcIi5tb2RhbFwiKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNzcmYgPSBvcHRpb25zLmNzcmY7XG4gICAgICAgIHRoaXMuZG9udERpc2FibGVTdWJtaXQgPSBvcHRpb25zLmRvbnREaXNhYmxlU3VibWl0O1xuXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobGlzdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iaW5kRm9ybVZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlRm9ybVN1Ym1pc3Npb24oKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdERhdGFQYXR0ZXJucygpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50WzBdLCB7XG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdWJtaXR0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXWApO1xuICAgICAgICBpZiAoc3VibWl0QnV0dG9uLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbEhhbmRsZXI6OlRoZSBzdWJtaXQgYnV0dG9uIHdhcyBub3QgZm91bmQgaW5zaWRlIHRoZSBmb3JtIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9nZ2xlRm9ybVN1Ym1pc3Npb24oKTtcblxuICAgIH1cblxuICAgIGluaXREYXRhUGF0dGVybnMoKSB7XG4gICAgICAgIE50b3BVdGlscy5pbml0RGF0YVBhdHRlcm5zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZm9ybSdzIHNuYXBzaG90IHRvIHNhdmUgYSBmb3JtIHN0YXRlXG4gICAgICovXG4gICAgY3JlYXRlRm9ybVNuYXBzaG90KCkge1xuXG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0ge1xuICAgICAgICAgICAgaW5wdXRzOiB7fSxcbiAgICAgICAgICAgIGhpZGRlbjogW11cbiAgICAgICAgfTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZCgndGV4dGFyZWEsc2VsZWN0LGlucHV0W3R5cGUhPVwicmFkaW9cIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgY29uc3QgdHlwZSA9ICQodGhpcykucHJvcCgnbm9kZU5hbWUnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9ICQodGhpcykuYXR0cignbmFtZScpO1xuICAgICAgICAgICAgc25hcHNob3QuaW5wdXRzW2Ake3R5cGV9W25hbWU9JyR7bmFtZX0nXWBdID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFtzdHlsZT0nZGlzcGxheTogbm9uZTsnXSwgc3Bhbi5pbnZhbGlkLWZlZWRiYWNrYCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzbmFwc2hvdC5oaWRkZW4ucHVzaCgkKHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH1cblxuICAgIGNvbXBhcmVGb3JtU25hcGhzb3QoczEsIHMyKSB7XG5cbiAgICAgICAgaWYgKHMxID09IG51bGwgfHwgczIgPT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHMxLmlucHV0cykpIHtcbiAgICAgICAgICAgIGlmIChzMi5pbnB1dHNba2V5XSAhPSB2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZGVsZWdhdGVNb2RhbENsb3NpbmcoKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgJCh0aGlzLmRpYWxvZykuZmluZCgnYnV0dG9uLmNhbmNlbCcpLm9mZignY2xpY2snKS5jbGljayhmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KVswXS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnLmNvbmZpcm0tY2xvc2luZycpLmZhZGVPdXQoMTAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnYnV0dG9uLmJ0bi1jbG9zZScpLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLm9mZignaGlkZS5icy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzZWxmLmlzU3VibWl0dGluZykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGUgZm9ybSBzdGF0ZSBoYXNuJ3QgY2hhbmdlZCB0aGVuIGRvbid0IHNob3cgdGhlIG1lc3NhZ2VcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbXBhcmVGb3JtU25hcGhzb3Qoc2VsZi5jdXJyZW50U3RhdGUsIHNlbGYuaW5pdGlhbFN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQpIHJldHVybjtcbiAgICAgICAgICAgIC8vIGFib3J0IHRoZSBtb2RhbCBjbG9zaW5nIGV2ZW50XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBmbGFnIGEgY2xvc2UgYXR0ZW1wdCBoYXMgYmVlbiBpbnZva2VkXG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gc2hvdyBhbiBhbGVydCB0byBpbmZvcm0gdGhlIHVzZXJcbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCh0aGlzLmRpYWxvZykub2ZmKCdoaWRkZW4uYnMubW9kYWwnKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIC8vIGZvciBlYWNoIGlucHV0IGluc2lkZSB0aGUgZm9ybSByZXN0b3JlIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICAvLyBmcm9tIHRoZSBzbmFwc2hvdCB0YWtlbiBhdCBpbml0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtzZWxlY3RvciwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlbGYuaW5pdGlhbFN0YXRlLmlucHV0cykpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKHNlbGVjdG9yKS52YWwodmFsdWUpO1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoc2VsZWN0b3IpLnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhpZGUgdGhlIHNod29uIGVsZW1lbnRzXG4gICAgICAgICAgICBzZWxmLmluaXRpYWxTdGF0ZS5oaWRkZW4uZm9yRWFjaCgoJGhpZGRlbikgPT4ge1xuICAgICAgICAgICAgICAgICRoaWRkZW4uaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNlbGYuZWxlbWVudC5maW5kKGBbdHlwZT0nc3VibWl0J11gKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcblxuICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnLmNvbmZpcm0tY2xvc2luZycpLmZhZGVPdXQoMTAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZCgnYnV0dG9uLmJ0bi1jbG9zZScpLmZhZGVJbigxMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGNsZWFuIHRoZSBmb3JtIHdoZW4gdGhlIG1vZGFsIGlzIGNsb3NlZFxuICAgICAgICAgICAgLy8gdG8gcHJldmVudCB0aGUgZmllbGRzIGZsaWNrZXJpbmdcbiAgICAgICAgICAgIHNlbGYuY2xlYW5Gb3JtKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZpbGxGb3JtTW9kYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubG9hZEZvcm1EYXRhKCk7XG4gICAgfVxuXG4gICAgaW52b2tlTW9kYWxJbml0KGRhdGEgPSB7fSkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIC8vIHJlc2V0IGZvcm0gdmFsdWVzIHdoZW4gdGhlIG1vZGFsIGNsb3Nlc1xuICAgICAgICB0aGlzLmRlbGVnYXRlTW9kYWxDbG9zaW5nKCk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgdGhpcy5maWxsRm9ybU1vZGFsKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbk1vZGFsSW5pdCh0aGlzLmRhdGEsIHRoaXMpO1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5wYXJlbnRzKCcubW9kYWwnKS5vbignc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucy5vbk1vZGFsU2hvdygpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjcmVhdGUgYSBpbml0aWFsIGZvcm0gc25hcHNob3QgdG8gcmVzdG9yZSBlbGVtZW50cyBvbiBjbG9zaW5nXG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gdGhpcy5jcmVhdGVGb3JtU25hcHNob3QoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZGVsZWdhdGVSZXNldEJ1dHRvbigpOyAgIFxuICAgIH1cblxuICAgIGRlbGVnYXRlU3VibWl0KCkge1xuXG4gICAgICAgIHRoaXMuYmluZEZvcm1WYWxpZGF0aW9uKCk7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5zdWJtaXRIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5vcHRpb25zLmlzU3luY1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBzZWxmLm1ha2VSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdzdWJtaXQnLCB0aGlzLnN1Ym1pdEhhbmRsZXIpO1xuICAgIH1cblxuICAgIGJpbmRGb3JtVmFsaWRhdGlvbigpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyBoYW5kbGUgaW5wdXQgdmFsaWRhdGlvblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZChgaW5wdXQsc2VsZWN0LHRleHRhcmVhYCkuZWFjaChhc3luYyBmdW5jdGlvbiAoaSwgaW5wdXQpIHtcblxuICAgICAgICAgICAgLy8galF1ZXJ5IG9iamVjdCBvZiB0aGUgY3VycmVudCBpbnB1dFxuICAgICAgICAgICAgY29uc3QgJGlucHV0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgIC8vIGlkIHRvIGhhbmRsZSB0aGUgY3VycmVudCB0aW1lb3V0IHNldCB0byBzaG93IGVycm9yc1xuICAgICAgICAgICAgbGV0IHRpbWVvdXRJZCA9IC0xO1xuXG4gICAgICAgICAgICBjb25zdCB2YWxpZEhvc3RuYW1lID0gYXN5bmMgKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB0aGUgc3Bpbm5lciB0byB0aGUgdXNlciBhbmQgc2V0IHRoZSBpbnB1dCB0byByZWFkb25seVxuICAgICAgICAgICAgICAgIGNvbnN0ICRzcGlubmVyID0gJGlucHV0LnBhcmVudCgpLmZpbmQoJy5zcGlubmVyLWJvcmRlcicpO1xuICAgICAgICAgICAgICAgICRpbnB1dC5hdHRyKFwicmVhZG9ubHlcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgJHNwaW5uZXIuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBOdG9wVXRpbHMucmVzb2x2ZUROUygkKGlucHV0KS52YWwoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBzcGlubmVyIGFuZCByZW5hYmxlIHdyaXRlIHRvIHRoZSBpbnB1dFxuICAgICAgICAgICAgICAgICRpbnB1dC5yZW1vdmVBdHRyKFwicmVhZG9ubHlcIik7XG4gICAgICAgICAgICAgICAgJHNwaW5uZXIuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHJlc3BvbnNlIHdhcyBuZWdhdGl2ZSB0aGVuIGFsZXJ0IHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJjIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShyZXNwb25zZS5yY19zdHIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCByZXNwb25zZS5yY19zdHJfaHJdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJldHVybiBzdWNjZXNzIGZvciB2YWxpZCByZXNvbHZlZCBob3N0bm1hZVxuICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBcIlN1Y2Nlc3NcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbGlkSW5wdXQgPSBhc3luYyAodmFsaWRhdGlvbikgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGlucHV0IHJlcXVpcmUgdG8gdmFsaWRhdGUgaG9zdCBuYW1lIHRoZW4gcGVyZm9ybSBhIEROUyByZXNvbHZlXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb24uZGF0YS5yZXNvbHZlRE5TICYmICRpbnB1dC52YWwoKS5tYXRjaChOdG9wVXRpbHMuUkVHRVhFUy5kb21haW5OYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdmFsaWRIb3N0bmFtZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uLmRhdGEuY2Fubm90QmVFbXB0eSAmJiB2YWxpZGF0aW9uLmlzSW5wdXRFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGlucHV0IHZhbGlkYXRpb24gZmxhZ1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlBsZWFzZSBmaWxsIHRoZSBpbnB1dC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS52YWxpZGF0aW9uRW1wdHlNZXNzYWdlIHx8IGkxOG5fZXh0Lm1pc3NpbmdfZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWxpZGl0eS5wYXR0ZXJuTWlzbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJQYXR0ZXJuIG1pc21hdGNoLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdmFsaWRhdGlvbi5kYXRhLnZhbGlkYXRpb25NZXNzYWdlIHx8IGkxOG5fZXh0LmludmFsaWRfZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWxpZGl0eS5yYW5nZU92ZXJmbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiVmFsdWUgZXhjZWVkIHRoZSBtYXhpbXVtIHZhbHVlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdmFsaWRhdGlvbi5kYXRhLnJhbmdlT3ZlcmZsb3dNZXNzYWdlIHx8IGkxOG5fZXh0LmludmFsaWRfZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlZhbHVlIGlzIHVuZGVyIHRoZSBtaW5pbXVtIHZhbHVlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdmFsaWRhdGlvbi5kYXRhLnJhbmdlVW5kZXJmbG93TWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgdmFsaWRhdGlvbiB0byB0cnVlXG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBcIlN1Y2Nlc3NcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNoZWNrVmFsaWRhdGlvbiA9IGFzeW5jICgpID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvbk1lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25FbXB0eU1lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uRW1wdHlNZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5ub3RCZUVtcHR5OiAoJGlucHV0LmF0dHIoJ3JlcXVpcmVkJykgPT09IFwicmVxdWlyZWRcIikgfHwgKCRpbnB1dC5kYXRhKFwidmFsaWRhdGlvbk5vdEVtcHR5XCIpID09IHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUROUzogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25SZXNvbHZlZG5zJyksXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZU92ZXJmbG93TWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25SYW5nZU92ZXJmbG93TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VVbmRlcmZsb3dNZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvblVuZGVyZmxvd092ZXJmbG93TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc0lucHV0RW1wdHk6ICh0eXBlb2YoJGlucHV0LnZhbCgpKSA9PT0gXCJzdHJpbmdcIiA/ICRpbnB1dC52YWwoKS50cmltKCkgPT0gXCJcIiA6IGZhbHNlKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBbaXNWYWxpZCwgbWVzc2FnZVRvU2hvd10gPSBhd2FpdCB2YWxpZElucHV0KHZhbGlkYXRpb24pO1xuICAgICAgICAgICAgICAgIGxldCAkZXJyb3IgPSAkaW5wdXQucGFyZW50KCkuZmluZChgLmludmFsaWQtZmVlZGJhY2tgKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBlcnJvciBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgdGhlbiBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgICAgICAgaWYgKCRlcnJvci5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAkKGA8c3BhbiBjbGFzcz0naW52YWxpZC1mZWVkYmFjayc+PC9zcGFuPmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGVycm9ycyBhbmQgY29sb3IgdGhlIGlucHV0IGJveFxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAkaW5wdXQuYWRkQ2xhc3MoJ2lzLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnBhcmVudCgpLmFwcGVuZCgkZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IudGV4dChtZXNzYWdlVG9TaG93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHRoZSB2YWxpZGF0aW9uIG1lc3NhZ2UgYW5kIHJlbW92ZSB0aGUgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICRlcnJvci5mYWRlT3V0KDUwMCwgZnVuY3Rpb24gKCkgeyAkKHRoaXMpLnJlbW92ZSgpOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQodGhpcykub2ZmKCdpbnB1dCcpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IHNlbGYuY3JlYXRlRm9ybVNuYXBzaG90KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBleGlzdHMgYWxyZWFkeSBhIFRpbWVvdXQgdGhlbiBjbGVhciBpdFxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0SWQgIT0gLTEpIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEkaW5wdXQuYXR0cihcImZvcm1ub3ZhbGlkYXRlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgaW5wdXQgdmFsaWRhdGlvbiBhZnRlciAzMDBtc2VjXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGZvcm0gdmFsaWRhdGlvbiB0byBlbmFibGUgdGhlIHN1Ym1pdCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudG9nZ2xlRm9ybVN1Ym1pc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgaGFzIGNoYW5nZWQgdGhlIGlucHV0LCB3ZSBjYW4gYWJvcnQgdGhlIGZpcnN0IGNsb3NlIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKHRoaXMpLm9mZignaW52YWxpZCcpLm9uKCdpbnZhbGlkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCEkaW5wdXQuYXR0cihcImZvcm1ub3ZhbGlkYXRlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIGdldE1vZGFsSUQoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMuZWxlbWVudCkucGFyZW50cygnLm1vZGFsJykuYXR0cignaWQnKTtcbiAgICB9XG5cbiAgICB0b2dnbGVGb3JtU3VibWlzc2lvbigpIHtcblxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWU7XG5cbiAgICAgICAgLy8gaWYgZWFjaCBpbnB1dCBpcyBtYXJrZWQgYXMgdmFsaWQgdGhlbiBlbmFibGUgdGhlIGZvcm0gc3VibWl0IGJ1dHRvblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZCgnaW5wdXQ6bm90KDpkaXNhYmxlZCksc2VsZWN0Om5vdCg6ZGlzYWJsZWQpLHRleHRhcmVhOm5vdCg6ZGlzYWJsZWQpJykuZWFjaChmdW5jdGlvbiAoaWR4LCBpbnB1dCkge1xuICAgICAgICAgICAgLy8gbWFrZSBhIGNvbmNhdGVuYXRlICYgYmV0d2VlbiB2YWxpZCBmbGFnc1xuICAgICAgICAgICAgaXNWYWxpZCAmPSBpbnB1dC52YWxpZGl0eS52YWxpZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXNWYWxpZFxuICAgICAgICAgICAgPyAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddLFt0eXBlPSd0ZXN0J11gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgICAgIDogJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXSxbdHlwZT0ndGVzdCddYCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgfVxuXG4gICAgY2xlYW5Gb3JtKCkge1xuICAgICAgICAvKiByZW1vdmUgdmFsaWRhdGlvbiBjbGFzcyBmcm9tIGZpZWxkcyAqL1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZCgnaW5wdXQsdGV4dGFyZWEsc2VsZWN0JykuZWFjaChmdW5jdGlvbiAoaSwgaW5wdXQpIHtcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoYGlzLXZhbGlkYCkucmVtb3ZlQ2xhc3MoYGlzLWludmFsaWRgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qIHJlc2V0IGFsbCB0aGUgdmFsdWVzICovXG4gICAgICAgICQodGhpcy5lbGVtZW50KVswXS5yZXNldCgpO1xuICAgIH1cblxuICAgIG1ha2VSZXF1ZXN0KCkge1xuXG4gICAgICAgIGNvbnN0ICRmZWVkYmFja0xhYmVsID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYC5pbnZhbGlkLWZlZWRiYWNrYCk7XG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J11gKTtcbiAgICAgICAgbGV0IGRhdGFUb1NlbmQgPSB0aGlzLm9wdGlvbnMuYmVmb3JlU3VtYml0KHRoaXMuZGF0YSk7XG5cbiAgICAgICAgZGF0YVRvU2VuZC5jc3JmID0gdGhpcy5jc3JmO1xuICAgICAgICBkYXRhVG9TZW5kID0gJC5leHRlbmQoZGF0YVRvU2VuZCwgdGhpcy5vcHRpb25zLnN1Ym1pdE9wdGlvbnMpO1xuXG4gICAgICAgIC8qIGNsZWFuIHByZXZpb3VzIHN0YXRlIGFuZCBkaXNhYmxlIGJ1dHRvbiAqL1xuICAgICAgICBzdWJtaXRCdXR0b24uYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lbmRwb2ludCkge1xuICAgICAgICAgICAgbGV0IHJlcXVlc3Q7XG5cbiAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMubWV0aG9kID09IFwicG9zdFwiKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9ICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5vcHRpb25zLmVuZHBvaW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhVG9TZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBzZWxmLm9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9ICQuZ2V0KHRoaXMub3B0aW9ucy5lbmRwb2ludCwgZGF0YVRvU2VuZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXNTdWJtaXR0aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmVxdWVzdC5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSwgdGV4dFN0YXR1cykge1xuXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgc3VibWl0dGluZyBzdGF0ZVxuICAgICAgICAgICAgICAgIHNlbGYuaXNTdWJtaXR0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIGN1cnJlbnQgZm9ybSBzdGF0ZVxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnMucmVzZXRBZnRlclN1Ym1pdCkgc2VsZi5jbGVhbkZvcm0oKTtcbiAgICAgICAgICAgICAgICAkZmVlZGJhY2tMYWJlbC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gc2VsZi5vcHRpb25zLm9uU3VibWl0U3VjY2VzcyhyZXNwb25zZSwgZGF0YVRvU2VuZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN1Ym1pdCByZXR1cm4gYSB0cnVlIGJvb2xlYW4gdGhlbiBjbG9zZSB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5kaWFsb2cubW9kYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nLm1vZGFsKCdoaWRlJylcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZ1swXS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAkKGAubW9kYWwtYmFja2Ryb3AuZmFkZS5zaG93YCkucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiB1bmJpbmQgdGhlIG9sZCBjbG9zdXJlIG9uIHN1Ym1pdCBldmVudCBhbmQgYmluZCBhIG5ldyBvbmUgKi9cbiAgICAgICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkub2ZmKCdzdWJtaXQnLCBzZWxmLnN1Ym1pdEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVTdWJtaXQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmFpbChmdW5jdGlvbiAoanF4aHIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG5cbiAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0ganF4aHIucmVzcG9uc2VKU09OO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYyAhPT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLnJjIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAkZmVlZGJhY2tMYWJlbC5odG1sKHJlc3BvbnNlLnJjX3N0cl9ocikuc2hvdygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5vblN1Ym1pdEVycm9yKHJlc3BvbnNlLCBkYXRhVG9TZW5kLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFsd2F5cyhmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2UgeyAvLyBubyBlbmRwb2ludFxuXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIGN1cnJlbnQgZm9ybSBzdGF0ZVxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vaWYgKHNlbGYub3B0aW9ucy5yZXNldEFmdGVyU3VibWl0KSBzZWxmLmNsZWFuRm9ybSgpO1xuICAgICAgICAgICAgICAgICRmZWVkYmFja0xhYmVsLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBzZWxmLm9wdGlvbnMub25TdWJtaXRTdWNjZXNzKHt9LCBkYXRhVG9TZW5kLCBzZWxmKTtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3VibWl0IHJldHVybiBhIHRydWUgYm9vbGVhbiB0aGVuIGNsb3NlIHRoZSBtb2RhbFxuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICBpZihzZWxmLmRpYWxvZy5tb2RhbClcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2cubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiB1bmJpbmQgdGhlIG9sZCBjbG9zdXJlIG9uIHN1Ym1pdCBldmVudCBhbmQgYmluZCBhIG5ldyBvbmUgKi9cbiAgICAgICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkub2ZmKCdzdWJtaXQnLCBzZWxmLnN1Ym1pdEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVTdWJtaXQoKTtcblxuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVJlc2V0QnV0dG9uKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0ncmVzZXQnXWApO1xuICAgICAgICBpZiAocmVzZXRCdXR0b24ubGVuZ3RoID09IDApIHJldHVybjtcblxuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gTnRvcFV0aWxzLnNlcmlhbGl6ZUZvcm1BcnJheSgkKHRoaXMuZWxlbWVudCkuc2VyaWFsaXplQXJyYXkoKSk7XG5cbiAgICAgICAgcmVzZXRCdXR0b24uY2xpY2soZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgcHJldmlvdXMgdmFsdWVzXG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudCkuZmluZCgnaW5wdXQ6dmlzaWJsZSxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uIChpLCBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9ICQoaW5wdXQpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAkKGlucHV0KS52YWwoZGVmYXVsdFZhbHVlc1trZXldKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLWludmFsaWQnKS5yZW1vdmVDbGFzcygnaXMtdmFsaWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNvbnN0IG1vZGFsSGFuZGxlciA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggIT0gMSkgdGhyb3cgbmV3IEVycm9yKFwiT25seSBhIGZvcm0gZWxlbWVudCBjYW4gYnkgaW5pdGlhbGl6ZWQhXCIpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcbiAgICAgICAgY3NyZjogJycsXG4gICAgICAgIGVuZHBvaW50OiAnJyxcbiAgICAgICAgcmVzZXRBZnRlclN1Ym1pdDogdHJ1ZSxcbiAgICAgICAgLyogVHJ1ZSB0byBza2lwIHRoZSBhcmUteW91LXN1cmUgY2hlY2sgb24gdGhlIGRpYWxvZyAqL1xuICAgICAgICBkb250RGlzYWJsZVN1Ym1pdDogZmFsc2UsXG4gICAgICAgIC8qIFRydWUgaWYgdGhlIHJlcXVlc3QgaXNuJ3QgZG9uZSBieSBBSkFYIHJlcXVlc3QgKi9cbiAgICAgICAgaXNTeW5jUmVxdWVzdDogZmFsc2UsXG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCBkYXRhIGFzeW5jaHJvbnVzbHkgZnJvbSB0aGUgc2VydmVyIG9yXG4gICAgICAgICAqIGxvYWRzIGRhdGEgZGlyZWN0bHkgZnJvbSB0aGUgY3VycmVudCBwYWdlLlxuICAgICAgICAgKiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm5zIHRoZSBmZXRjaGVkIGRhdGEuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIFJldHVybnMgdGhlIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nXG4gICAgICAgICAqIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uIHdoZW4gZmV0Y2hpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIGxvYWRGb3JtRGF0YTogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoKGBlbmRwb2ludC90by9kYXRhYCk7XG4gICAgICAgICAqICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGRhdGEuanNvbigpO1xuICAgICAgICAgKiAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgbG9hZEZvcm1EYXRhOiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG9uTW9kYWxJbml0KCkgaXMgaW52b2tlZCB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBsb2FkIHRoZSBmZXRjaGVkIGRhdGEgZnJvbSBgbG9hZEZvcm1EYXRhKClgXG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybSBtb2RhbCBpbnB1dHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsb2FkZWREYXRhIFRoaXMgYXJndW1lbnQgY29udGFpbnMgdGhlIGZldGNoZWQgZGF0YSBvYnRhaW5lZFxuICAgICAgICAgKiBmcm9tIGBsb2FkRm9ybURhdGEoKWBcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBzaG93aW5nIGhvdyB0byB1c2VcbiAgICAgICAgICogdGhlIGZ1bmN0aW9uICh3ZSBzdXBwb3NlIHRoYXQgbG9hZEZvcm1EYXRhKCkgcmV0dXJucyB0aGUgZm9sbG93aW5nXG4gICAgICAgICAqIG9iamVjdDogYGxvYWRlZFVzZXIgPSB7Zmlyc3RuYW1lOiAnRm9vJywgbGFzdG5hbWU6ICdCYXInLCBpZDogMTQyODEwM31gKVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbEluaXQ6IGZ1bmN0aW9uKGxvYWRlZFVzZXIpIHtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjZmlyc3RuYW1lYCkudmFsKGxvYWRlZFVzZXIuZmlyc3RuYW1lKTtcbiAgICAgICAgICogICAgICAkKGAjdXNlck1vZGFsIGZvcm0gaW5wdXQjbGFzdG5hbWVgKS52YWwobG9hZGVkVXNlci5sYXN0bmFtZSk7XG4gICAgICAgICAqICAgICAgJChgI3VzZXJNb2RhbCBmb3JtIGlucHV0I2lkYCkudmFsKGxvYWRlZFVzZXIuaWQpO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25Nb2RhbEluaXQ6IGZ1bmN0aW9uIChsb2FkZWREYXRhKSB7IH0sXG5cbiAgICAgICAgb25Nb2RhbFNob3c6IGZ1bmN0aW9uICgpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZ1bmN0aW9uIGJlZm9yZVN1Ym1pdCgpIGlzIGludm9rZWQgYWZ0ZXIgdGhlIHVzZXJcbiAgICAgICAgICogc3VibWl0IHRoZSBmb3JtLiBUaGUgZnVuY3Rpb24gbXVzdCByZXR1cm4gdGhlIGRhdGEgdG9cbiAgICAgICAgICogc2VuZCB0byB0aGUgZW5kcG9pbnQuIElmIHRoZSBjaG9zZW4gbWV0aG9kIGlzIGBwb3N0YFxuICAgICAgICAgKiBhIGNzcmYgd2lsbCBiZSBhZGQgdG8gdGhlIHJldHVybmVkIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgV2Ugc2hvdyBiZWxvdyBhIHNpbXBsZSBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogYmVmb3JlU3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICogICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgKiAgICAgICAgICBhY3Rpb246ICdlZGl0JyxcbiAgICAgICAgICogICAgICAgICAgSlNPTjogSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplQXJyYXlGb3JtKCQoYGZvcm1gKS5zZXJpYWxpemVBcnJheSgpKSlcbiAgICAgICAgICogICAgICB9O1xuICAgICAgICAgKiAgICAgIHJldHVybiBib2R5O1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgYmVmb3JlU3VtYml0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB7fSB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgd2hlbiB0aGUgcmVxdWVzdCB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgICogdGVybWluYXRlcyBzdWNjZXNzZnVsbHkgKDIwMCkuIEJlZm9yZSB0aGUgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAqIGEgbmV3IGNzcmYgcmV0cml2ZWQgZnJvbSB0aGUgc2VydmVyIHdpbGwgYmUgc2V0IGZvclxuICAgICAgICAgKiBmdXR1cmUgY2FsbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgcmVzcG9uc2VcbiAgICAgICAgICogZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdFN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAqICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coYFRoZSB1c2VyIGluZm8gaGFzIGJlZW4gZWRpdCB3aXRoIHN1Y2Nlc3MhYCk7XG4gICAgICAgICAqICAgICAgfVxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25TdWJtaXRTdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHJlcXVlc3QgdG8gdGhlIGVuZHBvaW50XG4gICAgICAgICAqIHRlcm1pbmF0ZXMgd2l0aCBmYWlsdXJlICghPSAyMDApLiBCZWZvcmUgdGhlIGNhbGwgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgKiBhIG5ldyBjc3JmIHJldHJpdmVkIGZyb20gdGhlIHNlcnZlciB3aWxsIGJlIHNldCBmb3JcbiAgICAgICAgICogZnV0dXJlIGNhbGxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VudCBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgc2VudCBkYXRhIHRvIHRoZSBlbmRwb2ludFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFN0YXR1cyBJdCBjb250YWlucyB0aGUgZXJyb3IgdGV4dCBzdGF0dXMgb2J0YWluZWRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVycm9yVGhyb3duIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGluZm8gYWJvdXQgdGhlIGVycm9yXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBhIHNpbXBsZSB1c2VyIGNhc2U6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbihzZW50LCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGBPcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nIWApO1xuICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yVGhyb3duKTtcbiAgICAgICAgICogICAgICB9XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvblN1Ym1pdEVycm9yOiBmdW5jdGlvbiAoc2VudCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xpY2sgdGhlIHJlc2V0IGlucHV0XG4gICAgICAgICAqIGluc2lkZSB0aGUgZm9ybS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHREYXRhIEl0IGNvbnRhaW5zIHRoZSBmZXRjaGVkIGRhdGEgZnJvbVxuICAgICAgICAgKiBgbG9hZEZvcm1EYXRhKClgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIGhvdyB0byB1c2UgdGhlIGZ1bmN0aW9uOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25Nb2RhbFJlc2V0OiBmdW5jdGlvbihkZWZhdWx0RGF0YSkge1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2lkYCkudmFsKGRlZmF1bHREYXRhLmlkKTtcbiAgICAgICAgICogICAgICAkKGBpbnB1dCNuYW1lYCkudmFsKGRlZmF1bHREYXRhLm5hbWUpO1xuICAgICAgICAgKiAgICAgICQoYGlucHV0I2FkZHJlc3NgKS52YWwoZGVmYXVsdERhdGEuYWRkcmVzcyk7XG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvbk1vZGFsUmVzZXQ6IGZ1bmN0aW9uIChkZWZhdWx0RGF0YSkgeyB9LFxuICAgIH0sIGFyZ3MpO1xuXG4gICAgY29uc3QgbWggPSBuZXcgTW9kYWxIYW5kbGVyKHRoaXMsIG9wdGlvbnMpO1xuICAgIG1oLmRlbGVnYXRlU3VibWl0KCk7XG5cbiAgICByZXR1cm4gbWg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1vZGFsSGFuZGxlclxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmNvbnN0IHR5cGVzID0ge1xuICAgIG5vX2Zvcm1hdHRpbmc6IHtcbiAgICAgICAgaWQ6IFwibm9fZm9ybWF0dGluZ1wiLFxuICAgICAgICB1bTogbnVsbCxcbiAgICAgICAgc3RlcDogbnVsbCxcbiAgICAgICAgZGVjaW1hbDogbnVsbCxcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICAgIGlkOiBcIm51bWJlclwiLFxuICAgICAgICB1bTogW1wiXCIsIFwiS1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogbnVsbCxcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgIH0sXG4gICAgZnVsbF9udW1iZXI6IHtcbiAgICAgICAgaWQ6IFwibnVtYmVyXCIsXG4gICAgICAgIHVtOiBbXCJcIiwgXCJLXCIsIFwiTVwiLCBcIkdcIiwgXCJUXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiBudWxsLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgICAgIHRob3VzYW5kc19zZXA6IFwiLFwiLCAvKiBDb21tZW50IHRoaXMgdG8gZW5hYmxlIFwidW1cIiBzY2FsZWQgc3R5bGUgKi9cbiAgICB9LFxuICAgIGJ5dGVzOiB7XG4gICAgICAgIGlkOiBcImJ5dGVzXCIsXG4gICAgICAgIHVtOiBbXCJCXCIsIFwiS0JcIiwgXCJNQlwiLCBcIkdCXCIsIFwiVEJcIiwgXCJQQlwiLCBcIkVCXCJdLFxuICAgICAgICBzdGVwOiAxMDI0LFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgYnBzOiB7XG4gICAgICAgIGlkOiBcImJwc1wiLFxuICAgICAgICB1bTogW1wiYnBzXCIsIFwiS2Jwc1wiLCBcIk1icHNcIiwgXCJHYnBzXCIsIFwiVGJwc1wiLCBcIlBicHNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogOCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBzcGVlZDoge1xuICAgICAgICBpZDogXCJzcGVlZFwiLFxuICAgICAgICB1bTogW1wiYml0XCIsIFwiS2JpdFwiLCBcIk1iaXRcIiwgXCJHYml0XCIsIFwiVGJpdFwiLCBcIlBiaXRcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDAsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBmbG93czoge1xuICAgICAgICBpZDogXCJmbG93c1wiLFxuICAgICAgICB1bTogW1wiZmxvd3NcIiwgXCJLZmxvd3NcIiwgXCJNZmxvd3NcIiwgXCJHZmxvd3NcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGZwczoge1xuICAgICAgICBpZDogXCJmcHNcIixcbiAgICAgICAgdW06IFtcImZsb3dzL3NcIiwgXCJLZmxvd3Mvc1wiLCBcIk1mbG93cy9zXCIsIFwiR2Zsb3dzL3NcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGFsZXJ0czoge1xuICAgICAgICBpZDogXCJhbGVydHNcIixcbiAgICAgICAgdW06IFtcImFsZXJ0c1wiLCBcIkthbGVydHNcIiwgXCJNYWxlcnRzXCIsIFwiR2FsZXJ0c1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGFsZXJ0cHM6IHtcbiAgICAgICAgaWQ6IFwiYWxlcnRwc1wiLFxuICAgICAgICB1bTogW1wiYWxlcnRzL3NcIiwgXCJLYWxlcnRzL3NcIiwgXCJNYWxlcnRzL3NcIiwgXCJHYWxlcnRzL3NcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBoaXRzOiB7XG4gICAgICAgIGlkOiBcImhpdHNcIixcbiAgICAgICAgdW06IFtcImhpdHNcIiwgXCJLaGl0c1wiLCBcIk1oaXRzXCIsIFwiR2hpdHNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGhpdHNzOiB7XG4gICAgICAgIGlkOiBcImhpdHNzXCIsXG4gICAgICAgIHVtOiBbXCJoaXRzL3NcIiwgXCJLaGl0cy9zXCIsIFwiTWhpdHMvc1wiLCBcIkdoaXRzL3NcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIHBhY2tldHM6IHtcbiAgICAgICAgaWQ6IFwicGFja2V0c1wiLFxuICAgICAgICB1bTogW1wicGFja2V0c1wiLCBcIktwYWNrZXRzXCIsIFwiTXBhY2tldHNcIiwgXCJHcGFja2V0c1wiLCBcIlRwYWNrZXRzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAwLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBwcHM6IHtcbiAgICAgICAgaWQ6IFwicHBzXCIsXG4gICAgICAgIHVtOiBbXCJwcHNcIiwgXCJLcHBzXCIsIFwiTXBwc1wiLCBcIkdwcHNcIiwgXCJUcHBzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBtczoge1xuICAgICAgICBpZDogXCJtc1wiLFxuICAgICAgICB1bTogW1wibXNcIiwgXCJzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBwZXJjZW50YWdlOiB7XG4gICAgICAgIGlkOiBcInBlcmNlbnRhZ2VcIixcbiAgICAgICAgdW06IFtcIiVcIl0sXG4gICAgICAgIHN0ZXA6IDEwMSxcbiAgICAgICAgZGVjaW1hbDogMCxcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIG1heF92YWx1ZTogMTAwLFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gZ2V0VW5pdE1lYXN1cmVMZW4odHlwZSkge1xuICAgIC8vIDAwMC4wMFxuICAgIGxldCB0ID0gdHlwZXNbdHlwZV07XG4gICAgbGV0IHNwYWNlVmFsdWUgPSAzO1xuICAgIGlmICh0LmRlY2ltYWwgIT0gbnVsbCAmJiB0LmRlY2ltYWwgPiAwKSB7ICAgICAgICBcbiAgICAgICAgc3BhY2VWYWx1ZSA9IDY7XG4gICAgfVxuICAgIGxldCBzcGFjZVVtID0gMDtcbiAgICBpZiAodC51bSAhPSBudWxsKSB7XG4gICAgICAgIHNwYWNlVW0gPSBNYXRoLm1heCguLi50LnVtLm1hcCgodW0pID0+IHVtLmxlbmd0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gKHNwYWNlVmFsdWUgKyAxICsgc3BhY2VVbSk7XG59XG5cbmZ1bmN0aW9uIGdldFNjYWxlRmFjdG9ySW5kZXgodHlwZSwgdmFsdWUpIHtcbiAgICBsZXQgdHlwZU9wdGlvbnMgPSB0eXBlc1t0eXBlXTtcbiAgICBpZiAodHlwZSA9PSB0eXBlcy5ub19mb3JtYXR0aW5nLmlkIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXMgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSAqPSB0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXM7XG4gICAgfVxuICAgIGxldCBzdGVwID0gdHlwZU9wdGlvbnMuc3RlcDtcbiAgICBsZXQgbmVnYXRpdmVWYWx1ZSA9IHZhbHVlIDwgMDtcbiAgICBpZiAobmVnYXRpdmVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbWVhc3VyZXMgPSB0eXBlT3B0aW9ucy51bTtcbiAgICB3aGlsZSAodmFsdWUgPj0gc3RlcCAmJiBpIDwgbWVhc3VyZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgLyBzdGVwO1xuICAgICAgICBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiBnZXRGb3JtYXR0ZXIodHlwZSwgYWJzb2x1dGVWYWx1ZSwgc2NhbGVGYWN0b3JJbmRleCkge1xuICAgIGxldCB0eXBlT3B0aW9ucyA9IHR5cGVzW3R5cGVdO1xuICAgIGlmICh0eXBlT3B0aW9ucyA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgXG4gICAgYWJzb2x1dGVWYWx1ZSB8PSB0eXBlT3B0aW9ucy5hYnNvbHV0ZV92YWx1ZTsgXG4gICAgbGV0IGZvcm1hdHRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT0gdHlwZXMubm9fZm9ybWF0dGluZy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlT3B0aW9ucy5zY2FsZV92YWx1ZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWUgKj0gdHlwZU9wdGlvbnMuc2NhbGVfdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZWdhdGl2ZVZhbHVlID0gdmFsdWUgPCAwO1xuICAgICAgICBpZiAobmVnYXRpdmVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuXG4gICAgICAgIGlmICh0eXBlT3B0aW9ucy5tYXhfdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHR5cGVPcHRpb25zLm1heF92YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0eXBlT3B0aW9ucy5tYXhfdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZU9wdGlvbnMudGhvdXNhbmRzX3NlcCkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArICcnO1xuICAgICAgICAgICAgdmFyIHggPSB2YWx1ZS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgdmFyIHgxID0geFswXTtcbiAgICAgICAgICAgIHZhciB4MiA9ICh4Lmxlbmd0aCA+IDEpID8gKCcuJyArIHhbMV0pIDogJyc7XG4gICAgICAgICAgICB2YXIgcmd4ID0gLyhcXGQrKShcXGR7M30pLztcbiAgICAgICAgICAgIHdoaWxlIChyZ3gudGVzdCh4MSkpIHtcbiAgICAgICAgICAgICAgICB4MSA9IHgxLnJlcGxhY2Uocmd4LCAnJDEnICsgJywnICsgJyQyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geDEgKyB4MjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHN0ZXAgPSB0eXBlT3B0aW9ucy5zdGVwO1xuICAgICAgICBsZXQgZGVjaW1hbCA9IHR5cGVPcHRpb25zLmRlY2ltYWw7XG4gICAgICAgIGxldCBtZWFzdXJlcyA9IHR5cGVPcHRpb25zLnVtO1xuICAgICAgICBsZXQgaSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKCh2YWx1ZSA+PSBzdGVwICYmIGkgPCBtZWFzdXJlcy5sZW5ndGggJiYgIXNjYWxlRmFjdG9ySW5kZXgpIHx8IChzY2FsZUZhY3RvckluZGV4ICE9IG51bGwgJiYgaSA8IHNjYWxlRmFjdG9ySW5kZXgpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gc3RlcDtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWNpbWFsICE9IG51bGwgJiYgZGVjaW1hbCA+IDApIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKiBNYXRoLnBvdygxMCwgZGVjaW1hbCk7XG4gICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIE1hdGgucG93KDEwLCBkZWNpbWFsKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9GaXhlZChkZWNpbWFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChuZWdhdGl2ZVZhbHVlICYmICFhYnNvbHV0ZVZhbHVlKSB7IHZhbHVlICo9IC0xOyB9XG4gICAgICAgIGxldCB2YWxTdHJpbmcgPSBgJHt2YWx1ZX1gO1xuICAgICAgICAvLyBpZiAodmFsU3RyaW5nLmxlbmd0aCA8IG1heExlblZhbHVlKSB7XG4gICAgICAgIC8vICAgICB2YWxTdHJpbmcgPSB2YWxTdHJpbmcucGFkRW5kKG1heExlblZhbHVlIC0gdmFsU3RyaW5nLmxlbmd0aCwgXCIgXCIpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGxldCBtU3RyaW5nID0gYCR7bWVhc3VyZXNbaV19YDtcbiAgICAgICAgLy8gaWYgKG1TdHJpbmcubGVuZ3RoIDwgbWF4TGVuVW0pIHtcbiAgICAgICAgLy8gICAgIG1TdHJpbmcgPSBtU3RyaW5nLnBhZFN0YXJ0KG1heExlblVtIC0gbVN0cmluZy5sZW5ndGgsIFwiX1wiKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBsZXQgdGV4dCA9IGAke3ZhbFN0cmluZ30gJHttU3RyaW5nfWA7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVyO1xufVxuXG5jb25zdCBmb3JtYXR0ZXJVdGlscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVzLFxuICAgICAgICBnZXRVbml0TWVhc3VyZUxlbixcbiAgICAgICAgZ2V0Rm9ybWF0dGVyLFxuICAgICAgICBnZXRTY2FsZUZhY3RvckluZGV4LFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlclV0aWxzO1xuIiwiaW1wb3J0IE50b3BVdGlscyBmcm9tICcuL250b3AtdXRpbHMnXG53aW5kb3cuTnRvcFV0aWxzID0gTnRvcFV0aWxzXG5cbmltcG9ydCB7IGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cywgZGF0YXRhYmxlRm9yRWFjaFJvdywgZGF0YXRhYmxlSXNFbXB0eSwgZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3csIGRhdGF0YWJsZUFkZEVtcHR5Um93LCBkYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcywgZGF0YXRhYmxlR2V0QnlGb3JtLCBkYXRhdGFibGVVbmRvQWRkUm93LCBkYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlLCBkYXRhdGFibGVJc0xhc3RQYWdlLCBkYXRhdGFibGVHZXRDb2x1bW4sIGRhdGF0YWJsZUdldENvbHVtbkluZGV4IH0gZnJvbSAnLi9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscydcblxud2luZG93LmRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyA9IGRhdGF0YWJsZUluaXRSZWZyZXNoUm93c1xud2luZG93LmRhdGF0YWJsZUZvckVhY2hSb3cgPSBkYXRhdGFibGVGb3JFYWNoUm93XG53aW5kb3cuZGF0YXRhYmxlSXNFbXB0eSA9IGRhdGF0YWJsZUlzRW1wdHlcbndpbmRvdy5kYXRhdGFibGVSZW1vdmVFbXB0eVJvdyA9IGRhdGF0YWJsZVJlbW92ZUVtcHR5Um93XG53aW5kb3cuZGF0YXRhYmxlQWRkRW1wdHlSb3cgPSBkYXRhdGFibGVBZGRFbXB0eVJvd1xud2luZG93LmRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zID0gZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXNcbndpbmRvdy5kYXRhdGFibGVHZXRCeUZvcm0gPSBkYXRhdGFibGVHZXRCeUZvcm1cbndpbmRvdy5kYXRhdGFibGVVbmRvQWRkUm93ID0gZGF0YXRhYmxlVW5kb0FkZFJvd1xud2luZG93LmRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlID0gZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZVxud2luZG93LmRhdGF0YWJsZUlzTGFzdFBhZ2UgPSBkYXRhdGFibGVJc0xhc3RQYWdlXG53aW5kb3cuZGF0YXRhYmxlR2V0Q29sdW1uID0gZGF0YXRhYmxlR2V0Q29sdW1uXG53aW5kb3cuZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXggPSBkYXRhdGFibGVHZXRDb2x1bW5JbmRleFxuXG5pbXBvcnQgJy4vZWJwZi11dGlscydcbmltcG9ydCBtb2RhbEhhbmRsZXIgZnJvbSAnLi9tb2RhbC9tb2RhbC11dGlscydcblxud2luZG93LiQuZm4ubW9kYWxIYW5kbGVyID0gbW9kYWxIYW5kbGVyXG5cbmltcG9ydCAnLi9zZXF1ZW5jZV9zdW5idXJzdCdcbmltcG9ydCAqIGFzIGVicGZVdGlscyBmcm9tICcuL2VicGYtdXRpbHMnXG5cbndpbmRvdy5lYnBmVXRpbHMgPSBlYnBmVXRpbHNcblxuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuL2Zvcm1hdHRlci11dGlsc1wiO1xud2luZG93Lm50b3BGb3JtYXR0ZXJVdGlscyA9IGZvcm1hdHRlclV0aWxzO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVWYWxpZGF0b3IoaXRlbXNfZnVuY3Rpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgdmFyIGNtcF9uYW1lID0gZmllbGQudmFsKCk7XG4gICAgdmFyIGNvdW50ID0gMDtcblxuICAgIC8vIHRoaXMgd2lsbCBiZSBjaGVja2VkIHNlcGFyYXRlbHksIHdpdGggJ3JlcXVpcmVkJyBhcmd1bWVudFxuICAgIGlmKCEgY21wX25hbWUpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGl0ZW1zX2Z1bmN0aW9uKGZpZWxkKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5hbWUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgaWYgKG5hbWUgPT0gY21wX25hbWUpXG4gICAgICAgIGNvdW50ID0gY291bnQgKyAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvdW50ID09IDE7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lbWJlclZhbHVlVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBtZW1iZXIgPSBpbnB1dC52YWwoKTtcbiAgaWYgKG1lbWJlciA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5pc19tYWNfYWRkcmVzcyhtZW1iZXIpIHx8IE50b3BVdGlscy5pc19uZXR3b3JrX21hc2sobWVtYmVyLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IocGF0dGVybikge1xuICByZXR1cm4gZnVuY3Rpb24gcGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yKGlucHV0KSB7XG4gICAgLy8gcmVxdWlyZWQgaXMgY2hlY2tlZCBzZXBhcmF0ZWx5XG4gICAgaWYoIWlucHV0LnZhbCgpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gJChpbnB1dCkudmFsKCkubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIG90aGVyX2lucHV0ID0gJChpbnB1dCkuY2xvc2VzdChcImZvcm1cIikuZmluZChcIltkYXRhLXBhc3N3b3JkbWF0Y2hdXCIpLm5vdChpbnB1dCk7XG4gIGlmKCFpbnB1dC52YWwoKSB8fCAhb3RoZXJfaW5wdXQudmFsKCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gb3RoZXJfaW5wdXQudmFsKCkgPT09IGlucHV0LnZhbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9vbG5hbWVWYWxpZGF0b3IoaW5wdXQpIHtcbiAgLy8gcmVxdWlyZWQgaXMgY2hlY2tlZCBzZXBhcmF0ZWx5XG4gIGlmKCFpbnB1dC52YWwoKSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiAkKGlucHV0KS52YWwoKS5tYXRjaCgvXlthLXowLTlfXSokLyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXNzd29yZE1hdGNoUmVjaGVjayhmb3JtKSB7XG4gIHZhciBpdGVtcyA9ICQoZm9ybSkuZmluZChcIltkYXRhLXBhc3N3b3JkbWF0Y2hdXCIpO1xuICB2YXIgbm90X2VtcHR5ID0gMDtcblxuICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGlmKCQodGhpcykudmFsKCkgIT0gXCJcIikgbm90X2VtcHR5Kys7XG4gIH0pO1xuXG4gIGlmKG5vdF9lbXB0eSA9PSBpdGVtcy5sZW5ndGgpIGl0ZW1zLnRyaWdnZXIoJ2lucHV0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBob3N0T3JNYWNWYWxpZGF0b3IoaW5wdXQpIHtcbiAgdmFyIGhvc3QgPSBpbnB1dC52YWwoKTtcblxuICAvKiBIYW5kbGVkIHNlcGFyYXRlbHkgKi9cbiAgaWYgKGhvc3QgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuaXNfbWFjX2FkZHJlc3MoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2NChob3N0KSB8fCBOdG9wVXRpbHMuaXNfZ29vZF9pcHY2KGhvc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXBBZGRyZXNzVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBob3N0ID0gaW5wdXQudmFsKCk7XG5cbiAgLyogSGFuZGxlZCBzZXBhcmF0ZWx5ICovXG4gIGlmIChob3N0ID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gTnRvcFV0aWxzLmlzX2dvb2RfaXB2NChob3N0KSB8fCBOdG9wVXRpbHMuaXNfZ29vZF9pcHY2KGhvc3QpO1xufVxuXG52YXIgZmlsdGVyc190b192YWxpZGF0ZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gYnBmVmFsaWRhdG9yKGZpbHRlcl9maWVsZCwgc3luYyA9IGZhbHNlKSB7XG4gIHZhciBmaWx0ZXIgPSBmaWx0ZXJfZmllbGQudmFsKCk7XG5cbiAgaWYgKGZpbHRlci50cmltKCkgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBrZXkgPSBmaWx0ZXJfZmllbGQuYXR0cihcIm5hbWVcIik7XG4gIHZhciB0aW1lb3V0ID0gMjUwO1xuXG4gIGlmICghZmlsdGVyc190b192YWxpZGF0ZVtrZXldKVxuICAgICBmaWx0ZXJzX3RvX3ZhbGlkYXRlW2tleV0gPSB7YWpheF9vYmo6bnVsbCwgdmFsaWQ6dHJ1ZSwgdGltZXI6bnVsbCwgc3VibWl0X3JlbWluZDpmYWxzZSwgbGFzdF92YWw6bnVsbH07XG4gIHZhciBzdGF0dXMgPSBmaWx0ZXJzX3RvX3ZhbGlkYXRlW2tleV07XG5cbiAgdmFyIHNlbmRBamF4ID0gZnVuY3Rpb24gKCkge1xuICAgIHN0YXR1cy50aW1lciA9IG51bGw7XG5cbiAgICB2YXIgZmluYWxseV9jaGVjayA9IGZ1bmN0aW9uICh2YWxpZCkge1xuICAgICAgc3RhdHVzLmFqYXhfb2JqID0gbnVsbDtcbiAgICAgIHN0YXR1cy52YWxpZCA9IHZhbGlkO1xuICAgICAgc3RhdHVzLmxhc3RfdmFsID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMubGFzdF92YWwgIT09IGZpbHRlcikge1xuICAgICAgaWYgKHN0YXR1cy5hamF4X29iailcbiAgICAgICAgc3RhdHVzLmFqYXhfb2JqLmFib3J0KCk7XG5cbiAgICAgIHN0YXR1cy5hamF4X29iaiA9ICQuYWpheCh7XG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGVjay9maWx0ZXIubHVhYCxcbiAgICAgICAgYXN5bmM6ICFzeW5jLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcXVlcnk6IGZpbHRlcixcbiAgICAgICAgfSwgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZpbmFsbHlfY2hlY2soc3RhdHVzLnZhbGlkKTtcbiAgICAgICAgfSwgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciB2YWxpZCA9IGRhdGEucmVzcG9uc2UgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgZmluYWxseV9jaGVjayh2YWxpZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwb3NzaWJseSBwcm9jZXNzIHRoZSByZW1pbmRlclxuICAgICAgZmluYWxseV9jaGVjayhzdGF0dXMudmFsaWQpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoc3luYykge1xuICAgIHNlbmRBamF4KCk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzLmxhc3RfdmFsID09PSBmaWx0ZXIpIHtcbiAgICAvLyBJZ25vcmluZ1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0dXMudGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGF0dXMudGltZXIpO1xuICAgICAgc3RhdHVzLnN1Ym1pdF9yZW1pbmQgPSBmYWxzZTtcbiAgICB9XG4gICAgc3RhdHVzLnRpbWVyID0gc2V0VGltZW91dChzZW5kQWpheCwgdGltZW91dCk7XG4gIH1cblxuICByZXR1cm4gc3RhdHVzLnZhbGlkO1xufVxuXG4iLCJpbXBvcnQgeyBtYWtlVW5pcXVlVmFsaWRhdG9yLCBtZW1iZXJWYWx1ZVZhbGlkYXRvciwgbWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvciwgcGFzc3dvcmRNYXRjaFZhbGlkYXRvciwgcG9vbG5hbWVWYWxpZGF0b3IsIHBhc3N3b3JkTWF0Y2hSZWNoZWNrLCBob3N0T3JNYWNWYWxpZGF0b3IsIGlwQWRkcmVzc1ZhbGlkYXRvciwgYnBmVmFsaWRhdG9yIH0gZnJvbSAnLi9udG9wbmctdmFsaWRhdG9ycy11dGlscydcblxud2luZG93Lm1ha2VVbmlxdWVWYWxpZGF0b3IgPSBtYWtlVW5pcXVlVmFsaWRhdG9yXG53aW5kb3cubWVtYmVyVmFsdWVWYWxpZGF0b3IgPSBtZW1iZXJWYWx1ZVZhbGlkYXRvclxud2luZG93Lm1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IgPSBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yXG53aW5kb3cucGFzc3dvcmRNYXRjaFZhbGlkYXRvciA9IHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3JcbndpbmRvdy5wb29sbmFtZVZhbGlkYXRvciA9IHBvb2xuYW1lVmFsaWRhdG9yXG53aW5kb3cucGFzc3dvcmRNYXRjaFJlY2hlY2sgPSBwYXNzd29yZE1hdGNoUmVjaGVja1xud2luZG93Lmhvc3RPck1hY1ZhbGlkYXRvciA9IGhvc3RPck1hY1ZhbGlkYXRvclxud2luZG93LmlwQWRkcmVzc1ZhbGlkYXRvciA9IGlwQWRkcmVzc1ZhbGlkYXRvclxud2luZG93LmJwZlZhbGlkYXRvciA9IGJwZlZhbGlkYXRvclxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbmV4cG9ydCBjb25zdCBudG9wbmdfc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBjb21wb25lbnRzX3JlYWR5ID0ge307XG4gICAgbGV0IHN1YnNjcmliZXJzID0gW107ICAgICAgICBcbiAgICByZXR1cm4ge1xuXHRyZWFkeTogZnVuY3Rpb24oY29tcG9uZW50X25hbWUpIHtcblx0ICAgIGNvbXBvbmVudHNfcmVhZHlbY29tcG9uZW50X25hbWVdID0gdHJ1ZTtcblx0ICAgIHN1YnNjcmliZXJzLmZpbHRlcigocykgPT4gcy5jb21wb25lbnRfbmFtZSA9PSBjb21wb25lbnRfbmFtZSkuZm9yRWFjaCgocykgPT4gcy5yZXNvbHZlKCkpO1xuXHQgICAgc3Vic2NyaWJlcnMgPSBzdWJzY3JpYmVycy5maWx0ZXIoKHMpID0+IHMuY29tcG9uZW50X25hbWUgIT0gY29tcG9uZW50X25hbWUpO1xuXHR9LFxuXHRvbl9yZWFkeTogZnVuY3Rpb24oY29tcG9uZW50X25hbWUpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZXZ0KSA9PiB7XG5cdFx0aWYgKGNvbXBvbmVudHNfcmVhZHlbY29tcG9uZW50X25hbWVdKSB7XG5cdFx0ICAgIHJlc29sdmUoKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRzdWJzY3JpYmVycy5wdXNoKHtyZXNvbHZlLCBjb21wb25lbnRfbmFtZSwgY29tcGxldGVkOiBmYWxzZX0pO1xuXHQgICAgfSk7XG5cdH0sXG4gICAgfTtcbn0oKTtcblxuLyoqXG4qIFV0aWxpdHkgZ2xvYmFscyBmdW5jdGlvbnMuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ191dGlsaXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGdsb2JhbF9odHRwX2hlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4ge1xuXHRpc19hcnJheTogZnVuY3Rpb24oZSkge1xuXHQgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSk7XG5cdH0sXG5cdGlzX29iamVjdDogZnVuY3Rpb24oZSkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiBlID09PSAnb2JqZWN0J1xuXHRcdCYmICF0aGlzLmlzX2FycmF5KGUpXG5cdFx0JiYgZSAhPT0gbnVsbDtcblx0fSxcblx0LyoqXG5cdCAqIERlZXAgY29weSBvZiBhIG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG9iai5cblx0ICogQHJldHVybnMge29iamVjdH0uXG5cdCAqL1xuXHRjbG9uZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzX29iamVjdChvYmopKSB7XG5cdFx0LyogVGhpcyBkb2VzIHRoZSBkZWVwIGNvcHkgdXNpbmcganF1ZXJ5IGZvciBvYmplY3RzICovXG5cdFx0cmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCBvYmopO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpe1xuXHRcdC8qIFRoaXMgZG9lcyB0aGUgZGVlcCBjb3B5IHVzaW5nIGpxdWVyeSBmb3Igb3RoZXIgdHlwZXMgKi9cblx0XHRsZXQgcmVzID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpICs9IDEpIHtcblx0XHQgICAgbGV0IGVsID0gdGhpcy5jbG9uZShvYmpbaV0pO1xuXHRcdCAgICByZXMucHVzaChlbCk7XG5cdFx0fVxuXHRcdHJldHVybiByZXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXHRcdC8vIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpXG5cdFx0cmV0dXJuIG9iajtcblx0ICAgIH1cblx0fSwgICAgICBcblx0b2JqZWN0X3RvX2FycmF5OiBmdW5jdGlvbihvYmopIHtcblx0ICAgIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gW107IH1cblx0ICAgIGxldCBhcnJheSA9IFtdO1xuXHQgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuXHRcdGFycmF5LnB1c2gob2JqW2tleV0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGFycmF5O1xuXHR9LFxuXHRnZXRfdXRjX3NlY29uZHM6IGZ1bmN0aW9uKHV0Y19tcykge1xuXHQgICAgaWYgKHV0Y19tcyA9PSBudWxsKSB7IHV0Y19tcyA9IERhdGUubm93KCk7IH1cbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodXRjX21zIC8gMTAwMCk7XG5cdH0sXG5cdGdldF90aW1lZnJhbWVzX2RpY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICBsZXQgdF9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbGV0IHRfd2VlayA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgdF9tb250aCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBsZXQgdF95ZWFyID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJtaW5cIjogbWluLFxuICAgICAgICAgICAgICAgIFwiNV9taW5cIjogbWluICogNSxcbiAgICAgICAgICAgICAgICBcIjEwX21pblwiOiBtaW4gKiAxMCxcbiAgICAgICAgICAgICAgICBcIjMwX21pblwiOiBtaW4gKiAzMCxcbiAgICAgICAgICAgICAgICBob3VyOiBtaW4gKiA2MCxcbiAgICAgICAgICAgICAgICBcIjJfaG91cnNcIjogMiAqIG1pbiAqIDYwLFxuICAgICAgICAgICAgICAgIFwiNl9ob3Vyc1wiOiA2ICogbWluICogNjAsXG4gICAgICAgICAgICAgICAgXCIxMl9ob3Vyc1wiOiAxMiAqIG1pbiAqIDYwLFxuICAgICAgICAgICAgICAgIGRheTogdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHRfZGF5LnNldERhdGUodF9kYXkuZ2V0RGF0ZSgpIC0gMSkpLFxuICAgICAgICAgICAgICAgIHdlZWs6IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0X3dlZWsuc2V0RGF0ZSh0X3dlZWsuZ2V0RGF0ZSgpIC0gNykpLFxuICAgICAgICAgICAgICAgIG1vbnRoOiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdF9tb250aC5zZXRNb250aCh0X21vbnRoLmdldE1vbnRoKCkgLSAxKSksXG4gICAgICAgICAgICAgICAgeWVhcjogdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHRfeWVhci5zZXRNb250aCh0X3llYXIuZ2V0TW9udGgoKSAtIDEyKSksXG4gICAgICAgICAgICB9O1xuXHR9LFxuXHQvLyBnaXZlbiB2YWxpZCBpbnRlcnZhbCBzdHJpbmcgZ2V0IHRpbWUgaW4gc2Vjb25kc1xuXHRnZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkOiBmdW5jdGlvbiAodGltZWZyYW1lX2lkKSB7XG4gICAgICAgICAgICBsZXQgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19kaWN0KCk7ICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB0aW1lZnJhbWVzX2RpY3RbaW50ZXJ2YWxfc3RyaW5nXSA9PSBudWxsID0+IGtleSBpcyBub3QgcHJlc2VudFxuICAgICAgICAgICAgaWYgKHRpbWVmcmFtZXNfZGljdFt0aW1lZnJhbWVfaWRdID09IG51bGwpIHtcblx0XHR0aHJvdyBgV3JvbmcgdGltZWZyYW1lX2lkIHBhc3NlZCAke3RpbWVmcmFtZV9pZH0sIHZhbGlkIGludGVydmFscyBhcmU6ICR7T2JqZWN0LmtleXModGltZWZyYW1lc19kaWN0KS5qb2luKFwiLCBcIil9YDtcbiAgICAgICAgICAgIH1cblx0ICAgIHJldHVybiB0aW1lZnJhbWVzX2RpY3RbdGltZWZyYW1lX2lkXTtcblx0fSxcblx0cm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQ6IGZ1bmN0aW9uKHRzLCB0aW1lZnJhbWVfaWQpIHtcblx0ICAgIGNvbnN0IHRpbWVmcmFtZSA9IHRoaXMuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCh0aW1lZnJhbWVfaWQpO1xuXHQgICAgcmV0dXJuIHRzIC0gKHRzICUgdGltZWZyYW1lKTtcblx0fSxcblx0Ly8gbWV0aG9kIHRvIHNldCBkZWZhdWx0IGVwb2NoIGJlZ2luIHRvIDMwX21pbiBhZ29cblx0c2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbDogZnVuY3Rpb24gKHRpbWVfaW50ZXJ2YWxfaWQ9XCIzMF9taW5cIiwgcm91bmRfdGltZWZyYW1lX2lkKSB7XG4gICAgICAgICAgICBsZXQgZXBvY2ggPSB7XG5cdFx0ZXBvY2hfYmVnaW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIiksXG5cdFx0ZXBvY2hfZW5kOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSxcbiAgICAgICAgICAgIH07XG5cdCAgICBjb25zdCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IHNlY29uZHNfaW5faW50ZXJ2YWwgPSB0aGlzLmdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQodGltZV9pbnRlcnZhbF9pZCk7XG4gICAgICAgICAgICBlcG9jaC5lcG9jaF9iZWdpbiA9IG5vd19zIC0gc2Vjb25kc19pbl9pbnRlcnZhbDtcbiAgICAgICAgICAgIGVwb2NoLmVwb2NoX2VuZCA9IG5vd19zO1xuICAgICAgICAgICAgaWYgKHJvdW5kX3RpbWVmcmFtZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXBvY2guZXBvY2hfYmVnaW4gPSB0aGlzLnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKGVwb2NoLmVwb2NoX2JlZ2luLCByb3VuZF90aW1lZnJhbWVfaWQpO1xuICAgICAgICAgICAgICAgIGVwb2NoLmVwb2NoX2VuZCA9IHRoaXMucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQoZXBvY2guZXBvY2hfZW5kLCByb3VuZF90aW1lZnJhbWVfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfYmVnaW5cIiwgZXBvY2guZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfZW5kXCIsIGVwb2NoLmVwb2NoX2VuZCk7XG5cdCAgICBcbiAgICAgICAgICAgIHJldHVybiBlcG9jaDtcblx0fSxcblx0Ly9zaG91bGQgdGFrZSBhIHN0cmluZyBhcyBwYXJhbWV0ZXIgdGhhdCByZXByZXNlbnQgdGltZTogbWluLCA1X21pbiwgMzBfbWluLCBob3VyLCAyX2hvdXJzLCA2X2hvdXJzLCAxMl9ob3VycywgZGF5LCB3ZWVrLCBtb250aCwgeWVhci4gSUQgdGltZV9pbnRlcnZhbF9pZCBpcyBudWxsLCBkZWZhdWx0IG11c3QgYmUgMzBfbWluXG5cdC8vIHJldHVybiBlcG9jaF9pbnRlcnZhbCBvbmx5IGlmIGVwb2NoIHVybCBpcyBzZXRcblx0Y2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWw6IGZ1bmN0aW9uICh0aW1lX2ludGVydmFsX2lkPVwiMzBfbWluXCIsIGZfY29uZGl0aW9uLCBnZXRfZXBvY2g9ZmFsc2UsIHJvdW5kX3RpbWVmcmFtZV9pZCkge1xuICAgICAgICAgICAgbGV0IGVwb2NoID0gdGhpcy5nZXRfdXJsX2Vwb2NoX2ludGVydmFsKCk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRpbWVfaW50ZXJ2YWxfaWQgaXMgMzAgKGRlZmF1bHQpXG4gICAgICAgICAgICBpZiAoZXBvY2guZXBvY2hfYmVnaW4gPT0gbnVsbCB8fCBlcG9jaC5lcG9jaF9lbmQgPT0gbnVsbCB8fCAoZl9jb25kaXRpb24gIT0gbnVsbCAmJiBmX2NvbmRpdGlvbihlcG9jaCkgPT0gdHJ1ZSkpICB7XG5cdFx0ZXBvY2ggPSB0aGlzLnNldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwodGltZV9pbnRlcnZhbF9pZCwgcm91bmRfdGltZWZyYW1lX2lkKTtcblx0XHRyZXR1cm4gZXBvY2g7XG4gICAgICAgICAgICB9XG5cdCAgICBpZiAoZ2V0X2Vwb2NoID09IHRydWUpIHtcblx0XHRyZXR1cm4gZXBvY2g7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbnVsbDtcblx0fSxcblx0Z2V0X3VybF9lcG9jaF9pbnRlcnZhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgZXBvY2ggPSB7XG5cdFx0ZXBvY2hfYmVnaW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIiksXG5cdFx0ZXBvY2hfZW5kOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSxcbiAgICAgICAgICAgIH07XG5cdCAgICByZXR1cm4gZXBvY2g7XG5cdH0sXG5cdGZyb21fdXRjX3NfdG9fc2VydmVyX2RhdGU6IGZ1bmN0aW9uKHV0Y19zZWNvbmRzKSB7XG5cdCAgICBsZXQgdXRjID0gdXRjX3NlY29uZHMgKiAxMDAwO1xuXHQgICAgbGV0IGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMpO1xuXHQgICAgbGV0IGxvY2FsX29mZnNldCA9IGRfbG9jYWwuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblx0ICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbWludXRlcyA9ICBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuXHQgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuXHQgICAgdmFyIGRfc2VydmVyID0gbmV3IERhdGUodXRjICsgb2Zmc2V0X21zKTtcblx0ICAgIHJldHVybiBkX3NlcnZlcjtcblx0fSxcbiAgICBnZXRfZGF0ZV9mb3JtYXQ6IGFzeW5jIGZ1bmN0aW9uKGlzX3JhbmdlX3BpY2tlciwgY3NyZiwgaHR0cF9wcmVmaXgpIHtcbiAgICAgICAgY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gICAgICAgICAgICBjc3JmOiBjc3JmXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGRhdGVfZm9ybWF0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy9kYXRlX2Zvcm1hdC5sdWFgO1xuICAgICAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZGF0ZV9mb3JtYXRfdXJsLCB7XG4gICAgICAgICAgICBpc19yYW5nZV9waWNrZXI6IGlzX3JhbmdlX3BpY2tlclxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpOyAgICBcbiAgICB9LFxuXHRmcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQ6IGZ1bmN0aW9uKHV0Y19tcywgZm9ybWF0KSB7XG5cdCAgICBpZiAoZm9ybWF0ID09IG51bGwpIHsgZm9ybWF0ID0gXCJERC9NTU0vWVlZWSBISDptbVwiOyB9XG5cdCAgICBsZXQgbSA9IG1vbWVudC50eih1dGNfbXMsIG50b3Bfem9uZWluZm8pO1xuXHQgICAgbGV0IHR6X3NlcnZlciA9IG0uZm9ybWF0KGZvcm1hdCk7XG5cdCAgICByZXR1cm4gdHpfc2VydmVyO1xuXHR9LFxuXHRjb3B5X29iamVjdF9rZXlzOiBmdW5jdGlvbihzb3VyY2Vfb2JqLCBkZXN0X29iaiwgcmVjdXJzaXZlX29iamVjdCA9IGZhbHNlKSB7XG5cdCAgICBpZiAoc291cmNlX29iaiA9PSBudWxsKSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgZm9yIChsZXQga2V5IGluIHNvdXJjZV9vYmopIHtcblx0ICAgIFx0aWYgKHNvdXJjZV9vYmpba2V5XSA9PSBudWxsKSB7IGNvbnRpbnVlOyB9XG5cdFx0LyogU2VjdXJpdHkgY2hlY2sgZm9yIFByb3RvdHlwZSBwb2xsdXRpb24gdnVsbmVyYWJpbGl0eSAqL1xuXHRcdGlmIChrZXkgPT09IFwiX19wcm90b19fXCIgfHwga2V5ID09PSBcImNvbnN0cnVjdG9yXCIpIHsgY29udGludWU7IH1cblx0ICAgIFx0aWYgKHJlY3Vyc2l2ZV9vYmplY3QgPT0gdHJ1ZSAmJiB0aGlzLmlzX29iamVjdChzb3VyY2Vfb2JqW2tleV0pICYmIHRoaXMuaXNfb2JqZWN0KGRlc3Rfb2JqW2tleV0pKSB7XG5cdCAgICBcdCAgICB0aGlzLmNvcHlfb2JqZWN0X2tleXMoc291cmNlX29ialtrZXldLCBkZXN0X29ialtrZXldLCByZWN1cnNpdmVfb2JqZWN0KTtcblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0ICAgIGRlc3Rfb2JqW2tleV0gPSBzb3VyY2Vfb2JqW2tleV07XG5cdCAgICBcdH1cblx0ICAgIH1cblx0fSxcbiAgICBnZXRfY3ZlX2RldGFpbHNfdXJsKGN2ZV9pZCwgc2Nhbl90eXBlKSB7XG4gICAgICAgIC8vICBJTVBPUlRBTlQ6IFRoZSByZXRyaWV2ZWQgdmFsdWUgbXVzdCBtYXRjaCB0aGUgdmFsdWUgaW4gXG4gICAgICAgIC8vICBzY3JpcHRzL2x1YS9tb2R1bGVzL3Z1bG5lcmFiaWxpdHlfc2Nhbi9jdmVfdXRpbHMubHVhIGZvciB0aGUgJ2N2ZV91dGlscy5nZXREb2NVUkwnIGZ1bmN0aW9uLlxuICAgICAgICBpZihzY2FuX3R5cGUgPT0gXCJjdmVcIikge1xuICAgICAgICAgICAgcmV0dXJuIGBodHRwczovL252ZC5uaXN0Lmdvdi92dWxuL2RldGFpbC8ke2N2ZV9pZH1gO1xuICAgICAgICB9IGVsc2UgaWYoc2Nhbl90eXBlID09IFwib3BlbnZhc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gYGh0dHBzOi8vdnVsbmVycy5jb20vb3BlbnZhcy9PUEVOVkFTOiR7Y3ZlX2lkfWA7XG4gICAgICAgIH1cbiAgICB9LFxuXHRzZXRfaHR0cF9nbG9iYWxzX2hlYWRlcnMoaGVhZGVycykge1xuXHQgICAgZ2xvYmFsX2h0dHBfaGVhZGVycyA9IGhlYWRlcnM7XG5cdH0sXG5cdGh0dHBfcG9zdF9yZXF1ZXN0OiBhc3luYyBmdW5jdGlvbih1cmwsIHBhcmFtcywgdGhyb3dfZXhjZXB0aW9uLCBub3RfdW53cmFwKSB7XG5cdCAgICBsZXQgaGVhZGVycyA9IHtcblx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdCAgICB9O1xuXHQgICAgaWYgKHBhcmFtcy5jc3JmID09IG51bGwpIHtcblx0XHR0aHJvdyBgTlVMTCBjc3JmIGluICR7dXJsfSBQT1NUIHJlcXVlc3QuYDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0aGlzLmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSwgdGhyb3dfZXhjZXB0aW9uLCBub3RfdW53cmFwKTtcblx0fSxcblx0aHR0cF9yZXF1ZXN0OiBhc3luYyBmdW5jdGlvbih1cmwsIG9wdGlvbnMsIHRocm93X2V4Y2VwdGlvbiwgbm90X3Vud3JhcCkge1xuXHQgICAgdHJ5IHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnMuaGVhZGVycyA9PSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuXHRcdH1cblx0XHRpZiAob3B0aW9ucy5oZWFkZXJzICE9IG51bGwgJiYgZ2xvYmFsX2h0dHBfaGVhZGVycyAhPSBudWxsKSB7XG5cdFx0ICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcblx0XHRcdC4uLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdC4uLmdsb2JhbF9odHRwX2hlYWRlcnMsXG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdGxldCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuXHRcdGlmIChyZXMub2sgPT09IGZhbHNlKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYGh0dHBfcmVxdWVzdCAke3VybH1cXG4gb2sgPT0gZmFsc2VgKTtcblx0XHQgICAgY29uc29sZS5lcnJvcihyZXMpO1xuXHRcdCAgICByZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0bGV0IGpzb25fcmVzID0gYXdhaXQgcmVzLmpzb24oKTtcblx0XHRpZiAobm90X3Vud3JhcCA9PT0gdHJ1ZSkgeyByZXR1cm4ganNvbl9yZXM7IH1cblx0XHRyZXR1cm4ganNvbl9yZXMucnNwO1xuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJVUkw6IFwiICsgdXJsKTtcblx0XHRpZiAodGhyb3dfZXhjZXB0aW9uID09IHRydWUpIHsgdGhyb3cgZXJyOyB9XG5cdFx0cmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdH0sXG5cdGRvd25sb2FkX1VSSTogZnVuY3Rpb24odXJpLCBuYW1lKSB7XG5cdCAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHQgICAgbGluay5kb3dubG9hZCA9IG5hbWU7XG5cdCAgICBsaW5rLmhyZWYgPSB1cmk7XG5cdCAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuXHQgICAgbGluay5jbGljaygpO1xuXHQgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcblx0fSxcblx0Z2V0X3JhbmRvbV9zdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cigyLCA4KTtcblx0fSxcblx0c3RyaW5nX2hhc2hfY29kZTogZnVuY3Rpb24ocykge1xuXHQgICAgbGV0IGhhc2ggPSAwLCBpLCBjaHI7XG5cdCAgICBpZiAocy5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHIgICA9IHMuY2hhckNvZGVBdChpKTtcblx0XHRoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuXHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdCAgICB9XG5cdCAgICByZXR1cm4gaGFzaDtcblx0fSxcblx0bW9kOiBmdW5jdGlvbih4LCB5KSB7XG5cdCAgICB4ID0geCAlIHk7XG5cdCAgICBpZiAoeCA8IDApIHsgeCArPSB5OyB9XG5cdCAgICByZXR1cm4geDtcblx0fVxuICAgIH1cbn0oKTtcblxuLyoqXG4qIEFsbG93cyB0byBtYW5hZ2UgdGhlIGFwcGxpY2F0aW9uIGdsb2JhbCBzdGF0dXMuXG4qIFRoZSBzdGF0dXMgaXMgaW5jYXBzdWxhdGVkIGludG8gdGhlIHVybC5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX3N0YXR1c19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGdsb2JhbF9zdGF0dXMgPSB7fTtcbiAgICAvKiogQHR5cGUge3sgW2lkOiBzdHJpbmddOiAoc3RhdHVzOiBvYmplY3QpID0+IHZvaWR9fSAqL1xuICAgIGxldCBzdWJzY3JpYmVycyA9IHt9OyAvLyBkaWN0aW9uYXJ5IG9mIHsgW2lkOiBzdHJpbmddOiBmX29uX250b3BuZ19zdGF0dXNfY2hhbmdlKCkgfVxuICAgIGNvbnN0IGNsb25lID0gKGUpID0+IG50b3BuZ191dGlsaXR5LmNsb25lKGUpO1xuXG4gICAgY29uc3QgcmVscGxhY2VfZ2xvYmFsX3N0YXR1cyA9IGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICBnbG9iYWxfc3RhdHVzID0gc3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoZSBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzIHdpdGggaWQgZGlmZmVyZW50IGZyb20gc2tpcF9pZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdHVzIG9iamVjdCB0aGF0IHJlcHJlc2VudCB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAqL1xuICAgIGNvbnN0IG5vdGlmeV9zdWJzY3JpYmVycyA9IGZ1bmN0aW9uKHN0YXR1cywgc2tpcF9pZCkge1xuICAgICAgICBmb3IgKGxldCBpZCBpbiBzdWJzY3JpYmVycykge1xuICAgICAgICAgICAgaWYgKGlkID09IHNraXBfaWQpIHsgY29udGludWU7IH1cbiAgICAgICAgICAgIGxldCBmX29uX2NoYW5nZSA9IHN1YnNjcmliZXJzW2lkXTtcbiAgICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGdsb2JhbCBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRfc3RhdHVzOiBmdW5jdGlvbihub3RfY2xvbmUpIHtcblx0ICAgIGlmIChub3RfY2xvbmUgPT0gdHJ1ZSkge1xuXHRcdHJldHVybiBnbG9iYWxfc3RhdHVzO1xuXHQgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lKGdsb2JhbF9zdGF0dXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZV9zdWJzY3JpYmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIG5vdGlmeV9zdWJzY3JpYmVycyhzdGF0dXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3MgdG8gc3Vic2NyaWJlcnMgZl9vbl9jaGFuZ2UgY2FsbGJhY2sgb24gc3RhdHVzIGNoYW5nZSBldmVudC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIGFuIGlkZW50aWZpZXIgb2YgdGhlIHN1YnNjcmlidGlvbi4gXG4gICAgICAgICAqIEBwYXJhbSB7KHN0YXR1czpvYmplY3QpID0+IHZvaWR9IGZfb25fY2hhbmdlIGNhbGxiYWNrIHRoYXQgdGFrZSBvYmplY3Qgc3RhdHVzIGFzIHBhcmFtLlxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGdldF9pbml0X25vdGlmeSBpZiB0cnVlIHRoZSBjYWxsYmFjayBpdCdzIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBsYXN0IHN0YXR1cyBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBvbl9zdGF0dXNfY2hhbmdlOiBmdW5jdGlvbihpZCwgZl9vbl9jaGFuZ2UsIGdldF9pbml0X25vdGlmeSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnNbaWRdID0gZl9vbl9jaGFuZ2U7XG4gICAgICAgICAgICBpZiAoZ2V0X2luaXRfbm90aWZ5ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgZl9vbl9jaGFuZ2UoY2xvbmUoc3RhdHVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJhcGxhY2VzIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMgYW5kIG5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogTm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdHVzIG9iamVjdCB0aGF0IHJlcHJlc2VudCB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIHJlcGxhY2Vfc3RhdHVzOiBmdW5jdGlvbihzdGF0dXMsIHNraXBfaWQpIHtcbiAgICAgICAgICAgIHJlbHBsYWNlX2dsb2JhbF9zdGF0dXMoc3RhdHVzKTtcbiAgICAgICAgICAgIG5vdGlmeV9zdWJzY3JpYmVycyhzdGF0dXMsIHNraXBfaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIG9yIHJlcGxhY2VzIGFsbCBvYmogcGFyYW0ga2V5cyB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICAgKiBOb3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogb2JqZWN0IHRvIGFkZCBvciBlZGl0IHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuIFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIGFkZF9vYmpfdG9fc3RhdHVzOiBmdW5jdGlvbihvYmosIHNraXBfaWQpIHtcbiAgICAgICAgICAgIGxldCBuZXdfc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKG9iaiwgbmV3X3N0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2Vfc3RhdHVzKG5ld19zdGF0dXMsIHNraXBfaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIG9yIHJlcGxhY2VzIHRoZSB2YWx1ZSBrZXkgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogTm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IGtleSB0byBhZGRzIG9yIHJlcGxhY2VzLlxuICAgICAgICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgdmFsdWUgdG8gYWRkcyBvciByZXBsYWNlcy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkX3ZhbHVlX3RvX3N0YXR1czogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgc2tpcF9pZCkge1xuICAgICAgICAgICAgbGV0IG5ld19zdGF0dXMgPSB0aGlzLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIG5ld19zdGF0dXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgLy8gLyogVGhpcyBpcyBuZWVkZWQgdG8gaGF2ZSBtdWxpcGxlIGZpbHRlcnMgZm9yIHRoZSBzYW1lIGtleSAqL1xuICAgICAgICAgICAgLy8gKG5ld19zdGF0dXNba2V5XSAmJiBuZXdfc3RhdHVzW2tleV0uc2VhcmNoKHZhbHVlKSA9PT0gLTEpID8gbmV3X3N0YXR1c1trZXldICs9IFwiLFwiICsgdmFsdWUgOiBuZXdfc3RhdHVzW2tleV0gPSB2YWx1ZVxuICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3N0YXR1cyhuZXdfc3RhdHVzLCBza2lwX2lkKTtcbiAgICAgICAgfSxcbiAgICB9XG59KCk7XG5cbmNvbnN0IG50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIgPSB7XG4gIC8vIGZpbHRlcnM6IGZ1bmN0aW9uKGtleSwgZmlsdGVycykge1xuICAvLyBcdGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuIFwiXCI7IH1cbiAgLy8gXHRsZXQgZmlsdGVyc19ncm91cHMgPSB7fTtcbiAgLy8gXHRmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcbiAgLy8gXHQgICAgbGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZi5pZF07XG4gIC8vIFx0ICAgIGlmIChncm91cCA9PSBudWxsKSB7XG4gIC8vIFx0XHRncm91cCA9IFtdO1xuICAvLyBcdFx0ZmlsdGVyc19ncm91cHNbZi5pZF0gPSBncm91cDtcbiAgLy8gXHQgICAgfVxuICAvLyBcdCAgICBncm91cC5wdXNoKGYpO1xuICAvLyBcdH0pO1xuICAvLyBcdGxldCB1cmxfcGFyYW1zX2FycmF5ID0gW107XG4gIC8vIFx0Zm9yIChsZXQgZl9pZCBpbiBmaWx0ZXJzX2dyb3Vwcykge1xuICAvLyBcdCAgICBsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmX2lkXTtcbiAgLy8gXHQgICAgbGV0IHVybF92YWx1ZXMgPSBncm91cC5maWx0ZXIoKGYpID0+IGYudmFsdWUgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBcIlwiKS5tYXAoKGYpID0+IGAke2YudmFsdWV9OyR7Zi5vcGVyYXRvcn1gKS5qb2luKFwiLFwiKTtcbiAgLy8gXHQgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKGZfaWQsIHVybF92YWx1ZXMpO1xuICAvLyBcdCAgICB1cmxfcGFyYW1zX2FycmF5LnB1c2godXJsX3BhcmFtcyk7XG4gIC8vIFx0fVxuICAvLyBcdHJldHVybiB1cmxfcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuICAvLyB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG50b3BuZ191cmxfbWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7eyBba2V5OiBzdHJpbmddOiAob2JqOiBhbnkpID0+IHN0cmluZ319ICovXG4gICAgbGV0IGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplciA9IHt9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMobnRvcG5nX3BhcmFtc191cmxfc2VyaWFsaXplciwgY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyKTtcbiAgXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBnZXRfdXJsX3BhcmFtczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9zZWFyY2hfcGFyYW1zOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgICAgY29uc3QgdXJsX3BhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModXJsKTtcbiAgICAgICAgICAgIHJldHVybiB1cmxfcGFyYW1zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfZW50cmllczogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBjb25zdCB1cmxfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXModXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB1cmxfcGFyYW1zLmVudHJpZXMoKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfZW50cnk6IGZ1bmN0aW9uKHBhcmFtX25hbWUsIHVybCkge1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSB0aGlzLmdldF91cmxfZW50cmllcyh1cmwpO1xuICAgICAgICAgICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSBwYXJhbV9uYW1lKSB7IHJldHVybiB2YWx1ZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0X3VybF9vYmplY3Q6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSB0aGlzLmdldF91cmxfZW50cmllcyh1cmwpO1xuICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9wZW5fbmV3X3dpbmRvdzogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBpZiAodXJsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB3aW5kb3cubG9jYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbG9hZF91cmw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9LFxuXG5cdGdvX3RvX3VybDogZnVuY3Rpb24odXJsKSB7XG5cdCAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB3aW5kb3cubG9jYXRpb24pO1xuXHQgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UodXJsKTtcblx0fSxcblxuICAgICAgICByZXBsYWNlX3VybDogZnVuY3Rpb24odXJsX3BhcmFtcykge1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBudWxsLCBgPyR7dXJsX3BhcmFtc31gKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXBsYWNlX3VybF9hbmRfcmVsb2FkOiBmdW5jdGlvbih1cmxfcGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKHVybF9wYXJhbXMpO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWRfdXJsKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VyaWFsaXplX3BhcmFtOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgJHtrZXl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gO1xuICAgICAgICB9LFx0XG5cbiAgICAgICAgc2V0X2N1c3RvbV9rZXlfc2VyaWFsaXplcjogZnVuY3Rpb24oa2V5LCBmX2dldF91cmxfcGFyYW0pIHtcbiAgICAgICAgICAgIGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplcltrZXldID0gZl9nZXRfdXJsX3BhcmFtO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0IGpzIG9iamVjdCBpbnRvIGEgc3RyaW5nIHRoYXQgcmVwcmVzZW50IHVybCBwYXJhbXMuXG4gICAgICAgICAqIFVzZXMgY3VzdG9tIHNlcmlhbGl6ZXIgaWYgc2V0LlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqLlxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfS5cbiAgICAgICAgICovXG4gICAgICAgIG9ial90b191cmxfcGFyYW1zOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRfc2VyaWFsaXplciA9IHRoaXMuc2VyaWFsaXplX3BhcmFtO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGxldCBzZXJpYWxpemVyID0gY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVyID0gZGVmYXVsdF9zZXJpYWxpemVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcGFyYW0gPSBzZXJpYWxpemVyKGtleSwgb2JqW2tleV0pO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB1cmxfcGFyYW1zID0gcGFyYW1zLmpvaW4oXCImXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHVybF9wYXJhbXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlX3BhcmFtczogZnVuY3Rpb24ocGFyYW1zX2tleSkge1xuICAgICAgICAgICAgbGV0IHNlYXJjaF9wYXJhbXMgPSB0aGlzLmdldF91cmxfc2VhcmNoX3BhcmFtcygpO1xuICAgICAgICAgICAgcGFyYW1zX2tleS5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoX3BhcmFtcy5kZWxldGUocCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwoc2VhcmNoX3BhcmFtcy50b1N0cmluZygpKTtcdCAgICBcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVfa2V5X2Zyb21fdXJsOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXMoKTtcbiAgICAgICAgICAgIHNlYXJjaF9wYXJhbXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKSk7XHQgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0X2tleV90b191cmw6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IHZhbHVlID0gXCJcIjsgfVx0ICBcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXMoKTtcbiAgICAgICAgICAgIHNlYXJjaF9wYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZF9vYmpfdG9fdXJsOiBmdW5jdGlvbih1cmxfcGFyYW1zX29iaiwgdXJsKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3VybF9wYXJhbXMgPSB0aGlzLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXNfb2JqKTtcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXModXJsKTtcbiAgICAgICAgICAgIGxldCBuZXdfZW50cmllcyA9IHRoaXMuZ2V0X3VybF9lbnRyaWVzKG5ld191cmxfcGFyYW1zKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG5ld19lbnRyaWVzKSB7XG4gICAgICAgIFx0c2VhcmNoX3BhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmV3X3VybCA9IHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICh1cmwgIT0gbnVsbCkgeyByZXR1cm4gbmV3X3VybDsgfVxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChuZXdfdXJsKTtcbiAgICAgICAgfSxcbiAgICB9XG59KCk7XG5cbi8vIGV4cG9ydCBjb25zdCBudG9wbmdfcGFyYW1zX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbi8vICAgICBjb25zdCBuZXcgPSBmdW5jdGlvbihwYXJhbXNfaW5fdXJsKSB7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiB7XG4vLyAgICAgfVxuLy8gfVxuXG4vKipcbiogT2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIGxpc3Qgb2YgcHJlZmVkZWZpbmVkIGV2ZW50cyB0aGF0IHJlcHJlc2VudCB0aGUgc3RhdHVzLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfZXZlbnRzID0ge1xuICBFUE9DSF9DSEFOR0U6IFwiZXBvY2hfY2hhbmdlXCIsIC8vIHsgZXBvY2hfYmVnaW46IG51bWJlciwgZXBvY2hfZW5kOiBudW1iZXIgfVxuICBGSUxURVJTX0NIQU5HRTogXCJmaWx0ZXJzX2NoYW5nZVwiLCAvLyB7ZmlsdGVyczoge2lkOiBzdHJpbmcsIG9wZXJhdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9W10gfVxufTtcblxuY29uc3QgbnRvcG5nX2V2ZW50c19jb21wYXJlID0ge1xuICBFUE9DSF9DSEFOR0U6IGZ1bmN0aW9uKG5ld19zdGF0dXMsIG9sZF9zdGF0dXMpIHtcbnJldHVybiBuZXdfc3RhdHVzLmVwb2NoX2JlZ2luICE9IG9sZF9zdGF0dXMuZXBvY2hfYmVnaW5cbiAgICB8fCBuZXdfc3RhdHVzLmVwb2NoX2VuZCAhPSBvbGRfc3RhdHVzLmVwb2NoX2VuZDtcbiAgfSxcbiAgRklMVEVSU19DSEFOR0U6IGZ1bmN0aW9uKG5ld19zdGF0dXMsIG9sZF9zdGF0dXMpIHtcdFxucmV0dXJuIChuZXdfc3RhdHVzLmZpbHRlcnMgPT0gbnVsbCAmJiBvbGRfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbClcbiAgICB8fCAobmV3X3N0YXR1cy5maWx0ZXJzICE9IG51bGwgJiYgb2xkX3N0YXR1cy5maWx0ZXJzID09IG51bGwpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmIG9sZF9zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmXG4gIChcbiAgICAgIChuZXdfc3RhdHVzLmZpbHRlcnMubGVuZ3RoICE9IG9sZF9zdGF0dXMuZmlsdGVycy5sZW5ndGgpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycy5zb21lKChmX25ldykgPT4gb2xkX3N0YXR1cy5maWx0ZXJzLmZpbmQoKGZfb2xkKSA9PiBmX29sZC5pZCA9PSBmX25ldy5pZCkgPT0gbnVsbCkpXG4gIClcbiAgICAgICApO1xuICB9LFxufTtcblxuLyoqXG4qIE9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIHByZWZlZGVmaW5lZCBjdXN0b20gZXZlbnRzLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfY3VzdG9tX2V2ZW50cyA9IHtcbiAgU0hPV19NT0RBTF9GSUxURVJTOiBcInNob3dfbW9kYWxfZmlsdGVyc1wiLCAvLyB7aWQ6IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgdmFsdWU6IHN0cmluZ31cbiAgTU9EQUxfRklMVEVSU19BUFBMWTogXCJtb2RhbF9maWx0ZXJzX2FwcGx5XCIsIC8vIHtpZDogc3RyaW5nLCBsYWJlbDogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB2YWx1ZV9sYWJlbDogc3RyaW5nfVxuICBTSE9XX0dMT0JBTF9BTEVSVF9JTkZPOiBcInNob3dfZ2xvYmFsX2FsZXJ0X2luZm9cIiwgLy8gaHRtbF90ZXh0OiBzdHJpbmdcbiAgVklTX0RBVEFfTE9BREVEOiBcInZpc19kYXRhX2xvYWRlZFwiLCBcbiAgQ0hBTkdFX1BBR0VfVElUTEU6IFwiY2hhbmdlX3BhZ2VfdGl0bGVcIiwgXG4gICAgREFUQVRBQkxFX0xPQURFRDogXCJkYXRhdGFibGVfbG9hZGVkXCIsXG4gICAgR0VUX0lOVEVSRkFDRV9GQVRBOiBcImdldF9pbnRlcmZhY2VfZGF0YVwiLCAvLyBvYmplY3QgcmV0dXJuZWQgYnkgL2x1YS9yZXN0L3YyL2dldC9pbnRlcmZhY2UvZGF0YS5sdWFcbiAgICBDT01QT05FTlRfRVBPQ0hfSU5URVJWQUxfQ0hBTkdFOiBcImNvbXBvbmVudF9lcG9jaF9pbnRlcnZhbF9jaGFuZ2VcIiwgLy8geyBlcG9jaF9iZWdpbjogbnVtYmVyLCBlcG9jaF9lbmQ6IG51bWJlciB9XG59O1xuXG5cbi8qKlxuKiBBIGdsb2JhbCBldmVudHMgc2VydmljZSB0aGF0IGFsbG93cyB0byBtYW5hZ2UgdGhlIGFwcGxpY2F0aW9uIGdsb2JhbCBzdGF0dXMuXG4qIFRoZSBzdGF0dXMgaXMgaW5jYXBzdWxhdGVkIGludG8gdGhlIHVybC5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2V2ZW50c19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGV2ZW50c19tYW5hZ2VyX2lkID0gXCJldmVudHNfbWFuYWdlclwiO1xuICBsZXQgc3RhdHVzID0ge307XG5cbiAgLyoqIEB0eXBlIHt7IFtldmVudF9uYW1lOiBzdHJpbmddOiB7IFtpZDogc3RyaW5nXTogKHN0YXR1czogb2JqZWN0KSA9PiB2b2lkfX19ICovXG4gIGxldCBldmVudHNfc3Vic2NyaWJlcnMgPSB7fTsgLy8gZGljdGlvbmFyeSBvZiB7IFtldmVudF9uYW1lOiBzdHJpbmddOiB7IFtpZDogc3RyaW5nXTogZl9vbl9ldmVudCB9XG5cbiAgICBjb25zdCBjbG9uZSA9IChlKSA9PiBudG9wbmdfdXRpbGl0eS5jbG9uZShlKTtcblxuICAvKipcbiAgICogTm90aWZpZXMgdGhlIHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMgd2l0aCBpZCBkaWZmZXJlbnQgZnJvbSBza2lwX2lkLlxuICAgKiBAcGFyYW0ge3sgW2lkOiBzdHJpbmddOiAoc3RhdHVzOiBvYmplY3QpID0+IHZvaWR9fSBzdWJzY3JpYmVycyBkaWN0aW9uYXJ5IG9mIGlkID0+IGZfb25fZXZlbnQoKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXR1cyBvYmplY3QgdGhhdCByZXByZXNlbnQgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAqL1xuICBjb25zdCBub3RpZnlfc3Vic2NyaWJlcnMgPSBmdW5jdGlvbihzdWJzY3JpYmVycywgc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICBmb3IgKGxldCBpZCBpbiBzdWJzY3JpYmVycykge1xuICAgICAgICAgIGlmIChpZCA9PSBza2lwX2lkKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgbGV0IGZfb25fY2hhbmdlID0gc3Vic2NyaWJlcnNbaWRdO1xuICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIHRoYXQgZGlzcGF0Y2hlcyBlYWNoIGV2ZW50IHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld19zdGF0dXMgXG4gICAqL1xuICBjb25zdCBvbl9zdGF0dXNfY2hhbmdlID0gZnVuY3Rpb24obmV3X3N0YXR1cykge1xuZm9yIChsZXQgZXZlbnRfbmFtZSBpbiBudG9wbmdfZXZlbnRzKSB7XG4gICAgbGV0IGZfY29tcGFyZSA9IG50b3BuZ19ldmVudHNfY29tcGFyZVtldmVudF9uYW1lXTtcbiAgICBpZiAoZl9jb21wYXJlKG5ld19zdGF0dXMsIHN0YXR1cykgPT0gdHJ1ZSkge1xuICBsZXQgc3Vic2NyaWJlcnMgPSBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRfbmFtZV07XG4gIG5vdGlmeV9zdWJzY3JpYmVycyhzdWJzY3JpYmVycywgbmV3X3N0YXR1cyk7XG4gICAgfVxufVxuXG4gICAgICBzdGF0dXMgPSBuZXdfc3RhdHVzO1xuICB9O1xuXG4gICAgY29uc3QgZ2V0X2V2ZW50X2Zvcl9zaW5nbGVfZGVzdCA9IChldmVudCwgZGVzdF9pZCkgPT4ge1xuXHRyZXR1cm4gYCR7ZXZlbnR9XyR7ZGVzdF9pZH1gO1xuICAgIH07XG5cbiAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UoZXZlbnRzX21hbmFnZXJfaWQsIG9uX3N0YXR1c19jaGFuZ2UsIHRydWUpO1xuXG4gICAgY29uc3QgZW1pdCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMsIHNraXBfaWQsIGRlc3RfaWQpIHtcblx0aWYgKGRlc3RfaWQgIT0gbnVsbCkge1xuXHQgICAgZXZlbnQgPSBnZXRfZXZlbnRfZm9yX3NpbmdsZV9kZXN0KGV2ZW50LCBkZXN0X2lkKTtcblx0fVxuXHRsZXQgc3Vic2NyaWJlcnMgPSBldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdO1xuXHRpZiAoc3Vic2NyaWJlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0bm90aWZ5X3N1YnNjcmliZXJzKHN1YnNjcmliZXJzLCBwYXJhbXMsIHNraXBfaWQpO1xuICAgIH07XG5cbiAgICBjb25zdCBvbl9ldmVudCA9IGZ1bmN0aW9uKGlkLCBldmVudCwgZl9vbl9ldmVudCwgZ2V0X2luaXRfbm90aWZ5LCBpc19zaW5nbGVfZGVzdF9ldmVudCkge1xuXHRpZiAoaXNfc2luZ2xlX2Rlc3RfZXZlbnQgPT0gdHJ1ZSkge1xuXHQgICAgZXZlbnQgPSBnZXRfZXZlbnRfZm9yX3NpbmdsZV9kZXN0KGV2ZW50LCBpZCk7XG5cdH1cblx0aWYgKGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XSA9IHt9OyAgICAgICAgXG5cdH1cblx0aWYgKGdldF9pbml0X25vdGlmeSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTsgICAgICAgIFxuICAgICAgICAgICAgZl9vbl9ldmVudChjbG9uZShzdGF0dXMpKTtcblx0fVxuXHRldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdW2lkXSA9IGZfb25fZXZlbnQ7XG4gICAgfTtcblxuICByZXR1cm4ge1xuICAgICAgZW1pdF9jdXN0b21fZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMsIGRlc3RfaWQpIHtcblx0ICBlbWl0KGV2ZW50LCBwYXJhbXMsIG51bGwsIGRlc3RfaWQpO1xuICAgICAgfSxcbiAgICAgIG9uX2N1c3RvbV9ldmVudDogZnVuY3Rpb24oaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBpc19zaW5nbGVfZGVzdF9ldmVudCkge1xuXHQgIG9uX2V2ZW50KGlkLCBldmVudCwgZl9vbl9ldmVudCwgbnVsbCwgaXNfc2luZ2xlX2Rlc3RfZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQ2hhbmdlcyB0aGUgYXBwbGljYXRpb24gc3RhdHVzIGFuZCBlbWl0cyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3ViY3JpYmVycyByZWdpc3RlcmVkIHRvIHRoZSBldmVudC4gXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgZXZlbnQgbmFtZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdfc3RhdHVzIG9iamVjdCB0byBhZGQgb3IgZWRpdCB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgKi9cbiAgICAgIGVtaXRfZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBuZXdfc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgZW1pdChldmVudCwgbmV3X3N0YXR1cywgc2tpcF9pZClcbiAgICAgICAgICBudG9wbmdfc3RhdHVzX21hbmFnZXIuYWRkX29ial90b19zdGF0dXMobmV3X3N0YXR1cywgZXZlbnRzX21hbmFnZXJfaWQpO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQWxsb3dzIHRvIHN1YnNjcmliZXJzIGZfb25fZXZlbnQgY2FsbGJhY2sgb24gc3RhdHVzIGNoYW5nZSBvbiBldmVudCBldmVudF9uYW1lLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIGFuIGlkZW50aWZpZXIgb2YgdGhlIHN1YnNjcmlidGlvbi4gXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgZXZlbnQgbmFtZS4gXG4gICAgICAgKiBAcGFyYW0geyhzdGF0dXM6b2JqZWN0KSA9PiB2b2lkfSBmX29uX2V2ZW50IGNhbGxiYWNrIHRoYXQgdGFrZSBvYmplY3Qgc3RhdHVzIGFzIHBhcmFtLlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBnZXRfaW5pdF9ub3RpZnkgaWYgdHJ1ZSB0aGUgY2FsbGJhY2sgaXQncyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgbGFzdCBzdGF0dXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICBvbl9ldmVudF9jaGFuZ2U6IGZ1bmN0aW9uKGlkLCBldmVudCwgZl9vbl9ldmVudCwgZ2V0X2luaXRfbm90aWZ5KSB7XG4gICAgb25fZXZlbnQoaWQsIGV2ZW50LCBmX29uX2V2ZW50LCBnZXRfaW5pdF9ub3RpZnkpO1xuICAgICAgfSxcbiAgfTtcbn0oKTtcbiIsIi8vIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvc3RlcGhlbmJvYWsvaFl1UGIvXG5cbi8vIFdyYXBwZXIgZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBkb19waWUobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpIHtcblx0dmFyIHBpZSA9IG5ldyBQaWVDaGFydChuYW1lLCB1cGRhdGVfdXJsLCB1cmxfcGFyYW1zLCB1bml0cywgcmVmcmVzaCk7XG5cdGlmIChyZWZyZXNoKVxuXHRcdHBpZS5zZXRJbnRlcnZhbChzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IHBpZS51cGRhdGUoKTsgfSwgcmVmcmVzaCkpO1xuXG5cdC8vIFJldHVybiBuZXcgY2xhc3MgaW5zdGFuY2UsIHdpdGhcblx0cmV0dXJuIHBpZTtcbn1cblxuZnVuY3Rpb24gUGllQ2hhcnQobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpIHtcblxuXHQvLyBBZGQgb2JqZWN0IHByb3BlcnRpZXMgbGlrZSB0aGlzXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cdHRoaXMudXBkYXRlX3VybCA9IHVwZGF0ZV91cmw7XG5cdHRoaXMudXJsX3BhcmFtcyA9IHVybF9wYXJhbXM7XG5cdHRoaXMudW5pdHMgPSB1bml0cztcblx0dGhpcy5yZWZyZXNoID0gcmVmcmVzaDtcblxuICBsZXQgc3RyZWFrZXJEYXRhQWRkZWQgPSBbXVxuICBsZXQgcGF0aHMgPSBcIlwiXG4gIGxldCBsaW5lcyA9IFtdXG4gIGxldCB2YWx1ZUxhYmVscyA9IFtdXG4gIGxldCBuYW1lTGFiZWxzID0gW11cblxuXHR2YXIgcGllRGF0YSA9IFtdO1xuXHR2YXIgb2xkUGllRGF0YSA9IFtdO1xuXHR2YXIgZmlsdGVyZWRQaWVEYXRhID0gW107XG5cdHZhciByc3AgPSBjcmVhdGVfcGllX2NoYXJ0KG5hbWUsIHVuaXRzKTtcblx0dmFyIGFyY19ncm91cCA9IHJzcFswXTtcblx0dmFyIGRvbnV0ID0gcnNwWzFdO1x0XG5cdHZhciB0b3RhbFZhbHVlID0gcnNwWzJdO1xuXHR2YXIgdG90YWxVbml0cyA9IHJzcFszXTtcblx0dmFyIGNvbG9yID0gcnNwWzRdO1xuXHR2YXIgdHdlZW5EdXJhdGlvbiA9IHJzcFs1XTtcblx0dmFyIGFyYyA9IHJzcFs2XTtcblx0dmFyIGxhYmVsX2dyb3VwID0gcnNwWzddO1x0XG5cdHZhciBjZW50ZXJfZ3JvdXAgPSByc3BbOF07XG5cdHZhciByID0gcnNwWzldO1xuXHR2YXIgdGV4dE9mZnNldCA9IHJzcFsxMF07XG5cblxuXHQvLyB0byBydW4gZWFjaCB0aW1lIGRhdGEgaXMgZ2VuZXJhdGVkXG5cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gY29uc29sZS5sb2codGhpcy5uYW1lKTtcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLnVybF9wYXJhbXMpO1xuXHRcdCQuYWpheCh7XG5cdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdHVybDogdGhpcy51cGRhdGVfdXJsLFxuXHRcdFx0ZGF0YTogdGhpcy51cmxfcGFyYW1zLFxuXHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKGNvbnRlbnQpIHtcblx0XHRcdFx0bGV0IHBhcnNlZF9jb250ZW50O1xuXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNvbnRlbnQpID09IFwib2JqZWN0XCIpXG5cdFx0XHRcdFx0cGFyc2VkX2NvbnRlbnQgPSBjb250ZW50O1xuXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgKGNvbnRlbnQpID09IFwic3RyaW5nXCIpXG5cdFx0XHRcdFx0cGFyc2VkX2NvbnRlbnQgPSBqUXVlcnkucGFyc2VKU09OKGNvbnRlbnQpO1xuXG5cdFx0XHRcdGlmIChwYXJzZWRfY29udGVudClcblx0XHRcdFx0XHR1cGRhdGVfcGllX2NoYXJ0KHBhcnNlZF9jb250ZW50KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIFNUUkVBS0VSIENPTk5FQ1RJT04gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly8gTmVlZGVkIHRvIGRyYXcgdGhlIHBpZSBpbW1lZGlhdGVseVxuXHR0aGlzLnVwZGF0ZSgpO1xuXHR0aGlzLnVwZGF0ZSgpO1xuXG5cdC8vIHZhciB1cGRhdGVJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh1cGRhdGUsIHJlZnJlc2gpO1xuXG5cdGZ1bmN0aW9uIGNvbXBhcmVfYnlfbGFiZWwoYSwgYikge1xuXHRcdGlmIChhLmxhYmVsIDwgYi5sYWJlbCkge1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH0gZWxzZSBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVfcGllX2NoYXJ0KGRhdGEpIHtcblx0XHRpZiAoZGF0YS5yc3ApIC8vIGRldGVjdCBSRVNUIEFQSSB2MVxuXHRcdFx0ZGF0YSA9IGRhdGEucnNwO1xuXG5cdFx0ZGF0YS5zb3J0KGNvbXBhcmVfYnlfbGFiZWwpO1xuXHRcdHN0cmVha2VyRGF0YUFkZGVkID0gZGF0YTtcblx0XHRvbGRQaWVEYXRhID0gZmlsdGVyZWRQaWVEYXRhO1xuXHRcdHBpZURhdGEgPSBkb251dChzdHJlYWtlckRhdGFBZGRlZCk7XG5cblx0XHR2YXIgdG90YWxPY3RldHMgPSAwO1xuXHRcdGZpbHRlcmVkUGllRGF0YSA9IHBpZURhdGEuZmlsdGVyKGZpbHRlckRhdGEpO1xuXHRcdGZ1bmN0aW9uIGZpbHRlckRhdGEoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG5cdFx0XHRlbGVtZW50Lm5hbWUgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0ubGFiZWw7XG5cdFx0XHRlbGVtZW50LnZhbHVlID0gc3RyZWFrZXJEYXRhQWRkZWRbaW5kZXhdLnZhbHVlO1xuXHRcdFx0ZWxlbWVudC51cmwgPSBzdHJlYWtlckRhdGFBZGRlZFtpbmRleF0udXJsO1xuXHRcdFx0dG90YWxPY3RldHMgKz0gZWxlbWVudC52YWx1ZTtcblx0XHRcdHJldHVybiAoZWxlbWVudC52YWx1ZSA+IDApO1xuXHRcdH1cblxuXHRcdGlmICgoZmlsdGVyZWRQaWVEYXRhLmxlbmd0aCA+IDApICYmIChvbGRQaWVEYXRhLmxlbmd0aCA+IDApKSB7XG5cdFx0XHQvL1JFTU9WRSBQTEFDRUhPTERFUiBDSVJDTEVcblx0XHRcdGFyY19ncm91cC5zZWxlY3RBbGwoXCJjaXJjbGVcIikucmVtb3ZlKCk7XG5cblx0XHRcdGlmICh0b3RhbFZhbHVlKSB7XG5cdFx0XHRcdHRvdGFsVmFsdWUudGV4dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIGtiID0gdG90YWxPY3RldHMgLyAxMDI0O1xuXHRcdFx0XHRcdHJldHVybiBrYi50b0ZpeGVkKDEpO1xuXHRcdFx0XHRcdC8vcmV0dXJuIGJjaGFydC5sYWJlbC5hYmJyZXZpYXRlZCh0b3RhbE9jdGV0cyo4KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vRFJBVyBBUkMgUEFUSFNcblx0XHRcdHBhdGhzID0gYXJjX2dyb3VwLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpO1xuXHRcdFx0cGF0aHMuZW50ZXIoKS5hcHBlbmQoXCJzdmc6cGF0aFwiKVxuXHRcdFx0XHQuYXR0cihcInN0cm9rZVwiLCBcIndoaXRlXCIpXG5cdFx0XHRcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDAuNSlcblx0XHRcdFx0LmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uIChkLCBpKSB7IHJldHVybiBjb2xvcihpKTsgfSlcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcGllVHdlZW4pO1xuXHRcdFx0cGF0aHNcblx0XHRcdFx0LnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHJUd2VlbihcImRcIiwgcGllVHdlZW4pO1xuXHRcdFx0cGF0aHMuZXhpdCgpXG5cdFx0XHRcdC50cmFuc2l0aW9uKClcblx0XHRcdFx0LmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pXG5cdFx0XHRcdC5hdHRyVHdlZW4oXCJkXCIsIHJlbW92ZVBpZVR3ZWVuKVxuXHRcdFx0XHQucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBUSUNLIE1BUksgTElORVMgRk9SIExBQkVMU1xuXHRcdFx0bGluZXMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJsaW5lXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKTtcblx0XHRcdGxpbmVzLmVudGVyKCkuYXBwZW5kKFwic3ZnOmxpbmVcIilcblx0XHRcdFx0LmF0dHIoXCJ4MVwiLCAwKVxuXHRcdFx0XHQuYXR0cihcIngyXCIsIDApXG5cdFx0XHRcdC5hdHRyKFwieTFcIiwgLXIgLSAzKVxuXHRcdFx0XHQuYXR0cihcInkyXCIsIC1yIC0gOClcblx0XHRcdFx0LmF0dHIoXCJzdHJva2VcIiwgXCJncmF5XCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwicm90YXRlKFwiICsgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiAqICgxODAgLyBNYXRoLlBJKSArIFwiKVwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdGxpbmVzLnRyYW5zaXRpb24oKVxuXHRcdFx0XHQuZHVyYXRpb24odHdlZW5EdXJhdGlvbilcblx0XHRcdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gXCJyb3RhdGUoXCIgKyAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyICogKDE4MCAvIE1hdGguUEkpICsgXCIpXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0bGluZXMuZXhpdCgpLnJlbW92ZSgpO1xuXG5cdFx0XHQvL0RSQVcgTEFCRUxTIFdJVEggUEVSQ0VOVEFHRSBWQUxVRVNcblx0XHRcdHZhbHVlTGFiZWxzID0gbGFiZWxfZ3JvdXAuc2VsZWN0QWxsKFwidGV4dC52YWx1ZVwiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLTc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQudGV4dChmdW5jdGlvbiAoZCkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9IChkLnZhbHVlIC8gdG90YWxPY3RldHMpICogMTAwO1xuXHRcdFx0XHRcdC8vIGFwcHJvc3NpbWF0ZSB0aGUgbnVtYmVyIHRvIHRoZSB0aGlyZCBkZWNpYW1sIGRpZ2l0IGFuZCBzaG93IG9ubHkgdGhlIGZpcnN0IGRlY2ltYWxcblx0XHRcdFx0XHRsZXQgcGVyY2VudGFnZUxhYmVsID0gcGVyY2VudGFnZS50b0ZpeGVkKDEpICsgXCIlXCI7XG5cdFx0XHRcdFx0cmV0dXJuIHBlcmNlbnRhZ2VMYWJlbDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHZhbHVlTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInZhbHVlXCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgTWF0aC5jb3MoKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbigoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikgKiAociArIHRleHRPZmZzZXQpICsgXCIpXCI7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC03O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICh0b3RhbE9jdGV0cyA8PSAxKSByZXR1cm4gXCJcIjtcblx0XHRcdFx0XHRjb25zdCBwZXJjZW50YWdlID0gKGQudmFsdWUgLyB0b3RhbE9jdGV0cykgKiAxMDA7XG5cdFx0XHRcdFx0bGV0IHBlcmNlbnRhZ2VMYWJlbCA9IHBlcmNlbnRhZ2UudG9GaXhlZCgxKSArIFwiJVwiO1xuXHRcdFx0XHRcdHJldHVybiBwZXJjZW50YWdlTGFiZWw7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR2YWx1ZUxhYmVscy50cmFuc2l0aW9uKCkuZHVyYXRpb24odHdlZW5EdXJhdGlvbikuYXR0clR3ZWVuKFwidHJhbnNmb3JtXCIsIHRleHRUd2Vlbik7XG5cdFx0XHR2YWx1ZUxhYmVscy5leGl0KCkucmVtb3ZlKCk7XG5cblx0XHRcdC8vRFJBVyBMQUJFTFMgV0lUSCBFTlRJVFkgTkFNRVNcblx0XHRcdG5hbWVMYWJlbHMgPSBsYWJlbF9ncm91cC5zZWxlY3RBbGwoXCJ0ZXh0LnVuaXRzXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE3O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLnRleHQoZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZC5uYW1lO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZCkgeyBpZiAoZC51cmwpIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZC51cmw7IH0pO1xuXG5cdFx0XHRuYW1lTGFiZWxzLmVudGVyKCkuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInVuaXRzXCIpXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgTWF0aC5jb3MoKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyKSkgKiAociArIHRleHRPZmZzZXQpICsgXCIsXCIgKyBNYXRoLnNpbigoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikgKiAociArIHRleHRPZmZzZXQpICsgXCIpXCI7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMTc7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiA1O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGV4dChmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBkLm5hbWU7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChkKSB7IGlmIChkLnVybCkgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLnVybDsgfSk7XG5cblx0XHRcdG5hbWVMYWJlbHMudHJhbnNpdGlvbigpLmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCB0ZXh0VHdlZW4pO1xuXG5cdFx0XHRuYW1lTGFiZWxzLmV4aXQoKS5yZW1vdmUoKTtcblx0XHR9XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBGVU5DVElPTlMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vIEludGVycG9sYXRlIHRoZSBhcmNzIGluIGRhdGEgc3BhY2UuXG5cdGZ1bmN0aW9uIHBpZVR3ZWVuKGQsIGkpIHtcblx0XHR2YXIgczA7XG5cdFx0dmFyIGUwO1xuXHRcdGlmIChvbGRQaWVEYXRhW2ldKSB7XG5cdFx0XHRzMCA9IG9sZFBpZURhdGFbaV0uc3RhcnRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtpXS5lbmRBbmdsZTtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpXSkgJiYgb2xkUGllRGF0YVtpIC0gMV0pIHtcblx0XHRcdHMwID0gb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGU7XG5cdFx0XHRlMCA9IG9sZFBpZURhdGFbaSAtIDFdLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2kgLSAxXSkgJiYgb2xkUGllRGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRzMCA9IG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5lbmRBbmdsZTtcblx0XHRcdGUwID0gb2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLmVuZEFuZ2xlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzMCA9IDA7XG5cdFx0XHRlMCA9IDA7XG5cdFx0fVxuXHRcdHZhciBpID0gZDMuaW50ZXJwb2xhdGUoeyBzdGFydEFuZ2xlOiBzMCwgZW5kQW5nbGU6IGUwIH0sIHsgc3RhcnRBbmdsZTogZC5zdGFydEFuZ2xlLCBlbmRBbmdsZTogZC5lbmRBbmdsZSB9KTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHQpIHtcblx0XHRcdHZhciBiID0gaSh0KTtcblx0XHRcdHJldHVybiBhcmMoYik7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZVBpZVR3ZWVuKGQsIGkpIHtcblx0XHRzMCA9IDIgKiBNYXRoLlBJO1xuXHRcdGUwID0gMiAqIE1hdGguUEk7XG5cdFx0dmFyIGkgPSBkMy5pbnRlcnBvbGF0ZSh7IHN0YXJ0QW5nbGU6IGQuc3RhcnRBbmdsZSwgZW5kQW5nbGU6IGQuZW5kQW5nbGUgfSwgeyBzdGFydEFuZ2xlOiBzMCwgZW5kQW5nbGU6IGUwIH0pO1xuXHRcdHJldHVybiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIGIgPSBpKHQpO1xuXHRcdFx0cmV0dXJuIGFyYyhiKTtcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dFR3ZWVuKGQsIGkpIHtcblx0XHR2YXIgYTtcblx0XHRpZiAob2xkUGllRGF0YVtpXSkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW2ldLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW2ldLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2ldKSAmJiBvbGRQaWVEYXRhW2kgLSAxXSkge1xuXHRcdFx0YSA9IChvbGRQaWVEYXRhW2kgLSAxXS5zdGFydEFuZ2xlICsgb2xkUGllRGF0YVtpIC0gMV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaSAtIDFdKSAmJiBvbGRQaWVEYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdGEgPSAob2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLnN0YXJ0QW5nbGUgKyBvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGEgPSAwO1xuXHRcdH1cblx0XHR2YXIgYiA9IChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXG5cdFx0dmFyIGZuID0gZDMuaW50ZXJwb2xhdGVOdW1iZXIoYSwgYik7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHR2YXIgdmFsID0gZm4odCk7XG5cdFx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBNYXRoLmNvcyh2YWwpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiLFwiICsgTWF0aC5zaW4odmFsKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIilcIjtcblx0XHR9O1xuXHR9XG5cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBVQkxJQyBGVU5DSU9OVFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zZXRVcmxQYXJhbXMgPSBmdW5jdGlvbiAodXJsX3BhcmFtcykge1xuXHR0aGlzLnVybF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuXHR0aGlzLmZvcmNlVXBkYXRlKCk7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICh1cmxfcGFyYW1zKSB7XG5cdHRoaXMuc3RvcEludGVydmFsKCk7XG5cdHRoaXMudXBkYXRlKCk7XG5cdHRoaXMuc3RhcnRJbnRlcnZhbCgpO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAocF9waWVJbnRlcnZhbCkge1xuXHR0aGlzLnBpZUludGVydmFsID0gcF9waWVJbnRlcnZhbDtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLnN0b3BJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcblx0Ly9kaXNhYmxlZCBncmFwaCBpbnRlcnZhbFxuXHRjbGVhckludGVydmFsKHRoaXMucGllSW50ZXJ2YWwpO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuc3RhcnRJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5waWVJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMudXBkYXRlKCksIHRoaXMucmVmcmVzaClcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJTklUIEZVTkNJT05UUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNyZWF0ZV9waWVfY2hhcnQobmFtZSwgdW5pdHMpIHtcblx0dmFyIHcgPSA1MDA7IC8vMzgwIC0gUGxlYXNlIGtlZXAgaW4gc3luYyB3aXRoIHBpZS1jaGFydC5jc3Ncblx0dmFyIGggPSAzMjU7IC8vMjgwXG5cdHZhciBpciA9IDUyOyAvLzQ1XG5cdHZhciB0ZXh0T2Zmc2V0ID0gMTQ7XG5cdHZhciB0d2VlbkR1cmF0aW9uID0gMjUwO1xuXHR2YXIgciA9IDExNjsgLy8xMDA7XG5cblx0aWYgKCQobmFtZSkuaGFzQ2xhc3MoXCJwaWUtY2hhcnQtc21hbGxcIikpIHtcblx0XHR3ID0gMzMwO1xuXHRcdGggPSAyNTA7XG5cdFx0ciA9IHcgLyA1ICsgMTU7XG5cdFx0aXIgPSByIC8gMjtcblx0fVxuXG5cdC8vRDMgaGVscGVyIGZ1bmN0aW9uIHRvIHBvcHVsYXRlIHBpZSBzbGljZSBwYXJhbWV0ZXJzIGZyb20gYXJyYXkgZGF0YVxuXHR2YXIgZG9udXQgPSBkMy5sYXlvdXQucGllKCkudmFsdWUoZnVuY3Rpb24gKGQpIHtcblx0XHRpZiAoZC52YWx1ZSA9PSAwKSB7IGQudmFsdWUgPSAxOyB9IC8vIEZvcmNlIHRvIDEsIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUgZ3JhcGhcblx0XHRyZXR1cm4gZC52YWx1ZTtcblx0fSk7XG5cblx0Ly9EMyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGNvbG9ycyBmcm9tIGFuIG9yZGluYWwgc2NhbGVcblx0dmFyIGNvbG9yID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpO1xuXG5cdC8vRDMgaGVscGVyIGZ1bmN0aW9uIHRvIGRyYXcgYXJjcywgcG9wdWxhdGVzIHBhcmFtZXRlciBcImRcIiBpbiBwYXRoIG9iamVjdFxuXHR2YXIgYXJjID0gZDMuc3ZnLmFyYygpXG5cdFx0LnN0YXJ0QW5nbGUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuc3RhcnRBbmdsZTsgfSlcblx0XHQuZW5kQW5nbGUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZW5kQW5nbGU7IH0pXG5cdFx0LmlubmVyUmFkaXVzKGlyKVxuXHRcdC5vdXRlclJhZGl1cyhyKTtcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBDUkVBVEUgVklTICYgR1JPVVBTIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHZhciB2aXMgPSBkMy5zZWxlY3QobmFtZSkuYXBwZW5kKFwic3ZnOnN2Z1wiKVxuXHRcdC5hdHRyKFwid2lkdGhcIiwgdylcblx0XHQuYXR0cihcImhlaWdodFwiLCBoKVxuXHRcdC5hdHRyKFwidmlld0JveFwiLCBcIjAgMCBcIiArIHcgKyBcIiBcIiArIGgpXG5cdFx0LmF0dHIoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWRcIik7XG5cblx0Ly9HUk9VUCBGT1IgQVJDUy9QQVRIU1xuXHR2YXIgYXJjX2dyb3VwID0gdmlzLmFwcGVuZChcInN2ZzpnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImFyY1wiKVxuXHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHcgLyAyKSArIFwiLFwiICsgKGggLyAyKSArIFwiKVwiKTtcblxuXHQvL0dST1VQIEZPUiBMQUJFTFNcblx0dmFyIGxhYmVsX2dyb3VwID0gdmlzLmFwcGVuZChcInN2ZzpnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsX2dyb3VwXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vR1JPVVAgRk9SIENFTlRFUiBURVhUXG5cdHZhciBjZW50ZXJfZ3JvdXAgPSB2aXMuYXBwZW5kKFwic3ZnOmdcIilcblx0XHQuYXR0cihcImNsYXNzXCIsIFwiY2VudGVyX2dyb3VwXCIpXG5cdFx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAodyAvIDIpICsgXCIsXCIgKyAoaCAvIDIpICsgXCIpXCIpO1xuXG5cdC8vUExBQ0VIT0xERVIgR1JBWSBDSVJDTEVcblx0YXJjX2dyb3VwLmFwcGVuZChcInN2ZzpjaXJjbGVcIilcblx0XHQuYXR0cihcImZpbGxcIiwgXCIjRUZFRkVGXCIpXG5cdFx0LmF0dHIoXCJyXCIsIHIpO1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vIENFTlRFUiBURVhUIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly9XSElURSBDSVJDTEUgQkVISU5EIExBQkVMU1xuXHRjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOmNpcmNsZVwiKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpXG5cdFx0LmF0dHIoXCJyXCIsIGlyKTtcblxuXHR2YXIgdG90YWxVbml0cyA9IG51bGw7XG5cdHZhciB0b3RhbExhYmVsID0gbnVsbDtcblx0dmFyIHRvdGFsVmFsdWUgPSBudWxsO1xuXHRcblx0aWYgKHVuaXRzKSB7XG5cdFx0Ly8gXCJUT1RBTFwiIExBQkVMXG5cdFx0dG90YWxMYWJlbCA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIC0xNSlcblx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgLy8gdGV4dC1hbGlnbjogcmlnaHRcblx0XHRcdC50ZXh0KFwiVE9UQUxcIik7XG5cblx0XHQvL1RPVEFMIFRSQUZGSUMgVkFMVUVcblx0XHR0b3RhbFZhbHVlID0gY2VudGVyX2dyb3VwLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidG90YWxcIilcblx0XHRcdC5hdHRyKFwiZHlcIiwgNylcblx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgLy8gdGV4dC1hbGlnbjogcmlnaHRcblx0XHRcdC50ZXh0KFwiV2FpdGluZy4uLlwiKTtcblxuXHRcdC8vVU5JVFMgTEFCRUxcblx0XHR0b3RhbFVuaXRzID0gY2VudGVyX2dyb3VwLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHQuYXR0cihcImNsYXNzXCIsIFwidW5pdHNcIilcblx0XHRcdC5hdHRyKFwiZHlcIiwgMjEpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dCh1bml0cyk7XG5cdH1cblxuXHRyZXR1cm4gKFthcmNfZ3JvdXAsIGRvbnV0LCB0b3RhbFZhbHVlLCB0b3RhbFVuaXRzLCBjb2xvciwgdHdlZW5EdXJhdGlvbiwgYXJjLCBsYWJlbF9ncm91cCwgY2VudGVyX2dyb3VwLCByLCB0ZXh0T2Zmc2V0XSk7XG59XG4iLCJpbXBvcnQgeyBudG9wbmdfZXZlbnRzLCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N5bmMsIG50b3BuZ19jdXN0b21fZXZlbnRzIH0gZnJvbSAnLi9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJ1xuXG53aW5kb3cubnRvcG5nX2V2ZW50cyA9IG50b3BuZ19ldmVudHNcbndpbmRvdy5udG9wbmdfZXZlbnRzX21hbmFnZXIgPSBudG9wbmdfZXZlbnRzX21hbmFnZXJcbndpbmRvdy5udG9wbmdfc3RhdHVzX21hbmFnZXIgPSBudG9wbmdfc3RhdHVzX21hbmFnZXJcbndpbmRvdy5udG9wbmdfdXRpbGl0eSA9IG50b3BuZ191dGlsaXR5XG53aW5kb3cubnRvcG5nX3VybF9tYW5hZ2VyID0gbnRvcG5nX3VybF9tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3N5bmMgPSBudG9wbmdfc3luY1xud2luZG93Lm50b3BuZ19jdXN0b21fZXZlbnRzID0gbnRvcG5nX2N1c3RvbV9ldmVudHNcbiIsIi8qKlxuICogKEMpIDIwMTMtMjEgLSBudG9wLm9yZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgREVGSU5FRF9XSURHRVRTID0ge307XG4vKiBVc2VkIHRvIGltcGxlbWVudCB0aGUgb24gY2xpY2sgZXZlbnRzIG9udG8gdGhlIGdyYXBoICovXG5jb25zdCBERUZJTkVEX0VWRU5UUyA9IHtcbiAgICAvKiBPbiBjbGljayBldmVudCB1c2VkIGJ5IHRoZSBmbG93IGFuYWx5emUgc2VjdGlvbiwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgdXJsICsgYSBzaW5nbGUgZmlsdGVyICovXG4gICAgXCJkYl9hbmFseXplXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YVBvaW50SW5kZXggfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgeyBmaWx0ZXIgfSA9IGNvbmZpZy53LmNvbmZpZztcbiAgICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICAgIGlmKGNvbmZpZy53LmNvbmZpZy5maWx0ZXJpbmdfbGFiZWxzKVxuICAgICAgICAgICAgdmFsdWUgPSBjb25maWcudy5jb25maWcuZmlsdGVyaW5nX2xhYmVsc1tkYXRhUG9pbnRJbmRleF07XG5cbiAgICAgICAgaWYoZmlsdGVyLmxlbmd0aCA9PSAwIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgIGZpbHRlcnMucHVzaCh7aWQ6IGZpbHRlclswXSwgb3BlcmF0b3I6IFwiZXFcIiwgdmFsdWU6IHZhbHVlfSk7XG4gICAgICAgIC8vIG5vdGlmeSB0aGF0IGZpbHRlcnMgc3RhdHVzIGlzIHVwZGF0ZWRcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwge2ZpbHRlcnN9KTtcbiAgICB9LFxuXG4gICAgXCJub25lXCIgOiBmdW5jdGlvbiAoZXZlbnQsIGNoYXJ0Q29udGV4dCwgY29uZmlnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9LFxuICAgIFxuICAgIC8qIFN0YW5kYXJkIG9uIGNsaWNrIGV2ZW50LCByZWRpcmVjdCB0byB0aGUgdXJsICovXG4gICAgXCJzdGFuZGFyZFwiIDogZnVuY3Rpb24gKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgICAgICBjb25zdCB7IHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9ID0gY29uZmlnO1xuICAgICAgICBjb25zdCB7IHNlcmllcyB9ID0gY29uZmlnLncuY29uZmlnO1xuICAgICAgICBpZiAoc2VyaWVzSW5kZXggPT09IC0xKSByZXR1cm47XG4gICAgICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHNlcmllID0gc2VyaWVzW3Nlcmllc0luZGV4XTtcbiAgICAgICAgaWYgKHNlcmllLmJhc2VfdXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRfdXJsID0gKHNlcmllLnN0YXJ0X3VybCB8fCAnJykgXG4gICAgICAgICAgICBjb25zdCBzZWFyY2ggPSBzZXJpZS5kYXRhW2RhdGFQb2ludEluZGV4XS5tZXRhLnVybF9xdWVyeTtcbiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSBgJHtzZXJpZS5iYXNlX3VybH0/JHtkZWZhdWx0X3VybH0ke3NlYXJjaH1gO1xuICAgICAgICB9XG4gICAgfSxcbn1cblxuY29uc3QgREVGSU5FRF9UT09MVElQID0ge1xuICAgIC8qIE9uIGNsaWNrIGV2ZW50IHVzZWQgYnkgdGhlIGZsb3cgYW5hbHl6ZSBzZWN0aW9uLCByZWRpcmVjdCB0byB0aGUgY3VycmVudCB1cmwgKyBhIHNpbmdsZSBmaWx0ZXIgKi9cbiAgICBcImZvcm1hdF9ieXRlc1wiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgXCJmb3JtYXRfcGt0c1wiIDogZnVuY3Rpb24odmFsdWUsIHsgY29uZmlnLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSkge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFBhY2tldHModmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKiBPbiBjbGljayBldmVudCB1c2VkIGJ5IHRoZSBmbG93IGFuYWx5emUgc2VjdGlvbiwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgdXJsICsgYSBzaW5nbGUgZmlsdGVyICovXG4gICAgXCJmb3JtYXRfdmFsdWVcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZSh2YWx1ZSk7XG4gICAgfSxcblxuICAgIFwiZm9ybWF0X211bHRpcGxlX2RhdGVcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlWzBdKSArIFwiIC0gXCIgKyBuZXcgRGF0ZSh2YWx1ZVsxXSlcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiAgVGhpcyBmb3JtYXR0ZXIgaXMgdXNlZCBieSB0aGUgYnViYmxlIGhvc3QgbWFwLCBmcm9tIHRoZSB5IGF4aXMsXG4gICAgICogIHVzZWQgdG8gc2hvdyB0aGUgSG9zdHMsIHdpdGggdGhlaXIgcmVzcGVjdGl2ZSB2YWx1ZXMgXG4gICAgICovXG4gICAgXCJmb3JtYXRfbGFiZWxfZnJvbV94eVwiIDogZnVuY3Rpb24oe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgICAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHhfdmFsdWUgPSBzZXJpZVtcInhcIl07XG4gICAgICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgICAgIGNvbnN0IHhfYXhpc190aXRsZSA9IHcuY29uZmlnLnhheGlzLnRpdGxlLnRleHQ7XG4gICAgICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICAgICAgcmV0dXJuIChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHt4X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gKVxuICAgIH0sXG4gICAgXCJmb3JtYXRfbGFiZWxfZnJvbV94bmFtZVwiIDogZnVuY3Rpb24oe3Nlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3fSkge1xuICAgICAgICBjb25zdCBzZXJpZSA9IHcuY29uZmlnLnNlcmllc1tzZXJpZXNJbmRleF1bXCJkYXRhXCJdW2RhdGFQb2ludEluZGV4XTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHNlcmllW1wibmFtZVwiXVxuICAgICAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgICAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgICAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgICAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgICAgIHJldHVybiAoYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7bmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YClcbiAgICB9LFxufVxuXG4vKiBTdGFuZGFyZCBGb3JtYXR0ZXIgKi9cbmNvbnN0IERFRkFVTFRfRk9STUFUVEVSID0gREVGSU5FRF9UT09MVElQW1wiZm9ybWF0X3ZhbHVlXCJdO1xuXG5leHBvcnQgY2xhc3MgV2lkZ2V0VXRpbHMge1xuXG4gICAgc3RhdGljIHJlZ2lzdGVyV2lkZ2V0KHdpZGdldCkge1xuICAgICAgICBpZiAod2lkZ2V0ID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoYFRoZSBwYXNzZWQgd2lkZ2V0IHJlZmVyZW5jZSBpcyBudWxsIWApO1xuICAgICAgICBpZiAod2lkZ2V0Lm5hbWUgaW4gREVGSU5FRF9XSURHRVRTKSB0aHJvdyBuZXcgRXJyb3IoYFRoZSB3aWRnZXQgJHt3aWRnZXQubmFtZX0gaXMgYWxyZWFkeSBkZWZpbmVkIWApO1xuICAgICAgICBERUZJTkVEX1dJREdFVFNbd2lkZ2V0Lm5hbWVdID0gd2lkZ2V0O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRXaWRnZXRCeU5hbWUod2lkZ2V0TmFtZSkge1xuICAgICAgICBpZiAod2lkZ2V0TmFtZSBpbiBERUZJTkVEX1dJREdFVFMpIHtcbiAgICAgICAgICAgIHJldHVybiBERUZJTkVEX1dJREdFVFNbd2lkZ2V0TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXaWRnZXQgJHt3aWRnZXROYW1lfSBub3QgZm91bmQhYClcbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lIGEgc2ltcGxlIHdyYXBwZXIgY2xhc3MgZm9yIHRoZSB3aWRnZXRzLlxuICovXG5jbGFzcyBXaWRnZXQge1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgZGF0YXNvdXJjZSA9IHt9LCB1cGRhdGVUaW1lID0gMCwgYWRkaXRpb25hbFBhcmFtcyA9IHt9KSB7XG5cbiAgICAgICAgLy8gZmllbGQgY29udGFpbmluZyB0aGUgZGF0YSBmZXRjaGVkIGZyb20gdGhlIGRhdGFzb3VyY2VzIHByb3ZpZGVkXG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gW107XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblxuICAgICAgICAvLyBpZiAwIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBjaGFydCBhdXRvbWF0aWNhbGx5LCB0aGUgdGltZVxuICAgICAgICAvLyBpcyBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpbWUgPSB1cGRhdGVUaW1lO1xuXG4gICAgICAgIHRoaXMuX2RhdGFzb3VyY2UgPSBkYXRhc291cmNlO1xuICAgICAgICB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zID0gYWRkaXRpb25hbFBhcmFtcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0IHRoZSB3aWRnZXQuXG4gICAgICovXG4gICAgYXN5bmMgaW5pdCgpIHtcblxuICAgICAgICAvLyByZWdpc3RlciB0aGUgd2lkZ2V0IHRvIHRoZSBERUZJTkVEX1dJREdFVFMgb2JqZWN0XG4gICAgICAgIFdpZGdldFV0aWxzLnJlZ2lzdGVyV2lkZ2V0KHRoaXMpO1xuICAgICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IGF3YWl0IHRoaXMuX2ZldGNoRGF0YSgpO1xuXG4gICAgICAgIGlmICh0aGlzLl91cGRhdGVUaW1lID4gMCkge1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4geyBhd2FpdCB0aGlzLnVwZGF0ZSh0aGlzLl9kYXRhc291cmNlLnBhcmFtcyk7IH0sIHRoaXMuX3VwZGF0ZVRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgd2lkZ2V0IGZyZWVpbmcgdGhlIHJlc291cmNlcyB1c2VkLlxuICAgICAqL1xuICAgIGFzeW5jIGRlc3Ryb3koKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEZvcmNlIHRoZSB3aWRnZXQgdG8gcmVsb2FkIGl0J3MgZGF0YS5cbiAgICAgKi9cbiAgICBhc3luYyBkZXN0cm95QW5kVXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlQnlVcmwodXJsKSB7XG4gICAgICBjb25zdCB1ID0gbmV3IFVSTChgJHtsb2NhdGlvbi5vcmlnaW59JHt0aGlzLl9kYXRhc291cmNlLm5hbWV9YCk7XG4gICAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICB1LnNlYXJjaFBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kYXRhc291cmNlLmVuZHBvaW50ID0gdS5wYXRobmFtZSArIHUuc2VhcmNoO1xuICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaERhdGEoKTtcbiAgICB9XG4gIFxuICAgIGFzeW5jIHVwZGF0ZShkYXRhc291cmNlUGFyYW1zID0ge30pIHtcblx0Ly8gYnVpbGQgdGhlIG5ldyBlbmRwb2ludFxuICAgICAgICBjb25zdCB1ID0gbmV3IFVSTChgJHtsb2NhdGlvbi5vcmlnaW59JHt0aGlzLl9kYXRhc291cmNlLm5hbWV9YCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YXNvdXJjZVBhcmFtcykpIHtcbiAgICAgICAgICAgIHUuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RhdGFzb3VyY2UuZW5kcG9pbnQgPSB1LnBhdGhuYW1lICsgdS5zZWFyY2g7XG4gICAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hEYXRhKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZGF0YXNvdXJjZXMgcHJvdmlkZWQgdG8gdGhlIGNvbnN0cnVjdG9yLFxuICAgICAqIGRvIGEgR0VUIHJlcXVlc3QgdG8gYSBSRVNUIGVuZHBvaW50LlxuICAgICAqL1xuICAgIGFzeW5jIF9mZXRjaERhdGEoKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IGZldGNoKGAke2h0dHBfcHJlZml4fSR7dGhpcy5fZGF0YXNvdXJjZS5lbmRwb2ludH1gKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlcS5qc29uKCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBDaGFydFdpZGdldCBleHRlbmRzIFdpZGdldCB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlID0gJ2xpbmUnLCBkYXRhc291cmNlID0ge30sIHVwZGF0ZVRpbWUgPSAwLCBhZGRpdGlvbmFsUGFyYW1zID0ge30pIHtcbiAgICAgICAgc3VwZXIobmFtZSwgZGF0YXNvdXJjZSwgdXBkYXRlVGltZSwgYWRkaXRpb25hbFBhcmFtcyk7XG5cbiAgICAgICAgdGhpcy5fY2hhcnRUeXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSB7fTtcbiAgICAgICAgdGhpcy5fJGh0bWxDaGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNjYW52YXMtd2lkZ2V0LSR7bmFtZX1gKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVnaXN0ZXJFdmVudENhbGxiYWNrKHdpZGdldE5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdpZGdldCA9IFdpZGdldFV0aWxzLmdldFdpZGdldEJ5TmFtZSh3aWRnZXROYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtldmVudE5hbWVdOiBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhd2FpdCB3aWRnZXQuX2NoYXJ0LnVwZGF0ZU9wdGlvbnModXBkYXRlZE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW10sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZE9uU2VyaWVzOiBbMF0sXG4gICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6ICdkZC9NTS95eXl5IEhIOm1tOnNzJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB6OiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuX2NoYXJ0VHlwZSxcbiAgICAgICAgICAgICAgICBldmVudHM6IHt9LFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgemF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cdCAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgICAgICBvbkl0ZW1DbGljazoge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVEYXRhU2VyaWVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0LFxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub0RhdGE6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTm8gRGF0YScsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMjRweCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGFkZGl0aW9uYWxQYXJhbXMgZmllbGQgY29udGFpbnMgYW4gYXBleCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gdGhlbiBtZXJnZSB0aGUgdHdvIGNvbmZpZ3VyYXRpb25zIGdpdmluZyBwcmlvcml0eSB0byB0aGUgY3VzdG9tIG9uZVxuICAgICAgICBpZiAodGhpcy5fYWRkaXRpb25hbFBhcmFtcyAmJiB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zLmFwZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oY29uZmlnLCB0aGlzLl9hZGRpdGlvbmFsUGFyYW1zLmFwZXgpO1xuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZENvbmZpZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgX2J1aWxkVG9vbHRpcChjb25maWcsIHJzcCkge1xuICAgICAgICAvKiBCeSBkZWZhdWx0IHRoZSBhcmVhQ2hhcnQgdG9vbHRpcFt5XSBpcyBvdmVyd3JpdHRlbiAqL1xuICAgICAgICBjb25maWdbXCJ0b29sdGlwXCJdW1wieVwiXSA9IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUsIHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKiBDaGFuZ2luZyBldmVudHMgaWYgZ2l2ZW4gKi9cbiAgICAgICAgaWYgKHJzcFsndG9vbHRpcCddKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF4aXMgaW4gcnNwWyd0b29sdGlwJ10pIHtcbiAgICAgICAgICAgICAgICBpZiAoYXhpcyA9PT0gXCJ4XCIgfHwgYXhpcyA9PT0gXCJ5XCIgfHwgYXhpcyA9PT0gXCJ6XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gcnNwWyd0b29sdGlwJ11bYXhpc11bJ2Zvcm1hdHRlciddO1xuICAgICAgICAgICAgICAgICAgICBpZighY29uZmlnWyd0b29sdGlwJ11bYXhpc10pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWdbJ3Rvb2x0aXAnXVtheGlzXSA9IHt9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnWyd0b29sdGlwJ11bYXhpc11bJ2Zvcm1hdHRlciddID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzW2Zvcm1hdHRlcl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIEN1c3RvbWl6YWJsZSB0b29sdGlwIHJlcXVlc3RlZCAqL1xuICAgICAgICAgICAgaWYocnNwWyd0b29sdGlwJ11bJ2N1c3RvbSddKVxuICAgICAgICAgICAgICAgIGNvbmZpZ1sndG9vbHRpcCddWydjdXN0b20nXSA9IERFRklORURfVE9PTFRJUFtyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ11dIHx8IE50b3BVdGlsc1tyc3BbJ3Rvb2x0aXAnXVsnY3VzdG9tJ11dXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRBeGlzRm9ybWF0dGVyKGNvbmZpZywgYXhpc05hbWUpIHtcblxuICAgICAgICBjb25zdCBheGlzID0gY29uZmlnW2F4aXNOYW1lXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChheGlzID09PSB1bmRlZmluZWQgfHwgYXhpcy5sYWJlbHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8gZW5hYmxlIGZvcm1hdHRlcnNcbiAgICAgICAgaWYgKGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyICE9PSB1bmRlZmluZWQgJiYgYXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIgIT09ICdub25lJykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZvcm1hdHRlciA9IGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyO1xuXG4gICAgICAgICAgICBpZiAoTnRvcFV0aWxzW3NlbGVjdGVkRm9ybWF0dGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgeGF4aXM6IEZvcm1hdHRpbmcgZnVuY3Rpb24gJyR7c2VsZWN0ZWRGb3JtYXR0ZXJ9JyBkaWRuJ3QgZm91bmQgaW5zaWRlIE50b3BVdGlscy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tzZWxlY3RlZEZvcm1hdHRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGREYXRhTGFiZWxzKGNvbmZpZywgcnNwKSB7XG4gICAgICAgIGlmIChyc3BbXCJkYXRhTGFiZWxzXCJdKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtkYXRhTGFiZWxzT3B0cywgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMocnNwW1wiZGF0YUxhYmVsc1wiXSkpIHtcbiAgICAgICAgICAgICAgICBjb25maWdbXCJkYXRhTGFiZWxzXCJdW2RhdGFMYWJlbHNPcHRzXSA9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICBcblxuICAgICAgICBsZXQgZm9ybWF0dGVyID0gY29uZmlnW1wiZGF0YUxhYmVsc1wiXVtcImZvcm1hdHRlclwiXTtcbiAgICAgICAgXG4gICAgICAgIGlmKGZvcm1hdHRlciAmJiBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSkge1xuICAgICAgICAgICAgY29uZmlnW1wiZGF0YUxhYmVsc1wiXVtcImZvcm1hdHRlclwiXSA9IERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2J1aWxkQ29uZmlnKCkge1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2dlbmVyYXRlQ29uZmlnKCk7XG4gICAgICAgIGNvbnN0IHJzcCA9IHRoaXMuX2ZldGNoZWREYXRhLnJzcDtcbiAgICAgICAgXG4gICAgICAgIC8vIGFkZCBhZGRpdGlvbmFsIHBhcmFtcyBmZXRjaGVkIGZyb20gdGhlIGRhdGFzb3VyY2VcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbHMgPSBbJ3NlcmllcycsICd4YXhpcycsICd5YXhpcycsICdjb2xvcnMnLCAnbGFiZWxzJywgJ2ZpbGwnLCAnZmlsdGVyJywgJ2ZpbHRlcmluZ19sYWJlbHMnXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgYWRkaXRpb25hbCBvZiBhZGRpdGlvbmFscykge1xuXG4gICAgICAgICAgICBpZiAocnNwW2FkZGl0aW9uYWxdID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnW2FkZGl0aW9uYWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25maWdbYWRkaXRpb25hbF0gPSBPYmplY3QuYXNzaWduKGNvbmZpZ1thZGRpdGlvbmFsXSwgcnNwW2FkZGl0aW9uYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1thZGRpdGlvbmFsXSA9IHJzcFthZGRpdGlvbmFsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLyogQ2hhbmdpbmcgZXZlbnRzIGlmIGdpdmVuICovXG4gICAgICAgIGlmIChyc3BbJ2V2ZW50cyddKSB7XG4gICAgICAgICAgICAvKiBKdXN0IHBhc3MgYSB0YWJsZSBvZiBldmVudHMuIGUuZy4geyBldmVudHMgPSB7IGNsaWNrID0gXCJkYl9hbmFseXplXCIsIHVwZGF0ZWQgPSBcInN0YW5kYXJkXCIgfSB9Ki9cbiAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgaW4gcnNwWydldmVudHMnXSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ1snY2hhcnQnXVsnZXZlbnRzJ11bZXZlbnRdID0gREVGSU5FRF9FVkVOVFNbcnNwWydldmVudHMnXVtldmVudF1dXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocnNwWydob3Jpem9udGFsX2NoYXJ0J10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uZmlnWydwbG90T3B0aW9ucyddWydiYXInXVsnaG9yaXpvbnRhbCddID0gcnNwWydob3Jpem9udGFsX2NoYXJ0J107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9idWlsZFRvb2x0aXAoY29uZmlnLCByc3ApXG4gICAgICAgIHRoaXMuX2J1aWxkQXhpc0Zvcm1hdHRlcihjb25maWcsICd4YXhpcycpO1xuICAgICAgICB0aGlzLl9idWlsZEF4aXNGb3JtYXR0ZXIoY29uZmlnLCAneWF4aXMnKTtcbiAgICAgICAgdGhpcy5fYnVpbGREYXRhTGFiZWxzKGNvbmZpZywgcnNwKTtcblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIF9pbml0aWFsaXplQ2hhcnQoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2J1aWxkQ29uZmlnKCk7XG4gICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl9jaGFydCA9IG5ldyBBcGV4Q2hhcnRzKHRoaXMuXyRodG1sQ2hhcnQsIHRoaXMuX2NoYXJ0Q29uZmlnKTtcbiAgICAgICAgdGhpcy5fY2hhcnQucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplQ2hhcnQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZXN0cm95KCkge1xuICAgICAgICBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX2NoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZShkYXRhc291cmNlUGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYodGhpcy5fY2hhcnRDb25maWcgIT09IHVuZGVmaW5lZCkge1x0ICAgIFxuICAgICAgICAgIGlmIChkYXRhc291cmNlUGFyYW1zKSB7XG4gICAgICAgICAgICBhd2FpdCBzdXBlci51cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZUJ5VXJsKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGlmICh0aGlzLl9jaGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwZWN0aW5nIHRoYXQgcnNwIGNvbnRhaW5zIGFuIG9iamVjdCBjYWxsZWQgc2VyaWVzXG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2xvcnMsIHNlcmllcywgZGF0YUxhYmVscywgbGFiZWxzLCB4YXhpcywgZmlsdGVyaW5nX2xhYmVscyB9ID0gdGhpcy5fZmV0Y2hlZERhdGEucnNwO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY29sb3JzIGxpc3RcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5jb2xvcnMgPSBjb2xvcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKHhheGlzICYmIHhheGlzLmNhdGVnb3JpZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLnhheGlzLmNhdGVnb3JpZXMgPSB4YXhpcy5jYXRlZ29yaWVzO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGZpbHRlcmluZ19sYWJlbHMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmZpbHRlcmluZ19sYWJlbHMgPSBmaWx0ZXJpbmdfbGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgaWYoZGF0YUxhYmVscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm9ybWF0dGVyID0gdGhpcy5fY2hhcnRDb25maWcuZGF0YUxhYmVscy5mb3JtYXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmKGZvcm1hdHRlciAmJiBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyID0gREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyID0gREVGQVVMVF9GT1JNQVRURVI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihsYWJlbHMpIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5sYWJlbHMgPSBsYWJlbHM7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFydC51cGRhdGVPcHRpb25zKHRoaXMuX2NoYXJ0Q29uZmlnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZSA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmRlc3Ryb3lBbmRVcGRhdGUoZGF0YXNvdXJjZSk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVDaGFydCgpO1xuICAgIH1cblxufVxuIiwiY29uc3QgZml4U3ViTWVudVBvc2l0aW9uID0gKCRzdWJtZW51LCAkaG92ZXJCdXR0b24pID0+IHtcblxuICAgIGNvbnN0IE1JTl9TUEFDRSA9IDIwO1xuICAgIGNvbnN0IE1JTl9IRUlHSFQgPSAxNTA7XG5cbiAgICBsZXQgZGlzdEZyb21BYm92ZSA9ICRob3ZlckJ1dHRvbi5wb3NpdGlvbigpLnRvcDtcbiAgICBjb25zdCBzdWJtZW51SGVpZ2h0ID0gJHN1Ym1lbnUuaGVpZ2h0KCk7XG4gICAgY29uc3QgZG9jdW1lbnRIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG5cbiAgICAvLyBpZiB0aGUgc3VibWVudSBpcyB0b28gaGlnaCB0byBiZSBzaG93biB0aGVuIHNldFxuICAgIC8vIHRoZSBvdmVyZmxvdyBvbiB5IGF4aXNcbiAgICBpZiAoc3VibWVudUhlaWdodCArIGRpc3RGcm9tQWJvdmUgPj0gZG9jdW1lbnRIZWlnaHQpIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50U3VibWVudUhlaWdodCA9IGRvY3VtZW50SGVpZ2h0IC0gZGlzdEZyb21BYm92ZTtcbiAgICAgICAgaWYgKGN1cnJlbnRTdWJtZW51SGVpZ2h0IDw9IE1JTl9IRUlHSFQpIHtcbiAgICAgICAgICAgIGRpc3RGcm9tQWJvdmUgPSBkaXN0RnJvbUFib3ZlIC0gc3VibWVudUhlaWdodCArICRob3ZlckJ1dHRvbi5vdXRlckhlaWdodCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJHN1Ym1lbnUuY3NzKHsnbWF4LWhlaWdodCc6IGN1cnJlbnRTdWJtZW51SGVpZ2h0IC0gTUlOX1NQQUNFLCAnb3ZlcmZsb3cteSc6ICdhdXRvJ30pXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIHNldCB0aGUgc3VibWVudSBoZWlnaHRcbiAgICAkc3VibWVudS5jc3MoJ3RvcCcsIGAke2Rpc3RGcm9tQWJvdmV9cHhgKTtcblxufTtcblxuJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbigpe1xuXG4gICAgY29uc3QgVVBQRVJfTElNSVQgPSAzMjtcbiAgICBjb25zdCB3aW5kb3dTY3JvbGxUb3AgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xuXG4gICAgaWYgKHdpbmRvd1Njcm9sbFRvcCA+PSBVUFBFUl9MSU1JVCkge1xuICAgICAgICAkKGAjbi1uYXZiYXJgKS5hZGRDbGFzcyhcInNjcm9sbGVkIGJnLWxpZ2h0XCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJChgI24tbmF2YmFyYCkucmVtb3ZlQ2xhc3MoXCJzY3JvbGxlZCBiZy1saWdodFwiKTtcbiAgICB9XG5cbn0pO1xuXG4kKCgpID0+IHtcblxuICAgIGNvbnN0IHRvZ2dsZVNpZGViYXIgPSAoKSA9PiB7XG4gICAgICAgIC8vIGlmIHRoZSBsYXllciBkb2Vzbid0IGV4aXN0cyB0aGVuIGNyZWF0ZSBpdFxuICAgICAgICBpZiAoJChgLnNpZGViYXItY2xvc2UtbGF5ZXJgKS5sZW5ndGggPT0gMCkge1xuXG4gICAgICAgICAgICBjb25zdCAkbGF5ZXIgPSAkKGA8ZGl2IGNsYXNzPSdzaWRlYmFyLWNsb3NlLWxheWVyJyBzdHlsZT0nZGlzcGxheTpub25lJz48L2Rpdj5gKTtcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBsYXllclxuICAgICAgICAgICAgJGxheWVyLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIHNpZGViYXJcbiAgICAgICAgICAgICAgICAkKGAjbi1zaWRlYmFyYCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIGxheWVyIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgRE9NXG4gICAgICAgICAgICAgICAgJGxheWVyLmZhZGVPdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBsYXllciB0byB0aGUgd3JhcHBlclxuICAgICAgICAgICAgJChgI3dyYXBwZXJgKS5hcHBlbmQoJGxheWVyKTtcbiAgICAgICAgICAgIC8vIHNob3cgdGhlIGxheWVyIGluc2lkZSB0aGUgcGFnZVxuICAgICAgICAgICAgJGxheWVyLmZhZGVJbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaGlkZSB0aGUgZXhpc3RpbmcgbGF5ZXIgYW5kIGRlc3Ryb3kgaXRcbiAgICAgICAgICAgICQoYC5zaWRlYmFyLWNsb3NlLWxheWVyYCkuZmFkZU91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaG93L2hpZGUgdGhlIHNpZGViYXJcbiAgICAgICAgJChgI24tc2lkZWJhcmApLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG5cbiAgICAkKCcjbi1zaWRlYmFyIGEuc3VibWVudScpLmJpbmQoe1xuICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBzdWJtZW51ID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKGBkaXZbaWQkPSdzdWJtZW51J11gKTtcbiAgICAgICAgICAgIGZpeFN1Yk1lbnVQb3NpdGlvbihzdWJtZW51LCAkKHRoaXMpKTtcbiAgICAgICAgICAgIHN1Ym1lbnUuc2hvdygpXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHN1Ym1lbnUgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApO1xuICAgICAgICAgICAgc3VibWVudS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoYGRpdltpZCQ9J3N1Ym1lbnUnXWApLmJpbmQoe1xuICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykuc2hvdygpXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlbGVhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qIHRvZ2dsZSBzaWRlYmFyIGRpc3BsYXkgKi9cbiAgICAkKGBidXR0b25bZGF0YS1icy10b2dnbGU9J3NpZGViYXInXWApLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0b2dnbGVTaWRlYmFyKCk7XG4gICAgfSk7XG59KTtcblxuJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcblxuICAgIC8vIHJlLWNhbGMgc3VibWVudSBoZWlnaHRcbiAgICBjb25zdCAkY3VycmVudFN1Ym1lbnUgPSAkKCcjbi1zaWRlYmFyJykuZmluZChgZGl2LnNob3dbaWQkPSdzdWJtZW51J11gKTtcblxuICAgIGlmICgkY3VycmVudFN1Ym1lbnUubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIGNvbnN0ICRob3ZlckJ1dHRvbiA9ICRjdXJyZW50U3VibWVudS5wYXJlbnQoKS5maW5kKGBhW2RhdGEtYnMtdG9nZ2xlPSdjb2xsYXBzZSddYCk7XG4gICAgICAgIGZpeFN1Yk1lbnVQb3NpdGlvbigkY3VycmVudFN1Ym1lbnUsICRob3ZlckJ1dHRvbik7XG4gICAgfVxuXG59KTtcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCBGb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuXG5jb25zdCBudG9wQ2hhcnRBcGV4ID0gZnVuY3Rpb24gKCkge1xuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFsbCBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICBzZXJpZXM6IFtdLFxuICAgIGNoYXJ0OiB7XG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgdG9vbGJhcjoge1xuICAgICAgICB0b29sczoge1xuICAgICAgICAgIHpvb21vdXQ6IGZhbHNlLFxuICAgICAgICAgIGRvd25sb2FkOiBmYWxzZSxcbiAgICAgICAgICB6b29taW46IGZhbHNlLFxuICAgICAgICAgIHpvb206IFwiIFwiLFxuICAgICAgICAgIHNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgcGFuOiBmYWxzZSxcbiAgICAgICAgICByZXNldDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGV2ZW50czoge31cbiAgICB9LFxuICAgIHhheGlzOiB7XG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBjb2xvcnM6IFtdLFxuICAgICAgICAgIGZvbnRTaXplOiBcIjExcHhcIixcbiAgICAgICAgICBmb250V2VpZ2h0OiA0MDAsXG4gICAgICAgICAgY3NzQ2xhc3M6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHJvdGF0ZTogLTkwLFxuICAgICAgICBvZmZzZXRZOiAwLFxuICAgICAgICBvZmZzZXRYOiAwLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGZvbnRTaXplOiBcIjExcHhcIixcbiAgICAgICAgICBmb250V2VpZ2h0OiA5MDAsXG4gICAgICAgICAgY3NzQ2xhc3M6IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZ3JpZDoge1xuICAgICAgc2hvdzogZmFsc2UsXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgIHNob3c6IHRydWVcbiAgICB9LFxuICB9O1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IHhheGlzIGZvcm1hdHRlciBmb3IgY2hhcnQgd2l0aCBkYXRldGltZSBvbiB4YXhpcy5cbiAgY29uc3QgX3NldFhUaW1lRm9ybWF0dGVyID0gZnVuY3Rpb24gKGNoYXJ0T3B0aW9ucykge1xuICAgIGNoYXJ0T3B0aW9ucy54YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbHVlLCB7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQodmFsdWUpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX0NPTFVNTl9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYmFyXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHR5cGU6IFwieFwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgLy8gc2hhcmVkOiB0cnVlLFxuICAgICAgICB4OiB7XG4gICAgICAgICAgZm9ybWF0OiBcImRkIE1NTSB5eXl5IEhIOm1tOnNzXCJcbiAgICAgICAgfSxcbiAgICAgICAgeToge31cbiAgICAgIH0sXG4gICAgICB4YXhpczoge1xuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIGRhdGV0aW1lVVRDOiBmYWxzZSxcbiAgICAgICAgICBmb3JtYXR0ZXI6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0ZWRDYXRUb051bWVyaWM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfQ09MVU1OX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJhcmVhXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHR5cGU6IFwieFwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgLy8gc2hhcmVkOiB0cnVlLFxuICAgICAgICB4OiB7XG4gICAgICAgICAgZm9ybWF0OiBcImRkIE1NTSB5eXl5IEhIOm1tOnNzXCJcbiAgICAgICAgfSxcbiAgICAgICAgeToge31cbiAgICAgIH0sXG4gICAgICB4YXhpczoge1xuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgIGRhdGV0aW1lVVRDOiBmYWxzZSxcbiAgICAgICAgICBmb3JtYXR0ZXI6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBcImRhdGV0aW1lXCIsXG4gICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0ZWRDYXRUb051bWVyaWM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwicG9sYXJBcmVhXCIsXG4gICAgICAgIGhlaWdodDogNDAwXG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsLCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuICh2YWwgPyBgJHt2YWwudG9GaXhlZCgxKX0lYCA6IGAwJWApXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19ET05VVF9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImRvbnV0XCIsXG4gICAgICAgIGhlaWdodDogMzAwXG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsLCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuICh2YWwgPyBgJHt2YWwudG9GaXhlZCgxKX0lYCA6IGAwJWApXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIGZvcm1hdHRlcjogRm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKFwibnVtYmVyXCIpLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG5vRGF0YToge1xuICAgICAgICB0ZXh0OiAnTm8gRGF0YScsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb250U2l6ZTogJzI0cHgnLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfUkFESUFMQkFSX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwicmFkaWFsQmFyXCIsXG4gICAgICAgIGhlaWdodDogMzAwXG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG5vRGF0YToge1xuICAgICAgICB0ZXh0OiAnTm8gRGF0YScsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb250U2l6ZTogJzI0cHgnLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgcmFkaWFsQmFyOiB7XG4gICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICBzdGFydEFuZ2xlOiAwLFxuICAgICAgICAgIGVuZEFuZ2xlOiAyNzAsXG4gICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICBtYXJnaW46IDUsXG4gICAgICAgICAgICBzaXplOiAnMzAlJyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICBpbWFnZTogdW5kZWZpbmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgZmxvYXRpbmc6IHRydWUsXG4gICAgICAgIGZvbnRTaXplOiAnMTZweCcsXG4gICAgICAgIHBvc2l0aW9uOiAnbGVmdCcsXG4gICAgICAgIG9mZnNldFg6IDE2MCxcbiAgICAgICAgb2Zmc2V0WTogMTUsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIHVzZVNlcmllc0NvbG9yczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihzZXJpZXNOYW1lLCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHNlcmllc05hbWUgKyBcIjogIFwiICsgb3B0cy53Lmdsb2JhbHMuc2VyaWVzW29wdHMuc2VyaWVzSW5kZXhdXG4gICAgICAgIH0sXG4gICAgICAgIGl0ZW1NYXJnaW46IHtcbiAgICAgICAgICB2ZXJ0aWNhbDogM1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgYnJlYWtwb2ludDogNDgwLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX1BJRV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcInBpZVwiLFxuICAgICAgICBoZWlnaHQ6IDQwMFxuICAgICAgfSxcbiAgICAgIHlheGlzOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICAgIHJldHVybiAodmFsID8gYCR7dmFsLnRvRml4ZWQoMSl9JWAgOiBgMCVgKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB5OiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGxpbmUgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfTElORV9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgem9vbToge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgdHlwZTogXCJ4XCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBzaGFyZWQ6IHRydWUsXG4gICAgICAgIHg6IHtcbiAgICAgICAgICBmb3JtYXQ6IFwiZGQgTU1NIHl5eXkgSEg6bW06c3NcIlxuICAgICAgICB9LFxuICAgICAgICB5OiB7fVxuICAgICAgfSxcbiAgICAgIHhheGlzOiB7XG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgIGRhdGV0aW1lVVRDOiBmYWxzZSxcbiAgICAgICAgICBmb3JtYXR0ZXI6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0ZWRDYXRUb051bWVyaWM6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHdpZHRoOiAyLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19MSU5FX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgY29uc3QgZm9ybWF0X2xhYmVsX2Zyb21feG5hbWUgPSBmdW5jdGlvbiAoeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgY29uc3QgbmFtZSA9IHNlcmllW1wibmFtZVwiXVxuICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICByZXR1cm4gKGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHtuYW1lfVxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gKVxuICB9O1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgbGluZSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX0JVQkJMRV9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJidWJibGVcIixcbiAgICAgICAgem9vbToge1xuICAgICAgICAgIGF1dG9TY2FsZVlheGlzOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgZGF0YVBvaW50U2VsZWN0aW9uOiBcInN0YW5kYXJkXCIsXG4gICAgICB9LFxuICAgICAgZ3JpZDoge1xuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgbGVmdDogNlxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHhheGlzOiB7XG4gICAgICAgIHR5cGU6ICdudW1lcmljJyxcbiAgICAgICAgbGFiZWxzOiB7fVxuICAgICAgfSxcbiAgICAgIHlheGlzOiB7XG4gICAgICAgIHR5cGU6ICdudW1lcmljJyxcbiAgICAgICAgZm9yY2VOaWNlU2NhbGU6IHRydWUsXG4gICAgICAgIGxhYmVsczoge31cbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBjdXN0b206IGZvcm1hdF9sYWJlbF9mcm9tX3huYW1lLFxuICAgICAgfVxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19CVUJCTEVfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICByZXR1cm4ge1xuICAgIHR5cGVDaGFydDoge1xuICAgICAgVFNfTElORTogXCJUU19MSU5FXCIsXG4gICAgICBUU19TVEFDS0VEOiBcIlRTX1NUQUNLRURcIixcbiAgICAgIFRTX0NPTFVNTjogXCJUU19DT0xVTU5cIixcbiAgICAgIFBJRTogXCJQSUVcIixcbiAgICAgIERPTlVUOiBcIkRPTlVUXCIsXG4gICAgICBSQURJQUxCQVI6IFwiUkFESUFMQkFSXCIsXG4gICAgICBSQURBUjogXCJSQURBUlwiLFxuICAgICAgQlVCQkxFOiBcIkJVQkJMRVwiLFxuICAgICAgQkFTRTogXCJCQVNFXCIsXG4gICAgfSxcbiAgICBuZXdDaGFydDogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIGxldCBfY2hhcnRPcHRpb25zID0ge307XG4gICAgICBsZXQgX2NoYXJ0O1xuICAgICAgbGV0IF9jaGFydEh0bWxFbGVtZW50O1xuXG4gICAgICBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5UU19TVEFDS0VEKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyk7XG4gICAgICAgIF9zZXRYVGltZUZvcm1hdHRlcihfY2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5UU19MSU5FKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19MSU5FX0NoYXJ0T3B0aW9ucyk7XG4gICAgICAgIF9zZXRYVGltZUZvcm1hdHRlcihfY2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5UU19DT0xVTU4pIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX0NPTFVNTl9DaGFydE9wdGlvbnMpO1xuICAgICAgICBfc2V0WFRpbWVGb3JtYXR0ZXIoX2NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuUElFKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5ET05VVCkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfRE9OVVRfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5SQURJQUxCQVIpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX1JBRElBTEJBUl9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlBPTEFSKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19QT0xBUl9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkJVQkJMRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuQkFTRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgYG50b3BDaGFydEFwZXg6Om5ld0NoYXJ0OiBjaGFydCB0eXBlID0gJHt0eXBlfSB1bnN1cHBvcnRlZGA7XG4gICAgICB9XG4gICAgICAgIGNvbnN0IHNldFlheGlzRm9ybWF0dGVyID0gKGNoYXJ0T3B0aW9ucykgPT4geyAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZihjaGFydE9wdGlvbnM/LnlheGlzPy5sYWJlbHM/LmZvcm1hdHRlcikgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlcjtcbiAgICAgICAgICAgICAgbGV0IGNoYXJ0Rm9ybWF0dGVyID0gRm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlcik7XG4gICAgICAgICAgICAgIGlmIChjaGFydEZvcm1hdHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IGNoYXJ0Rm9ybWF0dGVyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlciA9PSBcImZvcm1hdFZhbHVlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcIm51bWJlclwiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvcm1hdHRlciA9PSBcImJ5dGVzVG9TaXplXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFydE9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcImJ5dGVzXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgZHJhd0NoYXJ0OiBmdW5jdGlvbiAoaHRtbEVsZW1lbnQsIGNoYXJ0T3B0aW9ucykge1xuICAgICAgICAgIC8vIGFkZC9yZXBsYWNlIGNoYXJ0T3B0aW9ucyBmaWVsZHMgaW4gX2NoYXJ0T3B0aW9uc1xuICAgICAgICAgICAgICBzZXRZYXhpc0Zvcm1hdHRlcihjaGFydE9wdGlvbnMpO1xuICAgICAgICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoY2hhcnRPcHRpb25zLCBfY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICAgICAgICBfY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhodG1sRWxlbWVudCwgX2NoYXJ0T3B0aW9ucyk7XG4gICAgICAgICAgX2NoYXJ0SHRtbEVsZW1lbnQgPSBodG1sRWxlbWVudDtcbiAgICAgICAgICBfY2hhcnQucmVuZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvX2RhdGFfdXJpOiBhc3luYyBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgX2NoYXJ0LmRhdGFVUkkob3B0aW9ucyk7XG4gICAgICAgICAgcmV0dXJuIHJlcy5pbWdVUkk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3lDaGFydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICBfY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVDaGFydDogZnVuY3Rpb24gKGNoYXJ0T3B0aW9ucykge1xuICAgICAgICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHNldFlheGlzRm9ybWF0dGVyKGNoYXJ0T3B0aW9ucyk7XG4gICAgICAgICAgX2NoYXJ0LnVwZGF0ZU9wdGlvbnMoY2hhcnRPcHRpb25zLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlU2VyaWVzOiBmdW5jdGlvbiAoc2VyaWVzKSB7XG4gICAgICAgICAgaWYgKF9jaGFydCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgIF9jaGFydC51cGRhdGVTZXJpZXMoc2VyaWVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVnaXN0ZXJFdmVudDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHVwZGF0ZUNoYXJ0ID0gZmFsc2UpIHtcbiAgICAgICAgICBfY2hhcnRPcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudE5hbWVdID0gY2FsbGJhY2s7XG4gICAgICAgICAgaWYgKHVwZGF0ZUNoYXJ0ID09IHRydWUpIHtcbiAgICAgICAgICAgIF9jaGFydC51cGRhdGVPcHRpb25zKF9jaGFydE9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcbn0oKTtcblxuZXhwb3J0IHsgbnRvcENoYXJ0QXBleCB9O1xuIiwiLyoqXG4gKiAoQykgMjAyMC0yMSAtIG50b3Aub3JnXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgdXRpbGl0aWVzIHVzZWQgYnkgdGhlICpuZXcqIGRhdGF0YWJsZXMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vbnRvcC11dGlsc1wiO1xuXG5cbmNvbnN0IERhdGFUYWJsZUhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGhhbmRsZXJzSWREaWN0ID0ge307XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkSGFuZGxlcjogZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgbGV0IGhhbmRsZXJzID0gaGFuZGxlcnNJZERpY3RbaC5oYW5kbGVySWRdO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVycyA9IFtdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzSWREaWN0W2guaGFuZGxlcklkXSA9IGhhbmRsZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlcnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaC5vbkNsaWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBgd2luZG93WydfRGF0YVRhYmxlQnV0dG9uc09uQ2xpY2snXSgnJHtoLmhhbmRsZXJJZH0nLCAnJHtoYW5kbGVycy5sZW5ndGggLSAxfScpYDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SGFuZGxlcjogZnVuY3Rpb24oaGFuZGxlcklkLCByb3dJZCkge1xuICAgICAgICAgICAgbGV0IGhhbmRsZXJzID0gaGFuZGxlcnNJZERpY3RbaGFuZGxlcklkXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVycyA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcnNbcm93SWRdO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVIYW5kbGVyc0J5SWQ6IGZ1bmN0aW9uKGhhbmRsZXJJZCkge1xuICAgICAgICAgICAgaGFuZGxlcnNJZERpY3RbaGFuZGxlcklkXSA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgfVxufSgpO1xuICAgIFxud2luZG93W1wiX0RhdGFUYWJsZUJ1dHRvbnNPbkNsaWNrXCJdID0gZnVuY3Rpb24oaGFuZGxlcklkLCByb3dJZCkge1xuICAgIGxldCBvbkNsaWNrID0gRGF0YVRhYmxlSGFuZGxlcnMuZ2V0SGFuZGxlcihoYW5kbGVySWQsIHJvd0lkKTtcbiAgICBpZiAob25DbGljayAhPSBudWxsKSB7XG4gICAgICAgIG9uQ2xpY2soKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVGaWx0ZXJzTWVudSB7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b3B0aW9uc31cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IHRhYmxlQVBJLCBmaWx0ZXJNZW51S2V5LCBmaWx0ZXJUaXRsZSwgZmlsdGVycywgY29sdW1uSW5kZXgsIGljb24gPSBudWxsLCBleHRyYUF0dHJpYnV0ZXMgPSBcIlwiLCBpZCA9IG51bGwsIHVybCA9IG51bGwsIHVybFBhcmFtcyA9IG51bGwsIHJlbW92ZUFsbEVudHJ5ID0gZmFsc2UsIGNhbGxiYWNrRnVuY3Rpb24gPSBudWxsIH0pIHtcbiAgICAgICAgdGhpcy5yYXdGaWx0ZXJzID0gZmlsdGVycztcbiAgICAgICAgdGhpcy50YWJsZUFQSSA9IHRhYmxlQVBJO1xuICAgICAgICB0aGlzLmZpbHRlclRpdGxlID0gZmlsdGVyVGl0bGU7XG4gICAgICAgIHRoaXMuaWNvbiA9IGljb247XG4gICAgICAgIHRoaXMuZmlsdGVyTWVudUtleSA9IGZpbHRlck1lbnVLZXk7XG4gICAgICAgIHRoaXMuY29sdW1uSW5kZXggPSBjb2x1bW5JbmRleDtcbiAgICAgICAgdGhpcy5wcmV2ZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlclNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRkYXRhdGFibGVXcmFwcGVyID0gJCh0YWJsZUFQSS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuICAgICAgICB0aGlzLmV4dHJhQXR0cmlidXRlcyA9IGV4dHJhQXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxFbnRyeSA9IHJlbW92ZUFsbEVudHJ5O1xuICAgICAgICB0aGlzLmNhbGxiYWNrRnVuY3Rpb24gPSBjYWxsYmFja0Z1bmN0aW9uO1xuICAgICAgfVxuXG4gICAgZ2V0IHNlbGVjdGVkRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RmlsdGVyU2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyB3aGVuIHRoZSBkYXRhdGFibGUgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgcmVuZGVyIHRoZSBkcm9wZG93blxuICAgICAgICB0aGlzLiRkYXRhdGFibGVXcmFwcGVyLm9uKCdpbml0LmR0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuX3JlbmRlcihzZWxmLnJhd0ZpbHRlcnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBvbiBhamF4IHJlbG9hZCB0aGVuIHVwZGF0ZSB0aGUgZGF0YXRhYmxlIGVudHJpZXNcbiAgICAgICAgdGhpcy50YWJsZUFQSS5vbignZHJhdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl91cGRhdGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgX2NvdW50RW50cmllcyhyZWdleCwgZGF0YSA9IFtdKSB7XG5cbiAgICAgICAgaWYgKHJlZ2V4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJEYXRhVGFibGVGaWx0ZXJzTWVudTo6X2NvdW50RW50cmllcygpID0+IHRoZSBwYXNzZWQgcmVnZXggaXMgdW5kZWZpbmVkIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAocmVnZXgpO1xuICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoY2VsbFZhbHVlID0+IHJlZy50ZXN0KGNlbGxWYWx1ZSkpLmxlbmd0aDtcbiAgICB9XG5cbiAgICBfY3JlYXRlTWVudUVudHJ5KGZpbHRlcikge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgJGVudHJ5ID0gJChgPGxpIGNsYXNzPSdkcm9wZG93bi1pdGVtIHBvaW50ZXInPiR7ZmlsdGVyLmxhYmVsfSA8L2xpPmApO1xuICAgICAgICBcbiAgICAgICAgaWYoc2VsZi51cmwpIHtcbiAgICAgICAgICAkZW50cnkgPSAkKGA8bGkgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gcG9pbnRlcic+PGEgaHJlZj0jIGNsYXNzPSdwLTEgc3RhbmRhcmQtY29sb3InPiR7ZmlsdGVyLmxhYmVsfSA8L2xpPmApO1xuXG4gICAgICAgICAgaWYoZmlsdGVyLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gc2V0IGFjdGl2ZSBmaWx0ZXIgdGl0bGUgYW5kIGtleVxuICAgICAgICAgICAgaWYgKHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoYGkuZmFzYCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUucGFyZW50KCkucHJlcGVuZChgPGkgY2xhc3M9J2ZhcyBmYS1maWx0ZXInPjwvaT5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9ICRlbnRyeS5odG1sKCk7XG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5odG1sKG5ld0NvbnRlbnQpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBhY3RpdmUgY2xhc3MgZnJvbSB0aGUgbGkgZWxlbWVudHNcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLmNvbnRhaW5lci5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAgIC8vIGFkZCBhY3RpdmUgY2xhc3MgdG8gY3VycmVudCBlbnRyeVxuICAgICAgICAgICAgaWYoZmlsdGVyLmtleSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLnJlZ2V4ICE9PSB1bmRlZmluZWQgJiYgKGZpbHRlci5jb3VudGFibGUgPT09IHVuZGVmaW5lZCB8fCBmaWx0ZXIuY291bnRhYmxlKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMudGFibGVBUEkuY29sdW1ucyh0aGlzLmNvbHVtbkluZGV4KS5kYXRhKClbMF07XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2NvdW50RW50cmllcyhmaWx0ZXIucmVnZXgsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgJGNvdW50ZXIgPSAkKGA8c3BhbiBjbGFzcz0nY291bnRlcic+KCR7Y291bnR9KTwvc3Bhbj5gKTtcblxuICAgICAgICAgICAgLy8gaWYgdGhlIGNvdW50IGlzIDAgdGhlbiBoaWRlIHRoZSBtZW51IGVudHJ5XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkgJGVudHJ5LmhpZGUoKTtcblxuICAgICAgICAgICAgLy9hcHBlbmQgdGhlICRjb3VudGVyIG9iamVjdCBpbnNpZGUgdGhlICRlbnRyeVxuICAgICAgICAgICAgJGVudHJ5LmFwcGVuZCgkY291bnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkZW50cnkub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvLyBzZXQgYWN0aXZlIGZpbHRlciB0aXRsZSBhbmQga2V5XG4gICAgICAgICAgaWYgKHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoYGkuZmFzYCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLnByZXBlbmQoYDxpIGNsYXNzPSdmYXMgZmEtZmlsdGVyJz48L2k+YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9ICRlbnRyeS5odG1sKCk7XG4gICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUuaHRtbChuZXdDb250ZW50KTtcbiAgICAgICAgICAvLyByZW1vdmUgdGhlIGFjdGl2ZSBjbGFzcyBmcm9tIHRoZSBsaSBlbGVtZW50c1xuICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLmNvbnRhaW5lci5maW5kKCdsaScpLnJlbW92ZUNsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICAvLyBhZGQgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgZW50cnlcbiAgICAgICAgICBpZihmaWx0ZXIua2V5ICE9PSAnYWxsJykge1xuICAgICAgICAgICAgJGVudHJ5LmFkZENsYXNzKGBhY3RpdmVgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihzZWxmLmNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGYuY2FsbGJhY2tGdW5jdGlvbihzZWxmLnRhYmxlQVBJLCBmaWx0ZXIpO1xuICAgICAgICAgICAgaWYoZmlsdGVyLmNhbGxiYWNrKSBmaWx0ZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZighc2VsZi51cmwpIHtcbiAgICAgICAgICAgIHNlbGYucHJldmVudFVwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBmaWx0ZXIgaGF2ZSBhIGNhbGxiYWNrIHRoZW4gY2FsbCBpdFxuICAgICAgICAgICAgaWYgKGZpbHRlci5jYWxsYmFjaykgZmlsdGVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAvLyBwZXJmb3JtIHRoZSB0YWJsZSBmaWx0ZXJpbmdcbiAgICAgICAgICAgIHNlbGYudGFibGVBUEkuY29sdW1uKHNlbGYuY29sdW1uSW5kZXgpLnNlYXJjaChmaWx0ZXIucmVnZXgsIHRydWUsIGZhbHNlKS5kcmF3KCk7XG4gICAgICAgICAgICAvLyBzZXQgY3VycmVudCBmaWx0ZXJcbiAgICAgICAgICAgIHNlbGYuY3VycmVudEZpbHRlclNlbGVjdGVkID0gZmlsdGVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnVybFBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2hcbiAgICAgICAgICAgIGNvbnN0IG5ld1VybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VsZi51cmxQYXJhbXMpXG4gICAgICAgICAgICBuZXdVcmxQYXJhbXMuc2V0KHNlbGYuZmlsdGVyTWVudUtleSwgKHR5cGVvZihmaWx0ZXIuaWQpICE9IFwidW5kZWZpbmVkXCIpID8gZmlsdGVyLmlkIDogJycpXG5cbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgnJywgJycsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICc/JyArIG5ld1VybFBhcmFtcy50b1N0cmluZygpKVxuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAkZW50cnk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUZpbHRlcnMoZmlsdGVycykge1xuXG4gICAgICAgIGNvbnN0IGZpbHRlcnNDcmVhdGVkID0ge307XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggZmlsdGVyIGRlZmluZWQgaW4gdGhpcy5maWx0ZXJzXG4gICAgICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpIHtcblxuICAgICAgICAgICAgY29uc3QgJGZpbHRlciA9IHRoaXMuX2NyZWF0ZU1lbnVFbnRyeShmaWx0ZXIpO1xuICAgICAgICAgICAgLy8gc2F2ZSB0aGUgZmlsdGVyIGluc2lkZSB0aGUgJGZpbHRlcnMgb2JqZWN0XG4gICAgICAgICAgICBmaWx0ZXJzQ3JlYXRlZFtmaWx0ZXIua2V5XSA9IHsgZmlsdGVyOiBmaWx0ZXIsICRub2RlOiAkZmlsdGVyIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsdGVyc0NyZWF0ZWQ7XG4gICAgfVxuXG4gICAgX3JlbmRlcihmaWx0ZXJzKSB7XG4gICAgICBpZih0eXBlb2YgdGhpcy5jb2x1bW5JbmRleCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAkKGA8c3BhbiBpZD1cIiR7dGhpcy5pZH1cIiAke3RoaXMuZXh0cmFBdHRyaWJ1dGVzfSB0aXRsZT1cIiR7dGhpcy5maWx0ZXJUaXRsZX1cIj4ke3RoaXMuaWNvbiB8fCB0aGlzLmZpbHRlclRpdGxlfTwvc3Bhbj5gKS5pbnNlcnRCZWZvcmUodGhpcy4kZGF0YXRhYmxlV3JhcHBlci5maW5kKCcuZGF0YVRhYmxlc19maWx0ZXInKS5wYXJlbnQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCAkZHJvcGRvd25Db250YWluZXIgPSAkKGA8ZGl2IGlkPScke3RoaXMuZmlsdGVyTWVudUtleX1fZHJvcGRvd24nIGNsYXNzPSdkcm9wZG93biBkLWlubGluZSc+PC9kaXY+YCk7XG4gICAgICAgIGNvbnN0ICRkcm9wZG93bkJ1dHRvbiA9ICQoYDxidXR0b24gY2xhc3M9J2J0bi1saW5rIGJ0biBkcm9wZG93bi10b2dnbGUnIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPmApO1xuICAgICAgICBjb25zdCAkZHJvcGRvd25UaXRsZSA9ICQoYDxzcGFuIGNsYXNzPSdmaWx0ZXItdGl0bGUnPiR7dGhpcy5maWx0ZXJUaXRsZX08L3NwYW4+YCk7XG4gICAgICAgICRkcm9wZG93bkJ1dHRvbi5hcHBlbmQoJGRyb3Bkb3duVGl0bGUpO1xuXG4gICAgICAgIHRoaXMuJGRyb3Bkb3duID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogJGRyb3Bkb3duQ29udGFpbmVyLFxuICAgICAgICAgIHRpdGxlOiAkZHJvcGRvd25UaXRsZSxcbiAgICAgICAgICBidXR0b246ICRkcm9wZG93bkJ1dHRvblxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZmlsdGVycyA9IHRoaXMuX2NyZWF0ZUZpbHRlcnMoZmlsdGVycyk7XG5cbiAgICAgICAgY29uc3QgJG1lbnVDb250YWluZXIgPSAkKGA8dWwgY2xhc3M9J2Ryb3Bkb3duLW1lbnUgZHJvcGRvd24tbWVudS1sZy1lbmQgc2Nyb2xsYWJsZS1kcm9wZG93bicgaWQ9JyR7dGhpcy5maWx0ZXJNZW51S2V5fV9kcm9wZG93bl9tZW51Jz48L3VsPmApO1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCBmaWx0ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZmlsdGVycykpIHtcbiAgICAgICAgICAgICRtZW51Q29udGFpbmVyLmFwcGVuZChmaWx0ZXIuJG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIEFsbCBlbnRyeSBpcyBjcmVhdGVkIGJ5IHRoZSBvYmplY3RcbiAgICAgICAgaWYoIXRoaXMucmVtb3ZlQWxsRW50cnkpIHtcbiAgICAgICAgICBjb25zdCBhbGxGaWx0ZXIgPSB0aGlzLl9nZW5lcmF0ZUFsbEZpbHRlcigpO1xuICAgICAgICAgICRtZW51Q29udGFpbmVyLnByZXBlbmQodGhpcy5fY3JlYXRlTWVudUVudHJ5KGFsbEZpbHRlcikpOyAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGFwcGVuZCB0aGUgY3JlYXRlZCBkcm9wZG93biBpbnNpZGVcbiAgICAgICAgJGRyb3Bkb3duQ29udGFpbmVyLmFwcGVuZCgkZHJvcGRvd25CdXR0b24pO1xuICAgICAgICAkZHJvcGRvd25Db250YWluZXIuYXBwZW5kKCRtZW51Q29udGFpbmVyKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBkcm9wZG93biBtZW51IGluc2lkZSB0aGUgZmlsdGVyIHdyYXBwZXJcbiAgICAgICAgJGRyb3Bkb3duQ29udGFpbmVyLmluc2VydEJlZm9yZSh0aGlzLiRkYXRhdGFibGVXcmFwcGVyLmZpbmQoJy5kYXRhVGFibGVzX2ZpbHRlcicpLnBhcmVudCgpKTtcblxuICAgICAgICB0aGlzLl9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUodGhpcy5maWx0ZXJNZW51S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2VsZWN0RmlsdGVyRnJvbVN0YXRlKGZpbHRlcktleSkge1xuXG4gICAgICAgIGlmICghdGhpcy50YWJsZUFQSS5zdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMudGFibGVBUEkuc3RhdGUubG9hZGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnRhYmxlQVBJLnN0YXRlLmxvYWRlZCgpLmZpbHRlcnMpIHJldHVybjtcblxuICAgICAgICAvLyBzYXZlIHRoZSBjdXJyZW50IHRhYmxlIHN0YXRlXG4gICAgICAgIHRhYmxlQVBJLnN0YXRlLnNhdmUoKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVBbGxGaWx0ZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6ICdhbGwnLFxuICAgICAgICAgICAgbGFiZWw6IGkxOG5fZXh0LmFsbCxcbiAgICAgICAgICAgIHJlZ2V4OiAnJyxcbiAgICAgICAgICAgIGNvdW50YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLmZpbmQoJ2kuZmFzLmZhLWZpbHRlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGRyb3Bkb3duLnRpdGxlLmh0bWwoYCR7dGhpcy5maWx0ZXJUaXRsZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfdXBkYXRlKCkge1xuXG4gICAgICAgIC8vIGlmIHRoZSBmaWx0ZXJzIGhhdmUgbm90IGJlZW4gaW5pdGlhbGl6ZWQgYnkgX3JlbmRlciB0aGVuIHJldHVyblxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMucHJldmVudFVwZGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5wcmV2ZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtfLCBmaWx0ZXJdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZmlsdGVycykpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuY291bnRhYmxlID09IGZhbHNlIHx8IGZpbHRlci5maWx0ZXIuY291bnRhYmxlID09IGZhbHNlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMudGFibGVBUEkuY29sdW1ucyh0aGlzLmNvbHVtbkluZGV4KS5kYXRhKClbMF07XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2NvdW50RW50cmllcyhmaWx0ZXIuZmlsdGVyLnJlZ2V4LCBkYXRhKTtcblxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgZmlsdGVyIGlmIHRoZSBjb3VudCBpcyB6ZXJvXG4gICAgICAgICAgICAoY291bnQgPT0gMCkgPyBmaWx0ZXIuJG5vZGUuaGlkZSgpIDogZmlsdGVyLiRub2RlLnNob3coKTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY291bnRlciBsYWJlbFxuICAgICAgICAgICAgZmlsdGVyLiRub2RlLmZpbmQoJy5jb3VudGVyJykudGV4dChgKCR7Y291bnR9KWApO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBidXR0b24gY291bnRlclxuICAgICAgICAgICAgdGhpcy4kZHJvcGRvd24uYnV0dG9uLmZpbmQoJy5jb3VudGVyJykudGV4dChgKCR7Y291bnR9KWApO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVVdGlscyB7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzdGFuZGFyZCBjb25maWcgZm9yIHRoZSBTcHJ5bWVkaWEgKGMpIERhdGFUYWJsZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U3RkRGF0YXRhYmxlQ29uZmlnKGR0QnV0dG9ucyA9IFtdLCBkb20gPSBcIjwncm93JzwnY29sLXNtLTIgZC1pbmxpbmUtYmxvY2snbD48J2NvbC1zbS0xMCB0ZXh0LWVuZCBkLWlubGluZS1ibG9jayc8J2R0LXNlYXJjaCdmPkI+cnRpcD5cIikge1xuXG4gICAgICAgIC8vIGhpZGUgdGhlIGJ1dHRvbnMgc2VjdGlvbiBpZiB0aGVyZSBhcmVuJ3QgYnV0dG9ucyBpbnNpZGUgdGhlIGFycmF5XG4gICAgICAgIGlmIChkdEJ1dHRvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGRvbSA9IFwiZkJydGlwXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9tOiBkb20sXG4gICAgICAgICAgICBwYWdpbmdUeXBlOiAnZnVsbF9udW1iZXJzJyxcbiAgICAgICAgICAgIGxlbmd0aE1lbnU6IFtbMTAsIDIwLCA1MCwgMTAwXSwgWzEwLCAyMCwgNTAsIDEwMF1dLFxuICAgICAgICAgICAgbGFuZ3VhZ2U6IHtcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGkxOG4uc2NyaXB0X3NlYXJjaCxcbiAgICAgICAgICAgICAgICBwYWdpbmF0ZToge1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJyZsdDsnLFxuICAgICAgICAgICAgICAgICAgICBuZXh0OiAnJmd0OycsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAnwqsnLFxuICAgICAgICAgICAgICAgICAgICBsYXN0OiAnwrsnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmVTdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uczogZHRCdXR0b25zLFxuICAgICAgICAgICAgICAgIGRvbToge1xuICAgICAgICAgICAgICAgICAgICBidXR0b246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tbGluaydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkLWlubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVMaW5rQ2FsbGJhY2soYWN0aW9uKSB7XG4gICAgICAgIGxldCBoYW5kbGVyID0gXCJcIjtcbiAgICAgICAgbGV0IGZPbkNsaWNrID0gRGF0YVRhYmxlSGFuZGxlcnMuYWRkSGFuZGxlcihhY3Rpb24uaGFuZGxlcik7XG4gICAgICAgIGhhbmRsZXIgPSBgb25jbGljaz1cIiR7Zk9uQ2xpY2t9XCJgO1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9I1xuICAgICAgICAgICAgICAgICAgICR7aGFuZGxlcn0+XG4gICAgICAgICAgICAgICAgICAgJHthY3Rpb24udGV4dCB8fCAnJ31cbiAgICAgICAgICAgICAgICA8L2E+YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGFtcGxlIG9mIGFjdGlvbjpcbiAgICAgKiB7XG4gICAgICogIGNsYXNzOiBzdHJpbmcsXG4gICAgICogIGRhdGE6IG9iamVjdCxcbiAgICAgKiAgaWNvbjogc3RyaW5nLFxuICAgICAqICBtb2RhbDogc3RyaW5nLFxuICAgICAqICBocmVmOiBzdHJpbmcsXG4gICAgICogIGhpZGRlbjogYm9vbCxcbiAgICAgKiB9XG4gICAgICogQHBhcmFtIHsqfSBhY3Rpb25zXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUFjdGlvbkJ1dHRvbnMoYWN0aW9ucyA9IFtdKSB7XG5cbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IFtdO1xuICAgICAgICBjb25zdCBkcm9wZG93bkJ1dHRvbiA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+PGkgY2xhc3M9XCJmYXMgZmEtYWxpZ24tanVzdGlmeVwiPjwvaT48L2J1dHRvbj4nXG5cbiAgICAgICAgYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24sIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBoYW5kbGVyID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChhY3Rpb24uaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGxldCBmT25DbGljayA9IERhdGFUYWJsZUhhbmRsZXJzLmFkZEhhbmRsZXIoYWN0aW9uLmhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBgb25jbGljaz1cIiR7Zk9uQ2xpY2t9XCJgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGJ1dHRvbiA9IChgXG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgJHsoYWN0aW9uLmhyZWYgfHwgYWN0aW9uLm1vZGFsKSA/IGBocmVmPScke2FjdGlvbi5ocmVmIHx8IGFjdGlvbi5tb2RhbH0nYCA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAke2hhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgICR7KGFjdGlvbi5vbmNsaWNrKSA/IGBvbmNsaWNrPScke2FjdGlvbi5vbmNsaWNrfSdgIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLm1vZGFsID8gXCJkYXRhLWJzLXRvZ2dsZT0nbW9kYWwnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9J2Ryb3Bkb3duLWl0ZW0gJHthY3Rpb24uY2xhc3MgPyBhY3Rpb24uY2xhc3MgOiBgYH0nXG4gICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLmhpZGRlbiA/IFwic3R5bGU9J2Rpc3BsYXk6IG5vbmUnXCIgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgJHthY3Rpb24uZXh0ZXJuYWwgPyBcInRhcmdldD0nX2Fib3V0J1wiIDogYGB9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyAke2FjdGlvbi5pY29ufSc+PC9pPiAke2FjdGlvbi50aXRsZSB8fCAnJ31cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICBidXR0b25zLnB1c2goYnV0dG9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbGlzdCA9IGA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+JHtidXR0b25zLmpvaW4oJycpfTwvdWw+YFxuXG4gICAgICAgIHJldHVybiAoYDxkaXYgY2xhc3M9J2Ryb3Bkb3duJz4ke2Ryb3Bkb3duQnV0dG9ufSR7bGlzdH08L2Rpdj5gKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVsZXRlQnV0dG9uSGFuZGxlcnMoaGFuZGxlcklkKSB7XG4gICAgICAgIERhdGFUYWJsZUhhbmRsZXJzLmRlbGV0ZUhhbmRsZXJzQnlJZChoYW5kbGVySWQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRBamF4Q29uZmlnKGNvbmZpZywgdXJsLCBkYXRhU3JjID0gJycsIG1ldGhvZCA9IFwiZ2V0XCIsIHBhcmFtcyA9IHt9KSB7XG5cbiAgICAgICAgY29uZmlnLmFqYXggPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgICAgICAgIGRhdGFTcmM6IGRhdGFTcmMsXG4gICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgZCwgcGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgc3RhdGljIGV4dGVuZENvbmZpZyhjb25maWcsIGV4dGVuc2lvbikge1xuXG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBjdXN0b20gZmlsdGVycyB0aGVuIG1hbmFnZSBzdGF0ZSBpbiB0aGlzIHdheVxuICAgICAgICBpZiAoZXh0ZW5zaW9uLmhhc0ZpbHRlcnMpIHtcblxuICAgICAgICAgICAgZXh0ZW5zaW9uLnN0YXRlU2F2ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0RhdGFUYWJsZXNfJyArIHNldHRpbmdzLnNJbnN0YW5jZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVMb2FkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRGF0YVRhYmxlc18nICsgc2V0dGluZ3Muc0luc3RhbmNlKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBvbiBzYXZpbmcgdGhlIHRhYmxlIHN0YXRlIHN0b3JlIHRoZSBzZWxlY3RlZCBmaWx0ZXJzXG4gICAgICAgICAgICBleHRlbnNpb24uc3RhdGVTYXZlUGFyYW1zID0gZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBzYXZlIHRoZSBmaWx0ZXJzIHNlbGVjdGVkIGZyb20gdGhlIHVzZXIgaW5zaWRlIHRoZSBzdGF0ZVxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLWZpbHRlcl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVGaWx0ZXIgPSAkKHRoaXMpLmZpbmQoYGxpLmFjdGl2ZWApLmRhdGEoJ2ZpbHRlci1rZXknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhY3RpdmVGaWx0ZXIpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmlsdGVycyBvYmplY3QgaXMgbm90IGFsbG9jYXRlZCB0aGVuIGluaXRpemlhbGl6ZXMgaXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhLmZpbHRlcnMpIGRhdGEuZmlsdGVycyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbHRlcnNbJCh0aGlzKS5kYXRhKCdmaWx0ZXInKV0gPSBhY3RpdmVGaWx0ZXI7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zdCB1c2VySW5pdENvbXBsZXRlID0gZXh0ZW5zaW9uLmluaXRDb21wbGV0ZTtcblxuICAgICAgICAvLyBjb25zdCBpbml0Q29tcGxldGUgPSAoc2V0dGluZ3MsIGpzb24pID0+IHtcbiAgICAgICAgLy8gICAgIGlmICh1c2VySW5pdENvbXBsZXRlICE9PSB1bmRlZmluZWQpIHVzZXJJbml0Q29tcGxldGUoc2V0dGluZ3MsIGpzb24pO1xuICAgICAgICAvLyAgICAgLy8gdHVybiBvbiB0b29sdGlwc1xuICAgICAgICAvLyAgICAgJChgLmFjdGlvbnMtZ3JvdXAgW3RpdGxlXWApLnRvb2x0aXAoJ2VuYWJsZScpO1xuICAgICAgICAvLyB9O1xuXG4gICAgICAgIC8vIC8vIG92ZXJyaWRlIGluaXRDb21wbGV0ZSBmdW5jdGlvblxuICAgICAgICAvLyBleHRlbnNpb24uaW5pdENvbXBsZXRlID0gaW5pdENvbXBsZXRlO1xuXG4gICAgICAgIHJldHVybiAkLmV4dGVuZCh7fSwgY29uZmlnLCBleHRlbnNpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCB0aGUgcGFzc2VkIHNlY29uZHMgaW50byB0aGUgXCJISDpNTTpTU1wiIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kc1xuICAgICAqL1xuICAgIHN0YXRpYyBzZWNvbmRzVG9ISE1NU1Moc2Vjb25kcykge1xuXG4gICAgICAgIGNvbnN0IHBhZFplcm9lcyA9IG4gPT4gYCR7bn1gLnBhZFN0YXJ0KDIsICcwJyk7XG5cbiAgICAgICAgY29uc3Qgc2VjID0gc2Vjb25kcyAlIDYwO1xuICAgICAgICBjb25zdCBtaW5zID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApICUgNjA7XG4gICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG5cbiAgICAgICAgcmV0dXJuIGAke3BhZFplcm9lcyhob3Vycyl9OiR7cGFkWmVyb2VzKG1pbnMpfToke3BhZFplcm9lcyhzZWMpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBPcGVuIHRoZSBwb29sIGVkaXQgbW9kYWwgb2YgYSBjaG9zZW4gcG9vbCBpZiB0aGUgcXVlcnkgcGFyYW1zIGNvbnRhaW5zIHRoZSBwb29sIHBhcmFtYXRlclxuICAgICogQHBhcmFtIHRhYmxlQVBJXG4gICAgKi9cbiAgICBzdGF0aWMgb3BlbkVkaXRNb2RhbEJ5UXVlcnkocGFyYW1zKSB7XG5cbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgaWYgKCF1cmxQYXJhbXMuaGFzKHBhcmFtcy5wYXJhbU5hbWUpKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZGF0YUlEID0gdXJsUGFyYW1zLmdldChwYXJhbXMucGFyYW1OYW1lKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBhcmFtcy5kYXRhdGFibGVJbnN0YW5jZS5kYXRhKCkudG9BcnJheSgpLmZpbmQoKGRhdGEgPT4gZGF0YVtwYXJhbXMucGFyYW1OYW1lXSA9PSBkYXRhSUQpKTtcblxuICAgICAgICAvLyBpZiB0aGUgY2FuY2VsSWYgcGFyYW0gaGFzIGJlZW4gcGFzc2VkXG4gICAgICAgIC8vIHRoZW4gdGVzdCB0aGUgY2FuY2VsSWYgZnVuY3Rpb24sIGlmIHRoZSByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gaXMgdHJ1ZSB0aGVuIGNhbmNlbCB0aGUgbW9kYWwgb3BlbmluZ1xuICAgICAgICBpZiAodHlwZW9mIChwYXJhbXMuY2FuY2VsSWYpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmNhbmNlbElmKGRhdGEpKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCAkbW9kYWwgPSAkKGAjJHtwYXJhbXMubW9kYWxIYW5kbGVyLmdldE1vZGFsSUQoKX1gKTtcblxuICAgICAgICAvLyBpZiB0aGUgcG9vbCBpZCBpcyB2YWxpZCB0aGVuIG9wZW4gdGhlIGVkaXQgbW9kYWxcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGFyYW1zLm1vZGFsSGFuZGxlci5pbnZva2VNb2RhbEluaXQoZGF0YSk7XG4gICAgICAgICAgICAkbW9kYWwubW9kYWwoJ3Nob3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXJsUGFyYW1zLmhhcygncmVmZXJlcicpKSB7XG4gICAgICAgICAgICAkbW9kYWwub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmRlbGV0ZShwYXJhbXMucGFyYW1OYW1lKTtcblxuICAgICAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVmZXJlciA9IHVybFBhcmFtcy5nZXQoJ3JlZmVyZXInKTtcblxuICAgICAgICAkbW9kYWwub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSByZWZlcmVyO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkVG9nZ2xlQ29sdW1uc0Ryb3Bkb3duKHRhYmxlQVBJLCB0b2dnbGVDYWxsYmFjayA9IChjb2wsIHZpc2libGUpID0+IHt9KSB7XG5cbiAgICAgICAgaWYgKHRhYmxlQVBJID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93ICdUaGUgJHRhYmxlIGlzIHVuZGVmaW5lZCEnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFibGVJRCA9IHRhYmxlQVBJLnRhYmxlKCkubm9kZSgpLmlkO1xuXG4gICAgICAgIERhdGFUYWJsZVV0aWxzLl9sb2FkQ29sdW1uc1Zpc2liaWxpdHkodGFibGVBUEkpLnRoZW4oZnVuY3Rpb24gKGZldGNoZWREYXRhKSB7XG5cbiAgICAgICAgICAgIGxldCBzYXZlZENvbHVtbnMgPSBbLTFdO1xuICAgICAgICAgICAgaWYgKGZldGNoZWREYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBzYXZlZENvbHVtbnMgPSBmZXRjaGVkRGF0YS5jb2x1bW5zLm1hcChpID0+IHBhcnNlSW50KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihmZXRjaGVkRGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlZENvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0ICRkYXRhdGFibGVXcmFwcGVyID0gJCh0YWJsZUFQSS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuXG4gICAgICAgICAgICAvLyBnZXQgdGhlIHRhYmxlIGhlYWRlcnMgXG4gICAgICAgICAgICB0YWJsZUFQSS5jb2x1bW5zKCkuZXZlcnkoZnVuY3Rpb24gKGkpIHtcblxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFscmVhZHkgaGlkZGVuIGNvbHVtbnNcbiAgICAgICAgICAgICAgICBpZiAoIXRhYmxlQVBJLmNvbHVtbihpKS52aXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZENvbHVtbnMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7IGluZGV4OiBpLCBuYW1lOiB0aGlzLmhlYWRlcigpLnRleHRDb250ZW50LCBsYWJlbDogdGhpcy5pMThuLm5hbWUgLyogSHVtYW4tcmVhZGFibGUgY29sdW1uIG5hbWUgKi8gfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgJGJ0bkdyb3VwID0gJChgXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGluayBkcm9wZG93bi10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV5ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBgKTtcblxuICAgICAgICAgICAgY29uc3QgJGRyb3Bkb3duTWVudSA9ICQoYDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIiBzdHlsZT0nd2lkdGg6IG1heC1jb250ZW50Oyc+PGg2IGNsYXNzPVwiZHJvcGRvd24taGVhZGVyXCI+U2hvdyBDb2x1bW5zPC9oNj48L2Rpdj5gKTtcbiAgICAgICAgICAgIGNvbnN0ICRjaGVja2JveGVzID0gJChgPGRpdiBjbGFzcz0ncHgtNCc+PC9kaXY+YCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHVtbnNbaV07XG5cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50cyBjb2x1bW5zIHdpdGggbm8gbmFtZXMgdG8gYmUgc2VsZWN0aXZlbHkgaGlkZGVuIChlLmcuLCB0aGUgZW50aXR5IHVuZGVyIHRoZSBhbGwgYWxlcnRzIHBhZ2UpXG4gICAgICAgICAgICAgICAgaWYoY29sdW1uLm5hbWUgPT0gXCJcIilcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBjaGVja2JveCBhbmQgZGVsZWdhdGUgYSBjaGFuZ2UgZXZlbnRcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGB0b2dnbGUtJHtjb2x1bW4ubmFtZS5zcGxpdCgpLmpvaW4oJ18nKX1gOyBcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjb2x1bW4gaWQgaXQncyBpbnNpZGUgdGhlIHNhdmVkQ29sdW1ucyBhcnJheVxuICAgICAgICAgICAgICAgIC8vIGlmIHRvZ2dsZWQgaXMgdHJ1ZSB0aGVuIHRoZSBjb2x1bW4gaXMgbm90IGhpZGRlblxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZ2dsZWQgPSBzYXZlZENvbHVtbnMuaW5kZXhPZihjb2x1bW4uaW5kZXgpID09PSAtMTtcbiAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gdGFibGVBUEkuY29sdW1uKGNvbHVtbi5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCAkY2hlY2tib3ggPSAkKGA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgJHsodG9nZ2xlZCA/ICdjaGVja2VkJyA6ICcnKX0gdHlwZT1cImNoZWNrYm94XCIgaWQ9XCIke2lkfVwiPmApO1xuICAgICAgICAgICAgICAgIGNvbnN0ICR3cmFwcGVyID0gJChgXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwiJHtpZH1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2NvbHVtbi5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgYCk7XG5cbiAgICAgICAgICAgICAgICAkY2hlY2tib3gub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICQoYC5vdmVybGF5YCkudG9nZ2xlKDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGNvbHVtbiBBUEkgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRhYmxlQVBJLmNvbHVtbihjb2x1bW4uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUb2dnbGUgdGhlIHZpc2liaWxpdHlcbiAgICAgICAgICAgICAgICAgICAgY29sLnZpc2libGUoIWNvbC52aXNpYmxlKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSBjb2wudmlzaWJsZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZGRlbkNvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zZXJ0IGluc2lkZSB0aGUgYXJyYXkgb25seSB0aGUgaGlkZGVuIGNvbHVtbnNcbiAgICAgICAgICAgICAgICAgICAgdGFibGVBUEkuY29sdW1ucygpLmV2ZXJ5KGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZUFQSS5jb2x1bW4oaSkudmlzaWJsZSgpIHx8IGlnbm9yZWRDb2x1bW5zLmluZGV4T2YoaSkgIT09IC0xKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW5Db2x1bW5zLnB1c2goaSk7IFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHRoZSB0YWJsZSB2aWV3IGluc2lkZSByZWRpc1xuICAgICAgICAgICAgICAgICAgICAkLnBvc3QoYCR7aHR0cF9wcmVmaXh9L2x1YS9kYXRhdGFibGVfY29sdW1ucy5sdWFgLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdzYXZlJywgdGFibGU6IHRhYmxlSUQsIGNvbHVtbnM6IGhpZGRlbkNvbHVtbnMuam9pbignLCcpLCBjc3JmOiB3aW5kb3cuX19DU1JGX0RBVEFUQUJMRV9fXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2VzcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGVDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDYWxsYmFjayhjb2wsIHZpc2libGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICR3cmFwcGVyLnByZXBlbmQoJGNoZWNrYm94KTtcbiAgICAgICAgICAgICAgICAkY2hlY2tib3hlcy5hcHBlbmQoJHdyYXBwZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkZHJvcGRvd25NZW51Lm9uKFwiY2xpY2suYnMuZHJvcGRvd25cIiwgZnVuY3Rpb24gKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfSk7XG5cbiAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgbmV3IG5vZGUgaW5zaWRlIHRoZSBkYXRhdGFibGVcbiAgICAgICAgICAgICRidG5Hcm91cC5hcHBlbmQoJGRyb3Bkb3duTWVudS5hcHBlbmQoJGNoZWNrYm94ZXMpKTtcbiAgICAgICAgICAgICRkYXRhdGFibGVXcmFwcGVyLmZpbmQoJy5kdC1zZWFyY2gnKS5wYXJlbnQoKS5hcHBlbmQoJGJ0bkdyb3VwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIF9sb2FkQ29sdW1uc1Zpc2liaWxpdHkodGFibGVBUEkpIHtcbiAgICAgICAgY29uc3QgdGFibGVJRCA9IHRhYmxlQVBJLnRhYmxlKCkubm9kZSgpLmlkO1xuICAgICAgICByZXR1cm4gJC5nZXQoYCR7aHR0cF9wcmVmaXh9L2x1YS9kYXRhdGFibGVfY29sdW1ucy5sdWE/dGFibGU9JHt0YWJsZUlEfSZhY3Rpb249bG9hZGApO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlUmVuZGVycyB7XG5cbiAgICBzdGF0aWMgYWxlcnRTZXZlcml0eUFuZFR5cGUoc2V2ZXJpdHksIHR5cGUsIGFsZXJ0KSB7XG4gICAgICAgIHJldHVybiBgJHtEYXRhVGFibGVSZW5kZXJzLmZvcm1hdFZhbHVlTGFiZWwoc2V2ZXJpdHksIHR5cGUsIGFsZXJ0KX0gJHtEYXRhVGFibGVSZW5kZXJzLmZvcm1hdFZhbHVlTGFiZWwoYWxlcnQuYWxlcnRfaWQsIHR5cGUsIGFsZXJ0KX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBoaWRlSWZaZXJvKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgbGV0IGNvbG9yID0gKG9iai5jb2xvciAhPT0gdW5kZWZpbmVkID8gb2JqLmNvbG9yIDogXCIjYWFhXCIpO1xuICAgICAgICBsZXQgdmFsdWUgPSAob2JqLnZhbHVlICE9PSB1bmRlZmluZWQgPyBvYmoudmFsdWUgOiBvYmopO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJkaXNwbGF5XCIgJiYgcGFyc2VJbnQodmFsdWUpID09PSAwKSBjb2xvciA9IFwiI2FhYVwiO1xuICAgICAgICBsZXQgc3BhbiA9IGA8c3BhbiBzdHlsZT0nY29sb3I6ICR7Y29sb3J9Jz4ke050b3BVdGlscy5maW50KHZhbHVlKX08L3NwYW4+YDtcbiAgICAgICAgaWYgKG9iai51cmwgIT09IHVuZGVmaW5lZCkgc3BhbiA9IGA8YSBocmVmPVwiJHtvYmoudXJsfVwiPiR7c3Bhbn08L2E+YDtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuXG4gICAgc3RhdGljIHNlY29uZHNUb1RpbWUoc2Vjb25kcywgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZGlzcGxheVwiKSByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoc2Vjb25kcyk7XG4gICAgICAgIHJldHVybiBzZWNvbmRzO1xuICAgIH1cblxuICAgIHN0YXRpYyBmaWx0ZXJpemUoa2V5LCB2YWx1ZSwgbGFiZWwsIHRhZ19sYWJlbCwgdGl0bGUsIGh0bWwsIGlzX3NubXBfaXAsIGlwKSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgdGl0bGU9JyR7dGl0bGUgfHwgdmFsdWV9JyBkYXRhLXRhZy12YWx1ZT0nJHt2YWx1ZX0nIGRhdGEtdGFnLWxhYmVsPScke3RhZ19sYWJlbCB8fCBsYWJlbCB8fCB2YWx1ZX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtodG1sIHx8IGxhYmVsIHx8IHZhbHVlfTwvYT5gO1xuICAgICAgICBpZihpc19zbm1wX2lwICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmKGlzX3NubXBfaXApIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3NubXBfZGV2aWNlX2RldGFpbHMubHVhP2hvc3Q9JHt2YWx1ZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgIDxhIGhyZWY9JyR7dXJsfSdkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpcCAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke2lwfSZzbm1wX3BvcnRfaWR4PSR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYCA8YSBocmVmPScke3VybH0nZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnIHRpdGxlPScnPjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9hPmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRWYWx1ZUxhYmVsKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IG9iai5sYWJlbDtcbiAgICAgICAgaWYgKHplcm9faXNfbnVsbCA9PSB0cnVlICYmIG9iai52YWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICBjZWxsID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLmNvbG9yKSBjZWxsID0gYDxzcGFuIGNsYXNzPSdmb250LXdlaWdodC1ib2xkJyBzdHlsZT0nY29sb3I6ICR7b2JqLmNvbG9yfSc+JHtjZWxsfTwvc3Bhbj5gO1xuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0Q2F0ZWdvcnkob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgIGxldCBjZWxsID0gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9J2FsZXJ0X2NhdGVnb3J5JyBkYXRhLXRhZy12YWx1ZT0nJHtvYmoudmFsdWV9JyBkYXRhLXRhZy1sYWJlbD0nJHtvYmoubGFiZWx9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPjxpIGNsYXNzPVwiZmEgZmFzICR7b2JqLmljb259XCIgdGl0bGU9XCIke29iai5sYWJlbH1cIj48L2k+PC9hPmA7XG4gICAgICAgIGlmICh6ZXJvX2lzX251bGwgPT0gdHJ1ZSAmJiBvYmoudmFsdWUgPT0gMCkge1xuICAgICAgICAgICAgY2VsbCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFNjb3JlKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IG9iai5sYWJlbDtcbiAgICAgICAgaWYgKHplcm9faXNfbnVsbCA9PSB0cnVlICYmIG9iai52YWx1ZSA9PSAwKSB7XG4gICAgICAgICAgICBjZWxsID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLmNvbG9yKSBjZWxsID0gYDxzcGFuIGNsYXNzPSdmb250LXdlaWdodC1ib2xkJyBzdHlsZT0nY29sb3I6ICR7b2JqLmNvbG9yfSc+JHtjZWxsfTwvc3Bhbj5gO1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9J3Njb3JlJyB0aXRsZT0nJHtvYmoubGFiZWx9JyBkYXRhLXRhZy12YWx1ZT0nJHtvYmoudmFsdWV9JyBkYXRhLXRhZy1sYWJlbD0nJHtvYmoubGFiZWx9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPiR7Y2VsbH08L2E+YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0TWVzc2FnZShvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgICAgXG4gICAgICAgIGxldCBjZWxsID0gb2JqLmRlc2NyO1xuICAgICAgICBpZiAob2JqLnNob3J0ZW5fZGVzY3IpXG4gICAgICAgICAgICBjZWxsID0gYDxzcGFuIHRpdGxlPVwiJHtvYmouZGVzY3J9XCI+JHtvYmouc2hvcnRlbl9kZXNjcn08L3NwYW4+YDtcblxuICAgICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0VHJhZmZpYyhvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai50b3RhbF9ieXRlcztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRyYWZmaWMgPSBgJHtOdG9wVXRpbHMuZm9ybWF0UGFja2V0cyhvYmoudG90YWxfcGFja2V0cyl9IC8gJHtOdG9wVXRpbHMuYnl0ZXNUb1ZvbHVtZShvYmoudG90YWxfYnl0ZXMpfWBcbiAgICAgICAgcmV0dXJuIHRyYWZmaWM7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFN1YnR5cGUob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG5cbiAgICAgICAgbGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3N1YnR5cGUnLCBvYmosIG9iaik7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsOyBcbiAgICB9XG5cbiAgICBzdGF0aWMgZmlsdGVyaXplXzIoa2V5LCB2YWx1ZSwgbGFiZWwsIHRhZ19sYWJlbCwgdGl0bGUsIGh0bWwpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKHZhbHVlID09IDAgJiYgKGxhYmVsID09IG51bGwgfHwgbGFiZWwgPT0gXCJcIikpKSB7IHJldHVybiBcIlwiOyB9XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0nJHtrZXl9JyB0aXRsZT0nJHt0aXRsZSB8fCB2YWx1ZX0nIGRhdGEtdGFnLXZhbHVlPScke3ZhbHVlfScgZGF0YS10YWctbGFiZWw9JyR7dGFnX2xhYmVsIHx8IGxhYmVsIHx8IHZhbHVlfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz4ke2h0bWwgfHwgbGFiZWwgfHwgdmFsdWV9PC9hPmA7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEZvcm1hdEdlbmVyaWNGaWVsZChmaWVsZCwgemVyb19pc19udWxsKSB7ICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgICAgICBpZiAoemVyb19pc19udWxsID09IHRydWUgJiYgb2JqPy52YWx1ZSA9PSAwKSB7IHJldHVybiBcIlwiOyB9XG4gICAgICAgICAgICAgICAgbGV0IGh0bWxfcmVmID0gJyc7XG4gICAgICAgICAgICBpZiAob2JqLnJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGh0bWxfcmVmID0gb2JqLnJlZmVyZW5jZVxuICAgICAgICAgICAgbGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVfMihmaWVsZCwgcm93W2ZpZWxkXS52YWx1ZSwgcm93W2ZpZWxkXS5sYWJlbCwgcm93W2ZpZWxkXS5sYWJlbCwgcm93W2ZpZWxkXS5sYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWwgKyAnICcgKyBodG1sX3JlZjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTTk1QSW50ZXJmYWNlKG9iaiwgdHlwZSwgcm93KSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgbGV0IGNlbGwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc25tcF9pbnRlcmZhY2UnLCBvYmoudmFsdWUsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWwsbnVsbCxmYWxzZSwgcm93LmlwKTtcbiAgICAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFNOTVBJUChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iajtcbiAgICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdpcCcsIG9iaiwgb2JqLCBvYmosIG9iaiwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdE5ldHdvcmsob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnbmV0d29ya19uYW1lJywgb2JqLCBvYmosIG9iaiwgb2JqLCBudWxsLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFByb2JlSVAob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG5cbiAgICAgICAgbGV0IGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3Byb2JlX2lwJywgb2JqLnZhbHVlLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsX2xvbmcpO1xuXG4gICAgICAgIHJldHVybiBsYWJlbDsgXG4gICAgfVxuICAgXG4gICAgc3RhdGljIGZvcm1hdEhvc3Qob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG4gICAgICAgICAgICBsZXQgaHRtbF9yZWYgPSAnJztcbiAgICAgICAgaWYgKG9iai5yZWZlcmVuY2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgaHRtbF9yZWYgPSBvYmoucmVmZXJlbmNlO1xuICAgICAgICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gICAgICAgIGxldCBob3N0S2V5LCBob3N0VmFsdWU7XG4gICAgICAgIGlmIChvYmoubGFiZWwgJiYgb2JqLmxhYmVsICE9IG9iai52YWx1ZSkge1xuICAgICAgICAgICAgaG9zdEtleSA9IFwibmFtZVwiO1xuICAgICAgICAgICAgaG9zdFZhbHVlID0gb2JqLmxhYmVsX2xvbmc7XG4gICAgICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCduYW1lJywgb2JqLmxhYmVsX2xvbmcsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob3N0S2V5ID0gXCJpcFwiO1xuICAgICAgICAgICAgaG9zdFZhbHVlID0gb2JqLnZhbHVlO1xuICAgICAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnaXAnLCBvYmoudmFsdWUsIG9iai5sYWJlbCwgb2JqLmxhYmVsLCBvYmoubGFiZWxfbG9uZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm93LnZsYW5faWQgJiYgcm93LnZsYW5faWQgIT0gXCJcIiAmJiByb3cudmxhbl9pZCAhPSBcIjBcIikge1xuICAgICAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZShob3N0S2V5LCBgJHtob3N0VmFsdWV9QCR7cm93LnZsYW5faWR9YCwgYCR7b2JqLmxhYmVsfUAke3Jvdy52bGFuX2lkfWAsIGAke29iai5sYWJlbH1AJHtyb3cudmxhbl9pZH1gLCBgJHtvYmoubGFiZWxfbG9uZ31AJHtyb3cudmxhbl9pZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmouY291bnRyeSlcbiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnY291bnRyeScsIG9iai5jb3VudHJ5LCBvYmouY291bnRyeSwgb2JqLmNvdW50cnksIG9iai5jb3VudHJ5LCAnIDxpbWcgc3JjPVwiJyArIGh0dHBfcHJlZml4ICsgJy9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0nICsgb2JqLmNvdW50cnkudG9Mb3dlckNhc2UoKSArICdcIj48L2E+ICcpO1xuXG4gICAgICAgIGlmIChyb3cucm9sZSAmJiByb3cucm9sZS52YWx1ZSA9PSAnYXR0YWNrZXInKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsIHJvdy5yb2xlLnZhbHVlLCBcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1za3VsbFwiIHRpdGxlPVwiJytyb3cucm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5yb2xlLmxhYmVsKTtcbiAgICAgICAgZWxzZSBpZiAocm93LnJvbGUgJiYgcm93LnJvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgcm93LnJvbGUudmFsdWUsXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtc2FkLXRlYXJcIiB0aXRsZT1cIicrcm93LnJvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZS5sYWJlbCk7XG5cbiAgICAgICAgaWYgKHJvdy5yb2xlX2NsaV9zcnYgJiYgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSA9PSAnY2xpZW50JylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGVfY2xpX3NydicsIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUsIFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCIgdGl0bGU9XCInK3Jvdy5yb2xlX2NsaV9zcnYubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZV9jbGlfc3J2LmxhYmVsKTtcbiAgICAgICAgZWxzZSBpZiAocm93LnJvbGVfY2xpX3NydiAmJiByb3cucm9sZV9jbGlfc3J2LnZhbHVlID09ICdzZXJ2ZXInKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZV9jbGlfc3J2Jywgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSxcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1sZWZ0XCIgdGl0bGU9XCInK3Jvdy5yb2xlX2NsaV9zcnYubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZV9jbGlfc3J2LmxhYmVsKTtcblxuICAgICAgICByZXR1cm4gbGFiZWwgKyAnICcgKyBodG1sX3JlZjsgXG4gICAgfVxuXG4gICAgc3RhdGljIGZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCBrZXksIHZhbHVlLCBsYWJlbCwgdGl0bGUpIHtcbiAgICAgICAgbGV0IHZhbHVlVmxhbiA9IHZhbHVlO1xuICBsZXQgbGFiZWxWbGFuID0gbGFiZWw7XG4gICAgICAgIGxldCB0aXRsZVZsYW4gPSB0aXRsZTtcbiAgICAgICAgaWYgKGZsb3cudmxhbiAmJiBmbG93LnZsYW4udmFsdWUgIT0gMCkge1xuICAgICAgICAgICAgdmFsdWVWbGFuID0gYCR7dmFsdWV9QCR7Zmxvdy52bGFuLnZhbHVlfWA7XG4gICAgICAgICAgICBsYWJlbFZsYW4gPSBgJHtsYWJlbH1AJHtmbG93LnZsYW4ubGFiZWx9YDtcbiAgICAgICAgICAgIHRpdGxlVmxhbiA9IGAke3RpdGxlfUAke2Zsb3cudmxhbi50aXRsZX1gO1xuICAgICAgICB9XG4gICAgICBsYWJlbFZsYW4gPSBOdG9wVXRpbHMuc2hvcnRlbkxhYmVsKGxhYmVsVmxhbiwgMTYsIFwiLlwiKVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKGtleSwgdmFsdWVWbGFuLCBsYWJlbFZsYW4sIGxhYmVsVmxhbiwgdGl0bGVWbGFuKTsgXG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdEZsb3dUdXBsZShmbG93LCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgbGV0IGFjdGl2ZV9yZWYgPSAoZmxvdy5hY3RpdmVfdXJsID8gYDxhIGhyZWY9XCIke2Zsb3cuYWN0aXZlX3VybH1cIj48aSBjbGFzcz1cImZhcyBmYS1zdHJlYW1cIj48L2k+PC9hPmAgOiBcIlwiKTtcbiAgICAgICAgbGV0IGNsaUxhYmVsID0gXCJcIjtcbiAgICAgICAgaWYgKGZsb3cuY2xpX2lwLm5hbWUpIHtcbiAgICAgICAgICBsZXQgdGl0bGUgPSBcIlwiO1xuICAgICAgICAgICAgaWYoZmxvdy5jbGlfaXAubGFiZWxfbG9uZykgdGl0bGUgPSBmbG93LmNsaV9pcC52YWx1ZSArIFwiIFtcIiArIGZsb3cuY2xpX2lwLmxhYmVsX2xvbmcgKyBcIl1cIjtcbiAgICAgICAgICAgIGNsaUxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ2NsaV9uYW1lJywgZmxvdy5jbGlfaXAubmFtZSwgZmxvdy5jbGlfaXAubGFiZWwsIHRpdGxlKTsgXG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgY2xpTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnY2xpX2lwJywgZmxvdy5jbGlfaXAudmFsdWUsIGZsb3cuY2xpX2lwLmxhYmVsLCBmbG93LmNsaV9pcC5sYWJlbF9sb25nKTsgXG5cbiAgICAgICAgbGV0IGNsaUZsYWdMYWJlbD0gJydcblxuICAgICAgICBpZiAoZmxvdy5jbGlfaXAuY291bnRyeSAmJiBmbG93LmNsaV9pcC5jb3VudHJ5ICE9PSBcIm5pbFwiKVxuICAgICAgICAgICAgY2xpRmxhZ0xhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2NsaV9jb3VudHJ5JywgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgZmxvdy5jbGlfaXAuY291bnRyeSwgJyA8aW1nIHNyYz1cIicgKyBodHRwX3ByZWZpeCArICcvZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJyArIGZsb3cuY2xpX2lwLmNvdW50cnkudG9Mb3dlckNhc2UoKSArICdcIj48L2E+ICcpO1xuXG4gICAgICAgIGxldCBjbGlQb3J0TGFiZWwgPSAoKGZsb3cuY2xpX3BvcnQgJiYgZmxvdy5jbGlfcG9ydCA+IDApID8gXCI6XCIrRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2NsaV9wb3J0JywgZmxvdy5jbGlfcG9ydCwgZmxvdy5jbGlfcG9ydCkgOiBcIlwiKTtcblxuICAgICAgICBsZXQgY2xpQmxhY2tsaXN0ZWQgPScnXG4gICAgICAgIGlmKGZsb3cuY2xpX2lwLmJsYWNrbGlzdGVkID09IHRydWUpIFxuICAgICAgICAgIGNsaUJsYWNrbGlzdGVkID0gXCIgPGkgY2xhc3M9XFwnZmFzIGZhLWJhbiBmYS1zbVxcJyB0aXRsZT1cXCdcIiArIGkxOG4oXCJob3N0c19zdGF0cy5ibGFja2xpc3RlZFwiKSArIFwiXFwnPjwvaT5cIlxuXG4gICAgICAgIGxldCBzcnZMYWJlbCA9IFwiXCJcbiAgICAgICAgaWYgKGZsb3cuc3J2X2lwLm5hbWUpIHtcbiAgICAgICAgICBsZXQgdGl0bGUgPSBcIlwiO1xuICAgICAgICAgIGlmKGZsb3cuc3J2X2lwLmxhYmVsX2xvbmcpIHRpdGxlID0gZmxvdy5zcnZfaXAudmFsdWUgKyBcIiBbXCIgKyBmbG93LnNydl9pcC5sYWJlbF9sb25nICsgXCJdXCI7XG4gICAgICAgICAgICBzcnZMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdzcnZfbmFtZScsIGZsb3cuc3J2X2lwLm5hbWUsIGZsb3cuc3J2X2lwLmxhYmVsLCB0aXRsZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgc3J2TGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnc3J2X2lwJywgZmxvdy5zcnZfaXAudmFsdWUsIGZsb3cuc3J2X2lwLmxhYmVsLCBmbG93LnNydl9pcC5sYWJlbF9sb25nKTtcbiAgICAgICAgbGV0IHNydlBvcnRMYWJlbCA9ICgoZmxvdy5zcnZfcG9ydCAmJiBmbG93LnNydl9wb3J0ID4gMCkgPyBcIjpcIitEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3J2X3BvcnQnLCBmbG93LnNydl9wb3J0LCBmbG93LnNydl9wb3J0KSA6IFwiXCIpO1xuXG4gICAgICAgIGxldCBzcnZGbGFnTGFiZWw9ICcnXG5cbiAgICAgICAgaWYgKGZsb3cuc3J2X2lwLmNvdW50cnkgJiYgZmxvdy5zcnZfaXAuY291bnRyeSAhPT0gXCJuaWxcIilcbiAgICAgICAgICAgIHNydkZsYWdMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzcnZfY291bnRyeScsIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksIGZsb3cuc3J2X2lwLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBmbG93LnNydl9pcC5jb3VudHJ5LnRvTG93ZXJDYXNlKCkgKyAnXCI+PC9hPiAnKTtcblxuICAgICAgICBsZXQgc3J2QmxhY2tsaXN0ZWQgPScnXG4gICAgICAgIGlmKGZsb3cuc3J2X2lwLmJsYWNrbGlzdGVkID09IHRydWUpIFxuICAgICAgICAgIHNydkJsYWNrbGlzdGVkID0gXCIgPGkgY2xhc3M9XFwnZmFzIGZhLWJhbiBmYS1zbVxcJyB0aXRsZT1cXCdcIiArIGkxOG4oXCJob3N0c19zdGF0cy5ibGFja2xpc3RlZFwiKSArIFwiXFwnPjwvaT5cIlxuICAgIFxuICAgICAgICBsZXQgY2xpSWNvbnMgPSBcIlwiO1xuICAgICAgICBsZXQgc3J2SWNvbnMgPSBcIlwiO1xuICAgICAgICBpZiAocm93LmNsaV9yb2xlKSB7XG4gICAgICAgICAgICBpZiAocm93LmNsaV9yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgICAgICAgY2xpSWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAnYXR0YWNrZXInLCAnPGkgY2xhc3M9XCJmYXMgZmEtc2t1bGxcIiB0aXRsZT1cIicrcm93LmNsaV9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LmNsaV9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgICAgICBlbHNlIGlmIChyb3cuY2xpX3JvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgICAgICAgY2xpSWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAndmljdGltJywgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cuY2xpX3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuY2xpX3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3cuc3J2X3JvbGUpIHtcbiAgICAgICAgICAgIGlmIChyb3cuc3J2X3JvbGUudmFsdWUgPT0gJ2F0dGFja2VyJylcbiAgICAgICAgICAgICAgICBzcnZJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICdhdHRhY2tlcicsICc8aSBjbGFzcz1cImZhcyBmYS1za3VsbFwiIHRpdGxlPVwiJytyb3cuc3J2X3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuc3J2X3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHJvdy5zcnZfcm9sZS52YWx1ZSA9PSAndmljdGltJylcbiAgICAgICAgICAgICAgICBzcnZJY29ucyArPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsICd2aWN0aW0nLCAgJzxpIGNsYXNzPVwiZmFzIGZhLXNhZC10ZWFyXCIgdGl0bGU9XCInK3Jvdy5zcnZfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5zcnZfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAke2FjdGl2ZV9yZWZ9ICR7Y2xpTGFiZWx9JHtjbGlCbGFja2xpc3RlZH0ke2NsaUZsYWdMYWJlbH0ke2NsaVBvcnRMYWJlbH0gJHtjbGlJY29uc30gJHtmbG93LmNsaV9pcC5yZWZlcmVuY2V9IDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2hhbmdlLWFsdCBmYS1sZ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4gJHtzcnZMYWJlbH0ke3NydkJsYWNrbGlzdGVkfSR7c3J2RmxhZ0xhYmVsfSR7c3J2UG9ydExhYmVsfSAke3Nydkljb25zfSAke2Zsb3cuc3J2X2lwLnJlZmVyZW5jZX1gO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTdWJ0eXBlVmFsdWVMYWJlbChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICBsZXQgbXNnID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3N1YnR5cGUnLCBvYmoudmFsdWUsIG9iai5uYW1lLCBvYmouZnVsbG5hbWUsIG9iai5mdWxsbmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0TmFtZURlc2NyaXB0aW9uKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLm5hbWU7XG4gICAgICAgIGxldCBtc2cgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnYWxlcnRfaWQnLCBvYmoudmFsdWUsIG9iai5uYW1lLCBvYmouZnVsbG5hbWUsIG9iai5mdWxsbmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIG1zZztcbiAgICB9XG5cbiAgICBzdGF0aWMgYXBwbHlDZWxsU3R5bGUoY2VsbCwgY2VsbERhdGEsIHJvd0RhdGEsIHJvd0luZGV4LCBjb2xJbmRleCkge1xuICAgICAgaWYgKGNlbGxEYXRhLmhpZ2hsaWdodCkge1xuICAgICAgICAgJChjZWxsKS5jc3MoXCJib3JkZXItbGVmdFwiLCBcIjVweCBzb2xpZCBcIitjZWxsRGF0YS5oaWdobGlnaHQpO1xuICAgICAgfVxuICAgfVxufVxuIiwiZnVuY3Rpb24gZShlLHQpe2NvbnN0IG49T2JqZWN0LmNyZWF0ZShudWxsKSxvPWUuc3BsaXQoXCIsXCIpO2ZvcihsZXQgcj0wO3I8by5sZW5ndGg7cisrKW5bb1tyXV09ITA7cmV0dXJuIHQ/ZT0+ISFuW2UudG9Mb3dlckNhc2UoKV06ZT0+ISFuW2VdfWNvbnN0IHQ9ZShcIkluZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludFwiKSxuPWUoXCJpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlcIik7ZnVuY3Rpb24gbyhlKXtyZXR1cm4hIWV8fFwiXCI9PT1lfWZ1bmN0aW9uIHIoZSl7aWYoRShlKSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dLHM9UChvKT9sKG8pOnIobyk7aWYocylmb3IoY29uc3QgZSBpbiBzKXRbZV09c1tlXX1yZXR1cm4gdH1yZXR1cm4gUChlKXx8TShlKT9lOnZvaWQgMH1jb25zdCBzPS87KD8hW14oXSpcXCkpL2csaT0vOiguKykvO2Z1bmN0aW9uIGwoZSl7Y29uc3QgdD17fTtyZXR1cm4gZS5zcGxpdChzKS5mb3JFYWNoKChlPT57aWYoZSl7Y29uc3Qgbj1lLnNwbGl0KGkpO24ubGVuZ3RoPjEmJih0W25bMF0udHJpbSgpXT1uWzFdLnRyaW0oKSl9fSkpLHR9ZnVuY3Rpb24gYyhlKXtsZXQgdD1cIlwiO2lmKFAoZSkpdD1lO2Vsc2UgaWYoRShlKSlmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1jKGVbbl0pO28mJih0Kz1vK1wiIFwiKX1lbHNlIGlmKE0oZSkpZm9yKGNvbnN0IG4gaW4gZSllW25dJiYodCs9bitcIiBcIik7cmV0dXJuIHQudHJpbSgpfWZ1bmN0aW9uIGEoZSl7aWYoIWUpcmV0dXJuIG51bGw7bGV0e2NsYXNzOnQsc3R5bGU6bn09ZTtyZXR1cm4gdCYmIVAodCkmJihlLmNsYXNzPWModCkpLG4mJihlLnN0eWxlPXIobikpLGV9Y29uc3QgdT1lKFwiaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiKSxwPWUoXCJzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlcixmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLGZlRGlzdGFuY2VMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLGZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlcixmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3XCIpLGY9ZShcImFyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyXCIpO2Z1bmN0aW9uIGQoZSx0KXtpZihlPT09dClyZXR1cm4hMDtsZXQgbj1SKGUpLG89Uih0KTtpZihufHxvKXJldHVybiEoIW58fCFvKSYmZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTtpZihuPUEoZSksbz1BKHQpLG58fG8pcmV0dXJuIGU9PT10O2lmKG49RShlKSxvPUUodCksbnx8bylyZXR1cm4hKCFufHwhbykmJmZ1bmN0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtsZXQgbj0hMDtmb3IobGV0IG89MDtuJiZvPGUubGVuZ3RoO28rKyluPWQoZVtvXSx0W29dKTtyZXR1cm4gbn0oZSx0KTtpZihuPU0oZSksbz1NKHQpLG58fG8pe2lmKCFufHwhbylyZXR1cm4hMTtpZihPYmplY3Qua2V5cyhlKS5sZW5ndGghPT1PYmplY3Qua2V5cyh0KS5sZW5ndGgpcmV0dXJuITE7Zm9yKGNvbnN0IG4gaW4gZSl7Y29uc3Qgbz1lLmhhc093blByb3BlcnR5KG4pLHI9dC5oYXNPd25Qcm9wZXJ0eShuKTtpZihvJiYhcnx8IW8mJnJ8fCFkKGVbbl0sdFtuXSkpcmV0dXJuITF9fXJldHVybiBTdHJpbmcoZSk9PT1TdHJpbmcodCl9ZnVuY3Rpb24gaChlLHQpe3JldHVybiBlLmZpbmRJbmRleCgoZT0+ZChlLHQpKSl9Y29uc3QgbT1lPT5QKGUpP2U6bnVsbD09ZT9cIlwiOkUoZSl8fE0oZSkmJihlLnRvU3RyaW5nPT09SXx8IUYoZS50b1N0cmluZykpP0pTT04uc3RyaW5naWZ5KGUsZywyKTpTdHJpbmcoZSksZz0oZSx0KT0+dCYmdC5fX3ZfaXNSZWY/ZyhlLHQudmFsdWUpOiQodCk/e1tgTWFwKCR7dC5zaXplfSlgXTpbLi4udC5lbnRyaWVzKCldLnJlZHVjZSgoKGUsW3Qsbl0pPT4oZVtgJHt0fSA9PmBdPW4sZSkpLHt9KX06Tyh0KT97W2BTZXQoJHt0LnNpemV9KWBdOlsuLi50LnZhbHVlcygpXX06IU0odCl8fEUodCl8fEwodCk/dDpTdHJpbmcodCksdj17fSx5PVtdLF89KCk9Pnt9LGI9KCk9PiExLFM9L15vblteYS16XS8seD1lPT5TLnRlc3QoZSksQz1lPT5lLnN0YXJ0c1dpdGgoXCJvblVwZGF0ZTpcIiksdz1PYmplY3QuYXNzaWduLGs9KGUsdCk9Pntjb25zdCBuPWUuaW5kZXhPZih0KTtuPi0xJiZlLnNwbGljZShuLDEpfSxUPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTj0oZSx0KT0+VC5jYWxsKGUsdCksRT1BcnJheS5pc0FycmF5LCQ9ZT0+XCJbb2JqZWN0IE1hcF1cIj09PUIoZSksTz1lPT5cIltvYmplY3QgU2V0XVwiPT09QihlKSxSPWU9PlwiW29iamVjdCBEYXRlXVwiPT09QihlKSxGPWU9PlwiZnVuY3Rpb25cIj09dHlwZW9mIGUsUD1lPT5cInN0cmluZ1wiPT10eXBlb2YgZSxBPWU9Plwic3ltYm9sXCI9PXR5cGVvZiBlLE09ZT0+bnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlLFY9ZT0+TShlKSYmRihlLnRoZW4pJiZGKGUuY2F0Y2gpLEk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxCPWU9PkkuY2FsbChlKSxMPWU9PlwiW29iamVjdCBPYmplY3RdXCI9PT1CKGUpLGo9ZT0+UChlKSYmXCJOYU5cIiE9PWUmJlwiLVwiIT09ZVswXSYmXCJcIitwYXJzZUludChlLDEwKT09PWUsVT1lKFwiLGtleSxyZWYscmVmX2ZvcixyZWZfa2V5LG9uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCxvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLG9uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWRcIiksRD1lKFwiYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQsbWVtb1wiKSxIPWU9Pntjb25zdCB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIG49PnRbbl18fCh0W25dPWUobikpfSxXPS8tKFxcdykvZyx6PUgoKGU9PmUucmVwbGFjZShXLCgoZSx0KT0+dD90LnRvVXBwZXJDYXNlKCk6XCJcIikpKSksSz0vXFxCKFtBLVpdKS9nLEc9SCgoZT0+ZS5yZXBsYWNlKEssXCItJDFcIikudG9Mb3dlckNhc2UoKSkpLHE9SCgoZT0+ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKSksSj1IKChlPT5lP2BvbiR7cShlKX1gOlwiXCIpKSxZPShlLHQpPT4hT2JqZWN0LmlzKGUsdCksWj0oZSx0KT0+e2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKWVbbl0odCl9LFE9KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOm59KX0sWD1lPT57Y29uc3QgdD1wYXJzZUZsb2F0KGUpO3JldHVybiBpc05hTih0KT9lOnR9O2xldCBlZTtsZXQgdGU7Y2xhc3MgbmV7Y29uc3RydWN0b3IoZT0hMSl7dGhpcy5hY3RpdmU9ITAsdGhpcy5lZmZlY3RzPVtdLHRoaXMuY2xlYW51cHM9W10sIWUmJnRlJiYodGhpcy5wYXJlbnQ9dGUsdGhpcy5pbmRleD0odGUuc2NvcGVzfHwodGUuc2NvcGVzPVtdKSkucHVzaCh0aGlzKS0xKX1ydW4oZSl7aWYodGhpcy5hY3RpdmUpe2NvbnN0IHQ9dGU7dHJ5e3JldHVybiB0ZT10aGlzLGUoKX1maW5hbGx5e3RlPXR9fX1vbigpe3RlPXRoaXN9b2ZmKCl7dGU9dGhpcy5wYXJlbnR9c3RvcChlKXtpZih0aGlzLmFjdGl2ZSl7bGV0IHQsbjtmb3IodD0wLG49dGhpcy5lZmZlY3RzLmxlbmd0aDt0PG47dCsrKXRoaXMuZWZmZWN0c1t0XS5zdG9wKCk7Zm9yKHQ9MCxuPXRoaXMuY2xlYW51cHMubGVuZ3RoO3Q8bjt0KyspdGhpcy5jbGVhbnVwc1t0XSgpO2lmKHRoaXMuc2NvcGVzKWZvcih0PTAsbj10aGlzLnNjb3Blcy5sZW5ndGg7dDxuO3QrKyl0aGlzLnNjb3Blc1t0XS5zdG9wKCEwKTtpZih0aGlzLnBhcmVudCYmIWUpe2NvbnN0IGU9dGhpcy5wYXJlbnQuc2NvcGVzLnBvcCgpO2UmJmUhPT10aGlzJiYodGhpcy5wYXJlbnQuc2NvcGVzW3RoaXMuaW5kZXhdPWUsZS5pbmRleD10aGlzLmluZGV4KX10aGlzLmFjdGl2ZT0hMX19fWZ1bmN0aW9uIG9lKGUpe3JldHVybiBuZXcgbmUoZSl9ZnVuY3Rpb24gcmUoZSx0PXRlKXt0JiZ0LmFjdGl2ZSYmdC5lZmZlY3RzLnB1c2goZSl9ZnVuY3Rpb24gc2UoKXtyZXR1cm4gdGV9ZnVuY3Rpb24gaWUoZSl7dGUmJnRlLmNsZWFudXBzLnB1c2goZSl9Y29uc3QgbGU9ZT0+e2NvbnN0IHQ9bmV3IFNldChlKTtyZXR1cm4gdC53PTAsdC5uPTAsdH0sY2U9ZT0+KGUudyZmZSk+MCxhZT1lPT4oZS5uJmZlKT4wLHVlPW5ldyBXZWFrTWFwO2xldCBwZT0wLGZlPTE7bGV0IGRlO2NvbnN0IGhlPVN5bWJvbChcIlwiKSxtZT1TeW1ib2woXCJcIik7Y2xhc3MgZ2V7Y29uc3RydWN0b3IoZSx0PW51bGwsbil7dGhpcy5mbj1lLHRoaXMuc2NoZWR1bGVyPXQsdGhpcy5hY3RpdmU9ITAsdGhpcy5kZXBzPVtdLHRoaXMucGFyZW50PXZvaWQgMCxyZSh0aGlzLG4pfXJ1bigpe2lmKCF0aGlzLmFjdGl2ZSlyZXR1cm4gdGhpcy5mbigpO2xldCBlPWRlLHQ9YmU7Zm9yKDtlOyl7aWYoZT09PXRoaXMpcmV0dXJuO2U9ZS5wYXJlbnR9dHJ5e3JldHVybiB0aGlzLnBhcmVudD1kZSxkZT10aGlzLGJlPSEwLGZlPTE8PCsrcGUscGU8PTMwPygoe2RlcHM6ZX0pPT57aWYoZS5sZW5ndGgpZm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspZVt0XS53fD1mZX0pKHRoaXMpOnZlKHRoaXMpLHRoaXMuZm4oKX1maW5hbGx5e3BlPD0zMCYmKGU9Pntjb25zdHtkZXBzOnR9PWU7aWYodC5sZW5ndGgpe2xldCBuPTA7Zm9yKGxldCBvPTA7bzx0Lmxlbmd0aDtvKyspe2NvbnN0IHI9dFtvXTtjZShyKSYmIWFlKHIpP3IuZGVsZXRlKGUpOnRbbisrXT1yLHIudyY9fmZlLHIubiY9fmZlfXQubGVuZ3RoPW59fSkodGhpcyksZmU9MTw8LS1wZSxkZT10aGlzLnBhcmVudCxiZT10LHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLmRlZmVyU3RvcCYmdGhpcy5zdG9wKCl9fXN0b3AoKXtkZT09PXRoaXM/dGhpcy5kZWZlclN0b3A9ITA6dGhpcy5hY3RpdmUmJih2ZSh0aGlzKSx0aGlzLm9uU3RvcCYmdGhpcy5vblN0b3AoKSx0aGlzLmFjdGl2ZT0hMSl9fWZ1bmN0aW9uIHZlKGUpe2NvbnN0e2RlcHM6dH09ZTtpZih0Lmxlbmd0aCl7Zm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspdFtuXS5kZWxldGUoZSk7dC5sZW5ndGg9MH19ZnVuY3Rpb24geWUoZSx0KXtlLmVmZmVjdCYmKGU9ZS5lZmZlY3QuZm4pO2NvbnN0IG49bmV3IGdlKGUpO3QmJih3KG4sdCksdC5zY29wZSYmcmUobix0LnNjb3BlKSksdCYmdC5sYXp5fHxuLnJ1bigpO2NvbnN0IG89bi5ydW4uYmluZChuKTtyZXR1cm4gby5lZmZlY3Q9bixvfWZ1bmN0aW9uIF9lKGUpe2UuZWZmZWN0LnN0b3AoKX1sZXQgYmU9ITA7Y29uc3QgU2U9W107ZnVuY3Rpb24geGUoKXtTZS5wdXNoKGJlKSxiZT0hMX1mdW5jdGlvbiBDZSgpe2NvbnN0IGU9U2UucG9wKCk7YmU9dm9pZCAwPT09ZXx8ZX1mdW5jdGlvbiB3ZShlLHQsbil7aWYoYmUmJmRlKXtsZXQgdD11ZS5nZXQoZSk7dHx8dWUuc2V0KGUsdD1uZXcgTWFwKTtsZXQgbz10LmdldChuKTtvfHx0LnNldChuLG89bGUoKSksa2Uobyl9fWZ1bmN0aW9uIGtlKGUsdCl7bGV0IG49ITE7cGU8PTMwP2FlKGUpfHwoZS5ufD1mZSxuPSFjZShlKSk6bj0hZS5oYXMoZGUpLG4mJihlLmFkZChkZSksZGUuZGVwcy5wdXNoKGUpKX1mdW5jdGlvbiBUZShlLHQsbixvLHIscyl7Y29uc3QgaT11ZS5nZXQoZSk7aWYoIWkpcmV0dXJuO2xldCBsPVtdO2lmKFwiY2xlYXJcIj09PXQpbD1bLi4uaS52YWx1ZXMoKV07ZWxzZSBpZihcImxlbmd0aFwiPT09biYmRShlKSlpLmZvckVhY2goKChlLHQpPT57KFwibGVuZ3RoXCI9PT10fHx0Pj1vKSYmbC5wdXNoKGUpfSkpO2Vsc2Ugc3dpdGNoKHZvaWQgMCE9PW4mJmwucHVzaChpLmdldChuKSksdCl7Y2FzZVwiYWRkXCI6RShlKT9qKG4pJiZsLnB1c2goaS5nZXQoXCJsZW5ndGhcIikpOihsLnB1c2goaS5nZXQoaGUpKSwkKGUpJiZsLnB1c2goaS5nZXQobWUpKSk7YnJlYWs7Y2FzZVwiZGVsZXRlXCI6RShlKXx8KGwucHVzaChpLmdldChoZSkpLCQoZSkmJmwucHVzaChpLmdldChtZSkpKTticmVhaztjYXNlXCJzZXRcIjokKGUpJiZsLnB1c2goaS5nZXQoaGUpKX1pZigxPT09bC5sZW5ndGgpbFswXSYmTmUobFswXSk7ZWxzZXtjb25zdCBlPVtdO2Zvcihjb25zdCB0IG9mIGwpdCYmZS5wdXNoKC4uLnQpO05lKGxlKGUpKX19ZnVuY3Rpb24gTmUoZSx0KXtjb25zdCBuPUUoZSk/ZTpbLi4uZV07Zm9yKGNvbnN0IG8gb2YgbilvLmNvbXB1dGVkJiZFZShvKTtmb3IoY29uc3QgbyBvZiBuKW8uY29tcHV0ZWR8fEVlKG8pfWZ1bmN0aW9uIEVlKGUsdCl7KGUhPT1kZXx8ZS5hbGxvd1JlY3Vyc2UpJiYoZS5zY2hlZHVsZXI/ZS5zY2hlZHVsZXIoKTplLnJ1bigpKX1jb25zdCAkZT1lKFwiX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlXCIpLE9lPW5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKS5maWx0ZXIoKGU9PlwiYXJndW1lbnRzXCIhPT1lJiZcImNhbGxlclwiIT09ZSkpLm1hcCgoZT0+U3ltYm9sW2VdKSkuZmlsdGVyKEEpKSxSZT1JZSgpLEZlPUllKCExLCEwKSxQZT1JZSghMCksQWU9SWUoITAsITApLE1lPVZlKCk7ZnVuY3Rpb24gVmUoKXtjb25zdCBlPXt9O3JldHVybltcImluY2x1ZGVzXCIsXCJpbmRleE9mXCIsXCJsYXN0SW5kZXhPZlwiXS5mb3JFYWNoKCh0PT57ZVt0XT1mdW5jdGlvbiguLi5lKXtjb25zdCBuPWt0KHRoaXMpO2ZvcihsZXQgdD0wLHI9dGhpcy5sZW5ndGg7dDxyO3QrKyl3ZShuLDAsdCtcIlwiKTtjb25zdCBvPW5bdF0oLi4uZSk7cmV0dXJuLTE9PT1vfHwhMT09PW8/blt0XSguLi5lLm1hcChrdCkpOm99fSkpLFtcInB1c2hcIixcInBvcFwiLFwic2hpZnRcIixcInVuc2hpZnRcIixcInNwbGljZVwiXS5mb3JFYWNoKCh0PT57ZVt0XT1mdW5jdGlvbiguLi5lKXt4ZSgpO2NvbnN0IG49a3QodGhpcylbdF0uYXBwbHkodGhpcyxlKTtyZXR1cm4gQ2UoKSxufX0pKSxlfWZ1bmN0aW9uIEllKGU9ITEsdD0hMSl7cmV0dXJuIGZ1bmN0aW9uKG4sbyxyKXtpZihcIl9fdl9pc1JlYWN0aXZlXCI9PT1vKXJldHVybiFlO2lmKFwiX192X2lzUmVhZG9ubHlcIj09PW8pcmV0dXJuIGU7aWYoXCJfX3ZfaXNTaGFsbG93XCI9PT1vKXJldHVybiB0O2lmKFwiX192X3Jhd1wiPT09byYmcj09PShlP3Q/aHQ6ZHQ6dD9mdDpwdCkuZ2V0KG4pKXJldHVybiBuO2NvbnN0IHM9RShuKTtpZighZSYmcyYmTihNZSxvKSlyZXR1cm4gUmVmbGVjdC5nZXQoTWUsbyxyKTtjb25zdCBpPVJlZmxlY3QuZ2V0KG4sbyxyKTtyZXR1cm4oQShvKT9PZS5oYXMobyk6JGUobykpP2k6KGV8fHdlKG4sMCxvKSx0P2k6UnQoaSk/cyYmaihvKT9pOmkudmFsdWU6TShpKT9lP3l0KGkpOmd0KGkpOmkpfX1mdW5jdGlvbiBCZShlPSExKXtyZXR1cm4gZnVuY3Rpb24odCxuLG8scil7bGV0IHM9dFtuXTtpZih4dChzKSYmUnQocykmJiFSdChvKSlyZXR1cm4hMTtpZighZSYmIXh0KG8pJiYoQ3Qobyl8fChvPWt0KG8pLHM9a3QocykpLCFFKHQpJiZSdChzKSYmIVJ0KG8pKSlyZXR1cm4gcy52YWx1ZT1vLCEwO2NvbnN0IGk9RSh0KSYmaihuKT9OdW1iZXIobik8dC5sZW5ndGg6Tih0LG4pLGw9UmVmbGVjdC5zZXQodCxuLG8scik7cmV0dXJuIHQ9PT1rdChyKSYmKGk/WShvLHMpJiZUZSh0LFwic2V0XCIsbixvKTpUZSh0LFwiYWRkXCIsbixvKSksbH19Y29uc3QgTGU9e2dldDpSZSxzZXQ6QmUoKSxkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbihlLHQpe2NvbnN0IG49TihlLHQpLG89UmVmbGVjdC5kZWxldGVQcm9wZXJ0eShlLHQpO3JldHVybiBvJiZuJiZUZShlLFwiZGVsZXRlXCIsdCx2b2lkIDApLG99LGhhczpmdW5jdGlvbihlLHQpe2NvbnN0IG49UmVmbGVjdC5oYXMoZSx0KTtyZXR1cm4gQSh0KSYmT2UuaGFzKHQpfHx3ZShlLDAsdCksbn0sb3duS2V5czpmdW5jdGlvbihlKXtyZXR1cm4gd2UoZSwwLEUoZSk/XCJsZW5ndGhcIjpoZSksUmVmbGVjdC5vd25LZXlzKGUpfX0samU9e2dldDpQZSxzZXQ6KGUsdCk9PiEwLGRlbGV0ZVByb3BlcnR5OihlLHQpPT4hMH0sVWU9dyh7fSxMZSx7Z2V0OkZlLHNldDpCZSghMCl9KSxEZT13KHt9LGplLHtnZXQ6QWV9KSxIZT1lPT5lLFdlPWU9PlJlZmxlY3QuZ2V0UHJvdG90eXBlT2YoZSk7ZnVuY3Rpb24gemUoZSx0LG49ITEsbz0hMSl7Y29uc3Qgcj1rdChlPWUuX192X3Jhdykscz1rdCh0KTtufHwodCE9PXMmJndlKHIsMCx0KSx3ZShyLDAscykpO2NvbnN0e2hhczppfT1XZShyKSxsPW8/SGU6bj9FdDpOdDtyZXR1cm4gaS5jYWxsKHIsdCk/bChlLmdldCh0KSk6aS5jYWxsKHIscyk/bChlLmdldChzKSk6dm9pZChlIT09ciYmZS5nZXQodCkpfWZ1bmN0aW9uIEtlKGUsdD0hMSl7Y29uc3Qgbj10aGlzLl9fdl9yYXcsbz1rdChuKSxyPWt0KGUpO3JldHVybiB0fHwoZSE9PXImJndlKG8sMCxlKSx3ZShvLDAscikpLGU9PT1yP24uaGFzKGUpOm4uaGFzKGUpfHxuLmhhcyhyKX1mdW5jdGlvbiBHZShlLHQ9ITEpe3JldHVybiBlPWUuX192X3JhdywhdCYmd2Uoa3QoZSksMCxoZSksUmVmbGVjdC5nZXQoZSxcInNpemVcIixlKX1mdW5jdGlvbiBxZShlKXtlPWt0KGUpO2NvbnN0IHQ9a3QodGhpcyk7cmV0dXJuIFdlKHQpLmhhcy5jYWxsKHQsZSl8fCh0LmFkZChlKSxUZSh0LFwiYWRkXCIsZSxlKSksdGhpc31mdW5jdGlvbiBKZShlLHQpe3Q9a3QodCk7Y29uc3Qgbj1rdCh0aGlzKSx7aGFzOm8sZ2V0OnJ9PVdlKG4pO2xldCBzPW8uY2FsbChuLGUpO3N8fChlPWt0KGUpLHM9by5jYWxsKG4sZSkpO2NvbnN0IGk9ci5jYWxsKG4sZSk7cmV0dXJuIG4uc2V0KGUsdCkscz9ZKHQsaSkmJlRlKG4sXCJzZXRcIixlLHQpOlRlKG4sXCJhZGRcIixlLHQpLHRoaXN9ZnVuY3Rpb24gWWUoZSl7Y29uc3QgdD1rdCh0aGlzKSx7aGFzOm4sZ2V0Om99PVdlKHQpO2xldCByPW4uY2FsbCh0LGUpO3J8fChlPWt0KGUpLHI9bi5jYWxsKHQsZSkpLG8mJm8uY2FsbCh0LGUpO2NvbnN0IHM9dC5kZWxldGUoZSk7cmV0dXJuIHImJlRlKHQsXCJkZWxldGVcIixlLHZvaWQgMCksc31mdW5jdGlvbiBaZSgpe2NvbnN0IGU9a3QodGhpcyksdD0wIT09ZS5zaXplLG49ZS5jbGVhcigpO3JldHVybiB0JiZUZShlLFwiY2xlYXJcIix2b2lkIDAsdm9pZCAwKSxufWZ1bmN0aW9uIFFlKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4sbyl7Y29uc3Qgcj10aGlzLHM9ci5fX3ZfcmF3LGk9a3QocyksbD10P0hlOmU/RXQ6TnQ7cmV0dXJuIWUmJndlKGksMCxoZSkscy5mb3JFYWNoKCgoZSx0KT0+bi5jYWxsKG8sbChlKSxsKHQpLHIpKSl9fWZ1bmN0aW9uIFhlKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24oLi4ubyl7Y29uc3Qgcj10aGlzLl9fdl9yYXcscz1rdChyKSxpPSQocyksbD1cImVudHJpZXNcIj09PWV8fGU9PT1TeW1ib2wuaXRlcmF0b3ImJmksYz1cImtleXNcIj09PWUmJmksYT1yW2VdKC4uLm8pLHU9bj9IZTp0P0V0Ok50O3JldHVybiF0JiZ3ZShzLDAsYz9tZTpoZSkse25leHQoKXtjb25zdHt2YWx1ZTplLGRvbmU6dH09YS5uZXh0KCk7cmV0dXJuIHQ/e3ZhbHVlOmUsZG9uZTp0fTp7dmFsdWU6bD9bdShlWzBdKSx1KGVbMV0pXTp1KGUpLGRvbmU6dH19LFtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIHRoaXN9fX19ZnVuY3Rpb24gZXQoZSl7cmV0dXJuIGZ1bmN0aW9uKC4uLnQpe3JldHVyblwiZGVsZXRlXCIhPT1lJiZ0aGlzfX1mdW5jdGlvbiB0dCgpe2NvbnN0IGU9e2dldChlKXtyZXR1cm4gemUodGhpcyxlKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcyl9LGhhczpLZSxhZGQ6cWUsc2V0OkplLGRlbGV0ZTpZZSxjbGVhcjpaZSxmb3JFYWNoOlFlKCExLCExKX0sdD17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITEsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzKX0saGFzOktlLGFkZDpxZSxzZXQ6SmUsZGVsZXRlOlllLGNsZWFyOlplLGZvckVhY2g6UWUoITEsITApfSxuPXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSwhMCl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMsITApfSxoYXMoZSl7cmV0dXJuIEtlLmNhbGwodGhpcyxlLCEwKX0sYWRkOmV0KFwiYWRkXCIpLHNldDpldChcInNldFwiKSxkZWxldGU6ZXQoXCJkZWxldGVcIiksY2xlYXI6ZXQoXCJjbGVhclwiKSxmb3JFYWNoOlFlKCEwLCExKX0sbz17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITAsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzLCEwKX0saGFzKGUpe3JldHVybiBLZS5jYWxsKHRoaXMsZSwhMCl9LGFkZDpldChcImFkZFwiKSxzZXQ6ZXQoXCJzZXRcIiksZGVsZXRlOmV0KFwiZGVsZXRlXCIpLGNsZWFyOmV0KFwiY2xlYXJcIiksZm9yRWFjaDpRZSghMCwhMCl9O3JldHVybltcImtleXNcIixcInZhbHVlc1wiLFwiZW50cmllc1wiLFN5bWJvbC5pdGVyYXRvcl0uZm9yRWFjaCgocj0+e2Vbcl09WGUociwhMSwhMSksbltyXT1YZShyLCEwLCExKSx0W3JdPVhlKHIsITEsITApLG9bcl09WGUociwhMCwhMCl9KSksW2Usbix0LG9dfWNvbnN0W250LG90LHJ0LHN0XT10dCgpO2Z1bmN0aW9uIGl0KGUsdCl7Y29uc3Qgbj10P2U/c3Q6cnQ6ZT9vdDpudDtyZXR1cm4odCxvLHIpPT5cIl9fdl9pc1JlYWN0aXZlXCI9PT1vPyFlOlwiX192X2lzUmVhZG9ubHlcIj09PW8/ZTpcIl9fdl9yYXdcIj09PW8/dDpSZWZsZWN0LmdldChOKG4sbykmJm8gaW4gdD9uOnQsbyxyKX1jb25zdCBsdD17Z2V0Oml0KCExLCExKX0sY3Q9e2dldDppdCghMSwhMCl9LGF0PXtnZXQ6aXQoITAsITEpfSx1dD17Z2V0Oml0KCEwLCEwKX0scHQ9bmV3IFdlYWtNYXAsZnQ9bmV3IFdlYWtNYXAsZHQ9bmV3IFdlYWtNYXAsaHQ9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gbXQoZSl7cmV0dXJuIGUuX192X3NraXB8fCFPYmplY3QuaXNFeHRlbnNpYmxlKGUpPzA6ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcIk9iamVjdFwiOmNhc2VcIkFycmF5XCI6cmV0dXJuIDE7Y2FzZVwiTWFwXCI6Y2FzZVwiU2V0XCI6Y2FzZVwiV2Vha01hcFwiOmNhc2VcIldlYWtTZXRcIjpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX0oKGU9PkIoZSkuc2xpY2UoOCwtMSkpKGUpKX1mdW5jdGlvbiBndChlKXtyZXR1cm4geHQoZSk/ZTpidChlLCExLExlLGx0LHB0KX1mdW5jdGlvbiB2dChlKXtyZXR1cm4gYnQoZSwhMSxVZSxjdCxmdCl9ZnVuY3Rpb24geXQoZSl7cmV0dXJuIGJ0KGUsITAsamUsYXQsZHQpfWZ1bmN0aW9uIF90KGUpe3JldHVybiBidChlLCEwLERlLHV0LGh0KX1mdW5jdGlvbiBidChlLHQsbixvLHIpe2lmKCFNKGUpKXJldHVybiBlO2lmKGUuX192X3JhdyYmKCF0fHwhZS5fX3ZfaXNSZWFjdGl2ZSkpcmV0dXJuIGU7Y29uc3Qgcz1yLmdldChlKTtpZihzKXJldHVybiBzO2NvbnN0IGk9bXQoZSk7aWYoMD09PWkpcmV0dXJuIGU7Y29uc3QgbD1uZXcgUHJveHkoZSwyPT09aT9vOm4pO3JldHVybiByLnNldChlLGwpLGx9ZnVuY3Rpb24gU3QoZSl7cmV0dXJuIHh0KGUpP1N0KGUuX192X3Jhdyk6ISghZXx8IWUuX192X2lzUmVhY3RpdmUpfWZ1bmN0aW9uIHh0KGUpe3JldHVybiEoIWV8fCFlLl9fdl9pc1JlYWRvbmx5KX1mdW5jdGlvbiBDdChlKXtyZXR1cm4hKCFlfHwhZS5fX3ZfaXNTaGFsbG93KX1mdW5jdGlvbiB3dChlKXtyZXR1cm4gU3QoZSl8fHh0KGUpfWZ1bmN0aW9uIGt0KGUpe2NvbnN0IHQ9ZSYmZS5fX3ZfcmF3O3JldHVybiB0P2t0KHQpOmV9ZnVuY3Rpb24gVHQoZSl7cmV0dXJuIFEoZSxcIl9fdl9za2lwXCIsITApLGV9Y29uc3QgTnQ9ZT0+TShlKT9ndChlKTplLEV0PWU9Pk0oZSk/eXQoZSk6ZTtmdW5jdGlvbiAkdChlKXtiZSYmZGUmJmtlKChlPWt0KGUpKS5kZXB8fChlLmRlcD1sZSgpKSl9ZnVuY3Rpb24gT3QoZSx0KXsoZT1rdChlKSkuZGVwJiZOZShlLmRlcCl9ZnVuY3Rpb24gUnQoZSl7cmV0dXJuISghZXx8ITAhPT1lLl9fdl9pc1JlZil9ZnVuY3Rpb24gRnQoZSl7cmV0dXJuIEF0KGUsITEpfWZ1bmN0aW9uIFB0KGUpe3JldHVybiBBdChlLCEwKX1mdW5jdGlvbiBBdChlLHQpe3JldHVybiBSdChlKT9lOm5ldyBNdChlLHQpfWNsYXNzIE10e2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5fX3ZfaXNTaGFsbG93PXQsdGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwLHRoaXMuX3Jhd1ZhbHVlPXQ/ZTprdChlKSx0aGlzLl92YWx1ZT10P2U6TnQoZSl9Z2V0IHZhbHVlKCl7cmV0dXJuICR0KHRoaXMpLHRoaXMuX3ZhbHVlfXNldCB2YWx1ZShlKXtlPXRoaXMuX192X2lzU2hhbGxvdz9lOmt0KGUpLFkoZSx0aGlzLl9yYXdWYWx1ZSkmJih0aGlzLl9yYXdWYWx1ZT1lLHRoaXMuX3ZhbHVlPXRoaXMuX192X2lzU2hhbGxvdz9lOk50KGUpLE90KHRoaXMpKX19ZnVuY3Rpb24gVnQoZSl7T3QoZSl9ZnVuY3Rpb24gSXQoZSl7cmV0dXJuIFJ0KGUpP2UudmFsdWU6ZX1jb25zdCBCdD17Z2V0OihlLHQsbik9Pkl0KFJlZmxlY3QuZ2V0KGUsdCxuKSksc2V0OihlLHQsbixvKT0+e2NvbnN0IHI9ZVt0XTtyZXR1cm4gUnQocikmJiFSdChuKT8oci52YWx1ZT1uLCEwKTpSZWZsZWN0LnNldChlLHQsbixvKX19O2Z1bmN0aW9uIEx0KGUpe3JldHVybiBTdChlKT9lOm5ldyBQcm94eShlLEJ0KX1jbGFzcyBqdHtjb25zdHJ1Y3RvcihlKXt0aGlzLmRlcD12b2lkIDAsdGhpcy5fX3ZfaXNSZWY9ITA7Y29uc3R7Z2V0OnQsc2V0Om59PWUoKCgpPT4kdCh0aGlzKSksKCgpPT5PdCh0aGlzKSkpO3RoaXMuX2dldD10LHRoaXMuX3NldD1ufWdldCB2YWx1ZSgpe3JldHVybiB0aGlzLl9nZXQoKX1zZXQgdmFsdWUoZSl7dGhpcy5fc2V0KGUpfX1mdW5jdGlvbiBVdChlKXtyZXR1cm4gbmV3IGp0KGUpfWZ1bmN0aW9uIER0KGUpe2NvbnN0IHQ9RShlKT9uZXcgQXJyYXkoZS5sZW5ndGgpOnt9O2Zvcihjb25zdCBuIGluIGUpdFtuXT1XdChlLG4pO3JldHVybiB0fWNsYXNzIEh0e2NvbnN0cnVjdG9yKGUsdCxuKXt0aGlzLl9vYmplY3Q9ZSx0aGlzLl9rZXk9dCx0aGlzLl9kZWZhdWx0VmFsdWU9bix0aGlzLl9fdl9pc1JlZj0hMH1nZXQgdmFsdWUoKXtjb25zdCBlPXRoaXMuX29iamVjdFt0aGlzLl9rZXldO3JldHVybiB2b2lkIDA9PT1lP3RoaXMuX2RlZmF1bHRWYWx1ZTplfXNldCB2YWx1ZShlKXt0aGlzLl9vYmplY3RbdGhpcy5fa2V5XT1lfX1mdW5jdGlvbiBXdChlLHQsbil7Y29uc3Qgbz1lW3RdO3JldHVybiBSdChvKT9vOm5ldyBIdChlLHQsbil9Y2xhc3MgenR7Y29uc3RydWN0b3IoZSx0LG4sbyl7dGhpcy5fc2V0dGVyPXQsdGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwLHRoaXMuX2RpcnR5PSEwLHRoaXMuZWZmZWN0PW5ldyBnZShlLCgoKT0+e3RoaXMuX2RpcnR5fHwodGhpcy5fZGlydHk9ITAsT3QodGhpcykpfSkpLHRoaXMuZWZmZWN0LmNvbXB1dGVkPXRoaXMsdGhpcy5lZmZlY3QuYWN0aXZlPXRoaXMuX2NhY2hlYWJsZT0hbyx0aGlzLl9fdl9pc1JlYWRvbmx5PW59Z2V0IHZhbHVlKCl7Y29uc3QgZT1rdCh0aGlzKTtyZXR1cm4gJHQoZSksIWUuX2RpcnR5JiZlLl9jYWNoZWFibGV8fChlLl9kaXJ0eT0hMSxlLl92YWx1ZT1lLmVmZmVjdC5ydW4oKSksZS5fdmFsdWV9c2V0IHZhbHVlKGUpe3RoaXMuX3NldHRlcihlKX19Y29uc3QgS3Q9W107ZnVuY3Rpb24gR3QoZSwuLi50KXt4ZSgpO2NvbnN0IG49S3QubGVuZ3RoP0t0W0t0Lmxlbmd0aC0xXS5jb21wb25lbnQ6bnVsbCxvPW4mJm4uYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXIscj1mdW5jdGlvbigpe2xldCBlPUt0W0t0Lmxlbmd0aC0xXTtpZighZSlyZXR1cm5bXTtjb25zdCB0PVtdO2Zvcig7ZTspe2NvbnN0IG49dFswXTtuJiZuLnZub2RlPT09ZT9uLnJlY3Vyc2VDb3VudCsrOnQucHVzaCh7dm5vZGU6ZSxyZWN1cnNlQ291bnQ6MH0pO2NvbnN0IG89ZS5jb21wb25lbnQmJmUuY29tcG9uZW50LnBhcmVudDtlPW8mJm8udm5vZGV9cmV0dXJuIHR9KCk7aWYobylZdChvLG4sMTEsW2UrdC5qb2luKFwiXCIpLG4mJm4ucHJveHksci5tYXAoKCh7dm5vZGU6ZX0pPT5gYXQgPCR7THMobixlLnR5cGUpfT5gKSkuam9pbihcIlxcblwiKSxyXSk7ZWxzZXtjb25zdCBuPVtgW1Z1ZSB3YXJuXTogJHtlfWAsLi4udF07ci5sZW5ndGgmJm4ucHVzaChcIlxcblwiLC4uLmZ1bmN0aW9uKGUpe2NvbnN0IHQ9W107cmV0dXJuIGUuZm9yRWFjaCgoKGUsbik9Pnt0LnB1c2goLi4uMD09PW4/W106W1wiXFxuXCJdLC4uLmZ1bmN0aW9uKHt2bm9kZTplLHJlY3Vyc2VDb3VudDp0fSl7Y29uc3Qgbj10PjA/YC4uLiAoJHt0fSByZWN1cnNpdmUgY2FsbHMpYDpcIlwiLG89YCBhdCA8JHtMcyhlLmNvbXBvbmVudCxlLnR5cGUsISFlLmNvbXBvbmVudCYmbnVsbD09ZS5jb21wb25lbnQucGFyZW50KX1gLHI9XCI+XCIrbjtyZXR1cm4gZS5wcm9wcz9bbywuLi5xdChlLnByb3BzKSxyXTpbbytyXX0oZSkpfSkpLHR9KHIpKSxjb25zb2xlLndhcm4oLi4ubil9Q2UoKX1mdW5jdGlvbiBxdChlKXtjb25zdCB0PVtdLG49T2JqZWN0LmtleXMoZSk7cmV0dXJuIG4uc2xpY2UoMCwzKS5mb3JFYWNoKChuPT57dC5wdXNoKC4uLkp0KG4sZVtuXSkpfSkpLG4ubGVuZ3RoPjMmJnQucHVzaChcIiAuLi5cIiksdH1mdW5jdGlvbiBKdChlLHQsbil7cmV0dXJuIFAodCk/KHQ9SlNPTi5zdHJpbmdpZnkodCksbj90OltgJHtlfT0ke3R9YF0pOlwibnVtYmVyXCI9PXR5cGVvZiB0fHxcImJvb2xlYW5cIj09dHlwZW9mIHR8fG51bGw9PXQ/bj90OltgJHtlfT0ke3R9YF06UnQodCk/KHQ9SnQoZSxrdCh0LnZhbHVlKSwhMCksbj90OltgJHtlfT1SZWY8YCx0LFwiPlwiXSk6Rih0KT9bYCR7ZX09Zm4ke3QubmFtZT9gPCR7dC5uYW1lfT5gOlwiXCJ9YF06KHQ9a3QodCksbj90OltgJHtlfT1gLHRdKX1mdW5jdGlvbiBZdChlLHQsbixvKXtsZXQgcjt0cnl7cj1vP2UoLi4ubyk6ZSgpfWNhdGNoKHMpe1F0KHMsdCxuKX1yZXR1cm4gcn1mdW5jdGlvbiBadChlLHQsbixvKXtpZihGKGUpKXtjb25zdCByPVl0KGUsdCxuLG8pO3JldHVybiByJiZWKHIpJiZyLmNhdGNoKChlPT57UXQoZSx0LG4pfSkpLHJ9Y29uc3Qgcj1bXTtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKylyLnB1c2goWnQoZVtzXSx0LG4sbykpO3JldHVybiByfWZ1bmN0aW9uIFF0KGUsdCxuLG89ITApe2lmKHQpe2xldCBvPXQucGFyZW50O2NvbnN0IHI9dC5wcm94eSxzPW47Zm9yKDtvOyl7Y29uc3QgdD1vLmVjO2lmKHQpZm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoITE9PT10W25dKGUscixzKSlyZXR1cm47bz1vLnBhcmVudH1jb25zdCBpPXQuYXBwQ29udGV4dC5jb25maWcuZXJyb3JIYW5kbGVyO2lmKGkpcmV0dXJuIHZvaWQgWXQoaSxudWxsLDEwLFtlLHIsc10pfSFmdW5jdGlvbihlLHQsbixvPSEwKXtjb25zb2xlLmVycm9yKGUpfShlLDAsMCxvKX1sZXQgWHQ9ITEsZW49ITE7Y29uc3QgdG49W107bGV0IG5uPTA7Y29uc3Qgb249W107bGV0IHJuPW51bGwsc249MDtjb25zdCBsbj1bXTtsZXQgY249bnVsbCxhbj0wO2NvbnN0IHVuPVByb21pc2UucmVzb2x2ZSgpO2xldCBwbj1udWxsLGZuPW51bGw7ZnVuY3Rpb24gZG4oZSl7Y29uc3QgdD1wbnx8dW47cmV0dXJuIGU/dC50aGVuKHRoaXM/ZS5iaW5kKHRoaXMpOmUpOnR9ZnVuY3Rpb24gaG4oZSl7dG4ubGVuZ3RoJiZ0bi5pbmNsdWRlcyhlLFh0JiZlLmFsbG93UmVjdXJzZT9ubisxOm5uKXx8ZT09PWZufHwobnVsbD09ZS5pZD90bi5wdXNoKGUpOnRuLnNwbGljZShmdW5jdGlvbihlKXtsZXQgdD1ubisxLG49dG4ubGVuZ3RoO2Zvcig7dDxuOyl7Y29uc3Qgbz10K24+Pj4xO2JuKHRuW29dKTxlP3Q9bysxOm49b31yZXR1cm4gdH0oZS5pZCksMCxlKSxtbigpKX1mdW5jdGlvbiBtbigpe1h0fHxlbnx8KGVuPSEwLHBuPXVuLnRoZW4oU24pKX1mdW5jdGlvbiBnbihlLHQsbixvKXtFKGUpP24ucHVzaCguLi5lKTp0JiZ0LmluY2x1ZGVzKGUsZS5hbGxvd1JlY3Vyc2U/bysxOm8pfHxuLnB1c2goZSksbW4oKX1mdW5jdGlvbiB2bihlKXtnbihlLGNuLGxuLGFuKX1mdW5jdGlvbiB5bihlLHQ9bnVsbCl7aWYob24ubGVuZ3RoKXtmb3IoZm49dCxybj1bLi4ubmV3IFNldChvbildLG9uLmxlbmd0aD0wLHNuPTA7c248cm4ubGVuZ3RoO3NuKyspcm5bc25dKCk7cm49bnVsbCxzbj0wLGZuPW51bGwseW4oZSx0KX19ZnVuY3Rpb24gX24oZSl7aWYoeW4oKSxsbi5sZW5ndGgpe2NvbnN0IGU9Wy4uLm5ldyBTZXQobG4pXTtpZihsbi5sZW5ndGg9MCxjbilyZXR1cm4gdm9pZCBjbi5wdXNoKC4uLmUpO2Zvcihjbj1lLGNuLnNvcnQoKChlLHQpPT5ibihlKS1ibih0KSkpLGFuPTA7YW48Y24ubGVuZ3RoO2FuKyspY25bYW5dKCk7Y249bnVsbCxhbj0wfX1jb25zdCBibj1lPT5udWxsPT1lLmlkPzEvMDplLmlkO2Z1bmN0aW9uIFNuKGUpe2VuPSExLFh0PSEwLHluKGUpLHRuLnNvcnQoKChlLHQpPT5ibihlKS1ibih0KSkpO3RyeXtmb3Iobm49MDtubjx0bi5sZW5ndGg7bm4rKyl7Y29uc3QgZT10bltubl07ZSYmITEhPT1lLmFjdGl2ZSYmWXQoZSxudWxsLDE0KX19ZmluYWxseXtubj0wLHRuLmxlbmd0aD0wLF9uKCksWHQ9ITEscG49bnVsbCwodG4ubGVuZ3RofHxvbi5sZW5ndGh8fGxuLmxlbmd0aCkmJlNuKGUpfX1sZXQgeG4sQ249W107ZnVuY3Rpb24gd24oZSx0KXt2YXIgbixvO2lmKHhuPWUseG4peG4uZW5hYmxlZD0hMCxDbi5mb3JFYWNoKCgoe2V2ZW50OmUsYXJnczp0fSk9PnhuLmVtaXQoZSwuLi50KSkpLENuPVtdO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LkhUTUxFbGVtZW50JiYhKG51bGw9PT0obz1udWxsPT09KG49d2luZG93Lm5hdmlnYXRvcil8fHZvaWQgMD09PW4/dm9pZCAwOm4udXNlckFnZW50KXx8dm9pZCAwPT09bz92b2lkIDA6by5pbmNsdWRlcyhcImpzZG9tXCIpKSl7KHQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXz10Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX198fFtdKS5wdXNoKChlPT57d24oZSx0KX0pKSxzZXRUaW1lb3V0KCgoKT0+e3hufHwodC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fPW51bGwsQ249W10pfSksM2UzKX1lbHNlIENuPVtdfWZ1bmN0aW9uIGtuKGUsdCwuLi5uKXtpZihlLmlzVW5tb3VudGVkKXJldHVybjtjb25zdCBvPWUudm5vZGUucHJvcHN8fHY7bGV0IHI9bjtjb25zdCBzPXQuc3RhcnRzV2l0aChcInVwZGF0ZTpcIiksaT1zJiZ0LnNsaWNlKDcpO2lmKGkmJmkgaW4gbyl7Y29uc3QgZT1gJHtcIm1vZGVsVmFsdWVcIj09PWk/XCJtb2RlbFwiOml9TW9kaWZpZXJzYCx7bnVtYmVyOnQsdHJpbTpzfT1vW2VdfHx2O3MmJihyPW4ubWFwKChlPT5lLnRyaW0oKSkpKSx0JiYocj1uLm1hcChYKSl9bGV0IGwsYz1vW2w9Sih0KV18fG9bbD1KKHoodCkpXTshYyYmcyYmKGM9b1tsPUooRyh0KSldKSxjJiZadChjLGUsNixyKTtjb25zdCBhPW9bbCtcIk9uY2VcIl07aWYoYSl7aWYoZS5lbWl0dGVkKXtpZihlLmVtaXR0ZWRbbF0pcmV0dXJufWVsc2UgZS5lbWl0dGVkPXt9O2UuZW1pdHRlZFtsXT0hMCxadChhLGUsNixyKX19ZnVuY3Rpb24gVG4oZSx0LG49ITEpe2NvbnN0IG89dC5lbWl0c0NhY2hlLHI9by5nZXQoZSk7aWYodm9pZCAwIT09cilyZXR1cm4gcjtjb25zdCBzPWUuZW1pdHM7bGV0IGk9e30sbD0hMTtpZighRihlKSl7Y29uc3Qgbz1lPT57Y29uc3Qgbj1UbihlLHQsITApO24mJihsPSEwLHcoaSxuKSl9OyFuJiZ0Lm1peGlucy5sZW5ndGgmJnQubWl4aW5zLmZvckVhY2gobyksZS5leHRlbmRzJiZvKGUuZXh0ZW5kcyksZS5taXhpbnMmJmUubWl4aW5zLmZvckVhY2gobyl9cmV0dXJuIHN8fGw/KEUocyk/cy5mb3JFYWNoKChlPT5pW2VdPW51bGwpKTp3KGkscyksby5zZXQoZSxpKSxpKTooby5zZXQoZSxudWxsKSxudWxsKX1mdW5jdGlvbiBObihlLHQpe3JldHVybiEoIWV8fCF4KHQpKSYmKHQ9dC5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sXCJcIiksTihlLHRbMF0udG9Mb3dlckNhc2UoKSt0LnNsaWNlKDEpKXx8TihlLEcodCkpfHxOKGUsdCkpfWxldCBFbj1udWxsLCRuPW51bGw7ZnVuY3Rpb24gT24oZSl7Y29uc3QgdD1FbjtyZXR1cm4gRW49ZSwkbj1lJiZlLnR5cGUuX19zY29wZUlkfHxudWxsLHR9ZnVuY3Rpb24gUm4oZSl7JG49ZX1mdW5jdGlvbiBGbigpeyRuPW51bGx9Y29uc3QgUG49ZT0+QW47ZnVuY3Rpb24gQW4oZSx0PUVuLG4pe2lmKCF0KXJldHVybiBlO2lmKGUuX24pcmV0dXJuIGU7Y29uc3Qgbz0oLi4ubik9PntvLl9kJiZYcigtMSk7Y29uc3Qgcj1Pbih0KSxzPWUoLi4ubik7cmV0dXJuIE9uKHIpLG8uX2QmJlhyKDEpLHN9O3JldHVybiBvLl9uPSEwLG8uX2M9ITAsby5fZD0hMCxvfWZ1bmN0aW9uIE1uKGUpe2NvbnN0e3R5cGU6dCx2bm9kZTpuLHByb3h5Om8sd2l0aFByb3h5OnIscHJvcHM6cyxwcm9wc09wdGlvbnM6W2ldLHNsb3RzOmwsYXR0cnM6YyxlbWl0OmEscmVuZGVyOnUscmVuZGVyQ2FjaGU6cCxkYXRhOmYsc2V0dXBTdGF0ZTpkLGN0eDpoLGluaGVyaXRBdHRyczptfT1lO2xldCBnLHY7Y29uc3QgeT1PbihlKTt0cnl7aWYoNCZuLnNoYXBlRmxhZyl7Y29uc3QgZT1yfHxvO2c9Z3ModS5jYWxsKGUsZSxwLHMsZCxmLGgpKSx2PWN9ZWxzZXtjb25zdCBlPXQ7MCxnPWdzKGUocyxlLmxlbmd0aD4xP3thdHRyczpjLHNsb3RzOmwsZW1pdDphfTpudWxsKSksdj10LnByb3BzP2M6Vm4oYyl9fWNhdGNoKGIpe3FyLmxlbmd0aD0wLFF0KGIsZSwxKSxnPXVzKEtyKX1sZXQgXz1nO2lmKHYmJiExIT09bSl7Y29uc3QgZT1PYmplY3Qua2V5cyh2KSx7c2hhcGVGbGFnOnR9PV87ZS5sZW5ndGgmJjcmdCYmKGkmJmUuc29tZShDKSYmKHY9SW4odixpKSksXz1mcyhfLHYpKX1yZXR1cm4gbi5kaXJzJiYoXz1mcyhfKSxfLmRpcnM9Xy5kaXJzP18uZGlycy5jb25jYXQobi5kaXJzKTpuLmRpcnMpLG4udHJhbnNpdGlvbiYmKF8udHJhbnNpdGlvbj1uLnRyYW5zaXRpb24pLGc9XyxPbih5KSxnfWNvbnN0IFZuPWU9PntsZXQgdDtmb3IoY29uc3QgbiBpbiBlKShcImNsYXNzXCI9PT1ufHxcInN0eWxlXCI9PT1ufHx4KG4pKSYmKCh0fHwodD17fSkpW25dPWVbbl0pO3JldHVybiB0fSxJbj0oZSx0KT0+e2NvbnN0IG49e307Zm9yKGNvbnN0IG8gaW4gZSlDKG8pJiZvLnNsaWNlKDkpaW4gdHx8KG5bb109ZVtvXSk7cmV0dXJuIG59O2Z1bmN0aW9uIEJuKGUsdCxuKXtjb25zdCBvPU9iamVjdC5rZXlzKHQpO2lmKG8ubGVuZ3RoIT09T2JqZWN0LmtleXMoZSkubGVuZ3RoKXJldHVybiEwO2ZvcihsZXQgcj0wO3I8by5sZW5ndGg7cisrKXtjb25zdCBzPW9bcl07aWYodFtzXSE9PWVbc10mJiFObihuLHMpKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIExuKHt2bm9kZTplLHBhcmVudDp0fSxuKXtmb3IoO3QmJnQuc3ViVHJlZT09PWU7KShlPXQudm5vZGUpLmVsPW4sdD10LnBhcmVudH1jb25zdCBqbj1lPT5lLl9faXNTdXNwZW5zZSxVbj17bmFtZTpcIlN1c3BlbnNlXCIsX19pc1N1c3BlbnNlOiEwLHByb2Nlc3MoZSx0LG4sbyxyLHMsaSxsLGMsYSl7bnVsbD09ZT9mdW5jdGlvbihlLHQsbixvLHIscyxpLGwsYyl7Y29uc3R7cDphLG86e2NyZWF0ZUVsZW1lbnQ6dX19PWMscD11KFwiZGl2XCIpLGY9ZS5zdXNwZW5zZT1IbihlLHIsbyx0LHAsbixzLGksbCxjKTthKG51bGwsZi5wZW5kaW5nQnJhbmNoPWUuc3NDb250ZW50LHAsbnVsbCxvLGYscyxpKSxmLmRlcHM+MD8oRG4oZSxcIm9uUGVuZGluZ1wiKSxEbihlLFwib25GYWxsYmFja1wiKSxhKG51bGwsZS5zc0ZhbGxiYWNrLHQsbixvLG51bGwscyxpKSxLbihmLGUuc3NGYWxsYmFjaykpOmYucmVzb2x2ZSgpfSh0LG4sbyxyLHMsaSxsLGMsYSk6ZnVuY3Rpb24oZSx0LG4sbyxyLHMsaSxsLHtwOmMsdW06YSxvOntjcmVhdGVFbGVtZW50OnV9fSl7Y29uc3QgcD10LnN1c3BlbnNlPWUuc3VzcGVuc2U7cC52bm9kZT10LHQuZWw9ZS5lbDtjb25zdCBmPXQuc3NDb250ZW50LGQ9dC5zc0ZhbGxiYWNrLHthY3RpdmVCcmFuY2g6aCxwZW5kaW5nQnJhbmNoOm0saXNJbkZhbGxiYWNrOmcsaXNIeWRyYXRpbmc6dn09cDtpZihtKXAucGVuZGluZ0JyYW5jaD1mLHJzKGYsbSk/KGMobSxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTA/cC5yZXNvbHZlKCk6ZyYmKGMoaCxkLG4sbyxyLG51bGwscyxpLGwpLEtuKHAsZCkpKToocC5wZW5kaW5nSWQrKyx2PyhwLmlzSHlkcmF0aW5nPSExLHAuYWN0aXZlQnJhbmNoPW0pOmEobSxyLHApLHAuZGVwcz0wLHAuZWZmZWN0cy5sZW5ndGg9MCxwLmhpZGRlbkNvbnRhaW5lcj11KFwiZGl2XCIpLGc/KGMobnVsbCxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTA/cC5yZXNvbHZlKCk6KGMoaCxkLG4sbyxyLG51bGwscyxpLGwpLEtuKHAsZCkpKTpoJiZycyhmLGgpPyhjKGgsZixuLG8scixwLHMsaSxsKSxwLnJlc29sdmUoITApKTooYyhudWxsLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MCYmcC5yZXNvbHZlKCkpKTtlbHNlIGlmKGgmJnJzKGYsaCkpYyhoLGYsbixvLHIscCxzLGksbCksS24ocCxmKTtlbHNlIGlmKERuKHQsXCJvblBlbmRpbmdcIikscC5wZW5kaW5nQnJhbmNoPWYscC5wZW5kaW5nSWQrKyxjKG51bGwsZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wKXAucmVzb2x2ZSgpO2Vsc2V7Y29uc3R7dGltZW91dDplLHBlbmRpbmdJZDp0fT1wO2U+MD9zZXRUaW1lb3V0KCgoKT0+e3AucGVuZGluZ0lkPT09dCYmcC5mYWxsYmFjayhkKX0pLGUpOjA9PT1lJiZwLmZhbGxiYWNrKGQpfX0oZSx0LG4sbyxyLGksbCxjLGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGUsdCxuLG8scixzLGksbCxjKXtjb25zdCBhPXQuc3VzcGVuc2U9SG4odCxvLG4sZS5wYXJlbnROb2RlLGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbnVsbCxyLHMsaSxsLCEwKSx1PWMoZSxhLnBlbmRpbmdCcmFuY2g9dC5zc0NvbnRlbnQsbixhLHMsaSk7MD09PWEuZGVwcyYmYS5yZXNvbHZlKCk7cmV0dXJuIHV9LGNyZWF0ZTpIbixub3JtYWxpemU6ZnVuY3Rpb24oZSl7Y29uc3R7c2hhcGVGbGFnOnQsY2hpbGRyZW46bn09ZSxvPTMyJnQ7ZS5zc0NvbnRlbnQ9V24obz9uLmRlZmF1bHQ6biksZS5zc0ZhbGxiYWNrPW8/V24obi5mYWxsYmFjayk6dXMoS3IpfX07ZnVuY3Rpb24gRG4oZSx0KXtjb25zdCBuPWUucHJvcHMmJmUucHJvcHNbdF07RihuKSYmbigpfWZ1bmN0aW9uIEhuKGUsdCxuLG8scixzLGksbCxjLGEsdT0hMSl7Y29uc3R7cDpwLG06Zix1bTpkLG46aCxvOntwYXJlbnROb2RlOm0scmVtb3ZlOmd9fT1hLHY9WChlLnByb3BzJiZlLnByb3BzLnRpbWVvdXQpLHk9e3Zub2RlOmUscGFyZW50OnQscGFyZW50Q29tcG9uZW50Om4saXNTVkc6aSxjb250YWluZXI6byxoaWRkZW5Db250YWluZXI6cixhbmNob3I6cyxkZXBzOjAscGVuZGluZ0lkOjAsdGltZW91dDpcIm51bWJlclwiPT10eXBlb2Ygdj92Oi0xLGFjdGl2ZUJyYW5jaDpudWxsLHBlbmRpbmdCcmFuY2g6bnVsbCxpc0luRmFsbGJhY2s6ITAsaXNIeWRyYXRpbmc6dSxpc1VubW91bnRlZDohMSxlZmZlY3RzOltdLHJlc29sdmUoZT0hMSl7Y29uc3R7dm5vZGU6dCxhY3RpdmVCcmFuY2g6bixwZW5kaW5nQnJhbmNoOm8scGVuZGluZ0lkOnIsZWZmZWN0czpzLHBhcmVudENvbXBvbmVudDppLGNvbnRhaW5lcjpsfT15O2lmKHkuaXNIeWRyYXRpbmcpeS5pc0h5ZHJhdGluZz0hMTtlbHNlIGlmKCFlKXtjb25zdCBlPW4mJm8udHJhbnNpdGlvbiYmXCJvdXQtaW5cIj09PW8udHJhbnNpdGlvbi5tb2RlO2UmJihuLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZT0oKT0+e3I9PT15LnBlbmRpbmdJZCYmZihvLGwsdCwwKX0pO2xldHthbmNob3I6dH09eTtuJiYodD1oKG4pLGQobixpLHksITApKSxlfHxmKG8sbCx0LDApfUtuKHksbykseS5wZW5kaW5nQnJhbmNoPW51bGwseS5pc0luRmFsbGJhY2s9ITE7bGV0IGM9eS5wYXJlbnQsYT0hMTtmb3IoO2M7KXtpZihjLnBlbmRpbmdCcmFuY2gpe2MuZWZmZWN0cy5wdXNoKC4uLnMpLGE9ITA7YnJlYWt9Yz1jLnBhcmVudH1hfHx2bihzKSx5LmVmZmVjdHM9W10sRG4odCxcIm9uUmVzb2x2ZVwiKX0sZmFsbGJhY2soZSl7aWYoIXkucGVuZGluZ0JyYW5jaClyZXR1cm47Y29uc3R7dm5vZGU6dCxhY3RpdmVCcmFuY2g6bixwYXJlbnRDb21wb25lbnQ6byxjb250YWluZXI6cixpc1NWRzpzfT15O0RuKHQsXCJvbkZhbGxiYWNrXCIpO2NvbnN0IGk9aChuKSxhPSgpPT57eS5pc0luRmFsbGJhY2smJihwKG51bGwsZSxyLGksbyxudWxsLHMsbCxjKSxLbih5LGUpKX0sdT1lLnRyYW5zaXRpb24mJlwib3V0LWluXCI9PT1lLnRyYW5zaXRpb24ubW9kZTt1JiYobi50cmFuc2l0aW9uLmFmdGVyTGVhdmU9YSkseS5pc0luRmFsbGJhY2s9ITAsZChuLG8sbnVsbCwhMCksdXx8YSgpfSxtb3ZlKGUsdCxuKXt5LmFjdGl2ZUJyYW5jaCYmZih5LmFjdGl2ZUJyYW5jaCxlLHQsbikseS5jb250YWluZXI9ZX0sbmV4dDooKT0+eS5hY3RpdmVCcmFuY2gmJmgoeS5hY3RpdmVCcmFuY2gpLHJlZ2lzdGVyRGVwKGUsdCl7Y29uc3Qgbj0hIXkucGVuZGluZ0JyYW5jaDtuJiZ5LmRlcHMrKztjb25zdCBvPWUudm5vZGUuZWw7ZS5hc3luY0RlcC5jYXRjaCgodD0+e1F0KHQsZSwwKX0pKS50aGVuKChyPT57aWYoZS5pc1VubW91bnRlZHx8eS5pc1VubW91bnRlZHx8eS5wZW5kaW5nSWQhPT1lLnN1c3BlbnNlSWQpcmV0dXJuO2UuYXN5bmNSZXNvbHZlZD0hMDtjb25zdHt2bm9kZTpzfT1lO1JzKGUsciwhMSksbyYmKHMuZWw9byk7Y29uc3QgbD0hbyYmZS5zdWJUcmVlLmVsO3QoZSxzLG0ob3x8ZS5zdWJUcmVlLmVsKSxvP251bGw6aChlLnN1YlRyZWUpLHksaSxjKSxsJiZnKGwpLExuKGUscy5lbCksbiYmMD09LS15LmRlcHMmJnkucmVzb2x2ZSgpfSkpfSx1bm1vdW50KGUsdCl7eS5pc1VubW91bnRlZD0hMCx5LmFjdGl2ZUJyYW5jaCYmZCh5LmFjdGl2ZUJyYW5jaCxuLGUsdCkseS5wZW5kaW5nQnJhbmNoJiZkKHkucGVuZGluZ0JyYW5jaCxuLGUsdCl9fTtyZXR1cm4geX1mdW5jdGlvbiBXbihlKXtsZXQgdDtpZihGKGUpKXtjb25zdCBuPVFyJiZlLl9jO24mJihlLl9kPSExLFlyKCkpLGU9ZSgpLG4mJihlLl9kPSEwLHQ9SnIsWnIoKSl9aWYoRShlKSl7Y29uc3QgdD1mdW5jdGlvbihlKXtsZXQgdDtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dO2lmKCFvcyhvKSlyZXR1cm47aWYoby50eXBlIT09S3J8fFwidi1pZlwiPT09by5jaGlsZHJlbil7aWYodClyZXR1cm47dD1vfX1yZXR1cm4gdH0oZSk7ZT10fXJldHVybiBlPWdzKGUpLHQmJiFlLmR5bmFtaWNDaGlsZHJlbiYmKGUuZHluYW1pY0NoaWxkcmVuPXQuZmlsdGVyKCh0PT50IT09ZSkpKSxlfWZ1bmN0aW9uIHpuKGUsdCl7dCYmdC5wZW5kaW5nQnJhbmNoP0UoZSk/dC5lZmZlY3RzLnB1c2goLi4uZSk6dC5lZmZlY3RzLnB1c2goZSk6dm4oZSl9ZnVuY3Rpb24gS24oZSx0KXtlLmFjdGl2ZUJyYW5jaD10O2NvbnN0e3Zub2RlOm4scGFyZW50Q29tcG9uZW50Om99PWUscj1uLmVsPXQuZWw7byYmby5zdWJUcmVlPT09biYmKG8udm5vZGUuZWw9cixMbihvLHIpKX1mdW5jdGlvbiBHbihlLHQpe2lmKENzKXtsZXQgbj1Dcy5wcm92aWRlcztjb25zdCBvPUNzLnBhcmVudCYmQ3MucGFyZW50LnByb3ZpZGVzO289PT1uJiYobj1Dcy5wcm92aWRlcz1PYmplY3QuY3JlYXRlKG8pKSxuW2VdPXR9ZWxzZTt9ZnVuY3Rpb24gcW4oZSx0LG49ITEpe2NvbnN0IG89Q3N8fEVuO2lmKG8pe2NvbnN0IHI9bnVsbD09by5wYXJlbnQ/by52bm9kZS5hcHBDb250ZXh0JiZvLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXM6by5wYXJlbnQucHJvdmlkZXM7aWYociYmZSBpbiByKXJldHVybiByW2VdO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlyZXR1cm4gbiYmRih0KT90LmNhbGwoby5wcm94eSk6dH19ZnVuY3Rpb24gSm4oZSx0KXtyZXR1cm4gZW8oZSxudWxsLHQpfWZ1bmN0aW9uIFluKGUsdCl7cmV0dXJuIGVvKGUsbnVsbCx7Zmx1c2g6XCJwb3N0XCJ9KX1mdW5jdGlvbiBabihlLHQpe3JldHVybiBlbyhlLG51bGwse2ZsdXNoOlwic3luY1wifSl9Y29uc3QgUW49e307ZnVuY3Rpb24gWG4oZSx0LG4pe3JldHVybiBlbyhlLHQsbil9ZnVuY3Rpb24gZW8oZSx0LHtpbW1lZGlhdGU6bixkZWVwOm8sZmx1c2g6cn09dil7Y29uc3Qgcz1DcztsZXQgaSxsLGM9ITEsYT0hMTtpZihSdChlKT8oaT0oKT0+ZS52YWx1ZSxjPUN0KGUpKTpTdChlKT8oaT0oKT0+ZSxvPSEwKTpFKGUpPyhhPSEwLGM9ZS5zb21lKChlPT5TdChlKXx8Q3QoZSkpKSxpPSgpPT5lLm1hcCgoZT0+UnQoZSk/ZS52YWx1ZTpTdChlKT9vbyhlKTpGKGUpP1l0KGUscywyKTp2b2lkIDApKSk6aT1GKGUpP3Q/KCk9Pll0KGUscywyKTooKT0+e2lmKCFzfHwhcy5pc1VubW91bnRlZClyZXR1cm4gbCYmbCgpLFp0KGUscywzLFt1XSl9Ol8sdCYmbyl7Y29uc3QgZT1pO2k9KCk9Pm9vKGUoKSl9bGV0IHU9ZT0+e2w9aC5vblN0b3A9KCk9PntZdChlLHMsNCl9fSxwPWE/W106UW47Y29uc3QgZj0oKT0+e2lmKGguYWN0aXZlKWlmKHQpe2NvbnN0IGU9aC5ydW4oKTsob3x8Y3x8KGE/ZS5zb21lKCgoZSx0KT0+WShlLHBbdF0pKSk6WShlLHApKSkmJihsJiZsKCksWnQodCxzLDMsW2UscD09PVFuP3ZvaWQgMDpwLHVdKSxwPWUpfWVsc2UgaC5ydW4oKX07bGV0IGQ7Zi5hbGxvd1JlY3Vyc2U9ISF0LGQ9XCJzeW5jXCI9PT1yP2Y6XCJwb3N0XCI9PT1yPygpPT5QcihmLHMmJnMuc3VzcGVuc2UpOigpPT5mdW5jdGlvbihlKXtnbihlLHJuLG9uLHNuKX0oZik7Y29uc3QgaD1uZXcgZ2UoaSxkKTtyZXR1cm4gdD9uP2YoKTpwPWgucnVuKCk6XCJwb3N0XCI9PT1yP1ByKGgucnVuLmJpbmQoaCkscyYmcy5zdXNwZW5zZSk6aC5ydW4oKSwoKT0+e2guc3RvcCgpLHMmJnMuc2NvcGUmJmsocy5zY29wZS5lZmZlY3RzLGgpfX1mdW5jdGlvbiB0byhlLHQsbil7Y29uc3Qgbz10aGlzLnByb3h5LHI9UChlKT9lLmluY2x1ZGVzKFwiLlwiKT9ubyhvLGUpOigpPT5vW2VdOmUuYmluZChvLG8pO2xldCBzO0YodCk/cz10OihzPXQuaGFuZGxlcixuPXQpO2NvbnN0IGk9Q3M7a3ModGhpcyk7Y29uc3QgbD1lbyhyLHMuYmluZChvKSxuKTtyZXR1cm4gaT9rcyhpKTpUcygpLGx9ZnVuY3Rpb24gbm8oZSx0KXtjb25zdCBuPXQuc3BsaXQoXCIuXCIpO3JldHVybigpPT57bGV0IHQ9ZTtmb3IobGV0IGU9MDtlPG4ubGVuZ3RoJiZ0O2UrKyl0PXRbbltlXV07cmV0dXJuIHR9fWZ1bmN0aW9uIG9vKGUsdCl7aWYoIU0oZSl8fGUuX192X3NraXApcmV0dXJuIGU7aWYoKHQ9dHx8bmV3IFNldCkuaGFzKGUpKXJldHVybiBlO2lmKHQuYWRkKGUpLFJ0KGUpKW9vKGUudmFsdWUsdCk7ZWxzZSBpZihFKGUpKWZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKW9vKGVbbl0sdCk7ZWxzZSBpZihPKGUpfHwkKGUpKWUuZm9yRWFjaCgoZT0+e29vKGUsdCl9KSk7ZWxzZSBpZihMKGUpKWZvcihjb25zdCBuIGluIGUpb28oZVtuXSx0KTtyZXR1cm4gZX1mdW5jdGlvbiBybygpe2NvbnN0IGU9e2lzTW91bnRlZDohMSxpc0xlYXZpbmc6ITEsaXNVbm1vdW50aW5nOiExLGxlYXZpbmdWTm9kZXM6bmV3IE1hcH07cmV0dXJuIE9vKCgoKT0+e2UuaXNNb3VudGVkPSEwfSkpLFBvKCgoKT0+e2UuaXNVbm1vdW50aW5nPSEwfSkpLGV9Y29uc3Qgc289W0Z1bmN0aW9uLEFycmF5XSxpbz17bmFtZTpcIkJhc2VUcmFuc2l0aW9uXCIscHJvcHM6e21vZGU6U3RyaW5nLGFwcGVhcjpCb29sZWFuLHBlcnNpc3RlZDpCb29sZWFuLG9uQmVmb3JlRW50ZXI6c28sb25FbnRlcjpzbyxvbkFmdGVyRW50ZXI6c28sb25FbnRlckNhbmNlbGxlZDpzbyxvbkJlZm9yZUxlYXZlOnNvLG9uTGVhdmU6c28sb25BZnRlckxlYXZlOnNvLG9uTGVhdmVDYW5jZWxsZWQ6c28sb25CZWZvcmVBcHBlYXI6c28sb25BcHBlYXI6c28sb25BZnRlckFwcGVhcjpzbyxvbkFwcGVhckNhbmNlbGxlZDpzb30sc2V0dXAoZSx7c2xvdHM6dH0pe2NvbnN0IG49d3MoKSxvPXJvKCk7bGV0IHI7cmV0dXJuKCk9Pntjb25zdCBzPXQuZGVmYXVsdCYmZm8odC5kZWZhdWx0KCksITApO2lmKCFzfHwhcy5sZW5ndGgpcmV0dXJuO2xldCBpPXNbMF07aWYocy5sZW5ndGg+MSlmb3IoY29uc3QgZSBvZiBzKWlmKGUudHlwZSE9PUtyKXtpPWU7YnJlYWt9Y29uc3QgbD1rdChlKSx7bW9kZTpjfT1sO2lmKG8uaXNMZWF2aW5nKXJldHVybiBhbyhpKTtjb25zdCBhPXVvKGkpO2lmKCFhKXJldHVybiBhbyhpKTtjb25zdCB1PWNvKGEsbCxvLG4pO3BvKGEsdSk7Y29uc3QgcD1uLnN1YlRyZWUsZj1wJiZ1byhwKTtsZXQgZD0hMTtjb25zdHtnZXRUcmFuc2l0aW9uS2V5Omh9PWEudHlwZTtpZihoKXtjb25zdCBlPWgoKTt2b2lkIDA9PT1yP3I9ZTplIT09ciYmKHI9ZSxkPSEwKX1pZihmJiZmLnR5cGUhPT1LciYmKCFycyhhLGYpfHxkKSl7Y29uc3QgZT1jbyhmLGwsbyxuKTtpZihwbyhmLGUpLFwib3V0LWluXCI9PT1jKXJldHVybiBvLmlzTGVhdmluZz0hMCxlLmFmdGVyTGVhdmU9KCk9PntvLmlzTGVhdmluZz0hMSxuLnVwZGF0ZSgpfSxhbyhpKTtcImluLW91dFwiPT09YyYmYS50eXBlIT09S3ImJihlLmRlbGF5TGVhdmU9KGUsdCxuKT0+e2xvKG8sZilbU3RyaW5nKGYua2V5KV09ZixlLl9sZWF2ZUNiPSgpPT57dCgpLGUuX2xlYXZlQ2I9dm9pZCAwLGRlbGV0ZSB1LmRlbGF5ZWRMZWF2ZX0sdS5kZWxheWVkTGVhdmU9bn0pfXJldHVybiBpfX19O2Z1bmN0aW9uIGxvKGUsdCl7Y29uc3R7bGVhdmluZ1ZOb2RlczpufT1lO2xldCBvPW4uZ2V0KHQudHlwZSk7cmV0dXJuIG98fChvPU9iamVjdC5jcmVhdGUobnVsbCksbi5zZXQodC50eXBlLG8pKSxvfWZ1bmN0aW9uIGNvKGUsdCxuLG8pe2NvbnN0e2FwcGVhcjpyLG1vZGU6cyxwZXJzaXN0ZWQ6aT0hMSxvbkJlZm9yZUVudGVyOmwsb25FbnRlcjpjLG9uQWZ0ZXJFbnRlcjphLG9uRW50ZXJDYW5jZWxsZWQ6dSxvbkJlZm9yZUxlYXZlOnAsb25MZWF2ZTpmLG9uQWZ0ZXJMZWF2ZTpkLG9uTGVhdmVDYW5jZWxsZWQ6aCxvbkJlZm9yZUFwcGVhcjptLG9uQXBwZWFyOmcsb25BZnRlckFwcGVhcjp2LG9uQXBwZWFyQ2FuY2VsbGVkOnl9PXQsXz1TdHJpbmcoZS5rZXkpLGI9bG8obixlKSxTPShlLHQpPT57ZSYmWnQoZSxvLDksdCl9LHg9KGUsdCk9Pntjb25zdCBuPXRbMV07UyhlLHQpLEUoZSk/ZS5ldmVyeSgoZT0+ZS5sZW5ndGg8PTEpKSYmbigpOmUubGVuZ3RoPD0xJiZuKCl9LEM9e21vZGU6cyxwZXJzaXN0ZWQ6aSxiZWZvcmVFbnRlcih0KXtsZXQgbz1sO2lmKCFuLmlzTW91bnRlZCl7aWYoIXIpcmV0dXJuO289bXx8bH10Ll9sZWF2ZUNiJiZ0Ll9sZWF2ZUNiKCEwKTtjb25zdCBzPWJbX107cyYmcnMoZSxzKSYmcy5lbC5fbGVhdmVDYiYmcy5lbC5fbGVhdmVDYigpLFMobyxbdF0pfSxlbnRlcihlKXtsZXQgdD1jLG89YSxzPXU7aWYoIW4uaXNNb3VudGVkKXtpZighcilyZXR1cm47dD1nfHxjLG89dnx8YSxzPXl8fHV9bGV0IGk9ITE7Y29uc3QgbD1lLl9lbnRlckNiPXQ9PntpfHwoaT0hMCxTKHQ/czpvLFtlXSksQy5kZWxheWVkTGVhdmUmJkMuZGVsYXllZExlYXZlKCksZS5fZW50ZXJDYj12b2lkIDApfTt0P3godCxbZSxsXSk6bCgpfSxsZWF2ZSh0LG8pe2NvbnN0IHI9U3RyaW5nKGUua2V5KTtpZih0Ll9lbnRlckNiJiZ0Ll9lbnRlckNiKCEwKSxuLmlzVW5tb3VudGluZylyZXR1cm4gbygpO1MocCxbdF0pO2xldCBzPSExO2NvbnN0IGk9dC5fbGVhdmVDYj1uPT57c3x8KHM9ITAsbygpLFMobj9oOmQsW3RdKSx0Ll9sZWF2ZUNiPXZvaWQgMCxiW3JdPT09ZSYmZGVsZXRlIGJbcl0pfTtiW3JdPWUsZj94KGYsW3QsaV0pOmkoKX0sY2xvbmU6ZT0+Y28oZSx0LG4sbyl9O3JldHVybiBDfWZ1bmN0aW9uIGFvKGUpe2lmKHlvKGUpKXJldHVybihlPWZzKGUpKS5jaGlsZHJlbj1udWxsLGV9ZnVuY3Rpb24gdW8oZSl7cmV0dXJuIHlvKGUpP2UuY2hpbGRyZW4/ZS5jaGlsZHJlblswXTp2b2lkIDA6ZX1mdW5jdGlvbiBwbyhlLHQpezYmZS5zaGFwZUZsYWcmJmUuY29tcG9uZW50P3BvKGUuY29tcG9uZW50LnN1YlRyZWUsdCk6MTI4JmUuc2hhcGVGbGFnPyhlLnNzQ29udGVudC50cmFuc2l0aW9uPXQuY2xvbmUoZS5zc0NvbnRlbnQpLGUuc3NGYWxsYmFjay50cmFuc2l0aW9uPXQuY2xvbmUoZS5zc0ZhbGxiYWNrKSk6ZS50cmFuc2l0aW9uPXR9ZnVuY3Rpb24gZm8oZSx0PSExLG4pe2xldCBvPVtdLHI9MDtmb3IobGV0IHM9MDtzPGUubGVuZ3RoO3MrKyl7bGV0IGk9ZVtzXTtjb25zdCBsPW51bGw9PW4/aS5rZXk6U3RyaW5nKG4pK1N0cmluZyhudWxsIT1pLmtleT9pLmtleTpzKTtpLnR5cGU9PT1Xcj8oMTI4JmkucGF0Y2hGbGFnJiZyKyssbz1vLmNvbmNhdChmbyhpLmNoaWxkcmVuLHQsbCkpKToodHx8aS50eXBlIT09S3IpJiZvLnB1c2gobnVsbCE9bD9mcyhpLHtrZXk6bH0pOmkpfWlmKHI+MSlmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKylvW3NdLnBhdGNoRmxhZz0tMjtyZXR1cm4gb31mdW5jdGlvbiBobyhlKXtyZXR1cm4gRihlKT97c2V0dXA6ZSxuYW1lOmUubmFtZX06ZX1jb25zdCBtbz1lPT4hIWUudHlwZS5fX2FzeW5jTG9hZGVyO2Z1bmN0aW9uIGdvKGUpe0YoZSkmJihlPXtsb2FkZXI6ZX0pO2NvbnN0e2xvYWRlcjp0LGxvYWRpbmdDb21wb25lbnQ6bixlcnJvckNvbXBvbmVudDpvLGRlbGF5OnI9MjAwLHRpbWVvdXQ6cyxzdXNwZW5zaWJsZTppPSEwLG9uRXJyb3I6bH09ZTtsZXQgYyxhPW51bGwsdT0wO2NvbnN0IHA9KCk9PntsZXQgZTtyZXR1cm4gYXx8KGU9YT10KCkuY2F0Y2goKGU9PntpZihlPWUgaW5zdGFuY2VvZiBFcnJvcj9lOm5ldyBFcnJvcihTdHJpbmcoZSkpLGwpcmV0dXJuIG5ldyBQcm9taXNlKCgodCxuKT0+e2woZSwoKCk9PnQoKHUrKyxhPW51bGwscCgpKSkpLCgoKT0+bihlKSksdSsxKX0pKTt0aHJvdyBlfSkpLnRoZW4oKHQ9PmUhPT1hJiZhP2E6KHQmJih0Ll9fZXNNb2R1bGV8fFwiTW9kdWxlXCI9PT10W1N5bWJvbC50b1N0cmluZ1RhZ10pJiYodD10LmRlZmF1bHQpLGM9dCx0KSkpKX07cmV0dXJuIGhvKHtuYW1lOlwiQXN5bmNDb21wb25lbnRXcmFwcGVyXCIsX19hc3luY0xvYWRlcjpwLGdldCBfX2FzeW5jUmVzb2x2ZWQoKXtyZXR1cm4gY30sc2V0dXAoKXtjb25zdCBlPUNzO2lmKGMpcmV0dXJuKCk9PnZvKGMsZSk7Y29uc3QgdD10PT57YT1udWxsLFF0KHQsZSwxMywhbyl9O2lmKGkmJmUuc3VzcGVuc2UpcmV0dXJuIHAoKS50aGVuKCh0PT4oKT0+dm8odCxlKSkpLmNhdGNoKChlPT4odChlKSwoKT0+bz91cyhvLHtlcnJvcjplfSk6bnVsbCkpKTtjb25zdCBsPUZ0KCExKSx1PUZ0KCksZj1GdCghIXIpO3JldHVybiByJiZzZXRUaW1lb3V0KCgoKT0+e2YudmFsdWU9ITF9KSxyKSxudWxsIT1zJiZzZXRUaW1lb3V0KCgoKT0+e2lmKCFsLnZhbHVlJiYhdS52YWx1ZSl7Y29uc3QgZT1uZXcgRXJyb3IoYEFzeW5jIGNvbXBvbmVudCB0aW1lZCBvdXQgYWZ0ZXIgJHtzfW1zLmApO3QoZSksdS52YWx1ZT1lfX0pLHMpLHAoKS50aGVuKCgoKT0+e2wudmFsdWU9ITAsZS5wYXJlbnQmJnlvKGUucGFyZW50LnZub2RlKSYmaG4oZS5wYXJlbnQudXBkYXRlKX0pKS5jYXRjaCgoZT0+e3QoZSksdS52YWx1ZT1lfSkpLCgpPT5sLnZhbHVlJiZjP3ZvKGMsZSk6dS52YWx1ZSYmbz91cyhvLHtlcnJvcjp1LnZhbHVlfSk6biYmIWYudmFsdWU/dXMobik6dm9pZCAwfX0pfWZ1bmN0aW9uIHZvKGUse3Zub2RlOntyZWY6dCxwcm9wczpuLGNoaWxkcmVuOm99fSl7Y29uc3Qgcj11cyhlLG4sbyk7cmV0dXJuIHIucmVmPXQscn1jb25zdCB5bz1lPT5lLnR5cGUuX19pc0tlZXBBbGl2ZSxfbz17bmFtZTpcIktlZXBBbGl2ZVwiLF9faXNLZWVwQWxpdmU6ITAscHJvcHM6e2luY2x1ZGU6W1N0cmluZyxSZWdFeHAsQXJyYXldLGV4Y2x1ZGU6W1N0cmluZyxSZWdFeHAsQXJyYXldLG1heDpbU3RyaW5nLE51bWJlcl19LHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1uLmN0eCxyPW5ldyBNYXAscz1uZXcgU2V0O2xldCBpPW51bGw7Y29uc3QgbD1uLnN1c3BlbnNlLHtyZW5kZXJlcjp7cDpjLG06YSx1bTp1LG86e2NyZWF0ZUVsZW1lbnQ6cH19fT1vLGY9cChcImRpdlwiKTtmdW5jdGlvbiBkKGUpe2tvKGUpLHUoZSxuLGwsITApfWZ1bmN0aW9uIGgoZSl7ci5mb3JFYWNoKCgodCxuKT0+e2NvbnN0IG89QnModC50eXBlKTshb3x8ZSYmZShvKXx8bShuKX0pKX1mdW5jdGlvbiBtKGUpe2NvbnN0IHQ9ci5nZXQoZSk7aSYmdC50eXBlPT09aS50eXBlP2kmJmtvKGkpOmQodCksci5kZWxldGUoZSkscy5kZWxldGUoZSl9by5hY3RpdmF0ZT0oZSx0LG4sbyxyKT0+e2NvbnN0IHM9ZS5jb21wb25lbnQ7YShlLHQsbiwwLGwpLGMocy52bm9kZSxlLHQsbixzLGwsbyxlLnNsb3RTY29wZUlkcyxyKSxQcigoKCk9PntzLmlzRGVhY3RpdmF0ZWQ9ITEscy5hJiZaKHMuYSk7Y29uc3QgdD1lLnByb3BzJiZlLnByb3BzLm9uVm5vZGVNb3VudGVkO3QmJmJzKHQscy5wYXJlbnQsZSl9KSxsKX0sby5kZWFjdGl2YXRlPWU9Pntjb25zdCB0PWUuY29tcG9uZW50O2EoZSxmLG51bGwsMSxsKSxQcigoKCk9Pnt0LmRhJiZaKHQuZGEpO2NvbnN0IG49ZS5wcm9wcyYmZS5wcm9wcy5vblZub2RlVW5tb3VudGVkO24mJmJzKG4sdC5wYXJlbnQsZSksdC5pc0RlYWN0aXZhdGVkPSEwfSksbCl9LFhuKCgoKT0+W2UuaW5jbHVkZSxlLmV4Y2x1ZGVdKSwoKFtlLHRdKT0+e2UmJmgoKHQ9PmJvKGUsdCkpKSx0JiZoKChlPT4hYm8odCxlKSkpfSkse2ZsdXNoOlwicG9zdFwiLGRlZXA6ITB9KTtsZXQgZz1udWxsO2NvbnN0IHY9KCk9PntudWxsIT1nJiZyLnNldChnLFRvKG4uc3ViVHJlZSkpfTtyZXR1cm4gT28odiksRm8odiksUG8oKCgpPT57ci5mb3JFYWNoKChlPT57Y29uc3R7c3ViVHJlZTp0LHN1c3BlbnNlOm99PW4scj1Ubyh0KTtpZihlLnR5cGUhPT1yLnR5cGUpZChlKTtlbHNle2tvKHIpO2NvbnN0IGU9ci5jb21wb25lbnQuZGE7ZSYmUHIoZSxvKX19KSl9KSksKCk9PntpZihnPW51bGwsIXQuZGVmYXVsdClyZXR1cm4gbnVsbDtjb25zdCBuPXQuZGVmYXVsdCgpLG89blswXTtpZihuLmxlbmd0aD4xKXJldHVybiBpPW51bGwsbjtpZighKG9zKG8pJiYoNCZvLnNoYXBlRmxhZ3x8MTI4Jm8uc2hhcGVGbGFnKSkpcmV0dXJuIGk9bnVsbCxvO2xldCBsPVRvKG8pO2NvbnN0IGM9bC50eXBlLGE9QnMobW8obCk/bC50eXBlLl9fYXN5bmNSZXNvbHZlZHx8e306Yykse2luY2x1ZGU6dSxleGNsdWRlOnAsbWF4OmZ9PWU7aWYodSYmKCFhfHwhYm8odSxhKSl8fHAmJmEmJmJvKHAsYSkpcmV0dXJuIGk9bCxvO2NvbnN0IGQ9bnVsbD09bC5rZXk/YzpsLmtleSxoPXIuZ2V0KGQpO3JldHVybiBsLmVsJiYobD1mcyhsKSwxMjgmby5zaGFwZUZsYWcmJihvLnNzQ29udGVudD1sKSksZz1kLGg/KGwuZWw9aC5lbCxsLmNvbXBvbmVudD1oLmNvbXBvbmVudCxsLnRyYW5zaXRpb24mJnBvKGwsbC50cmFuc2l0aW9uKSxsLnNoYXBlRmxhZ3w9NTEyLHMuZGVsZXRlKGQpLHMuYWRkKGQpKToocy5hZGQoZCksZiYmcy5zaXplPnBhcnNlSW50KGYsMTApJiZtKHMudmFsdWVzKCkubmV4dCgpLnZhbHVlKSksbC5zaGFwZUZsYWd8PTI1NixpPWwsam4oby50eXBlKT9vOmx9fX07ZnVuY3Rpb24gYm8oZSx0KXtyZXR1cm4gRShlKT9lLnNvbWUoKGU9PmJvKGUsdCkpKTpQKGUpP2Uuc3BsaXQoXCIsXCIpLmluY2x1ZGVzKHQpOiEhZS50ZXN0JiZlLnRlc3QodCl9ZnVuY3Rpb24gU28oZSx0KXtDbyhlLFwiYVwiLHQpfWZ1bmN0aW9uIHhvKGUsdCl7Q28oZSxcImRhXCIsdCl9ZnVuY3Rpb24gQ28oZSx0LG49Q3Mpe2NvbnN0IG89ZS5fX3dkY3x8KGUuX193ZGM9KCk9PntsZXQgdD1uO2Zvcig7dDspe2lmKHQuaXNEZWFjdGl2YXRlZClyZXR1cm47dD10LnBhcmVudH1yZXR1cm4gZSgpfSk7aWYoTm8odCxvLG4pLG4pe2xldCBlPW4ucGFyZW50O2Zvcig7ZSYmZS5wYXJlbnQ7KXlvKGUucGFyZW50LnZub2RlKSYmd28obyx0LG4sZSksZT1lLnBhcmVudH19ZnVuY3Rpb24gd28oZSx0LG4sbyl7Y29uc3Qgcj1Obyh0LGUsbywhMCk7QW8oKCgpPT57ayhvW3RdLHIpfSksbil9ZnVuY3Rpb24ga28oZSl7bGV0IHQ9ZS5zaGFwZUZsYWc7MjU2JnQmJih0LT0yNTYpLDUxMiZ0JiYodC09NTEyKSxlLnNoYXBlRmxhZz10fWZ1bmN0aW9uIFRvKGUpe3JldHVybiAxMjgmZS5zaGFwZUZsYWc/ZS5zc0NvbnRlbnQ6ZX1mdW5jdGlvbiBObyhlLHQsbj1DcyxvPSExKXtpZihuKXtjb25zdCByPW5bZV18fChuW2VdPVtdKSxzPXQuX193ZWh8fCh0Ll9fd2VoPSguLi5vKT0+e2lmKG4uaXNVbm1vdW50ZWQpcmV0dXJuO3hlKCksa3Mobik7Y29uc3Qgcj1adCh0LG4sZSxvKTtyZXR1cm4gVHMoKSxDZSgpLHJ9KTtyZXR1cm4gbz9yLnVuc2hpZnQocyk6ci5wdXNoKHMpLHN9fWNvbnN0IEVvPWU9Pih0LG49Q3MpPT4oIU9zfHxcInNwXCI9PT1lKSYmTm8oZSx0LG4pLCRvPUVvKFwiYm1cIiksT289RW8oXCJtXCIpLFJvPUVvKFwiYnVcIiksRm89RW8oXCJ1XCIpLFBvPUVvKFwiYnVtXCIpLEFvPUVvKFwidW1cIiksTW89RW8oXCJzcFwiKSxWbz1FbyhcInJ0Z1wiKSxJbz1FbyhcInJ0Y1wiKTtmdW5jdGlvbiBCbyhlLHQ9Q3Mpe05vKFwiZWNcIixlLHQpfWZ1bmN0aW9uIExvKGUsdCl7Y29uc3Qgbj1FbjtpZihudWxsPT09bilyZXR1cm4gZTtjb25zdCBvPVZzKG4pfHxuLnByb3h5LHI9ZS5kaXJzfHwoZS5kaXJzPVtdKTtmb3IobGV0IHM9MDtzPHQubGVuZ3RoO3MrKyl7bGV0W2UsbixpLGw9dl09dFtzXTtGKGUpJiYoZT17bW91bnRlZDplLHVwZGF0ZWQ6ZX0pLGUuZGVlcCYmb28obiksci5wdXNoKHtkaXI6ZSxpbnN0YW5jZTpvLHZhbHVlOm4sb2xkVmFsdWU6dm9pZCAwLGFyZzppLG1vZGlmaWVyczpsfSl9cmV0dXJuIGV9ZnVuY3Rpb24gam8oZSx0LG4sbyl7Y29uc3Qgcj1lLmRpcnMscz10JiZ0LmRpcnM7Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspe2NvbnN0IGw9cltpXTtzJiYobC5vbGRWYWx1ZT1zW2ldLnZhbHVlKTtsZXQgYz1sLmRpcltvXTtjJiYoeGUoKSxadChjLG4sOCxbZS5lbCxsLGUsdF0pLENlKCkpfX1mdW5jdGlvbiBVbyhlLHQpe3JldHVybiB6byhcImNvbXBvbmVudHNcIixlLCEwLHQpfHxlfWNvbnN0IERvPVN5bWJvbCgpO2Z1bmN0aW9uIEhvKGUpe3JldHVybiBQKGUpP3pvKFwiY29tcG9uZW50c1wiLGUsITEpfHxlOmV8fERvfWZ1bmN0aW9uIFdvKGUpe3JldHVybiB6byhcImRpcmVjdGl2ZXNcIixlKX1mdW5jdGlvbiB6byhlLHQsbj0hMCxvPSExKXtjb25zdCByPUVufHxDcztpZihyKXtjb25zdCBuPXIudHlwZTtpZihcImNvbXBvbmVudHNcIj09PWUpe2NvbnN0IGU9QnMobiwhMSk7aWYoZSYmKGU9PT10fHxlPT09eih0KXx8ZT09PXEoeih0KSkpKXJldHVybiBufWNvbnN0IHM9S28ocltlXXx8bltlXSx0KXx8S28oci5hcHBDb250ZXh0W2VdLHQpO3JldHVybiFzJiZvP246c319ZnVuY3Rpb24gS28oZSx0KXtyZXR1cm4gZSYmKGVbdF18fGVbeih0KV18fGVbcSh6KHQpKV0pfWZ1bmN0aW9uIEdvKGUsdCxuLG8pe2xldCByO2NvbnN0IHM9biYmbltvXTtpZihFKGUpfHxQKGUpKXtyPW5ldyBBcnJheShlLmxlbmd0aCk7Zm9yKGxldCBuPTAsbz1lLmxlbmd0aDtuPG87bisrKXJbbl09dChlW25dLG4sdm9pZCAwLHMmJnNbbl0pfWVsc2UgaWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe3I9bmV3IEFycmF5KGUpO2ZvcihsZXQgbj0wO248ZTtuKyspcltuXT10KG4rMSxuLHZvaWQgMCxzJiZzW25dKX1lbHNlIGlmKE0oZSkpaWYoZVtTeW1ib2wuaXRlcmF0b3JdKXI9QXJyYXkuZnJvbShlLCgoZSxuKT0+dChlLG4sdm9pZCAwLHMmJnNbbl0pKSk7ZWxzZXtjb25zdCBuPU9iamVjdC5rZXlzKGUpO3I9bmV3IEFycmF5KG4ubGVuZ3RoKTtmb3IobGV0IG89MCxpPW4ubGVuZ3RoO288aTtvKyspe2NvbnN0IGk9bltvXTtyW29dPXQoZVtpXSxpLG8scyYmc1tvXSl9fWVsc2Ugcj1bXTtyZXR1cm4gbiYmKG5bb109cikscn1mdW5jdGlvbiBxbyhlLHQpe2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKXtjb25zdCBvPXRbbl07aWYoRShvKSlmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyllW29bdF0ubmFtZV09b1t0XS5mbjtlbHNlIG8mJihlW28ubmFtZV09by5mbil9cmV0dXJuIGV9ZnVuY3Rpb24gSm8oZSx0LG49e30sbyxyKXtpZihFbi5pc0NFfHxFbi5wYXJlbnQmJm1vKEVuLnBhcmVudCkmJkVuLnBhcmVudC5pc0NFKXJldHVybiB1cyhcInNsb3RcIixcImRlZmF1bHRcIj09PXQ/bnVsbDp7bmFtZTp0fSxvJiZvKCkpO2xldCBzPWVbdF07cyYmcy5fYyYmKHMuX2Q9ITEpLFlyKCk7Y29uc3QgaT1zJiZZbyhzKG4pKSxsPW5zKFdyLHtrZXk6bi5rZXl8fGBfJHt0fWB9LGl8fChvP28oKTpbXSksaSYmMT09PWUuXz82NDotMik7cmV0dXJuIXImJmwuc2NvcGVJZCYmKGwuc2xvdFNjb3BlSWRzPVtsLnNjb3BlSWQrXCItc1wiXSkscyYmcy5fYyYmKHMuX2Q9ITApLGx9ZnVuY3Rpb24gWW8oZSl7cmV0dXJuIGUuc29tZSgoZT0+IW9zKGUpfHxlLnR5cGUhPT1LciYmIShlLnR5cGU9PT1XciYmIVlvKGUuY2hpbGRyZW4pKSkpP2U6bnVsbH1mdW5jdGlvbiBabyhlKXtjb25zdCB0PXt9O2Zvcihjb25zdCBuIGluIGUpdFtKKG4pXT1lW25dO3JldHVybiB0fWNvbnN0IFFvPWU9PmU/TnMoZSk/VnMoZSl8fGUucHJveHk6UW8oZS5wYXJlbnQpOm51bGwsWG89dyhPYmplY3QuY3JlYXRlKG51bGwpLHskOmU9PmUsJGVsOmU9PmUudm5vZGUuZWwsJGRhdGE6ZT0+ZS5kYXRhLCRwcm9wczplPT5lLnByb3BzLCRhdHRyczplPT5lLmF0dHJzLCRzbG90czplPT5lLnNsb3RzLCRyZWZzOmU9PmUucmVmcywkcGFyZW50OmU9PlFvKGUucGFyZW50KSwkcm9vdDplPT5RbyhlLnJvb3QpLCRlbWl0OmU9PmUuZW1pdCwkb3B0aW9uczplPT5pcihlKSwkZm9yY2VVcGRhdGU6ZT0+ZS5mfHwoZS5mPSgpPT5obihlLnVwZGF0ZSkpLCRuZXh0VGljazplPT5lLm58fChlLm49ZG4uYmluZChlLnByb3h5KSksJHdhdGNoOmU9PnRvLmJpbmQoZSl9KSxlcj17Z2V0KHtfOmV9LHQpe2NvbnN0e2N0eDpuLHNldHVwU3RhdGU6byxkYXRhOnIscHJvcHM6cyxhY2Nlc3NDYWNoZTppLHR5cGU6bCxhcHBDb250ZXh0OmN9PWU7bGV0IGE7aWYoXCIkXCIhPT10WzBdKXtjb25zdCBsPWlbdF07aWYodm9pZCAwIT09bClzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBvW3RdO2Nhc2UgMjpyZXR1cm4gclt0XTtjYXNlIDQ6cmV0dXJuIG5bdF07Y2FzZSAzOnJldHVybiBzW3RdfWVsc2V7aWYobyE9PXYmJk4obyx0KSlyZXR1cm4gaVt0XT0xLG9bdF07aWYociE9PXYmJk4ocix0KSlyZXR1cm4gaVt0XT0yLHJbdF07aWYoKGE9ZS5wcm9wc09wdGlvbnNbMF0pJiZOKGEsdCkpcmV0dXJuIGlbdF09MyxzW3RdO2lmKG4hPT12JiZOKG4sdCkpcmV0dXJuIGlbdF09NCxuW3RdO25yJiYoaVt0XT0wKX19Y29uc3QgdT1Yb1t0XTtsZXQgcCxmO3JldHVybiB1PyhcIiRhdHRyc1wiPT09dCYmd2UoZSwwLHQpLHUoZSkpOihwPWwuX19jc3NNb2R1bGVzKSYmKHA9cFt0XSk/cDpuIT09diYmTihuLHQpPyhpW3RdPTQsblt0XSk6KGY9Yy5jb25maWcuZ2xvYmFsUHJvcGVydGllcyxOKGYsdCk/Zlt0XTp2b2lkIDApfSxzZXQoe186ZX0sdCxuKXtjb25zdHtkYXRhOm8sc2V0dXBTdGF0ZTpyLGN0eDpzfT1lO3JldHVybiByIT09diYmTihyLHQpPyhyW3RdPW4sITApOm8hPT12JiZOKG8sdCk/KG9bdF09biwhMCk6IU4oZS5wcm9wcyx0KSYmKChcIiRcIiE9PXRbMF18fCEodC5zbGljZSgxKWluIGUpKSYmKHNbdF09biwhMCkpfSxoYXMoe186e2RhdGE6ZSxzZXR1cFN0YXRlOnQsYWNjZXNzQ2FjaGU6bixjdHg6byxhcHBDb250ZXh0OnIscHJvcHNPcHRpb25zOnN9fSxpKXtsZXQgbDtyZXR1cm4hIW5baV18fGUhPT12JiZOKGUsaSl8fHQhPT12JiZOKHQsaSl8fChsPXNbMF0pJiZOKGwsaSl8fE4obyxpKXx8TihYbyxpKXx8TihyLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLGkpfSxkZWZpbmVQcm9wZXJ0eShlLHQsbil7cmV0dXJuIG51bGwhPW4uZ2V0P2UuXy5hY2Nlc3NDYWNoZVt0XT0wOk4obixcInZhbHVlXCIpJiZ0aGlzLnNldChlLHQsbi52YWx1ZSxudWxsKSxSZWZsZWN0LmRlZmluZVByb3BlcnR5KGUsdCxuKX19LHRyPXcoe30sZXIse2dldChlLHQpe2lmKHQhPT1TeW1ib2wudW5zY29wYWJsZXMpcmV0dXJuIGVyLmdldChlLHQsZSl9LGhhczooZSxuKT0+XCJfXCIhPT1uWzBdJiYhdChuKX0pO2xldCBucj0hMDtmdW5jdGlvbiBvcihlKXtjb25zdCB0PWlyKGUpLG49ZS5wcm94eSxvPWUuY3R4O25yPSExLHQuYmVmb3JlQ3JlYXRlJiZycih0LmJlZm9yZUNyZWF0ZSxlLFwiYmNcIik7Y29uc3R7ZGF0YTpyLGNvbXB1dGVkOnMsbWV0aG9kczppLHdhdGNoOmwscHJvdmlkZTpjLGluamVjdDphLGNyZWF0ZWQ6dSxiZWZvcmVNb3VudDpwLG1vdW50ZWQ6ZixiZWZvcmVVcGRhdGU6ZCx1cGRhdGVkOmgsYWN0aXZhdGVkOm0sZGVhY3RpdmF0ZWQ6ZyxiZWZvcmVVbm1vdW50OnYsdW5tb3VudGVkOnkscmVuZGVyOmIscmVuZGVyVHJhY2tlZDpTLHJlbmRlclRyaWdnZXJlZDp4LGVycm9yQ2FwdHVyZWQ6QyxzZXJ2ZXJQcmVmZXRjaDp3LGV4cG9zZTprLGluaGVyaXRBdHRyczpULGNvbXBvbmVudHM6TixkaXJlY3RpdmVzOiR9PXQ7aWYoYSYmZnVuY3Rpb24oZSx0LG49XyxvPSExKXtFKGUpJiYoZT11cihlKSk7Zm9yKGNvbnN0IHIgaW4gZSl7Y29uc3Qgbj1lW3JdO2xldCBzO3M9TShuKT9cImRlZmF1bHRcImluIG4/cW4obi5mcm9tfHxyLG4uZGVmYXVsdCwhMCk6cW4obi5mcm9tfHxyKTpxbihuKSxSdChzKSYmbz9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6KCk9PnMudmFsdWUsc2V0OmU9PnMudmFsdWU9ZX0pOnRbcl09c319KGEsbyxudWxsLGUuYXBwQ29udGV4dC5jb25maWcudW53cmFwSW5qZWN0ZWRSZWYpLGkpZm9yKGNvbnN0IF8gaW4gaSl7Y29uc3QgZT1pW19dO0YoZSkmJihvW19dPWUuYmluZChuKSl9aWYocil7Y29uc3QgdD1yLmNhbGwobixuKTtNKHQpJiYoZS5kYXRhPWd0KHQpKX1pZihucj0hMCxzKWZvcihjb25zdCBFIGluIHMpe2NvbnN0IGU9c1tFXSx0PUYoZSk/ZS5iaW5kKG4sbik6RihlLmdldCk/ZS5nZXQuYmluZChuLG4pOl8scj0hRihlKSYmRihlLnNldCk/ZS5zZXQuYmluZChuKTpfLGk9anMoe2dldDp0LHNldDpyfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sRSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OigpPT5pLnZhbHVlLHNldDplPT5pLnZhbHVlPWV9KX1pZihsKWZvcihjb25zdCBfIGluIGwpc3IobFtfXSxvLG4sXyk7aWYoYyl7Y29uc3QgZT1GKGMpP2MuY2FsbChuKTpjO1JlZmxlY3Qub3duS2V5cyhlKS5mb3JFYWNoKCh0PT57R24odCxlW3RdKX0pKX1mdW5jdGlvbiBPKGUsdCl7RSh0KT90LmZvckVhY2goKHQ9PmUodC5iaW5kKG4pKSkpOnQmJmUodC5iaW5kKG4pKX1pZih1JiZycih1LGUsXCJjXCIpLE8oJG8scCksTyhPbyxmKSxPKFJvLGQpLE8oRm8saCksTyhTbyxtKSxPKHhvLGcpLE8oQm8sQyksTyhJbyxTKSxPKFZvLHgpLE8oUG8sdiksTyhBbyx5KSxPKE1vLHcpLEUoaykpaWYoay5sZW5ndGgpe2NvbnN0IHQ9ZS5leHBvc2VkfHwoZS5leHBvc2VkPXt9KTtrLmZvckVhY2goKGU9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtnZXQ6KCk9Pm5bZV0sc2V0OnQ9Pm5bZV09dH0pfSkpfWVsc2UgZS5leHBvc2VkfHwoZS5leHBvc2VkPXt9KTtiJiZlLnJlbmRlcj09PV8mJihlLnJlbmRlcj1iKSxudWxsIT1UJiYoZS5pbmhlcml0QXR0cnM9VCksTiYmKGUuY29tcG9uZW50cz1OKSwkJiYoZS5kaXJlY3RpdmVzPSQpfWZ1bmN0aW9uIHJyKGUsdCxuKXtadChFKGUpP2UubWFwKChlPT5lLmJpbmQodC5wcm94eSkpKTplLmJpbmQodC5wcm94eSksdCxuKX1mdW5jdGlvbiBzcihlLHQsbixvKXtjb25zdCByPW8uaW5jbHVkZXMoXCIuXCIpP25vKG4sbyk6KCk9Pm5bb107aWYoUChlKSl7Y29uc3Qgbj10W2VdO0YobikmJlhuKHIsbil9ZWxzZSBpZihGKGUpKVhuKHIsZS5iaW5kKG4pKTtlbHNlIGlmKE0oZSkpaWYoRShlKSllLmZvckVhY2goKGU9PnNyKGUsdCxuLG8pKSk7ZWxzZXtjb25zdCBvPUYoZS5oYW5kbGVyKT9lLmhhbmRsZXIuYmluZChuKTp0W2UuaGFuZGxlcl07RihvKSYmWG4ocixvLGUpfX1mdW5jdGlvbiBpcihlKXtjb25zdCB0PWUudHlwZSx7bWl4aW5zOm4sZXh0ZW5kczpvfT10LHttaXhpbnM6cixvcHRpb25zQ2FjaGU6cyxjb25maWc6e29wdGlvbk1lcmdlU3RyYXRlZ2llczppfX09ZS5hcHBDb250ZXh0LGw9cy5nZXQodCk7bGV0IGM7cmV0dXJuIGw/Yz1sOnIubGVuZ3RofHxufHxvPyhjPXt9LHIubGVuZ3RoJiZyLmZvckVhY2goKGU9PmxyKGMsZSxpLCEwKSkpLGxyKGMsdCxpKSk6Yz10LHMuc2V0KHQsYyksY31mdW5jdGlvbiBscihlLHQsbixvPSExKXtjb25zdHttaXhpbnM6cixleHRlbmRzOnN9PXQ7cyYmbHIoZSxzLG4sITApLHImJnIuZm9yRWFjaCgodD0+bHIoZSx0LG4sITApKSk7Zm9yKGNvbnN0IGkgaW4gdClpZihvJiZcImV4cG9zZVwiPT09aSk7ZWxzZXtjb25zdCBvPWNyW2ldfHxuJiZuW2ldO2VbaV09bz9vKGVbaV0sdFtpXSk6dFtpXX1yZXR1cm4gZX1jb25zdCBjcj17ZGF0YTphcixwcm9wczpmcixlbWl0czpmcixtZXRob2RzOmZyLGNvbXB1dGVkOmZyLGJlZm9yZUNyZWF0ZTpwcixjcmVhdGVkOnByLGJlZm9yZU1vdW50OnByLG1vdW50ZWQ6cHIsYmVmb3JlVXBkYXRlOnByLHVwZGF0ZWQ6cHIsYmVmb3JlRGVzdHJveTpwcixiZWZvcmVVbm1vdW50OnByLGRlc3Ryb3llZDpwcix1bm1vdW50ZWQ6cHIsYWN0aXZhdGVkOnByLGRlYWN0aXZhdGVkOnByLGVycm9yQ2FwdHVyZWQ6cHIsc2VydmVyUHJlZmV0Y2g6cHIsY29tcG9uZW50czpmcixkaXJlY3RpdmVzOmZyLHdhdGNoOmZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuIHQ7aWYoIXQpcmV0dXJuIGU7Y29uc3Qgbj13KE9iamVjdC5jcmVhdGUobnVsbCksZSk7Zm9yKGNvbnN0IG8gaW4gdCluW29dPXByKGVbb10sdFtvXSk7cmV0dXJuIG59LHByb3ZpZGU6YXIsaW5qZWN0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZyKHVyKGUpLHVyKHQpKX19O2Z1bmN0aW9uIGFyKGUsdCl7cmV0dXJuIHQ/ZT9mdW5jdGlvbigpe3JldHVybiB3KEYoZSk/ZS5jYWxsKHRoaXMsdGhpcyk6ZSxGKHQpP3QuY2FsbCh0aGlzLHRoaXMpOnQpfTp0OmV9ZnVuY3Rpb24gdXIoZSl7aWYoRShlKSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl0W2Vbbl1dPWVbbl07cmV0dXJuIHR9cmV0dXJuIGV9ZnVuY3Rpb24gcHIoZSx0KXtyZXR1cm4gZT9bLi4ubmV3IFNldChbXS5jb25jYXQoZSx0KSldOnR9ZnVuY3Rpb24gZnIoZSx0KXtyZXR1cm4gZT93KHcoT2JqZWN0LmNyZWF0ZShudWxsKSxlKSx0KTp0fWZ1bmN0aW9uIGRyKGUsdCxuLG8pe2NvbnN0W3Isc109ZS5wcm9wc09wdGlvbnM7bGV0IGksbD0hMTtpZih0KWZvcihsZXQgYyBpbiB0KXtpZihVKGMpKWNvbnRpbnVlO2NvbnN0IGE9dFtjXTtsZXQgdTtyJiZOKHIsdT16KGMpKT9zJiZzLmluY2x1ZGVzKHUpPyhpfHwoaT17fSkpW3VdPWE6blt1XT1hOk5uKGUuZW1pdHNPcHRpb25zLGMpfHxjIGluIG8mJmE9PT1vW2NdfHwob1tjXT1hLGw9ITApfWlmKHMpe2NvbnN0IHQ9a3Qobiksbz1pfHx2O2ZvcihsZXQgaT0wO2k8cy5sZW5ndGg7aSsrKXtjb25zdCBsPXNbaV07bltsXT1ocihyLHQsbCxvW2xdLGUsIU4obyxsKSl9fXJldHVybiBsfWZ1bmN0aW9uIGhyKGUsdCxuLG8scixzKXtjb25zdCBpPWVbbl07aWYobnVsbCE9aSl7Y29uc3QgZT1OKGksXCJkZWZhdWx0XCIpO2lmKGUmJnZvaWQgMD09PW8pe2NvbnN0IGU9aS5kZWZhdWx0O2lmKGkudHlwZSE9PUZ1bmN0aW9uJiZGKGUpKXtjb25zdHtwcm9wc0RlZmF1bHRzOnN9PXI7biBpbiBzP289c1tuXTooa3Mociksbz1zW25dPWUuY2FsbChudWxsLHQpLFRzKCkpfWVsc2Ugbz1lfWlbMF0mJihzJiYhZT9vPSExOiFpWzFdfHxcIlwiIT09byYmbyE9PUcobil8fChvPSEwKSl9cmV0dXJuIG99ZnVuY3Rpb24gbXIoZSx0LG49ITEpe2NvbnN0IG89dC5wcm9wc0NhY2hlLHI9by5nZXQoZSk7aWYocilyZXR1cm4gcjtjb25zdCBzPWUucHJvcHMsaT17fSxsPVtdO2xldCBjPSExO2lmKCFGKGUpKXtjb25zdCBvPWU9PntjPSEwO2NvbnN0W24sb109bXIoZSx0LCEwKTt3KGksbiksbyYmbC5wdXNoKC4uLm8pfTshbiYmdC5taXhpbnMubGVuZ3RoJiZ0Lm1peGlucy5mb3JFYWNoKG8pLGUuZXh0ZW5kcyYmbyhlLmV4dGVuZHMpLGUubWl4aW5zJiZlLm1peGlucy5mb3JFYWNoKG8pfWlmKCFzJiYhYylyZXR1cm4gby5zZXQoZSx5KSx5O2lmKEUocykpZm9yKGxldCB1PTA7dTxzLmxlbmd0aDt1Kyspe2NvbnN0IGU9eihzW3VdKTtncihlKSYmKGlbZV09dil9ZWxzZSBpZihzKWZvcihjb25zdCB1IGluIHMpe2NvbnN0IGU9eih1KTtpZihncihlKSl7Y29uc3QgdD1zW3VdLG49aVtlXT1FKHQpfHxGKHQpP3t0eXBlOnR9OnQ7aWYobil7Y29uc3QgdD1fcihCb29sZWFuLG4udHlwZSksbz1fcihTdHJpbmcsbi50eXBlKTtuWzBdPXQ+LTEsblsxXT1vPDB8fHQ8bywodD4tMXx8TihuLFwiZGVmYXVsdFwiKSkmJmwucHVzaChlKX19fWNvbnN0IGE9W2ksbF07cmV0dXJuIG8uc2V0KGUsYSksYX1mdW5jdGlvbiBncihlKXtyZXR1cm5cIiRcIiE9PWVbMF19ZnVuY3Rpb24gdnIoZSl7Y29uc3QgdD1lJiZlLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7cmV0dXJuIHQ/dFsxXTpudWxsPT09ZT9cIm51bGxcIjpcIlwifWZ1bmN0aW9uIHlyKGUsdCl7cmV0dXJuIHZyKGUpPT09dnIodCl9ZnVuY3Rpb24gX3IoZSx0KXtyZXR1cm4gRSh0KT90LmZpbmRJbmRleCgodD0+eXIodCxlKSkpOkYodCkmJnlyKHQsZSk/MDotMX1jb25zdCBicj1lPT5cIl9cIj09PWVbMF18fFwiJHN0YWJsZVwiPT09ZSxTcj1lPT5FKGUpP2UubWFwKGdzKTpbZ3MoZSldLHhyPShlLHQsbik9PntpZih0Ll9uKXJldHVybiB0O2NvbnN0IG89QW4oKCguLi5lKT0+U3IodCguLi5lKSkpLG4pO3JldHVybiBvLl9jPSExLG99LENyPShlLHQsbik9Pntjb25zdCBvPWUuX2N0eDtmb3IoY29uc3QgciBpbiBlKXtpZihicihyKSljb250aW51ZTtjb25zdCBuPWVbcl07aWYoRihuKSl0W3JdPXhyKDAsbixvKTtlbHNlIGlmKG51bGwhPW4pe2NvbnN0IGU9U3Iobik7dFtyXT0oKT0+ZX19fSx3cj0oZSx0KT0+e2NvbnN0IG49U3IodCk7ZS5zbG90cy5kZWZhdWx0PSgpPT5ufTtmdW5jdGlvbiBrcigpe3JldHVybnthcHA6bnVsbCxjb25maWc6e2lzTmF0aXZlVGFnOmIscGVyZm9ybWFuY2U6ITEsZ2xvYmFsUHJvcGVydGllczp7fSxvcHRpb25NZXJnZVN0cmF0ZWdpZXM6e30sZXJyb3JIYW5kbGVyOnZvaWQgMCx3YXJuSGFuZGxlcjp2b2lkIDAsY29tcGlsZXJPcHRpb25zOnt9fSxtaXhpbnM6W10sY29tcG9uZW50czp7fSxkaXJlY3RpdmVzOnt9LHByb3ZpZGVzOk9iamVjdC5jcmVhdGUobnVsbCksb3B0aW9uc0NhY2hlOm5ldyBXZWFrTWFwLHByb3BzQ2FjaGU6bmV3IFdlYWtNYXAsZW1pdHNDYWNoZTpuZXcgV2Vha01hcH19bGV0IFRyPTA7ZnVuY3Rpb24gTnIoZSx0KXtyZXR1cm4gZnVuY3Rpb24obixvPW51bGwpe0Yobil8fChuPU9iamVjdC5hc3NpZ24oe30sbikpLG51bGw9PW98fE0obyl8fChvPW51bGwpO2NvbnN0IHI9a3IoKSxzPW5ldyBTZXQ7bGV0IGk9ITE7Y29uc3QgbD1yLmFwcD17X3VpZDpUcisrLF9jb21wb25lbnQ6bixfcHJvcHM6byxfY29udGFpbmVyOm51bGwsX2NvbnRleHQ6cixfaW5zdGFuY2U6bnVsbCx2ZXJzaW9uOm9pLGdldCBjb25maWcoKXtyZXR1cm4gci5jb25maWd9LHNldCBjb25maWcoZSl7fSx1c2U6KGUsLi4udCk9PihzLmhhcyhlKXx8KGUmJkYoZS5pbnN0YWxsKT8ocy5hZGQoZSksZS5pbnN0YWxsKGwsLi4udCkpOkYoZSkmJihzLmFkZChlKSxlKGwsLi4udCkpKSxsKSxtaXhpbjplPT4oci5taXhpbnMuaW5jbHVkZXMoZSl8fHIubWl4aW5zLnB1c2goZSksbCksY29tcG9uZW50OihlLHQpPT50PyhyLmNvbXBvbmVudHNbZV09dCxsKTpyLmNvbXBvbmVudHNbZV0sZGlyZWN0aXZlOihlLHQpPT50PyhyLmRpcmVjdGl2ZXNbZV09dCxsKTpyLmRpcmVjdGl2ZXNbZV0sbW91bnQocyxjLGEpe2lmKCFpKXtjb25zdCB1PXVzKG4sbyk7cmV0dXJuIHUuYXBwQ29udGV4dD1yLGMmJnQ/dCh1LHMpOmUodSxzLGEpLGk9ITAsbC5fY29udGFpbmVyPXMscy5fX3Z1ZV9hcHBfXz1sLFZzKHUuY29tcG9uZW50KXx8dS5jb21wb25lbnQucHJveHl9fSx1bm1vdW50KCl7aSYmKGUobnVsbCxsLl9jb250YWluZXIpLGRlbGV0ZSBsLl9jb250YWluZXIuX192dWVfYXBwX18pfSxwcm92aWRlOihlLHQpPT4oci5wcm92aWRlc1tlXT10LGwpfTtyZXR1cm4gbH19ZnVuY3Rpb24gRXIoZSx0LG4sbyxyPSExKXtpZihFKGUpKXJldHVybiB2b2lkIGUuZm9yRWFjaCgoKGUscyk9PkVyKGUsdCYmKEUodCk/dFtzXTp0KSxuLG8scikpKTtpZihtbyhvKSYmIXIpcmV0dXJuO2NvbnN0IHM9NCZvLnNoYXBlRmxhZz9WcyhvLmNvbXBvbmVudCl8fG8uY29tcG9uZW50LnByb3h5Om8uZWwsaT1yP251bGw6cyx7aTpsLHI6Y309ZSxhPXQmJnQucix1PWwucmVmcz09PXY/bC5yZWZzPXt9OmwucmVmcyxwPWwuc2V0dXBTdGF0ZTtpZihudWxsIT1hJiZhIT09YyYmKFAoYSk/KHVbYV09bnVsbCxOKHAsYSkmJihwW2FdPW51bGwpKTpSdChhKSYmKGEudmFsdWU9bnVsbCkpLEYoYykpWXQoYyxsLDEyLFtpLHVdKTtlbHNle2NvbnN0IHQ9UChjKSxvPVJ0KGMpO2lmKHR8fG8pe2NvbnN0IGw9KCk9PntpZihlLmYpe2NvbnN0IG49dD91W2NdOmMudmFsdWU7cj9FKG4pJiZrKG4scyk6RShuKT9uLmluY2x1ZGVzKHMpfHxuLnB1c2gocyk6dD8odVtjXT1bc10sTihwLGMpJiYocFtjXT11W2NdKSk6KGMudmFsdWU9W3NdLGUuayYmKHVbZS5rXT1jLnZhbHVlKSl9ZWxzZSB0Pyh1W2NdPWksTihwLGMpJiYocFtjXT1pKSk6byYmKGMudmFsdWU9aSxlLmsmJih1W2Uua109aSkpfTtpPyhsLmlkPS0xLFByKGwsbikpOmwoKX19fWxldCAkcj0hMTtjb25zdCBPcj1lPT4vc3ZnLy50ZXN0KGUubmFtZXNwYWNlVVJJKSYmXCJmb3JlaWduT2JqZWN0XCIhPT1lLnRhZ05hbWUsUnI9ZT0+OD09PWUubm9kZVR5cGU7ZnVuY3Rpb24gRnIoZSl7Y29uc3R7bXQ6dCxwOm4sbzp7cGF0Y2hQcm9wOm8sY3JlYXRlVGV4dDpyLG5leHRTaWJsaW5nOnMscGFyZW50Tm9kZTppLHJlbW92ZTpsLGluc2VydDpjLGNyZWF0ZUNvbW1lbnQ6YX19PWUsdT0obixvLGwsYSxnLHY9ITEpPT57Y29uc3QgeT1ScihuKSYmXCJbXCI9PT1uLmRhdGEsXz0oKT0+aChuLG8sbCxhLGcseSkse3R5cGU6YixyZWY6UyxzaGFwZUZsYWc6eCxwYXRjaEZsYWc6Q309byx3PW4ubm9kZVR5cGU7by5lbD1uLC0yPT09QyYmKHY9ITEsby5keW5hbWljQ2hpbGRyZW49bnVsbCk7bGV0IGs9bnVsbDtzd2l0Y2goYil7Y2FzZSB6cjozIT09dz9cIlwiPT09by5jaGlsZHJlbj8oYyhvLmVsPXIoXCJcIiksaShuKSxuKSxrPW4pOms9XygpOihuLmRhdGEhPT1vLmNoaWxkcmVuJiYoJHI9ITAsbi5kYXRhPW8uY2hpbGRyZW4pLGs9cyhuKSk7YnJlYWs7Y2FzZSBLcjprPTghPT13fHx5P18oKTpzKG4pO2JyZWFrO2Nhc2UgR3I6aWYoMT09PXd8fDM9PT13KXtrPW47Y29uc3QgZT0hby5jaGlsZHJlbi5sZW5ndGg7Zm9yKGxldCB0PTA7dDxvLnN0YXRpY0NvdW50O3QrKyllJiYoby5jaGlsZHJlbis9MT09PWsubm9kZVR5cGU/ay5vdXRlckhUTUw6ay5kYXRhKSx0PT09by5zdGF0aWNDb3VudC0xJiYoby5hbmNob3I9ayksaz1zKGspO3JldHVybiBrfWs9XygpO2JyZWFrO2Nhc2UgV3I6az15P2QobixvLGwsYSxnLHYpOl8oKTticmVhaztkZWZhdWx0OmlmKDEmeClrPTEhPT13fHxvLnR5cGUudG9Mb3dlckNhc2UoKSE9PW4udGFnTmFtZS50b0xvd2VyQ2FzZSgpP18oKTpwKG4sbyxsLGEsZyx2KTtlbHNlIGlmKDYmeCl7by5zbG90U2NvcGVJZHM9Zztjb25zdCBlPWkobik7aWYodChvLGUsbnVsbCxsLGEsT3IoZSksdiksaz15P20obik6cyhuKSxrJiZScihrKSYmXCJ0ZWxlcG9ydCBlbmRcIj09PWsuZGF0YSYmKGs9cyhrKSksbW8obykpe2xldCB0O3k/KHQ9dXMoV3IpLHQuYW5jaG9yPWs/ay5wcmV2aW91c1NpYmxpbmc6ZS5sYXN0Q2hpbGQpOnQ9Mz09PW4ubm9kZVR5cGU/ZHMoXCJcIik6dXMoXCJkaXZcIiksdC5lbD1uLG8uY29tcG9uZW50LnN1YlRyZWU9dH19ZWxzZSA2NCZ4P2s9OCE9PXc/XygpOm8udHlwZS5oeWRyYXRlKG4sbyxsLGEsZyx2LGUsZik6MTI4JngmJihrPW8udHlwZS5oeWRyYXRlKG4sbyxsLGEsT3IoaShuKSksZyx2LGUsdSkpfXJldHVybiBudWxsIT1TJiZFcihTLG51bGwsYSxvKSxrfSxwPShlLHQsbixyLHMsaSk9PntpPWl8fCEhdC5keW5hbWljQ2hpbGRyZW47Y29uc3R7dHlwZTpjLHByb3BzOmEscGF0Y2hGbGFnOnUsc2hhcGVGbGFnOnAsZGlyczpkfT10LGg9XCJpbnB1dFwiPT09YyYmZHx8XCJvcHRpb25cIj09PWM7aWYoaHx8LTEhPT11KXtpZihkJiZqbyh0LG51bGwsbixcImNyZWF0ZWRcIiksYSlpZihofHwhaXx8NDgmdSlmb3IoY29uc3QgdCBpbiBhKShoJiZ0LmVuZHNXaXRoKFwidmFsdWVcIil8fHgodCkmJiFVKHQpKSYmbyhlLHQsbnVsbCxhW3RdLCExLHZvaWQgMCxuKTtlbHNlIGEub25DbGljayYmbyhlLFwib25DbGlja1wiLG51bGwsYS5vbkNsaWNrLCExLHZvaWQgMCxuKTtsZXQgYztpZigoYz1hJiZhLm9uVm5vZGVCZWZvcmVNb3VudCkmJmJzKGMsbix0KSxkJiZqbyh0LG51bGwsbixcImJlZm9yZU1vdW50XCIpLCgoYz1hJiZhLm9uVm5vZGVNb3VudGVkKXx8ZCkmJnpuKCgoKT0+e2MmJmJzKGMsbix0KSxkJiZqbyh0LG51bGwsbixcIm1vdW50ZWRcIil9KSxyKSwxNiZwJiYoIWF8fCFhLmlubmVySFRNTCYmIWEudGV4dENvbnRlbnQpKXtsZXQgbz1mKGUuZmlyc3RDaGlsZCx0LGUsbixyLHMsaSk7Zm9yKDtvOyl7JHI9ITA7Y29uc3QgZT1vO289by5uZXh0U2libGluZyxsKGUpfX1lbHNlIDgmcCYmZS50ZXh0Q29udGVudCE9PXQuY2hpbGRyZW4mJigkcj0hMCxlLnRleHRDb250ZW50PXQuY2hpbGRyZW4pfXJldHVybiBlLm5leHRTaWJsaW5nfSxmPShlLHQsbyxyLHMsaSxsKT0+e2w9bHx8ISF0LmR5bmFtaWNDaGlsZHJlbjtjb25zdCBjPXQuY2hpbGRyZW4sYT1jLmxlbmd0aDtmb3IobGV0IHA9MDtwPGE7cCsrKXtjb25zdCB0PWw/Y1twXTpjW3BdPWdzKGNbcF0pO2lmKGUpZT11KGUsdCxyLHMsaSxsKTtlbHNle2lmKHQudHlwZT09PXpyJiYhdC5jaGlsZHJlbiljb250aW51ZTskcj0hMCxuKG51bGwsdCxvLG51bGwscixzLE9yKG8pLGkpfX1yZXR1cm4gZX0sZD0oZSx0LG4sbyxyLGwpPT57Y29uc3R7c2xvdFNjb3BlSWRzOnV9PXQ7dSYmKHI9cj9yLmNvbmNhdCh1KTp1KTtjb25zdCBwPWkoZSksZD1mKHMoZSksdCxwLG4sbyxyLGwpO3JldHVybiBkJiZScihkKSYmXCJdXCI9PT1kLmRhdGE/cyh0LmFuY2hvcj1kKTooJHI9ITAsYyh0LmFuY2hvcj1hKFwiXVwiKSxwLGQpLGQpfSxoPShlLHQsbyxyLGMsYSk9PntpZigkcj0hMCx0LmVsPW51bGwsYSl7Y29uc3QgdD1tKGUpO2Zvcig7Oyl7Y29uc3Qgbj1zKGUpO2lmKCFufHxuPT09dClicmVhaztsKG4pfX1jb25zdCB1PXMoZSkscD1pKGUpO3JldHVybiBsKGUpLG4obnVsbCx0LHAsdSxvLHIsT3IocCksYyksdX0sbT1lPT57bGV0IHQ9MDtmb3IoO2U7KWlmKChlPXMoZSkpJiZScihlKSYmKFwiW1wiPT09ZS5kYXRhJiZ0KyssXCJdXCI9PT1lLmRhdGEpKXtpZigwPT09dClyZXR1cm4gcyhlKTt0LS19cmV0dXJuIGV9O3JldHVyblsoZSx0KT0+e2lmKCF0Lmhhc0NoaWxkTm9kZXMoKSlyZXR1cm4gbihudWxsLGUsdCksX24oKSx2b2lkKHQuX3Zub2RlPWUpOyRyPSExLHUodC5maXJzdENoaWxkLGUsbnVsbCxudWxsLG51bGwpLF9uKCksdC5fdm5vZGU9ZSwkciYmY29uc29sZS5lcnJvcihcIkh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuXCIpfSx1XX1jb25zdCBQcj16bjtmdW5jdGlvbiBBcihlKXtyZXR1cm4gVnIoZSl9ZnVuY3Rpb24gTXIoZSl7cmV0dXJuIFZyKGUsRnIpfWZ1bmN0aW9uIFZyKGUsdCl7KGVlfHwoZWU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOnt9KSkuX19WVUVfXz0hMDtjb25zdHtpbnNlcnQ6bixyZW1vdmU6byxwYXRjaFByb3A6cixjcmVhdGVFbGVtZW50OnMsY3JlYXRlVGV4dDppLGNyZWF0ZUNvbW1lbnQ6bCxzZXRUZXh0OmMsc2V0RWxlbWVudFRleHQ6YSxwYXJlbnROb2RlOnUsbmV4dFNpYmxpbmc6cCxzZXRTY29wZUlkOmY9XyxjbG9uZU5vZGU6ZCxpbnNlcnRTdGF0aWNDb250ZW50Omh9PWUsbT0oZSx0LG4sbz1udWxsLHI9bnVsbCxzPW51bGwsaT0hMSxsPW51bGwsYz0hIXQuZHluYW1pY0NoaWxkcmVuKT0+e2lmKGU9PT10KXJldHVybjtlJiYhcnMoZSx0KSYmKG89WShlKSxIKGUscixzLCEwKSxlPW51bGwpLC0yPT09dC5wYXRjaEZsYWcmJihjPSExLHQuZHluYW1pY0NoaWxkcmVuPW51bGwpO2NvbnN0e3R5cGU6YSxyZWY6dSxzaGFwZUZsYWc6cH09dDtzd2l0Y2goYSl7Y2FzZSB6cjpnKGUsdCxuLG8pO2JyZWFrO2Nhc2UgS3I6YihlLHQsbixvKTticmVhaztjYXNlIEdyOm51bGw9PWUmJlModCxuLG8saSk7YnJlYWs7Y2FzZSBXcjpSKGUsdCxuLG8scixzLGksbCxjKTticmVhaztkZWZhdWx0OjEmcD94KGUsdCxuLG8scixzLGksbCxjKTo2JnA/RihlLHQsbixvLHIscyxpLGwsYyk6KDY0JnB8fDEyOCZwKSYmYS5wcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLHRlKX1udWxsIT11JiZyJiZFcih1LGUmJmUucmVmLHMsdHx8ZSwhdCl9LGc9KGUsdCxvLHIpPT57aWYobnVsbD09ZSluKHQuZWw9aSh0LmNoaWxkcmVuKSxvLHIpO2Vsc2V7Y29uc3Qgbj10LmVsPWUuZWw7dC5jaGlsZHJlbiE9PWUuY2hpbGRyZW4mJmMobix0LmNoaWxkcmVuKX19LGI9KGUsdCxvLHIpPT57bnVsbD09ZT9uKHQuZWw9bCh0LmNoaWxkcmVufHxcIlwiKSxvLHIpOnQuZWw9ZS5lbH0sUz0oZSx0LG4sbyk9PntbZS5lbCxlLmFuY2hvcl09aChlLmNoaWxkcmVuLHQsbixvLGUuZWwsZS5hbmNob3IpfSx4PShlLHQsbixvLHIscyxpLGwsYyk9PntpPWl8fFwic3ZnXCI9PT10LnR5cGUsbnVsbD09ZT9DKHQsbixvLHIscyxpLGwsYyk6RShlLHQscixzLGksbCxjKX0sQz0oZSx0LG8saSxsLGMsdSxwKT0+e2xldCBmLGg7Y29uc3R7dHlwZTptLHByb3BzOmcsc2hhcGVGbGFnOnYsdHJhbnNpdGlvbjp5LHBhdGNoRmxhZzpfLGRpcnM6Yn09ZTtpZihlLmVsJiZ2b2lkIDAhPT1kJiYtMT09PV8pZj1lLmVsPWQoZS5lbCk7ZWxzZXtpZihmPWUuZWw9cyhlLnR5cGUsYyxnJiZnLmlzLGcpLDgmdj9hKGYsZS5jaGlsZHJlbik6MTYmdiYmVChlLmNoaWxkcmVuLGYsbnVsbCxpLGwsYyYmXCJmb3JlaWduT2JqZWN0XCIhPT1tLHUscCksYiYmam8oZSxudWxsLGksXCJjcmVhdGVkXCIpLGcpe2Zvcihjb25zdCB0IGluIGcpXCJ2YWx1ZVwiPT09dHx8VSh0KXx8cihmLHQsbnVsbCxnW3RdLGMsZS5jaGlsZHJlbixpLGwsSik7XCJ2YWx1ZVwiaW4gZyYmcihmLFwidmFsdWVcIixudWxsLGcudmFsdWUpLChoPWcub25Wbm9kZUJlZm9yZU1vdW50KSYmYnMoaCxpLGUpfWsoZixlLGUuc2NvcGVJZCx1LGkpfWImJmpvKGUsbnVsbCxpLFwiYmVmb3JlTW91bnRcIik7Y29uc3QgUz0oIWx8fGwmJiFsLnBlbmRpbmdCcmFuY2gpJiZ5JiYheS5wZXJzaXN0ZWQ7UyYmeS5iZWZvcmVFbnRlcihmKSxuKGYsdCxvKSwoKGg9ZyYmZy5vblZub2RlTW91bnRlZCl8fFN8fGIpJiZQcigoKCk9PntoJiZicyhoLGksZSksUyYmeS5lbnRlcihmKSxiJiZqbyhlLG51bGwsaSxcIm1vdW50ZWRcIil9KSxsKX0saz0oZSx0LG4sbyxyKT0+e2lmKG4mJmYoZSxuKSxvKWZvcihsZXQgcz0wO3M8by5sZW5ndGg7cysrKWYoZSxvW3NdKTtpZihyKXtpZih0PT09ci5zdWJUcmVlKXtjb25zdCB0PXIudm5vZGU7ayhlLHQsdC5zY29wZUlkLHQuc2xvdFNjb3BlSWRzLHIucGFyZW50KX19fSxUPShlLHQsbixvLHIscyxpLGwsYz0wKT0+e2ZvcihsZXQgYT1jO2E8ZS5sZW5ndGg7YSsrKXtjb25zdCBjPWVbYV09bD92cyhlW2FdKTpncyhlW2FdKTttKG51bGwsYyx0LG4sbyxyLHMsaSxsKX19LEU9KGUsdCxuLG8scyxpLGwpPT57Y29uc3QgYz10LmVsPWUuZWw7bGV0e3BhdGNoRmxhZzp1LGR5bmFtaWNDaGlsZHJlbjpwLGRpcnM6Zn09dDt1fD0xNiZlLnBhdGNoRmxhZztjb25zdCBkPWUucHJvcHN8fHYsaD10LnByb3BzfHx2O2xldCBtO24mJklyKG4sITEpLChtPWgub25Wbm9kZUJlZm9yZVVwZGF0ZSkmJmJzKG0sbix0LGUpLGYmJmpvKHQsZSxuLFwiYmVmb3JlVXBkYXRlXCIpLG4mJklyKG4sITApO2NvbnN0IGc9cyYmXCJmb3JlaWduT2JqZWN0XCIhPT10LnR5cGU7aWYocD8kKGUuZHluYW1pY0NoaWxkcmVuLHAsYyxuLG8sZyxpKTpsfHxCKGUsdCxjLG51bGwsbixvLGcsaSwhMSksdT4wKXtpZigxNiZ1KU8oYyx0LGQsaCxuLG8scyk7ZWxzZSBpZigyJnUmJmQuY2xhc3MhPT1oLmNsYXNzJiZyKGMsXCJjbGFzc1wiLG51bGwsaC5jbGFzcyxzKSw0JnUmJnIoYyxcInN0eWxlXCIsZC5zdHlsZSxoLnN0eWxlLHMpLDgmdSl7Y29uc3QgaT10LmR5bmFtaWNQcm9wcztmb3IobGV0IHQ9MDt0PGkubGVuZ3RoO3QrKyl7Y29uc3QgbD1pW3RdLGE9ZFtsXSx1PWhbbF07dT09PWEmJlwidmFsdWVcIiE9PWx8fHIoYyxsLGEsdSxzLGUuY2hpbGRyZW4sbixvLEopfX0xJnUmJmUuY2hpbGRyZW4hPT10LmNoaWxkcmVuJiZhKGMsdC5jaGlsZHJlbil9ZWxzZSBsfHxudWxsIT1wfHxPKGMsdCxkLGgsbixvLHMpOygobT1oLm9uVm5vZGVVcGRhdGVkKXx8ZikmJlByKCgoKT0+e20mJmJzKG0sbix0LGUpLGYmJmpvKHQsZSxuLFwidXBkYXRlZFwiKX0pLG8pfSwkPShlLHQsbixvLHIscyxpKT0+e2ZvcihsZXQgbD0wO2w8dC5sZW5ndGg7bCsrKXtjb25zdCBjPWVbbF0sYT10W2xdLHA9Yy5lbCYmKGMudHlwZT09PVdyfHwhcnMoYyxhKXx8NzAmYy5zaGFwZUZsYWcpP3UoYy5lbCk6bjttKGMsYSxwLG51bGwsbyxyLHMsaSwhMCl9fSxPPShlLHQsbixvLHMsaSxsKT0+e2lmKG4hPT1vKXtmb3IoY29uc3QgYyBpbiBvKXtpZihVKGMpKWNvbnRpbnVlO2NvbnN0IGE9b1tjXSx1PW5bY107YSE9PXUmJlwidmFsdWVcIiE9PWMmJnIoZSxjLHUsYSxsLHQuY2hpbGRyZW4scyxpLEopfWlmKG4hPT12KWZvcihjb25zdCBjIGluIG4pVShjKXx8YyBpbiBvfHxyKGUsYyxuW2NdLG51bGwsbCx0LmNoaWxkcmVuLHMsaSxKKTtcInZhbHVlXCJpbiBvJiZyKGUsXCJ2YWx1ZVwiLG4udmFsdWUsby52YWx1ZSl9fSxSPShlLHQsbyxyLHMsbCxjLGEsdSk9Pntjb25zdCBwPXQuZWw9ZT9lLmVsOmkoXCJcIiksZj10LmFuY2hvcj1lP2UuYW5jaG9yOmkoXCJcIik7bGV0e3BhdGNoRmxhZzpkLGR5bmFtaWNDaGlsZHJlbjpoLHNsb3RTY29wZUlkczptfT10O20mJihhPWE/YS5jb25jYXQobSk6bSksbnVsbD09ZT8obihwLG8sciksbihmLG8sciksVCh0LmNoaWxkcmVuLG8sZixzLGwsYyxhLHUpKTpkPjAmJjY0JmQmJmgmJmUuZHluYW1pY0NoaWxkcmVuPygkKGUuZHluYW1pY0NoaWxkcmVuLGgsbyxzLGwsYyxhKSwobnVsbCE9dC5rZXl8fHMmJnQ9PT1zLnN1YlRyZWUpJiZCcihlLHQsITApKTpCKGUsdCxvLGYscyxsLGMsYSx1KX0sRj0oZSx0LG4sbyxyLHMsaSxsLGMpPT57dC5zbG90U2NvcGVJZHM9bCxudWxsPT1lPzUxMiZ0LnNoYXBlRmxhZz9yLmN0eC5hY3RpdmF0ZSh0LG4sbyxpLGMpOlAodCxuLG8scixzLGksYyk6QShlLHQsYyl9LFA9KGUsdCxuLG8scixzLGkpPT57Y29uc3QgbD1lLmNvbXBvbmVudD1mdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLnR5cGUscj0odD90LmFwcENvbnRleHQ6ZS5hcHBDb250ZXh0KXx8U3Mscz17dWlkOnhzKyssdm5vZGU6ZSx0eXBlOm8scGFyZW50OnQsYXBwQ29udGV4dDpyLHJvb3Q6bnVsbCxuZXh0Om51bGwsc3ViVHJlZTpudWxsLGVmZmVjdDpudWxsLHVwZGF0ZTpudWxsLHNjb3BlOm5ldyBuZSghMCkscmVuZGVyOm51bGwscHJveHk6bnVsbCxleHBvc2VkOm51bGwsZXhwb3NlUHJveHk6bnVsbCx3aXRoUHJveHk6bnVsbCxwcm92aWRlczp0P3QucHJvdmlkZXM6T2JqZWN0LmNyZWF0ZShyLnByb3ZpZGVzKSxhY2Nlc3NDYWNoZTpudWxsLHJlbmRlckNhY2hlOltdLGNvbXBvbmVudHM6bnVsbCxkaXJlY3RpdmVzOm51bGwscHJvcHNPcHRpb25zOm1yKG8sciksZW1pdHNPcHRpb25zOlRuKG8sciksZW1pdDpudWxsLGVtaXR0ZWQ6bnVsbCxwcm9wc0RlZmF1bHRzOnYsaW5oZXJpdEF0dHJzOm8uaW5oZXJpdEF0dHJzLGN0eDp2LGRhdGE6dixwcm9wczp2LGF0dHJzOnYsc2xvdHM6dixyZWZzOnYsc2V0dXBTdGF0ZTp2LHNldHVwQ29udGV4dDpudWxsLHN1c3BlbnNlOm4sc3VzcGVuc2VJZDpuP24ucGVuZGluZ0lkOjAsYXN5bmNEZXA6bnVsbCxhc3luY1Jlc29sdmVkOiExLGlzTW91bnRlZDohMSxpc1VubW91bnRlZDohMSxpc0RlYWN0aXZhdGVkOiExLGJjOm51bGwsYzpudWxsLGJtOm51bGwsbTpudWxsLGJ1Om51bGwsdTpudWxsLHVtOm51bGwsYnVtOm51bGwsZGE6bnVsbCxhOm51bGwscnRnOm51bGwscnRjOm51bGwsZWM6bnVsbCxzcDpudWxsfTtzLmN0eD17XzpzfSxzLnJvb3Q9dD90LnJvb3Q6cyxzLmVtaXQ9a24uYmluZChudWxsLHMpLGUuY2UmJmUuY2Uocyk7cmV0dXJuIHN9KGUsbyxyKTtpZih5byhlKSYmKGwuY3R4LnJlbmRlcmVyPXRlKSxmdW5jdGlvbihlLHQ9ITEpe09zPXQ7Y29uc3R7cHJvcHM6bixjaGlsZHJlbjpvfT1lLnZub2RlLHI9TnMoZSk7KGZ1bmN0aW9uKGUsdCxuLG89ITEpe2NvbnN0IHI9e30scz17fTtRKHMsaXMsMSksZS5wcm9wc0RlZmF1bHRzPU9iamVjdC5jcmVhdGUobnVsbCksZHIoZSx0LHIscyk7Zm9yKGNvbnN0IGkgaW4gZS5wcm9wc09wdGlvbnNbMF0paSBpbiByfHwocltpXT12b2lkIDApO2UucHJvcHM9bj9vP3I6dnQocik6ZS50eXBlLnByb3BzP3I6cyxlLmF0dHJzPXN9KShlLG4scix0KSwoKGUsdCk9PntpZigzMiZlLnZub2RlLnNoYXBlRmxhZyl7Y29uc3Qgbj10Ll87bj8oZS5zbG90cz1rdCh0KSxRKHQsXCJfXCIsbikpOkNyKHQsZS5zbG90cz17fSl9ZWxzZSBlLnNsb3RzPXt9LHQmJndyKGUsdCk7UShlLnNsb3RzLGlzLDEpfSkoZSxvKTtjb25zdCBzPXI/ZnVuY3Rpb24oZSx0KXtjb25zdCBuPWUudHlwZTtlLmFjY2Vzc0NhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksZS5wcm94eT1UdChuZXcgUHJveHkoZS5jdHgsZXIpKTtjb25zdHtzZXR1cDpvfT1uO2lmKG8pe2NvbnN0IG49ZS5zZXR1cENvbnRleHQ9by5sZW5ndGg+MT9NcyhlKTpudWxsO2tzKGUpLHhlKCk7Y29uc3Qgcj1ZdChvLGUsMCxbZS5wcm9wcyxuXSk7aWYoQ2UoKSxUcygpLFYocikpe2lmKHIudGhlbihUcyxUcyksdClyZXR1cm4gci50aGVuKChuPT57UnMoZSxuLHQpfSkpLmNhdGNoKCh0PT57UXQodCxlLDApfSkpO2UuYXN5bmNEZXA9cn1lbHNlIFJzKGUscix0KX1lbHNlIEFzKGUsdCl9KGUsdCk6dm9pZCAwO09zPSExfShsKSxsLmFzeW5jRGVwKXtpZihyJiZyLnJlZ2lzdGVyRGVwKGwsTSksIWUuZWwpe2NvbnN0IGU9bC5zdWJUcmVlPXVzKEtyKTtiKG51bGwsZSx0LG4pfX1lbHNlIE0obCxlLHQsbixyLHMsaSl9LEE9KGUsdCxuKT0+e2NvbnN0IG89dC5jb21wb25lbnQ9ZS5jb21wb25lbnQ7aWYoZnVuY3Rpb24oZSx0LG4pe2NvbnN0e3Byb3BzOm8sY2hpbGRyZW46cixjb21wb25lbnQ6c309ZSx7cHJvcHM6aSxjaGlsZHJlbjpsLHBhdGNoRmxhZzpjfT10LGE9cy5lbWl0c09wdGlvbnM7aWYodC5kaXJzfHx0LnRyYW5zaXRpb24pcmV0dXJuITA7aWYoIShuJiZjPj0wKSlyZXR1cm4hKCFyJiYhbHx8bCYmbC4kc3RhYmxlKXx8byE9PWkmJihvPyFpfHxCbihvLGksYSk6ISFpKTtpZigxMDI0JmMpcmV0dXJuITA7aWYoMTYmYylyZXR1cm4gbz9CbihvLGksYSk6ISFpO2lmKDgmYyl7Y29uc3QgZT10LmR5bmFtaWNQcm9wcztmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3Qgbj1lW3RdO2lmKGlbbl0hPT1vW25dJiYhTm4oYSxuKSlyZXR1cm4hMH19cmV0dXJuITF9KGUsdCxuKSl7aWYoby5hc3luY0RlcCYmIW8uYXN5bmNSZXNvbHZlZClyZXR1cm4gdm9pZCBJKG8sdCxuKTtvLm5leHQ9dCxmdW5jdGlvbihlKXtjb25zdCB0PXRuLmluZGV4T2YoZSk7dD5ubiYmdG4uc3BsaWNlKHQsMSl9KG8udXBkYXRlKSxvLnVwZGF0ZSgpfWVsc2UgdC5lbD1lLmVsLG8udm5vZGU9dH0sTT0oZSx0LG4sbyxyLHMsaSk9Pntjb25zdCBsPWUuZWZmZWN0PW5ldyBnZSgoKCk9PntpZihlLmlzTW91bnRlZCl7bGV0IHQse25leHQ6bixidTpvLHU6bCxwYXJlbnQ6Yyx2bm9kZTphfT1lLHA9bjtJcihlLCExKSxuPyhuLmVsPWEuZWwsSShlLG4saSkpOm49YSxvJiZaKG8pLCh0PW4ucHJvcHMmJm4ucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkmJmJzKHQsYyxuLGEpLElyKGUsITApO2NvbnN0IGY9TW4oZSksZD1lLnN1YlRyZWU7ZS5zdWJUcmVlPWYsbShkLGYsdShkLmVsKSxZKGQpLGUscixzKSxuLmVsPWYuZWwsbnVsbD09PXAmJkxuKGUsZi5lbCksbCYmUHIobCxyKSwodD1uLnByb3BzJiZuLnByb3BzLm9uVm5vZGVVcGRhdGVkKSYmUHIoKCgpPT5icyh0LGMsbixhKSkscil9ZWxzZXtsZXQgaTtjb25zdHtlbDpsLHByb3BzOmN9PXQse2JtOmEsbTp1LHBhcmVudDpwfT1lLGY9bW8odCk7aWYoSXIoZSwhMSksYSYmWihhKSwhZiYmKGk9YyYmYy5vblZub2RlQmVmb3JlTW91bnQpJiZicyhpLHAsdCksSXIoZSwhMCksbCYmcmUpe2NvbnN0IG49KCk9PntlLnN1YlRyZWU9TW4oZSkscmUobCxlLnN1YlRyZWUsZSxyLG51bGwpfTtmP3QudHlwZS5fX2FzeW5jTG9hZGVyKCkudGhlbigoKCk9PiFlLmlzVW5tb3VudGVkJiZuKCkpKTpuKCl9ZWxzZXtjb25zdCBpPWUuc3ViVHJlZT1NbihlKTttKG51bGwsaSxuLG8sZSxyLHMpLHQuZWw9aS5lbH1pZih1JiZQcih1LHIpLCFmJiYoaT1jJiZjLm9uVm5vZGVNb3VudGVkKSl7Y29uc3QgZT10O1ByKCgoKT0+YnMoaSxwLGUpKSxyKX0oMjU2JnQuc2hhcGVGbGFnfHxwJiZtbyhwLnZub2RlKSYmMjU2JnAudm5vZGUuc2hhcGVGbGFnKSYmZS5hJiZQcihlLmEsciksZS5pc01vdW50ZWQ9ITAsdD1uPW89bnVsbH19KSwoKCk9PmhuKGMpKSxlLnNjb3BlKSxjPWUudXBkYXRlPSgpPT5sLnJ1bigpO2MuaWQ9ZS51aWQsSXIoZSwhMCksYygpfSxJPShlLHQsbik9Pnt0LmNvbXBvbmVudD1lO2NvbnN0IG89ZS52bm9kZS5wcm9wcztlLnZub2RlPXQsZS5uZXh0PW51bGwsZnVuY3Rpb24oZSx0LG4sbyl7Y29uc3R7cHJvcHM6cixhdHRyczpzLHZub2RlOntwYXRjaEZsYWc6aX19PWUsbD1rdChyKSxbY109ZS5wcm9wc09wdGlvbnM7bGV0IGE9ITE7aWYoIShvfHxpPjApfHwxNiZpKXtsZXQgbztkcihlLHQscixzKSYmKGE9ITApO2Zvcihjb25zdCBzIGluIGwpdCYmKE4odCxzKXx8KG89RyhzKSkhPT1zJiZOKHQsbykpfHwoYz8hbnx8dm9pZCAwPT09bltzXSYmdm9pZCAwPT09bltvXXx8KHJbc109aHIoYyxsLHMsdm9pZCAwLGUsITApKTpkZWxldGUgcltzXSk7aWYocyE9PWwpZm9yKGNvbnN0IGUgaW4gcyl0JiZOKHQsZSl8fChkZWxldGUgc1tlXSxhPSEwKX1lbHNlIGlmKDgmaSl7Y29uc3Qgbj1lLnZub2RlLmR5bmFtaWNQcm9wcztmb3IobGV0IG89MDtvPG4ubGVuZ3RoO28rKyl7bGV0IGk9bltvXTtpZihObihlLmVtaXRzT3B0aW9ucyxpKSljb250aW51ZTtjb25zdCB1PXRbaV07aWYoYylpZihOKHMsaSkpdSE9PXNbaV0mJihzW2ldPXUsYT0hMCk7ZWxzZXtjb25zdCB0PXooaSk7clt0XT1ocihjLGwsdCx1LGUsITEpfWVsc2UgdSE9PXNbaV0mJihzW2ldPXUsYT0hMCl9fWEmJlRlKGUsXCJzZXRcIixcIiRhdHRyc1wiKX0oZSx0LnByb3BzLG8sbiksKChlLHQsbik9Pntjb25zdHt2bm9kZTpvLHNsb3RzOnJ9PWU7bGV0IHM9ITAsaT12O2lmKDMyJm8uc2hhcGVGbGFnKXtjb25zdCBlPXQuXztlP24mJjE9PT1lP3M9ITE6KHcocix0KSxufHwxIT09ZXx8ZGVsZXRlIHIuXyk6KHM9IXQuJHN0YWJsZSxDcih0LHIpKSxpPXR9ZWxzZSB0JiYod3IoZSx0KSxpPXtkZWZhdWx0OjF9KTtpZihzKWZvcihjb25zdCBsIGluIHIpYnIobCl8fGwgaW4gaXx8ZGVsZXRlIHJbbF19KShlLHQuY2hpbGRyZW4sbikseGUoKSx5bih2b2lkIDAsZS51cGRhdGUpLENlKCl9LEI9KGUsdCxuLG8scixzLGksbCxjPSExKT0+e2NvbnN0IHU9ZSYmZS5jaGlsZHJlbixwPWU/ZS5zaGFwZUZsYWc6MCxmPXQuY2hpbGRyZW4se3BhdGNoRmxhZzpkLHNoYXBlRmxhZzpofT10O2lmKGQ+MCl7aWYoMTI4JmQpcmV0dXJuIHZvaWQgaih1LGYsbixvLHIscyxpLGwsYyk7aWYoMjU2JmQpcmV0dXJuIHZvaWQgTCh1LGYsbixvLHIscyxpLGwsYyl9OCZoPygxNiZwJiZKKHUscixzKSxmIT09dSYmYShuLGYpKToxNiZwPzE2Jmg/aih1LGYsbixvLHIscyxpLGwsYyk6Sih1LHIscywhMCk6KDgmcCYmYShuLFwiXCIpLDE2JmgmJlQoZixuLG8scixzLGksbCxjKSl9LEw9KGUsdCxuLG8scixzLGksbCxjKT0+e2NvbnN0IGE9KGU9ZXx8eSkubGVuZ3RoLHU9KHQ9dHx8eSkubGVuZ3RoLHA9TWF0aC5taW4oYSx1KTtsZXQgZjtmb3IoZj0wO2Y8cDtmKyspe2NvbnN0IG89dFtmXT1jP3ZzKHRbZl0pOmdzKHRbZl0pO20oZVtmXSxvLG4sbnVsbCxyLHMsaSxsLGMpfWE+dT9KKGUscixzLCEwLCExLHApOlQodCxuLG8scixzLGksbCxjLHApfSxqPShlLHQsbixvLHIscyxpLGwsYyk9PntsZXQgYT0wO2NvbnN0IHU9dC5sZW5ndGg7bGV0IHA9ZS5sZW5ndGgtMSxmPXUtMTtmb3IoO2E8PXAmJmE8PWY7KXtjb25zdCBvPWVbYV0sdT10W2FdPWM/dnModFthXSk6Z3ModFthXSk7aWYoIXJzKG8sdSkpYnJlYWs7bShvLHUsbixudWxsLHIscyxpLGwsYyksYSsrfWZvcig7YTw9cCYmYTw9Zjspe2NvbnN0IG89ZVtwXSxhPXRbZl09Yz92cyh0W2ZdKTpncyh0W2ZdKTtpZighcnMobyxhKSlicmVhazttKG8sYSxuLG51bGwscixzLGksbCxjKSxwLS0sZi0tfWlmKGE+cCl7aWYoYTw9Zil7Y29uc3QgZT1mKzEscD1lPHU/dFtlXS5lbDpvO2Zvcig7YTw9ZjspbShudWxsLHRbYV09Yz92cyh0W2FdKTpncyh0W2FdKSxuLHAscixzLGksbCxjKSxhKyt9fWVsc2UgaWYoYT5mKWZvcig7YTw9cDspSChlW2FdLHIscywhMCksYSsrO2Vsc2V7Y29uc3QgZD1hLGg9YSxnPW5ldyBNYXA7Zm9yKGE9aDthPD1mO2ErKyl7Y29uc3QgZT10W2FdPWM/dnModFthXSk6Z3ModFthXSk7bnVsbCE9ZS5rZXkmJmcuc2V0KGUua2V5LGEpfWxldCB2LF89MDtjb25zdCBiPWYtaCsxO2xldCBTPSExLHg9MDtjb25zdCBDPW5ldyBBcnJheShiKTtmb3IoYT0wO2E8YjthKyspQ1thXT0wO2ZvcihhPWQ7YTw9cDthKyspe2NvbnN0IG89ZVthXTtpZihfPj1iKXtIKG8scixzLCEwKTtjb250aW51ZX1sZXQgdTtpZihudWxsIT1vLmtleSl1PWcuZ2V0KG8ua2V5KTtlbHNlIGZvcih2PWg7djw9Zjt2KyspaWYoMD09PUNbdi1oXSYmcnMobyx0W3ZdKSl7dT12O2JyZWFrfXZvaWQgMD09PXU/SChvLHIscywhMCk6KENbdS1oXT1hKzEsdT49eD94PXU6Uz0hMCxtKG8sdFt1XSxuLG51bGwscixzLGksbCxjKSxfKyspfWNvbnN0IHc9Uz9mdW5jdGlvbihlKXtjb25zdCB0PWUuc2xpY2UoKSxuPVswXTtsZXQgbyxyLHMsaSxsO2NvbnN0IGM9ZS5sZW5ndGg7Zm9yKG89MDtvPGM7bysrKXtjb25zdCBjPWVbb107aWYoMCE9PWMpe2lmKHI9bltuLmxlbmd0aC0xXSxlW3JdPGMpe3Rbb109cixuLnB1c2gobyk7Y29udGludWV9Zm9yKHM9MCxpPW4ubGVuZ3RoLTE7czxpOylsPXMraT4+MSxlW25bbF1dPGM/cz1sKzE6aT1sO2M8ZVtuW3NdXSYmKHM+MCYmKHRbb109bltzLTFdKSxuW3NdPW8pfX1zPW4ubGVuZ3RoLGk9bltzLTFdO2Zvcig7cy0tID4wOyluW3NdPWksaT10W2ldO3JldHVybiBufShDKTp5O2Zvcih2PXcubGVuZ3RoLTEsYT1iLTE7YT49MDthLS0pe2NvbnN0IGU9aCthLHA9dFtlXSxmPWUrMTx1P3RbZSsxXS5lbDpvOzA9PT1DW2FdP20obnVsbCxwLG4sZixyLHMsaSxsLGMpOlMmJih2PDB8fGEhPT13W3ZdP0QocCxuLGYsMik6di0tKX19fSxEPShlLHQsbyxyLHM9bnVsbCk9Pntjb25zdHtlbDppLHR5cGU6bCx0cmFuc2l0aW9uOmMsY2hpbGRyZW46YSxzaGFwZUZsYWc6dX09ZTtpZig2JnUpcmV0dXJuIHZvaWQgRChlLmNvbXBvbmVudC5zdWJUcmVlLHQsbyxyKTtpZigxMjgmdSlyZXR1cm4gdm9pZCBlLnN1c3BlbnNlLm1vdmUodCxvLHIpO2lmKDY0JnUpcmV0dXJuIHZvaWQgbC5tb3ZlKGUsdCxvLHRlKTtpZihsPT09V3Ipe24oaSx0LG8pO2ZvcihsZXQgZT0wO2U8YS5sZW5ndGg7ZSsrKUQoYVtlXSx0LG8scik7cmV0dXJuIHZvaWQgbihlLmFuY2hvcix0LG8pfWlmKGw9PT1HcilyZXR1cm4gdm9pZCgoe2VsOmUsYW5jaG9yOnR9LG8scik9PntsZXQgcztmb3IoO2UmJmUhPT10OylzPXAoZSksbihlLG8sciksZT1zO24odCxvLHIpfSkoZSx0LG8pO2lmKDIhPT1yJiYxJnUmJmMpaWYoMD09PXIpYy5iZWZvcmVFbnRlcihpKSxuKGksdCxvKSxQcigoKCk9PmMuZW50ZXIoaSkpLHMpO2Vsc2V7Y29uc3R7bGVhdmU6ZSxkZWxheUxlYXZlOnIsYWZ0ZXJMZWF2ZTpzfT1jLGw9KCk9Pm4oaSx0LG8pLGE9KCk9PntlKGksKCgpPT57bCgpLHMmJnMoKX0pKX07cj9yKGksbCxhKTphKCl9ZWxzZSBuKGksdCxvKX0sSD0oZSx0LG4sbz0hMSxyPSExKT0+e2NvbnN0e3R5cGU6cyxwcm9wczppLHJlZjpsLGNoaWxkcmVuOmMsZHluYW1pY0NoaWxkcmVuOmEsc2hhcGVGbGFnOnUscGF0Y2hGbGFnOnAsZGlyczpmfT1lO2lmKG51bGwhPWwmJkVyKGwsbnVsbCxuLGUsITApLDI1NiZ1KXJldHVybiB2b2lkIHQuY3R4LmRlYWN0aXZhdGUoZSk7Y29uc3QgZD0xJnUmJmYsaD0hbW8oZSk7bGV0IG07aWYoaCYmKG09aSYmaS5vblZub2RlQmVmb3JlVW5tb3VudCkmJmJzKG0sdCxlKSw2JnUpcShlLmNvbXBvbmVudCxuLG8pO2Vsc2V7aWYoMTI4JnUpcmV0dXJuIHZvaWQgZS5zdXNwZW5zZS51bm1vdW50KG4sbyk7ZCYmam8oZSxudWxsLHQsXCJiZWZvcmVVbm1vdW50XCIpLDY0JnU/ZS50eXBlLnJlbW92ZShlLHQsbixyLHRlLG8pOmEmJihzIT09V3J8fHA+MCYmNjQmcCk/SihhLHQsbiwhMSwhMCk6KHM9PT1XciYmMzg0JnB8fCFyJiYxNiZ1KSYmSihjLHQsbiksbyYmVyhlKX0oaCYmKG09aSYmaS5vblZub2RlVW5tb3VudGVkKXx8ZCkmJlByKCgoKT0+e20mJmJzKG0sdCxlKSxkJiZqbyhlLG51bGwsdCxcInVubW91bnRlZFwiKX0pLG4pfSxXPWU9Pntjb25zdHt0eXBlOnQsZWw6bixhbmNob3I6cix0cmFuc2l0aW9uOnN9PWU7aWYodD09PVdyKXJldHVybiB2b2lkIEsobixyKTtpZih0PT09R3IpcmV0dXJuIHZvaWQoKHtlbDplLGFuY2hvcjp0fSk9PntsZXQgbjtmb3IoO2UmJmUhPT10OyluPXAoZSksbyhlKSxlPW47byh0KX0pKGUpO2NvbnN0IGk9KCk9PntvKG4pLHMmJiFzLnBlcnNpc3RlZCYmcy5hZnRlckxlYXZlJiZzLmFmdGVyTGVhdmUoKX07aWYoMSZlLnNoYXBlRmxhZyYmcyYmIXMucGVyc2lzdGVkKXtjb25zdHtsZWF2ZTp0LGRlbGF5TGVhdmU6b309cyxyPSgpPT50KG4saSk7bz9vKGUuZWwsaSxyKTpyKCl9ZWxzZSBpKCl9LEs9KGUsdCk9PntsZXQgbjtmb3IoO2UhPT10OyluPXAoZSksbyhlKSxlPW47byh0KX0scT0oZSx0LG4pPT57Y29uc3R7YnVtOm8sc2NvcGU6cix1cGRhdGU6cyxzdWJUcmVlOmksdW06bH09ZTtvJiZaKG8pLHIuc3RvcCgpLHMmJihzLmFjdGl2ZT0hMSxIKGksZSx0LG4pKSxsJiZQcihsLHQpLFByKCgoKT0+e2UuaXNVbm1vdW50ZWQ9ITB9KSx0KSx0JiZ0LnBlbmRpbmdCcmFuY2gmJiF0LmlzVW5tb3VudGVkJiZlLmFzeW5jRGVwJiYhZS5hc3luY1Jlc29sdmVkJiZlLnN1c3BlbnNlSWQ9PT10LnBlbmRpbmdJZCYmKHQuZGVwcy0tLDA9PT10LmRlcHMmJnQucmVzb2x2ZSgpKX0sSj0oZSx0LG4sbz0hMSxyPSExLHM9MCk9Pntmb3IobGV0IGk9cztpPGUubGVuZ3RoO2krKylIKGVbaV0sdCxuLG8scil9LFk9ZT0+NiZlLnNoYXBlRmxhZz9ZKGUuY29tcG9uZW50LnN1YlRyZWUpOjEyOCZlLnNoYXBlRmxhZz9lLnN1c3BlbnNlLm5leHQoKTpwKGUuYW5jaG9yfHxlLmVsKSxYPShlLHQsbik9PntudWxsPT1lP3QuX3Zub2RlJiZIKHQuX3Zub2RlLG51bGwsbnVsbCwhMCk6bSh0Ll92bm9kZXx8bnVsbCxlLHQsbnVsbCxudWxsLG51bGwsbiksX24oKSx0Ll92bm9kZT1lfSx0ZT17cDptLHVtOkgsbTpELHI6VyxtdDpQLG1jOlQscGM6QixwYmM6JCxuOlksbzplfTtsZXQgb2UscmU7cmV0dXJuIHQmJihbb2UscmVdPXQodGUpKSx7cmVuZGVyOlgsaHlkcmF0ZTpvZSxjcmVhdGVBcHA6TnIoWCxvZSl9fWZ1bmN0aW9uIElyKHtlZmZlY3Q6ZSx1cGRhdGU6dH0sbil7ZS5hbGxvd1JlY3Vyc2U9dC5hbGxvd1JlY3Vyc2U9bn1mdW5jdGlvbiBCcihlLHQsbj0hMSl7Y29uc3Qgbz1lLmNoaWxkcmVuLHI9dC5jaGlsZHJlbjtpZihFKG8pJiZFKHIpKWZvcihsZXQgcz0wO3M8by5sZW5ndGg7cysrKXtjb25zdCBlPW9bc107bGV0IHQ9cltzXTsxJnQuc2hhcGVGbGFnJiYhdC5keW5hbWljQ2hpbGRyZW4mJigodC5wYXRjaEZsYWc8PTB8fDMyPT09dC5wYXRjaEZsYWcpJiYodD1yW3NdPXZzKHJbc10pLHQuZWw9ZS5lbCksbnx8QnIoZSx0KSl9fWNvbnN0IExyPWU9PmUmJihlLmRpc2FibGVkfHxcIlwiPT09ZS5kaXNhYmxlZCksanI9ZT0+XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNWR0VsZW1lbnQmJmUgaW5zdGFuY2VvZiBTVkdFbGVtZW50LFVyPShlLHQpPT57Y29uc3Qgbj1lJiZlLnRvO2lmKFAobikpe2lmKHQpe3JldHVybiB0KG4pfXJldHVybiBudWxsfXJldHVybiBufTtmdW5jdGlvbiBEcihlLHQsbix7bzp7aW5zZXJ0Om99LG06cn0scz0yKXswPT09cyYmbyhlLnRhcmdldEFuY2hvcix0LG4pO2NvbnN0e2VsOmksYW5jaG9yOmwsc2hhcGVGbGFnOmMsY2hpbGRyZW46YSxwcm9wczp1fT1lLHA9Mj09PXM7aWYocCYmbyhpLHQsbiksKCFwfHxMcih1KSkmJjE2JmMpZm9yKGxldCBmPTA7ZjxhLmxlbmd0aDtmKyspcihhW2ZdLHQsbiwyKTtwJiZvKGwsdCxuKX1jb25zdCBIcj17X19pc1RlbGVwb3J0OiEwLHByb2Nlc3MoZSx0LG4sbyxyLHMsaSxsLGMsYSl7Y29uc3R7bWM6dSxwYzpwLHBiYzpmLG86e2luc2VydDpkLHF1ZXJ5U2VsZWN0b3I6aCxjcmVhdGVUZXh0Om19fT1hLGc9THIodC5wcm9wcyk7bGV0e3NoYXBlRmxhZzp2LGNoaWxkcmVuOnksZHluYW1pY0NoaWxkcmVuOl99PXQ7aWYobnVsbD09ZSl7Y29uc3QgZT10LmVsPW0oXCJcIiksYT10LmFuY2hvcj1tKFwiXCIpO2QoZSxuLG8pLGQoYSxuLG8pO2NvbnN0IHA9dC50YXJnZXQ9VXIodC5wcm9wcyxoKSxmPXQudGFyZ2V0QW5jaG9yPW0oXCJcIik7cCYmKGQoZixwKSxpPWl8fGpyKHApKTtjb25zdCBfPShlLHQpPT57MTYmdiYmdSh5LGUsdCxyLHMsaSxsLGMpfTtnP18obixhKTpwJiZfKHAsZil9ZWxzZXt0LmVsPWUuZWw7Y29uc3Qgbz10LmFuY2hvcj1lLmFuY2hvcix1PXQudGFyZ2V0PWUudGFyZ2V0LGQ9dC50YXJnZXRBbmNob3I9ZS50YXJnZXRBbmNob3IsbT1McihlLnByb3BzKSx2PW0/bjp1LHk9bT9vOmQ7aWYoaT1pfHxqcih1KSxfPyhmKGUuZHluYW1pY0NoaWxkcmVuLF8sdixyLHMsaSxsKSxCcihlLHQsITApKTpjfHxwKGUsdCx2LHkscixzLGksbCwhMSksZyltfHxEcih0LG4sbyxhLDEpO2Vsc2UgaWYoKHQucHJvcHMmJnQucHJvcHMudG8pIT09KGUucHJvcHMmJmUucHJvcHMudG8pKXtjb25zdCBlPXQudGFyZ2V0PVVyKHQucHJvcHMsaCk7ZSYmRHIodCxlLG51bGwsYSwwKX1lbHNlIG0mJkRyKHQsdSxkLGEsMSl9fSxyZW1vdmUoZSx0LG4sbyx7dW06cixvOntyZW1vdmU6c319LGkpe2NvbnN0e3NoYXBlRmxhZzpsLGNoaWxkcmVuOmMsYW5jaG9yOmEsdGFyZ2V0QW5jaG9yOnUsdGFyZ2V0OnAscHJvcHM6Zn09ZTtpZihwJiZzKHUpLChpfHwhTHIoZikpJiYocyhhKSwxNiZsKSlmb3IobGV0IGQ9MDtkPGMubGVuZ3RoO2QrKyl7Y29uc3QgZT1jW2RdO3IoZSx0LG4sITAsISFlLmR5bmFtaWNDaGlsZHJlbil9fSxtb3ZlOkRyLGh5ZHJhdGU6ZnVuY3Rpb24oZSx0LG4sbyxyLHMse286e25leHRTaWJsaW5nOmkscGFyZW50Tm9kZTpsLHF1ZXJ5U2VsZWN0b3I6Y319LGEpe2NvbnN0IHU9dC50YXJnZXQ9VXIodC5wcm9wcyxjKTtpZih1KXtjb25zdCBjPXUuX2xwYXx8dS5maXJzdENoaWxkO2lmKDE2JnQuc2hhcGVGbGFnKWlmKExyKHQucHJvcHMpKXQuYW5jaG9yPWEoaShlKSx0LGwoZSksbixvLHIscyksdC50YXJnZXRBbmNob3I9YztlbHNle3QuYW5jaG9yPWkoZSk7bGV0IGw9Yztmb3IoO2w7KWlmKGw9aShsKSxsJiY4PT09bC5ub2RlVHlwZSYmXCJ0ZWxlcG9ydCBhbmNob3JcIj09PWwuZGF0YSl7dC50YXJnZXRBbmNob3I9bCx1Ll9scGE9dC50YXJnZXRBbmNob3ImJmkodC50YXJnZXRBbmNob3IpO2JyZWFrfWEoYyx0LHUsbixvLHIscyl9fXJldHVybiB0LmFuY2hvciYmaSh0LmFuY2hvcil9fSxXcj1TeW1ib2wodm9pZCAwKSx6cj1TeW1ib2wodm9pZCAwKSxLcj1TeW1ib2wodm9pZCAwKSxHcj1TeW1ib2wodm9pZCAwKSxxcj1bXTtsZXQgSnI9bnVsbDtmdW5jdGlvbiBZcihlPSExKXtxci5wdXNoKEpyPWU/bnVsbDpbXSl9ZnVuY3Rpb24gWnIoKXtxci5wb3AoKSxKcj1xcltxci5sZW5ndGgtMV18fG51bGx9bGV0IFFyPTE7ZnVuY3Rpb24gWHIoZSl7UXIrPWV9ZnVuY3Rpb24gZXMoZSl7cmV0dXJuIGUuZHluYW1pY0NoaWxkcmVuPVFyPjA/SnJ8fHk6bnVsbCxacigpLFFyPjAmJkpyJiZKci5wdXNoKGUpLGV9ZnVuY3Rpb24gdHMoZSx0LG4sbyxyLHMpe3JldHVybiBlcyhhcyhlLHQsbixvLHIscywhMCkpfWZ1bmN0aW9uIG5zKGUsdCxuLG8scil7cmV0dXJuIGVzKHVzKGUsdCxuLG8sciwhMCkpfWZ1bmN0aW9uIG9zKGUpe3JldHVybiEhZSYmITA9PT1lLl9fdl9pc1ZOb2RlfWZ1bmN0aW9uIHJzKGUsdCl7cmV0dXJuIGUudHlwZT09PXQudHlwZSYmZS5rZXk9PT10LmtleX1mdW5jdGlvbiBzcyhlKXt9Y29uc3QgaXM9XCJfX3ZJbnRlcm5hbFwiLGxzPSh7a2V5OmV9KT0+bnVsbCE9ZT9lOm51bGwsY3M9KHtyZWY6ZSxyZWZfa2V5OnQscmVmX2ZvcjpufSk9Pm51bGwhPWU/UChlKXx8UnQoZSl8fEYoZSk/e2k6RW4scjplLGs6dCxmOiEhbn06ZTpudWxsO2Z1bmN0aW9uIGFzKGUsdD1udWxsLG49bnVsbCxvPTAscj1udWxsLHM9KGU9PT1Xcj8wOjEpLGk9ITEsbD0hMSl7Y29uc3QgYz17X192X2lzVk5vZGU6ITAsX192X3NraXA6ITAsdHlwZTplLHByb3BzOnQsa2V5OnQmJmxzKHQpLHJlZjp0JiZjcyh0KSxzY29wZUlkOiRuLHNsb3RTY29wZUlkczpudWxsLGNoaWxkcmVuOm4sY29tcG9uZW50Om51bGwsc3VzcGVuc2U6bnVsbCxzc0NvbnRlbnQ6bnVsbCxzc0ZhbGxiYWNrOm51bGwsZGlyczpudWxsLHRyYW5zaXRpb246bnVsbCxlbDpudWxsLGFuY2hvcjpudWxsLHRhcmdldDpudWxsLHRhcmdldEFuY2hvcjpudWxsLHN0YXRpY0NvdW50OjAsc2hhcGVGbGFnOnMscGF0Y2hGbGFnOm8sZHluYW1pY1Byb3BzOnIsZHluYW1pY0NoaWxkcmVuOm51bGwsYXBwQ29udGV4dDpudWxsfTtyZXR1cm4gbD8oeXMoYyxuKSwxMjgmcyYmZS5ub3JtYWxpemUoYykpOm4mJihjLnNoYXBlRmxhZ3w9UChuKT84OjE2KSxRcj4wJiYhaSYmSnImJihjLnBhdGNoRmxhZz4wfHw2JnMpJiYzMiE9PWMucGF0Y2hGbGFnJiZKci5wdXNoKGMpLGN9Y29uc3QgdXM9ZnVuY3Rpb24oZSx0PW51bGwsbj1udWxsLG89MCxzPW51bGwsaT0hMSl7ZSYmZSE9PURvfHwoZT1Lcik7aWYob3MoZSkpe2NvbnN0IG89ZnMoZSx0LCEwKTtyZXR1cm4gbiYmeXMobyxuKSxRcj4wJiYhaSYmSnImJig2Jm8uc2hhcGVGbGFnP0pyW0pyLmluZGV4T2YoZSldPW86SnIucHVzaChvKSksby5wYXRjaEZsYWd8PS0yLG99bD1lLEYobCkmJlwiX192Y2NPcHRzXCJpbiBsJiYoZT1lLl9fdmNjT3B0cyk7dmFyIGw7aWYodCl7dD1wcyh0KTtsZXR7Y2xhc3M6ZSxzdHlsZTpufT10O2UmJiFQKGUpJiYodC5jbGFzcz1jKGUpKSxNKG4pJiYod3QobikmJiFFKG4pJiYobj13KHt9LG4pKSx0LnN0eWxlPXIobikpfWNvbnN0IGE9UChlKT8xOmpuKGUpPzEyODooZT0+ZS5fX2lzVGVsZXBvcnQpKGUpPzY0Ok0oZSk/NDpGKGUpPzI6MDtyZXR1cm4gYXMoZSx0LG4sbyxzLGEsaSwhMCl9O2Z1bmN0aW9uIHBzKGUpe3JldHVybiBlP3d0KGUpfHxpcyBpbiBlP3coe30sZSk6ZTpudWxsfWZ1bmN0aW9uIGZzKGUsdCxuPSExKXtjb25zdHtwcm9wczpvLHJlZjpyLHBhdGNoRmxhZzpzLGNoaWxkcmVuOml9PWUsbD10P19zKG98fHt9LHQpOm87cmV0dXJue19fdl9pc1ZOb2RlOiEwLF9fdl9za2lwOiEwLHR5cGU6ZS50eXBlLHByb3BzOmwsa2V5OmwmJmxzKGwpLHJlZjp0JiZ0LnJlZj9uJiZyP0Uocik/ci5jb25jYXQoY3ModCkpOltyLGNzKHQpXTpjcyh0KTpyLHNjb3BlSWQ6ZS5zY29wZUlkLHNsb3RTY29wZUlkczplLnNsb3RTY29wZUlkcyxjaGlsZHJlbjppLHRhcmdldDplLnRhcmdldCx0YXJnZXRBbmNob3I6ZS50YXJnZXRBbmNob3Isc3RhdGljQ291bnQ6ZS5zdGF0aWNDb3VudCxzaGFwZUZsYWc6ZS5zaGFwZUZsYWcscGF0Y2hGbGFnOnQmJmUudHlwZSE9PVdyPy0xPT09cz8xNjoxNnxzOnMsZHluYW1pY1Byb3BzOmUuZHluYW1pY1Byb3BzLGR5bmFtaWNDaGlsZHJlbjplLmR5bmFtaWNDaGlsZHJlbixhcHBDb250ZXh0OmUuYXBwQ29udGV4dCxkaXJzOmUuZGlycyx0cmFuc2l0aW9uOmUudHJhbnNpdGlvbixjb21wb25lbnQ6ZS5jb21wb25lbnQsc3VzcGVuc2U6ZS5zdXNwZW5zZSxzc0NvbnRlbnQ6ZS5zc0NvbnRlbnQmJmZzKGUuc3NDb250ZW50KSxzc0ZhbGxiYWNrOmUuc3NGYWxsYmFjayYmZnMoZS5zc0ZhbGxiYWNrKSxlbDplLmVsLGFuY2hvcjplLmFuY2hvcn19ZnVuY3Rpb24gZHMoZT1cIiBcIix0PTApe3JldHVybiB1cyh6cixudWxsLGUsdCl9ZnVuY3Rpb24gaHMoZSx0KXtjb25zdCBuPXVzKEdyLG51bGwsZSk7cmV0dXJuIG4uc3RhdGljQ291bnQ9dCxufWZ1bmN0aW9uIG1zKGU9XCJcIix0PSExKXtyZXR1cm4gdD8oWXIoKSxucyhLcixudWxsLGUpKTp1cyhLcixudWxsLGUpfWZ1bmN0aW9uIGdzKGUpe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/dXMoS3IpOkUoZSk/dXMoV3IsbnVsbCxlLnNsaWNlKCkpOlwib2JqZWN0XCI9PXR5cGVvZiBlP3ZzKGUpOnVzKHpyLG51bGwsU3RyaW5nKGUpKX1mdW5jdGlvbiB2cyhlKXtyZXR1cm4gbnVsbD09PWUuZWx8fGUubWVtbz9lOmZzKGUpfWZ1bmN0aW9uIHlzKGUsdCl7bGV0IG49MDtjb25zdHtzaGFwZUZsYWc6b309ZTtpZihudWxsPT10KXQ9bnVsbDtlbHNlIGlmKEUodCkpbj0xNjtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiB0KXtpZig2NSZvKXtjb25zdCBuPXQuZGVmYXVsdDtyZXR1cm4gdm9pZChuJiYobi5fYyYmKG4uX2Q9ITEpLHlzKGUsbigpKSxuLl9jJiYobi5fZD0hMCkpKX17bj0zMjtjb25zdCBvPXQuXztvfHxpcyBpbiB0PzM9PT1vJiZFbiYmKDE9PT1Fbi5zbG90cy5fP3QuXz0xOih0Ll89MixlLnBhdGNoRmxhZ3w9MTAyNCkpOnQuX2N0eD1Fbn19ZWxzZSBGKHQpPyh0PXtkZWZhdWx0OnQsX2N0eDpFbn0sbj0zMik6KHQ9U3RyaW5nKHQpLDY0Jm8/KG49MTYsdD1bZHModCldKTpuPTgpO2UuY2hpbGRyZW49dCxlLnNoYXBlRmxhZ3w9bn1mdW5jdGlvbiBfcyguLi5lKXtjb25zdCB0PXt9O2ZvcihsZXQgbj0wO248ZS5sZW5ndGg7bisrKXtjb25zdCBvPWVbbl07Zm9yKGNvbnN0IGUgaW4gbylpZihcImNsYXNzXCI9PT1lKXQuY2xhc3MhPT1vLmNsYXNzJiYodC5jbGFzcz1jKFt0LmNsYXNzLG8uY2xhc3NdKSk7ZWxzZSBpZihcInN0eWxlXCI9PT1lKXQuc3R5bGU9cihbdC5zdHlsZSxvLnN0eWxlXSk7ZWxzZSBpZih4KGUpKXtjb25zdCBuPXRbZV0scj1vW2VdOyFyfHxuPT09cnx8RShuKSYmbi5pbmNsdWRlcyhyKXx8KHRbZV09bj9bXS5jb25jYXQobixyKTpyKX1lbHNlXCJcIiE9PWUmJih0W2VdPW9bZV0pfXJldHVybiB0fWZ1bmN0aW9uIGJzKGUsdCxuLG89bnVsbCl7WnQoZSx0LDcsW24sb10pfWNvbnN0IFNzPWtyKCk7bGV0IHhzPTA7bGV0IENzPW51bGw7Y29uc3Qgd3M9KCk9PkNzfHxFbixrcz1lPT57Q3M9ZSxlLnNjb3BlLm9uKCl9LFRzPSgpPT57Q3MmJkNzLnNjb3BlLm9mZigpLENzPW51bGx9O2Z1bmN0aW9uIE5zKGUpe3JldHVybiA0JmUudm5vZGUuc2hhcGVGbGFnfWxldCBFcywkcyxPcz0hMTtmdW5jdGlvbiBScyhlLHQsbil7Rih0KT9lLnJlbmRlcj10Ok0odCkmJihlLnNldHVwU3RhdGU9THQodCkpLEFzKGUsbil9ZnVuY3Rpb24gRnMoZSl7RXM9ZSwkcz1lPT57ZS5yZW5kZXIuX3JjJiYoZS53aXRoUHJveHk9bmV3IFByb3h5KGUuY3R4LHRyKSl9fWNvbnN0IFBzPSgpPT4hRXM7ZnVuY3Rpb24gQXMoZSx0LG4pe2NvbnN0IG89ZS50eXBlO2lmKCFlLnJlbmRlcil7aWYoIXQmJkVzJiYhby5yZW5kZXIpe2NvbnN0IHQ9by50ZW1wbGF0ZTtpZih0KXtjb25zdHtpc0N1c3RvbUVsZW1lbnQ6bixjb21waWxlck9wdGlvbnM6cn09ZS5hcHBDb250ZXh0LmNvbmZpZyx7ZGVsaW1pdGVyczpzLGNvbXBpbGVyT3B0aW9uczppfT1vLGw9dyh3KHtpc0N1c3RvbUVsZW1lbnQ6bixkZWxpbWl0ZXJzOnN9LHIpLGkpO28ucmVuZGVyPUVzKHQsbCl9fWUucmVuZGVyPW8ucmVuZGVyfHxfLCRzJiYkcyhlKX1rcyhlKSx4ZSgpLG9yKGUpLENlKCksVHMoKX1mdW5jdGlvbiBNcyhlKXtjb25zdCB0PXQ9PntlLmV4cG9zZWQ9dHx8e319O2xldCBuO3JldHVybntnZXQgYXR0cnMoKXtyZXR1cm4gbnx8KG49ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm94eShlLmF0dHJzLHtnZXQ6KHQsbik9Pih3ZShlLDAsXCIkYXR0cnNcIiksdFtuXSl9KX0oZSkpfSxzbG90czplLnNsb3RzLGVtaXQ6ZS5lbWl0LGV4cG9zZTp0fX1mdW5jdGlvbiBWcyhlKXtpZihlLmV4cG9zZWQpcmV0dXJuIGUuZXhwb3NlUHJveHl8fChlLmV4cG9zZVByb3h5PW5ldyBQcm94eShMdChUdChlLmV4cG9zZWQpKSx7Z2V0Oih0LG4pPT5uIGluIHQ/dFtuXTpuIGluIFhvP1hvW25dKGUpOnZvaWQgMH0pKX1jb25zdCBJcz0vKD86XnxbLV9dKShcXHcpL2c7ZnVuY3Rpb24gQnMoZSx0PSEwKXtyZXR1cm4gRihlKT9lLmRpc3BsYXlOYW1lfHxlLm5hbWU6ZS5uYW1lfHx0JiZlLl9fbmFtZX1mdW5jdGlvbiBMcyhlLHQsbj0hMSl7bGV0IG89QnModCk7aWYoIW8mJnQuX19maWxlKXtjb25zdCBlPXQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7ZSYmKG89ZVsxXSl9aWYoIW8mJmUmJmUucGFyZW50KXtjb25zdCBuPWU9Pntmb3IoY29uc3QgbiBpbiBlKWlmKGVbbl09PT10KXJldHVybiBufTtvPW4oZS5jb21wb25lbnRzfHxlLnBhcmVudC50eXBlLmNvbXBvbmVudHMpfHxuKGUuYXBwQ29udGV4dC5jb21wb25lbnRzKX1yZXR1cm4gbz9vLnJlcGxhY2UoSXMsKGU9PmUudG9VcHBlckNhc2UoKSkpLnJlcGxhY2UoL1stX10vZyxcIlwiKTpuP1wiQXBwXCI6XCJBbm9ueW1vdXNcIn1jb25zdCBqcz0oZSx0KT0+ZnVuY3Rpb24oZSx0LG49ITEpe2xldCBvLHI7Y29uc3Qgcz1GKGUpO3JldHVybiBzPyhvPWUscj1fKToobz1lLmdldCxyPWUuc2V0KSxuZXcgenQobyxyLHN8fCFyLG4pfShlLDAsT3MpO2Z1bmN0aW9uIFVzKCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24gRHMoKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBIcyhlKXt9ZnVuY3Rpb24gV3MoZSx0KXtyZXR1cm4gbnVsbH1mdW5jdGlvbiB6cygpe3JldHVybiBHcygpLnNsb3RzfWZ1bmN0aW9uIEtzKCl7cmV0dXJuIEdzKCkuYXR0cnN9ZnVuY3Rpb24gR3MoKXtjb25zdCBlPXdzKCk7cmV0dXJuIGUuc2V0dXBDb250ZXh0fHwoZS5zZXR1cENvbnRleHQ9TXMoZSkpfWZ1bmN0aW9uIHFzKGUsdCl7Y29uc3Qgbj1FKGUpP2UucmVkdWNlKCgoZSx0KT0+KGVbdF09e30sZSkpLHt9KTplO2Zvcihjb25zdCBvIGluIHQpe2NvbnN0IGU9bltvXTtlP0UoZSl8fEYoZSk/bltvXT17dHlwZTplLGRlZmF1bHQ6dFtvXX06ZS5kZWZhdWx0PXRbb106bnVsbD09PWUmJihuW29dPXtkZWZhdWx0OnRbb119KX1yZXR1cm4gbn1mdW5jdGlvbiBKcyhlLHQpe2NvbnN0IG49e307Zm9yKGNvbnN0IG8gaW4gZSl0LmluY2x1ZGVzKG8pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobixvLHtlbnVtZXJhYmxlOiEwLGdldDooKT0+ZVtvXX0pO3JldHVybiBufWZ1bmN0aW9uIFlzKGUpe2NvbnN0IHQ9d3MoKTtsZXQgbj1lKCk7cmV0dXJuIFRzKCksVihuKSYmKG49bi5jYXRjaCgoZT0+e3Rocm93IGtzKHQpLGV9KSkpLFtuLCgpPT5rcyh0KV19ZnVuY3Rpb24gWnMoZSx0LG4pe2NvbnN0IG89YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gMj09PW8/TSh0KSYmIUUodCk/b3ModCk/dXMoZSxudWxsLFt0XSk6dXMoZSx0KTp1cyhlLG51bGwsdCk6KG8+Mz9uPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTozPT09byYmb3MobikmJihuPVtuXSksdXMoZSx0LG4pKX1jb25zdCBRcz1TeW1ib2woXCJcIiksWHM9KCk9Pnt7Y29uc3QgZT1xbihRcyk7cmV0dXJuIGV8fEd0KFwiU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLlwiKSxlfX07ZnVuY3Rpb24gZWkoKXt9ZnVuY3Rpb24gdGkoZSx0LG4sbyl7Y29uc3Qgcj1uW29dO2lmKHImJm5pKHIsZSkpcmV0dXJuIHI7Y29uc3Qgcz10KCk7cmV0dXJuIHMubWVtbz1lLnNsaWNlKCksbltvXT1zfWZ1bmN0aW9uIG5pKGUsdCl7Y29uc3Qgbj1lLm1lbW87aWYobi5sZW5ndGghPXQubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgbz0wO288bi5sZW5ndGg7bysrKWlmKFkobltvXSx0W29dKSlyZXR1cm4hMTtyZXR1cm4gUXI+MCYmSnImJkpyLnB1c2goZSksITB9Y29uc3Qgb2k9XCIzLjIuMzdcIixyaT1udWxsLHNpPW51bGwsaWk9bnVsbCxsaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6bnVsbCxjaT1saSYmbGkuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpLGFpPXtpbnNlcnQ6KGUsdCxuKT0+e3QuaW5zZXJ0QmVmb3JlKGUsbnx8bnVsbCl9LHJlbW92ZTplPT57Y29uc3QgdD1lLnBhcmVudE5vZGU7dCYmdC5yZW1vdmVDaGlsZChlKX0sY3JlYXRlRWxlbWVudDooZSx0LG4sbyk9Pntjb25zdCByPXQ/bGkuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixlKTpsaS5jcmVhdGVFbGVtZW50KGUsbj97aXM6bn06dm9pZCAwKTtyZXR1cm5cInNlbGVjdFwiPT09ZSYmbyYmbnVsbCE9by5tdWx0aXBsZSYmci5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLG8ubXVsdGlwbGUpLHJ9LGNyZWF0ZVRleHQ6ZT0+bGkuY3JlYXRlVGV4dE5vZGUoZSksY3JlYXRlQ29tbWVudDplPT5saS5jcmVhdGVDb21tZW50KGUpLHNldFRleHQ6KGUsdCk9PntlLm5vZGVWYWx1ZT10fSxzZXRFbGVtZW50VGV4dDooZSx0KT0+e2UudGV4dENvbnRlbnQ9dH0scGFyZW50Tm9kZTplPT5lLnBhcmVudE5vZGUsbmV4dFNpYmxpbmc6ZT0+ZS5uZXh0U2libGluZyxxdWVyeVNlbGVjdG9yOmU9PmxpLnF1ZXJ5U2VsZWN0b3IoZSksc2V0U2NvcGVJZChlLHQpe2Uuc2V0QXR0cmlidXRlKHQsXCJcIil9LGNsb25lTm9kZShlKXtjb25zdCB0PWUuY2xvbmVOb2RlKCEwKTtyZXR1cm5cIl92YWx1ZVwiaW4gZSYmKHQuX3ZhbHVlPWUuX3ZhbHVlKSx0fSxpbnNlcnRTdGF0aWNDb250ZW50KGUsdCxuLG8scixzKXtjb25zdCBpPW4/bi5wcmV2aW91c1NpYmxpbmc6dC5sYXN0Q2hpbGQ7aWYociYmKHI9PT1zfHxyLm5leHRTaWJsaW5nKSlmb3IoO3QuaW5zZXJ0QmVmb3JlKHIuY2xvbmVOb2RlKCEwKSxuKSxyIT09cyYmKHI9ci5uZXh0U2libGluZyk7KTtlbHNle2NpLmlubmVySFRNTD1vP2A8c3ZnPiR7ZX08L3N2Zz5gOmU7Y29uc3Qgcj1jaS5jb250ZW50O2lmKG8pe2NvbnN0IGU9ci5maXJzdENoaWxkO2Zvcig7ZS5maXJzdENoaWxkOylyLmFwcGVuZENoaWxkKGUuZmlyc3RDaGlsZCk7ci5yZW1vdmVDaGlsZChlKX10Lmluc2VydEJlZm9yZShyLG4pfXJldHVybltpP2kubmV4dFNpYmxpbmc6dC5maXJzdENoaWxkLG4/bi5wcmV2aW91c1NpYmxpbmc6dC5sYXN0Q2hpbGRdfX07Y29uc3QgdWk9L1xccyohaW1wb3J0YW50JC87ZnVuY3Rpb24gcGkoZSx0LG4pe2lmKEUobikpbi5mb3JFYWNoKChuPT5waShlLHQsbikpKTtlbHNlIGlmKG51bGw9PW4mJihuPVwiXCIpLHQuc3RhcnRzV2l0aChcIi0tXCIpKWUuc2V0UHJvcGVydHkodCxuKTtlbHNle2NvbnN0IG89ZnVuY3Rpb24oZSx0KXtjb25zdCBuPWRpW3RdO2lmKG4pcmV0dXJuIG47bGV0IG89eih0KTtpZihcImZpbHRlclwiIT09byYmbyBpbiBlKXJldHVybiBkaVt0XT1vO289cShvKTtmb3IobGV0IHI9MDtyPGZpLmxlbmd0aDtyKyspe2NvbnN0IG49Zmlbcl0rbztpZihuIGluIGUpcmV0dXJuIGRpW3RdPW59cmV0dXJuIHR9KGUsdCk7dWkudGVzdChuKT9lLnNldFByb3BlcnR5KEcobyksbi5yZXBsYWNlKHVpLFwiXCIpLFwiaW1wb3J0YW50XCIpOmVbb109bn19Y29uc3QgZmk9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLGRpPXt9O2NvbnN0IGhpPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiO2NvbnN0W21pLGdpXT0oKCk9PntsZXQgZT1EYXRlLm5vdyx0PSExO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe0RhdGUubm93KCk+ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKS50aW1lU3RhbXAmJihlPXBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKSk7Y29uc3Qgbj1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO3Q9ISEobiYmTnVtYmVyKG5bMV0pPD01Myl9cmV0dXJuW2UsdF19KSgpO2xldCB2aT0wO2NvbnN0IHlpPVByb21pc2UucmVzb2x2ZSgpLF9pPSgpPT57dmk9MH07ZnVuY3Rpb24gYmkoZSx0LG4sbyl7ZS5hZGRFdmVudExpc3RlbmVyKHQsbixvKX1mdW5jdGlvbiBTaShlLHQsbixvLHI9bnVsbCl7Y29uc3Qgcz1lLl92ZWl8fChlLl92ZWk9e30pLGk9c1t0XTtpZihvJiZpKWkudmFsdWU9bztlbHNle2NvbnN0W24sbF09ZnVuY3Rpb24oZSl7bGV0IHQ7aWYoeGkudGVzdChlKSl7bGV0IG47Zm9yKHQ9e307bj1lLm1hdGNoKHhpKTspZT1lLnNsaWNlKDAsZS5sZW5ndGgtblswXS5sZW5ndGgpLHRbblswXS50b0xvd2VyQ2FzZSgpXT0hMH1yZXR1cm5bRyhlLnNsaWNlKDIpKSx0XX0odCk7aWYobyl7Y29uc3QgaT1zW3RdPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lPT57Y29uc3Qgbz1lLnRpbWVTdGFtcHx8bWkoKTsoZ2l8fG8+PW4uYXR0YWNoZWQtMSkmJlp0KGZ1bmN0aW9uKGUsdCl7aWYoRSh0KSl7Y29uc3Qgbj1lLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249KCk9PntuLmNhbGwoZSksZS5fc3RvcHBlZD0hMH0sdC5tYXAoKGU9PnQ9PiF0Ll9zdG9wcGVkJiZlJiZlKHQpKSl9cmV0dXJuIHR9KGUsbi52YWx1ZSksdCw1LFtlXSl9O3JldHVybiBuLnZhbHVlPWUsbi5hdHRhY2hlZD0oKCk9PnZpfHwoeWkudGhlbihfaSksdmk9bWkoKSkpKCksbn0obyxyKTtiaShlLG4saSxsKX1lbHNlIGkmJighZnVuY3Rpb24oZSx0LG4sbyl7ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsbixvKX0oZSxuLGksbCksc1t0XT12b2lkIDApfX1jb25zdCB4aT0vKD86T25jZXxQYXNzaXZlfENhcHR1cmUpJC87Y29uc3QgQ2k9L15vblthLXpdLztmdW5jdGlvbiB3aShlLHQpe2NvbnN0IG49aG8oZSk7Y2xhc3MgbyBleHRlbmRzIE5pe2NvbnN0cnVjdG9yKGUpe3N1cGVyKG4sZSx0KX19cmV0dXJuIG8uZGVmPW4sb31jb25zdCBraT1lPT53aShlLFRsKSxUaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTEVsZW1lbnQ/SFRNTEVsZW1lbnQ6Y2xhc3N7fTtjbGFzcyBOaSBleHRlbmRzIFRpe2NvbnN0cnVjdG9yKGUsdD17fSxuKXtzdXBlcigpLHRoaXMuX2RlZj1lLHRoaXMuX3Byb3BzPXQsdGhpcy5faW5zdGFuY2U9bnVsbCx0aGlzLl9jb25uZWN0ZWQ9ITEsdGhpcy5fcmVzb2x2ZWQ9ITEsdGhpcy5fbnVtYmVyUHJvcHM9bnVsbCx0aGlzLnNoYWRvd1Jvb3QmJm4/bih0aGlzLl9jcmVhdGVWTm9kZSgpLHRoaXMuc2hhZG93Um9vdCk6dGhpcy5hdHRhY2hTaGFkb3coe21vZGU6XCJvcGVuXCJ9KX1jb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMuX2Nvbm5lY3RlZD0hMCx0aGlzLl9pbnN0YW5jZXx8dGhpcy5fcmVzb2x2ZURlZigpfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5fY29ubmVjdGVkPSExLGRuKCgoKT0+e3RoaXMuX2Nvbm5lY3RlZHx8KGtsKG51bGwsdGhpcy5zaGFkb3dSb290KSx0aGlzLl9pbnN0YW5jZT1udWxsKX0pKX1fcmVzb2x2ZURlZigpe2lmKHRoaXMuX3Jlc29sdmVkKXJldHVybjt0aGlzLl9yZXNvbHZlZD0hMDtmb3IobGV0IG49MDtuPHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7bisrKXRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW25dLm5hbWUpO25ldyBNdXRhdGlvbk9ic2VydmVyKChlPT57Zm9yKGNvbnN0IHQgb2YgZSl0aGlzLl9zZXRBdHRyKHQuYXR0cmlidXRlTmFtZSl9KSkub2JzZXJ2ZSh0aGlzLHthdHRyaWJ1dGVzOiEwfSk7Y29uc3QgZT1lPT57Y29uc3R7cHJvcHM6dCxzdHlsZXM6bn09ZSxvPSFFKHQpLHI9dD9vP09iamVjdC5rZXlzKHQpOnQ6W107bGV0IHM7aWYobylmb3IoY29uc3QgaSBpbiB0aGlzLl9wcm9wcyl7Y29uc3QgZT10W2ldOyhlPT09TnVtYmVyfHxlJiZlLnR5cGU9PT1OdW1iZXIpJiYodGhpcy5fcHJvcHNbaV09WCh0aGlzLl9wcm9wc1tpXSksKHN8fChzPU9iamVjdC5jcmVhdGUobnVsbCkpKVtpXT0hMCl9dGhpcy5fbnVtYmVyUHJvcHM9cztmb3IoY29uc3QgaSBvZiBPYmplY3Qua2V5cyh0aGlzKSlcIl9cIiE9PWlbMF0mJnRoaXMuX3NldFByb3AoaSx0aGlzW2ldLCEwLCExKTtmb3IoY29uc3QgaSBvZiByLm1hcCh6KSlPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxpLHtnZXQoKXtyZXR1cm4gdGhpcy5fZ2V0UHJvcChpKX0sc2V0KGUpe3RoaXMuX3NldFByb3AoaSxlKX19KTt0aGlzLl9hcHBseVN0eWxlcyhuKSx0aGlzLl91cGRhdGUoKX0sdD10aGlzLl9kZWYuX19hc3luY0xvYWRlcjt0P3QoKS50aGVuKGUpOmUodGhpcy5fZGVmKX1fc2V0QXR0cihlKXtsZXQgdD10aGlzLmdldEF0dHJpYnV0ZShlKTt0aGlzLl9udW1iZXJQcm9wcyYmdGhpcy5fbnVtYmVyUHJvcHNbZV0mJih0PVgodCkpLHRoaXMuX3NldFByb3AoeihlKSx0LCExKX1fZ2V0UHJvcChlKXtyZXR1cm4gdGhpcy5fcHJvcHNbZV19X3NldFByb3AoZSx0LG49ITAsbz0hMCl7dCE9PXRoaXMuX3Byb3BzW2VdJiYodGhpcy5fcHJvcHNbZV09dCxvJiZ0aGlzLl9pbnN0YW5jZSYmdGhpcy5fdXBkYXRlKCksbiYmKCEwPT09dD90aGlzLnNldEF0dHJpYnV0ZShHKGUpLFwiXCIpOlwic3RyaW5nXCI9PXR5cGVvZiB0fHxcIm51bWJlclwiPT10eXBlb2YgdD90aGlzLnNldEF0dHJpYnV0ZShHKGUpLHQrXCJcIik6dHx8dGhpcy5yZW1vdmVBdHRyaWJ1dGUoRyhlKSkpKX1fdXBkYXRlKCl7a2wodGhpcy5fY3JlYXRlVk5vZGUoKSx0aGlzLnNoYWRvd1Jvb3QpfV9jcmVhdGVWTm9kZSgpe2NvbnN0IGU9dXModGhpcy5fZGVmLHcoe30sdGhpcy5fcHJvcHMpKTtyZXR1cm4gdGhpcy5faW5zdGFuY2V8fChlLmNlPWU9Pnt0aGlzLl9pbnN0YW5jZT1lLGUuaXNDRT0hMCxlLmVtaXQ9KGUsLi4udCk9Pnt0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGUse2RldGFpbDp0fSkpfTtsZXQgdD10aGlzO2Zvcig7dD10JiYodC5wYXJlbnROb2RlfHx0Lmhvc3QpOylpZih0IGluc3RhbmNlb2YgTmkpe2UucGFyZW50PXQuX2luc3RhbmNlO2JyZWFrfX0pLGV9X2FwcGx5U3R5bGVzKGUpe2UmJmUuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3QudGV4dENvbnRlbnQ9ZSx0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodCl9KSl9fWZ1bmN0aW9uIEVpKGU9XCIkc3R5bGVcIil7e2NvbnN0IHQ9d3MoKTtpZighdClyZXR1cm4gdjtjb25zdCBuPXQudHlwZS5fX2Nzc01vZHVsZXM7aWYoIW4pcmV0dXJuIHY7Y29uc3Qgbz1uW2VdO3JldHVybiBvfHx2fX1mdW5jdGlvbiAkaShlKXtjb25zdCB0PXdzKCk7aWYoIXQpcmV0dXJuO2NvbnN0IG49KCk9Pk9pKHQuc3ViVHJlZSxlKHQucHJveHkpKTtZbihuKSxPbygoKCk9Pntjb25zdCBlPW5ldyBNdXRhdGlvbk9ic2VydmVyKG4pO2Uub2JzZXJ2ZSh0LnN1YlRyZWUuZWwucGFyZW50Tm9kZSx7Y2hpbGRMaXN0OiEwfSksQW8oKCgpPT5lLmRpc2Nvbm5lY3QoKSkpfSkpfWZ1bmN0aW9uIE9pKGUsdCl7aWYoMTI4JmUuc2hhcGVGbGFnKXtjb25zdCBuPWUuc3VzcGVuc2U7ZT1uLmFjdGl2ZUJyYW5jaCxuLnBlbmRpbmdCcmFuY2gmJiFuLmlzSHlkcmF0aW5nJiZuLmVmZmVjdHMucHVzaCgoKCk9PntPaShuLmFjdGl2ZUJyYW5jaCx0KX0pKX1mb3IoO2UuY29tcG9uZW50OyllPWUuY29tcG9uZW50LnN1YlRyZWU7aWYoMSZlLnNoYXBlRmxhZyYmZS5lbClSaShlLmVsLHQpO2Vsc2UgaWYoZS50eXBlPT09V3IpZS5jaGlsZHJlbi5mb3JFYWNoKChlPT5PaShlLHQpKSk7ZWxzZSBpZihlLnR5cGU9PT1Hcil7bGV0e2VsOm4sYW5jaG9yOm99PWU7Zm9yKDtuJiYoUmkobix0KSxuIT09byk7KW49bi5uZXh0U2libGluZ319ZnVuY3Rpb24gUmkoZSx0KXtpZigxPT09ZS5ub2RlVHlwZSl7Y29uc3Qgbj1lLnN0eWxlO2Zvcihjb25zdCBlIGluIHQpbi5zZXRQcm9wZXJ0eShgLS0ke2V9YCx0W2VdKX19Y29uc3QgRmk9KGUse3Nsb3RzOnR9KT0+WnMoaW8sSWkoZSksdCk7RmkuZGlzcGxheU5hbWU9XCJUcmFuc2l0aW9uXCI7Y29uc3QgUGk9e25hbWU6U3RyaW5nLHR5cGU6U3RyaW5nLGNzczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGR1cmF0aW9uOltTdHJpbmcsTnVtYmVyLE9iamVjdF0sZW50ZXJGcm9tQ2xhc3M6U3RyaW5nLGVudGVyQWN0aXZlQ2xhc3M6U3RyaW5nLGVudGVyVG9DbGFzczpTdHJpbmcsYXBwZWFyRnJvbUNsYXNzOlN0cmluZyxhcHBlYXJBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyVG9DbGFzczpTdHJpbmcsbGVhdmVGcm9tQ2xhc3M6U3RyaW5nLGxlYXZlQWN0aXZlQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmd9LEFpPUZpLnByb3BzPXcoe30saW8ucHJvcHMsUGkpLE1pPShlLHQ9W10pPT57RShlKT9lLmZvckVhY2goKGU9PmUoLi4udCkpKTplJiZlKC4uLnQpfSxWaT1lPT4hIWUmJihFKGUpP2Uuc29tZSgoZT0+ZS5sZW5ndGg+MSkpOmUubGVuZ3RoPjEpO2Z1bmN0aW9uIElpKGUpe2NvbnN0IHQ9e307Zm9yKGNvbnN0IHcgaW4gZSl3IGluIFBpfHwodFt3XT1lW3ddKTtpZighMT09PWUuY3NzKXJldHVybiB0O2NvbnN0e25hbWU6bj1cInZcIix0eXBlOm8sZHVyYXRpb246cixlbnRlckZyb21DbGFzczpzPWAke259LWVudGVyLWZyb21gLGVudGVyQWN0aXZlQ2xhc3M6aT1gJHtufS1lbnRlci1hY3RpdmVgLGVudGVyVG9DbGFzczpsPWAke259LWVudGVyLXRvYCxhcHBlYXJGcm9tQ2xhc3M6Yz1zLGFwcGVhckFjdGl2ZUNsYXNzOmE9aSxhcHBlYXJUb0NsYXNzOnU9bCxsZWF2ZUZyb21DbGFzczpwPWAke259LWxlYXZlLWZyb21gLGxlYXZlQWN0aXZlQ2xhc3M6Zj1gJHtufS1sZWF2ZS1hY3RpdmVgLGxlYXZlVG9DbGFzczpkPWAke259LWxlYXZlLXRvYH09ZSxoPWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpcmV0dXJuIG51bGw7aWYoTShlKSlyZXR1cm5bQmkoZS5lbnRlciksQmkoZS5sZWF2ZSldO3tjb25zdCB0PUJpKGUpO3JldHVyblt0LHRdfX0ociksbT1oJiZoWzBdLGc9aCYmaFsxXSx7b25CZWZvcmVFbnRlcjp2LG9uRW50ZXI6eSxvbkVudGVyQ2FuY2VsbGVkOl8sb25MZWF2ZTpiLG9uTGVhdmVDYW5jZWxsZWQ6UyxvbkJlZm9yZUFwcGVhcjp4PXYsb25BcHBlYXI6Qz15LG9uQXBwZWFyQ2FuY2VsbGVkOms9X309dCxUPShlLHQsbik9PntqaShlLHQ/dTpsKSxqaShlLHQ/YTppKSxuJiZuKCl9LE49KGUsdCk9PntlLl9pc0xlYXZpbmc9ITEsamkoZSxwKSxqaShlLGQpLGppKGUsZiksdCYmdCgpfSxFPWU9Pih0LG4pPT57Y29uc3Qgcj1lP0M6eSxpPSgpPT5UKHQsZSxuKTtNaShyLFt0LGldKSxVaSgoKCk9PntqaSh0LGU/YzpzKSxMaSh0LGU/dTpsKSxWaShyKXx8SGkodCxvLG0saSl9KSl9O3JldHVybiB3KHQse29uQmVmb3JlRW50ZXIoZSl7TWkodixbZV0pLExpKGUscyksTGkoZSxpKX0sb25CZWZvcmVBcHBlYXIoZSl7TWkoeCxbZV0pLExpKGUsYyksTGkoZSxhKX0sb25FbnRlcjpFKCExKSxvbkFwcGVhcjpFKCEwKSxvbkxlYXZlKGUsdCl7ZS5faXNMZWF2aW5nPSEwO2NvbnN0IG49KCk9Pk4oZSx0KTtMaShlLHApLEdpKCksTGkoZSxmKSxVaSgoKCk9PntlLl9pc0xlYXZpbmcmJihqaShlLHApLExpKGUsZCksVmkoYil8fEhpKGUsbyxnLG4pKX0pKSxNaShiLFtlLG5dKX0sb25FbnRlckNhbmNlbGxlZChlKXtUKGUsITEpLE1pKF8sW2VdKX0sb25BcHBlYXJDYW5jZWxsZWQoZSl7VChlLCEwKSxNaShrLFtlXSl9LG9uTGVhdmVDYW5jZWxsZWQoZSl7TihlKSxNaShTLFtlXSl9fSl9ZnVuY3Rpb24gQmkoZSl7cmV0dXJuIFgoZSl9ZnVuY3Rpb24gTGkoZSx0KXt0LnNwbGl0KC9cXHMrLykuZm9yRWFjaCgodD0+dCYmZS5jbGFzc0xpc3QuYWRkKHQpKSksKGUuX3Z0Y3x8KGUuX3Z0Yz1uZXcgU2V0KSkuYWRkKHQpfWZ1bmN0aW9uIGppKGUsdCl7dC5zcGxpdCgvXFxzKy8pLmZvckVhY2goKHQ9PnQmJmUuY2xhc3NMaXN0LnJlbW92ZSh0KSkpO2NvbnN0e192dGM6bn09ZTtuJiYobi5kZWxldGUodCksbi5zaXplfHwoZS5fdnRjPXZvaWQgMCkpfWZ1bmN0aW9uIFVpKGUpe3JlcXVlc3RBbmltYXRpb25GcmFtZSgoKCk9PntyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSl9KSl9bGV0IERpPTA7ZnVuY3Rpb24gSGkoZSx0LG4sbyl7Y29uc3Qgcj1lLl9lbmRJZD0rK0RpLHM9KCk9PntyPT09ZS5fZW5kSWQmJm8oKX07aWYobilyZXR1cm4gc2V0VGltZW91dChzLG4pO2NvbnN0e3R5cGU6aSx0aW1lb3V0OmwscHJvcENvdW50OmN9PVdpKGUsdCk7aWYoIWkpcmV0dXJuIG8oKTtjb25zdCBhPWkrXCJlbmRcIjtsZXQgdT0wO2NvbnN0IHA9KCk9PntlLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxmKSxzKCl9LGY9dD0+e3QudGFyZ2V0PT09ZSYmKyt1Pj1jJiZwKCl9O3NldFRpbWVvdXQoKCgpPT57dTxjJiZwKCl9KSxsKzEpLGUuYWRkRXZlbnRMaXN0ZW5lcihhLGYpfWZ1bmN0aW9uIFdpKGUsdCl7Y29uc3Qgbj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxvPWU9PihuW2VdfHxcIlwiKS5zcGxpdChcIiwgXCIpLHI9byhcInRyYW5zaXRpb25EZWxheVwiKSxzPW8oXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiksaT16aShyLHMpLGw9byhcImFuaW1hdGlvbkRlbGF5XCIpLGM9byhcImFuaW1hdGlvbkR1cmF0aW9uXCIpLGE9emkobCxjKTtsZXQgdT1udWxsLHA9MCxmPTA7XCJ0cmFuc2l0aW9uXCI9PT10P2k+MCYmKHU9XCJ0cmFuc2l0aW9uXCIscD1pLGY9cy5sZW5ndGgpOlwiYW5pbWF0aW9uXCI9PT10P2E+MCYmKHU9XCJhbmltYXRpb25cIixwPWEsZj1jLmxlbmd0aCk6KHA9TWF0aC5tYXgoaSxhKSx1PXA+MD9pPmE/XCJ0cmFuc2l0aW9uXCI6XCJhbmltYXRpb25cIjpudWxsLGY9dT9cInRyYW5zaXRpb25cIj09PXU/cy5sZW5ndGg6Yy5sZW5ndGg6MCk7cmV0dXJue3R5cGU6dSx0aW1lb3V0OnAscHJvcENvdW50OmYsaGFzVHJhbnNmb3JtOlwidHJhbnNpdGlvblwiPT09dSYmL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KG4udHJhbnNpdGlvblByb3BlcnR5KX19ZnVuY3Rpb24gemkoZSx0KXtmb3IoO2UubGVuZ3RoPHQubGVuZ3RoOyllPWUuY29uY2F0KGUpO3JldHVybiBNYXRoLm1heCguLi50Lm1hcCgoKHQsbik9PktpKHQpK0tpKGVbbl0pKSkpfWZ1bmN0aW9uIEtpKGUpe3JldHVybiAxZTMqTnVtYmVyKGUuc2xpY2UoMCwtMSkucmVwbGFjZShcIixcIixcIi5cIikpfWZ1bmN0aW9uIEdpKCl7cmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0fWNvbnN0IHFpPW5ldyBXZWFrTWFwLEppPW5ldyBXZWFrTWFwLFlpPXtuYW1lOlwiVHJhbnNpdGlvbkdyb3VwXCIscHJvcHM6dyh7fSxBaSx7dGFnOlN0cmluZyxtb3ZlQ2xhc3M6U3RyaW5nfSksc2V0dXAoZSx7c2xvdHM6dH0pe2NvbnN0IG49d3MoKSxvPXJvKCk7bGV0IHIscztyZXR1cm4gRm8oKCgpPT57aWYoIXIubGVuZ3RoKXJldHVybjtjb25zdCB0PWUubW92ZUNsYXNzfHxgJHtlLm5hbWV8fFwidlwifS1tb3ZlYDtpZighZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS5jbG9uZU5vZGUoKTtlLl92dGMmJmUuX3Z0Yy5mb3JFYWNoKChlPT57ZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGU9PmUmJm8uY2xhc3NMaXN0LnJlbW92ZShlKSkpfSkpO24uc3BsaXQoL1xccysvKS5mb3JFYWNoKChlPT5lJiZvLmNsYXNzTGlzdC5hZGQoZSkpKSxvLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7Y29uc3Qgcj0xPT09dC5ub2RlVHlwZT90OnQucGFyZW50Tm9kZTtyLmFwcGVuZENoaWxkKG8pO2NvbnN0e2hhc1RyYW5zZm9ybTpzfT1XaShvKTtyZXR1cm4gci5yZW1vdmVDaGlsZChvKSxzfShyWzBdLmVsLG4udm5vZGUuZWwsdCkpcmV0dXJuO3IuZm9yRWFjaChaaSksci5mb3JFYWNoKFFpKTtjb25zdCBvPXIuZmlsdGVyKFhpKTtHaSgpLG8uZm9yRWFjaCgoZT0+e2NvbnN0IG49ZS5lbCxvPW4uc3R5bGU7TGkobix0KSxvLnRyYW5zZm9ybT1vLndlYmtpdFRyYW5zZm9ybT1vLnRyYW5zaXRpb25EdXJhdGlvbj1cIlwiO2NvbnN0IHI9bi5fbW92ZUNiPWU9PntlJiZlLnRhcmdldCE9PW58fGUmJiEvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSl8fChuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsciksbi5fbW92ZUNiPW51bGwsamkobix0KSl9O24uYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIixyKX0pKX0pKSwoKT0+e2NvbnN0IGk9a3QoZSksbD1JaShpKTtsZXQgYz1pLnRhZ3x8V3I7cj1zLHM9dC5kZWZhdWx0P2ZvKHQuZGVmYXVsdCgpKTpbXTtmb3IobGV0IGU9MDtlPHMubGVuZ3RoO2UrKyl7Y29uc3QgdD1zW2VdO251bGwhPXQua2V5JiZwbyh0LGNvKHQsbCxvLG4pKX1pZihyKWZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKXtjb25zdCB0PXJbZV07cG8odCxjbyh0LGwsbyxuKSkscWkuc2V0KHQsdC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9cmV0dXJuIHVzKGMsbnVsbCxzKX19fTtmdW5jdGlvbiBaaShlKXtjb25zdCB0PWUuZWw7dC5fbW92ZUNiJiZ0Ll9tb3ZlQ2IoKSx0Ll9lbnRlckNiJiZ0Ll9lbnRlckNiKCl9ZnVuY3Rpb24gUWkoZSl7Smkuc2V0KGUsZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9ZnVuY3Rpb24gWGkoZSl7Y29uc3QgdD1xaS5nZXQoZSksbj1KaS5nZXQoZSksbz10LmxlZnQtbi5sZWZ0LHI9dC50b3Atbi50b3A7aWYob3x8cil7Y29uc3QgdD1lLmVsLnN0eWxlO3JldHVybiB0LnRyYW5zZm9ybT10LndlYmtpdFRyYW5zZm9ybT1gdHJhbnNsYXRlKCR7b31weCwke3J9cHgpYCx0LnRyYW5zaXRpb25EdXJhdGlvbj1cIjBzXCIsZX19Y29uc3QgZWw9ZT0+e2NvbnN0IHQ9ZS5wcm9wc1tcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl18fCExO3JldHVybiBFKHQpP2U9PloodCxlKTp0fTtmdW5jdGlvbiB0bChlKXtlLnRhcmdldC5jb21wb3Npbmc9ITB9ZnVuY3Rpb24gbmwoZSl7Y29uc3QgdD1lLnRhcmdldDt0LmNvbXBvc2luZyYmKHQuY29tcG9zaW5nPSExLHQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSkpfWNvbnN0IG9sPXtjcmVhdGVkKGUse21vZGlmaWVyczp7bGF6eTp0LHRyaW06bixudW1iZXI6b319LHIpe2UuX2Fzc2lnbj1lbChyKTtjb25zdCBzPW98fHIucHJvcHMmJlwibnVtYmVyXCI9PT1yLnByb3BzLnR5cGU7YmkoZSx0P1wiY2hhbmdlXCI6XCJpbnB1dFwiLCh0PT57aWYodC50YXJnZXQuY29tcG9zaW5nKXJldHVybjtsZXQgbz1lLnZhbHVlO24mJihvPW8udHJpbSgpKSxzJiYobz1YKG8pKSxlLl9hc3NpZ24obyl9KSksbiYmYmkoZSxcImNoYW5nZVwiLCgoKT0+e2UudmFsdWU9ZS52YWx1ZS50cmltKCl9KSksdHx8KGJpKGUsXCJjb21wb3NpdGlvbnN0YXJ0XCIsdGwpLGJpKGUsXCJjb21wb3NpdGlvbmVuZFwiLG5sKSxiaShlLFwiY2hhbmdlXCIsbmwpKX0sbW91bnRlZChlLHt2YWx1ZTp0fSl7ZS52YWx1ZT1udWxsPT10P1wiXCI6dH0sYmVmb3JlVXBkYXRlKGUse3ZhbHVlOnQsbW9kaWZpZXJzOntsYXp5Om4sdHJpbTpvLG51bWJlcjpyfX0scyl7aWYoZS5fYXNzaWduPWVsKHMpLGUuY29tcG9zaW5nKXJldHVybjtpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09ZSYmXCJyYW5nZVwiIT09ZS50eXBlKXtpZihuKXJldHVybjtpZihvJiZlLnZhbHVlLnRyaW0oKT09PXQpcmV0dXJuO2lmKChyfHxcIm51bWJlclwiPT09ZS50eXBlKSYmWChlLnZhbHVlKT09PXQpcmV0dXJufWNvbnN0IGk9bnVsbD09dD9cIlwiOnQ7ZS52YWx1ZSE9PWkmJihlLnZhbHVlPWkpfX0scmw9e2RlZXA6ITAsY3JlYXRlZChlLHQsbil7ZS5fYXNzaWduPWVsKG4pLGJpKGUsXCJjaGFuZ2VcIiwoKCk9Pntjb25zdCB0PWUuX21vZGVsVmFsdWUsbj1hbChlKSxvPWUuY2hlY2tlZCxyPWUuX2Fzc2lnbjtpZihFKHQpKXtjb25zdCBlPWgodCxuKSxzPS0xIT09ZTtpZihvJiYhcylyKHQuY29uY2F0KG4pKTtlbHNlIGlmKCFvJiZzKXtjb25zdCBuPVsuLi50XTtuLnNwbGljZShlLDEpLHIobil9fWVsc2UgaWYoTyh0KSl7Y29uc3QgZT1uZXcgU2V0KHQpO28/ZS5hZGQobik6ZS5kZWxldGUobikscihlKX1lbHNlIHIodWwoZSxvKSl9KSl9LG1vdW50ZWQ6c2wsYmVmb3JlVXBkYXRlKGUsdCxuKXtlLl9hc3NpZ249ZWwobiksc2woZSx0LG4pfX07ZnVuY3Rpb24gc2woZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSxvKXtlLl9tb2RlbFZhbHVlPXQsRSh0KT9lLmNoZWNrZWQ9aCh0LG8ucHJvcHMudmFsdWUpPi0xOk8odCk/ZS5jaGVja2VkPXQuaGFzKG8ucHJvcHMudmFsdWUpOnQhPT1uJiYoZS5jaGVja2VkPWQodCx1bChlLCEwKSkpfWNvbnN0IGlsPXtjcmVhdGVkKGUse3ZhbHVlOnR9LG4pe2UuY2hlY2tlZD1kKHQsbi5wcm9wcy52YWx1ZSksZS5fYXNzaWduPWVsKG4pLGJpKGUsXCJjaGFuZ2VcIiwoKCk9PntlLl9hc3NpZ24oYWwoZSkpfSkpfSxiZWZvcmVVcGRhdGUoZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSxvKXtlLl9hc3NpZ249ZWwobyksdCE9PW4mJihlLmNoZWNrZWQ9ZCh0LG8ucHJvcHMudmFsdWUpKX19LGxsPXtkZWVwOiEwLGNyZWF0ZWQoZSx7dmFsdWU6dCxtb2RpZmllcnM6e251bWJlcjpufX0sbyl7Y29uc3Qgcj1PKHQpO2JpKGUsXCJjaGFuZ2VcIiwoKCk9Pntjb25zdCB0PUFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLm9wdGlvbnMsKGU9PmUuc2VsZWN0ZWQpKS5tYXAoKGU9Pm4/WChhbChlKSk6YWwoZSkpKTtlLl9hc3NpZ24oZS5tdWx0aXBsZT9yP25ldyBTZXQodCk6dDp0WzBdKX0pKSxlLl9hc3NpZ249ZWwobyl9LG1vdW50ZWQoZSx7dmFsdWU6dH0pe2NsKGUsdCl9LGJlZm9yZVVwZGF0ZShlLHQsbil7ZS5fYXNzaWduPWVsKG4pfSx1cGRhdGVkKGUse3ZhbHVlOnR9KXtjbChlLHQpfX07ZnVuY3Rpb24gY2woZSx0KXtjb25zdCBuPWUubXVsdGlwbGU7aWYoIW58fEUodCl8fE8odCkpe2ZvcihsZXQgbz0wLHI9ZS5vcHRpb25zLmxlbmd0aDtvPHI7bysrKXtjb25zdCByPWUub3B0aW9uc1tvXSxzPWFsKHIpO2lmKG4pci5zZWxlY3RlZD1FKHQpP2godCxzKT4tMTp0LmhhcyhzKTtlbHNlIGlmKGQoYWwociksdCkpcmV0dXJuIHZvaWQoZS5zZWxlY3RlZEluZGV4IT09byYmKGUuc2VsZWN0ZWRJbmRleD1vKSl9bnx8LTE9PT1lLnNlbGVjdGVkSW5kZXh8fChlLnNlbGVjdGVkSW5kZXg9LTEpfX1mdW5jdGlvbiBhbChlKXtyZXR1cm5cIl92YWx1ZVwiaW4gZT9lLl92YWx1ZTplLnZhbHVlfWZ1bmN0aW9uIHVsKGUsdCl7Y29uc3Qgbj10P1wiX3RydWVWYWx1ZVwiOlwiX2ZhbHNlVmFsdWVcIjtyZXR1cm4gbiBpbiBlP2Vbbl06dH1jb25zdCBwbD17Y3JlYXRlZChlLHQsbil7ZmwoZSx0LG4sbnVsbCxcImNyZWF0ZWRcIil9LG1vdW50ZWQoZSx0LG4pe2ZsKGUsdCxuLG51bGwsXCJtb3VudGVkXCIpfSxiZWZvcmVVcGRhdGUoZSx0LG4sbyl7ZmwoZSx0LG4sbyxcImJlZm9yZVVwZGF0ZVwiKX0sdXBkYXRlZChlLHQsbixvKXtmbChlLHQsbixvLFwidXBkYXRlZFwiKX19O2Z1bmN0aW9uIGZsKGUsdCxuLG8scil7Y29uc3Qgcz1mdW5jdGlvbihlLHQpe3N3aXRjaChlKXtjYXNlXCJTRUxFQ1RcIjpyZXR1cm4gbGw7Y2FzZVwiVEVYVEFSRUFcIjpyZXR1cm4gb2w7ZGVmYXVsdDpzd2l0Y2godCl7Y2FzZVwiY2hlY2tib3hcIjpyZXR1cm4gcmw7Y2FzZVwicmFkaW9cIjpyZXR1cm4gaWw7ZGVmYXVsdDpyZXR1cm4gb2x9fX0oZS50YWdOYW1lLG4ucHJvcHMmJm4ucHJvcHMudHlwZSlbcl07cyYmcyhlLHQsbixvKX1jb25zdCBkbD1bXCJjdHJsXCIsXCJzaGlmdFwiLFwiYWx0XCIsXCJtZXRhXCJdLGhsPXtzdG9wOmU9PmUuc3RvcFByb3BhZ2F0aW9uKCkscHJldmVudDplPT5lLnByZXZlbnREZWZhdWx0KCksc2VsZjplPT5lLnRhcmdldCE9PWUuY3VycmVudFRhcmdldCxjdHJsOmU9PiFlLmN0cmxLZXksc2hpZnQ6ZT0+IWUuc2hpZnRLZXksYWx0OmU9PiFlLmFsdEtleSxtZXRhOmU9PiFlLm1ldGFLZXksbGVmdDplPT5cImJ1dHRvblwiaW4gZSYmMCE9PWUuYnV0dG9uLG1pZGRsZTplPT5cImJ1dHRvblwiaW4gZSYmMSE9PWUuYnV0dG9uLHJpZ2h0OmU9PlwiYnV0dG9uXCJpbiBlJiYyIT09ZS5idXR0b24sZXhhY3Q6KGUsdCk9PmRsLnNvbWUoKG49PmVbYCR7bn1LZXlgXSYmIXQuaW5jbHVkZXMobikpKX0sbWw9KGUsdCk9PihuLC4uLm8pPT57Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspe2NvbnN0IG89aGxbdFtlXV07aWYobyYmbyhuLHQpKXJldHVybn1yZXR1cm4gZShuLC4uLm8pfSxnbD17ZXNjOlwiZXNjYXBlXCIsc3BhY2U6XCIgXCIsdXA6XCJhcnJvdy11cFwiLGxlZnQ6XCJhcnJvdy1sZWZ0XCIscmlnaHQ6XCJhcnJvdy1yaWdodFwiLGRvd246XCJhcnJvdy1kb3duXCIsZGVsZXRlOlwiYmFja3NwYWNlXCJ9LHZsPShlLHQpPT5uPT57aWYoIShcImtleVwiaW4gbikpcmV0dXJuO2NvbnN0IG89RyhuLmtleSk7cmV0dXJuIHQuc29tZSgoZT0+ZT09PW98fGdsW2VdPT09bykpP2Uobik6dm9pZCAwfSx5bD17YmVmb3JlTW91bnQoZSx7dmFsdWU6dH0se3RyYW5zaXRpb246bn0pe2UuX3ZvZD1cIm5vbmVcIj09PWUuc3R5bGUuZGlzcGxheT9cIlwiOmUuc3R5bGUuZGlzcGxheSxuJiZ0P24uYmVmb3JlRW50ZXIoZSk6X2woZSx0KX0sbW91bnRlZChlLHt2YWx1ZTp0fSx7dHJhbnNpdGlvbjpufSl7biYmdCYmbi5lbnRlcihlKX0sdXBkYXRlZChlLHt2YWx1ZTp0LG9sZFZhbHVlOm59LHt0cmFuc2l0aW9uOm99KXshdCE9IW4mJihvP3Q/KG8uYmVmb3JlRW50ZXIoZSksX2woZSwhMCksby5lbnRlcihlKSk6by5sZWF2ZShlLCgoKT0+e19sKGUsITEpfSkpOl9sKGUsdCkpfSxiZWZvcmVVbm1vdW50KGUse3ZhbHVlOnR9KXtfbChlLHQpfX07ZnVuY3Rpb24gX2woZSx0KXtlLnN0eWxlLmRpc3BsYXk9dD9lLl92b2Q6XCJub25lXCJ9Y29uc3QgYmw9dyh7cGF0Y2hQcm9wOihlLHQscixzLGk9ITEsbCxjLGEsdSk9PntcImNsYXNzXCI9PT10P2Z1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuX3Z0YztvJiYodD0odD9bdCwuLi5vXTpbLi4ub10pLmpvaW4oXCIgXCIpKSxudWxsPT10P2UucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik6bj9lLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsdCk6ZS5jbGFzc05hbWU9dH0oZSxzLGkpOlwic3R5bGVcIj09PXQ/ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS5zdHlsZSxyPVAobik7aWYobiYmIXIpe2Zvcihjb25zdCBlIGluIG4pcGkobyxlLG5bZV0pO2lmKHQmJiFQKHQpKWZvcihjb25zdCBlIGluIHQpbnVsbD09bltlXSYmcGkobyxlLFwiXCIpfWVsc2V7Y29uc3Qgcz1vLmRpc3BsYXk7cj90IT09biYmKG8uY3NzVGV4dD1uKTp0JiZlLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpLFwiX3ZvZFwiaW4gZSYmKG8uZGlzcGxheT1zKX19KGUscixzKTp4KHQpP0ModCl8fFNpKGUsdCwwLHMsYyk6KFwiLlwiPT09dFswXT8odD10LnNsaWNlKDEpLDEpOlwiXlwiPT09dFswXT8odD10LnNsaWNlKDEpLDApOmZ1bmN0aW9uKGUsdCxuLG8pe2lmKG8pcmV0dXJuXCJpbm5lckhUTUxcIj09PXR8fFwidGV4dENvbnRlbnRcIj09PXR8fCEhKHQgaW4gZSYmQ2kudGVzdCh0KSYmRihuKSk7aWYoXCJzcGVsbGNoZWNrXCI9PT10fHxcImRyYWdnYWJsZVwiPT09dHx8XCJ0cmFuc2xhdGVcIj09PXQpcmV0dXJuITE7aWYoXCJmb3JtXCI9PT10KXJldHVybiExO2lmKFwibGlzdFwiPT09dCYmXCJJTlBVVFwiPT09ZS50YWdOYW1lKXJldHVybiExO2lmKFwidHlwZVwiPT09dCYmXCJURVhUQVJFQVwiPT09ZS50YWdOYW1lKXJldHVybiExO2lmKENpLnRlc3QodCkmJlAobikpcmV0dXJuITE7cmV0dXJuIHQgaW4gZX0oZSx0LHMsaSkpP2Z1bmN0aW9uKGUsdCxuLHIscyxpLGwpe2lmKFwiaW5uZXJIVE1MXCI9PT10fHxcInRleHRDb250ZW50XCI9PT10KXJldHVybiByJiZsKHIscyxpKSx2b2lkKGVbdF09bnVsbD09bj9cIlwiOm4pO2lmKFwidmFsdWVcIj09PXQmJlwiUFJPR1JFU1NcIiE9PWUudGFnTmFtZSYmIWUudGFnTmFtZS5pbmNsdWRlcyhcIi1cIikpe2UuX3ZhbHVlPW47Y29uc3Qgbz1udWxsPT1uP1wiXCI6bjtyZXR1cm4gZS52YWx1ZT09PW8mJlwiT1BUSU9OXCIhPT1lLnRhZ05hbWV8fChlLnZhbHVlPW8pLHZvaWQobnVsbD09biYmZS5yZW1vdmVBdHRyaWJ1dGUodCkpfWxldCBjPSExO2lmKFwiXCI9PT1ufHxudWxsPT1uKXtjb25zdCByPXR5cGVvZiBlW3RdO1wiYm9vbGVhblwiPT09cj9uPW8obik6bnVsbD09biYmXCJzdHJpbmdcIj09PXI/KG49XCJcIixjPSEwKTpcIm51bWJlclwiPT09ciYmKG49MCxjPSEwKX10cnl7ZVt0XT1ufWNhdGNoKGEpe31jJiZlLnJlbW92ZUF0dHJpYnV0ZSh0KX0oZSx0LHMsbCxjLGEsdSk6KFwidHJ1ZS12YWx1ZVwiPT09dD9lLl90cnVlVmFsdWU9czpcImZhbHNlLXZhbHVlXCI9PT10JiYoZS5fZmFsc2VWYWx1ZT1zKSxmdW5jdGlvbihlLHQscixzLGkpe2lmKHMmJnQuc3RhcnRzV2l0aChcInhsaW5rOlwiKSludWxsPT1yP2UucmVtb3ZlQXR0cmlidXRlTlMoaGksdC5zbGljZSg2LHQubGVuZ3RoKSk6ZS5zZXRBdHRyaWJ1dGVOUyhoaSx0LHIpO2Vsc2V7Y29uc3Qgcz1uKHQpO251bGw9PXJ8fHMmJiFvKHIpP2UucmVtb3ZlQXR0cmlidXRlKHQpOmUuc2V0QXR0cmlidXRlKHQscz9cIlwiOnIpfX0oZSx0LHMsaSkpfX0sYWkpO2xldCBTbCx4bD0hMTtmdW5jdGlvbiBDbCgpe3JldHVybiBTbHx8KFNsPUFyKGJsKSl9ZnVuY3Rpb24gd2woKXtyZXR1cm4gU2w9eGw/U2w6TXIoYmwpLHhsPSEwLFNsfWNvbnN0IGtsPSguLi5lKT0+e0NsKCkucmVuZGVyKC4uLmUpfSxUbD0oLi4uZSk9Pnt3bCgpLmh5ZHJhdGUoLi4uZSl9LE5sPSguLi5lKT0+e2NvbnN0IHQ9Q2woKS5jcmVhdGVBcHAoLi4uZSkse21vdW50Om59PXQ7cmV0dXJuIHQubW91bnQ9ZT0+e2NvbnN0IG89JGwoZSk7aWYoIW8pcmV0dXJuO2NvbnN0IHI9dC5fY29tcG9uZW50O0Yocil8fHIucmVuZGVyfHxyLnRlbXBsYXRlfHwoci50ZW1wbGF0ZT1vLmlubmVySFRNTCksby5pbm5lckhUTUw9XCJcIjtjb25zdCBzPW4obywhMSxvIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7cmV0dXJuIG8gaW5zdGFuY2VvZiBFbGVtZW50JiYoby5yZW1vdmVBdHRyaWJ1dGUoXCJ2LWNsb2FrXCIpLG8uc2V0QXR0cmlidXRlKFwiZGF0YS12LWFwcFwiLFwiXCIpKSxzfSx0fSxFbD0oLi4uZSk9Pntjb25zdCB0PXdsKCkuY3JlYXRlQXBwKC4uLmUpLHttb3VudDpufT10O3JldHVybiB0Lm1vdW50PWU9Pntjb25zdCB0PSRsKGUpO2lmKHQpcmV0dXJuIG4odCwhMCx0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl9LHR9O2Z1bmN0aW9uICRsKGUpe2lmKFAoZSkpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfXJldHVybiBlfWNvbnN0IE9sPV87dmFyIFJsPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHJlbmRlcjprbCxoeWRyYXRlOlRsLGNyZWF0ZUFwcDpObCxjcmVhdGVTU1JBcHA6RWwsaW5pdERpcmVjdGl2ZXNGb3JTU1I6T2wsZGVmaW5lQ3VzdG9tRWxlbWVudDp3aSxkZWZpbmVTU1JDdXN0b21FbGVtZW50OmtpLFZ1ZUVsZW1lbnQ6TmksdXNlQ3NzTW9kdWxlOkVpLHVzZUNzc1ZhcnM6JGksVHJhbnNpdGlvbjpGaSxUcmFuc2l0aW9uR3JvdXA6WWksdk1vZGVsVGV4dDpvbCx2TW9kZWxDaGVja2JveDpybCx2TW9kZWxSYWRpbzppbCx2TW9kZWxTZWxlY3Q6bGwsdk1vZGVsRHluYW1pYzpwbCx3aXRoTW9kaWZpZXJzOm1sLHdpdGhLZXlzOnZsLHZTaG93OnlsLHJlYWN0aXZlOmd0LHJlZjpGdCxyZWFkb25seTp5dCx1bnJlZjpJdCxwcm94eVJlZnM6THQsaXNSZWY6UnQsdG9SZWY6V3QsdG9SZWZzOkR0LGlzUHJveHk6d3QsaXNSZWFjdGl2ZTpTdCxpc1JlYWRvbmx5Onh0LGlzU2hhbGxvdzpDdCxjdXN0b21SZWY6VXQsdHJpZ2dlclJlZjpWdCxzaGFsbG93UmVmOlB0LHNoYWxsb3dSZWFjdGl2ZTp2dCxzaGFsbG93UmVhZG9ubHk6X3QsbWFya1JhdzpUdCx0b1JhdzprdCxlZmZlY3Q6eWUsc3RvcDpfZSxSZWFjdGl2ZUVmZmVjdDpnZSxlZmZlY3RTY29wZTpvZSxFZmZlY3RTY29wZTpuZSxnZXRDdXJyZW50U2NvcGU6c2Usb25TY29wZURpc3Bvc2U6aWUsY29tcHV0ZWQ6anMsd2F0Y2g6WG4sd2F0Y2hFZmZlY3Q6Sm4sd2F0Y2hQb3N0RWZmZWN0OlluLHdhdGNoU3luY0VmZmVjdDpabixvbkJlZm9yZU1vdW50OiRvLG9uTW91bnRlZDpPbyxvbkJlZm9yZVVwZGF0ZTpSbyxvblVwZGF0ZWQ6Rm8sb25CZWZvcmVVbm1vdW50OlBvLG9uVW5tb3VudGVkOkFvLG9uQWN0aXZhdGVkOlNvLG9uRGVhY3RpdmF0ZWQ6eG8sb25SZW5kZXJUcmFja2VkOklvLG9uUmVuZGVyVHJpZ2dlcmVkOlZvLG9uRXJyb3JDYXB0dXJlZDpCbyxvblNlcnZlclByZWZldGNoOk1vLHByb3ZpZGU6R24saW5qZWN0OnFuLG5leHRUaWNrOmRuLGRlZmluZUNvbXBvbmVudDpobyxkZWZpbmVBc3luY0NvbXBvbmVudDpnbyx1c2VBdHRyczpLcyx1c2VTbG90czp6cyxkZWZpbmVQcm9wczpVcyxkZWZpbmVFbWl0czpEcyxkZWZpbmVFeHBvc2U6SHMsd2l0aERlZmF1bHRzOldzLG1lcmdlRGVmYXVsdHM6cXMsY3JlYXRlUHJvcHNSZXN0UHJveHk6SnMsd2l0aEFzeW5jQ29udGV4dDpZcyxnZXRDdXJyZW50SW5zdGFuY2U6d3MsaDpacyxjcmVhdGVWTm9kZTp1cyxjbG9uZVZOb2RlOmZzLG1lcmdlUHJvcHM6X3MsaXNWTm9kZTpvcyxGcmFnbWVudDpXcixUZXh0OnpyLENvbW1lbnQ6S3IsU3RhdGljOkdyLFRlbGVwb3J0OkhyLFN1c3BlbnNlOlVuLEtlZXBBbGl2ZTpfbyxCYXNlVHJhbnNpdGlvbjppbyx3aXRoRGlyZWN0aXZlczpMbyx1c2VTU1JDb250ZXh0OlhzLHNzckNvbnRleHRLZXk6UXMsY3JlYXRlUmVuZGVyZXI6QXIsY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXI6TXIscXVldWVQb3N0Rmx1c2hDYjp2bix3YXJuOkd0LGhhbmRsZUVycm9yOlF0LGNhbGxXaXRoRXJyb3JIYW5kbGluZzpZdCxjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZzpadCxyZXNvbHZlQ29tcG9uZW50OlVvLHJlc29sdmVEaXJlY3RpdmU6V28scmVzb2x2ZUR5bmFtaWNDb21wb25lbnQ6SG8scmVnaXN0ZXJSdW50aW1lQ29tcGlsZXI6RnMsaXNSdW50aW1lT25seTpQcyx1c2VUcmFuc2l0aW9uU3RhdGU6cm8scmVzb2x2ZVRyYW5zaXRpb25Ib29rczpjbyxzZXRUcmFuc2l0aW9uSG9va3M6cG8sZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuOmZvLGluaXRDdXN0b21Gb3JtYXR0ZXI6ZWksZ2V0IGRldnRvb2xzKCl7cmV0dXJuIHhufSxzZXREZXZ0b29sc0hvb2s6d24sd2l0aEN0eDpBbixwdXNoU2NvcGVJZDpSbixwb3BTY29wZUlkOkZuLHdpdGhTY29wZUlkOlBuLHJlbmRlckxpc3Q6R28sdG9IYW5kbGVyczpabyxyZW5kZXJTbG90OkpvLGNyZWF0ZVNsb3RzOnFvLHdpdGhNZW1vOnRpLGlzTWVtb1NhbWU6bmksb3BlbkJsb2NrOllyLGNyZWF0ZUJsb2NrOm5zLHNldEJsb2NrVHJhY2tpbmc6WHIsY3JlYXRlVGV4dFZOb2RlOmRzLGNyZWF0ZUNvbW1lbnRWTm9kZTptcyxjcmVhdGVTdGF0aWNWTm9kZTpocyxjcmVhdGVFbGVtZW50Vk5vZGU6YXMsY3JlYXRlRWxlbWVudEJsb2NrOnRzLGd1YXJkUmVhY3RpdmVQcm9wczpwcyx0b0Rpc3BsYXlTdHJpbmc6bSxjYW1lbGl6ZTp6LGNhcGl0YWxpemU6cSx0b0hhbmRsZXJLZXk6Sixub3JtYWxpemVQcm9wczphLG5vcm1hbGl6ZUNsYXNzOmMsbm9ybWFsaXplU3R5bGU6cix0cmFuc2Zvcm1WTm9kZUFyZ3M6c3MsdmVyc2lvbjpvaSxzc3JVdGlsczpudWxsLHJlc29sdmVGaWx0ZXI6bnVsbCxjb21wYXRVdGlsczpudWxsfSk7ZnVuY3Rpb24gRmwoZSl7dGhyb3cgZX1mdW5jdGlvbiBQbChlKXt9ZnVuY3Rpb24gQWwoZSx0LG4sbyl7Y29uc3Qgcj1uZXcgU3ludGF4RXJyb3IoU3RyaW5nKGUpKTtyZXR1cm4gci5jb2RlPWUsci5sb2M9dCxyfWNvbnN0IE1sPVN5bWJvbChcIlwiKSxWbD1TeW1ib2woXCJcIiksSWw9U3ltYm9sKFwiXCIpLEJsPVN5bWJvbChcIlwiKSxMbD1TeW1ib2woXCJcIiksamw9U3ltYm9sKFwiXCIpLFVsPVN5bWJvbChcIlwiKSxEbD1TeW1ib2woXCJcIiksSGw9U3ltYm9sKFwiXCIpLFdsPVN5bWJvbChcIlwiKSx6bD1TeW1ib2woXCJcIiksS2w9U3ltYm9sKFwiXCIpLEdsPVN5bWJvbChcIlwiKSxxbD1TeW1ib2woXCJcIiksSmw9U3ltYm9sKFwiXCIpLFlsPVN5bWJvbChcIlwiKSxabD1TeW1ib2woXCJcIiksUWw9U3ltYm9sKFwiXCIpLFhsPVN5bWJvbChcIlwiKSxlYz1TeW1ib2woXCJcIiksdGM9U3ltYm9sKFwiXCIpLG5jPVN5bWJvbChcIlwiKSxvYz1TeW1ib2woXCJcIikscmM9U3ltYm9sKFwiXCIpLHNjPVN5bWJvbChcIlwiKSxpYz1TeW1ib2woXCJcIiksbGM9U3ltYm9sKFwiXCIpLGNjPVN5bWJvbChcIlwiKSxhYz1TeW1ib2woXCJcIiksdWM9U3ltYm9sKFwiXCIpLHBjPVN5bWJvbChcIlwiKSxmYz1TeW1ib2woXCJcIiksZGM9U3ltYm9sKFwiXCIpLGhjPVN5bWJvbChcIlwiKSxtYz1TeW1ib2woXCJcIiksZ2M9U3ltYm9sKFwiXCIpLHZjPVN5bWJvbChcIlwiKSx5Yz1TeW1ib2woXCJcIiksX2M9U3ltYm9sKFwiXCIpLGJjPXtbTWxdOlwiRnJhZ21lbnRcIixbVmxdOlwiVGVsZXBvcnRcIixbSWxdOlwiU3VzcGVuc2VcIixbQmxdOlwiS2VlcEFsaXZlXCIsW0xsXTpcIkJhc2VUcmFuc2l0aW9uXCIsW2psXTpcIm9wZW5CbG9ja1wiLFtVbF06XCJjcmVhdGVCbG9ja1wiLFtEbF06XCJjcmVhdGVFbGVtZW50QmxvY2tcIixbSGxdOlwiY3JlYXRlVk5vZGVcIixbV2xdOlwiY3JlYXRlRWxlbWVudFZOb2RlXCIsW3psXTpcImNyZWF0ZUNvbW1lbnRWTm9kZVwiLFtLbF06XCJjcmVhdGVUZXh0Vk5vZGVcIixbR2xdOlwiY3JlYXRlU3RhdGljVk5vZGVcIixbcWxdOlwicmVzb2x2ZUNvbXBvbmVudFwiLFtKbF06XCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudFwiLFtZbF06XCJyZXNvbHZlRGlyZWN0aXZlXCIsW1psXTpcInJlc29sdmVGaWx0ZXJcIixbUWxdOlwid2l0aERpcmVjdGl2ZXNcIixbWGxdOlwicmVuZGVyTGlzdFwiLFtlY106XCJyZW5kZXJTbG90XCIsW3RjXTpcImNyZWF0ZVNsb3RzXCIsW25jXTpcInRvRGlzcGxheVN0cmluZ1wiLFtvY106XCJtZXJnZVByb3BzXCIsW3JjXTpcIm5vcm1hbGl6ZUNsYXNzXCIsW3NjXTpcIm5vcm1hbGl6ZVN0eWxlXCIsW2ljXTpcIm5vcm1hbGl6ZVByb3BzXCIsW2xjXTpcImd1YXJkUmVhY3RpdmVQcm9wc1wiLFtjY106XCJ0b0hhbmRsZXJzXCIsW2FjXTpcImNhbWVsaXplXCIsW3VjXTpcImNhcGl0YWxpemVcIixbcGNdOlwidG9IYW5kbGVyS2V5XCIsW2ZjXTpcInNldEJsb2NrVHJhY2tpbmdcIixbZGNdOlwicHVzaFNjb3BlSWRcIixbaGNdOlwicG9wU2NvcGVJZFwiLFttY106XCJ3aXRoQ3R4XCIsW2djXTpcInVucmVmXCIsW3ZjXTpcImlzUmVmXCIsW3ljXTpcIndpdGhNZW1vXCIsW19jXTpcImlzTWVtb1NhbWVcIn07Y29uc3QgU2M9e3NvdXJjZTpcIlwiLHN0YXJ0OntsaW5lOjEsY29sdW1uOjEsb2Zmc2V0OjB9LGVuZDp7bGluZToxLGNvbHVtbjoxLG9mZnNldDowfX07ZnVuY3Rpb24geGMoZSx0LG4sbyxyLHMsaSxsPSExLGM9ITEsYT0hMSx1PVNjKXtyZXR1cm4gZSYmKGw/KGUuaGVscGVyKGpsKSxlLmhlbHBlcihaYyhlLmluU1NSLGEpKSk6ZS5oZWxwZXIoWWMoZS5pblNTUixhKSksaSYmZS5oZWxwZXIoUWwpKSx7dHlwZToxMyx0YWc6dCxwcm9wczpuLGNoaWxkcmVuOm8scGF0Y2hGbGFnOnIsZHluYW1pY1Byb3BzOnMsZGlyZWN0aXZlczppLGlzQmxvY2s6bCxkaXNhYmxlVHJhY2tpbmc6Yyxpc0NvbXBvbmVudDphLGxvYzp1fX1mdW5jdGlvbiBDYyhlLHQ9U2Mpe3JldHVybnt0eXBlOjE3LGxvYzp0LGVsZW1lbnRzOmV9fWZ1bmN0aW9uIHdjKGUsdD1TYyl7cmV0dXJue3R5cGU6MTUsbG9jOnQscHJvcGVydGllczplfX1mdW5jdGlvbiBrYyhlLHQpe3JldHVybnt0eXBlOjE2LGxvYzpTYyxrZXk6UChlKT9UYyhlLCEwKTplLHZhbHVlOnR9fWZ1bmN0aW9uIFRjKGUsdD0hMSxuPVNjLG89MCl7cmV0dXJue3R5cGU6NCxsb2M6bixjb250ZW50OmUsaXNTdGF0aWM6dCxjb25zdFR5cGU6dD8zOm99fWZ1bmN0aW9uIE5jKGUsdD1TYyl7cmV0dXJue3R5cGU6OCxsb2M6dCxjaGlsZHJlbjplfX1mdW5jdGlvbiBFYyhlLHQ9W10sbj1TYyl7cmV0dXJue3R5cGU6MTQsbG9jOm4sY2FsbGVlOmUsYXJndW1lbnRzOnR9fWZ1bmN0aW9uICRjKGUsdCxuPSExLG89ITEscj1TYyl7cmV0dXJue3R5cGU6MTgscGFyYW1zOmUscmV0dXJuczp0LG5ld2xpbmU6bixpc1Nsb3Q6byxsb2M6cn19ZnVuY3Rpb24gT2MoZSx0LG4sbz0hMCl7cmV0dXJue3R5cGU6MTksdGVzdDplLGNvbnNlcXVlbnQ6dCxhbHRlcm5hdGU6bixuZXdsaW5lOm8sbG9jOlNjfX1jb25zdCBSYz1lPT40PT09ZS50eXBlJiZlLmlzU3RhdGljLEZjPShlLHQpPT5lPT09dHx8ZT09PUcodCk7ZnVuY3Rpb24gUGMoZSl7cmV0dXJuIEZjKGUsXCJUZWxlcG9ydFwiKT9WbDpGYyhlLFwiU3VzcGVuc2VcIik/SWw6RmMoZSxcIktlZXBBbGl2ZVwiKT9CbDpGYyhlLFwiQmFzZVRyYW5zaXRpb25cIik/TGw6dm9pZCAwfWNvbnN0IEFjPS9eXFxkfFteXFwkXFx3XS8sTWM9ZT0+IUFjLnRlc3QoZSksVmM9L1tBLVphLXpfJFxceEEwLVxcdUZGRkZdLyxJYz0vW1xcLlxcP1xcdyRcXHhBMC1cXHVGRkZGXS8sQmM9L1xccytbLltdXFxzKnxcXHMqWy5bXVxccysvZyxMYz1lPT57ZT1lLnRyaW0oKS5yZXBsYWNlKEJjLChlPT5lLnRyaW0oKSkpO2xldCB0PTAsbj1bXSxvPTAscj0wLHM9bnVsbDtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKyl7Y29uc3QgbD1lLmNoYXJBdChpKTtzd2l0Y2godCl7Y2FzZSAwOmlmKFwiW1wiPT09bCluLnB1c2godCksdD0xLG8rKztlbHNlIGlmKFwiKFwiPT09bCluLnB1c2godCksdD0yLHIrKztlbHNlIGlmKCEoMD09PWk/VmM6SWMpLnRlc3QobCkpcmV0dXJuITE7YnJlYWs7Y2FzZSAxOlwiJ1wiPT09bHx8J1wiJz09PWx8fFwiYFwiPT09bD8obi5wdXNoKHQpLHQ9MyxzPWwpOlwiW1wiPT09bD9vKys6XCJdXCI9PT1sJiYoLS1vfHwodD1uLnBvcCgpKSk7YnJlYWs7Y2FzZSAyOmlmKFwiJ1wiPT09bHx8J1wiJz09PWx8fFwiYFwiPT09bCluLnB1c2godCksdD0zLHM9bDtlbHNlIGlmKFwiKFwiPT09bClyKys7ZWxzZSBpZihcIilcIj09PWwpe2lmKGk9PT1lLmxlbmd0aC0xKXJldHVybiExOy0tcnx8KHQ9bi5wb3AoKSl9YnJlYWs7Y2FzZSAzOmw9PT1zJiYodD1uLnBvcCgpLHM9bnVsbCl9fXJldHVybiFvJiYhcn07ZnVuY3Rpb24gamMoZSx0LG4pe2NvbnN0IG89e3NvdXJjZTplLnNvdXJjZS5zbGljZSh0LHQrbiksc3RhcnQ6VWMoZS5zdGFydCxlLnNvdXJjZSx0KSxlbmQ6ZS5lbmR9O3JldHVybiBudWxsIT1uJiYoby5lbmQ9VWMoZS5zdGFydCxlLnNvdXJjZSx0K24pKSxvfWZ1bmN0aW9uIFVjKGUsdCxuPXQubGVuZ3RoKXtyZXR1cm4gRGModyh7fSxlKSx0LG4pfWZ1bmN0aW9uIERjKGUsdCxuPXQubGVuZ3RoKXtsZXQgbz0wLHI9LTE7Zm9yKGxldCBzPTA7czxuO3MrKykxMD09PXQuY2hhckNvZGVBdChzKSYmKG8rKyxyPXMpO3JldHVybiBlLm9mZnNldCs9bixlLmxpbmUrPW8sZS5jb2x1bW49LTE9PT1yP2UuY29sdW1uK246bi1yLGV9ZnVuY3Rpb24gSGMoZSx0LG49ITEpe2ZvcihsZXQgbz0wO288ZS5wcm9wcy5sZW5ndGg7bysrKXtjb25zdCByPWUucHJvcHNbb107aWYoNz09PXIudHlwZSYmKG58fHIuZXhwKSYmKFAodCk/ci5uYW1lPT09dDp0LnRlc3Qoci5uYW1lKSkpcmV0dXJuIHJ9fWZ1bmN0aW9uIFdjKGUsdCxuPSExLG89ITEpe2ZvcihsZXQgcj0wO3I8ZS5wcm9wcy5sZW5ndGg7cisrKXtjb25zdCBzPWUucHJvcHNbcl07aWYoNj09PXMudHlwZSl7aWYobiljb250aW51ZTtpZihzLm5hbWU9PT10JiYocy52YWx1ZXx8bykpcmV0dXJuIHN9ZWxzZSBpZihcImJpbmRcIj09PXMubmFtZSYmKHMuZXhwfHxvKSYmemMocy5hcmcsdCkpcmV0dXJuIHN9fWZ1bmN0aW9uIHpjKGUsdCl7cmV0dXJuISghZXx8IVJjKGUpfHxlLmNvbnRlbnQhPT10KX1mdW5jdGlvbiBLYyhlKXtyZXR1cm4gNT09PWUudHlwZXx8Mj09PWUudHlwZX1mdW5jdGlvbiBHYyhlKXtyZXR1cm4gNz09PWUudHlwZSYmXCJzbG90XCI9PT1lLm5hbWV9ZnVuY3Rpb24gcWMoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJjM9PT1lLnRhZ1R5cGV9ZnVuY3Rpb24gSmMoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJjI9PT1lLnRhZ1R5cGV9ZnVuY3Rpb24gWWMoZSx0KXtyZXR1cm4gZXx8dD9IbDpXbH1mdW5jdGlvbiBaYyhlLHQpe3JldHVybiBlfHx0P1VsOkRsfWNvbnN0IFFjPW5ldyBTZXQoW2ljLGxjXSk7ZnVuY3Rpb24gWGMoZSx0PVtdKXtpZihlJiYhUChlKSYmMTQ9PT1lLnR5cGUpe2NvbnN0IG49ZS5jYWxsZWU7aWYoIVAobikmJlFjLmhhcyhuKSlyZXR1cm4gWGMoZS5hcmd1bWVudHNbMF0sdC5jb25jYXQoZSkpfXJldHVybltlLHRdfWZ1bmN0aW9uIGVhKGUsdCxuKXtsZXQgbyxyLHM9MTM9PT1lLnR5cGU/ZS5wcm9wczplLmFyZ3VtZW50c1syXSxpPVtdO2lmKHMmJiFQKHMpJiYxND09PXMudHlwZSl7Y29uc3QgZT1YYyhzKTtzPWVbMF0saT1lWzFdLHI9aVtpLmxlbmd0aC0xXX1pZihudWxsPT1zfHxQKHMpKW89d2MoW3RdKTtlbHNlIGlmKDE0PT09cy50eXBlKXtjb25zdCBlPXMuYXJndW1lbnRzWzBdO1AoZSl8fDE1IT09ZS50eXBlP3MuY2FsbGVlPT09Y2M/bz1FYyhuLmhlbHBlcihvYyksW3djKFt0XSksc10pOnMuYXJndW1lbnRzLnVuc2hpZnQod2MoW3RdKSk6ZS5wcm9wZXJ0aWVzLnVuc2hpZnQodCksIW8mJihvPXMpfWVsc2UgaWYoMTU9PT1zLnR5cGUpe2xldCBlPSExO2lmKDQ9PT10LmtleS50eXBlKXtjb25zdCBuPXQua2V5LmNvbnRlbnQ7ZT1zLnByb3BlcnRpZXMuc29tZSgoZT0+ND09PWUua2V5LnR5cGUmJmUua2V5LmNvbnRlbnQ9PT1uKSl9ZXx8cy5wcm9wZXJ0aWVzLnVuc2hpZnQodCksbz1zfWVsc2Ugbz1FYyhuLmhlbHBlcihvYyksW3djKFt0XSksc10pLHImJnIuY2FsbGVlPT09bGMmJihyPWlbaS5sZW5ndGgtMl0pOzEzPT09ZS50eXBlP3I/ci5hcmd1bWVudHNbMF09bzplLnByb3BzPW86cj9yLmFyZ3VtZW50c1swXT1vOmUuYXJndW1lbnRzWzJdPW99ZnVuY3Rpb24gdGEoZSx0KXtyZXR1cm5gXyR7dH1fJHtlLnJlcGxhY2UoL1teXFx3XS9nLCgodCxuKT0+XCItXCI9PT10P1wiX1wiOmUuY2hhckNvZGVBdChuKS50b1N0cmluZygpKSl9YH1mdW5jdGlvbiBuYShlLHtoZWxwZXI6dCxyZW1vdmVIZWxwZXI6bixpblNTUjpvfSl7ZS5pc0Jsb2NrfHwoZS5pc0Jsb2NrPSEwLG4oWWMobyxlLmlzQ29tcG9uZW50KSksdChqbCksdChaYyhvLGUuaXNDb21wb25lbnQpKSl9Y29uc3Qgb2E9LyYoZ3R8bHR8YW1wfGFwb3N8cXVvdCk7L2cscmE9e2d0OlwiPlwiLGx0OlwiPFwiLGFtcDpcIiZcIixhcG9zOlwiJ1wiLHF1b3Q6J1wiJ30sc2E9e2RlbGltaXRlcnM6W1wie3tcIixcIn19XCJdLGdldE5hbWVzcGFjZTooKT0+MCxnZXRUZXh0TW9kZTooKT0+MCxpc1ZvaWRUYWc6Yixpc1ByZVRhZzpiLGlzQ3VzdG9tRWxlbWVudDpiLGRlY29kZUVudGl0aWVzOmU9PmUucmVwbGFjZShvYSwoKGUsdCk9PnJhW3RdKSksb25FcnJvcjpGbCxvbldhcm46UGwsY29tbWVudHM6ITF9O2Z1bmN0aW9uIGlhKGUsdD17fSl7Y29uc3Qgbj1mdW5jdGlvbihlLHQpe2NvbnN0IG49dyh7fSxzYSk7bGV0IG87Zm9yKG8gaW4gdCluW29dPXZvaWQgMD09PXRbb10/c2Fbb106dFtvXTtyZXR1cm57b3B0aW9uczpuLGNvbHVtbjoxLGxpbmU6MSxvZmZzZXQ6MCxvcmlnaW5hbFNvdXJjZTplLHNvdXJjZTplLGluUHJlOiExLGluVlByZTohMSxvbldhcm46bi5vbldhcm59fShlLHQpLG89YmEobik7cmV0dXJuIGZ1bmN0aW9uKGUsdD1TYyl7cmV0dXJue3R5cGU6MCxjaGlsZHJlbjplLGhlbHBlcnM6W10sY29tcG9uZW50czpbXSxkaXJlY3RpdmVzOltdLGhvaXN0czpbXSxpbXBvcnRzOltdLGNhY2hlZDowLHRlbXBzOjAsY29kZWdlbk5vZGU6dm9pZCAwLGxvYzp0fX0obGEobiwwLFtdKSxTYShuLG8pKX1mdW5jdGlvbiBsYShlLHQsbil7Y29uc3Qgbz14YShuKSxyPW8/by5uczowLHM9W107Zm9yKDshTmEoZSx0LG4pOyl7Y29uc3QgaT1lLnNvdXJjZTtsZXQgbDtpZigwPT09dHx8MT09PXQpaWYoIWUuaW5WUHJlJiZDYShpLGUub3B0aW9ucy5kZWxpbWl0ZXJzWzBdKSlsPXZhKGUsdCk7ZWxzZSBpZigwPT09dCYmXCI8XCI9PT1pWzBdKWlmKDE9PT1pLmxlbmd0aCk7ZWxzZSBpZihcIiFcIj09PWlbMV0pbD1DYShpLFwiXFx4M2MhLS1cIik/dWEoZSk6Q2EoaSxcIjwhRE9DVFlQRVwiKT9wYShlKTpDYShpLFwiPCFbQ0RBVEFbXCIpJiYwIT09cj9hYShlLG4pOnBhKGUpO2Vsc2UgaWYoXCIvXCI9PT1pWzFdKWlmKDI9PT1pLmxlbmd0aCk7ZWxzZXtpZihcIj5cIj09PWlbMl0pe3dhKGUsMyk7Y29udGludWV9aWYoL1thLXpdL2kudGVzdChpWzJdKSl7aGEoZSwxLG8pO2NvbnRpbnVlfWw9cGEoZSl9ZWxzZS9bYS16XS9pLnRlc3QoaVsxXSk/bD1mYShlLG4pOlwiP1wiPT09aVsxXSYmKGw9cGEoZSkpO2lmKGx8fChsPXlhKGUsdCkpLEUobCkpZm9yKGxldCBlPTA7ZTxsLmxlbmd0aDtlKyspY2EocyxsW2VdKTtlbHNlIGNhKHMsbCl9bGV0IGk9ITE7aWYoMiE9PXQmJjEhPT10KXtjb25zdCB0PVwicHJlc2VydmVcIiE9PWUub3B0aW9ucy53aGl0ZXNwYWNlO2ZvcihsZXQgbj0wO248cy5sZW5ndGg7bisrKXtjb25zdCBvPXNbbl07aWYoZS5pblByZXx8MiE9PW8udHlwZSkzIT09by50eXBlfHxlLm9wdGlvbnMuY29tbWVudHN8fChpPSEwLHNbbl09bnVsbCk7ZWxzZSBpZigvW15cXHRcXHJcXG5cXGYgXS8udGVzdChvLmNvbnRlbnQpKXQmJihvLmNvbnRlbnQ9by5jb250ZW50LnJlcGxhY2UoL1tcXHRcXHJcXG5cXGYgXSsvZyxcIiBcIikpO2Vsc2V7Y29uc3QgZT1zW24tMV0scj1zW24rMV07IWV8fCFyfHx0JiYoMz09PWUudHlwZXx8Mz09PXIudHlwZXx8MT09PWUudHlwZSYmMT09PXIudHlwZSYmL1tcXHJcXG5dLy50ZXN0KG8uY29udGVudCkpPyhpPSEwLHNbbl09bnVsbCk6by5jb250ZW50PVwiIFwifX1pZihlLmluUHJlJiZvJiZlLm9wdGlvbnMuaXNQcmVUYWcoby50YWcpKXtjb25zdCBlPXNbMF07ZSYmMj09PWUudHlwZSYmKGUuY29udGVudD1lLmNvbnRlbnQucmVwbGFjZSgvXlxccj9cXG4vLFwiXCIpKX19cmV0dXJuIGk/cy5maWx0ZXIoQm9vbGVhbik6c31mdW5jdGlvbiBjYShlLHQpe2lmKDI9PT10LnR5cGUpe2NvbnN0IG49eGEoZSk7aWYobiYmMj09PW4udHlwZSYmbi5sb2MuZW5kLm9mZnNldD09PXQubG9jLnN0YXJ0Lm9mZnNldClyZXR1cm4gbi5jb250ZW50Kz10LmNvbnRlbnQsbi5sb2MuZW5kPXQubG9jLmVuZCx2b2lkKG4ubG9jLnNvdXJjZSs9dC5sb2Muc291cmNlKX1lLnB1c2godCl9ZnVuY3Rpb24gYWEoZSx0KXt3YShlLDkpO2NvbnN0IG49bGEoZSwzLHQpO3JldHVybiAwPT09ZS5zb3VyY2UubGVuZ3RofHx3YShlLDMpLG59ZnVuY3Rpb24gdWEoZSl7Y29uc3QgdD1iYShlKTtsZXQgbjtjb25zdCBvPS8tLShcXCEpPz4vLmV4ZWMoZS5zb3VyY2UpO2lmKG8pe249ZS5zb3VyY2Uuc2xpY2UoNCxvLmluZGV4KTtjb25zdCB0PWUuc291cmNlLnNsaWNlKDAsby5pbmRleCk7bGV0IHI9MSxzPTA7Zm9yKDstMSE9PShzPXQuaW5kZXhPZihcIlxceDNjIS0tXCIscikpOyl3YShlLHMtcisxKSxyPXMrMTt3YShlLG8uaW5kZXgrb1swXS5sZW5ndGgtcisxKX1lbHNlIG49ZS5zb3VyY2Uuc2xpY2UoNCksd2EoZSxlLnNvdXJjZS5sZW5ndGgpO3JldHVybnt0eXBlOjMsY29udGVudDpuLGxvYzpTYShlLHQpfX1mdW5jdGlvbiBwYShlKXtjb25zdCB0PWJhKGUpLG49XCI/XCI9PT1lLnNvdXJjZVsxXT8xOjI7bGV0IG87Y29uc3Qgcj1lLnNvdXJjZS5pbmRleE9mKFwiPlwiKTtyZXR1cm4tMT09PXI/KG89ZS5zb3VyY2Uuc2xpY2Uobiksd2EoZSxlLnNvdXJjZS5sZW5ndGgpKToobz1lLnNvdXJjZS5zbGljZShuLHIpLHdhKGUscisxKSkse3R5cGU6Myxjb250ZW50Om8sbG9jOlNhKGUsdCl9fWZ1bmN0aW9uIGZhKGUsdCl7Y29uc3Qgbj1lLmluUHJlLG89ZS5pblZQcmUscj14YSh0KSxzPWhhKGUsMCxyKSxpPWUuaW5QcmUmJiFuLGw9ZS5pblZQcmUmJiFvO2lmKHMuaXNTZWxmQ2xvc2luZ3x8ZS5vcHRpb25zLmlzVm9pZFRhZyhzLnRhZykpcmV0dXJuIGkmJihlLmluUHJlPSExKSxsJiYoZS5pblZQcmU9ITEpLHM7dC5wdXNoKHMpO2NvbnN0IGM9ZS5vcHRpb25zLmdldFRleHRNb2RlKHMsciksYT1sYShlLGMsdCk7aWYodC5wb3AoKSxzLmNoaWxkcmVuPWEsRWEoZS5zb3VyY2Uscy50YWcpKWhhKGUsMSxyKTtlbHNlIGlmKDA9PT1lLnNvdXJjZS5sZW5ndGgmJlwic2NyaXB0XCI9PT1zLnRhZy50b0xvd2VyQ2FzZSgpKXtjb25zdCBlPWFbMF07ZSYmQ2EoZS5sb2Muc291cmNlLFwiXFx4M2MhLS1cIil9cmV0dXJuIHMubG9jPVNhKGUscy5sb2Muc3RhcnQpLGkmJihlLmluUHJlPSExKSxsJiYoZS5pblZQcmU9ITEpLHN9Y29uc3QgZGE9ZShcImlmLGVsc2UsZWxzZS1pZixmb3Isc2xvdFwiKTtmdW5jdGlvbiBoYShlLHQsbil7Y29uc3Qgbz1iYShlKSxyPS9ePFxcLz8oW2Etel1bXlxcdFxcclxcblxcZiAvPl0qKS9pLmV4ZWMoZS5zb3VyY2UpLHM9clsxXSxpPWUub3B0aW9ucy5nZXROYW1lc3BhY2UocyxuKTt3YShlLHJbMF0ubGVuZ3RoKSxrYShlKTtjb25zdCBsPWJhKGUpLGM9ZS5zb3VyY2U7ZS5vcHRpb25zLmlzUHJlVGFnKHMpJiYoZS5pblByZT0hMCk7bGV0IGE9bWEoZSx0KTswPT09dCYmIWUuaW5WUHJlJiZhLnNvbWUoKGU9Pjc9PT1lLnR5cGUmJlwicHJlXCI9PT1lLm5hbWUpKSYmKGUuaW5WUHJlPSEwLHcoZSxsKSxlLnNvdXJjZT1jLGE9bWEoZSx0KS5maWx0ZXIoKGU9Plwidi1wcmVcIiE9PWUubmFtZSkpKTtsZXQgdT0hMTtpZigwPT09ZS5zb3VyY2UubGVuZ3RofHwodT1DYShlLnNvdXJjZSxcIi8+XCIpLHdhKGUsdT8yOjEpKSwxPT09dClyZXR1cm47bGV0IHA9MDtyZXR1cm4gZS5pblZQcmV8fChcInNsb3RcIj09PXM/cD0yOlwidGVtcGxhdGVcIj09PXM/YS5zb21lKChlPT43PT09ZS50eXBlJiZkYShlLm5hbWUpKSkmJihwPTMpOmZ1bmN0aW9uKGUsdCxuKXtjb25zdCBvPW4ub3B0aW9ucztpZihvLmlzQ3VzdG9tRWxlbWVudChlKSlyZXR1cm4hMTtpZihcImNvbXBvbmVudFwiPT09ZXx8L15bQS1aXS8udGVzdChlKXx8UGMoZSl8fG8uaXNCdWlsdEluQ29tcG9uZW50JiZvLmlzQnVpbHRJbkNvbXBvbmVudChlKXx8by5pc05hdGl2ZVRhZyYmIW8uaXNOYXRpdmVUYWcoZSkpcmV0dXJuITA7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspe2NvbnN0IGU9dFtyXTtpZig2PT09ZS50eXBlKXtpZihcImlzXCI9PT1lLm5hbWUmJmUudmFsdWUmJmUudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSlyZXR1cm4hMH1lbHNle2lmKFwiaXNcIj09PWUubmFtZSlyZXR1cm4hMDtcImJpbmRcIj09PWUubmFtZSYmemMoZS5hcmcsXCJpc1wiKX19fShzLGEsZSkmJihwPTEpKSx7dHlwZToxLG5zOmksdGFnOnMsdGFnVHlwZTpwLHByb3BzOmEsaXNTZWxmQ2xvc2luZzp1LGNoaWxkcmVuOltdLGxvYzpTYShlLG8pLGNvZGVnZW5Ob2RlOnZvaWQgMH19ZnVuY3Rpb24gbWEoZSx0KXtjb25zdCBuPVtdLG89bmV3IFNldDtmb3IoO2Uuc291cmNlLmxlbmd0aD4wJiYhQ2EoZS5zb3VyY2UsXCI+XCIpJiYhQ2EoZS5zb3VyY2UsXCIvPlwiKTspe2lmKENhKGUuc291cmNlLFwiL1wiKSl7d2EoZSwxKSxrYShlKTtjb250aW51ZX1jb25zdCByPWdhKGUsbyk7Nj09PXIudHlwZSYmci52YWx1ZSYmXCJjbGFzc1wiPT09ci5uYW1lJiYoci52YWx1ZS5jb250ZW50PXIudmFsdWUuY29udGVudC5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLnRyaW0oKSksMD09PXQmJm4ucHVzaChyKSwvXlteXFx0XFxyXFxuXFxmIC8+XS8udGVzdChlLnNvdXJjZSksa2EoZSl9cmV0dXJuIG59ZnVuY3Rpb24gZ2EoZSx0KXtjb25zdCBuPWJhKGUpLG89L15bXlxcdFxcclxcblxcZiAvPl1bXlxcdFxcclxcblxcZiAvPj1dKi8uZXhlYyhlLnNvdXJjZSlbMF07dC5oYXMobyksdC5hZGQobyk7e2NvbnN0IGU9L1tcIic8XS9nO2xldCB0O2Zvcig7dD1lLmV4ZWMobyk7KTt9bGV0IHI7d2EoZSxvLmxlbmd0aCksL15bXFx0XFxyXFxuXFxmIF0qPS8udGVzdChlLnNvdXJjZSkmJihrYShlKSx3YShlLDEpLGthKGUpLHI9ZnVuY3Rpb24oZSl7Y29uc3QgdD1iYShlKTtsZXQgbjtjb25zdCBvPWUuc291cmNlWzBdLHI9J1wiJz09PW98fFwiJ1wiPT09bztpZihyKXt3YShlLDEpO2NvbnN0IHQ9ZS5zb3VyY2UuaW5kZXhPZihvKTstMT09PXQ/bj1fYShlLGUuc291cmNlLmxlbmd0aCw0KToobj1fYShlLHQsNCksd2EoZSwxKSl9ZWxzZXtjb25zdCB0PS9eW15cXHRcXHJcXG5cXGYgPl0rLy5leGVjKGUuc291cmNlKTtpZighdClyZXR1cm47Y29uc3Qgbz0vW1wiJzw9YF0vZztsZXQgcjtmb3IoO3I9by5leGVjKHRbMF0pOyk7bj1fYShlLHRbMF0ubGVuZ3RoLDQpfXJldHVybntjb250ZW50Om4saXNRdW90ZWQ6cixsb2M6U2EoZSx0KX19KGUpKTtjb25zdCBzPVNhKGUsbik7aWYoIWUuaW5WUHJlJiYvXih2LVtBLVphLXowLTktXXw6fFxcLnxAfCMpLy50ZXN0KG8pKXtjb25zdCB0PS8oPzpedi0oW2EtejAtOS1dKykpPyg/Oig/Ojp8XlxcLnxeQHxeIykoXFxbW15cXF1dK1xcXXxbXlxcLl0rKSk/KC4rKT8kL2kuZXhlYyhvKTtsZXQgaSxsPUNhKG8sXCIuXCIpLGM9dFsxXXx8KGx8fENhKG8sXCI6XCIpP1wiYmluZFwiOkNhKG8sXCJAXCIpP1wib25cIjpcInNsb3RcIik7aWYodFsyXSl7Y29uc3Qgcj1cInNsb3RcIj09PWMscz1vLmxhc3RJbmRleE9mKHRbMl0pLGw9U2EoZSxUYShlLG4scyksVGEoZSxuLHMrdFsyXS5sZW5ndGgrKHImJnRbM118fFwiXCIpLmxlbmd0aCkpO2xldCBhPXRbMl0sdT0hMDthLnN0YXJ0c1dpdGgoXCJbXCIpPyh1PSExLGE9YS5lbmRzV2l0aChcIl1cIik/YS5zbGljZSgxLGEubGVuZ3RoLTEpOmEuc2xpY2UoMSkpOnImJihhKz10WzNdfHxcIlwiKSxpPXt0eXBlOjQsY29udGVudDphLGlzU3RhdGljOnUsY29uc3RUeXBlOnU/MzowLGxvYzpsfX1pZihyJiZyLmlzUXVvdGVkKXtjb25zdCBlPXIubG9jO2Uuc3RhcnQub2Zmc2V0KyssZS5zdGFydC5jb2x1bW4rKyxlLmVuZD1VYyhlLnN0YXJ0LHIuY29udGVudCksZS5zb3VyY2U9ZS5zb3VyY2Uuc2xpY2UoMSwtMSl9Y29uc3QgYT10WzNdP3RbM10uc2xpY2UoMSkuc3BsaXQoXCIuXCIpOltdO3JldHVybiBsJiZhLnB1c2goXCJwcm9wXCIpLHt0eXBlOjcsbmFtZTpjLGV4cDpyJiZ7dHlwZTo0LGNvbnRlbnQ6ci5jb250ZW50LGlzU3RhdGljOiExLGNvbnN0VHlwZTowLGxvYzpyLmxvY30sYXJnOmksbW9kaWZpZXJzOmEsbG9jOnN9fXJldHVybiFlLmluVlByZSYmQ2EobyxcInYtXCIpLHt0eXBlOjYsbmFtZTpvLHZhbHVlOnImJnt0eXBlOjIsY29udGVudDpyLmNvbnRlbnQsbG9jOnIubG9jfSxsb2M6c319ZnVuY3Rpb24gdmEoZSx0KXtjb25zdFtuLG9dPWUub3B0aW9ucy5kZWxpbWl0ZXJzLHI9ZS5zb3VyY2UuaW5kZXhPZihvLG4ubGVuZ3RoKTtpZigtMT09PXIpcmV0dXJuO2NvbnN0IHM9YmEoZSk7d2EoZSxuLmxlbmd0aCk7Y29uc3QgaT1iYShlKSxsPWJhKGUpLGM9ci1uLmxlbmd0aCxhPWUuc291cmNlLnNsaWNlKDAsYyksdT1fYShlLGMsdCkscD11LnRyaW0oKSxmPXUuaW5kZXhPZihwKTtmPjAmJkRjKGksYSxmKTtyZXR1cm4gRGMobCxhLGMtKHUubGVuZ3RoLXAubGVuZ3RoLWYpKSx3YShlLG8ubGVuZ3RoKSx7dHlwZTo1LGNvbnRlbnQ6e3R5cGU6NCxpc1N0YXRpYzohMSxjb25zdFR5cGU6MCxjb250ZW50OnAsbG9jOlNhKGUsaSxsKX0sbG9jOlNhKGUscyl9fWZ1bmN0aW9uIHlhKGUsdCl7Y29uc3Qgbj0zPT09dD9bXCJdXT5cIl06W1wiPFwiLGUub3B0aW9ucy5kZWxpbWl0ZXJzWzBdXTtsZXQgbz1lLnNvdXJjZS5sZW5ndGg7Zm9yKGxldCBzPTA7czxuLmxlbmd0aDtzKyspe2NvbnN0IHQ9ZS5zb3VyY2UuaW5kZXhPZihuW3NdLDEpOy0xIT09dCYmbz50JiYobz10KX1jb25zdCByPWJhKGUpO3JldHVybnt0eXBlOjIsY29udGVudDpfYShlLG8sdCksbG9jOlNhKGUscil9fWZ1bmN0aW9uIF9hKGUsdCxuKXtjb25zdCBvPWUuc291cmNlLnNsaWNlKDAsdCk7cmV0dXJuIHdhKGUsdCksMiE9PW4mJjMhPT1uJiZvLmluY2x1ZGVzKFwiJlwiKT9lLm9wdGlvbnMuZGVjb2RlRW50aXRpZXMobyw0PT09bik6b31mdW5jdGlvbiBiYShlKXtjb25zdHtjb2x1bW46dCxsaW5lOm4sb2Zmc2V0Om99PWU7cmV0dXJue2NvbHVtbjp0LGxpbmU6bixvZmZzZXQ6b319ZnVuY3Rpb24gU2EoZSx0LG4pe3JldHVybntzdGFydDp0LGVuZDpuPW58fGJhKGUpLHNvdXJjZTplLm9yaWdpbmFsU291cmNlLnNsaWNlKHQub2Zmc2V0LG4ub2Zmc2V0KX19ZnVuY3Rpb24geGEoZSl7cmV0dXJuIGVbZS5sZW5ndGgtMV19ZnVuY3Rpb24gQ2EoZSx0KXtyZXR1cm4gZS5zdGFydHNXaXRoKHQpfWZ1bmN0aW9uIHdhKGUsdCl7Y29uc3R7c291cmNlOm59PWU7RGMoZSxuLHQpLGUuc291cmNlPW4uc2xpY2UodCl9ZnVuY3Rpb24ga2EoZSl7Y29uc3QgdD0vXltcXHRcXHJcXG5cXGYgXSsvLmV4ZWMoZS5zb3VyY2UpO3QmJndhKGUsdFswXS5sZW5ndGgpfWZ1bmN0aW9uIFRhKGUsdCxuKXtyZXR1cm4gVWModCxlLm9yaWdpbmFsU291cmNlLnNsaWNlKHQub2Zmc2V0LG4pLG4pfWZ1bmN0aW9uIE5hKGUsdCxuKXtjb25zdCBvPWUuc291cmNlO3N3aXRjaCh0KXtjYXNlIDA6aWYoQ2EobyxcIjwvXCIpKWZvcihsZXQgZT1uLmxlbmd0aC0xO2U+PTA7LS1lKWlmKEVhKG8sbltlXS50YWcpKXJldHVybiEwO2JyZWFrO2Nhc2UgMTpjYXNlIDI6e2NvbnN0IGU9eGEobik7aWYoZSYmRWEobyxlLnRhZykpcmV0dXJuITA7YnJlYWt9Y2FzZSAzOmlmKENhKG8sXCJdXT5cIikpcmV0dXJuITB9cmV0dXJuIW99ZnVuY3Rpb24gRWEoZSx0KXtyZXR1cm4gQ2EoZSxcIjwvXCIpJiZlLnNsaWNlKDIsMit0Lmxlbmd0aCkudG9Mb3dlckNhc2UoKT09PXQudG9Mb3dlckNhc2UoKSYmL1tcXHRcXHJcXG5cXGYgLz5dLy50ZXN0KGVbMit0Lmxlbmd0aF18fFwiPlwiKX1mdW5jdGlvbiAkYShlLHQpe1JhKGUsdCxPYShlLGUuY2hpbGRyZW5bMF0pKX1mdW5jdGlvbiBPYShlLHQpe2NvbnN0e2NoaWxkcmVuOm59PWU7cmV0dXJuIDE9PT1uLmxlbmd0aCYmMT09PXQudHlwZSYmIUpjKHQpfWZ1bmN0aW9uIFJhKGUsdCxuPSExKXtjb25zdHtjaGlsZHJlbjpvfT1lLHI9by5sZW5ndGg7bGV0IHM9MDtmb3IobGV0IGk9MDtpPG8ubGVuZ3RoO2krKyl7Y29uc3QgZT1vW2ldO2lmKDE9PT1lLnR5cGUmJjA9PT1lLnRhZ1R5cGUpe2NvbnN0IG89bj8wOkZhKGUsdCk7aWYobz4wKXtpZihvPj0yKXtlLmNvZGVnZW5Ob2RlLnBhdGNoRmxhZz1cIi0xXCIsZS5jb2RlZ2VuTm9kZT10LmhvaXN0KGUuY29kZWdlbk5vZGUpLHMrKztjb250aW51ZX19ZWxzZXtjb25zdCBuPWUuY29kZWdlbk5vZGU7aWYoMTM9PT1uLnR5cGUpe2NvbnN0IG89SWEobik7aWYoKCFvfHw1MTI9PT1vfHwxPT09bykmJk1hKGUsdCk+PTIpe2NvbnN0IG89VmEoZSk7byYmKG4ucHJvcHM9dC5ob2lzdChvKSl9bi5keW5hbWljUHJvcHMmJihuLmR5bmFtaWNQcm9wcz10LmhvaXN0KG4uZHluYW1pY1Byb3BzKSl9fX1lbHNlIDEyPT09ZS50eXBlJiZGYShlLmNvbnRlbnQsdCk+PTImJihlLmNvZGVnZW5Ob2RlPXQuaG9pc3QoZS5jb2RlZ2VuTm9kZSkscysrKTtpZigxPT09ZS50eXBlKXtjb25zdCBuPTE9PT1lLnRhZ1R5cGU7biYmdC5zY29wZXMudlNsb3QrKyxSYShlLHQpLG4mJnQuc2NvcGVzLnZTbG90LS19ZWxzZSBpZigxMT09PWUudHlwZSlSYShlLHQsMT09PWUuY2hpbGRyZW4ubGVuZ3RoKTtlbHNlIGlmKDk9PT1lLnR5cGUpZm9yKGxldCBuPTA7bjxlLmJyYW5jaGVzLmxlbmd0aDtuKyspUmEoZS5icmFuY2hlc1tuXSx0LDE9PT1lLmJyYW5jaGVzW25dLmNoaWxkcmVuLmxlbmd0aCl9cyYmdC50cmFuc2Zvcm1Ib2lzdCYmdC50cmFuc2Zvcm1Ib2lzdChvLHQsZSkscyYmcz09PXImJjE9PT1lLnR5cGUmJjA9PT1lLnRhZ1R5cGUmJmUuY29kZWdlbk5vZGUmJjEzPT09ZS5jb2RlZ2VuTm9kZS50eXBlJiZFKGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pJiYoZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbj10LmhvaXN0KENjKGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pKSl9ZnVuY3Rpb24gRmEoZSx0KXtjb25zdHtjb25zdGFudENhY2hlOm59PXQ7c3dpdGNoKGUudHlwZSl7Y2FzZSAxOmlmKDAhPT1lLnRhZ1R5cGUpcmV0dXJuIDA7Y29uc3Qgbz1uLmdldChlKTtpZih2b2lkIDAhPT1vKXJldHVybiBvO2NvbnN0IHI9ZS5jb2RlZ2VuTm9kZTtpZigxMyE9PXIudHlwZSlyZXR1cm4gMDtpZihyLmlzQmxvY2smJlwic3ZnXCIhPT1lLnRhZyYmXCJmb3JlaWduT2JqZWN0XCIhPT1lLnRhZylyZXR1cm4gMDtpZihJYShyKSlyZXR1cm4gbi5zZXQoZSwwKSwwO3tsZXQgbz0zO2NvbnN0IHM9TWEoZSx0KTtpZigwPT09cylyZXR1cm4gbi5zZXQoZSwwKSwwO3M8byYmKG89cyk7Zm9yKGxldCByPTA7cjxlLmNoaWxkcmVuLmxlbmd0aDtyKyspe2NvbnN0IHM9RmEoZS5jaGlsZHJlbltyXSx0KTtpZigwPT09cylyZXR1cm4gbi5zZXQoZSwwKSwwO3M8byYmKG89cyl9aWYobz4xKWZvcihsZXQgcj0wO3I8ZS5wcm9wcy5sZW5ndGg7cisrKXtjb25zdCBzPWUucHJvcHNbcl07aWYoNz09PXMudHlwZSYmXCJiaW5kXCI9PT1zLm5hbWUmJnMuZXhwKXtjb25zdCByPUZhKHMuZXhwLHQpO2lmKDA9PT1yKXJldHVybiBuLnNldChlLDApLDA7cjxvJiYobz1yKX19aWYoci5pc0Jsb2NrKXtmb3IobGV0IHQ9MDt0PGUucHJvcHMubGVuZ3RoO3QrKyl7aWYoNz09PWUucHJvcHNbdF0udHlwZSlyZXR1cm4gbi5zZXQoZSwwKSwwfXQucmVtb3ZlSGVscGVyKGpsKSx0LnJlbW92ZUhlbHBlcihaYyh0LmluU1NSLHIuaXNDb21wb25lbnQpKSxyLmlzQmxvY2s9ITEsdC5oZWxwZXIoWWModC5pblNTUixyLmlzQ29tcG9uZW50KSl9cmV0dXJuIG4uc2V0KGUsbyksb31jYXNlIDI6Y2FzZSAzOnJldHVybiAzO2Nhc2UgOTpjYXNlIDExOmNhc2UgMTA6ZGVmYXVsdDpyZXR1cm4gMDtjYXNlIDU6Y2FzZSAxMjpyZXR1cm4gRmEoZS5jb250ZW50LHQpO2Nhc2UgNDpyZXR1cm4gZS5jb25zdFR5cGU7Y2FzZSA4OmxldCBzPTM7Zm9yKGxldCBuPTA7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspe2NvbnN0IG89ZS5jaGlsZHJlbltuXTtpZihQKG8pfHxBKG8pKWNvbnRpbnVlO2NvbnN0IHI9RmEobyx0KTtpZigwPT09cilyZXR1cm4gMDtyPHMmJihzPXIpfXJldHVybiBzfX1jb25zdCBQYT1uZXcgU2V0KFtyYyxzYyxpYyxsY10pO2Z1bmN0aW9uIEFhKGUsdCl7aWYoMTQ9PT1lLnR5cGUmJiFQKGUuY2FsbGVlKSYmUGEuaGFzKGUuY2FsbGVlKSl7Y29uc3Qgbj1lLmFyZ3VtZW50c1swXTtpZig0PT09bi50eXBlKXJldHVybiBGYShuLHQpO2lmKDE0PT09bi50eXBlKXJldHVybiBBYShuLHQpfXJldHVybiAwfWZ1bmN0aW9uIE1hKGUsdCl7bGV0IG49Mztjb25zdCBvPVZhKGUpO2lmKG8mJjE1PT09by50eXBlKXtjb25zdHtwcm9wZXJ0aWVzOmV9PW87Zm9yKGxldCBvPTA7bzxlLmxlbmd0aDtvKyspe2NvbnN0e2tleTpyLHZhbHVlOnN9PWVbb10saT1GYShyLHQpO2lmKDA9PT1pKXJldHVybiBpO2xldCBsO2lmKGk8biYmKG49aSksbD00PT09cy50eXBlP0ZhKHMsdCk6MTQ9PT1zLnR5cGU/QWEocyx0KTowLDA9PT1sKXJldHVybiBsO2w8biYmKG49bCl9fXJldHVybiBufWZ1bmN0aW9uIFZhKGUpe2NvbnN0IHQ9ZS5jb2RlZ2VuTm9kZTtpZigxMz09PXQudHlwZSlyZXR1cm4gdC5wcm9wc31mdW5jdGlvbiBJYShlKXtjb25zdCB0PWUucGF0Y2hGbGFnO3JldHVybiB0P3BhcnNlSW50KHQsMTApOnZvaWQgMH1mdW5jdGlvbiBCYShlLHtmaWxlbmFtZTp0PVwiXCIscHJlZml4SWRlbnRpZmllcnM6bj0hMSxob2lzdFN0YXRpYzpvPSExLGNhY2hlSGFuZGxlcnM6cj0hMSxub2RlVHJhbnNmb3JtczpzPVtdLGRpcmVjdGl2ZVRyYW5zZm9ybXM6aT17fSx0cmFuc2Zvcm1Ib2lzdDpsPW51bGwsaXNCdWlsdEluQ29tcG9uZW50OmM9Xyxpc0N1c3RvbUVsZW1lbnQ6YT1fLGV4cHJlc3Npb25QbHVnaW5zOnU9W10sc2NvcGVJZDpwPW51bGwsc2xvdHRlZDpmPSEwLHNzcjpkPSExLGluU1NSOmg9ITEsc3NyQ3NzVmFyczptPVwiXCIsYmluZGluZ01ldGFkYXRhOmc9dixpbmxpbmU6eT0hMSxpc1RTOmI9ITEsb25FcnJvcjpTPUZsLG9uV2Fybjp4PVBsLGNvbXBhdENvbmZpZzpDfSl7Y29uc3Qgdz10LnJlcGxhY2UoL1xcPy4qJC8sXCJcIikubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKSxrPXtzZWxmTmFtZTp3JiZxKHood1sxXSkpLHByZWZpeElkZW50aWZpZXJzOm4saG9pc3RTdGF0aWM6byxjYWNoZUhhbmRsZXJzOnIsbm9kZVRyYW5zZm9ybXM6cyxkaXJlY3RpdmVUcmFuc2Zvcm1zOmksdHJhbnNmb3JtSG9pc3Q6bCxpc0J1aWx0SW5Db21wb25lbnQ6Yyxpc0N1c3RvbUVsZW1lbnQ6YSxleHByZXNzaW9uUGx1Z2luczp1LHNjb3BlSWQ6cCxzbG90dGVkOmYsc3NyOmQsaW5TU1I6aCxzc3JDc3NWYXJzOm0sYmluZGluZ01ldGFkYXRhOmcsaW5saW5lOnksaXNUUzpiLG9uRXJyb3I6Uyxvbldhcm46eCxjb21wYXRDb25maWc6Qyxyb290OmUsaGVscGVyczpuZXcgTWFwLGNvbXBvbmVudHM6bmV3IFNldCxkaXJlY3RpdmVzOm5ldyBTZXQsaG9pc3RzOltdLGltcG9ydHM6W10sY29uc3RhbnRDYWNoZTpuZXcgTWFwLHRlbXBzOjAsY2FjaGVkOjAsaWRlbnRpZmllcnM6T2JqZWN0LmNyZWF0ZShudWxsKSxzY29wZXM6e3ZGb3I6MCx2U2xvdDowLHZQcmU6MCx2T25jZTowfSxwYXJlbnQ6bnVsbCxjdXJyZW50Tm9kZTplLGNoaWxkSW5kZXg6MCxpblZPbmNlOiExLGhlbHBlcihlKXtjb25zdCB0PWsuaGVscGVycy5nZXQoZSl8fDA7cmV0dXJuIGsuaGVscGVycy5zZXQoZSx0KzEpLGV9LHJlbW92ZUhlbHBlcihlKXtjb25zdCB0PWsuaGVscGVycy5nZXQoZSk7aWYodCl7Y29uc3Qgbj10LTE7bj9rLmhlbHBlcnMuc2V0KGUsbik6ay5oZWxwZXJzLmRlbGV0ZShlKX19LGhlbHBlclN0cmluZzplPT5gXyR7YmNbay5oZWxwZXIoZSldfWAscmVwbGFjZU5vZGUoZSl7ay5wYXJlbnQuY2hpbGRyZW5bay5jaGlsZEluZGV4XT1rLmN1cnJlbnROb2RlPWV9LHJlbW92ZU5vZGUoZSl7Y29uc3QgdD1lP2sucGFyZW50LmNoaWxkcmVuLmluZGV4T2YoZSk6ay5jdXJyZW50Tm9kZT9rLmNoaWxkSW5kZXg6LTE7ZSYmZSE9PWsuY3VycmVudE5vZGU/ay5jaGlsZEluZGV4PnQmJihrLmNoaWxkSW5kZXgtLSxrLm9uTm9kZVJlbW92ZWQoKSk6KGsuY3VycmVudE5vZGU9bnVsbCxrLm9uTm9kZVJlbW92ZWQoKSksay5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHQsMSl9LG9uTm9kZVJlbW92ZWQ6KCk9Pnt9LGFkZElkZW50aWZpZXJzKGUpe30scmVtb3ZlSWRlbnRpZmllcnMoZSl7fSxob2lzdChlKXtQKGUpJiYoZT1UYyhlKSksay5ob2lzdHMucHVzaChlKTtjb25zdCB0PVRjKGBfaG9pc3RlZF8ke2suaG9pc3RzLmxlbmd0aH1gLCExLGUubG9jLDIpO3JldHVybiB0LmhvaXN0ZWQ9ZSx0fSxjYWNoZTooZSx0PSExKT0+ZnVuY3Rpb24oZSx0LG49ITEpe3JldHVybnt0eXBlOjIwLGluZGV4OmUsdmFsdWU6dCxpc1ZOb2RlOm4sbG9jOlNjfX0oay5jYWNoZWQrKyxlLHQpfTtyZXR1cm4ga31mdW5jdGlvbiBMYShlLHQpe2NvbnN0IG49QmEoZSx0KTtqYShlLG4pLHQuaG9pc3RTdGF0aWMmJiRhKGUsbiksdC5zc3J8fGZ1bmN0aW9uKGUsdCl7Y29uc3R7aGVscGVyOm59PXQse2NoaWxkcmVuOm99PWU7aWYoMT09PW8ubGVuZ3RoKXtjb25zdCBuPW9bMF07aWYoT2EoZSxuKSYmbi5jb2RlZ2VuTm9kZSl7Y29uc3Qgbz1uLmNvZGVnZW5Ob2RlOzEzPT09by50eXBlJiZuYShvLHQpLGUuY29kZWdlbk5vZGU9b31lbHNlIGUuY29kZWdlbk5vZGU9bn1lbHNlIGlmKG8ubGVuZ3RoPjEpe2xldCBvPTY0O2UuY29kZWdlbk5vZGU9eGModCxuKE1sKSx2b2lkIDAsZS5jaGlsZHJlbixvK1wiXCIsdm9pZCAwLHZvaWQgMCwhMCx2b2lkIDAsITEpfX0oZSxuKSxlLmhlbHBlcnM9Wy4uLm4uaGVscGVycy5rZXlzKCldLGUuY29tcG9uZW50cz1bLi4ubi5jb21wb25lbnRzXSxlLmRpcmVjdGl2ZXM9Wy4uLm4uZGlyZWN0aXZlc10sZS5pbXBvcnRzPW4uaW1wb3J0cyxlLmhvaXN0cz1uLmhvaXN0cyxlLnRlbXBzPW4udGVtcHMsZS5jYWNoZWQ9bi5jYWNoZWR9ZnVuY3Rpb24gamEoZSx0KXt0LmN1cnJlbnROb2RlPWU7Y29uc3R7bm9kZVRyYW5zZm9ybXM6bn09dCxvPVtdO2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrKXtjb25zdCByPW5bc10oZSx0KTtpZihyJiYoRShyKT9vLnB1c2goLi4ucik6by5wdXNoKHIpKSwhdC5jdXJyZW50Tm9kZSlyZXR1cm47ZT10LmN1cnJlbnROb2RlfXN3aXRjaChlLnR5cGUpe2Nhc2UgMzp0LnNzcnx8dC5oZWxwZXIoemwpO2JyZWFrO2Nhc2UgNTp0LnNzcnx8dC5oZWxwZXIobmMpO2JyZWFrO2Nhc2UgOTpmb3IobGV0IG49MDtuPGUuYnJhbmNoZXMubGVuZ3RoO24rKylqYShlLmJyYW5jaGVzW25dLHQpO2JyZWFrO2Nhc2UgMTA6Y2FzZSAxMTpjYXNlIDE6Y2FzZSAwOiFmdW5jdGlvbihlLHQpe2xldCBuPTA7Y29uc3Qgbz0oKT0+e24tLX07Zm9yKDtuPGUuY2hpbGRyZW4ubGVuZ3RoO24rKyl7Y29uc3Qgcj1lLmNoaWxkcmVuW25dO1Aocil8fCh0LnBhcmVudD1lLHQuY2hpbGRJbmRleD1uLHQub25Ob2RlUmVtb3ZlZD1vLGphKHIsdCkpfX0oZSx0KX10LmN1cnJlbnROb2RlPWU7bGV0IHI9by5sZW5ndGg7Zm9yKDtyLS07KW9bcl0oKX1mdW5jdGlvbiBVYShlLHQpe2NvbnN0IG49UChlKT90PT50PT09ZTp0PT5lLnRlc3QodCk7cmV0dXJuKGUsbyk9PntpZigxPT09ZS50eXBlKXtjb25zdHtwcm9wczpyfT1lO2lmKDM9PT1lLnRhZ1R5cGUmJnIuc29tZShHYykpcmV0dXJuO2NvbnN0IHM9W107Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspe2NvbnN0IGw9cltpXTtpZig3PT09bC50eXBlJiZuKGwubmFtZSkpe3Iuc3BsaWNlKGksMSksaS0tO2NvbnN0IG49dChlLGwsbyk7biYmcy5wdXNoKG4pfX1yZXR1cm4gc319fWNvbnN0IERhPWU9PmAke2JjW2VdfTogXyR7YmNbZV19YDtmdW5jdGlvbiBIYShlLHQ9e30pe2NvbnN0IG49ZnVuY3Rpb24oZSx7bW9kZTp0PVwiZnVuY3Rpb25cIixwcmVmaXhJZGVudGlmaWVyczpuPVwibW9kdWxlXCI9PT10LHNvdXJjZU1hcDpvPSExLGZpbGVuYW1lOnI9XCJ0ZW1wbGF0ZS52dWUuaHRtbFwiLHNjb3BlSWQ6cz1udWxsLG9wdGltaXplSW1wb3J0czppPSExLHJ1bnRpbWVHbG9iYWxOYW1lOmw9XCJWdWVcIixydW50aW1lTW9kdWxlTmFtZTpjPVwidnVlXCIsc3NyUnVudGltZU1vZHVsZU5hbWU6YT1cInZ1ZS9zZXJ2ZXItcmVuZGVyZXJcIixzc3I6dT0hMSxpc1RTOnA9ITEsaW5TU1I6Zj0hMX0pe2NvbnN0IGQ9e21vZGU6dCxwcmVmaXhJZGVudGlmaWVyczpuLHNvdXJjZU1hcDpvLGZpbGVuYW1lOnIsc2NvcGVJZDpzLG9wdGltaXplSW1wb3J0czppLHJ1bnRpbWVHbG9iYWxOYW1lOmwscnVudGltZU1vZHVsZU5hbWU6Yyxzc3JSdW50aW1lTW9kdWxlTmFtZTphLHNzcjp1LGlzVFM6cCxpblNTUjpmLHNvdXJjZTplLmxvYy5zb3VyY2UsY29kZTpcIlwiLGNvbHVtbjoxLGxpbmU6MSxvZmZzZXQ6MCxpbmRlbnRMZXZlbDowLHB1cmU6ITEsbWFwOnZvaWQgMCxoZWxwZXI6ZT0+YF8ke2JjW2VdfWAscHVzaChlLHQpe2QuY29kZSs9ZX0saW5kZW50KCl7aCgrK2QuaW5kZW50TGV2ZWwpfSxkZWluZGVudChlPSExKXtlPy0tZC5pbmRlbnRMZXZlbDpoKC0tZC5pbmRlbnRMZXZlbCl9LG5ld2xpbmUoKXtoKGQuaW5kZW50TGV2ZWwpfX07ZnVuY3Rpb24gaChlKXtkLnB1c2goXCJcXG5cIitcIiAgXCIucmVwZWF0KGUpKX1yZXR1cm4gZH0oZSx0KTt0Lm9uQ29udGV4dENyZWF0ZWQmJnQub25Db250ZXh0Q3JlYXRlZChuKTtjb25zdHttb2RlOm8scHVzaDpyLHByZWZpeElkZW50aWZpZXJzOnMsaW5kZW50OmksZGVpbmRlbnQ6bCxuZXdsaW5lOmMsc3NyOmF9PW4sdT1lLmhlbHBlcnMubGVuZ3RoPjAscD0hcyYmXCJtb2R1bGVcIiE9PW87IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLG5ld2xpbmU6byxydW50aW1lR2xvYmFsTmFtZTpyfT10LHM9cjtpZihlLmhlbHBlcnMubGVuZ3RoPjAmJihuKGBjb25zdCBfVnVlID0gJHtzfVxcbmApLGUuaG9pc3RzLmxlbmd0aCkpe24oYGNvbnN0IHsgJHtbSGwsV2wsemwsS2wsR2xdLmZpbHRlcigodD0+ZS5oZWxwZXJzLmluY2x1ZGVzKHQpKSkubWFwKERhKS5qb2luKFwiLCBcIil9IH0gPSBfVnVlXFxuYCl9KGZ1bmN0aW9uKGUsdCl7aWYoIWUubGVuZ3RoKXJldHVybjt0LnB1cmU9ITA7Y29uc3R7cHVzaDpuLG5ld2xpbmU6b309dDtvKCk7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspe2NvbnN0IHM9ZVtyXTtzJiYobihgY29uc3QgX2hvaXN0ZWRfJHtyKzF9ID0gYCksR2Eocyx0KSxvKCkpfXQucHVyZT0hMX0pKGUuaG9pc3RzLHQpLG8oKSxuKFwicmV0dXJuIFwiKX0oZSxuKTtpZihyKGBmdW5jdGlvbiAke2E/XCJzc3JSZW5kZXJcIjpcInJlbmRlclwifSgkeyhhP1tcIl9jdHhcIixcIl9wdXNoXCIsXCJfcGFyZW50XCIsXCJfYXR0cnNcIl06W1wiX2N0eFwiLFwiX2NhY2hlXCJdKS5qb2luKFwiLCBcIil9KSB7YCksaSgpLHAmJihyKFwid2l0aCAoX2N0eCkge1wiKSxpKCksdSYmKHIoYGNvbnN0IHsgJHtlLmhlbHBlcnMubWFwKERhKS5qb2luKFwiLCBcIil9IH0gPSBfVnVlYCkscihcIlxcblwiKSxjKCkpKSxlLmNvbXBvbmVudHMubGVuZ3RoJiYoV2EoZS5jb21wb25lbnRzLFwiY29tcG9uZW50XCIsbiksKGUuZGlyZWN0aXZlcy5sZW5ndGh8fGUudGVtcHM+MCkmJmMoKSksZS5kaXJlY3RpdmVzLmxlbmd0aCYmKFdhKGUuZGlyZWN0aXZlcyxcImRpcmVjdGl2ZVwiLG4pLGUudGVtcHM+MCYmYygpKSxlLnRlbXBzPjApe3IoXCJsZXQgXCIpO2ZvcihsZXQgdD0wO3Q8ZS50ZW1wczt0KyspcihgJHt0PjA/XCIsIFwiOlwiXCJ9X3RlbXAke3R9YCl9cmV0dXJuKGUuY29tcG9uZW50cy5sZW5ndGh8fGUuZGlyZWN0aXZlcy5sZW5ndGh8fGUudGVtcHMpJiYocihcIlxcblwiKSxjKCkpLGF8fHIoXCJyZXR1cm4gXCIpLGUuY29kZWdlbk5vZGU/R2EoZS5jb2RlZ2VuTm9kZSxuKTpyKFwibnVsbFwiKSxwJiYobCgpLHIoXCJ9XCIpKSxsKCkscihcIn1cIikse2FzdDplLGNvZGU6bi5jb2RlLHByZWFtYmxlOlwiXCIsbWFwOm4ubWFwP24ubWFwLnRvSlNPTigpOnZvaWQgMH19ZnVuY3Rpb24gV2EoZSx0LHtoZWxwZXI6bixwdXNoOm8sbmV3bGluZTpyLGlzVFM6c30pe2NvbnN0IGk9bihcImNvbXBvbmVudFwiPT09dD9xbDpZbCk7Zm9yKGxldCBsPTA7bDxlLmxlbmd0aDtsKyspe2xldCBuPWVbbF07Y29uc3QgYz1uLmVuZHNXaXRoKFwiX19zZWxmXCIpO2MmJihuPW4uc2xpY2UoMCwtNikpLG8oYGNvbnN0ICR7dGEobix0KX0gPSAke2l9KCR7SlNPTi5zdHJpbmdpZnkobil9JHtjP1wiLCB0cnVlXCI6XCJcIn0pJHtzP1wiIVwiOlwiXCJ9YCksbDxlLmxlbmd0aC0xJiZyKCl9fWZ1bmN0aW9uIHphKGUsdCl7Y29uc3Qgbj1lLmxlbmd0aD4zfHwhMTt0LnB1c2goXCJbXCIpLG4mJnQuaW5kZW50KCksS2EoZSx0LG4pLG4mJnQuZGVpbmRlbnQoKSx0LnB1c2goXCJdXCIpfWZ1bmN0aW9uIEthKGUsdCxuPSExLG89ITApe2NvbnN0e3B1c2g6cixuZXdsaW5lOnN9PXQ7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0IGw9ZVtpXTtQKGwpP3IobCk6RShsKT96YShsLHQpOkdhKGwsdCksaTxlLmxlbmd0aC0xJiYobj8obyYmcihcIixcIikscygpKTpvJiZyKFwiLCBcIikpfX1mdW5jdGlvbiBHYShlLHQpe2lmKFAoZSkpdC5wdXNoKGUpO2Vsc2UgaWYoQShlKSl0LnB1c2godC5oZWxwZXIoZSkpO2Vsc2Ugc3dpdGNoKGUudHlwZSl7Y2FzZSAxOmNhc2UgOTpjYXNlIDExOmNhc2UgMTI6R2EoZS5jb2RlZ2VuTm9kZSx0KTticmVhaztjYXNlIDI6IWZ1bmN0aW9uKGUsdCl7dC5wdXNoKEpTT04uc3RyaW5naWZ5KGUuY29udGVudCksZSl9KGUsdCk7YnJlYWs7Y2FzZSA0OnFhKGUsdCk7YnJlYWs7Y2FzZSA1OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQ7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7bihgJHtvKG5jKX0oYCksR2EoZS5jb250ZW50LHQpLG4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgODpKYShlLHQpO2JyZWFrO2Nhc2UgMzohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10O3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24oYCR7byh6bCl9KCR7SlNPTi5zdHJpbmdpZnkoZS5jb250ZW50KX0pYCxlKX0oZSx0KTticmVhaztjYXNlIDEzOiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixoZWxwZXI6byxwdXJlOnJ9PXQse3RhZzpzLHByb3BzOmksY2hpbGRyZW46bCxwYXRjaEZsYWc6YyxkeW5hbWljUHJvcHM6YSxkaXJlY3RpdmVzOnUsaXNCbG9jazpwLGRpc2FibGVUcmFja2luZzpmLGlzQ29tcG9uZW50OmR9PWU7dSYmbihvKFFsKStcIihcIik7cCYmbihgKCR7byhqbCl9KCR7Zj9cInRydWVcIjpcIlwifSksIGApO3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO2NvbnN0IGg9cD9aYyh0LmluU1NSLGQpOlljKHQuaW5TU1IsZCk7bihvKGgpK1wiKFwiLGUpLEthKGZ1bmN0aW9uKGUpe2xldCB0PWUubGVuZ3RoO2Zvcig7dC0tJiZudWxsPT1lW3RdOyk7cmV0dXJuIGUuc2xpY2UoMCx0KzEpLm1hcCgoZT0+ZXx8XCJudWxsXCIpKX0oW3MsaSxsLGMsYV0pLHQpLG4oXCIpXCIpLHAmJm4oXCIpXCIpO3UmJihuKFwiLCBcIiksR2EodSx0KSxuKFwiKVwiKSl9KGUsdCk7YnJlYWs7Y2FzZSAxNDohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10LHM9UChlLmNhbGxlZSk/ZS5jYWxsZWU6byhlLmNhbGxlZSk7ciYmbihcIi8qI19fUFVSRV9fKi9cIik7bihzK1wiKFwiLGUpLEthKGUuYXJndW1lbnRzLHQpLG4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMTU6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGluZGVudDpvLGRlaW5kZW50OnIsbmV3bGluZTpzfT10LHtwcm9wZXJ0aWVzOml9PWU7aWYoIWkubGVuZ3RoKXJldHVybiB2b2lkIG4oXCJ7fVwiLGUpO2NvbnN0IGw9aS5sZW5ndGg+MXx8ITE7bihsP1wie1wiOlwieyBcIiksbCYmbygpO2ZvcihsZXQgYz0wO2M8aS5sZW5ndGg7YysrKXtjb25zdHtrZXk6ZSx2YWx1ZTpvfT1pW2NdO1lhKGUsdCksbihcIjogXCIpLEdhKG8sdCksYzxpLmxlbmd0aC0xJiYobihcIixcIikscygpKX1sJiZyKCksbihsP1wifVwiOlwiIH1cIil9KGUsdCk7YnJlYWs7Y2FzZSAxNzohZnVuY3Rpb24oZSx0KXt6YShlLmVsZW1lbnRzLHQpfShlLHQpO2JyZWFrO2Nhc2UgMTg6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGluZGVudDpvLGRlaW5kZW50OnJ9PXQse3BhcmFtczpzLHJldHVybnM6aSxib2R5OmwsbmV3bGluZTpjLGlzU2xvdDphfT1lO2EmJm4oYF8ke2JjW21jXX0oYCk7bihcIihcIixlKSxFKHMpP0thKHMsdCk6cyYmR2Eocyx0KTtuKFwiKSA9PiBcIiksKGN8fGwpJiYobihcIntcIiksbygpKTtpPyhjJiZuKFwicmV0dXJuIFwiKSxFKGkpP3phKGksdCk6R2EoaSx0KSk6bCYmR2EobCx0KTsoY3x8bCkmJihyKCksbihcIn1cIikpO2EmJm4oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMTk6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7dGVzdDpuLGNvbnNlcXVlbnQ6byxhbHRlcm5hdGU6cixuZXdsaW5lOnN9PWUse3B1c2g6aSxpbmRlbnQ6bCxkZWluZGVudDpjLG5ld2xpbmU6YX09dDtpZig0PT09bi50eXBlKXtjb25zdCBlPSFNYyhuLmNvbnRlbnQpO2UmJmkoXCIoXCIpLHFhKG4sdCksZSYmaShcIilcIil9ZWxzZSBpKFwiKFwiKSxHYShuLHQpLGkoXCIpXCIpO3MmJmwoKSx0LmluZGVudExldmVsKyssc3x8aShcIiBcIiksaShcIj8gXCIpLEdhKG8sdCksdC5pbmRlbnRMZXZlbC0tLHMmJmEoKSxzfHxpKFwiIFwiKSxpKFwiOiBcIik7Y29uc3QgdT0xOT09PXIudHlwZTt1fHx0LmluZGVudExldmVsKys7R2Eocix0KSx1fHx0LmluZGVudExldmVsLS07cyYmYyghMCl9KGUsdCk7YnJlYWs7Y2FzZSAyMDohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8saW5kZW50OnIsZGVpbmRlbnQ6cyxuZXdsaW5lOml9PXQ7bihgX2NhY2hlWyR7ZS5pbmRleH1dIHx8IChgKSxlLmlzVk5vZGUmJihyKCksbihgJHtvKGZjKX0oLTEpLGApLGkoKSk7bihgX2NhY2hlWyR7ZS5pbmRleH1dID0gYCksR2EoZS52YWx1ZSx0KSxlLmlzVk5vZGUmJihuKFwiLFwiKSxpKCksbihgJHtvKGZjKX0oMSksYCksaSgpLG4oYF9jYWNoZVske2UuaW5kZXh9XWApLHMoKSk7bihcIilcIil9KGUsdCk7YnJlYWs7Y2FzZSAyMTpLYShlLmJvZHksdCwhMCwhMSl9fWZ1bmN0aW9uIHFhKGUsdCl7Y29uc3R7Y29udGVudDpuLGlzU3RhdGljOm99PWU7dC5wdXNoKG8/SlNPTi5zdHJpbmdpZnkobik6bixlKX1mdW5jdGlvbiBKYShlLHQpe2ZvcihsZXQgbj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXtjb25zdCBvPWUuY2hpbGRyZW5bbl07UChvKT90LnB1c2gobyk6R2Eobyx0KX19ZnVuY3Rpb24gWWEoZSx0KXtjb25zdHtwdXNoOm59PXQ7aWYoOD09PWUudHlwZSluKFwiW1wiKSxKYShlLHQpLG4oXCJdXCIpO2Vsc2UgaWYoZS5pc1N0YXRpYyl7bihNYyhlLmNvbnRlbnQpP2UuY29udGVudDpKU09OLnN0cmluZ2lmeShlLmNvbnRlbnQpLGUpfWVsc2UgbihgWyR7ZS5jb250ZW50fV1gLGUpfWNvbnN0IFphPVVhKC9eKGlmfGVsc2V8ZWxzZS1pZikkLywoKGUsdCxuKT0+ZnVuY3Rpb24oZSx0LG4sbyl7aWYoIShcImVsc2VcIj09PXQubmFtZXx8dC5leHAmJnQuZXhwLmNvbnRlbnQudHJpbSgpKSl7dC5leHA9VGMoXCJ0cnVlXCIsITEsdC5leHA/dC5leHAubG9jOmUubG9jKX1pZihcImlmXCI9PT10Lm5hbWUpe2NvbnN0IHI9UWEoZSx0KSxzPXt0eXBlOjksbG9jOmUubG9jLGJyYW5jaGVzOltyXX07aWYobi5yZXBsYWNlTm9kZShzKSxvKXJldHVybiBvKHMsciwhMCl9ZWxzZXtjb25zdCByPW4ucGFyZW50LmNoaWxkcmVuO2xldCBzPXIuaW5kZXhPZihlKTtmb3IoO3MtLSA+PS0xOyl7Y29uc3QgaT1yW3NdO2lmKCFpfHwyIT09aS50eXBlfHxpLmNvbnRlbnQudHJpbSgpLmxlbmd0aCl7aWYoaSYmOT09PWkudHlwZSl7bi5yZW1vdmVOb2RlKCk7Y29uc3Qgcj1RYShlLHQpO2kuYnJhbmNoZXMucHVzaChyKTtjb25zdCBzPW8mJm8oaSxyLCExKTtqYShyLG4pLHMmJnMoKSxuLmN1cnJlbnROb2RlPW51bGx9YnJlYWt9bi5yZW1vdmVOb2RlKGkpfX19KGUsdCxuLCgoZSx0LG8pPT57Y29uc3Qgcj1uLnBhcmVudC5jaGlsZHJlbjtsZXQgcz1yLmluZGV4T2YoZSksaT0wO2Zvcig7cy0tID49MDspe2NvbnN0IGU9cltzXTtlJiY5PT09ZS50eXBlJiYoaSs9ZS5icmFuY2hlcy5sZW5ndGgpfXJldHVybigpPT57aWYobyllLmNvZGVnZW5Ob2RlPVhhKHQsaSxuKTtlbHNle2NvbnN0IG89ZnVuY3Rpb24oZSl7Zm9yKDs7KWlmKDE5PT09ZS50eXBlKXtpZigxOSE9PWUuYWx0ZXJuYXRlLnR5cGUpcmV0dXJuIGU7ZT1lLmFsdGVybmF0ZX1lbHNlIDIwPT09ZS50eXBlJiYoZT1lLnZhbHVlKX0oZS5jb2RlZ2VuTm9kZSk7by5hbHRlcm5hdGU9WGEodCxpK2UuYnJhbmNoZXMubGVuZ3RoLTEsbil9fX0pKSkpO2Z1bmN0aW9uIFFhKGUsdCl7Y29uc3Qgbj0zPT09ZS50YWdUeXBlO3JldHVybnt0eXBlOjEwLGxvYzplLmxvYyxjb25kaXRpb246XCJlbHNlXCI9PT10Lm5hbWU/dm9pZCAwOnQuZXhwLGNoaWxkcmVuOm4mJiFIYyhlLFwiZm9yXCIpP2UuY2hpbGRyZW46W2VdLHVzZXJLZXk6V2MoZSxcImtleVwiKSxpc1RlbXBsYXRlSWY6bn19ZnVuY3Rpb24gWGEoZSx0LG4pe3JldHVybiBlLmNvbmRpdGlvbj9PYyhlLmNvbmRpdGlvbixldShlLHQsbiksRWMobi5oZWxwZXIoemwpLFsnXCJcIicsXCJ0cnVlXCJdKSk6ZXUoZSx0LG4pfWZ1bmN0aW9uIGV1KGUsdCxuKXtjb25zdHtoZWxwZXI6b309bixyPWtjKFwia2V5XCIsVGMoYCR7dH1gLCExLFNjLDIpKSx7Y2hpbGRyZW46c309ZSxpPXNbMF07aWYoMSE9PXMubGVuZ3RofHwxIT09aS50eXBlKXtpZigxPT09cy5sZW5ndGgmJjExPT09aS50eXBlKXtjb25zdCBlPWkuY29kZWdlbk5vZGU7cmV0dXJuIGVhKGUscixuKSxlfXtsZXQgdD02NDtyZXR1cm4geGMobixvKE1sKSx3Yyhbcl0pLHMsdCtcIlwiLHZvaWQgMCx2b2lkIDAsITAsITEsITEsZS5sb2MpfX17Y29uc3QgZT1pLmNvZGVnZW5Ob2RlLHQ9MTQ9PT0obD1lKS50eXBlJiZsLmNhbGxlZT09PXljP2wuYXJndW1lbnRzWzFdLnJldHVybnM6bDtyZXR1cm4gMTM9PT10LnR5cGUmJm5hKHQsbiksZWEodCxyLG4pLGV9dmFyIGx9Y29uc3QgdHU9VWEoXCJmb3JcIiwoKGUsdCxuKT0+e2NvbnN0e2hlbHBlcjpvLHJlbW92ZUhlbHBlcjpyfT1uO3JldHVybiBmdW5jdGlvbihlLHQsbixvKXtpZighdC5leHApcmV0dXJuO2NvbnN0IHI9c3UodC5leHApO2lmKCFyKXJldHVybjtjb25zdHtzY29wZXM6c309bix7c291cmNlOmksdmFsdWU6bCxrZXk6YyxpbmRleDphfT1yLHU9e3R5cGU6MTEsbG9jOnQubG9jLHNvdXJjZTppLHZhbHVlQWxpYXM6bCxrZXlBbGlhczpjLG9iamVjdEluZGV4QWxpYXM6YSxwYXJzZVJlc3VsdDpyLGNoaWxkcmVuOnFjKGUpP2UuY2hpbGRyZW46W2VdfTtuLnJlcGxhY2VOb2RlKHUpLHMudkZvcisrO2NvbnN0IHA9byYmbyh1KTtyZXR1cm4oKT0+e3MudkZvci0tLHAmJnAoKX19KGUsdCxuLCh0PT57Y29uc3Qgcz1FYyhvKFhsKSxbdC5zb3VyY2VdKSxpPXFjKGUpLGw9SGMoZSxcIm1lbW9cIiksYz1XYyhlLFwia2V5XCIpLGE9YyYmKDY9PT1jLnR5cGU/VGMoYy52YWx1ZS5jb250ZW50LCEwKTpjLmV4cCksdT1jP2tjKFwia2V5XCIsYSk6bnVsbCxwPTQ9PT10LnNvdXJjZS50eXBlJiZ0LnNvdXJjZS5jb25zdFR5cGU+MCxmPXA/NjQ6Yz8xMjg6MjU2O3JldHVybiB0LmNvZGVnZW5Ob2RlPXhjKG4sbyhNbCksdm9pZCAwLHMsZitcIlwiLHZvaWQgMCx2b2lkIDAsITAsIXAsITEsZS5sb2MpLCgpPT57bGV0IGM7Y29uc3R7Y2hpbGRyZW46Zn09dCxkPTEhPT1mLmxlbmd0aHx8MSE9PWZbMF0udHlwZSxoPUpjKGUpP2U6aSYmMT09PWUuY2hpbGRyZW4ubGVuZ3RoJiZKYyhlLmNoaWxkcmVuWzBdKT9lLmNoaWxkcmVuWzBdOm51bGw7aWYoaD8oYz1oLmNvZGVnZW5Ob2RlLGkmJnUmJmVhKGMsdSxuKSk6ZD9jPXhjKG4sbyhNbCksdT93YyhbdV0pOnZvaWQgMCxlLmNoaWxkcmVuLFwiNjRcIix2b2lkIDAsdm9pZCAwLCEwLHZvaWQgMCwhMSk6KGM9ZlswXS5jb2RlZ2VuTm9kZSxpJiZ1JiZlYShjLHUsbiksYy5pc0Jsb2NrIT09IXAmJihjLmlzQmxvY2s/KHIoamwpLHIoWmMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpOnIoWWMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpLGMuaXNCbG9jaz0hcCxjLmlzQmxvY2s/KG8oamwpLG8oWmMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpOm8oWWMobi5pblNTUixjLmlzQ29tcG9uZW50KSkpLGwpe2NvbnN0IGU9JGMobHUodC5wYXJzZVJlc3VsdCxbVGMoXCJfY2FjaGVkXCIpXSkpO2UuYm9keT17dHlwZToyMSxib2R5OltOYyhbXCJjb25zdCBfbWVtbyA9IChcIixsLmV4cCxcIilcIl0pLE5jKFtcImlmIChfY2FjaGVkXCIsLi4uYT9bXCIgJiYgX2NhY2hlZC5rZXkgPT09IFwiLGFdOltdLGAgJiYgJHtuLmhlbHBlclN0cmluZyhfYyl9KF9jYWNoZWQsIF9tZW1vKSkgcmV0dXJuIF9jYWNoZWRgXSksTmMoW1wiY29uc3QgX2l0ZW0gPSBcIixjXSksVGMoXCJfaXRlbS5tZW1vID0gX21lbW9cIiksVGMoXCJyZXR1cm4gX2l0ZW1cIildLGxvYzpTY30scy5hcmd1bWVudHMucHVzaChlLFRjKFwiX2NhY2hlXCIpLFRjKFN0cmluZyhuLmNhY2hlZCsrKSkpfWVsc2Ugcy5hcmd1bWVudHMucHVzaCgkYyhsdSh0LnBhcnNlUmVzdWx0KSxjLCEwKSl9fSkpfSkpO2NvbnN0IG51PS8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLyxvdT0vLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC8scnU9L15cXCh8XFwpJC9nO2Z1bmN0aW9uIHN1KGUsdCl7Y29uc3Qgbj1lLmxvYyxvPWUuY29udGVudCxyPW8ubWF0Y2gobnUpO2lmKCFyKXJldHVybjtjb25zdFsscyxpXT1yLGw9e3NvdXJjZTppdShuLGkudHJpbSgpLG8uaW5kZXhPZihpLHMubGVuZ3RoKSksdmFsdWU6dm9pZCAwLGtleTp2b2lkIDAsaW5kZXg6dm9pZCAwfTtsZXQgYz1zLnRyaW0oKS5yZXBsYWNlKHJ1LFwiXCIpLnRyaW0oKTtjb25zdCBhPXMuaW5kZXhPZihjKSx1PWMubWF0Y2gob3UpO2lmKHUpe2M9Yy5yZXBsYWNlKG91LFwiXCIpLnRyaW0oKTtjb25zdCBlPXVbMV0udHJpbSgpO2xldCB0O2lmKGUmJih0PW8uaW5kZXhPZihlLGErYy5sZW5ndGgpLGwua2V5PWl1KG4sZSx0KSksdVsyXSl7Y29uc3Qgcj11WzJdLnRyaW0oKTtyJiYobC5pbmRleD1pdShuLHIsby5pbmRleE9mKHIsbC5rZXk/dCtlLmxlbmd0aDphK2MubGVuZ3RoKSkpfX1yZXR1cm4gYyYmKGwudmFsdWU9aXUobixjLGEpKSxsfWZ1bmN0aW9uIGl1KGUsdCxuKXtyZXR1cm4gVGModCwhMSxqYyhlLG4sdC5sZW5ndGgpKX1mdW5jdGlvbiBsdSh7dmFsdWU6ZSxrZXk6dCxpbmRleDpufSxvPVtdKXtyZXR1cm4gZnVuY3Rpb24oZSl7bGV0IHQ9ZS5sZW5ndGg7Zm9yKDt0LS0mJiFlW3RdOyk7cmV0dXJuIGUuc2xpY2UoMCx0KzEpLm1hcCgoKGUsdCk9PmV8fFRjKFwiX1wiLnJlcGVhdCh0KzEpLCExKSkpfShbZSx0LG4sLi4ub10pfWNvbnN0IGN1PVRjKFwidW5kZWZpbmVkXCIsITEpLGF1PShlLHQpPT57aWYoMT09PWUudHlwZSYmKDE9PT1lLnRhZ1R5cGV8fDM9PT1lLnRhZ1R5cGUpKXtjb25zdCBuPUhjKGUsXCJzbG90XCIpO2lmKG4pcmV0dXJuIHQuc2NvcGVzLnZTbG90KyssKCk9Pnt0LnNjb3Blcy52U2xvdC0tfX19LHV1PShlLHQsbik9PiRjKGUsdCwhMSwhMCx0Lmxlbmd0aD90WzBdLmxvYzpuKTtmdW5jdGlvbiBwdShlLHQsbj11dSl7dC5oZWxwZXIobWMpO2NvbnN0e2NoaWxkcmVuOm8sbG9jOnJ9PWUscz1bXSxpPVtdO2xldCBsPXQuc2NvcGVzLnZTbG90PjB8fHQuc2NvcGVzLnZGb3I+MDtjb25zdCBjPUhjKGUsXCJzbG90XCIsITApO2lmKGMpe2NvbnN0e2FyZzplLGV4cDp0fT1jO2UmJiFSYyhlKSYmKGw9ITApLHMucHVzaChrYyhlfHxUYyhcImRlZmF1bHRcIiwhMCksbih0LG8scikpKX1sZXQgYT0hMSx1PSExO2NvbnN0IHA9W10sZj1uZXcgU2V0O2ZvcihsZXQgbT0wO208by5sZW5ndGg7bSsrKXtjb25zdCBlPW9bbV07bGV0IHI7aWYoIXFjKGUpfHwhKHI9SGMoZSxcInNsb3RcIiwhMCkpKXszIT09ZS50eXBlJiZwLnB1c2goZSk7Y29udGludWV9aWYoYylicmVhazthPSEwO2NvbnN0e2NoaWxkcmVuOmQsbG9jOmh9PWUse2FyZzpnPVRjKFwiZGVmYXVsdFwiLCEwKSxleHA6dn09cjtsZXQgeTtSYyhnKT95PWc/Zy5jb250ZW50OlwiZGVmYXVsdFwiOmw9ITA7Y29uc3QgXz1uKHYsZCxoKTtsZXQgYixTLHg7aWYoYj1IYyhlLFwiaWZcIikpbD0hMCxpLnB1c2goT2MoYi5leHAsZnUoZyxfKSxjdSkpO2Vsc2UgaWYoUz1IYyhlLC9eZWxzZSgtaWYpPyQvLCEwKSl7bGV0IGUsdD1tO2Zvcig7dC0tJiYoZT1vW3RdLDM9PT1lLnR5cGUpOyk7aWYoZSYmcWMoZSkmJkhjKGUsXCJpZlwiKSl7by5zcGxpY2UobSwxKSxtLS07bGV0IGU9aVtpLmxlbmd0aC0xXTtmb3IoOzE5PT09ZS5hbHRlcm5hdGUudHlwZTspZT1lLmFsdGVybmF0ZTtlLmFsdGVybmF0ZT1TLmV4cD9PYyhTLmV4cCxmdShnLF8pLGN1KTpmdShnLF8pfX1lbHNlIGlmKHg9SGMoZSxcImZvclwiKSl7bD0hMDtjb25zdCBlPXgucGFyc2VSZXN1bHR8fHN1KHguZXhwKTtlJiZpLnB1c2goRWModC5oZWxwZXIoWGwpLFtlLnNvdXJjZSwkYyhsdShlKSxmdShnLF8pLCEwKV0pKX1lbHNle2lmKHkpe2lmKGYuaGFzKHkpKWNvbnRpbnVlO2YuYWRkKHkpLFwiZGVmYXVsdFwiPT09eSYmKHU9ITApfXMucHVzaChrYyhnLF8pKX19aWYoIWMpe2NvbnN0IGU9KGUsdCk9PmtjKFwiZGVmYXVsdFwiLG4oZSx0LHIpKTthP3AubGVuZ3RoJiZwLnNvbWUoKGU9Pmh1KGUpKSkmJih1fHxzLnB1c2goZSh2b2lkIDAscCkpKTpzLnB1c2goZSh2b2lkIDAsbykpfWNvbnN0IGQ9bD8yOmR1KGUuY2hpbGRyZW4pPzM6MTtsZXQgaD13YyhzLmNvbmNhdChrYyhcIl9cIixUYyhkK1wiXCIsITEpKSkscik7cmV0dXJuIGkubGVuZ3RoJiYoaD1FYyh0LmhlbHBlcih0YyksW2gsQ2MoaSldKSkse3Nsb3RzOmgsaGFzRHluYW1pY1Nsb3RzOmx9fWZ1bmN0aW9uIGZ1KGUsdCl7cmV0dXJuIHdjKFtrYyhcIm5hbWVcIixlKSxrYyhcImZuXCIsdCldKX1mdW5jdGlvbiBkdShlKXtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl7Y29uc3Qgbj1lW3RdO3N3aXRjaChuLnR5cGUpe2Nhc2UgMTppZigyPT09bi50YWdUeXBlfHxkdShuLmNoaWxkcmVuKSlyZXR1cm4hMDticmVhaztjYXNlIDk6aWYoZHUobi5icmFuY2hlcykpcmV0dXJuITA7YnJlYWs7Y2FzZSAxMDpjYXNlIDExOmlmKGR1KG4uY2hpbGRyZW4pKXJldHVybiEwfX1yZXR1cm4hMX1mdW5jdGlvbiBodShlKXtyZXR1cm4gMiE9PWUudHlwZSYmMTIhPT1lLnR5cGV8fCgyPT09ZS50eXBlPyEhZS5jb250ZW50LnRyaW0oKTpodShlLmNvbnRlbnQpKX1jb25zdCBtdT1uZXcgV2Vha01hcCxndT0oZSx0KT0+ZnVuY3Rpb24oKXtpZigxIT09KGU9dC5jdXJyZW50Tm9kZSkudHlwZXx8MCE9PWUudGFnVHlwZSYmMSE9PWUudGFnVHlwZSlyZXR1cm47Y29uc3R7dGFnOm4scHJvcHM6b309ZSxyPTE9PT1lLnRhZ1R5cGU7bGV0IHM9cj9mdW5jdGlvbihlLHQsbj0hMSl7bGV0e3RhZzpvfT1lO2NvbnN0IHI9YnUobykscz1XYyhlLFwiaXNcIik7aWYocylpZihyKXtjb25zdCBlPTY9PT1zLnR5cGU/cy52YWx1ZSYmVGMocy52YWx1ZS5jb250ZW50LCEwKTpzLmV4cDtpZihlKXJldHVybiBFYyh0LmhlbHBlcihKbCksW2VdKX1lbHNlIDY9PT1zLnR5cGUmJnMudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSYmKG89cy52YWx1ZS5jb250ZW50LnNsaWNlKDQpKTtjb25zdCBpPSFyJiZIYyhlLFwiaXNcIik7aWYoaSYmaS5leHApcmV0dXJuIEVjKHQuaGVscGVyKEpsKSxbaS5leHBdKTtjb25zdCBsPVBjKG8pfHx0LmlzQnVpbHRJbkNvbXBvbmVudChvKTtpZihsKXJldHVybiBufHx0LmhlbHBlcihsKSxsO3JldHVybiB0LmhlbHBlcihxbCksdC5jb21wb25lbnRzLmFkZChvKSx0YShvLFwiY29tcG9uZW50XCIpfShlLHQpOmBcIiR7bn1cImA7Y29uc3QgaT1NKHMpJiZzLmNhbGxlZT09PUpsO2xldCBsLGMsYSx1LHAsZixkPTAsaD1pfHxzPT09Vmx8fHM9PT1JbHx8IXImJihcInN2Z1wiPT09bnx8XCJmb3JlaWduT2JqZWN0XCI9PT1uKTtpZihvLmxlbmd0aD4wKXtjb25zdCBuPXZ1KGUsdCx2b2lkIDAscixpKTtsPW4ucHJvcHMsZD1uLnBhdGNoRmxhZyxwPW4uZHluYW1pY1Byb3BOYW1lcztjb25zdCBvPW4uZGlyZWN0aXZlcztmPW8mJm8ubGVuZ3RoP0NjKG8ubWFwKChlPT5mdW5jdGlvbihlLHQpe2NvbnN0IG49W10sbz1tdS5nZXQoZSk7bz9uLnB1c2godC5oZWxwZXJTdHJpbmcobykpOih0LmhlbHBlcihZbCksdC5kaXJlY3RpdmVzLmFkZChlLm5hbWUpLG4ucHVzaCh0YShlLm5hbWUsXCJkaXJlY3RpdmVcIikpKTtjb25zdHtsb2M6cn09ZTtlLmV4cCYmbi5wdXNoKGUuZXhwKTtlLmFyZyYmKGUuZXhwfHxuLnB1c2goXCJ2b2lkIDBcIiksbi5wdXNoKGUuYXJnKSk7aWYoT2JqZWN0LmtleXMoZS5tb2RpZmllcnMpLmxlbmd0aCl7ZS5hcmd8fChlLmV4cHx8bi5wdXNoKFwidm9pZCAwXCIpLG4ucHVzaChcInZvaWQgMFwiKSk7Y29uc3QgdD1UYyhcInRydWVcIiwhMSxyKTtuLnB1c2god2MoZS5tb2RpZmllcnMubWFwKChlPT5rYyhlLHQpKSkscikpfXJldHVybiBDYyhuLGUubG9jKX0oZSx0KSkpKTp2b2lkIDAsbi5zaG91bGRVc2VCbG9jayYmKGg9ITApfWlmKGUuY2hpbGRyZW4ubGVuZ3RoPjApe3M9PT1CbCYmKGg9ITAsZHw9MTAyNCk7aWYociYmcyE9PVZsJiZzIT09Qmwpe2NvbnN0e3Nsb3RzOm4saGFzRHluYW1pY1Nsb3RzOm99PXB1KGUsdCk7Yz1uLG8mJihkfD0xMDI0KX1lbHNlIGlmKDE9PT1lLmNoaWxkcmVuLmxlbmd0aCYmcyE9PVZsKXtjb25zdCBuPWUuY2hpbGRyZW5bMF0sbz1uLnR5cGUscj01PT09b3x8OD09PW87ciYmMD09PUZhKG4sdCkmJihkfD0xKSxjPXJ8fDI9PT1vP246ZS5jaGlsZHJlbn1lbHNlIGM9ZS5jaGlsZHJlbn0wIT09ZCYmKGE9U3RyaW5nKGQpLHAmJnAubGVuZ3RoJiYodT1mdW5jdGlvbihlKXtsZXQgdD1cIltcIjtmb3IobGV0IG49MCxvPWUubGVuZ3RoO248bztuKyspdCs9SlNPTi5zdHJpbmdpZnkoZVtuXSksbjxvLTEmJih0Kz1cIiwgXCIpO3JldHVybiB0K1wiXVwifShwKSkpLGUuY29kZWdlbk5vZGU9eGModCxzLGwsYyxhLHUsZiwhIWgsITEscixlLmxvYyl9O2Z1bmN0aW9uIHZ1KGUsdCxuPWUucHJvcHMsbyxyLHM9ITEpe2NvbnN0e3RhZzppLGxvYzpsLGNoaWxkcmVuOmN9PWU7bGV0IGE9W107Y29uc3QgdT1bXSxwPVtdLGY9Yy5sZW5ndGg+MDtsZXQgZD0hMSxoPTAsbT0hMSxnPSExLHY9ITEseT0hMSxfPSExLGI9ITE7Y29uc3QgUz1bXSxDPSh7a2V5OmUsdmFsdWU6bn0pPT57aWYoUmMoZSkpe2NvbnN0IHM9ZS5jb250ZW50LGk9eChzKTtpZighaXx8byYmIXJ8fFwib25jbGlja1wiPT09cy50b0xvd2VyQ2FzZSgpfHxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIj09PXN8fFUocyl8fCh5PSEwKSxpJiZVKHMpJiYoYj0hMCksMjA9PT1uLnR5cGV8fCg0PT09bi50eXBlfHw4PT09bi50eXBlKSYmRmEobix0KT4wKXJldHVybjtcInJlZlwiPT09cz9tPSEwOlwiY2xhc3NcIj09PXM/Zz0hMDpcInN0eWxlXCI9PT1zP3Y9ITA6XCJrZXlcIj09PXN8fFMuaW5jbHVkZXMocyl8fFMucHVzaChzKSwhb3x8XCJjbGFzc1wiIT09cyYmXCJzdHlsZVwiIT09c3x8Uy5pbmNsdWRlcyhzKXx8Uy5wdXNoKHMpfWVsc2UgXz0hMH07Zm9yKGxldCB4PTA7eDxuLmxlbmd0aDt4Kyspe2NvbnN0IG89blt4XTtpZig2PT09by50eXBlKXtjb25zdHtsb2M6ZSxuYW1lOm4sdmFsdWU6cn09bztsZXQgcz0hMDtpZihcInJlZlwiPT09biYmKG09ITAsdC5zY29wZXMudkZvcj4wJiZhLnB1c2goa2MoVGMoXCJyZWZfZm9yXCIsITApLFRjKFwidHJ1ZVwiKSkpKSxcImlzXCI9PT1uJiYoYnUoaSl8fHImJnIuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSkpY29udGludWU7YS5wdXNoKGtjKFRjKG4sITAsamMoZSwwLG4ubGVuZ3RoKSksVGMocj9yLmNvbnRlbnQ6XCJcIixzLHI/ci5sb2M6ZSkpKX1lbHNle2NvbnN0e25hbWU6bixhcmc6cixleHA6Yyxsb2M6aH09byxtPVwiYmluZFwiPT09bixnPVwib25cIj09PW47aWYoXCJzbG90XCI9PT1uKWNvbnRpbnVlO2lmKFwib25jZVwiPT09bnx8XCJtZW1vXCI9PT1uKWNvbnRpbnVlO2lmKFwiaXNcIj09PW58fG0mJnpjKHIsXCJpc1wiKSYmYnUoaSkpY29udGludWU7aWYoZyYmcyljb250aW51ZTtpZigobSYmemMocixcImtleVwiKXx8ZyYmZiYmemMocixcInZ1ZTpiZWZvcmUtdXBkYXRlXCIpKSYmKGQ9ITApLG0mJnpjKHIsXCJyZWZcIikmJnQuc2NvcGVzLnZGb3I+MCYmYS5wdXNoKGtjKFRjKFwicmVmX2ZvclwiLCEwKSxUYyhcInRydWVcIikpKSwhciYmKG18fGcpKXtfPSEwLGMmJihhLmxlbmd0aCYmKHUucHVzaCh3Yyh5dShhKSxsKSksYT1bXSksdS5wdXNoKG0/Yzp7dHlwZToxNCxsb2M6aCxjYWxsZWU6dC5oZWxwZXIoY2MpLGFyZ3VtZW50czpbY119KSk7Y29udGludWV9Y29uc3Qgdj10LmRpcmVjdGl2ZVRyYW5zZm9ybXNbbl07aWYodil7Y29uc3R7cHJvcHM6bixuZWVkUnVudGltZTpyfT12KG8sZSx0KTshcyYmbi5mb3JFYWNoKEMpLGEucHVzaCguLi5uKSxyJiYocC5wdXNoKG8pLEEocikmJm11LnNldChvLHIpKX1lbHNlIEQobil8fChwLnB1c2gobyksZiYmKGQ9ITApKX19bGV0IHc7aWYodS5sZW5ndGg/KGEubGVuZ3RoJiZ1LnB1c2god2MoeXUoYSksbCkpLHc9dS5sZW5ndGg+MT9FYyh0LmhlbHBlcihvYyksdSxsKTp1WzBdKTphLmxlbmd0aCYmKHc9d2MoeXUoYSksbCkpLF8/aHw9MTY6KGcmJiFvJiYoaHw9MiksdiYmIW8mJihofD00KSxTLmxlbmd0aCYmKGh8PTgpLHkmJihofD0zMikpLGR8fDAhPT1oJiYzMiE9PWh8fCEobXx8Ynx8cC5sZW5ndGg+MCl8fChofD01MTIpLCF0LmluU1NSJiZ3KXN3aXRjaCh3LnR5cGUpe2Nhc2UgMTU6bGV0IGU9LTEsbj0tMSxvPSExO2ZvcihsZXQgdD0wO3Q8dy5wcm9wZXJ0aWVzLmxlbmd0aDt0Kyspe2NvbnN0IHI9dy5wcm9wZXJ0aWVzW3RdLmtleTtSYyhyKT9cImNsYXNzXCI9PT1yLmNvbnRlbnQ/ZT10Olwic3R5bGVcIj09PXIuY29udGVudCYmKG49dCk6ci5pc0hhbmRsZXJLZXl8fChvPSEwKX1jb25zdCByPXcucHJvcGVydGllc1tlXSxzPXcucHJvcGVydGllc1tuXTtvP3c9RWModC5oZWxwZXIoaWMpLFt3XSk6KHImJiFSYyhyLnZhbHVlKSYmKHIudmFsdWU9RWModC5oZWxwZXIocmMpLFtyLnZhbHVlXSkpLHMmJih2fHw0PT09cy52YWx1ZS50eXBlJiZcIltcIj09PXMudmFsdWUuY29udGVudC50cmltKClbMF18fDE3PT09cy52YWx1ZS50eXBlKSYmKHMudmFsdWU9RWModC5oZWxwZXIoc2MpLFtzLnZhbHVlXSkpKTticmVhaztjYXNlIDE0OmJyZWFrO2RlZmF1bHQ6dz1FYyh0LmhlbHBlcihpYyksW0VjKHQuaGVscGVyKGxjKSxbd10pXSl9cmV0dXJue3Byb3BzOncsZGlyZWN0aXZlczpwLHBhdGNoRmxhZzpoLGR5bmFtaWNQcm9wTmFtZXM6UyxzaG91bGRVc2VCbG9jazpkfX1mdW5jdGlvbiB5dShlKXtjb25zdCB0PW5ldyBNYXAsbj1bXTtmb3IobGV0IG89MDtvPGUubGVuZ3RoO28rKyl7Y29uc3Qgcj1lW29dO2lmKDg9PT1yLmtleS50eXBlfHwhci5rZXkuaXNTdGF0aWMpe24ucHVzaChyKTtjb250aW51ZX1jb25zdCBzPXIua2V5LmNvbnRlbnQsaT10LmdldChzKTtpPyhcInN0eWxlXCI9PT1zfHxcImNsYXNzXCI9PT1zfHx4KHMpKSYmX3UoaSxyKToodC5zZXQocyxyKSxuLnB1c2gocikpfXJldHVybiBufWZ1bmN0aW9uIF91KGUsdCl7MTc9PT1lLnZhbHVlLnR5cGU/ZS52YWx1ZS5lbGVtZW50cy5wdXNoKHQudmFsdWUpOmUudmFsdWU9Q2MoW2UudmFsdWUsdC52YWx1ZV0sZS5sb2MpfWZ1bmN0aW9uIGJ1KGUpe3JldHVyblwiY29tcG9uZW50XCI9PT1lfHxcIkNvbXBvbmVudFwiPT09ZX1jb25zdCBTdT0oZSx0KT0+e2lmKEpjKGUpKXtjb25zdHtjaGlsZHJlbjpuLGxvYzpvfT1lLHtzbG90TmFtZTpyLHNsb3RQcm9wczpzfT1mdW5jdGlvbihlLHQpe2xldCBuLG89J1wiZGVmYXVsdFwiJztjb25zdCByPVtdO2ZvcihsZXQgcz0wO3M8ZS5wcm9wcy5sZW5ndGg7cysrKXtjb25zdCB0PWUucHJvcHNbc107Nj09PXQudHlwZT90LnZhbHVlJiYoXCJuYW1lXCI9PT10Lm5hbWU/bz1KU09OLnN0cmluZ2lmeSh0LnZhbHVlLmNvbnRlbnQpOih0Lm5hbWU9eih0Lm5hbWUpLHIucHVzaCh0KSkpOlwiYmluZFwiPT09dC5uYW1lJiZ6Yyh0LmFyZyxcIm5hbWVcIik/dC5leHAmJihvPXQuZXhwKTooXCJiaW5kXCI9PT10Lm5hbWUmJnQuYXJnJiZSYyh0LmFyZykmJih0LmFyZy5jb250ZW50PXoodC5hcmcuY29udGVudCkpLHIucHVzaCh0KSl9aWYoci5sZW5ndGg+MCl7Y29uc3R7cHJvcHM6byxkaXJlY3RpdmVzOnN9PXZ1KGUsdCxyLCExLCExKTtuPW99cmV0dXJue3Nsb3ROYW1lOm8sc2xvdFByb3BzOm59fShlLHQpLGk9W3QucHJlZml4SWRlbnRpZmllcnM/XCJfY3R4LiRzbG90c1wiOlwiJHNsb3RzXCIscixcInt9XCIsXCJ1bmRlZmluZWRcIixcInRydWVcIl07bGV0IGw9MjtzJiYoaVsyXT1zLGw9Myksbi5sZW5ndGgmJihpWzNdPSRjKFtdLG4sITEsITEsbyksbD00KSx0LnNjb3BlSWQmJiF0LnNsb3R0ZWQmJihsPTUpLGkuc3BsaWNlKGwpLGUuY29kZWdlbk5vZGU9RWModC5oZWxwZXIoZWMpLGksbyl9fTtjb25zdCB4dT0vXlxccyooW1xcdyRfXSt8KGFzeW5jXFxzKik/XFwoW14pXSo/XFwpKVxccyo9PnxeXFxzKihhc3luY1xccyspP2Z1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvLEN1PShlLHQsbixvKT0+e2NvbnN0e2xvYzpyLG1vZGlmaWVyczpzLGFyZzppfT1lO2xldCBsO2lmKDQ9PT1pLnR5cGUpaWYoaS5pc1N0YXRpYyl7bGV0IGU9aS5jb250ZW50O2Uuc3RhcnRzV2l0aChcInZ1ZTpcIikmJihlPWB2bm9kZS0ke2Uuc2xpY2UoNCl9YCksbD1UYyhKKHooZSkpLCEwLGkubG9jKX1lbHNlIGw9TmMoW2Ake24uaGVscGVyU3RyaW5nKHBjKX0oYCxpLFwiKVwiXSk7ZWxzZSBsPWksbC5jaGlsZHJlbi51bnNoaWZ0KGAke24uaGVscGVyU3RyaW5nKHBjKX0oYCksbC5jaGlsZHJlbi5wdXNoKFwiKVwiKTtsZXQgYz1lLmV4cDtjJiYhYy5jb250ZW50LnRyaW0oKSYmKGM9dm9pZCAwKTtsZXQgYT1uLmNhY2hlSGFuZGxlcnMmJiFjJiYhbi5pblZPbmNlO2lmKGMpe2NvbnN0IGU9TGMoYy5jb250ZW50KSx0PSEoZXx8eHUudGVzdChjLmNvbnRlbnQpKSxuPWMuY29udGVudC5pbmNsdWRlcyhcIjtcIik7KHR8fGEmJmUpJiYoYz1OYyhbYCR7dD9cIiRldmVudFwiOlwiKC4uLmFyZ3MpXCJ9ID0+ICR7bj9cIntcIjpcIihcIn1gLGMsbj9cIn1cIjpcIilcIl0pKX1sZXQgdT17cHJvcHM6W2tjKGwsY3x8VGMoXCIoKSA9PiB7fVwiLCExLHIpKV19O3JldHVybiBvJiYodT1vKHUpKSxhJiYodS5wcm9wc1swXS52YWx1ZT1uLmNhY2hlKHUucHJvcHNbMF0udmFsdWUpKSx1LnByb3BzLmZvckVhY2goKGU9PmUua2V5LmlzSGFuZGxlcktleT0hMCkpLHV9LHd1PShlLHQsbik9Pntjb25zdHtleHA6byxtb2RpZmllcnM6cixsb2M6c309ZSxpPWUuYXJnO3JldHVybiA0IT09aS50eXBlPyhpLmNoaWxkcmVuLnVuc2hpZnQoXCIoXCIpLGkuY2hpbGRyZW4ucHVzaCgnKSB8fCBcIlwiJykpOmkuaXNTdGF0aWN8fChpLmNvbnRlbnQ9YCR7aS5jb250ZW50fSB8fCBcIlwiYCksci5pbmNsdWRlcyhcImNhbWVsXCIpJiYoND09PWkudHlwZT9pLmNvbnRlbnQ9aS5pc1N0YXRpYz96KGkuY29udGVudCk6YCR7bi5oZWxwZXJTdHJpbmcoYWMpfSgke2kuY29udGVudH0pYDooaS5jaGlsZHJlbi51bnNoaWZ0KGAke24uaGVscGVyU3RyaW5nKGFjKX0oYCksaS5jaGlsZHJlbi5wdXNoKFwiKVwiKSkpLG4uaW5TU1J8fChyLmluY2x1ZGVzKFwicHJvcFwiKSYma3UoaSxcIi5cIiksci5pbmNsdWRlcyhcImF0dHJcIikmJmt1KGksXCJeXCIpKSwhb3x8ND09PW8udHlwZSYmIW8uY29udGVudC50cmltKCk/e3Byb3BzOltrYyhpLFRjKFwiXCIsITAscykpXX06e3Byb3BzOltrYyhpLG8pXX19LGt1PShlLHQpPT57ND09PWUudHlwZT9lLmNvbnRlbnQ9ZS5pc1N0YXRpYz90K2UuY29udGVudDpgXFxgJHt0fVxcJHske2UuY29udGVudH19XFxgYDooZS5jaGlsZHJlbi51bnNoaWZ0KGAnJHt0fScgKyAoYCksZS5jaGlsZHJlbi5wdXNoKFwiKVwiKSl9LFR1PShlLHQpPT57aWYoMD09PWUudHlwZXx8MT09PWUudHlwZXx8MTE9PT1lLnR5cGV8fDEwPT09ZS50eXBlKXJldHVybigpPT57Y29uc3Qgbj1lLmNoaWxkcmVuO2xldCBvLHI9ITE7Zm9yKGxldCBlPTA7ZTxuLmxlbmd0aDtlKyspe2NvbnN0IHQ9bltlXTtpZihLYyh0KSl7cj0hMDtmb3IobGV0IHI9ZSsxO3I8bi5sZW5ndGg7cisrKXtjb25zdCBzPW5bcl07aWYoIUtjKHMpKXtvPXZvaWQgMDticmVha31vfHwobz1uW2VdPU5jKFt0XSx0LmxvYykpLG8uY2hpbGRyZW4ucHVzaChcIiArIFwiLHMpLG4uc3BsaWNlKHIsMSksci0tfX19aWYociYmKDEhPT1uLmxlbmd0aHx8MCE9PWUudHlwZSYmKDEhPT1lLnR5cGV8fDAhPT1lLnRhZ1R5cGV8fGUucHJvcHMuZmluZCgoZT0+Nz09PWUudHlwZSYmIXQuZGlyZWN0aXZlVHJhbnNmb3Jtc1tlLm5hbWVdKSkpKSlmb3IobGV0IGU9MDtlPG4ubGVuZ3RoO2UrKyl7Y29uc3Qgbz1uW2VdO2lmKEtjKG8pfHw4PT09by50eXBlKXtjb25zdCByPVtdOzI9PT1vLnR5cGUmJlwiIFwiPT09by5jb250ZW50fHxyLnB1c2gobyksdC5zc3J8fDAhPT1GYShvLHQpfHxyLnB1c2goXCIxXCIpLG5bZV09e3R5cGU6MTIsY29udGVudDpvLGxvYzpvLmxvYyxjb2RlZ2VuTm9kZTpFYyh0LmhlbHBlcihLbCkscil9fX19fSxOdT1uZXcgV2Vha1NldCxFdT0oZSx0KT0+e2lmKDE9PT1lLnR5cGUmJkhjKGUsXCJvbmNlXCIsITApKXtpZihOdS5oYXMoZSl8fHQuaW5WT25jZSlyZXR1cm47cmV0dXJuIE51LmFkZChlKSx0LmluVk9uY2U9ITAsdC5oZWxwZXIoZmMpLCgpPT57dC5pblZPbmNlPSExO2NvbnN0IGU9dC5jdXJyZW50Tm9kZTtlLmNvZGVnZW5Ob2RlJiYoZS5jb2RlZ2VuTm9kZT10LmNhY2hlKGUuY29kZWdlbk5vZGUsITApKX19fSwkdT0oZSx0LG4pPT57Y29uc3R7ZXhwOm8sYXJnOnJ9PWU7aWYoIW8pcmV0dXJuIE91KCk7Y29uc3Qgcz1vLmxvYy5zb3VyY2UsaT00PT09by50eXBlP28uY29udGVudDpzO2lmKCFpLnRyaW0oKXx8IUxjKGkpKXJldHVybiBPdSgpO2NvbnN0IGw9cnx8VGMoXCJtb2RlbFZhbHVlXCIsITApLGM9cj9SYyhyKT9gb25VcGRhdGU6JHtyLmNvbnRlbnR9YDpOYyhbJ1wib25VcGRhdGU6XCIgKyAnLHJdKTpcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjtsZXQgYTthPU5jKFtgJHtuLmlzVFM/XCIoJGV2ZW50OiBhbnkpXCI6XCIkZXZlbnRcIn0gPT4gKChgLG8sXCIpID0gJGV2ZW50KVwiXSk7Y29uc3QgdT1ba2MobCxlLmV4cCksa2MoYyxhKV07aWYoZS5tb2RpZmllcnMubGVuZ3RoJiYxPT09dC50YWdUeXBlKXtjb25zdCB0PWUubW9kaWZpZXJzLm1hcCgoZT0+KE1jKGUpP2U6SlNPTi5zdHJpbmdpZnkoZSkpK1wiOiB0cnVlXCIpKS5qb2luKFwiLCBcIiksbj1yP1JjKHIpP2Ake3IuY29udGVudH1Nb2RpZmllcnNgOk5jKFtyLCcgKyBcIk1vZGlmaWVyc1wiJ10pOlwibW9kZWxNb2RpZmllcnNcIjt1LnB1c2goa2MobixUYyhgeyAke3R9IH1gLCExLGUubG9jLDIpKSl9cmV0dXJuIE91KHUpfTtmdW5jdGlvbiBPdShlPVtdKXtyZXR1cm57cHJvcHM6ZX19Y29uc3QgUnU9bmV3IFdlYWtTZXQsRnU9KGUsdCk9PntpZigxPT09ZS50eXBlKXtjb25zdCBuPUhjKGUsXCJtZW1vXCIpO2lmKCFufHxSdS5oYXMoZSkpcmV0dXJuO3JldHVybiBSdS5hZGQoZSksKCk9Pntjb25zdCBvPWUuY29kZWdlbk5vZGV8fHQuY3VycmVudE5vZGUuY29kZWdlbk5vZGU7byYmMTM9PT1vLnR5cGUmJigxIT09ZS50YWdUeXBlJiZuYShvLHQpLGUuY29kZWdlbk5vZGU9RWModC5oZWxwZXIoeWMpLFtuLmV4cCwkYyh2b2lkIDAsbyksXCJfY2FjaGVcIixTdHJpbmcodC5jYWNoZWQrKyldKSl9fX07ZnVuY3Rpb24gUHUoZSx0PXt9KXtjb25zdCBuPXQub25FcnJvcnx8Rmwsbz1cIm1vZHVsZVwiPT09dC5tb2RlOyEwPT09dC5wcmVmaXhJZGVudGlmaWVycz9uKEFsKDQ2KSk6byYmbihBbCg0NykpO3QuY2FjaGVIYW5kbGVycyYmbihBbCg0OCkpLHQuc2NvcGVJZCYmIW8mJm4oQWwoNDkpKTtjb25zdCByPVAoZSk/aWEoZSx0KTplLFtzLGldPVtbRXUsWmEsRnUsdHUsU3UsZ3UsYXUsVHVdLHtvbjpDdSxiaW5kOnd1LG1vZGVsOiR1fV07cmV0dXJuIExhKHIsdyh7fSx0LHtwcmVmaXhJZGVudGlmaWVyczpmYWxzZSxub2RlVHJhbnNmb3JtczpbLi4ucywuLi50Lm5vZGVUcmFuc2Zvcm1zfHxbXV0sZGlyZWN0aXZlVHJhbnNmb3Jtczp3KHt9LGksdC5kaXJlY3RpdmVUcmFuc2Zvcm1zfHx7fSl9KSksSGEocix3KHt9LHQse3ByZWZpeElkZW50aWZpZXJzOmZhbHNlfSkpfWNvbnN0IEF1PVN5bWJvbChcIlwiKSxNdT1TeW1ib2woXCJcIiksVnU9U3ltYm9sKFwiXCIpLEl1PVN5bWJvbChcIlwiKSxCdT1TeW1ib2woXCJcIiksTHU9U3ltYm9sKFwiXCIpLGp1PVN5bWJvbChcIlwiKSxVdT1TeW1ib2woXCJcIiksRHU9U3ltYm9sKFwiXCIpLEh1PVN5bWJvbChcIlwiKTt2YXIgV3U7bGV0IHp1O1d1PXtbQXVdOlwidk1vZGVsUmFkaW9cIixbTXVdOlwidk1vZGVsQ2hlY2tib3hcIixbVnVdOlwidk1vZGVsVGV4dFwiLFtJdV06XCJ2TW9kZWxTZWxlY3RcIixbQnVdOlwidk1vZGVsRHluYW1pY1wiLFtMdV06XCJ3aXRoTW9kaWZpZXJzXCIsW2p1XTpcIndpdGhLZXlzXCIsW1V1XTpcInZTaG93XCIsW0R1XTpcIlRyYW5zaXRpb25cIixbSHVdOlwiVHJhbnNpdGlvbkdyb3VwXCJ9LE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoV3UpLmZvckVhY2goKGU9PntiY1tlXT1XdVtlXX0pKTtjb25zdCBLdT1lKFwic3R5bGUsaWZyYW1lLHNjcmlwdCxub3NjcmlwdFwiLCEwKSxHdT17aXNWb2lkVGFnOmYsaXNOYXRpdmVUYWc6ZT0+dShlKXx8cChlKSxpc1ByZVRhZzplPT5cInByZVwiPT09ZSxkZWNvZGVFbnRpdGllczpmdW5jdGlvbihlLHQ9ITEpe3JldHVybiB6dXx8KHp1PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLHQ/KHp1LmlubmVySFRNTD1gPGRpdiBmb289XCIke2UucmVwbGFjZSgvXCIvZyxcIiZxdW90O1wiKX1cIj5gLHp1LmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZShcImZvb1wiKSk6KHp1LmlubmVySFRNTD1lLHp1LnRleHRDb250ZW50KX0saXNCdWlsdEluQ29tcG9uZW50OmU9PkZjKGUsXCJUcmFuc2l0aW9uXCIpP0R1OkZjKGUsXCJUcmFuc2l0aW9uR3JvdXBcIik/SHU6dm9pZCAwLGdldE5hbWVzcGFjZShlLHQpe2xldCBuPXQ/dC5uczowO2lmKHQmJjI9PT1uKWlmKFwiYW5ub3RhdGlvbi14bWxcIj09PXQudGFnKXtpZihcInN2Z1wiPT09ZSlyZXR1cm4gMTt0LnByb3BzLnNvbWUoKGU9PjY9PT1lLnR5cGUmJlwiZW5jb2RpbmdcIj09PWUubmFtZSYmbnVsbCE9ZS52YWx1ZSYmKFwidGV4dC9odG1sXCI9PT1lLnZhbHVlLmNvbnRlbnR8fFwiYXBwbGljYXRpb24veGh0bWwreG1sXCI9PT1lLnZhbHVlLmNvbnRlbnQpKSkmJihuPTApfWVsc2UvXm0oPzpbaW9uc118dGV4dCkkLy50ZXN0KHQudGFnKSYmXCJtZ2x5cGhcIiE9PWUmJlwibWFsaWdubWFya1wiIT09ZSYmKG49MCk7ZWxzZSB0JiYxPT09biYmKFwiZm9yZWlnbk9iamVjdFwiIT09dC50YWcmJlwiZGVzY1wiIT09dC50YWcmJlwidGl0bGVcIiE9PXQudGFnfHwobj0wKSk7aWYoMD09PW4pe2lmKFwic3ZnXCI9PT1lKXJldHVybiAxO2lmKFwibWF0aFwiPT09ZSlyZXR1cm4gMn1yZXR1cm4gbn0sZ2V0VGV4dE1vZGUoe3RhZzplLG5zOnR9KXtpZigwPT09dCl7aWYoXCJ0ZXh0YXJlYVwiPT09ZXx8XCJ0aXRsZVwiPT09ZSlyZXR1cm4gMTtpZihLdShlKSlyZXR1cm4gMn1yZXR1cm4gMH19LHF1PShlLHQpPT57Y29uc3Qgbj1sKGUpO3JldHVybiBUYyhKU09OLnN0cmluZ2lmeShuKSwhMSx0LDMpfTtjb25zdCBKdT1lKFwicGFzc2l2ZSxvbmNlLGNhcHR1cmVcIiksWXU9ZShcInN0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QsbWlkZGxlXCIpLFp1PWUoXCJsZWZ0LHJpZ2h0XCIpLFF1PWUoXCJvbmtleXVwLG9ua2V5ZG93bixvbmtleXByZXNzXCIsITApLFh1PShlLHQpPT5SYyhlKSYmXCJvbmNsaWNrXCI9PT1lLmNvbnRlbnQudG9Mb3dlckNhc2UoKT9UYyh0LCEwKTo0IT09ZS50eXBlP05jKFtcIihcIixlLGApID09PSBcIm9uQ2xpY2tcIiA/IFwiJHt0fVwiIDogKGAsZSxcIilcIl0pOmUsZXA9KGUsdCk9PnsxIT09ZS50eXBlfHwwIT09ZS50YWdUeXBlfHxcInNjcmlwdFwiIT09ZS50YWcmJlwic3R5bGVcIiE9PWUudGFnfHx0LnJlbW92ZU5vZGUoKX0sdHA9W2U9PnsxPT09ZS50eXBlJiZlLnByb3BzLmZvckVhY2goKCh0LG4pPT57Nj09PXQudHlwZSYmXCJzdHlsZVwiPT09dC5uYW1lJiZ0LnZhbHVlJiYoZS5wcm9wc1tuXT17dHlwZTo3LG5hbWU6XCJiaW5kXCIsYXJnOlRjKFwic3R5bGVcIiwhMCx0LmxvYyksZXhwOnF1KHQudmFsdWUuY29udGVudCx0LmxvYyksbW9kaWZpZXJzOltdLGxvYzp0LmxvY30pfSkpfV0sbnA9e2Nsb2FrOigpPT4oe3Byb3BzOltdfSksaHRtbDooZSx0LG4pPT57Y29uc3R7ZXhwOm8sbG9jOnJ9PWU7cmV0dXJuIHQuY2hpbGRyZW4ubGVuZ3RoJiYodC5jaGlsZHJlbi5sZW5ndGg9MCkse3Byb3BzOltrYyhUYyhcImlubmVySFRNTFwiLCEwLHIpLG98fFRjKFwiXCIsITApKV19fSx0ZXh0OihlLHQsbik9Pntjb25zdHtleHA6byxsb2M6cn09ZTtyZXR1cm4gdC5jaGlsZHJlbi5sZW5ndGgmJih0LmNoaWxkcmVuLmxlbmd0aD0wKSx7cHJvcHM6W2tjKFRjKFwidGV4dENvbnRlbnRcIiwhMCksbz9GYShvLG4pPjA/bzpFYyhuLmhlbHBlclN0cmluZyhuYyksW29dLHIpOlRjKFwiXCIsITApKV19fSxtb2RlbDooZSx0LG4pPT57Y29uc3Qgbz0kdShlLHQsbik7aWYoIW8ucHJvcHMubGVuZ3RofHwxPT09dC50YWdUeXBlKXJldHVybiBvO2NvbnN0e3RhZzpyfT10LHM9bi5pc0N1c3RvbUVsZW1lbnQocik7aWYoXCJpbnB1dFwiPT09cnx8XCJ0ZXh0YXJlYVwiPT09cnx8XCJzZWxlY3RcIj09PXJ8fHMpe2xldCBlPVZ1LGk9ITE7aWYoXCJpbnB1dFwiPT09cnx8cyl7Y29uc3Qgbj1XYyh0LFwidHlwZVwiKTtpZihuKXtpZig3PT09bi50eXBlKWU9QnU7ZWxzZSBpZihuLnZhbHVlKXN3aXRjaChuLnZhbHVlLmNvbnRlbnQpe2Nhc2VcInJhZGlvXCI6ZT1BdTticmVhaztjYXNlXCJjaGVja2JveFwiOmU9TXU7YnJlYWs7Y2FzZVwiZmlsZVwiOmk9ITB9fWVsc2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJvcHMuc29tZSgoZT0+ISg3IT09ZS50eXBlfHxcImJpbmRcIiE9PWUubmFtZXx8ZS5hcmcmJjQ9PT1lLmFyZy50eXBlJiZlLmFyZy5pc1N0YXRpYykpKX0pKHQpJiYoZT1CdSl9ZWxzZVwic2VsZWN0XCI9PT1yJiYoZT1JdSk7aXx8KG8ubmVlZFJ1bnRpbWU9bi5oZWxwZXIoZSkpfXJldHVybiBvLnByb3BzPW8ucHJvcHMuZmlsdGVyKChlPT4hKDQ9PT1lLmtleS50eXBlJiZcIm1vZGVsVmFsdWVcIj09PWUua2V5LmNvbnRlbnQpKSksb30sb246KGUsdCxuKT0+Q3UoZSwwLG4sKHQ9Pntjb25zdHttb2RpZmllcnM6b309ZTtpZighby5sZW5ndGgpcmV0dXJuIHQ7bGV0e2tleTpyLHZhbHVlOnN9PXQucHJvcHNbMF07Y29uc3R7a2V5TW9kaWZpZXJzOmksbm9uS2V5TW9kaWZpZXJzOmwsZXZlbnRPcHRpb25Nb2RpZmllcnM6Y309KChlLHQsbixvKT0+e2NvbnN0IHI9W10scz1bXSxpPVtdO2ZvcihsZXQgbD0wO2w8dC5sZW5ndGg7bCsrKXtjb25zdCBuPXRbbF07SnUobik/aS5wdXNoKG4pOlp1KG4pP1JjKGUpP1F1KGUuY29udGVudCk/ci5wdXNoKG4pOnMucHVzaChuKTooci5wdXNoKG4pLHMucHVzaChuKSk6WXUobik/cy5wdXNoKG4pOnIucHVzaChuKX1yZXR1cm57a2V5TW9kaWZpZXJzOnIsbm9uS2V5TW9kaWZpZXJzOnMsZXZlbnRPcHRpb25Nb2RpZmllcnM6aX19KShyLG8pO2lmKGwuaW5jbHVkZXMoXCJyaWdodFwiKSYmKHI9WHUocixcIm9uQ29udGV4dG1lbnVcIikpLGwuaW5jbHVkZXMoXCJtaWRkbGVcIikmJihyPVh1KHIsXCJvbk1vdXNldXBcIikpLGwubGVuZ3RoJiYocz1FYyhuLmhlbHBlcihMdSksW3MsSlNPTi5zdHJpbmdpZnkobCldKSksIWkubGVuZ3RofHxSYyhyKSYmIVF1KHIuY29udGVudCl8fChzPUVjKG4uaGVscGVyKGp1KSxbcyxKU09OLnN0cmluZ2lmeShpKV0pKSxjLmxlbmd0aCl7Y29uc3QgZT1jLm1hcChxKS5qb2luKFwiXCIpO3I9UmMocik/VGMoYCR7ci5jb250ZW50fSR7ZX1gLCEwKTpOYyhbXCIoXCIscixgKSArIFwiJHtlfVwiYF0pfXJldHVybntwcm9wczpba2MocixzKV19fSkpLHNob3c6KGUsdCxuKT0+KHtwcm9wczpbXSxuZWVkUnVudGltZTpuLmhlbHBlcihVdSl9KX07Y29uc3Qgb3A9T2JqZWN0LmNyZWF0ZShudWxsKTtmdW5jdGlvbiBycChlLHQpe2lmKCFQKGUpKXtpZighZS5ub2RlVHlwZSlyZXR1cm4gXztlPWUuaW5uZXJIVE1MfWNvbnN0IG49ZSxvPW9wW25dO2lmKG8pcmV0dXJuIG87aWYoXCIjXCI9PT1lWzBdKXtjb25zdCB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk7ZT10P3QuaW5uZXJIVE1MOlwiXCJ9Y29uc3R7Y29kZTpyfT1mdW5jdGlvbihlLHQ9e30pe3JldHVybiBQdShlLHcoe30sR3UsdCx7bm9kZVRyYW5zZm9ybXM6W2VwLC4uLnRwLC4uLnQubm9kZVRyYW5zZm9ybXN8fFtdXSxkaXJlY3RpdmVUcmFuc2Zvcm1zOncoe30sbnAsdC5kaXJlY3RpdmVUcmFuc2Zvcm1zfHx7fSksdHJhbnNmb3JtSG9pc3Q6bnVsbH0pKX0oZSx3KHtob2lzdFN0YXRpYzohMCxvbkVycm9yOnZvaWQgMCxvbldhcm46X30sdCkpLHM9bmV3IEZ1bmN0aW9uKFwiVnVlXCIscikoUmwpO3JldHVybiBzLl9yYz0hMCxvcFtuXT1zfUZzKHJwKTtleHBvcnR7aW8gYXMgQmFzZVRyYW5zaXRpb24sS3IgYXMgQ29tbWVudCxuZSBhcyBFZmZlY3RTY29wZSxXciBhcyBGcmFnbWVudCxfbyBhcyBLZWVwQWxpdmUsZ2UgYXMgUmVhY3RpdmVFZmZlY3QsR3IgYXMgU3RhdGljLFVuIGFzIFN1c3BlbnNlLEhyIGFzIFRlbGVwb3J0LHpyIGFzIFRleHQsRmkgYXMgVHJhbnNpdGlvbixZaSBhcyBUcmFuc2l0aW9uR3JvdXAsTmkgYXMgVnVlRWxlbWVudCxadCBhcyBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyxZdCBhcyBjYWxsV2l0aEVycm9ySGFuZGxpbmcseiBhcyBjYW1lbGl6ZSxxIGFzIGNhcGl0YWxpemUsZnMgYXMgY2xvbmVWTm9kZSxpaSBhcyBjb21wYXRVdGlscyxycCBhcyBjb21waWxlLGpzIGFzIGNvbXB1dGVkLE5sIGFzIGNyZWF0ZUFwcCxucyBhcyBjcmVhdGVCbG9jayxtcyBhcyBjcmVhdGVDb21tZW50Vk5vZGUsdHMgYXMgY3JlYXRlRWxlbWVudEJsb2NrLGFzIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSxNciBhcyBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcixKcyBhcyBjcmVhdGVQcm9wc1Jlc3RQcm94eSxBciBhcyBjcmVhdGVSZW5kZXJlcixFbCBhcyBjcmVhdGVTU1JBcHAscW8gYXMgY3JlYXRlU2xvdHMsaHMgYXMgY3JlYXRlU3RhdGljVk5vZGUsZHMgYXMgY3JlYXRlVGV4dFZOb2RlLHVzIGFzIGNyZWF0ZVZOb2RlLFV0IGFzIGN1c3RvbVJlZixnbyBhcyBkZWZpbmVBc3luY0NvbXBvbmVudCxobyBhcyBkZWZpbmVDb21wb25lbnQsd2kgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCxEcyBhcyBkZWZpbmVFbWl0cyxIcyBhcyBkZWZpbmVFeHBvc2UsVXMgYXMgZGVmaW5lUHJvcHMsa2kgYXMgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCx4biBhcyBkZXZ0b29scyx5ZSBhcyBlZmZlY3Qsb2UgYXMgZWZmZWN0U2NvcGUsd3MgYXMgZ2V0Q3VycmVudEluc3RhbmNlLHNlIGFzIGdldEN1cnJlbnRTY29wZSxmbyBhcyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4scHMgYXMgZ3VhcmRSZWFjdGl2ZVByb3BzLFpzIGFzIGgsUXQgYXMgaGFuZGxlRXJyb3IsVGwgYXMgaHlkcmF0ZSxlaSBhcyBpbml0Q3VzdG9tRm9ybWF0dGVyLE9sIGFzIGluaXREaXJlY3RpdmVzRm9yU1NSLHFuIGFzIGluamVjdCxuaSBhcyBpc01lbW9TYW1lLHd0IGFzIGlzUHJveHksU3QgYXMgaXNSZWFjdGl2ZSx4dCBhcyBpc1JlYWRvbmx5LFJ0IGFzIGlzUmVmLFBzIGFzIGlzUnVudGltZU9ubHksQ3QgYXMgaXNTaGFsbG93LG9zIGFzIGlzVk5vZGUsVHQgYXMgbWFya1JhdyxxcyBhcyBtZXJnZURlZmF1bHRzLF9zIGFzIG1lcmdlUHJvcHMsZG4gYXMgbmV4dFRpY2ssYyBhcyBub3JtYWxpemVDbGFzcyxhIGFzIG5vcm1hbGl6ZVByb3BzLHIgYXMgbm9ybWFsaXplU3R5bGUsU28gYXMgb25BY3RpdmF0ZWQsJG8gYXMgb25CZWZvcmVNb3VudCxQbyBhcyBvbkJlZm9yZVVubW91bnQsUm8gYXMgb25CZWZvcmVVcGRhdGUseG8gYXMgb25EZWFjdGl2YXRlZCxCbyBhcyBvbkVycm9yQ2FwdHVyZWQsT28gYXMgb25Nb3VudGVkLElvIGFzIG9uUmVuZGVyVHJhY2tlZCxWbyBhcyBvblJlbmRlclRyaWdnZXJlZCxpZSBhcyBvblNjb3BlRGlzcG9zZSxNbyBhcyBvblNlcnZlclByZWZldGNoLEFvIGFzIG9uVW5tb3VudGVkLEZvIGFzIG9uVXBkYXRlZCxZciBhcyBvcGVuQmxvY2ssRm4gYXMgcG9wU2NvcGVJZCxHbiBhcyBwcm92aWRlLEx0IGFzIHByb3h5UmVmcyxSbiBhcyBwdXNoU2NvcGVJZCx2biBhcyBxdWV1ZVBvc3RGbHVzaENiLGd0IGFzIHJlYWN0aXZlLHl0IGFzIHJlYWRvbmx5LEZ0IGFzIHJlZixGcyBhcyByZWdpc3RlclJ1bnRpbWVDb21waWxlcixrbCBhcyByZW5kZXIsR28gYXMgcmVuZGVyTGlzdCxKbyBhcyByZW5kZXJTbG90LFVvIGFzIHJlc29sdmVDb21wb25lbnQsV28gYXMgcmVzb2x2ZURpcmVjdGl2ZSxIbyBhcyByZXNvbHZlRHluYW1pY0NvbXBvbmVudCxzaSBhcyByZXNvbHZlRmlsdGVyLGNvIGFzIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsWHIgYXMgc2V0QmxvY2tUcmFja2luZyx3biBhcyBzZXREZXZ0b29sc0hvb2sscG8gYXMgc2V0VHJhbnNpdGlvbkhvb2tzLHZ0IGFzIHNoYWxsb3dSZWFjdGl2ZSxfdCBhcyBzaGFsbG93UmVhZG9ubHksUHQgYXMgc2hhbGxvd1JlZixRcyBhcyBzc3JDb250ZXh0S2V5LHJpIGFzIHNzclV0aWxzLF9lIGFzIHN0b3AsbSBhcyB0b0Rpc3BsYXlTdHJpbmcsSiBhcyB0b0hhbmRsZXJLZXksWm8gYXMgdG9IYW5kbGVycyxrdCBhcyB0b1JhdyxXdCBhcyB0b1JlZixEdCBhcyB0b1JlZnMsc3MgYXMgdHJhbnNmb3JtVk5vZGVBcmdzLFZ0IGFzIHRyaWdnZXJSZWYsSXQgYXMgdW5yZWYsS3MgYXMgdXNlQXR0cnMsRWkgYXMgdXNlQ3NzTW9kdWxlLCRpIGFzIHVzZUNzc1ZhcnMsWHMgYXMgdXNlU1NSQ29udGV4dCx6cyBhcyB1c2VTbG90cyxybyBhcyB1c2VUcmFuc2l0aW9uU3RhdGUscmwgYXMgdk1vZGVsQ2hlY2tib3gscGwgYXMgdk1vZGVsRHluYW1pYyxpbCBhcyB2TW9kZWxSYWRpbyxsbCBhcyB2TW9kZWxTZWxlY3Qsb2wgYXMgdk1vZGVsVGV4dCx5bCBhcyB2U2hvdyxvaSBhcyB2ZXJzaW9uLEd0IGFzIHdhcm4sWG4gYXMgd2F0Y2gsSm4gYXMgd2F0Y2hFZmZlY3QsWW4gYXMgd2F0Y2hQb3N0RWZmZWN0LFpuIGFzIHdhdGNoU3luY0VmZmVjdCxZcyBhcyB3aXRoQXN5bmNDb250ZXh0LEFuIGFzIHdpdGhDdHgsV3MgYXMgd2l0aERlZmF1bHRzLExvIGFzIHdpdGhEaXJlY3RpdmVzLHZsIGFzIHdpdGhLZXlzLHRpIGFzIHdpdGhNZW1vLG1sIGFzIHdpdGhNb2RpZmllcnMsUG4gYXMgd2l0aFNjb3BlSWR9O1xuIiwiaW1wb3J0IHsgZG9fcGllIH0gZnJvbSAnLi9jaGFydHMvcGllLWNoYXJ0J1xuXG53aW5kb3cuZG9fcGllID0gZG9fcGllXG5cbmltcG9ydCB7IENoYXJ0V2lkZ2V0LCBXaWRnZXRVdGlscyB9IGZyb20gJy4vd2lkZ2V0L3dpZGdldHMnXG5pbXBvcnQgJy4vc2lkZWJhci9zaWRlYmFyJ1xuaW1wb3J0IHsgbnRvcENoYXJ0QXBleCB9IGZyb20gXCIuL250b3BDaGFydEFwZXhcIjtcblxuLyogZGF0YXRhYmxlcy5uZXQgZXh0ZW5zaW9ucyAqL1xuaW1wb3J0IHsgRGF0YVRhYmxlRmlsdGVyc01lbnUsIERhdGFUYWJsZVV0aWxzLCBEYXRhVGFibGVSZW5kZXJzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzJ1xuXG53aW5kb3cuRGF0YVRhYmxlVXRpbHMgPSBEYXRhVGFibGVVdGlsc1xud2luZG93LkRhdGFUYWJsZUZpbHRlcnNNZW51ID0gRGF0YVRhYmxlRmlsdGVyc01lbnVcbndpbmRvdy5EYXRhVGFibGVSZW5kZXJzID0gRGF0YVRhYmxlUmVuZGVyc1xuXG53aW5kb3cuQ2hhcnRXaWRnZXQgPSBDaGFydFdpZGdldDtcbndpbmRvdy5XaWRnZXRVdGlscyA9IFdpZGdldFV0aWxzO1xud2luZG93Lm50b3BDaGFydEFwZXggPSBudG9wQ2hhcnRBcGV4O1xuIiwiLyogSGFuZGxlIEJsb2cgTm90aWZpY2F0aW9ucyAqL1xuJChmdW5jdGlvbiAoKSB7XG5cbiAgZnVuY3Rpb24gYmxvZ05vdGlmY2F0aW9uQ2xpY2soZSkge1xuXG4gICAgaWYgKGUudHlwZSA9PSBcIm1vdXNlZG93blwiICYmIChlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IGUud2hpY2ggIT09IDIpKSByZXR1cm47XG5cbiAgICBjb25zdCBpZCA9ICQodGhpcykuZGF0YSgnaWQnKTtcblxuICAgICQucG9zdChgJHtodHRwX3ByZWZpeH0vbHVhL3VwZGF0ZV9ibG9nX3Bvc3RzLmx1YWAsIHtcbiAgICAgIGJsb2dfbm90aWZpY2F0aW9uX2lkOiBpZCxcbiAgICAgIGNzcmY6IHdpbmRvdy5fX0JMT0dfTk9USUZJQ0FUSU9OX0NTUkZfX1xuICAgIH0sXG4gICAgICAoZGF0YSkgPT4ge1xuXG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcblxuICAgICAgICAgICQodGhpcykub2ZmKCdjbGljaycpLm9mZignbW91c2Vkb3duJykuYXR0cignZGF0YS1yZWFkJywgJ3RydWUnKS5kYXRhKCdyZWFkJywgJ3RydWUnKS5maW5kKCcuYmFkZ2UnKS5yZW1vdmUoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBjb3VudCA9ICQoYC5ibG9nLW5vdGlmaWNhdGlvbltkYXRhLXJlYWQ9J2ZhbHNlJ11gKS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICAgICAgJCgnLm5vdGlmaWNhdGlvbi1iZWxsJykucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJCgnLm5vdGlmaWNhdGlvbi1iZWxsJykuaHRtbChjb3VudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIG9uIHRoZSBub3RpZmljYXRpb25zIG5vdCB5ZXQgcmVhZCBkZWxlZ2F0ZSB0aGUgY2xpY2sgZXZlbnRcbiAgJChgLmJsb2ctbm90aWZpY2F0aW9uW2RhdGEtcmVhZD0nZmFsc2UnXWApLm9uKCdjbGljaycsIGJsb2dOb3RpZmNhdGlvbkNsaWNrKS5vbignbW91c2Vkb3duJywgYmxvZ05vdGlmY2F0aW9uQ2xpY2spO1xufSk7IiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBoLCByZWYgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IFsnY29udGVudCddLFxuICAgIHdhdGNoOiB7XG5cdFwiY29udGVudFwiOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkge1xuXHQgICAgLy8gdGhpcy4kZm9yY2VVcGRhdGUoKTtcblx0fVxuICAgIH0sXG4gICAgcmVuZGVyKCkge1xuXHRyZXR1cm4gaCh0aGlzLiRwcm9wcy5jb250ZW50KTtcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPCEtLSBVc2FnZTogLS0+XG48IS0tICAgPERyb3Bkb3duIDppZD1cImlkXCIgcmVmPVwiZHJvcGRvd25cIj4gPFxcIS0tIERyb3Bkb3duIGNvbHVtbnMgLVxcLT4gLS0+XG48IS0tICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPiAtLT5cbjwhLS0gICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXllXCI+PC9pPiAtLT5cbjwhLS0gICAgIDwvdGVtcGxhdGU+IC0tPlxuPCEtLSAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PiAtLT5cbjwhLS0gICAgICAgPGRpdiB2LWZvcj1cImNvbCBpbiBjb2x1bW5zX3dyYXBcIiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2hcIj48aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgY2hlY2tlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiIGlkPVwidG9nZ2xlLUJlZ2luXCI+IC0tPlxuPCEtLSAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJ0b2dnbGUtQmVnaW5cIiB2LWh0bWw9XCJwcmludF9odG1sX2NvbHVtbihjb2wuZGF0YSlcIj4gLS0+XG48IS0tICAgICAgICAgPC9sYWJlbD4gLS0+XG48IS0tICAgICAgIDwvZGl2PiAtLT5cbjwhLS0gICAgIDwvdGVtcGxhdGU+IC0tPlxuPCEtLSAgIDwvRHJvcGRvd24+IDxcXCEtLSBEcm9wZG93biBjb2x1bW5zIC1cXC0+IC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwiZHJvcGRvd25cIiByZWY9XCJkcm9wZG93blwiIHN0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7XCI+XG4gIDxidXR0b24gY2xhc3M9XCJidG4gZHJvcGRvd24tdG9nZ2xlXCIgOmNsYXNzPVwiYnV0dG9uX2NsYXNzXzJcIiA6c3R5bGU9XCJidXR0b25fc3R5bGVcIiB0eXBlPVwiYnV0dG9uXCIgOmlkPVwiaWRcIiByZWY9XCJkcm9wZG93bl9idXR0b25cIiAgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiPlxuICAgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cbiAgPC9idXR0b24+XG4gIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiA6YXJpYS1sYWJlbGxlZGJ5PVwiaWRcIiBzdHlsZT1cIiBtYXgtaGVpZ2h0OiAyNXJlbTtvdmVyZmxvdzphdXRvXCI+XG4gICAgPCEtLSA8c2xvdCBuYW1lPVwibWVudVwiPjwvc2xvdD4gLS0+XG5cbiAgICA8IS0tIDxsaSBjbGFzcz1cImRyb3Bkb3duLWl0ZW1cIiB2LWZvcj1cIihvcHQsIGkpIGluIG9wdGlvbnNcIiA6cmVmPVwiZWwgPT4geyBtZW51W2ldID0gZWwgfVwiPiAtLT5cbiAgICA8IS0tICAgYXNkIC0tPlxuICAgICAgPCEtLSAgIDwvbGk+IC0tPlxuICAgICAgPGxpIHYtZm9yPVwiKG9wdCwgaSkgaW4gbWVudV9vcHRpb25zXCIgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCI+XG5cdDxWTm9kZSA6Y29udGVudD1cIm9wdFwiPjwvVk5vZGU+XG4gICAgICA8L2xpPlxuICA8L3VsPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IHVzZVNsb3RzLCByZW5kZXIsIGdldEN1cnJlbnRJbnN0YW5jZSwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcmVuZGVyX2NvbXBvbmVudCB9IGZyb20gXCIuL250b3BfdXRpbHMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVk5vZGUgfSBmcm9tIFwiLi92dWVfbm9kZS52dWVcIjtcblxuY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbmNvbnN0IHNsb3RzID0gdXNlU2xvdHMoKTtcblxuY29uc3Qgb3B0aW9ucyA9IHJlZihbXSk7XG5jb25zdCBtZW51ID0gcmVmKFtdKTtcbmNvbnN0IG1lbnVfb3B0aW9ucyA9IHJlZihbXSk7XG5jb25zdCBkcm9wZG93biA9IHJlZihudWxsKTtcbmNvbnN0IGRyb3Bkb3duX2J1dHRvbiA9IHJlZihudWxsKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtdKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLFxuICAgIGF1dG9fbG9hZDogQm9vbGVhbixcbiAgICBidXR0b25fY2xhc3M6IFN0cmluZyxcbiAgICBidXR0b25fc3R5bGU6IFN0cmluZyxcbiAgICBmX29uX29wZW46IEZ1bmN0aW9uLFxuICAgIGZfb25fY2xvc2U6IEZ1bmN0aW9uLFxufSk7XG5cbmxldCBkZWZhdWx0X292ZXJmbG93ID0gbnVsbDtcbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgZGVmYXVsdF9vdmVyZmxvdyA9IFx0JChkcm9wZG93bi52YWx1ZSkucGFyZW50KCkuY2xvc2VzdCgnZGl2JykuY3NzKCdvdmVyZmxvdycpO1xuICAgIGlmIChwcm9wcy5hdXRvX2xvYWQgPT0gdHJ1ZSkge1xuXHRsb2FkX21lbnUoKTtcbiAgICB9XG4gICAgbGV0IGVsID0geyBkcm9wZG93bjogZHJvcGRvd24udmFsdWUsIGRyb3Bkb3duX2J1dHRvbjogZHJvcGRvd25fYnV0dG9uLnZhbHVlIH07XG4gICAgJChkcm9wZG93bi52YWx1ZSkub24oJ3Nob3cuYnMuZHJvcGRvd24nLCBmdW5jdGlvbiAoKSB7XG5cdCQoZHJvcGRvd24udmFsdWUpLnBhcmVudCgpLmNsb3Nlc3QoJ2RpdicpLmNzcygnb3ZlcmZsb3cnLCBcInZpc2libGVcIik7XG5cdGlmIChwcm9wcy5mX29uX29wZW4gIT0gbnVsbCkge1xuXHQgICAgcHJvcHMuZl9vbl9vcGVuKGVsKTtcblx0fVxuICAgIH0pO1xuICAgICQoZHJvcGRvd24udmFsdWUpLm9uKCdoaWRlLmJzLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuXHQkKGRyb3Bkb3duLnZhbHVlKS5wYXJlbnQoKS5jbG9zZXN0KCdkaXYnKS5jc3MoJ292ZXJmbG93JywgZGVmYXVsdF9vdmVyZmxvdyk7XG5cdGlmIChwcm9wcy5mX29uX2Nsb3NlICE9IG51bGwpIHtcblx0ICAgIHByb3BzLmZfb25fY2xvc2UoZWwpO1xuXHR9XG4gICAgfSk7XG59KTtcblxuY29uc3QgYnV0dG9uX2NsYXNzXzIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLmJ1dHRvbl9jbGFzcyAhPSBudWxsKSB7IHJldHVybiBwcm9wcy5idXR0b25fY2xhc3M7IH1cbiAgICByZXR1cm4gXCJidG4tbGlua1wiO1xufSlcblxuZnVuY3Rpb24gb3Blbl9jbG9zZSgpIHtcbiAgICAvLyBsZXQgZWwgPSB7IGRyb3Bkb3duOiBkcm9wZG93bi52YWx1ZSwgZHJvcGRvd25fYnV0dG9uOiBkcm9wZG93bl9idXR0b24udmFsdWUgfTtcbiAgICAvLyBpZiAoISQoZHJvcGRvd24udmFsdWUpLmZpbmQoJy5kcm9wZG93bi1tZW51JykuaXMoXCI6aGlkZGVuXCIpKXtcbiAgICAvLyBcdCQoZHJvcGRvd25fYnV0dG9uLnZhbHVlKS5kcm9wZG93bignaGlkZScpO1xuICAgIC8vIFx0JChkcm9wZG93bi52YWx1ZSkucGFyZW50KCkuY2xvc2VzdCgnZGl2JykuY3NzKCdvdmVyZmxvdycsIFwidmlzaWJsZVwiKTtcbiAgICAvLyBcdCQoZHJvcGRvd25fYnV0dG9uLnZhbHVlKS5kcm9wZG93bignc2hvdycpO1xuICAgIC8vIFx0aWYgKHByb3BzLmZfb25fb3BlbiAhPSBudWxsKSB7XG4gICAgLy8gXHQgICAgcHJvcHMuZl9vbl9vcGVuKGVsKTtcbiAgICAvLyBcdH1cbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vIFx0JChkcm9wZG93bi52YWx1ZSkucGFyZW50KCkuY2xvc2VzdCgnZGl2JykuY3NzKCdvdmVyZmxvdycsIGRlZmF1bHRfb3ZlcmZsb3cpO1xuICAgIC8vIFx0Ly8gZW1pdCgnY2xvc2UnLCBlbCk7XG4gICAgLy8gfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX21lbnUoKSB7XG4gICAgb3B0aW9ucy52YWx1ZSA9IFtdO1xuICAgIGlmIChzbG90cyA9PSBudWxsIHx8IHNsb3RzLm1lbnUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgbV9vcHRpb25zID0gc2xvdHMubWVudSgpO1xuICAgIGlmIChtX29wdGlvbnMgPT0gbnVsbCB8fCBtX29wdGlvbnMubGVuZ3RoID09IDApIHsgcmV0dXJuOyB9XG4gICAgaWYgKHR5cGVvZiBtX29wdGlvbnNbMF0udHlwZSA9PT0gJ3N5bWJvbCcpIHtcblx0bV9vcHRpb25zID0gbV9vcHRpb25zWzBdLmNoaWxkcmVuO1xuICAgIH1cbiAgICBtZW51X29wdGlvbnMudmFsdWUgPSBbXTtcbiAgICBtX29wdGlvbnMuZm9yRWFjaCgob3B0X3Nsb3QpID0+IHtcblx0bGV0IG5vZGUgPSBvcHRfc2xvdDtcblx0bWVudV9vcHRpb25zLnZhbHVlLnB1c2gobm9kZSk7XG5cdC8vIGxldCBlbGVtZW50ID0gJChcIjxkaXY+PC9kaXY+XCIpWzBdO1xuXHQvLyBjb25zdCB7IHZOb2RlLCBlbCB9ID0gcmVuZGVyX2NvbXBvbmVudChub2RlLCB7IGFwcDogIGluc3RhbmNlPy5hcHBDb250ZXh0Py5hcHAsIGVsZW1lbnQgfSk7XG5cdC8vIG9wdGlvbnMudmFsdWUucHVzaChlbCk7XG4gICAgfSk7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAvLyBuZXh0VGljaygoKSA9PiB7XG4gICAgLy8gXHRvcHRpb25zLnZhbHVlLmZvckVhY2goKG9wdCwgaSkgPT4ge1xuICAgIC8vIFx0ICAgIGxldCBodG1sX2VsZW1lbnQgPSBtZW51LnZhbHVlW2ldO1xuICAgIC8vIFx0ICAgICQoaHRtbF9lbGVtZW50KS5hcHBlbmQob3B0KTtcbiAgICAvLyBcdH0pO1xuICAgIC8vIH0pO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBsb2FkX21lbnUgfSk7XG5cbjwvc2NyaXB0PlxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi9udG9wLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBEYXRhVGFibGVSZW5kZXJzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlscy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuLi92dWUvL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IEZvcm1hdHRlclV0aWxzIGZyb20gXCIuL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5hc3luYyBmdW5jdGlvbiBidWlsZF90YWJsZShodHRwX3ByZWZpeCwgdGFibGVfaWQsIGZfbWFwX2NvbHVtbnMsIGZfZ2V0X2V4dHJhX3BhcmFtc19vYmosIGZfb25fZ2V0X3Jvd3MpIHtcbiAgICBsZXQgZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcbiAgICBsZXQgdGFibGVfZGVmX3VybCA9IGAke2h0dHBfcHJlZml4fS90YWJsZXNfY29uZmlnLyR7dGFibGVfaWR9Lmpzb24/ZXBvY2hfZW5kPSR7ZXBvY2hfZW5kfWA7XG4gICAgbGV0IHRhYmxlX2RlZiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh0YWJsZV9kZWZfdXJsLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICBpZiAodGFibGVfZGVmID09IG51bGwpIHtcblx0cmV0dXJuIHtcblx0ICAgIGlkOiB0YWJsZV9pZCxcblx0ICAgIGNvbHVtbnM6IFtdLFx0ICAgIFxuXHR9XG4gICAgfVxuICAgIGlmIChmX21hcF9jb2x1bW5zICE9IG51bGwpIHtcblx0dGFibGVfZGVmLmNvbHVtbnMgPSBhd2FpdCBmX21hcF9jb2x1bW5zKHRhYmxlX2RlZi5jb2x1bW5zKTtcbiAgICB9XG4gICAgY29uc3QgdGFibGVfY29uZmlnID0ge1xuXHRpZDogdGFibGVfaWQsXG5cdGNvbHVtbnM6IHRhYmxlX2RlZi5jb2x1bW5zLFxuXHRnZXRfcm93czogZ2V0X3Jvd3NfZnVuYyh0YWJsZV9kZWYsIGZfZ2V0X2V4dHJhX3BhcmFtc19vYmosIGZfb25fZ2V0X3Jvd3MpLFxuXHRnZXRfY29sdW1uX2lkOiBnZXRfY29sdW1uX2lkX2Z1bmModGFibGVfZGVmKSxcblx0cHJpbnRfY29sdW1uX25hbWU6IGdldF9mX3ByaW50X2NvbHVtbl9uYW1lKHRhYmxlX2RlZiksXG5cdHByaW50X2h0bWxfcm93OiBnZXRfZl9wcmludF9odG1sX3Jvdyh0YWJsZV9kZWYpLFxuXHRwcmludF92dWVfbm9kZV9yb3c6IGdldF9mX3ByaW50X3Z1ZV9ub2RlX3Jvdyh0YWJsZV9kZWYpLFxuXHRmX2lzX2NvbHVtbl9zb3J0YWJsZTogZ2V0X2ZfaXNfY29sdW1uX3NvcnRhYmxlKHRhYmxlX2RlZiksXG5cdGZfZ2V0X2NvbHVtbl9jbGFzc2VzOiBnZXRfZl9nZXRfY29sdW1uX2NsYXNzZXModGFibGVfZGVmKSxcblx0Zl9nZXRfY29sdW1uX3N0eWxlOiBnZXRfZl9nZXRfY29sdW1uX3N0eWxlKHRhYmxlX2RlZiksXG5cdGRpc3BsYXlfZW1wdHlfcm93czogdGFibGVfZGVmLmRpc3BsYXlfZW1wdHlfcm93cyxcblx0ZW5hYmxlX3NlYXJjaDogdGFibGVfZGVmLmVuYWJsZV9zZWFyY2gsXHRcblx0ZGVmYXVsdF9zb3J0OiB0YWJsZV9kZWYuZGVmYXVsdF9zb3J0LFxuXHRzaG93X2F1dG9yZWZyZXNoOiB0YWJsZV9kZWYuc2hvd19hdXRvcmVmcmVzaCxcblx0cGFnaW5nOiB0YWJsZV9kZWYucGFnaW5nLFxuICAgIH07XG4gICAgcmV0dXJuIHRhYmxlX2NvbmZpZztcbn1cblxuZnVuY3Rpb24gZ2V0X2ZfaXNfY29sdW1uX3NvcnRhYmxlKHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sKSA9PiB7XG5cdHJldHVybiBjb2wuc29ydGFibGU7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2ZfZ2V0X2NvbHVtbl9jbGFzc2VzKHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sKSA9PiB7XG5cdGxldCBjbGFzc2VzID0gY29sPy5jbGFzcztcblx0aWYgKGNsYXNzZXMgIT0gbnVsbCkgeyByZXR1cm4gY2xhc3NlczsgfVxuXHRyZXR1cm4gW107XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2ZfZ2V0X2NvbHVtbl9zdHlsZSh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCkgPT4ge1xuXHRsZXQgc3R5bGUgPSBjb2w/LnN0eWxlO1xuXHRpZiAoc3R5bGUgIT0gbnVsbCkgeyByZXR1cm4gc3R5bGU7IH1cblx0cmV0dXJuIFwiXCI7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2ZfcHJpbnRfdnVlX25vZGVfcm93KHRhYmxlX2RlZikge1xuICAgIGNvbnN0IGF2YWlsYWJsZV90eXBlcyA9IHtcblx0XCJidXR0b25fbGlzdFwiOiBnZXRfZl9wcmludF92X25vZGVfYnV0dG9ucyh0cnVlKSxcblx0XCJidXR0b25fYXJyYXlcIjogZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnMoZmFsc2UpLFxuICAgIH07XG4gICAgcmV0dXJuIChjb2wsIHJvdywgdnVlX29iaiwgcmV0dXJuX3RydWVfaWZfZGVmKSA9PiB7XG5cdGlmIChjb2wucmVuZGVyX3Zfbm9kZV90eXBlID09IG51bGwgJiYgY29sLnJlbmRlcl92X2Z1bmMgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXHRpZiAocmV0dXJuX3RydWVfaWZfZGVmID09IHRydWUpIHsgcmV0dXJuIHRydWU7IH1cblx0aWYgKGNvbC5yZW5kZXJfdl9mdW5jICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBjb2wucmVuZGVyX3ZfZnVuYyhjb2wsIHJvdywgdnVlX29iaiwgcmV0dXJuX3RydWVfaWZfZGVmKTtcblx0fVxuXHRsZXQgcHJpbnRfdl9ub2RlX2J1dHRvbnMgPSBhdmFpbGFibGVfdHlwZXNbY29sLnJlbmRlcl92X25vZGVfdHlwZV07XG5cdHJldHVybiBwcmludF92X25vZGVfYnV0dG9ucyhjb2wsIHJvdywgdnVlX29iaik7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2ZfcHJpbnRfaHRtbF9yb3codGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wsIHJvdywgcmV0dXJuX3RydWVfaWZfZGVmKSA9PiB7XG5cdGlmIChjb2wucmVuZGVyX3ZfZnVuYyAhPSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdGlmIChyZXR1cm5fdHJ1ZV9pZl9kZWYgPT0gdHJ1ZSkgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdGxldCBkYXRhO1xuXHRpZiAoY29sLmRhdGFfZmllbGQgIT0gbnVsbCkge1xuXHQgICAgZGF0YSA9IHJvd1tjb2wuZGF0YV9maWVsZF07XG5cdH1cblx0aWYgKGNvbC56ZXJvX2lzX251bGwgIT0gbnVsbCAmJiBkYXRhICE9IG51bGwgJiYgZGF0YSA9PSAwKSB7XG5cdCAgICBkYXRhID0gXCJcIjtcblx0fVxuXHRpZiAoY29sLnJlbmRlcl9nZW5lcmljICE9IG51bGwpIHtcblx0ICAgIGxldCByZW5kZXIgPSBEYXRhVGFibGVSZW5kZXJzLmdldEZvcm1hdEdlbmVyaWNGaWVsZChjb2wucmVuZGVyX2dlbmVyaWMsIGNvbC56ZXJvX2lzX251bGwpO1xuXHQgICAgcmV0dXJuIHJlbmRlcihkYXRhLCAnZGlzcGxheScsIHJvdyk7XG5cdH1cblx0aWYgKGNvbC5yZW5kZXJfZnVuYyAhPSBudWxsKSB7XG5cdCAgICByZXR1cm4gY29sLnJlbmRlcl9mdW5jKGRhdGEsIHJvdyk7XG5cdH1cblx0aWYgKGNvbC5yZW5kZXJfdHlwZSAhPSBudWxsKSB7XG5cdCAgICBpZiAoRm9ybWF0dGVyVXRpbHMudHlwZXNbY29sLnJlbmRlcl90eXBlXSAhPSBudWxsKSB7XG5cdFx0Y29sLnJlbmRlcl9mdW5jID0gRm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGNvbC5yZW5kZXJfdHlwZSk7XG5cdFx0cmV0dXJuIGNvbC5yZW5kZXJfZnVuYyhkYXRhKTtcblx0ICAgIH0gZWxzZSBpZiAoRGF0YVRhYmxlUmVuZGVyc1tjb2wucmVuZGVyX3R5cGVdICE9IG51bGwpIHtcblx0XHRyZXR1cm4gRGF0YVRhYmxlUmVuZGVyc1tjb2wucmVuZGVyX3R5cGVdKGRhdGEsICdkaXNwbGF5Jywgcm93LCBjb2wuemVyb19pc19udWxsKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhyb3cgYEluIGNvbHVtbiAke2NvbC5kYXRhX2ZpZWxkfSByZW5kZXJfdHlwZTogJHtjb2wucmVuZGVyX3R5cGV9IG5vdCBmb3VuZGA7XG5cdCAgICB9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG4gICAgfTtcbn1cblxuLyogVGhpcyBmdW5jdGlvbiBhcHBhcmVudGx5IGNyZWF0ZSB0aGUgYWN0aW9uIGJ1dHRvbnMgKi9cbmZ1bmN0aW9uIGdldF9mX3ByaW50X3Zfbm9kZV9idXR0b25zKGxpc3Rfb3JfYXJyYXkpIHtcbiAgICByZXR1cm4gKGNvbCwgcm93LCB2dWVfb2JqKSA9PiB7XG5cdGNvbnN0IG9uX2NsaWNrID0gKGlkKSA9PiB7XG5cdCAgICByZXR1cm4gKGUpID0+IHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGxldCBldmVudCA9IHtldmVudF9pZDogaWQsIHJvdywgY29sfTtcblx0XHR2dWVfb2JqLmVtaXQoJ2N1c3RvbV9ldmVudCcsIGV2ZW50KTtcblx0ICAgIH1cblx0fTtcblx0bGV0IHZfbm9kZXMgPSBjb2wuYnV0dG9uX2RlZl9hcnJheS5tYXAoKGJfZGVmKSA9PiB7XG5cdCAgICBsZXQgYXR0cmlidXRlcyA9IHt9O1xuXHQgICAgaWYgKGJfZGVmLmF0dHJpYnV0ZXMgIT0gbnVsbCkge1xuXHRcdGF0dHJpYnV0ZXMgPSBiX2RlZi5hdHRyaWJ1dGVzO1xuXHQgICAgfVxuXHQgICAgbGV0IGNsYXNzX2FycmF5ID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoYl9kZWYuY2xhc3MpO1xuXHQgICAgaWYgKGJfZGVmLmZfbWFwX2NsYXNzICE9IG51bGwpIHtcblx0XHRjbGFzc19hcnJheSA9IGJfZGVmLmZfbWFwX2NsYXNzKGNsYXNzX2FycmF5LCByb3cpO1xuXHQgICAgfVxuXHQgICAgbGV0IF9jbGFzcyA9IFwiXCI7XG5cdCAgICBpZiAoY2xhc3NfYXJyYXkgIT0gbnVsbCAmJiBjbGFzc19hcnJheS5sZW5ndGggPiAwKSB7XG5cdFx0X2NsYXNzID0gY2xhc3NfYXJyYXkuam9pbihcIiBcIik7XG5cdCAgICB9XG5cdCAgICBpZiAobGlzdF9vcl9hcnJheSA9PSBmYWxzZSkge1xuXHRcdHJldHVybiB2dWVfb2JqLmgoXCJidXR0b25cIiwgeyBjbGFzczogYGJ0biBidG4tc20gYnRuLXNlY29uZGFyeSAke19jbGFzc31gLCBzdHlsZTogXCJtYXJnaW4tcmlnaHQ6MC4ycmVtO1wiLCBvbkNsaWNrOiBvbl9jbGljayhiX2RlZi5ldmVudF9pZCksIC4uLmF0dHJpYnV0ZXMgfSwgWyB2dWVfb2JqLmgoXCJzcGFuXCIsIHsgY2xhc3M6IGJfZGVmLmljb24sIHN0eWxlOiBcIlwiLCB0aXRsZTogX2kxOG4oYl9kZWYudGl0bGVfaTE4bil9KSwgXSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdnVlX29iai5oKFwiYVwiLCB7IGNsYXNzOiBgJHtfY2xhc3N9IGJ0bi1zbWAsIG9uQ2xpY2s6IG9uX2NsaWNrKGJfZGVmLmV2ZW50X2lkKSwgc3R5bGU6IFwiZGlzcGxheTpibG9jaztcIiwgLi4uYXR0cmlidXRlcyB9LCBbIHZ1ZV9vYmouaChcInNwYW5cIiwgeyBjbGFzczogYl9kZWYuaWNvbiwgc3R5bGU6IFwibWFyZ2luLXJpZ2h0OjAuMnJlbTtjdXJzb3I6cG9pbnRlcjtcIiB9KSwgX2kxOG4oYl9kZWYudGl0bGVfaTE4bildKTtcblx0fSk7XG5cdGlmIChsaXN0X29yX2FycmF5ID09IHRydWUpIHtcblx0ICAgIGxldCB2X3RpdGxlID0gdnVlX29iai5oKFwic3BhblwiLCB7IGNsYXNzOiBcImZhcyBmYS1zbSBmYS1hbGlnbi1qdXN0aWZ5XCIgfSk7XG5cdCAgICBsZXQgZHJvcGRvd24gPSAgdnVlX29iai5oKERyb3Bkb3duLCB7IGF1dG9fbG9hZDogdHJ1ZSwgYnV0dG9uX3N0eWxlOiBcIlwiLCBidXR0b25fY2xhc3M6IFwiYnRuLXNlY29uZGFyeSBidG4tc21cIiB9LCB7XG5cdFx0dGl0bGU6ICgpID0+IHZfdGl0bGUsXG5cdFx0bWVudTogKCkgPT4gdl9ub2Rlcyxcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIGRyb3Bkb3duO1xuXHR9XG5cdHJldHVybiB2dWVfb2JqLmgoXCJkaXZcIiwge2NsYXNzOlwiYnV0dG9uLWdyb3VwXCJ9LCB2X25vZGVzKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRfcm93c19mdW5jKHRhYmxlX2RlZiwgZl9nZXRfZXh0cmFfcGFyYW1zX29iaiwgZl9vbl9nZXRfcm93cykge1xuICAgIGxldCBmX2dldF9jb2x1bW5faWQgPSBnZXRfY29sdW1uX2lkX2Z1bmModGFibGVfZGVmKTtcbiAgICByZXR1cm4gYXN5bmMgKGFjdGl2ZV9wYWdlLCBwZXJfcGFnZSwgY29sdW1uc193cmFwLCBtYXBfc2VhcmNoLCBmaXJzdF9nZXRfcm93cykgPT4ge1xuXHRsZXQgc29ydF9jb2x1bW4gPSBjb2x1bW5zX3dyYXAuZmluZCgoYykgPT4gYy5zb3J0ICE9IDApO1xuXHRsZXQgdmlzaWJsZV9jb2x1bW5zID0gY29sdW1uc193cmFwLmZpbHRlcigoYykgPT4gYy52aXNpYmxlID09IHRydWUpXG5cdCAgICAubWFwKChjKSA9PiBmX2dldF9jb2x1bW5faWQoYykpLmpvaW4oXCIsXCIpO1xuXHRsZXQgcGFyYW1zID0ge1xuICAgICAgICAgICAgc3RhcnQ6IChhY3RpdmVfcGFnZSAqIHBlcl9wYWdlKSxcbiAgICAgICAgICAgIGxlbmd0aDogcGVyX3BhZ2UsXG5cdCAgICBtYXBfc2VhcmNoLFxuXHQgICAgdmlzaWJsZV9jb2x1bW5zLFxuXHR9O1xuXHRpZiAoc29ydF9jb2x1bW4gIT0gbnVsbCkge1xuXHQgICAgcGFyYW1zLnNvcnQgPSBmX2dldF9jb2x1bW5faWQoc29ydF9jb2x1bW4uZGF0YSk7XG5cdCAgICBwYXJhbXMub3JkZXIgPSBzb3J0X2NvbHVtbi5zb3J0ID09IDEgPyBcImFzY1wiIDogXCJkZXNjXCI7XG5cdH1cblx0aWYgKGZfZ2V0X2V4dHJhX3BhcmFtc19vYmogIT0gbnVsbCkge1xuXHQgICAgbGV0IGV4dHJhX3BhcmFtcyA9IGZfZ2V0X2V4dHJhX3BhcmFtc19vYmooKTtcblx0ICAgIHBhcmFtcyA9IHsgLi4ucGFyYW1zLCAuLi5leHRyYV9wYXJhbXMsIH07XG5cdH1cblx0Y29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXHRjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vJHt0YWJsZV9kZWYuZGF0YV91cmx9PyR7dXJsX3BhcmFtc31gO1xuXHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG5cdGlmIChmX29uX2dldF9yb3dzICE9IG51bGwpIHtcblx0ICAgIGZfb25fZ2V0X3Jvd3MocGFyYW1zKTtcblx0fVxuXHRsZXQgcm93cyA9IHJlcy5yc3A7XG5cdGlmICh0YWJsZV9kZWYucnNwX3JlY29yZHNfZmllbGQgIT0gbnVsbCkge1xuXHQgICAgcm93cyA9IHJlcy5yc3BbdGFibGVfZGVmLnJzcF9yZWNvcmRzX2ZpZWxkXTtcblx0fVxuXHRsZXQgcXVlcnlfaW5mbyA9IHJlcy5xdWVyeV9pbmZvO1xuXHRpZiAodGFibGVfZGVmLnJzcF9xdWVyeV9pbmZvX2ZpZWxkICE9IG51bGwpIHtcblx0ICAgIHF1ZXJ5X2luZm8gPSByZXMucnNwW3RhYmxlX2RlZi5yc3BfcXVlcnlfaW5mb19maWVsZF07XG5cdH1cblx0Ly8gZml4IHNlcnZlciByZXN0IGJ1Z1xuXHRpZiAocmVzLnJlY29yZHNGaWx0ZXJlZCA+IHJlcy5yZWNvcmRzVG90YWwpIHtcblx0ICAgIHJlcy5yZWNvcmRzVG90YWwgPSByZXMucmVjb3Jkc0ZpbHRlcmVkO1xuXHR9XG5cdHJldHVybiB7IHRvdGFsX3Jvd3M6IHJlcy5yZWNvcmRzVG90YWwsIHJvd3MsIHF1ZXJ5X2luZm8gfTtcblx0Ly8gcmV0dXJuIHsgdG90YWxfcm93czogMSwgcm93czogW3Jvd3NbMF1dLCBxdWVyeV9pbmZvIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfZl9wcmludF9jb2x1bW5fbmFtZSh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCkgPT4ge1xuXHRpZiAoY29sLnRpdGxlX2kxOG4gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9pMThuKGNvbC50aXRsZV9pMThuKTtcblx0fVxuXHRpZiAoY29sLnRpdGxlICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBjb2wudGl0bGU7XG5cdH1cblx0cmV0dXJuIFwiXCI7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbHVtbl9pZF9mdW5jKHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sKSA9PiB7XG5cdGlmIChjb2wuaWQgIT0gbnVsbCkgeyByZXR1cm4gY29sLmlkOyB9XG5cdGlmIChjb2wuZGF0YV9maWVsZCAhPSBudWxsKSB7IHJldHVybiBjb2wuZGF0YV9maWVsZDsgfVxuXHRyZXR1cm4gdGFibGVfZGVmLmNvbHVtbnMuZmluZEluZGV4KChjKSA9PiBjID09IGNvbCk7XG4gICAgfTtcbn1cblxuLyoqXG4gICBHZXQgY29sdW1ucyBpbiBuZXcgdGFibGUgZm9ybWF0IGZyb20gb2xkIGRhdGF0YWJsZSBmb3JtYXQuXG4qL1xuZnVuY3Rpb24gZ2V0X2NvbHVtbnNfZnJvbV9kYXRhdGFibGVfY29sdW1ucyhkYXRhdGFibGVfY29sdW1uc190aXRsZSwgZGF0YXRhYmxlX2NvbHVtbnNfanMpIHtcbiAgICBsZXQgdGFibGVfY29sdW1uc19jb25maWcgPSBkYXRhdGFibGVfY29sdW1uc19qcy5tYXAoKGMsIGluZGV4KSA9PiB7XG5cdGxldCBjb25maWcgPSB7XG5cdCAgICBkYXRhX2ZpZWxkOiBjLmRhdGEsXG5cdCAgICB0aXRsZTogZGF0YXRhYmxlX2NvbHVtbnNfdGl0bGVbaW5kZXhdLFxuXHQgICAgc29ydGFibGU6IGMub3JkZXJhYmxlID09IG51bGwgfHwgYy5vcmRlcmFibGUgPT0gdHJ1ZSxcblx0fTtcblx0aWYgKGMuY2xhc3NOYW1lICE9IG51bGwpIHtcblx0ICAgIGNvbmZpZy5jbGFzcyA9IGMuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKTtcblx0fVxuXHRpZiAoYy5yZW5kZXIgIT0gbnVsbCkge1xuXHQgICAgYy5yZW5kZXJfZnVuYyA9IChkYXRhLCByb3cpID0+IGMucmVuZGVyKGRhdGEsICdkaXNwbGF5Jywgcm93KTtcblx0fVxuICAgIH0pO1xuICAgIHJldHVybiB0YWJsZV9jb2x1bW5zX2NvbmZpZztcblxufVxuXG5jb25zdCB0YWJsZV91dGlscyA9IHtcbiAgICBnZXRfY29sdW1uc19mcm9tX2RhdGF0YWJsZV9jb2x1bW5zLFxuICAgIGJ1aWxkX3RhYmxlLFxufTtcblxuY29uc3QgcmVuZGVyX2Z1bmN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBmb3JtYXRWYWx1ZUxhYmVsKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAvLyAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgIC8vICAgICBsZXQgY2VsbCA9IG9iai5sYWJlbDtcbiAgICAvLyBcdGlmICh6ZXJvX2lzX251bGwgPT0gdHJ1ZSAmJiBvYmoudmFsdWUgPT0gMCkge1xuICAgIC8vIFx0ICAgIGNlbGwgPSBcIlwiO1xuICAgIC8vIFx0fVxuICAgIC8vICAgICBpZiAob2JqLmNvbG9yKSBjZWxsID0gYDxzcGFuIGNsYXNzPSdmb250LXdlaWdodC1ib2xkJyBzdHlsZT0nY29sb3I6ICR7b2JqLmNvbG9yfSc+JHtjZWxsfTwvc3Bhbj5gO1xuICAgIC8vICAgICByZXR1cm4gY2VsbDtcbiAgICAvLyB9XG5cbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgdGFibGVfdXRpbHM7XG4iLCJsZXQgZmlsdGVyc19jb25zdF9kaWN0ID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QodXJsX3JlcXVlc3QpIHtcbiAgICBpZiAoZmlsdGVyc19jb25zdF9kaWN0W3VybF9yZXF1ZXN0XSA9PSBudWxsKSB7XG5cdGZpbHRlcnNfY29uc3RfZGljdFt1cmxfcmVxdWVzdF0gPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IGZpbHRlcnNfY29uc3RfZGljdFt1cmxfcmVxdWVzdF07XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmNvbnN0IHRhZ19vcGVyYXRvcl9sYWJlbF9kaWN0ID0ge1xuICAgIFwiZXFcIjogXCI9XCIsXG4gICAgXCJuZXFcIjogXCIhPVwiLFxuICAgIFwibHRcIjogXCI8XCIsXG4gICAgXCJndFwiOiBcIj5cIixcbiAgICBcImd0ZVwiOiBcIj49XCIsXG4gICAgXCJsdGVcIjogXCI8PVwiLFxuICAgIFwiaW5cIjogXCJjb250YWluc1wiLFxuICAgIFwibmluXCI6IFwiZG9lcyBub3QgY29udGFpblwiXG59O1xuXG5jb25zdCBsb2FkX2ZpbHRlcnNfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uIChmaWx0ZXJzX2NvbnN0KSB7XG4gICAgZmlsdGVyc19jb25zdC5maWx0ZXIoKHgpID0+IHgubGFiZWwgPT0gbnVsbCkuZm9yRWFjaCgoeCkgPT4geyBjb25zb2xlLmVycm9yKGBsYWJlbCBub3QgZGVmaW5lZCBmb3IgZmlsdGVyICR7SlNPTi5zdHJpbmdpZnkoeCl9YCk7IHgubGFiZWwgPSBcIlwiOyB9KTtcbiAgICBmaWx0ZXJzX2NvbnN0LnNvcnQoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7XG4gICAgaTE4bl9leHQudGFncyA9IHt9O1xuICAgIFRBR19PUEVSQVRPUlMgPSB7fTtcbiAgICBERUZJTkVEX1RBR1MgPSB7fTtcbiAgICBmaWx0ZXJzX2NvbnN0LmZvckVhY2goKGZfZGVmKSA9PiB7XG4gICAgICAgIGkxOG5fZXh0LnRhZ3NbZl9kZWYuaWRdID0gZl9kZWYubGFiZWw7XG4gICAgICAgIGZfZGVmLm9wZXJhdG9ycy5mb3JFYWNoKChvcCkgPT4gVEFHX09QRVJBVE9SU1tvcC5pZF0gPSBvcC5sYWJlbCk7XG4gICAgICAgIERFRklORURfVEFHU1tmX2RlZi5pZF0gPSBmX2RlZi5vcGVyYXRvcnMubWFwKChvcCkgPT4gb3AuaWQpO1xuICAgIH0pO1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICBsZXQgZmlsdGVyX2RlZiA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZmMpID0+IGZjLmlkID09IGtleSk7XG4gICAgICAgIGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zX3N0cmluZyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIG9wdGlvbnNfc3RyaW5nLmZvckVhY2goKG9wdF9zdGlybmcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgW3ZhbHVlLCBvcGVyYXRvcl0gPSBvcHRfc3Rpcm5nLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCB8fCBvcGVyYXRvciA9PSBcIlwiXG4gICAgICAgICAgICAgICAgICAgIHx8IChmaWx0ZXJfZGVmLm9wdGlvbnMgIT0gbnVsbCAmJiBmaWx0ZXJfZGVmLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpID09IG51bGwpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cdFx0bGV0IHZhbHVlX2xhYmVsID0gdmFsdWU7XG5cdFx0aWYgKGZpbHRlcl9kZWYudmFsdWVfdHlwZSA9PSBcImFycmF5XCIpIHtcblx0XHQgICAgdmFsdWVfbGFiZWwgPSBmaWx0ZXJfZGVmPy5vcHRpb25zPy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSk/LmxhYmVsO1xuXHRcdH1cbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goeyBpZDogZmlsdGVyX2RlZi5pZCwgb3BlcmF0b3I6IG9wZXJhdG9yLCB2YWx1ZTogdmFsdWUsIGxhYmVsOiBmaWx0ZXJfZGVmLmxhYmVsLCB2YWx1ZV9sYWJlbCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIC8vIFwibDdwcm90bz1YWFg7ZXFcIlxufVxuXG5cbmZ1bmN0aW9uIGdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKSB7XG4gICAgbGV0IGZpbHRlcnNfZ3JvdXBzID0ge307XG4gICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2YuaWRdO1xuICAgICAgICBpZiAoZ3JvdXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgZ3JvdXAgPSBbXTtcbiAgICAgICAgICAgIGZpbHRlcnNfZ3JvdXBzW2YuaWRdID0gZ3JvdXA7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAucHVzaChmKTtcbiAgICB9KTtcbiAgICBsZXQgZmlsdGVyc19vYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBmX2lkIGluIGZpbHRlcnNfZ3JvdXBzKSB7XG4gICAgICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2ZfaWRdO1xuICAgICAgICBsZXQgZmlsdGVyX3ZhbHVlcyA9IGdyb3VwLmZpbHRlcigoZikgPT4gZi52YWx1ZSAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IFwiXCIpLm1hcCgoZikgPT4gYCR7Zi52YWx1ZX07JHtmLm9wZXJhdG9yfWApLmpvaW4oXCIsXCIpO1xuICAgICAgICBmaWx0ZXJzX29iamVjdFtmX2lkXSA9IGZpbHRlcl92YWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzX29iamVjdDtcbn1cblxuY29uc3QgZmlsdGVyc01hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcblx0Z2V0X2ZpbHRlcl9jb25zdCxcblx0Z2V0X2ZpbHRlcnNfb2JqZWN0LFxuXHRsb2FkX2ZpbHRlcnNfZGF0YSxcblx0dGFnX29wZXJhdG9yX2xhYmVsX2RpY3QsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyc01hbmFnZXI7XG4iLCI8dGVtcGxhdGU+XG4gIDxzZWxlY3QgY2xhc3M9XCJzZWxlY3QyIGZvcm0tc2VsZWN0XCIgcmVmPVwic2VsZWN0MlwiIHJlcXVpcmVkIG5hbWU9XCJmaWx0ZXJfdHlwZVwiIDptdWx0aXBsZT1cIm11bHRpcGxlXCI+XG4gICAgPG9wdGlvbiBjbGFzcz1cIm50b3BuZy1kcm9wZG93bi1taW4td2lkdGggbm8td3JhcFwiIHYtZm9yPVwiKGl0ZW0sIGkpIGluIG9wdGlvbnNfMlwiIDpzZWxlY3RlZD1cImlzX3NlbGVjdGVkKGl0ZW0pXCIgOnZhbHVlPVwiaXRlbS52YWx1ZVwiIDpkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIj5cbiAgICAgIHt7aXRlbS5sYWJlbH19XG4gICAgPC9vcHRpb24+XG4gICAgPG9wdGdyb3VwIHYtZm9yPVwiKGl0ZW0sIGkpIGluIGdyb3Vwc19vcHRpb25zXzJcIiA6bGFiZWw9XCJpdGVtLmdyb3VwXCI+XG4gICAgICA8b3B0aW9uIHYtZm9yPVwiKG9wdCwgaikgaW4gaXRlbS5vcHRpb25zXCIgOnNlbGVjdGVkPVwiaXNfc2VsZWN0ZWQob3B0KVwiIDp2YWx1ZT1cIm9wdC52YWx1ZVwiIDpkaXNhYmxlZD1cIm9wdC5kaXNhYmxlZFwiPlxuICAgICAgICB7e29wdC5sYWJlbH19XG4gICAgICA8L29wdGlvbj5cbiAgICA8L29wdGdyb3VwPlxuICA8L3NlbGVjdD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IHNlbGVjdDIgPSByZWYobnVsbCk7XG5cbi8vIGNvbnN0IHNlbGVjdGVkMl9vcHRpb24gPSByZWYoe30pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9uJywgJ3VwZGF0ZTpzZWxlY3RlZF9vcHRpb25zJywgJ3NlbGVjdF9vcHRpb24nLCAndW5zZWxlY3Rfb3B0aW9uJywgJ2NoYW5nZV9zZWxlY3RlZF9vcHRpb25zJ10pO1xuXG5jb25zdCBvcHRpb25zXzIgPSByZWYoW10pO1xuY29uc3QgZ3JvdXBzX29wdGlvbnNfMiA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9vcHRpb25fMiA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF92YWx1ZXMgPSByZWYoW10pOyAvLyB1c2VkIG9ubHkgaWYgbXVsdGlwbGUgPT0gdHJ1ZVxuY29uc3QgcmVmcmVzaF9vcHRpb25zID0gcmVmKDApO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLFxuICAgIG9wdGlvbnM6IEFycmF5LFxuICAgIHNlbGVjdGVkX29wdGlvbjogT2JqZWN0LFxuICAgIHNlbGVjdGVkX29wdGlvbnM6IEFycmF5LFxuICAgIG11bHRpcGxlOiBCb29sZWFuLFxuICAgIGFkZF90YWc6IEJvb2xlYW4sXG4gICAgZGlzYWJsZV9jaGFuZ2U6IEJvb2xlYW4sXG59KTtcblxubGV0IGZpcnN0X3RpbWVfcmVuZGVyID0gdHJ1ZTtcblxub25Nb3VudGVkKCgpID0+IHtcbiAgICBpZiAoIXByb3BzLm9wdGlvbnMpIHsgcmV0dXJuOyB9XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlX2NoYW5nZSB8fCAhZmlyc3RfdGltZV9yZW5kZXIpIHtcbiAgICBcdHNldF9pbnB1dCgpO1xuICAgIH1cbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5zZWxlY3RlZF9vcHRpb24sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHNldF9zZWxlY3RlZF9vcHRpb24oY3VyX3ZhbHVlKTtcbiAgICBjaGFuZ2Vfc2VsZWN0XzJfc2VsZWN0ZWRfdmFsdWUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbndhdGNoKCgpID0+IHByb3BzLnNlbGVjdGVkX29wdGlvbnMsIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHNldF9zZWxlY3RlZF92YWx1ZXMoY3VyX3ZhbHVlKTtcbiAgICBjaGFuZ2Vfc2VsZWN0XzJfc2VsZWN0ZWRfdmFsdWUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cblxud2F0Y2goW3JlZnJlc2hfb3B0aW9uc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHJlbmRlcigpO1xufSwgeyBmbHVzaDogJ3Bvc3QnfSk7XG5cblxud2F0Y2goKCkgPT4gcHJvcHMub3B0aW9ucywgKGN1cnJlbnRfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlX2NoYW5nZSA9PSB0cnVlIHx8IGN1cnJlbnRfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBzZXRfaW5wdXQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cblxuZnVuY3Rpb24gc2V0X2lucHV0KCkge1xuICAgIHNldF9vcHRpb25zKCk7XG4gICAgc2V0X3NlbGVjdGVkX29wdGlvbigpO1xuICAgIHNldF9zZWxlY3RlZF92YWx1ZXMoKTtcbn1cblxuZnVuY3Rpb24gc2V0X29wdGlvbnMoKSB7XG4gICAgb3B0aW9uc18yLnZhbHVlID0gW107XG4gICAgZ3JvdXBzX29wdGlvbnNfMi52YWx1ZSA9IFtdO1xuICAgIFxuICAgIGlmIChwcm9wcy5vcHRpb25zID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IGdyb3Vwc19kaWN0ID0ge307XG4gICAgcHJvcHMub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0bGV0IG9wdF8yID0geyAuLi5vcHRpb24gfTtcblx0aWYgKG9wdF8yLnZhbHVlID09IG51bGwpIHtcblx0ICAgIG9wdF8yLnZhbHVlID0gb3B0XzIubGFiZWw7XG5cdH1cblx0aWYgKG9wdGlvbi5ncm91cCA9PSBudWxsKSB7XG5cdCAgICBvcHRpb25zXzIudmFsdWUucHVzaChvcHRfMik7XG5cdH0gZWxzZSB7XG5cdCAgICBpZiAoZ3JvdXBzX2RpY3Rbb3B0aW9uLmdyb3VwXSA9PSBudWxsKSB7XG5cdFx0Z3JvdXBzX2RpY3Rbb3B0aW9uLmdyb3VwXSA9IHsgZ3JvdXA6IG9wdF8yLmdyb3VwLCBvcHRpb25zOiBbXSB9O1xuXHQgICAgfVxuXHQgICAgZ3JvdXBzX2RpY3Rbb3B0aW9uLmdyb3VwXS5vcHRpb25zLnB1c2gob3B0XzIpO1xuXHR9XG4gICAgfSk7XG4gICAgZ3JvdXBzX29wdGlvbnNfMi52YWx1ZSA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShncm91cHNfZGljdCk7XG4gICAgcmVmcmVzaF9vcHRpb25zLnZhbHVlICs9IDE7XG59XG5cblxuY29uc3QgcmVuZGVyID0gKCkgPT4ge1xuICAgIGxldCBzZWxlY3QyRGl2ID0gc2VsZWN0Mi52YWx1ZTtcbiAgICBpZiAoZmlyc3RfdGltZV9yZW5kZXIgPT0gZmFsc2UpIHtcblx0ZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAoISQoc2VsZWN0MkRpdikuaGFzQ2xhc3MoXCJzZWxlY3QyLWhpZGRlbi1hY2Nlc3NpYmxlXCIpKSB7XG5cdCQoc2VsZWN0MkRpdikuc2VsZWN0Mih7XG5cdCAgICB3aWR0aDogJzEwMCUnLFxuXHQgICAgaGVpZ2h0OiAnNTAwcHgnLFxuXHQgICAgdGhlbWU6ICdib290c3RyYXAtNScsXG5cdCAgICBkcm9wZG93blBhcmVudDogJChzZWxlY3QyRGl2KS5wYXJlbnQoKSxcblx0ICAgIGRyb3Bkb3duQXV0b1dpZHRoIDogdHJ1ZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLmFkZF90YWcgJiYgIXByb3BzLm11bHRpcGxlLFxuXHR9KTtcblx0JChzZWxlY3QyRGl2KS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbGV0IGRhdGEgPSBlLnBhcmFtcy5kYXRhO1xuICAgICAgICAgICAgaWYgKGRhdGEuZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy9UT0RPOiBpbXBsZW1lbnQgZm9yIG11bHRpc2VsZWN0XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbiA9IHsgbGFiZWw6IGRhdGEudGV4dCwgdmFsdWU6IGRhdGEuaWQgfTtcblx0XHRlbWl0KCd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9uJywgb3B0aW9uKTtcblx0XHRlbWl0KCdzZWxlY3Rfb3B0aW9uJywgb3B0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IFxuXHQgICAgbGV0IHZhbHVlID0gZGF0YS5lbGVtZW50Ll92YWx1ZTtcblx0ICAgIGxldCBvcHRpb24gPSBmaW5kX29wdGlvbl9mcm9tX3ZhbHVlKHZhbHVlKTtcblx0ICAgIGlmICh2YWx1ZSAhPSBwcm9wcy5zZWxlY3RlZF9vcHRpb24pIHtcblx0XHRlbWl0KCd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9uJywgb3B0aW9uKTtcblx0XHRlbWl0KCdzZWxlY3Rfb3B0aW9uJywgb3B0aW9uKTtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBzZWxlY3RlZF92YWx1ZXMudmFsdWUgPSBzZWxlY3RlZF92YWx1ZXMudmFsdWUuZmlsdGVyKCh2KSA9PiB2ICE9IHZhbHVlKTtcblx0ICAgIHNlbGVjdGVkX3ZhbHVlcy52YWx1ZS5wdXNoKHZhbHVlKTtcblx0ICAgIGxldCBvcHRpb25zID0gZmluZF9vcHRpb25zX2Zyb21fdmFsdWVzKHNlbGVjdGVkX3ZhbHVlcy52YWx1ZSk7XG5cdCAgICBlbWl0KCd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9ucycsIG9wdGlvbnMpO1xuXHQgICAgZW1pdCgnY2hhbmdlX3NlbGVjdGVkX29wdGlvbnMnLCBvcHRpb25zKTtcdFx0IFxuXHR9KTtcblx0JChzZWxlY3QyRGl2KS5vbignc2VsZWN0Mjp1bnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBsZXQgZGF0YSA9IGUucGFyYW1zLmRhdGE7XG5cdCAgICBsZXQgdmFsdWUgPSBkYXRhLmVsZW1lbnQuX3ZhbHVlO1xuXHQgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuXHRcdHJldHVybjtcblx0ICAgIH1cblx0ICAgIHNlbGVjdGVkX3ZhbHVlcy52YWx1ZSA9IHNlbGVjdGVkX3ZhbHVlcy52YWx1ZS5maWx0ZXIoKHYpID0+IHYgIT0gdmFsdWUpO1xuXHQgICAgbGV0IG9wdGlvbiA9IGZpbmRfb3B0aW9uX2Zyb21fdmFsdWUodmFsdWUpO1xuXHQgICAgbGV0IG9wdGlvbnMgPSBmaW5kX29wdGlvbnNfZnJvbV92YWx1ZXMoc2VsZWN0ZWRfdmFsdWVzLnZhbHVlKTtcblx0ICAgIGVtaXQoJ3Vuc2VsZWN0X29wdGlvbicsIG9wdGlvbik7XG5cdCAgICBlbWl0KCd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9ucycsIG9wdGlvbnMpO1xuXHQgICAgZW1pdCgnY2hhbmdlX3NlbGVjdGVkX29wdGlvbnMnLCBvcHRpb25zKTtcdFx0IFxuXHR9KTtcbiAgICB9XG4gICAgZmlyc3RfdGltZV9yZW5kZXIgPSBmYWxzZTtcbiAgICAvLyB0aGlzLiRmb3JjZVVwZGF0ZSgpO1xuICAgIGNoYW5nZV9zZWxlY3RfMl9zZWxlY3RlZF92YWx1ZSgpO1xufTtcblxuZnVuY3Rpb24gY2hhbmdlX3NlbGVjdF8yX3NlbGVjdGVkX3ZhbHVlKCkge1xuICAgIGxldCBzZWxlY3QyRGl2ID0gc2VsZWN0Mi52YWx1ZTtcbiAgICBpZiAoIXByb3BzLm11bHRpcGxlKSB7XG5cdGxldCB2YWx1ZSA9IGdldF92YWx1ZV9mcm9tX3NlbGVjdGVkX29wdGlvbihwcm9wcy5zZWxlY3RlZF9vcHRpb24pO1xuXHQkKHNlbGVjdDJEaXYpLnZhbCh2YWx1ZSk7XG5cdCQoc2VsZWN0MkRpdikudHJpZ2dlcihcImNoYW5nZVwiKTtcbiAgICB9IGVsc2Uge1xuXHQkKHNlbGVjdDJEaXYpLnZhbChzZWxlY3RlZF92YWx1ZXMudmFsdWUpO1xuXHQkKHNlbGVjdDJEaXYpLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc19zZWxlY3RlZChpdGVtKSB7XG4gICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuXHRjb25zdCBpc196ZXJvX3ZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUudmFsdWUgPT0gMCB8fHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLnZhbHVlID09IFwiMFwiO1xuXHRyZXR1cm4gaXRlbS52YWx1ZSA9PSBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS52YWx1ZSB8fCAoaXNfemVyb192YWx1ZSAmJiBpdGVtLmxhYmVsID09IHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLmxhYmVsKTtcbn1cbiAgIHJldHVybiBzZWxlY3RlZF92YWx1ZXMudmFsdWUuZmluZCgodikgPT4gdiA9PSBpdGVtLnZhbHVlKSAhPSBudWxsIHx8IGl0ZW0uc2VsZWN0ZWQ7IFxufVxuXG5mdW5jdGlvbiBzZXRfc2VsZWN0ZWRfdmFsdWVzKCkge1xuICAgIGlmIChwcm9wcy5zZWxlY3RlZF9vcHRpb25zID09IG51bGwgfHwgIXByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0ZWRfdmFsdWVzLnZhbHVlID0gW107XG4gICAgcHJvcHMuc2VsZWN0ZWRfb3B0aW9ucy5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gb3B0LnZhbHVlIHx8IG9wdC5sYWJlbDtcbiAgICAgICAgc2VsZWN0ZWRfdmFsdWVzLnZhbHVlLnB1c2godmFsdWUpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRfc2VsZWN0ZWRfb3B0aW9uKHNlbGVjdGVkX29wdGlvbikge1xuICAgIGlmIChzZWxlY3RlZF9vcHRpb24gPT0gbnVsbCAmJiAhcHJvcHMubXVsdGlwbGUpIHtcblx0c2VsZWN0ZWRfb3B0aW9uID0gZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbigpO1xuICAgIH1cbiAgICBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZSA9IHNlbGVjdGVkX29wdGlvbjtcbn1cblxuZnVuY3Rpb24gZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbigpIHtcbiAgICBpZiAocHJvcHMuc2VsZWN0ZWRfb3B0aW9uID09IG51bGwpIHtcblx0cmV0dXJuIHByb3BzLm9wdGlvbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBwcm9wcy5zZWxlY3RlZF9vcHRpb247XG59XG5cbmZ1bmN0aW9uIGdldF92YWx1ZV9mcm9tX3NlbGVjdGVkX29wdGlvbihzZWxlY3RlZF9vcHRpb24pIHtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uID09IG51bGwpIHtcblx0c2VsZWN0ZWRfb3B0aW9uID0gZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbigpO1xuICAgIH1cbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbi52YWx1ZSAhPSBudWxsKSB7XG5cdHZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uLnZhbHVlO1xuICAgIH0gZWxzZSB7XG5cdHZhbHVlID0gc2VsZWN0ZWRfb3B0aW9uLmxhYmVsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGZpbmRfb3B0aW9uc19mcm9tX3ZhbHVlcyh2YWx1ZXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHZhbHVlcy5tYXAoKHYpID0+IGZpbmRfb3B0aW9uX2Zyb21fdmFsdWUodikpO1xuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBmaW5kX29wdGlvbl9mcm9tX3ZhbHVlKHZhbHVlKSB7XG4gICAgbGV0IG9wdGlvbl8yID0gZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlKHZhbHVlKTtcbiAgICBsZXQgb3B0aW9uID0gcHJvcHMub3B0aW9ucy5maW5kKChvKSA9PiBvLmxhYmVsID09IG9wdGlvbl8yLmxhYmVsKTtcbiAgICByZXR1cm4gb3B0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kX29wdGlvbl8yX2Zyb21fdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuXHR2YWx1ZSA9IGdldF92YWx1ZV9mcm9tX3NlbGVjdGVkX29wdGlvbigpO1xuICAgIH1cbiAgICAvLyBsZXQgb3B0aW9uID0gb3B0aW9uc18yLnZhbHVlLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuICAgIGxldCBvcHRpb24gPSBvcHRpb25zXzIudmFsdWUuZmluZCgobykgPT4gby52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgaWYgKG9wdGlvbiAhPSBudWxsKSB7IHJldHVybiBvcHRpb247IH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3Vwc19vcHRpb25zXzIudmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcblx0bGV0IGcgPSBncm91cHNfb3B0aW9uc18yLnZhbHVlW2ldO1xuXHRvcHRpb24gPSBnLm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSB2YWx1ZSk7XG5cdGlmIChvcHRpb24gIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIG9wdGlvbjtcblx0fVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbiAgICBcbmRlZmluZUV4cG9zZSh7IHJlbmRlciB9KTtcblxuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0cnkge1xuXHQkKHNlbGVjdDIudmFsdWUpLnNlbGVjdDIoJ2Rlc3Ryb3knKTtcblx0JChzZWxlY3QyLnZhbHVlKS5vZmYoJ3NlbGVjdDI6c2VsZWN0Jyk7ICAgIFxuICAgIH0gY2F0Y2goZXJyKSB7XG5cdGNvbnNvbGUuZXJyb3IoXCJEZXN0cm95IHNlbGVjdC1zZWFyY2ggY2F0Y2ggZXJyb3I6XCIpO1xuXHRjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxufVxuXG5vbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbjxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXNoYWRvdyBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBiZy1saWdodCBweC0yIG1iLTJcIj5cbiAgPHNwYW4gY2xhc3M9XCJtZS0xIHRleHQtbm93cmFwXCIgc3R5bGU9XCJmb250LXNpemU6IDEuMXJlbTtcIj5cbiAgICA8aSA6Y2xhc3M9XCJtYWluX3RpdGxlLmljb25cIj48L2k+XG4gICAgPGEgdi1pZj1cIm1haW5fdGl0bGUuaHJlZlwiIDpocmVmPVwibWFpbl90aXRsZS5ocmVmXCIgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvYT4gIFxuICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9zcGFuPiAgICBcbiAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHNlY29uZGFyeV90aXRsZV9saXN0XCI+IC8gXG4gICAgICA8YSB2LWlmPVwiaXRlbS5ocmVmXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiIDpocmVmPVwiaXRlbS5ocmVmXCIgOnRpdGxlPVwiaXRlbS50aXRsZVwiPlxuICAgICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgICAgICA8aSB2LWlmPVwiaXRlbS5pY29uXCIgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuICAgICAgPC9hPiAgXG4gICAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIG1zLTEgZC1ub25lIGQtbGctaW5saW5lIGQtbWQtbm9uZVwiPnw8L3NwYW4+XG4gIDxidXR0b24gY2xhc3M9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyLWljb25cIj48L3NwYW4+XG4gIDwvYnV0dG9uPlxuICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIHNjcm9sbC14XCIgaWQ9XCJuYXZiYXJOYXZcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGl0ZW1zX3RhYmxlXCI+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5hY3RpdmVcIj5cblx0ICA8bGkgdi1pZj1cIml0ZW0uYWN0aXZlXCIgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayBhY3RpdmVcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XHQgICAgXG4gICAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuICAgIDxsaSB2LWVsc2UgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGI+PGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgICAgPC9iPlxuXHQgIDwvbGk+XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWVsc2U+XG5cdCAgPGEgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgaHJlZj1cIiNcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgPC9hPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC91bD5cbiAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgbXMtYXV0b1wiPlxuICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+XG5cdDwvYT5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIDpocmVmPVwiaGVscF9saW5rXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRtYWluX3RpdGxlOiBPYmplY3QsXG4gIHNlY29uZGFyeV90aXRsZV9saXN0OiBBcnJheSxcblx0aGVscF9saW5rOiBTdHJpbmcsXG5cdGl0ZW1zX3RhYmxlOiBBcnJheSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPG5hdiBjbGFzcz1cIm5hdmJhciBuYXZiYXItc2hhZG93IG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWxpZ2h0IGJnLWxpZ2h0IHB4LTIgbWItMlwiPlxuICA8c3BhbiBjbGFzcz1cIm1lLTEgdGV4dC1ub3dyYXBcIiBzdHlsZT1cImZvbnQtc2l6ZTogMS4xcmVtO1wiPlxuICAgIDxpIDpjbGFzcz1cIm1haW5fdGl0bGUuaWNvblwiPjwvaT5cbiAgICA8YSB2LWlmPVwibWFpbl90aXRsZS5ocmVmXCIgOmhyZWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9hPiAgXG4gICAgPHNwYW4gdi1lbHNlIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L3NwYW4+ICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIj4gLyBcbiAgICAgIDxhIHYtaWY9XCJpdGVtLmhyZWZcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCIgOmhyZWY9XCJpdGVtLmhyZWZcIiA6dGl0bGU9XCJpdGVtLnRpdGxlXCI+XG4gICAgICAgIHt7aXRlbS5sYWJlbH19XG4gICAgICAgIDxpIHYtaWY9XCJpdGVtLmljb25cIiA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG4gICAgICA8L2E+ICBcbiAgICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJpdGVtLnRpdGxlXCI+e3tpdGVtLmxhYmVsfX08L3NwYW4+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9zcGFuPlxuICA8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWQgbXMtMSBkLW5vbmUgZC1sZy1pbmxpbmUgZC1tZC1ub25lXCI+fDwvc3Bhbj5cbiAgPGJ1dHRvbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyXCIgdHlwZT1cImJ1dHRvblwiPlxuICAgIDxzcGFuIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cbiAgPC9idXR0b24+XG4gIDxkaXYgY2xhc3M9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2Ugc2Nyb2xsLXhcIiBpZD1cIm5hdmJhck5hdlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXZcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gaXRlbXNfdGFibGVcIj5cblx0PHRlbXBsYXRlIHYtaWY9XCJpdGVtLmFjdGl2ZVwiPlxuXHQgIDxsaSB2LWlmPVwiaXRlbS5hY3RpdmVcIiBAY2xpY2s9XCJ0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgaXRlbSlcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIGFjdGl2ZVwiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cdCAgICBcbiAgICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGI+PGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgICAgPC9iPlxuXHQgIDwvbGk+XG4gICAgPGxpIHYtZWxzZSBAY2xpY2s9XCJ0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgaXRlbSlcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8Yj48aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgICA8L2I+XG5cdCAgPC9saT5cblx0PC90ZW1wbGF0ZT5cblx0PHRlbXBsYXRlIHYtZWxzZT5cblx0ICA8YSBAY2xpY2s9XCJ0aGlzLiRlbWl0KCdjbGlja19pdGVtJywgaXRlbSlcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICA8L2E+XG5cdDwvdGVtcGxhdGU+XG5cdFxuXHRcbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L3VsPlxuICAgICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdiBtcy1hdXRvXCI+XG4gICAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0Omhpc3RvcnkuYmFjaygpXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtYXJyb3ctbGVmdFwiPjwvaT5cblx0PC9hPlxuICAgICAgICA8YSB0YXJnZXQ9XCJfbmV3dGFiXCIgOmhyZWY9XCJoZWxwX2xpbmtcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1xdWVzdGlvbi1jaXJjbGVcIj48L2k+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIDwvbmF2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdG1haW5fdGl0bGU6IE9iamVjdCxcbiAgc2Vjb25kYXJ5X3RpdGxlX2xpc3Q6IEFycmF5LFxuXHRoZWxwX2xpbms6IFN0cmluZyxcblx0aXRlbXNfdGFibGU6IEFycmF5LFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImNsaWNrX2l0ZW1cIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiIHYtaWY9XCJzaG93X2FsZXJ0ID09IHRydWVcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCIgOmNsYXNzPVwiYWxlcnRfdHlwZVwiPlxuICA8c3BhbiB2LWh0bWw9XCJib2R5XCI+PC9zcGFuPlxuPGJ1dHRvbiB2LWlmPVwiIW5vX2Nsb3NlX2J1dHRvblwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJjbG9zZVwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Z2xvYmFsOiBCb29sZWFuLFxuXHRub19jbG9zZV9idXR0b246IEJvb2xlYW4sXG4gICAgfSxcbiAgICBlbWl0czogW10sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgc2hvd19hbGVydDogZmFsc2UsXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGJvZHk6IFwiXCIsXG5cdCAgICBhbGVydF90eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIixcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGlmICh0aGlzLmdsb2JhbCA9PSB0cnVlKSB7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIChpbmZvKSA9PiB7XG5cdFx0aWYgKGluZm8udHlwZSAhPSBudWxsKSB7XG5cdFx0ICAgIHRoaXMuYWxlcnRfdHlwZSA9IGluZm8udHlwZTtcblx0XHR9XG5cdFx0aWYgKGluZm8udGltZW91dCAhPSBudWxsKSB7XG5cdFx0ICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLmNsb3NlKCk7IH0sIDEwMDAgKiBpbmZvLnRpbWVvdXQpO1xuXHRcdH1cblx0XHR0aGlzLnNob3coaW5mby50ZXh0X2h0bWwpO1xuXHQgICAgfSk7XHRcblx0fVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSBmYWxzZTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oYm9keSwgYWxlcnRfdHlwZSkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gdHJ1ZTtcblx0ICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICBpZiAoYWxlcnRfdHlwZSAhPSBudWxsKSB7XG5cdFx0dGhpcy5hbGVydF90eXBlID0gYWxlcnRfdHlwZTtcblx0ICAgIH1cblx0fSxcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgdi1pZj1cInNob3dfYWxlcnQgPT0gdHJ1ZVwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtZGlzbWlzc2FibGVcIiA6Y2xhc3M9XCJhbGVydF90eXBlXCI+XG4gIDxzcGFuIHYtaHRtbD1cImJvZHlcIj48L3NwYW4+XG48YnV0dG9uIHYtaWY9XCIhbm9fY2xvc2VfYnV0dG9uXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4tY2xvc2VcIiAgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRnbG9iYWw6IEJvb2xlYW4sXG5cdG5vX2Nsb3NlX2J1dHRvbjogQm9vbGVhbixcbiAgICB9LFxuICAgIGVtaXRzOiBbXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBzaG93X2FsZXJ0OiBmYWxzZSxcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgYm9keTogXCJcIixcblx0ICAgIGFsZXJ0X3R5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0aWYgKHRoaXMuZ2xvYmFsID09IHRydWUpIHtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgKGluZm8pID0+IHtcblx0XHRpZiAoaW5mby50eXBlICE9IG51bGwpIHtcblx0XHQgICAgdGhpcy5hbGVydF90eXBlID0gaW5mby50eXBlO1xuXHRcdH1cblx0XHRpZiAoaW5mby50aW1lb3V0ICE9IG51bGwpIHtcblx0XHQgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuY2xvc2UoKTsgfSwgMTAwMCAqIGluZm8udGltZW91dCk7XG5cdFx0fVxuXHRcdHRoaXMuc2hvdyhpbmZvLnRleHRfaHRtbCk7XG5cdCAgICB9KTtcdFxuXHR9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IGZhbHNlO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbihib2R5LCBhbGVydF90eXBlKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSB0cnVlO1xuXHQgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgIGlmIChhbGVydF90eXBlICE9IG51bGwpIHtcblx0XHR0aGlzLmFsZXJ0X3R5cGUgPSBhbGVydF90eXBlO1xuXHQgICAgfVxuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiByZWY9XCJjaGFydFwiPjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdHJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U6IEJvb2xlYW4sXG5cdG5vdF9lbWl0X2dsb2JhbF9zdGF0dXNfdXBkYXRlOiBCb29sZWFuLFxuXHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdGdldF9wYXJhbXNfdXJsX3JlcXVlc3Q6IEZ1bmN0aW9uLFxuXHRnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM6IEZ1bmN0aW9uLFxuICAgICAgICBtYXBfY2hhcnRfb3B0aW9uczogRnVuY3Rpb24sXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXHRcblx0cm91bmRfdGltZTogQm9vbGVhbiwgLy9pZiBtaW5fdGltZV9pbnRlcnZhbF9pZCAhPSBudWxsIHJvdW5kIHRpbWUgYnkgbWluX3RpbWVfaW50ZXJ2YWxfaWRcdFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCIsIFwiaGlkZGVuXCIsIFwic2hvd2VkXCIsIFwiY2hhcnRfcmVsb2FkZWRcIiwgXCJ6b29tXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudCgpIHtcblx0dGhpcy5jaGFydC5kZXN0cm95Q2hhcnQoKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBjaGFydDogbnVsbCxcblx0ICAgIGNoYXJ0X29wdGlvbnM6IG51bGwsXG5cdCAgICBmcm9tX3pvb206IGZhbHNlLFxuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0aW5pdDogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICBpZiAodGhpcy5yZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlKSB7XG5cdFx0dGhpcy5yZWdpc3Rlcl9zdGF0dXMoc3RhdHVzKTtcblx0ICAgIH1cblx0ICAgIGF3YWl0IHRoaXMuZHJhd19jaGFydCh1cmxfcmVxdWVzdCk7XG5cdH0sXG5cdGdldF9kYXRhX3VyaTogYXN5bmMgZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgaWYgKHRoaXMuY2hhcnQgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXHQgICAgbGV0IGRhdGFfdXJpID0gYXdhaXQgdGhpcy5jaGFydC50b19kYXRhX3VyaSgpO1xuXHQgICAgcmV0dXJuIGRhdGFfdXJpO1xuXHR9LFxuXHRkb3dubG9hZF9jaGFydF9wbmc6IGFzeW5jIGZ1bmN0aW9uKGZpbGVfbmFtZSwgb3B0aW9ucykge1xuXHQgICAgaWYgKHRoaXMuY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIGxldCBkYXRhX3VyaSA9IGF3YWl0IHRoaXMuY2hhcnQudG9fZGF0YV91cmkoKTtcblx0ICAgIGRvd25sb2FkVVJJKGRhdGFfdXJpLCBmaWxlX25hbWUpO1xuXHR9LFxuXHRyZWdpc3Rlcl9zdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0ICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0aWYgKHRoaXMuZnJvbV96b29tID09IHRydWUpIHtcblx0XHQgICAgdGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHQgICAgLy9yZXR1cm47XG5cdFx0fVxuXHRcdGxldCBuZXdfdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChuZXdfc3RhdHVzKTtcblx0XHRpZiAobmV3X3VybF9yZXF1ZXN0ID09IHVybF9yZXF1ZXN0KSB7XG5cdFx0ICAgIHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdCAgICB9LCBmYWxzZSk7XG5cdH0sXG5cdGdldF91cmxfcmVxdWVzdDogZnVuY3Rpb24oc3RhdHVzKSB7XG5cdCAgICBsZXQgdXJsX3BhcmFtcztcblx0ICAgIGlmICh0aGlzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdGlmIChzdGF0dXMgPT0gbnVsbCkge1xuXHRcdCAgICBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdH1cblx0XHR1cmxfcGFyYW1zID0gdGhpcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgcmV0dXJuIGAke3RoaXMuYmFzZV91cmxfcmVxdWVzdH0/JHt1cmxfcGFyYW1zfWA7XG5cdH0sXG5cdGRyYXdfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBsZXQgY2hhcnRBcGV4ID0gbnRvcENoYXJ0QXBleDtcblx0ICAgIGxldCBjaGFydF90eXBlID0gdGhpcy5jaGFydF90eXBlO1xuXHQgICAgaWYgKGNoYXJ0X3R5cGUgPT0gbnVsbCkge1xuXHRcdGNoYXJ0X3R5cGUgPSBjaGFydEFwZXgudHlwZUNoYXJ0LlRTX1NUQUNLRUQ7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNoYXJ0ID0gY2hhcnRBcGV4Lm5ld0NoYXJ0KGNoYXJ0X3R5cGUpO1xuXHQgICAgbGV0IG1lID0gdGhpcztcblx0ICAgIHRoaXMuY2hhcnQucmVnaXN0ZXJFdmVudChcImJlZm9yZVpvb21cIiwgZnVuY3Rpb24oY2hhcnRfY29udGV4dCwgYXhpcykge1xuXHRcdG1lLm9uX2JlZm9yZV96b29tKGNoYXJ0X2NvbnRleHQsIGF4aXMpO1xuXHQgICAgfSk7XG5cdCAgICB0aGlzLmNoYXJ0LnJlZ2lzdGVyRXZlbnQoXCJ6b29tZWRcIiwgZnVuY3Rpb24oY2hhcnRfY29udGV4dCwgYXhpcykge1xuXHRcdG1lLm9uX3pvb21lZChjaGFydF9jb250ZXh0LCBheGlzKTtcblx0ICAgIH0pO1xuXHQgICAgbGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0ICAgIHRoaXMuY2hhcnQuZHJhd0NoYXJ0KHRoaXMuJHJlZnNbXCJjaGFydFwiXSwgY2hhcnRfb3B0aW9ucyk7XG5cdH0sXG5cdHVwZGF0ZV9jaGFydDogYXN5bmMgZnVuY3Rpb24odXJsX3JlcXVlc3QpIHtcblx0ICAgIGlmICh1cmxfcmVxdWVzdCA9PSBudWxsKSB7XG5cdFx0dXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdCgpO1xuXHQgICAgfVxuXHQgICAgbGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0ICAgIHRoaXMuY2hhcnQudXBkYXRlQ2hhcnQoY2hhcnRfb3B0aW9ucyk7XG5cdH0sXG5cdHVwZGF0ZV9jaGFydF9vcHRpb25zOiBmdW5jdGlvbihjaGFydF9vcHRpb25zKSB7XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnRfc2VyaWVzOiBmdW5jdGlvbihzZXJpZXMpIHtcblx0ICAgIGlmIChzZXJpZXMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0ICAgIHRoaXMuY2hhcnQudXBkYXRlU2VyaWVzKHNlcmllcyk7XG5cdH0sXG5cdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbih1cmxfcmVxdWVzdCkge1xuXHQgICAgbGV0IGNoYXJ0X29wdGlvbnM7XG5cdCAgICBpZiAodGhpcy5nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPT0gbnVsbCkge1x0XHRcblx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0ICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1hcF9jaGFydF9vcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjaGFydF9vcHRpb25zID0gdGhpcy5tYXBfY2hhcnRfb3B0aW9ucyhjaGFydF9vcHRpb25zKTtcbiAgICAgICAgICAgIH1cblx0ICAgIHRoaXMuJGVtaXQoJ2NoYXJ0X3JlbG9hZGVkJywgY2hhcnRfb3B0aW9ucyk7XG5cdCAgICByZXR1cm4gY2hhcnRfb3B0aW9ucztcblx0fSxcblx0b25fYmVmb3JlX3pvb206IGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIHsgeGF4aXMsIHlheGlzIH0pIHtcblx0ICAgIGxldCBuZXdfZXBvY2hfc3RhdHVzID0gdGhpcy5nZXRfZXBvY2hfZnJvbV94YXhpc19ldmVudCh4YXhpcyk7XG5cdCAgICBpZiAodGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCAhPSBudWxsKSB7XG5cdFx0Y29uc3QgbWluX3RpbWVfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHRcdGlmIChuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPCBtaW5fdGltZV9pbnRlcnZhbCkge1xuXHRcdCAgICBcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCArIG1pbl90aW1lX2ludGVydmFsO1xuXHRcdCAgICBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gKG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kICUgbWluX3RpbWVfaW50ZXJ2YWwpO1xuXHRcdCAgICBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBtaW5fdGltZV9pbnRlcnZhbDtcblx0XHR9XG5cdFx0aWYgKHRoaXMucm91bmRfdGltZSA9PSB0cnVlKSB7XG5cdFx0ICAgIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luLCB0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkKTtcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCwgdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCk7XG5cdFx0fVxuXHRcdFxuXHRcdHhheGlzLm1pbiA9IG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwO1xuXHRcdHhheGlzLm1heCA9IG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kICogMTAwMDtcblx0ICAgIH1cblx0ICAgIHJldHVybiB4YXhpcztcblx0fSxcblx0b25fem9vbWVkOiBmdW5jdGlvbihjaGFydF9jb250ZXh0LCB7IHhheGlzLCB5YXhpcyB9KSB7XG5cdCAgICB0aGlzLmZyb21fem9vbSA9IHRydWU7XG5cdCAgICBjb25zdCBuZXdfZXBvY2hfc3RhdHVzID0gdGhpcy5nZXRfZXBvY2hfZnJvbV94YXhpc19ldmVudCh4YXhpcyk7XG4gICAgICAgICAgICAvLyB0aGUgdGltZXN0YW1wcyBhcmUgaW4gbWlsbGlzZWNvbmRzLCBjb252ZXJ0IHRoZW0gaW50byBzZWNvbmRzXG5cdCAgICBpZiAoIXRoaXMubm90X2VtaXRfZ2xvYmFsX3N0YXR1c191cGRhdGUpIHtcblx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgbmV3X2Vwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdCAgICB9XG5cdCAgICB0aGlzLiRlbWl0KCd6b29tJywgbmV3X2Vwb2NoX3N0YXR1cyk7XG5cdH0sXG5cdGdldF9lcG9jaF9mcm9tX3hheGlzX2V2ZW50OiBmdW5jdGlvbih4YXhpcykge1xuXHQgICAgY29uc3QgYmVnaW4gPSBtb21lbnQoeGF4aXMubWluKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IG1vbWVudCh4YXhpcy5tYXgpO1xuXHQgICAgbGV0IG5ld19lcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBOdW1iZXIucGFyc2VJbnQoYmVnaW4udW5peCgpKSwgZXBvY2hfZW5kOiBOdW1iZXIucGFyc2VJbnQoZW5kLnVuaXgoKSkgfTtcblx0ICAgIHJldHVybiBuZXdfZXBvY2hfc3RhdHVzO1xuXHR9XG4gICAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gYnRuLWdyb3VwLXNtIGZsZXgtd3JhcCBkLWZsZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vcHRpb25cIiA6aWQ9XCIndGltZV9wcmVzZXRfcmFuZ2VfcGlja2VyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc2VsZWN0X3RpbWUobnVsbClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXMtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2FsZW5kYXItYWx0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0IGZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImJlZ2luLWRhdGVcIiBzdHlsZT1cIndpZHRoOjEwcmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfYmVnaW5fZGF0ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJlbmQtZGF0ZVwiIHN0eWxlPVwid2lkdGg6MTByZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiIHN0eWxlPVwid2lkdGg6IDIuNXJlbTtcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cIndyb25nX2RhdGUgfHwgd3JvbmdfbWluX2ludGVydmFsXCIgOnRpdGxlPVwiaW52YWxpZF9kYXRlX21lc3NhZ2VcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjAuMnJlbTtjb2xvcjpyZWQ7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtcy0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cIiFlbmFibGVfYXBwbHkgfHwgd3JvbmdfZGF0ZSB8fCB3cm9uZ19taW5faW50ZXJ2YWxcIiBAY2xpY2s9XCJhcHBseVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIj57e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkxOG4oJ2FwcGx5JykgfX08L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJqdW1wX3RpbWVfYmFjaygpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYmFja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfbGVmdCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImp1bXBfdGltZV9haGVhZCgpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGluayBtZS0yXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1haGVhZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfcmlnaHQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgyKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1pblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21faW4nKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtcGx1c1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgwLjUpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLW91dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21fb3V0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLW1pbnVzXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5KClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl91bmRvJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdW5kb1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cInNlbGVjdF90aW1lX3ZhbHVlID09ICdjdXN0b20nIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiY2hhbmdlX3NlbGVjdF90aW1lKClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fcmVmcmVzaCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4dHJhX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBlbmFibGVfcmVmcmVzaDogQm9vbGVhbixcbiAgICAgICAgZGlzYWJsZWRfZGF0ZV9waWNrZXI6IEJvb2xlYW4sXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXG5cdCAgICByb3VuZF90aW1lOiBCb29sZWFuLCAvL2lmIG1pbl90aW1lX2ludGVydmFsX2lkICE9IG51bGwgcm91bmQgdGltZSBieSBtaW5fdGltZV9pbnRlcnZhbF9pZFxuICAgICAgICBjdXN0b21fdGltZV9pbnRlcnZhbF9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC8vIGEgY29tcHV0ZWQgZ2V0dGVyXG4gICAgICAgIGludmFsaWRfZGF0ZV9tZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53cm9uZ19kYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaTE4bignd3JvbmdfZGF0ZV9yYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy53cm9uZ19taW5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gdGhpcy5pMThuKCd3cm9uZ19taW5faW50ZXJ2YWwnKTtcbiAgICAgICAgICAgICAgICBtc2cucmVwbGFjZSgnJXRpbWVfaW50ZXJ2YWwnLCB0aGlzLmkxOG4oYHNob3dfYWxlcnRzLnByZXNldHMuJHt0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkfWApKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtc2dcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgXCJlbmFibGVfcmVmcmVzaFwiOiBmdW5jdGlvbiAodmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbl90aW1lX2ludGVydmFsX2lkXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0b2RvXG4gICAgICAgIH0sXG4gICAgICAgIFwicm91bmRfdGltZVwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gdG9kb1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImVwb2NoX2NoYW5nZVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGJlZm9yZU1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy4kcHJvcHMuY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3QgPSB0aGlzLiRwcm9wcy5jdXN0b21fdGltZV9pbnRlcnZhbF9saXN0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGZpbHRlciBpbnRlcnZhbFxuICAgICAgICBpZiAodGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3Q7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblx0Y29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcblx0Y29uc3QgbWluX3RpbWVfaW50ZXJ2YWwgPSB0aW1lZnJhbWVzX2RpY3RbdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZF07XG4gICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW5fdGltZV9pbnRlcnZhbCA9PSBudWxsIHx8IHRpbWVmcmFtZXNfZGljdFtlbGVtLnZhbHVlXSA+PSBtaW5fdGltZV9pbnRlcnZhbDtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgICAgICBsZXQgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG4gICAgICAgIGlmIChlcG9jaF9iZWdpbiAhPSBudWxsICYmIGVwb2NoX2VuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXR1c1xuXG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChlcG9jaF9iZWdpbiksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCkgfSwgdGhpcy4kcHJvcHMuaWQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG4gICAgICAgIGxldCBmX3NldF9waWNrZXIgPSAocGlja2VyLCB2YXJfbmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZsYXRwaWNrcigkKHRoaXMuJHJlZnNbcGlja2VyXSksIHtcbiAgICAgICAgICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiZC9tL1kgSDppXCIsXG4gICAgICAgICAgICAgICAgLy9hbHRJbnB1dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvL2RhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuICAgICAgICAgICAgICAgIC8vYWx0Rm9ybWF0OiBcImQtbS1ZIEg6aVwiLFxuICAgICAgICAgICAgICAgIC8vbG9jYWxlOiBcIml0XCIsXG4gICAgICAgICAgICAgICAgdGltZV8yNGhyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsaWNrT3BlbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgLy9tb2RlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgLy9zdGF0aWM6IHRydWUsXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIChzZWxlY3RlZERhdGVzLCBkYXRlU3RyLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5lbmFibGVfYXBwbHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtZS53cm9uZ19kYXRlID0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID4gbWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgbWUud3JvbmdfbWluX2ludGVydmFsID0gbWUubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgbWUuZ2V0X3V0Y19zZWNvbmRzKChtZS5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpIC0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKSA8IG50b3BuZ191dGlsaXR5LmdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQobWUubWluX3RpbWVfaW50ZXJ2YWxfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgLy9tZS5hW2RhdGFdID0gZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlID0gZl9zZXRfcGlja2VyKFwiYmVnaW4tZGF0ZVwiLCBcImJlZ2luX2RhdGVcIik7XG4gICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZSA9IGZfc2V0X3BpY2tlcihcImVuZC1kYXRlXCIsIFwiZW5kX2RhdGVcIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHMuaWQsIG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCAobmV3X3N0YXR1cykgPT4gdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChuZXdfc3RhdHVzKSwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogTWV0aG9kcyBvZiB0aGUgY29tcG9uZW50LiAqL1xuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3RhcnRfcmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24/LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2Vfc2VsZWN0X3RpbWUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5yZWZyZXNoX2ludGVydmFsX3NlY29uZHMgKiAxMDAwKTtcbiAgICAgICAgICAgIC8vIH0sIDEwKiAxMDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXRjX3NfdG9fc2VydmVyX2RhdGU6IGZ1bmN0aW9uICh1dGNfc2Vjb25kcykge1xuICAgICAgICAgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcbiAgICAgICAgICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcbiAgICAgICAgICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIGRfc2VydmVyID0gbmV3IERhdGUodXRjICsgb2Zmc2V0X21zKTtcbiAgICAgICAgICAgIHJldHVybiBkX3NlcnZlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyX2RhdGVfdG9fZGF0ZTogZnVuY3Rpb24gKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgbGV0IHV0YyA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgbGV0IGxvY2FsX29mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbWludXRlcyA9IHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG4gICAgICAgICAgICB2YXIgZF9sb2NhbCA9IG5ldyBEYXRlKHV0YyAtIG9mZnNldF9tcyk7XG4gICAgICAgICAgICByZXR1cm4gZF9sb2NhbDtcbiAgICAgICAgfSxcbiAgICAgICAgb25fc3RhdHVzX3VwZGF0ZWQ6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBlbmRfZGF0ZV90aW1lX3V0YyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlZ2luIGRhdGUgdGltZSBub3cgLSAzMCBtaW51dGVzXG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IGVuZF9kYXRlX3RpbWVfdXRjIC0gMzAgKiA2MCAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmVwb2NoX2VuZCAhPSBudWxsICYmIHN0YXR1cy5lcG9jaF9iZWdpbiAhPSBudWxsXG4gICAgICAgICAgICAgICAgJiYgTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpID4gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbikpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgICAgIGVuZF9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMsIHRoaXMuJHByb3BzLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4pKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2VuZCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tZGF0ZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi10aW1lXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLWRhdGVcIiwgZW5kX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC10aW1lXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3NlbGVjdF90aW1lX3ZhbHVlKGJlZ2luX2RhdGVfdGltZV91dGMsIGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRfc3RhdHVzX2luX2hpc3RvcnkodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmFibGVfYXBwbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybCh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldF9zZWxlY3RfdGltZV92YWx1ZTogZnVuY3Rpb24gKGJlZ2luX3V0YywgZW5kX3V0Yykge1xuICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvbGVyYW5jZSA9IDYwO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXHQgICAgaWYgKHRoaXMucm91bmRfdGltZSA9PSB0cnVlICYmIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCkge1xuXHRcdG5vdyA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwobm93KVxuXHQgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX3V0Yyk7XG4gICAgICAgICAgICBjb25zdCBiZWdpbl91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX3V0Yyk7XG5cdCAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oZW5kX3V0Y19zLCBub3csIHRvbGVyYW5jZSkpIHtcblx0XHR0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gbnVsbDtcblx0XHRmb3IgKGxldCB0aW1lX2lkIGluIHRpbWVmcmFtZXNfZGljdCkge1xuXHRcdCAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSB0aW1lZnJhbWVzX2RpY3RbdGltZV9pZF0sIHRvbGVyYW5jZSkpIHtcblx0XHRcdHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSB0aW1lX2lkO1xuXHRcdCAgICB9XG5cdFx0fVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSA9PSB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gbGV0IGRhdGVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0SG91cnMoZF90aW1lX2JlZ2luLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRNaW51dGVzKGRfdGltZV9iZWdpbi5nZXRNaW51dGVzKCkgKyBkX3RpbWVfYmVnaW4uZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldFNlY29uZHMoZF90aW1lX2JlZ2luLmdldFNlY29uZHMoKSk7XG5cbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0SG91cnMoZF90aW1lX2VuZC5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldE1pbnV0ZXMoZF90aW1lX2VuZC5nZXRNaW51dGVzKCkgKyBkX3RpbWVfZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0U2Vjb25kcyhkX3RpbWVfZW5kLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2JlZ2luLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9lbmQudmFsdWVPZigpKTtcbiAgICAgICAgICAgIGxldCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBpZiAoZXBvY2hfZW5kID4gbm93X3MpIHtcbiAgICAgICAgICAgICAgICBlcG9jaF9lbmQgPSBub3dfcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2V0X2RhdGVfdGltZTogZnVuY3Rpb24ocmVmX25hbWUsIHV0Y190cywgaXNfdGltZSkge1xuICAgICAgICAvLyAgICAgdXRjX3RzID0gdGhpcy5nZXRfdXRjX3NlY29uZHModXRjX3RzKSAqIDEwMDA7ICAgICAgICBcbiAgICAgICAgLy8gICAgIGxldCBkYXRlX3RpbWUgPSBuZXcgRGF0ZSh1dGNfdHMpO1xuICAgICAgICAvLyAgICAgZGF0ZV90aW1lLnNldE1pbnV0ZXMoZGF0ZV90aW1lLmdldE1pbnV0ZXMoKSAtIGRhdGVfdGltZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgLy8gICAgIGlmIChpc190aW1lKSB7XG4gICAgICAgIC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMTEsMTYpO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgY2hhbmdlX3NlbGVjdF90aW1lOiBmdW5jdGlvbiAocmVmcmVzaF9kYXRhKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSgpO1xuICAgICAgICAgICAgbGV0IGludGVydmFsX3MgPSBzX3ZhbHVlc1t0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uLnZhbHVlXTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IGVwb2NoX2VuZCAtIGludGVydmFsX3M7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hfZW5kLCByZWZyZXNoX2RhdGEgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBjb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lZnJhbWVzX2lkcyA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5tYXAoKHRzKSA9PiB0cy52YWx1ZSk7XG5cdCAgICBsZXQgdGltZWZyYW1lc19hdmFpbGFibGUgPSB7fTtcblx0ICAgIHRpbWVmcmFtZXNfaWRzLmZvckVhY2goKHRmX2lkKSA9PiB7XG5cdFx0dGltZWZyYW1lc19hdmFpbGFibGVbdGZfaWRdID0gdGltZWZyYW1lc19kaWN0W3RmX2lkXTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHRpbWVmcmFtZXNfYXZhaWxhYmxlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfdXRjX3NlY29uZHM6IGZ1bmN0aW9uICh1dGNfbXMpIHtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5nZXRfdXRjX3NlY29uZHModXRjX21zKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNfYmV0d2VlbjogZnVuY3Rpb24gKHgsIHksIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggPj0geSAtIHRvbGVyYW5jZSAmJiB4IDw9IHk7XG4gICAgICAgIH0sXG4gICAgICAgIHpvb206IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pIC8gc2NhbGU7XG4gICAgICAgICAgICBsZXQgY2VudGVyID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAvIDIgKyB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAvIDIpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBjZW50ZXIgLSBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBjZW50ZXIgKyBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYWhlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNfZW5kID0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKz0gKDMwICogbWluKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiArPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gcHJldmlvdXNfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBlbWl0X2Vwb2NoX2NoYW5nZTogZnVuY3Rpb24gKGVwb2NoX3N0YXR1cywgaWQsIGVtaXRfb25seV9nbG9iYWxfZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfZW5kID09IG51bGwgfHwgZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwpIHsgcmV0dXJuOyB9O1xuICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID4gZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXHQgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgdGhpcy5yb3VuZF90aW1lID09IHRydWUpIHtcblx0XHRlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG5cdFx0ZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG5cdCAgICB9XG5cbiAgICAgICAgICAgIGlmIChpZCAhPSB0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChlcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdCAgICBpZiAoZW1pdF9vbmx5X2dsb2JhbF9ldmVudCkge1xuXHRcdHJldHVybjtcblx0ICAgIH1cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJlcG9jaF9jaGFuZ2VcIiwgZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcblx0cm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWw6IGZ1bmN0aW9uKHRzKSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQodHMsIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHR9LFxuICAgICAgICBhZGRfc3RhdHVzX2luX2hpc3Rvcnk6IGZ1bmN0aW9uIChlcG9jaF9zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3Rvcnkuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlfc3RhdHVzX2J5X2hpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAgIFByaXZhdGUgZGF0ZSBvZiB2dWUgY29tcG9uZW50LlxuICAgICovXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICAgICAgLy9zdGF0dXNfaWQ6IFwiZGF0ZS10aW1lLXJhbmdlLXBpY2tlclwiICsgdGhpcy4kcHJvcHMuaWQsXG4gICAgICAgICAgICBlcG9jaF9zdGF0dXM6IG51bGwsXG4gICAgICAgICAgICByZWZyZXNoX2ludGVydmFsOiBudWxsLFxuICAgICAgICAgICAgcmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzOiA2MCxcbiAgICAgICAgICAgIHVwZGF0ZV9mcm9tX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgaGlzdG9yeV9sYXN0X3N0YXR1czogbnVsbCxcbiAgICAgICAgICAgIGVuYWJsZV9hcHBseTogZmFsc2UsXG4gICAgICAgICAgICBzZWxlY3RfdGltZV92YWx1ZTogXCI1X21pblwiLFxuICAgICAgICAgICAgc2VsZWN0ZWRfdGltZV9vcHRpb246IHsgdmFsdWU6IFwiNV9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIHdyb25nX2RhdGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JvbmdfbWluX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGZsYXRfYmVnaW5fZGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGZsYXRfZW5kX2RhdGU6IG51bGwsXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0OiBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCI1X21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMTBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMzBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiNl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy42X2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIxMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5kYXRlX3RpbWVfaW5wdXQge1xuICAgIHdpZHRoOiAxMC41cmVtO1xuICAgIG1heC13aWR0aDogMTAuNXJlbTtcbiAgICBtaW4td2lkdGg6IDEwLjVyZW07XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbWUtYXV0byBidG4tZ3JvdXAtc20gZmxleC13cmFwIGQtZmxleFwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiYmVnaW5cIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF90aW1lX29wdGlvblwiIDppZD1cIid0aW1lX3ByZXNldF9yYW5nZV9waWNrZXInXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWRcIiBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RfdGltZShudWxsKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtcy0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1jYWxlbmRhci1hbHRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXQgZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiYmVnaW4tZGF0ZVwiIHN0eWxlPVwid2lkdGg6MTByZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJiZWdpbi1kYXRlXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgQGNoYW5nZT1cImNoYW5nZV9iZWdpbl9kYXRlXCIgdHlwZT1cImRhdGVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBiZWdpbi10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItcmlnaHQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0IGZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImVuZC1kYXRlXCIgc3R5bGU9XCJ3aWR0aDoxMHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImVuZC1kYXRlXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cImRhdGVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBlbmQtdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLWxlZnQtMCBmaXgtc2FmYXJpLWlucHV0XCIgc3R5bGU9XCJ3aWR0aDogMi41cmVtO1wiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImVuZC10aW1lXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cInRpbWVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBlbmQtdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLWxlZnQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1zaG93PVwid3JvbmdfZGF0ZSB8fCB3cm9uZ19taW5faW50ZXJ2YWxcIiA6dGl0bGU9XCJpbnZhbGlkX2RhdGVfbWVzc2FnZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6MC4ycmVtO2NvbG9yOnJlZDtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leGNsYW1hdGlvbi1jaXJjbGVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1zLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiIWVuYWJsZV9hcHBseSB8fCB3cm9uZ19kYXRlIHx8IHdyb25nX21pbl9pbnRlcnZhbFwiIEBjbGljaz1cImFwcGx5XCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiPnt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaTE4bignYXBwbHknKSB9fTwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImp1bXBfdGltZV9iYWNrKClcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1iYWNrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fbW92ZV9sZWZ0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtbGVmdFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwianVtcF90aW1lX2FoZWFkKClcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rIG1lLTJcIiByZWY9XCJidG4tanVtcC10aW1lLWFoZWFkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fbW92ZV9yaWdodCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LXJpZ2h0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJ6b29tKDIpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fem9vbV9pbicpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1wbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJ6b29tKDAuNSlcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLXpvb20tb3V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fem9vbV9vdXQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtbWludXNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJoaXN0b3J5X2xhc3Rfc3RhdHVzID09IG51bGwgfHwgZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlfc3RhdHVzX2J5X2hpc3RvcnkoKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3VuZG8nKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS11bmRvXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwic2VsZWN0X3RpbWVfdmFsdWUgPT0gJ2N1c3RvbScgfHwgZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJjaGFuZ2Vfc2VsZWN0X3RpbWUoKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9yZWZyZXNoJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0cmFfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgICAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICAgIGlkOiBTdHJpbmcsXG4gICAgICAgIGVuYWJsZV9yZWZyZXNoOiBCb29sZWFuLFxuICAgICAgICBkaXNhYmxlZF9kYXRlX3BpY2tlcjogQm9vbGVhbixcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQ6IFN0cmluZyxcblx0ICAgIHJvdW5kX3RpbWU6IEJvb2xlYW4sIC8vaWYgbWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCByb3VuZCB0aW1lIGJ5IG1pbl90aW1lX2ludGVydmFsX2lkXG4gICAgICAgIGN1c3RvbV90aW1lX2ludGVydmFsX2xpc3Q6IEFycmF5LFxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgLy8gYSBjb21wdXRlZCBnZXR0ZXJcbiAgICAgICAgaW52YWxpZF9kYXRlX21lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndyb25nX2RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pMThuKCd3cm9uZ19kYXRlX3JhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLndyb25nX21pbl9pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGxldCBtc2cgPSB0aGlzLmkxOG4oJ3dyb25nX21pbl9pbnRlcnZhbCcpO1xuICAgICAgICAgICAgICAgIG1zZy5yZXBsYWNlKCcldGltZV9pbnRlcnZhbCcsIHRoaXMuaTE4bihgc2hvd19hbGVydHMucHJlc2V0cy4ke3RoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWR9YCkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICBcImVuYWJsZV9yZWZyZXNoXCI6IGZ1bmN0aW9uICh2YWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydF9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmVmcmVzaF9pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgfSxcbiAgICAgICAgXCJyb3VuZF90aW1lXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0b2RvXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBlbWl0czogW1wiZXBvY2hfY2hhbmdlXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgYmVmb3JlTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLiRwcm9wcy5jdXN0b21fdGltZV9pbnRlcnZhbF9saXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdCA9IHRoaXMuJHByb3BzLmN1c3RvbV90aW1lX2ludGVydmFsX2xpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmlsdGVyIGludGVydmFsXG4gICAgICAgIGlmICh0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCA9IHRoaXMudGltZV9wcmVzZXRfbGlzdDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXHRjb25zdCB0aW1lZnJhbWVzX2RpY3QgPSB0aGlzLmdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSgpO1xuXHRjb25zdCBtaW5fdGltZV9pbnRlcnZhbCA9IHRpbWVmcmFtZXNfZGljdFt0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkXTtcbiAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkID0gdGhpcy50aW1lX3ByZXNldF9saXN0LmZpbHRlcigoZWxlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW0udmFsdWUgPT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1pbl90aW1lX2ludGVydmFsID09IG51bGwgfHwgdGltZWZyYW1lc19kaWN0W2VsZW0udmFsdWVdID49IG1pbl90aW1lX2ludGVydmFsO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG4gICAgICAgIGxldCBlcG9jaF9lbmQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcbiAgICAgICAgaWYgKGVwb2NoX2JlZ2luICE9IG51bGwgJiYgZXBvY2hfZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc3RhdHVzXG5cbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UoeyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2JlZ2luKSwgZXBvY2hfZW5kOiBOdW1iZXIucGFyc2VJbnQoZXBvY2hfZW5kKSB9LCB0aGlzLiRwcm9wcy5pZCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG1lID0gdGhpcztcbiAgICAgICAgbGV0IGZfc2V0X3BpY2tlciA9IChwaWNrZXIsIHZhcl9uYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZmxhdHBpY2tyKCQodGhpcy4kcmVmc1twaWNrZXJdKSwge1xuICAgICAgICAgICAgICAgIGVuYWJsZVRpbWU6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJkL20vWSBIOmlcIixcbiAgICAgICAgICAgICAgICAvL2FsdElucHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vZGF0ZUZvcm1hdDogXCJZWVlZLU1NLUREIEhIOm1tXCIsXG4gICAgICAgICAgICAgICAgLy9hbHRGb3JtYXQ6IFwiZC1tLVkgSDppXCIsXG4gICAgICAgICAgICAgICAgLy9sb2NhbGU6IFwiaXRcIixcbiAgICAgICAgICAgICAgICB0aW1lXzI0aHI6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xpY2tPcGVuczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvL21vZGU6IFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICAvL3N0YXRpYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gKHNlbGVjdGVkRGF0ZXMsIGRhdGVTdHIsIGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmVuYWJsZV9hcHBseSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG1lLndyb25nX2RhdGUgPSBtZS5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkgPiBtZS5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICBtZS53cm9uZ19taW5faW50ZXJ2YWwgPSBtZS5taW5fdGltZV9pbnRlcnZhbF9pZCAmJiBtZS5nZXRfdXRjX3NlY29uZHMoKG1lLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkgLSBtZS5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCkpIDwgbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZChtZS5taW5fdGltZV9pbnRlcnZhbF9pZCkpO1xuICAgICAgICAgICAgICAgICAgICAvL21lLmFbZGF0YV0gPSBkO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mbGF0X2JlZ2luX2RhdGUgPSBmX3NldF9waWNrZXIoXCJiZWdpbi1kYXRlXCIsIFwiYmVnaW5fZGF0ZVwiKTtcbiAgICAgICAgdGhpcy5mbGF0X2VuZF9kYXRlID0gZl9zZXRfcGlja2VyKFwiZW5kLWRhdGVcIiwgXCJlbmRfZGF0ZVwiKTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wcy5pZCwgbnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIChuZXdfc3RhdHVzKSA9PiB0aGlzLm9uX3N0YXR1c191cGRhdGVkKG5ld19zdGF0dXMpLCB0cnVlKTtcblxuICAgICAgICAvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuICAgICAgICAvL2NvbnNvbGUubG9nKHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgICAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlX3JlZnJlc2gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKiBNZXRob2RzIG9mIHRoZSBjb21wb25lbnQuICovXG4gICAgbWV0aG9kczoge1xuICAgICAgICBzdGFydF9yZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbj8udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlX3JlZnJlc2ggJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPSBcImN1c3RvbVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZV9zZWxlY3RfdGltZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLnJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kcyAqIDEwMDApO1xuICAgICAgICAgICAgLy8gfSwgMTAqIDEwMDApO1xuICAgICAgICB9LFxuICAgICAgICB1dGNfc190b19zZXJ2ZXJfZGF0ZTogZnVuY3Rpb24gKHV0Y19zZWNvbmRzKSB7XG4gICAgICAgICAgICBsZXQgdXRjID0gdXRjX3NlY29uZHMgKiAxMDAwO1xuICAgICAgICAgICAgbGV0IGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMpO1xuICAgICAgICAgICAgbGV0IGxvY2FsX29mZnNldCA9IGRfbG9jYWwuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbWludXRlcyA9IHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG4gICAgICAgICAgICB2YXIgZF9zZXJ2ZXIgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXRfbXMpO1xuICAgICAgICAgICAgcmV0dXJuIGRfc2VydmVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXJ2ZXJfZGF0ZV90b19kYXRlOiBmdW5jdGlvbiAoZGF0ZSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBsZXQgdXRjID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9taW51dGVzID0gc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcbiAgICAgICAgICAgIHZhciBkX2xvY2FsID0gbmV3IERhdGUodXRjIC0gb2Zmc2V0X21zKTtcbiAgICAgICAgICAgIHJldHVybiBkX2xvY2FsO1xuICAgICAgICB9LFxuICAgICAgICBvbl9zdGF0dXNfdXBkYXRlZDogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgbGV0IGVuZF9kYXRlX3RpbWVfdXRjID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgYmVnaW4gZGF0ZSB0aW1lIG5vdyAtIDMwIG1pbnV0ZXNcbiAgICAgICAgICAgIGxldCBiZWdpbl9kYXRlX3RpbWVfdXRjID0gZW5kX2RhdGVfdGltZV91dGMgLSAzMCAqIDYwICogMTAwMDtcbiAgICAgICAgICAgIGlmIChzdGF0dXMuZXBvY2hfZW5kICE9IG51bGwgJiYgc3RhdHVzLmVwb2NoX2JlZ2luICE9IG51bGxcbiAgICAgICAgICAgICAgICAmJiBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2VuZCkgPiBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKSkge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICAgICAgZW5kX2RhdGVfdGltZV91dGMgPSBzdGF0dXMuZXBvY2hfZW5kICogMTAwMDtcbiAgICAgICAgICAgICAgICBiZWdpbl9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cywgdGhpcy4kcHJvcHMuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcy5mbGF0X2JlZ2luX2RhdGUuc2V0RGF0ZShuZXcgRGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwKSk7XG4gICAgICAgICAgICAvLyB0aGlzLmZsYXRfZW5kX2RhdGUuc2V0RGF0ZShuZXcgRGF0ZShzdGF0dXMuZXBvY2hfZW5kICogMTAwMCkpO1xuICAgICAgICAgICAgdGhpcy5mbGF0X2JlZ2luX2RhdGUuc2V0RGF0ZSh0aGlzLnV0Y19zX3RvX3NlcnZlcl9kYXRlKHN0YXR1cy5lcG9jaF9iZWdpbikpO1xuICAgICAgICAgICAgdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfZW5kKSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi1kYXRlXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImJlZ2luLXRpbWVcIiwgYmVnaW5fZGF0ZV90aW1lX3V0YywgdHJ1ZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJlbmQtZGF0ZVwiLCBlbmRfZGF0ZV90aW1lX3V0YywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLXRpbWVcIiwgZW5kX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRfc2VsZWN0X3RpbWVfdmFsdWUoYmVnaW5fZGF0ZV90aW1lX3V0YywgZW5kX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBzdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogc3RhdHVzLmVwb2NoX2VuZCB9O1xuICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZF9zdGF0dXNfaW5faGlzdG9yeSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVuYWJsZV9hcHBseSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0X3NlbGVjdF90aW1lX3ZhbHVlOiBmdW5jdGlvbiAoYmVnaW5fdXRjLCBlbmRfdXRjKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lZnJhbWVzX2RpY3QgPSB0aGlzLmdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSgpO1xuICAgICAgICAgICAgY29uc3QgdG9sZXJhbmNlID0gNjA7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG5cdCAgICBpZiAodGhpcy5yb3VuZF90aW1lID09IHRydWUgJiYgdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCAhPSBudWxsKSB7XG5cdFx0bm93ID0gdGhpcy5yb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbChub3cpXG5cdCAgICB9XG4gICAgICAgICAgICBjb25zdCBlbmRfdXRjX3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfdXRjKTtcbiAgICAgICAgICAgIGNvbnN0IGJlZ2luX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fdXRjKTtcblx0ICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihlbmRfdXRjX3MsIG5vdywgdG9sZXJhbmNlKSkge1xuXHRcdHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBudWxsO1xuXHRcdGZvciAobGV0IHRpbWVfaWQgaW4gdGltZWZyYW1lc19kaWN0KSB7XG5cdFx0ICAgIGlmICh0aGlzLmlzX2JldHdlZW4oYmVnaW5fdXRjX3MsIG5vdyAtIHRpbWVmcmFtZXNfZGljdFt0aW1lX2lkXSwgdG9sZXJhbmNlKSkge1xuXHRcdFx0dGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IHRpbWVfaWQ7XG5cdFx0ICAgIH1cblx0XHR9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlID09IHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbiA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudGx5X2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBsZXQgZGF0ZV9iZWdpbiA9IHRoaXMuJHJlZnNbXCJiZWdpbi1kYXRlXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gbGV0IGRfdGltZV9iZWdpbiA9IHRoaXMuJHJlZnNbXCJiZWdpbi10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRIb3VycyhkX3RpbWVfYmVnaW4uZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldE1pbnV0ZXMoZF90aW1lX2JlZ2luLmdldE1pbnV0ZXMoKSArIGRfdGltZV9iZWdpbi5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0U2Vjb25kcyhkX3RpbWVfYmVnaW4uZ2V0U2Vjb25kcygpKTtcblxuICAgICAgICAgICAgLy8gbGV0IGRhdGVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC1kYXRlXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gbGV0IGRfdGltZV9lbmQgPSB0aGlzLiRyZWZzW1wiZW5kLXRpbWVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRIb3VycyhkX3RpbWVfZW5kLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0TWludXRlcyhkX3RpbWVfZW5kLmdldE1pbnV0ZXMoKSArIGRfdGltZV9lbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRTZWNvbmRzKGRfdGltZV9lbmQuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIC8vIGxldCBlcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGRhdGVfYmVnaW4udmFsdWVPZigpKTtcbiAgICAgICAgICAgIC8vIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2VuZC52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgbGV0IG5vd19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZSA9IHRoaXMuc2VydmVyX2RhdGVfdG9fZGF0ZSh0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX2RhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIGxldCBlbmRfZGF0ZSA9IHRoaXMuc2VydmVyX2RhdGVfdG9fZGF0ZSh0aGlzLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX2RhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIGlmIChlcG9jaF9lbmQgPiBub3dfcykge1xuICAgICAgICAgICAgICAgIGVwb2NoX2VuZCA9IG5vd19zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHsgZXBvY2hfYmVnaW4sIGVwb2NoX2VuZCB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzZXRfZGF0ZV90aW1lOiBmdW5jdGlvbihyZWZfbmFtZSwgdXRjX3RzLCBpc190aW1lKSB7XG4gICAgICAgIC8vICAgICB1dGNfdHMgPSB0aGlzLmdldF91dGNfc2Vjb25kcyh1dGNfdHMpICogMTAwMDsgICAgICAgIFxuICAgICAgICAvLyAgICAgbGV0IGRhdGVfdGltZSA9IG5ldyBEYXRlKHV0Y190cyk7XG4gICAgICAgIC8vICAgICBkYXRlX3RpbWUuc2V0TWludXRlcyhkYXRlX3RpbWUuZ2V0TWludXRlcygpIC0gZGF0ZV90aW1lLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAvLyAgICAgaWYgKGlzX3RpbWUpIHtcbiAgICAgICAgLy8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygxMSwxNik7XG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDAsMTApO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBjaGFuZ2Vfc2VsZWN0X3RpbWU6IGZ1bmN0aW9uIChyZWZyZXNoX2RhdGEpIHtcbiAgICAgICAgICAgIGxldCBzX3ZhbHVlcyA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlKCk7XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWxfcyA9IHNfdmFsdWVzW3RoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24udmFsdWVdO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gZXBvY2hfZW5kIC0gaW50ZXJ2YWxfcztcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaF9lbmQsIHJlZnJlc2hfZGF0YSB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfdGltZWZyYW1lc19hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgIGNvbnN0IHRpbWVmcmFtZXNfZGljdCA9IG50b3BuZ191dGlsaXR5LmdldF90aW1lZnJhbWVzX2RpY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVmcmFtZXNfaWRzID0gdGhpcy50aW1lX3ByZXNldF9saXN0Lm1hcCgodHMpID0+IHRzLnZhbHVlKTtcblx0ICAgIGxldCB0aW1lZnJhbWVzX2F2YWlsYWJsZSA9IHt9O1xuXHQgICAgdGltZWZyYW1lc19pZHMuZm9yRWFjaCgodGZfaWQpID0+IHtcblx0XHR0aW1lZnJhbWVzX2F2YWlsYWJsZVt0Zl9pZF0gPSB0aW1lZnJhbWVzX2RpY3RbdGZfaWRdO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gdGltZWZyYW1lc19hdmFpbGFibGU7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF91dGNfc2Vjb25kczogZnVuY3Rpb24gKHV0Y19tcykge1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmdldF91dGNfc2Vjb25kcyh1dGNfbXMpO1xuICAgICAgICB9LFxuICAgICAgICBpc19iZXR3ZWVuOiBmdW5jdGlvbiAoeCwgeSwgdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4geCA+PSB5IC0gdG9sZXJhbmNlICYmIHggPD0geTtcbiAgICAgICAgfSxcbiAgICAgICAgem9vbTogZnVuY3Rpb24gKHNjYWxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbikgLyBzY2FsZTtcbiAgICAgICAgICAgIGxldCBjZW50ZXIgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC8gMiArIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC8gMik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IGNlbnRlciAtIGludGVydmFsIC8gMjtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IGNlbnRlciArIGludGVydmFsIC8gMjtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAtPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGp1bXBfdGltZV9iYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGp1bXBfdGltZV9haGVhZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIGxldCBwcmV2aW91c19lbmQgPSB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQ7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG5cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCArPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luICs9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBwcmV2aW91c19lbmQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVtaXRfZXBvY2hfY2hhbmdlOiBmdW5jdGlvbiAoZXBvY2hfc3RhdHVzLCBpZCwgZW1pdF9vbmx5X2dsb2JhbF9ldmVudCkge1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCB8fCBlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gbnVsbCkgeyByZXR1cm47IH07XG4gICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPiBlcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cdCAgICBpZiAodGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCAmJiB0aGlzLnJvdW5kX3RpbWUgPT0gdHJ1ZSkge1xuXHRcdGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwoZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKTtcblx0XHRlcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gdGhpcy5yb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbChlcG9jaF9zdGF0dXMuZXBvY2hfZW5kKTtcblx0ICAgIH1cblxuICAgICAgICAgICAgaWYgKGlkICE9IHRoaXMuaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uX3N0YXR1c191cGRhdGVkKGVwb2NoX3N0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgZXBvY2hfc3RhdHVzLCB0aGlzLmlkKTtcblx0ICAgIGlmIChlbWl0X29ubHlfZ2xvYmFsX2V2ZW50KSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuICAgICAgICAgICAgdGhpcy4kZW1pdChcImVwb2NoX2NoYW5nZVwiLCBlcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuXHRyb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbDogZnVuY3Rpb24odHMpIHtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZCh0cywgdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCk7XG5cdH0sXG4gICAgICAgIGFkZF9zdGF0dXNfaW5faGlzdG9yeTogZnVuY3Rpb24gKGVwb2NoX3N0YXR1cykge1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzID0gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBseV9zdGF0dXNfYnlfaGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICAgUHJpdmF0ZSBkYXRlIG9mIHZ1ZSBjb21wb25lbnQuXG4gICAgKi9cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgICAgICAvL3N0YXR1c19pZDogXCJkYXRlLXRpbWUtcmFuZ2UtcGlja2VyXCIgKyB0aGlzLiRwcm9wcy5pZCxcbiAgICAgICAgICAgIGVwb2NoX3N0YXR1czogbnVsbCxcbiAgICAgICAgICAgIHJlZnJlc2hfaW50ZXJ2YWw6IG51bGwsXG4gICAgICAgICAgICByZWZyZXNoX2ludGVydmFsX3NlY29uZHM6IDYwLFxuICAgICAgICAgICAgdXBkYXRlX2Zyb21faW50ZXJ2YWw6IGZhbHNlLFxuICAgICAgICAgICAgaGlzdG9yeTogW10sXG4gICAgICAgICAgICBoaXN0b3J5X2xhc3Rfc3RhdHVzOiBudWxsLFxuICAgICAgICAgICAgZW5hYmxlX2FwcGx5OiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdF90aW1lX3ZhbHVlOiBcIjVfbWluXCIsXG4gICAgICAgICAgICBzZWxlY3RlZF90aW1lX29wdGlvbjogeyB2YWx1ZTogXCI1X21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgd3JvbmdfZGF0ZTogZmFsc2UsXG4gICAgICAgICAgICB3cm9uZ19taW5faW50ZXJ2YWw6IGZhbHNlLFxuICAgICAgICAgICAgZmxhdF9iZWdpbl9kYXRlOiBudWxsLFxuICAgICAgICAgICAgZmxhdF9lbmRfZGF0ZTogbnVsbCxcbiAgICAgICAgICAgIHRpbWVfcHJlc2V0X2xpc3Q6IFtcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjVfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIxMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIzMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMzBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IHRydWUgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcImhvdXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuaG91cicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4yX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCI2X2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjZfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjEyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEyX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJkYXlcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuZGF5JyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJ3ZWVrXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLndlZWsnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIm1vbnRoXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLm1vbnRoJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJ5ZWFyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLnllYXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcImN1c3RvbVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5jdXN0b20nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UsIGRpc2FibGVkOiB0cnVlLCB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQ6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmRhdGVfdGltZV9pbnB1dCB7XG4gICAgd2lkdGg6IDEwLjVyZW07XG4gICAgbWF4LXdpZHRoOiAxMC41cmVtO1xuICAgIG1pbi13aWR0aDogMTAuNXJlbTtcbn1cbjwvc3R5bGU+XG4iLCJmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlSW5qZWN0O1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgQHN1Ym1pdC5wcmV2ZW50PVwicHJldmVudEVudGVyXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgcmVmPVwibW9kYWxfaWRcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbGFiZWxsZWRieT1cImR0LWFkZC1maWx0ZXItbW9kYWwtdGl0bGVcIlxuICAgICBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGdcIiByb2xlPVwiZG9jdW1lbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuXHQgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cblx0PC9oNT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNsb3NlXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cblx0PHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1yLWF1dG9cIj5cbiAgICAgICAgPC9kaXY+XG5cdDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIHRlc3QtZmVlZGJhY2sgdy0xMDBcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjbG9zZU1vZGFsXCIsIFwib3Blbk1vZGFsXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgbWUgPSB0aGlzO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwic2hvd2VkXCIpO1xuXHR9KTtcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJoaWRkZW5cIik7XG5cdH0pO1xuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJzaG93XCIpO1xuICAgICAgLy8gZW1pdCBvcGVubW9kYWwgdG8gZGlzYWJsZSB0aGUgYXV0b3JlZnJlc2ggb24gdnMgcGFnZS5cbiAgICAgIHRoaXMuJGVtaXQoXCJvcGVuTW9kYWxcIik7XG5cdH0sXG5cdHByZXZlbnRFbnRlcjogZnVuY3Rpb24oKSB7fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwiaGlkZVwiKTtcbiAgICAgIC8vIGVtaXQgY2xvc2Vtb2RhbCB0byBlbmFibGUgKGV2ZW50dWFsbHkgaWYgYXV0b3JlZnJlc2ggdmFyaWFibGUgaXMgdHJ1ZSlcbiAgICAgIC8vIHRoZSBhdXRvcmVmcmVzaCBvbiB2cyBwYWdlLlxuICAgICAgdGhpcy4kZW1pdChcImNsb3NlTW9kYWxcIik7XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiBAc3VibWl0LnByZXZlbnQ9XCJwcmV2ZW50RW50ZXJcIiBjbGFzcz1cIm1vZGFsIGZhZGVcIiByZWY9XCJtb2RhbF9pZFwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCIgYXJpYS1sYWJlbGxlZGJ5PVwiZHQtYWRkLWZpbHRlci1tb2RhbC10aXRsZVwiXG4gICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCBtb2RhbC1sZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XG5cdCAgPHNsb3QgbmFtZT1cInRpdGxlXCI+PC9zbG90PlxuXHQ8L2g1PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY2xvc2VcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1jbG9zZVwiIGRhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxuXHQ8c2xvdCBuYW1lPVwiYm9keVwiPjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibXItYXV0b1wiPlxuICAgICAgICA8L2Rpdj5cblx0PHNsb3QgbmFtZT1cImZvb3RlclwiPjwvc2xvdD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gdGVzdC1mZWVkYmFjayB3LTEwMFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImhpZGRlblwiLCBcInNob3dlZFwiLCBcImNsb3NlTW9kYWxcIiwgXCJvcGVuTW9kYWxcIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGxldCBtZSA9IHRoaXM7XG5cdCQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5vbignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJzaG93ZWRcIik7XG5cdH0pO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBtZS4kZW1pdChcImhpZGRlblwiKTtcblx0fSk7XG5cdC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcInNob3dcIik7XG4gICAgICAvLyBlbWl0IG9wZW5tb2RhbCB0byBkaXNhYmxlIHRoZSBhdXRvcmVmcmVzaCBvbiB2cyBwYWdlLlxuICAgICAgdGhpcy4kZW1pdChcIm9wZW5Nb2RhbFwiKTtcblx0fSxcblx0cHJldmVudEVudGVyOiBmdW5jdGlvbigpIHt9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJoaWRlXCIpO1xuICAgICAgLy8gZW1pdCBjbG9zZW1vZGFsIHRvIGVuYWJsZSAoZXZlbnR1YWxseSBpZiBhdXRvcmVmcmVzaCB2YXJpYWJsZSBpcyB0cnVlKVxuICAgICAgLy8gdGhlIGF1dG9yZWZyZXNoIG9uIHZzIHBhZ2UuXG4gICAgICB0aGlzLiRlbWl0KFwiY2xvc2VNb2RhbFwiKTtcblx0fSxcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIi8qXG4gKiAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4gKi9cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHJlZ2V4ZXMgPSB7XG4gICAgaXB2NDogU3RyaW5nLnJhd2BeKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkYCxcbiAgICBpcHY2OiBTdHJpbmcucmF3YF4oPzooPzpbYS1mQS1GXFxkXXsxLDR9Oil7N30oPzpbYS1mQS1GXFxkXXsxLDR9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXs2fSg/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXw6W2EtZkEtRlxcZF17MSw0fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7NX0oPzo6KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDJ9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXs0fSg/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDF9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSwzfXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7M30oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCwyfTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsNH18Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezJ9KD86KD86OlthLWZBLUZcXGRdezEsNH0pezAsM306KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDV9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXsxfSg/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDR9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw2fXw6KXwoPzo6KD86KD86OlthLWZBLUZcXGRdezEsNH0pezAsNX06KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDd9fDopKSkoPzolWzAtOWEtekEtWl17MSx9KT8kYCxcbiAgICBtYWNfYWRkcmVzczogU3RyaW5nLnJhd2BeKFswLTlBLUZhLWZdezJ9Oil7NX0oWzAtOUEtRmEtZl17Mn0pJGAsXG4gICAgY29tbWFfc2VwYXJ0ZWRfcG9ydF9yZWdleDogU3RyaW5nLnJhd2BeKFxcZHsxLDV9KSgsXFxzKlxcZHsxLDV9KSokYCxcbiAgICBwb3J0X3JhbmdlX3JlZ2V4OiBTdHJpbmcucmF3YF4oXFxkezEsNX0pLShcXGR7MSw1fSkkYCxcblx0aG9zdF9uYW1lOiBTdHJpbmcucmF3YF4oPyFcXHMqJClbYS16QS1aMC05Ll86IFxcLVxcL117MSwyNTB9fF5bYS16QS1aMC05Ll86IFxcLVxcL117MSwyNTB9QFswLTldezAsNX1gLFxuICAgIHNpbmdsZXdvcmQ6IFN0cmluZy5yYXdgXig/PVthLXpBLVowLTkuXzpcXC1dezMsMjUzfSQpKD8hLipbXy46XFwtXXsyfSlbXl8uOlxcLV0uKlteXy46XFwtXSRgLFxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgdmFsaWRhdGVJUCA9IChpcCkgPT4ge1xuICAgIHJldHVybiAodmFsaWRhdGVJUHY0KGlwKSB8fCB2YWxpZGF0ZUlQdjYoaXApKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHZhbGlkYXRlSVB2NCA9IChpcCkgPT4ge1xuICAgIGNvbnN0IGlwdjQgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuaXB2NCk7XG5cbiAgICByZXR1cm4gaXB2NC50ZXN0KGlwKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHZhbGlkYXRlSVB2NiA9IChpcCkgPT4ge1xuICAgIGNvbnN0IGlwdjYgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuaXB2Nik7XG5cbiAgICByZXR1cm4gaXB2Ni50ZXN0KGlwKTtcbn1cblxuY29uc3QgdmFsaWRhdGVIb3N0TmFtZSA9IChob3N0X25hbWUpID0+IHtcblx0Y29uc3QgaG9zdF9uYW1lX3JlZ2V4cCA9IG5ldyBSZWdFeHAocmVnZXhlcy5ob3N0X25hbWUpO1xuXG5cdHJldHVybiBob3N0X25hbWVfcmVnZXhwLnRlc3QoaG9zdF9uYW1lKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHZhbGlkYXRlQ29tbWFTZXBhcmF0ZWRQb3J0TGlzdCA9IChwb3J0cykgPT4ge1xuICAgIGNvbnN0IHBvcnRfbGlzdCA9IG5ldyBSZWdFeHAocmVnZXhlcy5jb21tYV9zZXBhcnRlZF9wb3J0X3JlZ2V4KTtcblxuICAgIHJldHVybiBwb3J0X2xpc3QudGVzdChwb3J0cyk7XG59XG5cbmNvbnN0IHZhbGlkYXRlU2luZ2xlV29yZCA9ICh3b3JkKSA9PiB7XG4gICAgY29uc3Qgc2luZ2VsV29yZFJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleGVzLnNpbmdsZXdvcmQpXG5cbiAgICByZXR1cm4gc2luZ2VsV29yZFJlZ2V4LnRlc3Qod29yZCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZVBvcnRSYW5nZSA9IChwb3J0cykgPT4ge1xuICAgIGNvbnN0IHBvcnRfYXJyYXkgPSBwb3J0cy5zcGxpdChcIi1cIiwgMik7XG4gICAgY29uc3QgbG93ID0gTnVtYmVyKHBvcnRfYXJyYXlbMF0pO1xuICAgIGNvbnN0IGhpZ2ggPSBOdW1iZXIocG9ydF9hcnJheVsxXSk7XG5cbiAgICBpZiAoKGlzTmFOKGxvdykpIHx8IChpc05hTihoaWdoKSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGlmICgobG93ID4gMCkgJiYgKGxvdyA8IGhpZ2gpICYmIChoaWdoIDwgNjU1MzYpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4vbnRvcC11dGlscy5qc1wiO1xuXG5jb25zdCBVdGlscyA9IE50b3BVdGlscztcbmZ1bmN0aW9uIGdldF9kYXRhX3BhdHRlcm4odHlwZSkge1xuICAgIGlmICh0eXBlID09IFwidGV4dFwiKSB7XG4gICAgICAgIHJldHVybiBgLipgO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcInZsYW5cIikge1xuICAgICAgICBsZXQgdmxhbiA9IFN0cmluZy5yYXdgQCgoWzEtOV0pfChbMS05XVswLTldezEsMn0pfChbMS0zXVswLTldezN9KXwoNDBbMC04XVswLTldKXwoNDA5WzAtNV0pKWA7XG4gICAgICAgIHJldHVybiB2bGFuO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImlwXCIgfHwgdHlwZSA9PSBcImNpZHJcIikge1xuICAgICAgICBsZXQgdmxhbiA9IGdldF9kYXRhX3BhdHRlcm4oXCJ2bGFuXCIpO1xuICAgICAgICBsZXQgcl9pcHY0ID0gVXRpbHMuUkVHRVhFUy5pcHY0O1xuICAgICAgICBsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZUFsbChcIiRcIiwgYCR7dmxhbn0kYCk7XG4gICAgICAgIGxldCByX2lwdjYgPSBVdGlscy5SRUdFWEVTLmlwdjY7XG4gICAgICAgIGxldCByX2lwdjZfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBgJHt2bGFufSRgKTtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJjaWRyXCIpIHtcbiAgICAgICAgICAgIGxldCBuZXR3b3JrX2lwdjQgPSBTdHJpbmcucmF3YChcXC8oKFsxLTldKXwoWzEtMl1bMC05XSl8KDNbMC0yXSkpKWA7XG4gICAgICAgICAgICBsZXQgaXB2NF9jaWRyID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIGAke25ldHdvcmtfaXB2NH0kYCk7XG4gICAgICAgICAgICBsZXQgaXB2NF9jaWRyX3ZsYW4gPSByX2lwdjQucmVwbGFjZUFsbChcIiRcIiwgYCR7bmV0d29ya19pcHY0fSR7dmxhbn0kYCk7XG4gICAgICAgICAgICBsZXQgbmV0d29ya19pcHY2ID0gU3RyaW5nLnJhd2AoXFwvKChbMS05XSl8KFsxLTldWzAtOV0pfCgxWzAtMV1bMC05XSl8KDEyWzAtOF0pKSlgO1xuICAgICAgICAgICAgbGV0IGlwdjZfY2lkciA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjZ9JGApO1xuICAgICAgICAgICAgbGV0IGlwdjZfY2lkcl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIGAke25ldHdvcmtfaXB2Nn0ke3ZsYW59JGApO1xuICAgICAgICAgICAgcmV0dXJuIGAoJHtpcHY0X2NpZHJ9fCR7aXB2NF9jaWRyX3ZsYW59fCR7aXB2Nl9jaWRyfXwke2lwdjZfY2lkcl92bGFufSlgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJtYWNcIikge1xuICAgICAgICByZXR1cm4gVXRpbHMuUkVHRVhFU1tcIm1hY0FkZHJlc3NcIl07XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiaXAsY2lkclwiKSB7XG4gICAgICAgIGxldCBpcCA9IGdldF9kYXRhX3BhdHRlcm4oXCJpcFwiKTtcbiAgICAgICAgbGV0IGNpZHIgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiY2lkclwiKTtcbiAgICAgICAgcmV0dXJuIGAoJHtpcH0pfCgke2NpZHJ9KWA7XG4gICAgfVxuICAgIHJldHVybiBVdGlscy5SRUdFWEVTW3R5cGVdO1xufVxuXG5jb25zdCByZWdleFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0X2RhdGFfcGF0dGVybixcbiAgICAgICAgdmFsaWRhdGVJUCxcbiAgICAgICAgdmFsaWRhdGVJUHY0LFxuICAgICAgICB2YWxpZGF0ZUlQdjYsXG5cdFx0dmFsaWRhdGVIb3N0TmFtZSxcbiAgICAgICAgdmFsaWRhdGVDb21tYVNlcGFyYXRlZFBvcnRMaXN0LFxuICAgICAgICB2YWxpZGF0ZVBvcnRSYW5nZSxcbiAgICAgICAgdmFsaWRhdGVTaW5nbGVXb3JkLFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJlZ2V4VmFsaWRhdGlvbjtcbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgOmlkPVwiaWRfbW9kYWxcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bignYWxlcnRzX2Rhc2hib2FyZC5hZGRfZmlsdGVyJyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8Zm9ybSBhdXRvY29tcGxldGU9XCJvZmZcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiIGZvcj1cImR0LWZpbHRlci10eXBlLXNlbGVjdFwiPlxuXHQgIDxiPkZpbHRlcjwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJmaWx0ZXJfdHlwZV9zZWxlY3RlZFwiXG4gICAgICA6aWQ9XCInZmlsdGVyX3R5cGUnXCJcbiAgICAgIDpvcHRpb25zPVwiZmlsdGVyc19vcHRpb25zXCJcbiAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2ZpbHRlcigpXCI+XG4gICAgPC9zZWxlY3Qtc2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyPlxuICAgICAgPGRpdiBjbGFzcz1cImR0LWZpbHRlci10ZW1wbGF0ZS1jb250YWluZXIgZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIj5cbiAgICAgICAgICA8Yj57e2ZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkfX08L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBtYi0zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZCBjb2wtc20tM1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wZXJhdG9yX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICA6aWQ9XCInb3BlcmF0b3JfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcGVyYXRvcnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfb3BlcmF0b3JfdHlwZVwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiIHYtaWY9XCJpbnB1dF90eXBlID09ICdzZWxlY3QnXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPVwiJ2RhdGFfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3B0aW9uc190b19zaG93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGF0YV9maWx0ZXJcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWVsc2UtaWY9XCJpbnB1dF90eXBlID09ICdzZWxlY3Qtd2l0aC1pbnB1dCdcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcHRpb25fc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9XCInZGF0YV9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmFkZF90YWc9XCJ0cnVlXCJcblx0XHRcdCAgICAgOnBhdHRlcm49XCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2RhdGFfZmlsdGVyXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJpbnB1dF92YWx1ZVwiIDpwYXR0ZXJuPVwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkXCIgbmFtZT1cInZhbHVlXCIgOnJlcXVpcmVkPVwiaW5wdXRfcmVxdWlyZWRcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO1wiIGNsYXNzPVwiYWxlcnQgaW52YWxpZC1mZWVkYmFja1wiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwhLS0gZW5kIGRpdiBpbnB1dC1ncm91cCBtYi0zIC0tPlxuXHQ8L2Rpdj5cblx0PCEtLSBlbmQgZGl2IGZvcm0tZ3JvdXAtcm93IC0tPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSAnLi9zZWxlY3Qtc2VhcmNoLnZ1ZSdcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuXHQnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICB9LCBcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRmaWx0ZXJzX29wdGlvbnM6IEFycmF5LFxuICAgIH0sXG4gICAgdXBkYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGpRdWVyeTogJCxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHQgICAgZmlsdGVyX3R5cGVfc2VsZWN0ZWQ6IHt9LFxuXHQgICAgZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQ6IG51bGwsXG5cdCAgICBvcGVyYXRvcl9zZWxlY3RlZDoge30sXG5cdCAgICBvcHRpb25fc2VsZWN0ZWQ6IHt9LFxuXHQgICAgaW5wdXRfdmFsdWU6IG51bGwsXG5cdCAgICBpbnB1dF90eXBlOiBudWxsLFxuXHQgICAgZGF0YV9wYXR0ZXJuX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgaW5wdXRfcmVxdWlyZWQ6IGZhbHNlLFxuXHQgICAgb3B0aW9uc190b19zaG93OiBudWxsLFxuXHQgICAgb3BlcmF0b3JzX3RvX3Nob3c6IFtdLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7fSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHRhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsKTtcblx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIChmaWx0ZXIpID0+IHRoaXMuc2hvdyhmaWx0ZXIpKTtcdFxuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oZmlsdGVyKSB7XG5cdCAgICBpZiAodGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zID09IG51bGwgfHwgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmxlbmd0aCA9PSAwKSB7IFxuXHRcdHJldHVybjsgXG5cdCAgICB9XG5cdCAgICBpZiAoZmlsdGVyICE9IG51bGwpIHtcblx0ICBcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSBmaWx0ZXI7XG5cdFx0dGhpcy5jaGFuZ2VfZmlsdGVyKGZpbHRlcik7XHRcdFxuXHQgICAgfSBlbHNlIHtcblx0XHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zWzBdO1xuXHRcdHRoaXMuY2hhbmdlX2ZpbHRlcigpO1xuXHQgICAgfVxuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0fSxcblx0cG9zdF9jaGFuZ2U6IGZ1bmN0aW9uKGZpbHRlciwgdmFsdWVfdHlwZSkge1xuXHQgICAgaWYgKGZpbHRlci5pZCAmJiB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMpIHtcblx0XHQvKiBGaWx0ZXIgdHlwZSBzZWxlY3RlZCwgZS5nLiBBbGVydCBUeXBlLCBBcHBsaWNhdGlvbiwgZWNjLiAqL1xuXHRcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5pZCk7XG5cdCAgICB9XG5cdCAgICBpZiAoZmlsdGVyLnZhbHVlICE9IG51bGwpIHtcblx0XHQvKiBGaWx0ZXIgc2VsZWN0ZWQgZm9yIHRoZSB0eXBlLCBlLmcuIEROUywgSUNNUCwgZWNjLiAqL1xuXHRcdGlmICh0aGlzLm9wdGlvbnNfdG9fc2hvdykge1xuXHRcdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93LmZpbmQoKGZvKSA9PiBmby52YWx1ZSA9PSBmaWx0ZXIudmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0ge307XG5cdFx0ICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBmaWx0ZXIudmFsdWU7XG5cdFx0ICAgIHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuXHRcdH1cblx0ICAgIH1cblx0ICAgIGlmIChmaWx0ZXIub3BlcmF0b3IgJiYgdGhpcy5vcGVyYXRvcnNfdG9fc2hvdykge1xuXHRcdC8qIE9wZXJhdG9yIGZpbHRlciBzZWxlY3RlZCwgZS5nLiA9LCAhPSwgZWNjLiAqL1xuXHRcdHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSB0aGlzLm9wZXJhdG9yc190b19zaG93LmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIub3BlcmF0b3IpO1xuXHQgICAgfVxuXHR9LFxuXHRjaGFuZ2Vfb3BlcmF0b3JfdHlwZTogZnVuY3Rpb24oc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZSkge1xuXHQgICAgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHNlbGVjdGVkX29wZXJhdG9yX3R5cGVcblx0fSxcblx0Y2hhbmdlX2RhdGFfZmlsdGVyOiBmdW5jdGlvbihzZWxlY3RlZF9maWx0ZXIpIHtcblx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gc2VsZWN0ZWRfZmlsdGVyXG5cdH0sICBcblx0Y2hhbmdlX2lucHV0X3ZhbHVlOiBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgdGhpcy5pbnB1dF92YWx1ZSA9IGlucHV0O1xuXHR9LFxuXHRjaGFuZ2VfZmlsdGVyOiBmdW5jdGlvbihzZWxlY3RlZF9maWx0ZXIpIHtcblx0ICAgIHRoaXMub3B0aW9uc190b19zaG93ID0gbnVsbDtcblx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gbnVsbDtcblx0ICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBudWxsXG5cdCAgICBsZXQgZmlsdGVyc19vcHRpb25zID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zO1xuXHQgICAgLyogU2VhcmNoIHRoZSBmaWx0ZXIgc2VsZWN0ZWQgKi9cblx0ICAgIGxldCBmaWx0ZXIgPSBmaWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuXHQgICAgaWYgKGZpbHRlciA9PSBudWxsKSB7IFxuXHRcdHJldHVybjsgXG5cdCAgICB9XG5cdCAgICAvKiBTZXQgdGhlIGNvcnJlY3QgZmlsdGVycyB0byBkaXNwbGF5ICovXG5cdCAgICB0aGlzLmlucHV0X3R5cGUgPSBmaWx0ZXIudHlwZTtcblx0ICAgIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cgPSBmaWx0ZXIub3BlcmF0b3JzO1xuXHQgICAgdGhpcy5maWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCA9IGZpbHRlci5sYWJlbDtcblx0ICAgIGlmICh0aGlzLmlucHV0X3R5cGUgPT0gJ3NlbGVjdCcpIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IGZpbHRlci5vcHRpb25zLnNvcnQoKGEsIGIpID0+IHtcblx0XHQgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG5cdFx0ICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG5cdFx0ICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3dbMF07XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMuaW5wdXRfdHlwZSA9PSAnc2VsZWN0LXdpdGgtaW5wdXQnKSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBmaWx0ZXIub3B0aW9ucz8uc29ydCgoYSwgYikgPT4ge1xuXHRcdCAgICBpZiAoYSA9PSBudWxsIHx8IGEubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gLTE7IH1cblx0XHQgICAgaWYgKGIgPT0gbnVsbCB8fCBiLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIDE7IH1cblx0XHQgICAgcmV0dXJuIGEubGFiZWwudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9TdHJpbmcoKSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvd1swXTtcblx0XHR0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybihmaWx0ZXIudmFsdWVfdHlwZSk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gbnVsbDtcblx0XHR0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybihmaWx0ZXIudmFsdWVfdHlwZSk7XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIGlmKGZpbHRlci5vcGVyYXRvcnMgJiYgdGhpcy5vcGVyYXRvcl9zZWxlY3RlZD8uaWQgPT0gbnVsbCkge1xuXHRcdHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBmaWx0ZXIub3BlcmF0b3JzWzBdXG5cdCAgICB9XG5cdCAgICBcblx0ICAgIGlmIChzZWxlY3RlZF9maWx0ZXIgIT0gbnVsbCkgeyBcblx0XHR0aGlzLnBvc3RfY2hhbmdlKHNlbGVjdGVkX2ZpbHRlciwgZmlsdGVyLnZhbHVlX3R5cGUpOyBcblx0ICAgIH1cblx0fSxcblx0Z2V0X2RhdGFfcGF0dGVybjogZnVuY3Rpb24odmFsdWVfdHlwZSkge1xuXHQgICAgdGhpcy5pbnB1dF9yZXF1aXJlZCA9IHRydWU7XG5cdCAgICBpZiAodmFsdWVfdHlwZSA9PSBcInRleHRcIikge1xuXHRcdHRoaXMuaW5wdXRfcmVxdWlyZWQgPSBmYWxzZTtcblx0XHRyZXR1cm4gYC4qYDtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZWdleFZhbGlkYXRpb24uZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcblx0ICAgIFxuXHQgICAgLy8gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImlwXCIpIHtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NCA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjQ7XG5cdCAgICAvLyBcdGxldCByX2lwdjRfdmxhbiA9IHJfaXB2NC5yZXBsYWNlKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NiA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjY7XG5cdCAgICAvLyBcdGxldCByX2lwdjZfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0ICAgIC8vIFx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuXHQgICAgLy8gfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiY2lkclwiKSB7XG5cdCAgICAvLyBcdGNvbnNvbGUubG9nKFwidGVzdFwiKTtcblx0ICAgIC8vIH1cblx0ICAgIFxuXHQgICAgLy8gcmV0dXJuIE50b3BVdGlscy5SRUdFWEVTW3ZhbHVlX3R5cGVdO1xuXHR9LFxuXHRjaGVja19kaXNhYmxlX2FwcGx5OiBmdW5jdGlvbigpIHtcblx0ICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAodGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQpO1xuXHQgICAgbGV0IGRpc2FibGVfYXBwbHkgPSAhdGhpcy5vcHRpb25zX3RvX3Nob3cgJiYgKFxuXHRcdCh0aGlzLmlucHV0X3JlcXVpcmVkICYmICh0aGlzLmlucHV0X3ZhbHVlID09IG51bGwgfHwgdGhpcy5pbnB1dF92YWx1ZSA9PSBcIlwiKSlcblx0XHQgICAgfHwgKHJlZ2V4LnRlc3QodGhpcy5pbnB1dF92YWx1ZSkgPT0gZmFsc2UpXG5cdCAgICApO1xuXHQgICAgcmV0dXJuIGRpc2FibGVfYXBwbHk7XG5cdH0sXG5cdGFwcGx5OiBmdW5jdGlvbigpIHtcblx0ICAgIGxldCB2YWx1ZSA9IHRoaXMuaW5wdXRfdmFsdWU7XG5cdCAgICBsZXQgdmFsdWVfbGFiZWwgPSB0aGlzLmlucHV0X3ZhbHVlO1xuXHQgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKHRoaXMub3B0aW9uX3NlbGVjdGVkPy52YWx1ZSAhPSBudWxsKSkge1xuXHRcdGxldCBmaWx0ZXIgPSB0aGlzLmZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG4gICAgICAgICAgICAgICAgXG5cdFx0bGV0IG9wdGlvbiA9IGZpbHRlci5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdGhpcy5vcHRpb25fc2VsZWN0ZWQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24gPSB0aGlzLm9wdGlvbl9zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9XG5cdFx0dmFsdWUgPSBvcHRpb24udmFsdWU7XG5cdFx0dmFsdWVfbGFiZWwgPSBvcHRpb24udmFsdWVfbGFiZWwgfHwgb3B0aW9uLmxhYmVsO1xuXHQgICAgfVxuXHQgICAgbGV0IHBhcmFtcyA9IHtcblx0XHRpZDogdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCxcblx0XHRsYWJlbDogdGhpcy5maWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZCxcblx0XHRvcGVyYXRvcjogdGhpcy5vcGVyYXRvcl9zZWxlY3RlZC5pZCxcblx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0dmFsdWVfbGFiZWw6IHZhbHVlX2xhYmVsLFxuXHQgICAgfTtcblx0ICAgIHRoaXMuJGVtaXQoXCJhcHBseVwiLCBwYXJhbXMpO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLk1PREFMX0ZJTFRFUlNfQVBQTFksIHBhcmFtcyk7XG5cdCAgICB0aGlzLmNsb3NlKCk7XG5cdH0sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHR9LFxuICAgIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0IH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmlucHV0OmludmFsaWQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ2FsZXJ0c19kYXNoYm9hcmQuYWRkX2ZpbHRlcicpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJkdC1maWx0ZXItdHlwZS1zZWxlY3RcIj5cblx0ICA8Yj5GaWx0ZXI8L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsdGVyX3R5cGVfc2VsZWN0ZWRcIlxuICAgICAgOmlkPVwiJ2ZpbHRlcl90eXBlJ1wiXG4gICAgICA6b3B0aW9ucz1cImZpbHRlcnNfb3B0aW9uc1wiXG4gICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9maWx0ZXIoKVwiPlxuICAgIDwvc2VsZWN0LXNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkdC1maWx0ZXItdGVtcGxhdGUtY29udGFpbmVyIGZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCI+XG4gICAgICAgICAgPGI+e3tmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmQgY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcGVyYXRvcl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ29wZXJhdG9yX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3BlcmF0b3JzX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX29wZXJhdG9yX3R5cGVcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0J1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2RhdGFfZmlsdGVyXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1lbHNlLWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0LXdpdGgtaW5wdXQnXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPVwiJ2RhdGFfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphZGRfdGFnPVwidHJ1ZVwiXG5cdFx0XHQgICAgIDpwYXR0ZXJuPVwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaW5wdXRfdmFsdWVcIiA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiIG5hbWU9XCJ2YWx1ZVwiIDpyZXF1aXJlZD1cImlucHV0X3JlcXVpcmVkXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtcIiBjbGFzcz1cImFsZXJ0IGludmFsaWQtZmVlZGJhY2tcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8IS0tIGVuZCBkaXYgaW5wdXQtZ3JvdXAgbWItMyAtLT5cblx0PC9kaXY+XG5cdDwhLS0gZW5kIGRpdiBmb3JtLWdyb3VwLXJvdyAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gJy4vc2VsZWN0LXNlYXJjaC52dWUnXG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcblx0J3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSwgXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0ZmlsdGVyc19vcHRpb25zOiBBcnJheSxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBqUXVlcnk6ICQsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0ICAgIGZpbHRlcl90eXBlX3NlbGVjdGVkOiB7fSxcblx0ICAgIGZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgb3BlcmF0b3Jfc2VsZWN0ZWQ6IHt9LFxuXHQgICAgb3B0aW9uX3NlbGVjdGVkOiB7fSxcblx0ICAgIGlucHV0X3ZhbHVlOiBudWxsLFxuXHQgICAgaW5wdXRfdHlwZTogbnVsbCxcblx0ICAgIGRhdGFfcGF0dGVybl9zZWxlY3RlZDogbnVsbCxcblx0ICAgIGlucHV0X3JlcXVpcmVkOiBmYWxzZSxcblx0ICAgIG9wdGlvbnNfdG9fc2hvdzogbnVsbCxcblx0ICAgIG9wZXJhdG9yc190b19zaG93OiBbXSxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge30sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0YXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbCk7XG5cdG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCAoZmlsdGVyKSA9PiB0aGlzLnNob3coZmlsdGVyKSk7XHRcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgaWYgKHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucyA9PSBudWxsIHx8IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5sZW5ndGggPT0gMCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG5cdCAgXHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gZmlsdGVyO1xuXHRcdHRoaXMuY2hhbmdlX2ZpbHRlcihmaWx0ZXIpO1x0XHRcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9uc1swXTtcblx0XHR0aGlzLmNoYW5nZV9maWx0ZXIoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHBvc3RfY2hhbmdlOiBmdW5jdGlvbihmaWx0ZXIsIHZhbHVlX3R5cGUpIHtcblx0ICAgIGlmIChmaWx0ZXIuaWQgJiYgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zKSB7XG5cdFx0LyogRmlsdGVyIHR5cGUgc2VsZWN0ZWQsIGUuZy4gQWxlcnQgVHlwZSwgQXBwbGljYXRpb24sIGVjYy4gKi9cblx0XHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIuaWQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlci52YWx1ZSAhPSBudWxsKSB7XG5cdFx0LyogRmlsdGVyIHNlbGVjdGVkIGZvciB0aGUgdHlwZSwgZS5nLiBETlMsIElDTVAsIGVjYy4gKi9cblx0XHRpZiAodGhpcy5vcHRpb25zX3RvX3Nob3cpIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHt9O1xuXHRcdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gZmlsdGVyLnZhbHVlO1xuXHRcdCAgICB0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcblx0XHR9XG5cdCAgICB9XG5cdCAgICBpZiAoZmlsdGVyLm9wZXJhdG9yICYmIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cpIHtcblx0XHQvKiBPcGVyYXRvciBmaWx0ZXIgc2VsZWN0ZWQsIGUuZy4gPSwgIT0sIGVjYy4gKi9cblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gdGhpcy5vcGVyYXRvcnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLm9wZXJhdG9yKTtcblx0ICAgIH1cblx0fSxcblx0Y2hhbmdlX29wZXJhdG9yX3R5cGU6IGZ1bmN0aW9uKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUpIHtcblx0ICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBzZWxlY3RlZF9vcGVyYXRvcl90eXBlXG5cdH0sXG5cdGNoYW5nZV9kYXRhX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHNlbGVjdGVkX2ZpbHRlclxuXHR9LCAgXG5cdGNoYW5nZV9pbnB1dF92YWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBpbnB1dDtcblx0fSxcblx0Y2hhbmdlX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IG51bGw7XG5cdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gbnVsbFxuXHQgICAgbGV0IGZpbHRlcnNfb3B0aW9ucyA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucztcblx0ICAgIC8qIFNlYXJjaCB0aGUgZmlsdGVyIHNlbGVjdGVkICovXG5cdCAgICBsZXQgZmlsdGVyID0gZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcblx0ICAgIGlmIChmaWx0ZXIgPT0gbnVsbCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgLyogU2V0IHRoZSBjb3JyZWN0IGZpbHRlcnMgdG8gZGlzcGxheSAqL1xuXHQgICAgdGhpcy5pbnB1dF90eXBlID0gZmlsdGVyLnR5cGU7XG5cdCAgICB0aGlzLm9wZXJhdG9yc190b19zaG93ID0gZmlsdGVyLm9wZXJhdG9ycztcblx0ICAgIHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQgPSBmaWx0ZXIubGFiZWw7XG5cdCAgICBpZiAodGhpcy5pbnB1dF90eXBlID09ICdzZWxlY3QnKSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBmaWx0ZXIub3B0aW9ucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcblx0XHR9KTtcblx0XHR0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLmlucHV0X3R5cGUgPT0gJ3NlbGVjdC13aXRoLWlucHV0Jykge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnM/LnNvcnQoKGEsIGIpID0+IHtcblx0XHQgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG5cdFx0ICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG5cdFx0ICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3dbMF07XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZihmaWx0ZXIub3BlcmF0b3JzICYmIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQ/LmlkID09IG51bGwpIHtcblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gZmlsdGVyLm9wZXJhdG9yc1swXVxuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZiAoc2VsZWN0ZWRfZmlsdGVyICE9IG51bGwpIHsgXG5cdFx0dGhpcy5wb3N0X2NoYW5nZShzZWxlY3RlZF9maWx0ZXIsIGZpbHRlci52YWx1ZV90eXBlKTsgXG5cdCAgICB9XG5cdH0sXG5cdGdldF9kYXRhX3BhdHRlcm46IGZ1bmN0aW9uKHZhbHVlX3R5cGUpIHtcblx0ICAgIHRoaXMuaW5wdXRfcmVxdWlyZWQgPSB0cnVlO1xuXHQgICAgaWYgKHZhbHVlX3R5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0XHR0aGlzLmlucHV0X3JlcXVpcmVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGAuKmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cdCAgICBcblx0ICAgIC8vIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJpcFwiKSB7XG5cdCAgICAvLyBcdGxldCByX2lwdjQgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY0O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZShcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdGxldCByX2lwdjYgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcblx0ICAgIC8vIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgLy8gXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG5cdCAgICAvLyB9XG5cdCAgICBcblx0ICAgIC8vIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcblx0fSxcblx0Y2hlY2tfZGlzYWJsZV9hcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkKTtcblx0ICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gIXRoaXMub3B0aW9uc190b19zaG93ICYmIChcblx0XHQodGhpcy5pbnB1dF9yZXF1aXJlZCAmJiAodGhpcy5pbnB1dF92YWx1ZSA9PSBudWxsIHx8IHRoaXMuaW5wdXRfdmFsdWUgPT0gXCJcIikpXG5cdFx0ICAgIHx8IChyZWdleC50ZXN0KHRoaXMuaW5wdXRfdmFsdWUpID09IGZhbHNlKVxuXHQgICAgKTtcblx0ICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xuXHR9LFxuXHRhcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0X3ZhbHVlO1xuXHQgICAgbGV0IHZhbHVlX2xhYmVsID0gdGhpcy5pbnB1dF92YWx1ZTtcblx0ICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh0aGlzLm9wdGlvbl9zZWxlY3RlZD8udmFsdWUgIT0gbnVsbCkpIHtcblx0XHRsZXQgZmlsdGVyID0gdGhpcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuICAgICAgICAgICAgICAgIFxuXHRcdGxldCBvcHRpb24gPSBmaWx0ZXIub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHRoaXMub3B0aW9uX3NlbGVjdGVkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gdGhpcy5vcHRpb25fc2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuXHRcdHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuXHRcdHZhbHVlX2xhYmVsID0gb3B0aW9uLnZhbHVlX2xhYmVsIHx8IG9wdGlvbi5sYWJlbDtcblx0ICAgIH1cblx0ICAgIGxldCBwYXJhbXMgPSB7XG5cdFx0aWQ6IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQsXG5cdFx0bGFiZWw6IHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQsXG5cdFx0b3BlcmF0b3I6IHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQuaWQsXG5cdFx0dmFsdWU6IHZhbHVlLFxuXHRcdHZhbHVlX2xhYmVsOiB2YWx1ZV9sYWJlbCxcblx0ICAgIH07XG5cdCAgICB0aGlzLiRlbWl0KFwiYXBwbHlcIiwgcGFyYW1zKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5NT0RBTF9GSUxURVJTX0FQUExZLCBwYXJhbXMpO1xuXHQgICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi0xXCI+XG4gICAgICAgICAgICA8bW9kYWwtZmlsdGVycyA6ZmlsdGVyc19vcHRpb25zPVwibW9kYWxfZGF0YVwiIEBhcHBseT1cImFwcGx5X21vZGFsXCIgcmVmPVwibW9kYWxfZmlsdGVyc1wiIDppZD1cImlkX21vZGFsX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZmlsdGVycz5cbiAgICAgICAgICAgIDxkYXRlLXRpbWUtcmFuZ2UtcGlja2VyIDppZD1cImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXJcIiA6bWluX3RpbWVfaW50ZXJ2YWxfaWQ9XCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiIDpyb3VuZF90aW1lPVwicm91bmRfdGltZVwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzX2FsZXJ0X3N0YXRzX3VybFwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjAuMXJlbTtcIiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIGlkPVwic3RhdHVzU3dpdGNoXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cInBhZ2UgIT0gJ2Zsb3cnXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2VuZ2FnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdlbmdhZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXCIgdGl0bGU9XCJFbmdhZ2VkXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnaGlzdG9yaWNhbCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnIHx8IChwYWdlID09ICdmbG93JyAmJiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcpLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2hpc3RvcmljYWwnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCcgfHwgKHBhZ2UgPT0gJ2Zsb3cnICYmIHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJykgfVwiPjxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS1leWVcIiB0aXRsZT1cIlJlcXVpcmUgQXR0ZW50aW9uXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhY2tub3dsZWRnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2Fja25vd2xlZGdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNoZWNrLWRvdWJsZVwiIHRpdGxlPVwiQWNrbm93bGVkZ2VkXCI+PC9pPjwvYT4tLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYW55JylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYW55JywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhbnknLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYW55JyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1pbmJveFwiIHRpdGxlPVwiQWxsXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblx0XHQgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0cmFfcmFuZ2VfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIHRhZ2lmeSAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiZC1mbGV4IG10LTFcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInctMTAwIGZvcm0tY29udHJvbCBoLWF1dG9cIiBuYW1lPVwidGFnc1wiIHJlZj1cInRhZ2lmeVwiIDpwbGFjZWhvbGRlcj1cImkxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcnMnKVwiPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBhcmlhLWNvbnRyb2xzPVwiZmxvdy1hbGVydHMtdGFibGVcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBpZD1cImJ0bi1hZGQtYWxlcnQtZmlsdGVyXCIgQGNsaWNrPVwic2hvd19tb2RhbF9maWx0ZXJzXCI+PHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsLXRpdGxlPVwiXCIgdGl0bGU9XCJBZGQgRmlsdGVyXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwie3sgaTE4bignc2hvd19hbGVydHMucmVtb3ZlX2ZpbHRlcnMnKSB9fVwiIEBjbGljaz1cInJlbW92ZV9maWx0ZXJzXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBtcy0xIG15LWF1dG8gYnRuLXNtIGJ0bi1yZW1vdmUtdGFnc1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIGVuZCB0YWdpZnkgLS0+XG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5cbmZ1bmN0aW9uIGdldF9wYWdlKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICBsZXQgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgICAgICAgICBwYWdlID0gXCJhbGxcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZ2UgPSBcIm92ZXJ2aWV3XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QoaXNfYWxlcnRfc3RhdHNfdXJsLCBwYWdlKSB7XG4gICAgbGV0IHVybF9yZXF1ZXN0O1xuICAgIGxldCBxdWVyeV9wcmVzZXQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKTtcbiAgICBpZiAocXVlcnlfcHJlc2V0ID09IG51bGwpIHsgcXVlcnlfcHJlc2V0ID0gXCJcIjsgfVxuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2FsZXJ0L2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfSZxdWVyeV9wcmVzZXQ9JHtxdWVyeV9wcmVzZXR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgYWdncmVnYXRlZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKTtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fSZhZ2dyZWdhdGVkPSR7YWdncmVnYXRlZH1gO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmxldCBGSUxURVJTX0NPTlNUID0gW107XG5sZXQgVEFHX09QRVJBVE9SUztcbmxldCBERUZJTkVEX1RBR1M7XG5jb25zdCBWSUVXX09OTFlfVEFHUyA9IHRydWU7XG4vKiBJbml0aWFsIFRhZ3MgKi9cbmxldCBpbml0aWFsVGFncztcbi8vbGV0IHBhZ2VIYW5kbGUgPSB7fTtcbmxldCBUQUdJRlk7XG5sZXQgSVNfQUxFUlRfU1RBVFNfVVJMID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG5sZXQgU1RBVFVTX1ZJRVcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbmlmIChTVEFUVVNfVklFVyA9PSBudWxsIHx8IFNUQVRVU19WSUVXID09IFwiXCIpIHtcbiAgICBTVEFUVVNfVklFVyA9IFwiaGlzdG9yaWNhbFwiO1xufVxuXG5sZXQgUEFHRSA9IGdldF9wYWdlKElTX0FMRVJUX1NUQVRTX1VSTCk7XG5cbmNvbnN0IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgbGV0IGZfY29uc3QgPSBGSUxURVJTX0NPTlNULmZpbmQoKGYpID0+IGYuaWQgPT0gZmlsdGVyLmlkKTtcbiAgICBpZiAoZl9jb25zdCA9PSBudWxsKSB7IGNvbnNvbGUuZXJyb3IoXCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyOiBmaWx0ZXIgY29uc3Qgbm90IGZvdW5kO1wiKTsgfVxuXG4gICAgbGV0IHZhbHVlX2xhYmVsID0gZmlsdGVyLnZhbHVlO1xuICAgIGlmIChmX2NvbnN0Lm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICBsZXQgb3B0ID0gZl9jb25zdC5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZV9sYWJlbCA9IG9wdC5sYWJlbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0YWcgPSB7XG4gICAgICAgIGxhYmVsOiBmX2NvbnN0LmxhYmVsLFxuICAgICAgICBrZXk6IGZfY29uc3QuaWQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZV9sYWJlbCxcbiAgICAgICAgcmVhbFZhbHVlOiBmaWx0ZXIudmFsdWUsXG4gICAgICAgIHRpdGxlOiBgJHtmX2NvbnN0LmxhYmVsfSR7ZmlsdGVyLm9wZXJhdG9yfSR7dmFsdWVfbGFiZWx9YCxcbiAgICAgICAgc2VsZWN0ZWRPcGVyYXRvcjogZmlsdGVyLm9wZXJhdG9yLFxuICAgIH07XG4gICAgaWYgKHRhZy52YWx1ZSA9PSBcIlwiKSB7IHRhZy52YWx1ZSA9IFwiJydcIiB9XG4gICAgaWYgKHRhZy5yZWFsVmFsdWUgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmNvbnN0IGxvYWRfZmlsdGVyc19kYXRhID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIEZJTFRFUlNfQ09OU1QgPSBhd2FpdCBnZXRfZmlsdGVyX2NvbnN0KElTX0FMRVJUX1NUQVRTX1VSTCwgUEFHRSk7XG4gICAgRklMVEVSU19DT05TVC5maWx0ZXIoKHgpID0+IHgubGFiZWwgPT0gbnVsbCkuZm9yRWFjaCgoeCkgPT4geyBjb25zb2xlLmVycm9yKGBsYWJlbCBub3QgZGVmaW5lZCBmb3IgZmlsdGVyICR7SlNPTi5zdHJpbmdpZnkoeCl9YCk7IHgubGFiZWwgPSBcIlwiOyB9KTtcbiAgICBGSUxURVJTX0NPTlNULnNvcnQoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7XG4gICAgaTE4bl9leHQudGFncyA9IHt9O1xuICAgIFRBR19PUEVSQVRPUlMgPSB7fTtcbiAgICBERUZJTkVEX1RBR1MgPSB7fTtcbiAgICBGSUxURVJTX0NPTlNULmZvckVhY2goKGZfZGVmKSA9PiB7XG4gICAgICAgIGkxOG5fZXh0LnRhZ3NbZl9kZWYuaWRdID0gZl9kZWYubGFiZWw7XG4gICAgICAgIGZfZGVmLm9wZXJhdG9ycy5mb3JFYWNoKChvcCkgPT4gVEFHX09QRVJBVE9SU1tvcC5pZF0gPSBvcC5sYWJlbCk7XG4gICAgICAgIERFRklORURfVEFHU1tmX2RlZi5pZF0gPSBmX2RlZi5vcGVyYXRvcnMubWFwKChvcCkgPT4gb3AuaWQpO1xuICAgIH0pO1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICBsZXQgZmlsdGVyX2RlZiA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZmMpID0+IGZjLmlkID09IGtleSk7XG4gICAgICAgIGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zX3N0cmluZyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIG9wdGlvbnNfc3RyaW5nLmZvckVhY2goKG9wdF9zdGlybmcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgW3ZhbHVlLCBvcGVyYXRvcl0gPSBvcHRfc3Rpcm5nLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCB8fCBvcGVyYXRvciA9PSBcIlwiXG4gICAgICAgICAgICAgICAgICAgIHx8IChmaWx0ZXJfZGVmLm9wdGlvbnMgIT0gbnVsbCAmJiBmaWx0ZXJfZGVmLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpID09IG51bGwpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cdFx0bGV0IHZhbHVlX2xhYmVsID0gdmFsdWU7XG5cdFx0aWYgKGZpbHRlcl9kZWYudmFsdWVfdHlwZSA9PSBcImFycmF5XCIpIHtcblx0XHQgICAgdmFsdWVfbGFiZWwgPSBmaWx0ZXJfZGVmPy5vcHRpb25zPy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSk/LmxhYmVsO1xuXHRcdH1cbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goeyBpZDogZmlsdGVyX2RlZi5pZCwgb3BlcmF0b3I6IG9wZXJhdG9yLCB2YWx1ZTogdmFsdWUsIGxhYmVsOiBmaWx0ZXJfZGVmLmxhYmVsLCB2YWx1ZV9sYWJlbCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIC8vIFwibDdwcm90bz1YWFg7ZXFcIlxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQ6IFN0cmluZyxcbiAgICAgICAgcm91bmRfdGltZTogQm9vbGVhbixcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ2RhdGUtdGltZS1yYW5nZS1waWNrZXInOiBEYXRlVGltZVJhbmdlUGlja2VyLFxuICAgICAgICAnbW9kYWwtZmlsdGVycyc6IE1vZGFsRmlsdGVycyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICAgIGxldCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcik7XG4gICAgICAgIGxldCBtb2RhbF9maWx0ZXJzX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsX2ZpbHRlcnMpO1xuICAgICAgICBhd2FpdCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZDtcblxuICAgICAgICBpZiAodGhpcy5wYWdlICE9ICdhbGwnKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IGF3YWl0IGxvYWRfZmlsdGVyc19kYXRhKCk7XG5cbiAgICAgICAgICAgIFRBR0lGWSA9IGNyZWF0ZV90YWdpZnkodGhpcyk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIChzdGF0dXMpID0+IHRoaXMucmVsb2FkX3N0YXR1cyhzdGF0dXMpLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsX2RhdGEgPSBGSUxURVJTX0NPTlNUO1xuXG4gICAgICAgIC8vYXdhaXQgbW9kYWxfZmlsdGVyc19tb3VudGVkO1xuICAgICAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpMThuOiBpMThuLFxuICAgICAgICAgICAgaWRfbW9kYWxfZmlsdGVyczogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsX2ZpbHRlcnNgLFxuICAgICAgICAgICAgaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcjogYCR7dGhpcy4kcHJvcHMuaWR9X2RhdGUtdGltZS1yYW5nZS1waWNrZXJgLFxuICAgICAgICAgICAgc2hvd19maWx0ZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRfdGFnOiBudWxsLFxuICAgICAgICAgICAgaXNfYWxlcnRfc3RhdHNfdXJsOiBJU19BTEVSVF9TVEFUU19VUkwsXG4gICAgICAgICAgICBzdGF0dXNfdmlldzogU1RBVFVTX1ZJRVcsXG4gICAgICAgICAgICBwYWdlOiBQQUdFLFxuICAgICAgICAgICAgbW9kYWxfZGF0YTogW10sXG4gICAgICAgICAgICBsYXN0X2ZpbHRlcnM6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBpc19maWx0ZXJfZGVmaW5lZDogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIERFRklORURfVEFHU1tmaWx0ZXIuaWRdICE9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZV9zdGF0dXNfdmlldzogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIHN0YXR1cyk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X21vZGFsX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9maWx0ZXJzXCJdLnNob3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbG9hZF9zdGF0dXM6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgLy8gZGVsZXRlIGFsbCBwcmV2aW91cyBmaWx0ZXJcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKEZJTFRFUlNfQ09OU1QubWFwKChmKSA9PiBmLmlkKSk7XG4gICAgICAgICAgICBUQUdJRlkudGFnaWZ5LnJlbW92ZUFsbFRhZ3MoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IGZpbHRlcnNNYW5hZ2VyLmdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG4gICAgICAgICAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGFnID0gY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcihmKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgVEFHSUZZLmFkZEZpbHRlclRhZyh0YWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RfZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5X21vZGFsOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IGZpbHRlcnMgPSBbXTsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdF90YWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcigoZikgPT4gZi5pZCAhPSB0aGlzLmVkaXRfdGFnLmtleSB8fCBmLnZhbHVlICE9IHRoaXMuZWRpdF90YWcucmVhbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRfdGFnID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbHRlcnMucHVzaChwYXJhbXMpO1xuICAgICAgICAgICAgLy8gdHJpZ2dlciBldmVudCBhbmQgdGhlbiBjYWxsIHJlbG9hZF9zdGF0dXNcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlX3RhZ2lmeShyYW5nZV9waWNrZXJfdnVlKSB7XG4gICAgLy8gY3JlYXRlIHRhZ2lmeVxuICAgIGNvbnN0IHRhZ2lmeSA9IG5ldyBUYWdpZnkocmFuZ2VfcGlja2VyX3Z1ZS4kcmVmc1tcInRhZ2lmeVwiXSwge1xuICAgICAgICBkdXBsaWNhdGVzOiB0cnVlLFxuICAgICAgICBkZWxpbWl0ZXJzOiBudWxsLFxuICAgICAgICBkcm9wZG93bjoge1xuICAgICAgICAgICAgZW5hYmxlZDogMSwgLy8gc3VnZ2VzdCB0YWdzIGFmdGVyIGEgc2luZ2xlIGNoYXJhY3RlciBpbnB1dFxuICAgICAgICAgICAgY2xhc3NuYW1lOiAnZXh0cmEtcHJvcGVydGllcycgLy8gY3VzdG9tIGNsYXNzIGZvciB0aGUgc3VnZ2VzdGlvbnMgZHJvcGRvd25cbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0NvbXBsZXRlOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgIHRlbXBsYXRlczoge1xuICAgICAgICAgICAgdGFnOiBmdW5jdGlvbiAodGFnRGF0YSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHRhZyB0aXRsZT0nJHt0YWdEYXRhLnZhbHVlfScgY29udGVudGVkaXRhYmxlPSdmYWxzZScgc3BlbGxjaGVjaz1cImZhbHNlXCIgY2xhc3M9J3RhZ2lmeV9fdGFnJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7dGFnRGF0YS5sYWJlbCA/IHRhZ0RhdGEubGFiZWwgOiB0YWdEYXRhLmtleX08L2I+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8YiBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID8gVEFHX09QRVJBVE9SU1t0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3JdIDogJz0nfTwvYj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGFnaWZ5X190YWctdGV4dCc+JHt0YWdEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RhZz5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHRhZzogJHtlcnJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0YWdEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB0YWdEYXRhLmtleSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0YWdEYXRhLnZhbHVlICE9PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gYWRkIGV4aXN0aW5nIHRhZ3NcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoaW5pdGlhbFRhZ3MpO1xuICAgIH0pOyAvKiAkKGRvY3VtZW50KS5yZWFkeSgpICovXG5cbiAgICBjb25zdCBjcmVhdGVWYWx1ZUZyb21UYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgbGV0IHZhbCA9IHRhZy5yZWFsVmFsdWUgIT0gbnVsbCA/IHRhZy5yZWFsVmFsdWUgOiB0YWcudmFsdWU7XG4gICAgICAgIGxldCB2YWx1ZSA9IGAke3ZhbH07JHt0YWcuc2VsZWN0ZWRPcGVyYXRvcn1gO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkRmlsdGVyVGFnID0gYXN5bmMgZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAvKiBDb252ZXJ0IHZhbHVlcyB0byBzdHJpbmcgKHRoaXMgYXZvaWRzIGlzc3VlcyBlLmcuIHdpdGggMCkgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcucmVhbFZhbHVlID09ICdudW1iZXInKSB7IHRhZy5yZWFsVmFsdWUgPSAnJyArIHRhZy5yZWFsVmFsdWU7IH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcudmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnZhbHVlID0gJycgKyB0YWcudmFsdWU7IH1cblxuICAgICAgICBjb25zdCBleGlzdGluZ1RhZ0VsbXMgPSB0YWdpZnkuZ2V0VGFnRWxtcygpO1xuXG4gICAgICAgIC8qIExvb2t1cCBieSBrZXksIHZhbHVlIGFuZCBvcGVyYXRvciAoZG8gbm90IGFkZCB0aGUgc2FtZSBrZXkgYW5kIHZhbHVlIG11bHRpcGxlIHRpbWVzKSAqL1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWdFbGVtZW50ID0gZXhpc3RpbmdUYWdFbG1zLmZpbmQoaHRtbFRhZyA9PlxuICAgICAgICAgICAgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ2tleScpID09PSB0YWcua2V5XG4gICAgICAgICAgICAmJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgncmVhbFZhbHVlJykgPT09IHRhZy5yZWFsVmFsdWVcbiAgICAgICAgICAgIC8vJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkT3BlcmF0b3InKSA9PT0gdGFnLnNlbGVjdGVkT3BlcmF0b3JcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnID0gdGFnaWZ5LnRhZ0RhdGEoZXhpc3RpbmdUYWdFbGVtZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhcyB0aGUgdGFnIGFuIG9wZXJhdG9yIG9iamVjdD9cbiAgICAgICAgaWYgKERFRklORURfVEFHU1t0YWcua2V5XSAmJiAhQXJyYXkuaXNBcnJheShERUZJTkVEX1RBR1NbdGFnLmtleV0pKSB7XG4gICAgICAgICAgICB0YWcub3BlcmF0b3JzID0gREVGSU5FRF9UQUdTW3RhZy5rZXldLm9wZXJhdG9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgZmlsdGVyIVxuICAgICAgICB0YWdpZnkuYWRkVGFncyhbdGFnXSk7XG4gICAgfVxuXG4gICAgLy8gd2hlbiBhbiB1c2VyIHJlbW92ZSB0aGUgdGFnXG4gICAgdGFnaWZ5Lm9uKCdyZW1vdmUnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBrZXkgPSBlLmRldGFpbC5kYXRhLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLmRldGFpbC5kYXRhLnJlYWxWYWx1ZTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzdGF0dXMuZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycy5maWx0ZXIoKGYpID0+IChmLmlkICE9IGtleSB8fCAoZi5pZCA9PSBrZXkgJiYgZi52YWx1ZSAhPSB2YWx1ZSkpKTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgIH0pO1xuXG4gICAgdGFnaWZ5Lm9uKCdhZGQnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1xuICAgICAgICAvLyBsZXQncyBjaGVjayBpZiB0aGUgdGFnIGhhcyBhIGtleSBmaWVsZFxuICAgICAgICBpZiAoIXRhZy5rZXkpIHtcbiAgICAgICAgICAgIHRhZ2lmeS5yZW1vdmVUYWdzKFtlLmRldGFpbC50YWddKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRhZyAnY2xpY2snIGV2ZW50IGhhbmRsZXIgdG8gb3BlbiB0aGUgJ0VkaXQnIG1vZGFsLiBOb3RlOiB0aGlzIHByZXZlbnRzXG4gICAgLy8gaW5saW5lIGVkaXRpbmcgb2YgdGhlIHRhZyAoJ2VkaXQ6dXBkYXRlZCcgaXMgbmV2ZXIgY2FsbGVkIGFzIGEgY29uc2VxdWVuY2UpXG4gICAgdGFnaWZ5Lm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGRldGFpbC5kYXRhLmtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcbiAgICAgICAgLy8gcmVtZW1iZXIgdGhhdCB0aGlzIHRhZyBhbHJlYWR5IGV4aXh0c1xuICAgICAgICByYW5nZV9waWNrZXJfdnVlLmVkaXRfdGFnID0gdGFnO1xuICAgICAgICAvLyBzaG93IG1vZGFsLWZpbHRlcnNcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgeyBpZDogdGFnLmtleSwgb3BlcmF0b3I6IHRhZy5zZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogdGFnLnJlYWxWYWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIHRhZ2lmeS5vbignZWRpdDp1cGRhdGVkJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVVBEQVRFRFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0pO1xuXG4gICAgJChgdGFnc2ApLm9uKCdjaGFuZ2UnLCAnc2VsZWN0Lm9wZXJhdG9yJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVEFHUyBjaGFuZ2VcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdpZnksXG4gICAgICAgIGFkZEZpbHRlclRhZyxcbiAgICB9O1xufVxuPC9zY3JpcHQ+XG5cblxuPHN0eWxlIHNjb3BlZD5cbi50YWdpZnlfX2lucHV0IHtcbiAgICBtaW4td2lkdGg6IDE3NXB4O1xufVxuXG4udGFnaWZ5X190YWcge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgbWFyZ2luOiAzcHggMHB4IDVweCA1cHg7XG59XG5cbi50YWdpZnlfX3RhZyBzZWxlY3Qub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLnRhZ2lmeV9fdGFnIGIub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBwYWRkaW5nOiAwLjA1ZW0gMC4yZW07XG59XG5cbi50YWdpZnlfX3RhZz5kaXYge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTFcIj5cbiAgICAgICAgICAgIDxtb2RhbC1maWx0ZXJzIDpmaWx0ZXJzX29wdGlvbnM9XCJtb2RhbF9kYXRhXCIgQGFwcGx5PVwiYXBwbHlfbW9kYWxcIiByZWY9XCJtb2RhbF9maWx0ZXJzXCIgOmlkPVwiaWRfbW9kYWxfZmlsdGVyc1wiPlxuICAgICAgICAgICAgPC9tb2RhbC1maWx0ZXJzPlxuICAgICAgICAgICAgPGRhdGUtdGltZS1yYW5nZS1waWNrZXIgOmlkPVwiaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlclwiIDptaW5fdGltZV9pbnRlcnZhbF9pZD1cIm1pbl90aW1lX2ludGVydmFsX2lkXCIgOnJvdW5kX3RpbWU9XCJyb3VuZF90aW1lXCI+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiaXNfYWxlcnRfc3RhdHNfdXJsXCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6MC4xcmVtO1wiIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtZS0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwXCIgaWQ9XCJzdGF0dXNTd2l0Y2hcIiByb2xlPVwiZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWlmPVwicGFnZSAhPSAnZmxvdydcIiBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnZW5nYWdlZCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2VuZ2FnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcgfVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcIiB0aXRsZT1cIkVuZ2FnZWRcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdoaXN0b3JpY2FsJylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCcgfHwgKHBhZ2UgPT0gJ2Zsb3cnICYmIHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJyksICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnaGlzdG9yaWNhbCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdoaXN0b3JpY2FsJyB8fCAocGFnZSA9PSAnZmxvdycgJiYgc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnKSB9XCI+PGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLWV5ZVwiIHRpdGxlPVwiUmVxdWlyZSBBdHRlbnRpb25cIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2Fja25vd2xlZGdlZCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2Fja25vd2xlZGdlZCcgfVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2hlY2stZG91YmxlXCIgdGl0bGU9XCJBY2tub3dsZWRnZWRcIj48L2k+PC9hPi0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhbnknKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdhbnknLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2FueScsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdhbnknIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWluYm94XCIgdGl0bGU9XCJBbGxcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXHRcdCAgICA8c2xvdCBuYW1lPVwiYmVnaW5cIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJleHRyYV9yYW5nZV9idXR0b25zXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2RhdGUtdGltZS1yYW5nZS1waWNrZXI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwhLS0gdGFnaWZ5IC0tPlxuICAgICAgICA8ZGl2IHYtaWY9XCJwYWdlICE9ICdhbGwnXCIgY2xhc3M9XCJkLWZsZXggbXQtMVwiIHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwidy0xMDAgZm9ybS1jb250cm9sIGgtYXV0b1wiIG5hbWU9XCJ0YWdzXCIgcmVmPVwidGFnaWZ5XCIgOnBsYWNlaG9sZGVyPVwiaTE4bignc2hvd19hbGVydHMuZmlsdGVycycpXCI+XG5cbiAgICAgICAgICAgIDxidXR0b24gdi1zaG93PVwibW9kYWxfZGF0YSAmJiBtb2RhbF9kYXRhLmxlbmd0aCA+IDBcIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIGFyaWEtY29udHJvbHM9XCJmbG93LWFsZXJ0cy10YWJsZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGlkPVwiYnRuLWFkZC1hbGVydC1maWx0ZXJcIiBAY2xpY2s9XCJzaG93X21vZGFsX2ZpbHRlcnNcIj48c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1wbHVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtb3JpZ2luYWwtdGl0bGU9XCJcIiB0aXRsZT1cIkFkZCBGaWx0ZXJcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gdi1zaG93PVwibW9kYWxfZGF0YSAmJiBtb2RhbF9kYXRhLmxlbmd0aCA+IDBcIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJ7eyBpMThuKCdzaG93X2FsZXJ0cy5yZW1vdmVfZmlsdGVycycpIH19XCIgQGNsaWNrPVwicmVtb3ZlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIG1zLTEgbXktYXV0byBidG4tc20gYnRuLXJlbW92ZS10YWdzXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwhLS0gZW5kIHRhZ2lmeSAtLT5cblxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEZpbHRlcnMgfSBmcm9tIFwiLi9tb2RhbC1maWx0ZXJzLnZ1ZVwiO1xuaW1wb3J0IGZpbHRlcnNNYW5hZ2VyIGZyb20gXCIuLi91dGlsaXRpZXMvZmlsdGVycy1tYW5hZ2VyLmpzXCI7XG5cblxuZnVuY3Rpb24gZ2V0X3BhZ2UoYWxlcnRfc3RhdHNfcGFnZSkge1xuICAgIGxldCBwYWdlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpO1xuICAgIGlmIChwYWdlID09IG51bGwpIHtcbiAgICAgICAgaWYgKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICAgICAgICAgIHBhZ2UgPSBcImFsbFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFnZSA9IFwib3ZlcnZpZXdcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFnZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X2ZpbHRlcl9jb25zdChpc19hbGVydF9zdGF0c191cmwsIHBhZ2UpIHtcbiAgICBsZXQgdXJsX3JlcXVlc3Q7XG4gICAgbGV0IHF1ZXJ5X3ByZXNldCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicXVlcnlfcHJlc2V0XCIpO1xuICAgIGlmIChxdWVyeV9wcmVzZXQgPT0gbnVsbCkgeyBxdWVyeV9wcmVzZXQgPSBcIlwiOyB9XG4gICAgaWYgKGlzX2FsZXJ0X3N0YXRzX3VybCkge1xuICAgICAgICB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvYWxlcnQvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9JnF1ZXJ5X3ByZXNldD0ke3F1ZXJ5X3ByZXNldH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBhZ2dyZWdhdGVkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJhZ2dyZWdhdGVkXCIpO1xuICAgICAgICB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfSZxdWVyeV9wcmVzZXQ9JHtxdWVyeV9wcmVzZXR9JmFnZ3JlZ2F0ZWQ9JHthZ2dyZWdhdGVkfWA7XG4gICAgfVxuICAgIGxldCBmaWx0ZXJfY29uc3RzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICByZXR1cm4gZmlsdGVyX2NvbnN0cztcbn1cblxubGV0IEZJTFRFUlNfQ09OU1QgPSBbXTtcbmxldCBUQUdfT1BFUkFUT1JTO1xubGV0IERFRklORURfVEFHUztcbmNvbnN0IFZJRVdfT05MWV9UQUdTID0gdHJ1ZTtcbi8qIEluaXRpYWwgVGFncyAqL1xubGV0IGluaXRpYWxUYWdzO1xuLy9sZXQgcGFnZUhhbmRsZSA9IHt9O1xubGV0IFRBR0lGWTtcbmxldCBJU19BTEVSVF9TVEFUU19VUkwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKS5tYXRjaCgvYWxlcnRfc3RhdHMubHVhLykgIT0gbnVsbDtcbmxldCBTVEFUVVNfVklFVyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpO1xuaWYgKFNUQVRVU19WSUVXID09IG51bGwgfHwgU1RBVFVTX1ZJRVcgPT0gXCJcIikge1xuICAgIFNUQVRVU19WSUVXID0gXCJoaXN0b3JpY2FsXCI7XG59XG5cbmxldCBQQUdFID0gZ2V0X3BhZ2UoSVNfQUxFUlRfU1RBVFNfVVJMKTtcblxuY29uc3QgY3JlYXRlX3RhZ19mcm9tX2ZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICBsZXQgZl9jb25zdCA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZikgPT4gZi5pZCA9PSBmaWx0ZXIuaWQpO1xuICAgIGlmIChmX2NvbnN0ID09IG51bGwpIHsgY29uc29sZS5lcnJvcihcImNyZWF0ZV90YWdfZnJvbV9maWx0ZXI6IGZpbHRlciBjb25zdCBub3QgZm91bmQ7XCIpOyB9XG5cbiAgICBsZXQgdmFsdWVfbGFiZWwgPSBmaWx0ZXIudmFsdWU7XG4gICAgaWYgKGZfY29uc3Qub3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgIGxldCBvcHQgPSBmX2NvbnN0Lm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSBmaWx0ZXIudmFsdWUpO1xuICAgICAgICBpZiAob3B0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlX2xhYmVsID0gb3B0LmxhYmVsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IHtcbiAgICAgICAgbGFiZWw6IGZfY29uc3QubGFiZWwsXG4gICAgICAgIGtleTogZl9jb25zdC5pZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlX2xhYmVsLFxuICAgICAgICByZWFsVmFsdWU6IGZpbHRlci52YWx1ZSxcbiAgICAgICAgdGl0bGU6IGAke2ZfY29uc3QubGFiZWx9JHtmaWx0ZXIub3BlcmF0b3J9JHt2YWx1ZV9sYWJlbH1gLFxuICAgICAgICBzZWxlY3RlZE9wZXJhdG9yOiBmaWx0ZXIub3BlcmF0b3IsXG4gICAgfTtcbiAgICBpZiAodGFnLnZhbHVlID09IFwiXCIpIHsgdGFnLnZhbHVlID0gXCInJ1wiIH1cbiAgICBpZiAodGFnLnJlYWxWYWx1ZSA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gXCJcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn1cblxuY29uc3QgbG9hZF9maWx0ZXJzX2RhdGEgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgRklMVEVSU19DT05TVCA9IGF3YWl0IGdldF9maWx0ZXJfY29uc3QoSVNfQUxFUlRfU1RBVFNfVVJMLCBQQUdFKTtcbiAgICBGSUxURVJTX0NPTlNULmZpbHRlcigoeCkgPT4geC5sYWJlbCA9PSBudWxsKS5mb3JFYWNoKCh4KSA9PiB7IGNvbnNvbGUuZXJyb3IoYGxhYmVsIG5vdCBkZWZpbmVkIGZvciBmaWx0ZXIgJHtKU09OLnN0cmluZ2lmeSh4KX1gKTsgeC5sYWJlbCA9IFwiXCI7IH0pO1xuICAgIEZJTFRFUlNfQ09OU1Quc29ydCgoYSwgYikgPT4gYS5sYWJlbC5sb2NhbGVDb21wYXJlKGIubGFiZWwpKTtcbiAgICBpMThuX2V4dC50YWdzID0ge307XG4gICAgVEFHX09QRVJBVE9SUyA9IHt9O1xuICAgIERFRklORURfVEFHUyA9IHt9O1xuICAgIEZJTFRFUlNfQ09OU1QuZm9yRWFjaCgoZl9kZWYpID0+IHtcbiAgICAgICAgaTE4bl9leHQudGFnc1tmX2RlZi5pZF0gPSBmX2RlZi5sYWJlbDtcbiAgICAgICAgZl9kZWYub3BlcmF0b3JzLmZvckVhY2goKG9wKSA9PiBUQUdfT1BFUkFUT1JTW29wLmlkXSA9IG9wLmxhYmVsKTtcbiAgICAgICAgREVGSU5FRF9UQUdTW2ZfZGVmLmlkXSA9IGZfZGVmLm9wZXJhdG9ycy5tYXAoKG9wKSA9PiBvcC5pZCk7XG4gICAgfSk7XG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgbGV0IGZpbHRlcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGxldCBmaWx0ZXJfZGVmID0gRklMVEVSU19DT05TVC5maW5kKChmYykgPT4gZmMuaWQgPT0ga2V5KTtcbiAgICAgICAgaWYgKGZpbHRlcl9kZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG9wdGlvbnNfc3RyaW5nID0gdmFsdWUuc3BsaXQoXCIsXCIpO1xuICAgICAgICAgICAgb3B0aW9uc19zdHJpbmcuZm9yRWFjaCgob3B0X3N0aXJuZykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBbdmFsdWUsIG9wZXJhdG9yXSA9IG9wdF9zdGlybmcuc3BsaXQoXCI7XCIpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsIHx8IG9wZXJhdG9yID09IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGZpbHRlcl9kZWYub3B0aW9ucyAhPSBudWxsICYmIGZpbHRlcl9kZWYub3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSkgPT0gbnVsbClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblx0XHRsZXQgdmFsdWVfbGFiZWwgPSB2YWx1ZTtcblx0XHRpZiAoZmlsdGVyX2RlZi52YWx1ZV90eXBlID09IFwiYXJyYXlcIikge1xuXHRcdCAgICB2YWx1ZV9sYWJlbCA9IGZpbHRlcl9kZWY/Lm9wdGlvbnM/LmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKT8ubGFiZWw7XG5cdFx0fVxuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7IGlkOiBmaWx0ZXJfZGVmLmlkLCBvcGVyYXRvcjogb3BlcmF0b3IsIHZhbHVlOiB2YWx1ZSwgbGFiZWw6IGZpbHRlcl9kZWYubGFiZWwsIHZhbHVlX2xhYmVsIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgLy8gXCJsN3Byb3RvPVhYWDtlcVwiXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZDogU3RyaW5nLFxuICAgICAgICByb3VuZF90aW1lOiBCb29sZWFuLFxuICAgIH0sXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICAnZGF0ZS10aW1lLXJhbmdlLXBpY2tlcic6IERhdGVUaW1lUmFuZ2VQaWNrZXIsXG4gICAgICAgICdtb2RhbC1maWx0ZXJzJzogTW9kYWxGaWx0ZXJzLFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcbiAgICAgICAgbGV0IGR0X3JhbmdlX3BpY2tlcl9tb3VudGVkID0gbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyKTtcbiAgICAgICAgbGV0IG1vZGFsX2ZpbHRlcnNfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWxfZmlsdGVycyk7XG4gICAgICAgIGF3YWl0IGR0X3JhbmdlX3BpY2tlcl9tb3VudGVkO1xuXG4gICAgICAgIGlmICh0aGlzLnBhZ2UgIT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gYXdhaXQgbG9hZF9maWx0ZXJzX2RhdGEoKTtcblxuICAgICAgICAgICAgVEFHSUZZID0gY3JlYXRlX3RhZ2lmeSh0aGlzKTtcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgKHN0YXR1cykgPT4gdGhpcy5yZWxvYWRfc3RhdHVzKHN0YXR1cyksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kYWxfZGF0YSA9IEZJTFRFUlNfQ09OU1Q7XG5cbiAgICAgICAgLy9hd2FpdCBtb2RhbF9maWx0ZXJzX21vdW50ZWQ7XG4gICAgICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGkxOG46IGkxOG4sXG4gICAgICAgICAgICBpZF9tb2RhbF9maWx0ZXJzOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxfZmlsdGVyc2AsXG4gICAgICAgICAgICBpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyOiBgJHt0aGlzLiRwcm9wcy5pZH1fZGF0ZS10aW1lLXJhbmdlLXBpY2tlcmAsXG4gICAgICAgICAgICBzaG93X2ZpbHRlcnM6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdF90YWc6IG51bGwsXG4gICAgICAgICAgICBpc19hbGVydF9zdGF0c191cmw6IElTX0FMRVJUX1NUQVRTX1VSTCxcbiAgICAgICAgICAgIHN0YXR1c192aWV3OiBTVEFUVVNfVklFVyxcbiAgICAgICAgICAgIHBhZ2U6IFBBR0UsXG4gICAgICAgICAgICBtb2RhbF9kYXRhOiBbXSxcbiAgICAgICAgICAgIGxhc3RfZmlsdGVyczogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGlzX2ZpbHRlcl9kZWZpbmVkOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gREVGSU5FRF9UQUdTW2ZpbHRlci5pZF0gIT0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlX3N0YXR1c192aWV3OiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJzdGF0dXNcIiwgc3RhdHVzKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dfbW9kYWxfZmlsdGVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2ZpbHRlcnNcIl0uc2hvdygpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVfZmlsdGVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBbXTtcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsb2FkX3N0YXR1czogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICAgICAgICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAvLyBkZWxldGUgYWxsIHByZXZpb3VzIGZpbHRlclxuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoRklMVEVSU19DT05TVC5tYXAoKGYpID0+IGYuaWQpKTtcbiAgICAgICAgICAgIFRBR0lGWS50YWdpZnkucmVtb3ZlQWxsVGFncygpO1xuICAgICAgICAgICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0gZmlsdGVyc01hbmFnZXIuZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpO1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKGZpbHRlcnNfb2JqZWN0KTtcbiAgICAgICAgICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0YWcgPSBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyKGYpO1xuICAgICAgICAgICAgICAgIGlmICh0YWcgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICBUQUdJRlkuYWRkRmlsdGVyVGFnKHRhZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGFzdF9maWx0ZXJzID0gZmlsdGVycztcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHlfbW9kYWw6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICAgICAgICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgZmlsdGVycyA9IFtdOyB9XG4gICAgICAgICAgICBpZiAodGhpcy5lZGl0X3RhZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVycyA9IGZpbHRlcnMuZmlsdGVyKChmKSA9PiBmLmlkICE9IHRoaXMuZWRpdF90YWcua2V5IHx8IGYudmFsdWUgIT0gdGhpcy5lZGl0X3RhZy5yZWFsVmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdF90YWcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVycy5wdXNoKHBhcmFtcyk7XG4gICAgICAgICAgICAvLyB0cmlnZ2VyIGV2ZW50IGFuZCB0aGVuIGNhbGwgcmVsb2FkX3N0YXR1c1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVfdGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUpIHtcbiAgICAvLyBjcmVhdGUgdGFnaWZ5XG4gICAgY29uc3QgdGFnaWZ5ID0gbmV3IFRhZ2lmeShyYW5nZV9waWNrZXJfdnVlLiRyZWZzW1widGFnaWZ5XCJdLCB7XG4gICAgICAgIGR1cGxpY2F0ZXM6IHRydWUsXG4gICAgICAgIGRlbGltaXRlcnM6IG51bGwsXG4gICAgICAgIGRyb3Bkb3duOiB7XG4gICAgICAgICAgICBlbmFibGVkOiAxLCAvLyBzdWdnZXN0IHRhZ3MgYWZ0ZXIgYSBzaW5nbGUgY2hhcmFjdGVyIGlucHV0XG4gICAgICAgICAgICBjbGFzc25hbWU6ICdleHRyYS1wcm9wZXJ0aWVzJyAvLyBjdXN0b20gY2xhc3MgZm9yIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93blxuICAgICAgICB9LFxuICAgICAgICBhdXRvQ29tcGxldGU6IHsgZW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgdGVtcGxhdGVzOiB7XG4gICAgICAgICAgICB0YWc6IGZ1bmN0aW9uICh0YWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8dGFnIHRpdGxlPScke3RhZ0RhdGEudmFsdWV9JyBjb250ZW50ZWRpdGFibGU9J2ZhbHNlJyBzcGVsbGNoZWNrPVwiZmFsc2VcIiBjbGFzcz0ndGFnaWZ5X190YWcnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHggdGl0bGU9J3JlbW92ZSB0YWcnIGNsYXNzPSd0YWdpZnlfX3RhZ19fcmVtb3ZlQnRuJz48L3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt0YWdEYXRhLmxhYmVsID8gdGFnRGF0YS5sYWJlbCA6IHRhZ0RhdGEua2V5fTwvYj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiIGNsYXNzPSdvcGVyYXRvcic+JHt0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgPyBUQUdfT1BFUkFUT1JTW3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvcl0gOiAnPSd9PC9iPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0YWdpZnlfX3RhZy10ZXh0Jz4ke3RhZ0RhdGEudmFsdWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvdGFnPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgdGFnOiAke2Vycn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKHRhZ0RhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHRhZ0RhdGEua2V5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRhZ0RhdGEudmFsdWUgIT09ICd1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhZGQgZXhpc3RpbmcgdGFnc1xuICAgICAgICB0YWdpZnkuYWRkVGFncyhpbml0aWFsVGFncyk7XG4gICAgfSk7IC8qICQoZG9jdW1lbnQpLnJlYWR5KCkgKi9cblxuICAgIGNvbnN0IGNyZWF0ZVZhbHVlRnJvbVRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgaWYgKCF0YWcuc2VsZWN0ZWRPcGVyYXRvcikgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPSAnZXEnO1xuICAgICAgICBsZXQgdmFsID0gdGFnLnJlYWxWYWx1ZSAhPSBudWxsID8gdGFnLnJlYWxWYWx1ZSA6IHRhZy52YWx1ZTtcbiAgICAgICAgbGV0IHZhbHVlID0gYCR7dmFsfTske3RhZy5zZWxlY3RlZE9wZXJhdG9yfWA7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRGaWx0ZXJUYWcgPSBhc3luYyBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIC8qIENvbnZlcnQgdmFsdWVzIHRvIHN0cmluZyAodGhpcyBhdm9pZHMgaXNzdWVzIGUuZy4gd2l0aCAwKSAqL1xuICAgICAgICBpZiAodHlwZW9mIHRhZy5yZWFsVmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnJlYWxWYWx1ZSA9ICcnICsgdGFnLnJlYWxWYWx1ZTsgfVxuICAgICAgICBpZiAodHlwZW9mIHRhZy52YWx1ZSA9PSAnbnVtYmVyJykgeyB0YWcudmFsdWUgPSAnJyArIHRhZy52YWx1ZTsgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFnRWxtcyA9IHRhZ2lmeS5nZXRUYWdFbG1zKCk7XG5cbiAgICAgICAgLyogTG9va3VwIGJ5IGtleSwgdmFsdWUgYW5kIG9wZXJhdG9yIChkbyBub3QgYWRkIHRoZSBzYW1lIGtleSBhbmQgdmFsdWUgbXVsdGlwbGUgdGltZXMpICovXG4gICAgICAgIGxldCBleGlzdGluZ1RhZ0VsZW1lbnQgPSBleGlzdGluZ1RhZ0VsbXMuZmluZChodG1sVGFnID0+XG4gICAgICAgICAgICBodG1sVGFnLmdldEF0dHJpYnV0ZSgna2V5JykgPT09IHRhZy5rZXlcbiAgICAgICAgICAgICYmIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdyZWFsVmFsdWUnKSA9PT0gdGFnLnJlYWxWYWx1ZVxuICAgICAgICAgICAgLy8mJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgnc2VsZWN0ZWRPcGVyYXRvcicpID09PSB0YWcuc2VsZWN0ZWRPcGVyYXRvclxuICAgICAgICApO1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWcgPSB0YWdpZnkudGFnRGF0YShleGlzdGluZ1RhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmdUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFzIHRoZSB0YWcgYW4gb3BlcmF0b3Igb2JqZWN0P1xuICAgICAgICBpZiAoREVGSU5FRF9UQUdTW3RhZy5rZXldICYmICFBcnJheS5pc0FycmF5KERFRklORURfVEFHU1t0YWcua2V5XSkpIHtcbiAgICAgICAgICAgIHRhZy5vcGVyYXRvcnMgPSBERUZJTkVEX1RBR1NbdGFnLmtleV0ub3BlcmF0b3JzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0YWcuc2VsZWN0ZWRPcGVyYXRvcikge1xuICAgICAgICAgICAgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPSAnZXEnO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCBmaWx0ZXIhXG4gICAgICAgIHRhZ2lmeS5hZGRUYWdzKFt0YWddKTtcbiAgICB9XG5cbiAgICAvLyB3aGVuIGFuIHVzZXIgcmVtb3ZlIHRoZSB0YWdcbiAgICB0YWdpZnkub24oJ3JlbW92ZScsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGUuZGV0YWlsLmRhdGEua2V5O1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGUuZGV0YWlsLmRhdGEucmVhbFZhbHVlO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHN0YXR1cy5maWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgY29uc3QgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzLmZpbHRlcigoZikgPT4gKGYuaWQgIT0ga2V5IHx8IChmLmlkID09IGtleSAmJiBmLnZhbHVlICE9IHZhbHVlKSkpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgfSk7XG5cbiAgICB0YWdpZnkub24oJ2FkZCcsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XG4gICAgICAgIC8vIGxldCdzIGNoZWNrIGlmIHRoZSB0YWcgaGFzIGEga2V5IGZpZWxkXG4gICAgICAgIGlmICghdGFnLmtleSkge1xuICAgICAgICAgICAgdGFnaWZ5LnJlbW92ZVRhZ3MoW2UuZGV0YWlsLnRhZ10pO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVGFnICdjbGljaycgZXZlbnQgaGFuZGxlciB0byBvcGVuIHRoZSAnRWRpdCcgbW9kYWwuIE5vdGU6IHRoaXMgcHJldmVudHNcbiAgICAvLyBpbmxpbmUgZWRpdGluZyBvZiB0aGUgdGFnICgnZWRpdDp1cGRhdGVkJyBpcyBuZXZlciBjYWxsZWQgYXMgYSBjb25zZXF1ZW5jZSlcbiAgICB0YWdpZnkub24oJ2NsaWNrJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoZGV0YWlsLmRhdGEua2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1xuICAgICAgICAvLyByZW1lbWJlciB0aGF0IHRoaXMgdGFnIGFscmVhZHkgZXhpeHRzXG4gICAgICAgIHJhbmdlX3BpY2tlcl92dWUuZWRpdF90YWcgPSB0YWc7XG4gICAgICAgIC8vIHNob3cgbW9kYWwtZmlsdGVyc1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCB7IGlkOiB0YWcua2V5LCBvcGVyYXRvcjogdGFnLnNlbGVjdGVkT3BlcmF0b3IsIHZhbHVlOiB0YWcucmVhbFZhbHVlIH0pO1xuICAgIH0pO1xuXG4gICAgdGFnaWZ5Lm9uKCdlZGl0OnVwZGF0ZWQnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJVUERBVEVEXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfSk7XG5cbiAgICAkKGB0YWdzYCkub24oJ2NoYW5nZScsICdzZWxlY3Qub3BlcmF0b3InLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUQUdTIGNoYW5nZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhZ2lmeSxcbiAgICAgICAgYWRkRmlsdGVyVGFnLFxuICAgIH07XG59XG48L3NjcmlwdD5cblxuXG48c3R5bGUgc2NvcGVkPlxuLnRhZ2lmeV9faW5wdXQge1xuICAgIG1pbi13aWR0aDogMTc1cHg7XG59XG5cbi50YWdpZnlfX3RhZyB7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBtYXJnaW46IDNweCAwcHggNXB4IDVweDtcbn1cblxuLnRhZ2lmeV9fdGFnIHNlbGVjdC5vcGVyYXRvciB7XG4gICAgbWFyZ2luOiAwcHggNHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuXG4udGFnaWZ5X190YWcgYi5vcGVyYXRvciB7XG4gICAgbWFyZ2luOiAwcHggNHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjNGM0YzQ7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIHBhZGRpbmc6IDAuMDVlbSAwLjJlbTtcbn1cblxuLnRhZ2lmeV9fdGFnPmRpdiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG5cbjwhLS0gUGVyUGFnZSAtLT5cbjxkaXYgY2xhc3M9XCJyb3dcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0Oi0ycHg7bWFyZ2luLXJpZ2h0Oi0ycHg7bWFyZ2luLXRvcDoxcmVtO21hcmdpbi1ib3R0b206LTFyZW07XCI+XG4gIDwhLS0gZGl2IGNvbC1tZC01IC0tPlxuICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyIGNvbC1tZC01XCI+XG4gICAgPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfaW5mb1wiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWxpdmU9XCJwb2xpdGVcIj57e3RleHR9fVxuICAgIDwvZGl2PlxuICA8L2Rpdj4gPCEtLSBkaXYgY29sLW1kLTUgLS0+XG4gIFxuICA8IS0tIHN0YXJ0IGRpdiBjb2wtc20tMTIgLS0+XG4gIDxkaXYgdi1zaG93PVwidG90YWxfcGFnZXMgPiAwXCIgY2xhc3M9XCJjb2wtc20tMTIgY29sLW1kLTdcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfc2ltcGxlX251bWJlcnNcIiBzdHlsZT1cImRpc3BsYXk6ZmxleDsganVzdGlmeS1jb250ZW50OmZsZXgtZW5kO1wiPlxuICAgICAgPHVsIGNsYXNzPVwicGFnaW5hdGlvblwiPlxuXHQ8bGkgdi1zaG93PVwiZW5hYmxlX2ZpcnN0X3BhZ2VcIiBjbGFzcz1cInBhZ2luYXRlX2J1dHRvbiBwYWdlLWl0ZW0gcHJldmlvdXNcIj5cblx0ICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiIEBjbGljaz1cImNoYW5nZV9hY3RpdmVfcGFnZSgwLCAwKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiMFwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICDCq1xuXHQgIDwvYT5cblx0PC9saT5cblx0PGxpIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbSBwcmV2aW91c1wiIDpjbGFzcz1cInsgJ2Rpc2FibGVkJzogYWN0aXZlX3BhZ2UgPT0gMH1cIj5cblx0ICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiIEBjbGljaz1cImJhY2tfcGFnZSgpXCIgYXJpYS1jb250cm9scz1cImRlZmF1bHQtZGF0YXRhYmxlXCIgZGF0YS1kdC1pZHg9XCIwXCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJwYWdlLWxpbmtcIj5cblx0ICAgICZsdDtcblx0ICA8L2E+XG5cdDwvbGk+XG5cdDxsaSB2LWZvcj1cIm4gaW4gbnVtX3BhZ2VfYnV0dG9uc1wiIEBjbGljaz1cImNoYW5nZV9hY3RpdmVfcGFnZShzdGFydF9wYWdlX2J1dHRvbiArIG4gLSAxKVwiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aXZlX3BhZ2UgPT0gc3RhcnRfcGFnZV9idXR0b24gKyBuIC0gMSB9XCIgY2xhc3M9XCJwYWdpbmF0ZV9idXR0b24gcGFnZS1pdGVtXCI+PGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBhcmlhLWNvbnRyb2xzPVwiZGVmYXVsdC1kYXRhdGFibGVcIiBkYXRhLWR0LWlkeD1cIjFcIiB0YWJpbmRleD1cIjBcIiBjbGFzcz1cInBhZ2UtbGlua1wiID57e3N0YXJ0X3BhZ2VfYnV0dG9uICsgbn19PC9hPlxuXHQgIDwhLS0gIDprZXk9XCJ0b3RhbF9yb3dzXCItLT5cblx0ICA8L2xpPlxuXHQ8bGkgY2xhc3M9XCJwYWdpbmF0ZV9idXR0b24gcGFnZS1pdGVtIG5leHRcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6IGFjdGl2ZV9wYWdlID09IHRvdGFsX3BhZ2VzIC0gMX1cIiBpZD1cImRlZmF1bHQtZGF0YXRhYmxlX25leHRcIj5cblx0ICA8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApO1wiIEBjbGljaz1cIm5leHRfcGFnZSgpXCIgYXJpYS1jb250cm9scz1cImRlZmF1bHQtZGF0YXRhYmxlXCIgZGF0YS1kdC1pZHg9XCI3XCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJwYWdlLWxpbmtcIj5cblx0ICAgICZndDtcblx0ICA8L2E+XG5cdDwvbGk+XG5cdDxsaSB2LXNob3c9XCJlbmFibGVfbGFzdF9wYWdlXCIgY2xhc3M9XCJwYWdpbmF0ZV9idXR0b24gcGFnZS1pdGVtIHByZXZpb3VzXCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aXZlX3BhZ2UodG90YWxfcGFnZXMgLSAxLCB0b3RhbF9wYWdlcyAtIG51bV9wYWdlX2J1dHRvbnMpXCIgYXJpYS1jb250cm9scz1cImRlZmF1bHQtZGF0YXRhYmxlXCIgZGF0YS1kdC1pZHg9XCIwXCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJwYWdlLWxpbmtcIj5cblx0ICAgIMK7XG5cdCAgPC9hPlxuXHQ8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+IDwhLS0gZW5kIGRpdiBjb2wtbWQtNyAtLT5cbjwvZGl2PiA8IS0tIFBlclBhZ2UgLS0+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHRvdGFsX3Jvd3M6IE51bWJlcixcbiAgICBwZXJfcGFnZTogTnVtYmVyLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2NoYW5nZV9hY3RpdmVfcGFnZSddKTtcblxuY29uc3QgZGVmYXVsdF9wZXJfcGFnZSA9IDEwO1xuY29uc3QgbWF4X3BhZ2VfYnV0dG9ucyA9IDY7XG5cbmNvbnN0IHN0YXJ0X3BhZ2VfYnV0dG9uID0gcmVmKDApO1xuY29uc3QgbnVtX3BhZ2VfYnV0dG9ucyA9IHJlZigwKTtcblxuY29uc3QgdG90YWxfcGFnZXMgPSByZWYoMCk7XG5jb25zdCBhY3RpdmVfcGFnZSA9IHJlZigwKTtcblxuY29uc3QgdGV4dF90ZW1wbGF0ZSA9IFwiU2hvd2luZyBwYWdlICVhY3RpdmVfcGFnZSBvZiAldG90YWxfcGFnZXM6IHRvdGFsICV0b3RhbF9yb3dzIHJvd3NcIjtcbmNvbnN0IHRleHQgPSByZWYoXCJcIik7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgY2FsY3VsYXRlX3BhZ2VzKCk7XG59KTtcblxud2F0Y2goKCkgPT4gW3Byb3BzLnRvdGFsX3Jvd3MsIHByb3BzLnBlcl9wYWdlXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgY2FsY3VsYXRlX3BhZ2VzKCk7XG59LCB7IGZsdXNoOiAncHJlJywgaW1tZWRpYXRlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVfcGFnZXMoKSB7XG4gICAgaWYgKHByb3BzLnRvdGFsX3Jvd3MgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgcGVyX3BhZ2UgPSBwcm9wcy5wZXJfcGFnZTtcbiAgICB0b3RhbF9wYWdlcy52YWx1ZSA9IE51bWJlci5wYXJzZUludCgocHJvcHMudG90YWxfcm93cyArIHBlcl9wYWdlIC0gMSkgLyBwZXJfcGFnZSk7XG4gICAgbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSA9IG1heF9wYWdlX2J1dHRvbnM7XG4gICAgaWYgKHRvdGFsX3BhZ2VzLnZhbHVlIDwgbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSkge1xuXHQgICAgbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSA9IHRvdGFsX3BhZ2VzLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoYWN0aXZlX3BhZ2UudmFsdWUgPj0gdG90YWxfcGFnZXMudmFsdWUgJiYgdG90YWxfcGFnZXMudmFsdWUgPiAwKSB7XG4gICAgICAvL1x0dG90YWxfcGFnZXMudmFsdWUgPSB0b3RhbF9wYWdlcy52YWx1ZSArIDE7XG4gICAgICAvKiBJbiBjYXNlIHRoZSBjdXJyZW50IGFjdGl2ZSBwYWdlIGlzIGhpZ2hlciB0aGFuIHRoZSBtYXggcGFnZXMsIHJlc3RhcnQgZnJvbSBwYWdlIDEgKi9cbiAgICAgIGFjdGl2ZV9wYWdlLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgLSAxO1xuICAgICAgc3RhcnRfcGFnZV9idXR0b24udmFsdWUgPSB0b3RhbF9wYWdlcy52YWx1ZSAtIG51bV9wYWdlX2J1dHRvbnMudmFsdWU7XG4gICAgICAvKiBSZWR1bmRhbnQgY2FsbCBpbiBvcmRlciB0byBjb3JyZWN0bHkgbG9hZCBwYWdlcyAqL1xuICAgICAgY2hhbmdlX2FjdGl2ZV9wYWdlKGFjdGl2ZV9wYWdlLnZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXRfdGV4dCgpO1xufVxuXG5jb25zdCBlbmFibGVfZmlyc3RfcGFnZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAodG90YWxfcGFnZXMudmFsdWUgPCBtYXhfcGFnZV9idXR0b25zKSB7XG5cdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZV9wYWdlLnZhbHVlID49IG51bV9wYWdlX2J1dHRvbnMudmFsdWUgLSAxO1xufSk7XG5cbmNvbnN0IGVuYWJsZV9sYXN0X3BhZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHRvdGFsX3BhZ2VzLnZhbHVlIDwgbWF4X3BhZ2VfYnV0dG9ucykge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVfcGFnZS52YWx1ZSA8IHRvdGFsX3BhZ2VzLnZhbHVlIC0gbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSArIDE7XG59KTtcblxuXG5mdW5jdGlvbiBuZXh0X3BhZ2UoKSB7XG4gICAgY2hhbmdlX2FjdGl2ZV9wYWdlKGFjdGl2ZV9wYWdlLnZhbHVlICsgMSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tfcGFnZSgpIHtcbiAgICBjaGFuZ2VfYWN0aXZlX3BhZ2UoYWN0aXZlX3BhZ2UudmFsdWUgLSAxKTtcbn1cblxuLyogIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzZXQgdGhlIGN1cnJlbnQgYWN0aXZlIHBhZ2UsIGlmIG5vIHBhcmFtcyBpcyBwYXNzZWRcbiAgICB0aGVuIGl0J3MgZ29pbmcgdG8ga2VlcCB0aGUgc2FtZSBwYWdlLlxuICAgIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgY2FzZSB3aGVyZSB0aGUgYWN0aXZlIHBhZ2UgPiBsYXN0IHBhZ2UsXG4gICAgc2V0dGluZyB0aGUgYWN0aXZlIHBhZ2UgYXMgdGhlIGxhc3QgcGFnZS5cbiAqL1xuZnVuY3Rpb24gY2hhbmdlX2FjdGl2ZV9wYWdlKG5ld19hY3RpdmVfcGFnZSwgbmV3X3N0YXJ0X3BhZ2VfYnV0dG9uKSB7XG4gIC8qIEluIGNhc2UgYSBuZXcgYWN0aXZlIHBhZ2UgaXMgcmVxdWVzdGVkLCBqdW1wIHRvIHRoYXQgcGFnZSAqL1xuICBpZiAobmV3X2FjdGl2ZV9wYWdlICE9IG51bGwpIHtcbiAgICBhY3RpdmVfcGFnZS52YWx1ZSA9IG5ld19hY3RpdmVfcGFnZTtcbiAgfSBcblxuICAvKiBDaGFuZ2UgdGhlIHRhYmxlIGZvb3RlciBidXR0b24gKi9cbiAgaWYgKG5ld19zdGFydF9wYWdlX2J1dHRvbiAhPSBudWxsKSB7XG4gICAgc3RhcnRfcGFnZV9idXR0b24udmFsdWUgPSBuZXdfc3RhcnRfcGFnZV9idXR0b247XG4gIH1cblxuICAvKiBTZXQgdXAgdGhlIGNvcnJlY3Qgc3RhcnQgYW5kIGVuZCBwYWdlIG9mIHRoZSB0YWJsZSBmb290ZXIgKi9cbiAgaWYgKGFjdGl2ZV9wYWdlLnZhbHVlID09IHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlICYmIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID4gMCkge1xuICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlIC09IDE7XG4gIH1cbiAgY29uc3QgZW5kX3BhZ2VfYnV0dG9uID0gc3RhcnRfcGFnZV9idXR0b24udmFsdWUgKyBudW1fcGFnZV9idXR0b25zLnZhbHVlIC0gMTtcbiAgaWYgKGFjdGl2ZV9wYWdlLnZhbHVlID09IGVuZF9wYWdlX2J1dHRvbiAmJiB0b3RhbF9wYWdlcy52YWx1ZSAtIDEgPiBlbmRfcGFnZV9idXR0b24pIHtcbiAgICBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSArPSAxO1x0XG4gIH1cbiAgXG4gIC8qIENoZWNrIHRoYXQgdGhlIGFjdGl2ZV9wYWdlIGlzIG5vdCBncmVhdGVyIHRoZW4gdGhlIGxhc3QgcGFnZSAqL1xuICAvKiBvdGhlcndpc2Ugc2V0IHRvIHRoZSBsYXN0IHBhZ2UgKi9cbiAgaWYoYWN0aXZlX3BhZ2UudmFsdWUgPiB0b3RhbF9wYWdlcy52YWx1ZSAtIDEgJiYgdG90YWxfcGFnZXMudmFsdWUgIT0gMCkge1xuICAgIGFjdGl2ZV9wYWdlLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgLSAxO1xuICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID0gYWN0aXZlX3BhZ2UudmFsdWU7XG4gIH1cblxuICAvKiBTZXQgdGhlIHRleHQgb24gdGhlIHRhYmxlIGZvb3RlciwgbnVtX3BhZ2VzLCB0b3RhbF9yb3dzLCBlY2MuICovXG4gIHNldF90ZXh0KCk7XG5cbiAgLyogRW1pdCB0aGUgY2hhbmdlX2FjdGl2ZV9wYWdlIGV2ZW50ICovXG4gIGVtaXQoJ2NoYW5nZV9hY3RpdmVfcGFnZScsIGFjdGl2ZV9wYWdlLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc2V0X3RleHQoKSB7XG4gICAgdGV4dC52YWx1ZSA9IHRleHRfdGVtcGxhdGUucmVwbGFjZShcIiVhY3RpdmVfcGFnZVwiLCBmb3JtYXRfbnVtYmVyKGAke2FjdGl2ZV9wYWdlLnZhbHVlICsgMX1gKSlcblx0LnJlcGxhY2UoXCIldG90YWxfcGFnZXNcIiwgZm9ybWF0X251bWJlcihgJHt0b3RhbF9wYWdlcy52YWx1ZX1gKSlcblx0LnJlcGxhY2UoXCIldG90YWxfcm93c1wiLCBmb3JtYXRfbnVtYmVyKGAke3Byb3BzLnRvdGFsX3Jvd3N9YCkpXG5cdC5yZXBsYWNlKFwiJXBlcl9wYWdlXCIsIGZvcm1hdF9udW1iZXIoYCR7cHJvcHMucGVyX3BhZ2V9YCkpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRfbnVtYmVyKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC8oLikoPz0oXFxkezN9KSskKS9nLCckMSwnKTtcbn1cblxuZGVmaW5lRXhwb3NlKHsgY2hhbmdlX2FjdGl2ZV9wYWdlIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCIvKipcbiAgICAoQykgMjAyMyAtIG50b3Aub3JnICAgIFxuKi9cblxuPHRlbXBsYXRlPlxuICA8ZGl2IHJlZj1cIm92ZXJsYXlcIiBjbGFzcz1cIm92ZXJsYXkgY2VudGVyZWQtbWVzc2FnZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC02XCIgOnN0eWxlPVwic3R5bGVzXCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj57eyBsb2FkaW5nIH19PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgbG9hZGluZyA9IGkxOG4oJ2xvYWRpbmcnKVxuY29uc3Qgb3ZlcmxheSA9IHJlZihudWxsKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBzdHlsZXM6IFN0cmluZ1xufSk7XG5cbi8qIFNob3cgdGhlIGxvYWRpbmcgKi9cbmZ1bmN0aW9uIHNob3dfbG9hZGluZyh0aW1lID0gNTAwKSB7XG4gICQob3ZlcmxheS52YWx1ZSkuZmFkZUluKHRpbWUpO1xufVxuXG4vKiBIaWRlIHRoZSBsb2FkaW5nICovXG5mdW5jdGlvbiBoaWRlX2xvYWRpbmcodGltZSA9IDUwMCkge1xuICAkKG92ZXJsYXkudmFsdWUpLmZhZGVPdXQodGltZSk7XG59XG5cbmRlZmluZUV4cG9zZSh7IGhpZGVfbG9hZGluZywgc2hvd19sb2FkaW5nIH0pO1xuXG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2ggbXMtMVwiIHN0eWxlPVwid2hpdGUtc3BhY2U6bm93cmFwXCI+XG4gICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7XCIgOmNoZWNrZWQ9XCJ2YWx1ZV8yID09IHRydWVcIiBAY2xpY2s9XCJjaGFuZ2VfdmFsdWUoKVwiICAgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJ0b2dnbGUtQmVnaW5cIiA6dGl0bGU9XCJ0aXRsZVwiPlxuICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiBmb3I9XCJ0b2dnbGUtQmVnaW5cIiB2LWh0bWw9XCJsYWJlbFwiPlxuICAgIDwvbGFiZWw+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2gsIGggfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ3VwZGF0ZTp2YWx1ZScsICdjaGFuZ2VfdmFsdWUnXSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHZhbHVlOiBCb29sZWFuLFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgbGFiZWw6IFN0cmluZyxcbn0pO1xuXG5jb25zdCB2YWx1ZV8yID0gcmVmKGZhbHNlKTtcblxub25Nb3VudGVkKCgpID0+IHtcbiAgICB2YWx1ZV8yLnZhbHVlID0gcHJvcHMudmFsdWU7XG59KTtcblxud2F0Y2goKCkgPT4gcHJvcHMudmFsdWUsIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHZhbHVlXzIudmFsdWUgPSBwcm9wcy52YWx1ZTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbmZ1bmN0aW9uIGNoYW5nZV92YWx1ZSgpIHtcbiAgICBlbWl0KCd1cGRhdGU6dmFsdWUnLCAhdmFsdWVfMi52YWx1ZSk7XG4gICAgZW1pdCgnY2hhbmdlX3ZhbHVlJywgIXZhbHVlXzIudmFsdWUpO1xufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxzbG90IG5hbWU9XCJjdXN0b21faGVhZGVyMlwiPjwvc2xvdD5cbiAgICA8ZGl2IHJlZj1cInRhYmxlX2NvbnRhaW5lclwiIDppZD1cImlkXCI+XG4gICAgICAgIDxMb2FkaW5nIHYtaWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uLWdyb3VwIG1iLTJcIj4gPCEtLSBUYWJsZUhlYWRlciAtLT5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbi10b3A6MC41cmVtO1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgU2hvd1xuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHYtbW9kZWw9XCJwZXJfcGFnZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfcGVyX3BhZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XCJwcCBpbiBwZXJfcGFnZV9vcHRpb25zXCIgOnZhbHVlPVwicHBcIj57eyBwcCB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgRW50cmllc1xuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOnJpZ2h0O1wiIGNsYXNzPVwiZm9ybS1ncm91cCBcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodDtcIiBjbGFzcz1cImZvcm0tZ3JvdXAgXCI+XG4gICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImN1c3RvbV9oZWFkZXJcIj48L3Nsb3Q+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJlbmFibGVfc2VhcmNoXCIgY2xhc3M9XCJkLWlubGluZVwiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e3sgX2kxOG4oJ3NlYXJjaCcpIH19OlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiB2LW1vZGVsPVwibWFwX3NlYXJjaFwiIEBpbnB1dD1cIm9uX2NoYW5nZV9tYXBfc2VhcmNoXCIgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbWUtMVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZXNldF9jb2x1bW5fc2l6ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1jb2x1bW5zXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbWUtMVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWZyZXNoX3RhYmxlKClcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcmVmcmVzaFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzaG93X2F1dG9yZWZyZXNoID4gMFwiIGNsYXNzPVwiZC1pbmxpbmUtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgPFN3aXRjaCB2LW1vZGVsOnZhbHVlPVwiZW5hYmxlX2F1dG9yZWZyZXNoXCIgY2xhc3M9XCJtZS0yIG10LTFcIiA6dGl0bGU9XCJhdXRvcmVmcmVzaF90aXRsZVwiIHN0eWxlPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2VfdmFsdWU9XCJ1cGRhdGVfYXV0b3JlZnJlc2hcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24gOmlkPVwiaWQgKyAnX2Ryb3Bkb3duJ1wiIHJlZj1cImRyb3Bkb3duXCI+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV5ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cImNvbCBpbiBjb2x1bW5zX3dyYXBcIiBjbGFzcz1cImZvcm0tY2hlY2sgZm9ybS1zd2l0Y2ggbXMtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyO1wiIDpjaGVja2VkPVwiY29sLnZpc2libGUgPT0gdHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImNoYW5nZV9jb2x1bW5zX3Zpc2liaWxpdHkoY29sKVwiIHR5cGU9XCJjaGVja2JveFwiIDppZD1cImdldF9jb2xfaWQoY29sKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiA6Zm9yPVwiZ2V0X2NvbF9pZChjb2wpXCIgdi1odG1sPVwicHJpbnRfY29sdW1uX25hbWUoY29sLmRhdGEpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj4gPCEtLSBUYWJsZUhlYWRlciAtLT5cblxuICAgICAgICA8ZGl2IDprZXk9XCJ0YWJsZV9rZXlcIiBzdHlsZT1cIm92ZXJmbG93OmF1dG87d2lkdGg6MTAwJTtcIj4gPCEtLSBUYWJsZSAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImRpc3BsYXlfbWVzc2FnZSA9PSB0cnVlXCIgY2xhc3M9XCJjZW50ZXJlZC1tZXNzYWdlXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPVwibWVzc2FnZV90b19kaXNwbGF5XCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGFibGUgcmVmPVwidGFibGVcIiBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgbWwtMCBtci0wIG1iLTAgbnRvcG5nLXRhYmxlXCJcbiAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbKGRpc3BsYXlfbWVzc2FnZSB8fCBsb2FkaW5nKSA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgZGF0YS1yZXNpemFibGU9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICA6ZGF0YS1yZXNpemFibGUtY29sdW1ucy1pZD1cImlkXCI+IDwhLS0gVGFibGUgLS0+XG4gICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sLCBjb2xfaW5kZXgpIGluIGNvbHVtbnNfd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCB2LWlmPVwiY29sLnZpc2libGVcIiBzY29wZT1cImNvbFwiIDpjbGFzcz1cInsgJ3BvaW50ZXInOiBjb2wuc29ydGFibGUsICd1bnNldCc6ICFjb2wuc29ydGFibGUsIH1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cIndoaXRlLXNwYWNlOiBub3dyYXA7XCIgQGNsaWNrPVwiY2hhbmdlX2NvbHVtbl9zb3J0KGNvbCwgY29sX2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLXJlc2l6YWJsZS1jb2x1bW4taWQ9XCJnZXRfY29sdW1uX2lkKGNvbC5kYXRhKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTpmbGV4O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPVwicHJpbnRfY29sdW1uX25hbWUoY29sLmRhdGEpXCIgY2xhc3M9XCJ3cmFwLWNvbHVtblwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGkgdi1zaG93PVwiY29sLnNvcnQgPT0gMFwiIGNsYXNzPVwiZmEgZmEtZncgZmEtc29ydFwiPjwvaT4gLS0+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHYtc2hvdz1cImNvbC5zb3J0ID09IDEgJiYgY29sLnNvcnRhYmxlXCIgY2xhc3M9XCJmYSBmYS1mdyBmYS1zb3J0LXVwXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgdi1zaG93PVwiY29sLnNvcnQgPT0gMiAmJiBjb2wuc29ydGFibGVcIiBjbGFzcz1cImZhIGZhLWZ3IGZhLXNvcnQtZG93blwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDx0ciB2LWlmPVwiIWNoYW5naW5nX2NvbHVtbl92aXNpYmlsaXR5ICYmICFjaGFuZ2luZ19yb3dzXCIgdi1mb3I9XCJyb3cgaW4gYWN0aXZlX3Jvd3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihjb2wsIGNvbF9pbmRleCkgaW4gY29sdW1uc193cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHYtaWY9XCJjb2wudmlzaWJsZVwiIHNjb3BlPVwiY29sXCIgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwicHJpbnRfaHRtbF9yb3cgIT0gbnVsbCAmJiBwcmludF9odG1sX3Jvdyhjb2wuZGF0YSwgcm93LCB0cnVlKSAhPSBudWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cImNvbC5jbGFzc2VzXCIgY2xhc3M9XCJ3cmFwLWNvbHVtblwiIDpzdHlsZT1cImNvbC5zdHlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWh0bWw9XCJwcmludF9odG1sX3Jvdyhjb2wuZGF0YSwgcm93KVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiA6c3R5bGU9XCJjb2wuc3R5bGVcIiBzdHlsZT1cIlwiIGNsYXNzPVwid3JhcC1jb2x1bW4gbWFyZ2luLXNtXCIgOmNsYXNzPVwiY29sLmNsYXNzZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWdWVOb2RlIDprZXk9XCJyb3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCJwcmludF92dWVfbm9kZV9yb3cgIT0gbnVsbCAmJiBwcmludF92dWVfbm9kZV9yb3coY29sLmRhdGEsIHJvdywgdnVlX29iaiwgdHJ1ZSkgIT0gbnVsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNvbnRlbnQ9XCJwcmludF92dWVfbm9kZV9yb3coY29sLmRhdGEsIHJvdywgdnVlX29iailcIj48L1Z1ZU5vZGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHIgdi1pZj1cImRpc3BsYXlfZW1wdHlfcm93cyAmJiBhY3RpdmVfcm93cy5sZW5ndGggPCBwZXJfcGFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cImluZGV4IGluIChwZXJfcGFnZSAtIGFjdGl2ZV9yb3dzLmxlbmd0aClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihjb2wsIGNvbF9pbmRleCkgaW4gY29sdW1uc193cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPVwiXCIgY2xhc3M9XCJcIiB2LWlmPVwiY29sLnZpc2libGVcIiBzY29wZT1cImNvbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwid3JhcC1jb2x1bW5cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT4gPCEtLSBUYWJsZSAtLT5cbiAgICAgICAgPC9kaXY+IDwhLS0gVGFibGUgZGl2LS0+XG5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxTZWxlY3RUYWJsZVBhZ2UgcmVmPVwic2VsZWN0X3RhYmxlX3BhZ2VcIiA6a2V5PVwic2VsZWN0X3BhZ2VzX2tleVwiIDp0b3RhbF9yb3dzPVwidG90YWxfcm93c1wiIDpwZXJfcGFnZT1cInBlcl9wYWdlXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlX2FjdGl2ZV9wYWdlPVwiY2hhbmdlX2FjdGl2ZV9wYWdlXCI+XG4gICAgICAgICAgICA8L1NlbGVjdFRhYmxlUGFnZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiB2LWlmPVwicXVlcnlfaW5mbyAhPSBudWxsXCIgY2xhc3M9XCJtdC0yXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1lbmRcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgc3R5bGU9XCJcIiBjbGFzcz1cInF1ZXJ5IHRleHQtZW5kXCI+PHNwYW4gY2xhc3M9XCJyZWNvcmRzXCI+e3sgcXVlcnlfaW5mby5udW1fcmVjb3Jkc19wcm9jZXNzZWRcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj4uPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtc3RhcnRcIj5cbiAgICAgICAgICAgICAgICA8c21hbGwgaWQ9XCJoaXN0b3JpY2FsX2Zsb3dzX3RhYmxlLXF1ZXJ5LXRpbWVcIiBzdHlsZT1cIlwiIGNsYXNzPVwicXVlcnlcIj5RdWVyeSBwZXJmb3JtZWQgaW4gPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2Vjb25kc1wiPnt7IChxdWVyeV9pbmZvLnF1ZXJ5X2R1cmF0aW9uX21zZWMgLyAxMDAwKS50b0ZpeGVkKDMpIH19PC9zcGFuPiBzZWNvbmRzLiA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJoaXN0b3JpY2FsX2Zsb3dzX3RhYmxlLXF1ZXJ5XCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCIgY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPXF1ZXJ5X2luZm8ucXVlcnkgQGNsaWNrPVwiY29weV9xdWVyeV9pbnRvX2NsaXBib2FyZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9XCJxdWVyeV9pbmZvX3NxbF9idXR0b25cIj5TUUw8L3NwYW4+PC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFRhYmxlUGFnZSB9IGZyb20gXCIuL3NlbGVjdF90YWJsZV9wYWdlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBWdWVOb2RlIH0gZnJvbSBcIi4vdnVlX25vZGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9zd2l0Y2gudnVlXCI7XG5cbi8qIHJvd3NfbG9hZGVkLCBpcyBlbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIHJvd3MgYXJlIGxvYWRlZCxcbiAqIGxvYWRlZCwgICAgICBpcyBlbWl0dGVkIHdoZW4gdGhlIHRhYmxlIGlzIGxvYWRlZCAobW91bnRlZClcbiAqL1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnY3VzdG9tX2V2ZW50JywgJ2xvYWRlZCcsICdyb3dzX2xvYWRlZCddKTtcbmNvbnN0IHZ1ZV9vYmogPSB7XG4gICAgZW1pdCxcbiAgICBoLFxuICAgIG5leHRUaWNrLFxufTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZyxcbiAgICBjb2x1bW5zOiBBcnJheSxcbiAgICBnZXRfcm93czogRnVuY3Rpb24sIC8vIGFzeW5jIChhY3RpdmVfcGFnZTogbnVtYmVyLCBwZXJfcGFnZTogbnVtYmVyLCBjb2x1bW5zX3dyYXA6IGFueVtdLCBzZWFyY2hfbWFwOiBzdHJpbmcsIGZpcnN0X2dldF9yb3dzOiBib29sZWFuKSA9PiB7IHRvdGFsX3Jvd3M6IG51bWJlciwgcm93czogYW55W10sIHF1ZXJ5X2luZm86IHsgcXVlcnlfZHVyYXRpb25fbXNlYzogbnVtYmVyLCBudW1fcmVjb3Jkc19wcm9jZXNzZWQ6IHN0cmluZywgcXVlcnk6IHN0cmluZyB9IH1cbiAgICBnZXRfY29sdW1uX2lkOiBGdW5jdGlvbixcbiAgICBwcmludF9jb2x1bW5fbmFtZTogRnVuY3Rpb24sXG4gICAgcHJpbnRfaHRtbF9yb3c6IEZ1bmN0aW9uLFxuICAgIHByaW50X3Z1ZV9ub2RlX3JvdzogRnVuY3Rpb24sXG4gICAgZl9pc19jb2x1bW5fc29ydGFibGU6IEZ1bmN0aW9uLFxuICAgIGZfc29ydF9yb3dzOiBGdW5jdGlvbixcbiAgICBmX2dldF9jb2x1bW5fY2xhc3NlczogRnVuY3Rpb24sXG4gICAgZl9nZXRfY29sdW1uX3N0eWxlOiBGdW5jdGlvbixcbiAgICBlbmFibGVfc2VhcmNoOiBCb29sZWFuLFxuICAgIGRpc3BsYXlfZW1wdHlfcm93czogQm9vbGVhbixcbiAgICBzaG93X2F1dG9yZWZyZXNoOiBOdW1iZXIsIC8vIGF1dG9yZWZyZXNoIHNlY29uZHMsIGlmIG51bGwgb3IgMCBhdXRvcmVmcmVzaCBzd2l0Y2ggd2lsbCBub3Qgc2hvd2VkXG4gICAgZGVmYXVsdF9zb3J0OiBPYmplY3QsIC8vIHsgY29sdW1uX2lkOiBzdHJpbmcsIHNvcnQ6IG51bWJlciAoMCwgMSwgMikgfVxuICAgIGNzcmY6IFN0cmluZyxcbiAgICBwYWdpbmc6IEJvb2xlYW4sXG4gICAgZGlzcGxheV9tZXNzYWdlOiBCb29sZWFuLFxuICAgIG1lc3NhZ2VfdG9fZGlzcGxheTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHNob3dfdGFibGUgPSByZWYodHJ1ZSk7XG5jb25zdCB0YWJsZV9jb250YWluZXIgPSByZWYobnVsbCk7XG5jb25zdCB0YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IGRyb3Bkb3duID0gcmVmKG51bGwpO1xuY29uc3Qgcm93c19odG1sX2VsZW1lbnQgPSByZWYoW10pO1xubGV0IGFjdGl2ZV9wYWdlID0gMDtcbmxldCByb3dzID0gW107XG5jb25zdCBjb2x1bW5zX3dyYXAgPSByZWYoW10pO1xuY29uc3QgYWN0aXZlX3Jvd3MgPSByZWYoW10pO1xuY29uc3QgdG90YWxfcm93cyA9IHJlZigwKTtcbmNvbnN0IHBlcl9wYWdlX29wdGlvbnMgPSBbMTAsIDIwLCA0MCwgNTAsIDgwLCAxMDBdO1xuY29uc3QgcGVyX3BhZ2UgPSByZWYoMTApO1xuY29uc3Qgc3RvcmUgPSB3aW5kb3cuc3RvcmU7XG5jb25zdCBtYXBfc2VhcmNoID0gcmVmKFwiXCIpO1xuXG5jb25zdCBzZWxlY3RfdGFibGVfcGFnZSA9IHJlZihudWxsKTtcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuY29uc3QgcXVlcnlfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IHF1ZXJ5X2luZm9fc3FsX2J1dHRvbiA9IHJlZihudWxsKTtcbmNvbnN0IGNoYW5naW5nX2NvbHVtbl92aXNpYmlsaXR5ID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNoYW5naW5nX3Jvd3MgPSByZWYoZmFsc2UpO1xuY29uc3QgZW5hYmxlX2F1dG9yZWZyZXNoID0gcmVmKGZhbHNlKTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvcHMuY29sdW1ucyAhPSBudWxsKSB7XG4gICAgICAgIGxvYWRfdGFibGUoKTtcbiAgICB9XG59KTtcblxuY29uc3QgYXV0b3JlZnJlc2hfdGl0bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLnNob3dfYXV0b3JlZnJlc2ggPT0gbnVsbCB8fCBwcm9wcy5zaG93X2F1dG9yZWZyZXNoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGxldCB0ZXh0ID0gX2kxOG4oXCJ0YWJsZS5hdXRvcmVmcmVzaFwiKTtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKFwiJXRpbWVcIiwgcHJvcHMuc2hvd19hdXRvcmVmcmVzaCk7XG59KTtcblxud2F0Y2goKCkgPT4gW3Byb3BzLmlkLCBwcm9wcy5jb2x1bW5zXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgbG9hZF90YWJsZSgpO1xufSwgeyBmbHVzaDogJ3ByZScgfSk7XG5cbmZ1bmN0aW9uIGdldF9jb2xfaWQoY29sKSB7XG4gICAgaWYoY29sICE9IG51bGwgJiYgY29sLmlkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGNvbC5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJ0b2dnbGUtQmVnaW5cIjtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlKCkge1xuICAgIGF3YWl0IHNldF9jb2x1bW5zX3dyYXAoKTtcbiAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIHNldF9jb2x1bW5zX3Jlc2l6YWJsZSgpO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgZHJvcGRvd24udmFsdWUubG9hZF9tZW51KCk7XG4gICAgZW1pdChcImxvYWRlZFwiKTtcbn1cblxubGV0IGF1dG9yZWZyZXNoX2ludGVydmFsO1xuZnVuY3Rpb24gdXBkYXRlX2F1dG9yZWZyZXNoKCkge1xuICAgIGlmIChlbmFibGVfYXV0b3JlZnJlc2gudmFsdWUgPT0gZmFsc2UpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChhdXRvcmVmcmVzaF9pbnRlcnZhbCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXV0b3JlZnJlc2hfaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNoYW5nZV9hY3RpdmVfcGFnZSgpO1xuICAgIH0sIHByb3BzLnNob3dfYXV0b3JlZnJlc2ggKiAxMDAwKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2NvbHVtbnNfdmlzaWJpbGl0eShjb2wpIHtcbiAgICBjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eS52YWx1ZSA9IHRydWU7XG4gICAgY29sLnZpc2libGUgPSAhY29sLnZpc2libGU7XG4gICAgaWYgKHByb3BzLnBhZ2luZykge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIH1cbiAgICAvLyByZWRyYXdfdGFibGUoKTtcbiAgICBhd2FpdCByZWRyYXdfdGFibGVfcmVzaXphYmxlKCk7XG4gICAgYXdhaXQgc2V0X2NvbHVtbnNfdmlzaWJpbGl0eSgpO1xuICAgIC8vIHNldF9jb2x1bW5zX3Jlc2l6YWJsZSgpO1xuICAgIGNoYW5naW5nX2NvbHVtbl92aXNpYmlsaXR5LnZhbHVlID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZHJhd190YWJsZV9yZXNpemFibGUoKSB7XG4gICAgYXdhaXQgcmVkcmF3X3RhYmxlKCk7XG4gICAgc2V0X2NvbHVtbnNfcmVzaXphYmxlKCk7XG59XG5cbmNvbnN0IHRhYmxlX2tleSA9IHJlZigwKTtcbmFzeW5jIGZ1bmN0aW9uIHJlZHJhd190YWJsZSgpIHtcbiAgICB0YWJsZV9rZXkudmFsdWUgKz0gMTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xufVxuXG5mdW5jdGlvbiBzZXRfY29sdW1uc19yZXNpemFibGUoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgIC8vIHNlbGVjdG9yOiB0YWJsZS52YWx1ZSxcbiAgICAgICAgLy8gcGFkZGluZzogMCxcbiAgICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgICBtaW5XaWR0aDogMzIsXG4gICAgICAgIC8vIHBhZGRpbmc6IC01MCxcbiAgICAgICAgLy8gbWF4V2lkdGg6IDE1MCxcbiAgICB9O1xuICAgICQodGFibGUudmFsdWUpLnJlc2l6YWJsZUNvbHVtbnMob3B0aW9ucyk7XG4gICAgLy8gJCh0YWJsZS52YWx1ZSkuY3NzKCd3aWR0aCcsICcxMDAlJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9jb2x1bW5zX3Zpc2liaWxpdHlfZGljdCgpIHtcbiAgICBpZiAocHJvcHMuY3NyZiA9PSBudWxsKSB7IHJldHVybiB7fTsgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHsgdGFibGVfaWQ6IHByb3BzLmlkIH07XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGFibGVzL3VzZXJfY29sdW1uc19jb25maWcubHVhPyR7dXJsX3BhcmFtc31gO1xuICAgIGxldCBjb2x1bW5zX3Zpc2libGUgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBsZXQgY29sdW1uc192aXNpYmxlX2RpY3QgPSB7fTtcbiAgICBjb2x1bW5zX3Zpc2libGUuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjb2x1bW5zX3Zpc2libGVfZGljdFtjLmlkXSA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbHVtbnNfdmlzaWJsZV9kaWN0O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfY29sdW1uc192aXNpYmlsaXR5KCkge1xuICAgIGlmIChwcm9wcy5jc3JmID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHBhcmFtcyA9IHsgdGFibGVfaWQ6IHByb3BzLmlkLCB2aXNpYmxlX2NvbHVtbnNfaWRzOiBbXSwgY3NyZjogcHJvcHMuY3NyZiB9O1xuICAgIHBhcmFtcy52aXNpYmxlX2NvbHVtbnNfaWRzID0gY29sdW1uc193cmFwLnZhbHVlLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IGMuaWQsXG4gICAgICAgICAgICB2aXNpYmxlOiBjLnZpc2libGUsXG4gICAgICAgICAgICBvcmRlcjogYy5vcmRlcixcbiAgICAgICAgICAgIHNvcnQ6IGMuc29ydCxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWRkL3RhYmxlcy91c2VyX2NvbHVtbnNfY29uZmlnLmx1YWA7XG4gICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCBwYXJhbXMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfY29sdW1uc193cmFwKCkge1xuICAgIGxldCBjb2xzX3Zpc2liaWxpdHlfZGljdCA9IGF3YWl0IGdldF9jb2x1bW5zX3Zpc2liaWxpdHlfZGljdCgpO1xuICAgIGxldCBpc190YWJsZV9ub3Rfc29ydGVkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpZCBpbiBjb2xzX3Zpc2liaWxpdHlfZGljdCkge1xuICAgICAgICBpc190YWJsZV9ub3Rfc29ydGVkICY9IChjb2xzX3Zpc2liaWxpdHlfZGljdFtpZF0/LnNvcnQpO1xuICAgIH1cbiAgICBjb2x1bW5zX3dyYXAudmFsdWUgPSBwcm9wcy5jb2x1bW5zLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICBsZXQgY2xhc3NlcyA9IFtdO1xuICAgICAgICBsZXQgc3R5bGUgPSBcIlwiO1xuICAgICAgICBpZiAocHJvcHMuZl9nZXRfY29sdW1uX2NsYXNzZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xhc3NlcyA9IHByb3BzLmZfZ2V0X2NvbHVtbl9jbGFzc2VzKGMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5mX2dldF9jb2x1bW5fc3R5bGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3R5bGUgPSBwcm9wcy5mX2dldF9jb2x1bW5fc3R5bGUoYyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlkID0gcHJvcHMuZ2V0X2NvbHVtbl9pZChjKTtcbiAgICAgICAgbGV0IGNvbF9vcHQgPSBjb2xzX3Zpc2liaWxpdHlfZGljdFtpZF07XG4gICAgICAgIGxldCBzb3J0ID0gY29sX29wdD8uc29ydDtcbiAgICAgICAgaWYgKGlzX3RhYmxlX25vdF9zb3J0ZWQgPT0gdHJ1ZSAmJiBzb3J0ID09IG51bGwgJiYgcHJvcHMuZGVmYXVsdF9zb3J0ICE9IG51bGwgJiYgaWQgPT0gcHJvcHMuZGVmYXVsdF9zb3J0LmNvbHVtbl9pZCkge1xuICAgICAgICAgICAgc29ydCA9IHByb3BzLmRlZmF1bHRfc29ydC5zb3J0O1xuICAgICAgICB9IGVsc2UgaWYgKGNvbF9vcHQ/LnNvcnQpIHtcbiAgICAgICAgICAgIHNvcnQgPSBjb2xfb3B0Py5zb3J0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc29ydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgdmlzaWJsZTogY29sX29wdD8udmlzaWJsZSA9PSBudWxsIHx8IGNvbF9vcHQ/LnZpc2libGUgPT0gdHJ1ZSxcbiAgICAgICAgICAgIHNvcnQ6IHNvcnQsXG4gICAgICAgICAgICBzb3J0YWJsZTogaXNfY29sdW1uX3NvcnRhYmxlKGMpLFxuICAgICAgICAgICAgb3JkZXI6IGNvbF9vcHQ/Lm9yZGVyIHx8IGksXG4gICAgICAgICAgICBjbGFzc2VzLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBkYXRhOiBjLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGF3YWl0IHNldF9jb2x1bW5zX3Zpc2liaWxpdHkoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRfY29sdW1uX3NpemUoKSB7XG4gICAgcHJvcHMuY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGxldCBpZCA9IGAke3Byb3BzLmlkfS0ke3Byb3BzLmdldF9jb2x1bW5faWQoYyl9YDtcbiAgICAgICAgc3RvcmUucmVtb3ZlKGlkKTtcbiAgICB9KTtcbiAgICBhd2FpdCByZWRyYXdfdGFibGVfcmVzaXphYmxlKCk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9wZXJfcGFnZSgpIHtcbiAgICByZWRyYXdfc2VsZWN0X3BhZ2VzKCk7XG4gICAgY2hhbmdlX2FjdGl2ZV9wYWdlKDApO1xufVxuXG5jb25zdCBzZWxlY3RfcGFnZXNfa2V5ID0gcmVmKDApO1xuZnVuY3Rpb24gcmVkcmF3X3NlbGVjdF9wYWdlcygpIHtcbiAgICBzZWxlY3RfcGFnZXNfa2V5LnZhbHVlICs9IDE7XG59XG5cbmNvbnN0IHRhYmxlX2NvbnRlbnRfaWQgPSByZWYoMCk7XG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlX2NvbnRlbnQoKSB7XG4gICAgdGFibGVfY29udGVudF9pZC52YWx1ZSArPSAxO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2VfYWN0aXZlX3BhZ2UobmV3X2FjdGl2ZV9wYWdlKSB7XG4gICAgaWYgKG5ld19hY3RpdmVfcGFnZSAhPSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZV9wYWdlID0gbmV3X2FjdGl2ZV9wYWdlO1xuICAgIH1cbiAgICBpZiAoYWN0aXZlX3BhZ2UgPT0gbnVsbCkge1xuICAgICAgICBhY3RpdmVfcGFnZSA9IDA7XG4gICAgfVxuICAgIGlmIChwcm9wcy5wYWdpbmcgPT0gdHJ1ZSB8fCBmb3JjZV9yZWZyZXNoKSB7XG4gICAgICAgIGF3YWl0IHNldF9yb3dzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2V0X2FjdGl2ZV9yb3dzKCk7XG4gICAgfVxuICAgIHJlZnJlc2hfdGFibGVfY29udGVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2VfY29sdW1uX3NvcnQoY29sLCBjb2xfaW5kZXgpIHtcbiAgICBpZiAoIWNvbC5zb3J0YWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbC5zb3J0ID0gKGNvbC5zb3J0ICsgMSkgJSAzO1xuICAgIGNvbHVtbnNfd3JhcC52YWx1ZS5maWx0ZXIoKGMsIGkpID0+IGkgIT0gY29sX2luZGV4KS5mb3JFYWNoKChjKSA9PiBjLnNvcnQgPSAwKTtcbiAgICBpZiAoY29sLnNvcnQgPT0gMCkgeyByZXR1cm47IH1cbiAgICBpZiAocHJvcHMucGFnaW5nKSB7XG4gICAgICAgIGF3YWl0IHNldF9yb3dzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2V0X2FjdGl2ZV9yb3dzKCk7XG4gICAgfVxuICAgIGF3YWl0IHNldF9jb2x1bW5zX3Zpc2liaWxpdHkoKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NvcnRfZnVuY3Rpb24oKSB7XG4gICAgaWYgKHByb3BzLmZfc29ydF9yb3dzICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmZfc29ydF9yb3dzO1xuICAgIH1cbiAgICByZXR1cm4gKGNvbCwgcjAsIHIxKSA9PiB7XG4gICAgICAgIGxldCByMF9jb2wgPSBwcm9wcy5wcmludF9odG1sX3Jvdyhjb2wuZGF0YSwgcjApO1xuICAgICAgICBsZXQgcjFfY29sID0gcHJvcHMucHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHIxKTtcbiAgICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH07XG59XG5cbmxldCBmb3JjZV9yZWZyZXNoID0gZmFsc2U7XG5sZXQgZm9yY2VfZGlzYWJsZV9sb2FkaW5nID0gZmFsc2U7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiAgRnVuY3Rpb24gdXNlZCB0byByZWxvYWQgdGhlIHRhYmxlIGNvbnRlbnRzLCBcbiAgICBzZXQgZGlzYWJsZV9sb2FkaW5nIHRvIHRydWUgaWYgbm8gbG9hZGluZyBpcyBuZWVkZWQgYW5kXG4gICAgY29uc2VxdWVudGx5IGRvIG5vdCBqdW1wIHRvIHRoZSBmaXJzdCBwYWdlLCBidXRcbiAgICBqdXN0IHJlbG9hZCB0aGUgY3VycmVudCBwYWdlXG4qL1xuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF90YWJsZShkaXNhYmxlX2xvYWRpbmcpIHtcbiAgICAvKiBOT1RFOiBmaXJzdCByZWZyZXNoX3RhYmxlIGlzIGNhbGxlZCB0aGVuIHNldF9yb3dzICovXG4gICAgZm9yY2VfcmVmcmVzaCA9IHRydWU7XG4gICAgZm9yY2VfZGlzYWJsZV9sb2FkaW5nID0gZGlzYWJsZV9sb2FkaW5nIHx8IGZhbHNlO1xuXG4gICAgaWYoZm9yY2VfZGlzYWJsZV9sb2FkaW5nKSB7XG4gICAgICAgIC8qIEluIGNhc2Ugb2YgZGlzYWJsZWQgbG9hZGluZywgcmVsb2FkIHRoZSBzYW1lIHBhZ2UgKi9cbiAgICAgICAgc2VsZWN0X3RhYmxlX3BhZ2UudmFsdWUuY2hhbmdlX2FjdGl2ZV9wYWdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLyogT3RoZXJ3aXNlIHJlbG9hZCBmcm9tIHBhZ2UgMSAqL1xuICAgICAgICBzZWxlY3RfdGFibGVfcGFnZS52YWx1ZS5jaGFuZ2VfYWN0aXZlX3BhZ2UoMCwgMCk7XG4gICAgfVxuICAgIGF3YWl0IG5leHRUaWNrKCk7XG5cbiAgICAvKiBSZXNldCB0aGUgcmVmcmVzaC9sb2FkaW5nIHBhcmFtcyAqL1xuICAgIGZvcmNlX3JlZnJlc2ggPSBmYWxzZTtcbiAgICBmb3JjZV9kaXNhYmxlX2xvYWRpbmcgPSBmYWxzZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmxldCBmaXJzdF9nZXRfcm93cyA9IHRydWU7XG5hc3luYyBmdW5jdGlvbiBzZXRfcm93cygpIHtcbiAgICAvLyBjaGFuZ2luZ19yb3dzLnZhbHVlID0gdHJ1ZTtcbiAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZSAmJiAhZm9yY2VfZGlzYWJsZV9sb2FkaW5nO1xuICAgIGxldCByZXMgPSBhd2FpdCBwcm9wcy5nZXRfcm93cyhhY3RpdmVfcGFnZSwgcGVyX3BhZ2UudmFsdWUsIGNvbHVtbnNfd3JhcC52YWx1ZSwgbWFwX3NlYXJjaC52YWx1ZSwgZmlyc3RfZ2V0X3Jvd3MpO1xuICAgIHF1ZXJ5X2luZm8udmFsdWUgPSBudWxsO1xuICAgIGlmIChyZXMucXVlcnlfaW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHF1ZXJ5X2luZm8udmFsdWUgPSByZXMucXVlcnlfaW5mbztcbiAgICB9XG4gICAgZmlyc3RfZ2V0X3Jvd3MgPSBmYWxzZTtcbiAgICB0b3RhbF9yb3dzLnZhbHVlID0gcmVzLnJvd3MubGVuZ3RoO1xuICAgIGlmIChwcm9wcy5wYWdpbmcgPT0gdHJ1ZSkge1xuICAgICAgICB0b3RhbF9yb3dzLnZhbHVlID0gcmVzLnRvdGFsX3Jvd3M7XG4gICAgfVxuICAgIHJvd3MgPSByZXMucm93cztcbiAgICBzZXRfYWN0aXZlX3Jvd3MoKTtcbiAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgZW1pdCgncm93c19sb2FkZWQnLCByZXMpO1xufVxuXG5mdW5jdGlvbiBpc19jb2x1bW5fc29ydGFibGUoY29sKSB7XG4gICAgaWYgKHByb3BzLmZfaXNfY29sdW1uX3NvcnRhYmxlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmZfaXNfY29sdW1uX3NvcnRhYmxlKGNvbCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRfYWN0aXZlX3Jvd3MoKSB7XG4gICAgbGV0IHN0YXJ0X3Jvd19pbmRleCA9IDA7XG4gICAgaWYgKHByb3BzLnBhZ2luZyA9PSBmYWxzZSkge1xuICAgICAgICBzdGFydF9yb3dfaW5kZXggPSBhY3RpdmVfcGFnZSAqIHBlcl9wYWdlLnZhbHVlO1xuICAgIH1cbiAgICBpZiAocHJvcHMucGFnaW5nID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBmX3NvcnQgPSBnZXRfc29ydF9mdW5jdGlvbigpO1xuICAgICAgICBsZXQgY29sX3RvX3NvcnQgPSBnZXRfY29sdW1uX3RvX3NvcnQoKTtcbiAgICAgICAgcm93cyA9IHJvd3Muc29ydCgocjAsIHIxKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZl9zb3J0KGNvbF90b19zb3J0LCByMCwgcjEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWN0aXZlX3Jvd3MudmFsdWUgPSByb3dzLnNsaWNlKHN0YXJ0X3Jvd19pbmRleCwgc3RhcnRfcm93X2luZGV4ICsgcGVyX3BhZ2UudmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRfY29sdW1uX3RvX3NvcnQoKSB7XG4gICAgbGV0IGNvbF90b19zb3J0ID0gY29sdW1uc193cmFwLnZhbHVlLmZpbmQoKGMpID0+IGMuc29ydCAhPSAwKTtcbiAgICByZXR1cm4gY29sX3RvX3NvcnQ7XG59XG5cbmxldCBtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0O1xuYXN5bmMgZnVuY3Rpb24gb25fY2hhbmdlX21hcF9zZWFyY2goKSB7XG4gICAgbGV0IHRpbWVvdXQgPSAxMDAwO1xuICAgIGlmIChtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KG1hcF9zZWFyY2hfY2hhbmdlX3RpbWVvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSAwO1xuICAgIH1cbiAgICBtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0ID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHNldF9yb3dzKCk7XG4gICAgICAgIG1hcF9zZWFyY2hfY2hhbmdlX3RpbWVvdXQgPSBudWxsO1xuICAgIH0sIHRpbWVvdXQpO1xuXG59XG5cbmZ1bmN0aW9uIHNlYXJjaF92YWx1ZSh2YWx1ZSkge1xuICAgIG1hcF9zZWFyY2gudmFsdWUgPSB2YWx1ZTsgLyogQWRkIHRoZSBuZXcgdmFsdWUgKi9cbiAgICBvbl9jaGFuZ2VfbWFwX3NlYXJjaCgpO1xufVxuXG5mdW5jdGlvbiBjb3B5X3F1ZXJ5X2ludG9fY2xpcGJvYXJkKCRldmVudCkge1xuICAgIE50b3BVdGlscy5jb3B5VG9DbGlwYm9hcmQocXVlcnlfaW5mby52YWx1ZS5xdWVyeSwgcXVlcnlfaW5mb19zcWxfYnV0dG9uLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbHVtbnNfZGVmcygpIHtcbiAgICByZXR1cm4gY29sdW1uc193cmFwLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRfcm93c19udW0oKSB7XG4gICAgcmV0dXJuIHRvdGFsX3Jvd3MudmFsdWU7XG59XG5cbmRlZmluZUV4cG9zZSh7IGxvYWRfdGFibGUsIHJlZnJlc2hfdGFibGUsIGdldF9jb2x1bW5zX2RlZnMsIGdldF9yb3dzX251bSwgc2VhcmNoX3ZhbHVlIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5zdGlja3kge1xuICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuLndyYXAtY29sdW1uIHtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5wb2ludGVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi51bnNldCB7XG4gICAgY3Vyc29yOiB1bnNldDtcbn1cblxuLmxpbmstYnV0dG9uIHtcbiAgICBjb2xvcjogdmFyKC0tYnMtZHJvcGRvd24tbGluay1jb2xvcik7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ubGluay1kaXNhYmxlZCB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgY29sb3I6ICNjY2M7XG59XG5cbnRkIHtcbiAgICBoZWlnaHQ6IDIuNXJlbTtcbn1cblxuLm1hcmdpbi1zbSB7XG4gICAgbWFyZ2luLWJvdHRvbTogLTAuMjVyZW07XG4gICAgbWFyZ2luLXRvcDogLTAuMjVyZW07XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPFRhYmxlIHYtaWY9XCJtb3VudF90YWJsZVwiIHJlZj1cInRhYmxlXCJcblx0IDppZD1cInRhYmxlX2lkXzJcIlxuXHQgOmNvbHVtbnM9XCJ0YWJsZV9jb25maWcuY29sdW1uc1wiXG4gICAgICAgICA6Z2V0X3Jvd3M9XCJ0YWJsZV9jb25maWcuZ2V0X3Jvd3NcIlxuICAgICAgICAgOmdldF9jb2x1bW5faWQ9XCJ0YWJsZV9jb25maWcuZ2V0X2NvbHVtbl9pZFwiXG4gICAgICAgICA6cHJpbnRfY29sdW1uX25hbWU9XCJ0YWJsZV9jb25maWcucHJpbnRfY29sdW1uX25hbWVcIlxuXHQgOnByaW50X2h0bWxfcm93PVwidGFibGVfY29uZmlnLnByaW50X2h0bWxfcm93XCJcblx0IDpwcmludF92dWVfbm9kZV9yb3c9XCJ0YWJsZV9jb25maWcucHJpbnRfdnVlX25vZGVfcm93XCJcblx0IDpmX2lzX2NvbHVtbl9zb3J0YWJsZT1cInRhYmxlX2NvbmZpZy5mX2lzX2NvbHVtbl9zb3J0YWJsZVwiXG5cdCA6Zl9nZXRfY29sdW1uX2NsYXNzZXM9XCJ0YWJsZV9jb25maWcuZl9nZXRfY29sdW1uX2NsYXNzZXNcIlxuXHQgOmZfZ2V0X2NvbHVtbl9zdHlsZT1cInRhYmxlX2NvbmZpZy5mX2dldF9jb2x1bW5fc3R5bGVcIlxuXHQgOmRpc3BsYXlfZW1wdHlfcm93cz1cInRhYmxlX2NvbmZpZy5kaXNwbGF5X2VtcHR5X3Jvd3NcIlxuXHQgOmZfc29ydF9yb3dzPVwiZl9zb3J0X3Jvd3NcIlxuXHQgOmVuYWJsZV9zZWFyY2g9XCJ0YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG5cdCA6ZGVmYXVsdF9zb3J0PVwidGFibGVfY29uZmlnLmRlZmF1bHRfc29ydFwiXG5cdCA6c2hvd19hdXRvcmVmcmVzaD1cInRhYmxlX2NvbmZpZy5zaG93X2F1dG9yZWZyZXNoXCJcblx0IDpwYWdpbmc9XCJ0YWJsZV9jb25maWcucGFnaW5nXCJcblx0IDpjc3JmPVwiY3NyZlwiXG4gICAgIDpkaXNwbGF5X21lc3NhZ2U9XCJkaXNwbGF5X21lc3NhZ2VcIlxuICAgICA6bWVzc2FnZV90b19kaXNwbGF5PVwibWVzc2FnZV90b19kaXNwbGF5XCJcblx0IEBsb2FkZWQ9XCJvbl9sb2FkZWRcIlxuICAgICBAcm93c19sb2FkZWQ9XCJyb3dzX2xvYWRlZFwiXG5cdCBAY3VzdG9tX2V2ZW50PVwib25fY3VzdG9tX2V2ZW50XCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuICAgICAgPHNsb3QgbmFtZT1cImN1c3RvbV9oZWFkZXJcIj48L3Nsb3Q+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9UYWJsZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBvbkJlZm9yZVVubW91bnQsIG5leHRUaWNrIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZSB9IGZyb20gXCIuL3RhYmxlLnZ1ZVwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90YWJsZS11dGlsc1wiO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydjdXN0b21fZXZlbnQnLCAnbG9hZGVkJywgJ3Jvd3NfbG9hZGVkJ10pXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0YWJsZV9jb25maWdfaWQ6IFN0cmluZywgLy8gbmFtZSBvZiBjb25maWd1cmF0aW9uIGZpbGUgaW4gaHR0cGRvY3MvdGFibGVzX2NvbmZpZ1xuICAgIHRhYmxlX2lkOiBTdHJpbmcsIC8vIGlkIG9mIHRhYmxlLCBzYW1lIHRhYmxlX2NvbmZpZ19pZCBjYW4gaGF2ZSBkaWZmZXJlbnQgdGFibGVfaWQgYW5kIHRoZW4gZGlmZmVyZW50IGNvbHVtdW5zIHZpc2libGUgc2V0dGluc1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICBmX21hcF9jb25maWc6IEZ1bmN0aW9uLFxuICAgIGZfbWFwX2NvbHVtbnM6IEZ1bmN0aW9uLFxuICAgIGZfc29ydF9yb3dzOiBGdW5jdGlvbixcbiAgICBnZXRfZXh0cmFfcGFyYW1zX29iajogRnVuY3Rpb24sXG4gICAgZGlzcGxheV9tZXNzYWdlOiBCb29sZWFuLFxuICAgIG1lc3NhZ2VfdG9fZGlzcGxheTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSk7XG5jb25zdCB0YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vdW50X3RhYmxlID0gcmVmKGZhbHNlKTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvcHMudGFibGVfaWQgIT0gbnVsbCB8fCBwcm9wcy50YWJsZV9jb25maWdfaWQgIT0gbnVsbCkge1xuXHRsb2FkX3RhYmxlKCk7XG4gICAgfVxufSk7XG5cbndhdGNoKCgpID0+IFtwcm9wcy50YWJsZV9pZCwgcHJvcHMudGFibGVfY29uZmlnX2lkXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgbG9hZF90YWJsZSgpO1xufSwgeyBmbHVzaDogJ3ByZSd9KTtcblxuY29uc3QgdGFibGVfaWRfMiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMudGFibGVfaWQgIT0gbnVsbCkgeyByZXR1cm4gcHJvcHMudGFibGVfaWQ7IH1cbiAgICByZXR1cm4gcHJvcHMudGFibGVfY29uZmlnX2lkO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGUoKSB7XG4gICAgbW91bnRfdGFibGUudmFsdWUgPSBmYWxzZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGxldCB0YWJsZV9jb25maWdfaWRfMiA9IHByb3BzLnRhYmxlX2NvbmZpZ19pZDtcbiAgICBpZiAodGFibGVfY29uZmlnX2lkXzIgPT0gbnVsbCkge1xuXHR0YWJsZV9jb25maWdfaWRfMiA9IHByb3BzLnRhYmxlX2lkO1xuICAgIH1cbiAgICB0YWJsZV9jb25maWcudmFsdWUgPSBhd2FpdCBUYWJsZVV0aWxzLmJ1aWxkX3RhYmxlKGh0dHBfcHJlZml4LCB0YWJsZV9jb25maWdfaWRfMiwgcHJvcHMuZl9tYXBfY29sdW1ucywgcHJvcHMuZ2V0X2V4dHJhX3BhcmFtc19vYmopO1xuICAgIGlmIChwcm9wcy5mX21hcF9jb25maWcgIT0gbnVsbCkge1xuXHR0YWJsZV9jb25maWcudmFsdWUgPSBwcm9wcy5mX21hcF9jb25maWcodGFibGVfY29uZmlnLnZhbHVlKTtcbiAgICB9XG4gICAgbW91bnRfdGFibGUudmFsdWUgPSB0cnVlO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG59XG5cbmZ1bmN0aW9uIG9uX2xvYWRlZCgpIHtcbiAgICBlbWl0KCdsb2FkZWQnKTtcbn1cblxuZnVuY3Rpb24gb25fY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgZW1pdCgnY3VzdG9tX2V2ZW50JywgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiByb3dzX2xvYWRlZChyZXMpIHtcbiAgICBlbWl0KCdyb3dzX2xvYWRlZCcsIHJlcyk7XG59XG5cbmNvbnN0IHJlZnJlc2hfdGFibGUgPSAoZGlzYWJsZV9sb2FkaW5nKSA9PiB7XG4gICAgdGFibGUudmFsdWUucmVmcmVzaF90YWJsZShkaXNhYmxlX2xvYWRpbmcpO1xufVxuXG5jb25zdCBnZXRfY29sdW1uc19kZWZzID0gKCkgPT4ge1xuICAgIGlmICh0YWJsZS52YWx1ZSA9PSBudWxsKSB7IHJldHVybiBbXTsgfVxuICAgIHJldHVybiB0YWJsZS52YWx1ZS5nZXRfY29sdW1uc19kZWZzKCk7XG59XG5cbmNvbnN0IGdldF9yb3dzX251bSA9ICgpID0+IHtcbiAgICByZXR1cm4gdGFibGUudmFsdWUuZ2V0X3Jvd3NfbnVtKCk7XG59XG5cbmNvbnN0IHNlYXJjaF92YWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHRhYmxlLnZhbHVlLnNlYXJjaF92YWx1ZSh2YWx1ZSk7XG59XG5cbmRlZmluZUV4cG9zZSh7IHJlZnJlc2hfdGFibGUsIGdldF9jb2x1bW5zX2RlZnMsIGdldF9yb3dzX251bSwgc2VhcmNoX3ZhbHVlIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHYtaWY9XCJzaG93XCIgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnlcIiA6c3R5bGU9XCJ7J3dpZHRoJzogc2l6ZSwgJ2hlaWdodCc6IHNpemV9XCIgcm9sZT1cInN0YXR1c1wiPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHNpemU6IFN0cmluZyxcbiAgICBzaG93OiBCb29sZWFuLFxufSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG59KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyLTIzIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJzY3JpcHQtZGVzY3JpcHRpb25cIiBjbGFzcz1cIm5vdGVzIGJnLWxpZ2h0IGJvcmRlclwiIHJvbGU9XCJhbGVydFwiPlxuICAgIDxiPnt7IF9pMThuKCdub3RlcycpIH19PC9iPlxuICAgIDx1bD5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIm5vdGUgaW4gcHJvcHMubm90ZV9saXN0XCI+XG4gICAgICAgIDxsaSB2LWh0bWw9XCJub3RlXCI+PC9saT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInByb3BzLmFkZF9zdWJfbm90ZXNcIj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIm5vdGUgaW4gcHJvcHMuc3ViX25vdGVfbGlzdFwiPlxuICAgICAgICAgICAgPGxpIHYtaHRtbD1cIm5vdGVcIj48L2xpPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3RlbXBsYXRlPiAgXG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgbm90ZV9saXN0OiBBcnJheSxcbiAgc3ViX25vdGVfbGlzdDogQXJyYXksXG4gIGFkZF9zdWJfbm90ZXM6IEJvb2xlYW4sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgQGFwcGx5PVwiYXBwbHlcIiByZWY9XCJtb2RhbFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9leHRyYWN0Jyl9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnRcIiA6Y2xhc3M9XCJ7ICdhbGVydC1pbmZvJzogZGF0YV9hdmFpbGFibGUgIT0gMiwgJ2FsZXJ0LXdhcm5pbmcnOiBkYXRhX2F2YWlsYWJsZSA9PSAyIH1cIiB2LWh0bWw9XCJkZXNjcmlwdGlvblwiPjwvZGl2PlxuICAgIDxmb3JtIHYtaWY9XCJkYXRhX2F2YWlsYWJsZSA9PSAxXCIgc3R5bGU9XCJoZWlnaHQ6OTUlO1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCIgc3R5bGU9XCJoZWlnaHQ6MTAwJTtcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTMgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfaGlkZV9tZW51XCI+e3tpMThuKCdhZHZhbmNlZCcpfX08aSA6Y2xhc3M9XCJ7ICdmYXMgZmEtY2FyZXQtZG93bic6IHNob3dfbWVudSwgJ2ZhcyBmYS1jYXJldC11cCc6ICFzaG93X21lbnV9XCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXHQgIFxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTkgdGV4dC1yaWdodCBhc2RcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDFyZW07XCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiICB2YWx1ZT1cInRydWVcIiBjaGVja2VkPVwiXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdF9ub3cnKX19IDwvbGFiZWw+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgdmFsdWU9XCJmYWxzZVwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnF1ZXVlX2FzX2pvYicpfX0gPC9sYWJlbD5cblx0ICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cdFxuICAgICAgICA8ZGl2IHYtc2hvdz1cInNob3dfbWVudVwiIGNsYXNzPVwicm93XCIgaWQ9XCJwY2FwRG93bmxvYWRNb2RhbF9hZHZhbmNlZFwiIHN0eWxlPVwiXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMTIgaGFzLWZlZWRiYWNrXCI+XG5cdCAgICA8YnI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfYnBmJyl9fSA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm50b3Aub3JnL2d1aWRlcy9uMmRpc2svZmlsdGVycy5odG1sXCI+PGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cblx0ICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1hZGRvblwiPjxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1maWx0ZXJcIj48L3NwYW4+PC9zcGFuPlxuXHQgICAgICA8aW5wdXQgbmFtZT1cImJwZl9maWx0ZXJcIiB2LW1vZGVsPVwiYnBmX2ZpbHRlclwiIGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCIgZGF0YS1icGY9XCJicGZcIiBhdXRvY29tcGxldGU9XCJvZmZcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIj5cblx0ICAgICAgPHNwYW4gdi1zaG93PVwiaW52YWxpZF9icGZcIiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtkaXNwbGF5OmJsb2NrO1wiIGNsYXNzPVwiaW52YWxpZC1mZWVkYmFjayBcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cdCAgICA8YnI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5maWx0ZXJfZXhhbXBsZXMnKX19OjwvbGFiZWw+XG5cdCAgICA8YnI+XG5cdCAgICA8dWw+XG5cdCAgICAgIDxsaT5Ib3N0OiA8aT5ob3N0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5IVFRQOiA8aT50Y3AgYW5kIHBvcnQgODA8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgYmV0d2VlbiBob3N0czogPGk+aXAgaG9zdCAxOTIuMTY4LjEuMSBhbmQgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPlRyYWZmaWMgZnJvbSBhbiBob3N0IHRvIGFub3RoZXI6IDxpPmlwIHNyYyAxOTIuMTY4LjEuMSBhbmQgZHN0IDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdi1zaG93PVwiZGF0YV9hdmFpbGFibGUgIT0gMlwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtc2hvdz1cImRhdGFfYXZhaWxhYmxlID09IDJcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignb2snKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+ICBcbjwvbW9kYWw+ICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG5cdCdtb2RhbCc6IE1vZGFsLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgZGVzY3JpcHRpb246IFwiXCIsXG5cdCAgICBpbnZhbGlkX2JwZjogZmFsc2UsXG5cdCAgICBicGZfZmlsdGVyOiBcIlwiLFxuXHQgICAgZXh0cmFjdF9ub3c6IHRydWUsXG5cdCAgICBzaG93X21lbnU6IHRydWUsXG5cdCAgICBkYXRhX2F2YWlsYWJsZTogMCwgLy8gMCA9PSBsb2FkaW5nLCAxID09IGF2YWlsYWJsZSwgMiA9PSBubyBkYXRhXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGVwb2NoX2ludGVydmFsOiBudWxsLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHBhZDJfbnVtYmVyOiBmdW5jdGlvbihudW1iZXIpIHtcblx0ICAgIHJldHVybiBTdHJpbmcobnVtYmVyKS5wYWRTdGFydCgyLCAnMCcpO1xuXHR9LFxuXHRmb3JtYXRfZGF0ZTogZnVuY3Rpb24oZCkge1xuXHQgICAgLy8gbGV0IGRheSA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXREYXRlKCkpO1xuXHQgICAgLy8gbGV0IG1vbnRoID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1vbnRoKCkpO1xuXHQgICAgLy8gbGV0IGhvdXJzID0gdGhpcy5wYWQyX251bWJlcihkLmdldEhvdXJzKCkpO1xuXHQgICAgLy8gbGV0IG1pbnV0ZXMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TWludXRlcygpKTtcblx0ICAgIC8vIGxldCBzID0gYCR7ZGF5fS8ke21vbnRofS8ke2QuZ2V0RnVsbFllYXIoKX0gJHtob3Vyc306JHttaW51dGVzfWA7XG5cdCAgICBsZXQgZF9tcyA9IGQudmFsdWVPZigpO1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChkX21zKTtcblx0fSxcblx0YXBwbHk6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMuYnBmX2ZpbHRlciAhPSBudWxsICYmIHRoaXMuYnBmX2ZpbHRlciAhPSBcIlwiKSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGVjay9maWx0ZXIubHVhP3F1ZXJ5PSR7dGhpcy5icGZfZmlsdGVyfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdHRoaXMuaW52YWxpZF9icGYgPSAhcmVzLnJlc3BvbnNlO1xuXHRcdGlmICh0aGlzLmludmFsaWRfYnBmID09IHRydWUpIHtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cdFx0XG5cdCAgICB9XG5cdCAgICBsZXQgdXJsX3JlcXVlc3Rfb2JqID0ge1xuXHRcdGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcblx0XHRlcG9jaF9iZWdpbjogdGhpcy5lcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbixcblx0XHRlcG9jaF9lbmQ6IHRoaXMuZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kLFxuXHRcdGJwZl9maWx0ZXI6IHRoaXMuYnBmX2ZpbHRlcixcblx0ICAgIH07XG5cdCAgICBsZXQgdXJsX3JlcXVlc3RfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9yZXF1ZXN0X29iaik7XG5cdCAgICBpZiAodGhpcy5leHRyYWN0X25vdyA9PSB0cnVlKSB7XG5cdFx0XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9wY2FwL2xpdmVfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHR3aW5kb3cub3Blbih1cmxfcmVxdWVzdCwgJ19zZWxmJywgZmFsc2UpO1xuXHQgICAgfSBlbHNlIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3RyYWZmaWNfZXh0cmFjdGlvbi5sdWE/JHt1cmxfcmVxdWVzdF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuXHRcdGxldCBqb2JfaWQgPSByZXNwLmlkO1xuXHRcdC8vbGV0IGpvYl9pZCA9IDI7XG5cdFx0bGV0IGFsZXJ0X3RleHRfaHRtbCA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rpb25fc2NoZWR1bGVkJyk7XG5cdFx0bGV0IHBhZ2VfbmFtZSA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnRyYWZmaWNfZXh0cmFjdGlvbl9qb2JzJyk7XG5cdFx0bGV0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIik7XG5cdFx0bGV0IGhyZWYgPSBgPGEgaHJlZj1cIi9sdWEvaWZfc3RhdHMubHVhP2lmaWQ9JHtpZmlkfSZwYWdlPXRyYWZmaWNfcmVjb3JkaW5nJnRhYj1qb2JzJmpvYl9pZD0ke2pvYl9pZH1cIj4ke3BhZ2VfbmFtZX08L2E+YDsgXG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYWxlcnRfdGV4dF9odG1sLnJlcGxhY2UoJyV7cGFnZX0nLCBocmVmKTtcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBgJHthbGVydF90ZXh0X2h0bWx9ICR7am9iX2lkfWA7XG5cdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBhbGVydF90ZXh0X2h0bWwsIHR5cGU6IFwiYWxlcnQtc3VjY2Vzc1wiIH0pO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdHRoaXMuZGF0YV9hdmFpbGFibGUgPSAwO1xuXHQgICAgfSwgMTAwMCk7XG5cdH0sXG5cdHNob3c6IGFzeW5jIGZ1bmN0aW9uKGJwZl9maWx0ZXIsIGVwb2NoX2ludGVydmFsKSB7XHQgICAgXG5cdCAgICBpZiAoZXBvY2hfaW50ZXJ2YWwgPT0gbnVsbCkge1xuXHRcdGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdGlmIChzdGF0dXMuZXBvY2hfYmVnaW4gPT0gbnVsbCB8fCBzdGF0dXMuZXBvY2hfZW5kID09IG51bGwpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihcIm1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogZXBvY2hfYmVnaW4gYW5kIGVwb2NoX2VuZCB1bmRlZmluZWQgaW4gdXJsXCIpO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGVwb2NoX2ludGVydmFsID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcblx0ICAgIH1cblx0ICAgIHRoaXMuZXBvY2hfaW50ZXJ2YWwgPSBlcG9jaF9pbnRlcnZhbDtcblx0ICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGVwb2NoX2ludGVydmFsKTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvY2hlY2tfcmVjb3JkaW5nX2RhdGEubHVhPyR7dXJsX3BhcmFtc31gO1xuXHQgICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG5cdCAgICBpZiAocmVzLmF2YWlsYWJsZSA9PSBmYWxzZSkge1xuXHRcdHRoaXMuZGF0YV9hdmFpbGFibGUgPSAyO1xuXHRcdHRoaXMuZGVzY3JpcHRpb24gPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5ub19yZWNvcmRlZF9kYXRhJyk7XG5cdFx0dGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICB0aGlzLmRhdGFfYXZhaWxhYmxlID0gMTtcblx0ICAgIGxldCBleHRyYV9pbmZvID0gXCJcIjtcblx0ICAgIGlmIChyZXMuaW5mbyAhPSBudWxsKSB7XG5cdFx0ZXh0cmFfaW5mbyA9IHJlcy5pbmZvO1xuXHQgICAgfTtcblx0ICAgIGlmIChicGZfZmlsdGVyID09IG51bGwpIHtcblx0XHRsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHRcdGlmIChyZXMgPT0gbnVsbCB8fCByZXMuYnBmID09IG51bGwpIHtcblx0XHQgICAgY29uc29sZS5lcnJvcihgbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiAke3VybF9yZXF1ZXN0fSByZXR1cm4gbnVsbCB2YWx1ZWApO1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdGJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgfVxuXHQgICAgdGhpcy5zZXRfZGVzY3JpcHRpb25zKGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLCBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsIGV4dHJhX2luZm8pO1xuXHQgICAgXG5cdCAgICAvLyBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHQgICAgLy8gbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdCAgICAvLyBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0ICAgIC8vIHRoaXMuYnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB0aGlzLmJwZl9maWx0ZXIgPSBicGZfZmlsdGVyO1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLnNob3coKTtcblx0fSxcblx0c2V0X2Rlc2NyaXB0aW9uczogZnVuY3Rpb24oZXBvY2hfYmVnaW4sIGVwb2NoX2VuZCwgaW5mbykge1xuXHQgICAgbGV0IGRhdGVfYmVnaW4gPSBuZXcgRGF0ZShlcG9jaF9iZWdpbiAqIDEwMDApO1xuXHQgICAgbGV0IGRhdGVfZW5kID0gbmV3IERhdGUoZXBvY2hfZW5kICogMTAwMCk7XG5cdCAgICBcblx0ICAgIGxldCBkZXNjID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuYWJvdXRfdG9fZG93bmxvYWRfZmxvdycpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2JlZ2lufScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9iZWdpbikpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtkYXRlX2VuZH0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfZW5kKSk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2V4dHJhX2luZm99JywgaW5mbyk7XG5cdCAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzYztcblx0fSxcblx0c2hvd19oaWRlX21lbnU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X21lbnUgPSAhdGhpcy5zaG93X21lbnU7XG5cdH0sXG4gICAgfSxcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0IH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmlucHV0OmludmFsaWQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG48bW9kYWwgOmlkPVwiaWRfbW9kYWxcIiBAYXBwbHk9XCJhcHBseVwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2V4dHJhY3QnKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJhbGVydFwiIDpjbGFzcz1cInsgJ2FsZXJ0LWluZm8nOiBkYXRhX2F2YWlsYWJsZSAhPSAyLCAnYWxlcnQtd2FybmluZyc6IGRhdGFfYXZhaWxhYmxlID09IDIgfVwiIHYtaHRtbD1cImRlc2NyaXB0aW9uXCI+PC9kaXY+XG4gICAgPGZvcm0gdi1pZj1cImRhdGFfYXZhaWxhYmxlID09IDFcIiBzdHlsZT1cImhlaWdodDo5NSU7XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMyBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19oaWRlX21lbnVcIj57e2kxOG4oJ2FkdmFuY2VkJyl9fTxpIDpjbGFzcz1cInsgJ2ZhcyBmYS1jYXJldC1kb3duJzogc2hvd19tZW51LCAnZmFzIGZhLWNhcmV0LXVwJzogIXNob3dfbWVudX1cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cdCAgXG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtOSB0ZXh0LXJpZ2h0IGFzZFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMXJlbTtcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgIHZhbHVlPVwidHJ1ZVwiIGNoZWNrZWQ9XCJcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0X25vdycpfX0gPC9sYWJlbD5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiB2YWx1ZT1cImZhbHNlXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucXVldWVfYXNfam9iJyl9fSA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblx0XG4gICAgICAgIDxkaXYgdi1zaG93PVwic2hvd19tZW51XCIgY2xhc3M9XCJyb3dcIiBpZD1cInBjYXBEb3dubG9hZE1vZGFsX2FkdmFuY2VkXCIgc3R5bGU9XCJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0xMiBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxicj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9icGYnKX19IDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL24yZGlzay9maWx0ZXJzLmh0bWxcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXHQgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZpbHRlclwiPjwvc3Bhbj48L3NwYW4+XG5cdCAgICAgIDxpbnB1dCBuYW1lPVwiYnBmX2ZpbHRlclwiIHYtbW9kZWw9XCJicGZfZmlsdGVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBkYXRhLWJwZj1cImJwZlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxuXHQgICAgICA8c3BhbiB2LXNob3c9XCJpbnZhbGlkX2JwZlwiIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO2Rpc3BsYXk6YmxvY2s7XCIgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrIFwiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICAgIDxicj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9leGFtcGxlcycpfX06PC9sYWJlbD5cblx0ICAgIDxicj5cblx0ICAgIDx1bD5cblx0ICAgICAgPGxpPkhvc3Q6IDxpPmhvc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPkhUVFA6IDxpPnRjcCBhbmQgcG9ydCA4MDwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBiZXR3ZWVuIGhvc3RzOiA8aT5pcCBob3N0IDE5Mi4xNjguMS4xIGFuZCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBmcm9tIGFuIGhvc3QgdG8gYW5vdGhlcjogPGk+aXAgc3JjIDE5Mi4xNjguMS4xIGFuZCBkc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3RlbXBsYXRlPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJkYXRhX2F2YWlsYWJsZSAhPSAyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1zaG93PVwiZGF0YV9hdmFpbGFibGUgPT0gMlwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJjbG9zZVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdvaycpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT4gIFxuPC9tb2RhbD4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgdXBkYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBkZXNjcmlwdGlvbjogXCJcIixcblx0ICAgIGludmFsaWRfYnBmOiBmYWxzZSxcblx0ICAgIGJwZl9maWx0ZXI6IFwiXCIsXG5cdCAgICBleHRyYWN0X25vdzogdHJ1ZSxcblx0ICAgIHNob3dfbWVudTogdHJ1ZSxcblx0ICAgIGRhdGFfYXZhaWxhYmxlOiAwLCAvLyAwID09IGxvYWRpbmcsIDEgPT0gYXZhaWxhYmxlLCAyID09IG5vIGRhdGFcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgZXBvY2hfaW50ZXJ2YWw6IG51bGwsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0cGFkMl9udW1iZXI6IGZ1bmN0aW9uKG51bWJlcikge1xuXHQgICAgcmV0dXJuIFN0cmluZyhudW1iZXIpLnBhZFN0YXJ0KDIsICcwJyk7XG5cdH0sXG5cdGZvcm1hdF9kYXRlOiBmdW5jdGlvbihkKSB7XG5cdCAgICAvLyBsZXQgZGF5ID0gdGhpcy5wYWQyX251bWJlcihkLmdldERhdGUoKSk7XG5cdCAgICAvLyBsZXQgbW9udGggPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TW9udGgoKSk7XG5cdCAgICAvLyBsZXQgaG91cnMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0SG91cnMoKSk7XG5cdCAgICAvLyBsZXQgbWludXRlcyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNaW51dGVzKCkpO1xuXHQgICAgLy8gbGV0IHMgPSBgJHtkYXl9LyR7bW9udGh9LyR7ZC5nZXRGdWxsWWVhcigpfSAke2hvdXJzfToke21pbnV0ZXN9YDtcblx0ICAgIGxldCBkX21zID0gZC52YWx1ZU9mKCk7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRfbXMpO1xuXHR9LFxuXHRhcHBseTogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAodGhpcy5icGZfZmlsdGVyICE9IG51bGwgJiYgdGhpcy5icGZfZmlsdGVyICE9IFwiXCIpIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2NoZWNrL2ZpbHRlci5sdWE/cXVlcnk9JHt0aGlzLmJwZl9maWx0ZXJ9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0dGhpcy5pbnZhbGlkX2JwZiA9ICFyZXMucmVzcG9uc2U7XG5cdFx0aWYgKHRoaXMuaW52YWxpZF9icGYgPT0gdHJ1ZSkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVx0XHRcblx0ICAgIH1cblx0ICAgIGxldCB1cmxfcmVxdWVzdF9vYmogPSB7XG5cdFx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpLFxuXHRcdGVwb2NoX2JlZ2luOiB0aGlzLmVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLFxuXHRcdGVwb2NoX2VuZDogdGhpcy5lcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsXG5cdFx0YnBmX2ZpbHRlcjogdGhpcy5icGZfZmlsdGVyLFxuXHQgICAgfTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3JlcXVlc3Rfb2JqKTtcblx0ICAgIGlmICh0aGlzLmV4dHJhY3Rfbm93ID09IHRydWUpIHtcblx0XHRcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3BjYXAvbGl2ZV9leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdHdpbmRvdy5vcGVuKHVybF9yZXF1ZXN0LCAnX3NlbGYnLCBmYWxzZSk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdHJhZmZpY19leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdGxldCByZXNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0bGV0IGpvYl9pZCA9IHJlc3AuaWQ7XG5cdFx0Ly9sZXQgam9iX2lkID0gMjtcblx0XHRsZXQgYWxlcnRfdGV4dF9odG1sID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdGlvbl9zY2hlZHVsZWQnKTtcblx0XHRsZXQgcGFnZV9uYW1lID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcudHJhZmZpY19leHRyYWN0aW9uX2pvYnMnKTtcblx0XHRsZXQgaWZpZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKTtcblx0XHRsZXQgaHJlZiA9IGA8YSBocmVmPVwiL2x1YS9pZl9zdGF0cy5sdWE/aWZpZD0ke2lmaWR9JnBhZ2U9dHJhZmZpY19yZWNvcmRpbmcmdGFiPWpvYnMmam9iX2lkPSR7am9iX2lkfVwiPiR7cGFnZV9uYW1lfTwvYT5gOyBcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBhbGVydF90ZXh0X2h0bWwucmVwbGFjZSgnJXtwYWdlfScsIGhyZWYpO1xuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGAke2FsZXJ0X3RleHRfaHRtbH0gJHtqb2JfaWR9YDtcblx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgeyB0ZXh0X2h0bWw6IGFsZXJ0X3RleHRfaHRtbCwgdHlwZTogXCJhbGVydC1zdWNjZXNzXCIgfSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNsb3NlKCk7XG5cdH0sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0dGhpcy5kYXRhX2F2YWlsYWJsZSA9IDA7XG5cdCAgICB9LCAxMDAwKTtcblx0fSxcblx0c2hvdzogYXN5bmMgZnVuY3Rpb24oYnBmX2ZpbHRlciwgZXBvY2hfaW50ZXJ2YWwpIHtcdCAgICBcblx0ICAgIGlmIChlcG9jaF9pbnRlcnZhbCA9PSBudWxsKSB7XG5cdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0aWYgKHN0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsIHx8IHN0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKFwibW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiBlcG9jaF9iZWdpbiBhbmQgZXBvY2hfZW5kIHVuZGVmaW5lZCBpbiB1cmxcIik7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0ZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBzdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogc3RhdHVzLmVwb2NoX2VuZCB9O1xuXHQgICAgfVxuXHQgICAgdGhpcy5lcG9jaF9pbnRlcnZhbCA9IGVwb2NoX2ludGVydmFsO1xuXHQgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMoZXBvY2hfaW50ZXJ2YWwpO1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9jaGVja19yZWNvcmRpbmdfZGF0YS5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdCAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBudWxsLCB0cnVlKTtcblx0ICAgIGlmIChyZXMuYXZhaWxhYmxlID09IGZhbHNlKSB7XG5cdFx0dGhpcy5kYXRhX2F2YWlsYWJsZSA9IDI7XG5cdFx0dGhpcy5kZXNjcmlwdGlvbiA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLm5vX3JlY29yZGVkX2RhdGEnKTtcblx0XHR0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHRcdHJldHVybjtcblx0ICAgIH1cblx0ICAgIHRoaXMuZGF0YV9hdmFpbGFibGUgPSAxO1xuXHQgICAgbGV0IGV4dHJhX2luZm8gPSBcIlwiO1xuXHQgICAgaWYgKHJlcy5pbmZvICE9IG51bGwpIHtcblx0XHRleHRyYV9pbmZvID0gcmVzLmluZm87XG5cdCAgICB9O1xuXHQgICAgaWYgKGJwZl9maWx0ZXIgPT0gbnVsbCkge1xuXHRcdGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0aWYgKHJlcyA9PSBudWxsIHx8IHJlcy5icGYgPT0gbnVsbCkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKGBtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246ICR7dXJsX3JlcXVlc3R9IHJldHVybiBudWxsIHZhbHVlYCk7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0YnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB9XG5cdCAgICB0aGlzLnNldF9kZXNjcmlwdGlvbnMoZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sIGVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCwgZXh0cmFfaW5mbyk7XG5cdCAgICBcblx0ICAgIC8vIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICAvLyBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIC8vIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHQgICAgLy8gdGhpcy5icGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIHRoaXMuYnBmX2ZpbHRlciA9IGJwZl9maWx0ZXI7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRzZXRfZGVzY3JpcHRpb25zOiBmdW5jdGlvbihlcG9jaF9iZWdpbiwgZXBvY2hfZW5kLCBpbmZvKSB7XG5cdCAgICBsZXQgZGF0ZV9iZWdpbiA9IG5ldyBEYXRlKGVwb2NoX2JlZ2luICogMTAwMCk7XG5cdCAgICBsZXQgZGF0ZV9lbmQgPSBuZXcgRGF0ZShlcG9jaF9lbmQgKiAxMDAwKTtcblx0ICAgIFxuXHQgICAgbGV0IGRlc2MgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5hYm91dF90b19kb3dubG9hZF9mbG93Jyk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfYmVnaW59JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2JlZ2luKSk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfZW5kfScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9lbmQpKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZXh0cmFfaW5mb30nLCBpbmZvKTtcblx0ICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjO1xuXHR9LFxuXHRzaG93X2hpZGVfbWVudTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfbWVudSA9ICF0aGlzLnNob3dfbWVudTtcblx0fSxcbiAgICB9LFxufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgIHt7X2kxOG4oXCJzbmFwc2hvdHMubWFuYWdlXCIpfX1cbiAgICAgIDxhIHRhcmdldD1cIl9uZXd0YWJcIiBocmVmPVwiI1wiIHN0eWxlPVwiXCIgY2xhc3M9XCJuYXYtaXRlbSB0ZXh0LW11dGVkXCI+PGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDoyOHJlbTtwYWRkaW5nLXRvcDowLjhyZW07XCI+PC9pPjwvYT4gICAgXG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8dWwgY2xhc3M9XCJuYXYgbmF2LXRhYnNcIj5cbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtXCIgQGNsaWNrPVwiYWN0aW9uPSdhZGQnXCI+XG5cdDxhIGNsYXNzPVwibmF2LWxpbmtcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGlvbiA9PSAnYWRkJ31cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJzbmFwc2hvdHMuYWRkXCIpfX08L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJ1cGRhdGVfYWN0aW9uKCdzZWxlY3QnKVwiPlxuXHQ8YSA6ZGlzYWJsZWQ9XCJzbmFwc2hvdHMubGVuZ3RoID09IDBcIiBjbGFzcz1cIm5hdi1saW5rXCIgOmNsYXNzPVwieydhY3RpdmUnOiBhY3Rpb24gPT0gJ3NlbGVjdCcsICdub3QtYWxsb3dlZCc6IHNuYXBzaG90cy5sZW5ndGggPT0gMCB9XCIgaHJlZj1cIiNcIj57e19pMThuKFwic25hcHNob3RzLm1hbmFnZVwiKX19PC9hPlxuICAgICAgPC9saT4gICAgICBcbiAgICA8L3VsPlxuICAgIDxkaXYgdi1pZj1cImFjdGlvbiA9PSAnYWRkJ1wiIHN0eWxlPVwibWluLWhlaWdodDo4LjVyZW1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPjxiPnt7X2kxOG4oXCJzbmFwc2hvdHMubmFtZVwiKX19OjwvYj48L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuX3NpbmdsZXdvcmRcIiBwbGFjZWhvbGRlcj1cIlwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwic25hcHNob3RfbmFtZVwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPCEtLSA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj4gLS0+XG4gICAgICA8IS0tIFx0PGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj4gLS0+XG4gICAgICA8IS0tIFx0ICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiB2LW1vZGVsPVwic2F2ZV90aW1lXCI+IC0tPlxuXHQgIFxuICAgICAgPCEtLSBcdCAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+e3tzYXZlX3RpbWVfdGV4dH19PC9sYWJlbD4gLS0+XG4gICAgICA8IS0tIFx0PC9kaXY+IC0tPlxuICAgICAgPCEtLSA8L2Rpdj4gICAgICAgLS0+XG4gICAgPC9kaXY+IDwhLS0gYWN0aW9uIGFkZCAtLT5cbiAgICBcbiAgICA8ZGl2IHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJzbmFwc2hvdHMub3JkZXJfYnlcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIEBjaGFuZ2U9XCJzb3J0X3NuYXBzaG90c19ieSgpXCIgdi1tb2RlbD1cIm9yZGVyX2J5XCI+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibmFtZVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMubmFtZVwiKX19PC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGF0ZVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuZGF0ZVwiKX19PC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJzbmFwc2hvdHMuc2VsZWN0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1zZWxlY3RcIiB2LW1vZGVsPVwic25hcHNob3Rfc2VsZWN0ZWRcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XCJpdGVtIGluIHNuYXBzaG90c1wiIDp2YWx1ZT1cIml0ZW1cIj57eyBkaXNwbGF5X25hbWUoaXRlbSkgfX08L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPlxuXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIHYtbW9kZWw9XCJhcHBseV90aW1lXCI+XG5cdCAgXG5cdCAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+e3thcHBseV90aW1lX3RleHR9fTwvbGFiZWw+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+IDwhLS0gYWN0aW9uIHNlbGVjdCAtLT5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ2FkZCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJzbmFwc2hvdHMuYWRkXCIpfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiBAY2xpY2s9XCJkZWxldGVfc25hcHNob3QodHJ1ZSlcIiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiBsZWZ0O21hcmdpbi1sZWZ0OiAwcHg7XCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBzdGFydC0wIHBvc2l0aW9uLWFic29sdXRlIG1zLTNcIj57e19pMThuKFwic25hcHNob3RzLmRlbGV0ZV9hbGxcIil9fTwvYnV0dG9uPiAgICBcbiAgICA8YnV0dG9uIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX3NuYXBzaG90XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+e3tfaTE4bihcInNuYXBzaG90cy5kZWxldGVcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzZWxlY3Rfc25hcHNob3RcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX3NlbGVjdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcInNuYXBzaG90cy5hcHBseVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWN0aW9uID0gcmVmKFwiYWRkXCIpOyAvLyBhZGQgLyBzZWxlY3RcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3Qgc25hcHNob3Rfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBhcHBseV90aW1lID0gcmVmKGZhbHNlKTtcbmNvbnN0IGFwcGx5X3RpbWVfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IHNhdmVfdGltZSA9IHJlZih0cnVlKTtcbmNvbnN0IHNhdmVfdGltZV90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3Qgc25hcHNob3RfbmFtZSA9IHJlZihcIlwiKTtcbmNvbnN0IHNuYXBzaG90cyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICBwYWdlOiBTdHJpbmcsXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkZWRfc25hcHNob3QnLCAnZGVsZXRlZF9zbmFwc2hvdCcsICdkZWxldGVkX2FsbF9zbmFwc2hvdHMnXSk7XG5cbmxldCBwYXR0ZXJuX3NpbmdsZXdvcmQgPSBOdG9wVXRpbHMuUkVHRVhFUy5zaW5nbGV3b3JkO1xuXG5jb25zdCBkaXNhYmxlX2FkZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcmcgPSBuZXcgUmVnRXhwKHBhdHRlcm5fc2luZ2xld29yZCk7XG4gICAgcmV0dXJuICFyZy50ZXN0KHNuYXBzaG90X25hbWUudmFsdWUpO1xufSk7XG5cbmNvbnN0IGRpc2FibGVfc2VsZWN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IHVwZGF0ZV9hY3Rpb24gPSAoYSkgPT4ge1xuICAgIGlmIChzbmFwc2hvdHMudmFsdWUubGVuZ3RoID09IDAgJiYgYSA9PSBcInNlbGVjdFwiKSB7IHJldHVybjsgfVxuICAgIGFjdGlvbi52YWx1ZSA9IGE7XG59XG5cbmZ1bmN0aW9uIGdldF9wYWdlKCkge1xuICAgIGlmIChwcm9wcy5wYWdlICE9IG51bGwpIHtcblx0cmV0dXJuIHByb3BzLnBhZ2U7XG4gICAgfVxuICAgIGxldCBpc19hbGVydF9zdGF0c191cmwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKS5tYXRjaCgvYWxlcnRfc3RhdHMubHVhLykgIT0gbnVsbDtcbiAgICBsZXQgcGFnZSA9IFwiYWxlcnRzXCI7XG4gICAgaWYgKCFpc19hbGVydF9zdGF0c191cmwpIHtcblx0cGFnZSA9IFwiZmxvd3NcIjtcbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlfbmFtZShzbmFwc2hvdCkge1xuICAgIGxldCB1dGNfbXMgPSBzbmFwc2hvdC51dGMgKiAxMDAwO1xuICAgIGxldCBkYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHV0Y19tcywgXCJERC9NTS9ZWVlZXCIpO1xuICAgIHJldHVybiBgJHtzbmFwc2hvdC5uYW1lfSAoJHtkYXRlfSlgXG59XG5cbmxldCBsYXN0X29yZGVyX2J5ID0gbnVsbDtcbmZ1bmN0aW9uIHNvcnRfc25hcHNob3RzX2J5KCkge1xuICAgIGlmIChsYXN0X29yZGVyX2J5ID09IG9yZGVyX2J5LnZhbHVlKSB7IHJldHVybjsgfVxuICAgIFxuICAgIHNuYXBzaG90cy52YWx1ZS5zb3J0KChhLCBiKSA9PiB7XG5cdGlmIChvcmRlcl9ieS52YWx1ZSA9PSBcIm5hbWVcIikge1xuXHQgICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG5cdH1cblx0cmV0dXJuIGEudXRjIC0gYi51dGM7XG4gICAgfSk7XG4gICAgaWYgKHNuYXBzaG90cy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlID0gc25hcHNob3RzLnZhbHVlWzBdO1xuICAgIH1cbiAgICBsYXN0X29yZGVyX2J5ID0gb3JkZXJfYnkudmFsdWU7ICAgIFxufVxuXG5sZXQgbG9hZF9zbmFwc2hvdHMgPSB0cnVlO1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhY3Rpb24udmFsdWUgPSBcImFkZFwiO1xuICAgIHNuYXBzaG90X25hbWUudmFsdWUgPSBcIlwiO1xuICAgIHNhdmVfdGltZS52YWx1ZSA9IHRydWU7XG4gICAgYXBwbHlfdGltZS52YWx1ZSA9IGZhbHNlO1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIGxldCBzYXZlX3RpbWVfZmlsdGVyX3RleHQgPSBfaTE4bihcInNuYXBzaG90cy5zYXZlX3RpbWVcIik7XG4gICAgbGV0IGJlZ2luX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCwgXCJERC9NTS9ZWVlZIEhIOm1tXCIpO1xuICAgIGxldCBlbmRfdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfZW5kICogMTAwMCwgXCJERC9NTS9ZWVlZIEhIOm1tXCIpO1xuICAgIHNhdmVfdGltZV9maWx0ZXJfdGV4dCA9IHNhdmVfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCViZWdpbl90aW1lLywgYmVnaW5fdGltZSk7XG4gICAgc2F2ZV90aW1lX2ZpbHRlcl90ZXh0ID0gc2F2ZV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWVuZF90aW1lLywgZW5kX3RpbWUpO1xuICAgIHNhdmVfdGltZV90ZXh0LnZhbHVlID0gc2F2ZV90aW1lX2ZpbHRlcl90ZXh0O1xuICAgIGxldCBhcHBseV90aW1lX2ZpbHRlcl90ZXh0ID0gX2kxOG4oXCJzbmFwc2hvdHMuYXBwbHlfdGltZVwiKTtcbiAgICBhcHBseV90aW1lX2ZpbHRlcl90ZXh0ID0gYXBwbHlfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCViZWdpbl90aW1lLywgYmVnaW5fdGltZSk7XG4gICAgYXBwbHlfdGltZV9maWx0ZXJfdGV4dCA9IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlZW5kX3RpbWUvLCBlbmRfdGltZSk7XG4gICAgYXBwbHlfdGltZV90ZXh0LnZhbHVlID0gYXBwbHlfdGltZV9maWx0ZXJfdGV4dDtcbiAgICBpZiAobG9hZF9zbmFwc2hvdHMpIHtcblx0bG9hZF9zbmFwc2hvdHMgPSBmYWxzZTtcblx0bGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuXHRsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmlsdGVycy9zbmFwc2hvdHMubHVhP3BhZ2U9JHtwYWdlfWA7XG5cdGxldCBzbmFwc2hvdHNfb2JqID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG5cdHNuYXBzaG90cy52YWx1ZSA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShzbmFwc2hvdHNfb2JqKTtcbiAgICB9XG4gICAgc29ydF9zbmFwc2hvdHNfYnkoKTtcbiAgICBpZiAoc25hcHNob3RzLnZhbHVlLmxlbmd0aCA+IDApIHtcblx0c25hcHNob3Rfc2VsZWN0ZWQudmFsdWUgPSBzbmFwc2hvdHMudmFsdWVbMF07XG4gICAgfVxufVxuXG5jb25zdCBhZGRfc25hcHNob3QgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGZpbHRlcnM7XG4gICAgaWYgKHNhdmVfdGltZS52YWx1ZSkge1xuXHRmaWx0ZXJzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgfSBlbHNlIHtcblx0bGV0IHBhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcblx0ZGVsZXRlIHBhcmFtc19vYmouZXBvY2hfYmVnaW47XG5cdGRlbGV0ZSBwYXJhbXNfb2JqLmVwb2NoX2VuZDtcblx0ZmlsdGVycyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICB9XG4gICAgbGV0IHBhZ2UgPSBnZXRfcGFnZSgpO1xuICAgIGxldCBwYXJhbXMgPSB7XG5cdHNuYXBzaG90X25hbWU6IHNuYXBzaG90X25hbWUudmFsdWUsXG5cdGZpbHRlcnMsXG5cdHBhZ2VcbiAgICB9O1xuICAgIFxuICAgIHBhcmFtcy5jc3JmID0gcHJvcHMuY3NyZjtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvZmlsdGVycy9zbmFwc2hvdC5sdWFgO1xuICAgIHRyeSB7XG5cdGxldCBoZWFkZXJzID0ge1xuXHQgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHR9O1xuXHRhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuXHRsb2FkX3NuYXBzaG90cyA9IHRydWU7XG4gICAgfSBjYXRjaChlcnIpIHtcblx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xuICAgIGVtaXQoJ2FkZGVkX3NuYXBzaG90cycsIHBhcmFtcyk7XG59XG5cbmNvbnN0IHNlbGVjdF9zbmFwc2hvdCA9ICgpID0+IHtcbiAgICBjbG9zZSgpOyAgICBcbiAgICBsZXQgZmlsdGVycyA9IHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlLmZpbHRlcnM7XG4gICAgaWYgKGFwcGx5X3RpbWUudmFsdWUgPT0gdHJ1ZSkge1xuICAgIFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgXHRsZXQgcGFyYW1zX29iaiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdChmaWx0ZXJzKTtcbiAgICBcdHBhcmFtc19vYmouZXBvY2hfYmVnaW4gPSBzdGF0dXMuZXBvY2hfYmVnaW47XG4gICAgXHRwYXJhbXNfb2JqLmVwb2NoX2VuZCA9IHN0YXR1cy5lcG9jaF9lbmQ7XG4gICAgXHRmaWx0ZXJzID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtc19vYmopO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVwbGFjZV91cmxfYW5kX3JlbG9hZChmaWx0ZXJzKTtcbn1cblxuY29uc3QgZGVsZXRlX3NuYXBzaG90ID0gYXN5bmMgKGRlbGV0ZV9hbGwpID0+IHtcbiAgICBsZXQgbmFtZSA9IHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlLm5hbWU7XG4gICAgaWYgKGRlbGV0ZV9hbGwgPT0gdHJ1ZSkgeyBuYW1lID0gXCIqXCI7IH1cbiAgICBsZXQgcGFnZSA9IGdldF9wYWdlKCk7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICBcdHNuYXBzaG90X25hbWU6IG5hbWUsXG5cdHBhZ2UsXG4gICAgfTtcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL2ZpbHRlcnMvc25hcHNob3QubHVhYDtcbiAgICB0cnkge1xuICAgIFx0bGV0IGhlYWRlcnMgPSB7XG4gICAgXHQgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIFx0fTtcbiAgICBcdGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgXHRsb2FkX3NuYXBzaG90cyA9IHRydWU7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICBcdGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZV9hbGwgPT0gdHJ1ZSkge1xuXHRlbWl0KCdkZWxldGVkX2FsbF9zbmFwc2hvdHMnLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG5cdGVtaXQoJ2RlbGV0ZWRfc25hcHNob3QnLCBwYXJhbXMpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyBfaTE4bignZXhjbHVkZV9jaGVjaycpIH19OiA8c3BhbiB2LWh0bWw9XCJhbGVydF9uYW1lXCI+PC9zcGFuPjwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIFwiPlxuICAgICAgPGRpdj5cblx0PGxhYmVsPnt7IF9pMThuKCdleGNsdWRlX2NoZWNrJykgfX0gXCI8YiB2LWh0bWw9XCJhbGVydF9uYW1lXCI+PC9iPlwiLiA8c3BhbiBjbGFzcz1cImFsZXJ0X2xhYmVsXCI+e3sgX2kxOG4oJ2V4Y2x1ZGVfZm9yJykgfX06PC9zcGFuPiA8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImFueVwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgIDxzcGFuPiB7eyBfaTE4bignc2hvd19hbGVydHMuZmlsdGVyX2Rpc2FibGVfY2hlY2snKSB9fSA8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cblx0PC9kaXY+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwicGFnZSA9PSAnaG9zdCdcIj5cblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiaG9zdFwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgICA8c3Bhbj57eyBob3N0X2FkZHIubGFiZWwgfX08L3NwYW4+XG4gICAgICBcdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2Plx0XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwicGFnZSA9PSAnZmxvdydcIj5cblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiY2xpZW50X2hvc3RcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgICAgPHNwYW4+e3sgX2kxOG4oJ2NsaWVudCcpIH19OiB7e2Zsb3dfYWRkci5jbGlfbGFiZWx9fTwvc3Bhbj5cbiAgICAgIFx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cInNlcnZlcl9ob3N0XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICAgIDxzcGFuPnt7IF9pMThuKCdzZXJ2ZXInKSB9fToge3sgZmxvd19hZGRyLnNydl9sYWJlbCB9fTwvc3Bhbj5cbiAgICAgIFx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XG5cdDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cImRvbWFpbiAhPSBudWxsIHx8IHRsc19jZXJ0aWZpY2F0ZSAhPSBudWxsXCIgY2xhc3M9XCJleGNsdWRlLWRvbWFpbi1jZXJ0aWZpY2F0ZVwiPlxuXHQ8bGFiZWw+PHNwYW4gY2xhc3M9XCJhbGVydF9sYWJlbFwiPnt7IF9pMThuKCdjaGVja19leGNsdXNpb24uZXhjbHVkZV9hbGxfY2hlY2tzX2ZvcicpIH19Ojwvc3Bhbj4gPC9sYWJlbD5cdFxuXHQ8ZGl2IHYtaWY9XCJkb21haW4gIT0gbnVsbFwiIGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImRvbWFpblwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgd2hpdGVzcGFjZVwiPlxuICAgICAgXHQgICAgPHNwYW4+e3tfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5kb21haW5cIil9fTo8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cbiAgICAgIFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiA6cGF0dGVybj1cInBhdHRlcm5fZG9tYWluXCIgOmRpc2FibGVkPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2RvbWFpbidcIiByZXF1aXJlZCB2LW1vZGVsPVwiZG9tYWluXCIgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGN1c3RvbS13aWR0aFwiPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwidGxzX2NlcnRpZmljYXRlICE9IG51bGxcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgIFx0ICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJjZXJ0aWZpY2F0ZVwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgd2hpdGVzcGFjZVwiPlxuICAgICAgXHQgICAgPHNwYW4+e3tfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi50bHNfY2VydGlmaWNhdGVcIil9fTo8L3NwYW4+XG4gICAgICBcdCAgPC9sYWJlbD5cbiAgICAgIFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiA6ZGlzYWJsZWQ9XCJyYWRpb19zZWxlY3RlZCAhPSAnY2VydGlmaWNhdGUnXCIgdi1tb2RlbD1cInRsc19jZXJ0aWZpY2F0ZVwiIDpwYXR0ZXJuPVwicGF0dGVybl9jZXJ0aWZpY2F0ZVwiIHJlcXVpcmVkIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBjdXN0b20td2lkdGhcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtaWY9XCJyYWRpb19zZWxlY3RlZCAhPSAnYW55J1wiIGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5hZGRfYV9jb21tZW50XCIpIH19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC0xXCI+XG4gICAgICAgIDx0ZXh0YXJlYSA6cGxhY2Vob2xkZXI9Y29tbWVudF9wbGFjZWhvbGRlciBpZD1cImFsZXJ0LWxhYmVsXCIgbmFtZT1cImxhYmVsXCIgcm93cz1cIjNcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImNvbW1lbnRcIiBtYXhsZW5ndGg9XCI0NTBcIj48L3RleHRhcmVhPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgICA8aHIgdi1zaG93PVwiZGlzYWJsZV9hbGVydHNcIiBjbGFzcz1cInNlcGFyYXRvclwiID5cblxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwicmFkaW9fc2VsZWN0ZWQgIT0gJ2RvbWFpbicgJiYgcmFkaW9fc2VsZWN0ZWQgIT0gJ2NlcnRpZmljYXRlJ1wiPlxuXG4gICAgICA8ZGl2IHYtc2hvdz1cImRpc2FibGVfYWxlcnRzXCIgY2xhc3M9XCJtZXNzYWdlIGFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuXHR7eyBfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fZGVsZXRlX2ZpbHRlcmVkX2FsZXJ0c1wiKSB9fVxuICAgICAgPC9kaXY+XG4gICAgICA8aHIgY2xhc3M9XCJzZXBhcmF0b3JcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgXCI+XG5cdDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tc3dpdGNoXCI+XG5cdCAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZVwiICB2LW1vZGVsPVwiZGlzYWJsZV9hbGVydHNcIj5cblx0ICBcblx0ICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiPnt7X2kxOG4oXCJkZWxldGVfZGlzYWJsZWRfYWxlcnRzXCIpfX08L2xhYmVsPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPGRpdiAgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nIGJvcmRlclwiIHJvbGU9XCJhbGVydFwiPlxuICAgICAge3tfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fZmlsdGVyX2FsZXJ0XCIpfX1cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJleGNsdWRlXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgY2xhc3M9XCJidG4gYnRuLXdhcm5pbmdcIj57e19pMThuKFwiZmlsdGVyXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCByYWRpb19zZWxlY3RlZCA9IHJlZihcImFueVwiKTtcbmNvbnN0IGRpc2FibGVfYWxlcnRzID0gcmVmKHRydWUpO1xuY29uc3QgZG9tYWluID0gcmVmKG51bGwpO1xuY29uc3QgdGxzX2NlcnRpZmljYXRlID0gcmVmKG51bGwpO1xuY29uc3QgY29tbWVudCA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnRfcGxhY2Vob2xkZXIgPSBpMThuKFwiZGV0YWlscy5jb21tZW50X3BsYWNlaG9sZGVyXCIpO1xuXG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2V4Y2x1ZGUnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBhbGVydDogT2JqZWN0LFxuICAgIHBhZ2U6IFN0cmluZyxcbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5hbGVydCwgKGN1cnJlbnRfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGlmIChjdXJyZW50X3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgcmFkaW9fc2VsZWN0ZWQudmFsdWUgPSBcImFueVwiO1xuICAgIGRpc2FibGVfYWxlcnRzLnZhbHVlID0gdHJ1ZTtcbiAgICBkb21haW4udmFsdWUgPSBjdXJyZW50X3ZhbHVlLmluZm8/LnZhbHVlID09IFwiXCIgPyBudWxsIDogZXh0cmFjdF9kb21haW5fbmFtZV9mcm9tX2luZm8oY3VycmVudF92YWx1ZS5pbmZvPy52YWx1ZSk7XG4gICAgdGxzX2NlcnRpZmljYXRlLnZhbHVlID0gY3VycmVudF92YWx1ZS5pbmZvPy5pc3N1ZXJkbiA9PSBcIlwiID8gbnVsbCA6IGN1cnJlbnRfdmFsdWUuaW5mbz8uaXNzdWVyZG47XG59KTtcblxuY29uc3QgZXh0cmFjdF9kb21haW5fbmFtZV9mcm9tX2luZm8gPSAoaW5mbykgPT4ge1xuXG4gIGxldCBkb21haW5fbmFtZSA9IGluZm87XG4gIC8vIHJlbW92ZSBzY2hlbWEgaHR0cHM6Ly8gZXRjXG4gIGxldCBpbmZvX3NwbGl0dGVkXyA9IGluZm8uc3BsaXQoXCI6Ly9cIik7XG4gIGRlYnVnZ2VyO1xuICBpZiAoaW5mb19zcGxpdHRlZF8ubGVuZ3RoID4gMSkgZG9tYWluX25hbWUgPSBpbmZvX3NwbGl0dGVkX1sxXTtcblxuICAvLyByZW1vdmUgbmV0IHBvcnRcbiAgZG9tYWluX25hbWUgPSBkb21haW5fbmFtZS5zcGxpdChcIjpcIilbMF07XG5cbiAgLy8gcmVtb3ZlIHd3dy5cbiAgbGV0IGluZm9fc3BsaXR0ZWRfb25fd3d3ID0gZG9tYWluX25hbWUuc3BsaXQoXCJ3d3cuXCIpO1xuICBpZiAoaW5mb19zcGxpdHRlZF9vbl93d3cubGVuZ3RoID4gMSkgZG9tYWluX25hbWUgPSBpbmZvX3NwbGl0dGVkX29uX3d3d1sxXTtcblxuICAvLyByZW1vdmUgcGF0aFxuICBkb21haW5fbmFtZSA9IGRvbWFpbl9uYW1lLnNwbGl0KFwiL1wiKVswXTtcbiAgXG4gIHJldHVybiBkb21haW5fbmFtZTtcblxufVxuY29uc3QgY2hlY2tfZGlzYWJsZV9hcHBseSA9ICgpID0+IHtcbiAgICBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJkb21haW5cIikge1xuXHRsZXQgcmVnZXhfZG9tYWluID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2RvbWFpbik7XG5cdHJldHVybiBkb21haW4udmFsdWUgPT0gbnVsbCB8fCByZWdleF9kb21haW4udGVzdChkb21haW4udmFsdWUpID09IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdGxldCByZWdleF9jZXJ0aWZpY2F0ZSA9IG5ldyBSZWdFeHAocGF0dGVybl9jZXJ0aWZpY2F0ZSk7XG5cdHJldHVybiB0bHNfY2VydGlmaWNhdGUudmFsdWUgPT0gbnVsbCB8fCByZWdleF9jZXJ0aWZpY2F0ZS50ZXN0KHRsc19jZXJ0aWZpY2F0ZS52YWx1ZSkgPT0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGFsZXJ0X25hbWUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5hbGVydD8uYWxlcnRfbmFtZSk7XG5cbmNvbnN0IGhvc3RfYWRkciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgcmVzID0geyB2YWx1ZTogXCJcIiwgbGFiZWw6IFwiXCIgfTtcbiAgICBpZiAocHJvcHMucGFnZSAhPSBcImhvc3RcIiB8fCBwcm9wcy5hbGVydCA9PSBudWxsKSB7IHJldHVybiByZXM7IH1cbiAgICBsZXQgYWxlcnQgPSBwcm9wcy5hbGVydDtcbiAgICByZXMudmFsdWUgPSBhbGVydC5pcC52YWx1ZTtcbiAgICBpZiAoYWxlcnQudmxhbiAhPSBudWxsICYmIGFsZXJ0LnZsYW4udmFsdWUgIT0gbnVsbCAmJiBhbGVydC52bGFuLnZhbHVlICE9IDApIHtcblx0cmVzLnZhbHVlID0gcmVzLnZhbHVlICsgJ0AnICsgYWxlcnQudmxhbi52YWx1ZTtcbiAgICB9XG4gICAgcmVzLmxhYmVsID0gKGFsZXJ0LmlwLmxhYmVsKSA/IGAke2FsZXJ0LmlwLmxhYmVsfSAoJHthbGVydC5pcC52YWx1ZX0pYCA6IGFsZXJ0LmlwLnZhbHVlO1xuICAgIHJldHVybiByZXM7XG59KTtcblxuY29uc3QgZmxvd19hZGRyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZXMgPSB7IGNsaV92YWx1ZTogXCJcIiwgY2xpX2xhYmVsOiBcIlwiLCBzcnZfdmFsdWU6IFwiXCIsIHNydl9sYWJlbDogXCJcIiB9O1xuICAgIGlmIChwcm9wcy5wYWdlICE9IFwiZmxvd1wiIHx8IHByb3BzLmFsZXJ0ID09IG51bGwpIHsgcmV0dXJuIHJlczsgfVxuICAgIGxldCBhbGVydCA9IHByb3BzLmFsZXJ0O1xuICAgIHJlcy5jbGlfdmFsdWUgPSBhbGVydC5mbG93LmNsaV9pcC52YWx1ZTtcbiAgICByZXMuc3J2X3ZhbHVlID0gYWxlcnQuZmxvdy5zcnZfaXAudmFsdWU7XG4gICAgbGV0IGNsaV9sYWJlbCA9IGAke2FsZXJ0LmZsb3cuY2xpX2lwLmxhYmVsIHx8IGFsZXJ0LmZsb3cuY2xpX2lwLnZhbHVlfWBcbiAgICBsZXQgc3J2X2xhYmVsID0gYCR7YWxlcnQuZmxvdy5zcnZfaXAubGFiZWwgfHwgYWxlcnQuZmxvdy5zcnZfaXAudmFsdWV9YFxuXG4gICAgaWYoYWxlcnQuZmxvdy52bGFuICE9IG51bGwgJiYgYWxlcnQuZmxvdy52bGFuLnZhbHVlICE9IG51bGwgJiYgYWxlcnQuZmxvdy52bGFuLnZhbHVlICE9IDApIHtcbiAgICAgIGNsaV9sYWJlbCA9IGAke2NsaV9sYWJlbH1AJHthbGVydC5mbG93LnZsYW4ubGFiZWx9YFxuICAgICAgc3J2X2xhYmVsID0gYCR7c3J2X2xhYmVsfUAke2FsZXJ0LmZsb3cudmxhbi5sYWJlbH1gXG4gICAgICByZXMuY2xpX3ZhbHVlID0gcmVzLmNsaV92YWx1ZSArICdAJyArIGFsZXJ0LmZsb3cudmxhbi52YWx1ZVxuICAgICAgcmVzLnNydl92YWx1ZSA9IHJlcy5zcnZfdmFsdWUgKyAnQCcgKyBhbGVydC5mbG93LnZsYW4udmFsdWVcbiAgICB9XG5cbiAgICBpZihjbGlfbGFiZWwgIT09IHJlcy5jbGlfdmFsdWUpIHtcbiAgICAgIGNsaV9sYWJlbCA9IGAke2NsaV9sYWJlbH0gKCR7cmVzLmNsaV92YWx1ZX0pYFxuICAgIH1cbiAgICBpZihzcnZfbGFiZWwgIT09IHJlcy5zcnZfdmFsdWUpIHtcbiAgICAgIHNydl9sYWJlbCA9IGAke3Nydl9sYWJlbH0gKCR7cmVzLnNydl92YWx1ZX0pYFxuICAgIH1cbiAgICBcbiAgICByZXMuY2xpX2xhYmVsID0gY2xpX2xhYmVsXG4gICAgcmVzLnNydl9sYWJlbCA9IHNydl9sYWJlbFxuICAgIHJldHVybiByZXM7XG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBjb21tZW50LnZhbHVlID0gXCJcIjtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5mdW5jdGlvbiBnZXRfdHlwZSgpIHtcbiAgICBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJkb21haW5cIiB8fCByYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0cmV0dXJuIHJhZGlvX3NlbGVjdGVkLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gXCJob3N0XCI7XG59XG5cbmxldCBwYXR0ZXJuX2RvbWFpbiA9IE50b3BVdGlscy5SRUdFWEVTLmRvbWFpbl9uYW1lX25vdF9zdHJpY3Q7XG5sZXQgcGF0dGVybl9jZXJ0aWZpY2F0ZSA9IE50b3BVdGlscy5SRUdFWEVTLnRsc19jZXJ0aWZpY2F0ZTtcblxuY29uc3QgZXhjbHVkZSA9ICgpID0+IHtcbiAgICBsZXQgcGFnZSA9IHByb3BzLnBhZ2U7XG4gICAgbGV0IHR5cGUgPSBnZXRfdHlwZSgpO1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgXHRkZWxldGVfYWxlcnRzOiBkaXNhYmxlX2FsZXJ0cy52YWx1ZSxcbiAgICAgIGxhYmVsOiBjb21tZW50LnZhbHVlLFxuXG5cdHR5cGUsXHRcbiAgICB9O1xuICAgIGxldCBhZGRyID0gbnVsbDtcbiAgICBpZiAodHlwZSA9PSBcImhvc3RcIikge1x0XG5cdGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImhvc3RcIikge1xuXHQgICAgYWRkciA9IGhvc3RfYWRkci52YWx1ZS52YWx1ZTtcblx0fSBlbHNlIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcInNlcnZlcl9ob3N0XCIpIHtcblx0ICAgIGFkZHIgPSBmbG93X2FkZHIudmFsdWUuc3J2X3ZhbHVlO1xuXHR9IGVsc2UgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiY2xpZW50X2hvc3RcIikge1xuXHQgICAgYWRkciA9IGZsb3dfYWRkci52YWx1ZS5jbGlfdmFsdWU7XG5cdH1cblx0cGFyYW1zLmFsZXJ0X2FkZHIgPSBhZGRyO1xuXHRpZiAocGFnZSA9PSBcImZsb3dcIikge1xuXHQgICAgcGFyYW1zLmZsb3dfYWxlcnRfa2V5ID0gcHJvcHMuYWxlcnQuYWxlcnRfaWQudmFsdWU7XG5cdH0gZWxzZSBpZiAocGFnZSA9PSBcImhvc3RcIikge1xuXHQgICAgcGFyYW1zLmhvc3RfYWxlcnRfa2V5ID0gcHJvcHMuYWxlcnQuYWxlcnRfaWQudmFsdWU7XG5cdH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJkb21haW5cIikge1xuXHRwYXJhbXMuZGVsZXRlX2FsZXJ0cyA9IGZhbHNlO1xuXHRwYXJhbXMuYWxlcnRfZG9tYWluID0gZG9tYWluLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0cGFyYW1zLmRlbGV0ZV9hbGVydHMgPSBmYWxzZTtcblx0cGFyYW1zLmFsZXJ0X2NlcnRpZmljYXRlID0gdGxzX2NlcnRpZmljYXRlLnZhbHVlO1xuICAgIH1cbiAgICBjbG9zZSgpO1xuICAgIGVtaXQoJ2V4Y2x1ZGUnLCBwYXJhbXMpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4ud2hpdGVzcGFjZSB7XG4gIG1hcmdpbi1yaWdodDogMC4ycmVtO1xufVxuLmN1c3RvbS13aWR0aCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtaW4td2lkdGg6IDEwMCU7XG59XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuLmV4Y2x1ZGUtZG9tYWluLWNlcnRpZmljYXRlIHtcbiAgbWFyZ2luLXRvcDogMC40cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e19pMThuKFwic2hvd19hbGVydHMuYWNrbm93bGVkZ2VfYWxlcnRcIil9fToge3t0aXRsZV9kZXNjfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvdyBtYi0yXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e19pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKX19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNiBtdC0xXCI+XG4gICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiY29tbWVudFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiAgbWF4bGVuZ3RoPVwiMjU1XCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8QWxlcnRJbmZvIDpub19jbG9zZV9idXR0b249XCJ0cnVlXCIgcmVmPVwiYWxlcnRfaW5mb1wiPjwvQWxlcnRJbmZvPlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFja25vd2xlZGdlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwiYWNrbm93bGVkZ2VcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFsZXJ0X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBjb21tZW50ID0gcmVmKFwiXCIpO1xuY29uc3QgdGl0bGVfZGVzYyA9IHJlZihcIlwiKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImFja25vd2xlZGdlXCJdKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0LFxuICAgIHBhZ2U6IFN0cmluZyxcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGFja25vd2xlZGdlKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9hY2tub3dsZWRnZS8ke3Byb3BzLnBhZ2V9L2FsZXJ0cy5sdWFgO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcblx0Y3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuXHRpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG5cdGxhYmVsOiBjb21tZW50LnZhbHVlLFxuXHRyb3dfaWQ6IGFsZXJ0LnZhbHVlLnJvd19pZCxcbiAgICB9O1xuICAgIGxldCBoZWFkZXJzID0ge1xuXHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgIGVtaXQoXCJhY2tub3dsZWRnZVwiKTtcbiAgICBjbG9zZSgpO1xufVxuXG5cbmNvbnN0IGFsZXJ0ID0gcmVmKHt9KTtcbmNvbnN0IHNob3cgPSAoX2FsZXJ0KSA9PiB7XG4gICAgYWxlcnQudmFsdWUgPSBfYWxlcnQ7XG4gICAgY29uc3QgJHR5cGUgPSAkKGA8c3Bhbj4ke19hbGVydC5hbGVydF9pZC5sYWJlbH08L3NwYW4+YCk7XG4gICAgdGl0bGVfZGVzYy52YWx1ZSA9ICR0eXBlLnRleHQoKS50cmltKCk7XG4gICAgY29tbWVudC52YWx1ZSA9IF9hbGVydC51c2VyX2xhYmVsO1xuICAgIFxuICAgIGxldCBtZXNzYWdlX2JvZHkgPSBfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fYWNrbm93bGVkZ2VfYWxlcnRcIik7XG4gICAgYWxlcnRfaW5mby52YWx1ZS5zaG93KG1lc3NhZ2VfYm9keSwgXCJhbGVydC13YXJuaW5nXCIpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3tfaTE4bihcInNob3dfYWxlcnRzLmRlbGV0ZV9hbGVydFwiKX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8QWxlcnRJbmZvIDpub19jbG9zZV9idXR0b249XCJ0cnVlXCIgcmVmPVwiYWxlcnRfaW5mb1wiPjwvQWxlcnRJbmZvPlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9hbGVydFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcImRlbGV0ZVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRlbGV0ZV9hbGVydFwiXSk7XG5jb25zdCBhbGVydCA9IHJlZih7fSk7XG5sZXQgc3RhdHVzX3ZpZXcgPSBcImhpc3RvcmljYWxcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0LFxuICAgIHBhZ2U6IFN0cmluZyxcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV9hbGVydCgpIHtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlLyR7cHJvcHMucGFnZX0vYWxlcnRzLmx1YWA7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuXHRjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG5cdGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcblx0c3RhdHVzOiBzdGF0dXNfdmlldyxcblx0cm93X2lkOiBhbGVydC52YWx1ZS5yb3dfaWQsXG4gICAgfTtcbiAgICBsZXQgaGVhZGVycyA9IHtcblx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICBlbWl0KFwiZGVsZXRlX2FsZXJ0XCIpO1xuICAgIGNsb3NlKCk7XG59XG5cblxuY29uc3Qgc2hvdyA9IChfYWxlcnQsIF9zdGF0dXNfdmlldykgPT4ge1xuICAgIGFsZXJ0LnZhbHVlID0gX2FsZXJ0O1xuICAgIHN0YXR1c192aWV3ID0gX3N0YXR1c192aWV3O1xuICAgIGxldCBtZXNzYWdlX2JvZHkgPSBfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fbGFiZWxfYWxlcnRcIik7XG4gICAgYWxlcnRfaW5mby52YWx1ZS5zaG93KG1lc3NhZ2VfYm9keSwgXCJhbGVydC1kYW5nZXJcIik7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e19pMThuKFwiYWNrbm93bGVkZ2VfYWxlcnRzXCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tfaTE4bihcImRhdGVfZnJvbVwiKX19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cImJlZ2luX3RpbWVcIiBkaXNhYmxlZD1cIlwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IG1iLTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7X2kxOG4oXCJkYXRlX2Zyb21cIil9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMVwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cImVuZF90aW1lXCIgZGlzYWJsZWQ9XCJcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIFxuICAgIDxBbGVydEluZm8gOm5vX2Nsb3NlX2J1dHRvbj1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+ICAgIFxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cblxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhY2tub3dsZWRnZV9hbGVydHNcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJhY2tub3dsZWRnZVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19ldmVudHMgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IGZpbHRlcnNNYW5hZ2VyIGZyb20gXCIuLi91dGlsaXRpZXMvZmlsdGVycy1tYW5hZ2VyLmpzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHBhZ2U6IFN0cmluZyxcbiAgICBjb250ZXh0OiBPYmplY3QsICAgIFxufSk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiYWNrbm93bGVkZ2VfYWxlcnRzXCJdKTtcblxuY29uc3QgaWQgPSBcIm1vZGFsLWFja25vd2xlZGdlLWFsZXJ0c1wiO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGJlZ2luX3RpbWUgPSByZWYoXCJcIik7XG5jb25zdCBlbmRfdGltZSA9IHJlZihcIlwiKTtcbmNvbnN0IGZpbHRlcnMgPSByZWYoW10pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IHNob3cgPSAoc3RhdHVzKSA9PiB7XG4gICAgYmVnaW5fdGltZS52YWx1ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwKTtcbiAgICBlbmRfdGltZS52YWx1ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfZW5kICogMTAwMCk7XG4gICAgbGV0IG1lc3NhZ2VfYm9keSA9IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9hY2tub3dsZWRnZV9hbGVydHNcIik7XG4gICAgYWxlcnRfaW5mby52YWx1ZS5zaG93KG1lc3NhZ2VfYm9keSwgXCJhbGVydC1kYW5nZXJcIik7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gYWNrbm93bGVkZ2VfYWxlcnRzKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9hY2tub3dsZWRnZS8ke3Byb3BzLnBhZ2V9L2FsZXJ0cy5sdWFgO1xuICAgIGNvbnN0IHVybF9wYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuXHRjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG5cdC4uLnVybF9wYXJhbXNfb2JqLFxuICAgIH07XG4gICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCBwYXJhbXMpO1xuICAgIGVtaXQoXCJhY2tub3dsZWRnZV9hbGVydHNcIik7XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e19pMThuKFwiZGVsZXRlX2FsZXJ0c1wiKX19XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7X2kxOG4oXCJkYXRlX2Zyb21cIil9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJiZWdpbl90aW1lXCIgZGlzYWJsZWQ9XCJcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tfaTE4bihcImRhdGVfZnJvbVwiKX19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNiBtdC0xXCI+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnZhbHVlPVwiZW5kX3RpbWVcIiBkaXNhYmxlZD1cIlwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgZmlsdGVycy1saXN0IG1iLTJcIj5cbiAgICAgIDxkaXYgdi1mb3I9XCJpdGVtIGluIGZpbHRlcnNcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tpdGVtLmxhYmVsfX08L2I+PC9sYWJlbD5cblx0PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tNiBtdC0xXCI+XG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJpdGVtLnZhbHVlXCIgZGlzYWJsZWQ9XCJcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8QWxlcnRJbmZvIDpub19jbG9zZV9idXR0b249XCJ0cnVlXCIgcmVmPVwiYWxlcnRfaW5mb1wiPjwvQWxlcnRJbmZvPiAgICBcbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX2FsZXJ0c1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcImRlbGV0ZVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19ldmVudHMgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IGZpbHRlcnNNYW5hZ2VyIGZyb20gXCIuLi91dGlsaXRpZXMvZmlsdGVycy1tYW5hZ2VyLmpzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHBhZ2U6IFN0cmluZyxcbiAgICBjb250ZXh0OiBPYmplY3QsICAgIFxufSk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZGVsZXRlX2FsZXJ0c1wiXSk7XG5cbmNvbnN0IGlkID0gXCJtb2RhbC1kZWxldGUtYWxlcnRzXCI7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuY29uc3QgYmVnaW5fdGltZSA9IHJlZihcIlwiKTtcbmNvbnN0IGVuZF90aW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZmlsdGVycyA9IHJlZihbXSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3Qgc2hvdyA9IChzdGF0dXMpID0+IHtcbiAgICBiZWdpbl90aW1lLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApO1xuICAgIGVuZF90aW1lLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKTtcbiAgICBjb25zdCB0YWdfb3BlcmF0b3JfbGFiZWxfZGljdCA9IGZpbHRlcnNNYW5hZ2VyLnRhZ19vcGVyYXRvcl9sYWJlbF9kaWN0O1xuICAgIGZpbHRlcnMudmFsdWUgPSBzdGF0dXMuZmlsdGVycy5tYXAoKGYpID0+IHtcblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsOiBmLmxhYmVsLFxuXHQgICAgdmFsdWU6IGAke3RhZ19vcGVyYXRvcl9sYWJlbF9kaWN0W2Yub3BlcmF0b3JdfSAke2YudmFsdWVfbGFiZWx9YCxcblx0fTtcbiAgICB9KTtcbiAgICBsZXQgbWVzc2FnZV9ib2R5ID0gX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2RlbGV0ZV9hbGVydHNcIik7XG4gICAgYWxlcnRfaW5mby52YWx1ZS5zaG93KG1lc3NhZ2VfYm9keSwgXCJhbGVydC1kYW5nZXJcIik7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlX2FsZXJ0cygpIHtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlLyR7cHJvcHMucGFnZX0vYWxlcnRzLmx1YWA7XG4gICAgY29uc3QgdXJsX3BhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG5cdGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcblx0Li4udXJsX3BhcmFtc19vYmosXG4gICAgfTtcbiAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHBhcmFtcyk7XG4gICAgZW1pdChcImRlbGV0ZV9hbGVydHNcIik7XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPE5hdmJhciBpZD1cIm5hdmJhclwiIDptYWluX3RpdGxlPVwiY29udGV4dC5uYXZiYXIubWFpbl90aXRsZVwiIDpiYXNlX3VybD1cImNvbnRleHQubmF2YmFyLmJhc2VfdXJsXCJcbiAgICAgICAgOmhlbHBfbGluaz1cImNvbnRleHQubmF2YmFyLmhlbHBfbGlua1wiIDppdGVtc190YWJsZT1cImNvbnRleHQubmF2YmFyLml0ZW1zX3RhYmxlXCIgQGNsaWNrX2l0ZW09XCJjbGlja19uYXZiYXJfaXRlbVwiPlxuICAgIDwvTmF2YmFyPlxuXG4gICAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29sLTEyJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0yXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMTAwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhcz1cInJhbmdlLWNvbnRhaW5lciBkLWZsZXggZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFuZ2UtcGlja2VyIGQtZmxleCBtLWF1dG8gZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZXJ0SW5mbyBpZD1cImFsZXJ0X2luZm9cIiA6Z2xvYmFsPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TW9kYWxUcmFmZmljRXh0cmFjdGlvbiBpZD1cIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiIHJlZj1cIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTW9kYWxUcmFmZmljRXh0cmFjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TW9kYWxTbmFwc2hvdCByZWY9XCJtb2RhbF9zbmFwc2hvdFwiIDpjc3JmPVwiY29udGV4dC5jc3JmXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbFNuYXBzaG90PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSYW5nZVBpY2tlciB2LWlmPVwibW91bnRfcmFuZ2VfcGlja2VyXCIgcmVmPVwicmFuZ2VfcGlja2VyXCIgaWQ9XCJyYW5nZV9waWNrZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInF1ZXJ5X3ByZXNldHMubGVuZ3RoID4gMFwiIGNsYXNzPVwibXMtMSBtZS0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cIm1lLTIgZm9ybS1zZWxlY3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRfcXVlcnlfcHJlc2V0XCIgQGNoYW5nZT1cInVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cygpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gcXVlcnlfcHJlc2V0c1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2LWlmPVwiaXRlbS5idWlsdGluID09IHRydWVcIiA6dmFsdWU9XCJpdGVtXCI+e3sgaXRlbS5uYW1lIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRncm91cCB2LWlmPVwicGFnZSAhPSAnYW5hbHlzaXMnXCIgOmxhYmVsPVwiX2kxOG4oJ3F1ZXJpZXMucXVlcmllcycpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1pZj1cIiFpdGVtLmJ1aWx0aW5cIiA6dmFsdWU9XCJpdGVtXCI+e3sgaXRlbS5uYW1lIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGdyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfcmFuZ2VfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuc2hvd19wZXJtYWxpbmtcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImdldF9wZXJtYW5lbnRfbGlua1wiIDp0aXRsZT1cIl9pMThuKCdncmFwaHMuZ2V0X3Blcm1hbmVudF9saW5rJylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj1cInBlcm1hbmVudF9saW5rX2J1dHRvblwiPjxpIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWxpbmtcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWlmPVwiY29udGV4dC5zaG93X2Rvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgaWQ9XCJkdC1idG4tZG93bmxvYWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdncmFwaHMuZG93bmxvYWRfcmVjb3JkcycpXCIgOmhyZWY9XCJocmVmX2Rvd25sb2FkX3JlY29yZHNcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1maWxlXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuc2hvd19wY2FwX2Rvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZG93bmxvYWQnKVwiPjxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWRvd25sb2FkXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5pc19udG9wX2VudGVycHJpc2VfbVwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2hvd19tb2RhbF9zbmFwc2hvdFwiIDp0aXRsZT1cIl9pMThuKCdkYXRhdGFibGUubWFuYWdlX3NuYXBzaG90cycpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmYXMgZmEtbGcgZmEtY2FtZXJhLXJldHJvXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmFuZ2VQaWNrZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29sLTEyJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImNvbnRleHQuc2hvd19jaGFydFwiIGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTJcIiBpZD1cImNoYXJ0LXZ1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGgtMTAwIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hhcnQgcmVmPVwiY2hhcnRcIiBpZD1cImNoYXJ0X2FsZXJ0X3N0YXRzXCIgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwiY2hhcnRfZGF0YV91cmxcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblx0XHRcdDxkaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2FsZXJ0c1wiIDp0YWJsZV9jb25maWdfaWQ9XCJ0YWJsZV9jb25maWdfaWRcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDpjc3JmPVwiY29udGV4dC5jc3JmXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGlzcGxheV9tZXNzYWdlPVwiZGlzcGxheV9tZXNzYWdlXCIgOm1lc3NhZ2VfdG9fZGlzcGxheT1cIm1lc3NhZ2VfdG9fZGlzcGxheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGxvYWRlZD1cIm9uX3RhYmxlX2xvYWRlZFwiIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIiBAcm93c19sb2FkZWQ9XCJyb3dzX2xvYWRlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIHRvcF90YWJsZV9hcnJheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyZWY9XCJlbCA9PiB7IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheVt0X2luZGV4XSA9IGVsIH1cIj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGVcIiA6dGl0bGU9XCJ0LnRpdGxlXCI+e3sgdC5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlciBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJvcHQudmFsdWVcIj57eyBvcHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4gPCEtLSBjdXN0b21faGVhZGVyIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQgYm9keSAtLT5cblxuICAgICAgICAgICAgICAgIDxkaXYgdi1zaG93PVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X2Fja25vd2xlZGdlX2FsbFwiIEBjbGljaz1cInNob3dfbW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhIGZhLXVzZXItY2hlY2tcIj48L2k+IHt7X2kxOG4oXCJhY2tub3dsZWRnZV9hbGVydHNcIil9fVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X2RlbGV0ZV9hbGxcIiBAY2xpY2s9XCJzaG93X21vZGFsX2RlbGV0ZV9hbGVydHNcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhIGZhLXRyYXNoXCI+PC9pPiB7e19pMThuKFwiZGVsZXRlX2FsZXJ0c1wiKX19XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQgZm9vdGVyIC0tPlxuICAgICAgICAgICAgPC9kaXY+IDwhLS0gY2FyZC1zaGFkb3cgLS0+XG5cbiAgICAgICAgPC9kaXY+IDwhLS0gZGl2IGNvbCAtLT5cbiAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj48L05vdGVMaXN0PlxuICAgIDwvZGl2PiA8IS0tIGRpdiByb3cgLS0+XG5cbiAgICA8TW9kYWxBY2tub3dsZWRnZUFsZXJ0IHJlZj1cIm1vZGFsX2Fja25vd2xlZGdlXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgOnBhZ2U9XCJwYWdlXCIgQGFja25vd2xlZGdlPVwicmVmcmVzaF9wYWdlX2NvbXBvbmVudHNcIj5cbiAgICA8L01vZGFsQWNrbm93bGVkZ2VBbGVydD5cblxuICAgIDxNb2RhbERlbGV0ZUFsZXJ0IHJlZj1cIm1vZGFsX2RlbGV0ZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIDpwYWdlPVwicGFnZVwiIEBkZWxldGVfYWxlcnQ9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPjwvTW9kYWxEZWxldGVBbGVydD5cblxuICAgIDxNb2RhbEFja25vd2xlZGdlQWxlcnRzIHJlZj1cIm1vZGFsX2Fja25vd2xlZGdlX2FsZXJ0c1wiIDpjb250ZXh0PVwiY29udGV4dFwiIDpwYWdlPVwicGFnZVwiIEBhY2tub3dsZWRnZV9hbGVydHM9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPlxuICAgIDwvTW9kYWxBY2tub3dsZWRnZUFsZXJ0cz4gICAgXG5cbiAgICA8TW9kYWxEZWxldGVBbGVydHMgcmVmPVwibW9kYWxfZGVsZXRlX2FsZXJ0c1wiIDpjb250ZXh0PVwiY29udGV4dFwiIDpwYWdlPVwicGFnZVwiIEBkZWxldGVfYWxlcnRzPVwicmVmcmVzaF9wYWdlX2NvbXBvbmVudHNcIj5cbiAgICA8L01vZGFsRGVsZXRlQWxlcnRzPiAgICBcblxuICAgIDxNb2RhbEFsZXJ0c0ZpbHRlciA6YWxlcnQ9XCJjdXJyZW50X2FsZXJ0XCIgOnBhZ2U9XCJwYWdlXCIgQGV4Y2x1ZGU9XCJhZGRfZXhjbHVkZVwiIHJlZj1cIm1vZGFsX2FsZXJ0c19maWx0ZXJcIj5cbiAgICA8L01vZGFsQWxlcnRzRmlsdGVyPlxuXG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCxjb21wdXRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfc3RhdHVzX21hbmFnZXIsIG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfc3luYyB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgbnRvcENoYXJ0QXBleCB9IGZyb20gXCIuLi9jb21wb25lbnRzL250b3BDaGFydEFwZXguanNcIjtcbmltcG9ydCB7IERhdGFUYWJsZVJlbmRlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZmlsdGVyc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxUcmFmZmljRXh0cmFjdGlvbiB9IGZyb20gXCIuL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFsZXJ0c0ZpbHRlciB9IGZyb20gXCIuL21vZGFsLWFsZXJ0cy1maWx0ZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWNrbm93bGVkZ2VBbGVydCB9IGZyb20gXCIuL21vZGFsLWFja25vd2xlZGdlLWFsZXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUFsZXJ0IH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWFsZXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFja25vd2xlZGdlQWxlcnRzIH0gZnJvbSBcIi4vbW9kYWwtYWNrbm93bGVkZ2UtYWxlcnRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUFsZXJ0cyB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1hbGVydHMudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCB0YWJsZV9hbGVydHMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF90cmFmZmljX2V4dHJhY3Rpb24gPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9zbmFwc2hvdCA9IHJlZihudWxsKTtcbmNvbnN0IHJhbmdlX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHBlcm1hbmVudF9saW5rX2J1dHRvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FsZXJ0c19maWx0ZXIgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hY2tub3dsZWRnZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2Fja25vd2xlZGdlX2FsZXJ0cyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9hbGVydHMgPSByZWYobnVsbCk7XG5jb25zdCBjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQgPSByZWYoMCk7XG5jb25zdCBkaXNwbGF5X21lc3NhZ2UgPSByZWYoZmFsc2UpO1xuY29uc3QgbWVzc2FnZV90b19kaXNwbGF5ID0gcmVmKCcnKTtcblxuY29uc3QgY3VycmVudF9hbGVydCA9IHJlZihudWxsKTtcbmNvbnN0IGRlZmF1bHRfaWZpZCA9IHByb3BzLmNvbnRleHQuaWZpZDtcbmxldCBwYWdlO1xuY29uc3QgdGFibGVfY29uZmlnX2lkID0gcmVmKFwiXCIpO1xuY29uc3QgdGFibGVfaWQgPSByZWYoXCJcIik7XG5sZXQgY2hhcnRfZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi90cy5sdWFgO1xuY29uc3QgY2hhcnRfdHlwZSA9IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX0NPTFVNTjtcbmNvbnN0IHRvcF90YWJsZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXkgPSByZWYoW10pO1xuY29uc3Qgbm90ZV9saXN0ID0gcmVmKFtfaTE4bignc2hvd19hbGVydHMuYWxlcnRzX2luZm8nKV0pO1xuY29uc3Qgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0ID0gcmVmKHt9KTtcbmNvbnN0IHF1ZXJ5X3ByZXNldHMgPSByZWYoW10pO1xuY29uc3QgbW91bnRfcmFuZ2VfcGlja2VyID0gcmVmKGZhbHNlKTtcblxuY29uc3QgaHJlZl9kb3dubG9hZF9yZWNvcmRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICghcHJvcHMuY29udGV4dC5zaG93X2NoYXJ0IHx8IHRhYmxlX2FsZXJ0cy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBgYDtcbiAgICB9XG4gICAgLy8gYWRkIGltcG9zc2libGUgaWYgb24gcmVmIHZhcmlhYmxlIHRvIHJlbG9hZCB0aGlzIGV4cHJlc3Npb24gZXZlcnkgdGltZSBjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQudmFsdWUgY2hhbmdlXG4gICAgaWYgKGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZC52YWx1ZSA8IDApIHsgdGhyb3cgXCJuZXZlciBydW5cIjsgfVxuICAgIGNvbnN0IGRvd25sb2FkX2VuZHBvaW50ID0gcHJvcHMuY29udGV4dC5kb3dubG9hZC5lbmRwb2ludDtcbiAgICBsZXQgcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgbGV0IGNvbHVtbnMgPSB0YWJsZV9hbGVydHMudmFsdWUuZ2V0X2NvbHVtbnNfZGVmcygpO1xuICAgIGxldCB2aXNpYmxlX2NvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcigoYykgPT4gYy52aXNpYmxlKS5tYXAoKGMpID0+IGMuaWQpLmpvaW4oXCIsXCIpO1xuICAgIHBhcmFtcy5mb3JtYXQgPSBcInR4dFwiO1xuICAgIHBhcmFtcy52aXNpYmxlX2NvbHVtbnMgPSB2aXNpYmxlX2NvbHVtbnM7XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIHJldHVybiBgJHtsb2NhdGlvbi5vcmlnaW59LyR7ZG93bmxvYWRfZW5kcG9pbnR9PyR7dXJsX3BhcmFtc31gO1xufSk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIG1lc3NhZ2VfdG9fZGlzcGxheS52YWx1ZSA9IGA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2VzcyBhbGVydC1kaXNtaXNzYWJsZVwiPjxzcGFuPiR7aTE4bignbm9fYWxlcnRzX3JlcXVpcmVfYXR0ZW50aW9uJyl9PC9zcGFuPjwvZGl2PmA7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuaXNfdmEpIHtcbiAgICAgICAgbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwoXCJkYXlcIik7XG4gICAgfVxuICAgIGluaXRfcGFyYW1zKCk7XG4gICAgaW5pdF91cmxfcGFyYW1zKCk7XG4gICAgYXdhaXQgc2V0X3F1ZXJ5X3ByZXNldHMoKTtcbiAgICBtb3VudF9yYW5nZV9waWNrZXIudmFsdWUgPSB0cnVlO1xuICAgIGF3YWl0IGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICByZWdpc3Rlcl9jb21wb25lbnRzX29uX3N0YXR1c191cGRhdGUoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0X3BhcmFtcygpIHtcbiAgICBwYWdlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpO1xuICAgIGNvbnN0IHN0YXR1cyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpO1xuICAgIGlmIChwYWdlID09IG51bGwpIHsgcGFnZSA9IFwiYWxsXCI7IH1cbiAgICBpZiAoc3RhdHVzID09ICdlbmdhZ2VkJyAmJiBwYWdlID09IFwiZmxvd1wiKSB7IG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBcImhpc3RvcmljYWxcIik7IH1cbiAgICBjaGFydF9kYXRhX3VybCA9IChwYWdlID09IFwic25tcF9kZXZpY2VcIikgPyBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9hbGVydC90cy5sdWFgIDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC8ke3BhZ2V9L2FsZXJ0L3RzLmx1YWA7XG4gICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0ge1xuICAgICAgICB2YWx1ZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIiksXG4gICAgICAgIGNvdW50OiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImNvdW50XCIpLFxuICAgIH07XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIHRhYmxlX2NvbmZpZ19pZC52YWx1ZSA9IGBhbGVydF8ke3BhZ2V9YDtcbiAgICB0YWJsZV9pZC52YWx1ZSA9IGAke3RhYmxlX2NvbmZpZ19pZC52YWx1ZX1fJHtzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWV9YDsgICAgXG59XG5cbmZ1bmN0aW9uIGluaXRfdXJsX3BhcmFtcygpIHtcbiAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpID09IG51bGwpIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiaWZpZFwiLCBkZWZhdWx0X2lmaWQpO1xuICAgIH1cbiAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSA9PSBudWxsXG4gICAgICAgIHx8IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpID09IG51bGwpIHtcbiAgICAgICAgbGV0IGRlZmF1bHRfZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoKERhdGUubm93KCkgLSAxMDAwICogMzAgKiA2MCkgLyAxMDAwKTtcbiAgICAgICAgbGV0IGRlZmF1bHRfZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfYmVnaW5cIiwgZGVmYXVsdF9lcG9jaF9iZWdpbik7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2VuZFwiLCBkZWZhdWx0X2Vwb2NoX2VuZCk7XG4gICAgfVxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIikgPT0gXCJmbG93XCJcbiAgICAgICAgJiYgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIikgPT0gXCJlbmdhZ2VkXCIpIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIFwiaGlzdG9yaWNhbFwiKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9xdWVyeV9wcmVzZXRzKCkge1xuICAgIGlmICghcHJvcHMuY29udGV4dC5pc19udG9wX2VudGVycHJpc2VfbCB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKSA9PSBcImVuZ2FnZWRcIikge1xuXHRudG9wbmdfc3luYy5yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9hbGVydC9wcmVzZXQvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIGlmIChyZXMgPT0gbnVsbCB8fCByZXMubGVuZ3RoID09IDApIHtcblx0cXVlcnlfcHJlc2V0cy52YWx1ZSA9IFtdO1xuXHRudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgXCJcIik7XG5cdG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIFwiXCIpO1xuXHRudG9wbmdfc3luYy5yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBxdWVyeV9wcmVzZXRzLnZhbHVlID0gcmVzWzBdLmxpc3QubWFwKChlbCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGVsLmlkLFxuICAgICAgICAgICAgbmFtZTogZWwubmFtZSxcbiAgICAgICAgICAgIGNvdW50OiBlbC5jb3VudCxcbiAgICAgICAgICAgIGJ1aWx0aW46IHRydWUsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgaWYgKHJlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJlc1sxXS5saXN0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGVsLmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGVsLm5hbWUsXG4gICAgICAgICAgICAgICAgY291bnQ6IGVsLmNvdW50LFxuICAgICAgICAgICAgICAgIGlzX3ByZXNldDogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBxdWVyeV9wcmVzZXRzLnZhbHVlLnB1c2gocXVlcnkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9PSBudWxsIHx8IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9PSBcIlwiKSB7XG4gICAgICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9IHF1ZXJ5X3ByZXNldHMudmFsdWVbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHEgPSBxdWVyeV9wcmVzZXRzLnZhbHVlLmZpbmQoKGkpID0+IGkudmFsdWUgPT0gc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlKTtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0gcSB8fCBxdWVyeV9wcmVzZXRzLnZhbHVlWzBdO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuY291bnQpO1xuICAgIG50b3BuZ19zeW5jLnJlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xufVxuXG5jb25zdCBwYWdlX2lkID0gXCJwYWdlLWFsZXJ0LXN0YXRzXCI7XG5mdW5jdGlvbiBnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpIHtcbiAgICByZXR1cm4gYCR7cGFnZV9pZH1fcXVlcnlfcHJlc2V0c2A7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KGFjdGlvbikge1xuICAgIGlmIChwcm9wcy5jb250ZXh0LnNob3dfY2FyZHMgIT0gdHJ1ZSB8fCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuaXNfcHJlc2V0ID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgdG9wX3RhYmxlX2FycmF5LnZhbHVlID0gYXdhaXQgbG9hZF90b3BfdGFibGVfYXJyYXkoXCJvdmVydmlld1wiKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90b3BfdGFibGVfZGV0YWlscyh0b3AsIHRvcF9pbmRleCkge1xuICAgIHRvcC5zaG93X3NwaW5uZXIgPSB0cnVlO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgaWYgKHRvcC5kYXRhX2xvYWRlZCA9PSBmYWxzZSkge1xuICAgICAgICBsZXQgbmV3X3RvcF9hcnJheSA9IGF3YWl0IGxvYWRfdG9wX3RhYmxlX2FycmF5KHRvcC5pZCwgdG9wKTtcbiAgICAgICAgdG9wLm9wdGlvbnMgPSBuZXdfdG9wX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gdG9wLmlkKS5vcHRpb25zO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICBsZXQgZHJvcGRvd24gPSB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXkudmFsdWVbdG9wX2luZGV4XTtcbiAgICAgICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gICAgfVxuICAgIHRvcC5zaG93X3NwaW5uZXIgPSBmYWxzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90b3BfdGFibGVfYXJyYXkoYWN0aW9uLCB0b3ApIHtcbiAgICAvLyB0b3BfdGFibGUudmFsdWUgPSBbXTtcbiAgICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgY29uc3QgdXJsID0gYCR7cHJvcHMuY29udGV4dC5lbmRwb2ludF9jYXJkc30/JHt1cmxfcGFyYW1zfSZhY3Rpb249JHthY3Rpb259YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIHJlcy5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICAgICAgICBzaG93X3NwaW5uZXI6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YV9sb2FkZWQ6IGFjdGlvbiAhPSAnb3ZlcnZpZXcnLFxuICAgICAgICAgICAgb3B0aW9uczogdC52YWx1ZSxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duID0gKHRvcCwgdG9wX2luZGV4KSA9PiB7XG4gICAgcmV0dXJuIChkKSA9PiB7XG4gICAgICAgIGxvYWRfdG9wX3RhYmxlX2RldGFpbHModG9wLCB0b3BfaW5kZXgpO1xuICAgIH07XG59O1xuXG5hc3luYyBmdW5jdGlvbiByZWdpc3Rlcl9jb21wb25lbnRzX29uX3N0YXR1c191cGRhdGUoKSB7XG4gICAgYXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkoXCJyYW5nZV9waWNrZXJcIik7XG4gICAgLy9pZiAoc2hvd19jaGFydCkgeyAgICAgIFxuICAgIGNoYXJ0LnZhbHVlLnJlZ2lzdGVyX3N0YXR1cygpO1xuICAgIC8vfVxuICAgIC8vdXBkYXRlRG93bmxvYWRCdXR0b24oKTtcbiAgICBudG9wbmdfc3RhdHVzX21hbmFnZXIub25fc3RhdHVzX2NoYW5nZShwYWdlLCAobmV3X3N0YXR1cykgPT4ge1xuICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICB0YWJsZV9hbGVydHMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xuICAgIH0sIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25fdGFibGVfbG9hZGVkKCkge1xuICAgIHJlZ2lzdGVyX3RhYmxlX2FsZXJ0c19ldmVudHMoKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJfdGFibGVfYWxlcnRzX2V2ZW50cygpIHtcbiAgICBsZXQganF1ZXJ5X3RhYmxlX2FsZXJ0cyA9ICQoYCMke3RhYmxlX2lkLnZhbHVlfWApO1xuICAgIGpxdWVyeV90YWJsZV9hbGVydHMub24oJ2NsaWNrJywgYGEudGFnLWZpbHRlcmAsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGFkZF90YWJsZV9yb3dfZmlsdGVyKGUsICQodGhpcykpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKSB7XG4gICAgbGV0IHVybCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcbiAgICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgICAgIFwibDdfcHJvdG9cIjogKHByb3RvLCByb3cpID0+IHtcbiAgICAgICAgICAgIGxldCBjb25maWRlbmNlID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChwcm90by5jb25maWRlbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHByb3RvLmNvbmZpZGVuY2U7XG4gICAgICAgICAgICAgICAgKHRpdGxlID09IFwiRFBJXCIpID8gY29uZmlkZW5jZSA9IGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXN1Y2Nlc3NcIiB0aXRsZT1cIiR7dGl0bGV9XCI+JHt0aXRsZX08L3NwYW4+YCA6IGNvbmZpZGVuY2UgPSBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy13YXJuaW5nXCIgdGl0bGU9XCIke3RpdGxlfVwiPiR7dGl0bGV9PC9zcGFuPmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnbDdwcm90bycsIHByb3RvLnZhbHVlLCBwcm90by5sYWJlbCkgKyBcIiBcIiArIGAke2NvbmZpZGVuY2V9YDtcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbmZvXCI6IChpbmZvLCByb3cpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3B5X2J1dHRvbiA9ICcnXG4gICAgICAgICAgICBpZihpbmZvLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29weV9idXR0b24gPSBgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGlnaHQgYnRuLXNtIGJvcmRlciBtcy0xXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIiBvbmNsaWNrPVwiXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEudmFsdWUgPSAnJHtpbmZvLnZhbHVlfSc7ICAgIFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBcmVhLnN0eWxlLmxlZnQgPSAnLTk5OTk5OXB4JzsgICAgXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucHJlcGVuZCh0ZXh0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBcmVhLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1wiXG4gICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz1cImZhcyBmYS1jb3B5XCI+PC9pPjwvYnV0dG9uPmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgJHtjb3B5X2J1dHRvbn0gJHtEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnaW5mbycsIGluZm8udmFsdWUsIGluZm8ubGFiZWwpfWA7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBsZXQgc2V0X3F1ZXJ5X3ByZXNldF9jb2x1bW5zID0gc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLmlzX3ByZXNldCAmJiBjb2x1bW5zLmxlbmd0aCA+IDA7XG4gICAgaWYgKHNldF9xdWVyeV9wcmVzZXRfY29sdW1ucykge1xuICAgICAgICAvLyBhZGQgYWN0aW9uIGJ1dHRvbiB0aGF0IGlzIHRoZSBmaXJzdCBidXR0b25cbiAgICAgICAgY29sdW1ucyA9IFtjb2x1bW5zWzBdXS5jb25jYXQocHJvcHMuY29udGV4dC5jb2x1bW5zX2RlZik7XG4gICAgfVxuICAgIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcblx0XG4gICAgICAgIGlmIChjLmlkID09IFwiYWN0aW9uc1wiKSB7XG5cdCAgICBpZiAoc2V0X3F1ZXJ5X3ByZXNldF9jb2x1bW5zID09IHRydWUpIHtcblx0XHRjLmJ1dHRvbl9kZWZfYXJyYXkgPSBbXG5cdFx0ICAgIHtcblx0XHRcdFwiaWRcIjogXCJleHBhbmRcIixcblx0XHRcdFwiaWNvblwiOiBcImZhcyBmYSBmYS1zZWFyY2gtcGx1c1wiLFxuXHRcdFx0XCJjbGFzc1wiOltcImxpbmstYnV0dG9uXCJdLFxuXHRcdFx0XCJ0aXRsZV9pMThuXCI6IFwiZGJfc2VhcmNoLmV4cGFuZF9idXR0b25cIixcblx0XHRcdFwiZXZlbnRfaWRcIjogXCJjbGlja19idXR0b25fZXhwYW5kXCJcblx0XHQgICAgfSxcblx0XHRdO1xuXHRcdHJldHVybjtcblx0ICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgICAgICAgICBzbm1wX2luZm86IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X3NubXBfaW5mbyxcbiAgICAgICAgICAgICAgICBpbmZvOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19pbmZvLFxuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfaGlzdG9yaWNhbCxcbiAgICAgICAgICAgICAgICBhY2tub3dsZWRnZTogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfYWNrbm93bGVkZ2UsXG4gICAgICAgICAgICAgICAgZGlzYWJsZTogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfZGlzYWJsZSxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgcmVtb3ZlOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19kZWxldGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZpc2libGVfZGljdFtiLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICBiLmNsYXNzLnB1c2goXCJsaW5rLWRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG5jb25zdCBhZGRfdGFibGVfcm93X2ZpbHRlciA9IChlLCBhKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGxldCBrZXkgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGRpc3BsYXlWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmVhbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCBvcGVyYXRvciA9ICdlcSc7XG5cbiAgICAvLyBSZWFkIHRhZyBrZXkgYW5kIHZhbHVlIGZyb20gdGhlIDxhPiBpdHNlbGYgaWYgcHJvdmlkZWRcbiAgICBpZiAoYS5kYXRhKCd0YWdLZXknKSAhPSB1bmRlZmluZWQpIGtleSA9IGEuZGF0YSgndGFnS2V5Jyk7XG4gICAgaWYgKGEuZGF0YSgndGFnUmVhbHZhbHVlJykgIT0gdW5kZWZpbmVkKSByZWFsVmFsdWUgPSBhLmRhdGEoJ3RhZ1JlYWx2YWx1ZScpO1xuICAgIGVsc2UgaWYgKGEuZGF0YSgndGFnVmFsdWUnKSAhPSB1bmRlZmluZWQpIHJlYWxWYWx1ZSA9IGEuZGF0YSgndGFnVmFsdWUnKTtcbiAgICBpZiAoYS5kYXRhKCd0YWdPcGVyYXRvcicpICE9IHVuZGVmaW5lZCkgb3BlcmF0b3IgPSBhLmRhdGEoJ3RhZ09wZXJhdG9yJyk7XG5cbiAgICBsZXQgZmlsdGVyID0ge1xuICAgICAgICBpZDoga2V5LFxuICAgICAgICB2YWx1ZTogcmVhbFZhbHVlLFxuICAgICAgICBvcGVyYXRvcjogb3BlcmF0b3IsXG4gICAgfTtcbiAgICBhZGRfZmlsdGVyKGZpbHRlcik7XG59XG5cbmZ1bmN0aW9uIGFkZF90b3BfdGFibGVfZmlsdGVyKG9wdCwgZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBsZXQgZmlsdGVyID0ge1xuICAgICAgICBpZDogb3B0LmtleSxcbiAgICAgICAgdmFsdWU6IG9wdC52YWx1ZSxcbiAgICAgICAgb3BlcmF0b3I6IG9wdC5vcGVyYXRvcixcbiAgICB9O1xuICAgIGFkZF9maWx0ZXIoZmlsdGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkX2ZpbHRlcihmaWx0ZXIpIHtcbiAgICBpZiAocmFuZ2VfcGlja2VyLnZhbHVlLmlzX2ZpbHRlcl9kZWZpbmVkKGZpbHRlcikpIHtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgZmlsdGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBgRmlsdGVyICR7ZmlsdGVyLnZhbHVlfSBub3QgZGVmaW5lZGA7XG4gICAgfVxufVxuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbmZ1bmN0aW9uIGNsaWNrX25hdmJhcl9pdGVtKGl0ZW0pIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCBpdGVtLnBhZ2VfbmFtZSk7XG4gICAgbGV0IGlzX2FsZXJ0X3N0YXRzX3VybCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcbiAgICAgICAgcmVtb3ZlX2ZpbHRlcnNfZnJvbV91cmwoKTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2ZpbHRlcnNfZnJvbV91cmwoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKGZpbHRlcnMubWFwKChmKSA9PiBmLmlkKSk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlcihhbGVydCkge1xuICAgIGN1cnJlbnRfYWxlcnQudmFsdWUgPSBhbGVydDtcbiAgICBtb2RhbF9hbGVydHNfZmlsdGVyLnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3Blcm1hbmVudF9saW5rKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJChwZXJtYW5lbnRfbGlua19idXR0b24udmFsdWUpO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBwbGFjZWhvbGRlci52YWx1ZSA9IGxvY2F0aW9uLmhyZWY7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG4gICAgcGxhY2Vob2xkZXIuc2VsZWN0KCk7XG5cbiAgICAvLyBjb3B5IHRoZSB1cmwgdG8gdGhlIGNsaXBib2FyZCBmcm9tIHRoZSBwbGFjZWhvbGRlclxuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICBcbiAgICAkdGhpcy5hdHRyKFwidGl0bGVcIiwgYCR7X2kxOG4oJ2NvcGllZCcpfSFgKVxuICAgICAgICAudG9vbHRpcChcImRpc3Bvc2VcIilcbiAgICAgICAgLnRvb2x0aXAoKVxuICAgICAgICAudG9vbHRpcChcInNob3dcIik7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG5cbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9zbmFwc2hvdCgpIHtcbiAgICBtb2RhbF9zbmFwc2hvdC52YWx1ZS5zaG93KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFkZF9leGNsdWRlKHBhcmFtcykge1xuICAgIHBhcmFtcy5jc3JmID0gcHJvcHMuY29udGV4dC5jc3JmO1xuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9hbGVydC9leGNsdXNpb24ubHVhYDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvL3RvZG8gcmVsb2FkVGFibGUoJHRhYmxlLCB1cmxfcGFyYW1zKTtcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCB7IHRleHRfaHRtbDogX2kxOG4oJ2NoZWNrX2V4Y2x1c2lvbi5kaXNhYmxlX3dhcm4nKSwgdHlwZTogXCJhbGVydC1pbmZvXCIsIHRpbWVvdXQ6IDIgfSk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWZyZXNoX3BhZ2VfY29tcG9uZW50cygpIHtcbiAgICBsZXQgdCA9IHRhYmxlX2FsZXJ0cy52YWx1ZTtcbiAgICBsZXQgYyA9IGNoYXJ0LnZhbHVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0LnJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgYy51cGRhdGVfY2hhcnQoKTtcbiAgICB9LCAxICogMTAwMCk7XG59XG5cbi8qIEluIGNhc2Ugbm8gcm93cyBhcmUgcHJpbnRlZCwgdGhlbiB0aGUgbWVzc2FnZSBoYXMgdG8gYmUgZGlzcGxheWVkICovXG5mdW5jdGlvbiByb3dzX2xvYWRlZChyZXMpIHtcbiAgICBpZihyZXM/LnJvd3MgIT0gbnVsbCkge1xuICAgICAgICBkaXNwbGF5X21lc3NhZ2UudmFsdWUgPSAocmVzLnJvd3MubGVuZ3RoID09IDApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgICAgICBcImNsaWNrX2J1dHRvbl9zbm1wX2luZm9cIjogY2xpY2tfYnV0dG9uX3NubXBfaW5mbyxcbiAgICAgICAgXCJjbGlja19idXR0b25faW5mb1wiOiBjbGlja19idXR0b25faW5mbyxcbiAgICAgICAgXCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93c1wiOiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyxcbiAgICAgICAgXCJjbGlja19idXR0b25fYWNrbm93bGVkZ2VcIjogY2xpY2tfYnV0dG9uX2Fja25vd2xlZGdlLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9kaXNhYmxlXCI6IGNsaWNrX2J1dHRvbl9kaXNhYmxlLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9zZXR0aW5nc1wiOiBjbGlja19idXR0b25fc2V0dGluZ3MsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3JlbW92ZVwiOiBjbGlja19idXR0b25fcmVtb3ZlLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9leHBhbmRcIjogY2xpY2tfYnV0dG9uX2V4cGFuZCxcbiAgICB9O1xuICAgIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9leHBhbmQoZXZlbnQpIHtcbiAgICBjb25zdCBhbGVydCA9IGV2ZW50LnJvdztcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgXCJcIik7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgXCJcIik7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycztcbiAgICBsZXQgcm93X2ZpbHRlcnMgPSBhbGVydD8uZmlsdGVyPy50YWdfZmlsdGVycztcbiAgICBpZiAocm93X2ZpbHRlcnM/Lmxlbmd0aCA+IDApIHtcblx0cm93X2ZpbHRlcnMgPSByb3dfZmlsdGVycy5tYXAoKGYpID0+IHtcblx0ICAgIHJldHVybiB7XG5cdFx0aWQ6IGYuaWQsXG5cdFx0b3BlcmF0b3I6IGYub3AsXG5cdFx0dmFsdWU6IGYudmFsdWUsXG5cdCAgICB9O1xuXHR9KTtcblx0ZmlsdGVycyA9IGZpbHRlcnMuY29uY2F0KHJvd19maWx0ZXJzKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIGR1cGxpY2F0ZSBmaWx0ZXJzXG4gICAgbGV0IGZpbHRlcnNfZGljdCA9IHt9O1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4gZmlsdGVyc19kaWN0W2Ake2YuaWR9XyR7Zi5vcGVyYXRvcn1fJHtmLnZhbHVlfWBdID0gZik7XG4gICAgZmlsdGVycyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShmaWx0ZXJzX2RpY3QpO1xuICAgIFxuICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IGZpbHRlcnNNYW5hZ2VyLmdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoZmlsdGVyc19vYmplY3QpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzKCkge1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIG1vZGFsX2Fja25vd2xlZGdlX2FsZXJ0cy52YWx1ZS5zaG93KHN0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfZGVsZXRlX2FsZXJ0cygpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBtb2RhbF9kZWxldGVfYWxlcnRzLnZhbHVlLnNob3coc3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3JlbW92ZShldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGxldCBzdGF0dXNfdmlldyA9IGdldF9zdGF0dXNfdmlldygpO1xuICAgIG1vZGFsX2RlbGV0ZS52YWx1ZS5zaG93KGFsZXJ0LCBzdGF0dXNfdmlldyk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zZXR0aW5ncyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGNvbnN0IGNoZWNrX3NldHRpbmdzX2hyZWYgPSAkKGFsZXJ0Lm1zZy5jb25maWdzZXRfcmVmKS5hdHRyKCdocmVmJyk7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjaGVja19zZXR0aW5nc19ocmVmO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZGlzYWJsZShldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIHNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlcihhbGVydCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZShldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIG1vZGFsX2Fja25vd2xlZGdlLnZhbHVlLnNob3coYWxlcnQsIHByb3BzLmNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGlmIChhbGVydC5saW5rX3RvX3Bhc3RfZmxvd3MpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBhbGVydC5saW5rX3RvX3Bhc3RfZmxvd3M7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhYDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zbm1wX2luZm8oZXZlbnQpIHtcbiAgICBjb25zdCBhbGVydCA9IGV2ZW50LnJvdztcbiAgICBsZXQgaHJlZiA9IGBgO1xuICAgIGlmIChhbGVydC5wb3J0LnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke2FsZXJ0LmlwfSZzbm1wX3BvcnRfaWR4PSR7YWxlcnQucG9ydC52YWx1ZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhyZWYgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3NubXBfZGV2aWNlX2RldGFpbHMubHVhP2hvc3Q9JHthbGVydC5pcH1gO1xuICAgIH1cbiAgICB3aW5kb3cub3BlbihocmVmLCBcIl9ibGFua1wiKTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2luZm8oZXZlbnQpIHtcbiAgICBjb25zdCBhbGVydCA9IGV2ZW50LnJvdztcbiAgICBsZXQgc3RhdHVzX3ZpZXcgPSBnZXRfc3RhdHVzX3ZpZXcoKTtcbiAgICBsZXQgcGFyYW1zX29iaiA9IHtcbiAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgc3RhdHVzOiBzdGF0dXNfdmlldyxcbiAgICAgICAgcm93X2lkOiBhbGVydC5yb3dfaWQsXG4gICAgICAgIHRzdGFtcDogYWxlcnQudHN0YW1wLnZhbHVlLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zX29iaik7XG4gICAgY29uc3QgaHJlZiA9IGAke3Byb3BzLmNvbnRleHQuYWxlcnRfZGV0YWlsc191cmx9PyR7dXJsX3BhcmFtc31gO1xuICAgIHdpbmRvdy5vcGVuKGhyZWYsIFwiX2JsYW5rXCIpO1xufVxuXG5mdW5jdGlvbiBnZXRfc3RhdHVzX3ZpZXcoKSB7XG4gICAgbGV0IHN0YXR1c192aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG4gICAgaWYgKHN0YXR1c192aWV3ID09IG51bGwgfHwgc3RhdHVzX3ZpZXcgPT0gXCJcIikge1xuICAgICAgICBzdGF0dXNfdmlldyA9IFwiaGlzdG9yaWNhbFwiO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHVzX3ZpZXc7XG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxOYXZiYXIgaWQ9XCJuYXZiYXJcIiA6bWFpbl90aXRsZT1cImNvbnRleHQubmF2YmFyLm1haW5fdGl0bGVcIiA6YmFzZV91cmw9XCJjb250ZXh0Lm5hdmJhci5iYXNlX3VybFwiXG4gICAgICAgIDpoZWxwX2xpbms9XCJjb250ZXh0Lm5hdmJhci5oZWxwX2xpbmtcIiA6aXRlbXNfdGFibGU9XCJjb250ZXh0Lm5hdmJhci5pdGVtc190YWJsZVwiIEBjbGlja19pdGVtPVwiY2xpY2tfbmF2YmFyX2l0ZW1cIj5cbiAgICA8L05hdmJhcj5cblxuICAgIDxkaXYgY2xhc3M9J3Jvdyc+XG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbC0xMic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItMlwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEwMFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXM9XCJyYW5nZS1jb250YWluZXIgZC1mbGV4IGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlLXBpY2tlciBkLWZsZXggbS1hdXRvIGZsZXgtd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbGVydEluZm8gaWQ9XCJhbGVydF9pbmZvXCIgOmdsb2JhbD1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJhbmdlUGlja2VyIHYtaWY9XCJtb3VudF9yYW5nZV9waWNrZXJcIiByZWY9XCJyYW5nZV9waWNrZXJcIiBpZD1cInJhbmdlX3BpY2tlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDptaW5fdGltZV9pbnRlcnZhbF9pZD1cIm1pbl90aW1lX2ludGVydmFsX2lkXCIgOnJvdW5kX3RpbWU9XCJyb3VuZF90aW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoIHYtaWY9XCJwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfeGxcIiB2LW1vZGVsOnZhbHVlPVwiZmxvd3NfYWdncmVnYXRlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJtZS0yIG10LTFcIiA6Y2hhbmdlX2xhYmVsX3NpZGU9XCJ0cnVlXCIgOmxhYmVsPVwiZmxvd190eXBlX2xhYmVsXCIgc3R5bGU9XCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2VfdmFsdWU9XCJjaGFuZ2VfZmxvd190eXBlXCI+PC9Td2l0Y2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXMtMSBtZS0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cIm1lLTIgZm9ybS1zZWxlY3RcIiBzdHlsZT1cIm1pbi13aWR0aDo4cmVtO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZF9xdWVyeV9wcmVzZXRcIiBAY2hhbmdlPVwidXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzKClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtaWY9XCJpdGVtLmJ1aWx0aW4gPT0gdHJ1ZVwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGdyb3VwIHYtaWY9XCJwYWdlICE9ICdhbmFseXNpcydcIiA6bGFiZWw9XCJfaTE4bigncXVlcmllcy5xdWVyaWVzJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gcXVlcnlfcHJlc2V0c1wiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2LWlmPVwiIWl0ZW0uYnVpbHRpblwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0Z3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9yYW5nZV9idXR0b25zPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X3Blcm1hbGlua1wiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZ2V0X3Blcm1hbmVudF9saW5rXCIgOnRpdGxlPVwiX2kxOG4oJ2dyYXBocy5nZXRfcGVybWFuZW50X2xpbmsnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPVwicGVybWFuZW50X2xpbmtfYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtbGlua1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtaWY9XCJjb250ZXh0LnNob3dfZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdncmFwaHMuZG93bmxvYWRfcmVjb3JkcycpXCIgOmhyZWY9XCJocmVmX2Rvd25sb2FkX3JlY29yZHNcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1maWxlXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImNvbnRleHQuc2hvd19wY2FwX2Rvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZG93bmxvYWQnKVwiPjxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWRvd25sb2FkXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5pc19udG9wX2VudGVycHJpc2VfbVwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2hvd19tb2RhbF9zbmFwc2hvdFwiIDp0aXRsZT1cIl9pMThuKCdkYXRhdGFibGUubWFuYWdlX3NuYXBzaG90cycpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmYXMgZmEtbGcgZmEtY2FtZXJhLXJldHJvXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmFuZ2VQaWNrZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29sLTEyJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImNvbnRleHQuc2hvd19jaGFydFwiIGNsYXNzPVwiY29sLTEyIG1iLTJcIiBpZD1cImNoYXJ0LXZ1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIG92ZXJmbG93LWhpZGRlblwiIDpzdHlsZT1cImNoYXJ0X3N0eWxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVwiY2FyZCBoLTMwMCBvdmVyZmxvdy1oaWRkZW5cIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hhcnQgcmVmPVwiY2hhcnRcIiBpZD1cImNoYXJ0XzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9kYXRhX3VybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1hcF9jaGFydF9vcHRpb25zPVwiZl9tYXBfY2hhcnRfb3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyb3VuZF90aW1lPVwicm91bmRfdGltZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2Zsb3dzXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6dGFibGVfY29uZmlnX2lkPVwidGFibGVfY29uZmlnX2lkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiIEBsb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiB0b3BfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfb25fb3Blbj1cImdldF9vcGVuX3RvcF90YWJsZV9kcm9wZG93bih0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiZWwgPT4geyB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCI+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgOnNob3c9XCJ0LnNob3dfc3Bpbm5lclwiIHNpemU9XCIxcmVtXCIgY2xhc3M9XCJtZS0xXCI+PC9TcGlubmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtZm9yPVwib3B0IGluIHQub3B0aW9uc1wiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7IGRpc3BsYXk6IGJsb2NrO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90b3BfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50KVwiIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXIgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+e3sgb3B0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gY3VzdG9tX2hlYWRlciAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGJvZHkgLS0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJwcm9wcy5jb250ZXh0LnNob3dfYWNrbm93bGVkZ2VfYWxsIHx8IHByb3BzLmNvbnRleHQuc2hvd19kZWxldGVfYWxsXCIgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJwcm9wcy5jb250ZXh0LnNob3dfYWNrbm93bGVkZ2VfYWxsXCIgaWQ9XCJkdC1idG4tYWNrbm93bGVkZ2VcIiA6ZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PVwiI2R0LWFja25vd2xlZGdlLW1vZGFsXCIgZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhIGZhLXVzZXItY2hlY2tcIj48L2k+IEFja25vd2xlZGdlIEFsZXJ0c1xuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwicHJvcHMuY29udGV4dC5zaG93X2RlbGV0ZV9hbGxcIiBpZD1cImR0LWJ0bi1kZWxldGVcIiA6ZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PVwiI2R0LWRlbGV0ZS1tb2RhbFwiIGRhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYSBmYS10cmFzaFwiPjwvaT4gRGVsZXRlIEFsZXJ0c1xuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkIGZvb3RlciAtLT5cbiAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQtc2hhZG93IC0tPlxuXG4gICAgICAgIDwvZGl2PiA8IS0tIGRpdiBjb2wgLS0+XG4gICAgPC9kaXY+IDwhLS0gZGl2IHJvdyAtLT5cblxuICAgIDxNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIGlkPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCIgcmVmPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCI+XG4gICAgPC9Nb2RhbFRyYWZmaWNFeHRyYWN0aW9uPlxuXG4gICAgPE1vZGFsU25hcHNob3QgcmVmPVwibW9kYWxfc25hcHNob3RcIiA6Y3NyZj1cImNvbnRleHQuY3NyZlwiPlxuICAgIDwvTW9kYWxTbmFwc2hvdD5cblxuICAgIDxNb2RhbEFja25vbGVkZ2VBbGVydCByZWY9XCJtb2RhbF9hY2tub3dsZWRnZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIEBhY2tub3dsZWRnZT1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+XG4gICAgPC9Nb2RhbEFja25vbGVkZ2VBbGVydD5cblxuICAgIDxNb2RhbERlbGV0ZUFsZXJ0IHJlZj1cIm1vZGFsX2RlbGV0ZVwiIDpjb250ZXh0PVwiY29udGV4dFwiIEBkZWxldGVfYWxlcnQ9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPjwvTW9kYWxEZWxldGVBbGVydD5cblxuICAgIDxNb2RhbEFsZXJ0c0ZpbHRlciA6YWxlcnQ9XCJjdXJyZW50X2FsZXJ0XCIgOnBhZ2U9XCJwYWdlXCIgQGV4Y2x1ZGU9XCJhZGRfZXhjbHVkZVwiIHJlZj1cIm1vZGFsX2FsZXJ0c19maWx0ZXJcIj5cbiAgICA8L01vZGFsQWxlcnRzRmlsdGVyPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfc3RhdHVzX21hbmFnZXIsIG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfc3luYyB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgbnRvcENoYXJ0QXBleCB9IGZyb20gXCIuLi9jb21wb25lbnRzL250b3BDaGFydEFwZXguanNcIjtcbmltcG9ydCB7IERhdGFUYWJsZVJlbmRlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzXCI7XG5pbXBvcnQgRm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWxlcnRzRmlsdGVyIH0gZnJvbSBcIi4vbW9kYWwtYWxlcnRzLWZpbHRlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBY2tub2xlZGdlQWxlcnQgfSBmcm9tIFwiLi9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVBbGVydCB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1hbGVydC52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9zd2l0Y2gudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBwYWdlX2lkID0gXCJwYWdlLWZsb3ctaGlzdG9yaWNhbFwiO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGVfZmxvd3MgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF90cmFmZmljX2V4dHJhY3Rpb24gPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9zbmFwc2hvdCA9IHJlZihudWxsKTtcbmNvbnN0IHJhbmdlX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHBlcm1hbmVudF9saW5rX2J1dHRvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FsZXJ0c19maWx0ZXIgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hY2tub3dsZWRnZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZSA9IHJlZihudWxsKTtcblxuY29uc3QgY3VycmVudF9hbGVydCA9IHJlZihudWxsKTtcbmNvbnN0IGRlZmF1bHRfaWZpZCA9IHByb3BzLmNvbnRleHQuaWZpZDtcbmNvbnN0IHBhZ2UgPSByZWYoXCJcIik7XG5jb25zdCB0YWJsZV9jb25maWdfaWQgPSByZWYoXCJcIik7XG5jb25zdCB0YWJsZV9pZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlPy52YWx1ZSA9PSBudWxsKSB7IHJldHVybiB0YWJsZV9jb25maWdfaWQudmFsdWU7IH1cbiAgICBsZXQgaWQgPSBgJHt0YWJsZV9jb25maWdfaWQudmFsdWV9XyR7c2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlfWA7XG4gICAgcmV0dXJuIGlkO1xufSk7XG5cbmNvbnN0IGhyZWZfZG93bmxvYWRfcmVjb3JkcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvLyBhZGQgaW1wb3NzaWJsZSBpZiBvbiByZWYgdmFyaWFibGUgdG8gcmVsb2FkIHRoaXMgZXhwcmVzc2lvbiBldmVyeSB0aW1lIGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZC52YWx1ZSBjaGFuZ2VcbiAgICBpZiAoY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlIDwgMCkgeyB0aHJvdyBcIm5ldmVyIHJ1blwiOyB9XG4gICAgY29uc3QgZG93bmxvYWRfZW5kcG9pbnQgPSBwcm9wcy5jb250ZXh0LmRvd25sb2FkLmVuZHBvaW50O1xuICAgIGxldCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICBsZXQgY29sdW1ucyA9IHRhYmxlX2Zsb3dzLnZhbHVlLmdldF9jb2x1bW5zX2RlZnMoKTtcbiAgICBsZXQgdmlzaWJsZV9jb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoKGMpID0+IGMudmlzaWJsZSkubWFwKChjKSA9PiBjLmlkKS5qb2luKFwiLFwiKTtcbiAgICBwYXJhbXMuZm9ybWF0ID0gXCJ0eHRcIjtcbiAgICBwYXJhbXMudmlzaWJsZV9jb2x1bW5zID0gdmlzaWJsZV9jb2x1bW5zO1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICByZXR1cm4gYCR7bG9jYXRpb24ub3JpZ2lufS8ke2Rvd25sb2FkX2VuZHBvaW50fT8ke3VybF9wYXJhbXN9YDtcbn0pO1xuXG5sZXQgY2hhcnRfZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi90cy5sdWFgO1xuXG5jb25zdCBjaGFydF9zdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuY29udGV4dD8uY2hhcnRfdHlwZSA9PSBcInRvcGstdGltZXNlcmllc1wiKSB7XG4gICAgICAgIHJldHVybiBcImhlaWdodDo0NTBweCFpbXBvcnRhbnRcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwiaGVpZ2h0OjMwMHB4IWltcG9ydGFudFwiO1xuXG59KTtcbmNvbnN0IGNoYXJ0X3R5cGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgLyogQ2hhcnQgdHlwZSBkZWZpbmVkIHRoZSBqc29uIHRlbXBsYXRlIChkZWZhdWx0cyBpbiBkYl9zZWFyY2gubHVhKSAqL1xuICAgIGlmIChwcm9wcy5jb250ZXh0Py5jaGFydF90eXBlID09IFwidG9way10aW1lc2VyaWVzXCIpIHtcbiAgICAgICAgcmV0dXJuIG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX1NUQUNLRUQ7XG4gICAgfVxuICAgIHJldHVybiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19DT0xVTU47XG59KTtcblxuY29uc3QgdG9wX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSk7XG5cbmNvbnN0IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldCA9IHJlZih7fSk7XG5jb25zdCBxdWVyeV9wcmVzZXRzID0gcmVmKFtdKTtcbmNvbnN0IHF1ZXJ5X3ByZXNldHNfY29weSA9IHJlZihbXSk7XG5jb25zdCBtb3VudF9yYW5nZV9waWNrZXIgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBmbG93c19hZ2dyZWdhdGVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGZsb3dfdHlwZV9sYWJlbCA9IHJlZihfaTE4bihcImRhdGF0YWJsZS5hZ2dyZWdhdGVkXCIpKTtcbmNvbnN0IG1pbl90aW1lX2ludGVydmFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgcm91bmRfdGltZSA9IHJlZihmYWxzZSk7XG5jb25zdCBjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQgPSByZWYoMClcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgaW5pdF9wYXJhbXMoKTtcbiAgICBpbml0X3VybF9wYXJhbXMoKTtcbiAgICBhd2FpdCBzZXRfcXVlcnlfcHJlc2V0cygpO1xuICAgIG1vdW50X3JhbmdlX3BpY2tlci52YWx1ZSA9IHRydWU7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICByZWdpc3Rlcl9jb21wb25lbnRzX29uX3N0YXR1c191cGRhdGUoKTtcbiAgICBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xufSk7XG5cbmZ1bmN0aW9uIGluaXRfcGFyYW1zKCkge1xuICAgIHBhZ2UudmFsdWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIik7XG4gICAgaWYgKHBhZ2UudmFsdWUgPT0gbnVsbCkgeyBwYWdlLnZhbHVlID0gXCJvdmVydmlld1wiOyB9XG4gICAgY2hhcnRfZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi90cy5sdWFgO1xuICAgIFxuICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9IHtcbiAgICAgICAgdmFsdWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicXVlcnlfcHJlc2V0XCIpLFxuICAgIH07XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIHRhYmxlX2NvbmZpZ19pZC52YWx1ZSA9IGBmbG93X2hpc3RvcmljYWxgO1xuICAgIGNvbnN0IGFnZ3JlZ2F0ZWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImFnZ3JlZ2F0ZWRcIik7XG4gICAgaWYgKGFnZ3JlZ2F0ZWQgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgdGFibGVfY29uZmlnX2lkLnZhbHVlID0gYGZsb3dfaGlzdG9yaWNhbF9hZ2dyZWdhdGVkYDtcbiAgICAgICAgZmxvd3NfYWdncmVnYXRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlID0gXCJob3VyXCI7XG4gICAgICAgIHJvdW5kX3RpbWUudmFsdWUgPSB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdF91cmxfcGFyYW1zKCkge1xuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgPT0gbnVsbCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJpZmlkXCIsIGRlZmF1bHRfaWZpZCk7XG4gICAgfVxuICAgIC8vIDMwIG1pbiBkZWZhdWx0XG4gICAgLy8gY2hpYW1hcmUgc2V0IGRlZmF1bHRfdGltZSBpbnRlcnZhbFxuICAgIGlmIChmbG93c19hZ2dyZWdhdGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgICAgIG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBmX2NoZWNrX2xhc3RfbWludXRlX2Vwb2NoX2VuZCA9IChlcG9jaCkgPT4ge1xuICAgICAgICAgICAgbGV0IG1pbl90aW1lX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZChtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZXBvY2guZXBvY2hfZW5kIC0gZXBvY2guZXBvY2hfYmVnaW4gPCBtaW5fdGltZV9pbnRlcnZhbDtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXBvY2hfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbChtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSwgZl9jaGVja19sYXN0X21pbnV0ZV9lcG9jaF9lbmQpO1xuICAgICAgICBpZiAoZXBvY2hfaW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4gPSBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiwgbWluX3RpbWVfaW50ZXJ2YWxfaWQudmFsdWUpO1xuICAgICAgICAgICAgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kID0gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQoZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kLCBtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9iZWdpblwiLCBlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9lbmRcIiwgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpID09IFwiZmxvd1wiXG4gICAgICAgICYmIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpID09IFwiZW5nYWdlZFwiKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBcImhpc3RvcmljYWxcIik7XG4gICAgfVxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImFnZ3JlZ2F0ZWRcIikgPT0gbnVsbCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJhZ2dyZWdhdGVkXCIsXCJmYWxzZVwiKTtcbiAgICB9XG4gICAgXG59XG5cbmZ1bmN0aW9uIGdldF9jaGFydF9jb25maWdfZnJvbV9wcmVzZXRfY29uc3QocHJlc2V0X2NvbnN0KSB7XG4gICAgbGV0IGNoYXJ0ID0gcHJlc2V0X2NvbnN0Py5jaGFydDtcbiAgICBpZiAoY2hhcnQgIT0gbnVsbCAmJiBjaGFydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBjaGFydFswXTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfcXVlcnlfcHJlc2V0cygpIHtcbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9wcmVzZXQvY29uc3RzLmx1YT9wYWdlPSR7cGFnZS52YWx1ZX0mYWdncmVnYXRlZD0ke2Zsb3dzX2FnZ3JlZ2F0ZWQudmFsdWV9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBcbiAgICBxdWVyeV9wcmVzZXRzLnZhbHVlID0gcmVzWzBdLmxpc3QubWFwKChlbCkgPT4ge1xuICAgICAgICBsZXQgY2hhcnRfY29uZmlnID0gZ2V0X2NoYXJ0X2NvbmZpZ19mcm9tX3ByZXNldF9jb25zdChlbCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZWwuaWQsIC8vPT0gbnVsbCA/IFwiZmxvd1wiIDogZWwuaWQsXG4gICAgICAgICAgICBuYW1lOiBlbC5uYW1lLFxuICAgICAgICAgICAgY291bnQ6IGNoYXJ0X2NvbmZpZz8ucGFyYW1zPy5jb3VudCxcbiAgICAgICAgICAgIGNoYXJ0X2NvbmZpZzogY2hhcnRfY29uZmlnLFxuICAgICAgICAgICAgYnVpbHRpbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBpZiAocmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmVzWzFdLmxpc3QuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgIGxldCBjaGFydF9jb25maWcgPSBnZXRfY2hhcnRfY29uZmlnX2Zyb21fcHJlc2V0X2NvbnN0KGVsKTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZWwuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogZWwubmFtZSxcbiAgICAgICAgICAgICAgICBjb3VudDogY2hhcnRfY29uZmlnPy5wYXJhbXM/LmNvdW50LFxuICAgICAgICAgICAgICAgIGNoYXJ0X2NvbmZpZzogY2hhcnRfY29uZmlnLFxuICAgICAgICAgICAgICAgIGlzX3ByZXNldDogdHJ1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBxdWVyeV9wcmVzZXRzLnZhbHVlLnB1c2gocXVlcnkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9PSBudWxsIHx8IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSA9PSBcIlwiKSB7XG4gICAgICAgIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZSA9IHF1ZXJ5X3ByZXNldHMudmFsdWVbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHEgPSBxdWVyeV9wcmVzZXRzLnZhbHVlLmZpbmQoKGkpID0+IGkudmFsdWUgPT0gc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlKTtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0gcSB8fCBxdWVyeV9wcmVzZXRzLnZhbHVlWzBdO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuY291bnQpO1xuICAgIG50b3BuZ19zeW5jLnJlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xufVxuXG5jb25zdCBmX21hcF9jaGFydF9vcHRpb25zID0gYXN5bmMgKGNoYXJ0X29wdGlvbnMpID0+IHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcbiAgICBsZXQgZm9ybWF0dGVyX3R5cGUgPSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuY2hhcnRfY29uZmlnPy51bml0X21lYXN1cmU7XG4gICAgaWYgKGZvcm1hdHRlcl90eXBlID09IG51bGwpIHtcbiAgICAgICAgZm9ybWF0dGVyX3R5cGUgPSBcIm51bWJlclwiO1xuICAgIH1cbiAgICBjaGFydF9vcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyX3R5cGUpO1xuICAgIHJldHVybiBjaGFydF9vcHRpb25zO1xufTtcblxuZnVuY3Rpb24gY2hhbmdlX2Zsb3dfdHlwZSgpIHtcbiAgICAvLyBpZiAoZmxvd3NfYWdncmVnYXRlZC52YWx1ZSA9PSBmYWxzZSkge1xuICAgIC8vIFx0bnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoW1wiYWdncmVnYXRlZFwiXSk7XHRcbiAgICAvLyBcdHRhYmxlX2NvbmZpZ19pZC52YWx1ZSA9IFwiZmxvd19oaXN0b3JpY2FsXCI7XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyBcdG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0ZWRcIiwgXCJ0cnVlXCIpO1xuICAgIC8vIFx0dGFibGVfY29uZmlnX2lkLnZhbHVlID0gXCJmbG93X2hpc3RvcmljYWxfYWdncmVnYXRlZFwiO1xuICAgIC8vIH1cbiAgICAvLyByZWZyZXNoX3BhZ2VfY29tcG9uZW50cyh0cnVlKTtcbiAgICAvLyBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xuXG4gICAgLy8gY3VycmVudGx5IHdlIGNhbid0IHJlZnJlc2ggY29tcG9uZW50IHdpdGhvdXQgcmVsb2FkIHRoZSBwYWdlIGJlY2F1c2Ugd2UgbmVlZCByZWZyZXNoIHByb3BzLmNvbnRleHRcbiAgICBpZiAoZmxvd3NfYWdncmVnYXRlZC52YWx1ZSA9PSBmYWxzZSkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhbXCJhZ2dyZWdhdGVkXCJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJhZ2dyZWdhdGVkXCIsIFwidHJ1ZVwiKTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzKCkge1xuICAgIGxldCB1cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJxdWVyeV9wcmVzZXRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuY291bnQpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KGFjdGlvbikge1xuICAgIGlmIChwcm9wcy5jb250ZXh0LnNob3dfY2FyZHMgIT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICB0b3BfdGFibGVfYXJyYXkudmFsdWUgPSBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheShcIm92ZXJ2aWV3XCIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RvcF90YWJsZV9kZXRhaWxzKHRvcCwgdG9wX2luZGV4KSB7XG4gICAgdG9wLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBpZiAodG9wLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBuZXdfdG9wX2FycmF5ID0gYXdhaXQgbG9hZF90b3BfdGFibGVfYXJyYXkodG9wLmlkLCB0b3ApO1xuICAgICAgICB0b3Aub3B0aW9ucyA9IG5ld190b3BfYXJyYXkuZmluZCgodCkgPT4gdC5pZCA9PSB0b3AuaWQpLm9wdGlvbnM7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIGxldCBkcm9wZG93biA9IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheS52YWx1ZVt0b3BfaW5kZXhdO1xuICAgICAgICBkcm9wZG93bi5sb2FkX21lbnUoKTtcbiAgICB9XG4gICAgdG9wLnNob3dfc3Bpbm5lciA9IGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RvcF90YWJsZV9hcnJheShhY3Rpb24sIHRvcCkge1xuICAgIC8vIHRvcF90YWJsZS52YWx1ZSA9IFtdO1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9mbG93L3RvcC5sdWE/JHt1cmxfcGFyYW1zfSZhY3Rpb249JHthY3Rpb259YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIHJlcy5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0LmFjdGlvbiB8fCB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICAgICAgICBzaG93X3NwaW5uZXI6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YV9sb2FkZWQ6IGFjdGlvbiAhPSAnb3ZlcnZpZXcnLFxuICAgICAgICAgICAgb3B0aW9uczogdC52YWx1ZSxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duID0gKHRvcCwgdG9wX2luZGV4KSA9PiB7XG4gICAgcmV0dXJuIChkKSA9PiB7XG4gICAgICAgIGxvYWRfdG9wX3RhYmxlX2RldGFpbHModG9wLCB0b3BfaW5kZXgpO1xuICAgIH07XG59O1xuXG5hc3luYyBmdW5jdGlvbiByZWdpc3Rlcl9jb21wb25lbnRzX29uX3N0YXR1c191cGRhdGUoKSB7XG4gICAgYXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkoXCJyYW5nZV9waWNrZXJcIik7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuc2hvd19jaGFydCkge1xuICAgICAgICBjaGFydC52YWx1ZS5yZWdpc3Rlcl9zdGF0dXMoKTtcbiAgICB9XG4gICAgLy91cGRhdGVEb3dubG9hZEJ1dHRvbigpO1xuICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHBhZ2UudmFsdWUsIChuZXdfc3RhdHVzKSA9PiB7XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgIHRhYmxlX2Zsb3dzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgbG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXcoKTtcblx0Y291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlICs9IDE7XG4gICAgfSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gICAgcmVnaXN0ZXJfdGFibGVfZmxvd3NfZXZlbnRzKCk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyX3RhYmxlX2Zsb3dzX2V2ZW50cygpIHtcbiAgICBsZXQganF1ZXJ5X3RhYmxlX2Zsb3dzID0gJChgIyR7dGFibGVfaWQudmFsdWV9YCk7XG4gICAganF1ZXJ5X3RhYmxlX2Zsb3dzLm9uKCdjbGljaycsIGBhLnRhZy1maWx0ZXJgLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBhZGRfdGFibGVfcm93X2ZpbHRlcihlLCAkKHRoaXMpKTtcbiAgICB9KTtcbn1cblxuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShnZXRfcXVlcnlfcHJlc2V0c19zeW5jX2tleSgpKTtcbiAgICBsZXQgaHRtbF9yZWYgPSAnJztcbiAgICBsZXQgbG9jYXRpb24gPSAnJztcbiAgICBjb25zdCBmX3ByaW50X2FzbiA9IChrZXksIGFzbiwgcm93KSA9PiB7XG4gICAgICAgIGlmIChhc24gIT09IHVuZGVmaW5lZCAmJiBhc24udmFsdWUgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PScke2tleX0nIGRhdGEtdGFnLXZhbHVlPScke2Fzbi52YWx1ZX0nIHRpdGxlPScke2Fzbi50aXRsZX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHthc24ubGFiZWx9PC9hPmA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfTtcbiAgICBjb25zdCBmX3ByaW50X2xhdGVuY3kgPSAoa2V5LCBsYXRlbmN5LCByb3cpID0+IHtcbiAgICAgICAgaWYgKGxhdGVuY3kgPT0gbnVsbCB8fCBsYXRlbmN5ID09IDApIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PScke2tleX0nIGRhdGEtdGFnLXZhbHVlPScke2xhdGVuY3l9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPiR7TnRvcFV0aWxzLm1zZWNUb1RpbWUobGF0ZW5jeSl9PC9hPmA7XG4gICAgfTtcbiAgICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgICAgIFwiZmlyc3Rfc2VlblwiOiAoZmlyc3Rfc2Vlbiwgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlyc3Rfc2VlbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdF9zZWVuLnRpbWU7XG4gICAgICAgIH0sXG4gICAgICAgIFwibDdwcm90b1wiOiAocHJvdG8sIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbmZpZGVuY2UgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKHByb3RvLmNvbmZpZGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gcHJvdG8uY29uZmlkZW5jZTtcbiAgICAgICAgICAgICAgICAodGl0bGUgPT0gXCJEUElcIikgPyBjb25maWRlbmNlID0gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHt0aXRsZX1cIj4ke3RpdGxlfTwvc3Bhbj5gIDogY29uZmlkZW5jZSA9IGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXdhcm5pbmdcIiB0aXRsZT1cIiR7dGl0bGV9XCI+JHt0aXRsZX08L3NwYW4+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdsN3Byb3RvJywgcHJvdG8udmFsdWUsIHByb3RvLmxhYmVsKSArIFwiIFwiICsgYCR7Y29uZmlkZW5jZX1gO1xuICAgICAgICB9LFxuICAgICAgICBcImFzblwiOiAgICAgKGFzbiwgcm93KSAgICAgPT4gZl9wcmludF9hc24oXCJhc25cIiwgICAgIGFzbiwgICAgIHJvdyksXG4gICAgICAgIFwiY2xpX2FzblwiOiAoY2xpX2Fzbiwgcm93KSA9PiBmX3ByaW50X2FzbihcImNsaV9hc25cIiwgY2xpX2Fzbiwgcm93KSxcbiAgICAgICAgXCJzcnZfYXNuXCI6IChzcnZfYXNuLCByb3cpID0+IGZfcHJpbnRfYXNuKFwic3J2X2FzblwiLCBzcnZfYXNuLCByb3cpLFxuICAgICAgICBcImZsb3dfcmlza1wiOiAoZmxvd19yaXNrcywgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmxvd19yaXNrcyA9PSBudWxsKSB7IHJldHVybiBcIlwiOyB9XG4gICAgICAgICAgICBsZXQgcmVzID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxvd19yaXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dfcmlzayA9IGZsb3dfcmlza3NbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvd19yaXNrX2xhYmVsID0gKGZsb3dfcmlzay5sYWJlbCB8fCBmbG93X3Jpc2sudmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dfcmlza19oZWxwID0gKGZsb3dfcmlzay5oZWxwKTtcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtmbG93X3Jpc2tfbGFiZWx9ICR7Zmxvd19yaXNrX2hlbHB9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzLmpvaW4oJywgJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiY2xpX253X2xhdGVuY3lcIjogKGNsaV9ud19sYXRlbmN5LCByb3cpID0+IGZfcHJpbnRfbGF0ZW5jeShcImNsaV9ud19sYXRlbmN5XCIsIGNsaV9ud19sYXRlbmN5LCByb3cpLFxuICAgICAgICBcInNydl9ud19sYXRlbmN5XCI6IChzcnZfbndfbGF0ZW5jeSwgcm93KSA9PiBmX3ByaW50X2xhdGVuY3koXCJzcnZfbndfbGF0ZW5jeVwiLCBzcnZfbndfbGF0ZW5jeSwgcm93KSxcbiAgICAgICAgXCJpbmZvXCI6IChpbmZvLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmZvID09IG51bGwpIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgICAgIHJldHVybiBgPGEgY2xhc3M9J3RhZy1maWx0ZXInIGRhdGEtdGFnLWtleT0naW5mbycgZGF0YS10YWctdmFsdWU9JyR7aW5mby50aXRsZX0nIHRpdGxlPScke2luZm8udGl0bGV9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPiR7aW5mby5sYWJlbH08L2E+YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcigoYykgPT4gcHJvcHMuY29udGV4dD8udmlzaWJsZV9jb2x1bW5zW2MuZGF0YV9maWVsZF0gIT0gZmFsc2UpO1xuICAgIGlmIChzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuaXNfcHJlc2V0ICYmIGNvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBhZGQgYWN0aW9uIGJ1dHRvbiB0aGF0IGlzIHRoZSBmaXJzdCBidXR0b25cbiAgICAgICAgY29sdW1ucyA9IFtjb2x1bW5zWzBdXS5jb25jYXQocHJvcHMuY29udGV4dC5jb2x1bW5zX2RlZik7XG4gICAgfVxuXG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuXG4gICAgICAgIGlmIChjLmlkID09IFwiYWN0aW9uc1wiKSB7XG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlX2RpY3QgPSB7XG4gICAgICAgICAgICAgICAgaW5mbzogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfaW5mbyxcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsX2RhdGE6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2hpc3RvcmljYWwsXG4gICAgICAgICAgICAgICAgZmxvd19hbGVydHM6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2FsZXJ0cyxcbiAgICAgICAgICAgICAgICBwY2FwX2Rvd25sb2FkOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19wY2FwX2Rvd25sb2FkLFxuICAgICAgICAgICAgICAgIHJvd19kYXRhOiBwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfeGwgJiYgZmxvd3NfYWdncmVnYXRlZC52YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGlmIGlzIG5vdCBkZWZpbmVkIGlzIGVuYWJsZWRcbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZV9kaWN0W2IuaWRdICE9IG51bGwgJiYgdmlzaWJsZV9kaWN0W2IuaWRdID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZyhjb2x1bW5zKTtcbiAgICByZXR1cm4gY29sdW1ucztcbn07XG5cbmNvbnN0IGFkZF90YWJsZV9yb3dfZmlsdGVyID0gKGUsIGEpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgbGV0IGtleSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgZGlzcGxheVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCByZWFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9wZXJhdG9yID0gJ2VxJztcblxuICAgIC8vIFJlYWQgdGFnIGtleSBhbmQgdmFsdWUgZnJvbSB0aGUgPGE+IGl0c2VsZiBpZiBwcm92aWRlZFxuICAgIGlmIChhLmRhdGEoJ3RhZ0tleScpICE9IHVuZGVmaW5lZCkga2V5ID0gYS5kYXRhKCd0YWdLZXknKTtcbiAgICBpZiAoYS5kYXRhKCd0YWdSZWFsdmFsdWUnKSAhPSB1bmRlZmluZWQpIHJlYWxWYWx1ZSA9IGEuZGF0YSgndGFnUmVhbHZhbHVlJyk7XG4gICAgZWxzZSBpZiAoYS5kYXRhKCd0YWdWYWx1ZScpICE9IHVuZGVmaW5lZCkgcmVhbFZhbHVlID0gYS5kYXRhKCd0YWdWYWx1ZScpO1xuICAgIGlmIChhLmRhdGEoJ3RhZ09wZXJhdG9yJykgIT0gdW5kZWZpbmVkKSBvcGVyYXRvciA9IGEuZGF0YSgndGFnT3BlcmF0b3InKTtcblxuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIHZhbHVlOiByZWFsVmFsdWUsXG4gICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICB9O1xuICAgIGFkZF9maWx0ZXIoZmlsdGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBvcHQua2V5LFxuICAgICAgICB2YWx1ZTogb3B0LnZhbHVlLFxuICAgICAgICBvcGVyYXRvcjogb3B0Lm9wZXJhdG9yLFxuICAgIH07XG4gICAgYWRkX2ZpbHRlcihmaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRfZmlsdGVyKGZpbHRlcikge1xuICAgIGlmIChyYW5nZV9waWNrZXIudmFsdWUuaXNfZmlsdGVyX2RlZmluZWQoZmlsdGVyKSkge1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCBmaWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBcIlwiKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5pZCwgYCR7ZmlsdGVyLnZhbHVlfTske2ZpbHRlci5vcGVyYXRvcn1gKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbiAgICB9XG59XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuZnVuY3Rpb24gY2xpY2tfbmF2YmFyX2l0ZW0oaXRlbSkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgncGFnZScsIGl0ZW0ucGFnZV9uYW1lKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX2FsZXJ0c19maWx0ZXIoYWxlcnQpIHtcbiAgICBjdXJyZW50X2FsZXJ0LnZhbHVlID0gYWxlcnQ7XG4gICAgbW9kYWxfYWxlcnRzX2ZpbHRlci52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIGdldF9wZXJtYW5lbnRfbGluaygpIHtcbiAgICBjb25zdCAkdGhpcyA9ICQocGVybWFuZW50X2xpbmtfYnV0dG9uLnZhbHVlKTtcbiAgICBjb25zdCBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgcGxhY2Vob2xkZXIudmFsdWUgPSBsb2NhdGlvbi5ocmVmO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgIHBsYWNlaG9sZGVyLnNlbGVjdCgpO1xuXG4gICAgLy8gY29weSB0aGUgdXJsIHRvIHRoZSBjbGlwYm9hcmQgZnJvbSB0aGUgcGxhY2Vob2xkZXJcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChwbGFjZWhvbGRlcik7XG4gICAgJHRoaXMuYXR0cihcInRpdGxlXCIsIGAke19pMThuKCdjb3BpZWQnKX0hYClcbiAgICAgICAgLnRvb2x0aXAoXCJkaXNwb3NlXCIpXG4gICAgICAgIC50b29sdGlwKClcbiAgICAgICAgLnRvb2x0aXAoXCJzaG93XCIpO1xufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbigpIHtcbiAgICBtb2RhbF90cmFmZmljX2V4dHJhY3Rpb24udmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3NuYXBzaG90KCkge1xuICAgIG1vZGFsX3NuYXBzaG90LnZhbHVlLnNob3coKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYWRkX2V4Y2x1ZGUocGFyYW1zKSB7XG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jb250ZXh0LmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2FsZXJ0L2V4Y2x1c2lvbi5sdWFgO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vdG9kbyByZWxvYWRUYWJsZSgkdGFibGUsIHVybF9wYXJhbXMpO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBfaTE4bignY2hlY2tfZXhjbHVzaW9uLmRpc2FibGVfd2FybicpLCB0eXBlOiBcImFsZXJ0LWluZm9cIiwgdGltZW91dDogMiB9KTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfcGFnZV9jb21wb25lbnRzKG5vdF9yZWZyZXNoX3RhYmxlKSB7XG4gICAgbGV0IHQgPSB0YWJsZV9mbG93cy52YWx1ZTtcbiAgICBsZXQgYyA9IGNoYXJ0LnZhbHVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoIW5vdF9yZWZyZXNoX3RhYmxlKSB7XG4gICAgICAgICAgICB0LnJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjLnVwZGF0ZV9jaGFydCgpO1xuICAgIH0sIDEgKiAxMDAwKTtcbn1cblxuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgICAgICBcImNsaWNrX2J1dHRvbl9pbmZvXCI6IGNsaWNrX2J1dHRvbl9pbmZvLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9mbG93X2FsZXJ0c1wiOiBjbGlja19idXR0b25fZmxvd19hbGVydHMsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3NcIjogY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3BjYXBfZG93bmxvYWRcIjogY2xpY2tfYnV0dG9uX3BjYXBfZG93bmxvYWQsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9mbG93cyxcbiAgICB9O1xuICAgIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9pbmZvKGV2ZW50KSB7XG4gICAgY29uc3QgZmxvdyA9IGV2ZW50LnJvdztcbiAgICBjb25zdCBocmVmID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfZmxvd19kZXRhaWxzLmx1YT9yb3dfaWQ9JHtmbG93LnJvd2lkfSZ0c3RhbXA9JHtmbG93LnRzdGFtcH0maW5zdGFuY2VfbmFtZT0ke2Zsb3cuTlRPUE5HX0lOU1RBTkNFX05BTUV9YDtcbiAgICB3aW5kb3cub3BlbihocmVmLCBcIl9ibGFua1wiKTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3BjYXBfZG93bmxvYWQoZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGNvbnN0IGVwb2NoX2ludGVydmFsID0geyBlcG9jaF9iZWdpbjogZmxvdz8uZmlsdGVyPy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBmbG93Py5maWx0ZXI/LmVwb2NoX2VuZCB9O1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KGZsb3c/LmZpbHRlcj8uYnBmLCBlcG9jaF9pbnRlcnZhbCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gICAgY29uc3QgZmxvdyA9IGV2ZW50LnJvdztcbiAgICBsZXQgZmlsdGVyc19wYXJhbXNfb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQga2V5IGluIGZsb3cpIHtcbiAgICAgICAgbGV0IGZpbHRlcl9rZXkgPSBrZXk7XG4gICAgICAgIGlmIChmbG93W2tleV0udGFnX2tleSAhPSBudWxsICYmIGZsb3dba2V5XS50YWdfa2V5ICE9IFwiXCIpIHtcbiAgICAgICAgICAgIGZpbHRlcl9rZXkgPSBmbG93W2tleV0udGFnX2tleTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxvd1trZXldLnZhbHVlID09IG51bGwgJiYgZmxvd1trZXldLnZhbHVlICE9IFwiXCIpIHsgY29udGludWU7IH1cbiAgICAgICAgbGV0IGZpbHRlciA9IGAke2Zsb3dba2V5XS52YWx1ZX07ZXFgO1xuICAgICAgICBmaWx0ZXJzX3BhcmFtc19vYmplY3RbZmlsdGVyX2tleV0gPSBmaWx0ZXI7XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBcIlwiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoZmlsdGVyc19wYXJhbXNfb2JqZWN0KTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZmxvd19hbGVydHMoZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGlmIChmbG93LmFsZXJ0c191cmwpIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChmbG93LmFsZXJ0c191cmwpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2Zsb3dzKGV2ZW50KSB7XG4gICAgY29uc3Qgcm93X2RhdGEgPSBldmVudC5yb3c7XG4gICAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3dfZGF0YS5maWx0ZXIuZXBvY2hfYmVnaW47XG4gICAgY29uc3QgZXBvY2hfZW5kID0gcm93X2RhdGEuZmlsdGVyLmVwb2NoX2VuZDtcbiAgICBjb25zdCBjbGlfaXAgPSByb3dfZGF0YS5mbG93LmNsaV9pcC52YWx1ZTtcbiAgICBjb25zdCBzcnZfaXAgPSByb3dfZGF0YS5mbG93LnNydl9pcC52YWx1ZTtcbiAgICBjb25zdCBzcnZfcG9ydCA9IHJvd19kYXRhLmZsb3cuc3J2X3BvcnQ7XG4gICAgY29uc3QgcHJvYmVfaXAgPSByb3dfZGF0YS5wcm9iZV9pcC52YWx1ZTtcbiAgICBjb25zdCBpbnN0YW5jZV9uYW1lID0gcm93X2RhdGEuTlRPUE5HX0lOU1RBTkNFX05BTUU7XG5cbiAgICBjb25zdCB2bGFuX2lkID0gcm93X2RhdGEudmxhbl9pZC52YWx1ZTtcbiAgICBsZXQgYXNfdmxhbiA9IHZsYW5faWQgIT0gMDtcblxuICAgIGNvbnN0IG91dHB1dF9zbm1wID0gcm93X2RhdGEub3V0cHV0X3NubXAudmFsdWU7XG4gICAgbGV0IGFzX291dHB1dF9zbm1wID0gb3V0cHV0X3NubXAgIT0gMDtcbiAgICBjb25zdCBpbnB1dF9zbm1wID0gcm93X2RhdGEuaW5wdXRfc25tcC52YWx1ZTtcbiAgICBsZXQgYXNfaW5wdXRfc25tcCA9IGlucHV0X3NubXAgIT0gMDtcblxuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2FnZ3JlZ2F0ZWQ9ZmFsc2UmZXBvY2hfYmVnaW49JHtlcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7ZXBvY2hfZW5kfSZjbGlfaXA9JHtjbGlfaXB9O2VxJnNydl9pcD0ke3Nydl9pcH07ZXEmc3J2X3BvcnQ9JHtzcnZfcG9ydH07ZXEmcHJvYmVfaXA9JHtwcm9iZV9pcH07ZXEmaW5zdGFuY2VfbmFtZT0ke2luc3RhbmNlX25hbWV9YDtcbiAgICBpZiAoYXNfdmxhbikge1xuICAgICAgICB1cmwgPSB1cmwgKyBgJnZsYW5faWQ9JHt2bGFuX2lkfTtlcWA7XG4gICAgfVxuXG4gICAgaWYgKGFzX2lucHV0X3NubXApIHtcbiAgICAgICAgdXJsID0gdXJsICsgYCZpbnB1dF9zbm1wPSR7aW5wdXRfc25tcH07ZXFgO1xuICAgIH1cblxuICAgIGlmIChhc19vdXRwdXRfc25tcCkge1xuICAgICAgICB1cmwgPSB1cmwgKyBgJm91dHB1dF9zbm1wPSR7b3V0cHV0X3NubXB9O2VxYDtcbiAgICB9XG5cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG59XG5cbmZ1bmN0aW9uIGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkge1xuICAgIHJldHVybiBgJHtwYWdlX2lkfV9xdWVyeV9wcmVzZXRzYDtcbn1cblxuZnVuY3Rpb24gZ2V0X3N0YXR1c192aWV3KCkge1xuICAgIGxldCBzdGF0dXNfdmlldyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpO1xuICAgIGlmIChzdGF0dXNfdmlldyA9PSBudWxsIHx8IHN0YXR1c192aWV3ID09IFwiXCIpIHtcbiAgICAgICAgc3RhdHVzX3ZpZXcgPSBcImhpc3RvcmljYWxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXR1c192aWV3O1xufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cblx0PGRpdiBzdHlsZT1cIndpZHRoOjEwMCUgaGVpZ2h0OjM4MHB4O1wiIGNsYXNzPVwidGV4dC1lbmQgbWItMlwiPlxuXHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgZm9ybS1jb250cm9sLXNtXCIgdi1mb3I9XCIoaXRlbSwgaSkgaW4gIHRpbWVzZXJpZXNfbGlzdCBcIj5cblx0XHRcdDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgYWxpZ24tbWlkZGxlIG10LTBcIiBAY2xpY2s9XCJjaGFuZ2VfdmlzaWJpbGl0eSghaXRlbS5jaGVja2VkLCBpKVwiXG5cdFx0XHRcdDpjaGVja2VkPVwiaXRlbS5jaGVja2VkXCIgc3R5bGU9XCJib3JkZXItY29sb3I6ICMwZDZlZmQ7XCIgOnN0eWxlPVwieyBiYWNrZ3JvdW5kQ29sb3I6IGl0ZW0uY29sb3IgfVwiPlxuXHRcdFx0e3sgaXRlbS5uYW1lIH19XG5cdFx0PC9sYWJlbD5cblx0PC9kaXY+XG5cdDxkaXYgdi1pZj1cImRpc2FibGVfcG9pbnRlcl9ldmVudHMgPT0gdHJ1ZVwiIGNsYXNzPVwibWItM1wiIHN0eWxlPVwid2lkdGg6MTAwJTtwb2ludGVyLWV2ZW50czpub25lO1wiIHJlZj1cImNoYXJ0XCI+PC9kaXY+XG5cdDxkaXYgdi1lbHNlIGNsYXNzPVwibWItM1wiIHN0eWxlPVwid2lkdGg6MTAwJTtcIiByZWY9XCJjaGFydFwiPjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblx0Y29tcG9uZW50czoge1xuXHR9LFxuXHRwcm9wczoge1xuXHRcdGlkOiBTdHJpbmcsXG5cdFx0Y2hhcnRfdHlwZTogU3RyaW5nLFxuXHRcdHJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U6IEJvb2xlYW4sXG5cdFx0YmFzZV91cmxfcmVxdWVzdDogU3RyaW5nLFxuXHRcdGdldF9wYXJhbXNfdXJsX3JlcXVlc3Q6IEZ1bmN0aW9uLFxuXHRcdGdldF9jdXN0b21fY2hhcnRfb3B0aW9uczogRnVuY3Rpb24sXG5cdFx0ZGlzYWJsZV9wb2ludGVyX2V2ZW50czogQm9vbGVhbixcblx0fSxcblx0ZW1pdHM6IFtcImFwcGx5XCIsIFwiaGlkZGVuXCIsIFwic2hvd2VkXCIsIFwiY2hhcnRfcmVsb2FkZWRcIiwgXCJ6b29tXCJdLFxuXHQvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG5cdGNyZWF0ZWQoKSB7IH0sXG5cdGJlZm9yZVVubW91bnQoKSB7IH0sXG5cdGRhdGEoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNoYXJ0OiBudWxsLFxuXHRcdFx0Y2hhcnRfb3B0aW9uczogbnVsbCxcblx0XHRcdGZyb21fem9vbTogZmFsc2UsXG5cdFx0XHR0aW1lc2VyaWVzX3Zpc2liaWxpdHk6IG51bGwsXG5cdFx0XHR0aW1lc2VyaWVzX2xpc3Q6IFtdLFxuXHRcdFx0Ly9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0XHR9O1xuXHR9LFxuXHQvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cblx0YXN5bmMgbW91bnRlZCgpIHtcblx0XHRhd2FpdCB0aGlzLmluaXQoKTtcblx0XHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcblx0fSxcblx0bWV0aG9kczoge1xuXHRcdGluaXQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcblx0XHRcdGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdFx0bGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdGlmICh0aGlzLnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2UpIHtcblx0XHRcdFx0dGhpcy5yZWdpc3Rlcl9zdGF0dXMoc3RhdHVzKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMuZHJhd19jaGFydCh1cmxfcmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRfaW1hZ2U6IGZ1bmN0aW9uIChpbWFnZSkge1xuXHRcdFx0cmV0dXJuIER5Z3JhcGguRXhwb3J0LmFzUE5HKHRoaXMuY2hhcnQsIGltYWdlLCB0aGlzLiRyZWZzW1wiY2hhcnRcIl0pO1xuXHRcdH0sXG5cdFx0Y2hhbmdlX3Zpc2liaWxpdHk6IGZ1bmN0aW9uICh2aXNpYmxlLCBpZCkge1xuXHRcdFx0aWYgKHRoaXMudGltZXNlcmllc19saXN0W2lkXSAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMudGltZXNlcmllc19saXN0W2lkXVtcImNoZWNrZWRcIl0gPSB2aXNpYmxlXG5cdFx0XHRcdHRoaXMuY2hhcnQuc2V0VmlzaWJpbGl0eShpZCwgdmlzaWJsZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZWdpc3Rlcl9zdGF0dXM6IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHRudG9wbmdfc3RhdHVzX21hbmFnZXIub25fc3RhdHVzX2NoYW5nZSh0aGlzLmlkLCAobmV3X3N0YXR1cykgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5mcm9tX3pvb20gPT0gdHJ1ZSkge1xuXHRcdFx0XHRcdHRoaXMuZnJvbV96b29tID0gZmFsc2U7XG5cdFx0XHRcdFx0Ly9yZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0bGV0IG5ld191cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KG5ld19zdGF0dXMpO1xuXHRcdFx0XHRpZiAobmV3X3VybF9yZXF1ZXN0ID09IHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRcdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdFx0XHR0aGlzLnVwZGF0ZV9jaGFydChuZXdfdXJsX3JlcXVlc3QpO1xuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdH0sXG5cdFx0Z2V0X3VybF9yZXF1ZXN0OiBmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdFx0XHRsZXQgdXJsX3BhcmFtcztcblx0XHRcdGlmICh0aGlzLiRwcm9wcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0ICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKHN0YXR1cyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0c3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR1cmxfcGFyYW1zID0gdGhpcy4kcHJvcHMuZ2V0X3BhcmFtc191cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYCR7dGhpcy4kcHJvcHMuYmFzZV91cmxfcmVxdWVzdCB8fCAnJ30/JHt1cmxfcGFyYW1zfWA7XG5cdFx0fSxcblx0XHRnZXRfY2hhcnRfb3B0aW9uczogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IG51bGw7XG5cdFx0XHRjb25zdCBkYXRlX2Zvcm1hdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5LmdldF9kYXRlX2Zvcm1hdChmYWxzZSwgdGhpcy4kcHJvcHMuY3NyZiwgaHR0cF9wcmVmaXgpO1xuXG5cdFx0XHQvKiBSZXRyaWV2ZSB0aGUgY2hhcnQgb3B0aW9ucyAqL1xuXHRcdFx0aWYgKHRoaXMuJHByb3BzLmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9PSBudWxsKSB7XG5cdFx0XHRcdGNoYXJ0X29wdGlvbnMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuJHByb3BzLmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0XHQvKiBTZXQgdGhlIGRhdGUgZGVwZW5kaW5nIG9uIHRoZSBzZXJ2ZXIgZGF0ZSAqL1xuXHRcdFx0aWYgKCFjaGFydF9vcHRpb25zPy5heGVzPy54Py5heGlzTGFiZWxGb3JtYXR0ZXIpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucy5heGVzLnguYXhpc0xhYmVsRm9ybWF0dGVyID0gZnVuY3Rpb24gKGRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRhdGUsIGRhdGVfZm9ybWF0KTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmICghY2hhcnRfb3B0aW9ucz8uYXhlcy54Py52YWx1ZUZvcm1hdHRlcikge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChkYXRlLCBkYXRlX2Zvcm1hdCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiBFbWl0IHRoZSBjaGFydF9yZWxvYWRlZCBldmVudCAqL1xuXHRcdFx0dGhpcy4kZW1pdCgnY2hhcnRfcmVsb2FkZWQnLCBjaGFydF9vcHRpb25zKTtcblx0XHRcdHJldHVybiBjaGFydF9vcHRpb25zO1xuXHRcdH0sXG5cdFx0ZHJhd19jaGFydDogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGNoYXJ0X29wdGlvbnMuZGF0YSB8fCBbXTtcblx0XHRcdGNoYXJ0X29wdGlvbnMuZGF0YSA9IG51bGw7XG5cdFx0XHRjaGFydF9vcHRpb25zLnpvb21DYWxsYmFjayA9IHRoaXMub25fem9vbWVkO1xuXHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QgPSBbXTtcblx0XHRcdGxldCB2aXNpYmlsaXR5ID0gW107XG5cdFx0XHRsZXQgaWQgPSAwO1xuXHRcdFx0aWYoIWNoYXJ0X29wdGlvbnMuZGlzYWJsZVRzTGlzdCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBjaGFydF9vcHRpb25zLnNlcmllcykge1xuXHRcdFx0XHRcdHRoaXMudGltZXNlcmllc19saXN0LnB1c2goeyBuYW1lOiBrZXksIGNoZWNrZWQ6IHRydWUsIGlkOiBpZCwgY29sb3I6IGNoYXJ0X29wdGlvbnMuY29sb3JzW2lkXSArIFwiIWltcG9ydGFudFwiIH0pO1xuXHRcdFx0XHRcdGlkID0gaWQgKyAxO1xuXHRcdFx0XHRcdHZpc2liaWxpdHkucHVzaCh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5jaGFydCA9IG5ldyBEeWdyYXBoKHRoaXMuJHJlZnNbXCJjaGFydFwiXSwgZGF0YSwgY2hhcnRfb3B0aW9ucyk7XG5cdFx0fSxcblx0XHR1cGRhdGVfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uICh1cmxfcmVxdWVzdCkge1xuXHRcdFx0bGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdHRoaXMuY2hhcnQudXBkYXRlQ2hhcnQoY2hhcnRfb3B0aW9ucyk7XG5cdFx0fSxcblx0XHR1cGRhdGVfY2hhcnRfb3B0aW9uczogZnVuY3Rpb24gKGNoYXJ0X29wdGlvbnMpIHtcblx0XHRcdHRoaXMuY2hhcnQudXBkYXRlQ2hhcnQoY2hhcnRfb3B0aW9ucyk7XG5cdFx0fSxcblx0XHR1cGRhdGVfY2hhcnRfc2VyaWVzOiBmdW5jdGlvbiAoc2VyaWVzKSB7XG5cdFx0XHRpZiAoc2VyaWVzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZU9wdGlvbnMoeyAnZmlsZSc6IHNlcmllcyB9KTtcblx0XHR9LFxuXHRcdG9uX3pvb21lZDogZnVuY3Rpb24gKG1pbkRhdGUsIG1heERhdGUpIHtcblx0XHRcdHRoaXMuZnJvbV96b29tID0gdHJ1ZTtcblx0XHRcdGNvbnN0IGJlZ2luID0gbW9tZW50KG1pbkRhdGUpO1xuXHRcdFx0Y29uc3QgZW5kID0gbW9tZW50KG1heERhdGUpO1xuXHRcdFx0Ly8gdGhlIHRpbWVzdGFtcHMgYXJlIGluIG1pbGxpc2Vjb25kcywgY29udmVydCB0aGVtIGludG8gc2Vjb25kc1xuXHRcdFx0bGV0IG5ld19lcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBOdW1iZXIucGFyc2VJbnQoYmVnaW4udW5peCgpKSwgZXBvY2hfZW5kOiBOdW1iZXIucGFyc2VJbnQoZW5kLnVuaXgoKSkgfTtcblx0XHRcdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBuZXdfZXBvY2hfc3RhdHVzLCB0aGlzLmlkKTtcblx0XHRcdHRoaXMuJGVtaXQoJ3pvb20nLCBuZXdfZXBvY2hfc3RhdHVzKTtcblx0XHR9LFxuXHR9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4uZHlncmFwaC1sZWdlbmQge1xuICBjb2xvcjogIzExMTExMTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRiAhaW1wb3J0YW50O1xuICBib3JkZXItY29sb3I6ICNhN2E2YTY7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci13aWR0aDogdGhpbjtcbiAgei1pbmRleDogODAgIWltcG9ydGFudDtcbiAgYm94LXNoYWRvdzogMCAwLjVyZW0gMXJlbSByZ2JhKDAsMCwwLC4xNSk7XG4gIGJvcmRlci1yYWRpdXM6IDAuMzc1cmVtO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiBhdXRvO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHBhZGRpbmc6IDhweCAhaW1wb3J0YW50O1xufVxuXG4uZHlncmFwaC1sZWdlbmQ+c3BhbiB7XG4gIGNvbG9yOiAjMTExMTExO1xuICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgcGFkZGluZy1yaWdodDogMnB4O1xuICBtYXJnaW4tbGVmdDogLTVweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRiAhaW1wb3J0YW50O1xufVxuXG4uZHlncmFwaC1sZWdlbmQ+c3BhbjpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi10b3A6IDJweDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXHQ8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJSBoZWlnaHQ6MzgwcHg7XCIgY2xhc3M9XCJ0ZXh0LWVuZCBtYi0yXCI+XG5cdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBmb3JtLWNvbnRyb2wtc21cIiB2LWZvcj1cIihpdGVtLCBpKSBpbiAgdGltZXNlcmllc19saXN0IFwiPlxuXHRcdFx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBhbGlnbi1taWRkbGUgbXQtMFwiIEBjbGljaz1cImNoYW5nZV92aXNpYmlsaXR5KCFpdGVtLmNoZWNrZWQsIGkpXCJcblx0XHRcdFx0OmNoZWNrZWQ9XCJpdGVtLmNoZWNrZWRcIiBzdHlsZT1cImJvcmRlci1jb2xvcjogIzBkNmVmZDtcIiA6c3R5bGU9XCJ7IGJhY2tncm91bmRDb2xvcjogaXRlbS5jb2xvciB9XCI+XG5cdFx0XHR7eyBpdGVtLm5hbWUgfX1cblx0XHQ8L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwiZGlzYWJsZV9wb2ludGVyX2V2ZW50cyA9PSB0cnVlXCIgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7XCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cblx0PGRpdiB2LWVsc2UgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIHJlZj1cImNoYXJ0XCI+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXHRjb21wb25lbnRzOiB7XG5cdH0sXG5cdHByb3BzOiB7XG5cdFx0aWQ6IFN0cmluZyxcblx0XHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdFx0cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZTogQm9vbGVhbixcblx0XHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdFx0Z2V0X3BhcmFtc191cmxfcmVxdWVzdDogRnVuY3Rpb24sXG5cdFx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcblx0XHRkaXNhYmxlX3BvaW50ZXJfZXZlbnRzOiBCb29sZWFuLFxuXHR9LFxuXHRlbWl0czogW1wiYXBwbHlcIiwgXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjaGFydF9yZWxvYWRlZFwiLCBcInpvb21cIl0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cblx0Y3JlYXRlZCgpIHsgfSxcblx0YmVmb3JlVW5tb3VudCgpIHsgfSxcblx0ZGF0YSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhcnQ6IG51bGwsXG5cdFx0XHRjaGFydF9vcHRpb25zOiBudWxsLFxuXHRcdFx0ZnJvbV96b29tOiBmYWxzZSxcblx0XHRcdHRpbWVzZXJpZXNfdmlzaWJpbGl0eTogbnVsbCxcblx0XHRcdHRpbWVzZXJpZXNfbGlzdDogW10sXG5cdFx0XHQvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHRcdH07XG5cdH0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuXHRhc3luYyBtb3VudGVkKCkge1xuXHRcdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRcdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHR9LFxuXHRtZXRob2RzOiB7XG5cdFx0aW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0XHRsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0aWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyX3N0YXR1cyhzdGF0dXMpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5kcmF3X2NoYXJ0KHVybF9yZXF1ZXN0KTtcblx0XHR9LFxuXHRcdGdldF9pbWFnZTogZnVuY3Rpb24gKGltYWdlKSB7XG5cdFx0XHRyZXR1cm4gRHlncmFwaC5FeHBvcnQuYXNQTkcodGhpcy5jaGFydCwgaW1hZ2UsIHRoaXMuJHJlZnNbXCJjaGFydFwiXSk7XG5cdFx0fSxcblx0XHRjaGFuZ2VfdmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2libGUsIGlkKSB7XG5cdFx0XHRpZiAodGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdW1wiY2hlY2tlZFwiXSA9IHZpc2libGVcblx0XHRcdFx0dGhpcy5jaGFydC5zZXRWaXNpYmlsaXR5KGlkLCB2aXNpYmxlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlZ2lzdGVyX3N0YXR1czogZnVuY3Rpb24gKHN0YXR1cykge1xuXHRcdFx0bGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0dGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHRcdFx0XHQvL3JldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0XHRcdGlmIChuZXdfdXJsX3JlcXVlc3QgPT0gdXJsX3JlcXVlc3QpIHtcblx0XHRcdFx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0fSxcblx0XHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGxldCB1cmxfcGFyYW1zO1xuXHRcdFx0aWYgKHRoaXMuJHByb3BzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHRcdFx0XHRzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgJHt0aGlzLiRwcm9wcy5iYXNlX3VybF9yZXF1ZXN0IHx8ICcnfT8ke3VybF9wYXJhbXN9YDtcblx0XHR9LFxuXHRcdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gbnVsbDtcblx0XHRcdGNvbnN0IGRhdGVfZm9ybWF0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuZ2V0X2RhdGVfZm9ybWF0KGZhbHNlLCB0aGlzLiRwcm9wcy5jc3JmLCBodHRwX3ByZWZpeCk7XG5cblx0XHRcdC8qIFJldHJpZXZlIHRoZSBjaGFydCBvcHRpb25zICovXG5cdFx0XHRpZiAodGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdH1cblx0XHRcdC8qIFNldCB0aGUgZGF0ZSBkZXBlbmRpbmcgb24gdGhlIHNlcnZlciBkYXRlICovXG5cdFx0XHRpZiAoIWNoYXJ0X29wdGlvbnM/LmF4ZXM/Lng/LmF4aXNMYWJlbEZvcm1hdHRlcikge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC5heGlzTGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZGF0ZSwgZGF0ZV9mb3JtYXQpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFjaGFydF9vcHRpb25zPy5heGVzLng/LnZhbHVlRm9ybWF0dGVyKSB7XG5cdFx0XHRcdGNoYXJ0X29wdGlvbnMuYXhlcy54LnZhbHVlRm9ybWF0dGVyID0gZnVuY3Rpb24gKGRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRhdGUsIGRhdGVfZm9ybWF0KTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qIEVtaXQgdGhlIGNoYXJ0X3JlbG9hZGVkIGV2ZW50ICovXG5cdFx0XHR0aGlzLiRlbWl0KCdjaGFydF9yZWxvYWRlZCcsIGNoYXJ0X29wdGlvbnMpO1xuXHRcdFx0cmV0dXJuIGNoYXJ0X29wdGlvbnM7XG5cdFx0fSxcblx0XHRkcmF3X2NoYXJ0OiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdFx0XHRjb25zdCBkYXRhID0gY2hhcnRfb3B0aW9ucy5kYXRhIHx8IFtdO1xuXHRcdFx0Y2hhcnRfb3B0aW9ucy5kYXRhID0gbnVsbDtcblx0XHRcdGNoYXJ0X29wdGlvbnMuem9vbUNhbGxiYWNrID0gdGhpcy5vbl96b29tZWQ7XG5cdFx0XHR0aGlzLnRpbWVzZXJpZXNfbGlzdCA9IFtdO1xuXHRcdFx0bGV0IHZpc2liaWxpdHkgPSBbXTtcblx0XHRcdGxldCBpZCA9IDA7XG5cdFx0XHRpZighY2hhcnRfb3B0aW9ucy5kaXNhYmxlVHNMaXN0KSB7XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IGluIGNoYXJ0X29wdGlvbnMuc2VyaWVzKSB7XG5cdFx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QucHVzaCh7IG5hbWU6IGtleSwgY2hlY2tlZDogdHJ1ZSwgaWQ6IGlkLCBjb2xvcjogY2hhcnRfb3B0aW9ucy5jb2xvcnNbaWRdICsgXCIhaW1wb3J0YW50XCIgfSk7XG5cdFx0XHRcdFx0aWQgPSBpZCArIDE7XG5cdFx0XHRcdFx0dmlzaWJpbGl0eS5wdXNoKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNoYXJ0ID0gbmV3IER5Z3JhcGgodGhpcy4kcmVmc1tcImNoYXJ0XCJdLCBkYXRhLCBjaGFydF9vcHRpb25zKTtcblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydDogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0dGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydF9vcHRpb25zOiBmdW5jdGlvbiAoY2hhcnRfb3B0aW9ucykge1xuXHRcdFx0dGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydF9zZXJpZXM6IGZ1bmN0aW9uIChzZXJpZXMpIHtcblx0XHRcdGlmIChzZXJpZXMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHRcdHRoaXMuY2hhcnQudXBkYXRlT3B0aW9ucyh7ICdmaWxlJzogc2VyaWVzIH0pO1xuXHRcdH0sXG5cdFx0b25fem9vbWVkOiBmdW5jdGlvbiAobWluRGF0ZSwgbWF4RGF0ZSkge1xuXHRcdFx0dGhpcy5mcm9tX3pvb20gPSB0cnVlO1xuXHRcdFx0Y29uc3QgYmVnaW4gPSBtb21lbnQobWluRGF0ZSk7XG5cdFx0XHRjb25zdCBlbmQgPSBtb21lbnQobWF4RGF0ZSk7XG5cdFx0XHQvLyB0aGUgdGltZXN0YW1wcyBhcmUgaW4gbWlsbGlzZWNvbmRzLCBjb252ZXJ0IHRoZW0gaW50byBzZWNvbmRzXG5cdFx0XHRsZXQgbmV3X2Vwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChiZWdpbi51bml4KCkpLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlbmQudW5peCgpKSB9O1xuXHRcdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIG5ld19lcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHRcdFx0dGhpcy4kZW1pdCgnem9vbScsIG5ld19lcG9jaF9zdGF0dXMpO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5keWdyYXBoLWxlZ2VuZCB7XG4gIGNvbG9yOiAjMTExMTExO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1jb2xvcjogI2E3YTZhNjtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLXdpZHRoOiB0aGluO1xuICB6LWluZGV4OiA4MCAhaW1wb3J0YW50O1xuICBib3gtc2hhZG93OiAwIDAuNXJlbSAxcmVtIHJnYmEoMCwwLDAsLjE1KTtcbiAgYm9yZGVyLXJhZGl1czogMC4zNzVyZW07XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IGF1dG87XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgcGFkZGluZzogOHB4ICFpbXBvcnRhbnQ7XG59XG5cbi5keWdyYXBoLWxlZ2VuZD5zcGFuIHtcbiAgY29sb3I6ICMxMTExMTE7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuICBwYWRkaW5nLXJpZ2h0OiAycHg7XG4gIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGICFpbXBvcnRhbnQ7XG59XG5cbi5keWdyYXBoLWxlZ2VuZD5zcGFuOmZpcnN0LWNoaWxkIHtcbiAgbWFyZ2luLXRvcDogMnB4O1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXY+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMTFcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCIgPlxuXHQ8Yj57e3RpdGxlfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMVwiIHYtaWY9XCJzaG93X2RlbGV0ZV9idXR0b25cIiBAY2xpY2s9XCJkZWxldGVfdHNcIj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJvcmRlclwiPlxuXHQ8c3Bhbj5cblx0ICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT5cblx0PC9zcGFuPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8ZGl2IHYtZm9yPVwiaXRlbSBpbiB0aW1lc2VyaWVzXCIgY2xhc3M9XCJyb3cgY3VzdG9tLW1zIG1lLTIgbXQtMVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTVcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5yYXdcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj57e2l0ZW0ubGFiZWx9fTwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTJcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5wYXN0XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+UGFzdCA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0yXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgQGNoYW5nZT1cInVwZGF0ZV90aW1lc2VyaWVzXCIgdi1tb2RlbD1cIml0ZW0uYXZnXCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+QXZnIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5wZXJjXzk1XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWwgbXMtMSBmb3JtLWNoZWNrLWxhYmVsXCI+OTV0aCBQZXJjIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGltZXNlcmllczogQXJyYXksXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBzaG93X2RlbGV0ZV9idXR0b246IEJvb2xlYW4sXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZGVsZXRlX3RzJywgJ3VwZGF0ZTp0aW1lc2VyaWVzJ10pXG5cbmZ1bmN0aW9uIHVwZGF0ZV90aW1lc2VyaWVzKCkge1xuICAgIGVtaXQoJ3VwZGF0ZTp0aW1lc2VyaWVzJywgcHJvcHMudGltZXNlcmllcyk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZV90cygpIHtcbiAgICBlbWl0KCdkZWxldGVfdHMnLCBwcm9wcy5pZCk7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgLmN1c3RvbS1tcyB7XG4gIG1hcmdpbi1sZWZ0OiAycmVtICFpbXBvcnRhbnQ7XG4gIH1cbi5pbmxpbmUtYmxvY2sge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG59XG4uYm9yZGVyIHtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkICFpbXBvcnRhbnQ7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBieXRlc1RvU2l6ZUZvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJVdGlscy50eXBlcy5ieXRlcy5pZCk7XG5jb25zdCBoYW5kbGVySWRBZGRMaW5rID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1saW5rXCI7XG5jb25zdCBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCA9IFwicGFnZS1zdGF0cy1hY3Rpb24tanVtcC1oaXN0b3JpY2FsXCI7XG5cbmNvbnN0IHRvcF9hcHBsaWNhdGlvbiA9IHtcbiAgICB0YWJsZV92YWx1ZTogXCJpbnRlcmZhY2VcIixcbiAgICB0aXRsZTogaTE4bigncGFnZV9zdGF0cy50b3AudG9wX2FwcGxpY2F0aW9ucycpLFxuICAgIHZpZXc6IFwidG9wX3Byb3RvY29sc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAxLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImFwcGxpY2F0aW9uXCIpLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhOiAncHJvdG9jb2wnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0bGV0IGhhbmRsZXIgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdFx0bGV0IHNjaGVtYSA9IGB0b3A6JHtzZXJ2aWNlLnRzX3NjaGVtYX1gO1xuXHRcdFx0Y29udGV4dC5hZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYShzY2hlbWEsIHNlcnZpY2UudHNfcXVlcnkpXG5cdFx0ICAgIH0sXG5cdFx0fTtcblx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljXCIpLCBuYW1lOiAndHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICBcdC8vcmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgXHRyZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCBvcmRlcmFibGU6IGZhbHNlLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0cmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHQgICAgfVxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdCAgICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0Y29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdGxldCBsN19wcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJsN3Byb3RvXCIsIGAke3NlcnZpY2UucHJvdG9jb2wuaWR9O2VxYCk7XG5cdFx0XHRsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH0mJHtsN19wcm90b31gO1xuXHRcdFx0bGV0IHNvdXJjZV90eXBlID0gY29udGV4dC5zb3VyY2VfdHlwZTtcblx0XHRcdGxldCBzb3VyY2VfYXJyYXkgPSBjb250ZXh0LnNvdXJjZV9hcnJheTtcblx0XHRcdFxuXHRcdFx0bGV0IHBhcmFtcyA9IFwiXCI7XG5cdFx0XHRsZXQgcGFyYW1zX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcblx0XHRcdCAgICBsZXQgc291cmNlID0gc291cmNlX2FycmF5W2ldO1xuXHRcdFx0ICAgIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaWZpZFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaWZpZFwiLCBzb3VyY2UudmFsdWUpO1xuXHRcdFx0ICAgIH0gZWxzZSBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImhvc3RcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlwXCIsIGAke3NvdXJjZS52YWx1ZX07ZXFgKTtcblx0XHRcdCAgICB9XG5cdFx0XHR9KTtcblx0XHRcdHBhcmFtcyA9IHBhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcblx0XHRcdGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aGlzdG9yaWNhbF9mbG93c191cmx9JiR7cGFyYW1zfWA7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0XHR3aW5kb3cub3BlbihoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0ICAgIH1cblx0XHR9O1xuXHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcblx0XHQgICAgeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH0sXG5cdFx0XSk7XG5cdCAgICB9XG5cdH0sXSxcbn07XG5cbmNvbnN0IHRvcF9jYXRlZ29yaWVzID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfY2F0ZWdvcmllcycpLFxuICAgIHZpZXc6IFwidG9wX2NhdGVnb3JpZXNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMixcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiY2F0ZWdvcnlcIiksIG5hbWU6ICdjYXRlZ29yeScsIGRhdGE6ICdjYXRlZ29yeScsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRsZXQgaGFuZGxlciA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0XHRsZXQgc2NoZW1hID0gYHRvcDoke3NlcnZpY2UudHNfc2NoZW1hfWA7XG5cdFx0XHRjb250ZXh0LmFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hKHNjaGVtYSwgc2VydmljZS50c19xdWVyeSlcblx0XHQgICAgfSxcblx0XHR9O1xuXHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHQgICAgXHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBkYXRhOiAncGVyY2VudGFnZScsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0Y29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICB9XG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0ICAgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bGV0IGNhdGVnb3J5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImw3Y2F0XCIsIGAke3NlcnZpY2UuY2F0ZWdvcnkuaWR9O2VxYCk7XG5cdFx0XHRsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH0mJHtjYXRlZ29yeX1gO1xuXHRcdFx0bGV0IHNvdXJjZV90eXBlID0gY29udGV4dC5zb3VyY2VfdHlwZTtcblx0XHRcdGxldCBzb3VyY2VfYXJyYXkgPSBjb250ZXh0LnNvdXJjZV9hcnJheTtcblx0XHRcdFxuXHRcdFx0bGV0IHBhcmFtcyA9IFwiXCI7XG5cdFx0XHRsZXQgcGFyYW1zX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcblx0XHRcdCAgICBsZXQgc291cmNlID0gc291cmNlX2FycmF5W2ldO1xuXHRcdFx0ICAgIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaWZpZFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaWZpZFwiLCBzb3VyY2UudmFsdWUpO1xuXHRcdFx0ICAgIH0gZWxzZSBpZiAoc291cmNlX2RlZi52YWx1ZSA9PSBcImhvc3RcIikge1xuXHRcdFx0XHRyZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlwXCIsIGAke3NvdXJjZS52YWx1ZX07ZXFgKTtcblx0XHRcdCAgICB9XG5cdFx0XHR9KTtcblx0XHRcdHBhcmFtcyA9IHBhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcblx0XHRcdGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aGlzdG9yaWNhbF9mbG93c191cmx9JiR7cGFyYW1zfWA7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0XHR3aW5kb3cub3BlbihoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0ICAgIH1cblx0XHR9O1xuXHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcblx0XHQgICAgeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH0sXG5cdFx0XSk7XG5cdCAgICB9XG5cdH0sXSxcbn07XG5cbmNvbnN0IHRvcF9zZW5kZXJzID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3Bfc2VuZGVycycpLFxuICAgIHZpZXc6IFwidG9wX3NlbmRlcnNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMSxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5ob3N0X25hbWVcIiksIG5hbWU6ICdob3N0X25hbWUnLCBkYXRhOiAnaG9zdCcsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0cmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdCAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICBsZXQgbGFiZWwgPSBkYXRhLmxhYmVsO1xuICAgICAgbGV0IGhvc3RfcmVmID0gJyc7XG5cdCAgICBsZXQgaGFuZGxlciA9IHtcblx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0b25DbGljazogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHQgICAgbGV0IHNjaGVtYSA9IGBob3N0OnRyYWZmaWNgO1xuXHRcdCAgICBjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwiaG9zdFwiLCBzZXJ2aWNlLnRhZ3MsIHNjaGVtYSk7XG5cdFx0fSxcblx0ICAgIH07XG5cdCAgICBpZiAoY29udGV4dC5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbXCJob3N0XCJdICYmIGRhdGEuaXNfbG9jYWwpIHtcbiAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfVxuICAgICAgaWYgKGRhdGEuaXNfYXZhaWxhYmxlKSB7XG4gICAgICAgIGhvc3RfcmVmID0gYCA8YSBocmVmPVwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLmlkfVwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIHRpdGxlPVwiXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGFwdG9wXCI+PC9pPjwvYT5gXG4gICAgICB9XG4gICAgICBcblx0ICAgIHJldHVybiBgJHtsYWJlbH0ke2hvc3RfcmVmfWA7XG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3Auc2VudFwiKSwgbmFtZTogJ3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICByZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICAvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0fSxcbiAgICB9LCAvLyB7XG5cdCAgICAgIC8vIFx0Y29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBkYXRhOiAncGVyY2VudGFnZScsXG5cdCAgICAgIC8vIFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgICAvLyBcdCAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHQgICAgICAvLyBcdCAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICAgIC8vIFx0fVxuXHQgICAgICAvLyB9LFxuXHQgICAgICB7XG5cdFx0ICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdFx0ICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHQgICAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgY29uc3QgaG9zdCA9IHNlcnZpY2UuaG9zdC5pZDtcbiAgICAgICAgICBjb25zdCBob3N0X3RzX2F2YWlsYWJsZT0gc2VydmljZS5ob3N0LmlzX2xvY2FsO1xuXHRcdCAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBwYXJhbXMgPSBcIlwiO1x0XHRcdCAgICBcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1zX2FycmF5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHNlcnZpY2UudGFncykge1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBzZXJ2aWNlLnRhZ3Nba2V5XTtcbiAgICAgICAgICAgICAgbGV0IHBfdXJsID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PSBcImlmaWRcIikge1xuICAgICAgICAgICAgICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSBcImhvc3RcIikge1xuICAgICAgICAgICAgICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7dmFsdWV9O2VxYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFyYW1zX2FycmF5LnB1c2gocF91cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG4gICAgICAgICAgICAgICAgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGp1bXBfdG9faG9zdCA9IHtcbiAgICAgICAgICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7aG9zdH0mcGFnZT1oaXN0b3JpY2FsJnRzX3F1ZXJ5PWlmaWQ6JHtpZmlkfSxob3N0OiR7aG9zdH0mdHNfc2NoZW1hPWhvc3Q6ZGV0YWlscyZlcG9jaF9iZWdpbj0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9lbmR9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbihob3N0X3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGRyb3Bkb3duID0gW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XVxuXHQgICAgICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgaG9zdF90c19hdmFpbGFibGUpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duLnB1c2goeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5ob3N0X2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19ob3N0IH0pXG4gICAgICAgICAgfVxuXG5cdFx0ICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoZHJvcGRvd24pO1xuXHRcdCAgfVxuXHQgICAgICB9LF0sXG59O1xuXG5jb25zdCB0b3BfcmVjZWl2ZXJzID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfcmVjZWl2ZXJzJyksXG4gICAgdmlldzogXCJ0b3BfcmVjZWl2ZXJzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgY29sdW1uRGVmczogW1xuICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgXSxcbiAgICBjb2x1bW5zOiBbe1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AuaG9zdF9uYW1lXCIpLCBuYW1lOiAnaG9zdF9uYW1lJywgZGF0YTogJ2hvc3QnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHQgICAgbGV0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgbGV0IGxhYmVsID0gZGF0YS5sYWJlbDtcbiAgICAgIGxldCBob3N0X3JlZiA9ICcnO1xuXHQgICAgbGV0IGhhbmRsZXIgPSB7XG5cdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdG9uQ2xpY2s6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcblx0XHQgICAgLy8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0ICAgIGxldCBzY2hlbWEgPSBgaG9zdDp0cmFmZmljYDtcblx0XHQgICAgY29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcImhvc3RcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdH0sXG5cdCAgICB9O1xuXHQgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBkYXRhLmlzX2xvY2FsKSB7XG4gICAgICAgIGxhYmVsID0gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogZGF0YS5sYWJlbCwgaGFuZGxlciB9KTtcblx0ICAgIH1cbiAgICAgIGlmIChkYXRhLmlzX2F2YWlsYWJsZSkge1xuICAgICAgICBob3N0X3JlZiA9IGAgPGEgaHJlZj1cIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pZH1cIiBkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIlwiPjxpIGNsYXNzPVwiZmFzIGZhLWxhcHRvcFwiPjwvaT48L2E+YFxuICAgICAgfVxuICAgICAgXG5cdCAgICByZXR1cm4gYCR7bGFiZWx9JHtob3N0X3JlZn1gO1xuXHR9LFxuICAgIH0sIHtcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnJlY2VpdmVkXCIpLCBuYW1lOiAncmVjZWl2ZWQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICByZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICAvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0fSxcbiAgICB9LCAvLyB7XG5cdCAgICAgIC8vIFx0Y29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBkYXRhOiAncGVyY2VudGFnZScsXG5cdCAgICAgIC8vIFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgICAvLyBcdCAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHQgICAgICAvLyBcdCAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICAgIC8vIFx0fVxuXHQgICAgICAvLyB9LFxuXHQgICAgICB7XG5cdFx0ICBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICByZW5kZXJfaWY6IGZ1bmN0aW9uKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuaXNfaGlzdG9yeV9lbmFibGVkIH0sXG5cdFx0ICByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHQgICAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgY29uc3QgaG9zdCA9IHNlcnZpY2UuaG9zdC5pZDtcbiAgICAgICAgICBjb25zdCBob3N0X3RzX2F2YWlsYWJsZT0gc2VydmljZS5ob3N0LmlzX2xvY2FsO1xuXHRcdCAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHRcdCAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHRcdCAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgICBsZXQgaGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuXHRcdFx0ICAgICAgXG5cdFx0XHQgICAgICBsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdCAgICAgIGxldCBwYXJhbXNfYXJyYXkgPSBbXTtcblx0XHRcdCAgICAgIGZvciAobGV0IGtleSBpbiBzZXJ2aWNlLnRhZ3MpIHtcblx0XHRcdFx0ICBsZXQgdmFsdWUgPSBzZXJ2aWNlLnRhZ3Nba2V5XTtcblx0XHRcdFx0ICBsZXQgcF91cmwgPSBcIlwiO1xuXHRcdFx0XHQgIGlmIChrZXkgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0ICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKGtleSwgdmFsdWUpO1xuXHRcdFx0XHQgIH0gZWxzZSBpZiAoa2V5ID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdCAgICAgIHBfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImlwXCIsIGAke3ZhbHVlfTtlcWApO1xuXHRcdFx0XHQgIH1cblx0XHRcdFx0ICBwYXJhbXNfYXJyYXkucHVzaChwX3VybCk7XG5cdFx0XHQgICAgICB9XG5cdFx0XHQgICAgICBwYXJhbXMgPSBwYXJhbXNfYXJyYXkuam9pbihcIiZcIik7XG5cdFx0XHQgICAgICBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuXHRcdFx0ICAgICAgLy8gY29uc29sZS5sb2coaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0ICAgICAgd2luZG93Lm9wZW4oaGlzdG9yaWNhbF9mbG93c191cmwpO1xuXHRcdFx0ICB9XG5cdFx0ICAgICAgfTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgY29uc3QganVtcF90b19ob3N0ID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtob3N0fSZwYWdlPWhpc3RvcmljYWwmdHNfcXVlcnk9aWZpZDoke2lmaWR9LGhvc3Q6JHtob3N0fSZ0c19zY2hlbWE9aG9zdDpkZXRhaWxzJmVwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhvc3RfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZHJvcGRvd24gPSBbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dXG5cdCAgICAgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBob3N0X3RzX2F2YWlsYWJsZSkge1xuICAgICAgICAgICAgZHJvcGRvd24ucHVzaCh7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhvc3RfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hvc3QgfSlcbiAgICAgICAgICB9XG5cblx0XHQgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhkcm9wZG93bik7XG5cdFx0ICB9LFxuXHQgICAgICB9LF0sXG59O1xuXG5jb25zdCBpbnRlcmZhY2VfdG9wX3RhYmxlcyA9IFt0b3BfYXBwbGljYXRpb24sIHRvcF9jYXRlZ29yaWVzLCB0b3Bfc2VuZGVycywgdG9wX3JlY2VpdmVyc107XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZV90b3BfdGFibGVzO1xuXG4iLCJpbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgaW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL2ludGVyZmFjZV90b3BfdGFibGVzLmpzXCI7XG5cbmxldCB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlID0gaW50ZXJmYWNlVG9wVGFibGVzLmZpbmQoKHQpID0+IHQudmlldyA9PSBcInRvcF9wcm90b2NvbHNcIik7XG5pZiAodG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSAhPSBudWxsKSB7XG4gICAgdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UpO1xuICAgIHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UudGFibGVfdmFsdWUgPSBcImhvc3RcIjtcbn1cblxuY29uc3QgdG9wX2FwcGxpY2F0aW9uID0gdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZTtcblxuY29uc3QgaG9zdF90b3BfdGFibGVzID0gW3RvcF9hcHBsaWNhdGlvbl07XG5cbmV4cG9ydCBkZWZhdWx0IGhvc3RfdG9wX3RhYmxlcztcbiIsImltcG9ydCB7IERhdGFUYWJsZVV0aWxzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlsc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5cbmNvbnN0IGJ5dGVzVG9TaXplRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJ5dGVzLmlkKTtcbmNvbnN0IGJwc0Zvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJVdGlscy50eXBlcy5icHMuaWQpO1xuY29uc3QgaGFuZGxlcklkQWRkTGluayA9IFwicGFnZS1zdGF0cy1hY3Rpb24tbGlua1wiO1xuXG5jb25zdCB0b3Bfc25tcF9pbnRlcmZhY2UgPSB7XG5cdHRhYmxlX3ZhbHVlOiBcInNubXBcIixcblx0dGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0OiB7IGlmaWQ6IHRydWUsIGRldmljZTogdHJ1ZSwgaWZfaW5kZXg6IGZhbHNlIH0sXG5cdHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfaW50ZXJmYWNlcycpLFxuXHR2aWV3OiBcInRvcF9zbm1wX2lmYWNlc1wiLFxuXHRkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogNCxcblx0Y29sdW1uRGVmczogW1xuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuXHRdLFxuXHRmX2dldF9sYWJlbDogKHRzX2dyb3VwKSA9PiB7XG5cdFx0bGV0IHNvdXJjZV9kZWZfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuXHRcdGxldCBzb3VyY2VfbGFiZWw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRpZiAoc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZSAhPSBcImRldmljZVwiKSB7IGNvbnRpbnVlOyB9XG5cdFx0XHRzb3VyY2VfbGFiZWwgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbaV0ubGFiZWw7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGAke2kxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyl9IC0gU05NUCAke2kxOG4oJ3BhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2UnKX0gJHtzb3VyY2VfbGFiZWx9YDtcblx0fSxcblx0ZGVmYXVsdDogdHJ1ZSxcblxuXHRjb2x1bW5zOiBbe1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJpbnRlcmZhY2VfbmFtZVwiKSwgbmFtZTogJ2ludGVyZmFjZScsIGRhdGE6ICdpbnRlcmZhY2UnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0cmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdFx0bGV0IGhhbmRsZXIgPSB7XG5cdFx0XHRcdGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRcdFx0b25DbGljazogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGxldCBzY2hlbWEgPSBgc25tcF9pZjp0cmFmZmljYDtcblx0XHRcdFx0XHRjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwic25tcF9pbnRlcmZhY2VcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHRcdGxldCBsYWJlbF90ZXh0ID0gYCR7ZGF0YS5uYW1lfWA7XG5cdFx0XHRyZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlTGlua0NhbGxiYWNrKHsgdGV4dDogbGFiZWxfdGV4dCwgaGFuZGxlciB9KTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcImludGVyZmFjZV9hbGlhc1wiKSwgbmFtZTogJ2ludGVyZmFjZScsIGRhdGE6ICdpbnRlcmZhY2UnLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0cmVuZGVyOiBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0bGV0IGxhYmVsX3RleHQgPSBgJHtkYXRhLmFsaWFzfWA7XG5cdFx0XHRyZXR1cm4gbGFiZWxfdGV4dDtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnNlbnRcIiksIG5hbWU6ICdzZW50JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAnc2VudCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0XHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnJlY2VpdmVkXCIpLCBuYW1lOiAncmVjZWl2ZWQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdyY3ZkJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHRcdC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0b3RhbCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0XHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcImxhc3RfZG93bmxpbmtfdXNhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciBuby13cmFwJywgZGF0YTogJ2Rvd25saW5rX3VzYWdlX3BlcmNlbnRhZ2UnLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0XHRpZiAocGVyY2VudGFnZSA+IDEwMCkgcGVyY2VudGFnZSA9IDEwMDtcblx0XHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0XHR9XG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwibGFzdF91cGxpbmtfdXNhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciBuby13cmFwJywgZGF0YTogJ3VwbGlua191c2FnZV9wZXJjZW50YWdlJyxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdFx0aWYgKHBlcmNlbnRhZ2UgPiAxMDApIHBlcmNlbnRhZ2UgPSAxMDA7XG5cdFx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdFx0fVxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnRocm91Z2hwdXRcIiksIG5hbWU6ICd0aHJvdWdocHV0JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndGhyb3VnaHB1dCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnBzRm9ybWF0dGVyKGRhdGEpO1xuXHRcdFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdFx0fSxcblx0fSxdLFxufTtcblxuY29uc3Qgc25tcF9pbnRlcmZhY2VfdG9wX3RhYmxlcyA9IFt0b3Bfc25tcF9pbnRlcmZhY2VdO1xuXG5leHBvcnQgZGVmYXVsdCBzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzO1xuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IGJ5dGVzVG9TaXplRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJ5dGVzLmlkKTtcbmNvbnN0IGJwc0Zvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJVdGlscy50eXBlcy5icHMuaWQpO1xuY29uc3QgaGFuZGxlcklkQWRkTGluayA9IFwicGFnZS1zdGF0cy1hY3Rpb24tbGlua1wiO1xuXG5jb25zdCB0b3BfZmxvd19pbnRlcmZhY2UgPSB7XG5cdHRhYmxlX3ZhbHVlOiBcImZsb3dkZXZpY2VcIixcblx0dGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0OiB7IGlmaWQ6IHRydWUsIGRldmljZTogdHJ1ZSwgaWZfaW5kZXg6IGZhbHNlIH0sXG5cdHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfaW50ZXJmYWNlcycpLFxuXHR2aWV3OiBcInRvcF9mbG93ZGV2X2lmYWNlc1wiLFxuXHRkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogNCxcblx0Y29sdW1uRGVmczogW1xuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuXHRcdHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuXHRdLFxuXHRmX2dldF9sYWJlbDogKHRzX2dyb3VwKSA9PiB7XG5cdFx0bGV0IHNvdXJjZV9kZWZfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuXHRcdGxldCBzb3VyY2VfbGFiZWw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRpZiAoc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZSAhPSBcImRldmljZVwiKSB7IGNvbnRpbnVlOyB9XG5cdFx0XHRzb3VyY2VfbGFiZWwgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbaV0ubGFiZWw7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGAke2kxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyl9IC0gRmxvdyBFeHBvcnRlciAke3NvdXJjZV9sYWJlbH1gO1xuXHR9LFxuXHRkZWZhdWx0OiB0cnVlLFxuXG5cdGNvbHVtbnM6IFt7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcImludGVyZmFjZV9uYW1lXCIpLCBuYW1lOiAnaW50ZXJmYWNlJywgZGF0YTogJ2ludGVyZmFjZScsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRsZXQgaGFuZGxlciA9IHtcblx0XHRcdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdFx0XHRvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0bGV0IHNjaGVtYSA9IGBmbG93ZGV2X3BvcnQ6dHJhZmZpY2A7XG5cdFx0XHRcdFx0Y29udGV4dC5hZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdChcImZsb3dfaW50ZXJmYWNlXCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0XHRsZXQgbGFiZWxfdGV4dCA9IGAke2RhdGEubGFiZWx9YDtcblx0XHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBsYWJlbF90ZXh0LCBoYW5kbGVyIH0pO1xuXHRcdH0sXG5cdH0sICB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnNlbnRcIiksIG5hbWU6ICdzZW50JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAnc2VudCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5yZWNlaXZlZFwiKSwgbmFtZTogJ3JlY2VpdmVkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAncmN2ZCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljXCIpLCBuYW1lOiAndHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RvdGFsJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdFx0cmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHRcdH1cblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC50aHJvdWdocHV0XCIpLCBuYW1lOiAndGhyb3VnaHB1dCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3Rocm91Z2hwdXQnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJwc0Zvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LF0sXG59O1xuXG5jb25zdCBmbG93X2Rldl90b3BfdGFibGVzID0gW3RvcF9mbG93X2ludGVyZmFjZV07XG5cbmV4cG9ydCBkZWZhdWx0IGZsb3dfZGV2X3RvcF90YWJsZXM7XG4iLCJpbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzLmpzXCI7XG5cbmNvbnN0IGF2YWlsYWJsZV9pbnRlcmZhY2VzID0gYXN5bmMgKGhvc3QpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIGhvc3Q6IGhvc3RcbiAgICB9O1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCBzbm1wX2RldmljZV9wb3J0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL2F2YWlsYWJsZV9pbnRlcmZhY2VzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBjb25zdCBpbnRlcmZhY2VzX2xpc3QgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3Qoc25tcF9kZXZpY2VfcG9ydF91cmwpO1xuICAgIHJldHVybiBpbnRlcmZhY2VzX2xpc3Q7XG59O1xuXG5jb25zdCBzbm1wX2RldmljZV9wb3J0cyA9IGFzeW5jIChob3N0KSA9PiB7XG4gICAgbGV0IGludGVyZmFjZXMgPSBhd2FpdCBhdmFpbGFibGVfaW50ZXJmYWNlcyhob3N0KTtcbiAgICBsZXQgcmVzdWx0X2ludGVyZmFjZXMgPSBpbnRlcmZhY2VzLm1hcCgoaWZhY2UpID0+IHtcbiAgICAgICAgaWYoaWZhY2UubmFtZSAhPSBudWxsICYmIGlmYWNlLm5hbWUgIT0gXCJcIiAmJiBpZmFjZS5uYW1lICE9IGlmYWNlLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBsYWJlbDogYCR7aWZhY2UubmFtZX0gKCR7aWZhY2UuaWR9KWAsIGlkOiBpZmFjZS5pZCwgbmFtZTogaWZhY2UubmFtZSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGxhYmVsOiBpZmFjZS5pZCwgaWQ6IGlmYWNlLmlkLCAgbmFtZTogaWZhY2UuaWQgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHRfaW50ZXJmYWNlcy5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpXG59O1xuXG5jb25zdCBwcm94eV9zbm1wID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGF2YWlsYWJsZV9pbnRlcmZhY2VzLFxuICAgICAgICBzbm1wX2RldmljZV9wb3J0cyxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBwcm94eV9zbm1wO1xuIiwiaW1wb3J0IGludGVyZmFjZVRvcFRhYmxlcyBmcm9tIFwiLi9pbnRlcmZhY2VfdG9wX3RhYmxlcy5qc1wiO1xuaW1wb3J0IGhvc3RUb3BUYWJsZXMgZnJvbSBcIi4vaG9zdF90b3BfdGFibGVzLmpzXCI7XG5pbXBvcnQgc25tcEludGVyZmFjZVRvcFRhYmxlcyBmcm9tIFwiLi9zbm1wX2ludGVyZmFjZV90b3BfdGFibGVzLmpzXCI7XG5pbXBvcnQgZmxvd0RldmljZVRvcFRhYmxlcyBmcm9tIFwiLi9mbG93X2RldmljZV90b3BfdGFibGVzLmpzXCI7XG5pbXBvcnQgcHJveHlTbm1wIGZyb20gXCIuLi9wcm94aWVzL3NubXAuanNcIjtcblxuY29uc3QgdWlfdHlwZXMgPSB7XG5cdGhpZGU6IFwiaGlkZVwiLFxuXHRzZWxlY3Q6IFwic2VsZWN0XCIsXG5cdGlucHV0OiBcImlucHV0XCIsXG5cdGlucHV0OiBcImlucHV0X2NvbmZpcm1cIixcbn07XG5cbmNvbnN0IHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZSA9IHtcbiAgICBpZmlkOiAocykgPT4ge1xuXHRsZXQgbGFiZWwgPSBzLmlmbmFtZTtcblx0aWYgKHMubmFtZSAhPSBudWxsKSB7XG5cdCAgICBsYWJlbCA9IHMubmFtZTtcblx0fVxuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZTogcy5pZmlkLFxuXHR9O1xuICAgIH0sXG4gICAgcG9vbDogKHApID0+IHtcblx0bGV0IGxhYmVsID0gcC5wb29sX2lkO1xuXHRpZiAocC5uYW1lICE9IG51bGwpIHsgbGFiZWwgPSBwLm5hbWU7IH1cblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWU6IHAucG9vbF9pZCxcblx0fTtcbiAgICB9LFxuICAgIGFtX2hvc3Q6IChhbSkgPT4ge1xuXHRsZXQgbGFiZWwgPSBgJHthbS5sYWJlbH0gJHthbS5tZWFzdXJlbWVudH1gO1xuXHRsZXQgdmFsdWUgPSBgJHthbS5ob3N0fSxtZXRyaWM6JHthbS5tZWFzdXJlbWVudF9rZXl9YDtcblx0cmV0dXJuIHtcblx0ICAgIGxhYmVsLFxuXHQgICAgdmFsdWUsXG5cdH07XG4gICAgfSxcbiAgICBibGFja2xpc3Q6IChiKSA9PiB7XG4gICAgICAgIGxldCBsYWJlbCA9IGAke2IuY29sdW1uX25hbWV9YDtcbiAgICAgICAgbGV0IHZhbHVlID0gbGFiZWw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZGV2aWNlOiAoZGV2aWNlKSA9PiB7XG5cdGxldCBsYWJlbCA9IGAke2RldmljZS5uYW1lfWA7XG5cdGxldCB2YWx1ZSA9IGAke2RldmljZS5pcH1gO1xuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZSxcblx0fTtcbiAgICB9LFxuICAgIGlmX2luZGV4OiAoaW5kZXgpID0+IHtcblx0cmV0dXJuICcnO1xuXHQvKlx0bGV0IGxhYmVsID0gYCR7aW5kZXgubmFtZX1gO1xuXHRcdGxldCB2YWx1ZSA9IGAke2luZGV4LmlwfWA7XG5cdFx0cmV0dXJuIHtcblx0XHRsYWJlbCxcblx0XHR2YWx1ZSxcblx0XHR9OyovXG4gICAgfVxufTtcblxuY29uc3Qgc291cmNlc190eXBlc190YWJsZXMgPSB7XG5cdGludGVyZmFjZTogaW50ZXJmYWNlVG9wVGFibGVzLFxuXHRob3N0OiBob3N0VG9wVGFibGVzLFxuXHRzbm1wX2ludGVyZmFjZTogc25tcEludGVyZmFjZVRvcFRhYmxlcyxcblx0c25tcF9kZXZpY2U6IHNubXBJbnRlcmZhY2VUb3BUYWJsZXMsXG5cdGZsb3dfZGV2aWNlOiBmbG93RGV2aWNlVG9wVGFibGVzLFxuXHRmbG93X2ludGVyZmFjZTogZmxvd0RldmljZVRvcFRhYmxlcyxcbn07XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBbXG5cdHtcblx0ICAgIGlkOiBcImludGVyZmFjZVwiLCAvL3VuaXF1ZSBpZFxuXHQgICAgcmVnZXhfcGFnZV91cmw6IFwibHVhXFwvaWZfc3RhdHNcIiwgLy8gcmVnZXggdG8gbWF0Y2ggdXJsIHBhZ2Vcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0ICAgIHF1ZXJ5OiBcImlmYWNlXCIsXG4gICAgICAgICAgICBmX21hcF90c19vcHRpb25zOiBudWxsLCAvLyBjb252ZXJ0IHJlc3QgcmVzdWx0XG5cdCAgICBzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0cmVnZXhfdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICByZWZyZXNoX29uX3NvdXJjZXNfY2hhbmdlOiBmYWxzZSwgLy8gaWYgdHJ1ZSBzb3VyY2VzIGxpc3QgYXJlIHJlYWxvYWRlZCBldmVyeSB0aW1lIHNvbWUgc2VsZWN0ZWQgc291cmNlcyBjaGFuZ2VkIFxuXHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIiwgLy8gdXJsIHRvIGdldCBzb3VyY2VzIGxpc3Rcblx0XHRzb3VyY2VzX2Z1bmN0aW9uOiBudWxsLCAvLyBjdXN0b20gZnVuY3Rpb24gdGhhdCByZXR1cm4gc291cmNlc19saXN0LCBvdmVyd3JpdGUgc291cmNlc191cmxcblx0XHR2YWx1ZTogXCJpZmlkXCIsIC8vIHVzZWQgaW4gdHNRdWVyeSBwYXJhbWV0ZXIsIHRvIGdldCBpbml0IGFuZCBzZXQgdmFsdWUgaW4gdXJsXG5cdFx0dmFsdWVfdXJsOiBudWxsLCAvLyBvdmVyd3JpdGUgdmFsdWUgdG8gZ2V0IGFuZCBzZXQgdmFsdWUgaW4gdXJsXG5cdFx0dmFsdWVfbWFwX3NvdXJjZXNfcmVzOiBudWxsLFxuXHRcdGRpc2FibGVfdHNrZXk6IG51bGwsXG5cdFx0Zl9nZXRfdmFsdWVfdXJsOiBudWxsLCAvLyBvdmVyd3JpdGUgdmFsdWUgYW5kIHZhbHVlX3VybCB0byBnZXQgc3RhcnQgdmFsdWUgZnJvbSB1cmxcblx0XHRmX3NldF92YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSBhbmQgdmFsdWVfdXJsIHRvIHNldCBzdGFydCB2YWx1ZSBpbiB1cmxcblx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdCAgICB9XSxcblx0fSxcblx0e1xuXHQgICAgaWQ6IFwiYmxhY2tsaXN0XCIsIC8vdW5pcXVlIGlkXG5cdCAgICByZWdleF9wYWdlX3VybDogXCJsdWFcXC9ibGFja2xpc3RzX3N0YXRzXCIsIC8vIHJlZ2V4IHRvIG1hdGNoIHVybCBwYWdlXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5ibGFja2xpc3RcIiksXG5cdCAgICBxdWVyeTogXCJibGFja2xpc3RcIixcbiAgICAgICAgICAgIGZfbWFwX3RzX29wdGlvbnM6ICh0c19vcHRpb25zLCB0c19ncm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0c19vcHRpb25zLnNlcmllcyA9PSBudWxsKSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzX29wdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRzX29wdGlvbnMuc2VyaWVzLmZvckVhY2goKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRzX2dyb3VwLm1ldHJpYy5xdWVyeSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLm5hbWUgPSB0c19ncm91cC5tZXRyaWMubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLm5hbWUgPSBzLm5hbWUucmVwbGFjZUFsbChcIl9cIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcy50eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzX29wdGlvbnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gZGlzcGxheV9mdWxsX25hbWU6IHRydWUsXG5cdCAgICBzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdCAgICB9LF1cblx0fSxcblx0e1xuXHRcdGlkOiBcInZ1bG5lcmFiaWxpdHlfc2NhblwiLCAvL3VuaXF1ZSBpZFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Z1bG5lcmFiaWxpdHlfc2NhblwiLCAvLyByZWdleCB0byBtYXRjaCB1cmwgcGFnZVxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnZ1bG5fc2NhblwiKSxcblx0XHRxdWVyeTogXCJhbV92dWxuX3NjYW5cIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiU3lzdGVtXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9XVxuXHRcdFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiaG9zdFwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL2hvc3RfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmhvc3RcIiksXG5cdFx0dGFibGVfdmFsdWU6IFwiaG9zdFwiLFxuXHRcdHF1ZXJ5OiBcImhvc3RcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmhvc3RcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJob3N0XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcIm1hY1wiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21hY19kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubWFjXCIpLFxuXHRcdHF1ZXJ5OiBcIm1hY1wiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubWFjXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJtYWNBZGRyZXNzXCIsXG5cdFx0XHR2YWx1ZTogXCJtYWNcIixcblx0XHRcdHZhbHVlX3VybDogXCJob3N0XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcIm5ldHdvcmtcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9uZXR3b3JrX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZXR3b3JrXCIpLFxuXHRcdHF1ZXJ5OiBcInN1Ym5ldFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubmV0d29ya1wiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwic3VibmV0XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImFzXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvYXNfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFzXCIpLFxuXHRcdHF1ZXJ5OiBcImFzblwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYXNcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImFzblwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJjb3VudHJ5XCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvY291bnRyeV9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuY291bnRyeVwiKSxcblx0XHRxdWVyeTogXCJjb3VudHJ5XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb3VudHJ5XCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJjb3VudHJ5XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcIm9zXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvb3NfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9zXCIpLFxuXHRcdHF1ZXJ5OiBcIm9zXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vc1wiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwib3NcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwidmxhblwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3ZsYW5fZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnZsYW5cIiksXG5cdFx0cXVlcnk6IFwidmxhblwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudmxhblwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwidmxhblwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJwb29sXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcG9vbF9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9vbFwiKSxcblx0XHRxdWVyeTogXCJob3N0X3Bvb2xcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvb2xcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvaG9zdC9wb29scy5sdWFcIixcblx0XHRcdHZhbHVlOiBcInBvb2xcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInN5c3RlbVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3N5c3RlbV9zdGF0c1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnN5c3RlbVwiKSxcblx0XHRxdWVyeTogXCJzeXN0ZW1cIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiU3lzdGVtXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInByb2ZpbGVcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9maWxlX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wcm9maWxlXCIpLFxuXHRcdHF1ZXJ5OiBcInByb2ZpbGVcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnByb2ZpbGVcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcInByb2ZpbGVcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwicmVkaXNcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tb25pdG9yXFwvcmVkaXNfbW9uaXRvci5sdWFcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5yZWRpc1wiKSxcblx0XHRxdWVyeTogXCJyZWRpc1wiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJSZWRpc1wiLCB2YWx1ZTogLTEgfV0gfSxcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJpbmZsdXhcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tb25pdG9yXFwvaW5mbHV4ZGJfbW9uaXRvci5sdWFcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbmZsdXhcIiksXG5cdFx0cXVlcnk6IFwiaW5mbHV4ZGJcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiSW5mbHV4XCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImFjdGl2ZV9tb25pdG9yaW5nXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbW9uaXRvclxcL2FjdGl2ZV9tb25pdG9yaW5nX21vbml0b3IubHVhXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYWN0aXZlX21vbml0b3JpbmdcIiksXG5cdFx0cXVlcnk6IFwiYW1cIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hY3RpdmVfbW9uaXRvcmluZ1wiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9hbV9ob3N0L2xpc3QubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJob3N0XCIsXG5cdFx0XHRkaXNhYmxlX3Rza2V5OiB0cnVlLFxuXHRcdFx0dmFsdWVfbWFwX3NvdXJjZXNfcmVzOiBcImFtX2hvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHQgICAgaWQ6IFwic25tcF9pbnRlcmZhY2VcIixcblx0ICAgIGlkX2dyb3VwOiBcInNubXBcIixcblx0ICAgIC8vIGRpc2FibGVfc3RhdHM6IHRydWUsXG5cdCAgICByZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvc25tcF9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9pbnRlcmZhY2VcIiksXG5cdCAgICBxdWVyeTogXCJzbm1wX2ludGVyZmFjZVwiLFxuICAgICAgICAgICAgZl9tYXBfdHNfb3B0aW9uczogKHRzX29wdGlvbnMsIHRzX2dyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzX29wdGlvbnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc291cmNlX2RlZl9hcnJheTogW3tcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHQgICAgfSwge1xuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0c291cmNlc191cmw6IFwibHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9saXN0Lmx1YVwiLCAvLyB1cmwgdG8gZ2V0IHNvdXJjZXMgbGlzdFxuXHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdHZhbHVlX3VybDogXCJob3N0XCIsXG4gICAgICAgICAgICAgICAgLy8gcmVmcmVzaF9pMThuOiAnbW9kYWxfdGltZXNlcmllcy5zbm1wX2NvbmZpcm1fZGV2aWNlJyxcblx0XHQvLyB1aV90eXBlOiB1aV90eXBlcy5pbnB1dF9jb25maXJtLFxuICAgICAgICAgICAgICAgIHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0ICAgIH0sIHtcblx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9pbnRlcmZhY2VcIiksXG5cdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgcmVmcmVzaF9vbl9zb3VyY2VzX2NoYW5nZTogdHJ1ZSxcblx0XHRzb3VyY2VzX2Z1bmN0aW9uOiBhc3luYyAoc2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRldmljZV9ob3N0ID0gc2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5WzFdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc25tcF9pbnRlcmZhY2VzID0gYXdhaXQgcHJveHlTbm1wLmF2YWlsYWJsZV9pbnRlcmZhY2VzKGRldmljZV9ob3N0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNubXBfaW50ZXJmYWNlcy5tYXAoKGlmYWNlKSA9PiB7IHJldHVybiB7IGxhYmVsOiBpZmFjZS5uYW1lLCB2YWx1ZTogaWZhY2UuaWQgfTsgfSk7XG4gICAgICAgICAgICAgICAgfSxcblx0XHR2YWx1ZTogXCJpZl9pbmRleFwiLFxuXHRcdHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG5cdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHQgICAgfV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJzbm1wX2RldmljZVwiLFxuXHRcdGlkX2dyb3VwOiBcInNubXBcIixcblx0XHQvLyBkaXNhYmxlX3N0YXRzOiB0cnVlLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zbm1wX2RldmljZV9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc25tcF9kZXZpY2VcIiksXG5cdFx0cXVlcnk6IFwic25tcF9kZXZpY2VcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc19mdW5jdGlvbjogKCkgPT4geyByZXR1cm4gW3sgbGFiZWw6IFwiXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL2xpc3QubHVhXCIsIC8vIHVybCB0byBnZXQgc291cmNlcyBsaXN0XG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJob3N0XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImZsb3dfZGV2aWNlXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL2Zsb3dkZXZpY2VzX3N0YXRzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZmxvd19kZXZpY2VcIiksXG5cdFx0cXVlcnk6IFwiZmxvd2RldlwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Byby9yZXN0L3YyL2dldC9mbG93ZGV2aWNlcy9saXN0Lmx1YVwiLCAvLyB1cmwgdG8gZ2V0IHNvdXJjZXMgbGlzdFxuXHRcdFx0cmVnZXhfdHlwZTogXCJpcFwiLFxuXHRcdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaXBcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiZmxvd19pbnRlcmZhY2VcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmZsb3dfaW50ZXJmYWNlXCIpLFxuXHRcdHF1ZXJ5OiBcImZsb3dkZXZfcG9ydFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJpcFwiLFxuXHRcdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaXBcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvcnRcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInBvcnRcIixcblx0XHRcdHZhbHVlOiBcInBvcnRcIixcblx0XHRcdHZhbHVlX3VybDogXCJzbm1wX3BvcnRfaWR4XCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNmbG93X2RldmljZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zZmxvd2RldmljZXNfc3RhdHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zZmxvd19kZXZpY2VcIiksXG5cdFx0cXVlcnk6IFwic2Zsb3dkZXZcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImlwXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNmbG93X2ludGVyZmFjZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zZmxvd2RldmljZV9pbnRlcmZhY2VfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNmbG93X2ludGVyZmFjZVwiKSxcblx0XHRxdWVyeTogXCJzZmxvd2Rldl9wb3J0XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJpcFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9ydFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvb2JzZXJ2YXRpb25fcG9pbnRzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub2JzZXJ2YXRpb25fcG9pbnRcIiksXG5cdFx0cXVlcnk6IFwib2JzX3BvaW50XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vYnNlcnZhdGlvbl9wb2ludFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwib2JzX3BvaW50XCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwib2JzZXJ2YXRpb25fcG9pbnRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0Ly90b2RvX3Rlc3Rcblx0XHRpZDogXCJwb2RcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb2RfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvZFwiKSxcblx0XHRxdWVyeTogXCJwb2RcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnBvZFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwicG9kXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSwge1xuXHRcdC8vdG9kb190ZXN0XG5cdFx0aWQ6IFwiY29udGFpbmVyXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvY29udGFpbmVyX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdFx0cXVlcnk6IFwiY29udGFpbmVyXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb250YWluZXJcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImNvbnRhaW5lclwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJuZWRnZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL25lZGdlXFwvaWZfc3RhdHMubHVhXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYubmVkZ2VcIiksXG5cdFx0cXVlcnk6IFwibmVkZ2VcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaWZuYW1lXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0Ly8ge1xuXHQvLyBcdGlkOiBcIm5fZWRnZV9pbnRlcmZhY2VcIixcblx0Ly8gXHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9uZWRnZVxcL2lmX3N0YXRzLmx1YVwiLFxuXHQvLyBcdGxhYmVsOiBcIlByb2ZpbGUgbkVkZ2VcIixcblx0Ly8gXHR2YWx1ZTogXCJpZmlkXCIsXG5cdC8vIFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdC8vIFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0X2FuZF9pbnB1dCxcblx0Ly8gXHRxdWVyeTogXCJpZmFjZTpuZWRnZVwiLFxuXHQvLyB9LFxuXTtcblxuY29uc3QgbWV0cmljc0NvbnN0cyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHtcblx0XHR1aV90eXBlcyxcblx0XHRzb3VyY2VzX3VybF9lbF90b19zb3VyY2UsXG5cdFx0c291cmNlc190eXBlcyxcblx0XHRzb3VyY2VzX3R5cGVzX3RhYmxlcyxcblx0fTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc0NvbnN0cztcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBtZXRyaWNzQ29uc3RzIGZyb20gXCIuLi9jb25zdGFudHMvbWV0cmljcy1jb25zdHMuanNcIlxuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi9udG9wLXV0aWxzLmpzXCI7XG5cbmNvbnN0IHNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwgPSAodGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBsZXQgcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzID0gW107XG4gICAgdGltZXNlcmllc19ncm91cHMuZm9yRWFjaCgodHNfZ3JvdXApID0+IHtcbiAgICAgICAgbGV0IHBhcmFtID0gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCk7XG4gICAgICAgIHBhcmFtc190aW1lc2VyaWVzX2dyb3Vwcy5wdXNoKHBhcmFtKTtcbiAgICB9KTtcbiAgICBsZXQgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzLmpvaW4oXCI7O1wiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiLCB1cmxfdGltZXNlcmllc19ncm91cHMpO1xufTtcblxuZnVuY3Rpb24gZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSh0c19ncm91cCkge1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfZ3JvdXAudGltZXNlcmllcy5mb3JFYWNoKCh0cykgPT4ge1xuICAgICAgICB0aW1lc2VyaWVzLnB1c2goYCR7dHMuaWR9PSR7dHMucmF3fToke3RzLnBhc3R9OiR7dHMuYXZnfToke3RzLnBlcmNfOTV9YCk7XG4gICAgfSk7XG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnkgPSB0c19ncm91cC5tZXRyaWMuc2NoZW1hO1xuICAgIGlmICh0c19ncm91cC5tZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuICAgICAgICBtZXRyaWNfc2NoZW1hX3F1ZXJ5ID0gYCR7bWV0cmljX3NjaGVtYV9xdWVyeX0rJHt0c19ncm91cC5tZXRyaWMucXVlcnl9YDtcbiAgICB9XG4gICAgbGV0IHRpbWVzZXJpZXNfcGFyYW0gPSB0aW1lc2VyaWVzLmpvaW4oXCJ8XCIpO1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXkubWFwKChzb3VyY2UpID0+IHNvdXJjZS52YWx1ZSkuam9pbihcIitcIik7XG4gICAgbGV0IHBhcmFtID0gYCR7dHNfZ3JvdXAuc291cmNlX3R5cGUuaWR9OyR7c291cmNlX3ZhbHVlX2FycmF5X3F1ZXJ5fTske21ldHJpY19zY2hlbWFfcXVlcnl9OyR7dGltZXNlcmllc19wYXJhbX1gO1xuICAgIHJldHVybiBwYXJhbTtcbn1cblxuY29uc3QgZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsID0gYXN5bmMgKGh0dHBfcHJlZml4LCB1cmxfdGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICBpZiAodXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiKTtcbiAgICB9XG4gICAgaWYgKHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsIHx8IHVybF90aW1lc2VyaWVzX2dyb3VwcyA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgZ3JvdXBzID0gdXJsX3RpbWVzZXJpZXNfZ3JvdXBzLnNwbGl0KFwiOztcIik7XG4gICAgZ3JvdXBzLm1hcChhc3luYyAoZykgPT4ge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSBhd2FpdCBnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAoZyk7XG4gICAgICAgIHJldHVybiB0c19ncm91cDtcbiAgICB9KTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBQcm9taXNlLmFsbChncm91cHMubWFwKGFzeW5jIChnKSA9PiB7XG4gICAgICAgIGxldCB0c19ncm91cCA9IGF3YWl0IGdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cChnKTtcbiAgICAgICAgcmV0dXJuIHRzX2dyb3VwO1xuICAgIH0pKTtcbiAgICByZXR1cm4gdGltZXNlcmllc19ncm91cHM7XG59O1xuXG5jb25zdCBnZXRfdHNfZ3JvdXAgPSAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKSA9PiB7XG4gICAgbGV0IGlkID0gZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gbWV0cmljLnRpbWVzZXJpZXMpIHtcbiAgICAgICAgbGV0IHRzID0gbWV0cmljLnRpbWVzZXJpZXNba2V5XTtcbiAgICAgICAgdGltZXNlcmllcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICBsYWJlbDogdHMubGFiZWwsXG4gICAgICAgICAgICByYXc6IHRydWUsXG4gICAgICAgICAgICBwYXN0OiBmYWxzZSxcbiAgICAgICAgICAgIGF2ZzogZmFsc2UsXG4gICAgICAgICAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGlkLCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMsIHRpbWVzZXJpZXMsXG4gICAgfTtcbn07XG5cbmNvbnN0IGdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzID0gYXN5bmMgKGh0dHBfcHJlZml4LCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpID0+IHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpO1xuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgZ2V0X21ldHJpY3MoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpO1xuICAgIGxldCBtZXRyaWMgPSBnZXRfZGVmYXVsdF9tZXRyaWMobWV0cmljcywgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KTtcbiAgICBsZXQgdHNfZ3JvdXAgPSBnZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICByZXR1cm4gW3RzX2dyb3VwXTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cCh0c19ncm91cF91cmxfcGFyYW0pIHtcbiAgICBsZXQgZyA9IHRzX2dyb3VwX3VybF9wYXJhbTtcbiAgICBsZXQgaW5mbyA9IGcuc3BsaXQoXCI7XCIpO1xuICAgIGxldCBzb3VyY2VfdHlwZV9pZCA9IGluZm9bMF07XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9xdWVyeSA9IGluZm9bMV07XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV92YWx1ZV9xdWVyeS5zcGxpdChcIitcIik7XG5cbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeSA9IGluZm9bMl07XG4gICAgbGV0IG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkgPSBtZXRyaWNfc2NoZW1hX3F1ZXJ5LnNwbGl0KFwiK1wiKTtcbiAgICBpZiAobWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheS5sZW5ndGggPCAyKSB7XG4gICAgICAgIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkucHVzaChudWxsKTtcbiAgICB9XG5cbiAgICBsZXQgdGltZXNlcmllc191cmwgPSBpbmZvWzNdO1xuXG4gICAgbGV0IHNvdXJjZV90eXBlID0gZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQoc291cmNlX3R5cGVfaWQpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIGxldCBtZXRyaWMgPSBhd2FpdCBnZXRfbWV0cmljX2Zyb21fc2NoZW1hKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5WzBdLCBtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5WzFdKTtcbiAgICBsZXQgdGltZXNlcmllcyA9IGdldF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfdXJsLCBtZXRyaWMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBnZXRfdHNfZ3JvdXBfaWQoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKSxcbiAgICAgICAgc291cmNlX3R5cGUsXG4gICAgICAgIHNvdXJjZV9hcnJheSxcbiAgICAgICAgbWV0cmljLFxuICAgICAgICB0aW1lc2VyaWVzLFxuICAgIH07XG59XG5cbmNvbnN0IGdldF90c19ncm91cF9pZCA9IChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMsIGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHNldF9zb3VyY2VfdHlwZV9pZF9ncm91cCkgPT4ge1xuICAgIGxldCBtZXRyaWNfaWQgPSBcIlwiO1xuICAgIGlmIChtZXRyaWMgIT0gbnVsbCkge1xuICAgICAgICBtZXRyaWNfaWQgPSBtZXRyaWMuc2NoZW1hO1xuICAgICAgICBpZiAobWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1ldHJpY19pZCA9IGAke21ldHJpY19pZH0gLSAke21ldHJpYy5xdWVyeX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlLCBpKSA9PiB7XG4gICAgICAgIGxldCBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZl9hcnJheVtpXS52YWx1ZTtcbiAgICAgICAgaWYgKGVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgIT0gbnVsbCAmJiAhZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFtzb3VyY2VfZGVmX3ZhbHVlXSkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICByZXR1cm4gc291cmNlLnZhbHVlO1xuICAgIH0pLmZpbHRlcigocykgPT4gcyAhPSBudWxsKS5qb2luKFwiX1wiKTtcbiAgICBsZXQgc291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZDtcbiAgICBpZiAoc2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwICYmIHNvdXJjZV90eXBlLmlkX2dyb3VwICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGVfaWQgPSBzb3VyY2VfdHlwZS5pZF9ncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX2lkfSAtICR7c291cmNlX3ZhbHVlX2FycmF5fSAtICR7bWV0cmljX2lkfWA7XG59O1xuXG5mdW5jdGlvbiBnZXRfdGltZXNlcmllcyh0aW1lc2VyaWVzX3VybCwgbWV0cmljKSB7XG4gICAgbGV0IHRzX3VybF9hcnJheSA9IHRpbWVzZXJpZXNfdXJsLnNwbGl0KFwifFwiKTtcbiAgICBsZXQgciA9IC8oLispPSguKyk6KC4rKTooLispOiguKykvO1xuICAgIGxldCB0aW1lc2VyaWVzID0gW107XG4gICAgdHNfdXJsX2FycmF5LmZvckVhY2goKHRzX3VybCkgPT4ge1xuICAgICAgICBsZXQgdmFsdWVzID0gci5leGVjKHRzX3VybCk7XG4gICAgICAgIGlmKHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSB2YWx1ZXNbMV07XG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBtZXRyaWMudGltZXNlcmllc1tpZF0ubGFiZWw7XG4gICAgICAgICAgICBsZXQgcmF3ID0gSlNPTi5wYXJzZSh2YWx1ZXNbMl0pO1xuICAgICAgICAgICAgbGV0IHBhc3QgPSBKU09OLnBhcnNlKHZhbHVlc1szXSk7XG4gICAgICAgICAgICBsZXQgYXZnID0gSlNPTi5wYXJzZSh2YWx1ZXNbNF0pO1xuICAgICAgICAgICAgbGV0IHBlcmNfOTUgPSBKU09OLnBhcnNlKHZhbHVlc1s1XSk7XG4gICAgICAgICAgICB0aW1lc2VyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkLCBsYWJlbCwgcmF3LCBwYXN0LCBhdmcsIHBlcmNfOTUsXG4gICAgICAgICAgICB9KTsgICAgXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGltZXNlcmllcztcbn1cblxuY29uc3QgdWlfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnVpX3R5cGVzO1xuXG4vLyBkaWN0aW9uYXJ5IG9mIGZ1bmN0aW9ucyB0byBjb252ZXJ0IGFuIGVsZW1lbnQgb2Ygc291cmNlX3VybCByZXN0IHJlc3VsdCB0byBhIHNvdXJjZSAoe2xhYmVsLCB2YWx1ZSB9KVxuY29uc3Qgc291cmNlc191cmxfZWxfdG9fc291cmNlID0gbWV0cmljc0NvbnN0cy5zb3VyY2VzX3VybF9lbF90b19zb3VyY2U7XG5cbmNvbnN0IHNvdXJjZXNfdHlwZXMgPSBtZXRyaWNzQ29uc3RzLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IG1ldHJpY3NDb25zdHMuc291cmNlc190eXBlc190YWJsZXM7XG5cbmNvbnN0IGdldF9zb3VyY2VfdHlwZV9mcm9tX2lkID0gKHNvdXJjZV90eXBlX2lkKSA9PiB7XG4gICAgcmV0dXJuIHNvdXJjZXNfdHlwZXMuZmluZCgoc3QpID0+IHN0LmlkID09IHNvdXJjZV90eXBlX2lkKTtcbn07XG5cbmNvbnN0IGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpID0+IHtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5KHNvdXJjZV90eXBlKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICByZXR1cm4gc291cmNlX2FycmF5O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfZGljdCkge1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4gc291cmNlX3ZhbHVlX2RpY3Rbc291cmNlX2RlZi52YWx1ZV0pO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59XG5cbmNvbnN0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSkgPT4ge1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBsZXQgc291cmNlX2FycmF5ID0gW107XG4gICAgbGV0IHNvdXJjZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV92YWx1ZV9hcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc291cmNlX3ZhbHVlID0gc291cmNlX3ZhbHVlX2FycmF5W2ldO1xuICAgICAgICBsZXQgc291cmNlX2RlZiA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV07XG4gICAgICAgIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsIHx8IHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuICAgICAgICAgICAgbGV0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgICAgIHNvdXJjZXMgPSBhd2FpdCBnZXRfc291cmNlcyhodHRwX3ByZWZpeCwgc291cmNlX3R5cGUuaWQsIHNvdXJjZV9kZWYsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzLmZpbmQoKHMpID0+IHMudmFsdWUgPT0gc291cmNlX3ZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3VyY2UgPSB7IGxhYmVsOiBzb3VyY2VfdmFsdWUsIHZhbHVlOiBzb3VyY2VfdmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2VfYXJyYXkucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlX2FycmF5O1xufTtcblxubGV0IGNhY2hlX3NvdXJjZXMgPSB7fTtcblxuZnVuY3Rpb24gZ2V0X3NvdXJjZV9kZWZfa2V5KGlkLCBzb3VyY2VfZGVmLCBzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkpIHtcbiAgICBsZXQga2V5ID0gYCR7aWR9XyR7c291cmNlX2RlZi52YWx1ZX1gO1xuICAgIGlmICghc291cmNlX2RlZi5yZWZyZXNoX29uX3NvdXJjZXNfY2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5LmpvaW4oXCJfXCIpO1xuICAgIGtleSA9IGAke2tleX1fJHt2YWx1ZV9hcnJheX1gO1xuICAgIHJldHVybiBrZXk7XG59XG5cbmNvbnN0IGdldF9zb3VyY2VzID0gYXN5bmMgKGh0dHBfcHJlZml4LCBpZCwgc291cmNlX2RlZiwgc2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5KSA9PiB7XG4gICAgbGV0IGtleSA9IGdldF9zb3VyY2VfZGVmX2tleShpZCwgc291cmNlX2RlZiwgc2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICBpZiAoY2FjaGVfc291cmNlc1trZXldID09IG51bGwpIHtcbiAgICAgICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwpIHtcbiAgICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vJHtzb3VyY2VfZGVmLnNvdXJjZXNfdXJsfWA7XG4gICAgICAgICAgICBjYWNoZV9zb3VyY2VzW2tleV0gPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGNhY2hlX3NvdXJjZXNba2V5XSA9IHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbihzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzb3VyY2VzID0gYXdhaXQgY2FjaGVfc291cmNlc1trZXldO1xuICAgIGlmIChzb3VyY2VfZGVmLnNvdXJjZXNfdXJsKSB7XG4gICAgICAgIGxldCBmX21hcF9zb3VyY2VfZWxlbWVudCA9IHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZVtzb3VyY2VfZGVmLnZhbHVlX21hcF9zb3VyY2VzX3Jlc107XG4gICAgICAgIGlmIChmX21hcF9zb3VyY2VfZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBmX21hcF9zb3VyY2VfZWxlbWVudCA9IHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZVtzb3VyY2VfZGVmLnZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZl9tYXBfc291cmNlX2VsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgYDpFcnJvcjogbWV0cmljcy1tYW5hZ2VyLmpzLCBtaXNzaW5nIHNvdXJjZXNfdXJsX3RvX3NvdXJjZSAke3NvdXJjZV9kZWYudmFsdWV9IGtleWA7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlcyA9IHNvdXJjZXMubWFwKChzKSA9PiBmX21hcF9zb3VyY2VfZWxlbWVudChzKSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSk7XG59O1xuXG5mdW5jdGlvbiBzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwoc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9vYmplY3QpIHtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNvdXJjZV9kZWYpID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZV92YWx1ZSA9IHNvdXJjZV92YWx1ZV9vYmplY3Rbc291cmNlX2RlZi52YWx1ZV07XG4gICAgICAgIGlmIChzb3VyY2VfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHNvdXJjZV9kZWYuZl9zZXRfdmFsdWVfdXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNvdXJjZV9kZWYuZl9zZXRfdmFsdWVfdXJsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlX2RlZi52YWx1ZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKHNvdXJjZV9kZWYudmFsdWVfdXJsLCBzb3VyY2VfdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKHNvdXJjZV9kZWYudmFsdWUsIHNvdXJjZV92YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5ID0gKHNvdXJjZV90eXBlKSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZikgPT4ge1xuICAgICAgICBpZiAoc291cmNlX2RlZi5mX2dldF92YWx1ZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZV9kZWYuZl9nZXRfdmFsdWVfdXJsKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZV9kZWZfdmFsdWUgPSBzb3VyY2VfZGVmLnZhbHVlX3VybDtcbiAgICAgICAgaWYgKHNvdXJjZV9kZWZfdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlX2RlZl92YWx1ZSA9IHNvdXJjZV9kZWYudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZV92YWx1ZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KHNvdXJjZV9kZWZfdmFsdWUpO1xuICAgICAgICByZXR1cm4gc291cmNlX3ZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzb3VyY2VfdmFsdWVfYXJyYXk7XG59O1xuXG5mdW5jdGlvbiBnZXRfbWV0cmljc191cmwoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIGVwb2NoKSB7XG4gICAgbGV0IHBhcmFtcyA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfT0ke3NvdXJjZV9hcnJheVtpXS52YWx1ZX1gO1xuICAgIH0pLmpvaW4oXCImXCIpO1xuICAgIGxldCBlcG9jaF9zdHJpbmcgPSBgYDtcbiAgICBpZiAoZXBvY2ggIT0gbnVsbCkge1xuICAgICAgICBlcG9jaF9zdHJpbmcgPSBgZXBvY2hfZW5kPSR7ZXBvY2guZXBvY2hfZW5kfSZlcG9jaF9iZWdpbj0ke2Vwb2NoLmVwb2NoX2JlZ2lufWBcbiAgICB9XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90eXBlL2NvbnN0cy5sdWE/cXVlcnk9JHtzb3VyY2VfdHlwZS5xdWVyeX0mJHtwYXJhbXN9JiR7ZXBvY2hfc3RyaW5nfWA7XG4gICAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZ2V0X21ldHJpY19rZXkoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSkge1xuICAgIGxldCBzb3VyY2VfYXJyYXlfa2V5ID0gc291cmNlX2FycmF5Lm1hcCgoc291cmNlKSA9PiBzb3VyY2UudmFsdWUpLmpvaW4oXCJfXCIpO1xuICAgIGxldCBrZXkgPSBgJHtzb3VyY2VfdHlwZS5pZH1fJHtzb3VyY2VfYXJyYXlfa2V5fWA7XG4gICAgcmV0dXJuIGtleTtcbn1cblxubGV0IGNhY2hlX21ldHJpY3MgPSB7fTtcbmxldCBsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IG51bGw7XG5jb25zdCBnZXRfbWV0cmljcyA9IGFzeW5jIChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgc3RhdHVzKSA9PiB7XG4gICAgbGV0IGVwb2NoX2JlZ2luID0gc3RhdHVzPy5lcG9jaF9iZWdpbiB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgIGxldCBlcG9jaF9lbmQgPSBzdGF0dXM/LmVwb2NoX2VuZCB8fCBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKTtcbiAgICBsZXQgY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCA9IGAke2Vwb2NoX2JlZ2lufV8ke2Vwb2NoX2VuZH1gO1xuICAgIGlmIChzb3VyY2VfdHlwZSA9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZV90eXBlID0gZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIH1cbiAgICBpZiAoc291cmNlX2FycmF5ID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgfVxuICAgIC8vIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHlwZS9jb25zdHMubHVhP3F1ZXJ5PSR7c291cmNlX3R5cGUudmFsdWV9YDtcbiAgICBsZXQgdXJsID0gZ2V0X21ldHJpY3NfdXJsKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCB7IGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaF9lbmQgfSk7XG4gICAgbGV0IGtleSA9IGdldF9tZXRyaWNfa2V5KHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpO1xuICAgIGlmIChjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsICE9IGxhc3RfbWV0cmljc190aW1lX2ludGVydmFsKSB7XG4gICAgICAgIGNhY2hlX21ldHJpY3Nba2V5XSA9IG51bGw7XG4gICAgICAgIGxhc3RfbWV0cmljc190aW1lX2ludGVydmFsID0gY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbDtcbiAgICB9XG4gICAgaWYgKGNhY2hlX21ldHJpY3Nba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGNhY2hlX21ldHJpY3Nba2V5XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIH1cbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IGNhY2hlX21ldHJpY3Nba2V5XTtcbiAgICBpZiAobWV0cmljcyA9PSBudWxsIHx8IG1ldHJpY3MubGVuZ3RoID09IDApIHsgcmV0dXJuIFt7fV07IH1cbiAgICBpZiAobWV0cmljcy5zb21lKChtKSA9PiBtLmRlZmF1bHRfdmlzaWJsZSA9PSB0cnVlKSA9PSBmYWxzZSkge1xuICAgICAgICBtZXRyaWNzWzBdLmRlZmF1bHRfdmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5jbG9uZShtZXRyaWNzKTtcbn07XG5cbmNvbnN0IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUgPSAoKSA9PiB7XG4gICAgbGV0IHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlc190eXBlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgcmVnRXhwID0gbmV3IFJlZ0V4cChzb3VyY2VzX3R5cGVzW2ldLnJlZ2V4X3BhZ2VfdXJsKTtcbiAgICAgICAgaWYgKHJlZ0V4cC50ZXN0KHBhdGhuYW1lKSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlc190eXBlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBgc291cmNlX3R5cGUgbm90IGZvdW5kIGZvciAke3BhdGhuYW1lfWA7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX2Zyb21fc2NoZW1hID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hLCBtZXRyaWNfcXVlcnksIHN0YXR1cykgPT4ge1xuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgZ2V0X21ldHJpY3MoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIHN0YXR1cyk7XG4gICAgcmV0dXJuIG1ldHJpY3MuZmluZCgobSkgPT4gbS5zY2hlbWEgPT0gbWV0cmljX3NjaGVtYSAmJiBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSk7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnkgPSAodHNfcXVlcnksIHNvdXJjZV90eXBlKSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2RpY3QgPSB7fTtcbiAgICBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5LmZvckVhY2goKHNfZGVmKSA9PiBzb3VyY2VfZGVmX2RpY3Rbc19kZWYudmFsdWVdID0gdHJ1ZSk7XG4gICAgbGV0IHRzX3F1ZXJ5X2FycmF5ID0gdHNfcXVlcnkuc3BsaXQoXCIsXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHNfcXVlcnlfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHRzX3ZhbF9rZXkgPSB0c19xdWVyeV9hcnJheVtpXS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIGlmIChzb3VyY2VfZGVmX2RpY3RbdHNfdmFsX2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzX3F1ZXJ5X2FycmF5W2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfbWV0cmljID0gKG1ldHJpY3MsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBkZWZhdWx0X21ldHJpYztcbiAgICBpZiAobWV0cmljX3RzX3NjaGVtYSAhPSBudWxsKSB7XG4gICAgICAgIGRlZmF1bHRfbWV0cmljID0gbWV0cmljcy5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfdHNfc2NoZW1hICYmIChtZXRyaWNfcXVlcnkgPT0gbnVsbCB8fCBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSkpO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdF9tZXRyaWMgPT0gbnVsbCkge1xuICAgICAgICBkZWZhdWx0X21ldHJpYyA9IG1ldHJpY3MuZmluZCgobSkgPT4gbS5kZWZhdWx0X3Zpc2libGUgPT0gdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0X21ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0X21ldHJpYztcbiAgICB9XG4gICAgcmV0dXJuIG1ldHJpY3NbMF07XG59O1xuXG5jb25zdCBtZXRyaWNzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsLFxuICAgICAgICBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwsXG4gICAgICAgIGdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzLFxuICAgICAgICBnZXRfdHNfZ3JvdXAsXG4gICAgICAgIGdldF90c19ncm91cF9pZCxcblxuICAgICAgICBzb3VyY2VzX3R5cGVzLFxuICAgICAgICBzb3VyY2VzX3R5cGVzX3RhYmxlcyxcbiAgICAgICAgZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQsXG4gICAgICAgIGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUsXG5cbiAgICAgICAgZ2V0X3NvdXJjZXMsXG4gICAgICAgIGdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSxcbiAgICAgICAgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QsXG4gICAgICAgIGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheSxcbiAgICAgICAgZ2V0X2RlZmF1bHRfc291cmNlX3ZhbHVlX2FycmF5LFxuXG4gICAgICAgIGdldF9tZXRyaWNzLFxuICAgICAgICBnZXRfbWV0cmljX2Zyb21fc2NoZW1hLFxuICAgICAgICBnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnksXG4gICAgICAgIGdldF9kZWZhdWx0X21ldHJpYyxcblxuICAgICAgICBzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwsXG5cbiAgICAgICAgdWlfdHlwZXMsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbWV0cmljc01hbmFnZXI7XG4iLCIvKipcblx0XHQoQykgMjAyMyAtIG50b3Aub3JnXG4qL1xuXG4vKiBPdmVycmlkZSBEeWdyYXBoIHBsdWdpbnMgdG8gaGF2ZSBhIGJldHRlciBsZWdlbmQgKi9cbkR5Z3JhcGguUGx1Z2lucy5MZWdlbmQucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChlKSB7XG5cdHZhciB4VmFsdWUgPSBlLnNlbGVjdGVkWDtcblx0dmFyIHBvaW50cyA9IGUuc2VsZWN0ZWRQb2ludHM7XG5cdHZhciByb3cgPSBlLnNlbGVjdGVkUm93O1xuXG5cdHZhciBsZWdlbmRNb2RlID0gZS5keWdyYXBoLmdldE9wdGlvbignbGVnZW5kJyk7XG5cdGlmIChsZWdlbmRNb2RlID09PSAnbmV2ZXInKSB7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHZhciBodG1sID0gRHlncmFwaC5QbHVnaW5zLkxlZ2VuZC5nZW5lcmF0ZUxlZ2VuZEhUTUwoZS5keWdyYXBoLCB4VmFsdWUsIHBvaW50cywgdGhpcy5vbmVfZW1fd2lkdGhfLCByb3cpO1xuXHRpZiAoaHRtbCBpbnN0YW5jZW9mIE5vZGUgJiYgaHRtbC5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5pbm5lckhUTUwgPSAnJztcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLmFwcGVuZENoaWxkKGh0bWwpO1xuXHR9IGVsc2Vcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLmlubmVySFRNTCA9IGh0bWw7XG5cdC8vIG11c3QgYmUgZG9uZSBub3cgc28gb2Zmc2V0V2lkdGggaXNu4oCZdCAw4oCmXG5cdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUuZGlzcGxheSA9ICcnO1xuXG5cdGlmIChsZWdlbmRNb2RlID09PSAnZm9sbG93Jykge1xuXHRcdC8vIGNyZWF0ZSBmbG9hdGluZyBsZWdlbmQgZGl2XG5cdFx0dmFyIGFyZWEgPSBlLmR5Z3JhcGgucGxvdHRlcl8uYXJlYTtcblx0XHR2YXIgbGFiZWxzRGl2V2lkdGggPSB0aGlzLmxlZ2VuZF9kaXZfLm9mZnNldFdpZHRoO1xuXHRcdHZhciB5QXhpc0xhYmVsV2lkdGggPSBlLmR5Z3JhcGguZ2V0T3B0aW9uRm9yQXhpcygnYXhpc0xhYmVsV2lkdGgnLCAneScpO1xuXHRcdC8vIGZpbmQgdGhlIGNsb3Nlc3QgZGF0YSBwb2ludCBieSBjaGVja2luZyB0aGUgY3VycmVudGx5IGhpZ2hsaWdodGVkIHNlcmllcyxcblx0XHQvLyBvciBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIGZpcnN0IGRhdGEgcG9pbnQgYXZhaWxhYmxlXG5cdFx0dmFyIGhpZ2hsaWdodFNlcmllcyA9IGUuZHlncmFwaC5nZXRIaWdobGlnaHRTZXJpZXMoKVxuXHRcdHZhciBwb2ludDtcblx0XHRpZiAoaGlnaGxpZ2h0U2VyaWVzKSB7XG5cdFx0XHRwb2ludCA9IHBvaW50cy5maW5kKHAgPT4gcC5uYW1lID09PSBoaWdobGlnaHRTZXJpZXMpO1xuXHRcdFx0aWYgKCFwb2ludClcblx0XHRcdFx0cG9pbnQgPSBwb2ludHNbMF07XG5cdFx0fSBlbHNlXG5cdFx0XHRwb2ludCA9IHBvaW50c1swXTtcblxuXHRcdC8vIGRldGVybWluZSBmbG9hdGluZyBbbGVmdCwgdG9wXSBjb29yZGluYXRlcyBvZiB0aGUgbGVnZW5kIGRpdlxuXHRcdC8vIHdpdGhpbiB0aGUgcGxvdHRlcl8gYXJlYVxuXHRcdC8vIG9mZnNldCA1MCBweCB0byB0aGUgcmlnaHQgYW5kIGRvd24gZnJvbSB0aGUgZmlyc3Qgc2VsZWN0aW9uIHBvaW50XG5cdFx0Ly8gNTAgcHggaXMgZ3Vlc3MgYmFzZWQgb24gbW91c2UgY3Vyc29yIHNpemVcblx0XHRjb25zdCBmb2xsb3dPZmZzZXRYID0gZS5keWdyYXBoLmdldE51bWVyaWNPcHRpb24oJ2xlZ2VuZEZvbGxvd09mZnNldFgnKTtcblx0XHRjb25zdCB4ID0gKHBvaW50Py54ICE9IG51bGwpID8gcG9pbnQueCA6IDE7XG5cdFx0dmFyIGxlZnRMZWdlbmQgPSB4ICogYXJlYS53ICsgZm9sbG93T2Zmc2V0WDtcblxuXHRcdC8vIGlmIGxlZ2VuZCBmbG9hdHMgdG8gZW5kIG9mIHRoZSBjaGFydCBhcmVhLCBpdCBmbGlwcyB0byB0aGUgb3RoZXJcblx0XHQvLyBzaWRlIG9mIHRoZSBzZWxlY3Rpb24gcG9pbnRcblx0XHRpZiAoKGxlZnRMZWdlbmQgKyBsYWJlbHNEaXZXaWR0aCArIDEpID4gYXJlYS53KSB7XG5cdFx0XHRsZWZ0TGVnZW5kID0gbGVmdExlZ2VuZCAtIDIgKiBmb2xsb3dPZmZzZXRYIC0gbGFiZWxzRGl2V2lkdGggLSAoeUF4aXNMYWJlbFdpZHRoIC0gYXJlYS54KTtcblx0XHR9XG5cblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmxlZnQgPSB5QXhpc0xhYmVsV2lkdGggKyBsZWZ0TGVnZW5kICsgXCJweFwiO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGUpID0+IHtcblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0aW1lc2VyaWVzLW1vdXNlLXRvcC1wb3NpdGlvbicsIGUuY2xpZW50WSArIDUwICsgXCJweFwiKVxuXHRcdH0pO1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUudG9wID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RpbWVzZXJpZXMtbW91c2UtdG9wLXBvc2l0aW9uJyk7XG5cdH0gZWxzZSBpZiAobGVnZW5kTW9kZSA9PT0gJ29ubW91c2VvdmVyJyAmJiB0aGlzLmlzX2dlbmVyYXRlZF9kaXZfKSB7XG5cdFx0Ly8gc3luY2hyb25pc2UgdGhpcyB3aXRoIExlZ2VuZC5wcm90b3R5cGUucHJlZHJhdyBiZWxvd1xuXHRcdHZhciBhcmVhID0gZS5keWdyYXBoLnBsb3R0ZXJfLmFyZWE7XG5cdFx0dmFyIGxhYmVsc0RpdldpZHRoID0gdGhpcy5sZWdlbmRfZGl2Xy5vZmZzZXRXaWR0aDtcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmxlZnQgPSBhcmVhLnggKyBhcmVhLncgLSBsYWJlbHNEaXZXaWR0aCAtIDEgKyBcInB4XCI7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5zdHlsZS50b3AgPSBhcmVhLnkgKyBcInB4XCI7XG5cdH1cbn07IiwiLyoqXG4gICAgKEMpIDIwMjMgLSBudG9wLm9yZ1xuKi9cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgRklMTF9DT0xPUlMgPSBbXG4gICdyZ2IoMTQ0LCAyMzgsIDE0NCknLFxuICAncmdiKDI1LCAxMzUsIDg0KScsXG4gICdyZ2IoMjU1LCAxOTMsIDcpJyxcbiAgJ3JnYigyMjAsIDUzLCA2OSknXG5dO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBkYXJrZW5Db2xvcihjb2xvclN0cikge1xuICBjb25zdCBjb2xvciA9IER5Z3JhcGgudG9SR0JfKGNvbG9yU3RyKTtcbiAgY29sb3IuciA9IE1hdGguZmxvb3IoKDI1NSArIGNvbG9yLnIpIC8gMik7XG4gIGNvbG9yLmcgPSBNYXRoLmZsb29yKCgyNTUgKyBjb2xvci5nKSAvIDIpO1xuICBjb2xvci5iID0gTWF0aC5mbG9vcigoMjU1ICsgY29sb3IuYikgLyAyKTtcbiAgcmV0dXJuICdyZ2IoJyArIGNvbG9yLnIgKyAnLCcgKyBjb2xvci5nICsgJywnICsgY29sb3IuYiArICcsIDAuOSknO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRDb2xvcihjdXJyZW50X3ZhbHVlLCBtYXhfdmFsdWUsIGRlZmF1bHRfY29sb3IpIHtcbiAgaWYoIW1heF92YWx1ZSB8fCAhY3VycmVudF92YWx1ZSkge1xuICAgIHJldHVybiBkYXJrZW5Db2xvcihkZWZhdWx0X2NvbG9yKTtcbiAgfVxuICAvKiBTZWN1cml0eSBjaGVjayAqL1xuICBpZihjdXJyZW50X3ZhbHVlID4gbWF4X3ZhbHVlKSB7XG4gICAgY3VycmVudF92YWx1ZSA9IG1heF92YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGNvbG9yc19tb2R1bGUgPSBtYXhfdmFsdWUgLyBGSUxMX0NPTE9SUy5sZW5ndGg7XG4gIGZvcihsZXQgaSA9IDE7IGkgPCBGSUxMX0NPTE9SUy5sZW5ndGggKyAxOyBpKyspIHtcbiAgICBpZihjdXJyZW50X3ZhbHVlIDw9IGNvbG9yc19tb2R1bGUgKiBpKSB7XG4gICAgICByZXR1cm4gRklMTF9DT0xPUlNbaSAtIDFdO1xuICAgIH1cbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIGEgYmFyIGNoYXJ0IGluc3RlYWQgb2YgYSBsaW5lIGNoYXJ0ICovXG5mdW5jdGlvbiBiYXJDaGFydFBsb3R0ZXIoZSkge1xuICBjb25zdCBjdHggPSBlLmRyYXdpbmdDb250ZXh0O1xuICBjb25zdCBwb2ludHMgPSBlLnBvaW50cztcbiAgY29uc3QgeV9ib3R0b20gPSBlLmR5Z3JhcGgudG9Eb21ZQ29vcmQoMCk7XG4gIGNvbnN0IG1heF92YWx1ZSA9IGUuZHlncmFwaC51c2VyX2F0dHJzXy52YWx1ZVJhbmdlWzFdXG4gIGNvbnN0IGRlZmF1bHRfY29sb3IgPSBlLmNvbG9yO1xuICBcbiAgLyogRmluZCB0aGUgbWluaW11bSBzZXBhcmF0aW9uIGJldHdlZW4geC12YWx1ZXMuXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB0aGUgYmFyIHdpZHRoLlxuICAgKi9cbiAgbGV0IG1pbl9zZXAgPSBJbmZpbml0eTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZXAgPSBwb2ludHNbaV0uY2FudmFzeCAtIHBvaW50c1tpIC0gMV0uY2FudmFzeDtcbiAgICBpZiAoc2VwIDwgbWluX3NlcCkgbWluX3NlcCA9IHNlcDtcbiAgfVxuICAvKiBLZWVwIGp1c3QgYSBsaXR0bGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgYmFycyAqL1xuICBjb25zdCBiYXJfd2lkdGggPSBNYXRoLmZsb29yKDAuOTUgKiBtaW5fc2VwKTtcblxuICAvKiBEbyB0aGUgYWN0dWFsIHBsb3R0aW5nICovXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcCA9IHBvaW50c1tpXTtcbiAgICBjb25zdCBjZW50ZXJfeCA9IHAuY2FudmFzeDtcbiAgICBjb25zdCBjdXJyZW50X3ZhbHVlID0gcC55dmFsO1xuICAgIGN0eC5maWxsU3R5bGUgPSBnZXRDb2xvcihNYXRoLmFicyhjdXJyZW50X3ZhbHVlKSwgTWF0aC5hYnMobWF4X3ZhbHVlKSwgZGVmYXVsdF9jb2xvcik7XG4gICAgY3R4LmZpbGxSZWN0KGNlbnRlcl94IC0gYmFyX3dpZHRoIC8gMiwgcC5jYW52YXN5LFxuICAgICAgYmFyX3dpZHRoLCB5X2JvdHRvbSAtIHAuY2FudmFzeSk7XG4gICAgY3R4LnN0cm9rZVJlY3QoY2VudGVyX3ggLSBiYXJfd2lkdGggLyAyLCBwLmNhbnZhc3ksXG4gICAgICBiYXJfd2lkdGgsIHlfYm90dG9tIC0gcC5jYW52YXN5KTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBkeWdyYXBoUGxvdHRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgYmFyQ2hhcnRQbG90dGVyLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBkeWdyYXBoUGxvdHRlcnM7IiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Db2xvcnMoY29sb3JzKSB7XG4gICAgbGV0IGNvbG9yc1Bvc2l0aW9uRGljdCA9IHt9O1xuICAgIGNvbG9ycy5mb3JFYWNoKChjLCBpKSA9PiB7XG5cdGlmIChjb2xvcnNQb3NpdGlvbkRpY3RbY10gPT0gbnVsbCkge1xuXHQgICAgY29sb3JzUG9zaXRpb25EaWN0W2NdID0gW2ldO1xuXHR9IGVsc2Uge1xuXHQgICAgY29sb3JzUG9zaXRpb25EaWN0W2NdLnB1c2goaSk7XG5cdH1cbiAgICB9KTtcbiAgICAvLyBjbG9uZSBjb2xvcnNcbiAgICBsZXQgbmV3Q29sb3JzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoY29sb3JzKTtcbiAgICBcbiAgICBmb3IgKGxldCBjb2xvciBpbiBjb2xvcnNQb3NpdGlvbkRpY3QpIHtcblx0bGV0IGNvbG9yc1Bvc2l0aW9uID0gY29sb3JzUG9zaXRpb25EaWN0W2NvbG9yXTtcblx0bGV0IG4gPSBjb2xvcnNQb3NpdGlvbi5sZW5ndGg7XG5cdC8vIGNvbG9yc0dlbmVyYXRlZC5sZW5ndGggPT0gY29sb3JzUG9zaXRpb24ubGVuZ3RoIGFsd2F5cyB0cnVlXG5cdGxldCBjb2xvcnNHZW5lcmF0ZWQgPSBnZXRDb2xvcnNGcm9tQ29sb3IoY29sb3IsIG4pO1xuXHRjb2xvcnNHZW5lcmF0ZWQuZm9yRWFjaCgoYywgaSkgPT4ge1xuXHQgICAgbGV0IGNQb3NpdGlvbiA9IGNvbG9yc1Bvc2l0aW9uW2ldO1xuXHQgICAgbmV3Q29sb3JzW2NQb3NpdGlvbl0gPSBjO1xuXHR9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0NvbG9ycztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZ2V0Q29sb3JzRnJvbUNvbG9yKGNvbG9yLCBuKSB7XG4gICAgcmV0dXJuIFsuLi5BcnJheShuKS5rZXlzKCldLm1hcCgoYywgaSkgPT4ge1xuXHRyZXR1cm4gZ2VuZXJhdGVDb2xvcihjb2xvciwgaSArIDEsIG4pO1xuICAgIH0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgY29sb3IgdGhhdCByZXByZXNlbnQgdGhlIGluZGV4LXRoIHRpbnQgb2YgbiBvZiBiYXNlQ29sb3IuXG4gKiBAcGFyYW0ge2Jhc2VDb2xvcn0gc3RyaW5nIGNvbG9yIGluIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge2luZGV4fSBpbnRlZ2VyIGluIGludGVydmFsIFsxLCBuXS5cbiAqIEBwYXJhbSB7bn0gdG90YWwgbnVtYmVyIG9mIGNvbG9ycyB0byBnZW5lcmF0ZVxuKiovXG5mdW5jdGlvbiBnZW5lcmF0ZUNvbG9yKGJhc2VDb2xvciwgaW5kZXgsIG4pIHtcbiAgICBsZXQgc291cmNlQ29sb3IgPSBiYXNlQ29sb3IucmVwbGFjZShcIiNcIiwgXCJcIik7XG5cbiAgICBsZXQgcmVkU291cmNlID0gcGFyc2VJbnQoc291cmNlQ29sb3Iuc3Vic3RyaW5nKDAsIDIpLCAxNik7XG4gICAgbGV0IGdyZWVuU291cmNlID0gcGFyc2VJbnQoc291cmNlQ29sb3Iuc3Vic3RyaW5nKDIsIDQpLCAxNik7XG4gICAgbGV0IGJsdWVTb3VyY2UgPSBwYXJzZUludChzb3VyY2VDb2xvci5zdWJzdHJpbmcoNCwgNiksIDE2KTtcblxuICAgIGxldCBjUmVkID0gZ2V0Q29sb3JJbnRlcnBvbGF0aW9uKHJlZFNvdXJjZSwgaW5kZXgsIG4pO1xuICAgIGxldCBjR3JlZW4gPSBnZXRDb2xvckludGVycG9sYXRpb24oZ3JlZW5Tb3VyY2UsIGluZGV4LCBuKTtcbiAgICBsZXQgY0JsdWUgPSBnZXRDb2xvckludGVycG9sYXRpb24oYmx1ZVNvdXJjZSwgaW5kZXgsIG4pO1xuXG4gICAgcmV0dXJuIHJnYlRvSGV4KGNSZWQsIGNHcmVlbiwgY0JsdWUpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRDb2xvckludGVycG9sYXRpb24oY29sb3JTb3VyY2UsIGksIG4pIHsgICAgXG4gICAgaWYgKG4gPD0gMSkge1xuXHRyZXR1cm4gY29sb3JTb3VyY2U7XG4gICAgfVxuICAgIGxldCBjb2xvclN0YXJ0ID0gTWF0aC50cnVuYyhjb2xvclNvdXJjZSAvIDIpO1xuICAgIGxldCBjb2xvckVuZCA9IE1hdGgudHJ1bmMoY29sb3JTb3VyY2UgKyAoKDI1NSAtIGNvbG9yU291cmNlKSAvIDIpKTtcbiAgICBsZXQgaW50ZXJ2YWwgPSBNYXRoLnRydW5jKChjb2xvckVuZCAtIGNvbG9yU3RhcnQpIC8gbik7XG5cbiAgICByZXR1cm4gY29sb3JTdGFydCArIGkgKiBpbnRlcnZhbDtcbiAgICAvLyByZXR1cm4gY29sb3JTdGFydCArIChuIC0gaSkgKiBpbnRlcnZhbDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gcmdiVG9IZXgociwgZywgYikge1xuICAgIHJldHVybiBcIiNcIiArIGNvbXBvbmVudFRvSGV4KHIpICsgY29tcG9uZW50VG9IZXgoZykgKyBjb21wb25lbnRUb0hleChiKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY29tcG9uZW50VG9IZXgoYykge1xuICAgIGxldCBoZXggPSBjLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gaGV4Lmxlbmd0aCA9PSAxID8gXCIwXCIgKyBoZXggOiBoZXg7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGNvbG9yc0ludGVycG9sYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuXHQgICAgdHJhbnNmb3JtQ29sb3JzLFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9yc0ludGVycG9sYXRpb247XG4iLCIvKipcbiAgICAoQykgMjAyMyAtIG50b3Aub3JnXG4qL1xuXG5pbXBvcnQgY29sb3JzSW50ZXJwb2xhdGlvbiBmcm9tIFwiLi4vY29sb3JzL2NvbG9ycy1pbnRlcnBvbGF0aW9uXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL2Zvcm1hdHRlci11dGlsc1wiO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJldHVybiB0aGUgZGVmYXVsdCBjb25maWcgZm9yIGR5Z3JhcGggY2hhcnRzICovXG5mdW5jdGlvbiBnZXREZWZhdWx0Q29uZmlnKCkge1xuICByZXR1cm4ge1xuICAgIGxhYmVsc1NlcGFyYXRlTGluZXM6IHRydWUsXG4gICAgbGVnZW5kOiBcImZvbGxvd1wiLFxuICAgIGNvbm5lY3RTZXBhcmF0ZWRQb2ludHM6IHRydWUsXG4gICAgaW5jbHVkZVplcm86IHRydWUsXG4gICAgZHJhd1BvaW50czogdHJ1ZSxcbiAgICBoaWdobGlnaHRTZXJpZXNCYWNrZ3JvdW5kQWxwaGE6IDAuNyxcbiAgICBoaWdobGlnaHRTZXJpZXNPcHRzOiB7XG4gICAgICBzdHJva2VXaWR0aDogMixcbiAgICAgIHBvaW50U2l6ZTogMyxcbiAgICAgIGhpZ2hsaWdodENpcmNsZVNpemU6IDYsXG4gICAgfSxcbiAgICBheGlzTGFiZWxGb250U2l6ZTogMTIsXG4gICAgYXhlczoge1xuICAgICAgeDoge1xuICAgICAgICBheGlzTGFiZWxXaWR0aDogOTBcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHB1dCB0aGUgY29ycmVjdCBmb3JtYXR0ZXJzIGluIHRoZSBjb25maWd1cmF0aW9uICovXG5mdW5jdGlvbiBjaGFuZ2VGb3JtYXR0ZXJzKGNvbmZpZywgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5mb3JtYXR0ZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAvKiBNdWx0aXBsZSBmb3JtYXR0ZXJzICovXG4gICAgLyogTk9URTogYXQgbW9zdCAyIGZvcm1hdHRlcnMgY2FuIGJlIHVzZWQgKi9cbiAgICBjb25maWcuYXhlcy55MSA9IGdldEF4aXNDb25maWd1cmF0aW9uKGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihvcHRpb25zLmZvcm1hdHRlcnNbMF0pKTtcbiAgICBjb25maWcuYXhlcy55MiA9IGdldEF4aXNDb25maWd1cmF0aW9uKGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihvcHRpb25zLmZvcm1hdHRlcnNbMV0pKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZvcm1hdHRlcnMubGVuZ3RoID09IDEpIHtcbiAgICAvKiBTaW5nbGUgZm9ybWF0dGVyICovXG4gICAgY29uZmlnLmF4ZXMueSA9IGdldEF4aXNDb25maWd1cmF0aW9uKGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihvcHRpb25zLmZvcm1hdHRlcnNbMF0pKTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJldHVybiB0aGUgY29sb3Igb2YgdGhlIHNlcmllIHdoZW4gaGlnaGxpZ2h0ZWQgKi9cbmZ1bmN0aW9uIGdldEhpZ2hsaWdodENvbG9yKCkge1xuICBjb25zdCBpc19kYXJrX21vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdib2R5IGRhcmsnKS5sZW5ndGggPiAwO1xuICBsZXQgaGlnaGxpZ2h0X2NvbG9yID0gJ3JnYigyNTUsIDI1NSwgMjU1KSc7XG4gIGlmIChpc19kYXJrX21vZGUpIHtcbiAgICBoaWdobGlnaHRfY29sb3IgPSAncmdiKDEzLCAxNywgMjMpJztcbiAgfVxuICByZXR1cm4gaGlnaGxpZ2h0X2NvbG9yO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZm9ybWF0IHRoZSB2YWx1ZSBvbiB0aGUgbGVnZW5kICovXG5mdW5jdGlvbiBnZXRBeGlzQ29uZmlndXJhdGlvbihmb3JtYXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBheGlzTGFiZWxGb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICB2YWx1ZUZvcm1hdHRlcjogZnVuY3Rpb24gKG51bV9vcl9taWxsaXMsIG9wdHMsIHNlcmllc05hbWUsIGR5Z3JhcGgsIHJvdywgY29sKSB7XG4gICAgICBjb25zdCBzZXJpZV9wb2ludCA9IGR5Z3JhcGgucmF3RGF0YV9bcm93XVtjb2xdO1xuICAgICAgbGV0IGRhdGEgPSAnJztcbiAgICAgIGlmICh0eXBlb2YgKHNlcmllX3BvaW50KSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8qIFRoaXMgaXMgdGhlIGNhc2UgZm9yIHRoZSBzZXJpZSB3aXRoIGJvdW5kcyAqL1xuICAgICAgICBzZXJpZV9wb2ludC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIGRhdGEgPSBgJHtkYXRhfSAvICR7Zm9ybWF0dGVyKGVsIHx8IDApfWA7XG4gICAgICAgIH0pXG4gICAgICAgIGRhdGEgPSBkYXRhLnN1YnN0cmluZygzKTsgLyogUmVtb3ZlIHRoZSBmaXJzdCB0aHJlZSBjaGFyYWN0ZXJzICcgLyAnICovXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBjYXNlICovXG4gICAgICAgIGRhdGEgPSBmb3JtYXR0ZXIobnVtX29yX21pbGxpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGRhdGEpO1xuICAgIH0sXG4gICAgYXhpc0xhYmVsV2lkdGg6IDgwLFxuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gbWVyZ2VzIHRoZSBkZWZhdWx0IGNvbmZpZyB3aXRoIHRoZSBvcHRpb25zIHJlcXVlc3RlZCAqL1xuZnVuY3Rpb24gYnVpbGRDaGFydE9wdGlvbnMob3B0aW9ucykge1xuICBjb25zdCBpbnRlcnBvbGF0ZWRfY29sb3JzID0gY29sb3JzSW50ZXJwb2xhdGlvbi50cmFuc2Zvcm1Db2xvcnMob3B0aW9ucy5jb2xvcnMpO1xuICBjb25zdCBoaWdobGlnaHRfY29sb3IgPSBnZXRIaWdobGlnaHRDb2xvcigpO1xuICBjb25zdCBjb25maWcgPSBnZXREZWZhdWx0Q29uZmlnKCk7XG5cbiAgY29uZmlnLmN1c3RvbUJhcnMgPSBvcHRpb25zLmN1c3RvbUJhcnM7XG4gIGNvbmZpZy5sYWJlbHMgPSBvcHRpb25zLmxhYmVscztcbiAgY29uZmlnLnNlcmllcyA9IG9wdGlvbnMucHJvcGVydGllcztcbiAgY29uZmlnLmRhdGEgPSBvcHRpb25zLnNlcmllO1xuICBjb25maWcuc3RhY2tlZEdyYXBoID0gb3B0aW9ucy5zdGFja2VkO1xuICBjb25maWcudmFsdWVSYW5nZSA9IG9wdGlvbnMudmFsdWVfcmFuZ2U7XG4gIGNvbmZpZy5oaWdobGlnaHRTZXJpZXNCYWNrZ3JvdW5kQ29sb3IgPSBoaWdobGlnaHRfY29sb3I7XG4gIGNvbmZpZy5jb2xvcnMgPSBpbnRlcnBvbGF0ZWRfY29sb3JzO1xuICBjb25maWcuZGlzYWJsZVRzTGlzdCA9IG9wdGlvbnMuZGlzYWJsZV90c19saXN0O1xuICBjb25maWcueVJhbmdlUGFkID0gb3B0aW9ucy55UmFuZ2VQYWQgfHwgMTtcblxuICAvKiBDaGFuZ2UgdGhlIHBsb3R0ZXIgKi9cbiAgaWYgKG9wdGlvbnMucGxvdHRlcikge1xuICAgIGNvbmZpZy5wbG90dGVyID0gb3B0aW9ucy5wbG90dGVyO1xuICB9XG5cbiAgY2hhbmdlRm9ybWF0dGVycyhjb25maWcsIG9wdGlvbnMpO1xuXG4gIHJldHVybiBjb25maWc7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGZvcm1hdFNlcmllUHJvcGVydGllcyh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Rhc2gnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbEdyYXBoOiBmYWxzZSxcbiAgICAgICAgY3VzdG9tQmFyczogZmFsc2UsXG4gICAgICAgIHN0cm9rZVBhdHRlcm46IER5Z3JhcGguREFTSEVEX0xJTkVcbiAgICAgIH07XG4gICAgY2FzZSAncG9pbnQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbEdyYXBoOiBmYWxzZSxcbiAgICAgICAgY3VzdG9tQmFyczogZmFsc2UsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAwLjAsXG4gICAgICAgIHBvaW50U2l6ZTogMi4wLFxuICAgICAgfTtcbiAgICBjYXNlICdib3VuZHMnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbEdyYXBoOiBmYWxzZSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEuMCxcbiAgICAgICAgcG9pbnRTaXplOiAxLjUsXG4gICAgICAgIGZpbGxBbHBoYTogMC41XG4gICAgICB9O1xuICAgIGNhc2UgJ2xpbmUnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbEdyYXBoOiBmYWxzZSxcbiAgICAgICAgY3VzdG9tQmFyczogZmFsc2UsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAxLjUsXG4gICAgICAgIHBvaW50U2l6ZTogMS41LFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsbEdyYXBoOiB0cnVlLFxuICAgICAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEuMCxcbiAgICAgICAgcG9pbnRTaXplOiAxLjUsXG4gICAgICAgIGZpbGxBbHBoYTogMC41XG4gICAgICB9O1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGR5Z3JhcGhDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgYnVpbGRDaGFydE9wdGlvbnMsXG4gICAgZm9ybWF0U2VyaWVQcm9wZXJ0aWVzXG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGR5Z3JhcGhDb25maWc7IiwiLyoqXG4gICAgKEMpIDIwMjMgLSBudG9wLm9yZ1xuKi9cblxuaW1wb3J0IGR5Z3JhcGhQbG90dGVycyBmcm9tIFwiLi9keWdyYXBoLXBsb3R0ZXJzLmpzXCI7XG5pbXBvcnQgZHlncmFwaENvbmZpZyBmcm9tIFwiLi9keWdyYXBoLWNvbmZpZy5qc1wiO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGRlZmF1bHRDb2xvcnMgPSBbXG4gIFwiI0M2RDlGRFwiLFxuICBcIiM5MEVFOTBcIixcbiAgXCIjRUU4NDM0XCIsXG4gIFwiI0M5NUQ2M1wiLFxuICBcIiNBRTg3OTlcIixcbiAgXCIjNzE3RUMzXCIsXG4gIFwiIzQ5NkREQlwiLFxuICBcIiM1QTdBREVcIixcbiAgXCIjNjk4NkUxXCIsXG4gIFwiIzc3OTFFNFwiLFxuICBcIiM4MzlCRTZcIixcbiAgXCIjOEVBNEU4XCIsXG5dO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBjb25zdGFudF9zZXJpZV9jb2xvcnMgPSB7XG4gIFwiZGVmYXVsdF9jb2xvclwiOiBcIiNDNkQ5RkRcIixcbiAgXCI5NV9wZXJjXCI6IFwiIzhFQTRFOFwiLFxuICBcImF2Z1wiOiBcIiM4MzlCRTZcIixcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZ2V0U2VyaWVJZChzZXJpZSkge1xuICByZXR1cm4gYCR7c2VyaWUuaWR9YDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZm9ybWF0U2VyaWVDb2xvcnMocGFsZXR0ZV9saXN0KSB7XG4gIGxldCBjb2xvcnNfbGlzdCA9IHBhbGV0dGVfbGlzdDtcbiAgbGV0IGNvdW50MCA9IDAsIGNvdW50MSA9IDA7XG4gIGxldCBjb2xvcnMwID0gZGVmYXVsdENvbG9ycztcbiAgbGV0IGNvbG9yczEgPSBkM3Y3LnNjaGVtZUNhdGVnb3J5MTA7XG4gIGNvbG9yc19saXN0LmZvckVhY2goKHMsIGluZGV4KSA9PiB7XG4gICAgaWYgKHMucGFsZXR0ZSA9PSAwKSB7XG4gICAgICBpZiAocGFsZXR0ZV9saXN0LmZpbmQoKGVsZW1lbnQsIGopID0+IChlbGVtZW50LmNvbG9yID09PSBzLmNvbG9yICYmIGogIT09IGluZGV4KSkpIHtcbiAgICAgICAgcGFsZXR0ZV9saXN0W2luZGV4XSA9IGNvbG9yczBbY291bnQwICUgY29sb3JzMC5sZW5ndGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFsZXR0ZV9saXN0W2luZGV4XSA9IHMuY29sb3I7XG4gICAgICB9XG4gICAgICBjb3VudDAgKz0gMTtcbiAgICB9IGVsc2UgaWYgKHMucGFsZXR0ZSA9PSAxKSB7XG4gICAgICBwYWxldHRlX2xpc3RbaW5kZXhdID0gY29sb3JzMVtjb3VudDEgJSBjb2xvcnMxLmxlbmd0aF07XG4gICAgICBjb3VudDEgKz0gMTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBzZXJpZSBuYW1lICovXG5mdW5jdGlvbiBnZXRTZXJpZU5hbWUobmFtZSwgaWQsIHRzR3JvdXAsIHVzZUZ1bGxOYW1lKSB7XG4gIGlmIChuYW1lID09IG51bGwpIHtcbiAgICBuYW1lID0gaWQ7XG4gIH1cbiAgbGV0IG5hbWVfbW9yZV9zcGFjZSA9IFwiXCI7XG4gIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICBuYW1lX21vcmVfc3BhY2UgPSBgJHtuYW1lfWA7XG4gIH1cbiAgaWYgKHVzZUZ1bGxOYW1lID09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cbiAgbGV0IHNvdXJjZV9pbmRleCA9IDA7XG4gIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgc291cmNlX2RlZiA9IHNvdXJjZV9kZWZfYXJyYXlbaV07XG4gICAgaWYgKHNvdXJjZV9kZWYubWFpbl9zb3VyY2VfZGVmID09IHRydWUpIHtcbiAgICAgIHNvdXJjZV9pbmRleCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBsZXQgc291cmNlID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2luZGV4XTtcbiAgbGV0IHByZWZpeCA9IGAke3NvdXJjZS5sYWJlbH1gO1xuICByZXR1cm4gYCR7cHJlZml4fSAtICR7bmFtZV9tb3JlX3NwYWNlfWA7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEdpdmVuIGFsbCB0aGUgaW5mbyBhYm91dCBhIHRpbWVzZXJpZSwgcmV0dXJuIHRoZSBjb3JyZWN0IG5hbWUgdG8gYmUgZGlzcGxheWVkICovXG5mdW5jdGlvbiBnZXROYW1lKHRzX2luZm8sIG1ldGFkYXRhKSB7XG4gIGxldCBuYW1lID0gKG1ldGFkYXRhLnVzZV9zZXJpZV9uYW1lID09IHRydWUpID8gdHNfaW5mby5uYW1lIDogbWV0YWRhdGEubGFiZWw7XG5cbiAgaWYgKHRzX2luZm8uZXh0X2xhYmVsKSB7XG4gICAgbmFtZSA9IHRzX2luZm8uZXh0X2xhYmVsXG4gIH1cbiAgcmV0dXJuIG5hbWVcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiByZXR1cm4gdGhlIHBsb3R0aW5nIGZ1bmN0aW9uICovXG5mdW5jdGlvbiBnZXRQbG90dGVyKGNoYXJ0X3R5cGUpIHtcbiAgc3dpdGNoIChjaGFydF90eXBlKSB7XG4gICAgY2FzZSAnYmFyJzpcbiAgICAgIHJldHVybiBkeWdyYXBoUGxvdHRlcnMuYmFyQ2hhcnRQbG90dGVyO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGFkZE5ld1NlcmllKHNlcmllX25hbWUsIGNoYXJ0X3R5cGUsIGNvbG9yLCBjb25maWcpIHtcbiAgY29uZmlnLmxhYmVscy5wdXNoKHNlcmllX25hbWUpO1xuICBjb25maWcucHJvcGVydGllc1tzZXJpZV9uYW1lXSA9IHt9XG4gIGNvbmZpZy5wcm9wZXJ0aWVzW3NlcmllX25hbWVdID0gZHlncmFwaENvbmZpZy5mb3JtYXRTZXJpZVByb3BlcnRpZXMoY2hhcnRfdHlwZSk7XG4gIGNvbmZpZy5jb2xvcnMucHVzaChjb2xvcik7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gZ2l2ZW4gYSBzZXJpZSwgZm9ybWF0IHRoZSBhcnJheSBuZWVkZWQgKi9cbmZ1bmN0aW9uIGNvbXBhY3RTZXJpZShjb25maWcsIHRzX2luZm8sIGV4dHJhX3RpbWVzZXJpZXMsIHNlcmllLCBwYXN0X3NlcmllLCBzY2FsYXIsIHN0ZXAsIGVwb2NoX2JlZ2luLCBuYW1lcykge1xuICBjb25zdCBhdmdfdmFsdWUgPSB0c19pbmZvLnN0YXRpc3RpY3NbXCJhdmVyYWdlXCJdO1xuICBjb25zdCBwZXJjX3ZhbHVlID0gdHNfaW5mby5zdGF0aXN0aWNzW1wiOTV0aF9wZXJjZW50aWxlXCJdO1xuICBsZXQgdGltZSA9IGVwb2NoX2JlZ2luO1xuXG4gIC8qIE5vdyBmb3JtYXQgdGhlIHRpbWVzZXJpZSAqL1xuICBmb3IgKGxldCBwb2ludCA9IDA7IHBvaW50IDwgc2VyaWUubGVuZ3RoOyBwb2ludCsrKSB7XG4gICAgY29uc3Qgc2VyaWVfcG9pbnQgPSBzZXJpZVtwb2ludF07XG4gICAgLyogSWYgdGhlIHBvaW50IGlzIGluc2VydGVkIGZvciB0aGUgZmlyc3QgdGltZSwgYWRkIHRoZSB0aW1lIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgKi9cbiAgICBpZiAoIWNvbmZpZy5zZXJpZVt0aW1lXSkge1xuICAgICAgY29uZmlnLnNlcmllW3RpbWVdID0gW3sgdmFsdWU6IG5ldyBEYXRlKHRpbWUgKiAxMDAwKSwgbmFtZTogXCJUaW1lXCIgfV07XG4gICAgfVxuICAgIC8qIEFkZCB0aGUgcG9pbnQgdG8gdGhlIGFycmF5IG9yIE5hTiBpZiBpdCdzIG51bGwgKi9cbiAgICAoc2VyaWVfcG9pbnQgIT09IG51bGwpID9cbiAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IHNlcmllX3BvaW50ICogc2NhbGFyLCBuYW1lOiBuYW1lcy5zZXJpZV9uYW1lIH0pIDpcbiAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IE5hTiwgbmFtZTogbmFtZXMuc2VyaWVfbmFtZSB9KTtcblxuICAgIC8qIEFkZCBleHRyYSBzZXJpZXMsIGF2ZywgOTV0aCBhbmQgcGFzdCB0aW1lc2VyaWVzICovXG4gICAgaWYgKGV4dHJhX3RpbWVzZXJpZXM/LmF2ZyA9PSB0cnVlKSB7XG4gICAgICBjb25maWcuc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBhdmdfdmFsdWUgKiBzY2FsYXIsIG5hbWU6IG5hbWVzLmF2Z19uYW1lIH0pO1xuICAgIH1cbiAgICBpZiAoZXh0cmFfdGltZXNlcmllcz8ucGVyY185NSA9PSB0cnVlKSB7XG4gICAgICBjb25maWcuc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBwZXJjX3ZhbHVlICogc2NhbGFyLCBuYW1lOiBuYW1lcy5wZXJjX25hbWUgfSk7XG4gICAgfVxuICAgIGlmIChleHRyYV90aW1lc2VyaWVzPy5wYXN0ID09IHRydWUpIHtcbiAgICAgIGNvbnN0IHBhc3RfdmFsdWUgPSAocGFzdF9zZXJpZSkgPyBwYXN0X3NlcmllW3BvaW50XSA6IG51bGw7XG4gICAgICAocGFzdF92YWx1ZSkgP1xuICAgICAgICBjb25maWcuc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBwYXN0X3ZhbHVlICogc2NhbGFyLCBuYW1lOiBuYW1lcy5wYXN0X25hbWUgfSkgOlxuICAgICAgICBjb25maWcuc2VyaWVbdGltZV0ucHVzaCh7IHZhbHVlOiBOYU4sIG5hbWU6IG5hbWVzLnBhc3RfbGFiZWwgfSk7XG4gICAgfVxuXG4gICAgLyogSW5jcmVhc2UgdGhlIHRpbWUgdXNpbmcgdGhlIHN0ZXAgKi9cbiAgICB0aW1lID0gdGltZSArIHN0ZXA7XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBmb3JtYXQgdGhlIEJvdW5kIHR5cGUgc2VyaWUgaW4gdGhlIGNvcnJlY3QgZm9ybWF0ICovXG5mdW5jdGlvbiBzcGxpdEJvdW5kU2VyaWUoc2VyaWVzLCB0aW1lc2VyaWVfaW5mbykge1xuICBsZXQgc2VyaWUgPSBbXTtcbiAgbGV0IGNvbG9yID0ge307XG4gIGxldCBmb3JtYXR0ZXIgPSBudWxsO1xuICBsZXQgc2VyaWVfbmFtZSA9IG51bGw7XG4gIGxldCBwcm9wZXJ0aWVzID0ge307XG5cbiAgLyogQSBib3VuZCB0aW1lc2VyaWUgc2hvdWxkIGJlIGNvbXBvc2VkIGJ5IDMgdGltZXNlcmllczpcbiAgICogICAgLSBtZXRyaWMgKG1haW4pXG4gICAqICAgIC0gbG93ZXJfYm91bmQgKHRoZSBsb3dlciBib3VuZClcbiAgICogICAgLSB1cHBlcl9ib3VuZCAodGhlIHVwcGVyIGJvdW5kKVxuICAgKi9cbiAgc2VyaWVzLmZvckVhY2goKHRzX2luZm8sIGopID0+IHtcbiAgICBjb25zdCB0c19pZCA9IGdldFNlcmllSWQodHNfaW5mbyk7XG4gICAgY29uc3Qgc2VyaWUgPSB0c19pbmZvLmRhdGEgfHwgW107IC8qIFNhZmV0eSBjaGVjayAqL1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGltZXNlcmllX2luZm8ubWV0cmljLnRpbWVzZXJpZXNbdHNfaWRdO1xuICAgIGNvbnN0IHNjYWxhciA9IChtZXRhZGF0YT8uaW52ZXJ0X2RpcmVjdGlvbiA9PT0gdHJ1ZSkgPyAxIDogLTE7XG5cbiAgICAvKiBKdXN0IGFkZCB0aGUgbmFtZSwgcHJvcGVydGllcywgY29sb3JzLCBlY2MsIGZvciB0aGUgXG4gICAgICogXCJtYWluXCIgdGltZXNlcmllIGFuZCBub3QgZm9yIHRoZSBib3VuZHMgb25lcyBcbiAgICAgKi9cbiAgICBpZiAobWV0YWRhdGEudHlwZSA9PSBcIm1ldHJpY1wiKSB7XG4gICAgICBzZXJpZV9uYW1lID0gZ2V0U2VyaWVOYW1lKG1ldGFkYXRhLmxhYmVsLCB0c19pZCwgdGltZXNlcmllX2luZm8sIHRydWUpO1xuICAgICAgcHJvcGVydGllcyA9IGR5Z3JhcGhDb25maWcuZm9ybWF0U2VyaWVQcm9wZXJ0aWVzKCdib3VuZHMnKTtcbiAgICAgIGNvbG9yID0geyBjb2xvcjogbWV0YWRhdGEuY29sb3IsIHBhbGV0dGU6IDAgfTtcbiAgICAgIGZvcm1hdHRlciA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5tZWFzdXJlX3VuaXQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgcG9pbnQgPSAwOyBwb2ludCA8IHNlcmllLmxlbmd0aDsgcG9pbnQrKykge1xuICAgICAgbGV0IHNlcmllX3BvaW50ID0gKHNlcmllX3BvaW50ID09PSBudWxsKSA/IE5hTiA6IHNlcmllW3BvaW50XTtcbiAgICAgIGlmIChzZXJpZVtwb2ludF0gPT0gbnVsbCkge1xuICAgICAgICBzZXJpZVtwb2ludF0gPSBbMCwgTmFOLCAwXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1ldGFkYXRhLnR5cGUgPT0gXCJsb3dlcl9ib3VuZFwiKSB7XG4gICAgICAgIHNlcmllW3BvaW50XVswXSA9IHNlcmllX3BvaW50ICogc2NhbGFyO1xuICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS50eXBlID09IFwibWV0cmljXCIpIHtcbiAgICAgICAgc2VyaWVbcG9pbnRdWzFdID0gc2VyaWVfcG9pbnQgKiBzY2FsYXI7XG4gICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLnR5cGUgPT0gXCJ1cHBlcl9ib3VuZFwiKSB7XG4gICAgICAgIHNlcmllW3BvaW50XVsyXSA9IHNlcmllX3BvaW50ICogc2NhbGFyO1xuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4geyBzZXJpZTogc2VyaWUsIGNvbG9yOiBjb2xvciwgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsIHNlcmllX25hbWU6IHNlcmllX25hbWUsIHByb3BlcnRpZXM6IHByb3BlcnRpZXMgfTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiwgZ2l2ZW4gYSBzZXJpZSBmb3JtYXQgdGhlIGJvdW5kcyBzZXJpZSAqL1xuZnVuY3Rpb24gZm9ybWF0Qm91bmRzU2VyaWUodGltZXNlcmllX2luZm8sIHRpbWVzZXJpZV9vcHRpb25zLCBjb25maWcpIHtcbiAgLyogQnkgZGVmYXVsdCB0aGUgY2hhcnQgdHlwZSBpcyBsaW5lICovXG4gIGNvbnN0IGNoYXJ0X3R5cGUgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMuY2hhcnRfdHlwZSB8fCBcImZpbGxlZFwiO1xuICBjb25zdCBzZXJpZXMgPSB0aW1lc2VyaWVfb3B0aW9ucy5zZXJpZXMgfHwgW107XG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gdGltZXNlcmllX29wdGlvbnMubWV0YWRhdGEuZXBvY2hfYmVnaW47XG4gIGNvbnN0IHN0ZXAgPSB0aW1lc2VyaWVfb3B0aW9ucy5tZXRhZGF0YS5lcG9jaF9zdGVwO1xuICBjb25zdCB7IHNlcmllLCBjb2xvciwgZm9ybWF0dGVyLCBzZXJpZV9uYW1lLCBwcm9wZXJ0aWVzIH0gPSBzcGxpdEJvdW5kU2VyaWUoc2VyaWVzLCB0aW1lc2VyaWVfaW5mbyk7XG4gIGxldCB0aW1lID0gZXBvY2hfYmVnaW47XG4gIC8qIFRPRE86IGFkZCBhdmcsIHBhc3QsIGVjYy4gdGltZXNlcmllcyB0byB0aGUgYm91bmRzIG9uZSAqL1xuXG4gIC8qIFVwZGF0ZSB0aGUgY29uZmlnICovXG4gIGNvbnN0IGZvcm1hdHRlZF9uYW1lID0gYCR7c2VyaWVfbmFtZX0gJHtpMThuKCdsb3dlcl92YWx1ZV91cHBlcicpfWBcbiAgY29uc3QgZm9ybWF0dGVyX2ZvdW5kID0gY29uZmlnLmZvcm1hdHRlcnMuZmluZChlbCA9PiBlbCA9PSBmb3JtYXR0ZXIpO1xuICBpZiAoIWZvcm1hdHRlcl9mb3VuZClcbiAgICBjb25maWcuZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG4gIGNvbmZpZy5wbG90dGVyID0gZ2V0UGxvdHRlcihjaGFydF90eXBlKTtcbiAgY29uZmlnLmN1c3RvbUJhcnMgPSB0cnVlO1xuICBjb25maWcuY29sb3JzLnB1c2goY29sb3IpO1xuICBjb25maWcubGFiZWxzLnB1c2goZm9ybWF0dGVkX25hbWUpO1xuICBjb25maWcucHJvcGVydGllc1tmb3JtYXR0ZWRfbmFtZV0gPSBwcm9wZXJ0aWVzO1xuXG4gIC8qIFVwZGF0ZSB0aGUgc2VyaWUgKi9cbiAgT2JqZWN0LmtleXMoc2VyaWUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmICghY29uZmlnLnNlcmllW3RpbWVdKSB7XG4gICAgICBjb25maWcuc2VyaWVbdGltZV0gPSBbXG4gICAgICAgIHsgdmFsdWU6IG5ldyBEYXRlKHRpbWUgKiAxMDAwKSwgbmFtZTogXCJUaW1lXCIgfSxcbiAgICAgICAgeyB2YWx1ZTogc2VyaWVba2V5XSwgbmFtZTogZm9ybWF0dGVkX25hbWUgfVxuICAgICAgXTtcbiAgICB9XG5cbiAgICB0aW1lID0gdGltZSArIHN0ZXA7XG4gIH0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRTdGFuZGFyZFNlcmllKHRpbWVzZXJpZV9pbmZvLCB0aW1lc2VyaWVfb3B0aW9ucywgY29uZmlnLCB0c0NvbXBhcmUpIHtcbiAgLyogSXRlcmF0ZSBhbGwgdGhlIHRpbWVzZXJpZXMgY3VycmVudGx5IGNvbnRhaW5lZCBpbnNpZGUgdGhlIHNpbmdsZSB0czpcbiAgICogZS5nLiBpbiB0aGUgVHJhZmZpYyB0aW1lc2VyaWVzIHdlIGhhdmUgdGhlIEJ5dGVzIHNlbnQgYW5kIEJ5dGVzIHJjdmRcbiAgICovXG4gIGNvbnN0IHNlcmllcyA9IHRpbWVzZXJpZV9vcHRpb25zLnNlcmllcyB8fCBbXTtcbiAgY29uc3QgY2hhcnRfdHlwZSA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5jaGFydF90eXBlIHx8IFwiZmlsbGVkXCI7XG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gdGltZXNlcmllX29wdGlvbnMubWV0YWRhdGEuZXBvY2hfYmVnaW47XG4gIGNvbnN0IHN0ZXAgPSB0aW1lc2VyaWVfb3B0aW9ucy5tZXRhZGF0YS5lcG9jaF9zdGVwO1xuICBjb25zdCBmb3JtYXR0ZXIgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMubWVhc3VyZV91bml0O1xuICBjb25zdCBtYXhfdmFsdWUgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMubWF4X3ZhbHVlIHx8IG51bGw7XG4gIGNvbnN0IG1pbl92YWx1ZSA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5taW5fdmFsdWUgfHwgbnVsbDtcbiAgY29uc3QgcGFzdF9zZXJpZSA9IHRpbWVzZXJpZV9vcHRpb25zLmFkZGl0aW9uYWxfc2VyaWVzO1xuXG4gIGNvbmZpZy52YWx1ZV9yYW5nZSA9IFttaW5fdmFsdWUsIG1heF92YWx1ZV07XG4gIGNvbmZpZy5wbG90dGVyID0gZ2V0UGxvdHRlcihjaGFydF90eXBlKTtcbiAgaWYgKCFjb25maWcuc3RhY2tlZCkge1xuICAgIGNvbmZpZy5zdGFja2VkID0gdGltZXNlcmllX2luZm8ubWV0cmljLmRyYXdfc3RhY2tlZCB8fCBmYWxzZTtcbiAgfVxuXG4gIHNlcmllcy5mb3JFYWNoKCh0c19pbmZvLCBqKSA9PiB7XG4gICAgY29uc3Qgc2VyaWUgPSB0c19pbmZvLmRhdGEgfHwgW107IC8qIFNhZmV0eSBjaGVjayAqL1xuICAgIGNvbnN0IGV4dHJhX3RpbWVzZXJpZXMgPSB0aW1lc2VyaWVfaW5mby50aW1lc2VyaWVzWzBdOyAvKiBlLmcuIHRoZSBBdmVyYWdlICovXG4gICAgY29uc3QgdHNfaWQgPSBnZXRTZXJpZUlkKHRzX2luZm8pO1xuICAgIGNvbnN0IG1ldGFkYXRhID0gdGltZXNlcmllX2luZm8ubWV0cmljLnRpbWVzZXJpZXNbdHNfaWRdO1xuICAgIGNvbnN0IHNjYWxhciA9IChtZXRhZGF0YS5pbnZlcnRfZGlyZWN0aW9uID09PSB0cnVlKSA/IC0xIDogMTtcbiAgICBjb25zdCB0aW1lc2VyaWVfbmFtZSA9IGdldE5hbWUodHNfaW5mbywgbWV0YWRhdGEpXG4gICAgY29uc3Qgc2VyaWVfbmFtZSA9IGdldFNlcmllTmFtZSh0aW1lc2VyaWVfbmFtZSwgdHNfaWQsIHRpbWVzZXJpZV9pbmZvLCBjb25maWcudXNlX2Z1bGxfbmFtZSlcbiAgICBjb25zdCBhdmdfbmFtZSA9IGdldFNlcmllTmFtZSh0aW1lc2VyaWVfbmFtZSArIFwiIEF2Z1wiLCB0c19pZCwgdGltZXNlcmllX2luZm8sIGNvbmZpZy51c2VfZnVsbF9uYW1lKVxuICAgIGNvbnN0IHBlcmNfbmFtZSA9IGdldFNlcmllTmFtZSh0aW1lc2VyaWVfbmFtZSArIFwiIDk1dGggUGVyY1wiLCB0c19pZCwgdGltZXNlcmllX2luZm8sIGNvbmZpZy51c2VfZnVsbF9uYW1lKTtcbiAgICBjb25zdCBwYXN0X25hbWUgPSBnZXRTZXJpZU5hbWUodGltZXNlcmllX25hbWUgKyBcIiBcIiArIHRzQ29tcGFyZSArIFwiIEFnb1wiLCB0c19pZCwgdGltZXNlcmllX2luZm8sIGNvbmZpZy51c2VfZnVsbF9uYW1lKTtcbiAgICBjb25zdCBwYXN0X3ZhbHVlID0gKHBhc3Rfc2VyaWUpID8gcGFzdF9zZXJpZVtgJHt0c0NvbXBhcmV9X2Fnb2BdPy5zZXJpZXNbal0/LmRhdGEgOiBudWxsO1xuICAgIC8qIEFuIG9wdGlvbiB1c2VkIHRvIG5vdCBkaXNwbGF5IGEgdGltZXNlcmllICovXG4gICAgaWYgKG1ldGFkYXRhLmhpZGRlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qIFNlYXJjaCBmb3IgdGhlIGZvcm1hdHRlciBpbiB0aGUgYXJyYXksIGlmIG5vdCBmb3VuZCwgYWRkIGl0LiAqL1xuICAgIGNvbnN0IGZvcm1hdHRlcl9mb3VuZCA9IGNvbmZpZy5mb3JtYXR0ZXJzLmZpbmQoZWwgPT4gZWwgPT0gZm9ybWF0dGVyKTtcbiAgICBpZiAoIWZvcm1hdHRlcl9mb3VuZClcbiAgICAgIGNvbmZpZy5mb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcblxuICAgIC8qIEFkZCB0aGUgc2VyaWUgKi9cbiAgICBhZGROZXdTZXJpZShzZXJpZV9uYW1lLCBjaGFydF90eXBlLCB7IGNvbG9yOiBtZXRhZGF0YS5jb2xvciwgcGFsZXR0ZTogMCB9LCBjb25maWcpXG5cbiAgICAvKiBBZGRpbmcgdGhlIGV4dHJhIHRpbWVzZXJpZXMsIDMwbSBhZ28sIGF2ZyBhbmQgOTV0aCAqL1xuICAgIGlmIChleHRyYV90aW1lc2VyaWVzPy5hdmcgPT0gdHJ1ZSkge1xuICAgICAgYWRkTmV3U2VyaWUoYXZnX25hbWUsIFwicG9pbnRcIiwgeyBjb2xvcjogY29uc3RhbnRfc2VyaWVfY29sb3JzW1wiYXZnXCJdLCBwYWxldHRlOiAxIH0sIGNvbmZpZylcbiAgICB9XG4gICAgaWYgKGV4dHJhX3RpbWVzZXJpZXM/LnBlcmNfOTUgPT0gdHJ1ZSkge1xuICAgICAgYWRkTmV3U2VyaWUocGVyY19uYW1lLCBcInBvaW50XCIsIHsgY29sb3I6IGNvbnN0YW50X3NlcmllX2NvbG9yc1tcInBlcmNfOTVcIl0sIHBhbGV0dGU6IDEgfSwgY29uZmlnKVxuICAgIH1cbiAgICBpZiAoZXh0cmFfdGltZXNlcmllcz8ucGFzdCA9PSB0cnVlKSB7XG4gICAgICBhZGROZXdTZXJpZShwYXN0X25hbWUsIFwiZGFzaFwiLCB7IGNvbG9yOiBjb25zdGFudF9zZXJpZV9jb2xvcnNbXCJwYXN0XCJdLCBwYWxldHRlOiAxIH0sIGNvbmZpZylcbiAgICB9XG5cbiAgICAvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4gICAgY29tcGFjdFNlcmllKGNvbmZpZywgdHNfaW5mbywgZXh0cmFfdGltZXNlcmllcywgc2VyaWUsIHBhc3RfdmFsdWUsIHNjYWxhciwgc3RlcCwgZXBvY2hfYmVnaW4sIHtcbiAgICAgIHNlcmllX25hbWU6IHNlcmllX25hbWUsXG4gICAgICBhdmdfbmFtZTogYXZnX25hbWUsXG4gICAgICBwZXJjX25hbWU6IHBlcmNfbmFtZSxcbiAgICAgIHBhc3RfbmFtZTogcGFzdF9uYW1lXG4gICAgfSk7XG4gIH0pXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gZmluYWxseSBmb3JtYXQgdGhlIHRpbWVzZXJpZXMgYW5kIGNvbXBhY3QgaXQgdG9naGV0ZXIgKi9cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxTZXJpZShjb25maWcpIHtcbiAgY29uc3QgZnVsbF9zZXJpZSA9IFtdO1xuICBjb25zdCBzZXJpZV9rZXlzID0gT2JqZWN0LmtleXMoY29uZmlnLnNlcmllKTtcblxuICAvKiBJdGVyYXRlIHRoZSBzZXJpZSBhbmQgZm9yIGVhY2ggbGFiZWwsIGdldCB0aGUgdmFsdWUgYW5kIHNldCB0byBudWxsIGluIGNhc2UgaXQgZG9lcyBub3QgZXhpc3RzICovXG4gIHNlcmllX2tleXMuZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4ge1xuICAgIGZ1bGxfc2VyaWVbaW5kZXhdID0gW107XG4gICAgY29uZmlnLmxhYmVscy5mb3JFYWNoKChsYWJlbCkgPT4ge1xuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbmZpZy5zZXJpZVtrZXldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChjb25maWcuc2VyaWVba2V5XVtqXS5uYW1lID09IGxhYmVsKSB7XG4gICAgICAgICAgZnVsbF9zZXJpZVtpbmRleF0ucHVzaChjb25maWcuc2VyaWVba2V5XVtqXS52YWx1ZSk7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIFB1c2ggbnVsbCBpZiBubyB2YWx1ZSBpcyBmb3VuZCAqL1xuICAgICAgaWYgKGZvdW5kID09IGZhbHNlKSB7XG4gICAgICAgIGZ1bGxfc2VyaWVbaW5kZXhdLnB1c2gobnVsbCk7XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG4gIGNvbmZpZy5zZXJpZSA9IGZ1bGxfc2VyaWU7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGZvcm1hdFNpbmdsZVNlcmllKHRpbWVzZXJpZV9pbmZvLCB0aW1lc2VyaWVfb3B0aW9ucywgdHNDb21wYXJlLCBjb25maWcpIHtcbiAgaWYgKHRpbWVzZXJpZV9pbmZvLnNvdXJjZV90eXBlLmZfbWFwX3RzX29wdGlvbnMgIT0gbnVsbCkge1xuICAgIGNvbnN0IGZfbWFwX3RzX29wdGlvbnMgPSB0aW1lc2VyaWVfaW5mby5zb3VyY2VfdHlwZS5mX21hcF90c19vcHRpb25zO1xuICAgIHRpbWVzZXJpZV9vcHRpb25zID0gZl9tYXBfdHNfb3B0aW9ucyh0aW1lc2VyaWVfb3B0aW9ucywgdGltZXNlcmllX2luZm8pO1xuICB9XG5cbiAgLyogRm9ybWF0IHRoZSBkYXRhICovXG5cbiAgLyogdGhlIGRhdGEgaW4gRHlncmFwaHMgc2hvdWxkIGJlIGZvcm1hdHRlZCBhcyBmb2xsb3c6XG4gICAqIHsgWyB0aW1lXzEsIHNlcmllMV8xLCBzZXJpZTJfMSBdLCBbIHRpbWVfMiwgc2VyaWUxXzIsIHNlcmllMl8yIF0gfSBcbiAgICovXG4gIGNvbnN0IGJvdW5kcyA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5ib3VuZHMgfHwgZmFsc2U7XG5cbiAgLyogVGhlIHNlcmllIGNhbiBwb3NzaWJseSBoYXZlIG11bHRpcGxlIHRpbWVzZXJpZXMsIGxpa2UgZm9yIHRoZSBcbiAgICogYnl0ZXMsIHdlIGhhdmUgc2VudCBhbmQgcmN2ZCwgc28gY29tcGFjdCB0aGVtIFxuICAgKi9cbiAgaWYgKGJvdW5kcyA9PSB0cnVlKSB7XG4gICAgZm9ybWF0Qm91bmRzU2VyaWUodGltZXNlcmllX2luZm8sIHRpbWVzZXJpZV9vcHRpb25zLCBjb25maWcpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdFN0YW5kYXJkU2VyaWUodGltZXNlcmllX2luZm8sIHRpbWVzZXJpZV9vcHRpb25zLCBjb25maWcsIHRzQ29tcGFyZSk7XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZm9ybWF0U2ltcGxlU2VyaWUoZGF0YSwgc2VyaWVfbmFtZSwgY2hhcnRfdHlwZSwgZm9ybWF0dGVycywgdmFsdWVfcmFuZ2UpIHtcbiAgbGV0IGNvdW50ZXIgPSAxO1xuICBjb25zdCB0bXBfc2VyaWUgPSBbXTtcbiAgZGF0YS5zZXJpZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgIHRtcF9zZXJpZS5wdXNoKFtjb3VudGVyLCB2YWx1ZV0pO1xuICAgIGNvdW50ZXIrKztcbiAgfSk7XG5cbiAgLyogVG8gbm90IGhhdmUgYW4gZXJyb3IsIGp1c3QgYWRkIGEgbnVsbCB2YWx1ZSAqL1xuICBpZih0bXBfc2VyaWUubGVuZ3RoID09IDApIHtcbiAgICB0bXBfc2VyaWUucHVzaChbMSwgbnVsbF0pO1xuICB9XG5cbiAgY29uc3QgY29uZmlnID0ge1xuICAgIHNlcmllOiB0bXBfc2VyaWUsXG4gICAgZm9ybWF0dGVyczogZm9ybWF0dGVycyxcbiAgICBsYWJlbHM6IFtcImluZGV4XCJdLFxuICAgIGNvbG9yczogW10sXG4gICAgcHJvcGVydGllczogZHlncmFwaENvbmZpZy5mb3JtYXRTZXJpZVByb3BlcnRpZXMoY2hhcnRfdHlwZSksXG4gICAgc3RhY2tlZDogZmFsc2UsXG4gICAgY3VzdG9tQmFyczogZmFsc2UsXG4gICAgdXNlX2Z1bGxfbmFtZTogZmFsc2UsXG4gICAgcGxvdHRlcjogZ2V0UGxvdHRlcihjaGFydF90eXBlKSxcbiAgICB2YWx1ZV9yYW5nZTogdmFsdWVfcmFuZ2UsXG4gICAgZGlzYWJsZV90c19saXN0OiB0cnVlLFxuICB9O1xuXG4gIGFkZE5ld1NlcmllKHNlcmllX25hbWUsIGNoYXJ0X3R5cGUsIHsgY29sb3I6IGNvbnN0YW50X3NlcmllX2NvbG9yc1tcImRlZmF1bHRfY29sb3JcIl0sIHBhbGV0dGU6IDAgfSwgY29uZmlnKVxuICBmb3JtYXRTZXJpZUNvbG9ycyhjb25maWcuY29sb3JzKTtcbiAgcmV0dXJuIGR5Z3JhcGhDb25maWcuYnVpbGRDaGFydE9wdGlvbnMoY29uZmlnKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZm9ybWF0U2VyaWUodHNPcHRpb25zQXJyYXksIHRzR3JvdXBzQXJyYXksIHRzQ29tcGFyZSwgdXNlRnVsbE5hbWUpIHtcbiAgY29uc3QgY29uZmlnID0ge1xuICAgIHNlcmllOiBbXSxcbiAgICBmb3JtYXR0ZXJzOiBbXSxcbiAgICBsYWJlbHM6IFtcIlRpbWVcIl0sXG4gICAgY29sb3JzOiBbXSxcbiAgICBwcm9wZXJ0aWVzOiBbXSxcbiAgICBzdGFja2VkOiBmYWxzZSxcbiAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICB1c2VfZnVsbF9uYW1lOiAodXNlRnVsbE5hbWUgIT0gbnVsbCkgPyB1c2VGdWxsTmFtZSA6IGZhbHNlXG4gIH07XG5cbiAgLyogR28gdGhyb3VnaHQgZWFjaCBzZXJpZSAqL1xuICB0c09wdGlvbnNBcnJheS5mb3JFYWNoKCh0c09wdGlvbnMsIGkpID0+IHtcbiAgICBmb3JtYXRTaW5nbGVTZXJpZSh0c0dyb3Vwc0FycmF5W2ldLCB0c09wdGlvbnMsIHRzQ29tcGFyZSwgY29uZmlnKTtcbiAgfSk7XG5cbiAgLyogTmVlZCB0byBmaW5hbGx5IGZvcm1hdCB0aGUgc2VyaWUgYXMgcmVxdWVzdGVkIGJ5IER5Z3JhcGgsIHdpdGhcbiAgICAgTlVMTCBhcyB2YWx1ZSBpbiBjYXNlIHRoZSBzZXJpZSBoYXMgTk9UIFRIQVQgUE9JTlQgKGUuZy4gd2l0aCBhIDUgbWludXRlcyBmcmVxdWVuY3ksIHRoZSB1c2VyXG4gICAgICBpcyBjb25mcm9udGluZyBhIGNoYXJ0IHdpdGggMSBtaW51dGUgZnJlcXVlbmN5LCB0aGVyZSBhcmUgNCBtaW51dGVzIHdpdGggbm8gZXhpc3RpbmcgcG9pbnRzKVxuICAgKi9cbiAgZm9ybWF0RnVsbFNlcmllKGNvbmZpZyk7XG4gIGZvcm1hdFNlcmllQ29sb3JzKGNvbmZpZy5jb2xvcnMpO1xuICByZXR1cm4gZHlncmFwaENvbmZpZy5idWlsZENoYXJ0T3B0aW9ucyhjb25maWcpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBkeWdyYXBoRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGZvcm1hdFNlcmllLFxuICAgIGZvcm1hdFNpbXBsZVNlcmllLFxuICAgIGdldFNlcmllSWQsXG4gICAgZ2V0U2VyaWVOYW1lLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBkeWdyYXBoRm9ybWF0OyIsIi8qKlxuXHRcdChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5cbmltcG9ydCAnLi9ncmFwaC9keWdyYXBoLWV4dGVuc2lvbi5qcyc7XG5pbXBvcnQgZHlncmFwaEZvcm1hdCBmcm9tIFwiLi9ncmFwaC9keWdyYXBoLWZvcm1hdC5qc1wiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNlcmllSWQoc2VyaWUpIHtcblx0cmV0dXJuIGR5Z3JhcGhGb3JtYXQuZ2V0U2VyaWVJZChzZXJpZSk7XG59XG5cbmZ1bmN0aW9uIGdldFNlcmllTmFtZShuYW1lLCBpZCwgdHNHcm91cCwgdXNlRnVsbE5hbWUpIHtcblx0cmV0dXJuIGR5Z3JhcGhGb3JtYXQuZ2V0U2VyaWVOYW1lKG5hbWUsIGlkLCB0c0dyb3VwLCB1c2VGdWxsTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldFlheGlzSWQobWV0cmljKSB7XG5cdHJldHVybiBgJHttZXRyaWMubWVhc3VyZV91bml0fV8ke21ldHJpYy5zY2FsZX1gO1xufVxuXG5jb25zdCBncm91cHNPcHRpb25zTW9kZXNFbnVtID0ge1xuXHQnMV9jaGFydF94X21ldHJpYyc6IHsgdmFsdWU6IFwiMV9jaGFydF94X21ldHJpY1wiLCBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5sYXlvdXRfMV9wZXJfMScpIH0sXG5cdCcxX2NoYXJ0X3hfeWF4aXMnOiB7IHZhbHVlOiBcIjFfY2hhcnRfeF95YXhpc1wiLCBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5sYXlvdXRfMV9wZXJfeScpIH0sXG59XG5cbmZ1bmN0aW9uIGdldEdyb3VwT3B0aW9uTW9kZShncm91cF9pZCkge1xuXHRyZXR1cm4gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtncm91cF9pZF0gfHwgbnVsbDtcbn07XG5cbi8qIFRoaXMgZnVuY3Rpb24gaXMgZ29pbmcgdG8gdHJhbnNsYXRlIHRoZSByZXNwb25zZSBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgZm9ybWF0dGVkIGRhdGEgbmVlZGVkIGZyb20gdGhlIGNoYXJ0IGxpYnJhcnkgKi9cbmZ1bmN0aW9uIHRzQXJyYXlUb09wdGlvbnNBcnJheSh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSkge1xuXHQvKiBPbmUgY2hhcnQgcGVyIG1ldHJpYyByZXF1ZXN0ZWQgKi9cblx0aWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfbWV0cmljXCJdLnZhbHVlKSB7XG5cdFx0cmV0dXJuIHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSk7XG5cdH1cblx0bGV0IHNwbGl0dGVkVHNBcnJheSA9IHNwbGl0VHNBcnJheVN0YWNrZWQodHNPcHRpb25zQXJyYXksIHRzR3JvdXBzQXJyYXkpO1xuXHRsZXQgRHlncmFwaE9wdGlvbnNTdGFja2VkID0gdHNBcnJheVRvT3B0aW9uc0FycmF5UmF3KHNwbGl0dGVkVHNBcnJheS5zdGFja2VkLnRzT3B0aW9uc0FycmF5LCBzcGxpdHRlZFRzQXJyYXkuc3RhY2tlZC50c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKTtcblx0bGV0IER5Z3JhcGhPcHRpb25zTm90U3RhY2tlZCA9IHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyhzcGxpdHRlZFRzQXJyYXkubm90X3N0YWNrZWQudHNPcHRpb25zQXJyYXksIHNwbGl0dGVkVHNBcnJheS5ub3Rfc3RhY2tlZC50c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKTtcblx0Ly9jb25zb2xlLmxvZyhbLi4uRHlncmFwaE9wdGlvbnNTdGFja2VkLCAuLi5EeWdyYXBoT3B0aW9uc05vdFN0YWNrZWRdKVxuXHRyZXR1cm4gWy4uLkR5Z3JhcGhPcHRpb25zU3RhY2tlZCwgLi4uRHlncmFwaE9wdGlvbnNOb3RTdGFja2VkXTtcbn1cblxuZnVuY3Rpb24gc3BsaXRUc0FycmF5U3RhY2tlZCh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSkge1xuXHRsZXQgdHNPcHRpb25zQXJyYXlTdGFja2VkID0gW107XG5cdGxldCB0c0dyb3Vwc0FycmF5U3RhY2tlZCA9IFtdO1xuXHRsZXQgdHNPcHRpb25zQXJyYXlOb3RTdGFja2VkID0gW107XG5cdGxldCB0c0dyb3Vwc0FycmF5Tm90U3RhY2tlZCA9IFtdO1xuXHR0c0dyb3Vwc0FycmF5LmZvckVhY2goKHRzR3JvdXAsIGkpID0+IHtcblx0XHRpZiAodHNHcm91cC5tZXRyaWMuZHJhd19zdGFja2VkID09IHRydWUpIHtcblx0XHRcdHRzT3B0aW9uc0FycmF5U3RhY2tlZC5wdXNoKHRzT3B0aW9uc0FycmF5W2ldKTtcblx0XHRcdHRzR3JvdXBzQXJyYXlTdGFja2VkLnB1c2godHNHcm91cCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRzT3B0aW9uc0FycmF5Tm90U3RhY2tlZC5wdXNoKHRzT3B0aW9uc0FycmF5W2ldKTtcblx0XHRcdHRzR3JvdXBzQXJyYXlOb3RTdGFja2VkLnB1c2godHNHcm91cCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHtcblx0XHRzdGFja2VkOiB7XG5cdFx0XHR0c09wdGlvbnNBcnJheTogdHNPcHRpb25zQXJyYXlTdGFja2VkLFxuXHRcdFx0dHNHcm91cHNBcnJheTogdHNHcm91cHNBcnJheVN0YWNrZWQsXG5cdFx0fSxcblx0XHRub3Rfc3RhY2tlZDoge1xuXHRcdFx0dHNPcHRpb25zQXJyYXk6IHRzT3B0aW9uc0FycmF5Tm90U3RhY2tlZCxcblx0XHRcdHRzR3JvdXBzQXJyYXk6IHRzR3JvdXBzQXJyYXlOb3RTdGFja2VkLFxuXHRcdH0sXG5cdH07XG59XG5cbmZ1bmN0aW9uIHRzQXJyYXlUb09wdGlvbnNBcnJheVJhdyh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgZ3JvdXBzT3B0aW9uc01vZGUsIHRzQ29tcGFyZSkge1xuXHRsZXQgdXNlRnVsbE5hbWUgPSBmYWxzZTtcblx0aWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfeWF4aXNcIl0udmFsdWUpIHtcblx0XHRsZXQgdHNEaWN0ID0ge307XG5cdFx0dHNHcm91cHNBcnJheS5mb3JFYWNoKCh0c0dyb3VwLCBpKSA9PiB7XG5cdFx0XHRsZXQgeWF4aXNJZCA9IGdldFlheGlzSWQodHNHcm91cC5tZXRyaWMpO1xuXHRcdFx0bGV0IHRzRWwgPSB7IHRzR3JvdXAsIHRzT3B0aW9uczogdHNPcHRpb25zQXJyYXlbaV0gfTtcblx0XHRcdGlmICh0c0RpY3RbeWF4aXNJZF0gPT0gbnVsbCkge1xuXHRcdFx0XHR0c0RpY3RbeWF4aXNJZF0gPSBbdHNFbF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0c0RpY3RbeWF4aXNJZF0ucHVzaCh0c0VsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR1c2VGdWxsTmFtZSA9IHRzR3JvdXBzQXJyYXkubGVuZ3RoID4gMSB8fCAodHNHcm91cHNBcnJheS5sZW5ndGggPiAwXG5cdFx0XHQmJiB0c0dyb3Vwc0FycmF5WzBdLnNvdXJjZV90eXBlLmRpc3BsYXlfZnVsbF9uYW1lID09PSB0cnVlKTtcblx0XHRsZXQgRHlncmFwaE9wdGlvbnNBcnJheSA9IFtdO1xuXHRcdGZvciAobGV0IGtleSBpbiB0c0RpY3QpIHtcblx0XHRcdGxldCB0c0FycmF5ID0gdHNEaWN0W2tleV07XG5cdFx0XHRsZXQgdHNPcHRpb25zQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c09wdGlvbnMpO1xuXHRcdFx0bGV0IHRzR3JvdXBzQXJyYXkyID0gdHNBcnJheS5tYXAoKHRzKSA9PiB0cy50c0dyb3VwKTtcblx0XHRcdGxldCBEeWdyYXBoT3B0aW9ucyA9IHRzQXJyYXlUb09wdGlvbnModHNPcHRpb25zQXJyYXkyLCB0c0dyb3Vwc0FycmF5MiwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSk7XG5cdFx0XHREeWdyYXBoT3B0aW9uc0FycmF5LnB1c2goRHlncmFwaE9wdGlvbnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gRHlncmFwaE9wdGlvbnNBcnJheTtcblx0fSBlbHNlIGlmIChncm91cHNPcHRpb25zTW9kZS52YWx1ZSA9PSBncm91cHNPcHRpb25zTW9kZXNFbnVtW1wiMV9jaGFydF94X21ldHJpY1wiXS52YWx1ZSkge1xuXHRcdHVzZUZ1bGxOYW1lID0gdHNPcHRpb25zQXJyYXkubGVuZ3RoID4gMSB8fCAodHNHcm91cHNBcnJheS5sZW5ndGggPiAwXG5cdFx0XHQmJiB0c0dyb3Vwc0FycmF5WzBdLnNvdXJjZV90eXBlLmRpc3BsYXlfZnVsbF9uYW1lID09PSB0cnVlKTtcblx0XHRsZXQgb3B0aW9uc0FycmF5ID0gW107XG5cdFx0dHNPcHRpb25zQXJyYXkuZm9yRWFjaCgodHNPcHRpb25zLCBpKSA9PiB7XG5cdFx0XHRsZXQgb3B0aW9ucyA9IHRzQXJyYXlUb09wdGlvbnMoW3RzT3B0aW9uc10sIFt0c0dyb3Vwc0FycmF5W2ldXSwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSk7XG5cdFx0XHRvcHRpb25zQXJyYXkucHVzaChvcHRpb25zKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gb3B0aW9uc0FycmF5O1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGZvcm1hdCBhIHNpbXBsZSB0aW1lc2VyaWVzIGdpdmVuIGFuIGFycmF5IFxuICovXG5mdW5jdGlvbiBmb3JtYXRTaW1wbGVTZXJpZShkYXRhLCBzZXJpZV9uYW1lLCBjaGFydF90eXBlLCBmb3JtYXR0ZXJzLCB2YWx1ZV9yYW5nZSkge1xuXHRyZXR1cm4gZHlncmFwaEZvcm1hdC5mb3JtYXRTaW1wbGVTZXJpZShkYXRhLCBzZXJpZV9uYW1lLCBjaGFydF90eXBlLCBmb3JtYXR0ZXJzLCB2YWx1ZV9yYW5nZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEdpdmVuIGFuIGFycmF5IG9mIHRpbWVzZXJpZXMsIGl0IGNvbXBhY3RzIHRoZW0gaW50byBhIHNpbmdsZSBhcnJheSBcbiAqIGFuZCByZXR1cm4gdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB0aW1lc2VyaWUgd2l0aCB0aGUgZGF0YSBcbiAqL1xuZnVuY3Rpb24gdHNBcnJheVRvT3B0aW9ucyh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSkge1xuXHRyZXR1cm4gZHlncmFwaEZvcm1hdC5mb3JtYXRTZXJpZSh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGdldFRzUXVlcnkodHNHcm91cCwgbm90X21ldHJpY19xdWVyeSwgZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCkge1xuXHRsZXQgdHNRdWVyeSA9IHRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcblx0XHRpZiAoZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCAhPSBudWxsICYmICFlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0W3NvdXJjZV9kZWYudmFsdWVdKSB7IHJldHVybiBudWxsOyB9XG5cdFx0bGV0IHNvdXJjZV92YWx1ZSA9IHRzR3JvdXAuc291cmNlX2FycmF5W2ldLnZhbHVlO1xuXHRcdHJldHVybiBgJHtzb3VyY2VfZGVmLnZhbHVlfToke3NvdXJjZV92YWx1ZX1gO1xuXHR9KS5maWx0ZXIoKHMpID0+IHMgIT0gbnVsbCkuam9pbihcIixcIik7XG5cblx0aWYgKCFub3RfbWV0cmljX3F1ZXJ5ICYmIHRzR3JvdXAubWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcblx0XHR0c1F1ZXJ5ID0gYCR7dHNRdWVyeX0sJHt0c0dyb3VwLm1ldHJpYy5xdWVyeX1gXG5cdH1cblx0cmV0dXJuIHRzUXVlcnk7XG59XG5cbmZ1bmN0aW9uIGdldE1haW5Tb3VyY2VEZWZJbmRleCh0c0dyb3VwKSB7XG5cdGxldCBzb3VyY2VfZGVmX2FycmF5ID0gdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRsZXQgc291cmNlX2RlZiA9IHNvdXJjZV9kZWZfYXJyYXlbaV07XG5cdFx0aWYgKHNvdXJjZV9kZWYubWFpbl9zb3VyY2VfZGVmID09IHRydWUpIHsgcmV0dXJuIGk7IH1cblx0fVxuXHRyZXR1cm4gMDtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRUc0NoYXJ0c09wdGlvbnMoaHR0cFByZWZpeCwgZXBvY2hTdGF0dXMsIHRzQ29tcGFyZSwgdGltZXNlcmllc0dyb3VwcywgaXNQcm8pIHtcblx0bGV0IHBhcmFtc0Vwb2NoT2JqID0geyBlcG9jaF9iZWdpbjogZXBvY2hTdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hTdGF0dXMuZXBvY2hfZW5kIH07XG5cblx0bGV0IHRzQ2hhcnRzT3B0aW9ucztcblx0aWYgKCFpc1Bybykge1xuXHRcdGxldCB0c0RhdGFVcmwgPSBgJHtodHRwUHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90cy5sdWFgO1xuXHRcdGxldCBwYXJhbXNVcmxSZXF1ZXN0ID0gYHRzX2NvbXBhcmU9JHt0c0NvbXBhcmV9JnZlcnNpb249NCZ6b29tPSR7dHNDb21wYXJlfSZsaW1pdD0xODBgO1xuXHRcdGxldCB0c0dyb3VwID0gdGltZXNlcmllc0dyb3Vwc1swXTtcblx0XHRsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdFx0bGV0IHRzUXVlcnkgPSBnZXRUc1F1ZXJ5KHRzR3JvdXApO1xuXHRcdGxldCBwT2JqID0ge1xuXHRcdFx0Li4ucGFyYW1zRXBvY2hPYmosXG5cdFx0XHR0c19xdWVyeTogdHNRdWVyeSxcblx0XHRcdHRzX3NjaGVtYTogYCR7dHNHcm91cC5tZXRyaWMuc2NoZW1hfWAsXG5cdFx0fTtcblx0XHRpZiAoIXRzR3JvdXAuc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVttYWluX3NvdXJjZV9pbmRleF0uZGlzYWJsZV90c2tleSkge1xuXHRcdFx0cE9iai50c2tleSA9IHRzR3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XS52YWx1ZTtcblx0XHR9XG5cdFx0bGV0IHBVcmxSZXF1ZXN0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHBPYmosIHBhcmFtc1VybFJlcXVlc3QpO1xuXHRcdGxldCB1cmwgPSBgJHt0c0RhdGFVcmx9PyR7cFVybFJlcXVlc3R9YDtcblx0XHRsZXQgdHNDaGFydE9wdGlvbiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXHRcdHRzQ2hhcnRzT3B0aW9ucyA9IFt0c0NoYXJ0T3B0aW9uXTtcblx0fSBlbHNlIHtcblx0XHRsZXQgcGFyYW1zQ2hhcnQgPSB7XG5cdFx0XHR6b29tOiB0c0NvbXBhcmUsXG5cdFx0XHRsaW1pdDogMTgwLFxuXHRcdFx0dmVyc2lvbjogNCxcblx0XHRcdHRzX2NvbXBhcmU6IHRzQ29tcGFyZSxcblx0XHR9O1xuXG5cdFx0bGV0IHRzUmVxdWVzdHMgPSB0aW1lc2VyaWVzR3JvdXBzLm1hcCgodHNHcm91cCkgPT4ge1xuXHRcdFx0bGV0IG1haW5fc291cmNlX2luZGV4ID0gZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzR3JvdXApO1xuXHRcdFx0bGV0IHRzUXVlcnkgPSBnZXRUc1F1ZXJ5KHRzR3JvdXApO1xuXHRcdFx0bGV0IHBPYmogPSB7XG5cdFx0XHRcdHRzX3F1ZXJ5OiB0c1F1ZXJ5LFxuXHRcdFx0XHR0c19zY2hlbWE6IGAke3RzR3JvdXAubWV0cmljLnNjaGVtYX1gLFxuXHRcdFx0fTtcblx0XHRcdGlmICghdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5W21haW5fc291cmNlX2luZGV4XS5kaXNhYmxlX3Rza2V5KSB7XG5cdFx0XHRcdHBPYmoudHNrZXkgPSB0c0dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF0udmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcE9iajtcblx0XHR9KTtcblx0XHRsZXQgdHNEYXRhVXJsTXVsdGkgPSBgJHtodHRwUHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHNfbXVsdGkubHVhYDtcblx0XHRsZXQgcmVxID0geyB0c19yZXF1ZXN0czogdHNSZXF1ZXN0cywgLi4ucGFyYW1zRXBvY2hPYmosIC4uLnBhcmFtc0NoYXJ0IH07XG5cdFx0bGV0IGhlYWRlcnMgPSB7XG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0fTtcblx0XHR0c0NoYXJ0c09wdGlvbnMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodHNEYXRhVXJsTXVsdGksIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSkgfSk7XG5cdH1cblx0cmV0dXJuIHRzQ2hhcnRzT3B0aW9ucztcbn1cblxuY29uc3QgdGltZXNlcmllc1V0aWxzID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4ge1xuXHRcdGdyb3Vwc09wdGlvbnNNb2Rlc0VudW0sXG5cdFx0dHNBcnJheVRvT3B0aW9ucyxcblx0XHRmb3JtYXRTaW1wbGVTZXJpZSxcblx0XHR0c0FycmF5VG9PcHRpb25zQXJyYXksXG5cdFx0Z2V0R3JvdXBPcHRpb25Nb2RlLFxuXHRcdGdldFNlcmllSWQsXG5cdFx0Z2V0U2VyaWVOYW1lLFxuXHRcdGdldFRzQ2hhcnRzT3B0aW9ucyxcblx0XHRnZXRUc1F1ZXJ5LFxuXHRcdGdldE1haW5Tb3VyY2VEZWZJbmRleCxcblx0fTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgdGltZXNlcmllc1V0aWxzO1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLnRpdGxlXCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdhZGQnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdhZGQnfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMuYWRkX3RpbWVzZXJpZXNcIil9fVxuXHQ8L2E+XG4gICAgICA8L2xpPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aW9uKCdzZWxlY3QnKVwiPlxuICAgIFx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdzZWxlY3QnIH1cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1hbmFnZV90aW1lc2VyaWVzXCIpfX08L2E+XG4gICAgICA8L2xpPlxuICAgIDwvdWw+XG4gICAgPCEtLSBhY3Rpb24gYWRkIC0tPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCI+XG4gICAgICA8IS0tIFNvdXJjZXMgVHlwZXMgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VfdHlwZVwiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zb3VyY2VfdHlwZSgpXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJzb3VyY2VzX3R5cGVzXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBTb3VyY2VzIC0tPlxuICAgICAgPGRpdiB2LWlmPVwiIWhpZGVfc291cmNlc1wiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbWItMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3cgXCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5zb3VyY2VcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWxcIiA6dGl0bGU9XCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsXCIgc3R5bGU9XCJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7XCIgdHlwZT1cInRleHRcIiBkaXNhYmxlZD5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG5cdDx0ZW1wbGF0ZSB2LWZvcj1cIihzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KSBpbiBzZWxlY3RlZF9zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5XCI+XG5cdCAgPCEtLSBzZWxlY3QgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLnNlbGVjdFwiIGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICAgIDxiPnt7c291cmNlX2RlZi5sYWJlbH19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuXHQgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCJcblx0XHRcdCAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9zZWxlY3RlZF9zb3VyY2Uoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleCwgdHJ1ZSlcIlxuXHRcdFx0ICAgIDpvcHRpb25zPVwic291cmNlc19hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiPlxuXHQgICAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICAgIDwvZGl2PlxuXHQgIDwvZGl2PiA8IS0tIGVuZCBzZWxlY3QgLS0+XG5cblx0ICA8IS0tIGlucHV0IHRleHQgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLmlucHV0XCIgY2xhc3M9XCJmb3JtLWdyb3VwIG10LTIgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgICAgPGI+e3tzb3VyY2VfZGVmLmxhYmVsfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIEBpbnB1dD1cImNoYW5nZV9zZWxlY3RlZF9zb3VyY2Uoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleClcIiB2LW1vZGVsPVwic2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXlbc291cmNlX2RlZl9pbmRleF1cIiA6cGF0dGVybj1cInNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXlbc291cmNlX2RlZl9pbmRleF1cIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiXCI+XG5cdCAgICA8L2Rpdj5cblx0ICA8L2Rpdj4gPCEtLSBpbnB1dCB0ZXh0IC0tPlxuXG5cdCAgPCEtLSBpbnB1dCBjb25maXJtIHRleHQgLS0+XG5cdCAgPGRpdiB2LWlmPVwic291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLmlucHV0X2NvbmZpcm1cIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXQtMiByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgICA8Yj57e3NvdXJjZV9kZWYubGFiZWx9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cblx0ICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgQGlucHV0PVwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZShzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KVwiIHYtbW9kZWw9XCJzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIDpwYXR0ZXJuPVwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJcIj5cblx0ICAgIDwvZGl2PlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIEBjbGljaz1cInJlbG9hZF9zb3VyY2VzKHNvdXJjZV9kZWYsIHNvdXJjZV9kZWZfaW5kZXgpXCIgOnRpdGxlPVwiX2kxOG4oc291cmNlX2RlZi5yZWZyZXNoX2kxOG4pXCIgOmRpc2FibGVkPVwiIWVuYWJsZV9hcHBseV9zb3VyY2VcIj48aSBjbGFzcz1cImZhcyBmYS1yZWZyZXNoXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gaW5wdXQgY29uZmlybSB0ZXh0IC0tPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0PGRpdiB2LXNob3c9XCJlbmFibGVfYXBwbHlfc291cmNlXCIgY2xhc3M9XCJmb3JtLWdyb3VwIHJvdyBtdC0yXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmVuZDtcIj5cblx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICBcdCAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseV9zb3VyY2VfYXJyYXlcIiA6ZGlzYWJsZWQ9XCJlbmFibGVfYXBwbHlfc291cmNlID09IGZhbHNlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hcHBseV9zb3VyY2VcIil9fTwvYnV0dG9uPlxuXHQgIDwvZGl2Plx0ICBcblx0PC9kaXY+XHRcbiAgICAgIDwvZGl2PiA8IS0tIGVuZCBTb3VyY2VzIC0tPlxuICAgICAgXG4gICAgICA8IS0tIE1ldHJpY3MgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5tZXRyaWNcIil9fTwvYj5cblx0ICA8L2xhYmVsPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCByZWY9XCJzZWxlY3Rfc2VhcmNoX21ldHJpY3NcIlxuXHQgIFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKClcIlxuXHQgIFx0XHQgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCJcblx0ICBcdFx0ICA6b3B0aW9ucz1cIm1ldHJpY3NcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgICAgXG5cdCAgPC9kaXY+XHQgIFxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8TGlzdFRpbWVzZXJpZXNcblx0OnRpdGxlPVwiX2kxOG4oJ21vZGFsX3RpbWVzZXJpZXMudGltZXNlcmllc19saXN0JylcIlxuXHR2LW1vZGVsOnRpbWVzZXJpZXM9XCJ0aW1lc2VyaWVzX3RvX2FkZFwiPlxuICAgICAgPC9MaXN0VGltZXNlcmllcz4gICAgICBcbiAgICA8L3RlbXBsYXRlPjwhLS0gYWN0aW9uID09IGFkZCAtLT5cblxuICAgIDwhLS0gYWN0aW9uIHNlbGVjdC0tPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkXCI+XG5cdDxMaXN0VGltZXNlcmllc1xuXHQgIDppZD1cImdldF90aW1lc2VyaWVzX2dyb3VwX2lkKGl0ZW0pXCJcblx0ICA6dGl0bGU9XCJnZXRfdGltZXNlcmllc19ncm91cF9uYW1lKGl0ZW0pXCJcblx0ICB2LW1vZGVsOnRpbWVzZXJpZXM9XCJpdGVtLnRpbWVzZXJpZXNcIlxuXHQgIDpzaG93X2RlbGV0ZV9idXR0b249XCJ0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC5sZW5ndGggPiAxXCJcblx0ICBAZGVsZXRlX3RzPVwiZGVsZXRlX3RzXCI+XG5cdDwvTGlzdFRpbWVzZXJpZXM+ICAgICAgXG4gICAgICA8L3RlbXBsYXRlPjwhLS0gdi1mb3IgdGltZXNlcmllc19ncm91cHNfYWRkZWQgLS0+XG4gICAgPC90ZW1wbGF0ZT48IS0tIGFjdGlvbiA9PSBzZWxlY3QgLS0+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJhY3Rpb24gPT0gJ2FkZCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiA6ZGlzYWJsZWQ9XCJlbmFibGVfYXBwbHlfc291cmNlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hZGRcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1zaG93PVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hcHBseVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExpc3RUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbGlzdC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNlbGVjdF9zZWFyY2hfbWV0cmljcyA9IHJlZihudWxsKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IGFjdGlvbiA9IHJlZihcInNlbGVjdFwiKTsgLy8gYWRkL3NlbGVjdCBcblxubGV0IGN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnNvdXJjZXNfdHlwZXM7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdHlwZSA9IHJlZihjdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUpO1xuXG5jb25zdCB1aV90eXBlcyA9IG1ldHJpY3NNYW5hZ2VyLnVpX3R5cGVzO1xuY29uc3Qgc291cmNlc19hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZXMsIGVhY2ggZWxlbWVudCBpcyB0aGUgc291cmNlcyBsaXN0IG9mIHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbaV1cbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheSA9IHJlZihbXSk7IC8vIGFycmF5IG9mIHNvdXJjZV92YWx1ZSBiaW5kaW5nIHdpdGggaW5wdXQgdGV4dFxuLy8gY29uc3Qgc3ViX3NvdXJjZXMgPSByZWYoW10pO1xuLy8gY29uc3Qgc2VsZWN0ZWRfc3ViX3NvdXJjZSA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsID0gcmVmKFwiXCIpO1xuY29uc3Qgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSA9IHJlZiAoW10pO1xuXG5jb25zdCBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBlbmFibGVfYXBwbHlfc291cmNlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9PSBmYWxzZSkge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgcmdfdGV4dCA9IHNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZ190ZXh0ID09IG51bGwpIHsgY29udGludWU7IH1cblx0bGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcblx0bGV0IHNvdXJjZV90ZXh0ID0gc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWVbaV07XG5cdGlmIChyZWdleC50ZXN0KHNvdXJjZV90ZXh0KSA9PSBmYWxzZSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHR9XHRcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59KTtcbmNvbnN0IGhpZGVfc291cmNlcyA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IG1ldHJpY3MgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KTtcblxuY29uc3QgdGltZXNlcmllc19ncm91cHNfYWRkZWQgPSByZWYoW10pO1xuXG5jb25zdCB0aW1lc2VyaWVzX3RvX2FkZCA9IHJlZihbXSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FwcGx5J10pO1xuXG5sZXQgd2FpdF9pbml0ID0gbnVsbDtcbmxldCBsYXN0X3NvdXJjZV92YWx1ZV9hcnJheSA9IG51bGw7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIHNvdXJjZXNfdHlwZXMuZm9yRWFjaCgoc291cmNlX3R5cGUpID0+IHtcblx0bGV0IHNvdXJjZV90eXBlX2VuYWJsZWQgPSBwcm9wcy5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbc291cmNlX3R5cGUuaWRdO1xuXHRpZiAoc291cmNlX3R5cGVfZW5hYmxlZCA9PSBudWxsIHx8IHNvdXJjZV90eXBlX2VuYWJsZWQgPT0gZmFsc2UpIHtcblx0ICAgIC8vIHNvdXJjZV90eXBlLmRpc2FibGVkID0gdHJ1ZTtcblx0fVxuICAgIH0pOyAgICBcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHdhaXRfaW5pdCA9IGluaXQoKTtcbn0pO1xuXG5jb25zdCBzaG93ID0gYXN5bmMgKHRpbWVzZXJpZXNfZ3JvdXBzKSA9PiB7XG4gICAgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUgPSB0aW1lc2VyaWVzX2dyb3VwcztcbiAgICBhd2FpdCB3YWl0X2luaXQ7XG4gICAgYWN0aW9uLnZhbHVlID0gXCJzZWxlY3RcIjtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5mdW5jdGlvbiBjaGFuZ2VfYWN0aW9uKGEpIHtcbiAgICBhY3Rpb24udmFsdWUgPSBhO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2Vfc291cmNlX3R5cGUoKSB7XG4gICAgaXNfc2VsZWN0ZWRfc291cmNlX2NoYW5nZWQudmFsdWUgPSBmYWxzZTtcbiAgICBzZXRfcmVnZXgoKTtcbiAgICBzZXRfaGlkZV9zb3VyY2VzKCk7XG4gICAgYXdhaXQgc2V0X3NvdXJjZXNfYXJyYXkoKTtcbiAgICBhd2FpdCBzZXRfbWV0cmljcygpO1xufVxuXG5mdW5jdGlvbiBzZXRfaGlkZV9zb3VyY2VzKCkge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlO1xuICAgIGhpZGVfc291cmNlcy52YWx1ZSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzZCkgPT4gc2QudWlfdHlwZSA9PSB1aV90eXBlcy5oaWRlKS5ldmVyeSgoaGlkZSkgPT4gaGlkZSA9PSB0cnVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXBwbHlfc291cmNlX2FycmF5KCkge1xuICAgIGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID0gZmFsc2U7XG4gICAgc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWUuZm9yRWFjaCgoc291cmNlX3ZhbHVlLCBpKSA9PiB7XG5cdGxldCBzb3VyY2VfZGVmID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuc291cmNlX2RlZl9hcnJheVtpXTtcblx0aWYgKHNvdXJjZV9kZWYudWlfdHlwZSA9PSB1aV90eXBlcy5pbnB1dCkge1xuXHQgICAgbGV0IHNvdXJjZSA9IHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZVtpXTtcbiAgICAgICAgICAgIHNldF9zb3VyY2VfaW5wdXQoc291cmNlLCBzb3VyY2VfdmFsdWUpXG5cdH1cbiAgICB9KTsgICAgXG4gICAgYXdhaXQgY2hhbmdlX3NvdXJjZV9hcnJheSgpO1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmZ1bmN0aW9uIHNldF9zb3VyY2VfaW5wdXQoc291cmNlLCBzb3VyY2VfdmFsdWUpIHtcbiAgICBzb3VyY2UudmFsdWUgPSBzb3VyY2VfdmFsdWU7XG4gICAgc291cmNlLmxhYmVsID0gc291cmNlX3ZhbHVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2Vfc291cmNlX2FycmF5KCkge1xuICAgIC8vIHJlbG9hZCBtZXRyaWNzIFxuICAgIGF3YWl0IHNldF9tZXRyaWNzKCk7XG59XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RlZF9zb3VyY2Uoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleCwgZm9yY2VfcmVsb2FkX3NvdXJjZXMpIHtcbiAgICBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9IHRydWU7XG4gICAgaWYgKGZvcmNlX3JlbG9hZF9zb3VyY2VzID09IHRydWUpIHtcbiAgICAgICAgcmVsb2FkX3NvdXJjZXMoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleCk7XG4gICAgfVxufVxuXG4vLyByZWxvYWQgYWxsIHNvdXJjZXMgZm9yIGVhY2ggc291cmNlX2RlZiB3aXRoIHJlZnJlc2hfb25fc291cmNlc19jaGFuZ2UgPT0gdHJ1ZVxuYXN5bmMgZnVuY3Rpb24gcmVsb2FkX3NvdXJjZXMoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleCkge1xuICAgIGlmIChzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXRfY29uZmlybSkge1xuICAgICAgICBzZXRfc291cmNlX2lucHV0KHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZVtzb3VyY2VfZGVmX2luZGV4XSwgc2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkudmFsdWVbc291cmNlX2RlZl9pbmRleF0pO1xuICAgIH1cbiAgICBsZXQgc291cmNlX2RlZl9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnNvdXJjZV9kZWZfYXJyYXk7XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZS5tYXAoKHMpID0+IHMudmFsdWUpO1xuICAgIGZvciAobGV0IGkgPSBzb3VyY2VfZGVmX2luZGV4ICsgMTsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc291cmNlX2RlZiA9IHNvdXJjZV9kZWZfYXJyYXlbaV07XG4gICAgICAgIGlmICghc291cmNlX2RlZi5yZWZyZXNoX29uX3NvdXJjZXNfY2hhbmdlKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgbGV0IHNvdXJjZXMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlcyhodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuaWQsIHNvdXJjZV9kZWYsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgICAgIHNvdXJjZXNfYXJyYXkudmFsdWVbaV0gPSBzb3VyY2VzO1xuICAgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWVbaV0gPSBzb3VyY2VzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlW2ldID0geyBsYWJlbDogXCJcIiwgdmFsdWU6IFwiXCIgfTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgTm8gc291cmNlcyBhdmFpbGFibGVzIHRvIHNlbGVjdCBmb3IgJHtzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS5pZH0gc29yY2VfZGVmYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldF9yZWdleCgpIHtcbiAgICBsZXQgcmVnZXhfc291cmNlX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWU/LnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmKSA9PiBzb3VyY2VfZGVmLnJlZ2V4X3R5cGUpO1xuICAgIGlmIChyZWdleF9zb3VyY2VfYXJyYXkgPT0gbnVsbCkgeyByZWdleF9zb3VyY2VfYXJyYXkgPSBbXTsgfVxuICAgIHNvdXJjZV90ZXh0X3ZhbGlkYXRpb25fYXJyYXkudmFsdWUgPSByZWdleF9zb3VyY2VfYXJyYXkubWFwKChyZWdleF9zb3VyY2UpID0+IHtcblx0aWYgKHJlZ2V4X3NvdXJjZSA9PSBudWxsKSB7IHJldHVybiAgbnVsbDsgfVxuXHRyZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4ocmVnZXhfc291cmNlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKSB7XG4gICAgbGV0IHNvdXJjZV9sYWJlbF9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZS5maWx0ZXIoKHNvdXJjZSkgPT4gc291cmNlLmxhYmVsICE9IG51bGwgJiYgc291cmNlLmxhYmVsICE9IFwiXCIpLm1hcCgoc291cmNlKSA9PiBzb3VyY2UubGFiZWwpO1xuICAgIGxldCBsYWJlbCA9IHNvdXJjZV9sYWJlbF9hcnJheS5qb2luKFwiIC0gXCIpO1xuICAgIHJldHVybiBgJHtsYWJlbH1gO1xufVxuXG5mdW5jdGlvbiBzZXRfc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCgpIHtcbiAgICBzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsLnZhbHVlID0gZ2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3NvdXJjZXNfYXJyYXkoKSB7XG4gICAgbGV0IHNvdXJjZV9kZWZfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS5zb3VyY2VfZGVmX2FycmF5O1xuICAgIGxldCBzb3VyY2VzX2FycmF5X3RlbXAgPSBbXTtcbiAgICBsZXQgZGVmYXVsdF9zb3VyY2VfYXJyYXkgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkoaHR0cF9wcmVmaXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlKTtcbiAgICBsZXQgZGVmYXVsdF9zb3J1Y2VfdmFsdWVfYXJyYXkgPSBkZWZhdWx0X3NvdXJjZV9hcnJheS5tYXAoKHMpID0+IHMudmFsdWUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRsZXQgc291cmNlcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VzKGh0dHBfcHJlZml4LCBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS5pZCwgc291cmNlX2RlZl9hcnJheVtpXSwgZGVmYXVsdF9zb3J1Y2VfdmFsdWVfYXJyYXkpO1xuXHRzb3VyY2VzX2FycmF5X3RlbXAucHVzaChzb3VyY2VzKTtcbiAgICB9XG4gICAgc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlID0gZGVmYXVsdF9zb3VyY2VfYXJyYXk7XG4gICAgc291cmNlc19hcnJheS52YWx1ZSA9IHNvdXJjZXNfYXJyYXlfdGVtcDtcbiAgICBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheS52YWx1ZSA9IGRlZmF1bHRfc29ydWNlX3ZhbHVlX2FycmF5O1xuICAgIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9tZXRyaWNzKCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSk7XG4gICAgbWV0cmljcy52YWx1ZS5zb3J0KE50b3BVdGlscy5zb3J0QWxwaGFiZXRpY2FsbHkpO1xuICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlKTtcbiAgICB1cGRhdGVfdGltZXNlcmllc190b19hZGQoZmFsc2UpOyAgICBcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBhd2FpdCBjaGFuZ2Vfc291cmNlX3R5cGUoKTtcbiAgICAvLyB0YWtlIGRlZmF1bHQgdmlzaWJsZVxuICAgIHVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZChmYWxzZSk7XG4gICAgLy9lbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKGRlZmF1bHRfY29uZmlnKSB7XG4gICAgdGltZXNlcmllc190b19hZGQudmFsdWUgPSBbXTtcbiAgICBsZXQgdGltZXNlcmllcyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS50aW1lc2VyaWVzO1xuICAgIGZvciAobGV0IHRzX2lkIGluIHRpbWVzZXJpZXMpIHtcbiAgICBcdHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlLnB1c2goe1xuICAgIFx0ICAgIGlkOiB0c19pZCxcbiAgICBcdCAgICBsYWJlbDogdGltZXNlcmllc1t0c19pZF0ubGFiZWwsXG4gICAgXHQgICAgcmF3OiB0cnVlLFxuXHQgICAgcGFzdDogZmFsc2UsXG4gICAgXHQgICAgYXZnOiBmYWxzZSxcbiAgICBcdCAgICBwZXJjXzk1OiBmYWxzZSxcbiAgICBcdH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSh0c19ncm91cCkge1xuICAgIGxldCBzb3VyY2VfdHlwZV9uYW1lID0gdHNfZ3JvdXAuc291cmNlX3R5cGUubGFiZWw7XG4gICAgbGV0IHNvdXJjZV9kZWZfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdO1xuICAgIGxldCBzb3VyY2VfbmFtZSA9IHNvdXJjZS5sYWJlbDtcbiAgICBsZXQgbWV0cmljX25hbWUgPSB0c19ncm91cC5tZXRyaWMubGFiZWw7XG4gICAgcmV0dXJuIGAke3NvdXJjZV90eXBlX25hbWV9IC0gJHtzb3VyY2VfbmFtZX0gLSAke21ldHJpY19uYW1lfWA7XG59XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYztcbiAgICBpZiAodHNfZ3JvdXAgPT0gbnVsbCkge1xuXHRzb3VyY2VfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlO1xuXHRzb3VyY2VfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWU7XG5cdG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHRzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuXHRzb3VyY2VfYXJyYXkgPSB0c19ncm91cC5zb3VyY2VfYXJyYXk7XG5cdG1ldHJpYyA9IHRzX2dyb3VwLm1ldHJpYztcbiAgICB9XG4gICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgcmV0dXJuIGlkO1xufVxuXG5jb25zdCBkZWxldGVfdHMgPSAodHNfZ3JvdXBfaWQpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlLmZpbHRlcigodHNfZ3JvdXApID0+IGdldF90aW1lc2VyaWVzX2dyb3VwX2lkKHRzX2dyb3VwKSAhPSB0c19ncm91cF9pZCk7XG59O1xuXG5jb25zdCBzZXRfdGltZXNlcmllc19ncm91cHMgPSAodGltZXNlcmllc19ncm91cHMsIGVtaXRfYXBwbHkpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzO1xuICAgIGlmIChlbWl0X2FwcGx5KSB7XG5cdGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIH1cbn07XG5cbmNvbnN0IGFkZF90c19ncm91cCA9ICh0c19ncm91cF90b19hZGQsIGVtaXRfYXBwbHkpID0+IHtcbiAgICBsZXQgdHNfZ3JvdXBfaW5kZXggPSB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZS5maW5kSW5kZXgoKHRzX2dyb3VwKSA9PiB0c19ncm91cC5pZCA9PSB0c19ncm91cF90b19hZGQuaWQpO1xuICAgIGlmICh0c19ncm91cF9pbmRleCA8IDApIHtcblx0dGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUucHVzaCh0c19ncm91cF90b19hZGQpO1xuICAgIH0gZWxzZSB7XG5cdHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlW3RzX2dyb3VwX2luZGV4XSA9IHRzX2dyb3VwX3RvX2FkZDtcbiAgICB9XG5cbiAgICBpZiAoZW1pdF9hcHBseSkge1xuXHRlbWl0KCdhcHBseScsIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlKTtcbiAgICB9XG59O1xuXG5jb25zdCBhcHBseSA9ICgpID0+IHtcbiAgICBpZiAoYWN0aW9uLnZhbHVlID09IFwiYWRkXCIpIHtcblx0bGV0IHRzX2dyb3VwX2lkID0gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQoKTtcblx0bGV0IHRzX2dyb3VwID0ge1xuXHQgICAgaWQ6IHRzX2dyb3VwX2lkLFxuXHQgICAgc291cmNlX3R5cGU6IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLFxuXHQgICAgc291cmNlX2FycmF5OiBudG9wbmdfdXRpbGl0eS5jbG9uZShzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUpLFxuXHQgICAgbWV0cmljOiBzZWxlY3RlZF9tZXRyaWMudmFsdWUsXG5cdCAgICB0aW1lc2VyaWVzOiBudG9wbmdfdXRpbGl0eS5jbG9uZSh0aW1lc2VyaWVzX3RvX2FkZC52YWx1ZSksXG5cdH07XG5cdGFkZF90c19ncm91cCh0c19ncm91cCk7XG4gICAgfVxuICAgIGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBhZGRfdHNfZ3JvdXAsIHNldF90aW1lc2VyaWVzX2dyb3VwcyB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuXG4uY3VzdG9tLW1hcmdpbiB7XG5tYXJnaW4tbGVmdDogLTAuNHJlbTtcbn1cbi53YXJuIHtcbmJvcmRlci1jb2xvcjogI2ZmZDUwMDtcbmJvcmRlci1zdHlsZTogc29saWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgIHt7IHByb3BzLnRpdGxlIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwibW9kYWxfZG93bmxvYWRfZmlsZS5maWxlbmFtZVwiKSB9fTo8L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwYXR0ZXJuPVwiZmlsZW5hbWVfdmFsaWRhdGlvblwiIHYtbW9kZWw9XCJmaWxlbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIC57eyBwcm9wcy5leHQgfX1cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZW5hYmxlX2Rvd25sb2FkID09IGZhbHNlXCI+e3tcbiAgICAgICAgX2kxOG4oXCJtb2RhbF9kb3dubG9hZF9maWxlLmRvd25sb2FkXCIpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGZpbGVuYW1lID0gcmVmKFwiXCIpO1xuXG4vL2NvbnN0IGZpbGVuYW1lX3ZhbGlkYXRpb24gPSBgW1xcYH4hQCMkJV4mKl98Ky09Pzs6J1wiLC48Pnt9W11cXFxcL11gO1xuY29uc3QgYmFja3RpY2sgPSAnYCc7XG5jb25zdCBmaWxlbmFtZV92YWxpZGF0aW9uID0gU3RyaW5nLnJhd2BeW2EtekEtWl9cXC0xLTldKiRgO1xuXG5jb25zdCBlbmFibGVfZG93bmxvYWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGxldCByZ190ZXh0ID0gZmlsZW5hbWVfdmFsaWRhdGlvbjtcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcbiAgcmV0dXJuIHJlZ2V4LnRlc3QoZmlsZW5hbWUudmFsdWUpO1xufSk7XG5cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHRpdGxlOiBTdHJpbmcsXG4gIGV4dDogU3RyaW5nLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkb3dubG9hZFwiXSk7XG5cbmNvbnN0IHNob3cgPSAobmFtZSkgPT4ge1xuICBpZiAobmFtZSA9PSBudWxsKSB7IG5hbWUgPSBcIlwiOyB9XG4gIC8qIFJlcGxhY2UgYWxsIGNoYXJhY3RlcnMgd2l0aCBfIGZvciBFWENFUFQgbnVtYmVyIGFuZCBsZXR0ZXJzICovXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2VBbGwoL1teYS16QS1aMC05XS9nLCAnXycpO1xuICBmaWxlbmFtZS52YWx1ZSA9IG5hbWU7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBsZXQgbmFtZSA9IGAke2ZpbGVuYW1lLnZhbHVlfS4ke3Byb3BzLmV4dH1gO1xuICBlbWl0KCdkb3dubG9hZCcsIG5hbWUpO1xuICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cblxuLm5vdC1hbGxvd2VkIHtcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiB2LWlmPVwidHJ1ZVwiPlxuICA8IS0tIDxzbG90IG5hbWU9XCJtZW51XCI+PC9zbG90PiAtLT5cbjwvZGl2PlxuPGRpdj5cbiAgPHRhYmxlIHJlZj1cInRhYmxlX2lkXCIgY2xhc3M9XCJ0YWJsZSB3LTEwMCB0YWJsZS1zdHJpcGVkIHRhYmxlLWhvdmVyIHRhYmxlLWJvcmRlcmVkXCI+XG4gIDx0aGVhZD5cbiAgICA8dHI+XG4gICAgICA8dGggY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHYtZm9yPVwiaXRlbSBpbiBjb2x1bW5zX2NvbmZpZ1wiPnt7IGl0ZW0uY29sdW1uTmFtZSB9fTwvdGg+XG4gICAgPC90cj5cbiAgPC90aGVhZD5cbiAgPHRib2R5PjwvdGJvZHk+XG48L3RhYmxlPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgdXNlU2xvdHMsIHJlbmRlciwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHJlbmRlcl9jb21wb25lbnQgfSBmcm9tIFwiLi9udG9wX3V0aWxzLmpzXCI7XG5cbmNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG5cbmNvbnN0IHNsb3RzID0gdXNlU2xvdHMoKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuXHRpZDogU3RyaW5nLFxuXHR0YWJsZV9idXR0b25zOiBBcnJheSxcblx0Y29sdW1uc19jb25maWc6IEFycmF5LFxuXHRkYXRhX3VybDogU3RyaW5nLFxuXHRlbmFibGVfc2VhcmNoOiBCb29sZWFuLFxuXHRmaWx0ZXJfYnV0dG9uczoge1xudHlwZTogQXJyYXksXG5yZXF1aXJlZDogZmFsc2UsXG5cdH0sXG5cdHRhYmxlX2NvbmZpZzoge1xudHlwZTogT2JqZWN0LFxucmVxdWlyZWQ6IGZhbHNlLFxuXHR9LFxuXHRiYXNlX3VybDogU3RyaW5nLFxuXHRiYXNlX3BhcmFtczogT2JqZWN0LCBcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydkcmF3ZWQnXSlcblxuLyogQWRkIGxhc3Qgc29ydGluZyBwcmVmZXJlbmNlcyB0byB0aGUgYnJvd3NlciBjYWNoZSBpbiBvcmRlciB0byByZWxvYWQgaXQgdGhlIG5leHQgdGltZSAqL1xuY29uc3Qgc2F2ZV9sYXN0X3NvcnQgPSAobGFzdF9zb3J0aW5nLCBpZCkgPT4ge1xuXHRpZihpZCB8fCBwcm9wcy5pZCkge1xuXHRcdC8qIERvIG5vdCBzYXZlIHRoZSBzb3J0aW5nIGlmIHRoZSBkaXJlY3Rpb24gaXMgdW5kZWZpbmVkICovXG5cdFx0aWYobGFzdF9zb3J0aW5nLmRpciAhPSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnN0IHNvcnRpbmdfcHJlZiA9IFtsYXN0X3NvcnRpbmcuY29sLCBsYXN0X3NvcnRpbmcuZGlyXTtcblx0XHRcdGNvbnN0IHNvcnRpbmdfa2V5ID0gYCR7aWQgfHwgcHJvcHMuaWR9X3NvcnRpbmdfcHJlZmVyZW5jZXNgXG5cdFx0XHRcblx0XHRcdC8qIFVzZSB0aGUgbG9jYWwgc3RvcmFnZSBmb3IgdGhlIHNvcnRpbmcgcHJlZmVyZW5jZXMgKi9cblx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNvcnRpbmdfa2V5LCBzb3J0aW5nX3ByZWYpO1xuXHRcdH1cblx0fVxufVxuXG5jb25zdCBsb2FkX2xhc3Rfc29ydCA9IChpZCkgPT4ge1xuXHRsZXQgc29ydGluZ19wcmVmID0gbnVsbDtcblx0aWYoaWQgfHwgcHJvcHMuaWQpIHtcblx0XHRjb25zdCBzb3J0aW5nX2tleSA9IGAke2lkIHx8IHByb3BzLmlkfV9zb3J0aW5nX3ByZWZlcmVuY2VzYFxuXG5cdFx0LyogVXNlIHRoZSBsb2NhbCBzdG9yYWdlIGZvciB0aGUgc29ydGluZyBwcmVmZXJlbmNlcyAqL1xuXHRcdGNvbnN0IHVuZm9ybWF0dGVkX3ByZWYgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShzb3J0aW5nX2tleSk7XG5cdFx0aWYodW5mb3JtYXR0ZWRfcHJlZikge1xuXHRcdFx0Y29uc3Qgc3BsaXR0ZWRfcHJlZiA9IHVuZm9ybWF0dGVkX3ByZWYuc3BsaXQoJywnKTtcblx0XHRcdGlmKHNwbGl0dGVkX3ByZWYubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0c29ydGluZ19wcmVmID0gWyBOdW1iZXIoc3BsaXR0ZWRfcHJlZlswXSksIHNwbGl0dGVkX3ByZWZbMV0gXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc29ydGluZ19wcmVmO1xufVxuXG5sZXQgbmV3X3BhcmFtcyA9IHByb3BzLmJhc2VfcGFyYW1zXG5jb25zdCB0YWJsZV9pZCA9IHJlZihudWxsKTtcbi8qIEluIGNhc2Ugbm8gc29ydGluZyBpcyBwcm92aWRlZCB1c2UgdGhlIGRlZmF1bHRfc29ydGluZyAqL1xuY29uc3QgbGFzdF9zb3J0aW5nID0gbG9hZF9sYXN0X3NvcnQoKSB8fCBbMCwgXCJhc2NcIl07XG5cbmZ1bmN0aW9uIGxvYWREYXRhdGFibGUoKSB7XG4gICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcbiAgICAvKiBDcmVhdGUgYSBkYXRhdGFibGUgd2l0aCB0aGUgYnV0dG9ucyAqL1xuICAgIGxldCBleHRlbmRfY29uZmlnID0ge1xuXHRzZXJ2ZXJTaWRlOiBmYWxzZSxcblx0c2Nyb2xsWDogZmFsc2UsXG5cdGRlc3Ryb3k6IHRydWUsXG5cdHNlYXJjaGluZzogcHJvcHMuZW5hYmxlX3NlYXJjaCxcblx0b3JkZXI6IFtsYXN0X3NvcnRpbmddLFxuXHRwYWdpbmdUeXBlOiAnZnVsbF9udW1iZXJzJyxcblx0Ly9jb2x1bW5EZWZzOiBwcm9wcy5jb2x1bW5zX2NvbmZpZyxcblx0Y29sdW1uczogcHJvcHMuY29sdW1uc19jb25maWcsXG5cdGF1dG9XaWR0aDogZmFsc2UsXG5cdHJlc3BvbnNpdmU6IHRydWUsXG5cdGFqYXg6IHtcblx0ICAgIG1ldGhvZDogJ2dldCcsXG5cdCAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuXHQgICAgZGF0YVNyYzogJ3JzcCcsXG5cdCAgICBkYXRhOiAoZGF0YSwgc2V0dGluZ3MpID0+IHtcblx0XHRpZihPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPT0gMCkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IHRhYmxlQXBpID0gc2V0dGluZ3Mub0luc3RhbmNlLmFwaSgpO1xuXHRcdGNvbnN0IG9yZGVyQ29sdW1uSW5kZXggPSBkYXRhLm9yZGVyWzBdLmNvbHVtbjtcblx0XHRjb25zdCBvcmRlckNvbHVtbk5hbWUgPSB0YWJsZUFwaS5jb2x1bW4ob3JkZXJDb2x1bW5JbmRleCkubmFtZSgpIHx8IHVuZGVmaW5lZDtcblx0XHRcblx0XHRpZiAoZGF0YS5vcmRlcikge1xuXHRcdCAgICBkYXRhLm9yZGVyID0gZGF0YS5vcmRlclswXS5kaXI7XG5cdFx0ICAgIGRhdGEuc29ydCA9IG9yZGVyQ29sdW1uTmFtZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYgKGRhdGEuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGRlbGV0ZSBkYXRhLmNvbHVtbnM7XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChkYXRhLnNlYXJjaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0ICAgIGRhdGEubWFwX3NlYXJjaCA9IGRhdGEuc2VhcmNoLnZhbHVlO1xuXHRcdCAgICBkZWxldGUgZGF0YS5zZWFyY2g7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHQgICAgfSxcblx0ICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcblx0ICAgIH0sXG5cdH0sXG5cdGRyYXdDYWxsYmFjazogZnVuY3Rpb24gKHNldHRpbmdzKSB7XG5cdCAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG5cdCAgICBlbWl0KCdkcmF3ZWQnKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVEKTtcdFx0IFxuXHRcdCBzYXZlX2xhc3Rfc29ydChzZXR0aW5ncy5hTGFzdFNvcnRbMF0pO1xuXHR9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLnRhYmxlX2NvbmZpZyB8fCB7fSkpIHtcblx0ZXh0ZW5kX2NvbmZpZ1tpdGVtXSA9IHByb3BzLnRhYmxlX2NvbmZpZ1tpdGVtXVxuICAgIH1cbiAgICBcbiAgICBsZXQgY29uZmlnID0gRGF0YVRhYmxlVXRpbHMuZ2V0U3RkRGF0YXRhYmxlQ29uZmlnKHByb3BzLnRhYmxlX2J1dHRvbnMpO1xuICAgIGNvbmZpZyA9IERhdGFUYWJsZVV0aWxzLmV4dGVuZENvbmZpZyhjb25maWcsIGV4dGVuZF9jb25maWcpO1xuICAgIHRhYmxlID0gJCh0YWJsZV9pZC52YWx1ZSkuRGF0YVRhYmxlKGNvbmZpZyk7XG5cdCBsb2FkX3RhYmxlX21lbnUoKTtcbiAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiAocHJvcHMuZmlsdGVyX2J1dHRvbnMgfHwgW10pKSB7XG5cdC8qIFNldCBmaWx0ZXJzIHRvIGFjdGl2ZSBpZiBhdmFpbGFibGUgaW4gdGhlIHVybCAqL1xuXHRjb25zdCBjdXJyX3ZhbHVlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyLmZpbHRlck1lbnVLZXkpXG5cdGlmKGN1cnJfdmFsdWUgJiYgY3Vycl92YWx1ZSAhPSAnJykge1xuXHQgICAgbGV0IG51bV9ub25fYWN0aXZlX2VudHJpZXMgPSAwXG5cdCAgICBmaWx0ZXIuZmlsdGVycy5mb3JFYWNoKChpKSA9PiB7XG5cdFx0aS5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2Vcblx0XHRudW1fbm9uX2FjdGl2ZV9lbnRyaWVzICs9IDFcblx0XHRpZihpLmlkID09IGN1cnJfdmFsdWUpIHtcblx0XHQgICAgaS5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZVxuXHRcdCAgICBudW1fbm9uX2FjdGl2ZV9lbnRyaWVzIC09IDFcblx0XHR9XG5cdCAgICB9KVxuXHQgICAgXG5cdCAgICBpZihudW1fbm9uX2FjdGl2ZV9lbnRyaWVzID09IGZpbHRlci5maWx0ZXJzLmxlbmd0aCkge1xuXHRcdG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgJycpO1xuXHRcdHVwZGF0ZWQgPSB0cnVlXG5cdCAgICB9XG5cdH1cblx0XG5cdG5ldyBEYXRhVGFibGVGaWx0ZXJzTWVudSh7XG5cdCAgICBmaWx0ZXJUaXRsZTogZmlsdGVyLmZpbHRlclRpdGxlLFxuXHQgICAgdGFibGVBUEk6IHRhYmxlLFxuXHQgICAgZmlsdGVyczogZmlsdGVyLmZpbHRlcnMsXG5cdCAgICBmaWx0ZXJNZW51S2V5OiBmaWx0ZXIuZmlsdGVyTWVudUtleSxcblx0ICAgIGNvbHVtbkluZGV4OiBmaWx0ZXIuY29sdW1uSW5kZXgsXG5cdCAgICB1cmw6IHByb3BzLmRhdGFfdXJsLFxuXHQgICAgaWQ6IGZpbHRlci5pZCxcblx0ICAgIHJlbW92ZUFsbEVudHJ5OiBmaWx0ZXIucmVtb3ZlQWxsRW50cnksXG5cdCAgICBjYWxsYmFja0Z1bmN0aW9uOiBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvblxuXHR9KS5pbml0KCk7XG4gICAgfVxuICAgIFxuICAgIGlmKHVwZGF0ZWQgJiYgcHJvcHMuYmFzZV9wYXJhbXMpIHtcblx0Y29uc3QgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKVxuXHRmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIChlbnRyaWVzKSkge1xuXHQgICAgbmV3X3BhcmFtc1trZXldID0gdmFsdWVcblx0fVxuXHR0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIG5ld19wYXJhbXMpKVxuXHRyZWxvYWQoKVxuICAgIH1cbn1cblxubGV0IHRhYmxlID0gbnVsbDtcbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgbG9hZERhdGF0YWJsZSgpXG59KTtcblxuZnVuY3Rpb24gZ2V0X3RhYmxlX2RlZmF1bHRfbWVudSgpIHtcbiAgICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICByZXR1cm4gJCgkKFwiLnJvdyAudGV4dC1lbmRcIiwgdGFibGVfd3JhcHBlcikuY2hpbGRyZW4oKVswXSk7O1xufVxuXG5mdW5jdGlvbiBzZWFyY2hfdmFsdWUodmFsdWVfdG9fc2VhcmNoKSB7XG5cdGlmICh0YWJsZSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHR0YWJsZS5zZWFyY2godmFsdWVfdG9fc2VhcmNoKS5kcmF3KCk7XG59XG5cbmxldCB0YWJsZV9kZWZhdWx0X21lbnUgPSBudWxsO1xuZnVuY3Rpb24gbG9hZF90YWJsZV9tZW51KCkge1xuICAgIGlmICh0YWJsZV9kZWZhdWx0X21lbnUgPT0gbnVsbCkge1xuXHR0YWJsZV9kZWZhdWx0X21lbnUgPSBnZXRfdGFibGVfZGVmYXVsdF9tZW51KCk7XG4gICAgfVxuICAgIGlmIChzbG90cyA9PSBudWxsIHx8IHNsb3RzLm1lbnUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBsZXQgbWVudV9hcnJheSA9IHNsb3RzLm1lbnUoKTtcbiAgICBpZiAobWVudV9hcnJheSA9PSBudWxsIHx8IG1lbnVfYXJyYXkubGVuZ3RoID09IDApIHsgcmV0dXJuOyB9XG4gICAgbGV0IG5vZGUgPSBzbG90cy5tZW51KClbMF07XG4gICAgbGV0IGVsZW1lbnQgPSAkKFwiPGRpdiBjbGFzcz0nZC1pbmxpbmUtYmxvY2snPjwvZGl2PlwiKVswXTtcbiAgICBjb25zdCB7IHZOb2RlLCBlbCB9ID0gcmVuZGVyX2NvbXBvbmVudChub2RlLCB7IGFwcDogIGluc3RhbmNlPy5hcHBDb250ZXh0Py5hcHAsIGVsZW1lbnQgfSk7XG4gICAgLy8gY29uc3QgeyB2Tm9kZSwgZWwgfSA9IHJlbmRlcl9jb21wb25lbnQoVGVzdCwgeyBhcHA6ICBpbnN0YW5jZS5hcHBDb250ZXh0LmFwcCB9KTtcbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAkKCQoXCIucm93IC50ZXh0LWVuZFwiLCB0YWJsZV93cmFwcGVyKS5jaGlsZHJlbigpWzBdKS5hcHBlbmQoZWwpO1xufVxuXG5jb25zdCByZWxvYWQgPSAoKSA9PiB7XG4gICAgaWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbn1cblxuY29uc3QgdXBkYXRlX3VybCA9IChuZXdfdXJsKSA9PiB7XG4gICAgaWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgdGFibGUuYWpheC51cmwobmV3X3VybCk7XG59XG5cbmNvbnN0IGRlbGV0ZV9idXR0b25faGFuZGxlcnMgPSAoaGFuZGxlcklkKSA9PiB7XG4gICAgRGF0YVRhYmxlVXRpbHMuZGVsZXRlQnV0dG9uSGFuZGxlcnMoaGFuZGxlcklkKTtcbn07XG5cbmxldCBpc19kZXN0cm95ZWQgPSBmYWxzZTtcblxuY29uc3QgZGVzdHJveV90YWJsZSA9ICgpID0+IHtcbiAgICB0YWJsZS5jbGVhcigpO1xuICAgIHRhYmxlLmRlc3Ryb3kodHJ1ZSk7XG4gICAgaXNfZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBwcm9wcy5jb2x1bW5zX2NvbmZpZy5maWx0ZXIoKGNvbmZpZykgPT4gY29uZmlnLmhhbmRsZXJJZCAhPSBudWxsKS5mb3JFYWNoKChjb25maWcpID0+IHtcblx0ZGVsZXRlX2J1dHRvbl9oYW5kbGVycyhjb25maWcuaGFuZGxlcklkKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IHJlZnJlc2hfbWVudSA9ICgpID0+IHtcbiAgICBsZXQgdGFibGVfd3JhcHBlciA9ICQodGFibGUuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAkKCQoXCIucm93IC50ZXh0LWVuZFwiLCB0YWJsZV93cmFwcGVyKS5jaGlsZHJlbigpWzBdKS5odG1sKFwiXCIpO1xuICAgIGxvYWRfdGFibGVfbWVudSgpO1xufTtcblxuY29uc3QgaXNfbGFzdF9zb3J0aW5nX2F2YWlsYWJsZSA9IChpZCkgPT4ge1xuXHRyZXR1cm4gbG9hZF9sYXN0X3NvcnQoaWQpICE9IG51bGw7XG59XG5cbmRlZmluZUV4cG9zZSh7IHJlbG9hZCwgZGVsZXRlX2J1dHRvbl9oYW5kbGVycywgZGVzdHJveV90YWJsZSwgdXBkYXRlX3VybCwgcmVmcmVzaF9tZW51LCBpc19sYXN0X3NvcnRpbmdfYXZhaWxhYmxlLCBsb2FkX2xhc3Rfc29ydCwgc2F2ZV9sYXN0X3NvcnQsIHNlYXJjaF92YWx1ZSB9KTtcblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBpZiAoaXNfZGVzdHJveWVkID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgZGVzdHJveV90YWJsZSgpO1xuICAgIC8vIHRhYmxlLmRlc3Ryb3kodHJ1ZSk7XG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBjcmVhdGVWTm9kZSB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJfY29tcG9uZW50ID0gZnVuY3Rpb24oY29tcG9uZW50LCB7IHByb3BzLCBjaGlsZHJlbiwgZWxlbWVudCwgYXBwIH0gPSB7fSkge1xuICAgIGxldCBlbCA9IGVsZW1lbnRcbiAgICBsZXQgdk5vZGUgPSBjcmVhdGVWTm9kZShjb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbilcbiAgICBpZiAoYXBwICYmIGFwcC5fY29udGV4dCkgdk5vZGUuYXBwQ29udGV4dCA9IGFwcC5fY29udGV4dFxuICAgIGlmIChlbCkgcmVuZGVyKHZOb2RlLCBlbClcbiAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICkgcmVuZGVyKHZOb2RlLCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgIFxuICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG5cdGlmIChlbCkgcmVuZGVyKG51bGwsIGVsKVxuXHRlbCA9IG51bGxcblx0dk5vZGUgPSBudWxsXG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IHZOb2RlLCBkZXN0cm95LCBlbCB9XG59O1xuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIG1iLTIgbXQtMlwiPlxuICAgICAgICA8QWxlcnRJbmZvPjwvQWxlcnRJbmZvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBoLTEwMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgIDxEYXRlVGltZVJhbmdlUGlja2VyIHN0eWxlPVwibWFyZ2luLXRvcDowLjVyZW07XCIgY2xhc3M9XCJtcy0xXCIgOmlkPVwiaWRfZGF0ZV90aW1lX3BpY2tlclwiIDplbmFibGVfcmVmcmVzaD1cInRydWVcIlxuICAgICAgICAgICAgICAgIHJlZj1cImRhdGVfdGltZV9waWNrZXJcIiBAZXBvY2hfY2hhbmdlPVwiZXBvY2hfY2hhbmdlXCIgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIlxuICAgICAgICAgICAgICAgIDpjdXN0b21fdGltZV9pbnRlcnZhbF9saXN0PVwidGltZV9wcmVzZXRfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImVuYWJsZV9zbmFwc2hvdHNcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdwYWdlX3N0YXRzLm1hbmFnZV9zbmFwc2hvdHNfYnRuJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInRyYWZmaWNfZXh0cmFjdGlvbl9wZXJtaXR0ZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIiA6dGl0bGU9XCJfaTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9kb3dubG9hZCcpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1kb3dubG9hZFwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJpc19zYWZhcmlcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJzaG93X21vZGFsX2Rvd25sb2FkX2ZpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiaW1hZ2VfYnV0dG9uX3RpdGxlXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1maWxlLWltYWdlXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19oaXN0b3J5X2VuYWJsZWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBAY2xpY2s9XCJqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMuaGlzdG9yaWNhbF9mbG93cycpXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtdGFibGVcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvRGF0ZVRpbWVSYW5nZVBpY2tlcj5cbiAgICAgICAgICAgIDwhLS0gc2VsZWN0IG1ldHJpYyAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVwidHNfbWVudV9yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0xIG1lLTEgbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCIgOm9wdGlvbnM9XCJtZXRyaWNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwic2VsZWN0X21ldHJpY1wiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5saW5lIHNlbGVjdDItc2l6ZSBtZS0yIG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZVwiIDpvcHRpb25zPVwiZ3JvdXBzX29wdGlvbnNfbW9kZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZ3JvdXBzX29wdGlvbnNfbW9kZVwiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X21hbmFnZV90aW1lc2VyaWVzXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5IGlubGluZVwiXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogc3VwZXI7JyB2LWlmPVwiaXNfbnRvcF9wcm9cIj5cbiAgICAgICAgICAgICAgICAgICAgTWFuYWdlIFRpbWVzZXJpZXNcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpdGVtLCBpKSBpbiBjaGFydHNfb3B0aW9uc19pdGVtc1wiIDprZXk9XCJpdGVtLmtleVwiPlxuICAgICAgICAgICAgICAgIDxUaW1lc2VyaWVzQ2hhcnQgOmlkPVwiaWRfY2hhcnQgKyBpXCIgOnJlZj1cImVsID0+IHsgY2hhcnRzW2ldID0gZWwgfVwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIiA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKGkpXCJcbiAgICAgICAgICAgICAgICAgICAgQHpvb209XCJlcG9jaF9jaGFuZ2VcIiBAY2hhcnRfcmVsb2FkZWQ9XCJjaGFydF9yZWxvYWRlZFwiPlxuICAgICAgICAgICAgICAgIDwvVGltZXNlcmllc0NoYXJ0PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm10LTQgY2FyZCBjYXJkLXNoYWRvd1wiIHYtaWY9XCJlbmFibGVfc3RhdHNfdGFibGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8Qm9vdHN0cmFwVGFibGUgaWQ9XCJwYWdlX3N0YXRzX2Jvb3RzdHJhcF90YWJsZVwiIDpjb2x1bW5zPVwic3RhdHNfY29sdW1uc1wiIDpyb3dzPVwic3RhdHNfcm93c1wiXG4gICAgICAgICAgICAgICAgICAgIDpwcmludF9odG1sX2NvbHVtbj1cIihjb2wpID0+IHByaW50X3N0YXRzX2NvbHVtbihjb2wpXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwiKGNvbCwgcm93KSA9PiBwcmludF9zdGF0c19yb3coY29sLCByb3cpXCI+XG4gICAgICAgICAgICAgICAgPC9Cb290c3RyYXBUYWJsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCIgdi1pZj1cImlzX250b3BfcHJvXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2VsZWN0ZWRfdG9wX3RhYmxlPy50YWJsZV9jb25maWdfZGVmXCIgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdG9wX3RhYmxlXCIgOm9wdGlvbnM9XCJ0b3BfdGFibGVfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8RGF0YXRhYmxlIHYtaWY9XCJzZWxlY3RlZF90b3BfdGFibGU/LnRhYmxlX2NvbmZpZ19kZWZcIiA6a2V5PVwic2VsZWN0ZWRfdG9wX3RhYmxlPy52YWx1ZVwiIHJlZj1cInRvcF90YWJsZV9yZWZcIlxuICAgICAgICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLnRhYmxlX2J1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgICAgICAgOmRhdGFfdXJsPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYuZGF0YV91cmxcIlxuICAgICAgICAgICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cInNlbGVjdGVkX3RvcF90YWJsZS50YWJsZV9jb25maWdfZGVmLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICA6dGFibGVfY29uZmlnPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8TW9kYWxTbmFwc2hvdCB2LWlmPVwiZW5hYmxlX3NuYXBzaG90c1wiIHJlZj1cIm1vZGFsX3NuYXBzaG90XCIgOmNzcmY9XCJjc3JmXCIgOnBhZ2U9XCJwYWdlX3NuYXBzaG90c1wiXG4gICAgICAgIEBhZGRlZF9zbmFwc2hvdD1cInJlZnJlc2hfc25hcHNob3RzXCIgQGRlbGV0ZWRfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIlxuICAgICAgICBAZGVsZXRlZF9hbGxfc25hcHNob3RzPVwicmVmcmVzaF9zbmFwc2hvdHNcIj5cbiAgICA8L01vZGFsU25hcHNob3Q+XG5cbiAgICA8TW9kYWxUaW1lc2VyaWVzIHYtaWY9XCJpc19udG9wX3Byb1wiIHJlZj1cIm1vZGFsX3RpbWVzZXJpZXNcIiA6c291cmNlc190eXBlc19lbmFibGVkPVwic291cmNlc190eXBlc19lbmFibGVkXCJcbiAgICAgICAgQGFwcGx5PVwiYXBwbHlfbW9kYWxfdGltZXNlcmllc1wiPlxuICAgIDwvTW9kYWxUaW1lc2VyaWVzPlxuXG4gICAgPE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gaWQ9XCJwYWdlX3N0YXRzX21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiIHJlZj1cIm1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiPlxuICAgIDwvTW9kYWxUcmFmZmljRXh0cmFjdGlvbj5cblxuICAgIDxNb2RhbERvd25sb2FkRmlsZSByZWY9XCJtb2RhbF9kb3dubG9hZF9maWxlXCIgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMudGl0bGVfbW9kYWxfZG93bmxvYWRfZmlsZScpXCIgZXh0PVwicG5nXCJcbiAgICAgICAgQGRvd25sb2FkPVwiZG93bmxvYWRfY2hhcnRfcG5nXCI+XG4gICAgPC9Nb2RhbERvd25sb2FkRmlsZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUaW1lc2VyaWVzQ2hhcnQgfSBmcm9tIFwiLi90aW1lc2VyaWVzLWNoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9tb2RhbC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERvd25sb2FkRmlsZSB9IGZyb20gXCIuL21vZGFsLWRvd25sb2FkLWZpbGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCb290c3RyYXBUYWJsZSB9IGZyb20gXCIuL2Jvb3RzdHJhcC10YWJsZS52dWVcIjtcblxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgbWV0cmljc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY3NyZjogU3RyaW5nLFxuICAgIGlzX250b3BfcHJvOiBCb29sZWFuLFxuICAgIHNvdXJjZV92YWx1ZV9vYmplY3Q6IE9iamVjdCxcbiAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IE9iamVjdCxcbiAgICBzb3VyY2VzX3R5cGVzX3RvcF9lbmFibGVkOiBPYmplY3QsXG4gICAgZW5hYmxlX3NuYXBzaG90czogQm9vbGVhbixcbiAgICBpc19oaXN0b3J5X2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHJhZmZpY19leHRyYWN0aW9uX3Blcm1pdHRlZDogQm9vbGVhbixcbiAgICBpc19kYXJrX21vZGU6IEJvb2xlYW4sXG59KTtcblxuLy9udG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCgpO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xubGV0IGlkX2NoYXJ0ID0gXCJjaGFydFwiO1xubGV0IGlkX2RhdGVfdGltZV9waWNrZXIgPSBcImRhdGVfdGltZV9waWNrZXJcIjtcbmxldCBjaGFydF90eXBlID0gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuVFNfTElORTtcbmNvbnN0IGNvbmZpZ19hcHBfdGFibGUgPSByZWYoe30pO1xuY29uc3QgaW5pdF9jb25maWdfdGFibGUgPSByZWYoZmFsc2UpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGRhdGVfdGltZV9waWNrZXIgPSByZWYobnVsbCk7XG5jb25zdCB0b3BfdGFibGVfcmVmID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfdGltZXNlcmllcyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3NuYXBzaG90ID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZG93bmxvYWRfZmlsZSA9IHJlZihudWxsKTtcblxuY29uc3QgaXNfc2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IGltYWdlX2J1dHRvbl90aXRsZSA9IGlzX3NhZmFyaSA/IF9pMThuKCdwYWdlX3N0YXRzLmRvd25sb2FkX2ltYWdlX2Rpc2FibGVkJykgOiBfaTE4bigncGFnZV9zdGF0cy50aXRsZV9tb2RhbF9kb3dubG9hZF9maWxlJyk7XG5cbmNvbnN0IG1pbl90aW1lX2ludGVydmFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgbWV0cmljcyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9tZXRyaWMgPSByZWYoe30pO1xuY29uc3Qgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG5cbmNvbnN0IGVuYWJsZV9zdGF0c190YWJsZSA9IHJlZihmYWxzZSk7XG5jb25zdCBlbmFibGVfdG9wX3RhYmxlID0gcmVmKGZhbHNlKTtcblxuLyoqXG4gKiB7IGtleTogaWRlbnRpZmllciBvZiBDaGFydCBjb21wb25lbnQsIGlmIGNoYW5nZSBDaGFydCB3aWxsIGJlIGRlc3Ryb3llZCBhbmQgcmVjcmVhdGVkLFxuICogIGNoYXJ0X29wdGlvbnM6IGNoYXJ0IG9wdGlvbnMgfVtdXG4gKiovXG5jb25zdCBjaGFydHNfb3B0aW9uc19pdGVtcyA9IHJlZihbXSk7XG5cbi8qKlxuICogTW9kZXMgdGhhdCByZXByZXNlbnQgaG93IGl0J3MgcG9zc2libGUgZGlzcGxheSB0aW1lc2VyaWVzLlxuICovXG5jb25zdCBncm91cHNfb3B0aW9uc19tb2RlcyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheSh0aW1lc2VyaWVzVXRpbHMuZ3JvdXBzT3B0aW9uc01vZGVzRW51bSk7XG4vKipcbiAqIEN1cnJlbnQgZGlzcGxheSB0aW1lc2VyaWVzIG1vZGUuXG4gKi9cbmNvbnN0IGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZSA9IHJlZihpbml0X2dyb3Vwc19vcHRpb25fbW9kZSgpKTtcblxubGV0IGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID0gbnVsbDtcblxuY29uc3QgY3VzdG9tX21ldHJpYyA9IHsgbGFiZWw6IGkxOG4oJ3BhZ2Vfc3RhdHMuY3VzdG9tX21ldHJpY3MnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfTtcblxuY29uc3QgcGFnZV9zbmFwc2hvdHMgPSBcInRpbWVzZXJpZXNcIjtcblxuY29uc3QgdHNfbWVudV9yZWFkeSA9IHJlZihmYWxzZSk7XG5jb25zdCB0aW1lX3ByZXNldF9saXN0ID0gW1xuICAgIHsgdmFsdWU6IFwiMTBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiMzBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiNl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy42X2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCIxMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbl07XG5cbmZ1bmN0aW9uIGluaXRfZ3JvdXBzX29wdGlvbl9tb2RlKCkge1xuICAgIGxldCBncm91cHNfbW9kZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZXNlcmllc19ncm91cHNfbW9kZVwiKTtcbiAgICBpZiAoZ3JvdXBzX21vZGUgIT0gbnVsbCAmJiBncm91cHNfbW9kZSAhPSBcIlwiKSB7XG4gICAgICAgIHJldHVybiB0aW1lc2VyaWVzVXRpbHMuZ2V0R3JvdXBPcHRpb25Nb2RlKGdyb3Vwc19tb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyb3Vwc19vcHRpb25zX21vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBzZXRfZGVmYXVsdF9zb3VyY2Vfb2JqZWN0X2luX3VybCgpIHtcbiAgICBpZiAocHJvcHMuc291cmNlX3ZhbHVlX29iamVjdCA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICBtZXRyaWNzTWFuYWdlci5zZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwoc291cmNlX3R5cGUsIHByb3BzLnNvdXJjZV92YWx1ZV9vYmplY3QpO1xufVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBcbiAgICBpZiAobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJwYWdlXCIpID09IFwidmFfaGlzdG9yaWNhbFwiKSB7XG4gICAgICAgIGxldCBjb2x1bW5zX3RtcCA9IFtdO1xuICAgICAgICBzdGF0c19jb2x1bW5zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLnZhKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uc190bXAucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIHN0YXRzX2NvbHVtbnMgPSBjb2x1bW5zX3RtcDtcbiAgICB9XG4gICAgXG4gICAgaWYgKHByb3BzLnNvdXJjZV92YWx1ZV9vYmplY3QuaXNfdmEpIHtcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQudmFsdWUgPSBcImhvdXJcIjtcbiAgICAgICAgbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwoXCJkYXlcIik7XG4gICAgfTtcbiAgICBcbiAgICBzZXRfZGVmYXVsdF9zb3VyY2Vfb2JqZWN0X2luX3VybCgpO1xufSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgbnRvcG5nX3N5bmMub25fcmVhZHkoaWRfZGF0ZV90aW1lX3BpY2tlciksXG4gICAgXSk7XG4gICAgLy8gY2hhcnQudmFsdWUucmVnaXN0ZXJfc3RhdHVzKCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAvL2dldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzXG4gICAgbGV0IHB1c2hfY3VzdG9tX21ldHJpYyA9IHRydWU7XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsKGh0dHBfcHJlZml4KTtcbiAgICBsZXQgbWV0cmljX3RzX3NjaGVtYTtcbiAgICBsZXQgbWV0cmljX3F1ZXJ5O1xuICAgIGlmICh0aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsKSB7XG4gICAgICAgIHB1c2hfY3VzdG9tX21ldHJpYyA9IGZhbHNlO1xuICAgICAgICBtZXRyaWNfdHNfc2NoZW1hID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0c19zY2hlbWFcIik7XG4gICAgICAgIGxldCB0c19xdWVyeSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidHNfcXVlcnlcIik7XG4gICAgICAgIGlmICh0c19xdWVyeSAhPSBudWxsICYmIHRzX3F1ZXJ5ICE9IFwiXCIpIHtcbiAgICAgICAgICAgIG1ldHJpY19xdWVyeSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNfcXVlcnlfZnJvbV90c19xdWVyeSh0c19xdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldHJpY190c19zY2hlbWEgPT0gXCJcIikgeyBtZXRyaWNfdHNfc2NoZW1hID0gbnVsbDsgfVxuICAgICAgICB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzKGh0dHBfcHJlZml4LCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIH1cbiAgICBtZXRyaWNzLnZhbHVlID0gYXdhaXQgZ2V0X21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljKTtcbiAgICBcbiAgICBpZiAocHVzaF9jdXN0b21fbWV0cmljID09IHRydWUpIHtcbiAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gY3VzdG9tX21ldHJpYztcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBtZXRyaWNzTWFuYWdlci5nZXRfZGVmYXVsdF9tZXRyaWMobWV0cmljcy52YWx1ZSwgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KTtcbiAgICB9XG4gICAgdHNfbWVudV9yZWFkeS52YWx1ZSA9IHRydWU7XG4gICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIHRydWUpO1xufVxuXG5sZXQgbGFzdF9wdXNoX2N1c3RvbV9tZXRyaWMgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gZ2V0X21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCBmb3JjZV9yZWZyZXNoKSB7XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljcyhodHRwX3ByZWZpeCk7XG4gICAgaWYgKCFmb3JjZV9yZWZyZXNoICYmIGxhc3RfcHVzaF9jdXN0b21fbWV0cmljID09IHB1c2hfY3VzdG9tX21ldHJpYykgeyByZXR1cm4gbWV0cmljcy52YWx1ZTsgfVxuICAgIFxuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMpIHtcbiAgICAgICAgbWV0cmljcy5wdXNoKGN1c3RvbV9tZXRyaWMpO1xuICAgIH1cbiAgICBpZiAoY2FjaGVfc25hcHNob3RzID09IG51bGwgfHwgZm9yY2VfcmVmcmVzaCkge1xuICAgICAgICBjYWNoZV9zbmFwc2hvdHMgPSBhd2FpdCBnZXRfc25hcHNob3RzX21ldHJpY3MoKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmVuYWJsZV9zbmFwc2hvdHMpIHtcbiAgICAgICAgbGV0IHNuYXBzaG90c19tZXRyaWNzID0gY2FjaGVfc25hcHNob3RzO1xuICAgICAgICBzbmFwc2hvdHNfbWV0cmljcy5mb3JFYWNoKChzbSkgPT4gbWV0cmljcy5wdXNoKHNtKSk7XG4gICAgfVxuICAgIC8qIE9yZGVyIE1ldHJpY3MgKi9cbiAgICBpZiAobWV0cmljcy5sZW5ndGggPiAwKVxuICAgICAgICBtZXRyaWNzLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSk7XG4gICAgXG4gICAgcmV0dXJuIG1ldHJpY3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zbmFwc2hvdHNfbWV0cmljcygpIHtcbiAgICBpZiAoIXByb3BzLmVuYWJsZV9zbmFwc2hvdHMpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ZpbHRlcnMvc25hcHNob3RzLmx1YT9wYWdlPSR7cGFnZV9zbmFwc2hvdHN9YDtcbiAgICBcbiAgICBsZXQgc25hcHNob3RzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIGxldCBzbmFwc2hvdHMgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoc25hcHNob3RzX29iaik7XG4gICAgbGV0IG1ldHJpY3Nfc25hcHNob3RzID0gc25hcHNob3RzLm1hcCgocykgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucyxcbiAgICAgICAgICAgIGlzX3NuYXBzaG90OiB0cnVlLFxuICAgICAgICAgICAgbGFiZWw6IGAke3MubmFtZX1gLFxuICAgICAgICAgICAgZ3JvdXA6IFwiU25hcHNob3RzXCIsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIG1ldHJpY3Nfc25hcHNob3RzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfc2VsZWN0ZWRfdGltZXNlcmllc19ncm91cHMoKSB7XG4gICAgbGV0IG1ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZTtcbiAgICByZXR1cm4gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpYyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWMpIHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUpO1xuICAgIGxldCB0c19ncm91cCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IFt0c19ncm91cF07XG4gICAgcmV0dXJuIHRpbWVzZXJpZXNfZ3JvdXBzO1xufVxuXG5jb25zdCBhZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdCA9IGFzeW5jIChzb3VyY2VfdHlwZV9pZCwgc291cmNlX3ZhbHVlX2RpY3QsIG1ldHJpY19zY2hlbWEpID0+IHtcbiAgICBsZXQgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX3R5cGVfZnJvbV9pZChzb3VyY2VfdHlwZV9pZCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9kaWN0KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2RpY3QpO1xuICAgIGxldCBtZXRyaWMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfbWV0cmljX2Zyb21fc2NoZW1hKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWNfc2NoZW1hKTtcbiAgICBsZXQgdHNfZ3JvdXAgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICBhZGRfdHNfZ3JvdXAodHNfZ3JvdXApO1xufTtcblxuY29uc3QgYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEgPSBhc3luYyAobWV0cmljX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IG1ldHJpYyA9IG1ldHJpY3MudmFsdWUuZmluZCgobSkgPT4gbS5zY2hlbWEgPT0gbWV0cmljX3NjaGVtYSAmJiBtLnF1ZXJ5ID09IG1ldHJpY19xdWVyeSk7XG4gICAgaWYgKG1ldHJpYyA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYG1ldHJpYyA9ICR7bWV0cmljX3NjaGVtYX0sIHF1ZXJ5ID0gJHttZXRyaWNfcXVlcnl9IG5vdCBmb3VuZC5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljKTtcbiAgICAvLyBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNldF90aW1lc2VyaWVzX2dyb3VwcyhsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG4gICAgLy8gbW9kYWxfdGltZXNlcmllcy52YWx1ZS5hZGRfdHNfZ3JvdXAodGltZXNlcmllc19ncm91cHNbMF0sIHRydWUpO1xuICAgIGFkZF90c19ncm91cCh0aW1lc2VyaWVzX2dyb3Vwc1swXSk7XG59O1xuXG5mdW5jdGlvbiBhZGRfdHNfZ3JvdXAodHNfZ3JvdXApIHtcbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNldF90aW1lc2VyaWVzX2dyb3VwcyhsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG4gICAgbW9kYWxfdGltZXNlcmllcy52YWx1ZS5hZGRfdHNfZ3JvdXAodHNfZ3JvdXAsIHRydWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZWxlY3RfbWV0cmljKG1ldHJpYykge1xuICAgIGlmIChtZXRyaWMuaXNfc25hcHNob3QgPT0gdHJ1ZSkge1xuICAgICAgICBsZXQgdXJsX3BhcmFtZXRlcnMgPSBtZXRyaWMuZmlsdGVycztcbiAgICAgICAgbGV0IHRpbWVzZXJpZXNfdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZXNlcmllc19ncm91cHNcIiwgdXJsX3BhcmFtZXRlcnMpO1xuICAgICAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwoaHR0cF9wcmVmaXgsIHRpbWVzZXJpZXNfdXJsX3BhcmFtcyk7XG4gICAgICAgIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZSA9IHRpbWVzZXJpZXNVdGlscy5nZXRHcm91cE9wdGlvbk1vZGUobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIsIHVybF9wYXJhbWV0ZXJzKSk7XG4gICAgICAgIGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgbG9hZF9zZWxlY3RlZF9tZXRyaWNfcGFnZV9zdGF0c19kYXRhKCk7XG4gICAgICAgIHJlZnJlc2hfbWV0cmljcyhmYWxzZSk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3NlbGVjdGVkX21ldHJpY19wYWdlX3N0YXRzX2RhdGEoKSB7XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgZ2V0X3NlbGVjdGVkX3RpbWVzZXJpZXNfZ3JvdXBzKCk7XG4gICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gZXBvY2hfY2hhbmdlKG5ld19lcG9jaCkge1xuICAgIGxldCBwdXNoX2N1c3RvbV9tZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUubGFiZWwgPT0gY3VzdG9tX21ldHJpYy5sYWJlbDtcbiAgICBsb2FkX3BhZ2Vfc3RhdHNfZGF0YShsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCwgdHJ1ZSwgZmFsc2UsIG5ld19lcG9jaC5yZWZyZXNoX2RhdGEpO1xuICAgIHJlZnJlc2hfdG9wX3RhYmxlKCk7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoYXJ0X3JlbG9hZGVkKGNoYXJ0X29wdGlvbnMpIHtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9zbmFwc2hvdCgpIHtcbiAgICBtb2RhbF9zbmFwc2hvdC52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbWFuYWdlX3RpbWVzZXJpZXMoKSB7XG4gICAgaWYgKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbW9kYWxfdGltZXNlcmllcy52YWx1ZS5zaG93KGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gY2FsbGVkIGJ5IENoYXJ0IGNvbXBvbmVudCB0byBkcmF3IG9yIHVwZGF0ZSB0aGF0IHJldHVybiBjaGFydCBvcHRpb25zLlxuICoqL1xuZnVuY3Rpb24gZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKGNoYXJ0X2luZGV4KSB7XG4gICAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICAgIH1cbn1cblxubGV0IGNhY2hlX3NuYXBzaG90cyA9IG51bGw7XG5mdW5jdGlvbiByZWZyZXNoX3NuYXBzaG90cygpIHtcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmxhYmVsID09IGN1c3RvbV9tZXRyaWMubGFiZWw7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpIHtcbiAgICBtZXRyaWNzLnZhbHVlID0gYXdhaXQgZ2V0X21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCBmb3JjZV9yZWZyZXNoKTtcbiAgICBpZiAocHVzaF9jdXN0b21fbWV0cmljKSB7XG4gICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IGN1c3RvbV9tZXRyaWM7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseV9tb2RhbF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfZ3JvdXBzKSB7XG4gICAgcmVmcmVzaF9tZXRyaWNzKHRydWUpO1xuICAgIGF3YWl0IGxvYWRfcGFnZV9zdGF0c19kYXRhKHRpbWVzZXJpZXNfZ3JvdXBzLCB0cnVlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGUoKSB7XG4gICAgbG9hZF9wYWdlX3N0YXRzX2RhdGEobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQsIGZhbHNlLCBmYWxzZSk7XG59XG5cbmxldCB0c19jaGFydHNfb3B0aW9ucztcbi8qIFRoaXMgZnVuY3Rpb24gbG9hZCB0aGUgY2hhcnQgZGF0YSBhbmQgb3B0aW9ucywgZG9pbmcgdGhlIHJlcXVlc3QgYW5kIHRoZW4gc2V0dGluZyB0aGUgb3B0aW9ucyAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHJlbG9hZF9jaGFydHNfZGF0YSwgcmVsb2FkX3RvcF90YWJsZV9vcHRpb25zLCByZWZyZXNoZWRfdGltZV9pbnRlcnZhbCkge1xuICAgIC8qIEdldCB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5IGZvciB0aGUgcmVxdWVzdCwgbGlrZSBlcG9jaCBlY2MuICovXG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHRzX2NvbXBhcmUgPSBnZXRfdHNfY29tcGFyZShzdGF0dXMpO1xuICAgIGlmIChyZWxvYWRfY2hhcnRzX2RhdGEpIHtcbiAgICAgICAgLyogRG8gdGhlIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmQ7IHRoZSBhbnN3ZXIgaXMgZm9ybWF0dGVkIGFzXG4gICAgICAgICAqICBbICBcbiAgICAgICAgICogICAgICB7ICAgXG4gICAgICAgICAqICAgICAgICAgIG1ldGFkYXRhOiB7IC4uLiB9ICAgICAgIC8vIENvbnRhaW5pbmcgdmFyaW91cyBpbmZvIHJlZ2FyZGluZyB0aGUgc2VyaWVzIHJldHVybmVkXG4gICAgICAgICAqICAgICAgICAgIHNlcmllczogeyAuLi4gfSAgICAgICAgIC8vIENvbnRhaW5pbmcgdGhlIHNlcmllcyB3aXRoIHRoZSBkYXRhLCBsYWJlbHMgYW5kIHN0YXRpc3RpY3NcbiAgICAgICAgICogICAgICB9XG4gICAgICAgICAqICBdXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGltZXNlcmllc19ncm91cHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGltZXNlcmllc19ncm91cHMgPSBbXTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkVtcHR5IHRpbWVzZXJpZXNfZ3JvdXBzIHJlcXVlc3RcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHNfY2hhcnRzX29wdGlvbnMgPSBhd2FpdCB0aW1lc2VyaWVzVXRpbHMuZ2V0VHNDaGFydHNPcHRpb25zKGh0dHBfcHJlZml4LCBzdGF0dXMsIHRzX2NvbXBhcmUsIHRpbWVzZXJpZXNfZ3JvdXBzLCBwcm9wcy5pc19udG9wX3Bybyk7XG4gICAgfVxuXG4gICAgLyogVXBkYXRlIHRpbWVzZXJpZXMgbGFiZWwgdG8gZGlzcGxheSAqL1xuICAgIHNldF90aW1lc2VyaWVzX2dyb3Vwc19zb3VyY2VfbGFiZWwodGltZXNlcmllc19ncm91cHMsIHRzX2NoYXJ0c19vcHRpb25zKTtcblxuICAgIC8qIEZvcm1hdCB0aGUgb3B0aW9ucyBmb3IgdGhlIHRpbWVzZXJpZXMgbGlicmFyeSAqL1xuICAgIGxldCBjaGFydHNfb3B0aW9ucyA9IHRpbWVzZXJpZXNVdGlscy50c0FycmF5VG9PcHRpb25zQXJyYXkodHNfY2hhcnRzX29wdGlvbnMsIHRpbWVzZXJpZXNfZ3JvdXBzLCBjdXJyZW50X2dyb3Vwc19vcHRpb25zX21vZGUudmFsdWUsIHRzX2NvbXBhcmUpO1xuICAgIGlmIChyZWZyZXNoZWRfdGltZV9pbnRlcnZhbCkge1xuICAgICAgICB1cGRhdGVfY2hhcnRzKGNoYXJ0c19vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRfY2hhcnRzX29wdGlvbnNfaXRlbXMoY2hhcnRzX29wdGlvbnMpO1xuICAgIH1cbiAgICBzZXRfc3RhdHNfcm93cyh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIHN0YXR1cyk7XG4gICAgaWYgKHJlbG9hZF90b3BfdGFibGVfb3B0aW9ucykge1xuICAgICAgICBzZXRfdG9wX3RhYmxlX29wdGlvbnModGltZXNlcmllc19ncm91cHMsIHN0YXR1cyk7XG4gICAgfVxuICAgIC8vIHNldCBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBkX2xvYWRlZFxuICAgIGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgLy8gdXBkYXRlIHVybCBwYXJhbXNcbiAgICB1cGRhdGVfdXJsX3BhcmFtcygpO1xufVxuXG4vKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgc2V0IHRoZSBsYWJlbCBvZiB0aGUgdGltZXNlcmllczsgaWYgYXZhaWxhYmxlIGl0IHNob3VsZCBiZVxuICogZm91bmQgaW4gcmVzcG9uc2UubWV0YWRhdGEubGFiZWwgZmllbGRcbiAqL1xuZnVuY3Rpb24gc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX3NvdXJjZV9sYWJlbCh0aW1lc2VyaWVzX2dyb3VwcywgdHNfY2hhcnRzX29wdGlvbnMpIHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCwgaSkgPT4ge1xuICAgICAgICBsZXQgdHNfb3B0aW9ucyA9IHRzX2NoYXJ0c19vcHRpb25zW2ldO1xuICAgICAgICBsZXQgbGFiZWwgPSB0c19vcHRpb25zPy5tZXRhZGF0YT8ubGFiZWw7XG4gICAgICAgIGlmIChsYWJlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgc291cmNlX2luZGV4ID0gdGltZXNlcmllc1V0aWxzLmdldE1haW5Tb3VyY2VEZWZJbmRleCh0c19ncm91cCk7XG4gICAgICAgICAgICBsZXQgc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W3NvdXJjZV9pbmRleF07XG4gICAgICAgICAgICBzb3VyY2UubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfdXJsX3BhcmFtcygpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIsIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZS52YWx1ZSk7XG4gICAgbWV0cmljc01hbmFnZXIuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybChsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9jaGFydHMoY2hhcnRzX29wdGlvbnMpIHtcbiAgICBjaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25zLCBpKSA9PiB7XG4gICAgICAgIC8vIGNoYXJ0cy52YWx1ZVtpXS51cGRhdGVfY2hhcnRfb3B0aW9ucyh7IHlheGlzOiBvcHRpb25zLnlheGlzIH0pO1xuICAgICAgICBjaGFydHMudmFsdWVbaV0udXBkYXRlX2NoYXJ0X3NlcmllcyhvcHRpb25zPy5zZXJpZSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldF9jaGFydHNfb3B0aW9uc19pdGVtcyhjaGFydHNfb3B0aW9ucykge1xuICAgIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlID0gY2hhcnRzX29wdGlvbnMubWFwKChvcHRpb25zLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IG50b3BuZ191dGlsaXR5LmdldF9yYW5kb21fc3RyaW5nKCksXG4gICAgICAgICAgICBjaGFydF9vcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRfdHNfY29tcGFyZShzdGF0dXMpIHtcbiAgICAvLyA1bSwgMzBtLCAxaCwgMWQsIDF3LCAxTSwgMVlcbiAgICBsZXQgciA9IE51bWJlci5wYXJzZUludCgoc3RhdHVzLmVwb2NoX2VuZCAtIHN0YXR1cy5lcG9jaF9iZWdpbikgLyA2MCk7XG4gICAgaWYgKHIgPD0gNSkge1xuICAgICAgICByZXR1cm4gXCI1bVwiO1xuICAgIH0gZWxzZSBpZiAociA8PSAzMCkge1xuICAgICAgICByZXR1cm4gXCIzMG1cIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjApIHtcbiAgICAgICAgcmV0dXJuIFwiMWhcIjtcbiAgICB9IGVsc2UgaWYgKHIgPD0gNjAgKiAyNCkge1xuICAgICAgICByZXR1cm4gXCIxZFwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0ICogNykge1xuICAgICAgICByZXR1cm4gXCIxd1wiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0ICogMzApIHtcbiAgICAgICAgcmV0dXJuIFwiMU1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCIxWVwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3RvcF90YWJsZV91cmwodHNfZ3JvdXAsIHRhYmxlX3ZhbHVlLCB0YWJsZV92aWV3LCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHN0YXR1cykge1xuICAgIGlmIChzdGF0dXMgPT0gbnVsbCkge1xuICAgICAgICBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIH1cbiAgICBsZXQgdHNfcXVlcnkgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0VHNRdWVyeSh0c19ncm91cCwgdHJ1ZSwgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICBsZXQgdiA9IHRhYmxlX3ZhbHVlO1xuICAgIGxldCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0LyR7dn0vdG9wL3RzX3N0YXRzLmx1YWA7XG4gICAgLy90b2RvOiBnZXQgdHNfcXVlcnlcbiAgICBsZXQgcF9vYmogPSB7XG4gICAgICAgIHpvb206ICc1bScsXG4gICAgICAgIHRzX3F1ZXJ5LFxuICAgICAgICAvLyB0c19xdWVyeTogYGlmaWQ6JHtudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpfWAsXG4gICAgICAgIGVwb2NoX2JlZ2luOiBgJHtzdGF0dXMuZXBvY2hfYmVnaW59YCxcbiAgICAgICAgZXBvY2hfZW5kOiBgJHtzdGF0dXMuZXBvY2hfZW5kfWAsXG4gICAgICAgIGRldGFpbF92aWV3OiBgJHt0YWJsZV92aWV3fWAsXG4gICAgICAgIG5ld19jaGFydHM6IGB0cnVlYFxuICAgIH07XG5cbiAgICBsZXQgcF91cmxfcmVxdWVzdCA9IG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChwX29iaiwgJycpO1xuICAgIHJldHVybiBgJHtkYXRhX3VybH0/JHtwX3VybF9yZXF1ZXN0fWA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdG9wX3RhYmxlKCkge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgbGV0IHRhYmxlX2NvbmZpZyA9IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZT8udGFibGVfY29uZmlnX2RlZjtcbiAgICBpZiAodGFibGVfY29uZmlnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgLy8gTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgIGxldCBkYXRhX3VybCA9IGdldF90b3BfdGFibGVfdXJsKHRhYmxlX2NvbmZpZy50c19ncm91cCwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi50YWJsZV92YWx1ZSwgdGFibGVfY29uZmlnLnRhYmxlX2RlZi52aWV3LCB0YWJsZV9jb25maWcudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KTtcbiAgICB0b3BfdGFibGVfcmVmLnZhbHVlLnVwZGF0ZV91cmwoZGF0YV91cmwpO1xuICAgIHRvcF90YWJsZV9yZWYudmFsdWUucmVsb2FkKCk7XG4gICAgLy8gTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuXG59XG5cbmNvbnN0IHRvcF90YWJsZV9vcHRpb25zID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX3RvcF90YWJsZSA9IHJlZih7fSk7XG5mdW5jdGlvbiBzZXRfdG9wX3RhYmxlX29wdGlvbnModGltZXNlcmllc19ncm91cHMsIHN0YXR1cykge1xuICAgIGlmICghcHJvcHMuaXNfbnRvcF9wcm8pIHsgcmV0dXJuOyB9XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgdGltZXNlcmllc19ncm91cHMgPSBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZDtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG4gICAgICAgIHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgfVxuXG4gICAgbGV0IHNvdXJjZXNfdHlwZXNfdGFibGVzID0gbWV0cmljc01hbmFnZXIuc291cmNlc190eXBlc190YWJsZXM7XG4gICAgbGV0IHRzX2dyb3VwX2RpY3QgPSB7fTsgLy8gZGljdGlvbmFyeSB3aXRoIDEgdHNfZ3JvdXAgZm9yIGVhY2ggKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXkpXG4gICAgdGltZXNlcmllc19ncm91cHMuZm9yRWFjaCgodHNfZ3JvdXApID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZV90eXBlID0gdHNfZ3JvdXAuc291cmNlX3R5cGU7XG4gICAgICAgIC8vIGxldCBzb3VyY2VfdHlwZV90YWJsZXMgPSBzb3VyY2VzX3R5cGVzX3RhYmxlc1tzb3VyY2VfdHlwZS5pZF07XG4gICAgICAgIC8vIGxldCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QgPSBzb3VyY2VfdHlwZV90YWJsZXMudGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0XG5cbiAgICAgICAgbGV0IGlkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHRzX2dyb3VwLnNvdXJjZV90eXBlLCB0c19ncm91cC5zb3VyY2VfYXJyYXkpO1xuICAgICAgICB0c19ncm91cF9kaWN0W2lkXSA9IHRzX2dyb3VwO1xuICAgIH0pO1xuICAgIGxldCB0b3BfdGFibGVfaWRfZGljdCA9IHt9O1xuICAgIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlID0gW107XG4gICAgZm9yIChsZXQgaWQgaW4gdHNfZ3JvdXBfZGljdCkge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSB0c19ncm91cF9kaWN0W2lkXTtcbiAgICAgICAgbGV0IG1haW5fc291cmNlX2luZGV4ID0gdGltZXNlcmllc1V0aWxzLmdldE1haW5Tb3VyY2VEZWZJbmRleCh0c19ncm91cCk7XG4gICAgICAgIGxldCBtYWluX3NvdXJjZSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVttYWluX3NvdXJjZV9pbmRleF07XG4gICAgICAgIGxldCBzb3VyY2VfdHlwZSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlO1xuICAgICAgICBsZXQgc291cmNlX3R5cGVfdGFibGVzID0gc291cmNlc190eXBlc190YWJsZXNbc291cmNlX3R5cGUuaWRdO1xuICAgICAgICBpZiAoc291cmNlX3R5cGVfdGFibGVzID09IG51bGwpIHsgY29udGludWU7IH1cblxuICAgICAgICBzb3VyY2VfdHlwZV90YWJsZXMuZm9yRWFjaCgodGFibGVfZGVmKSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5hYmxlc190YWJsZV92YWx1ZSA9IHByb3BzLnNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWRbdGFibGVfZGVmLnRhYmxlX3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChlbmFibGVzX3RhYmxlX3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgZW5hYmxlX3RhYmxlX2RlZiA9IGVuYWJsZXNfdGFibGVfdmFsdWVbdGFibGVfZGVmLnZpZXddO1xuICAgICAgICAgICAgaWYgKCFlbmFibGVfdGFibGVfZGVmKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCA9IHRhYmxlX2RlZi50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3RcblxuICAgICAgICAgICAgbGV0IGRhdGFfdXJsID0gZ2V0X3RvcF90YWJsZV91cmwodHNfZ3JvdXAsIHRhYmxlX2RlZi50YWJsZV92YWx1ZSwgdGFibGVfZGVmLnZpZXcsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc3RhdHVzKTtcbiAgICAgICAgICAgIGxldCB0YWJsZV9pZCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cF9pZCh0c19ncm91cC5zb3VyY2VfdHlwZSwgdHNfZ3JvdXAuc291cmNlX2FycmF5LCBudWxsLCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QsIHRydWUpO1xuICAgICAgICAgICAgdGFibGVfaWQgPSBgJHt0YWJsZV9pZH1fJHt0YWJsZV9kZWYudmlld31gO1xuICAgICAgICAgICAgaWYgKHRvcF90YWJsZV9pZF9kaWN0W3RhYmxlX2lkXSAhPSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdG9wX3RhYmxlX2lkX2RpY3RbdGFibGVfaWRdID0gdHJ1ZTtcblxuICAgICAgICAgICAgbGV0IHZhbHVlID0gYCR7dGFibGVfZGVmLnRhYmxlX3ZhbHVlfV8ke3RhYmxlX2RlZi52aWV3fV8ke3RhYmxlX2lkfWA7XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgICAgICBpZiAodGFibGVfZGVmLmZfZ2V0X2xhYmVsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IGAke3RhYmxlX2RlZi50aXRsZX0gLSAke3NvdXJjZV90eXBlLmxhYmVsfSAke21haW5fc291cmNlLmxhYmVsfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gdGFibGVfZGVmLmZfZ2V0X2xhYmVsKHRzX2dyb3VwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFibGVfY29uZmlnX2RlZiA9IHtcbiAgICAgICAgICAgICAgICB0c19ncm91cCxcbiAgICAgICAgICAgICAgICB0YWJsZV9kZWYsXG4gICAgICAgICAgICAgICAgLy8gdGFibGVfdmFsdWU6IHRhYmxlX2RlZi50YWJsZV92YWx1ZSxcbiAgICAgICAgICAgICAgICAvLyB0YWJsZV92aWV3OiB0YWJsZV9kZWYudmlldyxcblxuICAgICAgICAgICAgICAgIHRhYmxlX2J1dHRvbnM6IFtdLFxuICAgICAgICAgICAgICAgIGRhdGFfdXJsLFxuICAgICAgICAgICAgICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFibGVfY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcjogW1t0YWJsZV9kZWYuZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJ11dLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5EZWZzOiB0YWJsZV9kZWYuY29sdW1uRGVmcyB8fCBbXSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gaXQgc2hvdWxkIGJlIGhlcmUgaW4gdGhpcyBpbnN0YW5jZSB0aGUgdnVldGlmeSBvYmplY3Qgd2l0aCBpdHMgcHJvcGVydGllc1xuICAgICAgICAgICAgdGFibGVfY29uZmlnX2RlZi5jb2x1bW5zX2NvbmZpZyA9IHRhYmxlX2RlZi5jb2x1bW5zLm1hcCgoY29sdW1uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbmRlcl9pZl9jb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICBpc19oaXN0b3J5X2VuYWJsZWQ6IHByb3BzLmlzX2hpc3RvcnlfZW5hYmxlZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGV0IGMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICFjb2x1bW4ucmVuZGVyX2lmIHx8IGNvbHVtbi5yZW5kZXJfaWYocmVuZGVyX2lmX2NvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYy5jbGFzc05hbWUgPT0gbnVsbCkgeyBjLmNsYXNzTmFtZSA9IFwidGV4dC1ub3dyYXBcIjsgfVxuICAgICAgICAgICAgICAgIGlmIChjLnJlc3BvbnNpdmVQcmlvcml0eSA9PSBudWxsKSB7IGMucmVzcG9uc2l2ZVByaW9yaXR5ID0gMTsgfVxuICAgICAgICAgICAgICAgIGMucmVuZGVyID0gY29sdW1uLnJlbmRlci5iaW5kKHtcbiAgICAgICAgICAgICAgICAgICAgYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIGFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzX3R5cGVzX2VuYWJsZWQ6IHByb3BzLnNvdXJjZXNfdHlwZXNfZW5hYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5OiB0c19ncm91cC5zb3VyY2VfYXJyYXksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBvcHRpb24gPSB7IHZhbHVlLCBsYWJlbCwgdGFibGVfY29uZmlnX2RlZiB9O1xuICAgICAgICAgICAgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUucHVzaChvcHRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSAhPSBudWxsICYmIHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlID09IHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZS52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlbGVjdGVkX3RvcF90YWJsZS52YWx1ZSA9IHRvcF90YWJsZV9vcHRpb25zLnZhbHVlLmZpbmQoKG9wdGlvbikgPT4gb3B0aW9uLnRhYmxlX2NvbmZpZ19kZWYuZGVmYXVsdCA9PSB0cnVlKTtcbiAgICBpZiAoc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID0gdG9wX3RhYmxlX29wdGlvbnMudmFsdWVbMF07XG4gICAgfVxufVxuXG5sZXQgc3RhdHNfY29sdW1ucyA9IFtcbiAgICB7IGlkOiBcIm1ldHJpY1wiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1ldHJpY1wiKSwgdmE6IHRydWV9LFxuICAgIHsgaWQ6IFwiYXZnXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMuYXZlcmFnZVwiKSwgY2xhc3M6IFwidGV4dC1lbmRcIiwgdmE6IHRydWUgfSxcbiAgICB7IGlkOiBcInBlcmNfOTVcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy45NV9wZXJjXCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogdHJ1ZSB9LFxuICAgIHsgaWQ6IFwibWF4XCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMubWF4XCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogdHJ1ZX0sXG4gICAgeyBpZDogXCJtaW5cIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5taW5cIiksIGNsYXNzOiBcInRleHQtZW5kXCIsIHZhOiB0cnVlIH0sXG4gICAgeyBpZDogXCJ0b3RhbFwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLnRvdGFsXCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogZmFsc2UgfSxcbl07XG5cbmNvbnN0IHN0YXRzX3Jvd3MgPSByZWYoW10pO1xuXG5mdW5jdGlvbiBzZXRfc3RhdHNfcm93cyh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIHN0YXR1cykge1xuICAgIGNvbnN0IGV4dGVuZF9zZXJpZV9uYW1lID0gdHNfY2hhcnRzX29wdGlvbnMubGVuZ3RoID4gMTtcbiAgICBlbmFibGVfc3RhdHNfdGFibGUudmFsdWUgPSB0aW1lc2VyaWVzX2dyb3Vwcy5tYXAoKHRzX2dyb3VwKSA9PiAhdHNfZ3JvdXAuc291cmNlX3R5cGUuZGlzYWJsZV9zdGF0cykucmVkdWNlKChyZXMsIGVsKSA9PiByZXMgfCBlbCwgZmFsc2UpO1xuICAgIGlmICghZW5hYmxlX3N0YXRzX3RhYmxlLnZhbHVlKSB7IHJldHVybjsgfVxuICAgIGNvbnN0IGZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlID0gKHR5cGUpID0+IHtcbiAgICAgICAgbGV0IG1hcF90eXBlID0ge1xuICAgICAgICAgICAgXCJicHNcIjogXCJieXRlc1wiLFxuICAgICAgICAgICAgXCJmcHNcIjogXCJmbG93c1wiLFxuICAgICAgICAgICAgXCJhbGVydHBzXCI6IFwiYWxlcnRzXCIsXG4gICAgICAgICAgICBcImhpdHNzXCI6IFwiaGl0c1wiLFxuICAgICAgICAgICAgXCJwcHNcIjogXCJwYWNrZXRzXCIsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChtYXBfdHlwZVt0eXBlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwX3R5cGVbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfTtcbiAgICBzdGF0c19yb3dzLnZhbHVlID0gW107XG4gICAgdHNfY2hhcnRzX29wdGlvbnMuZm9yRWFjaCgob3B0aW9ucywgaSkgPT4ge1xuICAgICAgICBsZXQgdHNfZ3JvdXAgPSB0aW1lc2VyaWVzX2dyb3Vwc1tpXTtcbiAgICAgICAgaWYgKHRzX2dyb3VwLnNvdXJjZV90eXBlLmRpc2FibGVfc3RhdHMgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICAgICAgb3B0aW9ucy5zZXJpZXM/LmZvckVhY2goKHMsIGopID0+IHtcbiAgICAgICAgICAgIGxldCB0c19pZCA9IHRpbWVzZXJpZXNVdGlscy5nZXRTZXJpZUlkKHMpO1xuICAgICAgICAgICAgbGV0IHNfbWV0YWRhdGEgPSB0c19ncm91cC5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKHRzX2dyb3VwLm1ldHJpYy5tZWFzdXJlX3VuaXQpO1xuICAgICAgICAgICAgbGV0IHRzX3N0YXRzO1xuICAgICAgICAgICAgbGV0IG5hbWUgPSBzX21ldGFkYXRhLmxhYmVsO1xuICAgICAgICAgICAgaWYgKHNfbWV0YWRhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgLyogU2tpcCBpbiBjYXNlIGl0J3MgcmVxdWVzdGVkIHRvIGhpZGUgdGhlIFRpbWVzZXJpZSAqL1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzX21ldGFkYXRhLnVzZV9zZXJpZV9uYW1lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM/LmRhdGEubGVuZ3RoID4gaikge1xuICAgICAgICAgICAgICAgIHRzX3N0YXRzID0gcy5zdGF0aXN0aWNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRzX3N0YXRzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5leHRfbGFiZWwpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcy5leHRfbGFiZWxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5hbWUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVOYW1lKG5hbWUsIHRzX2lkLCB0c19ncm91cCwgZXh0ZW5kX3NlcmllX25hbWUpO1xuICAgICAgICAgICAgbGV0IHRvdGFsX2Zvcm1hdHRlcl90eXBlID0gZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUodHNfZ3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCk7XG4gICAgICAgICAgICBsZXQgdG90YWxfZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKHRvdGFsX2Zvcm1hdHRlcl90eXBlKTtcbiAgICAgICAgICAgIGxldCByb3cgPSB7XG4gICAgICAgICAgICAgICAgbWV0cmljOiBuYW1lLFxuICAgICAgICAgICAgICAgIC8vIHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodG90YWwpLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbF9mb3JtYXR0ZXIodHNfc3RhdHMudG90YWwpLFxuICAgICAgICAgICAgICAgIHBlcmNfOTU6IGZvcm1hdHRlcih0c19zdGF0c1tcIjk1dGhfcGVyY2VudGlsZVwiXSksXG4gICAgICAgICAgICAgICAgYXZnOiBmb3JtYXR0ZXIodHNfc3RhdHMuYXZlcmFnZSksXG4gICAgICAgICAgICAgICAgbWF4OiBmb3JtYXR0ZXIodHNfc3RhdHMubWF4X3ZhbCksXG4gICAgICAgICAgICAgICAgbWluOiBmb3JtYXR0ZXIodHNfc3RhdHMubWluX3ZhbCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdHNfcm93cy52YWx1ZS5wdXNoKHJvdyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gICAgcmV0dXJuIGNvbC5sYWJlbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KSB7XG4gICAgbGV0IGxhYmVsID0gcm93W2NvbC5pZF07XG4gICAgcmV0dXJuIGxhYmVsO1xufVxuXG5mdW5jdGlvbiBqdW1wX3RvX2hpc3RvcmljYWxfZmxvd3MoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHBhcmFtcyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCBoaXN0b3JpY2FsX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChoaXN0b3JpY2FsX3VybCk7XG59XG5cbmNvbnN0IG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiA9IHJlZihudWxsKTtcbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfZG93bmxvYWRfZmlsZSgpIHtcbiAgICBpZiAoIXRzX2NoYXJ0c19vcHRpb25zPy5sZW5ndGgpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHRzX2dyb3VwID0gbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWRbMF07XG4gICAgbGV0IGZpbGVuYW1lID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllTmFtZShudWxsLCBudWxsLCB0c19ncm91cCk7XG4gICAgbW9kYWxfZG93bmxvYWRfZmlsZS52YWx1ZS5zaG93KGZpbGVuYW1lKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRfY2hhcnRfcG5nKGZpbGVuYW1lKSB7XG4gICAgbGV0IGNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UgPSBjaGFydHMudmFsdWUubWFwKGFzeW5jIChjaGFydCkgPT4ge1xuICAgICAgICBsZXQgY2FudmFzID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGNoYXJ0LmdldF9pbWFnZShjYW52YXMpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY2FudmFzLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNhbnZhcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcbiAgICBsZXQgY2hhcnRfaW1hZ2VfYXJyYXkgPSBhd2FpdCBQcm9taXNlLmFsbChjaGFydF9pbWFnZV9hcnJheV9wcm9taXNlKTtcbiAgICBjaGFydF9pbWFnZV9hcnJheS5mb3JFYWNoKChpbWFnZSkgPT4ge1xuICAgICAgICBoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pO1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBsZXQgY2FudmFzX2NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjYW52YXMud2lkdGggPSBjaGFydF9pbWFnZV9hcnJheVswXS53aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGhlaWdodCA9IDA7XG4gICAgY2hhcnRfaW1hZ2VfYXJyYXkuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICAgICAgY2FudmFzX2NvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCBoZWlnaHQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICAgICAgICBoZWlnaHQgKz0gaW1hZ2UuaGVpZ2h0O1xuICAgIH0pO1xuICAgIG50b3BuZ191dGlsaXR5LmRvd25sb2FkX1VSSShjYW52YXMudG9EYXRhVVJMKCksIGZpbGVuYW1lKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmlubGluZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4uc2VsZWN0Mi1zaXplIHtcbiAgICBtaW4td2lkdGg6IDE4cmVtO1xufVxuPC9zdHlsZT5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbWItMlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBjYXJkLWhlYWRlci10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRhYiBpbiB0YWJfbGlzdFwiPlxuXHQgICAgICA8dGVtcGxhdGUgdi1pZj1cInRhYi5hY3RpdmVcIj5cblx0ICAgICAgICA8bGkgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogdGFiLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuICAgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG4gICAgICAgICAgPC9saT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cblx0ICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cblx0ICAgICAgICA8YSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuXHQgICAgICAgIDwvYT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGFiX2xpc3Q6IEFycmF5LFxuICB9LFxuICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBjcmVhdGVkKCkge1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRfdGFiOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHRtcCA9IG51bGw7XG4gICAgdGhpcy4kcHJvcHMudGFiX2xpc3QuZm9yRWFjaChmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKHRhYi5hY3RpdmUpIHtcbiAgICAgICAgdG1wID0gdGFiXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9sZF90YWIgPSB0bXAgfHwgdGhpcy4kcHJvcHMudGFiX2xpc3RbMF07XG5cbiAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoYW5nZV90YWI6IGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYoKHRhYi5pZCAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5pZCAhPSB0YWIuaWQpIHx8XG4gICAgICAgICAodGFiLm5hbWUgIT0gbnVsbCAmJiB0aGlzLm9sZF90YWIubmFtZSAhPSB0YWIubmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbGRfdGFiID0gdGFiXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCB0YWIpXG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG48L3NjcmlwdD5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXIgbWItMlwiPlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFicyBjYXJkLWhlYWRlci10YWJzXCIgcm9sZT1cInRhYmxpc3RcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInRhYiBpbiB0YWJfbGlzdFwiPlxuXHQgICAgICA8dGVtcGxhdGUgdi1pZj1cInRhYi5hY3RpdmVcIj5cblx0ICAgICAgICA8bGkgQGNsaWNrPVwiY2hhbmdlX3RhYih0YWIpXCIgOmNsYXNzPVwieyAnYWN0aXZlJzogdGFiLmFjdGl2ZSB9XCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuICAgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG4gICAgICAgICAgPC9saT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cblx0ICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cblx0ICAgICAgICA8YSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiBocmVmPVwiI1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIj5cblx0ICAgICAgICAgIHt7IHRhYi50aXRsZSB9fVxuXHQgICAgICAgIDwvYT5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgY29tcG9uZW50czoge1xuICB9LFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgdGFiX2xpc3Q6IEFycmF5LFxuICB9LFxuICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICBjcmVhdGVkKCkge1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbGRfdGFiOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHRtcCA9IG51bGw7XG4gICAgdGhpcy4kcHJvcHMudGFiX2xpc3QuZm9yRWFjaChmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmKHRhYi5hY3RpdmUpIHtcbiAgICAgICAgdG1wID0gdGFiXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLm9sZF90YWIgPSB0bXAgfHwgdGhpcy4kcHJvcHMudGFiX2xpc3RbMF07XG5cbiAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoYW5nZV90YWI6IGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYoKHRhYi5pZCAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5pZCAhPSB0YWIuaWQpIHx8XG4gICAgICAgICAodGFiLm5hbWUgIT0gbnVsbCAmJiB0aGlzLm9sZF90YWIubmFtZSAhPSB0YWIubmFtZSkpIHtcbiAgICAgICAgdGhpcy5vbGRfdGFiID0gdGFiXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCB0YWIpXG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGVfZGVsZXRlfX08L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgICB7e2JvZHlfZGVsZXRlfX1cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKCdkZWxldGUnKX19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZScsJ2RlbGV0ZV9hbGwnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xubGV0IGJvZHlfZGVsZXRlID0gcmVmKFwiXCIpO1xubGV0IHRpdGxlX2RlbGV0ZSA9IHJlZihcIlwiKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGJvZHk6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxufSk7XG5jb25zdCBzaG93ID0gKGJvZHksIHRpdGxlKSA9PiB7XG5cbiAgaWYgKGJvZHkgIT0gbnVsbCAmJiB0aXRsZSAhPSBudWxsKSB7XG5cbiAgICBib2R5X2RlbGV0ZS52YWx1ZSA9IGJvZHk7XG4gICAgdGl0bGVfZGVsZXRlLnZhbHVlID0gdGl0bGU7XG4gIH0gZWxzZSB7XG5cbiAgICBib2R5X2RlbGV0ZS52YWx1ZSA9IHByb3BzLmJvZHk7XG4gICAgdGl0bGVfZGVsZXRlLnZhbHVlID0gcHJvcHMudGl0bGU7XG4gIH1cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgZGVsZXRlXyA9ICgpID0+IHtcbiAgICBlbWl0KCdkZWxldGUnKTtcblxuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2Fzc2V0X2ZhbWlseScsIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuYXNzZXRfZmFtaWx5KTtcbiAgICB0aGlzLmFzc2V0X3RhYmxlX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2aWV3JykgfHwgJ2NlbnRyYWxpdHknO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5hc3NldF90YWJsZV90YWIgPT0gaS5pZClcbiAgICAgICAgaS5hY3RpdmUgPSB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9hc3NldF90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hc3NldF90YWJsZV90YWJcIiwgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfYXNzZXRzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBhc3NldF90YWJsZV90YWI6IG51bGwsXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLnRhYmxlX25vdGVfYXNzZXRfbWFwJyldLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cblxuICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogaGlzdG9yaWNhbF9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpIH0sXG4gICAgXSk7XG4gICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93LmVwb2NoX2VuZDtcbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZXBvY2hfYmVnaW47XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcl9pcH07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50X2lwfTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpXG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YCk7XG5cbn1cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbmsoXywgdHlwZSxyb3dEYXRhKTtcbiAgICAgIH1cbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5jbGllbnRcIiksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zZXJ2ZXJcIiksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9mYW1pbHlcIiksIG5hbWU6ICdmYW1pbHknLCBkYXRhOiAnZmFtaWx5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyA0IC8qIExhc3QgU2VlbiAqLywgJ2Rlc2MnIF1dIH1cbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cblxuICAvKiBDZW50cmFsaXR5IHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2VudHJhbGl0eScgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKVxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaG9zdFwiKSwgbmFtZTogJ2hvc3QnLCBkYXRhOiAnaG9zdCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS5sYWJlbCB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF90b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG5cbiAgXG4gIFxuICBsZXQgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDEgLyogVG90YWwgRWRnZXMgKi8sICdkZXNjJyBdXSB9XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG5cbiAgY29uc29sZS5sb2coY29uZmlnRGV2aWNlcylcbiAgY29uc29sZS5sb2coY2VudHJhbGl0eUNvbmZpZ0RldmljZXMpXG4gIFxuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwiYXNzZXRfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXNzZXRfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9hc3NldF9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfYXNzZXRfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9hc3NldHNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJhc3NldF9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmNvbnN0IGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gICAgTm90ZUxpc3RcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdhc3NldF9mYW1pbHknLCB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmFzc2V0X2ZhbWlseSk7XG4gICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdjZW50cmFsaXR5JztcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIGlmKHRoaXMuYXNzZXRfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfYXNzZXRfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiXCIsIGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0cycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgYXNzZXRfdGFibGVfdGFiOiBudWxsLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS50YWJsZV9ub3RlX2Fzc2V0X21hcCcpXSxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLnN0YW5kYXJkX3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdzdGFuZGFyZCcpLFxuICAgICAgICAgIGlkOiAnc3RhbmRhcmQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLmNlbnRyYWxpdHlfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ2NlbnRyYWxpdHknKSxcbiAgICAgICAgICBpZDogJ2NlbnRyYWxpdHknXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCwgaXRlbS5pZCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkgeyAgICAgIFxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSwgXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9hc3NldF8ke3RoaXMuYXNzZXRfdGFibGVfdGFifWBdO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIiZcIilbMF07XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIiZcIilbMF07XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5lcG9jaF9lbmQ7XG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmVwb2NoX2JlZ2luO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJfaXB9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudF9pcH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKVxuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWApO1xuXG59XG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IERhdGF0YWJsZVZ1ZS5hc3NldF90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9XG4gICAgfSwgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfZmFtaWx5XCIpLCBuYW1lOiAnZmFtaWx5JywgZGF0YTogJ2ZhbWlseScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubGFzdF9zZWVuXCIpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgNCAvKiBMYXN0IFNlZW4gKi8sICdkZXNjJyBdXSB9XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEubGFiZWwgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfdG90YWxfZWRnZXNcIiksIG5hbWU6ICd0b3RhbF9lZGdlcycsIGRhdGE6ICd0b3RhbF9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfaW5fZWRnZXNcIiksIG5hbWU6ICdpbl9lZGdlcycsIGRhdGE6ICdpbl9lZGdlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuYXNzZXRfb3V0X2VkZ2VzXCIpLCBuYW1lOiAnb3V0X2VkZ2VzJywgZGF0YTogJ291dF9lZGdlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICBdO1xuXG4gIFxuICBcbiAgbGV0IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyAxIC8qIFRvdGFsIEVkZ2VzICovLCAnZGVzYycgXV0gfVxuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuXG4gIGNvbnNvbGUubG9nKGNvbmZpZ0RldmljZXMpXG4gIGNvbnNvbGUubG9nKGNlbnRyYWxpdHlDb25maWdEZXZpY2VzKVxuICBcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkgPSBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwicGVyaW9kaWNpdHktdGFibGVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX3BlcmlvZGljaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCJcbiAgICAgICAgICAgIDpiYXNlX3VybD1cImJhc2VfdXJsXCJcbiAgICAgICAgICAgIDpiYXNlX3BhcmFtcz1cInVybF9wYXJhbXNcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc19hZG1pblwiIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgTm90ZUxpc3RcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkgeyAgXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBiYXNlX3VybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UudGFibGVfbm90ZV9wZXJpb2RpY2l0eV9tYXAnKV0sXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG4gICAgbGV0IGxpdmVfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImxpdmVfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGxpdmVfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogbGl2ZV9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2xpdmVfZmxvd3MnKSB9LFxuXG4gICAgXSk7XG4gICAgXG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgcGFnZTogdGhpcy51cmxfcGFyYW1zLnBhZ2UsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpO1xuICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTsgIFxuICAgICAgfSAgICAgIFxuICAgIH0sXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfcGVyaW9kaWNpdHlgXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmZpcnN0X3NlZW47XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5sYXN0X3NlZW4uZXBvY2hfZW5kO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJ9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudH07ZXFgLFxuICAgIHNydl9wb3J0OiBgJHtwb3J0fTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG5cbn1cblxuZnVuY3Rpb24gbGl2ZV9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzZXJ2ZXI6IGAke3NlcnZlcn1gLFxuICAgIGNsaWVudDogYCR7Y2xpZW50fWAsXG4gICAgcG9ydDogYCR7cG9ydH1gLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh1cmxfcGFyYW1zKVxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSBudWxsXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgbmFtZTogJ2FjdGlvbnMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UubGFzdF9zZWVuJyksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuY2xpZW50JyksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnNlcnZlcicpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5wb3J0JyksIG5hbWU6ICdwb3J0JywgZGF0YTogJ3BvcnQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnByb3RvY29sJyksIG5hbWU6ICdsN3Byb3RvJywgZGF0YTogJ3Byb3RvY29sJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZpcnN0X3NlZW4nKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ2R1cmF0aW9uJyksIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgIHJlc3BvbnNpdmVQcmlvcml0eTogMywgb3JkZXJhYmxlOiB0cnVlLCAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLm9ic2VydmF0aW9ucycpLCBuYW1lOiAnb2JzZXJ2YXRpb25zJywgZGF0YTogJ29ic2VydmF0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5mcmVxdWVuY3knKSwgbmFtZTogJ2ZyZXF1ZW5jeScsIGRhdGE6ICdmcmVxdWVuY3knLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogdHJ1ZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiA0LCByZW5kZXI6ICggZGF0YSwgdHlwZSwgcm93ICkgPT4ge1xuICAgICAgICByZXR1cm4gKHR5cGUgPT0gXCJzb3J0XCIgfHwgdHlwZSA9PSAndHlwZScpID8gZGF0YSA6IGRhdGEgKyBcIiBzZWNcIjsgXG4gICAgICB9XG4gICAgfSxcbiAgXTtcblxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDggLyogT2JzZXJ2YXRpb24gY29sdW1uICovXG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFBlcmlvZGljaXR5IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJwZXJpb2RpY2l0eS10YWJsZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfcGVyaW9kaWNpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIlxuICAgICAgICAgICAgOmJhc2VfdXJsPVwiYmFzZV91cmxcIlxuICAgICAgICAgICAgOmJhc2VfcGFyYW1zPVwidXJsX3BhcmFtc1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdi1pZj1cImlzX2FkbWluXCIgdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7ICBcbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICBcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9wZXJpb2RpY2l0eV90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGJhc2VfdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZCcpLFxuICAgICAgYm9keV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWRfbWVzc2FnZScpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS50YWJsZV9ub3RlX3BlcmlvZGljaXR5X21hcCcpXSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cbiAgICBsZXQgbGl2ZV9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwibGl2ZV9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgbGl2ZV9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBsaXZlX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignbGl2ZV9mbG93cycpIH0sXG5cbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9wZXJpb2RpY2l0eWBdO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3QgY2xpZW50ID0gY2xpZW50X2lwLnN1YnN0cmluZygwLCBjbGllbnRfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IHNlcnZlciA9IHNlcnZlcl9pcC5zdWJzdHJpbmcoMCwgc2VydmVyX2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBwb3J0ID0gcm93LnBvcnQ7XG5cbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZmlyc3Rfc2VlbjtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93Lmxhc3Rfc2Vlbi5lcG9jaF9lbmQ7XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcn07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50fTtlcWAsXG4gICAgc3J2X3BvcnQ6IGAke3BvcnR9O2VxYCxcbiAgfVxuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcblxufVxuXG5mdW5jdGlvbiBsaXZlX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHNlcnZlcjogYCR7c2VydmVyfWAsXG4gICAgY2xpZW50OiBgJHtjbGllbnR9YCxcbiAgICBwb3J0OiBgJHtwb3J0fWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHVybF9wYXJhbXMpXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IG51bGxcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5sYXN0X3NlZW4nKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5jbGllbnQnKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uuc2VydmVyJyksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnBvcnQnKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucHJvdG9jb2wnKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZmlyc3Rfc2VlbicpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignZHVyYXRpb24nKSwgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLCBvcmRlcmFibGU6IHRydWUsICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uub2JzZXJ2YXRpb25zJyksIG5hbWU6ICdvYnNlcnZhdGlvbnMnLCBkYXRhOiAnb2JzZXJ2YXRpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZyZXF1ZW5jeScpLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiB0cnVlLCByZXNwb25zaXZlUHJpb3JpdHk6IDQsIHJlbmRlcjogKCBkYXRhLCB0eXBlLCByb3cgKSA9PiB7XG4gICAgICAgIHJldHVybiAodHlwZSA9PSBcInNvcnRcIiB8fCB0eXBlID09ICd0eXBlJykgPyBkYXRhIDogZGF0YSArIFwiIHNlY1wiOyBcbiAgICAgIH1cbiAgICB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gOCAvKiBPYnNlcnZhdGlvbiBjb2x1bW4gKi9cblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgXG4qL1xuXG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0geyBcbiAgYXV0b1Jlc2l6ZTogdHJ1ZSwgLyogQnkgZGVmYXVsdCBhbHJlYWR5IHRydWUgKi9cbiAgbm9kZXM6IHsgXG4gICAgc2hhcGU6IFwiZG90XCIsIFxuICAgIHNjYWxpbmc6IHtcbiAgICAgIG1pbjogMTAsXG4gICAgICBtYXg6IDMwLFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgbWluOiA4LFxuICAgICAgICBtYXg6IDMwLFxuICAgICAgICBkcmF3VGhyZXNob2xkOiAxMixcbiAgICAgIH0sXG4gICAgfSxcbiAgICBmb250OiB7XG4gICAgICBjb2xvcjogXCIjMjEyNTI5XCJcbiAgICB9LFxuICAgIHNoYWRvdzogZmFsc2UsXG4gIH0sXG4gIGVkZ2VzOiB7XG4gICAgd2lkdGg6IDAuMixcbiAgICBjb2xvcjogeyBpbmhlcml0OiBcImZyb21cIiB9LFxuICAgIHNtb290aDoge1xuICAgICAgICB0eXBlOiBcImNvbnRpbnVvdXNcIixcbiAgICAgICAgcm91bmRuZXNzOiAwXG4gICAgfSxcbiAgICBhcnJvd3M6IHtcbiAgICAgIHRvOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHNjYWxlRmFjdG9yOiAwLjMsXG4gICAgICB9XG4gICAgfSxcbiAgICBhcnJvd1N0cmlrZXRocm91Z2g6IGZhbHNlLFxuICAgIHNjYWxpbmc6IHtcbiAgICAgIG1pbjogMSxcbiAgICAgIG1heDogNSxcbiAgICB9XG4gIH0sXG4gIGxheW91dDoge1xuICAgIGltcHJvdmVkTGF5b3V0OiBmYWxzZSxcbiAgfSxcbiAgaW50ZXJhY3Rpb246IHtcbiAgICBoaWRlRWRnZXNPbkRyYWc6IGZhbHNlLFxuICAgIGhpZGVFZGdlc09uWm9vbTogdHJ1ZSxcbiAgICBob3ZlcjogZmFsc2UsXG4gICAgdG9vbHRpcERlbGF5OiAwLFxuICB9LFxuICBwaHlzaWNzOiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBzb2x2ZXI6IFwiZm9yY2VBdGxhczJCYXNlZFwiLFxuICAgIHN0YWJpbGl6YXRpb246IHtcbiAgICAgIGl0ZXJhdGlvbnM6IDMwMCxcbiAgICAgIGVuYWJsZWQ6IHRydWUgLy8gVGhpcyBpcyBoZXJlIGp1c3QgdG8gc2VlIHdoYXQncyBnb2luZyBvbiBmcm9tIHRoZSB2ZXJ5IGJlZ2lubmluZy5cbiAgICB9LFxuICAgIGZvcmNlQXRsYXMyQmFzZWQ6IHtcbiAgICAgIGNlbnRyYWxHcmF2aXR5OiAwLjAxLFxuICAgICAgc3ByaW5nTGVuZ3RoOiAxMDAsXG4gICAgfVxuICB9LFxuICBncm91cHM6IHtcbiAgICAgIHVua25vd246IHtcbiAgICAgICAgICBzaGFwZTogXCJkb3RcIixcbiAgICAgIH0sXG4gICAgICBwcmludGVyOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYwMmYnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgdmlkZW86IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjAzZCcsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB3b3Jrc3RhdGlvbjoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMTA5JyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIGxhcHRvcDoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMTA5JyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHRhYmxldDoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMTBhJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHBob25lOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxMGInLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgdHY6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjI2YycsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBuZXR3b3JraW5nOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYwYjInLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgd2lmaToge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMWViJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIG5hczoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMWMwJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIG11bHRpbWVkaWE6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjAwMScsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBpb3Q6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZTAxMicsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgbnRvcG5nX21hcF9tYW5hZ2VyID0ge1xuICAvKipcbiAgICogQ2hhbmdlIHRoZSBzdGF0dXMgb2YgYSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZV9pZCBpZCBvZiB0aGUgc2VydmljZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld19zdGF0ZSBpZCBvZiB0aGUgbmV3IHN0YXR1cyBvZiB0aGUgc2VydmljZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIHN1Y2Nlc3MuXG4gICAqL1xuICB0b2dnbGVfc3RhdGU6IGZ1bmN0aW9uKHNlcnZpY2VfaWQsIG5ld19zdGF0ZSwgY2FsbGJhY2ssIGNzcmYpIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc3dpdGNoX3NlcnZpY2Vfc3RhdGUubHVhYCwgeyBcbiAgICAgIHNlcnZpY2VfaWQ6IHNlcnZpY2VfaWQsIHNlcnZpY2Vfc3RhdHVzOiBuZXdfc3RhdGUsIGNzcmY6IGNzcmZcbiAgICB9KTtcbiAgICByZXF1ZXN0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGlmKGRhdGEuc3VjY2VzcyAmJiBjYWxsYmFjaykgXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG4gIGdldF9kZWZhdWx0X29wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbiAgfSxcbn1cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfc2VydmljZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgXG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnc3RhbmRhcmQnXCIgcmVmPVwidGFibGVfc2VydmljZV9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdjZW50cmFsaXR5J1wiIHJlZj1cInRhYmxlX3NlcnZpY2VfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG48IS0tXG4gICAgICAgIHslIGlmIGlzX2FkbWluIHRoZW4gJX1cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImQtaW5saW5lXCIgaWQ9J3N3aXRjaC1zdGF0ZS1mb3JtJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPnsqIGkxOG4oXCJtYXBfcGFnZS5zZXRfc3RhdGVcIiwge2xhYmVsID0gXCI8c3BhbiBjbGFzcz0nY291bnQnPjwvc3Bhbj5cIn0pICp9PC9sYWJlbD5cbiAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwibmV3X3N0YXRlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBkLWlubGluZVwiIHN0eWxlPVwid2lkdGg6IDE2cmVtXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgeyUgZm9yIF8sIHN0YXR1cyBpbiBwYWlyc0J5RmllbGQobWFwLmZpbHRlcnMuc2VydmljZV9zdGF0dXNfZmlsdGVycywgbGFiZWwsIGFzY19pbnNlbnNpdGl2ZSkgZG8gJX1cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwie3sgc3RhdHVzLmlkIH19XCI+eyogc3RhdHVzLmxhYmVsICp9PC9vcHRpb24+XG4gICAgICAgICAgICAgIHslIGVuZCAlfVxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGQtaW5saW5lXCIgY2xhc3M9XCJidG4tc3dpdGNoLXN0YXRlXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1yYW5kb21cIj48L2k+IHt7IGkxOG4oXCJzZXRcIikgfX1cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIHslIGVuZCAlfVxuICAgIC0tPiBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50ID0gXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gICAgTm90ZUxpc3RcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIHNlcnZpY2VfYWNjZXB0YW5jZTogQXJyYXksXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnc3RhbmRhcmQnO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgc2VydmljZV90YWJsZV90YWI6IG51bGwsXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLnRhYmxlX25vdGVfc2VydmljZV9tYXAnKV0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uczogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuICAgICAgY29uc3QgcmVsb2FkID0gdGhpcy5yZWxvYWRfdGFibGVcbiAgICAgIGNvbnN0IGNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgIGNvbnN0IHRvZ2dsZV9hbGxvd2VkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX2RlbmllZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIGRhdGE7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gc2VydmljZS5hY2NlcHRhbmNlXG4gICAgICBjb25zdCBhbGxvd2VkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9hbGxvd2VkX3N0YXRlIH07XG4gICAgICBjb25zdCBkZW5pZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2RlbmllZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgdW5kZWNpZGVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0gZGlzYWJsZWQnLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgfTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICAgIGNhc2UgMDogLyogQWxsb3dlZCAqLyAgIHsgYWxsb3dlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMTogLyogRGVuaWVkICovICAgIHsgZGVuaWVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAyOiAvKiBVbmRlY2lkZWQgKi8geyB1bmRlY2lkZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUgZGlzYWJsZWQnOyBicmVhazsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3VuZGVjaWRlZEJ1dHRvbiwgYWxsb3dlZEJ1dHRvbiwgZGVuaWVkQnV0dG9uXSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rOiBmdW5jdGlvbihfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgbGV0IGhpc3RvcmljYWxfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImhpc3RvcmljYWxfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGhpc3RvcmljYWxfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3NlcnZpY2VfJHt0aGlzLnNlcnZpY2VfdGFibGVfdGFifWBdO1xuICAgIH0sXG4gICAgc3dpdGNoX3RvX3N0YW5kYXJkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fY2VudHJhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbmV3X3VybCA9IHRoaXMudXJsX3BhcmFtc1xuICAgICAgbmV3X3VybFsndmlldyddID0gJ2NlbnRyYWxpdHknXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gaGlzdG9yaWNhbF9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvdy5maXJzdF9zZWVuO1xuICBjb25zdCBlcG9jaF9lbmQgPSByb3cubGFzdF9zZWVuLmVwb2NoX2VuZDtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogZXBvY2hfZW5kLFxuICAgIHNydl9pcDogYCR7c2VydmVyfTtlcWAsXG4gICAgY2xpX2lwOiBgJHtjbGllbnR9O2VxYCxcbiAgICBzcnZfcG9ydDogYCR7cG9ydH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xuXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuc2VydmljZV90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsIGRhdGE6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfSwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGVcbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnBvcnRcIiksIG5hbWU6ICdwb3J0JywgZGF0YTogJ3BvcnQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5wcm90b2NvbFwiKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmZpcnN0X3NlZW5cIiksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluZm9cIiksIG5hbWU6ICdpbmZvJywgZGF0YTogJ2luZm8nLCByZXNwb25zaXZlUHJpb3JpdHk6IDUgfSxcbiAgXTtcblxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDcgLyogTnVtIFVzZXMgKi9cblxuICBpZihEYXRhdGFibGVWdWUuaXNfYWRtaW4pIHtcbiAgICBjb2x1bW5zLnB1c2goeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc3RhdHVzXCIpLCBuYW1lOiAnc2VydmljZV9hY2NlcHRhbmNlJywgZGF0YTogJ3NlcnZpY2VfYWNjZXB0YW5jZScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25zKGRhdGEsIHR5cGUsIHNlcnZpY2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgfVxuICBcbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS50b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5yYW5rXCIpLCBuYW1lOiAncmFuaycsIGRhdGE6ICdyYW5rJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDIgLyogUmFuayAqL1xuICB0YWJsZV9jb25maWcub3JkZXIgPSBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfc2VydmljZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgXG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJzZXJ2aWNlX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJzZXJ2aWNlX3RhYmxlX3RhYiA9PSAnc3RhbmRhcmQnXCIgcmVmPVwidGFibGVfc2VydmljZV9zdGFuZGFyZFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdjZW50cmFsaXR5J1wiIHJlZj1cInRhYmxlX3NlcnZpY2VfY2VudHJhbGl0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG48IS0tXG4gICAgICAgIHslIGlmIGlzX2FkbWluIHRoZW4gJX1cbiAgICAgICAgICA8Zm9ybSBjbGFzcz1cImQtaW5saW5lXCIgaWQ9J3N3aXRjaC1zdGF0ZS1mb3JtJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPnsqIGkxOG4oXCJtYXBfcGFnZS5zZXRfc3RhdGVcIiwge2xhYmVsID0gXCI8c3BhbiBjbGFzcz0nY291bnQnPjwvc3Bhbj5cIn0pICp9PC9sYWJlbD5cbiAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwibmV3X3N0YXRlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBkLWlubGluZVwiIHN0eWxlPVwid2lkdGg6IDE2cmVtXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgeyUgZm9yIF8sIHN0YXR1cyBpbiBwYWlyc0J5RmllbGQobWFwLmZpbHRlcnMuc2VydmljZV9zdGF0dXNfZmlsdGVycywgbGFiZWwsIGFzY19pbnNlbnNpdGl2ZSkgZG8gJX1cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwie3sgc3RhdHVzLmlkIH19XCI+eyogc3RhdHVzLmxhYmVsICp9PC9vcHRpb24+XG4gICAgICAgICAgICAgIHslIGVuZCAlfVxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IGQtaW5saW5lXCIgY2xhc3M9XCJidG4tc3dpdGNoLXN0YXRlXCIge3sgdGVybmFyeShtYXAuc2VydmljZXNfbnVtID09IDAsIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiLCBcIlwiKSB9fT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1yYW5kb21cIj48L2k+IHt7IGkxOG4oXCJzZXRcIikgfX1cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIHslIGVuZCAlfVxuICAgIC0tPiBcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50ID0gXCJjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gICAgTm90ZUxpc3RcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIHRhYmxlX2ZpbHRlcnM6IEFycmF5LFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIHNlcnZpY2VfYWNjZXB0YW5jZTogQXJyYXksXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnc3RhbmRhcmQnO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5zZXJ2aWNlX3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfdGFibGVcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuREFUQVRBQkxFX0xPQURFRCwgKCkgPT4ge1xuICAgICAgaWYobnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2hvc3QnKSlcbiAgICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VfdGFibGVfdGFiID0gdGFiO1xuICAgIH0pO1xuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgc2VydmljZV90YWJsZV90YWI6IG51bGwsXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLnRhYmxlX25vdGVfc2VydmljZV9tYXAnKV0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgfSwgXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlbGV0ZV9idXR0b25faGFuZGxlcnModGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uczogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuICAgICAgY29uc3QgcmVsb2FkID0gdGhpcy5yZWxvYWRfdGFibGVcbiAgICAgIGNvbnN0IGNzcmYgPSB0aGlzLiRwcm9wcy5wYWdlX2NzcmZcbiAgICAgIGNvbnN0IHRvZ2dsZV9hbGxvd2VkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX2RlbmllZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMV0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzJdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIGRhdGE7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gc2VydmljZS5hY2NlcHRhbmNlXG4gICAgICBjb25zdCBhbGxvd2VkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMF0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV9hbGxvd2VkX3N0YXRlIH07XG4gICAgICBjb25zdCBkZW5pZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2RlbmllZF9zdGF0ZSB9O1xuICAgICAgY29uc3QgdW5kZWNpZGVkQnV0dG9uID0geyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0gZGlzYWJsZWQnLCBocmVmOiAnIycsIHRpdGxlOiB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0ubGFiZWwsIGhhbmRsZXI6IHRvZ2dsZV91bmRlY2lkZWRfc3RhdGUgfTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICAgIGNhc2UgMDogLyogQWxsb3dlZCAqLyAgIHsgYWxsb3dlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSc7IGJyZWFrOyB9XG4gICAgICAgIGNhc2UgMTogLyogRGVuaWVkICovICAgIHsgZGVuaWVkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAyOiAvKiBVbmRlY2lkZWQgKi8geyB1bmRlY2lkZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUgZGlzYWJsZWQnOyBicmVhazsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3VuZGVjaWRlZEJ1dHRvbiwgYWxsb3dlZEJ1dHRvbiwgZGVuaWVkQnV0dG9uXSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rOiBmdW5jdGlvbihfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgbGV0IGhpc3RvcmljYWxfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImhpc3RvcmljYWxfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGhpc3RvcmljYWxfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3NlcnZpY2VfJHt0aGlzLnNlcnZpY2VfdGFibGVfdGFifWBdO1xuICAgIH0sXG4gICAgc3dpdGNoX3RvX3N0YW5kYXJkOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fY2VudHJhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbmV3X3VybCA9IHRoaXMudXJsX3BhcmFtc1xuICAgICAgbmV3X3VybFsndmlldyddID0gJ2NlbnRyYWxpdHknXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWAsIHVybF9wYXJhbXMpXG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gaGlzdG9yaWNhbF9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvdy5maXJzdF9zZWVuO1xuICBjb25zdCBlcG9jaF9lbmQgPSByb3cubGFzdF9zZWVuLmVwb2NoX2VuZDtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogZXBvY2hfZW5kLFxuICAgIHNydl9pcDogYCR7c2VydmVyfTtlcWAsXG4gICAgY2xpX2lwOiBgJHtjbGllbnR9O2VxYCxcbiAgICBzcnZfcG9ydDogYCR7cG9ydH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xuXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuc2VydmljZV90YWJsZV90YWI7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsIGRhdGE6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfSwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGVcbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLnZhbHVlIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnBvcnRcIiksIG5hbWU6ICdwb3J0JywgZGF0YTogJ3BvcnQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5wcm90b2NvbFwiKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmZpcnN0X3NlZW5cIiksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UubnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluZm9cIiksIG5hbWU6ICdpbmZvJywgZGF0YTogJ2luZm8nLCByZXNwb25zaXZlUHJpb3JpdHk6IDUgfSxcbiAgXTtcblxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDcgLyogTnVtIFVzZXMgKi9cblxuICBpZihEYXRhdGFibGVWdWUuaXNfYWRtaW4pIHtcbiAgICBjb2x1bW5zLnB1c2goeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc3RhdHVzXCIpLCBuYW1lOiAnc2VydmljZV9hY2NlcHRhbmNlJywgZGF0YTogJ3NlcnZpY2VfYWNjZXB0YW5jZScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25zKGRhdGEsIHR5cGUsIHNlcnZpY2UpO1xuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgfVxuICBcbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfVxuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS50b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5yYW5rXCIpLCBuYW1lOiAncmFuaycsIGRhdGE6ICdyYW5rJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDIgLyogUmFuayAqL1xuICB0YWJsZV9jb25maWcub3JkZXIgPSBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IHYtaWY9XCJlbXB0eV9tYXBcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAge3sgZW1wdHlfbWVzc2FnZSB9fVxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHJlc2l6YWJsZS15LWNvbnRhaW5lclwiIHN0eWxlPVwid2lkdGg6IDEwMCU7IGhlaWdodDogNjB2aDtcIiA6aWQ9bWFwX2lkPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgb25Nb3VudGVkLCBvbkJlZm9yZVVubW91bnQsIHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19tYXBfbWFuYWdlciB9IGZyb20gJy4uL3V0aWxpdGllcy9tYXAvbnRvcG5nX3Zpc19uZXR3b3JrX3V0aWxzJztcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBlbXB0eV9tZXNzYWdlOiBTdHJpbmcsXG4gIGV2ZW50X2xpc3RlbmVyczogT2JqZWN0LFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgdXJsOiBTdHJpbmcsXG4gIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgbWFwX2lkOiBTdHJpbmcsXG59KTtcblxuY29uc3QgZGF0YVJlcXVlc3QgPSB7IFxuICBpZmlkOiBwcm9wcy51cmxfcGFyYW1zLmlmaWQsIFxuICBhY3Rpb246ICdsb2FkX2dyYXBoJywgXG4gIG1hcDogcHJvcHMudXJsX3BhcmFtcy5tYXBfaWRcbn07XG5cbmxldCBub2Rlc19kYXRhc2V0ID0ge307XG5sZXQgZWRnZXNfZGF0YXNldCA9IHt9O1xubGV0IGhpZ2hsaWdodEFjdGl2ZSA9IGZhbHNlO1xubGV0IG5ldHdvcmsgPSBudWxsO1xuY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBlbXB0eV9tYXAgPSByZWYodHJ1ZSk7XG5jb25zdCBpc19kZXN0cm95ZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgdXJsX3BhcmFtcyA9IHJlZih7fSk7XG5jb25zdCBkYXRhc2V0cyA9IHJlZihudWxsKTtcbmNvbnN0IG9wdGlvbnMgPSByZWYobnVsbCk7XG5jb25zdCBhbGxfbm9kZXMgPSByZWYobnVsbCk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByb3BzLm1hcF9pZCk7XG4gIGxvYWRfc2NhbGUoKTtcbiAgYXdhaXQgcmVxdWVzdF9pbmZvKCk7XG4gIG9wdGlvbnMudmFsdWUgPSBudG9wbmdfbWFwX21hbmFnZXIuZ2V0X2RlZmF1bHRfb3B0aW9ucygpO1xuICBuZXR3b3JrID0gbmV3IHZpcy5OZXR3b3JrKGNvbnRhaW5lciwgZGF0YXNldHMudmFsdWUsIG9wdGlvbnMudmFsdWUpO1xuICBzZXRfZXZlbnRfbGlzdGVuZXIoKTtcbn0pXG5cbm9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gIGlmIChpc19kZXN0cm95ZWQudmFsdWUgPT0gdHJ1ZSkgeyBcbiAgICByZXR1cm47IFxuICB9XG4gIGRlc3Ryb3koKTtcbn0pO1xuXG5jb25zdCBnZW5lcmF0ZV9odG1sX3Rvb2x0aXAgPSAoeCkgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAvKiBOZWNlc3NhcnksIG90aGVyd2lzZSBpdCB3aWxsIGdvIGluIGNvbmZsaWN0IHdpdGggb3RoZXIgY3NzICovXG4gIC8vY29udGFpbmVyLnN0eWxlLmNvbG9yID0gXCIjMTExMTExXCI7XG4gIGNvbnRhaW5lci5pbm5lckhUTUwgPSBgPGI+JHt4LmxhYmVsfTwvYj48YnI+PGJyPiR7aTE4bignZGJfZXhwbG9yZXIuaG9zdF9kYXRhJyl9OiAke3guaWR9YDtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHBlcmZvcm0gdGhlIHJlcXVlc3QgKi9cbmNvbnN0IHJlcXVlc3RfaW5mbyA9IGFzeW5jKCkgPT4ge1xuICAvKiBpZiBhbiBob3N0IGhhcyBiZWVuIGRlZmluZWQgaW5zaWRlIHRoZSBVUkwgcXVlcnkgdGhlbiBhZGQgaXQgdG8gdGhlIHJlcXVlc3QgKi9cbiAgdXJsX3BhcmFtcy52YWx1ZSA9IHByb3BzLnVybF9wYXJhbXM7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChwcm9wcy51cmwsIHVybF9wYXJhbXMudmFsdWUpOyBcbiAgYXdhaXQgJC5nZXQodXJsLCBkYXRhUmVxdWVzdCwgYXN5bmMgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICBjb25zdCB7IG5vZGVzLCBlZGdlcywgbWF4X2VudHJ5X3JlYWNoZWQgfSA9IHJlc3BvbnNlLnJzcDtcbiAgICBtYXhfZW50cmllc19yZWFjaGVkLnZhbHVlID0gbWF4X2VudHJ5X3JlYWNoZWQ7XG4gICAgLyogQWRkaW5nIHRvb2x0aXAgdG8gZWFjaCBub2RlICovXG4gICAgbm9kZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChub2Rlcy5tYXAoKHgpID0+IHtcbiAgICAgIHgudGl0bGUgPSBnZW5lcmF0ZV9odG1sX3Rvb2x0aXAoeCk7XG4gICAgICByZXR1cm4geDtcbiAgICB9KSk7XG4gICAgZWRnZXNfZGF0YXNldCA9IG5ldyB2aXMuRGF0YVNldChlZGdlcyk7XG4gICAgZGF0YXNldHMudmFsdWUgPSB7XG4gICAgICBub2Rlczogbm9kZXNfZGF0YXNldCwgXG4gICAgICBlZGdlczogZWRnZXNfZGF0YXNldFxuICAgIH07XG4gICAgYWxsX25vZGVzLnZhbHVlID0gbm9kZXNfZGF0YXNldC5nZXQoeyByZXR1cm5UeXBlOiBcIk9iamVjdFwiIH0pO1xuICAgIGVtcHR5X25ldHdvcmsoKTtcblx0fSk7XG59O1xuXG4vKiBBZGQgdGhlIGhvc3QgdG8gdGhlIHVybCBhbmQganVtcCB0byB0aGUgaG9zdCAqL1xuY29uc3QganVtcF90b19ob3N0ID0gYXN5bmMgKHBhcmFtcykgPT4ge1xuICBjb25zdCBob3N0X2luZm8gPSBwYXJhbXMuaWQuc3BsaXQoJ0AnKVxuICB1cmxfcGFyYW1zLnZhbHVlWydob3N0J10gPSBob3N0X2luZm9bMF07IC8qIEhvc3QgSVAgKi9cbiAgdXJsX3BhcmFtcy52YWx1ZVsndmxhbl9pZCddID0gaG9zdF9pbmZvWzFdOyAvKiBWTEFOIElEICovXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaG9zdCcsIHVybF9wYXJhbXMudmFsdWVbJ2hvc3QnXSk7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbl9pZCcsIHVybF9wYXJhbXMudmFsdWVbJ3ZsYW5faWQnXSk7XG4gIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgcGFyYW1zKVxuICBhd2FpdCByZWxvYWQoKTtcbn1cblxuLyogSW4gY2FzZSBvZiBlbXB0eSBuZXR3b3JrIGVuYWJsZSB0aGUgXCJFbXB0eSBOZXR3b3JrXCIgbWVzc2FnZSAqL1xuY29uc3QgZW1wdHlfbmV0d29yayA9ICgpID0+IHtcbiAgaWYoZGF0YXNldHMudmFsdWU/Lm5vZGVzLmxlbmd0aCA9PSAwIFxuICAgICYmIGRhdGFzZXRzLnZhbHVlPy5lZGdlcy5sZW5ndGggPT0gMCkge1xuICAgIGVtcHR5X21hcC52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZW1wdHlfbWFwLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cblxuLyogRml4IHRoZSByZXNpemFibGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgKi9cbmNvbnN0IGxvYWRfc2NhbGUgPSAoKSA9PiB7XG4gIGNvbnN0IG9sZFNjYWxlID0gTnRvcFV0aWxzLmxvYWRFbGVtZW50U2NhbGUoJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApKVxuXG4gIGlmKG9sZFNjYWxlID09IG51bGwpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKG9sZFNjYWxlLndpZHRoKTtcbiAgJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodChvbGRTY2FsZS5oZWlnaHQpO1xuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkub24oJ21vdXNldXAnLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzY2FsZSA9IHt3aWR0aDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLndpZHRoKCksIGhlaWdodDogJChgLnJlc2l6YWJsZS15LWNvbnRhaW5lcmApLmhlaWdodCgpfTtcbiAgICBOdG9wVXRpbHMuc2F2ZUVsZW1lbnRTY2FsZSgkKHRoaXMpLCBzY2FsZSk7XG4gIH0pO1xufSAgICBcblxuZnVuY3Rpb24gbmVpZ2hib3VyaG9vZEhpZ2hsaWdodChwYXJhbXMpIHtcbiAgLy8gaWYgc29tZXRoaW5nIGlzIHNlbGVjdGVkOlxuICBpZiAocGFyYW1zLm5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICBoaWdobGlnaHRBY3RpdmUgPSB0cnVlO1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBzZWxlY3RlZE5vZGUgPSBwYXJhbXMubm9kZXNbMF07XG4gICAgdmFyIGRlZ3JlZXMgPSAyO1xuXG4gICAgLy8gbWFyayBhbGwgbm9kZXMgYXMgaGFyZCB0byByZWFkLlxuICAgIGZvciAodmFyIG5vZGVJZCBpbiBhbGxfbm9kZXMudmFsdWUpIHtcbiAgICAgIGlmKCFhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfY29sb3IpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2NvbG9yID0gXG4gICAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uY29sb3I7XG4gICAgICB9XG4gICAgICBpZighYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2ljb25fY29sb3IpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2ljb25fY29sb3IgPSBcbiAgICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5pY29uO1xuICAgICAgfVxuICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uY29sb3IgPSBcIiNjOGM4YzhcIjtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmljb24gPSB7XG4gICAgICAgIGNvbG9yOiBcIiNjOGM4YzhcIlxuICAgICAgfTtcbiAgICAgIGlmIChhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5oaWRkZW5MYWJlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsID0gYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ubGFiZWw7XG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmxhYmVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY29ubmVjdGVkTm9kZXMgPSBuZXR3b3JrLmdldENvbm5lY3RlZE5vZGVzKHNlbGVjdGVkTm9kZSk7XG4gICAgdmFyIGFsbENvbm5lY3RlZE5vZGVzID0gW107XG5cbiAgICAvLyBnZXQgdGhlIHNlY29uZCBkZWdyZWUgbm9kZXNcbiAgICBmb3IgKGkgPSAxOyBpIDwgZGVncmVlczsgaSsrKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgYWxsQ29ubmVjdGVkTm9kZXMgPSBhbGxDb25uZWN0ZWROb2Rlcy5jb25jYXQoXG4gICAgICAgICAgbmV0d29yay5nZXRDb25uZWN0ZWROb2Rlcyhjb25uZWN0ZWROb2Rlc1tqXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbGwgZmlyc3QgZGVncmVlIG5vZGVzIGdldCB0aGVpciBvd24gY29sb3IgYW5kIHRoZWlyIGxhYmVsIGJhY2tcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtjb25uZWN0ZWROb2Rlc1tpXV0uY29sb3IgPSBcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5vbGRfY29sb3I7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmljb24gPSBcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5vbGRfaWNvbl9jb2xvcjtcbiAgICAgIGlmIChhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmhpZGRlbkxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5sYWJlbCA9XG4gICAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5oaWRkZW5MYWJlbDtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5oaWRkZW5MYWJlbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGUgbWFpbiBub2RlIGdldHMgaXRzIG93biBjb2xvciBhbmQgaXRzIGxhYmVsIGJhY2suXG4gICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0uY29sb3IgPSBcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLm9sZF9jb2xvcjtcbiAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5pY29uID0gXG4gICAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5vbGRfaWNvbl9jb2xvcjtcbiAgICBpZiAoYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0uaGlkZGVuTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0ubGFiZWwgPSBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5oaWRkZW5MYWJlbDtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLmhpZGRlbkxhYmVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIGlmIChoaWdobGlnaHRBY3RpdmUgPT09IHRydWUpIHtcbiAgICAvLyByZXNldCBhbGwgbm9kZXNcbiAgICBmb3IgKHZhciBub2RlSWQgaW4gYWxsX25vZGVzLnZhbHVlKSB7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5jb2xvciA9IFxuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfY29sb3I7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5pY29uID0gXG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLm9sZF9pY29uX2NvbG9yO1xuICAgICAgaWYgKGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ubGFiZWwgPSBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5oaWRkZW5MYWJlbDtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uaGlkZGVuTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGhpZ2hsaWdodEFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgLy8gdHJhbnNmb3JtIHRoZSBvYmplY3QgaW50byBhbiBhcnJheVxuICB2YXIgdXBkYXRlQXJyYXkgPSBbXTtcbiAgZm9yIChub2RlSWQgaW4gYWxsX25vZGVzLnZhbHVlKSB7XG4gICAgaWYgKGFsbF9ub2Rlcy52YWx1ZS5oYXNPd25Qcm9wZXJ0eShub2RlSWQpKSB7XG4gICAgICB1cGRhdGVBcnJheS5wdXNoKGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdKTtcbiAgICB9XG4gIH1cbiAgbm9kZXNfZGF0YXNldC51cGRhdGUodXBkYXRlQXJyYXkpO1xufVxuXG5cbi8qIFNldCB0aGUgZXZlbnQgbGlzdGVyIHVzZWQgZm9yIGNhbGxiYWNrcyAqL1xuY29uc3Qgc2V0X2V2ZW50X2xpc3RlbmVyID0gKCkgPT4ge1xuICBuZXR3b3JrLm9uKFwic3RhYmlsaXphdGlvbkl0ZXJhdGlvbnNEb25lXCIsIGZ1bmN0aW9uKCkge1xuICAgIG5ldHdvcmsuc2V0T3B0aW9ucyggeyBwaHlzaWNzOiBmYWxzZSB9ICk7XG4gIH0pXG4gIG5ldHdvcmsub24oXCJjbGlja1wiLCBmdW5jdGlvbihub2RlKSB7XG4gICAgbmVpZ2hib3VyaG9vZEhpZ2hsaWdodChub2RlKTtcbiAgfSk7XG5cbiAgbmV0d29yay5vbihcImRvdWJsZUNsaWNrXCIsIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBqdW1wX3RvX2hvc3Qobm9kZXNfZGF0YXNldC5nZXQocGFyYW1zLm5vZGVzWzBdKSk7XG4gIH0pO1xuXG4gIG5ldHdvcmsub24oXCJhZnRlckRyYXdpbmdcIiwgZnVuY3Rpb24oZSkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQpO1xuICB9KVxuXG4gIC8qIEdpdmVuIGV2ZW50IGxpc3RlbmVycyAqL1xuICBmb3IgKGNvbnN0IGl0ZW0gaW4gKHByb3BzLmV2ZW50X2xpc3RlbmVycyB8fCB7fSkpIHtcbiAgICBuZXR3b3JrLm9uKGl0ZW0sIHByb3BzLmV2ZW50X2xpc3RlbmVyc1tpdGVtXSk7XG4gIH1cbn1cblxuLyogRnVuY3Rpb24gdXNlZCB0byBhdXRvbGF5b3V0L3N0YWJpbGl6ZSB0aGUgbmV0d29yayAqL1xuY29uc3QgYXV0b2xheW91dCA9ICgpID0+IHtcbiAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgbmV0d29yayBpcyB1bmRlZmluZWQhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKG5ldHdvcmsgaW5zdGFuY2VvZiB2aXMuTmV0d29yaykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiTm90IGEgdmlzLk5ldHdvcmsgaW5zdGFuY2UhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5ldHdvcmsuc3RhYmlsaXplKCk7XG59XG5cbi8qIERlc3Ryb3kgdGhlIG5ldHdvcmsgaWYgaXQncyBub3QgbnVsbCAqL1xuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgaWYobmV0d29yayAhPSBudWxsKVxuICAgIG5ldHdvcmsuZGVzdHJveSh0cnVlKTtcblxuICBpc19kZXN0cm95ZWQudmFsdWUgPSB0cnVlXG59XG5cbi8qIFRoaXMgcmV0dXJuIHRydWUgaWYgdGhlIG1heGltdW0gbnVtYmVyIG9mIG5vZGVzL2VkZ2VzIGhhcyBiZWVuIHJlYWNoZWQgKi9cbmNvbnN0IGlzX21heF9lbnRyeV9yZWFjaGVkID0gKCkgPT4ge1xuICByZXR1cm4gbWF4X2VudHJpZXNfcmVhY2hlZC52YWx1ZTtcbn1cblxuLyogRnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHBhcmFtcyAqL1xuY29uc3QgdXBkYXRlX3VybF9wYXJhbXMgPSAobmV3X3VybF9wYXJhbXMpID0+IHtcbiAgdXJsX3BhcmFtcy52YWx1ZSA9IG5ld191cmxfcGFyYW1zO1xufVxuXG4vKiBGdW5jdGlvbiB1c2VkIHRvIHJlbG9hZCB0aGUgbWFwICovXG5jb25zdCByZWxvYWQgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHJlcXVlc3RfaW5mbygpO1xuICBpZihuZXR3b3JrICE9IG51bGwpIHtcbiAgICAvKiBSZWxvYWQgb2YgdGhlIHBoeXNpY3MgaXMgZG9uZSBkdWUgdG8gYSBwb3NzaWJsZSBidWcsXG4gICAgICogd2l0aCBtYW55IG5vZGVzLCB0aGUgcGh5c2ljcyBjb3VsZCBzdHVjayBpbmZpbml0ZWx5IFxuICAgICAqL1xuICAgIG5ldHdvcmsuc2V0T3B0aW9ucyh7IHBoeXNpY3M6IG9wdGlvbnMudmFsdWUucGh5c2ljcyB9KTtcbiAgICBuZXR3b3JrLnNldERhdGEoZGF0YXNldHMudmFsdWUpO1xuICB9XG59XG5cblxuZGVmaW5lRXhwb3NlKHsgcmVsb2FkLCBkZXN0cm95LCBpc19tYXhfZW50cnlfcmVhY2hlZCwgYXV0b2xheW91dCwgdXBkYXRlX3VybF9wYXJhbXMgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAge3tib2R5fX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXV0b2xheW91dF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2NvbmZpcm0nKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2F1dG9sYXlvdXQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGF1dG9sYXlvdXRfID0gKCkgPT4ge1xuICAgIGVtaXQoJ2F1dG9sYXlvdXQnKTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwic2VydmljZV9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxufSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvL3RoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSxcbiAgZGF0YSgpIHtcblxuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9zZXJ2aWNlX21hcCcpXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BzZXJ2aWNlX21hcGBdO1xuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvciAobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmIChhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcilcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS4kcHJvcHMudXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwic2VydmljZV9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJzZXJ2aWNlX21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxufSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9zZXJ2aWNlX21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvL3RoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSxcbiAgZGF0YSgpIHtcblxuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9zZXJ2aWNlX21hcCcpXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BzZXJ2aWNlX21hcGBdO1xuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvciAobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmIChhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcilcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS4kcHJvcHMudXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IGlkPVwidGFibGVfcGVyaW9kaWNpdHlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJwZXJpb2RpY2l0eV9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLnVybF9wYXJhbXNcbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgdXBkYXRlZF91cmxfcGFyYW1zOiB7fSxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSwgICAgICBcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9wZXJpb2RpY2l0eV9tYXAnKV1cblxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BwZXJpb2RpY2l0eV9tYXBgXVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXBkYXRlZF91cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvciAobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmIChhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcilcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS51cGRhdGVkX3VybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX3BlcmlvZGljaXR5XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwicGVyaW9kaWNpdHlfbWFwXCIgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCIgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIiA6dXJsPVwiZ2V0X3VybFwiIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3tcbiAgICAgICAgICAgIGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmNvbnN0IGNoYW5nZV9maWx0ZXJfZXZlbnQgPSBcImNoYW5nZV9maWx0ZXJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgJ25ldHdvcmstbWFwJzogTmV0d29ya01hcCxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ21vZGFsLWF1dG9sYXlvdXQtY29uZmlybSc6IE1vZGFsQXV0b2xheW91dENvbmZpcm0sXG4gICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgTm90ZUxpc3RcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIG1hcF9pZDogU3RyaW5nLFxuICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgIGFsbF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfdmlzX25ldHdvcmtfbWFwKHRoaXMpXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy51cmxfcGFyYW1zXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpXG4gICAgaWYgKHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAmJiB0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgIT0gJycpIHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9wZXJpb2RpY2l0eV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdC5mb3JFYWNoKChmaWx0ZXJfZWwsIGkpID0+IHtcbiAgICAgICAgaWYgKGZpbHRlcl9lbC5maWx0ZXJfbmFtZSA9PSBmaWx0ZXIuZmlsdGVyX25hbWUpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtpXSA9IGZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYgKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0pO1xuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIHVwZGF0ZWRfdXJsX3BhcmFtczoge30sXG4gICAgICBmaWx0ZXJfbGlzdDogW10sXG4gICAgICBhY3RpdmVfZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgZXZlbnRfbGlzdGVuZXJzOiB7fSxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICBub19zZXJ2aWNlc19tZXNzYWdlOiBpMThuKCdtYXBfcGFnZS5ub19zZXJ2aWNlcycpLFxuICAgICAgbWF4X2VudHJ5X3RpdGxlOiBpMThuKCdtYXhfZW50cmllc19yZWFjaGVkJyksICAgICAgXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLmdyYXBoX25vdGVfcGVyaW9kaWNpdHlfbWFwJyldXG5cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgcGVyaW9kaWNpdHlfbWFwYF1cbiAgICB9LFxuICAgIG1heF9lbnRyeV9yZWFjaGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICByZXR1cm4gbWFwLmlzX21heF9lbnRyeV9yZWFjaGVkKCk7XG4gICAgfSxcbiAgICByZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICB1cGRhdGVfYW5kX3JlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIG1hcC51cGRhdGVfdXJsX3BhcmFtcyh0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXBkYXRlZF91cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUudXBkYXRlZF91cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYEFzc2V0IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9hc3NldFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCIgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cImFzc2V0X21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PiAgICBcbiAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cblxuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9hc3NldF9tYXAnKV0sXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYGFzc2V0X21hcGBdO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYEFzc2V0IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9hc3NldFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCIgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cImFzc2V0X21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PiAgICBcbiAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cblxuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0pO1xuXG4gICAgLyogUmVtb3ZlIGludmFsaWQgZmlsdGVycyAqL1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgIHVwZGF0ZV92aWV3X3N0YXRlX2lkOiBudWxsLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGRvd25sb2FkX3VybDogbnVsbCxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9hc3NldF9tYXAnKV0sXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYGFzc2V0X21hcGBdO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXJsX3BhcmFtcylcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGF1dG9sYXlvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5hdXRvbGF5b3V0KCk7XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBzaG93X2F1dG9sYXlvdXRfZGlhbG9nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfYXV0b2xheW91dFwiXS5zaG93KCk7XG4gICAgfSxcbiAgICBkZWxldGVfYWxsOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPnt7Ym9keX19PC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tN1wiPlxuICAgICAgICA8dGV4dGFyZWEgbmFtZT1cIml0ZW1zLWxpc3RcIiBpZD1cIml0ZW1zbGlzdC10ZXh0YXJlYVwiIGNsYXNzPVwidy0xMDAgZm9ybS1jb250cm9sXCIgcm93cz1cIjZcIiB2LW1vZGVsPVwiaW5wdXRfbWFjX2xpc3RcIj48L3RleHRhcmVhPlxuICAgICAgICAgIDxzbWFsbD57e2xpc3Rfbm90ZXN9fTwvc21hbGw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTQgcHQtMlwiPnt7X2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0Jyl9fTwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1zd2l0Y2ggY29sLXNtLTcgcHQtMiBwcy0zXCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImZvcm0tY2hlY2staW5wdXQgbXMtMFwiIHYtbW9kZWw9XCJpbnB1dF90cmlnZ2VyX2FsZXJ0c1wiPlxuICAgICAgPC9kaXY+XG4gICAgICA8c21hbGwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPnt7X2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0X2Rlc2NyJyl9fTwvc21hbGw+XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIHt7X2kxOG4oJ2hvc3RfZGV0YWlscy5ub3RlcycpfX06XG4gICAge3tmb290ZXJ9fVxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJ10pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgZm9vdGVyOiBTdHJpbmcsXG4gICAgbGlzdF9ub3RlczogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5wdXRfbWFjX2xpc3QudmFsdWUgPSBcIlwiO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGFkZF8gPSAoKSA9PiB7XG4gICAgZW1pdCgnYWRkJywgeyBtYWNfbGlzdDogaW5wdXRfbWFjX2xpc3QudmFsdWUsIHRyaWdnZXJfYWxlcnRzOiBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSB9KTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZWRpdF9hbGwgPT0gZmFsc2VcIj5cbiAgICAgIHt7dGl0bGV9fVxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgIHt7IHRpdGxlX2VkaXRfYWxsIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICBcbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJlZGl0X2FsbCA9PSBmYWxzZVwiPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPnt7IF9pMThuKCdlZGl0X2NoZWNrLmRldmljZV9hbGlhcycpIH19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImN1c3RvbV9uYW1lXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiA6cGxhY2Vob2xkZXI9XCJjdXN0b21fbmFtZV9wbGFjZWhvbGRlclwiXG4gICAgICAgICAgICB2LW1vZGVsPVwiaW5wdXRfbWFjX2FkZHJlc3NfbmFtZVwiPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPnt7IF9pMThuKCdlZGl0X2NoZWNrLmRldmljZV9zdGF0dXMnKSB9fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tN1wiPlxuXG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImlucHV0X2RldmljZV9zdGF0dXNcIiBcbiAgICAgICAgICAgIDpvcHRpb25zPVwiZGV2aWNlX3N0YXR1c19saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNCBwdC0yXCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0JykgfX08L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1zd2l0Y2ggY29sLXNtLTcgcHQtMiBwcy0zXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBtcy0wXCIgdi1tb2RlbD1cImlucHV0X3RyaWdnZXJfYWxlcnRzXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c21hbGwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPnt7IF9pMThuKCdlZGl0X2NoZWNrLnRyaWdnZXJfZGV2aWNlX2Rpc2Nvbm5lY3RlZF9hbGVydF9kZXNjcicpIH19PC9zbWFsbD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3sgX2kxOG4oJ2VkaXQnKSB9fTwvYnV0dG9uPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuXG5jb25zdCBpbnB1dF9tYWNfYWRkcmVzc19uYW1lID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfZGV2aWNlX3N0YXR1cyA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3RyaWdnZXJfYWxlcnRzID0gcmVmKFwiXCIpO1xuXG5jb25zdCBjdXN0b21fbmFtZV9wbGFjZWhvbGRlciA9IHJlZihpMThuKCdpZl9zdGF0c19jb25maWcuY3VzdG9tX25hbWUnKSk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2VkaXQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHsgfTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICB0aXRsZV9lZGl0X2FsbDogU3RyaW5nLFxufSk7XG5cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGRldmljZV9zdGF0dXNfbGlzdCA9IHJlZihbXG4gIHtpZDogXCJhbGxvd2VkXCIsIHZhbHVlOlwiYWxsb3dlZFwiLCBsYWJlbDpfaTE4bignZWRpdF9jaGVjay5hdXRob3JpemVkJykgfSxcbiAge2lkOiBcImRlbmllZFwiLCB2YWx1ZTpcImRlbmllZFwiLCBsYWJlbDpfaTE4bignZWRpdF9jaGVjay51bmF1dGhvcml6ZWQnKSB9LFxuXSlcblxuY29uc3QgZWRpdF9hbGwgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICAgIGlmKHJvdyAhPSBudWxsKSB7XG4gICAgICBsZXQgdG1wX2RldmljZV9zdGF0dXMgPSBudWxsO1xuICAgICAgZGV2aWNlX3N0YXR1c19saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYoaXRlbS5pZCA9PSByb3cuc3RhdHVzKSB7XG4gICAgICAgICAgdG1wX2RldmljZV9zdGF0dXMgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlucHV0X2RldmljZV9zdGF0dXMudmFsdWUgPSB0bXBfZGV2aWNlX3N0YXR1cztcbiAgICAgIGlucHV0X21hY19hZGRyZXNzX25hbWUudmFsdWUgPSByb3cubWFjX2FkZHJlc3MubWFjO1xuICAgICAgaW5wdXRfdHJpZ2dlcl9hbGVydHMudmFsdWUgPSByb3cudHJpZ2dlcl9hbGVydCB8fCBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZSA9IGRldmljZV9zdGF0dXNfbGlzdC52YWx1ZVswXTtcbiAgICAgIGVkaXRfYWxsLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gICAgaWYoZWRpdF9hbGwudmFsdWUgPT0gZmFsc2UpXG4gICAgICBlbWl0KCdlZGl0JywgeyBtYWNfYWxpYXM6IGlucHV0X21hY19hZGRyZXNzX25hbWUudmFsdWUsIG1hY19zdGF0dXM6IGlucHV0X2RldmljZV9zdGF0dXMudmFsdWUudmFsdWUsIHRyaWdnZXJfYWxlcnRzOiBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSB9KTtcbiAgICBlbHNlIFxuICAgICAgZW1pdCgnZWRpdCcsIHsgbWFjX3N0YXR1czogaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZS52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlLCBtYWNfYWxpYXM6ICdhbGwnLCB9KTtcblxuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+PC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgXG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiB2LWlmPVwiaXNfbGVhcm5pbmdfc3RhdHVzXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gICAgICAgICAge3sgbGVhcm5pbmdfbWVzc2FnZSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2RldmljZXNfdnVlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgICAgICAgICA8bW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24gcmVmPVwibW9kYWxfYWRkX2RldmljZVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9hZGRcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2FkZFwiXG4gICAgICAgICAgICA6Zm9vdGVyPVwiZm9vdGVyX2FkZFwiXG4gICAgICAgICAgICA6bGlzdF9ub3Rlcz1cImxpc3Rfbm90ZXNfYWRkXCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfZGV2aWNlX3Jlc3RcIj5cbiAgICAgICAgICA8L21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uPlxuICAgICAgICAgIDxtb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24gcmVmPVwibW9kYWxfZWRpdF9kZXZpY2VcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZWRpdFwiXG4gICAgICAgICAgICA6dGl0bGVfZWRpdF9hbGw9XCJ0aXRsZV9lZGl0X2FsbFwiXG4gICAgICAgICAgICBAZWRpdD1cImVkaXRfcm93XCI+XG4gICAgICAgICAgPC9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24+XG4gICAgICAgICAgICBcbiAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2RldmljZV9leGNsdXNpb25zXCJcblx0XHRcdFx0ICAgICAgICA6Y3NyZj1cImNzcmZcIlxuXHRcdFx0XHQgICAgICAgIDp0YWJsZV9pZD1cInRhYmxlX2lkXCJcbiAgICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG5cdFx0XHRcdCAgICAgICAgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICAgIDpmX21hcF9jb25maWc9XCJtYXBfY29uZmlnXCJcbiAgICAgICAgICAgICAgICA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIlxuICAgICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIj5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGlua1wiIHR5cGU9XCJidXR0b25cIiByZWY9XCJhZGRfZGV2aWNlXCIgQGNsaWNrPVwiYWRkX2RldmljZVwiPjxpXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPSdmYXMgZmEtcGx1cyc+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyIG10LTNcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX2FsbF9jb25maXJtXCIgIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPlxuICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgX2kxOG4oXCJlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnNcIikgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfYWxsX2RldmljZXNfY29uZmlybVwiICBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5XCI+XG4gICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1lZGl0Jz48L2k+IHt7IF9pMThuKFwiZWRpdF9jaGVjay5lZGl0X2FsbF9kZXZpY2VzX3N0YXR1c1wiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICA8L2Rpdj5cbiAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc19saXN0XCIgYWRkX3N1Yl9ub3Rlcz1cInRydWVcIiBcbiAgICAgICAgICAgICAgICAgICAgOnN1Yl9ub3RlX2xpc3Q9XCJzdWJfbm90ZXNfbGlzdFwiPiBcbiAgICAgICAgICA8L05vdGVMaXN0PlxuICAgIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0ICBUYWJsZVdpdGhDb25maWcgIGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0ICBNb2RhbERlbGV0ZUNvbmZpcm0gIGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0ICBNb2RhbEFkZERldmljZUV4Y2x1c2lvbiAgZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiAgZnJvbSBcIi4vbW9kYWwtZWRpdC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuXG5cbmNvbnN0IHRhYmxlX2RldmljZV9leGNsdXNpb25zID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZigpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2FsbCA9IHJlZigpO1xuY29uc3QgbW9kYWxfYWRkX2RldmljZSA9IHJlZigpO1xuY29uc3QgbW9kYWxfZWRpdF9kZXZpY2UgPSByZWYoKTtcblxuY29uc3QgdGFibGVfaWQgPSByZWYoJ2RldmljZV9leGNsdXNpb25zJyk7XG5cbmNvbnN0IGFkZF91cmwgICAgICAgICAgICAgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG5jb25zdCBkZWxldGVfdXJsICAgICAgICAgID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvZGV2aWNlL2V4Y2x1c2lvbi5sdWFgO1xuY29uc3QgZWRpdF91cmwgICAgICAgICAgICA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZWRpdC9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG5jb25zdCBsZWFybmluZ19zdGF0dXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGV2aWNlL2xlYXJuaW5nX3N0YXR1cy5sdWFgO1xuY29uc3QgaXNfbGVhcm5pbmdfc3RhdHVzID0gcmVmKGZhbHNlKTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmxldCB0aXRsZV9kZWxldGU9ICcnO1xubGV0IGJvZHlfZGVsZXRlPSAnJztcbmxldCB0aXRsZV9kZWxldGVfYWxsPSBfaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zJyk7XG5sZXQgYm9keV9kZWxldGVfYWxsPSAgX2kxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc19tZXNzYWdlJyk7XG5sZXQgdGl0bGVfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbicpO1xubGV0IGJvZHlfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9tZXNzYWdlJyk7XG5sZXQgZm9vdGVyX2FkZD0gX2kxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbm90ZXMnKTtcbmxldCBsaXN0X25vdGVzX2FkZD0gX2kxOG4oJ2VkaXRfY2hlY2suYWRkX2RldmljZV9leGNsdXNpb25fbGlzdF9ub3RlcycpO1xubGV0IHRpdGxlX2VkaXQ9IF9pMThuKCdlZGl0X2NoZWNrLmVkaXRfZGV2aWNlX2V4Y2x1c2lvbicpO1xubGV0IHRpdGxlX2VkaXRfYWxsPSBfaTE4bignZWRpdF9jaGVjay5lZGl0X2FsbF9kZXZpY2VzX3N0YXR1cycpO1xubGV0IGxlYXJuaW5nX21lc3NhZ2U9IF9pMThuKCdlZGl0X2NoZWNrLmxlYXJuaW5nJyk7XG5sZXQgcm93X3RvX2RlbGV0ZT0gcmVmKG51bGwpO1xubGV0IHJvd190b19lZGl0PSByZWYobnVsbCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdFxufSk7XG5cblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkXG59O1xuXG5jb25zdCBub3Rlc19saXN0ID0gW1xuICBfaTE4bihcImVkaXRfY2hlY2suZGV2aWNlX2V4Y2x1c2lvbl9wYWdlX25vdGVzLm5vdGVfMVwiKVxuXTtcblxuY29uc3Qgc3ViX25vdGVzX2xpc3QgPSBbXG4gIF9pMThuKFwiZWRpdF9jaGVjay5kZXZpY2VfZXhjbHVzaW9uX3BhZ2Vfbm90ZXMuc3ViX25vdGVfMVwiKSxcbiAgX2kxOG4oXCJlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb25fcGFnZV9ub3Rlcy5zdWJfbm90ZV8yXCIpXG5dO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFsbCBidXR0b25zICovXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgXG4gIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICBcImNsaWNrX2J1dHRvbl9lZGl0X2RldmljZVwiOiBjbGlja19idXR0b25fZWRpdF9kZXZpY2UsXG4gICAgXCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93c1wiOiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyxcbiAgICBcImNsaWNrX2J1dHRvbl9kZWxldGVcIjogY2xpY2tfYnV0dG9uX2RlbGV0ZSxcbiAgfTtcbiAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kZWxldGUoZXZlbnQpIHtcbiAgbGV0IGJvZHkgPSBgJHtpMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9kZXZpY2VfZXhjbHVzaW9uJyl9ICR7ZXZlbnQucm93Lm1hY19hZGRyZXNzLm1hY31gO1xuICByb3dfdG9fZGVsZXRlLnZhbHVlID0gZXZlbnQucm93O1xuXG4gIGJvZHlfZGVsZXRlID0gYm9keTtcblxuICB0aXRsZV9kZWxldGUgPSBpMThuKCdlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb24nKTtcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhib2R5X2RlbGV0ZSwgdGl0bGVfZGVsZXRlKTsgICAgXG4gIFxufVxuXG5hc3luYyBmdW5jdGlvbiBjbGlja19idXR0b25fZWRpdF9kZXZpY2UoZXZlbnQpIHtcbiAgcm93X3RvX2VkaXQudmFsdWUgPSBldmVudC5yb3c7XG4gIG1vZGFsX2VkaXRfZGV2aWNlLnZhbHVlLnNob3cocm93X3RvX2VkaXQudmFsdWUpOyAgXG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gIGNvbnN0IHJvd0RhdGEgPSBldmVudC5yb3c7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtyb3dEYXRhLmZpcnN0X3NlZW4udGltZXN0YW1wfSZlcG9jaF9lbmQ9JHtyb3dEYXRhLmxhc3Rfc2Vlbi50aW1lc3RhbXB9Jm1hYz0ke3Jvd0RhdGEubWFjX2FkZHJlc3MubWFjfTtlcSZhZ2dyZWdhdGVkPWZhbHNlYFxuICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbn1cblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcblxuICBhd2FpdCBsZWFybmluZ19zdGF0dXMoKTtcblxufSlcblxuY29uc3QgY3NyZiA9IHByb3BzLmNyc2Y7XG5cbi8qIEZ1bmN0aW9uIHRvIGRlbGV0ZSBkZXZpY2UgKi9cbmNvbnN0IGRlbGV0ZV9yb3cgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19kZWxldGUudmFsdWU7XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGRlbGV0ZV91cmwsIHtcbiAgICBkZXZpY2U6IHJvdy5tYWNfYWRkcmVzcy5tYWMsXG4gIH0pXG5cbiAgcmVzdF9wYXJhbXMuZGV2aWNlID0ge1xuICAgIG1hYzogcm93Lm1hY19hZGRyZXNzLm1hY1xuICB9O1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaCgpO1xuXG59XG5cbmNvbnN0IGRlbGV0ZV9hbGxfY29uZmlybSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBtb2RhbF9kZWxldGVfYWxsLnZhbHVlLnNob3coKTtcbn1cblxuY29uc3QgZWRpdF9hbGxfZGV2aWNlc19jb25maXJtID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIG1vZGFsX2VkaXRfZGV2aWNlLnZhbHVlLnNob3coKTtcbn1cblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIGFsbCBkZXZpY2VzICovXG5jb25zdCBkZWxldGVfYWxsID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZGVsZXRlX3VybCwge1xuICAgIGRldmljZTogJ2FsbCcsXG4gIH0pXG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2goKTtcblxufTtcblxuY29uc3QgbGVhcm5pbmdfc3RhdHVzID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgXG4gIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChsZWFybmluZ19zdGF0dXNfdXJsKTtcbiAgaWYocnNwLmxlYXJuaW5nX2RvbmUpIHtcbiAgICBpc19sZWFybmluZ19zdGF0dXMudmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBpc19sZWFybmluZ19zdGF0dXMudmFsdWUgPSB0cnVlO1xuICB9XG59XG5cbmNvbnN0IHJlZnJlc2ggPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgYXdhaXQgbGVhcm5pbmdfc3RhdHVzKCk7XG4gIHRhYmxlX2RldmljZV9leGNsdXNpb25zLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuZnVuY3Rpb24gYWRkX2RldmljZSgpIHtcbiAgbW9kYWxfYWRkX2RldmljZS52YWx1ZS5zaG93KCk7XG59XG5cbmNvbnN0IGFkZF9kZXZpY2VfcmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChzZXRfcGFyYW1zX2luX3VybCkge1xuICBsZXQgcGFyYW1zID0gc2V0X3BhcmFtc19pbl91cmw7XG4gIHBhcmFtcy5tYWNfbGlzdCA9IHBhcmFtcy5tYWNfbGlzdC5yZXBsYWNlKC8oPzpcXHR8ICkvZywnJylcbiAgcGFyYW1zLm1hY19saXN0ID0gcGFyYW1zLm1hY19saXN0LnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnLCcpO1xuXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfdXJsLCB7XG4gICAgLi4ucGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2goKTtcbiAgICAgICAgICBcbn07XG5cbmNvbnN0IGVkaXRfcm93ID0gYXN5bmMgZnVuY3Rpb24ocGFyYW1zKSB7XG4gIGxldCByb3cgPSByb3dfdG9fZWRpdC52YWx1ZTtcbiAgaWYocm93ICE9IG51bGwpXG4gICAgcGFyYW1zLm1hY19hbGlhcyA9IHBhcmFtcy5tYWNfYWxpYXMucmVwbGFjZSgvKD86XFx0fCApL2csJycpOyAgIFxuICBpZihyb3cgIT0gbnVsbClcbiAgICBwYXJhbXMubWFjID0gcm93Lm1hY19hZGRyZXNzLm1hYztcbiAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jb250ZXh0LmNzcmY7XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGVkaXRfdXJsLCB7XG4gICAgLi4ucGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG5cbiAgcmVmcmVzaCgpO1xufTtcblxuXG5mdW5jdGlvbiBjb2x1bW5zX3NvcnRpbmcoY29sLCByMCwgcjEpIHtcbiAgaWYgKGNvbCAhPSBudWxsKSB7XG4gICAgbGV0IHIwX2NvbCA9IHIwW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgIGxldCByMV9jb2wgPSByMVtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICBpZihjb2wuaWQgPT0gXCJsYXN0X2lwXCIpIHtcbiAgICAgIGlmIChyMF9jb2wgIT0gJycpIHtcbiAgICAgICAgcjBfY29sID0gdGFrZV9pcChyMF9jb2wpO1xuICAgICAgICByMF9jb2wgPSBOdG9wVXRpbHMuY29udmVydElQQWRkcmVzcyhyMF9jb2wpO1xuICAgICAgfSBcbiAgICAgIGlmIChyMV9jb2wgIT0gJycpIHtcbiAgICAgICAgcjFfY29sID0gdGFrZV9pcChyMV9jb2wpO1xuICAgICAgICByMV9jb2wgPSBOdG9wVXRpbHMuY29udmVydElQQWRkcmVzcyhyMV9jb2wpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2UgaWYoY29sLmlkID09IFwibWFudWZhY3R1cmVyXCIgKSB7XG4gICAgICBpZiAocjBfY29sID09PSB1bmRlZmluZWQpIHIwX2NvbCA9ICcnO1xuICAgICAgaWYgKHIxX2NvbCA9PT0gdW5kZWZpbmVkKSByMV9jb2wgPSAnJztcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIGlmKGNvbC5pZCA9PSBcIm1hY19hZGRyZXNzXCIpIHtcbiAgICAgIHIwX2NvbCA9IHIwX2NvbC5tYWM7XG4gICAgICByMV9jb2wgPSByMV9jb2wubWFjO1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9ZWxzZSBpZihjb2wuaWQgPT0gXCJmaXJzdF9zZWVuXCIpIHtcbiAgICAgIHIwX2NvbCA9IHIwW1wiZmlyc3Rfc2VlblwiXVtcInRpbWVzdGFtcFwiXSA9PSAwID8gJycgOiByMFtcImZpcnN0X3NlZW5cIl1bXCJkYXRhXCJdO1xuICAgICAgcjFfY29sID0gcjFbXCJmaXJzdF9zZWVuXCJdW1widGltZXN0YW1wXCJdID09IDAgPyAnJyA6IHIxW1wiZmlyc3Rfc2VlblwiXVtcImRhdGFcIl07XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSBpZihjb2wuaWQgPT0gXCJsYXN0X3NlZW5cIikge1xuICAgICAgcjBfY29sID0gcjBbXCJsYXN0X3NlZW5cIl1bXCJ0aW1lc3RhbXBcIl0gPT0gMCA/ICcnIDogcjBbXCJsYXN0X3NlZW5cIl1bXCJkYXRhXCJdO1xuICAgICAgcjFfY29sID0gcjFbXCJsYXN0X3NlZW5cIl1bXCJ0aW1lc3RhbXBcIl0gPT0gMCA/ICcnIDogcjFbXCJsYXN0X3NlZW5cIl1bXCJkYXRhXCJdO1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInN0YXR1c1wiKSB7XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwidHJpZ2dlcl9hbGVydFwiKSB7XG4gICAgICByMF9jb2wgPSBmb3JtYXRfYm9vbChyMF9jb2wpO1xuICAgICAgcjFfY29sID0gZm9ybWF0X2Jvb2wocjFfY29sKTtcblxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHRha2VfaXAocl9jb2wpIHtcbiAgY29uc3QgaXAgPSByX2NvbC5zcGxpdCgnaG9zdD0nKVsxXS5zcGxpdChcIlxcJ1wiKVswXTtcbiAgcmV0dXJuIGlwO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRfYm9vbChyX2NvbCkge1xuICBpZiAocl9jb2wpIHtcbiAgICByZXR1cm4gJ3RydWUnO1xuICB9XG5cbiAgaWYgKCFyX2NvbCkge1xuICAgIHJldHVybiAnZmFsc2UnO1xuICB9XG5cbiAgaWYgKHJfY29sID09ICd0cnVlJykge1xuICAgIHJldHVybiByX2NvbDtcbiAgfVxuXG4gIGlmIChyX2NvbCA9PSAnZmFsc2UnKSB7XG4gICAgcmV0dXJuIHJfY29sO1xuICB9XG59XG5cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IGFzeW5jIChjb2x1bW5zKSA9PiB7XG4gICAgXG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcIm1hY19hZGRyZXNzXCI6IChkYXRhLCByb3cpID0+IHtcbiAgICAgIGxldCBsYWJlbCA9IGRhdGEubWFjO1xuICAgICAgbGV0IGFsaWFzID0gZGF0YS5hbGlhcztcblxuICAgICAgaWYgKChkYXRhLnN5bWJvbGljX21hYykgJiYgKGRhdGEuc3ltYm9saWNfbWFjICE9IGxhYmVsKSlcbiAgICAgICAgbGFiZWwgPSBkYXRhLnN5bWJvbGljX21hYztcblxuICAgICAgaWYgKChhbGlhcyAhPSBudWxsKSAmJiAoYWxpYXMgIT0gbGFiZWwpKVxuICAgICAgICBsYWJlbCA9IGAke2xhYmVsfSAoJHthbGlhc30pYDtcblxuICAgICAgaWYgKGRhdGEudXJsICE9IG51bGwpXG4gICAgICAgIGxhYmVsID0gYDxhIGhyZWY9JyR7ZGF0YS51cmx9JyB0aXRsZT0nJHtkYXRhLm1hY30nPiR7bGFiZWx9PC9hPmA7XG5cbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIFwiZmlyc3Rfc2VlblwiOiAoZmlyc3Rfc2Vlbiwgcm93KSA9PiB7XG4gICAgICBpZiAoZmlyc3Rfc2Vlbi50aW1lc3RhbXAgPT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmlyc3Rfc2Vlbi5kYXRhO1xuICAgICAgfVxuICAgIH0sIFxuICAgIFwibGFzdF9zZWVuXCI6IChsYXN0X3NlZW4sIHJvdykgPT4ge1xuICAgICAgaWYgKGxhc3Rfc2Vlbi50aW1lc3RhbXAgPT0gMCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGFzdF9zZWVuLmRhdGE7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInN0YXR1c1wiOiAoc3RhdHVzLCByb3cpID0+IHtcbiAgICAgIC8vPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zdWNjZXNzXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPlxuICAgICAgLy88c3BhbiBjbGFzcz1cImJhZGdlIGJnLWRhbmdlclwiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5cbiAgICAgIC8vY29uc3QgbGFiZWwgPSBfaTE4bihzdGF0dXMpO1xuICAgICAgbGV0IGxhYmVsID0gXCJcIjtcbiAgICAgIGlmIChzdGF0dXMgPT0gXCJhbGxvd2VkXCIpIHtcbiAgICAgICAgbGFiZWwgPSBfaTE4bihcImVkaXRfY2hlY2suYXV0aG9yaXplZFwiKTtcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXN1Y2Nlc3NcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWwgPSBfaTE4bihcImVkaXRfY2hlY2sudW5hdXRob3JpemVkXCIpO1xuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctZGFuZ2VyXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmBcbiAgICAgIH1cblxuICAgIH0sXG4gICAgXCJ0cmlnZ2VyX2FsZXJ0XCI6ICh0cmlnZ2VyX2FsZXJ0LCByb3cpID0+IHtcbiAgICAgIGxldCBpc19lbmFibGVkID0gZmFsc2U7XG4gICAgICBpZiAodHJpZ2dlcl9hbGVydCA9PSBcImZhbHNlXCIpIFxuICAgICAgICBpc19lbmFibGVkID0gZmFsc2U7XG4gICAgICBlbHNlXG4gICAgICAgIGlzX2VuYWJsZWQgPSB0cmlnZ2VyX2FsZXJ0O1xuICAgICAgcmV0dXJuIGlzX2VuYWJsZWQgPyBgPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2sgdGV4dC1zdWNjZXNzXCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXMgdGV4dC1kYW5nZXJcIj48L2k+YDtcbiAgICB9XG4gIH1cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICAvKmlmIChjLmlkID09IFwiYWN0aW9uc1wiKSB7XG4gICAgICAgICAgICBcbiAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgXG4gICAgICAgIGIuZl9tYXBfY2xhc3MgPSAoY3VycmVudF9jbGFzcywgcm93KSA9PiB7IFxuICAgICAgICAgIGN1cnJlbnRfY2xhc3MgPSBjdXJyZW50X2NsYXNzLmZpbHRlcigoY2xhc3NfaXRlbSkgPT4gY2xhc3NfaXRlbSAhPSBcImxpbmstZGlzYWJsZWRcIik7XG4gICAgICAgICAgaWYoKHJvdy5pc19va19sYXN0X3NjYW4gPT0gNCB8fCByb3cuaXNfb2tfbGFzdF9zY2FuID09IG51bGwgfHwgcm93Lm51bV9vcGVuX3BvcnRzIDwgMSkgJiYgdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgICBjdXJyZW50X2NsYXNzLnB1c2goXCJsaW5rLWRpc2FibGVkXCIpOyBcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRfY2xhc3M7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0qL1xuICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZyhjb2x1bW5zKTtcbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICAvKmxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcyhhY3RpdmVfcGFnZSwgcGVyX3BhZ2UsIGNvbHVtbnNfd3JhcCwgbWFwX3NlYXJjaCwgZmlyc3RfZ2V0X3Jvd3MpO1xuICAgIHNldF9wYXJhbXNfaW5fdXJsKHBhcmFtcyk7Ki9cbiAgICBsZXQgcGFyYW1zID0gZ2V0X3VybF9wYXJhbXMoKTtcbiAgICByZXR1cm4gcGFyYW1zO1xufTtcblxuZnVuY3Rpb24gZ2V0X3VybF9wYXJhbXMoKSB7XG4gICAgbGV0IGFjdHVhbF9wYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgfTsgICAgXG5cbiAgICByZXR1cm4gYWN0dWFsX3BhcmFtcztcbn1cblxuY29uc3QgbWFwX2NvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4gY29uZmlnO1xufTtcblxuPC9zY3JpcHQ+XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFRMUyBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF90bHNcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2ZpbmdlcnByaW50XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxiPnt7IGkxOG4oJ2ZpbmdlcnByaW50X25vdGUnKSB9fTwvYj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2ZpbmdlcnByaW50YF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImphM19jbGllbnRfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9O1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFRMUyBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF90bHNcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2ZpbmdlcnByaW50XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxiPnt7IGkxOG4oJ2ZpbmdlcnByaW50X25vdGUnKSB9fTwvYj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2ZpbmdlcnByaW50YF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImphM19jbGllbnRfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9O1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF9zc2hcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2hhc3NoXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hhc3NoYF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhhc3NoX2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInRhYmxlX2hvc3Rfc3NoXCI+XG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9oYXNzaFwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge30sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9oYXNzaGBdO1xuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMyAvKiBDb250YWN0cyBjb2x1bW4gKi87XG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9maW5nZXJwcmludC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJoYXNzaF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48cGFnZS1uYXZiYXJcbiAgaWQ9XCJwYWdlX25hdmJhclwiXG4gIDptYWluX3RpdGxlPVwibmF2YmFyX2NvbnRleHQubWFpbl90aXRsZVwiXG4gIDpzZWNvbmRhcnlfdGl0bGVfbGlzdD1cIm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0XCJcbiAgOmhlbHBfbGluaz1cIm5hdmJhcl9jb250ZXh0LmhlbHBfbGlua1wiXG4gIDppdGVtc190YWJsZT1cIm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlXCJcbiAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG48L3BhZ2UtbmF2YmFyPlxuXG48cGFnZS1zZXJ2aWNlLW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnc2VydmljZV9tYXAnICYmIHBhZ2UgPT0gJ2dyYXBoJ1wiIHJlZj1cInNlcnZpY2VfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJzZXJ2aWNlX21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXNlcnZpY2UtbWFwPlxuXG48cGFnZS1zZXJ2aWNlLXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwic2VydmljZV9tYXBfdGFibGVcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICA6dGFibGVfZmlsdGVycz1cInNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gIDpzZXJ2aWNlX2FjY2VwdGFuY2U9XCJzZXJ2aWNlX2FjY2VwdGFuY2VcIj5cbjwvcGFnZS1zZXJ2aWNlLXRhYmxlPlxuXG48cGFnZS1wZXJpb2RpY2l0eS1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJwZXJpb2RpY2l0eV9tYXBfZmlsdGVyX2xpc3RcIj5cbjwvcGFnZS1wZXJpb2RpY2l0eS1tYXA+XG5cbjxwYWdlLXBlcmlvZGljaXR5LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdwZXJpb2RpY2l0eV9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cInBlcmlvZGljaXR5X21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwicGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LXRhYmxlPlxuXG48dGVtcGxhdGUgdi1pZj1cImFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8cGFnZS1hc3NldC1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ2Fzc2V0X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwiYXNzZXRfbWFwX2dyYXBoXCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgIDppZmlkPVwiaWZpZFwiXG4gICAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICAgIDptYXBfaWQ9XCJtYXBfaWRcIlxuICAgIDphbGxfZmlsdGVyX2xpc3Q9XCJhc3NldF9tYXBfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LW1hcD5cblxuICA8cGFnZS1hc3NldC10YWJsZSB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJhc3NldF9tYXBfdGFibGVcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICAgIDp0YWJsZV9maWx0ZXJzPVwiYXNzZXRfdGFibGVfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LXRhYmxlPlxuPC90ZW1wbGF0ZT5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlUYWJsZSB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5TWFwIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0VGFibGUgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LXRhYmxlLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldE1hcCB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlVGFibGUgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VNYXAgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuICBjb25zdCBjaGFuZ2VfbWFwX2V2ZW50ID0gXCJjaGFuZ2VfbWFwX2V2ZW50XCI7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS1tYXAnOiBQYWdlUGVyaW9kaWNpdHlNYXAsXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS10YWJsZSc6IFBhZ2VQZXJpb2RpY2l0eVRhYmxlLFxuICAgICAgJ3BhZ2UtYXNzZXQtbWFwJzogUGFnZUFzc2V0TWFwLFxuICAgICAgJ3BhZ2UtYXNzZXQtdGFibGUnOiBQYWdlQXNzZXRUYWJsZSxcbiAgICAgICdwYWdlLXNlcnZpY2UtbWFwJzogUGFnZVNlcnZpY2VNYXAsXG4gICAgICAncGFnZS1zZXJ2aWNlLXRhYmxlJzogUGFnZVNlcnZpY2VUYWJsZSxcbiAgICAgICdwYWdlLW5hdmJhcic6IFBhZ2VOYXZiYXIsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgICBiYXNlX3VybF9wYXJhbXM6IE9iamVjdCxcbiAgICAgIGlmaWQ6IE51bWJlcixcbiAgICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgICB2aWV3OiBTdHJpbmcsXG4gICAgICBuYXZiYXJfaW5mbzogT2JqZWN0LFxuICAgICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgICAgIHNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICAgIHBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICAgICAgcGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgYXNzZXRfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBhc3NldF90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5iYXNlX3VybF9wYXJhbXNcbiAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRoaXMuJHByb3BzLm1hcF9pZFxuICAgICAgdGhpcy5wYWdlID0gdGhpcy51cmxfcGFyYW1zLnBhZ2VcbiAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gdGhpcy4kcHJvcHMudmlld1xuXG4gICAgICBpZihhc3NldF9tYXBfZmlsdGVyX2xpc3QgJiYgYXNzZXRfdGFibGVfZmlsdGVyX2xpc3QpIHtcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgY2xhc3M6IFwiZGlzYWJsZWQgcHMtMCBwZS0wXCIsIGxhYmVsOiAnLScgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgaWNvbjogXCJmYXMgZmEtbGcgZmEtY29tcGFzc1wiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdhc3NldF9tYXAnKSwgbGFiZWw6IGkxOG4oJ2Fzc2V0JykgKyBcIjogXCIgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIChpLmlkID09IHRoaXMuYWN0aXZlX3RhYiAmJiBpLnBhZ2UgPT0gdGhpcy5wYWdlKSA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgIFxuICAgICAgY29uc3QgZm9ybWF0X25hdmJhciA9IHRoaXMuZm9ybWF0X25hdmJhcl90aXRsZTtcbiAgICAgIGZvcm1hdF9uYXZiYXIodGhpcy4kcHJvcHMubmF2YmFyX2luZm8pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9uYXZiYXJcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICAgIGZvcm1hdF9uYXZiYXIoeyBzZWxlY3RlZF9pZmFjZTogdGhpcy4kcHJvcHMubmF2YmFyX2luZm8uc2VsZWN0ZWRfaWZhY2UsIHNlbGVjdGVkX2hvc3Q6IG5vZGUgfSk7XG4gICAgICB9KTtcblxuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2VfbWFwX2V2ZW50LCAodGFiKSA9PiB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbWFwJywgdGFiLmlkKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgdGFiLnBhZ2UpO1xuICAgICAgICBpZih0YWIucGFnZSA9PSAndGFibGUnKVxuICAgICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFjdGl2ZV90YWIgPSB0YWIuaWRcbiAgICAgICAgdGhpcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cmxfcGFyYW1zLm1hcCA9IHRhYi5pZFxuICAgICAgICB0aGlzLnVybF9wYXJhbXMucGFnZSA9IHRhYi5wYWdlXG4gICAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKVxuICAgICAgICBmb3JtYXRfbmF2YmFyKClcbiAgICAgfSk7XG4gICAgfSwgICAgXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICBhY3RpdmVfdGFiOiBudWxsLFxuICAgICAgICBwYWdlOiBudWxsLFxuICAgICAgICB1cmxfcGFyYW1zOiB7fSxcbiAgICAgICAgdXBkYXRlZF92aWV3OiBudWxsLFxuICAgICAgICBuYXZiYXJfbm9kZToge30sXG4gICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG4gICAgICAgICAgbWFpbl90aXRsZToge1xuICAgICAgICAgICAgbGFiZWw6ICcgJyArIGkxOG4oXCJtYXBzXCIpLFxuICAgICAgICAgICAgaWNvbjogXCJmYXMgZmEtbWFwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogW10sXG4gICAgICAgICAgaXRlbXNfdGFibGU6IFtcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgaWNvbjogXCJmYXMgZmEtbGcgZmEtY29uY2llcmdlLWJlbGxcIiwgY2xhc3M6IFwiZGlzYWJsZWQgcGUtMFwiLCB0aXRsZTogaTE4bignc2VydmljZV9tYXAnKSwgbGFiZWw6IGkxOG4oJ3NlcnZpY2UnKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IHRydWUsIGxhYmVsOiBpMThuKCdtYXBfZm9ybWF0JyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jbG9ja1wiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdwZXJpb2RpY2l0eV9tYXAnKSwgbGFiZWw6IGkxOG4oJ3BlcmlvZGljaXR5JykgKyBcIjogXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHsgXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRfdGFiID0gdGhpcy5nZXRfYWN0aXZlX3RhYigpO1xuICAgICAgICBjdXJyZW50X3RhYi5kZXN0cm95KClcbiAgICAgIH0sXG4gICAgICBmb3JtYXRfbmF2YmFyX3RpdGxlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9ub2RlID0gZGF0YSAvKiBVcGRhdGUgbmF2YmFyIG5vZGUgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gdGhpcy5uYXZiYXJfbm9kZSAvKiBVc2UgdGhlIG9sZCBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QgPSBbXG4gICAgICAgICAgeyBsYWJlbDogZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbCwgdGl0bGU6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbH1gLCAxNikgfVxuICAgICAgICBdXG5cbiAgICAgICAgaWYoZGF0YS5zZWxlY3RlZF9ob3N0ICYmIGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCAhPSAnJykge1xuICAgICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IGRhdGEuc2VsZWN0ZWRfaG9zdC5sYWJlbDtcbiAgICAgICAgICBjb25zdCBpcCA9IE50b3BVdGlscy5yZW1vdmVWbGFuKGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCk7XG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdFswXVsnaHJlZiddID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhP21hcD0ke3RoaXMuYWN0aXZlX3RhYn0mcGFnZT0ke3RoaXMucGFnZX0maWZpZD0ke3RoaXMuJHByb3BzLmlmaWR9YFxuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogYCR7TnRvcFV0aWxzLmZvcm1hdE5hbWVWYWx1ZShob3N0X25hbWUsIGlwKX1gLCAvLyBBZGRpbmcgdGhlIGxhcHRvcCBpY29uXG4gICAgICAgICAgICB0aXRsZTogYCR7ZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsfWAsXG4gICAgICAgICAgICBocmVmOiBkYXRhLnNlbGVjdGVkX2hvc3QuaXNfYWN0aXZlID8gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtpcH1gIDogbnVsbCxcbiAgICAgICAgICAgIGljb246IFwiZmEtc29saWQgZmEtbGFwdG9wXCIsXG4gICAgICAgICAgICB0YXJnZXRfYmxhbms6IFwidHJ1ZVwiLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gIFxuICAgICAgfSxcbiAgICAgIGdldF9hY3RpdmVfdGFiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbdGhpcy5hY3RpdmVfdGFiICsgXCJfXCIgKyB0aGlzLnBhZ2VdO1xuICAgICAgfSxcbiAgICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmKGl0ZW0uaWQgIT0gdGhpcy5hY3RpdmVfdGFiIHx8IGl0ZW0ucGFnZSAhPSB0aGlzLnBhZ2UpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX21hcF9ldmVudCwgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfSAgXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48cGFnZS1uYXZiYXJcbiAgaWQ9XCJwYWdlX25hdmJhclwiXG4gIDptYWluX3RpdGxlPVwibmF2YmFyX2NvbnRleHQubWFpbl90aXRsZVwiXG4gIDpzZWNvbmRhcnlfdGl0bGVfbGlzdD1cIm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0XCJcbiAgOmhlbHBfbGluaz1cIm5hdmJhcl9jb250ZXh0LmhlbHBfbGlua1wiXG4gIDppdGVtc190YWJsZT1cIm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlXCJcbiAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG48L3BhZ2UtbmF2YmFyPlxuXG48cGFnZS1zZXJ2aWNlLW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnc2VydmljZV9tYXAnICYmIHBhZ2UgPT0gJ2dyYXBoJ1wiIHJlZj1cInNlcnZpY2VfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJzZXJ2aWNlX21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXNlcnZpY2UtbWFwPlxuXG48cGFnZS1zZXJ2aWNlLXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwic2VydmljZV9tYXBfdGFibGVcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICA6dGFibGVfZmlsdGVycz1cInNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gIDpzZXJ2aWNlX2FjY2VwdGFuY2U9XCJzZXJ2aWNlX2FjY2VwdGFuY2VcIj5cbjwvcGFnZS1zZXJ2aWNlLXRhYmxlPlxuXG48cGFnZS1wZXJpb2RpY2l0eS1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX2dyYXBoXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDppZmlkPVwiaWZpZFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gIDphbGxfZmlsdGVyX2xpc3Q9XCJwZXJpb2RpY2l0eV9tYXBfZmlsdGVyX2xpc3RcIj5cbjwvcGFnZS1wZXJpb2RpY2l0eS1tYXA+XG5cbjxwYWdlLXBlcmlvZGljaXR5LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdwZXJpb2RpY2l0eV9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cInBlcmlvZGljaXR5X21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwicGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3RcIlxuICA6aXNfYWRtaW49XCJpc19hZG1pblwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LXRhYmxlPlxuXG48dGVtcGxhdGUgdi1pZj1cImFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8cGFnZS1hc3NldC1tYXAgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ2Fzc2V0X21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwiYXNzZXRfbWFwX2dyYXBoXCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICAgIDppZmlkPVwiaWZpZFwiXG4gICAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICAgIDptYXBfaWQ9XCJtYXBfaWRcIlxuICAgIDphbGxfZmlsdGVyX2xpc3Q9XCJhc3NldF9tYXBfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LW1hcD5cblxuICA8cGFnZS1hc3NldC10YWJsZSB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJhc3NldF9tYXBfdGFibGVcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOnZpZXc9XCJ1cGRhdGVkX3ZpZXdcIlxuICAgIDp0YWJsZV9maWx0ZXJzPVwiYXNzZXRfdGFibGVfZmlsdGVyX2xpc3RcIj5cbiAgPC9wYWdlLWFzc2V0LXRhYmxlPlxuPC90ZW1wbGF0ZT5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlUYWJsZSB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5TWFwIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0VGFibGUgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LXRhYmxlLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldE1hcCB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlVGFibGUgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VNYXAgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtbWFwLnZ1ZVwiO1xuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VOYXZiYXIgfSBmcm9tIFwiLi9wYWdlLW5hdmJhci52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuICBjb25zdCBjaGFuZ2VfbWFwX2V2ZW50ID0gXCJjaGFuZ2VfbWFwX2V2ZW50XCI7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS1tYXAnOiBQYWdlUGVyaW9kaWNpdHlNYXAsXG4gICAgICAncGFnZS1wZXJpb2RpY2l0eS10YWJsZSc6IFBhZ2VQZXJpb2RpY2l0eVRhYmxlLFxuICAgICAgJ3BhZ2UtYXNzZXQtbWFwJzogUGFnZUFzc2V0TWFwLFxuICAgICAgJ3BhZ2UtYXNzZXQtdGFibGUnOiBQYWdlQXNzZXRUYWJsZSxcbiAgICAgICdwYWdlLXNlcnZpY2UtbWFwJzogUGFnZVNlcnZpY2VNYXAsXG4gICAgICAncGFnZS1zZXJ2aWNlLXRhYmxlJzogUGFnZVNlcnZpY2VUYWJsZSxcbiAgICAgICdwYWdlLW5hdmJhcic6IFBhZ2VOYXZiYXIsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgICBiYXNlX3VybF9wYXJhbXM6IE9iamVjdCxcbiAgICAgIGlmaWQ6IE51bWJlcixcbiAgICAgIGlzX2FkbWluOiBCb29sZWFuLFxuICAgICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgICB2aWV3OiBTdHJpbmcsXG4gICAgICBuYXZiYXJfaW5mbzogT2JqZWN0LFxuICAgICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgICAgIHNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICAgIHBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdDogT2JqZWN0LFxuICAgICAgcGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgYXNzZXRfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBhc3NldF90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5iYXNlX3VybF9wYXJhbXNcbiAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRoaXMuJHByb3BzLm1hcF9pZFxuICAgICAgdGhpcy5wYWdlID0gdGhpcy51cmxfcGFyYW1zLnBhZ2VcbiAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gdGhpcy4kcHJvcHMudmlld1xuXG4gICAgICBpZihhc3NldF9tYXBfZmlsdGVyX2xpc3QgJiYgYXNzZXRfdGFibGVfZmlsdGVyX2xpc3QpIHtcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgY2xhc3M6IFwiZGlzYWJsZWQgcHMtMCBwZS0wXCIsIGxhYmVsOiAnLScgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgaWNvbjogXCJmYXMgZmEtbGcgZmEtY29tcGFzc1wiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdhc3NldF9tYXAnKSwgbGFiZWw6IGkxOG4oJ2Fzc2V0JykgKyBcIjogXCIgfSlcbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5wdXNoKHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcImFzc2V0X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5pdGVtc190YWJsZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgIChpLmlkID09IHRoaXMuYWN0aXZlX3RhYiAmJiBpLnBhZ2UgPT0gdGhpcy5wYWdlKSA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgIFxuICAgICAgY29uc3QgZm9ybWF0X25hdmJhciA9IHRoaXMuZm9ybWF0X25hdmJhcl90aXRsZTtcbiAgICAgIGZvcm1hdF9uYXZiYXIodGhpcy4kcHJvcHMubmF2YmFyX2luZm8pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9uYXZiYXJcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICAgIGZvcm1hdF9uYXZiYXIoeyBzZWxlY3RlZF9pZmFjZTogdGhpcy4kcHJvcHMubmF2YmFyX2luZm8uc2VsZWN0ZWRfaWZhY2UsIHNlbGVjdGVkX2hvc3Q6IG5vZGUgfSk7XG4gICAgICB9KTtcblxuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYlwiLCBjaGFuZ2VfbWFwX2V2ZW50LCAodGFiKSA9PiB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbWFwJywgdGFiLmlkKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgdGFiLnBhZ2UpO1xuICAgICAgICBpZih0YWIucGFnZSA9PSAndGFibGUnKVxuICAgICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmFjdGl2ZV90YWIgPSB0YWIuaWRcbiAgICAgICAgdGhpcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cmxfcGFyYW1zLm1hcCA9IHRhYi5pZFxuICAgICAgICB0aGlzLnVybF9wYXJhbXMucGFnZSA9IHRhYi5wYWdlXG4gICAgICAgIHRoaXMudXBkYXRlZF92aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKVxuICAgICAgICBmb3JtYXRfbmF2YmFyKClcbiAgICAgfSk7XG4gICAgfSwgICAgXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICBhY3RpdmVfdGFiOiBudWxsLFxuICAgICAgICBwYWdlOiBudWxsLFxuICAgICAgICB1cmxfcGFyYW1zOiB7fSxcbiAgICAgICAgdXBkYXRlZF92aWV3OiBudWxsLFxuICAgICAgICBuYXZiYXJfbm9kZToge30sXG4gICAgICAgIG5hdmJhcl9jb250ZXh0OiB7XG4gICAgICAgICAgbWFpbl90aXRsZToge1xuICAgICAgICAgICAgbGFiZWw6ICcgJyArIGkxOG4oXCJtYXBzXCIpLFxuICAgICAgICAgICAgaWNvbjogXCJmYXMgZmEtbWFwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogW10sXG4gICAgICAgICAgaXRlbXNfdGFibGU6IFtcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgaWNvbjogXCJmYXMgZmEtbGcgZmEtY29uY2llcmdlLWJlbGxcIiwgY2xhc3M6IFwiZGlzYWJsZWQgcGUtMFwiLCB0aXRsZTogaTE4bignc2VydmljZV9tYXAnKSwgbGFiZWw6IGkxOG4oJ3NlcnZpY2UnKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IHRydWUsIGxhYmVsOiBpMThuKCdtYXBfZm9ybWF0JyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcInNlcnZpY2VfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jbG9ja1wiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdwZXJpb2RpY2l0eV9tYXAnKSwgbGFiZWw6IGkxOG4oJ3BlcmlvZGljaXR5JykgKyBcIjogXCIgfSxcbiAgICAgICAgICAgIHsgYWN0aXZlOiBmYWxzZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwiZ3JhcGhcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICcvJyB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bigndGFibGVfZm9ybWF0JyksIGlkOiBcInBlcmlvZGljaXR5X21hcFwiLCBwYWdlOiBcInRhYmxlXCIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHsgXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRfdGFiID0gdGhpcy5nZXRfYWN0aXZlX3RhYigpO1xuICAgICAgICBjdXJyZW50X3RhYi5kZXN0cm95KClcbiAgICAgIH0sXG4gICAgICBmb3JtYXRfbmF2YmFyX3RpdGxlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9ub2RlID0gZGF0YSAvKiBVcGRhdGUgbmF2YmFyIG5vZGUgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gdGhpcy5uYXZiYXJfbm9kZSAvKiBVc2UgdGhlIG9sZCBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QgPSBbXG4gICAgICAgICAgeyBsYWJlbDogZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbCwgdGl0bGU6IE50b3BVdGlscy5zaG9ydGVuTGFiZWwoYCR7ZGF0YS5zZWxlY3RlZF9pZmFjZS5sYWJlbH1gLCAxNikgfVxuICAgICAgICBdXG5cbiAgICAgICAgaWYoZGF0YS5zZWxlY3RlZF9ob3N0ICYmIGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCAhPSAnJykge1xuICAgICAgICAgIGNvbnN0IGhvc3RfbmFtZSA9IGRhdGEuc2VsZWN0ZWRfaG9zdC5sYWJlbDtcbiAgICAgICAgICBjb25zdCBpcCA9IE50b3BVdGlscy5yZW1vdmVWbGFuKGRhdGEuc2VsZWN0ZWRfaG9zdC5pZCk7XG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdFswXVsnaHJlZiddID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhP21hcD0ke3RoaXMuYWN0aXZlX3RhYn0mcGFnZT0ke3RoaXMucGFnZX0maWZpZD0ke3RoaXMuJHByb3BzLmlmaWR9YFxuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3QucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogYCR7TnRvcFV0aWxzLmZvcm1hdE5hbWVWYWx1ZShob3N0X25hbWUsIGlwKX1gLCAvLyBBZGRpbmcgdGhlIGxhcHRvcCBpY29uXG4gICAgICAgICAgICB0aXRsZTogYCR7ZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsfWAsXG4gICAgICAgICAgICBocmVmOiBkYXRhLnNlbGVjdGVkX2hvc3QuaXNfYWN0aXZlID8gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtpcH1gIDogbnVsbCxcbiAgICAgICAgICAgIGljb246IFwiZmEtc29saWQgZmEtbGFwdG9wXCIsXG4gICAgICAgICAgICB0YXJnZXRfYmxhbms6IFwidHJ1ZVwiLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gIFxuICAgICAgfSxcbiAgICAgIGdldF9hY3RpdmVfdGFiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbdGhpcy5hY3RpdmVfdGFiICsgXCJfXCIgKyB0aGlzLnBhZ2VdO1xuICAgICAgfSxcbiAgICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmKGl0ZW0uaWQgIT0gdGhpcy5hY3RpdmVfdGFiIHx8IGl0ZW0ucGFnZSAhPSB0aGlzLnBhZ2UpIHtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX21hcF9ldmVudCwgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfSAgXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2PlxuICA8c3ZnXG4gICAgcmVmPVwic2Fua2V5X2NoYXJ0X3JlZlwiXG4gICAgOndpZHRoPVwic2Fua2V5X3NpemUud2lkdGhcIlxuICAgIDpoZWlnaHQ9XCJzYW5rZXlfc2l6ZS5oZWlnaHRcIlxuICAgIHN0eWxlPVwibWFyZ2luOjEwcHg7XCI+XG4gICAgPGRlZnMgLz5cbiAgICA8ZyBjbGFzcz1cIm5vZGVzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC41O1wiLz5cbiAgICA8ZyBjbGFzcz1cImxpbmtzXCJcbiAgICAgICBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjM7IGZpbGw6IG5vbmU7XCIvPlxuICAgIDxnIGNsYXNzPVwidGV4dHNcIiAvPlxuICA8L3N2Zz5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBkMyA9IGQzdjc7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHdpZHRoOiBOdW1iZXIsXG4gICAgaGVpZ2h0OiBOdW1iZXIsXG59KTtcblxuY29uc3Qgc2Fua2V5X2NoYXJ0X3JlZiA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9zaXplID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudChhc3luYygpID0+IHt9KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHsgICAgXG4gICAgZHJhd19zYW5rZXkoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBkcmF3X3NhbmtleSgpIHtcbiAgICBjb25zdCBjb2xvcnMgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XG4gICAgbGV0IGRhdGEgPSBhd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBjb25zdCBzaXplID0gZ2V0X3NpemUoKTtcbiAgICBzYW5rZXlfc2l6ZS52YWx1ZSA9IHNpemU7XG4gICAgY29uc3QgeyBsaW5rcywgbm9kZXMgfSA9IGNhbGN1bGF0ZV9zYW5rZXkoZGF0YSwgc2l6ZS53aWR0aCAtIDEwLCBzaXplLmhlaWdodCAtIDUpO1xuICAgIFxuICAgIGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQuc2VsZWN0KFwiZy5ub2Rlc1wiKVxuXHQuc2VsZWN0QWxsKFwicmVjdFwiKVxuXHQuZGF0YShub2Rlcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBlID0gZW50ZXIuYXBwZW5kKFwicmVjdFwiKTtcblx0XHRcblx0XHRlLmF0dHIoXCJ4XCIsIChkKSA9PiBkLngwKS5hdHRyKFwieVwiLCAoZCkgPT4gZC55MCk7XG5cdFx0XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcImhlaWdodFwiLCAoZCkgPT4gZC55MSAtIGQueTApXG5cdFx0ICAgIC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQueDEgLSBkLngwKVxuXHRcdCAgICAuYXR0cihcImRhdGFJbmRleFwiLCAoZCkgPT4gZC5pbmRleClcblx0XHQgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiBjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuXHRcdGUuYXBwZW5kKFwidGl0bGVcIikudGV4dCgoZCkgPT4gYCR7ZC5uYW1lfVxcbiR7ZC5ob3Vyc31gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PlxuXHRcdHVwZGF0ZVxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0LmRlbGF5KDUwMClcblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5hdHRyKFwieFwiLCAoZCkgPT4gZC54MClcblx0XHQuYXR0cihcInlcIiwgKGQpID0+IGQueTApXG5cdFx0LmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHRcdC5hdHRyKFwid2lkdGhcIiwgKGQpID0+IGQueDEgLSBkLngwKVxuXHRcdC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHRcdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKVxuXHRcdC5zZWxlY3QoXCJ0aXRsZVwiKVxuXHRcdC50ZXh0KChkKSA9PiBgJHtkLm5hbWV9XFxuJHtkLmhvdXJzfWApLFxuICAgICAgICAgICAgKGV4aXQpID0+XG5cdFx0ZXhpdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpLmR1cmF0aW9uKDUwMCkuc3R5bGUoXCJvcGFjaXR5XCIsIDApLnJlbW92ZSgpXG5cdCkub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAvL3RvZG8gcG9ydGFyZSBmdW9yaVxuXHQgICAgLy8gZGF0YSA9IGRhdGEuY3VycmVudFRhcmdldC5fX2RhdGFfX1xuXHQgICAgLy8gY29uc3Qgc291cmNlTGluayA9IGRhdGEuc291cmNlTGlua3M7XG5cdCAgICAvLyBjb25zdCB0YXJnZXRMaW5rID0gZGF0YS50YXJnZXRMaW5rcztcblx0ICAgIC8vIGNvbnN0IGxpbmsgPSAoc291cmNlTGluayAmJiBzb3VyY2VMaW5rWzBdKSA/IHNvdXJjZUxpbmtbMF0gOiB0YXJnZXRMaW5rWzBdO1xuXHQgICAgXG5cdCAgICAvLyBpZihsaW5rKSB7XG5cdCAgICAvLyAgIC8qIEdldCB0aGUgbm9kZSBsaW5rIGZyb20gdGhlIHJlc3QgKi9cblx0ICAgIC8vICAgaWYobGluay5zb3VyY2UuaWQgPT09IGRhdGEuaWQpIHtcblx0ICAgIC8vICAgICBpZihsaW5rLnNvdXJjZV9saW5rICYmIGxpbmsuc291cmNlX2xpbmsgIT09ICcnKVxuXHQgICAgLy8gICAgICAgd2luZG93Lm9wZW4obGluay5zb3VyY2VfbGluaywgJ19ibGFuaycpO1xuXHQgICAgLy8gICB9IGVsc2UgaWYobGluay50YXJnZXQuaWQgPT09IGRhdGEuaWQpIHtcblx0ICAgIC8vICAgICBpZihsaW5rLnRhcmdldF9saW5rICYmIGxpbmsudGFyZ2V0X2xpbmsgIT09ICcnKVxuXHQgICAgLy8gICAgICAgd2luZG93Lm9wZW4obGluay50YXJnZXRfbGluaywgJ19ibGFuaycpO1xuXHQgICAgLy8gICB9IFxuXHQgICAgLy8gfSBcblx0fSk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLnRleHRzXCIpXG5cdC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJ0ZXh0XCIpO1xuXHRcdFxuXHRcdGUudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdCAgICAuZGVsYXkoMTAwMClcblx0XHQgICAgLmR1cmF0aW9uKDUwMClcblx0XHQgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiAoZC54MCA8IHNpemUud2lkdGggLyAyID8gZC54MSArIDYgOiBkLngwIC0gNikpXG5cdFx0ICAgIC5hdHRyKFwieVwiLCAoZCkgPT4gKGQueTEgKyBkLnkwKSAvIDIpXG5cdFx0ICAgIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdFx0ICAgIC5hdHRyKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpXG5cdFx0ICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgKGQpID0+XG5cdFx0XHQgIGQueDAgPCBzaXplLndpZHRoIC8gMiA/IFwic3RhcnRcIiA6IFwiZW5kXCJcblx0XHRcdCApXG5cdFx0ICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDkpXG5cdFx0ICAgIC50ZXh0KChkKSA9PiBkLm5hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJ4XCIsIChkKSA9PiAoZC54MCA8IHNpemUud2lkdGggLyAyID8gZC54MSArIDYgOiBkLngwIC0gNikpXG5cdFx0LmF0dHIoXCJ5XCIsIChkKSA9PiAoZC55MSArIGQueTApIC8gMilcblx0XHQuYXR0cihcImZpbGxcIiwgKGQpID0+IGQzLnJnYihjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpLmRhcmtlcigpKVxuXHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgKGQpID0+XG5cdFx0ICAgICAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuXHRcdCAgICAgKVxuXHRcdC5hdHRyKFwiZm9udC1zaXplXCIsIDkpXG5cdFx0LnRleHQoKGQpID0+IGQubmFtZSksXG4gICAgICAgICAgICAoZXhpdCkgPT5cblx0XHRleGl0XG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAgICAgICAgIC8qIC5kZWxheSg1MDApICovXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cdFx0LnJlbW92ZSgpXG5cdCk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJkZWZzXCIpXG5cdC5zZWxlY3RBbGwoXCJsaW5lYXJHcmFkaWVudFwiKVxuXHQuZGF0YShsaW5rcylcblx0LmpvaW4oXG4gICAgICAgICAgICAoZW50ZXIpID0+IHtcblx0XHRjb25zdCBsZyA9IGVudGVyLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpO1xuXHRcdFxuXHRcdGxnLmF0dHIoXCJpZFwiLCAoZCkgPT4gYGdyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKVxuXHRcdCAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcblx0XHQgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC50YXJnZXQueDApO1xuXHRcdFxuXHRcdGxnLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIwXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0XG5cdFx0bGcuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjEwMCVcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC50YXJnZXQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PiB7XG5cdFx0dXBkYXRlXG5cdFx0ICAgIC5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQgICAgLmF0dHIoXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIilcblx0XHQgICAgLmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5zb3VyY2UueDEpXG5cdFx0ICAgIC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcblx0XHR1cGRhdGUuc2VsZWN0QWxsKFwic3RvcFwiKS5yZW1vdmUoKTtcblx0XHR1cGRhdGVcblx0XHQgICAgLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIwXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0XG5cdFx0dXBkYXRlXG5cdFx0ICAgIC5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChleGl0KSA9PiBleGl0LnJlbW92ZSgpXG5cdCk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLmxpbmtzXCIpXG5cdC5zZWxlY3RBbGwoXCJwYXRoXCIpXG5cdC5kYXRhKGxpbmtzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJwYXRoXCIpO1xuXHRcdGUudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdCAgICAuZGVsYXkoMTAwMClcblx0XHQgICAgLmR1cmF0aW9uKDUwMClcblx0XHQgICAgLmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG5cdFx0ICAgIC5hdHRyKFwic3Ryb2tlXCIsIChkKSA9PiBgdXJsKCNncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IGQud2lkdGgpO1xuXHRcdGUuYXBwZW5kKFwidGl0bGVcIikudGV4dCgoZCkgPT4gYCR7ZC5ob3Vyc31gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAodXBkYXRlKSA9PlxuXHRcdHVwZGF0ZVxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0LmRlbGF5KDUwMClcblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5hdHRyKFwiZFwiLCBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpKVxuXHRcdC5hdHRyKFwic3Ryb2tlXCIsIChkKSA9PiBgdXJsKCNncmFkaWVudC0ke2QuaW5kZXh9YClcblx0XHQuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4gZC53aWR0aClcblx0XHQuc2VsZWN0KFwidGl0bGVcIilcblx0XHQudGV4dCgoZCkgPT4gYCR7ZC5ob3Vyc31gKSxcbiAgICAgICAgICAgIChleGl0KSA9PlxuXHRcdGV4aXRcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgICAgICAgICAgLyogLmRlbGF5KDEwMDApICovXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cdFx0LnJlbW92ZSgpXG5cdCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBjb25zdCByc3AgPSBbXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPUlHTVBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJsaW5rXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTIyNC4wLjAuMjUxJnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogNjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTE5Mi4xNjguMS43JnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCJJR01QXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcImxpbmtcIjogXCJJR01QXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMlwiLFxuXHQgICAgXCJ0YXJnZXRfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogMTIwXG5cdH0sXG5cdHtcblx0ICAgIFwibGlua19jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9wYWdlPWZsb3dzJmhvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wJmFwcGxpY2F0aW9uPUlHTVBcIixcblx0ICAgIFwidGFyZ2V0XCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIklHTVBcIixcblx0ICAgIFwibGlua1wiOiBcIklHTVBcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0yMjQuMC4wLjImdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInNvdXJjZV9ub2RlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwidmFsdWVcIjogNjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2VfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTE5Mi4xNjguMS43JnZsYW49MFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCJNRE5TXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcImxpbmtcIjogXCJNRE5TXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249TUROU1wiLFxuXHQgICAgXCJ0YXJnZXRfbm9kZVwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInRhcmdldF9jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAzOTZcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249TUROU1wiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCJNRE5TXCIsXG5cdCAgICBcImxpbmtcIjogXCJNRE5TXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MjI0LjAuMC4yNTEmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAzOTZcblx0fVxuICAgIF07XG4gICAgXG4vKlxuICAgIGxldCBkYXRhID0ge1xuXHQvLyBub2RlczogW1xuXHQvLyAgICAgeyBpbmRleDogMCwgbmFtZTogXCJMaWlrZXZhaWh0b1wiLCB2YWx1ZTogMTAwLCBob3VyczogXCIxMDAlXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDEsIG5hbWU6IFwiS2lpbnRlw6R0IGt1bHV0XCIsIHZhbHVlOiA3NSwgaG91cnM6IFwiODUlXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDIsIG5hbWU6IFwiTXV1dHR1dmF0IGt1bHV0XCIsIHZhbHVlOiAxMCwgaG91cnM6IFwiMzowMFwiIH0sXG5cdC8vICAgICB7IGluZGV4OiAzLCBuYW1lOiBcIlBhbGtrYWt1bHV0XCIsIHZhbHVlOiA2OSwgaG91cnM6IFwiMToyMFwiIH0sXG5cdC8vICAgICB7IGluZGV4OiA0LCBuYW1lOiBcIk11dXQga2lpbnRlXCIsIHZhbHVlOiA2LCBob3VyczogXCIxOjQwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDUsIG5hbWU6IFwiS2F0ZVwiLCB2YWx1ZTogMTUsIGhvdXJzOiBcIjE6NDBcIiB9XG5cdC8vIF0sXG5cdG5vZGVzOiBbXG5cdCAgICB7IGluZGV4OiAwLCBuYW1lOiBcIkxpaWtldmFpaHRvXCIsIGhvdXJzOiBcIjEwMCVcIiB9LFxuXHQgICAgeyBpbmRleDogMSwgbmFtZTogXCJLaWludGXDpHQga3VsdXRcIiwgaG91cnM6IFwiODUlXCIgfSxcblx0ICAgIHsgaW5kZXg6IDIsIG5hbWU6IFwiTXV1dHR1dmF0IGt1bHV0XCIsIGhvdXJzOiBcIjM6MDBcIiB9LFxuXHQgICAgeyBpbmRleDogMywgbmFtZTogXCJQYWxra2FrdWx1dFwiLCBob3VyczogXCIxOjIwXCIgfSxcblx0ICAgIHsgaW5kZXg6IDQsIG5hbWU6IFwiTXV1dCBraWludGVcIiwgaG91cnM6IFwiMTo0MFwiIH0sXG5cdCAgICB7IGluZGV4OiA1LCBuYW1lOiBcIkthdGVcIiwgaG91cnM6IFwiMTo0MFwiIH1cblx0XSxcblx0bGlua3M6IFtcblx0ICAgIHsgc291cmNlOiAwLCB0YXJnZXQ6IDEsIHZhbHVlOiA3NSwgaG91cnM6IFwiKzE6MDBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDAsIHRhcmdldDogMiwgdmFsdWU6IDEwLCBob3VyczogXCIrMjowMFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMSwgdGFyZ2V0OiAzLCB2YWx1ZTogNjksIGhvdXJzOiBcIisxOjIwXCIgfSxcblx0ICAgIHsgc291cmNlOiAxLCB0YXJnZXQ6IDQsIHZhbHVlOiA2LCBob3VyczogXCIrMTo0MFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMCwgdGFyZ2V0OiA1LCB2YWx1ZTogMTUsIGhvdXJzOiBcIisxOjQwXCIgfVxuXHRdXG4gICAgfTtcbiovXG4gICAgZGF0YSA9IHdyYXBfZ3JhcGhfcnNwKHJzcCk7XG5cbiAgICAvL2RlYnVnZ2VyO1xuICAgIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB3cmFwX2dyYXBoX3JzcChyc3ApIHtcbiAgICBsZXQgbm9kZXMgPSBbXTtcbiAgICBsZXQgbGlua3MgPSBbXTtcblxuICAgIGxldCBub2Rlc19hZGRlZF9kaWN0ID0ge307XG4gICAgbGV0IGxpbmtzX2FkZGVkX2RpY3QgPSB7fTtcbiAgICBjb25zdCBmX2FkZF9ub2RlID0gKG5vZGVfaWQsIGhyZWYsIGNvbG9yKSA9PiB7XG5cdGlmIChub2Rlc19hZGRlZF9kaWN0W25vZGVfaWRdICE9IG51bGwpIHsgcmV0dXJuOyB9XG5cdGxldCBpbmRleCA9IG5vZGVzLmxlbmd0aDtcblx0bm9kZXNfYWRkZWRfZGljdFtub2RlX2lkXSA9IGluZGV4O1xuXHRsZXQgbmV3X25vZGUgPSB7IGluZGV4LCBuYW1lOiBub2RlX2lkLCBocmVmLCBjb2xvciB9O1xuXHRub2Rlcy5wdXNoKG5ld19ub2RlKTtcbiAgICB9O1xuICAgIGNvbnN0IGZfYWRkX2xpbmsgPSAoc291cmNlLCB0YXJnZXQsIHZhbHVlLCBsYWJlbCkgPT4ge1xuXHRjb25zdCBzb3VyY2VfaW5kZXggPSBub2Rlc19hZGRlZF9kaWN0W3NvdXJjZV07XG5cdGNvbnN0IHRhcmdldF9pbmRleCA9IG5vZGVzX2FkZGVkX2RpY3RbdGFyZ2V0XTtcblx0bGV0IG5ld19saW5rID0geyBzb3VyY2U6IHNvdXJjZV9pbmRleCwgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsIHZhbHVlLCBsYWJlbCB9O1xuXHRsaW5rcy5wdXNoKG5ld19saW5rKTtcbiAgICB9O1xuICAgIHJzcC5mb3JFYWNoKChlbCkgPT4ge1xuXHRmX2FkZF9ub2RlKGVsLnNvdXJjZSwgZWwuc291cmNlX2xpbmssIGVsLnNvdXJjZV9jb2xvcik7XG5cdGZfYWRkX25vZGUoZWwudGFyZ2V0LCBlbC50YXJnZXRfbGluaywgZWwudGFyZ2V0X2NvbG9yKTtcblx0Zl9hZGRfbGluayhlbC5zb3VyY2UsIGVsLnRhcmdldCwgZWwudmFsdWUsIGVsLmxpbmspO1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfc2l6ZSgpIHtcbiAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICBpZiAod2lkdGggPT0gbnVsbCkgeyB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwOyB9XG4gICAgbGV0IGhlaWdodCA9IHByb3BzLmhlaWdodDtcbiAgICBpZiAoaGVpZ2h0ID09IG51bGwpIHsgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gNTA7IH1cblxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlX3NhbmtleShkYXRhLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgc2Fua2V5aW1wbCA9IGQzLnNhbmtleSgpXG5cdCAgLm5vZGVBbGlnbihkMy5zYW5rZXlDZW50ZXIpXG5cdCAgLm5vZGVXaWR0aCgxMClcblx0ICAubm9kZVBhZGRpbmcoMTApXG5cdCAgLmV4dGVudChbXG5cdCAgICAgIFswLCA1XSxcblx0ICAgICAgW3dpZHRoLCBoZWlnaHRdXG5cdCAgXSk7XG4gICAgXG4gICAgcmV0dXJuIHNhbmtleWltcGwoZGF0YSk7XG59XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4ubm9kZSByZWN0IHtcbiAgZmlsbC1vcGFjaXR5OiAwLjk7XG4gIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlcztcbn1cblxuLm5vZGUgdGV4dCB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmO1xufVxuXG4ubGluayB7XG4gIGZpbGw6IG5vbmU7XG4gIHN0cm9rZTogIzAwMDtcbiAgc3Ryb2tlLW9wYWNpdHk6IDAuMjtcbn1cblxuLmxpbms6aG92ZXIge1xuICBzdHJva2Utb3BhY2l0eTogMC41O1xufVxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgICAgICAgICA8aDMgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiIGNsYXNzPVwid2lkZ2V0LW5hbWVcIj57eyBjaGFydF9vcHRpb24udGl0bGUgfX08L2gzPlxuICAgICAgICAgICAgICAgIDxjaGFydCB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCJcbiAgICAgICAgICAgICAgICAgIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwiY2hhcnRfb3B0aW9uLnVybFwiXG4gICAgICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgPC9jaGFydD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFwcGxpY2F0aW9uc190YWIgPT0gJ2FwcGxpY2F0aW9ucydcIiByZWY9XCJ0YWJsZV9ob3N0X2FwcGxpY2F0aW9uc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFwcGxpY2F0aW9uc190YWIgPT0gJ2NhdGVnb3JpZXMnXCIgcmVmPVwidGFibGVfaG9zdF9jYXRlZ29yaWVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5jb25zdCBjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCA9IFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdjaGFydCc6IENoYXJ0LFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICd0YWItbGlzdCc6IFRhYkxpc3QsXG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICBpc19jaF9lbmFibGVkOiBCb29sZWFuLFxuICAgIGlzX2xvY2FsZTogU3RyaW5nLFxuICAgIHRzX2w3X2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgdHNfY2F0X2VuYWJsZWQ6IEJvb2xlYW5cbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmlld1wiKSB8fCB0aGlzLiRwcm9wcy52aWV3XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPT0gaS5pZCA/IGkuYWN0aXZlID0gdHJ1ZSA6IGkuYWN0aXZlID0gZmFsc2VcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCIsIGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYi5pZCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSB0YWIuaWQ7XG4gICAgfSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGFwcGxpY2F0aW9uc190YWI6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnM6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzOiBudWxsLFxuICAgICAgY2hhcnRfb3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfMTBfbmRwaV9wcm90b2NvbHMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9wcm90b19kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgYXBwbGljYXRpb25zYCxcbiAgICAgICAgICBpZDogYHRvcF9hcHBsaWNhdGlvbnNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfYnJlZWQnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9icmVlZF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgYXBwbGljYXRpb25zYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX2NhdGVnb3JpZXMnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9jYXRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2NhdGVnb3JpZXNgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfYnJlZWQnKSxcbiAgICAgICAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9icmVlZF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYnJlZWRgLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2hvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnYXBwbGljYXRpb25zJyksXG4gICAgICAgICAgaWQ6ICdhcHBsaWNhdGlvbnMnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2hvc3RfZGV0YWlscy5jYXRlZ29yaWVzX3RhYicpLFxuICAgICAgICAgIGFjdGl2ZTogKHRoaXMuJHByb3BzLnZpZXcgPT0gJ2NhdGVnb3JpZXMnKSxcbiAgICAgICAgICBpZDogJ2NhdGVnb3JpZXMnXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFkZF9hY3Rpb25fY29sdW1uOiBmdW5jdGlvbihjb2x1bW5zLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgY29uc3QgaG9zdCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1gXG4gICAgICBjb25zdCB2bGFuID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy52bGFufWBcbiAgICAgIGNvbnN0IGlmaWQgPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmlmaWR9YFxuICAgICAgbGV0IGhhbmRsZXJJZCA9IFwicGFnZS1zdGF0cy1hY3Rpb24tanVtcC1oaXN0b3JpY2FsXCI7XG4gICAgICBjb2x1bW5zLnB1c2goeyBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGhhbmRsZXJJZCwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgc2VydmljZSkgPT4ge1xuICAgICAgICBjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG4gICAgICAgICAgaGFuZGxlcklkLFxuICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2lmaWQ9JHtpZmlkfSYke25hbWV9PSR7c2VydmljZVt2YWx1ZV0uaWR9O2VxJmlwPSR7aG9zdH07ZXFgXG4gICAgICAgICAgICBpZih2bGFuICE9IDApXG4gICAgICAgICAgICAgIHVybCA9IGAke3VybH0mdmxhbl9pZD0ke3ZsYW59O2VxYFxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW3sgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faGlzdG9yaWNhbCB9XSlcbiAgICAgIH19KVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgaXRlbSk7XG4gICAgfSwgXG4gICAgcmVsb2FkX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9ob3N0XyR7dGhpcy5hcHBsaWNhdGlvbnNfdGFifWBdO1xuICAgIH0sXG4gICAgZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKCkge1xuICAgICAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gICAgICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWVbY2hhcnRfaW5kZXhdLmNoYXJ0X29wdGlvbnM7XG4gICAgICB9XG4gICAgfVxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShQYWdlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgUGFnZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnYXBwbGljYXRpb25zJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSwgXG4gICAgICBvcmRlcjogW1sgNiAvKiBwZXJjZW50YWdlIGNvbHVtbiAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMSB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDIgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogNSB9LFxuICAgICAgXVxuICAgIH1cbiAgfTtcbiAgXG4gIC8qIEFwcGxpY2F0aW9ucyB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBsZXQgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYXBwbGljYXRpb25cIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnMjAnLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhOiAnYXBwbGljYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgaWYgKFBhZ2VWdWUuJHByb3BzLmlzX2xvY2FsZSA9PSBcIjFcIiAmJiBQYWdlVnVlLiRwcm9wcy50c19sN19lbmFibGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9QCR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy52bGFufSZwYWdlPWhpc3RvcmljYWwmaWZpZD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaWZpZH0mcHJvdG9jb2w9JHtkYXRhLmxhYmVsfSZ0c19zY2hlbWE9aG9zdDpuZHBpXCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICB9IGVsc2VcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWx9YDtcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDEsIHdpZHRoOiAnMTAnLCBuYW1lOiAnZHVyYXRpb24nLCBkYXRhOiAnZHVyYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5zZW50XCIpLCB0YXJnZXRzOiAyLCB3aWR0aDogJzEwJywgbmFtZTogJ3NlbnQnLCBkYXRhOiAnYnl0ZXNfc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5yY3ZkXCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzEwJywgbmFtZTogJ3JjdmQnLCBkYXRhOiAnYnl0ZXNfcmN2ZCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYnJlYWtkb3duXCIpLCB0YXJnZXRzOiA0LCB3aWR0aDogJzEwJywgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2Vfc2VudCA9IChyb3cuYnl0ZXNfc2VudCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3JjdmQgPSAocm93LmJ5dGVzX3JjdmQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVCcmVha2Rvd24ocGVyY2VudGFnZV9zZW50LCBwZXJjZW50YWdlX3JjdmQsIGkxOG4oJ2hvc3RfZGV0YWlscy5zZW50JyksIGkxOG4oJ2hvc3RfZGV0YWlscy5yY3ZkJykpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiA1LCB3aWR0aDogJzIwJywgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9wZXJjZW50YWdlXCIpLCB0YXJnZXRzOiA2LCB3aWR0aDogJzIwJywgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAncGVyY2VudGFnZScsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3cHJvdG8nLCAnYXBwbGljYXRpb24nKTtcbiAgXG4gIGxldCBhcHBsaWNhdGlvbnNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgYXBwbGljYXRpb25zQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgUGFnZVZ1ZS5jb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMgPSBhcHBsaWNhdGlvbnNDb25maWc7XG5cblxuICAvKiBDYXRlZ29yaWVzIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2F0ZWdvcmllcycgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9kYXRhLmx1YWAsIHRtcF9wYXJhbXMpXG5cblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5jYXRlZ29yeVwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2NhdGVnb3J5JywgZGF0YTogJ2NhdGVnb3J5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIGlmIChQYWdlVnVlLiRwcm9wcy5pc19sb2NhbGUgPT0gXCIxXCIgJiYgUGFnZVZ1ZS4kcHJvcHMudHNfY2F0X2VuYWJsZWQgPT09IHRydWUpXG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9QCR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy52bGFufSZ0c19zY2hlbWE9aG9zdDpuZHBpX2NhdGVnb3JpZXMmcGFnZT1oaXN0b3JpY2FsJmNhdGVnb3J5PSR7ZGF0YS5sYWJlbH1cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWx9YDtcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuYXBwbGljYXRpb25zXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnYXBwbGljYXRpb25zJywgZGF0YTogJ2FwcGxpY2F0aW9ucycsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGlmKFBhZ2VWdWUuJHByb3BzLmlzX2xvY2FsZSA9PSBcIjFcIilcbiAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbCB8fCAnJ30gPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9LyR7ZGF0YS5ocmVmfSR7ZGF0YS5jYXRlZ29yeV9pZH1cIj4ke2RhdGEubW9yZV9wcm90b3MgfHwgJyd9PC9hPmBcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsIHx8ICcnfWA7XG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnZHVyYXRpb24nLCBkYXRhOiAnZHVyYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9wZXJjZW50YWdlXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN2NhdCcsICdjYXRlZ29yeScpO1xuICBcbiAgbGV0IGNhdGVnb3JpZXNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY2F0ZWdvcmllc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNhdGVnb3JpZXNDb25maWcudGFibGVfY29uZmlnLm9yZGVyID0gW1sgNCAvKiBwZXJjZW50YWdlIGNvbHVtbiAqLywgJ2Rlc2MnIF1dXG4gIGNhdGVnb3JpZXNDb25maWcudGFibGVfY29uZmlnLmNvbHVtbkRlZnMgPSBbXG4gICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDIgfSxcbiAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgXVxuICBcbiAgUGFnZVZ1ZS5jb25maWdfZGV2aWNlc19jYXRlZ29yaWVzID0gY2F0ZWdvcmllc0NvbmZpZztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgIDxoMyB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCIgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPGNoYXJ0IHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIlxuICAgICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICA8L2NoYXJ0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnYXBwbGljYXRpb25zJ1wiIHJlZj1cInRhYmxlX2hvc3RfYXBwbGljYXRpb25zXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnY2F0ZWdvcmllcydcIiByZWY9XCJ0YWJsZV9ob3N0X2NhdGVnb3JpZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2NoYXJ0JzogQ2hhcnQsXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIGlzX2NoX2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgaXNfbG9jYWxlOiBTdHJpbmcsXG4gICAgdHNfbDdfZW5hYmxlZDogQm9vbGVhbixcbiAgICB0c19jYXRfZW5hYmxlZDogQm9vbGVhblxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8IHRoaXMuJHByb3BzLnZpZXdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9PSBpLmlkID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiLmlkKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IHRhYi5pZDtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYXBwbGljYXRpb25zX3RhYjogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9uczogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXM6IG51bGwsXG4gICAgICBjaGFydF9vcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX3Byb3RvY29scycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L3Byb3RvX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2FwcGxpY2F0aW9uc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfY2F0ZWdvcmllcycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2NhdF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfY2F0ZWdvcmllc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgICBpZDogJ2FwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmNhdGVnb3JpZXNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnY2F0ZWdvcmllcycpLFxuICAgICAgICAgIGlkOiAnY2F0ZWdvcmllcydcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkX2FjdGlvbl9jb2x1bW46IGZ1bmN0aW9uKGNvbHVtbnMsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBob3N0ID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fWBcbiAgICAgIGNvbnN0IHZsYW4gPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59YFxuICAgICAgY29uc3QgaWZpZCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaWZpZH1gXG4gICAgICBsZXQgaGFuZGxlcklkID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcbiAgICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICBoYW5kbGVySWQsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/aWZpZD0ke2lmaWR9JiR7bmFtZX09JHtzZXJ2aWNlW3ZhbHVlXS5pZH07ZXEmaXA9JHtob3N0fTtlcWBcbiAgICAgICAgICAgIGlmKHZsYW4gIT0gMClcbiAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfSZ2bGFuX2lkPSR7dmxhbn07ZXFgXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dKVxuICAgICAgfX0pXG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCBpdGVtKTtcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hvc3RfJHt0aGlzLmFwcGxpY2F0aW9uc190YWJ9YF07XG4gICAgfSxcbiAgICBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBQYWdlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdhcHBsaWNhdGlvbnMnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICBpZiAoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiICYmIFBhZ2VWdWUuJHByb3BzLnRzX2w3X2VuYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnBhZ2U9aGlzdG9yaWNhbCZpZmlkPSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfSZwcm90b2NvbD0ke2RhdGEubGFiZWx9JnRzX3NjaGVtYT1ob3N0Om5kcGlcIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnNlbnRcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMTAnLCBuYW1lOiAnc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnJjdmRcIiksIHRhcmdldHM6IDMsIHdpZHRoOiAnMTAnLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5icmVha2Rvd25cIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YTogJ2JyZWFrZG93bicsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhLCB0eXBlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9zZW50ID0gKHJvdy5ieXRlc19zZW50ICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlX3NlbnQsIHBlcmNlbnRhZ2VfcmN2ZCwgaTE4bignaG9zdF9kZXRhaWxzLnNlbnQnKSwgaTE4bignaG9zdF9kZXRhaWxzLnJjdmQnKSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMjAnLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMjAnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdwcm90bycsICdhcHBsaWNhdGlvbicpO1xuICBcbiAgbGV0IGFwcGxpY2F0aW9uc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBhcHBsaWNhdGlvbnNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyA9IGFwcGxpY2F0aW9uc0NvbmZpZztcblxuXG4gIC8qIENhdGVnb3JpZXMgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjYXRlZ29yaWVzJyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcylcblxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmNhdGVnb3J5XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgaWYgKFBhZ2VWdWUuJHByb3BzLmlzX2xvY2FsZSA9PSBcIjFcIiAmJiBQYWdlVnVlLiRwcm9wcy50c19jYXRfZW5hYmxlZCA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnRzX3NjaGVtYT1ob3N0Om5kcGlfY2F0ZWdvcmllcyZwYWdlPWhpc3RvcmljYWwmY2F0ZWdvcnk9JHtkYXRhLmxhYmVsfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdhcHBsaWNhdGlvbnMnLCBkYXRhOiAnYXBwbGljYXRpb25zJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgaWYoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiKVxuICAgICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsIHx8ICcnfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vJHtkYXRhLmhyZWZ9JHtkYXRhLmNhdGVnb3J5X2lkfVwiPiR7ZGF0YS5tb3JlX3Byb3RvcyB8fCAnJ308L2E+YFxuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9YDtcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3Y2F0JywgJ2NhdGVnb3J5Jyk7XG4gIFxuICBsZXQgY2F0ZWdvcmllc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjYXRlZ29yaWVzQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA0IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV1cbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMiB9LFxuICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICBdXG4gIFxuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfdHJhZmZpY1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfdHJhZmZpY1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC00XCI+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwid2lkZ2V0LW5hbWVcIj57eyBjaGFydF9vcHRpb24udGl0bGUgfX08L2gzPlxuICAgICAgICAgICAgICAgIDxDaGFydFxuICAgICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0cmFmZmljX3RhYmxlXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX3RyYWZmaWNfdGFibGUudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfdHJhZmZpY190YWJsZS5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfdHJhZmZpY190YWJsZS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ190cmFmZmljX3RhYmxlLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ190cmFmZmljX3RhYmxlLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Vbm1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcblxuY29uc3QgdHJhZmZpY190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0cyA9IHJlZihbXSk7XG5jb25zdCBjb25maWdfdHJhZmZpY190YWJsZSA9IHJlZih7fSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgfVxufVxuXG5jb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICB0cmFmZmljX3RhYmxlLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICB0cmFmZmljX3RhYmxlLnZhbHVlLnJlbG9hZCgpO1xufVxuICAgIFxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xufSk7XG5cbm9uVW5tb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZGVzdHJveSgpXG59KTtcblxuY29uc3QgY2hhcnRfb3B0aW9ucyA9IFtcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMubDRfcHJvdG8nKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9wcm90b19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0cmFmZmljX3Byb3Rvc2AsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmNvbnRhY3RlZF9ob3N0cycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w0L2NvbnRhY3RlZF9ob3N0c19kYXRhLmx1YWAsXG4gICAgaWQ6IGBjb250YWN0ZWRfaG9zdHNgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50cmFmZmljJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDQvdHJhZmZpY19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0cmFmZmljYCxcbiAgfSxcbl1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCB1cmxfcGFyYW1zID0ge31cbiAgXG4gIHVybF9wYXJhbXNbXCJob3N0XCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpXG4gIHVybF9wYXJhbXNbXCJ2bGFuXCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpXG4gIHVybF9wYXJhbXNbXCJpZmlkXCJdID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpXG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICByZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICAgIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInByb3RvY29sXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAncHJvdG9jb2wnLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImNoYXJ0XCIpLCB0YXJnZXRzOiAxLCBuYW1lOiAnaGlzdG9yaWNhbCcsIGRhdGE6ICdoaXN0b3JpY2FsJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy5ieXRlc19zZW50XCIpLCB0YXJnZXRzOiAyLCBuYW1lOiAnc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMuYnl0ZXNfcmN2ZFwiKSwgdGFyZ2V0czogMywgbmFtZTogJ3JjdmQnLCBkYXRhOiAnYnl0ZXNfcmN2ZCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy5icmVha2Rvd25cIiksIHRhcmdldHM6IDQsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3NlbnQgPSAocm93LmJ5dGVzX3NlbnQgKiAxMDApIC8gcm93LnRvdGFsX2J5dGVzO1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3JjdmQgPSAocm93LmJ5dGVzX3JjdmQgKiAxMDApIC8gcm93LnRvdGFsX2J5dGVzO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlX3NlbnQsIHBlcmNlbnRhZ2VfcmN2ZCwgaTE4bignaG9zdF9kZXRhaWxzLnNlbnQnKSwgaTE4bignaG9zdF9kZXRhaWxzLnJjdmQnKSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLnRvdGFsX2J5dGVzXCIpLCB0YXJnZXRzOiA1LCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdGFsX2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLnRvdGFsX3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMjAlJywgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAndG90YWxfcGVyY2VudGFnZScsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBsZXQgdHJhZmZpY0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICB0cmFmZmljQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnX3RyYWZmaWNfdGFibGUudmFsdWUgPSB0cmFmZmljQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02IG1iLTQgbXQtNFwiPlxuICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgIDxDaGFydFxuICAgICAgICAgICAgICAgIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICBAY2hhcnRfcmVsb2FkZWQ9XCJjaGFydF9kb25lXCI+XG4gICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgdXJsX3BhcmFtczogT2JqZWN0LFxufSlcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGNoYXJ0X29wdGlvbnMgPSBbXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnBhY2tldHNfc2VudCcpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvc2VudF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBwYWNrZXRzX3NlbnRgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5wYWNrZXRzX3JjdmQnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL3JjdmRfZGF0YS5sdWFgLFxuICAgIGlkOiBgcGFja2V0c19yY3ZkYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMudGNwX2ZsYWdzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy90Y3BfZmxhZ3NfZGF0YS5sdWFgLFxuICAgIGlkOiBgdGNwX2ZsYWdzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuYXJwX2Rpc3RyaWJ1dGlvbicpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvYXJwX2RhdGEubHVhYCxcbiAgICBpZDogYGFycF9yZXF1ZXN0c2AsXG4gIH0sXG5dXG5cbmZ1bmN0aW9uIGNoYXJ0X2RvbmUoZGF0YSwgdG1wLCB0bXAyKSB7XG4gIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKVxufVxuXG5vbk1vdW50ZWQoKCkgPT4ge30pXG5cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgdi1pZj1cIm5vX2RhdGFcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIiBpZD1cImVtcHR5LW1lc3NhZ2VcIj57eyBub19kYXRhX21lc3NhZ2UgfHwgX2kxOG4oJ2Zsb3dzX3BhZ2Uubm9fZGF0YScpIH19PC9kaXY+XG48ZGl2PlxuICA8c3ZnXG4gICAgcmVmPVwic2Fua2V5X2NoYXJ0X3JlZlwiXG4gICAgOndpZHRoPVwic2Fua2V5X3NpemUud2lkdGhcIlxuICAgIDpoZWlnaHQ9XCJzYW5rZXlfc2l6ZS5oZWlnaHRcIlxuICAgIHN0eWxlPVwibWFyZ2luOjEwcHg7XCI+XG4gICAgPGcgY2xhc3M9XCJub2Rlc1wiIHN0eWxlPVwic3Ryb2tlOiAjMDAwO3N0cm9rZU9wYWNpdHk6IDAuNTtcIi8+XG4gICAgPGcgY2xhc3M9XCJsaW5rc1wiIHN0eWxlPVwic3Ryb2tlOiAjMDAwO3N0cm9rZU9wYWNpdHk6IDAuMztmaWxsOm5vbmU7XCIvPlxuICA8L3N2Zz5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBkMyA9IGQzdjc7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ25vZGVfY2xpY2snLCAndXBkYXRlX3dpZHRoJywgJ3VwZGF0ZV9oZWlnaHQnXSlcblxuY29uc3QgbWFyZ2luID0ge1xuICAgIHRvcDogMi41LFxuICAgIHJpZ2h0OiA1LFxuICAgIGJvdHRvbTogMi41LFxuICAgIGxlZnQ6IDVcbn07XG5cbmNvbnN0IG5vZGVfd2lkdGggPSAxMDtcbmNvbnN0IG5vX2RhdGEgPSByZWYoZmFsc2UpXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBub19kYXRhX21lc3NhZ2U6IFN0cmluZyxcbiAgd2lkdGg6IE51bWJlcixcbiAgaGVpZ2h0OiBOdW1iZXIsXG4gIHNhbmtleV9kYXRhOiBPYmplY3QsXG59KTtcblxuY29uc3Qgc2Fua2V5X2NoYXJ0X3JlZiA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9zaXplID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudChhc3luYygpID0+IHt9KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBzZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBhdHRhY2hfZXZlbnRzKCk7XG59KTtcblxud2F0Y2goKCkgPT4gcHJvcHMuc2Fua2V5X2RhdGEsIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHNldF9zYW5rZXlfZGF0YSh0cnVlKTtcbn0pO1xuXG5mdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEocmVzZXQpIHtcbiAgICBpZiAocmVzZXQpIHtcblx0JChcIi5ub2Rlc1wiLCBzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5lbXB0eSgpO1xuXHQkKFwiLmxpbmtzXCIsIHNhbmtleV9jaGFydF9yZWYudmFsdWUpLmVtcHR5KCk7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zYW5rZXlfZGF0YS5ub2RlcyA9PSBudWxsIHx8IHByb3BzLnNhbmtleV9kYXRhLmxpbmtzID09IG51bGxcblx0fHwgcHJvcHMuc2Fua2V5X2RhdGEubGVuZ3RoID09IDAgfHwgcHJvcHMuc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID09IDApIHtcblx0cmV0dXJuO1xuICAgIH1cbiAgICBkcmF3X3NhbmtleSgpO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hfZXZlbnRzKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiBzZXRfc2Fua2V5X2RhdGEodHJ1ZSkpO1xufVxuXG5sZXQgc2Fua2V5ID0gbnVsbDtcbmxldCBzYW5rZXlEYXRhID0gbnVsbDtcbmFzeW5jIGZ1bmN0aW9uIGRyYXdfc2Fua2V5KCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcbiAgICBsZXQgZGF0YSA9IHByb3BzLnNhbmtleV9kYXRhOy8vYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7XG4gICAgY29uc3Qgc2l6ZSA9IGdldF9zaXplKCk7XG4gICAgc2Fua2V5X3NpemUudmFsdWUgPSBzaXplO1xuICAgIHNhbmtleSA9IGNyZWF0ZV9zYW5rZXkoc2l6ZS53aWR0aCAtIDEwLCBzaXplLmhlaWdodCAtIDUpO1xuICAgIHNhbmtleURhdGEgPSBzYW5rZXkoZGF0YSk7XG4gICAgY29uc3QgeyBsaW5rcywgbm9kZXMgfSA9IHNhbmtleURhdGE7XG4gICAgXG4gICAgbGV0IGQzX25vZGVzID0gZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLm5vZGVzXCIpXG5cdC5zZWxlY3RBbGwoXCJnXCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbigoZW50ZXIpID0+IGVudGVyLmFwcGVuZChcImdcIikpXG5cdC5hdHRyKFwidHJhbnNmb3JtXCIsIChkKSA9PiBgdHJhbnNsYXRlKCR7ZC54MH0sICR7ZC55MH0pYClcbiAgICBcbiAgICBjb25zdCB6b29tID0gZDMuem9vbSgpXG5cdCAgLnNjYWxlRXh0ZW50KFsxLCA0MF0pXG5cdCAgLm9uKFwiem9vbVwiLCB6b29tZWQpO1xuICAgIFxuICAgIGQzX25vZGVzLmFwcGVuZChcInJlY3RcIilcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApXG5cdC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnkxIC0gZC55MClcblx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHQuYXR0cihcImZpbGxcIiwgKGQpID0+IGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSlcblx0LmF0dHIoXCJjbGFzc1wiLCBcInNhbmtleS1ub2RlXCIpXG5cdC5hdHRyKFwic3R5bGVcIiwgXCJjdXJzb3I6bW92ZTtcIik7XG4gICAgZDMuc2VsZWN0QWxsKFwicmVjdFwiKS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkPy5sYWJlbH1gKTtcbiAgICBcbiAgICAvLyBSZWxhdGl2ZSB0byBjb250YWluZXIvIG5vZGUgcmVjdCAgICBcbiAgICBkM19ub2Rlcy5kYXRhKG5vZGVzKVxuXHQuYXBwZW5kKFwidGV4dFwiKVxuICAgIC8vIC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgLy8gLmRlbGF5KDEwMDApXG4gICAgLy8gLmR1cmF0aW9uKDUwMClcbiAgICBcdC5hdHRyKCdjbGFzcycsICdsYWJlbCcpXG4gICAgXHQuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ2F1dG8nKVxuXHQuYXR0cihcInN0eWxlXCIsIFwiY3Vyc29yOnBvaW50ZXI7XCIpXG4gICAgXHQuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIDE7IH0gKVxuICAgIFx0LmF0dHIoXCJmaWxsXCIsIChkKSA9PiBcIiMwMDBcIilcbiAgICAvLyAuYXR0cihcImZpbGxcIiwgKGQpID0+IGQzLnJnYihjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpLmRhcmtlcigpKVxuXHQuYXR0cihcInhcIiwgKGQpID0+IChkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyA2ICsgKGQueDEgLSBkLngwKSA6IC02KSlcblx0LmF0dHIoXCJ5XCIsIChkKSA9PiAoZC55MSAtIGQueTApIC8gMilcbiAgICBcdC5hdHRyKFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwibWlkZGxlXCIpXG5cdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgKGQpID0+XG4gICAgICAgICAgICAgIGQueDAgPCBzaXplLndpZHRoIC8gMiA/IFwic3RhcnRcIiA6IFwiZW5kXCJcbiAgICAgICAgICAgICApXG4gICAgXHQuYXR0cihcImZvbnQtc2l6ZVwiLCAxMilcbiAgICBcdC50ZXh0KChkKSA9PiBkLmxhYmVsKVxuXHQub24oXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCwgZGF0YV9vYmopeyBlbWl0KCdub2RlX2NsaWNrJywgZGF0YV9vYmouZGF0YSk7IH0pOyAgICBcbiAgICBkM19ub2Rlc1xuXHQuY2FsbChkMy5kcmFnKCkuc3ViamVjdChkID0+IGQpLm9uKFwic3RhcnRcIiwgZHJhZ1N0YXJ0KS5vbihcImRyYWdcIiwgZHJhZ01vdmUpKTtcbiAgICBcbiAgICBjb25zdCBsaW5rc19kMyA9IGQzLnNlbGVjdChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKVxuXHQgIC5zZWxlY3QoXCJnLmxpbmtzXCIpXG5cdCAgLnNlbGVjdEFsbChcImdcIilcblx0ICAuZGF0YShsaW5rcylcblx0ICAuam9pbigoZW50ZXIpID0+IGVudGVyLmFwcGVuZChcImdcIikpXG4gICAgXG4gICAgbGV0IGxnX2QzID0gbGlua3NfZDMuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIik7XG4gICAgbGdfZDMuYXR0cihcImlkXCIsIChkKSA9PiBgZ3JhZGllbnQtJHtkLmluZGV4fWApXG4gICAgXHQuYXR0cihcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKVxuICAgIFx0LmF0dHIoXCJ4MVwiLCAoZCkgPT4gZC5zb3VyY2UueDEpXG4gICAgXHQuYXR0cihcIngyXCIsIChkKSA9PiBkLnRhcmdldC54MCk7XG4gICAgXG4gICAgbGdfZDMuYXBwZW5kKFwic3RvcFwiKVxuICAgIFx0LmF0dHIoXCJvZmZzZXRcIiwgXCIwXCIpXG4gICAgXHQuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnNvdXJjZS5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgIFxuICAgIGxnX2QzLmFwcGVuZChcInN0b3BcIilcbiAgICBcdC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuICAgIFx0LmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC50YXJnZXQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcbiAgICBcbiAgICBsaW5rc19kM1xuXHQuYXBwZW5kKFwicGF0aFwiKVxuICAgIFx0LnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcblx0LmF0dHIoXCJjbGFzc1wiLCBcInNhbmtleS1saW5rXCIpXG5cdC5hdHRyKFwiZFwiLCBkMy5zYW5rZXlMaW5rSG9yaXpvbnRhbCgpKVxuICAgIC8vIC5hdHRyKFwic3R5bGVcIiwgYHN0cm9rZS13aWR0aDogJHtkLndpZHRofXB4O2ApXG5cdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiB7XG5cdCAgICByZXR1cm4gTWF0aC5tYXgoMSwgZC53aWR0aCk7XG5cdH0pXG4gICAgLy8gLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAvLyAuZGVsYXkoMTAwMClcbiAgICAvLyAuZHVyYXRpb24oNTAwKSBcbiAgICBcdC5hdHRyKFwic3Ryb2tlXCIsIChkKSA9PiBgdXJsKCNncmFkaWVudC0ke2QuaW5kZXh9YClcbiAgICAvLyBcdC5hdHRyKFwic3Ryb2tlXCIsIGBibGFja2ApXG4gICAgXG4gICAgLy8gXHQuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4gTWF0aC5tYXgoMTAwLCBkLndpZHRoKSk7XG4gICAgICAgIFxuICAgIGxpbmtzX2QzXG4gICAgXHQuYXBwZW5kKFwidGl0bGVcIilcbiAgICBcdC50ZXh0KChkKSA9PiBgJHtkLmxhYmVsfWApO1xufVxuXG5mdW5jdGlvbiBkcmFnU3RhcnQoZXZlbnQsIGQpIHtcbiAgICBkLl9feCA9IGV2ZW50Lng7XG4gICAgZC5fX3kgPSBldmVudC55O1xuICAgIGQuX194MCA9IGQueDA7XG4gICAgZC5fX3kwID0gZC55MDtcbiAgICBkLl9feDEgPSBkLngxO1xuICAgIGQuX195MSA9IGQueTE7XG59IC8vZHJhZ1N0YXJ0XG5cbmZ1bmN0aW9uIGRyYWdNb3ZlKGV2ZW50LCBkKSB7XG4gICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcblx0Y29uc3QgZHggPSBldmVudC54IC0gZC5fX3g7XG5cdGNvbnN0IGR5ID0gZXZlbnQueSAtIGQuX195O1xuXHRjb25zdCB3aWR0aCA9IHNhbmtleV9zaXplLnZhbHVlLndpZHRoO1xuXHRjb25zdCBoZWlnaHQgPSBzYW5rZXlfc2l6ZS52YWx1ZS53aWR0aDtcblx0ZC54MCA9IGQuX194MCArIGR4O1xuXHRkLngxID0gZC5fX3gxICsgZHg7XG5cdGQueTAgPSBkLl9feTAgKyBkeTtcblx0ZC55MSA9IGQuX195MSArIGR5O1xuXHRcblx0aWYgKGQueDAgPCAwKSB7XG4gICAgICAgICAgICBkLngwID0gMDtcbiAgICAgICAgICAgIGQueDEgPSBub2RlX3dpZHRoO1xuXHR9IC8vIGlmXG5cdFxuXHRpZiAoZC54MSA+IHdpZHRoKSB7XG4gICAgICAgICAgICBkLngwID0gd2lkdGggLSBub2RlX3dpZHRoO1xuICAgICAgICAgICAgZC54MSA9IHdpZHRoO1xuXHR9IC8vIGlmXG5cdFxuXHRpZiAoZC55MCA8IDApIHtcbiAgICAgICAgICAgIGQueTAgPSAwO1xuICAgICAgICAgICAgZC55MSA9IGQuX195MSAtIGQuX195MDtcblx0fSAvLyBpZlxuXHRcblx0aWYgKGQueTEgPiBoZWlnaHQpIHtcbiAgICAgICAgICAgIGQueTAgPSBoZWlnaHQgLSAoZC5fX3kxIC0gZC5fX3kwKTtcbiAgICAgICAgICAgIGQueTEgPSBoZWlnaHQ7XG5cdH0gLy8gaWZcblx0c2Fua2V5LnVwZGF0ZShzYW5rZXlEYXRhKTtcblx0ZDMuc2VsZWN0QWxsKFwiLnNhbmtleS1saW5rXCIpLmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpO1xuXHRyZXR1cm4gYHRyYW5zbGF0ZSgke2QueDB9LCAke2QueTB9KWA7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHpvb21lZCh7dHJhbnNmb3JtfSkge1xuICAgIGcuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pO1xufVxuZnVuY3Rpb24gZ2V0X3NpemUoKSB7XG4gICAgZW1pdCgndXBkYXRlX3dpZHRoJyk7XG4gICAgbGV0IHdpZHRoID0gcHJvcHMud2lkdGg7XG4gICAgaWYgKHdpZHRoID09IHVuZGVmaW5lZCkgeyB3aWR0aCA9ICQoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSkucGFyZW50KCkucGFyZW50KCkud2lkdGgoKSAtIDEwIH1cblxuICAgIGVtaXQoJ3VwZGF0ZV9oZWlnaHQnKTtcbiAgICBsZXQgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0XG4gICAgaWYgKGhlaWdodCA9PSB1bmRlZmluZWQpIHsgaGVpZ2h0ID0gJChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5wYXJlbnQoKS5wYXJlbnQoKS5oZWlnaHQoKSAtIDgwOyB9XG5cbiAgICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0IH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZV9zYW5rZXkod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IF9zYW5rZXkgPSBkMy5zYW5rZXkoKVxuXHQgIC5ub2RlQWxpZ24oZDMuc2Fua2V5Q2VudGVyKVxuXHQgIC5ub2RlV2lkdGgoMTApXG5cdCAgLm5vZGVQYWRkaW5nKG5vZGVfd2lkdGgpXG5cdCAgLmV4dGVudChbXG5cdCAgICAgIFswLCA1XSxcblx0ICAgICAgW3dpZHRoLCBoZWlnaHRdXG5cdCAgXSk7XG4gICAgcmV0dXJuIF9zYW5rZXk7XG59XG5cbi8qIFNldCB0byB0cnVlLCB0byBzaG93IHRoZSAnTm8gRGF0YScgbWVzc2FnZSAqL1xuZnVuY3Rpb24gc2V0X25vX2RhdGFfZmxhZyhzZXRfbm9fZGF0YSkge1xuICBub19kYXRhLnZhbHVlID0gc2V0X25vX2RhdGFcbn1cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbiAgICBcbmRlZmluZUV4cG9zZSh7IGRyYXdfc2Fua2V5LCBzZXRfbm9fZGF0YV9mbGFnIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLyogLm5vZGUgcmVjdCB7ICovXG4vKiAgIGZpbGwtb3BhY2l0eTogMC45OyAqL1xuLyogICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7ICovXG4vKiB9ICovXG5cbi8qIC5ub2RlIHRleHQgeyAqL1xuLyogICBwb2ludGVyLWV2ZW50czogbm9uZTsgKi9cbi8qICAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgI2ZmZjsgKi9cbi8qIH0gKi9cblxuLyogcGF0aC5saW5rLmxpbmsyIHsgKi9cbi8qICAgICBhbGw6IGluaXRpYWw7ICovXG4vKiAgICAgZmlsbDogdW5zZXQ7ICovXG4vKiAgICAgc3Ryb2tlOiB1bnNldDsgKi9cbi8qICAgICBzdHJva2Utb3BhY2l0eTogdW5zZXQ7ICovXG4vKiAgICAgc3Ryb2tlLXdpZHRoOiB1bnNldDsgKi9cbi8qIH0gKi9cblxuLyogLmxpbms6aG92ZXIgeyAqL1xuLyogICBzdHJva2Utb3BhY2l0eTogMC41OyAqL1xuLyogfSAqL1xuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICAgICAgICAgIDxMb2FkaW5nIHYtaWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiW2xvYWRpbmcgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiIHN0eWxlPVwiaGVpZ2h0OiA3MHZoO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbm8td3JhcCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE2cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdob3N0cycpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCIgYWN0aXZlX2hvc3RzX3R5cGUgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCIgc2Fua2V5X2Zvcm1hdF9saXN0IFwiIEBzZWxlY3Rfb3B0aW9uPVwiIHVwZGF0ZV9zYW5rZXkgXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj48L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCIgcmVsb2FkIFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNhbmtleSByZWY9XCJzYW5rZXlfY2hhcnRcIiBAbm9kZV9jbGljaz1cIiBvbl9ub2RlX2NsaWNrIFwiIDpzYW5rZXlfZGF0YT1cInNhbmtleV9kYXRhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NhbmtleT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlzX2xvY2FsOiBCb29sZWFuXG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2hvc3QvZmxvd3MvZGF0YS5sdWFgO1xuY29uc3Qgc2Fua2V5X2NoYXJ0ID0gcmVmKG51bGwpXG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcblxuY29uc3Qgc2Fua2V5X2Zvcm1hdF9saXN0ID0gW1xuICAgIHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiAzLCBpZDogJ2xvY2FsX29yaWdpbl9yZW1vdGVfdGFyZ2V0JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX2NsaV9yZW1vdGVfc3J2JyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9jbGlfcmVtb3RlX3NydicpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSxcbiAgICB7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogNCwgaWQ6ICdyZW1vdGVfb3JpZ2luX2xvY2FsX3RhcmdldCcsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9zcnZfcmVtb3RlX2NsaScpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfc3J2X3JlbW90ZV9jbGknKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0sXG4gICAgeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDUsIGlkOiAnYWxsX2hvc3RzJywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmFsbF9mbG93cycpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UuYWxsX2Zsb3dzJyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9LFxuXTtcblxuaWYgKHByb3BzLmlzX2xvY2FsKSB7XG4gICAgc2Fua2V5X2Zvcm1hdF9saXN0LnVuc2hpZnQoeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDEsIGlkOiAnbG9jYWxfb25seScsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9vbmx5JyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9vbmx5JyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9KVxufSBlbHNlIHtcbiAgICBzYW5rZXlfZm9ybWF0X2xpc3QudW5zaGlmdCh7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMiwgaWQ6ICdyZW1vdGVfb25seScsIHRpdGxlOiBfaTE4bignZmxvd3NfcGFnZS5yZW1vdGVfb25seScpLCBsYWJlbDogX2kxOG4oJ2Zsb3dzX3BhZ2UucmVtb3RlX29ubHknKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0pXG59XG5cbmNvbnN0IGFjdGl2ZV9ob3N0c190eXBlID0gcmVmKHNhbmtleV9mb3JtYXRfbGlzdFszXSk7XG5cbmNvbnN0IHNhbmtleV9kYXRhID0gcmVmKHt9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7IH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn0pO1xuXG5mdW5jdGlvbiBvbl9ub2RlX2NsaWNrKG5vZGUpIHtcbiAgICBpZiAobm9kZS5pc19saW5rX25vZGUgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICBsZXQgdXJsX29iaiA9IHtcbiAgICAgICAgaG9zdDogbm9kZS5pbmZvLmlwLFxuICAgICAgICB2bGFuOiBub2RlLmluZm8udmxhbixcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9vYmopO1xuICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhPyR7dXJsX3BhcmFtc31gO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoaG9zdF91cmwpO1xuICAgIC8vaG9zdD0nIC4uIGZsb3dbXCJjbGkuaXBcIl0gLi4gJyZ2bGFuPScgLi4gZmxvd1tcInZsYW5cIl1cbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZW50cnkgPSBhY3RpdmVfaG9zdHNfdHlwZS52YWx1ZTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZW50cnkuZmlsdGVyX25hbWUsIGVudHJ5LmlkKTtcbiAgICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuY29uc3QgcmVsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZV9zYW5rZXkoKVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEoKSB7XG4gICAgbG9hZGluZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IGRhdGEgPSBhd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBzYW5rZXlfZGF0YS52YWx1ZSA9IGRhdGE7XG4gICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG4vKlxuZnVuY3Rpb24gYWRkX2Zha2VfY2lyY3VsYXJfbGluayhncmFwaCkge1xuICAgIGNvbnN0IG5vZGVfaWRfMCA9IFwibm9kZV9pZF8wXCIsIG5vZGVfaWRfMSA9IFwibm9kZV9pZF8xXCI7XG4gICAgZ3JhcGgubm9kZXMucHVzaCh7IG5vZGVfaWQ6IG5vZGVfaWRfMCwgbGFiZWw6IG5vZGVfaWRfMCB9KTtcbiAgICBncmFwaC5ub2Rlcy5wdXNoKHsgbm9kZV9pZDogbm9kZV9pZF8xLCBsYWJlbDogbm9kZV9pZF8xIH0pO1xuICAgIGdyYXBoLmxpbmtzLnB1c2goeyBzb3VyY2Vfbm9kZV9pZDogbm9kZV9pZF8wLCB0YXJnZXRfbm9kZV9pZDogbm9kZV9pZF8xLCB2YWx1ZTogMTAsIGxhYmVsOiBgJHtub2RlX2lkXzB9XyR7bm9kZV9pZF8xfWAgfSk7XG4gICAgZ3JhcGgubGlua3MucHVzaCh7IHNvdXJjZV9ub2RlX2lkOiBub2RlX2lkXzEsIHRhcmdldF9ub2RlX2lkOiBub2RlX2lkXzAsIHZhbHVlOiAxMCwgbGFiZWw6IGAke25vZGVfaWRfMX1fJHtub2RlX2lkXzB9YCB9KTtcbn1cbiovXG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBjb25zdCB1cmxfcmVxdWVzdCA9IGdldF9zYW5rZXlfdXJsKCk7XG4gICAgLy8gbGV0IGdyYXBoID0gYXdhaXQgc2Fua2V5VXRpbHMuZ2V0X2RhdGEoKTtcbiAgICBsZXQgZ3JhcGggPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIC8vIGFkZF9mYWtlX2NpcmN1bGFyX2xpbmsoZ3JhcGgpO1xuICAgIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG4gICAgbGV0IG1haW5fbm9kZV9pZCA9IGdldF9tYWluX25vZGVfaWQoKTtcbiAgICBsZXQgc2Fua2V5X2RhdGEgPSBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgsIG1haW5fbm9kZV9pZCk7XG4gICAgKHNhbmtleV9kYXRhLmxpbmtzLmxlbmd0aCA+IDAgJiYgc2Fua2V5X2RhdGEubm9kZXMubGVuZ3RoID4gMCkgP1xuICAgICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOlxuICAgICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyh0cnVlKTtcbiAgICAvLyBzYW5rZXlfZGF0YSA9IG1ha2VfZGFnX2dyYXBoKHNhbmtleV9kYXRhKTtcbiAgICByZXR1cm4gc2Fua2V5X2RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfdXJsKCkge1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGhvc3Q6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKSxcbiAgICAgICAgdmxhbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpLFxuICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG4gICAgICAgIGhvc3RzX3R5cGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdHNfdHlwZVwiKSxcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7dXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgICByZXR1cm4gdXJsX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldF9tYWluX25vZGVfaWQoKSB7XG4gICAgcmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKGdyYXBoLCBtYWluX25vZGVfaWQpIHtcbiAgICBpZiAoZ3JhcGgubm9kZXMubGVuZ3RoID09IDAgJiYgZ3JhcGgubGlua3MubGVuZ3RoID09IDApIHsgcmV0dXJuIGdyYXBoOyB9XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGVfZGljdFtub2RlLm5vZGVfaWRdID0gbm9kZSk7XG5cbiAgICAvL2dldCBsaW5rIGRpcmVjdGlvbiBcbiAgICBjb25zdCBmX2dldF9saW5rX2RpcmVjdGlvbiA9IChsaW5rKSA9PiB7XG4gICAgICAgIGlmIChsaW5rLnNvdXJjZV9ub2RlX2lkID09IG1haW5fbm9kZV9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmsudGFyZ2V0X25vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBgV3JvbmcgZGlyZWN0aW9uIGxpbmsgJHtsaW5rLnNvdXJjZV9ub2RlX2lkfSAtPiAke2xpbmsudGFyZ2V0X25vZGVfaWR9YDtcbiAgICB9O1xuXG4gICAgLy8gZ2V0IG5vZGUgaWQgd2l0aCBkaXJlY3Rpb25cbiAgICBjb25zdCBmX2dldF9ub2RlX2RpcmVjdGlvbl9pZCA9IChub2RlX2lkLCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgaWYgKG5vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZV9pZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7ZGlyZWN0aW9ufV8ke25vZGVfaWR9YDtcbiAgICB9O1xuXG4gICAgLy8gY3JlYXRlIGEgbmV3IGdyYXBoIGR1cGxpY2F0aW5nIGFsbCBub2RlcyB3aXRoIGRpZmZlcmVudCBkaXJlY3Rpb25cbiAgICBsZXQgZ3JhcGgyX25vZGVfZGljdCA9IHt9O1xuICAgIGxldCBncmFwaDIgPSB7IG5vZGVzOiBbXSwgbGlua3M6IFtdIH07XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgICBsZXQgZGlyZWN0aW9uID0gZl9nZXRfbGlua19kaXJlY3Rpb24obGluayk7XG4gICAgICAgIGxldCBuZXdfbGluayA9IHtcbiAgICAgICAgICAgIHNvdXJjZV9ub2RlX2lkOiBmX2dldF9ub2RlX2RpcmVjdGlvbl9pZChsaW5rLnNvdXJjZV9ub2RlX2lkLCBkaXJlY3Rpb24pLFxuICAgICAgICAgICAgdGFyZ2V0X25vZGVfaWQ6IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkKGxpbmsudGFyZ2V0X25vZGVfaWQsIGRpcmVjdGlvbiksXG4gICAgICAgICAgICBsYWJlbDogbGluay5sYWJlbCxcbiAgICAgICAgICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuICAgICAgICAgICAgZGF0YTogbGluayxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IG5ld19ub2RlO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09IC0xKSB7XG4gICAgICAgICAgICBsZXQgbiA9IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXTtcbiAgICAgICAgICAgIG5ld19ub2RlID0geyBub2RlX2lkOiBuZXdfbGluay50YXJnZXRfbm9kZV9pZCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4gfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuID0gbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdO1xuICAgICAgICAgICAgbmV3X25vZGUgPSB7IG5vZGVfaWQ6IG5ld19saW5rLnNvdXJjZV9ub2RlX2lkLCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgICAgICB9XG4gICAgICAgIGdyYXBoMi5saW5rcy5wdXNoKG5ld19saW5rKTtcbiAgICAgICAgaWYgKGdyYXBoMl9ub2RlX2RpY3RbbmV3X25vZGUubm9kZV9pZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZ3JhcGgyX25vZGVfZGljdFtuZXdfbm9kZS5ub2RlX2lkXSA9IHRydWU7XG4gICAgICAgICAgICBncmFwaDIubm9kZXMucHVzaChuZXdfbm9kZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgbWFpbl9ub2RlID0gbm9kZV9kaWN0W21haW5fbm9kZV9pZF07XG4gICAgZ3JhcGgyLm5vZGVzLnB1c2goeyBub2RlX2lkOiBtYWluX25vZGUubm9kZV9pZCwgbGFiZWw6IG1haW5fbm9kZS5sYWJlbCwgZGF0YTogbWFpbl9ub2RlIH0pO1xuXG4gICAgLy8gdXBkYXRlIG5vZGUgZGljdFxuICAgIGdyYXBoMi5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuXG4gICAgLy8gcmV0dXJuIHRoZSBsaW5rIG5vZGVfaWQgXG4gICAgY29uc3QgZl9nZXRfbGlua19ub2RlX2lkID0gKGxpbmspID0+IHtcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IGZfZ2V0X2xpbmtfZGlyZWN0aW9uKGxpbmspO1xuICAgICAgICByZXR1cm4gYCR7ZGlyZWN0aW9ufV8ke2xpbmsubGFiZWx9YDtcbiAgICAgICAgLy8gcmV0dXJuIGAke2xpbmsuc291cmNlX25vZGVfaWR9XyR7bGluay5sYWJlbH1gOyBcbiAgICB9O1xuXG4gICAgbGV0IGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9OyAvLyBrZXk6IGxpbmsgbm9kZSBpZCwgdmFsdWU6IGxpbmtzXG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxpbmsgbm9kZV9pZFxuICAgIGdyYXBoMi5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgIGxldCBsaW5rX25vZGVfaWQgPSBmX2dldF9saW5rX25vZGVfaWQobGluayk7XG4gICAgICAgIGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG4gICAgICAgIGlmIChsaW5rX3RvX25vZGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIGxpbmtfdG9fbm9kZXMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGxpbmtfbm9kZV9pZCxcbiAgICAgICAgICAgICAgICBsYWJlbDogbGluay5sYWJlbCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7IC4uLmxpbmssIGlzX2xpbmtfbm9kZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIG5vZGVfbGlua3M6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdID0gbGlua190b19ub2RlcztcbiAgICAgICAgfVxuICAgICAgICBsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MucHVzaCh7XG4gICAgICAgICAgICBzb3VyY2U6IG5vZGVfZGljdFtsaW5rLnNvdXJjZV9ub2RlX2lkXSxcbiAgICAgICAgICAgIHRhcmdldDogbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdLFxuICAgICAgICAgICAgdmFsdWU6IGdldF9saW5rX3ZhbHVlKGxpbmspLFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3MgZ3JhcGgsIGNyZWF0aW5nIGEgbmV3IG5vZGUgZm9yIGVhY2ggbGlua1xuICAgIGxldCBub2RlcyA9IGdyYXBoMi5ub2Rlcy5tYXAoKG4pID0+IG4pLCBsaW5rcyA9IFtdO1xuICAgIGZvciAobGV0IGxpbmtfbm9kZV9pZCBpbiBsaW5rX3RvX25vZGVzX2RpY3QpIHtcbiAgICAgICAgbGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcbiAgICAgICAgbGV0IGxpbmtfbm9kZSA9IHtcbiAgICAgICAgICAgIG5vZGVfaWQ6IGxpbmtfdG9fbm9kZXMuaWQsXG4gICAgICAgICAgICBsYWJlbDogbGlua190b19ub2Rlcy5sYWJlbCxcbiAgICAgICAgICAgIGRhdGE6IGxpbmtfdG9fbm9kZXMuZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgbm9kZXMucHVzaChsaW5rX25vZGUpO1xuICAgICAgICBsaW5rX3RvX25vZGVzLm5vZGVfbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgICAgICAgICAgbGlua3MucHVzaCh7XG4gICAgICAgICAgICAgICAgc291cmNlX25vZGVfaWQ6IGxpbmsuc291cmNlLm5vZGVfaWQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0X25vZGVfaWQ6IGxpbmtfbm9kZS5ub2RlX2lkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBgJHtsaW5rLnNvdXJjZS5sYWJlbH0gLSAke2xpbmsudGFyZ2V0LmxhYmVsfTogJHtsaW5rX25vZGUubGFiZWx9YCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbGluay52YWx1ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBsaW5rLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2Vfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG4gICAgICAgICAgICAgICAgdGFyZ2V0X25vZGVfaWQ6IGxpbmsudGFyZ2V0Lm5vZGVfaWQsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHNhbmtleV9ub2RlX2RpY3QgPSB7fTsgLy8ga2V5OiBub2RlX2lkLCB2YWx1ZTogc2Fua2V5X25vZGVcbiAgICBsZXQgc2Fua2V5X25vZGVzID0gW107XG4gICAgbm9kZXMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgc2Fua2V5X25vZGUgPSB7IGluZGV4LCBub2RlX2lkOiBuLm5vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuLmRhdGEgfTtcbiAgICAgICAgc2Fua2V5X25vZGVfZGljdFtuLm5vZGVfaWRdID0gc2Fua2V5X25vZGU7XG4gICAgICAgIHNhbmtleV9ub2Rlcy5wdXNoKHNhbmtleV9ub2RlKTtcbiAgICB9KTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG4gICAgICAgIGxldCBzb3VyY2UgPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNvdXJjZTogc291cmNlLmluZGV4LFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQuaW5kZXgsXG4gICAgICAgICAgICBzb3VyY2Vfbm9kZV9pZDogc291cmNlLmluZGV4LFxuICAgICAgICAgICAgdGFyZ2V0X25vZGVfaWQ6IHRhcmdldC5pbmRleCxcbiAgICAgICAgICAgIHZhbHVlOiBsLnZhbHVlLFxuICAgICAgICAgICAgbGFiZWw6IGwubGFiZWwsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IHNhbmtleV9ub2RlcywgbGlua3M6IHNhbmtleV9saW5rcyB9O1xufVxuXG4vLyByZW1vdmUgYWxsIGxpbmtzIHdpdGggYSBub3QgZXhpc3Rpbmcgbm9kZVxuZnVuY3Rpb24gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCkge1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBub3QgZXhpc3Rpbmcgc291cmNlL3RhcmdldCBub2RlYCk7XG4gICAgbGV0IGxpbmtzID0gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2dfbGluayk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9O1xufVxuXG4vLyByZW1lb3ZlIGFsbCBjaXJjdWxhciBsaW5rcyBhbmQgcmV0dXJuIGEgZGFnIGdyYXBoXG5mdW5jdGlvbiBtYWtlX2RhZ19ncmFwaChncmFwaCkge1xuICAgIGxldCBub2Rlc19kZXN0X2RpY3QgPSB7fTsgLy8gZGljdGlvbmFyeSB7IFtub2RlX3NvdXJjZV9pZF06IG5vZGVzX3RhcmdldFtdIH1cbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsKSA9PiB7XG4gICAgICAgIGxldCBub2Rlc19kZXN0ID0gbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdO1xuICAgICAgICBpZiAobm9kZXNfZGVzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2Rlc19kZXN0ID0gW107XG4gICAgICAgICAgICBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gPSBub2Rlc19kZXN0O1xuICAgICAgICB9XG4gICAgICAgIG5vZGVzX2Rlc3QucHVzaChsLnRhcmdldF9ub2RlX2lkKTtcbiAgICB9KTtcbiAgICBsZXQgbm9kZXNfdG9fY2hlY2sgPSB7fTsgLy8gdGVtcCBkaWN0aW9uYXJ5IHVzZWQgZnJvbSBmX2FkZF9jaXJjdWxhcl9saW5rIFxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgbm9kZXNfdG9fY2hlY2tbbi5ub2RlX2lkXSA9IHsgY2hlY2tlZDogZmFsc2UsIHZpc2l0ZWQ6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICAvLyBjaXJjdWxhciBsaW5rcyBkaWN0IChrZXk6IGAke3NvdXJjZV9ub2RlX2lkfV8ke3RhcmdldF9ub2RlX2lkfWApXG4gICAgbGV0IGNpcmN1bGFyX2xpbmtzID0ge307XG4gICAgbGV0IGZfZ2V0X2xpbmtfa2V5ID0gKHNvdXJjZV9pZCwgdGFyZ2V0X2lkKSA9PiBgJHtzb3VyY2VfaWR9XyR7dGFyZ2V0X2lkfWA7XG5cbiAgICAvLyBkZWVwIG5hdmlnYXRlIHN0YXJ0aW5nIGZyb20gbm9kZV9pZCBhbmQgYWRkIGNpcmN1bGFyX2xpbmtzIHZpc2l0ZWQgaW4gY2lyY3VsYXJfbGlua3MgZGljdCBcbiAgICBsZXQgZl9zZXRfY2lyY3VsYXJfbGlua3MgPSAobm9kZV9pZCwgZnJvbV9ub2RlX2lkKSA9PiB7XG4gICAgICAgIGxldCBub2RlX3RvX2NoZWNrID0gbm9kZXNfdG9fY2hlY2tbbm9kZV9pZF07XG4gICAgICAgIGlmIChub2RlX3RvX2NoZWNrLmNoZWNrZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICAgICAgZWxzZSBpZiAobm9kZV90b19jaGVjay52aXNpdGVkID09IHRydWUpIHtcbiAgICAgICAgICAgIGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGZyb21fbm9kZV9pZCwgbm9kZV9pZCk7XG4gICAgICAgICAgICBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGluayAoc291cmNlOiAke2Zyb21fbm9kZV9pZH0sIHRhcmdldDogJHtub2RlX2lkfSApIGlzIGEgY2lyY3VsYXIgbGlua2ApO1xuICAgICAgICAgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gdHJ1ZTtcbiAgICAgICAgbGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3Rbbm9kZV9pZF07XG4gICAgICAgIGlmIChub2Rlc19kZXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXNfZGVzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRfbm9kZV9pZCA9IG5vZGVzX2Rlc3RbaV07XG4gICAgICAgICAgICAgICAgZl9zZXRfY2lyY3VsYXJfbGlua3ModGFyZ2V0X25vZGVfaWQsIG5vZGVfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IGZhbHNlO1xuICAgICAgICBub2RlX3RvX2NoZWNrLmNoZWNrZWQgPSB0cnVlO1xuICAgIH07XG4gICAgLy8gc2V0IGNpcmN1bGFyX2xpbmtzIGRpY3Rpb25hcnlcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBmX3NldF9jaXJjdWxhcl9saW5rcyhuLm5vZGVfaWQpKTtcblxuICAgIC8vIHJlbW92ZSBubyBkYWcgbm9kZXMvbGlua3NcbiAgICBsZXQgZl9maWx0ZXJfbGluayA9IChsKSA9PiB7XG4gICAgICAgIGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGwuc291cmNlX25vZGVfaWQsIGwudGFyZ2V0X25vZGVfaWQpO1xuICAgICAgICBsZXQgdGFrZV9saW5rID0gY2lyY3VsYXJfbGlua3NbbGlua19rZXldID09IG51bGw7XG4gICAgICAgIHJldHVybiB0YWtlX2xpbms7XG4gICAgfTtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlcl9saW5rLCBmX2xvZ19saW5rKTtcblxuICAgIGxldCBmX2xvZ19ub2RlID0gKG4pID0+IGNvbnNvbGUuZXJyb3IoYG5vZGUgJHtuLm5vZGVfaWR9IHJlbW92ZWQgZm9yIGNpcmN1bGFyIGxpbmtzYCk7XG4gICAgbGV0IG5vZGVzID0gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayh7IG5vZGVzOiBncmFwaC5ub2RlcywgbGlua3MgfSwgZl9sb2dfbm9kZSk7XG5cbiAgICAvLyByZXR1cm4gYSBkYWcgZ3JhcGhcbiAgICByZXR1cm4geyBub2RlcywgbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge307XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4gbm9kZV9kaWN0W24ubm9kZV9pZF0gPSB0cnVlKTtcbiAgICBsZXQgZl9maWx0ZXIgPSAobCkgPT4gbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdICE9IG51bGwgJiYgbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdICE9IG51bGw7XG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmZ1bmN0aW9uIGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IGxpbmtfc291cmNlX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua190YXJnZXRfZGljdCA9IHt9O1xuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcbiAgICAgICAgbGlua19zb3VyY2VfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IHRydWU7XG4gICAgICAgIGxpbmtfdGFyZ2V0X2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIGxldCBmX2ZpbHRlciA9IChuKSA9PiBsaW5rX3NvdXJjZV9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZSB8fCBsaW5rX3RhcmdldF9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZTtcbiAgICBsZXQgbm9kZXMgPSBmaWx0ZXJfbG9nKGdyYXBoLm5vZGVzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBub2Rlcztcbn1cblxuLy8gbG9nIGVsZW1lbnRzIGRlbGV0ZWQgaWYgZl9sb2cgIT0gbnVsbFxuZnVuY3Rpb24gZmlsdGVyX2xvZyhlbGVtZW50cywgZl9maWx0ZXIsIGZfbG9nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWtlX2VsZW1lbnQgPSBmX2ZpbHRlcihlKTtcbiAgICAgICAgaWYgKHRha2VfZWxlbWVudCA9PSBmYWxzZSAmJiBmX2xvZyAhPSBudWxsKSB7XG4gICAgICAgICAgICBmX2xvZyhlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFrZV9lbGVtZW50O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua192YWx1ZShsaW5rKSB7XG4gICAgcmV0dXJuIGxpbmsuZGF0YT8uaW5mbz8udHJhZmZpYztcbn1cblxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCIvKlxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4gKi9cblxuLypcbiAgSGVyZSBhIGxpc3Qgb2YgZnVuY3Rpb25zIHVzZWQgdG8gY2hlY2ssIGZvcm1hdCBkYXRhO1xuICBlLmcuIGZ1bmN0aW9ucyB0aGF0IGNoZWNrIGlmIGEgc3RyaW5nIGlzIG51bGwgb3IgZW1wdHlcbiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGNoZWNrIGlmIHZhbHVlIGlzIG51bGwsIGVtcHR5IG9yIDAgKi9cbmNvbnN0IGlzRW1wdHlPck51bGwgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuICEhKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT0gXCJcIiB8fCB2YWx1ZSA9PSAwKTtcbn1cblxuLyogVGhpcyBmdW5jdGlvbiBjaGVjayBpZiB2YWx1ZSBpcyBudWxsLCBvciBhbiBlbXB0eSBhcnJheSAqL1xuY29uc3QgaXNFbXB0eUFycmF5T3JOdWxsID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiAhISh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGRhdGFVdGlscyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBpc0VtcHR5T3JOdWxsLFxuICAgIGlzRW1wdHlBcnJheU9yTnVsbCxcbiAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZGF0YVV0aWxzO1xuXG4iLCIvKlxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4gKi9cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbmZ1bmN0aW9uIGZvcm1hdF9udW1fZm9yX3NvcnQobnVtKSB7XG4gIGlmKHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAvKiBDaGVjayBpZiBpdCdzIGEgbnVtYmVyICovXG4gICAgcmV0dXJuIG51bTtcbiAgfSBlbHNlIGlmKHR5cGVvZiBudW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZihudW0gPT0gXCJcIikge1xuICAgICAgLyogU2FmZXR5IGNoZWNrICovXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgXG4gICAgLyogSWYgaXQncyBhIHN0cmluZyBjb252ZXJ0IGl0IGludG8gYSBudW1iZXIgKi9cbiAgICBudW0gPSBudW0uc3BsaXQoJywnKS5qb2luKFwiXCIpO1xuICAgIG51bSA9IHBhcnNlSW50KG51bSk7XG4gIH0gZWxzZSB7XG4gICAgLyogSW4gY2FzZSBib3RoIGZhaWxlZCwgY29udmVydCBudW0gdG8gMCAqL1xuICAgIG51bSA9IDA7XG4gIH1cblxuICByZXR1cm4gbnVtO1xufVxuXG4vLyBtYXggbnVtYmVyIHZhbHVlIGZvciBzb3J0IG51bWJlciB3aXRoIG5vcm1hbGl6ZSBvcHRpb24gXG4vLyBmb3IgY2FzZXM6IGxhc3Qgc2NhbiBhbmQgbGFzdCBkdXJhdGlvbiBjb2x1bW4gdG8gaGFuZGxlIGVtcHR5IHZhbHVlc1xuY29uc3QgTUFYX05VTUJFUl9WQUxVRSA9IDk5OTk5OTk5OTk5O1xuXG5jb25zdCBub3JtYWxpemVfbnVtYmVyX3ZhbHVlID0gZnVuY3Rpb24obG93ZXJfdmFsdWUsIHZhbCwgc29ydCkge1xuICBpZiAodmFsID09IGxvd2VyX3ZhbHVlKSB7XG4gICAgaWYgKHNvcnQgPT0gMSkge1xuICAgICAgdmFsID0gTUFYX05VTUJFUl9WQUxVRTtcbiAgICB9XG4gIH0gICAgXG4gIHJldHVybiB2YWw7IFxufVxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIFNvcnQgYnkgTmFtZSAqL1xuY29uc3Qgc29ydEJ5TmFtZSA9IGZ1bmN0aW9uKHZhbF8xLCB2YWxfMiwgc29ydCkge1xuICBpZiAoc29ydCA9PSAxKSB7XG4gICAgcmV0dXJuIHZhbF8xPy5sb2NhbGVDb21wYXJlKHZhbF8yKTtcbiAgfVxuICByZXR1cm4gdmFsXzI/LmxvY2FsZUNvbXBhcmUodmFsXzEpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogU29ydCBieSBJUCBBZGRyZXNzZXMgKi9cbmNvbnN0IHNvcnRCeUlQID0gZnVuY3Rpb24odmFsXzEsIHZhbF8yLCBzb3J0KSB7XG4gIHZhbF8xID0gTnRvcFV0aWxzLmNvbnZlcnRJUEFkZHJlc3ModmFsXzEpO1xuICB2YWxfMiA9IE50b3BVdGlscy5jb252ZXJ0SVBBZGRyZXNzKHZhbF8yKTtcbiAgaWYgKHNvcnQgPT0gMSkge1xuICAgIHJldHVybiB2YWxfMS5sb2NhbGVDb21wYXJlKHZhbF8yKTtcbiAgfVxuICByZXR1cm4gdmFsXzIubG9jYWxlQ29tcGFyZSh2YWxfMSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBTb3J0IGJ5IE51bWJlciAqL1xuY29uc3Qgc29ydEJ5TnVtYmVyID0gZnVuY3Rpb24odmFsXzEsIHZhbF8yLCBzb3J0KSB7XG4gIC8qIEl0J3MgYW4gYXJyYXkgKi9cbiAgdmFsXzEgPSBmb3JtYXRfbnVtX2Zvcl9zb3J0KHZhbF8xKTtcbiAgdmFsXzIgPSBmb3JtYXRfbnVtX2Zvcl9zb3J0KHZhbF8yKTtcblxuICBpZiAoc29ydCA9PSAxKSB7XG4gICAgcmV0dXJuIHZhbF8xIC0gdmFsXzI7XG4gIH1cbiAgcmV0dXJuIHZhbF8yIC0gdmFsXzE7IFxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogU29ydCBieSBOdW1iZXIgYWZ0ZXIgdmFsdWVzIG5vcm1hbGl6YXRpb24gKi9cbmNvbnN0IHNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUgPSBmdW5jdGlvbih2YWxfMSwgdmFsXzIsIHNvcnQsIGxvd2VyX3ZhbHVlKSB7XG4gIHZhbF8xID0gbm9ybWFsaXplX251bWJlcl92YWx1ZShsb3dlcl92YWx1ZSwgdmFsXzEsIHNvcnQpO1xuICB2YWxfMiA9IG5vcm1hbGl6ZV9udW1iZXJfdmFsdWUobG93ZXJfdmFsdWUsIHZhbF8yLCBzb3J0KTtcblxuICByZXR1cm4gc29ydEJ5TnVtYmVyKHZhbF8xLHZhbF8yLHNvcnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuY29uc3Qgc29ydGluZ0Z1bmN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzb3J0QnlJUCxcbiAgICBzb3J0QnlOYW1lLFxuICAgIHNvcnRCeU51bWJlcixcbiAgICBzb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBzb3J0aW5nRnVuY3Rpb25zOyIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cblxuICAgICAgPGRpdiB2LWlmPVwiaW52YWxpZF9hZGRcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gYWxlcnQtZGlzbWlzc2FibGVcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm8gbWUtMVwiPjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+IHt7IF9pMThuKCdydWxlX2FscmVhZHlfcHJlc2VudCcpIH19PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmNsYXNzPVwiW3J1bGVfdHlwZSA9PSAnSG9zdCcgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIj5cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiaG9zdHNcIiBAY2xpY2s9XCJzZXRfcnVsZV90eXBlKCdIb3N0JylcIj4ge3tcbiAgICAgICAgICAgICAgICBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5hZGRfcnVsZXNfdHlwZV9ob3N0XCIpIH19XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ2ludGVyZmFjZScgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIj5cbiAgICAgICAgICAgICAgPGlucHV0IEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ2ludGVyZmFjZScpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cImludGVyZmFjZVwiPiB7eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5hZGRfcnVsZXNfdHlwZV9pbnRlcmZhY2VcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgdi1pZj1cImZsb3dfZGV2aWNlX3RpbWVzZXJpZXNfYXZhaWxhYmxlID09IHRydWVcIiBjbGFzcz1cImJ0biBcIlxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICdleHBvcnRlcicgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIj5cbiAgICAgICAgICAgICAgPGlucHV0IEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ2V4cG9ydGVyJylcIiBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJydWxlX3R5cGVcIiB2YWx1ZT1cImV4cG9ydGVyXCI+XG4gICAgICAgICAgICAgIHt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlX2Zsb3dfZXhwb3J0ZXJcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgdi1pZj1cImhhc19ob3N0X3Bvb2xzID09IHRydWVcIiBjbGFzcz1cImJ0biBcIlxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICdob3N0X3Bvb2wnID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeSddXCI+XG4gICAgICAgICAgICAgIDxpbnB1dCBAY2xpY2s9XCJzZXRfcnVsZV90eXBlKCdob3N0X3Bvb2wnKVwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJob3N0X3Bvb2xcIj4ge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfaG9zdF9wb29sXCIpIH19XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPGxhYmVsIHYtaWY9XCJoYXNfY2lkciA9PSB0cnVlXCIgY2xhc3M9XCJidG4gXCJcbiAgICAgICAgICAgICAgOmNsYXNzPVwiW3J1bGVfdHlwZSA9PSAnQ0lEUicgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIj5cbiAgICAgICAgICAgICAgPGlucHV0IEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ0NJRFInKVwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiQ0lEUlwiPiB7e1xuICAgICAgICAgICAgICAgIF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlX2NpZHJcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgdi1pZj1cInJ1bGVfdHlwZSA9PSAnSG9zdCdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJob3N0XCIgQGlucHV0PVwiY2hlY2tfZW1wdHlfaG9zdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6cGxhY2Vob2xkZXI9XCJob3N0X3BsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ0NJRFInXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldFwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX25ldHdvcmtcIiA6b3B0aW9ucz1cIm5ldHdvcmtfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfaG9zdF9wb29sXCIgOm9wdGlvbnM9XCJob3N0X3Bvb2xfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdpbnRlcmZhY2UnXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldF9pbnRlcmZhY2VcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9pZmlkXCIgOm9wdGlvbnM9XCJpZmlkX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdleHBvcnRlcicgJiYgZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUgPT0gdHJ1ZVwiXG4gICAgICAgIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRfZXhwb3J0ZXJfZGV2aWNlXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlXCIgOm9wdGlvbnM9XCJmbG93X2V4cG9ydGVyX2RldmljZXNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZXhwb3J0ZXJfaW50ZXJmYWNlc1wiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS5pZCAhPSAnKidcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRfZXhwb3J0ZXJfZGV2aWNlX2lmaWRcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZFwiIDpvcHRpb25zPVwiZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuXG5cbiAgICAgIDwhLS0gTWV0cmljIGluZm9ybWF0aW9uLCBoZXJlIGEgbWV0cmljIGlzIHNlbGVjdGVkIChlLmcuIEROUyB0cmFmZmljKSAtLT5cbiAgICAgIDxkaXYgdi1pZj1cIm1ldHJpY3NfcmVhZHlcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInJ1bGVfdHlwZSA9PSAnSG9zdCdcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfbWV0cmljXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfdGhyZXNob2xkKClcIlxuICAgICAgICAgICAgICA6b3B0aW9ucz1cIm1ldHJpY19saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cInJ1bGVfdHlwZSA9PSAnaW50ZXJmYWNlJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljXCJcbiAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfaW50ZXJmYWNlX3RocmVzaG9sZCgpXCIgOm9wdGlvbnM9XCJpbnRlcmZhY2VfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwicnVsZV90eXBlID09ICdleHBvcnRlcidcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljXCJcbiAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfbWV0cmljX3R5cGVfZXhwb3J0ZXJcIiA6b3B0aW9ucz1cImZsb3dfZGV2aWNlX21ldHJpY19saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cInJ1bGVfdHlwZSA9PSAnaG9zdF9wb29sJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKVwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwiaG9zdF9wb29sX21ldHJpY19saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwicnVsZV90eXBlID09ICdDSURSJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9uZXR3b3JrX21ldHJpY1wiIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX21ldHJpY190eXBlX2hwKClcIlxuICAgICAgICAgICAgICA6b3B0aW9ucz1cIm5ldHdvcmtfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDwhLS0gRnJlcXVlbmN5IGluZm9ybWF0aW9uLCBhIGZyZXF1ZW5jeSBvZiAxIGRheSwgNSBtaW51dGUgb3IgMSBob3VyIGZvciBleGFtcGxlIC0tPlxuICAgICAgPGRpdiB2LWlmPVwibWV0cmljc19yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZnJlcXVlbmN5XCIgOm9wdGlvbnM9XCJmcmVxdWVuY3lfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8IS0tIFRocmVzaG9sZCBpbmZvcm1hdGlvbiwgbWF4aW11bSBhbW91bnQgb2YgYnl0ZXMgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIiBzdHlsZT1cIm1hcmdpbi10b3A6M3B4XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInZpc2libGVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTNcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJtZXRyaWNfdHlwZVwiIDpvcHRpb25zPVwiYWN0aXZlX21ldHJpY190eXBlX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtM1wiIDpjbGFzcz1cIlttZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCcgPyAncC0wJyA6ICcnXVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd0aHJvdWdocHV0J1wiIHYtZm9yPVwibWVhc3VyZSBpbiB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0XCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIlxuICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwiW21lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeSddXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57e1xuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIiB2LWZvcj1cIm1lYXN1cmUgaW4gcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCJcbiAgICAgICAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIlttZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3tcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3ZvbHVtZSdcIiB2LWZvcj1cIm1lYXN1cmUgaW4gdm9sdW1lX3RocmVzaG9sZF9saXN0XCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgICAgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIlxuICAgICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwiW21lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeSddXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57e1xuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgYnRuLWdyb3VwIGZsb2F0LWVuZCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJtZWFzdXJlIGluIHNpZ25fdGhyZXNob2xkX2xpc3RcIj5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgIHJlZj1cInRocmVzaG9sZF9zaWduXCIgbmFtZT1cInRocmVzaG9sZF9zaWduXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9zaWduX3JhZGlvXCJcbiAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJbbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7XG4gICAgICAgICAgICAgICAgICBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8ZGl2IDpjbGFzcz1cIlt2aXNpYmxlID8gJ2NvbC1zbS0yJyA6ICdjb2wtc20tOCddXCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIj5cbiAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAwXCIgbWluPVwiMVwiXG4gICAgICAgICAgICAgIHJlcXVpcmVkPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAyM1wiIG1pbj1cIjFcIlxuICAgICAgICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UgYWxlcnQgYWxlcnQtd2FybmluZyBtdC0zXCI+XG4gICAgICAgICAge3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5ob3N0X3J1bGVzX3BlcmNlbnRhZ2VcIikgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiIDphZGRfc3ViX25vdGVzPVwidHJ1ZVwiIDpzdWJfbm90ZV9saXN0PVwic3ViX25vdGVzX2xpc3RcIj5cbiAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZCAmJiBydWxlX3R5cGUgPT0gJ0hvc3QnXCI+e3tcbiAgICAgICAgICBfaTE4bignYWRkJykgfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGQgJiYgcnVsZV90eXBlID09ICdIb3N0J1wiPnt7XG4gICAgICAgICAgX2kxOG4oJ2FwcGx5JykgfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgZGF0YVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YS11dGlsc1wiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcblxuY29uc3QgaW5wdXRfbWFjX2xpc3QgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF90cmlnZ2VyX2FsZXJ0cyA9IHJlZihcIlwiKTtcblxuXG5sZXQgaGFzX2hvc3RfcG9vbHMgPSByZWYoZmFsc2UpO1xubGV0IGhhc19jaWRyID0gcmVmKGZhbHNlKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJywgJ2VkaXQnXSk7XG5sZXQgdGl0bGUgPSBpMThuKCdpZl9zdGF0c19jb25maWcuYWRkX2hvc3RfcnVsZXNfdGl0bGUnKTtcbmNvbnN0IGhvc3RfcGxhY2Vob2xkZXIgPSBpMThuKCdpZl9zdGF0c19jb25maWcuaG9zdF9wbGFjZWhvbGRlcicpXG5cbmNvbnN0IG1ldHJpY3NfcmVhZHkgPSByZWYoZmFsc2UpXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbWV0cmljX2xpc3QgPSByZWYoW10pXG5jb25zdCBpbml0X2Z1bmMgPSByZWYobnVsbCk7XG5jb25zdCBkZWxldGVfcm93ID0gcmVmKG51bGwpO1xuY29uc3QgaWZpZF9saXN0ID0gcmVmKFtdKVxuY29uc3QgZmxvd19leHBvcnRlcl9kZXZpY2VzID0gcmVmKFtdKVxuY29uc3QgZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0ID0gcmVmKFtdKVxuY29uc3QgaW50ZXJmYWNlX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgaG9zdF9wb29sX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgZmxvd19kZXZpY2VfbWV0cmljX2xpc3QgPSByZWYoW10pXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IHJlZihbXSlcbmNvbnN0IHRocmVzaG9sZF9tZWFzdXJlID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGRfc2lnbiA9IHJlZihudWxsKVxuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfZnJlcXVlbmN5ID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfaWZpZCA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZSA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBkaXNhYmxlX2FkZCA9IHJlZih0cnVlKVxuY29uc3QgbWV0cmljX3R5cGUgPSByZWYoe30pXG5jb25zdCB2aXNpYmxlID0gcmVmKHRydWUpXG5jb25zdCBydWxlX3R5cGUgPSByZWYoXCJob3N0c1wiKTtcbmNvbnN0IGZsb3dfZGV2aWNlX3RpbWVzZXJpZXNfYXZhaWxhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSlcbmNvbnN0IHBhZ2VfY3NyZl8gPSByZWYobnVsbCk7XG5jb25zdCByb3dfdG9fZWRpdF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGludmFsaWRfYWRkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGhvc3RfcG9vbF9saXN0ID0gcmVmKG51bGwpO1xuY29uc3QgbmV0d29ya19saXN0ID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfaG9zdF9wb29sID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX25ldHdvcmsgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMgPSByZWYoe30pO1xuY29uc3QgbmV0d29ya19tZXRyaWNfbGlzdCA9IHJlZihudWxsKTtcbmxldCBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXSk7XG5cblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMScpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMicpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfMycpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfNCcpLFxuXTtcblxuY29uc3Qgc3ViX25vdGVzX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV81Jylcbl07XG5cbmNvbnN0IG1ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlIH0sXG5dKVxuXG4vKiBDdXJyZW50bHkgZGlzYWJsZWQgdGhlIHBlcmNlbnRhZ2UgKi9cbmNvbnN0IGV4cG9ydGVyX21ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlIH0sXG5dKVxuXG5jb25zdCBwb29sX21ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlLCBtZWFzdXJlX3VuaXQ6ICdicHMnIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlLCBtZWFzdXJlX3VuaXQ6ICdicHMnIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlLCBtZWFzdXJlX3VuaXQ6ICdudW1iZXInIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd2YWx1ZScpLCBsYWJlbDogX2kxOG4oJ3ZhbHVlJyksIGlkOiAndmFsdWUnLCBhY3RpdmU6IGZhbHNlLCBtZWFzdXJlX3VuaXQ6ICdudW1iZXInIH1cbl0pXG5cbmNvbnN0IGV4cG9ydGVyX3VzYWdlX3R5cGVfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ2Fic29sdXRlX3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlLCBtZWFzdXJlX3VuaXQ6ICdudW1iZXInIH0sXG5dKVxuXG5jb25zdCB2b2x1bWVfdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigna2InKSwgbGFiZWw6IF9pMThuKCdrYicpLCBpZDogJ2tiJywgdmFsdWU6IDEwMjQsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ21iJyksIGxhYmVsOiBfaTE4bignbWInKSwgaWQ6ICdtYicsIHZhbHVlOiAxMDQ4NTc2LCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdnYicpLCBsYWJlbDogX2kxOG4oJ2diJyksIGlkOiAnZ2InLCB2YWx1ZTogMTA3Mzc0MTgyNCwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigna2JwcycpLCBsYWJlbDogX2kxOG4oJ2ticHMnKSwgaWQ6ICdrYnBzJywgdmFsdWU6IDEwMDAsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ21icHMnKSwgbGFiZWw6IF9pMThuKCdtYnBzJyksIGlkOiAnbWJwcycsIHZhbHVlOiAxMDAwMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdnYnBzJyksIGxhYmVsOiBfaTE4bignZ2JwcycpLCBpZDogJ2dicHMnLCB2YWx1ZTogMTAwMDAwMDAwMCwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHNpZ25fdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiPlwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBcIi1cIiwgbGFiZWw6IFwiPFwiLCBpZDogJ21pbnVzJywgdmFsdWU6IC0xLCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlIH0sXG5dKTtcblxuY29uc3QgcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdCA9IFtcbiAgeyB0aXRsZTogXCIrXCIsIGxhYmVsOiBcIiVcIiwgaWQ6ICdwbHVzJywgdmFsdWU6IDEsIGFjdGl2ZTogdHJ1ZSB9LFxuXVxuXG5jb25zdCBob3N0ID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGQgPSByZWYobnVsbClcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4geyB9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgbWV0cmljX2xpc3Q6IEFycmF5LFxuICBpZmlkX2xpc3Q6IEFycmF5LFxuICBmbG93X2V4cG9ydGVyX2RldmljZXM6IEFycmF5LFxuICBpbnRlcmZhY2VfbWV0cmljX2xpc3Q6IEFycmF5LFxuICBmbG93X2RldmljZV9tZXRyaWNfbGlzdDogQXJyYXksXG4gIGZyZXF1ZW5jeV9saXN0OiBBcnJheSxcbiAgaW5pdF9mdW5jOiBGdW5jdGlvbixcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KTtcblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZlxufVxuXG5mdW5jdGlvbiByZXNldF9yYWRpb19zZWxlY3Rpb24ocmFkaW9fYXJyYXkpIHtcblxuICByYWRpb19hcnJheS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmFjdGl2ZSA9IGl0ZW0uZGVmYXVsdF9hY3RpdmUgPT0gdHJ1ZSk7XG59XG5cbi8qKlxuICogXG4gKiBSZXNldCBmaWVsZHMgaW4gbW9kYWwgZm9ybSBcbiAqL1xuY29uc3QgcmVzZXRfbW9kYWxfZm9ybSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgaW52YWxpZF9hZGQudmFsdWUgPSBmYWxzZTtcbiAgaG9zdC52YWx1ZSA9IFwiXCI7XG4gIHJ1bGVfdHlwZS52YWx1ZSA9IFwiSG9zdFwiO1xuICBzZWxlY3RlZF9pZmlkLnZhbHVlID0gaWZpZF9saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBtZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZSA9IGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljLnZhbHVlID0gZmxvd19kZXZpY2VfbWV0cmljX2xpc3QudmFsdWVbMF07XG5cbiAgaXNfZWRpdF9wYWdlLnZhbHVlID0gZmFsc2U7XG4gIHRpdGxlID0gaTE4bignaWZfc3RhdHNfY29uZmlnLmFkZF9ob3N0X3J1bGVzX3RpdGxlJyk7XG4gIHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeV9saXN0LnZhbHVlWzBdO1xuICBtZXRyaWNfdHlwZS52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZSA9IGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZVsxXTtcbiAgaWYgKHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlX2V4cG9ydGVyX2ludGVyZmFjZXMoKVxuICB9XG5cbiAgLy8gcmVzZXQgbWV0cmljX3R5cGVfbGlzdFxuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHQuYWN0aXZlID0gZmFsc2UpO1xuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdLmFjdGl2ZSA9IHRydWU7XG5cbiAgaWYgKGhvc3RfcG9vbF9saXN0LnZhbHVlICE9IG51bGwpXG4gICAgc2VsZWN0ZWRfaG9zdF9wb29sLnZhbHVlID0gaG9zdF9wb29sX2xpc3QudmFsdWVbMF07XG5cbiAgc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZSA9IGhvc3RfcG9vbF9tZXRyaWNfbGlzdC52YWx1ZVswXTtcblxuICBpZiAobmV0d29ya19saXN0LnZhbHVlICE9IG51bGwpXG4gICAgc2VsZWN0ZWRfbmV0d29yay52YWx1ZSA9IG5ldHdvcmtfbGlzdC52YWx1ZVswXTtcbiAgaWYgKG5ldHdvcmtfbWV0cmljX2xpc3QudmFsdWUgIT0gbnVsbClcbiAgICBzZWxlY3RlZF9uZXR3b3JrX21ldHJpYy52YWx1ZSA9IG5ldHdvcmtfbWV0cmljX2xpc3QudmFsdWVbMF07XG5cblxuICByZXNldF9yYWRpb19zZWxlY3Rpb24odm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlKTtcbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuICByZXNldF9yYWRpb19zZWxlY3Rpb24oc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG5cbiAgcnVsZV90eXBlLnZhbHVlID0gXCJIb3N0XCI7XG5cbiAgZGlzYWJsZV9hZGQudmFsdWUgPSB0cnVlO1xuXG4gIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IDE7XG5cbiAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSBudWxsO1xuXG4gIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZTtcblxuICBpZiAocnVsZV90eXBlID09ICdIb3N0JyB8fCBydWxlX3R5cGUgPT0gJ2ludGVyZmFjZScpIHtcbiAgICBtZXRyaWNfdHlwZS52YWxlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgfSBlbHNlIHtcbiAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuICB9XG5cbn1cblxuY29uc3Qgc2V0X3J1bGVfdHlwZSA9ICh0eXBlKSA9PiB7XG4gIHJ1bGVfdHlwZS52YWx1ZSA9IHR5cGU7XG5cbiAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlO1xuXG4gIGlmICh0eXBlID09IFwiaG9zdF9wb29sXCIgfHwgdHlwZSA9PSBcIkNJRFJcIikge1xuICAgIGNoYW5nZV9tZXRyaWNfdHlwZV9ocCgpO1xuXG4gICAgaWYgKHR5cGUgPT0gXCJob3N0X3Bvb2xcIilcbiAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWVbMV07XG4gICAgZWxzZVxuICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcblxuXG4gIH0gZWxzZSB7XG4gICAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuXG4gIH1cblxuXG5cbn1cblxuXG5jb25zdCBjaGFuZ2VfbWV0cmljX3R5cGVfZXhwb3J0ZXIgPSAoKSA9PiB7XG4gIGxldCB0bXBfbWV0cmljX3R5cGVfbGlzdCA9IFtdO1xuICBpZiAoKHNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYy52YWx1ZS5pZCA9PSBcImZsb3dkZXZfcG9ydDp1c2FnZVwiKSkge1xuICAgIGV4cG9ydGVyX3VzYWdlX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5tZWFzdXJlX3VuaXQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgdG1wX21ldHJpY190eXBlX2xpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlID0gdG1wX21ldHJpY190eXBlX2xpc3Q7XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0ZXJfbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5pZCAhPSAndmFsdWUnKSB7XG4gICAgICAgIHRtcF9tZXRyaWNfdHlwZV9saXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSlcbiAgICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IHRtcF9tZXRyaWNfdHlwZV9saXN0O1xuICB9XG4gIG1ldHJpY190eXBlLnZhbHVlID0gYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG59XG5cblxuY29uc3QgY2hhbmdlX21ldHJpY190eXBlX2hwID0gKHNldF9hY3RpdmVfb25lKSA9PiB7XG4gIGxldCB0bXBfbWV0cmljX3R5cGVfbGlzdCA9IFtdO1xuICBpZiAoKHJ1bGVfdHlwZS52YWx1ZSA9PSBcImhvc3RfcG9vbFwiICYmIHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMudmFsdWUubWVhc3VyZV91bml0ICE9IFwiYnBzXCIpIHx8IChydWxlX3R5cGUudmFsdWUgPT0gXCJDSURSXCIgJiYgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUubWVhc3VyZV91bml0ICE9IFwiYnBzXCIpKSB7XG5cbiAgICBwb29sX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0ubWVhc3VyZV91bml0ID09ICdudW1iZXInKSB7XG4gICAgICAgIHRtcF9tZXRyaWNfdHlwZV9saXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSlcblxuICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlID0gdG1wX21ldHJpY190eXBlX2xpc3Q7XG5cbiAgfSBlbHNlIHtcblxuICAgIHBvb2xfbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5pZCAhPSAndmFsdWUnKSB7XG4gICAgICAgIHRtcF9tZXRyaWNfdHlwZV9saXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSlcbiAgICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IHRtcF9tZXRyaWNfdHlwZV9saXN0O1xuXG4gIH1cbiAgaWYgKHNldF9hY3RpdmVfb25lID09IG51bGwgfHwgc2V0X2FjdGl2ZV9vbmUgPT0gZmFsc2UpIHtcbiAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuICB9XG5cbn1cblxuXG4vKipcbiAqIFxuICogU2V0IHJvdyB0byBlZGl0IFxuICovXG5jb25zdCBzZXRfcm93X3RvX2VkaXQgPSAocm93KSA9PiB7XG5cbiAgaWYgKHJvdyAhPSBudWxsKSB7XG4gICAgdGl0bGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmVkaXRfaG9zdF9ydWxlc190aXRsZScpO1xuICAgIGlzX2VkaXRfcGFnZS52YWx1ZSA9IHRydWU7XG5cbiAgICByb3dfdG9fZWRpdF9pZC52YWx1ZSA9IHJvdy5yb3dfaWQ7XG5cbiAgICBkaXNhYmxlX2FkZC52YWx1ZSA9IGZhbHNlO1xuXG4gICAgLy8gc2V0IHRocmVzaG9sZCBzaWduXG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICB0LmFjdGl2ZSA9ICh0LnZhbHVlID09IHJvdy50aHJlc2hvbGRfc2lnbilcbiAgICB9KVxuXG4gICAgLy8gc2V0IG1ldHJpY190eXBlXG4gICAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZiAodC5pZCA9PSByb3cubWV0cmljX3R5cGUpIHtcbiAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWU7XG5cbiAgICAvLyBzZXQgdGhyZXNob2xkXG4gICAgaWYgKHJvdy5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJylcbiAgICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICgocm93LnRocmVzaG9sZCAlIHQudmFsdWUpID09IDApIHtcbiAgICAgICAgICBsZXQgcm93X3RocmVzaG9sZF92YWx1ZSA9IHJvdy50aHJlc2hvbGQgLyB0LnZhbHVlO1xuICAgICAgICAgIGlmIChyb3dfdGhyZXNob2xkX3ZhbHVlIDwgMTAyNCkge1xuICAgICAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93X3RocmVzaG9sZF92YWx1ZSA9PSAwID8gMSA6IHJvd190aHJlc2hvbGRfdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgZWxzZVxuICAgICAgaWYgKHJvdy5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcbiAgICAgICAgLy9yb3cudGhyZXNob2xkID0gcm93LnRocmVzaG9sZCAqIDg7XG4gICAgICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgIGlmICgocm93LnRocmVzaG9sZCAlIHQudmFsdWUpID09IDApIHtcbiAgICAgICAgICAgIGxldCByb3dfdGhyZXNob2xkX3ZhbHVlID0gcm93LnRocmVzaG9sZCAvIHQudmFsdWU7XG4gICAgICAgICAgICBpZiAocm93X3RocmVzaG9sZF92YWx1ZSA8IDEwMDApIHtcbiAgICAgICAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3dfdGhyZXNob2xkX3ZhbHVlID09IDAgPyAxIDogcm93X3RocmVzaG9sZF92YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChyb3cubWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKSB7XG5cbiAgICAgICAgLy9wZXJjZW50YWdlIGNhc2VcbiAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93LnRocmVzaG9sZDtcbiAgICAgIH0gZWxzZSBpZiAocm93Lm1ldHJpY190eXBlID09ICd2YWx1ZScgfHwgcm93Lm1ldHJpY190eXBlID09ICdhYnNvbHV0ZV9wZXJjZW50YWdlJykge1xuICAgICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3cudGhyZXNob2xkICogKHJvdy50aHJlc2hvbGRfc2lnbik7XG4gICAgICB9XG5cbiAgICAvLyBzZXQgcnVsZV90eXBlXG4gICAgcnVsZV90eXBlLnZhbHVlID0gcm93LnJ1bGVfdHlwZTtcblxuICAgIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ2ludGVyZmFjZScpIHtcblxuICAgICAgLy8gc2V0IGlmaWRcbiAgICAgIGlmaWRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICh0LmlkID09IHJvdy50YXJnZXQpXG4gICAgICAgICAgc2VsZWN0ZWRfaWZpZC52YWx1ZSA9IHQ7XG4gICAgICB9KVxuXG4gICAgICAvLyBzZXQgbWV0cmljXG4gICAgICBpZiAocm93LmV4dHJhX21ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKHQuaWQgPT0gcm93Lm1ldHJpYyAmJiB0LmV4dHJhX21ldHJpYyA9PSByb3cuZXh0cmFfbWV0cmljKSB7XG4gICAgICAgICAgICBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKHQuaWQgPT0gcm93Lm1ldHJpYykge1xuICAgICAgICAgICAgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09ICdleHBvcnRlcicpIHtcbiAgICAgIGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09IHJvdy50YXJnZXQpXG4gICAgICAgICAgc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlID0gaXRlbVxuICAgICAgfSlcbiAgICAgIGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09IHJvdy5mbG93X2V4cF9pZmlkKVxuICAgICAgICAgIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlID0gaXRlbVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnSG9zdCcpIHtcblxuICAgICAgLy9zZXQgaG9zdFxuICAgICAgaG9zdC52YWx1ZSA9IHJvdy50YXJnZXQ7XG5cbiAgICAgIC8vc2V0IG1ldHJpY1xuICAgICAgaWYgKHJvdy5leHRyYV9tZXRyaWMgIT0gbnVsbCkge1xuXG4gICAgICAgIG1ldHJpY19saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICBpZiAocm93Lm1ldHJpYy5jb250YWlucyh0LmlkKSAmJiB0LmV4dHJhX21ldHJpYyA9PSByb3cuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gdDtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1ldHJpY19saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICBpZiAodC5pZCA9PSByb3cubWV0cmljKVxuICAgICAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gdDtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnQ0lEUicpIHtcbiAgICAgIG5ldHdvcmtfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09IHJvdy50YXJnZXQpIHtcbiAgICAgICAgICBzZWxlY3RlZF9uZXR3b3JrLnZhbHVlID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgbmV0d29ya19tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmxhYmVsID09IHJvdy5tZXRyaWNfbGFiZWwpIHtcbiAgICAgICAgICBzZWxlY3RlZF9uZXR3b3JrX21ldHJpYy52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGNoYW5nZV9tZXRyaWNfdHlwZV9ocCh0cnVlKTtcblxuICAgICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cubWV0cmljX3R5cGUpIHtcbiAgICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cblxuICAgIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09ICdob3N0X3Bvb2wnKSB7XG4gICAgICBob3N0X3Bvb2xfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmlkID09IHJvdy50YXJnZXQpIHtcbiAgICAgICAgICBzZWxlY3RlZF9ob3N0X3Bvb2wudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBob3N0X3Bvb2xfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5sYWJlbCA9PSByb3cubWV0cmljX2xhYmVsKSB7XG4gICAgICAgICAgc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKTtcblxuICAgICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cubWV0cmljX3R5cGUpIHtcbiAgICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgaWYgKHJvdyAhPSBudWxsKSB7XG4gICAgc2V0X3Jvd190b19lZGl0KHJvdyk7XG4gIH0gZWxzZSB7XG4gICAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICB9XG5cblxuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjaGFuZ2VfdGhyZXNob2xkID0gKCkgPT4ge1xuICAoc2VsZWN0ZWRfbWV0cmljLnZhbHVlLnNob3dfdm9sdW1lID09IHRydWUpID8gdmlzaWJsZS52YWx1ZSA9IHRydWUgOiB2aXNpYmxlLnZhbHVlID0gZmFsc2Vcbn1cblxuY29uc3QgY2hhbmdlX2ludGVyZmFjZV90aHJlc2hvbGQgPSAoKSA9PiB7XG4gIChzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLnNob3dfdm9sdW1lID09IHRydWUpID8gdmlzaWJsZS52YWx1ZSA9IHRydWUgOiB2aXNpYmxlLnZhbHVlID0gZmFsc2Vcbn1cblxuY29uc3QgY2hlY2tfZW1wdHlfaG9zdCA9ICgpID0+IHtcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFZhbGlkYXRpb24uZ2V0X2RhdGFfcGF0dGVybignaXAnKSk7XG4gIGRpc2FibGVfYWRkLnZhbHVlID0gIShyZWdleC50ZXN0KGhvc3QudmFsdWUpIHx8IGhvc3QudmFsdWUgPT09ICcqJyk7XG59XG5cbmNvbnN0IHNldF9hY3RpdmVfc2lnbl9yYWRpbyA9IChzZWxlY3RlZF9yYWRpbykgPT4ge1xuICBjb25zdCBpZCA9IHNlbGVjdGVkX3JhZGlvLnRhcmdldC5pZDtcbiAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gIH0pXG5cbn1cblxuLyoqXG4gKiBcbiAqIFNldCB0aGUgbWV0cmljIHR5cGVcbiAqL1xuY29uc3Qgc2V0X2FjdGl2ZV9yYWRpbyA9IChzZWxlY3RlZF9yYWRpbykgPT4ge1xuICBjb25zdCBpZCA9IHNlbGVjdGVkX3JhZGlvLnRhcmdldC5pZDtcblxuICBpZiAobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd2b2x1bWUnKSB7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gZWxzZSBpZiAobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9XG5cbn1cblxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGFkZCBydWxlIHRvIHJ1bGVzIGxpc3RcbiAqL1xuY29uc3QgYWRkXyA9IChpc19lZGl0KSA9PiB7XG4gIGxldCB0bXBfaG9zdCA9ICcnXG4gIGlmIChydWxlX3R5cGUudmFsdWUgIT0gJ2ludGVyZmFjZScpXG4gICAgdG1wX2hvc3QgPSBob3N0LnZhbHVlO1xuXG4gIGNvbnN0IHRtcF9mcmVxdWVuY3kgPSBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUuaWQ7XG4gIGxldCB0bXBfbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmlkO1xuICBsZXQgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5sYWJlbDtcblxuICBpZiAocnVsZV90eXBlLnZhbHVlID09IFwiaW50ZXJmYWNlXCIpIHtcbiAgICB0bXBfbWV0cmljID0gc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5pZFxuICAgIHRtcF9tZXRyaWNfbGFiZWwgPSBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmxhYmVsO1xuICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcImhvc3RfcG9vbFwiKSB7XG4gICAgdG1wX21ldHJpYyA9IHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMudmFsdWUuc2NoZW1hO1xuICAgIHRtcF9tZXRyaWNfbGFiZWwgPSBzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljLnZhbHVlLmxhYmVsO1xuICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcIkNJRFJcIikge1xuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9uZXR3b3JrX21ldHJpYy52YWx1ZS5zY2hlbWE7XG4gICAgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX25ldHdvcmtfbWV0cmljLnZhbHVlLmxhYmVsO1xuICB9XG4gIGNvbnN0IHRtcF9pbnRlcmZhY2VfbWV0cmljID0gc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5pZDtcbiAgY29uc3QgdG1wX3J1bGVfdHlwZSA9IHJ1bGVfdHlwZS52YWx1ZTtcbiAgY29uc3QgdG1wX2ludGVyZmFjZSA9IHNlbGVjdGVkX2lmaWQudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9pbnRlcmZhY2VfbmFtZSA9IHNlbGVjdGVkX2lmaWQudmFsdWUubGFiZWw7XG4gIGxldCB0bXBfbWV0cmljX3R5cGUgPSBtZXRyaWNfdHlwZS52YWx1ZS5pZDtcbiAgbGV0IHRtcF9leHRyYV9tZXRyaWMgPSAocnVsZV90eXBlLnZhbHVlID09ICdIb3N0JykgPyAoKHNlbGVjdGVkX21ldHJpYy52YWx1ZS5leHRyYV9tZXRyaWMpID8gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYyA6IG51bGwpIDogKChzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYykgPyBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYyA6IG51bGwpXG4gIGxldCBiYXNpY192YWx1ZTtcbiAgbGV0IGJhc2ljX3NpZ25fdmFsdWU7XG4gIGxldCB0bXBfdGhyZXNob2xkO1xuICBsZXQgdG1wX3NpZ25fdmFsdWU7XG5cbiAgbGV0IHRtcF9lZGl0X3Jvd19pZCA9IChpc19lZGl0KSA/IHJvd190b19lZGl0X2lkLnZhbHVlIDogbnVsbDtcblxuICBpZiAodmlzaWJsZS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICB0bXBfbWV0cmljX3R5cGUgPSAnJ1xuICAgIHRtcF9leHRyYV9tZXRyaWMgPSAnJ1xuICAgIHRtcF90aHJlc2hvbGQgPSB0aHJlc2hvbGQudmFsdWUudmFsdWU7XG4gIH1cblxuXG4gIGlmICh0bXBfbWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmIChtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYgKG1lYXN1cmUuYWN0aXZlKSBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3RocmVzaG9sZCA9IGJhc2ljX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgICAvKiBUaGUgdGhyb3VnaHB1dCBpcyBpbiBiaXQsIHRoZSB2b2x1bWUgaW4gQnl0ZXMhISAqL1xuICB9IGVsc2UgaWYgKHRtcF9tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykge1xuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZiAobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3NpZ25fdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF9zaWduX3ZhbHVlID0gcGFyc2VJbnQoYmFzaWNfc2lnbl92YWx1ZSk7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYgKG1lYXN1cmUuYWN0aXZlKSBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3RocmVzaG9sZCA9IGJhc2ljX3ZhbHVlICogcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfSBlbHNlIGlmICh0bXBfbWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmIChtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0bXBfdGhyZXNob2xkID0gcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfSBlbHNlIGlmICh0bXBfbWV0cmljX3R5cGUgPT0gJ3ZhbHVlJyB8fCB0bXBfbWV0cmljX3R5cGUgPT0gJ2Fic29sdXRlX3BlcmNlbnRhZ2UnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmIChtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0bXBfdGhyZXNob2xkID0gdG1wX3NpZ25fdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9XG4gIGxldCBlbWl0X25hbWUgPSAnYWRkJztcblxuICBpZiAoaXNfZWRpdCA9PSB0cnVlKVxuICAgIGVtaXRfbmFtZSA9ICdlZGl0JztcblxuXG4gIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ0hvc3QnKVxuICAgIGVtaXQoZW1pdF9uYW1lLCB7XG4gICAgICBob3N0OiB0bXBfaG9zdCxcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSxcbiAgICAgIG1ldHJpYzogdG1wX21ldHJpYyxcbiAgICAgIG1ldHJpY19sYWJlbDogdG1wX21ldHJpY19sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBleHRyYV9tZXRyaWM6IHRtcF9leHRyYV9tZXRyaWMsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICAgIHJ1bGVfaWQ6IHRtcF9lZGl0X3Jvd19pZFxuXG4gICAgfSk7XG4gIGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnaW50ZXJmYWNlJylcbiAgICBlbWl0KGVtaXRfbmFtZSwge1xuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfaW50ZXJmYWNlX21ldHJpYyxcbiAgICAgIG1ldHJpY19sYWJlbDogdG1wX21ldHJpY19sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBleHRyYV9tZXRyaWM6IHRtcF9leHRyYV9tZXRyaWMsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBpbnRlcmZhY2U6IHRtcF9pbnRlcmZhY2UsXG4gICAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICAgIHJ1bGVfaWQ6IHRtcF9lZGl0X3Jvd19pZFxuXG4gICAgfSk7XG4gIGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcImV4cG9ydGVyXCIpIHtcbiAgICBsZXQgZmxvd19kZXZpY2VfaWZpbmRleCA9IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlLmlkO1xuICAgIGNvbnN0IGZsb3dfZGV2aWNlX2lmaW5kZXhfbmFtZSA9IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlLmxhYmVsO1xuICAgIGNvbnN0IGZsb3dfZGV2aWNlX2lwID0gc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlLmlkO1xuICAgIGlmIChmbG93X2RldmljZV9pcCA9PSAnKicpIFxuICAgICAgZmxvd19kZXZpY2VfaWZpbmRleCA9ICcqJztcbiAgICBjb25zdCBpZmlkID0gc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlLmlmaWQ7XG4gICAgbGV0IG1ldHJpY19leHA7XG5cbiAgICBpZiAoIXNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYy52YWx1ZS5pZCkge1xuICAgICAgbWV0cmljX2V4cCA9IGZsb3dfZGV2aWNlX21ldHJpY19saXN0LnZhbHVlLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IG51bGwpO1xuICAgICAgLyogSW4gY2FzZSBubyBtZXRyaWMgaWQgaXMgZm91bmQsIGl0IG1lYW5zIGl0J3MgdGhlIHRyYWZmaWMgb25lICovXG4gICAgICBpZiAoZmxvd19kZXZpY2VfaWZpbmRleCAhPSBudWxsICYmIGZsb3dfZGV2aWNlX2lmaW5kZXggIT0gJyonKSB7XG4gICAgICAgIG1ldHJpY19leHAgPSBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWU7XG4gICAgICAgIG1ldHJpY19leHAuaWQgPSBcImZsb3dkZXZfcG9ydDp0cmFmZmljXCI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWV0cmljX2V4cCA9IHNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYy52YWx1ZTtcbiAgICAgICAgbWV0cmljX2V4cC5pZCA9IFwiZmxvd2Rldjp0cmFmZmljXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1ldHJpY19leHAgPSBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZS5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09IHNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYy52YWx1ZS5pZClcbiAgICB9XG5cblxuICAgIGxldCBtZXRyaWNfZXhwX2xhYmVsID0gbWV0cmljX2V4cC5sYWJlbDtcblxuICAgIGVtaXQoZW1pdF9uYW1lLCB7XG4gICAgICBob3N0OiBmbG93X2RldmljZV9pcCxcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSxcbiAgICAgIG1ldHJpYzogbWV0cmljX2V4cC5pZCxcbiAgICAgIG1ldHJpY19sYWJlbDogbWV0cmljX2V4cF9sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBpbnRlcmZhY2U6IGZsb3dfZGV2aWNlX2lmaW5kZXgsXG4gICAgICBydWxlX2lmaWQ6IGlmaWQsXG4gICAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICAgIHJ1bGVfaWQ6IHRtcF9lZGl0X3Jvd19pZFxuICAgICAgXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09IFwiQ0lEUlwiKSB7XG4gICAgdG1wX2hvc3QgPSBzZWxlY3RlZF9uZXR3b3JrLnZhbHVlLmlkO1xuICAgIGNvbnN0IG5ldHdvcmtfaWQgPSBzZWxlY3RlZF9uZXR3b3JrLnZhbHVlLm5ldHdvcmtfaWQ7XG4gICAgZW1pdChlbWl0X25hbWUsIHtcbiAgICAgIGhvc3Q6IHRtcF9ob3N0LFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkLFxuICAgICAgbmV0d29yazogbmV0d29ya19pZFxuXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09IFwiaG9zdF9wb29sXCIpIHtcbiAgICBjb25zdCB0bXBfaG9zdF9wb29sX2lkID0gc2VsZWN0ZWRfaG9zdF9wb29sLnZhbHVlLmlkO1xuICAgIGNvbnN0IHRtcF9ob3N0X3Bvb2xfbGFiZWwgPSBzZWxlY3RlZF9ob3N0X3Bvb2wudmFsdWUubGFiZWw7XG5cbiAgICBlbWl0KGVtaXRfbmFtZSwge1xuICAgICAgaG9zdF9wb29sX2lkOiB0bXBfaG9zdF9wb29sX2lkLFxuICAgICAgaG9zdF9wb29sX2xhYmVsOiB0bXBfaG9zdF9wb29sX2xhYmVsLFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkXG5cbiAgICB9KTtcblxuICB9XG5cbn07XG5cblxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gIGFkZF8odHJ1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgaW52YWxpZF9hZGQudmFsdWUgPSBmYWxzZTtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmNvbnN0IGludmFsaWRBZGQgPSAoKSA9PiB7XG4gIGludmFsaWRfYWRkLnZhbHVlID0gdHJ1ZTtcbn07XG5cbmNvbnN0IGNvbXBhcmVfbGFiZWxzID0gZnVuY3Rpb24gKGEsYikge1xuICBsZXQgeCA9IGEubGFiZWwudG9Mb3dlckNhc2UoKTtcbiAgbGV0IHkgPSBiLmxhYmVsLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKHggPCB5KSB7IHJldHVybiAtMTsgfVxuICBpZiAoeCA+IHkpIHsgcmV0dXJuIDE7IH1cbiAgcmV0dXJuIDA7XG59XG5cbi8qKlxuICogXG4gKiBGdW5jdGlvbiB0byBmb3JtYXQgaWZpZCBsaXN0XG4gKi9cbmNvbnN0IGZvcm1hdF9pZmlkX2xpc3QgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBsZXQgX2lmaWRfbGlzdCA9IFtdXG4gIGRhdGEuZm9yRWFjaCgoaWZpZCkgPT4ge1xuICAgIGxldCBpdGVtID0geyBpZDogaWZpZC5pZmlkLCBsYWJlbDogaWZpZC5uYW1lIH07XG4gICAgX2lmaWRfbGlzdC5wdXNoKGl0ZW0pO1xuICB9KVxuICBfaWZpZF9saXN0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVfbGFiZWxzKGEsYikpO1xuICByZXR1cm4gX2lmaWRfbGlzdFxufVxuXG5jb25zdCBtZXRyaWNzTG9hZGVkID0gYXN5bmMgKF9tZXRyaWNfbGlzdCwgX2lmaWRfbGlzdCwgX2ludGVyZmFjZV9tZXRyaWNfbGlzdCwgX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlcywgX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19tZXRyaWNfbGlzdCwgcGFnZV9jc3JmLCBfaW5pdF9mdW5jLCBfZGVsZXRlX3JvdywgX2hvc3RfcG9vbF9saXN0LCBfbmV0d29ya19saXN0LCBfaG9zdF9wb29sX21ldHJpY19saXN0LCBfbmV0d29ya19tZXRyaWNfbGlzdCkgPT4ge1xuICBtZXRyaWNzX3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgbWV0cmljX2xpc3QudmFsdWUgPSBfbWV0cmljX2xpc3Q7XG4gIGludGVyZmFjZV9tZXRyaWNfbGlzdC52YWx1ZSA9IF9pbnRlcmZhY2VfbWV0cmljX2xpc3Q7XG4gIGlmaWRfbGlzdC52YWx1ZSA9IGZvcm1hdF9pZmlkX2xpc3QoX2lmaWRfbGlzdCk7XG5cbiAgZnJlcXVlbmN5X2xpc3QudmFsdWUgPSBwcm9wcy5mcmVxdWVuY3lfbGlzdDtcbiAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5X2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY19saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9pZmlkLnZhbHVlID0gaWZpZF9saXN0LnZhbHVlWzBdO1xuICBwYWdlX2NzcmZfLnZhbHVlID0gcGFnZV9jc3JmO1xuICBpZiAoX2luaXRfZnVuYykge1xuICAgIGluaXRfZnVuYy52YWx1ZSA9IF9pbml0X2Z1bmM7XG4gIH1cblxuICBpZiAoX2RlbGV0ZV9yb3cpIHtcbiAgICBkZWxldGVfcm93LnZhbHVlID0gX2RlbGV0ZV9yb3c7XG4gIH1cblxuICBmbG93X2V4cG9ydGVyX2RldmljZXMudmFsdWUgPSBmb3JtYXRfZmxvd19leHBvcnRlcl9kZXZpY2VfbGlzdChfZmxvd19leHBvcnRlcl9kZXZpY2VzKTtcblxuICBpZiAoIWRhdGFVdGlscy5pc0VtcHR5QXJyYXlPck51bGwoX2hvc3RfcG9vbF9saXN0KSkge1xuICAgIGhhc19ob3N0X3Bvb2xzLnZhbHVlID0gdHJ1ZTtcbiAgfVxuICBob3N0X3Bvb2xfbGlzdC52YWx1ZSA9IF9ob3N0X3Bvb2xfbGlzdDtcbiAgaG9zdF9wb29sX21ldHJpY19saXN0LnZhbHVlID0gX2hvc3RfcG9vbF9tZXRyaWNfbGlzdDtcblxuICBpZiAoIWRhdGFVdGlscy5pc0VtcHR5QXJyYXlPck51bGwoX25ldHdvcmtfbGlzdCkpIHtcbiAgICBoYXNfY2lkci52YWx1ZSA9IHRydWU7XG4gIH1cbiAgbmV0d29ya19saXN0LnZhbHVlID0gX25ldHdvcmtfbGlzdDtcbiAgbmV0d29ya19tZXRyaWNfbGlzdC52YWx1ZSA9IF9uZXR3b3JrX21ldHJpY19saXN0O1xuICBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZSA9IF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3Q7XG5cbiAgc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlID0gZmxvd19leHBvcnRlcl9kZXZpY2VzLnZhbHVlWzFdO1xuICBpZiAoc2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlLnZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVfZXhwb3J0ZXJfaW50ZXJmYWNlcygpXG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgZXhwb3J0ZXIgaW50ZXJmYWNlcyBsaXN0LCBcbiAqIGJ5IHJlcXVlc3RpbmcgdG8gdGhlIGJhY2sgZW5kIHRoZSBsaXN0IG9mIGludGVyZmFjZXMgZm9yIHRoZSBzZWxlY3RlZCBleHBvcnRlciBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2V4cG9ydGVyX2ludGVyZmFjZXMoKSB7XG4gIGxldCBpbnRlcmZhY2VzX2xpc3QgPSBbXTtcbiAgaWYgKHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZS5pZCA9PSAnKicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzID1cbiAgICBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZS9zdGF0cy5sdWE/aXA9JHtzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUuaWR9JmlmaWQ9JHtzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUuaWZpZH1gKTtcblxuICBhd2FpdCAkLmdldCh1cmxfZGV2aWNlX2V4cG9ydGVyX2RldGFpbHMsIGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzKSB7XG4gICAgaW50ZXJmYWNlc19saXN0ID0gcmVzcG9uc2UucnNwO1xuICB9KTtcblxuICBjb25zdCBleHBvcnRlcl9pbnRlcmZhY2VzID0gW1xuICAgIHsgaWQ6IFwiKlwiLCB2YWx1ZTogXCIqXCIsIGxhYmVsOiBcIipcIiwgdGltZXNlcmllc19hdmFpbGFibGU6IGludGVyZmFjZXNfbGlzdFswXT8udGltZXNlcmllc19hdmFpbGFibGUgfVxuICBdO1xuXG4gIGludGVyZmFjZXNfbGlzdC5mb3JFYWNoKChyc3ApID0+IHtcbiAgICBleHBvcnRlcl9pbnRlcmZhY2VzLnB1c2goeyBpZDogcnNwLmlkLCBsYWJlbDogcnNwLm5hbWUsIHRpbWVzZXJpZXNfYXZhaWxhYmxlOiByc3AudGltZXNlcmllc19hdmFpbGFibGUgfSk7XG4gIH0pXG4gIGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZSA9IGV4cG9ydGVyX2ludGVyZmFjZXM7XG4gIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlID0gZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0LnZhbHVlWzFdO1xuICBmbG93X2RldmljZV90aW1lc2VyaWVzX2F2YWlsYWJsZS52YWx1ZSA9IGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZVswXT8udGltZXNlcmllc19hdmFpbGFibGU7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZm9ybWF0IGZsb3cgZXhwb3J0ZXIgZGV2aWNlIGxpc3QgXG4gKi9cbmNvbnN0IGZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgY29uc3QgX2ZfZXhwX2Rldl9saXN0ID0gW1xuICAgIHsgaWQ6IFwiKlwiLCB2YWx1ZTogXCIqXCIsIGxhYmVsOiBcIipcIiB9XG4gIF07XG5cbiAgZGF0YS5mb3JFYWNoKChkZXYpID0+IHtcbiAgICBjb25zdCBpcCA9IGRldi5wcm9iZV9pcDtcbiAgICBfZl9leHBfZGV2X2xpc3QucHVzaCh7XG4gICAgICBpZDogaXAsXG4gICAgICBsYWJlbDogaXAsXG4gICAgICB2YWx1ZTogaXAsXG4gICAgICBpZmlkOiBkZXYuaWZpZFxuICAgIH0pO1xuICB9KVxuXG4gIF9mX2V4cF9kZXZfbGlzdC5zb3J0KChhLCBiKSA9PiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKFxuICAgIGEubGFiZWwsXG4gICAgYi5sYWJlbCxcbiAgICAxIC8qIGJ5IGRlZmF1bHQgYXNjICovXG4gICkpO1xuICByZXR1cm4gX2ZfZXhwX2Rldl9saXN0O1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCB3aGVuZXZlciBhIGRpZmZlcmVudCBleHBvcnRlciBpcyBzZWxlY3RlZFxuICogaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBpbnRlcmZhY2VzIHNlbGVjdCBkcm9wZG93blxuICovXG5jb25zdCBjaGFuZ2VfZXhwb3J0ZXJfaW50ZXJmYWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdXBkYXRlX2V4cG9ydGVyX2ludGVyZmFjZXMoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICBpZiAodC5hY3RpdmUpIHtcbiAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gdDtcbiAgICB9XG5cbiAgfSlcbiAgaW52YWxpZF9hZGQudmFsdWUgPSBmYWxzZTtcbn0pXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBtZXRyaWNzTG9hZGVkLCBpbnZhbGlkQWRkIH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWItNFwiPlxuICAgICAgICAgICAgPGg0Pnt7IF9pMThuKCdpZl9zdGF0c19jb25maWcudHJhZmZpY19ydWxlcycpIH19PC9oND5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPVwiaG9zdF9ydWxlc1wiPlxuICAgICAgICAgICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgICAgPC9Nb2RhbERlbGV0ZUNvbmZpcm0+XG4gICAgICAgICAgICA8TW9kYWxBZGRIb3N0UnVsZXMgcmVmPVwibW9kYWxfYWRkX2hvc3RfcnVsZVwiIDptZXRyaWNfbGlzdD1cIm1ldHJpY19saXN0XCJcbiAgICAgICAgICAgICAgOmludGVyZmFjZV9tZXRyaWNfbGlzdD1cImludGVyZmFjZV9tZXRyaWNfbGlzdFwiIDpmcmVxdWVuY3lfbGlzdD1cImZyZXF1ZW5jeV9saXN0XCIgOmluaXRfZnVuYz1cImluaXRfZWRpdFwiXG4gICAgICAgICAgICAgIEBhZGQ9XCJhZGRfaG9zdF9ydWxlXCIgQGVkaXQ9XCJlZGl0XCI+XG4gICAgICAgICAgICA8L01vZGFsQWRkSG9zdFJ1bGVzPlxuXG4gICAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX2hvc3RfcnVsZXNcIiA6dGFibGVfYnV0dG9ucz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiIDpkYXRhX3VybD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmRhdGFfdXJsXCJcbiAgICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5lbmFibGVfc2VhcmNoXCIgOnRhYmxlX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPlxuICAgICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Vbm1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEhvc3RSdWxlcyB9IGZyb20gXCIuL21vZGFsLWFkZC1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBpZmlkOiBTdHJpbmcsXG59KVxuXG5jb25zdCB0YWJsZV9ob3N0X3J1bGVzID0gcmVmKG51bGwpXG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZihudWxsKVxuY29uc3QgbW9kYWxfYWRkX2hvc3RfcnVsZSA9IHJlZihudWxsKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pXG5jb25zdCByb3dfdG9fZWRpdCA9IHJlZih7fSlcbmNvbnN0IGludmFsaWRfYWRkID0gcmVmKGZhbHNlKTtcblxuXG5jb25zdCBtZXRyaWNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19tZXRyaWMubHVhP3J1bGVfdHlwZT1ob3N0YFxuY29uc3QgbWV0cmljX2lmbmFtZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPWludGVyZmFjZWBcblxuY29uc3QgbWV0cmljX2hvc3RfcG9vbF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPWhvc3RfcG9vbGBcbmNvbnN0IG1ldHJpY19uZXR3b3JrX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YT9ydWxlX3R5cGU9Q0lEUmBcblxuXG5jb25zdCBtZXRyaWNfZmxvd19leHBfZGV2aWNlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YT9ydWxlX3R5cGU9ZXhwb3J0ZXJgXG5jb25zdCBmbG93X2RldmljZXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZXMvc3RhdHMubHVhYFxuY29uc3QgZmxvd19kZXZpY2VzX2RldGFpbHNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9mbG93ZGV2aWNlX2RldGFpbHMubHVhYFxuY29uc3QgaG9zdF9wb29sX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb29sL3Bvb2xzLmx1YWBcbmNvbnN0IG5ldHdvcmtfbGlzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L25ldHdvcmsvbmV0d29ya3MubHVhYFxuY29uc3QgaWZpZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YWBcbmNvbnN0IGRhdGFfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19kYXRhLmx1YWBcbmNvbnN0IGFkZF9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2ludGVyZmFjZS9ob3N0X3J1bGVzL2FkZF9ob3N0X3J1bGUubHVhYFxuY29uc3QgcmVtb3ZlX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvaW50ZXJmYWNlL2hvc3RfcnVsZXMvZGVsZXRlX2hvc3RfcnVsZS5sdWFgXG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzEnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzInKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzMnKSxcbl1cblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGlmaWQ6IHByb3BzLmlmaWQsXG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZixcbiAgZ3VpOiB0cnVlIC8vIFNvbWUgQVBJIHJlcXVpcmVzIHRoaXMgdG8gcmV0dXJuIGh0bWwgY29udGVudCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxufVxuXG5sZXQgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSB7fVxubGV0IHRpdGxlX2RlbGV0ZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZGVsZXRlX2hvc3RfcnVsZXNfdGl0bGUnKVxubGV0IHRpdGxlX2VkaXQgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmVkaXRfbG9jYWxfbmV0d29ya19ydWxlcycpXG5sZXQgYm9keV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX2Rlc2NyaXB0aW9uJylcbmxldCBtZXRyaWNfbGlzdCA9IFtdXG5sZXQgaW50ZXJmYWNlX21ldHJpY19saXN0ID0gW11cbmxldCBob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBbXVxubGV0IGlmaWRfbGlzdCA9IFtdXG5sZXQgZmxvd19leHBvcnRlcl9saXN0ID0gW11cbmxldCBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0ID0gW11cbmxldCBob3N0X3Bvb2xfbGlzdCA9IFtdXG5sZXQgbmV0d29ya19saXN0ID0gW11cbmxldCBuZXR3b3JrX21ldHJpY19saXN0ID0gW11cblxuXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IFtcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLjVfbWluJyksIGlkOiAnNW1pbicsIHZhbHVlOiAnNW1pbicgfSxcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuaG91cmx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgaWQ6ICdob3VyJywgdmFsdWU6ICdob3VyJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuZGFpbHknKSwgaWQ6ICdkYXknLCB2YWx1ZTogJ2RheScgfVxuXVxuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbiAocm93KSB7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSByb3c7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coKTtcbn1cblxuY29uc3QgbG9hZF9zZWxlY3RlZF9maWVsZCA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgcm93X3RvX2VkaXQudmFsdWUgPSByb3c7XG5cbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcblxuICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLnNob3cocm93KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBlZGl0KHBhcmFtcykge1xuICAvL2F3YWl0IGRlbGV0ZV9yb3coKTtcblxuICBhd2FpdCBhZGRfaG9zdF9ydWxlKHBhcmFtcyk7XG59XG5cbmNvbnN0IGluaXRfZWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2VkaXQudmFsdWU7XG4gIHJvd190b19lZGl0LnZhbHVlID0gbnVsbDtcbiAgcmV0dXJuIHJvdztcbn1cblxuY29uc3QgZGVzdHJveV90YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbn1cblxuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHJ1bGVfaWQ6IHJvdy5pZCxcbiAgICAgIHJ1bGVfdHlwZTogcm93LnJ1bGVfdHlwZVxuICAgIH1cbiAgfSlcblxuICBhd2FpdCAkLnBvc3QodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59XG5cbmNvbnN0IGFkZF9ob3N0X3J1bGUgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zKSB7XG5cbiAgcGFyYW1zLmNzcmYgPSBwcm9wcy5wYWdlX2NzcmY7XG4gIHBhcmFtcy5pZmlkID0gcHJvcHMuaWZpZDtcbiAgY29uc3QgcnNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QoYWRkX3J1bGVfdXJsLCBwYXJhbXMpO1xuXG4gIGludmFsaWRfYWRkLnZhbHVlID0gcnNwLnJzcDtcblxuICBpZiAoaW52YWxpZF9hZGQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLmNsb3NlKCk7XG4gICAgcmVsb2FkX3RhYmxlKCk7XG4gIH0gZWxzZSB7XG4gICAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5pbnZhbGlkQWRkKCk7XG4gIH1cblxufVxuXG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcbiAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuICAgIGhhbmRsZXJJZDogXCJkZWxldGVfaG9zdFwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNob3dfZGVsZXRlX2RpYWxvZyhyb3dEYXRhKTtcbiAgICB9LFxuICB9O1xuXG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIGxvYWRfc2VsZWN0ZWRfZmllbGQocm93RGF0YSk7XG4gICAgfSxcbiAgfVxuXG4gIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGVkaXRfaGFuZGxlciwgaWNvbjogJ2ZhLWVkaXQnLCB0aXRsZTogaTE4bignZWRpdCcpIH0sXG4gICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpIH0sXG4gIF0pO1xufVxuXG5jb25zdCBmb3JtYXRfbWV0cmljID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IG1ldHJpY19sYWJlbCA9IGRhdGFcblxuICBpZiAocm93RGF0YS5tZXRyaWNfbGFiZWwpIHtcbiAgICBtZXRyaWNfbGFiZWwgPSByb3dEYXRhLm1ldHJpY19sYWJlbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAocm93RGF0YS5ydWxlX3R5cGUgIT0gJ2ludGVyZmFjZScpIHtcbiAgICAgIG1ldHJpY19saXN0LmZvckVhY2goKG1ldHJpYykgPT4ge1xuICAgICAgICBpZiAobWV0cmljLmlkID09IGRhdGEpIHtcbiAgICAgICAgICBpZiAocm93RGF0YS5leHRyYV9tZXRyaWMpIHtcbiAgICAgICAgICAgIGlmIChyb3dEYXRhLmV4dHJhX21ldHJpYyA9PSBtZXRyaWMuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgICBtZXRyaWNfbGFiZWwgPSBtZXRyaWMubGFiZWxcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcmZhY2VfbWV0cmljX2xpc3QuZm9yRWFjaCgobWV0cmljKSA9PiB7XG4gICAgICAgIGlmIChtZXRyaWMuaWQgPT0gZGF0YSkge1xuICAgICAgICAgIGlmIChyb3dEYXRhLmV4dHJhX21ldHJpYykge1xuICAgICAgICAgICAgaWYgKHJvd0RhdGEuZXh0cmFfbWV0cmljID09IG1ldHJpYy5leHRyYV9tZXRyaWMpXG4gICAgICAgICAgICAgIG1ldHJpY19sYWJlbCA9IG1ldHJpYy5sYWJlbFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXRyaWNfbGFiZWwgPSBtZXRyaWMubGFiZWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICByZXR1cm4gbWV0cmljX2xhYmVsXG59XG5cbmNvbnN0IGZvcm1hdF9mcmVxdWVuY3kgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBsZXQgZnJlcXVlbmN5X3RpdGxlID0gJydcbiAgZnJlcXVlbmN5X2xpc3QuZm9yRWFjaCgoZnJlcXVlbmN5KSA9PiB7XG4gICAgaWYgKGRhdGEgPT0gZnJlcXVlbmN5LmlkKVxuICAgICAgZnJlcXVlbmN5X3RpdGxlID0gZnJlcXVlbmN5LnRpdGxlO1xuICB9KVxuXG4gIHJldHVybiBmcmVxdWVuY3lfdGl0bGVcbn1cblxuY29uc3QgZm9ybWF0X3RocmVzaG9sZCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9IHBhcnNlSW50KGRhdGEpO1xuICBsZXQgdGhyZXNob2xkX3NpZ24gPSBcIj4gXCI7XG5cbiAgaWYgKChyb3dEYXRhLnRocmVzaG9sZF9zaWduKSAmJiAocm93RGF0YS50aHJlc2hvbGRfc2lnbiA9PSAnLTEnKSlcbiAgICB0aHJlc2hvbGRfc2lnbiA9IFwiPCBcIlxuXG4gIGlmICgocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuYml0c1RvU2l6ZShkYXRhKVxuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZS5jb250YWlucygncGVyY2VudGFnZScpKSkge1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEpO1xuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndmFsdWUnKSkge1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgZGF0YTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YVxufVxuXG5jb25zdCBmb3JtYXRfbGFzdF9tZWFzdXJlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9IHBhcnNlSW50KGRhdGEpO1xuICBpZiAocm93RGF0YS50YXJnZXQgPT0gXCIqXCIpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBpZiAoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICd0aHJvdWdocHV0JykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IE50b3BVdGlscy5iaXRzVG9TaXplKGRhdGEpXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICd2b2x1bWUnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZS5pbmNsdWRlcygncGVyY2VudGFnZScpKSkge1xuICAgIGNvbnN0IHNpZ25fZGF0YSA9IGRhdGEgPCAwID8gLTEgOiAxO1xuICAgIGNvbnN0IGFic29sdXRlX3ZhbHVlID0gTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEgKiBzaWduX2RhdGEpO1xuICAgIGZvcm1hdHRlZF9kYXRhID0gc2lnbl9kYXRhID09IC0xID8gYDxsYWJlbCB0aXRsZT0nJHtpMThuKFwicGVyY2VudGFnZV9kZWNyZWFzZVwiKX0nPiAoLSkgJHthYnNvbHV0ZV92YWx1ZX0gPC9sYWJlbD5gIDogYDxsYWJlbCB0aXRsZT0nJHtpMThuKFwicGVyY2VudGFnZV9pbmNyZWFzZVwiKX0nPiR7YWJzb2x1dGVfdmFsdWV9PC9sYWJlbD5gO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5jb25zdCBmb3JtYXRfcnVsZV90eXBlID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gJyc7XG4gIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnaW50ZXJmYWNlJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIgKyBfaTE4bihcImludGVyZmFjZVwiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtZXRoZXJuZXQnPjwvaT48L3NwYW4+XCJcbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnSG9zdCcpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBcIjxzcGFuIGNsYXNzPSdiYWRnZSBiZy1zZWNvbmRhcnknPlwiICsgX2kxOG4oXCJhYm91dC5ob3N0X2NoZWNrc19kaXJlY3RvcnlcIikgKyBcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuICB9IGVsc2UgaWYgKChyb3dEYXRhLnJ1bGVfdHlwZSkgJiYgcm93RGF0YS5ydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCcpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIgKyBfaTE4bihcImFsZXJ0X2VudGl0aWVzLmhvc3RfcG9vbFwiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9zcGFuPlwiXG5cbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIHJvd0RhdGEucnVsZV90eXBlID09ICdDSURSJykge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIiArIF9pMThuKFwibmV0d29ya1wiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9zcGFuPlwiXG5cbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnZXhwb3J0ZXInKSAmJiByb3dEYXRhLm1ldHJpYyA9PSBcImZsb3dkZXY6dHJhZmZpY1wiKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBcIjxzcGFuIGNsYXNzPSdiYWRnZSBiZy1zZWNvbmRhcnknPlwiICsgX2kxOG4oXCJmbG93X2V4cG9ydGVyX2RldmljZVwiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9zcGFuPlwiXG5cbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnZXhwb3J0ZXInKSAmJiByb3dEYXRhLm1ldHJpYy5pbmNsdWRlcyhcImZsb3dkZXZfcG9ydFwiKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIiArIF9pMThuKFwiaW50ZXJmYWNlX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlXCIpICsgXCIgPGkgY2xhc3M9J2ZhcyBmYS1ldGhlcm5ldCc+PC9pPjwvc3Bhbj5cIlxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhO1xufVxuXG5jb25zdCBmb3JtYXRfdGFyZ2V0ID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gJyc7XG4gIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnaW50ZXJmYWNlJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHJvd0RhdGEuc2VsZWN0ZWRfaWZhY2U7XG4gIH0gZWxzZSBpZiAocm93RGF0YS5ydWxlX3R5cGUgJiYgKHJvd0RhdGEucnVsZV90eXBlID09ICdIb3N0JyB8fCByb3dEYXRhLnJ1bGVfdHlwZSA9PSAnQ0lEUicpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnRhcmdldDtcbiAgfSBlbHNlIGlmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnaG9zdF9wb29sJykge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS5ob3N0X3Bvb2xfbGFiZWw7XG4gIH0gZWxzZSBpZiAocm93RGF0YS5ydWxlX3R5cGUgJiYgcm93RGF0YS5ydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJyAmJiByb3dEYXRhLm1ldHJpYyA9PSBcImZsb3dkZXY6dHJhZmZpY1wiKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICBsZXQgaW50ZXJmYWNlX2xhYmVsID0gcm93RGF0YS5mbG93X2V4cF9pZmlkX25hbWUgIT0gXCJcIiAmJiByb3dEYXRhLmZsb3dfZXhwX2lmaWRfbmFtZSAhPSBudWxsICA/IHJvd0RhdGEuZmxvd19leHBfaWZpZF9uYW1lIDogcm93RGF0YS5mbG93X2V4cF9pZmlkO1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS50YXJnZXQgKyBcIiBcIiArIF9pMThuKFwib25faW50ZXJmYWNlXCIpICsgXCI6IFwiICsgaW50ZXJmYWNlX2xhYmVsO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YTtcbn1cblxuY29uc3QgZ2V0X21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICBtZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xufVxuXG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGhvc3RfcG9vbF91cmwsIHJlc3RfcGFyYW1zKVxuICBsZXQgdG1wX2hvc3RfcG9vbF9saXN0O1xuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uIChyc3AsIHN0YXR1cykge1xuICAgIHRtcF9ob3N0X3Bvb2xfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9ob3N0X3Bvb2xfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIGhvc3RfcG9vbF9saXN0ID0gdG1wX2hvc3RfcG9vbF9saXN0O1xufVxuXG5jb25zdCBnZXRfbmV0d29ya19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobmV0d29ya19saXN0X3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgbGV0IHRtcF9uZXR3b3JrX2xpc3RcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICB0bXBfbmV0d29ya19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbiAgdG1wX25ldHdvcmtfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIG5ldHdvcmtfbGlzdCA9IHRtcF9uZXR3b3JrX2xpc3Q7XG5cbn1cblxuY29uc3QgZ2V0X2ludGVyZmFjZV9tZXRyaWNfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG1ldHJpY19pZm5hbWVfdXJsLCByZXN0X3BhcmFtcylcblxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uIChyc3AsIHN0YXR1cykge1xuICAgIGludGVyZmFjZV9tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG59XG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfaG9zdF9wb29sX3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgbGV0IHRtcF9ob3N0X3Bvb2xfbWV0cmljX2xpc3RcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICB0bXBfaG9zdF9wb29sX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbiAgdG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIGhvc3RfcG9vbF9tZXRyaWNfbGlzdCA9IHRtcF9ob3N0X3Bvb2xfbWV0cmljX2xpc3Q7XG59XG5cblxuY29uc3QgZ2V0X25ldHdvcmtfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfbmV0d29ya191cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGxldCB0bXBfbmV0d29ya19tZXRyaWNfbGlzdDtcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICB0bXBfbmV0d29ya19tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9uZXR3b3JrX21ldHJpY19saXN0LnNvcnQoKGEsIGIpID0+IChhLmxhYmVsID4gYi5sYWJlbCkgPyAxIDogKChiLmxhYmVsID4gYS5sYWJlbCkgPyAtMSA6IDApKTtcbiAgbmV0d29ya19tZXRyaWNfbGlzdCA9IHRtcF9uZXR3b3JrX21ldHJpY19saXN0O1xuXG59XG5cbmNvbnN0IGdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfZmxvd19leHBfZGV2aWNlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbn1cblxuY29uc3QgZ2V0X2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZmxvd19kZXZpY2VzX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICBmbG93X2V4cG9ydGVyX2xpc3QgPSByc3AucnNwO1xuICB9KTtcblxufVxuXG5jb25zdCBnZXRfaWZpZF9saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoaWZpZF91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgaWZpZF9saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59XG5cbmNvbnN0IHN0YXJ0X2RhdGF0YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5zaG93KCk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgdGFyZ2V0czowICwgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gYWRkX2FjdGlvbl9jb2x1bW4ocm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZFwiKSwgdmlzaWJsZTogZmFsc2UsIHRhcmdldHM6IDEsIG5hbWU6ICdpZCcsIGRhdGE6ICdpZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMjAnLCBuYW1lOiAndGFyZ2V0JywgZGF0YTogJ3RhcmdldCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfdGFyZ2V0KGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnJ1bGVfdHlwZVwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcyMCcsIG5hbWU6ICdydWxlX3R5cGUnLCBkYXRhOiAncnVsZV90eXBlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF9ydWxlX3R5cGUoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpLCB0YXJnZXRzOiA0LCB3aWR0aDogJzEwJywgbmFtZTogJ21ldHJpYycsIGRhdGE6ICdtZXRyaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X21ldHJpYyhkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMTAnLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBmb3JtYXRfZnJlcXVlbmN5KGRhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmxhc3RfbWVhc3VyZW1lbnRcIiksIHRhcmdldHM6NiAsIHdpZHRoOiAnMTAnLCBuYW1lOiAnbGFzdF9tZWFzdXJlbWVudCcsIGRhdGE6ICdsYXN0X21lYXN1cmVtZW50JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF9sYXN0X21lYXN1cmVtZW50KGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRocmVzaG9sZFwiKSwgdGFyZ2V0czogNywgd2lkdGg6ICcxMCcsIG5hbWU6ICd0aHJlc2hvbGQnLCBkYXRhOiAndGhyZXNob2xkJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF90aHJlc2hvbGQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJtZXRyaWNfdHlwZVwiKSwgdmlzaWJsZTogZmFsc2UsIHRhcmdldHM6IDgsIG5hbWU6ICdtZXRyaWNfdHlwZScsIGRhdGE6ICdtZXRyaWNfdHlwZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gIF07XG5cbiAgY29uc3QgaG9zdFJ1bGVzVGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoZGF0YV91cmwsIHJlc3RfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIGNvbHVtbnNfY29uZmlnOiBjb2x1bW5zLFxuICAgIHRhYmxlX2NvbmZpZzoge1xuICAgICAgc2Nyb2xsWDogZmFsc2UsXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICAgIG9yZGVyOiBbWzEgLyogdGFyZ2V0ICovLCAnZGVzYyddXSxcbiAgICAgIGNvbHVtbkRlZnM6IGNvbHVtbnNcbiAgICB9XG4gIH07XG5cbiAgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSBob3N0UnVsZXNUYWJsZUNvbmZpZztcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xuICBhd2FpdCBnZXRfbWV0cmljX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2lmaWRfbGlzdCgpO1xuICBhd2FpdCBnZXRfaW50ZXJmYWNlX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19saXN0KCk7XG4gIGF3YWl0IGdldF9ob3N0X3Bvb2xfbGlzdCgpO1xuICBhd2FpdCBnZXRfaG9zdF9wb29sX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9uZXR3b3JrX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X25ldHdvcmtfbWV0cmljX2xpc3QoKTtcbiAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5tZXRyaWNzTG9hZGVkKG1ldHJpY19saXN0LCBpZmlkX2xpc3QsIGludGVyZmFjZV9tZXRyaWNfbGlzdCwgZmxvd19leHBvcnRlcl9saXN0LCBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0LCBwcm9wcy5wYWdlX2NzcmYsIG51bGwsIG51bGwsIGhvc3RfcG9vbF9saXN0LCBuZXR3b3JrX2xpc3QsIGhvc3RfcG9vbF9tZXRyaWNfbGlzdCwgbmV0d29ya19tZXRyaWNfbGlzdCk7XG59KVxuXG5vblVubW91bnRlZCgoKSA9PiB7XG4gIGRlc3Ryb3lfdGFibGUoKTtcbn0pXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cImhvc3RfZGV0YWlsc19wb3J0c1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19wb3J0c1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJ0YWJsZV9vcHRpb24gaW4gdGFibGVfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgICAgPEJvb3RzdHJhcFRhYmxlXG4gICAgICAgICAgICAgICAgICAgIDppZD1cInRhYmxlX29wdGlvbi5pZFwiXG4gICAgICAgICAgICAgICAgICAgIDpjb2x1bW5zPVwidGFibGVfb3B0aW9uLmNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICA6cm93cz1cInRhYmxlX29wdGlvbi5zdGF0c19yb3dzXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfY29sdW1uPVwiKGNvbCkgPT4gcHJpbnRfc3RhdHNfY29sdW1uKGNvbClcIlxuICAgICAgICAgICAgICAgICAgICA6cHJpbnRfaHRtbF9yb3c9XCIoY29sLCByb3cpID0+IHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdylcIj5cbiAgICAgICAgICAgICAgICAgIDwvQm9vdHN0cmFwVGFibGU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uVW5tb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2gsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHkgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHBvcnRzX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbmZpZ190cmFmZmljX3RhYmxlID0gcmVmKHt9KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbn0pXG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX2NvbHVtbihjb2wpIHtcbiAgcmV0dXJuIGNvbC5sYWJlbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRfc3RhdHNfcm93KGNvbCwgcm93KSB7XG4gIC8vIGRlYnVnZ2VyO1xuICBsZXQgbGFiZWwgPSByb3cubGFiZWw7XG4gIHJldHVybiBsYWJlbDtcbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgdHJhZmZpY190YWJsZS52YWx1ZS5yZWxvYWQoKTtcbn1cbiAgICBcbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzdGFydF9kYXRhdGFibGUoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG59KVxuXG5vblVubW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGRlc3Ryb3koKVxufSk7XG5cbmNvbnN0IGNoYXJ0X29wdGlvbnMgPSBbXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLmNsaV9wb3J0cycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvY2xpX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5zcnZfcG9ydHMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3Nydl9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYHNydl9wb3J0X2Zsb3dzYCxcbiAgfSxcbl1cblxuY29uc3QgdGFibGVfb3B0aW9ucyA9IFtcbiAge1xuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvdGFibGVfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBjbGlfcG9ydF9mbG93c2AsXG4gICAgZXh0cmFfcGFyYW1zOiB7XG4gICAgICBtb2RlOiAnbG9jYWwnLFxuICAgICAgcHJvdG9jb2w6ICd0Y3AnXG4gICAgfSxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7IGlkOiBcImFjdGl2ZV9zZXJ2ZXJfdGNwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuYWN0aXZlX3NlcnZlcl90Y3BfcG9ydHNcIikgfSxcbiAgICAgIHsgaWQ6IFwicG9ydF9hcHBsaWNhdGlvblwiLCBsYWJlbDogX2kxOG4oXCJwb3J0XCIpIH0sXG4gICAgXSxcbiAgICBzdGF0c19yb3dzOiBbXSxcbiAgfSxcbiAge1xuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvdGFibGVfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBjbGlfcG9ydF9mbG93c2AsXG4gICAgZXh0cmFfcGFyYW1zOiB7XG4gICAgICBtb2RlOiAnbG9jYWwnLFxuICAgICAgcHJvdG9jb2w6ICd1ZHAnXG4gICAgfSxcbiAgICBjb2x1bW5zOiBbXG4gICAgICB7IGlkOiBcImFjdGl2ZV9zZXJ2ZXJfdWRwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuYWN0aXZlX3NlcnZlcl91ZHBfcG9ydHNcIikgfSxcbiAgICAgIHsgaWQ6IFwicG9ydF9hcHBsaWNhdGlvblwiLCBsYWJlbDogX2kxOG4oXCJwb3J0XCIpIH0sXG4gICAgXSxcbiAgICBzdGF0c19yb3dzOiBbXSxcbiAgfSxcbiAge1xuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvdGFibGVfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBzcnZfcG9ydF9mbG93c2AsXG4gICAgZXh0cmFfcGFyYW1zOiB7XG4gICAgICBtb2RlOiAncmVtb3RlJyxcbiAgICAgIHByb3RvY29sOiAndGNwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJjbGllbnRfY29udGFjdGVkX3NlcnZlcl90Y3BfcG9ydHNcIiwgbGFiZWw6IF9pMThuKFwicG9ydHNfcGFnZS5jbGllbnRfY29udGFjdGVkX3NlcnZlcl90Y3BfcG9ydHNcIikgfSxcbiAgICAgIHsgaWQ6IFwicG9ydF9hcHBsaWNhdGlvblwiLCBsYWJlbDogX2kxOG4oXCJwb3J0XCIpIH0sXG4gICAgXSxcbiAgICBzdGF0c19yb3dzOiBbXSxcbiAgfSxcbiAge1xuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BvcnQvdGFibGVfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBzcnZfcG9ydF9mbG93c2AsXG4gICAgZXh0cmFfcGFyYW1zOiB7XG4gICAgICBtb2RlOiAncmVtb3RlJyxcbiAgICAgIHByb3RvY29sOiAndWRwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJjbGllbnRfY29udGFjdGVkX3NlcnZlcl91ZHBfcG9ydHNcIiwgbGFiZWw6IF9pMThuKFwicG9ydHNfcGFnZS5jbGllbnRfY29udGFjdGVkX3NlcnZlcl91ZHBfcG9ydHNcIikgfSxcbiAgICAgIHsgaWQ6IFwicG9ydF9hcHBsaWNhdGlvblwiLCBsYWJlbDogX2kxOG4oXCJwb3J0XCIpIH0sXG4gICAgXSxcbiAgICBzdGF0c19yb3dzOiBbXSxcbiAgfSxcbl1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKCkge1xuICBsZXQgdXJsX3BhcmFtcyA9IHt9XG4gIFxuICB1cmxfcGFyYW1zW1wiaG9zdFwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKVxuICB1cmxfcGFyYW1zW1widmxhblwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKVxuICB1cmxfcGFyYW1zW1wiaWZpZFwiXSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKVxuICAgIFxuICB0YWJsZV9vcHRpb25zLmZvckVhY2goKHRhYmxlKSA9PiB7XG4gICAgbGV0IHRtcF9wYXJhbXMgPSB7XG4gICAgICAuLi50YWJsZS5leHRyYV9wYXJhbXMsXG4gICAgICAuLi51cmxfcGFyYW1zLFxuICAgIH1cblxuICAgICQuZ2V0KE50b3BVdGlscy5idWlsZFVSTCh0YWJsZS51cmwsIHRtcF9wYXJhbXMpLCBhc3luYyBmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xuICAgICAgLy8gZGVidWdnZXI7XG4gICAgICBsZXQgcm93cyA9IFtdXG4gICAgICBkYXRhLnJzcC5mb3JFYWNoKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBvcnQgPSBkYXRhLnBvcnRfaW5mby5wb3J0XG4gICAgICAgIGNvbnN0IHByb3RvID0gZGF0YS5wb3J0X2luZm8ubDdfcHJvdG9cbiAgICAgICAgcm93cy5wdXNoKHsgbGFiZWw6IGAke3BvcnR9ICgke3Byb3RvfSlgIH0pXG4gICAgICB9KVxuICAgICAgdGFibGUuc3RhdHNfcm93cyA9IHJvd3M7XG4gICAgfSk7XG4gIH0pXG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9J2FsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTMnIHN0eWxlPSdoZWlnaHQ6IDcwdmg7Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG8gZmxleC1yb3ctcmV2ZXJzZVwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWxvYWRcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXksIGluZGV4KSBpbiBhdmFpbGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1pZj1cInZhbHVlLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdidWJibGVfbWFwLicgKyBrZXkpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtrZXldXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgICA8ZGl2IDppZD1cIndpZGdldF9uYW1lXCIgc3R5bGU9XCJoZWlnaHQ6IDkwJTtcIiA6Y2xhc3M9XCJbIGxvYWRpbmcgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnIF1cIj5cbiAgICAgICAgICAgIDxDaGFydFxuICAgICAgICAgICAgICByZWY9XCJidWJibGVfY2hhcnRcIlxuICAgICAgICAgICAgICA6aWQ9XCJ3aWRnZXRfbmFtZVwiXG4gICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiXG4gICAgICAgICAgICAgIDpiYXNlX3VybF9yZXF1ZXN0PVwicmVzdF91cmxcIlxuICAgICAgICAgICAgICA6Z2V0X3BhcmFtc191cmxfcmVxdWVzdD1cImZvcm1hdF9yZXF1ZXN0XCJcbiAgICAgICAgICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpXCJcbiAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IFN0cmluZyxcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGNoYXJ0c19vcHRpb25zOiBBcnJheSxcbiAgYXZhaWxhYmxlX2ZpbHRlcnM6IE9iamVjdCxcbn0pXG5cbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuY29uc3QgY2hhcnRfdHlwZSA9IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkJVQkJMRVxuY29uc3QgcmVzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2NoYXJ0cy9hbGVydC9hbmFseXNpcy5sdWFgXG5jb25zdCB3aWRnZXRfbmFtZSA9ICdhbGVydHMtbWFwJztcbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBidWJibGVfY2hhcnQgPSByZWYobnVsbClcblxuY29uc3QgZm9ybWF0X3JlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHBhcmFtc19zdHJpbmcgPSAnJ1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgYnViYmxlX21vZGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpLFxuICAgIHRpbWVmcmFtZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3RpbWVmcmFtZScpLFxuICAgIHZsYW46IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyksXG4gICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKSxcbiAgfVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpIHtcbiAgICBwYXJhbXNfc3RyaW5nID0gYCR7cGFyYW1zX3N0cmluZ30mJHtrZXl9PSR7dmFsdWV9YFxuICB9XG5cbiAgLyogUmV0dXJuIGEgY3VzdG9tIHN0cmluZywgY29udGFpbmluZyBjdXN0b20gb3B0aW9ucyAqL1xuICByZXR1cm4gcGFyYW1zX3N0cmluZ1xufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgbG9hZGluZy52YWx1ZSA9IHRydWU7XG4gIGJ1YmJsZV9jaGFydC52YWx1ZS51cGRhdGVfY2hhcnQoYCR7cmVzdF91cmx9PyR7Zm9ybWF0X3JlcXVlc3QoKX1gKVxuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbmNvbnN0IGZvcm1hdF9vcHRpb25zID0gZnVuY3Rpb24obW9kZV9pZCkge1xuICBsZXQgb3B0aW9ucyA9IHt9XG5cbiAgcHJvcHMuY2hhcnRzX29wdGlvbnMuZm9yRWFjaCgob3B0aW9uX2xpc3QpID0+IHtcbiAgICBpZihvcHRpb25fbGlzdC5tb2RlX2lkID09IG1vZGVfaWQpXG4gICAgICBvcHRpb25zID0gb3B0aW9uX2xpc3Q7XG4gIH0pXG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGV2ZW50IGZ1bmN0aW9ucyAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMuY2hhcnQgJiYgb3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykge1xuICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzID0gb3B0aW9ucy5jaGFydC5ldmVudHMgfHwge31cbiAgICBmb3IoY29uc3QgW2V2ZW50LCBmdW5dIG9mIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpKSB7XG4gICAgICBpZihmdW4gPT0gdW5kZWZpbmVkKSBcbiAgICAgICAgY29udGludWVcblxuICAgICAgb3B0aW9ucy5jaGFydC5ldmVudHNbZXZlbnRdID0gTnRvcFV0aWxzW2Z1bl0gfHwgTnRvcFV0aWxzLmZub25lXG4gICAgfVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnhheGlzICYmIG9wdGlvbnMueGF4aXMubGFiZWxzICYmIG9wdGlvbnMueGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy54YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy55YXhpcyAmJiBvcHRpb25zLnlheGlzLmxhYmVscyAmJiBvcHRpb25zLnlheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnlheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMudG9vbHRpcCAmJiBvcHRpb25zLnRvb2x0aXAubnRvcF91dGlsc19mb3JtYXR0ZXIpXG4gICAgb3B0aW9ucy50b29sdGlwLmN1c3RvbSA9IE50b3BVdGlsc1tvcHRpb25zLnRvb2x0aXAubnRvcF91dGlsc19mb3JtYXR0ZXJdXG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuY29uc3QgZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gIFxuICAvKiBSZXR1cm4gdGhlIGxpc3Qgb2YgZm9ybWF0dGVkIG9wdGlvbnMgb2YgdGhlIGNoYXJ0ICovXG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgbGV0IG9wdGlvbnMgPSBmb3JtYXRfb3B0aW9ucyhOdW1iZXIoYWN0aXZlX2ZpbHRlcl9saXN0WydidWJibGVfbW9kZSddLmlkKSlcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgb3B0aW9ucy5zZXJpZXMgPSBkYXRhLnNlcmllcyB8fCB7fVxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cbn1cblxuY29uc3QgY2xpY2tfaXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgbG9hZGluZy52YWx1ZSA9IHRydWU7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgLyogQmVmb3JlIG1vdW50aW5nIHRoZSB2YXJpb3VzIHdpZGdldHMsIHVwZGF0ZSB0aGUgdXJsIHRvIHRoZSBjb3JyZWN0IG9uZSwgYnkgYWRkaW5nIGlmaWQsIGVjYy4gKi9cbiAgY29uc3QgdGltZWZyYW1lID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3RpbWVmcmFtZScpO1xuICBjb25zdCB2bGFuID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZsYW4nKTtcbiAgY29uc3QgYnViYmxlX21vZGUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKTtcbiAgXG4gIGlmKCFidWJibGVfbW9kZSkgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdidWJibGVfbW9kZScsIDApIC8qIEZpcnN0IEVudHJ5ICovXG4gIGlmKCF0aW1lZnJhbWUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndGltZWZyYW1lJywgMzAwKSAvKiBEZWZhdWx0IDUgbWluICovXG4gIGlmKCF2bGFuKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZsYW4nLCAnJykgLyogRGVmYXVsdCBubyB2bGFuICovXG4gIFxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2lmaWQnLCBwcm9wcy5pZmlkKSAvKiBDdXJyZW50IGludGVyZmFjZSAqL1xuXG4gIGZvcihjb25zdCBbbmFtZSwgZmlsdGVyc10gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMuYXZhaWxhYmxlX2ZpbHRlcnMpKSB7XG4gICAgZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGZpbHRlci5maWx0ZXJfbmFtZSA9IG5hbWVcbiAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlKVxuICAgICAgICBhY3RpdmVfZmlsdGVyX2xpc3RbbmFtZV0gPSBmaWx0ZXI7XG4gICAgfSlcbiAgfVxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn0pXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9J2FsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTMnIHN0eWxlPSdoZWlnaHQ6IDcwdmg7Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG8gZmxleC1yb3ctcmV2ZXJzZVwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIih2YWx1ZSwga2V5LCBpbmRleCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ2YWx1ZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMThyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignYnViYmxlX21hcC4nICsga2V5KSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3Rba2V5XVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiA6aWQ9XCJ3aWRnZXRfbmFtZVwiIHN0eWxlPVwiaGVpZ2h0OiA5MCU7XCI+XG4gICAgICAgICAgICA8Q2hhcnRcbiAgICAgICAgICAgICAgcmVmPVwiYnViYmxlX2NoYXJ0XCJcbiAgICAgICAgICAgICAgOmlkPVwid2lkZ2V0X25hbWVcIlxuICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIlxuICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cInJlc3RfdXJsXCJcbiAgICAgICAgICAgICAgOmdldF9wYXJhbXNfdXJsX3JlcXVlc3Q9XCJmb3JtYXRfcmVxdWVzdFwiXG4gICAgICAgICAgICAgIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKVwiXG4gICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBTdHJpbmcsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBjaGFydHNfb3B0aW9uczogQXJyYXksXG4gIGF2YWlsYWJsZV9maWx0ZXJzOiBPYmplY3QsXG59KVxuXG4vKiBCeSBkZWZhdWx0IHVzZSB0aGUgZmlyc3QgZW50cnkgKi9cbmNvbnN0IGN1cnJlbnRseV9zZWxlY3RlZF9jaGFydCA9IDBcblxuY29uc3QgY2hhcnRfdHlwZSA9IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkJVQkJMRVxuY29uc3QgcmVzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvY2hhcnRzL2hvc3QvbWFwLmx1YWBcbmNvbnN0IHdpZGdldF9uYW1lID0gJ2FsZXJ0cy1tYXAnO1xuY29uc3QgYWN0aXZlX2ZpbHRlcl9saXN0ID0ge31cbmNvbnN0IGJ1YmJsZV9jaGFydCA9IHJlZihudWxsKVxuXG5jb25zdCBmb3JtYXRfcmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcGFyYW1zX3N0cmluZyA9ICcnXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBidWJibGVfbW9kZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyksXG4gICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2lmaWQnKSxcbiAgfVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpIHtcbiAgICBwYXJhbXNfc3RyaW5nID0gYCR7cGFyYW1zX3N0cmluZ30mJHtrZXl9PSR7dmFsdWV9YFxuICB9XG5cbiAgLyogUmV0dXJuIGEgY3VzdG9tIHN0cmluZywgY29udGFpbmluZyBjdXN0b20gb3B0aW9ucyAqL1xuICByZXR1cm4gcGFyYW1zX3N0cmluZ1xufVxuXG5jb25zdCBmb3JtYXRfb3B0aW9ucyA9IGZ1bmN0aW9uKG1vZGVfaWQpIHtcbiAgbGV0IG9wdGlvbnMgPSB7fVxuXG4gIHByb3BzLmNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbl9saXN0KSA9PiB7XG4gICAgaWYob3B0aW9uX2xpc3QubW9kZV9pZCA9PSBtb2RlX2lkKVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbl9saXN0O1xuICB9KVxuXG4gIC8qIEFkZCB0aGUgY29ycmFjdCBldmVudCBmdW5jdGlvbnMgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLmNoYXJ0ICYmIG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpIHtcbiAgICBvcHRpb25zLmNoYXJ0LmV2ZW50cyA9IG9wdGlvbnMuY2hhcnQuZXZlbnRzIHx8IHt9XG4gICAgZm9yKGNvbnN0IFtldmVudCwgZnVuXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSkge1xuICAgICAgaWYoZnVuID09IHVuZGVmaW5lZCkgXG4gICAgICAgIGNvbnRpbnVlXG5cbiAgICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzW2V2ZW50XSA9IE50b3BVdGlsc1tmdW5dIHx8IE50b3BVdGlscy5mbm9uZVxuICAgIH1cbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy54YXhpcyAmJiBvcHRpb25zLnhheGlzLmxhYmVscyAmJiBvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueWF4aXMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnRvb2x0aXAgJiYgb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyKVxuICAgIG9wdGlvbnMudG9vbHRpcC5jdXN0b20gPSBOdG9wVXRpbHNbb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyXVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBcbiAgLyogUmV0dXJuIHRoZSBsaXN0IG9mIGZvcm1hdHRlZCBvcHRpb25zIG9mIHRoZSBjaGFydCAqL1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIGxldCBvcHRpb25zID0gZm9ybWF0X29wdGlvbnMoTnVtYmVyKGFjdGl2ZV9maWx0ZXJfbGlzdFsnYnViYmxlX21vZGUnXS5pZCkpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIG9wdGlvbnMuc2VyaWVzID0gZGF0YS5zZXJpZXMgfHwge31cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbn1cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IGJ1YmJsZV9tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyk7XG4gIFxuICBpZighYnViYmxlX21vZGUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYnViYmxlX21vZGUnLCAwKSAvKiBGaXJzdCBFbnRyeSAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgIDxMb2FkaW5nIHYtaWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiIDpjbGFzcz1cIltsb2FkaW5nID8gJ250b3BuZy1ncmF5LW91dCcgOiAnJ11cIiBzdHlsZT1cImhlaWdodDogNzB2aDtcIiByZWY9XCJib2R5X2RpdlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGZsZXgtcm93LXJldmVyc2UgbWItMlwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG0tMVwiIHRhYmluZGV4PVwiMFwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJyZWxvYWRcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXksIGluZGV4KSBpbiBhdmFpbGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1pZj1cInZhbHVlLmxlbmd0aCA+IDBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWluLXdpZHRoOiAxNHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdwb3J0c19hbmFseXNpcy4nICsga2V5KSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3Rba2V5XVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1heF9lbnRyaWVzX3JlYWNoZWQgPT0gdHJ1ZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXQtYXV0byBtLTFcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIHN0eWxlPVwiY3Vyc29yOiBoZWxwO1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgZGlzYWJsZWQ+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8U2Fua2V5XG4gICAgICAgICAgcmVmPVwic2Fua2V5X2NoYXJ0XCJcbiAgICAgICAgICA6d2lkdGg9XCJ3aWR0aFwiXG4gICAgICAgICAgOmhlaWdodD1cImhlaWdodFwiXG4gICAgICAgICAgOm5vX2RhdGFfbWVzc2FnZT1cIm5vX2RhdGFfbWVzc2FnZVwiXG4gICAgICAgICAgOnNhbmtleV9kYXRhPVwic2Fua2V5X2RhdGFcIlxuICAgICAgICAgIEB1cGRhdGVfd2lkdGg9XCJ1cGRhdGVfd2lkdGhcIlxuICAgICAgICAgIEB1cGRhdGVfaGVpZ2h0PVwidXBkYXRlX2hlaWdodFwiXG4gICAgICAgICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCI+XG4gICAgICAgICAgPC9TYW5rZXk+ICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNhbmtleSB9IGZyb20gXCIuL3NhbmtleS52dWVcIjtcblxuY29uc3QgYWN0aXZlX2ZpbHRlcl9saXN0ID0ge31cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBOdW1iZXIsXG4gIGF2YWlsYWJsZV9maWx0ZXJzOiBPYmplY3QsXG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSByZWYoZmFsc2UpXG5jb25zdCBtYXhfZW50cnlfdGl0bGUgPSBfaTE4bigncG9ydHNfYW5hbHlzaXMubWF4X2VudHJpZXMnKVxuY29uc3Qgbm9fZGF0YV9tZXNzYWdlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm5vX2RhdGEnKVxuY29uc3Qgc2Fua2V5X2NoYXJ0ID0gcmVmKG51bGwpXG5jb25zdCBib2R5X2RpdiA9IHJlZihudWxsKTtcbmNvbnN0IHdpZHRoID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0ID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X2RhdGEgPSByZWYoe30pO1xuY29uc3QgbGl2ZV9yZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvdmxhbi9saXZlX3BvcnRzLmx1YWBcbmNvbnN0IGhpc3RvcmljYWxfcmVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3ZsYW4vaGlzdG9yaWNhbF9wb3J0cy5sdWFgXG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKVxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgLyogQmVmb3JlIG1vdW50aW5nIHRoZSB2YXJpb3VzIHdpZGdldHMsIHVwZGF0ZSB0aGUgdXJsIHRvIHRoZSBjb3JyZWN0IG9uZSwgYnkgYWRkaW5nIGlmaWQsIGVjYy4gKi9cbiAgY29uc3QgdGltZWZyYW1lID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3RpbWVmcmFtZScpO1xuICBjb25zdCB2bGFuID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZsYW4nKTtcbiAgY29uc3QgbDRfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnbDRwcm90bycpO1xuICBcbiAgaWYoIXRpbWVmcmFtZSkgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd0aW1lZnJhbWUnLCAnbm9uZScpIC8qIERlZmF1bHQgbGl2ZSAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuJywgJ25vbmUnKSAvKiBEZWZhdWx0IGFsbCBWTEFOcyAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdsNHByb3RvJywgJ25vbmUnKSAvKiBEZWZhdWx0IG5vIHByb3RvY29sICovXG4gIFxuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2lmaWQnLCBwcm9wcy5pZmlkKSAvKiBDdXJyZW50IGludGVyZmFjZSAqL1xuXG4gIGZvcihjb25zdCBbbmFtZSwgZmlsdGVyc10gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMuYXZhaWxhYmxlX2ZpbHRlcnMpKSB7XG4gICAgZmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGZpbHRlci5maWx0ZXJfbmFtZSA9IG5hbWVcbiAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlKVxuICAgICAgICBhY3RpdmVfZmlsdGVyX2xpc3RbbmFtZV0gPSBmaWx0ZXI7XG4gICAgfSlcbiAgfVxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIHVwZGF0ZV9oZWlnaHQoKTtcbiAgdXBkYXRlX3dpZHRoKCk7XG4gIHVwZGF0ZV9zYW5rZXkoKTtcbn0pO1xuXG5mdW5jdGlvbiBvbl9ub2RlX2NsaWNrKG5vZGUpIHtcbiAgaWYgKG5vZGUuaXNfbGlua19ub2RlID09IHRydWUpIHsgcmV0dXJuOyB9XG4gIGlmIChub2RlLmxpbmspIHsgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChub2RlLmxpbmspOyB9XG59XG5cbmNvbnN0IHJlbG9hZCA9IGZ1bmN0aW9uKCkge1xuICB1cGRhdGVfc2Fua2V5KClcbn1cblxuY29uc3QgY2xpY2tfaXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGl0ZW0uZmlsdGVyX25hbWUsIGl0ZW0uaWQpXG4gIHVwZGF0ZV9zYW5rZXkoKTtcbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tfbWF4X2VudHJpZXMoZGF0YSkge1xuICBtYXhfZW50cmllc19yZWFjaGVkLnZhbHVlID0gZGF0YS5tYXhfZW50cmllc19yZWFjaGVkXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YSgpIHtcbiAgbG9hZGluZy52YWx1ZSA9IHRydWU7XG4gIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7ICAgIFxuICBzYW5rZXlfZGF0YS52YWx1ZSA9IGRhdGE7XG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICBjb25zdCB1cmxfcmVxdWVzdCA9IGdldF9zYW5rZXlfdXJsKCk7XG4gIGxldCBncmFwaCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gIGNoZWNrX21heF9lbnRyaWVzKGdyYXBoKTtcbiAgZ3JhcGggPSBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKTtcbiAgY29uc3Qgc2Fua2V5X2RhdGEgPSBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgpO1xuICAvKiBJbiBjYXNlIG5vIGRhdGEgaXMgcmV0dXJuZWQsIHNob3cgdGhlIE5vIERhdGEgbWVzc2FnZSAqL1xuICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKGZhbHNlKSA6IFxuICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKHRydWUpO1xuICBcbiAgXG4gIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV91cmwoKSB7XG4gIGxldCB2bGFuID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2bGFuXCIpO1xuICBsZXQgdGltZWZyYW1lID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lZnJhbWVcIik7XG4gIGxldCBsNHByb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJsNHByb3RvXCIpO1xuICBpZih2bGFuID09ICdub25lJykgeyB2bGFuID0gJyc7IH1cbiAgaWYodGltZWZyYW1lID09ICdub25lJykgeyB0aW1lZnJhbWUgPSAnJzsgfVxuICBpZihsNHByb3RvID09ICdub25lJykgeyBsNHByb3RvID0gJyc7IH1cbiAgXG4gIGxldCB1cmxfcmVxdWVzdCA9ICcnO1xuICBsZXQgcGFyYW1zID0ge1xuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcbiAgICB2bGFuOiB2bGFuLFxuICAgIHRpbWVmcmFtZTogdGltZWZyYW1lLFxuICAgIGw0cHJvdG86IGw0cHJvdG9cbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBpZih0aW1lZnJhbWUgPT0gJycpIHsgdXJsX3JlcXVlc3QgPSBgJHtsaXZlX3Jlc3R9PyR7dXJsX3BhcmFtc31gOyB9XG4gIGVsc2UgeyB1cmxfcmVxdWVzdCA9IGAke2hpc3RvcmljYWxfcmVzdH0/JHt1cmxfcGFyYW1zfWA7IH1cblxuICByZXR1cm4gdXJsX3JlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShyZXMpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge30sIGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIHJlcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIGxldCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRyZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxhYmVsXG4gICAgcmVzLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgIGxpbms6IGxpbmsub3B0aW9uYWxfaW5mby5saW5rLFxuXHRcdG5vZGVfbGlua3M6IFtdLFx0XHRcblx0ICAgIH07XG5cdCAgICBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXSA9IGxpbmtfdG9fbm9kZXM7XG5cdH1cblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLnB1c2goe1xuXHQgICAgc291cmNlOiBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF0sXG5cdCAgICB0YXJnZXQ6IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXSxcblx0ICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuXHR9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3NcbiAgICBsZXQgbm9kZXMgPSByZXMubm9kZXMubWFwKChuKSA9PiBuKSwgbGlua3MgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5rX25vZGVfaWQgaW4gbGlua190b19ub2Rlc19kaWN0KSB7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGxldCBsaW5rX25vZGUgPSB7XG5cdCAgICBub2RlX2lkOiBsaW5rX3RvX25vZGVzLmlkLFxuXHQgICAgbGFiZWw6IGxpbmtfdG9fbm9kZXMubGFiZWwsXG4gICAgICBsaW5rOiBsaW5rX3RvX25vZGVzLmxpbmssXG5cdH07XG5cdG5vZGVzLnB1c2gobGlua19ub2RlKTtcblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rLnNvdXJjZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdHJldHVybiB7IGluZGV4LCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbm9kZV9kaWN0ID0ge307ICAgIFxuICAgIHNhbmtleV9ub2Rlcy5mb3JFYWNoKChzbiwgaW5kZXgpID0+IHNhbmtleV9ub2RlX2RpY3Rbc24uZGF0YS5ub2RlX2lkXSA9IHNuKTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2VfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdLmluZGV4O1xuXHRsZXQgdGFyZ2V0X2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXS5pbmRleDtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlX2luZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsXG5cdCAgICB2YWx1ZTogbC52YWx1ZSxcblx0ICAgIGxhYmVsOiBsLmxhYmVsLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzOiBzYW5rZXlfbm9kZXMsIGxpbmtzOiBzYW5rZXlfbGlua3MgfTtcbn1cblxuLy8gcmVtb3ZlIGFsbCBsaW5rcyB3aXRoIGEgbm90IGV4aXN0aW5nIG5vZGVcbmZ1bmN0aW9uIG1ha2VfY29tcGxldGVfZ3JhcGgoZ3JhcGgpIHtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3Igbm90IGV4aXN0aW5nIHNvdXJjZS90YXJnZXQgbm9kZWApOyAgICBcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbi8vIHJlbWVvdmUgYWxsIGNpcmN1bGFyIGxpbmtzIGFuZCByZXR1cm4gYSBkYWcgZ3JhcGhcbmZ1bmN0aW9uIG1ha2VfZGFnX2dyYXBoKGdyYXBoKSB7ICAgIFxuICAgIGxldCBub2Rlc19kZXN0X2RpY3QgPSB7fTsgLy8gZGljdGlvbmFyeSB7IFtub2RlX3NvdXJjZV9pZF06IG5vZGVzX3RhcmdldFtdIH1cbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsKSA9PiB7XG5cdGxldCBub2Rlc19kZXN0ID0gbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdO1xuXHRpZiAobm9kZXNfZGVzdCA9PSBudWxsKSB7XG5cdCAgICBub2Rlc19kZXN0ID0gW107XG5cdCAgICBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gPSBub2Rlc19kZXN0O1xuXHR9XG5cdG5vZGVzX2Rlc3QucHVzaChsLnRhcmdldF9ub2RlX2lkKTtcbiAgICB9KTtcbiAgICBsZXQgbm9kZXNfdG9fY2hlY2sgPSB7fTsgLy8gdGVtcCBkaWN0aW9uYXJ5IHVzZWQgZnJvbSBmX2FkZF9jaXJjdWxhcl9saW5rIFxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IHtcblx0bm9kZXNfdG9fY2hlY2tbbi5ub2RlX2lkXSA9IHsgY2hlY2tlZDogZmFsc2UsIHZpc2l0ZWQ6IGZhbHNlIH07XG4gICAgfSk7XG5cbiAgICAvLyBjaXJjdWxhciBsaW5rcyBkaWN0IChrZXk6IGAke3NvdXJjZV9ub2RlX2lkfV8ke3RhcmdldF9ub2RlX2lkfWApXG4gICAgbGV0IGNpcmN1bGFyX2xpbmtzID0ge307XG4gICAgbGV0IGZfZ2V0X2xpbmtfa2V5ID0gKHNvdXJjZV9pZCwgdGFyZ2V0X2lkKSA9PiBgJHtzb3VyY2VfaWR9XyR7dGFyZ2V0X2lkfWA7XG4gICAgXG4gICAgLy8gZGVlcCBuYXZpZ2F0ZSBzdGFydGluZyBmcm9tIG5vZGVfaWQgYW5kIGFkZCBjaXJjdWxhcl9saW5rcyB2aXNpdGVkIGluIGNpcmN1bGFyX2xpbmtzIGRpY3QgXG4gICAgbGV0IGZfc2V0X2NpcmN1bGFyX2xpbmtzID0gKG5vZGVfaWQsIGZyb21fbm9kZV9pZCkgPT4ge1xuXHRsZXQgbm9kZV90b19jaGVjayA9IG5vZGVzX3RvX2NoZWNrW25vZGVfaWRdO1xuXHRpZiAobm9kZV90b19jaGVjay5jaGVja2VkID09IHRydWUpIHsgcmV0dXJuOyB9XG5cdGVsc2UgaWYgKG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9PSB0cnVlKSB7XG5cdCAgICBsZXQgbGlua19rZXkgPSBmX2dldF9saW5rX2tleShmcm9tX25vZGVfaWQsIG5vZGVfaWQpO1xuXHQgICAgY2lyY3VsYXJfbGlua3NbbGlua19rZXldID0gdHJ1ZTtcblx0ICAgIGNvbnNvbGUuZXJyb3IoYExpbmsgKHNvdXJjZTogJHtmcm9tX25vZGVfaWR9LCB0YXJnZXQ6ICR7bm9kZV9pZH0gKSBpcyBhIGNpcmN1bGFyIGxpbmtgKTtcblx0ICAgIG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IGZhbHNlO1xuXHQgICAgcmV0dXJuO1xuXHR9XG5cdG5vZGVfdG9fY2hlY2sudmlzaXRlZCA9IHRydWU7XG5cdGxldCBub2Rlc19kZXN0ID0gbm9kZXNfZGVzdF9kaWN0W25vZGVfaWRdO1xuXHRpZiAobm9kZXNfZGVzdCAhPSBudWxsKSB7XG5cdCAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzX2Rlc3QubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRsZXQgdGFyZ2V0X25vZGVfaWQgPSBub2Rlc19kZXN0W2ldO1xuXHRcdGZfc2V0X2NpcmN1bGFyX2xpbmtzKHRhcmdldF9ub2RlX2lkLCBub2RlX2lkKTtcdCAgICBcblx0ICAgIH1cblx0fVxuXHRub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcblx0bm9kZV90b19jaGVjay5jaGVja2VkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8vIHNldCBjaXJjdWxhcl9saW5rcyBkaWN0aW9uYXJ5XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4gZl9zZXRfY2lyY3VsYXJfbGlua3Mobi5ub2RlX2lkKSk7XG4gICAgXG4gICAgLy8gcmVtb3ZlIG5vIGRhZyBub2Rlcy9saW5rc1xuICAgIGxldCBmX2ZpbHRlcl9saW5rID0gKGwpID0+IHtcblx0bGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkobC5zb3VyY2Vfbm9kZV9pZCwgbC50YXJnZXRfbm9kZV9pZCk7XG5cdGxldCB0YWtlX2xpbmsgPSBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPT0gbnVsbDtcblx0cmV0dXJuIHRha2VfbGluaztcbiAgICB9O1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyX2xpbmssIGZfbG9nX2xpbmspO1xuICAgIFxuICAgIGxldCBmX2xvZ19ub2RlID0gKG4pID0+IGNvbnNvbGUuZXJyb3IoYG5vZGUgJHtuLm5vZGVfaWR9IHJlbW92ZWQgZm9yIGNpcmN1bGFyIGxpbmtzYCk7XG4gICAgbGV0IG5vZGVzID0gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayh7bm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rc30sIGZfbG9nX25vZGUpO1xuXG4gICAgLy8gcmV0dXJuIGEgZGFnIGdyYXBoXG4gICAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IG5vZGVfZGljdFtuLm5vZGVfaWRdID0gdHJ1ZSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKGwpID0+IG5vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSAhPSBudWxsICYmIG5vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXSAhPSBudWxsOyAgICBcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcblx0bGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG5cdGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuXHRpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcblx0ICAgIGZfbG9nKGUpO1xuXHR9XG5cdHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9oZWlnaHQoKSB7XG4gIGhlaWdodC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLmhlaWdodCgpIC0gMTAwO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfd2lkdGgoKSB7XG4gIHdpZHRoLnZhbHVlID0gJChib2R5X2Rpdi52YWx1ZSkud2lkdGgoKSAtIDEwO1xufVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1iLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbm8td3JhcFwiIHN0eWxlPVwidGV4dC1hbGlnbjpsZWZ0O21hcmdpbi1yaWdodDoxcmVtO21pbi13aWR0aDoyNXJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignY3JpdGVyaWFfZmlsdGVyJykgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2NyaXRlcmlhXCIgOm9wdGlvbnM9XCJjcml0ZXJpYV9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfY3JpdGVyaWFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgcmVmPVwidGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzXCJcblx0XHRcdFx0ICAgICAgIDpjc3JmPVwiY3NyZlwiXG5cdFx0XHRcdCAgICAgICA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG5cdFx0XHRcdCAgICAgICA6dGFibGVfY29uZmlnX2lkPVwidGFibGVfY29uZmlnX2lkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcblx0XHRcdFx0ICAgICAgIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX21hcF9jb25maWc9XCJtYXBfY29uZmlnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIGZpbHRlcl90YWJsZV9hcnJheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiZWwgPT4geyBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCIgOmhpZGRlbj1cInQuaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIDpzaG93PVwidC5zaG93X3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMVwiPjwvU3Bpbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtZm9yPVwib3B0IGluIHQub3B0aW9uc1wiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7IGRpc3BsYXk6IGJsb2NrO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX3RhYmxlX2ZpbHRlcihvcHQsICRldmVudClcIiBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZSB0YWctZmlsdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJvcHQudmFsdWVcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwib3B0LmNvdW50ID09IG51bGxcIj57eyBvcHQubGFiZWwgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgb3B0LmxhYmVsICsgXCIgKFwiICsgb3B0LmNvdW50ICsgXCIpXCIgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdFxufSk7XG5cbmNvbnN0IGNzcmYgPSByZWYocHJvcHMuY29udGV4dC5jc3JmKTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IGNyaXRlcmlhX2xpc3RfZGVmID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwiYXBwbGljYXRpb25fcHJvdG9cIiksIHZhbHVlOiAxLCBwYXJhbTogXCJhcHBsaWNhdGlvbl9wcm90b2NvbFwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2FwcF9wcm90b1wiLCBlbnRlcnByaXNlX206IGZhbHNlLCBzZWFyY2hfZW5hYmxlZDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50XCIpLCB2YWx1ZTogMiwgcGFyYW06IFwiY2xpZW50XCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfY2xpZW50XCIsIGVudGVycHJpc2VfbTogZmFsc2UsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlclwiKSwgdmFsdWU6IDQsIHBhcmFtOiBcImNsaWVudF9zZXJ2ZXJcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9jbGllbnRfc2VydmVyXCIsIGVudGVycHJpc2VfbTogdHJ1ZSwgc2VhcmNoX2VuYWJsZWQ6IGZhbHNlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJjbGllbnRfc2VydmVyX2FwcGxpY2F0aW9uX3Byb3RvXCIpLCB2YWx1ZTogNSwgcGFyYW06IFwiYXBwX2NsaWVudF9zZXJ2ZXJcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9hcHBfY2xpZW50X3NlcnZlclwiLCBlbnRlcnByaXNlX206IHRydWUsIHNlYXJjaF9lbmFibGVkOiB0cnVlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJjbGllbnRfc2VydmVyX3Nydl9wb3J0XCIpLCB2YWx1ZTogNywgcGFyYW06IFwiY2xpZW50X3NlcnZlcl9zcnZfcG9ydFwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2NsaWVudF9zZXJ2ZXJfc3J2X3BvcnRcIiwgZW50ZXJwcmlzZV9tOiBmYWxzZSwgc2VhcmNoX2VuYWJsZWQ6IGZhbHNlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJpbmZvXCIpLCB2YWx1ZTogNiwgcGFyYW06IFwiaW5mb1wiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2luZm9cIiwgZW50ZXJwcmlzZV9tOiB0cnVlLCBzZWFyY2hfZW5hYmxlZDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwic2VydmVyXCIpLCB2YWx1ZTogMywgcGFyYW06IFwic2VydmVyXCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfc2VydmVyXCIsIGVudGVycHJpc2VfbTogZmFsc2UsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuXTtcblxuY29uc3QgbG9hZGluZyA9IHJlZihudWxsKVxuY29uc3QgdGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzID0gcmVmKCk7XG5jb25zdCBmaWx0ZXJfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKVxuXG5jb25zdCB0YWJsZV9jb25maWdfaWQgPSByZWYoJ2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cycpO1xuY29uc3QgdGFibGVfaWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlPy52YWx1ZSA9PSBudWxsKSB7IHJldHVybiB0YWJsZV9jb25maWdfaWQudmFsdWU7IH1cbiAgICBsZXQgaWQgPSBgJHt0YWJsZV9jb25maWdfaWQudmFsdWV9XyR7c2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWV9YDtcbiAgICByZXR1cm4gaWQ7XG59KTtcbmNvbnN0IHNlbGVjdGVkX2NyaXRlcmlhID0gcmVmKGNyaXRlcmlhX2xpc3RfZGVmWzBdKTtcbmxldCBkZWZhdWx0X3VybF9wYXJhbXMgPSB7fTtcblxuY29uc3QgY3JpdGVyaWFfbGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvcHMuY29udGV4dC5pc19udG9wX2VudGVycHJpc2VfbSkge1xuICAgICAgICByZXR1cm4gcmVmKGNyaXRlcmlhX2xpc3RfZGVmKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBjcml0ZXJhX2xpc3RfZGVmX2NvbSA9IFtdO1xuICAgICAgICBjcml0ZXJpYV9saXN0X2RlZi5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWMuZW50ZXJwcmlzZV9tKVxuICAgICAgICAgICAgICAgIGNyaXRlcmFfbGlzdF9kZWZfY29tLnB1c2goYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVmKGNyaXRlcmFfbGlzdF9kZWZfY29tKTtcbiAgICB9XG59KCk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIGluaXRfc2VsZWN0ZWRfY3JpdGVyaWEoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldygpO1xuICAgIFxufSk7XG5cbmZ1bmN0aW9uIGluaXRfc2VsZWN0ZWRfY3JpdGVyaWEoKSB7XG4gICAgbGV0IGFnZ3JlZ2F0aW9uX2NyaXRlcmlhID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJhZ2dyZWdhdGlvbl9jcml0ZXJpYVwiKTtcbiAgICBpZiAoYWdncmVnYXRpb25fY3JpdGVyaWEgPT0gbnVsbCB8fCBhZ2dyZWdhdGlvbl9jcml0ZXJpYSA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUgPSBjcml0ZXJpYV9saXN0X2RlZi5maW5kKChjKSA9PiBjLnBhcmFtID09IGFnZ3JlZ2F0aW9uX2NyaXRlcmlhKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2NyaXRlcmlhKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0aW9uX2NyaXRlcmlhXCIsIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnBhcmFtKTtcbn07XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIC8qbGV0IHBhcmFtcyA9IGdldF91cmxfcGFyYW1zKGFjdGl2ZV9wYWdlLCBwZXJfcGFnZSwgY29sdW1uc193cmFwLCBtYXBfc2VhcmNoLCBmaXJzdF9nZXRfcm93cyk7XG4gICAgICBzZXRfcGFyYW1zX2luX3VybChwYXJhbXMpOyovXG4gICAgbGV0IHBhcmFtcyA9IGdldF91cmxfcGFyYW1zKCk7XG4gICAgcmV0dXJuIHBhcmFtcztcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldyhhY3Rpb24pIHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUgPSBhd2FpdCBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoXCJvdmVydmlld1wiKTtcbiAgICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG59XG5mdW5jdGlvbiBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCkge1xuICAgIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZS5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGVsLmJhc2ljX2xhYmVsID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLmJhc2ljX2xhYmVsID0gZWwubGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHVybF9lbnRyeSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGVsLmlkKVxuICAgICAgICBpZiAodXJsX2VudHJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi52YWx1ZS50b1N0cmluZygpID09PSB1cmxfZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwubGFiZWwgPSBgJHtlbC5iYXNpY19sYWJlbH06ICR7b3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZX1gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5jb25zdCBnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24gPSAoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKF8pID0+IHtcbiAgICAgICAgbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KTtcbiAgICB9O1xufTtcblxuZnVuY3Rpb24gYWRkX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKG9wdC5rZXksIGAke29wdC52YWx1ZX1gKTtcbiAgICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG4gICAgdGFibGVfYWdncmVnYXRlZF9saXZlX2Zsb3dzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KSB7XG4gICAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBpZiAoZmlsdGVyLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBuZXdfZmlsdGVyX2FycmF5ID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGZpbHRlci5pZCwgZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyLm9wdGlvbnMgPSBuZXdfZmlsdGVyX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gZmlsdGVyLmlkKS5vcHRpb25zO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICBsZXQgZHJvcGRvd24gPSBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkudmFsdWVbZmlsdGVyX2luZGV4XTtcbiAgICAgICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gICAgfVxuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSBmYWxzZTtcbn1cblxuLyogRnVuY3Rpb24gdG8gbG9hZCBmaWx0ZXJzIChKdXN0IFZMQU5zKSAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGFjdGlvbiwgZmlsdGVyKSB7XG4gICAgbGV0IGlmaWRfcGFyYW0gPSB7XG4gICAgICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5jb250ZXh0LmlmaWRcbiAgICB9O1xuICAgIGxldCBpZmlkX3BhcmFtX2Zvcl91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMoaWZpZF9wYXJhbSk7XG4gICAgXG4gICAgXG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2Zsb3cvYWdncmVnYXRlZF9saXZlX2Zsb3dzX2ZpbHRlcnMubHVhP2FjdGlvbj0ke2FjdGlvbn0mJHt1cmxfcGFyYW1zfSYke2lmaWRfcGFyYW1fZm9yX3VybH1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQuYWN0aW9uIHx8IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIGRhdGFfbG9hZGVkOiBhY3Rpb24gIT0gJ292ZXJ2aWV3JyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHQudmFsdWUsXG4gICAgICAgICAgICBoaWRkZW46ICh0LnZhbHVlLmxlbmd0aCA9PSAxKVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0X3VybF9wYXJhbXMoKSB7XG4gICAgbGV0IGFjdHVhbF9wYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgICAgIHZsYW5faWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhbl9pZFwiKSAgLyogTm8gZmlsdGVyIGJ5IGRlZmF1bHQgKi8sXG4gICAgICAgIGRldmljZUlQOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImRldmljZUlQXCIpLFxuICAgICAgICBhZ2dyZWdhdGlvbl9jcml0ZXJpYTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJhZ2dyZWdhdGlvbl9jcml0ZXJpYVwiKSB8fCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS5wYXJhbSxcbiAgICAgICAgaG9zdDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpIHx8IHByb3BzLmNvbnRleHQuaG9zdCxcbiAgICB9OyAgICBcbiAgICBcbiAgICByZXR1cm4gYWN0dWFsX3BhcmFtcztcbn1cblxuXG5jb25zdCBtYXBfY29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGNvbmZpZy5lbmFibGVfc2VhcmNoID0gc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUuc2VhcmNoX2VuYWJsZWQgPT0gdHJ1ZTtcbiAgICByZXR1cm4gY29uZmlnO1xufTtcblxuLy8vIG1ldGhvZHMgdG8gZ2V0IGNvbHVtbnMgY29uZmlnXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGNvbHVtbnMgPSBbXTsgICAgXG4gICAgY29sdW1ucy5wdXNoKFxuICAgICAgICB7XG4gICAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsIHRpdGxlX2kxOG46J2Zsb3dzX3BhZ2UubGl2ZV9mbG93cycgLG5hbWU6ICdmbG93c19pY29uJywgZGF0YV9maWVsZDogJ2xpdmVfZmxvd3MnLCBjbGFzczogWyd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfZmxvd3NfaWNvbihkYXRhX2ZpZWxkLCByb3dEYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSAxKSB7XG5cbiAgICAgICAgLy8gYXBwbGljYXRpb24gcHJvdG9jb2wgY2FzZVxuICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJhcHBsaWNhdGlvbl9wcm90b1wiLCBzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGFfZmllbGQ6ICdhcHBsaWNhdGlvbicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZChkYXRhX2ZpZWxkLCByb3dEYXRhKVxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBgJHtkYXRhX2ZpZWxkLmxhYmVsX3dpdGhfaWNvbnN9YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyp7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJhcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkXCIsc29ydGFibGU6IGZhbHNlLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhX2ZpZWxkOiAnaXNfbm90X2d1ZXNzZWQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9Ki9cbiAgICAgICAgKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMikge1xuICAgICAgICAvLyBjbGllbnQgY2FzZVxuICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJjbGllbnRcIiwgc29ydGFibGU6IHRydWUsICBuYW1lOiAnY2xpZW50JywgZGF0YV9maWVsZDogJ2NsaWVudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9jbGllbnRfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSAzKSB7XG4gICAgICAgIC8vIHNlcnZlciBjYXNlXG4gICAgICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImxhc3Rfc2VydmVyXCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAnc2VydmVyJywgZGF0YV9maWVsZDogJ3NlcnZlcicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfc2VydmVyX25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNykge1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJjbGllbnRcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdjbGllbnQnLCBkYXRhX2ZpZWxkOiAnY2xpZW50JywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfY2xpZW50X25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImxhc3Rfc2VydmVyXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnc2VydmVyJywgZGF0YV9maWVsZDogJ3NlcnZlcicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfc2VydmVyX25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvcHMuY29udGV4dC5pc19udG9wX2VudGVycHJpc2VfbSkge1xuICAgICAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNCB8fCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA3ICkge1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJjbGllbnRcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdjbGllbnQnLCBkYXRhX2ZpZWxkOiAnY2xpZW50JywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfY2xpZW50X25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImxhc3Rfc2VydmVyXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnc2VydmVyJywgZGF0YV9maWVsZDogJ3NlcnZlcicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfc2VydmVyX25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA1KSB7XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goXG5cdFx0e1xuICAgICAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImNsaWVudFwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2NsaWVudCcsIGRhdGFfZmllbGQ6ICdjbGllbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGZvcm1hdF9jbGllbnRfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKTsgICAgICAgICAgICAgICAgXG5cdFx0ICAgIH1cblx0XHR9LFxuXHRcdHtcblx0XHQgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGZvcm1hdF9zZXJ2ZXJfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKTtcblx0XHQgICAgfVxuXHRcdH0sXG5cdFx0e1xuXHRcdCAgICB0aXRsZV9pMThuOiBcImFwcGxpY2F0aW9uX3Byb3RvXCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhX2ZpZWxkOiAnYXBwbGljYXRpb24nLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZChkYXRhX2ZpZWxkLCByb3dEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gYCR7ZGF0YV9maWVsZC5sYWJlbF93aXRoX2ljb25zfWBcblx0XHQgICAgfVxuXHRcdH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDYpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiaW5mb1wiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2luZm8nLCBkYXRhX2ZpZWxkOiAnaW5mbycsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtkYXRhX2ZpZWxkLmxhYmVsfWBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmNvbnRleHQudmxhbnMubGVuZ3RoID4gMikge1xuICAgICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJ2bGFuXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAndmxhbl9pZCcsIGRhdGFfZmllbGQ6ICd2bGFuX2lkJywgY2xhc3M6IFsndGV4dC1ub3dyYXAgJywndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YV9maWVsZC5pZCA9PT0gMCB8fCBkYXRhX2ZpZWxkLmlkID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGkxOG4oJ25vX3ZsYW4nKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3ZsYW49MFwiPiR7bGFiZWx9PC9hPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT92bGFuPSR7ZGF0YV9maWVsZC5pZH1cIj4ke2RhdGFfZmllbGQubGFiZWx9PC9hPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICB0aXRsZV9pMThuOiBcImZsb3dzXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnZmxvd3MnLCBkYXRhX2ZpZWxkOiAnZmxvd3MnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCAnLCd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcbiAgICB9LCB7XG4gICAgICAgIHRpdGxlX2kxOG46IFwidG90YWxfc2NvcmVcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdzY29yZScsIGRhdGFfZmllbGQ6ICd0b3Rfc2NvcmUnLCBjbGFzczogWyd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcbiAgICB9KTtcblxuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSAyICYmIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDQgJiYgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gNylcbiAgICAgICAgY29sdW1ucy5wdXNoKHsgdGl0bGVfaTE4bjogXCJjbGllbnRzXCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAnbnVtX2NsaWVudHMnLCBkYXRhX2ZpZWxkOiAnbnVtX2NsaWVudHMnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCAnLCd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gMyAmJiBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSA0ICYmIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDcpXG4gICAgICAgIGNvbHVtbnMucHVzaCh7IHRpdGxlX2kxOG46IFwic2VydmVyc1wiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ251bV9zZXJ2ZXJzJywgZGF0YV9maWVsZDogJ251bV9zZXJ2ZXJzJywgY2xhc3M6IFsndGV4dC1ub3dyYXAgJywndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0pO1xuXG4gICAgY29sdW1ucy5wdXNoKHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJicmVha2Rvd25cIiwgIHNvcnRhYmxlOiBmYWxzZSwgbmFtZTogJ2JyZWFrZG93bicsIGRhdGFfZmllbGQ6ICdicmVha2Rvd24nLCBjbGFzczogWyd0ZXh0LW5vd3JhcCcsJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihkYXRhX2ZpZWxkLnBlcmNlbnRhZ2VfYnl0ZXNfc2VudCwgZGF0YV9maWVsZC5wZXJjZW50YWdlX2J5dGVzX3JjdmQsIGkxOG4oJ3NlbnQnKSwgaTE4bigncmN2ZCcpKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJ0cmFmZmljX3NlbnRcIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdieXRlc19zZW50JywgZGF0YV9maWVsZDogJ2J5dGVzX3NlbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCcsJ3RleHQtZW5kJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGFfZmllbGQpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICB0aXRsZV9pMThuOiBcInRyYWZmaWNfcmN2ZFwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2J5dGVzX3JjdmQnLCBkYXRhX2ZpZWxkOiAnYnl0ZXNfcmN2ZCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJywndGV4dC1lbmQnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YV9maWVsZCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIHRpdGxlX2kxOG46IFwidG90YWxfdHJhZmZpY1wiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ3RvdF90cmFmZmljJywgZGF0YV9maWVsZDogJ3RvdF90cmFmZmljJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnLCd0ZXh0LWVuZCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhX2ZpZWxkKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb2x1bW5zO1xufVxuXG5jb25zdCBmb3JtYXRfY2xpZW50X25hbWUgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGxldCBhbGVydF9sYWJlbCA9ICcnXG4gICAgaWYgKGRhdGEuaXNfYWxlcnRlZCkge1xuICAgICAgICBhbGVydF9sYWJlbCA9IGA8aSBjbGFzcz0nZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlJyBzdHlsZT0nY29sb3I6ICNCOTRBNDg7Jz48L2k+YDtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGEuaW5fbWVtb3J5KSB7XG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsfSAke2FsZXJ0X2xhYmVsfSAke2RhdGEuZXh0cmFfbGFiZWxzfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9jbGllbnQ9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7ZGF0YS5sYWJlbH08L2E+ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIiBkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+YDtcbiAgICB9XG59XG5cbmNvbnN0IGZvcm1hdF9zZXJ2ZXJfbmFtZSA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgbGV0IGFsZXJ0X2xhYmVsID0gJydcbiAgICBpZiAoZGF0YS5pc19hbGVydGVkKSB7XG4gICAgICAgIGFsZXJ0X2xhYmVsID0gYDxpIGNsYXNzPSdmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUnIHN0eWxlPSdjb2xvcjogI0I5NEE0ODsnPjwvaT5gO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5pbl9tZW1vcnkpIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcgJiYgcm93RGF0YS5zcnZfcG9ydCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH0gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc306JHtyb3dEYXRhLnNydl9wb3J0LmxhYmVsfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH0gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc31gO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNyAmJiAgcm93RGF0YS5zcnZfcG9ydCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3NlcnZlcj0ke2RhdGEuaXB9JnZsYW49JHtkYXRhLnZsYW5faWR9XCI+JHtkYXRhLmxhYmVsfTwvYT4gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc30gPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiIGRhdGEtYnMtdG9nZ2xlPSd0b29sdGlwJyB0aXRsZT0nJz48aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvYT46PGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/cG9ydD0ke3Jvd0RhdGEuc3J2X3BvcnQuaWR9JnZsYW49JHtkYXRhLnZsYW5faWR9XCI+JHtyb3dEYXRhLnNydl9wb3J0LmxhYmVsfTwvYT5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9zZXJ2ZXI9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7ZGF0YS5sYWJlbH08L2E+ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIiBkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+YDtcblxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBmb3JtYXRfZmxvd3NfaWNvbiA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgbGV0IHVybCA9IGBgO1xuICAgIGxldCBhZGRfaG9zdCA9IGZhbHNlO1xuICAgIGlmKHByb3BzLmNvbnRleHQuaG9zdCAhPSBudWxsICYmIHByb3BzLmNvbnRleHQuaG9zdCAhPSBcIlwiIClcbiAgICAgICAgYWRkX2hvc3QgPSB0cnVlO1xuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSAxKSB7XG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2FwcGxpY2F0aW9uPSR7cm93RGF0YS5hcHBsaWNhdGlvbi5pZH1gO1xuICAgICAgICBpZiAoYWRkX2hvc3QpIHVybCA9IHVybCArIGAmaG9zdD1gK3Byb3BzLmNvbnRleHQuaG9zdDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMilcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/Y2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnZsYW49JHtyb3dEYXRhLmNsaWVudC52bGFuX2lkfWA7XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMylcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/c2VydmVyPSR7cm93RGF0YS5zZXJ2ZXIuaXB9JnZsYW49JHtyb3dEYXRhLnNlcnZlci52bGFuX2lkfWA7XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNClcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/Y2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnNlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkLmlkfWA7XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNSlcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/YXBwbGljYXRpb249JHtyb3dEYXRhLmFwcGxpY2F0aW9uLmlkfSZjbGllbnQ9JHtyb3dEYXRhLmNsaWVudC5pcH0mc2VydmVyPSR7cm93RGF0YS5zZXJ2ZXIuaXB9JnZsYW49JHtyb3dEYXRhLnZsYW5faWQuaWR9YDtcbiAgICBlbHNlIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA2KSB7XG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2Zsb3dfaW5mbz0ke3Jvd0RhdGEuaW5mby5pZH1gO1xuICAgICAgICBpZiAoYWRkX2hvc3QpIHVybCA9IHVybCArIGAmaG9zdD1gK3Byb3BzLmNvbnRleHQuaG9zdDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNykge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9jbGllbnQ9JHtyb3dEYXRhLmNsaWVudC5pcH0mc2VydmVyPSR7cm93RGF0YS5zZXJ2ZXIuaXB9JnZsYW49JHtyb3dEYXRhLnZsYW5faWQuaWR9JnNydl9wb3J0PSR7cm93RGF0YS5zcnZfcG9ydC5pZH1gO1xuICAgIH1cblxuICAgIHJldHVybiBgPGEgaHJlZj0ke3VybH0gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1pbmZvXCIgPjxpIGNsYXNzPSAnZmFzIGZhLXN0cmVhbSc+PC9pPjwvYT5gXG59XG5cbmNvbnN0IGZvcm1hdF9hcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBpZihyb3dEYXRhLmNvbmZpZGVuY2UgPT0gMCApXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsX3dpdGhfaWNvbnN9IDxzcGFuIGNsYXNzPVxcXCJiYWRnZSBiZy13YXJuaW5nXFxcIiB0aXRsZT1cXFwiIGArIHJvd0RhdGEuY29uZmlkZW5jZV9uYW1lICsgYFxcXCI+YCsgcm93RGF0YS5jb25maWRlbmNlX25hbWUgKyBgIDwvc3Bhbj5gXG4gICAgZWxzZSBpZiAocm93RGF0YS5jb25maWRlbmNlKVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbF93aXRoX2ljb25zfSA8c3BhbiBjbGFzcz1cXFwiYmFkZ2UgYmctc3VjY2Vzc1xcXCIgdGl0bGU9XFxcImArIHJvd0RhdGEuY29uZmlkZW5jZV9uYW1lICsgYCBcXFwiPiBgKyByb3dEYXRhLmNvbmZpZGVuY2VfbmFtZSArIGA8L3NwYW4+YFxuICAgIFxuICAgICAgICBcbn1cblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJhZ2dyZWdhdGVkX2xpdmVfZmxvd3NcIj4gICAgICAgICAgXG4gICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV90ZXN0XCJcblx0ICAgICAgIDp0YWJsZV9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2J1dHRvbnNcIlxuXHQgICAgICAgOmNvbHVtbnNfY29uZmlnPVwidGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcblx0ICAgICAgIDpkYXRhX3VybD1cInRhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG5cdCAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfZmlsdGVyc1wiXG5cdCAgICAgICA6ZW5hYmxlX3NlYXJjaD1cInRhYmxlX2NvbmZpZy5lbmFibGVfc2VhcmNoXCJcblx0ICAgICAgIDp0YWJsZV9jb25maWc9XCJ0YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gICAgPC9EYXRhdGFibGU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB1cmw6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgY29sdW1uc19jb25maWc6IEFycmF5XG59KTtcblxuY29uc3QgdGFibGVfY29uZmlnID0gcmVmKHt9KVxuY29uc3QgdGFibGVfdGVzdCA9IHJlZihudWxsKTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgc2V0X2RhdGF0YWJsZV9jb25maWcoKTtcbn0pO1xuXG5mdW5jdGlvbiBzZXRfZGF0YXRhYmxlX2NvbmZpZygpIHtcbiAgICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgICBcbiAgICBsZXQgcGFyYW1zID0geyBcblx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQsXHRcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgICAgICAgIHRhYmxlX3Rlc3QudmFsdWUucmVsb2FkKCk7XG5cdH1cbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcblx0dGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuXHRkYXRhX3VybDogYCR7cHJvcHMudXJsfT8ke3VybF9wYXJhbXN9YCxcblx0ZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB9O1xuICAgIFxuICAgIGxldCBjb2x1bW5zID0gW107XG4gICAgXG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IHByb3BzLmNvbHVtbnNfY29uZmlnO1xuICAgIHRhYmxlX2NvbmZpZy52YWx1ZSA9IGRlZmF1bHREYXRhdGFibGVDb25maWc7XG59XG4gICAgXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZFwiPlxuXG4gICAgICA8IS0tIFJ1bGUgSUQgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiIHYtc2hvdz1cIiFpc19vcGVuX2luX2FkZFwiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcucnVsZV9pZFwiKX19PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cIm5ld19ydWxlX2lkXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInJ1bGVfaWRcIj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPCEtLSBTb3VyY2UgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC02XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy5zb3VyY2VfdHlwZVwiKX19PC9sYWJlbD5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zb3VyY2VfdHlwZVwiXG5cdFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NvdXJjZV90eXBlKClcIlxuXHRcdFx0ICA6b3B0aW9ucz1cInR5cGVfYXJyYXlcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuc291cmNlXCIpfX08L2xhYmVsPlxuXHQgIDxkaXYgdi1pZj1cInNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlID09ICdpbnRlcmZhY2UnXCI+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZVwiXG5cdFx0XHQgIDpvcHRpb25zPVwiaW50ZXJmYWNlX2FycmF5XCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICA8L2Rpdj5cblx0ICA8ZGl2IHYtZWxzZT5cdCAgICBcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgOnBhdHRlcm49XCJzb3VyY2VfcmVnZXhcIiAgdi1tb2RlbD1cInNvdXJjZVwiPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8IS0tIERlc3QgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC02XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy5kZXN0X3R5cGVcIil9fTwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZGVzdF90eXBlXCJcblx0XHRcdCAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGVzdF90eXBlKClcIlxuXHRcdFx0ICA6b3B0aW9ucz1cInR5cGVfYXJyYXlcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVzdFwiKX19PC9sYWJlbD5cblx0ICA8ZGl2IHYtaWY9XCJzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUgPT0gJ2ludGVyZmFjZSdcIj5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9kZXN0X2ludGVyZmFjZVwiXG5cdFx0XHQgIDpvcHRpb25zPVwiaW50ZXJmYWNlX2FycmF5XCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0ICA8L2Rpdj5cblx0ICA8ZGl2IHYtZWxzZT5cdCAgICBcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgOnBhdHRlcm49XCJkZXN0X3JlZ2V4XCIgdi1tb2RlbD1cImRlc3RcIj5cblx0ICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPCEtLSBEaXJlY3Rpb24gLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGlyZWN0aW9uXCIpfX08L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2RpcmVjdGlvblwiXG5cdFx0XHQgIDpvcHRpb25zPVwiZGlyZWN0aW9uc1wiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDwhLS0gQWN0aW9uIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtMTJcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjdGlvblwiKX19PC9sYWJlbD5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9hY3Rpb25cIlxuXHRcdFx0ICA6b3B0aW9ucz1cImFjdGlvbnNcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cIiFpc192YWxpZF9zb3VyY2UgfHwgIWlzX3ZhbGlkX2Rlc3RcIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tidXR0b25fdGV4dH19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2VkaXQnLCAnYWRkJ10pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG59KTtcblxuY29uc3QgdGl0bGUgPSByZWYoXCJcIik7XG5cbmNvbnN0IHR5cGVfYXJyYXkgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy5pcFwiKSwgdmFsdWU6IFwiaXBcIiwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcuY2lkclwiKSwgdmFsdWU6IFwiY2lkclwiIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJpbnRlcmZhY2VcIiksIHZhbHVlOiBcImludGVyZmFjZVwiIH0sXG5dO1xuXG5sZXQgZGVmYXVsdF9kaXJlY3Rpb25fdmFsdWUgPSBcInNvdXJjZV90b19kZXN0XCI7XG5jb25zdCBkaXJlY3Rpb25zID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYmlkaXJlY3Rpb25hbFwiKSwgdmFsdWU6IFwiYmlkaXJlY3Rpb25hbFwiLCBiaWRpcmVjdGlvbmFsOiB0cnVlLCB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuc291cmNlX3RvX2Rlc3RcIiksIHZhbHVlOiBcInNvdXJjZV90b19kZXN0XCIsIGJpZGlyZWN0aW9uYWw6IGZhbHNlLCB9LFxuXTtcbmNvbnN0IHNlbGVjdGVkX2RpcmVjdGlvbiA9IHJlZih7fSk7XG5cbmxldCBkZWZhdWx0X2FjdGlvbl92YWx1ZSA9IFwiYWNjZXB0XCI7XG5jb25zdCBhY3Rpb25zID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWNjZXB0XCIpLCB2YWx1ZTogXCJhY2NlcHRcIiB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVueVwiKSwgdmFsdWU6IFwiZGVueVwiIH0sXG5dO1xuY29uc3Qgc2VsZWN0ZWRfYWN0aW9uID0gcmVmKHt9KTtcblxuY29uc3QgcnVsZV9pZCA9IHJlZigwKTtcbmNvbnN0IG5ld19ydWxlX2lkID0gcmVmKDApO1xuXG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfdHlwZSA9IHJlZih7fSk7XG5jb25zdCBzb3VyY2VfcmVnZXggPSByZWYoXCJcIik7XG5jb25zdCBzb3VyY2UgPSByZWYoXCJcIik7XG5cbmNvbnN0IHNlbGVjdGVkX2Rlc3RfdHlwZSA9IHJlZih7fSk7XG5jb25zdCBkZXN0X3JlZ2V4ID0gcmVmKFwiXCIpO1xuY29uc3QgZGVzdCA9IHJlZihcIlwiKTtcblxuY29uc3QgaW50ZXJmYWNlX2xpc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZWRnZS9pbnRlcmZhY2VzLmx1YWA7XG5sZXQgaW50ZXJmYWNlX2xpc3Q7XG5jb25zdCBpbnRlcmZhY2VfYXJyYXkgPSByZWYoW10pO1xuXG5jb25zdCBzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlID0gcmVmKHt9KTtcblxuY29uc3QgYnV0dG9uX3RleHQgPSByZWYoXCJcIik7XG5cbmNvbnN0IGlzX3ZhbGlkX3NvdXJjZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gaXNfdmFsaWQoc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsIHNvdXJjZS52YWx1ZSwgc291cmNlX3JlZ2V4LnZhbHVlKTtcbn0pO1xuXG5jb25zdCBpc192YWxpZF9kZXN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBpc192YWxpZChzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUsIGRlc3QudmFsdWUsIGRlc3RfcmVnZXgudmFsdWUpO1xufSk7XG5cbmNvbnN0IHNob3cgPSAocm93LCBkZWZhdWx0X2FjdGlvbikgPT4ge1xuICAgIGluaXQocm93LCBkZWZhdWx0X2FjdGlvbik7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgaXNfb3Blbl9pbl9hZGQgPSByZWYodHJ1ZSk7XG5cbmZ1bmN0aW9uIGluaXQocm93LCBkZWZhdWx0X2FjdGlvbikge1xuICAgIGlzX29wZW5faW5fYWRkLnZhbHVlID0gcm93ID09IG51bGw7XG4gICAgaWYgKGRlZmF1bHRfYWN0aW9uICE9IG51bGwpIHtcblx0ZGVmYXVsdF9hY3Rpb25fdmFsdWUgPSBkZWZhdWx0X2FjdGlvbi52YWx1ZTtcbiAgICB9XG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCBvcGVuIGluIGVkaXRcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0dGl0bGUudmFsdWUgPSBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLnRpdGxlX2VkaXRcIik7XG5cdGJ1dHRvbl90ZXh0LnZhbHVlID0gX2kxOG4oXCJlZGl0XCIpO1xuXHRzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZSA9IHR5cGVfYXJyYXkuZmluZCgocykgPT4gcy52YWx1ZSA9PSByb3cuc291cmNlLnR5cGUpO1xuXHRzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUgPSB0eXBlX2FycmF5LmZpbmQoKHMpID0+IHMudmFsdWUgPT0gcm93LmRlc3RpbmF0aW9uLnR5cGUpO1xuXHRzZWxlY3RlZF9kaXJlY3Rpb24udmFsdWUgPSBkaXJlY3Rpb25zLmZpbmQoKGQpID0+IGQuYmlkaXJlY3Rpb25hbCA9PSByb3cuYmlkaXJlY3Rpb25hbCk7XG5cdHNlbGVjdGVkX2FjdGlvbi52YWx1ZSA9IGFjdGlvbnMuZmluZCgoYSkgPT4gYS52YWx1ZSA9PSByb3cuYWN0aW9uKTtcblx0cnVsZV9pZC52YWx1ZSA9IHJvdy5ydWxlX2lkO1xuICAgICAgICBuZXdfcnVsZV9pZC52YWx1ZSA9IHJvdy5ydWxlX2lkO1xuICAgIH0gZWxzZSB7XG5cdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9hZGRcIik7XG5cdGJ1dHRvbl90ZXh0LnZhbHVlID0gX2kxOG4oXCJhZGRcIik7XG5cdGxldCBkZWZhdWx0X3R5cGUgPSB0eXBlX2FycmF5LmZpbmQoKHMpID0+IHMuZGVmYXVsdCA9PSB0cnVlKTtcblx0c2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUgPSBkZWZhdWx0X3R5cGU7XG5cdHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZSA9IGRlZmF1bHRfdHlwZTtcblx0c2VsZWN0ZWRfZGlyZWN0aW9uLnZhbHVlID0gZGlyZWN0aW9ucy5maW5kKChkKSA9PiBkLnZhbHVlID09IGRlZmF1bHRfZGlyZWN0aW9uX3ZhbHVlKTtcblx0c2VsZWN0ZWRfYWN0aW9uLnZhbHVlID0gYWN0aW9ucy5maW5kKChhKSA9PiBhLnZhbHVlICE9IGRlZmF1bHRfYWN0aW9uX3ZhbHVlKTtcbiAgICB9XG4gICAgY2hhbmdlX3NvdXJjZV90eXBlKHJvdyk7XG4gICAgY2hhbmdlX2Rlc3RfdHlwZShyb3cpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2Vfc291cmNlX3R5cGUocm93KSB7XG4gICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICBpZiAocm93ICE9IG51bGwpIHtcblx0dmFsdWUgPSByb3cuc291cmNlLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUudmFsdWUgPT0gXCJpbnRlcmZhY2VcIikge1xuXHRhd2FpdCBzZXRfaW50ZXJmYWNlX2FycmF5KCk7XG5cdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdCAgICBzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlLnZhbHVlID0gaW50ZXJmYWNlX2FycmF5LnZhbHVlLmZpbmQoKGkpID0+IGkudmFsdWUgPT0gdmFsdWUpO1xuXHR9IGVsc2Uge1xuXHQgICAgc2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZS52YWx1ZSA9IGludGVyZmFjZV9hcnJheS52YWx1ZVswXTtcblx0fVxuICAgIH0gZWxzZSB7XG5cdGlmIChyb3cgIT0gbnVsbCkge1xuXHQgICAgc291cmNlLnZhbHVlID0gcm93LnNvdXJjZS52YWx1ZTtcblx0fSBlbHNlIHtcblx0ICAgIHNvdXJjZS52YWx1ZSA9IFwiXCI7XG5cdH1cblx0c2V0X3JlZ2V4KHNvdXJjZV9yZWdleCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUudmFsdWUpO1xuICAgIH0gICAgXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9kZXN0X3R5cGUocm93KSB7XG4gICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICBpZiAocm93ICE9IG51bGwpIHtcblx0dmFsdWUgPSByb3cuZGVzdGluYXRpb24udmFsdWU7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUudmFsdWUgPT0gXCJpbnRlcmZhY2VcIikge1xuXHRhd2FpdCBzZXRfaW50ZXJmYWNlX2FycmF5KCk7XG5cdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdCAgICBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZSA9IGludGVyZmFjZV9hcnJheS52YWx1ZS5maW5kKChpKSA9PiBpLnZhbHVlID09IHZhbHVlKTtcblx0fSBlbHNlIHtcblx0ICAgIHNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlLnZhbHVlID0gaW50ZXJmYWNlX2FycmF5LnZhbHVlWzBdO1xuXHR9XG4gICAgfSBlbHNlIHtcblx0aWYgKHJvdyAhPSBudWxsKSB7XG5cdCAgICBkZXN0LnZhbHVlID0gcm93LmRlc3RpbmF0aW9uLnZhbHVlO1xuXHR9IGVsc2Uge1xuXHQgICAgZGVzdC52YWx1ZSA9IFwiXCI7XG5cdH1cblx0c2V0X3JlZ2V4KGRlc3RfcmVnZXgsIHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZS52YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc192YWxpZChzZWxlY3RlZF90eXBlLCB0ZXh0LCByZ190ZXh0KSB7XG4gICAgaWYgKHNlbGVjdGVkX3R5cGUudmFsdWUgPT0gXCJpbnRlcmZhY2VcIikge1xuXHRyZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZ190ZXh0KTtcbiAgICByZXR1cm4gcmVnZXgudGVzdCh0ZXh0KTtcbn1cblxubGV0IGlzX3NldF9pbnRlcmZhY2VfYXJyYXkgPSBmYWxzZTtcbmFzeW5jIGZ1bmN0aW9uIHNldF9pbnRlcmZhY2VfYXJyYXkoKSB7XG4gICAgaWYgKGlzX3NldF9pbnRlcmZhY2VfYXJyYXkgPT0gdHJ1ZSkgeyByZXR1cm47IH1cblx0aWYgKGludGVyZmFjZV9saXN0ID09IG51bGwpIHtcblx0ICAgIGludGVyZmFjZV9saXN0ID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGludGVyZmFjZV9saXN0X3VybCk7XG5cdH1cblx0bGV0IHJlc19pbnRlcmZhY2VfbGlzdCA9IGF3YWl0IGludGVyZmFjZV9saXN0O1xuXHRpbnRlcmZhY2VfYXJyYXkudmFsdWUgPSByZXNfaW50ZXJmYWNlX2xpc3QuZmlsdGVyKChpKSA9PiBpLnJvbGUgPT0gXCJsYW5cIikubWFwKChpKSA9PiB7XG5cdCAgICByZXR1cm4ge1xuXHRcdGxhYmVsOiBpLmxhYmVsLFxuXHRcdHZhbHVlOiBpLmlmbmFtZSxcblx0ICAgIH07XG5cdH0pO1xuICAgIGlzX3NldF9pbnRlcmZhY2VfYXJyYXkgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVnZXgocmcsIHR5cGUpIHtcbiAgICByZy52YWx1ZSA9IHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHR5cGUpO1xufVxuXG5jb25zdCBhcHBseSA9ICgpID0+IHtcbiAgICBsZXQgc3JjX3R5cGUgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS52YWx1ZTsgICAgXG4gICAgbGV0IHNyY192YWx1ZSA9IHNvdXJjZS52YWx1ZTtcbiAgICBpZiAoc3JjX3R5cGUgPT0gXCJpbnRlcmZhY2VcIikge1xuXHRzcmNfdmFsdWUgPSBzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlLnZhbHVlLnZhbHVlO1xuICAgIH1cbiAgICBsZXQgZHN0X3R5cGUgPSBzZWxlY3RlZF9kZXN0X3R5cGUudmFsdWUudmFsdWU7ICAgIFxuICAgIGxldCBkc3RfdmFsdWUgPSBkZXN0LnZhbHVlO1xuICAgIGlmIChkc3RfdHlwZSA9PSBcImludGVyZmFjZVwiKSB7XG5cdGRzdF92YWx1ZSA9IHNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlLnZhbHVlLnZhbHVlO1xuICAgIH1cbiAgICBsZXQgcG9saWN5ID0gc2VsZWN0ZWRfYWN0aW9uLnZhbHVlLnZhbHVlO1xuICAgIGxldCBiaWRpcmVjdGlvbmFsID0gc2VsZWN0ZWRfZGlyZWN0aW9uLnZhbHVlLnZhbHVlID09IFwiYmlkaXJlY3Rpb25hbFwiO1xuICAgIGxldCBvYmogPSB7XG5cdHNyY190eXBlLFxuXHRzcmNfdmFsdWUsXG5cdGRzdF90eXBlLFxuXHRkc3RfdmFsdWUsXG5cdHBvbGljeSxcblx0YmlkaXJlY3Rpb25hbCxcbiAgICB9O1xuICAgIGxldCBldmVudCA9IFwiYWRkXCI7XG4gICAgaWYgKGlzX29wZW5faW5fYWRkLnZhbHVlID09IGZhbHNlKSB7XG5cdG9iai5ydWxlX2lkID0gcnVsZV9pZC52YWx1ZTtcblx0b2JqLm5ld19ydWxlX2lkID0gbmV3X3J1bGVfaWQudmFsdWU7XG5cdGV2ZW50ID0gXCJlZGl0XCI7XG4gICAgfVxuICAgIFxuICAgIGVtaXQoZXZlbnQsIG9iaik7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cblxuICAgICAgPCEtLSBEZWZhdWx0IFBvbGljeSAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTEyXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZWZhdWx0IHBvbGljeVwiKX19PC9sYWJlbD5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9hY3Rpb25cIlxuXHRcdFx0ICA6b3B0aW9ucz1cImFjdGlvbnNcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYXBwbHknXSk7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0aXRsZSA9IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5LnRpdGxlXCIpO1xuXG5sZXQgZGVmYXVsdF9hY3Rpb25fdmFsdWUgPSBcImFjY2VwdFwiO1xuY29uc3QgYWN0aW9ucyA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjY2VwdFwiKSwgdmFsdWU6IFwiYWNjZXB0XCIgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlbnlcIiksIHZhbHVlOiBcImRlbnlcIiB9LFxuXTtcbmNvbnN0IHNlbGVjdGVkX2FjdGlvbiA9IHJlZih7fSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHtcbn07XG5cbmNvbnN0IHNob3cgPSAocG9saWN5KSA9PiB7XG4gICAgc2VsZWN0ZWRfYWN0aW9uLnZhbHVlID0gYWN0aW9ucy5maW5kKChhKSA9PiBhLnZhbHVlID09IHBvbGljeS52YWx1ZSk7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmZ1bmN0aW9uIGFwcGx5KCkge1xuICAgIGVtaXQoJ2FwcGx5Jywgc2VsZWN0ZWRfYWN0aW9uLnZhbHVlLnZhbHVlKTtcbiAgICBjbG9zZSgpO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbiAgLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJtYi0yXCI+XG4gIFxuICA8aDI+e3sgX2kxOG4oXCJuZWRnZS5ydWxlc19jb25maWdfdGl0bGVcIikgfX08L2gyPlxuICA8YnIgLz5cbiAgPGg1IGNsYXNzPVwiZC1pbmxpbmUtYmxvY2tcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVmYXVsdCBwb2xpY3lcIil9fVxuICAgIDxzcGFuIHYtaWY9XCJkZWZhdWx0X3BvbGljeT8udmFsdWUgPT0gJ2FjY2VwdCdcIiBzdHlsZT1cImNvbG9yOmdyZWVuO1wiPlxuICAgICAge3sgZGVmYXVsdF9wb2xpY3k/LmxhYmVsIH19XG4gICAgPC9zcGFuPlxuICAgIDxzcGFuIHYtaWY9XCJkZWZhdWx0X3BvbGljeT8udmFsdWUgPT0gJ2RlbnknXCIgc3R5bGU9XCJjb2xvcjpyZWQ7XCI+XG4gICAgICB7eyBkZWZhdWx0X3BvbGljeT8ubGFiZWwgfX1cbiAgICA8L3NwYW4+XG5cbiAgICA8c21hbGw+PGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDAuNXJlbTtcIiBAY2xpY2s9XCJzaG93X21vZGFsX2NoYW5nZV9wb2xpY3lcIj48aSBjbGFzcz1cImZhcyBmYS1jb2dcIj48L2k+PC9hPjwvc21hbGw+XG4gIDwvaDU+XG48L2Rpdj5cblxuPGRpdiBpZD1cImFnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiPlxuICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX3J1bGVzXCJcblx0ICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcblx0ICAgICA6Y29sdW1uc19jb25maWc9XCJ0YWJsZV9jb25maWcuY29sdW1uc19jb25maWdcIlxuXHQgICAgIDpkYXRhX3VybD1cInRhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG5cdCAgICAgOmZpbHRlcl9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2ZpbHRlcnNcIlxuXHQgICAgIDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuXHQgICAgIDp0YWJsZV9jb25maWc9XCJ0YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gIDwvRGF0YXRhYmxlPlxuPC9kaXY+XG48TW9kYWxBZGRSdWxlQ29uZmlnIHJlZj1cIm1vZGFsX2FkZF9ydWxlX2NvbmZpZ1wiIEBhZGQ9XCJhZGRfcnVsZVwiIEBlZGl0PVwiZWRpdF9ydWxlXCI+PC9Nb2RhbEFkZFJ1bGVDb25maWc+XG48TW9kYWxDaGFuZ2VEZWZhdWx0UG9saWN5IHJlZj1cIm1vZGFsX2NoYW5nZV9kZWZhdWx0X3BvbGljeVwiIEBhcHBseT1cInNldF9kZWZhdWx0X3BvbGljeVwiID48L01vZGFsQ2hhbmdlRGVmYXVsdFBvbGljeT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRSdWxlQ29uZmlnIH0gZnJvbSBcIi4vbW9kYWwtbmVkZ2UtYWRkLXJ1bGUtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbENoYW5nZURlZmF1bHRQb2xpY3kgfSBmcm9tIFwiLi9tb2RhbC1uZWRnZS1jaGFuZ2UtZGVmYXVsdC1wb2xpY3kudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0aW1lb3V0X2RlbGV0ZSA9IDEgKiA1MDA7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHVybDogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgY29sdW1uc19jb25maWc6IEFycmF5XG59KTtcblxuY29uc3QgdGFibGVfY29uZmlnID0gcmVmKHt9KTtcbmNvbnN0IHRhYmxlX3J1bGVzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWRkX3J1bGVfY29uZmlnID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5ID0gcmVmKG51bGwpO1xuY29uc3QgZGVmYXVsdF9wb2xpY3kgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBzZXRfZGF0YXRhYmxlX2NvbmZpZygpO1xuICAgIGxvYWRfZGVmYXVsdF9wb2xpY3koKTtcbn0pO1xuXG5mdW5jdGlvbiBlZGl0X3J1bGUocnVsZSkgeyAgICBcbiAgICBjb25zdCBlZGl0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9lZGl0L25lZGdlL3BvbGljeS9ydWxlLmx1YWA7XG4gICAgc2V0X3J1bGUocnVsZSwgZWRpdF91cmwpO1xufVxuXG5mdW5jdGlvbiBhZGRfcnVsZShydWxlKSB7XG4gICAgY29uc3QgYWRkX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9hZGQvbmVkZ2UvcG9saWN5L3J1bGUubHVhYDtcbiAgICBzZXRfcnVsZShydWxlLCBhZGRfdXJsKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9kZWZhdWx0X3BvbGljeShwb2xpY3kpIHtcbiAgICBpZiAocG9saWN5ID09IG51bGwpIHtcblx0Y29uc3QgZ2V0X3BvbGljeV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L25lZGdlL3BvbGljeS9kZWZhdWx0Lmx1YWA7XG5cdGxldCBwb2xpY3lfcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGdldF9wb2xpY3lfdXJsKTtcblx0cG9saWN5ID0gcG9saWN5X3Jlcy5kZWZhdWx0X3BvbGljeTtcbiAgICB9XG4gICAgaWYgKHBvbGljeSA9PSBcImFjY2VwdFwiKSB7XG5cdGRlZmF1bHRfcG9saWN5LnZhbHVlID0ge1xuXHQgICAgdmFsdWU6IHBvbGljeSxcblx0ICAgIGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjY2VwdFwiKSxcblx0fTtcbiAgICB9IGVsc2Uge1xuXHRkZWZhdWx0X3BvbGljeS52YWx1ZSA9IHtcblx0ICAgIHZhbHVlOiBwb2xpY3ksXG5cdCAgICBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZW55XCIpLFxuXHR9OyAgICBcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9kZWZhdWx0X3BvbGljeShwb2xpY3kpIHtcbiAgICBjb25zdCBzZXRfcG9saWN5X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9zZXQvbmVkZ2UvcG9saWN5L2RlZmF1bHQubHVhYDtcbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IGRlZmF1bHRfcG9saWN5OiBwb2xpY3ksIGNzcmY6IHByb3BzLmNzcmZ9KTtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHNldF9wb2xpY3lfdXJsLCB7IG1ldGhvZDogXCJwb3N0XCIsIGhlYWRlcnMsIGJvZHl9KTtcbiAgICBsb2FkX2RlZmF1bHRfcG9saWN5KHBvbGljeSk7XG4gICAgcmVmcmVzaF90YWJsZSgpOyAgICBcbn1cblxuZnVuY3Rpb24gc2V0X3J1bGUocnVsZSwgdXJsKSB7XG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAuLi5ydWxlLCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgXG4gICAgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6IFwicG9zdFwiLCBoZWFkZXJzLCBib2R5fSk7XG4gICAgcmVmcmVzaF90YWJsZSgpOyAgICBcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9jaGFuZ2VfcG9saWN5KCkgeyAgICBcbiAgICBtb2RhbF9jaGFuZ2VfZGVmYXVsdF9wb2xpY3kudmFsdWUuc2hvdyhkZWZhdWx0X3BvbGljeS52YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHNldF9kYXRhdGFibGVfY29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICAgIFxuICAgIGxldCBwYXJhbXMgPSB7IFxuXHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuaWZpZCxcdFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBcbiAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG5cdHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG5cdGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcblx0YWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuXHQgICAgcmVmcmVzaF90YWJsZSgpO1xuICAgICAgICAgICAgLy8gdGFibGVfcnVsZXMudmFsdWUucmVsb2FkKCk7XG5cdH1cbiAgICB9LCB7XG5cdHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG5cdGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcblx0YWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBtb2RhbF9hZGRfcnVsZV9jb25maWcudmFsdWUuc2hvdyhudWxsLCBkZWZhdWx0X3BvbGljeS52YWx1ZSk7XG5cdH1cbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcblx0dGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuXHRkYXRhX3VybDogYCR7cHJvcHMudXJsfT8ke3VybF9wYXJhbXN9YCxcblx0ZW5hYmxlX3NlYXJjaDogZmFsc2UsXG4gICAgfTtcbiAgICBcbiAgICBsZXQgY29sdW1ucyA9IFtcblx0eyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcucnVsZV9pZFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3J1bGVfaWQnLCBkYXRhOiAncnVsZV9pZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG5cdH0sIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnNvdXJjZVwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3NvdXJjZScsIGRhdGE6ICdzb3VyY2UnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgcm93RGF0YSkge1xuXHRcdGlmICh2YWx1ZS5sYWJlbCAhPSBudWxsICYmIHZhbHVlLmxhYmVsICE9IFwiXCIpIHtcblx0XHQgICAgcmV0dXJuIHZhbHVlLmxhYmVsO1xuXHRcdH0gXG5cdFx0cmV0dXJuIHZhbHVlLnZhbHVlO1xuXHQgICAgfVxuXHR9LCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZXN0XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnZGVzdCcsIGRhdGE6ICdkZXN0aW5hdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCByb3dEYXRhKSB7XG5cdFx0aWYgKHZhbHVlLmxhYmVsICE9IG51bGwgJiYgdmFsdWUubGFiZWwgIT0gXCJcIikge1xuXHRcdCAgICByZXR1cm4gdmFsdWUubGFiZWw7XG5cdFx0fSBcblx0XHRyZXR1cm4gdmFsdWUudmFsdWU7XG5cdCAgICB9XG5cdH0sIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRpcmVjdGlvblwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2JpZGlyZWN0aW9uYWwnLCBkYXRhOiAnYmlkaXJlY3Rpb25hbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCByb3dEYXRhKSB7XG5cdFx0aWYgKHZhbHVlID09IHRydWUpIHtcblx0XHQgICAgcmV0dXJuIF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYmlkaXJlY3Rpb25hbFwiKTtcblx0XHR9IFxuXHRcdHJldHVybiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLnNvdXJjZV90b19kZXN0XCIpO1xuXHQgICAgfVxuXHR9LCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY3Rpb25cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdhY3Rpb24nLCBkYXRhOiAnYWN0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24odmFsdWUsIHR5cGUsIHJvd0RhdGEpIHtcblx0XHRsZXQgY29sb3IgPSBcInJlZFwiO1xuXHRcdGxldCBuYW1lID0gX2kxOG4oYG5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlbnlgKTtcblx0XHRpZiAodmFsdWUgPT0gXCJhY2NlcHRcIikge1xuXHRcdCAgICBjb2xvciA9IFwiZ3JlZW5cIjtcblx0XHQgICAgbmFtZSA9ICBfaTE4bihgbmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWNjZXB0YCk7XG5cdFx0fVxuXHRcdHJldHVybiBgPHNwYW4gc3R5bGU9XCJjb2xvcjoke2NvbG9yfTtcIj4ke25hbWV9PC9zcGFuPmA7XG5cdCAgICB9XG5cdH1cbiAgICBdO1xuICAgIGxldCB3cmFwX2NvbHVtbnNfY29uZmlnID0gY29sdW1ucy5tYXAoKGMpID0+IGMpO1xuICAgIC8vIGxldCB3cmFwX2NvbHVtbnNfY29uZmlnID0gcHJvcHMuY29sdW1uc19jb25maWcubWFwKChjKSA9PiBjKTtcbiAgICB3cmFwX2NvbHVtbnNfY29uZmlnLnB1c2goeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH0pO1xuICAgIFxuICAgIGRlZmF1bHREYXRhdGFibGVDb25maWcuY29sdW1uc19jb25maWcgPSB3cmFwX2NvbHVtbnNfY29uZmlnO1xuICAgIHRhYmxlX2NvbmZpZy52YWx1ZSA9IGRlZmF1bHREYXRhdGFibGVDb25maWc7XG59XG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcbiAgICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdGhhbmRsZXJJZDogXCJkZWxldGVfaG9zdFwiLFx0ICBcblx0b25DbGljazogKCkgPT4ge1xuXHQgICAgZGVsZXRlX3J1bGUocm93RGF0YSk7XG5cdH0sXG4gICAgfTtcbiAgICBcbiAgICBsZXQgZWRpdF9oYW5kbGVyID0ge1xuXHRoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsXG5cdG9uQ2xpY2s6ICgpID0+IHtcblx0ICAgIG1vZGFsX2FkZF9ydWxlX2NvbmZpZy52YWx1ZS5zaG93KHJvd0RhdGEpO1xuXHR9LFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdHsgY2xhc3M6IGBidG4tc2Vjb25kYXJ5YCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSB9LFxuXHR7IGNsYXNzOiBgYnRuLWRhbmdlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZGVsZXRlX3J1bGVcIiwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpIH0sXG4gICAgXSk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfcnVsZShydWxlKSB7XG4gICAgY29uc3QgYWRkX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvbmVkZ2UvcG9saWN5L3J1bGUubHVhYDtcbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IHJ1bGVfaWQ6IHJ1bGUucnVsZV9pZCwgY3NyZjogcHJvcHMuY3NyZn0pO1xuICAgIFxuICAgIG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChhZGRfdXJsLCB7IG1ldGhvZDogXCJwb3N0XCIsIGhlYWRlcnMsIGJvZHl9KTtcbiAgICByZWZyZXNoX3RhYmxlKCk7ICAgIFxufVxuXG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXHRudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuIFx0Ly8gdGFibGVfcnVsZXMudmFsdWUucmVsb2FkKCk7XG4gICAgfSwgdGltZW91dF9kZWxldGUpO1xufVxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IHRpdGxlIH19PC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJhcHBsaWNhdGlvbl9pZFwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGhpZGRlbj5cblxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc19lZGl0X3BhZ2UgPT0gZmFsc2VcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiYXBwX25hbWVcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImFwcGxpY2F0aW9uX25hbWVcIiBAaW5wdXQ9XCJjaGVja192YWxpZGF0aW9uXCJcbiAgICAgICAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNhdGVnb3J5XCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC04XCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfY2F0ZWdvcnlcIiA6b3B0aW9ucz1cImNhdGVnb3J5X2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2F0ZWdvcnlfY3VzdG9tX3J1bGVcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOFwiPlxuICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cImZvcm0tY29udHJvbFwiIEBpbnB1dD1cImNoZWNrX3ZhbGlkYXRpb25cIiA6cGxhY2Vob2xkZXI9XCJjb21tZW50XCIgcm93cz1cIjZcIiB2LW1vZGVsPVwiY3VzdG9tX3J1bGVzXCJcbiAgICAgICAgICAgIHNwZWxsY2hlY2s9XCJmYWxzZVwiPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICA8L05vdGVMaXN0PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc19lZGl0X3BhZ2UgPT0gZmFsc2VcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGRcIj57eyBfaTE4bignYWRkJykgfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiPnt7IF9pMThuKCdhcHBseScpIH19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCddKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSlcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBkaXNhYmxlX2FkZCA9IHJlZih0cnVlKVxubGV0IHRpdGxlID0gcmVmKGkxOG4oJ2FkZF9hcHBsaWNhdGlvbicpKTtcbmNvbnN0IGNvbW1lbnQgPSByZWYoaTE4bignZGV0YWlscy5jdXN0b21fcnVsZXNfcGxhY2Vob2xkZXInKSk7XG5jb25zdCBzZWxlY3RlZF9jYXRlZ29yeSA9IHJlZih7fSk7XG5jb25zdCBjYXRlZ29yeV9saXN0ID0gcmVmKFtdKTtcbmNvbnN0IGN1c3RvbV9ydWxlcyA9IHJlZignJylcbmNvbnN0IGFwcGxpY2F0aW9uX25hbWUgPSByZWYoJycpXG5jb25zdCBhcHBsaWNhdGlvbl9pZCA9IHJlZihudWxsKVxuXG5jb25zdCBsYXN0X2FwcGxpY2F0aW9uID0gcmVmKHt9KVxuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuZWFjaF9ob3N0X3NlcGFyYXRlX2xpbmVcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuYWxsb3dlZF9ydWxlc1wiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5pcF9hZGRyZXNzXCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLmlwX2FkZHJlc3NfcG9ydFwiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5wb3J0XCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLnBvcnRfcmFuZ2VcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuaG9zdF9kb21haW5cIilcbl1cblxuY29uc3Qgc2hvd2VkID0gKCkgPT4geyB9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGlmaWQ6IFN0cmluZyxcbn0pO1xuXG5mdW5jdGlvbiByZXNldF9tb2RhbF9mb3JtKCkge1xuICBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlID0gJyc7XG4gIHNlbGVjdGVkX2NhdGVnb3J5LnZhbHVlID0gY2F0ZWdvcnlfbGlzdC52YWx1ZVswXTtcbiAgY3VzdG9tX3J1bGVzLnZhbHVlID0gJyc7XG59XG5cbmNvbnN0IGNoZWNrX3ZhbGlkYXRpb24gPSAoKSA9PiB7XG4gIGlmIChjaGVja19hcHBsaWNhdGlvbl9uYW1lKCkgPT0gdHJ1ZSAmJiBjaGVja19jdXN0b21fcnVsZXMoKSA9PSB0cnVlKVxuICAgIGRpc2FibGVfYWRkLnZhbHVlID0gZmFsc2VcbiAgZWxzZVxuICAgIGRpc2FibGVfYWRkLnZhbHVlID0gdHJ1ZVxufVxuXG5jb25zdCBjaGVja19hcHBsaWNhdGlvbl9uYW1lID0gKCkgPT4ge1xuICByZXR1cm4gKC9eW0EtWmEtejAtOV0qJC8udGVzdChhcHBsaWNhdGlvbl9uYW1lLnZhbHVlKSk7XG59XG5cbmNvbnN0IGNoZWNrX2N1c3RvbV9ydWxlcyA9ICgpID0+IHtcbiAgbGV0IGNoZWNrID0gdHJ1ZVxuXG4gIGxldCBydWxlcyA9IGN1c3RvbV9ydWxlcy52YWx1ZS5zcGxpdChcIlxcblwiKTtcbiAgcnVsZXMuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgIGNoZWNrID0gY2hlY2sgJiYgKC8qIHRjcDoxMTAwICovKC9eKCh0Y3B8dWRwKTooNjU1M1swLTVdfDY1NVswLTJdWzAtOV1cXGR8NjVbMC00XShcXGQpezJ9fDZbMC00XShcXGQpezN9fFsxLTVdKFxcZCl7NH18WzEtOV0oXFxkKXswLDN9KSkkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIHRjcDoxMDAwLTEwMDIqLygvXigodGNwfHVkcCk6KDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSktKDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSkpJC8udGVzdChydWxlKSkgfHxcbi8vICAgICAgICAgICAgICAgICAgICAgICgvXigoPyEuKiApLiopJC8udGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBpcDoxLjEuMS4xICovKC9eKGlwKTooMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogaXA6MS4xLjEuMToxMDEwICovKC9eKGlwKTooMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KTooNjU1M1swLTVdfDY1NVswLTJdWzAtOV1cXGR8NjVbMC00XShcXGQpezJ9fDZbMC00XShcXGQpezN9fFsxLTVdKFxcZCl7NH18WzEtOV0oXFxkKXswLDN9KSQvLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogaG9zdDpnb29nbGUgKi8oL14oKGhvc3QpOlthLXpBLVowLTldKykkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIGhvc3Q6Z29vZ2xlLmNvbSAqLygvKGhvc3QpOlthLXpBLVowLTldLlthLXpBLVpdL2cudGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBFbXB0eSBzdHJpbmcgKi9ydWxlID09PSAnJyk7XG4gIH0pXG5cbiAgcmV0dXJuIGNoZWNrXG59XG5cbmNvbnN0IHBvcHVsYXRlX21vZGFsX2Zvcm0gPSAocm93KSA9PiB7XG4gIGxldCBlZGl0X3Jvd19jYXRlZ29yeSA9IG51bGw7XG4gIGNhdGVnb3J5X2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmKGl0ZW0uaWQgPT0gcm93LmNhdGVnb3J5X2lkKSB7XG4gICAgICBlZGl0X3Jvd19jYXRlZ29yeSA9IGl0ZW07XG4gICAgfVxuICB9KTtcblxuICBzZWxlY3RlZF9jYXRlZ29yeS52YWx1ZSA9IGVkaXRfcm93X2NhdGVnb3J5O1xuICBjdXN0b21fcnVsZXMudmFsdWUgPSByb3cuY3VzdG9tX3J1bGVzPy5yZXBsYWNlKCcsJywgJ1xcbicpO1xufVxuXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIGlzX2VkaXRfcGFnZS52YWx1ZSA9IGZhbHNlO1xuICB0aXRsZS52YWx1ZSA9IGkxOG4oJ2FkZF9hcHBsaWNhdGlvbicpO1xuXG4gIGlmIChyb3cgIT0gbnVsbCkge1xuICAgIGFwcGxpY2F0aW9uX2lkLnZhbHVlID0gcm93LmFwcGxpY2F0aW9uX2lkO1xuICAgIGFwcGxpY2F0aW9uX25hbWUudmFsdWUgPSByb3cuYXBwbGljYXRpb247XG4gICAgaXNfZWRpdF9wYWdlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aXRsZS52YWx1ZSA9IGAke2kxOG4oJ2VkaXRfYXBwbGljYXRpb24nKX06ICR7YXBwbGljYXRpb25fbmFtZS52YWx1ZX1gO1xuICAgIHBvcHVsYXRlX21vZGFsX2Zvcm0ocm93KTtcbiAgfVxuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG4gIGNoZWNrX3ZhbGlkYXRpb24oKTtcbn07XG5cbmNvbnN0IGFkZF8gPSAoKSA9PiB7XG4gIGVtaXQoJ2FkZCcsIHtcbiAgICBsN19wcm90b19pZDogYXBwbGljYXRpb25faWQudmFsdWUsXG4gICAgcHJvdG9jb2xfYWxpYXM6IGFwcGxpY2F0aW9uX25hbWUudmFsdWUsXG4gICAgY2F0ZWdvcnk6IHNlbGVjdGVkX2NhdGVnb3J5LnZhbHVlLmlkLFxuICAgIGN1c3RvbV9ydWxlczogY3VzdG9tX3J1bGVzLnZhbHVlLFxuICAgIGlzX2VkaXRfcGFnZTogaXNfZWRpdF9wYWdlLnZhbHVlLFxuICB9KTtcblxuICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5jb25zdCBmb3JtYXRfY2F0ZWdvcnlfbGlzdCA9IChsaXN0KSA9PiB7XG4gIGxldCBmb3JtYXR0ZWRfbGlzdCA9IFtdO1xuICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBmb3JtYXR0ZWRfbGlzdC5wdXNoKHtcbiAgICAgIGlkOiBpdGVtLmNhdF9pZCxcbiAgICAgIGxhYmVsOiBpdGVtLm5hbWUsXG4gICAgICBhcHBfbGlzdDogaXRlbS5hcHBfbGlzdFxuXG4gICAgfSlcbiAgfSlcblxuICAvLyBzb3J0IGZvcm1hdHRlZCBjYXRlZ29yaWVzO1xuICBmb3JtYXR0ZWRfbGlzdCA9IGZvcm1hdHRlZF9saXN0LnNvcnQoKGEsIGIpID0+IHtcblx0XHQgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG5cdFx0ICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG5cdFx0ICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuICB9KTtcblxuICByZXR1cm4gZm9ybWF0dGVkX2xpc3Q7XG59XG5cbmNvbnN0IGxvYWRDYXRlZ29yeUxpc3QgPSAobGlzdCkgPT4ge1xuICBjYXRlZ29yeV9saXN0LnZhbHVlID0gZm9ybWF0X2NhdGVnb3J5X2xpc3QobGlzdCk7XG59O1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHsgfSlcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UsIGxvYWRDYXRlZ29yeUxpc3QgfSk7XG5cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+PC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiYXBwbGljYXRpb25fbmFtZVwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGhpZGRlbj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyB0aXRsZSB9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT57eyBib2R5IH19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiX3JlbW92ZVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignZGVsZXRlJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsncmVtb3ZlJ10pO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGFwcGxpY2F0aW9uX25hbWUgPSByZWYobnVsbClcblxubGV0IHRpdGxlID0gcmVmKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLmRlbGV0ZV9hcHAnKSk7XG5jb25zdCBib2R5ID0gaTE4bignY3VzdG9tX2NhdGVnb3JpZXMuZGVsZXRlX2FwcF9jb25maXJtJylcblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgaWYocm93ICE9IG51bGwpIHtcbiAgICBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlID0gcm93LmFwcGxpY2F0aW9uO1xuICAgIHRpdGxlLnZhbHVlID0gYCR7aTE4bignY3VzdG9tX2NhdGVnb3JpZXMuZGVsZXRlX2FwcCcpfTogJHthcHBsaWNhdGlvbl9uYW1lLnZhbHVlfWA7XG4gIH1cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgX3JlbW92ZSA9ICgpID0+IHtcbiAgZW1pdCgncmVtb3ZlJywgeyBcbiAgICBwcm90b2NvbF9hbGlhczogYXBwbGljYXRpb25fbmFtZS52YWx1ZSxcbiAgfSk7XG4gICAgXG4gIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT4gICAgXG4gIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG5cbiAgPGRpdiB2LXNob3c9XCIhaGlkZGVuXCIgcmVmPVwidXBkYXRlX21lc3NhZ2VcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj57eyBtZXNzYWdlIH19PC9kaXY+XG5cbiAgPE1vZGFsQWRkQXBwbGljYXRpb24gcmVmPVwibW9kYWxfYWRkX2FwcGxpY2F0aW9uXCJcbiAgICA6Y2F0ZWdvcnlfbGlzdD1cImNhdGVnb3J5X2xpc3RcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDppZmlkPVwiaWZpZFwiXG4gICAgQGFkZD1cIl9hZGRcIj5cbiAgPC9Nb2RhbEFkZEFwcGxpY2F0aW9uPlxuICA8TW9kYWxEZWxldGVBcHBsaWNhdGlvbiByZWY9XCJtb2RhbF9kZWxldGVfYXBwbGljYXRpb25cIlxuICAgIEByZW1vdmU9XCJfcmVtb3ZlXCI+XG4gIDwvTW9kYWxEZWxldGVBcHBsaWNhdGlvbj5cblxuICA8RGF0YXRhYmxlIHJlZj1cImFwcGxpY2F0aW9uc190YWJsZVwiXG4gICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLnRhYmxlX2J1dHRvbnNcIlxuICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUuY29sdW1uc19jb25maWdcIlxuICAgIDpkYXRhX3VybD1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUuZGF0YV91cmxcIlxuICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS5lbmFibGVfc2VhcmNoXCJcbiAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS50YWJsZV9jb25maWdcIj5cbiAgPC9EYXRhdGFibGU+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uVW5tb3VudGVkLCBvbkJlZm9yZU1vdW50LCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRBcHBsaWNhdGlvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1hcHBsaWNhdGlvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVBcHBsaWNhdGlvbiB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1hcHBsaWNhdGlvbi52dWVcIjtcblxuY29uc3QgYXBwbGljYXRpb25zX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2FwcGxpY2F0aW9uID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWRkX2FwcGxpY2F0aW9uID0gcmVmKG51bGwpO1xuY29uc3QgY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZSA9IHJlZih7fSk7XG5jb25zdCBjYXRlZ29yeV9saXN0ID0gcmVmKFtdKTtcbmNvbnN0IHVwZGF0ZV9tZXNzYWdlID0gcmVmKG51bGwpO1xuY29uc3QgaGlkZGVuID0gcmVmKHRydWUpO1xubGV0IG1lc3NhZ2UgPSAnJ1xuXG5jb25zdCBjYXRlZ29yeV9saXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbDcvY2F0ZWdvcnkvY29uc3RzLmx1YWBcbmNvbnN0IGFkZF9hcHBsaWNhdGlvbl91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZWRpdC9hcHBsaWNhdGlvbi9hcHBsaWNhdGlvbi5sdWFgXG5jb25zdCBkZWxldGVfYXBwbGljYXRpb25fdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9hcHBsaWNhdGlvbi9hcHBsaWNhdGlvbi5sdWFgXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGlmaWQ6IFN0cmluZyxcbiAgaGFzX3Byb3Rvc19maWxlOiBCb29sZWFuLFxufSlcblxuY29uc3QgX3JlbW92ZSA9IGFzeW5jIChwYXJhbXMpID0+IHsgIFxuICBjb25zdCB1cmxfcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLnBhZ2VfY3NyZixcbiAgICBpZmlkOiBwcm9wcy5pZmlkXG4gIH1cblxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZGVsZXRlX2FwcGxpY2F0aW9uX3VybCwge1xuICAgIC4uLnVybF9wYXJhbXMsXG4gICAgLi4ucGFyYW1zXG4gIH0pXG5cbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgc2hvd19tZXNzYWdlKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLnN1Y2Nlc2Z1bGx5X3JlbW92ZWQnKSk7XG4gIH0pO1xuXG4gIHJlbG9hZF90YWJsZSgpO1xufVxuXG5jb25zdCBvcGVuX2RlbGV0ZV9tb2RhbCA9IChyb3cpID0+IHtcbiAgbW9kYWxfZGVsZXRlX2FwcGxpY2F0aW9uLnZhbHVlLnNob3cocm93KTtcbn1cblxuY29uc3QgX2FkZCA9IGFzeW5jIChwYXJhbXMpID0+IHtcbiAgY29uc3QgaXNfZWRpdF9wYWdlID0gcGFyYW1zLmlzX2VkaXRfcGFnZTtcbiAgcGFyYW1zLmlzX2VkaXRfcGFnZSA9IG51bGw7XG5cbiAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5wYWdlX2NzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZFxuICB9XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGFkZF9hcHBsaWNhdGlvbl91cmwsIHtcbiAgICAuLi51cmxfcGFyYW1zLFxuICAgIC4uLnBhcmFtc1xuICB9KVxuICBcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgaWYoc3RhdHVzID09ICdzdWNjZXNzJykge1xuICAgICAgaWYoaXNfZWRpdF9wYWdlKVxuICAgICAgICBzaG93X21lc3NhZ2UoaTE4bignY3VzdG9tX2NhdGVnb3JpZXMuc3VjY2VzZnVsbHlfZWRpdGVkJykpO1xuICAgICAgZWxzZVxuICAgICAgICBzaG93X21lc3NhZ2UoaTE4bignY3VzdG9tX2NhdGVnb3JpZXMuc3VjY2VzZnVsbHlfYWRkZWQnKSk7XG4gICAgfVxuICB9KTtcblxuICByZWxvYWRfdGFibGUoKTtcbn1cblxuY29uc3Qgb3Blbl9hZGRfbW9kYWwgPSAocm93KSA9PiB7XG4gIG1vZGFsX2FkZF9hcHBsaWNhdGlvbi52YWx1ZS5zaG93KHJvdyk7XG59XG5cbmNvbnN0IHNob3dfbWVzc2FnZSA9IChfbWVzc2FnZSkgPT4ge1xuICBtZXNzYWdlID0gX21lc3NhZ2U7XG4gIGhpZGRlbi52YWx1ZSA9IGZhbHNlO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBoaWRkZW4udmFsdWUgPSB0cnVlO1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9LCA0MDAwKTtcbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICBhcHBsaWNhdGlvbnNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG5cbmNvbnN0IGxvYWRfY2F0ZWdvcmllcyA9IGFzeW5jICgpID0+IHtcbiAgYXdhaXQgJC5nZXQoY2F0ZWdvcnlfbGlzdF91cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBjYXRlZ29yeV9saXN0LnZhbHVlID0gcnNwLnJzcDtcbiAgfSk7XG4gIG1vZGFsX2FkZF9hcHBsaWNhdGlvbi52YWx1ZS5sb2FkQ2F0ZWdvcnlMaXN0KGNhdGVnb3J5X2xpc3QudmFsdWUpO1xufVxuXG5jb25zdCBzZWFyY2ggPSAoZmlsdGVyX2FwcCkgPT4ge1xuICBhcHBsaWNhdGlvbnNfdGFibGUudmFsdWUuc2VhcmNoX3ZhbHVlKGZpbHRlcl9hcHApO1xufVxuICAgIFxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xufSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGxvYWRfY2F0ZWdvcmllcygpO1xuICBjb25zdCBmaWx0ZXJfYXBwID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJhcHBsaWNhdGlvblwiKTtcbiAgaWYoZmlsdGVyX2FwcCkge1xuICAgIHNlYXJjaChmaWx0ZXJfYXBwKTtcbiAgfVxufSlcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcbiAgbGV0IGVkaXRfaGFuZGxlciA9IHtcbiAgICBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgb3Blbl9hZGRfbW9kYWwocm93RGF0YSk7XG4gICAgfSxcbiAgfVxuXG4gIGNvbnN0IGFjdGlvbnMgPSBbXG4gICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBlZGl0X2hhbmRsZXIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSB9LFxuICBdXG5cbiAgaWYocm93RGF0YS5pc19jdXN0b20pIHtcbiAgICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiZGVsZXRlX3J1bGVcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgb3Blbl9kZWxldGVfbW9kYWwocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cbiAgXG4gICAgYWN0aW9ucy5wdXNoKCAgICBcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZGVsZXRlX2hhbmRsZXIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSB9LFxuICAgIClcbiAgfVxuICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhhY3Rpb25zKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICBpZihwcm9wcy5oYXNfcHJvdG9zX2ZpbGUpIHtcbiAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuICAgICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9wZW5fYWRkX21vZGFsKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICAgIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9hcHBsaWNhdGlvbnMubHVhYCwgeyBpZmlkOiBwcm9wcy5pZmlkIH0pLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDAgLyogYXBwbGljYXRpb24gY29sdW1uICovLCAnYXNjJyBdXSxcbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwbGljYXRpb25cIiksIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY2F0ZWdvcnlcIiksIG5hbWU6ICdjYXRlZ29yeScsIGRhdGE6ICdjYXRlZ29yeScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBkYXRhIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5jdXN0b21faG9zdHNcIiksIG5hbWU6ICdjdXN0b21fcnVsZXMnLCBkYXRhOiAnY3VzdG9tX3J1bGVzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IHZpc2libGU6IGZhbHNlLCBuYW1lOiAnYXBwbGljYXRpb25faG9zdHMnLCBkYXRhOiAnYXBwbGljYXRpb25faG9zdHMnIH0sXG4gICAgeyB2aXNpYmxlOiBmYWxzZSwgbmFtZTogJ2FwcGxpY2F0aW9uX2lkJywgZGF0YTogJ2FwcGxpY2F0aW9uX2lkJyB9LFxuICAgIHsgdmlzaWJsZTogZmFsc2UsIG5hbWU6ICdjYXRlZ29yeV9pZCcsIGRhdGE6ICdjYXRlZ29yeV9pZCcgfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfVxuICBdO1xuXG4gIGxldCB0cmFmZmljQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIHRyYWZmaWNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlID0gdHJhZmZpY0NvbmZpZztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPiAgICBcbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxMb2FkaW5nIHYtaWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJlcnJvclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiIHJvbGU9XCJhbGVydFwiIGlkPSdlcnJvci1hbGVydCc+XG4gICAgICAgICAgICAgIHt7IGVycm9yX21lc3NhZ2UgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhZGlzY292ZXJ5X3JlcXVlc3RlZFwiPlxuICAgICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJuZXR3b3JrX2Rpc2NvdmVyeV90YWJsZVwiXG4gICAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkuZGF0YV91cmxcIlxuICAgICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIGFsZXJ0LWRpc21pc3NhYmxlXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgc3Bpbm5lci1ib3JkZXItc20gdGV4dC1pbmZvXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIHt7IGRpc2NvdmVyeV9yZXF1ZXN0ZWRfbWVzc2FnZSB9fVxuICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9XCJwcm9ncmVzc19tZXNzYWdlXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8Tm90ZUxpc3RcbiAgICAgICAgICAgIHYtYmluZDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj5cbiAgICAgICAgICA8L05vdGVMaXN0PlxuICAgICAgICAgIDwhLS0gQWRkaW5nIEV4dHJhIE1lc3NhZ2UgLS0+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtMVwiIHYtaHRtbD1cImxhc3RfbmV0d29ya19kaXNjb3ZlcnlcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvblVubW91bnRlZCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgZXJyb3IgPSByZWYoZmFsc2UpO1xuY29uc3QgZXJyb3JfbWVzc2FnZSA9IGkxOG4oXCJtYXBfcGFnZS5mZXRjaF9lcnJvclwiKTtcbmNvbnN0IGRpc2NvdmVyeV9yZXF1ZXN0ZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgbmV0d29ya19kaXNjb3ZlcnlfdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBjb25maWdfbmV0d29ya19kaXNjb3ZlcnkgPSByZWYoe30pO1xuY29uc3QgcHJvZ3Jlc3NfbWVzc2FnZSA9IHJlZihudWxsKTtcbmNvbnN0IGxhc3RfbmV0d29ya19kaXNjb3ZlcnkgPSByZWYoJycpXG5jb25zdCBkaXNjb3ZlcnlfcmVxdWVzdGVkX21lc3NhZ2UgPSBpMThuKCdkaXNjb3Zlci5uZXR3b3JrX2Rpc2NvdmVyeV9ub3RfZW5hYmxlZCcpXG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBTdHJpbmcsXG59KVxuXG5jb25zdCBnaG9zdF9tZXNzYWdlID0gaTE4bihcImRpc2NvdmVyLmdob3N0X2ljb25fZGVzY3JcIik7XG5jb25zdCB0b29fbWFueV9kZXZpY2VzX21lc3NhZ2UgPSBpMThuKFwiZGlzY292ZXIudG9vX21hbnlfZGV2aWNlc19kZXNjclwiKTtcbmNvbnN0IGdob3N0X21lc3NhZ2VfYWRkZWQgPSByZWYoZmFsc2UpO1xuXG5sZXQgdGltZW91dF9pZDtcblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBpMThuKFwiZGlzY292ZXIuZGlzY292ZXJ5X3J1bm5pbmdcIiksXG4gIGkxOG4oXCJkaXNjb3Zlci5wcm90b2NvbHNfbm90ZVwiKVxuXVxuXG5jb25zdCBkaXNjb3ZlcnlfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9nZXRfZGlzY292ZXJfcHJvZ3Jlc3MubHVhYFxuY29uc3QgbmV0d29ya19kaXNjb3ZlcnlfZGF0YSA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmV0d29yay9kaXNjb3ZlcnkvZGlzY292ZXIubHVhYFxuY29uc3QgcnVuX25ldHdvcmtfZGlzY292ZXJ5ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZXR3b3JrL2Rpc2NvdmVyeS9ydW5fZGlzY292ZXJ5Lmx1YWBcblxuLyogIFRoaXMgZnVuY3Rpb24gYWRkIG5vdGVzIHRvIHRoZSBwYWdlcywgbGlrZSBhZGRpbmcgbm90ZXMgXG4gKiAgdG8gbm90ZV9saXN0IG9yIGxhc3QgbmV0d29yayBkaXNjb3Zlcnkgbm90ZSBcbiAqL1xuY29uc3QgYWRkX25vdGVzID0gKHJzcCkgPT4ge1xuICBpZihyc3AuZ2hvc3RfZm91bmQgPT0gdHJ1ZVxuICAgICAgJiYgZ2hvc3RfbWVzc2FnZV9hZGRlZC52YWx1ZSA9PSBmYWxzZSkge1xuICAgIG5vdGVfbGlzdC51bnNoaWZ0KGdob3N0X21lc3NhZ2UpO1xuICAgIGdob3N0X21lc3NhZ2VfYWRkZWQudmFsdWUgPSB0cnVlO1xuICB9XG4gIGlmKHJzcC50b29fbWFueV9kZXZpY2VzX21lc3NhZ2UgPT0gdHJ1ZVxuICAgICAgJiYgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlLnZhbHVlID09IGZhbHNlKSB7XG4gICAgbm90ZV9saXN0LnVuc2hpZnQodG9vX21hbnlfZGV2aWNlc19tZXNzYWdlKTtcbiAgICB0b29fbWFueV9kZXZpY2VzX21lc3NhZ2UudmFsdWUgPSB0cnVlXG4gIH1cbiAgaWYocnNwLmdob3N0X2ZvdW5kID09IGZhbHNlXG4gICAgICAmJiBnaG9zdF9tZXNzYWdlX2FkZGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgbm90ZV9saXN0LnNoaWZ0KCk7XG4gICAgZ2hvc3RfbWVzc2FnZV9hZGRlZC52YWx1ZSA9IGZhbHNlO1xuICB9XG4gIGlmKHJzcC50b29fbWFueV9kZXZpY2VzX21lc3NhZ2UgPT0gZmFsc2VcbiAgICAgICYmIHRvb19tYW55X2RldmljZXNfbWVzc2FnZS52YWx1ZSA9PSB0cnVlKSB7XG4gICAgbm90ZV9saXN0LnNoaWZ0KCk7XG4gICAgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlLnZhbHVlID0gZmFsc2VcbiAgfVxuXG4gIGxhc3RfbmV0d29ya19kaXNjb3ZlcnkudmFsdWUgPSByc3AubGFzdF9uZXR3b3JrX2Rpc2NvdmVyeTtcbn1cblxuLyogIFRoaXMgZnVuY3Rpb24gaGFuZGxlIHRoZSBkaXNjb3ZlcnksIGFza2luZyB0aGUgYmFja2VuZCBpZiAgXG4gKiAgYSBuZXcgZGlzY292ZXJ5IHdhcyByZXF1ZXN0ZWQgb3Igbm90IGFuZCBpbiBjYXNlIHVwZGF0ZXMgdGhlIG5vdGVzXG4gKiAgYW5kIHRoZSB2YXJpb3VzIG1lc3NhZ2VzXG4gKi9cbmNvbnN0IGNoZWNrRGlzY292ZXJ5ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbiAgYXdhaXQgJC5nZXQoTnRvcFV0aWxzLmJ1aWxkVVJMKGRpc2NvdmVyeV91cmwsIHsgaWZpZDogcHJvcHMuaWZpZCB9KSwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGlmKHJzcC5yc3AuZGlzY292ZXJ5X3JlcXVlc3RlZCA9PSB0cnVlKSB7XG4gICAgICBkaXNjb3ZlcnlfcmVxdWVzdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGlmKHJzcC5yc3AucHJvZ3Jlc3MgIT0gXCJcIikge1xuICAgICAgICBwcm9ncmVzc19tZXNzYWdlLnZhbHVlID0gcnNwLnJzcC5wcm9ncmVzcztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlzY292ZXJ5X3JlcXVlc3RlZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgcHJvZ3Jlc3NfbWVzc2FnZS52YWx1ZSA9ICcnO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lb3V0X2lkKTtcbiAgICB9XG4gICAgYWRkX25vdGVzKHJzcC5yc3ApO1xuICB9KTtcbn1cblxuY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgbmV0d29ya19kaXNjb3ZlcnlfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIG5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlLnZhbHVlLnJlbG9hZCgpO1xufVxuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICB0aW1lb3V0X2lkID0gc2V0SW50ZXJ2YWwoY2hlY2tEaXNjb3ZlcnksIDMwMDApO1xufSksXG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG4vKiAgSW5pdGlhbGl6ZSB0aGUgZGF0YXRhYmxlLCBhZGRpbmcgdGhlIGFjdGlvbiBidXR0b25zIChuZXh0IHRvIHRoZSBzZWFyY2gpLFxuICogIHRoZSB2YXJpb3VzIGNvbHVtbnMsIG5hbWVzIGFuZCBkYXRhIGFuZCB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZGF0YXRhYmxlXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW3tcbiAgICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgdGV4dDogaTE4bihcImRpc2NvdmVyLnN0YXJ0X2Rpc2NvdmVyeVwiKSArICcgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1wbGF5XCI+PC9pPicsXG4gICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICQuZ2V0KE50b3BVdGlscy5idWlsZFVSTChydW5fbmV0d29ya19kaXNjb3ZlcnksIHsgaWZpZDogcHJvcHMuaWZpZCB9KSwgZnVuY3Rpb24oXykge30pXG4gICAgICAgIC8qIFNldCB0aGUgZGVzY292ZXJ5IHJlcXVlc3RlZCB0byB0cnVlICovXG4gICAgICAgIHRpbWVvdXRfaWQgPSBzZXRJbnRlcnZhbChjaGVja0Rpc2NvdmVyeSwgMTAwMCk7XG4gICAgICB9XG4gICAgfVxuICBdO1xuICAgIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChuZXR3b3JrX2Rpc2NvdmVyeV9kYXRhLCB7IGlmaWQ6IHByb3BzLmlmaWQgfSksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzZXJ2ZXJTaWRlOiBmYWxzZSwgXG4gICAgICBvcmRlcjogW1sgMCAvKiBhcHBsaWNhdGlvbiBjb2x1bW4gKi8sICdhc2MnIF1dLFxuICAgIH1cbiAgfTtcbiAgXG4gIC8qIEFwcGxpY2F0aW9ucyB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBsZXQgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJpcF9hZGRyZXNzXCIpLCBuYW1lOiAnaXAnLCBkYXRhOiAnaXAnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm5hbWVcIiksIG5hbWU6ICduYW1lJywgZGF0YTogJ25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hY19zdGF0cy5tYW51ZmFjdHVyZXJcIiksIG5hbWU6ICdtYW51ZmFjdHVyZXInLCBkYXRhOiAnbWFudWZhY3R1cmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYWNfYWRkcmVzc1wiKSwgbmFtZTogJ21hY19hZGRyZXNzJywgZGF0YTogJ21hY19hZGRyZXNzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJvc1wiKSwgbmFtZTogJ29zJywgZGF0YTogJ29zJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJpbmZvXCIpLCBuYW1lOiAnaW5mbycsIGRhdGE6ICdpbmZvJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJkZXZpY2VcIiksIG5hbWU6ICdkZXZpY2UnLCBkYXRhOiAnZGV2aWNlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcblxuICBsZXQgdHJhZmZpY0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICB0cmFmZmljQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LnZhbHVlID0gdHJhZmZpY0NvbmZpZztcbn1cbjwvc2NyaXB0PlxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgICA8ZGl2IGlkPVwibWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cFwiIDpjbGFzcz1cIlsgbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJycgXVwiPlxuICAgICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9tYW5hZ2VfY29uZmlndXJhdGlvbnNfYmFja3VwXCIgOmlkPVwidGFibGVfY29uZmlnLmlkXCIgOmtleT1cInRhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG4gICAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2J1dHRvbnNcIiA6Y29sdW1uc19jb25maWc9XCJ0YWJsZV9jb25maWcuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgICA6ZGF0YV91cmw9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIiA6dGFibGVfY29uZmlnPVwidGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuXG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgdGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cCA9IHJlZihudWxsKTtcbmNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvc3lzdGVtL2NvbmZpZ3VyYXRpb25zL2xpc3RfYXZhaWxhYmxlX2JhY2t1cHMubHVhYFxuY29uc3QgdGFibGVfY29uZmlnID0gcmVmKHt9KVxuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBkYXRlX2Zvcm1hdDogU3RyaW5nLFxufSk7XG5cblxuY29uc3QgZm9ybWF0X2Zsb3dzX2ljb24gPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICBjb25zdCBtc19kYXRhID0gZGF0YSAqIDEwMDA7XG4gIGxldCBkYXRlX2Zvcm1hdCA9IFwiSEg6TU06U1NcIjtcbiAgaWYgKHByb3BzLmRhdGVfZm9ybWF0ID09IFwibGl0dGxlX2VuZGlhblwiKSB7XG4gICAgZGF0ZV9mb3JtYXQgPSBcIkREL01NL1lZWVkgXCIgKyBkYXRlX2Zvcm1hdDtcbiAgfSBlbHNlIGlmIChwcm9wcy5kYXRlX2Zvcm1hdCA9PSBcIm1pZGRsZV9lbmRpYW5cIikge1xuICAgIGRhdGVfZm9ybWF0ID0gXCJNTS9ERC9ZWVlZIFwiICsgZGF0ZV9mb3JtYXQ7XG4gIH0gZWxzZSB7XG4gICAgZGF0ZV9mb3JtYXQgPSBcIllZWVkvTU0vREQgXCIgKyBkYXRlX2Zvcm1hdDtcbiAgfVxuICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KG1zX2RhdGEsIGRhdGVfZm9ybWF0KTtcbn1cblxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICB0YWJsZV9tYW5hZ2VfY29uZmlndXJhdGlvbnNfYmFja3VwLnZhbHVlLnJlbG9hZCgpO1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBzZXRfZGF0YXRhYmxlX2NvbmZpZygpO1xufSk7XG5cbmNvbnN0IHRyaWdnZXJfZG93bmxvYWQgPSBmdW5jdGlvbiAocm93KSB7XG4gIHdpbmRvdy5vcGVuKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvc3lzdGVtL2NvbmZpZ3VyYXRpb25zL2Rvd25sb2FkX2JhY2t1cC5sdWE/ZXBvY2g9JHtyb3cuZXBvY2h9JmRvd25sb2FkPXRydWVgKTtcbn1cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuXG4gIGxldCBkb3dubG9hZF9iYWNrdXBfaGFuZGxlciA9IHtcbiAgICBoYW5kbGVySWQ6IFwiZG93bmxvYWRfYmFja3VwX2hhbmRsZXJcIixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICB0cmlnZ2VyX2Rvd25sb2FkKHJvd0RhdGEpO1xuICAgIH0sXG4gIH1cblxuICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBkb3dubG9hZF9iYWNrdXBfaGFuZGxlciwgaWNvbjogJ2ZhcyBmYS1kb3dubG9hZCBmYS1sZycsIHRpdGxlOiBpMThuKCdkb3dubG9hZCcpIH0sXG4gIF0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfZGF0YXRhYmxlX2NvbmZpZygpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICByZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuXG5cbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBgJHt1cmx9YCxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIGlkOiBcIm1hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXBcIixcbiAgICB0YWJsZV9jb25maWc6IHtcbiAgICAgIHNlcnZlclNpZGU6IHRydWUsXG4gICAgICByZXNwb25zaXZlOiBmYWxzZSxcbiAgICAgIHNjcm9sbFg6IHRydWUsXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMCB9LFxuICAgICAgXVxuICAgIH1cbiAgfTtcblxuICBsZXQgY29sdW1ucyA9IFtdO1xuXG4gIGNvbHVtbnMucHVzaChcbiAgICB7XG4gICAgICBjb2x1bW5OYW1lOiBfaTE4bihcImJhY2t1cF9kYXRlXCIpLCBvcmRlcmFibGU6IHRydWUsIHRhcmdldHM6IDAsIG5hbWU6ICdlcG9jaCcsIGRhdGE6ICdlcG9jaCcsIGNsYXNzTmFtZTogJ3RleHQtbGVmdCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSwgXywgcm93RGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gZm9ybWF0X2Zsb3dzX2ljb24oZGF0YSwgcm93RGF0YSlcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgY29sdW1uTmFtZTogX2kxOG4oXCJhY3Rpb25zXCIpLCBvcmRlcmFibGU6IGZhbHNlLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gYWRkX2FjdGlvbl9jb2x1bW4ocm93RGF0YSkgfVxuICB9XG4gICAgLFxuICApO1xuXG5cblxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiBcblxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcuc25tcF9kZXZpY2VcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zbm1wX2RldmljZVwiXG4gICAgICBcdFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2ludGVyZmFjZXMoKVwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwic25tcF9kZXZpY2VzX2xpc3RcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZW5hYmxlX2ludGVyZmFjZXMgPT0gdHJ1ZVwiPlxuICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLnNubXBfaW50ZXJmYWNlXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuXG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc25tcF9pbnRlcmZhY2VcIlxuICAgICAgICAgICAgICA6b3B0aW9ucz1cInNubXBfaW50ZXJmYWNlc19saXN0XCI+XG4gICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cblxuICAgIDxkaXYgIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLm1ldHJpY1wiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCgpXCJcblxuICAgICAgICAgICAgOm9wdGlvbnM9XCJzbm1wX21ldHJpY19saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLSBGcmVxdWVuY3kgaW5mb3JtYXRpb24sIGEgZnJlcXVlbmN5IG9mIDEgZGF5LCA1IG1pbnV0ZSBvciAxIGhvdXIgZm9yIGV4YW1wbGUgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIil9fTwvYj5cbiAgICAgIDwvbGFiZWw+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9mcmVxdWVuY3lcIlxuICAgICAgICAgIDpvcHRpb25zPVwiZnJlcXVlbmN5X2xpc3RcIj5cblx0XHRcdCAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gVGhyZXNob2xkIGluZm9ybWF0aW9uLCBtYXhpbXVtIGFtb3VudCBvZiBieXRlcyAtLT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIiBzdHlsZT1cIm1hcmdpbi10b3A6M3B4XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50aHJlc2hvbGRcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInZpc2libGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm1ldHJpY190eXBlXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwibWV0cmljX3R5cGVfYWN0aXZlX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD4gIFxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0zXCIgOmNsYXNzPVwiWyBtZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCcgPyAncC0wJyA6ICcnXVwiID5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGZsb2F0LWVuZCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd0aHJvdWdocHV0JyAmJiBtZXRyaWNfdHlwZS5pZCAhPSAncGFja2V0cydcIiB2LWZvcj1cIm1lYXN1cmUgaW4gdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdFwiID5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZScgJiYgbWV0cmljX3R5cGUuaWQgIT0gJ3BhY2tldHMnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3RcIj5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAndm9sdW1lJyAmJiBtZXRyaWNfdHlwZS5pZCAhPSAncGFja2V0cydcIiB2LWZvcj1cIm1lYXN1cmUgaW4gdm9sdW1lX3RocmVzaG9sZF9saXN0XCIgPlxuICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cblxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkICE9ICdwYWNrZXRzJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJtZWFzdXJlIGluIHNpZ25fdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9zaWduXCIgbmFtZT1cInRocmVzaG9sZF9zaWduXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfc2lnbl9yYWRpb1wiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJtZWFzdXJlIGluIHNpZ25fYWJzb2x1dGVfdmFsdWVcIiA+XG4gICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHJlZj1cInRocmVzaG9sZF9zaWduXCIgbmFtZT1cInRocmVzaG9sZF9zaWduXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIHYtYmluZDpjbGFzcz1cIlsgbWVhc3VyZS5hYnNvbHV0ZV92YWx1ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgOmNsYXNzPVwiW3Zpc2libGUgPyAnY29sLXNtLTInIDogJ2NvbC1zbS04J11cIj5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIj5cbiAgICAgICAgICA8aW5wdXQgdmFsdWU9XCIxXCIgcmVmPVwidGhyZXNob2xkXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ0aHJlc2hvbGRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG1heD1cIjEwMFwiIG1pbj1cIjFcIiByZXF1aXJlZD5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT4gXG4gICAgICAgICAgPGlucHV0IHZhbHVlPVwiMVwiIHJlZj1cInRocmVzaG9sZFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidGhyZXNob2xkXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBtYXg9XCIxMDIzXCIgbWluPVwiMVwiIHJlcXVpcmVkPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy5pZCAhPSAndXNhZ2UnICYmIG1ldHJpY190eXBlLmlkID09ICdwZXJjZW50YWdlJ1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZSBhbGVydCBhbGVydC13YXJuaW5nIG10LTNcIj5cbiAgICAgICAgICB7eyBfaTE4bihcInNob3dfYWxlcnRzLmhvc3RfcnVsZXNfcGVyY2VudGFnZVwiKSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxOb3RlTGlzdFxuICAgIDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIiA6YWRkX3N1Yl9ub3Rlcz1cInRydWVcIiA6c3ViX25vdGVfbGlzdD1cInN1Yl9ub3Rlc19saXN0XCI+XG4gICAgPC9Ob3RlTGlzdD5cbiAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiICA+e3tfaTE4bignYWRkJyl9fTwvYnV0dG9uPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJlZGl0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgPnt7X2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgaW5wdXRfbWFjX2xpc3QgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF90cmlnZ2VyX2FsZXJ0cyA9IHJlZihcIlwiKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnLCdlZGl0J10pO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGluaXRfZnVuYyA9IHJlZihudWxsKTtcbmNvbnN0IGRlbGV0ZV9yb3cgPSByZWYobnVsbCk7XG5jb25zdCBzbm1wX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3Qgc25tcF9kZXZpY2VzX2xpc3QgPSByZWYoW10pXG5sZXQgc25tcF9pbnRlcmZhY2VzX2xpc3QgPSByZWYoW10pXG5sZXQgZW5hYmxlX2ludGVyZmFjZXMgPSByZWYodHJ1ZSk7XG5jb25zdCBzbm1wX2ludGVyZmFjZXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvYXZhaWxhYmxlX2ludGVyZmFjZXMubHVhYFxuXG5jb25zdCBmcmVxdWVuY3lfbGlzdCA9IHJlZihbXSlcbmNvbnN0IHRocmVzaG9sZF9tZWFzdXJlID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGRfc2lnbiA9IHJlZihudWxsKVxuY29uc3Qgc2VsZWN0ZWRfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfc25tcF9kZXZpY2UgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZSA9IHJlZih7fSlcblxuY29uc3Qgc2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfZnJlcXVlbmN5ID0gcmVmKHt9KVxuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSlcbmNvbnN0IG1ldHJpY190eXBlID0gcmVmKHt9KVxuY29uc3QgdmlzaWJsZSA9IHJlZih0cnVlKVxuY29uc3QgcnVsZV90eXBlID0gcmVmKFwic25tcFwiKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSlcbmNvbnN0IHBhZ2VfY3NyZl8gPSByZWYobnVsbCk7XG5sZXQgbWV0cmljX3R5cGVfYWN0aXZlX2xpc3QgPSByZWYoW10pO1xuXG5sZXQgdGl0bGUgPSAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5hZGRfaG9zdF9ydWxlc190aXRsZScpO1xuXG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlX3NubXBfZGV2aWNlX3J1bGVzLm5vdGVfMScpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfc25tcF9kZXZpY2VfcnVsZXMubm90ZV8yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV9zbm1wX2RldmljZV9ydWxlcy5ub3RlXzMnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzMnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzQnKVxuXVxuXG5jb25zdCBzdWJfbm90ZXNfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzUnKVxuXTtcblxuY29uc3QgbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCd2b2x1bWUnKSwgbGFiZWw6IF9pMThuKCd2b2x1bWUnKSwgaWQ6ICd2b2x1bWUnLCBhY3RpdmU6IHRydWUgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgbGFiZWw6IF9pMThuKCd0aHJvdWdocHV0JyksIGlkOiAndGhyb3VnaHB1dCcsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgbGFiZWw6IF9pMThuKCdwZXJjZW50YWdlJyksIGlkOiAncGVyY2VudGFnZScsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3BhY2tldHMnKSwgbGFiZWw6IF9pMThuKCdwYWNrZXRzJyksIGlkOiAncGFja2V0cycsIGFjdGl2ZTogZmFsc2UgfVxuXSlcblxuY29uc3Qgdm9sdW1lX3RocmVzaG9sZF9saXN0ID0gcmVmKFtcbiAgeyB0aXRsZTogX2kxOG4oJ2tiJyksIGxhYmVsOiBfaTE4bigna2InKSwgaWQ6ICdrYicsIHZhbHVlOiAxMDI0LCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdtYicpLCBsYWJlbDogX2kxOG4oJ21iJyksIGlkOiAnbWInLCB2YWx1ZTogMTA0ODU3NiwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignZ2InKSwgbGFiZWw6IF9pMThuKCdnYicpLCBpZDogJ2diJywgdmFsdWU6IDEwNzM3NDE4MjQsIGFjdGl2ZTogdHJ1ZSwgZGVmYXVsdF9hY3RpdmU6IHRydWV9LFxuXSk7XG5cbmNvbnN0IHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigna2JwcycpLCBsYWJlbDogX2kxOG4oJ2ticHMnKSwgaWQ6ICdrYnBzJywgdmFsdWU6IDEwMDAsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ21icHMnKSwgbGFiZWw6IF9pMThuKCdtYnBzJyksIGlkOiAnbWJwcycsIHZhbHVlOiAxMDAwMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdnYnBzJyksIGxhYmVsOiBfaTE4bignZ2JwcycpLCBpZDogJ2dicHMnLCB2YWx1ZTogMTAwMDAwMDAwMCwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZX0sXG5dKTtcblxuY29uc3Qgc2lnbl90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCI+XCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IGZhbHNlLCBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSB9LFxuICB7IHRpdGxlOiBcIi1cIiwgbGFiZWw6IFwiPFwiLCBpZDogJ21pbnVzJywgdmFsdWU6IC0xLCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlIH0sXG5dKTtcblxuY29uc3Qgc2lnbl9hYnNvbHV0ZV92YWx1ZSA9IHJlZihbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCI+XCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IHRydWUsIGFic29sdXRlX3ZhbHVlOiB0cnVlIH0sXG5dKTtcblxuY29uc3QgcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdCA9IFtcbiAgeyB0aXRsZTogXCIrXCIsIGxhYmVsOiBcIiVcIiwgaWQ6ICdwbHVzJywgdmFsdWU6IDEsIGFjdGl2ZTogdHJ1ZSB9LFxuXVxuXG5cbmNvbnN0IGhvc3QgPSByZWYobnVsbClcbmNvbnN0IHRocmVzaG9sZCA9IHJlZihudWxsKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWRfbGlzdDogQXJyYXksXG4gIHNubXBfZGV2aWNlc19saXN0OiBBcnJheSxcbiAgc25tcF9tZXRyaWNfbGlzdDogQXJyYXksXG4gIGZyZXF1ZW5jeV9saXN0OiBBcnJheSxcbiAgaW5pdF9mdW5jOiBGdW5jdGlvbixcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KTtcblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZlxufVxuXG5mdW5jdGlvbiByZXNldF9yYWRpb19zZWxlY3Rpb24ocmFkaW9fYXJyYXkpIHtcblxuICByYWRpb19hcnJheS5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLmFjdGl2ZSA9IGl0ZW0uZGVmYXVsdF9hY3RpdmUgPT0gdHJ1ZSApO1xufVxuXG4vKipcbiAqIFxuICogUmVzZXQgZmllbGRzIGluIG1vZGFsIGZvcm0gXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBhc3luYyBmdW5jdGlvbigpIHtcblxuICBob3N0LnZhbHVlID0gXCJcIjtcbiAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gc25tcF9tZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfc25tcF9kZXZpY2UudmFsdWUgPSBudWxsO1xuICBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZSA9IHNubXBfZGV2aWNlc19saXN0LnZhbHVlWzBdO1xuICBjaGFuZ2VfaW50ZXJmYWNlcygpO1xuXG4gIHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy52YWx1ZSA9IHNubXBfbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIGNoYW5nZV9hY3RpdmVfdGhyZXNob2xkKClcbiAgXG4gIHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeV9saXN0LnZhbHVlWzBdO1xuICBtZXRyaWNfdHlwZS52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG5cbiAgLy8gcmVzZXQgbWV0cmljX3R5cGVfbGlzdFxuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHQuYWN0aXZlID0gZmFsc2UpO1xuICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdLmFjdGl2ZSA9IHRydWU7XG4gIFxuICByZXNldF9yYWRpb19zZWxlY3Rpb24odm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlKTtcbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuICByZXNldF9yYWRpb19zZWxlY3Rpb24oc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG5cbiAgcnVsZV90eXBlLnZhbHVlID0gXCJzbm1wXCI7XG5cbiAgZGlzYWJsZV9hZGQudmFsdWUgPSB0cnVlO1xuICBlbmFibGVfaW50ZXJmYWNlcy52YWx1ZSA9IGZhbHNlO1xuXG4gIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IDE7XG4gIGlzX2VkaXRfcGFnZS52YWx1ZSA9IGZhbHNlO1xuICB0aXRsZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuYWRkX2hvc3RfcnVsZXNfdGl0bGUnKTtcblxufVxuXG5cblxuXG4vKipcbiAqIFxuICogU2V0IHJvdyB0byBlZGl0IFxuICovXG5jb25zdCBzZXRfcm93X3RvX2VkaXQgPSAocm93KSA9PiB7XG4gIGlmKHJvdyAhPSBudWxsKSB7XG4gICAgaXNfZWRpdF9wYWdlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aXRsZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZWRpdF9ob3N0X3J1bGVzX3RpdGxlJyk7XG5cbiAgICBkaXNhYmxlX2FkZC52YWx1ZSA9IGZhbHNlO1xuXG4gICAgc25tcF9kZXZpY2VzX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbS5sYWJlbF90b19pbnNlcnQgPT0gcm93LmRldmljZSlcbiAgICAgICAgc2VsZWN0ZWRfc25tcF9kZXZpY2UudmFsdWUgPSBpdGVtO1xuICAgIH0gKVxuXG4gICAgLy8gc2V0IHRocmVzaG9sZCBzaWduXG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICB0LmFjdGl2ZSA9ICh0LnZhbHVlID09IHJvdy50aHJlc2hvbGRfc2lnbilcbiAgICB9KVxuXG4gICAgc25tcF9tZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZih0LmlkID09IHJvdy5tZXRyaWMpXG4gICAgICAgIHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy52YWx1ZSA9IHQ7XG4gICAgfSlcblxuICAgIC8vIHNldCB0aHJlc2hvbGRcbiAgICBpZihyb3cubWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpXG4gICAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICBpZiAoIChyb3cudGhyZXNob2xkICUgdC52YWx1ZSkgPT0gMCApIHtcbiAgICAgICAgICBsZXQgcm93X3RocmVzaG9sZF92YWx1ZSA9IHJvdy50aHJlc2hvbGQgLyB0LnZhbHVlO1xuICAgICAgICAgIGlmKCByb3dfdGhyZXNob2xkX3ZhbHVlIDwgMTAyNCkge1xuICAgICAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93X3RocmVzaG9sZF92YWx1ZSA9PSAwID8gMSA6IHJvd190aHJlc2hvbGRfdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgZWxzZSBpZihyb3cubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgICByb3cudGhyZXNob2xkID0gcm93LnRocmVzaG9sZCAqIDg7XG4gICAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICBpZiAoIChyb3cudGhyZXNob2xkICUgdC52YWx1ZSkgPT0gMCApIHtcbiAgICAgICAgICAgIGxldCByb3dfdGhyZXNob2xkX3ZhbHVlID0gcm93LnRocmVzaG9sZCAvIHQudmFsdWU7XG4gICAgICAgICAgICBpZiggcm93X3RocmVzaG9sZF92YWx1ZSA8IDEwMDApIHtcbiAgICAgICAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSByb3dfdGhyZXNob2xkX3ZhbHVlID09IDAgPyAxIDogcm93X3RocmVzaG9sZF92YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvL3BlcmNlbnRhZ2UgY2FzZVxuICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93LnRocmVzaG9sZCAqIHJvdy50aHJlc2hvbGRfc2lnbjtcblxuICAgIH1cbiAgICBjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCgpO1xuICAgIG1ldHJpY190eXBlX2FjdGl2ZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0uaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gaXRlbTtcbiAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgfSBlbHNlIFxuICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG5cbiAgICAvLyBzZXQgcnVsZV90eXBlXG4gICAgcnVsZV90eXBlLnZhbHVlID0gcm93LnJ1bGVfdHlwZTtcbiAgICBzbm1wX2RldmljZXNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZih0LmxhYmVsID09IHJvdy5kZXZpY2UpXG4gICAgICAgIHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlID0gdDtcbiAgICB9KVxuXG4gICAgZnJlcXVlbmN5X2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbS5pZCA9PSByb3cuZnJlcXVlbmN5KVxuICAgICAgICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBpdGVtO1xuICAgIH0pO1xuXG4gICAgY2hhbmdlX2ludGVyZmFjZXMocm93LmRldmljZV9wb3J0KTtcbiAgXG4gIH1cbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgaWYocm93ICE9IG51bGwpIHtcbiAgICBzZXRfcm93X3RvX2VkaXQocm93KTtcbiAgfSBlbHNlIHtcbiAgICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIH1cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuXG5jb25zdCBzZXRfYWN0aXZlX3NpZ25fcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG4gIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICB9KVxuXG59XG5cbi8qKlxuICogXG4gKiBTZXQgdGhlIG1ldHJpYyB0eXBlXG4gKi9cbmNvbnN0IHNldF9hY3RpdmVfcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG5cbiAgaWYobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd2b2x1bWUnKSB7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gZWxzZSBpZiAobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3BlcmNlbnRhZ2UnKXtcbiAgICBwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0LmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0pXG4gIH0gZWxzZSBpZiAobWV0cmljX3R5cGUudmFsdWUuaWQgPT0gJ3BhY2tldHMnKXtcbiAgICBcbiAgfSBcbiAgXG59XG5cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2ludGVyZmFjZXMoaW50ZXJmYWNlX2lkKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzbm1wX2ludGVyZmFjZXNfdXJsK1wiP2hvc3Q9XCIrc2VsZWN0ZWRfc25tcF9kZXZpY2UudmFsdWUubGFiZWxfdG9faW5zZXJ0LCByZXN0X3BhcmFtcylcbiAgbGV0IGludGVyZmFjZXNfbGlzdCA9IFtdXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGludGVyZmFjZXNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuICBsZXQgcmVzdWx0X2ludGVyZmFjZXMgPSBbXVxuXG4gIGludGVyZmFjZXNfbGlzdC5mb3JFYWNoKGlmYWNlID0+IHtcbiAgICBpZihpZmFjZS5uYW1lICE9IG51bGwgJiYgaWZhY2UubmFtZSAhPSBcIlwiICYmIGlmYWNlLm5hbWUgIT0gaWZhY2UuaWQpXG4gICAgICByZXN1bHRfaW50ZXJmYWNlcy5wdXNoKHtsYWJlbDogaWZhY2UubmFtZSArIFwiIChcIitpZmFjZS5pZCtcIilcIiwgaWQ6IGlmYWNlLmlkLCBuYW1lOiBpZmFjZS5uYW1lIH0pXG4gICAgZWxzZVxuICAgICAgcmVzdWx0X2ludGVyZmFjZXMucHVzaCh7bGFiZWw6IGlmYWNlLmlkLCBpZDogaWZhY2UuaWQsICBuYW1lOiBpZmFjZS5pZH0pXG4gIH0pXG4gIHJlc3VsdF9pbnRlcmZhY2VzLnB1c2goe2xhYmVsOiBcIipcIiwgaWQ6XCIqXCIsIG5hbWU6XCIqXCJ9KVxuICByZXN1bHRfaW50ZXJmYWNlcy5zb3J0KGZ1bmN0aW9uKGEsYikge3JldHVybiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpID4gYi5sYWJlbC50b0xvd2VyQ2FzZSgpID8gMSA6IChhLmxhYmVsLnRvTG93ZXJDYXNlKCkgPCBiLmxhYmVsLnRvTG93ZXJDYXNlKCkpID8gLTEgOiAwKTt9KTtcblxuICBpZiAoaW50ZXJmYWNlX2lkICE9IG51bGwpXG4gICAgcmVzdWx0X2ludGVyZmFjZXMuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYodC5pZCA9PSBpbnRlcmZhY2VfaWQpXG4gICAgICAgIHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlID0gdDtcbiAgICB9KVxuICBzbm1wX2ludGVyZmFjZXNfbGlzdC52YWx1ZSA9IHJlc3VsdF9pbnRlcmZhY2VzO1xuICAvLyBkZWJ1Z2dlcjtcbiAgaWYoc2VsZWN0ZWRfc25tcF9kZXZpY2UudmFsdWUubGFiZWxfdG9faW5zZXJ0ID09IFwiYWxsXCIpXG4gICAgZW5hYmxlX2ludGVyZmFjZXMudmFsdWUgPSBmYWxzZTtcbiAgZWxzZVxuICAgIGVuYWJsZV9pbnRlcmZhY2VzLnZhbHVlID0gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCgpIHtcbiAgbGV0IGxpc3RfbWV0cmljc19hY3RpdmUgPSBbXTtcbiAgbGV0IGxpc3Rfc2lnbl9hY3RpdmUgPSBbXVxuICBpZihzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQgPT0gJ3BhY2tldHMnICB8fCBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQgPT0gJ3VzYWdlJykge1xuICAgIG1ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYodC5pZCAhPSAncGVyY2VudGFnZScpXG4gICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBsaXN0X21ldHJpY3NfYWN0aXZlLnB1c2godCk7XG4gICAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gdDtcbiAgICAgIH1cbiAgICB9KVxuICB9IGVsc2UgaWYgKHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy52YWx1ZS5pZCA9PSAnZXJyb3JzJyApIHtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgIT0gJ3BhY2tldHMnKVxuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbGlzdF9tZXRyaWNzX2FjdGl2ZS5wdXNoKHQpO1xuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgICB9XG4gICAgfSlcblxuICB9IGVsc2Uge1xuICAgIG1ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYodC5pZCA9PSAncGFja2V0cycpXG4gICAgICAgIHQuYWN0aXZlID0gZmFsc2U7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbGlzdF9tZXRyaWNzX2FjdGl2ZS5wdXNoKHQpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuXG4gIG1ldHJpY190eXBlX2FjdGl2ZV9saXN0LnZhbHVlID0gbGlzdF9tZXRyaWNzX2FjdGl2ZTtcbn1cblxuXG5cbi8qKlxuICogRnVuY3Rpb24gdG8gYWRkIHJ1bGUgdG8gcnVsZXMgbGlzdFxuICovXG5jb25zdCBhZGRfID0gKGlzX2VkaXQpID0+IHtcbiAgbGV0IHRtcF9ob3N0ID0gJydcbiAgcnVsZV90eXBlLnZhbHVlID0gJ3NubXAnO1xuICB0bXBfaG9zdCA9IGhvc3QudmFsdWU7XG5cbiAgY29uc3QgdG1wX2ZyZXF1ZW5jeSA9IHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZS5pZDtcbiAgY29uc3QgdG1wX21ldHJpYyA9IHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy52YWx1ZS5pZDtcbiAgY29uc3QgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYy52YWx1ZS5sYWJlbDtcbiAgY29uc3QgdG1wX2RldmljZSA9IHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsX3RvX2luc2VydDtcbiAgY29uc3QgdG1wX2RldmljZV9sYWJlbCA9IHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsO1xuICBjb25zdCB0bXBfZGV2aWNlX2lmaWQgPSBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5lbnRyaWVzKHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlKS5sZW5ndGggPT09IDAgPyBcIipcIjogc2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9kZXZpY2VfaWZpZF9sYWJlbCA9IHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlID09IG51bGwgfHwgT2JqZWN0LmVudHJpZXMoc2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UudmFsdWUpLmxlbmd0aCA9PT0gMCA/IFwiKlwiOnNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlLmxhYmVsO1xuICAvLyBkZWJ1Z2dlcjtcbiAgLy8gY29uc29sZS5sb2codGhyZXNob2xkKVxuICBsZXQgdG1wX21ldHJpY190eXBlID0gbWV0cmljX3R5cGUudmFsdWUuaWQ7XG4gIGxldCBiYXNpY192YWx1ZTtcbiAgbGV0IG1lYXN1cmVfdW5pdF9sYWJlbDtcbiAgbGV0IGJhc2ljX3NpZ25fdmFsdWU7XG4gIGxldCB0bXBfdGhyZXNob2xkO1xuICBsZXQgdG1wX3NpZ25fdmFsdWU7XG5cbiAgaWYodmlzaWJsZS52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICB0bXBfbWV0cmljX3R5cGUgPSAnJ1xuICAgIHRtcF9leHRyYV9tZXRyaWMgPSAnJ1xuICAgIHRtcF90aHJlc2hvbGQgPSB0aHJlc2hvbGQudmFsdWUudmFsdWU7XG4gIH1cbiAgaWYodG1wX21ldHJpY190eXBlID09ICd0aHJvdWdocHV0Jykge1xuXG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgeyBiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IG1lYXN1cmVfdW5pdF9sYWJlbCA9IG1lYXN1cmUubGFiZWw7IH19KVxuICAgIHRtcF90aHJlc2hvbGQgPSBiYXNpY192YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSkgLyA4O1xuICAgIC8qIFRoZSB0aHJvdWdocHV0IGlzIGluIGJpdCwgdGhlIHZvbHVtZSBpbiBCeXRlcyEhICovXG4gIH0gZWxzZSBpZih0bXBfbWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpIHtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3NpZ25fdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyB9KVxuICAgIHRtcF9zaWduX3ZhbHVlID0gcGFyc2VJbnQoYmFzaWNfc2lnbl92YWx1ZSk7XG4gICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIHtiYXNpY192YWx1ZSA9IG1lYXN1cmUudmFsdWU7IG1lYXN1cmVfdW5pdF9sYWJlbCA9IG1lYXN1cmUubGFiZWw7fSB9KVxuICAgIHRtcF90aHJlc2hvbGQgPSBiYXNpY192YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSk7XG4gIH0gZWxzZSBpZih0bXBfbWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHRtcF90aHJlc2hvbGQgPSB0bXBfc2lnbl92YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSk7XG4gICAgbWVhc3VyZV91bml0X2xhYmVsID0gXCIlXCI7XG4gIH0gZWxzZSB7XG4gICAgdG1wX3NpZ25fdmFsdWUgPSAxO1xuICAgIHRtcF90aHJlc2hvbGQgPSBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9XG4gIGxldCBlbWl0X25hbWUgPSAnYWRkJztcblxuICBpZihpc19lZGl0ID09IHRydWUpIFxuICAgIGVtaXRfbmFtZSA9ICdlZGl0JztcblxuICBlbWl0KGVtaXRfbmFtZSwgeyBcbiAgICBmcmVxdWVuY3k6IHRtcF9mcmVxdWVuY3ksIFxuICAgIG1ldHJpYzogdG1wX21ldHJpYyxcbiAgICBtZXRyaWNfbGFiZWw6IHRtcF9tZXRyaWNfbGFiZWwsXG4gICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgc25tcF9kZXZpY2U6IHRtcF9kZXZpY2UsXG4gICAgc25tcF9kZXZpY2VfbGFiZWw6IHRtcF9kZXZpY2VfbGFiZWwsXG4gICAgc25tcF9kZXZpY2VfcG9ydDogdG1wX2RldmljZV9pZmlkLFxuICAgIHNubXBfZGV2aWNlX3BvcnRfbGFiZWw6IHRtcF9kZXZpY2VfaWZpZF9sYWJlbCxcbiAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICBzbm1wX3RocmVzaG9sZF92YWx1ZTogdGhyZXNob2xkLnZhbHVlLnZhbHVlLFxuICAgIHNubXBfdGhyZXNob2xkX3VuaXQ6IG1lYXN1cmVfdW5pdF9sYWJlbCxcbiAgICBzbm1wX21ldHJpY190eXBlX2xhYmVsOiBtZXRyaWNfdHlwZS52YWx1ZS50aXRsZVxuICB9KTtcbiAgXG4gICAgXG5cbiAgY2xvc2UoKTtcbn07XG5cblxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gIGFkZF8odHJ1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgZm9ybWF0X3NubXBfZGV2aWNlc19saXN0ID0gZnVuY3Rpb24oX3NubXBfZGV2aWNlc19saXN0KSB7XG4gIGxldCBkZXZpY2VzX2xpc3QgPSBbXTtcbiAgX3NubXBfZGV2aWNlc19saXN0LmRhdGEuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZihpdGVtLmNvbHVtbl9uYW1lICE9IG51bGwgJiYgaXRlbS5jb2x1bW5fbmFtZSAhPSBcIlwiICYmIGl0ZW0uY29sdW1uX25hbWUgIT0gXCJhbGxcIilcbiAgICAgIGRldmljZXNfbGlzdC5wdXNoKHtsYWJlbCA6IGl0ZW0uY29sdW1uX25hbWUgKyBcIiAoXCIraXRlbS5jb2x1bW5fa2V5K1wiKVwiICwgbGFiZWxfdG9faW5zZXJ0OiBpdGVtLmNvbHVtbl9rZXl9KTtcbiAgICBlbHNlIHtcbiAgICAgIGlmIChpdGVtLmNvbHVtbl9uYW1lID09IFwiYWxsXCIpXG4gICAgICAgIGRldmljZXNfbGlzdC5wdXNoKHtsYWJlbCA6IGl0ZW0uY29sdW1uX2tleSwgbGFiZWxfdG9faW5zZXJ0OiBpdGVtLmNvbHVtbl9uYW1lfSk7XG4gICAgICBlbHNlXG4gICAgICAgIGRldmljZXNfbGlzdC5wdXNoKHtsYWJlbCA6IGl0ZW0uY29sdW1uX2tleSwgbGFiZWxfdG9faW5zZXJ0OiBpdGVtLmNvbHVtbl9rZXl9KTtcbiAgICB9XG5cbiAgfSlcbiAgY29uc3QgaXAyaW50ID0gc3RyID0+IHN0clxuICAgIC5zcGxpdCgnLicpXG4gICAgLnJlZHVjZSgoYWNjLCBieXRlKSA9PiBhY2MgKyBieXRlLnBhZFN0YXJ0KDMsIDApLCAnJyk7XG5cbiAgZGV2aWNlc19saXN0LnNvcnQoZnVuY3Rpb24oYSwgYikge3JldHVybiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpID4gYi5sYWJlbC50b0xvd2VyQ2FzZSgpID8gMSA6IChhLmxhYmVsLnRvTG93ZXJDYXNlKCkgPCBiLmxhYmVsLnRvTG93ZXJDYXNlKCkpID8gLTEgOiAwKTt9KTtcbiAgcmV0dXJuIGRldmljZXNfbGlzdDtcbn1cblxuY29uc3QgbWV0cmljc0xvYWRlZCA9KF9zbm1wX2RldmljZXNfbGlzdCwgX3NubXBfbWV0cmljX2xpc3QsIHBhZ2VfY3NyZikgPT4ge1xuXG4gIHNubXBfZGV2aWNlc19saXN0LnZhbHVlID0gZm9ybWF0X3NubXBfZGV2aWNlc19saXN0KF9zbm1wX2RldmljZXNfbGlzdCk7XG4gIHNubXBfbWV0cmljX2xpc3QudmFsdWUgPSBfc25tcF9tZXRyaWNfbGlzdDtcbiAgZnJlcXVlbmN5X2xpc3QudmFsdWUgPSBwcm9wcy5mcmVxdWVuY3lfbGlzdDtcbiAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5X2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IHNubXBfbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHBhZ2VfY3NyZl8udmFsdWUgPSBwYWdlX2NzcmY7XG4gIFxuICBcbn1cblxuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgaWYodC5hY3RpdmUpIHtcbiAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gdDtcbiAgICB9XG5cbiAgfSlcbn0pXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBtZXRyaWNzTG9hZGVkIH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTRcIj5cbiAgICAgICAgICA8aDQ+e3sgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5zbm1wX3J1bGVzJykgfX08L2g0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfcnVsZXNcIj5cbiAgICAgICAgICA8TW9kYWxEZWxldGVDb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCI+XG4gICAgICAgICAgPC9Nb2RhbERlbGV0ZUNvbmZpcm0+XG4gICAgICAgICAgPE1vZGFsQWRkU05NUFJ1bGVzIHJlZj1cIm1vZGFsX2FkZF9zbm1wX2RldmljZV9ydWxlXCJcbiAgICAgICAgICAgIDpmcmVxdWVuY3lfbGlzdD1cImZyZXF1ZW5jeV9saXN0XCJcbiAgICAgICAgICAgIDppbml0X2Z1bmM9XCJpbml0X2VkaXRcIlxuICAgICAgICAgICAgQGFkZD1cImFkZF9ob3N0X3J1bGVcIlxuICAgICAgICAgICAgQGVkaXQ9XCJlZGl0XCI+XG4gICAgICAgICAgPC9Nb2RhbEFkZFNOTVBSdWxlcz5cbiAgICAgICAgICBcbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX2hvc3RfcnVsZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPE5vdGVMaXN0XG4gICAgICAgIDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj5cbiAgICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Vbm1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZFNOTVBSdWxlcyB9IGZyb20gXCIuL21vZGFsLWFkZC1zbm1wLWRldmljZS1ydWxlcy52dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgaWZpZDogU3RyaW5nLFxufSlcblxuY29uc3QgdGFibGVfaG9zdF9ydWxlcyA9IHJlZihudWxsKVxuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYobnVsbClcbmNvbnN0IG1vZGFsX2FkZF9zbm1wX2RldmljZV9ydWxlID0gcmVmKG51bGwpXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3Qgcm93X3RvX2RlbGV0ZSA9IHJlZih7fSlcbmNvbnN0IHJvd190b19lZGl0ID0gcmVmKHt9KVxuXG5cbmNvbnN0IHNubXBfbWV0cmljX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvbWV0cmljL3J1bGVfbWV0cmljcy5sdWFgXG5jb25zdCBzbm1wX2RldmljZXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfc25tcF9kZXZpY2VzX2xpc3QubHVhYFxuXG5jb25zdCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL3J1bGVzLmx1YWBcbmNvbnN0IGFkZF9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL3NubXAvZGV2aWNlL3J1bGUubHVhYFxuY29uc3QgcmVtb3ZlX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvc25tcC9kZXZpY2UvcnVsZS5sdWFgXG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzEnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzInKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5nZW5lcmljX25vdGVzXzMnKSxcbl1cblxuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGlmaWQ6IHByb3BzLmlmaWQsXG4gIGNzcmY6IHByb3BzLnBhZ2VfY3NyZlxufVxuXG5sZXQgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSB7fVxubGV0IHRpdGxlX2RlbGV0ZSA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZGVsZXRlX2hvc3RfcnVsZXNfdGl0bGUnKVxubGV0IHRpdGxlX2VkaXQgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmVkaXRfbG9jYWxfbmV0d29ya19ydWxlcycpXG5sZXQgYm9keV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX2Rlc2NyaXB0aW9uJylcbmxldCBzbm1wX21ldHJpY19saXN0ID0gW11cbmxldCBzbm1wX2ludGVyZmFjZXNfbGlzdCA9IFtdXG5sZXQgc25tcF9kZXZpY2VzX2xpc3QgPSBbXVxubGV0IGludGVyZmFjZV9tZXRyaWNfbGlzdCA9IFtdXG5cblxuY29uc3QgZnJlcXVlbmN5X2xpc3QgPSBbXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLjVfbWluJyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy41X21pbicpLCBpZDogJzVtaW4nIH0sXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLmhvdXJseScpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuaG91cmx5JyksIGlkOiAnaG91cicgfSxcbiAgeyB0aXRsZTogaTE4bignc2hvd19hbGVydHMuZGFpbHknKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLmRhaWx5JyksIGlkOiAnZGF5JyB9XG5dXG5cbmNvbnN0IHNob3dfZGVsZXRlX2RpYWxvZyA9IGZ1bmN0aW9uKHJvdykge1xuICByb3dfdG9fZGVsZXRlLnZhbHVlID0gcm93O1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KCk7XG59XG5cbmNvbnN0IGxvYWRfc2VsZWN0ZWRfZmllbGQgPSBmdW5jdGlvbihyb3cpIHtcbiAgcm93X3RvX2VkaXQudmFsdWUgPSByb3c7XG4gIFxuICByb3dfdG9fZGVsZXRlLnZhbHVlID0gcm93O1xuXG4gIG1vZGFsX2FkZF9zbm1wX2RldmljZV9ydWxlLnZhbHVlLnNob3cocm93KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBlZGl0KHBhcmFtcykge1xuICBhd2FpdCBkZWxldGVfcm93KCk7XG5cbiAgYXdhaXQgYWRkX2hvc3RfcnVsZShwYXJhbXMpO1xufVxuXG5jb25zdCBpbml0X2VkaXQgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2VkaXQudmFsdWU7XG4gIHJvd190b19lZGl0LnZhbHVlID0gbnVsbDtcbiAgcmV0dXJuIHJvdztcbn1cblxuY29uc3QgZGVzdHJveV90YWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0YWJsZV9ob3N0X3J1bGVzLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRhYmxlX2hvc3RfcnVsZXMudmFsdWUucmVsb2FkKCk7XG59XG5cbmNvbnN0IGRlbGV0ZV9yb3cgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHJ1bGVfaWQ6IHJvdy5pZCxcbiAgICAgIHJ1bGVfdHlwZTogcm93LnJ1bGVfdHlwZVxuICAgIH1cbiAgfSlcbiAgXG4gIGF3YWl0ICQucG9zdCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59XG5cbmNvbnN0IGFkZF9ob3N0X3J1bGUgPSBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGFkZF9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLnBhcmFtc1xuICB9KVxuICBcbiAgYXdhaXQgJC5wb3N0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9KTtcbn1cblxuXG5jb25zdCBhZGRfYWN0aW9uX2NvbHVtbiA9IGZ1bmN0aW9uIChyb3dEYXRhKSB7XG4gIGxldCBkZWxldGVfaGFuZGxlciA9IHtcblx0ICBoYW5kbGVySWQ6IFwiZGVsZXRlX2hvc3RcIixcdCAgXG5cdCAgb25DbGljazogKCkgPT4ge1xuICAgICAgc2hvd19kZWxldGVfZGlhbG9nKHJvd0RhdGEpO1xuXHQgIH0sXG5cdH07XG5cbiAgbGV0IGVkaXRfaGFuZGxlciA9IHtcbiAgICBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgbG9hZF9zZWxlY3RlZF9maWVsZChyb3dEYXRhKTtcbiAgICB9LFxuICB9XG4gIFxuICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBlZGl0X2hhbmRsZXIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSB9LFxuXHQgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZGVsZXRlX2hhbmRsZXIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSB9LFxuXHRdKTtcbn1cblxuY29uc3QgZm9ybWF0X21ldHJpYyA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IG1ldHJpY19sYWJlbCA9IGRhdGEgIFxuICBpZiAocm93RGF0YS5tZXRyaWNfbGFiZWwgJiYgcm93RGF0YS5tZXRyaWNfbGFiZWwgIT0gZGF0YSAmJiByb3dEYXRhLm1ldHJpY19sYWJlbCAhPSBcIlwiKSB7XG4gICAgbWV0cmljX2xhYmVsID0gcm93RGF0YS5tZXRyaWNfbGFiZWw7XG4gIH0gXG4gIFxuICBcbiAgcmV0dXJuIG1ldHJpY19sYWJlbFxufVxuXG5jb25zdCBmb3JtYXRfZnJlcXVlbmN5ID0gZnVuY3Rpb24oZGF0YSkge1xuICBsZXQgZnJlcXVlbmN5X3RpdGxlID0gJydcbiAgZnJlcXVlbmN5X2xpc3QuZm9yRWFjaCgoZnJlcXVlbmN5KSA9PiB7XG4gICAgaWYoZGF0YSA9PSBmcmVxdWVuY3kuaWQpXG4gICAgICBmcmVxdWVuY3lfdGl0bGUgPSBmcmVxdWVuY3kudGl0bGU7XG4gIH0pXG5cbiAgcmV0dXJuIGZyZXF1ZW5jeV90aXRsZVxufVxuXG5jb25zdCBmb3JtYXRfdGhyZXNob2xkID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICBsZXQgZm9ybWF0dGVkX2RhdGEgPSBwYXJzZUludChkYXRhKTtcbiAgbGV0IHRocmVzaG9sZF9zaWduID0gXCI+IFwiO1xuXG4gIGlmKChyb3dEYXRhLnRocmVzaG9sZF9zaWduKSAmJiAocm93RGF0YS50aHJlc2hvbGRfc2lnbiA9PSAnLTEnKSlcbiAgICB0aHJlc2hvbGRfc2lnbiA9IFwiPCBcIlxuXG4gIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSB0aHJlc2hvbGRfc2lnbiArIE50b3BVdGlscy5iaXRzVG9TaXplX25vX2NvbW1hKGRhdGEgKiA4KVxuICB9IGVsc2UgaWYoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICd2b2x1bWUnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gIH0gZWxzZSBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3BlcmNlbnRhZ2UnKSl7XG4gICAgaWYgKGRhdGEgPCAwKSB7XG4gICAgICBkYXRhID0gZGF0YSAqICgtMSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuZnBlcmNlbnQoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSB0aHJlc2hvbGRfc2lnbiArIGRhdGE7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0dGVkX2RhdGFcbn1cblxuXG5jb25zdCBmb3JtYXRfdGFyZ2V0ID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICByZXR1cm4gcm93RGF0YS5kZXZpY2VfbGFiZWw7XG59XG5cbmNvbnN0IGZvcm1hdF9pbnRlcmZhY2UgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIHJldHVybiByb3dEYXRhLmRldmljZV9wb3J0X2xhYmVsO1xufVxuXG5jb25zdCBnZXRfc25tcF9tZXRyaWNfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc25tcF9tZXRyaWNfdXJsLCByZXN0X3BhcmFtcylcbiAgXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHNubXBfbWV0cmljX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbn1cblxuXG5jb25zdCBnZXRfc25tcF9kZXZpY2VzX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgcmVzdF9wYXJhbXMudmVyYm9zZSA9IHRydWVcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNubXBfZGV2aWNlc191cmwsIHJlc3RfcGFyYW1zKVxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBzbm1wX2RldmljZXNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuICBzbm1wX2RldmljZXNfbGlzdC5kYXRhLnB1c2goe2NvbHVtbl9rZXk6IFwiKlwiLGNvbHVtbl9uYW1lOiBcImFsbFwiIH0pXG59XG5cbmNvbnN0IHN0YXJ0X2RhdGF0YWJsZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9LCB7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZS52YWx1ZS5zaG93KCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGNvbnN0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHRhcmdldHM6IDAsIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH0sXG5cbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWRcIiksIHZpc2libGU6IGZhbHNlLCB0YXJnZXRzOjEsIG5hbWU6ICdpZCcsIGRhdGE6ICdpZCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5zbm1wX2RldmljZVwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcyMCcsIG5hbWU6ICdkZXZpY2UnLCBkYXRhOiAnZGV2aWNlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkge3JldHVybiBmb3JtYXRfdGFyZ2V0KGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnNubXBfaW50ZXJmYWNlXCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzIwJywgbmFtZTogJ2ludGVyZmFjZScsIGRhdGE6ICdpbnRlcmZhY2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7cmV0dXJuIGZvcm1hdF9pbnRlcmZhY2UoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcubWV0cmljXCIpLCB0YXJnZXRzOiA0LCB3aWR0aDogJzEwJywgbmFtZTogJ21ldHJpYycsIGRhdGE6ICdtZXRyaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfbWV0cmljKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSkgeyByZXR1cm4gZm9ybWF0X2ZyZXF1ZW5jeShkYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50aHJlc2hvbGRcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMTAnLCBuYW1lOiAndGhyZXNob2xkJywgZGF0YTogJ3RocmVzaG9sZCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF90aHJlc2hvbGQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJtZXRyaWNfdHlwZVwiKSwgdmlzaWJsZTogZmFsc2UsIHRhcmdldHM6IDcsIG5hbWU6ICdtZXRyaWNfdHlwZScsIGRhdGE6ICdtZXRyaWNfdHlwZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gIF07XG5cbiAgY29uc3QgaG9zdFJ1bGVzVGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoZGF0YV91cmwsIHJlc3RfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIGNvbHVtbnNfY29uZmlnOiBjb2x1bW5zLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNjcm9sbFg6IGZhbHNlLFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDEgLyogdGFyZ2V0ICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBjb2x1bW5zXG4gICAgfVxuICB9O1xuICBob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyA9IGhvc3RSdWxlc1RhYmxlQ29uZmlnO1xufVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG4gIGF3YWl0IGdldF9zbm1wX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9zbm1wX2RldmljZXNfbGlzdCgpO1xuICBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZS52YWx1ZS5tZXRyaWNzTG9hZGVkKHNubXBfZGV2aWNlc19saXN0LCBzbm1wX21ldHJpY19saXN0LCBwcm9wcy5wYWdlX2NzcmYpO1xufSlcblxub25Vbm1vdW50ZWQoKCkgPT4ge1xuICBkZXN0cm95X3RhYmxlKCk7XG59KVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8dGVtcGxhdGU+XG5DaWFvIE1vbmRvXG48Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+PC9Ob3RlTGlzdD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvdGFibGUtdXRpbHNcIjtcbi8vaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3Qgbm90ZXMgPSBbX2kxOG4oXCJzbm1wLnNubXBfc2ltaWxhcml0eV9ub3RlXCIpLCBfaTE4bihcInNubXAuc25tcF9zaW1pbGFyaXR5X3RpbWVfbm90ZVwiKV07XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCB0YWJsZV9pZCA9IFwic25tcF9zaW1pbGFyaXR5X2RhdGFcIjtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBUYWJsZVV0aWxzLmJ1aWxkX3RhYmxlKGh0dHBfcHJlZml4LCB0YWJsZV9pZCk7XG59KTtcblxuXG5jb25zb2xlLmxvZyhwcm9wcy5jb250ZXh0KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbWItM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWwtMiBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLXJpZ2h0OjFyZW07bWluLXdpZHRoOjI1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bigncHJvdG9jb2wnKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2NyaXRlcmlhXCIgOm9wdGlvbnM9XCJjcml0ZXJpYV9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX2NyaXRlcmlhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1iLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG5vLXdyYXBcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDttYXJnaW4tcmlnaHQ6MXJlbTttaW4td2lkdGg6MjVyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdhcHBsaWNhdGlvbicpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfYXBwbGljYXRpb25cIiA6b3B0aW9ucz1cImFwcGxpY2F0aW9uX2xpc3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfcG9ydF9saXN0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1iLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG5vLXdyYXBcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDttYXJnaW4tcmlnaHQ6MXJlbTttaW4td2lkdGg6MjVyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPnt7IF9pMThuKCdkYl9zZWFyY2gudGFncy5zcnZfcG9ydCcpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfcG9ydFwiIDpvcHRpb25zPVwicG9ydF9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX3BvcnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpc1wiIDpjc3JmPVwiY3NyZlwiIDp0YWJsZV9pZD1cInRhYmxlX2lkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiBmaWx0ZXJfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfb25fb3Blbj1cImdldF9vcGVuX2ZpbHRlcl90YWJsZV9kcm9wZG93bih0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVmPVwiZWwgPT4geyBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCIgOmhpZGRlbj1cInQuaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIDpzaG93PVwidC5zaG93X3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMVwiPjwvU3Bpbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJhZGRfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50KVwiIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJvcHQudmFsdWVcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm9wdC5jb3VudCA9PSBudWxsXCI+e3sgb3B0LmxhYmVsIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT57eyBvcHQubGFiZWwgKyBcIiAoXCIgKyBvcHQuY291bnQgKyBcIilcIiB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4gPCEtLSBEcm9wZG93biBmaWx0ZXJzIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3Bpbm5lciB9IGZyb20gXCIuL3NwaW5uZXIudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmNvbnN0IGZpbHRlcl90YWJsZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkgPSByZWYoW10pXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlzX250b3BfZW50ZXJwcmlzZV9tOiBCb29sZWFuLFxuICAgIGNzcmY6IFN0cmluZyxcbiAgICB2bGFuczogQXJyYXksXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIGFnZ3JlZ2F0aW9uX2NyaXRlcmlhOiBTdHJpbmcsXG4gICAgcGFnZTogTnVtYmVyLFxuICAgIHNvcnQ6IFN0cmluZyxcbiAgICBvcmRlcjogU3RyaW5nLFxuICAgIHN0YXJ0OiBOdW1iZXIsXG4gICAgbGVuZ3RoOiBOdW1iZXIsXG4gICAgaG9zdDogU3RyaW5nLFxufSk7XG5jb25zdCBjb250ZXh0ID0gcmVmKHtcbiAgICBjc3JmOiBwcm9wcy5jc3JmLFxuICAgIGlmaWQ6IHByb3BzLmlmaWRcbn0pXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG4vKiBMNCBQcm90b2NvbCBMaXN0ICovXG5jb25zdCBjcml0ZXJpYV9saXN0X2RlZiA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcInRjcFwiKSwgdmFsdWU6IDYsIHBhcmFtOiBcInRjcFwiLCB0YWJsZV9pZDogXCJ0Y3BfcG9ydHNfYW5hbHlzaXNcIiwgZW50ZXJwcmlzZV9tOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwidWRwXCIpLCB2YWx1ZTogMTcsIHBhcmFtOiBcInVkcFwiLCB0YWJsZV9pZDogXCJ1ZHBfcG9ydHNfYW5hbHlzaXNcIiwgZW50ZXJwcmlzZV9tOiBmYWxzZSB9LFxuXTtcblxuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHNlbGVjdGVkX2NyaXRlcmlhID0gcmVmKGNyaXRlcmlhX2xpc3RfZGVmWzBdKTtcbmNvbnN0IHRhYmxlX2lkID0gcmVmKCdzZXJ2ZXJfcG9ydHNfYW5hbHlzaXMnKTtcbmNvbnN0IHNlbGVjdGVkX3BvcnQgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfYXBwbGljYXRpb24gPSByZWYoe30pO1xuY29uc3QgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzID0gcmVmKCk7XG5cbmxldCBwb3J0X2xpc3QgPSByZWYoW10pO1xubGV0IGFwcGxpY2F0aW9uX2xpc3QgPSByZWYoW10pO1xuXG5jb25zdCBjcml0ZXJpYV9saXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9wcy5pc19udG9wX2VudGVycHJpc2VfbSkge1xuICAgICAgICByZXR1cm4gcmVmKGNyaXRlcmlhX2xpc3RfZGVmKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBjcml0ZXJhX2xpc3RfZGVmX2NvbSA9IFtdO1xuICAgICAgICBjcml0ZXJpYV9saXN0X2RlZi5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWMuZW50ZXJwcmlzZV9tKVxuICAgICAgICAgICAgICAgIGNyaXRlcmFfbGlzdF9kZWZfY29tLnB1c2goYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVmKGNyaXRlcmFfbGlzdF9kZWZfY29tKTtcbiAgICB9XG59KCk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgbGV0IHBvcnQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgncG9ydCcpO1xuICAgIGxldCBsNF9wcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdwcm90b2NvbCcpO1xuICAgIGNvbnN0IGw3X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2FwcGxpY2F0aW9uJyk7XG5cbiAgICBpZiAocG9ydCAhPSBudWxsICYmIHBvcnQubG9jYWxlQ29tcGFyZShcIlwiKSAhPSAwICYmXG4gICAgICAgIGw0X3Byb3RvICE9IG51bGwgJiYgbDRfcHJvdG8ubG9jYWxlQ29tcGFyZShcIlwiKSAhPSAwICYmXG4gICAgICAgIGw3X3Byb3RvICE9IG51bGwgJiYgbDdfcHJvdG8ubG9jYWxlQ29tcGFyZShcIlwiKSAhPSAwKSB7XG4gICAgICAgIFxuICAgICAgICBwb3J0ID0gTnVtYmVyKHBvcnQpO1xuICAgICAgICBsNF9wcm90byA9IE51bWJlcihsNF9wcm90byk7XG4gICAgICAgIGNyaXRlcmlhX2xpc3RfZGVmLmZvckVhY2goKHByb3RvKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvdG8udmFsdWUgPT0gbDRfcHJvdG8pIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZSA9IHByb3RvO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGF3YWl0IHVwZGF0ZV9kcm9wZG93bl9tZW51cyhmYWxzZSwgbDdfcHJvdG8sIHBvcnQpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUgPSBjcml0ZXJpYV9saXN0X2RlZlswXTtcbiAgICAgICAgYXdhaXQgdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGZhbHNlKTtcblxuICAgIH1cblxuICAgIGxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldygpO1xuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG5cblxufSk7XG5cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiBGdW5jdGlvbiB0byB1cGRhdGUgTDQgUHJvdG9jb2wgKi9cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9jcml0ZXJpYSgpIHtcbiAgICBhd2FpdCB1cGRhdGVfZHJvcGRvd25fbWVudXMoZmFsc2UpO1xuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG5cbn07XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBBcHBsaWNhdGlvbiAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX3BvcnRfbGlzdCgpIHtcbiAgICBhd2FpdCB1cGRhdGVfZHJvcGRvd25fbWVudXModHJ1ZSlcbiAgICB0YWJsZV9zZXJ2ZXJfcG9ydHNfYW5hbHlzaXMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xufVxuXG4vKiBGdW5jdGlvbiB0byB1cGRhdGUgcG9ydCAqL1xuZnVuY3Rpb24gdXBkYXRlX3BvcnQoKSB7XG4gICAgc2V0X3BvcnRfaW5fdXJsKCk7XG4gICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuZnVuY3Rpb24gc2V0X3BvcnRfaW5fdXJsKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInBvcnRcIiwgc2VsZWN0ZWRfcG9ydC52YWx1ZS5pZCk7XG59XG5cblxuLyogRnVuY3Rpb24gdG8gbG9hZCBmaWx0ZXJzIChKdXN0IFZMQU5zKSAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGFjdGlvbiwgZmlsdGVyKSB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IGdldF9leHRyYV9wYXJhbXNfb2JqKCk7XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMoZXh0cmFfcGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9ob3N0L2hvc3RzX2RldGFpbHNfYnlfcG9ydF9maWx0ZXJzLmx1YT9hY3Rpb249JHthY3Rpb259JiR7dXJsX3BhcmFtc31gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQuYWN0aW9uIHx8IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIGRhdGFfbG9hZGVkOiBhY3Rpb24gIT0gJ292ZXJ2aWV3JyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHQudmFsdWUsXG4gICAgICAgICAgICBoaWRkZW46ICh0LnZhbHVlLmxlbmd0aCA9PSAxKVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24gPSAoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKF8pID0+IHtcbiAgICAgICAgbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KTtcbiAgICB9O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KSB7XG4gICAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBpZiAoZmlsdGVyLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBuZXdfZmlsdGVyX2FycmF5ID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGZpbHRlci5pZCwgZmlsdGVyKTtcbiAgICAgICAgZmlsdGVyLm9wdGlvbnMgPSBuZXdfZmlsdGVyX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gZmlsdGVyLmlkKS5vcHRpb25zO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICBsZXQgZHJvcGRvd24gPSBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkudmFsdWVbZmlsdGVyX2luZGV4XTtcbiAgICAgICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gICAgfVxuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSBmYWxzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KGFjdGlvbikge1xuICAgIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShcIm92ZXJ2aWV3XCIpO1xuICAgIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKTtcbn1cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFjdGlvbnMgZW50cmllcyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgICAgICBcImNsaWNrX2J1dHRvbl9mbG93c1wiOiBjbGlja19idXR0b25fZmxvd3MsXG4gICAgfTtcbiAgICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZmxvd3MoZXZlbnQpIHtcbiAgICBsaXZlX2Zsb3dzKGV2ZW50LnJvdy5pcCk7XG59XG5cbmNvbnN0IGxpdmVfZmxvd3MgPSBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgbDRwcm90bzogc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUsXG4gICAgICAgIHNlcnZlcjogZGF0YSxcbiAgICAgICAgcG9ydDogc2VsZWN0ZWRfcG9ydC52YWx1ZS5pZCxcbiAgICAgICAgdmxhbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZsYW5faWQnKVxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGAke3VybH1gKTtcbn07XG5cbmZ1bmN0aW9uIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKSB7XG4gICAgZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVlLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZWwuYmFzaWNfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZWwuYmFzaWNfbGFiZWwgPSBlbC5sYWJlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVybF9lbnRyeSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGVsLmlkKVxuICAgICAgICBpZiAodXJsX2VudHJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi52YWx1ZS50b1N0cmluZygpID09PSB1cmxfZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwubGFiZWwgPSBgJHtlbC5iYXNpY19sYWJlbH06ICR7b3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZX1gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGFkZF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChvcHQua2V5LCBgJHtvcHQudmFsdWV9YCk7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBkcm9wZG93biBtZW51cyAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGlzX2FwcGxpY2F0aW9uX3NlbGVjdGVkLCBhcHAsIHBvcnQpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJwcm90b2NvbFwiLCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaG9zdC9zZXJ2ZXJfcG9ydHMubHVhP3Byb3RvY29sPWAgKyBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZTtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgbGV0IHBvcnRzID0gW107XG4gICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZSA9IFtdO1xuICAgIHBvcnRfbGlzdC52YWx1ZSA9IFtdO1xuXG4gICAgcmVzLnJzcC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gaXRlbS5sN19wcm90b19uYW1lO1xuICAgICAgICBwb3J0cy5wdXNoKHsgbGFiZWw6IGAke2l0ZW0uc3J2X3BvcnR9LyR7bmFtZX0gKCR7aXRlbS5uX2hvc3RzfSlgLCBpZDogaXRlbS5zcnZfcG9ydCwgYXBwbGljYXRpb246IG5hbWUsIGFwcGxpY2F0aW9uX2lkOiBpdGVtLnByb3RvX2lkLG51bV9ob3N0czogaXRlbS5uX2hvc3RzLCB2bGFuX2lkOml0ZW0udmxhbl9pZCB9KVxuICAgIH0pXG5cbiAgICBwb3J0cy5mb3JFYWNoKChwb3J0KSA9PiB7XG4gICAgICAgIGxldCBwcm90b19pZCA9IE51bWJlcihwb3J0LmFwcGxpY2F0aW9uX2lkLnNwbGl0KCcuJylbMF0pO1xuICAgICAgICBpZiAoISBhcHBsaWNhdGlvbl9saXN0LnZhbHVlLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09IHByb3RvX2lkKSkge1xuICAgICAgICAgICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZS5wdXNoKHsgbGFiZWw6IHBvcnQuYXBwbGljYXRpb24sIGlkOiBwb3J0LmFwcGxpY2F0aW9uX2lkLCB2YWx1ZTogcHJvdG9faWQgfSk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGxldCB4ID0gYS5sYWJlbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsZXQgeSA9IGIubGFiZWwudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoeCA8IHkpIHsgcmV0dXJuIC0xOyB9XG4gICAgICAgIGlmICh4ID4geSkgeyByZXR1cm4gMTsgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KVxuXG4gICAgaWYgKCFpc19hcHBsaWNhdGlvbl9zZWxlY3RlZCkge1xuICAgICAgLy8gYnkgZGVmYXVsdCBzZWxlY3QgZmlyc3QgbDdfcHJvdG9cbiAgICAgIHNlbGVjdGVkX2FwcGxpY2F0aW9uLnZhbHVlID0gIChhcHAgPT0gbnVsbCkgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX2xpc3QudmFsdWVbMF0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fbGlzdC52YWx1ZS5maW5kKChpdGVtKSA9PiAoaXRlbS5pZCA9PSBhcHApKTtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiYXBwbGljYXRpb25cIiwgc2VsZWN0ZWRfYXBwbGljYXRpb24udmFsdWUuaWQpO1xuICAgIHBvcnRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uYXBwbGljYXRpb24gPT0gc2VsZWN0ZWRfYXBwbGljYXRpb24udmFsdWUubGFiZWwpXG4gICAgICAgICAgICBwb3J0X2xpc3QudmFsdWUucHVzaCh7IGxhYmVsOiBpdGVtLmlkICsgXCIgKFwiICsgaXRlbS5udW1faG9zdHMgKyBcIilcIiwgaWQ6IGl0ZW0uaWQsIHZhbHVlOiBpdGVtLmlkLCB2bGFuX2lkOiBpdGVtLnZsYW5faWQsIG5faG9zdHM6IGl0ZW0ubnVtX2hvc3RzIH0pO1xuICAgIH0pXG5cbiAgICBwb3J0X2xpc3QudmFsdWUuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBsZXQgeCA9IGEuaWQ7XG4gICAgICAgIGxldCB5ID0gYi5pZDtcblxuICAgICAgICBpZiAoeCA8IHkpIHsgcmV0dXJuIC0xOyB9XG4gICAgICAgIGlmICh4ID4geSkgeyByZXR1cm4gMTsgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KVxuXG4gICAgaWYgKHBvcnQgIT0gbnVsbCkge1xuICAgICAgICBwb3J0X2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT0gcG9ydCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX3BvcnQudmFsdWUgPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkX3BvcnQudmFsdWUgPSBwb3J0X2xpc3QudmFsdWVbMF07XG4gICAgfVxuXG4gICAgc2V0X3BvcnRfaW5fdXJsKCk7XG59XG5cbmZ1bmN0aW9uIGdldF9jb3VudF92bGFuX2hvc3RzKHZsYW5faWQpIHtcbiAgICBsZXQgY291bnRfdmxhbl9ob3N0ID0gMDtcbiAgICBwb3J0X2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS52bGFuX2lkID09IHZsYW5faWQpIHtcbiAgICAgICAgICAgIGNvdW50X3ZsYW5faG9zdCA9IGNvdW50X3ZsYW5faG9zdCArIGl0ZW0ubl9ob3N0c1xuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gY291bnRfdmxhbl9ob3N0O1xufVxuXG4vKiBGdW5jdGlvbiB0byBmb3JtYXQgZGF0YSAqL1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgICAgIFwiaXBcIjogKGlwLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9pcChpcCwgcm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IChuYW1lLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2hvc3RfbmFtZShuYW1lLCByb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1hY1wiOiAobWFjLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChtYWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfbWFjKG1hYywgcm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3RfdHJhZmZpY1wiOiAodG90X3RyYWZmaWMsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHRvdF90cmFmZmljICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKHRvdF90cmFmZmljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcbiAgICB9KTtcbiAgICAvLyBjb25zb2xlLmxvZyhjb2x1bW5zKTtcbiAgICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qIEZ1bmN0aW9uIHRvIGZvcm1hdCBJUCBsYWJlbCAqL1xuY29uc3QgZm9ybWF0X2lwID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChyb3dEYXRhLnZsYW5faWQgIT0gMClcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/c2VydmVyPSR7ZGF0YX0mdmxhbj0ke3Jvd0RhdGEudmxhbl9pZH0mcG9ydD0ke3NlbGVjdGVkX3BvcnQudmFsdWUuaWR9XCI+JHtkYXRhfUAke3Jvd0RhdGEudmxhbl9pZH08L2E+YDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9zZXJ2ZXI9JHtkYXRhfSZwb3J0PSR7c2VsZWN0ZWRfcG9ydC52YWx1ZS5pZH1cIj4ke2RhdGF9PC9hPmA7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuXG59XG5cbi8qIEZ1bmN0aW9uIHRvIGZvcm1hdCBNQUMgQWRkcmVzcyBsYWJlbCAqL1xuY29uc3QgZm9ybWF0X21hYyA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgaWYgKGRhdGEgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL21hY19kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YX1cIj4ke2RhdGF9PC9hPmA7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGZvcm1hdCBIb3N0IE5hbWUgbGFiZWwgKi9cbmNvbnN0IGZvcm1hdF9ob3N0X25hbWUgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHJvd0RhdGEudmxhbl9pZCAhPSAwKVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke3Jvd0RhdGEuaXB9JnZsYW49JHtyb3dEYXRhLnZsYW5faWR9XCI+JHtkYXRhfTwvYT5gXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtyb3dEYXRhLmlwfVwiPiR7ZGF0YX08L2E+YFxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cblxuICAgICAgPCEtLSBSZXBlYXRlciBUeXBlIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj5cblx0XHRcdFx0XHRcdDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5tb2RhbF9yZXBlYXRlcl9jb25maWcucmVwZWF0ZXJfdHlwZVwiKX19PC9iPlxuXHRcdFx0XHRcdDwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZVwiXG5cdFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3JlcGVhdGVyX3R5cGUoKVwiXG5cdFx0XHQgIDpvcHRpb25zPVwicmVwZWF0ZXJfdHlwZV9hcnJheVwiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gSVAgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHRcblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuXG5cdFx0PGRpdiB2LWlmPVwic2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9PSAnY3VzdG9tJ1wiID5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0xMFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLmlwXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgICA8aW5wdXQgdi1tb2RlbD1cImlwXCIgIEBpbnB1dD1cImNoZWNrX2VtcHR5X2hvc3RcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnBsYWNlaG9sZGVyPVwiaG9zdF9wbGFjZWhvbGRlclwiIHJlcXVpcmVkPlxuICAgIDwvZGl2PlxuICAgIFxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgICAgICAgXG5cdFx0XHRcdFx0XHRcblx0XHRcdDwhLS0gUG9ydCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdFxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC02XCI+XG5cblx0XHQ8ZGl2IHYtaWY9XCJzZWxlY3RlZF9yZXBlYXRlcl90eXBlLnZhbHVlID09ICdjdXN0b20nXCIgPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTEwXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcucG9ydFwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgICAgPGlucHV0IHYtbW9kZWw9XCJwb3J0XCIgIEBpbnB1dD1cImNoZWNrX2VtcHR5X3BvcnRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnBsYWNlaG9sZGVyPVwicG9ydF9wbGFjZWhvbGRlclwiIHJlcXVpcmVkPlxuICAgIFxuICAgIDwvZGl2PlxuXHRcdDwvZGl2PlxuICAgICAgPC9kaXY+XG48ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHRcblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtNlwiPlxuXHRcdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0xMFwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLmludGVyZmFjZXNcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdFx0XHRcdDxTZWxlY3RTZWFyY2ggcmVmPVwiaW50ZXJmYWNlc19zZWFyY2hcIlxuXHRcdFx0XHRcdFx0di1tb2RlbDpzZWxlY3RlZF9vcHRpb25zPVwic2VsZWN0ZWRfaW50ZXJmYWNlc1wiXG5cdFx0XHRcdFx0XHQ6b3B0aW9ucz1cImludGVyZmFjZV9hcnJheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDptdWx0aXBsZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9pbnRlcmZhY2VzX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQHVuc2VsZWN0X29wdGlvbj1cInJlbW92ZV9pbnRlcmZhY2VzX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZV9zZWxlY3RlZF9vcHRpb25zPVwiYWxsX2NyaXRlcmlhXCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cblx0XG5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuXG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cImludmFsaWRfaWZhY2VfbnVtYmVyIHx8IGRpc2FibGVfYWRkICYmIHJlcGVhdGVyX3R5cGUgPT0gJ2N1c3RvbSdcIiBAY2xpY2s9XCJhcHBseVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tidXR0b25fdGV4dH19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgaG9zdF9wbGFjZWhvbGRlciA9IGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5tdWx0aWNhc3RfaXBfcGxhY2Vob2xkZXInKVxuY29uc3QgcG9ydF9wbGFjZWhvbGRlciA9IGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5wb3J0X3BsYWNlaG9sZGVyJylcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfaW50ZXJmYWNlcyA9IHJlZihbXSk7XG5jb25zdCBpcCA9IHJlZihudWxsKTtcbmNvbnN0IHBvcnQgPSByZWYobnVsbCk7XG5jb25zdCByZXBlYXRlcl90eXBlID0gcmVmKHt2YWx1ZTogXCJtZG5zXCIsIGxhYmVsOiBcIk1ETlNcIiB9KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2VkaXQnLCAnYWRkJ10pXG5jb25zdCBpbnRlcmZhY2VzX3NlYXJjaCA9IHJlZihudWxsKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe30pO1xuXG5jb25zdCBjaGVja19lbXB0eV9ob3N0ID0gKCkgPT4ge1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKCdpcCcpKTtcbiAgZGlzYWJsZV9hZGQudmFsdWUgPSAhKHJlZ2V4LnRlc3QoaXAudmFsdWUpIHx8IGlwLnZhbHVlID09PSAnKicpO1xufVxuXG5cblxuY29uc3QgY2hlY2tfZW1wdHlfcG9ydCA9ICgpID0+IHtcblx0ZGlzYWJsZV9hZGQudmFsdWUgPSAocG9ydCA8IDEgfHwgcG9ydCA+IDY1NTM1KTtcbn1cblxuXG5cbmNvbnN0IHRpdGxlID0gcmVmKFwiXCIpO1xuXG5jb25zdCByZXBlYXRlcl90eXBlX2FycmF5ID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcubW9kYWxfcmVwZWF0ZXJfY29uZmlnLm1kbnNcIiksIHZhbHVlOiBcIm1kbnNcIiwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcubW9kYWxfcmVwZWF0ZXJfY29uZmlnLmN1c3RvbVwiKSwgdmFsdWU6IFwiY3VzdG9tXCIgfSxcbl07XG5cbmNvbnN0IHJlcGVhdGVyX2lkID0gcmVmKDApO1xuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSlcbmNvbnN0IGludmFsaWRfaWZhY2VfbnVtYmVyID0gcmVmKHRydWUpXG5cbmNvbnN0IHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUgPSByZWYoe30pO1xuXG5cbmNvbnN0IGludGVyZmFjZV9saXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmVkZ2UvaW50ZXJmYWNlcy5sdWFgO1xubGV0IGludGVyZmFjZV9saXN0O1xuY29uc3QgaW50ZXJmYWNlX2FycmF5ID0gcmVmKFtdKTtcblxuY29uc3Qgc2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UgPSByZWYoW10pO1xuXG5jb25zdCBidXR0b25fdGV4dCA9IHJlZihcIlwiKTtcblxuY29uc3QgYWxsX2NyaXRlcmlhID0gKGl0ZW0pID0+IHtcblx0c2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UudmFsdWUgPSBpdGVtO1xuXHRpbnZhbGlkX2lmYWNlX251bWJlci52YWx1ZSA9IGl0ZW0ubGVuZ3RoIDwgMjtcbn1cblxuY29uc3QgdXBkYXRlX2ludGVyZmFjZXNfc2VsZWN0ZWQgPSAoaXRlbXMpID0+IHtcblx0c2VsZWN0ZWRfaW50ZXJmYWNlcy52YWx1ZSA9IGl0ZW1zO1xufVxuXG5jb25zdCByZW1vdmVfaW50ZXJmYWNlc19zZWxlY3RlZCA9IChpdGVtX3RvX2RlbGV0ZSkgPT4ge1xuXHRzZWxlY3RlZF9pbnRlcmZhY2VzLnZhbHVlID0gc2VsZWN0ZWRfaW50ZXJmYWNlcy52YWx1ZS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ubGFiZWwgIT0gaXRlbV90b19kZWxldGUubGFiZWwpO1xufVxuXG5jb25zdCByZXNldF9tb2RhbCA9ICgpID0+IHtcblx0c2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9IHt9O1xuXHRpcC52YWx1ZSA9IFwiXCI7XG5cdHBvcnQudmFsdWUgPSBcIlwiO1xuXHRzZWxlY3RlZF9pbnRlcmZhY2VzLnZhbHVlID0gW107XG59XG5cbmNvbnN0IHNob3cgPSAocm93ICkgPT4ge1xuXHRyZXNldF9tb2RhbCgpO1xuICAgIGluaXQocm93KTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBpc19vcGVuX2luX2FkZCA9IHJlZih0cnVlKTtcblxuZnVuY3Rpb24gaW5pdChyb3cpIHtcbiAgICBpc19vcGVuX2luX2FkZC52YWx1ZSA9IHJvdyA9PSBudWxsO1xuXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCBvcGVuIGluIGVkaXRcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0XHRcdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9lZGl0XCIpO1xuXHRcdFx0YnV0dG9uX3RleHQudmFsdWUgPSBfaTE4bihcImVkaXRcIik7XG5cdFx0XHRyZXBlYXRlcl9pZC52YWx1ZSA9IHJvdy5yZXBlYXRlcl9pZDtcblx0XHRcdHJlcGVhdGVyX3R5cGVfYXJyYXkuZm9yRWFjaCgocykgPT4ge1xuXHRcdFx0XHRpZihzLmxhYmVsID09IHJvdy50eXBlKVxuXHRcdFx0XHRcdHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUgPSBzO1xuXHRcdFx0fSlcblxuXHRcdFx0aWYgKHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUudmFsdWUgPT0gJ2N1c3RvbScpIHtcblx0XHRcdFx0aXAudmFsdWUgPSByb3cuaXA7XG5cdFx0XHRcdHBvcnQudmFsdWUgPSByb3cucG9ydDtcblx0XHRcdH1cblxuXHRcdFx0Y2hhbmdlX3JlcGVhdGVyX3R5cGUocm93KVxuXG4gICAgfSBlbHNlIHtcblx0XHRcdHRpdGxlLnZhbHVlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy50aXRsZV9hZGRcIik7XG5cdFx0XHRidXR0b25fdGV4dC52YWx1ZSA9IF9pMThuKFwiYWRkXCIpO1xuXHRcdFx0bGV0IGRlZmF1bHRfdHlwZSA9IHJlcGVhdGVyX3R5cGVfYXJyYXkuZmluZCgocykgPT4gcy5kZWZhdWx0ID09IHRydWUpO1xuICAgIH1cblx0XHRcblx0XHRpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0XHRcdGNvbnN0IHJvd19pbnRlcmZhY2VzID0gcm93LmludGVyZmFjZXMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0bGV0IHRtcF9zZWxlY3RlZF9pbnRlcmZhY2VzID0gW107XG5cdFx0XHRyb3dfaW50ZXJmYWNlcy5mb3JFYWNoKChyb3dfaWZhY2UpID0+IHtcblx0XHRcdFx0aWYgKHJvd19pZmFjZSAhPSAnJyAmJiByb3dfaWZhY2UgIT0gbnVsbCkge1xuXHRcdFx0XHRcdHRtcF9zZWxlY3RlZF9pbnRlcmZhY2VzLnB1c2goaW50ZXJmYWNlX2FycmF5LnZhbHVlLmZpbmQoKGlmYWNlKSA9PiBpZmFjZS52YWx1ZSA9PSByb3dfaWZhY2UpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblxuXHRcdFx0c2VsZWN0ZWRfaW50ZXJmYWNlcy52YWx1ZSA9IHRtcF9zZWxlY3RlZF9pbnRlcmZhY2VzO1xuXHRcdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX3JlcGVhdGVyX3R5cGUodHlwZSkge1xuXHRcdHJlcGVhdGVyX3R5cGUudmFsdWUgPSBzZWxlY3RlZF9yZXBlYXRlcl90eXBlLnZhbHVlO1xuICAgIGlmIChyZXBlYXRlcl90eXBlLnZhbHVlLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcblx0XHRcdGF3YWl0IHNldF9pbnRlcmZhY2VfYXJyYXkoKTtcblx0XHR9XG59XG5cblxuXG5sZXQgaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9IGZhbHNlO1xuYXN5bmMgZnVuY3Rpb24gc2V0X2ludGVyZmFjZV9hcnJheSgpIHtcbiAgICBpZiAoaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRpZiAoaW50ZXJmYWNlX2xpc3QgPT0gbnVsbCkge1xuXHQgICAgaW50ZXJmYWNlX2xpc3QgPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoaW50ZXJmYWNlX2xpc3RfdXJsKTtcblx0fVxuXHRsZXQgcmVzX2ludGVyZmFjZV9saXN0ID0gYXdhaXQgaW50ZXJmYWNlX2xpc3Q7XG5cdGludGVyZmFjZV9hcnJheS52YWx1ZSA9IHJlc19pbnRlcmZhY2VfbGlzdC5maWx0ZXIoaSA9PiBpLnJvbGUgPT0gXCJsYW5cIikubWFwKChpKSA9PiB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdGxhYmVsOiBpLmxhYmVsLFxuXHRcdHZhbHVlOiBpLmlmbmFtZSxcblx0XHRcdH07XG5cdH0pO1xuICAgIGlzX3NldF9pbnRlcmZhY2VfYXJyYXkgPSB0cnVlO1xufVxuXG5cbmNvbnN0IGFwcGx5ID0gKCkgPT4ge1xuICAgIGxldCByZXBlYXRlcl90ID0gcmVwZWF0ZXJfdHlwZS52YWx1ZS5sYWJlbDtcblx0XHRcbiAgICBsZXQgb2JqID0ge1xuXHRcdFx0cmVwZWF0ZXJfdHlwZTogcmVwZWF0ZXJfdCxcbiAgICB9O1xuXHRcdGlmIChyZXBlYXRlcl90eXBlLnZhbHVlLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcblx0XHRcdGxldCBpcF90ID0gaXAudmFsdWU7XG5cdFx0XHRsZXQgcG9ydF90ID0gcG9ydC52YWx1ZTtcblx0XHRcdG9iaiA9IHtcblx0XHRcdFx0cmVwZWF0ZXJfdHlwZTogcmVwZWF0ZXJfdCxcblx0XHRcdFx0aXA6IGlwX3QsXG5cdFx0XHRcdHBvcnQ6IHBvcnRfdFxuICAgIFx0fTtcblx0XHR9XG4gICAgbGV0IGV2ZW50ID0gXCJhZGRcIjtcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0b2JqLnJlcGVhdGVyX2lkID0gcmVwZWF0ZXJfaWQudmFsdWU7XG5cdGV2ZW50ID0gXCJlZGl0XCI7XG4gICAgfVxuXG5cdGxldCBpbnRlcmZhY2VzID0gW107XG5cdGxldCBkZXRhaWxzID0gW107XG5cdFxuXHRzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZS5mb3JFYWNoKChpKSA9PiB7XG5cdFx0aW50ZXJmYWNlcy5wdXNoKGkudmFsdWUpO1xuXHRcdFxuXHRcdGlmKGkudmFsdWUgIT0gaS5sYWJlbCAmJiAhaS5sYWJlbC5pbmNsdWRlcyhpLnZhbHVlKSkge1xuXHRcdFx0ZGV0YWlscy5wdXNoKGkubGFiZWwrXCIgKFwiK2kudmFsdWUrXCIpXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXRhaWxzLnB1c2goaS5sYWJlbCk7XG5cdFx0fVxuXHR9KTtcblxuXHRjb25zdCB0bXBfaW50ZXJmYWNlcyA9IGludGVyZmFjZXMuam9pbihcIixcIik7XG5cdGNvbnN0IHRtcF9kZXRhaWxzID0gZGV0YWlscy5qb2luKFwiLFwiKTtcblxuXHRvYmouaW50ZXJmYWNlcyA9IHRtcF9pbnRlcmZhY2VzO1xuXHRvYmouaW50ZXJmYWNlX2RldGFpbHMgPSB0bXBfZGV0YWlscztcbiAgICBlbWl0KGV2ZW50LCBvYmopO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcblx0YXdhaXQgc2V0X2ludGVyZmFjZV9hcnJheSgpO1xuXG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuICAtLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cIm1iLTJcIj5cbiAgXG4gIDxoMj57eyBfaTE4bihcIm5lZGdlLnJlcGVhdGVyc19jb25maWdfdGl0bGVcIikgfX08L2gyPlxuICA8YnIgLz5cbiAgXG48L2Rpdj5cblxuPGRpdiBpZD1cImFnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiPlxuICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX3J1bGVzXCJcblx0ICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCJcblx0ICAgICA6Y29sdW1uc19jb25maWc9XCJ0YWJsZV9jb25maWcuY29sdW1uc19jb25maWdcIlxuXHQgICAgIDpkYXRhX3VybD1cInRhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG5cdCAgICAgOmZpbHRlcl9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2ZpbHRlcnNcIlxuXHQgICAgIDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuXHQgICAgIDp0YWJsZV9jb25maWc9XCJ0YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gIDwvRGF0YXRhYmxlPlxuPC9kaXY+XG48TW9kYWxBZGRSZXBlYXRlckNvbmZpZyByZWY9XCJtb2RhbF9hZGRfcmVwZWF0ZXJfY29uZmlnXCIgQGFkZD1cImFkZF9yZXBlYXRlclwiIEBlZGl0PVwiZWRpdF9yZXBlYXRlclwiPjwvTW9kYWxBZGRSZXBlYXRlckNvbmZpZz5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRSZXBlYXRlckNvbmZpZyB9IGZyb20gXCIuL21vZGFsLW5lZGdlLWFkZC1yZXBlYXRlci1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0aW1lb3V0X2RlbGV0ZSA9IDEgKiA1MDA7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHVybDogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgY29sdW1uc19jb25maWc6IEFycmF5XG59KTtcblxuY29uc3QgdGFibGVfY29uZmlnID0gcmVmKHt9KTtcbmNvbnN0IHRhYmxlX3J1bGVzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZyA9IHJlZihudWxsKTtcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0X2RhdGF0YWJsZV9jb25maWcoKTtcbn0pO1xuXG5mdW5jdGlvbiBlZGl0X3JlcGVhdGVyKHJlcGVhdGVyKSB7ICAgIFxuICAgIGNvbnN0IGVkaXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2VkaXQvbmVkZ2UvZm9yd2FyZGVyLmx1YWA7XG4gICAgc2V0X3J1bGUocmVwZWF0ZXIsIGVkaXRfdXJsKTtcbn1cblxuZnVuY3Rpb24gYWRkX3JlcGVhdGVyKHJlcGVhdGVyKSB7XG4gICAgY29uc3QgYWRkX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9hZGQvbmVkZ2UvZm9yd2FyZGVyLmx1YWA7XG4gICAgc2V0X3J1bGUocmVwZWF0ZXIsIGFkZF91cmwpO1xufVxuXG5cbmZ1bmN0aW9uIHNldF9ydWxlKHJ1bGUsIHVybCkge1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgLi4ucnVsZSwgY3NyZjogcHJvcHMuY3NyZn0pO1xuICAgIFxuICAgIG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cblxuXG5jb25zdCBmb3JtYXRfaW50ZXJmYWNlcyA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHsgXG4gICAgcmV0dXJuIGRhdGEuc3BsaXQoXCIsXCIpLmpvaW4oXCIsIFwiKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhdGFibGVfY29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICAgIFxuICAgIGxldCBwYXJhbXMgPSB7IFxuXHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuaWZpZCxcdFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBcbiAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG5cdHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG5cdGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcblx0YWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuXHQgICAgcmVmcmVzaF90YWJsZSgpO1xuICAgICAgICAgICAgLy8gdGFibGVfcnVsZXMudmFsdWUucmVsb2FkKCk7XG5cdH1cbiAgICB9LCB7XG5cdHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG5cdGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcblx0YWN0aW9uOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBtb2RhbF9hZGRfcmVwZWF0ZXJfY29uZmlnLnZhbHVlLnNob3cobnVsbCk7XG5cdH1cbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcblx0dGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuXHRkYXRhX3VybDogYCR7cHJvcHMudXJsfT8ke3VybF9wYXJhbXN9YCxcblx0ZW5hYmxlX3NlYXJjaDogZmFsc2UsXG4gICAgfTtcbiAgICBcbiAgICBsZXQgY29sdW1ucyA9IFtcblx0IHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLnR5cGVcIiksIHRhcmdldHM6IDAsIG5hbWU6ICd0eXBlJywgZGF0YTogJ3R5cGUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWxlZnQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcblx0fSxcbiAgICAgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcuaXBcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdpcCcsIGRhdGE6ICdpcCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtbGVmdCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuXHR9LFxuICAgICB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5wb3J0XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1sZWZ0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG5cdH0sXG4gICAge1xuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pbnRlcmZhY2VzXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnaW50ZXJmYWNlcycsIGRhdGE6ICdkZXRhaWxzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1sZWZ0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhLF8scm93RGF0YSkgIHtcblx0XHQgICAgcmV0dXJuIGZvcm1hdF9pbnRlcmZhY2VzKGRhdGEsIHJvd0RhdGEpfVxuXHR9LFxuICAgIF07XG4gICAgbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBjb2x1bW5zLm1hcCgoYykgPT4gYyk7XG4gICAgLy8gbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBwcm9wcy5jb2x1bW5zX2NvbmZpZy5tYXAoKGMpID0+IGMpO1xuICAgIHdyYXBfY29sdW1uc19jb25maWcucHVzaCh7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfSk7XG4gICAgXG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IHdyYXBfY29sdW1uc19jb25maWc7XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICAgIGxldCBkZWxldGVfaGFuZGxlciA9IHtcblx0aGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHRvbkNsaWNrOiAoKSA9PiB7XG5cdCAgICBkZWxldGVfcnVsZShyb3dEYXRhKTtcblx0fSxcbiAgICB9O1xuICAgIFxuICAgIGxldCBlZGl0X2hhbmRsZXIgPSB7XG5cdGhhbmRsZXJJZDogXCJlZGl0X3J1bGVcIixcblx0b25DbGljazogKCkgPT4ge1xuXHQgICAgbW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZy52YWx1ZS5zaG93KHJvd0RhdGEpO1xuXHR9LFxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG5cdHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsIGljb246ICdmYS1lZGl0JywgdGl0bGU6IGkxOG4oJ2VkaXQnKSB9LFxuXHR7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBoYW5kbGVySWQ6IFwiZGVsZXRlX3J1bGVcIiwgaWNvbjogJ2ZhLXRyYXNoJywgdGl0bGU6IGkxOG4oJ2RlbGV0ZScpIH0sXG4gICAgXSk7XG59O1xuXG5mdW5jdGlvbiBkZWxldGVfcnVsZShyZXBlYXRlcikge1xuICAgIGNvbnN0IGFkZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL25lZGdlL2ZvcndhcmRlci5sdWFgO1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgcmVwZWF0ZXJfaWQ6IHJlcGVhdGVyLnJlcGVhdGVyX2lkLCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgXG4gICAgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGFkZF91cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG5cdG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG4gXHQvLyB0YWJsZV9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbiAgICB9LCB0aW1lb3V0X2RlbGV0ZSk7XG59XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRlbGV0ZV9pbmFjdGl2ZV9ob3N0X3RpdGxlXCIpIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICB7eyBtZXNzYWdlIH19XG4gICAgICA8ZGl2IHYtaWY9XCJzaG93X3JldHVybl9tc2dcIiBjbGFzcz1cInRleHQtbGVmdFwiPlxuICAgICAgICA8cCBjbGFzcz1cInRleHQtc20tc3RhcnQgZnMtNiBmdy1tZWRpdW0gcHQtMyBtLTBcIiA6Y2xhc3M9XCIoZXJyKSA/ICd0ZXh0LWRhbmdlcicgOiAndGV4dC1zdWNjZXNzJ1wiPjxzbWFsbD57eyByZXR1cm5fbWVzc2FnZSB9fTwvc21hbGw+PC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfaG9zdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3sgX2kxOG4oXCJkZWxldGVcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBtZXNzYWdlID0gcmVmKCcnKVxuY29uc3QgcmV0dXJuX21lc3NhZ2UgPSByZWYoJycpXG5jb25zdCBzaG93X3JldHVybl9tc2cgPSByZWYoZmFsc2UpXG5jb25zdCBlcnIgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZGVsZXRlX2hvc3RcIl0pO1xuY29uc3Qgcm93X2lkID0gcmVmKHt9KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge30pO1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfaG9zdCgpIHtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9ob3N0L2luYWN0aXZlX2hvc3QubHVhYDtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgc2VyaWFsX2tleTogcm93X2lkLnZhbHVlLFxuICB9O1xuXG4gIGxldCBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfTtcbiAgY29uc3QgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTsgXG4gIGlmKHJlcykge1xuICAgIGVyci52YWx1ZSA9IGZhbHNlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IG51bV9ob3N0c19tc2cgPSAnJ1xuICAgIGlmKHJlcy5kZWxldGVkX2hvc3RzID4gMSkge1xuICAgICAgbnVtX2hvc3RzX21zZyA9ICcuIE51bWJlciBob3N0cyBkZWxldGVkOiAnICsgcmVzLmRlbGV0ZWRfaG9zdHNcbiAgICB9XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdzdWNjX2RlbF9pbmFjdGl2ZV9ob3N0cycpICsgbnVtX2hvc3RzX21zZ1xuICAgIGVtaXQoXCJkZWxldGVfaG9zdFwiKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGVyci52YWx1ZSA9IHRydWU7XG4gICAgc2hvd19yZXR1cm5fbXNnLnZhbHVlID0gdHJ1ZTtcbiAgICByZXR1cm5fbWVzc2FnZS52YWx1ZSA9IGkxOG4oJ2Vycl9kZWxfaW5hY3RpdmVfaG9zdHMnKVxuICB9XG59XG5cblxuY29uc3Qgc2hvdyA9IChfcm93X2lkLCBfbWVzc2FnZSkgPT4ge1xuICByb3dfaWQudmFsdWUgPSBfcm93X2lkO1xuICBtZXNzYWdlLnZhbHVlID0gX21lc3NhZ2U7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xuICB9LCAzMDAwIC8qIDMgc2Vjb25kcyAqLylcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRlbGV0ZVwiKSB9fVxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAge3sgX2kxOG4oXCJkZWxldGVfc2luY2VcIikgfX1cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC0zXCIgc3R5bGU9XCJtYXgtd2lkdGg6IDhyZW07XCI+XG4gICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9lcG9jaFwiIDpvcHRpb25zPVwiZXBvY2hfbGlzdFwiIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX29wdGlvblwiPlxuICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWlmPVwic2hvd19yZXR1cm5fbXNnXCIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj5cbiAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LXNtLXN0YXJ0IGZzLTYgZnctbWVkaXVtIHB0LTMgbS0wXCIgOmNsYXNzPVwiKGVycikgPyAndGV4dC1kYW5nZXInIDogJ3RleHQtc3VjY2VzcydcIj48c21hbGw+e3sgcmV0dXJuX21lc3NhZ2UgfX08L3NtYWxsPjwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfaG9zdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3sgX2kxOG4oXCJkZWxldGVcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZm9ybWF0ID0gcmVmKCdjc3YnKTtcbmNvbnN0IHNlbGVjdGVkX2Vwb2NoID0gcmVmKCk7XG5jb25zdCByZXR1cm5fbWVzc2FnZSA9IHJlZignJylcbmNvbnN0IHNob3dfcmV0dXJuX21zZyA9IHJlZihmYWxzZSlcbmNvbnN0IGVyciA9IHJlZihmYWxzZSk7XG5jb25zdCBlcG9jaF9saXN0ID0gW1xuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuNV9taW5cIiksIHZhbHVlOiAzMDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pblwiKSwgdmFsdWU6IDE4MDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXJcIiksIHZhbHVlOiAzNjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy4yX2hvdXJzXCIpLCB2YWx1ZTogNzIwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuNl9ob3Vyc1wiKSwgdmFsdWU6IDIxNjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3Vyc1wiKSwgdmFsdWU6IDQzMjAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy5kYXlcIiksIHZhbHVlOiA4NjQwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMud2Vla1wiKSwgdmFsdWU6IDYwNDgwMCB9LFxuXTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRlbGV0ZV9ob3N0XCJdKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHsgXG4gIHNlbGVjdGVkX2Vwb2NoLnZhbHVlID0gZXBvY2hfbGlzdFswXTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVfb3B0aW9uKHNlbGVjdGVkX3ZhbHVlKSB7XG4gIHNlbGVjdGVkX2Vwb2NoLnZhbHVlID0gc2VsZWN0ZWRfdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV9ob3N0KCkge1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL2hvc3QvaW5hY3RpdmVfaG9zdC5sdWFgO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICBzZXJpYWxfa2V5OiBzZWxlY3RlZF9lcG9jaC52YWx1ZS52YWx1ZSxcbiAgfTtcblxuICBsZXQgaGVhZGVycyA9IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH07XG4gIGNvbnN0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gIGlmKHJlcykge1xuICAgIGVyci52YWx1ZSA9IGZhbHNlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IG51bV9ob3N0c19tc2cgPSAnJ1xuICAgIGlmKHJlcy5kZWxldGVkX2hvc3RzID4gMSkge1xuICAgICAgbnVtX2hvc3RzX21zZyA9ICcuIE51bWJlciBob3N0cyBkZWxldGVkOiAnICsgcmVzLmRlbGV0ZWRfaG9zdHNcbiAgICB9XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdzdWNjX2RlbF9pbmFjdGl2ZV9ob3N0cycpICsgbnVtX2hvc3RzX21zZ1xuICAgIGVtaXQoXCJkZWxldGVfaG9zdFwiKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIGVyci52YWx1ZSA9IHRydWU7XG4gICAgc2hvd19yZXR1cm5fbXNnLnZhbHVlID0gdHJ1ZTtcbiAgICByZXR1cm5fbWVzc2FnZS52YWx1ZSA9IGkxOG4oJ2Vycl9kZWxfaW5hY3RpdmVfaG9zdHMnKVxuICB9XG59XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xuICB9LCAzMDAwIC8qIDMgc2Vjb25kcyAqLylcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyBfaTE4bihcImRvd25sb2FkXCIpIH19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICB7eyBfaTE4bihcImRvd25sb2FkX2Zvcm1hdFwiKSB9fVxuICAgICAgPGRpdiBjbGFzcz1cIm10LTNcIiBzdHlsZT1cIm1heC13aWR0aDogOHJlbTtcIj5cbiAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9mb3JtYXRcIiA6b3B0aW9ucz1cImZvcm1hdF9saXN0XCIgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfb3B0aW9uXCI+XG4gICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cblxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7IF9pMThuKFwiZG93bmxvYWRcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZm9ybWF0ID0gcmVmKCdjc3YnKTtcbmNvbnN0IHNlbGVjdGVkX2Zvcm1hdCA9IHJlZigpO1xuY29uc3QgZm9ybWF0X2xpc3QgPSBbXG4gIHsgbGFiZWw6IF9pMThuKFwiY3N2XCIpLCB2YWx1ZTogXCJjc3ZcIiwgcGFyYW06IFwiY3N2XCIgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJqc29uXCIpLCB2YWx1ZTogXCJqc29uXCIsIHBhcmFtOiBcImpzb25cIiB9LFxuXTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRvd25sb2FkXCJdKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHsgXG4gIHNlbGVjdGVkX2Zvcm1hdC52YWx1ZSA9IGZvcm1hdF9saXN0WzBdO1xufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZV9vcHRpb24oc2VsZWN0ZWRfdmFsdWUpIHtcbiAgc2VsZWN0ZWRfZm9ybWF0LnZhbHVlID0gc2VsZWN0ZWRfdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBsZXQgcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICBwYXJhbXMuZG93bmxvYWQgPSB0cnVlO1xuICBwYXJhbXMuZm9ybWF0ID0gc2VsZWN0ZWRfZm9ybWF0LnZhbHVlLnZhbHVlO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvaW5hY3RpdmVfbGlzdC5sdWE/YCArIG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBudG9wbmdfdXRpbGl0eS5kb3dubG9hZF9VUkkodXJsLCBcImluYWN0aXZlX2hvc3RzLlwiICsgc2VsZWN0ZWRfZm9ybWF0LnZhbHVlLnZhbHVlKTtcbiAgZW1pdChcImRvd25sb2FkXCIpO1xuICBjbG9zZSgpO1xufVxuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxUYWJMaXN0IHJlZj1cImluYWN0aXZlX2hvc3RzX3RhYl9saXN0XCIgaWQ9XCJpbmFjdGl2ZV9ob3N0c190YWJfbGlzdFwiIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2hhbmdlX3Nob3dfY2hhcnRzXCI+XG4gICAgICAgICAgPC9UYWJMaXN0PlxuICAgICAgICAgIDwhLS1cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keSBwLTFcIj5cbiAgICAgICAgICAgICAgPHRyYW5zaXRpb24gbmFtZT1cImNvbXBvbmVudC1mYWRlXCIgbW9kZT1cIm91dC1pblwiPlxuICAgICAgICAgICAgICAgIDxkaXYga2V5PVwiMVwiIHYtaWY9XCJzaG93X2NoYXJ0cyA9PSB0cnVlXCIgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfdHJhZmZpY1wiPlxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdHJhbnNpdGlvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIEBjbGljaz1cImNoYW5nZV9zaG93X2NoYXJ0c1wiPlxuICAgICAgICAgICAgPGkgdi1pZj1cInNob3dfY2hhcnRzID09IGZhbHNlXCIgY2xhc3M9XCJmYS1zb2xpZCBmYS1hbmdsZXMtZG93blwiPjwvaT5cbiAgICAgICAgICAgIDxpIHYtZWxzZSBjbGFzcz1cImZhLXNvbGlkIGZhLWFuZ2xlcy11cFwiPjwvaT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAtLT5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBrZXk9XCIxXCIgdi1pZj1cInNob3dfY2hhcnRzID09IHRydWVcIiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2hvd19jaGFydHMgPT0gdHJ1ZVwiIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICAgIDxDaGFydCA6cmVmPVwiY2hhcnRfb3B0aW9uLnJlZlwiIDppZD1cImNoYXJ0X29wdGlvbi5pZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cInRydWVcIj5cbiAgICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyB2LWVsc2UgcmVmPVwidGFibGVfaW5hY3RpdmVfaG9zdHNcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDpjc3JmPVwiY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCIgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24gdi1mb3I9XCIodCwgdF9pbmRleCkgaW4gZmlsdGVyX3RhYmxlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDptZW51PlxuICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIiBAY2xpY2s9XCJhZGRfdGFibGVfZmlsdGVyKG9wdCwgJGV2ZW50LCB0LCB0X2luZGV4KVwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlclwiIDp0aXRsZT1cIm9wdC52YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwib3B0LmNvdW50ID09IG51bGxcIj57eyBvcHQubGFiZWwgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgb3B0LmxhYmVsICsgXCIgKFwiICsgb3B0LmNvdW50ICsgXCIpXCIgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+IDwhLS0gRHJvcGRvd24gZmlsdGVycyAtLT5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlciBtdC0zXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiByZWY9XCJkZWxldGVfYWxsXCIgQGNsaWNrPVwiZGVsZXRlX2FsbF9lbnRyaWVzXCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGlcbiAgICAgICAgICAgICAgICBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IF9pMThuKFwiZGVsZXRlX2FsbF9lbnRyaWVzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiByZWY9XCJkZWxldGVfb2xkZXJcIiBAY2xpY2s9XCJkZWxldGVfZW50cmllc19zaW5jZVwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpXG4gICAgICAgICAgICAgICAgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBfaTE4bihcImRlbGV0ZV9vbGRlclwiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcmVmPVwiZG93bmxvYWRcIiBAY2xpY2s9XCJkb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIj48aVxuICAgICAgICAgICAgICAgIGNsYXNzPSdmYXMgZmEtZG93bmxvYWQnPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxNb2RhbERlbGV0ZUluYWN0aXZlSG9zdCByZWY9XCJtb2RhbF9kZWxldGVcIiA6Y29udGV4dD1cImNvbnRleHRcIiBAZGVsZXRlX2hvc3Q9XCJyZWZyZXNoX3RhYmxlXCI+PC9Nb2RhbERlbGV0ZUluYWN0aXZlSG9zdD5cbiAgPE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2ggcmVmPVwibW9kYWxfZGVsZXRlX29sZGVyXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgQGRlbGV0ZV9ob3N0PVwicmVmcmVzaF90YWJsZVwiPlxuICA8L01vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2g+XG4gIDxNb2RhbERvd25sb2FkSW5hY3RpdmVIb3N0IHJlZj1cIm1vZGFsX2Rvd25sb2FkXCIgOmNvbnRleHQ9XCJjb250ZXh0XCI+PC9Nb2RhbERvd25sb2FkSW5hY3RpdmVIb3N0PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgbmV4dFRpY2ssIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0IH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlSW5hY3RpdmVIb3N0RXBvY2ggfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtaW5hY3RpdmUtaG9zdC1lcG9jaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEb3dubG9hZEluYWN0aXZlSG9zdCB9IGZyb20gXCIuL21vZGFsLWRvd25sb2FkLWluYWN0aXZlLWhvc3QudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignaW5hY3RpdmVfaG9zdHMnKTtcbmNvbnN0IHRpdGxlID0gcmVmKF9pMThuKCdsb2NhbF9ob3N0c19vbmx5JykpO1xuY29uc3QgZmlsdGVyX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSk7XG5jb25zdCB0YWJsZV9pbmFjdGl2ZV9ob3N0cyA9IHJlZigpO1xuY29uc3QgbW9kYWxfZG93bmxvYWQgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZSA9IHJlZigpO1xuY29uc3QgbW9kYWxfZGVsZXRlX29sZGVyID0gcmVmKCk7XG5jb25zdCBjaGFydF8xID0gcmVmKCk7XG5jb25zdCBjaGFydF8yID0gcmVmKCk7XG5jb25zdCBjaGFydF8zID0gcmVmKCk7XG5jb25zdCBzaG93X2NoYXJ0cyA9IHJlZihmYWxzZSk7XG5jb25zdCBpbmFjdGl2ZV9ob3N0c190YWJfbGlzdCA9IHJlZigpO1xuY29uc3QgYXBwbGljYXRpb25zX3RhYiA9IHJlZigpO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG4gIHNob3dfaGlzdG9yaWNhbDogQm9vbGVhbixcbn0pO1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNzcmYsXG4gIGlmaWQ6IHByb3BzLmlmaWRcbn0pXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgcmVmOiBjaGFydF8xLFxuICAgIHRpdGxlOiBpMThuKCdhY3RpdmVfaW5hY3RpdmUnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9pbmFjdGl2ZS9hY3RpdmVfaW5hY3RpdmUubHVhYCxcbiAgICBpZDogYGFjdGl2ZV9pbmFjdGl2ZV9kaXN0cm9gLFxuICB9LFxuICB7XG4gICAgcmVmOiBjaGFydF8yLFxuICAgIHRpdGxlOiBpMThuKCdpbmFjdGl2aXR5X3BlcmlvZCcpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlL2luYWN0aXZpdHlfcGVyaW9kLmx1YWAsXG4gICAgaWQ6IGBpbmFjdGl2aXR5X3BlcmlvZGAsXG4gIH0sXG4gIHtcbiAgICByZWY6IGNoYXJ0XzMsXG4gICAgdGl0bGU6IGkxOG4oJ21hbnVmYWN0dXJlcicpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlL2luYWN0aXZlX21hbnVmYWN0dXJlci5sdWFgLFxuICAgIGlkOiBgaW5hY3RpdmVfbWFudWZhY3R1cmVyYCxcbiAgfSxcbl1cblxuY29uc3QgdGFiX2xpc3QgPSByZWYoW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ3RhYmxlX3ZpZXcnKSxcbiAgICBhY3RpdmU6IChzaG93X2NoYXJ0cy52YWx1ZSA9PSBmYWxzZSksXG4gICAgaWQ6IFwidGFibGVcIlxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2NoYXJ0X3ZpZXcnKSxcbiAgICBhY3RpdmU6IChzaG93X2NoYXJ0cy52YWx1ZSA9PSB0cnVlKSxcbiAgICBpZDogXCJjaGFydFwiXG4gIH0sXG5dKVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIuaWQpO1xuICB9KTtcbiAgbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duID0gKGZpbHRlciwgZmlsdGVyX2luZGV4KSA9PiB7XG4gIHJldHVybiAoXykgPT4ge1xuICAgIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCk7XG4gIH07XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShcIm92ZXJ2aWV3XCIpO1xuICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKSB7XG4gIGZpbHRlcl90YWJsZV9hcnJheS52YWx1ZS5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBpZiAoZWwuYmFzaWNfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgZWwuYmFzaWNfbGFiZWwgPSBlbC5sYWJlbDtcbiAgICB9XG5cbiAgICBjb25zdCB1cmxfZW50cnkgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShlbC5pZClcbiAgICBpZiAodXJsX2VudHJ5ICE9IG51bGwpIHtcbiAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb24udmFsdWUudG9TdHJpbmcoKSA9PT0gdXJsX2VudHJ5KSB7XG4gICAgICAgICAgZWwubGFiZWwgPSBgJHtlbC5iYXNpY19sYWJlbH06ICR7b3B0aW9uLmxhYmVsIHx8IG9wdGlvbi52YWx1ZX1gXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmxhYmVsID0gYCR7ZWwuYmFzaWNfbGFiZWx9OiAke2VsLm9wdGlvbnNbMF0ubGFiZWwgfHwgZWwub3B0aW9uc1swXS52YWx1ZX1gXG4gICAgfVxuICB9KVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpIHtcbiAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gIGF3YWl0IG5leHRUaWNrKCk7XG4gIGlmIChmaWx0ZXIuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICBsZXQgbmV3X2ZpbHRlcl9hcnJheSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShmaWx0ZXIuaWQsIGZpbHRlcik7XG4gICAgZmlsdGVyLm9wdGlvbnMgPSBuZXdfZmlsdGVyX2FycmF5LmZpbmQoKHQpID0+IHQuaWQgPT0gZmlsdGVyLmlkKS5vcHRpb25zO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgbGV0IGRyb3Bkb3duID0gZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW2ZpbHRlcl9pbmRleF07XG4gICAgZHJvcGRvd24ubG9hZF9tZW51KCk7XG4gIH1cbiAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IGZhbHNlO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoYWN0aW9uKSB7XG4gIGNvbnN0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvaW5hY3RpdmVfZmlsdGVycy5sdWE/YWN0aW9uPSR7YWN0aW9ufSYke3BhcmFtc31gO1xuICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gIHJldHVybiByZXMubWFwKCh0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0LmFjdGlvbiB8fCB0Lm5hbWUsXG4gICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgaGlkZGVuOiAodC52YWx1ZS5sZW5ndGggPT0gMSlcbiAgICB9O1xuICB9KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gYWRkX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50LCBmaWx0ZXIsIGZpbHRlcl9pbmRleCkge1xuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKG9wdC5rZXksIGAke29wdC52YWx1ZX1gKTtcbiAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICB0YWJsZV9pbmFjdGl2ZV9ob3N0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG4gIGlmIChzaG93X2NoYXJ0cy52YWx1ZSA9PSB0cnVlKSB7XG4gICAgY2hhcnRfb3B0aW9ucy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgZWwucmVmLnZhbHVlWzBdLnVwZGF0ZV9jaGFydCgpXG4gICAgfSlcbiAgfVxuICBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIHRhYmxlX2luYWN0aXZlX2hvc3RzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY2hhbmdlX3Nob3dfY2hhcnRzKGl0ZW0pIHtcbiAgc2hvd19jaGFydHMudmFsdWUgPSAhc2hvd19jaGFydHMudmFsdWU7XG4gIHRhYl9saXN0LnZhbHVlLmZvckVhY2goKGkpID0+IHtcbiAgICBpLmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmKGkuaWQgPT0gXCJ0YWJsZVwiICYmIHNob3dfY2hhcnRzLnZhbHVlID09IGZhbHNlKVxuICAgICAgaS5hY3RpdmUgPSB0cnVlO1xuICAgIGVsc2UgaWYoaS5pZCA9PSBcImNoYXJ0XCIgJiYgc2hvd19jaGFydHMudmFsdWUgPT0gdHJ1ZSlcbiAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgfSk7XG4gIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgaXRlbSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIFwiY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3NcIjogY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MsXG4gICAgXCJjbGlja19idXR0b25fZGVsZXRlXCI6IGNsaWNrX2J1dHRvbl9kZWxldGUsXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZGVsZXRlKGV2ZW50KSB7XG4gIGNvbnN0IHJvdyA9IGV2ZW50LnJvdy5zZXJpYWxfa2V5O1xuICBtb2RhbF9kZWxldGUudmFsdWUuc2hvdyhyb3csIGkxOG4oJ2RlbGV0ZV9pbmFjdGl2ZV9ob3N0JywgeyBob3N0OiBldmVudC5yb3cuaG9zdC5pcF9hZGRyZXNzLnZhbHVlIH0pKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZGVsZXRlX2FsbF9lbnRyaWVzKCkge1xuICBtb2RhbF9kZWxldGUudmFsdWUuc2hvdygnYWxsJywgaTE4bignZGVsZXRlX2FsbF9pbmFjdGl2ZV9ob3N0cycpKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZGVsZXRlX2VudHJpZXNfc2luY2UoKSB7XG4gIG1vZGFsX2RlbGV0ZV9vbGRlci52YWx1ZS5zaG93KCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGRvd25sb2FkKCkge1xuICBtb2RhbF9kb3dubG9hZC52YWx1ZS5zaG93KCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gIGNvbnN0IHJvdyA9IGV2ZW50LnJvdztcbiAgbGV0IHZsYW4gPSAnJ1xuICBpZihyb3cudmxhbiAhPSAwKVxuICAgIHZsYW4gPSBgQCR7cm93LnZsYW59YFxuICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtyb3cuZXBvY2hfYmVnaW4gLSAxMDB9JmVwb2NoX2VuZD0ke3Jvdy5lcG9jaF9lbmQgKyAxMDB9JmlwPSR7cm93LmlwX2FkZHJlc3MudmFsdWUgfHwgcm93LmlwX2FkZHJlc3N9JHt2bGFufTtlcSZtYWM9JHtyb3cubWFjX2FkZHJlc3MudmFsdWUgfHwgcm93Lm1hY19hZGRyZXNzfTtlcWA7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcIm1hY19hZGRyZXNzXCI6IChtYWMsIHJvdykgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IG1hYztcbiAgICAgIGlmIChtYWMgIT0gbnVsbCAmJlxuICAgICAgICBtYWMudXJsICE9IG51bGwgJiZcbiAgICAgICAgbWFjLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgICBtYWMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQgPSBgPGEgaHJlZj0nJHtodHRwX3ByZWZpeH0ke21hYy51cmx9JyB0aXRsZT0nJHttYWMudmFsdWV9Jz4ke21hYy5uYW1lfTwvYT5gXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBcIm5ldHdvcmtcIjogKG5ldHdvcmssIHJvdykgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IG5ldHdvcms7XG4gICAgICBpZiAobmV0d29yay51cmwgIT0gbnVsbCAmJlxuICAgICAgICBuZXR3b3JrLm5hbWUgIT0gbnVsbCAmJlxuICAgICAgICBuZXR3b3JrLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0ID0gYDxhIGhyZWY9JyR7aHR0cF9wcmVmaXh9JHtuZXR3b3JrLnVybH0nIHRpdGxlPScke25ldHdvcmsudmFsdWV9Jz4ke25ldHdvcmsubmFtZX08L2E+YFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXCJob3N0XCI6IChob3N0LCByb3cpID0+IHtcbiAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgIGNvbnN0IGlwX2FkZHJlc3MgPSBob3N0LmlwX2FkZHJlc3M7XG4gICAgICByZXN1bHQgPSBgPGEgaHJlZj0nJHtodHRwX3ByZWZpeH0ke2lwX2FkZHJlc3MudXJsfScgdGl0bGU9JyR7aXBfYWRkcmVzcy52YWx1ZX0nPiR7aXBfYWRkcmVzcy5uYW1lfTwvYT5gXG5cbiAgICAgIGlmIChob3N0LnZsYW4gIT0gbnVsbCAmJiBob3N0LnZsYW4ubmFtZSAhPSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHZsYW4gPSBob3N0LnZsYW47XG4gICAgICAgIGlmICh2bGFuLnVybCAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fUA8YSBocmVmPScke2h0dHBfcHJlZml4fSR7dmxhbi51cmwgfHwgJyMnfScgdGl0bGU9JyR7dmxhbi52YWx1ZX0nPiR7dmxhbi5uYW1lfTwvYT5gXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fUAke3ZsYW4ubmFtZX1gXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHtyZXN1bHR9ICR7aG9zdC5kZXZpY2VfdHlwZX1gO1xuICAgIH0sXG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG4gICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgaGlzdG9yaWNhbF9kYXRhOiBwcm9wcy5zaG93X2hpc3RvcmljYWwsXG4gICAgICB9O1xuICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgaWYgKCF2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICBiLmNsYXNzLnB1c2goXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC00IGNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxCb290c3RyYXBUYWJsZSA6aG9yaXpvbnRhbD1cInRydWVcIiA6aWQ9XCJ0YWJsZV9pZFwiIDpyb3dzPVwic3RhdHNfcm93c1wiIDpwcmludF9odG1sX3RpdGxlPVwicHJpbnRfaHRtbF90aXRsZVwiXG4gICAgICAgICAgICA6cHJpbnRfaHRtbF9yb3c9XCJwcmludF9zdGF0c19yb3dcIj5cbiAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHVybCA9IFwiL2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlX2hvc3QubHVhXCI7XG5jb25zdCB0YWJsZV9pZCA9IHJlZignaW5hY3RpdmVfaG9zdF9kZXRhaWxzJyk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc3RhdHNfcm93cyA9IHJlZihbXSk7XG5cbmNvbnN0IHByaW50X2h0bWxfdGl0bGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gKG5hbWUgfHwgXCJcIik7XG59XG5cbmNvbnN0IHByaW50X3N0YXRzX3JvdyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBsZXQgbGFiZWwgPSB2YWx1ZS5uYW1lIHx8ICcnO1xuICBpZiAodmFsdWUudXJsICYmIHZhbHVlLnVybCAhPSAnJylcbiAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0ke3ZhbHVlLnVybH1cIj4ke2xhYmVsfTwvPmBcblxuICByZXR1cm4gbGFiZWw7XG59XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGV4dHJhX3BhcmFtcyk7XG4gIGNvbnN0IGhvc3Rfc3RhdHMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9JHt1cmx9PyR7dXJsX3BhcmFtc31gKTtcbiAgc3RhdHNfcm93cy52YWx1ZSA9IGhvc3Rfc3RhdHMuaG9zdF9pbmZvXG4gICQoJyNuYXZiYXJfdGl0bGUnKS5odG1sKFwiPGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT4gXCIgKyBfaTE4bignaG9zdF9kZXRhaWxzLmhvc3QnKSArIFwiOiBcIiArIGhvc3Rfc3RhdHMuaG9zdF9uYW1lKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjItMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLXN0cmlwZWRcIj5cbiAgICA8dHI+XG4gICAgPHRoPiB7eyBfaTE4bihcImZsb3dkZXZfYWxpYXNcIikgfX0gPC90aD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIEBpbnB1dD1cImNoZWNrRGlzYWJsZWRcIj5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgPC90YWJsZT5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpjbGFzcz1cIltkaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiAnJ11cIiBAY2xpY2s9XCJ1cGRhdGVGbG93RGV2QWxpYXNcIiBpZD1cInNhdmVcIj4ge3sgX2kxOG4oXCJzYXZlX3NldHRpbmdzXCIpIH19IDwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY3VzdG9tX25hbWUgPSByZWYobnVsbCk7XG5jb25zdCBwcmV2X25hbWUgPSByZWYoJycpO1xuY29uc3QgZGlzYWJsZWQgPSByZWYodHJ1ZSk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBjc3JmOiBTdHJpbmcsXG4gIGZsb3dkZXZfaXA6IFN0cmluZyxcbn0pO1xuY29uc3QgZ2V0X2Zsb3dkZXZfYWxpYXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZS9hbGlhcy5sdWE/Zmxvd2Rldl9pcD0ke3Byb3BzLmZsb3dkZXZfaXB9JmlmaWQ9JHtwcm9wcy5pZmlkfWBcbmNvbnN0IHVwZGF0ZV9mbG93ZGV2X2FsaWFzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvc2V0L2Zsb3dkZXZpY2UvYWxpYXMubHVhYFxuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBnZXRGbG93RGV2QWxpYXMoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRGbG93RGV2QWxpYXMoKSB7XG4gIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtnZXRfZmxvd2Rldl9hbGlhc191cmx9YCwgeyBtZXRob2Q6ICdnZXQnIH0pO1xuICBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZSA9IHJzcCB8fCBwcm9wcy5mbG93ZGV2X2lwO1xuICBwcmV2X25hbWUudmFsdWUgPSBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZTtcbn1cblxuY29uc3QgdXBkYXRlRmxvd0RldkFsaWFzID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5jc3JmLFxuICAgIGZsb3dkZXZfaXA6IHByb3BzLmZsb3dkZXZfaXAsXG4gICAgYWxpYXM6IGN1c3RvbV9uYW1lLnZhbHVlLnZhbHVlLFxuICAgIGlmaWQ6IHByb3BzLmlmaWRcbiAgfTtcbiAgbGV0IGhlYWRlcnMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9O1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXBkYXRlX2Zsb3dkZXZfYWxpYXNfdXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICBnZXRGbG93RGV2QWxpYXMoKTtcbiAgZGlzYWJsZWQudmFsdWUgPSB0cnVlO1xufVxuXG5jb25zdCBjaGVja0Rpc2FibGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcmV2X25hbWUudmFsdWUgPT0gY3VzdG9tX25hbWUudmFsdWUudmFsdWUpIHtcbiAgICBkaXNhYmxlZC52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZGlzYWJsZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuPC9zY3JpcHQ+IiwiPCEtLSAoQykgMjAyMi0yMyAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1ib3JkZXJlZCBjb2wtc20tMTJcIj5cbiAgICA8dGJvZHk+XG4gICAgICA8dHI+XG4gICAgICAgIDx0aCBjbGFzcz1cImNvbC0zXCI+IHt7IF9pMThuKFwiaW50ZXJmYWNlX2FsaWFzXCIpIH19IDwvdGg+XG4gICAgICAgIDx0ZCBjbGFzcz1cImNvbC05XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBwcy0wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiByZWY9XCJjdXN0b21fbmFtZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgc3R5bGU9XCJ3aWR0aDogMTZyZW07XCIgQGlucHV0PVwiY2hlY2tEaXNhYmxlZFwiPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoIGNsYXNzPVwiY29sLTNcIj4ge3sgX2kxOG4oXCJpbnRlcmZhY2VfdXBsaW5rX3NwZWVkXCIpIH19IDwvdGg+XG4gICAgICAgIDx0ZCBjbGFzcz1cImNvbC05XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBwcy0wXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1lLTJcIj57eyBfaTE4bihcImdiaXRcIikgfX08L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHJlZj1cInVwbGlua19zcGVlZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtZW5kXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBzdGVwPVwiMC4wMVwiIHN0eWxlPVwid2lkdGg6IDhyZW07XCJcbiAgICAgICAgICAgICAgQGlucHV0PVwiY2hlY2tEaXNhYmxlZFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGggY2xhc3M9XCJjb2wtM1wiPiB7eyBfaTE4bihcImludGVyZmFjZV9kb3dubGlua19zcGVlZFwiKSB9fSA8L3RoPlxuICAgICAgICA8dGQgY2xhc3M9XCJjb2wtOVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggcHMtMFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtZS0yXCI+e3sgX2kxOG4oXCJnYml0XCIpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCByZWY9XCJkb3dubGlua19zcGVlZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIHRleHQtZW5kXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjBcIiBzdGVwPVwiMC4wMDFcIlxuICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOiA4cmVtO1wiIEBpbnB1dD1cImNoZWNrRGlzYWJsZWRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L3Rib2R5PlxuICA8L3RhYmxlPlxuICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGQtZmxleCBtcy1hdXRvXCIgOmNsYXNzPVwiW2Rpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICcnXVwiIEBjbGljaz1cInVwZGF0ZUludGVyZmFjZUNvbmZpZ1wiXG4gICAgaWQ9XCJzYXZlXCI+IHt7XG4gICAgICBfaTE4bihcInNhdmVfc2V0dGluZ3NcIikgfX0gPC9idXR0b24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IEJJVF9WQUxVRSA9IDEwMDAwMDAwMDA7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY3VzdG9tX25hbWUgPSByZWYobnVsbCk7XG5jb25zdCBwcmV2X25hbWUgPSByZWYoJycpO1xuY29uc3QgdXBsaW5rX3NwZWVkID0gcmVmKG51bGwpO1xuY29uc3QgcHJldl91cGxpbmtfc3BlZWQgPSByZWYoJycpO1xuY29uc3QgZG93bmxpbmtfc3BlZWQgPSByZWYobnVsbCk7XG5jb25zdCBwcmV2X2Rvd25saW5rX3NwZWVkID0gcmVmKCcnKTtcbmNvbnN0IGRpc2FibGVkID0gcmVmKHRydWUpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IFN0cmluZyxcbiAgY3NyZjogU3RyaW5nLFxuICBkZXZpY2VfaXA6IFN0cmluZyxcbiAgcG9ydF9pbmRleDogU3RyaW5nLFxufSk7XG5cbmNvbnN0IGdldF9pbnRlcmZhY2VfY29uZmlnX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2UvaW50ZXJmYWNlL2NvbmZpZy5sdWE/ZGV2aWNlX2lwPSR7cHJvcHMuZGV2aWNlX2lwfSZwb3J0X2luZGV4PSR7cHJvcHMucG9ydF9pbmRleH0maWZpZD0ke3Byb3BzLmlmaWR9YFxuY29uc3QgdXBkYXRlX2ludGVyZmFjZV9jb25maWdfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9zZXQvZmxvd2RldmljZS9pbnRlcmZhY2UvY29uZmlnLmx1YWBcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZ2V0Rmxvd0RldmljZUludGVyZmFjZUNvbmZpZygpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEZsb3dEZXZpY2VJbnRlcmZhY2VDb25maWcoKSB7XG4gIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtnZXRfaW50ZXJmYWNlX2NvbmZpZ191cmx9YCwgeyBtZXRob2Q6ICdnZXQnIH0pO1xuICBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZSA9IHJzcC5hbGlhcztcbiAgcHJldl9uYW1lLnZhbHVlID0gY3VzdG9tX25hbWUudmFsdWUudmFsdWU7XG4gIHVwbGlua19zcGVlZC52YWx1ZS52YWx1ZSA9IHJzcC51cGxpbmtfc3BlZWQgLyBCSVRfVkFMVUU7XG4gIHByZXZfdXBsaW5rX3NwZWVkLnZhbHVlID0gdXBsaW5rX3NwZWVkLnZhbHVlLnZhbHVlO1xuICBkb3dubGlua19zcGVlZC52YWx1ZS52YWx1ZSA9IHJzcC5kb3dubGlua19zcGVlZCAvIEJJVF9WQUxVRTtcbiAgcHJldl9kb3dubGlua19zcGVlZC52YWx1ZSA9IGRvd25saW5rX3NwZWVkLnZhbHVlLnZhbHVlO1xufVxuXG5jb25zdCB1cGRhdGVJbnRlcmZhY2VDb25maWcgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgIGNzcmY6IHByb3BzLmNzcmYsXG4gICAgZGV2aWNlX2lwOiBwcm9wcy5kZXZpY2VfaXAsXG4gICAgcG9ydF9pbmRleDogcHJvcHMucG9ydF9pbmRleCxcbiAgICBhbGlhczogY3VzdG9tX25hbWUudmFsdWUudmFsdWUsXG4gICAgdXBsaW5rX3NwZWVkOiBOdW1iZXIodXBsaW5rX3NwZWVkLnZhbHVlLnZhbHVlKSAqIEJJVF9WQUxVRSxcbiAgICBkb3dubGlua19zcGVlZDogTnVtYmVyKGRvd25saW5rX3NwZWVkLnZhbHVlLnZhbHVlKSAqIEJJVF9WQUxVRSxcbiAgfTtcbiAgbGV0IGhlYWRlcnMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9O1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXBkYXRlX2ludGVyZmFjZV9jb25maWdfdXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICBnZXRGbG93RGV2aWNlSW50ZXJmYWNlQ29uZmlnKCk7XG4gIGRpc2FibGVkLnZhbHVlID0gdHJ1ZTtcbn1cblxuY29uc3QgY2hlY2tEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHByZXZfbmFtZS52YWx1ZSA9PSBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZVxuICAgICYmIHByZXZfdXBsaW5rX3NwZWVkLnZhbHVlID09IHVwbGlua19zcGVlZC52YWx1ZS52YWx1ZVxuICAgICYmIHByZXZfZG93bmxpbmtfc3BlZWQudmFsdWUgPT0gZG93bmxpbmtfc3BlZWQudmFsdWUudmFsdWUpIHtcbiAgICBkaXNhYmxlZC52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZGlzYWJsZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuPC9zY3JpcHQ+IiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICB7eyBib2R5IH19XG4gICAgPE5vdGVMaXN0IHYtaWY9XCJzaG93X25vdGVfbGlzdFwiXG4gICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgPC9Ob3RlTGlzdD5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJkZWxldGVfdHlwZSA9PSAnZGVsZXRlX2FsbCcgfHwgZGVsZXRlX3R5cGUgPT0gJ2RlbGV0ZV9zaW5nbGVfcm93JyB8fCBkZWxldGVfdHlwZSA9PSAnZGVsZXRlX3NpbmdsZV9yZXBvcnQnXCI+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfXCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPnt7X2kxOG4oJ2RlbGV0ZScpfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2NoZWR1bGVfc2NhbicpfX08L2J1dHRvbj5cblxuICAgIDwvdGVtcGxhdGU+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RlbGV0ZScsJ2RlbGV0ZV9hbGwnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbn0pO1xuY29uc3QgYm9keSA9IHJlZignJyk7XG5jb25zdCB0aXRsZSA9IHJlZignJyk7XG5jb25zdCBkZWxldGVfdHlwZSA9IHJlZignJyk7XG5jb25zdCBzaG93X25vdGVfbGlzdCA9IHJlZih0cnVlKTtcbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgaTE4bignbm90ZV9zY2FuX2hvc3QnKVxuXTtcblxuY29uc3Qgc2hvdyA9ICh0eXBlLCB2YWx1ZSkgPT4ge1xuICBzaG93X25vdGVfbGlzdC52YWx1ZSA9IGZhbHNlO1xuICBkZWxldGVfdHlwZS52YWx1ZSA9IHR5cGVcblxuICAgIGlmKHR5cGUgPT0gXCJkZWxldGVfYWxsXCIpIHtcbiAgICAgIHRpdGxlLnZhbHVlID0gaTE4bihcImRlbGV0ZV9hbGxfZW50cmllc1wiKTtcbiAgICAgIGJvZHkudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYodHlwZSA9PSBcImRlbGV0ZV9zaW5nbGVfcm93XCIpIHtcbiAgICAgIHRpdGxlLnZhbHVlID0gaTE4bihcImRlbGV0ZV92c19ob3N0X3RpdGxlXCIpO1xuICAgICAgYm9keS52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZih0eXBlID09IFwic2Nhbl9hbGxfcm93c1wiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJzY2FuX2FsbF9ob3N0c190aXRsZVwiKTtcbiAgICAgIGJvZHkudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYodHlwZSA9PSBcInNjYW5fcm93XCIpIHtcbiAgICAgIHNob3dfbm90ZV9saXN0LnZhbHVlID0gdHJ1ZTtcbiAgICAgIHRpdGxlLnZhbHVlID0gaTE4bihcInNjYW5faG9zdF90aXRsZVwiKTtcbiAgICAgIGJvZHkudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJkZWxldGVfc2luZ2xlX3JlcG9ydFwiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0c19wYWdlLmRlbGV0ZV90aXRsZVwiKTtcbiAgICAgIGJvZHkudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5kZWxldGVfZGVzY3JpcHRpb25cIik7XG4gICAgfVxuICAgIFxuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGRlbGV0ZV8gPSAoKSA9PiB7XG4gICAgaWYgKGRlbGV0ZV90eXBlLnZhbHVlID09IFwiZGVsZXRlX2FsbFwiKSB7XG4gICAgICBlbWl0KCdkZWxldGVfYWxsJyk7XG4gICAgfSBlbHNlIGlmICggZGVsZXRlX3R5cGUudmFsdWUgPT0gXCJkZWxldGVfc2luZ2xlX3Jvd1wiIHx8IGRlbGV0ZV90eXBlLnZhbHVlID09IFwiZGVsZXRlX3NpbmdsZV9yZXBvcnRcIikge1xuICAgICAgZW1pdCgnZGVsZXRlJyk7XG4gICAgfSBlbHNlIGlmIChkZWxldGVfdHlwZS52YWx1ZSA9PSBcInNjYW5fYWxsX3Jvd3NcIikge1xuICAgICAgZW1pdCgnc2Nhbl9hbGxfcm93cycpO1xuICAgIH0gZWxzZSBpZiAoZGVsZXRlX3R5cGUudmFsdWUgPT0gXCJzY2FuX3Jvd1wiKSB7XG4gICAgICBlbWl0KCdzY2FuX3JvdycpO1xuICAgIH1cbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZX19PC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3tfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5hdXRvbWF0aWNfc2NhblwiKX19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3lcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiYXV0b21hdGljX3NjYW5fZnJlcXVlbmNpZXNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPiBcbiAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInVwZGF0ZV9cIiBjbGFzcz1cImJ0biBidG4tc2Vjb25kYXJ5IG1lLTRcIj57e19pMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudXBkYXRlX2FsbCcpfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9tb2RhbD5cbiAgICA8L3RlbXBsYXRlPlxuICAgIFxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGUnLF0pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICAgICAgdGl0bGU6IFN0cmluZyxcbiAgICB9KTtcbmNvbnN0IGF1dG9tYXRpY19zY2FuX2ZyZXF1ZW5jaWVzX2xpc3QgPSByZWYoW1xuICB7IGlkOiBcImRpc2FibGVkXCIsIGxhYmVsOmkxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kaXNhYmxlZCcpfSxcbiAgeyBpZDogXCIxZGF5XCIsIGxhYmVsOmkxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ldmVyeV9uaWdodCcpfSxcbiAgeyBpZDogXCIxd2Vla1wiLCBsYWJlbDppMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXZlcnlfd2VlaycpfSxcbl0pO1xuXG5sZXQgc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kgPSByZWYoYXV0b21hdGljX3NjYW5fZnJlcXVlbmNpZXNfbGlzdC52YWx1ZVswXSk7XG4gICAgXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuLy8gIGNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGVsZXRlX2hvc3RfdGl0bGVcIikpXG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IHVwZGF0ZV8gPSAoKSA9PiB7XG4gICAgZW1pdCgndXBkYXRlJywge3NjYW5fZnJlcXVlbmN5OiBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeS52YWx1ZS5pZH0pO1xuXG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3Rfb3JfbmV0d29ya1wiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJob3N0XCIgQGlucHV0PVwiY2hlY2tfaG9zdF9yZWdleFwiIDpkaXNhYmxlZD1cImlzX2VkaXRfcGFnZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgOnBsYWNlaG9sZGVyPVwiaG9zdF9wbGFjZWhvbGRlclwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTJcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfY2lkclwiIDpkaXNhYmxlZD1cImlzX2VkaXRfcGFnZSB8fCBpc19pcHY0X25ldHNjYW5cIiA6b3B0aW9ucz1cImNpZHJfb3B0aW9uc19saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnBvcnRzXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJwb3J0c1wiIEBmb2N1c291dD1cImNoZWNrX3BvcnRzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiA6Y2xhc3M9XCJoaWRlX3BvcnRzX3BsYWNlaG9sZGVyID09PSB0cnVlID8gJ250b3BuZy1oaWRlLXBsYWNlaG9sZGVyJyA6ICcnXG4gICAgICAgICAgICBcIiB0eXBlPVwidGV4dFwiIDpwbGFjZWhvbGRlcj1cInBvcnRzX3BsYWNlaG9sZGVyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjYW5fdHlwZVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zY2FuX3R5cGVcIiA6b3B0aW9ucz1cInNjYW5fdHlwZV9saXN0XCIgOmRpc2FibGVkPVwiaXNfZWRpdF9wYWdlXCIgQHNlbGVjdF9vcHRpb249XCJzZXRfaXNfaXB2NF9uZXRzY2FuKClcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwic2VsZWN0ZWRfc2Nhbl90eXBlLmlkID09ICdpcHY0X25ldHNjYW4nXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X2Rpc2NvdmVyZWRfc2Nhbl90eXBlXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiID5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb25zPVwic2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzXCIgQGNoYW5nZV9zZWxlY3RlZF9vcHRpb25zPVwidXBkYXRlX3NlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlc1wiIEB1bnNlbGVjdF9vcHRpb249XCJyZW1vdmVfc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzXCIgOm9wdGlvbnM9XCJkaXNjb3ZlcmVkX3NjYW5fdHlwZV9saXN0XCIgOm11bHRpcGxlPVwidHJ1ZVwiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZW50ZXJwcmlzZV9sID09IHRydWVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnBlcmlvZGljaXR5XCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5XCIgOm9wdGlvbnM9XCJzY2FuX2ZyZXF1ZW5jaWVzX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC00XCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNfZW50ZXJwcmlzZV9sID09IGZhbHNlXCI+XG4gICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cImVudGVycHJpc2Vfbm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICA8ZGl2IHYtaWY9XCJpc19kYXRhX25vdF9va1wiIGNsYXNzPVwibWUtYXV0byB0ZXh0LWRhbmdlciBkLWlubGluZVwiPlxuICAgICAgICB7eyBub19ob3N0X2ZlZWRiYWNrIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxTcGlubmVyIDpzaG93PVwiYWN0aXZhdGVfYWRkX3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMlwiPjwvU3Bpbm5lcj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfZWRpdF9wYWdlID09IGZhbHNlXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgOmRpc2FibGVkPVwiIShpc19jaWRyX2NvcnJlY3QgJiYgaXNfaG9zdF9jb3JyZWN0ICYmIGlzX3BvcnRfY29ycmVjdCAmJiBpc19uZXRzY2FuX29rKVwiPlxuICAgICAgICAgIHt7IF9pMThuKFwiYWRkXCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHYtZWxzZSB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgOmRpc2FibGVkPVwiIShpc19jaWRyX2NvcnJlY3QgJiYgaXNfaG9zdF9jb3JyZWN0ICYmIGlzX3BvcnRfY29ycmVjdCAmJiBpc19uZXRzY2FuX29rKVwiPlxuICAgICAgICAgIHt7IF9pMThuKFwiYXBwbHlcIikgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3Bpbm5lciB9IGZyb20gXCIuL3NwaW5uZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRhdGFVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YS11dGlsc1wiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImFkZFwiLCBcImVkaXRcIl0pO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuYWRkX2hvc3RcIikpO1xuY29uc3Qgbm9faG9zdF9mZWVkYmFjayA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3Rfbm90X3Jlc29sdmVkXCIpKTtcbmNvbnN0IGhvc3RfcGxhY2Vob2xkZXIgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3RfcGxhY2Vob2xkZXJcIik7XG5jb25zdCBwb3J0c19wbGFjZWhvbGRlciA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucG9ydHNfcGxhY2Vob2xkZXJcIik7XG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMVwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8yXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfM18xXCIpLFxuXTtcbmNvbnN0IGVudGVycHJpc2Vfbm90ZV9saXN0ID0gW1xuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzFcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMlwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8zXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNfMVwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV80XCIpLFxuXTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBzZWxlY3RlZF9zY2FuX3R5cGUgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzID0gcmVmKFtdKTsgLy8gYXJyYXkgZm9yIGhvc3RzIGRpc2NvdmVyZWQgc2NhbiB0eXBlc1xuY29uc3QgaGlkZV9wb3J0c19wbGFjZWhvbGRlciA9IHJlZihcIlwiKTtcbmNvbnN0IHJvd190b19lZGl0X2lkID0gcmVmKFwiXCIpO1xuY29uc3QgYWN0aXZhdGVfYWRkX3NwaW5uZXIgPSByZWYoZmFsc2UpO1xuY29uc3QgaXNfZWRpdF9wYWdlID0gcmVmKGZhbHNlKTtcbmNvbnN0IHNjYW5fdHlwZV9saXN0ID0gcmVmKFtdKTtcbmNvbnN0IGRpc2NvdmVyZWRfc2Nhbl90eXBlX2xpc3QgPSByZWYoW10pO1xuY29uc3QgaWZpZCA9IHJlZihudWxsKTtcbmNvbnN0IGhvc3QgPSByZWYobnVsbCk7XG5jb25zdCBwb3J0cyA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dfcG9ydF9mZWVkYmFjayA9IHJlZihmYWxzZSk7XG5jb25zdCBpc19lbnRlcnByaXNlX2wgPSByZWYobnVsbCk7XG5jb25zdCBpc19wb3J0X2NvcnJlY3QgPSByZWYodHJ1ZSk7XG5jb25zdCBpc19jaWRyX2NvcnJlY3QgPSByZWYodHJ1ZSk7XG5jb25zdCBpc19uZXRzY2FuX29rID0gcmVmKHRydWUpOyAvLyBib29sIHRvIGJlIHN1cmUgdGhhdCBvbiBuZXRzY2FuIGF0IGxlYXN0IG9uZSBkaXNjb3ZlcmVkIGhvc3RzIHNjYW4gdHlwZSBpcyBzZWxlY3RlZFxuY29uc3QgaXNfaG9zdF9jb3JyZWN0ID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2lwdjRfbmV0c2NhbiA9IHJlZihmYWxzZSk7XG5jb25zdCBzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QgPSByZWYoW1xuICB7IGlkOiBcImRpc2FibGVkXCIsIGxhYmVsOiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRpc2FibGVkXCIpIH0sXG4gIHsgaWQ6IFwiMWRheVwiLCBsYWJlbDogaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ldmVyeV9uaWdodFwiKSB9LFxuICB7IGlkOiBcIjF3ZWVrXCIsIGxhYmVsOiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmV2ZXJ5X3dlZWtcIikgfSxcbl0pO1xuY29uc3QgQ0lEUl8yNCA9IFwiMjRcIjtcbmNvbnN0IENJRFJfMzIgPSBcIjMyXCI7XG5jb25zdCBDSURSXzEyOCA9IFwiMTI4XCI7XG5jb25zdCBjaWRyX29wdGlvbnNfbGlzdCA9IHJlZihbXG4gIHsgaWQ6IFwiMjRcIiwgbGFiZWw6IFwiLzI0XCIgfSxcbiAgeyBpZDogXCIzMlwiLCBsYWJlbDogXCIvMzJcIiB9LFxuICB7IGlkOiBcIjEyOFwiLCBsYWJlbDogXCIvMTI4XCIgfSxcbl0pO1xuY29uc3Qgc2VsZWN0ZWRfY2lkciA9IHJlZihjaWRyX29wdGlvbnNfbGlzdC52YWx1ZVsxXSk7XG5jb25zdCBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeSA9IHJlZihzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QudmFsdWVbMF0pO1xuY29uc3QgaXNfZGF0YV9ub3Rfb2sgPSByZWYoZmFsc2UpO1xuY29uc3QgcmVmcmVzaF9zZWxlY3Rfc2VhcmNoID0gcmVmKGZhbHNlKTtcbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKlxuICogUmVzZXQgZmllbGRzIGluIG1vZGFsIGZvcm1cbiAqL1xuY29uc3QgcmVzZXRfbW9kYWxfZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgaG9zdC52YWx1ZSA9IFwiXCI7XG4gIHBvcnRzLnZhbHVlID0gXCJcIjtcbiAgaXNfcG9ydF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgaXNfY2lkcl9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gZmFsc2U7XG4gIGFjdGl2YXRlX2FkZF9zcGlubmVyLnZhbHVlID0gZmFsc2U7XG4gIHNob3dfcG9ydF9mZWVkYmFjay52YWx1ZSA9IGZhbHNlO1xuICBzZWxlY3RlZF9zY2FuX3R5cGUudmFsdWUgPSBzY2FuX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlID0gW107XG4gIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZVsxXTtcbiAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSBudWxsO1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgaXNfZGF0YV9ub3Rfb2sudmFsdWUgPSBmYWxzZTtcbiAgaXNfaXB2NF9uZXRzY2FuLnZhbHVlID0gZmFsc2U7XG4gIGlzX25ldHNjYW5fb2sudmFsdWUgPSAhaXNfaXB2NF9uZXRzY2FuLnZhbHVlO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qXG4gKiBTZXQgcm93IHRvIGVkaXRcbiAqL1xuY29uc3Qgc2V0X3Jvd190b19lZGl0ID0gKHJvdykgPT4ge1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSB0cnVlO1xuXG4gIC8qIFNldCBob3N0IHZhbHVlcyAqL1xuICBob3N0LnZhbHVlID0gcm93Lmhvc3Q7XG4gIHBvcnRzLnZhbHVlID0gcm93LnBvcnRzO1xuICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICBpc19wb3J0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICByb3dfdG9fZWRpdF9pZC52YWx1ZSA9IHJvdy5pZDtcblxuICAvKiBTZXQgdGhlIGNvcnJlY3QgdmFsdWVzIGlmIGF2YWlsYWJsZSAqL1xuICAvKiBTY2FuIFR5cGUgKi9cbiAgc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlID0gc2Nhbl90eXBlX2xpc3QudmFsdWUuZmluZChcbiAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSByb3cuc2Nhbl90eXBlXG4gICk7XG5cbiAgLyogU3ViIFNjYW5zIFR5cGVzICovXG4gIGlmIChyb3cuZGlzY292ZXJlZF9ob3N0X3NjYW5fdHlwZSAhPSBudWxsKSB7XG4gICAgY29uc3QgZGlzY292ZXJlZF9zY2FuX3R5cGVfaWRzX2FycmF5ID0gcm93LmRpc2NvdmVyZWRfaG9zdF9zY2FuX3R5cGUuc3BsaXQoXCIsXCIpO1xuICAgIGxldCB0bXBfc2VsZWN0ZWRfc2Nhbl90eXBlcyA9IFtdO1xuICAgIGxldCB0bXBfZm91bmRfc2Nhbl90eXBlO1xuICAgIGRpc2NvdmVyZWRfc2Nhbl90eXBlX2lkc19hcnJheS5mb3JFYWNoKChzZXR0ZWRfc2Nhbl90eXBlKSA9PiB7XG4gICAgICB0bXBfZm91bmRfc2Nhbl90eXBlID0gZGlzY292ZXJlZF9zY2FuX3R5cGVfbGlzdC52YWx1ZS5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09IHNldHRlZF9zY2FuX3R5cGUpO1xuICAgICAgdG1wX3NlbGVjdGVkX3NjYW5fdHlwZXMucHVzaCh0bXBfZm91bmRfc2Nhbl90eXBlKTtcbiAgICB9KVxuICAgIHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZSA9IHRtcF9zZWxlY3RlZF9zY2FuX3R5cGVzO1xuICB9XG5cbiAgLyogQ0lEUiAqL1xuICBpZiAoc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlLmlkID09ICdpcHY0X25ldHNjYW4nKSB7XG4gICAgLy8gaXB2NF9uZXRzY2FuIHNjYW4gdHlwZSBjYXNlXG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzI0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChyZWdleFZhbGlkYXRpb24udmFsaWRhdGVJUHY0KHJvdy5ob3N0KSkge1xuICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8zMlxuICAgICk7IC8qIElQdjQgKi9cbiAgfSBlbHNlIHtcbiAgICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWUuZmluZChcbiAgICAgIChpdGVtKSA9PiBpdGVtLmlkID09IENJRFJfMTI4XG4gICAgKTsgLyogSVB2NiAqL1xuICB9XG4gIGlzX2NpZHJfY29ycmVjdC52YWx1ZSA9IHRydWU7XG5cbiAgLyogU2NhbiBGcmVxdWVuY3kgKi9cbiAgaWYgKGlzX2VudGVycHJpc2VfbCkge1xuICAgIHNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5LnZhbHVlID0gc2Nhbl9mcmVxdWVuY2llc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSByb3cuc2Nhbl9mcmVxdWVuY3lcbiAgICApO1xuICB9XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSBtb2RhbCBpcyBvcGVuZWQgKi9cbmNvbnN0IHNob3cgPSAocm93LCBfaG9zdCkgPT4ge1xuICAvKiBGaXJzdCBvZiBhbGwgcmVzZXQgYWxsIHRoZSBkYXRhICovXG4gIHJlc2V0X21vZGFsX2Zvcm0oKTtcbiAgdGl0bGUudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmFkZF9ob3N0XCIpO1xuICBpZiAoIWRhdGFVdGlscy5pc0VtcHR5T3JOdWxsKHJvdykpIHtcbiAgICAvKiBJbiBjYXNlIHJvdyBpcyBub3QgbnVsbCB0aGVuIGFuIGVkaXQgaXMgcmVxdWVzdGVkICovXG4gICAgdGl0bGUudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmVkaXRfaG9zdF90aXRsZVwiKTtcbiAgICBzZXRfcm93X3RvX2VkaXQocm93KTtcbiAgfVxuXG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlPck51bGwoX2hvc3QpKSB7XG4gICAgaG9zdC52YWx1ZSA9IF9ob3N0O1xuICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIH1cblxuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gYSBuZXcgc2VsZWN0ZWQgZGlzY292ZXJlZCBzY2FuIHR5cGVcbiAgIGlzIGFkZGVkXG4qL1xuY29uc3QgdXBkYXRlX3NlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyA9IChpdGVtcykgPT4ge1xuICBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUgPSBpdGVtcztcbiAgaXNfbmV0c2Nhbl9vay52YWx1ZSA9IHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZS5sZW5ndGggPiAwO1xufVxuXG4vKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiBpcyByZW1vdmVkIGEgc2VsZWN0ZWQgZGlzY292ZXJlZCBzY2FuIHR5cGVcbiovXG5jb25zdCByZW1vdmVfc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzID0gKGl0ZW1fdG9fZGVsZXRlKSA9PiB7XG4gIHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZSA9IHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaWQgIT0gaXRlbV90b19kZWxldGUuaWQpO1xuICBpc19uZXRzY2FuX29rLnZhbHVlID0gc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlLmxlbmd0aCA+IDA7IFxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gc2V0IGlzX2lwdjRfbmV0c2NhbiBpbiBvcmRlciB0byBkaXNhYmxlIGNpZHIgc2VsZWN0aW9cbiAgIG9ubHkgLzI0IChmb3Igbm93KVxuKi9cbmNvbnN0IHNldF9pc19pcHY0X25ldHNjYW4gPSAoKSA9PiB7XG4gIGlmIChzZWxlY3RlZF9zY2FuX3R5cGUudmFsdWUuaWQgPT0gJ2lwdjRfbmV0c2NhbicpIHtcbiAgICAvLyAvMjQgXG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzI0XG4gICAgKTsgXG4gICAgLy8gaXNfaXB2NF9uZXRzY2FuIC0+IGVuYWJsZSB0aGUgZGlzY292ZXJlZF9ob3N0c19zY2FuX3R5cGVzIG11bHRpc2VsZWN0aW9uXG4gICAgaXNfaXB2NF9uZXRzY2FuLnZhbHVlID0gdHJ1ZTtcbiAgICAvLyBpc19uZXRzY2FuX29rIC0+IGRpc2FibGVkIGFwcGx5IG9yIGFkZCBidXR0b24gYmVjYXVzZSBpcyBuZWNlc3NhcnkgYXQgbGVhc3Qgb25lIGRpc2NvdmVyZWRfaG9zdHNfc2Nhbl90eXBlXG4gICAgaXNfbmV0c2Nhbl9vay52YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlzX2lwdjRfbmV0c2NhbiAtPiBkaXNhYmxlIHRoZSBkaXNjb3ZlcmVkX2hvc3RzX3NjYW5fdHlwZXMgbXVsdGlzZWxlY3Rpb25cbiAgICBpc19pcHY0X25ldHNjYW4udmFsdWUgPSBmYWxzZTtcbiAgICAvLyBpc19uZXRzY2FuX29rIC0+IGVuYWJsZSB0aGUgYWRkIG9yIGFwcGx5IGJ1dHRvbiBiZWNhdXNlIGlzIG5vdCBpcHY0X25ldHNjYW4gY2FzZVxuICAgIGlzX25ldHNjYW5fb2sudmFsdWUgPSB0cnVlO1xuICB9XG5cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlZ2V4IHRvIGNoZWNrIGlmIHRoZSBob3N0IGlzIGNvcnJlY3Qgb3Igbm90ICovXG5jb25zdCBjaGVja19ob3N0X3JlZ2V4ID0gKCkgPT4ge1xuICBjb25zdCBpc19pcHY0ID0gcmVnZXhWYWxpZGF0aW9uLnZhbGlkYXRlSVB2NChob3N0LnZhbHVlKTtcbiAgY29uc3QgaXNfaXB2NiA9IHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUlQdjYoaG9zdC52YWx1ZSk7XG4gIGNvbnN0IGlzX2hvc3RfbmFtZSA9IHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUhvc3ROYW1lKGhvc3QudmFsdWUpO1xuICBpZiAoc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlLmlkID09ICdpcHY0X25ldHNjYW4nKSB7XG4gICAgXG4gICAgaWYgKGlzX2lwdjQpIHtcbiAgICAgIC8vIHRoZSBJUCBtdXN0IGJlIGFuIElQdjRcbiAgICAgIC8qIElQdjQgKi9cbiAgICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gICAgICAvLyB0aGUgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzIG11c3QgYmUgYW4gYXJyYXkgd2l0aCBsZW5naHQgbW9yZSB0aGFuIDBcbiAgICAgIGlzX25ldHNjYW5fb2sudmFsdWUgPSBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUgJiYgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgaXNfbmV0c2Nhbl9vay52YWx1ZSA9IHRydWU7IC8vIG5vdCBpcHY0X25ldHNjYW4gY2FzZSBzbyBpc19uZXRzY2FuX29rIGlzIHRydWVcbiAgfSBlbHNlIHtcblxuICAgIC8qIFdoZW4gaXQgaXNuJ3QgdGhlIGlwdjRfbmV0c2NhbiBjYXNlIHRoZSBjaWRyIHNlbGVjdGlvbiBpcyBlbmFibGVkICovXG5cbiAgICBpZiAoaXNfaXB2NCkge1xuICAgICAgLyogSVB2NCAqL1xuICAgICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgICAgIGlmICghaG9zdC52YWx1ZS5lbmRzV2l0aCgwKSkge1xuICAgICAgICAvKiBJbiBjYXNlIHRoZSBDSURSIGlzIHdyb25nICovXG4gICAgICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgICAgIChpdGVtKSA9PiBpdGVtLmlkID09IENJRFJfMzJcbiAgICAgICAgKTsgLyogSVB2NCAqL1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNfaXB2Nikge1xuICAgICAgLyogSVB2NiAqL1xuICAgICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlWzJdO1xuICAgICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgICAgIC8qIEluIGNhc2UgdGhlIENJRFIgaXMgd3JvbmcgKi9cbiAgICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzEyOFxuICAgICAgKTsgLyogSVB2NiAqL1xuICAgIH0gZWxzZSBpZiAoaXNfaG9zdF9uYW1lKSB7XG4gICAgICAvKiBIb3N0IE5hbWUgKi9cbiAgICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gICAgICAvKiBJbiBjYXNlIHRoZSBDSURSIGlzIHdyb25nICovXG4gICAgICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWUuZmluZChcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8zMlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBSZWdleCB0byBjaGVjayBpZiBwb3J0cyBsaXN0IGlzIGNvcnJlY3Qgb3Igbm90ICovXG5jb25zdCBjaGVja19wb3J0cyA9ICgpID0+IHtcbiAgaWYgKFxuICAgICFyZWdleFZhbGlkYXRpb24udmFsaWRhdGVQb3J0UmFuZ2UocG9ydHMudmFsdWUpICYmXG4gICAgIXJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUNvbW1hU2VwYXJhdGVkUG9ydExpc3QocG9ydHMudmFsdWUpICYmXG4gICAgIWRhdGFVdGlscy5pc0VtcHR5T3JOdWxsKHBvcnRzLnZhbHVlKVxuICApIHtcbiAgICBpc19wb3J0X2NvcnJlY3QudmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICAvKiBFbXB0eSBwb3J0IGlzIGFscmlnaHQhICovXG4gICAgaXNfcG9ydF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlc29sdmUgaG9zdG5hbWUgKi9cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVfaG9zdF9uYW1lKGhvc3QpIHtcbiAgY29uc3QgcmVzb2x2ZV9ob3N0X25hbWVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3Jlc29sdmVfaG9zdF9uYW1lLmx1YWA7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZXNvbHZlX2hvc3RfbmFtZV91cmwsIHtcbiAgICBob3N0OiBob3N0LFxuICB9KTtcblxuICByZXR1cm4gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgZWRpdCBidXR0b24gaXMgY2xpY2tlZCAqL1xuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gIGFkZF8odHJ1ZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIG1vZGFsIGlzIGNsb3NlZCAqL1xuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIHJlZnJlc2hfc2VsZWN0X3NlYXJjaC52YWx1ZSA9IGZhbHNlO1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGFkZCBob3N0IHRvIHNjYW4gKi9cbmNvbnN0IGFkZF8gPSBhc3luYyAoaXNfZWRpdCkgPT4ge1xuICBjb25zdCBob3N0X3BvcnRzID0gcG9ydHMudmFsdWU7XG4gIGNvbnN0IGhvc3Rfc2Nhbl90eXBlID0gc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlLmlkO1xuICBjb25zdCBlbWl0X2V2ZW50ID0gKGlzX2VkaXQgPT09IHRydWUpID8gXCJlZGl0XCIgOiBcImFkZFwiO1xuICBjb25zdCByb3dfaWQgPSAoaXNfZWRpdCA9PT0gdHJ1ZSkgPyByb3dfdG9fZWRpdF9pZC52YWx1ZSA6IG51bGw7XG4gIGxldCBuZXdfaG9zdCA9IGhvc3QudmFsdWU7XG4gIGxldCBuZXdfaG9zdF9uYW1lX3Jlc29sdmVkID0gdHJ1ZTtcblxuICAvKiBBY3RpdmF0ZSB0aGUgc3Bpbm5lciB0byBnaXZlIHRoZSB1c2VyIGEgZmVlZGJhY2sgKi9cbiAgYWN0aXZhdGVfYWRkX3NwaW5uZXIudmFsdWUgPSB0cnVlO1xuXG4gIC8qIENoZWNrIGlmIGl0J3MgYW4gSVAgb3Igbm90LCBpZiBub3QgaXQgbWVhbnMgaXQncyBhbiBob3N0bmFtZSAqL1xuICBpZiAoIXJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUlQKGhvc3QudmFsdWUpKSB7XG4gICAgLyogRHVyaW5nIHRoZSB2YWxpZGF0aW9uIGRpc2FibGUgdGhlIGFkZCBidXR0b24gKi9cbiAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSBmYWxzZTtcbiAgICBuZXdfaG9zdCA9IGF3YWl0IHJlc29sdmVfaG9zdF9uYW1lKGhvc3QudmFsdWUpO1xuICAgIGlmIChuZXdfaG9zdCA9PT0gXCJub19zdWNjZXNzXCIpIHtcbiAgICAgIC8qIFRoZSByZXNvbHV0aW9uIGZhaWxlZCEgKi9cbiAgICAgIG5ld19ob3N0X25hbWVfcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIG5vX2hvc3RfZmVlZGJhY2sudmFsdWUgPSBob3N0LnZhbHVlICsgXCIgXCIgKyBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmhvc3Rfbm90X3Jlc29sdmVkXCIpO1xuICAgICAgaXNfZGF0YV9ub3Rfb2sudmFsdWUgPSB0cnVlO1xuICAgICAgLyogSGlkZSB0aGUgbWVzc2FnZSBhZnRlciAzIHNlY29uZHMgKi9cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpc19kYXRhX25vdF9vay52YWx1ZSA9IGZhbHNlXG4gICAgICB9LCA0MDAwKVxuICAgIH1cbiAgICAvKiBWYWxpZGF0aW9uIGVuZGVkLCByZS1lbmFibGUgdGhlIGJ1dHRvbiAqL1xuICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIH1cblxuICBsZXQgdG1wX3NlY29uZF9zY2FuX3R5cGVzID0gW107XG4gIFxuICBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIHRtcF9zZWNvbmRfc2Nhbl90eXBlcy5wdXNoKGl0ZW0uaWQpO1xuICB9KVxuICAvKiBUaGUgZGlzY292ZXJlZCBzY2FuIHR5cGVzIGFyZSBzZW50IHRvIHRoZSByZXN0IGluIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgbGlzdCAqL1xuICBjb25zdCB0bXBfc2Vjb25kX3NjYW5fdHlwZXNfZm9ybWF0dGVkID0gdG1wX3NlY29uZF9zY2FuX3R5cGVzLmpvaW4oXCIsXCIpO1xuXG4gIC8qIElmIHRoZSByZXNvbHV0aW9uIHdhcyBvayBvciBubyByZXNvbHV0aW9uIGF0IGFsbCB3YXMgZG9uZSBlbWl0IHRoZSBldmVudCAqL1xuICBhY3RpdmF0ZV9hZGRfc3Bpbm5lci52YWx1ZSA9IG5ld19ob3N0X25hbWVfcmVzb2x2ZWQ7XG5cbiAgaWYgKG5ld19ob3N0X25hbWVfcmVzb2x2ZWQpIHtcbiAgICAvKiBFbWl0IHRoZSBldmVudCwgb25seSBpZiB0aGUgcmVzb2x1dGlvbiBcbiAgICB3YXMgb2sgb3Igbm8gcmVzb2x1dGlvbiBhdCBhbGwgd2FzIG5lZWRlZCAqL1xuICAgIGVtaXQoZW1pdF9ldmVudCwge1xuICAgICAgaG9zdDogbmV3X2hvc3QsXG4gICAgICBzY2FuX3R5cGU6IGhvc3Rfc2Nhbl90eXBlLFxuICAgICAgc2Nhbl9wb3J0czogaG9zdF9wb3J0cyxcbiAgICAgIGNpZHI6IHNlbGVjdGVkX2NpZHIudmFsdWUuaWQsXG4gICAgICBzY2FuX2ZyZXF1ZW5jeTogaXNfZW50ZXJwcmlzZV9sID8gc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kudmFsdWUuaWQgOiBudWxsLFxuICAgICAgc2Nhbl9pZDogcm93X2lkLFxuICAgICAgZGlzY292ZXJlZF9ob3N0X3NjYW5fdHlwZSA6IHRtcF9zZWNvbmRfc2Nhbl90eXBlc19mb3JtYXR0ZWRcbiAgICB9KTtcbiAgfVxuXG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogTG9hZCB0aGUgYXZhaWxhYmxlIG1ldHJpY3MgKi9cbmNvbnN0IG1ldHJpY3NMb2FkZWQgPSBhc3luYyAoX3NjYW5fdHlwZV9saXN0LCBfaWZpZCwgX2lzX2VudGVycHJpc2VfbCkgPT4ge1xuICBjb25zdCBzY2FuX3R5cGVzID0gX3NjYW5fdHlwZV9saXN0LnNvcnQoKGEsIGIpID0+XG4gICAgYS5sYWJlbC5sb2NhbGVDb21wYXJlKGIubGFiZWwpXG4gICk7XG4gIGlmaWQudmFsdWUgPSBfaWZpZDtcbiAgc2Nhbl90eXBlX2xpc3QudmFsdWUgPSBzY2FuX3R5cGVzO1xuICBkaXNjb3ZlcmVkX3NjYW5fdHlwZV9saXN0LnZhbHVlID0gc2Nhbl90eXBlcy5maWx0ZXIoKGl0ZW0pID0+IChpdGVtLmlkICE9ICdpcHY0X25ldHNjYW4nKSk7XG4gIGlzX2VudGVycHJpc2VfbC52YWx1ZSA9IF9pc19lbnRlcnByaXNlX2w7XG4gIHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZSA9IHNjYW5fdHlwZV9saXN0LnZhbHVlWzBdO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW5ldmVyIHRoZSBDSURSIGNoYW5nZXMsXG4gKiBpbiBjYXNlIG9mIGEgbmV0d29yayB0aGUgcG9ydCBpcyBub3QgbmVlZGVkXG4gKi9cbi8qIFxuXG48ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC0yXCI+PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTAgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgIDwhLS1cbiAgICAgIEhJRERFTiBCVVRUT04gRk9SIE5PV1xuICAgICAgPGJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBAY2xpY2s9XCJsb2FkX3BvcnRzXCJcbiAgICAgIDpkaXNhYmxlZD1cIiFpc19ob3N0X2NvcnJlY3QgfHwgZGlzYWJsZV9sb2FkX3BvcnRzXCJcbiAgICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICA+XG4gICAgICB7eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5sb2FkX3BvcnRzXCIpIH19XG4gICAgPC9idXR0b24+XG4gICAgLS0+XG4gICAgPGRkIHYtaWY9XCJzaG93X3BvcnRfZmVlZGJhY2tcIiBjbGFzcz1cIm1zLTIgbWItMCB0ZXh0LWRhbmdlclwiPlxuICAgICAge3sgcG9ydF9mZWVkYmFjayB9fVxuICAgIDwvZGQ+XG4gICAgPGEgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGVcIj48L2E+XG4gIDwvZGl2PlxuPC9kaXY+XG5cbiAtLSBIaWRkZW4gZnVuY3Rpb24gZm9yIG5vdywgaXQncyBub3QgbmVlZGVkIC0tXG5cbmNvbnN0IHBvcnRfZmVlZGJhY2sgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vX3BvcnRzX2RldGVjdGVkXCIpO1xuY29uc3Qgc2VydmVyX3BvcnRzID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L29wZW5fcG9ydHMubHVhYDtcbmNvbnN0IGRpc2FibGVfbG9hZF9wb3J0cyA9IHJlZihmYWxzZSk7XG5cbmZ1bmN0aW9uIGRpc2FibGVfcG9ydHMoKSB7XG4gIGlmIChzZWxlY3RlZF9jaWRyLnZhbHVlLmlkICE9IGNpZHJfMjQpIHtcbiAgICBkaXNhYmxlX2xvYWRfcG9ydHMudmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBkaXNhYmxlX2xvYWRfcG9ydHMudmFsdWUgPSB0cnVlO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfcG9ydHMoKSB7XG4gIGFjdGl2YXRlX3NwaW5uZXIudmFsdWUgPSB0cnVlO1xuICAvKiBJbiBjYXNlIHRoZSBob3N0IGlzIG5vdCBlbXB0eSwgaGlkZSB0aGUgcGxhY2Vob2xkZXIgKi9cbi8qICBpZiAoZGF0YVV0aWxzLmlzRW1wdHlPck51bGwoaG9zdC52YWx1ZSkpIHtcbiAgICBoaWRlX3BvcnRzX3BsYWNlaG9sZGVyLnZhbHVlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBoaWRlX3BvcnRzX3BsYWNlaG9sZGVyLnZhbHVlID0gZmFsc2U7XG4gIH1cblxuICAvKiBSZXF1ZXN0IGZvciB0aGUgYXZhaWxhYmxlIHBvcnRzICovXG4vKiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNlcnZlcl9wb3J0cywge1xuICAgIGhvc3Q6IGhvc3QudmFsdWUsXG4gICAgaWZpZDogaWZpZC52YWx1ZSxcbiAgICBjbGlzcnY6IFwic2VydmVyXCIsXG4gIH0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuXG4gIC8qIFNob3cgdGhlIHJlc3VsdHMgb3IgZW1wdHkgaWYgbm8gZGF0YSB3YXMgZm91bmQgKi9cbi8qICBpZiAoIWRhdGFVdGlscy5pc0VtcHR5T3JOdWxsKHJlc3VsdCkpIHtcbiAgICBwb3J0cy52YWx1ZSA9IHJlc3VsdC5tYXAoKHgpID0+IHgua2V5KS5qb2luKFwiLFwiKTtcbiAgICBzaG93X3BvcnRfZmVlZGJhY2sudmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBzaG93X3BvcnRfZmVlZGJhY2sudmFsdWUgPSB0cnVlO1xuICAgIHBvcnRzLnZhbHVlID0gXCJcIjtcbiAgICAvKiBSZW1vdmUgdGhlIG1lc3NhZ2UgYWZ0ZXIgNSBzZWNvbmRzISAqL1xuLyogICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzaG93X3BvcnRfZmVlZGJhY2sudmFsdWUgPSBmYWxzZTtcbiAgICB9LCA1MDAwKTtcbiAgfVxuICBhY3RpdmF0ZV9zcGlubmVyLnZhbHVlID0gZmFsc2U7XG59XG4qL1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBtZXRyaWNzTG9hZGVkIH0pO1xuPC9zY3JpcHQ+XG4iLCJcbmV4cG9ydCBjb25zdCBjb2x1bW5zX2Zvcm1hdHRlciA9IChjb2x1bW5zLCBzY2FuX3R5cGVfbGlzdCwgaXNfcmVwb3J0LCBpZmlkKSA9PiB7XG4gIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgZG93bmxvYWQ6IHRydWUsXG4gICAgICAgIHNob3dfcmVzdWx0OiB0cnVlXG4gICAgICB9O1xuXG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcImhvc3RcIjogKGhvc3QsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIGhvc3RfZihob3N0LHJvdyxpZmlkKTtcbiAgICB9LFxuICAgIFwic2Nhbl90eXBlXCI6IChzY2FuX3R5cGUsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIHNjYW5fdHlwZV9mKHNjYW5fdHlwZSwgcm93LCBzY2FuX3R5cGVfbGlzdCk7XG4gICAgfSxcbiAgICBcImxhc3Rfc2NhblwiOiAobGFzdF9zY2FuLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBsYXN0X3NjYW5fZihsYXN0X3NjYW4sIHJvdyk7XG4gICAgfSxcblxuICAgIFwiZHVyYXRpb25cIjogKGxhc3Rfc2Nhbiwgcm93KSA9PiB7XG4gICAgICByZXR1cm4gZHVyYXRpb25fZihsYXN0X3NjYW4sIHJvdyk7XG4gICAgfSxcbiAgICBcInNjYW5fZnJlcXVlbmN5XCIgOiAoc2Nhbl9mcmVxdWVuY3kpID0+IHtcbiAgICAgIHJldHVybiBzY2FuX2ZyZXF1ZW5jeV9mKHNjYW5fZnJlcXVlbmN5KTtcbiAgICB9LCBcbiAgICBcImlzX29rX2xhc3Rfc2NhblwiOiAoaXNfb2tfbGFzdF9zY2FuKSA9PiB7XG4gICAgICByZXR1cm4gaXNfb2tfbGFzdF9zY2FuX2YoaXNfb2tfbGFzdF9zY2FuKTtcbiAgICAgIFxuICAgIH0sXG4gICAgXCJtYXhfc2NvcmVfY3ZlXCI6IChtYXhfc2NvcmVfY3ZlLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBtYXhfc2NvcmVfY3ZlX2YobWF4X3Njb3JlX2N2ZSwgcm93KTtcbiAgICB9LFxuICAgIFwidGNwX3BvcnRzXCI6ICh0Y3BfcG9ydHMsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0c19mKHRjcF9wb3J0cywgcm93KTtcbiAgICAgIFxuICAgIH0sXG4gICAgXCJ1ZHBfcG9ydHNcIjogKHVkcF9wb3J0cywgcm93KSA9PiB7XG4gICAgICByZXR1cm4gdWRwX3BvcnRzX2YodWRwX3BvcnRzLCByb3cpO1xuICAgIH0sXG4gICAgXCJudW1fdnVsbmVyYWJpbGl0aWVzX2ZvdW5kXCI6IChudW1fdnMsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIG51bV92dWxuX2ZvdW5kX2YobnVtX3ZzLHJvdyk7XG5cbiAgICB9XG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICBpZiAoYy5pZCA9PSBcImFjdGlvbnNcIikge1xuICAgICAgICAgICAgXG4gICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgIFxuICAgICAgICBiLmZfbWFwX2NsYXNzID0gKGN1cnJlbnRfY2xhc3MsIHJvdykgPT4geyBcbiAgICAgICAgICBjdXJyZW50X2NsYXNzID0gY3VycmVudF9jbGFzcy5maWx0ZXIoKGNsYXNzX2l0ZW0pID0+IGNsYXNzX2l0ZW0gIT0gXCJsaW5rLWRpc2FibGVkXCIpO1xuICAgICAgICAgIC8vIEZJWCBNRSB3aXRoIFVEUCBwb3J0cyBjaGVja1xuICAgICAgICAgIGlmKChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDMgfHwgcm93LmlzX29rX2xhc3Rfc2NhbiA9PSBudWxsIHx8IChyb3cubGFzdF9zY2FuID09IG51bGwgfHwgKChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lID09IG51bGwpKSkgKSAmJiB2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRfY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7IFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY3VycmVudF9jbGFzcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBjb2x1bW5zO1xufTtcblxuZXhwb3J0IGNvbnN0IG51bV92dWxuX2ZvdW5kX2YgPSAobnVtX3Z1bG5fZm91bmQsIHJvdykgPT4ge1xuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gICAgcmV0dXJuIG51bV92dWxuX2ZvdW5kO1xuICB9XG4gIHJldHVybiBcIlwiO1xuXG59XG5leHBvcnQgY29uc3QgbWF4X3Njb3JlX2N2ZV9mID0gKG1heF9zY29yZV9jdmUsIHJvdykgPT4ge1xuICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gICAgY29uc3Qgc2NvcmUgPSBOdW1iZXIobWF4X3Njb3JlX2N2ZSk7XG4gICAgbGV0IGZvbnRfY29sb3IgPSBcIlwiO1xuICBcbiAgICBpZiAobWF4X3Njb3JlX2N2ZSAhPSBudWxsKSB7XG4gIFxuICAgICAgaWYgKHNjb3JlID09IDApIHtcbiAgICAgICAgZm9udF9jb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgIH0gZWxzZSBpZihzY29yZSA8IDMuOSkge1xuICAgICAgICBmb250X2NvbG9yID0gXCJncmV5XCI7XG4gICAgICB9IGVsc2UgaWYoc2NvcmUgPCA3KSB7XG4gICAgICAgIGZvbnRfY29sb3IgPSBcInllbGxvd1wiO1xuICAgICAgfSBlbHNlICB7XG4gICAgICAgIGZvbnRfY29sb3IgPSBcInJlZFwiO1xuICAgICAgfSBcbiAgXG4gICAgICBpZiAoc2NvcmUgIT0gMCkge1xuICAgICAgICBsYWJlbCA9IGA8Rk9OVCBDT0xPUj0ke2ZvbnRfY29sb3J9PiR7bWF4X3Njb3JlX2N2ZX1gO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIFxuXG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5cbmV4cG9ydCBjb25zdCBzY2FuX3R5cGVfZiA9IChzY2FuX3R5cGUsIGZyb21fcmVwb3J0LCByb3cpID0+IHtcbiAgaWYgKGZyb21fcmVwb3J0ICYmIHJvdy5pc19kb3duKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGlmIChzY2FuX3R5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBsYWJlbCA9IHNjYW5fdHlwZVxuICAgIGNvbnN0IGkxOG5fbmFtZSA9IFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjYW5fdHlwZV9saXN0LlwiK3NjYW5fdHlwZTtcbiAgICBsYWJlbCA9IGkxOG4oaTE4bl9uYW1lKTtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxhc3Rfc2Nhbl9mID0gKGxhc3Rfc2Nhbiwgcm93KSA9PiB7XG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDMpIHtcbiAgICByZXR1cm4gYGA7XG4gIH1cbiAgaWYgKGxhc3Rfc2NhbiAhPT0gdW5kZWZpbmVkICYmIGxhc3Rfc2Nhbi50aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbGFzdF9zY2FuLnRpbWU7XG4gIH0gZWxzZSBpZiAobGFzdF9zY2FuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbGFzdF9zY2FuO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdF95ZXRcIik7XG4gIH1cbn0gXG5cbmV4cG9ydCBjb25zdCBkdXJhdGlvbl9mID0gKGxhc3Rfc2Nhbiwgcm93KSA9PiB7XG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDMgKSB7XG4gICAgcmV0dXJuIGBgO1xuICB9XG4gIGlmIChyb3cubGFzdF9zY2FuICE9PSB1bmRlZmluZWQgJiYgcm93Lmxhc3Rfc2Nhbi5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJvdy5sYXN0X3NjYW4uZHVyYXRpb247XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90X3lldFwiKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2Nhbl9mcmVxdWVuY3lfZiA9IChzY2FuX2ZyZXF1ZW5jeSkgPT4ge1xuICBsZXQgbGFiZWwgPSBcIlwiO1xuICBpZiAoc2Nhbl9mcmVxdWVuY3kgPT0gbnVsbCB8fCBzY2FuX2ZyZXF1ZW5jeSA9PSBcImRpc2FibGVkXCIpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfSBlbHNlIGlmIChzY2FuX2ZyZXF1ZW5jeSA9PSBcIjFkYXlcIikge1xuICAgIGxhYmVsID0gIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGFpbHlcIik7XG4gIH0gZWxzZSB7XG4gICAgbGFiZWwgPSAgaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy53ZWVrbHlcIik7XG4gIH1cbiAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xufVxuXG5leHBvcnQgY29uc3QgaXNfb2tfbGFzdF9zY2FuX2YgPSAoaXNfb2tfbGFzdF9zY2FuKSA9PiB7XG4gIGxldCBsYWJlbCA9IFwiXCJcbiAgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAyKSB7XG4gICAgLy8gc2NoZWR1bGVkXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlZFwiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctZGFya1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSA0KSB7XG4gICAgLy8gbm90IHNjYW5uZWRcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2Nhbm5pbmdcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLWluZm9cIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDsgXG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDMgfHwgaXNfb2tfbGFzdF9zY2FuID09IG51bGwpIHtcbiAgICAvLyBub3Qgc2Nhbm5lZFxuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rfc2Nhbm5lZFwiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctcHJpbWFyeVwiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAxKSB7XG4gICAgLy8gc3VjY2Vzc1xuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zdWNjZXNzXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zdWNjZXNzXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDApIHtcbiAgICAvLyBlcnJvclxuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5lcnJvclwiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctZGFuZ2VyXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDUpIHtcbiAgICAvLyB3YXJuaW5nIC0+IGZhaWxlZFxuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5mYWlsZWRcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXdhcm5pbmdcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbiAgfSBcbn1cblxuY29uc3QgcG9ydHNfbGlzdF9zdHJpbmcgPSAocG9ydF9saXN0KSA9PiB7XG4gIGxldCBwb3J0c19zdHJpbmcgPSBcIlwiO1xuICBpZiAocG9ydF9saXN0ICE9IG51bGwpIHtcbiAgICBwb3J0X2xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYocG9ydHNfc3RyaW5nID09IFwiXCIpIHtcbiAgICAgICAgcG9ydHNfc3RyaW5nID0gaXRlbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcnRzX3N0cmluZyArPSBgLCAke2l0ZW19YDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwb3J0c19zdHJpbmc7XG59XG5cbmNvbnN0IGdldF9udW1fb3Blbl9wb3J0c19pY29uID0gKGRpZmZfY2FzZSwgdW51c2VkX3BvcnRfbGlzdCwgZmlsdGVyZWRfcG9ydF9saXN0KSA9PiB7XG5cbiAgbGV0IGxhYmVsID0gbnVsbDtcbiAgc3dpdGNoKGRpZmZfY2FzZSkge1xuICAgIGNhc2UgNDoge1xuICAgICAgbGV0IHVudXNlZF9wb3J0X2xpc3Rfc3RyaW5nID0gcG9ydHNfbGlzdF9zdHJpbmcodW51c2VkX3BvcnRfbGlzdCk7XG4gICAgICBsYWJlbCA9IGAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWdob3N0XCIgdGl0bGU9JyR7dW51c2VkX3BvcnRfbGlzdF9zdHJpbmd9Jz48L2k+PC9zcGFuPjwvZGl2PmA7XG4gICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOiB7XG4gICAgICBsZXQgZmlsdGVyZWRfcG9ydHNfbGlzdF9zdHJpbmcgPSBwb3J0c19saXN0X3N0cmluZyhmaWx0ZXJlZF9wb3J0X2xpc3QpO1xuICAgICAgbGFiZWwgPSBgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWx0ZXJcIiB0aXRsZT0nJHtmaWx0ZXJlZF9wb3J0c19saXN0X3N0cmluZ30nPjwvaT48L3NwYW4+YDtcbiAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59XG5cbmV4cG9ydCBjb25zdCB1ZHBfcG9ydHNfZiA9ICh1ZHBfcG9ydHMsIHJvdykgPT4ge1xuICBpZiAodWRwX3BvcnRzID09IDAgJiYgcm93LnVkcF9wb3J0cyA9PSAwICYmIHJvdy5zY2FuX3R5cGUuY29udGFpbnMoXCJ1ZHBcIikpIHtcbiAgICB1ZHBfcG9ydHMgPSByb3cubnVtX29wZW5fcG9ydHM7XG4gIH1cbiAgbGV0IGxhYmVsID0gXCJcIjtcblxuICBpZiAodWRwX3BvcnRzID09IG51bGwgfHwgdWRwX3BvcnRzIDw9IDApIHtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG4gIFxuICAgIGxhYmVsID0gYCR7dWRwX3BvcnRzfWA7XG5cbiAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG5cbiAgICAgIGNvbnN0IG51bV9wb3J0c19pY29uID0gZ2V0X251bV9vcGVuX3BvcnRzX2ljb24ocm93LnVkcF9wb3J0c19jYXNlLHJvdy51ZHBfcG9ydHNfdW51c2VkLCByb3cudWRwX2ZpbHRlcmVkX3BvcnRzKTtcbiAgICAgIGlmKG51bV9wb3J0c19pY29uICE9IG51bGwpIHtcbiAgICAgICAgbGFiZWwgKz0gbnVtX3BvcnRzX2ljb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5cbmV4cG9ydCBjb25zdCB0Y3BfcG9ydHNfZiA9ICh0Y3BfcG9ydHMsIHJvdykgPT4ge1xuICBpZiAodGNwX3BvcnRzID09IDAgJiYgcm93LnRjcF9wb3J0cyA9PSAwICYmIHJvdy5zY2FuX3R5cGUuY29udGFpbnMoXCJ0Y3BcIikpIHtcbiAgICB0Y3BfcG9ydHMgPSByb3cubnVtX29wZW5fcG9ydHM7XG4gIH1cbiAgbGV0IGxhYmVsID0gXCJcIjtcblxuICBpZiAodGNwX3BvcnRzID09IG51bGwgfHwgdGNwX3BvcnRzIDw9IDApIHtcbiAgICByZXR1cm4gbGFiZWw7XG4gIH1cblxuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpKSB7XG5cbiAgXG4gICAgbGFiZWwgPSBgJHt0Y3BfcG9ydHN9YDtcblxuICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcblxuICAgICAgY29uc3QgbnVtX3BvcnRzX2ljb24gPSBnZXRfbnVtX29wZW5fcG9ydHNfaWNvbihyb3cudGNwX3BvcnRzX2Nhc2Uscm93LnRjcF9wb3J0c191bnVzZWQsIHJvdy50Y3BfcG9ydHNfZmlsdGVyZWQpO1xuICAgICAgaWYobnVtX3BvcnRzX2ljb24gIT0gbnVsbCkge1xuICAgICAgICBsYWJlbCArPSBudW1fcG9ydHNfaWNvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59XG5cbmV4cG9ydCBjb25zdCB0Y3BfcG9ydF9mID0gKHBvcnQsIHJvdykgPT4ge1xuICBsZXQgcnNwID0gcG9ydDtcbiAgaWYgKHJvdy5wb3J0X2xhYmVsICE9IG51bGwgJiYgcm93LnBvcnRfbGFiZWwgIT0gcG9ydCkge1xuICAgIHJzcCArPSBgICgke3Jvdy5wb3J0X2xhYmVsfSlgXG4gIH1cbiAgcmV0dXJuIHJzcDtcbn1cbmNvbnN0IGZpbmRfYmFkZ2UgPSAocG9ydCwgcm93LCBwb3J0c191bnVzZWQsIHBvcnRzX2ZpbHRlcmVkKSA9PiB7XG4gIGxldCByZXN1bHQgPSAnJ1xuICBpZiAocG9ydHNfdW51c2VkICE9IG51bGwpIHtcbiAgICBwb3J0c191bnVzZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYocG9ydCA9PSBOdW1iZXIoaXRlbSkgKSB7XG4gICAgICAgIHJlc3VsdCA9IFwidW51c2VkXCI7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlmKHJlc3VsdCAhPSAnJykge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocG9ydHNfZmlsdGVyZWQgIT0gbnVsbCkge1xuICAgIHBvcnRzX2ZpbHRlcmVkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKHBvcnQgPT0gTnVtYmVyKGl0ZW0pKSB7XG4gICAgICAgIHJlc3VsdCA9IFwiZmlsdGVyZWRcIjtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3QgZ2V0X2ljb25fY29tcG9uZW50ID0gKGl0ZW0sIHJvdywgcG9ydHNfdW51c2VkLCBwb3J0c19maXRlcmVkKSA9PiB7XG4gIGxldCBwb3J0ID0gaXRlbS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIvXCIpWzBdO1xuICBsZXQgcG9ydF9iYWRnZSA9IGZpbmRfYmFkZ2UoTnVtYmVyKHBvcnQpLCByb3csIHBvcnRzX3VudXNlZCwgcG9ydHNfZml0ZXJlZCk7XG4gIGxldCBpY29uX2NvbXAgPSBudWxsO1xuICBzd2l0Y2ggKHBvcnRfYmFkZ2UpIHtcbiAgICBjYXNlICd1bnVzZWQnOiBcbiAgICAgICAgaWNvbl9jb21wID0gYCAmbmJzcDs8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiIHRpdGxlPScke2kxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy51bnVzZWRfcG9ydCcpfSc+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1naG9zdFwiPjwvaT48L3NwYW4+YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ZpbHRlcmVkJzpcbiAgICAgICAgaWNvbl9jb21wID0gYCAmbmJzcDs8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXByaW1hcnlcIiB0aXRsZT0nJHtpMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZmlsdGVyZWRfcG9ydCcpfSc+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWx0ZXJcIj48L2k+PC9zcGFuPmA7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OiBcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGljb25fY29tcDtcbn1cblxuZXhwb3J0IGNvbnN0IHRjcF91ZHBfcG9ydHNfbGlzdF9mID0gKHRjcF9wb3J0c19saXN0LHVkcF9wb3J0c19saXN0LCByb3cpID0+IHtcbiAgbGV0IHBvcnRzX21hcCA9IG5ldyBNYXAoKTtcblxuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpICYmIHRjcF9wb3J0c19saXN0ICE9IG51bGwgKSB7XG4gICAgY29uc3QgcG9ydHMgPSB0Y3BfcG9ydHNfbGlzdC5zcGxpdChcIixcIik7XG4gICAgbGV0IGxhYmVsID0gXCJcIjtcbiAgICBsZXQgcG9ydF9pZCA9IFwiXCI7XG4gICAgcG9ydHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYoaXRlbSAhPSBudWxsICYmIGl0ZW0gIT0gJycpIHtcblxuICAgICAgICBsYWJlbCA9IGl0ZW07XG4gICAgICAgIHBvcnRfaWQgPSBpdGVtO1xuICAgICAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG4gICAgICAgICAgY29uc3QgaWNvbl9jb21wID0gZ2V0X2ljb25fY29tcG9uZW50KGl0ZW0sIHJvdywgcm93LnRjcF9wb3J0c191bnVzZWQsIHJvdy50Y3BfcG9ydHNfZmlsdGVyZWQpO1xuICAgICAgICAgIGlmKGljb25fY29tcCAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSBpY29uX2NvbXA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsYWJlbCA9IGA8bGk+JHtsYWJlbH08L2xpPmA7XG5cbiAgICAgICAgcG9ydHNfbWFwLnNldChpdGVtLCAge3BvcnRfbGFiZWwgOmxhYmVsLCBwb3J0X2lkOiBOdW1iZXIocG9ydF9pZC5zcGxpdChcIi9cIilbMF0pfSlcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChyb3cudGNwX3BvcnRzX2ZpbHRlcmVkICE9IG51bGwpIHtcbiAgICAgIHJvdy50Y3BfcG9ydHNfZmlsdGVyZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXG4gICAgICAgIGl0ZW0gKz0gYC90Y3BgO1xuICAgICAgICBsYWJlbCA9IGl0ZW07XG4gICAgICAgIHBvcnRfaWQgPSBpdGVtO1xuICAgICAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG4gICAgICAgICAgbGFiZWwgKz0gYCA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXByaW1hcnlcIiB0aXRsZT0nJHtpMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZmlsdGVyZWRfcG9ydCcpfSc+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWx0ZXJcIj48L2k+PC9zcGFuPmA7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwgPSBgPGxpPiR7bGFiZWx9PC9saT5gO1xuICAgICAgICBwb3J0c19tYXAuc2V0KGl0ZW0sICB7cG9ydF9sYWJlbCA6bGFiZWwsIHBvcnRfaWQ6IE51bWJlcihwb3J0X2lkLnNwbGl0KFwiL1wiKVswXSl9KTtcblxuXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gIH0gXG5cblxuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpICYmIHVkcF9wb3J0c19saXN0ICE9IG51bGwpIHtcbiAgICBjb25zdCBwb3J0cyA9IHVkcF9wb3J0c19saXN0LnNwbGl0KFwiLFwiKTtcblxuICAgIGxldCBsYWJlbCA9IFwiXCI7XG4gICAgbGV0IHBvcnRfaWQgPSBcIlwiO1xuICAgIHBvcnRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0gIT0gbnVsbCAmJiBpdGVtICE9ICcnKSB7XG5cbiAgICAgICAgbGFiZWwgPSBpdGVtO1xuICAgICAgICBwb3J0X2lkID0gaXRlbTtcbiAgICAgICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuICAgICAgICAgIGNvbnN0IGljb25fY29tcCA9IGdldF9pY29uX2NvbXBvbmVudChpdGVtLCByb3csIHJvdy51ZHBfcG9ydHNfdW51c2VkLCByb3cudWRwX3BvcnRzX2ZpbHRlcmVkKTtcbiAgICAgICAgICBpZihpY29uX2NvbXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGFiZWwgKz0gaWNvbl9jb21wO1xuICAgICAgICAgIH0gICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGxhYmVsID0gYDxsaT4ke2xhYmVsfTwvbGk+YDtcblxuICAgICAgICBwb3J0c19tYXAuc2V0KGl0ZW0sIHtwb3J0X2xhYmVsIDpsYWJlbCwgcG9ydF9pZDogTnVtYmVyKHBvcnRfaWQuc3BsaXQoXCIvXCIpWzBdKX0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHJvdy51ZHBfZmlsdGVyZWRfcG9ydHMgIT0gbnVsbCkge1xuICAgICAgcm93LnVkcF9wb3J0c19maWx0ZXJlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG5cbiAgICAgICAgaXRlbSArPSBgL3VkcGA7XG4gICAgICAgIGxhYmVsID0gaXRlbTtcbiAgICAgICAgcG9ydF9pZCA9IGl0ZW07XG4gICAgICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcbiAgICAgICAgICBsYWJlbCArPSBgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctcHJpbWFyeVwiIHRpdGxlPScke2kxOG4oJ2hvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5maWx0ZXJlZF9wb3J0Jyl9Jz48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbHRlclwiPjwvaT48L3NwYW4+YDtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCA9IGA8bGk+JHtpdGVtfTwvbGk+YDtcbiAgICAgICAgcG9ydHNfbWFwLnNldChpdGVtLCB7cG9ydF9sYWJlbDogbGFiZWwsIHBvcnRfaWQgOiBOdW1iZXIocG9ydF9pZC5zcGxpdChcIi9cIilbMF0pfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGxldCBjb250ZW50X2xhYmVsID0gXCJcIlxuICBwb3J0c19tYXAgPSBuZXcgTWFwKFsuLi5wb3J0c19tYXAuZW50cmllcygpXS5zb3J0KChhLGIpID0+IGFbMV0ucG9ydF9pZC1iWzFdLnBvcnRfaWQpKTtcblxuICBwb3J0c19tYXAuZm9yRWFjaCgodmFsdWVzLCBrZXlzKSA9PiB7XG4gICAgY29udGVudF9sYWJlbCArPSBgJHt2YWx1ZXMucG9ydF9sYWJlbH1gO1xuICB9KVxuXG5cbiAgcmV0dXJuIGNvbnRlbnRfbGFiZWw7XG59XG5cbmV4cG9ydCBjb25zdCBkaXNjb3ZlcmRfaG9zdHNfbGlzdF9mID0gKGhvc3RzX3N0cmluZykgPT4ge1xuICBjb25zdCBob3N0c19saXN0ID0gaG9zdHNfc3RyaW5nLnNwbGl0KFwiLFwiKTtcbiAgbGV0IGxhYmVsID0gXCJcIjtcbiAgaG9zdHNfbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaWYgKGl0ZW0gIT0gXCJcIilcbiAgICAgIGxhYmVsICs9IGA8bGk+JHtpdGVtfTwvbGk+YDtcbiAgfSlcbiAgcmV0dXJuIGxhYmVsO1xufVxuZXhwb3J0IGNvbnN0IGhvc3RzX2YgPSAoaG9zdHMsIHJvdykgPT4ge1xuXG4gIGNvbnN0IGhvc3RzX2xpc3QgPSBob3N0cy5zcGxpdChcIiwgXCIpO1xuICBsZXQgbGFiZWwgPSBcIlwiO1xuICBsZXQgaG9zdHNfbWFwID0gbmV3IE1hcCgpO1xuICBob3N0c19saXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBsZXQgaG9zdF9pbmZvID0gaXRlbS5zcGxpdChcInxcIik7XG5cbiAgICBob3N0c19tYXAuc2V0KFxuICAgICAgaG9zdF9pbmZvLmxlbmd0aCA+IDUgJiYgaG9zdF9pbmZvWzVdICE9IG51bGwgJiYgaG9zdF9pbmZvWzVdICE9IFwiXCIgPyBob3N0X2luZm9bNV0gOiBob3N0X2luZm9bMF0sIFxuICAgICAge1xuICAgICAgICBzY2FuX3R5cGU6IGhvc3RfaW5mb1sxXSxcbiAgICAgICAgaXA6IGhvc3RfaW5mb1swXSxcbiAgICAgICAgZGF0ZTogaG9zdF9pbmZvWzJdLnJlcGxhY2UoXCIgXCIsXCJfXCIpLFxuICAgICAgICBpc19pcHY0OiBob3N0X2luZm9bM10gPT0gJ3RydWUnLFxuICAgICAgICBlcG9jaDogaG9zdF9pbmZvWzRdXG4gICAgICB9KVxuICB9KTtcblxuICBob3N0c19tYXAgPSBuZXcgTWFwKFsuLi5ob3N0c19tYXAuZW50cmllcygpXS5zb3J0KCkpO1xuXG5cbiAgaG9zdHNfbWFwLmZvckVhY2goKHZhbHVlcywga2V5cykgPT4ge1xuICAgIGxldCB1cmwgPSBidWlsZF9ob3N0X3RvX3NjYW5fcmVwb3J0X3VybCh2YWx1ZXMuaXAsIHZhbHVlcy5zY2FuX3R5cGUsIHZhbHVlcy5kYXRlLCB2YWx1ZXMuZXBvY2gpO1xuXG4gICAgaWYgKHZhbHVlcy5pc19pcHY0KSB7XG4gICAgICBsYWJlbCArPSBgPGxpPiA8YSBocmVmPVwiJHt1cmx9XCI+JHtrZXlzfTwvYT48L2xpPmAgO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYWJlbCArPSBgPGxpPiA8YSBocmVmPVwiJHt1cmx9XCI+JHtrZXlzfSA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiPiR7aTE4bignaXB2NicpfTwvc3Bhbj48L2E+PC9saT5gIDtcbiAgICB9XG4gIH0pXG4gIHJldHVybiBsYWJlbDtcbn1cblxuY29uc3QgYnVpbGRfaG9zdF90b19zY2FuX3JlcG9ydF91cmwgPSAoaG9zdCwgc2Nhbl90eXBlLCBkYXRlLCBlcG9jaCkgPT4ge1xuICBjb25zdCBhY3RpdmVfbW9uaXRvcmluZ191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Z1bG5lcmFiaWxpdHlfc2Nhbi5sdWFgO1xuXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgaG9zdDogaG9zdCxcbiAgICBzY2FuX3R5cGU6IHNjYW5fdHlwZSxcbiAgICBzY2FuX3JldHVybl9yZXN1bHQ6IHRydWUsXG4gICAgcGFnZTogXCJzaG93X3Jlc3VsdFwiLFxuICAgIHNjYW5fZGF0ZTogZGF0ZSxcbiAgICBlcG9jaDogZXBvY2hcblxuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIHJldHVybiBgJHthY3RpdmVfbW9uaXRvcmluZ191cmx9PyR7dXJsX3BhcmFtc31gO1xufVxuXG5leHBvcnQgY29uc3QgaG9zdF9mID0gKGhvc3QsIHJvdywgaWZpZCkgPT4ge1xuICBsZXQgbGFiZWwgPSBob3N0O1xuICBsZXQgaG9zdF9ub3RfcmVhY2hhYmxlID0gcm93LmlzX29rX2xhc3Rfc2NhbiA9PSA1ICYmIHJvdy5pc19kb3duICE9IG51bGwgJiYgcm93LmlzX2Rvd24gPT0gdHJ1ZTtcbiAgaWYgKChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgfHwgaG9zdF9ub3RfcmVhY2hhYmxlKSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSkge1xuICAgIGxldCB1cmwgPSBidWlsZF9ob3N0X3RvX3NjYW5fcmVwb3J0X3VybChob3N0LCByb3cuc2Nhbl90eXBlLCByb3cubGFzdF9zY2FuLnRpbWUucmVwbGFjZShcIiBcIixcIl9cIiksIHJvdy5sYXN0X3NjYW4uZXBvY2gpO1xuICAgIGlmIChyb3cuc2Nhbl90eXBlID09ICdpcHY0X25ldHNjYW4nKSB7XG4gICAgICAvLyBhZGQgY2lkciBvbmx5IGZvciBpcHY0X25ldHNjYW4gXG4gICAgICBob3N0ID0gaG9zdCArIFwiLzI0XCJcbiAgICB9XG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7aG9zdH08L2E+YDtcbiAgICBpZiAoaG9zdF9ub3RfcmVhY2hhYmxlKSB7XG4gICAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtob3N0fSA8aSBjbGFzcz1cXFwiZmFzIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXFxcIiBzdHlsZT0nY29sb3I6ICNCOTRBNDg7Jz48L2k+IDwvYT5gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGFiZWw7XG59XG5cbmV4cG9ydCBjb25zdCBjdmVzX2YgPSAoY3Zlcywgcm93KSA9PiB7XG4gIGxldCBsYWJlbCA9IFwiXCI7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmIChyb3cuaXNfb2tfbGFzdF9zY2FuID09IDEgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkgJiYgY3ZlcyAhPSBudWxsKSB7XG5cbiAgICBsZXQgY3Zlc19tYXAgPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBtYXAgdG8gc29ydCBjdmVzIG9uIHNjb3JlXG4gICAgY3Zlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBsZXQgY3ZlX2RldGFpbHMgPSBpdGVtLnNwbGl0KFwifFwiKTtcbiAgICAgIGxldCBhY3R1YWxfc2NvcmUgPSAwO1xuICAgICAgaWYgKGN2ZV9kZXRhaWxzLmxlbmd0aD4gMSkge1xuICAgICAgICBhY3R1YWxfc2NvcmUgPSBOdW1iZXIoY3ZlX2RldGFpbHNbMV0pO1xuICAgICAgfVxuICBcbiAgICAgIGN2ZXNfbWFwLnNldChcbiAgICAgICAgY3ZlX2RldGFpbHNbMF0sIFxuICAgICAgICBhY3R1YWxfc2NvcmUpXG4gICAgfSk7XG4gIFxuICAgIGN2ZXNfbWFwID0gbmV3IE1hcChbLi4uY3Zlc19tYXAuZW50cmllcygpXS5zb3J0KChhLGIpID0+IGJbMV0gLSBhWzFdKSk7XG5cbiAgICAvLyByZXR1cm4gZmlyc3QgMTAwXG4gICAgY3Zlc19tYXAuZm9yRWFjaCgoc2NvcmUsIGtleSkgPT4ge1xuICAgICAgaWYgKGluZGV4IDwgMTAwKSB7XG5cbiAgICAgICAgICBsZXQgYmFkZ2VfdHlwZSA9IFwiXCI7XG4gICAgICAgICAgaWYgKHNjb3JlID09IDApIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXN1Y2Nlc3NcIjtcbiAgICAgICAgICB9IGVsc2UgaWYoc2NvcmUgPCAzLjkpIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXNlY29uZGFyeVwiO1xuICAgICAgICAgIH0gZWxzZSBpZihzY29yZSA8IDcpIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLXdhcm5pbmdcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFkZ2VfdHlwZSA9IFwiYmctZGFuZ2VyXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHVybCA9IG50b3BuZ191dGlsaXR5LmdldF9jdmVfZGV0YWlsc191cmwoa2V5LCByb3cuc2Nhbl90eXBlKTtcbiAgICAgICAgICBsYWJlbCArPSBgPGxpICB0aXRsZT0nJHtpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydC5jdmVzX3RpdGxlXCIpfSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJHt1cmx9XCI+PHNwYW4gY2xhc3M9XCJiYWRnZSAke2JhZGdlX3R5cGV9XCI+JHtrZXl9IDwvc3Bhbj48L2E+IFxuICAgICAgICAgICAgICAgICAgICAgICAgKCR7c2NvcmV9KVxuICAgICAgICAgICAgICAgICAgICA8L2xpPmA7XG5cbiAgICAgICAgXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiB2LWlmPVwiY2xpY2tob3VzZV9kaXNhYmxlZFwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8c3Bhbj4ge3sgZW5hYmxlX2NsaWNraG91c2VfdGV4dCB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IHYtaWY9XCJhdXRvcmVmcmVzaFwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3M9XCJzcGlubmVyLWJvcmRlciBzcGlubmVyLWJvcmRlci1zbSB0ZXh0LWluZm8gbWUtMVwiXG4gICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+IHt7IGluX3Byb2dyZXNzX3NjYW5fdGV4dCB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICB2LWlmPVwiaW5zZXJ0X3dpdGhfc3VjY2Vzc1wiXG4gICAgICAgICAgICBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MgYWxlcnQtZGlzbWlzc2FibGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zdWNjZXNzIG1lLTFcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj4ge3sgaW5zZXJ0X3RleHQgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgdi1pZj1cImFscmVhZHlfaW5zZXJ0ZWRcIlxuICAgICAgICAgICAgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgYWxlcnQtZGlzbWlzc2FibGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1kYW5nZXIgbWUtMVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPiB7eyBhbHJlYWR5X2luc2VydF90ZXh0IH19PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBpZD1cImhvc3RzX3RvX3NjYW5cIj5cbiAgICAgICAgICAgIDxNb2RhbERlbGV0ZVNjYW5Db25maXJtXG4gICAgICAgICAgICAgIHJlZj1cIm1vZGFsX2RlbGV0ZV9jb25maXJtXCJcbiAgICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfcm93XCJcbiAgICAgICAgICAgICAgQGRlbGV0ZV9hbGw9XCJkZWxldGVfYWxsX3Jvd3NcIlxuICAgICAgICAgICAgICBAc2Nhbl9yb3c9XCJzY2FuX3Jvd1wiXG4gICAgICAgICAgICAgIEBzY2FuX2FsbF9yb3dzPVwic2Nhbl9hbGxfZW50cmllc1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L01vZGFsRGVsZXRlU2NhbkNvbmZpcm0+XG4gICAgICAgICAgICA8TW9kYWxVcGRhdGVQZXJpb2RpY2l0eVNjYW5cbiAgICAgICAgICAgICAgcmVmPVwibW9kYWxfdXBkYXRlX3BlcmlvZGl0aWN5X3NjYW5cIlxuICAgICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV91cGRhdGVfcGVyaW9kaWNpdHlfc2NhblwiXG4gICAgICAgICAgICAgIEB1cGRhdGU9XCJ1cGRhdGVfYWxsX3NjYW5fZnJlcXVlbmNpZXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9Nb2RhbFVwZGF0ZVBlcmlvZGljaXR5U2Nhbj5cbiAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWdcbiAgICAgICAgICAgICAgcmVmPVwidGFibGVfaG9zdHNfdG9fc2NhblwiXG4gICAgICAgICAgICAgIDp0YWJsZV9pZD1cInRhYmxlX2lkXCJcbiAgICAgICAgICAgICAgOmNzcmY9XCJjb250ZXh0LmNzcmZcIlxuICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG4gICAgICAgICAgICAgIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgOmZfc29ydF9yb3dzPVwiY29sdW1uc19zb3J0aW5nXCJcbiAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiXG4gICAgICAgICAgICAgIEByb3dzX2xvYWRlZD1cIm9uX3RhYmxlX2xvYWRlZFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tbGlua1wiXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIHJlZj1cImFkZF9ob3N0XCJcbiAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF9ob3N0XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXIgbXQtM1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgcmVmPVwiZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJkZWxldGVfYWxsX2VudHJpZXNcIlxuICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgZGlzYWJsZWQ6IHRvdGFsX3Jvd3MgPT0gMCB9XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT5cbiAgICAgICAgICAgIHt7IF9pMThuKFwiZGVsZXRlX2FsbF9lbnRyaWVzXCIpIH19XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICByZWY9XCJzY2FuX2FsbFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJjb25maXJtX3NjYW5fYWxsX2VudHJpZXNcIlxuICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgbWUtMVwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7IGRpc2FibGVkOiB0b3RhbF9yb3dzID09IDAgfVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2xvY2stcm90YXRlLWxlZnRcIj48L2k+XG4gICAgICAgICAgICB7eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2hlZHVsZV9hbGxfc2NhblwiKSB9fVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwicHJvcHMuY29udGV4dC5pc19lbnRlcnByaXNlX2xcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIHJlZj1cInVwZGF0ZV9hbGxcIlxuICAgICAgICAgICAgICBAY2xpY2s9XCJ1cGRhdGVfYWxsX3BlcmlvZGljaXR5XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBtZS0xXCJcbiAgICAgICAgICAgICAgOmNsYXNzPVwieyBkaXNhYmxlZDogdG90YWxfcm93cyA9PSAwIH1cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7e1xuICAgICAgICAgICAgICAgIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnVwZGF0ZV9wZXJpb2RpY2l0eV90aXRsZVwiKVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxNb2RhbEFkZEhvc3RcbiAgICByZWY9XCJtb2RhbF9hZGRcIlxuICAgIDpjb250ZXh0PVwiY29udGV4dFwiXG4gICAgQGFkZD1cImFkZF9ob3N0X3Jlc3RcIlxuICAgIEBlZGl0PVwiZWRpdFwiXG4gICAgQGNsb3NlTW9kYWw9XCJ1cGRhdGVfbW9kYWxfc3RhdHVzKGZhbHNlKVwiXG4gICAgQG9wZW5Nb2RhbD1cInVwZGF0ZV9tb2RhbF9zdGF0dXModHJ1ZSlcIlxuICAgIEBoaWRkZW49XCJ1cGRhdGVfbW9kYWxfc3RhdHVzKGZhbHNlKVwiXG4gID5cbiAgPC9Nb2RhbEFkZEhvc3Q+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG4vKiBJbXBvcnRzICovXG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVTY2FuQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1zY2FuLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVXBkYXRlUGVyaW9kaWNpdHlTY2FuIH0gZnJvbSBcIi4vbW9kYWwtdXBkYXRlLXBlcmlvZGljaXR5LXNjYW4udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkSG9zdCB9IGZyb20gXCIuL21vZGFsLWFkZC12cy1ob3N0LnZ1ZVwiO1xuaW1wb3J0IHsgY29sdW1uc19mb3JtYXR0ZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZzX3JlcG9ydF9mb3JtYXR0ZXIuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgc29ydGluZ0Z1bmN0aW9ucyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc29ydGluZy11dGlscy5qc1wiO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IG5vdGUgPSBpMThuKFxuICBcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5nZW5lcmljX25vdGVzXzFcIlxuKS5yZXBsYWNlQWxsKFwiJHtodHRwX3ByZWZpeH1cIiwgYCR7aHR0cF9wcmVmaXh9YCk7XG5jb25zdCBub3RlX2xpc3QgPSBbbm90ZV07XG5cbmNvbnN0IGluc2VydF90ZXh0ID0gcmVmKGkxOG4oXCJzY2FuX2hvc3RfaW5zZXJ0ZWRcIikpO1xuY29uc3QgYWxyZWFkeV9pbnNlcnRfdGV4dCA9IHJlZihpMThuKFwic2Nhbl9ob3N0X2FscmVhZHlfaW5zZXJ0ZWRcIikpO1xuY29uc3QgaW5fcHJvZ3Jlc3Nfc2Nhbl90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3QgZW5hYmxlX2NsaWNraG91c2VfdGV4dCA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmVuYWJsZV9jbGlja2hvdXNlXCIpKTtcbmNvbnN0IHRpdGxlX2RlbGV0ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGVsZXRlX2hvc3RfdGl0bGVcIik7XG5jb25zdCBib2R5X2RlbGV0ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGVsZXRlX2hvc3RfZGVzY3JpcHRpb25cIik7XG5jb25zdCB0aXRsZV91cGRhdGVfcGVyaW9kaWNpdHlfc2NhbiA9IGkxOG4oXG4gIFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnVwZGF0ZV9wZXJpb2RpY2l0eV90aXRsZVwiXG4pO1xuXG5jb25zdCBhZGRfaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWRkL2hvc3QvdG9fc2Nhbi5sdWFgO1xuY29uc3QgZWRpdF9ob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9lZGl0L2hvc3QvdXBkYXRlX3ZhX3NjYW5fcGVyaW9kLmx1YWA7XG5jb25zdCByZW1vdmVfaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZGVsZXRlL2hvc3QvZGVsZXRlX2hvc3RfdG9fc2Nhbi5sdWFgO1xuY29uc3Qgc2Nhbl9ob3N0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9leGVjL2hvc3Qvc2NoZWR1bGVfdnVsbmVyYWJpbGl0eV9zY2FuLmx1YWA7XG5jb25zdCBzY2FuX3R5cGVfbGlzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvdnVsbmVyYWJpbGl0eV9zY2FuX3R5cGVfbGlzdC5sdWFgO1xuY29uc3QgYWN0aXZlX21vbml0b3JpbmdfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS92dWxuZXJhYmlsaXR5X3NjYW4ubHVhYDtcbmNvbnN0IHNjYW5fcmVzdWx0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC92dWxuZXJhYmlsaXR5X3NjYW5fcmVzdWx0Lmx1YWA7XG5jb25zdCBjaGVja19zdGF0dXNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3Z1bG5lcmFiaWxpdHlfc2Nhbl9zdGF0dXMubHVhYDtcblxuY29uc3QgdGFibGVfaWQgPSByZWYoXCJob3N0c190b19zY2FuXCIpO1xuY29uc3QgdGFibGVfaG9zdHNfdG9fc2NhbiA9IHJlZigpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYoKTtcbmNvbnN0IG1vZGFsX2FkZCA9IHJlZigpO1xuY29uc3QgbW9kYWxfdXBkYXRlX3BlcmlvZGl0aWN5X3NjYW4gPSByZWYoKTtcbmNvbnN0IHRvdGFsX3Jvd3MgPSByZWYoMCk7XG5jb25zdCBpbl9wcm9ncmVzc19udW1iZXIgPSByZWYobnVsbCk7XG5jb25zdCByb3dfdG9fZGVsZXRlID0gcmVmKHt9KTtcbmNvbnN0IHJvd190b19zY2FuID0gcmVmKHt9KTtcbmNvbnN0IGF1dG9yZWZyZXNoID0gcmVmKGZhbHNlKTtcbmNvbnN0IG1vZGFsX29wZW5lZCA9IHJlZihmYWxzZSk7XG5jb25zdCBjbGlja2hvdXNlX2Rpc2FibGVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGluc2VydF93aXRoX3N1Y2Nlc3MgPSByZWYoZmFsc2UpO1xuY29uc3QgYWxyZWFkeV9pbnNlcnRlZCA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG59O1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxuICBpc19lbnRlcnByaXNlX2w6IHByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV9sLFxufSk7XG5cbmxldCBzY2FuX3R5cGVfbGlzdCA9IFtdO1xubGV0IGdldF9zY2FuX3R5cGVfbGlzdF92ID0gbnVsbDtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIGdldF9zY2FuX3R5cGVfbGlzdF92ID0gUHJvbWlzZS5hbGwoW1xuICAgIGdldF9zY2FuX3R5cGVfbGlzdCgpLFxuICAgIGNoZWNrX2luX3Byb2dyZXNzX3N0YXR1cygpLFxuICBdKTtcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBnZXRfc2Nhbl90eXBlX2xpc3RfdjtcbiAgYXdhaXQgbW9kYWxfYWRkLnZhbHVlLm1ldHJpY3NMb2FkZWQoXG4gICAgc2Nhbl90eXBlX2xpc3QsXG4gICAgcHJvcHMuY29udGV4dC5pZmlkLFxuICAgIHByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV9sXG4gICk7XG4gIGlmIChwcm9wcy5jb250ZXh0Lmhvc3QgIT0gbnVsbCkge1xuICAgIG1vZGFsX2FkZC52YWx1ZS5zaG93KG51bGwsIHByb3BzLmNvbnRleHQuaG9zdCk7XG4gIH1cblxuICBjbGlja2hvdXNlX2Rpc2FibGVkLnZhbHVlID0gIShwcm9wcy5jb250ZXh0LmlzX2NsaWNraG91c2VfZW5hYmxlZCk7XG5cbiAgLyogQ2hlY2sgdGhlIHN0YXR1cyBwZXJpb2RpY2FsbHkgZXZlcnkgMTAgc2Vjb25kcyAqL1xuICBzZXRJbnRlcnZhbChjaGVja19hdXRvcmVmcmVzaCwgMTAwMDApO1xufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGFkZCBhIG5ldyBob3N0IHRvIHNjYW4gKi9cbmZ1bmN0aW9uIGFkZF9ob3N0KCkge1xuICBpZiAocHJvcHMuY29udGV4dC5ob3N0ICE9IG51bGwgJiYgcHJvcHMuY29udGV4dC5ob3N0ICE9IFwiXCIpXG4gICAgbW9kYWxfYWRkLnZhbHVlLnNob3cobnVsbCwgcHJvcHMuY29udGV4dC5ob3N0KTtcbiAgZWxzZSBtb2RhbF9hZGQudmFsdWUuc2hvdygpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byByZWZyZXNoIHRhYmxlICovXG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlKGRpc2FibGVfbG9hZGluZykge1xuICAvKiBJdCdzIGltcG9ydGFudCB0byBzZXQgYXV0b3JlZnJlc2ggdG8gZmFsc2UsIGluIHRoaXMgd2F5IHdoZW4gcmVmcmVzaGVkIFxuICAgICBhbGwgdGhlIGVudHJpZXMgYXJlIGdvaW5nIHRvIGJlIGNoZWNrZWQgYW5kIGlmIGFsbCBvZiB0aGVtIGFyZSBub3Qgc2Nhbm5pbmcgaXQgc3RheXMgZmFsc2VcbiAgICovXG4gIGlmIChkaXNhYmxlX2xvYWRpbmcgIT0gbnVsbClcbiAgICB0YWJsZV9ob3N0c190b19zY2FuLnZhbHVlLnJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKTtcbiAgZWxzZSB0YWJsZV9ob3N0c190b19zY2FuLnZhbHVlLnJlZnJlc2hfdGFibGUodHJ1ZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgYWxsIGJ1dHRvbnMgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2N1c3RvbV9ldmVudChldmVudCkge1xuICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgY2xpY2tfYnV0dG9uX2VkaXRfaG9zdDogY2xpY2tfYnV0dG9uX2VkaXRfaG9zdCxcbiAgICBjbGlja19idXR0b25fZGVsZXRlOiBjbGlja19idXR0b25fZGVsZXRlLFxuICAgIGNsaWNrX2J1dHRvbl9zY2FuOiBjbGlja19idXR0b25fc2NhbixcbiAgICBjbGlja19idXR0b25fZG93bmxvYWQ6IGNsaWNrX2J1dHRvbl9kb3dubG9hZCxcbiAgICBjbGlja19idXR0b25fc2hvd19yZXN1bHQ6IGNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdCxcbiAgfTtcbiAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIERlZmF1bHQgc29ydGluZywgYnkgZGVmYXVsdCBkZWZhdWx0IGJ5IElQIGluIEFzYyBvcmRlciAqL1xuZnVuY3Rpb24gY29tcGFyZV9ieV9ob3N0X2lwKHIwLCByMSkge1xuICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlJUChcbiAgICByMFtcImhvc3RcIl0sXG4gICAgcjFbXCJob3N0XCJdLFxuICAgIDEgLyogYnkgZGVmYXVsdCBhc2MgKi9cbiAgKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBzaW1wbHkgcmV0dXJuIHRoZSBkYXRhIG9mIHRoZSBleGFjdCBjb2x1bW4gYW5kIHJvdyByZXF1ZXN0ZWQgKi9cbmZ1bmN0aW9uIGNvbHVtbl9kYXRhKGNvbCwgcm93KSB7XG4gIGxldCBkYXRhID0gcm93W2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICBpZiAoY29sLmlkID09IFwiZHVyYXRpb25cIikge1xuICAgIGRhdGEgPVxuICAgICAgcm93W1wibGFzdF9zY2FuXCJdID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAtMVxuICAgICAgICA6IHJvd1tcImxhc3Rfc2NhblwiXVtcImR1cmF0aW9uX2Vwb2NoXCJdO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImxhc3Rfc2NhblwiKSB7XG4gICAgZGF0YSA9XG4gICAgICByb3dbXCJsYXN0X3NjYW5cIl0gPT09IHVuZGVmaW5lZCBcbiAgICAgICAgPyAwXG4gICAgICAgIDogcm93W1wibGFzdF9zY2FuXCJdW1wiZXBvY2hcIl07XG4gIH0gZWxzZSBpZiAoY29sLmlkID09IFwiaXNfb2tfbGFzdF9zY2FuXCIpIHtcbiAgICBkYXRhID0gZ2V0X3NjYW5fc3RhdHVzX3ZhbHVlKGRhdGEsIHJvdyk7XG4gIH0gZWxzZSBpZiAoY29sLmlkID09IFwic2Nhbl9mcmVxdWVuY3lcIikge1xuICAgIGRhdGEgPSBnZXRfc2Nhbl9mcmVxdWVuY3koZGF0YSk7XG4gIH0gZWxzZSBpZiAoY29sLmlkID09IFwibWF4X3Njb3JlX2N2ZVwiIHx8IGNvbC5pZCA9PSBcIm51bV92dWxuZXJhYmlsaXRpZXNfZm91bmRcIiB8fCBjb2wuaWQgPT0gXCJ0Y3BfcG9ydHNcIiB8fCBjb2wuaWQgPT0gXCJ1ZHBfcG9ydHNcIilcbiAgICAvLyB0byBjb3JyZWN0bHkgc29ydCBhbHNvIGR1cmluZyBzY2FuLlxuICAgIC8vIGJlY2F1c2UgZHVyaW5nIHNjYW4gdGhlIG9sZCB2YWx1ZSBpcyBwcmVzZW50IGJ1dCBub3QgdmlzaWJsZVxuICAgIC8vIHN0YXR1cyBtdXN0IG5vdCBzdWNjZXNzIGFuZCBub3QgZmFpbGVkXG4gICAgaWYgKHJvd1tcImlzX29rX2xhc3Rfc2NhblwiXSAhPSAxICYmIHJvd1tcImlzX29rX2xhc3Rfc2NhblwiXSAhPSA1KSB7XG4gICAgICBkYXRhID0gMDtcbiAgICB9IFxuICByZXR1cm4gZGF0YTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdXNlZCB0byBzb3J0IHRoZSBjb2x1bW5zIG9mIHRoZSB0YWJsZSAqL1xuZnVuY3Rpb24gY29sdW1uc19zb3J0aW5nKGNvbCwgcjAsIHIxKSB7XG4gIGlmIChjb2wgIT0gbnVsbCkge1xuICAgIGxldCByMF9jb2wgPSBjb2x1bW5fZGF0YShjb2wsIHIwKTtcbiAgICBsZXQgcjFfY29sID0gY29sdW1uX2RhdGEoY29sLCByMSk7XG5cbiAgICAvKiBJbiBjYXNlIHRoZSB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBzb3J0IGJ5IElQICovXG4gICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgIHJldHVybiBjb21wYXJlX2J5X2hvc3RfaXAocjAsIHIxKTtcbiAgICB9XG4gICAgaWYgKGNvbC5pZCA9PSBcImhvc3RcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5SVAocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImhvc3RfbmFtZVwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJudW1fdnVsbmVyYWJpbGl0aWVzX2ZvdW5kXCIpIHtcbiAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gMDtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG5cbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInRjcF9wb3J0c1wiIHx8IGNvbC5pZCA9PSBcInVkcF9wb3J0c1wiKSB7XG4gICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IDA7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuXG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJkdXJhdGlvblwiKSB7XG4gICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImxhc3Rfc2NhblwiKSB7XG4gICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IDA7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiaXNfb2tfbGFzdF9zY2FuXCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcIm1heF9zY29yZV9jdmVcIikge1xuICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAwO1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcblxuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwic2Nhbl9mcmVxdWVuY3lcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbXBhcmVfYnlfaG9zdF9pcChyMCwgcjEpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRfc2Nhbl9mcmVxdWVuY3koc2Nhbl9mcmVxdWVuY3kpIHtcbiAgaWYgKHNjYW5fZnJlcXVlbmN5ID09IFwiMWRheVwiKSB7XG4gICAgcmV0dXJuIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGFpbHlcIik7XG4gIH0gZWxzZSBpZiAoc2Nhbl9mcmVxdWVuY3kgPT0gXCIxd2Vla1wiKSB7XG4gICAgcmV0dXJuIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMud2Vla2x5XCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGdldF9zY2FuX3N0YXR1c192YWx1ZShpc19va19sYXN0X3NjYW4sIHIpIHtcbiAgbGV0IHN0YXR1cyA9IFwiXCI7XG4gIGlmIChpc19va19sYXN0X3NjYW4gPT0gMikge1xuICAgIHN0YXR1cyA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2NoZWR1bGVkXCIpO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSA0KSB7XG4gICAgc3RhdHVzID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2FubmluZ1wiKTtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gMyB8fCBpc19va19sYXN0X3NjYW4gPT0gbnVsbCkge1xuICAgIHN0YXR1cyA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90X3NjYW5uZWRcIik7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDEpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnN1Y2Nlc3NcIik7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDUpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmZhaWxlZFwiKTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmVycm9yXCIpO1xuICB9XG4gIHJldHVybiBzdGF0dXMgKyByLmlkO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgZGVsZXRlIGJ1dHRvbiAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2RlbGV0ZShldmVudCkge1xuICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcygpO1xuICByb3dfdG9fZGVsZXRlLnZhbHVlID0gZXZlbnQucm93O1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KFwiZGVsZXRlX3NpbmdsZV9yb3dcIiwgaTE4bihcImRlbGV0ZV92c19ob3N0XCIpKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIHNjYW4gYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fc2NhbihldmVudCkge1xuICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcygpO1xuICByb3dfdG9fc2Nhbi52YWx1ZSA9IGV2ZW50LnJvdztcbiAgY29uc3Qgc2Nhbl9ob3N0X21zZyA9IGAke2kxOG4oXCJzY2FuX2hvc3RcIil9YDtcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcInNjYW5fcm93XCIsIHNjYW5faG9zdF9tc2cpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgZWRpdCBidXR0b24gKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9lZGl0X2hvc3QoZXZlbnQpIHtcbiAgbW9kYWxfYWRkLnZhbHVlLnNob3coZXZlbnQucm93KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIGFsbCBlbnRyaWVzICovXG5mdW5jdGlvbiBkZWxldGVfYWxsX2VudHJpZXMoKSB7XG4gIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzKCk7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coXCJkZWxldGVfYWxsXCIsIGkxOG4oXCJkZWxldGVfYWxsX3ZzX2hvc3RzXCIpKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZWRpdCBob3N0IHRvIHNjYW4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVkaXQocGFyYW1zKSB7XG4gIHBhcmFtcy5pc19lZGl0ID0gdHJ1ZTtcbiAgYXdhaXQgYWRkX2hvc3RfcmVzdChwYXJhbXMpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBFdmVyeSAxMCBzZWNvbmQgY2hlY2sgdG8gZGlzYWJsZSBmZWVkYmFja3MgKi9cbmZ1bmN0aW9uIHNldF9hbHJlYWR5X2luc2VydF9vcl9pbnNlcnRfd2l0aF9zdWNjZXNzKCkge1xuICBpZiAoaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChhbHJlYWR5X2luc2VydGVkLnZhbHVlID09PSB0cnVlKSB7XG4gICAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEV2ZXJ5IDEwIHNlY29uZCBjaGVjayB0byBkaXNhYmxlIGF1dG9yZWZyZXNoICovXG5mdW5jdGlvbiBjaGVja19hdXRvcmVmcmVzaCgpIHtcbiAgY2hlY2tfaW5fcHJvZ3Jlc3Nfc3RhdHVzKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEdldCB0aGUgbnVtYmVyIG9mIHJvd3Mgb2YgdGhlIHRhYmxlICovXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gIHRvdGFsX3Jvd3MudmFsdWUgPSB0YWJsZV9ob3N0c190b19zY2FuLnZhbHVlLmdldF9yb3dzX251bSgpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBtYXAgY29sdW1ucyBkYXRhICovXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSAoY29sdW1ucykgPT4ge1xuICByZXR1cm4gY29sdW1uc19mb3JtYXR0ZXIoY29sdW1ucywgc2Nhbl90eXBlX2xpc3QsIGZhbHNlLCBwcm9wcy5jb250ZXh0LmlmaWQpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKiogUkVTVCBGdW5jdGlvbnMgKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gYWRkIGEgbmV3IGhvc3QgZHVyaW5nIGVkaXQgKi9cbmNvbnN0IGFkZF9ob3N0X3Jlc3QgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfaG9zdF91cmwsIHtcbiAgICAuLi5wYXJhbXMsXG4gIH0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICBtb2RhbF9hZGQudmFsdWUuY2xvc2UoKTtcbiAgaWYgKHJlc3VsdC5yc3AgPT09IHRydWUpIHtcbiAgICBwYXJhbXMuY2lkciAhPSBudWxsXG4gICAgICA/IChpbnNlcnRfdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfdXBkYXRlZFwiKS5yZXBsYWNlKFxuICAgICAgICAgIFwiJXtob3N0fVwiLFxuICAgICAgICAgIGAke3BhcmFtcy5ob3N0fS8ke3BhcmFtcy5jaWRyfWBcbiAgICAgICAgKSlcbiAgICAgIDogKGluc2VydF90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faG9zdF91cGRhdGVkXCIpLnJlcGxhY2UoXG4gICAgICAgICAgXCIle2hvc3R9XCIsXG4gICAgICAgICAgYCR7cGFyYW1zLmhvc3R9YFxuICAgICAgICApKTtcblxuICAgIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSB0cnVlO1xuICAgIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgICBzZXRUaW1lb3V0KHNldF9hbHJlYWR5X2luc2VydF9vcl9pbnNlcnRfd2l0aF9zdWNjZXNzLCAxMDAwMCk7XG4gICAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgcGFyYW1zLmNpZHIgIT0gbnVsbFxuICAgICAgPyAoYWxyZWFkeV9pbnNlcnRfdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfYWxyZWFkeV9pbnNlcnRlZFwiKS5yZXBsYWNlKFxuICAgICAgICAgIFwiJXtob3N0fVwiLFxuICAgICAgICAgIGAke3BhcmFtcy5ob3N0fS8ke3BhcmFtcy5jaWRyfWBcbiAgICAgICAgKSlcbiAgICAgIDogKGFscmVhZHlfaW5zZXJ0X3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9ob3N0X2FscmVhZHlfaW5zZXJ0ZWRcIikucmVwbGFjZShcbiAgICAgICAgICBcIiV7aG9zdH1cIixcbiAgICAgICAgICBgJHtwYXJhbXMuaG9zdH1gXG4gICAgICAgICkpO1xuXG4gICAgbGV0IHNjYW5fdHlwZV9sYWJlbCA9IFwiXCI7XG5cbiAgICBzY2FuX3R5cGVfbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5pZCA9PSBwYXJhbXMuc2Nhbl90eXBlKSB7XG4gICAgICAgIHNjYW5fdHlwZV9sYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhbHJlYWR5X2luc2VydF90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faG9zdF9hbHJlYWR5X2luc2VydGVkXCIpLnJlcGxhY2UoXG4gICAgICBcIiV7c2Nhbl90eXBlfVwiLFxuICAgICAgYCR7c2Nhbl90eXBlX2xhYmVsfWBcbiAgICApO1xuICAgIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSB0cnVlO1xuICAgIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgICBzZXRUaW1lb3V0KHNldF9hbHJlYWR5X2luc2VydF9vcl9pbnNlcnRfd2l0aF9zdWNjZXNzLCAxMDAwMCk7XG4gIH1cblxuICBpZiAocGFyYW1zLmlzX2VkaXQgIT09IHRydWUpIHtcbiAgICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBhZGRzIGEgZmVlZGJhY2sgbWVzc2FnZSBvbiB0aGUgcGFnZSAqL1xuY29uc3QgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcyA9IGZ1bmN0aW9uIChpbl9wcm9ncmVzcykge1xuICAvKiBJbiBjYXNlIGEgaW5fcHJvZ3Jlc3MgaXMgYSBudW1iZXIsIGN1c3RvbWl6ZSB0aGUgZmVlZGJhY2sgbWVzc2FnZSAqL1xuICBpZiAoaW5fcHJvZ3Jlc3MgIT0gbnVsbCAmJiBpbl9wcm9ncmVzcyAhPSAwKSB7XG4gICAgaW5fcHJvZ3Jlc3Nfc2Nhbl90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faW5fcHJvZ3Jlc3NcIikucmVwbGFjZShcbiAgICAgIFwidG90YWxcIixcbiAgICAgIGAke2luX3Byb2dyZXNzfWBcbiAgICApO1xuICB9XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB1cGRhdGVfYWxsX3NjYW5fZnJlcXVlbmNpZXMgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChlZGl0X2hvc3RfdXJsLCB7XG4gICAgLi4ucGFyYW1zLFxuICB9KTtcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcblxuICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcygpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHJldHJpZXZlIHNjYW4gdHlwZXMgbGlzdCAqL1xuY29uc3QgZ2V0X3NjYW5fdHlwZV9saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc2Nhbl90eXBlX2xpc3RfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXMsXG4gIH0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICBzY2FuX3R5cGVfbGlzdCA9IHJlc3VsdC5yc3A7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBjaGVjayBpZiB0aGVyZSBpcyBhIHNjYW4gaW4gcHJvZ3Jlc3MgKi9cbmNvbnN0IGNoZWNrX2luX3Byb2dyZXNzX3N0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGNoZWNrX3N0YXR1c191cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gIGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPSBmYWxzZTtcbiAgYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9IGZhbHNlO1xuICByZWZyZXNoX2ZlZWRiYWNrX21lc3NhZ2VzKHJlc3VsdC5yc3AudG90YWxfaW5fcHJvZ3Jlc3MpO1xuXG4gIC8qIEdldCB0aGUgbnVtYmVyIG9mIHNjYW5zIGN1cnJlbnRseSBpbiBwcm9ncmVzcyAqL1xuICAvKiBJbiBjYXNlIHRoZSBudW1iZXIgY2hhbmdlZCwgcmVmcmVzaCB0aGUgdGFibGUgKi9cbiAgaWYgKGluX3Byb2dyZXNzX251bWJlci52YWx1ZSA9PSBudWxsKSB7XG4gICAgLyogRmlyc3QgdGltZSBjaGVja2luZyB0aGUgbnVtYmVyIG9mIHNjYW5zLCBkb24ndCByZWZyZXNoIHRoZSB0YWJsZSAqL1xuICAgIGluX3Byb2dyZXNzX251bWJlci52YWx1ZSA9IHJlc3VsdC5yc3AudG90YWxfaW5fcHJvZ3Jlc3M7XG4gIH1cblxuICBjb25zdCBzY2Fuc19lbmRlZCA9XG4gICAgcmVzdWx0LnJzcC50b3RhbF9pbl9wcm9ncmVzcyA9PSAwICYmIGluX3Byb2dyZXNzX251bWJlci52YWx1ZSA+IDA7XG4gIGluX3Byb2dyZXNzX251bWJlci52YWx1ZSA9IHJlc3VsdC5yc3AudG90YWxfaW5fcHJvZ3Jlc3M7XG4gIGF1dG9yZWZyZXNoLnZhbHVlID1cbiAgICBpbl9wcm9ncmVzc19udW1iZXIudmFsdWUgPiAwICYmIG1vZGFsX29wZW5lZC52YWx1ZSA9PT0gZmFsc2U7XG5cbiAgaWYgKGF1dG9yZWZyZXNoLnZhbHVlID09PSB0cnVlKSB7XG4gICAgLyogUmVmcmVzaCB0aGUgZGF0YSwgcGVyaW9kaWMgdXBkYXRlICovXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZWZyZXNoX3RhYmxlKHRydWUpO1xuICAgIH0sIDIwMDApO1xuICB9IGVsc2UgaWYgKHNjYW5zX2VuZGVkKSB7XG4gICAgLyogUmVmcmVzaCB0aGUgZGF0YSwgYWxsIHNjYW5zIGVuZGVkICovXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZWZyZXNoX3RhYmxlKHRydWUpO1xuICAgIH0sIDUwMDApO1xuICB9XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBjb25maXJtIHRvIHN0YXJ0IGFsbCBzY2FuICovXG5jb25zdCBjb25maXJtX3NjYW5fYWxsX2VudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coXCJzY2FuX2FsbF9yb3dzXCIsIGkxOG4oXCJzY2FuX2FsbF9ob3N0c1wiKSk7XG4gIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gdXBkYXRlIGFsbCBzY2FuICBmcmVxdWVuY2llcyovXG5jb25zdCB1cGRhdGVfYWxsX3BlcmlvZGljaXR5ID0gZnVuY3Rpb24gKCkge1xuICBtb2RhbF91cGRhdGVfcGVyaW9kaXRpY3lfc2Nhbi52YWx1ZS5zaG93KCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBleGVjIHRoZSB2dWxuZXJhYmlsaXR5IHNjYW4gb2YgYSBzaW5nbGUgaG9zdCAqL1xuY29uc3Qgc2Nhbl9yb3cgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19zY2FuLnZhbHVlO1xuICBhd2FpdCBzY2FuX3Jvd19yZXN0KHJvdy5ob3N0LCByb3cuc2Nhbl90eXBlLCByb3cucG9ydHMsIHJvdy5pZCk7XG4gIHJlZnJlc2hfdGFibGUodHJ1ZSAvKiBEaXNhYmxlIGxvYWRpbmcsIGFubm95aW5nIHdoZW4gZW5hYmxpbmcgYSBzY2FuICovKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHNjYW5fcm93X3Jlc3QgPSBhc3luYyBmdW5jdGlvbiAoaG9zdCwgc2Nhbl90eXBlLCBwb3J0cywgaWQpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNjYW5faG9zdF91cmwsIHtcbiAgICBob3N0OiBob3N0LFxuICAgIHNjYW5fdHlwZTogc2Nhbl90eXBlLFxuICAgIHNjYW5fc2luZ2xlX2hvc3Q6IHRydWUsXG4gICAgc2Nhbl9wb3J0czogcG9ydHMsXG4gICAgc2Nhbl9pZDogaWQsXG4gIH0pO1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGV4ZWMgYSB2dWxuZXJhYmlsaXR5IHNjYW4gdG8gYWxsIGhvc3RzIHNldCAqL1xuYXN5bmMgZnVuY3Rpb24gc2Nhbl9hbGxfZW50cmllcygpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNjYW5faG9zdF91cmwsIHtcbiAgICBzY2FuX3NpbmdsZV9ob3N0OiBmYWxzZSxcbiAgfSk7XG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIGhvc3QgdG8gc2NhbiAqL1xuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ob3N0X3VybCwge1xuICAgIGhvc3Q6IHJvdy5ob3N0LFxuICAgIHNjYW5fdHlwZTogcm93LnNjYW5fdHlwZSxcbiAgICBkZWxldGVfYWxsX3NjYW5faG9zdHM6IGZhbHNlLFxuICAgIHNjYW5faWQ6IHJvdy5pZCxcbiAgfSk7XG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBkZWxldGVzIGFsbCB0aGUgcm93cyAqL1xuY29uc3QgZGVsZXRlX2FsbF9yb3dzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocmVtb3ZlX2hvc3RfdXJsLCB7XG4gICAgZGVsZXRlX2FsbF9zY2FuX2hvc3RzOiB0cnVlLFxuICB9KTtcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBkb3dubG9hZCBsYXN0IHZ1bG5lcmFiaWxpdHkgc2NhbiByZXN1bHQgKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kb3dubG9hZChldmVudCkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgaG9zdDogZXZlbnQucm93Lmhvc3QsXG4gICAgc2Nhbl90eXBlOiBldmVudC5yb3cuc2Nhbl90eXBlLFxuICAgIGVwb2NoOiBldmVudC5yb3cubGFzdF9zY2FuLmVwb2NoXG4gIH07XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBjb25zdCB1cmwgPSBgJHtzY2FuX3Jlc3VsdF91cmx9PyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXRpbGl0eS5kb3dubG9hZF9VUkkodXJsKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gc2hvdyBsYXN0IHZ1bG5lcmFiaWxpdHkgc2NhbiByZXN1bHQgKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdChldmVudCkge1xuICBjb25zdCBob3N0ID0gZXZlbnQucm93Lmhvc3Q7XG4gIGNvbnN0IGRhdGUgPSBldmVudC5yb3cubGFzdF9zY2FuLnRpbWUucmVwbGFjZShcIiBcIiwgXCJfXCIpO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBob3N0LFxuICAgIHNjYW5fdHlwZTogZXZlbnQucm93LnNjYW5fdHlwZSxcbiAgICBzY2FuX3JldHVybl9yZXN1bHQ6IHRydWUsXG4gICAgcGFnZTogXCJzaG93X3Jlc3VsdFwiLFxuICAgIGVwb2NoOiBldmVudC5yb3cubGFzdF9zY2FuLmVwb2NoLFxuICAgIHNjYW5fZGF0ZTogZGF0ZSxcbiAgfTtcbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGNvbnN0IHVybCA9IGAke2FjdGl2ZV9tb25pdG9yaW5nX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gdXBkYXRlX21vZGFsX3N0YXR1cyh2YWx1ZSkge1xuICAvKiB1cGRhdGUgdGhlIG1vZGFsX29wZW5lZCB2YXIgdXNlZCBmb3IgZGlzYWJsZS9lbmFibGUgXG4gICAgIGF1dG9yZWZyZXNoIHdoZW4gbW9kYWwgaXMgb3Blbi9jbG9zZWQgKi9cbiAgbW9kYWxfb3BlbmVkLnZhbHVlID0gdmFsdWU7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG48L3NjcmlwdD5cbiAgIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkICBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8aDMgY2xhc3M9XCJkLWlubGluZS1ibG9jayBwdC0zIHBzLTNcIiB2LWh0bWw9XCJ0aXRsZV9odG1sXCI+PC9oMz5cbiAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIiA6Y2xhc3M9XCJbbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgdi1odG1sPVwibWVzc2FnZV9odG1sXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCI7XG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5jb25zdCBzY2FuX3Jlc3VsdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvdnVsbmVyYWJpbGl0eV9zY2FuX3Jlc3VsdC5sdWFgO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTsgXG5jb25zdCBtZXNzYWdlID0gcmVmKCcnKTtcbmNvbnN0IG1lc3NhZ2VfaHRtbCA9IHJlZignJyk7XG5jb25zdCB0aXRsZV9odG1sID0gcmVmKCcnKTtcblxuY29uc3QgdGl0bGUgPSByZWYoJycpO1xuY29uc3QgbXlfYXJyYXkgPSByZWYoW10pO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9yZXN1bHQoaG9zdCwgc2Nhbl90eXBlLCBkYXRlLCBlcG9jaCkge1xuICBcbiAgbG9hZGluZy52YWx1ZSA9IHRydWU7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgaG9zdDogaG9zdCxcbiAgICBzY2FuX3R5cGU6IHNjYW5fdHlwZSxcbiAgICBzY2FuX3JldHVybl9yZXN1bHQ6IHRydWUsXG4gICAgZXBvY2g6IGVwb2NoXG5cbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgbGV0IHVybCA9IGAke3NjYW5fcmVzdWx0X3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIGxldCByZXN1bHQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgbWVzc2FnZS52YWx1ZSA9IHJlc3VsdC5yc3A7XG4gIG1lc3NhZ2VfaHRtbC52YWx1ZSA9IGA8cHJlPiR7bWVzc2FnZS52YWx1ZX08L3ByZT5gO1xuXG4gIGlmIChzY2FuX3R5cGUgPT0gJ2lwdjRfbmV0c2NhbicpIHtcbiAgICBob3N0ICs9IFwiLzI0XCI7XG4gIH1cbiAgY29uc3QgaG9zdF9ocmVmID0gcHJvcHMuY29udGV4dC5pc19pbl9tZW0gPT09ICd0cnVlJyB8fCBwcm9wcy5jb250ZXh0LmlzX2luX21lbSA9PSB0cnVlID8gYCR7aG9zdH0gPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtob3N0fVwiPjxpIGNsYXNzID0gXCJmYXMgZmEtbGFwdG9wXCI+PC9pPjwvYT5gOiBob3N0O1xuICBcbiAgXG4gIHRpdGxlLnZhbHVlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy52c19yZXN1bHRcIikucmVwbGFjZShcIiV7aG9zdH1cIiwgaG9zdF9ocmVmKTtcbiAgaWYgKGRhdGUgIT0gbnVsbClcbiAgICBkYXRlID0gZGF0ZS5yZXBsYWNlQWxsKFwiX1wiLFwiIFwiKTtcblxuICBcbiAgdGl0bGUudmFsdWUgPSB0aXRsZS52YWx1ZS5yZXBsYWNlKFwiJXtkYXRlfVwiLGRhdGUpO1xuICB0aXRsZV9odG1sLnZhbHVlID0gdGl0bGUudmFsdWU7XG5cbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBnZXRfcmVzdWx0KHByb3BzLmNvbnRleHQuaG9zdCwgcHJvcHMuY29udGV4dC5zY2FuX3R5cGUsIHByb3BzLmNvbnRleHQuZGF0ZSwgcHJvcHMuY29udGV4dC5lcG9jaCk7XG59KVxuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgaWQ9XCJvcGVuX3BvcnRzXCI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgcmVmPVwidGFibGVfb3Blbl9wb3J0c1wiIDp0YWJsZV9pZD1cInRhYmxlX2lkXCIgOmNzcmY9XCJjb250ZXh0LmNzcmZcIlxuICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgOmZfc29ydF9yb3dzPVwiY29sdW1uc19zb3J0aW5nXCIgOmZfbWFwX2NvbmZpZz1cIm1hcF9jb25maWdcIiBAY3VzdG9tX2V2ZW50PVwib25fdGFibGVfY3VzdG9tX2V2ZW50XCI+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuXG4gICAgICAgIFxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5cbi8qIEltcG9ydHMgKi8gXG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIENvbnN0cyAqLyBcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cblxuXG5jb25zdCBhY3RpdmVfbW9uaXRvcmluZ191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Z1bG5lcmFiaWxpdHlfc2Nhbi5sdWFgO1xuIFxuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignb3Blbl9wb3J0cycpO1xuY29uc3QgbWFwX2NvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4gY29uZmlnO1xufTtcblxuY29uc3QgdGFibGVfb3Blbl9wb3J0cyA9IHJlZigpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmXG59O1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxuICBpc19lbnRlcnByaXNlX2w6IHByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV9sXG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgYWxsIGJ1dHRvbnMgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2N1c3RvbV9ldmVudChldmVudCkge1xuICBcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIFwiY2xpY2tfYnV0dG9uX3Nob3dfaG9zdHNcIjogY2xpY2tfYnV0dG9uX3Nob3dfaG9zdHNcbiAgfTtcbiAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cblxuZnVuY3Rpb24gY29tcGFyZV9ieV9wb3J0KHIwLHIxKSB7XG5cbiAgbGV0IGNvbCA9IHtcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgXCJ0aXRsZV9pMThuXCI6IFwicG9ydFwiLFxuICAgICAgICAgIFwiZGF0YV9maWVsZFwiOiBcInBvcnRcIixcbiAgICAgICAgICBcInNvcnRhYmxlXCI6IHRydWUsXG4gICAgICAgICAgXCJjbGFzc1wiOiBbXG4gICAgICAgICAgICAgIFwidGV4dC1ub3dyYXBcIixcbiAgICAgICAgICAgICAgXCJ0ZXh0LWVuZFwiXG4gICAgICAgICAgXVxuICAgICAgfVxuICAgIH07XG4gIGxldCByMF9jb2wgPSByMFtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgbGV0IHIxX2NvbCA9IHIxW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgIFxuICByMF9jb2wgPSBmb3JtYXRfbnVtX3BvcnRzX2Zvcl9zb3J0KHIwX2NvbCk7XG4gIHIxX2NvbCA9IGZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQocjFfY29sKTtcbiAgcmV0dXJuIHIwX2NvbCAtIHIxX2NvbDtcbn1cblxuZnVuY3Rpb24gY29sdW1uc19zb3J0aW5nKGNvbCwgcjAsIHIxKSB7XG5cbiAgaWYgKGNvbCAhPSBudWxsKSB7XG4gICAgbGV0IHIwX2NvbCA9IHIwW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgIGxldCByMV9jb2wgPSByMVtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICBpZihjb2wuaWQgPT0gXCJwb3J0XCIpIHtcblxuICAgICAgcjBfY29sID0gZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydChyMF9jb2wpO1xuICAgICAgcjFfY29sID0gZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydChyMV9jb2wpO1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbCAtIHIxX2NvbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wgLSByMF9jb2w7XG4gICAgfSBlbHNlIGlmKGNvbC5pZCA9PSBcImNvdW50X2hvc3RcIikge1xuICAgICAgcjBfY29sID0gZm9ybWF0X2N2ZV9udW0ocjBfY29sKTtcbiAgICAgIHIxX2NvbCA9IGZvcm1hdF9jdmVfbnVtKHIxX2NvbCk7XG5cbiAgICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlX2J5X3BvcnQocjAscjEpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbCAtIHIxX2NvbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wgLSByMF9jb2w7XG4gICAgfVxuICAgIGVsc2UgaWYoY29sLmlkID09IFwiY3Zlc1wiKSB7XG4gICAgICByMF9jb2wgPSBmb3JtYXRfY3ZlX251bShyMF9jb2wpO1xuICAgICAgcjFfY29sID0gZm9ybWF0X2N2ZV9udW0ocjFfY29sKTtcblxuICAgICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVfYnlfcG9ydChyMCxyMSk7XG4gICAgICB9XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sIC0gcjFfY29sO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbCAtIHIwX2NvbDtcbiAgICB9XG4gICAgZWxzZSBpZihjb2wuaWQgPT0gXCJob3N0c1wiKSB7XG4gICAgICAvKiBJdCdzIGFuIGFycmF5ICovXG5cbiAgICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlX2J5X3BvcnQocjAscjEpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAocjBfY29sICE9IG51bGwpIHtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcjBfY29sID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHIxX2NvbCAhPSBudWxsKSB7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIxX2NvbCA9IFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICByZXR1cm4gY29tcGFyZV9ieV9wb3J0KHIwLHIxKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfVxuICAgXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBhcmVfYnlfcG9ydChyMCxyMSk7XG4gIH1cbiAgXG59XG5cblxuXG5cbmZ1bmN0aW9uIGZvcm1hdF9jdmVfbnVtKG51bSkge1xuICBsZXQgdmFsdWUgPSAwO1xuICBpZiAobnVtID09PSBcIlwiIHx8IG51bSA9PT0gbnVsbCB8fCBudW0gPT09IE5hTiB8fCBudW0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gMDtcbiAgfSBlbHNlIHtcbiAgICBudW0gPSBudW0uc3BsaXQoJywnKS5qb2luKFwiXCIpO1xuICAgIHZhbHVlID0gcGFyc2VJbnQobnVtKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X251bV9mb3Jfc29ydChudW0pIHtcbiAgaWYgKG51bSA9PT0gXCJcIiB8fCBudW0gPT09IG51bGwgfHwgbnVtID09PSBOYU4gfHwgbnVtID09PSB1bmRlZmluZWQpIHtcbiAgICBudW0gPSAwO1xuICB9IGVsc2Uge1xuICAgIG51bSA9IG51bS5zcGxpdCgnLCcpLmpvaW4oXCJcIilcbiAgICBudW0gPSBwYXJzZUludChudW0pO1xuICB9XG5cbiAgcmV0dXJuIG51bTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydChudW0pIHtcbiAgaWYgKG51bSA9PSBcIlwiIHx8IG51bSA9PSBudWxsIHx8IG51bSA9PSBOYU4gfHwgbnVtID09IHVuZGVmaW5lZCkgXG4gICAgbnVtID0gMDtcblxuICBudW0gPSBwYXJzZUludChudW0pOztcbiAgcmV0dXJuIG51bTtcbn1cblxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cblxuLyogRnVuY3Rpb24gdG8gbWFwIGNvbHVtbnMgZGF0YSAqL1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gKGNvbHVtbnMpID0+IHtcbiAgY29uc3QgdmlzaWJsZV9kaWN0ID0ge1xuICAgICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgICAgc2hvd19yZXN1bHQ6IHRydWVcbiAgICAgIH07XG4gIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICBcImhvc3RzXCI6IChob3N0cywgcm93KSA9PiB7XG4gICAgICBsZXQgbGFiZWwgPSBgYDtcbiAgICAgIGNvbnN0IGhvc3RzX3NwbGl0ZWQgPSBob3N0cy5zcGxpdChcIiwgXCIpO1xuICAgICAgY29uc3QgbGVuZ3RoID0gaG9zdHNfc3BsaXRlZC5sZW5ndGg7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICB3aGlsZSAoIGkgPCA1ICYmIGkgPCBsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgaG9zdF9zcGxpdHRlZCA9IGhvc3RzX3NwbGl0ZWRbaV0uc3BsaXQoXCJ8XCIpO1xuICAgICAgICBjb25zdCBob3N0ID0gaG9zdF9zcGxpdHRlZFswXTtcbiAgICAgICAgY29uc3Qgc2Nhbl90eXBlID0gaG9zdF9zcGxpdHRlZFsxXTtcbiAgICAgICAgY29uc3QgZGF0ZSA9IGhvc3Rfc3BsaXR0ZWRbMl0ucmVwbGFjZShcIiBcIixcIl9cIik7XG4gICAgICAgIGNvbnN0IGlzX2lwdjQgPSBob3N0X3NwbGl0dGVkWzNdID09PSAndHJ1ZSc7XG4gICAgICAgIGNvbnN0IGVwb2NoID0gaG9zdF9zcGxpdHRlZFs0XTtcblxuICAgICAgICBsZXQgaG9zdF9uYW1lID0gJyc7XG4gICAgICAgIGlmIChob3N0X3NwbGl0dGVkLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICBob3N0X25hbWUgPSBob3N0X3NwbGl0dGVkWzVdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgICBob3N0OiBob3N0LFxuICAgICAgICAgIHNjYW5fdHlwZTogc2Nhbl90eXBlLFxuICAgICAgICAgIHNjYW5fcmV0dXJuX3Jlc3VsdDogdHJ1ZSxcbiAgICAgICAgICBwYWdlOiBcInNob3dfcmVzdWx0XCIsXG4gICAgICAgICAgZXBvY2g6IGVwb2NoLFxuICAgICAgICAgIHNjYW5fZGF0ZTogZGF0ZVxuXG4gICAgICAgIH07XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgICAgICAgbGV0IHVybCA9IGAke2FjdGl2ZV9tb25pdG9yaW5nX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBob3N0X2xhYmVsID0gaG9zdF9uYW1lICE9ICcnPyAoaXNfaXB2NCA9PSBmYWxzZSA/IGAke2hvc3RfbmFtZX0gIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCI+JHtpMThuKCdpcHY2Jyl9PC9zcGFuPmAgOiBob3N0X25hbWUpIDogaG9zdDtcbiAgICAgICAgXG4gICAgICAgIGlmIChsYWJlbCA9PSBgYClcbiAgICAgICAgICBsYWJlbCArPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7aG9zdF9sYWJlbH08L2E+YDsgIFxuICAgICAgICBlbHNlXG4gICAgICAgICAgbGFiZWwgKz0gYCwgPGEgaHJlZj1cIiR7dXJsfVwiPiR7aG9zdF9sYWJlbH08L2E+YDsgIFxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGxlbmd0aCA+IDUpIHtcbiAgICAgICAgbGFiZWwgKz0gYC4uLmA7XG4gICAgICB9IFxuXG4gICAgICByZXR1cm4gbGFiZWw7XG5cbiAgICB9XG4gIH1cbiAgICBcblxuICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcbiAgfSk7XG4gIFxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5cblxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKiogUkVTVCBGdW5jdGlvbnMgKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gc2hvdyBhbGwgaG9zdHMgZHVyaW5nIGVkaXQgKi9cblxuYXN5bmMgZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3Nob3dfaG9zdHMoZXZlbnQpIHtcbiAgbGV0IHBvcnQgPSBldmVudC5yb3cucG9ydF9udW1iZXI7XG5cbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBwb3J0OiBwb3J0LFxuICB9O1xuXG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgbGV0IHVybCA9IGAke2FjdGl2ZV9tb25pdG9yaW5nX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuXG4vKiBGdW5jdGlvbiB0byBkb3dubG9hZCBsYXN0IHZ1bG5lcmFiaWxpdHkgc2NhbiByZXN1bHQgKi9cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kb3dubG9hZChldmVudCkge1xuICBsZXQgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGV2ZW50LnJvdy5ob3N0LFxuICAgIHNjYW5fdHlwZTogZXZlbnQucm93LnNjYW5fdHlwZVxuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGxldCB1cmwgPSBgJHtzY2FuX3Jlc3VsdF91cmx9PyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXRpbGl0eS5kb3dubG9hZF9VUkkodXJsKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIEZ1bmN0aW9uIHRvIHNob3cgbGFzdCB2dWxuZXJhYmlsaXR5IHNjYW4gcmVzdWx0ICovXG5hc3luYyBmdW5jdGlvbiBjbGlja19idXR0b25fc2hvd19yZXN1bHQoZXZlbnQpIHtcbiAgbGV0IGhvc3QgPSBldmVudC5yb3cuaG9zdDtcbiAgbGV0IGRhdGUgPSBldmVudC5yb3cubGFzdF9zY2FuLnRpbWU7XG5cbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBob3N0LFxuICAgIHNjYW5fdHlwZTogZXZlbnQucm93LnNjYW5fdHlwZSxcbiAgICBzY2FuX3JldHVybl9yZXN1bHQ6IHRydWUsXG4gICAgcGFnZTogXCJzaG93X3Jlc3VsdFwiLFxuICAgIHNjYW5fZGF0ZTogZGF0ZVxuXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgbGV0IHVybCA9IGAke2FjdGl2ZV9tb25pdG9yaW5nX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuPC9zY3JpcHQ+XG4gICIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5kYXRlXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJyZXBvcnRfZGF0ZVwiIDpkaXNhYmxlZD1cInRydWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0c19wYWdlLm5hbWVcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cInJlcG9ydF9uYW1lXCIgIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBAaW5wdXQ9XCJjaGVja190aXRsZVwiICByZXF1aXJlZCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC00XCI+XG4gICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIFxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiA6ZGlzYWJsZWQ9XCIhKGlzX3JlcG9ydF9uYW1lX2NvcnJlY3QpXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj5cbiAgICAgICAgICB7eyBfaTE4bihcImFwcGx5XCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG4vKiBJbXBvcnRzICovXG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJhZGRcIiwgXCJlZGl0XCJdKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuLyogQ29uc3RzICovXG5jb25zdCB0aXRsZSA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5lZGl0X3JlcG9ydFwiKSk7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgcmVwb3J0X2RhdGUgPSByZWYobnVsbCk7XG5jb25zdCByZXBvcnRfbmFtZSA9IHJlZihudWxsKTtcbmNvbnN0IHJvd190b19lZGl0ID0gcmVmKG51bGwpO1xuXG5jb25zdCBpc19yZXBvcnRfbmFtZV9jb3JyZWN0ID0gcmVmKGZhbHNlKTtcblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2Uubm90ZXMubm90ZV8xXCIpLFxuXTtcbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKlxuICogUmVzZXQgZmllbGRzIGluIG1vZGFsIGZvcm1cbiAqL1xuY29uc3QgcmVzZXRfbW9kYWxfZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgcmVwb3J0X2RhdGUudmFsdWUgPSBcIlwiO1xuICByZXBvcnRfbmFtZS52YWx1ZSA9IFwiXCI7XG4gIHJvd190b19lZGl0LnZhbHVlID0gbnVsbDtcbiAgXG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLypcbiAqIFNldCByb3cgdG8gZWRpdFxuICovXG5jb25zdCBzZXRfcm93X3RvX2VkaXQgPSAocm93KSA9PiB7XG5cbiAgcm93X3RvX2VkaXQudmFsdWUgPSByb3c7XG4gIC8qIFNldCBob3N0IHZhbHVlcyAqL1xuICByZXBvcnRfZGF0ZS52YWx1ZSA9IHJvdy5yZXBvcnRfZGF0ZTtcbiAgcmVwb3J0X25hbWUudmFsdWUgPSByb3cubmFtZTtcblxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuZXZlciB0aGUgbW9kYWwgaXMgb3BlbmVkICovXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICAvKiBGaXJzdCBvZiBhbGwgcmVzZXQgYWxsIHRoZSBkYXRhICovXG4gIHJlc2V0X21vZGFsX2Zvcm0oKTtcbiAgc2V0X3Jvd190b19lZGl0KHJvdylcblxuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIGVkaXQgYnV0dG9uIGlzIGNsaWNrZWQgKi9cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICBjb25zdCB0bXBfcmVwb3J0X2RhdGUgPSByb3dfdG9fZWRpdC52YWx1ZS5lcG9jaDtcbiAgY29uc3QgdG1wX25hbWUgPSByZXBvcnRfbmFtZS52YWx1ZS5yZXBsYWNlQWxsKFwiIFwiLCBcIl9cIik7XG5cbiAgZW1pdChcImVkaXRcIiwge1xuICAgICAgcmVwb3J0X3RpdGxlOiB0bXBfbmFtZSxcbiAgICAgIGVwb2NoX2VuZDogdG1wX3JlcG9ydF9kYXRlXG4gICAgfSk7XG4gIFxuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIG1vZGFsIGlzIGNsb3NlZCAqL1xuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBjaGVja190aXRsZSA9ICgpID0+IHtcbiAgbGV0IHJlcG9ydF9uYW1lX3NwbGl0dGVkX2J5X3NwYWNlcyA9IHJlcG9ydF9uYW1lLnZhbHVlLnNwbGl0KFwiIFwiKTtcblxuICAvLyB3aXRoIC5ldmVyeSB0aGUgbG9vcCBzdG9wcyB3aGVuIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldCAobGlrZSB3aGlsZSlcbiAgY29uc3QgaXNSZXBvcnROYW1lVmFsaWQgPSByZXBvcnRfbmFtZV9zcGxpdHRlZF9ieV9zcGFjZXMuZXZlcnkoKHNpbmdsZV93b3JkKSA9PlxuICAgICAgcmVnZXhWYWxpZGF0aW9uLnZhbGlkYXRlU2luZ2xlV29yZChzaW5nbGVfd29yZCkpO1xuXG4gIGlzX3JlcG9ydF9uYW1lX2NvcnJlY3QudmFsdWUgPSBpc1JlcG9ydE5hbWVWYWxpZDtcbn07XG5cblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICA8ZGl2IGlkPVwidnNfcmVwb3J0c1wiPlxuICAgICAgICAgICAgPE1vZGFsRGVsZXRlUmVwb3J0Q29uZmlybVxuICAgICAgICAgICAgICByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L01vZGFsRGVsZXRlUmVwb3J0Q29uZmlybT5cbiAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWdcbiAgICAgICAgICAgICAgcmVmPVwidGFibGVfdnNfcmVwb3J0c1wiXG4gICAgICAgICAgICAgIDp0YWJsZV9pZD1cInRhYmxlX2lkXCJcbiAgICAgICAgICAgICAgOmNzcmY9XCJjb250ZXh0LmNzcmZcIlxuICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG4gICAgICAgICAgICAgIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgOmZfc29ydF9yb3dzPVwiY29sdW1uc19zb3J0aW5nXCJcbiAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiXG4gICAgICAgICAgICAgIEByb3dzX2xvYWRlZD1cIm9uX3RhYmxlX2xvYWRlZFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgXG4gICAgICAgIFxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8TW9kYWxFZGl0UmVwb3J0XG4gICAgcmVmPVwibW9kYWxfZWRpdFwiXG4gICAgOmNvbnRleHQ9XCJjb250ZXh0XCJcbiAgICBAZWRpdD1cImVkaXRcIlxuICA+XG4gIDwvTW9kYWxFZGl0UmVwb3J0PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuLyogSW1wb3J0cyAqL1xuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVdpdGhDb25maWcgfSBmcm9tIFwiLi90YWJsZS13aXRoLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdFJlcG9ydCB9IGZyb20gXCIuL21vZGFsLWVkaXQtdnMtcmVwb3J0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZVJlcG9ydENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtc2Nhbi1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBzb3J0aW5nRnVuY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zb3J0aW5nLXV0aWxzLmpzXCI7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogQ29uc3RzICovXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBub3RlID0gaTE4bihcbiAgXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMuZ2VuZXJpY19ub3Rlc18xXCJcbikucmVwbGFjZUFsbChcIiR7aHR0cF9wcmVmaXh9XCIsIGAke2h0dHBfcHJlZml4fWApO1xuY29uc3Qgbm90ZV9saXN0ID0gW25vdGVdO1xuXG5jb25zdCB0aXRsZV9kZWxldGUgPSBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRfcGFnZS5kZWxldGVfdGl0bGVcIik7XG5jb25zdCBib2R5X2RlbGV0ZSA9IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydF9wYWdlLmRlbGV0ZV9kZXNjcmlwdGlvblwiKTtcblxuXG5jb25zdCBvcGVuX3JlcG9ydF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2VudGVycHJpc2UvdnVsbmVyYWJpbGl0eV9zY2FuX3JlcG9ydC5sdWFgO1xuY29uc3QgcmVtb3ZlX3JlcG9ydF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS92cy9yZXBvcnQubHVhYDtcbmNvbnN0IGVkaXRfcmVwb3J0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZWRpdC92cy9yZXBvcnQubHVhYDtcblxuY29uc3QgdGFibGVfaWQgPSByZWYoXCJ2c19yZXBvcnRzXCIpO1xuY29uc3QgdGFibGVfdnNfcmVwb3J0cyA9IHJlZigpO1xuY29uc3QgbW9kYWxfZWRpdCA9IHJlZigpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYoKTtcbmNvbnN0IHRvdGFsX3Jvd3MgPSByZWYoMCk7XG5jb25zdCByb3dfdG9fZGVsZXRlID0gcmVmKHt9KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbn07XG5jb25zdCBjb250ZXh0ID0gcmVmKHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG59KTtcblxubGV0IHNjYW5fdHlwZV9saXN0ID0gW107XG5sZXQgZ2V0X3NjYW5fdHlwZV9saXN0X3YgPSBudWxsO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byByZWZyZXNoIHRhYmxlICovXG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlKCkge1xuICB0YWJsZV92c19yZXBvcnRzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBhbGwgYnV0dG9ucyAqL1xuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICBjbGlja19idXR0b25fZWRpdDogY2xpY2tfYnV0dG9uX2VkaXQsXG4gICAgY2xpY2tfYnV0dG9uX2RlbGV0ZTogY2xpY2tfYnV0dG9uX2RlbGV0ZSxcbiAgfTtcbiAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gc2ltcGx5IHJldHVybiB0aGUgZGF0YSBvZiB0aGUgZXhhY3QgY29sdW1uIGFuZCByb3cgcmVxdWVzdGVkICovXG5mdW5jdGlvbiBjb2x1bW5fZGF0YShjb2wsIHJvdykge1xuICBsZXQgZGF0YSA9IHJvd1tjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcblxuICBpZiAoY29sLmRhdGEuZGF0YV9maWVsZCA9PSAncmVwb3J0X2RhdGUnKSB7XG4gICAgZGF0YSA9IHJvd1snZXBvY2gnXVxuICB9XG5cbiAgaWYgKGNvbC5kYXRhLmRhdGFfZmllbGQgPT0gJ25hbWUnKSB7XG4gICAgZGF0YSA9IGZvcm1hdF9yZXBvcnRfbmFtZShyb3dbJ25hbWUnXSwgcm93WydlcG9jaCddKVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIERlZmF1bHQgc29ydGluZywgYnkgZGF0ZSBpbiBERVNDIG9yZGVyICovXG5mdW5jdGlvbiBjb21wYXJlX2J5X3JlcG9ydF9kYXRlKHIwLCByMSkge1xuICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIoXG4gICAgcjBbXCJlcG9jaFwiXSxcbiAgICByMVtcImVwb2NoXCJdLFxuICAgIDAgLyogYnkgZGVmYXVsdCBhc2MgKi9cbiAgKTtcbn1cblxuLyogU3BlY2lmaWMgZnVuY3Rpb24gZm9yIHJlcG9ydCBuYW1lIGJlY2F1c2UgY291bGQgYmUgXCJSZXBvcnQgb2YgZGF0ZVwiIChkZWZhdWx0KSBvciBhIGN1c3RvbSBuYW1lICovXG5mdW5jdGlvbiBmb3JtYXRfcmVwb3J0X25hbWUocmVwb3J0X25hbWUsIGVwb2NoKSB7XG4gIFxuICBsZXQgZm9ybWF0dGVkX3JlcG9ydF9uYW1lID0gcmVwb3J0X25hbWU7XG4gIFxuICBpZiAocmVwb3J0X25hbWUuc3RhcnRzV2l0aChcIlJlcG9ydCBvZlwiKSkge1xuICAgIGZvcm1hdHRlZF9yZXBvcnRfbmFtZSA9ICdyZXBvcnRfJytlcG9jaDsgICBcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRfcmVwb3J0X25hbWU7XG5cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdXNlZCB0byBzb3J0IHRoZSBjb2x1bW5zIG9mIHRoZSB0YWJsZSAqL1xuZnVuY3Rpb24gY29sdW1uc19zb3J0aW5nKGNvbCwgcjAsIHIxKSB7XG4gIGlmIChjb2wgIT0gbnVsbCkge1xuICAgIGxldCByMF9jb2wgPSBjb2x1bW5fZGF0YShjb2wsIHIwKTtcbiAgICBsZXQgcjFfY29sID0gY29sdW1uX2RhdGEoY29sLCByMSk7XG5cbiAgICAvKiBJbiBjYXNlIHRoZSB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBzb3J0IGJ5IElQICovXG4gICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgIHJldHVybiBjb21wYXJlX2J5X3JlcG9ydF9kYXRlKHIwLCByMSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChjb2wuaWQgPT0gXCJyZXBvcnRfZGF0ZVwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInRjcF9wb3J0c1wiIHx8IGNvbC5pZCA9PSBcInVkcF9wb3J0c1wiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImN2ZXNcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJuYW1lXCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcIm51bV9ob3N0c1wiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXIocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21wYXJlX2J5X3JlcG9ydF9kYXRlKHIwLCByMSk7XG59XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGRlbGV0ZSBidXR0b24gKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kZWxldGUoZXZlbnQpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IGV2ZW50LnJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcImRlbGV0ZV9zaW5nbGVfcmVwb3J0XCIpO1xufVxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGVkaXQgYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZWRpdChldmVudCkge1xuICBtb2RhbF9lZGl0LnZhbHVlLnNob3coZXZlbnQucm93KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZWRpdCByZXBvcnQgKi9cbmFzeW5jIGZ1bmN0aW9uIGVkaXQocGFyYW1zKSB7XG4gIGF3YWl0IGVkaXRfcmVwb3J0X3Jlc3QocGFyYW1zKTtcbn1cblxuY29uc3QgZWRpdF9yZXBvcnRfcmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGVkaXRfcmVwb3J0X3VybCwge1xuICAgIC4uLnBhcmFtcyxcbiAgfSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG5cbiAgcmVmcmVzaF90YWJsZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogR2V0IHRoZSBudW1iZXIgb2Ygcm93cyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2xvYWRlZCgpIHtcbiAgdG90YWxfcm93cy52YWx1ZSA9IHRhYmxlX3ZzX3JlcG9ydHMudmFsdWUuZ2V0X3Jvd3NfbnVtKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIG1hcCBjb2x1bW5zIGRhdGEgKi9cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG5cblxuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJyZXBvcnRfZGF0ZVwiOiAocmVwb3J0X2RhdGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwob3Blbl9yZXBvcnRfdXJsLCB7XG4gICAgICAgIHByaW50YWJsZTogZmFsc2UsXG4gICAgICAgIGVwb2NoX2VuZDogcm93LmVwb2NoLFxuICAgICAgICBlcG9jaF9iZWdpbjogcm93LmVwb2NoXG4gICAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIj4ke3JlcG9ydF9kYXRlfTwvYT5gO1xuICAgIH0sXG4gIH07XG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICBcbiAgfSk7XG4gIFxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqIFJFU1QgRnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIHJlcG9ydCAqL1xuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9yZXBvcnRfdXJsLCB7XG4gICAgZXBvY2g6IHJvdy5lcG9jaFxuICB9KTtcbiAgZGVidWdnZXI7XG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG48L3NjcmlwdD5cbiAgIiwiPCEtLSAoQykgMjAyNCAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBoLTEwMCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgPERhdGVUaW1lUmFuZ2VQaWNrZXIgc3R5bGU9XCJtYXJnaW4tdG9wOjAuNXJlbTtcIiBjbGFzcz1cIm1zLTFcIiA6aWQ9XCJpZF9kYXRlX3RpbWVfcGlja2VyXCIgOmVuYWJsZV9yZWZyZXNoPVwiZmFsc2VcIlxuICAgICAgICAgICAgcmVmPVwiZGF0ZV90aW1lX3BpY2tlclwiIEBlcG9jaF9jaGFuZ2U9XCJlcG9jaF9jaGFuZ2VcIiA6Y3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdD1cInRpbWVfcHJlc2V0X2xpc3RcIj5cbiAgICAgICAgPC9EYXRlVGltZVJhbmdlUGlja2VyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibS0yIG10LTBcIiBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDtcIj5cbiAgICAgICAgICAgIDxUaW1lc2VyaWVzQ2hhcnQgcmVmPVwiY2hhcnRcIiA6aWQ9XCJjaGFydF9pZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiIDpiYXNlX3VybF9yZXF1ZXN0PVwiYmFzZV91cmxcIlxuICAgICAgICAgICAgICAgIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfY2hhcnRfb3B0aW9uc1wiIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIlxuICAgICAgICAgICAgICAgIDpkaXNhYmxlX3BvaW50ZXJfZXZlbnRzPVwiZmFsc2VcIj5cbiAgICAgICAgICAgIDwvVGltZXNlcmllc0NoYXJ0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm0tMiBtYi0zXCI+XG4gICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX3NubXBfdXNhZ2VcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDpjc3JmPVwiY3NyZlwiIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiIDpmX3NvcnRfcm93cz1cImNvbHVtbnNfc29ydGluZ1wiXG4gICAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVdpdGhDb25maWcgfSBmcm9tIFwiLi90YWJsZS13aXRoLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0ZVRpbWVSYW5nZVBpY2tlciB9IGZyb20gXCIuL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGltZXNlcmllc0NoYXJ0IH0gZnJvbSBcIi4vdGltZXNlcmllcy1jaGFydC52dWVcIjtcbmltcG9ydCB0aW1lc2VyaWVzVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy90aW1lc2VyaWVzLXV0aWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHNcIjtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5jb25zdCB0aW1lX3ByZXNldF9saXN0ID0gW1xuICAgIHsgdmFsdWU6IFwiMTBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiMzBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiNl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy42X2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCIxMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbl07XG5cbmNvbnN0IHNlcmllX25hbWUgPSBcIkNvbmdlc3Rpb25cIjtcbmNvbnN0IHRhYmxlX3NubXBfdXNhZ2UgPSByZWYobnVsbCk7XG5jb25zdCBkYXRlX3RpbWVfcGlja2VyID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGVfaWQgPSByZWYoJ3NubXBfdXNhZ2UnKTtcbmNvbnN0IGNoYXJ0X2lkID0gcmVmKCdzbm1wX3VzYWdlX2NoYXJ0Jyk7XG5jb25zdCBjc3JmID0gcHJvcHMuY29udGV4dC5jc3JmO1xuY29uc3Qgc3lzdGVtX2ludGVyZmFjZV9pZCA9IC0xO1xuY29uc3QgY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCBjaGFydF90eXBlID0gcmVmKG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX0xJTkUpO1xuY29uc3QgYmFzZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL21ldHJpYy91c2FnZV9jaGFydC5sdWFgXG5sZXQgaWRfZGF0ZV90aW1lX3BpY2tlciA9IFwiZGF0ZV90aW1lX3BpY2tlclwiO1xuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gICAgaTE4bignc25tcC5jaGFydF9jb25nZXN0aW9uX3JhdGVfbm90ZScpLFxuICAgIGkxOG4oJ3NubXAuY2hhcnRfY29uZ2VzdGlvbl9saW5rJyksXG4gICAgaTE4bignc25tcC5jaGFydF9jb25nZXN0aW9uX2NvbmZpZ3VyYXRpb24nKSxcbiAgICBpMThuKCdzbm1wLmNoYXJ0X2Nvbmdlc3Rpb25fcmF0ZV9jb2xvcicpLFxuXTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gKGNvbHVtbnMpID0+IHtcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJwZXJjZW50YWdlXCIpO1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJpcFwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2RldmljZV9kZXRhaWxzLmx1YT9pcD0ke3ZhbHVlfWBcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj0ke3VybH0+JHt2YWx1ZX08L2E+YFxuICAgICAgICB9LFxuICAgICAgICBcImludGVyZmFjZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7cm93LmlwfSZzbm1wX3BvcnRfaWR4PSR7cm93LmlmaWR9YFxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPSR7dXJsfT4ke3ZhbHVlfTwvYT5gXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiAodHlwZSwgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSAndXBsaW5rJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtpMThuKCd1cGxpbmtfdXNhZ2UnKX0gPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaXJjbGUtYXJyb3ctdXBcIiBzdHlsZT1cImNvbG9yOiAjQzZEOUZEXCI+PC9pPmBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2kxOG4oJ2Rvd25saW5rX3VzYWdlJyl9IDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlLWFycm93LWRvd25cIiBzdHlsZT1cImNvbG9yOiAjOTBFRTkwXCI+PC9pPmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzcGVlZFwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcInNwZWVkXCIpKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5cIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBcIm1heFwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXZlcmFnZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFwibGFzdF92YWx1ZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29uZ2VzdGlvbl9yYXRlXCI6ICh2YWx1ZSwgcm93KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuICAgICAgICBpZiAoYy5pZCA9PSBcImFjdGlvbnNcIikge1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZV9kaWN0ID0ge1xuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuc2hvd19oaXN0b3JpY2FsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jbGFzcy5wdXNoKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY29sdW1uc19zb3J0aW5nKGNvbCwgcjAsIHIxKSB7XG4gICAgaWYgKGNvbCAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHIwX2NvbCA9IHIwW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgICAgICBjb25zdCByMV9jb2wgPSByMVtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcblxuICAgICAgICAvKiBJbiBjYXNlIHRoZSB2YWx1ZXMgYXJlIHRoZSBzYW1lLCBzb3J0IGJ5IElQICovXG4gICAgICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwLmRldmljZSwgcjEuZGV2aWNlLCBjb2wgPyBjb2wuc29ydCA6IG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2wuaWQgPT0gXCJkZXZpY2VfbmFtZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiaXBcIikge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5SVAocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJpbnRlcmZhY2VcIikge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInR5cGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInNwZWVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcIm1pblwiKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJtYXhcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiYXZlcmFnZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJjb25nZXN0aW9uX3JhdGVcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibGFzdF92YWx1ZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjAuZGV2aWNlLCByMS5kZXZpY2UsIGNvbCA/IGNvbC5zb3J0IDogbnVsbCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmFzeW5jIGZ1bmN0aW9uIGVwb2NoX2NoYW5nZSgpIHtcbiAgICBpZiAodGFibGVfc25tcF91c2FnZS52YWx1ZSkge1xuICAgICAgICB0YWJsZV9zbm1wX3VzYWdlLnZhbHVlLnJlZnJlc2hfdGFibGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChjaGFydC52YWx1ZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgZ2V0X2NoYXJ0X29wdGlvbnMoKTtcbiAgICAgICAgY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0X3NlcmllcyhvcHRpb25zPy5kYXRhKTtcbiAgICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMoZXZlbnQpIHtcbiAgICBjb25zdCByb3cgPSBldmVudC5yb3c7XG4gICAgY29uc3QgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgIGNvbnN0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgIHdpbmRvdy5vcGVuKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5pcH0mc25tcF9wb3J0X2lkeD0ke3Jvdy5pZmlkfSZwYWdlPWhpc3RvcmljYWwmaWZpZD0tMSZlcG9jaF9lbmQ9JHtlcG9jaF9lbmR9JmVwb2NoX2JlZ2luPSR7ZXBvY2hfYmVnaW59JnRpbWVzZXJpZXNfZ3JvdXBzX21vZGU9MV9jaGFydF94X21ldHJpYyZ0aW1lc2VyaWVzX2dyb3Vwcz1zbm1wX2ludGVyZmFjZTstMSUyQiR7cm93LmlwfSUyQiR7cm93LmlmaWR9O3NubXBfaWY6dXNhZ2U7dXBsaW5rPXRydWU6ZmFsc2U6ZmFsc2U6ZmFsc2V8ZG93bmxpbms9dHJ1ZTpmYWxzZTpmYWxzZTpmYWxzZWApO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25fY29uZmlndXJhdGlvbihldmVudCkge1xuICAgIGNvbnN0IHJvdyA9IGV2ZW50LnJvdztcbiAgICB3aW5kb3cub3BlbihgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3NubXBfaW50ZXJmYWNlX2RldGFpbHMubHVhP2hvc3Q9JHtyb3cuaXB9JnNubXBfcG9ydF9pZHg9JHtyb3cuaWZpZH0mcGFnZT1jb25maWdgKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgICAgICBcImNsaWNrX2J1dHRvbl90aW1lc2VyaWVzXCI6IGNsaWNrX2J1dHRvbl90aW1lc2VyaWVzLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9jb25maWd1cmF0aW9uXCI6IGNsaWNrX2J1dHRvbl9jb25maWd1cmF0aW9uXG4gICAgfTtcbiAgICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBydW4gdGhlIFJFU1QgQVBJIHdpdGggdGhlIGRhdGEgKi9cbmFzeW5jIGZ1bmN0aW9uIGdldF9jaGFydF9vcHRpb25zKCkge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGNvbnN0IHBvc3RfcGFyYW1zID0ge1xuICAgICAgICBjc3JmOiBjc3JmLFxuICAgICAgICBpZmlkOiBzeXN0ZW1faW50ZXJmYWNlX2lkLFxuICAgICAgICBlcG9jaF9iZWdpbjogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKSxcbiAgICAgICAgZXBvY2hfZW5kOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2VuZFwiKSxcbiAgICAgICAgaG9zdDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpLFxuICAgIH1cblxuICAgIHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KGJhc2VfdXJsLCBwb3N0X3BhcmFtcyk7XG4gICAgLyogRm9ybWF0IHRoZSByZXN1bHQgaW4gdGhlIGZvcm1hdCBuZWVkZWQgYnkgRHlncmFwaCAqL1xuICAgIGNvbnN0IGNvbmZpZyA9IHRpbWVzZXJpZXNVdGlscy5mb3JtYXRTaW1wbGVTZXJpZShyZXN1bHQsIHNlcmllX25hbWUsIFwiYmFyXCIsIFtcInBlcmNlbnRhZ2VcIl0sIFswLCAxMDBdKTtcblxuICAgIC8qIEN1c3RvbSBvcHRpb25zIGZvciB0aGlzIGNoYXJ0ICovXG4gICAgY29uZmlnLnRpdGxlID0gJzxkaXYgc3R5bGU9XCJmb250LXNpemU6MThweDtcIj4nICsgaTE4bignc25tcC50b3BfY29uZ2VzdGVkX2RldmljZXMnKSArICc8L2Rpdj4nO1xuICAgIGNvbmZpZy50aXRsZUhlaWdodCA9IDQ4O1xuICAgIGNvbmZpZy5heGVzLnkuYXhpc0xhYmVsV2lkdGggPSA0MDtcbiAgICBjb25maWcueEF4aXNIZWlnaHQgPSA2O1xuICAgIGNvbmZpZy5heGVzLnguYXhpc0xhYmVsV2lkdGggPSAxMjA7XG4gICAgY29uZmlnLmF4ZXMueC5waXhlbHNQZXJMYWJlbCA9IDIwO1xuICAgIGNvbmZpZy54UmFuZ2VQYWQgPSA1MDtcblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3NlcmllX25hbWV9X3hfYXhpc19sYWJlbGAsIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5sYWJlbHMpKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtzZXJpZV9uYW1lfV9tZXRhZGF0YWAsIEpTT04uc3RyaW5naWZ5KHJlc3VsdC5tZXRhZGF0YSkpO1xuICAgIGNvbmZpZy5heGVzLnguYXhpc0xhYmVsRm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbHVlLCBncmFudWxhcml0eSwgb3B0cywgZHlncmFwaCkge1xuICAgICAgICByZXR1cm4gJydcbiAgICB9O1xuXG4gICAgY29uZmlnLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uICh2YWx1ZSwgZ3JhbnVsYXJpdHksIG9wdHMsIGR5Z3JhcGgpIHtcbiAgICAgICAgLyogU29tZXRpbWVzIGhhcHBlbnMgdGhhdCBYIHZhbHVlcyBhcmUgYXBwcm94aW1hdGVkIGluIER5R3JhcGgsIGUuZy4gNSBiZWNvbWVzIDUuMDAwMDAxXG4gICAgICAgICAqIEluIHRoaXMgY2FzZSBubyBsYWJlbCBpcyBmb3VuZCBldmVuIGlmIGl0J3MgcHJlc2VudCwgc3Ugcm91bmQgdGhlIHZhbHVlIGJlZm9yZSBjaGVja2luZyB0aGUgbGFiZWxcbiAgICAgICAgICovXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCByb3VuZGVkX3ZhbHVlID0gTnVtYmVyKHZhbHVlLnRvRml4ZWQoNCkpXG4gICAgICAgICAgICBjb25zdCBsYWJlbHNfanNvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke3NlcmllX25hbWV9X3hfYXhpc19sYWJlbGApXG4gICAgICAgICAgICBjb25zdCBsYWJlbHNfYXJyYXkgPSBKU09OLnBhcnNlKGxhYmVsc19qc29uKTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbGFiZWxzX2FycmF5W3JvdW5kZWRfdmFsdWUgLSAxXTtcbiAgICAgICAgICAgIGlmIChsYWJlbClcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxzcGFuIHN0eWxlPVwid2hpdGUtc3BhY2U6IHByZS13cmFwXCI+JHtsYWJlbH08L3NwYW4+YFxuXG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25maWcuY2xpY2tDYWxsYmFjayA9IGZ1bmN0aW9uIChlLCB4LCBwb2ludHMpIHtcbiAgICAgICAgLy8gdGFibGVfc25tcF91c2FnZS52YWx1ZS5zZWFyY2hfdmFsdWUoeCk7XG4gICAgICAgIGNvbnN0IHJvdW5kZWRfdmFsdWUgPSBOdW1iZXIoeC50b0ZpeGVkKDQpKVxuICAgICAgICBjb25zdCBtZXRhZGF0YV9qc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7c2VyaWVfbmFtZX1fbWV0YWRhdGFgKVxuICAgICAgICBjb25zdCBtZXRhZGF0YV9hcnJheSA9IEpTT04ucGFyc2UobWV0YWRhdGFfanNvbik7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gbWV0YWRhdGFfYXJyYXlbcm91bmRlZF92YWx1ZSAtIDFdO1xuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGNsaWNrX2J1dHRvbl90aW1lc2VyaWVzKHsgcm93OiBtZXRhZGF0YSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBudG9wbmdfc3luYy5vbl9yZWFkeShpZF9kYXRlX3RpbWVfcGlja2VyKSxcbiAgICBdKTtcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5keWdyYXBoLWF4aXMtbGFiZWwuZHlncmFwaC1heGlzLWxhYmVsLXgge1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtOTBkZWcpIHRyYW5zbGF0ZSgtMjBweCwgMCk7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyB0aXRsZSB9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj48Yj57e19pMThuKFwibmFtZVwiKX19OjwvYj48L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuXCIgcGxhY2Vob2xkZXI9XCJcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImZpbGVfbmFtZVwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInN0b3JlX2ZpbGVcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcInNhdmVcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3QgZmlsZV9uYW1lID0gcmVmKFwiXCIpO1xuY29uc3Qgb3JkZXJfYnkgPSByZWYoXCJkYXRlXCIpOyAvLyBuYW1lIC8gZGF0ZVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZTogRnVuY3Rpb24sXG4gICAgc3RvcmVfZmlsZTogRnVuY3Rpb24sXG4gICAgYWxsb3dfc3BhY2VzOiBCb29sZWFuXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZmlsZV9zdG9yZWQnXSk7XG5cbmxldCBwYXR0ZXJuID0gTnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZDtcblxuY29uc3QgZGlzYWJsZV9hZGQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJnID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICByZXR1cm4gIXJnLnRlc3QoZmlsZV9uYW1lLnZhbHVlKTtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IHByb3BzLmdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lKCk7XG59XG5cbmNvbnN0IHN0b3JlX2ZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgcHJvcHMuc3RvcmVfZmlsZShmaWxlX25hbWUudmFsdWUpXG4gICAgZW1pdCgnZmlsZV9zdG9yZWQnLCBmaWxlX25hbWUudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuYWxsb3dfc3BhY2VzKSB7XG4gICAgICAgIHBhdHRlcm4gPSBOdG9wVXRpbHMuUkVHRVhFUy5tdWx0aXdvcmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybiA9IE50b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmQ7XG4gICAgfVxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3sgdGl0bGUgfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgIDxiPnt7IF9pMThuKFwib3JkZXJfYnlcIikgfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIEBjaGFuZ2U9XCJzb3J0X2ZpbGVzX2J5KClcIiB2LW1vZGVsPVwib3JkZXJfYnlcIj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibmFtZVwiPnt7X2kxOG4oXCJuYW1lXCIpfX08L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGF0ZVwiPnt7X2kxOG4oXCJkYXRlXCIpfX08L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICA8Yj57eyBmaWxlX3RpdGxlIH19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsZV9zZWxlY3RlZFwiIDpvcHRpb25zPVwiZmlsZXNcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+ICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIEBjbGljaz1cImRlbGV0ZV9maWxlKHRydWUpXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdDttYXJnaW4tbGVmdDogMHB4O1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgc3RhcnQtMCBwb3NpdGlvbi1hYnNvbHV0ZSBtcy0zXCI+e3tfaTE4bihcImRlbGV0ZV9hbGxfZW50cmllc1wiKX19PC9idXR0b24+ICAgIFxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9maWxlXCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+e3tfaTE4bihcImRlbGV0ZVwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X2ZpbGVcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX3NlbGVjdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcIm9wZW5cIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3QgZmlsZV9zZWxlY3RlZCA9IHJlZih7fSk7XG5jb25zdCBmaWxlX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlcyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGZpbGVfdGl0bGU6IFN0cmluZyxcbiAgICBsaXN0X2ZpbGVzOiBGdW5jdGlvbixcbiAgICBvcGVuX2ZpbGU6IEZ1bmN0aW9uLFxuICAgIGRlbGV0ZV9maWxlOiBGdW5jdGlvbixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydmaWxlX2RlbGV0ZWQnXSk7XG5cbmxldCBwYXR0ZXJuX3NpbmdsZXdvcmQgPSBOdG9wVXRpbHMuUkVHRVhFUy5zaW5nbGV3b3JkO1xuXG5jb25zdCBkaXNhYmxlX3NlbGVjdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gZmlsZV9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGRpc3BsYXlfbmFtZShmaWxlKSB7XG4gICAgbGV0IHV0Y19tcyA9IGZpbGUuZXBvY2ggKiAxMDAwO1xuICAgIGxldCBkYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHV0Y19tcywgXCJERC9NTS9ZWVlZXCIpO1xuICAgIHJldHVybiBgJHtmaWxlLm5hbWV9ICgke2RhdGV9KWBcbn1cblxuZnVuY3Rpb24gc29ydF9maWxlc19ieSgpIHtcbiAgICBmaWxlcy52YWx1ZSA9IGZpbGVzLnZhbHVlLnNvcnQoKGEsIGIpID0+IHtcblx0aWYgKG9yZGVyX2J5LnZhbHVlID09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICAvKiBOYW1lIGFzYyAqL1xuXHQgICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG5cdH0gZWxzZSB7XG4gICAgICAgICAgICAvKiBEYXRlIGRlc2MgKGxhc3QgZmlyc3QpICovXG5cdCAgICByZXR1cm4gYi5lcG9jaCAtIGEuZXBvY2g7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZmlsZXMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRmaWxlX3NlbGVjdGVkLnZhbHVlID0gZmlsZXMudmFsdWVbMF07XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IFwiXCI7XG4gICAgZmlsZXMudmFsdWUgPSBhd2FpdCBwcm9wcy5saXN0X2ZpbGVzKCk7XG4gICAgZmlsZXMudmFsdWUuZm9yRWFjaCgoZikgPT4gZi5sYWJlbCA9IGRpc3BsYXlfbmFtZShmKSk7XG4gICAgc29ydF9maWxlc19ieSgpO1xuICAgIGlmIChmaWxlcy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdGZpbGVfc2VsZWN0ZWQudmFsdWUgPSBmaWxlcy52YWx1ZVswXTtcbiAgICB9XG59XG5cbmNvbnN0IHNlbGVjdF9maWxlID0gKCkgPT4ge1xuICAgIGNsb3NlKCk7XG4gICAgcHJvcHMub3Blbl9maWxlKGZpbGVfc2VsZWN0ZWQudmFsdWUubmFtZSk7XG59XG5cbmNvbnN0IGRlbGV0ZV9maWxlID0gYXN5bmMgKGRlbGV0ZV9hbGwpID0+IHtcbiAgICBsZXQgbmFtZSA9IGZpbGVfc2VsZWN0ZWQudmFsdWUubmFtZTtcbiAgICBpZiAoZGVsZXRlX2FsbCA9PSB0cnVlKSB7IG5hbWUgPSBcIipcIjsgfVxuICAgIGlmIChwcm9wcy5kZWxldGVfZmlsZShuYW1lKSkge1xuICAgICAgICBlbWl0KCdmaWxlX2RlbGV0ZWQnLCBuYW1lKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyB0aXRsZSB9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBmaWxlX3RpdGxlIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJvbl9waWNrX2ZpbGVcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJ1cGxvYWRcIil9fTwvYnV0dG9uPlxuICAgICAgICAgIDxzcGFuPiZuYnNwOzwvc3Bhbj5cbiAgICAgICAgICA8c21hbGwgdi1zaG93PVwiIWZpbGVfY29udGVudFwiPk5vIGZpbGUgc2VsZWN0ZWQ8L3NtYWxsPlxuICAgICAgICAgIDxzbWFsbCB2LXNob3c9XCJmaWxlX25hbWVcIj57eyBmaWxlX25hbWUgfX08L3NtYWxsPlxuICAgICAgICAgIDxpbnB1dCByZWY9XCJmaWxlX2lucHV0XCIgdHlwZT0nZmlsZScgYWNjZXB0PVwiYXBwbGljYXRpb24vSlNPTlwiIEBjaGFuZ2U9XCJvbl9maWxlX3BpY2tlZFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X2ZpbGVcIiA6ZGlzYWJsZWQ9XCIhZmlsZV9jb250ZW50XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwib3BlblwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBmaWxlX2NvbnRlbnQgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlX2lucHV0ID0gcmVmKG51bGwpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmaWxlX3RpdGxlOiBTdHJpbmcsXG4gICAgdXBsb2FkX2ZpbGU6IEZ1bmN0aW9uLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2ZpbGVfdXBsb2FkZWQnXSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgZmlsZV9uYW1lLnZhbHVlID0gXCJcIjtcbiAgICBmaWxlX2NvbnRlbnQudmFsdWUgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBvbl9waWNrX2ZpbGUgKCkge1xuICAgIGZpbGVfaW5wdXQudmFsdWUuY2xpY2soKVxufVxuXG5mdW5jdGlvbiBvbl9maWxlX3BpY2tlZCAoZXZlbnQpIHtcbiAgICBjb25zdCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlcztcblxuICAgIGZpbGVfbmFtZS52YWx1ZSA9IGZpbGVzWzBdLm5hbWU7XG5cbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGZpbGVfY29udGVudC52YWx1ZSA9IGZpbGVSZWFkZXIucmVzdWx0O1xuICAgIH0pXG4gICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGZpbGVzWzBdKTtcblxuICAgIGVtaXQoJ2ZpbGVfdXBsb2FkZWQnLCBmaWxlX25hbWUudmFsdWUpO1xufVxuXG5jb25zdCBzZWxlY3RfZmlsZSA9ICgpID0+IHtcbiAgICBjbG9zZSgpO1xuICAgIHByb3BzLnVwbG9hZF9maWxlKGZpbGVfY29udGVudC52YWx1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgbnRvcCAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuXHQ8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuXHR7eyB0aXRsZSB9fVxuXHQ8L3RlbXBsYXRlPlxuXG5cdDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCIgc3R5bGU9XCJvdmVyZmxvdy15OiBzY3JvbGw7IGhlaWdodDogNDV2aFwiPlxuXHRcdDx0ZW1wbGF0ZSB2LWZvcj1cImMgaW4gY29tcG9uZW50c1wiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkIHctMTAwIHdpemFyZC1jYXJkXCIgOmNsYXNzPVwieyAnd2l6YXJkLXNlbGVjdGVkJzogc2VsZWN0ZWRfY29tcG9uZW50ID09IGMgfVwiPlxuXHRcdFx0PGEgY2xhc3M9XCJ3aXphcmQtbGlua1wiIGhyZWY9XCIjXCIgQGNsaWNrPVwic2VsZWN0ZWRfY29tcG9uZW50ID0gYzsgb25Nb2RhbENoYW5nZSgpXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCB3aXphcmQtZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0PGg1PjxpIDpjbGFzcz1cImdldF9jb21wb25lbnRfdHlwZV9pY29uKGMuY29tcG9uZW50KVwiPjwvaT4ge3tfaTE4bihjLmkxOG5fbmFtZSl9fTwvaDU+XG5cdFx0XHRcdFx0XHQ8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPnt7X2kxOG4oYy5pMThuX2Rlc2NyKX19PC9zbWFsbD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2E+XG5cdFx0PC9kaXY+XG5cdFx0PC90ZW1wbGF0ZT5cblx0PC9kaXY+XG5cdDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcblx0PHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG5cdDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBzZWxlY3RlZF9jb21wb25lbnQgPSByZWYoe30pO1xuY29uc3QgY29tcG9uZW50cyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGxpc3RfY29tcG9uZW50czogRnVuY3Rpb24sXG4gICAgYWRkX2NvbXBvbmVudDogRnVuY3Rpb25cbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW10pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbXBvbmVudHMudmFsdWUgPSBhd2FpdCBwcm9wcy5saXN0X2NvbXBvbmVudHMoKTtcbiAgICBpZiAoY29tcG9uZW50cy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGVjdGVkX2NvbXBvbmVudC52YWx1ZSA9IGNvbXBvbmVudHMudmFsdWVbMF07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfY29tcG9uZW50X3R5cGVfaWNvbihjb21wb25lbnRfdHlwZSkge1xuICAgIHN3aXRjaCAoY29tcG9uZW50X3R5cGUpIHtcbiAgICAgIGNhc2UgJ3BpZSc6XG4gICAgICAgIHJldHVybiBcImZhLXNvbGlkIGZhLWNoYXJ0LXBpZVwiO1xuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICByZXR1cm4gXCJmYS1zb2xpZCBmYS10YWJsZVwiO1xuICAgICAgY2FzZSAndGltZXNlcmllcyc6XG4gICAgICAgIHJldHVybiBcImZhLXNvbGlkIGZhLWNoYXJ0LWxpbmVcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25Nb2RhbENoYW5nZShlKSB7XG4gICAgY2xvc2UoKTtcbiAgICBwcm9wcy5hZGRfY29tcG9uZW50KHNlbGVjdGVkX2NvbXBvbmVudC52YWx1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gVGl0bGUgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiZGFzaGJvYXJkLmNvbXBvbmVudF90aXRsZVwiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJjb21wb25lbnRfdGl0bGVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFdpZHRoIC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTQgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtM1wiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfd2lkdGhcIikgfX08L2I+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFuZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIGlkPVwic2xpZGVyXCIgdi1tb2RlbD1cIndpZHRoX3NlbGVjdGVkXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgbWluPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9XCIzXCIgc3RlcD1cIjFcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlcnRpY2tzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMuc21hbGxcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMubWVkaXVtXCIpIH19PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLmxhcmdlXCIpIH19PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gSGVpZ2h0IC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfaGVpZ2h0XCIpIH19PC9iPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05IG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgaWQ9XCJzbGlkZXJcIiB2LW1vZGVsPVwiaGVpZ2h0X3NlbGVjdGVkXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgbWluPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4PVwiNFwiIHN0ZXA9XCIxXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGVydGlja3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMuc21hbGxcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLm1lZGl1bVwiKSB9fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMubGFyZ2VcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLmF1dG9cIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPCEtLSBUaW1lIFdpbmRvdyAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cIiFoaWRkZW5PblJlcG9ydFwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfd2luZG93XCIpIH19PC9iPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS01XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfd2luZG93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidGltZV93aW5kb3dfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFRpbWUgT2Zmc2V0IC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC50aW1lX29mZnNldFwiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNVwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vZmZzZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX29mZnNldF9saXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwhLS0gQWR2YW5jZWQgU2V0dGluZ3MgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXMtMiBtYi0zIG10LTQgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTMgcGUtMFwiIGlkPVwiYWR2YW5jZWQtdmlld1wiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5hZHZhbmNlZF9zZXR0aW5nc1wiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBwcy0wXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG10LTJcIiBpZD1cImFkdmFuY2VkLXZpZXdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwic2hvd19hZHZhbmNlZF9zZXR0aW5nc1wiICBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBAaW5wdXQ9XCJ1cGRhdGVBZHZhbmNlZFNldHRpbmdzVmlld1wiIHJvbGU9XCJzd2l0Y2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFJFU1QgUGFyYW1zIC0tPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd19hZHZhbmNlZF9zZXR0aW5nc1wiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwIHYtaWY9XCJpc05vdEpzb25QYXJhbXNWYWxpZFwiIHN0eWxlPVwiY29sb3I6cmdiYSgyNTUsIDAsIDAsIDAuNzk3KVwiPiB7e19pMThuKFwiZGFzaGJvYXJkLmNvbXBvbmVudF9qc29uX2Vycm9yXCIpfX0gPC9wPlxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJoaWdobGlnaHRlZC1qc29uXCIgdi1tb2RlbD1cInBhcmFtc19qc29uX2RhdGFcIiBAZm9jdXNvdXQ9XCJmb3JtYXRKc29uXCIgc3R5bGU9XCJ3aWR0aDoxMDAlOyBoZWlnaHQ6MTAwJTtcIiByb3dzPVwiMTZcIiBjb2xzPVwiMTBcIiBcbiAgICAgICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiA6ZGlzYWJsZWQ9XCJpc05vdEpzb25QYXJhbXNWYWxpZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IF9pMThuKFwiYXBwbHlcIikgfX1cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjsgIFxuaW1wb3J0IGRhdGFVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIjtcbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gcmV0cmlldmUgdGhlIGxvY2FsIHdvcmQgKi9cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbi8qIEV2ZW50cyBFbWl0dGVkICovXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZWRpdFwiXSk7XG5cbi8qIE1vZGFsIFByb3BlcnRpZXMgKi9cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbn0pO1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJkYXNoYm9hcmQuZWRpdF9jb21wb25lbnRcIikpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBzbGlkZXJfdmFsdWVzID0gW1xuICAgIHsgaWQ6IDEsIHNpemVfY29tcG9uZW50X3ZhbHVlOiA0ICB9LFxuICAgIHsgaWQ6IDIsIHNpemVfY29tcG9uZW50X3ZhbHVlOiA2ICB9LFxuICAgIHsgaWQ6IDMsIHNpemVfY29tcG9uZW50X3ZhbHVlOiAxMiB9LFxuICAgIHsgaWQ6IDQsIHNpemVfY29tcG9uZW50X3ZhbHVlOiAtMSB9XG5dO1xuXG4vKiBUaW1lIFdpbmRvdyBvcHRpb25zICovXG5jb25zdCB0aW1lX3dpbmRvd19saXN0ID0gcmVmKFtcbiAgICB7IHZhbHVlOidjdXJyZW50JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLmN1cnJlbnRfdGltZVwiKSwgZGVmYXVsdDogdHJ1ZSB9LCAgICBcbiAgICB7IHZhbHVlOic1X21pbicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjVfbWluXCIpICB9LFxuICAgIHsgdmFsdWU6JzMwX21pbicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjMwX21pblwiKSB9LFxuICAgIHsgdmFsdWU6J2hvdXInLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV93aW5kb3dfbGlzdC5ob3VyXCIpIH0sXG4gICAgeyB2YWx1ZTonMl9ob3VycycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjJfaG91cnNcIikgfSxcbiAgICB7IHZhbHVlOicxMl9ob3VycycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjEyX2hvdXJzXCIpIH0sXG4gICAgeyB2YWx1ZTonZGF5JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfd2luZG93X2xpc3QuZGF5XCIpIH0sXG4gICAgeyB2YWx1ZTond2VlaycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LndlZWtcIikgfSxcbiAgICB7IHZhbHVlOidtb250aCcsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0Lm1vbnRoXCIpIH0sXG4gICAgeyB2YWx1ZToneWVhcicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LnllYXJcIikgfSxcbl0pO1xuXG4vKiBUaW1lIE9mZnNldCBvcHRpb25zICovXG5jb25zdCB0aW1lX29mZnNldF9saXN0ID0gcmVmKFtcbiAgICB7IHZhbHVlOidjdXJyZW50JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLmN1cnJlbnRfdGltZVwiKSwgZGVmYXVsdDogdHJ1ZSB9LCBcbiAgICB7IHZhbHVlOidob3VyJywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfb2Zmc2V0X2xpc3QuaG91clwiKSB9LFxuICAgIHsgdmFsdWU6J2RheScsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX29mZnNldF9saXN0LmRheVwiKSB9LFxuICAgIHsgdmFsdWU6J3dlZWsnLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC53ZWVrXCIpIH0sXG4gICAgeyB2YWx1ZTonbW9udGgnLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC5tb250aFwiKSB9LFxuICAgIHsgdmFsdWU6J3llYXInLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC55ZWFyXCIpIH0sXG5dKTtcblxuLyogTW9kYWwgUmVmIENvbnN0cyAqL1xuY29uc3Qgb2xkX2NvbXBvbmVudF90b19lZGl0ID0gcmVmKG51bGwpO1xuY29uc3QgY29tcG9uZW50X3RpdGxlID0gcmVmKG51bGwpO1xuY29uc3Qgd2lkdGhfc2VsZWN0ZWQgPSByZWYobnVsbCk7XG5jb25zdCBoZWlnaHRfc2VsZWN0ZWQgPSByZWYobnVsbCk7XG5jb25zdCBwYXJhbXNfanNvbl9kYXRhID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfdGltZV93aW5kb3cgPSByZWYobnVsbCk7XG5jb25zdCBzZWxlY3RlZF90aW1lX29mZnNldCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dfYWR2YW5jZWRfc2V0dGluZ3MgPSByZWYoZmFsc2UpOyAvLyBib29sIHVzZWQgdG8gZW5hYmxlIHRoZSBhZHZhbmNlZCB2aWV3XG5jb25zdCBpc05vdEpzb25QYXJhbXNWYWxpZCA9IHJlZihmYWxzZSk7IC8vIGJvb2wgdXNlZCB0byB2YWxpZGF0ZSB0aGUgUkVTVCBQYXJhbXMgaW4gdGV4dGFyZWFcbmNvbnN0IGhpZGRlbk9uUmVwb3J0ID0gcmVmKGZhbHNlKTsgLy8gYm9vbCB1c2VkIHRvIGhpZGUgdGltZV93aW5kb3cgd2hlbiB0aGUgcGFnZSBpcyByZXBvcnRcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKipcbiAqIFxuICogQGJyaWVmIFRoaXMgbWV0aG9kIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHNob3dfYWR2YW5jZWRfc2V0dGluZ3NcbiAqICAgICAgICBpbiBvcmRlciB0byBlbmFibGUgdGhlIGFkdmFuY2VkIHZpZXcgb3IgZGlzYWJsZSBpdC5cbiAqL1xuY29uc3QgdXBkYXRlQWR2YW5jZWRTZXR0aW5nc1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBzaG93X2FkdmFuY2VkX3NldHRpbmdzLnZhbHVlID0gIXNob3dfYWR2YW5jZWRfc2V0dGluZ3MudmFsdWU7XG59XG5cbi8qKlxuICogXG4gKiBAYnJpZWYgVGhpcyBtZXRob2QgY2hhbmdlcyB0aGUgdmFsdWUgb2YgdGhlIHNob3dfYWR2YW5jZWRfc2V0dGluZ3MgXG4gKiAgICAgICAgYm9vbGVhbiB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYWR2YW5jZWQgdmlldy5cbiAqL1xuY29uc3QgZm9ybWF0SnNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGlzTm90SnNvblBhcmFtc1ZhbGlkLnZhbHVlID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgcGFyYW1zX2pzb25fZGF0YS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UocGFyYW1zX2pzb25fZGF0YS52YWx1ZSksIG51bGwsIDIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaXNOb3RKc29uUGFyYW1zVmFsaWQudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zX2pzb25fZGF0YS52YWx1ZTtcbn07XG5cbi8qKlxuICogXG4gKiBAYnJpZWYgVGhpcyBtZXRob2Qgc2VsZWN0cyBmcm9tIHRoZSB0aW1lX2FycmF5IFxuICogICAgICAgIChlaXRoZXIgdGltZV9vZmZzZXRfbGlzdCBvciB0aW1lX3dpbmRvd19saXN0KSBcbiAqICAgICAgICB0aGUgb2JqZWN0IHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aW1lX3ZhbHVlICh0aGUgb2xkIHZhbHVlcykuIFxuICogICAgICAgIEluIGNhc2UgdGltZV92YWx1ZSBpcyBlbXB0eSBvciBudWxsLCBcbiAqICAgICAgICB0aGUgbWV0aG9kIHJldHVybnMgdGhlIGRlZmF1bHQgb2JqZWN0ICgnQ3VycmVudCcpLlxuICogQHBhcmFtIHRpbWVfdmFsdWUgVGhlIHRpbWUgdmFsdWUgKDVfbWluLCBob3VyLCAuLi4pIHRvIHNlYXJjaCBmb3JcbiAqIEBwYXJhbSB0aW1lX2FycmF5IFRoZSBhcnJheSBvZiB0aW1lIG9iamVjdHMgXG4gKiAgICAgICAgICAgICAgICAgICAoZWl0aGVyIGZyb20gdGltZV9vZmZzZXRfbGlzdCBvciB0aW1lX3dpbmRvd19saXN0KS5cbiAqL1xuY29uc3QgZmluZF90aW1lX29iamVjdCA9IGZ1bmN0aW9uKHRpbWVfdmFsdWUsIHRpbWVfYXJyYXkpIHtcbiAgICBpZiAoZGF0YVV0aWxzLmlzRW1wdHlPck51bGwodGltZV92YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVfYXJyYXkuZmluZCgodCkgPT4gdC5kZWZhdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGltZV9hcnJheS5maW5kKCh0KSA9PiB0LnZhbHVlID09IHRpbWVfdmFsdWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHJlc2V0IHRoZSBtb2RhbCByZWYgY29uc3RhbnRzLlxuICogICovIFxuY29uc3QgcmVzZXRfbW9kYWxfZm9ybSA9IGZ1bmN0aW9uIChoaWRkZW4pIHtcbiAgICBvbGRfY29tcG9uZW50X3RvX2VkaXQudmFsdWUgPSBudWxsO1xuICAgIGlzTm90SnNvblBhcmFtc1ZhbGlkLnZhbHVlID0gZmFsc2U7XG4gICAgaGlkZGVuT25SZXBvcnQudmFsdWUgPSBoaWRkZW47XG4gICAgY29tcG9uZW50X3RpdGxlLnZhbHVlID0gXCJcIjtcbiAgICBoZWlnaHRfc2VsZWN0ZWQudmFsdWUgPSAxO1xuICAgIHdpZHRoX3NlbGVjdGVkLnZhbHVlID0gMTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHNldCB0aGUgb2xkIGRhdGEgb2YgdGhlIHNlbGVjdGVkIGNvbXBvbmVudCBcbiAqICAgICAgICAgZm9yIGVkaXRpbmcuXG4gKiAgQHBhcmFtIG9sZF9jb21wb25lbnRfdG9fZWRpdCBzZWxlY3RlZCBjb21wb25lbnQgdG8gZWRpdFxuICogICovIFxuY29uc3Qgc2V0X29sZF9jb21wb25lbnRfdmFsdWVzID0gKG9sZF9jb21wb25lbnQpID0+IHtcbiAgICBvbGRfY29tcG9uZW50X3RvX2VkaXQudmFsdWUgPSBvbGRfY29tcG9uZW50O1xuXG4gICAgY29tcG9uZW50X3RpdGxlLnZhbHVlID0gb2xkX2NvbXBvbmVudC5jdXN0b21fbmFtZTtcbiAgICB3aWR0aF9zZWxlY3RlZC52YWx1ZSA9IGNvbnZlcnRfc2l6ZV90b19zbGlkZXJfdmFsdWUob2xkX2NvbXBvbmVudC53aWR0aCk7XG4gICAgaGVpZ2h0X3NlbGVjdGVkLnZhbHVlID0gY29udmVydF9zaXplX3RvX3NsaWRlcl92YWx1ZShvbGRfY29tcG9uZW50LmhlaWdodCk7XG4gICAgXG4gICAgc2VsZWN0ZWRfdGltZV93aW5kb3cudmFsdWUgPSBmaW5kX3RpbWVfb2JqZWN0KG9sZF9jb21wb25lbnQudGltZV93aW5kb3csdGltZV93aW5kb3dfbGlzdC52YWx1ZSk7XG4gICAgc2VsZWN0ZWRfdGltZV9vZmZzZXQudmFsdWUgPSBmaW5kX3RpbWVfb2JqZWN0KG9sZF9jb21wb25lbnQudGltZV9vZmZzZXQsIHRpbWVfb2Zmc2V0X2xpc3QudmFsdWUpO1xuXG4gICAgcGFyYW1zX2pzb25fZGF0YS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG9sZF9jb21wb25lbnQucGFyYW1zLCBudWxsLCAyKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSBtb2RhbCBpcyBvcGVuZWQgXG4gKiAgQHBhcmFtIG9sZF9jb21wb25lbnRfdG9fZWRpdCBzZWxlY3RlZCBjb21wb25lbnQgdG8gZWRpdFxuICogICovIFxuY29uc3Qgc2hvdyA9IChvbGRfY29tcG9uZW50X3RvX2VkaXQsIGhpZGRlbk9uUmVwb3J0KSA9PiB7XG4gICAgLyogRmlyc3Qgb2YgYWxsIHJlc2V0IGFsbCB0aGUgZGF0YSAqL1xuICAgIHJlc2V0X21vZGFsX2Zvcm0oaGlkZGVuT25SZXBvcnQpO1xuICAgIC8qIFNldCB0aGUgb2xkIGRhdGEgb2YgdGhlIGNvbXBvbmVudCAqL1xuICAgIHNldF9vbGRfY29tcG9uZW50X3ZhbHVlcyhvbGRfY29tcG9uZW50X3RvX2VkaXQpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgQ29udmVydCBhIHNsaWRlciB2YWx1ZSAgICAgICAgICAgKDEgKFNtYWxsKSwgMiAoTWVkaXVtKSwgMyAoTGFyZ2UpLCAgIDQgKEF1dG8pKSBcbiAqICAgICAgICAgICAgICAgICB0byBjb21wb25lbnQgc2l6ZSB2YWx1ZSAgKDQgKFNtYWxsKSwgNiAoTWVkaXVtKSwgMTIgKExhcmdlKSwgLTEgKEF1dG8pKVxuICogIEBwYXJhbSBzX3Ygc2xpZGVyIHZhbHVlIFxuICogICovIFxuY29uc3QgY29udmVydF9zbGlkZXJfdmFsdWVfdG9fc2l6ZSA9IChzX3YpID0+IHtcbiAgICByZXR1cm4gc2xpZGVyX3ZhbHVlcy5maW5kKChjKSA9PiBjLmlkID09IE51bWJlcihzX3YpKS5zaXplX2NvbXBvbmVudF92YWx1ZTtcbn0gXG5cbi8qKlxuICogXG4gKiAgQGJyaWVmIENvbnZlcnQgYSBjb21wb25lbnQgc2l6ZSB2YWx1ZSAoNCAoU21hbGwpLCA2IChNZWRpdW0pLCAxMiAoTGFyZ2UpLCAtMShBdXRvKSlcbiAqICAgICAgICAgdG8gc2xpZGVyIHZhbHVlICAgICAgICAgICAgICAgICgxIChTbWFsbCksIDIgKE1lZGl1bSksIDMgKExhcmdlKSwgIDQgKEF1dG8pKSAgXG4gKiAgQHBhcmFtIHNpemUgY29tcG9uZW50IHNpemUgdmFsdWUgXG4gKiAgKi8gXG5jb25zdCBjb252ZXJ0X3NpemVfdG9fc2xpZGVyX3ZhbHVlID0gKHNpemUpID0+IHtcbiAgICByZXR1cm4gc2xpZGVyX3ZhbHVlcy5maW5kKChjKSA9PiBjLnNpemVfY29tcG9uZW50X3ZhbHVlID09IE51bWJlcihzaXplKSkuaWQ7XG59IFxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qKlxuICogXG4gKiAgQGJyaWVmIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSAnQXBwbHknIGJ1dHRvbiBpcyBjbGlja2VkIFxuICogICAgICAgICB0byBlbWl0IGFuICdlZGl0JyBldmVudCBhbmQgY2xvc2UgdGhlIG1vZGFsLlxuICogICovIFxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3X3dpZHRoICAgICA9IGNvbnZlcnRfc2xpZGVyX3ZhbHVlX3RvX3NpemUod2lkdGhfc2VsZWN0ZWQudmFsdWUpO1xuICAgIGNvbnN0IG5ld19oZWlnaHQgICAgPSBjb252ZXJ0X3NsaWRlcl92YWx1ZV90b19zaXplKGhlaWdodF9zZWxlY3RlZC52YWx1ZSk7XG4gICAgY29uc3QgbmV3X3BhcmFtcyAgICA9IGAke3BhcmFtc19qc29uX2RhdGEudmFsdWV9YDtcblxuICAgIGVtaXQoXCJlZGl0XCIsIHtcbiAgICAgICAgaWQ6IG9sZF9jb21wb25lbnRfdG9fZWRpdC52YWx1ZS5pZCxcbiAgICAgICAgdGl0bGU6IGNvbXBvbmVudF90aXRsZS52YWx1ZSxcbiAgICAgICAgaGVpZ2h0OiBuZXdfaGVpZ2h0LFxuICAgICAgICB3aWR0aDogbmV3X3dpZHRoLFxuICAgICAgICB0aW1lX29mZnNldDogc2VsZWN0ZWRfdGltZV9vZmZzZXQudmFsdWUudmFsdWUsXG4gICAgICAgIHRpbWVfd2luZG93OiBzZWxlY3RlZF90aW1lX3dpbmRvdy52YWx1ZS52YWx1ZSxcbiAgICAgICAgcmVzdF9wYXJhbXM6IG5ld19wYXJhbXNcbiAgICB9KTtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93IH0pO1xuPC9zY3JpcHQ+XG4gICIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xubnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2JlZ2luICogMTAwMCwgJ0REL01NL1lZWVkgSEg6bW0nKSArICcgLSAnICsgbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2VuZCAqIDEwMDAsICdERC9NTS9ZWVlZIEhIOm1tJylcbi0tPlxuPHRlbXBsYXRlPlxuICA8ZGl2IDpjbGFzcz1cIndpZHRoX2NsYXNzXCIgY2xhc3M9XCJ3aWRnZXQtYm94LW1haW4tZGFzaGJvYXJkXCI+XG4gICAgPGRpdiA6Y2xhc3M9XCJoZWlnaHRfY2xhc3NcIiBjbGFzcz1cIndpZGdldC1ib3hcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO1wiPlxuICAgICAgPCEtLSB0aXRsZSAtLT5cbiAgICAgIDxzbG90IG5hbWU9XCJib3hfdGl0bGVcIj48L3Nsb3Q+XG5cbiAgICAgIDwhLS0gY29udGVudCAtLT5cbiAgICAgIDxzbG90IG5hbWU9XCJib3hfY29udGVudFwiPjwvc2xvdD5cblxuICAgICAgPCEtLSBmb290ZXIgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwibWItMSBtZS0zXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MHB4O3JpZ2h0OjBweDtcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImJveF9mb290ZXJcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIHdpZHRoOiBOdW1iZXIsXG4gIGhlaWdodDogTnVtYmVyLFxufSk7XG5cbmNvbnN0IHdpZHRoX2NsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICByZXR1cm4gYGNvbC0ke3Byb3BzLndpZHRoIHx8IDR9YDtcbn0pO1xuXG5jb25zdCBoZWlnaHRfY2xhc3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGxldCBjb2xvcl9jbGFzcyA9IGBgO1xuXG4gIGlmIChwcm9wcy5jb2xvcikge1xuICAgIC8qIEFjY2VwdGVkIGNvbG9yczogcHJpbWFyeSwgc2Vjb25kYXJ5LCBzdWNjZXNzLCBkYW5nZXIsIHdhcm5pbmcsIGluZm8sIGxpZ2h0LCBkYXJrLCB3aGl0ZSAqL1xuICAgIGNvbG9yX2NsYXNzID0gYGJnLSR7cHJvcHMuY29sb3J9YDtcbiAgfVxuXG4gIHJldHVybiBgcm93LSR7cHJvcHMuaGVpZ2h0IHx8IDR9ICR7Y29sb3JfY2xhc3N9YDtcbn0pO1xuPC9zY3JpcHQ+XG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXY+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICAgIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICAgIGlmaWQ6IFN0cmluZywgICAgICAgIC8qIEludGVyZmFjZSBJRCAqL1xuICAgIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICAgIG1heF93aWR0aDogTnVtYmVyLCAgIC8qIENvbXBvbmVudCBXaWR0aCAoNCwgOCwgMTIpICovXG4gICAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgICBnZXRfY29tcG9uZW50X2RhdGE6IEZ1bmN0aW9uLCAvKiBDYWxsYmFjayB0byByZXF1ZXN0IGRhdGEgKFJFU1QpICovXG4gICAgZmlsdGVyczogT2JqZWN0XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHJlZnJlc2hfY29tcG9uZW50KCk7XG59LCB7IGZsdXNoOiAncHJlJywgZGVlcDogdHJ1ZSB9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICByZWZyZXNoX2NvbXBvbmVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX2NvbXBvbmVudCgpIHtcbiAgICAvKiBSZWZyZXNoIGNvbXBvbmVudCAqL1xufVxuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwidGFibGUtcmVzcG9uc2l2ZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6LTFyZW07bWFyZ2luLXJpZ2h0Oi0xcmVtO1wiPlxuICA8Qm9vdHN0cmFwVGFibGVcbiAgICA6aWQ9XCJ0YWJsZV9pZFwiIFxuICAgIDpjb2x1bW5zPVwiY29sdW1uc1wiXG4gICAgOnJvd3M9XCJ0YWJsZV9yb3dzXCJcbiAgICA6cHJpbnRfaHRtbF9jb2x1bW49XCJyZW5kZXJfY29sdW1uXCJcbiAgICA6cHJpbnRfaHRtbF9yb3c9XCJyZW5kZXJfcm93XCJcbiAgICA6d3JhcF9jb2x1bW5zPVwidHJ1ZVwiPlxuICA8L0Jvb3RzdHJhcFRhYmxlPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IHNjYW5fdHlwZV9mLGxhc3Rfc2Nhbl9mLCBkdXJhdGlvbl9mLCBzY2FuX2ZyZXF1ZW5jeV9mLCBpc19va19sYXN0X3NjYW5fZiwgdGNwX3BvcnRzX2YsIHRjcF9wb3J0X2YsIGhvc3RzX2YsIGhvc3RfZiwgY3Zlc19mLCBtYXhfc2NvcmVfY3ZlX2YsIHVkcF9wb3J0c19mLCBudW1fdnVsbl9mb3VuZF9mLCB0Y3BfdWRwX3BvcnRzX2xpc3RfZiwgZGlzY292ZXJkX2hvc3RzX2xpc3RfZiAgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZzX3JlcG9ydF9mb3JtYXR0ZXIuanNcIjsgXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKCdzaW1wbGVfdGFibGUnKTtcbmNvbnN0IHRhYmxlX3Jvd3MgPSByZWYoW10pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbmNvbnN0IGNvbHVtbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IGNvbHVtbnMgPSBwcm9wcy5wYXJhbXMuY29sdW1ucy5tYXAoKGMpID0+IHtcbiAgICAgICAgaWYgKCFjLnN0eWxlICYmIGMuZGF0YV90eXBlKSB7XG4gICAgICAgICAgICBpZiAoYy5kYXRhX3R5cGUgPT0gXCJieXRlc1wiIHx8IGMuZGF0YV90eXBlID09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYy5zdHlsZSA9IFwidGV4dC1hbGlnbjogcmlnaHRcIjtcbiAgICAgICAgICAgIH0gZWxzZSAgaWYgKGMuZGF0YV90eXBlID09IFwiY291bnRfc2NvcmVcIikge1xuICAgICAgICAgICAgICAgIGMuc3R5bGUgPSBcInRleHQtYWxpZ246IGNlbnRlclwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRyZXR1cm4ge1xuXHQgICAgLi4uYyxcblx0fTtcbiAgICB9KTtcblxuICAgIGNvbHVtbnNbMF0uY2xhc3MgPSAoY29sdW1uc1swXS5jbGFzcyA/IChjb2x1bW5zWzBdLmNsYXNzICsgXCIgXCIpIDogXCJcIikgXG4gICAgICArIFwiZmlyc3QtY29sLXdpZHRoXCI7XG5cbiAgICByZXR1cm4gY29sdW1ucztcbn0pO1xuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgcmVmcmVzaF90YWJsZSgpO1xufSwgeyBmbHVzaDogJ3ByZScsIGRlZXA6IHRydWUgfSk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGluaXQoKTtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgcmVmcmVzaF90YWJsZSgpO1xufVxuXG5jb25zdCByZW5kZXJfY29sdW1uID0gZnVuY3Rpb24gKGNvbHVtbikge1xuICBpZiAoY29sdW1uLmkxOG5fbmFtZSkgeyByZXR1cm4gX2kxOG4oY29sdW1uLmkxOG5fbmFtZSk7IH1cbiAgcmV0dXJuIFwiXCI7XG59XG5cbmNvbnN0IHJvd19yZW5kZXJfZnVuY3Rpb25zID0ge1xuICAvKiBSZW5kZXIgZnVuY3Rpb24gZm9yICd0aHJvdWdocHV0JyB0YWJsZSB0eXBlICovXG4gIHRocm91Z2hwdXQ6IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICAgIGlmIChjb2x1bW4uaWQgPT0gJ25hbWUnKSB7XG4gICAgICBpZiAocm93Wyd1cmwnXSlcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPScke3Jvdy51cmx9Jz4ke3Jvdy5uYW1lfTwvYT5gO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gcm93Lm5hbWU7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgICBpZiAocm93Wyd0aHJvdWdocHV0X3R5cGUnXSAmJiByb3dbJ3Rocm91Z2hwdXRfdHlwZSddID09ICdwcHMnKSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuZnBhY2tldHMocm93W2NvbHVtbi5pZF0pO1xuICAgICAgfSBlbHNlIGlmIChyb3dbJ3Rocm91Z2hwdXRfdHlwZSddICYmIHJvd1sndGhyb3VnaHB1dF90eXBlJ10gPT0gJ2JwcycpIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5iaXRzVG9TaXplKHJvd1tjb2x1bW4uaWRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByb3dbJ3Rocm91Z2hwdXQnXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9LFxuXG4gIC8qIFJlbmRlciBmdW5jdGlvbiBmb3IgJ2RiX3NlYXJjaCcgdGFibGUgdHlwZSAqL1xuICBkYl9zZWFyY2g6IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICAgIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICdob3N0Jykge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRIb3N0KHJvd1tjb2x1bW4uaWRdLCByb3csIChjb2x1bW4uaWQgPT0gJ2NsaV9pcCcpKTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5kYXRhX3R5cGUgPT0gJ25ldHdvcmsnKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdE5ldHdvcmsocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICdhc24nKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdEFTTihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5kYXRhX3R5cGUgPT0gJ2NvdW50cnknKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdENvdW50cnkocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChmb3JtYXR0ZXJVdGlscy50eXBlc1tjb2x1bW4uZGF0YV90eXBlXSkge1xuICAgICAgLy8gJ2J5dGVzJywgJ2JwcycsICdwcHMnLCAuLi5cbiAgICAgIGxldCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoY29sdW1uLmRhdGFfdHlwZSk7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHJvd1tjb2x1bW4uaWRdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3dbY29sdW1uLmlkXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0R2VuZXJpY09iaihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICAgIH1cbiAgfSxcblxuICB2c19zY2FuX3Jlc3VsdDogZnVuY3Rpb24oY29sdW1uLCByb3cpIHtcbiAgICBpZihjb2x1bW4uaWQgPT0gXCJob3N0XCIpIHtcbiAgICAgIHJldHVybiBob3N0X2Yocm93W2NvbHVtbi5pZF0sIHJvdywgcHJvcHMuaWZpZCk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImxhc3Rfc2NhblwiKSB7XG4gICAgICByZXR1cm4gbGFzdF9zY2FuX2Yocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImR1cmF0aW9uXCIpIHtcbiAgICAgIHJldHVybiBkdXJhdGlvbl9mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJzY2FuX2ZyZXF1ZW5jeVwiKSB7XG4gICAgICByZXR1cm4gc2Nhbl9mcmVxdWVuY3lfZihyb3dbY29sdW1uLmlkXSk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImlzX29rX2xhc3Rfc2NhblwiKSB7XG4gICAgICByZXR1cm4gaXNfb2tfbGFzdF9zY2FuX2Yocm93W2NvbHVtbi5pZF0pO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJ0Y3BfcG9ydHNcIikge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJ1ZHBfcG9ydHNcIikge1xuICAgICAgcmV0dXJuIHVkcF9wb3J0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gIGVsc2UgaWYoY29sdW1uLmlkID09IFwic2Nhbl90eXBlXCIpIHtcbiAgICAgIHJldHVybiBzY2FuX3R5cGVfZihyb3dbY29sdW1uLmlkXSwgdHJ1ZSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcImhvc3RzXCIpIHtcbiAgICAgIHJldHVybiBob3N0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwiY3ZlXCIgfHwgY29sdW1uLmlkID09IFwiY3ZlX2xpc3RcIikge1xuICAgICAgcmV0dXJuIGN2ZXNfZihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcInBvcnRcIikge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0X2Yocm93W2NvbHVtbi5pZF0scm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcIm1heF9zY29yZV9jdmVcIikge1xuICAgICAgcmV0dXJuIG1heF9zY29yZV9jdmVfZihyb3dbY29sdW1uLmlkXSxyb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZFwiKSB7XG4gICAgICByZXR1cm4gbnVtX3Z1bG5fZm91bmRfZihyb3dbY29sdW1uLmlkXSxyb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwidGNwX3VkcF9wb3J0c19saXN0XCIpIHtcbiAgICAgIHJldHVybiB0Y3BfdWRwX3BvcnRzX2xpc3RfZihyb3dbXCJ0Y3BfcG9ydHNfbGlzdFwiXSwgcm93W1widWRwX3BvcnRzX2xpc3RcIl0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gXCJkaXNjb3ZlcmVkX2hvc3RzXCIpIHtcbiAgICAgIHJldHVybiBkaXNjb3ZlcmRfaG9zdHNfbGlzdF9mKHJvd1tjb2x1bW4uaWRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVuZGVyX3JvdyA9IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICBpZiAocHJvcHMucGFyYW1zICYmIFxuICAgICAgcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgJiYgXG4gICAgICByb3dfcmVuZGVyX2Z1bmN0aW9uc1twcm9wcy5wYXJhbXMudGFibGVfdHlwZV0pIHtcbiAgICBjb25zdCByZW5kZXJfZnVuYyA9IHJvd19yZW5kZXJfZnVuY3Rpb25zW3Byb3BzLnBhcmFtcy50YWJsZV90eXBlXTtcbiAgICByZXR1cm4gcmVuZGVyX2Z1bmMoY29sdW1uLCByb3cpO1xuICB9IGVsc2UgaWYgKHJvd1tjb2x1bW4uaWRdKSB7XG4gICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIGNvbnN0IHVybF9wYXJhbXMgPSB7XG4gICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gIH1cbiAgY29uc3QgcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXMpO1xuIFxuICAvL2xldCBkYXRhID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH0/JHtxdWVyeV9wYXJhbXN9YCk7XG4gIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gIGxldCByb3dzID0gW107XG4gIGlmIChwcm9wcy5wYXJhbXMudGFibGVfdHlwZSA9PSAnZGJfc2VhcmNoJykge1xuICAgIHJvd3MgPSBkYXRhLnJlY29yZHM7IC8qIGRiX3NlYXJjaDogcmVhZCBkYXRhIGZyb20gZGF0YS5yZWNvcmRzICovXG4gIH0gZWxzZSB7XG4gICAgcm93cyA9IGRhdGE7IC8qIGRlZmF1bHQ6IGRhdGEgaXMgdGhlIGFycmF5IG9mIHJlY29yZHMgKi9cbiAgfVxuXG4gIGlmICggcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgIT0gJ3ZzX3NjYW5fcmVzdWx0Jykge1xuICAgIGNvbnN0IG1heF9yb3dzID0gcHJvcHMubWF4X2hlaWdodCA/ICgocHJvcHMubWF4X2hlaWdodC80KSAqIDYpIDogNjtcbiAgICByb3dzID0gcm93cy5zbGljZSgwLCBtYXhfcm93cyk7XG4gIH0gXG5cbiAgdGFibGVfcm93cy52YWx1ZSA9IHJvd3M7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmZpcnN0LWNvbC13aWR0aCB7XG4gICAgLyogbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7ICovXG59XG5cbkBtZWRpYSBwcmludCBhbmQgKG1heC13aWR0aDogMjEwbW0pIHtcbiAgICB0ZC5maXJzdC1jb2wtd2lkdGgge1xuXHRtYXgtd2lkdGg6IDU1bW0gIWltcG9ydGFudDtcbiAgICB9XG59XG5AbWVkaWEgcHJpbnQgYW5kIChtaW4td2lkdGg6IDIxMW1tKSB7XG4gICAgdGQuZmlyc3QtY29sLXdpZHRoIHtcblx0bWF4LXdpZHRoOiA5NW1tICFpbXBvcnRhbnQ7XG4gICAgfVxufVxuXG4vKiBAbWVkaWEgcHJpbnQgYW5kIChtYXgtd2lkdGg6IDE0OG1tKXsgKi9cbi8qIH0gKi9cblxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGEgOmhyZWY9XCJsaW5rX3VybFwiPlxuICAgICAgICAgICAgPGg0IGNsYXNzPVwiZnctbm9ybWFsIHRleHQtd2hpdGVcIj57eyBjb3VudGVyIH19PC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwic3VidGl0bGUgdGV4dC13aGl0ZSB0ZXh0LXNtIHRleHQgbWItMCBoNVwiPnt7IG5hbWUgfX08L3A+XG4gICAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1zaHJpbmstMCBtcy0zXCI+XG4gICAgICAgIDxpIGNsYXNzPVwidGV4dC13aGl0ZVwiIDpjbGFzcz1cImljb25cIj48L2k+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgY291bnRlciA9IHJlZignJylcbmNvbnN0IG5hbWUgPSByZWYoJycpXG5jb25zdCBpY29uID0gcmVmKCcnKVxuY29uc3QgbGlua191cmwgPSByZWYoJyMnKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIHNldF9jb21wb25lbnRfYXR0cjogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHNldCBjb21wb25lbnQgYXR0cmlidXRlcyAoZS5nLiBCb3ggYWN0aXZlIGNvbG9yKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgcmVmcmVzaF9jb21wb25lbnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgaWYgKHByb3BzLnBhcmFtcy5pMThuX25hbWUpIHtcbiAgICBuYW1lLnZhbHVlID0gX2kxOG4ocHJvcHMucGFyYW1zLmkxOG5fbmFtZSk7XG4gIH1cblxuICBpZiAocHJvcHMucGFyYW1zLmljb24pIHtcbiAgICBpY29uLnZhbHVlID0gcHJvcHMucGFyYW1zLmljb24gKyAnIGZhLTJ4bCc7XG4gIH1cblxuICByZWZyZXNoX2NvbXBvbmVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX2NvbXBvbmVudCgpIHtcbiAgLyogUmVmcmVzaCBjb21wb25lbnQgKi9cblxuICBpZiAocHJvcHMucGFyYW1zLnVybCkge1xuXG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgLi4ucHJvcHMuZmlsdGVyc1xuICAgIH1cbiAgICBjb25zdCBxdWVyeV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtcyk7XG5cbiAgICAvLyBsZXQgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtodHRwX3ByZWZpeH0ke3Byb3BzLnBhcmFtcy51cmx9PyR7cXVlcnlfcGFyYW1zfWApO1xuICAgIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gICAgLyogVE9ETyBoYW5kbGUgZG90LXNlcGFyYXRlZCBwYXRoIGZvciBub24tZmxhdCBqc29uICovXG4gICAgbGV0IGNvdW50ZXJfdmFsdWUgPSBkYXRhW3Byb3BzLnBhcmFtcy5jb3VudGVyX3BhdGhdO1xuXG4gICAgbGV0IGNvdW50ZXJfZm9ybWF0dGVyID0gZGF0YVtwcm9wcy5wYXJhbXMuY291bnRlcl9mb3JtYXR0ZXJdO1xuICAgIGlmICghY291bnRlcl9mb3JtYXR0ZXIpIHtcbiAgICAgIGNvdW50ZXJfZm9ybWF0dGVyID0gXCJudW1iZXJcIjtcbiAgICB9XG5cbiAgICBsZXQgZm9ybWF0Q291bnRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihjb3VudGVyX2Zvcm1hdHRlcik7XG4gICAgY291bnRlci52YWx1ZSA9IGZvcm1hdENvdW50ZXIoY291bnRlcl92YWx1ZSlcblxuICAgIGlmIChjb3VudGVyX3ZhbHVlKSB7XG4gICAgICAgIHByb3BzLnNldF9jb21wb25lbnRfYXR0cignYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnBhcmFtcy5saW5rKSB7XG4gICAgICBjb25zdCBsaW5rX3VybF9wYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgICAgIC4uLnByb3BzLnBhcmFtcy5saW5rLnVybF9wYXJhbXNcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGlua19xdWVyeV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMobGlua191cmxfcGFyYW1zKTtcbiAgICAgIGxpbmtfdXJsLnZhbHVlID0gYCR7aHR0cF9wcmVmaXh9JHtwcm9wcy5wYXJhbXMubGluay51cmx9PyR7bGlua19xdWVyeV9wYXJhbXN9YDtcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxDaGFydCByZWY9XCJjaGFydFwiIDppZD1cImlkXCIgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCIgOmJhc2VfdXJsX3JlcXVlc3Q9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2NoYXJ0X29wdGlvbnNcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgIDwvQ2hhcnQ+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBjaGFydF90eXBlID0gcmVmKG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVUKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbmNvbnN0IGJhc2VfdXJsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBgJHtodHRwX3ByZWZpeH0ke3Byb3BzLnBhcmFtcy51cmx9YDtcbn0pO1xuXG5jb25zdCBnZXRfdXJsX3BhcmFtcyA9ICgpID0+IHtcbiAgICBjb25zdCB1cmxfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICAgIGVwb2NoX2VuZDogcHJvcHMuZXBvY2hfZW5kLFxuICAgICAgICBuZXdfY2hhcnRzOiB0cnVlLFxuICAgICAgICAuLi5wcm9wcy5wYXJhbXMudXJsX3BhcmFtcyxcbiAgICAgICAgLi4ucHJvcHMuZmlsdGVyc1xuICAgIH1cbiAgICBsZXQgcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXMpO1xuXG4gICAgLyogUHVzaCBpZmlkIHRvIHRoZSBwYXJhbWV0ZXJzIChlLmcuIFwidHNfcXVlcnk9aWZpZDokSUZJRCRcIiAqL1xuICAgIHF1ZXJ5X3BhcmFtcyA9IHF1ZXJ5X3BhcmFtcy5yZXBsYWNlQWxsKFwiJTI0SUZJRCUyNFwiIC8qICRJRklEJCAqLywgcHJvcHMuaWZpZCk7XG5cbiAgICByZXR1cm4gcXVlcnlfcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBnZXRfY2hhcnRfb3B0aW9ucygpIHtcbiAgICBjb25zdCB1cmwgPSBiYXNlX3VybC52YWx1ZTtcbiAgICBjb25zdCB1cmxfcGFyYW1zID0gZ2V0X3VybF9wYXJhbXMoKTtcbiAgICByZXR1cm4gcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKHVybCwgdXJsX3BhcmFtcyk7XG59XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICByZWZyZXNoX2NoYXJ0KCk7XG59LCB7IGZsdXNoOiAncHJlJywgZGVlcDogdHJ1ZSB9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAvL3JlZnJlc2hfY2hhcnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF9jaGFydCgpIHtcbiAgICBjaGFydC52YWx1ZS51cGRhdGVfY2hhcnQoKTtcbn1cbjwvc2NyaXB0PiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG4gICAgICA8IS0tIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZ2V0X3VybF9wYXJhbXNcIiAtLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxUaW1lc2VyaWVzQ2hhcnQgcmVmPVwiY2hhcnRcIiA6aWQ9XCJpZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiIDpiYXNlX3VybF9yZXF1ZXN0PVwiYmFzZV91cmxcIlxuICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9jaGFydF9vcHRpb25zXCIgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiIDpkaXNhYmxlX3BvaW50ZXJfZXZlbnRzPVwiZmFsc2VcIj5cbiAgICA8L1RpbWVzZXJpZXNDaGFydD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUaW1lc2VyaWVzQ2hhcnQgfSBmcm9tIFwiLi90aW1lc2VyaWVzLWNoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGhlaWdodF9wZXJfcm93ID0gNjIuNSAvKiBweCAqL1xuY29uc3QgY2hhcnRfdHlwZSA9IHJlZihudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGltZXNlcmllc19ncm91cHMgPSByZWYoW10pO1xuY29uc3QgZ3JvdXBfb3B0aW9uX21vZGUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0R3JvdXBPcHRpb25Nb2RlKCcxX2NoYXJ0X3hfeWF4aXMnKTtcbmNvbnN0IGhlaWdodCA9IHJlZihudWxsKTtcbmNvbnN0IHRzX3JlcXVlc3QgPSByZWYoW10pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgaWZpZDogU3RyaW5nLCAgICAgICAgLyogSW50ZXJmYWNlIElEICovXG4gIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgbWF4X3dpZHRoOiBOdW1iZXIsICAgLyogQ29tcG9uZW50IFdpZHRoICg0LCA4LCAxMikgKi9cbiAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gIGdldF9jb21wb25lbnRfZGF0YTogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHJlcXVlc3QgZGF0YSAoUkVTVCkgKi9cbiAgY3NyZjogU3RyaW5nLFxuICBmaWx0ZXJzOiBPYmplY3QsXG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJldHVybiB0aGUgYmFzZSB1cmwgb2YgdGhlIFJFU1QgQVBJICovXG5jb25zdCBiYXNlX3VybCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gO1xufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzdWJzdGl0dXRlX2lmaWQocGFyYW1zX3RvX2Zvcm1hdCwgY3VycmVudF9pZmlkKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJElGSUQkJykpIHtcbiAgICAgIC8qIENvbnRhaW5zICRJRklEJCwgc3Vic3RpdHV0ZSB3aXRoIHRoZSBpbnRlcmZhY2UgaWQgKi9cbiAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zW3BhcmFtXSA9IHBhcmFtc190b19mb3JtYXRbcGFyYW1dLnJlcGxhY2UoJyRJRklEJCcsIGN1cnJlbnRfaWZpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGRvZXMgTk9UIENvbnRhaW5zICRJRklEJCwgYWRkIHRoZSBwbGFpbiBwYXJhbSAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld19mb3JtYXR0ZWRfcGFyYW1zO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gc3Vic3RpdHV0ZV9leHBvcnRlcihwYXJhbXNfdG9fZm9ybWF0LCBjdXJyZW50X2V4cG9ydGVyKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJEVYUE9SVEVSJCcpKSB7XG4gICAgICAvKiBDb250YWlucyAkRVhQT1JURVIkLCBzdWJzdGl0dXRlIHdpdGggdGhlIGludGVyZmFjZSBpZCAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV0ucmVwbGFjZSgnJEVYUE9SVEVSJCcsIGN1cnJlbnRfZXhwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBkb2VzIE5PVCBDb250YWlucyAkRVhQT1JURVIkLCBhZGQgdGhlIHBsYWluIHBhcmFtICovXG4gICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtc1twYXJhbV0gPSBwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3X2Zvcm1hdHRlZF9wYXJhbXM7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzdWJzdGl0dXRlX25ldHdvcmsocGFyYW1zX3RvX2Zvcm1hdCwgY3VycmVudF9uZXR3b3JrKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJE5FVFdPUkskJykpIHtcbiAgICAgIC8qIENvbnRhaW5zICRORVRXT1JLJCwgc3Vic3RpdHV0ZSB3aXRoIHRoZSBpbnRlcmZhY2UgaWQgKi9cbiAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zW3BhcmFtXSA9IHBhcmFtc190b19mb3JtYXRbcGFyYW1dLnJlcGxhY2UoJyRORVRXT1JLJCcsIGN1cnJlbnRfbmV0d29yayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGRvZXMgTk9UIENvbnRhaW5zICRORVRXT1JLJCwgYWRkIHRoZSBwbGFpbiBwYXJhbSAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld19mb3JtYXR0ZWRfcGFyYW1zO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRJRklEJCBmb3VuZCBpbiB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gdGhlIGNvcnJlY3QgaW50ZXJmYWNlIGlkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZvcm1hdF9pZmlkcyhwYXJhbXNfdG9fZm9ybWF0KSB7XG4gIGlmICh0c19yZXF1ZXN0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAvKiBBbHJlYWR5IHBvcHVsYXRlZCwgcmV0dXJuICovXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGlmaWRfdXJsID0gXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCJcbiAgY29uc3QgaWZpZF9saXN0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fS8ke2lmaWRfdXJsfWApIHx8IFtdO1xuICBpZmlkX2xpc3QuZm9yRWFjaCgoaWZhY2UpID0+IHtcbiAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2lmaWQocGFyYW1zX3RvX2Zvcm1hdCwgaWZhY2UuaWZpZCk7XG4gICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtpZmFjZS5pZmlkXVxuICAgIHRzX3JlcXVlc3QudmFsdWUucHVzaChuZXdfZm9ybWF0dGVkX3BhcmFtcyk7XG4gIH0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRFWFBPUlRFUiQgZm91bmQgaW4gdGhlXG4gKiBjb25maWd1cmF0aW9uIHRoZSBjb3JyZWN0IGZsb3cgZXhwb3J0ZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0X2V4cG9ydGVycyhwYXJhbXNfdG9fZm9ybWF0KSB7XG4gIGlmICh0c19yZXF1ZXN0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAvKiBBbHJlYWR5IHBvcHVsYXRlZCwgcmV0dXJuICovXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGV4cG9ydGVyc191cmwgPSBcImx1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZXMvc3RhdHMubHVhXCJcbiAgY29uc3QgZXhwb3J0ZXJzX2xpc3QgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9LyR7ZXhwb3J0ZXJzX3VybH0/aWZpZD0ke3Byb3BzLmlmaWR9Jmd1aT10cnVlYCkgfHwgW107XG4gIGlmIChleHBvcnRlcnNfbGlzdCkge1xuICAgIGV4cG9ydGVyc19saXN0LmZvckVhY2goKGV4cG9ydGVyKSA9PiB7XG4gICAgICBpZiAoZXhwb3J0ZXIpIHtcbiAgICAgICAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9leHBvcnRlcihwYXJhbXNfdG9fZm9ybWF0LCBleHBvcnRlci5wcm9iZV9pcCk7XG4gICAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKG5ld19mb3JtYXR0ZWRfcGFyYW1zLCBleHBvcnRlci5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtleHBvcnRlci5pZmlkLCBleHBvcnRlci5wcm9iZV9pcF1cbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRORVRXT1JLJCBmb3VuZCBpbiB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gaW4gdGhlIGNvcnJlY3QgbmV0d29ya3NcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0X25ldHdvcmtzKHBhcmFtc190b19mb3JtYXQpIHtcbiAgaWYgKHRzX3JlcXVlc3QudmFsdWUubGVuZ3RoID4gMCkge1xuICAgIC8qIEFscmVhZHkgcG9wdWxhdGVkLCByZXR1cm4gKi9cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmV0d29ya3NfdXJsID0gXCJsdWEvcmVzdC92Mi9nZXQvbmV0d29yay9uZXR3b3Jrcy5sdWFcIlxuICBjb25zdCBuZXR3b3Jrc19saXN0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fS8ke25ldHdvcmtzX3VybH0/aWZpZD0ke3Byb3BzLmlmaWR9YCkgfHwgW107XG4gIGlmIChuZXR3b3Jrc19saXN0KSB7XG4gICAgbmV0d29ya3NfbGlzdC5mb3JFYWNoKChuZXR3b3JrKSA9PiB7XG4gICAgICBpZiAobmV0d29yaykge1xuICAgICAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX25ldHdvcmsocGFyYW1zX3RvX2Zvcm1hdCwgbmV0d29yay5pZCk7XG4gICAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKG5ld19mb3JtYXR0ZWRfcGFyYW1zLCBwcm9wcy5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtwcm9wcy5pZmlkLCBuZXR3b3JrLmlkXTtcbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgJEFOWSQgcGFyYW1zIGluIHRoZSBcbiAqIGNvcnJlY3QgdmFsdWUgKGUuZy4gJEFOWV9JRklEJCAtPiBsaXN0IG9mIGFsbCBpZmlkKVxuICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlX2FueV9wYXJhbXMoKSB7XG4gIC8qIENsZWFyIHRoZSBBcnJheSAqL1xuICB0c19yZXF1ZXN0LnZhbHVlID0gW107XG4gIC8qIEhlcmUgcG9zc2libGUgQU5ZLCBjYW4gYmUgZm91bmQgaW4gdGhlIHBvc3RfcGFyYW1zICovXG4gIGNvbnN0IHBhcmFtcyA9IHByb3BzLnBhcmFtcy5wb3N0X3BhcmFtcz8udHNfcmVxdWVzdHM7XG4gIGZvciAoY29uc3QgYW55X3BhcmFtIGluIChwYXJhbXMgfHwge30pKSB7XG4gICAgc3dpdGNoIChhbnlfcGFyYW0pIHtcbiAgICAgIGNhc2UgJyRBTllfSUZJRCQnOlxuICAgICAgICBhd2FpdCBmb3JtYXRfaWZpZHMocGFyYW1zW2FueV9wYXJhbV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyRBTllfRVhQT1JURVIkJzpcbiAgICAgICAgYXdhaXQgZm9ybWF0X2V4cG9ydGVycyhwYXJhbXNbYW55X3BhcmFtXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJEFOWV9ORVRXT1JLJCc6XG4gICAgICAgIGF3YWl0IGZvcm1hdF9uZXR3b3JrcyhwYXJhbXNbYW55X3BhcmFtXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKHBhcmFtc1thbnlfcGFyYW1dLCBwcm9wcy5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtwcm9wcy5pZmlkXTtcbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGUgc291cmNlX3R5cGUgY2FuIGJlIGZvdW5kIG9uIHRoZSBqc29uIGFuZCB0aGUgc291cmNlX2FycmF5IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkXG4gKiBieSB1c2luZyB0aGUgc291cmNlX3R5cGVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpY19zY2hlbWEsIHNvdXJjZV9kZWYpIHtcbiAgY29uc3Qgc3RhdHVzID0ge1xuICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgfTtcbiAgY29uc3Qgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX3R5cGVfZnJvbV9pZChwcm9wcy5wYXJhbXM/LnNvdXJjZV90eXBlKTtcbiAgY29uc3Qgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2RlZik7XG4gIGNvbnN0IG1ldHJpYyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWEsIG51bGwsIHN0YXR1cyk7XG4gIGNvbnN0IHRzX2dyb3VwID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gIHJldHVybiB0c19ncm91cDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlX2Jhc2ljX2luZm8oKSB7XG4gIC8qIFJldHVybiB0aGUgdGltZXNlcmllcyBncm91cCwgaW5mbyBmb3VuZCBpbiB0aGUganNvbiAqL1xuICBpZiAodGltZXNlcmllc19ncm91cHMudmFsdWUubGVuZ3RoID09IDApIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRzX3JlcXVlc3QudmFsdWUpIHtcbiAgICAgIGNvbnN0IG1ldHJpY19zY2hlbWEgPSB2YWx1ZT8udHNfc2NoZW1hO1xuICAgICAgY29uc3Qgc291cmNlX2RlZiA9IHZhbHVlLnNvdXJjZV9kZWY7XG4gICAgICBkZWxldGUgdmFsdWUuc291cmNlX2RlZiAvKiBSZW1vdmUgdGhlIHByb3BlcnR5IG90aGVyd2lzZSBpdCdzIGdvaW5nIHRvIGJlIGFkZGVkIHRvIHRoZSBSRVNUICovXG4gICAgICBjb25zdCBncm91cCA9IGF3YWl0IGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWNfc2NoZW1hLCBzb3VyY2VfZGVmKTtcbiAgICAgIHRpbWVzZXJpZXNfZ3JvdXBzLnZhbHVlLnB1c2goZ3JvdXApO1xuICAgIH1cbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUmVtb3ZlIHRoZSBwcm9wZXJ0eSBvdGhlcndpc2UgaXQncyBnb2luZyB0byBiZSBhZGRlZCB0byB0aGUgUkVTVCAqL1xuZnVuY3Rpb24gcmVtb3ZlX2V4dHJhX3BhcmFtcygpIHtcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB0c19yZXF1ZXN0LnZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnNvdXJjZV9kZWYpIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5zb3VyY2VfZGVmXG4gICAgfVxuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJ1biB0aGUgUkVTVCBBUEkgd2l0aCB0aGUgZGF0YSAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0X2NoYXJ0X29wdGlvbnMoKSB7XG4gIGF3YWl0IHJlc29sdmVfYW55X3BhcmFtcygpO1xuICBhd2FpdCByZXRyaWV2ZV9iYXNpY19pbmZvKCk7XG4gIHJlbW92ZV9leHRyYV9wYXJhbXMoKTtcbiAgY29uc3QgdXJsID0gYmFzZV91cmwudmFsdWU7XG4gIGNvbnN0IHBvc3RfcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZCxcbiAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgLi4ucHJvcHMucGFyYW1zLnBvc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHRzX3JlcXVlc3RzOiB0c19yZXF1ZXN0LnZhbHVlXG4gICAgfVxuICB9XG4gIC8qIEhhdmUgdG8gYmUgdXNlZCB0aGlzIGdldF9jb21wb25lbnRfZGF0YSwgaW4gb3JkZXIgdG8gY3JlYXRlIHJlcG9ydCB0b28gKi9cbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHByb3BzLmdldF9jb21wb25lbnRfZGF0YSh1cmwsICcnLCBwb3N0X3BhcmFtcyk7XG4gIC8qIEZvcm1hdCB0aGUgcmVzdWx0IGluIHRoZSBmb3JtYXQgbmVlZGVkIGJ5IER5Z3JhcGggKi9cbiAgcmVzdWx0ID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb09wdGlvbnNBcnJheShyZXN1bHQsIHRpbWVzZXJpZXNfZ3JvdXBzLnZhbHVlLCBncm91cF9vcHRpb25fbW9kZSwgJycpO1xuICBpZiAocmVzdWx0WzBdKSB7XG4gICAgcmVzdWx0WzBdLmhlaWdodCA9IGhlaWdodC52YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0Py5bMF07XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gIHJlZnJlc2hfY2hhcnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUnVuIHRoZSBpbml0IGhlcmUgKi9cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBpbml0KCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7IH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRGVmaW5pbmcgdGhlIG5lZWRlZCBpbmZvIGJ5IHRoZSBnZXRfY2hhcnRfb3B0aW9ucyBmdW5jdGlvbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgaGVpZ2h0LnZhbHVlID0gKHByb3BzLm1heF9oZWlnaHQgfHwgNCkgKiBoZWlnaHRfcGVyX3Jvdztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlZnJlc2ggZnVuY3Rpb24gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfY2hhcnQoKSB7XG4gIGlmIChjaGFydC52YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldF9jaGFydF9vcHRpb25zKCk7XG4gICAgY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0X3NlcmllcyhyZXN1bHQuZGF0YSk7XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG4iLCI8IS0tXG4gIChDKSAyMDIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IHJlZj1cImJvZHlfZGl2XCI+XG4gIDxTYW5rZXlcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRcIlxuICAgIDp3aWR0aD1cIndpZHRoXCJcbiAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICA6bm9fZGF0YV9tZXNzYWdlPVwibm9fZGF0YV9tZXNzYWdlXCJcbiAgICA6c2Fua2V5X2RhdGE9XCJzYW5rZXlfZGF0YVwiXG4gICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCI+XG4gIDwvU2Fua2V5PiBcbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5IH0gZnJvbSBcIi4vc2Fua2V5LnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3Qgbm9fZGF0YV9tZXNzYWdlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm5vX2RhdGEnKVxuXG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCBzYW5rZXlfZGF0YSA9IHJlZih7fSk7XG5jb25zdCBib2R5X2RpdiA9IHJlZihudWxsKTtcbmNvbnN0IHdpZHRoID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0ID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0X3Blcl9yb3cgPSA2Mi41IC8qIHB4ICovXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICAgIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICAgIGlmaWQ6IFN0cmluZywgICAgICAgIC8qIEludGVyZmFjZSBJRCAqL1xuICAgIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICAgIG1heF93aWR0aDogTnVtYmVyLCAgIC8qIENvbXBvbmVudCBXaWR0aCAoNCwgOCwgMTIpICovXG4gICAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgICBnZXRfY29tcG9uZW50X2RhdGE6IEZ1bmN0aW9uLCAvKiBDYWxsYmFjayB0byByZXF1ZXN0IGRhdGEgKFJFU1QpICovXG4gICAgZmlsdGVyczogT2JqZWN0XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIHVwZGF0ZV9oZWlnaHQoKTtcbiAgICB1cGRhdGVfd2lkdGgoKTtcblxuICAgIGluaXQoKTtcbn0pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7ICAgIFxuICAgIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gO1xuXG4gICAgY29uc3QgcXVlcnlfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICAgZXBvY2hfYmVnaW46IHByb3BzLmVwb2NoX2JlZ2luLFxuICAgICAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgICAgICBzYW5rZXlfdmVyc2lvbjogMyxcbiAgICAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gICAgfVxuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHF1ZXJ5X3BhcmFtcyk7XG5cbiAgICBsZXQgZ3JhcGggPSBhd2FpdCBwcm9wcy5nZXRfY29tcG9uZW50X2RhdGEodXJsLCB1cmxfcGFyYW1zKTtcblxuICAgIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG5cbiAgICBjb25zdCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCk7XG4gICAgXG4gICAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICAgICAgc2Fua2V5X2NoYXJ0LnZhbHVlLnNldF9ub19kYXRhX2ZsYWcodHJ1ZSk7XG4gIFxuICAgIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuLy8gcmVtb3ZlIGFsbCBsaW5rcyB3aXRoIGEgbm90IGV4aXN0aW5nIG5vZGVcbmZ1bmN0aW9uIG1ha2VfY29tcGxldGVfZ3JhcGgoZ3JhcGgpIHtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3Igbm90IGV4aXN0aW5nIHNvdXJjZS90YXJnZXQgbm9kZWApOyAgICBcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IG5vZGVfZGljdFtuLm5vZGVfaWRdID0gdHJ1ZSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKGwpID0+IG5vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSAhPSBudWxsICYmIG5vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXSAhPSBudWxsOyAgICBcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcblx0bGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG5cdGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuXHRpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcblx0ICAgIGZfbG9nKGUpO1xuXHR9XG5cdHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShyZXMpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge30sIGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIHJlcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIGxldCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRyZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxhYmVsXG4gICAgcmVzLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgIGxpbms6IGxpbmsub3B0aW9uYWxfaW5mby5saW5rLFxuXHRcdG5vZGVfbGlua3M6IFtdLFx0XHRcblx0ICAgIH07XG5cdCAgICBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXSA9IGxpbmtfdG9fbm9kZXM7XG5cdH1cblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLnB1c2goe1xuXHQgICAgc291cmNlOiBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF0sXG5cdCAgICB0YXJnZXQ6IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXSxcblx0ICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuXHR9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3NcbiAgICBsZXQgbm9kZXMgPSByZXMubm9kZXMubWFwKChuKSA9PiBuKSwgbGlua3MgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5rX25vZGVfaWQgaW4gbGlua190b19ub2Rlc19kaWN0KSB7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGxldCBsaW5rX25vZGUgPSB7XG5cdCAgICBub2RlX2lkOiBsaW5rX3RvX25vZGVzLmlkLFxuXHQgICAgbGFiZWw6IGxpbmtfdG9fbm9kZXMubGFiZWwsXG4gICAgICBsaW5rOiBsaW5rX3RvX25vZGVzLmxpbmssXG5cdH07XG5cdG5vZGVzLnB1c2gobGlua19ub2RlKTtcblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rLnNvdXJjZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdHJldHVybiB7IGluZGV4LCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbm9kZV9kaWN0ID0ge307ICAgIFxuICAgIHNhbmtleV9ub2Rlcy5mb3JFYWNoKChzbiwgaW5kZXgpID0+IHNhbmtleV9ub2RlX2RpY3Rbc24uZGF0YS5ub2RlX2lkXSA9IHNuKTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2VfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdLmluZGV4O1xuXHRsZXQgdGFyZ2V0X2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXS5pbmRleDtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlX2luZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsXG5cdCAgICB2YWx1ZTogbC52YWx1ZSxcblx0ICAgIGxhYmVsOiBsLmxhYmVsLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzOiBzYW5rZXlfbm9kZXMsIGxpbmtzOiBzYW5rZXlfbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gICAgaWYgKG5vZGUuaXNfbGlua19ub2RlID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgaWYgKG5vZGUubGluaykgeyBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKG5vZGUubGluayk7IH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlX2hlaWdodCgpIHtcbiAgICBoZWlnaHQudmFsdWUgPSBoZWlnaHRfcGVyX3JvdyAqIHByb3BzLm1heF9oZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV93aWR0aCgpIHtcbiAgICB3aWR0aC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLndpZHRoKCk7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPSdyb3cnPlxuXG4gICAgICAgIDwhLS0gPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIHRvcF90YWJsZV9hcnJheVwiIC0tPlxuICAgICAgICA8IS0tICAgICAgICAgICA6cmVmPVwiZWwgPT4geyB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCI+IC0tPlxuICAgICAgICA8IS0tICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT4gLS0+XG4gICAgICAgIDwhLS0gICAgIDxTcGlubmVyIDpzaG93PVwidC5zaG93X3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMVwiPjwvU3Bpbm5lcj4gLS0+XG4gICAgICAgIDwhLS0gICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+IC0tPlxuICAgICAgICA8IS0tICAgPC90ZW1wbGF0ZT4gLS0+XG4gICAgICAgIDwhLS0gICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+IC0tPlxuICAgICAgICA8IS0tICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIiAtLT5cbiAgICAgICAgPCEtLSAgICAgICAgQGNsaWNrPVwiYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlciBcIiAtLT5cbiAgICAgICAgPCEtLSAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+e3sgb3B0LmxhYmVsIH19PC9hPiAtLT5cbiAgICAgICAgPCEtLSAgIDwvdGVtcGxhdGU+ICAgICAtLT5cbiAgICAgICAgPCEtLSA8L0Ryb3Bkb3duPiAtLT5cblxuICAgICAgICA8RGF0ZVRpbWVSYW5nZVBpY2tlciB2LWlmPVwiZW5hYmxlX2RhdGVfdGltZV9yYW5nZV9waWNrZXJcIiBjbGFzcz1cImRvbnRwcmludFwiXG4gICAgICAgICAgICA6ZGlzYWJsZWRfZGF0ZV9waWNrZXI9XCJkaXNhYmxlX2RhdGVfdGltZV9waWNrZXJcIiBpZD1cImRhc2hib2FyZC1kYXRlLXRpbWUtcGlja2VyXCIgOnJvdW5kX3RpbWU9XCJ0cnVlXCJcbiAgICAgICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkPVwibWluXCIgQGVwb2NoX2NoYW5nZT1cInNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsXCI+XG5cbiAgICAgICAgICAgIDwhLS0gUmVwb3J0IFNlbGVjdG9yIC0tPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlXCIgOm9wdGlvbnM9XCJyZXBvcnRzX3RlbXBsYXRlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInNlbGVjdF9yZXBvcnRfdGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICA8IS0tIFJlcG9ydCBUb29sYm94IChTdG9yZSwgU2F2ZSwgLi4uKSAtLT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X3N0b3JlX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuc3RvcmUnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZsb3BweS1kaXNrXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfb3Blbl9yZXBvcnRfbW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLm9wZW4nKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZvbGRlci1vcGVuXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkX3JlcG9ydFwiIDp0aXRsZT1cIl9pMThuKCdkb3dubG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsZS1hcnJvdy1kb3duXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCd1cGxvYWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbGUtYXJyb3ctdXBcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicHJpbnRfcmVwb3J0XCIgOnRpdGxlPVwiX2kxOG4oJ2Rhc2hib2FyZC5wcmludCcpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXByaW50XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImFsbG93X2VkaXRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19uZXdfdGVtcGxhdGVfbW9kYWxcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLm5ld190ZW1wbGF0ZScpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWZvbGRlci1wbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImFsbG93X2VkaXQgJiYgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLmFsbG93X2VkaXRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiA6Y2xhc3M9XCJlZGl0X21vZGUgPyAndGV4dC13YXJuaW5nJyA6ICcnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInRvZ2dsZV9lZGl0X21vZGVcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLmVkaXRfbW9kZScpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBlbi10by1zcXVhcmVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L0RhdGVUaW1lUmFuZ2VQaWNrZXI+XG5cbiAgICAgICAgPCEtLSBGaWx0ZXJzIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gbXQtMiBidG4tZ3JvdXAtc20gZmxleC13cmFwIGQtZmxleFwiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiZmlsdGVyX2lkIGluIGZpbHRlcnNfdG9fc2hvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZS0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1zLTEgbXktYXV0byBtZS0yIGZpbHRlcnMtbGFiZWxcIj48Yj57eyBfaTE4bignZGJfc2VhcmNoLicgKyBmaWx0ZXJfaWQpIH19PC9iPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9maWx0ZXJzW2ZpbHRlcl9pZF1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJlZF9maWx0ZXJzW2ZpbHRlcl9pZF1cIiA6c3R5bGU9XCInd2lkdGg6IDUwJTsnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwic2VsZWN0X2ZpbHRlcihzZWxlY3RlZF9maWx0ZXJzW2ZpbHRlcl9pZF0sIGZpbHRlcl9pZClcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIk9iamVjdC5rZXlzKGZpbHRlcnNfdG9fc2hvdykubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1zLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0yXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgQGNsaWNrPVwicmVzZXRfZmlsdGVyc1wiPnt7IF9pMThuKCdyZXNldCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSBUZW1wbGF0ZSBFZGl0b3IgVG9vbGJveCAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwiZWRpdF9tb2RlXCIgY2xhc3M9XCJtZS1hdXRvIG10LTIgZmxleC13cmFwIGQtZmxleFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGcgYnRuLWxpbmsgdGV4dC13YXJuaW5nXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfYWRkX3RlbXBsYXRlX2NvbXBvbmVudF9tb2RhbFwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuYWRkX2NvbXBvbmVudCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3F1YXJlLXBsdXNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1saW5rIHRleHQtd2FybmluZ1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X2RlbGV0ZV90ZW1wbGF0ZV9tb2RhbFwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuZGVsX3RlbXBsYXRlJylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaC1jYW5cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxoMiBjbGFzcz1cInRleHQtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXRvcDogMC41cmVtOyBtYXJnaW4tbGVmdDogMXJlbVwiPnt7IF9pMThuKCdkYXNoYm9hcmQuZWRpdF9tb2RlJykgfX08L2gyPlxuICAgICAgICAgICAgPCEtLVxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1hcmdpbjogYXV0b1wiPjwvZGl2PlxuICAgICAgICAgICAgPGg0PjxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctd2FybmluZ1wiPnt7IF9pMThuKCdkYXNoYm9hcmQuZWRpdF9tb2RlJykgfX08L3NwYW4+PC9oND5cbiAgICAgICAgICAgIC0tPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIFJlcG9ydCBUaXRsZSBhbmQgc21hbGwgYnV0dG9ucyAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwiZW5hYmxlX3JlcG9ydF90aXRsZVwiIGNsYXNzPVwibXQtM1wiIHN0eWxlPVwibWFyZ2luLWJvdHRvbTotMC41cmVtOyBkaXNwbGF5OiBpbmxpbmVcIj5cbiAgICAgICAgICAgIDxoMyBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO1wiPnt7IHJlcG9ydF90aXRsZSB9fVxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJlbmFibGVfc21hbGxfcGlja2VyXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZW5hYmxlX3NtYWxsX3BpY2tlcl9hY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZF9yZXBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdkb3dubG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWxlLWFycm93LWRvd25cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3VwbG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWxlLWFycm93LXVwXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInByaW50X3JlcG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLnByaW50JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXByaW50XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIFJlcG9ydC9EYXNoYm9hcmQgQ29udGVudCAtLT5cbiAgICAgICAgPGRpdiByZWY9XCJyZXBvcnRfYm94XCIgaWQ9XCJkcmFnLXpvbmVcIiBjbGFzcz1cInJvd1wiIDprZXk9XCJjb21wb25lbnRzXCI+XG5cbiAgICAgICAgICAgIDwhLS0gV2FybmluZyBNZXNzYWdlIC0tPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwid2FybmluZ19tZXNzYWdlXCIgY2xhc3M9XCJjb2wtc20gbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IHdhcm5pbmdfbWVzc2FnZSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwhLS0gRW1wdHkgdGVtcGxhdGUgbWVzc2FnZSAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImNvbXBvbmVudHNfbG9hZGVkICYmICFjb21wb25lbnRzLmxlbmd0aCAmJiAhZWRpdF9tb2RlXCIgY2xhc3M9XCJjb2wtc20gbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zZWNvbmRhcnkgc20tMSB0ZXh0LWNlbnRlclwiIHN0eWxlPVwid2lkdGg6NDAlOyBtYXJnaW46IGF1dG87IG1hcmdpbi10b3A6IDV2aDsgbWFyZ2luLWJvdHRvbTogNXZoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImFsZXJ0LWhlYWRpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9pMThuKFwiZGFzaGJvYXJkLmVtcHR5X3RlbXBsYXRlXCIpIH19XG4gICAgICAgICAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibWItMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgX2kxOG4oXCJkYXNoYm9hcmQuZW1wdHlfdGVtcGxhdGVfbm90ZVwiKSB9fVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPCEtLSBSZW5kZXJlZCBDb21wb25lbnRzIC0tPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiYyBpbiBjb21wb25lbnRzXCI+XG4gICAgICAgICAgICAgICAgPEJveCBzdHlsZT1cIm1pbi13aWR0aDoyMHJlbTtcIiA6Y29sb3I9XCIoYy5hY3RpdmUgJiYgYy5jb2xvcikgfHwgYy5pbmFjdGl2ZV9jb2xvclwiIDp3aWR0aD1cImMud2lkdGhcIiA6aGVpZ2h0PVwiYy5oZWlnaHRcIiA6aWQ9XCJjLmlkXCIgY2xhc3M9XCJkcmFnLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib3hfdGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJjLmkxOG5fbmFtZVwiIGNsYXNzPVwiZGFzaGJvYXJkLWNvbXBvbmVudC10aXRsZSBtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjLmN1c3RvbV9uYW1lID8gIGMuY3VzdG9tX25hbWUgOiBfaTE4bihjLmkxOG5fbmFtZSkgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJjb2xvcjogZ3JheVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgYy50aW1lX29mZnNldCA/IF9pMThuKCdkYXNoYm9hcmQuJyArIChpc19saXZlID8gJ3RpbWVfYWdvJyA6ICd0aW1lX29mZnNldF9saXN0JykgKyAnLicgKyBjLnRpbWVfb2Zmc2V0KSA6ICcnIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImVkaXRfbW9kZVwiIGNsYXNzPVwibW9kYWwtY2xvc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcyA9J2J0bi1ncm91cCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2UgYnRuLWVkaXQgbWUtMVwiIDpkYXRhLWNvbXBvbmVudC1pZD1cImMuaWRcIiBAY2xpY2s9XCJzaG93X2VkaXRfdGVtcGxhdGVfY29tcG9uZW50XCI+PC9idXR0b24+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiA6ZGF0YS1jb21wb25lbnQtaWQ9XCJjLmlkXCIgQGNsaWNrPVwicmVtb3ZlX3RlbXBsYXRlX2NvbXBvbmVudFwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJveF9jb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmcgJiYgc2hvd19sb2FkaW5nXCIgOnN0eWxlcz1cIidtYXJnaW4tdG9wOiAycmVtICFpbXBvcnRhbnQ7J1wiPjwvTG9hZGluZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwiWyhsb2FkaW5nICYmIHNob3dfbG9hZGluZykgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwiY29tcG9uZW50c19kaWN0W2MuY29tcG9uZW50XVwiIDppZD1cImMuaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJjb21wb25lbnRfY3VzdG9tX3N0eWxlKGMpXCIgOmVwb2NoX2JlZ2luPVwiYy5lcG9jaF9iZWdpblwiIDplcG9jaF9lbmQ9XCJjLmVwb2NoX2VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppMThuX3RpdGxlPVwiYy5pMThuX25hbWVcIiA6aWZpZD1cImMuaWZpZCA/IGMuaWZpZC50b1N0cmluZygpIDogY29udGV4dC5pZmlkLnRvU3RyaW5nKClcIiA6bWF4X3dpZHRoPVwiYy53aWR0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDptYXhfaGVpZ2h0PVwiYy5oZWlnaHRcIiA6cGFyYW1zPVwiYy5wYXJhbXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Z2V0X2NvbXBvbmVudF9kYXRhPVwiZ2V0X2NvbXBvbmVudF9kYXRhX2Z1bmMoYylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c2V0X2NvbXBvbmVudF9hdHRyPVwic2V0X2NvbXBvbmVudF9hdHRyX2Z1bmMoYylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDpmaWx0ZXJzPVwiYy5maWx0ZXJzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib3hfZm9vdGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImMuY29tcG9uZW50ICE9ICdlbXB0eScgJiYgYy5pMThuX25hbWUgJiYgIWRpc2FibGVfZGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJjb2xvcjogbGlnaHRncmF5O2ZvbnQtc2l6ZToxMnB4O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGNvbXBvbmVudF9pbnRlcnZhbChjKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj4gPCEtLSBkaXYgcm93IC0tPlxuXG4gICAgPE1vZGFsU2F2ZSByZWY9XCJtb2RhbF9zdG9yZV9yZXBvcnRcIiA6Z2V0X3N1Z2dlc3RlZF9maWxlX25hbWU9XCJnZXRfc3VnZ2VzdGVkX3JlcG9ydF9uYW1lXCIgOnN0b3JlX2ZpbGU9XCJzdG9yZV9yZXBvcnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuc3RvcmUnKVwiPlxuICAgIDwvTW9kYWxTYXZlPlxuICAgIDxNb2RhbE9wZW4gcmVmPVwibW9kYWxfb3Blbl9yZXBvcnRcIiA6bGlzdF9maWxlcz1cImxpc3RfcmVwb3J0c1wiIDpvcGVuX2ZpbGU9XCJvcGVuX3JlcG9ydFwiIDpkZWxldGVfZmlsZT1cImRlbGV0ZV9yZXBvcnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQub3BlbicpXCIgOmZpbGVfdGl0bGU9XCJfaTE4bigncmVwb3J0LnJlcG9ydF9uYW1lJylcIj5cbiAgICA8L01vZGFsT3Blbj5cbiAgICA8TW9kYWxVcGxvYWQgcmVmPVwibW9kYWxfdXBsb2FkX3JlcG9ydFwiIDp1cGxvYWRfZmlsZT1cInVwbG9hZF9yZXBvcnRcIiA6dGl0bGU9XCJfaTE4bigndXBsb2FkJylcIlxuICAgICAgICA6ZmlsZV90aXRsZT1cIl9pMThuKCdyZXBvcnQuZmlsZScpXCI+XG4gICAgPC9Nb2RhbFVwbG9hZD5cbiAgICA8TW9kYWxTYXZlIHJlZj1cIm1vZGFsX25ld190ZW1wbGF0ZVwiIDpnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZT1cImdldF9zdWdnZXN0ZWRfdGVtcGxhdGVfbmFtZVwiIDpzdG9yZV9maWxlPVwibmV3X3RlbXBsYXRlXCIgOmFsbG93X3NwYWNlcz1cInRydWVcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQubmV3X3RlbXBsYXRlJylcIj5cbiAgICA8L01vZGFsU2F2ZT5cbiAgICA8TW9kYWxTZWxlY3RDb21wb25lbnQgcmVmPVwibW9kYWxfYWRkX3RlbXBsYXRlX2NvbXBvbmVudFwiIDpsaXN0X2NvbXBvbmVudHM9XCJsaXN0X3RlbXBsYXRlX2NvbXBvbmVudHNcIiA6YWRkX2NvbXBvbmVudD1cImFkZF90ZW1wbGF0ZV9jb21wb25lbnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuYWRkX2NvbXBvbmVudCcpXCI+XG4gICAgPC9Nb2RhbFNlbGVjdENvbXBvbmVudD5cbiAgICA8TW9kYWxFZGl0Q29tcG9uZW50IHJlZj1cIm1vZGFsX2VkaXRfdGVtcGxhdGVfY29tcG9uZW50XCIgOmNzcmY9XCJjb250ZXh0LmNzcmZcIiBAZWRpdD1cImVkaXRfdGVtcGxhdGVfY29tcG9uZW50XCI+XG4gICAgPC9Nb2RhbEVkaXRDb21wb25lbnQ+XG4gICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfdGVtcGxhdGVcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLmRlbF90ZW1wbGF0ZScpXCIgOmJvZHk9XCJfaTE4bignZGFzaGJvYXJkLmRlbF90ZW1wbGF0ZV9jb25maXJtJylcIiBAZGVsZXRlPVwiZGVsZXRlX3RlbXBsYXRlXCI+XG4gICAgPC9Nb2RhbERlbGV0ZUNvbmZpcm0+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIG5leHRUaWNrIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19zeW5jIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNhdmUgfSBmcm9tIFwiLi9tb2RhbC1maWxlLXNhdmUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsT3BlbiB9IGZyb20gXCIuL21vZGFsLWZpbGUtb3Blbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxVcGxvYWQgfSBmcm9tIFwiLi9tb2RhbC1maWxlLXVwbG9hZC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTZWxlY3RDb21wb25lbnQgfSBmcm9tIFwiLi9tb2RhbC1zZWxlY3QtY29tcG9uZW50LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXRDb21wb25lbnQgfSBmcm9tIFwiLi9tb2RhbC1lZGl0LWNvbXBvbmVudC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJveCB9IGZyb20gXCIuL2Rhc2hib2FyZC1ib3gudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRW1wdHlDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtZW1wdHkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCYWRnZUNvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC1iYWRnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGllQ29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLXBpZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGltZXNlcmllc0NvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXlDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBkYXRhVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9zd2l0Y2gudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBjb21wb25lbnRzX2RpY3QgPSB7XG4gICAgXCJiYWRnZVwiOiBCYWRnZUNvbXBvbmVudCxcbiAgICBcImVtcHR5XCI6IEVtcHR5Q29tcG9uZW50LFxuICAgIFwicGllXCI6IFBpZUNvbXBvbmVudCxcbiAgICBcInRpbWVzZXJpZXNcIjogVGltZXNlcmllc0NvbXBvbmVudCxcbiAgICBcInRhYmxlXCI6IFRhYmxlQ29tcG9uZW50LFxuICAgIFwic2Fua2V5XCI6IFNhbmtleUNvbXBvbmVudCxcbn1cblxuY29uc3QgbG9hZGluZyA9IHJlZih0cnVlKTtcbmNvbnN0IHBhZ2VfaWQgPSBcInBhZ2UtZGFzaGJvYXJkXCI7XG5jb25zdCBzaG93X2xvYWRpbmcgPSBwcm9wcy5jb250ZXh0LnNob3dfbG9hZGluZyB8fCBmYWxzZTtcbmNvbnN0IGFsbG93X2VkaXQgPSBwcm9wcy5jb250ZXh0LmFsbG93X2VkaXQgfHwgZmFsc2U7XG5jb25zdCByZXBvcnRfYm94ID0gcmVmKG51bGwpO1xuXG5jb25zdCBtb2RhbF9zdG9yZV9yZXBvcnQgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9vcGVuX3JlcG9ydCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3VwbG9hZF9yZXBvcnQgPSByZWYobnVsbCk7XG5cbmNvbnN0IG1vZGFsX2FkZF90ZW1wbGF0ZV9jb21wb25lbnQgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9lZGl0X3RlbXBsYXRlX2NvbXBvbmVudCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV90ZW1wbGF0ZSA9IHJlZihudWxsKVxuXG5jb25zdCBtYWluX2Vwb2NoX2ludGVydmFsID0gcmVmKG51bGwpO1xuXG5jb25zdCBjb21wb25lbnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbXBvbmVudHNfbG9hZGVkID0gcmVmKGZhbHNlKTtcblxuY29uc3Qgc2VsZWN0ZWRfZmlsdGVycyA9IHJlZih7fSk7XG5jb25zdCBhbGxfYXZhaWxhYmxlX2ZpbHRlcnMgPSByZWYoe30pO1xuY29uc3QgZmlsdGVyZWRfZmlsdGVycyA9IHJlZih7fSk7XG5jb25zdCBmaWx0ZXJzX3RvX3Nob3cgPSByZWYoW10pO1xuY29uc3QgbmVzdGVkX2ZpbHRlcnMgPSByZWYoW10pO1xuXG5jb25zdCByZXBvcnRzX3RlbXBsYXRlcyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUgPSByZWYoe30pO1xuXG5jb25zdCB3YXJuaW5nX21lc3NhZ2UgPSByZWYoXCJcIik7XG5cbmxldCBjb21wb25lbnRzX2luZm8gPSB7fTtcbmxldCBkYXRhX2Zyb21fYmFja3VwID0gZmFsc2U7XG5sZXQgcHJpbnRhYmxlID0gZmFsc2U7XG5cbmNvbnN0IGVkaXRfbW9kZSA9IHJlZihmYWxzZSk7XG5sZXQgdGVtcGxhdGVfc29ydGFibGUgPSBudWxsO1xuY29uc3QgbW9kYWxfbmV3X3RlbXBsYXRlID0gcmVmKG51bGwpO1xuXG5jb25zdCBpc19saXZlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5jb250ZXh0LnBhZ2UgIT0gXCJyZXBvcnRcIiAmJiBwcm9wcy5jb250ZXh0LnBhZ2UgIT0gXCJ2cy1yZXBvcnRcIjtcbn0pO1xuXG5jb25zdCBlbmFibGVfZGF0ZV90aW1lX3JhbmdlX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCJcbiAgICAgICAgJiYgIXByaW50YWJsZTtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyX2FjdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHRydWU7IC8vIFNldCB0byBmYWxzZSBmb3IgaGlkaW5nIG9wZW4vc2F2ZSBhY3Rpb25zIGluIHRoZSBzbWFsbCBwaWNrZXJcbn0pO1xuXG5jb25zdCBkaXNhYmxlX2RhdGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZT8udG9vbGJveD8udGltZT8uaGlkZSA9PSB0cnVlO1xufSk7XG5cbmNvbnN0IGRpc2FibGVfZGF0ZV90aW1lX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCA9PSB0cnVlXG4gICAgICAgIHx8IGRpc2FibGVfZGF0ZS52YWx1ZTtcbiAgICByZXR1cm4gZGlzYWJsZWQ7XG59KTtcblxuY29uc3QgZW5hYmxlX3JlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBlbmFibGUgPSBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuaXNfb3Blbl9yZXBvcnQgPT0gdHJ1ZVxuICAgICAgICB8fCBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbiAgICByZXR1cm4gZW5hYmxlO1xufSk7XG5cbmNvbnN0IHJlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBcIlwiO1xuXG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCkge1xuICAgICAgICB0aXRsZSA9IGBSZXBvcnQ6ICR7c2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlfWA7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5jb250ZXh0LnRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gcHJvcHMuY29udGV4dC50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGU7XG59KTtcblxuY29uc3QgY29tcG9uZW50X2N1c3RvbV9zdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gKGMpID0+IHtcbiAgICAgICAgaWYgKGMucGFyYW1zLmN1c3RvbV9zdHlsZSAhPSBudWxsICYmICghcHJpbnRhYmxlIHx8IGMucGFyYW1zLmN1c3RvbV9wcmludF9zdHlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjLnBhcmFtcy5jdXN0b21fc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlICYmIHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH07XG59KTtcblxuY29uc3QgY29tcG9uZW50X2ludGVydmFsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiAoYykgPT4ge1xuICAgICAgICBjb25zdCB0aW1lX2ludGVydmFsX3N0cmluZyA9IGdldF90aW1lX2ludGVydmFsX3N0cmluZyhjLmVwb2NoX2JlZ2luLCBjLmVwb2NoX2VuZCk7XG4gICAgICAgIHJldHVybiB0aW1lX2ludGVydmFsX3N0cmluZztcbiAgICB9O1xufSk7XG5cbi8qIFBhcmFtIHJlcG9ydF90ZW1wbGF0ZSBpcyBvcHRpb25hbCAodXNlcyB1cmwgcmVwb3J0X3RlbXBsYXRlIG9yIHByb3BzLmNvbnRleHQudGVtcGxhdGUgb3RoZXJ3aXNlKSAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0X3RlbXBsYXRlKHJlcG9ydF90ZW1wbGF0ZSkge1xuICAgIGxldCBlcG9jaF9pbnRlcnZhbCA9IG51bGw7XG5cbiAgICBwcmludGFibGUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInByaW50YWJsZVwiKSA9PSBcInRydWVcIjtcblxuICAgIGlmIChwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJyZXBvcnRcIiB8fCBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIikge1xuICAgICAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCIpIHtcbiAgICAgICAgICAgIGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUsIFwibWluXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLmNvbnRleHQucGFnZSA9PSBcInZzLXJlcG9ydFwiKSB7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbCA9IG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlID0gZXBvY2hfaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgYXdhaXQgc2V0X3RlbXBsYXRlc19saXN0KHJlcG9ydF90ZW1wbGF0ZSk7XG5cbiAgICBsZXQgcmVwb3J0X25hbWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInJlcG9ydF9uYW1lXCIpO1xuICAgIGlmIChyZXBvcnRfbmFtZSAhPSBudWxsICYmIHJlcG9ydF9uYW1lICE9IFwiXCIpIHtcbiAgICAgICAgLyogUmVwb3J0IG5hbWUgcHJvdmlkZWQgLSBvcGVuIGEgcmVwb3J0IGJhY2t1cCAqL1xuICAgICAgICBhd2FpdCBvcGVuX3JlcG9ydChyZXBvcnRfbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLyogTG9hZCBhIHRlbXBsYXRlIGFuZCBidWlsZCBhIG5ldyByZXBvcnQgKi9cbiAgICAgICAgYXdhaXQgbG9hZF9jb21wb25lbnRzKGVwb2NoX2ludGVydmFsLCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWUpO1xuICAgIH1cbiAgICBpZiAocHJpbnRhYmxlID09IHRydWUpIHtcbiAgICAgICAgc2V0X3JlcG9ydF90aXRsZSgpO1xuICAgICAgICAvLyBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICAvLyBudG9wbmdfc3luYy5yZWFkeShcInByaW50X3JlcG9ydFwiKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRzX2xvYWRlZC52YWx1ZSA9IHRydWVcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0X3RlbXBsYXRlKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwiZGFzaGJvYXJkXCIpIHtcbiAgICAgICAgc3RhcnRfZGFzaGJvYXJkX3JlZnJlc2hfbG9vcCgpO1xuICAgIH1cbiAgICAvLyBpZiAocHJpbnRhYmxlID09IHRydWUpIHtcbiAgICAvLyAgICAgYXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkoXCJwcmludF9yZXBvcnRcIik7XG4gICAgLy8gfVxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF90ZW1wbGF0ZXNfbGlzdChyZXBvcnRfdGVtcGxhdGUpIHtcbiAgICBjb25zdCB1cmxfcmVxdWVzdCA9IHByb3BzLmNvbnRleHQudGVtcGxhdGVfbGlzdF9lbmRwb2ludDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBpZiAocmVzPy5saXN0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICBsZXQgdGVtcGxhdGVzX2xpc3QgPSByZXMubGlzdC5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2xib3g6IHQudG9vbGJveCxcbiAgICAgICAgICAgIGlzX29wZW5fcmVwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93X2VkaXQ6IHQuYWxsb3dfZWRpdCxcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRlbXBsYXRlc19saXN0LnNvcnQoKGEsIGIpID0+IGEubGFiZWwudG9VcHBlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9VcHBlckNhc2UoKSkpO1xuXG4gICAgcmVwb3J0c190ZW1wbGF0ZXMudmFsdWUgPSB0ZW1wbGF0ZXNfbGlzdDtcblxuICAgIGNvbnN0IHJlcG9ydF90ZW1wbGF0ZV92YWx1ZSA9IHJlcG9ydF90ZW1wbGF0ZSB8fCBcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicmVwb3J0X3RlbXBsYXRlXCIpIHx8IFxuICAgICAgcHJvcHMuY29udGV4dC50ZW1wbGF0ZTtcblxuICAgIHByb3BzLmNvbnRleHQudGVtcGxhdGUgPSByZXBvcnRfdGVtcGxhdGVfdmFsdWU7XG4gICAgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlID0gcmVwb3J0c190ZW1wbGF0ZXMudmFsdWUuZmluZCgodCkgPT4gdC52YWx1ZSA9PSByZXBvcnRfdGVtcGxhdGVfdmFsdWUpO1xuXG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9IHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlWzBdO1xuICAgIH1cblxuICAgIGlmICghc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLmFsbG93X2VkaXQgJiYgZWRpdF9tb2RlLnZhbHVlKSB7XG4gICAgICAgIHRvZ2dsZV9lZGl0X21vZGUoKTtcbiAgICB9XG59XG5cbmxldCBkYXNib2FyZF9sb29wX2ludGVydmFsO1xuXG4vKiBEYXNoYm9hcmQgdXBkYXRlIGludGVydmFsL2ZyZXF1ZW5jeSAqL1xuY29uc3QgbG9vcF9pbnRlcnZhbCA9IDEwICogMTAwMDtcblxuZnVuY3Rpb24gc3RhcnRfZGFzaGJvYXJkX3JlZnJlc2hfbG9vcCgpIHtcbiAgICBkYXNib2FyZF9sb29wX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBzZXRfY29tcG9uZW50c19lcG9jaF9pbnRlcnZhbCgpO1xuICAgIH0sIGxvb3BfaW50ZXJ2YWwpO1xufVxuXG5mdW5jdGlvbiBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpIHtcbiAgICBpZiAoZmlsdGVyX3ZhbHVlKSB7IGZpbHRlcl92YWx1ZSA9IGZpbHRlcl92YWx1ZSArIFwiO2VxXCI7IH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpO1xuICAgIGNvbXBvbmVudHMudmFsdWUuZm9yRWFjaCgoYywgaSkgPT4ge1xuICAgICAgICB1cGRhdGVfY29tcG9uZW50X2ZpbHRlcnMoYywgZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRfY29tcG9uZW50c19lcG9jaF9pbnRlcnZhbChlcG9jaF9pbnRlcnZhbCkge1xuICAgIGlmIChlcG9jaF9pbnRlcnZhbCkge1xuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlID0gZXBvY2hfaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgY29tcG9uZW50cy52YWx1ZS5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICAgIHVwZGF0ZV9jb21wb25lbnRfZXBvY2hfaW50ZXJ2YWwoYywgZXBvY2hfaW50ZXJ2YWwpO1xuICAgIH0pO1xufVxuXG4vKiBUaGlzIGlzIHVzZWQgdG8gcmVzZXQgdGhlIGZpbHRlcnMgcHV0dGluZyBhbGwgb2YgdGhlbSB0byB0aGUgQUxMIHZhbHVlICovXG5mdW5jdGlvbiByZXNldF9maWx0ZXJzKCkge1xuICAgIC8qIEl0ZXJhdGUgYWxsIHRoZSBmaWx0ZXJzIGF2YWlsYWJsZSAqL1xuICAgIGZvciAoY29uc3QgW2ZpbHRlciwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZSkpIHtcbiAgICAgICAgLyogU2V0IGVhY2ggZmlsdGVyIHRvIHRoZSBBTEwgdmFsdWUgKGZpcnN0IHZhbHVlKSAqL1xuICAgICAgICBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyLCB2YWx1ZVswXS52YWx1ZSk7XG4gICAgICAgIHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyXSA9IHZhbHVlWzBdO1xuICAgICAgICAvKiBIaWRlIGFsbCB0aGUgbmVlZGVkIGZpbHRlcnMgKi9cbiAgICAgICAgaGlkZV9uZXN0ZWRfZmlsdGVycyhmaWx0ZXIpO1xuICAgIH1cbn1cblxuLyogVGhpcyBmdW5jdGlvbiBsb2FkcyB0aGUgZmlsdGVycyAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF9maWx0ZXJzKGZpbHRlcnNfYXZhaWxhYmxlLCByZXMpIHtcbiAgICBjb25zdCBhZGRlZF9maWx0ZXJzX2xpc3QgPSBbXTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7cHJvcHMuY29udGV4dC5yZXBvcnRfZmlsdGVyc19lbmRwb2ludH1gKTtcbiAgICB9XG4gICAgZmlsdGVyc19hdmFpbGFibGUuZm9yRWFjaChhc3luYyAoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IGVsZW1lbnQ/Lm5hbWUgfHwgXCJcIjtcbiAgICAgICAgY29uc3QgZmlsdGVyX29wdGlvbnMgPSByZXMuZmluZCgoZWwpID0+IGVsLmlkID09IGlkKT8ub3B0aW9ucztcbiAgICAgICAgLyogQ2hlY2sgdGhlIGZpbHRlcnMgYXZhaWxhYmxlLCBpZiBubyBmaWx0ZXIgb3Igb25seSAxIGZpbHRlciBpcyBwcm92aWRlZCwgaGlkZSB0aGUgZHJvcGRvd24gKi9cbiAgICAgICAgaWYgKGZpbHRlcl9vcHRpb25zICYmIGZpbHRlcl9vcHRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGxldCBhbGxfbGFiZWwgPSBpMThuKCdkYl9zZWFyY2guYWxsLicgKyBpZClcbiAgICAgICAgICAgIGlmIChkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChhbGxfbGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgYWxsX2xhYmVsID0gaTE4bignYWxsJykgKyBcIiBcIiArIGkxOG4oJ2RiX3NlYXJjaC4nICsgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogQWRkIHRoZSAnQWxsJyBmaWx0ZXIgKi9cbiAgICAgICAgICAgIC8qIFRvIGJlIHNhZmUsIGFkZCBhIGRlZmF1bHQgbmFtZSAqL1xuICAgICAgICAgICAgZmlsdGVyX29wdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGFsbF9sYWJlbFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZVtpZF0gPSBmaWx0ZXJfb3B0aW9ucztcbiAgICAgICAgICAgIHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbaWRdID0gZmlsdGVyX29wdGlvbnNbMF07XG4gICAgICAgICAgICBmaWx0ZXJlZF9maWx0ZXJzLnZhbHVlW2lkXSA9IGZpbHRlcl9vcHRpb25zXG4gICAgICAgICAgICBhZGRlZF9maWx0ZXJzX2xpc3QucHVzaChpZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5lc3RlZCA9IGVsZW1lbnQ/Lm5lc3RlZCB8fCBbXTtcbiAgICAgICAgICAgIGlmIChuZXN0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG5lc3RlZF9maWx0ZXJzLnZhbHVlW2lkXSA9IGF3YWl0IGxvYWRfZmlsdGVycyhuZXN0ZWQsIHJlcyAvKiBTa2lwIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kICovKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogTm93IGNoZWNrIHRoZSBuZXN0ZWQgZmlsdGVycywgdGhleSBhcHBlYXIgT05MWSBcbiAgICAgICAgICAgICogaWYgdGhlIGZpbHRlciBzZWxlY3RlZCBpcyBub3QgQUxMIChmaXJzdCBlbnRyeSkgXG4gICAgICAgICAgICAqL1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFkZGVkX2ZpbHRlcnNfbGlzdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9jb21wb25lbnRzKGVwb2NoX2ludGVydmFsLCB0ZW1wbGF0ZV9uYW1lKSB7XG4gICAgLyogRW5hYmxlIFJFU1QgY2FsbHMgKi9cbiAgICBkYXRhX2Zyb21fYmFja3VwID0gZmFsc2U7XG5cbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2VuZHBvaW50fT90ZW1wbGF0ZT0ke3RlbXBsYXRlX25hbWV9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBjb21wb25lbnRzLnZhbHVlID0gcmVzLmxpc3QuZmlsdGVyKChjKSA9PiBjb21wb25lbnRzX2RpY3RbYy5jb21wb25lbnRdICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGMsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgY19leHQgPSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyczoge30sXG4gICAgICAgICAgICAgICAgLi4uY1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHVwZGF0ZV9jb21wb25lbnRfZXBvY2hfaW50ZXJ2YWwoY19leHQsIGVwb2NoX2ludGVydmFsKTtcbiAgICAgICAgICAgIHJldHVybiBjX2V4dDtcbiAgICAgICAgfSk7XG4gICAgcmVzZXRfZmlsdGVycygpO1xuICAgIGZpbHRlcnNfdG9fc2hvdy52YWx1ZSA9IGF3YWl0IGxvYWRfZmlsdGVycyhyZXMuZmlsdGVycyk7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbChjLCBlcG9jaF9pbnRlcnZhbCkge1xuICAgIGNvbnN0IGludGVydmFsX3NlY29uZHMgPSB0aW1lZnJhbWVzX2RpY3RbYy50aW1lX3dpbmRvdyB8fCBcIjVfbWluXCJdO1xuICAgIGlmIChlcG9jaF9pbnRlcnZhbCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGVwb2NoX2VuZCA9IG50b3BuZ191dGlsaXR5LmdldF91dGNfc2Vjb25kcygpO1xuICAgICAgICBlcG9jaF9pbnRlcnZhbCA9IHsgZXBvY2hfYmVnaW46IGVwb2NoX2VuZCAtIGludGVydmFsX3NlY29uZHMsIGVwb2NoX2VuZDogZXBvY2hfZW5kIH07XG4gICAgfVxuICAgIGNvbnN0IHV0Y19vZmZzZXQgPSB0aW1lZnJhbWVzX2RpY3RbYy50aW1lX29mZnNldF0gfHwgMDtcbiAgICBjLmVwb2NoX2JlZ2luID0gZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4gLSB1dGNfb2Zmc2V0O1xuICAgIGMuZXBvY2hfZW5kID0gZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kIC0gdXRjX29mZnNldDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NvbXBvbmVudF9maWx0ZXJzKGMsIGZpbHRlcl9pZCwgZmlsdGVyX3ZhbHVlKSB7XG4gICAgYy5maWx0ZXJzW2ZpbHRlcl9pZF0gPSBmaWx0ZXJfdmFsdWU7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGhpZGVzIHRoZSBuZXN0ZWQgZmlsdGVycyAodGhlIG9uZXMgdG8gbm90IHNob3cpICovXG5mdW5jdGlvbiBoaWRlX25lc3RlZF9maWx0ZXJzKGZpbHRlcikge1xuICAgIGNvbnN0IHRvX2hpZGVfZmlsdGVycyA9IG5lc3RlZF9maWx0ZXJzLnZhbHVlW2ZpbHRlcl07XG4gICAgdG9faGlkZV9maWx0ZXJzPy5mb3JFYWNoKChmaWx0ZXJfdG9fcmVtb3ZlKSA9PiB7XG4gICAgICAgIC8qIEZvciBlYWNoIGZpbHRlciBjaGVjayBpZiBjdXJyZW50bHkgaXQncyBkaXNwbGF5ZWQgKi9cbiAgICAgICAgaWYgKGZpbHRlcnNfdG9fc2hvdy52YWx1ZS5pbmNsdWRlcyhmaWx0ZXJfdG9fcmVtb3ZlKSkge1xuICAgICAgICAgICAgLyogSWYgaXQncyBkaXNwbGF5ZWQsIHRoZW4gcmVtb3ZlIGl0ICovXG4gICAgICAgICAgICBmaWx0ZXJzX3RvX3Nob3cudmFsdWUgPSBmaWx0ZXJzX3RvX3Nob3cudmFsdWUuZmlsdGVyKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgIT0gZmlsdGVyX3RvX3JlbW92ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLyogUmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0IG9uZSAqL1xuICAgICAgICAgICAgY29uc3QgYWxsX3ZhbHVlID0gYWxsX2F2YWlsYWJsZV9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19yZW1vdmVdWzBdO1xuICAgICAgICAgICAgc2VsZWN0ZWRfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fcmVtb3ZlXSA9IGFsbF92YWx1ZTtcbiAgICAgICAgICAgIHNldF9jb21wb25lbnRzX2ZpbHRlcihmaWx0ZXJfdG9fcmVtb3ZlLCBhbGxfdmFsdWUudmFsdWUpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBzaG93cyB0aGUgZmlsdGVycyB3aGVuIGNsaWNraW5nIG9uIGEgZmlsdGVyIGhhdmluZyBhIG5lc3RlZCBvcHRpb24gKi9cbmZ1bmN0aW9uIHNob3dfbmVzdGVkX2ZpbHRlcnMoZmlsdGVyX3RvX2NoZWNrLCBjdXJyZW50bHlfc2VsZWN0ZWRfZmlsdGVyKSB7XG4gICAgLyogR2V0cyB0aGUgbmVzdGVkIGZpbHRlcnMgb2YgdGhlIGZpbHRlciB0byBjaGVjayAqL1xuICAgIGNvbnN0IHNob3dfZmlsdGVycyA9IG5lc3RlZF9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19jaGVja107XG4gICAgc2hvd19maWx0ZXJzPy5mb3JFYWNoKChmaWx0ZXJfdG9fYWRkKSA9PiB7XG4gICAgICAgIC8qIEdldCBhbGwgdGhlIGF2YWlsYWJsZSBvcHRpb25zIGZvciB0aGUgbmVzdGVkIG9wdGlvbiAqL1xuICAgICAgICBjb25zdCBhbGxfZmlsdGVycyA9IGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fYWRkXTtcbiAgICAgICAgY29uc3QgZmlsdGVyc190b19lbmFibGUgPSBbXTtcblxuICAgICAgICAvKiBDaGVjayBpZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGZpbHRlciBpcyB0aGUgZmlsdGVyIHRvIGNoZWNrIGZvciB0aGUgbmVzdGVkIGZpbHRlcnMgKi9cbiAgICAgICAgaWYgKGN1cnJlbnRseV9zZWxlY3RlZF9maWx0ZXIgPT0gZmlsdGVyX3RvX2NoZWNrKSB7XG4gICAgICAgICAgICAvKiBJZiBpdCBpcywgcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0IG9uZXMgKi9cbiAgICAgICAgICAgIGNvbnN0IGFsbF92YWx1ZSA9IGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fYWRkXVswXTtcbiAgICAgICAgICAgIHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyX3RvX2FkZF0gPSBhbGxfdmFsdWU7XG4gICAgICAgICAgICBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyX3RvX2FkZCwgYWxsX3ZhbHVlLnZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgLyogRmlsdGVyIG91dCB0aGUgdmFsdWVzIG9mIHRoZSBuZXN0ZWQgZmlsdGVyIHRoYXQgaGF2ZSB0byBiZSBoaWRlICovXG4gICAgICAgIGFsbF9maWx0ZXJzPy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5zaG93X29ubHlfdmFsdWUgPT09IHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyX3RvX2NoZWNrXS52YWx1ZSB8fCBlbGVtZW50LnZhbHVlID09IG51bGwpXG4gICAgICAgICAgICAgICAgZmlsdGVyc190b19lbmFibGUucHVzaChlbGVtZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyogQWRkIHRoZSByZW1haW5pbmcgdmFsdWVzIHRvIHRoZSBhcnJheSB0aGF0IHNob3dzIHRoZSBmaWx0ZXJzICovXG4gICAgICAgIGlmICghZmlsdGVyc190b19zaG93LnZhbHVlLmluY2x1ZGVzKGZpbHRlcl90b19hZGQpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleF90b19wdXNoID0gZmlsdGVyc190b19zaG93LnZhbHVlLmluZGV4T2YoZmlsdGVyX3RvX2NoZWNrKTtcbiAgICAgICAgICAgIGZpbHRlcnNfdG9fc2hvdy52YWx1ZS5zcGxpY2UoaW5kZXhfdG9fcHVzaCArIDEsIDAsIGZpbHRlcl90b19hZGQpO1xuICAgICAgICB9XG4gICAgICAgIGZpbHRlcnNfdG9fZW5hYmxlLmxlbmd0aCA+IDAgP1xuICAgICAgICAgICAgZmlsdGVyZWRfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fYWRkXSA9IGZpbHRlcnNfdG9fZW5hYmxlIDpcbiAgICAgICAgICAgIGRlbGV0ZSBmaWx0ZXJlZF9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19hZGRdXG4gICAgfSlcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIGEgZmlsdGVyIGlzIGNsaWNrZWQgKi9cbmZ1bmN0aW9uIHNlbGVjdF9maWx0ZXIob3B0aW9uLCBmaWx0ZXJfaWQpIHtcbiAgICAvKiBTZXQgdGhlIGZpbHRlciwgcmVhZHkgZm9yIHRoZSByZXN0ICovXG4gICAgc2V0X2NvbXBvbmVudHNfZmlsdGVyKGZpbHRlcl9pZCwgb3B0aW9uLnZhbHVlKTtcbiAgICBmb3IgKGNvbnN0IFtmaWx0ZXIsIF9dIG9mIE9iamVjdC5lbnRyaWVzKGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZSkpIHtcbiAgICAgICAgLyogSXRlcmF0ZSBhbGwgdGhlIGF2YWlsYWJsZSBmaWx0ZXJzIGFuZCBoaWRlIHRoZSBvbmVzIHRvIGhpZGVcbiAgICAgICAgKiBhbmQgc2hvdyB0aGUgb25lcyB0byBzaG93XG4gICAgICAgICovXG4gICAgICAgIGNvbnN0IGZpbHRlcl90b19jaGVjayA9IHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyXTtcbiAgICAgICAgZmlsdGVyX3RvX2NoZWNrPy52YWx1ZSA/IHNob3dfbmVzdGVkX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaWQpIDogaGlkZV9uZXN0ZWRfZmlsdGVycyhmaWx0ZXIpO1xuICAgIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHNlbGVjdF9yZXBvcnRfdGVtcGxhdGUoKSB7XG4gICAgaWYgKCFzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuYWxsb3dfZWRpdCAmJiBlZGl0X21vZGUudmFsdWUpIHtcbiAgICAgICAgdG9nZ2xlX2VkaXRfbW9kZSgpO1xuICAgIH1cblxuICAgIGlmIChwcmludGFibGUgPT0gdHJ1ZSkge1xuICAgICAgICBzZXRfcmVwb3J0X3RpdGxlKCk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuaXNfb3Blbl9yZXBvcnQgPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBvbmVudHNfaW5mbyA9IHt9O1xuICAgIHVwZGF0ZV90ZW1wbGF0ZXNfbGlzdCgpO1xuICAgIGNvbnN0IGdsb2JhbF9zdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cyh0cnVlKTtcbiAgICBsZXQgZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBnbG9iYWxfc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGdsb2JhbF9zdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgaWYgKGRhdGFfZnJvbV9iYWNrdXAgPT0gdHJ1ZSkgeyAvLyBsYXN0IHJlcG9ydCBzZWxlY3RlZCBpdCB3YXMgYSBzYXZlZCByZXBvcnQgYW5kIHRoZW4gd2UgbXVzdCB0byByZXN0b3JlIGRlZmF1bHQgdGltZXN0YW1wXG4gICAgICAgIGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCh1bmRlZmluZWQsIFwibWluXCIpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgZXBvY2hfaW50ZXJ2YWwsIHByb3BzLmNvbnRleHQucGFnZSk7XG4gICAgfVxuICAgIGxvYWRfY29tcG9uZW50cyhlcG9jaF9pbnRlcnZhbCwgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc2hvd19zdG9yZV9yZXBvcnRfbW9kYWwoKSB7XG4gICAgbW9kYWxfc3RvcmVfcmVwb3J0LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19vcGVuX3JlcG9ydF9tb2RhbCgpIHtcbiAgICBtb2RhbF9vcGVuX3JlcG9ydC52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbCgpIHtcbiAgICBtb2RhbF91cGxvYWRfcmVwb3J0LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3N1Z2dlc3RlZF9yZXBvcnRfbmFtZSgpIHtcbiAgICBsZXQgbmFtZSA9IFwicmVwb3J0XCI7XG4gICAgaWYgKHByb3BzLmNvbnRleHQucGFnZSA9PSBcInZzLXJlcG9ydFwiKSB7XG4gICAgICAgIG5hbWUgPSBwcm9wcy5jb250ZXh0LnRpdGxlO1xuICAgIH0gZWxzZSBpZiAobWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZSAmJlxuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlLmVwb2NoX2VuZCkge1xuICAgICAgICBuYW1lICs9IFwiLVwiICsgbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kICogMTAwMCwgJ0RELU1NLVlZWVknKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG5cbmNvbnN0IHVwbG9hZF9yZXBvcnQgPSBhc3luYyAoY29udGVudF9zdHJpbmcpID0+IHtcbiAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoY29udGVudF9zdHJpbmcpO1xuICAgIHNldF9yZXBvcnQoY29udGVudCwgY29udGVudC5uYW1lKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX2tleV9mcm9tX3VybChcInJlcG9ydF9uYW1lXCIpO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVwb3J0KGNvbnRlbnQsIG5hbWUpIHtcbiAgICB1cGRhdGVfdGVtcGxhdGVzX2xpc3QobmFtZSk7XG4gICAgY29uc3QgZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogY29udGVudC5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBjb250ZW50LmVwb2NoX2VuZCB9O1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBlcG9jaF9zdGF0dXMsIHByb3BzLmNvbnRleHQucGFnZSk7XG4gICAgbG9hZF9yZXBvcnQoY29udGVudCk7XG59XG5cbmNvbnN0IGxpc3RfcmVwb3J0cyA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC5yZXBvcnRfbGlzdF9lbmRwb2ludH0/aWZpZD0ke3Byb3BzLmNvbnRleHQuaWZpZH1gO1xuICAgIGxldCBmaWxlc19vYmogPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBsZXQgZmlsZXMgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoZmlsZXNfb2JqKTtcblxuICAgIC8qIFJldHVybiBhcnJheSBvZiBbeyBuYW1lOiBTdHJpbmcsIGVwb2NoOiBOdW1iZXIgfSwgLi4uXSAqL1xuXG4gICAgcmV0dXJuIGZpbGVzO1xufVxuXG5jb25zdCBsb2FkX3JlcG9ydCA9IGFzeW5jIChjb250ZW50KSA9PiB7XG4gICAgbGV0IHRtcF9lcG9jaF9pbnRlcnZhbCA9IHtcbiAgICAgICAgZXBvY2hfYmVnaW46IGNvbnRlbnQuZXBvY2hfYmVnaW4sXG4gICAgICAgIGVwb2NoX2VuZDogY29udGVudC5lcG9jaF9lbmRcbiAgICB9O1xuICAgIGxldCB0bXBfdGVtcGxhdGUgPSBjb250ZW50LnRlbXBsYXRlO1xuICAgIGxldCB0bXBfY29tcG9uZW50c19kYXRhID0gY29udGVudC5kYXRhO1xuXG4gICAgbGV0IHRtcF9jb21wb25lbnRzX2luZm8gPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4gdG1wX2NvbXBvbmVudHNfZGF0YSkge1xuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIGRhdGE6IHRtcF9jb21wb25lbnRzX2RhdGFba2V5XSxcbiAgICAgICAgfTtcbiAgICAgICAgdG1wX2NvbXBvbmVudHNfaW5mb1trZXldID0gaW5mbztcbiAgICB9XG5cbiAgICAvKiBEaXNhYmxlIFJFU1QgY2FsbHMgKi9cbiAgICBkYXRhX2Zyb21fYmFja3VwID0gdHJ1ZTtcblxuICAgIC8qIFNldCB0aGUgY2FjaGVkIGRhdGEgZnJvbSB0aGUgYmFja3VwICovXG4gICAgY29tcG9uZW50c19pbmZvID0gdG1wX2NvbXBvbmVudHNfaW5mbztcblxuICAgIC8qIENoYW5nZSB0aGUgY29tcG9uZW50cyAodGVtcGxhdGUpIGZyb20gdGhlIGJhY2t1cCAqL1xuICAgIGNvbXBvbmVudHMudmFsdWUgPSB0bXBfdGVtcGxhdGU7XG5cbiAgICAvKiBDaGFuZ2UgdGhlIHRpbWUgaW50ZXJ2YWwgb24gY29tcG9uZW50cyAqL1xuICAgIHNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsKHRtcF9lcG9jaF9pbnRlcnZhbCk7XG59XG5cbmNvbnN0IG9wZW5fcmVwb3J0ID0gYXN5bmMgKGZpbGVfbmFtZSkgPT4ge1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9vcGVuX2VuZHBvaW50fT9pZmlkPSR7cHJvcHMuY29udGV4dC5pZmlkfSZyZXBvcnRfbmFtZT0ke2ZpbGVfbmFtZX1gO1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgc2V0X3JlcG9ydChjb250ZW50LCBmaWxlX25hbWUpO1xuICAgICAgICB3YXJuaW5nX21lc3NhZ2UudmFsdWUgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IF9pMThuKFwicmVwb3J0LnVuYWJsZV90b19vcGVuXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlX3RlbXBsYXRlc19saXN0KHJlcG9ydF9uYW1lX3RvX29wZW4pIHtcbiAgICByZXBvcnRzX3RlbXBsYXRlcy52YWx1ZSA9IHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlLmZpbHRlcigodCkgPT4gdC5pc19vcGVuX3JlcG9ydCA9PSBmYWxzZSk7XG4gICAgaWYgKHJlcG9ydF9uYW1lX3RvX29wZW4gPT0gbnVsbCkgeyAvLyBpbiB0aGlzIGNhc2UgaXMgc2VsZWN0ZWQgYSByZXBvcnRfdGVtcGxhdGVcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicmVwb3J0X3RlbXBsYXRlXCIsIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSk7XG4gICAgICAgIHByb3BzLmNvbnRleHQudGVtcGxhdGUgPSBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWU7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfa2V5X2Zyb21fdXJsKFwicmVwb3J0X25hbWVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdF9lbnRyeSA9IHtcbiAgICAgICAgdmFsdWU6IHJlcG9ydF9uYW1lX3RvX29wZW4sXG4gICAgICAgIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC5jdXN0b21cIiksXG4gICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgdG9vbGJveDogbnVsbCxcbiAgICAgICAgaXNfb3Blbl9yZXBvcnQ6IHRydWUsXG4gICAgICAgIGFsbG93X2VkaXQ6IGZhbHNlXG4gICAgfTtcbiAgICByZXBvcnRzX3RlbXBsYXRlcy52YWx1ZS5wdXNoKHRfZW50cnkpO1xuICAgIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9IHRfZW50cnk7XG4gICAgcHJvcHMuY29udGV4dC50ZW1wbGF0ZSA9IHJlcG9ydF9uYW1lX3RvX29wZW47XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicmVwb3J0X25hbWVcIiwgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX2tleV9mcm9tX3VybChcInJlcG9ydF90ZW1wbGF0ZVwiKTtcbn1cblxuY29uc3QgZGVsZXRlX3JlcG9ydCA9IGFzeW5jIChmaWxlX25hbWUpID0+IHtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgICAgIHJlcG9ydF9uYW1lOiBmaWxlX25hbWVcbiAgICB9O1xuXG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQucmVwb3J0X2RlbGV0ZV9lbmRwb2ludH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzO1xufVxuXG4vKiBEdW1wIHJlcG9ydCBjb250ZW50IC0ga2VlcCBpbiBzeW5jIHdpdGggZGFzaGJvYXJkX3V0aWxzLmJ1aWxkX3JlcG9ydCAobHVhKSAqL1xuY29uc3Qgc2VyaWFsaXplX3JlcG9ydCA9IGFzeW5jIChuYW1lKSA9PiB7XG5cbiAgICBsZXQgY29tcG9uZW50c19kYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGNvbXBvbmVudHNfaW5mbykge1xuICAgICAgICBjb21wb25lbnRzX2RhdGFba2V5XSA9IGF3YWl0IGNvbXBvbmVudHNfaW5mb1trZXldLmRhdGE7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB7XG4gICAgICAgIHZlcnNpb246IFwiMS4wXCIsIC8vIFJlcG9ydCBkdW1wIHZlcnNpb25cbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgdGVtcGxhdGU6IGNvbXBvbmVudHMudmFsdWUsXG4gICAgICAgIGRhdGE6IGNvbXBvbmVudHNfZGF0YVxuICAgIH07XG5cbiAgICBpZiAobWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZSAmJlxuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlLmVwb2NoX2JlZ2luICYmXG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kKSB7XG4gICAgICAgIGNvbnRlbnQuZXBvY2hfYmVnaW4gPSBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlLmVwb2NoX2JlZ2luO1xuICAgICAgICBjb250ZW50LmVwb2NoX2VuZCA9IG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb250ZW50KTtcbn1cblxuY29uc3Qgc3RvcmVfcmVwb3J0ID0gYXN5bmMgKGZpbGVfbmFtZSkgPT4ge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgICAgIHJlcG9ydF9uYW1lOiBmaWxlX25hbWUsXG4gICAgICAgIGNvbnRlbnQ6IGF3YWl0IHNlcmlhbGl6ZV9yZXBvcnQoZmlsZV9uYW1lKVxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC5yZXBvcnRfc3RvcmVfZW5kcG9pbnR9YDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSk7XG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkX3JlcG9ydCgpIHtcbiAgICB2YXIgbmFtZSA9IGdldF9zdWdnZXN0ZWRfcmVwb3J0X25hbWUoKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBuYW1lICsgJy5qc29uJztcbiAgICB2YXIgY29udGVudCA9IGF3YWl0IHNlcmlhbGl6ZV9yZXBvcnQobmFtZSk7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuY2xpY2soKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBwcmludF9yZXBvcnQoKSB7XG4gICAgaWYgKHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgIHdpbmRvdy5wcmludCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHVybF9wYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgdXJsX3BhcmFtc19vYmoucHJpbnRhYmxlID0gdHJ1ZTtcbiAgICBjb25zdCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtc19vYmopO1xuXG4gICAgbGV0IHVybCA9IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59JHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9PyR7cGFyYW1zfWA7XG5cbiAgICAvL2NvbnN0IHByaW50X2tleSA9IFwicHJpbnRhYmxlXCI7XG4gICAgLy9udG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwocHJpbnRfa2V5LCB0cnVlKTtcblxuICAgIG50b3BuZ191cmxfbWFuYWdlci5vcGVuX25ld193aW5kb3codXJsKTtcblxuICAgIC8vbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9rZXlfZnJvbV91cmwocHJpbnRfa2V5KTtcbiAgICAvLyAkKHJlcG9ydF9ib3gudmFsdWUpLnByaW50KHttZWRpYVByaW50OiB0cnVlLCB0aW1lb3V0OiAxMDAwfSk7IFxuICAgIC8vICQocmVwb3J0X2JveC52YWx1ZSkucHJpbnQoKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVfaW50ZXJ2YWxfc3RyaW5nKGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQpIHtcbiAgICBpZiAoZGlzYWJsZV9kYXRlLnZhbHVlID09IHRydWUpIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgIGNvbnN0IGVwb2NoX2JlZ2luX21zZWMgPSBlcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgY29uc3QgZXBvY2hfZW5kX21zZWMgPSBlcG9jaF9lbmQgKiAxMDAwO1xuXG4gICAgY29uc3QgYmVnaW5fZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9iZWdpbl9tc2VjLCAnREQvTU0vWVlZWScpO1xuICAgIGNvbnN0IGJlZ2luX3RpbWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZXBvY2hfYmVnaW5fbXNlYywgJ0hIOm1tOnNzJyk7XG5cbiAgICBjb25zdCBlbmRfZGF0ZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9lbmRfbXNlYywgJ0REL01NL1lZWVknKTtcbiAgICBjb25zdCBlbmRfdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9lbmRfbXNlYywgJ0hIOm1tOnNzJyk7XG5cbiAgICBjb25zdCBiZWdpbiA9IGAke2JlZ2luX2RhdGV9ICR7YmVnaW5fdGltZX1gO1xuICAgIGNvbnN0IGVuZCA9IChiZWdpbl9kYXRlID09IGVuZF9kYXRlKSA/IGAke2VuZF90aW1lfWAgOiBgJHtlbmRfZGF0ZX0gJHtlbmRfdGltZX1gO1xuICAgIHJldHVybiBgJHtiZWdpbn0gLSAke2VuZH1gO1xufVxuXG5mdW5jdGlvbiBzZXRfcmVwb3J0X3RpdGxlKCkge1xuICAgIGNvbnN0IGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXModHJ1ZSk7XG4gICAgY29uc3QgdGltZV9pbnRlcnZhbF9zdHJpbmcgPSBnZXRfdGltZV9pbnRlcnZhbF9zdHJpbmcoZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sIGVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCk7XG4gICAgbGV0IHRpdGxlID0gYG50b3BuZyAtIFJlcG9ydCAke3NlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5sYWJlbH0gJHt0aW1lX2ludGVydmFsX3N0cmluZ31gO1xuICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XG59XG5cbi8qIENhbGxiYWNrIHRvIHJlcXVlc3QgUkVTVCBkYXRhIGZyb20gY29tcG9uZW50cyAqL1xuZnVuY3Rpb24gZ2V0X2NvbXBvbmVudF9kYXRhX2Z1bmMoY29tcG9uZW50KSB7XG4gICAgY29uc3QgZ2V0X2NvbXBvbmVudF9kYXRhID0gYXN5bmMgKHVybCwgdXJsX3BhcmFtcywgcG9zdF9wYXJhbXMpID0+IHtcbiAgICAgICAgbGV0IGluZm8gPSB7fTtcbiAgICAgICAgaWYgKGRhdGFfZnJvbV9iYWNrdXApIHtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5pZF0pIHsgLyogU2FmZXR5IGNoZWNrICovXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIGRhdGEgZm9yIFwiICsgY29tcG9uZW50LmlkKTtcbiAgICAgICAgICAgICAgICBpbmZvLmRhdGEgPSB7fTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mbyA9IGNvbXBvbmVudHNfaW5mb1tjb21wb25lbnQuaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvKiBDaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgcHJvbWlzZSBmb3IgdGhlIHNhbWUgcmVxdWVzdCAqL1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudHNfaW5mb1tjb21wb25lbnQuaWRdKSB7XG4gICAgICAgICAgICAgICAgaW5mbyA9IGNvbXBvbmVudHNfaW5mb1tjb21wb25lbnQuaWRdO1xuICAgICAgICAgICAgICAgIGlmIChpbmZvLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgaW5mby5kYXRhOyAvKiB3YWl0IGluIGNhc2Ugb2YgcHJldmlvdXMgcGVuZGluZyByZXF1ZXN0cyAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGF0YV91cmwgPSBgJHt1cmx9PyR7dXJsX3BhcmFtc31gO1xuXG4gICAgICAgICAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChwb3N0X3BhcmFtcykge1xuICAgICAgICAgICAgICAgIGluZm8uZGF0YSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KGRhdGFfdXJsLCBwb3N0X3BhcmFtcylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5kYXRhID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGRhdGFfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZm8uZGF0YS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5pZF0gPSBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmZvLmRhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0X2NvbXBvbmVudF9kYXRhXG59XG5cbi8qIENhbGxiYWNrIHRvIHJlcXVlc3QgUkVTVCBkYXRhIGZyb20gY29tcG9uZW50cyAqL1xuZnVuY3Rpb24gc2V0X2NvbXBvbmVudF9hdHRyX2Z1bmMoY29tcG9uZW50KSB7XG4gICAgY29uc3Qgc2V0X2NvbXBvbmVudF9hdHRyID0gYXN5bmMgKGF0dHIsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbXBvbmVudFthdHRyXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gc2V0X2NvbXBvbmVudF9hdHRyO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qICoqKioqKioqKioqKioqIFRlbXBsYXRlIEVkaXRvciAqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzaG93X25ld190ZW1wbGF0ZV9tb2RhbCgpIHtcbiAgICBtb2RhbF9uZXdfdGVtcGxhdGUudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBnZXRfc3VnZ2VzdGVkX3RlbXBsYXRlX25hbWUoKSB7XG4gICAgbGV0IG5hbWUgPSBcIk5ldyBUZW1wbGF0ZVwiO1xuICAgIHJldHVybiBuYW1lO1xufVxuXG5jb25zdCBuZXdfdGVtcGxhdGUgPSBhc3luYyAodGVtcGxhdGVfbmFtZSkgPT4ge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICB0ZW1wbGF0ZV9uYW1lOiB0ZW1wbGF0ZV9uYW1lLFxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC50ZW1wbGF0ZV9hZGRfZW5kcG9pbnR9YDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pO1xuXG4gICAgICAgIGlmIChyZXMgJiYgcmVzLnRlbXBsYXRlX2lkKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXRfdGVtcGxhdGUocmVzLnRlbXBsYXRlX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbW1pdF90ZW1wbGF0ZV9jaGFuZ2UoZSkge1xuXG4gICAgbGV0IGNvbXBvbmVudHNfaWRzID0gY29tcG9uZW50cy52YWx1ZS5tYXAoKGMpID0+IHsgcmV0dXJuIGMuaWQ7IH0pO1xuXG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICAgICAgdGVtcGxhdGU6IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSxcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50c19pZHMudG9TdHJpbmcoKVxuICAgIH07XG5cbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2VkaXRfZW5kcG9pbnR9YDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pO1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjb21wb25lbnRfZHJhZ2dlZChlKSB7XG5cbiAgICAvKiBjb25zb2xlLmxvZyh0ZW1wbGF0ZV9zb3J0YWJsZS50b0FycmF5KCkudG9TdHJpbmcoKSk7ICovXG5cbiAgICBsZXQgbmV3X2NvbXBvbmVudHMgPSB0ZW1wbGF0ZV9zb3J0YWJsZS50b0FycmF5KCkubWFwKChpZCkgPT4ge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50cy52YWx1ZS5maW5kKChjKSA9PiBjLmlkID09IGlkKTtcbiAgICB9KTtcblxuICAgIHVuc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG5cbiAgICBjb21wb25lbnRzLnZhbHVlID0gbmV3X2NvbXBvbmVudHM7XG5cbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIHNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuXG4gICAgY29tbWl0X3RlbXBsYXRlX2NoYW5nZSgpO1xufVxuXG5mdW5jdGlvbiBzZXRfc29ydGFibGVfdGVtcGxhdGUoKSB7XG4gICAgaWYgKHRlbXBsYXRlX3NvcnRhYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ196b25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYWctem9uZScpO1xuICAgIHRlbXBsYXRlX3NvcnRhYmxlID0gd2luZG93LlNvcnRhYmxlLmNyZWF0ZShkcmFnX3pvbmUsIHtcbiAgICAgICAgZHJhZ2dhYmxlOiBcIi5kcmFnLWl0ZW1cIixcbiAgICAgICAgZGF0YUlkQXR0cjogXCJpZFwiLFxuICAgICAgICBvblVwZGF0ZTogY29tcG9uZW50X2RyYWdnZWRcbiAgICB9KTtcblxuICAgIC8vY29uc29sZS5sb2coXCJTb3J0YWJsZSBPTlwiKTtcbn1cblxuZnVuY3Rpb24gdW5zZXRfc29ydGFibGVfdGVtcGxhdGUoKSB7XG4gICAgaWYgKHRlbXBsYXRlX3NvcnRhYmxlKSB7XG4gICAgICAgIHRlbXBsYXRlX3NvcnRhYmxlLmRlc3Ryb3koKTtcbiAgICAgICAgdGVtcGxhdGVfc29ydGFibGUgPSBudWxsO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiU29ydGFibGUgT0ZGXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9nZ2xlX2VkaXRfbW9kZSgpIHtcbiAgICBlZGl0X21vZGUudmFsdWUgPSAhZWRpdF9tb2RlLnZhbHVlO1xuXG4gICAgaWYgKGVkaXRfbW9kZS52YWx1ZSkge1xuICAgICAgICBzZXRfc29ydGFibGVfdGVtcGxhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuICAgIH1cbn1cblxuY29uc3QgbGlzdF90ZW1wbGF0ZV9jb21wb25lbnRzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2xpc3Rfd2lkZ2V0c19lbmRwb2ludH1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBpZiAocmVzPy5saXN0ID09IG51bGwpIHsgcmV0dXJuIHt9OyB9XG4gICAgbGV0IHdpZGdldHMgPSByZXMubGlzdDtcblxuICAgIHdpZGdldHMuc29ydCgoYSwgYikgPT4gX2kxOG4oYS5pMThuX25hbWUpLnRvVXBwZXJDYXNlKCkubG9jYWxlQ29tcGFyZShfaTE4bihiLmkxOG5fbmFtZSkudG9VcHBlckNhc2UoKSkpO1xuXG4gICAgcmV0dXJuIHdpZGdldHM7XG59XG5cbmZ1bmN0aW9uIHNob3dfYWRkX3RlbXBsYXRlX2NvbXBvbmVudF9tb2RhbCgpIHtcbiAgICBtb2RhbF9hZGRfdGVtcGxhdGVfY29tcG9uZW50LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19kZWxldGVfdGVtcGxhdGVfbW9kYWwoKSB7XG4gICAgbW9kYWxfZGVsZXRlX3RlbXBsYXRlLnZhbHVlLnNob3coKTtcbn1cblxuY29uc3QgYWRkX3RlbXBsYXRlX2NvbXBvbmVudCA9IGFzeW5jIChjKSA9PiB7XG4gICAgdW5zZXRfc29ydGFibGVfdGVtcGxhdGUoKTtcblxuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2NvbXBvbmVudF9hZGRfZW5kcG9pbnR9YDtcbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgICAgIHRlbXBsYXRlOiBwcm9wcy5jb250ZXh0LnRlbXBsYXRlLFxuICAgICAgICBjb21wb25lbnQ6IGMuaWRcbiAgICB9O1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgY29udGVudCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGF3YWl0IHNldF90ZW1wbGF0ZShzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3YXJuaW5nX21lc3NhZ2UudmFsdWUgPSBfaTE4bihcInJlcG9ydC51bmFibGVfdG9fb3BlblwiKTtcbiAgICB9XG5cbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIHNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZW1vdmVfdGVtcGxhdGVfY29tcG9uZW50KGUpIHtcbiAgICB1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuXG4gICAgY29uc3QgY29tcG9uZW50X2lkID0gZS50YXJnZXQuZGF0YXNldC5jb21wb25lbnRJZDtcbiAgICBjb21wb25lbnRzLnZhbHVlID0gY29tcG9uZW50cy52YWx1ZS5maWx0ZXIoYyA9PiBjLmlkICE9PSBjb21wb25lbnRfaWQpO1xuXG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBzZXRfc29ydGFibGVfdGVtcGxhdGUoKTtcblxuICAgIGNvbW1pdF90ZW1wbGF0ZV9jaGFuZ2UoKTtcbn1cblxuLyoqXG4gKiBAYnJpZWYgVGhlIG1ldGhvZCB1c2VkIHRvIG9wZW4gdGhlIGVkaXQgY29tcG9uZW50IG1vZGFsIFxuICogICAgICAgIGludm9sdmVzIHRyaWdnZXJpbmcgYSBjbGljayBldmVudCBvbiB0aGUgJ0VkaXQnIChwZW5jaWwgaWNvbikgYnV0dG9uLlxuICogQHBhcmFtIGUgZXZlbnQgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHNob3dfZWRpdF90ZW1wbGF0ZV9jb21wb25lbnQoZSkge1xuICAgIGNvbnN0IGNvbXBvbmVudF9pZCA9IGUudGFyZ2V0LmRhdGFzZXQuY29tcG9uZW50SWQ7XG4gICAgY29uc3QgY29tcG9uZW50ID0gY29tcG9uZW50cy52YWx1ZS5maW5kKGMgPT4gYy5pZCA9PT0gY29tcG9uZW50X2lkKTtcbiAgICBjb25zdCBpc19yZXBvcnRfcGFnZSA9IHByb3BzLmNvbnRleHQucGFnZSA9PSAncmVwb3J0JztcbiAgICBtb2RhbF9lZGl0X3RlbXBsYXRlX2NvbXBvbmVudC52YWx1ZS5zaG93KGNvbXBvbmVudCwgaXNfcmVwb3J0X3BhZ2UpO1xufVxuXG4vKipcbiAqIFxuICogQGJyaWVmIFRoZSBtZXRob2QgdXNlZCB0byB1cGRhdGUgdGhlIHNlbGVjdGVkIGNvbXBvbmVudCB3aXRoIG5ldyBzZXR0aW5ncyBcbiAqICAgICAgICBpbnZvbHZlcyBtYWtpbmcgYSBSRVNUIGNhbGwuXG4gKiBAcGFyYW0gbmV3X2NvbXBvbmVudCBBbiBvYmplY3Qgd2l0aCBuZXcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQgdG8gZWRpdC4gXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGVkaXRfdGVtcGxhdGVfY29tcG9uZW50KG5ld19jb21wb25lbnQpIHtcbiAgICB1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuXG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQudGVtcGxhdGVfY29tcG9uZW50X2VkaXRfZW5kcG9pbnR9YDtcbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgICAgIHRlbXBsYXRlOiBwcm9wcy5jb250ZXh0LnRlbXBsYXRlLFxuICAgICAgICBjb21wb25lbnQ6IG5ld19jb21wb25lbnQuaWQsXG4gICAgICAgIGNvbXBvbmVudF90aXRsZTogbmV3X2NvbXBvbmVudC50aXRsZSxcbiAgICAgICAgY29tcG9uZW50X2hlaWdodDogbmV3X2NvbXBvbmVudC5oZWlnaHQsXG4gICAgICAgIGNvbXBvbmVudF93aWR0aDogbmV3X2NvbXBvbmVudC53aWR0aCxcbiAgICAgICAgY29tcG9uZW50X3RpbWVfb2Zmc2V0OiBuZXdfY29tcG9uZW50LnRpbWVfb2Zmc2V0LFxuICAgICAgICBjb21wb25lbnRfdGltZV93aW5kb3c6IG5ld19jb21wb25lbnQudGltZV93aW5kb3csXG4gICAgICAgIGNvbXBvbmVudF9wYXJhbXM6IG5ld19jb21wb25lbnQucmVzdF9wYXJhbXNcbiAgICB9O1xuXG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgd2FybmluZ19tZXNzYWdlLnZhbHVlID0gXCJcIjtcbiAgICAgICAgYXdhaXQgc2V0X3RlbXBsYXRlKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IF9pMThuKFwicmVwb3J0LnVuYWJsZV90b19vcGVuXCIpO1xuICAgIH1cblxuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV90ZW1wbGF0ZSgpIHtcbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICAgICAgdGVtcGxhdGU6IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSxcbiAgICB9O1xuXG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQudGVtcGxhdGVfZGVsZXRlX2VuZHBvaW50fWA7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KTtcblxuICAgICAgICBhd2FpdCBzZXRfdGVtcGxhdGUoKTtcblxuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5AbWVkaWEgcHJpbnQge1xuICAgIC5kb250cHJpbnQge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC5wYWdlYnJlYWstYmVnaW4ge1xuICAgICAgICBwYWdlLWJyZWFrLWJlZm9yZTogYWx3YXlzO1xuICAgIH1cblxuICAgIC5wYWdlYnJlYWstZW5kIHtcbiAgICAgICAgcGFnZS1icmVhay1hZnRlcjogYWx3YXlzICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgLnByaW50LWVsZW1lbnQtY2xhc3Mge1xuICAgICAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQgIWltcG9ydGFudDtcbiAgICAgICAgcGFnZS1icmVhay1hZnRlcjogYXV0b1xuICAgIH1cbn1cblxuLyogQG1lZGlhIHByaW50IGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSBhbmQgKG1heC13aWR0aDogMjk3bW0peyAqL1xuLyogICAgIC5jb2wtNCB7ICovXG4vKiAgICAgICAgIHdpZHRoOiA1MCUgIWltcG9ydGFudDsgKi9cbi8qICAgICAgICAgZmxleDogMCAwIGF1dG87ICovXG4vKiAgICAgfSAqL1xuLyogfSAqL1xuQHBhZ2Uge1xuICAgIC8qIHNpemU6IEEzIGxhbmRzY2FwZTsgKi9cbiAgICAvKiBwb3NpdGlvbjphYnNvbHV0ZTsgd2lkdGg6MTAwJTsgdG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7IHBhZGRpbmc6MDsgbWFyZ2luOi0xcHg7ICovXG59XG5cbi8qIFByaW50IG9uIEE0ICovXG5AbWVkaWEgcHJpbnQgYW5kIChtYXgtd2lkdGg6IDI5N21tKSBhbmQgKG1pbi13aWR0aDogMjEwbW0pIHtcblxuICAgIC8qIC5yb3cgeyAqL1xuICAgIC8qICAgICAgICAgcGFkZGluZy1sZWZ0OiAwOyAqL1xuICAgIC8qICAgICAgICAgcGFkZGluZy1yaWdodDogMDsgKi9cbiAgICAvKiAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMTByZW07ICovXG4gICAgLyogICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7ICovXG4gICAgLyogfSAqL1xuICAgIC5jb2wtNCB7XG4gICAgICAgIHdpZHRoOiA1MCUgIWltcG9ydGFudDtcbiAgICAgICAgZmxleDogMCAwIGF1dG87XG4gICAgfVxufVxuXG4vKiBQcmludCBvbiBBNSAoY29tbWVudGVkIG91dCBhcyB0aGlzIGlzIG5vdCB3b3JraW5nIG9uIENocm9tZS9TYWZhcmkpICovXG5cbi8qIEBtZWRpYSBwcmludCBhbmQgKG1heC13aWR0aDogMTQ4bW0peyAqL1xuLyogICAgIC5jb2wtNCB7ICovXG4vKiAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7ICovXG4vKiAgICAgICAgIGZsZXg6IDAgMCBhdXRvOyAqL1xuLyogICAgIH0gKi9cbi8qICAgICAuY29sLTYgeyAqL1xuLyogICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50OyAqL1xuLyogICAgICAgICBmbGV4OiAwIDAgYXV0bzsgKi9cbi8qICAgICB9ICovXG4vKiB9ICovXG5cbi5hbGlnbi1jZW50ZXIge31cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uYWRkX2V4Y2x1c2lvblwiKSB9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT4gICAgXG4gICAgPHRlbXBsYXRlIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2hvc3RzJ1wiPiA8IS0tIG1vZGFsIGhvc3RzIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuXHQgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm1lbWJlcl90eXBlXCIpIH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cblx0ICAgIDxsYWJlbCA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGV4Y2x1ZGVfdHlwZSA9PSAnaXAnfVwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cblx0ICAgICAgPGlucHV0ICBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJtZW1iZXJfdHlwZVwiIHZhbHVlPVwiaXBcIiBAY2xpY2s9XCJzZXRfZXhjbHVkZV90eXBlKCdpcCcpXCI+IHt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmlwX2FkZHJlc3NcIikgfX1cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8bGFiZWwgOmNsYXNzPVwieydhY3RpdmUnOiBleGNsdWRlX3R5cGUgPT0gJ25ldHdvcmsnfVwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cblx0ICAgICAgPGlucHV0IEBjbGljaz1cInNldF9leGNsdWRlX3R5cGUoJ25ldHdvcmsnKVwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJtZW1iZXJfdHlwZVwiIHZhbHVlPVwibmV0d29ya1wiPiB7eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5uZXR3b3JrXCIpIH19XG5cdCAgICA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyPlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwiaG9zdC1hbGVydC1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgXHQgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgIFx0ICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmhvc3RfYWxlcnRfdHlwZVwiKSB9fTwvYj5cbiAgICBcdCAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmFtZT1cInZhbHVlXCIgY2xhc3M9XCJmb3JtLXNlbGVjdCBhbGVydC1zZWxlY3RcIiB2LW1vZGVsPVwiaG9zdF9zZWxlY3RlZFwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubm9uZVwiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmV4Y2x1ZGVfYWxsX2FsZXJ0c1wiKSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnNwYWNpbmdfYmFyXCIpIH19PC9vcHRpb24+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gaG9zdF9hbGVydF90eXBlc1wiPlxuXHRcdDxvcHRpb24gdi1pZj1cIml0ZW0gIT0gbnVsbFwiIDp2YWx1ZT1cIml0ZW0uYWxlcnRfaWRcIj57eyBpdGVtLmxhYmVsIH19PC9vcHRpb24+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiBjbGFzcz1cImZsb3ctYWxlcnQtZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZmxvd19hbGVydF90eXBlXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgICA8c2VsZWN0IGlkPVwiZmxvdy1hbGVydC1zZWxlY3RcIiBuYW1lPVwidmFsdWVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGFsZXJ0LXNlbGVjdFwiIHYtbW9kZWw9XCJmbG93X3NlbGVjdGVkXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5ub25lXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZXhjbHVkZV9hbGxfYWxlcnRzXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQ+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uc3BhY2luZ19iYXJcIikgfX08L29wdGlvbj5cblx0ICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBmbG93X2FsZXJ0X3R5cGVzXCI+XG5cdFx0PG9wdGlvbiAgdi1pZj1cIml0ZW0gIT0gbnVsbFwiIDp2YWx1ZT1cIml0ZW0uYWxlcnRfaWRcIj57eyBpdGVtLmxhYmVsIH19PC9vcHRpb24+XG5cdCAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiB2LWlmPVwiZXhjbHVkZV90eXBlID09ICdpcCdcIiBjbGFzcz1cImlwLWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmlwX2FkZHJlc3NcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxpbnB1dCA6cGF0dGVybj1cInBhdHRlcm5faXBcIiBwbGFjZWhvbGRlcj1cIjE5Mi4xNjguMS4xXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBuYW1lPVwiaXBfYWRkcmVzc1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImlucHV0X2lwXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgPGRpdiB2LWlmPVwiZXhjbHVkZV90eXBlID09ICduZXR3b3JrJ1wiIGNsYXNzPVwibmV0d29yay1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5uZXR3b3JrXCIpIH19PC9iPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS00IHByLTBcIj5cbiAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCBzdHlsZT1cIndpZHRoOiBjYWxjKDEwMCUgLSAxMHB4KTtcIiBuYW1lPVwibmV0d29ya1wiIGNsYXNzPVwiZm9ybS1jb250cm9sIGQtaW5saW5lXCIgcGxhY2Vob2xkZXI9XCIxNzIuMTYuMC4wXCIgOnBhdHRlcm49XCJwYXR0ZXJuX2lwXCIgdi1tb2RlbD1cImlucHV0X25ldHdvcmtcIi8+XG4gICAgXHQgIDwvZGl2PlxuICAgIFx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgcHMtNCBwZS0wXCI+XG4gICAgXHQgICAgPHNwYW4gY2xhc3M9XCJtZS0yXCI+Lzwvc3Bhbj5cbiAgICBcdCAgICA8aW5wdXQgcGxhY2Vob2xkZXI9JzI0JyByZXF1aXJlZCBjbGFzcz1cImZvcm0tY29udHJvbCBkLWlubGluZSB3LTc1XCIgbWluPVwiMVwiIG1heD1cIjEyN1wiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiY2lkclwiIHYtbW9kZWw9XCJuZXRtYXNrXCI+XG4gICAgXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oJ3ZsYW4nKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwiMFwiIG1pbj1cIjBcIiB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbD1cImlucHV0X3ZsYW5cIiBjbGFzcz1cImZvcm0tY29udHJvbFwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICA8L3RlbXBsYXRlPiA8IS0tIG1kb2FsIGhvc3RzIC0tPlxuICAgIFxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlICE9ICdob3N0cydcIj4gPCEtLSBtb2RhbCBkb21haW5fbmFtZXMtLT5cbiAgICAgIDxkaXY+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGIgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnZG9tYWluX25hbWVzJ1wiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmRvbWFpblwiKSB9fTwvYj5cbiAgICAgICAgICAgIDxiIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ3Rsc19jZXJ0aWZpY2F0ZSdcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi50bHNfY2VydGlmaWNhdGVcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxpbnB1dCB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdkb21haW5fbmFtZXMnXCIgcGxhY2Vob2xkZXI9XCJcIiA6cGF0dGVybj1cInBhdHRlcm5fZG9tYWluXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBuYW1lPVwiaXBfYWRkcmVzc1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImlucHV0X3RleHRcIiAvPlxuICAgICAgICAgICAgPGlucHV0IHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ3Rsc19jZXJ0aWZpY2F0ZSdcIiBwbGFjZWhvbGRlcj1cIkNOPTgxMzg0NTY1NzAwMzMzOTgzOCwgTz1Db2RlNDIsIE9VPVRFU1QsIFNUPU1OLCBDPVVcIiA6cGF0dGVybj1cInBhdHRlcm5fY2VydGlmaWNhdGVcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpcF9hZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaW5wdXRfdGV4dFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+ICAgICAgXG4gICAgPC90ZW1wbGF0ZT4gPCEtLSBtb2RhbCBjb21tZW50LS0+XG4gICAgPGhyIGNsYXNzPVwic2VwYXJhdG9yIG10LTVcIiA+XG4gICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57eyBfaTE4bihcInNob3dfYWxlcnRzLmFkZF9hX2NvbW1lbnRcIikgfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm10LTFcIj5cbiAgICAgICAgPHRleHRhcmVhIDpwbGFjZWhvbGRlcj1jb21tZW50X3BsYWNlaG9sZGVyIGlkPVwiYWxlcnQtbGFiZWxcIiBuYW1lPVwibGFiZWxcIiByb3dzPVwiM1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiY29tbWVudFwiIG1heGxlbmd0aD1cIjQ1MFwiPjwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYWRkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKCdhZGQnKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKG51bGwpO1xuY29uc3QgZXhjbHVkZV90eXBlID0gcmVmKFwiaXBcIik7XG5jb25zdCBpbnB1dF9pcCA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X25ldHdvcmsgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF92bGFuID0gcmVmKDApO1xuY29uc3QgaW5wdXRfdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IGhvc3Rfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBmbG93X3NlbGVjdGVkID0gcmVmKFwiXCIpO1xuY29uc3QgbmV0bWFzayA9IHJlZihcIlwiKTtcbmNvbnN0IGNvbW1lbnQgPSByZWYobnVsbCk7XG5jb25zdCBjb21tZW50X3BsYWNlaG9sZGVyID0gaTE4bihcImRldGFpbHMuY29tbWVudF9wbGFjZWhvbGRlclwiKTtcbmNvbnN0IGlzX2VkaXQgPSByZWYobnVsbCk7XG5jb25zdCByb3dfdG9fZGVsZXRlID0gcmVmKG51bGwpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnXSk7XG4vL3Muc3BsaXQoXCIsXCIpLmV2ZXJ5KChhKSA9PiB7cmV0dXJuIC8uKz0uKy8udGVzdChhKX0pXG5mdW5jdGlvbiBnZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpIHtcbiAgICBpZiAodmFsdWVfdHlwZSA9PSBcInRleHRcIikge1xuXHRyZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVMubm9uX3F1b3RlZF90ZXh0O1xuICAgIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImlwXCIpIHtcblx0bGV0IHJfaXB2NCA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjQ7XG5cdGxldCByX2lwdjRfdmxhbiA9IHJfaXB2NC5yZXBsYWNlQWxsKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0bGV0IHJfaXB2NiA9IE50b3BVdGlscy5SRUdFWEVTLmlwdjY7XG5cdGxldCByX2lwdjZfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBcIkBbMC05XXswLDV9JFwiKTtcblx0cmV0dXJuIGAoJHtyX2lwdjR9KXwoJHtyX2lwdjRfdmxhbn0pfCgke3JfaXB2Nn0pfCgke3JfaXB2Nl92bGFufSlgO1xuICAgIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImhvc3RuYW1lXCIpIHtcblx0cmV0dXJuIGAke050b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmR9fFthLXpBLVowLTkuXy1dezMsMjUwfUBbMC05XXswLDV9JGA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRyZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVMudGxzX2NlcnRpZmljYXRlO1xuICAgIH1cbiAgICByZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVNbdmFsdWVfdHlwZV07XG59XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGFsZXJ0X2V4Y2x1c2lvbnNfcGFnZTogU3RyaW5nLFxuICAgIGhvc3RfYWxlcnRfdHlwZXM6IEFycmF5LFxuICAgIGZsb3dfYWxlcnRfdHlwZXM6IEFycmF5LCAgICBcbn0pO1xuXG5sZXQgcGF0dGVybl9pcCA9IGdldF9kYXRhX3BhdHRlcm4oXCJpcFwiKTtcbmxldCBwYXR0ZXJuX3RleHQgPSBnZXRfZGF0YV9wYXR0ZXJuKFwidGV4dFwiKTtcbmxldCBwYXR0ZXJuX2NlcnRpZmljYXRlID0gZ2V0X2RhdGFfcGF0dGVybihcImNlcnRpZmljYXRlXCIpO1xubGV0IHBhdHRlcm5fZG9tYWluID0gZ2V0X2RhdGFfcGF0dGVybihcImRvbWFpbl9uYW1lX25vdF9zdHJpY3RcIik7XG5cbmNvbnN0IHNldF9leGNsdWRlX3R5cGUgPSAodHlwZSkgPT4ge1xuICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IHR5cGU7XG59O1xuXG5jb25zdCBjaGVja19kaXNhYmxlX2FwcGx5ID0gKCkgPT4ge1xuICAgIGxldCByZWdleCA9IG51bGw7XG4gICAgbGV0IGRpc2FibGVfYXBwbHkgPSB0cnVlO1xuICAgIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2hvc3RzJykge1xuXHRyZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybl9pcCk7XG5cdGlmIChleGNsdWRlX3R5cGUudmFsdWUgPT0gXCJpcFwiKSB7XG5cdCAgICBkaXNhYmxlX2FwcGx5ID0gKGlucHV0X2lwLnZhbHVlID09IG51bGwgfHwgaW5wdXRfaXAudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfaXAudmFsdWUpID09IGZhbHNlKSB8fCAoaG9zdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiICYmIGZsb3dfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIik7XG5cdH0gZWxzZSB7XG5cdCAgICBkaXNhYmxlX2FwcGx5ID0gKGlucHV0X25ldHdvcmsudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF9uZXR3b3JrLnZhbHVlID09IFwiXCIpXG5cdFx0fHwgKHJlZ2V4LnRlc3QoaW5wdXRfbmV0d29yay52YWx1ZSkgPT0gZmFsc2UpXG5cdFx0fHwgKGhvc3Rfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIiAmJiBmbG93X3NlbGVjdGVkLnZhbHVlID09IFwiXCIpXG5cdFx0fHwgKG5ldG1hc2sudmFsdWUgPT0gbnVsbCB8fCBuZXRtYXNrLnZhbHVlID09IFwiXCIgfHwgcGFyc2VJbnQobmV0bWFzay52YWx1ZSkgPCAxIHx8IHBhcnNlSW50KG5ldG1hc2sudmFsdWUpID4gMTI3KTtcblx0fVxuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdkb21haW5fbmFtZXMnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2RvbWFpbik7XG5cdGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfdGV4dC52YWx1ZSA9PSBudWxsIHx8IGlucHV0X3RleHQudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfdGV4dC52YWx1ZSkgPT0gZmFsc2UpO1xuXHRcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJykge1xuXHRyZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybl9jZXJ0aWZpY2F0ZSk7XG5cdGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfdGV4dC52YWx1ZSA9PSBudWxsIHx8IGlucHV0X3RleHQudmFsdWUgPT0gXCJcIikgfHwgKHJlZ2V4LnRlc3QoaW5wdXRfdGV4dC52YWx1ZSkgPT0gZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcbn07XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICAgIC8vZGVidWdnZXI7XG4gICAgaWYocm93KSB7XG4gICAgICBpc19lZGl0LnZhbHVlID0gdHJ1ZTtcbiAgICAgIHJvd190b19kZWxldGUudmFsdWUgPSByb3c7XG5cbiAgICAgIGNvbW1lbnQudmFsdWUgPSByb3cubGFiZWw7XG4gICAgICBcbiAgICAgIGlmKHJvdy50eXBlID09ICdob3N0Jykge1xuICAgICAgICBsZXQgbmV0d29ya19kZXRhaWxzID0gcm93LmFsZXJ0X2FkZHIuc3BsaXQoXCIvXCIpO1xuICAgICAgICBsZXQgdmxhbl9zcGxpdCA9IHJvdy5hbGVydF9hZGRyLnNwbGl0KFwiQFwiKTtcblxuICAgICAgICBpZihuZXR3b3JrX2RldGFpbHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IFwibmV0d29ya1wiO1xuICAgICAgICAgIGlucHV0X25ldHdvcmsudmFsdWUgPSBuZXR3b3JrX2RldGFpbHNbMF07XG4gICAgICAgICAgbmV0bWFzay52YWx1ZSA9IG5ldHdvcmtfZGV0YWlsc1sxXTtcbiAgICAgICAgICBpbnB1dF9pcC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhjbHVkZV90eXBlLnZhbHVlID0gXCJpcFwiO1xuICAgICAgICAgIGlucHV0X2lwLnZhbHVlID0gdmxhbl9zcGxpdFswXTtcbiAgICAgICAgICBpbnB1dF9uZXR3b3JrLnZhbHVlID0gXCJcIjtcbiAgICAgICAgICBuZXRtYXNrLnZhbHVlID0gXCJcIjtcbiAgICAgICAgfSBcblxuICAgICAgICBpZih2bGFuX3NwbGl0Lmxlbmd0aCA+IDEgKSB7XG4gICAgICAgICAgaW5wdXRfdmxhbi52YWx1ZSA9IHZsYW5fc3BsaXRbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5wdXRfdmxhbi52YWx1ZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZihyb3cuaG9zdF9hbGVydF9rZXkgIT0gbnVsbCkgXG4gICAgICAgICAgaG9zdF9zZWxlY3RlZC52YWx1ZSA9ICcnK3Jvdy5ob3N0X2FsZXJ0X2tleTtcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICBob3N0X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcbiAgICAgIFxuICAgICAgICBpZihyb3cuZmxvd19hbGVydF9rZXkgIT0gbnVsbCkgXG4gICAgICAgICAgZmxvd19zZWxlY3RlZC52YWx1ZSA9ICcnK3Jvdy5mbG93X2FsZXJ0X2tleTtcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICBmbG93X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcblxuICAgICAgfSBlbHNlIGlmKHJvdy50eXBlID09ICdkb21haW4nKSB7XG4gICAgICAgIGlucHV0X3RleHQudmFsdWUgPSByb3cuYWxlcnRfZG9tYWluO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRfdGV4dC52YWx1ZSA9IHJvdy5hbGVydF9jZXJ0aWZpY2F0ZTtcbiAgICAgIH1cbiAgICAgICAgICAgIFxuICAgIH0gZWxzZSB7XG5cbiAgICAgIGV4Y2x1ZGVfdHlwZS52YWx1ZSA9IFwiaXBcIjtcbiAgICAgIGlucHV0X2lwLnZhbHVlID0gXCJcIjtcbiAgICAgIGlucHV0X25ldHdvcmsudmFsdWUgPSBcIlwiO1xuICAgICAgaW5wdXRfdmxhbi52YWx1ZSA9IDA7XG4gICAgICBob3N0X3NlbGVjdGVkLnZhbHVlID0gXCIwXCI7XG4gICAgICBmbG93X3NlbGVjdGVkLnZhbHVlID0gXCJcIjtcbiAgICAgIG5ldG1hc2sudmFsdWUgPSBcIlwiO1xuICAgICAgaW5wdXRfdGV4dC52YWx1ZSA9IFwiXCI7XG4gICAgICBjb21tZW50LnZhbHVlID0gXCJcIjtcbiAgICB9XG5cbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3Qgbm9ybWFsaXplX2FsZXJ0X2tleV92YWx1ZSA9IChhbGVydF9rZXkpID0+IHtcbiAgaWYgKGFsZXJ0X2tleSA9PSBcIlwiKSByZXR1cm4gLTE7XG4gIHJldHVybiBhbGVydF9rZXk7XG59IFxuXG5jb25zdCBhZGQgPSAoKSA9PiB7XG4gICAgbGV0IHBhcmFtcztcbiAgICBsZXQgYWxlcnRfYWRkciA9IGlucHV0X2lwLnZhbHVlO1xuICAgIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gXCJob3N0c1wiKSB7XG5cdGlmIChleGNsdWRlX3R5cGUudmFsdWUgPT0gXCJuZXR3b3JrXCIpIHtcblx0ICAgIGFsZXJ0X2FkZHIgPSBgJHtpbnB1dF9uZXR3b3JrLnZhbHVlfS8ke25ldG1hc2sudmFsdWV9YDtcblx0fVxuICAgICAgICBpZiAoaW5wdXRfdmxhbi52YWx1ZSAhPSBudWxsICYmIGlucHV0X3ZsYW4udmFsdWUgIT0gMCkge1xuXHQgICAgYWxlcnRfYWRkciA9IGAke2FsZXJ0X2FkZHJ9QCR7aW5wdXRfdmxhbi52YWx1ZX1gO1xuICAgICAgICB9XG5cdHBhcmFtcyA9IHsgYWxlcnRfYWRkciwgaG9zdF9hbGVydF9rZXk6IG5vcm1hbGl6ZV9hbGVydF9rZXlfdmFsdWUoaG9zdF9zZWxlY3RlZC52YWx1ZSksIGZsb3dfYWxlcnRfa2V5OiBub3JtYWxpemVfYWxlcnRfa2V5X3ZhbHVlKGZsb3dfc2VsZWN0ZWQudmFsdWUpIH07XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gXCJkb21haW5fbmFtZXNcIikge1xuXHRwYXJhbXMgPSB7IGFsZXJ0X2RvbWFpbjogaW5wdXRfdGV4dC52YWx1ZSB9O1xuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09IFwidGxzX2NlcnRpZmljYXRlXCIpIHtcblx0cGFyYW1zID0geyBhbGVydF9jZXJ0aWZpY2F0ZTogaW5wdXRfdGV4dC52YWx1ZSB9O1xuICAgIH1cbiAgICBwYXJhbXMubGFiZWwgPSBjb21tZW50LnZhbHVlO1xuICAgIGlmKGlzX2VkaXQudmFsdWUpIHtcbiAgICAgIHBhcmFtcy5vbGRfdHlwZSA9IHJvd190b19kZWxldGUudmFsdWUudHlwZTtcbiAgICAgIHBhcmFtcy5vbGRfc3ViZGlyID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5zdWJkaXI7XG4gICAgICBwYXJhbXMub2xkX2FsZXJ0X2RvbWFpbiA9IHJvd190b19kZWxldGUudmFsdWUuYWxlcnRfZG9tYWluO1xuICAgICAgcGFyYW1zLm9sZF9hbGVydF9jZXJ0aWZpY2F0ZSA9IHJvd190b19kZWxldGUudmFsdWUuYWxlcnRfY2VydGlmaWNhdGU7XG4gICAgICBwYXJhbXMub2xkX2FsZXJ0X2FkZHIgPSByb3dfdG9fZGVsZXRlLnZhbHVlLmFsZXJ0X2FkZHI7XG4gICAgICBwYXJhbXMub2xkX2Zsb3dfYWxlcnRfa2V5ID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5mbG93X2FsZXJ0X2tleTtcbiAgICAgIHBhcmFtcy5vbGRfaG9zdF9hbGVydF9rZXkgPSByb3dfdG9fZGVsZXRlLnZhbHVlLmhvc3RfYWxlcnRfa2V5O1xuICAgIH1cbiAgICBlbWl0KCdhZGQnLCBwYXJhbXMpO1xuICAgIGNsb3NlKCk7XG4gXG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59ICBcbjwvc3R5bGU+XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuaW1wb3J0ICogYXMgVnVlIGZyb20gXCJ2dWVcIjtcbi8vIHdpbmRvdy5WdWUgPSBWdWU7XG5cbi8vIHBhZ2VzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBbGVydFN0YXRzIH0gZnJvbSBcIi4vcGFnZS1hbGVydC1zdGF0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUZsb3dIaXN0b3JpY2FsIH0gZnJvbSBcIi4vcGFnZS1mbG93LWhpc3RvcmljYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTdGF0cyB9IGZyb20gXCIuL3BhZ2Utc3RhdHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldFRhYmxlIH0gZnJvbSBcIi4vcGFnZS1hc3NldC10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5VGFibGUgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1zZXJ2aWNlLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eU1hcCB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRNYXAgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZURldmljZUV4Y2x1c2lvbnMgfSBmcm9tIFwiLi9wYWdlLWRldmljZS1leGNsdXNpb25zLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFRMUyB9IGZyb20gXCIuL3BhZ2UtaG9zdC10bHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0U1NIIH0gZnJvbSBcIi4vcGFnZS1ob3N0LXNzaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvbWVNYXAgfSBmcm9tIFwiLi9wYWdlLWhvbWUtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2Fua2V5IH0gZnJvbSBcIi4vcGFnZS1zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc0FwcGxpY2F0aW9ucyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLWFwcGxpY2F0aW9ucy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzVHJhZmZpYyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLXRyYWZmaWMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc1BhY2tldHMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1wYWNrZXRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNGbG93U2Fua2V5IH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0UnVsZXMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtcnVsZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc1BvcnRzIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtcG9ydHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBbGVydEFuYWx5c2lzIH0gZnJvbSBcIi4vcGFnZS1hbGVydC1hbmFseXNpcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RNYXAgfSBmcm9tIFwiLi9wYWdlLWhvc3QtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlVkxBTlBvcnRzU2Fua2V5IH0gZnJvbSBcIi4vcGFnZS12bGFuLXBvcnRzLXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3MgfSBmcm9tIFwiLi9wYWdlLWFnZ3JlZ2F0ZWQtbGl2ZS1mbG93cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVRlc3RUYWJsZSB9IGZyb20gXCIuL3BhZ2UtdGVzdC10YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmVkZ2VSdWxlc0NvbmZpZyB9IGZyb20gXCIuL3BhZ2UtbmVkZ2UtcnVsZXMtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlRWRpdEFwcGxpY2F0aW9ucyB9IGZyb20gXCIuL3BhZ2UtZWRpdC1hcHBsaWNhdGlvbnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VOZXR3b3JrRGlzY292ZXJ5IH0gZnJvbSBcIi4vcGFnZS1uZXR3b3JrLWRpc2NvdmVyeS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXAgfSBmcm9tIFwiLi9wYWdlLW1hbmFnZS1jb25maWd1cmF0aW9ucy1iYWNrdXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTTk1QRGV2aWNlUnVsZXMgfSBmcm9tIFwiLi9wYWdlLXNubXAtZGV2aWNlLXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU25tcERldmljZXNJbnRlcmZhY2VzU2ltaWxhcml0eSB9IGZyb20gXCIuL3BhZ2Utc25tcC1kZXZpY2VzLWludGVyZmFjZXMtc2ltaWxhcml0eS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RzUG9ydHNBbmFseXNpcyB9IGZyb20gXCIuL3BhZ2UtaG9zdHMtcG9ydHMtYW5hbHlzaXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5lZGdlUmVwZWF0ZXJzQ29uZmlnIH0gZnJvbSBcIi4vcGFnZS1uZWRnZS1yZXBlYXRlcnMtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSW5hY3RpdmVIb3N0cyB9IGZyb20gXCIuL3BhZ2UtaW5hY3RpdmUtaG9zdHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VJbmFjdGl2ZUhvc3REZXRhaWxzIH0gZnJvbSBcIi4vcGFnZS1pbmFjdGl2ZS1ob3N0LWRldGFpbHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VGbG93RGV2aWNlRGV0YWlscyB9IGZyb20gXCIuL3BhZ2UtZmxvd2RldmljZS1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VGbG93RGV2aWNlSW50ZXJmYWNlRGV0YWlscyB9IGZyb20gXCIuL3BhZ2UtZmxvd2RldmljZS1pbnRlcmZhY2UtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlVnVsbmVyYWJpbGl0eVNjYW4gfSBmcm9tIFwiLi9wYWdlLXZ1bG5lcmFiaWxpdHktc2Nhbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RWc1Jlc3VsdCB9IGZyb20gXCIuL3BhZ2UtaG9zdC12cy1yZXN1bHQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VPcGVuUG9ydHMgfSBmcm9tIFwiLi9wYWdlLW9wZW4tcG9ydHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCB9IGZyb20gXCIuL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLXJlcG9ydC52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU05NUFVzYWdlIH0gZnJvbSBcIi4vcGFnZS1zbm1wLXVzYWdlLnZ1ZVwiXG5cbi8vIGNvbXBvbmVudHNcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGltZXNlcmllc0NoYXJ0IH0gZnJvbSBcIi4vdGltZXNlcmllcy1jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTmF2YmFyIH0gZnJvbSBcIi4vcGFnZS1uYXZiYXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFJhbmdlUGlja2VyIH0gZnJvbSBcIi4vcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNhbmtleSB9IGZyb20gXCIuL3NhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuXG4vLyBkYXNoYm9hcmRcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkIH0gZnJvbSBcIi4vZGFzaGJvYXJkLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRCb3ggfSBmcm9tIFwiLi9kYXNoYm9hcmQtYm94LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRFbXB0eSB9IGZyb20gXCIuL2Rhc2hib2FyZC1lbXB0eS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkVGFibGUgfSBmcm9tIFwiLi9kYXNoYm9hcmQtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZEJhZGdlIH0gZnJvbSBcIi4vZGFzaGJvYXJkLWJhZGdlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRQaWUgfSBmcm9tIFwiLi9kYXNoYm9hcmQtcGllLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRUaW1lc2VyaWVzIH0gZnJvbSBcIi4vZGFzaGJvYXJkLXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZFNhbmtleSB9IGZyb20gXCIuL2Rhc2hib2FyZC1zYW5rZXkudnVlXCI7XG5cbi8vIGxpc3RcbmltcG9ydCB7IGRlZmF1bHQgYXMgTGlzdFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9saXN0LXRpbWVzZXJpZXMudnVlXCI7XG5cbi8vIG1vZGFsc1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRDaGVja0V4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1jaGVjay1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBbGVydHNGaWx0ZXIgfSBmcm9tIFwiLi9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEZpbHRlcnMgfSBmcm9tIFwiLi9tb2RhbC1maWx0ZXJzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9tb2RhbC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkSG9zdFJ1bGVzIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtYXBwbGljYXRpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtYXBwbGljYXRpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRWRpdFJlcG9ydCB9IGZyb20gXCIuL21vZGFsLWVkaXQtdnMtcmVwb3J0LnZ1ZVwiO1xuXG5sZXQgbnRvcFZ1ZSA9IHtcbiAgICAvLyBwYWdlc1xuICAgIFBhZ2VBbGVydFN0YXRzOiBQYWdlQWxlcnRTdGF0cyxcbiAgICBQYWdlRmxvd0hpc3RvcmljYWw6IFBhZ2VGbG93SGlzdG9yaWNhbCxcbiAgICBQYWdlU3RhdHM6IFBhZ2VTdGF0cyxcbiAgICBQYWdlQXNzZXRUYWJsZTogUGFnZUFzc2V0VGFibGUsXG4gICAgUGFnZVBlcmlvZGljaXR5VGFibGU6IFBhZ2VQZXJpb2RpY2l0eVRhYmxlLFxuICAgIFBhZ2VTZXJ2aWNlVGFibGU6IFBhZ2VTZXJ2aWNlVGFibGUsXG4gICAgUGFnZVNlcnZpY2VNYXA6IFBhZ2VTZXJ2aWNlTWFwLFxuICAgIFBhZ2VQZXJpb2RpY2l0eU1hcDogUGFnZVBlcmlvZGljaXR5TWFwLFxuICAgIFBhZ2VBc3NldE1hcDogUGFnZUFzc2V0TWFwLFxuICAgIFBhZ2VEZXZpY2VFeGNsdXNpb25zOiBQYWdlRGV2aWNlRXhjbHVzaW9ucyxcbiAgICBQYWdlSG9zdFRMUzogUGFnZUhvc3RUTFMsXG4gICAgUGFnZUhvc3RTU0g6IFBhZ2VIb3N0U1NILFxuICAgIFBhZ2VIb21lTWFwOiBQYWdlSG9tZU1hcCxcbiAgICBQYWdlU2Fua2V5OiBQYWdlU2Fua2V5LFxuICAgIFBhZ2VIb3N0UnVsZXM6IFBhZ2VIb3N0UnVsZXMsXG4gICAgUGFnZUFsZXJ0QW5hbHlzaXM6IFBhZ2VBbGVydEFuYWx5c2lzLFxuICAgIFBhZ2VIb3N0TWFwOiBQYWdlSG9zdE1hcCxcbiAgICBQYWdlTWFuYWdlQ29uZmlndXJhdGlvbkJhY2t1cDogUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXAsXG4gICAgUGFnZVNOTVBEZXZpY2VSdWxlczogUGFnZVNOTVBEZXZpY2VSdWxlcyxcbiAgICBQYWdlSG9zdHNQb3J0c0FuYWx5c2lzOiBQYWdlSG9zdHNQb3J0c0FuYWx5c2lzLFxuICAgIFBhZ2VJbmFjdGl2ZUhvc3RzOiBQYWdlSW5hY3RpdmVIb3N0cyxcbiAgICBQYWdlSW5hY3RpdmVIb3N0RGV0YWlsczogUGFnZUluYWN0aXZlSG9zdERldGFpbHMsXG4gICAgUGFnZVZ1bG5lcmFiaWxpdHlTY2FuOiBQYWdlVnVsbmVyYWJpbGl0eVNjYW4sXG4gICAgUGFnZUhvc3RWc1Jlc3VsdDogUGFnZUhvc3RWc1Jlc3VsdCxcbiAgICBQYWdlT3BlblBvcnRzOiBQYWdlT3BlblBvcnRzLFxuICAgIFBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydDogUGFnZVZ1bG5lcmFiaWxpdHlTY2FuUmVwb3J0LFxuICAgIFBhZ2VTTk1QVXNhZ2U6IFBhZ2VTTk1QVXNhZ2UsXG4gICAgXG4gICAgUGFnZUVkaXRBcHBsaWNhdGlvbnM6IFBhZ2VFZGl0QXBwbGljYXRpb25zLFxuXG4gICAgUGFnZVZMQU5Qb3J0c0Zsb3dTYW5rZXk6IFBhZ2VWTEFOUG9ydHNTYW5rZXksXG4gICAgUGFnZVRlc3RUYWJsZTogUGFnZVRlc3RUYWJsZSxcbiAgICBQYWdlU25tcERldmljZXNJbnRlcmZhY2VzU2ltaWxhcml0eTogUGFnZVNubXBEZXZpY2VzSW50ZXJmYWNlc1NpbWlsYXJpdHksXG5cbiAgICBOZWRnZVJ1bGVzQ29uZmlnOiBOZWRnZVJ1bGVzQ29uZmlnLFxuICAgIE5lZGdlUmVwZWF0ZXJzQ29uZmlnOiBOZWRnZVJlcGVhdGVyc0NvbmZpZyxcblxuXG4gICAgLy8gSG9zdCBkZXRhaWxzIHBhZ2VzXG4gICAgUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zOiBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMsXG4gICAgUGFnZUhvc3REZXRhaWxzVHJhZmZpYzogUGFnZUhvc3REZXRhaWxzVHJhZmZpYyxcbiAgICBQYWdlSG9zdERldGFpbHNQYWNrZXRzOiBQYWdlSG9zdERldGFpbHNQYWNrZXRzLFxuICAgIFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXk6IFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXksXG4gICAgUGFnZUhvc3REZXRhaWxzUG9ydHM6IFBhZ2VIb3N0RGV0YWlsc1BvcnRzLFxuXG4gICAgUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3M6IFBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzLFxuXG4gICAgUGFnZU5ldHdvcmtEaXNjb3Zlcnk6IFBhZ2VOZXR3b3JrRGlzY292ZXJ5LFxuXG4gICAgUGFnZUZsb3dEZXZpY2VEZXRhaWxzOiBQYWdlRmxvd0RldmljZURldGFpbHMsXG4gICAgUGFnZUZsb3dEZXZpY2VJbnRlcmZhY2VEZXRhaWxzOiBQYWdlRmxvd0RldmljZUludGVyZmFjZURldGFpbHMsXG5cbiAgICAvLyBjb21wb25lbnRzXG4gICAgQWxlcnRJbmZvOiBBbGVydEluZm8sXG4gICAgQ2hhcnQ6IENoYXJ0LFxuICAgIFRpbWVzZXJpZXNDaGFydDogVGltZXNlcmllc0NoYXJ0LFxuICAgIERhdGF0YWJsZTogRGF0YXRhYmxlLFxuICAgIERhdGVUaW1lUmFuZ2VQaWNrZXI6IERhdGVUaW1lUmFuZ2VQaWNrZXIsXG4gICAgTmV0d29ya01hcDogTmV0d29ya01hcCxcbiAgICBSYW5nZVBpY2tlcjogUmFuZ2VQaWNrZXIsXG4gICAgUGFnZU5hdmJhcjogUGFnZU5hdmJhcixcbiAgICBTZWxlY3RTZWFyY2g6IFNlbGVjdFNlYXJjaCxcbiAgICBUYWJMaXN0OiBUYWJMaXN0LFxuICAgIFNhbmtleTogU2Fua2V5LFxuICAgIE5vdGVMaXN0OiBOb3RlTGlzdCxcbiAgICBMb2FkaW5nOiBMb2FkaW5nLFxuXG4gICAgLy8gZGFzaGJvYXJkXG4gICAgRGFzaGJvYXJkOiBEYXNoYm9hcmQsXG4gICAgRGFzaGJvYXJkQm94OiBEYXNoYm9hcmRCb3gsXG4gICAgRGFzaGJvYXJkRW1wdHk6IERhc2hib2FyZEVtcHR5LFxuICAgIERhc2hib2FyZFRhYmxlOiBEYXNoYm9hcmRUYWJsZSxcbiAgICBEYXNoYm9hcmRCYWRnZTogRGFzaGJvYXJkQmFkZ2UsXG4gICAgRGFzaGJvYXJkUGllOiBEYXNoYm9hcmRQaWUsXG4gICAgRGFzaGJvYXJkVGltZXNlcmllczogRGFzaGJvYXJkVGltZXNlcmllcyxcbiAgICBEYXNoYm9hcmRTYW5rZXk6IERhc2hib2FyZFNhbmtleSxcblxuICAgIC8vIGxpc3RcbiAgICBMaXN0VGltZXNlcmllczogTGlzdFRpbWVzZXJpZXMsXG5cbiAgICAvLyBtb2RhbHNcbiAgICBNb2RhbDogTW9kYWwsXG4gICAgTW9kYWxBZGRDaGVja0V4Y2x1c2lvbjogTW9kYWxBZGRDaGVja0V4Y2x1c2lvbixcbiAgICBNb2RhbEFsZXJ0c0ZpbHRlcjogTW9kYWxBbGVydHNGaWx0ZXIsXG4gICAgTW9kYWxGaWx0ZXJzOiBNb2RhbEZpbHRlcnMsXG4gICAgTW9kYWxUaW1lc2VyaWVzOiBNb2RhbFRpbWVzZXJpZXMsXG4gICAgTW9kYWxUcmFmZmljRXh0cmFjdGlvbjogTW9kYWxUcmFmZmljRXh0cmFjdGlvbixcbiAgICBNb2RhbERlbGV0ZUNvbmZpcm06IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICBNb2RhbFNuYXBzaG90OiBNb2RhbFNuYXBzaG90LFxuICAgIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uOiBNb2RhbEFkZERldmljZUV4Y2x1c2lvbixcbiAgICBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb246IE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbixcbiAgICBNb2RhbEFkZEhvc3RSdWxlczogTW9kYWxBZGRIb3N0UnVsZXMsXG4gICAgTW9kYWxBZGRBcHBsaWNhdGlvbjogTW9kYWxBZGRBcHBsaWNhdGlvbixcbiAgICBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uOiBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uLFxuICAgIE1vZGFsRWRpdFJlcG9ydDogTW9kYWxFZGl0UmVwb3J0LFxuXG4gICAgVnVlOiBWdWUsXG59O1xud2luZG93Lm50b3BWdWUgPSBudG9wVnVlO1xuIiwidmFyIF8weDRhZTU9W1wiXFx4NjhcXHg3NFxceDZEXFx4NkNcIixcIlxceDYzXFx4NkNcXHg2RlxceDZFXFx4NjVcIixcIlxceDYxXFx4NzBcXHg3MFxceDY1XFx4NkVcXHg2NFwiLFwiXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDJGXFx4M0VcIixcIlxceDNDXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDY4XFx4NzJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NkNcXHg2NVxceDY2XFx4NzRcXHgzQVxceDIwXFx4NjFcXHg3NVxceDc0XFx4NkZcXHgzQlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg2MVxceDc1XFx4NzRcXHg2RlxceDNCXFx4NzBcXHg2MVxceDY0XFx4NjRcXHg2OVxceDZFXFx4NjdcXHgyRFxceDZDXFx4NjVcXHg2NlxceDc0XFx4M0FcXHgyMFxceDc2XFx4NjFcXHg3MlxceDI4XFx4MkRcXHgyRFxceDYyXFx4NzNcXHgyRFxceDY3XFx4NzVcXHg3NFxceDc0XFx4NjVcXHg3MlxceDJEXFx4NzhcXHgyQ1xceDJFXFx4MzdcXHgzNVxceDcyXFx4NjVcXHg2RFxceDI5XFx4M0JcXHg3MFxceDYxXFx4NjRcXHg2NFxceDY5XFx4NkVcXHg2N1xceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg3NlxceDYxXFx4NzJcXHgyOFxceDJEXFx4MkRcXHg2MlxceDczXFx4MkRcXHg2N1xceDc1XFx4NzRcXHg3NFxceDY1XFx4NzJcXHgyRFxceDc4XFx4MkNcXHgyRVxceDM3XFx4MzVcXHg3MlxceDY1XFx4NkRcXHgyOVxceDNCXFx4NzdcXHg2OVxceDY0XFx4NzRcXHg2OFxceDNBXFx4MjBcXHgzMVxceDMwXFx4MzBcXHgyNVxceDNCXFx4MjJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDcyXFx4NkZcXHg3N1xceDIwXFx4NkRcXHg3NFxceDJEXFx4MzJcXHgyMlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjNcXHg2RlxceDZDXFx4MkRcXHgzMVxceDMyXFx4MjBcXHg2M1xceDZGXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDM0XFx4MjBcXHg3MFxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzMFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDczXFx4NzRcXHg2MVxceDcyXFx4NzRcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2MVxceDIwXFx4NjhcXHg3MlxceDY1XFx4NjZcXHgzRFxceDIyXFx4NjhcXHg3NFxceDc0XFx4NzBcXHg3M1xceDNBXFx4MkZcXHgyRlxceDc3XFx4NzdcXHg3N1xceDJFXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRVxceDZGXFx4NzJcXHg2N1xceDJGXFx4NzBcXHg3MlxceDZGXFx4NjRcXHg3NVxceDYzXFx4NzRcXHg3M1xceDJGXFx4NzRcXHg3MlxceDYxXFx4NjZcXHg2NlxceDY5XFx4NjNcXHgyRFxceDYxXFx4NkVcXHg2MVxceDZDXFx4NzlcXHg3M1xceDY5XFx4NzNcXHgyRlxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkZcXHgyMlxceDIwXFx4NzRcXHg2MVxceDcyXFx4NjdcXHg2NVxceDc0XFx4M0RcXHgyMlxceDVGXFx4NjJcXHg2Q1xceDYxXFx4NkVcXHg2QlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDc2XFx4NjVcXHg3MlxceDczXFx4NjlcXHg2RlxceDZFXFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2MVxceDNFXFx4MjBcXHg3Q1xceDIwXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2N1xceDY5XFx4NzRcXHg2OFxceDc1XFx4NjJcXHgyMlxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIyXFx4M0VcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RVxceDc0XFx4MkRcXHg3M1xceDY5XFx4N0FcXHg2NVxceDNBXFx4MjBcXHgyRVxceDM4XFx4MzdcXHgzNVxceDY1XFx4NkRcXHgzQlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDYxXFx4NjdcXHg2NVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDY1XFx4NkVcXHg2NFxceDIwXFx4NzBcXHg3MlxceDJEXFx4NkRcXHg2NFxceDJEXFx4MzBcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2OVxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NlxceDYxXFx4NzNcXHgyMFxceDY2XFx4NjFcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDIwXFx4NzRcXHg2OVxceDc0XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg1M1xceDY1XFx4NzJcXHg3NlxceDY1XFx4NzJcXHgyMFxceDU0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2OVxceDNFXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NjNcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgyMFxceDU1XFx4NTRcXHg0M1xceDIwXFx4N0NcXHgyMFxceDU1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVxceDNBXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NzVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXCIsXCJcXHg2RVxceDc0XFx4NkZcXHg3MFxceDZFXFx4NjdcXHg1RlxceDcyXFx4NjVcXHg2Q1xceDY1XFx4NjFcXHg3M1xceDY1XFx4NUZcXHg2OVxceDZFXFx4NjZcXHg2RlwiLFwiXFx4N0NcIixcIlxceDczXFx4NzBcXHg2Q1xceDY5XFx4NzRcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NzZcXHg2NVxceDcyXFx4NzNcXHg2OVxceDZGXFx4NkVcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjdcXHg2OVxceDc0XFx4NjhcXHg3NVxceDYyXCIsXCJcXHhBOVxceDIwXFx4MzFcXHgzOVxceDM5XFx4MzhcXHgyRFwiLFwiXFx4NkVcXHg3NFxceDZGXFx4NzBcXHg1RlxceDYxXFx4NjdcXHg2NVxceDVGXFx4NzRcXHg2RlwiLFwiXFx4MjBcXHgyRFxceDIwXFx4NkVcXHg3NFxceDZGXFx4NzBcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjFcXHg2N1xceDY1XCIsXCJcXHg2MlxceDZGXFx4NjRcXHg3OVxceDIwXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2RFxceDYxXFx4NjlcXHg2RVwiLFwiXFx4NzBcXHg2MVxceDcyXFx4NjVcXHg2RVxceDc0XCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcIixcIlwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDcyXFx4NjVcXHg2RFxceDZGXFx4NzZcXHg2NVwiLFwiXFx4NkNcXHg2RlxceDYzXFx4NjFcXHg2Q1xceDc0XFx4NjlcXHg2RFxceDY1XCIsXCJcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDYzXFx4NjhcXHg2MVxceDcyXFx4NzRcXHg1RlxceDYzXFx4NkZcXHg2Q1xceDZGXFx4NzJcXHg3M1wiLFwiXFx4NkZcXHg2RVxceDVGXFx4NjNcXHg3NVxceDczXFx4NzRcXHg2RlxceDZEXFx4NUZcXHg2NVxceDc2XFx4NjVcXHg2RVxceDc0XCIsXCJcXHg3MlxceDY1XFx4NjFcXHg2NFxceDc5XCJdO2Z1bmN0aW9uIGkoKXtjb25zdCBfMHg2NDhjeDI9KF8weDY0OGN4Myk9PntyZXR1cm4gJChfMHg0YWU1WzNdKVtfMHg0YWU1WzJdXSgkKF8weDY0OGN4MylbXzB4NGFlNVsxXV0oKSlbXzB4NGFlNVswXV0oKX07bGV0IF8weDY0OGN4ND1fMHg0YWU1WzRdO2NvbnN0IF8weDY0OGN4NT0oKT0+e2xldCBfMHg2NDhjeDY9JChfMHg2NDhjeDQpO2xldCBfMHg2NDhjeDc9aTE4bihfMHg0YWU1WzVdKTtsZXQgXzB4NjQ4Y3g4PV8weDY0OGN4N1tfMHg0YWU1WzddXShfMHg0YWU1WzZdKTskKF8weDRhZTVbOF0sXzB4NjQ4Y3g2KVtfMHg0YWU1WzBdXShfMHg2NDhjeDhbMF0pOyQoXzB4NGFlNVs5XSxfMHg2NDhjeDYpW18weDRhZTVbMF1dKF8weDY0OGN4OFsxXSk7bGV0IF8weDY0OGN4OT1gJHtfMHg0YWU1WzEwXX0ke2kxOG4oXzB4NGFlNVsxMV0pfSR7XzB4NGFlNVsxMl19YDskKF8weDRhZTVbMTNdLF8weDY0OGN4NilbXzB4NGFlNVswXV0oXzB4NjQ4Y3g5KTtyZXR1cm4gXzB4NjQ4Y3gyKF8weDY0OGN4Nil9O2NvbnN0IF8weDY0OGN4YT1fMHg2NDhjeDUoKTtjb25zdCBfMHg2NDhjeGI9KCk9PnskKF8weDRhZTVbMTRdKVtfMHg0YWU1WzJdXShfMHg2NDhjeGEpfTtfMHg2NDhjeGIoKTtjb25zdCBfMHg2NDhjeGM9KCk9PntyZXR1cm4gJChfMHg0YWU1WzE2XSlbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKCl9O2NvbnN0IF8weDY0OGN4ZD0oKT0+e2xldCBfMHg2NDhjeGU9XzB4NjQ4Y3hjKCk7aWYoXzB4NjQ4Y3hlPT0gbnVsbCl7cmV0dXJuIGZhbHNlfTtsZXQgXzB4NjQ4Y3hmPV8weDY0OGN4ZVtfMHg0YWU1WzFdXSgpOyQoXzB4NGFlNVsxNl0sXzB4NjQ4Y3hmKVtfMHg0YWU1WzBdXShfMHg0YWU1WzE3XSk7JChfMHg0YWU1WzE4XSxfMHg2NDhjeGYpW18weDRhZTVbMF1dKF8weDRhZTVbMTddKTtjb25zdCBfMHg2NDhjeDEwPV8weDY0OGN4MihfMHg2NDhjeGYpO2lmKF8weDY0OGN4YSE9PSBfMHg2NDhjeDEwKXtyZXR1cm4gZmFsc2V9O3JldHVybiB0cnVlfTtjb25zdCBfMHg2NDhjeDExPSgpPT57bGV0IF8weDY0OGN4ZT1fMHg2NDhjeGMoKTtpZihfMHg2NDhjeGUhPSBudWxsKXtfMHg2NDhjeGVbXzB4NGFlNVsxOV1dKCl9fTtjb25zdCBfMHg2NDhjeDEyPShfMHg2NDhjeDEzKT0+eyQoXzB4NGFlNVsxNl0pW18weDRhZTVbMF1dKF8weDY0OGN4MTNbXzB4NGFlNVsyMF1dKTskKF8weDRhZTVbMThdKVtfMHg0YWU1WzBdXShfMHg2NDhjeDEzW18weDRhZTVbMjFdXSl9O250b3BuZ19ldmVudHNfbWFuYWdlcltfMHg0YWU1WzIzXV0oXzB4NGFlNVsyMl0sbnRvcG5nX2N1c3RvbV9ldmVudHMuR0VUX0lOVEVSRkFDRV9EQVRBLChfMHg2NDhjeDEzKT0+e2lmKF8weDY0OGN4ZCgpPT0gZmFsc2Upe18weDY0OGN4MTEoKTtfMHg2NDhjeGIoKX07XzB4NjQ4Y3gxMihfMHg2NDhjeDEzKX0pO30kKGRvY3VtZW50KVtfMHg0YWU1WzI0XV0oKCk9PntyZXR1cm4gaSgpfSk7XG4iXSwibmFtZXMiOlsiRGF0ZSIsInByb3RvdHlwZSIsImZvcm1hdCIsIm8iLCJ0aGlzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsIlMiLCJnZXRNaWxsaXNlY29uZHMiLCJrIiwidGVzdCIsInJlcGxhY2UiLCJSZWdFeHAiLCIkMSIsImdldEZ1bGxZZWFyIiwic3Vic3RyIiwibGVuZ3RoIiwialF1ZXJ5IiwiZm4iLCJleHRlbmQiLCJkaXNhYmxlIiwic3RhdGUiLCJlYWNoIiwiJHRoaXMiLCIkIiwiaXMiLCJkaXNhYmxlZCIsInRvZ2dsZUNsYXNzIiwiTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUiLCJSRUdFWEVTIiwiaXB2NCIsIlN0cmluZyIsInJhdyIsImlwdjYiLCJkb21haW5OYW1lIiwicG9ydCIsImxhdGVuY3kiLCJ1cmwiLCJlbWFpbFVybCIsIm1hY0FkZHJlc3MiLCJob3N0bmFtZSIsInVzZXJuYW1lIiwic2luZ2xld29yZCIsIm11bHRpd29yZCIsImVtYWlsIiwiZW1haWxDb21tYUxpc3QiLCJodHRwcyIsInRva2VuIiwic2NvcmUiLCJ0ZWxlZ3JhbV9jaGFubmVsIiwicGFzc3dvcmQiLCJ0bHNfY2VydGlmaWNhdGUiLCJkb21haW5fbmFtZV9ub3Rfc3RyaWN0Iiwibm9uX3F1b3RlZF90ZXh0IiwiTnRvcFV0aWxzIiwidG9nZ2xlT3ZlcmxheXMiLCJ0aW1lIiwidG9nZ2xlIiwic2hvd092ZXJsYXlzIiwiZmFkZUluIiwiaGlkZU92ZXJsYXlzIiwiZmFkZU91dCIsImdldElQdjRSZWdleFdpdGhDSURSIiwic3Vic3RyaW5nIiwiZ2V0SVB2NlJlZ2V4V2l0aENJRFIiLCJyZXNvbHZlRE5TIiwicmVxdWVzdCIsImZldGNoIiwiaHR0cF9wcmVmaXgiLCJqc29uIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwicmMiLCJyY19zdHIiLCJpbml0RGF0YVBhdHRlcm5zIiwiZGF0YVBhdHRlcm4iLCJkYXRhIiwid2FybiIsInBhdHRlcm4iLCJzcGxpdCIsIm1hcCIsInAiLCJ0b1N0cmluZyIsImpvaW4iLCJhdHRyIiwicmVtb3ZlQXR0ciIsImlzX2dvb2RfaXB2NCIsImlzX2dvb2RfaXB2NiIsImlzX21hY19hZGRyZXNzIiwibWFjIiwiaXNOdW1lcmljIiwidmFsdWUiLCJpc19uZXR3b3JrX21hc2siLCJ3aGF0Iiwib3B0aW9uYWxfbWFzayIsImlwX2FkZHIiLCJlbGVtcyIsIm1hc2siLCJwYXJzZUludCIsInR5cGUiLCJhZGRyZXNzIiwiZmJpdHMiLCJiaXRzIiwic2l6ZXMiLCJiaXRzX2xvZzEwMDAiLCJsb2ciLCJpIiwiaXNOYU4iLCJyb3VuZCIsInBvdyIsInJldCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZXhwb3J0X3JhdGUiLCJlcHMiLCJyZXMiLCJzY2FsZVZhbHVlIiwiZXhwb3J0c19mb3JtYXQiLCJleHBvcnRzIiwiZXhwb3J0c19sYWJlbCIsImkxOG5fZXh0IiwidG9Mb3dlckNhc2UiLCJmYml0c19mcm9tX2J5dGVzIiwiYnl0ZXMiLCJmcGFja2V0cyIsInBwcyIsImZwb2ludHMiLCJmZmxvd3MiLCJmcHMiLCJmbXNncyIsIm1wcyIsImZtaWxsaXMiLCJtcyIsInVuZGVmaW5lZCIsImZub25lIiwidmFsIiwiZmFsZXJ0cyIsImFwcyIsImZpbnQiLCJmZmxvYXQiLCJmcGVyY2VudCIsInBlcmNlbnRhZ2UiLCJ0b3RhbCIsInBjdGciLCJmZGF0ZSIsIndoZW4iLCJjYXBpdGFsaXNlRmlyc3RMZXR0ZXIiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiZ2V0X3RyZW5kIiwiYWN0dWFsIiwiYmVmb3JlIiwiYWJicmV2aWF0ZVN0cmluZyIsInN0ciIsImxlbiIsInRvRml4ZWQyIiwibnVtIiwiYnl0ZXNUb1NpemUiLCJraWxvYnl0ZSIsIm1lZ2FieXRlIiwiZ2lnYWJ5dGUiLCJ0ZXJhYnl0ZSIsImRyYXdUcmVuZCIsImN1cnJlbnQiLCJsYXN0Iiwid2l0aENvbG9yIiwidG9nZ2xlQWxsVGFicyIsImVuYWJsZWQiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImRpc2FibGVBbGxEcm9wZG93bnNBbmRUYWJzIiwicHJvcCIsImVuYWJsZUFsbERyb3Bkb3duc0FuZFRhYnMiLCJjYXBpdGFsaXplIiwicyIsImFkZENvbW1hcyIsIm5TdHIiLCJ4IiwieDEiLCJ4MiIsInJneCIsInNjYWxlIiwiZGVjaW1hbHMiLCJmYWN0b3IiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdFBhY2tldHMiLCJuIiwiYnl0ZXNUb1ZvbHVtZSIsImJ5dGVzVG9Wb2x1bWVBbmRMYWJlbCIsImJpdHNUb1NpemUiLCJiaXRzVG9TaXplX25vX2NvbW1hIiwic2Vjb25kc1RvVGltZSIsInNlY29uZHMiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2VjIiwibXNnIiwibXNnX2FycmF5IiwieWVhcnMiLCJwdXNoIiwibXNlY1RvVGltZSIsIm1zZWMiLCJlcG9jaDJTZWVuIiwiZXBvY2giLCJkIiwidGRpZmYiLCJnZXRUaW1lIiwiZ3JhcGhHZXRYQXhpc1RpY2tzRm9ybWF0IiwiZGlmZl9lcG9jaCIsInBhcmFtc0V4dGVuZCIsImRlZmF1bHRzIiwib3ZlcnJpZGUiLCJwYXJhbXNUb0Zvcm0iLCJmb3JtIiwicGFyYW1zIiwiaGFzT3duUHJvcGVydHkiLCJhcHBlbmRUbyIsInBhcmFtc1BhaXJzRW5jb2RlIiwiaG9zdGtleTJob3N0SW5mbyIsImhvc3Rfa2V5IiwiaGFuZGxlX3RhYl9zdGF0ZSIsIm5hdl9vYmplY3QiLCJkZWZhdWx0X3RhYiIsImNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0Iiwib24iLCJpZCIsInRhcmdldCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJ0YWIiLCJfYWRkX2ZpbmRfaG9zdF9saW5rIiwibmFtZSIsIm1ha2VGaW5kSG9zdEJlZm9yZVN1Ym1pdENhbGxiYWNrIiwiY29udGV4dCIsImlwIiwiY29tbXVuaXR5X2lkIiwiamEzX2NsaWVudCIsImphM19zZXJ2ZXIiLCJuZXR3b3JrIiwic25tcF9wb3J0X2lkeCIsImFzbiIsInRzdGFtcFRvRGF0ZVN0cmluZyIsImh0bWxfdGFnIiwidGltZXN0YW1wIiwiaHRtbCIsImxvY2FsaXplZCIsImQzIiwibm9IdG1sIiwiY2xlYW5DdXN0b21Ib3N0VXJsIiwiaG9zdCIsInBhcnNlUXVlcnkiLCJxdWVyeVN0cmluZyIsInF1ZXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2V0SGlzdG9yeVBhcmFtZXRlcnMiLCJjdXJfcGFyYW1zIiwic2VhcmNoIiwibmV3X3BhcmFtcyIsIm5ld19xdWVyeSIsInBhcmFtIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsImNoZWNrX3N0YXR1c19jb2RlIiwic3RhdHVzX2NvZGUiLCJzdGF0dXNfdGV4dCIsIiRlcnJvcl9sYWJlbCIsImlzX2RpZmZlcmVudCIsIm1lc3NhZ2UiLCJyZXF1ZXN0X2ZhaWxlZF9tZXNzYWdlIiwidGV4dCIsInNob3ciLCJhbGVydCIsImltcG9ydE1vZGFsSGVscGVyIiwibG9hZENvbmZpZ1hIUiIsImhpZGUiLCIkYnV0dG9uIiwiZmlsZSIsImZpbGVzIiwibm9fZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNUZXh0Iiwib25sb2FkIiwianNvbkNvbmZpZ3VyYXRpb24iLCJKU09OIiwicGFyc2UiLCJyZXN1bHQiLCJyZXN0X2NvbnN0cyIsInJlc3BvbnNlSlNPTiIsImRvbmUiLCJyZXNwb25zZSIsInN0YXR1cyIsInhociIsInN1Y2Nlc3NDYWxsYmFjayIsImJvZHkiLCJpMThuIiwiVG9hc3RVdGlscyIsInNob3dUb2FzdCIsImxldmVsIiwidGl0bGUiLCJkZWxheSIsIm1vZGFsIiwiZmFpbCIsImZhaWx1cmVDYWxsYmFjayIsIkZBSUxFRF9IVFRQX1JFUVVFU1QiLCJhbHdheXMiLCJzZXJpYWxpemVGb3JtQXJyYXkiLCJzZXJpYWxpemVkQXJyYXkiLCJzZXJpYWxpemVkIiwiZm9yRWFjaCIsIm9iaiIsImluY2x1ZGVzIiwidHJpbSIsImNsZWFuRm9ybSIsImZvcm1TZWxlY3RvciIsImlucHV0IiwicmVzZXQiLCJmZXRjaFdpdGhUaW1lb3V0IiwidXJpIiwib3B0aW9ucyIsImNvbmZpZyIsInNpZ25hbCIsIkFib3J0Q29udHJvbGxlciIsInRoZW4iLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImNhdGNoIiwic2V0UHJlZiIsImFjdGlvbiIsImNzcmYiLCJzdWNjZXNzIiwiZmFpbHVyZSIsImVtcHR5IiwicG9zdCIsImFycmF5VG9MaXN0U3RyaW5nIiwiYXJyYXkiLCJsaW1pdCIsImFuZF94X21vcmUiLCJidWlsZFVSTCIsImhhc1JlZmVyZXIiLCJyZWZlcmVyUGFyYW1zIiwiVVJMIiwiT2JqZWN0IiwiZW50cmllcyIsInNlYXJjaFBhcmFtcyIsInNldCIsInJlZlVybCIsImhyZWYiLCJnZXRFZGl0UG9vbExpbmsiLCJwb29sSWQiLCJnZXRQb29sTGluayIsInBvb2xUeXBlIiwiZ2V0UG9vbCIsInBvb2wiLCJyc3AiLCJzYXZlRWxlbWVudFNjYWxlIiwiJGVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsImtleSIsImdlbmVyYXRlU2NhbGVFbGVtZW50S2V5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImlkZW50aWZpY2F0b3IiLCJwYWdlIiwiZWxlbWVudElkIiwibG9hZEVsZW1lbnRTY2FsZSIsImN1cnJlbnRWYWx1ZSIsImdldEl0ZW0iLCJmaWxsRmllbGRJZlZhbGlkIiwiJGZpZWxkIiwiY29weVRvQ2xpcGJvYXJkIiwiaXRlbSIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJhcHBlbmRDaGlsZCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJ0b29sdGlwIiwic3RyaXBUYWdzIiwidCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0Iiwic2hvcnRlbkxhYmVsIiwibGFiZWwiLCJsYXN0X2NoYXIiLCJzaG9ydGVuZWRfbGFiZWwiLCJsYXN0X2luZGV4IiwibGFzdEluZGV4T2YiLCJyZXF1ZXN0ZWRfbGFiZWwiLCJzb3J0QWxwaGFiZXRpY2FsbHkiLCJhIiwiYiIsIm5hbWVBIiwibmFtZUIiLCJmb3JtYXROYW1lVmFsdWUiLCJtYXhfbmFtZV9sZW4iLCJyZW1vdmVWbGFuIiwidmxhbl9pbmRleCIsImZvcm1hdEdlbmVyaWNPYmoiLCJyb3ciLCJmb3JtYXRDb3VudHJ5IiwiY291bnRyeV9jb2RlIiwiZm9ybWF0SG9zdCIsImlzX2NsaWVudCIsInZsYW5faWQiLCJjb3VudHJ5X29iaiIsImNsaV9jb3VudHJ5Iiwic3J2X2NvdW50cnkiLCJjb3VudHJ5IiwiZm9ybWF0TmV0d29yayIsIm5ldHdvcmtfa2V5IiwiY29udmVydElQQWRkcmVzcyIsIm0iLCJ4YSIsImNvdW50IiwicGFkZERvbmUiLCJwYWRkaW5nIiwiZm9ybWF0QVNOIiwiYXNuX2tleSIsImNyZWF0ZVByb2dyZXNzQmFyIiwiY3JlYXRlQnJlYWtkb3duIiwicGVyY2VudGFnZV8xIiwicGVyY2VudGFnZV8yIiwibGFiZWxfMSIsImxhYmVsXzIiLCJnZXROdW1UYWJsZVJvd3MiLCJmb3JtYXRBcGV4Q2hhcnRMYWJlbEZyb21YYW5kTmFtZSIsInNlcmllcyIsInNlcmllc0luZGV4IiwiZGF0YVBvaW50SW5kZXgiLCJ3Iiwic2VyaWUiLCJ5X3ZhbHVlIiwieGF4aXMiLCJ5YXhpcyIsImFwZXhDaGFydEp1bXBUb0FsZXJ0cyIsImV2ZW50IiwiY2hhcnRDb250ZXh0IiwiYmFzZV91cmwiLCJkZWZhdWx0X3VybCIsInN0YXJ0X3VybCIsIm1ldGEiLCJ1cmxfcXVlcnkiLCJhcGV4Q2hhcnRKdW1wVG9Ib3N0RGV0YWlscyIsIm50b3BuZ191cmxfbWFuYWdlciIsImdvX3RvX3VybCIsImZvcm1hdEFwZXhDaGFydExhYmVsRnJvbVhhbmRZIiwieF92YWx1ZSIsImRhdGF0YWJsZUFkZEVtcHR5Um93IiwidGFibGUiLCJlbXB0eV9zdHIiLCJjb2x1bW5zIiwiZmlsdGVyIiwiY3NzIiwiZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMiLCJkYXRhdGFibGVJc0VtcHR5IiwiZGF0YXRhYmxlR2V0QnlGb3JtIiwicGFyZW50IiwiZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2siLCJ0ZF9pZHgiLCJic19jbGFzcyIsImNhbGxiYWNrX3N0ciIsImxpbmsiLCJ2aXNpYmxlIiwiYXBwZW5kIiwiZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXgiLCJjb2x1bW5fa2V5IiwiZmluZEluZGV4IiwiZmllbGQiLCJncmFwaF9kaXZfaWQiLCJsaW5rcyIsIm5vZGVzIiwiX2xpbmsiLCJzb3VyY2VfcGlkIiwic291cmNlIiwic291cmNlX25hbWUiLCJzb3VyY2VfdHlwZSIsInBpZCIsInRhcmdldF9waWQiLCJ0YXJnZXRfbmFtZSIsInRhcmdldF90eXBlIiwiY29sb3IiLCJjYXRlZ29yeTEwIiwiZm9yY2UiLCJsYXlvdXQiLCJ2YWx1ZXMiLCJzaXplIiwibGlua0Rpc3RhbmNlIiwiY2hhcmdlIiwicGF0aCIsImxpbmtBcmMiLCJjaXJjbGUiLCJ0cmFuc2Zvcm0iLCJzdGFydCIsInN2ZyIsInNlbGVjdEFsbCIsImVudGVyIiwiY2FsbCIsImRyYWciLCJkeCIsImR5IiwieSIsImRyIiwic3FydCIsIk1vZGFsSGFuZGxlciIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImRpYWxvZyIsImNsb3Nlc3QiLCJkb250RGlzYWJsZVN1Ym1pdCIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImxpc3QiLCJiaW5kRm9ybVZhbGlkYXRpb24iLCJ0b2dnbGVGb3JtU3VibWlzc2lvbiIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiaW5pdGlhbFN0YXRlIiwiY3VycmVudFN0YXRlIiwiZmlyc3RDbG9zZUF0dGVtcHQiLCJpc1N1Ym1pdHRpbmciLCJjcmVhdGVGb3JtU25hcHNob3QiLCJzbmFwc2hvdCIsImlucHV0cyIsImhpZGRlbiIsImNvbXBhcmVGb3JtU25hcGhzb3QiLCJzMSIsInMyIiwiZGVsZWdhdGVNb2RhbENsb3NpbmciLCJzZWxmIiwib2ZmIiwicmVwb3J0VmFsaWRpdHkiLCJzZWxlY3RvciIsIiRoaWRkZW4iLCJmaWxsRm9ybU1vZGFsIiwibG9hZEZvcm1EYXRhIiwiaW52b2tlTW9kYWxJbml0Iiwib25Nb2RhbEluaXQiLCJwYXJlbnRzIiwib25Nb2RhbFNob3ciLCJkZWxlZ2F0ZVJlc2V0QnV0dG9uIiwiZGVsZWdhdGVTdWJtaXQiLCJzdWJtaXRIYW5kbGVyIiwiaXNTeW5jUmVxdWVzdCIsInN0b3BQcm9wYWdhdGlvbiIsIm1ha2VSZXF1ZXN0IiwiYXN5bmMiLCIkaW5wdXQiLCJ0aW1lb3V0SWQiLCJ2YWxpZElucHV0IiwidmFsaWRhdGlvbiIsIm1hdGNoIiwiJHNwaW5uZXIiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJjX3N0cl9ociIsInZhbGlkSG9zdG5hbWUiLCJjYW5ub3RCZUVtcHR5IiwiaXNJbnB1dEVtcHR5IiwidmFsaWRhdGlvbkVtcHR5TWVzc2FnZSIsIm1pc3NpbmdfZmllbGQiLCJ2YWxpZGl0eSIsInBhdHRlcm5NaXNtYXRjaCIsInZhbGlkYXRpb25NZXNzYWdlIiwiaW52YWxpZF9maWVsZCIsInJhbmdlT3ZlcmZsb3ciLCJyYW5nZU92ZXJmbG93TWVzc2FnZSIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VVbmRlcmZsb3dNZXNzYWdlIiwiY2hlY2tWYWxpZGF0aW9uIiwiaXNWYWxpZCIsIm1lc3NhZ2VUb1Nob3ciLCIkZXJyb3IiLCJyZW1vdmUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZ2V0TW9kYWxJRCIsImlkeCIsInZhbGlkIiwiJGZlZWRiYWNrTGFiZWwiLCJzdWJtaXRCdXR0b24iLCJkYXRhVG9TZW5kIiwiYmVmb3JlU3VtYml0Iiwic3VibWl0T3B0aW9ucyIsImVuZHBvaW50IiwibWV0aG9kIiwiYWpheCIsImRhdGFUeXBlIiwiY29udGVudFR5cGUiLCJnZXQiLCJ0ZXh0U3RhdHVzIiwicmVzZXRBZnRlclN1Ym1pdCIsIm9uU3VibWl0U3VjY2VzcyIsImpxeGhyIiwiZXJyb3JUaHJvd24iLCJvblN1Ym1pdEVycm9yIiwicmVzZXRCdXR0b24iLCJkZWZhdWx0VmFsdWVzIiwic2VyaWFsaXplQXJyYXkiLCJ0eXBlcyIsIm5vX2Zvcm1hdHRpbmciLCJ1bSIsInN0ZXAiLCJkZWNpbWFsIiwic2NhbGVfdmFsdWVzIiwibnVtYmVyIiwiZnVsbF9udW1iZXIiLCJ0aG91c2FuZHNfc2VwIiwiYWJzb2x1dGVfdmFsdWUiLCJicHMiLCJzcGVlZCIsImZsb3dzIiwiYWxlcnRzIiwiYWxlcnRwcyIsImhpdHMiLCJoaXRzcyIsInBhY2tldHMiLCJtYXhfdmFsdWUiLCJnZXRVbml0TWVhc3VyZUxlbiIsInNwYWNlVmFsdWUiLCJzcGFjZVVtIiwibWF4IiwiZ2V0U2NhbGVGYWN0b3JJbmRleCIsInR5cGVPcHRpb25zIiwibWVhc3VyZXMiLCJnZXRGb3JtYXR0ZXIiLCJhYnNvbHV0ZVZhbHVlIiwic2NhbGVGYWN0b3JJbmRleCIsIm5lZ2F0aXZlVmFsdWUiLCJmb3JtYXR0ZXJVdGlscyIsImRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyIsImNvbHVtbl9pZCIsInJlZnJlc2hfaW50ZXJ2YWwiLCJ0cmVuZF9jb2x1bW5zIiwiJGR0Iiwicm93cyIsInJlc3VsdHNldCIsIm9sZF90aW1lciIsIm9sZF9yZXEiLCJjbGVhckludGVydmFsIiwicmVtb3ZlRGF0YSIsImFib3J0IiwiaWRzIiwiaWRfdG9fcm93IiwiZGF0YV9pZCIsImN1c3RvbV9ob3N0cyIsImZpcnN0X2xvYWQiLCJfcHJvY2Vzc19yZXN1bHQiLCJyb3dfaWR4Iiwicm93X2h0bWwiLCJyb3dfdGRzIiwiY2VsbCIsIiRjZWxsIiwib2xkX3ZhbCIsInRyZW5kX3ZhbHVlX2Zvcm1hdHRlciIsIm5ld192YWwiLCJhcnJvd3MiLCJzZXRJbnRlcnZhbCIsImNhY2hlIiwiZGF0YXRhYmxlRm9yRWFjaFJvdyIsImNhbGxiYWNrcyIsInJvd19pIiwiYmluZCIsImRhdGF0YWJsZVJlbW92ZUVtcHR5Um93IiwiZGF0YXRhYmxlVW5kb0FkZFJvdyIsIm5ld19yb3ciLCJidF90b19lbmFibGUiLCJheXNVcGRhdGVGb3JtIiwiZHQiLCJkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrIiwiZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlIiwidHJfb2JqIiwiYWRkZWRfcm93c19wcmVmaXgiLCJkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuIiwidGhpc19zZWxlY3QiLCJzZWxlY3Rvcl9mbiIsImNhbGxiYWNrIiwib3RoZXIiLCJkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMiLCJvcHRpb25fb2JqIiwiZW5hYmxlIiwic2VsZWN0X29iaiIsInNob3VsZF9yZXNldCIsImZpcnN0IiwiZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZSIsImNoYW5nZV9jYWxsYmFjayIsIm9sZF92YWx1ZSIsIm5ld192YWx1ZSIsIm90aGVycyIsIm9uX2NoYW5nZSIsIm5vb3AiLCJ0cmlnZ2VyIiwiZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeSIsImRhdGF0YWJsZUlzTGFzdFBhZ2UiLCJsYXN0cGFnZSIsImhhc0NsYXNzIiwiZGF0YXRhYmxlR2V0Q29sdW1uIiwiaWRfa2V5IiwiaWRfdmFsdWUiLCJtb2RhbEhhbmRsZXIiLCJhcmdzIiwibG9hZGVkRGF0YSIsInNlbnQiLCJvbk1vZGFsUmVzZXQiLCJkZWZhdWx0RGF0YSIsIm1oIiwiZWJwZlV0aWxzIiwibnRvcEZvcm1hdHRlclV0aWxzIiwiZmlsdGVyc190b192YWxpZGF0ZSIsIm1ha2VVbmlxdWVWYWxpZGF0b3IiLCJpdGVtc19mdW5jdGlvbiIsImNtcF9uYW1lIiwibWVtYmVyVmFsdWVWYWxpZGF0b3IiLCJtZW1iZXIiLCJtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yIiwicGFzc3dvcmRNYXRjaFZhbGlkYXRvciIsIm90aGVyX2lucHV0Iiwibm90IiwicG9vbG5hbWVWYWxpZGF0b3IiLCJwYXNzd29yZE1hdGNoUmVjaGVjayIsIml0ZW1zIiwibm90X2VtcHR5IiwiaG9zdE9yTWFjVmFsaWRhdG9yIiwiaXBBZGRyZXNzVmFsaWRhdG9yIiwiYnBmVmFsaWRhdG9yIiwiZmlsdGVyX2ZpZWxkIiwic3luYyIsImFqYXhfb2JqIiwidGltZXIiLCJzdWJtaXRfcmVtaW5kIiwibGFzdF92YWwiLCJzZW5kQWpheCIsImZpbmFsbHlfY2hlY2siLCJudG9wbmdfc3luYyIsImNvbXBvbmVudHNfcmVhZHkiLCJzdWJzY3JpYmVycyIsInJlYWR5IiwiY29tcG9uZW50X25hbWUiLCJyZXNvbHZlIiwib25fcmVhZHkiLCJQcm9taXNlIiwicmVqZXZ0IiwiY29tcGxldGVkIiwibnRvcG5nX3V0aWxpdHkiLCJnbG9iYWxfaHR0cF9oZWFkZXJzIiwiaXNfYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJpc19vYmplY3QiLCJjbG9uZSIsIm9iamVjdF90b19hcnJheSIsImdldF91dGNfc2Vjb25kcyIsInV0Y19tcyIsIm5vdyIsIk51bWJlciIsImdldF90aW1lZnJhbWVzX2RpY3QiLCJtaW4iLCJ0X2RheSIsInRfd2VlayIsInRfbW9udGgiLCJ0X3llYXIiLCJob3VyIiwiZGF5Iiwic2V0RGF0ZSIsIndlZWsiLCJtb250aCIsInNldE1vbnRoIiwieWVhciIsImdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQiLCJ0aW1lZnJhbWVfaWQiLCJ0aW1lZnJhbWVzX2RpY3QiLCJrZXlzIiwicm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQiLCJ0cyIsInNldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwiLCJ0aW1lX2ludGVydmFsX2lkIiwicm91bmRfdGltZWZyYW1lX2lkIiwiZXBvY2hfYmVnaW4iLCJnZXRfdXJsX2VudHJ5IiwiZXBvY2hfZW5kIiwibm93X3MiLCJzZWNvbmRzX2luX2ludGVydmFsIiwic2V0X2tleV90b191cmwiLCJjaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCIsImZfY29uZGl0aW9uIiwiZ2V0X2Vwb2NoIiwiZ2V0X3VybF9lcG9jaF9pbnRlcnZhbCIsImZyb21fdXRjX3NfdG9fc2VydmVyX2RhdGUiLCJ1dGNfc2Vjb25kcyIsInV0YyIsImxvY2FsX29mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0Iiwic2VydmVyX29mZnNldCIsIm1vbWVudCIsInR6IiwibnRvcF96b25laW5mbyIsIl9vZmZzZXQiLCJnZXRfZGF0ZV9mb3JtYXQiLCJpc19yYW5nZV9waWNrZXIiLCJyZXN0X3BhcmFtcyIsImRhdGVfZm9ybWF0X3VybCIsImh0dHBfcmVxdWVzdCIsImZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdCIsImNvcHlfb2JqZWN0X2tleXMiLCJzb3VyY2Vfb2JqIiwiZGVzdF9vYmoiLCJyZWN1cnNpdmVfb2JqZWN0IiwiZ2V0X2N2ZV9kZXRhaWxzX3VybCIsImN2ZV9pZCIsInNjYW5fdHlwZSIsInNldF9odHRwX2dsb2JhbHNfaGVhZGVycyIsImhlYWRlcnMiLCJodHRwX3Bvc3RfcmVxdWVzdCIsInRocm93X2V4Y2VwdGlvbiIsIm5vdF91bndyYXAiLCJqc29uX3JlcyIsImRvd25sb2FkX1VSSSIsImRvd25sb2FkIiwiZ2V0X3JhbmRvbV9zdHJpbmciLCJyYW5kb20iLCJzdHJpbmdfaGFzaF9jb2RlIiwiY2hyIiwiY2hhckNvZGVBdCIsIm1vZCIsIm50b3BuZ19zdGF0dXNfbWFuYWdlciIsImdsb2JhbF9zdGF0dXMiLCJub3RpZnlfc3Vic2NyaWJlcnMiLCJza2lwX2lkIiwiZl9vbl9jaGFuZ2UiLCJnZXRfc3RhdHVzIiwibm90X2Nsb25lIiwidXBkYXRlX3N1YnNjcmliZXJzIiwib25fc3RhdHVzX2NoYW5nZSIsImdldF9pbml0X25vdGlmeSIsInJlcGxhY2Vfc3RhdHVzIiwicmVscGxhY2VfZ2xvYmFsX3N0YXR1cyIsImFkZF9vYmpfdG9fc3RhdHVzIiwibmV3X3N0YXR1cyIsImFkZF92YWx1ZV90b19zdGF0dXMiLCJudG9wbmdfcGFyYW1zX3VybF9zZXJpYWxpemVyIiwiY3VzdG9tX3BhcmFtc19zZXJpYWxpemVyIiwiZ2V0X3VybF9wYXJhbXMiLCJnZXRfdXJsX3NlYXJjaF9wYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJnZXRfdXJsX2VudHJpZXMiLCJwYXJhbV9uYW1lIiwiZ2V0X3VybF9vYmplY3QiLCJvcGVuX25ld193aW5kb3ciLCJvcGVuIiwicmVsb2FkX3VybCIsInJlbG9hZCIsInB1c2hTdGF0ZSIsInJlcGxhY2VfdXJsIiwidXJsX3BhcmFtcyIsInJlcGxhY2VfdXJsX2FuZF9yZWxvYWQiLCJzZXJpYWxpemVfcGFyYW0iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXRfY3VzdG9tX2tleV9zZXJpYWxpemVyIiwiZl9nZXRfdXJsX3BhcmFtIiwib2JqX3RvX3VybF9wYXJhbXMiLCJkZWZhdWx0X3NlcmlhbGl6ZXIiLCJzZXJpYWxpemVyIiwiZGVsZXRlX3BhcmFtcyIsInBhcmFtc19rZXkiLCJzZWFyY2hfcGFyYW1zIiwiZGVsZXRlIiwiZGVsZXRlX2tleV9mcm9tX3VybCIsImFkZF9vYmpfdG9fdXJsIiwidXJsX3BhcmFtc19vYmoiLCJuZXdfdXJsX3BhcmFtcyIsIm5ld19lbnRyaWVzIiwibmV3X3VybCIsIm50b3BuZ19ldmVudHMiLCJFUE9DSF9DSEFOR0UiLCJGSUxURVJTX0NIQU5HRSIsIm50b3BuZ19ldmVudHNfY29tcGFyZSIsIm9sZF9zdGF0dXMiLCJmaWx0ZXJzIiwic29tZSIsImZfbmV3IiwiZl9vbGQiLCJudG9wbmdfY3VzdG9tX2V2ZW50cyIsIlNIT1dfTU9EQUxfRklMVEVSUyIsIk1PREFMX0ZJTFRFUlNfQVBQTFkiLCJTSE9XX0dMT0JBTF9BTEVSVF9JTkZPIiwiVklTX0RBVEFfTE9BREVEIiwiQ0hBTkdFX1BBR0VfVElUTEUiLCJEQVRBVEFCTEVfTE9BREVEIiwiR0VUX0lOVEVSRkFDRV9GQVRBIiwiQ09NUE9ORU5UX0VQT0NIX0lOVEVSVkFMX0NIQU5HRSIsIm50b3BuZ19ldmVudHNfbWFuYWdlciIsImV2ZW50c19tYW5hZ2VyX2lkIiwiZXZlbnRzX3N1YnNjcmliZXJzIiwiZ2V0X2V2ZW50X2Zvcl9zaW5nbGVfZGVzdCIsImRlc3RfaWQiLCJldmVudF9uYW1lIiwiZl9jb21wYXJlIiwiZW1pdCIsIm9uX2V2ZW50IiwiZl9vbl9ldmVudCIsImlzX3NpbmdsZV9kZXN0X2V2ZW50IiwiZW1pdF9jdXN0b21fZXZlbnQiLCJvbl9jdXN0b21fZXZlbnQiLCJlbWl0X2V2ZW50Iiwib25fZXZlbnRfY2hhbmdlIiwiUGllQ2hhcnQiLCJ1cGRhdGVfdXJsIiwidW5pdHMiLCJyZWZyZXNoIiwic3RyZWFrZXJEYXRhQWRkZWQiLCJwYXRocyIsImxpbmVzIiwidmFsdWVMYWJlbHMiLCJuYW1lTGFiZWxzIiwicGllRGF0YSIsIm9sZFBpZURhdGEiLCJmaWx0ZXJlZFBpZURhdGEiLCJoIiwiaXIiLCJ0ZXh0T2Zmc2V0IiwidHdlZW5EdXJhdGlvbiIsInIiLCJkb251dCIsInBpZSIsImNhdGVnb3J5MjAiLCJhcmMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwidmlzIiwiYXJjX2dyb3VwIiwibGFiZWxfZ3JvdXAiLCJjZW50ZXJfZ3JvdXAiLCJ0b3RhbFVuaXRzIiwidG90YWxWYWx1ZSIsImNyZWF0ZV9waWVfY2hhcnQiLCJjb21wYXJlX2J5X2xhYmVsIiwicGllVHdlZW4iLCJzMCIsImUwIiwiaW50ZXJwb2xhdGUiLCJyZW1vdmVQaWVUd2VlbiIsIlBJIiwidGV4dFR3ZWVuIiwiaW50ZXJwb2xhdGVOdW1iZXIiLCJjb3MiLCJzaW4iLCJ1cGRhdGUiLCJjb250ZW50IiwicGFyc2VkX2NvbnRlbnQiLCJwYXJzZUpTT04iLCJzb3J0IiwidG90YWxPY3RldHMiLCJmaWx0ZXJEYXRhIiwiaW5kZXgiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJhdHRyVHdlZW4iLCJleGl0IiwidXBkYXRlX3BpZV9jaGFydCIsInNldFVybFBhcmFtcyIsImZvcmNlVXBkYXRlIiwic3RvcEludGVydmFsIiwic3RhcnRJbnRlcnZhbCIsInBfcGllSW50ZXJ2YWwiLCJwaWVJbnRlcnZhbCIsIkRFRklORURfV0lER0VUUyIsIkRFRklORURfRVZFTlRTIiwiZGJfYW5hbHl6ZSIsImZpbHRlcmluZ19sYWJlbHMiLCJvcGVyYXRvciIsIm5vbmUiLCJzdGFuZGFyZCIsIkRFRklORURfVE9PTFRJUCIsImZvcm1hdF9ieXRlcyIsImZvcm1hdF9wa3RzIiwiZm9ybWF0X3ZhbHVlIiwiZm9ybWF0X211bHRpcGxlX2RhdGUiLCJmb3JtYXRfbGFiZWxfZnJvbV94eSIsImZvcm1hdF9sYWJlbF9mcm9tX3huYW1lIiwiREVGQVVMVF9GT1JNQVRURVIiLCJXaWRnZXRVdGlscyIsInJlZ2lzdGVyV2lkZ2V0Iiwid2lkZ2V0IiwiZ2V0V2lkZ2V0QnlOYW1lIiwid2lkZ2V0TmFtZSIsIldpZGdldCIsImRhdGFzb3VyY2UiLCJ1cGRhdGVUaW1lIiwiYWRkaXRpb25hbFBhcmFtcyIsIl9mZXRjaGVkRGF0YSIsIl91cGRhdGVUaW1lIiwiX2RhdGFzb3VyY2UiLCJfYWRkaXRpb25hbFBhcmFtcyIsImluaXQiLCJfZmV0Y2hEYXRhIiwiZGVzdHJveSIsImRlc3Ryb3lBbmRVcGRhdGUiLCJkYXRhc291cmNlUGFyYW1zIiwidXBkYXRlQnlVcmwiLCJ1Iiwib3JpZ2luIiwicmVxIiwiZml4U3ViTWVudVBvc2l0aW9uIiwiJHN1Ym1lbnUiLCIkaG92ZXJCdXR0b24iLCJkaXN0RnJvbUFib3ZlIiwidG9wIiwic3VibWVudUhlaWdodCIsImRvY3VtZW50SGVpZ2h0IiwiY3VycmVudFN1Ym1lbnVIZWlnaHQiLCJvdXRlckhlaWdodCIsInNjcm9sbFRvcCIsInRvZ2dsZVNpZGViYXIiLCIkbGF5ZXIiLCJtb3VzZWVudGVyIiwic3VibWVudSIsIm1vdXNlbGVhdmUiLCIkY3VycmVudFN1Ym1lbnUiLCJudG9wQ2hhcnRBcGV4IiwiX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMiLCJjaGFydCIsInRvb2xiYXIiLCJ0b29scyIsInpvb21vdXQiLCJ6b29taW4iLCJ6b29tIiwic2VsZWN0aW9uIiwicGFuIiwiZXZlbnRzIiwibGFiZWxzIiwiY29sb3JzIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY3NzQ2xhc3MiLCJyb3RhdGUiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImdyaWQiLCJsZWdlbmQiLCJfc2V0WFRpbWVGb3JtYXR0ZXIiLCJjaGFydE9wdGlvbnMiLCJmb3JtYXR0ZXIiLCJfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zIiwic3RhY2tlZCIsImRhdGV0aW1lVVRDIiwiYXhpc1RpY2tzIiwiYXhpc0JvcmRlciIsImNvbnZlcnRlZENhdFRvTnVtZXJpYyIsImRhdGFMYWJlbHMiLCJzdHJva2UiLCJjdXJ2ZSIsImZpbGwiLCJfZGVmYXVsdF9UU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyIsIl9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyIsIlRTX1NUQUNLRURfQ2hhcnRPcHRpb25zIiwib3B0cyIsIl9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyIsIkZvcm1hdHRlclV0aWxzIiwibm9EYXRhIiwiZm9udEZhbWlseSIsIl9kZWZhdWx0X1RTX1JBRElBTEJBUl9DaGFydE9wdGlvbnMiLCJwbG90T3B0aW9ucyIsInJhZGlhbEJhciIsImhvbGxvdyIsIm1hcmdpbiIsImJhY2tncm91bmQiLCJpbWFnZSIsImZsb2F0aW5nIiwidXNlU2VyaWVzQ29sb3JzIiwibWFya2VycyIsInNlcmllc05hbWUiLCJnbG9iYWxzIiwiaXRlbU1hcmdpbiIsInZlcnRpY2FsIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zIiwiX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMiLCJzaGFyZWQiLCJfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zIiwiVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyIsImF1dG9TY2FsZVlheGlzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwiZm9yY2VOaWNlU2NhbGUiLCJjdXN0b20iLCJ0eXBlQ2hhcnQiLCJUU19MSU5FIiwiVFNfU1RBQ0tFRCIsIlRTX0NPTFVNTiIsIlBJRSIsIkRPTlVUIiwiUkFESUFMQkFSIiwiUkFEQVIiLCJCVUJCTEUiLCJCQVNFIiwibmV3Q2hhcnQiLCJfY2hhcnQiLCJfY2hhcnRPcHRpb25zIiwiUE9MQVIiLCJzZXRZYXhpc0Zvcm1hdHRlciIsImNoYXJ0Rm9ybWF0dGVyIiwiZHJhd0NoYXJ0IiwiaHRtbEVsZW1lbnQiLCJBcGV4Q2hhcnRzIiwicmVuZGVyIiwidG9fZGF0YV91cmkiLCJkYXRhVVJJIiwiaW1nVVJJIiwiZGVzdHJveUNoYXJ0IiwidXBkYXRlQ2hhcnQiLCJ1cGRhdGVPcHRpb25zIiwidXBkYXRlU2VyaWVzIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50TmFtZSIsIkRhdGFUYWJsZUhhbmRsZXJzIiwiaGFuZGxlcnNJZERpY3QiLCJhZGRIYW5kbGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVySWQiLCJvbkNsaWNrIiwiZ2V0SGFuZGxlciIsInJvd0lkIiwiZGVsZXRlSGFuZGxlcnNCeUlkIiwiRGF0YVRhYmxlVXRpbHMiLCJnZXRTdGREYXRhdGFibGVDb25maWciLCJkdEJ1dHRvbnMiLCJkb20iLCJwYWdpbmdUeXBlIiwibGVuZ3RoTWVudSIsImxhbmd1YWdlIiwic2NyaXB0X3NlYXJjaCIsInBhZ2luYXRlIiwicHJldmlvdXMiLCJuZXh0Iiwic2F2ZVN0YXRlIiwiYnV0dG9ucyIsImJ1dHRvbiIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImNyZWF0ZUxpbmtDYWxsYmFjayIsImhhbmRsZXIiLCJjcmVhdGVBY3Rpb25CdXR0b25zIiwiYWN0aW9ucyIsIm9uY2xpY2siLCJjbGFzcyIsImV4dGVybmFsIiwiaWNvbiIsImRlbGV0ZUJ1dHRvbkhhbmRsZXJzIiwic2V0QWpheENvbmZpZyIsImRhdGFTcmMiLCJleHRlbmRDb25maWciLCJleHRlbnNpb24iLCJoYXNGaWx0ZXJzIiwic3RhdGVTYXZlQ2FsbGJhY2siLCJzZXR0aW5ncyIsInNJbnN0YW5jZSIsInN0YXRlTG9hZENhbGxiYWNrIiwic3RhdGVTYXZlUGFyYW1zIiwiYWN0aXZlRmlsdGVyIiwic2Vjb25kc1RvSEhNTVNTIiwicGFkWmVyb2VzIiwicGFkU3RhcnQiLCJtaW5zIiwib3BlbkVkaXRNb2RhbEJ5UXVlcnkiLCJ1cmxQYXJhbXMiLCJoYXMiLCJwYXJhbU5hbWUiLCJkYXRhSUQiLCJkYXRhdGFibGVJbnN0YW5jZSIsInRvQXJyYXkiLCJjYW5jZWxJZiIsIiRtb2RhbCIsInJlZmVyZXIiLCJhZGRUb2dnbGVDb2x1bW5zRHJvcGRvd24iLCJ0YWJsZUFQSSIsInRvZ2dsZUNhbGxiYWNrIiwiY29sIiwidGFibGVJRCIsIm5vZGUiLCJfbG9hZENvbHVtbnNWaXNpYmlsaXR5IiwiZmV0Y2hlZERhdGEiLCJzYXZlZENvbHVtbnMiLCJpZ25vcmVkQ29sdW1ucyIsIiRkYXRhdGFibGVXcmFwcGVyIiwiblRhYmxlV3JhcHBlciIsImV2ZXJ5IiwiY29sdW1uIiwiaGVhZGVyIiwiJGJ0bkdyb3VwIiwiJGRyb3Bkb3duTWVudSIsIiRjaGVja2JveGVzIiwidG9nZ2xlZCIsImluZGV4T2YiLCIkY2hlY2tib3giLCIkd3JhcHBlciIsImhpZGRlbkNvbHVtbnMiLCJfX0NTUkZfREFUQVRBQkxFX18iLCJwcmVwZW5kIiwiRGF0YVRhYmxlUmVuZGVycyIsImFsZXJ0U2V2ZXJpdHlBbmRUeXBlIiwic2V2ZXJpdHkiLCJmb3JtYXRWYWx1ZUxhYmVsIiwiYWxlcnRfaWQiLCJoaWRlSWZaZXJvIiwiemVyb19pc19udWxsIiwic3BhbiIsImZpbHRlcml6ZSIsInRhZ19sYWJlbCIsImlzX3NubXBfaXAiLCJmb3JtYXRDYXRlZ29yeSIsImZvcm1hdFNjb3JlIiwiZm9ybWF0TWVzc2FnZSIsImRlc2NyIiwic2hvcnRlbl9kZXNjciIsImZvcm1hdFRyYWZmaWMiLCJ0b3RhbF9ieXRlcyIsInRvdGFsX3BhY2tldHMiLCJmb3JtYXRTdWJ0eXBlIiwiZmlsdGVyaXplXzIiLCJnZXRGb3JtYXRHZW5lcmljRmllbGQiLCJodG1sX3JlZiIsInJlZmVyZW5jZSIsImZvcm1hdFNOTVBJbnRlcmZhY2UiLCJmb3JtYXRTTk1QSVAiLCJmb3JtYXRQcm9iZUlQIiwibGFiZWxfbG9uZyIsImhvc3RLZXkiLCJob3N0VmFsdWUiLCJyb2xlIiwicm9sZV9jbGlfc3J2IiwiZmlsdGVyaXplVmxhbiIsImZsb3ciLCJ2YWx1ZVZsYW4iLCJsYWJlbFZsYW4iLCJ0aXRsZVZsYW4iLCJ2bGFuIiwiZm9ybWF0Rmxvd1R1cGxlIiwiYWN0aXZlX3JlZiIsImFjdGl2ZV91cmwiLCJjbGlMYWJlbCIsImNsaV9pcCIsImNsaUZsYWdMYWJlbCIsImNsaVBvcnRMYWJlbCIsImNsaV9wb3J0IiwiY2xpQmxhY2tsaXN0ZWQiLCJibGFja2xpc3RlZCIsInNydkxhYmVsIiwic3J2X2lwIiwic3J2UG9ydExhYmVsIiwic3J2X3BvcnQiLCJzcnZGbGFnTGFiZWwiLCJzcnZCbGFja2xpc3RlZCIsImNsaUljb25zIiwic3J2SWNvbnMiLCJjbGlfcm9sZSIsInNydl9yb2xlIiwiZm9ybWF0U3VidHlwZVZhbHVlTGFiZWwiLCJmdWxsbmFtZSIsImZvcm1hdE5hbWVEZXNjcmlwdGlvbiIsImFwcGx5Q2VsbFN0eWxlIiwiY2VsbERhdGEiLCJyb3dEYXRhIiwicm93SW5kZXgiLCJjb2xJbmRleCIsImhpZ2hsaWdodCIsImNyZWF0ZSIsImRvX3BpZSIsIkRhdGFUYWJsZUZpbHRlcnNNZW51IiwiZmlsdGVyTWVudUtleSIsImZpbHRlclRpdGxlIiwiY29sdW1uSW5kZXgiLCJleHRyYUF0dHJpYnV0ZXMiLCJyZW1vdmVBbGxFbnRyeSIsImNhbGxiYWNrRnVuY3Rpb24iLCJyYXdGaWx0ZXJzIiwicHJldmVudFVwZGF0ZSIsImN1cnJlbnRGaWx0ZXJTZWxlY3RlZCIsInNlbGVjdGVkRmlsdGVyIiwiX3JlbmRlciIsIl91cGRhdGUiLCJfY291bnRFbnRyaWVzIiwicmVnZXgiLCJyZWciLCJjZWxsVmFsdWUiLCJfY3JlYXRlTWVudUVudHJ5IiwiJGVudHJ5IiwiY3VycmVudGx5X2FjdGl2ZSIsIiRkcm9wZG93biIsIm5ld0NvbnRlbnQiLCJjb3VudGFibGUiLCIkY291bnRlciIsIm5ld1VybFBhcmFtcyIsImRyYXciLCJfY3JlYXRlRmlsdGVycyIsImZpbHRlcnNDcmVhdGVkIiwiJGZpbHRlciIsIiRub2RlIiwiaW5zZXJ0QmVmb3JlIiwiJGRyb3Bkb3duQ29udGFpbmVyIiwiJGRyb3Bkb3duQnV0dG9uIiwiJGRyb3Bkb3duVGl0bGUiLCIkbWVudUNvbnRhaW5lciIsIl8iLCJhbGxGaWx0ZXIiLCJfZ2VuZXJhdGVBbGxGaWx0ZXIiLCJfc2VsZWN0RmlsdGVyRnJvbVN0YXRlIiwiZmlsdGVyS2V5IiwibG9hZGVkIiwic2F2ZSIsImFsbCIsIkNoYXJ0V2lkZ2V0Iiwic3VwZXIiLCJfY2hhcnRUeXBlIiwiXyRodG1sQ2hhcnQiLCJxdWVyeVNlbGVjdG9yIiwicmVnaXN0ZXJFdmVudENhbGxiYWNrIiwidXBkYXRlZE9wdGlvbnMiLCJfZ2VuZXJhdGVDb25maWciLCJlbmFibGVkT25TZXJpZXMiLCJ6IiwiemF4aXMiLCJvbkl0ZW1DbGljayIsInRvZ2dsZURhdGFTZXJpZXMiLCJiYXIiLCJib3JkZXJSYWRpdXMiLCJob3Jpem9udGFsIiwiYWxpZ24iLCJ2ZXJ0aWNhbEFsaWduIiwiYXBleCIsImFzc2lnbiIsIl9idWlsZFRvb2x0aXAiLCJheGlzIiwiX2J1aWxkQXhpc0Zvcm1hdHRlciIsImF4aXNOYW1lIiwibnRvcF91dGlsc19mb3JtYXR0ZXIiLCJzZWxlY3RlZEZvcm1hdHRlciIsIl9idWlsZERhdGFMYWJlbHMiLCJkYXRhTGFiZWxzT3B0cyIsIl9idWlsZENvbmZpZyIsImFkZGl0aW9uYWxzIiwiYWRkaXRpb25hbCIsIl9pbml0aWFsaXplQ2hhcnQiLCJfY2hhcnRDb25maWciLCJjYXRlZ29yaWVzIiwiYmxvZ05vdGlmY2F0aW9uQ2xpY2siLCJtZXRhS2V5IiwiY3RybEtleSIsIndoaWNoIiwiYmxvZ19ub3RpZmljYXRpb25faWQiLCJfX0JMT0dfTk9USUZJQ0FUSU9OX0NTUkZfXyIsIkUiLCJQIiwibCIsIk0iLCJjIiwiZiIsIlIiLCJBIiwiSSIsIkYiLCJnIiwiX192X2lzUmVmIiwicmVkdWNlIiwiTyIsIkwiLCJ2IiwiQyIsInN0YXJ0c1dpdGgiLCJzcGxpY2UiLCJUIiwiTiIsIkIiLCJWIiwiaiIsIlUiLCJEIiwiSCIsIlciLCJLIiwiRyIsInEiLCJKIiwiWSIsIloiLCJRIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiWCIsImVlIiwidGUiLCJuZSIsImFjdGl2ZSIsImVmZmVjdHMiLCJjbGVhbnVwcyIsInNjb3BlcyIsInJ1biIsInN0b3AiLCJwb3AiLCJvZSIsInJlIiwic2UiLCJpZSIsImxlIiwiU2V0IiwiY2UiLCJmZSIsImFlIiwidWUiLCJXZWFrTWFwIiwiZGUiLCJwZSIsImhlIiwiU3ltYm9sIiwibWUiLCJnZSIsInNjaGVkdWxlciIsImRlcHMiLCJiZSIsInZlIiwiZGVmZXJTdG9wIiwib25TdG9wIiwieWUiLCJlZmZlY3QiLCJzY29wZSIsImxhenkiLCJfZSIsIlNlIiwieGUiLCJDZSIsIndlIiwiTWFwIiwia2UiLCJhZGQiLCJUZSIsIk5lIiwiY29tcHV0ZWQiLCJFZSIsImFsbG93UmVjdXJzZSIsIiRlIiwiT2UiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiUmUiLCJJZSIsIkZlIiwiUGUiLCJBZSIsIk1lIiwia3QiLCJhcHBseSIsIlZlIiwiaHQiLCJmdCIsInB0IiwiUmVmbGVjdCIsIlJ0IiwieXQiLCJndCIsIkJlIiwieHQiLCJDdCIsIkxlIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwiamUiLCJVZSIsIkRlIiwiSGUiLCJXZSIsImdldFByb3RvdHlwZU9mIiwiemUiLCJfX3ZfcmF3IiwiRXQiLCJOdCIsIktlIiwiR2UiLCJxZSIsIkplIiwiWWUiLCJaZSIsImNsZWFyIiwiUWUiLCJYZSIsIml0ZXJhdG9yIiwiZXQiLCJudCIsIm90IiwicnQiLCJzdCIsInR0IiwiaXQiLCJsdCIsImN0IiwiYXQiLCJ1dCIsImJ0IiwidnQiLCJfdCIsIl9fdl9pc1JlYWN0aXZlIiwiX192X3NraXAiLCJpc0V4dGVuc2libGUiLCJtdCIsIlByb3h5IiwiU3QiLCJfX3ZfaXNSZWFkb25seSIsIl9fdl9pc1NoYWxsb3ciLCJ3dCIsIlR0IiwiJHQiLCJkZXAiLCJPdCIsIkZ0IiwiQXQiLCJQdCIsIk10IiwiX3Jhd1ZhbHVlIiwiX3ZhbHVlIiwiVnQiLCJJdCIsIkJ0IiwiTHQiLCJqdCIsIl9nZXQiLCJfc2V0IiwiVXQiLCJEdCIsIld0IiwiSHQiLCJfb2JqZWN0IiwiX2tleSIsIl9kZWZhdWx0VmFsdWUiLCJ6dCIsIl9zZXR0ZXIiLCJfZGlydHkiLCJfY2FjaGVhYmxlIiwiS3QiLCJHdCIsImNvbXBvbmVudCIsImFwcENvbnRleHQiLCJ3YXJuSGFuZGxlciIsInZub2RlIiwicmVjdXJzZUNvdW50IiwiWXQiLCJwcm94eSIsIkxzIiwicHJvcHMiLCJxdCIsIkp0IiwiUXQiLCJadCIsImVjIiwiZXJyb3JIYW5kbGVyIiwiWHQiLCJlbiIsInRuIiwibm4iLCJybiIsInNuIiwibG4iLCJjbiIsImFuIiwidW4iLCJwbiIsImRuIiwiaG4iLCJibiIsIm1uIiwiU24iLCJnbiIsInZuIiwieW4iLCJfbiIsInhuIiwiQ24iLCJ3biIsIkhUTUxFbGVtZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyIsImtuIiwiaXNVbm1vdW50ZWQiLCJlbWl0dGVkIiwiVG4iLCJlbWl0c0NhY2hlIiwiZW1pdHMiLCJtaXhpbnMiLCJleHRlbmRzIiwiTm4iLCJFbiIsIiRuIiwiT24iLCJfX3Njb3BlSWQiLCJSbiIsIkZuIiwiUG4iLCJBbiIsIl9kIiwiWHIiLCJfYyIsIk1uIiwid2l0aFByb3h5IiwicHJvcHNPcHRpb25zIiwic2xvdHMiLCJhdHRycyIsInJlbmRlckNhY2hlIiwic2V0dXBTdGF0ZSIsImN0eCIsImluaGVyaXRBdHRycyIsInNoYXBlRmxhZyIsImdzIiwiVm4iLCJxciIsInVzIiwiS3IiLCJJbiIsImZzIiwiZGlycyIsImNvbmNhdCIsIkJuIiwiTG4iLCJzdWJUcmVlIiwiam4iLCJfX2lzU3VzcGVuc2UiLCJVbiIsInByb2Nlc3MiLCJzdXNwZW5zZSIsIkhuIiwicGVuZGluZ0JyYW5jaCIsInNzQ29udGVudCIsIkRuIiwic3NGYWxsYmFjayIsIktuIiwiYWN0aXZlQnJhbmNoIiwiaXNJbkZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJycyIsImhpZGRlbkNvbnRhaW5lciIsInBlbmRpbmdJZCIsInRpbWVvdXQiLCJmYWxsYmFjayIsImh5ZHJhdGUiLCJwYXJlbnROb2RlIiwibm9ybWFsaXplIiwiY2hpbGRyZW4iLCJXbiIsImRlZmF1bHQiLCJwYXJlbnRDb21wb25lbnQiLCJpc1NWRyIsImFuY2hvciIsIm1vZGUiLCJhZnRlckxlYXZlIiwibW92ZSIsInJlZ2lzdGVyRGVwIiwiYXN5bmNEZXAiLCJzdXNwZW5zZUlkIiwiYXN5bmNSZXNvbHZlZCIsIlJzIiwidW5tb3VudCIsIlFyIiwiWXIiLCJKciIsIlpyIiwib3MiLCJkeW5hbWljQ2hpbGRyZW4iLCJ6biIsIkduIiwiQ3MiLCJwcm92aWRlcyIsInFuIiwiYXJndW1lbnRzIiwiSm4iLCJlbyIsIlluIiwiZmx1c2giLCJabiIsIlFuIiwiWG4iLCJpbW1lZGlhdGUiLCJkZWVwIiwib28iLCJQciIsInRvIiwibm8iLCJrcyIsIlRzIiwicm8iLCJpc01vdW50ZWQiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwiT28iLCJQbyIsInNvIiwiRnVuY3Rpb24iLCJpbyIsImFwcGVhciIsIkJvb2xlYW4iLCJwZXJzaXN0ZWQiLCJvbkJlZm9yZUVudGVyIiwib25FbnRlciIsIm9uQWZ0ZXJFbnRlciIsIm9uRW50ZXJDYW5jZWxsZWQiLCJvbkJlZm9yZUxlYXZlIiwib25MZWF2ZSIsIm9uQWZ0ZXJMZWF2ZSIsIm9uTGVhdmVDYW5jZWxsZWQiLCJvbkJlZm9yZUFwcGVhciIsIm9uQXBwZWFyIiwib25BZnRlckFwcGVhciIsIm9uQXBwZWFyQ2FuY2VsbGVkIiwic2V0dXAiLCJ3cyIsImZvIiwiYW8iLCJ1byIsImNvIiwicG8iLCJnZXRUcmFuc2l0aW9uS2V5IiwiZGVsYXlMZWF2ZSIsImxvIiwiX2xlYXZlQ2IiLCJkZWxheWVkTGVhdmUiLCJiZWZvcmVFbnRlciIsIl9lbnRlckNiIiwibGVhdmUiLCJ5byIsIldyIiwicGF0Y2hGbGFnIiwiaG8iLCJtbyIsIl9fYXN5bmNMb2FkZXIiLCJnbyIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsInN1c3BlbnNpYmxlIiwib25FcnJvciIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsIl9fYXN5bmNSZXNvbHZlZCIsInZvIiwicmVmIiwiX19pc0tlZXBBbGl2ZSIsIl9vIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJyZW5kZXJlciIsImtvIiwiQnMiLCJhY3RpdmF0ZSIsInNsb3RTY29wZUlkcyIsImlzRGVhY3RpdmF0ZWQiLCJvblZub2RlTW91bnRlZCIsImJzIiwiZGVhY3RpdmF0ZSIsImRhIiwib25Wbm9kZVVubW91bnRlZCIsImJvIiwiVG8iLCJGbyIsIlNvIiwiQ28iLCJ4byIsIl9fd2RjIiwiTm8iLCJ3byIsIkFvIiwiX193ZWgiLCJ1bnNoaWZ0IiwiRW8iLCJPcyIsIiRvIiwiUm8iLCJNbyIsIlZvIiwiSW8iLCJCbyIsIkxvIiwiVnMiLCJtb3VudGVkIiwidXBkYXRlZCIsImRpciIsImluc3RhbmNlIiwib2xkVmFsdWUiLCJhcmciLCJtb2RpZmllcnMiLCJqbyIsIlVvIiwiem8iLCJEbyIsIkhvIiwiV28iLCJLbyIsIkdvIiwiZnJvbSIsInFvIiwiSm8iLCJpc0NFIiwiWW8iLCJucyIsInNjb3BlSWQiLCJabyIsIlFvIiwiTnMiLCJYbyIsIiRlbCIsIiRkYXRhIiwiJHByb3BzIiwiJGF0dHJzIiwiJHNsb3RzIiwiJHJlZnMiLCJyZWZzIiwiJHBhcmVudCIsIiRyb290Iiwicm9vdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCIkZm9yY2VVcGRhdGUiLCIkbmV4dFRpY2siLCIkd2F0Y2giLCJlciIsImFjY2Vzc0NhY2hlIiwibnIiLCJfX2Nzc01vZHVsZXMiLCJnbG9iYWxQcm9wZXJ0aWVzIiwidHIiLCJ1bnNjb3BhYmxlcyIsInJyIiwic3IiLCJvcHRpb25zQ2FjaGUiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJsciIsImNyIiwiYXIiLCJmciIsIm1ldGhvZHMiLCJiZWZvcmVDcmVhdGUiLCJwciIsImNyZWF0ZWQiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJlcnJvckNhcHR1cmVkIiwic2VydmVyUHJlZmV0Y2giLCJjb21wb25lbnRzIiwiZGlyZWN0aXZlcyIsIndhdGNoIiwicHJvdmlkZSIsImluamVjdCIsInVyIiwiZW1pdHNPcHRpb25zIiwiaHIiLCJwcm9wc0RlZmF1bHRzIiwibXIiLCJwcm9wc0NhY2hlIiwiZ3IiLCJfciIsInZyIiwieXIiLCJiciIsIlNyIiwieHIiLCJDciIsIl9jdHgiLCJ3ciIsImtyIiwiYXBwIiwiaXNOYXRpdmVUYWciLCJwZXJmb3JtYW5jZSIsImNvbXBpbGVyT3B0aW9ucyIsIlRyIiwiTnIiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIl9pbnN0YW5jZSIsInZlcnNpb24iLCJvaSIsInVzZSIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsIm1vdW50IiwiX192dWVfYXBwX18iLCJFciIsIiRyIiwiT3IiLCJuYW1lc3BhY2VVUkkiLCJ0YWdOYW1lIiwiUnIiLCJub2RlVHlwZSIsIkZyIiwicGF0Y2hQcm9wIiwiY3JlYXRlVGV4dCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0IiwiY3JlYXRlQ29tbWVudCIsInpyIiwiR3IiLCJzdGF0aWNDb3VudCIsIm91dGVySFRNTCIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImRzIiwiZW5kc1dpdGgiLCJvblZub2RlQmVmb3JlTW91bnQiLCJmaXJzdENoaWxkIiwiaGFzQ2hpbGROb2RlcyIsIl92bm9kZSIsIkFyIiwiVnIiLCJNciIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJfX1ZVRV9fIiwic2V0VGV4dCIsInNldEVsZW1lbnRUZXh0Iiwic2V0U2NvcGVJZCIsImNsb25lTm9kZSIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJ2cyIsIklyIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsImR5bmFtaWNQcm9wcyIsIm9uVm5vZGVVcGRhdGVkIiwiQnIiLCJTcyIsInVpZCIsInhzIiwiZXhwb3NlZCIsImV4cG9zZVByb3h5Iiwic2V0dXBDb250ZXh0IiwiYmMiLCJibSIsImJ1IiwiYnVtIiwicnRnIiwicnRjIiwic3AiLCJNcyIsIkFzIiwiJHN0YWJsZSIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsIkxyIiwianIiLCJTVkdFbGVtZW50IiwiVXIiLCJEciIsInRhcmdldEFuY2hvciIsIkhyIiwiX19pc1RlbGVwb3J0IiwiX2xwYSIsImVzIiwiYXMiLCJfX3ZfaXNWTm9kZSIsInNzIiwibHMiLCJjcyIsInJlZl9rZXkiLCJyZWZfZm9yIiwieXMiLCJfX3ZjY09wdHMiLCJwcyIsIl9zIiwiaHMiLCJtZW1vIiwiRXMiLCIkcyIsIkZzIiwiX3JjIiwiUHMiLCJ0ZW1wbGF0ZSIsImlzQ3VzdG9tRWxlbWVudCIsImRlbGltaXRlcnMiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXhwb3NlIiwidW53cmFwSW5qZWN0ZWRSZWYiLCJqcyIsIm9yIiwiSXMiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsIl9fZmlsZSIsIlVzIiwiRHMiLCJIcyIsIldzIiwienMiLCJHcyIsIktzIiwicXMiLCJKcyIsIllzIiwiWnMiLCJRcyIsIlhzIiwiZWkiLCJ0aSIsIm5pIiwibGkiLCJjaSIsImFpIiwiY3JlYXRlRWxlbWVudE5TIiwibXVsdGlwbGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsInVpIiwicGkiLCJzZXRQcm9wZXJ0eSIsImRpIiwiZmkiLCJoaSIsIm1pIiwiZ2kiLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsInZpIiwieWkiLCJfaSIsImJpIiwiYWRkRXZlbnRMaXN0ZW5lciIsInhpIiwiQ2kiLCJ3aSIsIk5pIiwiZGVmIiwia2kiLCJUbCIsIlRpIiwiX2RlZiIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJzaGFkb3dSb290IiwiX2NyZWF0ZVZOb2RlIiwiYXR0YWNoU2hhZG93IiwiY29ubmVjdGVkQ2FsbGJhY2siLCJfcmVzb2x2ZURlZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwia2wiLCJhdHRyaWJ1dGVzIiwiX3NldEF0dHIiLCJhdHRyaWJ1dGVOYW1lIiwic3R5bGVzIiwiX3NldFByb3AiLCJfZ2V0UHJvcCIsIl9hcHBseVN0eWxlcyIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsIkVpIiwiJGkiLCJPaSIsImRpc2Nvbm5lY3QiLCJSaSIsIkZpIiwiSWkiLCJQaSIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIkFpIiwiTWkiLCJWaSIsIkJpIiwiamkiLCJfaXNMZWF2aW5nIiwiVWkiLCJMaSIsIkhpIiwiR2kiLCJjbGFzc0xpc3QiLCJfdnRjIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGkiLCJfZW5kSWQiLCJwcm9wQ291bnQiLCJXaSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiemkiLCJoYXNUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJLaSIsIm9mZnNldEhlaWdodCIsInFpIiwiSmkiLCJZaSIsInRhZyIsIm1vdmVDbGFzcyIsImRpc3BsYXkiLCJaaSIsIlFpIiwiWGkiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGwiLCJjb21wb3NpbmciLCJubCIsIkV2ZW50Iiwib2wiLCJfYXNzaWduIiwiYWN0aXZlRWxlbWVudCIsInJsIiwiX21vZGVsVmFsdWUiLCJhbCIsImNoZWNrZWQiLCJ1bCIsInNsIiwiaWwiLCJsbCIsInNlbGVjdGVkIiwiY2wiLCJzZWxlY3RlZEluZGV4IiwicGwiLCJmbCIsImRsIiwiaGwiLCJwcmV2ZW50IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJzaGlmdCIsInNoaWZ0S2V5IiwiYWx0IiwiYWx0S2V5IiwibWlkZGxlIiwicmlnaHQiLCJleGFjdCIsIm1sIiwiZ2wiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsInZsIiwieWwiLCJfdm9kIiwiX2wiLCJibCIsImNzc1RleHQiLCJfdmVpIiwiYXR0YWNoZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsIlNpIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsIlNsIiwieGwiLCJDbCIsIndsIiwiTmwiLCIkbCIsIkVsZW1lbnQiLCJFbCIsIk9sIiwiUmwiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJjcmVhdGVTU1JBcHAiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImRlZmluZUN1c3RvbUVsZW1lbnQiLCJkZWZpbmVTU1JDdXN0b21FbGVtZW50IiwiVnVlRWxlbWVudCIsInVzZUNzc01vZHVsZSIsInVzZUNzc1ZhcnMiLCJUcmFuc2l0aW9uIiwiVHJhbnNpdGlvbkdyb3VwIiwidk1vZGVsVGV4dCIsInZNb2RlbENoZWNrYm94Iiwidk1vZGVsUmFkaW8iLCJ2TW9kZWxTZWxlY3QiLCJ2TW9kZWxEeW5hbWljIiwid2l0aE1vZGlmaWVycyIsIndpdGhLZXlzIiwidlNob3ciLCJyZWFjdGl2ZSIsInJlYWRvbmx5IiwidW5yZWYiLCJwcm94eVJlZnMiLCJpc1JlZiIsInRvUmVmIiwidG9SZWZzIiwiaXNQcm94eSIsImlzUmVhY3RpdmUiLCJpc1JlYWRvbmx5IiwiaXNTaGFsbG93IiwiY3VzdG9tUmVmIiwidHJpZ2dlclJlZiIsInNoYWxsb3dSZWYiLCJzaGFsbG93UmVhY3RpdmUiLCJzaGFsbG93UmVhZG9ubHkiLCJtYXJrUmF3IiwidG9SYXciLCJSZWFjdGl2ZUVmZmVjdCIsImVmZmVjdFNjb3BlIiwiRWZmZWN0U2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJvblNjb3BlRGlzcG9zZSIsIndhdGNoRWZmZWN0Iiwid2F0Y2hQb3N0RWZmZWN0Iiwid2F0Y2hTeW5jRWZmZWN0Iiwib25CZWZvcmVNb3VudCIsIm9uTW91bnRlZCIsIm9uQmVmb3JlVXBkYXRlIiwib25VcGRhdGVkIiwib25CZWZvcmVVbm1vdW50Iiwib25Vbm1vdW50ZWQiLCJvbkFjdGl2YXRlZCIsIm9uRGVhY3RpdmF0ZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIm9uU2VydmVyUHJlZmV0Y2giLCJuZXh0VGljayIsImRlZmluZUNvbXBvbmVudCIsImRlZmluZUFzeW5jQ29tcG9uZW50IiwidXNlQXR0cnMiLCJ1c2VTbG90cyIsImRlZmluZVByb3BzIiwiZGVmaW5lRW1pdHMiLCJkZWZpbmVFeHBvc2UiLCJ3aXRoRGVmYXVsdHMiLCJtZXJnZURlZmF1bHRzIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0Q3VycmVudEluc3RhbmNlIiwiY3JlYXRlVk5vZGUiLCJjbG9uZVZOb2RlIiwibWVyZ2VQcm9wcyIsImlzVk5vZGUiLCJGcmFnbWVudCIsIlRleHQiLCJDb21tZW50IiwiU3RhdGljIiwiVGVsZXBvcnQiLCJTdXNwZW5zZSIsIktlZXBBbGl2ZSIsIkJhc2VUcmFuc2l0aW9uIiwid2l0aERpcmVjdGl2ZXMiLCJ1c2VTU1JDb250ZXh0Iiwic3NyQ29udGV4dEtleSIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJxdWV1ZVBvc3RGbHVzaENiIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsInJlc29sdmVDb21wb25lbnQiLCJyZXNvbHZlRGlyZWN0aXZlIiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJyZWdpc3RlclJ1bnRpbWVDb21waWxlciIsImlzUnVudGltZU9ubHkiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwiZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuIiwiaW5pdEN1c3RvbUZvcm1hdHRlciIsImRldnRvb2xzIiwic2V0RGV2dG9vbHNIb29rIiwid2l0aEN0eCIsInB1c2hTY29wZUlkIiwicG9wU2NvcGVJZCIsIndpdGhTY29wZUlkIiwicmVuZGVyTGlzdCIsInRvSGFuZGxlcnMiLCJyZW5kZXJTbG90IiwiY3JlYXRlU2xvdHMiLCJ3aXRoTWVtbyIsImlzTWVtb1NhbWUiLCJvcGVuQmxvY2siLCJjcmVhdGVCbG9jayIsInNldEJsb2NrVHJhY2tpbmciLCJjcmVhdGVUZXh0Vk5vZGUiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJjcmVhdGVTdGF0aWNWTm9kZSIsImNyZWF0ZUVsZW1lbnRWTm9kZSIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImd1YXJkUmVhY3RpdmVQcm9wcyIsInRvRGlzcGxheVN0cmluZyIsImNhbWVsaXplIiwidG9IYW5kbGVyS2V5Iiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVDbGFzcyIsIm5vcm1hbGl6ZVN0eWxlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwic3NyVXRpbHMiLCJyZXNvbHZlRmlsdGVyIiwiY29tcGF0VXRpbHMiLCJGbCIsIlBsIiwiQWwiLCJTeW50YXhFcnJvciIsImNvZGUiLCJsb2MiLCJNbCIsIlZsIiwiSWwiLCJCbCIsIkxsIiwiamwiLCJVbCIsIkRsIiwiSGwiLCJXbCIsInpsIiwiS2wiLCJHbCIsInFsIiwiSmwiLCJZbCIsIlpsIiwiUWwiLCJYbCIsInRjIiwibmMiLCJvYyIsInNjIiwiaWMiLCJsYyIsImNjIiwiYWMiLCJ1YyIsImZjIiwiZGMiLCJoYyIsImdjIiwidmMiLCJ5YyIsIlNjIiwibGluZSIsIm9mZnNldCIsImVuZCIsInhjIiwiaGVscGVyIiwiWmMiLCJpblNTUiIsIlljIiwiaXNCbG9jayIsImRpc2FibGVUcmFja2luZyIsImlzQ29tcG9uZW50IiwiQ2MiLCJlbGVtZW50cyIsIndjIiwicHJvcGVydGllcyIsImtjIiwiVGMiLCJpc1N0YXRpYyIsImNvbnN0VHlwZSIsIk5jIiwiRWMiLCJjYWxsZWUiLCIkYyIsInJldHVybnMiLCJuZXdsaW5lIiwiaXNTbG90IiwiT2MiLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIiwiUmMiLCJGYyIsIlBjIiwiQWMiLCJNYyIsIlZjIiwiSWMiLCJCYyIsIkxjIiwiamMiLCJVYyIsIkRjIiwiSGMiLCJleHAiLCJXYyIsInpjIiwiS2MiLCJHYyIsInFjIiwidGFnVHlwZSIsIkpjIiwiUWMiLCJYYyIsImVhIiwidGEiLCJuYSIsInJlbW92ZUhlbHBlciIsIm9hIiwicmEiLCJhbXAiLCJhcG9zIiwicXVvdCIsInNhIiwiZ2V0TmFtZXNwYWNlIiwiZ2V0VGV4dE1vZGUiLCJpc1ZvaWRUYWciLCJpc1ByZVRhZyIsImRlY29kZUVudGl0aWVzIiwib25XYXJuIiwiY29tbWVudHMiLCJsYSIsIk5hIiwiaW5WUHJlIiwiQ2EiLCJ2YSIsInVhIiwicGEiLCJhYSIsIndhIiwiaGEiLCJmYSIsInlhIiwiY2EiLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJiYSIsImV4ZWMiLCJTYSIsImlzU2VsZkNsb3NpbmciLCJFYSIsImthIiwibWEiLCJpc0J1aWx0SW5Db21wb25lbnQiLCJjb2RlZ2VuTm9kZSIsImdhIiwiX2EiLCJpc1F1b3RlZCIsIlRhIiwib3JpZ2luYWxTb3VyY2UiLCIkYSIsIlJhIiwiT2EiLCJGYSIsImhvaXN0IiwiSWEiLCJNYSIsIlZhIiwidlNsb3QiLCJicmFuY2hlcyIsInRyYW5zZm9ybUhvaXN0IiwiY29uc3RhbnRDYWNoZSIsIlBhIiwiQWEiLCJMYSIsImZpbGVuYW1lIiwicHJlZml4SWRlbnRpZmllcnMiLCJob2lzdFN0YXRpYyIsImNhY2hlSGFuZGxlcnMiLCJub2RlVHJhbnNmb3JtcyIsImRpcmVjdGl2ZVRyYW5zZm9ybXMiLCJleHByZXNzaW9uUGx1Z2lucyIsInNsb3R0ZWQiLCJzc3IiLCJzc3JDc3NWYXJzIiwiYmluZGluZ01ldGFkYXRhIiwiaW5saW5lIiwiaXNUUyIsImNvbXBhdENvbmZpZyIsInNlbGZOYW1lIiwiaGVscGVycyIsImhvaXN0cyIsImltcG9ydHMiLCJ0ZW1wcyIsImNhY2hlZCIsImlkZW50aWZpZXJzIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImN1cnJlbnROb2RlIiwiY2hpbGRJbmRleCIsImluVk9uY2UiLCJoZWxwZXJTdHJpbmciLCJyZXBsYWNlTm9kZSIsInJlbW92ZU5vZGUiLCJvbk5vZGVSZW1vdmVkIiwiYWRkSWRlbnRpZmllcnMiLCJyZW1vdmVJZGVudGlmaWVycyIsImhvaXN0ZWQiLCJCYSIsImphIiwiVWEiLCJEYSIsIldhIiwiemEiLCJpbmRlbnQiLCJLYSIsImRlaW5kZW50IiwiR2EiLCJxYSIsInB1cmUiLCJKYSIsIllhIiwiaW5kZW50TGV2ZWwiLCJaYSIsIlFhIiwiWGEiLCJjb25kaXRpb24iLCJ1c2VyS2V5IiwiaXNUZW1wbGF0ZUlmIiwiZXUiLCJ0dSIsInN1IiwidmFsdWVBbGlhcyIsImtleUFsaWFzIiwib2JqZWN0SW5kZXhBbGlhcyIsInBhcnNlUmVzdWx0IiwibHUiLCJudSIsIm91IiwicnUiLCJpdSIsInJlcGVhdCIsImN1IiwiYXUiLCJ1dSIsInB1IiwiZnUiLCJodSIsImR1IiwiaGFzRHluYW1pY1Nsb3RzIiwibXUiLCJndSIsInZ1IiwiZHluYW1pY1Byb3BOYW1lcyIsInNob3VsZFVzZUJsb2NrIiwieXUiLCJuZWVkUnVudGltZSIsImlzSGFuZGxlcktleSIsIl91IiwiU3UiLCJzbG90TmFtZSIsInNsb3RQcm9wcyIsInh1IiwiQ3UiLCJ3dSIsImt1IiwiVHUiLCJOdSIsIldlYWtTZXQiLCJFdSIsIiR1IiwiT3UiLCJSdSIsIkZ1IiwiUHUiLCJpYSIsIm1vZGVsIiwic291cmNlTWFwIiwib3B0aW1pemVJbXBvcnRzIiwicnVudGltZUdsb2JhbE5hbWUiLCJydW50aW1lTW9kdWxlTmFtZSIsInNzclJ1bnRpbWVNb2R1bGVOYW1lIiwib25Db250ZXh0Q3JlYXRlZCIsImFzdCIsInByZWFtYmxlIiwidG9KU09OIiwiSGEiLCJBdSIsIk11IiwiVnUiLCJJdSIsIkJ1IiwiTHUiLCJqdSIsIlV1IiwiRHUiLCJIdSIsIld1IiwienUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJLdSIsIkd1IiwicXUiLCJKdSIsIll1IiwiWnUiLCJRdSIsIlh1IiwiZXAiLCJ0cCIsIm5wIiwiY2xvYWsiLCJrZXlNb2RpZmllcnMiLCJub25LZXlNb2RpZmllcnMiLCJldmVudE9wdGlvbk1vZGlmaWVycyIsIm9wIiwicnAiLCJzY3JpcHQkMUciLCJvbGRWYWwiLCJtZW51X29wdGlvbnMiLCJkcm9wZG93biIsImRyb3Bkb3duX2J1dHRvbiIsIl9fcHJvcHMiLCJkZWZhdWx0X292ZXJmbG93IiwiYXV0b19sb2FkIiwibG9hZF9tZW51IiwiZl9vbl9vcGVuIiwiZl9vbl9jbG9zZSIsImJ1dHRvbl9jbGFzc18yIiwiYnV0dG9uX2NsYXNzIiwibWVudSIsIm1fb3B0aW9ucyIsIm9wdF9zbG90IiwiX19leHBvc2UiLCJfaTE4biIsImdldF9mX3ByaW50X3Z1ZV9ub2RlX3JvdyIsInRhYmxlX2RlZiIsImF2YWlsYWJsZV90eXBlcyIsImJ1dHRvbl9saXN0IiwiZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnMiLCJidXR0b25fYXJyYXkiLCJ2dWVfb2JqIiwicmV0dXJuX3RydWVfaWZfZGVmIiwicmVuZGVyX3Zfbm9kZV90eXBlIiwicmVuZGVyX3ZfZnVuYyIsInByaW50X3Zfbm9kZV9idXR0b25zIiwiZ2V0X2ZfcHJpbnRfaHRtbF9yb3ciLCJkYXRhX2ZpZWxkIiwicmVuZGVyX2dlbmVyaWMiLCJyZW5kZXJfZnVuYyIsInJlbmRlcl90eXBlIiwibGlzdF9vcl9hcnJheSIsIm9uX2NsaWNrIiwiZXZlbnRfaWQiLCJ2X25vZGVzIiwiYnV0dG9uX2RlZl9hcnJheSIsImJfZGVmIiwiY2xhc3NfYXJyYXkiLCJmX21hcF9jbGFzcyIsIl9jbGFzcyIsInRpdGxlX2kxOG4iLCJ2X3RpdGxlIiwiRHJvcGRvd24iLCJidXR0b25fc3R5bGUiLCJnZXRfcm93c19mdW5jIiwiZl9nZXRfZXh0cmFfcGFyYW1zX29iaiIsImZfb25fZ2V0X3Jvd3MiLCJmX2dldF9jb2x1bW5faWQiLCJnZXRfY29sdW1uX2lkX2Z1bmMiLCJhY3RpdmVfcGFnZSIsInBlcl9wYWdlIiwiY29sdW1uc193cmFwIiwibWFwX3NlYXJjaCIsImZpcnN0X2dldF9yb3dzIiwic29ydF9jb2x1bW4iLCJ2aXNpYmxlX2NvbHVtbnMiLCJvcmRlciIsImV4dHJhX3BhcmFtcyIsImRhdGFfdXJsIiwicnNwX3JlY29yZHNfZmllbGQiLCJxdWVyeV9pbmZvIiwicnNwX3F1ZXJ5X2luZm9fZmllbGQiLCJyZWNvcmRzRmlsdGVyZWQiLCJyZWNvcmRzVG90YWwiLCJ0b3RhbF9yb3dzIiwiZ2V0X2ZfcHJpbnRfY29sdW1uX25hbWUiLCJ0YWJsZV91dGlscyIsImdldF9jb2x1bW5zX2Zyb21fZGF0YXRhYmxlX2NvbHVtbnMiLCJkYXRhdGFibGVfY29sdW1uc190aXRsZSIsImRhdGF0YWJsZV9jb2x1bW5zX2pzIiwidGFibGVfY29sdW1uc19jb25maWciLCJvcmRlcmFibGUiLCJidWlsZF90YWJsZSIsInRhYmxlX2lkIiwiZl9tYXBfY29sdW1ucyIsInRhYmxlX2RlZl91cmwiLCJnZXRfcm93cyIsImdldF9jb2x1bW5faWQiLCJwcmludF9jb2x1bW5fbmFtZSIsInByaW50X2h0bWxfcm93IiwicHJpbnRfdnVlX25vZGVfcm93IiwiZl9pc19jb2x1bW5fc29ydGFibGUiLCJzb3J0YWJsZSIsImZfZ2V0X2NvbHVtbl9jbGFzc2VzIiwiY2xhc3NlcyIsImZfZ2V0X2NvbHVtbl9zdHlsZSIsImRpc3BsYXlfZW1wdHlfcm93cyIsImVuYWJsZV9zZWFyY2giLCJkZWZhdWx0X3NvcnQiLCJzaG93X2F1dG9yZWZyZXNoIiwicGFnaW5nIiwiZmlsdGVyc19jb25zdF9kaWN0IiwiZ2V0X2ZpbHRlcl9jb25zdCIsInVybF9yZXF1ZXN0IiwibG9hZF9maWx0ZXJzX2RhdGEiLCJmaWx0ZXJzX2NvbnN0IiwibG9jYWxlQ29tcGFyZSIsInRhZ3MiLCJUQUdfT1BFUkFUT1JTIiwiREVGSU5FRF9UQUdTIiwiZl9kZWYiLCJvcGVyYXRvcnMiLCJmaWx0ZXJfZGVmIiwiRklMVEVSU19DT05TVCIsIm9wdF9zdGlybmciLCJvcHQiLCJ2YWx1ZV9sYWJlbCIsInZhbHVlX3R5cGUiLCJnZXRfZmlsdGVyc19vYmplY3QiLCJmaWx0ZXJzX2dyb3VwcyIsImdyb3VwIiwiZmlsdGVyc19vYmplY3QiLCJmX2lkIiwiZmlsdGVyX3ZhbHVlcyIsImZpbHRlcnNNYW5hZ2VyIiwidGFnX29wZXJhdG9yX2xhYmVsX2RpY3QiLCJlcSIsIm5lcSIsImd0ZSIsImx0ZSIsImluIiwibmluIiwic2VsZWN0MiIsIl9fZW1pdCIsIm9wdGlvbnNfMiIsImdyb3Vwc19vcHRpb25zXzIiLCJzZWxlY3RlZF9vcHRpb25fMiIsInNlbGVjdGVkX3ZhbHVlcyIsInJlZnJlc2hfb3B0aW9ucyIsImZpcnN0X3RpbWVfcmVuZGVyIiwic2V0X2lucHV0IiwiZ3JvdXBzX2RpY3QiLCJvcHRpb24iLCJvcHRfMiIsInNldF9vcHRpb25zIiwic2V0X3NlbGVjdGVkX29wdGlvbiIsInNldF9zZWxlY3RlZF92YWx1ZXMiLCJkaXNhYmxlX2NoYW5nZSIsInNlbGVjdGVkX29wdGlvbiIsImN1cl92YWx1ZSIsImNoYW5nZV9zZWxlY3RfMl9zZWxlY3RlZF92YWx1ZSIsInNlbGVjdGVkX29wdGlvbnMiLCJjdXJyZW50X3ZhbHVlIiwic2VsZWN0MkRpdiIsInRoZW1lIiwiZHJvcGRvd25QYXJlbnQiLCJkcm9wZG93bkF1dG9XaWR0aCIsImFkZF90YWciLCJmaW5kX29wdGlvbl9mcm9tX3ZhbHVlIiwiZmluZF9vcHRpb25zX2Zyb21fdmFsdWVzIiwiZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uIiwiaXNfc2VsZWN0ZWQiLCJpc196ZXJvX3ZhbHVlIiwiZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbiIsIm9wdGlvbl8yIiwiZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlIiwic2NyaXB0JDFEIiwibWFpbl90aXRsZSIsInNlY29uZGFyeV90aXRsZV9saXN0IiwiaGVscF9saW5rIiwiaXRlbXNfdGFibGUiLCJfaG9pc3RlZF8xIiwiX2hvaXN0ZWRfNyIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfaG9pc3RlZF8xMCIsImZsb2F0IiwiX2hvaXN0ZWRfMTciLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ob2lzdGVkXzIiLCJfbm9ybWFsaXplQ2xhc3MiLCJfdG9EaXNwbGF5U3RyaW5nIiwiX2hvaXN0ZWRfMyIsIl9ob2lzdGVkXzQiLCJfRnJhZ21lbnQiLCJfcmVuZGVyTGlzdCIsIl9ob2lzdGVkXzYiLCJfaG9pc3RlZF84IiwiX2hvaXN0ZWRfOSIsIiRldmVudCIsImJhZGdlX251bSIsIl9ob2lzdGVkXzEyIiwiX2hvaXN0ZWRfMTQiLCJfaG9pc3RlZF8xNiIsIl9ob2lzdGVkXzE4Iiwic2NyaXB0JDFDIiwibm9fY2xvc2VfYnV0dG9uIiwic2hvd19hbGVydCIsImFsZXJ0X3R5cGUiLCJpbmZvIiwiY2xvc2UiLCJ0ZXh0X2h0bWwiLCJzY3JpcHQkMUIiLCJjaGFydF90eXBlIiwicmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSIsIm5vdF9lbWl0X2dsb2JhbF9zdGF0dXNfdXBkYXRlIiwiYmFzZV91cmxfcmVxdWVzdCIsImdldF9wYXJhbXNfdXJsX3JlcXVlc3QiLCJnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJtYXBfY2hhcnRfb3B0aW9ucyIsIm1pbl90aW1lX2ludGVydmFsX2lkIiwicm91bmRfdGltZSIsImNoYXJ0X29wdGlvbnMiLCJmcm9tX3pvb20iLCJnZXRfdXJsX3JlcXVlc3QiLCJyZWdpc3Rlcl9zdGF0dXMiLCJkcmF3X2NoYXJ0IiwiZ2V0X2RhdGFfdXJpIiwiZG93bmxvYWRfY2hhcnRfcG5nIiwiZmlsZV9uYW1lIiwiZGF0YV91cmkiLCJkb3dubG9hZFVSSSIsIm5ld191cmxfcmVxdWVzdCIsInVwZGF0ZV9jaGFydCIsImNoYXJ0QXBleCIsImNoYXJ0X2NvbnRleHQiLCJvbl9iZWZvcmVfem9vbSIsIm9uX3pvb21lZCIsImdldF9jaGFydF9vcHRpb25zIiwidXBkYXRlX2NoYXJ0X29wdGlvbnMiLCJ1cGRhdGVfY2hhcnRfc2VyaWVzIiwibmV3X2Vwb2NoX3N0YXR1cyIsImdldF9lcG9jaF9mcm9tX3hheGlzX2V2ZW50IiwibWluX3RpbWVfaW50ZXJ2YWwiLCJiZWdpbiIsInVuaXgiLCJzY3JpcHQkMUEiLCJTZWxlY3RTZWFyY2giLCJlbmFibGVfcmVmcmVzaCIsImRpc2FibGVkX2RhdGVfcGlja2VyIiwiY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdCIsImludmFsaWRfZGF0ZV9tZXNzYWdlIiwid3JvbmdfZGF0ZSIsIndyb25nX21pbl9pbnRlcnZhbCIsInN0YXJ0X3JlZnJlc2giLCJ0aW1lX3ByZXNldF9saXN0IiwidGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCIsImdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSIsImVsZW0iLCJlbWl0X2Vwb2NoX2NoYW5nZSIsImZfc2V0X3BpY2tlciIsInBpY2tlciIsInZhcl9uYW1lIiwiZmxhdHBpY2tyIiwiZW5hYmxlVGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lXzI0aHIiLCJjbGlja09wZW5zIiwib25DaGFuZ2UiLCJzZWxlY3RlZERhdGVzIiwiZGF0ZVN0ciIsImVuYWJsZV9hcHBseSIsImZsYXRfYmVnaW5fZGF0ZSIsImZsYXRfZW5kX2RhdGUiLCJvbl9zdGF0dXNfdXBkYXRlZCIsInNlbGVjdGVkX3RpbWVfb3B0aW9uIiwidXBkYXRlX2Zyb21faW50ZXJ2YWwiLCJjaGFuZ2Vfc2VsZWN0X3RpbWUiLCJyZWZyZXNoX2ludGVydmFsX3NlY29uZHMiLCJ1dGNfc190b19zZXJ2ZXJfZGF0ZSIsInNlcnZlcl9kYXRlX3RvX2RhdGUiLCJkYXRlIiwiZW5kX2RhdGVfdGltZV91dGMiLCJiZWdpbl9kYXRlX3RpbWVfdXRjIiwic2V0X3NlbGVjdF90aW1lX3ZhbHVlIiwiZXBvY2hfc3RhdHVzIiwiYWRkX3N0YXR1c19pbl9oaXN0b3J5IiwiYmVnaW5fdXRjIiwiZW5kX3V0YyIsInJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsIiwiZW5kX3V0Y19zIiwiYmVnaW5fdXRjX3MiLCJpc19iZXR3ZWVuIiwic2VsZWN0X3RpbWVfdmFsdWUiLCJ0aW1lX2lkIiwiYmVnaW5fZGF0ZSIsImVuZF9kYXRlIiwicmVmcmVzaF9kYXRhIiwiaW50ZXJ2YWxfcyIsInRpbWVmcmFtZXNfaWRzIiwidGltZWZyYW1lc19hdmFpbGFibGUiLCJ0Zl9pZCIsInRvbGVyYW5jZSIsImludGVydmFsIiwiY2VudGVyIiwianVtcF90aW1lX2JhY2siLCJqdW1wX3RpbWVfYWhlYWQiLCJwcmV2aW91c19lbmQiLCJlbWl0X29ubHlfZ2xvYmFsX2V2ZW50IiwiaGlzdG9yeV9sYXN0X3N0YXR1cyIsImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5IiwiX2hvaXN0ZWRfNSIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTUiLCJzdHlsZUluamVjdCIsImluc2VydEF0IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGVTaGVldCIsIl9yZW5kZXJTbG90IiwiX2NvbXBvbmVudF9zZWxlY3Rfc2VhcmNoIiwib25TZWxlY3Rfb3B0aW9uIiwicGxhY2Vob2xkZXIiLCJfY3JlYXRlQ29tbWVudFZOb2RlIiwiX3ZTaG93Iiwic2NyaXB0JDF6IiwicHJldmVudEVudGVyIiwib25TdWJtaXQiLCJ0YWJpbmRleCIsInJlZ2V4ZXMiLCJtYWNfYWRkcmVzcyIsImNvbW1hX3NlcGFydGVkX3BvcnRfcmVnZXgiLCJwb3J0X3JhbmdlX3JlZ2V4IiwiaG9zdF9uYW1lIiwidmFsaWRhdGVJUCIsInZhbGlkYXRlSVB2NCIsInZhbGlkYXRlSVB2NiIsIlV0aWxzIiwiZ2V0X2RhdGFfcGF0dGVybiIsInJfaXB2NCIsInJfaXB2NF92bGFuIiwicmVwbGFjZUFsbCIsInJfaXB2NiIsInJfaXB2Nl92bGFuIiwibmV0d29ya19pcHY0IiwiaXB2NF9jaWRyIiwiaXB2NF9jaWRyX3ZsYW4iLCJuZXR3b3JrX2lwdjYiLCJyZWdleFZhbGlkYXRpb24iLCJ2YWxpZGF0ZUhvc3ROYW1lIiwidmFsaWRhdGVDb21tYVNlcGFyYXRlZFBvcnRMaXN0IiwicG9ydHMiLCJ2YWxpZGF0ZVBvcnRSYW5nZSIsInBvcnRfYXJyYXkiLCJsb3ciLCJoaWdoIiwidmFsaWRhdGVTaW5nbGVXb3JkIiwid29yZCIsInNjcmlwdCQxeSIsIk1vZGFsIiwiZmlsdGVyc19vcHRpb25zIiwiaWRfbW9kYWwiLCJmaWx0ZXJfdHlwZV9zZWxlY3RlZCIsImZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkIiwib3BlcmF0b3Jfc2VsZWN0ZWQiLCJvcHRpb25fc2VsZWN0ZWQiLCJpbnB1dF92YWx1ZSIsImlucHV0X3R5cGUiLCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWQiLCJpbnB1dF9yZXF1aXJlZCIsIm9wdGlvbnNfdG9fc2hvdyIsIm9wZXJhdG9yc190b19zaG93IiwiY2hhbmdlX2ZpbHRlciIsInBvc3RfY2hhbmdlIiwiY2hhbmdlX29wZXJhdG9yX3R5cGUiLCJzZWxlY3RlZF9vcGVyYXRvcl90eXBlIiwiY2hhbmdlX2RhdGFfZmlsdGVyIiwic2VsZWN0ZWRfZmlsdGVyIiwiY2hhbmdlX2lucHV0X3ZhbHVlIiwiY2hlY2tfZGlzYWJsZV9hcHBseSIsImF1dG9jb21wbGV0ZSIsImZvciIsIl9jcmVhdGVCbG9jayIsInJlcXVpcmVkIiwiZm9vdGVyIiwiaW5pdGlhbFRhZ3MiLCJUQUdJRlkiLCJJU19BTEVSVF9TVEFUU19VUkwiLCJTVEFUVVNfVklFVyIsIlBBR0UiLCJhbGVydF9zdGF0c19wYWdlIiwiZ2V0X3BhZ2UiLCJpc19hbGVydF9zdGF0c191cmwiLCJxdWVyeV9wcmVzZXQiLCJhZ2dyZWdhdGVkIiwic2NyaXB0JDF4IiwiRGF0ZVRpbWVSYW5nZVBpY2tlciIsIk1vZGFsRmlsdGVycyIsImR0X3JhbmdlX3BpY2tlcl9tb3VudGVkIiwiaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlciIsImlkX21vZGFsX2ZpbHRlcnMiLCJyYW5nZV9waWNrZXJfdnVlIiwidGFnaWZ5IiwiVGFnaWZ5IiwiZHVwbGljYXRlcyIsImNsYXNzbmFtZSIsImF1dG9Db21wbGV0ZSIsInRlbXBsYXRlcyIsInRhZ0RhdGEiLCJzZWxlY3RlZE9wZXJhdG9yIiwidmFsaWRhdGUiLCJhZGRUYWdzIiwiYWRkRmlsdGVyVGFnIiwicmVhbFZhbHVlIiwiZXhpc3RpbmdUYWdFbGVtZW50IiwiZ2V0VGFnRWxtcyIsImh0bWxUYWciLCJyZW1vdmVUYWdzIiwiZWRpdF90YWciLCJjcmVhdGVfdGFnaWZ5IiwicmVsb2FkX3N0YXR1cyIsIm1vZGFsX2RhdGEiLCJzaG93X2ZpbHRlcnMiLCJzdGF0dXNfdmlldyIsImxhc3RfZmlsdGVycyIsImlzX2ZpbHRlcl9kZWZpbmVkIiwidXBkYXRlX3N0YXR1c192aWV3Iiwic2hvd19tb2RhbF9maWx0ZXJzIiwicmVtb3ZlX2ZpbHRlcnMiLCJyZW1vdmVBbGxUYWdzIiwiZl9jb25zdCIsImNyZWF0ZV90YWdfZnJvbV9maWx0ZXIiLCJhcHBseV9tb2RhbCIsIl9jb21wb25lbnRfbW9kYWxfZmlsdGVycyIsIm9uQXBwbHkiLCJfY29tcG9uZW50X2RhdGVfdGltZV9yYW5nZV9waWNrZXIiLCJleHRyYV9idXR0b25zIiwiX2hvaXN0ZWRfMTEiLCJzdGFydF9wYWdlX2J1dHRvbiIsIm51bV9wYWdlX2J1dHRvbnMiLCJ0b3RhbF9wYWdlcyIsImNhbGN1bGF0ZV9wYWdlcyIsImNoYW5nZV9hY3RpdmVfcGFnZSIsInNldF90ZXh0IiwiZW5hYmxlX2ZpcnN0X3BhZ2UiLCJlbmFibGVfbGFzdF9wYWdlIiwibmV3X2FjdGl2ZV9wYWdlIiwibmV3X3N0YXJ0X3BhZ2VfYnV0dG9uIiwiZW5kX3BhZ2VfYnV0dG9uIiwiZm9ybWF0X251bWJlciIsImxvYWRpbmciLCJvdmVybGF5IiwiaGlkZV9sb2FkaW5nIiwic2hvd19sb2FkaW5nIiwidmFsdWVfMiIsInRhYmxlX2NvbnRhaW5lciIsImFjdGl2ZV9yb3dzIiwicGVyX3BhZ2Vfb3B0aW9ucyIsInN0b3JlIiwic2VsZWN0X3RhYmxlX3BhZ2UiLCJxdWVyeV9pbmZvX3NxbF9idXR0b24iLCJjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSIsImNoYW5naW5nX3Jvd3MiLCJlbmFibGVfYXV0b3JlZnJlc2giLCJsb2FkX3RhYmxlIiwiYXV0b3JlZnJlc2hfdGl0bGUiLCJnZXRfY29sX2lkIiwiY29sc192aXNpYmlsaXR5X2RpY3QiLCJjb2x1bW5zX3Zpc2libGUiLCJjb2x1bW5zX3Zpc2libGVfZGljdCIsImdldF9jb2x1bW5zX3Zpc2liaWxpdHlfZGljdCIsImlzX3RhYmxlX25vdF9zb3J0ZWQiLCJjb2xfb3B0IiwiaXNfY29sdW1uX3NvcnRhYmxlIiwic2V0X2NvbHVtbnNfdmlzaWJpbGl0eSIsInNldF9jb2x1bW5zX3dyYXAiLCJzZXRfcm93cyIsInNldF9jb2x1bW5zX3Jlc2l6YWJsZSIsImF1dG9yZWZyZXNoX2ludGVydmFsIiwidXBkYXRlX2F1dG9yZWZyZXNoIiwicmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSIsInRhYmxlX2tleSIsInJlZHJhd190YWJsZSIsIm1pbldpZHRoIiwicmVzaXphYmxlQ29sdW1ucyIsInZpc2libGVfY29sdW1uc19pZHMiLCJyZXNldF9jb2x1bW5fc2l6ZSIsImNoYW5nZV9wZXJfcGFnZSIsInNlbGVjdF9wYWdlc19rZXkiLCJ0YWJsZV9jb250ZW50X2lkIiwiZm9yY2VfcmVmcmVzaCIsInNldF9hY3RpdmVfcm93cyIsImZvcmNlX2Rpc2FibGVfbG9hZGluZyIsInJlZnJlc2hfdGFibGUiLCJkaXNhYmxlX2xvYWRpbmciLCJtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0Iiwic3RhcnRfcm93X2luZGV4IiwiZl9zb3J0IiwiZl9zb3J0X3Jvd3MiLCJyMCIsInIxIiwicjBfY29sIiwicjFfY29sIiwiY29sX3RvX3NvcnQiLCJnZXRfY29sdW1uX3RvX3NvcnQiLCJvbl9jaGFuZ2VfbWFwX3NlYXJjaCIsImNvcHlfcXVlcnlfaW50b19jbGlwYm9hcmQiLCJnZXRfY29sdW1uc19kZWZzIiwiZ2V0X3Jvd3NfbnVtIiwic2VhcmNoX3ZhbHVlIiwiY29sX2luZGV4IiwidGFibGVfY29uZmlnIiwibW91bnRfdGFibGUiLCJ0YWJsZV9jb25maWdfaWQiLCJ0YWJsZV9pZF8yIiwidGFibGVfY29uZmlnX2lkXzIiLCJUYWJsZVV0aWxzIiwiZ2V0X2V4dHJhX3BhcmFtc19vYmoiLCJmX21hcF9jb25maWciLCJvbl9sb2FkZWQiLCJyb3dzX2xvYWRlZCIsInNjcmlwdCQxcCIsImRlc2NyaXB0aW9uIiwiaW52YWxpZF9icGYiLCJicGZfZmlsdGVyIiwiZXh0cmFjdF9ub3ciLCJzaG93X21lbnUiLCJkYXRhX2F2YWlsYWJsZSIsImVwb2NoX2ludGVydmFsIiwicGFkMl9udW1iZXIiLCJmb3JtYXRfZGF0ZSIsImRfbXMiLCJ2YWx1ZU9mIiwidXJsX3JlcXVlc3Rfb2JqIiwiaWZpZCIsInVybF9yZXF1ZXN0X3BhcmFtcyIsImpvYl9pZCIsImFsZXJ0X3RleHRfaHRtbCIsInBhZ2VfbmFtZSIsImF2YWlsYWJsZSIsImV4dHJhX2luZm8iLCJicGYiLCJzZXRfZGVzY3JpcHRpb25zIiwiZGF0ZV9iZWdpbiIsImRhdGVfZW5kIiwiZGVzYyIsInNob3dfaGlkZV9tZW51IiwiX2NvbXBvbmVudF9tb2RhbCIsIl9jcmVhdGVUZXh0Vk5vZGUiLCJfd2l0aERpcmVjdGl2ZXMiLCJzcGVsbGNoZWNrIiwiX2hvaXN0ZWRfMTkiLCJtb2RhbF9pZCIsInNuYXBzaG90X3NlbGVjdGVkIiwiYXBwbHlfdGltZSIsImFwcGx5X3RpbWVfdGV4dCIsInNhdmVfdGltZSIsInNhdmVfdGltZV90ZXh0Iiwic25hcHNob3RfbmFtZSIsInNuYXBzaG90cyIsIm9yZGVyX2J5IiwicGF0dGVybl9zaW5nbGV3b3JkIiwiZGlzYWJsZV9hZGQiLCJkaXNhYmxlX3NlbGVjdCIsImxhc3Rfb3JkZXJfYnkiLCJzb3J0X3NuYXBzaG90c19ieSIsImxvYWRfc25hcHNob3RzIiwiYWRkX3NuYXBzaG90IiwicGFyYW1zX29iaiIsInNlbGVjdF9zbmFwc2hvdCIsImRlbGV0ZV9zbmFwc2hvdCIsImRlbGV0ZV9hbGwiLCJzYXZlX3RpbWVfZmlsdGVyX3RleHQiLCJiZWdpbl90aW1lIiwiZW5kX3RpbWUiLCJhcHBseV90aW1lX2ZpbHRlcl90ZXh0Iiwic25hcHNob3RzX29iaiIsInJhZGlvX3NlbGVjdGVkIiwiZGlzYWJsZV9hbGVydHMiLCJkb21haW4iLCJjb21tZW50IiwiY29tbWVudF9wbGFjZWhvbGRlciIsImV4dHJhY3RfZG9tYWluX25hbWVfZnJvbV9pbmZvIiwiaXNzdWVyZG4iLCJkb21haW5fbmFtZSIsImluZm9fc3BsaXR0ZWRfIiwiaW5mb19zcGxpdHRlZF9vbl93d3ciLCJyZWdleF9kb21haW4iLCJwYXR0ZXJuX2RvbWFpbiIsInJlZ2V4X2NlcnRpZmljYXRlIiwicGF0dGVybl9jZXJ0aWZpY2F0ZSIsImFsZXJ0X25hbWUiLCJob3N0X2FkZHIiLCJmbG93X2FkZHIiLCJjbGlfdmFsdWUiLCJjbGlfbGFiZWwiLCJzcnZfdmFsdWUiLCJzcnZfbGFiZWwiLCJkZWxldGVfYWxlcnRzIiwiYWRkciIsImFsZXJ0X2FkZHIiLCJmbG93X2FsZXJ0X2tleSIsImhvc3RfYWxlcnRfa2V5IiwiYWxlcnRfZG9tYWluIiwiYWxlcnRfY2VydGlmaWNhdGUiLCJhbGVydF9pbmZvIiwidGl0bGVfZGVzYyIsImFja25vd2xlZGdlIiwicm93X2lkIiwiX2FsZXJ0IiwiJHR5cGUiLCJ1c2VyX2xhYmVsIiwibWVzc2FnZV9ib2R5IiwiZGVsZXRlX2FsZXJ0IiwiX3N0YXR1c192aWV3IiwiYWNrbm93bGVkZ2VfYWxlcnRzIiwidGFibGVfYWxlcnRzIiwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uIiwibW9kYWxfc25hcHNob3QiLCJyYW5nZV9waWNrZXIiLCJwZXJtYW5lbnRfbGlua19idXR0b24iLCJtb2RhbF9hbGVydHNfZmlsdGVyIiwibW9kYWxfYWNrbm93bGVkZ2UiLCJtb2RhbF9kZWxldGUiLCJtb2RhbF9hY2tub3dsZWRnZV9hbGVydHMiLCJtb2RhbF9kZWxldGVfYWxlcnRzIiwiY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkIiwiZGlzcGxheV9tZXNzYWdlIiwibWVzc2FnZV90b19kaXNwbGF5IiwiY3VycmVudF9hbGVydCIsImRlZmF1bHRfaWZpZCIsImNoYXJ0X2RhdGFfdXJsIiwidG9wX3RhYmxlX2FycmF5IiwidG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5Iiwibm90ZV9saXN0Iiwic2VsZWN0ZWRfcXVlcnlfcHJlc2V0IiwicXVlcnlfcHJlc2V0cyIsIm1vdW50X3JhbmdlX3BpY2tlciIsImhyZWZfZG93bmxvYWRfcmVjb3JkcyIsInNob3dfY2hhcnQiLCJkb3dubG9hZF9lbmRwb2ludCIsImdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5IiwibG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXciLCJzaG93X2NhcmRzIiwiaXNfcHJlc2V0IiwibG9hZF90b3BfdGFibGVfYXJyYXkiLCJlbmRwb2ludF9jYXJkcyIsInNob3dfc3Bpbm5lciIsImRhdGFfbG9hZGVkIiwiaXNfdmEiLCJpbml0X3BhcmFtcyIsImRlZmF1bHRfZXBvY2hfYmVnaW4iLCJkZWZhdWx0X2Vwb2NoX2VuZCIsImluaXRfdXJsX3BhcmFtcyIsImlzX250b3BfZW50ZXJwcmlzZV9sIiwiYnVpbHRpbiIsInNldF9xdWVyeV9wcmVzZXRzIiwicmVnaXN0ZXJfY29tcG9uZW50c19vbl9zdGF0dXNfdXBkYXRlIiwiZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duIiwidG9wX2luZGV4IiwibmV3X3RvcF9hcnJheSIsImxvYWRfdG9wX3RhYmxlX2RldGFpbHMiLCJvbl90YWJsZV9sb2FkZWQiLCJhZGRfdGFibGVfcm93X2ZpbHRlciIsIm1hcF90YWJsZV9kZWZfY29sdW1ucyIsIm1hcF9jb2x1bW5zIiwibDdfcHJvdG8iLCJwcm90byIsImNvbmZpZGVuY2UiLCJjb3B5X2J1dHRvbiIsInNldF9xdWVyeV9wcmVzZXRfY29sdW1ucyIsImNvbHVtbnNfZGVmIiwidmlzaWJsZV9kaWN0Iiwic25tcF9pbmZvIiwic2hvd19zbm1wX2luZm8iLCJzaG93X2luZm8iLCJoaXN0b3JpY2FsX2RhdGEiLCJzaG93X2hpc3RvcmljYWwiLCJzaG93X2Fja25vd2xlZGdlIiwic2hvd19kaXNhYmxlIiwic2hvd19zZXR0aW5ncyIsInNob3dfZGVsZXRlIiwiYWRkX2ZpbHRlciIsImNsaWNrX25hdmJhcl9pdGVtIiwicmVtb3ZlX2ZpbHRlcnNfZnJvbV91cmwiLCJnZXRfcGVybWFuZW50X2xpbmsiLCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsInNob3dfbW9kYWxfc25hcHNob3QiLCJhZGRfZXhjbHVkZSIsInJlZnJlc2hfcGFnZV9jb21wb25lbnRzIiwib25fdGFibGVfY3VzdG9tX2V2ZW50IiwiZXZlbnRzX21hbmFnZWQiLCJjbGlja19idXR0b25fc25tcF9pbmZvIiwiY2xpY2tfYnV0dG9uX2luZm8iLCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyIsImNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZSIsImNsaWNrX2J1dHRvbl9kaXNhYmxlIiwiY2xpY2tfYnV0dG9uX3NldHRpbmdzIiwiY2xpY2tfYnV0dG9uX3JlbW92ZSIsImNsaWNrX2J1dHRvbl9leHBhbmQiLCJyb3dfZmlsdGVycyIsInRhZ19maWx0ZXJzIiwiZmlsdGVyc19kaWN0Iiwic2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHMiLCJzaG93X21vZGFsX2RlbGV0ZV9hbGVydHMiLCJnZXRfc3RhdHVzX3ZpZXciLCJjaGVja19zZXR0aW5nc19ocmVmIiwiY29uZmlnc2V0X3JlZiIsInNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlciIsImxpbmtfdG9fcGFzdF9mbG93cyIsInRzdGFtcCIsImFsZXJ0X2RldGFpbHNfdXJsIiwidGFibGVfZmxvd3MiLCJjaGFydF9zdHlsZSIsImZsb3dzX2FnZ3JlZ2F0ZWQiLCJmbG93X3R5cGVfbGFiZWwiLCJnZXRfY2hhcnRfY29uZmlnX2Zyb21fcHJlc2V0X2NvbnN0IiwicHJlc2V0X2NvbnN0IiwiZl9jaGVja19sYXN0X21pbnV0ZV9lcG9jaF9lbmQiLCJjaGFydF9jb25maWciLCJmX21hcF9jaGFydF9vcHRpb25zIiwiZm9ybWF0dGVyX3R5cGUiLCJ1bml0X21lYXN1cmUiLCJjaGFuZ2VfZmxvd190eXBlIiwiZl9wcmludF9hc24iLCJmX3ByaW50X2xhdGVuY3kiLCJmaXJzdF9zZWVuIiwibDdwcm90byIsImNsaV9hc24iLCJzcnZfYXNuIiwiZmxvd19yaXNrIiwiZmxvd19yaXNrcyIsImZsb3dfcmlza19sYWJlbCIsImZsb3dfcmlza19oZWxwIiwiaGVscCIsImNsaV9ud19sYXRlbmN5Iiwic3J2X253X2xhdGVuY3kiLCJmbG93X2FsZXJ0cyIsInNob3dfYWxlcnRzIiwicGNhcF9kb3dubG9hZCIsInNob3dfcGNhcF9kb3dubG9hZCIsInJvd19kYXRhIiwiaXNfZW50ZXJwcmlzZV94bCIsIm5vdF9yZWZyZXNoX3RhYmxlIiwiY2xpY2tfYnV0dG9uX2Zsb3dfYWxlcnRzIiwiY2xpY2tfYnV0dG9uX3BjYXBfZG93bmxvYWQiLCJjbGlja19idXR0b25fZmxvd3MiLCJyb3dpZCIsIk5UT1BOR19JTlNUQU5DRV9OQU1FIiwiZmlsdGVyc19wYXJhbXNfb2JqZWN0IiwiZmlsdGVyX2tleSIsInRhZ19rZXkiLCJhbGVydHNfdXJsIiwicHJvYmVfaXAiLCJpbnN0YW5jZV9uYW1lIiwiYXNfdmxhbiIsIm91dHB1dF9zbm1wIiwiYXNfb3V0cHV0X3NubXAiLCJpbnB1dF9zbm1wIiwic2NyaXB0JDFnIiwiZGlzYWJsZV9wb2ludGVyX2V2ZW50cyIsInRpbWVzZXJpZXNfdmlzaWJpbGl0eSIsInRpbWVzZXJpZXNfbGlzdCIsImdldF9pbWFnZSIsIkR5Z3JhcGgiLCJFeHBvcnQiLCJhc1BORyIsImNoYW5nZV92aXNpYmlsaXR5Iiwic2V0VmlzaWJpbGl0eSIsImRhdGVfZm9ybWF0IiwiYXhlcyIsImF4aXNMYWJlbEZvcm1hdHRlciIsInZhbHVlRm9ybWF0dGVyIiwiem9vbUNhbGxiYWNrIiwiZGlzYWJsZVRzTGlzdCIsIm1pbkRhdGUiLCJtYXhEYXRlIiwiX25vcm1hbGl6ZVN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidXBkYXRlX3RpbWVzZXJpZXMiLCJ0aW1lc2VyaWVzIiwiZGVsZXRlX3RzIiwiYnl0ZXNUb1NpemVGb3JtYXR0ZXIiLCJoYW5kbGVySWRBZGRMaW5rIiwiaGFuZGxlcklkSnVtcEhpc3RvcmljYWwiLCJ0b3BfYXBwbGljYXRpb24iLCJ0YWJsZV92YWx1ZSIsInZpZXciLCJkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyIsImNvbHVtbkRlZnMiLCJ0YXJnZXRzIiwiY29sdW1uTmFtZSIsInNlcnZpY2UiLCJzY2hlbWEiLCJ0c19zY2hlbWEiLCJhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSIsInRzX3F1ZXJ5IiwicmVzcG9uc2l2ZVByaW9yaXR5IiwicmVuZGVyX2lmIiwiaXNfaGlzdG9yeV9lbmFibGVkIiwianVtcF90b19oaXN0b3JpY2FsIiwiaGlzdG9yaWNhbF9mbG93c191cmwiLCJzb3VyY2VfYXJyYXkiLCJwYXJhbXNfYXJyYXkiLCJzb3VyY2VfZGVmX2FycmF5Iiwic291cmNlX2RlZiIsInRvcF9jYXRlZ29yaWVzIiwiY2F0ZWdvcnkiLCJpbnRlcmZhY2VfdG9wX3RhYmxlcyIsImhvc3RfcmVmIiwiYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QiLCJzb3VyY2VzX3R5cGVzX2VuYWJsZWQiLCJpc19sb2NhbCIsImlzX2F2YWlsYWJsZSIsImhvc3RfdHNfYXZhaWxhYmxlIiwicF91cmwiLCJqdW1wX3RvX2hvc3QiLCJob3N0X3VybCIsInRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UiLCJpbnRlcmZhY2VUb3BUYWJsZXMiLCJob3N0X3RvcF90YWJsZXMiLCJicHNGb3JtYXR0ZXIiLCJ0b3Bfc25tcF9pbnRlcmZhY2UiLCJ0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QiLCJkZXZpY2UiLCJpZl9pbmRleCIsImZfZ2V0X2xhYmVsIiwidHNfZ3JvdXAiLCJzb3VyY2VfbGFiZWwiLCJsYWJlbF90ZXh0IiwiYWxpYXMiLCJzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzIiwidG9wX2Zsb3dfaW50ZXJmYWNlIiwiZmxvd19kZXZfdG9wX3RhYmxlcyIsImF2YWlsYWJsZV9pbnRlcmZhY2VzIiwic25tcF9kZXZpY2VfcG9ydF91cmwiLCJzbm1wX2RldmljZV9wb3J0cyIsImlmYWNlIiwicHJveHlfc25tcCIsInVpX3R5cGVzIiwic291cmNlc191cmxfZWxfdG9fc291cmNlIiwiaWZuYW1lIiwicG9vbF9pZCIsImFtX2hvc3QiLCJhbSIsIm1lYXN1cmVtZW50IiwibWVhc3VyZW1lbnRfa2V5IiwiYmxhY2tsaXN0IiwiY29sdW1uX25hbWUiLCJzb3VyY2VzX3R5cGVzX3RhYmxlcyIsImludGVyZmFjZSIsImhvc3RUb3BUYWJsZXMiLCJzbm1wX2ludGVyZmFjZSIsInNubXBJbnRlcmZhY2VUb3BUYWJsZXMiLCJzbm1wX2RldmljZSIsImZsb3dfZGV2aWNlIiwiZmxvd0RldmljZVRvcFRhYmxlcyIsImZsb3dfaW50ZXJmYWNlIiwic291cmNlc190eXBlcyIsInJlZ2V4X3BhZ2VfdXJsIiwiZl9tYXBfdHNfb3B0aW9ucyIsIm1haW5fc291cmNlX2RlZiIsInJlZ2V4X3R5cGUiLCJyZWZyZXNoX29uX3NvdXJjZXNfY2hhbmdlIiwic291cmNlc191cmwiLCJzb3VyY2VzX2Z1bmN0aW9uIiwidmFsdWVfdXJsIiwidmFsdWVfbWFwX3NvdXJjZXNfcmVzIiwiZGlzYWJsZV90c2tleSIsImZfZ2V0X3ZhbHVlX3VybCIsImZfc2V0X3ZhbHVlX3VybCIsInVpX3R5cGUiLCJ0c19vcHRpb25zIiwibWV0cmljIiwiaWRfZ3JvdXAiLCJkZXZpY2VfaG9zdCIsInNlbGVjdGVkX3NvdXJjZV92YWx1ZV9hcnJheSIsInByb3h5U25tcCIsIm1ldHJpY3NDb25zdHMiLCJzZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsIiwidGltZXNlcmllc19ncm91cHMiLCJwYXJhbXNfdGltZXNlcmllc19ncm91cHMiLCJwYXN0IiwiYXZnIiwicGVyY185NSIsIm1ldHJpY19zY2hlbWFfcXVlcnkiLCJ0aW1lc2VyaWVzX3BhcmFtIiwic291cmNlX3ZhbHVlX2FycmF5X3F1ZXJ5IiwiZ2V0X3RzX2dyb3VwX3VybF9wYXJhbSIsInVybF90aW1lc2VyaWVzX2dyb3VwcyIsImdldF90c19ncm91cCIsImdldF90c19ncm91cF9pZCIsImdldF9kZWZhdWx0X3RpbWVzZXJpZXNfZ3JvdXBzIiwibWV0cmljX3RzX3NjaGVtYSIsIm1ldHJpY19xdWVyeSIsImdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUiLCJnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJtZXRyaWNzIiwiZ2V0X21ldHJpY3MiLCJnZXRfZGVmYXVsdF9tZXRyaWMiLCJnZXRfdXJsX3BhcmFtX2Zyb21fdHNfZ3JvdXAiLCJ0c19ncm91cF91cmxfcGFyYW0iLCJzb3VyY2VfdHlwZV9pZCIsInNvdXJjZV92YWx1ZV9hcnJheSIsIm1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXkiLCJ0aW1lc2VyaWVzX3VybCIsImdldF9zb3VyY2VfdHlwZV9mcm9tX2lkIiwiZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5IiwiZ2V0X21ldHJpY19mcm9tX3NjaGVtYSIsInRzX3VybF9hcnJheSIsInRzX3VybCIsImdldF90aW1lc2VyaWVzIiwiZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCIsInNldF9zb3VyY2VfdHlwZV9pZF9ncm91cCIsIm1ldHJpY19pZCIsInNvdXJjZV9kZWZfdmFsdWUiLCJnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkiLCJnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdCIsInNvdXJjZV92YWx1ZV9kaWN0Iiwic291cmNlX3ZhbHVlIiwic291cmNlcyIsImdldF9zb3VyY2VzIiwiY2FjaGVfc291cmNlcyIsImdldF9zb3VyY2VfZGVmX2tleSIsImZfbWFwX3NvdXJjZV9lbGVtZW50Iiwic2V0X3NvdXJjZV92YWx1ZV9vYmplY3RfaW5fdXJsIiwic291cmNlX3ZhbHVlX29iamVjdCIsImNhY2hlX21ldHJpY3MiLCJsYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCIsImN1cnJlbnRfbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwiLCJlcG9jaF9zdHJpbmciLCJnZXRfbWV0cmljc191cmwiLCJzb3VyY2VfYXJyYXlfa2V5IiwiZ2V0X21ldHJpY19rZXkiLCJkZWZhdWx0X3Zpc2libGUiLCJtZXRyaWNfc2NoZW1hIiwiZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5Iiwic291cmNlX2RlZl9kaWN0Iiwic19kZWYiLCJ0c19xdWVyeV9hcnJheSIsInRzX3ZhbF9rZXkiLCJkZWZhdWx0X21ldHJpYyIsIm1ldHJpY3NNYW5hZ2VyIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fdXJsIiwiZ3JvdXBzIiwiUGx1Z2lucyIsIkxlZ2VuZCIsInhWYWx1ZSIsInNlbGVjdGVkWCIsInBvaW50cyIsInNlbGVjdGVkUG9pbnRzIiwic2VsZWN0ZWRSb3ciLCJsZWdlbmRNb2RlIiwiZHlncmFwaCIsImdldE9wdGlvbiIsImdlbmVyYXRlTGVnZW5kSFRNTCIsIm9uZV9lbV93aWR0aF8iLCJOb2RlIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsImxlZ2VuZF9kaXZfIiwicG9pbnQiLCJhcmVhIiwicGxvdHRlcl8iLCJsYWJlbHNEaXZXaWR0aCIsIm9mZnNldFdpZHRoIiwieUF4aXNMYWJlbFdpZHRoIiwiZ2V0T3B0aW9uRm9yQXhpcyIsImhpZ2hsaWdodFNlcmllcyIsImdldEhpZ2hsaWdodFNlcmllcyIsImZvbGxvd09mZnNldFgiLCJnZXROdW1lcmljT3B0aW9uIiwibGVmdExlZ2VuZCIsImNsaWVudFkiLCJpc19nZW5lcmF0ZWRfZGl2XyIsIkZJTExfQ09MT1JTIiwiZ2V0Q29sb3IiLCJkZWZhdWx0X2NvbG9yIiwiY29sb3JTdHIiLCJ0b1JHQl8iLCJkYXJrZW5Db2xvciIsImNvbG9yc19tb2R1bGUiLCJiYXJDaGFydFBsb3R0ZXIiLCJkcmF3aW5nQ29udGV4dCIsInlfYm90dG9tIiwidG9Eb21ZQ29vcmQiLCJ1c2VyX2F0dHJzXyIsInZhbHVlUmFuZ2UiLCJtaW5fc2VwIiwiSW5maW5pdHkiLCJzZXAiLCJjYW52YXN4IiwiYmFyX3dpZHRoIiwiY2VudGVyX3giLCJ5dmFsIiwiZmlsbFN0eWxlIiwiYWJzIiwiZmlsbFJlY3QiLCJjYW52YXN5Iiwic3Ryb2tlUmVjdCIsImR5Z3JhcGhQbG90dGVycyIsInRyYW5zZm9ybUNvbG9ycyIsImNvbG9yc1Bvc2l0aW9uRGljdCIsIm5ld0NvbG9ycyIsImNvbG9yc1Bvc2l0aW9uIiwiZ2V0Q29sb3JzRnJvbUNvbG9yIiwiY1Bvc2l0aW9uIiwiYmFzZUNvbG9yIiwic291cmNlQ29sb3IiLCJyZWRTb3VyY2UiLCJncmVlblNvdXJjZSIsImJsdWVTb3VyY2UiLCJjUmVkIiwiZ2V0Q29sb3JJbnRlcnBvbGF0aW9uIiwiY0dyZWVuIiwiY0JsdWUiLCJjb21wb25lbnRUb0hleCIsInJnYlRvSGV4IiwiZ2VuZXJhdGVDb2xvciIsImNvbG9yU291cmNlIiwiY29sb3JTdGFydCIsInRydW5jIiwiY29sb3JFbmQiLCJoZXgiLCJjb2xvcnNJbnRlcnBvbGF0aW9uIiwiZ2V0QXhpc0NvbmZpZ3VyYXRpb24iLCJudW1fb3JfbWlsbGlzIiwic2VyaWVfcG9pbnQiLCJyYXdEYXRhXyIsImF4aXNMYWJlbFdpZHRoIiwiYnVpbGRDaGFydE9wdGlvbnMiLCJpbnRlcnBvbGF0ZWRfY29sb3JzIiwiaGlnaGxpZ2h0X2NvbG9yIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldEhpZ2hsaWdodENvbG9yIiwibGFiZWxzU2VwYXJhdGVMaW5lcyIsImNvbm5lY3RTZXBhcmF0ZWRQb2ludHMiLCJpbmNsdWRlWmVybyIsImRyYXdQb2ludHMiLCJoaWdobGlnaHRTZXJpZXNCYWNrZ3JvdW5kQWxwaGEiLCJoaWdobGlnaHRTZXJpZXNPcHRzIiwic3Ryb2tlV2lkdGgiLCJwb2ludFNpemUiLCJoaWdobGlnaHRDaXJjbGVTaXplIiwiYXhpc0xhYmVsRm9udFNpemUiLCJjdXN0b21CYXJzIiwic3RhY2tlZEdyYXBoIiwidmFsdWVfcmFuZ2UiLCJoaWdobGlnaHRTZXJpZXNCYWNrZ3JvdW5kQ29sb3IiLCJkaXNhYmxlX3RzX2xpc3QiLCJ5UmFuZ2VQYWQiLCJwbG90dGVyIiwiZm9ybWF0dGVycyIsInkxIiwieTIiLCJjaGFuZ2VGb3JtYXR0ZXJzIiwiZm9ybWF0U2VyaWVQcm9wZXJ0aWVzIiwiZmlsbEdyYXBoIiwic3Ryb2tlUGF0dGVybiIsIkRBU0hFRF9MSU5FIiwiZmlsbEFscGhhIiwiZHlncmFwaENvbmZpZyIsImRlZmF1bHRDb2xvcnMiLCJjb25zdGFudF9zZXJpZV9jb2xvcnMiLCJnZXRTZXJpZUlkIiwiZm9ybWF0U2VyaWVDb2xvcnMiLCJwYWxldHRlX2xpc3QiLCJjb2xvcnNfbGlzdCIsImNvdW50MCIsImNvdW50MSIsImNvbG9yczAiLCJjb2xvcnMxIiwiZDN2NyIsInNjaGVtZUNhdGVnb3J5MTAiLCJwYWxldHRlIiwiZ2V0U2VyaWVOYW1lIiwidHNHcm91cCIsInVzZUZ1bGxOYW1lIiwibmFtZV9tb3JlX3NwYWNlIiwic291cmNlX2luZGV4IiwiZ2V0UGxvdHRlciIsImFkZE5ld1NlcmllIiwic2VyaWVfbmFtZSIsImZvcm1hdEJvdW5kc1NlcmllIiwidGltZXNlcmllX2luZm8iLCJ0aW1lc2VyaWVfb3B0aW9ucyIsIm1ldGFkYXRhIiwiZXBvY2hfc3RlcCIsInRzX2luZm8iLCJ0c19pZCIsInNjYWxhciIsImludmVydF9kaXJlY3Rpb24iLCJtZWFzdXJlX3VuaXQiLCJOYU4iLCJzcGxpdEJvdW5kU2VyaWUiLCJmb3JtYXR0ZWRfbmFtZSIsImZvcm1hdHRlcl9mb3VuZCIsImZvcm1hdFN0YW5kYXJkU2VyaWUiLCJ0c0NvbXBhcmUiLCJtaW5fdmFsdWUiLCJwYXN0X3NlcmllIiwiYWRkaXRpb25hbF9zZXJpZXMiLCJkcmF3X3N0YWNrZWQiLCJleHRyYV90aW1lc2VyaWVzIiwidGltZXNlcmllX25hbWUiLCJ1c2Vfc2VyaWVfbmFtZSIsImV4dF9sYWJlbCIsImdldE5hbWUiLCJ1c2VfZnVsbF9uYW1lIiwiYXZnX25hbWUiLCJwZXJjX25hbWUiLCJwYXN0X25hbWUiLCJwYXN0X3ZhbHVlIiwibmFtZXMiLCJhdmdfdmFsdWUiLCJzdGF0aXN0aWNzIiwicGVyY192YWx1ZSIsInBhc3RfbGFiZWwiLCJjb21wYWN0U2VyaWUiLCJmb3JtYXRTaW1wbGVTZXJpZSIsImNvdW50ZXIiLCJ0bXBfc2VyaWUiLCJmb3JtYXRTZXJpZSIsInRzT3B0aW9uc0FycmF5IiwidHNHcm91cHNBcnJheSIsInRzT3B0aW9ucyIsImJvdW5kcyIsImZvcm1hdFNpbmdsZVNlcmllIiwiZnVsbF9zZXJpZSIsImZvdW5kIiwiZm9ybWF0RnVsbFNlcmllIiwiZHlncmFwaEZvcm1hdCIsImdyb3Vwc09wdGlvbnNNb2Rlc0VudW0iLCJnZXRHcm91cE9wdGlvbk1vZGUiLCJncm91cF9pZCIsInRzQXJyYXlUb09wdGlvbnNBcnJheSIsImdyb3Vwc09wdGlvbnNNb2RlIiwidHNBcnJheVRvT3B0aW9uc0FycmF5UmF3Iiwic3BsaXR0ZWRUc0FycmF5IiwidHNPcHRpb25zQXJyYXlTdGFja2VkIiwidHNHcm91cHNBcnJheVN0YWNrZWQiLCJ0c09wdGlvbnNBcnJheU5vdFN0YWNrZWQiLCJ0c0dyb3Vwc0FycmF5Tm90U3RhY2tlZCIsIm5vdF9zdGFja2VkIiwic3BsaXRUc0FycmF5U3RhY2tlZCIsInRzRGljdCIsInlheGlzSWQiLCJ0c0VsIiwiZGlzcGxheV9mdWxsX25hbWUiLCJEeWdyYXBoT3B0aW9uc0FycmF5IiwidHNBcnJheSIsInRzT3B0aW9uc0FycmF5MiIsInRzR3JvdXBzQXJyYXkyIiwiRHlncmFwaE9wdGlvbnMiLCJ0c0FycmF5VG9PcHRpb25zIiwib3B0aW9uc0FycmF5IiwiZ2V0VHNRdWVyeSIsIm5vdF9tZXRyaWNfcXVlcnkiLCJ0c1F1ZXJ5IiwiZ2V0TWFpblNvdXJjZURlZkluZGV4IiwiZ2V0VHNDaGFydHNPcHRpb25zIiwiaHR0cFByZWZpeCIsImVwb2NoU3RhdHVzIiwidGltZXNlcmllc0dyb3VwcyIsImlzUHJvIiwidHNDaGFydHNPcHRpb25zIiwicGFyYW1zRXBvY2hPYmoiLCJwYXJhbXNDaGFydCIsInRzX2NvbXBhcmUiLCJ0c0RhdGFVcmxNdWx0aSIsInRzX3JlcXVlc3RzIiwibWFpbl9zb3VyY2VfaW5kZXgiLCJwT2JqIiwidHNrZXkiLCJ0c0RhdGFVcmwiLCJwYXJhbXNVcmxSZXF1ZXN0IiwidGltZXNlcmllc1V0aWxzIiwic2VsZWN0X3NlYXJjaF9tZXRyaWNzIiwiY3VycmVudF9wYWdlX3NvdXJjZV90eXBlIiwic2VsZWN0ZWRfc291cmNlX3R5cGUiLCJzb3VyY2VzX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkiLCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSIsImlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkIiwiZW5hYmxlX2FwcGx5X3NvdXJjZSIsInJnX3RleHQiLCJzb3VyY2VfdGV4dCIsImhpZGVfc291cmNlcyIsInNlbGVjdGVkX21ldHJpYyIsInRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIiwidGltZXNlcmllc190b19hZGQiLCJ3YWl0X2luaXQiLCJjaGFuZ2Vfc291cmNlX3R5cGUiLCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQiLCJjaGFuZ2VfYWN0aW9uIiwicmVnZXhfc291cmNlX2FycmF5IiwicmVnZXhfc291cmNlIiwic2V0X3JlZ2V4Iiwic2QiLCJzZXRfaGlkZV9zb3VyY2VzIiwic291cmNlc19hcnJheV90ZW1wIiwiZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJkZWZhdWx0X3NvcnVjZV92YWx1ZV9hcnJheSIsInNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic2V0X3NvdXJjZXNfYXJyYXkiLCJzZXRfbWV0cmljcyIsImFwcGx5X3NvdXJjZV9hcnJheSIsInNldF9zb3VyY2VfaW5wdXQiLCJjaGFuZ2Vfc291cmNlX2FycmF5IiwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSIsInNvdXJjZV9kZWZfaW5kZXgiLCJmb3JjZV9yZWxvYWRfc291cmNlcyIsInJlbG9hZF9zb3VyY2VzIiwiaW5wdXRfY29uZmlybSIsImRlZmF1bHRfY29uZmlnIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSIsInNvdXJjZV90eXBlX25hbWUiLCJnZXRfdGltZXNlcmllc19ncm91cF9pZCIsInRzX2dyb3VwX2lkIiwiYWRkX3RzX2dyb3VwIiwidHNfZ3JvdXBfdG9fYWRkIiwiZW1pdF9hcHBseSIsInRzX2dyb3VwX2luZGV4Iiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzIiwiZmlsZW5hbWVfdmFsaWRhdGlvbiIsImVuYWJsZV9kb3dubG9hZCIsImV4dCIsInNhdmVfbGFzdF9zb3J0IiwibGFzdF9zb3J0aW5nIiwic29ydGluZ19wcmVmIiwic29ydGluZ19rZXkiLCJsb2FkX2xhc3Rfc29ydCIsInVuZm9ybWF0dGVkX3ByZWYiLCJzcGxpdHRlZF9wcmVmIiwiYmFzZV9wYXJhbXMiLCJleHRlbmRfY29uZmlnIiwic2VydmVyU2lkZSIsInNjcm9sbFgiLCJzZWFyY2hpbmciLCJjb2x1bW5zX2NvbmZpZyIsImF1dG9XaWR0aCIsInRhYmxlQXBpIiwib0luc3RhbmNlIiwiYXBpIiwib3JkZXJDb2x1bW5JbmRleCIsIm9yZGVyQ29sdW1uTmFtZSIsImJlZm9yZVNlbmQiLCJkcmF3Q2FsbGJhY2siLCJhTGFzdFNvcnQiLCJ0YWJsZV9idXR0b25zIiwiRGF0YVRhYmxlIiwibG9hZF90YWJsZV9tZW51IiwiZmlsdGVyX2J1dHRvbnMiLCJjdXJyX3ZhbHVlIiwibnVtX25vbl9hY3RpdmVfZW50cmllcyIsImxvYWREYXRhdGFibGUiLCJ0YWJsZV9kZWZhdWx0X21lbnUiLCJ0YWJsZV93cmFwcGVyIiwiZ2V0X3RhYmxlX2RlZmF1bHRfbWVudSIsIm1lbnVfYXJyYXkiLCJ2Tm9kZSIsInJlbmRlcl9jb21wb25lbnQiLCJkZWxldGVfYnV0dG9uX2hhbmRsZXJzIiwiaXNfZGVzdHJveWVkIiwiZGVzdHJveV90YWJsZSIsInJlZnJlc2hfbWVudSIsImlzX2xhc3Rfc29ydGluZ19hdmFpbGFibGUiLCJ2YWx1ZV90b19zZWFyY2giLCJwYWdlX3NuYXBzaG90cyIsImlkX2RhdGVfdGltZV9waWNrZXIiLCJjaGFydHMiLCJkYXRlX3RpbWVfcGlja2VyIiwidG9wX3RhYmxlX3JlZiIsIm1vZGFsX3RpbWVzZXJpZXMiLCJtb2RhbF9kb3dubG9hZF9maWxlIiwiaXNfc2FmYXJpIiwiaW1hZ2VfYnV0dG9uX3RpdGxlIiwiZW5hYmxlX3N0YXRzX3RhYmxlIiwiY2hhcnRzX29wdGlvbnNfaXRlbXMiLCJncm91cHNfb3B0aW9uc19tb2RlcyIsImN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZSIsImdyb3Vwc19tb2RlIiwiaW5pdF9ncm91cHNfb3B0aW9uX21vZGUiLCJsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCIsImN1c3RvbV9tZXRyaWMiLCJ0c19tZW51X3JlYWR5IiwiY29sdW1uc190bXAiLCJzdGF0c19jb2x1bW5zIiwic2V0X2RlZmF1bHRfc291cmNlX29iamVjdF9pbl91cmwiLCJwdXNoX2N1c3RvbV9tZXRyaWMiLCJsb2FkX3BhZ2Vfc3RhdHNfZGF0YSIsImNhY2hlX3NuYXBzaG90cyIsImVuYWJsZV9zbmFwc2hvdHMiLCJtZXRyaWNzX3NuYXBzaG90cyIsImlzX3NuYXBzaG90IiwiZ2V0X3NuYXBzaG90c19tZXRyaWNzIiwic20iLCJnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMiLCJzZWxlY3RfbWV0cmljIiwidXJsX3BhcmFtZXRlcnMiLCJ0aW1lc2VyaWVzX3VybF9wYXJhbXMiLCJnZXRfc2VsZWN0ZWRfdGltZXNlcmllc19ncm91cHMiLCJsb2FkX3NlbGVjdGVkX21ldHJpY19wYWdlX3N0YXRzX2RhdGEiLCJyZWZyZXNoX21ldHJpY3MiLCJlcG9jaF9jaGFuZ2UiLCJuZXdfZXBvY2giLCJpc19udG9wX3BybyIsInNlbGVjdGVkX3RvcF90YWJsZSIsInRhYmxlX2NvbmZpZ19kZWYiLCJnZXRfdG9wX3RhYmxlX3VybCIsInJlZnJlc2hfdG9wX3RhYmxlIiwiY2hhcnRfcmVsb2FkZWQiLCJzaG93X21hbmFnZV90aW1lc2VyaWVzIiwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zIiwiY2hhcnRfaW5kZXgiLCJ0c19jaGFydHNfb3B0aW9ucyIsInJlZnJlc2hfc25hcHNob3RzIiwiYXBwbHlfbW9kYWxfdGltZXNlcmllcyIsImNoYW5nZV9ncm91cHNfb3B0aW9uc19tb2RlIiwicmVsb2FkX2NoYXJ0c19kYXRhIiwicmVsb2FkX3RvcF90YWJsZV9vcHRpb25zIiwicmVmcmVzaGVkX3RpbWVfaW50ZXJ2YWwiLCJnZXRfdHNfY29tcGFyZSIsInNldF90aW1lc2VyaWVzX2dyb3Vwc19zb3VyY2VfbGFiZWwiLCJjaGFydHNfb3B0aW9ucyIsInVwZGF0ZV9jaGFydHMiLCJzZXRfY2hhcnRzX29wdGlvbnNfaXRlbXMiLCJleHRlbmRfc2VyaWVfbmFtZSIsImRpc2FibGVfc3RhdHMiLCJmX2dldF90b3RhbF9mb3JtYXR0ZXJfdHlwZSIsIm1hcF90eXBlIiwic3RhdHNfcm93cyIsInRzX3N0YXRzIiwic19tZXRhZGF0YSIsInRvdGFsX2Zvcm1hdHRlcl90eXBlIiwidG90YWxfZm9ybWF0dGVyIiwiYXZlcmFnZSIsIm1heF92YWwiLCJtaW5fdmFsIiwic2V0X3N0YXRzX3Jvd3MiLCJ0c19ncm91cF9kaWN0IiwidG9wX3RhYmxlX2lkX2RpY3QiLCJ0b3BfdGFibGVfb3B0aW9ucyIsIm1haW5fc291cmNlIiwic291cmNlX3R5cGVfdGFibGVzIiwiZW5hYmxlc190YWJsZV92YWx1ZSIsInNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWQiLCJyZW5kZXJfaWZfY29udGV4dCIsInNldF90b3BfdGFibGVfb3B0aW9ucyIsInRhYmxlX3ZpZXciLCJwX29iaiIsImRldGFpbF92aWV3IiwibmV3X2NoYXJ0cyIsImp1bXBfdG9faGlzdG9yaWNhbF9mbG93cyIsImhpc3RvcmljYWxfdXJsIiwic2hvd19tb2RhbF9kb3dubG9hZF9maWxlIiwiY2hhcnRfaW1hZ2VfYXJyYXlfcHJvbWlzZSIsImNhbnZhcyIsIkltYWdlIiwicmVqZWN0IiwiY2hhcnRfaW1hZ2VfYXJyYXkiLCJjYW52YXNfY29udGV4dCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJzY3JpcHQkMTkiLCJ0YWJfbGlzdCIsIm9sZF90YWIiLCJ0bXAiLCJjaGFuZ2VfdGFiIiwiYm9keV9kZWxldGUiLCJ0aXRsZV9kZWxldGUiLCJkZWxldGVfIiwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCIsInNjcmlwdCQxNyIsImRhdGF0YWJsZSIsIkRhdGF0YWJsZSIsIk1vZGFsRGVsZXRlQ29uZmlybSIsIlRhYkxpc3QiLCJOb3RlTGlzdCIsInBhZ2VfY3NyZiIsInRhYmxlX2ZpbHRlcnMiLCJhc3NldF9mYW1pbHkiLCJhc3NldF90YWJsZV90YWIiLCJzZXJ2aWNlX3RhYmxlX3RhYiIsIkRhdGF0YWJsZVZ1ZSIsImRhdGF0YWJsZUJ1dHRvbiIsImdldF91cmwiLCJyZWxvYWRfdGFibGUiLCJ0bXBfcGFyYW1zIiwiZGVmYXVsdERhdGF0YWJsZUNvbmZpZyIsImNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rIiwiY29uZmlnRGV2aWNlcyIsImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkIiwiY2VudHJhbGl0eUNvbmZpZ0RldmljZXMiLCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5Iiwic3RhcnRfZGF0YXRhYmxlIiwiaGlkZV9kcm9wZG93bnMiLCJnZXRfYWN0aXZlX3RhYmxlIiwic2hvd19kZWxldGVfYWxsX2RpYWxvZyIsInRpdGxlX2Rvd25sb2FkIiwiYm9keV9kb3dubG9hZCIsIm5vdGVzIiwiY2xpY2tfaXRlbSIsImhpc3RvcmljYWxfZmxvd19saW5rIiwiY2xpZW50X2lwIiwiY2xpZW50Iiwic2VydmVyX2lwIiwic2VydmVyIiwiaGlzdG9yaWNhbF9mbG93IiwiX2NvbXBvbmVudF9tb2RhbF9kZWxldGVfY29uZmlybSIsIm9uRGVsZXRlIiwiX2NvbXBvbmVudF90YWJfbGlzdCIsIm9uQ2xpY2tfaXRlbSIsIl9jb21wb25lbnRfZGF0YXRhYmxlIiwic2NyaXB0JDE2IiwiaXNfYWRtaW4iLCJsYXN0X3NlZW4iLCJsaXZlX2Zsb3dfbGluayIsImxpdmVfZmxvdyIsImRlZmF1bHRPcHRpb25zIiwiYXV0b1Jlc2l6ZSIsInNoYXBlIiwic2NhbGluZyIsImRyYXdUaHJlc2hvbGQiLCJmb250Iiwic2hhZG93IiwiZWRnZXMiLCJpbmhlcml0Iiwic21vb3RoIiwicm91bmRuZXNzIiwic2NhbGVGYWN0b3IiLCJhcnJvd1N0cmlrZXRocm91Z2giLCJpbXByb3ZlZExheW91dCIsImludGVyYWN0aW9uIiwiaGlkZUVkZ2VzT25EcmFnIiwiaGlkZUVkZ2VzT25ab29tIiwiaG92ZXIiLCJ0b29sdGlwRGVsYXkiLCJwaHlzaWNzIiwic29sdmVyIiwic3RhYmlsaXphdGlvbiIsIml0ZXJhdGlvbnMiLCJmb3JjZUF0bGFzMkJhc2VkIiwiY2VudHJhbEdyYXZpdHkiLCJzcHJpbmdMZW5ndGgiLCJ1bmtub3duIiwicHJpbnRlciIsImZhY2UiLCJ3ZWlnaHQiLCJ2aWRlbyIsIndvcmtzdGF0aW9uIiwibGFwdG9wIiwidGFibGV0IiwicGhvbmUiLCJ0diIsIm5ldHdvcmtpbmciLCJ3aWZpIiwibmFzIiwibXVsdGltZWRpYSIsImlvdCIsIm50b3BuZ19tYXBfbWFuYWdlciIsInNlcnZpY2VfaWQiLCJuZXdfc3RhdGUiLCJzZXJ2aWNlX3N0YXR1cyIsImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCIsInNjcmlwdCQxNSIsInNlcnZpY2VfYWNjZXB0YW5jZSIsImNyZWF0ZWRDZWxsIiwiY3JlYXRlX2FjdGlvbl9idXR0b25zIiwidG9nZ2xlX2FsbG93ZWRfc3RhdGUiLCJoYXNoX2lkIiwidG9nZ2xlX2RlbmllZF9zdGF0ZSIsInRvZ2dsZV91bmRlY2lkZWRfc3RhdGUiLCJjdXJyZW50U3RhdHVzIiwiYWNjZXB0YW5jZSIsImFsbG93ZWRCdXR0b24iLCJkZW5pZWRCdXR0b24iLCJ1bmRlY2lkZWRCdXR0b24iLCJzd2l0Y2hfdG9fc3RhbmRhcmQiLCJzd2l0Y2hfdG9fY2VudHJhbGl0eSIsImRhdGFSZXF1ZXN0IiwibWFwX2lkIiwibm9kZXNfZGF0YXNldCIsImVkZ2VzX2RhdGFzZXQiLCJoaWdobGlnaHRBY3RpdmUiLCJtYXhfZW50cmllc19yZWFjaGVkIiwiZW1wdHlfbWFwIiwiZGF0YXNldHMiLCJhbGxfbm9kZXMiLCJnZXRFbGVtZW50QnlJZCIsImxvYWRfc2NhbGUiLCJyZXF1ZXN0X2luZm8iLCJOZXR3b3JrIiwic2V0X2V2ZW50X2xpc3RlbmVyIiwibWF4X2VudHJ5X3JlYWNoZWQiLCJEYXRhU2V0IiwiZ2VuZXJhdGVfaHRtbF90b29sdGlwIiwicmV0dXJuVHlwZSIsImVtcHR5X25ldHdvcmsiLCJvbGRTY2FsZSIsInNldE9wdGlvbnMiLCJzZWxlY3RlZE5vZGUiLCJub2RlSWQiLCJvbGRfY29sb3IiLCJvbGRfaWNvbl9jb2xvciIsImhpZGRlbkxhYmVsIiwiY29ubmVjdGVkTm9kZXMiLCJnZXRDb25uZWN0ZWROb2RlcyIsImFsbENvbm5lY3RlZE5vZGVzIiwidXBkYXRlQXJyYXkiLCJuZWlnaGJvdXJob29kSGlnaGxpZ2h0IiwiaG9zdF9pbmZvIiwiZXZlbnRfbGlzdGVuZXJzIiwic2V0RGF0YSIsImlzX21heF9lbnRyeV9yZWFjaGVkIiwiYXV0b2xheW91dCIsInN0YWJpbGl6ZSIsInVwZGF0ZV91cmxfcGFyYW1zIiwiYXV0b2xheW91dF8iLCJjaGFuZ2VfZmlsdGVyX2V2ZW50Iiwic2NyaXB0JDEyIiwiTmV0d29ya01hcCIsIk1vZGFsQXV0b2xheW91dENvbmZpcm0iLCJhbGxfZmlsdGVyX2xpc3QiLCJOZXR3b3JrTWFwVnVlIiwiZmlsdGVyX25hbWUiLCJmaWx0ZXJfbGlzdCIsImFjdGl2ZV9maWx0ZXIiLCJhY3RpdmVfZmlsdGVyX2xpc3QiLCJkb3dubG9hZF91cmwiLCJzdGFydF92aXNfbmV0d29ya19tYXAiLCJyZWxvYWRfbWFwIiwiZmlsdGVyX2VsIiwidXBkYXRlX2FuZF9yZWxvYWRfbWFwIiwiZ2V0X21hcCIsInNob3dfYXV0b2xheW91dF9kaWFsb2ciLCJ1cGRhdGVfdmlld19zdGF0ZV9pZCIsInRpdGxlX2F1dG9sYXlvdXQiLCJib2R5X2F1dG9sYXlvdXQiLCJub19zZXJ2aWNlc19tZXNzYWdlIiwibWF4X2VudHJ5X3RpdGxlIiwiX2NvbXBvbmVudF9tb2RhbF9hdXRvbGF5b3V0X2NvbmZpcm0iLCJvbkF1dG9sYXlvdXQiLCJfY29tcG9uZW50X25ldHdvcmtfbWFwIiwiZW1wdHlfbWVzc2FnZSIsInNjcmlwdCQxMSIsInVwZGF0ZWRfdXJsX3BhcmFtcyIsInNjcmlwdCQxMCIsImlucHV0X21hY19saXN0IiwiaW5wdXRfdHJpZ2dlcl9hbGVydHMiLCJhZGRfIiwibWFjX2xpc3QiLCJ0cmlnZ2VyX2FsZXJ0cyIsImlucHV0X21hY19hZGRyZXNzX25hbWUiLCJpbnB1dF9kZXZpY2Vfc3RhdHVzIiwiY3VzdG9tX25hbWVfcGxhY2Vob2xkZXIiLCJkZXZpY2Vfc3RhdHVzX2xpc3QiLCJlZGl0X2FsbCIsImVkaXRfIiwibWFjX2FsaWFzIiwibWFjX3N0YXR1cyIsInRtcF9kZXZpY2Vfc3RhdHVzIiwidHJpZ2dlcl9hbGVydCIsInRhYmxlX2RldmljZV9leGNsdXNpb25zIiwibW9kYWxfZGVsZXRlX2NvbmZpcm0iLCJtb2RhbF9kZWxldGVfYWxsIiwibW9kYWxfYWRkX2RldmljZSIsIm1vZGFsX2VkaXRfZGV2aWNlIiwiYWRkX3VybCIsImRlbGV0ZV91cmwiLCJlZGl0X3VybCIsImxlYXJuaW5nX3N0YXR1c191cmwiLCJpc19sZWFybmluZ19zdGF0dXMiLCJ0aXRsZV9kZWxldGVfYWxsIiwiYm9keV9kZWxldGVfYWxsIiwidGl0bGVfYWRkIiwiYm9keV9hZGQiLCJmb290ZXJfYWRkIiwibGlzdF9ub3Rlc19hZGQiLCJ0aXRsZV9lZGl0IiwidGl0bGVfZWRpdF9hbGwiLCJsZWFybmluZ19tZXNzYWdlIiwicm93X3RvX2RlbGV0ZSIsInJvd190b19lZGl0Iiwibm90ZXNfbGlzdCIsInN1Yl9ub3Rlc19saXN0IiwiY2xpY2tfYnV0dG9uX2VkaXRfZGV2aWNlIiwiY2xpY2tfYnV0dG9uX2RlbGV0ZSIsImxlYXJuaW5nX3N0YXR1cyIsImNyc2YiLCJkZWxldGVfcm93IiwiZGVsZXRlX2FsbF9jb25maXJtIiwiZWRpdF9hbGxfZGV2aWNlc19jb25maXJtIiwibGVhcm5pbmdfZG9uZSIsImFkZF9kZXZpY2UiLCJhZGRfZGV2aWNlX3Jlc3QiLCJzZXRfcGFyYW1zX2luX3VybCIsImVkaXRfcm93IiwiY29sdW1uc19zb3J0aW5nIiwidGFrZV9pcCIsImZvcm1hdF9ib29sIiwicl9jb2wiLCJzeW1ib2xpY19tYWMiLCJpc19lbmFibGVkIiwibWFwX2NvbmZpZyIsInNjcmlwdCRZIiwic2NyaXB0JFgiLCJjaGFuZ2VfbWFwX2V2ZW50Iiwic2NyaXB0JFciLCJQYWdlUGVyaW9kaWNpdHlNYXAiLCJQYWdlUGVyaW9kaWNpdHlUYWJsZSIsIlBhZ2VBc3NldE1hcCIsIlBhZ2VBc3NldFRhYmxlIiwiUGFnZVNlcnZpY2VNYXAiLCJQYWdlU2VydmljZVRhYmxlIiwiUGFnZU5hdmJhciIsImJhc2VfdXJsX3BhcmFtcyIsIm5hdmJhcl9pbmZvIiwic2VydmljZV9tYXBfZmlsdGVyX2xpc3QiLCJzZXJ2aWNlX3RhYmxlX2ZpbHRlcl9saXN0IiwicGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0IiwicGVyaW9kaWNpdHlfdGFibGVfZmlsdGVyX2xpc3QiLCJhc3NldF9tYXBfZmlsdGVyX2xpc3QiLCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdCIsImFjdGl2ZV90YWIiLCJ1cGRhdGVkX3ZpZXciLCJuYXZiYXJfY29udGV4dCIsImZvcm1hdF9uYXZiYXIiLCJmb3JtYXRfbmF2YmFyX3RpdGxlIiwic2VsZWN0ZWRfaWZhY2UiLCJzZWxlY3RlZF9ob3N0IiwibmF2YmFyX25vZGUiLCJnZXRfYWN0aXZlX3RhYiIsImlzX2FjdGl2ZSIsInRhcmdldF9ibGFuayIsIl9jb21wb25lbnRfcGFnZV9uYXZiYXIiLCJfY29tcG9uZW50X3BhZ2Vfc2VydmljZV9tYXAiLCJfY29tcG9uZW50X3BhZ2Vfc2VydmljZV90YWJsZSIsIl9jb21wb25lbnRfcGFnZV9wZXJpb2RpY2l0eV9tYXAiLCJfY29tcG9uZW50X3BhZ2VfcGVyaW9kaWNpdHlfdGFibGUiLCJfY29tcG9uZW50X3BhZ2VfYXNzZXRfbWFwIiwic2Fua2V5X2NoYXJ0X3JlZiIsInNhbmtleV9zaXplIiwiZ2V0X3NhbmtleV9kYXRhIiwibm9kZXNfYWRkZWRfZGljdCIsImZfYWRkX25vZGUiLCJub2RlX2lkIiwibmV3X25vZGUiLCJmX2FkZF9saW5rIiwibmV3X2xpbmsiLCJzb3VyY2VfbGluayIsInNvdXJjZV9jb2xvciIsInRhcmdldF9saW5rIiwidGFyZ2V0X2NvbG9yIiwid3JhcF9ncmFwaF9yc3AiLCJsaW5rX2NvbG9yIiwidGFyZ2V0X25vZGUiLCJzb3VyY2Vfbm9kZSIsInNjYWxlT3JkaW5hbCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImdldF9zaXplIiwic2Fua2V5Iiwibm9kZUFsaWduIiwic2Fua2V5Q2VudGVyIiwibm9kZVdpZHRoIiwibm9kZVBhZGRpbmciLCJleHRlbnQiLCJzYW5rZXlpbXBsIiwiY2FsY3VsYXRlX3NhbmtleSIsIngwIiwieTAiLCJlYXNlTGluZWFyIiwicmdiIiwiZGFya2VyIiwibGciLCJzYW5rZXlMaW5rSG9yaXpvbnRhbCIsImRyYXdfc2Fua2V5IiwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQiLCJzY3JpcHQkVSIsIkNoYXJ0IiwiaXNfY2hfZW5hYmxlZCIsImlzX2xvY2FsZSIsInRzX2w3X2VuYWJsZWQiLCJ0c19jYXRfZW5hYmxlZCIsImFwcGxpY2F0aW9uc190YWIiLCJQYWdlVnVlIiwicGVyY2VudGFnZV9zZW50IiwiYnl0ZXNfc2VudCIsInRvdF9ieXRlcyIsInBlcmNlbnRhZ2VfcmN2ZCIsImJ5dGVzX3JjdmQiLCJhZGRfYWN0aW9uX2NvbHVtbiIsImFwcGxpY2F0aW9uc0NvbmZpZyIsImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyIsImNhdGVnb3J5X2lkIiwibW9yZV9wcm90b3MiLCJjYXRlZ29yaWVzQ29uZmlnIiwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcyIsImNoYXJ0X29wdGlvbiIsInRyYWZmaWNfdGFibGUiLCJjb25maWdfdHJhZmZpY190YWJsZSIsInRyYWZmaWNDb25maWciLCJjaGFydF9kb25lIiwidG1wMiIsIm5vX2RhdGEiLCJzZXRfc2Fua2V5X2RhdGEiLCJzYW5rZXlfZGF0YSIsInNhbmtleURhdGEiLCJkM19ub2RlcyIsInNjYWxlRXh0ZW50Iiwiem9vbWVkIiwiZGF0YV9vYmoiLCJzdWJqZWN0IiwiZHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJsaW5rc19kMyIsImxnX2QzIiwiX194IiwiX195IiwiX194MCIsIl9feTAiLCJfX3gxIiwiX195MSIsInNldF9ub19kYXRhX2ZsYWciLCJzZXRfbm9fZGF0YSIsInNhbmtleV9jaGFydCIsInNhbmtleV9mb3JtYXRfbGlzdCIsImZpbHRlcl9pY29uIiwiYWN0aXZlX2hvc3RzX3R5cGUiLCJvbl9ub2RlX2NsaWNrIiwiaXNfbGlua19ub2RlIiwidXJsX29iaiIsInVwZGF0ZV9zYW5rZXkiLCJlbnRyeSIsImhvc3RzX3R5cGUiLCJnZXRfc2Fua2V5X3VybCIsImdyYXBoIiwiZl9sb2dfbGluayIsInNvdXJjZV9ub2RlX2lkIiwidGFyZ2V0X25vZGVfaWQiLCJmX2xvZyIsIm5vZGVfZGljdCIsImZfZmlsdGVyIiwidGFrZV9lbGVtZW50IiwiZmlsdGVyX2xvZyIsImdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUiLCJtYWtlX2NvbXBsZXRlX2dyYXBoIiwibWFpbl9ub2RlX2lkIiwiZl9nZXRfbGlua19kaXJlY3Rpb24iLCJmX2dldF9ub2RlX2RpcmVjdGlvbl9pZCIsImRpcmVjdGlvbiIsImdyYXBoMl9ub2RlX2RpY3QiLCJncmFwaDIiLCJtYWluX25vZGUiLCJmX2dldF9saW5rX25vZGVfaWQiLCJsaW5rX3RvX25vZGVzX2RpY3QiLCJsaW5rX25vZGVfaWQiLCJsaW5rX3RvX25vZGVzIiwibm9kZV9saW5rcyIsImdldF9saW5rX3ZhbHVlIiwibGlua19ub2RlIiwic2Fua2V5X25vZGVfZGljdCIsInNhbmtleV9ub2RlcyIsInNhbmtleV9ub2RlIiwic2Fua2V5X2xpbmtzIiwiZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhIiwidHJhZmZpYyIsImRhdGFVdGlscyIsImlzRW1wdHlPck51bGwiLCJpc0VtcHR5QXJyYXlPck51bGwiLCJmb3JtYXRfbnVtX2Zvcl9zb3J0Iiwibm9ybWFsaXplX251bWJlcl92YWx1ZSIsImxvd2VyX3ZhbHVlIiwic29ydEJ5TnVtYmVyIiwidmFsXzEiLCJ2YWxfMiIsInNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUiLCJzb3J0aW5nRnVuY3Rpb25zIiwic29ydEJ5SVAiLCJzb3J0QnlOYW1lIiwiaGFzX2hvc3RfcG9vbHMiLCJoYXNfY2lkciIsImhvc3RfcGxhY2Vob2xkZXIiLCJtZXRyaWNzX3JlYWR5IiwibWV0cmljX2xpc3QiLCJpbml0X2Z1bmMiLCJpZmlkX2xpc3QiLCJmbG93X2V4cG9ydGVyX2RldmljZXMiLCJmbG93X2V4cG9ydGVyX2RldmljZV9pZmlkX2xpc3QiLCJpbnRlcmZhY2VfbWV0cmljX2xpc3QiLCJob3N0X3Bvb2xfbWV0cmljX2xpc3QiLCJmbG93X2RldmljZV9tZXRyaWNfbGlzdCIsImZyZXF1ZW5jeV9saXN0IiwidGhyZXNob2xkX21lYXN1cmUiLCJ0aHJlc2hvbGRfc2lnbiIsInNlbGVjdGVkX2ZyZXF1ZW5jeSIsInNlbGVjdGVkX2lmaWQiLCJzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UiLCJzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZCIsInNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMiLCJzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljIiwic2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljIiwibWV0cmljX3R5cGUiLCJydWxlX3R5cGUiLCJmbG93X2RldmljZV90aW1lc2VyaWVzX2F2YWlsYWJsZSIsImlzX2VkaXRfcGFnZSIsInBhZ2VfY3NyZl8iLCJyb3dfdG9fZWRpdF9pZCIsImludmFsaWRfYWRkIiwiaG9zdF9wb29sX2xpc3QiLCJuZXR3b3JrX2xpc3QiLCJzZWxlY3RlZF9ob3N0X3Bvb2wiLCJzZWxlY3RlZF9uZXR3b3JrIiwic2VsZWN0ZWRfbmV0d29ya19tZXRyaWMiLCJuZXR3b3JrX21ldHJpY19saXN0IiwiYWN0aXZlX21ldHJpY190eXBlX2xpc3QiLCJtZXRyaWNfdHlwZV9saXN0IiwiZXhwb3J0ZXJfbWV0cmljX3R5cGVfbGlzdCIsInBvb2xfbWV0cmljX3R5cGVfbGlzdCIsImV4cG9ydGVyX3VzYWdlX3R5cGVfbGlzdCIsInZvbHVtZV90aHJlc2hvbGRfbGlzdCIsImRlZmF1bHRfYWN0aXZlIiwidGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCIsInNpZ25fdGhyZXNob2xkX2xpc3QiLCJwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0IiwidGhyZXNob2xkIiwicmVzZXRfcmFkaW9fc2VsZWN0aW9uIiwicmFkaW9fYXJyYXkiLCJzZXRfcnVsZV90eXBlIiwiY2hhbmdlX21ldHJpY190eXBlX2hwIiwiY2hhbmdlX21ldHJpY190eXBlX2V4cG9ydGVyIiwidG1wX21ldHJpY190eXBlX2xpc3QiLCJzZXRfYWN0aXZlX29uZSIsImNoZWNrX2VtcHR5X2hvc3QiLCJzZXRfYWN0aXZlX3NpZ25fcmFkaW8iLCJzZWxlY3RlZF9yYWRpbyIsIm1lYXN1cmUiLCJzZXRfYWN0aXZlX3JhZGlvIiwiaXNfZWRpdCIsInRtcF9ob3N0IiwidG1wX2ZyZXF1ZW5jeSIsInRtcF9tZXRyaWMiLCJ0bXBfbWV0cmljX2xhYmVsIiwidG1wX2ludGVyZmFjZV9tZXRyaWMiLCJ0bXBfcnVsZV90eXBlIiwidG1wX2ludGVyZmFjZSIsImJhc2ljX3ZhbHVlIiwiYmFzaWNfc2lnbl92YWx1ZSIsInRtcF90aHJlc2hvbGQiLCJ0bXBfc2lnbl92YWx1ZSIsInRtcF9tZXRyaWNfdHlwZSIsInRtcF9leHRyYV9tZXRyaWMiLCJleHRyYV9tZXRyaWMiLCJ0bXBfZWRpdF9yb3dfaWQiLCJlbWl0X25hbWUiLCJmcmVxdWVuY3kiLCJtZXRyaWNfbGFiZWwiLCJydWxlX3RocmVzaG9sZF9zaWduIiwicnVsZV9pZCIsImZsb3dfZGV2aWNlX2lmaW5kZXgiLCJmbG93X2RldmljZV9pcCIsIm1ldHJpY19leHAiLCJtZXRyaWNfZXhwX2xhYmVsIiwicnVsZV9pZmlkIiwibmV0d29ya19pZCIsInRtcF9ob3N0X3Bvb2xfaWQiLCJ0bXBfaG9zdF9wb29sX2xhYmVsIiwiaG9zdF9wb29sX2lkIiwiaG9zdF9wb29sX2xhYmVsIiwidXBkYXRlX2V4cG9ydGVyX2ludGVyZmFjZXMiLCJpbnRlcmZhY2VzX2xpc3QiLCJ1cmxfZGV2aWNlX2V4cG9ydGVyX2RldGFpbHMiLCJleHBvcnRlcl9pbnRlcmZhY2VzIiwidGltZXNlcmllc19hdmFpbGFibGUiLCJmb3JtYXRfZmxvd19leHBvcnRlcl9kZXZpY2VfbGlzdCIsIl9mX2V4cF9kZXZfbGlzdCIsImRldiIsImNoYW5nZV9leHBvcnRlcl9pbnRlcmZhY2VzIiwicm93X3RocmVzaG9sZF92YWx1ZSIsImZsb3dfZXhwX2lmaWQiLCJjb250YWlucyIsInNldF9yb3dfdG9fZWRpdCIsInZhbGUiLCJyZXNldF9tb2RhbF9mb3JtIiwibWV0cmljc0xvYWRlZCIsIl9tZXRyaWNfbGlzdCIsIl9pZmlkX2xpc3QiLCJfaW50ZXJmYWNlX21ldHJpY19saXN0IiwiX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlcyIsIl9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QiLCJfaW5pdF9mdW5jIiwiX2RlbGV0ZV9yb3ciLCJfaG9zdF9wb29sX2xpc3QiLCJfbmV0d29ya19saXN0IiwiX2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsIl9uZXR3b3JrX21ldHJpY19saXN0IiwiY29tcGFyZV9sYWJlbHMiLCJmb3JtYXRfaWZpZF9saXN0IiwiaW52YWxpZEFkZCIsInNob3dfdm9sdW1lIiwidGFibGVfaG9zdF9ydWxlcyIsIm1vZGFsX2FkZF9ob3N0X3J1bGUiLCJtZXRyaWNfdXJsIiwibWV0cmljX2lmbmFtZV91cmwiLCJtZXRyaWNfaG9zdF9wb29sX3VybCIsIm1ldHJpY19uZXR3b3JrX3VybCIsIm1ldHJpY19mbG93X2V4cF9kZXZpY2VfdXJsIiwiZmxvd19kZXZpY2VzX3VybCIsImhvc3RfcG9vbF91cmwiLCJuZXR3b3JrX2xpc3RfdXJsIiwiaWZpZF91cmwiLCJhZGRfcnVsZV91cmwiLCJyZW1vdmVfcnVsZV91cmwiLCJndWkiLCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyIsImZsb3dfZXhwb3J0ZXJfbGlzdCIsImZsb3dfZXhwb3J0ZXJfbWV0cmljX2xpc3QiLCJlZGl0IiwiYWRkX2hvc3RfcnVsZSIsImluaXRfZWRpdCIsImRlbGV0ZV9oYW5kbGVyIiwiZWRpdF9oYW5kbGVyIiwiZm9ybWF0dGVkX2RhdGEiLCJpbnRlcmZhY2VfbGFiZWwiLCJmbG93X2V4cF9pZmlkX25hbWUiLCJmb3JtYXRfdGFyZ2V0IiwiZm9ybWF0X3J1bGVfdHlwZSIsImZvcm1hdF9tZXRyaWMiLCJmcmVxdWVuY3lfdGl0bGUiLCJmb3JtYXRfZnJlcXVlbmN5Iiwic2lnbl9kYXRhIiwiZm9ybWF0X2xhc3RfbWVhc3VyZW1lbnQiLCJmb3JtYXRfdGhyZXNob2xkIiwiaG9zdFJ1bGVzVGFibGVDb25maWciLCJnZXRfbWV0cmljX2xpc3QiLCJnZXRfaWZpZF9saXN0IiwiZ2V0X2ludGVyZmFjZV9tZXRyaWNfbGlzdCIsImdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QiLCJnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX2xpc3QiLCJ0bXBfaG9zdF9wb29sX2xpc3QiLCJnZXRfaG9zdF9wb29sX2xpc3QiLCJ0bXBfaG9zdF9wb29sX21ldHJpY19saXN0IiwiZ2V0X2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsInRtcF9uZXR3b3JrX2xpc3QiLCJnZXRfbmV0d29ya19saXN0IiwidG1wX25ldHdvcmtfbWV0cmljX2xpc3QiLCJnZXRfbmV0d29ya19tZXRyaWNfbGlzdCIsInRhYmxlX29wdGlvbnMiLCJwb3J0X2luZm8iLCJ3aWRnZXRfbmFtZSIsInJlc3RfdXJsIiwiYnViYmxlX2NoYXJ0IiwiZm9ybWF0X3JlcXVlc3QiLCJwYXJhbXNfc3RyaW5nIiwiYnViYmxlX21vZGUiLCJ0aW1lZnJhbWUiLCJtb2RlX2lkIiwib3B0aW9uX2xpc3QiLCJudG9wX2V2ZW50cyIsImZ1biIsImZvcm1hdF9vcHRpb25zIiwiYXZhaWxhYmxlX2ZpbHRlcnMiLCJub19kYXRhX21lc3NhZ2UiLCJib2R5X2RpdiIsImxpdmVfcmVzdCIsImhpc3RvcmljYWxfcmVzdCIsInVwZGF0ZV9oZWlnaHQiLCJ1cGRhdGVfd2lkdGgiLCJsNHByb3RvIiwiY2hlY2tfbWF4X2VudHJpZXMiLCJvcHRpb25hbF9pbmZvIiwiY3JpdGVyaWFfbGlzdF9kZWYiLCJlbnRlcnByaXNlX20iLCJzZWFyY2hfZW5hYmxlZCIsInRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cyIsImZpbHRlcl90YWJsZV9hcnJheSIsImZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSIsInNlbGVjdGVkX2NyaXRlcmlhIiwiY3JpdGVyaWFfbGlzdCIsImlzX250b3BfZW50ZXJwcmlzZV9tIiwiY3JpdGVyYV9saXN0X2RlZl9jb20iLCJ1cGRhdGVfY3JpdGVyaWEiLCJhZ2dyZWdhdGlvbl9jcml0ZXJpYSIsImluaXRfc2VsZWN0ZWRfY3JpdGVyaWEiLCJsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkiLCJzZXRfZmlsdGVyX2FycmF5X2xhYmVsIiwibG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3IiwiZGV2aWNlSVAiLCJiYXNpY19sYWJlbCIsInVybF9lbnRyeSIsImdldF9vcGVuX2ZpbHRlcl90YWJsZV9kcm9wZG93biIsImZpbHRlcl9pbmRleCIsIm5ld19maWx0ZXJfYXJyYXkiLCJsb2FkX3RhYmxlX2ZpbHRlcnMiLCJpZmlkX3BhcmFtIiwiaWZpZF9wYXJhbV9mb3JfdXJsIiwiZm9ybWF0X2Zsb3dzX2ljb24iLCJmb3JtYXRfYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZCIsImZvcm1hdF9jbGllbnRfbmFtZSIsImZvcm1hdF9zZXJ2ZXJfbmFtZSIsInZsYW5zIiwicGVyY2VudGFnZV9ieXRlc19zZW50IiwicGVyY2VudGFnZV9ieXRlc19yY3ZkIiwiYWxlcnRfbGFiZWwiLCJpc19hbGVydGVkIiwiaW5fbWVtb3J5IiwiZXh0cmFfbGFiZWxzIiwiYWRkX2hvc3QiLCJhcHBsaWNhdGlvbiIsImxhYmVsX3dpdGhfaWNvbnMiLCJjb25maWRlbmNlX25hbWUiLCJ0YWJsZV90ZXN0Iiwic2V0X2RhdGF0YWJsZV9jb25maWciLCJ0eXBlX2FycmF5IiwiZGVmYXVsdF9kaXJlY3Rpb25fdmFsdWUiLCJkaXJlY3Rpb25zIiwiYmlkaXJlY3Rpb25hbCIsInNlbGVjdGVkX2RpcmVjdGlvbiIsImRlZmF1bHRfYWN0aW9uX3ZhbHVlIiwic2VsZWN0ZWRfYWN0aW9uIiwibmV3X3J1bGVfaWQiLCJzb3VyY2VfcmVnZXgiLCJzZWxlY3RlZF9kZXN0X3R5cGUiLCJkZXN0X3JlZ2V4IiwiZGVzdCIsImludGVyZmFjZV9saXN0X3VybCIsImludGVyZmFjZV9saXN0IiwiaW50ZXJmYWNlX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX2ludGVyZmFjZSIsInNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlIiwiYnV0dG9uX3RleHQiLCJpc192YWxpZF9zb3VyY2UiLCJpc192YWxpZCIsImlzX3ZhbGlkX2Rlc3QiLCJpc19vcGVuX2luX2FkZCIsInNldF9pbnRlcmZhY2VfYXJyYXkiLCJjaGFuZ2VfZGVzdF90eXBlIiwiZGVzdGluYXRpb24iLCJzZWxlY3RlZF90eXBlIiwiaXNfc2V0X2ludGVyZmFjZV9hcnJheSIsInJlc19pbnRlcmZhY2VfbGlzdCIsInJnIiwic3JjX3R5cGUiLCJzcmNfdmFsdWUiLCJkc3RfdHlwZSIsImRzdF92YWx1ZSIsInBvbGljeSIsImRlZmF1bHRfYWN0aW9uIiwiZGVmYXVsdF90eXBlIiwidGFibGVfcnVsZXMiLCJtb2RhbF9hZGRfcnVsZV9jb25maWciLCJtb2RhbF9jaGFuZ2VfZGVmYXVsdF9wb2xpY3kiLCJkZWZhdWx0X3BvbGljeSIsImVkaXRfcnVsZSIsInJ1bGUiLCJzZXRfcnVsZSIsImFkZF9ydWxlIiwibG9hZF9kZWZhdWx0X3BvbGljeSIsImdldF9wb2xpY3lfdXJsIiwic2V0X2RlZmF1bHRfcG9saWN5Iiwic2V0X3BvbGljeV91cmwiLCJzaG93X21vZGFsX2NoYW5nZV9wb2xpY3kiLCJ3cmFwX2NvbHVtbnNfY29uZmlnIiwiZGVsZXRlX3J1bGUiLCJzZWxlY3RlZF9jYXRlZ29yeSIsImNhdGVnb3J5X2xpc3QiLCJjdXN0b21fcnVsZXMiLCJhcHBsaWNhdGlvbl9uYW1lIiwiYXBwbGljYXRpb25faWQiLCJjaGVja192YWxpZGF0aW9uIiwiY2hlY2tfYXBwbGljYXRpb25fbmFtZSIsImNoZWNrX2N1c3RvbV9ydWxlcyIsImNoZWNrIiwibDdfcHJvdG9faWQiLCJwcm90b2NvbF9hbGlhcyIsImVkaXRfcm93X2NhdGVnb3J5IiwicG9wdWxhdGVfbW9kYWxfZm9ybSIsImxvYWRDYXRlZ29yeUxpc3QiLCJmb3JtYXR0ZWRfbGlzdCIsImNhdF9pZCIsImFwcF9saXN0IiwiZm9ybWF0X2NhdGVnb3J5X2xpc3QiLCJfcmVtb3ZlIiwiYXBwbGljYXRpb25zX3RhYmxlIiwibW9kYWxfZGVsZXRlX2FwcGxpY2F0aW9uIiwibW9kYWxfYWRkX2FwcGxpY2F0aW9uIiwiY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZSIsInVwZGF0ZV9tZXNzYWdlIiwiY2F0ZWdvcnlfbGlzdF91cmwiLCJhZGRfYXBwbGljYXRpb25fdXJsIiwiZGVsZXRlX2FwcGxpY2F0aW9uX3VybCIsInNob3dfbWVzc2FnZSIsIl9hZGQiLCJvcGVuX2FkZF9tb2RhbCIsIl9tZXNzYWdlIiwiaGFzX3Byb3Rvc19maWxlIiwiaXNfY3VzdG9tIiwibG9hZF9jYXRlZ29yaWVzIiwiZmlsdGVyX2FwcCIsImVycm9yX21lc3NhZ2UiLCJkaXNjb3ZlcnlfcmVxdWVzdGVkIiwibmV0d29ya19kaXNjb3ZlcnlfdGFibGUiLCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkiLCJwcm9ncmVzc19tZXNzYWdlIiwibGFzdF9uZXR3b3JrX2Rpc2NvdmVyeSIsImRpc2NvdmVyeV9yZXF1ZXN0ZWRfbWVzc2FnZSIsImdob3N0X21lc3NhZ2UiLCJ0b29fbWFueV9kZXZpY2VzX21lc3NhZ2UiLCJnaG9zdF9tZXNzYWdlX2FkZGVkIiwidGltZW91dF9pZCIsImRpc2NvdmVyeV91cmwiLCJuZXR3b3JrX2Rpc2NvdmVyeV9kYXRhIiwicnVuX25ldHdvcmtfZGlzY292ZXJ5IiwiY2hlY2tEaXNjb3ZlcnkiLCJwcm9ncmVzcyIsImdob3N0X2ZvdW5kIiwiYWRkX25vdGVzIiwidGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cCIsIm1zX2RhdGEiLCJkb3dubG9hZF9iYWNrdXBfaGFuZGxlciIsInNubXBfbWV0cmljX2xpc3QiLCJzbm1wX2RldmljZXNfbGlzdCIsInNubXBfaW50ZXJmYWNlc19saXN0IiwiZW5hYmxlX2ludGVyZmFjZXMiLCJzbm1wX2ludGVyZmFjZXNfdXJsIiwic2VsZWN0ZWRfc25tcF9kZXZpY2UiLCJzZWxlY3RlZF9zbm1wX2ludGVyZmFjZSIsInNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYyIsIm1ldHJpY190eXBlX2FjdGl2ZV9saXN0Iiwic2lnbl9hYnNvbHV0ZV92YWx1ZSIsImNoYW5nZV9pbnRlcmZhY2VzIiwiaW50ZXJmYWNlX2lkIiwibGFiZWxfdG9faW5zZXJ0IiwicmVzdWx0X2ludGVyZmFjZXMiLCJjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCIsImxpc3RfbWV0cmljc19hY3RpdmUiLCJ0bXBfZGV2aWNlIiwidG1wX2RldmljZV9sYWJlbCIsInRtcF9kZXZpY2VfaWZpZCIsInRtcF9kZXZpY2VfaWZpZF9sYWJlbCIsIm1lYXN1cmVfdW5pdF9sYWJlbCIsInNubXBfZGV2aWNlX2xhYmVsIiwic25tcF9kZXZpY2VfcG9ydCIsInNubXBfZGV2aWNlX3BvcnRfbGFiZWwiLCJzbm1wX3RocmVzaG9sZF92YWx1ZSIsInNubXBfdGhyZXNob2xkX3VuaXQiLCJzbm1wX21ldHJpY190eXBlX2xhYmVsIiwiZGV2aWNlX3BvcnQiLCJfc25tcF9kZXZpY2VzX2xpc3QiLCJfc25tcF9tZXRyaWNfbGlzdCIsImRldmljZXNfbGlzdCIsImZvcm1hdF9zbm1wX2RldmljZXNfbGlzdCIsIm1vZGFsX2FkZF9zbm1wX2RldmljZV9ydWxlIiwic25tcF9tZXRyaWNfdXJsIiwic25tcF9kZXZpY2VzX3VybCIsImRldmljZV9sYWJlbCIsImRldmljZV9wb3J0X2xhYmVsIiwiZm9ybWF0X2ludGVyZmFjZSIsImdldF9zbm1wX21ldHJpY19saXN0IiwidmVyYm9zZSIsImdldF9zbm1wX2RldmljZXNfbGlzdCIsInNlbGVjdGVkX3BvcnQiLCJzZWxlY3RlZF9hcHBsaWNhdGlvbiIsInRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcyIsInBvcnRfbGlzdCIsImFwcGxpY2F0aW9uX2xpc3QiLCJsNF9wcm90byIsInVwZGF0ZV9kcm9wZG93bl9tZW51cyIsInVwZGF0ZV9wb3J0X2xpc3QiLCJ1cGRhdGVfcG9ydCIsInNldF9wb3J0X2luX3VybCIsImxpdmVfZmxvd3MiLCJpc19hcHBsaWNhdGlvbl9zZWxlY3RlZCIsImw3X3Byb3RvX25hbWUiLCJuX2hvc3RzIiwicHJvdG9faWQiLCJudW1faG9zdHMiLCJmb3JtYXRfaXAiLCJmb3JtYXRfaG9zdF9uYW1lIiwiZm9ybWF0X21hYyIsInRvdF90cmFmZmljIiwicG9ydF9wbGFjZWhvbGRlciIsInNlbGVjdGVkX2ludGVyZmFjZXMiLCJyZXBlYXRlcl90eXBlIiwiaW50ZXJmYWNlc19zZWFyY2giLCJjaGVja19lbXB0eV9wb3J0IiwicmVwZWF0ZXJfdHlwZV9hcnJheSIsInJlcGVhdGVyX2lkIiwiaW52YWxpZF9pZmFjZV9udW1iZXIiLCJzZWxlY3RlZF9yZXBlYXRlcl90eXBlIiwiYWxsX2NyaXRlcmlhIiwidXBkYXRlX2ludGVyZmFjZXNfc2VsZWN0ZWQiLCJyZW1vdmVfaW50ZXJmYWNlc19zZWxlY3RlZCIsIml0ZW1fdG9fZGVsZXRlIiwiY2hhbmdlX3JlcGVhdGVyX3R5cGUiLCJyZXBlYXRlcl90IiwiaW50ZXJmYWNlcyIsImRldGFpbHMiLCJ0bXBfaW50ZXJmYWNlcyIsInRtcF9kZXRhaWxzIiwiaW50ZXJmYWNlX2RldGFpbHMiLCJyb3dfaW50ZXJmYWNlcyIsInRtcF9zZWxlY3RlZF9pbnRlcmZhY2VzIiwicm93X2lmYWNlIiwibW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZyIsImVkaXRfcmVwZWF0ZXIiLCJyZXBlYXRlciIsImFkZF9yZXBlYXRlciIsImZvcm1hdF9pbnRlcmZhY2VzIiwicmV0dXJuX21lc3NhZ2UiLCJzaG93X3JldHVybl9tc2ciLCJkZWxldGVfaG9zdCIsInNlcmlhbF9rZXkiLCJudW1faG9zdHNfbXNnIiwiZGVsZXRlZF9ob3N0cyIsIl9yb3dfaWQiLCJzZWxlY3RlZF9lcG9jaCIsImVwb2NoX2xpc3QiLCJ1cGRhdGVfb3B0aW9uIiwic2VsZWN0ZWRfdmFsdWUiLCJzZWxlY3RlZF9mb3JtYXQiLCJmb3JtYXRfbGlzdCIsInRhYmxlX2luYWN0aXZlX2hvc3RzIiwibW9kYWxfZG93bmxvYWQiLCJtb2RhbF9kZWxldGVfb2xkZXIiLCJjaGFydF8xIiwiY2hhcnRfMiIsImNoYXJ0XzMiLCJzaG93X2NoYXJ0cyIsImluYWN0aXZlX2hvc3RzX3RhYl9saXN0IiwiY2hhbmdlX3Nob3dfY2hhcnRzIiwiaXBfYWRkcmVzcyIsImRlbGV0ZV9hbGxfZW50cmllcyIsImRlbGV0ZV9lbnRyaWVzX3NpbmNlIiwiZGV2aWNlX3R5cGUiLCJwcmludF9odG1sX3RpdGxlIiwicHJpbnRfc3RhdHNfcm93IiwiaG9zdF9zdGF0cyIsImN1c3RvbV9uYW1lIiwicHJldl9uYW1lIiwiZ2V0X2Zsb3dkZXZfYWxpYXNfdXJsIiwiZmxvd2Rldl9pcCIsInVwZGF0ZV9mbG93ZGV2X2FsaWFzX3VybCIsImdldEZsb3dEZXZBbGlhcyIsInVwZGF0ZUZsb3dEZXZBbGlhcyIsImNoZWNrRGlzYWJsZWQiLCJCSVRfVkFMVUUiLCJ1cGxpbmtfc3BlZWQiLCJwcmV2X3VwbGlua19zcGVlZCIsImRvd25saW5rX3NwZWVkIiwicHJldl9kb3dubGlua19zcGVlZCIsImdldF9pbnRlcmZhY2VfY29uZmlnX3VybCIsImRldmljZV9pcCIsInBvcnRfaW5kZXgiLCJ1cGRhdGVfaW50ZXJmYWNlX2NvbmZpZ191cmwiLCJnZXRGbG93RGV2aWNlSW50ZXJmYWNlQ29uZmlnIiwidXBkYXRlSW50ZXJmYWNlQ29uZmlnIiwiZGVsZXRlX3R5cGUiLCJzaG93X25vdGVfbGlzdCIsImF1dG9tYXRpY19zY2FuX2ZyZXF1ZW5jaWVzX2xpc3QiLCJzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeSIsInVwZGF0ZV8iLCJzY2FuX2ZyZXF1ZW5jeSIsIkNJRFJfMzIiLCJub19ob3N0X2ZlZWRiYWNrIiwicG9ydHNfcGxhY2Vob2xkZXIiLCJlbnRlcnByaXNlX25vdGVfbGlzdCIsInNlbGVjdGVkX3NjYW5fdHlwZSIsInNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyIsImhpZGVfcG9ydHNfcGxhY2Vob2xkZXIiLCJhY3RpdmF0ZV9hZGRfc3Bpbm5lciIsInNjYW5fdHlwZV9saXN0IiwiZGlzY292ZXJlZF9zY2FuX3R5cGVfbGlzdCIsInNob3dfcG9ydF9mZWVkYmFjayIsImlzX2VudGVycHJpc2VfbCIsImlzX3BvcnRfY29ycmVjdCIsImlzX2NpZHJfY29ycmVjdCIsImlzX25ldHNjYW5fb2siLCJpc19ob3N0X2NvcnJlY3QiLCJpc19pcHY0X25ldHNjYW4iLCJzY2FuX2ZyZXF1ZW5jaWVzX2xpc3QiLCJjaWRyX29wdGlvbnNfbGlzdCIsInNlbGVjdGVkX2NpZHIiLCJpc19kYXRhX25vdF9vayIsInJlZnJlc2hfc2VsZWN0X3NlYXJjaCIsInVwZGF0ZV9zZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMiLCJyZW1vdmVfc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzIiwiY2hlY2tfaG9zdF9yZWdleCIsImlzX2lwdjQiLCJpc19pcHY2IiwiaXNfaG9zdF9uYW1lIiwiY2hlY2tfcG9ydHMiLCJob3N0X3BvcnRzIiwiaG9zdF9zY2FuX3R5cGUiLCJuZXdfaG9zdCIsIm5ld19ob3N0X25hbWVfcmVzb2x2ZWQiLCJyZXNvbHZlX2hvc3RfbmFtZV91cmwiLCJyZXNvbHZlX2hvc3RfbmFtZSIsInRtcF9zZWNvbmRfc2Nhbl90eXBlcyIsInRtcF9zZWNvbmRfc2Nhbl90eXBlc19mb3JtYXR0ZWQiLCJzY2FuX3BvcnRzIiwiY2lkciIsInNjYW5faWQiLCJkaXNjb3ZlcmVkX2hvc3Rfc2Nhbl90eXBlIiwiX2hvc3QiLCJkaXNjb3ZlcmVkX3NjYW5fdHlwZV9pZHNfYXJyYXkiLCJ0bXBfZm91bmRfc2Nhbl90eXBlIiwidG1wX3NlbGVjdGVkX3NjYW5fdHlwZXMiLCJzZXR0ZWRfc2Nhbl90eXBlIiwiX3NjYW5fdHlwZV9saXN0IiwiX2lmaWQiLCJfaXNfZW50ZXJwcmlzZV9sIiwic2Nhbl90eXBlcyIsIm51bV92dWxuX2ZvdW5kX2YiLCJudW1fdnVsbl9mb3VuZCIsImlzX29rX2xhc3Rfc2NhbiIsImxhc3Rfc2NhbiIsIm1heF9zY29yZV9jdmVfZiIsIm1heF9zY29yZV9jdmUiLCJmb250X2NvbG9yIiwic2Nhbl90eXBlX2YiLCJmcm9tX3JlcG9ydCIsImlzX2Rvd24iLCJsYXN0X3NjYW5fZiIsImR1cmF0aW9uX2YiLCJzY2FuX2ZyZXF1ZW5jeV9mIiwiaXNfb2tfbGFzdF9zY2FuX2YiLCJwb3J0c19saXN0X3N0cmluZyIsInBvcnRzX3N0cmluZyIsImdldF9udW1fb3Blbl9wb3J0c19pY29uIiwiZGlmZl9jYXNlIiwidW51c2VkX3BvcnRfbGlzdCIsImZpbHRlcmVkX3BvcnRfbGlzdCIsInVkcF9wb3J0c19mIiwidWRwX3BvcnRzIiwibnVtX29wZW5fcG9ydHMiLCJob3N0X2luX21lbSIsIm51bV9wb3J0c19pY29uIiwidWRwX3BvcnRzX2Nhc2UiLCJ1ZHBfcG9ydHNfdW51c2VkIiwidWRwX2ZpbHRlcmVkX3BvcnRzIiwidGNwX3BvcnRzX2YiLCJ0Y3BfcG9ydHMiLCJ0Y3BfcG9ydHNfY2FzZSIsInRjcF9wb3J0c191bnVzZWQiLCJ0Y3BfcG9ydHNfZmlsdGVyZWQiLCJnZXRfaWNvbl9jb21wb25lbnQiLCJwb3J0c191bnVzZWQiLCJwb3J0c19maXRlcmVkIiwicG9ydF9iYWRnZSIsImZpbmRfYmFkZ2UiLCJwb3J0c19maWx0ZXJlZCIsImljb25fY29tcCIsImJ1aWxkX2hvc3RfdG9fc2Nhbl9yZXBvcnRfdXJsIiwic2Nhbl9yZXR1cm5fcmVzdWx0Iiwic2Nhbl9kYXRlIiwiaG9zdF9mIiwiaG9zdF9ub3RfcmVhY2hhYmxlIiwiaW5zZXJ0X3RleHQiLCJhbHJlYWR5X2luc2VydF90ZXh0IiwiaW5fcHJvZ3Jlc3Nfc2Nhbl90ZXh0IiwiZW5hYmxlX2NsaWNraG91c2VfdGV4dCIsInRpdGxlX3VwZGF0ZV9wZXJpb2RpY2l0eV9zY2FuIiwiYWRkX2hvc3RfdXJsIiwiZWRpdF9ob3N0X3VybCIsInJlbW92ZV9ob3N0X3VybCIsInNjYW5faG9zdF91cmwiLCJzY2FuX3R5cGVfbGlzdF91cmwiLCJhY3RpdmVfbW9uaXRvcmluZ191cmwiLCJzY2FuX3Jlc3VsdF91cmwiLCJjaGVja19zdGF0dXNfdXJsIiwidGFibGVfaG9zdHNfdG9fc2NhbiIsIm1vZGFsX2FkZCIsIm1vZGFsX3VwZGF0ZV9wZXJpb2RpdGljeV9zY2FuIiwiaW5fcHJvZ3Jlc3NfbnVtYmVyIiwicm93X3RvX3NjYW4iLCJhdXRvcmVmcmVzaCIsIm1vZGFsX29wZW5lZCIsImNsaWNraG91c2VfZGlzYWJsZWQiLCJpbnNlcnRfd2l0aF9zdWNjZXNzIiwiYWxyZWFkeV9pbnNlcnRlZCIsImdldF9zY2FuX3R5cGVfbGlzdF92IiwiZ2V0X3NjYW5fdHlwZV9saXN0IiwiY2hlY2tfaW5fcHJvZ3Jlc3Nfc3RhdHVzIiwiaXNfY2xpY2tob3VzZV9lbmFibGVkIiwiY2hlY2tfYXV0b3JlZnJlc2giLCJjbGlja19idXR0b25fZWRpdF9ob3N0IiwiY2xpY2tfYnV0dG9uX3NjYW4iLCJjbGlja19idXR0b25fZG93bmxvYWQiLCJjbGlja19idXR0b25fc2hvd19yZXN1bHQiLCJjb21wYXJlX2J5X2hvc3RfaXAiLCJjb2x1bW5fZGF0YSIsImdldF9zY2FuX3N0YXR1c192YWx1ZSIsInJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMiLCJzY2FuX2hvc3RfbXNnIiwiYWRkX2hvc3RfcmVzdCIsInNldF9hbHJlYWR5X2luc2VydF9vcl9pbnNlcnRfd2l0aF9zdWNjZXNzIiwiY29sdW1uc19mb3JtYXR0ZXIiLCJpc19yZXBvcnQiLCJzaG93X3Jlc3VsdCIsIm51bV92dWxuZXJhYmlsaXRpZXNfZm91bmQiLCJudW1fdnMiLCJjdXJyZW50X2NsYXNzIiwiY2xhc3NfaXRlbSIsInNjYW5fdHlwZV9sYWJlbCIsImluX3Byb2dyZXNzIiwidXBkYXRlX2FsbF9zY2FuX2ZyZXF1ZW5jaWVzIiwidG90YWxfaW5fcHJvZ3Jlc3MiLCJzY2Fuc19lbmRlZCIsImNvbmZpcm1fc2Nhbl9hbGxfZW50cmllcyIsInVwZGF0ZV9hbGxfcGVyaW9kaWNpdHkiLCJzY2FuX3JvdyIsInNjYW5fcm93X3Jlc3QiLCJzY2FuX3NpbmdsZV9ob3N0Iiwic2Nhbl9hbGxfZW50cmllcyIsImRlbGV0ZV9hbGxfc2Nhbl9ob3N0cyIsImRlbGV0ZV9hbGxfcm93cyIsInVwZGF0ZV9tb2RhbF9zdGF0dXMiLCJtZXNzYWdlX2h0bWwiLCJ0aXRsZV9odG1sIiwiaG9zdF9ocmVmIiwiaXNfaW5fbWVtIiwiZ2V0X3Jlc3VsdCIsInRhYmxlX29wZW5fcG9ydHMiLCJjbGlja19idXR0b25fc2hvd19ob3N0cyIsImNvbXBhcmVfYnlfcG9ydCIsImZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQiLCJmb3JtYXRfY3ZlX251bSIsImhvc3RzIiwiaG9zdHNfc3BsaXRlZCIsImhvc3Rfc3BsaXR0ZWQiLCJob3N0X2xhYmVsIiwicG9ydF9udW1iZXIiLCJyZXBvcnRfZGF0ZSIsInJlcG9ydF9uYW1lIiwiaXNfcmVwb3J0X25hbWVfY29ycmVjdCIsInRtcF9yZXBvcnRfZGF0ZSIsInRtcF9uYW1lIiwicmVwb3J0X3RpdGxlIiwiY2hlY2tfdGl0bGUiLCJpc1JlcG9ydE5hbWVWYWxpZCIsInNpbmdsZV93b3JkIiwib3Blbl9yZXBvcnRfdXJsIiwicmVtb3ZlX3JlcG9ydF91cmwiLCJlZGl0X3JlcG9ydF91cmwiLCJ0YWJsZV92c19yZXBvcnRzIiwibW9kYWxfZWRpdCIsImNsaWNrX2J1dHRvbl9lZGl0IiwiZm9ybWF0dGVkX3JlcG9ydF9uYW1lIiwiZm9ybWF0X3JlcG9ydF9uYW1lIiwiY29tcGFyZV9ieV9yZXBvcnRfZGF0ZSIsImVkaXRfcmVwb3J0X3Jlc3QiLCJwcmludGFibGUiLCJ0YWJsZV9zbm1wX3VzYWdlIiwiY2hhcnRfaWQiLCJsYXN0X3ZhbHVlIiwiY29uZ2VzdGlvbl9yYXRlIiwiY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMiLCJjbGlja19idXR0b25fY29uZmlndXJhdGlvbiIsInBvc3RfcGFyYW1zIiwidGl0bGVIZWlnaHQiLCJ4QXhpc0hlaWdodCIsInBpeGVsc1BlckxhYmVsIiwieFJhbmdlUGFkIiwiZ3JhbnVsYXJpdHkiLCJyb3VuZGVkX3ZhbHVlIiwibGFiZWxzX2pzb24iLCJjbGlja0NhbGxiYWNrIiwibWV0YWRhdGFfanNvbiIsInN0b3JlX2ZpbGUiLCJnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZSIsImFsbG93X3NwYWNlcyIsImZpbGVfc2VsZWN0ZWQiLCJzb3J0X2ZpbGVzX2J5Iiwic2VsZWN0X2ZpbGUiLCJvcGVuX2ZpbGUiLCJkZWxldGVfZmlsZSIsImxpc3RfZmlsZXMiLCJkaXNwbGF5X25hbWUiLCJmaWxlX2NvbnRlbnQiLCJmaWxlX2lucHV0Iiwib25fcGlja19maWxlIiwib25fZmlsZV9waWNrZWQiLCJmaWxlUmVhZGVyIiwidXBsb2FkX2ZpbGUiLCJzZWxlY3RlZF9jb21wb25lbnQiLCJnZXRfY29tcG9uZW50X3R5cGVfaWNvbiIsImNvbXBvbmVudF90eXBlIiwibGlzdF9jb21wb25lbnRzIiwiYWRkX2NvbXBvbmVudCIsInNsaWRlcl92YWx1ZXMiLCJzaXplX2NvbXBvbmVudF92YWx1ZSIsInRpbWVfd2luZG93X2xpc3QiLCJ0aW1lX29mZnNldF9saXN0Iiwib2xkX2NvbXBvbmVudF90b19lZGl0IiwiY29tcG9uZW50X3RpdGxlIiwid2lkdGhfc2VsZWN0ZWQiLCJoZWlnaHRfc2VsZWN0ZWQiLCJwYXJhbXNfanNvbl9kYXRhIiwic2VsZWN0ZWRfdGltZV93aW5kb3ciLCJzZWxlY3RlZF90aW1lX29mZnNldCIsInNob3dfYWR2YW5jZWRfc2V0dGluZ3MiLCJpc05vdEpzb25QYXJhbXNWYWxpZCIsImhpZGRlbk9uUmVwb3J0IiwidXBkYXRlQWR2YW5jZWRTZXR0aW5nc1ZpZXciLCJmb3JtYXRKc29uIiwiZmluZF90aW1lX29iamVjdCIsInRpbWVfdmFsdWUiLCJ0aW1lX2FycmF5Iiwic2V0X29sZF9jb21wb25lbnRfdmFsdWVzIiwib2xkX2NvbXBvbmVudCIsImNvbnZlcnRfc2l6ZV90b19zbGlkZXJfdmFsdWUiLCJ0aW1lX3dpbmRvdyIsInRpbWVfb2Zmc2V0IiwiY29udmVydF9zbGlkZXJfdmFsdWVfdG9fc2l6ZSIsInNfdiIsIm5ld193aWR0aCIsIm5ld19oZWlnaHQiLCJ3aWR0aF9jbGFzcyIsImhlaWdodF9jbGFzcyIsImNvbG9yX2NsYXNzIiwicmVmcmVzaF9jb21wb25lbnQiLCJ0YWJsZV9yb3dzIiwiZGF0YV90eXBlIiwicmVuZGVyX2NvbHVtbiIsImkxOG5fbmFtZSIsInJvd19yZW5kZXJfZnVuY3Rpb25zIiwidGhyb3VnaHB1dCIsImRiX3NlYXJjaCIsInZzX3NjYW5fcmVzdWx0IiwiaG9zdHNfZiIsImhvc3RzX2xpc3QiLCJob3N0c19tYXAiLCJjdmVzX2YiLCJjdmVzIiwiY3Zlc19tYXAiLCJjdmVfZGV0YWlscyIsImFjdHVhbF9zY29yZSIsImJhZGdlX3R5cGUiLCJ0Y3BfcG9ydF9mIiwicG9ydF9sYWJlbCIsInRjcF91ZHBfcG9ydHNfbGlzdF9mIiwidGNwX3BvcnRzX2xpc3QiLCJ1ZHBfcG9ydHNfbGlzdCIsInBvcnRzX21hcCIsInBvcnRfaWQiLCJ1ZHBfcG9ydHNfZmlsdGVyZWQiLCJjb250ZW50X2xhYmVsIiwiaG9zdHNfc3RyaW5nIiwiZGlzY292ZXJkX2hvc3RzX2xpc3RfZiIsInJlbmRlcl9yb3ciLCJ0YWJsZV90eXBlIiwicXVlcnlfcGFyYW1zIiwiZ2V0X2NvbXBvbmVudF9kYXRhIiwicmVjb3JkcyIsIm1heF9yb3dzIiwibWF4X2hlaWdodCIsImxpbmtfdXJsIiwiY291bnRlcl92YWx1ZSIsImNvdW50ZXJfcGF0aCIsImNvdW50ZXJfZm9ybWF0dGVyIiwiZm9ybWF0Q291bnRlciIsInNldF9jb21wb25lbnRfYXR0ciIsImxpbmtfdXJsX3BhcmFtcyIsImxpbmtfcXVlcnlfcGFyYW1zIiwicmVmcmVzaF9jaGFydCIsImdyb3VwX29wdGlvbl9tb2RlIiwidHNfcmVxdWVzdCIsInN1YnN0aXR1dGVfaWZpZCIsInBhcmFtc190b19mb3JtYXQiLCJjdXJyZW50X2lmaWQiLCJuZXdfZm9ybWF0dGVkX3BhcmFtcyIsImZvcm1hdF9pZmlkcyIsImZvcm1hdF9leHBvcnRlcnMiLCJleHBvcnRlcnNfbGlzdCIsImV4cG9ydGVyIiwiY3VycmVudF9leHBvcnRlciIsInN1YnN0aXR1dGVfZXhwb3J0ZXIiLCJmb3JtYXRfbmV0d29ya3MiLCJuZXR3b3Jrc19saXN0IiwiY3VycmVudF9uZXR3b3JrIiwic3Vic3RpdHV0ZV9uZXR3b3JrIiwiYW55X3BhcmFtIiwicmVzb2x2ZV9hbnlfcGFyYW1zIiwicmV0cmlldmVfYmFzaWNfaW5mbyIsInJlbW92ZV9leHRyYV9wYXJhbXMiLCJzYW5rZXlfdmVyc2lvbiIsImNvbXBvbmVudHNfZGljdCIsImJhZGdlIiwiQmFkZ2VDb21wb25lbnQiLCJFbXB0eUNvbXBvbmVudCIsIlBpZUNvbXBvbmVudCIsIlRpbWVzZXJpZXNDb21wb25lbnQiLCJUYWJsZUNvbXBvbmVudCIsIlNhbmtleUNvbXBvbmVudCIsImFsbG93X2VkaXQiLCJyZXBvcnRfYm94IiwibW9kYWxfc3RvcmVfcmVwb3J0IiwibW9kYWxfb3Blbl9yZXBvcnQiLCJtb2RhbF91cGxvYWRfcmVwb3J0IiwibW9kYWxfYWRkX3RlbXBsYXRlX2NvbXBvbmVudCIsIm1vZGFsX2VkaXRfdGVtcGxhdGVfY29tcG9uZW50IiwibW9kYWxfZGVsZXRlX3RlbXBsYXRlIiwibWFpbl9lcG9jaF9pbnRlcnZhbCIsImNvbXBvbmVudHNfbG9hZGVkIiwic2VsZWN0ZWRfZmlsdGVycyIsImFsbF9hdmFpbGFibGVfZmlsdGVycyIsImZpbHRlcmVkX2ZpbHRlcnMiLCJmaWx0ZXJzX3RvX3Nob3ciLCJuZXN0ZWRfZmlsdGVycyIsInJlcG9ydHNfdGVtcGxhdGVzIiwic2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlIiwid2FybmluZ19tZXNzYWdlIiwiY29tcG9uZW50c19pbmZvIiwiZGF0YV9mcm9tX2JhY2t1cCIsImVkaXRfbW9kZSIsInRlbXBsYXRlX3NvcnRhYmxlIiwibW9kYWxfbmV3X3RlbXBsYXRlIiwiaXNfbGl2ZSIsImVuYWJsZV9kYXRlX3RpbWVfcmFuZ2VfcGlja2VyIiwiZW5hYmxlX3NtYWxsX3BpY2tlciIsImVuYWJsZV9zbWFsbF9waWNrZXJfYWN0aW9ucyIsImRpc2FibGVfZGF0ZSIsInRvb2xib3giLCJkaXNhYmxlX2RhdGVfdGltZV9waWNrZXIiLCJpc19vcGVuX3JlcG9ydCIsImVuYWJsZV9yZXBvcnRfdGl0bGUiLCJjb21wb25lbnRfY3VzdG9tX3N0eWxlIiwiY3VzdG9tX3N0eWxlIiwiY3VzdG9tX3ByaW50X3N0eWxlIiwiY29tcG9uZW50X2ludGVydmFsIiwiZ2V0X3RpbWVfaW50ZXJ2YWxfc3RyaW5nIiwic2V0X3RlbXBsYXRlIiwicmVwb3J0X3RlbXBsYXRlIiwidGVtcGxhdGVfbGlzdF9lbmRwb2ludCIsInRlbXBsYXRlc19saXN0IiwicmVwb3J0X3RlbXBsYXRlX3ZhbHVlIiwidG9nZ2xlX2VkaXRfbW9kZSIsInNldF90ZW1wbGF0ZXNfbGlzdCIsIm9wZW5fcmVwb3J0IiwibG9hZF9jb21wb25lbnRzIiwic2V0X3JlcG9ydF90aXRsZSIsInNldF9jb21wb25lbnRzX2ZpbHRlciIsImZpbHRlcl9pZCIsImZpbHRlcl92YWx1ZSIsInVwZGF0ZV9jb21wb25lbnRfZmlsdGVycyIsInNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsIiwidXBkYXRlX2NvbXBvbmVudF9lcG9jaF9pbnRlcnZhbCIsInJlc2V0X2ZpbHRlcnMiLCJoaWRlX25lc3RlZF9maWx0ZXJzIiwibG9hZF9maWx0ZXJzIiwiZmlsdGVyc19hdmFpbGFibGUiLCJhZGRlZF9maWx0ZXJzX2xpc3QiLCJyZXBvcnRfZmlsdGVyc19lbmRwb2ludCIsImZpbHRlcl9vcHRpb25zIiwiYWxsX2xhYmVsIiwibmVzdGVkIiwidGVtcGxhdGVfbmFtZSIsInRlbXBsYXRlX2VuZHBvaW50IiwiY19leHQiLCJpbnRlcnZhbF9zZWNvbmRzIiwidXRjX29mZnNldCIsInRvX2hpZGVfZmlsdGVycyIsImZpbHRlcl90b19yZW1vdmUiLCJhbGxfdmFsdWUiLCJzaG93X25lc3RlZF9maWx0ZXJzIiwiZmlsdGVyX3RvX2NoZWNrIiwiY3VycmVudGx5X3NlbGVjdGVkX2ZpbHRlciIsImZpbHRlcl90b19hZGQiLCJhbGxfZmlsdGVycyIsImZpbHRlcnNfdG9fZW5hYmxlIiwic2hvd19vbmx5X3ZhbHVlIiwiaW5kZXhfdG9fcHVzaCIsInNlbGVjdF9yZXBvcnRfdGVtcGxhdGUiLCJ1cGRhdGVfdGVtcGxhdGVzX2xpc3QiLCJzaG93X3N0b3JlX3JlcG9ydF9tb2RhbCIsInNob3dfb3Blbl9yZXBvcnRfbW9kYWwiLCJzaG93X3VwbG9hZF9yZXBvcnRfbW9kYWwiLCJnZXRfc3VnZ2VzdGVkX3JlcG9ydF9uYW1lIiwidXBsb2FkX3JlcG9ydCIsImNvbnRlbnRfc3RyaW5nIiwic2V0X3JlcG9ydCIsImxvYWRfcmVwb3J0IiwibGlzdF9yZXBvcnRzIiwicmVwb3J0X2xpc3RfZW5kcG9pbnQiLCJmaWxlc19vYmoiLCJ0bXBfZXBvY2hfaW50ZXJ2YWwiLCJ0bXBfdGVtcGxhdGUiLCJ0bXBfY29tcG9uZW50c19kYXRhIiwidG1wX2NvbXBvbmVudHNfaW5mbyIsInJlcG9ydF9vcGVuX2VuZHBvaW50IiwicmVwb3J0X25hbWVfdG9fb3BlbiIsInRfZW50cnkiLCJkZWxldGVfcmVwb3J0IiwicmVwb3J0X2RlbGV0ZV9lbmRwb2ludCIsInNlcmlhbGl6ZV9yZXBvcnQiLCJjb21wb25lbnRzX2RhdGEiLCJzdG9yZV9yZXBvcnQiLCJyZXBvcnRfc3RvcmVfZW5kcG9pbnQiLCJkb3dubG9hZF9yZXBvcnQiLCJwcmludF9yZXBvcnQiLCJwcmludCIsImVwb2NoX2JlZ2luX21zZWMiLCJlcG9jaF9lbmRfbXNlYyIsInRpbWVfaW50ZXJ2YWxfc3RyaW5nIiwic2V0X2NvbXBvbmVudF9hdHRyX2Z1bmMiLCJzaG93X25ld190ZW1wbGF0ZV9tb2RhbCIsImdldF9zdWdnZXN0ZWRfdGVtcGxhdGVfbmFtZSIsIm5ld190ZW1wbGF0ZSIsInRlbXBsYXRlX2FkZF9lbmRwb2ludCIsInRlbXBsYXRlX2lkIiwiY29tbWl0X3RlbXBsYXRlX2NoYW5nZSIsImNvbXBvbmVudHNfaWRzIiwidGVtcGxhdGVfZWRpdF9lbmRwb2ludCIsImNvbXBvbmVudF9kcmFnZ2VkIiwibmV3X2NvbXBvbmVudHMiLCJ1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSIsInNldF9zb3J0YWJsZV90ZW1wbGF0ZSIsImRyYWdfem9uZSIsIlNvcnRhYmxlIiwiZHJhZ2dhYmxlIiwiZGF0YUlkQXR0ciIsIm9uVXBkYXRlIiwibGlzdF90ZW1wbGF0ZV9jb21wb25lbnRzIiwidGVtcGxhdGVfbGlzdF93aWRnZXRzX2VuZHBvaW50Iiwid2lkZ2V0cyIsInNob3dfYWRkX3RlbXBsYXRlX2NvbXBvbmVudF9tb2RhbCIsInNob3dfZGVsZXRlX3RlbXBsYXRlX21vZGFsIiwiYWRkX3RlbXBsYXRlX2NvbXBvbmVudCIsInRlbXBsYXRlX2NvbXBvbmVudF9hZGRfZW5kcG9pbnQiLCJyZW1vdmVfdGVtcGxhdGVfY29tcG9uZW50IiwiY29tcG9uZW50X2lkIiwiZGF0YXNldCIsImNvbXBvbmVudElkIiwic2hvd19lZGl0X3RlbXBsYXRlX2NvbXBvbmVudCIsImlzX3JlcG9ydF9wYWdlIiwiZWRpdF90ZW1wbGF0ZV9jb21wb25lbnQiLCJuZXdfY29tcG9uZW50IiwidGVtcGxhdGVfY29tcG9uZW50X2VkaXRfZW5kcG9pbnQiLCJjb21wb25lbnRfaGVpZ2h0IiwiY29tcG9uZW50X3dpZHRoIiwiY29tcG9uZW50X3RpbWVfb2Zmc2V0IiwiY29tcG9uZW50X3RpbWVfd2luZG93IiwiY29tcG9uZW50X3BhcmFtcyIsImRlbGV0ZV90ZW1wbGF0ZSIsInRlbXBsYXRlX2RlbGV0ZV9lbmRwb2ludCIsImV4Y2x1ZGVfdHlwZSIsImlucHV0X2lwIiwiaW5wdXRfbmV0d29yayIsImlucHV0X3ZsYW4iLCJpbnB1dF90ZXh0IiwiaG9zdF9zZWxlY3RlZCIsImZsb3dfc2VsZWN0ZWQiLCJuZXRtYXNrIiwicGF0dGVybl9pcCIsInNldF9leGNsdWRlX3R5cGUiLCJkaXNhYmxlX2FwcGx5IiwiYWxlcnRfZXhjbHVzaW9uc19wYWdlIiwibm9ybWFsaXplX2FsZXJ0X2tleV92YWx1ZSIsImFsZXJ0X2tleSIsIm9sZF90eXBlIiwib2xkX3N1YmRpciIsInN1YmRpciIsIm9sZF9hbGVydF9kb21haW4iLCJvbGRfYWxlcnRfY2VydGlmaWNhdGUiLCJvbGRfYWxlcnRfYWRkciIsIm9sZF9mbG93X2FsZXJ0X2tleSIsIm9sZF9ob3N0X2FsZXJ0X2tleSIsIm5ldHdvcmtfZGV0YWlscyIsInZsYW5fc3BsaXQiLCJudG9wVnVlIiwiUGFnZUFsZXJ0U3RhdHMiLCJQYWdlRmxvd0hpc3RvcmljYWwiLCJQYWdlU3RhdHMiLCJQYWdlRGV2aWNlRXhjbHVzaW9ucyIsIlBhZ2VIb3N0VExTIiwiUGFnZUhvc3RTU0giLCJQYWdlSG9tZU1hcCIsIlBhZ2VTYW5rZXkiLCJQYWdlSG9zdFJ1bGVzIiwiUGFnZUFsZXJ0QW5hbHlzaXMiLCJQYWdlSG9zdE1hcCIsIlBhZ2VNYW5hZ2VDb25maWd1cmF0aW9uQmFja3VwIiwiUGFnZVNOTVBEZXZpY2VSdWxlcyIsIlBhZ2VIb3N0c1BvcnRzQW5hbHlzaXMiLCJQYWdlSW5hY3RpdmVIb3N0cyIsIlBhZ2VJbmFjdGl2ZUhvc3REZXRhaWxzIiwiUGFnZVZ1bG5lcmFiaWxpdHlTY2FuIiwiUGFnZUhvc3RWc1Jlc3VsdCIsIlBhZ2VPcGVuUG9ydHMiLCJQYWdlVnVsbmVyYWJpbGl0eVNjYW5SZXBvcnQiLCJQYWdlU05NUFVzYWdlIiwiUGFnZUVkaXRBcHBsaWNhdGlvbnMiLCJQYWdlVkxBTlBvcnRzRmxvd1NhbmtleSIsIlBhZ2VWTEFOUG9ydHNTYW5rZXkiLCJQYWdlVGVzdFRhYmxlIiwiUGFnZVNubXBEZXZpY2VzSW50ZXJmYWNlc1NpbWlsYXJpdHkiLCJOZWRnZVJ1bGVzQ29uZmlnIiwiTmVkZ2VSZXBlYXRlcnNDb25maWciLCJQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMiLCJQYWdlSG9zdERldGFpbHNUcmFmZmljIiwiUGFnZUhvc3REZXRhaWxzUGFja2V0cyIsIlBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXkiLCJQYWdlSG9zdERldGFpbHNQb3J0cyIsIlBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzIiwiUGFnZU5ldHdvcmtEaXNjb3ZlcnkiLCJQYWdlRmxvd0RldmljZURldGFpbHMiLCJQYWdlRmxvd0RldmljZUludGVyZmFjZURldGFpbHMiLCJBbGVydEluZm8iLCJUaW1lc2VyaWVzQ2hhcnQiLCJSYW5nZVBpY2tlciIsIlNhbmtleSIsIkxvYWRpbmciLCJEYXNoYm9hcmQiLCJEYXNoYm9hcmRCb3giLCJEYXNoYm9hcmRFbXB0eSIsIkRhc2hib2FyZFRhYmxlIiwiRGFzaGJvYXJkQmFkZ2UiLCJEYXNoYm9hcmRQaWUiLCJEYXNoYm9hcmRUaW1lc2VyaWVzIiwiRGFzaGJvYXJkU2Fua2V5IiwiTGlzdFRpbWVzZXJpZXMiLCJNb2RhbEFkZENoZWNrRXhjbHVzaW9uIiwiTW9kYWxBbGVydHNGaWx0ZXIiLCJNb2RhbFRpbWVzZXJpZXMiLCJNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIiwiTW9kYWxTbmFwc2hvdCIsIk1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uIiwiTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uIiwiTW9kYWxBZGRIb3N0UnVsZXMiLCJNb2RhbEFkZEFwcGxpY2F0aW9uIiwiTW9kYWxEZWxldGVBcHBsaWNhdGlvbiIsIk1vZGFsRWRpdFJlcG9ydCIsIlZ1ZSIsIl8weDRhZTUiLCJfMHg2NDhjeDIiLCJfMHg2NDhjeDMiLCJfMHg2NDhjeDQiLCJfMHg2NDhjeGEiLCJfMHg2NDhjeDUiLCJfMHg2NDhjeDYiLCJfMHg2NDhjeDgiLCJfMHg2NDhjeDkiLCJfMHg2NDhjeGIiLCJfMHg2NDhjeGMiLCJHRVRfSU5URVJGQUNFX0RBVEEiLCJfMHg2NDhjeDEzIiwiXzB4NjQ4Y3hkIiwiXzB4NjQ4Y3hlIiwiXzB4NjQ4Y3hmIiwiXzB4NjQ4Y3gxMCIsIl8weDY0OGN4MTEiLCJfMHg2NDhjeDEyIl0sIm1hcHBpbmdzIjoieUJBQ0FBLEtBQUtDLFVBQVVDLE9BQVMsU0FBVUEsR0FDMUIsSUFBSUMsRUFBSSxDQUNBLEtBQU1DLEtBQUtDLFdBQWEsRUFDeEIsS0FBTUQsS0FBS0UsVUFDWCxLQUFNRixLQUFLRyxXQUNYLEtBQU1ILEtBQUtJLGFBQ1gsS0FBTUosS0FBS0ssYUFDWCxLQUFNQyxLQUFLQyxPQUFPUCxLQUFLQyxXQUFhLEdBQUssR0FDekNPLEVBQUtSLEtBQUtTLG1CQUtsQixJQUFLLElBQUlDLElBRkwsT0FBT0MsS0FBS2IsS0FBU0EsRUFBU0EsRUFBT2MsUUFBUUMsT0FBT0MsSUFDL0NkLEtBQUtlLGNBQWdCLElBQUlDLE9BQU8sRUFBSUgsT0FBT0MsR0FBR0csVUFDekNsQixFQUFPLElBQUljLE9BQU8sSUFBTUgsRUFBSSxLQUFLQyxLQUFLYixLQUM1Q0EsRUFBU0EsRUFBT2MsUUFBUUMsT0FBT0MsR0FDSCxHQUFwQkQsT0FBT0MsR0FBR0csT0FBY2xC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
