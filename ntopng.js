!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[-a-zA-Z0-9:.]{1,256}+$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^[a-zA-Z0-9._:\-]{3,250}|^[a-zA-Z0-9._:\-]{3,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+-/=?^_${"`"}{|}~]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var n,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;n=e}else{if(n=l[0],!a.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(a.is_good_ipv4(n)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:n,mask:s}}if(a.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:n,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var n=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(n));if(l<0||isNaN(l))l=0;else if(l>=a.length)return"> "+a[a.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+a[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var n=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static exports_format(t){if(void 0===t)return"-";var n=i18n_ext.exports.toLowerCase(),l=[n,"K "+n];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var n=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var n=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var n=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var n=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,n=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<n?parseFloat((e/a).toFixed(2))+" MB":e>=n&&e<l?parseFloat((e/n).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],n=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(a);)a=a.replace(l,"$1,$2");return a+n}static scaleValue(e,t,a,n){if(0==e)return[0,t[0]];let l=n?10*n:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*l)/l,t[s]]}static formatValue(t,n){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==n&&(n=0);var l=a.scaleValue(t,["","K","M","G","T"],1e3,n);return l[0]+l[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var n=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(n[0])+" "+n[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,n){n=n||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],n);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),n=Math.floor(e/60-1440*t-60*a),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),n<10&&(s+="0"),s+=n+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),n=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(n)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var n in e)a["key_"+t]=n,a["val_"+t]=e[n],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,n){return n.context&&"historical"==n.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==n.type?a._add_find_host_link(t,"ip",n.ip):"mac"==n.type?a._add_find_host_link(t,"mac",n.mac):"community_id"==n.type?a._add_find_host_link(t,"community_id",n.community_id):"ja3_client"==n.type?a._add_find_host_link(t,"ja3_client",n.ja3_client):"ja3_server"==n.type?a._add_find_host_link(t,"ja3_server",n.ja3_server):a._add_find_host_link(t,"name",n.hostname?n.hostname:n.name)):"mac"==n.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==n.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",n.network)):"snmp"==n.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",n.snmp_port_idx)):"snmp_device"==n.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==n.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",n.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var n=parseInt(e.html())+a,l=d3.time.format(t)(new Date(1e3*n));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),n=0;n<a.length;n++){var l=a[n].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),n=$.extend(t,e),l="?"+$.param(n,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,a){const n=200!=e;if(n&&null!=a){let n=i18n_ext.request_failed_message;e&&t&&(n+=`: ${e} - ${t}`),a.text(n).show()}else n&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return n}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const n=$("#import-input")[0].files[0];if(!n)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const l=new FileReader;l.readAsText(n,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,a,n)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const n={...t,signal:(new AbortController).signal};return fetch(e,n).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,n){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||l),s.fail(n||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,n={}){const l=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&l.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(n))a&&e.searchParams.set(t,a);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const n=await fetch(a.getPoolLink(e,t)),l=await n.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const n=a.generateScaleElementKey(e);localStorage.setItem(n,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,n=e.attr("id");if(""!==n)t=n;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),n=localStorage.getItem(t);if(null!=n)return JSON.parse(n)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let n=e;if(e.length>t+5)if(a){let l=e.lastIndexOf(a);const s=e.slice(l);t>l&&(t=l),n=e.slice(0,t)+"... "+s}else n=e.slice(0,t)+"...";return n}static sortAlphabetically(e,t){const a=e.label.toUpperCase(),n=t.label.toUpperCase();return a<n?-1:a>n?1:0}static formatNameValue(e,t,a){let n=e;return e!=t&&(a&&"number"==typeof a&&(n=this.shortenLabel(n,a,".")),n=`${n} [${t}]`),n}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,n){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${n}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${l.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${n.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${n.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:n,dataPointIndex:l}=a,{series:s}=a.config;if(-1===n)return;if(void 0===s)return;const i=s[n],r=i.base_url||s[0].base_url,o=i.start_url||s[0].start_url;if(null!=r&&null!=o){const e=i.data[l].meta.url_query;location.href=`${r}?${o}${e}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.x,i=l.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${l.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${n.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${n.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function n(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function r(e,t,a,n,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+n+'" role="button">'+t+"</a>")}function o(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var n,l={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,i){if(s)return console.warn(s);var r;(n=i).forEach((function(t){r=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:r,type:t.source_type,pid:t.source_pid}),r=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:r,type:t.target_type,pid:t.target_pid})}));var o=d3.scale.category10();o.proc="red",o.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(n).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",m),_.attr("transform",m)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return o[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,n=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+n+","+n+" 0 0,1 "+e.target.x+","+e.target.y}function m(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,n]of Object.entries(e.inputs))if(t.inputs[a]!=n)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const n=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&n.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=n.parent().find(".spinner-border");n.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return n.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:n.data("validationMessage"),validationEmptyMessage:n.data("validationEmptyMessage"),cannotBeEmpty:"required"===n.attr("required")||1==n.data("validationNotEmpty"),resolveDNS:n.data("validationResolvedns"),rangeOverflowMessage:n.data("validationRangeOverflowMessage"),rangeUnderflowMessage:n.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof n.val()&&""==n.val().trim()},[t,a]=await s(e);let l=n.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(n.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(n.addClass("is-invalid"),n.parent().append(l),l.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),n.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),n.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const n=this;if(this.options.endpoint){let l;l="post"==n.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:n.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,l.done((function(t,l){n.isSubmitting=!1,n.currentState=null,n.options.resetAfterSubmit&&n.cleanForm(),e.hide();n.options.onSubmitSuccess(t,a,n)&&(n.dialog.modal?n.dialog.modal("hide"):(n.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(n.element).off("submit",n.submitHandler),n.delegateSubmit()})).fail((function(t,l,s){n.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),n.options.onSubmitError(i,a,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{n.currentState=null,e.hide();n.options.onSubmitSuccess({},a,n)&&(n.dialog.modal?n.dialog.modal("hide"):n.dialog[0].hidden=!0),$(n.element).off("submit",n.submitHandler),n.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const n=$(t).attr("name");$(t).val(a[n]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function p(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let n=0;return null!=t.um&&(n=Math.max(...t.um.map((e=>e.length)))),a+1+n}function _(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let n=a.step;t<0&&(t*=-1);let l=0,s=a.um;for(;t>=n&&l<s.length;)t/=n,l+=1;return l}function f(e,t,a){let n=d[e];t|=n.absolute_value;return function(l){if(null==l)return"";if(e==d.no_formatting.id)return l;null!=n.scale_values&&(l*=n.scale_values);let s=l<0;s&&(l*=-1);let i=n.step,r=n.decimal,o=n.um,c=0;for(null!=n.max_value&&l>n.max_value&&(l=n.max_value);l>=i&&c<o.length&&!a||null!=a&&c<a;)l/=i,c+=1;return null!=r&&r>0?(l*=Math.pow(10,r),l=Math.round(l),l=(l/=Math.pow(10,r)).toFixed(r)):l=Math.round(l),s&&!t&&(l*=-1),`${`${l}`} ${`${o[c]}`}`}}const m={types:d,getUnitMeasureLen:p,getFormatter:f,getScaleFactorIndex:_};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,n){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),r=e.data("dt-rr-ajax");n=n||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),r&&(r.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}var f={custom_hosts:c.join(",")},m=l.options.url,h=!0,v=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var i=a.data[s],r=i[t];if(r&&u[r]){var c=u[r],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[o(e,_)],m=$(f),v=m.data("dt-rr-cur-val")||$(f).html(),g=n[_],b=i[_],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),h||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(v))),m.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}h=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:m,data:f,cache:!1,success:v}))}),a)),v(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=n,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,a,l){a&&$(a).removeAttr("disabled").removeClass("disabled");var r=$(e).closest("form");$(e).remove(),aysUpdateForm(r);var o=i(r);s(o)&&n(o,t),l&&window[l](e)},window.datatableAddButtonCallback=r,window.datatableAddDeleteButtonCallback=function(e,t,a){r.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,n=!0,l=""){r.bind(this)(e,a,"btn-info",t,"javascript:void(0)",n,l)},window.datatableAddFilterButtonCallback=function(e,t,a,n="",l=!0){r.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",l,n)},window.datatableAddLinkButtonCallback=function(e,t,a,n=""){r.bind(this)(e,a,"btn-info","",t,!0,n)},window.datatableMakeSelectUnique=function(e,t,a){function n(e,t,a,n){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&n(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),n=a.val()==e.val();if(e.attr("disabled","disabled"),n){var l=a.find("option:not([disabled])").first().val();a.val(l),a.attr("data-old-val",l)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",r=[];s==i&&(s=""),n($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),r.push(e)})),a($(this),s,i,r,l),$(this).attr("data-old-val",i)}var i=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),n(e,t,a,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var n=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(n)return n[0]},window.datatableGetColumnIndex=o,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=m;var h={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),n=0;return!a||(e(t).each((function(){$(this).val()==a&&(n+=1)})),1==n)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var n=e.attr("name");h[n]||(h[n]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=h[n],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=a};l.last_val!==a?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(l.valid)},success:function(t){var a=!!t.response;e(a)}})):e(l.valid)};return t?s():l.last_val===a||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const v=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((n,l)=>{e[a]?n():t.push({resolve:n,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let n=this.clone(e[a]);t.push(n)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},check_and_set_default_interval_time:function(e){if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),n=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(n+a)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let a=y.get_status(),n=a.epoch_begin,l=a.epoch_end;if(null!=n&&null!=l){let e=Number.parseInt(n);Number.parseInt(l)-e<=300&&(t="DD/MMM/YYYY HH:mm:ss")}return moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let n in e)null!=e[n]&&"__proto__"!==n&&"constructor"!==n&&(1==a&&this.is_object(e[n])&&this.is_object(t[n])?this.copy_object_keys(e[n],t[n],a):t[n]=e[n])},set_http_globals_headers(t){e=t},http_request:async function(t,a,n,l){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let n=await fetch(t,a);if(0==n.ok)return console.error(`http_request ${t}\n ok == false`),console.error(n),null;let s=await n.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==n)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,n=0;if(0===e.length)return n;for(t=0;t<e.length;t++)a=e.charCodeAt(t),n=(n<<5)-n+a,n|=0;return n},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),n=function(e,n){for(let l in t){if(l==n)continue;(0,t[l])(a(e))}};return{get_status:function(){return a(e)},update_subscribers:function(){const e=this.get_status();n(e)},on_status_change:function(e,n,l){if(t[e]=n,1==l){let e=this.get_status();n(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),n(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let n=this.get_status();n[e]=t,this.replace_status(n,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,n]of a)if(t==e)return n;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,n]of t)a[e]=n;return a},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const n=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=n);let i=s(l,t[l]);a.push(i)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),n=this.get_url_search_params(t),l=this.get_url_entries(a);for(const[e,t]of l)n.set(e,t);let s=n.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N=function(){const e="events_manager";let t={},a={};const n=e=>b.clone(e),l=function(e,t,a){for(let l in e){if(l==a)continue;(0,e[l])(n(t))}};y.on_status_change(e,(function(e){for(let n in k){if(1==(0,S[n])(e,t)){let t=a[n];l(t,e)}}t=e}),!0);const s=function(e,t,n){let s=a[e];null!=s&&l(s,t,n)},i=function(e,t,l,s){if(null==a[t]&&(a[t]={}),1==s){let e=y.get_status();l(n(e))}a[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,a){i(e,t,a)},emit_event:function(t,a,n){s(t,a,n),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,n){i(e,t,a,n)}}}();function C(e,t,a,n,l){this.name=e,this.update_url=t,this.url_params=a,this.units=n,this.refresh=l;let s=[],i="",r=[],o=[],c=[];var u=[],d=[],p=[],_=A(e,n),f=_[0],m=_[1],h=_[2],v=_[4],g=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,n;d[t]?(a=d[t].startAngle,n=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,n=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,n=d[d.length-1].endAngle):(a=0,n=0);t=d3.interpolate({startAngle:a,endAngle:n},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){const a=2*Math.PI,n=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:a,endAngle:n});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var n=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(a,n);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=m(s);var t=0;function a(e,a,n){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(p=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),h&&h.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return v(t)})).transition().duration(g).attrTween("d",S),i.transition().duration(g).attrTween("d",S),i.exit().transition().duration(g).attrTween("d",N).remove(),r=y.selectAll("line").data(p),r.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),r.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),r.exit().remove(),o=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),o.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),o.transition().duration(g).attrTween("transform",C),o.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}function A(e,t){var a=500,n=325,l=52,s=116;$(e).hasClass("pie-chart-small")&&(n=250,l=(s=(a=330)/5+15)/2);var i=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),r=d3.scale.category20(),o=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(s),c=d3.select(e).append("svg:svg").attr("width",a).attr("height",n).attr("viewBox","0 0 "+a+" "+n).attr("preserveAspectRatio","xMidYMid"),u=c.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+n/2+")"),d=c.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+n/2+")"),p=c.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+n/2+")");return u.append("svg:circle").attr("fill","#EFEFEF").attr("r",s),p.append("svg:circle").attr("fill","white").attr("r",l),t&&(p.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),p.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),p.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t)),[u,i,totalValue,totalUnits,r,250,o,d,p,s,14]}window.ntopng_events=k,window.ntopng_events_manager=N,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=v,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data"},C.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},C.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},C.prototype.setInterval=function(e){this.pieInterval=e},C.prototype.stopInterval=function(){clearInterval(this.pieInterval)},C.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const T={},E={db_analyze:function(e,t,a){const{dataPointIndex:n}=a,{filter:l}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[n]),0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:n,dataPointIndex:l}=a,{series:s}=a.w.config;if(-1===n)return;if(void 0===s)return;const i=s[n];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class M{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in T)throw new Error(`The widget ${e.name} is already defined!`);T[e.name]=e}static getWidgetByName(e){if(e in T)return T[e];throw new Error(`Widget ${e} not found!`)}}class I{constructor(e,t={},a=0,n={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=n}async init(){M.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,n]of a)t.searchParams.set(e,n);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,n]of Object.entries(e))t.searchParams.set(a,n);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const O=(e,t)=>{let a=t.position().top;const n=e.height(),l=$(window).height();if(n+a>=l){const s=l-a;s<=150?a=a-n+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");O(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");O(e,t)}}));const j=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return b.from_utc_to_server_date_format(e)}},n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),i=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"donut",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),r=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),o=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),c=function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${l.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${n.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},u=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:c}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(c){let d,p={};if(c==this.typeChart.TS_STACKED)p=b.clone(l),t(p);else if(c==this.typeChart.TS_LINE)p=b.clone(o),t(p);else if(c==this.typeChart.TS_COLUMN)p=b.clone(n),t(p);else if(c==this.typeChart.PIE)p=b.clone(r);else if(c==this.typeChart.DONUT)p=b.clone(i);else if(c==this.typeChart.POLAR)p=b.clone(s);else if(c==this.typeChart.BUBBLE)p=b.clone(u);else{if(c!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${c} unsupported`;p=b.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=a.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=a.bytesToSize)}b.copy_object_keys(t,p,!0),d=new ApexCharts(e,p),d.render()},to_data_uri:async function(e){if(null==d)return;return(await d.dataURI(e)).imgURI},destroyChart:function(){null!=d&&d.destroy()},updateChart:function(e){null!=d&&d.updateOptions(e,!1,!1,!1)},updateSeries:function(e){null!=d&&d.updateSeries(e)},registerEvent:function(e,t,a=!1){p.chart.events[e]=t,1==a&&d.updateOptions(p)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let n=e[t];return null==n?null:n[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let n="";if(e.handler){n=`onclick="${L.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${n}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",n="get",l={}){return e.ajax={url:t,type:n,dataSrc:a,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,n=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(n)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),n=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(n))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==n&&(e.modalHandler.invokeModalInit(n),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(n){let l=[-1];n.success?l=n.columns.map((e=>parseInt(e))):console.warn(n.message);const s=[],i=[],r=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const o=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let n=0;n<s.length;n++){const r=s[n];if(""==r.name)continue;const o=`toggle-${r.name.split().join("_")}`,c=-1===l.indexOf(r.index);if(!c){e.column(r.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${o}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${o}">\n                            ${r.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(n){$(".overlay").toggle(500);const l=e.column(r.index);l.visible(!l.visible());const s=l.visible(),o=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||o.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:o.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),o.append(c.append(u)),r.find(".dt-search").parent().append(o)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class D{static alertSeverityAndType(e,t,a){return`${D.formatValueLabel(e,t,a)} ${D.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,n){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${a.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,n,l,s,i,r,o){if(null!=r){if(r){return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a> <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a> <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${o}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a>`}static formatValueLabel(e,t,a){if("display"!==t)return e.value;let n=e.label;return e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatMessage(e,t,a){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatSubtype(e,t,a){if("display"!==t)return e;return D.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,a,n){if("display"!==a)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),D.filterize(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+l}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let n=D.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatSNMPIP(e,t,a){return"display"!==t?e:D.filterize("ip",e,e,e,e,null,!0)}static formatProbeIP(e,t,a){if("display"!==t)return e;return D.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=D.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=D.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=D.filterize(l,`${s}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=D.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,n,l,s,i){let r=l,o=s,c=i;return e.vlan&&0!=e.vlan.value&&(r=`${l}@${e.vlan.value}`,o=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),o=a.shortenLabel(o,16,"."),D.filterize(n,r,o,o,c)}static formatFlowTuple(e,t,a){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=D.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=D.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=D.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+D.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let o="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),o=D.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else o=D.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+D.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=D.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return a.cli_role&&("attacker"==a.cli_role.value?p+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?_+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(_+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${l}${r}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${o}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,a){if("display"!==t)return e.name;return D.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,n,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function R(e,t){const a=Object.create(null),n=e.split(",");for(let e=0;e<n.length;e++)a[n[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,n,l){var s=new C(e,t,a,n,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:n,columnIndex:l,icon:s=null,extraAttributes:i="",id:r=null,url:o=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=n,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=r,this.url=o,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${n})</span>`);0==n&&a.hide(),a.append(l)}return a.on("click",(function(n){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),n=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(n),this.$dropdown={container:t,title:n,button:a},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(a),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=D,window.ChartWidget=class extends I{constructor(e,t="line",a={},n=0,l={}){super(e,a,n,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const n=M.getWidgetByName(e),l={chart:{events:{[t]:a}}};await n._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const n=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[n]||NtopUtils[n]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,n]of Object.entries(t.dataLabels))e.dataLabels[a]=n;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const n of a)void 0!==t[n]&&(void 0!==e[n]?e[n]=Object.assign(e[n],t[n]):e[n]=t[n]);if(t.events)for(const a in t.events)e.chart.events[a]=E[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:n,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}n&&(this._chartConfig.labels=n),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=M,window.ntopChartApex=j,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=R("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),B=R("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function V(e){return!!e||""===e}function q(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const n=e[a],l=be(n)?W(n):q(n);if(l)for(const e in l)t[e]=l[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const n=K(e[a]);n&&(t+=n+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=q(a)),e}const Y=R("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=R("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=R("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=ve(e),n=ve(t);if(a||n)return!(!a||!n)&&e.getTime()===t.getTime();if(a=ye(e),n=ye(t),a||n)return e===t;if(a=fe(e),n=fe(t),a||n)return!(!a||!n)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let n=0;a&&n<e.length;n++)a=Q(e[n],t[n]);return a}(e,t);if(a=we(e),n=we(t),a||n){if(!a||!n)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const n=e.hasOwnProperty(a),l=t.hasOwnProperty(a);if(n&&!l||!n&&l||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):me(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:he(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),ne={},le=[],se=()=>{},ie=()=>!1,re=/^on[^a-z]/,oe=e=>re.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},pe=Object.prototype.hasOwnProperty,_e=(e,t)=>pe.call(e,t),fe=Array.isArray,me=e=>"[object Map]"===$e(e),he=e=>"[object Set]"===$e(e),ve=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=R(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=R("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Te=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Ee=/-(\w)/g,Pe=Te((e=>e.replace(Ee,((e,t)=>t?t.toUpperCase():"")))),Ue=/\B([A-Z])/g,Me=Te((e=>e.replace(Ue,"-$1").toLowerCase())),Ie=Te((e=>e.charAt(0).toUpperCase()+e.slice(1))),Oe=Te((e=>e?`on${Ie(e)}`:"")),je=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},De=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Re,ze;class Be{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Ve(e){return new Be(e)}function qe(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,qe(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=it;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,it=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):nt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let n=0;n<t.length;n++){const l=t[n];Ke(l)&&!Je(l)?l.delete(e):t[a++]=l,l.w&=~Qe,l.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,it=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(nt(this),this.onStop&&this.onStop(),this.active=!1)}}function nt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function lt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&qe(a,t.scope)),t&&t.lazy||a.run();const n=a.run.bind(a);return n.effect=a,n}function st(e){e.effect.stop()}let it=!0;const rt=[];function ot(){rt.push(it),it=!1}function ct(){const e=rt.pop();it=void 0===e||e}function ut(e,t,a){if(it&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let n=t.get(a);n||t.set(a,n=We()),dt(n)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function pt(e,t,a,n,l,s){const i=Ye.get(e);if(!i)return;let r=[];if("clear"===t)r=[...i.values()];else if("length"===a&&fe(e))i.forEach(((e,t)=>{("length"===t||t>=n)&&r.push(e)}));else switch(void 0!==a&&r.push(i.get(a)),t){case"add":fe(e)?Ne(a)&&r.push(i.get("length")):(r.push(i.get(et)),me(e)&&r.push(i.get(tt)));break;case"delete":fe(e)||(r.push(i.get(et)),me(e)&&r.push(i.get(tt)));break;case"set":me(e)&&r.push(i.get(et))}if(1===r.length)r[0]&&_t(r[0]);else{const e=[];for(const t of r)t&&e.push(...t);_t(We(e))}}function _t(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const mt=R("__proto__,__v_isRef,__isVue"),ht=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),vt=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=oa(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const n=a[t](...e);return-1===n||!1===n?a[t](...e.map(oa)):n}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){ot();const a=oa(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,n,l){if("__v_isReactive"===n)return!e;if("__v_isReadonly"===n)return e;if("__v_isShallow"===n)return t;if("__v_raw"===n&&l===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&_e(wt,n))return Reflect.get(wt,n,l);const i=Reflect.get(a,n,l);return(ye(n)?ht.has(n):mt(n))?i:(e||ut(a,0,n),t?i:fa(i)?s&&Ne(n)?i:i.value:we(i)?e?ta(i):Qt(i):i)}}function kt(e=!1){return function(t,a,n,l){let s=t[a];if(sa(s)&&fa(s)&&!fa(n))return!1;if(!e&&!sa(n)&&(ia(n)||(n=oa(n),s=oa(s)),!fe(t)&&fa(s)&&!fa(n)))return s.value=n,!0;const i=fe(t)&&Ne(a)?Number(a)<t.length:_e(t,a),r=Reflect.set(t,a,n,l);return t===oa(l)&&(i?je(n,s)&&pt(t,"set",a,n):pt(t,"add",a,n)),r}}const $t={get:vt,set:kt(),deleteProperty:function(e,t){const a=_e(e,t),n=Reflect.deleteProperty(e,t);return n&&a&&pt(e,"delete",t,void 0),n},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&ht.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),At=e=>e,Tt=e=>Reflect.getPrototypeOf(e);function Et(e,t,a=!1,n=!1){const l=oa(e=e.__v_raw),s=oa(t);a||(t!==s&&ut(l,0,t),ut(l,0,s));const{has:i}=Tt(l),r=n?At:a?da:ua;return i.call(l,t)?r(e.get(t)):i.call(l,s)?r(e.get(s)):void(e!==l&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,n=oa(a),l=oa(e);return t||(e!==l&&ut(n,0,e),ut(n,0,l)),e===l?a.has(e):a.has(e)||a.has(l)}function Ut(e,t=!1){return e=e.__v_raw,!t&&ut(oa(e),0,et),Reflect.get(e,"size",e)}function Mt(e){e=oa(e);const t=oa(this);return Tt(t).has.call(t,e)||(t.add(e),pt(t,"add",e,e)),this}function It(e,t){t=oa(t);const a=oa(this),{has:n,get:l}=Tt(a);let s=n.call(a,e);s||(e=oa(e),s=n.call(a,e));const i=l.call(a,e);return a.set(e,t),s?je(t,i)&&pt(a,"set",e,t):pt(a,"add",e,t),this}function Ot(e){const t=oa(this),{has:a,get:n}=Tt(t);let l=a.call(t,e);l||(e=oa(e),l=a.call(t,e)),n&&n.call(t,e);const s=t.delete(e);return l&&pt(t,"delete",e,void 0),s}function jt(){const e=oa(this),t=0!==e.size,a=e.clear();return t&&pt(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,n){const l=this,s=l.__v_raw,i=oa(s),r=t?At:e?da:ua;return!e&&ut(i,0,et),s.forEach(((e,t)=>a.call(n,r(e),r(t),l)))}}function Ft(e,t,a){return function(...n){const l=this.__v_raw,s=oa(l),i=me(s),r="entries"===e||e===Symbol.iterator&&i,o="keys"===e&&i,c=l[e](...n),u=a?At:t?da:ua;return!t&&ut(s,0,o?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:r?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Dt(e){return function(...t){return"delete"!==e&&this}}const[Rt,zt,Bt,Vt]=function(){const e={get(e){return Et(this,e)},get size(){return Ut(this)},has:Pt,add:Mt,set:It,delete:Ot,clear:jt,forEach:Lt(!1,!1)},t={get(e){return Et(this,e,!1,!0)},get size(){return Ut(this)},has:Pt,add:Mt,set:It,delete:Ot,clear:jt,forEach:Lt(!1,!0)},a={get(e){return Et(this,e,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:Lt(!0,!1)},n={get(e){return Et(this,e,!0,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=Ft(l,!1,!1),a[l]=Ft(l,!0,!1),t[l]=Ft(l,!1,!0),n[l]=Ft(l,!0,!0)})),[e,a,t,n]}();function qt(e,t){const a=t?e?Vt:Bt:e?zt:Rt;return(t,n,l)=>"__v_isReactive"===n?!e:"__v_isReadonly"===n?e:"__v_raw"===n?t:Reflect.get(_e(a,n)&&n in t?a:t,n,l)}const Ht={get:qt(!1,!1)},Gt={get:qt(!1,!0)},Wt={get:qt(!0,!1)},Kt={get:qt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:na(e,!1,$t,Ht,Jt)}function ea(e){return na(e,!1,Nt,Gt,Yt)}function ta(e){return na(e,!0,St,Wt,Zt)}function aa(e){return na(e,!0,Ct,Kt,Xt)}function na(e,t,a,n,l){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===i)return e;const r=new Proxy(e,2===i?n:a);return l.set(e,r),r}function la(e){return sa(e)?la(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function ia(e){return!(!e||!e.__v_isShallow)}function ra(e){return la(e)||sa(e)}function oa(e){const t=e&&e.__v_raw;return t?oa(t):e}function ca(e){return Fe(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function pa(e){it&&Ze&&dt((e=oa(e)).dep||(e.dep=We()))}function _a(e,t){(e=oa(e)).dep&&_t(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function ma(e){return va(e,!1)}function ha(e){return va(e,!0)}function va(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:oa(e),this._value=t?e:ua(e)}get value(){return pa(this),this._value}set value(e){e=this.__v_isShallow?e:oa(e),je(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),_a(this))}}function ba(e){_a(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,n)=>{const l=e[t];return fa(l)&&!fa(a)?(l.value=a,!0):Reflect.set(e,t,a,n)}};function xa(e){return la(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>pa(this)),(()=>_a(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const n=e[t];return fa(n)?n:new Na(e,t,a)}class Aa{constructor(e,t,a,n){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,_a(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=a}get value(){const e=oa(this);return pa(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ta=[];function Ea(e,...t){ot();const a=Ta.length?Ta[Ta.length-1].component:null,n=a&&a.appContext.config.warnHandler,l=function(){let e=Ta[Ta.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const n=e.component&&e.component.parent;e=n&&n.vnode}return t}();if(n)Ma(n,a,11,[e+t.join(""),a&&a.proxy,l.map((({vnode:e})=>`at <${yi(a,e.type)}>`)).join("\n"),l]);else{const a=[`[Vue warn]: ${e}`,...t];l.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",n=` at <${yi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+a;return e.props?[n,...Pa(e.props),l]:[n+l]}(e))})),t}(l)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ua(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ua(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ua(e,oa(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=oa(t),a?t:[`${e}=`,t])}function Ma(e,t,a,n){let l;try{l=n?e(...n):e()}catch(e){Oa(e,t,a)}return l}function Ia(e,t,a,n){if(ge(e)){const l=Ma(e,t,a,n);return l&&xe(l)&&l.catch((e=>{Oa(e,t,a)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(Ia(e[s],t,a,n));return l}function Oa(e,t,a,n=!0){if(t){let n=t.parent;const l=t.proxy,s=a;for(;n;){const t=n.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,l,s))return;n=n.parent}const i=t.appContext.config.errorHandler;if(i)return void Ma(i,null,10,[e,l,s])}!function(e,t,a,n=!0){console.error(e)}(e,0,0,n)}let ja=!1,La=!1;const Fa=[];let Da=0;const Ra=[];let za=null,Ba=0;const Va=[];let qa=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Fa.length&&Fa.includes(e,ja&&e.allowRecurse?Da+1:Da)||e===Ka||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Da+1,a=Fa.length;for(;t<a;){const n=t+a>>>1;an(Fa[n])<e?t=n+1:a=n}return t}(e.id),0,e),Za())}function Za(){ja||La||(La=!0,Wa=Ga.then(nn))}function Xa(e,t,a,n){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?n+1:n)||a.push(e),Za()}function Qa(e){Xa(e,qa,Va,Ha)}function en(e,t=null){if(Ra.length){for(Ka=t,za=[...new Set(Ra)],Ra.length=0,Ba=0;Ba<za.length;Ba++)za[Ba]();za=null,Ba=0,Ka=null,en(e,t)}}function tn(e){if(en(),Va.length){const e=[...new Set(Va)];if(Va.length=0,qa)return void qa.push(...e);for(qa=e,qa.sort(((e,t)=>an(e)-an(t))),Ha=0;Ha<qa.length;Ha++)qa[Ha]();qa=null,Ha=0}}const an=e=>null==e.id?1/0:e.id;function nn(e){La=!1,ja=!0,en(e),Fa.sort(((e,t)=>an(e)-an(t)));try{for(Da=0;Da<Fa.length;Da++){const e=Fa[Da];e&&!1!==e.active&&Ma(e,null,14)}}finally{Da=0,Fa.length=0,tn(),ja=!1,Wa=null,(Fa.length||Ra.length||Va.length)&&nn(e)}}let ln,sn=[];function rn(e,t){var a,n;ln=e,ln?(ln.enabled=!0,sn.forEach((({event:e,args:t})=>ln.emit(e,...t))),sn=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(n=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===n?void 0:n.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{rn(e,t)})),setTimeout((()=>{ln||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sn=[])}),3e3)):sn=[]}function on(e,t,...a){if(e.isUnmounted)return;const n=e.vnode.props||ne;let l=a;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in n){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=n[e]||ne;s&&(l=a.map((e=>e.trim()))),t&&(l=a.map(De))}let r,o=n[r=Oe(t)]||n[r=Oe(Pe(t))];!o&&s&&(o=n[r=Oe(Me(t))]),o&&Ia(o,e,6,l);const c=n[r+"Once"];if(c){if(e.emitted){if(e.emitted[r])return}else e.emitted={};e.emitted[r]=!0,Ia(c,e,6,l)}}function cn(e,t,a=!1){const n=t.emitsCache,l=n.get(e);if(void 0!==l)return l;const s=e.emits;let i={},r=!1;if(!ge(e)){const n=e=>{const a=cn(e,t,!0);a&&(r=!0,ue(i,a))};!a&&t.mixins.length&&t.mixins.forEach(n),e.extends&&n(e.extends),e.mixins&&e.mixins.forEach(n)}return s||r?(fe(s)?s.forEach((e=>i[e]=null)):ue(i,s),n.set(e,i),i):(n.set(e,null),null)}function un(e,t){return!(!e||!oe(t))&&(t=t.slice(2).replace(/Once$/,""),_e(e,t[0].toLowerCase()+t.slice(1))||_e(e,Me(t))||_e(e,t))}let dn=null,pn=null;function _n(e){const t=dn;return dn=e,pn=e&&e.type.__scopeId||null,t}function fn(e){pn=e}function mn(){pn=null}const hn=e=>vn;function vn(e,t=dn,a){if(!t)return e;if(e._n)return e;const n=(...a)=>{n._d&&Is(-1);const l=_n(t),s=e(...a);return _n(l),n._d&&Is(1),s};return n._n=!0,n._c=!0,n._d=!0,n}function gn(e){const{type:t,vnode:a,proxy:n,withProxy:l,props:s,propsOptions:[i],slots:r,attrs:o,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:m}=e;let h,v;const g=_n(e);try{if(4&a.shapeFlag){const e=l||n;h=Zs(u.call(e,e,d,s,_,p,f)),v=o}else{h=Zs(t(s,t.length>1?{attrs:o,slots:r,emit:c}:null)),v=t.props?o:bn(o)}}catch(t){Ts.length=0,Oa(t,e,1),h=Hs(Cs)}let b=h;if(v&&!1!==m){const e=Object.keys(v),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(ce)&&(v=yn(v,i)),b=Ws(b,v))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),h=b,_n(g),h}const bn=e=>{let t;for(const a in e)("class"===a||"style"===a||oe(a))&&((t||(t={}))[a]=e[a]);return t},yn=(e,t)=>{const a={};for(const n in e)ce(n)&&n.slice(9)in t||(a[n]=e[n]);return a};function wn(e,t,a){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(let l=0;l<n.length;l++){const s=n[l];if(t[s]!==e[s]&&!un(a,s))return!0}return!1}function xn({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const kn=e=>e.__isSuspense,$n={name:"Suspense",__isSuspense:!0,process(e,t,a,n,l,s,i,r,o,c){null==e?function(e,t,a,n,l,s,i,r,o){const{p:c,o:{createElement:u}}=o,d=u("div"),p=e.suspense=Nn(e,l,n,t,d,a,s,i,r,o);c(null,p.pendingBranch=e.ssContent,d,null,n,p,s,i),p.deps>0?(Sn(e,"onPending"),Sn(e,"onFallback"),c(null,e.ssFallback,t,a,n,null,s,i),Tn(p,e.ssFallback)):p.resolve()}(t,a,n,l,s,i,r,o,c):function(e,t,a,n,l,s,i,r,{p:o,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:h,isHydrating:v}=d;if(m)d.pendingBranch=p,Ds(p,m)?(o(m,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0?d.resolve():h&&(o(f,_,a,n,l,null,s,i,r),Tn(d,_))):(d.pendingId++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),h?(o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0?d.resolve():(o(f,_,a,n,l,null,s,i,r),Tn(d,_))):f&&Ds(p,f)?(o(f,p,a,n,l,d,s,i,r),d.resolve(!0)):(o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0&&d.resolve()));else if(f&&Ds(p,f))o(f,p,a,n,l,d,s,i,r),Tn(d,p);else if(Sn(t,"onPending"),d.pendingBranch=p,d.pendingId++,o(null,p,d.hiddenContainer,null,l,d,s,i,r),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,a,n,l,i,r,o,c)},hydrate:function(e,t,a,n,l,s,i,r,o){const c=t.suspense=Nn(t,n,a,e.parentNode,document.createElement("div"),null,l,s,i,r,!0),u=o(e,c.pendingBranch=t.ssContent,a,c,s,i);return 0===c.deps&&c.resolve(),u},create:Nn,normalize:function(e){const{shapeFlag:t,children:a}=e,n=32&t;e.ssContent=Cn(n?a.default:a),e.ssFallback=n?Cn(a.fallback):Hs(Cs)}};function Sn(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Nn(e,t,a,n,l,s,i,r,o,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:m,remove:h}}=c,v=De(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:i,container:n,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof v?v:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:n,pendingId:l,effects:s,parentComponent:i,container:r}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&n.transition&&"out-in"===n.transition.mode;e&&(a.transition.afterLeave=()=>{l===g.pendingId&&p(n,r,t,0)});let{anchor:t}=g;a&&(t=f(a),_(a,i,g,!0)),e||p(n,r,t,0)}Tn(g,n),g.pendingBranch=null,g.isInFallback=!1;let o=g.parent,c=!1;for(;o;){if(o.pendingBranch){o.effects.push(...s),c=!0;break}o=o.parent}c||Qa(s),g.effects=[],Sn(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:n,container:l,isSVG:s}=g;Sn(t,"onFallback");const i=f(a),c=()=>{g.isInFallback&&(d(null,e,l,i,n,null,s,r,o),Tn(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,_(a,n,null,!0),u||c()},move(e,t,a){g.activeBranch&&p(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const n=e.vnode.el;e.asyncDep.catch((t=>{Oa(t,e,0)})).then((l=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;pi(e,l,!1),n&&(s.el=n);const r=!n&&e.subTree.el;t(e,s,m(n||e.subTree.el),n?null:f(e.subTree),g,i,o),r&&h(r),xn(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&_(g.activeBranch,a,e,t),g.pendingBranch&&_(g.pendingBranch,a,e,t)}};return g}function Cn(e){let t;if(ge(e)){const a=Ms&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Es,Us())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const n=e[a];if(!Fs(n))return;if(n.type!==Cs||"v-if"===n.children){if(t)return;t=n}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function An(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Tn(e,t){e.activeBranch=t;const{vnode:a,parentComponent:n}=e,l=a.el=t.el;n&&n.subTree===a&&(n.vnode.el=l,xn(n,l))}function En(e,t){if(li){let a=li.provides;const n=li.parent&&li.parent.provides;n===a&&(a=li.provides=Object.create(n)),a[e]=t}}function Pn(e,t,a=!1){const n=li||dn;if(n){const l=null==n.parent?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return a&&ge(t)?t.call(n.proxy):t}}function Un(e,t){return Ln(e,null,t)}function Mn(e,t){return Ln(e,null,{flush:"post"})}function In(e,t){return Ln(e,null,{flush:"sync"})}const On={};function jn(e,t,a){return Ln(e,t,a)}function Ln(e,t,{immediate:a,deep:n,flush:l}=ne){const s=li;let i,r,o=!1,c=!1;if(fa(e)?(i=()=>e.value,o=ia(e)):la(e)?(i=()=>e,n=!0):fe(e)?(c=!0,o=e.some((e=>la(e)||ia(e))),i=()=>e.map((e=>fa(e)?e.value:la(e)?Rn(e):ge(e)?Ma(e,s,2):void 0))):i=ge(e)?t?()=>Ma(e,s,2):()=>{if(!s||!s.isUnmounted)return r&&r(),Ia(e,s,3,[u])}:se,t&&n){const e=i;i=()=>Rn(e())}let u=e=>{r=f.onStop=()=>{Ma(e,s,4)}},d=c?[]:On;const p=()=>{if(f.active)if(t){const e=f.run();(n||o||(c?e.some(((e,t)=>je(e,d[t]))):je(e,d)))&&(r&&r(),Ia(t,s,3,[e,d===On?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>fs(p,s&&s.suspense):()=>function(e){Xa(e,za,Ra,Ba)}(p);const f=new at(i,_);return t?a?p():d=f.run():"post"===l?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Fn(e,t,a){const n=this.proxy,l=be(e)?e.includes(".")?Dn(n,e):()=>n[e]:e.bind(n,n);let s;ge(t)?s=t:(s=t.handler,a=t);const i=li;ii(this);const r=Ln(l,s.bind(n),a);return i?ii(i):ri(),r}function Dn(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rn(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rn(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rn(e[a],t);else if(he(e)||me(e))e.forEach((e=>{Rn(e,t)}));else if(Se(e))for(const a in e)Rn(e[a],t);return e}function zn(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return pl((()=>{e.isMounted=!0})),ml((()=>{e.isUnmounting=!0})),e}const Bn=[Function,Array],Vn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Bn,onEnter:Bn,onAfterEnter:Bn,onEnterCancelled:Bn,onBeforeLeave:Bn,onLeave:Bn,onAfterLeave:Bn,onLeaveCancelled:Bn,onBeforeAppear:Bn,onAppear:Bn,onAfterAppear:Bn,onAppearCancelled:Bn},setup(e,{slots:t}){const a=si(),n=zn();let l;return()=>{const s=t.default&&Jn(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const r=oa(e),{mode:o}=r;if(n.isLeaving)return Gn(i);const c=Wn(i);if(!c)return Gn(i);const u=Hn(c,r,n,a);Kn(c,u);const d=a.subTree,p=d&&Wn(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==Cs&&(!Ds(c,p)||_)){const e=Hn(p,r,n,a);if(Kn(p,e),"out-in"===o)return n.isLeaving=!0,e.afterLeave=()=>{n.isLeaving=!1,a.update()},Gn(i);"in-out"===o&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{qn(n,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return i}}};function qn(e,t){const{leavingVNodes:a}=e;let n=a.get(t.type);return n||(n=Object.create(null),a.set(t.type,n)),n}function Hn(e,t,a,n){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:r,onEnter:o,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:m,onAppear:h,onAfterAppear:v,onAppearCancelled:g}=t,b=String(e.key),y=qn(a,e),w=(e,t)=>{e&&Ia(e,n,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:i,beforeEnter(t){let n=r;if(!a.isMounted){if(!l)return;n=m||r}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Ds(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(n,[t])},enter(e){let t=o,n=c,s=u;if(!a.isMounted){if(!l)return;t=h||o,n=v||c,s=g||u}let i=!1;const r=e._enterCb=t=>{i||(i=!0,w(t?s:n,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,r]):r()},leave(t,n){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return n();w(d,[t]);let s=!1;const i=t._leaveCb=a=>{s||(s=!0,n(),w(a?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>Hn(e,t,a,n)};return k}function Gn(e){if(el(e))return(e=Ws(e)).children=null,e}function Wn(e){return el(e)?e.children?e.children[0]:void 0:e}function Kn(e,t){6&e.shapeFlag&&e.component?Kn(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Jn(e,t=!1,a){let n=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const r=null==a?i.key:String(a)+String(null!=i.key?i.key:s);i.type===Ss?(128&i.patchFlag&&l++,n=n.concat(Jn(i.children,t,r))):(t||i.type!==Cs)&&n.push(null!=r?Ws(i,{key:r}):i)}if(l>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}function Yn(e){return ge(e)?{setup:e,name:e.name}:e}const Zn=e=>!!e.type.__asyncLoader;function Xn(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:n,delay:l=200,timeout:s,suspensible:i=!0,onError:r}=e;let o,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),r)return new Promise(((t,a)=>{r(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),o=t,t))))};return Yn({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return o},setup(){const e=li;if(o)return()=>Qn(o,e);const t=t=>{c=null,Oa(t,e,13,!n)};if(i&&e.suspense)return d().then((t=>()=>Qn(t,e))).catch((e=>(t(e),()=>n?Hs(n,{error:e}):null)));const r=ma(!1),u=ma(),p=ma(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!r.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{r.value=!0,e.parent&&el(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>r.value&&o?Qn(o,e):u.value&&n?Hs(n,{error:u.value}):a&&!p.value?Hs(a):void 0}})}function Qn(e,{vnode:{ref:t,props:a,children:n}}){const l=Hs(e,a,n);return l.ref=t,l}const el=e=>e.type.__isKeepAlive,tl={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=si(),n=a.ctx,l=new Map,s=new Set;let i=null;const r=a.suspense,{renderer:{p:o,m:c,um:u,o:{createElement:d}}}=n,p=d("div");function _(e){rl(e),u(e,a,r,!0)}function f(e){l.forEach(((t,a)=>{const n=bi(t.type);!n||e&&e(n)||m(a)}))}function m(e){const t=l.get(e);i&&t.type===i.type?i&&rl(i):_(t),l.delete(e),s.delete(e)}n.activate=(e,t,a,n,l)=>{const s=e.component;c(e,t,a,0,r),o(s.vnode,e,t,a,s,r,n,e.slotScopeIds,l),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ti(t,s.parent,e)}),r)},n.deactivate=e=>{const t=e.component;c(e,p,null,1,r),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&ti(a,t.parent,e),t.isDeactivated=!0}),r)},jn((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>al(e,t))),t&&f((e=>!al(t,e)))}),{flush:"post",deep:!0});let h=null;const v=()=>{null!=h&&l.set(h,ol(a.subTree))};return pl(v),fl(v),ml((()=>{l.forEach((e=>{const{subTree:t,suspense:n}=a,l=ol(t);if(e.type!==l.type)_(e);else{rl(l);const e=l.component.da;e&&fs(e,n)}}))})),()=>{if(h=null,!t.default)return null;const a=t.default(),n=a[0];if(a.length>1)return i=null,a;if(!Fs(n)||!(4&n.shapeFlag||128&n.shapeFlag))return i=null,n;let r=ol(n);const o=r.type,c=bi(Zn(r)?r.type.__asyncResolved||{}:o),{include:u,exclude:d,max:p}=e;if(u&&(!c||!al(u,c))||d&&c&&al(d,c))return i=r,n;const _=null==r.key?o:r.key,f=l.get(_);return r.el&&(r=Ws(r),128&n.shapeFlag&&(n.ssContent=r)),h=_,f?(r.el=f.el,r.component=f.component,r.transition&&Kn(r,r.transition),r.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&m(s.values().next().value)),r.shapeFlag|=256,i=r,kn(n.type)?n:r}}};function al(e,t){return fe(e)?e.some((e=>al(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function nl(e,t){sl(e,"a",t)}function ll(e,t){sl(e,"da",t)}function sl(e,t,a=li){const n=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cl(t,n,a),a){let e=a.parent;for(;e&&e.parent;)el(e.parent.vnode)&&il(n,t,a,e),e=e.parent}}function il(e,t,a,n){const l=cl(t,e,n,!0);hl((()=>{de(n[t],l)}),a)}function rl(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function ol(e){return 128&e.shapeFlag?e.ssContent:e}function cl(e,t,a=li,n=!1){if(a){const l=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...n)=>{if(a.isUnmounted)return;ot(),ii(a);const l=Ia(t,a,e,n);return ri(),ct(),l});return n?l.unshift(s):l.push(s),s}}const ul=e=>(t,a=li)=>(!di||"sp"===e)&&cl(e,t,a),dl=ul("bm"),pl=ul("m"),_l=ul("bu"),fl=ul("u"),ml=ul("bum"),hl=ul("um"),vl=ul("sp"),gl=ul("rtg"),bl=ul("rtc");function yl(e,t=li){cl("ec",e,t)}function wl(e,t){const a=dn;if(null===a)return e;const n=vi(a)||a.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,i,r=ne]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rn(s),l.push({dir:a,instance:n,value:s,oldValue:void 0,arg:i,modifiers:r})}return e}function xl(e,t,a,n){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const r=l[i];s&&(r.oldValue=s[i].value);let o=r.dir[n];o&&(ot(),Ia(o,a,8,[e.el,r,e,t]),ct())}}function kl(e,t){return Cl("components",e,!0,t)||e}const $l=Symbol();function Sl(e){return be(e)?Cl("components",e,!1)||e:e||$l}function Nl(e){return Cl("directives",e)}function Cl(e,t,a=!0,n=!1){const l=dn||li;if(l){const a=l.type;if("components"===e){const e=bi(a,!1);if(e&&(e===t||e===Pe(t)||e===Ie(Pe(t))))return a}const s=Al(l[e]||a[e],t)||Al(l.appContext[e],t);return!s&&n?a:s}}function Al(e,t){return e&&(e[t]||e[Pe(t)]||e[Ie(Pe(t))])}function Tl(e,t,a,n){let l;const s=a&&a[n];if(fe(e)||be(e)){l=new Array(e.length);for(let a=0,n=e.length;a<n;a++)l[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){l=new Array(e);for(let a=0;a<e;a++)l[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])l=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);l=new Array(a.length);for(let n=0,i=a.length;n<i;n++){const i=a[n];l[n]=t(e[i],i,n,s&&s[n])}}else l=[];return a&&(a[n]=l),l}function El(e,t){for(let a=0;a<t.length;a++){const n=t[a];if(fe(n))for(let t=0;t<n.length;t++)e[n[t].name]=n[t].fn;else n&&(e[n.name]=n.fn)}return e}function Pl(e,t,a={},n,l){if(dn.isCE||dn.parent&&Zn(dn.parent)&&dn.parent.isCE)return Hs("slot","default"===t?null:{name:t},n&&n());let s=e[t];s&&s._c&&(s._d=!1),Ps();const i=s&&Ul(s(a)),r=Ls(Ss,{key:a.key||`_${t}`},i||(n?n():[]),i&&1===e._?64:-2);return!l&&r.scopeId&&(r.slotScopeIds=[r.scopeId+"-s"]),s&&s._c&&(s._d=!0),r}function Ul(e){return e.some((e=>!Fs(e)||e.type!==Cs&&!(e.type===Ss&&!Ul(e.children))))?e:null}function Ml(e){const t={};for(const a in e)t[Oe(a)]=e[a];return t}const Il=e=>e?oi(e)?vi(e)||e.proxy:Il(e.parent):null,Ol=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Il(e.parent),$root:e=>Il(e.root),$emit:e=>e.emit,$options:e=>zl(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Fn.bind(e)}),jl={get({_:e},t){const{ctx:a,setupState:n,data:l,props:s,accessCache:i,type:r,appContext:o}=e;let c;if("$"!==t[0]){const r=i[t];if(void 0!==r)switch(r){case 1:return n[t];case 2:return l[t];case 4:return a[t];case 3:return s[t]}else{if(n!==ne&&_e(n,t))return i[t]=1,n[t];if(l!==ne&&_e(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&_e(c,t))return i[t]=3,s[t];if(a!==ne&&_e(a,t))return i[t]=4,a[t];Fl&&(i[t]=0)}}const u=Ol[t];let d,p;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=r.__cssModules)&&(d=d[t])?d:a!==ne&&_e(a,t)?(i[t]=4,a[t]):(p=o.config.globalProperties,_e(p,t)?p[t]:void 0)},set({_:e},t,a){const{data:n,setupState:l,ctx:s}=e;return l!==ne&&_e(l,t)?(l[t]=a,!0):n!==ne&&_e(n,t)?(n[t]=a,!0):!(_e(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:n,appContext:l,propsOptions:s}},i){let r;return!!a[i]||e!==ne&&_e(e,i)||t!==ne&&_e(t,i)||(r=s[0])&&_e(r,i)||_e(n,i)||_e(Ol,i)||_e(l.config.globalProperties,i)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:_e(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ll=ue({},jl,{get(e,t){if(t!==Symbol.unscopables)return jl.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Fl=!0;function Dl(e,t,a){Ia(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Rl(e,t,a,n){const l=n.includes(".")?Dn(a,n):()=>a[n];if(be(e)){const a=t[e];ge(a)&&jn(l,a)}else if(ge(e))jn(l,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Rl(e,t,a,n)));else{const n=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(n)&&jn(l,n,e)}}function zl(e){const t=e.type,{mixins:a,extends:n}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,r=s.get(t);let o;return r?o=r:l.length||a||n?(o={},l.length&&l.forEach((e=>Bl(o,e,i,!0))),Bl(o,t,i)):o=t,s.set(t,o),o}function Bl(e,t,a,n=!1){const{mixins:l,extends:s}=t;s&&Bl(e,s,a,!0),l&&l.forEach((t=>Bl(e,t,a,!0)));for(const l in t)if(n&&"expose"===l);else{const n=Vl[l]||a&&a[l];e[l]=n?n(e[l],t[l]):t[l]}return e}const Vl={data:ql,props:Wl,emits:Wl,methods:Wl,computed:Wl,beforeCreate:Gl,created:Gl,beforeMount:Gl,mounted:Gl,beforeUpdate:Gl,updated:Gl,beforeDestroy:Gl,beforeUnmount:Gl,destroyed:Gl,unmounted:Gl,activated:Gl,deactivated:Gl,errorCaptured:Gl,serverPrefetch:Gl,components:Wl,directives:Wl,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const n in t)a[n]=Gl(e[n],t[n]);return a},provide:ql,inject:function(e,t){return Wl(Hl(e),Hl(t))}};function ql(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hl(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gl(e,t){return e?[...new Set([].concat(e,t))]:t}function Wl(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kl(e,t,a,n){const[l,s]=e.propsOptions;let i,r=!1;if(t)for(let o in t){if(Ce(o))continue;const c=t[o];let u;l&&_e(l,u=Pe(o))?s&&s.includes(u)?(i||(i={}))[u]=c:a[u]=c:un(e.emitsOptions,o)||o in n&&c===n[o]||(n[o]=c,r=!0)}if(s){const t=oa(a),n=i||ne;for(let i=0;i<s.length;i++){const r=s[i];a[r]=Jl(l,t,r,n[r],e,!_e(n,r))}}return r}function Jl(e,t,a,n,l,s){const i=e[a];if(null!=i){const e=_e(i,"default");if(e&&void 0===n){const e=i.default;if(i.type!==Function&&ge(e)){const{propsDefaults:s}=l;a in s?n=s[a]:(ii(l),n=s[a]=e.call(null,t),ri())}else n=e}i[0]&&(s&&!e?n=!1:!i[1]||""!==n&&n!==Me(a)||(n=!0))}return n}function Yl(e,t,a=!1){const n=t.propsCache,l=n.get(e);if(l)return l;const s=e.props,i={},r=[];let o=!1;if(!ge(e)){const n=e=>{o=!0;const[a,n]=Yl(e,t,!0);ue(i,a),n&&r.push(...n)};!a&&t.mixins.length&&t.mixins.forEach(n),e.extends&&n(e.extends),e.mixins&&e.mixins.forEach(n)}if(!s&&!o)return n.set(e,le),le;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zl(t)&&(i[t]=ne)}else if(s)for(const e in s){const t=Pe(e);if(Zl(t)){const a=s[e],n=i[t]=fe(a)||ge(a)?{type:a}:a;if(n){const e=es(Boolean,n.type),a=es(String,n.type);n[0]=e>-1,n[1]=a<0||e<a,(e>-1||_e(n,"default"))&&r.push(t)}}}const c=[i,r];return n.set(e,c),c}function Zl(e){return"$"!==e[0]}function Xl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Ql(e,t){return Xl(e)===Xl(t)}function es(e,t){return fe(t)?t.findIndex((t=>Ql(t,e))):ge(t)&&Ql(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ns=(e,t,a)=>{if(t._n)return t;const n=vn(((...e)=>as(t(...e))),a);return n._c=!1,n},ls=(e,t,a)=>{const n=e._ctx;for(const a in e){if(ts(a))continue;const l=e[a];if(ge(l))t[a]=ns(0,l,n);else if(null!=l){const e=as(l);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function is(){return{app:null,config:{isNativeTag:ie,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let rs=0;function os(e,t){return function(a,n=null){ge(a)||(a=Object.assign({},a)),null==n||we(n)||(n=null);const l=is(),s=new Set;let i=!1;const r=l.app={_uid:rs++,_component:a,_props:n,_container:null,_context:l,_instance:null,version:Fi,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(r,...t)):ge(e)&&(s.add(e),e(r,...t))),r),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),r),component:(e,t)=>t?(l.components[e]=t,r):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,r):l.directives[e],mount(s,o,c){if(!i){const u=Hs(a,n);return u.appContext=l,o&&t?t(u,s):e(u,s,c),i=!0,r._container=s,s.__vue_app__=r,vi(u.component)||u.component.proxy}},unmount(){i&&(e(null,r._container),delete r._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,r)};return r}}function cs(e,t,a,n,l=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,n,l)));if(Zn(n)&&!l)return;const s=4&n.shapeFlag?vi(n.component)||n.component.proxy:n.el,i=l?null:s,{i:r,r:o}=e,c=t&&t.r,u=r.refs===ne?r.refs={}:r.refs,d=r.setupState;if(null!=c&&c!==o&&(be(c)?(u[c]=null,_e(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(o))Ma(o,r,12,[i,u]);else{const t=be(o),n=fa(o);if(t||n){const r=()=>{if(e.f){const a=t?u[o]:o.value;l?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[o]=[s],_e(d,o)&&(d[o]=u[o])):(o.value=[s],e.k&&(u[e.k]=o.value))}else t?(u[o]=i,_e(d,o)&&(d[o]=i)):n&&(o.value=i,e.k&&(u[e.k]=i))};i?(r.id=-1,fs(r,a)):r()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ps=e=>8===e.nodeType;function _s(e){const{mt:t,p:a,o:{patchProp:n,createText:l,nextSibling:s,parentNode:i,remove:r,insert:o,createComment:c}}=e,u=(a,n,r,c,h,v=!1)=>{const g=ps(a)&&"["===a.data,b=()=>f(a,n,r,c,h,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=n,$=a.nodeType;n.el=a,-2===k&&(v=!1,n.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===n.children?(o(n.el=l(""),i(a),a),S=a):S=b():(a.data!==n.children&&(us=!0,a.data=n.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!n.children.length;for(let t=0;t<n.staticCount;t++)e&&(n.children+=1===S.nodeType?S.outerHTML:S.data),t===n.staticCount-1&&(n.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?_(a,n,r,c,h,v):b();break;default:if(1&x)S=1!==$||n.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,n,r,c,h,v);else if(6&x){n.slotScopeIds=h;const e=i(a);if(t(n,e,null,r,c,ds(e),v),S=g?m(a):s(a),S&&ps(S)&&"teleport end"===S.data&&(S=s(S)),Zn(n)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,n.component.subTree=t}}else 64&x?S=8!==$?b():n.type.hydrate(a,n,r,c,h,v,e,p):128&x&&(S=n.type.hydrate(a,n,r,c,ds(i(a)),h,v,e,u))}return null!=w&&cs(w,null,c,n),S},d=(e,t,a,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:o,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===o&&_||"option"===o;if(f||-1!==u){if(_&&xl(t,null,a,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||oe(t)&&!Ce(t))&&n(e,t,null,c[t],!1,void 0,a);else c.onClick&&n(e,"onClick",null,c.onClick,!1,void 0,a);let o;if((o=c&&c.onVnodeBeforeMount)&&ti(o,a,t),_&&xl(t,null,a,"beforeMount"),((o=c&&c.onVnodeMounted)||_)&&An((()=>{o&&ti(o,a,t),_&&xl(t,null,a,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let n=p(e.firstChild,t,e,a,l,s,i);for(;n;){us=!0;const e=n;n=n.nextSibling,r(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,n,l,s,i,r)=>{r=r||!!t.dynamicChildren;const o=t.children,c=o.length;for(let t=0;t<c;t++){const c=r?o[t]:o[t]=Zs(o[t]);if(e)e=u(e,c,l,s,i,r);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,n,null,l,s,ds(n),i)}}return e},_=(e,t,a,n,l,r)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,a,n,l,r);return _&&ps(_)&&"]"===_.data?s(t.anchor=_):(us=!0,o(t.anchor=c("]"),d,_),_)},f=(e,t,n,l,o,c)=>{if(us=!0,t.el=null,c){const t=m(e);for(;;){const a=s(e);if(!a||a===t)break;r(a)}}const u=s(e),d=i(e);return r(e),a(null,t,d,u,n,l,ds(d),o),u},m=e=>{let t=0;for(;e;)if((e=s(e))&&ps(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tn(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tn(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=An;function ms(e){return vs(e)}function hs(e){return vs(e,_s)}function vs(e,t){(Re||(Re="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:n,patchProp:l,createElement:s,createText:i,createComment:r,setText:o,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=se,cloneNode:_,insertStaticContent:f}=e,m=(e,t,a,n=null,l=null,s=null,i=!1,r=null,o=!!t.dynamicChildren)=>{if(e===t)return;e&&!Ds(e,t)&&(n=z(e),j(e,l,s,!0),e=null),-2===t.patchFlag&&(o=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:h(e,t,a,n);break;case Cs:v(e,t,a,n);break;case As:null==e&&g(t,a,n,i);break;case Ss:N(e,t,a,n,l,s,i,r,o);break;default:1&d?b(e,t,a,n,l,s,i,r,o):6&d?C(e,t,a,n,l,s,i,r,o):(64&d||128&d)&&c.process(e,t,a,n,l,s,i,r,o,V)}null!=u&&l&&cs(u,e&&e.ref,s,t||e,!t)},h=(e,t,n,l)=>{if(null==e)a(t.el=i(t.children),n,l);else{const a=t.el=e.el;t.children!==e.children&&o(a,t.children)}},v=(e,t,n,l)=>{null==e?a(t.el=r(t.children||""),n,l):t.el=e.el},g=(e,t,a,n)=>{[e.el,e.anchor]=f(e.children,t,a,n,e.el,e.anchor)},b=(e,t,a,n,l,s,i,r,o)=>{i=i||"svg"===t.type,null==e?y(t,a,n,l,s,i,r,o):k(e,t,l,s,i,r,o)},y=(e,t,n,i,r,o,u,d)=>{let p,f;const{type:m,props:h,shapeFlag:v,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,o,h&&h.is,h),8&v?c(p,e.children):16&v&&x(e.children,p,null,i,r,o&&"foreignObject"!==m,u,d),y&&xl(e,null,i,"created"),h){for(const t in h)"value"===t||Ce(t)||l(p,t,null,h[t],o,e.children,i,r,R);"value"in h&&l(p,"value",null,h.value),(f=h.onVnodeBeforeMount)&&ti(f,i,e)}w(p,e,e.scopeId,u,i)}y&&xl(e,null,i,"beforeMount");const k=(!r||r&&!r.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(p),a(p,t,n),((f=h&&h.onVnodeMounted)||k||y)&&fs((()=>{f&&ti(f,i,e),k&&g.enter(p),y&&xl(e,null,i,"mounted")}),r)},w=(e,t,a,n,l)=>{if(a&&p(e,a),n)for(let t=0;t<n.length;t++)p(e,n[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,a,n,l,s,i,r,o=0)=>{for(let c=o;c<e.length;c++){const o=e[c]=r?Xs(e[c]):Zs(e[c]);m(null,o,t,a,n,l,s,i,r)}},k=(e,t,a,n,s,i,r)=>{const o=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||ne,f=t.props||ne;let m;a&&gs(a,!1),(m=f.onVnodeBeforeUpdate)&&ti(m,a,t,e),p&&xl(t,e,a,"beforeUpdate"),a&&gs(a,!0);const h=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,o,a,n,h,i):r||U(e,t,o,null,a,n,h,i,!1),u>0){if(16&u)S(o,t,_,f,a,n,s);else if(2&u&&_.class!==f.class&&l(o,"class",null,f.class,s),4&u&&l(o,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const r=i[t],c=_[r],u=f[r];u===c&&"value"!==r||l(o,r,c,u,s,e.children,a,n,R)}}1&u&&e.children!==t.children&&c(o,t.children)}else r||null!=d||S(o,t,_,f,a,n,s);((m=f.onVnodeUpdated)||p)&&fs((()=>{m&&ti(m,a,t,e),p&&xl(t,e,a,"updated")}),n)},$=(e,t,a,n,l,s,i)=>{for(let r=0;r<t.length;r++){const o=e[r],c=t[r],d=o.el&&(o.type===Ss||!Ds(o,c)||70&o.shapeFlag)?u(o.el):a;m(o,c,d,null,n,l,s,i,!0)}},S=(e,t,a,n,s,i,r)=>{if(a!==n){for(const o in n){if(Ce(o))continue;const c=n[o],u=a[o];c!==u&&"value"!==o&&l(e,o,u,c,r,t.children,s,i,R)}if(a!==ne)for(const o in a)Ce(o)||o in n||l(e,o,a[o],null,r,t.children,s,i,R);"value"in n&&l(e,"value",a.value,n.value)}},N=(e,t,n,l,s,r,o,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(a(d,n,l),a(p,n,l),x(t.children,n,p,s,r,o,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,n,s,r,o,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):U(e,t,n,p,s,r,o,c,u)},C=(e,t,a,n,l,s,i,r,o)=>{t.slotScopeIds=r,null==e?512&t.shapeFlag?l.ctx.activate(t,a,n,i,o):A(t,a,n,l,s,i,o):T(e,t,o)},A=(e,t,a,n,l,s,i)=>{const r=e.component=function(e,t,a){const n=e.type,l=(t?t.appContext:e.appContext)||ai,s={uid:ni++,vnode:e,type:n,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new Be(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yl(n,l),emitsOptions:cn(n,l),emit:null,emitted:null,propsDefaults:ne,inheritAttrs:n.inheritAttrs,ctx:ne,data:ne,props:ne,attrs:ne,slots:ne,refs:ne,setupState:ne,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=on.bind(null,s),e.ce&&e.ce(s),s}(e,n,l);if(el(e)&&(r.ctx.renderer=V),function(e,t=!1){di=t;const{props:a,children:n}=e.vnode,l=oi(e);(function(e,t,a,n=!1){const l={},s={};Fe(s,zs,1),e.propsDefaults=Object.create(null),Kl(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=a?n?l:ea(l):e.type.props?l:s,e.attrs=s})(e,a,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=oa(t),Fe(t,"_",a)):ls(t,e.slots={})}else e.slots={},t&&ss(e,t);Fe(e.slots,zs,1)})(e,n),l&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,jl));const{setup:n}=a;if(n){const a=e.setupContext=n.length>1?hi(e):null;ii(e),ot();const l=Ma(n,e,0,[e.props,a]);if(ct(),ri(),xe(l)){if(l.then(ri,ri),t)return l.then((a=>{pi(e,a,t)})).catch((t=>{Oa(t,e,0)}));e.asyncDep=l}else pi(e,l,t)}else mi(e,t)}(e,t),di=!1}(r),r.asyncDep){if(l&&l.registerDep(r,E),!e.el){const e=r.subTree=Hs(Cs);v(null,e,t,a)}}else E(r,e,t,a,l,s,i)},T=(e,t,a)=>{const n=t.component=e.component;if(function(e,t,a){const{props:n,children:l,component:s}=e,{props:i,children:r,patchFlag:o}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&o>=0))return!(!l&&!r||r&&r.$stable)||n!==i&&(n?!i||wn(n,i,c):!!i);if(1024&o)return!0;if(16&o)return n?wn(n,i,c):!!i;if(8&o){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(i[a]!==n[a]&&!un(c,a))return!0}}return!1}(e,t,a)){if(n.asyncDep&&!n.asyncResolved)return void P(n,t,a);n.next=t,function(e){const t=Fa.indexOf(e);t>Da&&Fa.splice(t,1)}(n.update),n.update()}else t.el=e.el,n.vnode=t},E=(e,t,a,n,l,s,i)=>{const r=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:n,u:r,parent:o,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,i)):a=c,n&&Le(n),(t=a.props&&a.props.onVnodeBeforeUpdate)&&ti(t,o,a,c),gs(e,!0);const p=gn(e),_=e.subTree;e.subTree=p,m(_,p,u(_.el),z(_),e,l,s),a.el=p.el,null===d&&xn(e,p.el),r&&fs(r,l),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>ti(t,o,a,c)),l)}else{let i;const{el:r,props:o}=t,{bm:c,m:u,parent:d}=e,p=Zn(t);if(gs(e,!1),c&&Le(c),!p&&(i=o&&o.onVnodeBeforeMount)&&ti(i,d,t),gs(e,!0),r&&H){const a=()=>{e.subTree=gn(e),H(r,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const i=e.subTree=gn(e);m(null,i,a,n,e,l,s),t.el=i.el}if(u&&fs(u,l),!p&&(i=o&&o.onVnodeMounted)){const e=t;fs((()=>ti(i,d,e)),l)}(256&t.shapeFlag||d&&Zn(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,l),e.isMounted=!0,t=a=n=null}}),(()=>Ya(o)),e.scope),o=e.update=()=>r.run();o.id=e.uid,gs(e,!0),o()},P=(e,t,a)=>{t.component=e;const n=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,n){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,r=oa(l),[o]=e.propsOptions;let c=!1;if(!(n||i>0)||16&i){let n;Kl(e,t,l,s)&&(c=!0);for(const s in r)t&&(_e(t,s)||(n=Me(s))!==s&&_e(t,n))||(o?!a||void 0===a[s]&&void 0===a[n]||(l[s]=Jl(o,r,s,void 0,e,!0)):delete l[s]);if(s!==r)for(const e in s)t&&_e(t,e)||(delete s[e],c=!0)}else if(8&i){const a=e.vnode.dynamicProps;for(let n=0;n<a.length;n++){let i=a[n];if(un(e.emitsOptions,i))continue;const u=t[i];if(o)if(_e(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Pe(i);l[t]=Jl(o,r,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&pt(e,"set","$attrs")}(e,t.props,n,a),((e,t,a)=>{const{vnode:n,slots:l}=e;let s=!0,i=ne;if(32&n.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(l,t),a||1!==e||delete l._):(s=!t.$stable,ls(t,l)),i=t}else t&&(ss(e,t),i={default:1});if(s)for(const e in l)ts(e)||e in i||delete l[e]})(e,t.children,a),ot(),en(void 0,e.update),ct()},U=(e,t,a,n,l,s,i,r,o=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void I(u,p,a,n,l,s,i,r,o);if(256&_)return void M(u,p,a,n,l,s,i,r,o)}8&f?(16&d&&R(u,l,s),p!==u&&c(a,p)):16&d?16&f?I(u,p,a,n,l,s,i,r,o):R(u,l,s,!0):(8&d&&c(a,""),16&f&&x(p,a,n,l,s,i,r,o))},M=(e,t,a,n,l,s,i,r,o)=>{const c=(e=e||le).length,u=(t=t||le).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const n=t[p]=o?Xs(t[p]):Zs(t[p]);m(e[p],n,a,null,l,s,i,r,o)}c>u?R(e,l,s,!0,!1,d):x(t,a,n,l,s,i,r,o,d)},I=(e,t,a,n,l,s,i,r,o)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const n=e[c],u=t[c]=o?Xs(t[c]):Zs(t[c]);if(!Ds(n,u))break;m(n,u,a,null,l,s,i,r,o),c++}for(;c<=d&&c<=p;){const n=e[d],c=t[p]=o?Xs(t[p]):Zs(t[p]);if(!Ds(n,c))break;m(n,c,a,null,l,s,i,r,o),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:n;for(;c<=p;)m(null,t[c]=o?Xs(t[c]):Zs(t[c]),a,d,l,s,i,r,o),c++}}else if(c>p)for(;c<=d;)j(e[c],l,s,!0),c++;else{const _=c,f=c,h=new Map;for(c=f;c<=p;c++){const e=t[c]=o?Xs(t[c]):Zs(t[c]);null!=e.key&&h.set(e.key,c)}let v,g=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const n=e[c];if(g>=b){j(n,l,s,!0);continue}let u;if(null!=n.key)u=h.get(n.key);else for(v=f;v<=p;v++)if(0===x[v-f]&&Ds(n,t[v])){u=v;break}void 0===u?j(n,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,m(n,t[u],a,null,l,s,i,r,o),g++)}const k=y?function(e){const t=e.slice(),a=[0];let n,l,s,i,r;const o=e.length;for(n=0;n<o;n++){const o=e[n];if(0!==o){if(l=a[a.length-1],e[l]<o){t[n]=l,a.push(n);continue}for(s=0,i=a.length-1;s<i;)r=s+i>>1,e[a[r]]<o?s=r+1:i=r;o<e[a[s]]&&(s>0&&(t[n]=a[s-1]),a[s]=n)}}for(s=a.length,i=a[s-1];s-- >0;)a[s]=i,i=t[i];return a}(x):le;for(v=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:n;0===x[c]?m(null,d,a,p,l,s,i,r,o):y&&(v<0||c!==k[v]?O(d,a,p,2):v--)}}},O=(e,t,n,l,s=null)=>{const{el:i,type:r,transition:o,children:c,shapeFlag:u}=e;if(6&u)O(e.component.subTree,t,n,l);else if(128&u)e.suspense.move(t,n,l);else if(64&u)r.move(e,t,n,V);else if(r!==Ss)if(r!==As)if(2!==l&&1&u&&o)if(0===l)o.beforeEnter(i),a(i,t,n),fs((()=>o.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=o,r=()=>a(i,t,n),c=()=>{e(i,(()=>{r(),s&&s()}))};l?l(i,r,c):c()}else a(i,t,n);else(({el:e,anchor:t},n,l)=>{let s;for(;e&&e!==t;)s=d(e),a(e,n,l),e=s;a(t,n,l)})(e,t,n);else{a(i,t,n);for(let e=0;e<c.length;e++)O(c[e],t,n,l);a(e.anchor,t,n)}},j=(e,t,a,n=!1,l=!1)=>{const{type:s,props:i,ref:r,children:o,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=r&&cs(r,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Zn(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&ti(m,t,e),6&u)D(e.component,a,n);else{if(128&u)return void e.suspense.unmount(a,n);_&&xl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,l,V,n):c&&(s!==Ss||d>0&&64&d)?R(c,t,a,!1,!0):(s===Ss&&384&d||!l&&16&u)&&R(o,t,a),n&&L(e)}(f&&(m=i&&i.onVnodeUnmounted)||_)&&fs((()=>{m&&ti(m,t,e),_&&xl(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:l,transition:s}=e;if(t===Ss)return void F(a,l);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),n(e),e=a;n(t)})(e);const i=()=>{n(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:n}=s,l=()=>t(a,i);n?n(e.el,i,l):l()}else i()},F=(e,t)=>{let a;for(;e!==t;)a=d(e),n(e),e=a;n(t)},D=(e,t,a)=>{const{bum:n,scope:l,update:s,subTree:i,um:r}=e;n&&Le(n),l.stop(),s&&(s.active=!1,j(i,e,t,a)),r&&fs(r,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},R=(e,t,a,n=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)j(e[i],t,a,n,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,a),tn(),t._vnode=e},V={p:m,um:j,m:O,r:L,mt:A,mc:x,pc:U,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:os(B,q)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const n=e.children,l=t.children;if(fe(n)&&fe(l))for(let e=0;e<n.length;e++){const t=n[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Xs(l[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:n},m:l},s=2){0===s&&n(e.targetAnchor,t,a);const{el:i,anchor:r,shapeFlag:o,children:c,props:u}=e,d=2===s;if(d&&n(i,t,a),(!d||ys(u))&&16&o)for(let e=0;e<c.length;e++)l(c[e],t,a,2);d&&n(r,t,a)}const $s={__isTeleport:!0,process(e,t,a,n,l,s,i,r,o,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:m}}=c,h=ys(t.props);let{shapeFlag:v,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),c=t.anchor=m("");_(e,a,n),_(c,a,n);const d=t.target=xs(t.props,f),p=t.targetAnchor=m("");d&&(_(p,d),i=i||ws(d));const b=(e,t)=>{16&v&&u(g,e,t,l,s,i,r,o)};h?b(a,c):d&&b(d,p)}else{t.el=e.el;const n=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,m=ys(e.props),v=m?a:u,g=m?n:_;if(i=i||ws(u),b?(p(e.dynamicChildren,b,v,l,s,i,r),bs(e,t,!0)):o||d(e,t,v,g,l,s,i,r,!1),h)m||ks(t,a,n,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else m&&ks(t,u,_,c,1)}},remove(e,t,a,n,{um:l,o:{remove:s}},i){const{shapeFlag:r,children:o,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!ys(p))&&(s(c),16&r))for(let e=0;e<o.length;e++){const n=o[e];l(n,t,a,!0,!!n.dynamicChildren)}},move:ks,hydrate:function(e,t,a,n,l,s,{o:{nextSibling:i,parentNode:r,querySelector:o}},c){const u=t.target=xs(t.props,o);if(u){const o=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(i(e),t,r(e),a,n,l,s),t.targetAnchor=o;else{t.anchor=i(e);let r=o;for(;r;)if(r=i(r),r&&8===r.nodeType&&"teleport anchor"===r.data){t.targetAnchor=r,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(o,t,u,a,n,l,s)}}return t.anchor&&i(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),As=Symbol(void 0),Ts=[];let Es=null;function Ps(e=!1){Ts.push(Es=e?null:[])}function Us(){Ts.pop(),Es=Ts[Ts.length-1]||null}let Ms=1;function Is(e){Ms+=e}function Os(e){return e.dynamicChildren=Ms>0?Es||le:null,Us(),Ms>0&&Es&&Es.push(e),e}function js(e,t,a,n,l,s){return Os(qs(e,t,a,n,l,s,!0))}function Ls(e,t,a,n,l){return Os(Hs(e,t,a,n,l,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Ds(e,t){return e.type===t.type&&e.key===t.key}function Rs(e){}const zs="__vInternal",Bs=({key:e})=>null!=e?e:null,Vs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:dn,r:e,k:t,f:!!a}:e:null;function qs(e,t=null,a=null,n=0,l=null,s=(e===Ss?0:1),i=!1,r=!1){const o={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Bs(t),ref:t&&Vs(t),scopeId:pn,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:n,dynamicProps:l,dynamicChildren:null,appContext:null};return r?(Qs(o,a),128&s&&e.normalize(o)):a&&(o.shapeFlag|=be(a)?8:16),Ms>0&&!i&&Es&&(o.patchFlag>0||6&s)&&32!==o.patchFlag&&Es.push(o),o}const Hs=function(e,t=null,a=null,n=0,l=null,s=!1){if(e&&e!==$l||(e=Cs),Fs(e)){const n=Ws(e,t,!0);return a&&Qs(n,a),Ms>0&&!s&&Es&&(6&n.shapeFlag?Es[Es.indexOf(e)]=n:Es.push(n)),n.patchFlag|=-2,n}var i;if(ge(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ra(a)&&!fe(a)&&(a=ue({},a)),t.style=q(a))}return qs(e,t,a,n,l,be(e)?1:kn(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ra(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:n,ref:l,patchFlag:s,children:i}=e,r=t?ei(n||{},t):n;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:r,key:r&&Bs(r),ref:t&&t.ref?a&&l?fe(l)?l.concat(Vs(t)):[l,Vs(t)]:Vs(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Ps(),Ls(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:n}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&n){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const n=t._;n||zs in t?3===n&&dn&&(1===dn.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=dn}}else ge(t)?(t={default:t,_ctx:dn},a=32):(t=String(t),64&n?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function ei(...e){const t={};for(let a=0;a<e.length;a++){const n=e[a];for(const e in n)if("class"===e)t.class!==n.class&&(t.class=K([t.class,n.class]));else if("style"===e)t.style=q([t.style,n.style]);else if(oe(e)){const a=t[e],l=n[e];!l||a===l||fe(a)&&a.includes(l)||(t[e]=a?[].concat(a,l):l)}else""!==e&&(t[e]=n[e])}return t}function ti(e,t,a,n=null){Ia(e,t,7,[a,n])}const ai=is();let ni=0,li=null;const si=()=>li||dn,ii=e=>{li=e,e.scope.on()},ri=()=>{li&&li.scope.off(),li=null};function oi(e){return 4&e.vnode.shapeFlag}let ci,ui,di=!1;function pi(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mi(e,a)}function _i(e){ci=e,ui=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ll))}}const fi=()=>!ci;function mi(e,t,a){const n=e.type;if(!e.render){if(!t&&ci&&!n.render){const t=n.template;if(t){const{isCustomElement:a,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=n,r=ue(ue({isCustomElement:a,delimiters:s},l),i);n.render=ci(t,r)}}e.render=n.render||se,ui&&ui(e)}ii(e),ot(),function(e){const t=zl(e),a=e.proxy,n=e.ctx;Fl=!1,t.beforeCreate&&Dl(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:r,provide:o,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:m,deactivated:h,beforeUnmount:v,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,n=!1){fe(e)&&(e=Hl(e));for(const a in e){const l=e[a];let s;s=we(l)?"default"in l?Pn(l.from||a,l.default,!0):Pn(l.from||a):Pn(l),fa(s)&&n?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,n,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ge(t)&&(n[e]=t.bind(a))}if(l){const t=l.call(a,a);we(t)&&(e.data=Qt(t))}if(Fl=!0,s)for(const e in s){const t=s[e],l=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,i=!ge(t)&&ge(t.set)?t.set.bind(a):se,r=wi({get:l,set:i});Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:()=>r.value,set:e=>r.value=e})}if(r)for(const e in r)Rl(r[e],n,a,e);if(o){const e=ge(o)?o.call(a):o;Reflect.ownKeys(e).forEach((t=>{En(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Dl(u,e,"c"),A(dl,d),A(pl,p),A(_l,_),A(fl,f),A(nl,m),A(ll,h),A(yl,x),A(bl,y),A(gl,w),A(ml,v),A(hl,g),A(vl,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),ri()}function hi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function vi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Ol?Ol[a](e):void 0}))}const gi=/(?:^|[-_])(\w)/g;function bi(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function yi(e,t,a=!1){let n=bi(t);if(!n&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(n=e[1])}if(!n&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};n=a(e.components||e.parent.type.components)||a(e.appContext.components)}return n?n.replace(gi,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const wi=(e,t)=>function(e,t,a=!1){let n,l;const s=ge(e);return s?(n=e,l=se):(n=e.get,l=e.set),new Aa(n,l,s||!l,a)}(e,0,di);function xi(){return null}function ki(){return null}function $i(e){}function Si(e,t){return null}function Ni(){return Ai().slots}function Ci(){return Ai().attrs}function Ai(){const e=si();return e.setupContext||(e.setupContext=hi(e))}function Ti(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const n=a[e];n?fe(n)||ge(n)?a[e]={type:n,default:t[e]}:n.default=t[e]:null===n&&(a[e]={default:t[e]})}return a}function Ei(e,t){const a={};for(const n in e)t.includes(n)||Object.defineProperty(a,n,{enumerable:!0,get:()=>e[n]});return a}function Pi(e){const t=si();let a=e();return ri(),xe(a)&&(a=a.catch((e=>{throw ii(t),e}))),[a,()=>ii(t)]}function Ui(e,t,a){const n=arguments.length;return 2===n?we(t)&&!fe(t)?Fs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(n>3?a=Array.prototype.slice.call(arguments,2):3===n&&Fs(a)&&(a=[a]),Hs(e,t,a))}const Mi=Symbol(""),Ii=()=>{{const e=Pn(Mi);return e||Ea("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Oi(){}function ji(e,t,a,n){const l=a[n];if(l&&Li(l,e))return l;const s=t();return s.memo=e.slice(),a[n]=s}function Li(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(je(a[e],t[e]))return!1;return Ms>0&&Es&&Es.push(e),!0}const Fi="3.2.37",Di="undefined"!=typeof document?document:null,Ri=Di&&Di.createElement("template"),zi={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,n)=>{const l=t?Di.createElementNS("http://www.w3.org/2000/svg",e):Di.createElement(e,a?{is:a}:void 0);return"select"===e&&n&&null!=n.multiple&&l.setAttribute("multiple",n.multiple),l},createText:e=>Di.createTextNode(e),createComment:e=>Di.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Di.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,n,l,s){const i=a?a.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),a),l!==s&&(l=l.nextSibling););else{Ri.innerHTML=n?`<svg>${e}</svg>`:e;const l=Ri.content;if(n){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,a)}return[i?i.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bi=/\s*!important$/;function Vi(e,t,a){if(fe(a))a.forEach((a=>Vi(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const n=function(e,t){const a=Hi[t];if(a)return a;let n=Pe(t);if("filter"!==n&&n in e)return Hi[t]=n;n=Ie(n);for(let a=0;a<qi.length;a++){const l=qi[a]+n;if(l in e)return Hi[t]=l}return t}(e,t);Bi.test(a)?e.setProperty(Me(n),a.replace(Bi,""),"important"):e[n]=a}}const qi=["Webkit","Moz","ms"],Hi={},Gi="http://www.w3.org/1999/xlink",[Wi,Ki]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Ji=0;const Yi=Promise.resolve(),Zi=()=>{Ji=0};function Xi(e,t,a,n){e.addEventListener(t,a,n)}const Qi=/(?:Once|Passive|Capture)$/,er=/^on[a-z]/;function tr(e,t){const a=Yn(e);class n extends lr{constructor(e){super(a,e,t)}}return n.def=a,n}const ar=e=>tr(e,no),nr="undefined"!=typeof HTMLElement?HTMLElement:class{};class lr extends nr{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(ao(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,n=!fe(t),l=t?n?Object.keys(t):t:[];let s;if(n)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=De(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=De(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,n=!0){t!==this._props[e]&&(this._props[e]=t,n&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Me(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Me(e),t+""):t||this.removeAttribute(Me(e))))}_update(){ao(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof lr){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function sr(e="$style"){{const t=si();if(!t)return ne;const a=t.type.__cssModules;if(!a)return ne;return a[e]||ne}}function ir(e){const t=si();if(!t)return;const a=()=>rr(t.subTree,e(t.proxy));Mn(a),pl((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),hl((()=>e.disconnect()))}))}function rr(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{rr(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)or(e.el,t);else if(e.type===Ss)e.children.forEach((e=>rr(e,t)));else if(e.type===As){let{el:a,anchor:n}=e;for(;a&&(or(a,t),a!==n);)a=a.nextSibling}}function or(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const cr=(e,{slots:t})=>Ui(Vn,fr(e),t);cr.displayName="Transition";const ur={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},dr=cr.props=ue({},Vn.props,ur),pr=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},_r=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function fr(e){const t={};for(const a in e)a in ur||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:n,duration:l,enterFromClass:s=`${a}-enter-from`,enterActiveClass:i=`${a}-enter-active`,enterToClass:r=`${a}-enter-to`,appearFromClass:o=s,appearActiveClass:c=i,appearToClass:u=r,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:p=`${a}-leave-active`,leaveToClass:_=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[mr(e.enter),mr(e.leave)];{const t=mr(e);return[t,t]}}(l),m=f&&f[0],h=f&&f[1],{onBeforeEnter:v,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=v,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{vr(e,t?u:r),vr(e,t?c:i),a&&a()},N=(e,t)=>{e._isLeaving=!1,vr(e,d),vr(e,_),vr(e,p),t&&t()},C=e=>(t,a)=>{const l=e?k:g,i=()=>S(t,e,a);pr(l,[t,i]),gr((()=>{vr(t,e?o:s),hr(t,e?u:r),_r(l)||yr(t,n,m,i)}))};return ue(t,{onBeforeEnter(e){pr(v,[e]),hr(e,s),hr(e,i)},onBeforeAppear(e){pr(x,[e]),hr(e,o),hr(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);hr(e,d),$r(),hr(e,p),gr((()=>{e._isLeaving&&(vr(e,d),hr(e,_),_r(y)||yr(e,n,h,a))})),pr(y,[e,a])},onEnterCancelled(e){S(e,!1),pr(b,[e])},onAppearCancelled(e){S(e,!0),pr($,[e])},onLeaveCancelled(e){N(e),pr(w,[e])}})}function mr(e){return De(e)}function hr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function vr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function gr(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let br=0;function yr(e,t,a,n){const l=e._endId=++br,s=()=>{l===e._endId&&n()};if(a)return setTimeout(s,a);const{type:i,timeout:r,propCount:o}=wr(e,t);if(!i)return n();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=o&&d()};setTimeout((()=>{u<o&&d()}),r+1),e.addEventListener(c,p)}function wr(e,t){const a=window.getComputedStyle(e),n=e=>(a[e]||"").split(", "),l=n("transitionDelay"),s=n("transitionDuration"),i=xr(l,s),r=n("animationDelay"),o=n("animationDuration"),c=xr(r,o);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=o.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:o.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function xr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>kr(t)+kr(e[a]))))}function kr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function $r(){return document.body.offsetHeight}const Sr=new WeakMap,Nr=new WeakMap,Cr={name:"TransitionGroup",props:ue({},dr,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=si(),n=zn();let l,s;return fl((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const n=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&n.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&n.classList.add(e))),n.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(n);const{hasTransform:s}=wr(n);return l.removeChild(n),s}(l[0].el,a.vnode.el,t))return;l.forEach(Ar),l.forEach(Tr);const n=l.filter(Er);$r(),n.forEach((e=>{const a=e.el,n=a.style;hr(a,t),n.transform=n.webkitTransform=n.transitionDuration="";const l=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",l),a._moveCb=null,vr(a,t))};a.addEventListener("transitionend",l)}))})),()=>{const i=oa(e),r=fr(i);let o=i.tag||Ss;l=s,s=t.default?Jn(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Kn(t,Hn(t,r,n,a))}if(l)for(let e=0;e<l.length;e++){const t=l[e];Kn(t,Hn(t,r,n,a)),Sr.set(t,t.el.getBoundingClientRect())}return Hs(o,null,s)}}};function Ar(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Tr(e){Nr.set(e,e.el.getBoundingClientRect())}function Er(e){const t=Sr.get(e),a=Nr.get(e),n=t.left-a.left,l=t.top-a.top;if(n||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${n}px,${l}px)`,t.transitionDuration="0s",e}}const Pr=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ur(e){e.target.composing=!0}function Mr(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Ir={created(e,{modifiers:{lazy:t,trim:a,number:n}},l){e._assign=Pr(l);const s=n||l.props&&"number"===l.props.type;Xi(e,t?"change":"input",(t=>{if(t.target.composing)return;let n=e.value;a&&(n=n.trim()),s&&(n=De(n)),e._assign(n)})),a&&Xi(e,"change",(()=>{e.value=e.value.trim()})),t||(Xi(e,"compositionstart",Ur),Xi(e,"compositionend",Mr),Xi(e,"change",Mr))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:n,number:l}},s){if(e._assign=Pr(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(n&&e.value.trim()===t)return;if((l||"number"===e.type)&&De(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Or={deep:!0,created(e,t,a){e._assign=Pr(a),Xi(e,"change",(()=>{const t=e._modelValue,a=Rr(e),n=e.checked,l=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(n&&!s)l(t.concat(a));else if(!n&&s){const a=[...t];a.splice(e,1),l(a)}}else if(he(t)){const e=new Set(t);n?e.add(a):e.delete(a),l(e)}else l(zr(e,n))}))},mounted:jr,beforeUpdate(e,t,a){e._assign=Pr(a),jr(e,t,a)}};function jr(e,{value:t,oldValue:a},n){e._modelValue=t,fe(t)?e.checked=ee(t,n.props.value)>-1:he(t)?e.checked=t.has(n.props.value):t!==a&&(e.checked=Q(t,zr(e,!0)))}const Lr={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Pr(a),Xi(e,"change",(()=>{e._assign(Rr(e))}))},beforeUpdate(e,{value:t,oldValue:a},n){e._assign=Pr(n),t!==a&&(e.checked=Q(t,n.props.value))}},Fr={deep:!0,created(e,{value:t,modifiers:{number:a}},n){const l=he(t);Xi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?De(Rr(e)):Rr(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Pr(n)},mounted(e,{value:t}){Dr(e,t)},beforeUpdate(e,t,a){e._assign=Pr(a)},updated(e,{value:t}){Dr(e,t)}};function Dr(e,t){const a=e.multiple;if(!a||fe(t)||he(t)){for(let n=0,l=e.options.length;n<l;n++){const l=e.options[n],s=Rr(l);if(a)l.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(Rr(l),t))return void(e.selectedIndex!==n&&(e.selectedIndex=n))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Rr(e){return"_value"in e?e._value:e.value}function zr(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Br={created(e,t,a){Vr(e,t,a,null,"created")},mounted(e,t,a){Vr(e,t,a,null,"mounted")},beforeUpdate(e,t,a,n){Vr(e,t,a,n,"beforeUpdate")},updated(e,t,a,n){Vr(e,t,a,n,"updated")}};function Vr(e,t,a,n,l){const s=function(e,t){switch(e){case"SELECT":return Fr;case"TEXTAREA":return Ir;default:switch(t){case"checkbox":return Or;case"radio":return Lr;default:return Ir}}}(e.tagName,a.props&&a.props.type)[l];s&&s(e,t,a,n)}const qr=["ctrl","shift","alt","meta"],Hr={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>qr.some((a=>e[`${a}Key`]&&!t.includes(a)))},Gr=(e,t)=>(a,...n)=>{for(let e=0;e<t.length;e++){const n=Hr[t[e]];if(n&&n(a,t))return}return e(a,...n)},Wr={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Kr=(e,t)=>a=>{if(!("key"in a))return;const n=Me(a.key);return t.some((e=>e===n||Wr[e]===n))?e(a):void 0},Jr={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Yr(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:n}){!t!=!a&&(n?t?(n.beforeEnter(e),Yr(e,!0),n.enter(e)):n.leave(e,(()=>{Yr(e,!1)})):Yr(e,t))},beforeUnmount(e,{value:t}){Yr(e,t)}};function Yr(e,t){e.style.display=t?e._vod:"none"}const Zr=ue({patchProp:(e,t,a,n,l=!1,s,i,r,o)=>{"class"===t?function(e,t,a){const n=e._vtc;n&&(t=(t?[t,...n]:[...n]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,n,l):"style"===t?function(e,t,a){const n=e.style,l=be(a);if(a&&!l){for(const e in a)Vi(n,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vi(n,e,"")}else{const s=n.display;l?t!==a&&(n.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(n.display=s)}}(e,a,n):oe(t)?ce(t)||function(e,t,a,n,l=null){const s=e._vei||(e._vei={}),i=s[t];if(n&&i)i.value=n;else{const[a,r]=function(e){let t;if(Qi.test(e)){let a;for(t={};a=e.match(Qi);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Me(e.slice(2)),t]}(t);if(n){const i=s[t]=function(e,t){const a=e=>{const n=e.timeStamp||Wi();(Ki||n>=a.attached-1)&&Ia(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Ji||(Yi.then(Zi),Ji=Wi()),a}(n,l);Xi(e,a,i,r)}else i&&(function(e,t,a,n){e.removeEventListener(t,a,n)}(e,a,i,r),s[t]=void 0)}}(e,t,0,n,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,n){return n?"innerHTML"===t||"textContent"===t||!!(t in e&&er.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!er.test(t)||!be(a))&&t in e))))}(e,t,n,l))?function(e,t,a,n,l,s,i){if("innerHTML"===t||"textContent"===t)return n&&i(n,l,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const n=null==a?"":a;return e.value===n&&"OPTION"!==e.tagName||(e.value=n),void(null==a&&e.removeAttribute(t))}let r=!1;if(""===a||null==a){const n=typeof e[t];"boolean"===n?a=V(a):null==a&&"string"===n?(a="",r=!0):"number"===n&&(a=0,r=!0)}try{e[t]=a}catch(e){}r&&e.removeAttribute(t)}(e,t,n,s,i,r,o):("true-value"===t?e._trueValue=n:"false-value"===t&&(e._falseValue=n),function(e,t,a,n,l){if(n&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Gi,t.slice(6,t.length)):e.setAttributeNS(Gi,t,a);else{const n=B(t);null==a||n&&!V(a)?e.removeAttribute(t):e.setAttribute(t,n?"":a)}}(e,t,n,l))}},zi);let Xr,Qr=!1;function eo(){return Xr||(Xr=ms(Zr))}function to(){return Xr=Qr?Xr:hs(Zr),Qr=!0,Xr}const ao=(...e)=>{eo().render(...e)},no=(...e)=>{to().hydrate(...e)},lo=(...e)=>{const t=eo().createApp(...e),{mount:a}=t;return t.mount=e=>{const n=io(e);if(!n)return;const l=t._component;ge(l)||l.render||l.template||(l.template=n.innerHTML),n.innerHTML="";const s=a(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),s},t},so=(...e)=>{const t=to().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=io(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function io(e){return be(e)?document.querySelector(e):e}const ro=se;var oo=Object.freeze({__proto__:null,render:ao,hydrate:no,createApp:lo,createSSRApp:so,initDirectivesForSSR:ro,defineCustomElement:tr,defineSSRCustomElement:ar,VueElement:lr,useCssModule:sr,useCssVars:ir,Transition:cr,TransitionGroup:Cr,vModelText:Ir,vModelCheckbox:Or,vModelRadio:Lr,vModelSelect:Fr,vModelDynamic:Br,withModifiers:Gr,withKeys:Kr,vShow:Jr,reactive:Qt,ref:ma,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:ra,isReactive:la,isReadonly:sa,isShallow:ia,customRef:$a,triggerRef:ba,shallowRef:ha,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:oa,effect:lt,stop:st,ReactiveEffect:at,effectScope:Ve,EffectScope:Be,getCurrentScope:He,onScopeDispose:Ge,computed:wi,watch:jn,watchEffect:Un,watchPostEffect:Mn,watchSyncEffect:In,onBeforeMount:dl,onMounted:pl,onBeforeUpdate:_l,onUpdated:fl,onBeforeUnmount:ml,onUnmounted:hl,onActivated:nl,onDeactivated:ll,onRenderTracked:bl,onRenderTriggered:gl,onErrorCaptured:yl,onServerPrefetch:vl,provide:En,inject:Pn,nextTick:Ja,defineComponent:Yn,defineAsyncComponent:Xn,useAttrs:Ci,useSlots:Ni,defineProps:xi,defineEmits:ki,defineExpose:$i,withDefaults:Si,mergeDefaults:Ti,createPropsRestProxy:Ei,withAsyncContext:Pi,getCurrentInstance:si,h:Ui,createVNode:Hs,cloneVNode:Ws,mergeProps:ei,isVNode:Fs,Fragment:Ss,Text:Ns,Comment:Cs,Static:As,Teleport:$s,Suspense:$n,KeepAlive:tl,BaseTransition:Vn,withDirectives:wl,useSSRContext:Ii,ssrContextKey:Mi,createRenderer:ms,createHydrationRenderer:hs,queuePostFlushCb:Qa,warn:Ea,handleError:Oa,callWithErrorHandling:Ma,callWithAsyncErrorHandling:Ia,resolveComponent:kl,resolveDirective:Nl,resolveDynamicComponent:Sl,registerRuntimeCompiler:_i,isRuntimeOnly:fi,useTransitionState:zn,resolveTransitionHooks:Hn,setTransitionHooks:Kn,getTransitionRawChildren:Jn,initCustomFormatter:Oi,get devtools(){return ln},setDevtoolsHook:rn,withCtx:vn,pushScopeId:fn,popScopeId:mn,withScopeId:hn,renderList:Tl,toHandlers:Ml,renderSlot:Pl,createSlots:El,withMemo:ji,isMemoSame:Li,openBlock:Ps,createBlock:Ls,setBlockTracking:Is,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:qs,createElementBlock:js,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Ie,toHandlerKey:Oe,normalizeProps:J,normalizeClass:K,normalizeStyle:q,transformVNodeArgs:Rs,version:Fi,ssrUtils:null,resolveFilter:null,compatUtils:null});function co(e){throw e}function uo(e){}function po(e,t,a,n){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const _o=Symbol(""),fo=Symbol(""),mo=Symbol(""),ho=Symbol(""),vo=Symbol(""),go=Symbol(""),bo=Symbol(""),yo=Symbol(""),wo=Symbol(""),xo=Symbol(""),ko=Symbol(""),$o=Symbol(""),So=Symbol(""),No=Symbol(""),Co=Symbol(""),Ao=Symbol(""),To=Symbol(""),Eo=Symbol(""),Po=Symbol(""),Uo=Symbol(""),Mo=Symbol(""),Io=Symbol(""),Oo=Symbol(""),jo=Symbol(""),Lo=Symbol(""),Fo=Symbol(""),Do=Symbol(""),Ro=Symbol(""),zo=Symbol(""),Bo=Symbol(""),Vo=Symbol(""),qo=Symbol(""),Ho=Symbol(""),Go=Symbol(""),Wo=Symbol(""),Ko=Symbol(""),Jo=Symbol(""),Yo=Symbol(""),Zo=Symbol(""),Xo={[_o]:"Fragment",[fo]:"Teleport",[mo]:"Suspense",[ho]:"KeepAlive",[vo]:"BaseTransition",[go]:"openBlock",[bo]:"createBlock",[yo]:"createElementBlock",[wo]:"createVNode",[xo]:"createElementVNode",[ko]:"createCommentVNode",[$o]:"createTextVNode",[So]:"createStaticVNode",[No]:"resolveComponent",[Co]:"resolveDynamicComponent",[Ao]:"resolveDirective",[To]:"resolveFilter",[Eo]:"withDirectives",[Po]:"renderList",[Uo]:"renderSlot",[Mo]:"createSlots",[Io]:"toDisplayString",[Oo]:"mergeProps",[jo]:"normalizeClass",[Lo]:"normalizeStyle",[Fo]:"normalizeProps",[Do]:"guardReactiveProps",[Ro]:"toHandlers",[zo]:"camelize",[Bo]:"capitalize",[Vo]:"toHandlerKey",[qo]:"setBlockTracking",[Ho]:"pushScopeId",[Go]:"popScopeId",[Wo]:"withCtx",[Ko]:"unref",[Jo]:"isRef",[Yo]:"withMemo",[Zo]:"isMemoSame"},Qo={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,n,l,s,i,r=!1,o=!1,c=!1,u=Qo){return e&&(r?(e.helper(go),e.helper(Tc(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),i&&e.helper(Eo)),{type:13,tag:t,props:a,children:n,patchFlag:l,dynamicProps:s,directives:i,isBlock:r,disableTracking:o,isComponent:c,loc:u}}function tc(e,t=Qo){return{type:17,loc:t,elements:e}}function ac(e,t=Qo){return{type:15,loc:t,properties:e}}function nc(e,t){return{type:16,loc:Qo,key:be(e)?lc(e,!0):e,value:t}}function lc(e,t=!1,a=Qo,n=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:n}}function sc(e,t=Qo){return{type:8,loc:t,children:e}}function ic(e,t=[],a=Qo){return{type:14,loc:a,callee:e,arguments:t}}function rc(e,t,a=!1,n=!1,l=Qo){return{type:18,params:e,returns:t,newline:a,isSlot:n,loc:l}}function oc(e,t,a,n=!0){return{type:19,test:e,consequent:t,alternate:a,newline:n,loc:Qo}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Me(t);function dc(e){return uc(e,"Teleport")?fo:uc(e,"Suspense")?mo:uc(e,"KeepAlive")?ho:uc(e,"BaseTransition")?vo:void 0}const pc=/^\d|[^\$\w]/,_c=e=>!pc.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,mc=/[\.\?\w$\xA0-\uFFFF]/,hc=/\s+[.[]\s*|\s*[.[]\s+/g,vc=e=>{e=e.trim().replace(hc,(e=>e.trim()));let t=0,a=[],n=0,l=0,s=null;for(let i=0;i<e.length;i++){const r=e.charAt(i);switch(t){case 0:if("["===r)a.push(t),t=1,n++;else if("("===r)a.push(t),t=2,l++;else if(!(0===i?fc:mc).test(r))return!1;break;case 1:"'"===r||'"'===r||"`"===r?(a.push(t),t=3,s=r):"["===r?n++:"]"===r&&(--n||(t=a.pop()));break;case 2:if("'"===r||'"'===r||"`"===r)a.push(t),t=3,s=r;else if("("===r)l++;else if(")"===r){if(i===e.length-1)return!1;--l||(t=a.pop())}break;case 3:r===s&&(t=a.pop(),s=null)}}return!n&&!l};function gc(e,t,a){const n={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(n.end=bc(e.start,e.source,t+a)),n}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let n=0,l=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(n++,l=e);return e.offset+=a,e.line+=n,e.column=-1===l?e.column+a:a-l,e}function wc(e,t,a=!1){for(let n=0;n<e.props.length;n++){const l=e.props[n];if(7===l.type&&(a||l.exp)&&(be(t)?l.name===t:t.test(l.name)))return l}}function xc(e,t,a=!1,n=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||n))return s}else if("bind"===s.name&&(s.exp||n)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wo:xo}function Tc(e,t){return e||t?bo:yo}const Ec=new Set([Fo,Do]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Ec.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Uc(e,t,a){let n,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||be(s))n=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Ro?n=ic(a.helper(Oo),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!n&&(n=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),n=s}else n=ic(a.helper(Oo),[ac([t]),s]),l&&l.callee===Do&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=n:e.props=n:l?l.arguments[0]=n:e.arguments[2]=n}function Mc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Ic(e,{helper:t,removeHelper:a,inSSR:n}){e.isBlock||(e.isBlock=!0,a(Ac(n,e.isComponent)),t(go),t(Tc(n,e.isComponent)))}const Oc=/&(gt|lt|amp|apos|quot);/g,jc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ie,isPreTag:ie,isCustomElement:ie,decodeEntities:e=>e.replace(Oc,((e,t)=>jc[t])),onError:co,onWarn:uo,comments:!1};function Fc(e,t,a){const n=Qc(a),l=n?n.ns:0,s=[];for(;!lu(e,t,a);){const i=e.source;let r;if(0===t||1===t)if(!e.inVPre&&eu(i,e.options.delimiters[0]))r=Kc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])r=eu(i,"\x3c!--")?zc(e):eu(i,"<!DOCTYPE")?Bc(e):eu(i,"<![CDATA[")&&0!==l?Rc(e,a):Bc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){tu(e,3);continue}if(/[a-z]/i.test(i[2])){Hc(e,1,n);continue}r=Bc(e)}else/[a-z]/i.test(i[1])?r=Vc(e,a):"?"===i[1]&&(r=Bc(e));if(r||(r=Jc(e,t)),fe(r))for(let e=0;e<r.length;e++)Dc(s,r[e]);else Dc(s,r)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const n=s[a];if(e.inPre||2!==n.type)3!==n.type||e.options.comments||(i=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(n.content))t&&(n.content=n.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],l=s[a+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(n.content))?(i=!0,s[a]=null):n.content=" "}}if(e.inPre&&n&&e.options.isPreTag(n.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Dc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Rc(e,t){tu(e,9);const a=Fc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const n=/--(\!)?>/.exec(e.source);if(n){a=e.source.slice(4,n.index);const t=e.source.slice(0,n.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)tu(e,s-l+1),l=s+1;tu(e,n.index+n[0].length-l+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function Bc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let n;const l=e.source.indexOf(">");return-1===l?(n=e.source.slice(a),tu(e,e.source.length)):(n=e.source.slice(a,l),tu(e,l+1)),{type:3,content:n,loc:Xc(e,t)}}function Vc(e,t){const a=e.inPre,n=e.inVPre,l=Qc(t),s=Hc(e,0,l),i=e.inPre&&!a,r=e.inVPre&&!n;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),r&&(e.inVPre=!1),s;t.push(s);const o=e.options.getTextMode(s,l),c=Fc(e,o,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),i&&(e.inPre=!1),r&&(e.inVPre=!1),s}const qc=R("if,else,else-if,for,slot");function Hc(e,t,a){const n=Zc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,a);tu(e,l[0].length),au(e);const r=Zc(e),o=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,r),e.source=o,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&qc(e.name)))&&(d=3):function(e,t,a){const n=a.options;if(n.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||n.isBuiltInComponent&&n.isBuiltInComponent(e)||n.isNativeTag&&!n.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,n),codegenNode:void 0}}function Gc(e,t){const a=[],n=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const l=Wc(e,n);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(l),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),n=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(n),t.add(n);{const e=/["'<]/g;for(;e.exec(n););}let l;tu(e,n.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),l=function(e){const t=Zc(e);let a;const n=e.source[0],l='"'===n||"'"===n;if(l){tu(e,1);const t=e.source.indexOf(n);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const n=/["'<=`]/g;for(;n.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:l,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(n)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(n);let i,r=eu(n,"."),o=t[1]||(r||eu(n,":")?"bind":eu(n,"@")?"on":"slot");if(t[2]){const l="slot"===o,s=n.lastIndexOf(t[2]),r=Xc(e,nu(e,a,s),nu(e,a,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:r}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return r&&c.push("prop"),{type:7,name:o,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&eu(n,"v-"),{type:6,name:n,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function Kc(e,t){const[a,n]=e.options.delimiters,l=e.source.indexOf(n,a.length);if(-1===l)return;const s=Zc(e);tu(e,a.length);const i=Zc(e),r=Zc(e),o=l-a.length,c=e.source.slice(0,o),u=Yc(e,o,t),d=u.trim(),p=u.indexOf(d);return p>0&&yc(i,c,p),yc(r,c,o-(u.length-d.length-p)),tu(e,n.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,i,r)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let n=e.source.length;for(let t=0;t<a.length;t++){const l=e.source.indexOf(a[t],1);-1!==l&&n>l&&(n=l)}const l=Zc(e);return{type:2,content:Yc(e,n,t),loc:Xc(e,l)}}function Yc(e,t,a){const n=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&n.includes("&")?e.options.decodeEntities(n,4===a):n}function Zc(e){const{column:t,line:a,offset:n}=e;return{column:t,line:a,offset:n}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function nu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function lu(e,t,a){const n=e.source;switch(t){case 0:if(eu(n,"</"))for(let e=a.length-1;e>=0;--e)if(su(n,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(n,e.tag))return!0;break}case 3:if(eu(n,"]]>"))return!0}return!n}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function iu(e,t){ou(e,t,ru(e,e.children[0]))}function ru(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ou(e,t,a=!1){const{children:n}=e,l=n.length;let s=0;for(let e=0;e<n.length;e++){const l=n[e];if(1===l.type&&0===l.tagType){const e=a?0:cu(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&pu(l,t)>=2){const a=_u(l);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&cu(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,ou(l,t),e&&t.scopes.vSlot--}else if(11===l.type)ou(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)ou(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(n,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const n=a.get(e);if(void 0!==n)return n;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(l))return a.set(e,0),0;{let n=3;const s=pu(e,t);if(0===s)return a.set(e,0),0;s<n&&(n=s);for(let l=0;l<e.children.length;l++){const s=cu(e.children[l],t);if(0===s)return a.set(e,0),0;s<n&&(n=s)}if(n>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=cu(s.exp,t);if(0===l)return a.set(e,0),0;l<n&&(n=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(go),t.removeHelper(Tc(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper(Ac(t.inSSR,l.isComponent))}return a.set(e,n),n}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const n=e.children[a];if(be(n)||ye(n))continue;const l=cu(n,t);if(0===l)return 0;l<s&&(s=l)}return s}}const uu=new Set([jo,Lo,Fo,Do]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function pu(e,t){let a=3;const n=_u(e);if(n&&15===n.type){const{properties:e}=n;for(let n=0;n<e.length;n++){const{key:l,value:s}=e[n],i=cu(l,t);if(0===i)return i;let r;if(i<a&&(a=i),r=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===r)return r;r<a&&(a=r)}}return a}function _u(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function mu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:n=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:r=null,isBuiltInComponent:o=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:m="",bindingMetadata:h=ne,inline:v=!1,isTS:g=!1,onError:b=co,onWarn:y=uo,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Ie(Pe(x[1])),prefixIdentifiers:a,hoistStatic:n,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:r,isBuiltInComponent:o,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:m,bindingMetadata:h,inline:v,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xo[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=lc(e)),k.hoists.push(e);const t=lc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qo}}(k.cached++,e,t)};return k}(e,t);hu(e,a),t.hoistStatic&&iu(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:n}=e;if(1===n.length){const a=n[0];if(ru(e,a)&&a.codegenNode){const n=a.codegenNode;13===n.type&&Ic(n,t),e.codegenNode=n}else e.codegenNode=a}else if(n.length>1){let n=64;e.codegenNode=ec(t,a(_o),void 0,e.children,n+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function hu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,n=[];for(let l=0;l<a.length;l++){const s=a[l](e,t);if(s&&(fe(s)?n.push(...s):n.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(ko);break;case 5:t.ssr||t.helper(Io);break;case 9:for(let a=0;a<e.branches.length;a++)hu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const n=()=>{a--};for(;a<e.children.length;a++){const l=e.children[a];be(l)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=n,hu(l,t))}}(e,t)}t.currentNode=e;let l=n.length;for(;l--;)n[l]()}function vu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,n)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some(Sc))return;const s=[];for(let i=0;i<l.length;i++){const r=l[i];if(7===r.type&&a(r.name)){l.splice(i,1),i--;const a=t(e,r,n);a&&s.push(a)}}return s}}}const gu=e=>`${Xo[e]}: _${Xo[e]}`;function bu(e,t,{helper:a,push:n,newline:l,isTS:s}){const i=a("component"===t?No:Ao);for(let a=0;a<e.length;a++){let r=e[a];const o=r.endsWith("__self");o&&(r=r.slice(0,-6)),n(`const ${Mc(r,t)} = ${i}(${JSON.stringify(r)}${o?", true":""})${s?"!":""}`),a<e.length-1&&l()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,n=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const r=e[i];be(r)?l(r):fe(r)?yu(r,t):xu(r,t),i<e.length-1&&(a?(n&&l(","),s()):n&&l(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:n,pure:l}=t;l&&a("/*#__PURE__*/"),a(`${n(Io)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:n,pure:l}=t;l&&a("/*#__PURE__*/"),a(`${n(ko)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:n,pure:l}=t,{tag:s,props:i,children:r,patchFlag:o,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&a(n(Eo)+"("),d&&a(`(${n(go)}(${p?"true":""}), `),l&&a("/*#__PURE__*/");a(n(d?Tc(t.inSSR,_):Ac(t.inSSR,_))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,r,o,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:n,pure:l}=t,s=be(e.callee)?e.callee:n(e.callee);l&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:n,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void a("{}",e);const r=i.length>1||!1;a(r?"{":"{ "),r&&n();for(let e=0;e<i.length;e++){const{key:n,value:l}=i[e];Su(n,t),a(": "),xu(l,t),e<i.length-1&&(a(","),s())}r&&l(),a(r?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:n,deindent:l}=t,{params:s,returns:i,body:r,newline:o,isSlot:c}=e;c&&a(`_${Xo[Wo]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(o||r)&&(a("{"),n()),i?(o&&a("return "),fe(i)?yu(i,t):xu(i,t)):r&&xu(r,t),(o||r)&&(l(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:n,alternate:l,newline:s}=e,{push:i,indent:r,deindent:o,newline:c}=t;if(4===a.type){const e=!_c(a.content);e&&i("("),ku(a,t),e&&i(")")}else i("("),xu(a,t),i(")");s&&r(),t.indentLevel++,s||i(" "),i("? "),xu(n,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,xu(l,t),u||t.indentLevel--,s&&o(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:n,indent:l,deindent:s,newline:i}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(l(),a(`${n(qo)}(-1),`),i()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),i(),a(`${n(qo)}(1),`),i(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:n}=e;t.push(n?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const n=e.children[a];be(n)?t.push(n):xu(n,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(_c(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=vu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,n){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=lc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=Cu(e,t),s={type:9,loc:e.loc,branches:[l]};if(a.replaceNode(s),n)return n(s,l,!0)}else{const l=a.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){a.removeNode();const l=Cu(e,t);i.branches.push(l);const s=n&&n(i,l,!1);hu(l,a),s&&s(),a.currentNode=null}break}a.removeNode(i)}}}(e,t,a,((e,t,n)=>{const l=a.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(n)e.codegenNode=Au(t,i,a);else{const n=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);n.alternate=Au(t,i+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?oc(e.condition,Tu(e,t,a),ic(a.helper(ko),['""',"true"])):Tu(e,t,a)}function Tu(e,t,a){const{helper:n}=a,l=nc("key",lc(`${t}`,!1,Qo,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Uc(e,l,a),e}{let t=64;return ec(a,n(_o),ac([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(r=e).type&&r.callee===Yo?r.arguments[1].returns:r;return 13===t.type&&Ic(t,a),Uc(t,l,a),e}var r}const Eu=vu("for",((e,t,a)=>{const{helper:n,removeHelper:l}=a;return function(e,t,a,n){if(!t.exp)return;const l=Iu(t.exp);if(!l)return;const{scopes:s}=a,{source:i,value:r,key:o,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:r,keyAlias:o,objectIndexAlias:c,parseResult:l,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=n&&n(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=ic(n(Po),[t.source]),i=Nc(e),r=wc(e,"memo"),o=xc(e,"key"),c=o&&(6===o.type?lc(o.value.content,!0):o.exp),u=o?nc("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:o?128:256;return t.codegenNode=ec(a,n(_o),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let o;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(o=f.codegenNode,i&&u&&Uc(o,u,a)):_?o=ec(a,n(_o),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(o=p[0].codegenNode,i&&u&&Uc(o,u,a),o.isBlock!==!d&&(o.isBlock?(l(go),l(Tc(a.inSSR,o.isComponent))):l(Ac(a.inSSR,o.isComponent))),o.isBlock=!d,o.isBlock?(n(go),n(Tc(a.inSSR,o.isComponent))):n(Ac(a.inSSR,o.isComponent))),r){const e=rc(ju(t.parseResult,[lc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",r.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zo)}(_cached, _memo)) return _cached`]),sc(["const _item = ",o]),lc("_item.memo = _memo"),lc("return _item")],loc:Qo},s.arguments.push(e,lc("_cache"),lc(String(a.cached++)))}else s.arguments.push(rc(ju(t.parseResult),o,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Mu=/^\(|\)$/g;function Iu(e,t){const a=e.loc,n=e.content,l=n.match(Pu);if(!l)return;const[,s,i]=l,r={source:Ou(a,i.trim(),n.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let o=s.trim().replace(Mu,"").trim();const c=s.indexOf(o),u=o.match(Uu);if(u){o=o.replace(Uu,"").trim();const e=u[1].trim();let t;if(e&&(t=n.indexOf(e,c+o.length),r.key=Ou(a,e,t)),u[2]){const l=u[2].trim();l&&(r.index=Ou(a,l,n.indexOf(l,r.key?t+e.length:c+o.length)))}}return o&&(r.value=Ou(a,o,c)),r}function Ou(e,t,a){return lc(t,!1,gc(e,a,t.length))}function ju({value:e,key:t,index:a},n=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||lc("_".repeat(t+1),!1)))}([e,t,a,...n])}const Lu=lc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Du=(e,t,a)=>rc(e,t,!1,!0,t.length?t[0].loc:a);function Ru(e,t,a=Du){t.helper(Wo);const{children:n,loc:l}=e,s=[],i=[];let r=t.scopes.vSlot>0||t.scopes.vFor>0;const o=wc(e,"slot",!0);if(o){const{arg:e,exp:t}=o;e&&!cc(e)&&(r=!0),s.push(nc(e||lc("default",!0),a(t,n,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<n.length;e++){const l=n[e];let _;if(!Nc(l)||!(_=wc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(o)break;c=!0;const{children:f,loc:m}=l,{arg:h=lc("default",!0),exp:v}=_;let g;cc(h)?g=h?h.content:"default":r=!0;const b=a(v,f,m);let y,w,x;if(y=wc(l,"if"))r=!0,i.push(oc(y.exp,zu(h,b),Lu));else if(w=wc(l,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=n[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){n.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?oc(w.exp,zu(h,b),Lu):zu(h,b)}}else if(x=wc(l,"for")){r=!0;const e=x.parseResult||Iu(x.exp);e&&i.push(ic(t.helper(Po),[e.source,rc(ju(e),zu(h,b),!0)]))}else{if(g){if(p.has(g))continue;p.add(g),"default"===g&&(u=!0)}s.push(nc(h,b))}}if(!o){const e=(e,t)=>nc("default",a(e,t,l));c?d.length&&d.some((e=>Vu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,n))}const _=r?2:Bu(e.children)?3:1;let f=ac(s.concat(nc("_",lc(_+"",!1))),l);return i.length&&(f=ic(t.helper(Mo),[f,tc(i)])),{slots:f,hasDynamicSlots:r}}function zu(e,t){return ac([nc("name",e),nc("fn",t)])}function Bu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||Bu(a.children))return!0;break;case 9:if(Bu(a.branches))return!0;break;case 10:case 11:if(Bu(a.children))return!0}}return!1}function Vu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Vu(e.content))}const qu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:n}=e,l=1===e.tagType;let s=l?function(e,t,a=!1){let{tag:n}=e;const l=Ju(n),s=xc(e,"is");if(s)if(l){const e=6===s.type?s.value&&lc(s.value.content,!0):s.exp;if(e)return ic(t.helper(Co),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(n=s.value.content.slice(4));const i=!l&&wc(e,"is");if(i&&i.exp)return ic(t.helper(Co),[i.exp]);const r=dc(n)||t.isBuiltInComponent(n);return r?(a||t.helper(r),r):(t.helper(No),t.components.add(n),Mc(n,"component"))}(e,t):`"${a}"`;const i=we(s)&&s.callee===Co;let r,o,c,u,d,p,_=0,f=i||s===fo||s===mo||!l&&("svg"===a||"foreignObject"===a);if(n.length>0){const a=Gu(e,t,void 0,l,i);r=a.props,_=a.patchFlag,d=a.dynamicPropNames;const n=a.directives;p=n&&n.length?tc(n.map((e=>function(e,t){const a=[],n=qu.get(e);n?a.push(t.helperString(n)):(t.helper(Ao),t.directives.add(e.name),a.push(Mc(e.name,"directive")));const{loc:l}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=lc("true",!1,l);a.push(ac(e.modifiers.map((e=>nc(e,t))),l))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===ho&&(f=!0,_|=1024),l&&s!==fo&&s!==ho){const{slots:a,hasDynamicSlots:n}=Ru(e,t);o=a,n&&(_|=1024)}else if(1===e.children.length&&s!==fo){const a=e.children[0],n=a.type,l=5===n||8===n;l&&0===cu(a,t)&&(_|=1),o=l||2===n?a:e.children}else o=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let a=0,n=e.length;a<n;a++)t+=JSON.stringify(e[a]),a<n-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,r,o,c,u,p,!!f,!1,l,e.loc)};function Gu(e,t,a=e.props,n,l,s=!1){const{tag:i,loc:r,children:o}=e;let c=[];const u=[],d=[],p=o.length>0;let _=!1,f=0,m=!1,h=!1,v=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,i=oe(s);if(!i||n&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),i&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?m=!0:"class"===s?h=!0:"style"===s?v=!0:"key"===s||w.includes(s)||w.push(s),!n||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let n=0;n<a.length;n++){const l=a[n];if(6===l.type){const{loc:e,name:a,value:n}=l;let s=!0;if("ref"===a&&(m=!0,t.scopes.vFor>0&&c.push(nc(lc("ref_for",!0),lc("true")))),"is"===a&&(Ju(i)||n&&n.content.startsWith("vue:")))continue;c.push(nc(lc(a,!0,gc(e,0,a.length)),lc(n?n.content:"",s,n?n.loc:e)))}else{const{name:a,arg:n,exp:o,loc:f}=l,m="bind"===a,h="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||m&&kc(n,"is")&&Ju(i))continue;if(h&&s)continue;if((m&&kc(n,"key")||h&&p&&kc(n,"vue:before-update"))&&(_=!0),m&&kc(n,"ref")&&t.scopes.vFor>0&&c.push(nc(lc("ref_for",!0),lc("true"))),!n&&(m||h)){b=!0,o&&(c.length&&(u.push(ac(Wu(c),r)),c=[]),u.push(m?o:{type:14,loc:f,callee:t.helper(Ro),arguments:[o]}));continue}const v=t.directiveTransforms[a];if(v){const{props:a,needRuntime:n}=v(l,e,t);!s&&a.forEach(x),c.push(...a),n&&(d.push(l),ye(n)&&qu.set(l,n))}else Ae(a)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),r)),k=u.length>1?ic(t.helper(Oo),u,r):u[0]):c.length&&(k=ac(Wu(c),r)),b?f|=16:(h&&!n&&(f|=2),v&&!n&&(f|=4),w.length&&(f|=8),g&&(f|=32)),_||0!==f&&32!==f||!(m||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,n=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;cc(l)?"class"===l.content?e=t:"style"===l.content&&(a=t):l.isHandlerKey||(n=!0)}const l=k.properties[e],s=k.properties[a];n?k=ic(t.helper(Fo),[k]):(l&&!cc(l.value)&&(l.value=ic(t.helper(jo),[l.value])),s&&(v||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=ic(t.helper(Lo),[s.value])));break;case 14:break;default:k=ic(t.helper(Fo),[ic(t.helper(Do),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Wu(e){const t=new Map,a=[];for(let n=0;n<e.length;n++){const l=e[n];if(8===l.key.type||!l.key.isStatic){a.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||oe(s))&&Ku(i,l):(t.set(s,l),a.push(l))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:n}=e,{slotName:l,slotProps:s}=function(e,t){let a,n='"default"';const l=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?n=JSON.stringify(a.value.content):(a.name=Pe(a.name),l.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(n=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),l.push(a))}if(l.length>0){const{props:n,directives:s}=Gu(e,t,l,!1,!1);a=n}return{slotName:n,slotProps:a}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let r=2;s&&(i[2]=s,r=3),a.length&&(i[3]=rc([],a,!1,!1,n),r=4),t.scopeId&&!t.slotted&&(r=5),i.splice(r),e.codegenNode=ic(t.helper(Uo),i,n)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,n)=>{const{loc:l,modifiers:s,arg:i}=e;let r;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),r=lc(Oe(Pe(e)),!0,i.loc)}else r=sc([`${a.helperString(Vo)}(`,i,")"]);else r=i,r.children.unshift(`${a.helperString(Vo)}(`),r.children.push(")");let o=e.exp;o&&!o.content.trim()&&(o=void 0);let c=a.cacheHandlers&&!o&&!a.inVOnce;if(o){const e=vc(o.content),t=!(e||Zu.test(o.content)),a=o.content.includes(";");(t||c&&e)&&(o=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,o,a?"}":")"]))}let u={props:[nc(r,o||lc("() => {}",!1,l))]};return n&&(u=n(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:n,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Pe(i.content):`${a.helperString(zo)}(${i.content})`:(i.children.unshift(`${a.helperString(zo)}(`),i.children.push(")"))),a.inSSR||(l.includes("prop")&&ed(i,"."),l.includes("attr")&&ed(i,"^")),!n||4===n.type&&!n.content.trim()?{props:[nc(i,lc("",!0,s))]}:{props:[nc(i,n)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let n,l=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){l=!0;for(let l=e+1;l<a.length;l++){const s=a[l];if(!$c(s)){n=void 0;break}n||(n=a[e]=sc([t],t.loc)),n.children.push(" + ",s),a.splice(l,1),l--}}}if(l&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const n=a[e];if($c(n)||8===n.type){const l=[];2===n.type&&" "===n.content||l.push(n),t.ssr||0!==cu(n,t)||l.push("1"),a[e]={type:12,content:n,loc:n.loc,codegenNode:ic(t.helper($o),l)}}}}},ad=new WeakSet,nd=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(qo),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},ld=(e,t,a)=>{const{exp:n,arg:l}=e;if(!n)return sd();const s=n.loc.source,i=4===n.type?n.content:s;if(!i.trim()||!vc(i))return sd();const r=l||lc("modelValue",!0),o=l?cc(l)?`onUpdate:${l.content}`:sc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",n,") = $event)"]);const u=[nc(r,e.exp),nc(o,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(_c(e)?e:JSON.stringify(e))+": true")).join(", "),a=l?cc(l)?`${l.content}Modifiers`:sc([l,' + "Modifiers"']):"modelModifiers";u.push(nc(a,lc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const id=new WeakSet,rd=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||id.has(e))return;return id.add(e),()=>{const n=e.codegenNode||t.currentNode.codegenNode;n&&13===n.type&&(1!==e.tagType&&Ic(n,t),e.codegenNode=ic(t.helper(Yo),[a.exp,rc(void 0,n),"_cache",String(t.cached++)]))}}};function od(e,t={}){const a=t.onError||co,n="module"===t.mode;!0===t.prefixIdentifiers?a(po(46)):n&&a(po(47)),t.cacheHandlers&&a(po(48)),t.scopeId&&!n&&a(po(49));const l=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let n;for(n in t)a[n]=void 0===t[n]?Lc[n]:t[n];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),n=Zc(a);return function(e,t=Qo){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Xc(a,n))}(e,t):e,[s,i]=[[nd,Nu,rd,Eu,Yu,Hu,Fu,td],{on:Xu,bind:Qu,model:ld}];return mu(l,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},i,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:n=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:r="Vue",runtimeModuleName:o="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:a,sourceMap:n,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:r,runtimeModuleName:o,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xo[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:n,push:l,prefixIdentifiers:s,indent:i,deindent:r,newline:o,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==n;if(function(e,t){const{push:a,newline:n,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wo,xo,ko,$o,So].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:n}=t;n();for(let l=0;l<e.length;l++){const s=e[l];s&&(a(`const _hoisted_${l+1} = `),xu(s,t),n())}t.pure=!1}(e.hoists,t),n(),a("return ")}(e,a),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),l("\n"),o())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&o()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&o()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),o()),c||l("return "),e.codegenNode?xu(e.codegenNode,a):l("null"),d&&(r(),l("}")),r(),l("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(l,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol(""),md=Symbol(""),hd=Symbol(""),vd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[pd]:"vModelSelect",[_d]:"vModelDynamic",[fd]:"withModifiers",[md]:"withKeys",[hd]:"vShow",[vd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xo[e]=bd[e]}));const wd=R("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?vd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return lc(JSON.stringify(a),!1,t,3)},$d=R("passive,once,capture"),Sd=R("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=R("left,right"),Cd=R("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?lc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Td=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Ed=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:lc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:n,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(lc("innerHTML",!0,l),n||lc("",!0))]}},text:(e,t,a)=>{const{exp:n,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[nc(lc("textContent",!0),n?cu(n,a)>0?n:ic(a.helperString(Io),[n],l):lc("",!0))]}},model:(e,t,a)=>{const n=ld(e,t,a);if(!n.props.length||1===t.tagType)return n;const{tag:l}=t,s=a.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=dd,i=!1;if("input"===l||s){const a=xc(t,"type");if(a){if(7===a.type)e=_d;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=_d)}else"select"===l&&(e=pd);i||(n.needRuntime=a.helper(e))}return n.props=n.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),n},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:n}=e;if(!n.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:r,eventOptionModifiers:o}=((e,t,a,n)=>{const l=[],s=[],i=[];for(let a=0;a<t.length;a++){const n=t[a];$d(n)?i.push(n):Nd(n)?cc(e)?Cd(e.content)?l.push(n):s.push(n):(l.push(n),s.push(n)):Sd(n)?s.push(n):l.push(n)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,n);if(r.includes("right")&&(l=Ad(l,"onContextmenu")),r.includes("middle")&&(l=Ad(l,"onMouseup")),r.length&&(s=ic(a.helper(fd),[s,JSON.stringify(r)])),!i.length||cc(l)&&!Cd(l.content)||(s=ic(a.helper(md),[s,JSON.stringify(i)])),o.length){const e=o.map(Ie).join("");l=cc(l)?lc(`${l.content}${e}`,!0):sc(["(",l,`) + "${e}"`])}return{props:[nc(l,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(hd)})},Ud=Object.create(null);function Md(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,n=Ud[a];if(n)return n;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return od(e,ue({},xd,t,{nodeTransforms:[Td,...Ed,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",l)(oo);return s._rc=!0,Ud[a]=s}_i(Md);var Id=Object.freeze({__proto__:null,BaseTransition:Vn,Comment:Cs,EffectScope:Be,Fragment:Ss,KeepAlive:tl,ReactiveEffect:at,Static:As,Suspense:$n,Teleport:$s,Text:Ns,Transition:cr,TransitionGroup:Cr,VueElement:lr,callWithAsyncErrorHandling:Ia,callWithErrorHandling:Ma,camelize:Pe,capitalize:Ie,cloneVNode:Ws,compatUtils:null,compile:Md,computed:wi,createApp:lo,createBlock:Ls,createCommentVNode:Ys,createElementBlock:js,createElementVNode:qs,createHydrationRenderer:hs,createPropsRestProxy:Ei,createRenderer:ms,createSSRApp:so,createSlots:El,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Xn,defineComponent:Yn,defineCustomElement:tr,defineEmits:ki,defineExpose:$i,defineProps:xi,defineSSRCustomElement:ar,get devtools(){return ln},effect:lt,effectScope:Ve,getCurrentInstance:si,getCurrentScope:He,getTransitionRawChildren:Jn,guardReactiveProps:Gs,h:Ui,handleError:Oa,hydrate:no,initCustomFormatter:Oi,initDirectivesForSSR:ro,inject:Pn,isMemoSame:Li,isProxy:ra,isReactive:la,isReadonly:sa,isRef:fa,isRuntimeOnly:fi,isShallow:ia,isVNode:Fs,markRaw:ca,mergeDefaults:Ti,mergeProps:ei,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:q,onActivated:nl,onBeforeMount:dl,onBeforeUnmount:ml,onBeforeUpdate:_l,onDeactivated:ll,onErrorCaptured:yl,onMounted:pl,onRenderTracked:bl,onRenderTriggered:gl,onScopeDispose:Ge,onServerPrefetch:vl,onUnmounted:hl,onUpdated:fl,openBlock:Ps,popScopeId:mn,provide:En,proxyRefs:xa,pushScopeId:fn,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:ma,registerRuntimeCompiler:_i,render:ao,renderList:Tl,renderSlot:Pl,resolveComponent:kl,resolveDirective:Nl,resolveDynamicComponent:Sl,resolveFilter:null,resolveTransitionHooks:Hn,setBlockTracking:Is,setDevtoolsHook:rn,setTransitionHooks:Kn,shallowReactive:ea,shallowReadonly:aa,shallowRef:ha,ssrContextKey:Mi,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:Oe,toHandlers:Ml,toRaw:oa,toRef:Ca,toRefs:Sa,transformVNodeArgs:Rs,triggerRef:ba,unref:ya,useAttrs:Ci,useCssModule:sr,useCssVars:ir,useSSRContext:Ii,useSlots:Ni,useTransitionState:zn,vModelCheckbox:Or,vModelDynamic:Br,vModelRadio:Lr,vModelSelect:Fr,vModelText:Ir,vShow:Jr,version:Fi,warn:Ea,watch:jn,watchEffect:Un,watchPostEffect:Mn,watchSyncEffect:In,withAsyncContext:Pi,withCtx:vn,withDefaults:Si,withDirectives:wl,withKeys:Kr,withMemo:ji,withModifiers:Gr,withScopeId:hn}),Od={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let n=this;this.chart.registerEvent("zoomed",(function(e,t){n.on_zoomed(e,t)}));let l=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,l)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const n=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(n.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const jd={style:{width:"100%"},ref:"chart"};Od.render=function(e,t,a,n,l,s){return Ps(),js("div",jd,null,512)},Od.__file="http_src/vue/chart.vue";const Ld=["selected","value","disabled"],Fd=["label"],Dd=["selected","value","disabled"];var Rd={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null),s=ma([]),i=ma([]),r=ma({});function o(){return null==n.selected_option?n.options[0]:n.selected_option}function c(e){null==e&&(e=o()),r.value=e,null==r.value.value&&(r.value.value=e.label)}function u(e){let t;return null==e&&(e=o()),t=e.value?e.value:e.label,t}jn((()=>n.selected_option),((e,t)=>{c(e);let a=l.value,n=u(e);$(a).val(n),$(a).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==n.options)return;let e={};n.options.forEach((t=>{let a={...t};0!=a.value&&"0"!=a.value||(a.value=null),null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),i.value=ntopng_utility.object_to_array(e)}(),c()}jn((()=>n.options),((e,t)=>{1!=n.disable_change&&null!=e&&p()}),{flush:"pre"}),pl((()=>{n.options&&(n.disable_change&&d||p())})),jn([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<i.value.length;a+=1)if(t=i.value[a].options.find((t=>t.value==e)),null!=t)return t;return null}(t),r=n.options.find((e=>e.label==l.label));t!=n.selected_option&&(a("update:selected_option",r),a("select_option",r))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),ml((()=>{f()})),(e,t)=>(Ps(),js("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(Ps(!0),js(Ss,null,Tl(s.value,((e,t)=>(Ps(),js("option",{class:"ntopng-dropdown-min-width no-wrap",selected:e.value==r.value.value,value:e.value,disabled:e.disabled},te(e.label),9,Ld)))),256)),(Ps(!0),js(Ss,null,Tl(i.value,((e,t)=>(Ps(),js("optgroup",{label:e.group},[(Ps(!0),js(Ss,null,Tl(e.options,((e,t)=>(Ps(),js("option",{selected:e.value==r.value.value,value:e.value,disabled:e.disabled},te(e.label),9,Dd)))),256))],8,Fd)))),256))],512))},__file:"http_src/vue/select-search.vue"},zd={components:{"select-search":Rd},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let a=this,n=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,n){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=n("begin-date"),this.flat_end_date=n("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),n=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(n+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),n=e.getTimezoneOffset(),l=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(l+n)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let a=this.get_select_values();const n=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,n)?this.is_between(i,l-a.min_5,n)?this.select_time_value="min_5":this.is_between(i,l-a.min_30,n)?this.select_time_value="min_30":this.is_between(i,l-a.hour,n)?this.select_time_value="hour":this.is_between(i,l-a.day,n)?this.select_time_value="day":this.is_between(i,l-a.week,n)?this.select_time_value="week":this.is_between(i,l-a.month,n)?this.select_time_value="month":this.is_between(i,l-a.year,n)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),n=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(n.getTime());l>e&&(l=e);let s={epoch_begin:a,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_select_values()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),n={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(n)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,a){return e>=t-a&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let n=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>n&&(this.epoch_status.epoch_end=n),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const Bd=e=>(fn("data-v-bc6f1430"),e=e(),mn(),e),Vd={class:"input-group"},qd={class:"form-group"},Hd={class:"controls d-flex flex-wrap"},Gd={class:"btn-group me-auto btn-group-sm"},Wd={class:"btn-group ms-2"},Kd=Bd((()=>qs("span",{class:"input-group-text"},[qs("i",{class:"fas fa-calendar-alt"})],-1))),Jd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Yd=Bd((()=>qs("span",{class:"input-group-text"},[qs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Zd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Xd=["title"],Qd=[Bd((()=>qs("i",{class:"fas fa-exclamation-circle"},null,-1)))],ep={class:"d-flex align-items-center ms-2"},tp=["disabled"],ap={class:"btn-group"},np=["title"],lp=[Bd((()=>qs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],sp=["title"],ip=[Bd((()=>qs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],rp=["title"],op=[Bd((()=>qs("i",{class:"fas fa-search-plus"},null,-1)))],cp=["title"],up=[Bd((()=>qs("i",{class:"fas fa-search-minus"},null,-1)))],dp=["disabled","title"],pp=[Bd((()=>qs("i",{class:"fas fa-undo"},null,-1)))],_p=["disabled","title"],fp=[Bd((()=>qs("i",{class:"fas fa-sync"},null,-1)))];function mp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===a&&n.firstChild?n.insertBefore(l,n.firstChild):n.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}mp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),zd.render=function(e,t,a,n,l,s){const i=kl("select-search");return Ps(),js("div",Vd,[qs("div",qd,[qs("div",Hd,[qs("div",Gd,[Pl(e.$slots,"begin"),Hs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["selected_option","options"]),qs("div",Wd,[Kd,qs("input",Jd,null,512),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Yd,qs("input",Zd,null,512),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wl(qs("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Qd,8,Xd),[[Jr,l.wrong_date]])]),qs("div",ep,[qs("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},te(l.i18n("apply")),9,tp),qs("div",ap,[qs("button",{onClick:t[3]||(t[3]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},lp,8,np),qs("button",{onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},ip,8,sp),qs("button",{onClick:t[5]||(t[5]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},op,8,rp),qs("button",{onClick:t[6]||(t[6]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},up,8,cp),qs("button",{disabled:null==l.history_last_status,onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},pp,8,dp),qs("button",{disabled:"custom"==l.select_time_value,onClick:t[8]||(t[8]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},fp,8,_p),Pl(e.$slots,"extra_buttons")])])])])])])},zd.__scopeId="data-v-bc6f1430",zd.__file="http_src/vue/data-time-range-picker.vue";var hp=Yn({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const vp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},gp={class:"modal-content"},bp={class:"modal-header"},yp={class:"modal-title"},wp=qs("div",{class:"modal-close"},[qs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),xp={class:"modal-body"},kp={class:"modal-footer"},$p=qs("div",{class:"mr-auto"},null,-1),Sp=qs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);hp.render=function(e,t,a,n,l,s){return Ps(),js("div",{onSubmit:t[0]||(t[0]=Gr(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[qs("div",vp,[qs("div",gp,[qs("div",bp,[qs("h5",yp,[Pl(e.$slots,"title")]),wp]),qs("div",xp,[Pl(e.$slots,"body")]),qs("div",kp,[$p,Pl(e.$slots,"footer"),Sp])])])],544)},hp.__file="http_src/vue/modal.vue";const Np=e=>(fn("data-v-089b0491"),e=e(),mn(),e),Cp=Np((()=>qs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[qs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Ap={class:"nav nav-tabs"},Tp=["disabled"],Ep={key:0,style:{"min-height":"8.5rem"}},Pp={class:"form-group ms-2 me-2 mt-3 row"},Up={class:"col-form-label col-sm-4"},Mp={class:"col-sm-6"},Ip=["pattern"],Op={key:1,style:{"min-height":"8.5rem"}},jp={class:"form-group ms-2 me-2 mt-3 row"},Lp={class:"col-form-label col-sm-4"},Fp={class:"col-sm-8"},Dp={value:"name"},Rp={value:"date"},zp={class:"form-group ms-2 me-2 mt-3 row"},Bp={class:"col-form-label col-sm-4"},Vp={class:"col-sm-8"},qp=["value"],Hp={class:"form-group ms-2 me-2 mt-3 row"},Gp={class:"custom-control custom-switch"},Wp={class:"custom-control-label ms-1 form-check-label"},Kp=["disabled"],Jp=["disabled"],Yp=["disabled"];var Zp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null),s=ma("add"),i=ma(""),r=ma(!1),o=ma(""),c=ma(!0),u=ma(""),d=ma(""),p=ma([]),_=ma("date");let f=NtopUtils.REGEXES.singleword;const m=wi((()=>!new RegExp(f).test(d.value))),h=wi((()=>""==i.value));function v(){if(null!=n.page)return n.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),g=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=v(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=n.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==r.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:v()};l.csrf=n.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,r.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,n),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,a),l=l.replace(/\%end_time/,n),o.value=l,y){y=!1;let e=v(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(a)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),pl((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ps(),Ls(hp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(S("snapshots.manage"))+" ",1),Cp])),body:vn((()=>[qs("ul",Ap,[qs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[qs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),qs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[qs("a",{disabled:0==p.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},te(S("snapshots.manage")),11,Tp)])]),"add"==s.value?(Ps(),js("div",Ep,[qs("div",Pp,[qs("label",Up,[qs("b",null,te(S("snapshots.name"))+":",1)]),qs("div",Mp,[wl(qs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Ip),[[Ir,d.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==s.value?(Ps(),js("div",Op,[qs("div",jp,[qs("label",Lp,[qs("b",null,te(S("snapshots.order_by")),1)]),qs("div",Fp,[wl(qs("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[qs("option",Dp,te(S("snapshots.name")),1),qs("option",Rp,te(S("snapshots.date")),1)],512),[[Fr,_.value]])])]),qs("div",zp,[qs("label",Bp,[qs("b",null,te(S("snapshots.select")),1)]),qs("div",Vp,[wl(qs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Ps(!0),js(Ss,null,Tl(p.value,(e=>(Ps(),js("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,qp)))),256))],512),[[Fr,i.value]])])]),qs("div",Hp,[qs("div",Gp,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>r.value=e)},null,512),[[Or,r.value]]),qs("label",Wp,te(o.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:vn((()=>["add"==s.value?(Ps(),js("button",{key:0,type:"button",onClick:w,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.add")),9,Kp)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:2,type:"button",onClick:k,disabled:ya(h),class:"btn btn-danger"},te(S("snapshots.delete")),9,Jp)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:3,type:"button",onClick:x,disabled:ya(h),class:"btn btn-primary"},te(S("snapshots.apply")),9,Yp)):Ys("v-if",!0)])),_:1},512))}};mp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Zp.__scopeId="data-v-089b0491",Zp.__file="http_src/vue/modal-snapshot.vue";const Xp=e=>(fn("data-v-185590b6"),e=e(),mn(),e),Qp={class:"form-group ms-2 me-2 mt-3 row"},e_={class:"col-11"},t_={class:"col-form-label"},a_=[Xp((()=>qs("button",{type:"button",class:"btn border"},[qs("span",null,[qs("i",{class:"fas fa-trash"})])],-1)))],n_={class:"container"},l_={class:"row custom-ms me-2 mt-1"},s_={class:"col-5"},i_=["onUpdate:modelValue"],r_={class:"custom-control-label ms-1 form-check-label"},o_={class:"col-2"},c_=["onUpdate:modelValue"],u_=Xp((()=>qs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),d_={class:"col-2"},p_=["onUpdate:modelValue"],__=Xp((()=>qs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),f_={class:"col-3"},m_=["onUpdate:modelValue"],h_=Xp((()=>qs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var v_={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function n(){t("update:timeseries",a.timeseries)}function l(){t("delete_ts",a.id)}return(t,a)=>(Ps(),js("div",null,[qs("div",Qp,[qs("div",e_,[qs("label",t_,[qs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),js("div",{key:0,class:"col-1",onClick:l},a_)):Ys("v-if",!0)]),qs("div",n_,[(Ps(!0),js(Ss,null,Tl(e.timeseries,(e=>(Ps(),js("div",l_,[qs("div",s_,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.raw=t},null,40,i_),[[Or,e.raw]]),qs("label",r_,te(e.label),1)]),qs("div",o_,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.past=t},null,40,c_),[[Or,e.past]]),u_]),qs("div",d_,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.avg=t},null,40,p_),[[Or,e.avg]]),__]),qs("div",f_,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.perc_95=t},null,40,m_),[[Or,e.perc_95]]),h_])])))),256))])]))}};mp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),v_.__scopeId="data-v-185590b6",v_.__file="http_src/vue/list-timeseries.vue";const g_=m.getFormatter(m.types.bytes.id),b_="page-stats-action-link",y_="page-stats-action-jump-historical",w_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:b_,render:function(e,t,a){let n=this,l={handlerId:b_,onClick:function(){let e=`top:${a.ts_schema}`;n.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:y_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l={handlerId:y_,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}&${e}`,l=n.source_type,s=n.source_array,i="",r=l.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=r.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},x_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:b_,render:function(e,t,a){let n=this,l={handlerId:b_,onClick:function(){let e=`top:${a.ts_schema}`;n.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:y_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l={handlerId:y_,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}&${e}`,l=n.source_type,s=n.source_array,i="",r=l.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=r.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},k_=[w_,x_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:b_,render:function(e,t,a){let n=this,l=e.label,s="",i={handlerId:b_,onClick:async function(){n.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return n.sources_types_enabled.host&&e.is_local&&(l=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:y_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l=a.host.id,s=a.host.is_local,i={handlerId:y_,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`,t="",l=[];for(let e in a.tags){let t=a.tags[e],n="";"ifid"==e?n=x.serialize_param(e,t):"host"==e&&(n=x.serialize_param("ip",`${t};eq`)),l.push(n)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},r={handlerId:y_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;window.open(t)}},o=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return n.sources_types_enabled.host&&s&&o.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:r}),F.createActionButtons(o)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:b_,render:function(e,t,a){let n=this,l=e.label,s="",i={handlerId:b_,onClick:async function(){n.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return n.sources_types_enabled.host&&e.is_local&&(l=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>g_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:y_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l=a.host.id,s=a.host.is_local,i={handlerId:y_,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`,t="",l=[];for(let e in a.tags){let t=a.tags[e],n="";"ifid"==e?n=x.serialize_param(e,t):"host"==e&&(n=x.serialize_param("ip",`${t};eq`)),l.push(n)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},r={handlerId:y_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;window.open(t)}},o=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return n.sources_types_enabled.host&&s&&o.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:r}),F.createActionButtons(o)}}]}];let $_=k_.find((e=>"top_protocols"==e.view));null!=$_&&($_=b.clone($_),$_.table_value="host");const S_=[$_],N_=m.getFormatter(m.types.bytes.id),C_=m.getFormatter(m.types.bps.id),A_="page-stats-action-link",T_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let n=0;n<a.length;n+=1)if("device"==a[n].value){t=e.source_array[n].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:A_,render:function(e,t,a){let n=this,l={handlerId:A_,onClick:function(){n.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return F.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>N_(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>N_(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>N_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>C_(e)}]},E_=[T_],P_={hide:"hide",select:"select",input:"input"},U_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},M_={interface:k_,host:S_,snmp_interface:E_,snmp_device:E_},I_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:P_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:P_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:P_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:P_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:P_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:P_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:P_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:P_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:P_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:P_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:P_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:P_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:P_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:P_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:P_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:P_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:P_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:P_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:P_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:P_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:P_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:P_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:P_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:P_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:P_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:P_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:P_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:P_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:P_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:P_.input}]}],O_={ui_types:P_,sources_url_el_to_source:U_,sources_types:I_,sources_types_tables:M_},j_=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let n=t.join("|"),l=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${l};${a};${n}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const L_=(e,t,a)=>{let n=R_(e,t,a),l=[];for(let e in a.timeseries){let t=a.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:n,source_type:e,source_array:t,metric:a,timeseries:l}},F_=async(e,t,a)=>{let n=ef(),l=await q_(e,n),s=await Q_(e,n,l),i=nf(s,t,a);return[L_(n,l,i)]};async function D_(e){let t=e.split(";"),a=t[0],n=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=V_(a),r=await G_(http_prefix,i,n),o=await tf(http_prefix,i,r,l[0],l[1]),c=function(e,t){let a=e.split("|"),n=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return a.forEach((e=>{let a=n.exec(e),s=a[1],i=t.timeseries[s].label,r=JSON.parse(a[2]),o=JSON.parse(a[3]),c=JSON.parse(a[4]),u=JSON.parse(a[5]);l.push({id:s,label:i,raw:r,past:o,avg:c,perc_95:u})})),l}(s,o);return{id:R_(i,r,o),source_type:i,source_array:r,metric:o,timeseries:c}}const R_=(e,t,a,n,l)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let i=e.source_def_array,r=t.map(((e,t)=>{let a=i[t].value;return null==n||n[a]?e.value:null})).filter((e=>null!=e)).join("_"),o=e.id;return l&&null!=e.id_group&&(o=e.id_group),`${o} - ${r} - ${s}`};const z_=O_.sources_url_el_to_source,B_=O_.sources_types,V_=e=>B_.find((t=>t.id==e)),q_=async(e,t)=>{let a=Y_(t);return await G_(e,t,a)};async function H_(e,t,a){let n=t.source_def_array.map((e=>a[e.value]));return await G_(e,t,n)}const G_=async(e,t,a)=>{null==t&&(t=ef());let n,l=[];for(let s=0;s<a.length;s+=1){let i=a[s],r=t.source_def_array[s];if(r.sources_url||r.sources_function){let a=[];a=r.sources_url?await K_(e,t.id,r):r.sources_function(),n=a.find((e=>e.value==i)),null==n&&(n=a[0])}else n={label:i,value:i};l.push(n)}return l};let W_={};const K_=async(e,t,n)=>{let l=`${t}_${n.value}`;if(null==W_[l])if(n.sources_url){let t=`${e}/${n.sources_url}`;W_[l]=b.http_request(t)}else{if(!n.sources_function)return[];W_[l]=n.sources_function()}let s=await W_[l];if(n.sources_url){let e=z_[n.value_map_sources_res];if(null==e&&(e=z_[n.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${n.value} key`;s=s.map((t=>e(t)))}return s.sort(a.sortAlphabetically)};function J_(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const Y_=e=>(null==e&&(e=ef()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Z_={},X_=null;const Q_=async(e,t,a)=>{let n=`${x.get_url_entry("epoch_begin")}_${x.get_url_entry("epoch_end")}`;null==t&&(t=ef()),null==a&&(a=await q_(e,t));let l=function(e,t,a){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}`}(e,t,a),s=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);n!=X_&&(Z_[s]=null,X_=n),null==Z_[s]&&(Z_[s]=b.http_request(l));let i=await Z_[s];return null==i?[{}]:(0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),b.clone(i))},ef=()=>{let e=window.location.pathname;for(let t=0;t<B_.length;t+=1){if(1==new RegExp(B_[t].regex_page_url).test(e))return B_[t]}throw`source_type not found for ${e}`},tf=async(e,t,a,n,l)=>(await Q_(e,t,a)).find((e=>e.schema==n&&e.query==l)),af=(e,t)=>{null==t&&(t=ef());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let n=e.split(",");for(let e=0;e<n.length;e+=1){let t=n[e].split(":")[0];if(null==a[t])return n[e]}return null},nf=(e,t,a)=>{let n;return null!=t&&(n=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==n&&(n=e.find((e=>1==e.default_visible))),null!=n?n:e[0]},lf={set_timeseries_groups_in_url:j_,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return null!=a&&a.length>0?null:Promise.all(a.map((async e=>await D_(e))))},get_default_timeseries_groups:F_,get_ts_group:L_,get_ts_group_id:R_,sources_types:B_,sources_types_tables:O_.sources_types_tables,get_source_type_from_id:V_,get_current_page_source_type:ef,get_sources:K_,get_default_source_array:q_,get_source_array_from_value_dict:H_,get_source_array_from_value_array:G_,get_default_source_value_array:Y_,get_metrics:Q_,get_metric_from_schema:tf,get_metric_query_from_ts_query:af,get_default_metric:nf,set_source_value_object_in_url:J_,ui_types:O_.ui_types};function sf(e,t){let a=e.start,n=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*a;e.data=e.data.map((e=>{let a={x:t,y:e};return t+=n,a}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:m.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function rf(e){return`${e.label}`}function of(e,t){return"number"==e?t:e}function cf(e,t,a,n){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==n)return e;let s=yf(a);return`${`${a.source_array[s].label}`} ${l}(${of(a.metric.measure_unit,a.metric.scale)})`}function uf(e){return`${e.measure_unit}_${e.scale}`}const df=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];function pf(e,t,a){if(1==a)return void function(e,t){let a={min:0,max:Number.MIN_SAFE_INTEGER,invert_direction:!1},n=[];t.forEach((e=>{e.data.forEach(((e,t)=>{n.length<=t&&n.push(0),n[t]+=e.y}))})),n.forEach((e=>{a.max=Math.max(a.max,e),a.min=Math.min(a.min,e)})),e.forEach((e=>{e.min=a.min,e.max=a.max}))}(e,t);let n={},l={};for(let a=0;a<t.length;a+=1){let s=t[a],i=e[a],r=i.seriesName;null==n[r]&&(n[r]=[],l[r]={min:0,max:Number.MIN_SAFE_INTEGER,invert_direction:!1}),n[r].push(i);let o=l[r];s.data.forEach((e=>{o.max=Math.max(o.max,e.y),o.min=Math.min(o.min,e.y)})),o.invert_direction|=s.invert_direction}let s=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let a=e/100*3;return t&&e>0||!t&&e<0?e+a:e-a};for(let e in n){let t=n[e],a=l[e];a.min=s(a.min,!1),a.max=s(a.max,!0),t.forEach((e=>{let t=Math.abs(a.min),n=Math.abs(a.max);t>n?(e.min=a.min,e.max=t):t<n&&1==a.invert_direction?(e.min=-1*n,e.max=a.max):(e.min=a.min,e.max=a.max)}))}}const _f={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")}};function ff(e){return _f[e]||null}function mf(e,t,a,n){if(a.value==_f["1_chart_x_metric"].value)return hf(e,t,a,n);let l=function(e,t){let a=[],n=[],l=[],s=[];return t.forEach(((t,i)=>{1==t.metric.draw_stacked?(a.push(e[i]),n.push(t)):(l.push(e[i]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:n},not_stacked:{tsOptionsArray:l,tsGroupsArray:s}}}(e,t);return[...hf(l.stacked.tsOptionsArray,l.stacked.tsGroupsArray,_f["1_chart_x_metric"],n),...hf(l.not_stacked.tsOptionsArray,l.not_stacked.tsGroupsArray,a,n)]}function hf(e,t,a,n){if(a.value==_f["1_chart"].value){let a=[gf(e,t,n)];return vf(a),a}if(a.value==_f["1_chart_x_yaxis"].value){let a={};t.forEach(((t,n)=>{let l=uf(t.metric),s={tsGroup:t,tsOptions:e[n]};null==a[l]?a[l]=[s]:a[l].push(s)}));let l=[];for(let e in a){let t=a[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=gf(s,i,n);l.push(r)}return vf(l),l}if(a.value==_f["1_chart_x_metric"].value){let a=[];return e.forEach(((e,l)=>{let s=gf([e],[t[l]],n);a.push(s)})),vf(a),a}return[]}function vf(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function gf(e,t,a){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let n=[],l=[],s={},i={},r=null,o=!1;e.forEach(((e,c)=>{let u=t[c];c>0&&(r="line"),o|=u.metric.draw_stacked;let d=function(e,t,a,n,l){let s=1e3*e.start,i=1e3*e.step,r=[],o=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=o.length&&(e.series=o.map(((t,a)=>{let n=e.series.find((e=>rf(e)==t));return null!=n?n:{label:t,data:[null]}}))),e.series.forEach(((o,c)=>{let u=rf(o),d=t.metric.timeseries[u];if(null==d)throw`Impossible find timeserie_id = ${u} in metric metadata (id,schema,query) = (${metric.id},${metric.schema},${metric.id})`;let p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,a=e.map((e=>{let a={x:t,y:e*p};return null==e&&(a.y=null),t+=i,a}));return a},f=t.timeseries?.find((e=>e.id==u)),m=d.label;null!=o.ext_label&&"top"==t.metric.type&&(m=o.ext_label);let h=cf(m,u,t,a);if(null==f||1==f.raw){let e=_(o.data),t=d.draw_type;null==t&&null!=n?t=n:null==t&&(t="area");let a={id:u,colorPalette:0,color:d.color,type:t,name:h,data:e,invert_direction:d.invert_direction};r.push(a)}if(1==f?.past&&b.is_object(e.additional_series)){let t=b.object_to_array(e.additional_series)[0],a={id:u,colorPalette:1,type:"line",name:`${h} ${l} Ago`,data:_(t),dashed:!0,invert_direction:d.invert_direction};r.push(a)}let v=(e,t,a)=>{if(null==a)return null;a*=p;let n=s;return{id:t,name:`${h} (${e})`,colorPalette:1,type:"line",data:o.data.map((e=>{let t={x:n,y:a};return n+=i,t})),invert_direction:d.invert_direction}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,a=v("Avg",u,t);r.push(a)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],a=v("95th Perc",u,t);r.push(a)}})),r}(e,u,!0,r,a);n=n.concat(d);let p=function(e,t,a,n){let l=t.metric,s=uf(l),i=!1,r=Object.keys(a).length,o=[];for(let e in t.metric.timeseries)i|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let i=a[s],c=0,u=null;if(null!=e.data){let t=e.data.map((e=>null==e.y?0:Math.abs(e.y)));c=Math.max.apply(Math,t),u=m.getScaleFactorIndex(l.measure_unit,c)}if(null==i){n[s]=u;let l={seriesName:e.name,show:!0,labels:{},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:of(t.metric.measure_unit,t.metric.scale)},opposite:r%2==1};a[s]=l.seriesName,o.push(l)}else o.push({seriesName:i,labels:{},show:!1});n[s]=Math.max(n[s],u)})),o.forEach((e=>e.labels.formatter=m.getFormatter(l.measure_unit,i,n[s]))),o}(d,u,s,i);l=l.concat(p)})),function(e){let t=0,a=0,n=df,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=n[t%n.length],t+=1):1==e.colorPalette&&(e.color=l[a%l.length],a+=1)}))}(n),pf(l,n,o);let c=function(e,t,a){return{chart:{id:b.get_random_string(),stacked:a,group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},markers:{size:2.5,strokeWidth:1,strokeColors:e.map((e=>e.color))},stroke:{show:!0,lineCap:"butt",width:3,dashArray:e.map((e=>e.dashed?4:0))},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(n,l,o);return c}function bf(e,t,a){let n=e.source_type.source_def_array.map(((t,n)=>{if(null!=a&&!a[t.value])return null;let l=e.source_array[n].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(n=`${n},${e.metric.query}`),n}function yf(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function wf(e,t,a,n,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:a,initial_point:!0,limit:180,version:4,ts_compare:a},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,r={ts_requests:n.map((e=>{let t=yf(e),a={ts_query:bf(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...i,...t},o={"Content-Type":"application/json"};s=await b.http_request(l,{method:"post",headers:o,body:JSON.stringify(r)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${a}&version=4&zoom=${a}&initial_point=true&limit=180`,r=n[0],o=yf(r),c=bf(r),u={...i,ts_query:c,ts_schema:`${r.metric.schema}`};r.source_type.source_def_array[o].disable_tskey||(u.tskey=r.source_array[o].value);let d=`${t}?${x.add_obj_to_url(u,l)}`;s=[await b.http_request(d)]}return s}const xf={groupsOptionsModesEnum:_f,tsToApexOptions:sf,tsArrayToApexOptions:gf,tsArrayToApexOptionsArray:mf,getGroupOptionMode:ff,getSerieId:rf,getSerieName:cf,getTsChartsOptions:wf,getTsQuery:bf,getMainSourceDefIndex:yf},kf=a;function $f(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=$f("vlan"),a=kf.REGEXES.ipv4,n=a.replaceAll("$",`${t}$`),l=kf.REGEXES.ipv6,s=l.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,n=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${n}|${s}|${l.replaceAll("$",`${i}$`)}|${l.replaceAll("$",`${i}${t}$`)})`}return`(${a})|(${n})|(${l})|(${s})`}if("mac"==e)return kf.REGEXES.macAddress;if("ip,cidr"==e){return`(${$f("ip")})|(${$f("cidr")})`}return kf.REGEXES[e]}const Sf={get_data_pattern:$f},Nf={class:"nav nav-tabs"},Cf={class:"form-group ms-2 me-2 mt-3 row"},Af={class:"form-group row"},Tf={class:"col-form-label col-sm-4"},Ef={class:"col-sm-8"},Pf={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Uf={class:"form-group row"},Mf={class:"col-form-label col-sm-4"},If={class:"col-sm-8"},Of=["title"],jf={key:0,class:"form-group mt-2 row"},Lf={class:"col-form-label col-sm-4"},Ff={class:"col-sm-8"},Df={key:1,class:"form-group mt-2 row"},Rf={class:"col-form-label col-sm-4"},zf={class:"col-sm-8"},Bf=["onUpdate:modelValue","pattern"],Vf={class:"form-group row mt-2",style:{"text-align":"end"}},qf={class:"col-sm-12"},Hf=["disabled"],Gf={class:"form-group ms-2 me-2 mt-3 row"},Wf={class:"form-group row"},Kf={class:"col-form-label col-sm-4"},Jf={class:"col-sm-8"};var Yf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null),s=ma(null),i=ma("select");let r=lf.get_current_page_source_type();const o=lf.sources_types,c=ma(r),u=lf.ui_types,d=ma([]),p=ma([]),_=ma([]),f=ma(""),m=ma([]),h=ma(!1),v=wi((()=>{if(0==h.value)return!1;for(let e=0;e<m.value.length;e+=1){let t=m.value[e];if(null==t)continue;let a=new RegExp(t),n=_.value[e];if(0==a.test(n))return!1}return!0})),g=ma(!1),y=ma([]),w=ma({}),x=ma([]),k=ma([]);let $=null;dl((()=>{o.forEach((e=>{n.sources_types_enabled[e.id]}))})),pl((async()=>{$=async function(){await N(),P()}()}));function S(e){i.value=e}async function N(){h.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);m.value=e.map((e=>null==e?null:Sf.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let a=0;a<e.length;a+=1){let n=await lf.get_sources(http_prefix,c.value.id,e[a]);t.push(n)}let a=await lf.get_default_source_array(http_prefix,c.value);p.value=a,d.value=t,_.value=a.map((e=>e.value)),T()}(),await E()}async function C(){h.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let a=p.value[t];a.value=e,a.label=e}})),await async function(){await E()}(),T()}function A(){h.value=!0}function T(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function E(){y.value=await lf.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=lf.get_default_metric(y.value),P()}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function U(e){let t=e.source_type.label,a=xf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function M(e){let t,a,n;return null==e?(t=c.value,a=p.value,n=w.value):(t=e.source_type,a=e.source_array,n=e.metric),lf.get_ts_group_id(t,a,n)}const I=e=>{x.value=x.value.filter((t=>M(t)!=e))},O=(e,t)=>{let n=x.value.findIndex((t=>t.id==e.id));n<0?x.value.push(e):x.value[n]=e,t&&a("apply",x.value)},j=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:b.clone(p.value),metric:w.value,timeseries:b.clone(k.value)};O(e)}a("apply",x.value),L()},L=()=>{l.value.close()},F=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",l.value.show()},close:L,add_ts_group:O,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Ps(),Ls(hp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(F("modal_timeseries.title")),1)])),body:vn((()=>[qs("ul",Nf,[qs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[qs("a",{class:K(["nav-link",{active:"add"==i.value}]),href:"#"},te(F("modal_timeseries.add_timeseries")),3)]),qs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[qs("a",{class:K(["nav-link",{active:"select"==i.value}]),href:"#"},te(F("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==i.value?(Ps(),js(Ss,{key:0},[Ys(" Sources Types "),qs("div",Cf,[qs("div",Af,[qs("label",Tf,[qs("b",null,te(F("modal_timeseries.source_type")),1)]),qs("div",Ef,[Hs(Rd,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(o)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Ps(),js("div",Pf,[qs("div",Uf,[qs("label",Mf,[qs("b",null,te(F("modal_timeseries.source")),1)]),qs("div",If,[wl(qs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Of),[[Ir,f.value]])])]),(Ps(!0),js(Ss,null,Tl(c.value.source_def_array,((e,a)=>(Ps(),js(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Ps(),js("div",jf,[qs("label",Lf,[qs("b",null,te(e.label)+" "+te(a),1)]),qs("div",Ff,[Hs(Rd,{selected_option:p.value[a],"onUpdate:selected_option":e=>p.value[a]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[a]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Ps(),js("div",Df,[qs("label",Rf,[qs("b",null,te(e.label),1)]),qs("div",zf,[wl(qs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[a]=e,pattern:m.value[a],required:"",type:"text",placeholder:""},null,40,Bf),[[Ir,_.value[a]]])])])):Ys("v-if",!0),Ys(" input text ")],64)))),256)),wl(qs("div",Vf,[qs("div",qf,[qs("button",{type:"button",onClick:C,disabled:0==ya(v),class:"btn btn-primary"},te(F("modal_timeseries.apply_source")),9,Hf)])],512),[[Jr,ya(v)]])])),Ys(" end Sources "),Ys(" Metrics "),qs("div",Gf,[qs("div",Wf,[qs("label",Kf,[qs("b",null,te(F("modal_timeseries.metric")),1)]),qs("div",Jf,[Hs(Rd,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(v_,{title:F("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==i.value?(Ps(),js(Ss,{key:1},[(Ps(!0),js(Ss,null,Tl(x.value,(e=>(Ps(),Ls(v_,{id:M(e),title:U(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:I},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:vn((()=>[wl(qs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(F("modal_timeseries.add")),513),[[Jr,"add"==i.value]]),wl(qs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(F("modal_timeseries.apply")),513),[[Jr,"select"==i.value]])])),_:1},512))}};mp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Yf.__scopeId="data-v-103cd911",Yf.__file="http_src/vue/modal-timeseries.vue";var Zf=Yn({components:{modal:hp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,n=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${l}</a>`;n=n.replace("%{page}",s),n=`${n} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:n,type:"alert-success"})}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,n=await ntopng_utility.http_request(a);if(null==n||null==n.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=n.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let a=new Date(1e3*t.epoch_begin),n=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(a)),l=l.replace("%{date_end}",this.format_date(n)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Xf=e=>(fn("data-v-0be978c4"),e=e(),mn(),e),Qf=["innerHTML"],em={style:{height:"95%"}},tm={class:"tab-content",style:{height:"100%"}},am={class:"row"},nm={class:"form-group mb-3 col-md-3 has-feedback"},lm={class:"form-group mb-3 col-md-9 text-right asd"},sm={class:"radio-inline",style:{"margin-left":"1rem"}},im={class:"radio-inline"},rm={class:"row",id:"pcapDownloadModal_advanced",style:{}},om={class:"form-group mb-3 col-md-12 has-feedback"},cm=Xf((()=>qs("br",null,null,-1))),um={class:"form-label"},dm=Xf((()=>qs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[qs("i",{class:"fas fa-external-link-alt"})],-1))),pm={class:"input-group"},_m=Xf((()=>qs("span",{class:"input-group-addon"},[qs("span",{class:"glyphicon glyphicon-filter"})],-1))),fm=Xf((()=>qs("br",null,null,-1))),mm={class:"form-label"},hm=Xf((()=>qs("br",null,null,-1))),vm=Xf((()=>qs("ul",null,[qs("li",null,[Ks("Host: "),qs("i",null,"host 192.168.1.2")]),qs("li",null,[Ks("HTTP: "),qs("i",null,"tcp and port 80")]),qs("li",null,[Ks("Traffic between hosts: "),qs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),qs("li",null,[Ks("Traffic from an host to another: "),qs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));mp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Zf.render=function(e,t,a,n,l,s){const i=kl("modal");return Ps(),Ls(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:vn((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:vn((()=>[qs("div",{class:"alert alert-info",innerHTML:e.description},null,8,Qf),qs("form",em,[qs("div",tm,[qs("div",am,[qs("div",nm,[qs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),qs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),qs("div",lm,[qs("label",sm,[wl(qs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Lr,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),qs("label",im,[wl(qs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Lr,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wl(qs("div",rm,[qs("div",om,[cm,qs("label",um,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),dm]),qs("div",pm,[_m,wl(qs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Ir,e.bpf_filter]]),wl(qs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Jr,e.invalid_bpf]])]),fm,qs("label",mm,te(e.i18n("traffic_recording.filter_examples"))+":",1),hm,vm])],512),[[Jr,e.show_menu]])])])])),footer:vn((()=>[qs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Zf.__scopeId="data-v-0be978c4",Zf.__file="http_src/vue/modal-traffic-extraction.vue";const gm={class:"form-group mt-2 row"},bm={class:"col-form-label col-sm-4"},ym={class:"col-sm-6"},wm={class:"col-form-label col-sm-2"},xm=["disabled"];var km={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null),s=ma(""),i=String.raw`^[^~${"`"}!@#$%^&*|+-=?;:'"\\,.<>\/{}()\[\]\s]+$`,r=wi((()=>new RegExp(i).test(s.value)));function o(){let e=`${s.value}.${n.ext}`;a("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,l.value.show()},close:c}),pl((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(hp,{ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(n.title),1)])),body:vn((()=>[qs("div",gm,[qs("label",bm,[qs("b",null,te(u("modal_download_file.filename"))+":",1)]),qs("div",ym,[wl(qs("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Ir,s.value]])]),qs("label",wm," ."+te(n.ext),1)])])),footer:vn((()=>[qs("button",{type:"button",onClick:o,class:"btn btn-primary",disabled:0==ya(r)},te(u("modal_download_file.download")),9,xm)])),_:1},512))}};mp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),km.__scopeId="data-v-59120eb8",km.__file="http_src/vue/modal-download-file.vue";var $m=Yn({components:{},props:{id:String,global:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const Sm=["innerHTML"];$m.render=function(e,t,a,n,l,s){return 1==e.show_alert?(Ps(),js("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[qs("span",{innerHTML:e.body},null,8,Sm),qs("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})],2)):Ys("v-if",!0)},$m.__file="http_src/vue/alert-info.vue";const Nm=function(e,{props:t,children:a,element:n,app:l}={}){let s=n,i=Hs(e,t,a);l&&l._context&&(i.appContext=l._context),s?ao(i,s):"undefined"!=typeof document&&ao(i,s=document.createElement("div"));return{vNode:i,destroy:()=>{s&&ao(null,s),s=null,i=null},el:s}},Cm={key:0},Am={class:"text-center"},Tm=qs("tbody",null,null,-1);var Em={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const n=e,l=si(),s=Ni(),i=(e,t)=>{if((t||n.id)&&null!=e.dir){const a=[e.col,e.dir],l=`${t||n.id}_sorting_preferences`;localStorage.setItem(l,a)}},r=e=>{let t=null;if(e||n.id){const a=`${e||n.id}_sorting_preferences`,l=localStorage.getItem(a);if(l){const e=l.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let o=n.base_params;const c=ma(null),u=r()||[0,"asc"];let d=null;pl((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[u],pagingType:"full_numbers",columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),n=e.order[0].column,l=a.column(n).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),i(e.aLastSort[0])}};for(const e in n.table_config||{})t[e]=n.table_config[e];let l=DataTableUtils.getStdDatatableConfig(n.table_buttons);l=DataTableUtils.extendConfig(l,t),d=$(c.value).DataTable(l),_();for(const t of n.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=x.get_url_entries();for(const[t,a]of e)o[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,o)),f()}}()}));let p=null;function _(){if(null==p&&(p=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:n,el:i}=Nm(t,{app:l?.appContext?.app,element:a});let r=$(d.context[0].nTableWrapper);$($(".row .text-end",r).children()[0]).append(i)}const f=()=>{null!=d&&d.ajax.reload()},m=e=>{DataTableUtils.deleteButtonHandlers(e)};let h=!1;const v=()=>{d.clear(),d.destroy(!0),h=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{m(e.handlerId)}))};return t({reload:f,delete_button_handlers:m,destroy_table:v,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),_()},is_last_sorting_available:e=>null!=r(e),load_last_sort:r,save_last_sort:i}),ml((()=>{1!=h&&v()})),(t,a)=>(Ps(),js(Ss,null,[(Ps(),js("div",Cm,[Ys(' <slot name="menu"></slot> ')])),qs("div",null,[qs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[qs("thead",null,[qs("tr",null,[(Ps(!0),js(Ss,null,Tl(e.columns_config,(e=>(Ps(),js("th",Am,te(e.columnName),1)))),256))])]),Tm],512)])],64))},__file:"http_src/vue/datatable.vue"};const Pm={class:"table table-hover table-borderless mb-0"},Um=["innerHTML"],Mm=["innerHTML"];var Im={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,a)=>(Ps(),js("table",Pm,[qs("thead",null,[qs("tr",null,[(Ps(!0),js(Ss,null,Tl(e.columns,(t=>(Ps(),js("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Um)))),256))])]),qs("tbody",null,[(Ps(!0),js(Ss,null,Tl(e.rows,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,Tl(e.columns,(a=>(Ps(),js("td",{scope:"col",innerHTML:e.print_html_row(a,t)},null,8,Mm)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Om=e=>(fn("data-v-937058e4"),e=e(),mn(),e),jm={class:"col-12 mb-2 mt-2"},Lm={class:"card h-100 overflow-hidden"},Fm=["title"],Dm=[Om((()=>qs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Rm=["title"],zm=[Om((()=>qs("i",{class:"fas fa-lg fa-download"},null,-1)))],Bm=["title"],Vm=[Om((()=>qs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],qm=["title"],Hm=[Om((()=>qs("i",{class:"fas fa-lg fa-table"},null,-1)))],Gm={class:"form-group ms-1 me-1 mt-1"},Wm={class:"inline select2-size me-2 mt-2"},Km={class:"inline select2-size me-2 mt-2"},Jm={key:0,class:"mt-4 card card-shadow"},Ym={class:"card-body"},Zm={key:1,class:"mt-4 card card-shadow"},Xm={class:"card-body"},Qm={key:0,class:"inline select2-size me-2 mt-2"};var eh={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e;b.check_and_set_default_interval_time();const n=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;ma({}),ma(!1);const i=ma([]),r=ma(null),o=ma(null),c=ma(null),u=ma(null),d=ma(null),p=ma([]),_=ma({});lf.get_current_page_source_type();const f=ma(!1);ma(!1);const h=ma([]),v=b.object_to_array(xf.groupsOptionsModesEnum),g=ma(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return xf.getGroupOptionMode(e);return v[0]}());let w=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=ma(!1);dl((async()=>{!function(){if(null==t.source_value_object)return;let e=lf.get_current_page_source_type();lf.set_source_value_object_in_url(e,t.source_value_object)}()})),pl((async()=>{!async function(){let e,t,a=!0,n=await lf.get_timeseries_groups_from_url(http_prefix);if(null==n){a=!1,e=x.get_url_entry("ts_schema");let l=x.get_url_entry("ts_query");null!=l&&""!=l&&(t=lf.get_metric_query_from_ts_query(l)),""==e&&(e=null),n=await lf.get_default_timeseries_groups(http_prefix,e,t)}p.value=await C(a),_.value=1==a?k:lf.get_default_metric(p.value,e,t);S.value=!0,await q(n,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));let N=null;async function C(e,n){let l=await lf.get_metrics(http_prefix);if(!n&&N==e)return l.value;if(e&&l.push(k),(null==D||n)&&(D=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${$}`,a=await b.http_request(e),n=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return n}()),t.enable_snapshots){D.forEach((e=>l.push(e)))}return l.sort(a.sortAlphabetically),l}async function A(e){let t=lf.get_current_page_source_type(),a=await lf.get_default_source_array(http_prefix,t);return[lf.get_ts_group(t,a,e)]}const T=async(e,t,a)=>{let n=lf.get_source_type_from_id(e),l=await lf.get_source_array_from_value_dict(http_prefix,n,t),s=await lf.get_metric_from_schema(http_prefix,n,l,a);P(lf.get_ts_group(n,l,s))},E=async(e,t)=>{let a=p.value.find((a=>a.schema==e&&a.query==t));null!=a?P((await A(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function P(e){c.value.set_timeseries_groups(w),c.value.add_ts_group(e,!0)}async function U(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),n=await lf.get_timeseries_groups_from_url(http_prefix,a);g.value=xf.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await q(n,!0,!1)}else await async function(){let e=await async function(){return A(_.value)}();await q(e,!0,!1)}(),z(!1)}function M(e){let a=_.value.label==k.label;q(w,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=W.value?.table_config_def;if(null==e)return;let a=H(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);o.value.update_url(a),o.value.reload()}(),z(a,!0)}function I(e){}function O(){u.value.show()}function j(){null!=w&&c.value.show(w)}function L(e){return async t=>h.value[e].chart_options}let F,D=null;function R(){z(_.value.label==k.label,!0)}async function z(e,t){p.value=await C(e,t),e&&(_.value=k)}async function B(e){z(!0),await q(e,!0,!0)}function V(){q(w,!1,!1)}async function q(e,a,n,l){let s=y.get_status(),r=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);a&&(F=await xf.getTsChartsOptions(http_prefix,s,r,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,a)=>{let n=t[a],l=n?.query?.label;if(null!=l){let t=xf.getMainSourceDefIndex(e);e.source_array[t].label=l}}))}(e,F);let o=xf.tsArrayToApexOptionsArray(F,e,g.value,r);l?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_series(e?.series)}))}(o):function(e){h.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(o),function(e,t,a){let n=!0;if(f.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!f.value)return;const l=e=>"bps"==e?"bytes":e;J.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series.forEach(((t,a)=>{let i,r=xf.getSerieId(t),o=s.metric.timeseries[r],c=m.getFormatter(s.metric.measure_unit);if("top"==s.metric.type?i=e.statistics:e?.statistics?.by_serie?.length>a&&(i=e.statistics.by_serie[a]),null==i||"top"==s.metric.type&&a>0)return;let u=xf.getSerieName(o.label,r,s,n),d=l(s.metric.measure_unit),p={metric:u,total:m.getFormatter(d)(i.total),perc_95:c(i["95th_percentile"]),avg:c(i.average),max:c(i.max_val),min:c(i.min_val)};J.value.push(p)}))}))}(F,e),n&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=w);null==a&&(a=y.get_status());let n=lf.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=lf.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};G.value=[];for(let e in l){let i=l[e],r=xf.getMainSourceDefIndex(i),o=i.source_array[r],c=i.source_type,u=n[c.id];null!=u&&u.forEach((e=>{let n=t.sources_types_top_enabled[e.table_value];if(null==n)return;if(!n[e.view])return;let l=e.table_source_def_value_dict,r=H(i,e.table_value,e.view,l,a),u=lf.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${o.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:r,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};_.columns_config=e.columns.map((e=>{let n={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(n),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:E,add_ts_group_from_source_value_dict:T,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};G.value.push(f)}))}if(null!=W.value&&G.value.find((e=>e.value==W.value.value)))return;W.value=G.value.find((e=>1==e.table_config_def.default)),null==W.value&&(W.value=G.value[0])}(e,s),w=e,x.set_key_to_url("timeseries_groups_mode",g.value.value),lf.set_timeseries_groups_in_url(w)}function H(e,t,a,n,l){null==l&&(l=y.get_status());let s=xf.getTsQuery(e,!0,n),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,r={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(r,"")}`}const G=ma([]),W=ma({});let K=[{id:"metric",label:n("page_stats.metric")},{id:"avg",label:n("page_stats.average")},{id:"perc_95",label:n("page_stats.95_perc")},{id:"max",label:n("page_stats.max")},{id:"min",label:n("page_stats.min")},{id:"total",label:n("page_stats.total")}];const J=ma([]);function Y(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const n=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(n)}const Z=ma(null);function X(){Z.value.show()}function Q(){if(!F?.length)return;let e=w[0],t=xf.getSerieName(null,null,e);d.value.show(t)}async function ee(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,a)=>{let n=new Image;n.src=t,n.onload=function(){e(n)}}))})),a=0,n=await Promise.all(t);n.forEach((e=>{a+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=n[0].width,l.height=a,a=0,n.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(l.toDataURL(),e)}return(t,a)=>(Ps(),js(Ss,null,[qs("div",jm,[Hs($m),qs("div",Lm,[Hs(zd,{style:{"margin-top":"0.5rem"},id:ya(l),enable_refresh:!0,ref_key:"date_time_picker",ref:r,onEpoch_change:M},{begin:vn((()=>[])),extra_buttons:vn((()=>[e.enable_snapshots?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:O,title:n("page_stats.manage_snapshots_btn")},Dm,8,Fm)):Ys("v-if",!0),e.traffic_extraction_permitted?(Ps(),js("button",{key:1,class:"btn btn-link btn-sm",onClick:X,title:n("traffic_recording.pcap_download")},zm,8,Rm)):Ys("v-if",!0),qs("button",{class:"btn btn-link btn-sm",onClick:Q,title:n("page_stats.title_modal_download_file")},Vm,8,Bm),e.is_history_enabled?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Y,title:n("page_stats.historical_flows")},Hm,8,qm)):Ys("v-if",!0)])),_:1},8,["id"]),Ys(" select metric "),wl(qs("div",Gm,[qs("div",Wm,[Hs(Rd,{selected_option:_.value,"onUpdate:selected_option":a[0]||(a[0]=e=>_.value=e),options:p.value,onSelect_option:U},null,8,["selected_option","options"])]),qs("div",Km,[Hs(Rd,{selected_option:g.value,"onUpdate:selected_option":a[1]||(a[1]=e=>g.value=e),options:ya(v),onSelect_option:V},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),js("button",{key:0,type:"button",onClick:j,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Jr,S.value]]),(Ps(!0),js(Ss,null,Tl(h.value,((e,t)=>(Ps(),js("div",{key:e.key,class:"m-3",style:{height:"300px"}},[Hs(Od,{id:ya("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:L(t),onZoom:M,onChart_reloaded:I},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),f.value?(Ps(),js("div",Jm,[qs("div",Ym,[Hs(Im,{id:"page_stats_bootstrap_table",columns:ya(K),rows:J.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),js("div",Zm,[qs("div",Xm,[W.value?.table_config_def?(Ps(),js("div",Qm,[Hs(Rd,{selected_option:W.value,"onUpdate:selected_option":a[2]||(a[2]=e=>W.value=e),options:G.value},null,8,["selected_option","options"])])):Ys("v-if",!0),W.value?.table_config_def?(Ps(),Ls(Em,{key:W.value?.value,ref_key:"top_table_ref",ref:o,table_buttons:W.value.table_config_def.table_button,columns_config:W.value.table_config_def.columns_config,data_url:W.value.table_config_def.data_url,enable_search:W.value.table_config_def.enable_search,table_config:W.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(Zp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:R,onDeleted_snapshots:R,onDeleted_all_snapshots:R},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ls(Yf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:B},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(Zf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Z},null,512),Hs(km,{ref_key:"modal_download_file",ref:d,title:n("page_stats.title_modal_download_file"),ext:"png",onDownload:ee},null,8,["title"])],64))}};mp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),eh.__scopeId="data-v-937058e4",eh.__file="http_src/vue/page-stats.vue";var th=Yn({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const ah={class:"card-header mb-2"},nh={class:"nav nav-tabs card-header-tabs",role:"tablist"},lh=["onClick"],sh=["onClick"];th.render=function(e,t,a,n,l,s){return Ps(),js("div",ah,[qs("ul",nh,[(Ps(!0),js(Ss,null,Tl(e.tab_list,(t=>(Ps(),js(Ss,null,[t.active?(Ps(),js("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,lh)):(Ps(),js("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,sh))],64)))),256))])])},th.__file="http_src/vue/tab-list.vue";var ih={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:a}){const n=ma(null),l=()=>{a("delete"),s()},s=()=>{n.value.close()};t({show:()=>{n.value.show()},close:s}),pl((()=>{}));const i=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vn((()=>[Ks(te(e.title),1)])),body:vn((()=>[Ks(te(e.body),1)])),footer:vn((()=>[qs("button",{type:"button",onClick:l,class:"btn btn-danger"},te(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const rh="change_asset_table_tab_event";var oh={components:{datatable:Em,"modal-delete-confirm":ih,"tab-list":th},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let n=url_params;n.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.asset_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=a,i.table_filters=s,e.config_devices_standard=i,n.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let r=ntopng_utility.clone(l);r.table_config={serverSide:!1,order:[[1,"desc"]]},r.columns_config=a,r.table_filters=s,console.log(i),console.log(r),e.config_devices_centrality=r}(this)},mounted(){N.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_asset_table_tab",rh,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(rh,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ch={class:"row"},uh={class:"col-md-12 col-lg-12"},dh=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ph={class:"card"},_h=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),fh={class:"card-body"},mh={id:"table_asset"},hh={class:"card-footer"},vh={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},gh=qs("i",{class:"fas fa-trash"},null,-1),bh=["href"],yh=[qs("i",{class:"fas fa-download"},null,-1)];oh.render=function(e,t,a,n,l,s){const i=kl("modal-delete-confirm"),r=kl("tab-list"),o=kl("datatable");return Ps(),js("div",ch,[qs("div",uh,[dh,qs("div",ph,[_h,qs("div",fh,[qs("div",mh,[Hs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(Ps(),Ls(o,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:vn((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==l.asset_table_tab?(Ps(),Ls(o,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:vn((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),qs("div",hh,[qs("button",vh,[gh,Ks(" "+te(l.i18n("map_page.delete_assets")),1)]),qs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},yh,8,bh)])])])])},oh.__file="http_src/vue/page-asset-table.vue";var wh={components:{datatable:Em,"modal-delete-confirm":ih},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],n=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{l[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],n=6;let r={serverSide:!0,order:[[n,"desc"]]},o=ntopng_utility.clone(s);o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_standard=o}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const xh={class:"row"},kh={class:"col-md-12 col-lg-12"},$h=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Sh={class:"card"},Nh=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ch={class:"card-body"},Ah={id:"periodicity-table"},Th={class:"card-footer"},Eh={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Ph=qs("i",{class:"fas fa-trash"},null,-1),Uh=["href"],Mh=[qs("i",{class:"fas fa-download"},null,-1)];wh.render=function(e,t,a,n,l,s){const i=kl("modal-delete-confirm"),r=kl("datatable");return Ps(),js("div",xh,[qs("div",kh,[$h,qs("div",Sh,[Nh,qs("div",Ch,[qs("div",Ah,[Hs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),qs("div",Th,[a.is_admin?(Ps(),js("button",Eh,[Ph,Ks(" "+te(l.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),qs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Mh,8,Uh)])])])])},wh.__file="http_src/vue/page-periodicity-table.vue";const Ih={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Oh=function(e,t,a,n){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:n}).then((e=>{e.success&&a&&a()}))},jh=function(){return Ih},Lh="change_service_table_tab_event";var Fh={components:{datatable:Em,"modal-delete-confirm":ih,"tab-list":th},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],n=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],n=6,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,n)=>e.create_action_buttons(t,a,n)});let r={serverSide:!0,order:[[n,"desc"]]},o=ntopng_utility.clone(s);o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_standard=o,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],n=2,r.order=[[n,"desc"]],o=ntopng_utility.clone(s),o.table_buttons=s.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_filters=i,o.table_config=ntopng_utility.clone(r),e.config_devices_centrality=o}(this)},mounted(){N.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_service_table_tab",Lh,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(Lh,e.id)},create_action_buttons:function(e,t,a){const n=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Oh(a.hash_id,this.$props.service_acceptance[0].id,n,l)}},i={onClick:()=>{Oh(a.hash_id,this.$props.service_acceptance[1].id,n,l)}},r={onClick:()=>{Oh(a.hash_id,this.$props.service_acceptance[2].id,n,l)}};if("display"!==t)return e;const o=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:r};switch(o){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Dh={class:"row"},Rh={class:"col-md-12 col-lg-12"},zh=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Bh={class:"card"},Vh=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),qh={class:"card-body"},Hh={id:"table_service"},Gh={class:"card-footer"},Wh={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Kh=qs("i",{class:"fas fa-trash"},null,-1),Jh=["href"],Yh=[qs("i",{class:"fas fa-download"},null,-1)];Fh.render=function(e,t,a,n,l,s){const i=kl("modal-delete-confirm"),r=kl("tab-list"),o=kl("datatable");return Ps(),js("div",Dh,[qs("div",Rh,[zh,qs("div",Bh,[Vh,qs("div",qh,[qs("div",Hh,[Hs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(Ps(),Ls(o,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==l.service_table_tab?(Ps(),Ls(o,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),qs("div",Gh,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),qs("button",Wh,[Kh,Ks(" "+te(l.i18n("map_page.delete_services")),1)]),qs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Yh,8,Jh)])])])])},Fh.__file="http_src/vue/page-service-table.vue";const Zh={id:"empty-map-message",class:"alert alert-info",hidden:""},Xh=["id"];var Qh={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,n={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let l=null,s={},i={},r=null,o=!1,c=null,u={},d=!1;pl((async()=>{_(),u=a.url_params,r=document.getElementById(a.map_id);const e=NtopUtils.buildURL(a.url,u);await $.get(e,n,(function(e){const{nodes:t,edges:a,max_entry_reached:n}=e.rsp;o=n,s=new vis.DataSet(t),i=new vis.DataSet(a);const c={nodes:s,edges:i};p(c),l=new vis.Network(r,c,jh()),m(),f()}))})),ml((()=>{1!=d&&g()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],x.set_key_to_url("host",u.host),x.set_key_to_url("vlan_id",u.vlan_id),N.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=h()})),l.on("dragEnd",(function(e){v()})),l.on("afterDrawing",(function(e){N.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})l.on(e,a.event_listeners[e])},m=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(a.url,{...u,csrf:a.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},h=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(m)),v=()=>{c&&clearTimeout(c),m()},g=()=>{l&&l.destroy(!0),d=!0},b=async()=>{const e=NtopUtils.buildURL(a.url,u);await $.get(e,n,(function(e){const{nodes:t,edges:a,max_entry_reached:n}=e.rsp;o=n,s=new vis.DataSet(t),i=new vis.DataSet(a);const r={nodes:s,edges:i};p(r),l&&l.setData(r),m()}))};return t({reload:b,destroy:g,is_max_entry_reached:()=>o,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{m()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,a)=>(Ps(),js(Ss,null,[qs("div",Zh,te(e.empty_message),1),qs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Xh)],64))},__file:"http_src/vue/network-map.vue"},ev={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const n=ma(null),l=()=>{a("autolayout"),s()},s=()=>{n.value.close()};t({show:()=>{n.value.show()},close:s}),pl((()=>{}));const i=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vn((()=>[Ks(te(e.title),1)])),body:vn((()=>[Ks(te(e.body),1)])),footer:vn((()=>[qs("button",{type:"button",onClick:l,class:"btn btn-primary"},te(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const tv="change_filter_event";var av={components:{"network-map":Qh,"modal-delete-confirm":ih,"modal-autolayout-confirm":ev,"select-search":Rd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",tv,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(tv,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const nv={class:"row"},lv={class:"col-md-12 col-lg-12"},sv={class:"card card-shadow"},iv=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),rv={class:"card-body"},ov={id:"table_service"},cv={class:"d-flex align-items-center justify-content-end mb-2"},uv=["title"],dv=[qs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],pv={class:"d-flex ms-auto"},_v={class:"m-1"},fv=qs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[qs("i",{class:"fas fa-sync"})],-1),mv=qs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[qs("i",{class:"fas fa-magic"})],-1),hv={class:"card-footer"},vv={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},gv=qs("i",{class:"fas fa-trash"},null,-1),bv=["href"],yv=[qs("i",{class:"fas fa-download"},null,-1)];av.render=function(e,t,a,n,l,s){const i=kl("select-search"),r=kl("modal-delete-confirm"),o=kl("modal-autolayout-confirm"),c=kl("network-map");return Ps(),js("div",nv,[qs("div",lv,[qs("div",sv,[iv,qs("div",rv,[qs("div",ov,[qs("div",cv,[qs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},dv,8,uv),qs("div",pv,[(Ps(!0),js(Ss,null,Tl(l.filter_list,((e,t)=>(Ps(),js("div",_v,[Hs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),fv,mv]),Hs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),qs("div",hv,[qs("button",vv,[gv,Ks(" "+te(l.i18n("map_page.delete_services")),1)]),qs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},yv,8,bv)])])])])},av.__file="http_src/vue/page-service-map.vue";const wv="change_filter_event";var xv={components:{"network-map":Qh,"modal-delete-confirm":ih,"modal-autolayout-confirm":ev,"select-search":Rd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",wv,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(wv,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const kv={class:"row"},$v={class:"col-md-12 col-lg-12"},Sv={class:"card card-shadow"},Nv=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Cv={class:"card-body"},Av={id:"table_periodicity"},Tv={class:"d-flex align-items-center justify-content-end mb-2"},Ev=["title"],Pv=[qs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Uv={class:"d-flex ms-auto"},Mv={class:"m-1"},Iv=qs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[qs("i",{class:"fas fa-sync"})],-1),Ov=qs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[qs("i",{class:"fas fa-magic"})],-1),jv={class:"card-footer"},Lv={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Fv=qs("i",{class:"fas fa-trash"},null,-1),Dv=["href"],Rv=[qs("i",{class:"fas fa-download"},null,-1)];xv.render=function(e,t,a,n,l,s){const i=kl("select-search"),r=kl("modal-delete-confirm"),o=kl("modal-autolayout-confirm"),c=kl("network-map");return Ps(),js("div",kv,[qs("div",$v,[qs("div",Sv,[Nv,qs("div",Cv,[qs("div",Av,[qs("div",Tv,[qs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Pv,8,Ev),qs("div",Uv,[(Ps(!0),js(Ss,null,Tl(l.filter_list,((e,t)=>(Ps(),js("div",Mv,[Hs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Iv,Ov]),Hs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),qs("div",jv,[qs("button",Lv,[Fv,Ks(" "+te(l.i18n("map_page.delete_services")),1)]),qs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Rv,8,Dv)])])])])},xv.__file="http_src/vue/page-periodicity-map.vue";const zv="change_filter_event";var Bv={components:{"network-map":Qh,"modal-delete-confirm":ih,"modal-autolayout-confirm":ev,"select-search":Rd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",zv,(e=>{this.active_filter_list[e.id]=e,x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(zv,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const Vv={class:"row"},qv={class:"col-md-12 col-lg-12"},Hv={class:"card card-shadow"},Gv=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Wv={class:"card-body"},Kv={id:"table_asset"},Jv={class:"d-flex align-items-center justify-content-end mb-2"},Yv=["title"],Zv=[qs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Xv={class:"d-flex ms-auto"},Qv={class:"m-1"},eg=qs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[qs("i",{class:"fas fa-sync"})],-1),tg=qs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[qs("i",{class:"fas fa-magic"})],-1),ag={class:"card-footer"},ng={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},lg=qs("i",{class:"fas fa-trash"},null,-1),sg=["href"],ig=[qs("i",{class:"fas fa-download"},null,-1)];Bv.render=function(e,t,a,n,l,s){const i=kl("select-search"),r=kl("modal-delete-confirm"),o=kl("modal-autolayout-confirm"),c=kl("network-map");return Ps(),js("div",Vv,[qs("div",qv,[qs("div",Hv,[Gv,qs("div",Wv,[qs("div",Kv,[qs("div",Jv,[qs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Zv,8,Yv),qs("div",Xv,[(Ps(!0),js(Ss,null,Tl(l.filter_list,((e,t)=>(Ps(),js("div",Qv,[Hs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),eg,tg]),Hs(r,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),qs("div",ag,[qs("button",ng,[lg,Ks(" "+te(l.i18n("map_page.delete_services")),1)]),qs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},ig,8,sg)])])])])},Bv.__file="http_src/vue/page-asset-map.vue";var rg=Yn({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const og={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},cg={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},ug=["href","title"],dg=["title"],pg=["href","title"],_g=["title"],fg=qs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),mg=qs("button",{class:"navbar-toggler",type:"button"},[qs("span",{class:"navbar-toggler-icon"})],-1),hg={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},vg={class:"navbar-nav"},gg=["onClick"],bg={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},yg=["onClick"],wg={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},xg={class:"navbar-nav ms-auto"},kg=qs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[qs("i",{class:"fas fa-arrow-left"})],-1),$g=["href"],Sg=[qs("i",{class:"fas fa-question-circle"},null,-1)];rg.render=function(e,t,a,n,l,s){return Ps(),js("nav",og,[qs("span",cg,[qs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),js("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,ug)):(Ps(),js("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,dg)),(Ps(!0),js(Ss,null,Tl(e.secondary_title_list,(e=>(Ps(),js(Ss,null,[Ks(" / "),e.href?(Ps(),js("a",{key:0,href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),js("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],8,pg)):(Ps(),js("span",{key:1,title:e.title},te(e.label),9,_g))],64)))),256))]),fg,mg,qs("div",hg,[qs("ul",vg,[(Ps(!0),js(Ss,null,Tl(e.items_table,(e=>(Ps(),js(Ss,null,[e.active?(Ps(),js("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Ps(),js("span",bg,te(e.badge_num),1)):Ys("v-if",!0),qs("b",null,[qs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,gg)):(Ps(),js("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Ps(),js("span",wg,te(e.badge_num),1)):Ys("v-if",!0),qs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],8,yg))],64)))),256))]),qs("ul",xg,[kg,qs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},Sg,8,$g)])])])},rg.__file="http_src/vue/page-navbar.vue";const Ng={class:"form-group mb-3 row"},Cg={class:"col-form-label col-sm-4"},Ag={class:"col-sm-7"},Tg=qs("div",{class:"invalid-feedback"},null,-1),Eg={class:"form-group mb-3 row"},Pg={class:"col-form-label col-sm-4 pt-2"},Ug={class:"form-switch col-sm-7 pt-2 ps-3"},Mg={class:"col-form-label"};var Ig={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const n=ma(""),l=ma(""),s=ma(null),i=()=>{a("add",{mac_list:n.value,trigger_alerts:l.value}),r()},r=()=>{s.value.close()};t({show:()=>{n.value="",s.value.show()},close:r}),pl((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:vn((()=>[Ks(te(e.title),1)])),body:vn((()=>[qs("div",Ng,[qs("label",Cg,te(e.body),1),qs("div",Ag,[wl(qs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Ir,n.value]]),qs("small",null,te(e.list_notes),1),Tg])]),qs("div",Eg,[qs("label",Pg,te(o("edit_check.trigger_device_disconnected_alert")),1),qs("div",Ug,[wl(qs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>l.value=e)},null,512),[[Or,l.value]])]),qs("small",Mg,te(o("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vn((()=>[Ks(te(o("host_details.notes"))+": "+te(e.footer)+" ",1),qs("button",{type:"button",onClick:i,class:"btn btn-primary"},te(o("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Og={class:"form-group mb-3 row"},jg={class:"col-form-label col-sm-4"},Lg={class:"col-sm-7"},Fg={class:"form-group mb-3 row"},Dg={class:"col-form-label col-sm-4"},Rg={class:"col-sm-7"},zg={value:"allowed"},Bg={value:"denied"},Vg={class:"form-group mb-3 row"},qg={class:"col-form-label col-sm-4 pt-2"},Hg={class:"form-switch col-sm-7 pt-2 ps-3"},Gg={class:"col-form-label"};var Wg={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:a}){const n=ma(""),l=ma(""),s=ma(""),i=ma(null),r=()=>{a("edit",{mac_alias:n.value,mac_status:l.value,trigger_alerts:s.value}),o()},o=()=>{i.value.close()};t({show:e=>{l.value=e.status,n.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:o}),pl((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:vn((()=>[Ks(te(e.title),1)])),body:vn((()=>[qs("div",Og,[qs("label",jg,te(c("edit_check.device_alias")),1),qs("div",Lg,[wl(qs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Ir,n.value]])])]),qs("div",Fg,[qs("label",Dg,te(c("edit_check.device_status")),1),qs("div",Rg,[wl(qs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":a[1]||(a[1]=e=>l.value=e)},[qs("option",zg,te(c("allowed")),1),qs("option",Bg,te(c("denied")),1)],512),[[Fr,l.value]])])]),qs("div",Vg,[qs("label",qg,te(c("edit_check.trigger_device_disconnected_alert")),1),qs("div",Hg,[wl(qs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Or,s.value]])]),qs("small",Gg,te(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vn((()=>[qs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Kg={components:{"page-navbar":rg,datatable:Em,"modal-delete-confirm":ih,"modal-add-device-exclusion":Ig,"modal-edit-device-exclusion":Wg},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,a,n,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let a={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},n=ntopng_utility.clone(a);n.table_buttons=a.table_buttons,n.data_url=`${n.data_url}`,n.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,a){let n=e.label;return e.label!==e.mac&&(n=n+" ["+e.mac+"]"),e.url&&(n=`<a href='${e.url}' title='${e.mac}'>${n}</a>`),n}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,a,n){let l={handlerId:"delete_device",onClick:()=>{let a=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),a,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"pointer",handler:s,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:l,icon:"fa-trash",title:i18n("delete")}])}}],e.config_devices=n}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let a=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,a){this.row_to_delete=a,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const Jg={id:"navbar"},Yg={class:"row"},Zg={class:"col-md-12 col-lg-12"},Xg=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Qg={class:"card"},eb={class:"card-body"},tb={id:"devices-learning-status",class:"alert alert-info",hidden:""},ab={id:"table_devices_vue"},nb={class:"card-footer"},lb={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},sb=qs("i",{class:"fas fa-trash"},null,-1);Kg.render=function(e,t,a,n,l,s){const i=kl("page-navbar"),r=kl("modal-delete-confirm"),o=kl("modal-add-device-exclusion"),c=kl("modal-edit-device-exclusion"),u=kl("datatable");return Ps(),js(Ss,null,[qs("div",Jg,[Hs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),qs("div",Yg,[qs("div",Zg,[Xg,qs("div",Qg,[qs("div",eb,[qs("div",tb,te(l.learning_message),1),qs("div",ab,[Hs(r,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),Hs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),Hs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),qs("div",nb,[qs("button",lb,[sb,Ks(" "+te(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Kg.__file="http_src/vue/page-device-exclusions.vue";var ib={components:{datatable:Em},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],n=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[n,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const rb={class:"row"},ob={class:"col-md-12 col-lg-12"},cb=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ub={class:"card"},db={class:"card-body"},pb={id:"table_host_tls"},_b={class:"card-footer"};ib.render=function(e,t,a,n,l,s){const i=kl("datatable");return Ps(),js("div",rb,[qs("div",ob,[cb,qs("div",ub,[qs("div",db,[qs("div",pb,[Hs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),qs("div",_b,[qs("b",null,te(l.i18n("fingerprint_note")),1)])])])])},ib.__file="http_src/vue/page-host-tls.vue";var fb={components:{datatable:Em},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],n=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[n,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const mb={class:"row"},hb={class:"col-md-12 col-lg-12"},vb=qs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),gb={class:"card"},bb={class:"card-body"},yb={id:"table_host_ssh"};fb.render=function(e,t,a,n,l,s){const i=kl("datatable");return Ps(),js("div",mb,[qs("div",hb,[vb,qs("div",gb,[qs("div",bb,[qs("div",yb,[Hs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},fb.__file="http_src/vue/page-host-ssh.vue";const wb="change_map_event";var xb={components:{"page-periodicity-map":xv,"page-periodicity-table":wh,"page-asset-map":Bv,"page-asset-table":oh,"page-service-map":av,"page-service-table":Fh,"page-navbar":rg},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",wb,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(wb,e))}}};xb.render=function(e,t,a,n,l,s){const i=kl("page-navbar"),r=kl("page-service-map"),o=kl("page-service-table"),c=kl("page-periodicity-map"),u=kl("page-periodicity-table"),d=kl("page-asset-map"),p=kl("page-asset-table");return Ps(),js(Ss,null,[Hs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(Ps(),Ls(r,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(Ps(),Ls(o,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),js(Ss,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(Ps(),Ls(p,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},xb.__file="http_src/vue/page-home-map.vue";const kb=["width","height"],$b=[qs("defs",null,null,-1),qs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),qs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),qs("g",{class:"texts"},null,-1)];var Sb={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,n=ma(null),l=ma({});async function s(){return data=function(e){let t=[],a=[],n={};const l=(e,a,l)=>{if(null!=n[e])return;let s=t.length;n[e]=s;let i={index:s,name:e,href:a,color:l};t.push(i)},s=(e,t,l,s)=>{let i={source:n[e],target:n[t],value:l,label:s};a.push(i)};return e.forEach((e=>{l(e.source,e.source_link,e.source_color),l(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dl((async()=>{})),pl((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let i=await s();const r=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();l.value=r;const{links:o,nodes:c}=function(e,t,n){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,n]])(e)}(i,r.width-10,r.height-5);a.select(n.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const n=t.append("rect");n.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),n.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),n.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(n.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<r.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<r.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<r.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<r.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(n.value).select("defs").selectAll("linearGradient").data(o).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(n.value).select("g.links").selectAll("path").data(o).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),js("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:n,width:l.value.width,height:l.value.height,style:{margin:"10px"}},$b,8,kb))]))}};mp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),Sb.__file="http_src/vue/page-sankey.vue";const Nb="change_applications_tab_event";var Cb={components:{chart:Od,datatable:Em,"modal-delete-confirm":ih,"tab-list":th},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let a=url_params;a.view="applications";let n={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const n=100*a.bytes_sent/a.tot_bytes,l=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(n,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(n);s.columns_config=l,e.config_devices_applications=s,a.view="categories",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),l=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(n);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){N.on_custom_event("change_applications_tab_event",Nb,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const n=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,r,o)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${o[a].id};eq&ip=${n};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(Nb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const Ab={class:"row"},Tb={class:"col-md-12 col-lg-12"},Eb={class:"card"},Pb=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ub={class:"card-body"},Mb={id:"host_details_applications"},Ib={class:"row mb-4 mt-4",id:"host_details_applications"},Ob={class:"col-6"},jb={key:0,class:"widget-name"};Cb.render=function(e,t,a,n,l,s){const i=kl("tab-list"),r=kl("chart"),o=kl("datatable");return Ps(),js("div",Ab,[qs("div",Tb,[qs("div",Eb,[Pb,qs("div",Ub,[qs("div",Mb,[Hs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),qs("div",Ib,[(Ps(!0),js(Ss,null,Tl(l.chart_options,(e=>(Ps(),js("div",Ob,[e.tab==l.applications_tab?(Ps(),js("h3",jb,te(e.title),1)):Ys("v-if",!0),e.tab==l.applications_tab?(Ps(),Ls(r,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==l.applications_tab?(Ps(),Ls(o,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==l.applications_tab?(Ps(),Ls(o,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},Cb.__file="http_src/vue/page-host-details-applications.vue";const Lb={class:"row"},Fb={class:"col-md-12 col-lg-12"},Db={class:"card"},Rb=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),zb={class:"card-body"},Bb={id:"host_details_traffic"},Vb={class:"row mb-4 mt-4",id:"host_details_traffic"},qb={class:"col-4"},Hb={class:"widget-name"};var Gb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=ma(null);ma([]);const a=ma({}),n=()=>{t.value.reload()};dl((async()=>{!function(e){const t=[];let l={};l.host=x.get_url_entry("host"),l.vlan=x.get_url_entry("vlan"),l.ifid=x.get_url_entry("ifid"),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){n()}});let s={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const n=100*a.bytes_sent/a.total_bytes,l=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(n,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],r=ntopng_utility.clone(s);r.columns_config=i,a.value=r}()})),hl((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Ps(),js("div",Lb,[qs("div",Fb,[qs("div",Db,[Rb,qs("div",zb,[qs("div",Bb,[qs("div",Vb,[(Ps(),js(Ss,null,Tl(l,(e=>qs("div",qb,[qs("h3",Hb,te(e.title),1),Hs(Od,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(Em,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Wb={class:"row"},Kb={class:"col-md-12 col-lg-12"},Jb={class:"card"},Yb=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Zb={class:"card-body"},Xb={class:"row"},Qb={class:"col-6 mb-4 mt-4"},ey={class:"widget-name"};var ty={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function n(e,t,n){a.hideOverlays()}return pl((()=>{})),(e,a)=>(Ps(),js("div",Wb,[qs("div",Kb,[qs("div",Jb,[Yb,qs("div",Zb,[qs("div",Xb,[(Ps(),js(Ss,null,Tl(t,(e=>qs("div",Qb,[qs("h3",ey,te(e.title),1),Hs(Od,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:n},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const ay={class:"text-center"},ny={class:"spinner-border text-primary mt-5",role:"status"},ly={class:"sr-only position-absolute"};var sy={__name:"loading",props:{},setup(e,{expose:t}){const a=i18n("loading"),n=ma(null);return t({hide_loading:function(e=500){$(n.value).fadeOut(e)},show_loading:function(e=500){$(n.value).fadeIn(e)}}),(e,t)=>(Ps(),js("div",{ref_key:"overlay",ref:n,class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",ay,[qs("div",ny,[qs("span",ly,te(ya(a)),1)])])],512))},__file:"http_src/vue/loading.vue"};const iy={key:0,class:"alert alert-info",id:"empty-message"},ry=["width","height"],oy=[qs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),qs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var cy={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const n=e,l=d3v7,s=10,i=ma(!1),r=ma(null),o=ma({});function c(e){e&&($(".nodes",r.value).empty(),$(".links",r.value).empty()),null!=n.sankey_data.nodes&&null!=n.sankey_data.links&&0!=n.sankey_data.length&&0!=n.sankey_data.links.length&&p()}dl((async()=>{})),pl((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),jn((()=>n.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function p(){const e=l.scaleOrdinal(l.schemeCategory10);let t=n.sankey_data;const i=function(){a("update_width");let e=n.width;null==e&&(e=$(r.value).parent().parent().width()-10);a("update_height");let t=n.height;null==t&&(t=$(r.value).parent().parent().height()-80);return{width:e,height:t}}();var c,p;o.value=i,c=i.width-10,p=i.height-5,u=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(s).extent([[0,5],[c,p]]),d=u(t);const{links:h,nodes:v}=d;let g=l.select(r.value).select("g.nodes").selectAll("g").data(v).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",m),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/v.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e.label}`)),g.data(v).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<i.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),g.call(l.drag().subject((e=>e)).on("start",_).on("drag",f));const b=l.select(r.value).select("g.links").selectAll("g").data(h).join((e=>e.append("g")));let y=b.append("linearGradient");y.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),y.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/v.length))),y.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/v.length))),b.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),b.append("title").text((e=>`${e.label}`))}function _(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){l.select(this).attr("transform",(function(t){const a=e.x-t.__x,n=e.y-t.__y,i=o.value.width,r=o.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+n,t.y1=t.__y1+n,t.x0<0&&(t.x0=0,t.x1=s),t.x1>i&&(t.x0=i-s,t.x1=i),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>r&&(t.y0=r-(t.__y1-t.__y0),t.y1=r),u.update(d),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function m({transform:e}){g.attr("transform",e)}const h=e=>i18n(e);return t({draw_sankey:p,set_no_data_flag:function(e){i.value=e}}),(t,a)=>(Ps(),js(Ss,null,[i.value?(Ps(),js("div",iy,te(e.no_data_message||h("flows_page.no_data")),1)):Ys("v-if",!0),qs("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:r,width:o.value.width,height:o.value.height,style:{margin:"10px"}},oy,8,ry))])],64))}};mp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),cy.__file="http_src/vue/sankey_3.vue";let uy=d3v7;const dy={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:uy.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:uy.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:uy.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},py=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${a.bytesToSize(e.value)}`,_y={formatFlowTitle:py,get_data:async function(){return{}},getDefaultSankeySettings:function(){return dy}},fy={class:"row"},my={class:"col-md-12 col-lg-12"},hy={class:"card card-shadow"},vy={class:"card-body"},gy={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},by={class:"d-flex align-items-center mb-2"},yy={class:"d-flex no-wrap ms-auto"},wy={class:"m-1"},xy={style:{"min-width":"16rem"}},ky={class:"my-auto me-1"},$y=qs("label",{class:"my-auto me-1"},null,-1),Sy=[qs("span",null,[qs("i",{class:"fas fa-sync"})],-1)];var Ny={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),n=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,l=ma(null),s=ma(null),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const r=ma(i[0]),o=ma({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const n=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(n)}dl((()=>{})),pl((()=>{u()}));const u=function(){let e=r.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value.show_loading();let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${n}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let n=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],l=function(e,t,a){return e.filter((e=>{const n=t(e);return 0==n&&null!=a&&a(e),n}))}(e.links,n,t);return l}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const n=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},l=(e,a)=>e==t?e:`${a}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,r=n(e),o={source_node_id:l(e.source_node_id,r),target_node_id:l(e.target_node_id,r),label:e.label,value:e.value,data:e};if(-1==r){let n=a[e.target_node_id];t={node_id:o.target_node_id,label:n.label,data:n}}else{let n=a[e.source_node_id];t={node_id:o.source_node_id,label:n.label,data:n}}i.links.push(o),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let r=a[t];i.nodes.push({node_id:r.node_id,label:r.label,data:r}),i.nodes.forEach((e=>a[e.node_id]=e));const o=e=>`${n(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=o(e),n=c[t];null==n&&(n={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=n),n.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:p(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let _={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};_[e.node_id]=a,f.push(a)}));let m=d.map((e=>{let t=_[e.source_node_id],a=_[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:m}}(t,a);return s.links.length>0&&s.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),s}();o.value=e,s.value.hide_loading()}()},d=function(){u()};function p(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),js("div",fy,[qs("div",my,[qs("div",hy,[Hs(sy,{ref_key:"loading",ref:s},null,512),qs("div",vy,[qs("div",gy,[qs("div",by,[qs("div",yy,[qs("div",wy,[qs("div",xy,[qs("label",ky,te(a("hosts"))+": ",1),Hs(Rd,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:i,onSelect_option:u},null,8,["selected_option"])])]),qs("div",null,[$y,qs("div",null,[qs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},Sy)])])])]),Hs(cy,{ref_key:"sankey_chart",ref:l,onNode_click:c,sankey_data:o.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const Cy={id:"script-description",class:"notes bg-light border",role:"alert"},Ay=["innerHTML"];var Ty={__name:"note-list",props:{note_list:Array},setup(e){const t=e,a=e=>i18n(e);return(e,n)=>(Ps(),js("div",Cy,[qs("b",null,te(a("notes")),1),qs("ul",null,[(Ps(!0),js(Ss,null,Tl(t.note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,Ay)))),256))])]))},__file:"http_src/vue/note-list.vue"};const Ey={class:"form-group ms-2 me-2 mt-3 row"},Py={class:"col-form-label col-sm-2"},Uy={class:"col-sm-10"},My={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Iy={key:0,class:"form-group ms-2 me-2 mt-3 row"},Oy={class:"col-form-label col-sm-2"},jy={class:"col-sm-10"},Ly=["placeholder"],Fy={key:1,class:"form-group ms-2 me-2 mt-3 row"},Dy={class:"col-form-label col-sm-2"},Ry={class:"col-10"},zy={key:2,class:"form-group ms-2 me-2 mt-3 row"},By={class:"col-form-label col-sm-2"},Vy={key:0,class:"col-10"},qy={key:1,class:"col-10"},Hy={key:3,class:"form-group ms-2 me-2 mt-3 row"},Gy={class:"col-form-label col-sm-2"},Wy={class:"col-10"},Ky={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},Jy={class:"col-form-label col-sm-2"},Yy={class:"col-sm-3"},Zy={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Xy=["value","id"],Qy=["id","for"],ew=["value","id"],tw=["id","for"],aw=["value","id"],nw=["id","for"],lw={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},sw=["value","id"],iw=["id","for"],rw={key:4,class:"message alert alert-warning mt-3"},ow=["disabled"],cw=["disabled"];var uw={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,interface_metric_list:Array,frequency_list:Array,init_func:Function},emits:["add","edit"],setup(e,{expose:t,emit:a}){const n=e;ma(""),ma("");const l=ma(null),s=i18n("if_stats_config.add_host_rules_title"),i=i18n("if_stats_config.host_placeholder"),r=ma(!1),o=e=>i18n(e),c=ma([]),u=ma(null),d=ma(null),p=ma([]),_=ma([]),f=ma([]),m=ma(null),h=ma(null),v=ma({}),g=ma({}),b=ma({}),y=ma({}),w=ma(!0),x=ma({}),k=ma(!0),$=ma("hosts"),S=ma(!1),N=[o("if_stats_config.note_1"),o("if_stats_config.note_2"),o("if_stats_config.note_3"),o("if_stats_config.note_4"),o("if_stats_config.note_5")],C=ma([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",acrive:!1}]),A=ma([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),T=ma([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),E=ma([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),P=[{title:"+",label:"%",id:"plus",value:1,active:!0}],U=ma(null),M=ma(null);function I(e){e.forEach((e=>e.active=1==e.default_active))}const O=e=>{$.value=e},j=()=>{let e=new RegExp(Sf.get_data_pattern("ip"));w.value=!(e.test(U.value)||"*"===U.value)},L=e=>{const t=e.target.id;E.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},F=e=>{const t=e.target.id;"throughput"==x.value.id?T.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==x.value.id?A.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==x.value.id&&P.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},D=e=>{let t="";"Host"==$.value&&(t=U.value);const n=g.value.id,l=v.value.id,s="Host"==$.value?v.value.label:y.value.label,i=y.value.id,r=$.value,o=b.value.id,c=b.value.label;let u,d,p,_,f=x.value.id,m="Host"==$.value?v.value.extra_metric?v.value.extra_metric:null:y.value.extra_metric?y.value.extra_metric:null;!1===k.value&&(f="",m="",p=M.value.value),"throughput"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),T.value.forEach((e=>{e.active&&(u=e.value)})),p=u*parseInt(M.value.value)/8):"volume"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),A.value.forEach((e=>{e.active&&(u=e.value)})),p=u*parseInt(M.value.value)):"percentage"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),p=_*parseInt(M.value.value)):_=1;let h="add";1==e&&(h="edit"),"Host"==$.value?a(h,{host:t,frequency:n,metric:l,metric_label:s,threshold:p,metric_type:f,extra_metric:m,rule_type:r,rule_threshold_sign:_}):a(h,{frequency:n,metric:i,metric_label:s,threshold:p,metric_type:f,extra_metric:m,rule_type:r,interface:o,ifname:c,rule_threshold_sign:_}),z()},R=()=>{D(!0)},z=()=>{l.value.close()};return dl((()=>{C.value.forEach((e=>{e.active&&(x.value=e)}))})),t({show:e=>{U.value="",b.value=p.value[0],v.value=c.value[0],y.value=_.value[0],g.value=f.value[0],x.value=C.value[0],C.value.forEach((e=>e.active=!1)),C.value[0].active=!0,I(A.value),I(T.value),I(E.value),$.value="Host",w.value=!0,M.value.value=1,null!=e&&(e=>{null!=e&&(S.value=!0,w.value=!1,E.value.forEach((t=>{t.active=t.value==e.threshold_sign})),C.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,x.value=t):t.active=!1})),"volume"==e.metric_type?A.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,M.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,T.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,M.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):M.value.value=e.threshold,$.value=e.rule_type,"interface"==$.value?(p.value.forEach((t=>{t.id==e.target&&(b.value=t)})),null!=e.extra_metric?_.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(y.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(y.value=t)}))):(U.value=e.target,null!=e.extra_metric?c.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(v.value=t)})):c.value.forEach((t=>{t.id==e.metric&&(v.value=t)}))))})(e),l.value.show()},close:z,metricsLoaded:(e,t,a,l,s)=>{r.value=!0,c.value=e,_.value=a,p.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t}(t),f.value=n.frequency_list,g.value=f.value[0],v.value=c.value[0],b.value=p.value[0],l&&(u.value=l),s&&(d.value=s)}}),(e,t)=>(Ps(),Ls(hp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(ya(s)),1)])),body:vn((()=>[Ys(" Target information, here an IP is put "),qs("div",Ey,[qs("label",Py,[qs("b",null,te(o("if_stats_config.add_rules_type")),1)]),qs("div",Uy,[qs("div",My,[qs("label",{class:K(["btn",["Host"==$.value?"btn-primary active":"btn-secondary"]])},[qs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>O("Host"))}),Ks(" "+te(o("if_stats_config.add_rules_type_host")),1)],2),qs("label",{class:K(["btn",["interface"==$.value?"btn-primary active":"btn-secondary"]])},[qs("input",{onClick:t[1]||(t[1]=e=>O("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(o("if_stats_config.add_rules_type_interface")),1)],2)])])]),"Host"==$.value?(Ps(),js("div",Iy,[qs("label",Oy,[qs("b",null,te(o("if_stats_config.target")),1)]),qs("div",jy,[wl(qs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>U.value=e),onInput:j,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,Ly),[[Ir,U.value]])])])):Ys("v-if",!0),"interface"==$.value?(Ps(),js("div",Fy,[qs("label",Dy,[qs("b",null,te(o("if_stats_config.target_interface")),1)]),qs("div",Ry,[Hs(Rd,{selected_option:b.value,"onUpdate:selected_option":t[3]||(t[3]=e=>b.value=e),options:p.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),r.value?(Ps(),js("div",zy,[qs("label",By,[qs("b",null,te(o("if_stats_config.metric")),1)]),"Host"==$.value?(Ps(),js("div",Vy,[Hs(Rd,{selected_option:v.value,"onUpdate:selected_option":t[4]||(t[4]=e=>v.value=e),onSelect_option:t[5]||(t[5]=e=>{1==v.value.show_volume?k.value=!0:k.value=!1}),options:c.value},null,8,["selected_option","options"])])):(Ps(),js("div",qy,[Hs(Rd,{selected_option:y.value,"onUpdate:selected_option":t[6]||(t[6]=e=>y.value=e),onSelect_option:t[7]||(t[7]=e=>{1==y.value.show_volume?k.value=!0:k.value=!1}),options:_.value},null,8,["selected_option","options"])]))])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),r.value?(Ps(),js("div",Hy,[qs("label",Gy,[qs("b",null,te(o("if_stats_config.frequency")),1)]),qs("div",Wy,[Hs(Rd,{selected_option:g.value,"onUpdate:selected_option":t[8]||(t[8]=e=>g.value=e),options:f.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),qs("div",Ky,[qs("label",Jy,[qs("b",null,te(o("if_stats_config.threshold")),1)]),k.value?(Ps(),js(Ss,{key:0},[qs("div",Yy,[Hs(Rd,{selected_option:x.value,"onUpdate:selected_option":t[9]||(t[9]=e=>x.value=e),options:C.value},null,8,["selected_option","options"])]),qs("div",{class:K(["col-3",["throughput"==x.value.id?"p-0":""]])},[qs("div",Zy,["throughput"==x.value.id?(Ps(!0),js(Ss,{key:0},Tl(T.value,(e=>(Ps(),js(Ss,null,[qs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,Xy),qs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},te(e.label),11,Qy)],64)))),256)):Ys("v-if",!0),"percentage"==x.value.id?(Ps(),js(Ss,{key:1},Tl(P,(e=>(Ps(),js(Ss,null,[qs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,ew),qs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},te(e.label),11,tw)],64)))),64)):Ys("v-if",!0),"volume"==x.value.id?(Ps(!0),js(Ss,{key:2},Tl(A.value,(e=>(Ps(),js(Ss,null,[qs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,aw),qs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},te(e.label),11,nw)],64)))),256)):Ys("v-if",!0)])],2),qs("div",lw,[(Ps(!0),js(Ss,null,Tl(E.value,(e=>(Ps(),js(Ss,null,[qs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:h,name:"threshold_sign"},null,8,sw),qs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:L,for:e.id},te(e.label),11,iw)],64)))),256))])],64)):Ys("v-if",!0),qs("div",{class:K([k.value?"col-sm-2":"col-sm-8"])},["percentage"==x.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:M,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:M,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==x.value.id?(Ps(),js("div",rw,te(o("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vn((()=>[Hs(Ty,{note_list:N}),0==S.value?(Ps(),js("button",{key:0,type:"button",onClick:D,class:"btn btn-primary",disabled:w.value&&"Host"==$.value},te(o("add")),9,ow)):(Ps(),js("button",{key:1,type:"button",onClick:R,class:"btn btn-primary",disabled:w.value&&"Host"==$.value},te(o("apply")),9,cw))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const dw={class:"row"},pw={class:"col-md-12 col-lg-12"},_w={class:"card"},fw=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),mw={class:"card-body"},hw={class:"mb-4"},vw={id:"host_rules"},gw={class:"card-footer"};var bw={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,n=ma(null),l=ma(null),s=ma(null),i=e=>i18n(e),r=ma({}),o=ma({}),c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?is_ifname=true`,d=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,f=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,m=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],h={ifid:t.ifid,csrf:t.page_csrf};let v={},g=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let b=i("if_stats_config.delete_host_rules_description"),y=[],w=[],x=[];const k=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function S(e){await A(),await T(e)}const N=function(){const e=o.value;return o.value=null,e},C=function(){n.value.reload()},A=async function(){const e=r.value,t=a.buildURL(f,{...h,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){C()}))},T=async function(e){const t=a.buildURL(_,{...h,...e});await $.post(t,(function(e,t){C()}))},E=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,r.value=t,l.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,o.value=t,r.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},P=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){C()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return a=t.rule_type&&"interface"==t.rule_type?t.selected_iface:t.target,a}(0,a)}},{columnName:i("if_stats_config.rule_type"),targets:2,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return a=t.rule_type&&"interface"==t.rule_type?"<span class='badge bg-secondary'>Interface <i class='fas fa-ethernet'></i></span>":"<span class='badge bg-secondary'>Host <i class='fas fa-laptop'></i></span>",a}(0,a)}},{columnName:i("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?y.forEach((n=>{n.id==e&&(t.extra_metric?t.extra_metric==n.extra_metric&&(a=n.label):a=n.label)})):w.forEach((n=>{n.id==e&&(t.extra_metric?t.extra_metric==n.extra_metric&&(a=n.label):a=n.label)})),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return k.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:5,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=parseInt(e),l="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(l="< "),t.metric_type&&"throughput"==t.metric_type?n=l+a.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n=l+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type&&(e<0&&(e*=-1),n=l+a.fpercent(e)),n}(e,n)}},{columnName:i("metric_type"),visible:!1,targets:6,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return E(a)}}],n={table_buttons:e,data_url:a.buildURL(p,h),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};v=n};return dl((async()=>{P(),await async function(){const e=a.buildURL(c,h);await $.get(e,(function(e,t){y=e.rsp}))}(),await async function(){const e=a.buildURL(d,h);await $.get(e,(function(e,t){x=e.rsp}))}(),await async function(){const e=a.buildURL(u,h);await $.get(e,(function(e,t){w=e.rsp}))}(),s.value.metricsLoaded(y,x,w)})),hl((()=>{n.value.destroy_table()})),(e,t)=>(Ps(),js("div",dw,[qs("div",pw,[qs("div",_w,[fw,qs("div",mw,[qs("div",hw,[qs("h4",null,te(i("if_stats_config.traffic_rules")),1)]),qs("div",vw,[Hs(ih,{ref_key:"modal_delete_confirm",ref:l,title:ya(g),body:ya(b),onDelete:A},null,8,["title","body"]),Hs(uw,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(y),interface_metric_list:ya(w),frequency_list:k,init_func:N,onAdd:T,onEdit:S},null,8,["metric_list","interface_metric_list"]),Hs(Em,{ref_key:"table_host_rules",ref:n,table_buttons:ya(v).table_buttons,columns_config:ya(v).columns_config,data_url:ya(v).data_url,enable_search:ya(v).enable_search,table_config:ya(v).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),qs("div",gw,[Hs(Ty,{note_list:m})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const yw={class:"row"},ww={class:"col-md-12 col-lg-12"},xw={class:"card"},kw=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),$w={class:"card-body"},Sw={id:"host_details_ports"},Nw={class:"row mb-4 mt-4",id:"host_details_ports"},Cw={class:"col-6"};var Aw={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){ma(null),ma([]),ma({});const t=e=>i18n(e);dl((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),n.forEach((t=>{let n={...t.extra_params,...e};$.get(a.buildURL(t.url,n),(async function(e,a){let n=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;n.push({label:`${t} (${a})`})})),t.stats_rows=n}))}))}()})),pl((async()=>{a.hideOverlays()})),hl((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const n=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),js("div",yw,[qs("div",ww,[qs("div",xw,[kw,qs("div",$w,[qs("div",Sw,[qs("div",Nw,[(Ps(),js(Ss,null,Tl(n,(e=>qs("div",Cw,[Hs(Im,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const Tw={class:"row"},Ew={class:"col-12"},Pw={class:"card"},Uw={class:"card-body"},Mw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},Iw={class:"d-flex ms-auto flex-row-reverse"},Ow=qs("label",{class:"my-auto me-1"},null,-1),jw=[qs("span",null,[qs("i",{class:"fas fa-sync"})],-1)],Lw={key:0,class:"m-1"},Fw={style:{"min-width":"14rem"}},Dw={class:"my-auto me-1"};var Rw={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,n=e=>i18n(e),l=ma(null),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,r="alerts-map",o={},c=ma(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,n]of Object.entries(t))e=`${e}&${a}=${n}`;return e},d=function(){l.value.show_loading(),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()},p=function(){return async e=>{let n=function(e){let n={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(n=t)})),n&&n.chart&&n.chart.ntop_events){n.chart.events=n.chart.events||{};for(const[e,t]of Object.entries(n.chart.ntop_events))null!=t&&(n.chart.events[e]=a[t]||a.fnone)}return n&&n.xaxis&&n.xaxis.labels&&n.xaxis.labels.ntop_utils_formatter&&(n.xaxis.labels.formatter=a[n.xaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.yaxis&&n.yaxis.labels&&n.yaxis.labels.ntop_utils_formatter&&(n.yaxis.labels.formatter=a[n.yaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.tooltip&&n.tooltip.ntop_utils_formatter&&(n.tooltip.custom=a[n.tooltip.ntop_utils_formatter]),n}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return n.series=l.series||{},n}},_=function(e){l.value.show_loading(),x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()};return dl((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),pl((()=>{l.value.hide_loading()})),(t,a)=>(Ps(),js("div",Tw,[qs("div",Ew,[qs("div",Pw,[Hs(sy,{ref_key:"loading",ref:l},null,512),qs("div",Uw,[qs("div",Mw,[qs("div",Iw,[qs("div",null,[Ow,qs("div",null,[qs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},jw)])]),(Ps(!0),js(Ss,null,Tl(e.available_filters,((e,t,a)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",Lw,[qs("div",Fw,[qs("label",Dw,te(n("bubble_map."+t))+": ",1),Hs(Rd,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),qs("div",{id:r,style:{height:"90%"}},[Hs(Od,{ref_key:"bubble_chart",ref:c,id:r,chart_type:ya(s),base_url_request:i,get_params_url_request:u,get_custom_chart_options:p(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const zw={class:"row"},Bw={class:"col-12"},Vw={class:"card"},qw={class:"card-body"},Hw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},Gw={class:"d-flex ms-auto flex-row-reverse"},Ww=qs("label",{class:"my-auto me-1"},null,-1),Kw={class:"m-1"},Jw={key:0,style:{"min-width":"15rem"}},Yw={class:"my-auto me-1"};var Zw={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,n=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",r={},o=ma(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,n]of Object.entries(t))e=`${e}&${a}=${n}`;return e},u=function(){return async e=>{let n=function(e){let n={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(n=t)})),n&&n.chart&&n.chart.ntop_events){n.chart.events=n.chart.events||{};for(const[e,t]of Object.entries(n.chart.ntop_events))null!=t&&(n.chart.events[e]=a[t]||a.fnone)}return n&&n.xaxis&&n.xaxis.labels&&n.xaxis.labels.ntop_utils_formatter&&(n.xaxis.labels.formatter=a[n.xaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.yaxis&&n.yaxis.labels&&n.yaxis.labels.ntop_utils_formatter&&(n.yaxis.labels.formatter=a[n.yaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.tooltip&&n.tooltip.ntop_utils_formatter&&(n.tooltip.custom=a[n.tooltip.ntop_utils_formatter]),n}(Number(r.bubble_mode.id));const l=await ntopng_utility.http_request(e);return n.series=l.series||{},n}},d=function(e){x.set_key_to_url(e.filter_name,e.id),o.value.update_chart(`${s}?${c()}`)};return dl((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),(t,a)=>(Ps(),js("div",zw,[qs("div",Bw,[qs("div",Vw,[qs("div",qw,[qs("div",Hw,[qs("div",Gw,[Ww,(Ps(!0),js(Ss,null,Tl(e.available_filters,((e,t,a)=>(Ps(),js("div",Kw,[e.length>0?(Ps(),js("div",Jw,[qs("label",Yw,te(n("bubble_map."+t))+": ",1),Hs(Rd,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),qs("div",{id:i,style:{height:"90%"}},[Hs(Od,{ref_key:"bubble_chart",ref:o,id:i,chart_type:ya(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const Xw={class:"row"},Qw={class:"col-md-12 col-lg-12"},ex={class:"card card-shadow"},tx={class:"card-body"},ax={class:"d-flex align-items-center flex-row-reverse mb-2"},nx=qs("label",{class:"my-auto me-1"},null,-1),lx=[qs("span",null,[qs("i",{class:"fas fa-sync"})],-1)],sx={key:0,class:"m-1"},ix={style:{"min-width":"14rem"}},rx={class:"my-auto me-1"},ox=["title"],cx=[qs("button",{type:"button",class:"btn btn-link",disabled:""},[qs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var ux={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},n=e=>i18n(e),l=ma(!1),s=n("ports_analysis.max_entries"),i=n("ports_analysis.no_data"),r=ma(null),o=ma(null),c=ma(null),u=ma(null),d=ma({}),p=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,_=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=ma(null);function m(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dl((()=>{const e=x.get_url_entry("timeframe"),n=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),n||x.set_key_to_url("vlan","none"),n||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),pl((()=>{y(),w(),g()}));const h=function(){g()},v=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value.show_loading();let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let n="",l={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(l);n=""==t?`${p}?${s}`:`${_}?${s}`;return n}();let t=await b.http_request(e);(function(e){l.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let n=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],l=function(e,t,a){return e.filter((e=>{const n=t(e);return 0==n&&null!=a&&a(e),n}))}(e.links,n,t);return l}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let n=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let l=n(e),s=a[l];null==s&&(s={id:l,label:e.label,link:e.optional_info.link,node_links:[]},a[l]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let l=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],n={node_id:t.id,label:t.label,link:t.link};l.push(n),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:n.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value}),s.push({source_node_id:n.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value})}))}let i=l.map(((e,t)=>({index:t,label:e.label,data:e}))),r={};i.forEach(((e,t)=>r[e.data.node_id]=e));let o=s.map((e=>({source:r[e.source_node_id].index,target:r[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:o}}(t);return a.links.length>0&&a.nodes.length>0?r.value.set_no_data_flag(!1):r.value.set_no_data_flag(!0),a}();d.value=e,f.value.hide_loading()}()};function y(){u.value=$(o.value).height()-100}function w(){c.value=$(o.value).width()-10}return(t,p)=>(Ps(),js("div",Xw,[qs("div",Qw,[qs("div",ex,[Hs(sy,{ref_key:"loading",ref:f},null,512),qs("div",tx,[qs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:o},[qs("div",ax,[qs("div",null,[nx,qs("div",null,[qs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:h},lx)])]),(Ps(!0),js(Ss,null,Tl(e.available_filters,((e,t,l)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",sx,[qs("div",ix,[qs("label",rx,te(n("ports_analysis."+t))+": ",1),Hs(Rd,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:v},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==l.value?(Ps(),js("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},cx,8,ox)):Ys("v-if",!0)]),Hs(cy,{ref_key:"sankey_chart",ref:r,width:c.value,height:u.value,no_data_message:ya(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:m},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const dx={class:"row"},px={class:"col-md-12 col-lg-12"},_x={class:"card card-shadow"},fx={class:"card-body"},mx={id:"aggregated_live_flows"},hx={class:"d-flex align-items-center"},vx={class:"d-flex no-wrap ms-auto",style:{"text-align":"left","margin-right":"1rem","min-width":"20rem"}},gx={class:"my-auto me-1"};var bx={__name:"page-aggregated-live-flows",props:{is_ntop_enterprise_m:Boolean,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number},setup(e){const t=e,n=e=>i18n(e),l=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0},{label:n("application_proto_client_server"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0}],s=function(){if(t.is_ntop_enterprise_m)return ma(l);{let e=[];return l.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();const i=ma(l[0]);function r(){x.set_key_to_url("aggregation_criteria",i.value.param),d.aggregation_criteria=i.value.param,v(d)}const o=ma(null),c=ma({}),u=ma(null);let d={};const p=function(e,t){return t.client_name.alerted&&(t.client_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.client_name.complete_label),t.client_name.label&&""!=t.client_name.label?t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}">${t.client_name.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.client_name.label}</label>`+t.client_name.complete_label:t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.id}">${e.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.client_name.complete_label},_=function(e,t){return t.server_name.alerted&&(t.server_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.server_name.complete_label),t.server_name.label&&""!=t.server_name.label?t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}">${t.server_name.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.server_name.label}</label>`+t.server_name.complete_label:t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.id}">${e.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.server_name.complete_label},f=function(e,t){let a="";return 1==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}`:2==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}`:3==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}`:4==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}&server=${t.server_name.id}`:5==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}&client=${t.client_name.id}&server=${t.server_name.id}`:6==i.value.value&&(a=`${http_prefix}/lua/flows_stats.lua?flow_info=${t.info.id}`),`<a href=${a} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},m=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua`,h=()=>{u.value.reload()};async function v(e){const l=[];let s=x.obj_to_url_params(e);l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){h()}});const r=[];t.vlans.length>0&&r.push({filterTitle:n("map_page.vlans"),filters:t.vlans,filterMenuKey:"vlan_id",columnIndex:0,removeAllEntry:!0,callbackFunction:(e,a)=>{if(0!=a.id){let n={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:a.id,aggregation_criteria:i.value.param};x.set_key_to_url("vlan_id",a.id),e.ajax.url(`${m}?${x.obj_to_url_params(n)}`),o.value.show_loading(),e.ajax.reload(),o.value.hide_loading()}}});let d=8;1!=i.value.value&&(d=7),5==i.value.value&&(d=10);let v=i.value.table_id,g={table_buttons:l,data_url:`${m}?${s}`,enable_search:!0,table_filters:r,id:v,table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:6},{type:"file-size",targets:7},{type:"file-size",targets:8}]}};(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(v))&&(g.table_config.order=[[d,e.order]]);let b=[];b.push({orderable:!1,targets:0,name:"flows_icon",data:"client",className:"text-center",responsivePriority:1,render:(e,t,a)=>f(e,a)}),1==i.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`}):2==i.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)}):3==i.value.value?b.push({columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):t.is_ntop_enterprise_m&&(4==i.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):5==i.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`},{columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):6==i.value.value&&b.push({columnName:i18n("info"),targets:0,name:"info",data:"info",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.label}</label>`})),t.vlans.length>0&&(b.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}),d>1&&(d+=1),(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(v))&&(g.table_config.order=[[d,e.order]]),g.table_config.columnDefs=[{type:"file-size",targets:7},{type:"file-size",targets:8},{type:"file-size",targets:9}]),b.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("total_score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1}),2!=i.value.value&&4!=i.value.value&&b.push({columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1}),3!=i.value.value&&4!=i.value.value&&b.push({columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1}),b.push({columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)}),g.columns_config=b,c.value=g}return dl((async()=>{d=function(){let e={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:x.get_url_entry("vlan_id")||t.vlans,aggregation_criteria:x.get_url_entry("aggregation_criteria")||i.value.param,page:x.get_url_entry("page")||t.page,sort:x.get_url_entry("sort")||t.sort,order:x.get_url_entry("order")||t.order,start:x.get_url_entry("start")||t.start,length:x.get_url_entry("length")||t.length};i.value=l.find((t=>t.param==e.aggregation_criteria));for(const t in e)x.set_key_to_url(t,e[t]);return e}(),await v(d),function(){for(const e in d)x.set_key_to_url(e,d[e])}()})),(e,t)=>(Ps(),js("div",dx,[qs("div",px,[qs("div",_x,[Hs(sy,{ref_key:"loading",ref:o},null,512),qs("div",fx,[qs("div",mx,[(Ps(),Ls(Em,{ref_key:"table_aggregated_live_flows",ref:u,id:c.value.id,key:c.value.data_url,table_buttons:c.value.table_buttons,columns_config:c.value.columns_config,data_url:c.value.data_url,filter_buttons:c.value.table_filters,enable_search:c.value.enable_search,table_config:c.value.table_config},{menu:vn((()=>[qs("div",hx,[qs("div",vx,[qs("label",gx,te(n("criteria_filter"))+": ",1),Hs(Rd,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:ya(s),onSelect_option:r},null,8,["selected_option","options"])])])])),_:1},8,["id","table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"]))])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const yx={class:"dropdown",style:{display:"inline-block"}},wx={class:"btn btn-link dropdown-toggle",type:"button",id:"id","data-bs-toggle":"dropdown","aria-expanded":"false"},xx={class:"dropdown-menu","aria-labelledby":"id",style:{overflow:"scroll","max-height":"20rem"}};var kx={__name:"dropdown",props:{id:String},setup(e,{expose:t}){const a=si(),n=Ni(),l=ma([]),s=ma([]);return t({load_menu:function(){if(l.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&(e.forEach((e=>{let t=e,n=$("<div></div>")[0];const{vNode:s,el:i}=Nm(t,{app:a?.appContext?.app,element:n});l.value.push(i)})),Ja((()=>{l.value.forEach(((e,t)=>{let a=s.value[t];$(a).append(e)}))})))}}),(e,t)=>(Ps(),js("div",yx,[qs("button",wx,[Pl(e.$slots,"title")]),qs("ul",xx,[Ys(' <slot name="menu"></slot> '),(Ps(!0),js(Ss,null,Tl(l.value,((e,t)=>(Ps(),js("li",{ref_for:!0,ref:e=>{s.value[t]=e}},null,512)))),256))])]))},__file:"http_src/vue/dropdown.vue"};const $x={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},Sx={class:"col-sm-12 col-md-5"},Nx={class:"dataTables_info",role:"status","aria-live":"polite"},Cx={class:"col-sm-12 col-md-7"},Ax={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},Tx={class:"pagination"},Ex={class:"paginate_button page-item previous"},Px=["onClick"],Ux={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},Mx={class:"paginate_button page-item previous"};var Ix={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{emit:t}){const a=e,n=6,l=ma(0),s=ma(0),i=ma(0),r=ma(0),o="Pages %active_page of %total_pages, number of rows %total_rows",c=ma("");function u(){if(null==a.total_rows)return;let e=a.per_page;i.value=Number.parseInt((a.total_rows+e-1)/e),r.value>=i.value&&(r.value=0),s.value=n,l.value=0,i.value<s.value&&(s.value=i.value),f()}pl((()=>{u()})),jn((()=>[a.total_rows,a.per_page]),((e,t)=>{u()}),{flush:"pre"});const d=wi((()=>!(i.value<n)&&r.value>=s.value-1)),p=wi((()=>!(i.value<n)&&r.value<i.value-s.value+1));function _(e,a){r.value=e,null!=a&&(l.value=a),r.value==l.value&&l.value>0&&(l.value-=1);let n=l.value+s.value-1;r.value==n&&i.value-1>n&&(l.value+=1),f(),t("change_active_page",r.value)}function f(){c.value=o.replace("%active_page",m(`${r.value+1}`)).replace("%total_pages",m(`${i.value}`)).replace("%total_rows",m(`${a.total_rows}`))}function m(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return(e,t)=>(Ps(),js(Ss,null,[Ys(" PerPage "),qs("div",$x,[Ys(" div col-md-5 "),qs("div",Sx,[qs("div",Nx,te(c.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wl(qs("div",Cx,[qs("div",Ax,[qs("ul",Tx,[wl(qs("li",Ex,[qs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>_(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Jr,ya(d)]]),qs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[qs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{_(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),js(Ss,null,Tl(s.value,(e=>(Ps(),js("li",{onClick:t=>_(l.value+e-1),class:K([{active:r.value==l.value+e-1},"paginate_button page-item"])},[qs("a",Ux,te(l.value+e),1),Ys('  :key="total_rows"')],10,Px)))),256)),qs("li",{class:K(["paginate_button page-item next",{disabled:r.value==i.value-1}]),id:"default-datatable_next"},[qs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{_(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wl(qs("li",Mx,[qs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>_(i.value-1,i.value-s.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Jr,ya(p)]])])])],512),[[Jr,i.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const Ox=e=>(fn("data-v-61956e9e"),e=e(),mn(),e),jx={class:"button-group mb-2"},Lx={style:{float:"left"}},Fx=["value"],Dx={style:{"text-align":"right"}},Rx=[Ox((()=>qs("i",{class:"fas fa-refresh"},null,-1)))],zx=Ox((()=>qs("i",{class:"fas fa-eye"},null,-1))),Bx={class:"form-check form-switch ms-1"},Vx=["onUpdate:modelValue","onClick"],qx=["innerHTML"],Hx=["data-resizable-columns-id"],Gx=["onClick"],Wx={style:{display:"flex"}},Kx=["innerHTML"],Jx={class:"fa fa-fw fa-sort-up"},Yx={class:"fa fa-fw fa-sort-down"},Zx={key:0,scope:"col"},Xx=["innerHTML"];var Qx={__name:"table",props:{id:String,columns:Array,get_rows:Function,print_column_name:Function,print_html_row:Function,f_sort_rows:Function,paging:Boolean},setup(e,{expose:t}){const a=e,n=ma(!0),l=ma(null),s=ma(null);let i=0,r=[];const o=ma([]),c=ma([]),u=ma(0),d=[10,20,40,50,80,100],p=ma(10);async function _(){o.value=a.columns.map(((e,t)=>({visible:!0,sort:0,order:t,data:e}))),await b(),$(l.value).resizableColumns(),await Ja(),s.value.load_menu()}pl((async()=>{null!=a.columns&&_()})),jn((()=>a.columns),((e,t)=>{_()}),{flush:"pre"});const f=ma(null);async function m(e){i=e,1==a.paging?await b():y()}function h(e,t){if(e.sort=(e.sort+1)%3,o.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0==e.sort)return;if(a.paging)return void b();let n=function(){if(null!=a.f_sort_rows)return a.f_sort_rows;return(e,t,n)=>{let l=a.print_html_row(e.data,t),s=a.print_html_row(e.data,n);return 1==e.sort?l.localeCompare(s):s.localeCompare(l)}}();r=r.sort(((t,a)=>n(e,t,a))),y()}function v(){b()}let g=!0;async function b(){let e=await a.get_rows(i,p.value,o.value,g);g=!1,u.value=e.rows.length,1==a.paging&&(u.value=e.total_rows),r=e.rows,y()}function y(){let e=0;0==a.paging&&(e=i*p.value),c.value=r.slice(e,e+p.value)}return t({load_table:_,refresh_table:v}),(t,i)=>(Ps(),js(Ss,null,[qs("div",jx,[Ys(" TableHeader "),qs("div",Lx,[qs("label",null,[Ks(" Show "),wl(qs("select",{"onUpdate:modelValue":i[0]||(i[0]=e=>p.value=e),onClick:i[1]||(i[1]=e=>v())},[(Ps(),js(Ss,null,Tl(d,(e=>qs("option",{value:e},te(e),9,Fx))),64))],512),[[Fr,p.value]]),Ks(" Entries ")])]),qs("div",Dx,[qs("button",{class:"btn btn-link me-1",type:"button",onClick:v},Rx),Hs(kx,{id:e.id,ref_key:"dropdown",ref:s},{title:vn((()=>[zx])),menu:vn((()=>[(Ps(!0),js(Ss,null,Tl(o.value,(t=>(Ps(),js("div",Bx,[wl(qs("input",{class:"form-check-input","onUpdate:modelValue":e=>t.visible=e,onClick:e=>async function(e){a.paging&&await b(),n.value=!1,await Ja(),n.value=!0,await Ja(),setTimeout((async()=>{await Ja(),$(l.value).resizableColumns()}),0)}(),checked:"",type:"checkbox",id:"toggle-Begin"},null,8,Vx),[[Or,t.visible]]),qs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.print_column_name(t.data)},null,8,qx)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])]),Ys(" TableHeader "),n.value?(Ps(),js("div",{key:0,ref_key:"table_div",ref:f,class:"",style:{width:"100%",overflow:"scroll"}},[Ys(" Table "),qs("table",{ref_key:"table",ref:l,class:"table table-striped table-bordered mb-0",style:{"table-layout":"auto",width:"98.7%","white-space":"nowrap"},"data-resizable-columns-id":e.id},[Ys(" Table "),qs("thead",null,[qs("tr",null,[(Ps(!0),js(Ss,null,Tl(o.value,((t,a)=>(Ps(),js(Ss,null,[t.visible?(Ps(),js("th",{key:0,scope:"col",style:{cursor:"pointer"},onClick:e=>h(t,a)},[qs("div",Wx,[qs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Kx),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wl(qs("i",Jx,null,512),[[Jr,1==t.sort]]),wl(qs("i",Yx,null,512),[[Jr,2==t.sort]])])],8,Gx)):Ys("v-if",!0)],64)))),256))])]),qs("tbody",null,[(Ps(!0),js(Ss,null,Tl(c.value,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,Tl(o.value,(a=>(Ps(),js(Ss,null,[a.visible?(Ps(),js("td",Zx,[qs("div",{class:"wrap-column",innerHTML:e.print_html_row(a.data,t)},null,8,Xx)])):Ys("v-if",!0)],64)))),256))])))),256))])],8,Hx),Ys(" Table ")],512)):Ys("v-if",!0),Ys(" Table div"),qs("div",null,[Hs(Ix,{total_rows:u.value,per_page:p.value,onChange_active_page:m},null,8,["total_rows","per_page"])])],64))}};mp("\n.wrap-column[data-v-61956e9e] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  width:100%;\n}\n/*table {\n    table-layout:fixed;\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}*/\n"),Qx.__scopeId="data-v-61956e9e",Qx.__file="http_src/vue/table.vue";const ek={class:"row"},tk={class:"col-md-12 col-lg-12"},ak={class:"card card-shadow"},nk={class:"card-body"},lk={class:"d-flex align-items-center mb-2"},sk={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem"}},ik={class:"my-auto me-1"};var rk={__name:"page-aggregated-live-flows-v2",props:{vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number},setup(e){const t=e,n=e=>i18n(e),l=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto"},{label:n("client"),value:2,param:"client",table_id:"aggregated_client"},{label:n("server"),value:3,param:"server",table_id:"aggregated_server"},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server"}];ma(null);const s=ma(null),i=ma(l),r=ma(l[0]),o=ma({});function c(){x.set_key_to_url("aggregation_criteria",r.value.param),u()}function u(){o.value={columns:f(),get_rows:_,print_column_name:d,print_html_row:p,paging:!0}}function d(e){return null==e.columnName||""==e.columnName?"":e.columnName}function p(e,t){let a=t[e.data];return null!=e.render?e.render(a,null,t):a}async function _(e,a,n,l){let s=function(e,a,n,l){let s=n.find((e=>0!=e.sort)),i={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:x.get_url_entry("vlan_id")||t.vlans,aggregation_criteria:x.get_url_entry("aggregation_criteria")||r.value.param,page:x.get_url_entry("page")||t.page,sort:x.get_url_entry("sort")||t.sort,order:x.get_url_entry("order")||t.order,start:e*a,length:a};0==l&&null!=s&&(i.sort=s.data.data,i.order=1==s.sort?"asc":"desc");return i}(e,a,n,l);!function(e){x.add_obj_to_url(e)}(s);const i=x.obj_to_url_params(s),o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua?${i}`;let c=await b.http_request(o,null,null,!0);return{total_rows:c.recordsTotal,rows:c.rsp}}function f(){let e=[];return e.push({orderable:!1,targets:0,name:"flows_icon",data:"client",className:"text-center",responsivePriority:1,render:(e,t,a)=>v(e,a)}),1==r.value.value?e.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.label}</label>`}):2==r.value.value?e.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>m(e,a)}):3==r.value.value?e.push({columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>h(e,a)}):4==r.value.value&&e.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>m(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>h(e,a)}),t.vlans.length>0&&e.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}),e.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("total_score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1}),2!=r.value.value&&4!=r.value.value&&e.push({columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1}),3!=r.value.value&&4!=r.value.value&&e.push({columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1}),e.push({columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)}),e}dl((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;r.value=l.find((t=>t.param==e))}()})),pl((async()=>{u()}));const m=function(e,t){return t.client_name.alerted&&(t.client_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.client_name.complete_label),t.client_name.label&&""!=t.client_name.label?t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}">${t.client_name.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.client_name.label}</label>`+t.client_name.complete_label:t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.id}">${e.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.client_name.complete_label},h=function(e,t){return t.server_name.alerted&&(t.server_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.server_name.complete_label),t.server_name.label&&""!=t.server_name.label?t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}">${t.server_name.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.server_name.label}</label>`+t.server_name.complete_label:t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.id}">${e.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.server_name.complete_label},v=function(e,t){let a="";return 1==r.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}`:2==r.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}`:3==r.value.value?a=`${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}`:4==r.value.value&&(a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}&server=${t.server_name.id}`),`<a href=${a} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`};return(e,t)=>(Ps(),js("div",ek,[qs("div",tk,[qs("div",ak,[Ys(' <Loading ref="loading"></Loading> '),qs("div",nk,[qs("div",lk,[qs("div",sk,[qs("label",ik,te(n("criteria_filter"))+": ",1),Hs(Rd,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:i.value,onSelect_option:c},null,8,["selected_option","options"])])]),qs("div",null,[(Ps(),Ls(Qx,{ref_key:"table_aggregated_live_flows",ref:s,id:"table_aggregated_live_flows",key:o.value.columns,columns:o.value.columns,get_rows:(e,t,a,n)=>o.value.get_rows(e,t,a,n),print_column_name:e=>o.value.print_column_name(e),print_html_row:(e,t)=>o.value.print_html_row(e,t),paging:!0},null,8,["columns","get_rows","print_column_name","print_html_row"]))])])])])]))},__file:"http_src/vue/page-aggregated-live-flows-v2.vue"};const ok={id:"aggregated_live_flows"};var ck={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=ma({}),n=ma(null);return dl((()=>{!function(){const e=[];let l={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){n.value.reload()}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};i.columns_config=t.columns_config,a.value=i}()})),(e,t)=>(Ps(),js("div",ok,[Hs(Em,{ref_key:"table_test",ref:n,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const uk=[{name:"first_seen",data:"first_seen"},{name:"last_seen",data:"last_seen"},{name:"l4proto",data:"l4proto"},{name:"l7proto",data:"l7proto"},{name:"score",data:"score"},{name:"flow",data:"flow",orderable:!1},{name:"packets",data:"packets"},{name:"bytes",data:"bytes"},{name:"throughput",data:"throughput"},{name:"cli_asn",data:"cli_asn"},{name:"srv_asn",data:"srv_asn"},{name:"l7cat",data:"l7cat"},{name:"alert_id",data:"alert_id"},{name:"flow_risk",data:"flow_risk"},{name:"src2dst_tcp_flags",data:"src2dst_tcp_flags"},{name:"dst2src_tcp_flags",data:"dst2src_tcp_flags"},{name:"cli_nw_latency",data:"cli_nw_latency"},{name:"srv_nw_latency",data:"srv_nw_latency"},{name:"info",data:"info"},{name:"observation_point_id",data:"observation_point_id",className:"no-wrap"},{name:"probe_ip",data:"probe_ip"},{name:"cli_network",data:"cli_network"},{name:"srv_network",data:"srv_network"},{name:"cli_host_pool_id",data:"cli_host_pool_id"},{name:"srv_host_pool_id",data:"srv_host_pool_id"},{name:"input_snmp",data:"input_snmp"},{name:"output_snmp",data:"output_snmp"},{name:"cli_country",data:"cli_country"},{name:"srv_country",data:"srv_country"},{name:"community_id",data:"community_id"}],dk=e=>i18n(e);const pk={wrap_datatable_columns_config:function(e){return function(e){let t=dk(e.name);return null==t||""==t?"Test":`${t}`}}},_k={class:"mt-4 card card-shadow"},fk={class:"card-body",style:{}};var mk={__name:"page-test-new-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=uk,a={columns:t,get_rows:(e,a,n)=>async function(e,a,n){let l=[];for(let e=0;e<1e4;e+=1){let a={};t.forEach(((t,n)=>{a[t.name]="djaskldasj klasdjkldasj askdljkasdl",0==n&&(a[t.name]=`${e+1}`)})),l.push(a)}return{rows:l,total_rows:l.length}}(),print_column_name:pk.wrap_datatable_columns_config(t),print_html_row:(e,t)=>function(e,t){return t[e.name]}(e,t)};return ma({}),ma(null),dl((()=>{})),(e,t)=>(Ps(),js(Ss,null,[Ys(' <div id="aggregated_live_flows">           '),Ys(' <Datatable ref="table_test" '),Ys(' \t     :table_buttons="table_config.table_buttons" '),Ys(' \t     :columns_config="table_config.columns_config" '),Ys(' \t     :data_url="table_config.data_url" '),Ys(' \t     :filter_buttons="table_config.table_filters" '),Ys(' \t     :enable_search="table_config.enable_search" '),Ys(' \t     :table_config="table_config.table_config"> '),Ys(" </Datatable> "),Ys(" </div> "),qs("div",_k,[Ys(' <div class="card-body" style="width: 100%;overflow: scroll;"> '),qs("div",fk,[Hs(Qx,{id:"page-test",columns:a.columns,get_rows:a.get_rows,print_column_name:e=>a.print_column_name(e),print_html_row:(e,t)=>a.print_html_row(e,t),paging:!1},null,8,["columns","get_rows","print_column_name","print_html_row"])])])],2112))},__file:"http_src/vue/page-test-new-table.vue"};const hk={class:"container-fluid"},vk={class:"row form-group mb-3"},gk={class:"col col-md-12"},bk={class:"form-label"},yk={class:"row form-group mb-3"},wk={class:"col col-md-6"},xk={class:"form-label"},kk={class:"col col-md-6"},$k={class:"form-label"},Sk={key:0},Nk={key:1},Ck=["pattern"],Ak={class:"row form-group mb-3"},Tk={class:"col col-md-6"},Ek={class:"form-label"},Pk={class:"col col-md-6"},Uk={class:"form-label"},Mk={key:0},Ik={key:1},Ok=["pattern"],jk={class:"row form-group mb-3"},Lk={class:"col col-md-12"},Fk={class:"form-label"},Dk={class:"row form-group mb-3"},Rk={class:"col col-md-12"},zk={class:"form-label"},Bk=["disabled"];var Vk={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const n=e=>i18n(e),l=ma(null),s=ma(""),i=[{label:n("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:n("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:n("interface"),value:"interface"}];let r="source_to_dest";const o=[{label:n("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:n("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=ma({});let u="accept";const d=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],p=ma({}),_=ma(0),f=ma(0),m=ma({}),h=ma(""),v=ma(""),g=ma({}),y=ma(""),w=ma(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=ma([]),S=ma({}),N=ma({}),C=ma(""),A=wi((()=>M(m.value,v.value,h.value))),T=wi((()=>M(g.value,w.value,y.value))),E=ma(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==m.value.value?(await O(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(v.value=null!=e?e.source.value:"",j(h,m.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await O(),N.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function M(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let I=!1;async function O(){if(1==I)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),I=!0}function j(e,t){e.value=Sf.get_data_pattern(t)}const L=()=>{let e=m.value.value,t=v.value;"interface"==e&&(t=S.value.value);let n=g.value.value,l=w.value;"interface"==n&&(l=N.value.value);let s={src_type:e,src_value:t,dst_type:n,dst_value:l,policy:p.value.value,bidirectional:"bidirectional"==c.value.value},i="add";0==E.value&&(s.rule_id=_.value,s.new_rule_id=f.value,i="edit"),a(i,s),F()},F=()=>{l.value.close()};return t({show:(e,t)=>{!function(e,t){E.value=null==e,null!=t&&(u=t.value);if(0==E.value)s.value=n("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=n("edit"),m.value=i.find((t=>t.value==e.source.type)),g.value=i.find((t=>t.value==e.destination.type)),c.value=o.find((t=>t.bidirectional==e.bidirectional)),p.value=d.find((t=>t.value==e.action)),_.value=e.rule_id,f.value=e.rule_id;else{s.value=n("nedge.page_rules_config.modal_rule_config.title_add"),C.value=n("add");let e=i.find((e=>1==e.default));m.value=e,g.value=e,c.value=o.find((e=>e.value==r)),p.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),l.value.show()},close:F}),pl((()=>{})),(e,t)=>(Ps(),Ls(hp,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(s.value),1)])),body:vn((()=>[qs("div",hk,[Ys(" Rule ID "),wl(qs("div",vk,[qs("div",gk,[qs("label",bk,te(n("nedge.page_rules_config.rule_id")),1),wl(qs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[Ir,f.value]]),wl(qs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e)},null,512),[[Ir,_.value]])])],512),[[Jr,!E.value]]),Ys(" Source "),qs("div",yk,[qs("div",wk,[qs("label",xk,te(n("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(Rd,{selected_option:m.value,"onUpdate:selected_option":t[2]||(t[2]=e=>m.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:i},null,8,["selected_option"])]),qs("div",kk,[qs("label",$k,te(n("nedge.page_rules_config.source")),1),"interface"==m.value.value?(Ps(),js("div",Sk,[Hs(Rd,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",Nk,[wl(qs("input",{type:"text",class:"form-control",pattern:h.value,"onUpdate:modelValue":t[5]||(t[5]=e=>v.value=e)},null,8,Ck),[[Ir,v.value]])]))])]),Ys(" Dest "),qs("div",Ak,[qs("div",Tk,[qs("label",Ek,te(n("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(Rd,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:i},null,8,["selected_option"])]),qs("div",Pk,[qs("label",Uk,te(n("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Ps(),js("div",Mk,[Hs(Rd,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",Ik,[wl(qs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,Ok),[[Ir,w.value]])]))])]),Ys(" Direction "),qs("div",jk,[qs("div",Lk,[qs("label",Fk,te(n("nedge.page_rules_config.direction")),1),Hs(Rd,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:o},null,8,["selected_option"])])]),Ys(" Action "),qs("div",Dk,[qs("div",Rk,[qs("label",zk,te(n("nedge.page_rules_config.action")),1),Hs(Rd,{selected_option:p.value,"onUpdate:selected_option":t[11]||(t[11]=e=>p.value=e),options:d},null,8,["selected_option"])])])])])),footer:vn((()=>[qs("button",{type:"button",disabled:!ya(A)||!ya(T),onClick:L,class:"btn btn-primary"},te(C.value),9,Bk)])),_:1},512))}};mp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),Vk.__scopeId="data-v-50692d68",Vk.__file="http_src/vue/modal-nedge-add-rule-config.vue";const qk={class:"container-fluid"},Hk={class:"row form-group mb-3"},Gk={class:"col col-md-12"},Wk={class:"form-label"};var Kk={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const n=ma(null),l=e=>i18n(e),s=l("nedge.page_rules_config.modal_change_default_policy.title"),i=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],r=ma({}),o=()=>{n.value.close()};function c(){a("apply",r.value.value),o()}return t({show:e=>{r.value=i.find((t=>t.value==e.value)),n.value.show()},close:o}),(e,t)=>(Ps(),Ls(hp,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:n},{title:vn((()=>[Ks(te(ya(s)),1)])),body:vn((()=>[qs("div",qk,[Ys(" Default Policy "),qs("div",Hk,[qs("div",Gk,[qs("label",Wk,te(l("nedge.page_rules_config.default policy")),1),Hs(Rd,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:i},null,8,["selected_option"])])])])])),footer:vn((()=>[qs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(l("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const Jk={class:"mb-2"},Yk=qs("br",null,null,-1),Zk={class:"d-inline-block"},Xk={key:0,style:{color:"green"}},Qk={key:1,style:{color:"red"}},e$=[qs("i",{class:"fas fa-cog"},null,-1)],t$={id:"aggregated_live_flows"};var a$={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),n=500,l=ma({}),s=ma(null),i=ma(null),r=ma(null),o=ma({});function c(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function u(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function d(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}o.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function p(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let n=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:n}),d(e),h()}function _(e,a){let n=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:n}),h()}function f(){r.value.show(o.value)}dl((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){h()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){i.value.show(null,o.value)}});let r={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){let l="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(l="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${l};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return m(a)}}),r.columns_config=c,l.value=r}(),d()}));const m=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let n={"Content-Type":"application/json"},l=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:n,body:l}),h()}(e)}},n={handlerId:"edit_rule",onClick:()=>{i.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:n,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function h(){setTimeout((()=>{x.reload_url()}),n)}return(e,t)=>(Ps(),js(Ss,null,[qs("div",Jk,[qs("h2",null,te(a("nedge.rules_config_title")),1),Yk,qs("h5",Zk,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==o.value?.value?(Ps(),js("span",Xk,te(o.value?.label),1)):Ys("v-if",!0),"deny"==o.value?.value?(Ps(),js("span",Qk,te(o.value?.label),1)):Ys("v-if",!0),qs("small",null,[qs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:f},e$)])])]),qs("div",t$,[Hs(Em,{ref_key:"table_rules",ref:s,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(Vk,{ref_key:"modal_add_rule_config",ref:i,onAdd:u,onEdit:c},null,512),Hs(Kk,{ref_key:"modal_change_default_policy",ref:r,onApply:p},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const n$={key:0,class:"form-group ms-2 me-2 mt-3 row"},l$={class:"col-form-label col-sm-4"},s$={class:"col-8"},i$={key:1,class:"form-group ms-2 me-2 mt-3 row"},r$={class:"col-form-label col-sm-4"},o$={class:"col-8"},c$={class:"form-group ms-2 me-2 mt-3 row"},u$={class:"col-form-label col-sm-4"},d$={class:"col-8"},p$=["placeholder"],_$=["disabled"],f$=["disabled"];var m$={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const n=ma(null),l=ma(!1),s=e=>i18n(e),i=ma(!0);let r=i18n("add_application");const o=ma(i18n("details.custom_rules_placeholder")),c=ma({}),u=ma([]),d=ma(""),p=ma(""),_=ma(null),f=ma({}),m=[s("custom_categories.each_host_separate_line"),s("custom_categories.host_domain_or_port"),s("custom_categories.example_port_range"),s("custom_categories.domain_names_substrings")];const h=()=>{1==v()&&1==g()?i.value=!1:i.value=!0},v=()=>/^[A-Za-z0-9]*$/.test(p.value),g=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t))})),e},b=()=>{a("add",{l7_proto_id:_.value,protocol_alias:p.value,category:c.value.id,custom_rules:d.value,is_edit_page:l.value}),y()},y=()=>{n.value.close()};return dl((()=>{})),t({show:e=>{p.value="",c.value=u.value[0],d.value="",l.value=!1,r=i18n("add_application"),null!=e&&(_.value=e.application_id,l.value=!0,r=i18n("edit_application"),function(e){c.value={id:e.category_id,label:e.category},d.value=e.custom_rules.replace(",","\n"),f.value=e,p.value=e.application}(e)),n.value.show()},close:y,loadCategoryList:e=>{u.value=function(e){let t=[];return e.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)).forEach((e=>{let a={id:e.cat_id,label:e.name};t.push(a)})),t}(e)}}),(e,t)=>(Ps(),Ls(hp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:n},{title:vn((()=>[Ks(te(ya(r)),1)])),body:vn((()=>[wl(qs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>_.value=e),spellcheck:"false",hidden:""},null,512),[[Ir,_.value]]),0==l.value?(Ps(),js("div",n$,[qs("label",l$,[qs("b",null,te(s("app_name")),1)]),qs("div",s$,[wl(qs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e),onInput:h,spellcheck:"false"},null,544),[[Ir,p.value]])])])):(Ps(),js("div",i$,[qs("label",r$,[qs("b",null,te(s("category")),1)]),qs("div",o$,[Hs(Rd,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),qs("div",c$,[qs("label",u$,[qs("b",null,te(s("category_custom_rule")),1)]),qs("div",d$,[wl(qs("textarea",{class:"form-control",onInput:h,placeholder:o.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,p$),[[Ir,d.value]])])])])),footer:vn((()=>[Hs(Ty,{note_list:m}),0==l.value?(Ps(),js("button",{key:0,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},te(s("add")),9,_$)):(Ps(),js("button",{key:1,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},te(s("apply")),9,f$))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},h$={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const n=ma(null),l=e=>i18n(e),s=i18n("custom_categories.delete_app"),i=i18n("custom_categories.delete_app_confirm"),r=ma(null),o=()=>{a("remove",{protocol_alias:r.value}),c()},c=()=>{n.value.close()};return t({show:e=>{null!=e&&(r.value=e.application),n.value.show()},close:c}),(e,t)=>(Ps(),Ls(hp,{onShowed:t[1]||(t[1]=t=>e.showed()),ref_key:"modal_id",ref:n},{title:vn((()=>[Ks(te(ya(s)),1)])),body:vn((()=>[Ks(te(ya(i)),1)])),footer:vn((()=>[qs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(l("delete")),1)])),default:vn((()=>[wl(qs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>r.value=e),spellcheck:"false",hidden:""},null,512),[[Ir,r.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const v$=qs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[qs("div",{class:"text-center"},[qs("div",{class:"spinner-border text-primary mt-5",role:"status"},[qs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var g$={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=ma(null),n=ma(null),l=ma(null),s=ma({}),i=ma([]),r=ma(null),o=ma(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,p=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,_=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(p,{...a,...e});await $.get(n,(function(e,t){v(i18n("custom_categories.succesfully_removed"))}))},m=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const n={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(d,{...n,...e});await $.get(l,(function(e,t){"success"==t&&v(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))}))},h=e=>{l.value.show(e)},v=e=>{c=e,o.value=!1,setTimeout((()=>{o.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dl((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){h()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},n=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:_("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return b(a)}}],l=ntopng_utility.clone(a);l.columns_config=n,s.value=l}()})),pl((async()=>{await(async()=>{await $.get(u,(function(e,t){i.value=e.rsp})),l.value.loadCategoryList(i.value)})()})),hl((async()=>{a.value.destroy_table()}));const b=function(e){const t=[{class:"pointer",handler:{handlerId:"edit_rule",onClick:()=>{h(e)}},icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let a={handlerId:"delete_rule",onClick:()=>{var t;t=e,n.value.show(t)}};t.push({class:"pointer",handler:a,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(t)};return(t,u)=>(Ps(),js(Ss,null,[v$,wl(qs("div",{ref_key:"update_message",ref:r,class:"alert alert-info"},te(ya(c)),513),[[Jr,!o.value]]),Hs(m$,{ref_key:"modal_add_application",ref:l,category_list:i.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:m},null,8,["category_list","page_csrf","ifid"]),Hs(h$,{ref_key:"modal_delete_application",ref:n,onRemove:f},null,512),Hs(Em,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const b$={class:"row"},y$={class:"col-12"},w$={class:"card card-shadow"},x$={class:"card-body"},k$={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},$$={key:2,class:"alert alert-info alert-dismissable"},S$=qs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),N$=["innerHTML"],C$=["innerHTML"];var A$={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=ma(!1),n=i18n("map_page.fetch_error"),l=ma(!1),s=ma(null),i=ma({}),r=ma(null),o=ma(""),c=i18n("discover.network_discovery_not_enabled"),u=ma(null),d=i18n("discover.ghost_icon_descr"),p=i18n("discover.too_many_devices_descr"),_=ma(!1);let f;const m=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],h=`${http_prefix}/lua/get_discover_progress.lua`,v=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value.hide_loading(),await $.get(NtopUtils.buildURL(h,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(l.value=!0,""!=e.rsp.progress&&(r.value=e.rsp.progress)):(l.value=!1,r.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==_.value&&(m.unshift(d),_.value=!0),1==e.too_many_devices_message&&0==p.value&&(m.unshift(p),p.value=!0),0==e.ghost_found&&0==_.value&&(m.shift(),_.value=!1),0==e.too_many_devices_message&&1==p.value&&(m.shift(),p.value=!1),o.value=e.last_network_discovery})(e.rsp)}))},y=()=>{s.value.reload()};return pl((()=>{f=setInterval(b,3e3)})),dl((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){y()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value.show_loading(),$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(v,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],n=ntopng_utility.clone(e);n.columns_config=a,i.value=n}()})),hl((async()=>{s.value.destroy_table()})),(e,t)=>(Ps(),js("div",b$,[qs("div",y$,[qs("div",w$,[Hs(sy,{ref_key:"loading",ref:u},null,512),qs("div",x$,[a.value?(Ps(),js("div",k$,te(ya(n)),1)):Ys("v-if",!0),l.value?(Ps(),js("div",$$,[S$,Ks(" "+te(ya(c))+" ",1),qs("span",{innerHTML:r.value},null,8,N$)])):(Ps(),Ls(Em,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:i.value.table_buttons,columns_config:i.value.columns_config,data_url:i.value.data_url,enable_search:i.value.enable_search,table_config:i.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(Ty,{note_list:m}),Ys(" Adding Extra Message "),qs("div",{class:"p-1",innerHTML:o.value},null,8,C$)])])])]))},__file:"http_src/vue/page-network-discovery.vue"},T$={components:{modal:hp,"select-search":Rd},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):Sf.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),n=a.options.find((e=>e.value==this.option_selected.value));e=n.value,t=n.value_label||n.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const E$=e=>(fn("data-v-3119c83e"),e=e(),mn(),e),P$={autocomplete:"off"},U$={class:"form-group row"},M$=E$((()=>qs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[qs("b",null,"Filter")],-1))),I$={class:"col-sm-8"},O$=E$((()=>qs("hr",null,null,-1))),j$={class:"dt-filter-template-container form-group row"},L$={class:"col-form-label col-sm-3"},F$={class:"col-sm-8"},D$={class:"input-group mb-3"},R$={class:"input-group-prepend col-sm-3"},z$={key:0,class:"col-sm-9"},B$=["pattern","required"],V$={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},q$=["disabled"];mp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),T$.render=function(e,t,a,n,l,s){const i=kl("select-search"),r=kl("modal");return Ps(),Ls(r,{id:l.id_modal,ref:"modal"},{title:vn((()=>[Ks(te(l.i18n("alerts_dashboard.add_filter")),1)])),body:vn((()=>[qs("form",P$,[qs("div",U$,[M$,qs("div",I$,[Hs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),O$,qs("div",j$,[qs("label",L$,[qs("b",null,te(l.filter_type_label_selected),1)]),qs("div",F$,[qs("div",D$,[qs("div",R$,[Hs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(Ps(),js("div",z$,[Hs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Ps(),js(Ss,{key:1},[wl(qs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,B$),[[Ir,l.input_value]]),qs("span",V$,te(l.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:vn((()=>[qs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(l.i18n("apply")),9,q$)])),_:1},8,["id"])},T$.__scopeId="data-v-3119c83e",T$.__file="http_src/vue/modal-filters.vue";let H$,G$,W$=[];const K$=!0;let J$,Y$,Z$=null!=window.location.toString().match(/alert_stats.lua/),X$={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==X$.value&&(X$.value="");let Q$=ntopng_url_manager.get_url_entry("status");null!=Q$&&""!=Q$||(Q$="historical");const eS=!Z$;let tS=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Z$);const aS=async function(){W$=await async function(e,t){let a;if(e)a=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),a=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(a)}(Z$,tS),W$.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),W$.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},H$={},G$={},W$.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>H$[e.id]=e.label)),G$[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,n]of e){let e=W$.find((e=>e.id==a));if(null!=e){n.split(",").forEach((a=>{let[n,l]=a.split(";");null==l||null==n||""==l||null!=e.options&&null==e.options.find((e=>e.value==n))||t.push({id:e.id,operator:l,value:n})}))}}return t};var nS={props:{id:String},components:{"data-time-range-picker":zd,"modal-filters":T$},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,a=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,n=await ntopng_utility.http_request(a),l=n[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(n.length>1&&n[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,n}(this),"all"!=this.page){let e=await aS();Y$=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            ${!K$&&e.operators?`<select class='operator'>${e.operators.map((t=>`<option ${e.selectedOperator===t?"selected":""} value='${t}'>${H$[t]}</option>`)).join()}</select>`:`<b class='operator'>${e.selectedOperator?H$[e.selectedOperator]:"="}</b>`}&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(J$)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(G$[e.key]&&!Array.isArray(G$[e.key])&&(e.operators=G$[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,n=ntopng_status_manager.get_status();if(void 0===t)return;if(null==n.filters)return;const l=n.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const n=a.data;e.edit_tag=n,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:n.key,operator:n.selectedOperator,value:n.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=W$,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Z$,query_presets:[],query_preset:X$,status_view:Q$,enable_query_presets:eS,page:tS,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=G$[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(W$.map((e=>e.id))),Y$.tagify.removeAllTags();let a=function(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let n=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=n}return a}(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=W$.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let n=t.options.find((t=>t.value==e.value));null!=n&&(a=n.label)}const n={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==n.value&&(n.value="''"),null==n.realValue||null==n.selectedOperator||""==n.selectedOperator?null:n}(e);null!=t&&Y$.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const lS=e=>(fn("data-v-aaee59ea"),e=e(),mn(),e),sS={style:{width:"100%"}},iS={class:"mb-1"},rS={key:0,class:"d-flex align-items-center me-2"},oS={class:"btn-group",id:"statusSwitch",role:"group"},cS=["value"],uS=["label"],dS=["value"],pS={key:0,class:"d-flex mt-1",style:{width:"100%"}},_S=["placeholder"],fS=[lS((()=>qs("span",null,[qs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],mS=[lS((()=>qs("i",{class:"fas fa-times"},null,-1)))];mp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),nS.render=function(e,t,a,n,l,s){const i=kl("modal-filters"),r=kl("data-time-range-picker");return Ps(),js("div",sS,[qs("div",iS,[Hs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(r,{id:l.id_data_time_range_picker},{begin:vn((()=>[l.is_alert_stats_url?(Ps(),js("div",rS,[qs("div",oS,[qs("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),qs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:K(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(Ps(),js("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Ys("v-if",!0)])])):Ys("v-if",!0),l.enable_query_presets?wl((Ps(),js("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(Ps(!0),js(Ss,null,Tl(l.query_presets,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,cS)):Ys("v-if",!0)],64)))),256)),"analysis"!=l.page?(Ps(),js("optgroup",{key:0,label:l.i18n("queries.queries")},[(Ps(!0),js(Ss,null,Tl(l.query_presets,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,dS))],64)))),256))],8,uS)):Ys("v-if",!0)],544)),[[Fr,l.query_preset]]):Ys("v-if",!0)])),extra_buttons:vn((()=>[Pl(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Ys(" tagify "),"all"!=l.page?(Ps(),js("div",pS,[qs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,_S),wl(qs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},fS,512),[[Jr,l.modal_data&&l.modal_data.length>0]]),wl(qs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},mS,512),[[Jr,l.modal_data&&l.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},nS.__scopeId="data-v-aaee59ea",nS.__file="http_src/vue/range-picker.vue";var hS={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id),a=this.chart_options.statistics.total,n=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,r=this.chart_options.statistics.by_serie[0]["95th_percentile"],o=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*n),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*r),this.percentile_rcvd=e(8*o),this.total=t(a)}}};const vS={class:"table table-borderless graph-statistics mb-2",style:{}},gS=qs("thead",{class:"text-center"},[qs("tr",null,[qs("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),qs("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[Ks("95th "),qs("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),Ks(":")]),qs("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),qs("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),bS={class:"graph-val-total text-center",style:{"border-width":"1px"}},yS={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},wS=qs("br",null,null,-1),xS={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},kS=qs("br",null,null,-1),$S={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},SS=qs("br",null,null,-1);hS.render=function(e,t,a,n,l,s){return Ps(),js("div",null,[qs("table",vS,[gS,qs("tbody",null,[qs("tr",null,[qs("td",bS,[qs("span",null,te(l.total),1)]),qs("td",yS,[qs("span",null,[Ks(te(l.percentile_sent)+" [Sent]",1),wS,Ks(te(l.percentile_rcvd)+" [Rcvd]",1)])]),qs("td",xS,[qs("span",null,[Ks(te(l.avg_sent)+" Kbit/s [Sent]",1),kS,Ks(te(l.avg_rcvd)+" [Rcvd]",1)])]),Ys(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),qs("td",$S,[qs("span",null,[Ks(te(l.max_sent)+" [Sent]",1),SS,Ks(te(l.max_rcvd)+" [Rcvd]",1)])])])])])])},hS.__file="http_src/vue/simple-table.vue";const NS={key:0,class:"alert alert-info",id:"empty-message"},CS=["id"];var AS={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const a=e,n=ma(!1);const l=e=>i18n(e);return pl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return a.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(a.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={..._y.getDefaultSankeySettings(),...a.extra_settings};const n=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),r=d3v7.map(e,t.linkLink).map(A),o=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,m=Array.from(d3v7.union(n,l),(e=>({id:e})));const h=d3v7.map(m,t.nodeId).map(A);t.nodeGroups=d3v7.map(m,t.nodeGroup).map(A),m=d3v7.map(m,((e,t)=>({id:h[t]}))),f=d3v7.map(f,((e,t)=>({source:n[t],target:l[t],value:o[t],source_node:s[t],target_node:i[t],link:r[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const v=d3v7.scaleOrdinal(t.nodeGroups,t.colors),g=d3v7.map(m,t.nodeLabel),b=d3v7.map(m,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>h[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:m,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,N=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),C=d3v7.drag().on("start",(function(e,t){const a=d3v7.select(this);k=a.attr("x")-e.x,$=a.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),N.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(m).join("rect").call(C).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,a=e.targetLinks,n=t&&t[0]?t[0]:a[0];n&&(n.source.id===e.id?n.source_link&&""!==n.source_link&&window.open(n.source_link,"_blank"):n.target.id===e.id&&n.target_link&&""!==n.target_link&&window.open(n.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const a=e.sourceLinks;let n=v(t.nodeGroups[e.index]);return a&&a[0]&&(a[0].source.id===e.id?a[0].source_color&&""!==a[0].source_color&&(n=a[0].source_color):a[0].target.id===e.id&&a[0].target_color&&""!==a[0].target_color&&(n=a[0].target_color)),n})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(m).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>g[e])),Object.assign(x.node(),{scales:{color:v}})}(l);n.value=!1,$(`#${a.id}`).empty(),$(`#${a.id}`).append(e)}else $(`#${a.id}`).empty(),n.value=!0})),NtopUtils.hideOverlays()}}),(t,a)=>(Ps(),js(Ss,null,[n.value?(Ps(),js("div",NS,te(l("flows_page.no_data")),1)):Ys("v-if",!0),qs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,CS)],64))},__file:"http_src/vue/sankey.vue"};const TS=e=>(fn("data-v-7e5acce0"),e=e(),mn(),e),ES={class:"mb-3 row"},PS={class:"col-form-label col-sm-4"},US={class:"col-sm-6"},MS={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},IS=TS((()=>qs("hr",null,null,-1))),OS={class:"host-alert-fields"},jS={class:"mb-3 row"},LS={class:"col-form-label col-sm-4"},FS={class:"col-sm-6"},DS={value:""},RS={value:"0"},zS={disabled:""},BS=["value"],VS={class:"flow-alert-fields"},qS={class:"mb-3 row"},HS={class:"col-form-label col-sm-4"},GS={class:"col-sm-6"},WS={value:""},KS={value:"0"},JS={disabled:""},YS=["value"],ZS={key:0,class:"ip-fields"},XS={class:"mb-3 row"},QS={class:"col-form-label col-sm-4"},eN={class:"col-sm-6"},tN=["pattern"],aN={key:1,class:"network-fields"},nN={class:"mb-3 row"},lN={class:"col-form-label col-sm-4"},sN={class:"col-sm-4 pr-0"},iN=["pattern"],rN={class:"col-sm-2 ps-4 pe-0"},oN=TS((()=>qs("span",{class:"me-2"},"/",-1))),cN={class:"mb-3 row"},uN={class:"col-form-label col-sm-4"},dN={class:"col-sm-6"},pN={class:"mb-3 row"},_N={class:"col-form-label col-sm-4"},fN={key:0},mN={key:1},hN={class:"col-sm-6"},vN=["pattern"],gN=["pattern"],bN=TS((()=>qs("hr",{class:"separator mt-5"},null,-1))),yN={class:"form-group row"},wN={class:"col-form-label"},xN={class:"mt-1"},kN=["placeholder"],$N=["disabled"];var SN={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null);ma(null);const s=ma("ip"),i=ma(""),r=ma(""),o=ma(0),c=ma(""),u=ma(""),d=ma(""),p=ma(""),_=ma(null),f=i18n("details.comment_placeholder"),m=ma(null),h=ma(null);function v(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,n=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${n})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=v("ip"),b=v("text"),y=v("certificate");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==n.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==r.value||""==r.value||0==e.test(r.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==n.alert_exclusions_page?(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==n.alert_exclusions_page&&(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{l.value.close()},$=()=>{let e,t=i.value;"hosts"==n.alert_exclusions_page?("network"==s.value&&(t=`${r.value}/${p.value}`),null!=o.value&&0!=o.value&&(t=`${t}@${o.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==n.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==n.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=_.value,m.value&&(e.old_type=h.value.type,e.old_subdir=h.value.subdir,e.old_alert_domain=h.value.alert_domain,e.old_alert_certificate=h.value.alert_certificate,e.old_alert_addr=h.value.alert_addr,e.old_flow_alert_key=h.value.flow_alert_key,e.old_host_alert_key=h.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(m.value=!0,h.value=e,_.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",r.value=t[0],p.value=t[1],i.value=""):(s.value="ip",i.value=a[0],r.value="",p.value=""),a.length>1?o.value=a[1]:o.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",i.value="",r.value="",o.value=0,u.value="",d.value="",p.value="",c.value="",_.value="";l.value.show()},close:k}),pl((()=>{}));const S=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(S("check_exclusion.add_exclusion")),1)])),body:vn((()=>["hosts"==e.alert_exclusions_page?(Ps(),js(Ss,{key:0},[Ys(" modal hosts "),qs("div",ES,[qs("label",PS,[qs("b",null,te(S("check_exclusion.member_type")),1)]),qs("div",US,[qs("div",MS,[qs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[qs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(S("check_exclusion.ip_address")),1)],2),qs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[qs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(S("check_exclusion.network")),1)],2)])])]),IS,qs("div",OS,[qs("div",jS,[qs("label",LS,[qs("b",null,te(S("check_exclusion.host_alert_type")),1)]),qs("div",FS,[wl(qs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[qs("option",DS,te(S("check_exclusion.none")),1),qs("option",RS,te(S("check_exclusion.exclude_all_alerts")),1),qs("option",zS,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,Tl(e.host_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,BS)):Ys("v-if",!0)],64)))),256))],512),[[Fr,u.value]])])])]),qs("div",VS,[qs("div",qS,[qs("label",HS,[qs("b",null,te(S("check_exclusion.flow_alert_type")),1)]),qs("div",GS,[wl(qs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[qs("option",WS,te(S("check_exclusion.none")),1),qs("option",KS,te(S("check_exclusion.exclude_all_alerts")),1),qs("option",JS,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,Tl(e.flow_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,YS)):Ys("v-if",!0)],64)))),256))],512),[[Fr,d.value]])])])]),"ip"==s.value?(Ps(),js("div",ZS,[qs("div",XS,[qs("label",QS,[qs("b",null,te(S("check_exclusion.ip_address")),1)]),qs("div",eN,[wl(qs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>i.value=e)},null,8,tN),[[Ir,i.value]])])])])):Ys("v-if",!0),"network"==s.value?(Ps(),js("div",aN,[qs("div",nN,[qs("label",lN,[qs("b",null,te(S("check_exclusion.network")),1)]),qs("div",sN,[wl(qs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>r.value=e)},null,8,iN),[[Ir,r.value]])]),qs("div",rN,[oN,wl(qs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>p.value=e)},null,512),[[Ir,p.value]])])])])):Ys("v-if",!0),qs("div",cN,[qs("label",uN,[qs("b",null,te(S("vlan")),1)]),qs("div",dN,[wl(qs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>o.value=e),class:"form-control"},null,512),[[Ir,o.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),js(Ss,{key:1},[Ys(" modal domain_names"),qs("div",null,[qs("div",pN,[qs("label",_N,["domain_names"==e.alert_exclusions_page?(Ps(),js("b",fN,te(S("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),js("b",mN,te(S("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),qs("div",hN,["domain_names"==e.alert_exclusions_page?wl((Ps(),js("input",{key:0,placeholder:"",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,vN)),[[Ir,c.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wl((Ps(),js("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,gN)),[[Ir,c.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),bN,qs("div",yN,[qs("div",null,[qs("label",wN,[qs("b",null,te(S("show_alerts.add_a_comment")),1)])]),qs("div",xN,[wl(qs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>_.value=e),maxlength:"450"},null,8,kN),[[Ir,_.value]])])])])),footer:vn((()=>[qs("button",{type:"button",disabled:x(),onClick:$,class:"btn btn-primary"},te(S("add")),9,$N)])),_:1},512))}};mp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),SN.__scopeId="data-v-7e5acce0",SN.__file="http_src/vue/modal-add-check-exclusion.vue";const NN=e=>(fn("data-v-19c5b1f1"),e=e(),mn(),e),CN=["innerHTML"],AN={class:"form-group mb-3"},TN=["innerHTML"],EN={class:"alert_label"},PN={class:"form-check"},UN={class:"form-check-label"},MN={key:0,class:"form-check"},IN={class:"form-check-label"},ON={class:"form-check"},jN={class:"form-check-label"},LN={class:"form-check"},FN={class:"form-check-label"},DN={key:0,class:"exclude-domain-certificate"},RN={class:"alert_label"},zN={key:0,class:"form-check"},BN={class:"form-check-label whitespace"},VN=["pattern","disabled"],qN={key:1,class:"form-check"},HN={class:"form-check-label whitespace"},GN=["disabled","pattern"],WN={key:0,class:"form-group row"},KN={class:"col-form-label"},JN={class:"mt-1"},YN=["placeholder"],ZN={class:"separator"},XN=NN((()=>qs("hr",{class:"separator"},null,-1))),QN={class:"form-group mb-3"},eC={class:"custom-control custom-switch"},tC={class:"custom-control-label"},aC={class:"alert alert-warning border",role:"alert"},nC=["disabled"];var lC={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const n=e,l=ma(null),s=ma("any"),i=ma(!0),r=ma(null),o=ma(null),c=ma(null),u=i18n("details.comment_placeholder");jn((()=>n.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,r.value=""==e.info?.value?null:e.info?.value,o.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=()=>{if("domain"==s.value){let e=new RegExp(m);return null==r.value||0==e.test(r.value)}if("certificate"==s.value){let e=new RegExp(h);return null==o.value||0==e.test(o.value)}return!1},p=wi((()=>n.alert?.alert_name)),_=wi((()=>{let e={value:"",label:""};if("host"!=n.page||null==n.alert)return e;let t=n.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),f=wi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=n.page||null==n.alert)return e;let t=n.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=a,e.srv_label=l,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const v=()=>{let e=n.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=_.value.value:"server_host"==s.value?u=f.value.srv_value:"client_host"==s.value&&(u=f.value.cli_value),l.alert_addr=u,"flow"==e?l.flow_alert_key=n.alert.alert_id.value:"host"==e&&(l.host_alert_key=n.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=r.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=o.value),g(),a("exclude",l)},g=()=>{l.value.close()};t({show:()=>{c.value="",l.value.show()},close:g}),pl((()=>{}));const b=e=>i18n(e);return(t,a)=>(Ps(),Ls(hp,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:l},{title:vn((()=>[Ks(te(b("exclude_check"))+": ",1),qs("span",{innerHTML:ya(p)},null,8,CN)])),body:vn((()=>[qs("div",AN,[qs("div",null,[qs("label",null,[Ks(te(b("exclude_check"))+' "',1),qs("b",{innerHTML:ya(p)},null,8,TN),Ks('". '),qs("span",EN,te(b("exclude_for"))+":",1)]),qs("div",PN,[wl(qs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",UN,[qs("span",null,te(b("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),js("div",MN,[wl(qs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",IN,[qs("span",null,te(ya(_).label),1)])])):Ys("v-if",!0),"flow"==e.page?(Ps(),js(Ss,{key:1},[qs("div",ON,[wl(qs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",jN,[qs("span",null,te(b("client"))+": "+te(ya(f).cli_label),1)])]),qs("div",LN,[wl(qs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",FN,[qs("span",null,te(b("server"))+": "+te(ya(f).srv_label),1)])])],64)):Ys("v-if",!0)]),null!=r.value||null!=o.value?(Ps(),js("div",DN,[qs("label",null,[qs("span",RN,te(b("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=r.value?(Ps(),js("div",zN,[wl(qs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",BN,[qs("span",null,te(b("check_exclusion.domain"))+":",1)]),wl(qs("input",{type:"text",pattern:ya(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>r.value=e),class:"form-check-label custom-width"},null,8,VN),[[Ir,r.value]])])):Ys("v-if",!0),null!=o.value?(Ps(),js("div",qN,[wl(qs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Lr,s.value]]),qs("label",HN,[qs("span",null,te(b("check_exclusion.tls_certificate"))+":",1)]),wl(qs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>o.value=e),pattern:ya(h),required:"",class:"form-check-label custom-width"},null,8,GN),[[Ir,o.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=s.value?(Ps(),js("div",WN,[qs("div",null,[qs("label",KN,[qs("b",null,te(b("show_alerts.add_a_comment")),1)])]),qs("div",JN,[wl(qs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,YN),[[Ir,c.value]])])])):Ys("v-if",!0),wl(qs("hr",ZN,null,512),[[Jr,i.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ps(),js(Ss,{key:1},[wl(qs("div",{class:"message alert alert-danger"},te(b("show_alerts.confirm_delete_filtered_alerts")),513),[[Jr,i.value]]),XN,qs("div",QN,[qs("div",eC,[wl(qs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>i.value=e)},null,512),[[Or,i.value]]),qs("label",tC,te(b("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),qs("div",aC,te(b("show_alerts.confirm_filter_alert")),1)])),footer:vn((()=>[qs("button",{type:"button",onClick:v,disabled:d(),class:"btn btn-warning"},te(b("filter")),9,nC)])),_:1},512))}};mp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),lC.__scopeId="data-v-19c5b1f1",lC.__file="http_src/vue/modal-alerts-filter.vue";let sC={PageStats:eh,PageAssetTable:oh,PagePeriodicityTable:wh,PageServiceTable:Fh,PageServiceMap:av,PagePeriodicityMap:xv,PageAssetMap:Bv,PageDeviceExclusions:Kg,PageHostTLS:ib,PageHostSSH:fb,PageHomeMap:xb,PageSankey:Sb,PageHostRules:bw,PageAlertAnalysis:Rw,PageHostMap:Zw,PageEditApplications:g$,PageVLANPortsFlowSankey:ux,PageTestTable:ck,PageTestNewTable:mk,NedgeRulesConfig:a$,PageHostDetailsApplications:Cb,PageHostDetailsTraffic:Gb,PageHostDetailsPackets:ty,PageHostDetailsFlowSankey:Ny,PageHostDetailsPorts:Aw,PageAggregatedLiveFlows:bx,PageAggregatedLiveFlowsV2:rk,PageNetworkDiscovery:A$,AlertInfo:$m,Chart:Od,Datatable:Em,DateTimeRangePicker:zd,NetworkMap:Qh,RangePicker:nS,PageNavbar:rg,SimpleTable:hS,SelectSearch:Rd,TabList:th,Sankey:AS,NoteList:Ty,Loading:sy,ListTimeseries:v_,Modal:hp,ModalAddCheckExclusion:SN,ModalAlertsFilter:lC,ModalFilters:T$,ModalTimeseries:Yf,ModalTrafficExtraction:Zf,ModalDeleteConfirm:ih,ModalSnapshot:Zp,ModalAddDeviceExclusion:Ig,ModalEditDeviceExclusion:Wg,ModalAddHostRules:uw,ModalAddApplication:m$,ModalDeleteApplication:h$,Vue:Id};window.ntopVue=sC;var iC=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function rC(){const e=e=>$(iC[3])[iC[2]]($(e)[iC[1]]())[iC[0]]();let t=iC[4];const a=(()=>{let a=$(t),n=i18n(iC[5])[iC[7]](iC[6]);$(iC[8],a)[iC[0]](n[0]),$(iC[9],a)[iC[0]](n[1]);let l=`${iC[10]}${i18n(iC[11])}${iC[12]}`;return $(iC[13],a)[iC[0]](l),e(a)})(),n=()=>{$(iC[14])[iC[2]](a)};n();const l=()=>$(iC[16])[iC[15]]()[iC[15]]()[iC[15]]()[iC[15]]()[iC[15]]();ntopng_events_manager[iC[23]](iC[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=l();if(null==t)return!1;let n=t[iC[1]]();$(iC[16],n)[iC[0]](iC[17]),$(iC[18],n)[iC[0]](iC[17]);const s=e(n);return a===s})()&&((()=>{let e=l();null!=e&&e[iC[19]]()})(),n()),(e=>{$(iC[16])[iC[0]](e[iC[20]]),$(iC[18])[iC[0]](e[iC[21]])})(t)}))}$(document)[iC[24]]((()=>rC()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
