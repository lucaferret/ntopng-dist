!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[-a-zA-Z0-9:.]{1,256}+$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^[a-zA-Z0-9._:\-]{1,250}|^[a-zA-Z0-9._:\-]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+-/=?^_${"`"}{|}~]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label.toUpperCase(),l=t.label.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",m),p.attr("transform",m)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function m(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const m={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},m=n.options.url,v=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],m=$(f),h=m.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),v||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),m.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}v=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:m,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=m;var v={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");v[l]||(v[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=v[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(0==l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return 1==n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},C=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var m=null,v=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),v=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),m=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,v,m,c,o,u,p,f,i,s]}(e,l),f=p[0],m=p[1],v=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=m(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),v&&v.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",N).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",C),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=N,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const M=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");M(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");M(e,t)}}));const j=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:m.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if(e.yaxis&&e.yaxis.labels&&e.yaxis.labels.formatter){const t=e.yaxis.labels.formatter;let a=m.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=m.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=m.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class D{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;D._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class F{static alertSeverityAndType(e,t,a){return`${F.formatValueLabel(e,t,a)} ${F.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatSubtype(e,t,a,l){if("display"!==t)return e;return F.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),F.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=F.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:F.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:F.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return F.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=F.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=F.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=F.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=F.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+F.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+F.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+F.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+F.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),F.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=F.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=F.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=F.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+F.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=F.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=F.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+F.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=F.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return F.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function R(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=D,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=F,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=I.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=j,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const q=R("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),z=R("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=R("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=R("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=R("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):me(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:ve(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},oe=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,me=e=>"[object Map]"===$e(e),ve=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=R(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=R("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ee=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Pe=Ee((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Ue=/\B([A-Z])/g,Ie=Ee((e=>e.replace(Ue,"-$1").toLowerCase())),Oe=Ee((e=>e.charAt(0).toUpperCase()+e.slice(1))),Me=Ee((e=>e?`on${Oe(e)}`:"")),je=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},De=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Fe=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Re,qe;class ze{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&qe&&(this.parent=qe,this.index=(qe.scopes||(qe.scopes=[])).push(this)-1)}run(e){if(this.active){const t=qe;try{return qe=this,e()}finally{qe=t}}}on(){qe=this}off(){qe=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new ze(e)}function Ve(e,t=qe){t&&t.active&&t.effects.push(e)}function He(){return qe}function Ge(e){qe&&qe.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=ot;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,ot=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,ot=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let ot=!0;const it=[];function rt(){it.push(ot),ot=!1}function ct(){const e=it.pop();ot=void 0===e||e}function ut(e,t,a){if(ot&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const o=Ye.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&fe(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":fe(e)?Ne(a)&&i.push(o.get("length")):(i.push(o.get(et)),me(e)&&i.push(o.get(tt)));break;case"delete":fe(e)||(i.push(o.get(et)),me(e)&&i.push(o.get(tt)));break;case"set":me(e)&&i.push(o.get(et))}if(1===i.length)i[0]&&pt(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const mt=R("__proto__,__v_isRef,__isVue"),vt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const o=Reflect.get(a,l,n);return(ye(l)?vt.has(l):mt(l))?o:(e||ut(a,0,l),t?o:fa(o)?s&&Ne(l)?o:o.value:we(o)?e?ta(o):Qt(o):o)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(oa(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const o=fe(t)&&Ne(a)?Number(a)<t.length:pe(t,a),i=Reflect.set(t,a,l,n);return t===ra(n)&&(o?je(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),i}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&vt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),At=e=>e,Et=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:o}=Et(n),i=l?At:a?da:ua;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Ut(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function It(e){e=ra(e);const t=ra(this);return Et(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ot(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=Et(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?je(t,o)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function Mt(e){const t=ra(this),{has:a,get:l}=Et(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function jt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ra(s),i=t?At:e?da:ua;return!e&&ut(o,0,et),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Dt(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),o=me(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?At:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Ft(e){return function(...t){return"delete"!==e&&this}}const[Rt,qt,zt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Dt(n,!1,!1),a[n]=Dt(n,!0,!1),t[n]=Dt(n,!1,!0),l[n]=Dt(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:zt:e?qt:Rt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Nt,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Ct,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function oa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return De(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){ot&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function ma(e){return ha(e,!1)}function va(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),je(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const l=e[t];return fa(l)?l:new Na(e,t,a)}class Aa{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ea=[];function Ta(e,...t){rt();const a=Ea.length?Ea[Ea.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ea[Ea.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ia(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${wo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${wo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Pa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ua(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ua(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ua(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ia(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){Ma(e,t,a)}return n}function Oa(e,t,a,l){if(ge(e)){const n=Ia(e,t,a,l);return n&&xe(n)&&n.catch((e=>{Ma(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Oa(e[s],t,a,l));return n}function Ma(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Ia(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let ja=!1,La=!1;const Da=[];let Fa=0;const Ra=[];let qa=null,za=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Da.length&&Da.includes(e,ja&&e.allowRecurse?Fa+1:Fa)||e===Ka||(null==e.id?Da.push(e):Da.splice(function(e){let t=Fa+1,a=Da.length;for(;t<a;){const l=t+a>>>1;al(Da[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){ja||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Ra.length){for(Ka=t,qa=[...new Set(Ra)],Ra.length=0,za=0;za<qa.length;za++)qa[za]();qa=null,za=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,ja=!0,el(e),Da.sort(((e,t)=>al(e)-al(t)));try{for(Fa=0;Fa<Da.length;Fa++){const e=Da[Fa];e&&!1!==e.active&&Ia(e,null,14)}}finally{Fa=0,Da.length=0,tl(),ja=!1,Wa=null,(Da.length||Ra.length||Ba.length)&&ll(e)}}let nl,sl=[];function ol(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ol(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function il(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Fe))}let i,r=l[i=Me(t)]||l[i=Me(Pe(t))];!r&&s&&(r=l[i=Me(Ie(t))]),r&&Oa(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Oa(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(i=!0,ue(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(fe(s)?s.forEach((e=>o[e]=null)):ue(o,s),l.set(e,o),o):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const ml=e=>vl;function vl(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Os(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Os(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:m}=e;let v,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;v=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{v=Zs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){Es.length=0,Ma(t,e,1),v=Hs(Cs)}let b=v;if(h&&!1!==m){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ce)&&(h=bl(h,o)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),v=b,_l(g),v}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),Al(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:v,isHydrating:h}=d;if(m)d.pendingBranch=_,Fs(_,m)?(r(m,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():v&&(r(f,p,a,l,n,null,s,o,i),Al(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=m):c(m,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),v?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),Al(d,p))):f&&Fs(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Fs(_,f))r(f,_,a,l,n,d,s,o,i),Al(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Hs(Cs)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:m,remove:v}}=c,h=Fe(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}Al(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),Al(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{Ma(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;po(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,m(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&v(i),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(ge(e)){const a=Is&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Ts,Us())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Ds(l))return;if(l.type!==Cs||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Cl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Al(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function El(e,t){if(no){let a=no.provides;const l=no.parent&&no.parent.provides;l===a&&(a=no.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=no||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Pl(e,t){return jl(e,null,t)}function Ul(e,t){return jl(e,null,{flush:"post"})}function Il(e,t){return jl(e,null,{flush:"sync"})}const Ol={};function Ml(e,t,a){return jl(e,t,a)}function jl(e,t,{immediate:a,deep:l,flush:n}=le){const s=no;let o,i,r=!1,c=!1;if(fa(e)?(o=()=>e.value,r=oa(e)):na(e)?(o=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||oa(e))),o=()=>e.map((e=>fa(e)?e.value:na(e)?Fl(e):ge(e)?Ia(e,s,2):void 0))):o=ge(e)?t?()=>Ia(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Oa(e,s,3,[u])}:se,t&&l){const e=o;o=()=>Fl(e())}let u=e=>{i=f.onStop=()=>{Ia(e,s,4)}},d=c?[]:Ol;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>je(e,d[t]))):je(e,d)))&&(i&&i(),Oa(t,s,3,[e,d===Ol?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,qa,Ra,za)}(_);const f=new at(o,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Dl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const o=no;oo(this);const i=jl(n,s.bind(l),a);return o?oo(o):io(),i}function Dl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Fl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Fl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Fl(e[a],t);else if(ve(e)||me(e))e.forEach((e=>{Fl(e,t)}));else if(Se(e))for(const a in e)Fl(e[a],t);return e}function Rl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),mn((()=>{e.isUnmounting=!0})),e}const ql=[Function,Array],zl={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ql,onEnter:ql,onAfterEnter:ql,onEnterCancelled:ql,onBeforeLeave:ql,onLeave:ql,onAfterLeave:ql,onLeaveCancelled:ql,onBeforeAppear:ql,onAppear:ql,onAfterAppear:ql,onAppearCancelled:ql},setup(e,{slots:t}){const a=so(),l=Rl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){o=e;break}const i=ra(e),{mode:r}=i;if(l.isLeaving)return Hl(o);const c=Gl(o);if(!c)return Hl(o);const u=Vl(c,i,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Cs&&(!Fs(c,_)||p)){const e=Vl(_,i,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(o);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:m,onAppear:v,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Oa(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=m||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Fs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=v||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Ss?(128&o.patchFlag&&n++,l=l.concat(Kl(o.children,t,i))):(t||o.type!==Cs)&&l.push(null!=i?Ws(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=no;if(r)return()=>Xl(r,e);const t=t=>{c=null,Ma(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const i=ma(!1),u=ma(),_=ma(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=so(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=yo(t.type);!l||e&&e(l)||m(a)}))}function m(e){const t=n.get(e);o&&t.type===o.type?o&&on(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&to(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&to(a,t.parent,e),t.isDeactivated=!0}),i)},Ml((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let v=null;const h=()=>{null!=v&&n.set(v,rn(a.subTree))};return _n(h),fn(h),mn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(v=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Ds(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=rn(l);const r=i.type,c=yo(Yl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ws(i),128&l.shapeFlag&&(l.ssContent=i)),v=p,f?(i.el=f.el,i.component=f.component,i.transition&&Wl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&m(s.values().next().value)),i.shapeFlag|=256,o=i,xl(l.type)?l:i}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=no){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);vn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=no,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),oo(a);const n=Oa(t,a,e,l);return io(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=no)=>(!_o||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),mn=un("bum"),vn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=no){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=go(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Fl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(rt(),Oa(r,a,8,[e.el,i,e,t]),ct())}}function kn(e,t){return Cn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Cn("components",e,!1)||e:e||$n}function Nn(e){return Cn("directives",e)}function Cn(e,t,a=!0,l=!1){const n=ul||no;if(n){const a=n.type;if("components"===e){const e=yo(a,!1);if(e&&(e===t||e===Pe(t)||e===Oe(Pe(t))))return a}const s=An(n[e]||a[e],t)||An(n.appContext[e],t);return!s&&l?a:s}}function An(e,t){return e&&(e[t]||e[Pe(t)]||e[Oe(Pe(t))])}function En(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Pn(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Ps();const o=s&&Un(s(a)),i=Ls(Ss,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function Un(e){return e.some((e=>!Ds(e)||e.type!==Cs&&!(e.type===Ss&&!Un(e.children))))?e:null}function In(e){const t={};for(const a in e)t[Me(a)]=e[a];return t}const On=e=>e?ro(e)?go(e)||e.proxy:On(e.parent):null,Mn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>On(e.parent),$root:e=>On(e.root),$emit:e=>e.emit,$options:e=>qn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Ll.bind(e)}),jn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return o[t]=1,l[t];if(n!==le&&pe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return o[t]=3,s[t];if(a!==le&&pe(a,t))return o[t]=4,a[t];Dn&&(o[t]=0)}}const u=Mn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==le&&pe(e,o)||t!==le&&pe(t,o)||(i=s[0])&&pe(i,o)||pe(l,o)||pe(Mn,o)||pe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},jn,{get(e,t){if(t!==Symbol.unscopables)return jn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!q(t)});let Dn=!0;function Fn(e,t,a){Oa(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Rn(e,t,a,l){const n=l.includes(".")?Dl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&Ml(n,a)}else if(ge(e))Ml(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Rn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&Ml(n,l,e)}}function qn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>zn(r,e,o,!0))),zn(r,t,o)):r=t,s.set(t,r),r}function zn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&zn(e,s,a,!0),n&&n.forEach((t=>zn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;n&&pe(n,u=Pe(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ra(a),l=o||le;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Jn(n,t,i,l[i],e,!pe(l,i))}}return i}function Jn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=pe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(oo(n),l=s[a]=e.call(null,t),io())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Ie(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zn(t)&&(o[t]=le)}else if(s)for(const e in s){const t=Pe(e);if(Zn(t)){const a=s[e],l=o[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=vl(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function os(){return{app:null,config:{isNativeTag:oe,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=os(),s=new Set;let o=!1;const i=n.app={_uid:is++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Fo,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(i,...t)):ge(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,go(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?go(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===le?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ia(r,i,12,[o,u]);else{const t=be(r),l=fa(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,pe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,fs(i,a)):i()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,v,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,i,c,v,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,i,c,v,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,v,h);else if(6&x){l.slotScopeIds=v;const e=o(a);if(t(l,e,null,i,c,ds(e),h),S=g?m(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,v,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,ds(o(a)),v,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&to(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Cl((()=>{r&&to(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){us=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=m(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,ds(d),r),u},m=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Cl;function ms(e){return hs(e)}function vs(e){return hs(e,ps)}function hs(e,t){(Re||(Re="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,m=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Fs(e,t)&&(l=q(e),j(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:v(e,t,a,l);break;case Cs:h(e,t,a,l);break;case As:null==e&&g(t,a,l,o);break;case Ss:N(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?C(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},v=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:m,props:v,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,v&&v.is,v),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==m,u,d),y&&xn(e,null,o,"created"),v){for(const t in v)"value"===t||Ce(t)||n(_,t,null,v[t],r,e.children,o,i,R);"value"in v&&n(_,"value",null,v.value),(f=v.onVnodeBeforeMount)&&to(f,o,e)}w(_,e,e.scopeId,u,o)}y&&xn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=v&&v.onVnodeMounted)||k||y)&&fs((()=>{f&&to(f,o,e),k&&g.enter(_),y&&xn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Xs(e[c]):Zs(e[c]);m(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let m;a&&gs(a,!1),(m=f.onVnodeBeforeUpdate)&&to(m,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const v=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,v,o):i||U(e,t,r,null,a,l,v,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,R)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((m=f.onVnodeUpdated)||_)&&fs((()=>{m&&to(m,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Ss||!Fs(r,c)||70&r.shapeFlag)?u(r.el):a;m(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ce(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,R)}if(a!==le)for(const r in a)Ce(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,R);"value"in l&&n(e,"value",a.value,l.value)}},N=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):U(e,t,l,_,s,i,r,c,u)},C=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ao,s={uid:lo++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new ze(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=il.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(i.ctx.renderer=B),function(e,t=!1){_o=t;const{props:a,children:l}=e.vnode,n=ro(e);(function(e,t,a,l=!1){const n={},s={};De(s,qs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),De(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);De(e.slots,qs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,jn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?ho(e):null;oo(e),rt();const n=Ia(l,e,0,[e.props,a]);if(ct(),io(),xe(n)){if(n.then(io,io),t)return n.then((a=>{po(e,a,t)})).catch((t=>{Ma(t,e,0)}));e.asyncDep=n}else po(e,n,t)}else vo(e,t)}(e,t),_o=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Hs(Cs);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||yl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?yl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Da.indexOf(e);t>Fa&&Da.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&to(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,m(p,_,u(p.el),q(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),i&&fs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>to(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Le(c),!_&&(o=r&&r.onVnodeBeforeMount)&&to(o,d,t),gs(e,!0),i&&H){const a=()=>{e.subTree=hl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=hl(e);m(null,o,a,l,e,n,s),t.el=o.el}if(u&&fs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;fs((()=>to(o,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Kn(e,t,n,s)&&(c=!0);for(const s in i)t&&(pe(t,s)||(l=Ie(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(cl(e.emitsOptions,o))continue;const u=t[o];if(r)if(pe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Pe(o);n[t]=Jn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),o=t}else t&&(ss(e,t),o={default:1});if(s)for(const e in n)ts(e)||e in o||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},U=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void I(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&R(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):R(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},I=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);m(e[_],l,a,null,n,s,o,i,r)}c>u?R(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Fs(l,u))break;m(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Fs(l,c))break;m(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)m(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)j(e[c],n,s,!0),c++;else{const p=c,f=c,v=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&v.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){j(l,n,s,!0);continue}let u;if(null!=l.key)u=v.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Fs(l,t[h])){u=h;break}void 0===u?j(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,m(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?m(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?M(d,a,_,2):h--)}}},M=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)M(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Ss)if(i!==As)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),fs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)M(c[e],t,l,n);a(e.anchor,t,l)}},j=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&cs(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let m;if(f&&(m=o&&o.onVnodeBeforeUnmount)&&to(m,t,e),6&u)F(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?R(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&R(r,t,a),l&&L(e)}(f&&(m=o&&o.onVnodeUnmounted)||p)&&fs((()=>{m&&to(m,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void D(a,n);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},D=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},F=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Le(l),n.stop(),s&&(s.active=!1,j(o,e,t,a)),i&&fs(i,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},R=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)j(e[o],t,a,l,n)},q=e=>6&e.shapeFlag?q(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),z=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:m,um:j,m:M,r:L,mt:A,mc:x,pc:U,pbc:$,n:q,o:e};let V,H;return t&&([V,H]=t(B)),{render:z,hydrate:V,createApp:rs(z,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:m}}=c,v=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),c=t.anchor=m("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=m("");d&&(p(_,d),o=o||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};v?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,m=ys(e.props),h=m?a:u,g=m?l:p;if(o=o||ws(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),bs(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),v)m||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else m&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ys(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),As=Symbol(void 0),Es=[];let Ts=null;function Ps(e=!1){Es.push(Ts=e?null:[])}function Us(){Es.pop(),Ts=Es[Es.length-1]||null}let Is=1;function Os(e){Is+=e}function Ms(e){return e.dynamicChildren=Is>0?Ts||ne:null,Us(),Is>0&&Ts&&Ts.push(e),e}function js(e,t,a,l,n,s){return Ms(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return Ms(Hs(e,t,a,l,n,!0))}function Ds(e){return!!e&&!0===e.__v_isVNode}function Fs(e,t){return e.type===t.type&&e.key===t.key}function Rs(e){}const qs="__vInternal",zs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&zs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Is>0&&!o&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Cs),Ds(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Is>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var o;if(ge(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ia(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ia(e)||qs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?eo(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&zs(i),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Ps(),Ls(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||qs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function eo(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function to(e,t,a,l=null){Oa(e,t,7,[a,l])}const ao=os();let lo=0,no=null;const so=()=>no||ul,oo=e=>{no=e,e.scope.on()},io=()=>{no&&no.scope.off(),no=null};function ro(e){return 4&e.vnode.shapeFlag}let co,uo,_o=!1;function po(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),vo(e,a)}function fo(e){co=e,uo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const mo=()=>!co;function vo(e,t,a){const l=e.type;if(!e.render){if(!t&&co&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=ue(ue({isCustomElement:a,delimiters:s},n),o);l.render=co(t,i)}}e.render=l.render||se,uo&&uo(e)}oo(e),rt(),function(e){const t=qn(e),a=e.proxy,l=e.ctx;Dn=!1,t.beforeCreate&&Fn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:m,deactivated:v,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Dn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,o=!ge(t)&&ge(t.set)?t.set.bind(a):se,i=xo({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)Rn(i[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{El(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Fn(u,e,"c"),A(dn,d),A(_n,_),A(pn,p),A(fn,f),A(an,m),A(ln,v),A(yn,x),A(bn,y),A(gn,w),A(mn,h),A(vn,g),A(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),io()}function ho(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function go(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Mn?Mn[a](e):void 0}))}const bo=/(?:^|[-_])(\w)/g;function yo(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function wo(e,t,a=!1){let l=yo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(bo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const xo=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Aa(l,n,s||!n,a)}(e,0,_o);function ko(){return null}function $o(){return null}function So(e){}function No(e,t){return null}function Co(){return Eo().slots}function Ao(){return Eo().attrs}function Eo(){const e=so();return e.setupContext||(e.setupContext=ho(e))}function To(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Po(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Uo(e){const t=so();let a=e();return io(),xe(a)&&(a=a.catch((e=>{throw oo(t),e}))),[a,()=>oo(t)]}function Io(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Ds(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Ds(a)&&(a=[a]),Hs(e,t,a))}const Oo=Symbol(""),Mo=()=>{{const e=Tl(Oo);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function jo(){}function Lo(e,t,a,l){const n=a[l];if(n&&Do(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Do(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(je(a[e],t[e]))return!1;return Is>0&&Ts&&Ts.push(e),!0}const Fo="3.2.37",Ro="undefined"!=typeof document?document:null,qo=Ro&&Ro.createElement("template"),zo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Ro.createElementNS("http://www.w3.org/2000/svg",e):Ro.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Ro.createTextNode(e),createComment:e=>Ro.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ro.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{qo.innerHTML=l?`<svg>${e}</svg>`:e;const n=qo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bo=/\s*!important$/;function Vo(e,t,a){if(fe(a))a.forEach((a=>Vo(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Go[t];if(a)return a;let l=Pe(t);if("filter"!==l&&l in e)return Go[t]=l;l=Oe(l);for(let a=0;a<Ho.length;a++){const n=Ho[a]+l;if(n in e)return Go[t]=n}return t}(e,t);Bo.test(a)?e.setProperty(Ie(l),a.replace(Bo,""),"important"):e[l]=a}}const Ho=["Webkit","Moz","ms"],Go={},Wo="http://www.w3.org/1999/xlink",[Ko,Jo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Yo=0;const Zo=Promise.resolve(),Xo=()=>{Yo=0};function Qo(e,t,a,l){e.addEventListener(t,a,l)}const ei=/(?:Once|Passive|Capture)$/,ti=/^on[a-z]/;function ai(e,t){const a=Jl(e);class l extends si{constructor(e){super(a,e,t)}}return l.def=a,l}const li=e=>ai(e,nr),ni="undefined"!=typeof HTMLElement?HTMLElement:class{};class si extends ni{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Fe(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Fe(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof si){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function oi(e="$style"){{const t=so();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function ii(e){const t=so();if(!t)return;const a=()=>ri(t.subTree,e(t.proxy));Ul(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),vn((()=>e.disconnect()))}))}function ri(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ri(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ci(e.el,t);else if(e.type===Ss)e.children.forEach((e=>ri(e,t)));else if(e.type===As){let{el:a,anchor:l}=e;for(;a&&(ci(a,t),a!==l);)a=a.nextSibling}}function ci(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ui=(e,{slots:t})=>Io(zl,mi(e),t);ui.displayName="Transition";const di={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_i=ui.props=ue({},zl.props,di),pi=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fi=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function mi(e){const t={};for(const a in e)a in di||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[vi(e.enter),vi(e.leave)];{const t=vi(e);return[t,t]}}(n),m=f&&f[0],v=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{gi(e,t?u:i),gi(e,t?c:o),a&&a()},N=(e,t)=>{e._isLeaving=!1,gi(e,d),gi(e,p),gi(e,_),t&&t()},C=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);pi(n,[t,o]),bi((()=>{gi(t,e?r:s),hi(t,e?u:i),fi(n)||wi(t,l,m,o)}))};return ue(t,{onBeforeEnter(e){pi(h,[e]),hi(e,s),hi(e,o)},onBeforeAppear(e){pi(x,[e]),hi(e,r),hi(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);hi(e,d),Si(),hi(e,_),bi((()=>{e._isLeaving&&(gi(e,d),hi(e,p),fi(y)||wi(e,l,v,a))})),pi(y,[e,a])},onEnterCancelled(e){S(e,!1),pi(b,[e])},onAppearCancelled(e){S(e,!0),pi($,[e])},onLeaveCancelled(e){N(e),pi(w,[e])}})}function vi(e){return Fe(e)}function hi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yi=0;function wi(e,t,a,l){const n=e._endId=++yi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=xi(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function xi(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=ki(n,s),i=l("animationDelay"),r=l("animationDuration"),c=ki(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ki(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$i(t)+$i(e[a]))))}function $i(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(){return document.body.offsetHeight}const Ni=new WeakMap,Ci=new WeakMap,Ai={name:"TransitionGroup",props:ue({},_i,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=so(),l=Rl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xi(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ei),n.forEach(Ti);const l=n.filter(Pi);Si(),l.forEach((e=>{const a=e.el,l=a.style;hi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,gi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ra(e),i=mi(o);let r=o.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,i,l,a)),Ni.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ei(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ti(e){Ci.set(e,e.el.getBoundingClientRect())}function Pi(e){const t=Ni.get(e),a=Ci.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ui=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ii(e){e.target.composing=!0}function Oi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mi={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ui(n);const s=l||n.props&&"number"===n.props.type;Qo(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Fe(l)),e._assign(l)})),a&&Qo(e,"change",(()=>{e.value=e.value.trim()})),t||(Qo(e,"compositionstart",Ii),Qo(e,"compositionend",Oi),Qo(e,"change",Oi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ui(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Fe(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},ji={deep:!0,created(e,t,a){e._assign=Ui(a),Qo(e,"change",(()=>{const t=e._modelValue,a=qi(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(ve(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(zi(e,l))}))},mounted:Li,beforeUpdate(e,t,a){e._assign=Ui(a),Li(e,t,a)}};function Li(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:ve(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,zi(e,!0)))}const Di={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Ui(a),Qo(e,"change",(()=>{e._assign(qi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ui(l),t!==a&&(e.checked=Q(t,l.props.value))}},Fi={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=ve(t);Qo(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Fe(qi(e)):qi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ui(l)},mounted(e,{value:t}){Ri(e,t)},beforeUpdate(e,t,a){e._assign=Ui(a)},updated(e,{value:t}){Ri(e,t)}};function Ri(e,t){const a=e.multiple;if(!a||fe(t)||ve(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=qi(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(qi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function qi(e){return"_value"in e?e._value:e.value}function zi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bi={created(e,t,a){Vi(e,t,a,null,"created")},mounted(e,t,a){Vi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vi(e,t,a,l,"updated")}};function Vi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Fi;case"TEXTAREA":return Mi;default:switch(t){case"checkbox":return ji;case"radio":return Di;default:return Mi}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Hi=["ctrl","shift","alt","meta"],Gi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Hi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wi=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Gi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ki={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ji=(e,t)=>a=>{if(!("key"in a))return;const l=Ie(a.key);return t.some((e=>e===l||Ki[e]===l))?e(a):void 0},Yi={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zi(e,!0),l.enter(e)):l.leave(e,(()=>{Zi(e,!1)})):Zi(e,t))},beforeUnmount(e,{value:t}){Zi(e,t)}};function Zi(e,t){e.style.display=t?e._vod:"none"}const Xi=ue({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Vo(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vo(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ei.test(e)){let a;for(t={};a=e.match(ei);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Ko();(Jo||l>=a.attached-1)&&Oa(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Yo||(Zo.then(Xo),Yo=Ko()),a}(l,n);Qo(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ti.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ti.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Wo,t.slice(6,t.length)):e.setAttributeNS(Wo,t,a);else{const l=z(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},zo);let Qi,er=!1;function tr(){return Qi||(Qi=ms(Xi))}function ar(){return Qi=er?Qi:vs(Xi),er=!0,Qi}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=ir(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:or,initDirectivesForSSR:rr,defineCustomElement:ai,defineSSRCustomElement:li,VueElement:si,useCssModule:oi,useCssVars:ii,Transition:ui,TransitionGroup:Ai,vModelText:Mi,vModelCheckbox:ji,vModelRadio:Di,vModelSelect:Fi,vModelDynamic:Bi,withModifiers:Wi,withKeys:Ji,vShow:Yi,reactive:Qt,ref:ma,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:ia,isReactive:na,isReadonly:sa,isShallow:oa,customRef:$a,triggerRef:ba,shallowRef:va,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:ze,getCurrentScope:He,onScopeDispose:Ge,computed:xo,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:mn,onUnmounted:vn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:El,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ao,useSlots:Co,defineProps:ko,defineEmits:$o,defineExpose:So,withDefaults:No,mergeDefaults:To,createPropsRestProxy:Po,withAsyncContext:Uo,getCurrentInstance:so,h:Io,createVNode:Hs,cloneVNode:Ws,mergeProps:eo,isVNode:Ds,Fragment:Ss,Text:Ns,Comment:Cs,Static:As,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:zl,withDirectives:wn,useSSRContext:Mo,ssrContextKey:Oo,createRenderer:ms,createHydrationRenderer:vs,queuePostFlushCb:Qa,warn:Ta,handleError:Ma,callWithErrorHandling:Ia,callWithAsyncErrorHandling:Oa,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,registerRuntimeCompiler:fo,isRuntimeOnly:mo,useTransitionState:Rl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:jo,get devtools(){return nl},setDevtoolsHook:ol,withCtx:vl,pushScopeId:pl,popScopeId:fl,withScopeId:ml,renderList:En,toHandlers:In,renderSlot:Pn,createSlots:Tn,withMemo:Lo,isMemoSame:Do,openBlock:Ps,createBlock:Ls,setBlockTracking:Os,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:js,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Oe,toHandlerKey:Me,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Rs,version:Fo,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),mr=Symbol(""),vr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Nr=Symbol(""),Cr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Mr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Dr=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),qr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[mr]:"Suspense",[vr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Nr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Ar]:"resolveDirective",[Er]:"resolveFilter",[Tr]:"withDirectives",[Pr]:"renderList",[Ur]:"renderSlot",[Ir]:"createSlots",[Or]:"toDisplayString",[Mr]:"mergeProps",[jr]:"normalizeClass",[Lr]:"normalizeStyle",[Dr]:"normalizeProps",[Fr]:"guardReactiveProps",[Rr]:"toHandlers",[qr]:"camelize",[zr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=Qr){return e&&(i?(e.helper(gr),e.helper(Ec(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),o&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function oc(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ie(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?mr:uc(e,"KeepAlive")?vr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,mc=/[\.\?\w$\xA0-\uFFFF]/,vc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(vc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?fc:mc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wr:xr}function Ec(e,t){return e||t?br:yr}const Tc=new Set([Dr,Fr]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Uc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Rr?l=oc(a.helper(Mr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=oc(a.helper(Mr),[ac([t]),s]),n&&n.callee===Fr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Oc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ac(l,e.isComponent)),t(gr),t(Ec(l,e.isComponent)))}const Mc=/&(gt|lt|amp|apos|quot);/g,jc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:oe,isPreTag:oe,isCustomElement:oe,decodeEntities:e=>e.replace(Mc,((e,t)=>jc[t])),onError:ur,onWarn:dr,comments:!1};function Dc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&eu(o,e.options.delimiters[0]))i=Kc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=eu(o,"\x3c!--")?qc(e):eu(o,"<!DOCTYPE")?zc(e):eu(o,"<![CDATA[")&&0!==n?Rc(e,a):zc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){tu(e,3);continue}if(/[a-z]/i.test(o[2])){Hc(e,1,l);continue}i=zc(e)}else/[a-z]/i.test(o[1])?i=Bc(e,a):"?"===o[1]&&(i=zc(e));if(i||(i=Jc(e,t)),fe(i))for(let e=0;e<i.length;e++)Fc(s,i[e]);else Fc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Fc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Rc(e,t){tu(e,9);const a=Dc(e,3,t);return 0===e.source.length||tu(e,3),a}function qc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function zc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Dc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Vc=R("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const i=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,i),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=eu(l,"."),r=t[1]||(i||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const o=Zc(e),i=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(o,c,_),yc(i,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,o,i)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function ou(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ec(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ac(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([jr,Lr,Dr,Fr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=cu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function mu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:m="",bindingMetadata:v=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Pe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:m,bindingMetadata:v,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);vu(e,a),t.hoistStatic&&ou(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(iu(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Oc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function vu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let a=0;a<e.branches.length;a++)vu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,vu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Nr:Ar);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Ic(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];be(i)?n(i):fe(i)?yu(i,t):xu(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Or)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ec(t.inSSR,p):Ac(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Su(l,t),a(": "),xu(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),fe(o)?yu(o,t):xu(o,t)):i&&xu(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&o("("),ku(a,t),e&&o(")")}else o("("),xu(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),xu(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),o()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Vr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Cu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Cu(e,t);o.branches.push(n);const s=l&&l(o,n,!1);vu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Au(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Au(t,o+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?rc(e.condition,Eu(e,t,a),oc(a.helper(kr),['""',"true"])):Eu(e,t,a)}function Eu(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Uc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Yr?i.arguments[1].returns:i;return 13===t.type&&Oc(t,a),Uc(t,n,a),e}var i}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Ou(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=oc(l(Pr),[t.source]),o=Nc(e),i=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Cc(e)?e:o&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Uc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Uc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ec(a.inSSR,r.isComponent))):n(Ac(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ec(a.inSSR,r.isComponent))):l(Ac(a.inSSR,r.isComponent))),i){const e=ic(ju(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",i.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(ju(t.parseResult),r,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Ou(e,t){const a=e.loc,l=e.content,n=l.match(Pu);if(!n)return;const[,s,o]=n,i={source:Mu(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Iu,"").trim();const c=s.indexOf(r),u=r.match(Uu);if(u){r=r.replace(Uu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=Mu(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=Mu(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=Mu(a,r,c)),i}function Mu(e,t,a){return nc(t,!1,gc(e,a,t.length))}function ju({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Du=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Fu=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Ru(e,t,a=Fu){t.helper(Wr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(i=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:m}=n,{arg:v=nc("default",!0),exp:h}=p;let g;cc(v)?g=v?v.content:"default":i=!0;const b=a(h,f,m);let y,w,x;if(y=wc(n,"if"))i=!0,o.push(rc(y.exp,qu(v,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,qu(v,b),Lu):qu(v,b)}}else if(x=wc(n,"for")){i=!0;const e=x.parseResult||Ou(x.exp);e&&o.push(oc(t.helper(Pr),[e.source,ic(ju(e),qu(v,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(v,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:zu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return o.length&&(f=oc(t.helper(Ir),[f,tc(o)])),{slots:f,hasDynamicSlots:i}}function qu(e,t){return ac([lc("name",e),lc("fn",t)])}function zu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||zu(a.children))return!0;break;case 9:if(zu(a.branches))return!0;break;case 10:case 11:if(zu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return oc(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&wc(e,"is");if(o&&o.exp)return oc(t.helper(Cr),[o.exp]);const i=dc(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Nr),t.components.add(l),Ic(l,"component"))}(e,t):`"${a}"`;const o=we(s)&&s.callee===Cr;let i,r,c,u,d,_,p=0,f=o||s===fr||s===mr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Ar),t.directives.add(e.name),a.push(Ic(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===vr&&(f=!0,p|=1024),n&&s!==fr&&s!==vr){const{slots:a,hasDynamicSlots:l}=Ru(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,m=!1,v=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,o=re(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),o&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?m=!0:"class"===s?v=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(m=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(o)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,m="bind"===a,v="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||m&&kc(l,"is")&&Ju(o))continue;if(v&&s)continue;if((m&&kc(l,"key")||v&&_&&kc(l,"vue:before-update"))&&(p=!0),m&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(m||v)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),i)),c=[]),u.push(m?r:{type:14,loc:f,callee:t.helper(Rr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ae(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),i)),k=u.length>1?oc(t.helper(Mr),u,i):u[0]):c.length&&(k=ac(Wu(c),i)),b?f|=16:(v&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(m||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=oc(t.helper(Dr),[k]):(n&&!cc(n.value)&&(n.value=oc(t.helper(jr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=oc(t.helper(Lr),[s.value])));break;case 14:break;default:k=oc(t.helper(Dr),[oc(t.helper(Fr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||re(s))&&Ku(o,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Pe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=ic([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=oc(t.helper(Ur),o,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=nc(Me(Pe(e)),!0,o.loc)}else i=sc([`${a.helperString(Br)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Br)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(i,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Pe(o.content):`${a.helperString(qr)}(${o.content})`:(o.children.unshift(`${a.helperString(qr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(o,"."),n.includes("attr")&&ed(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(o,nc("",!0,s))]}:{props:[lc(o,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:oc(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!hc(o))return sd();const i=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(i,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const od=new WeakSet,id=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||od.has(e))return;return od.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Oc(l,t),e.codegenNode=oc(t.helper(Yr),[a.exp,ic(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Dc(a,0,[]),Xc(a,l))}(e,t):e,[s,o]=[[ld,Nu,id,Tu,Yu,Hu,Du,td],{on:Xu,bind:Qu,model:nd}];return mu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),md=Symbol(""),vd=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[md]:"withKeys",[vd]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=R("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=R("passive,once,capture"),Sd=R("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=R("left,right"),Cd=R("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ed=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:oc(a.helperString(Or),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,o=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?o.push(l):Nd(l)?cc(e)?Cd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ad(n,"onContextmenu")),i.includes("middle")&&(n=Ad(n,"onMouseup")),i.length&&(s=oc(a.helper(fd),[s,JSON.stringify(i)])),!o.length||cc(n)&&!Cd(n.content)||(s=oc(a.helper(md),[s,JSON.stringify(o)])),r.length){const e=r.map(Oe).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(vd)})},Ud=Object.create(null);function Id(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Ud[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ed,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Ud[a]=s}fo(Id);var Od=Object.freeze({__proto__:null,BaseTransition:zl,Comment:Cs,EffectScope:ze,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:As,Suspense:kl,Teleport:$s,Text:Ns,Transition:ui,TransitionGroup:Ai,VueElement:si,callWithAsyncErrorHandling:Oa,callWithErrorHandling:Ia,camelize:Pe,capitalize:Oe,cloneVNode:Ws,compatUtils:null,compile:Id,computed:xo,createApp:sr,createBlock:Ls,createCommentVNode:Ys,createElementBlock:js,createElementVNode:Vs,createHydrationRenderer:vs,createPropsRestProxy:Po,createRenderer:ms,createSSRApp:or,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:ai,defineEmits:$o,defineExpose:So,defineProps:ko,defineSSRCustomElement:li,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:so,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Io,handleError:Ma,hydrate:nr,initCustomFormatter:jo,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Do,isProxy:ia,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:mo,isShallow:oa,isVNode:Ds,markRaw:ca,mergeDefaults:To,mergeProps:eo,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:mn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:vn,onUpdated:fn,openBlock:Ps,popScopeId:fl,provide:El,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:ma,registerRuntimeCompiler:fo,render:lr,renderList:En,renderSlot:Pn,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Os,setDevtoolsHook:ol,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:va,ssrContextKey:Oo,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:Me,toHandlers:In,toRaw:ra,toRef:Ca,toRefs:Sa,transformVNodeArgs:Rs,triggerRef:ba,unref:ya,useAttrs:Ao,useCssModule:oi,useCssVars:ii,useSSRContext:Mo,useSlots:Co,useTransitionState:Rl,vModelCheckbox:ji,vModelDynamic:Bi,vModelRadio:Di,vModelSelect:Fi,vModelText:Mi,vShow:Yi,version:Fo,warn:Ta,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,withAsyncContext:Uo,withCtx:vl,withDefaults:No,withDirectives:wn,withKeys:Ji,withMemo:Lo,withModifiers:Wi,withScopeId:ml});const Md=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Hs(e,t,a);n&&n._context&&(o.appContext=n._context),s?lr(o,s):"undefined"!=typeof document&&lr(o,s=document.createElement("div"));return{vNode:o,destroy:()=>{s&&lr(null,s),s=null,o=null},el:s}};var jd={props:["content"],watch:{content:function(e,t){}},render(){return Io(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const Ld=["id"],Dd=["aria-labelledby"],Fd={class:"dropdown-item"};var Rd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=Co(),s=ma([]);ma([]);const o=ma([]),i=ma(null),r=ma(null);let c=null;_n((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:i.value,dropdown_button:r.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=xo((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),o.value=[],e.forEach((e=>{let t=e;o.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Ps(),js("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",ya(u)]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Pn(t.$slots,"title")],14,Ld),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("li",Fd,[Hs(jd,{content:e},null,8,["content"])])))),256))],8,Dd)],512))},__file:"http_src/vue/dropdown.vue"};const qd=e=>i18n(e);function zd(e){const t={button_list:Vd(!0),button_array:Vd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function Bd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return F.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=m.types[e.render_type])return e.render_func=m.getFormatter(e.render_type),e.render_func(l);if(null!=F[e.render_type])return F[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Vd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:qd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:inline;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),qd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Rd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Hd(e,t,a){let l=Wd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let m=f.rsp;null!=e.rsp_records_field&&(m=f.rsp[e.rsp_records_field]);let v=f.query_info;return null!=e.rsp_query_info_field&&(v=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:m,query_info:v}}}function Gd(e){return e=>null!=e.title_i18n?qd(e.title_i18n):null!=e.title?e.title:""}function Wd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Kd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Hd(o,l,n),get_column_id:Wd(o),print_column_name:Gd(),print_html_row:Bd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Jd={};async function Yd(e){return null==Jd[e]&&(Jd[e]=ntopng_utility.http_request(e)),await Jd[e]}const Zd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Xd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Qd={get_filter_const:Yd,get_filters_object:Xd,load_filters_data:Zd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},e_=["multiple"],t_=["selected","value","disabled"],a_=["label"],l_=["selected","value","disabled"];var n_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,multiple:Boolean,disable_change:Boolean},emits:["update:selected_option","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma([]),o=ma([]),i=ma({}),r=ma([]),c=ma(0);let u=!0;function d(){!function(){if(s.value=[],o.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),m()}_n((()=>{l.options&&(l.disable_change&&u||d())})),Ml((()=>l.selected_option),((e,t)=>{m(e),n.value,p()}),{flush:"pre"}),Ml([c],((e,t)=>{_()}),{flush:"post"}),Ml((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&y(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,n=b(t);if(t!=l.selected_option&&(a("update:selected_option",n),a("select_option",n)),!l.multiple)return;r.value=r.value.filter((e=>e!=t)),r.value.push(t);let s=g(r.value);a("change_selected_options",s)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=b(t),s=g(r.value);a("unselect_option",n),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=h(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))}function m(e){null!=e||l.multiple||(e=v()),i.value=e}function v(){return null==l.selected_option?l.options[0]:l.selected_option}function h(e){let t;return null==e&&(e=v()),t=null!=e.value?e.value:e.label,t}function g(e){let t=e.map((e=>b(e)));return t}function b(e){let t=function(e){null==e&&(e=h());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.label==t.label));return a}function y(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),mn((()=>{y()})),(t,a)=>(Ps(),js("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),js("option",{class:"ntopng-dropdown-min-width no-wrap",selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,t_)))),256)),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("optgroup",{label:e.group},[(Ps(!0),js(Ss,null,En(e.options,((e,t)=>(Ps(),js("option",{selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,l_)))),256))],8,a_)))),256))],8,e_))},__file:"http_src/vue/select-search.vue"},s_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const o_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},i_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},r_=["href","title"],c_=["title"],u_=["href","title"],d_=["title"],__=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),p_=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),f_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},m_={class:"navbar-nav"},v_=["onClick"],h_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},g_=["onClick"],b_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},y_={class:"navbar-nav ms-auto"},w_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),x_=["href"],k_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];s_.render=function(e,t,a,l,n,s){return Ps(),js("nav",o_,[Vs("span",i_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),js("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,r_)):(Ps(),js("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,c_)),(Ps(!0),js(Ss,null,En(e.secondary_title_list,(e=>(Ps(),js(Ss,null,[Ks(" / "),e.href?(Ps(),js("a",{key:0,href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),js("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],8,u_)):(Ps(),js("span",{key:1,title:e.title},te(e.label),9,d_))],64)))),256))]),__,p_,Vs("div",f_,[Vs("ul",m_,[(Ps(!0),js(Ss,null,En(e.items_table,(e=>(Ps(),js(Ss,null,[e.active?(Ps(),js("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Ps(),js("span",h_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,v_)):(Ps(),js("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Ps(),js("span",b_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],8,g_))],64)))),256))]),Vs("ul",y_,[w_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},k_,8,x_)])])])},s_.__file="http_src/vue/page-navbar.vue";var $_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const S_=["innerHTML"];$_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Ps(),js("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,S_),e.no_close_button?Ys("v-if",!0):(Ps(),js("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},$_.__file="http_src/vue/alert-info.vue";var N_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||C.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const C_={style:{width:"100%"},ref:"chart"};N_.render=function(e,t,a,l,n,s){return Ps(),js("div",C_,null,512)},N_.__file="http_src/vue/chart.vue";var A_={components:{"select-search":n_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),C.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),C.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const E_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),T_={class:"input-group"},P_={class:"form-group"},U_={class:"controls"},I_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},O_={class:"btn-group ms-2"},M_=E_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),j_=["disabled"],L_=E_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),D_=["disabled"],F_=["title"],R_=[E_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],q_={class:"d-flex align-items-center ms-2"},z_=["disabled"],B_={class:"btn-group"},V_=["disabled","title"],H_=[E_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],G_=["disabled","title"],W_=[E_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],K_=["disabled","title"],J_=[E_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Y_=["disabled","title"],Z_=[E_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],X_=["disabled","title"],Q_=[E_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],ep=["disabled","title"],tp=[E_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function ap(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}ap("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),A_.render=function(e,t,a,l,n,s){const o=kn("select-search");return Ps(),js("div",T_,[Vs("div",P_,[Vs("div",U_,[Vs("div",I_,[Pn(e.$slots,"begin"),Vs("div",null,[Hs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",O_,[M_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,j_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),L_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,D_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},R_,8,F_),[[Yi,n.wrong_date||n.wrong_min_interval]])]),Vs("div",q_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,z_),Vs("div",B_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},H_,8,V_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},W_,8,G_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},J_,8,K_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},Z_,8,Y_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},Q_,8,X_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},tp,8,ep),Pn(e.$slots,"extra_buttons")])])])])])])},A_.__scopeId="data-v-6ae24a28",A_.__file="http_src/vue/date-time-range-picker.vue";var lp=Jl({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const np={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},sp={class:"modal-content"},op={class:"modal-header"},ip={class:"modal-title"},rp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),cp={class:"modal-body"},up={class:"modal-footer"},dp=Vs("div",{class:"mr-auto"},null,-1),_p=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);lp.render=function(e,t,a,l,n,s){return Ps(),js("div",{onSubmit:t[0]||(t[0]=Wi(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",np,[Vs("div",sp,[Vs("div",op,[Vs("h5",ip,[Pn(e.$slots,"title")]),rp]),Vs("div",cp,[Pn(e.$slots,"body")]),Vs("div",up,[dp,Pn(e.$slots,"footer"),_p])])])],544)},lp.__file="http_src/vue/modal.vue";const pp=a;function fp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=fp("vlan"),a=pp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=pp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return pp.REGEXES.macAddress;if("ip,cidr"==e){return`(${fp("ip")})|(${fp("cidr")})`}return pp.REGEXES[e]}const mp={get_data_pattern:fp};var vp={components:{modal:lp,"select-search":n_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):mp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const hp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),gp={autocomplete:"off"},bp={class:"form-group row"},yp=hp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),wp={class:"col-sm-8"},xp=hp((()=>Vs("hr",null,null,-1))),kp={class:"dt-filter-template-container form-group row"},$p={class:"col-form-label col-sm-3"},Sp={class:"col-sm-8"},Np={class:"input-group mb-3"},Cp={class:"input-group-prepend col-sm-3"},Ap={key:0,class:"col-sm-9"},Ep=["pattern","required"],Tp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Pp=["disabled"];ap("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),vp.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal");return Ps(),Ls(i,{id:n.id_modal,ref:"modal"},{title:vl((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:vl((()=>[Vs("form",gp,[Vs("div",bp,[yp,Vs("div",wp,[Hs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),xp,Vs("div",kp,[Vs("label",$p,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Sp,[Vs("div",Np,[Vs("div",Cp,[Hs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),n.options_to_show?(Ps(),js("div",Ap,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Ps(),js(Ss,{key:1},[wn(Vs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,Ep),[[Mi,n.input_value]]),Vs("span",Tp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Pp)])),_:1},8,["id"])},vp.__scopeId="data-v-3119c83e",vp.__file="http_src/vue/modal-filters.vue";let Up,Ip,Op,Mp,jp=[],Lp=null!=window.location.toString().match(/alert_stats.lua/),Dp=ntopng_url_manager.get_url_entry("status");null!=Dp&&""!=Dp||(Dp="historical");let Fp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Lp);const Rp=async function(){jp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Lp,Fp),jp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),jp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Up={},Ip={},jp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Up[e.id]=e.label)),Ip[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=jp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var qp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":A_,"modal-filters":vp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Rp();Mp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Up[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Op)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Ip[e.key]&&!Array.isArray(Ip[e.key])&&(e.operators=Ip[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=jp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Lp,status_view:Dp,page:Fp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Ip[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(jp.map((e=>e.id))),Mp.tagify.removeAllTags();let a=Qd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=jp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&Mp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const zp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Bp={style:{width:"100%"}},Vp={class:"mb-1"},Hp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Gp={class:"btn-group",id:"statusSwitch",role:"group"},Wp=[zp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],Kp=[zp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],Jp=[zp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],Yp={key:0,class:"d-flex mt-1",style:{width:"100%"}},Zp=["placeholder"],Xp=[zp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],Qp=[zp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];ap("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),qp.render=function(e,t,a,l,n,s){const o=kn("modal-filters"),i=kn("date-time-range-picker");return Ps(),js("div",Bp,[Vs("div",Vp,[Hs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:vl((()=>[n.is_alert_stats_url?(Ps(),js("div",Hp,[Vs("div",Gp,["flow"!=n.page?(Ps(),js("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},Wp,2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},Kp,2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},Jp,2)])])):Ys("v-if",!0),Pn(e.$slots,"begin")])),extra_buttons:vl((()=>[Pn(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Ps(),js("div",Yp,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,Zp),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},Xp,512),[[Yi,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},Qp,512),[[Yi,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},qp.__scopeId="data-v-aaee59ea",qp.__file="http_src/vue/range-picker.vue";const ef={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},tf={class:"col-sm-12 col-md-5"},af={class:"dataTables_info",role:"status","aria-live":"polite"},lf={class:"col-sm-12 col-md-7"},nf={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},sf={class:"pagination"},of={class:"paginate_button page-item previous"},rf=["onClick"],cf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},uf={class:"paginate_button page-item previous"};var df={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=6,s=ma(0),o=ma(0),i=ma(0),r=ma(0),c="Showing page %active_page of %total_pages: total %total_rows rows",u=ma("");function d(){if(null==l.total_rows)return;let e=l.per_page;i.value=Number.parseInt((l.total_rows+e-1)/e),o.value=n,i.value<o.value&&(o.value=i.value),r.value>=i.value&&i.value>0&&(i.value=i.value+1,r.value=i.value-1,s.value=i.value-o.value),m()}_n((()=>{d()})),Ml((()=>[l.total_rows,l.per_page]),((e,t)=>{d()}),{flush:"pre"});const _=xo((()=>!(i.value<n)&&r.value>=o.value-1)),p=xo((()=>!(i.value<n)&&r.value<i.value-o.value+1));function f(e,t){r.value=e,null!=t&&(s.value=t),r.value==s.value&&s.value>0&&(s.value-=1);let l=s.value+o.value-1;r.value==l&&i.value-1>l&&(s.value+=1),m(),a("change_active_page",r.value)}function m(){u.value=c.replace("%active_page",v(`${r.value+1}`)).replace("%total_pages",v(`${i.value}`)).replace("%total_rows",v(`${l.total_rows}`)).replace("%per_page",v(`${l.per_page}`))}function v(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:f}),(e,t)=>(Ps(),js(Ss,null,[Ys(" PerPage "),Vs("div",ef,[Ys(" div col-md-5 "),Vs("div",tf,[Vs("div",af,te(u.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",lf,[Vs("div",nf,[Vs("ul",sf,[wn(Vs("li",of,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>f(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yi,ya(_)]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{f(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),js(Ss,null,En(o.value,(e=>(Ps(),js("li",{onClick:t=>f(s.value+e-1),class:K([{active:r.value==s.value+e-1},"paginate_button page-item"])},[Vs("a",cf,te(s.value+e),1),Ys('  :key="total_rows"')],10,rf)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:r.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{f(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",uf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>f(i.value-1,i.value-o.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yi,ya(p)]])])])],512),[[Yi,i.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const _f={class:"text-center"},pf={class:"spinner-border text-primary mt-5",role:"status"},ff={class:"sr-only position-absolute"};var mf={__name:"loading",props:{},setup(e,{expose:t}){const a=i18n("loading"),l=ma(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(e,t)=>(Ps(),js("div",{ref_key:"overlay",ref:l,class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",_f,[Vs("div",pf,[Vs("span",ff,te(ya(a)),1)])])],512))},__file:"http_src/vue/loading.vue"};const vf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},hf=["checked","title"],gf=["innerHTML"];var bf={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=ma(!1);return _n((()=>{l.value=a.value})),Ml((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Ps(),js("div",vf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,hf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,gf)]))},__file:"http_src/vue/switch.vue"};const yf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),wf=["id"],xf={class:"button-group mb-2"},kf={style:{float:"left","margin-top":"0.5rem"}},$f=["value"],Sf=yf((()=>Vs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Nf={style:{"text-align":"right"},class:"form-group"},Cf={key:0,class:"d-inline"},Af=[yf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],Ef=[yf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Tf={key:1,class:"d-inline-block"},Pf=yf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Uf={class:"form-check form-switch ms-1"},If=["checked","onClick"],Of=["innerHTML"],Mf=["data-resizable-columns-id"],jf=["onClick","data-resizable-column-id"],Lf={style:{display:"flex"}},Df=["innerHTML"],Ff={class:"fa fa-fw fa-sort-up"},Rf={class:"fa fa-fw fa-sort-down"},qf={key:0,scope:"col",class:""},zf=["innerHTML"],Bf={key:0,style:{},class:"",scope:"col"},Vf=[yf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Hf={key:1,class:"mt-2"},Gf={class:"text-end"},Wf={style:{},class:"query text-end"},Kf={class:"records"},Jf={class:"text-start"},Yf={id:"historical_flows_table-query-time",style:{},class:"query"},Zf={class:"seconds"},Xf=["title"];var Qf={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean},emits:["custom_event","loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Io,nextTick:Ja},s=e=>i18n(e);ma(!0);const o=ma(null),i=ma(null),r=ma(null);ma([]);let c=0,u=[];const d=ma([]),_=ma([]),p=ma(0),f=[10,20,40,50,80,100],m=ma(10),v=window.store,h=ma(""),g=ma(null),y=ma(!1),w=ma(null),k=ma(null),S=ma(!1),N=ma(!1),C=ma(!1);_n((async()=>{null!=l.columns&&E()}));const A=xo((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));async function E(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],o="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(o=l.f_get_column_style(a));let i=l.get_column_id(a),r=e[i],c=r?.sort;return c=0==t&&null==c&&null!=l.default_sort&&i==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:J(a),order:r?.order||n,classes:s,style:o,data:a}})),await M()}(),await W(),O(),await Ja(),r.value.load_menu(),a("loaded")}let T;function P(){0!=C.value?T=setInterval((()=>{R()}),1e3*l.show_autorefresh):clearInterval(T)}async function U(){await async function(){I.value+=1,await Ja()}(),O()}Ml((()=>[l.id,l.columns]),((e,t)=>{E()}),{flush:"pre"});const I=ma(0);function O(){let e={store:v,minWidth:32};$(i.value).resizableColumns(e)}async function M(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function j(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;v.remove(t)})),await U()}function L(){D.value+=1,R(0)}const D=ma(0);const F=ma(0);async function R(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||q?await W():Y(),F.value+=1}let q=!1,z=!1;async function B(e){q=!0,z=e||!1,g.value.change_active_page(0,0),await Ja(),q=!1,z=!1}let H,G=!0;async function W(){y.value=!z;let e=await l.get_rows(c,m.value,d.value,h.value,G);w.value=null,null!=e.query_info&&(w.value=e.query_info),G=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Y(),y.value=!1}function J(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Y(){let e=0;if(0==l.paging&&(e=c*m.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+m.value)}async function Z(){let e=1e3;null!=H?clearTimeout(H):e=0,H=setTimeout((async()=>{await W(),H=null}),e)}function X(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:E,refresh_table:B,get_columns_defs:function(){return d.value}}),(t,a)=>(Ps(),js(Ss,null,[Pn(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:o,id:e.id},[y.value?(Ps(),Ls(mf,{key:0})):Ys("v-if",!0),Vs("div",xf,[Ys(" TableHeader "),Vs("div",kf,[Vs("label",null,[Ks(" Show "),wn(Vs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>m.value=e),onChange:L},[(Ps(),js(Ss,null,En(f,(e=>Vs("option",{value:e},te(e),9,$f))),64))],544),[[Fi,m.value]]),Ks(" Entries ")])]),Sf,Vs("div",Nf,[Pn(t.$slots,"custom_header"),e.enable_search?(Ps(),js("div",Cf,[Vs("label",null,[Ks(te(s("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>h.value=e),onInput:Z,class:""},null,544),[[Mi,h.value]])])])):Ys("v-if",!0),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:j},Af),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>B())},Ef),e.show_autorefresh>0?(Ps(),js("div",Tf,[Hs(bf,{value:C.value,"onUpdate:value":a[3]||(a[3]=e=>C.value=e),class:"me-2 mt-1",title:ya(A),style:{},onChange_value:P},null,8,["value","title"])])):Ys("v-if",!0),Hs(Rd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:vl((()=>[Pf])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(d.value,(t=>(Ps(),js("div",Uf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await W(),await U(),await M(),S.value=!1}(t),type:"checkbox",id:"toggle-Begin"},null,8,If),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.print_column_name(t.data)},null,8,Of)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])]),Ys(" TableHeader "),(Ps(),js("div",{key:I.value,class:"",style:{overflow:"auto",width:"100%"}},[Ys(" Table "),Vs("table",{ref_key:"table",ref:i,class:"table table-striped table-bordered ml-0 mr-0 mb-0",style:{"table-layout":"auto","white-space":"nowrap"},"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((t,a)=>(Ps(),js(Ss,null,[t.visible?(Ps(),js("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await W():Y(),await M()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Lf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Df),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Ff,null,512),[[Yi,1==t.sort&&t.sortable]]),wn(Vs("i",Rf,null,512),[[Yi,2==t.sort&&t.sortable]])])],10,jf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[S.value||N.value?Ys("v-if",!0):(Ps(!0),js(Ss,{key:0},En(_.value,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((a,l)=>(Ps(),js(Ss,null,[a.visible?(Ps(),js("td",qf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Ps(),js("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,zf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Ps(),Ls(jd,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<m.value?(Ps(!0),js(Ss,{key:1},En(m.value-_.value.length,(e=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((e,t)=>(Ps(),js(Ss,null,[e.visible?(Ps(),js("td",Bf,Vf)):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],8,Mf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Ps(),Ls(df,{ref_key:"select_table_page",ref:g,key:D.value,total_rows:p.value,per_page:m.value,onChange_active_page:R},null,8,["total_rows","per_page"]))]),null!=w.value?(Ps(),js("div",Hf,[Vs("div",Gf,[Vs("small",Wf,[Vs("span",Kf,te(w.value.num_records_processed),1),Ks(".")])]),Vs("div",Jf,[Vs("small",Yf,[Ks("Query performed in "),Vs("span",Zf,te((w.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:X,ref_key:"query_info_sql_button",ref:k},"SQL",8,Xf)])])])):Ys("v-if",!0)],8,wf)],64))}};ap("\n.sticky[data-v-61956e9e] {\n  position: sticky;\n  left: 0;\n  background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  width:100%;\n}\n.pointer[data-v-61956e9e] {\n  cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n  cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n/*table {\n    table-layout:fixed;\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}*/\n"),Qf.__scopeId="data-v-61956e9e",Qf.__file="http_src/vue/table.vue";var em={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function},emits:["custom_event","loaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma({}),s=ma(null),o=ma(!1);_n((async()=>{null==l.table_id&&null==l.table_config_id||r()})),Ml((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const i=xo((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){o.value=!1,await Ja();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Kd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),o.value=!0,await Ja()}function c(){a("loaded")}function u(e){a("custom_event",e)}return t({refresh_table:e=>{s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs()}),(t,a)=>o.value?(Ps(),Ls(Qf,{key:0,ref_key:"table",ref:s,id:ya(i),columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,onLoaded:c,onCustom_event:u},{custom_header:vl((()=>[Pn(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},tm={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Ps(),js("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const am={id:"script-description",class:"notes bg-light border",role:"alert"},lm=["innerHTML"];var nm={__name:"note-list",props:{note_list:Array},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Ps(),js("div",am,[Vs("b",null,te(a("notes")),1),Vs("ul",null,[(Ps(!0),js(Ss,null,En(t.note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,lm)))),256))])]))},__file:"http_src/vue/note-list.vue"},sm=Jl({components:{modal:lp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const om=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),im=["innerHTML"],rm={key:0,style:{height:"95%"}},cm={class:"tab-content",style:{height:"100%"}},um={class:"row"},dm={class:"form-group mb-3 col-md-3 has-feedback"},_m={class:"form-group mb-3 col-md-9 text-right asd"},pm={class:"radio-inline",style:{"margin-left":"1rem"}},fm={class:"radio-inline"},mm={class:"row",id:"pcapDownloadModal_advanced",style:{}},vm={class:"form-group mb-3 col-md-12 has-feedback"},hm=om((()=>Vs("br",null,null,-1))),gm={class:"form-label"},bm=om((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),ym={class:"input-group"},wm=om((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),xm=om((()=>Vs("br",null,null,-1))),km={class:"form-label"},$m=om((()=>Vs("br",null,null,-1))),Sm=om((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));ap("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),sm.render=function(e,t,a,l,n,s){const o=kn("modal");return Ps(),Ls(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:vl((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:vl((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,im),1==e.data_available?(Ps(),js("form",rm,[Vs("div",cm,[Vs("div",um,[Vs("div",dm,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",_m,[Vs("label",pm,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Di,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",fm,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Di,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",mm,[Vs("div",vm,[hm,Vs("label",gm,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),bm]),Vs("div",ym,[wm,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Mi,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yi,e.invalid_bpf]])]),xm,Vs("label",km,te(e.i18n("traffic_recording.filter_examples"))+":",1),$m,Sm])],512),[[Yi,e.show_menu]])])])):Ys("v-if",!0)])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yi,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yi,2==e.data_available]])])),_:1},8,["id","onApply"])},sm.__scopeId="data-v-0be978c4",sm.__file="http_src/vue/modal-traffic-extraction.vue";const Nm=e=>(pl("data-v-089b0491"),e=e(),fl(),e),Cm=Nm((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Am={class:"nav nav-tabs"},Em=["disabled"],Tm={key:0,style:{"min-height":"8.5rem"}},Pm={class:"form-group ms-2 me-2 mt-3 row"},Um={class:"col-form-label col-sm-4"},Im={class:"col-sm-6"},Om=["pattern"],Mm={key:1,style:{"min-height":"8.5rem"}},jm={class:"form-group ms-2 me-2 mt-3 row"},Lm={class:"col-form-label col-sm-4"},Dm={class:"col-sm-8"},Fm={value:"name"},Rm={value:"date"},qm={class:"form-group ms-2 me-2 mt-3 row"},zm={class:"col-form-label col-sm-4"},Bm={class:"col-sm-8"},Vm=["value"],Hm={class:"form-group ms-2 me-2 mt-3 row"},Gm={class:"custom-control custom-switch"},Wm={class:"custom-control-label ms-1 form-check-label"},Km=["disabled"],Jm=["disabled"],Ym=["disabled"];var Zm={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("add"),o=ma(""),i=ma(!1),r=ma(""),c=ma(!0),u=ma(""),d=ma(""),_=ma([]),p=ma("date");let f=NtopUtils.REGEXES.singleword;const m=xo((()=>!new RegExp(f).test(d.value))),v=xo((()=>""==o.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(o.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=o.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=o.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(o.value=_.value[0])}(),n.value.show()},close:$}),_n((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ps(),Ls(lp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(S("snapshots.manage"))+" ",1),Cm])),body:vl((()=>[Vs("ul",Am,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==_.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},te(S("snapshots.manage")),11,Em)])]),"add"==s.value?(Ps(),js("div",Tm,[Vs("div",Pm,[Vs("label",Um,[Vs("b",null,te(S("snapshots.name"))+":",1)]),Vs("div",Im,[wn(Vs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Om),[[Mi,d.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==s.value?(Ps(),js("div",Mm,[Vs("div",jm,[Vs("label",Lm,[Vs("b",null,te(S("snapshots.order_by")),1)]),Vs("div",Dm,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Vs("option",Fm,te(S("snapshots.name")),1),Vs("option",Rm,te(S("snapshots.date")),1)],544),[[Fi,p.value]])])]),Vs("div",qm,[Vs("label",zm,[Vs("b",null,te(S("snapshots.select")),1)]),Vs("div",Bm,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>o.value=e)},[(Ps(!0),js(Ss,null,En(_.value,(e=>(Ps(),js("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Vm)))),256))],512),[[Fi,o.value]])])]),Vs("div",Hm,[Vs("div",Gm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[ji,i.value]]),Vs("label",Wm,te(r.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:vl((()=>["add"==s.value?(Ps(),js("button",{key:0,type:"button",onClick:w,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.add")),9,Km)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:2,type:"button",onClick:k,disabled:ya(v),class:"btn btn-danger"},te(S("snapshots.delete")),9,Jm)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:3,type:"button",onClick:x,disabled:ya(v),class:"btn btn-primary"},te(S("snapshots.apply")),9,Ym)):Ys("v-if",!0)])),_:1},512))}};ap("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Zm.__scopeId="data-v-089b0491",Zm.__file="http_src/vue/modal-snapshot.vue";const Xm=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),Qm=["innerHTML"],ev={class:"form-group mb-3"},tv=["innerHTML"],av={class:"alert_label"},lv={class:"form-check"},nv={class:"form-check-label"},sv={key:0,class:"form-check"},ov={class:"form-check-label"},iv={class:"form-check"},rv={class:"form-check-label"},cv={class:"form-check"},uv={class:"form-check-label"},dv={key:0,class:"exclude-domain-certificate"},_v={class:"alert_label"},pv={key:0,class:"form-check"},fv={class:"form-check-label whitespace"},mv=["pattern","disabled"],vv={key:1,class:"form-check"},hv={class:"form-check-label whitespace"},gv=["disabled","pattern"],bv={key:0,class:"form-group row"},yv={class:"col-form-label"},wv={class:"mt-1"},xv=["placeholder"],kv={class:"separator"},$v=Xm((()=>Vs("hr",{class:"separator"},null,-1))),Sv={class:"form-group mb-3"},Nv={class:"custom-control custom-switch"},Cv={class:"custom-control-label"},Av={class:"alert alert-warning border",role:"alert"},Ev=["disabled"];var Tv={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("any"),o=ma(!0),i=ma(null),r=ma(null),c=ma(null),u=i18n("details.comment_placeholder");Ml((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",o.value=!0,i.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=()=>{if("domain"==s.value){let e=new RegExp(m);return null==i.value||0==e.test(i.value)}if("certificate"==s.value){let e=new RegExp(v);return null==r.value||0==e.test(r.value)}return!1},_=xo((()=>l.alert?.alert_name)),p=xo((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),f=xo((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,v=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:o.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=p.value.value:"server_host"==s.value?u=f.value.srv_value:"client_host"==s.value&&(u=f.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=i.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),g(),a("exclude",n)},g=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:g}),_n((()=>{}));const b=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(b("exclude_check"))+": ",1),Vs("span",{innerHTML:ya(_)},null,8,Qm)])),body:vl((()=>[Vs("div",ev,[Vs("div",null,[Vs("label",null,[Ks(te(b("exclude_check"))+' "',1),Vs("b",{innerHTML:ya(_)},null,8,tv),Ks('". '),Vs("span",av,te(b("exclude_for"))+":",1)]),Vs("div",lv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",nv,[Vs("span",null,te(b("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),js("div",sv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",ov,[Vs("span",null,te(ya(p).label),1)])])):Ys("v-if",!0),"flow"==e.page?(Ps(),js(Ss,{key:1},[Vs("div",iv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",rv,[Vs("span",null,te(b("client"))+": "+te(ya(f).cli_label),1)])]),Vs("div",cv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",uv,[Vs("span",null,te(b("server"))+": "+te(ya(f).srv_label),1)])])],64)):Ys("v-if",!0)]),null!=i.value||null!=r.value?(Ps(),js("div",dv,[Vs("label",null,[Vs("span",_v,te(b("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Ps(),js("div",pv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",fv,[Vs("span",null,te(b("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,mv),[[Mi,i.value]])])):Ys("v-if",!0),null!=r.value?(Ps(),js("div",vv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Di,s.value]]),Vs("label",hv,[Vs("span",null,te(b("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ya(v),required:"",class:"form-check-label custom-width"},null,8,gv),[[Mi,r.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=s.value?(Ps(),js("div",bv,[Vs("div",null,[Vs("label",yv,[Vs("b",null,te(b("show_alerts.add_a_comment")),1)])]),Vs("div",wv,[wn(Vs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,xv),[[Mi,c.value]])])])):Ys("v-if",!0),wn(Vs("hr",kv,null,512),[[Yi,o.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ps(),js(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(b("show_alerts.confirm_delete_filtered_alerts")),513),[[Yi,o.value]]),$v,Vs("div",Sv,[Vs("div",Nv,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>o.value=e)},null,512),[[ji,o.value]]),Vs("label",Cv,te(b("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Av,te(b("show_alerts.confirm_filter_alert")),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:h,disabled:d(),class:"btn btn-warning"},te(b("filter")),9,Ev)])),_:1},512))}};ap("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Tv.__scopeId="data-v-19c5b1f1",Tv.__file="http_src/vue/modal-alerts-filter.vue";const Pv={class:"form-group row mb-2"},Uv={class:"col-sm-6"},Iv={class:"col-form-label"},Ov={class:"col-sm-6 mt-1"};var Mv={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:i.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}_n((()=>{}));const u=ma({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),i.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");o.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("show_alerts.acknowledge_alert"))+": "+te(r.value),1)])),body:vl((()=>[Vs("div",Pv,[Vs("div",Uv,[Vs("label",Iv,[Vs("b",null,te(n("show_alerts.add_a_comment")),1)])]),Vs("div",Ov,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[Mi,i.value]])])]),Hs($_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},jv={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}_n((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=n("show_alerts.confirm_label_alert");o.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("show_alerts.delete_alert")),1)])),body:vl((()=>[Hs($_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Lv={class:"form-group row"},Dv={class:"col-sm-6"},Fv={class:"col-form-label"},Rv={class:"col-sm-6"},qv=["value"],zv={class:"form-group row mb-2"},Bv={class:"col-sm-6"},Vv={class:"col-form-label"},Hv={class:"col-sm-6 mt-1"},Gv=["value"];var Wv={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma("");ma([]),_n((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("acknowledge_alerts")),1)])),body:vl((()=>[Vs("div",Lv,[Vs("div",Dv,[Vs("label",Fv,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Rv,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,qv)])]),Vs("div",zv,[Vs("div",Bv,[Vs("label",Vv,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Hv,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,Gv)])]),Hs($_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const Kv={class:"form-group row"},Jv={class:"col-sm-6"},Yv={class:"col-form-label"},Zv={class:"col-sm-6"},Xv=["value"],Qv={class:"form-group row"},eh={class:"col-sm-6"},th={class:"col-form-label"},ah={class:"col-sm-6 mt-1"},lh=["value"],nh={class:"form-group filters-list mb-2"},sh={class:"form-group row"},oh={class:"col-sm-6"},ih={class:"col-form-label"},rh={class:"col-sm-6 mt-1"},ch=["value"];var uh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma(""),c=ma([]);_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Qd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("delete_alerts")),1)])),body:vl((()=>[Vs("div",Kv,[Vs("div",Jv,[Vs("label",Yv,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Zv,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,Xv)])]),Vs("div",Qv,[Vs("div",eh,[Vs("label",th,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",ah,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,lh)])]),Vs("div",nh,[(Ps(!0),js(Ss,null,En(c.value,(e=>(Ps(),js("div",sh,[Vs("div",oh,[Vs("label",ih,[Vs("b",null,te(e.label),1)])]),Vs("div",rh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,ch)])])))),256))]),Hs($_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const dh={class:"row"},_h={class:"col-12"},ph={class:"mb-2"},fh={class:"w-100"},mh={clas:"range-container d-flex flex-wrap"},vh={class:"range-picker d-flex m-auto flex-wrap"},hh={key:0,class:"ms-1 me-2"},gh=["value"],bh=["label"],yh=["value"],wh=["title"],xh=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],kh=["title","href"],$h=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],Sh=["title"],Nh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],Ch=["title"],Ah=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Eh={class:"col-12"},Th={class:"card card-shadow"},Ph={class:"card-body"},Uh={key:0,class:"row"},Ih={class:"col-12 mb-2",id:"chart-vue"},Oh={class:"card h-100 overflow-hidden"},Mh=Vs("div",null,null,-1),jh=["title"],Lh=["onClick","title"],Dh={class:"card-footer"},Fh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Rh=Vs("i",{class:"fas fa fa-trash"},null,-1);var qh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(null),s=ma(null),o=ma(null),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(0),v=ma(null),g=t.context.ifid;let w;const k=ma(""),S=ma("");let C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const A=j.typeChart.TS_COLUMN,E=ma([]),T=ma([]),P=ma([a("show_alerts.alerts_info")]),U=ma({}),I=ma([]),O=ma(!1),M=xo((()=>{if(!t.context.show_chart||null==s.value)return"";if(m.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));dn((async()=>{t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){w=x.get_url_entry("page");const e=x.get_url_entry("status");null==w&&(w="all");"engaged"==e&&"flow"==w&&x.set_key_to_url("status","historical");C="snmp_device"==w?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${w}/alert/ts.lua`,U.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==U.value.value&&(U.value.value="");k.value=`alert_${w}`,S.value=`${k.value}_${U.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",g);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${w}`,a=await b.http_request(e);if(null==a||0==a.length)return I.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());I.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};I.value.push(t)}));if(null==U.value||""==U.value.value)U.value=I.value[0];else{let e=I.value.find((e=>e.value==U.value.value));U.value=e||I.value[0]}x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),h.ready(D())}(),O.value=!0,await R()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(w,(e=>{x.get_url_params(),s.value.refresh_table(),R()}),!1)}()}));const L="page-alert-stats";function D(){return`${L}_query_presets`}async function R(e){1==t.context.show_cards&&1!=U.value.is_preset&&(E.value=await q("overview"))}async function q(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/${w}/alert/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const z=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await q(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),T.value[t].load_menu()}e.show_spinner=!1}(e,t)};function B(){$(`#${S.value}`).on("click","a.tag-filter",(async function(e){H(e,$(this))}))}const V=async e=>{await h.on_ready(D());let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return F.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${F.filterize("info",e.value,e.label)}`}},l=U.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},H=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),G({id:a,value:l,operator:n})};function G(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e)}const W=()=>x.get_url_object();function K(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function J(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Y(){o.value.show()}function Z(){i.value.show()}async function X(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function Q(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function ee(e){let t={click_button_snmp_info:ce,click_button_info:ue,click_button_historical_flows:re,click_button_acknowledge:ie,click_button_disable:oe,click_button_settings:se,click_button_remove:ne,click_button_expand:ae};null!=t[e.event_id]&&t[e.event_id](e)}function ae(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Qd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function le(){let e=y.get_status();f.value.show(e)}function ne(e){const t=e.row;let a=de();_.value.show(t,a)}function se(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function oe(e){!function(e){v.value=e,u.value.show()}(e.row)}function ie(e){const a=e.row;d.value.show(a,t.context)}function re(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function ce(e){const t=e.row,a=`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`;window.open(a,"_blank")}function ue(e){const a=e.row;let l=de(),n={page:w,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const o=`${t.context.alert_details_url}?${s}`;window.open(o,"_blank")}function de(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,m)=>(Ps(),js(Ss,null,[Hs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:K},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",dh,[Vs("div",_h,[Vs("div",ph,[Vs("div",fh,[Vs("div",mh,[Vs("div",vh,[Hs($_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(sm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(Zm,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),O.value?(Ps(),Ls(qp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:vl((()=>[I.value.length>0?(Ps(),js("div",hh,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":m[0]||(m[0]=e=>U.value=e),onChange:m[1]||(m[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,gh)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(w)?(Ps(),js("optgroup",{key:0,label:a("queries.queries")},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,yh))],64)))),256))],8,bh)):Ys("v-if",!0)],544),[[Fi,U.value]])])):Ys("v-if",!0)])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:J,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},xh,8,wh)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:ya(M)},$h,8,kh)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Y,title:a("traffic_recording.pcap_download")},Nh,8,Sh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:Z,title:a("datatable.manage_snapshots")},Ah,8,Ch)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Eh,[Vs("div",Th,[Vs("div",Ph,[e.context.show_chart?(Ps(),js("div",Uh,[Vs("div",Ih,[Vs("div",Oh,[Hs(N_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(A),base_url_request:ya(C),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Mh,Hs(em,{ref_key:"table_alerts",ref:s,table_config_id:k.value,table_id:S.value,csrf:e.context.csrf,f_map_columns:V,get_extra_params_obj:W,onLoaded:B,onCustom_event:ee},{custom_header:vl((()=>[(Ps(!0),js(Ss,null,En(E.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:z(e,t),ref_for:!0,ref:e=>{T.value[t]=e}},{title:vl((()=>[Hs(tm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,jh)])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),G({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Lh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Dh,[e.context.show_acknowledge_all?(Ps(),js("button",{key:0,onClick:m[2]||(m[2]=(...e)=>t.show_modal_acknoledge_alerts&&t.show_modal_acknoledge_alerts(...e)),class:"btn btn-primary me-1"},[Fh,Ks(" "+te(a("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Ps(),js("button",{key:1,onClick:le,class:"btn btn-danger"},[Rh,Ks(" "+te(a("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yi,"all"!=ya(w)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(nm,{note_list:P.value},null,8,["note_list"])]),Ys(" div row "),Hs(Mv,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(w),onAcknowledge:Q},null,8,["context","page"]),Hs(jv,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(w),onDelete_alert:Q},null,8,["context","page"]),Hs(Wv,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(w),onAcknowledge_alerts:Q},null,8,["context","page"]),Hs(uh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(w),onDelete_alerts:Q},null,8,["context","page"]),Hs(Tv,{alert:v.value,page:ya(w),onExclude:X,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const zh={class:"row"},Bh={class:"col-12"},Vh={class:"mb-2"},Hh={class:"w-100"},Gh={clas:"range-container d-flex flex-wrap"},Wh={class:"range-picker d-flex m-auto flex-wrap"},Kh={class:"ms-1 me-2"},Jh=["value"],Yh=["label"],Zh=["value"],Xh=["title"],Qh=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],eg=["title","href"],tg=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],ag=["title"],lg=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],ng=["title"],sg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],og={class:"col-12"},ig={class:"card card-shadow"},rg={class:"card-body"},cg={class:"row"},ug={key:0,class:"col-12 mb-2",id:"chart-vue"},dg={class:"card h-100 overflow-hidden"},_g=["title"],pg=["onClick","title"],fg={key:0,class:"card-footer"},mg={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},vg=Vs("i",{class:"fas fa fa-user-check"},null,-1),hg={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},gg=Vs("i",{class:"fas fa fa-trash"},null,-1);var bg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n="page-flow-historical",s=ma(null),o=ma(null),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(null),v=t.context.ifid,g=ma(""),w=ma(""),k=xo((()=>{if(null==P.value?.value)return w.value;return`${w.value}_${P.value.value}`})),S=xo((()=>{if(R.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=i.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const A=j.typeChart.TS_COLUMN,E=ma([]),T=ma([]),P=ma({}),U=ma([]);ma([]);const I=ma(!1),O=ma(!1),M=ma(l("datatable.aggregated")),L=ma(null),D=ma(!1),R=ma(0);function q(){0==O.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function z(e){1==t.context.show_cards&&(E.value=await B("overview"))}async function B(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}dn((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,P.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==P.value.value&&(P.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",O.value=!0,L.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",v);if(0==O.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(L.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(L.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,L.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,L.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${O.value}`,t=await b.http_request(e);U.value=t[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),t.length>1&&t[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};U.value.push(t)}));if(null==P.value||""==P.value.value)P.value=U.value[0];else{let e=U.value.find((e=>e.value==P.value.value));P.value=e||U.value[0]}x.set_key_to_url("query_preset",P.value.value),x.set_key_to_url("count",P.value.count),h.ready(ce())}(),I.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&o.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),i.value.refresh_table(),z(),R.value+=1}),!1)}(),z()}));const V=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await B(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),T.value[t].load_menu()}e.show_spinner=!1}(e,t)};function H(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){W(e,$(this))}))}const G=async e=>{await h.on_ready(ce());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`;let s={first_seen:(e,t)=>{if(void 0!==e)return e.time},l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return F.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),P.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=s[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&O.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},W=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),K({id:a,value:l,operator:n})};function K(e){u.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const J=()=>x.get_url_object();function Y(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function Z(){const e=$(d.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function X(){r.value.show()}function Q(){c.value.show()}async function ee(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ae(e){let t=i.value,a=o.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function le(e){let t={click_button_info:ne,click_button_flow_alerts:ie,click_button_historical_flows:oe,click_button_pcap_download:se,click_button_flows:re};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function se(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};r.value.show(t?.filter?.bpf,a)}function oe(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function ie(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function re(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function ce(){return`${n}_query_presets`}return(a,n)=>(Ps(),js(Ss,null,[Hs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:Y},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",zh,[Vs("div",Bh,[Vs("div",Vh,[Vs("div",Hh,[Vs("div",Gh,[Vs("div",Wh,[Hs($_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:s},null,512),I.value?(Ps(),Ls(qp,{key:0,ref_key:"range_picker",ref:u,id:"range_picker",min_time_interval_id:L.value,round_time:D.value},{begin:vl((()=>[t.context.is_enterprise_xl?(Ps(),Ls(bf,{key:0,value:O.value,"onUpdate:value":n[0]||(n[0]=e=>O.value=e),class:"me-2 mt-1",change_label_side:!0,label:M.value,style:{},onChange_value:q},null,8,["value","label"])):Ys("v-if",!0),Vs("div",Kh,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":n[1]||(n[1]=e=>P.value=e),onChange:n[2]||(n[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",P.value.value),x.set_key_to_url("count",P.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(U.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,Jh)):Ys("v-if",!0)],64)))),256)),"analysis"!=g.value?(Ps(),js("optgroup",{key:0,label:l("queries.queries")},[(Ps(!0),js(Ss,null,En(U.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,Zh))],64)))),256))],8,Yh)):Ys("v-if",!0)],544),[[Fi,P.value]])])])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:Z,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:d},Qh,8,Xh)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:ya(S)},tg,8,eg)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:l("traffic_recording.pcap_download")},lg,8,ag)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:Q,title:l("datatable.manage_snapshots")},sg,8,ng)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",og,[Vs("div",ig,[Vs("div",rg,[Vs("div",cg,[e.context.show_chart?(Ps(),js("div",ug,[Vs("div",dg,[Hs(N_,{ref_key:"chart",ref:o,id:"chart_0",chart_type:ya(A),base_url_request:ya(C),register_on_status_change:!1,min_time_interval_id:L.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])])])):Ys("v-if",!0),Hs(em,{ref_key:"table_flows",ref:i,table_id:ya(k),table_config_id:w.value,csrf:e.context.csrf,f_map_columns:G,get_extra_params_obj:J,onLoaded:H,onCustom_event:le},{custom_header:vl((()=>[(Ps(!0),js(Ss,null,En(E.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:V(e,t),ref_for:!0,ref:e=>{T.value[t]=e}},{title:vl((()=>[Hs(tm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,_g)])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),K({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,pg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Ps(),js("div",fg,[t.context.show_acknowledge_all?(Ps(),js("button",mg,[vg,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),t.context.show_delete_all?(Ps(),js("button",hg,[gg,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(sm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:r},null,512),Hs(Zm,{ref_key:"modal_snapshot",ref:c,csrf:e.context.csrf},null,8,["csrf"]),Hs(Mv,{ref_key:"modal_acknowledge",ref:p,context:e.context,onAcknowledge:ae},null,8,["context"]),Hs(jv,{ref_key:"modal_delete",ref:f,context:e.context,onDelete_alert:ae},null,8,["context"]),Hs(Tv,{alert:m.value,page:g.value,onExclude:ee,ref_key:"modal_alerts_filter",ref:_},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},yg={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=[],n=0;for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:n,color:t.colors[n]+"!important"}),n+=1,l.push(!0);t.visibility=l,this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateOptions({file:e})},get_chart_options:async function(e){let t;return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const wg={style:{width:"100% height:380px"},class:"text-end mb-2"},xg={class:"form-check-label form-control-sm"},kg=["onClick","checked"],$g={class:"mb-3",style:{width:"100%"},ref:"chart"};yg.render=function(e,t,a,l,n,s){return Ps(),js(Ss,null,[Vs("div",wg,[(Ps(!0),js(Ss,null,En(n.timeseries_list,((e,t)=>(Ps(),js("label",xg,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,kg),Ks(" "+te(e.name),1)])))),256))]),Vs("div",$g,null,512)],64)},yg.__file="http_src/vue/timeseries-chart.vue";const Sg=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Ng={class:"form-group ms-2 me-2 mt-3 row"},Cg={class:"col-11"},Ag={class:"col-form-label"},Eg=[Sg((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Tg={class:"container"},Pg={class:"row custom-ms me-2 mt-1"},Ug={class:"col-5"},Ig=["onUpdate:modelValue"],Og={class:"custom-control-label ms-1 form-check-label"},Mg={class:"col-2"},jg=["onUpdate:modelValue"],Lg=Sg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Dg={class:"col-2"},Fg=["onUpdate:modelValue"],Rg=Sg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),qg={class:"col-3"},zg=["onUpdate:modelValue"],Bg=Sg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var Vg={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Ps(),js("div",null,[Vs("div",Ng,[Vs("div",Cg,[Vs("label",Ag,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),js("div",{key:0,class:"col-1",onClick:n},Eg)):Ys("v-if",!0)]),Vs("div",Tg,[(Ps(!0),js(Ss,null,En(e.timeseries,(e=>(Ps(),js("div",Pg,[Vs("div",Ug,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,Ig),[[ji,e.raw]]),Vs("label",Og,te(e.label),1)]),Vs("div",Mg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,jg),[[ji,e.past]]),Lg]),Vs("div",Dg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Fg),[[ji,e.avg]]),Rg]),Vs("div",qg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,zg),[[ji,e.perc_95]]),Bg])])))),256))])]))}};ap("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),Vg.__scopeId="data-v-185590b6",Vg.__file="http_src/vue/list-timeseries.vue";const Hg=m.getFormatter(m.types.bytes.id),Gg="page-stats-action-link",Wg="page-stats-action-jump-historical",Kg={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:Gg,render:function(e,t,a){let l=this,n={handlerId:Gg,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return D.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:Wg,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:Wg,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},Jg={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:Gg,render:function(e,t,a){let l=this,n={handlerId:Gg,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return D.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>Hg(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:Wg,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:Wg,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},Yg=[Kg,Jg,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:Gg,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:Gg,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=D.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>Hg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:Wg,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:Wg,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:Wg,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),D.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:Gg,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:Gg,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=D.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>Hg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:Wg,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:Wg,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:Wg,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),D.createActionButtons(r)}}]}];let Zg=Yg.find((e=>"top_protocols"==e.view));null!=Zg&&(Zg=b.clone(Zg),Zg.table_value="host");const Xg=[Zg],Qg=m.getFormatter(m.types.bytes.id),eb=m.getFormatter(m.types.bps.id),tb="page-stats-action-link",ab={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:tb,render:function(e,t,a){let l=this,n={handlerId:tb,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return D.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:tb,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>Qg(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>Qg(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>Qg(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>eb(e)}]},lb=[ab],nb=m.getFormatter(m.types.bytes.id),sb=m.getFormatter(m.types.bps.id),ob="page-stats-action-link",ib={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:ob,render:function(e,t,a){let l=this,n={handlerId:ob,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return D.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>nb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>nb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>nb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>sb(e)}]},rb=[ib],cb={hide:"hide",select:"select",input:"input"},ub={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>(console.log(e.device.ip),"")},db={interface:Yg,host:Xg,snmp_interface:lb,snmp_device:lb,flow_device:rb,flow_interface:rb},_b=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:cb.select}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:cb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:cb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:cb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:cb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:cb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:cb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:cb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:cb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:cb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:cb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:cb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:cb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:cb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:cb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:cb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:cb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:cb.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:cb.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:cb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:cb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:cb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:cb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:cb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:cb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:cb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:cb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:cb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:cb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:cb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:cb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:cb.input}]}],pb={ui_types:cb,sources_url_el_to_source:ub,sources_types:_b,sources_types_tables:db},fb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const mb=(e,t,a)=>{let l=gb(e,t,a),n=[];for(let e in a.timeseries){let t=a.timeseries[e];n.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:l,source_type:e,source_array:t,metric:a,timeseries:n}},vb=async(e,t,a)=>{let l=Ub(),n=await xb(e,l),s=await Pb(e,l,n),o=Mb(s,t,a);return[mb(l,n,o)]};async function hb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=wb(a),i=await $b(http_prefix,o,l),r=await Ib(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e),s=a[1],o=t.timeseries[s].label,i=JSON.parse(a[2]),r=JSON.parse(a[3]),c=JSON.parse(a[4]),u=JSON.parse(a[5]);n.push({id:s,label:o,raw:i,past:r,avg:c,perc_95:u})})),n}(s,r);return{id:gb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const gb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const bb=pb.sources_url_el_to_source,yb=pb.sources_types,wb=e=>yb.find((t=>t.id==e)),xb=async(e,t)=>{let a=Ab(t);return await $b(e,t,a)};async function kb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await $b(e,t,l)}const $b=async(e,t,a)=>{null==t&&(t=Ub());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let a=[];a=i.sources_url?await Nb(e,t.id,i):i.sources_function(),l=a.find((e=>e.value==o)),null==l&&(l=a[0])}else l={label:o,value:o};n.push(l)}return n};let Sb={};const Nb=async(e,t,l)=>{let n=`${t}_${l.value}`;if(null==Sb[n])if(l.sources_url){let t=`${e}/${l.sources_url}`;Sb[n]=b.http_request(t)}else{if(!l.sources_function)return[];Sb[n]=l.sources_function()}let s=await Sb[n];if(l.sources_url){let e=bb[l.value_map_sources_res];if(null==e&&(e=bb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;s=s.map((t=>e(t)))}return s.sort(a.sortAlphabetically)};function Cb(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const Ab=e=>(null==e&&(e=Ub()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Eb={},Tb=null;const Pb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Ub()),null==a&&(a=await xb(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=Tb&&(Eb[r]=null,Tb=o),null==Eb[r]&&(Eb[r]=b.http_request(i));let c=await Eb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Ub=()=>{let e=window.location.pathname;for(let t=0;t<yb.length;t+=1){if(1==new RegExp(yb[t].regex_page_url).test(e))return yb[t]}throw`source_type not found for ${e}`},Ib=async(e,t,a,l,n,s)=>(await Pb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Ob=(e,t)=>{null==t&&(t=Ub());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Mb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},jb={set_timeseries_groups_in_url:fb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await hb(e))),Promise.all(a.map((async e=>await hb(e))))},get_default_timeseries_groups:vb,get_ts_group:mb,get_ts_group_id:gb,sources_types:yb,sources_types_tables:pb.sources_types_tables,get_source_type_from_id:wb,get_current_page_source_type:Ub,get_sources:Nb,get_default_source_array:xb,get_source_array_from_value_dict:kb,get_source_array_from_value_array:$b,get_default_source_value_array:Ab,get_metrics:Pb,get_metric_from_schema:Ib,get_metric_query_from_ts_query:Ob,get_default_metric:Mb,set_source_value_object_in_url:Cb,ui_types:pb.ui_types};function Lb(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];Db(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function Db(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=Fb(n,t,a),r=Fb(s,t,a),c=Fb(o,t,a);return function(e,t,a){return"#"+Rb(e)+Rb(t)+Rb(a)}(i,r,c)}(e,l+1,t)))}function Fb(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function Rb(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const qb={transformColors:Lb},zb={"95_perc":"#8EA4E8",avg:"#839BE6"};function Bb(e){return`${e.id}`}function Vb(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=ey(a);return`${`${a.source_array[s].label}`} - ${n}`}const Hb=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const Gb={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function Wb(e){return Gb[e]||null}function Kb(e,t,a,l){if(a.value==Gb["1_chart_x_metric"].value)return Jb(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t),s=Jb(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,Gb["1_chart_x_metric"],l),o=Jb(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l);return console.log([...s,...o]),[...s,...o]}function Jb(e,t,a,l){let n=!1;if(a.value==Gb["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=Zb(o,i,l,n);s.push(r)}return s}if(a.value==Gb["1_chart_x_metric"].value){n=e.length>1;let a=[];return e.forEach(((e,s)=>{let o=Zb([e],[t[s]],l,n);a.push(o)})),a}return[]}function Yb(e){return"point"==e?{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2}:"line"==e?{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5}:"bounds"==e?{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}:{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}function Zb(e,t,a,l){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToOptions: tsOptionsArray ${e} different length from tsGroupsArray ${t}`);let n=[],s=[],o=["Time"],i=!1,r=[],c={},u=!1,d=null!=l&&l;e.forEach(((e,l)=>{const _=e.series||[],p=e.metadata.epoch_begin,f=e.metadata.epoch_step,m=e.additional_series;if(1==(t[l].metric.bounds||!1)){u=!0;let e=p;const{serie:a,color:i,formatter:d,serie_name:m,properties:v}=function(e,t){let a=[],l={},n=null,s=null,o={};return e.forEach(((e,i)=>{let r=1,c=ay.getSerieId(e);const u=e.data||[];let d=t.metric.timeseries[c];if(1==d.invert_direction&&(r=-1),"metric"==d.type){let e=d.label;s=Vb(e,c,t,!0),o=Yb("bounds"),l={color:d.color,palette:0},n=t.metric.measure_unit}for(let e=0;e<u.length;e++){let t=u[e];null==t&&(t=NaN),null==a[e]&&(a[e]=[0,NaN,0]),"metric"==d.type?a[e][1]=t*r:"lower_bound"==d.type?a[e][0]=t*r:"upper_bound"==d.type&&(a[e][2]=t*r)}})),{serie:a,color:l,formatter:n,serie_name:s,properties:o}}(_,t[l]);r.push(i);const h=s.find((e=>e==d));null==h&&s.push(d);const g=`${m} ${i18n("lower_value_upper")}`;o.push(g),c[g]={},c[g]=v;Object.keys(a).forEach(((t,l)=>{const s=a[t];null==n[e]&&(n[e]=[{value:b.from_utc_s_to_server_date(e),name:"Time"},{value:s,name:g}]),e+=f}))}else _.forEach(((e,u)=>{const _=e.data||[];let v=p,h=ay.getSerieId(e),g=t[l].metric.timeseries[h],y=t[l].timeseries[u],w=1,x=g.label;0==i&&(i=t[l].metric.draw_stacked),1==g.invert_direction&&(w=-1),r.push({color:g.color,palette:0});const k=s.find((e=>e==t[l].metric.measure_unit));null==k&&s.push(t[l].metric.measure_unit),e.ext_label&&(x=e.ext_label);const $=Vb(x,h,t[l],d),S=Vb(x+" Avg",h,t[l],d),N=Vb(x+" 95th Perc",h,t[l],d),C=Vb(x+" "+a+" Ago",h,t[l],d);o.push($),c[$]={},c[$]=Yb(e.type||"filled"),1==y?.avg&&(o.push(S),c[S]={},c[S]=Yb("point"),r.push({color:zb.avg,palette:1})),1==y?.perc_95&&(o.push(N),c[N]={},c[N]=Yb("point"),r.push({color:zb.perc_95,palette:1})),1==y?.past&&(o.push(C),c[C]={},c[C]=Yb("line"),r.push({color:zb.past,palette:1}));for(let t=0;t<_.length;t++){const a=_[t];if(null==n[v]&&(n[v]=[{value:b.from_utc_s_to_server_date(v),name:"Time"}]),null!=a?n[v].push({value:a*w,name:$}):n[v].push({value:NaN,name:$}),1==y?.avg&&n[v].push({value:e.statistics.average*w,name:S}),1==y?.perc_95&&n[v].push({value:e.statistics["95th_percentile"]*w*w,name:N}),1==y?.past)for(const e in m)m[e]?.series[u]?.data[t]?n[v].push({value:m[e]?.series[u]?.data[t]*w,name:C}):n[v].push({value:NaN,name:C});v+=f}}))}));let _=[];Object.keys(n).forEach(((e,t)=>{_[t]=[],o.forEach((a=>{let l=!1;for(let s=0;s<n[e].length;s++)if(n[e][s].name==a){_[t].push(n[e][s].value),l=!0;break}0==l&&_[t].push(null)}))})),function(e){let t=e,a=0,l=0,n=Hb,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e[o]=n[a%n.length],a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}(r);let p=function(e,t,a,l,n,s,o){const i=qb.transformColors(n);let r=document.getElementsByClassName("body dark").length>0,c="rgb(255, 255, 255)";r&&(c="rgb(13, 17, 23)");let u={customBars:o,labels:t,series:a,data:e,labelsSeparateLines:!0,legend:"follow",stackedGraph:s,connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesBackgroundColor:c,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{},colors:i};l.length>1?(u.axes.y1=Xb(m.getFormatter(l[0])),u.axes.y2=Xb(m.getFormatter(l[1]))):1==l.length&&(u.axes.y=Xb(m.getFormatter(l[0])));return u}(_,o,c,s,r,i,u);return p}function Xb(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n.rawData_[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function Qb(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function ey(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function ty(e,t,a,l,n){let s,o={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i={ts_requests:l.map((e=>{let t=ey(e),a={ts_query:Qb(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...o,...t},r={"Content-Type":"application/json"};s=await b.http_request(n,{method:"post",headers:r,body:JSON.stringify(i)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=ey(i),c=Qb(i),u={...o,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,n)}`;s=[await b.http_request(d)]}return s}Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=o.x*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const ay={groupsOptionsModesEnum:Gb,tsArrayToOptions:Zb,tsArrayToOptionsArray:Kb,getGroupOptionMode:Wb,getSerieId:Bb,getSerieName:Vb,getTsChartsOptions:ty,getTsQuery:Qb,getMainSourceDefIndex:ey},ly={class:"nav nav-tabs"},ny={class:"form-group ms-2 me-2 mt-3 row"},sy={class:"form-group row"},oy={class:"col-form-label col-sm-4"},iy={class:"col-sm-8"},ry={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},cy={class:"form-group row"},uy={class:"col-form-label col-sm-4"},dy={class:"col-sm-8"},_y=["title"],py={key:0,class:"form-group mt-2 row"},fy={class:"col-form-label col-sm-4"},my={class:"col-sm-8"},vy={key:1,class:"form-group mt-2 row"},hy={class:"col-form-label col-sm-4"},gy={class:"col-sm-8"},by=["onUpdate:modelValue","pattern"],yy={class:"form-group row mt-2",style:{"text-align":"end"}},wy={class:"col-sm-12"},xy=["disabled"],ky={class:"form-group ms-2 me-2 mt-3 row"},$y={class:"form-group row"},Sy={class:"col-form-label col-sm-4"},Ny={class:"col-sm-8"};var Cy={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(null),o=ma("select");let i=jb.get_current_page_source_type();const r=jb.sources_types,c=ma(i),u=jb.ui_types,d=ma([]),_=ma([]),p=ma([]),f=ma(""),m=ma([]),v=ma(!1),h=xo((()=>{if(0==v.value)return!1;for(let e=0;e<m.value.length;e+=1){let t=m.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=ma(!1),y=ma([]),w=ma({}),x=ma([]),k=ma([]);let $=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{$=async function(){await N(),P()}()}));function S(e){o.value=e}async function N(){v.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);m.value=e.map((e=>null==e?null:mp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let a=0;a<e.length;a+=1){let l=await jb.get_sources(http_prefix,c.value.id,e[a]);t.push(l)}let a=await jb.get_default_source_array(http_prefix,c.value);_.value=a,d.value=t,p.value=a.map((e=>e.value)),E()}(),await T()}async function C(){v.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let a=_.value[t];a.value=e,a.label=e}})),await async function(){await T()}(),E()}function A(){v.value=!0}function E(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function T(){y.value=await jb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=jb.get_default_metric(y.value),P()}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function U(e){let t=e.source_type.label,a=ay.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function I(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),jb.get_ts_group_id(t,a,l)}const O=e=>{x.value=x.value.filter((t=>I(t)!=e))},M=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},j=()=>{if("add"==o.value){let e={id:I(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};M(e)}a("apply",x.value),L()},L=()=>{n.value.close()},D=e=>i18n(e);return t({show:async e=>{x.value=e,await $,o.value="select",n.value.show()},close:L,add_ts_group:M,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(D("modal_timeseries.title")),1)])),body:vl((()=>[Vs("ul",ly,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==o.value}]),href:"#"},te(D("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==o.value}]),href:"#"},te(D("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==o.value?(Ps(),js(Ss,{key:0},[Ys(" Sources Types "),Vs("div",ny,[Vs("div",sy,[Vs("label",oy,[Vs("b",null,te(D("modal_timeseries.source_type")),1)]),Vs("div",iy,[Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Ps(),js("div",ry,[Vs("div",cy,[Vs("label",uy,[Vs("b",null,te(D("modal_timeseries.source")),1)]),Vs("div",dy,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,_y),[[Mi,f.value]])])]),(Ps(!0),js(Ss,null,En(c.value.source_def_array,((e,a)=>(Ps(),js(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Ps(),js("div",py,[Vs("label",fy,[Vs("b",null,te(e.label)+" "+te(a),1)]),Vs("div",my,[Hs(n_,{selected_option:_.value[a],"onUpdate:selected_option":e=>_.value[a]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[a]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Ps(),js("div",vy,[Vs("label",hy,[Vs("b",null,te(e.label),1)]),Vs("div",gy,[wn(Vs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>p.value[a]=e,pattern:m.value[a],required:"",type:"text",placeholder:""},null,40,by),[[Mi,p.value[a]]])])])):Ys("v-if",!0),Ys(" input text ")],64)))),256)),wn(Vs("div",yy,[Vs("div",wy,[Vs("button",{type:"button",onClick:C,disabled:0==ya(h),class:"btn btn-primary"},te(D("modal_timeseries.apply_source")),9,xy)])],512),[[Yi,ya(h)]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",ky,[Vs("div",$y,[Vs("label",Sy,[Vs("b",null,te(D("modal_timeseries.metric")),1)]),Vs("div",Ny,[Hs(n_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(Vg,{title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==o.value?(Ps(),js(Ss,{key:1},[(Ps(!0),js(Ss,null,En(x.value,(e=>(Ps(),Ls(Vg,{id:I(e),title:U(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(D("modal_timeseries.add")),513),[[Yi,"add"==o.value]]),wn(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},te(D("modal_timeseries.apply")),513),[[Yi,"select"==o.value]])])),_:1},512))}};ap("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Cy.__scopeId="data-v-103cd911",Cy.__file="http_src/vue/modal-timeseries.vue";const Ay={class:"form-group mt-2 row"},Ey={class:"col-form-label col-sm-4"},Ty={class:"col-sm-6"},Py={class:"col-form-label col-sm-2"},Uy=["disabled"];var Iy={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),o=String.raw`^[a-zA-Z_\-1-9]*$`,i=xo((()=>new RegExp(o).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(l.title),1)])),body:vl((()=>[Vs("div",Ay,[Vs("label",Ey,[Vs("b",null,te(u("modal_download_file.filename"))+":",1)]),Vs("div",Ty,[wn(Vs("input",{class:"form-control",pattern:o,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[Mi,s.value]])]),Vs("label",Py," ."+te(l.ext),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ya(i)},te(u("modal_download_file.download")),9,Uy)])),_:1},512))}};ap("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),Iy.__scopeId="data-v-59120eb8",Iy.__file="http_src/vue/modal-download-file.vue";const Oy={key:0},My={class:"text-center"},jy=Vs("tbody",null,null,-1);var Ly={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=so(),s=Co(),o=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},i=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=ma(null),u=i()||[0,"asc"];let d=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:o}=Md(t,{app:n?.appContext?.app,element:a});let i=$(d.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const f=()=>{null!=d&&d.ajax.reload()},m=e=>{DataTableUtils.deleteButtonHandlers(e)};let v=!1;const h=()=>{d.clear(),d.destroy(!0),v=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{m(e.handlerId)}))};return t({reload:f,delete_button_handlers:m,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=i(e),load_last_sort:i,save_last_sort:o,search_value:function(e){null!=d&&d.search(e).draw()}}),mn((()=>{1!=v&&h()})),(t,a)=>(Ps(),js(Ss,null,[(Ps(),js("div",Oy,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns_config,(e=>(Ps(),js("th",My,te(e.columnName),1)))),256))])]),jy],512)])],64))},__file:"http_src/vue/datatable.vue"};const Dy={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},Fy=["innerHTML"],Ry={class:""},qy=["innerHTML"],zy=["innerHTML"],By={class:"table table-striped table-bordered"},Vy=["innerHTML"],Hy=["colspan","innerHTML"];var Gy={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Ps(),js(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Ps(),js(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",By,[Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Vy),(Ps(!0),js(Ss,null,En(t.values,(a=>(Ps(),js("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Hy)))),256))])))),256))])])],2112)):(Ps(),js("table",Dy,[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns,(t=>(Ps(),js("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,Fy)))),256))])]),Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",Ry,[1==e.wrap_columns?(Ps(!0),js(Ss,{key:0},En(e.columns,(a=>(Ps(),js("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,qy)],2)))),256)):(Ps(!0),js(Ss,{key:1},En(e.columns,(a=>(Ps(),js("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,zy)))),256))])))),256))])]))],2112))};ap("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Gy.__scopeId="data-v-0533335c",Gy.__file="http_src/vue/bootstrap-table.vue";const Wy=e=>(pl("data-v-937058e4"),e=e(),fl(),e),Ky={class:"col-12 mb-2 mt-2"},Jy={class:"card h-100 overflow-hidden"},Yy=["title"],Zy=[Wy((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Xy=["title"],Qy=[Wy((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],ew=["title"],tw=[Wy((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],aw=["title"],lw=[Wy((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],nw={class:"form-group ms-1 me-1 mt-1"},sw={class:"inline select2-size me-2 mt-2"},ow={class:"inline select2-size me-2 mt-2"},iw={key:0,class:"mt-4 card card-shadow"},rw={class:"card-body"},cw={key:1,class:"mt-4 card card-shadow"},uw={class:"card-body"},dw={key:0,class:"inline select2-size me-2 mt-2"};var _w={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;ma({}),ma(!1);const o=ma([]),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma([]),f=ma({});jb.get_current_page_source_type();const v=ma(!1);ma(!1);const h=ma([]),g=b.object_to_array(ay.groupsOptionsModesEnum),w=ma(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return ay.getGroupOptionMode(e);return g[0]}());let k=null;const $={label:i18n("page_stats.custom_metrics"),currently_active:!1},S="timeseries",N=ma(!1);dn((async()=>{t.source_value_object.is_va&&(_.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=jb.get_current_page_source_type();jb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await jb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=jb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await jb.get_default_timeseries_groups(http_prefix,e,t)}p.value=await A(a),f.value=1==a?$:jb.get_default_metric(p.value,e,t);N.value=!0,await H(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));let C=null;async function A(e,l){let n=await jb.get_metrics(http_prefix);if(!l&&C==e)return n.value;if(e&&n.push($),(null==R||l)&&(R=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${S}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){R.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function E(e){let t=jb.get_current_page_source_type(),a=await jb.get_default_source_array(http_prefix,t);return[jb.get_ts_group(t,a,e)]}const T=async(e,t,a)=>{let l=jb.get_source_type_from_id(e),n=await jb.get_source_array_from_value_dict(http_prefix,l,t),s=await jb.get_metric_from_schema(http_prefix,l,n,a);U(jb.get_ts_group(l,n,s))},P=async(e,t)=>{let a=p.value.find((a=>a.schema==e&&a.query==t));null!=a?U((await E(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function U(e){c.value.set_timeseries_groups(k),c.value.add_ts_group(e,!0)}async function I(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await jb.get_timeseries_groups_from_url(http_prefix,a);w.value=ay.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await H(l,!0,!1)}else await async function(){let e=await async function(){return E(f.value)}();await H(e,!0,!1)}(),z(!1)}function O(e){console.log(n);let a=f.value.label==$.label;H(k,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=K.value?.table_config_def;if(null==e)return;let a=G(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),z(a,!0)}function M(e){}function j(){u.value.show()}function L(){null!=k&&c.value.show(k)}function D(e){return async t=>h.value[e].chart_options}let F,R=null;function q(){z(f.value.label==$.label,!0)}async function z(e,t){p.value=await A(e,t),e&&(f.value=$)}async function B(e){z(!0),await H(e,!0,!0)}function V(){H(k,!1,!1)}async function H(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);a&&(F=await ay.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=ay.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,F);let r=ay.tsArrayToOptionsArray(F,e,w.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.series)}))}(r):function(e){h.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(v.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!v.value)return;const n=e=>"bps"==e?"bytes":e;Y.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=ay.getSerieId(e),i=s.metric.timeseries[o],r=m.getFormatter(s.metric.measure_unit),c=i.label;if(e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=ay.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:m.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Y.value.push(d)}))}))}(F,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=k);null==a&&(a=y.get_status());let l=jb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=jb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};W.value=[];for(let e in n){let o=n[e],i=ay.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=G(o,e.table_value,e.view,n,a),u=jb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:P,add_ts_group_from_source_value_dict:T,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};W.value.push(f)}))}if(null!=K.value&&W.value.find((e=>e.value==K.value.value)))return;K.value=W.value.find((e=>1==e.table_config_def.default)),null==K.value&&(K.value=W.value[0])}(e,s),k=e,x.set_key_to_url("timeseries_groups_mode",w.value.value),jb.set_timeseries_groups_in_url(k)}function G(e,t,a,l,n){null==n&&(n=y.get_status());let s=ay.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const W=ma([]),K=ma({});let J=[{id:"metric",label:l("page_stats.metric")},{id:"avg",label:l("page_stats.average"),class:"text-end"},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end"},{id:"max",label:l("page_stats.max"),class:"text-end"},{id:"min",label:l("page_stats.min"),class:"text-end"},{id:"total",label:l("page_stats.total"),class:"text-end"}];const Y=ma([]);function Z(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const X=ma(null);function Q(){X.value.show()}function ee(){if(!F?.length)return;let e=k[0],t=ay.getSerieName(null,null,e);d.value.show(t)}async function te(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Ps(),js(Ss,null,[Vs("div",Ky,[Hs($_),Vs("div",Jy,[Hs(A_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:O,min_time_interval_id:_.value},{begin:vl((()=>[])),extra_buttons:vl((()=>[e.enable_snapshots?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:j,title:l("page_stats.manage_snapshots_btn")},Zy,8,Yy)):Ys("v-if",!0),e.traffic_extraction_permitted?(Ps(),js("button",{key:1,class:"btn btn-link btn-sm",onClick:Q,title:l("traffic_recording.pcap_download")},Qy,8,Xy)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",onClick:ee,title:l("page_stats.title_modal_download_file")},tw,8,ew),e.is_history_enabled?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:l("page_stats.historical_flows")},lw,8,aw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",nw,[Vs("div",sw,[Hs(n_,{selected_option:f.value,"onUpdate:selected_option":a[0]||(a[0]=e=>f.value=e),options:p.value,onSelect_option:I},null,8,["selected_option","options"])]),Vs("div",ow,[Hs(n_,{selected_option:w.value,"onUpdate:selected_option":a[1]||(a[1]=e=>w.value=e),options:ya(g),onSelect_option:V},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),js("button",{key:0,type:"button",onClick:L,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yi,N.value]]),(Ps(!0),js(Ss,null,En(h.value,((e,t)=>(Ps(),Ls(yg,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:D(t),onZoom:O,onChart_reloaded:M},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),v.value?(Ps(),js("div",iw,[Vs("div",rw,[Hs(Gy,{id:"page_stats_bootstrap_table",columns:ya(J),rows:Y.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),js("div",cw,[Vs("div",uw,[K.value?.table_config_def?(Ps(),js("div",dw,[Hs(n_,{selected_option:K.value,"onUpdate:selected_option":a[2]||(a[2]=e=>K.value=e),options:W.value},null,8,["selected_option","options"])])):Ys("v-if",!0),K.value?.table_config_def?(Ps(),Ls(Ly,{key:K.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:K.value.table_config_def.table_button,columns_config:K.value.table_config_def.columns_config,data_url:K.value.table_config_def.data_url,enable_search:K.value.table_config_def.enable_search,table_config:K.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(Zm,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:S,onAdded_snapshot:q,onDeleted_snapshots:q,onDeleted_all_snapshots:q},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ls(Cy,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:B},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(sm,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:X},null,512),Hs(Iy,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:te},null,8,["title"])],64))}};ap("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),_w.__scopeId="data-v-937058e4",_w.__file="http_src/vue/page-stats.vue";var pw=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const fw={class:"card-header mb-2"},mw={class:"nav nav-tabs card-header-tabs",role:"tablist"},vw=["onClick"],hw=["onClick"];pw.render=function(e,t,a,l,n,s){return Ps(),js("div",fw,[Vs("ul",mw,[(Ps(!0),js(Ss,null,En(e.tab_list,(t=>(Ps(),js(Ss,null,[t.active?(Ps(),js("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,vw)):(Ps(),js("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,hw))],64)))),256))])])},pw.__file="http_src/vue/tab-list.vue";var gw={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=()=>{a("delete"),s()},s=()=>{l.value.close()};t({show:(e,t)=>{l.value.show()},close:s}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Ks(te(e.body),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-danger"},te(o("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const bw="change_asset_table_tab_event";var yw={components:{datatable:Ly,"modal-delete-confirm":gw,"tab-list":pw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}],a.push({columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}});let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[3,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",bw,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(bw,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ww={class:"row"},xw={class:"col-md-12 col-lg-12"},kw=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),$w={class:"card"},Sw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nw={class:"card-body"},Cw={id:"table_asset"},Aw={class:"card-footer"},Ew={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tw=Vs("i",{class:"fas fa-trash"},null,-1),Pw=["href"],Uw=[Vs("i",{class:"fas fa-download"},null,-1)];yw.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable");return Ps(),js("div",ww,[Vs("div",xw,[kw,Vs("div",$w,[Sw,Vs("div",Nw,[Vs("div",Cw,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Ps(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Ps(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",Aw,[Vs("button",Ew,[Tw,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},Uw,8,Pw)])])])])},yw.__file="http_src/vue/page-asset-table.vue";var Iw={components:{datatable:Ly,"modal-delete-confirm":gw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],a.push({columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}}),l=6;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Ow={class:"row"},Mw={class:"col-md-12 col-lg-12"},jw=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Lw={class:"card"},Dw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Fw={class:"card-body"},Rw={id:"periodicity-table"},qw={class:"card-footer"},zw={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Bw=Vs("i",{class:"fas fa-trash"},null,-1),Vw=["href"],Hw=[Vs("i",{class:"fas fa-download"},null,-1)];Iw.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("datatable");return Ps(),js("div",Ow,[Vs("div",Mw,[jw,Vs("div",Lw,[Dw,Vs("div",Fw,[Vs("div",Rw,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",qw,[a.is_admin?(Ps(),js("button",zw,[Bw,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Hw,8,Vw)])])])])},Iw.__file="http_src/vue/page-periodicity-table.vue";const Gw={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ww=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},Kw=function(){return Gw},Jw="change_service_table_tab_event";var Yw={components:{datatable:Ly,"modal-delete-confirm":gw,"tab-list":pw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=6,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});a.push({columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Jw,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Jw,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ww(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{Ww(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{Ww(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Zw={class:"row"},Xw={class:"col-md-12 col-lg-12"},Qw=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ex={class:"card"},tx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ax={class:"card-body"},lx={id:"table_service"},nx={class:"card-footer"},sx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},ox=Vs("i",{class:"fas fa-trash"},null,-1),ix=["href"],rx=[Vs("i",{class:"fas fa-download"},null,-1)];Yw.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable");return Ps(),js("div",Zw,[Vs("div",Xw,[Qw,Vs("div",ex,[tx,Vs("div",ax,[Vs("div",lx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Ps(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Ps(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",nx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",sx,[ox,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},rx,8,ix)])])])])},Yw.__file="http_src/vue/page-service-table.vue";const cx={id:"empty-map-message",class:"alert alert-info",hidden:""},ux=["id"];var dx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n=null,s={},o={},i=null,r=!1,c=null,u={},d=!1;async function _(e){if(!e)return;const t=e.getPositions(e.body.data.nodes.map((e=>e.id)));let a=!1;console.log(t);try{for(const[e,l]of Object.entries(t)){for(const[n,s]of Object.entries(t))if(e!=n&&s.x-2<=l.x&&l.x<=s.x+2&&s.y-2<=l.y&&l.y<=s.y+2){console.log(l),console.log(s),a=!0;break}if(1==a)break}1==a&&g()}catch(e){console.log(e)}}_n((async()=>{f(),u=a.url_params,i=document.getElementById(a.map_id);const e=NtopUtils.buildURL(a.url,u);await $.get(e,l,(function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r=l,s=new vis.DataSet(t),o=new vis.DataSet(a);const c={nodes:s,edges:o};p(c),n=new vis.Network(i,c,Kw()),_(n),v(),m()}))})),mn((()=>{1!=d&&y()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},f=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},m=()=>{n.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),n.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],x.set_key_to_url("host",u.host),x.set_key_to_url("vlan_id",u.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),w(),_()})(s.get(e.nodes[0]))})),n.on("zoom",(function(e){c=h()})),n.on("dragEnd",(function(e){b()})),n.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})n.on(e,a.event_listeners[e])},v=()=>{if(!n)return;const e=n.getPositions(n.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:n.getScale(),position:n.getViewPosition()}};$.post(a.url,{...u,csrf:a.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},h=()=>(n.getScale()<=.15&&n.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(v)),g=()=>{void 0!==n?n instanceof vis.Network?(n.stabilize(),setTimeout((()=>{v()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},b=()=>{c&&clearTimeout(c),v()},y=()=>{n&&n.destroy(!0),d=!0},w=async()=>{const e=NtopUtils.buildURL(a.url,u);await $.get(e,l,(function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r=l,s=new vis.DataSet(t),o=new vis.DataSet(a);const i={nodes:s,edges:o};p(i),n&&n.setData(i),v()}))};return t({reload:w,destroy:y,is_max_entry_reached:()=>r,autolayout:g,update_url_params:e=>{u=e}}),(t,a)=>(Ps(),js(Ss,null,[Vs("div",cx,te(e.empty_message),1),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,ux)],64))},__file:"http_src/vue/network-map.vue"},_x={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=ma(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Ks(te(e.body),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-primary"},te(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const px="change_filter_event";var fx={components:{"network-map":dx,"modal-delete-confirm":gw,"modal-autolayout-confirm":_x,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",px,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(px,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const mx={class:"row"},vx={class:"col-md-12 col-lg-12"},hx={class:"card card-shadow"},gx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),bx={class:"card-body"},yx={id:"table_service"},wx={class:"d-flex align-items-center justify-content-end mb-2"},xx=["title"],kx=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],$x={class:"d-flex ms-auto"},Sx={class:"m-1"},Nx=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Cx=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Ax={class:"card-footer"},Ex={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tx=Vs("i",{class:"fas fa-trash"},null,-1),Px=["href"],Ux=[Vs("i",{class:"fas fa-download"},null,-1)];fx.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",mx,[Vs("div",vx,[Vs("div",hx,[gx,Vs("div",bx,[Vs("div",yx,[Vs("div",wx,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},kx,8,xx),Vs("div",$x,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Sx,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Nx,Cx]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Ax,[Vs("button",Ex,[Tx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Ux,8,Px)])])])])},fx.__file="http_src/vue/page-service-map.vue";const Ix="change_filter_event";var Ox={components:{"network-map":dx,"modal-delete-confirm":gw,"modal-autolayout-confirm":_x,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Ix,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Ix,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Mx={class:"row"},jx={class:"col-md-12 col-lg-12"},Lx={class:"card card-shadow"},Dx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Fx={class:"card-body"},Rx={id:"table_periodicity"},qx={class:"d-flex align-items-center justify-content-end mb-2"},zx=["title"],Bx=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Vx={class:"d-flex ms-auto"},Hx={class:"m-1"},Gx=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Wx=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Kx={class:"card-footer"},Jx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Yx=Vs("i",{class:"fas fa-trash"},null,-1),Zx=["href"],Xx=[Vs("i",{class:"fas fa-download"},null,-1)];Ox.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",Mx,[Vs("div",jx,[Vs("div",Lx,[Dx,Vs("div",Fx,[Vs("div",Rx,[Vs("div",qx,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Bx,8,zx),Vs("div",Vx,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Hx,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Gx,Wx]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Kx,[Vs("button",Jx,[Yx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Xx,8,Zx)])])])])},Ox.__file="http_src/vue/page-periodicity-map.vue";const Qx="change_filter_event";var ek={components:{"network-map":dx,"modal-delete-confirm":gw,"modal-autolayout-confirm":_x,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Qx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Qx,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const tk={class:"row"},ak={class:"col-md-12 col-lg-12"},lk={class:"card card-shadow"},nk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),sk={class:"card-body"},ok={id:"table_asset"},ik={class:"d-flex align-items-center justify-content-end mb-2"},rk=["title"],ck=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],uk={class:"d-flex ms-auto"},dk={class:"m-1"},_k=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),pk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),fk={class:"card-footer"},mk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vk=Vs("i",{class:"fas fa-trash"},null,-1),hk=["href"],gk=[Vs("i",{class:"fas fa-download"},null,-1)];ek.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map");return Ps(),js("div",tk,[Vs("div",ak,[Vs("div",lk,[nk,Vs("div",sk,[Vs("div",ok,[Vs("div",ik,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},ck,8,rk),Vs("div",uk,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",dk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),_k,pk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",fk,[Vs("button",mk,[vk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},gk,8,hk)])])])])},ek.__file="http_src/vue/page-asset-map.vue";const bk={class:"form-group mb-3 row"},yk={class:"col-form-label col-sm-4"},wk={class:"col-sm-7"},xk=Vs("div",{class:"invalid-feedback"},null,-1),kk={class:"form-group mb-3 row"},$k={class:"col-form-label col-sm-4 pt-2"},Sk={class:"form-switch col-sm-7 pt-2 ps-3"},Nk={class:"col-form-label"};var Ck={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(null),o=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),i()},i=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",bk,[Vs("label",yk,te(e.body),1),Vs("div",wk,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[Mi,l.value]]),Vs("small",null,te(e.list_notes),1),xk])]),Vs("div",kk,[Vs("label",$k,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Sk,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[ji,n.value]])]),Vs("small",Nk,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Ks(te(r("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Ak={key:0,class:"form-group mb-3 row"},Ek={class:"col-form-label col-sm-4"},Tk={class:"col-sm-7"},Pk=["placeholder"],Uk={class:"form-group mb-3 row"},Ik={class:"col-form-label col-sm-4"},Ok={class:"col-sm-7"},Mk={value:"allowed"},jk={value:"denied"},Lk={class:"form-group mb-3 row"},Dk={class:"col-form-label col-sm-4 pt-2"},Fk={class:"form-switch col-sm-7 pt-2 ps-3"},Rk={class:"col-form-label"};var qk={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(""),o=ma(i18n("if_stats_config.custom_name")),i=ma(null),r=ma(!1),c=()=>{0==r.value?a("edit",{mac_alias:l.value,mac_status:n.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value,trigger_alerts:s.value}),u()},u=()=>{i.value.close()};t({show:e=>{null!=e?(n.value=e.status,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1):r.value=!0,i.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:vl((()=>[0==r.value?(Ps(),js(Ss,{key:0},[Ks(te(e.title),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:vl((()=>[0==r.value?(Ps(),js("div",Ak,[Vs("label",Ek,te(d("edit_check.device_alias")),1),Vs("div",Tk,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,Pk),[[Mi,l.value]])])])):Ys("v-if",!0),Vs("div",Uk,[Vs("label",Ik,te(d("edit_check.device_status")),1),Vs("div",Ok,[wn(Vs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},[Vs("option",Mk,te(d("allowed")),1),Vs("option",jk,te(d("denied")),1)],512),[[Fi,n.value]])])]),Vs("div",Lk,[Vs("label",Dk,te(d("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Fk,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[ji,s.value]])]),Vs("small",Rk,te(d("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(d("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},zk={components:{"page-navbar":s_,datatable:Ly,"modal-delete-confirm":gw,"modal-add-device-exclusion":Ck,"modal-edit-device-exclusion":qk},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,a,l,n){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},l=ntopng_utility.clone(a);l.table_buttons=a.table_buttons,l.data_url=`${l.data_url}`,l.columns_config=[{columnName:i18n("edit_check.device"),sortable:!0,searchable:!0,visible:!0,data:"mac_address",createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,a){let l=e.mac,n=e.alias;return e.symbolic_mac&&e.symbolic_mac!=l&&(l=e.symbolic_mac),null!=n&&n!=l&&(l=`${l} (${n})`),null!=e.url&&(l=`<a href='${e.url}' title='${e.mac}'>${l}</a>`),l},responsivePriority:1},{columnName:i18n("ip_address"),data:"last_ip",className:"text-nowrap",sortable:!1,searchable:!0,responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),data:"manufacturer",className:"text-nowrap",sortable:!0,searchable:!0,responsivePriority:1},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,a,l){let n={handlerId:"delete_device",onClick:()=>{let a=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),a,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},o={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:o,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"pointer",handler:s,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:n,icon:"fa-trash",title:i18n("delete")}])}}],e.config_devices=l}(this)},mounted(){const e=ntopng_url_manager.get_url_entry("mac");if(e){this.get_active_table().search_value(e)}this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog())),$("#btn-edit-all-devices-status").click((()=>this.show_edit_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),title_edit_all:i18n("edit_check.edit_all_devices_status"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;null!=t&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),e.csrf=this.$props.page_csrf,null!=t&&(e.mac=t.mac_address.mac);let a=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_edit_all_dialog:function(){this.$refs.modal_edit_device.show()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,a){this.row_to_delete=a,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const Bk={id:"navbar"},Vk={class:"row"},Hk={class:"col-md-12 col-lg-12"},Gk=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Wk={class:"card"},Kk={class:"card-body"},Jk={id:"devices-learning-status",class:"alert alert-info",hidden:""},Yk={id:"table_devices_vue"},Zk={class:"card-footer"},Xk={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger me-1"},Qk=Vs("i",{class:"fas fa-trash"},null,-1),e$={type:"button",id:"btn-edit-all-devices-status",class:"btn btn-secondary"},t$=Vs("i",{class:"fas fa-edit"},null,-1);zk.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("modal-delete-confirm"),r=kn("modal-add-device-exclusion"),c=kn("modal-edit-device-exclusion"),u=kn("datatable");return Ps(),js(Ss,null,[Vs("div",Bk,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,base_url:n.navbar_context.base_url,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Vs("div",Vk,[Vs("div",Hk,[Gk,Vs("div",Wk,[Vs("div",Kk,[Vs("div",Jk,te(n.learning_message),1),Vs("div",Yk,[Hs(i,{ref:"modal_delete_confirm",title:n.title_delete,body:n.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),Hs(i,{ref:"modal_delete_all",title:n.title_delete_all,body:n.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_add_device",title:n.title_add,body:n.body_add,footer:n.footer_add,list_notes:n.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),Hs(c,{ref:"modal_edit_device",title:n.title_edit,title_edit_all:n.title_edit_all,onEdit:s.edit_row},null,8,["title","title_edit_all","onEdit"]),Hs(u,{ref:"table_devices_exclusion",table_buttons:n.config_devices.table_buttons,columns_config:n.config_devices.columns_config,data_url:n.config_devices.data_url,enable_search:n.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Vs("div",Zk,[Vs("button",Xk,[Qk,Ks(" "+te(n.i18n("edit_check.delete_all_device_exclusions")),1)]),Vs("button",e$,[t$,Ks(" "+te(n.i18n("edit_check.edit_all_devices_status")),1)])])])])])],64)},zk.__file="http_src/vue/page-device-exclusions.vue";var a$={components:{datatable:Ly},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const l$={class:"row"},n$={class:"col-md-12 col-lg-12"},s$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),o$={class:"card"},i$={class:"card-body"},r$={id:"table_host_tls"},c$={class:"card-footer"};a$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",l$,[Vs("div",n$,[s$,Vs("div",o$,[Vs("div",i$,[Vs("div",r$,[Hs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",c$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},a$.__file="http_src/vue/page-host-tls.vue";var u$={components:{datatable:Ly},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const d$={class:"row"},_$={class:"col-md-12 col-lg-12"},p$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),f$={class:"card"},m$={class:"card-body"},v$={id:"table_host_ssh"};u$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",d$,[Vs("div",_$,[p$,Vs("div",f$,[Vs("div",m$,[Vs("div",v$,[Hs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},u$.__file="http_src/vue/page-host-ssh.vue";const h$="change_map_event";var g$={components:{"page-periodicity-map":Ox,"page-periodicity-table":Iw,"page-asset-map":ek,"page-asset-table":yw,"page-service-map":fx,"page-service-table":Yw,"page-navbar":s_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",h$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(h$,e))}}};g$.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Ps(),js(Ss,null,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),js(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},g$.__file="http_src/vue/page-home-map.vue";const b$=["width","height"],y$=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var w$={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=ma(null),n=ma({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let o=await s();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=i;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(o,i.width-10,i.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),js("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},y$,8,b$))]))}};ap("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),w$.__file="http_src/vue/page-sankey.vue";const x$="change_applications_tab_event";var k$={components:{chart:N_,datatable:Ly,"modal-delete-confirm":gw,"tab-list":pw},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==is_locale?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==is_locale?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>"1"==is_locale?`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`:`${e.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){C.on_custom_event("change_applications_tab_event",x$,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(x$,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const $$={class:"row"},S$={class:"col-md-12 col-lg-12"},N$={class:"card"},C$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),A$={class:"card-body"},E$={id:"host_details_applications"},T$={class:"row mb-4 mt-4",id:"host_details_applications"},P$={class:"col-6"},U$={key:0,class:"widget-name"};k$.render=function(e,t,a,l,n,s){const o=kn("tab-list"),i=kn("chart"),r=kn("datatable");return Ps(),js("div",$$,[Vs("div",S$,[Vs("div",N$,[C$,Vs("div",A$,[Vs("div",E$,[Hs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",T$,[(Ps(!0),js(Ss,null,En(n.chart_options,(e=>(Ps(),js("div",P$,[e.tab==n.applications_tab?(Ps(),js("h3",U$,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Ps(),Ls(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Ps(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Ps(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},k$.__file="http_src/vue/page-host-details-applications.vue";const I$={class:"row"},O$={class:"col-md-12 col-lg-12"},M$={class:"card"},j$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),L$={class:"card-body"},D$={id:"host_details_traffic"},F$={class:"row mb-4 mt-4",id:"host_details_traffic"},R$={class:"col-4"},q$={class:"widget-name"};var z$={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=ma(null);ma([]);const a=ma({}),l=()=>{t.value.reload()};dn((async()=>{!function(e){const t=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l()}});let s={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),vn((async()=>{t.value.destroy_table()}));const n=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Ps(),js("div",I$,[Vs("div",O$,[Vs("div",M$,[j$,Vs("div",L$,[Vs("div",D$,[Vs("div",F$,[(Ps(),js(Ss,null,En(n,(e=>Vs("div",R$,[Vs("h3",q$,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(Ly,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const B$={class:"row"},V$={class:"col-md-12 col-lg-12"},H$={class:"card"},G$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),W$={class:"card-body"},K$={class:"row"},J$={class:"col-6 mb-4 mt-4"},Y$={class:"widget-name"};var Z$={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Ps(),js("div",B$,[Vs("div",V$,[Vs("div",H$,[G$,Vs("div",W$,[Vs("div",K$,[(Ps(),js(Ss,null,En(t,(e=>Vs("div",J$,[Vs("h3",Y$,te(e.title),1),Hs(N_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const X$={key:0,class:"alert alert-info",id:"empty-message"},Q$=["width","height"],eS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var tS={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=10,o=ma(!1),i=ma(null),r=ma({});function c(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&_()}dn((async()=>{})),_n((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),Ml((()=>l.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function _(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const o=function(){a("update_width");let e=l.width;null==e&&(e=$(i.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var c,_;r.value=o,c=o.width-10,_=o.height-5,u=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(s).extent([[0,5],[c,_]]),d=u(t);const{links:v,nodes:h}=d;let g=n.select(i.value).select("g.nodes").selectAll("g").data(h).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",m),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/h.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),g.data(h).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<o.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),g.call(n.drag().subject((e=>e)).on("start",p).on("drag",f));const b=n.select(i.value).select("g.links").selectAll("g").data(v).join((e=>e.append("g")));let y=b.append("linearGradient");y.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),y.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/h.length))),y.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/h.length))),b.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),b.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,o=r.value.width,i=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=s),t.x1>o&&(t.x0=o-s,t.x1=o),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),u.update(d),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function m({transform:e}){g.attr("transform",e)}const v=e=>i18n(e);return t({draw_sankey:_,set_no_data_flag:function(e){o.value=e}}),(t,a)=>(Ps(),js(Ss,null,[o.value?(Ps(),js("div",X$,te(e.no_data_message||v("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:i,width:r.value.width,height:r.value.height,style:{margin:"10px"}},eS,8,Q$))])],64))}};ap("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),tS.__file="http_src/vue/sankey_3.vue";let aS=d3v7;const lS={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:aS.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:aS.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:aS.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},nS=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${a.bytesToSize(e.value)}`,sS={formatFlowTitle:nS,get_data:async function(){return{}},getDefaultSankeySettings:function(){return lS}},oS={class:"row"},iS={class:"col-md-12 col-lg-12"},rS={class:"card card-shadow"},cS={class:"card-body"},uS={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},dS={class:"d-flex align-items-center mb-2"},_S={class:"d-flex no-wrap ms-auto"},pS={class:"m-1"},fS={style:{"min-width":"16rem"}},mS={class:"my-auto me-1"},vS=Vs("label",{class:"my-auto me-1"},null,-1),hS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var gS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=ma(null),s=ma(null),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=ma(o[0]),r=ma({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value.show_loading();let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let m=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:m}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value.hide_loading()}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),js("div",oS,[Vs("div",iS,[Vs("div",rS,[Hs(mf,{ref_key:"loading",ref:s},null,512),Vs("div",cS,[Vs("div",uS,[Vs("div",dS,[Vs("div",_S,[Vs("div",pS,[Vs("div",fS,[Vs("label",mS,te(a("hosts"))+": ",1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option"])])]),Vs("div",null,[vS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},hS)])])])]),Hs(tS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const bS={key:0,class:"alert alert-info alert-dismissable"},yS=Vs("span",{class:"text-info me-1"},null,-1),wS={class:"form-group ms-2 me-2 mt-3 row"},xS={class:"col-form-label col-sm-2"},kS={class:"col-sm-10"},$S={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},SS={key:1,class:"form-group ms-2 me-2 mt-3 row"},NS={class:"col-form-label col-sm-2"},CS={class:"col-sm-10"},AS=["placeholder"],ES={key:2,class:"form-group ms-2 me-2 mt-3 row"},TS={class:"col-form-label col-sm-2"},PS={class:"col-sm-10"},US={key:3,class:"form-group ms-2 me-2 mt-3 row"},IS={class:"col-form-label col-sm-2"},OS={class:"col-sm-10"},MS={key:4,class:"form-group ms-2 me-2 mt-3 row"},jS={class:"col-form-label col-sm-2"},LS={class:"col-10"},DS={key:5,class:"form-group ms-2 me-2 mt-3 row"},FS={class:"col-form-label col-sm-2"},RS={class:"col-10"},qS={class:"col-form-label col-sm-2"},zS={class:"col-10"},BS={key:6,class:"form-group ms-2 me-2 mt-3 row"},VS={class:"col-form-label col-sm-2"},HS={key:0,class:"col-10"},GS={key:1,class:"col-10"},WS={key:2,class:"col-10"},KS={key:3,class:"col-10"},JS={key:4,class:"col-10"},YS={key:7,class:"form-group ms-2 me-2 mt-3 row"},ZS={class:"col-form-label col-sm-2"},XS={class:"col-10"},QS={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},eN={class:"col-form-label col-sm-2"},tN={class:"col-sm-3"},aN={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},lN=["value","id"],nN=["id","for"],sN=["value","id"],oN=["id","for"],iN=["value","id"],rN=["id","for"],cN={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},uN=["value","id"],dN=["id","for"],_N={key:8,class:"message alert alert-warning mt-3"},pN=["disabled"],fN=["disabled"];var mN={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");const s=ma(null);let o=i18n("if_stats_config.add_host_rules_title");const i=i18n("if_stats_config.host_placeholder"),r=ma(!1),c=e=>i18n(e),u=ma([]),d=ma(null),_=ma(null),p=ma([]),f=ma([]),m=ma([]),v=ma([]),h=ma([]),g=ma([]),b=ma([]),y=ma(null),w=ma(null),x=ma({}),k=ma({}),S=ma({}),N=ma({}),C=ma({}),A=ma({}),E=ma({}),T=ma({}),P=ma(!0),U=ma({}),I=ma(!0),O=ma("hosts"),M=ma(!1),j=ma(!1),L=ma(null),D=ma(null),F=ma(!1),R=ma(null),q=ma(null),z=ma({}),B=ma({}),V=ma({}),H=ma(null);let G=ma([]);const W=[c("if_stats_config.note_1"),c("if_stats_config.note_2"),c("if_stats_config.note_3"),c("if_stats_config.note_4"),c("if_stats_config.note_5")],J=ma([{title:c("volume"),label:c("volume"),id:"volume",active:!0},{title:c("throughput"),label:c("throughput"),id:"throughput",active:!1},{title:c("percentage"),label:c("percentage"),id:"percentage",active:!1}]),Y=ma([{title:c("volume"),label:c("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:c("throughput"),label:c("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:c("percentage"),label:c("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:c("value"),label:c("value"),id:"value",active:!1,measure_unit:"number"}]),Z=ma([{title:c("kb"),label:c("kb"),id:"kb",value:1024,active:!1},{title:c("mb"),label:c("mb"),id:"mb",value:1048576,active:!1},{title:c("gb"),label:c("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),X=ma([{title:c("kbps"),label:c("kbps"),id:"kbps",value:1e3,active:!1},{title:c("mbps"),label:c("mbps"),id:"mbps",value:1e6,active:!1},{title:c("gbps"),label:c("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),Q=ma([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),ee=[{title:"+",label:"%",id:"plus",value:1,active:!0}],ae=ma(null),le=ma(null),ne={csrf:n.page_csrf};function se(e){e.forEach((e=>e.active=1==e.default_active))}const oe=e=>{O.value=e,G.value=J.value,"host_pool"==e||"CIDR"==e?(ie(),U.value="host_pool"==e?G.value[1]:G.value[0]):U.value=J.value[0]},ie=e=>{let t=[];"host_pool"==O.value&&"bps"!=E.value.measure_unit||"CIDR"==O.value&&"bps"!=V.value.measure_unit?(Y.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),G.value=t):(Y.value.forEach((e=>{"value"!=e.id&&t.push(e)})),G.value=t),null!=e&&0!=e||(U.value=G.value[0])},re=()=>{let e=new RegExp(mp.get_data_pattern("ip"));P.value=!(e.test(ae.value)||"*"===ae.value)},ce=e=>{const t=e.target.id;Q.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},ue=e=>{const t=e.target.id;"throughput"==U.value.id?X.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==U.value.id?Z.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==U.value.id&&ee.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},de=e=>{let t="";"interface"!=O.value&&(t=ae.value);const a=k.value.id;let n=x.value.id,s=x.value.label;"interface"==O.value?(n=A.value.id,s=A.value.label):"host_pool"==O.value?(console.log(E.value),n=E.value.schema,s=E.value.label):"CIDR"==O.value&&(n=V.value.schema,s=V.value.label);const o=A.value.id,i=O.value,r=S.value.id,c=S.value.label;let u,d,_,p,f=U.value.id,m="Host"==O.value?x.value.extra_metric?x.value.extra_metric:null:A.value.extra_metric?A.value.extra_metric:null,v=e?D.value:null;!1===I.value&&(f="",m="",_=le.value.value),"throughput"==f?(Q.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),X.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(le.value.value)):"volume"==f?(Q.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),Z.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(le.value.value)):("percentage"==f||"value"==f)&&(Q.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(le.value.value));let h="add";if(1==e&&(h="edit"),"Host"==O.value)l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:m,rule_type:i,rule_threshold_sign:p,rule_id:v});else if("interface"==O.value)l(h,{frequency:a,metric:o,metric_label:s,threshold:_,metric_type:f,extra_metric:m,rule_type:i,interface:r,ifname:c,rule_threshold_sign:p,rule_id:v});else if("exporter"==O.value){const e=C.value.id,t=C.value.label,n=N.value.id;let s;null!=e?g.value.forEach((e=>{"flowdev_port:traffic"==e.id&&(s=e)})):g.value.forEach((e=>{"flowdev:traffic"==e.id&&(s=e)}));let o=s.label;l(h,{host:n,frequency:a,metric:s.id,metric_label:o,threshold:_,metric_type:f,rule_type:i,interface:e,ifname:t,rule_threshold_sign:p,rule_id:v})}else if("CIDR"==O.value){t=B.value.id;const e=B.value.network_id;l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:m,rule_type:i,rule_threshold_sign:p,rule_id:v,network:e})}else if("host_pool"==O.value){const e=z.value.id,t=z.value.label;l(h,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:m,rule_type:i,rule_threshold_sign:p,rule_id:v})}},_e=()=>{de(!0)};return dn((()=>{J.value.forEach((e=>{e.active&&(U.value=e)}))})),t({show:e=>{!async function(){if(F.value=!1,ae.value="",O.value="Host",S.value=p.value[0],x.value=u.value[0],A.value=v.value[0],T.value=g.value[0],j.value=!1,o=i18n("if_stats_config.add_host_rules_title"),k.value=b.value[0],U.value=J.value[0],N.value=f.value[0],null!=N.value){ne.csrf=L.value;const e=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?`+N.value.details.split("?")[1],{...ne});let t=[],l=[];await $.get(e,(function(e,a){t=e.rsp})),l.push({id:-1,label:"No ifid",timeseries_available:t[0].timeseries_available}),t.forEach((e=>{l.push({id:e.ifindex,label:e.name,timeseries_available:e.timeseries_available})})),m.value=l,M.value=m.value[0].timeseries_available}J.value.forEach((e=>e.active=!1)),J.value[0].active=!0,z.value=R.value[0],E.value=h.value[0],B.value=q.value[0],V.value=H.value[0],se(Z.value),se(X.value),se(Q.value),O.value="Host",P.value=!0,le.value.value=1,D.value=null,G.value=J.value,"Host"==O||"interface"==O?U.vale=J.value[0]:U.value=G.value[0]}(),null!=e&&(e=>{null!=e&&(o=c("if_stats_config.edit_host_rules_title"),j.value=!0,D.value=e.row_id,P.value=!1,Q.value.forEach((t=>{t.active=t.value==e.threshold_sign})),J.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,U.value=t):t.active=!1})),"volume"==e.metric_type?Z.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,le.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?X.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,le.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?le.value.value=e.threshold:"value"==e.metric_type&&(le.value.value=e.threshold*e.threshold_sign),O.value=e.rule_type,"interface"==O.value?(p.value.forEach((t=>{t.id==e.target&&(S.value=t)})),null!=e.extra_metric?v.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(A.value=t)})):v.value.forEach((t=>{t.id==e.metric&&(A.value=t)}))):"exporter"==O.value?(f.value.forEach((t=>{t==e.target&&(N.value=t)})),m.value.forEach((t=>{t==e.flow_exp_ifid&&(C.value=t)}))):"Host"==O.value?(ae.value=e.target,null!=e.extra_metric?u.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(x.value=t)})):u.value.forEach((t=>{t.id==e.metric&&(x.value=t)}))):"CIDR"==O.value?(q.value.forEach((t=>{t.id==e.target&&(B.value=t)})),H.value.forEach((t=>{t.label==e.metric_label&&(V.value=t)})),ie(!0),G.value.forEach((t=>{t.id==e.metric_type&&(U.value=t)}))):"host_pool"==O.value&&(R.value.forEach((t=>{t.id==e.target&&(z.value=t)})),h.value.forEach((t=>{t.label==e.metric_label&&(E.value=t)})),ie(),G.value.forEach((t=>{t.id==e.metric_type&&(U.value=t)}))))})(e),s.value.show()},close:()=>{j.value=!1,s.value.close()},metricsLoaded:async(e,t,l,s,o,i,c,y,w,C,A,E)=>{if(r.value=!0,u.value=e,v.value=l,p.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t}(t),console.log(s),f.value=function(e){let t=[];return e.forEach((e=>{let a=e.column_ip.split("=")[2].split("&")[0],l={id:a,label:a,details:e.column_ip.split("'")[1]};t.push(l)})),t}(s),R.value=w,h.value=A,q.value=C,H.value=E,g.value=o,N.value=f.value[0],console.log(N.value),null!=N.value){ne.csrf=L.value;const e=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?`+N.value.details.split("?")[1],{...ne});let t=[],l=[];await $.get(e,(function(e,a){t=e.rsp})),l.push({id:-1,label:"No ifid",timeseries_available:t[0].timeseries_available}),t.forEach((e=>{l.push({id:e.ifindex,label:e.name,timeseries_available:e.timeseries_available})})),m.value=l,M.value=m.value[0].timeseries_available,console.log(M.value)}b.value=n.frequency_list,k.value=b.value[0],x.value=u.value[0],S.value=p.value[0],L.value=i,c&&(d.value=c),y&&(_.value=y)},invalidAdd:()=>{F.value=!0}}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[22]||(t[22]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(ya(o)),1)])),body:vl((()=>[F.value?(Ps(),js("div",bS,[yS,Vs("span",null,te(c("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",wS,[Vs("label",xS,[Vs("b",null,te(c("if_stats_config.add_rules_type")),1)]),Vs("div",kS,[Vs("div",$S,[Vs("label",{class:K(["btn",["Host"==O.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>oe("Host"))}),Ks(" "+te(c("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==O.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>oe("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(c("if_stats_config.add_rules_type_interface")),1)],2),1==M.value?(Ps(),js("label",{key:0,class:K(["btn",["exporter"==O.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>oe("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(c("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),Vs("label",{class:K(["btn",["host_pool"==O.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>oe("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(c("if_stats_config.add_rules_type_host_pool")),1)],2),Vs("label",{class:K(["btn",["CIDR"==O.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>oe("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(c("if_stats_config.add_rules_type_cidr")),1)],2)])])]),"Host"==O.value?(Ps(),js("div",SS,[Vs("label",NS,[Vs("b",null,te(c("if_stats_config.target")),1)]),Vs("div",CS,[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>ae.value=e),onInput:re,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,AS),[[Mi,ae.value]])])])):Ys("v-if",!0),"CIDR"==O.value?(Ps(),js("div",ES,[Vs("label",TS,[Vs("b",null,te(c("if_stats_config.target")),1)]),Vs("div",PS,[Hs(n_,{selected_option:B.value,"onUpdate:selected_option":t[6]||(t[6]=e=>B.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==O.value?(Ps(),js("div",US,[Vs("label",IS,[Vs("b",null,te(c("if_stats_config.target")),1)]),Vs("div",OS,[Hs(n_,{selected_option:z.value,"onUpdate:selected_option":t[7]||(t[7]=e=>z.value=e),options:R.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==O.value?(Ps(),js("div",MS,[Vs("label",jS,[Vs("b",null,te(c("if_stats_config.target_interface")),1)]),Vs("div",LS,[Hs(n_,{selected_option:S.value,"onUpdate:selected_option":t[8]||(t[8]=e=>S.value=e),options:p.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==O.value&&1==M.value?(Ps(),js("div",DS,[Vs("label",FS,[Vs("b",null,te(c("if_stats_config.target_exporter_device")),1)]),Vs("div",RS,[Hs(n_,{selected_option:N.value,"onUpdate:selected_option":t[9]||(t[9]=e=>N.value=e),options:f.value},null,8,["selected_option","options"])]),Vs("label",qS,[Vs("b",null,te(c("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",zS,[Hs(n_,{selected_option:C.value,"onUpdate:selected_option":t[10]||(t[10]=e=>C.value=e),options:m.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),r.value&&"exporter"!=O.value?(Ps(),js("div",BS,[Vs("label",VS,[Vs("b",null,te(c("if_stats_config.metric")),1)]),"Host"==O.value?(Ps(),js("div",HS,[Hs(n_,{selected_option:x.value,"onUpdate:selected_option":t[11]||(t[11]=e=>x.value=e),onSelect_option:t[12]||(t[12]=e=>{1==x.value.show_volume?I.value=!0:I.value=!1}),options:u.value},null,8,["selected_option","options"])])):"interface"==O.value?(Ps(),js("div",GS,[Hs(n_,{selected_option:A.value,"onUpdate:selected_option":t[13]||(t[13]=e=>A.value=e),onSelect_option:t[14]||(t[14]=e=>{1==A.value.show_volume?I.value=!0:I.value=!1}),options:v.value},null,8,["selected_option","options"])])):"exporter"==O.value?(Ps(),js("div",WS,[Hs(n_,{selected_option:T.value,"onUpdate:selected_option":t[15]||(t[15]=e=>T.value=e),options:g.value},null,8,["selected_option","options"])])):"host_pool"==O.value?(Ps(),js("div",KS,[Hs(n_,{selected_option:E.value,"onUpdate:selected_option":t[16]||(t[16]=e=>E.value=e),onSelect_option:t[17]||(t[17]=e=>ie()),options:h.value},null,8,["selected_option","options"])])):"CIDR"==O.value?(Ps(),js("div",JS,[Hs(n_,{selected_option:V.value,"onUpdate:selected_option":t[18]||(t[18]=e=>V.value=e),onSelect_option:t[19]||(t[19]=e=>ie()),options:H.value},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),r.value?(Ps(),js("div",YS,[Vs("label",ZS,[Vs("b",null,te(c("if_stats_config.frequency")),1)]),Vs("div",XS,[Hs(n_,{selected_option:k.value,"onUpdate:selected_option":t[20]||(t[20]=e=>k.value=e),options:b.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",QS,[Vs("label",eN,[Vs("b",null,te(c("if_stats_config.threshold")),1)]),I.value?(Ps(),js(Ss,{key:0},[Vs("div",tN,[Hs(n_,{selected_option:U.value,"onUpdate:selected_option":t[21]||(t[21]=e=>U.value=e),options:ya(G)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==U.value.id?"p-0":""]])},[Vs("div",aN,["throughput"==U.value.id?(Ps(!0),js(Ss,{key:0},En(X.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:y,name:"threshold_measure"},null,8,lN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ue,for:e.id},te(e.label),11,nN)],64)))),256)):Ys("v-if",!0),"percentage"==U.value.id?(Ps(),js(Ss,{key:1},En(ee,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:y,name:"threshold_measure"},null,8,sN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ue,for:e.id},te(e.label),11,oN)],64)))),64)):Ys("v-if",!0),"volume"==U.value.id?(Ps(!0),js(Ss,{key:2},En(Z.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:y,name:"threshold_measure"},null,8,iN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ue,for:e.id},te(e.label),11,rN)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",cN,[(Ps(!0),js(Ss,null,En(Q.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:w,name:"threshold_sign"},null,8,uN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ce,for:e.id},te(e.label),11,dN)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([I.value?"col-sm-2":"col-sm-8"])},["percentage"==U.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:le,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:le,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==U.value.id?(Ps(),js("div",_N,te(c("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(nm,{note_list:W}),0==j.value?(Ps(),js("button",{key:0,type:"button",onClick:de,class:"btn btn-primary",disabled:P.value&&"Host"==O.value},te(c("add")),9,pN)):(Ps(),js("button",{key:1,type:"button",onClick:_e,class:"btn btn-primary",disabled:P.value&&"Host"==O.value},te(c("apply")),9,fN))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const vN={class:"row"},hN={class:"col-md-12 col-lg-12"},gN={class:"card"},bN=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yN={class:"card-body"},wN={class:"mb-4"},xN={id:"host_rules"},kN={class:"card-footer"};var $N={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),o=e=>i18n(e),i=ma({}),r=ma({}),c=ma(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,m=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const v=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,h=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,g=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,b=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,y=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,w=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,x=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],k={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let S={},N=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let C=o("if_stats_config.delete_host_rules_description"),A=[],E=[],T=[],P=[],U=[],I=[],O=[],M=[],j=[];const L=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function D(e){await z(e)}const F=function(){const e=r.value;return r.value=null,e},R=function(){l.value.reload()},q=async function(){const e=i.value,t=a.buildURL(w,{...k,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){R()}))},z=async function(e){const t=a.buildURL(y,{...e}),l=await ntopng_utility.http_post_request(t,k);c.value=l.rsp,0==c.value?(s.value.close(),R()):s.value.invalidAdd()},B=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},V=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){R()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a=t.selected_iface:!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type?a="host_pool"==t.rule_type?t.host_pool_label:t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?t.target:t.target+" "+o("on_interface")+": "+t.flow_exp_ifid_name:(console.log(e),a=t.target),a}(e,a)}},{columnName:o("if_stats_config.rule_type"),targets:2,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev_port:traffic"==t.metric&&(a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?A.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):E.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return L.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:5,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);return"*"==t.target||null==e?"":(t.metric_type&&"throughput"==t.metric_type?l=a.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?l=a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type&&(e<0&&(e*=-1),l=a.fpercent(e)),l)}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:o("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return B(a)}}],l={table_buttons:e,data_url:a.buildURL(b,k),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};S=l};return dn((async()=>{V(),await async function(){const e=a.buildURL(u,k);await $.get(e,(function(e,t){A=e.rsp}))}(),await async function(){const e=a.buildURL(g,k);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(d,k);await $.get(e,(function(e,t){E=e.rsp}))}(),await async function(){const e=a.buildURL(f,{...k});await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(m,{...k});await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(v,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),O=t}(),await async function(){const e=a.buildURL(_,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),T=t}(),await async function(){const e=a.buildURL(h,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),M=t}(),await async function(){const e=a.buildURL(p,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),j=t}(),s.value.metricsLoaded(A,P,E,U,I,t.page_csrf,null,null,O,M,T,j)})),vn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",vN,[Vs("div",hN,[Vs("div",gN,[bN,Vs("div",yN,[Vs("div",wN,[Vs("h4",null,te(o("if_stats_config.traffic_rules")),1)]),Vs("div",xN,[Hs(gw,{ref_key:"modal_delete_confirm",ref:n,title:ya(N),body:ya(C),onDelete:q},null,8,["title","body"]),Hs(mN,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(A),interface_metric_list:ya(E),frequency_list:L,init_func:F,onAdd:z,onEdit:D},null,8,["metric_list","interface_metric_list"]),Hs(Ly,{ref_key:"table_host_rules",ref:l,table_buttons:ya(S).table_buttons,columns_config:ya(S).columns_config,data_url:ya(S).data_url,enable_search:ya(S).enable_search,table_config:ya(S).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",kN,[Hs(nm,{note_list:x})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const SN={class:"row"},NN={class:"col-md-12 col-lg-12"},CN={class:"card"},AN=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),EN={class:"card-body"},TN={id:"host_details_ports"},PN={class:"row mb-4 mt-4",id:"host_details_ports"},UN={class:"col-6"};var IN={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){ma(null),ma([]),ma({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),vn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),js("div",SN,[Vs("div",NN,[Vs("div",CN,[AN,Vs("div",EN,[Vs("div",TN,[Vs("div",PN,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",UN,[Hs(Gy,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const ON={class:"row"},MN={class:"col-12"},jN={class:"card"},LN={class:"card-body"},DN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},FN={class:"d-flex ms-auto flex-row-reverse"},RN=Vs("label",{class:"my-auto me-1"},null,-1),qN=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],zN={key:0,class:"m-1"},BN={style:{"min-width":"14rem"}},VN={class:"my-auto me-1"};var HN={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ma(null),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i="alerts-map",r={},c=ma(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},d=function(){n.value.show_loading(),c.value.update_chart(`${o}?${u()}`),n.value.hide_loading()},_=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(r.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},p=function(e){n.value.show_loading(),x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${o}?${u()}`),n.value.hide_loading()};return dn((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),_n((()=>{n.value.hide_loading()})),(t,a)=>(Ps(),js("div",ON,[Vs("div",MN,[Vs("div",jN,[Hs(mf,{ref_key:"loading",ref:n},null,512),Vs("div",LN,[Vs("div",DN,[Vs("div",FN,[Vs("div",null,[RN,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},qN)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",zN,[Vs("div",BN,[Vs("label",VN,te(l("bubble_map."+t))+": ",1),Hs(n_,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),Vs("div",{id:i,style:{height:"90%"}},[Hs(N_,{ref_key:"bubble_chart",ref:c,id:i,chart_type:ya(s),base_url_request:o,get_params_url_request:u,get_custom_chart_options:_(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const GN={class:"row"},WN={class:"col-12"},KN={class:"card"},JN={class:"card-body"},YN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},ZN={class:"d-flex ms-auto flex-row-reverse"},XN=Vs("label",{class:"my-auto me-1"},null,-1),QN={class:"m-1"},eC={key:0,style:{"min-width":"15rem"}},tC={class:"my-auto me-1"};var aC={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o="alerts-map",i={},r=ma(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),(t,a)=>(Ps(),js("div",GN,[Vs("div",WN,[Vs("div",KN,[Vs("div",JN,[Vs("div",YN,[Vs("div",ZN,[XN,(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js("div",QN,[e.length>0?(Ps(),js("div",eC,[Vs("label",tC,te(l("bubble_map."+t))+": ",1),Hs(n_,{selected_option:i[t],"onUpdate:selected_option":e=>i[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:o,style:{height:"90%"}},[Hs(N_,{ref_key:"bubble_chart",ref:r,id:o,chart_type:ya(n),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const lC={class:"row"},nC={class:"col-md-12 col-lg-12"},sC={class:"card card-shadow"},oC={class:"card-body"},iC={class:"d-flex align-items-center flex-row-reverse mb-2"},rC=Vs("label",{class:"my-auto me-1"},null,-1),cC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],uC={key:0,class:"m-1"},dC={style:{"min-width":"14rem"}},_C={class:"my-auto me-1"},pC=["title"],fC=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var mC={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=ma(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=ma(null);function m(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),_n((()=>{y(),w(),g()}));const v=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value.show_loading();let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value.hide_loading()}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Ps(),js("div",lC,[Vs("div",nC,[Vs("div",sC,[Hs(mf,{ref_key:"loading",ref:f},null,512),Vs("div",oC,[Vs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",iC,[Vs("div",null,[rC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:v},cC)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,n)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",uC,[Vs("div",dC,[Vs("label",_C,te(l("ports_analysis."+t))+": ",1),Hs(n_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Ps(),js("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},fC,8,pC)):Ys("v-if",!0)]),Hs(tS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:ya(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:m},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const vC={class:"row"},hC={class:"col-md-12 col-lg-12"},gC={class:"card card-shadow"},bC={class:"card-body"},yC={id:"aggregated_live_flows"},wC={class:"d-flex align-items-center"},xC={class:"d-flex no-wrap ms-auto",style:{"text-align":"left","margin-right":"1rem","min-width":"20rem"}},kC={class:"my-auto me-1"};var $C={__name:"page-aggregated-live-flows",props:{is_ntop_enterprise_m:Boolean,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number},setup(e){const t=e,l=e=>i18n(e),n=[{label:l("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1},{label:l("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1},{label:l("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1},{label:l("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0},{label:l("application_proto_client_server"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0},{label:l("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0}],s=function(){if(t.is_ntop_enterprise_m)return ma(n);{let e=[];return n.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();const o=ma(n[0]);function i(){x.set_key_to_url("aggregation_criteria",o.value.param),d.aggregation_criteria=o.value.param,h(d)}const r=ma(null),c=ma({}),u=ma(null);let d={};const _=function(e,t){return t.client_name.alerted&&(t.client_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.client_name.complete_label),t.client_name.label&&""!=t.client_name.label?t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}">${t.client_name.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.client_name.label}</label>`+t.client_name.complete_label:t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.id}">${e.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.client_name.complete_label},p=function(e,t){return t.server_name.alerted&&(t.server_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.server_name.complete_label),t.server_name.label&&""!=t.server_name.label?t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}">${t.server_name.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.server_name.label}</label>`+t.server_name.complete_label:t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.id}">${e.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.server_name.complete_label},f=function(e,t){let a="";return 1==o.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}`:2==o.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}`:3==o.value.value?a=`${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}`:4==o.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}&server=${t.server_name.id}`:5==o.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}&client=${t.client_name.id}&server=${t.server_name.id}`:6==o.value.value&&(a=`${http_prefix}/lua/flows_stats.lua?flow_info=${t.info.id}`),`<a href=${a} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},m=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua`,v=()=>{u.value.reload()};async function h(e){const n=[];let s=x.obj_to_url_params(e);n.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){v()}});const i=[];t.vlans.length>0&&i.push({filterTitle:l("map_page.vlans"),filters:t.vlans,filterMenuKey:"vlan_id",columnIndex:0,removeAllEntry:!0,callbackFunction:(e,a)=>{if(0!=a.id){let l={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:a.id,aggregation_criteria:o.value.param};x.set_key_to_url("vlan_id",a.id),e.ajax.url(`${m}?${x.obj_to_url_params(l)}`),r.value.show_loading(),e.ajax.reload(),r.value.hide_loading()}}});let d=8;1!=o.value.value&&(d=7),5==o.value.value&&(d=10);let h=o.value.table_id,g={table_buttons:n,data_url:`${m}?${s}`,enable_search:!0,table_filters:i,id:h,table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:6},{type:"file-size",targets:7},{type:"file-size",targets:8}]}};(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(h))&&(g.table_config.order=[[d,e.order]]);let b=[];b.push({orderable:!1,targets:0,name:"flows_icon",data:"client",className:"text-center",responsivePriority:1,render:(e,t,a)=>f(e,a)}),1==o.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`}):2==o.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):3==o.value.value?b.push({columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)}):t.is_ntop_enterprise_m&&(4==o.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)}):5==o.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`},{columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)}):6==o.value.value&&b.push({columnName:i18n("info"),targets:0,name:"info",data:"info",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.label}</label>`})),t.vlans.length>0&&(b.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}),d>1&&(d+=1),(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(h))&&(g.table_config.order=[[d,e.order]]),g.table_config.columnDefs=[{type:"file-size",targets:7},{type:"file-size",targets:8},{type:"file-size",targets:9}]),b.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("total_score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1}),2!=o.value.value&&4!=o.value.value&&b.push({columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1}),3!=o.value.value&&4!=o.value.value&&b.push({columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1}),b.push({columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)}),g.columns_config=b,c.value=g}return dn((async()=>{d=function(){let e={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:x.get_url_entry("vlan_id")||t.vlans,aggregation_criteria:x.get_url_entry("aggregation_criteria")||o.value.param,page:x.get_url_entry("page")||t.page,sort:x.get_url_entry("sort")||t.sort,order:x.get_url_entry("order")||t.order,start:x.get_url_entry("start")||t.start,length:x.get_url_entry("length")||t.length};o.value=n.find((t=>t.param==e.aggregation_criteria));for(const t in e)x.set_key_to_url(t,e[t]);return e}(),await h(d),function(){for(const e in d)x.set_key_to_url(e,d[e])}()})),(e,t)=>(Ps(),js("div",vC,[Vs("div",hC,[Vs("div",gC,[Hs(mf,{ref_key:"loading",ref:r},null,512),Vs("div",bC,[Vs("div",yC,[(Ps(),Ls(Ly,{ref_key:"table_aggregated_live_flows",ref:u,id:c.value.id,key:c.value.data_url,table_buttons:c.value.table_buttons,columns_config:c.value.columns_config,data_url:c.value.data_url,filter_buttons:c.value.table_filters,enable_search:c.value.enable_search,table_config:c.value.table_config},{menu:vl((()=>[Vs("div",wC,[Vs("div",xC,[Vs("label",kC,te(l("criteria_filter"))+": ",1),Hs(n_,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:ya(s),onSelect_option:i},null,8,["selected_option","options"])])])])),_:1},8,["id","table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"]))])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const SC={class:"row"},NC={class:"col-md-12 col-lg-12"},CC={class:"card card-shadow"},AC={class:"card-body"},EC={class:"d-flex align-items-center mb-2"},TC={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},PC={class:"my-auto me-1"},UC=["title"],IC=["onClick","title"];var OC={__name:"page-aggregated-live-flows-v2",props:{context:Object},setup(e){const t=e,l=ma(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];ma(null);const o=ma(),i=ma([]),r=ma([]),c=ma("aggregated_live_flows"),u=xo((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=ma(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return ma(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){i.value=await h("overview"),m()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id")||"-1",aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function m(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const v=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,name:"flows_icon",data_field:"client",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7==d.value.value&&null!=t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?srv_port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:7==d.value.value&&null!=t.srv_port?`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`:`${e.label} ${a} ${e.extra_labels}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Ps(),js("div",SC,[Vs("div",NC,[Vs("div",CC,[Ys(' <Loading ref="loading"></Loading> '),Vs("div",AC,[Vs("div",EC,[Vs("div",TC,[Vs("label",PC,te(n("criteria_filter"))+": ",1),Hs(n_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(em,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:ya(u),table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:vl((()=>[(Ps(!0),js(Ss,null,En(i.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:v(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(tm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,UC)])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),m(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,IC)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows-v2.vue"};const MC={id:"aggregated_live_flows"};var jC={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=ma({}),l=ma(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Ps(),js("div",MC,[Hs(Ly,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const LC={class:"container-fluid"},DC={class:"row form-group mb-3"},FC={class:"col col-md-12"},RC={class:"form-label"},qC={class:"row form-group mb-3"},zC={class:"col col-md-6"},BC={class:"form-label"},VC={class:"col col-md-6"},HC={class:"form-label"},GC={key:0},WC={key:1},KC=["pattern"],JC={class:"row form-group mb-3"},YC={class:"col col-md-6"},ZC={class:"form-label"},XC={class:"col col-md-6"},QC={class:"form-label"},eA={key:0},tA={key:1},aA=["pattern"],lA={class:"row form-group mb-3"},nA={class:"col col-md-12"},sA={class:"form-label"},oA={class:"row form-group mb-3"},iA={class:"col col-md-12"},rA={class:"form-label"},cA=["disabled"];var uA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let i="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=ma({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=ma({}),p=ma(0),f=ma(0),m=ma({}),v=ma(""),h=ma(""),g=ma({}),y=ma(""),w=ma(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=ma([]),S=ma({}),N=ma({}),C=ma(""),A=xo((()=>I(m.value,h.value,v.value))),E=xo((()=>I(g.value,w.value,y.value))),T=ma(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==m.value.value?(await M(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",j(v,m.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await M(),N.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function I(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let O=!1;async function M(){if(1==O)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}function j(e,t){e.value=mp.get_data_pattern(t)}const L=()=>{let e=m.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=N.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},o="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,o="edit"),a(o,s),D()},D=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=l("edit"),m.value=o.find((t=>t.value==e.source.type)),g.value=o.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),C.value=l("add");let e=o.find((e=>1==e.default));m.value=e,g.value=e,c.value=r.find((e=>e.value==i)),_.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),n.value.show()},close:D}),_n((()=>{})),(e,t)=>(Ps(),Ls(lp,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Vs("div",LC,[Ys(" Rule ID "),wn(Vs("div",DC,[Vs("div",FC,[Vs("label",RC,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[Mi,f.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[Mi,p.value]])])],512),[[Yi,!T.value]]),Ys(" Source "),Vs("div",qC,[Vs("div",zC,[Vs("label",BC,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(n_,{selected_option:m.value,"onUpdate:selected_option":t[2]||(t[2]=e=>m.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:o},null,8,["selected_option"])]),Vs("div",VC,[Vs("label",HC,te(l("nedge.page_rules_config.source")),1),"interface"==m.value.value?(Ps(),js("div",GC,[Hs(n_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",WC,[wn(Vs("input",{type:"text",class:"form-control",pattern:v.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,KC),[[Mi,h.value]])]))])]),Ys(" Dest "),Vs("div",JC,[Vs("div",YC,[Vs("label",ZC,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(n_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:o},null,8,["selected_option"])]),Vs("div",XC,[Vs("label",QC,te(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Ps(),js("div",eA,[Hs(n_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",tA,[wn(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,aA),[[Mi,w.value]])]))])]),Ys(" Direction "),Vs("div",lA,[Vs("div",nA,[Vs("label",sA,te(l("nedge.page_rules_config.direction")),1),Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",oA,[Vs("div",iA,[Vs("label",rA,te(l("nedge.page_rules_config.action")),1),Hs(n_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:!ya(A)||!ya(E),onClick:L,class:"btn btn-primary"},te(C.value),9,cA)])),_:1},512))}};ap("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),uA.__scopeId="data-v-50692d68",uA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const dA={class:"container-fluid"},_A={class:"row form-group mb-3"},pA={class:"col col-md-12"},fA={class:"form-label"};var mA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],i=ma({}),r=()=>{l.value.close()};function c(){a("apply",i.value.value),r()}return t({show:e=>{i.value=o.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(s)),1)])),body:vl((()=>[Vs("div",dA,[Ys(" Default Policy "),Vs("div",_A,[Vs("div",pA,[Vs("label",fA,te(n("nedge.page_rules_config.default policy")),1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const vA={class:"mb-2"},hA=Vs("br",null,null,-1),gA={class:"d-inline-block"},bA={key:0,style:{color:"green"}},yA={key:1,style:{color:"red"}},wA=[Vs("i",{class:"fas fa-cog"},null,-1)],xA={id:"aggregated_live_flows"};var kA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=ma({}),s=ma(null),o=ma(null),i=ma(null),r=ma({});function c(e){p(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function u(e){p(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function d(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}r.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function _(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),d(e),v()}function p(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),v()}function f(){i.value.show(r.value)}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){v()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null,r.value)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return m(a)}}),i.columns_config=c,n.value=i}(),d()}));const m=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),v()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function v(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",vA,[Vs("h2",null,te(a("nedge.rules_config_title")),1),hA,Vs("h5",gA,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==r.value?.value?(Ps(),js("span",bA,te(r.value?.label),1)):Ys("v-if",!0),"deny"==r.value?.value?(Ps(),js("span",yA,te(r.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:f},wA)])])]),Vs("div",xA,[Hs(Ly,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(uA,{ref_key:"modal_add_rule_config",ref:o,onAdd:u,onEdit:c},null,512),Hs(mA,{ref_key:"modal_change_default_policy",ref:i,onApply:_},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const $A={key:0,class:"form-group ms-2 me-2 mt-3 row"},SA={class:"col-form-label col-sm-4"},NA={class:"col-8"},CA={key:1,class:"form-group ms-2 me-2 mt-3 row"},AA={class:"col-form-label col-sm-4"},EA={class:"col-8"},TA={class:"form-group ms-2 me-2 mt-3 row"},PA={class:"col-form-label col-sm-4"},UA={class:"col-8"},IA=["placeholder"],OA=["disabled"],MA=["disabled"];var jA={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(!1),s=e=>i18n(e),o=ma(!0);let i=i18n("add_application");const r=ma(i18n("details.custom_rules_placeholder")),c=ma({}),u=ma([]),d=ma(""),_=ma(""),p=ma(null),f=ma({}),m=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const v=()=>{1==h()&&1==g()?o.value=!1:o.value=!0},h=()=>/^[A-Za-z0-9]*$/.test(_.value),g=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||""===t)})),e},b=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),y()},y=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,i=i18n("add_application"),null!=e&&(p.value=e.application_id,n.value=!0,i=i18n("edit_application"),function(e){c.value={id:e.category_id,label:e.category},d.value=e.custom_rules.replaceAll(",","\n"),f.value=e,_.value=e.application}(e)),l.value.show(),v()},close:y,loadCategoryList:e=>{u.value=function(e){let t=[];return e.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)).forEach((e=>{let a={id:e.cat_id,label:e.name};t.push(a)})),t}(e)}}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(i)),1)])),body:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,p.value]]),0==n.value?(Ps(),js("div",$A,[Vs("label",SA,[Vs("b",null,te(s("app_name")),1)]),Vs("div",NA,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:v,spellcheck:"false"},null,544),[[Mi,_.value]])])])):(Ps(),js("div",CA,[Vs("label",AA,[Vs("b",null,te(s("category")),1)]),Vs("div",EA,[Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",TA,[Vs("label",PA,[Vs("b",null,te(s("category_custom_rule")),1)]),Vs("div",UA,[wn(Vs("textarea",{class:"form-control",onInput:v,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,IA),[[Mi,d.value]])])])])),footer:vl((()=>[Hs(nm,{note_list:m}),0==n.value?(Ps(),js("button",{key:0,type:"button",onClick:b,class:"btn btn-primary",disabled:o.value},te(s("add")),9,OA)):(Ps(),js("button",{key:1,type:"button",onClick:b,class:"btn btn-primary",disabled:o.value},te(s("apply")),9,MA))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},LA={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=i18n("custom_categories.delete_app"),o=i18n("custom_categories.delete_app_confirm"),i=ma(null),r=()=>{a("remove",{protocol_alias:i.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(i.value=e.application),l.value.show()},close:c}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[1]||(t[1]=t=>e.showed()),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(s)),1)])),body:vl((()=>[Ks(te(ya(o)),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(n("delete")),1)])),default:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,i.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const DA=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var FA={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=ma(null),l=ma(null),n=ma(null),s=ma({}),o=ma([]),i=ma(null),r=ma(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))}))},m=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))}))},v=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dn((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){v()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},l=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return b(a)}}],n=ntopng_utility.clone(a);n.columns_config=l,s.value=n}()})),_n((async()=>{await(async()=>{await $.get(u,(function(e,t){o.value=e.rsp})),n.value.loadCategoryList(o.value)})()})),vn((async()=>{a.value.destroy_table()}));const b=function(e){const t=[{class:"pointer",handler:{handlerId:"edit_rule",onClick:()=>{v(e)}},icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let a={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};t.push({class:"pointer",handler:a,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(t)};return(t,u)=>(Ps(),js(Ss,null,[DA,wn(Vs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},te(ya(c)),513),[[Yi,!r.value]]),Hs(jA,{ref_key:"modal_add_application",ref:n,category_list:o.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:m},null,8,["category_list","page_csrf","ifid"]),Hs(LA,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Hs(Ly,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const RA={class:"row"},qA={class:"col-12"},zA={class:"card card-shadow"},BA={class:"card-body"},VA={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},HA={key:2,class:"alert alert-info alert-dismissable"},GA=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),WA=["innerHTML"],KA=["innerHTML"];var JA={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=ma(!1),l=i18n("map_page.fetch_error"),n=ma(!1),s=ma(null),o=ma({}),i=ma(null),r=ma(""),c=i18n("discover.network_discovery_not_enabled"),u=ma(null),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=ma(!1);let f;const m=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],v=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value.hide_loading(),await $.get(NtopUtils.buildURL(v,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(n.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(m.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(m.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(m.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(m.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))},y=()=>{s.value.reload()};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){y()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value.show_loading(),$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,o.value=l}()})),vn((async()=>{s.value.destroy_table()})),(e,t)=>(Ps(),js("div",RA,[Vs("div",qA,[Vs("div",zA,[Hs(mf,{ref_key:"loading",ref:u},null,512),Vs("div",BA,[a.value?(Ps(),js("div",VA,te(ya(l)),1)):Ys("v-if",!0),n.value?(Ps(),js("div",HA,[GA,Ks(" "+te(ya(c))+" ",1),Vs("span",{innerHTML:i.value},null,8,WA)])):(Ps(),Ls(Ly,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:o.value.table_buttons,columns_config:o.value.columns_config,data_url:o.value.data_url,enable_search:o.value.enable_search,table_config:o.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(nm,{note_list:m}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:r.value},null,8,KA)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const YA={class:"row"},ZA={class:"col-md-12 col-lg-12"},XA={class:"card card-shadow"},QA={class:"card-body"},eE={id:"manage_configurations_backup"},tE=Vs("div",{class:"d-flex align-items-center"},null,-1);var aE={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=ma({}),o=function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)},i=()=>{l.value.reload()};dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){i()}});let t={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},l=[];l.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>o(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return r(a)}}),t.columns_config=l,s.value=t}()}));const r=function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])};return(e,t)=>(Ps(),js("div",YA,[Vs("div",ZA,[Vs("div",XA,[Hs(mf,{ref:"loading"},null,512),Vs("div",QA,[Vs("div",eE,[(Ps(),Ls(Ly,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:vl((()=>[tE])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))])])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const lE={class:"row"},nE={class:"col-md-12 col-lg-12"},sE={class:"card card-shadow"},oE={class:"card-body"},iE={id:"manage_configurations_backup"};var rE={__name:"page-manage-configurations-backup2",props:{page:Number,sort:String,order:String,start:Number,length:Number},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/all_backups.lua`,s=ma({});const o=function(e){return`${new Date(1e3*e)}`},i=e=>"epoch"!=e.data&&"actions"!=e.data;function r(e,t){counter+=1;let a=t[e.data];return null!=e.render?e.render(a,null,t):a}function c(e){return null==e.columnName||""==e.columnName?"":e.columnName}function u(e){return e.data}const d=async(e,a,l,s,o)=>{let i=function(e,a,l,n,s){let o=l.find((e=>0!=e.sort)),i={page:ntopng_url_manager.get_url_entry("page")||t.page,sort:ntopng_url_manager.get_url_entry("sort")||t.sort,order:ntopng_url_manager.get_url_entry("order")||t.order,start:e*a,length:a,map_search:n};return 0==s&&null!=o&&(i.sort=o.data.data,i.order=1==o.sort?"asc":"desc"),i}(e,a,l,s,o);const r=ntopng_url_manager.obj_to_url_params(i),c=`${n}?${r}`;let u=await ntopng_utility.http_request(c,null,null,!0);return{total_rows:u.recordsTotal,rows:u.rsp}},_=()=>{l.value.reload()};dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){_()}});let t={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!1,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},l=[];l.push({columnName:a("backup_date"),orderable:!1,targets:0,name:"epoch",data:"epoch",className:"text-center",responsivePriority:1,render:(e,t,a)=>o(e)}),t.columns_config=l,s.value=t}()})),_n((async()=>{s.value={columns:f(),get_rows:d,get_column_id:u,print_column_name:c,print_html_row:r,paging:!0}}));const p=function(e){let t={handlerId:"dowload_backup_handler",onClick:()=>{!async function(e){await(`${http_prefix}/lua/rest/v2/get/system/configurations/backup.lua?epoch=${e.data}&download=true`)}(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fa-arrow-down",title:i18n("download")}])};function f(){let e=[];return e.push({columnName:a("backup_date"),orderable:!1,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>o(e)},{columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return p(a)}}),e}return(e,t)=>(Ps(),js("div",lE,[Vs("div",nE,[Vs("div",sE,[Hs(mf,{ref:"loading"},null,512),Vs("div",oE,[Vs("div",iE,[(Ps(),Ls(Qf,{ref:"table_configurations_backup",id:"table_configurations_backup",key:s.value.columns,columns:s.value.columns,get_rows:(e,t,a,l)=>s.value.get_rows(e,t,a,l),get_column_id:e=>s.value.get_column_id(e),print_column_name:e=>s.value.print_column_name(e),print_html_row:(e,t)=>s.value.print_html_row(e,t),f_is_column_sortable:i,enable_search:!0,paging:!0},null,8,["columns","get_rows","get_column_id","print_column_name","print_html_row"]))])])])])]))},__file:"http_src/vue/page-manage-configurations-backup2.vue"};const cE={class:"form-group ms-2 me-2 mt-3 row"},uE={class:"col-form-label col-sm-2"},dE={class:"col-sm-10"},_E={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},pE={class:"form-group ms-2 me-2 mt-3 row"},fE={class:"col-form-label col-sm-2"},mE={class:"col-10"},vE={key:0,class:"form-group ms-2 me-2 mt-3 row"},hE={class:"col-form-label col-sm-2"},gE={class:"col-10"},bE={class:"form-group ms-2 me-2 mt-3 row"},yE={class:"col-form-label col-sm-2"},wE={class:"col-10"},xE={class:"form-group ms-2 me-2 mt-3 row"},kE={class:"col-form-label col-sm-2"},$E={class:"col-10"},SE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},NE={class:"col-form-label col-sm-2"},CE={class:"col-sm-3"},AE={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},EE=["value","id"],TE=["id","for"],PE=["value","id"],UE=["id","for"],IE=["value","id"],OE=["id","for"],ME={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},jE=["value","id"],LE=["id","for"],DE={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},FE=["value","id"],RE=["id","for"],qE={key:1,class:"message alert alert-warning mt-3"},zE=["disabled"],BE=["disabled"];var VE={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");const s=ma(null),o=e=>i18n(e);ma(null),ma(null);const i=ma([]),r=ma([]);let c=ma([]),u=ma(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=ma([]),p=ma(null),f=ma(null),m=ma({}),v=ma(null),h=ma(null),g=ma({}),b=ma({}),y=ma(!0),w=ma({}),x=ma(!0),k=ma("snmp"),S=ma(!1),N=ma(null);let C=ma([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4"),o("if_stats_config.note_5")],T=ma([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),P=ma([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),U=ma([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),I=ma([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),O=ma([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],j=ma(null),L=ma(null),D={csrf:n.page_csrf};function F(e){e.forEach((e=>e.active=1==e.default_active))}const R=e=>{const t=e.target.id;I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?P.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function z(e){const t=a.buildURL(d+"?host="+v.value.label_to_insert,D);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==v.value.label_to_insert?u.value=!1:u.value=!0}function B(){let e=[];"packets"==g.value.id?T.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?T.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):T.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),C.value=e}const V=e=>{"snmp"==k.value&&j.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=v.value.label_to_insert,o=v.value.label,i=null==h.value?"*":h.value.id,r=null==h.value?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=L.value.value),"throughput"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)/8):"volume"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),P.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)):"percentage"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(L.value.value),u="%"):(p=1,_=parseInt(L.value.value));let m="add";1==e&&(m="edit"),l(m,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:L.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),G()},H=()=>{V(!0)},G=()=>{s.value.close()};return dn((()=>{T.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(v.value=t)})),I.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?P.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):L.value.value=e.threshold,B(),C.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(v.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),z(e.device_port))})(e):async function(){S.value||(j.value="",m.value=i.value[0],v.value=null,v.value=r.value[0],z(),g.value=i.value[0],B(),b.value=_.value[0],w.value=T.value[0],T.value.forEach((e=>e.active=!1)),T.value[0].active=!0,F(P.value),F(U.value),F(I.value),k.value="snmp",y.value=!0,u.value=!1,L.value.value=1)}(),s.value.show()},close:G,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=n.frequency_list,b.value=_.value[0],m.value=i.value[0],N.value=a}}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(ya(A)),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",cE,[Vs("label",uE,[Vs("b",null,te(o("if_stats_config.add_rules_type")),1)]),Vs("div",dE,[Vs("div",_E,[Vs("label",{class:K(["btn",["snmp"==k.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"snmp",onClick:t[0]||(t[0]=e=>{return t="snmp",void(k.value=t);var t})}),Ks(" "+te(o("if_stats_config.add_rules_type_snmp")),1)],2)])])]),Vs("div",pE,[Vs("label",fE,[Vs("b",null,te(o("if_stats_config.snmp_device")),1)]),Vs("div",mE,[Hs(n_,{selected_option:v.value,"onUpdate:selected_option":t[1]||(t[1]=e=>v.value=e),onSelect_option:t[2]||(t[2]=e=>z()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Ps(),js("div",vE,[Vs("label",hE,[Vs("b",null,te(o("if_stats_config.snmp_interface")),1)]),Vs("div",gE,[Hs(n_,{selected_option:h.value,"onUpdate:selected_option":t[3]||(t[3]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",bE,[Vs("label",yE,[Vs("b",null,te(o("if_stats_config.metric")),1)]),Vs("div",wE,[Hs(n_,{selected_option:g.value,"onUpdate:selected_option":t[4]||(t[4]=e=>g.value=e),onSelect_option:t[5]||(t[5]=e=>B()),options:i.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",xE,[Vs("label",kE,[Vs("b",null,te(o("if_stats_config.frequency")),1)]),Vs("div",$E,[Hs(n_,{selected_option:b.value,"onUpdate:selected_option":t[6]||(t[6]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",SE,[Vs("label",NE,[Vs("b",null,te(o("if_stats_config.threshold")),1)]),x.value?(Ps(),js(Ss,{key:0},[Vs("div",CE,[Hs(n_,{selected_option:w.value,"onUpdate:selected_option":t[7]||(t[7]=e=>w.value=e),options:ya(C)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",AE,["throughput"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:0},En(U.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,EE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,TE)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Ps(),js(Ss,{key:1},En(M,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,PE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,UE)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:2},En(P.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,IE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,OE)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Ps(),js("div",ME,[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,jE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:R,for:e.id},te(e.label),11,LE)],64)))),256))])):(Ps(),js("div",DE,[(Ps(!0),js(Ss,null,En(O.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,FE),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,RE)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==w.value.id?(Ps(),js("div",qE,te(o("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(nm,{note_list:E}),0==S.value?(Ps(),js("button",{key:0,type:"button",onClick:V,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},te(o("add")),9,zE)):(Ps(),js("button",{key:1,type:"button",onClick:H,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},te(o("apply")),9,BE))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const HE={class:"row"},GE={class:"col-md-12 col-lg-12"},WE={class:"card"},KE=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),JE={class:"card-body"},YE={class:"mb-4"},ZE={id:"host_rules"},XE={class:"card-footer"};var QE={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),o=e=>i18n(e),i=ma({}),r=ma({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],m={ifid:t.ifid,csrf:t.page_csrf};let v={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await N(),await C(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},N=async function(){const e=i.value,t=a.buildURL(p,{...m,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},C=async function(e){const t=a.buildURL(_,{...m,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:1,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:2,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:5,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:6,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:o("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}}],l={table_buttons:e,data_url:a.buildURL(d,m),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};v=l};return dn((async()=>{E(),await async function(){const e=a.buildURL(c,m);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){m.verbose=!0;const e=a.buildURL(u,m);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),vn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",HE,[Vs("div",GE,[Vs("div",WE,[KE,Vs("div",JE,[Vs("div",YE,[Vs("h4",null,te(o("if_stats_config.snmp_rules")),1)]),Vs("div",ZE,[Hs(gw,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:N},null,8,["title","body"]),Hs(VE,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:C,onEdit:x},null,512),Hs(Ly,{ref_key:"table_host_rules",ref:l,table_buttons:ya(v).table_buttons,columns_config:ya(v).columns_config,data_url:ya(v).data_url,enable_search:ya(v).enable_search,table_config:ya(v).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",XE,[Hs(nm,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"},eT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return _n((async()=>{Kd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Ps(),js(Ss,null,[Ks(" Ciao Mondo "),Hs(nm,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const tT={class:"row"},aT={class:"col-md-12 col-lg-12"},lT={class:"card card-shadow"},nT={class:"card-body"},sT={class:"d-flex mb-3"},oT={class:"d-flex align-items-center ml-2 mb-2"},iT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},rT={class:"my-auto me-1"},cT={class:"d-flex align-items-center mb-2"},uT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},dT={class:"my-auto me-1"},_T={class:"d-flex align-items-center mb-2"},pT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},fT={class:"my-auto me-1"},mT=["title"],vT=["onClick","title"];var hT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=ma([]),n=ma([]);ma({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),o=[{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1},{label:s("tcp"),value:6,param:"client",table_id:"tcp_ports_analysis",enterprise_m:!1}],i=ma(o[0]),r=ma("server_ports_analysis"),c=ma({}),u=ma({}),d=ma();let _=ma([]),p=ma([]);const f=function(){if(t.is_ntop_enterprise_m)return ma(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();_n((async()=>{!async function(e){l.value=await w("overview"),C()}();let e=x.get_url_entry("port"),t=x.get_url_entry("protocol");const a=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=t&&0!=t.localeCompare("")&&null!=a&&0!=a.localeCompare("")?(e=Number(e),t=Number(t),o.forEach((e=>{e.value==t&&(i.value=e)})),await A(!1,a,e)):(i.value=o[0],await A(!1),d.value.refresh_table())}));const m=()=>x.get_url_object();async function v(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=m(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){N(e.row.ip)}const N=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function C(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name.split(".")[0];s.push({label:e.srv_port+"/"+t+" ("+e.n_hosts+")",id:e.srv_port,application:t,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{null==p.value.find((t=>0==t.id.localeCompare(e.application)))&&p.value.push({label:e.application,id:e.application,value:e.application})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||null!=t||(u.value=p.value[0]),e||null==t||p.value.forEach((e=>{e.label==t&&(u.value=e)})),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),null!=a?_.value.forEach((e=>{e.id==a&&(c.value=e)})):c.value=_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return U(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},U=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Ps(),js("div",tT,[Vs("div",aT,[Vs("div",lT,[Vs("div",nT,[Vs("div",sT,[Vs("div",oT,[Vs("div",iT,[Vs("label",rT,te(s("protocol"))+": ",1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":a[0]||(a[0]=e=>i.value=e),options:ya(f),onSelect_option:v},null,8,["selected_option","options"])])]),Vs("div",cT,[Vs("div",uT,[Vs("label",dT,te(s("application"))+": ",1),Hs(n_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",_T,[Vs("div",pT,[Vs("label",fT,te(s("db_search.tags.srv_port"))+": ",1),Hs(n_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(em,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:m,onCustom_event:$},{custom_header:vl((()=>[(Ps(!0),js(Ss,null,En(l.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(tm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,mT)])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),C(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,vT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const gT={class:"container-fluid"},bT={class:"row form-group mb-3"},yT={class:"col col-md-6"},wT={class:"form-label"},xT={class:"row form-group mb-3"},kT={class:"col col-md-6"},$T={key:0},ST={class:"col-form-label col-sm-10"},NT=["placeholder"],CT={class:"row form-group mb-3"},AT={class:"col col-md-6"},ET={key:0},TT={class:"col-form-label col-sm-10"},PT=["placeholder"],UT={class:"row form-group mb-3"},IT={class:"col col-md-6"},OT={class:"col-form-label col-sm-10"},MT=["disabled"];var jT={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=ma(null),i=ma(null),r=ma(null),c=ma({value:"mdns",label:"MDNS"}),u=ma(null),d=()=>{let e=new RegExp(mp.get_data_pattern("ip"));v.value=!(e.test(i.value)||"*"===i.value)},_=()=>{v.value=r<1||r>65535},p=ma(""),f=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],m=ma(0),v=ma(!0),h=ma(!0),g=ma({}),y=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let w;const x=ma([]),k=ma([]),$=ma(""),S=e=>{k.value=e,h.value=e.length<2},N=e=>{},C=e=>{},A=ma(!0);async function E(e){c.value=g.value,"custom"==c.value.value&&await P()}let T=!1;async function P(){if(1==T)return;null==w&&(w=b.http_request(y));let e=await w;x.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),T=!0}const U=()=>{let e=c.value.label,t={repeater_type:e};if("custom"==c.value.value){t={repeater_type:e,ip:i.value,port:r.value}}let l="add";0==A.value&&(t.repeater_id=m.value,l="edit");let n="",s="";k.value.forEach((e=>{n+=e.value+",",e.value==e.label||e.label.includes(e.value)?s+=e.label+",":s+=e.label+" ("+e.value+"),"})),t.interfaces=n,t.interface_details=s,a(l,t),I()},I=()=>{o.value.close()};return t({show:e=>{!function(e){A.value=null==e,0==A.value?(p.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),$.value=l("edit"),m.value=e.repeater_id,f.forEach((t=>{t.label==e.type&&(g.value=t)})),"custom"==g.value.value&&(i.value=e.ip,r.value=e.port),E()):(p.value=l("nedge.page_rules_config.modal_rule_config.title_add"),$.value=l("add"),f.find((e=>1==e.default)));if(0==A.value){const t=e.interfaces.split(",");let a=[];x.value.forEach((function(e){e.selected=!1,t.find((t=>t==e.value))&&(e.selected=!0),a.push(e)})),u.value.update_multiple_values(a)}}(e),o.value.show()},close:I}),_n((async()=>{await P()})),(e,t)=>(Ps(),Ls(lp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:o},{title:vl((()=>[Ks(te(p.value),1)])),body:vl((()=>[Vs("div",gT,[Ys(" Repeater Type "),Vs("div",bT,[Vs("div",yT,[Vs("label",wT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Hs(n_,{selected_option:g.value,"onUpdate:selected_option":t[0]||(t[0]=e=>g.value=e),onSelect_option:t[1]||(t[1]=e=>E()),options:f},null,8,["selected_option"])])]),Ys(" IP "),Vs("div",xT,[Vs("div",kT,["custom"==g.value.value?(Ps(),js("div",$T,[Vs("label",ST,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>i.value=e),onInput:d,class:"form-control",type:"text",placeholder:ya(n),required:""},null,40,NT),[[Mi,i.value]])])):Ys("v-if",!0)])]),Ys(" Port "),Vs("div",CT,[Vs("div",AT,["custom"==g.value.value?(Ps(),js("div",ET,[Vs("label",TT,[Vs("b",null,te(l("nedge.page_repeater_config.port")),1)]),wn(Vs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>r.value=e),onInput:_,class:"form-control",type:"text",placeholder:ya(s),required:""},null,40,PT),[[Mi,r.value]])])):Ys("v-if",!0)])]),Vs("div",UT,[Vs("div",IT,[Vs("label",OT,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Hs(n_,{ref_key:"interfaces_search",ref:u,options:x.value,multiple:!0,onSelect_option:N,onUnselect_option:C,onChange_selected_options:S},null,8,["options"])])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:h.value||v.value&&"custom"==c.value,onClick:U,class:"btn btn-primary"},te($.value),9,MT)])),_:1},512))}};ap("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),jT.__scopeId="data-v-5b3dc248",jT.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const LT={class:"mb-2"},DT=Vs("br",null,null,-1),FT={id:"aggregated_live_flows"};var RT={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=ma({}),s=ma(null),o=ma(null);function i(e){c(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function r(e){c(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function c(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),_()}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){_()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return u(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return d(a)}}),i.columns_config=r,n.value=i}()}));const u=function(e,t){if(e){return e.replace(/.$/,"")}return e};const d=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),_()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function _(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",LT,[Vs("h2",null,te(a("nedge.repeaters_config_title")),1),DT]),Vs("div",FT,[Hs(Ly,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(jT,{ref_key:"modal_add_repeater_config",ref:o,onAdd:r,onEdit:i},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const qT={key:0,class:"text-left"};var zT={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(""),i=ma(""),r=ma(!1),c=ma(!1),u=ma({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,o.value=t,s.value.show()},close:_}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("delete_inactive_host_title")),1)])),body:vl((()=>[Ks(te(o.value)+" ",1),r.value?(Ps(),js("div",qT,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const BT={class:"mt-3",style:{"max-width":"8rem"}},VT={key:0,class:"text-left"};var HT={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);ma("csv");const s=ma(),o=ma(""),i=ma(!1),r=ma(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=ma();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,i.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:u},{title:vl((()=>[Ks(te(n("delete")),1)])),body:vl((()=>[Ks(te(n("delete_since"))+" ",1),Vs("div",BT,[Hs(n_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),i.value?(Ps(),js("div",VT,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const GT={class:"mt-3",style:{"max-width":"8rem"}};var WT={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);ma("csv");const n=ma(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=ma();function i(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}_n((()=>{n.value=s[0]}));const c=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:c}),(e,t)=>(Ps(),Ls(lp,{ref_key:"modal_id",ref:o},{title:vl((()=>[Ks(te(l("download")),1)])),body:vl((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",GT,[Hs(n_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:i},null,8,["selected_option"])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const KT={class:"row"},JT={class:"col-md-12 col-lg-12"},YT={class:"card card-shadow"},ZT={class:"card-body"},XT={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},QT={class:"col-4"},eP={class:"widget-name"},tP=["title"],aP=["onClick","title"],lP={class:"card-footer mt-3"},nP=Vs("i",{class:"fas fa-trash"},null,-1),sP=Vs("i",{class:"fas fa-trash"},null,-1),oP=[Vs("i",{class:"fas fa-download"},null,-1)];var iP={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=ma("inactive_hosts");ma(a("local_hosts_only"));const n=ma([]),s=ma([]),o=ma(),i=ma(),r=ma(),c=ma(),u=ma(),d=ma(),_=ma(),p=ma(!1),f=ma();ma();const m="change_applications_tab_event",v=ma({csrf:t.csrf,ifid:t.ifid}),h=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],g=ma([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",m,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await w("overview"),b()}()}));function b(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function y(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),s.value[t].load_menu()}e.show_spinner=!1}async function w(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function k(){o.value.refresh_table()}function $(e){p.value=!p.value,g.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(m,e)}const S=()=>x.get_url_object();function N(e){let t={click_button_historical_flows:P,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function A(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function E(){c.value.show()}function T(){i.value.show()}function P(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const U=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Ps(),js(Ss,null,[Vs("div",KT,[Vs("div",JT,[Vs("div",YT,[Vs("div",ZT,[Hs(pw,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:g.value,onClick_item:$},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==p.value?(Ps(),js("div",XT,[1==p.value?(Ps(),js(Ss,{key:0},En(h,(e=>Vs("div",QT,[Vs("h3",eP,te(e.title),1),Hs(N_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Ps(),Ls(em,{key:1,ref_key:"table_inactive_hosts",ref:o,table_id:l.value,csrf:e.csrf,f_map_columns:U,get_extra_params_obj:S,onCustom_event:N},{custom_header:vl((()=>[(Ps(!0),js(Ss,null,En(n.value,((e,t)=>{return Ps(),Ls(Rd,{f_on_open:(a=e,l=t,e=>{y(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(tm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,tP)])),menu:vl((()=>[(Ps(!0),js(Ss,null,En(e.options,(a=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),b(),o.value.refresh_table(),1==p.value&&h.forEach((e=>{e.ref.value[0].update_chart()})),y(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Ps(),js(Ss,{key:0},[Ks(te(a.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,aP)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",lP,[Vs("button",{type:"button",ref:"delete_all",onClick:A,class:"btn btn-danger me-1"},[nP,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:E,class:"btn btn-danger me-1"},[sP,Ks(" "+te(a("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:T,class:"btn btn-primary me-1"},oP,512)])])])])]),Hs(zT,{ref_key:"modal_delete",ref:r,context:v.value,onDelete_host:k},null,8,["context"]),Hs(HT,{ref_key:"modal_delete_older",ref:c,context:v.value,onDelete_host:k},null,8,["context"]),Hs(WT,{ref_key:"modal_download",ref:i,context:v.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const rP={class:"row"},cP={class:"col-md-12 col-lg-12"},uP={class:"mt-4 card card-shadow"},dP={class:"card-body"};var _P={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=ma("inactive_host_details"),a=ma([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Ps(),js("div",rP,[Vs("div",cP,[Vs("div",uP,[Vs("div",dP,[Hs(Gy,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const pP={class:"table table-bordered table-striped"};var fP={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(""),s=ma(!0),o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Ps(),js(Ss,null,[Vs("table",pP,[Vs("tr",null,[Vs("th",null,te(a("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},te(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"},mP={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(""),s=ma(""),o=ma(""),i=()=>{"delete_all"==o.value?a("delete_all"):"delete_single_row"==o.value?a("delete"):"scan_all_rows"==o.value?a("scan_all_rows"):"scan_row"==o.value&&a("scan_row"),r()},r=()=>{l.value.close()};t({show:(e,t)=>{o.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e&&(s.value=i18n("scan_host_title"),n.value=t),l.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(e,t)=>(Ps(),Ls(lp,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Ks(te(n.value),1)])),footer:vl((()=>["delete_all"==o.value||"delete_single_row"==o.value?(Ps(),js("button",{key:0,type:"button",onClick:i,class:"btn btn-danger"},te(c("delete")),1)):(Ps(),js("button",{key:1,type:"button",onClick:i,class:"btn btn-primary"},te(c("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const vP={class:"form-group ms-2 me-2 mt-3 row"},hP={class:"col-form-label col-sm-4"},gP={class:"col-8"};var bP={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=ma(n.value[0]);const o=()=>{a("update",{auto_scan_frequency:s.value.id}),i()},i=()=>{l.value.close()};t({show:e=>{l.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",vP,[Vs("label",hP,[Vs("b",null,te(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",gP,[Hs(n_,{selected_option:ya(s),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},te(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const yP={class:"form-group ms-2 me-2 mt-3 row"},wP={class:"col-form-label col-sm-2"},xP={class:"col-sm-8"},kP=["placeholder"],$P={class:"col-sm-2"},SP={class:"form-group ms-2 me-2 mt-3 row"},NP={class:"col-form-label col-sm-2"},CP={class:"col-sm-10"},AP=["placeholder"],EP={class:"form-group ms-2 me-2 mt-3 row"},TP=Vs("div",{class:"col-sm-2"},null,-1),PP={class:"col-sm-3"},UP=["disabled"],IP=["title"],OP={class:"col-sm-3 mt-1"},MP={class:"form-group ms-2 me-2 mt-3 row"},jP={class:"col-form-label col-sm-2"},LP={class:"col-10"},DP={key:0,class:"form-group ms-2 me-2 mt-3 row"},FP={class:"col-form-label col-sm-2"},RP={class:"col-10 mt-2"},qP={class:"mt-4"},zP={key:0},BP=["disabled"],VP=["title"],HP={key:1},GP=["disabled"],WP=["title"];var KP={__name:"modal-add-host-to-scan",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=ma(null),s=ma(null);let o=i18n("hosts_stats.page_scan_hosts.add_host");const i=i18n("hosts_stats.page_scan_hosts.host_placeholder");let r=i18n("hosts_stats.page_scan_hosts.ports_placeholder");const c=ma(""),u=ma(""),d=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,_=`${http_prefix}/lua/iface_ports_list.lua`;http_prefix;const p=e=>i18n(e),f=ma(!0),m=ma(!1),v=ma(!1),h=ma(!1),g=ma(!1),b=[p("hosts_stats.page_scan_hosts.notes.note_1"),p("hosts_stats.page_scan_hosts.notes.note_2"),p("hosts_stats.page_scan_hosts.notes.note_3")],y=[p("hosts_stats.page_scan_hosts.notes.note_1"),p("hosts_stats.page_scan_hosts.notes.note_2"),p("hosts_stats.page_scan_hosts.notes.note_3"),p("hosts_stats.page_scan_hosts.notes.note_4")],w=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),x=ma([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),k=ma(x.value[1]),$=ma(w.value[0]),S=ma([]),N=ma(null),C=ma(null),A=ma(null),E=ma(null),T=async()=>{if(/^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$/gm.test(C.value)){"0"!=C.value.split(".")[3]&&(k.value=x.value[1]),f.value=!1}else/^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$/gm.test(C.value)?(k.value=x.value[2],f.value=!1):null!=C.value&&""!=C.value&&(f.value=!1)},P=()=>{/^(\d{1,5})(,\s*\d{1,5})*$/.test(A.value)?f.value=!1:f.value=!0};const U=async e=>{let t=C.value,n=A.value;const o=s.value.id;let i="add",r="";1==e?(i="edit",r=u.value):r=null;let c=!1;if(1==!new RegExp(mp.get_data_pattern("ip")).test(C.value)?""!=C.value?c=!0:f.value=!0:f.value=!1,c){let e=await async function(e){const t=a.buildURL(d,{host:e});return await ntopng_utility.http_request(t)}(C.value);f.value="no_success"==e,f.value||(t=e)}if(!f.value){if(E){const e=$.value.id;l(i,{host:t,scan_type:o,scan_ports:n,cidr:k.value.id,auto_scan_frequency:e,scan_id:r})}else l(i,{host:t,scan_type:o,scan_ports:n,cidr:k.value.id,scan_id:r});v.value=!0,f.value=!0}};async function I(){if(r=""!=C.value?"":i18n("hosts_stats.page_scan_hosts.ports_placeholder"),null==A.value||""==A.value)if("24"!=k.value.id){m.value=!1,h.value=!0;const e=a.buildURL(_,{host:C.value,ifid:N.value,scan_ports_rsp:!0,clisrv:"server"}),t=await ntopng_utility.http_request(e);null!=t?(A.value=t.filter((e=>"number"==typeof e.key)).map((e=>e.key)).join(","),c.value=""):("24"!=k.value.id&&(c.value=i18n("hosts_stats.page_scan_hosts.unknown_host")),A.value=""),h.value=!1}else m.value=!0,c.value=""}const O=()=>{U(!0)};dn((async()=>{s.value={}}));return t({show:(e,t)=>{C.value="",A.value="",f.value=!0,h.value=!1,v.value=!1,c.value="",u.value=null,r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),s.value=S.value[0],k.value=x.value[1],null!=e&&(e=>{null!=e&&(o=p("hosts_stats.page_scan_hosts.edit_host_title"),g.value=!0,f.value=!1,C.value=e.host,A.value=e.ports,u.value=e.id,w.value.forEach((t=>{t.id==e.scan_frequency&&($.value=t)})),S.value.forEach((t=>{t.id==e.scan_type&&(s.value=t)})),E&&w.value.forEach((t=>{t.id==e.auto_scan_frequency&&($.value=t)})),x.value.forEach((t=>{t.id==e.cidr&&(k.value=t)})))})(e),null!=t&&""!=t&&(C.value=t,f.value=!1),n.value.show()},close:()=>{n.value.close()},metricsLoaded:async(e,t,a)=>{S.value=e,N.value=t,E.value=a;let l=S.value;l.sort(((e,t)=>e.label.localeCompare(t.label))),S.value=l,s.value=S.value[0]}}),(e,t)=>(Ps(),Ls(lp,{onShowed:t[5]||(t[5]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(ya(o)),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",yP,[Vs("label",wP,[Vs("b",null,te(p("hosts_stats.page_scan_hosts.host")),1)]),Vs("div",xP,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>C.value=e),onFocusout:I,onInput:T,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,kP),[[Mi,C.value]])]),Vs("div",$P,[Hs(n_,{selected_option:k.value,"onUpdate:selected_option":t[1]||(t[1]=e=>k.value=e),options:x.value},null,8,["selected_option","options"])])]),Vs("div",SP,[Vs("label",NP,[Vs("b",null,te(p("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",CP,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>A.value=e),onFocusout:P,class:"form-control",type:"text",placeholder:ya(r),required:""},null,40,AP),[[Mi,A.value]])])]),Vs("div",EP,[TP,Vs("div",PP,[Vs("button",{type:"button",onClick:I,disabled:f.value||m.value,class:"btn btn-primary"},te(p("hosts_stats.page_scan_hosts.load_ports")),9,UP),Hs(tm,{show:h.value,size:"1rem",class:"ms-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:f.value},null,8,IP)]),Vs("div",OP,te(c.value),1)]),Vs("div",MP,[Vs("label",jP,[Vs("b",null,te(p("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",LP,[Hs(n_,{selected_option:s.value,"onUpdate:selected_option":t[3]||(t[3]=e=>s.value=e),options:S.value},null,8,["selected_option","options"])])]),1==E.value?(Ps(),js("div",DP,[Vs("label",FP,[Vs("b",null,te(p("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",RP,[Hs(n_,{selected_option:$.value,"onUpdate:selected_option":t[4]||(t[4]=e=>$.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",qP,[0==E.value?(Ps(),Ls(nm,{key:0,note_list:b})):(Ps(),Ls(nm,{key:1,note_list:y}))])])),footer:vl((()=>[0==g.value?(Ps(),js("div",zP,[Vs("button",{type:"button",onClick:U,class:"btn btn-primary",disabled:f.value},te(p("add")),9,BP),Hs(tm,{show:v.value,size:"1rem",class:"ms-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:f.value},null,8,VP)])):(Ps(),js("div",HP,[Vs("button",{type:"button",onClick:O,class:"btn btn-primary",disabled:f.value},te(p("apply")),9,GP),Hs(tm,{show:v.value,size:"1rem",class:"ms-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:f.value},null,8,WP)]))])),_:1},512))},__file:"http_src/vue/modal-add-host-to-scan.vue"};const JP={class:"row"},YP={class:"col-md-12 col-lg-12"},ZP={class:"card card-shadow"},XP={class:"card-body"},QP={key:0,class:"alert alert-info alert-dismissable"},eU=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),tU={key:1,class:"alert alert-success alert-dismissable"},aU=Vs("span",{class:"text-success me-1"},null,-1),lU={key:2,class:"alert alert-danger alert-dismissable"},nU=Vs("span",{class:"text-danger me-1"},null,-1),sU={id:"hosts_to_scan"},oU=[Vs("i",{class:"fas fa-plus"},null,-1)],iU={class:"card-footer mt-3"},rU=Vs("i",{class:"fas fa-trash"},null,-1),cU=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1);var uU={__name:"page-hosts-to-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);let l=ma(!1),n=ma(!1),s=ma(!1),o=ma(a("scan_host_inserted")),i=ma(a("scan_host_already_inserted")),r=ma(a("scan_in_progress")),c=ma(0);ma(i18n("scan_hosts"));const u=ma("hosts_to_scan");let d=a("hosts_stats.page_scan_hosts.delete_host_title"),_=a("hosts_stats.page_scan_hosts.delete_host_description"),p=a("hosts_stats.page_scan_hosts.update_periodicity_title");const f=ma(),m=ma(),v=ma();ma();const h=ma(),g=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,y=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,w=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,k=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,$=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,S=`${http_prefix}/lua/vulnerability_scan.lua`,N=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,C=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,A=ma({}),E=ma({});let T=[];const P={csrf:t.context.csrf},U=ma({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});function I(){null!=t.context.host&&""!=t.context.host?v.value.show(null,t.context.host):v.value.show()}function O(e){null!=e?f.value.refresh_table(e):f.value.refresh_table(!0)}const M=()=>x.get_url_object();function j(e){let t={click_button_edit_host:B,click_button_delete:q,click_button_scan:z,click_button_download:ie,click_button_show_result:re};null!=t[e.event_id]&&t[e.event_id](e)}function L(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"host"==e.id?(l=NtopUtils.convertIPAddress(l),n=NtopUtils.convertIPAddress(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)):"host_name"==e.id?1==e.sort?l.localeCompare(n):n.localeCompare(l):"num_vulnerabilities_found"==e.id||"num_open_ports"==e.id?(l=R(l),n=R(n),1==e.sort?l-n:n-l):"duration"==e.id?(l=void 0===t.last_scan?i18n("hosts_stats.page_scan_hosts.not_yet"):t.last_scan[e.data.data_field],n=void 0===a.last_scan?i18n("hosts_stats.page_scan_hosts.not_yet"):a.last_scan[e.data.data_field],1==e.sort?l.localeCompare(n):n.localeCompare(l)):"last_scan"==e.id?(l=void 0===t.last_scan?i18n("hosts_stats.page_scan_hosts.not_yet"):t.last_scan.time,n=void 0===a.last_scan?i18n("hosts_stats.page_scan_hosts.not_yet"):a.last_scan.time,1==e.sort?l.localeCompare(n):n.localeCompare(l)):"is_ok_last_scan"==e.id?(l=F(l,t),n=F(n,a),1==e.sort?l.localeCompare(n):n.localeCompare(l)):"scan_frequency"==e.id?(l=D(l),n=D(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)):1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function D(e){return"1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==e?i18n("hosts_stats.page_scan_hosts.weekly"):""}function F(e,t){let a="";return a=2==e?i18n("hosts_stats.page_scan_hosts.in_progress"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):i18n("hosts_stats.page_scan_hosts.error"),a+t.id}function R(e){return""===e||null===e||NaN===e||void 0===e?e=0:(e=e.split(",").join(""),e=parseInt(e)),e}async function q(e){n.value=!1,s.value=!1,Y(),A.value=e.row,m.value.show("delete_single_row",i18n("delete_vs_host"))}async function z(e){n.value=!1,s.value=!1,Y(),E.value=e.row,m.value.show("scan_row",i18n("scan_host"))}function B(e){const t=e.row;v.value.show(t)}function V(){n.value=!1,s.value=!1,Y(),m.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function H(e){await J(e)}async function G(){1==n.value&&(n.value=!1,o.value=i18n("scan_host_inserted")),1==s.value&&(i.value=i18n("scan_host_already_inserted"),s.value=!1)}async function W(){await Q(),1==l.value&&setTimeout(W,1e4)}const K=e=>{const t={download:!0,show_result:!0};let a={scan_type:(e,t)=>{if(void 0!==e){let t=e;return T.forEach((a=>{0==a.id.localeCompare(e)&&(t=a.label)})),t}},last_scan:(e,t)=>void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),duration:(e,t)=>void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),scan_frequency:e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},is_ok_last_scan:e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.in_progress"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):void 0}};return e.forEach((e=>{e.render_func=a[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(a,l)=>(a=a.filter((e=>"link-disabled"!=e)),(4==l.is_ok_last_scan||null==l.is_ok_last_scan||l.num_open_ports<1)&&t[e.id]&&a.push("link-disabled"),a)}))})),e};dn((async()=>{await X(),await Q(),v.value.metricsLoaded(T,U.ifid,t.context.is_enterprise_l)}));const J=async function(e){const t=NtopUtils.buildURL(g,{...e}),a=await b.http_post_request(t,P);if(v.value.close(),1==a.rsp)null!=e.cidr?o.value=o.value.replace("%{host}",`${e.host}/${e.cidr}`):o.value=o.value.replace("%{host}",`${e.host}`),n.value=!0,s.value=!1,i.value=i18n("scan_host_already_inserted"),setTimeout(G,1e4),O(!1);else{null!=e.cidr?i.value=i.value.replace("%{host}",`${e.host}/${e.cidr}`):i.value=i.value.replace("%{host}",`${e.host}`);let t="";T.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),i.value=i.value.replace("%{scan_type}",`${t}`),s.value=!0,n.value=!1,setTimeout(G,1e4),o.value=i18n("scan_host_inserted")}},Y=function(e){i.value=i18n("scan_host_already_inserted"),o.value=i18n("scan_host_inserted"),null!=e&&0!=e&&(r.value.includes("total")||(r.value=a("scan_in_progress")),r.value=r.value.replace("total",`${e}`))},Z=async function(e){const t=NtopUtils.buildURL(y,{...e});await b.http_post_request(t,P),n.value=!1,s.value=!1,Y(),O(!1)},X=async function(){const e=NtopUtils.buildURL($,{...P}),t=await b.http_request(e);T=t.rsp},Q=async function(){const e=NtopUtils.buildURL(C,{...P}),t=await b.http_request(e);n.value=!1,s.value=!1,Y(t.rsp.total_in_progress),l.value=t.rsp.total_in_progress>0,0==c.value?(c.value=t.rsp.total_in_progress,O(!0)):c.value!=t.rsp.total_in_progress&&(O(!0),c.value=t.rsp.total_in_progress),0==l.value&&(setTimeout(f.value.refresh_table,1e3),c.value=0)},ee=function(){m.value.show("scan_all_rows",i18n("scan_all_hosts")),O(!1)},ae=function(){h.value.show()},le=async function(){const e=E.value,t=NtopUtils.buildURL(k,{host:e.host,scan_type:e.scan_type,scan_single_host:!0,scan_ports:e.ports,scan_id:e.id});await b.http_post_request(t,P),W(),O(!1)};async function ne(){const e=NtopUtils.buildURL(k,{scan_single_host:!1});await b.http_post_request(e,P),W(),O(!1)}const se=async function(){const e=A.value,t=NtopUtils.buildURL(w,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,P),O(!1)},oe=async function(){A.value;const e=NtopUtils.buildURL(w,{delete_all_scan_hosts:!0});await b.http_post_request(e,P),l.value=!1,O(!1)};async function ie(e){let t={host:e.row.host,scan_type:e.row.scan_type},a=x.obj_to_url_params(t),l=`${N}?${a}`;b.download_URI(l)}async function re(e){let t=e.row.host,a=e.row.last_scan.time,l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",scan_date:a},n=x.obj_to_url_params(l),s=`${S}?${n}`;x.go_to_url(s)}return(e,c)=>(Ps(),js(Ss,null,[Vs("div",JP,[Vs("div",YP,[Vs("div",ZP,[Vs("div",XP,[ya(l)?(Ps(),js("div",QP,[eU,Vs("span",null,te(ya(r)),1)])):Ys("v-if",!0),ya(n)?(Ps(),js("div",tU,[aU,Vs("span",null,te(ya(o)),1)])):Ys("v-if",!0),ya(s)?(Ps(),js("div",lU,[nU,Vs("span",null,te(ya(i)),1)])):Ys("v-if",!0),Vs("div",sU,[Hs(mP,{ref_key:"modal_delete_confirm",ref:m,title:ya(d),body:ya(_),onDelete:se,onDelete_all:oe,onScan_row:le,onScan_all_rows:ne},null,8,["title","body"]),Hs(bP,{ref_key:"modal_update_perioditicy_scan",ref:h,title:ya(p),onUpdate:Z},null,8,["title"]),Hs(em,{ref_key:"table_hosts_to_scan",ref:f,table_id:u.value,csrf:U.value.csrf,f_map_columns:K,get_extra_params_obj:M,f_sort_rows:L,onCustom_event:j},{custom_header:vl((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:I},oU,512)])),_:1},8,["table_id","csrf"])])]),Vs("div",iU,[Vs("button",{type:"button",ref:"delete_all",onClick:V,class:"btn btn-danger me-1"},[rU,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"scan_all",onClick:ee,class:"btn btn-primary me-1"},[cU,Ks(" "+te(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],512),t.context.is_enterprise_l?(Ps(),js("button",{key:0,type:"button",ref:"update_all",onClick:ae,class:"btn btn-secondary me-1"},te(a("hosts_stats.page_scan_hosts.update_periodicity_title")),513)):Ys("v-if",!0)])])])]),Hs(KP,{ref_key:"modal_add",ref:v,context:U.value,onAdd:J,onEdit:H},null,8,["context"])],64))},__file:"http_src/vue/page-hosts-to-scan.vue"};const dU={class:"row"},_U={class:"col-md-12 col-lg-12"},pU={class:"card card-shadow"},fU=["innerHTML"],mU=["innerHTML"];var vU={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,l=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`;ma(null);const n=ma(!1),s=ma(""),o=ma(""),i=ma(""),r=ma("");return ma([]),dn((async()=>{await async function(e,t,c){n.value=!0;let u={host:e,scan_type:t,scan_return_result:!0},d=ntopng_url_manager.obj_to_url_params(u),_=`${a}?${d}`,p=await ntopng_utility.http_request(_);s.value=p.rsp,o.value=`<pre>${s.value}</pre>`;let f=!1;new RegExp(mp.get_data_pattern("ip")).test(e.value)||""!=e.value&&(f=!0);let m=e;if(f){const t=NtopUtils.buildURL(l,{host:e});m=await ntopng_utility.http_request(t)}const v=`<a href="${http_prefix}/lua/host_details.lua?host=${m}">${e}</a>`;r.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),r.value=r.value.replace("%{date}",c),i.value=r.value,n.value=!1}(t.context.host,t.context.scan_type,t.context.date)})),(e,t)=>(Ps(),js("div",dU,[Vs("div",_U,[Vs("div",pU,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:i.value},null,8,fU),n.value?(Ps(),Ls(mf,{key:0})):Ys("v-if",!0),Vs("div",{class:"card-body",innerHTML:o.value},null,8,mU)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const hU={key:0,class:"alert alert-info",id:"empty-message"},gU=["id"];var bU={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const a=e,l=ma(!1);const n=e=>i18n(e);return _n((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return a.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(a.url,e)}();await $.get(t,(function(e,t){const n=e.rsp;if(n.length>0){let e=function(e){let t={...sS.getDefaultSankeySettings(),...a.extra_settings};const l=d3v7.map(e,t.linkSource).map(A),n=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),o=d3v7.map(e,t.linkTargetNode).map(A),i=d3v7.map(e,t.linkLink).map(A),r=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),_=d3v7.map(e,t.sourceLink),p=d3v7.map(e,t.targetLink);let f=e,m=Array.from(d3v7.union(l,n),(e=>({id:e})));const v=d3v7.map(m,t.nodeId).map(A);t.nodeGroups=d3v7.map(m,t.nodeGroup).map(A),m=d3v7.map(m,((e,t)=>({id:v[t]}))),f=d3v7.map(f,((e,t)=>({source:l[t],target:n[t],value:r[t],source_node:s[t],target_node:o[t],link:i[t],color:c[t],source_color:u[t],target_color:d[t],source_link:_[t],target_link:p[t]})));const h=d3v7.scaleOrdinal(t.nodeGroups,t.colors),g=d3v7.map(m,t.nodeLabel),b=d3v7.map(m,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>v[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:m,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,N=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),C=d3v7.drag().on("start",(function(e,t){const a=d3v7.select(this);k=a.attr("x")-e.x,$=a.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),N.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(m).join("rect").call(C).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,a=e.targetLinks,l=t&&t[0]?t[0]:a[0];l&&(l.source.id===e.id?l.source_link&&""!==l.source_link&&window.open(l.source_link,"_blank"):l.target.id===e.id&&l.target_link&&""!==l.target_link&&window.open(l.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const a=e.sourceLinks;let l=h(t.nodeGroups[e.index]);return a&&a[0]&&(a[0].source.id===e.id?a[0].source_color&&""!==a[0].source_color&&(l=a[0].source_color):a[0].target.id===e.id&&a[0].target_color&&""!==a[0].target_color&&(l=a[0].target_color)),l})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(m).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>g[e])),Object.assign(x.node(),{scales:{color:h}})}(n);l.value=!1,$(`#${a.id}`).empty(),$(`#${a.id}`).append(e)}else $(`#${a.id}`).empty(),l.value=!0})),NtopUtils.hideOverlays()}}),(t,a)=>(Ps(),js(Ss,null,[l.value?(Ps(),js("div",hU,te(n("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,gU)],64))},__file:"http_src/vue/sankey.vue"};const yU={style:{"min-height":"8.5rem"}},wU={class:"form-group ms-2 me-2 mt-3 row"},xU={class:"col-form-label col-sm-4"},kU={class:"col-sm-6"},$U=["pattern"],SU=["disabled"];var NU={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("");ma("date");let o=NtopUtils.REGEXES.singleword;const i=xo((()=>!new RegExp(o).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",yU,[Vs("div",wU,[Vs("label",xU,[Vs("b",null,te(u("name"))+":",1)]),Vs("div",kU,[wn(Vs("input",{pattern:ya(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,$U),[[Mi,s.value]])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,disabled:ya(i),class:"btn btn-primary"},te(u("save")),9,SU)])),_:1},512))}};ap("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),NU.__scopeId="data-v-87fda19e",NU.__file="http_src/vue/modal-file-save.vue";const CU={class:"form-group ms-2 me-2 mt-3 row"},AU={class:"col-form-label col-sm-4"},EU={class:"col-sm-8"},TU={value:"name"},PU={value:"date"},UU={class:"form-group ms-2 me-2 mt-3 row"},IU={class:"col-form-label col-sm-4"},OU={class:"col-sm-8"},MU=["disabled"],jU=["disabled"];var LU={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma({}),o=ma(""),i=ma([]),r=ma("date");NtopUtils.REGEXES.singleword;const c=xo((()=>""==s.value));function u(){i.value=i.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(s.value=i.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",i.value=await l.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:p}),_n((()=>{}));const f=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",CU,[Vs("label",AU,[Vs("b",null,te(f("order_by")),1)]),Vs("div",EU,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Vs("option",TU,te(f("name")),1),Vs("option",PU,te(f("date")),1)],544),[[Fi,r.value]])])]),Vs("div",UU,[Vs("label",IU,[Vs("b",null,te(e.file_title),1)]),Vs("div",OU,[Hs(n_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(f("delete_all_entries")),1),Vs("button",{type:"button",onClick:_,disabled:ya(c),class:"btn btn-danger"},te(f("delete")),9,MU),Vs("button",{type:"button",onClick:d,disabled:ya(c),class:"btn btn-primary"},te(f("open")),9,jU)])),_:1},512))}};ap("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),LU.__scopeId="data-v-1976657e",LU.__file="http_src/vue/modal-file-open.vue";const DU=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),FU={class:"form-group ms-2 me-2 mt-3 row"},RU={class:"col-form-label col-sm-4"},qU={class:"col-sm-8"},zU=DU((()=>Vs("span",null," ",-1))),BU=["disabled"];var VU={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),o=ma(""),i=ma(null);function r(){i.value.click()}function c(e){const t=e.target.files;o.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",o.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",s.value=""}(),n.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",FU,[Vs("label",RU,[Vs("b",null,te(e.file_title),1)]),Vs("div",qU,[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(_("upload")),1),zU,wn(Vs("small",null,"No file selected",512),[[Yi,!s.value]]),wn(Vs("small",null,te(o.value),513),[[Yi,o.value]]),Vs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},te(_("open")),9,BU)])),_:1},512))}};ap("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),VU.__scopeId="data-v-9db8ba96",VU.__file="http_src/vue/modal-file-upload.vue";const HU={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var GU={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=xo((()=>`col-${t.width||4}`)),l=xo((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Ps(),js("div",{class:K([ya(a),"widget-box-main-dashboard"])},[Vs("div",{class:K([ya(l),"widget-box"]),style:{position:"relative"}},[Ys(" title "),Pn(e.$slots,"box_title"),Ys(" content "),Pn(e.$slots,"box_content"),Ys(" footer "),Vs("div",HU,[Pn(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},WU={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function},setup(e){const t=e;async function a(){}return ma("empty_component"),Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{a()}),{flush:"pre"}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Ps(),js("div"))},__file:"http_src/vue/dashboard-empty.vue"};const KU={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var JU={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function},setup(e){const t=e,l=ma("simple_table"),n=ma([]),s=xo((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&"bytes"==e.data_type&&(e.style="text-align: right"),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{c()}),{flush:"pre"}),dn((()=>{c()})),_n((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(m.types[e.data_type]){return m.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&i[t.params.table_type]){return(0,i[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];s="db_search"==t.params.table_type?l.records:l;const o=t.max_height?t.max_height/4*6:6;s=s.slice(0,o),n.value=s}return(e,t)=>(Ps(),js("div",KU,[Hs(Gy,{id:l.value,columns:ya(s),rows:n.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};ap("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),JU.__file="http_src/vue/dashboard-table.vue";const YU={class:"d-flex align-items-center justify-content-between"},ZU={class:"fw-normal text-white"},XU={class:"subtitle text-white text-sm text mb-0 h5"},QU={class:"flex-shrink-0 ms-3"};var eI={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function},setup(e){const t=e,a=e=>i18n(e);ma("empty_component");const l=ma(""),n=ma(""),s=ma("");async function o(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params},a=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,a);l.value=n[t.params.counter_path]}}return Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{o()}),{flush:"pre"}),dn((()=>{!function(){t.params.i18n_name&&(n.value=a(t.params.i18n_name));t.params.icon&&(s.value=t.params.icon+" fa-2xl");o()}()})),_n((()=>{})),(e,t)=>(Ps(),js("div",YU,[Vs("div",null,[Vs("h4",ZU,te(l.value),1),Vs("p",XU,te(n.value),1)]),Vs("div",QU,[Vs("i",{class:K(["text-white",s.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},tI={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function},setup(e){const t=e,a=ma(ntopChartApex.typeChart.DONUT),l=ma(null),n=xo((()=>`${http_prefix}${t.params.url}`)),s=()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a};function o(){const e=n.value,a=s();return t.get_component_data(e,a)}return Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre"}),dn((()=>{})),_n((()=>{})),(t,s)=>(Ps(),js("div",null,[Hs(N_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(n),get_custom_chart_options:o,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"},aI={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String},setup(e){const t=e,a=62.5,l=ma(ntopChartApex.typeChart.TS_LINE),n=ma(null),s=ma([]),o=ma(null),i=ma(null),r=ma([]),c=xo((()=>`${http_prefix}${t.params.url}`));function u(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function d(e){if(r.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=u(e,t.ifid);r.value.push(a)}))}async function _(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=jb.get_source_type_from_id(t.params?.source_type),s=await jb.get_source_array_from_value_array(http_prefix,n,[a]),o=await jb.get_metric_from_schema(http_prefix,n,s,e,null,l);return jb.get_ts_group(n,s,o)}async function p(){await async function(){const e=t.params.post_params?.ts_requests;for(const a in e||{})"$ANY_IFID$"===a?await d(e[a]):r.value.push(u(e[a],t.ifid))}(),await async function(){if(0==s.value.length)for(const e of r.value){const t=e?.ts_schema,a=await _(t,e.tskey);s.value.push(a)}null==o.value&&(o.value=ay.getGroupOptionMode("1_chart_x_yaxis"))}();const e=c.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:r.value};let l=await t.get_component_data(e,"",a);return l=ay.tsArrayToOptionsArray(l,s.value,o.value,""),l[0]&&(l[0].height=i.value),l?.[0]}return Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{!async function(){if(n.value){const e=await p();n.value.update_chart_series(e.data)}}()}),{flush:"pre"}),dn((async()=>{await async function(){i.value=(t.height||4)*a}()})),_n((async()=>{})),(t,a)=>(Ps(),js("div",null,[Hs(yg,{ref_key:"chart",ref:n,id:e.id,chart_type:l.value,base_url_request:ya(c),get_custom_chart_options:p,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"},lI={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:Number,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=ma(null),n=ma({}),s=ma(null),o=ma(null),i=ma(null);Ml((()=>[t.epoch_begin,t.epoch_end]),((e,t)=>{r()}),{flush:"pre"}),dn((()=>{})),_n((()=>{u(),d(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const o=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(s);return o.links.length>0&&o.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),o}();n.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}function u(){i.value=$(s.value).height()}function d(){o.value=$(s.value).width()}return(e,t)=>(Ps(),js("div",{ref_key:"body_div",ref:s},[Hs(tS,{ref_key:"sankey_chart",ref:l,width:o.value,height:i.value,no_data_message:ya(a),sankey_data:n.value,onUpdate_width:d,onUpdate_height:u,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const nI=e=>(pl("data-v-c360f212"),e=e(),fl(),e),sI={class:"row"},oI={class:"me-2"},iI=["title"],rI=[nI((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],cI=["title"],uI=[nI((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],dI=["title"],_I=[nI((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],pI=["title"],fI=[nI((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],mI=["title"],vI=[nI((()=>Vs("i",{class:"fas fa-print"},null,-1)))],hI={key:1,class:"mt-3",style:{"margin-bottom":"-0.5rem"}},gI={style:{"text-align":"center"}},bI={key:0,class:"dashboard-component-title"},yI={style:{color:"gray"}},wI={key:0,style:{color:"lightgray","font-size":"12px"}};var xI={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:eI,empty:WU,pie:tI,timeseries:aI,table:JU,sankey:lI},s="page-dashboard";t.context.ifid;const o=ma(null),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma([]),_=ma([]),p=ma({});let f={},m=!1;const v=xo((()=>"report"==t.context.page)),h=xo((()=>1==p.value.is_open_report)),g=xo((()=>1==p.value.is_open_report)),w=xo((()=>e=>{const t=1e3*e.epoch_begin,a=1e3*e.epoch_end,l=b.from_utc_to_server_date_format(t,"DD/MM/YYYY"),n=b.from_utc_to_server_date_format(t,"HH:mm:ss"),s=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),o=b.from_utc_to_server_date_format(a,"HH:mm:ss");return`${`${l} ${n}`} - ${l==s?`${o}`:`${s} ${o}`}`}));dn((async()=>{let e=null;"report"==t.context.page&&(e=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"),u.value=e),await async function(){const e=`${http_prefix}/lua/pro/rest/v2/get/${t.context.page}/template/list.lua`;let a=await b.http_request(e);if(null==a?.list)return;_.value=a.list.map((e=>({value:e.name,label:e.label,disabled:!1,is_open_report:!1})));const l=x.get_url_entry("report_template");p.value=_.value.find((e=>e.value==l)),null==p.value&&(p.value=_.value[0])}();let a=x.get_url_entry("report_name");null!=a&&""!=a?await D(a):await N(e)})),_n((async()=>{"dashboard"==t.context.page&&setInterval((()=>{S()}),k)}));const k=1e4;function S(e){e&&(u.value=e),d.value.forEach(((t,a)=>{A(t,e)}))}async function N(e,a){m=!1;let l=`${t.context.template_endpoint}?template=${a||t.context.template}`,s=await b.http_request(l);d.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={component_id:T(t.id,a),...t};return A(l,e),l})),await Ja()}function A(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function E(){if(1==p.value.is_open_report)return;F();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==m&&(a=b.set_default_time_interval(void 0,"min"),C.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),N(a,p.value.value)}function T(e,t){return`${s}_${e}_${t}`}function P(){i.value.show()}function U(){r.value.show()}function I(){c.value.show()}function O(){return"report-"+b.from_utc_to_server_date_format(1e3*u.value.epoch_end,"DD-MM-YYYY")}const M=async e=>{L(JSON.parse(e))},j=async()=>{let e=`${http_prefix}/lua/pro/rest/v2/get/report/backup/list.lua?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},L=async e=>{e.name;let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}m=!0,f=n,d.value=a,S(t)},D=async e=>{F(e);let a=`${http_prefix}/lua/pro/rest/v2/get/report/backup/file.lua?ifid=${t.context.ifid}&report_name=${e}`,l=await b.http_request(a);const n={epoch_begin:l.epoch_begin,epoch_end:l.epoch_end};C.emit_event(ntopng_events.EPOCH_CHANGE,n,t.context.page),L(l)};function F(e){if(_.value=_.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",p.value.value),void x.delete_key_from_url("report_name");let t={value:e,label:a("dashboard.custom"),disabled:!1,is_open_report:!0};_.value.push(t),p.value=t,x.set_key_to_url("report_name",p.value.value),x.delete_key_from_url("report_template")}const R=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${http_prefix}/lua/pro/rest/v2/delete/report/backup/file.lua`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},q=async e=>{let t={};for(var a in f)t[a]=await f[a].data;let l={version:"1.0",name:e,epoch_begin:u.value.epoch_begin,epoch_end:u.value.epoch_end,template:d.value,data:t};return JSON.stringify(l)},z=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await q(e)},n=`${http_prefix}/lua/pro/rest/v2/add/report/backup/file.lua`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function B(){var e=O(),t=e+".json",a=await q(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function V(){$(o.value).print({mediaPrint:!0,timeout:1e4,title:"Ciao Mondo"})}return(t,l)=>(Ps(),js(Ss,null,[Vs("div",sI,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),ya(v)?(Ps(),Ls(A_,{key:0,disabled_date_picker:ya(h),id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:S},{begin:vl((()=>[Vs("div",oI,[Hs(n_,{selected_option:p.value,"onUpdate:selected_option":l[0]||(l[0]=e=>p.value=e),options:_.value,onSelect_option:E},null,8,["selected_option","options"])])])),extra_buttons:vl((()=>[Vs("button",{class:"btn btn-link btn-sm",onClick:P,title:a("dashboard.store")},rI,8,iI),Vs("button",{class:"btn btn-link btn-sm",onClick:U,title:a("dashboard.open")},uI,8,cI),Vs("button",{class:"btn btn-link btn-sm",onClick:B,title:a("download")},_I,8,dI),Vs("button",{class:"btn btn-link btn-sm",onClick:I,title:a("upload")},fI,8,pI),Vs("button",{class:"btn btn-link btn-sm",onClick:V,title:a("dashboard.print")},vI,8,mI)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),ya(g)?(Ps(),js("div",hI,[Vs("h3",gI,"Report: "+te(p.value.value),1)])):Ys("v-if",!0),Vs("div",{ref_key:"report_box",ref:o,class:"row"},[(Ps(!0),js(Ss,null,En(d.value,(t=>(Ps(),Ls(GU,{style:{"min-width":"20rem"},color:t.color,width:t.width,height:t.height},{box_title:vl((()=>[t.i18n_name?(Ps(),js("div",bI,[Vs("h4",null,[Ks(te(a(t.i18n_name))+" ",1),Vs("span",yI,te(t.time_offset?a("dashboard.time_ago."+t.time_offset):""),1)])])):Ys("v-if",!0)])),box_content:vl((()=>{return[(Ps(),Ls(Sn(n[t.component]),{id:t.component_id,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid:e.context.ifid,max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(m)f[a.component_id]?n=f[a.component_id]:(console.log("No data for "+a.component_id),n.data={});else{f[a.component_id]&&(n=f[a.component_id],n.data&&await n.data);const s=`${e}?${t}`;n.data=l?b.http_post_request(s,l):b.http_request(s),f[a.component_id]=n}return n.data}),csrf:e.context.csrf},null,8,["id","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","csrf"]))];var a})),box_footer:vl((()=>["empty"!=t.component&&t.i18n_name?(Ps(),js("span",wI,te(ya(w)(t)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height"])))),256))],512)]),Ys(" div row "),Hs(NU,{ref_key:"modal_store_report",ref:i,get_suggested_file_name:O,store_file:z,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Hs(LU,{ref_key:"modal_open_report",ref:r,list_files:j,open_file:D,delete_file:R,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Hs(VU,{ref_key:"modal_upload_report",ref:c,upload_file:M,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"])],64))}};ap("\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {\n}\n"),xI.__scopeId="data-v-c360f212",xI.__file="http_src/vue/dashboard.vue";const kI=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),$I={class:"mb-3 row"},SI={class:"col-form-label col-sm-4"},NI={class:"col-sm-6"},CI={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},AI=kI((()=>Vs("hr",null,null,-1))),EI={class:"host-alert-fields"},TI={class:"mb-3 row"},PI={class:"col-form-label col-sm-4"},UI={class:"col-sm-6"},II={value:""},OI={value:"0"},MI={disabled:""},jI=["value"],LI={class:"flow-alert-fields"},DI={class:"mb-3 row"},FI={class:"col-form-label col-sm-4"},RI={class:"col-sm-6"},qI={value:""},zI={value:"0"},BI={disabled:""},VI=["value"],HI={key:0,class:"ip-fields"},GI={class:"mb-3 row"},WI={class:"col-form-label col-sm-4"},KI={class:"col-sm-6"},JI=["pattern"],YI={key:1,class:"network-fields"},ZI={class:"mb-3 row"},XI={class:"col-form-label col-sm-4"},QI={class:"col-sm-4 pr-0"},eO=["pattern"],tO={class:"col-sm-2 ps-4 pe-0"},aO=kI((()=>Vs("span",{class:"me-2"},"/",-1))),lO={class:"mb-3 row"},nO={class:"col-form-label col-sm-4"},sO={class:"col-sm-6"},oO={class:"mb-3 row"},iO={class:"col-form-label col-sm-4"},rO={key:0},cO={key:1},uO={class:"col-sm-6"},dO=["pattern"],_O=["pattern"],pO=kI((()=>Vs("hr",{class:"separator mt-5"},null,-1))),fO={class:"form-group row"},mO={class:"col-form-label"},vO={class:"mt-1"},hO=["placeholder"],gO=["disabled"];var bO={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null);ma(null);const s=ma("ip"),o=ma(""),i=ma(""),r=ma(0),c=ma(""),u=ma(""),d=ma(""),_=ma(""),p=ma(null),f=i18n("details.comment_placeholder"),m=ma(null),v=ma(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip"),b=h("text"),y=h("certificate");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value:null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=()=>{let e,t=o.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${i.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,m.value&&(e.old_type=v.value.type,e.old_subdir=v.value.subdir,e.old_alert_domain=v.value.alert_domain,e.old_alert_certificate=v.value.alert_certificate,e.old_alert_addr=v.value.alert_addr,e.old_flow_alert_key=v.value.flow_alert_key,e.old_host_alert_key=v.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(m.value=!0,v.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",i.value=t[0],_.value=t[1],o.value=""):(s.value="ip",o.value=a[0],i.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",o.value="",i.value="",r.value=0,u.value="",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),_n((()=>{}));const S=e=>i18n(e);return(t,a)=>(Ps(),Ls(lp,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(S("check_exclusion.add_exclusion")),1)])),body:vl((()=>["hosts"==e.alert_exclusions_page?(Ps(),js(Ss,{key:0},[Ys(" modal hosts "),Vs("div",$I,[Vs("label",SI,[Vs("b",null,te(S("check_exclusion.member_type")),1)]),Vs("div",NI,[Vs("div",CI,[Vs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(S("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(S("check_exclusion.network")),1)],2)])])]),AI,Vs("div",EI,[Vs("div",TI,[Vs("label",PI,[Vs("b",null,te(S("check_exclusion.host_alert_type")),1)]),Vs("div",UI,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",II,te(S("check_exclusion.none")),1),Vs("option",OI,te(S("check_exclusion.exclude_all_alerts")),1),Vs("option",MI,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.host_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,jI)):Ys("v-if",!0)],64)))),256))],512),[[Fi,u.value]])])])]),Vs("div",LI,[Vs("div",DI,[Vs("label",FI,[Vs("b",null,te(S("check_exclusion.flow_alert_type")),1)]),Vs("div",RI,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",qI,te(S("check_exclusion.none")),1),Vs("option",zI,te(S("check_exclusion.exclude_all_alerts")),1),Vs("option",BI,te(S("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.flow_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,VI)):Ys("v-if",!0)],64)))),256))],512),[[Fi,d.value]])])])]),"ip"==s.value?(Ps(),js("div",HI,[Vs("div",GI,[Vs("label",WI,[Vs("b",null,te(S("check_exclusion.ip_address")),1)]),Vs("div",KI,[wn(Vs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>o.value=e)},null,8,JI),[[Mi,o.value]])])])])):Ys("v-if",!0),"network"==s.value?(Ps(),js("div",YI,[Vs("div",ZI,[Vs("label",XI,[Vs("b",null,te(S("check_exclusion.network")),1)]),Vs("div",QI,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,eO),[[Mi,i.value]])]),Vs("div",tO,[aO,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[Mi,_.value]])])])])):Ys("v-if",!0),Vs("div",lO,[Vs("label",nO,[Vs("b",null,te(S("vlan")),1)]),Vs("div",sO,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[Mi,r.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),js(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",oO,[Vs("label",iO,["domain_names"==e.alert_exclusions_page?(Ps(),js("b",rO,te(S("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),js("b",cO,te(S("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",uO,["domain_names"==e.alert_exclusions_page?wn((Ps(),js("input",{key:0,placeholder:"",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,dO)),[[Mi,c.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Ps(),js("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,_O)),[[Mi,c.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),pO,Vs("div",fO,[Vs("div",null,[Vs("label",mO,[Vs("b",null,te(S("show_alerts.add_a_comment")),1)])]),Vs("div",vO,[wn(Vs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,hO),[[Mi,p.value]])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:x(),onClick:$,class:"btn btn-primary"},te(S("add")),9,gO)])),_:1},512))}};ap("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),bO.__scopeId="data-v-7e5acce0",bO.__file="http_src/vue/modal-add-check-exclusion.vue";let yO={PageAlertStats:qh,PageFlowHistorical:bg,PageStats:_w,PageAssetTable:yw,PagePeriodicityTable:Iw,PageServiceTable:Yw,PageServiceMap:fx,PagePeriodicityMap:Ox,PageAssetMap:ek,PageDeviceExclusions:zk,PageHostTLS:a$,PageHostSSH:u$,PageHomeMap:g$,PageSankey:w$,PageHostRules:$N,PageAlertAnalysis:HN,PageHostMap:aC,PageManageConfigurationBackup:aE,PageManageConfigurationBackup2:rE,PageSNMPDeviceRules:QE,PageHostsPortsAnalysis:hT,PageInactiveHosts:iP,PageInactiveHostDetails:_P,PageHostsToScan:uU,PageHostVsResult:vU,PageEditApplications:FA,PageVLANPortsFlowSankey:mC,PageTestTable:jC,PageSnmpDevicesInterfacesSimilarity:eT,NedgeRulesConfig:kA,NedgeRepeatersConfig:RT,PageHostDetailsApplications:k$,PageHostDetailsTraffic:z$,PageHostDetailsPackets:Z$,PageHostDetailsFlowSankey:gS,PageHostDetailsPorts:IN,PageAggregatedLiveFlows:$C,PageAggregatedLiveFlowsV2:OC,PageNetworkDiscovery:JA,PageFlowDeviceDetails:fP,AlertInfo:$_,Chart:N_,TimeseriesChart:yg,Datatable:Ly,DateTimeRangePicker:A_,NetworkMap:dx,RangePicker:qp,PageNavbar:s_,SelectSearch:n_,TabList:pw,Sankey:bU,NoteList:nm,Loading:mf,Dashboard:xI,DashboardBox:GU,DashboardEmpty:WU,DashboardTable:JU,DashboardBadge:eI,DashboardPie:tI,DashboardTimeseries:aI,DashboardSankey:lI,ListTimeseries:Vg,Modal:lp,ModalAddCheckExclusion:bO,ModalAlertsFilter:Tv,ModalFilters:vp,ModalTimeseries:Cy,ModalTrafficExtraction:sm,ModalDeleteConfirm:gw,ModalSnapshot:Zm,ModalAddDeviceExclusion:Ck,ModalEditDeviceExclusion:qk,ModalAddHostRules:mN,ModalAddApplication:jA,ModalDeleteApplication:LA,Vue:Od};window.ntopVue=yO;var wO=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function xO(){const e=e=>$(wO[3])[wO[2]]($(e)[wO[1]]())[wO[0]]();let t=wO[4];const a=(()=>{let a=$(t),l=i18n(wO[5])[wO[7]](wO[6]);$(wO[8],a)[wO[0]](l[0]),$(wO[9],a)[wO[0]](l[1]);let n=`${wO[10]}${i18n(wO[11])}${wO[12]}`;return $(wO[13],a)[wO[0]](n),e(a)})(),l=()=>{$(wO[14])[wO[2]](a)};l();const n=()=>$(wO[16])[wO[15]]()[wO[15]]()[wO[15]]()[wO[15]]()[wO[15]]();ntopng_events_manager[wO[23]](wO[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[wO[1]]();$(wO[16],l)[wO[0]](wO[17]),$(wO[18],l)[wO[0]](wO[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[wO[19]]()})(),l()),(e=>{$(wO[16])[wO[0]](e[wO[20]]),$(wO[18])[wO[0]](e[wO[21]])})(t)}))}$(document)[wO[24]]((()=>xO()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
